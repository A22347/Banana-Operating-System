
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 d8 fb 00 00       	call   c000fbf8 <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 63 82 02 00       	call   c0028288 <_init>
c0000025:	c3                   	ret    
c0000026:	bb 32 8e 02 c0       	mov    ebx,0xc0028e32
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 40 8e 02 c0    	cmp    ebx,0xc0028e40
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 98 d5 02 c0       	mov    eax,0xc002d598
c0000049:	3d 98 d5 02 c0       	cmp    eax,0xc002d598
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 98 d5 02 c0       	push   0xc002d598
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 98 d5 02 c0       	mov    eax,0xc002d598
c0000075:	2d 98 d5 02 c0       	sub    eax,0xc002d598
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 98 d5 02 c0       	push   0xc002d598
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d c8 db 02 c0 00 	cmp    BYTE PTR ds:0xc002dbc8,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 48 8e 02 c0       	mov    ebx,0xc0028e48
c00000bb:	81 eb 44 8e 02 c0    	sub    ebx,0xc0028e44
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 44 8e 02 c0       	mov    esi,0xc0028e44
c00000ca:	a1 cc db 02 c0       	mov    eax,ds:0xc002dbcc
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 cc db 02 c0       	mov    ds:0xc002dbcc,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 cc db 02 c0       	mov    eax,ds:0xc002dbcc
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 98 d5 02 c0       	push   0xc002d598
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 c8 db 02 c0 01 	mov    BYTE PTR ds:0xc002dbc8,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 d0 db 02 c0       	push   0xc002dbd0
c000012c:	68 98 d5 02 c0       	push   0xc002d598
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	85 d2                	test   edx,edx
c0000391:	75 11                	jne    c00003a4 <commonThreadSwitch.firstTime>
c0000393:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c0000396:	e8 3d d2 01 00       	call   c001d5d8 <changeTSS>
c000039b:	5d                   	pop    ebp
c000039c:	5f                   	pop    edi
c000039d:	5e                   	pop    esi
c000039e:	5a                   	pop    edx
c000039f:	59                   	pop    ecx
c00003a0:	5b                   	pop    ebx
c00003a1:	58                   	pop    eax
c00003a2:	9d                   	popf   
c00003a3:	c3                   	ret    

c00003a4 <commonThreadSwitch.firstTime>:
c00003a4:	fa                   	cli    
c00003a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003a8:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003ad:	60                   	pusha  
c00003ae:	e8 9c 25 01 00       	call   c001294f <mapVASFirstTime>
c00003b3:	61                   	popa   
c00003b4:	89 c4                	mov    esp,eax
c00003b6:	56                   	push   esi
c00003b7:	52                   	push   edx
c00003b8:	e8 1b d2 01 00       	call   c001d5d8 <changeTSS>
c00003bd:	5a                   	pop    edx
c00003be:	5e                   	pop    esi
c00003bf:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003c6:	5d                   	pop    ebp
c00003c7:	5f                   	pop    edi
c00003c8:	5e                   	pop    esi
c00003c9:	59                   	pop    ecx
c00003ca:	59                   	pop    ecx
c00003cb:	5b                   	pop    ebx
c00003cc:	58                   	pop    eax
c00003cd:	81 c4 04 00 00 00    	add    esp,0x4
c00003d3:	6a 02                	push   0x2
c00003d5:	9d                   	popf   
c00003d6:	52                   	push   edx
c00003d7:	e8 69 d6 01 00       	call   c001da45 <taskStartupFunction>
c00003dc:	5a                   	pop    edx
c00003dd:	50                   	push   eax
c00003de:	ff d2                	call   edx
c00003e0:	e8 17 dc 01 00       	call   c001dffc <taskReturned>
c00003e5:	e9 fb ff ff ff       	jmp    c00003e5 <commonThreadSwitch.firstTime+0x41>

c00003ea <asmQuickAcquireLock>:
c00003ea:	55                   	push   ebp
c00003eb:	89 e5                	mov    ebp,esp
c00003ed:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f0 <asmQuickAcquireLock.retry>:
c00003f0:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003f5:	72 02                	jb     c00003f9 <asmQuickAcquireLock.spin_with_pause>
c00003f7:	fa                   	cli    
c00003f8:	c3                   	ret    

c00003f9 <asmQuickAcquireLock.spin_with_pause>:
c00003f9:	f3 90                	pause  
c00003fb:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000401:	75 f6                	jne    c00003f9 <asmQuickAcquireLock.spin_with_pause>
c0000403:	e9 e8 ff ff ff       	jmp    c00003f0 <asmQuickAcquireLock.retry>

c0000408 <asmQuickReleaseLock>:
c0000408:	55                   	push   ebp
c0000409:	89 e5                	mov    ebp,esp
c000040b:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000412:	5d                   	pop    ebp
c0000413:	c3                   	ret    

c0000414 <asmAcquireLock>:
c0000414:	55                   	push   ebp
c0000415:	89 e5                	mov    ebp,esp
c0000417:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000041a <asmAcquireLock.retry>:
c000041a:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c000041f:	72 05                	jb     c0000426 <asmAcquireLock.spin_with_pause>
c0000421:	9c                   	pushf  
c0000422:	58                   	pop    eax
c0000423:	fa                   	cli    
c0000424:	5d                   	pop    ebp
c0000425:	c3                   	ret    

c0000426 <asmAcquireLock.spin_with_pause>:
c0000426:	f3 90                	pause  
c0000428:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c000042e:	75 f6                	jne    c0000426 <asmAcquireLock.spin_with_pause>
c0000430:	e9 e5 ff ff ff       	jmp    c000041a <asmAcquireLock.retry>

c0000435 <asmReleaseLock>:
c0000435:	55                   	push   ebp
c0000436:	89 e5                	mov    ebp,esp
c0000438:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000043b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000043e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000444:	52                   	push   edx
c0000445:	9d                   	popf   
c0000446:	5d                   	pop    ebp
c0000447:	c3                   	ret    

c0000448 <loadGDT>:
c0000448:	0f 01 15 10 e0 02 c0 	lgdtd  ds:0xc002e010
c000044f:	66 b8 10 00          	mov    ax,0x10
c0000453:	66 8e d8             	mov    ds,ax
c0000456:	66 8e c0             	mov    es,ax
c0000459:	66 8e e0             	mov    fs,ax
c000045c:	66 8e e8             	mov    gs,ax
c000045f:	66 8e d0             	mov    ss,ax
c0000462:	e9 00 00 00 00       	jmp    c0000467 <flush2>

c0000467 <flush2>:
c0000467:	c3                   	ret    

c0000468 <isr0>:
c0000468:	fa                   	cli    
c0000469:	68 00 00 00 00       	push   0x0
c000046e:	68 00 00 00 00       	push   0x0
c0000473:	e9 44 01 00 00       	jmp    c00005bc <int_common_stub>

c0000478 <isr1>:
c0000478:	fa                   	cli    
c0000479:	6a 00                	push   0x0
c000047b:	6a 01                	push   0x1
c000047d:	e9 3a 01 00 00       	jmp    c00005bc <int_common_stub>

c0000482 <isr2>:
c0000482:	fa                   	cli    
c0000483:	6a 00                	push   0x0
c0000485:	6a 02                	push   0x2
c0000487:	e9 30 01 00 00       	jmp    c00005bc <int_common_stub>

c000048c <isr3>:
c000048c:	fa                   	cli    
c000048d:	6a 00                	push   0x0
c000048f:	6a 03                	push   0x3
c0000491:	e9 26 01 00 00       	jmp    c00005bc <int_common_stub>

c0000496 <isr4>:
c0000496:	fa                   	cli    
c0000497:	6a 00                	push   0x0
c0000499:	6a 04                	push   0x4
c000049b:	e9 1c 01 00 00       	jmp    c00005bc <int_common_stub>

c00004a0 <isr5>:
c00004a0:	fa                   	cli    
c00004a1:	6a 00                	push   0x0
c00004a3:	6a 05                	push   0x5
c00004a5:	e9 12 01 00 00       	jmp    c00005bc <int_common_stub>

c00004aa <isr6>:
c00004aa:	fa                   	cli    
c00004ab:	6a 00                	push   0x0
c00004ad:	6a 06                	push   0x6
c00004af:	e9 08 01 00 00       	jmp    c00005bc <int_common_stub>

c00004b4 <isr7>:
c00004b4:	fa                   	cli    
c00004b5:	6a 00                	push   0x0
c00004b7:	6a 07                	push   0x7
c00004b9:	e9 fe 00 00 00       	jmp    c00005bc <int_common_stub>

c00004be <isr8>:
c00004be:	fa                   	cli    
c00004bf:	6a 08                	push   0x8
c00004c1:	e9 f6 00 00 00       	jmp    c00005bc <int_common_stub>

c00004c6 <isr9>:
c00004c6:	fa                   	cli    
c00004c7:	6a 00                	push   0x0
c00004c9:	6a 09                	push   0x9
c00004cb:	e9 ec 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d0 <isr10>:
c00004d0:	fa                   	cli    
c00004d1:	6a 0a                	push   0xa
c00004d3:	e9 e4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004d8 <isr11>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0b                	push   0xb
c00004db:	e9 dc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e0 <isr12>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0c                	push   0xc
c00004e3:	e9 d4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004e8 <isr13>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0d                	push   0xd
c00004eb:	e9 cc 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f0 <isr14>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0e                	push   0xe
c00004f3:	e9 c4 00 00 00       	jmp    c00005bc <int_common_stub>

c00004f8 <isr15>:
c00004f8:	fa                   	cli    
c00004f9:	6a 00                	push   0x0
c00004fb:	6a 0f                	push   0xf
c00004fd:	e9 ba 00 00 00       	jmp    c00005bc <int_common_stub>

c0000502 <isr16>:
c0000502:	fa                   	cli    
c0000503:	6a 00                	push   0x0
c0000505:	6a 10                	push   0x10
c0000507:	e9 b0 00 00 00       	jmp    c00005bc <int_common_stub>

c000050c <isr17>:
c000050c:	fa                   	cli    
c000050d:	6a 00                	push   0x0
c000050f:	6a 11                	push   0x11
c0000511:	e9 a6 00 00 00       	jmp    c00005bc <int_common_stub>

c0000516 <isr18>:
c0000516:	fa                   	cli    
c0000517:	6a 00                	push   0x0
c0000519:	6a 12                	push   0x12
c000051b:	e9 9c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000520 <irq3>:
c0000520:	fa                   	cli    
c0000521:	6a 00                	push   0x0
c0000523:	6a 23                	push   0x23
c0000525:	e9 92 00 00 00       	jmp    c00005bc <int_common_stub>

c000052a <irq4>:
c000052a:	fa                   	cli    
c000052b:	6a 00                	push   0x0
c000052d:	6a 24                	push   0x24
c000052f:	e9 88 00 00 00       	jmp    c00005bc <int_common_stub>

c0000534 <irq5>:
c0000534:	fa                   	cli    
c0000535:	6a 00                	push   0x0
c0000537:	6a 25                	push   0x25
c0000539:	e9 7e 00 00 00       	jmp    c00005bc <int_common_stub>

c000053e <irq6>:
c000053e:	fa                   	cli    
c000053f:	6a 00                	push   0x0
c0000541:	6a 26                	push   0x26
c0000543:	e9 74 00 00 00       	jmp    c00005bc <int_common_stub>

c0000548 <irq7>:
c0000548:	fa                   	cli    
c0000549:	6a 00                	push   0x0
c000054b:	6a 27                	push   0x27
c000054d:	e9 6a 00 00 00       	jmp    c00005bc <int_common_stub>

c0000552 <irq8>:
c0000552:	fa                   	cli    
c0000553:	6a 00                	push   0x0
c0000555:	6a 28                	push   0x28
c0000557:	e9 60 00 00 00       	jmp    c00005bc <int_common_stub>

c000055c <irq9>:
c000055c:	fa                   	cli    
c000055d:	6a 00                	push   0x0
c000055f:	6a 29                	push   0x29
c0000561:	e9 56 00 00 00       	jmp    c00005bc <int_common_stub>

c0000566 <irq10>:
c0000566:	fa                   	cli    
c0000567:	6a 00                	push   0x0
c0000569:	6a 2a                	push   0x2a
c000056b:	e9 4c 00 00 00       	jmp    c00005bc <int_common_stub>

c0000570 <irq11>:
c0000570:	fa                   	cli    
c0000571:	6a 00                	push   0x0
c0000573:	6a 2b                	push   0x2b
c0000575:	e9 42 00 00 00       	jmp    c00005bc <int_common_stub>

c000057a <irq12>:
c000057a:	fa                   	cli    
c000057b:	6a 00                	push   0x0
c000057d:	6a 2c                	push   0x2c
c000057f:	e9 38 00 00 00       	jmp    c00005bc <int_common_stub>

c0000584 <irq13>:
c0000584:	fa                   	cli    
c0000585:	6a 00                	push   0x0
c0000587:	6a 2d                	push   0x2d
c0000589:	e9 2e 00 00 00       	jmp    c00005bc <int_common_stub>

c000058e <irq14>:
c000058e:	fa                   	cli    
c000058f:	6a 00                	push   0x0
c0000591:	6a 2e                	push   0x2e
c0000593:	e9 24 00 00 00       	jmp    c00005bc <int_common_stub>

c0000598 <irq15>:
c0000598:	fa                   	cli    
c0000599:	6a 00                	push   0x0
c000059b:	6a 2f                	push   0x2f
c000059d:	e9 1a 00 00 00       	jmp    c00005bc <int_common_stub>

c00005a2 <irq1>:
c00005a2:	fa                   	cli    
c00005a3:	6a 00                	push   0x0
c00005a5:	6a 21                	push   0x21
c00005a7:	eb 13                	jmp    c00005bc <int_common_stub>

c00005a9 <irq2>:
c00005a9:	fa                   	cli    
c00005aa:	6a 00                	push   0x0
c00005ac:	6a 22                	push   0x22
c00005ae:	eb 0c                	jmp    c00005bc <int_common_stub>

c00005b0 <isr96>:
c00005b0:	6a 00                	push   0x0
c00005b2:	6a 60                	push   0x60
c00005b4:	fb                   	sti    
c00005b5:	eb 05                	jmp    c00005bc <int_common_stub>

c00005b7 <irq0>:
c00005b7:	fa                   	cli    
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 20                	push   0x20

c00005bc <int_common_stub>:
c00005bc:	60                   	pusha  
c00005bd:	1e                   	push   ds
c00005be:	06                   	push   es
c00005bf:	0f a0                	push   fs
c00005c1:	0f a8                	push   gs
c00005c3:	66 b8 10 00          	mov    ax,0x10
c00005c7:	66 8e d8             	mov    ds,ax
c00005ca:	66 8e c0             	mov    es,ax
c00005cd:	66 8e e0             	mov    fs,ax
c00005d0:	66 8e e8             	mov    gs,ax
c00005d3:	54                   	push   esp
c00005d4:	e8 7a 42 01 00       	call   c0014853 <int_handler>
c00005d9:	81 c4 04 00 00 00    	add    esp,0x4
c00005df:	0f a9                	pop    gs
c00005e1:	0f a1                	pop    fs
c00005e3:	07                   	pop    es
c00005e4:	1f                   	pop    ds
c00005e5:	61                   	popa   
c00005e6:	81 c4 08 00 00 00    	add    esp,0x8
c00005ec:	cf                   	iret   

c00005ed <irq16>:
c00005ed:	fa                   	cli    
c00005ee:	6a 00                	push   0x0
c00005f0:	6a 30                	push   0x30
c00005f2:	e9 c5 ff ff ff       	jmp    c00005bc <int_common_stub>

c00005f7 <irq17>:
c00005f7:	fa                   	cli    
c00005f8:	6a 00                	push   0x0
c00005fa:	6a 31                	push   0x31
c00005fc:	e9 bb ff ff ff       	jmp    c00005bc <int_common_stub>

c0000601 <irq18>:
c0000601:	fa                   	cli    
c0000602:	6a 00                	push   0x0
c0000604:	6a 32                	push   0x32
c0000606:	e9 b1 ff ff ff       	jmp    c00005bc <int_common_stub>

c000060b <irq19>:
c000060b:	fa                   	cli    
c000060c:	6a 00                	push   0x0
c000060e:	6a 33                	push   0x33
c0000610:	e9 a7 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000615 <irq20>:
c0000615:	fa                   	cli    
c0000616:	6a 00                	push   0x0
c0000618:	6a 34                	push   0x34
c000061a:	e9 9d ff ff ff       	jmp    c00005bc <int_common_stub>

c000061f <irq21>:
c000061f:	fa                   	cli    
c0000620:	6a 00                	push   0x0
c0000622:	6a 35                	push   0x35
c0000624:	e9 93 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000629 <irq22>:
c0000629:	fa                   	cli    
c000062a:	6a 00                	push   0x0
c000062c:	6a 36                	push   0x36
c000062e:	e9 89 ff ff ff       	jmp    c00005bc <int_common_stub>

c0000633 <irq23>:
c0000633:	fa                   	cli    
c0000634:	6a 00                	push   0x0
c0000636:	6a 37                	push   0x37
c0000638:	e9 7f ff ff ff       	jmp    c00005bc <int_common_stub>
c000063d:	66 90                	xchg   ax,ax
c000063f:	90                   	nop

c0000640 <memcmp>:
c0000640:	56                   	push   esi
c0000641:	53                   	push   ebx
c0000642:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000646:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000064a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000064e:	85 f6                	test   esi,esi
c0000650:	74 1d                	je     c000066f <memcmp+0x2f>
c0000652:	8a 08                	mov    cl,BYTE PTR [eax]
c0000654:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000657:	38 cb                	cmp    bl,cl
c0000659:	75 19                	jne    c0000674 <memcmp+0x34>
c000065b:	01 c6                	add    esi,eax
c000065d:	eb 0a                	jmp    c0000669 <memcmp+0x29>
c000065f:	90                   	nop
c0000660:	8a 08                	mov    cl,BYTE PTR [eax]
c0000662:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000665:	38 d9                	cmp    cl,bl
c0000667:	75 0b                	jne    c0000674 <memcmp+0x34>
c0000669:	40                   	inc    eax
c000066a:	42                   	inc    edx
c000066b:	39 f0                	cmp    eax,esi
c000066d:	75 f1                	jne    c0000660 <memcmp+0x20>
c000066f:	31 c0                	xor    eax,eax
c0000671:	5b                   	pop    ebx
c0000672:	5e                   	pop    esi
c0000673:	c3                   	ret    
c0000674:	0f b6 c1             	movzx  eax,cl
c0000677:	29 d8                	sub    eax,ebx
c0000679:	5b                   	pop    ebx
c000067a:	5e                   	pop    esi
c000067b:	c3                   	ret    

c000067c <memmove>:
c000067c:	55                   	push   ebp
c000067d:	57                   	push   edi
c000067e:	56                   	push   esi
c000067f:	53                   	push   ebx
c0000680:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000684:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0000688:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000068c:	39 dd                	cmp    ebp,ebx
c000068e:	0f 83 80 00 00 00    	jae    c0000714 <memmove+0x98>
c0000694:	85 d2                	test   edx,edx
c0000696:	74 74                	je     c000070c <memmove+0x90>
c0000698:	8d 4b 04             	lea    ecx,[ebx+0x4]
c000069b:	8d 75 04             	lea    esi,[ebp+0x4]
c000069e:	39 cd                	cmp    ebp,ecx
c00006a0:	0f 93 c1             	setae  cl
c00006a3:	39 f3                	cmp    ebx,esi
c00006a5:	0f 93 c0             	setae  al
c00006a8:	89 c6                	mov    esi,eax
c00006aa:	09 ce                	or     esi,ecx
c00006ac:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006af:	89 f0                	mov    eax,esi
c00006b1:	83 f9 0c             	cmp    ecx,0xc
c00006b4:	0f 97 c1             	seta   cl
c00006b7:	84 c8                	test   al,cl
c00006b9:	74 75                	je     c0000730 <memmove+0xb4>
c00006bb:	89 e9                	mov    ecx,ebp
c00006bd:	09 d9                	or     ecx,ebx
c00006bf:	83 e1 03             	and    ecx,0x3
c00006c2:	75 6c                	jne    c0000730 <memmove+0xb4>
c00006c4:	89 d7                	mov    edi,edx
c00006c6:	89 d9                	mov    ecx,ebx
c00006c8:	83 e7 fc             	and    edi,0xfffffffc
c00006cb:	89 ee                	mov    esi,ebp
c00006cd:	01 df                	add    edi,ebx
c00006cf:	90                   	nop
c00006d0:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006d2:	83 c6 04             	add    esi,0x4
c00006d5:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00006d8:	83 c1 04             	add    ecx,0x4
c00006db:	39 f9                	cmp    ecx,edi
c00006dd:	75 f1                	jne    c00006d0 <memmove+0x54>
c00006df:	89 d1                	mov    ecx,edx
c00006e1:	89 d7                	mov    edi,edx
c00006e3:	83 e1 fc             	and    ecx,0xfffffffc
c00006e6:	29 cf                	sub    edi,ecx
c00006e8:	01 cb                	add    ebx,ecx
c00006ea:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c00006ee:	39 ca                	cmp    edx,ecx
c00006f0:	74 1a                	je     c000070c <memmove+0x90>
c00006f2:	8a 03                	mov    al,BYTE PTR [ebx]
c00006f4:	83 ff 01             	cmp    edi,0x1
c00006f7:	88 06                	mov    BYTE PTR [esi],al
c00006f9:	74 11                	je     c000070c <memmove+0x90>
c00006fb:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00006fe:	83 ff 02             	cmp    edi,0x2
c0000701:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000704:	74 06                	je     c000070c <memmove+0x90>
c0000706:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000709:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000070c:	5b                   	pop    ebx
c000070d:	89 e8                	mov    eax,ebp
c000070f:	5e                   	pop    esi
c0000710:	5f                   	pop    edi
c0000711:	5d                   	pop    ebp
c0000712:	c3                   	ret    
c0000713:	90                   	nop
c0000714:	76 f6                	jbe    c000070c <memmove+0x90>
c0000716:	85 d2                	test   edx,edx
c0000718:	74 f2                	je     c000070c <memmove+0x90>
c000071a:	4b                   	dec    ebx
c000071b:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000071e:	66 90                	xchg   ax,ax
c0000720:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0000723:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c0000726:	4a                   	dec    edx
c0000727:	75 f7                	jne    c0000720 <memmove+0xa4>
c0000729:	5b                   	pop    ebx
c000072a:	89 e8                	mov    eax,ebp
c000072c:	5e                   	pop    esi
c000072d:	5f                   	pop    edi
c000072e:	5d                   	pop    ebp
c000072f:	c3                   	ret    
c0000730:	01 ea                	add    edx,ebp
c0000732:	89 e9                	mov    ecx,ebp
c0000734:	8a 03                	mov    al,BYTE PTR [ebx]
c0000736:	41                   	inc    ecx
c0000737:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c000073a:	43                   	inc    ebx
c000073b:	39 d1                	cmp    ecx,edx
c000073d:	75 f5                	jne    c0000734 <memmove+0xb8>
c000073f:	eb cb                	jmp    c000070c <memmove+0x90>
c0000741:	8d 76 00             	lea    esi,[esi+0x0]

c0000744 <memcpy>:
c0000744:	57                   	push   edi
c0000745:	56                   	push   esi
c0000746:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000074a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000074e:	a8 03                	test   al,0x3
c0000750:	74 12                	je     c0000764 <memcpy+0x20>
c0000752:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000756:	89 c1                	mov    ecx,eax
c0000758:	fc                   	cld    
c0000759:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000075b:	29 c7                	sub    edi,eax
c000075d:	5e                   	pop    esi
c000075e:	89 f8                	mov    eax,edi
c0000760:	5f                   	pop    edi
c0000761:	c3                   	ret    
c0000762:	66 90                	xchg   ax,ax
c0000764:	89 c1                	mov    ecx,eax
c0000766:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000076a:	c1 e9 02             	shr    ecx,0x2
c000076d:	fc                   	cld    
c000076e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0000770:	29 c7                	sub    edi,eax
c0000772:	5e                   	pop    esi
c0000773:	89 f8                	mov    eax,edi
c0000775:	5f                   	pop    edi
c0000776:	c3                   	ret    
c0000777:	90                   	nop

c0000778 <memset>:
c0000778:	57                   	push   edi
c0000779:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000077d:	85 c9                	test   ecx,ecx
c000077f:	74 0b                	je     c000078c <memset+0x14>
c0000781:	fc                   	cld    
c0000782:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000786:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000078a:	f3 aa                	rep stos BYTE PTR es:[edi],al
c000078c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000790:	5f                   	pop    edi
c0000791:	c3                   	ret    
c0000792:	66 90                	xchg   ax,ax

c0000794 <strlen>:
c0000794:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000798:	31 c0                	xor    eax,eax
c000079a:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c000079d:	74 09                	je     c00007a8 <strlen+0x14>
c000079f:	90                   	nop
c00007a0:	40                   	inc    eax
c00007a1:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c00007a5:	75 f9                	jne    c00007a0 <strlen+0xc>
c00007a7:	c3                   	ret    
c00007a8:	c3                   	ret    
c00007a9:	8d 76 00             	lea    esi,[esi+0x0]

c00007ac <strpbrk>:
c00007ac:	57                   	push   edi
c00007ad:	56                   	push   esi
c00007ae:	53                   	push   ebx
c00007af:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007b3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007b7:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007b9:	84 db                	test   bl,bl
c00007bb:	74 21                	je     c00007de <strpbrk+0x32>
c00007bd:	8a 07                	mov    al,BYTE PTR [edi]
c00007bf:	84 c0                	test   al,al
c00007c1:	74 14                	je     c00007d7 <strpbrk+0x2b>
c00007c3:	38 d8                	cmp    al,bl
c00007c5:	74 19                	je     c00007e0 <strpbrk+0x34>
c00007c7:	89 fa                	mov    edx,edi
c00007c9:	eb 05                	jmp    c00007d0 <strpbrk+0x24>
c00007cb:	90                   	nop
c00007cc:	38 d9                	cmp    cl,bl
c00007ce:	74 10                	je     c00007e0 <strpbrk+0x34>
c00007d0:	42                   	inc    edx
c00007d1:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007d3:	84 c9                	test   cl,cl
c00007d5:	75 f5                	jne    c00007cc <strpbrk+0x20>
c00007d7:	46                   	inc    esi
c00007d8:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007da:	84 db                	test   bl,bl
c00007dc:	75 e1                	jne    c00007bf <strpbrk+0x13>
c00007de:	31 f6                	xor    esi,esi
c00007e0:	89 f0                	mov    eax,esi
c00007e2:	5b                   	pop    ebx
c00007e3:	5e                   	pop    esi
c00007e4:	5f                   	pop    edi
c00007e5:	c3                   	ret    
c00007e6:	66 90                	xchg   ax,ax

c00007e8 <strtok>:
c00007e8:	56                   	push   esi
c00007e9:	53                   	push   ebx
c00007ea:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007ee:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007f2:	85 db                	test   ebx,ebx
c00007f4:	75 07                	jne    c00007fd <strtok+0x15>
c00007f6:	eb 2c                	jmp    c0000824 <strtok+0x3c>
c00007f8:	43                   	inc    ebx
c00007f9:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007fd:	56                   	push   esi
c00007fe:	53                   	push   ebx
c00007ff:	e8 a8 ff ff ff       	call   c00007ac <strpbrk>
c0000804:	5a                   	pop    edx
c0000805:	a3 e8 db 02 c0       	mov    ds:0xc002dbe8,eax
c000080a:	59                   	pop    ecx
c000080b:	39 d8                	cmp    eax,ebx
c000080d:	74 e9                	je     c00007f8 <strtok+0x10>
c000080f:	85 c0                	test   eax,eax
c0000811:	74 1b                	je     c000082e <strtok+0x46>
c0000813:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000816:	8d 50 01             	lea    edx,[eax+0x1]
c0000819:	89 d8                	mov    eax,ebx
c000081b:	89 15 e8 db 02 c0    	mov    DWORD PTR ds:0xc002dbe8,edx
c0000821:	5b                   	pop    ebx
c0000822:	5e                   	pop    esi
c0000823:	c3                   	ret    
c0000824:	8b 1d e8 db 02 c0    	mov    ebx,DWORD PTR ds:0xc002dbe8
c000082a:	85 db                	test   ebx,ebx
c000082c:	75 cf                	jne    c00007fd <strtok+0x15>
c000082e:	31 c0                	xor    eax,eax
c0000830:	5b                   	pop    ebx
c0000831:	5e                   	pop    esi
c0000832:	c3                   	ret    
c0000833:	90                   	nop

c0000834 <strcpy>:
c0000834:	53                   	push   ebx
c0000835:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000839:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000083d:	89 c3                	mov    ebx,eax
c000083f:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000841:	84 d2                	test   dl,dl
c0000843:	74 0d                	je     c0000852 <strcpy+0x1e>
c0000845:	8d 76 00             	lea    esi,[esi+0x0]
c0000848:	88 13                	mov    BYTE PTR [ebx],dl
c000084a:	41                   	inc    ecx
c000084b:	43                   	inc    ebx
c000084c:	8a 11                	mov    dl,BYTE PTR [ecx]
c000084e:	84 d2                	test   dl,dl
c0000850:	75 f6                	jne    c0000848 <strcpy+0x14>
c0000852:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000855:	5b                   	pop    ebx
c0000856:	c3                   	ret    
c0000857:	90                   	nop

c0000858 <strncpy>:
c0000858:	55                   	push   ebp
c0000859:	57                   	push   edi
c000085a:	56                   	push   esi
c000085b:	53                   	push   ebx
c000085c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000860:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000864:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000868:	85 c0                	test   eax,eax
c000086a:	74 39                	je     c00008a5 <strncpy+0x4d>
c000086c:	8a 1e                	mov    bl,BYTE PTR [esi]
c000086e:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000871:	8d 55 01             	lea    edx,[ebp+0x1]
c0000874:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0000877:	84 db                	test   bl,bl
c0000879:	74 31                	je     c00008ac <strncpy+0x54>
c000087b:	85 c9                	test   ecx,ecx
c000087d:	74 26                	je     c00008a5 <strncpy+0x4d>
c000087f:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000882:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000885:	8d 55 02             	lea    edx,[ebp+0x2]
c0000888:	8d 46 02             	lea    eax,[esi+0x2]
c000088b:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c000088e:	84 db                	test   bl,bl
c0000890:	75 0f                	jne    c00008a1 <strncpy+0x49>
c0000892:	eb 18                	jmp    c00008ac <strncpy+0x54>
c0000894:	40                   	inc    eax
c0000895:	42                   	inc    edx
c0000896:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c0000899:	49                   	dec    ecx
c000089a:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c000089d:	84 db                	test   bl,bl
c000089f:	74 0b                	je     c00008ac <strncpy+0x54>
c00008a1:	85 c9                	test   ecx,ecx
c00008a3:	75 ef                	jne    c0000894 <strncpy+0x3c>
c00008a5:	5b                   	pop    ebx
c00008a6:	89 e8                	mov    eax,ebp
c00008a8:	5e                   	pop    esi
c00008a9:	5f                   	pop    edi
c00008aa:	5d                   	pop    ebp
c00008ab:	c3                   	ret    
c00008ac:	85 c9                	test   ecx,ecx
c00008ae:	74 f5                	je     c00008a5 <strncpy+0x4d>
c00008b0:	fc                   	cld    
c00008b1:	31 c0                	xor    eax,eax
c00008b3:	89 d7                	mov    edi,edx
c00008b5:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008b7:	89 e8                	mov    eax,ebp
c00008b9:	5b                   	pop    ebx
c00008ba:	5e                   	pop    esi
c00008bb:	5f                   	pop    edi
c00008bc:	5d                   	pop    ebp
c00008bd:	c3                   	ret    
c00008be:	66 90                	xchg   ax,ax

c00008c0 <strcmp>:
c00008c0:	56                   	push   esi
c00008c1:	53                   	push   ebx
c00008c2:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008c6:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008ca:	8a 16                	mov    dl,BYTE PTR [esi]
c00008cc:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008cf:	38 d1                	cmp    cl,dl
c00008d1:	75 1d                	jne    c00008f0 <strcmp+0x30>
c00008d3:	84 c9                	test   cl,cl
c00008d5:	74 21                	je     c00008f8 <strcmp+0x38>
c00008d7:	b8 01 00 00 00       	mov    eax,0x1
c00008dc:	eb 07                	jmp    c00008e5 <strcmp+0x25>
c00008de:	66 90                	xchg   ax,ax
c00008e0:	40                   	inc    eax
c00008e1:	84 d2                	test   dl,dl
c00008e3:	74 13                	je     c00008f8 <strcmp+0x38>
c00008e5:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008e8:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008ec:	38 ca                	cmp    dl,cl
c00008ee:	74 f0                	je     c00008e0 <strcmp+0x20>
c00008f0:	0f b6 c2             	movzx  eax,dl
c00008f3:	5b                   	pop    ebx
c00008f4:	29 c8                	sub    eax,ecx
c00008f6:	5e                   	pop    esi
c00008f7:	c3                   	ret    
c00008f8:	31 c0                	xor    eax,eax
c00008fa:	5b                   	pop    ebx
c00008fb:	5e                   	pop    esi
c00008fc:	c3                   	ret    
c00008fd:	8d 76 00             	lea    esi,[esi+0x0]

c0000900 <strchr>:
c0000900:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000904:	8a 10                	mov    dl,BYTE PTR [eax]
c0000906:	84 d2                	test   dl,dl
c0000908:	74 15                	je     c000091f <strchr+0x1f>
c000090a:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c000090e:	38 ca                	cmp    dl,cl
c0000910:	75 06                	jne    c0000918 <strchr+0x18>
c0000912:	eb 0e                	jmp    c0000922 <strchr+0x22>
c0000914:	38 ca                	cmp    dl,cl
c0000916:	74 09                	je     c0000921 <strchr+0x21>
c0000918:	40                   	inc    eax
c0000919:	8a 10                	mov    dl,BYTE PTR [eax]
c000091b:	84 d2                	test   dl,dl
c000091d:	75 f5                	jne    c0000914 <strchr+0x14>
c000091f:	31 c0                	xor    eax,eax
c0000921:	c3                   	ret    
c0000922:	c3                   	ret    
c0000923:	90                   	nop

c0000924 <strncmp>:
c0000924:	57                   	push   edi
c0000925:	56                   	push   esi
c0000926:	53                   	push   ebx
c0000927:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000092b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000092f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000933:	85 ff                	test   edi,edi
c0000935:	74 28                	je     c000095f <strncmp+0x3b>
c0000937:	8a 16                	mov    dl,BYTE PTR [esi]
c0000939:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c000093c:	38 d1                	cmp    cl,dl
c000093e:	75 28                	jne    c0000968 <strncmp+0x44>
c0000940:	8d 46 01             	lea    eax,[esi+0x1]
c0000943:	84 c9                	test   cl,cl
c0000945:	74 18                	je     c000095f <strncmp+0x3b>
c0000947:	01 fe                	add    esi,edi
c0000949:	eb 0f                	jmp    c000095a <strncmp+0x36>
c000094b:	90                   	nop
c000094c:	8a 10                	mov    dl,BYTE PTR [eax]
c000094e:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000951:	38 ca                	cmp    dl,cl
c0000953:	75 13                	jne    c0000968 <strncmp+0x44>
c0000955:	40                   	inc    eax
c0000956:	84 d2                	test   dl,dl
c0000958:	74 05                	je     c000095f <strncmp+0x3b>
c000095a:	43                   	inc    ebx
c000095b:	39 c6                	cmp    esi,eax
c000095d:	75 ed                	jne    c000094c <strncmp+0x28>
c000095f:	5b                   	pop    ebx
c0000960:	31 c0                	xor    eax,eax
c0000962:	5e                   	pop    esi
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]
c0000968:	5b                   	pop    ebx
c0000969:	0f b6 c2             	movzx  eax,dl
c000096c:	5e                   	pop    esi
c000096d:	29 c8                	sub    eax,ecx
c000096f:	5f                   	pop    edi
c0000970:	c3                   	ret    
c0000971:	8d 76 00             	lea    esi,[esi+0x0]

c0000974 <strcat>:
c0000974:	56                   	push   esi
c0000975:	53                   	push   ebx
c0000976:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000097a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000097e:	89 c3                	mov    ebx,eax
c0000980:	eb 04                	jmp    c0000986 <strcat+0x12>
c0000982:	66 90                	xchg   ax,ax
c0000984:	89 d3                	mov    ebx,edx
c0000986:	8d 53 01             	lea    edx,[ebx+0x1]
c0000989:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c000098d:	75 f5                	jne    c0000984 <strcat+0x10>
c000098f:	31 d2                	xor    edx,edx
c0000991:	8d 76 00             	lea    esi,[esi+0x0]
c0000994:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000997:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000099a:	42                   	inc    edx
c000099b:	84 c9                	test   cl,cl
c000099d:	75 f5                	jne    c0000994 <strcat+0x20>
c000099f:	5b                   	pop    ebx
c00009a0:	5e                   	pop    esi
c00009a1:	c3                   	ret    
c00009a2:	66 90                	xchg   ax,ax

c00009a4 <strncat>:
c00009a4:	56                   	push   esi
c00009a5:	53                   	push   ebx
c00009a6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00009aa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009ae:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009b2:	85 f6                	test   esi,esi
c00009b4:	74 1e                	je     c00009d4 <strncat+0x30>
c00009b6:	89 c2                	mov    edx,eax
c00009b8:	42                   	inc    edx
c00009b9:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009bd:	75 f9                	jne    c00009b8 <strncat+0x14>
c00009bf:	01 ce                	add    esi,ecx
c00009c1:	eb 06                	jmp    c00009c9 <strncat+0x25>
c00009c3:	90                   	nop
c00009c4:	39 f1                	cmp    ecx,esi
c00009c6:	74 10                	je     c00009d8 <strncat+0x34>
c00009c8:	42                   	inc    edx
c00009c9:	41                   	inc    ecx
c00009ca:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009cd:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009d0:	84 db                	test   bl,bl
c00009d2:	75 f0                	jne    c00009c4 <strncat+0x20>
c00009d4:	5b                   	pop    ebx
c00009d5:	5e                   	pop    esi
c00009d6:	c3                   	ret    
c00009d7:	90                   	nop
c00009d8:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009db:	5b                   	pop    ebx
c00009dc:	5e                   	pop    esi
c00009dd:	c3                   	ret    
c00009de:	66 90                	xchg   ax,ax

c00009e0 <strstr>:
c00009e0:	57                   	push   edi
c00009e1:	56                   	push   esi
c00009e2:	53                   	push   ebx
c00009e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009e7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009eb:	57                   	push   edi
c00009ec:	e8 a3 fd ff ff       	call   c0000794 <strlen>
c00009f1:	59                   	pop    ecx
c00009f2:	85 c0                	test   eax,eax
c00009f4:	74 2a                	je     c0000a20 <strstr+0x40>
c00009f6:	89 c6                	mov    esi,eax
c00009f8:	eb 12                	jmp    c0000a0c <strstr+0x2c>
c00009fa:	66 90                	xchg   ax,ax
c00009fc:	56                   	push   esi
c00009fd:	57                   	push   edi
c00009fe:	53                   	push   ebx
c00009ff:	e8 3c fc ff ff       	call   c0000640 <memcmp>
c0000a04:	83 c4 0c             	add    esp,0xc
c0000a07:	85 c0                	test   eax,eax
c0000a09:	74 15                	je     c0000a20 <strstr+0x40>
c0000a0b:	43                   	inc    ebx
c0000a0c:	53                   	push   ebx
c0000a0d:	e8 82 fd ff ff       	call   c0000794 <strlen>
c0000a12:	5a                   	pop    edx
c0000a13:	39 f0                	cmp    eax,esi
c0000a15:	73 e5                	jae    c00009fc <strstr+0x1c>
c0000a17:	5b                   	pop    ebx
c0000a18:	31 c0                	xor    eax,eax
c0000a1a:	5e                   	pop    esi
c0000a1b:	5f                   	pop    edi
c0000a1c:	c3                   	ret    
c0000a1d:	8d 76 00             	lea    esi,[esi+0x0]
c0000a20:	89 d8                	mov    eax,ebx
c0000a22:	5b                   	pop    ebx
c0000a23:	5e                   	pop    esi
c0000a24:	5f                   	pop    edi
c0000a25:	c3                   	ret    
c0000a26:	66 90                	xchg   ax,ax

c0000a28 <toupper>:
c0000a28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a2c:	0f b6 d0             	movzx  edx,al
c0000a2f:	f6 82 60 8e 02 c0 02 	test   BYTE PTR [edx-0x3ffd71a0],0x2
c0000a36:	74 03                	je     c0000a3b <toupper+0x13>
c0000a38:	83 e8 20             	sub    eax,0x20
c0000a3b:	c3                   	ret    

c0000a3c <tolower>:
c0000a3c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a40:	0f b6 d0             	movzx  edx,al
c0000a43:	f6 82 60 8e 02 c0 01 	test   BYTE PTR [edx-0x3ffd71a0],0x1
c0000a4a:	74 03                	je     c0000a4f <tolower+0x13>
c0000a4c:	83 c0 20             	add    eax,0x20
c0000a4f:	c3                   	ret    

c0000a50 <simple_strtoul>:
c0000a50:	55                   	push   ebp
c0000a51:	57                   	push   edi
c0000a52:	56                   	push   esi
c0000a53:	53                   	push   ebx
c0000a54:	83 ec 08             	sub    esp,0x8
c0000a57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a5b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a5f:	90                   	nop
c0000a60:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a63:	f6 82 60 8e 02 c0 08 	test   BYTE PTR [edx-0x3ffd71a0],0x8
c0000a6a:	75 05                	jne    c0000a71 <simple_strtoul+0x21>
c0000a6c:	80 fa 09             	cmp    dl,0x9
c0000a6f:	75 03                	jne    c0000a74 <simple_strtoul+0x24>
c0000a71:	41                   	inc    ecx
c0000a72:	eb ec                	jmp    c0000a60 <simple_strtoul+0x10>
c0000a74:	80 fa 2d             	cmp    dl,0x2d
c0000a77:	0f 84 1b 01 00 00    	je     c0000b98 <simple_strtoul+0x148>
c0000a7d:	80 fa 2b             	cmp    dl,0x2b
c0000a80:	0f 84 c2 00 00 00    	je     c0000b48 <simple_strtoul+0xf8>
c0000a86:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a8e:	85 f6                	test   esi,esi
c0000a90:	0f 85 c3 00 00 00    	jne    c0000b59 <simple_strtoul+0x109>
c0000a96:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a98:	80 fa 30             	cmp    dl,0x30
c0000a9b:	0f 84 47 01 00 00    	je     c0000be8 <simple_strtoul+0x198>
c0000aa1:	be 0a 00 00 00       	mov    esi,0xa
c0000aa6:	84 d2                	test   dl,dl
c0000aa8:	0f 84 6f 01 00 00    	je     c0000c1d <simple_strtoul+0x1cd>
c0000aae:	31 ed                	xor    ebp,ebp
c0000ab0:	31 ff                	xor    edi,edi
c0000ab2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000ab9:	eb 2b                	jmp    c0000ae6 <simple_strtoul+0x96>
c0000abb:	90                   	nop
c0000abc:	83 eb 30             	sub    ebx,0x30
c0000abf:	39 f3                	cmp    ebx,esi
c0000ac1:	73 4d                	jae    c0000b10 <simple_strtoul+0xc0>
c0000ac3:	31 d2                	xor    edx,edx
c0000ac5:	89 d8                	mov    eax,ebx
c0000ac7:	f7 d0                	not    eax
c0000ac9:	f7 f6                	div    esi
c0000acb:	39 f8                	cmp    eax,edi
c0000acd:	0f 82 b1 00 00 00    	jb     c0000b84 <simple_strtoul+0x134>
c0000ad3:	0f af fe             	imul   edi,esi
c0000ad6:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000add:	01 df                	add    edi,ebx
c0000adf:	41                   	inc    ecx
c0000ae0:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ae2:	84 d2                	test   dl,dl
c0000ae4:	74 2a                	je     c0000b10 <simple_strtoul+0xc0>
c0000ae6:	0f b6 da             	movzx  ebx,dl
c0000ae9:	f6 83 60 8e 02 c0 04 	test   BYTE PTR [ebx-0x3ffd71a0],0x4
c0000af0:	75 ca                	jne    c0000abc <simple_strtoul+0x6c>
c0000af2:	0f be d2             	movsx  edx,dl
c0000af5:	52                   	push   edx
c0000af6:	e8 2d ff ff ff       	call   c0000a28 <toupper>
c0000afb:	5b                   	pop    ebx
c0000afc:	0f b6 d0             	movzx  edx,al
c0000aff:	f6 82 60 8e 02 c0 01 	test   BYTE PTR [edx-0x3ffd71a0],0x1
c0000b06:	74 08                	je     c0000b10 <simple_strtoul+0xc0>
c0000b08:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000b0b:	39 f3                	cmp    ebx,esi
c0000b0d:	72 b4                	jb     c0000ac3 <simple_strtoul+0x73>
c0000b0f:	90                   	nop
c0000b10:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b14:	85 c0                	test   eax,eax
c0000b16:	74 14                	je     c0000b2c <simple_strtoul+0xdc>
c0000b18:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b1b:	09 f8                	or     eax,edi
c0000b1d:	75 71                	jne    c0000b90 <simple_strtoul+0x140>
c0000b1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b23:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b27:	31 ff                	xor    edi,edi
c0000b29:	89 30                	mov    DWORD PTR [eax],esi
c0000b2b:	90                   	nop
c0000b2c:	4d                   	dec    ebp
c0000b2d:	75 05                	jne    c0000b34 <simple_strtoul+0xe4>
c0000b2f:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b34:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b39:	75 02                	jne    c0000b3d <simple_strtoul+0xed>
c0000b3b:	f7 df                	neg    edi
c0000b3d:	83 c4 08             	add    esp,0x8
c0000b40:	89 f8                	mov    eax,edi
c0000b42:	5b                   	pop    ebx
c0000b43:	5e                   	pop    esi
c0000b44:	5f                   	pop    edi
c0000b45:	5d                   	pop    ebp
c0000b46:	c3                   	ret    
c0000b47:	90                   	nop
c0000b48:	41                   	inc    ecx
c0000b49:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b51:	85 f6                	test   esi,esi
c0000b53:	0f 84 3d ff ff ff    	je     c0000a96 <simple_strtoul+0x46>
c0000b59:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b5c:	83 f8 22             	cmp    eax,0x22
c0000b5f:	77 6a                	ja     c0000bcb <simple_strtoul+0x17b>
c0000b61:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b63:	83 fe 08             	cmp    esi,0x8
c0000b66:	0f 84 a2 00 00 00    	je     c0000c0e <simple_strtoul+0x1be>
c0000b6c:	83 fe 10             	cmp    esi,0x10
c0000b6f:	0f 85 31 ff ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000b75:	80 fa 30             	cmp    dl,0x30
c0000b78:	74 2c                	je     c0000ba6 <simple_strtoul+0x156>
c0000b7a:	be 10 00 00 00       	mov    esi,0x10
c0000b7f:	e9 22 ff ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000b84:	bd 01 00 00 00       	mov    ebp,0x1
c0000b89:	31 ff                	xor    edi,edi
c0000b8b:	e9 4f ff ff ff       	jmp    c0000adf <simple_strtoul+0x8f>
c0000b90:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b94:	89 08                	mov    DWORD PTR [eax],ecx
c0000b96:	eb 94                	jmp    c0000b2c <simple_strtoul+0xdc>
c0000b98:	41                   	inc    ecx
c0000b99:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000ba1:	e9 e8 fe ff ff       	jmp    c0000a8e <simple_strtoul+0x3e>
c0000ba6:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000baa:	88 04 24             	mov    BYTE PTR [esp],al
c0000bad:	50                   	push   eax
c0000bae:	e8 89 fe ff ff       	call   c0000a3c <tolower>
c0000bb3:	5e                   	pop    esi
c0000bb4:	83 f8 78             	cmp    eax,0x78
c0000bb7:	0f 84 84 00 00 00    	je     c0000c41 <simple_strtoul+0x1f1>
c0000bbd:	41                   	inc    ecx
c0000bbe:	be 10 00 00 00       	mov    esi,0x10
c0000bc3:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bc6:	e9 db fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000bcb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bcf:	85 ff                	test   edi,edi
c0000bd1:	74 5c                	je     c0000c2f <simple_strtoul+0x1df>
c0000bd3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bd7:	85 c9                	test   ecx,ecx
c0000bd9:	75 4e                	jne    c0000c29 <simple_strtoul+0x1d9>
c0000bdb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000be1:	31 ff                	xor    edi,edi
c0000be3:	e9 4c ff ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000be8:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000bec:	88 04 24             	mov    BYTE PTR [esp],al
c0000bef:	50                   	push   eax
c0000bf0:	e8 47 fe ff ff       	call   c0000a3c <tolower>
c0000bf5:	5d                   	pop    ebp
c0000bf6:	83 f8 78             	cmp    eax,0x78
c0000bf9:	74 3b                	je     c0000c36 <simple_strtoul+0x1e6>
c0000bfb:	41                   	inc    ecx
c0000bfc:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bff:	80 fa 30             	cmp    dl,0x30
c0000c02:	74 13                	je     c0000c17 <simple_strtoul+0x1c7>
c0000c04:	be 08 00 00 00       	mov    esi,0x8
c0000c09:	e9 98 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>
c0000c0e:	80 fa 30             	cmp    dl,0x30
c0000c11:	0f 85 8f fe ff ff    	jne    c0000aa6 <simple_strtoul+0x56>
c0000c17:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c1a:	41                   	inc    ecx
c0000c1b:	eb e7                	jmp    c0000c04 <simple_strtoul+0x1b4>
c0000c1d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c21:	85 d2                	test   edx,edx
c0000c23:	74 0a                	je     c0000c2f <simple_strtoul+0x1df>
c0000c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c29:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c2d:	89 30                	mov    DWORD PTR [eax],esi
c0000c2f:	31 ff                	xor    edi,edi
c0000c31:	e9 fe fe ff ff       	jmp    c0000b34 <simple_strtoul+0xe4>
c0000c36:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c39:	83 c1 02             	add    ecx,0x2
c0000c3c:	e9 34 ff ff ff       	jmp    c0000b75 <simple_strtoul+0x125>
c0000c41:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c44:	be 10 00 00 00       	mov    esi,0x10
c0000c49:	83 c1 02             	add    ecx,0x2
c0000c4c:	e9 55 fe ff ff       	jmp    c0000aa6 <simple_strtoul+0x56>

c0000c51 <largebin_index>:
c0000c51:	89 c2                	mov    edx,eax
c0000c53:	c1 ea 08             	shr    edx,0x8
c0000c56:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c5c:	77 10                	ja     c0000c6e <largebin_index+0x1d>
c0000c5e:	0f bd d2             	bsr    edx,edx
c0000c61:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c64:	d3 e8                	shr    eax,cl
c0000c66:	83 e0 03             	and    eax,0x3
c0000c69:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c6d:	c3                   	ret    
c0000c6e:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c73:	c3                   	ret    

c0000c74 <malloc_init_state>:
c0000c74:	53                   	push   ebx
c0000c75:	8d 50 34             	lea    edx,[eax+0x34]
c0000c78:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c7e:	89 d1                	mov    ecx,edx
c0000c80:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c83:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c86:	83 c2 08             	add    edx,0x8
c0000c89:	39 da                	cmp    edx,ebx
c0000c8b:	75 f3                	jne    c0000c80 <malloc_init_state+0xc>
c0000c8d:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c8f:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c99:	83 e2 03             	and    edx,0x3
c0000c9c:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000ca6:	83 ca 48             	or     edx,0x48
c0000ca9:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000cb3:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cbd:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cc4:	89 10                	mov    DWORD PTR [eax],edx
c0000cc6:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cc9:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cd3:	5b                   	pop    ebx
c0000cd4:	c3                   	ret    

c0000cd5 <malloc_consolidate>:
c0000cd5:	8b 10                	mov    edx,DWORD PTR [eax]
c0000cd7:	85 d2                	test   edx,edx
c0000cd9:	0f 84 d8 00 00 00    	je     c0000db7 <malloc_consolidate+0xe2>
c0000cdf:	55                   	push   ebp
c0000ce0:	83 e2 fd             	and    edx,0xfffffffd
c0000ce3:	57                   	push   edi
c0000ce4:	89 c5                	mov    ebp,eax
c0000ce6:	56                   	push   esi
c0000ce7:	8d 78 34             	lea    edi,[eax+0x34]
c0000cea:	53                   	push   ebx
c0000ceb:	83 ec 10             	sub    esp,0x10
c0000cee:	89 10                	mov    DWORD PTR [eax],edx
c0000cf0:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000cf4:	c1 ea 03             	shr    edx,0x3
c0000cf7:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cfb:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cff:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000d02:	85 d2                	test   edx,edx
c0000d04:	0f 84 98 00 00 00    	je     c0000da2 <malloc_consolidate+0xcd>
c0000d0a:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d11:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d14:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d17:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d1b:	89 f9                	mov    ecx,edi
c0000d1d:	83 e1 fe             	and    ecx,0xfffffffe
c0000d20:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d23:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d26:	83 e3 fc             	and    ebx,0xfffffffc
c0000d29:	83 e7 01             	and    edi,0x1
c0000d2c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d2f:	75 14                	jne    c0000d45 <malloc_consolidate+0x70>
c0000d31:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d33:	29 fa                	sub    edx,edi
c0000d35:	01 f9                	add    ecx,edi
c0000d37:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d3a:	89 fb                	mov    ebx,edi
c0000d3c:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d3f:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d42:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d45:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d48:	74 40                	je     c0000d8a <malloc_consolidate+0xb5>
c0000d4a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d4d:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d50:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d54:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d57:	83 e7 01             	and    edi,0x1
c0000d5a:	75 0e                	jne    c0000d6a <malloc_consolidate+0x95>
c0000d5c:	01 d9                	add    ecx,ebx
c0000d5e:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d61:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d64:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d67:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d6a:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d6d:	89 ce                	mov    esi,ecx
c0000d6f:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d72:	83 ce 01             	or     esi,0x1
c0000d75:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d78:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d7b:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d7e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d82:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d85:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d88:	eb 0c                	jmp    c0000d96 <malloc_consolidate+0xc1>
c0000d8a:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d8d:	83 c9 01             	or     ecx,0x1
c0000d90:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d93:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d96:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d9a:	85 d2                	test   edx,edx
c0000d9c:	0f 85 6f ff ff ff    	jne    c0000d11 <malloc_consolidate+0x3c>
c0000da2:	83 c5 04             	add    ebp,0x4
c0000da5:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000da9:	0f 85 50 ff ff ff    	jne    c0000cff <malloc_consolidate+0x2a>
c0000daf:	83 c4 10             	add    esp,0x10
c0000db2:	5b                   	pop    ebx
c0000db3:	5e                   	pop    esi
c0000db4:	5f                   	pop    edi
c0000db5:	5d                   	pop    ebp
c0000db6:	c3                   	ret    
c0000db7:	e9 b8 fe ff ff       	jmp    c0000c74 <malloc_init_state>

c0000dbc <dlfree>:
c0000dbc:	57                   	push   edi
c0000dbd:	56                   	push   esi
c0000dbe:	53                   	push   ebx
c0000dbf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000dc3:	85 db                	test   ebx,ebx
c0000dc5:	0f 84 e2 00 00 00    	je     c0000ead <dlfree+0xf1>
c0000dcb:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dce:	8b 0d 00 dc 02 c0    	mov    ecx,DWORD PTR ds:0xc002dc00
c0000dd4:	89 f0                	mov    eax,esi
c0000dd6:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dd9:	83 e0 fc             	and    eax,0xfffffffc
c0000ddc:	39 c1                	cmp    ecx,eax
c0000dde:	72 24                	jb     c0000e04 <dlfree+0x48>
c0000de0:	83 c9 03             	or     ecx,0x3
c0000de3:	c1 e8 03             	shr    eax,0x3
c0000de6:	89 0d 00 dc 02 c0    	mov    DWORD PTR ds:0xc002dc00,ecx
c0000dec:	83 e8 02             	sub    eax,0x2
c0000def:	8b 0c 85 04 dc 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd23fc]
c0000df6:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000df8:	89 14 85 04 dc 02 c0 	mov    DWORD PTR [eax*4-0x3ffd23fc],edx
c0000dff:	e9 a9 00 00 00       	jmp    c0000ead <dlfree+0xf1>
c0000e04:	83 e6 02             	and    esi,0x2
c0000e07:	0f 85 a0 00 00 00    	jne    c0000ead <dlfree+0xf1>
c0000e0d:	83 c9 01             	or     ecx,0x1
c0000e10:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e13:	89 0d 00 dc 02 c0    	mov    DWORD PTR ds:0xc002dc00,ecx
c0000e19:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e1c:	83 e1 fc             	and    ecx,0xfffffffc
c0000e1f:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e23:	75 13                	jne    c0000e38 <dlfree+0x7c>
c0000e25:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e28:	29 da                	sub    edx,ebx
c0000e2a:	01 d8                	add    eax,ebx
c0000e2c:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e2f:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e32:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e35:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e38:	39 35 2c dc 02 c0    	cmp    DWORD PTR ds:0xc002dc2c,esi
c0000e3e:	74 40                	je     c0000e80 <dlfree+0xc4>
c0000e40:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e44:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e47:	80 e3 01             	and    bl,0x1
c0000e4a:	75 0e                	jne    c0000e5a <dlfree+0x9e>
c0000e4c:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e4f:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e52:	01 c8                	add    eax,ecx
c0000e54:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e57:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e5a:	8b 0d 3c dc 02 c0    	mov    ecx,DWORD PTR ds:0xc002dc3c
c0000e60:	c7 42 0c 34 dc 02 c0 	mov    DWORD PTR [edx+0xc],0xc002dc34
c0000e67:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e6a:	89 15 3c dc 02 c0    	mov    DWORD PTR ds:0xc002dc3c,edx
c0000e70:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e73:	89 c1                	mov    ecx,eax
c0000e75:	83 c9 01             	or     ecx,0x1
c0000e78:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7b:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e7e:	eb 10                	jmp    c0000e90 <dlfree+0xd4>
c0000e80:	01 c8                	add    eax,ecx
c0000e82:	89 c1                	mov    ecx,eax
c0000e84:	83 c9 01             	or     ecx,0x1
c0000e87:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e8a:	89 15 2c dc 02 c0    	mov    DWORD PTR ds:0xc002dc2c,edx
c0000e90:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e95:	76 16                	jbe    c0000ead <dlfree+0xf1>
c0000e97:	f6 05 00 dc 02 c0 02 	test   BYTE PTR ds:0xc002dc00,0x2
c0000e9e:	74 0d                	je     c0000ead <dlfree+0xf1>
c0000ea0:	5b                   	pop    ebx
c0000ea1:	b8 00 dc 02 c0       	mov    eax,0xc002dc00
c0000ea6:	5e                   	pop    esi
c0000ea7:	5f                   	pop    edi
c0000ea8:	e9 28 fe ff ff       	jmp    c0000cd5 <malloc_consolidate>
c0000ead:	5b                   	pop    ebx
c0000eae:	5e                   	pop    esi
c0000eaf:	5f                   	pop    edi
c0000eb0:	c3                   	ret    

c0000eb1 <sYSMALLOc>:
c0000eb1:	55                   	push   ebp
c0000eb2:	57                   	push   edi
c0000eb3:	56                   	push   esi
c0000eb4:	53                   	push   ebx
c0000eb5:	89 d3                	mov    ebx,edx
c0000eb7:	83 ec 2c             	sub    esp,0x2c
c0000eba:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000ebe:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000ec4:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ec7:	8d 42 ff             	lea    eax,[edx-0x1]
c0000eca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ece:	74 1f                	je     c0000eef <sYSMALLOc+0x3e>
c0000ed0:	89 d8                	mov    eax,ebx
c0000ed2:	e8 fe fd ff ff       	call   c0000cd5 <malloc_consolidate>
c0000ed7:	83 ec 0c             	sub    esp,0xc
c0000eda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ede:	83 e8 07             	sub    eax,0x7
c0000ee1:	50                   	push   eax
c0000ee2:	e8 30 02 00 00       	call   c0001117 <dlmalloc>
c0000ee7:	83 c4 10             	add    esp,0x10
c0000eea:	e9 20 02 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000eef:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ef2:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000ef8:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000efb:	83 e0 fc             	and    eax,0xfffffffc
c0000efe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000f02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000f06:	83 c0 10             	add    eax,0x10
c0000f09:	01 c1                	add    ecx,eax
c0000f0b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f0f:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f16:	74 04                	je     c0000f1c <sYSMALLOc+0x6b>
c0000f18:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f1c:	f7 da                	neg    edx
c0000f1e:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f22:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f26:	21 d1                	and    ecx,edx
c0000f28:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f2c:	7f 07                	jg     c0000f35 <sYSMALLOc+0x84>
c0000f2e:	31 c0                	xor    eax,eax
c0000f30:	e9 da 01 00 00       	jmp    c000110f <sYSMALLOc+0x25e>
c0000f35:	83 ec 0c             	sub    esp,0xc
c0000f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f3c:	e8 56 e7 00 00       	call   c000f697 <sbrk>
c0000f41:	83 c4 10             	add    esp,0x10
c0000f44:	89 c6                	mov    esi,eax
c0000f46:	83 f8 ff             	cmp    eax,0xffffffff
c0000f49:	74 e3                	je     c0000f2e <sYSMALLOc+0x7d>
c0000f4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f4f:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f53:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f56:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f5c:	39 f1                	cmp    ecx,esi
c0000f5e:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f64:	75 13                	jne    c0000f79 <sYSMALLOc+0xc8>
c0000f66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f6a:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f6e:	83 c8 01             	or     eax,0x1
c0000f71:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f74:	e9 3e 01 00 00       	jmp    c00010b7 <sYSMALLOc+0x206>
c0000f79:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f7f:	88 d0                	mov    al,dl
c0000f81:	83 e0 01             	and    eax,0x1
c0000f84:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f89:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f8d:	0f 95 c0             	setne  al
c0000f90:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f94:	39 f1                	cmp    ecx,esi
c0000f96:	76 12                	jbe    c0000faa <sYSMALLOc+0xf9>
c0000f98:	84 c0                	test   al,al
c0000f9a:	74 0e                	je     c0000faa <sYSMALLOc+0xf9>
c0000f9c:	83 e2 fe             	and    edx,0xfffffffe
c0000f9f:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000fa5:	e9 83 00 00 00       	jmp    c000102d <sYSMALLOc+0x17c>
c0000faa:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000faf:	74 7c                	je     c000102d <sYSMALLOc+0x17c>
c0000fb1:	84 c0                	test   al,al
c0000fb3:	74 0c                	je     c0000fc1 <sYSMALLOc+0x110>
c0000fb5:	89 f0                	mov    eax,esi
c0000fb7:	29 c8                	sub    eax,ecx
c0000fb9:	01 e8                	add    eax,ebp
c0000fbb:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fc1:	89 f2                	mov    edx,esi
c0000fc3:	83 e2 07             	and    edx,0x7
c0000fc6:	74 0c                	je     c0000fd4 <sYSMALLOc+0x123>
c0000fc8:	b8 08 00 00 00       	mov    eax,0x8
c0000fcd:	29 d0                	sub    eax,edx
c0000fcf:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fd2:	eb 04                	jmp    c0000fd8 <sYSMALLOc+0x127>
c0000fd4:	89 f5                	mov    ebp,esi
c0000fd6:	31 c0                	xor    eax,eax
c0000fd8:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fdc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fe0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fe4:	01 c1                	add    ecx,eax
c0000fe6:	83 ec 0c             	sub    esp,0xc
c0000fe9:	01 f1                	add    ecx,esi
c0000feb:	01 ca                	add    edx,ecx
c0000fed:	29 c8                	sub    eax,ecx
c0000fef:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000ff3:	01 c2                	add    edx,eax
c0000ff5:	52                   	push   edx
c0000ff6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000ffa:	e8 98 e6 00 00       	call   c000f697 <sbrk>
c0000fff:	83 c4 10             	add    esp,0x10
c0001002:	83 f8 ff             	cmp    eax,0xffffffff
c0001005:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001009:	75 0f                	jne    c000101a <sYSMALLOc+0x169>
c000100b:	83 ec 0c             	sub    esp,0xc
c000100e:	6a 00                	push   0x0
c0001010:	e8 82 e6 00 00       	call   c000f697 <sbrk>
c0001015:	83 c4 10             	add    esp,0x10
c0001018:	eb 30                	jmp    c000104a <sYSMALLOc+0x199>
c000101a:	39 c6                	cmp    esi,eax
c000101c:	76 33                	jbe    c0001051 <sYSMALLOc+0x1a0>
c000101e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001022:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0001029:	01 f0                	add    eax,esi
c000102b:	eb 1d                	jmp    c000104a <sYSMALLOc+0x199>
c000102d:	83 ec 0c             	sub    esp,0xc
c0001030:	89 f5                	mov    ebp,esi
c0001032:	6a 00                	push   0x0
c0001034:	e8 5e e6 00 00       	call   c000f697 <sbrk>
c0001039:	89 c2                	mov    edx,eax
c000103b:	29 f2                	sub    edx,esi
c000103d:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001041:	83 c4 10             	add    esp,0x10
c0001044:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000104a:	31 d2                	xor    edx,edx
c000104c:	83 f8 ff             	cmp    eax,0xffffffff
c000104f:	74 66                	je     c00010b7 <sYSMALLOc+0x206>
c0001051:	29 e8                	sub    eax,ebp
c0001053:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0001056:	01 d0                	add    eax,edx
c0001058:	83 c8 01             	or     eax,0x1
c000105b:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c000105e:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001064:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0001069:	74 4c                	je     c00010b7 <sYSMALLOc+0x206>
c000106b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000106f:	83 e8 0c             	sub    eax,0xc
c0001072:	83 e0 f8             	and    eax,0xfffffff8
c0001075:	89 c2                	mov    edx,eax
c0001077:	83 ca 01             	or     edx,0x1
c000107a:	83 f8 0f             	cmp    eax,0xf
c000107d:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001080:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c0001088:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001090:	76 25                	jbe    c00010b7 <sYSMALLOc+0x206>
c0001092:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c0001098:	83 ec 0c             	sub    esp,0xc
c000109b:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c00010a5:	83 c7 08             	add    edi,0x8
c00010a8:	57                   	push   edi
c00010a9:	e8 0e fd ff ff       	call   c0000dbc <dlfree>
c00010ae:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010b4:	83 c4 10             	add    esp,0x10
c00010b7:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010bd:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010c3:	73 06                	jae    c00010cb <sYSMALLOc+0x21a>
c00010c5:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010cb:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010d1:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010d7:	73 06                	jae    c00010df <sYSMALLOc+0x22e>
c00010d9:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010df:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010e2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010e5:	83 e2 fc             	and    edx,0xfffffffc
c00010e8:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010ec:	0f 82 3c fe ff ff    	jb     c0000f2e <sYSMALLOc+0x7d>
c00010f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010f6:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010f9:	29 fa                	sub    edx,edi
c00010fb:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010fe:	83 ca 01             	or     edx,0x1
c0001101:	89 fb                	mov    ebx,edi
c0001103:	83 c0 08             	add    eax,0x8
c0001106:	83 cb 01             	or     ebx,0x1
c0001109:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c000110c:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000110f:	83 c4 2c             	add    esp,0x2c
c0001112:	5b                   	pop    ebx
c0001113:	5e                   	pop    esi
c0001114:	5f                   	pop    edi
c0001115:	5d                   	pop    ebp
c0001116:	c3                   	ret    

c0001117 <dlmalloc>:
c0001117:	55                   	push   ebp
c0001118:	57                   	push   edi
c0001119:	56                   	push   esi
c000111a:	53                   	push   ebx
c000111b:	83 ec 1c             	sub    esp,0x1c
c000111e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001122:	83 f8 df             	cmp    eax,0xffffffdf
c0001125:	0f 87 70 03 00 00    	ja     c000149b <dlmalloc+0x384>
c000112b:	83 c0 0b             	add    eax,0xb
c000112e:	be 10 00 00 00       	mov    esi,0x10
c0001133:	83 f8 0f             	cmp    eax,0xf
c0001136:	76 05                	jbe    c000113d <dlmalloc+0x26>
c0001138:	83 e0 f8             	and    eax,0xfffffff8
c000113b:	89 c6                	mov    esi,eax
c000113d:	8b 3d 00 dc 02 c0    	mov    edi,DWORD PTR ds:0xc002dc00
c0001143:	f7 c7 01 00 00 00    	test   edi,0x1
c0001149:	75 17                	jne    c0001162 <dlmalloc+0x4b>
c000114b:	85 ff                	test   edi,edi
c000114d:	0f 85 05 03 00 00    	jne    c0001458 <dlmalloc+0x341>
c0001153:	b8 00 dc 02 c0       	mov    eax,0xc002dc00
c0001158:	e8 78 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c000115d:	e9 f6 02 00 00       	jmp    c0001458 <dlmalloc+0x341>
c0001162:	39 f7                	cmp    edi,esi
c0001164:	72 1f                	jb     c0001185 <dlmalloc+0x6e>
c0001166:	89 f2                	mov    edx,esi
c0001168:	c1 ea 03             	shr    edx,0x3
c000116b:	83 ea 02             	sub    edx,0x2
c000116e:	8b 04 95 04 dc 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd23fc]
c0001175:	85 c0                	test   eax,eax
c0001177:	74 0c                	je     c0001185 <dlmalloc+0x6e>
c0001179:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c000117c:	89 0c 95 04 dc 02 c0 	mov    DWORD PTR [edx*4-0x3ffd23fc],ecx
c0001183:	eb 30                	jmp    c00011b5 <dlmalloc+0x9e>
c0001185:	89 f0                	mov    eax,esi
c0001187:	81 fe ff 00 00 00    	cmp    esi,0xff
c000118d:	77 2e                	ja     c00011bd <dlmalloc+0xa6>
c000118f:	c1 e8 03             	shr    eax,0x3
c0001192:	8d 14 c5 34 dc 02 c0 	lea    edx,[eax*8-0x3ffd23cc]
c0001199:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000119d:	8d 5a f8             	lea    ebx,[edx-0x8]
c00011a0:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c00011a3:	39 c3                	cmp    ebx,eax
c00011a5:	74 2e                	je     c00011d5 <dlmalloc+0xbe>
c00011a7:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00011aa:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011af:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011b2:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011b5:	83 c0 08             	add    eax,0x8
c00011b8:	e9 e0 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c00011bd:	e8 8f fa ff ff       	call   c0000c51 <largebin_index>
c00011c2:	83 e7 02             	and    edi,0x2
c00011c5:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011c9:	74 0a                	je     c00011d5 <dlmalloc+0xbe>
c00011cb:	b8 00 dc 02 c0       	mov    eax,0xc002dc00
c00011d0:	e8 00 fb ff ff       	call   c0000cd5 <malloc_consolidate>
c00011d5:	8d 46 10             	lea    eax,[esi+0x10]
c00011d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011dc:	8b 1d 40 dc 02 c0    	mov    ebx,DWORD PTR ds:0xc002dc40
c00011e2:	81 fb 34 dc 02 c0    	cmp    ebx,0xc002dc34
c00011e8:	0f 84 13 01 00 00    	je     c0001301 <dlmalloc+0x1ea>
c00011ee:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011f1:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011f4:	83 e7 fc             	and    edi,0xfffffffc
c00011f7:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011fd:	77 4c                	ja     c000124b <dlmalloc+0x134>
c00011ff:	3d 34 dc 02 c0       	cmp    eax,0xc002dc34
c0001204:	75 45                	jne    c000124b <dlmalloc+0x134>
c0001206:	39 1d 30 dc 02 c0    	cmp    DWORD PTR ds:0xc002dc30,ebx
c000120c:	75 3d                	jne    c000124b <dlmalloc+0x134>
c000120e:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001212:	73 37                	jae    c000124b <dlmalloc+0x134>
c0001214:	8d 04 33             	lea    eax,[ebx+esi*1]
c0001217:	89 fa                	mov    edx,edi
c0001219:	a3 3c dc 02 c0       	mov    ds:0xc002dc3c,eax
c000121e:	a3 40 dc 02 c0       	mov    ds:0xc002dc40,eax
c0001223:	a3 30 dc 02 c0       	mov    ds:0xc002dc30,eax
c0001228:	29 f2                	sub    edx,esi
c000122a:	c7 40 08 34 dc 02 c0 	mov    DWORD PTR [eax+0x8],0xc002dc34
c0001231:	c7 40 0c 34 dc 02 c0 	mov    DWORD PTR [eax+0xc],0xc002dc34
c0001238:	83 ce 01             	or     esi,0x1
c000123b:	89 d1                	mov    ecx,edx
c000123d:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001240:	83 c9 01             	or     ecx,0x1
c0001243:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001246:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c0001249:	eb 15                	jmp    c0001260 <dlmalloc+0x149>
c000124b:	a3 40 dc 02 c0       	mov    ds:0xc002dc40,eax
c0001250:	39 fe                	cmp    esi,edi
c0001252:	c7 40 08 34 dc 02 c0 	mov    DWORD PTR [eax+0x8],0xc002dc34
c0001259:	75 0d                	jne    c0001268 <dlmalloc+0x151>
c000125b:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001260:	8d 43 08             	lea    eax,[ebx+0x8]
c0001263:	e9 35 02 00 00       	jmp    c000149d <dlmalloc+0x386>
c0001268:	89 f8                	mov    eax,edi
c000126a:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001270:	77 19                	ja     c000128b <dlmalloc+0x174>
c0001272:	c1 e8 03             	shr    eax,0x3
c0001275:	8d 14 00             	lea    edx,[eax+eax*1]
c0001278:	83 c2 0d             	add    edx,0xd
c000127b:	8d 2c 95 f8 db 02 c0 	lea    ebp,[edx*4-0x3ffd2408]
c0001282:	8b 14 95 00 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2400]
c0001289:	eb 46                	jmp    c00012d1 <dlmalloc+0x1ba>
c000128b:	e8 c1 f9 ff ff       	call   c0000c51 <largebin_index>
c0001290:	8d 14 00             	lea    edx,[eax+eax*1]
c0001293:	83 c2 0d             	add    edx,0xd
c0001296:	8d 0c 95 00 dc 02 c0 	lea    ecx,[edx*4-0x3ffd2400]
c000129d:	8b 14 95 00 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd2400]
c00012a4:	8d 69 f8             	lea    ebp,[ecx-0x8]
c00012a7:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c00012ab:	89 d5                	mov    ebp,edx
c00012ad:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012b1:	74 1e                	je     c00012d1 <dlmalloc+0x1ba>
c00012b3:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012b6:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012b9:	77 12                	ja     c00012cd <dlmalloc+0x1b6>
c00012bb:	83 cf 01             	or     edi,0x1
c00012be:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012c1:	76 05                	jbe    c00012c8 <dlmalloc+0x1b1>
c00012c3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012c6:	eb f6                	jmp    c00012be <dlmalloc+0x1a7>
c00012c8:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012cb:	eb 04                	jmp    c00012d1 <dlmalloc+0x1ba>
c00012cd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012d1:	89 c7                	mov    edi,eax
c00012d3:	88 c1                	mov    cl,al
c00012d5:	c1 ff 05             	sar    edi,0x5
c00012d8:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012dc:	bf 01 00 00 00       	mov    edi,0x1
c00012e1:	d3 e7                	shl    edi,cl
c00012e3:	89 f8                	mov    eax,edi
c00012e5:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012e9:	09 04 bd 34 df 02 c0 	or     DWORD PTR [edi*4-0x3ffd20cc],eax
c00012f0:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012f3:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012f6:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012f9:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012fc:	e9 db fe ff ff       	jmp    c00011dc <dlmalloc+0xc5>
c0001301:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001307:	76 78                	jbe    c0001381 <dlmalloc+0x26a>
c0001309:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000130d:	8d 04 c5 34 dc 02 c0 	lea    eax,[eax*8-0x3ffd23cc]
c0001314:	8d 48 f8             	lea    ecx,[eax-0x8]
c0001317:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000131a:	39 ca                	cmp    edx,ecx
c000131c:	74 63                	je     c0001381 <dlmalloc+0x26a>
c000131e:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001321:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001324:	83 e3 fc             	and    ebx,0xfffffffc
c0001327:	39 de                	cmp    esi,ebx
c0001329:	77 52                	ja     c000137d <dlmalloc+0x266>
c000132b:	89 df                	mov    edi,ebx
c000132d:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001330:	29 f7                	sub    edi,esi
c0001332:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001335:	01 d3                	add    ebx,edx
c0001337:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000133a:	83 ff 0f             	cmp    edi,0xf
c000133d:	8d 42 08             	lea    eax,[edx+0x8]
c0001340:	77 09                	ja     c000134b <dlmalloc+0x234>
c0001342:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c0001346:	e9 52 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000134b:	8d 0c 32             	lea    ecx,[edx+esi*1]
c000134e:	83 ce 01             	or     esi,0x1
c0001351:	89 0d 3c dc 02 c0    	mov    DWORD PTR ds:0xc002dc3c,ecx
c0001357:	89 0d 40 dc 02 c0    	mov    DWORD PTR ds:0xc002dc40,ecx
c000135d:	c7 41 08 34 dc 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002dc34
c0001364:	c7 41 0c 34 dc 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002dc34
c000136b:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c000136e:	89 fa                	mov    edx,edi
c0001370:	83 ca 01             	or     edx,0x1
c0001373:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001376:	89 3b                	mov    DWORD PTR [ebx],edi
c0001378:	e9 20 01 00 00       	jmp    c000149d <dlmalloc+0x386>
c000137d:	89 c2                	mov    edx,eax
c000137f:	eb 99                	jmp    c000131a <dlmalloc+0x203>
c0001381:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001385:	b8 01 00 00 00       	mov    eax,0x1
c000138a:	41                   	inc    ecx
c000138b:	89 cb                	mov    ebx,ecx
c000138d:	8d 14 cd 2c dc 02 c0 	lea    edx,[ecx*8-0x3ffd23d4]
c0001394:	c1 eb 05             	shr    ebx,0x5
c0001397:	d3 e0                	shl    eax,cl
c0001399:	8b 3c 9d 34 df 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd20cc]
c00013a0:	39 f8                	cmp    eax,edi
c00013a2:	77 04                	ja     c00013a8 <dlmalloc+0x291>
c00013a4:	85 c0                	test   eax,eax
c00013a6:	75 26                	jne    c00013ce <dlmalloc+0x2b7>
c00013a8:	43                   	inc    ebx
c00013a9:	83 fb 02             	cmp    ebx,0x2
c00013ac:	0f 87 a6 00 00 00    	ja     c0001458 <dlmalloc+0x341>
c00013b2:	8b 3c 9d 34 df 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd20cc]
c00013b9:	85 ff                	test   edi,edi
c00013bb:	74 eb                	je     c00013a8 <dlmalloc+0x291>
c00013bd:	89 d8                	mov    eax,ebx
c00013bf:	c1 e0 06             	shl    eax,0x6
c00013c2:	8d 14 85 2c dc 02 c0 	lea    edx,[eax*4-0x3ffd23d4]
c00013c9:	b8 01 00 00 00       	mov    eax,0x1
c00013ce:	85 f8                	test   eax,edi
c00013d0:	75 07                	jne    c00013d9 <dlmalloc+0x2c2>
c00013d2:	83 c2 08             	add    edx,0x8
c00013d5:	01 c0                	add    eax,eax
c00013d7:	eb f5                	jmp    c00013ce <dlmalloc+0x2b7>
c00013d9:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013dc:	39 ca                	cmp    edx,ecx
c00013de:	75 14                	jne    c00013f4 <dlmalloc+0x2dd>
c00013e0:	89 c1                	mov    ecx,eax
c00013e2:	83 c2 08             	add    edx,0x8
c00013e5:	f7 d1                	not    ecx
c00013e7:	01 c0                	add    eax,eax
c00013e9:	21 cf                	and    edi,ecx
c00013eb:	89 3c 9d 34 df 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd20cc],edi
c00013f2:	eb ac                	jmp    c00013a0 <dlmalloc+0x289>
c00013f4:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013f7:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013fa:	83 e0 fc             	and    eax,0xfffffffc
c00013fd:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001400:	89 c3                	mov    ebx,eax
c0001402:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001405:	29 f3                	sub    ebx,esi
c0001407:	8d 14 01             	lea    edx,[ecx+eax*1]
c000140a:	83 fb 0f             	cmp    ebx,0xf
c000140d:	8d 41 08             	lea    eax,[ecx+0x8]
c0001410:	77 09                	ja     c000141b <dlmalloc+0x304>
c0001412:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c0001416:	e9 82 00 00 00       	jmp    c000149d <dlmalloc+0x386>
c000141b:	8d 3c 31             	lea    edi,[ecx+esi*1]
c000141e:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001424:	89 3d 3c dc 02 c0    	mov    DWORD PTR ds:0xc002dc3c,edi
c000142a:	89 3d 40 dc 02 c0    	mov    DWORD PTR ds:0xc002dc40,edi
c0001430:	c7 47 08 34 dc 02 c0 	mov    DWORD PTR [edi+0x8],0xc002dc34
c0001437:	c7 47 0c 34 dc 02 c0 	mov    DWORD PTR [edi+0xc],0xc002dc34
c000143e:	77 06                	ja     c0001446 <dlmalloc+0x32f>
c0001440:	89 3d 30 dc 02 c0    	mov    DWORD PTR ds:0xc002dc30,edi
c0001446:	83 ce 01             	or     esi,0x1
c0001449:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c000144c:	89 d9                	mov    ecx,ebx
c000144e:	83 c9 01             	or     ecx,0x1
c0001451:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001454:	89 1a                	mov    DWORD PTR [edx],ebx
c0001456:	eb 45                	jmp    c000149d <dlmalloc+0x386>
c0001458:	a1 2c dc 02 c0       	mov    eax,ds:0xc002dc2c
c000145d:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001460:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001463:	83 e2 fc             	and    edx,0xfffffffc
c0001466:	39 d1                	cmp    ecx,edx
c0001468:	77 1e                	ja     c0001488 <dlmalloc+0x371>
c000146a:	8d 0c 30             	lea    ecx,[eax+esi*1]
c000146d:	89 f3                	mov    ebx,esi
c000146f:	89 0d 2c dc 02 c0    	mov    DWORD PTR ds:0xc002dc2c,ecx
c0001475:	83 cb 01             	or     ebx,0x1
c0001478:	29 f2                	sub    edx,esi
c000147a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000147d:	83 ca 01             	or     edx,0x1
c0001480:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001483:	e9 2d fd ff ff       	jmp    c00011b5 <dlmalloc+0x9e>
c0001488:	83 c4 1c             	add    esp,0x1c
c000148b:	89 f0                	mov    eax,esi
c000148d:	5b                   	pop    ebx
c000148e:	ba 00 dc 02 c0       	mov    edx,0xc002dc00
c0001493:	5e                   	pop    esi
c0001494:	5f                   	pop    edi
c0001495:	5d                   	pop    ebp
c0001496:	e9 16 fa ff ff       	jmp    c0000eb1 <sYSMALLOc>
c000149b:	31 c0                	xor    eax,eax
c000149d:	83 c4 1c             	add    esp,0x1c
c00014a0:	5b                   	pop    ebx
c00014a1:	5e                   	pop    esi
c00014a2:	5f                   	pop    edi
c00014a3:	5d                   	pop    ebp
c00014a4:	c3                   	ret    

c00014a5 <iALLOc>:
c00014a5:	55                   	push   ebp
c00014a6:	89 c5                	mov    ebp,eax
c00014a8:	57                   	push   edi
c00014a9:	56                   	push   esi
c00014aa:	53                   	push   ebx
c00014ab:	83 ec 2c             	sub    esp,0x2c
c00014ae:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014b2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014b6:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ba:	83 3d 00 dc 02 c0 00 	cmp    DWORD PTR ds:0xc002dc00,0x0
c00014c1:	75 12                	jne    c00014d5 <iALLOc+0x30>
c00014c3:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014c7:	b8 00 dc 02 c0       	mov    eax,0xc002dc00
c00014cc:	e8 04 f8 ff ff       	call   c0000cd5 <malloc_consolidate>
c00014d1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014d5:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014da:	74 12                	je     c00014ee <iALLOc+0x49>
c00014dc:	85 ed                	test   ebp,ebp
c00014de:	0f 84 64 01 00 00    	je     c0001648 <iALLOc+0x1a3>
c00014e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014ec:	eb 33                	jmp    c0001521 <iALLOc+0x7c>
c00014ee:	85 ed                	test   ebp,ebp
c00014f0:	75 14                	jne    c0001506 <iALLOc+0x61>
c00014f2:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014fa:	83 c4 2c             	add    esp,0x2c
c00014fd:	5b                   	pop    ebx
c00014fe:	5e                   	pop    esi
c00014ff:	5f                   	pop    edi
c0001500:	5d                   	pop    ebp
c0001501:	e9 11 fc ff ff       	jmp    c0001117 <dlmalloc>
c0001506:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c000150d:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001515:	83 f8 0f             	cmp    eax,0xf
c0001518:	76 07                	jbe    c0001521 <iALLOc+0x7c>
c000151a:	83 e0 f8             	and    eax,0xfffffff8
c000151d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001521:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c0001526:	75 09                	jne    c0001531 <iALLOc+0x8c>
c0001528:	89 d0                	mov    eax,edx
c000152a:	8d 3c aa             	lea    edi,[edx+ebp*4]
c000152d:	31 f6                	xor    esi,esi
c000152f:	eb 3b                	jmp    c000156c <iALLOc+0xc7>
c0001531:	8b 02                	mov    eax,DWORD PTR [edx]
c0001533:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000153b:	83 c0 0b             	add    eax,0xb
c000153e:	83 f8 0f             	cmp    eax,0xf
c0001541:	76 07                	jbe    c000154a <iALLOc+0xa5>
c0001543:	83 e0 f8             	and    eax,0xfffffff8
c0001546:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000154a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000154e:	0f af f5             	imul   esi,ebp
c0001551:	eb 25                	jmp    c0001578 <iALLOc+0xd3>
c0001553:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001555:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c0001558:	bb 10 00 00 00       	mov    ebx,0x10
c000155d:	83 f9 0f             	cmp    ecx,0xf
c0001560:	76 05                	jbe    c0001567 <iALLOc+0xc2>
c0001562:	83 e1 f8             	and    ecx,0xfffffff8
c0001565:	89 cb                	mov    ebx,ecx
c0001567:	01 de                	add    esi,ebx
c0001569:	83 c0 04             	add    eax,0x4
c000156c:	39 c7                	cmp    edi,eax
c000156e:	75 e3                	jne    c0001553 <iALLOc+0xae>
c0001570:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0001578:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000157c:	8b 1d 54 df 02 c0    	mov    ebx,DWORD PTR ds:0xc002df54
c0001582:	83 ec 0c             	sub    esp,0xc
c0001585:	c7 05 54 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df54,0x0
c000158f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001593:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c0001597:	50                   	push   eax
c0001598:	e8 7a fb ff ff       	call   c0001117 <dlmalloc>
c000159d:	83 c4 10             	add    esp,0x10
c00015a0:	89 1d 54 df 02 c0    	mov    DWORD PTR ds:0xc002df54,ebx
c00015a6:	85 c0                	test   eax,eax
c00015a8:	0f 84 92 00 00 00    	je     c0001640 <iALLOc+0x19b>
c00015ae:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015b1:	8d 78 f8             	lea    edi,[eax-0x8]
c00015b4:	83 e3 fc             	and    ebx,0xfffffffc
c00015b7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015bb:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015c0:	74 1e                	je     c00015e0 <iALLOc+0x13b>
c00015c2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015c6:	89 d9                	mov    ecx,ebx
c00015c8:	52                   	push   edx
c00015c9:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015cd:	83 e9 04             	sub    ecx,0x4
c00015d0:	51                   	push   ecx
c00015d1:	6a 00                	push   0x0
c00015d3:	50                   	push   eax
c00015d4:	e8 9f f1 ff ff       	call   c0000778 <memset>
c00015d9:	83 c4 10             	add    esp,0x10
c00015dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015e0:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015e5:	75 14                	jne    c00015fb <iALLOc+0x156>
c00015e7:	8d 04 37             	lea    eax,[edi+esi*1]
c00015ea:	29 f3                	sub    ebx,esi
c00015ec:	8d 48 08             	lea    ecx,[eax+0x8]
c00015ef:	83 cb 01             	or     ebx,0x1
c00015f2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015f6:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015f9:	89 f3                	mov    ebx,esi
c00015fb:	31 c0                	xor    eax,eax
c00015fd:	4d                   	dec    ebp
c00015fe:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001601:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001605:	39 c5                	cmp    ebp,eax
c0001607:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000160a:	74 2c                	je     c0001638 <iALLOc+0x193>
c000160c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001610:	85 c9                	test   ecx,ecx
c0001612:	75 15                	jne    c0001629 <iALLOc+0x184>
c0001614:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c0001617:	8d 71 0b             	lea    esi,[ecx+0xb]
c000161a:	b9 10 00 00 00       	mov    ecx,0x10
c000161f:	83 fe 0f             	cmp    esi,0xf
c0001622:	76 05                	jbe    c0001629 <iALLOc+0x184>
c0001624:	83 e6 f8             	and    esi,0xfffffff8
c0001627:	89 f1                	mov    ecx,esi
c0001629:	89 ce                	mov    esi,ecx
c000162b:	29 cb                	sub    ebx,ecx
c000162d:	83 ce 01             	or     esi,0x1
c0001630:	40                   	inc    eax
c0001631:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001634:	01 cf                	add    edi,ecx
c0001636:	eb c6                	jmp    c00015fe <iALLOc+0x159>
c0001638:	83 cb 01             	or     ebx,0x1
c000163b:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c000163e:	eb 08                	jmp    c0001648 <iALLOc+0x1a3>
c0001640:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0001648:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000164c:	83 c4 2c             	add    esp,0x2c
c000164f:	5b                   	pop    ebx
c0001650:	5e                   	pop    esi
c0001651:	5f                   	pop    edi
c0001652:	5d                   	pop    ebp
c0001653:	c3                   	ret    

c0001654 <dlrealloc>:
c0001654:	55                   	push   ebp
c0001655:	57                   	push   edi
c0001656:	56                   	push   esi
c0001657:	53                   	push   ebx
c0001658:	83 ec 1c             	sub    esp,0x1c
c000165b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000165f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001663:	85 db                	test   ebx,ebx
c0001665:	75 10                	jne    c0001677 <dlrealloc+0x23>
c0001667:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000166b:	83 c4 1c             	add    esp,0x1c
c000166e:	5b                   	pop    ebx
c000166f:	5e                   	pop    esi
c0001670:	5f                   	pop    edi
c0001671:	5d                   	pop    ebp
c0001672:	e9 a0 fa ff ff       	jmp    c0001117 <dlmalloc>
c0001677:	83 f8 df             	cmp    eax,0xffffffdf
c000167a:	76 07                	jbe    c0001683 <dlrealloc+0x2f>
c000167c:	31 db                	xor    ebx,ebx
c000167e:	e9 7c 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c0001683:	83 c0 0b             	add    eax,0xb
c0001686:	bf 10 00 00 00       	mov    edi,0x10
c000168b:	83 f8 0f             	cmp    eax,0xf
c000168e:	76 05                	jbe    c0001695 <dlrealloc+0x41>
c0001690:	83 e0 f8             	and    eax,0xfffffff8
c0001693:	89 c7                	mov    edi,eax
c0001695:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c0001698:	8d 6b f8             	lea    ebp,[ebx-0x8]
c000169b:	89 c6                	mov    esi,eax
c000169d:	83 e6 fc             	and    esi,0xfffffffc
c00016a0:	a8 02                	test   al,0x2
c00016a2:	75 d8                	jne    c000167c <dlrealloc+0x28>
c00016a4:	39 f7                	cmp    edi,esi
c00016a6:	0f 86 15 01 00 00    	jbe    c00017c1 <dlrealloc+0x16d>
c00016ac:	8d 54 35 00          	lea    edx,[ebp+esi*1+0x0]
c00016b0:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00016b3:	39 15 2c dc 02 c0    	cmp    DWORD PTR ds:0xc002dc2c,edx
c00016b9:	75 33                	jne    c00016ee <dlrealloc+0x9a>
c00016bb:	83 e1 fc             	and    ecx,0xfffffffc
c00016be:	01 f1                	add    ecx,esi
c00016c0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00016c4:	8d 4f 10             	lea    ecx,[edi+0x10]
c00016c7:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c00016cb:	77 49                	ja     c0001716 <dlrealloc+0xc2>
c00016cd:	01 fd                	add    ebp,edi
c00016cf:	83 e0 01             	and    eax,0x1
c00016d2:	09 f8                	or     eax,edi
c00016d4:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c00016d7:	89 2d 2c dc 02 c0    	mov    DWORD PTR ds:0xc002dc2c,ebp
c00016dd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00016e1:	29 f8                	sub    eax,edi
c00016e3:	83 c8 01             	or     eax,0x1
c00016e6:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c00016e9:	e9 11 01 00 00       	jmp    c00017ff <dlrealloc+0x1ab>
c00016ee:	89 c8                	mov    eax,ecx
c00016f0:	83 e0 fe             	and    eax,0xfffffffe
c00016f3:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c00016f8:	75 1c                	jne    c0001716 <dlrealloc+0xc2>
c00016fa:	83 e1 fc             	and    ecx,0xfffffffc
c00016fd:	01 f1                	add    ecx,esi
c00016ff:	39 cf                	cmp    edi,ecx
c0001701:	77 13                	ja     c0001716 <dlrealloc+0xc2>
c0001703:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001706:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001709:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000170c:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c000170f:	89 ce                	mov    esi,ecx
c0001711:	e9 ab 00 00 00       	jmp    c00017c1 <dlrealloc+0x16d>
c0001716:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000171a:	8d 47 f9             	lea    eax,[edi-0x7]
c000171d:	83 ec 0c             	sub    esp,0xc
c0001720:	50                   	push   eax
c0001721:	e8 f1 f9 ff ff       	call   c0001117 <dlmalloc>
c0001726:	83 c4 10             	add    esp,0x10
c0001729:	89 c1                	mov    ecx,eax
c000172b:	85 c0                	test   eax,eax
c000172d:	0f 84 49 ff ff ff    	je     c000167c <dlrealloc+0x28>
c0001733:	8d 40 f8             	lea    eax,[eax-0x8]
c0001736:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000173a:	39 c2                	cmp    edx,eax
c000173c:	75 0a                	jne    c0001748 <dlrealloc+0xf4>
c000173e:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c0001741:	83 e0 fc             	and    eax,0xfffffffc
c0001744:	01 c6                	add    esi,eax
c0001746:	eb 79                	jmp    c00017c1 <dlrealloc+0x16d>
c0001748:	83 ee 04             	sub    esi,0x4
c000174b:	83 fe 27             	cmp    esi,0x27
c000174e:	76 16                	jbe    c0001766 <dlrealloc+0x112>
c0001750:	50                   	push   eax
c0001751:	56                   	push   esi
c0001752:	53                   	push   ebx
c0001753:	51                   	push   ecx
c0001754:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0001758:	e8 e7 ef ff ff       	call   c0000744 <memcpy>
c000175d:	83 c4 10             	add    esp,0x10
c0001760:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001764:	eb 43                	jmp    c00017a9 <dlrealloc+0x155>
c0001766:	8b 03                	mov    eax,DWORD PTR [ebx]
c0001768:	83 fe 13             	cmp    esi,0x13
c000176b:	89 01                	mov    DWORD PTR [ecx],eax
c000176d:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0001770:	89 41 04             	mov    DWORD PTR [ecx+0x4],eax
c0001773:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0001776:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0001779:	76 2e                	jbe    c00017a9 <dlrealloc+0x155>
c000177b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000177e:	83 fe 1b             	cmp    esi,0x1b
c0001781:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001784:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0001787:	89 41 10             	mov    DWORD PTR [ecx+0x10],eax
c000178a:	76 1d                	jbe    c00017a9 <dlrealloc+0x155>
c000178c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000178f:	83 fe 23             	cmp    esi,0x23
c0001792:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0001795:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0001798:	89 41 18             	mov    DWORD PTR [ecx+0x18],eax
c000179b:	76 0c                	jbe    c00017a9 <dlrealloc+0x155>
c000179d:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00017a0:	89 41 1c             	mov    DWORD PTR [ecx+0x1c],eax
c00017a3:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00017a6:	89 41 20             	mov    DWORD PTR [ecx+0x20],eax
c00017a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00017ad:	83 ec 0c             	sub    esp,0xc
c00017b0:	53                   	push   ebx
c00017b1:	e8 06 f6 ff ff       	call   c0000dbc <dlfree>
c00017b6:	83 c4 10             	add    esp,0x10
c00017b9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00017bd:	89 cb                	mov    ebx,ecx
c00017bf:	eb 3e                	jmp    c00017ff <dlrealloc+0x1ab>
c00017c1:	89 f2                	mov    edx,esi
c00017c3:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c00017c6:	29 fa                	sub    edx,edi
c00017c8:	83 e1 01             	and    ecx,0x1
c00017cb:	8d 44 35 00          	lea    eax,[ebp+esi*1+0x0]
c00017cf:	83 fa 0f             	cmp    edx,0xf
c00017d2:	77 0b                	ja     c00017df <dlrealloc+0x18b>
c00017d4:	09 ce                	or     esi,ecx
c00017d6:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c00017d9:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017dd:	eb 20                	jmp    c00017ff <dlrealloc+0x1ab>
c00017df:	01 fd                	add    ebp,edi
c00017e1:	83 ec 0c             	sub    esp,0xc
c00017e4:	09 cf                	or     edi,ecx
c00017e6:	83 ca 01             	or     edx,0x1
c00017e9:	89 7b fc             	mov    DWORD PTR [ebx-0x4],edi
c00017ec:	83 c5 08             	add    ebp,0x8
c00017ef:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
c00017f2:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017f6:	55                   	push   ebp
c00017f7:	e8 c0 f5 ff ff       	call   c0000dbc <dlfree>
c00017fc:	83 c4 10             	add    esp,0x10
c00017ff:	83 c4 1c             	add    esp,0x1c
c0001802:	89 d8                	mov    eax,ebx
c0001804:	5b                   	pop    ebx
c0001805:	5e                   	pop    esi
c0001806:	5f                   	pop    edi
c0001807:	5d                   	pop    ebp
c0001808:	c3                   	ret    

c0001809 <dlmemalign>:
c0001809:	55                   	push   ebp
c000180a:	57                   	push   edi
c000180b:	56                   	push   esi
c000180c:	53                   	push   ebx
c000180d:	83 ec 0c             	sub    esp,0xc
c0001810:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001814:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0001818:	83 fa 08             	cmp    edx,0x8
c000181b:	77 10                	ja     c000182d <dlmemalign+0x24>
c000181d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001821:	83 c4 0c             	add    esp,0xc
c0001824:	5b                   	pop    ebx
c0001825:	5e                   	pop    esi
c0001826:	5f                   	pop    edi
c0001827:	5d                   	pop    ebp
c0001828:	e9 ea f8 ff ff       	jmp    c0001117 <dlmalloc>
c000182d:	bf 10 00 00 00       	mov    edi,0x10
c0001832:	83 fa 0f             	cmp    edx,0xf
c0001835:	76 13                	jbe    c000184a <dlmemalign+0x41>
c0001837:	8d 4a ff             	lea    ecx,[edx-0x1]
c000183a:	85 d1                	test   ecx,edx
c000183c:	75 04                	jne    c0001842 <dlmemalign+0x39>
c000183e:	89 d7                	mov    edi,edx
c0001840:	eb 08                	jmp    c000184a <dlmemalign+0x41>
c0001842:	39 d7                	cmp    edi,edx
c0001844:	73 04                	jae    c000184a <dlmemalign+0x41>
c0001846:	01 ff                	add    edi,edi
c0001848:	eb f8                	jmp    c0001842 <dlmemalign+0x39>
c000184a:	83 f8 df             	cmp    eax,0xffffffdf
c000184d:	76 07                	jbe    c0001856 <dlmemalign+0x4d>
c000184f:	31 c0                	xor    eax,eax
c0001851:	e9 ce 00 00 00       	jmp    c0001924 <dlmemalign+0x11b>
c0001856:	83 c0 0b             	add    eax,0xb
c0001859:	bd 10 00 00 00       	mov    ebp,0x10
c000185e:	83 f8 0f             	cmp    eax,0xf
c0001861:	76 05                	jbe    c0001868 <dlmemalign+0x5f>
c0001863:	83 e0 f8             	and    eax,0xfffffff8
c0001866:	89 c5                	mov    ebp,eax
c0001868:	83 ec 0c             	sub    esp,0xc
c000186b:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c000186f:	50                   	push   eax
c0001870:	e8 a2 f8 ff ff       	call   c0001117 <dlmalloc>
c0001875:	83 c4 10             	add    esp,0x10
c0001878:	89 c1                	mov    ecx,eax
c000187a:	85 c0                	test   eax,eax
c000187c:	74 d1                	je     c000184f <dlmemalign+0x46>
c000187e:	31 d2                	xor    edx,edx
c0001880:	8d 70 f8             	lea    esi,[eax-0x8]
c0001883:	f7 f7                	div    edi
c0001885:	85 d2                	test   edx,edx
c0001887:	74 62                	je     c00018eb <dlmemalign+0xe2>
c0001889:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000188d:	89 f8                	mov    eax,edi
c000188f:	f7 d8                	neg    eax
c0001891:	21 c3                	and    ebx,eax
c0001893:	83 eb 08             	sub    ebx,0x8
c0001896:	89 d8                	mov    eax,ebx
c0001898:	29 f0                	sub    eax,esi
c000189a:	83 f8 0f             	cmp    eax,0xf
c000189d:	77 02                	ja     c00018a1 <dlmemalign+0x98>
c000189f:	01 fb                	add    ebx,edi
c00018a1:	89 d8                	mov    eax,ebx
c00018a3:	29 f0                	sub    eax,esi
c00018a5:	89 c6                	mov    esi,eax
c00018a7:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018aa:	89 c2                	mov    edx,eax
c00018ac:	83 e2 fc             	and    edx,0xfffffffc
c00018af:	29 f2                	sub    edx,esi
c00018b1:	a8 02                	test   al,0x2
c00018b3:	74 10                	je     c00018c5 <dlmemalign+0xbc>
c00018b5:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c00018b8:	83 ca 02             	or     edx,0x2
c00018bb:	8d 43 08             	lea    eax,[ebx+0x8]
c00018be:	89 33                	mov    DWORD PTR [ebx],esi
c00018c0:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018c3:	eb 5f                	jmp    c0001924 <dlmemalign+0x11b>
c00018c5:	83 ec 0c             	sub    esp,0xc
c00018c8:	89 d0                	mov    eax,edx
c00018ca:	83 c8 01             	or     eax,0x1
c00018cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018d0:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018d5:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018d8:	83 e0 01             	and    eax,0x1
c00018db:	09 f0                	or     eax,esi
c00018dd:	89 de                	mov    esi,ebx
c00018df:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018e2:	51                   	push   ecx
c00018e3:	e8 d4 f4 ff ff       	call   c0000dbc <dlfree>
c00018e8:	83 c4 10             	add    esp,0x10
c00018eb:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018ee:	a8 02                	test   al,0x2
c00018f0:	75 2f                	jne    c0001921 <dlmemalign+0x118>
c00018f2:	83 e0 fc             	and    eax,0xfffffffc
c00018f5:	8d 55 10             	lea    edx,[ebp+0x10]
c00018f8:	39 c2                	cmp    edx,eax
c00018fa:	73 25                	jae    c0001921 <dlmemalign+0x118>
c00018fc:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018ff:	83 ec 0c             	sub    esp,0xc
c0001902:	29 e8                	sub    eax,ebp
c0001904:	83 c2 08             	add    edx,0x8
c0001907:	83 c8 01             	or     eax,0x1
c000190a:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000190d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001910:	83 e0 01             	and    eax,0x1
c0001913:	09 c5                	or     ebp,eax
c0001915:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0001918:	52                   	push   edx
c0001919:	e8 9e f4 ff ff       	call   c0000dbc <dlfree>
c000191e:	83 c4 10             	add    esp,0x10
c0001921:	8d 46 08             	lea    eax,[esi+0x8]
c0001924:	83 c4 0c             	add    esp,0xc
c0001927:	5b                   	pop    ebx
c0001928:	5e                   	pop    esi
c0001929:	5f                   	pop    edi
c000192a:	5d                   	pop    ebp
c000192b:	c3                   	ret    

c000192c <dlcalloc>:
c000192c:	53                   	push   ebx
c000192d:	83 ec 14             	sub    esp,0x14
c0001930:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001934:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c0001939:	50                   	push   eax
c000193a:	e8 d8 f7 ff ff       	call   c0001117 <dlmalloc>
c000193f:	83 c4 10             	add    esp,0x10
c0001942:	89 c3                	mov    ebx,eax
c0001944:	85 c0                	test   eax,eax
c0001946:	74 77                	je     c00019bf <dlcalloc+0x93>
c0001948:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000194b:	89 d0                	mov    eax,edx
c000194d:	83 e0 fc             	and    eax,0xfffffffc
c0001950:	80 e2 02             	and    dl,0x2
c0001953:	75 5a                	jne    c00019af <dlcalloc+0x83>
c0001955:	83 e8 04             	sub    eax,0x4
c0001958:	83 f8 27             	cmp    eax,0x27
c000195b:	76 03                	jbe    c0001960 <dlcalloc+0x34>
c000195d:	51                   	push   ecx
c000195e:	eb 53                	jmp    c00019b3 <dlcalloc+0x87>
c0001960:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001966:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000196d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001974:	83 f8 13             	cmp    eax,0x13
c0001977:	76 46                	jbe    c00019bf <dlcalloc+0x93>
c0001979:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001980:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001987:	83 f8 1b             	cmp    eax,0x1b
c000198a:	76 33                	jbe    c00019bf <dlcalloc+0x93>
c000198c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001993:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000199a:	83 f8 23             	cmp    eax,0x23
c000199d:	76 20                	jbe    c00019bf <dlcalloc+0x93>
c000199f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c00019a6:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c00019ad:	eb 10                	jmp    c00019bf <dlcalloc+0x93>
c00019af:	83 e8 08             	sub    eax,0x8
c00019b2:	52                   	push   edx
c00019b3:	50                   	push   eax
c00019b4:	6a 00                	push   0x0
c00019b6:	53                   	push   ebx
c00019b7:	e8 bc ed ff ff       	call   c0000778 <memset>
c00019bc:	83 c4 10             	add    esp,0x10
c00019bf:	89 d8                	mov    eax,ebx
c00019c1:	83 c4 08             	add    esp,0x8
c00019c4:	5b                   	pop    ebx
c00019c5:	c3                   	ret    

c00019c6 <dlcfree>:
c00019c6:	e9 f1 f3 ff ff       	jmp    c0000dbc <dlfree>

c00019cb <dlindependent_calloc>:
c00019cb:	83 ec 28             	sub    esp,0x28
c00019ce:	b9 03 00 00 00       	mov    ecx,0x3
c00019d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019d7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019df:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019e3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019e7:	e8 b9 fa ff ff       	call   c00014a5 <iALLOc>
c00019ec:	83 c4 2c             	add    esp,0x2c
c00019ef:	c3                   	ret    

c00019f0 <dlindependent_comalloc>:
c00019f0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019f8:	31 c9                	xor    ecx,ecx
c00019fa:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001a02:	e9 9e fa ff ff       	jmp    c00014a5 <iALLOc>

c0001a07 <dlvalloc>:
c0001a07:	83 ec 0c             	sub    esp,0xc
c0001a0a:	83 3d 00 dc 02 c0 00 	cmp    DWORD PTR ds:0xc002dc00,0x0
c0001a11:	75 0a                	jne    c0001a1d <dlvalloc+0x16>
c0001a13:	b8 00 dc 02 c0       	mov    eax,0xc002dc00
c0001a18:	e8 b8 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a1d:	50                   	push   eax
c0001a1e:	50                   	push   eax
c0001a1f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a23:	ff 35 5c df 02 c0    	push   DWORD PTR ds:0xc002df5c
c0001a29:	e8 db fd ff ff       	call   c0001809 <dlmemalign>
c0001a2e:	83 c4 1c             	add    esp,0x1c
c0001a31:	c3                   	ret    

c0001a32 <dlpvalloc>:
c0001a32:	83 ec 0c             	sub    esp,0xc
c0001a35:	83 3d 00 dc 02 c0 00 	cmp    DWORD PTR ds:0xc002dc00,0x0
c0001a3c:	75 0a                	jne    c0001a48 <dlpvalloc+0x16>
c0001a3e:	b8 00 dc 02 c0       	mov    eax,0xc002dc00
c0001a43:	e8 8d f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a48:	a1 5c df 02 c0       	mov    eax,ds:0xc002df5c
c0001a4d:	89 c1                	mov    ecx,eax
c0001a4f:	52                   	push   edx
c0001a50:	f7 d9                	neg    ecx
c0001a52:	52                   	push   edx
c0001a53:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a57:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a5b:	21 ca                	and    edx,ecx
c0001a5d:	52                   	push   edx
c0001a5e:	50                   	push   eax
c0001a5f:	e8 a5 fd ff ff       	call   c0001809 <dlmemalign>
c0001a64:	83 c4 1c             	add    esp,0x1c
c0001a67:	c3                   	ret    

c0001a68 <dlmalloc_trim>:
c0001a68:	b8 00 dc 02 c0       	mov    eax,0xc002dc00
c0001a6d:	e8 63 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001a72:	31 c0                	xor    eax,eax
c0001a74:	c3                   	ret    

c0001a75 <dlmalloc_usable_size>:
c0001a75:	53                   	push   ebx
c0001a76:	31 c0                	xor    eax,eax
c0001a78:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a7c:	85 c9                	test   ecx,ecx
c0001a7e:	74 24                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a80:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a83:	f6 c2 02             	test   dl,0x2
c0001a86:	74 08                	je     c0001a90 <dlmalloc_usable_size+0x1b>
c0001a88:	83 e2 fc             	and    edx,0xfffffffc
c0001a8b:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a8e:	eb 14                	jmp    c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a90:	89 d3                	mov    ebx,edx
c0001a92:	31 c0                	xor    eax,eax
c0001a94:	83 e3 fe             	and    ebx,0xfffffffe
c0001a97:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a9c:	74 06                	je     c0001aa4 <dlmalloc_usable_size+0x2f>
c0001a9e:	83 e2 fc             	and    edx,0xfffffffc
c0001aa1:	8d 42 fc             	lea    eax,[edx-0x4]
c0001aa4:	5b                   	pop    ebx
c0001aa5:	c3                   	ret    

c0001aa6 <dlmallinfo>:
c0001aa6:	55                   	push   ebp
c0001aa7:	57                   	push   edi
c0001aa8:	56                   	push   esi
c0001aa9:	53                   	push   ebx
c0001aaa:	83 ec 08             	sub    esp,0x8
c0001aad:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001ab1:	83 3d 2c dc 02 c0 00 	cmp    DWORD PTR ds:0xc002dc2c,0x0
c0001ab8:	75 0a                	jne    c0001ac4 <dlmallinfo+0x1e>
c0001aba:	b8 00 dc 02 c0       	mov    eax,0xc002dc00
c0001abf:	e8 11 f2 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001ac4:	a1 2c dc 02 c0       	mov    eax,ds:0xc002dc2c
c0001ac9:	31 ed                	xor    ebp,ebp
c0001acb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001ace:	31 c9                	xor    ecx,ecx
c0001ad0:	83 e0 fc             	and    eax,0xfffffffc
c0001ad3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ad7:	31 c0                	xor    eax,eax
c0001ad9:	8b 14 85 04 dc 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd23fc]
c0001ae0:	85 d2                	test   edx,edx
c0001ae2:	74 0e                	je     c0001af2 <dlmallinfo+0x4c>
c0001ae4:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ae7:	45                   	inc    ebp
c0001ae8:	83 e6 fc             	and    esi,0xfffffffc
c0001aeb:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001aee:	01 f1                	add    ecx,esi
c0001af0:	eb ee                	jmp    c0001ae0 <dlmallinfo+0x3a>
c0001af2:	40                   	inc    eax
c0001af3:	83 f8 0a             	cmp    eax,0xa
c0001af6:	75 e1                	jne    c0001ad9 <dlmallinfo+0x33>
c0001af8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001afc:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001b03:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001b06:	b8 34 dc 02 c0       	mov    eax,0xc002dc34
c0001b0b:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001b0e:	39 f0                	cmp    eax,esi
c0001b10:	74 10                	je     c0001b22 <dlmallinfo+0x7c>
c0001b12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001b15:	ff 04 24             	inc    DWORD PTR [esp]
c0001b18:	83 e7 fc             	and    edi,0xfffffffc
c0001b1b:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001b1e:	01 fa                	add    edx,edi
c0001b20:	eb ec                	jmp    c0001b0e <dlmallinfo+0x68>
c0001b22:	83 c0 08             	add    eax,0x8
c0001b25:	3d 2c df 02 c0       	cmp    eax,0xc002df2c
c0001b2a:	75 df                	jne    c0001b0b <dlmallinfo+0x65>
c0001b2c:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b2f:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b32:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b35:	a1 68 df 02 c0       	mov    eax,ds:0xc002df68
c0001b3a:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b3d:	89 03                	mov    DWORD PTR [ebx],eax
c0001b3f:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b42:	8b 35 50 df 02 c0    	mov    esi,DWORD PTR ds:0xc002df50
c0001b48:	29 d0                	sub    eax,edx
c0001b4a:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b4d:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b50:	8b 35 64 df 02 c0    	mov    esi,DWORD PTR ds:0xc002df64
c0001b56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b5a:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b5d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b60:	8b 35 74 df 02 c0    	mov    esi,DWORD PTR ds:0xc002df74
c0001b66:	89 d8                	mov    eax,ebx
c0001b68:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b6b:	83 c4 08             	add    esp,0x8
c0001b6e:	5b                   	pop    ebx
c0001b6f:	5e                   	pop    esi
c0001b70:	5f                   	pop    edi
c0001b71:	5d                   	pop    ebp
c0001b72:	c2 04 00             	ret    0x4

c0001b75 <dlmalloc_stats>:
c0001b75:	83 ec 30             	sub    esp,0x30
c0001b78:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b7c:	50                   	push   eax
c0001b7d:	e8 24 ff ff ff       	call   c0001aa6 <dlmallinfo>
c0001b82:	83 c4 30             	add    esp,0x30
c0001b85:	c3                   	ret    

c0001b86 <dlmallopt>:
c0001b86:	56                   	push   esi
c0001b87:	b8 00 dc 02 c0       	mov    eax,0xc002dc00
c0001b8c:	53                   	push   ebx
c0001b8d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b91:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b95:	e8 3b f1 ff ff       	call   c0000cd5 <malloc_consolidate>
c0001b9a:	8d 46 04             	lea    eax,[esi+0x4]
c0001b9d:	83 f8 05             	cmp    eax,0x5
c0001ba0:	77 67                	ja     c0001c09 <dlmallopt+0x83>
c0001ba2:	ff 24 85 64 8f 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd709c]
c0001ba9:	83 fb 50             	cmp    ebx,0x50
c0001bac:	77 5b                	ja     c0001c09 <dlmallopt+0x83>
c0001bae:	ba 08 00 00 00       	mov    edx,0x8
c0001bb3:	85 db                	test   ebx,ebx
c0001bb5:	74 12                	je     c0001bc9 <dlmallopt+0x43>
c0001bb7:	83 c3 0b             	add    ebx,0xb
c0001bba:	ba 10 00 00 00       	mov    edx,0x10
c0001bbf:	83 fb 0f             	cmp    ebx,0xf
c0001bc2:	76 05                	jbe    c0001bc9 <dlmallopt+0x43>
c0001bc4:	89 da                	mov    edx,ebx
c0001bc6:	83 e2 f8             	and    edx,0xfffffff8
c0001bc9:	a1 00 dc 02 c0       	mov    eax,ds:0xc002dc00
c0001bce:	83 e0 03             	and    eax,0x3
c0001bd1:	09 d0                	or     eax,edx
c0001bd3:	a3 00 dc 02 c0       	mov    ds:0xc002dc00,eax
c0001bd8:	eb 31                	jmp    c0001c0b <dlmallopt+0x85>
c0001bda:	89 1d 44 df 02 c0    	mov    DWORD PTR ds:0xc002df44,ebx
c0001be0:	eb 06                	jmp    c0001be8 <dlmallopt+0x62>
c0001be2:	89 1d 48 df 02 c0    	mov    DWORD PTR ds:0xc002df48,ebx
c0001be8:	be 01 00 00 00       	mov    esi,0x1
c0001bed:	eb 1c                	jmp    c0001c0b <dlmallopt+0x85>
c0001bef:	89 1d 4c df 02 c0    	mov    DWORD PTR ds:0xc002df4c,ebx
c0001bf5:	eb f1                	jmp    c0001be8 <dlmallopt+0x62>
c0001bf7:	31 f6                	xor    esi,esi
c0001bf9:	85 db                	test   ebx,ebx
c0001bfb:	75 0e                	jne    c0001c0b <dlmallopt+0x85>
c0001bfd:	c7 05 54 df 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002df54,0x0
c0001c07:	eb df                	jmp    c0001be8 <dlmallopt+0x62>
c0001c09:	31 f6                	xor    esi,esi
c0001c0b:	89 f0                	mov    eax,esi
c0001c0d:	5b                   	pop    ebx
c0001c0e:	5e                   	pop    esi
c0001c0f:	c3                   	ret    

c0001c10 <disk_status>:
c0001c10:	31 c0                	xor    eax,eax
c0001c12:	c3                   	ret    

c0001c13 <disk_initialize>:
c0001c13:	31 c0                	xor    eax,eax
c0001c15:	c3                   	ret    

c0001c16 <disk_read>:
c0001c16:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c1b:	0f b6 04 85 e0 16 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce920]
c0001c23:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c27:	e9 c8 ed 01 00       	jmp    c00209f4 <fatWrapperReadDisk>

c0001c2c <disk_write>:
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 e0 16 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce920]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 f9 ed 01 00       	jmp    c0020a3b <fatWrapperWriteDisk>

c0001c42 <disk_ioctl>:
c0001c42:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c47:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c4b:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c50:	0f b6 04 85 e0 16 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffce920]
c0001c58:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c5c:	e9 21 ee 01 00       	jmp    c0020a82 <fatWrapperIoctl>

c0001c61 <ld_word>:
c0001c61:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c68:	c1 e2 08             	shl    edx,0x8
c0001c6b:	09 d0                	or     eax,edx
c0001c6d:	c3                   	ret    

c0001c6e <ld_dword>:
c0001c6e:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c72:	89 d1                	mov    ecx,edx
c0001c74:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c78:	c1 e1 08             	shl    ecx,0x8
c0001c7b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c7e:	09 ca                	or     edx,ecx
c0001c80:	c1 e2 08             	shl    edx,0x8
c0001c83:	09 d0                	or     eax,edx
c0001c85:	c3                   	ret    

c0001c86 <ld_qword>:
c0001c86:	57                   	push   edi
c0001c87:	56                   	push   esi
c0001c88:	53                   	push   ebx
c0001c89:	31 db                	xor    ebx,ebx
c0001c8b:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c8e:	89 df                	mov    edi,ebx
c0001c90:	89 ce                	mov    esi,ecx
c0001c92:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c96:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c9a:	c1 e6 08             	shl    esi,0x8
c0001c9d:	09 f2                	or     edx,esi
c0001c9f:	89 d6                	mov    esi,edx
c0001ca1:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001ca5:	0f a4 f7 08          	shld   edi,esi,0x8
c0001ca9:	c1 e6 08             	shl    esi,0x8
c0001cac:	09 f2                	or     edx,esi
c0001cae:	89 d6                	mov    esi,edx
c0001cb0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001cb4:	0f a4 f7 08          	shld   edi,esi,0x8
c0001cb8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001cbb:	c1 e6 08             	shl    esi,0x8
c0001cbe:	89 fb                	mov    ebx,edi
c0001cc0:	09 f2                	or     edx,esi
c0001cc2:	89 d1                	mov    ecx,edx
c0001cc4:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001cc8:	c1 e1 08             	shl    ecx,0x8
c0001ccb:	89 da                	mov    edx,ebx
c0001ccd:	09 c8                	or     eax,ecx
c0001ccf:	5b                   	pop    ebx
c0001cd0:	5e                   	pop    esi
c0001cd1:	5f                   	pop    edi
c0001cd2:	c3                   	ret    

c0001cd3 <st_word>:
c0001cd3:	66 89 10             	mov    WORD PTR [eax],dx
c0001cd6:	c3                   	ret    

c0001cd7 <st_dword>:
c0001cd7:	89 10                	mov    DWORD PTR [eax],edx
c0001cd9:	c3                   	ret    

c0001cda <st_qword>:
c0001cda:	89 10                	mov    DWORD PTR [eax],edx
c0001cdc:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cdf:	c3                   	ret    

c0001ce0 <mem_cpy>:
c0001ce0:	85 c9                	test   ecx,ecx
c0001ce2:	74 10                	je     c0001cf4 <mem_cpy+0x14>
c0001ce4:	57                   	push   edi
c0001ce5:	01 c1                	add    ecx,eax
c0001ce7:	56                   	push   esi
c0001ce8:	89 c7                	mov    edi,eax
c0001cea:	89 d6                	mov    esi,edx
c0001cec:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001ced:	39 f9                	cmp    ecx,edi
c0001cef:	75 fb                	jne    c0001cec <mem_cpy+0xc>
c0001cf1:	5e                   	pop    esi
c0001cf2:	5f                   	pop    edi
c0001cf3:	c3                   	ret    
c0001cf4:	c3                   	ret    

c0001cf5 <mem_set>:
c0001cf5:	01 c1                	add    ecx,eax
c0001cf7:	40                   	inc    eax
c0001cf8:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cfb:	39 c8                	cmp    eax,ecx
c0001cfd:	75 f8                	jne    c0001cf7 <mem_set+0x2>
c0001cff:	c3                   	ret    

c0001d00 <mem_cmp>:
c0001d00:	57                   	push   edi
c0001d01:	56                   	push   esi
c0001d02:	89 c6                	mov    esi,eax
c0001d04:	53                   	push   ebx
c0001d05:	46                   	inc    esi
c0001d06:	42                   	inc    edx
c0001d07:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001d0b:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001d0f:	29 fb                	sub    ebx,edi
c0001d11:	89 cf                	mov    edi,ecx
c0001d13:	29 f7                	sub    edi,esi
c0001d15:	01 c7                	add    edi,eax
c0001d17:	74 04                	je     c0001d1d <mem_cmp+0x1d>
c0001d19:	85 db                	test   ebx,ebx
c0001d1b:	74 e8                	je     c0001d05 <mem_cmp+0x5>
c0001d1d:	89 d8                	mov    eax,ebx
c0001d1f:	5b                   	pop    ebx
c0001d20:	5e                   	pop    esi
c0001d21:	5f                   	pop    edi
c0001d22:	c3                   	ret    

c0001d23 <chk_chr>:
c0001d23:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d26:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d29:	74 07                	je     c0001d32 <chk_chr+0xf>
c0001d2b:	39 d1                	cmp    ecx,edx
c0001d2d:	74 03                	je     c0001d32 <chk_chr+0xf>
c0001d2f:	40                   	inc    eax
c0001d30:	eb f1                	jmp    c0001d23 <chk_chr>
c0001d32:	89 c8                	mov    eax,ecx
c0001d34:	c3                   	ret    

c0001d35 <dbc_1st>:
c0001d35:	31 c0                	xor    eax,eax
c0001d37:	c3                   	ret    

c0001d38 <dbc_2nd>:
c0001d38:	31 c0                	xor    eax,eax
c0001d3a:	c3                   	ret    

c0001d3b <tchar2uni>:
c0001d3b:	57                   	push   edi
c0001d3c:	89 c7                	mov    edi,eax
c0001d3e:	56                   	push   esi
c0001d3f:	53                   	push   ebx
c0001d40:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d42:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d44:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d47:	84 c9                	test   cl,cl
c0001d49:	78 0a                	js     c0001d55 <tchar2uni+0x1a>
c0001d4b:	0f b6 d1             	movzx  edx,cl
c0001d4e:	89 f3                	mov    ebx,esi
c0001d50:	e9 9f 00 00 00       	jmp    c0001df4 <tchar2uni+0xb9>
c0001d55:	88 ca                	mov    dl,cl
c0001d57:	83 e2 e0             	and    edx,0xffffffe0
c0001d5a:	80 fa c0             	cmp    dl,0xc0
c0001d5d:	75 0c                	jne    c0001d6b <tchar2uni+0x30>
c0001d5f:	89 ca                	mov    edx,ecx
c0001d61:	b9 01 00 00 00       	mov    ecx,0x1
c0001d66:	83 e2 1f             	and    edx,0x1f
c0001d69:	eb 2e                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d6b:	88 ca                	mov    dl,cl
c0001d6d:	83 e2 f0             	and    edx,0xfffffff0
c0001d70:	80 fa e0             	cmp    dl,0xe0
c0001d73:	75 0c                	jne    c0001d81 <tchar2uni+0x46>
c0001d75:	89 ca                	mov    edx,ecx
c0001d77:	b9 02 00 00 00       	mov    ecx,0x2
c0001d7c:	83 e2 0f             	and    edx,0xf
c0001d7f:	eb 18                	jmp    c0001d99 <tchar2uni+0x5e>
c0001d81:	88 ca                	mov    dl,cl
c0001d83:	83 e2 f8             	and    edx,0xfffffff8
c0001d86:	88 d0                	mov    al,dl
c0001d88:	83 ca ff             	or     edx,0xffffffff
c0001d8b:	3c f0                	cmp    al,0xf0
c0001d8d:	75 6c                	jne    c0001dfb <tchar2uni+0xc0>
c0001d8f:	89 ca                	mov    edx,ecx
c0001d91:	b9 03 00 00 00       	mov    ecx,0x3
c0001d96:	83 e2 07             	and    edx,0x7
c0001d99:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d9d:	46                   	inc    esi
c0001d9e:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001da1:	88 c8                	mov    al,cl
c0001da3:	83 e0 c0             	and    eax,0xffffffc0
c0001da6:	3c 80                	cmp    al,0x80
c0001da8:	75 4e                	jne    c0001df8 <tchar2uni+0xbd>
c0001daa:	c1 e2 06             	shl    edx,0x6
c0001dad:	83 e1 3f             	and    ecx,0x3f
c0001db0:	09 ca                	or     edx,ecx
c0001db2:	39 de                	cmp    esi,ebx
c0001db4:	75 e7                	jne    c0001d9d <tchar2uni+0x62>
c0001db6:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001db9:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001dbf:	77 37                	ja     c0001df8 <tchar2uni+0xbd>
c0001dc1:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001dc7:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dcd:	76 29                	jbe    c0001df8 <tchar2uni+0xbd>
c0001dcf:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001dd5:	76 1d                	jbe    c0001df4 <tchar2uni+0xb9>
c0001dd7:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001ddd:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001de3:	c1 e1 06             	shl    ecx,0x6
c0001de6:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dec:	09 ca                	or     edx,ecx
c0001dee:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001df4:	89 1f                	mov    DWORD PTR [edi],ebx
c0001df6:	eb 03                	jmp    c0001dfb <tchar2uni+0xc0>
c0001df8:	83 ca ff             	or     edx,0xffffffff
c0001dfb:	5b                   	pop    ebx
c0001dfc:	89 d0                	mov    eax,edx
c0001dfe:	5e                   	pop    esi
c0001dff:	5f                   	pop    edi
c0001e00:	c3                   	ret    

c0001e01 <put_utf>:
c0001e01:	53                   	push   ebx
c0001e02:	83 f8 7f             	cmp    eax,0x7f
c0001e05:	89 c3                	mov    ebx,eax
c0001e07:	b0 00                	mov    al,0x0
c0001e09:	77 11                	ja     c0001e1c <put_utf+0x1b>
c0001e0b:	85 c9                	test   ecx,ecx
c0001e0d:	0f 84 e5 00 00 00    	je     c0001ef8 <put_utf+0xf7>
c0001e13:	88 1a                	mov    BYTE PTR [edx],bl
c0001e15:	b0 01                	mov    al,0x1
c0001e17:	e9 dc 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e1c:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e22:	77 23                	ja     c0001e47 <put_utf+0x46>
c0001e24:	83 f9 01             	cmp    ecx,0x1
c0001e27:	0f 86 cb 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e2d:	89 d8                	mov    eax,ebx
c0001e2f:	83 e3 3f             	and    ebx,0x3f
c0001e32:	c1 e8 06             	shr    eax,0x6
c0001e35:	83 cb 80             	or     ebx,0xffffff80
c0001e38:	83 c8 c0             	or     eax,0xffffffc0
c0001e3b:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e3e:	88 02                	mov    BYTE PTR [edx],al
c0001e40:	b0 02                	mov    al,0x2
c0001e42:	e9 b1 00 00 00       	jmp    c0001ef8 <put_utf+0xf7>
c0001e47:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e4d:	77 40                	ja     c0001e8f <put_utf+0x8e>
c0001e4f:	83 f9 02             	cmp    ecx,0x2
c0001e52:	0f 86 a0 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e58:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e5e:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e64:	0f 86 8e 00 00 00    	jbe    c0001ef8 <put_utf+0xf7>
c0001e6a:	89 d8                	mov    eax,ebx
c0001e6c:	c1 e8 0c             	shr    eax,0xc
c0001e6f:	83 c8 e0             	or     eax,0xffffffe0
c0001e72:	88 02                	mov    BYTE PTR [edx],al
c0001e74:	89 d8                	mov    eax,ebx
c0001e76:	83 e3 3f             	and    ebx,0x3f
c0001e79:	c1 e8 06             	shr    eax,0x6
c0001e7c:	83 cb 80             	or     ebx,0xffffff80
c0001e7f:	83 e0 3f             	and    eax,0x3f
c0001e82:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e85:	83 c8 80             	or     eax,0xffffff80
c0001e88:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e8b:	b0 03                	mov    al,0x3
c0001e8d:	eb 69                	jmp    c0001ef8 <put_utf+0xf7>
c0001e8f:	83 f9 03             	cmp    ecx,0x3
c0001e92:	76 64                	jbe    c0001ef8 <put_utf+0xf7>
c0001e94:	89 d9                	mov    ecx,ebx
c0001e96:	0f b7 c3             	movzx  eax,bx
c0001e99:	66 31 c9             	xor    cx,cx
c0001e9c:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001ea2:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001ea8:	c1 e9 06             	shr    ecx,0x6
c0001eab:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001eb1:	77 43                	ja     c0001ef6 <put_utf+0xf5>
c0001eb3:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001eb9:	77 3b                	ja     c0001ef6 <put_utf+0xf5>
c0001ebb:	09 cb                	or     ebx,ecx
c0001ebd:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ec3:	89 d8                	mov    eax,ebx
c0001ec5:	c1 e8 12             	shr    eax,0x12
c0001ec8:	83 c8 f0             	or     eax,0xfffffff0
c0001ecb:	88 02                	mov    BYTE PTR [edx],al
c0001ecd:	89 d8                	mov    eax,ebx
c0001ecf:	c1 e8 0c             	shr    eax,0xc
c0001ed2:	83 e0 3f             	and    eax,0x3f
c0001ed5:	83 c8 80             	or     eax,0xffffff80
c0001ed8:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001edb:	89 d8                	mov    eax,ebx
c0001edd:	83 e3 3f             	and    ebx,0x3f
c0001ee0:	c1 e8 06             	shr    eax,0x6
c0001ee3:	83 cb 80             	or     ebx,0xffffff80
c0001ee6:	83 e0 3f             	and    eax,0x3f
c0001ee9:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001eec:	83 c8 80             	or     eax,0xffffff80
c0001eef:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ef2:	b0 04                	mov    al,0x4
c0001ef4:	eb 02                	jmp    c0001ef8 <put_utf+0xf7>
c0001ef6:	31 c0                	xor    eax,eax
c0001ef8:	5b                   	pop    ebx
c0001ef9:	c3                   	ret    

c0001efa <clst2sect>:
c0001efa:	89 c1                	mov    ecx,eax
c0001efc:	83 ea 02             	sub    edx,0x2
c0001eff:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001f02:	83 e8 02             	sub    eax,0x2
c0001f05:	39 d0                	cmp    eax,edx
c0001f07:	76 0d                	jbe    c0001f16 <clst2sect+0x1c>
c0001f09:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001f0d:	f7 e2                	mul    edx
c0001f0f:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001f12:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001f15:	c3                   	ret    
c0001f16:	31 c0                	xor    eax,eax
c0001f18:	31 d2                	xor    edx,edx
c0001f1a:	c3                   	ret    

c0001f1b <clmt_clust>:
c0001f1b:	57                   	push   edi
c0001f1c:	89 cf                	mov    edi,ecx
c0001f1e:	56                   	push   esi
c0001f1f:	89 d6                	mov    esi,edx
c0001f21:	53                   	push   ebx
c0001f22:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f26:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f29:	89 f2                	mov    edx,esi
c0001f2b:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f2d:	c1 ef 09             	shr    edi,0x9
c0001f30:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f34:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f37:	89 f9                	mov    ecx,edi
c0001f39:	31 ff                	xor    edi,edi
c0001f3b:	57                   	push   edi
c0001f3c:	56                   	push   esi
c0001f3d:	51                   	push   ecx
c0001f3e:	52                   	push   edx
c0001f3f:	e8 a8 46 02 00       	call   c00265ec <__udivdi3>
c0001f44:	83 c4 10             	add    esp,0x10
c0001f47:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f49:	85 d2                	test   edx,edx
c0001f4b:	74 10                	je     c0001f5d <clmt_clust+0x42>
c0001f4d:	39 d0                	cmp    eax,edx
c0001f4f:	72 07                	jb     c0001f58 <clmt_clust+0x3d>
c0001f51:	29 d0                	sub    eax,edx
c0001f53:	83 c3 08             	add    ebx,0x8
c0001f56:	eb ef                	jmp    c0001f47 <clmt_clust+0x2c>
c0001f58:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f5b:	89 c2                	mov    edx,eax
c0001f5d:	5b                   	pop    ebx
c0001f5e:	89 d0                	mov    eax,edx
c0001f60:	5e                   	pop    esi
c0001f61:	5f                   	pop    edi
c0001f62:	c3                   	ret    

c0001f63 <pick_lfn>:
c0001f63:	55                   	push   ebp
c0001f64:	57                   	push   edi
c0001f65:	56                   	push   esi
c0001f66:	89 d6                	mov    esi,edx
c0001f68:	53                   	push   ebx
c0001f69:	89 c3                	mov    ebx,eax
c0001f6b:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f6e:	e8 ee fc ff ff       	call   c0001c61 <ld_word>
c0001f73:	66 85 c0             	test   ax,ax
c0001f76:	74 04                	je     c0001f7c <pick_lfn+0x19>
c0001f78:	31 c0                	xor    eax,eax
c0001f7a:	eb 5c                	jmp    c0001fd8 <pick_lfn+0x75>
c0001f7c:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f7f:	bd 01 00 00 00       	mov    ebp,0x1
c0001f84:	83 e1 bf             	and    ecx,0xffffffbf
c0001f87:	31 ff                	xor    edi,edi
c0001f89:	49                   	dec    ecx
c0001f8a:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f8d:	0f b6 87 80 90 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd6f80]
c0001f94:	01 f0                	add    eax,esi
c0001f96:	e8 c6 fc ff ff       	call   c0001c61 <ld_word>
c0001f9b:	66 85 ed             	test   bp,bp
c0001f9e:	74 11                	je     c0001fb1 <pick_lfn+0x4e>
c0001fa0:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fa6:	77 d0                	ja     c0001f78 <pick_lfn+0x15>
c0001fa8:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001fac:	89 c5                	mov    ebp,eax
c0001fae:	41                   	inc    ecx
c0001faf:	eb 04                	jmp    c0001fb5 <pick_lfn+0x52>
c0001fb1:	66 40                	inc    ax
c0001fb3:	75 c3                	jne    c0001f78 <pick_lfn+0x15>
c0001fb5:	47                   	inc    edi
c0001fb6:	83 ff 0d             	cmp    edi,0xd
c0001fb9:	75 d2                	jne    c0001f8d <pick_lfn+0x2a>
c0001fbb:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001fbe:	74 13                	je     c0001fd3 <pick_lfn+0x70>
c0001fc0:	66 85 ed             	test   bp,bp
c0001fc3:	74 0e                	je     c0001fd3 <pick_lfn+0x70>
c0001fc5:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fcb:	77 ab                	ja     c0001f78 <pick_lfn+0x15>
c0001fcd:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fd3:	b8 01 00 00 00       	mov    eax,0x1
c0001fd8:	5b                   	pop    ebx
c0001fd9:	5e                   	pop    esi
c0001fda:	5f                   	pop    edi
c0001fdb:	5d                   	pop    ebp
c0001fdc:	c3                   	ret    

c0001fdd <put_lfn>:
c0001fdd:	55                   	push   ebp
c0001fde:	31 ed                	xor    ebp,ebp
c0001fe0:	57                   	push   edi
c0001fe1:	89 d7                	mov    edi,edx
c0001fe3:	56                   	push   esi
c0001fe4:	31 f6                	xor    esi,esi
c0001fe6:	53                   	push   ebx
c0001fe7:	83 ec 08             	sub    esp,0x8
c0001fea:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fed:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001ff1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001ff5:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001ffb:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001ffe:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002001:	31 d2                	xor    edx,edx
c0002003:	e8 cb fc ff ff       	call   c0001cd3 <st_word>
c0002008:	0f b6 d9             	movzx  ebx,cl
c000200b:	4b                   	dec    ebx
c000200c:	6b db 0d             	imul   ebx,ebx,0xd
c000200f:	66 83 fe ff          	cmp    si,0xffff
c0002013:	74 08                	je     c000201d <put_lfn+0x40>
c0002015:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002018:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c000201c:	43                   	inc    ebx
c000201d:	0f b6 85 80 90 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd6f80]
c0002024:	0f b7 d6             	movzx  edx,si
c0002027:	01 f8                	add    eax,edi
c0002029:	e8 a5 fc ff ff       	call   c0001cd3 <st_word>
c000202e:	66 85 f6             	test   si,si
c0002031:	75 03                	jne    c0002036 <put_lfn+0x59>
c0002033:	83 ce ff             	or     esi,0xffffffff
c0002036:	45                   	inc    ebp
c0002037:	83 fd 0d             	cmp    ebp,0xd
c000203a:	75 d3                	jne    c000200f <put_lfn+0x32>
c000203c:	66 46                	inc    si
c000203e:	74 0a                	je     c000204a <put_lfn+0x6d>
c0002040:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002043:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002048:	75 09                	jne    c0002053 <put_lfn+0x76>
c000204a:	88 c8                	mov    al,cl
c000204c:	83 c8 40             	or     eax,0x40
c000204f:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002053:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002057:	88 07                	mov    BYTE PTR [edi],al
c0002059:	83 c4 08             	add    esp,0x8
c000205c:	5b                   	pop    ebx
c000205d:	5e                   	pop    esi
c000205e:	5f                   	pop    edi
c000205f:	5d                   	pop    ebp
c0002060:	c3                   	ret    

c0002061 <gen_numname>:
c0002061:	57                   	push   edi
c0002062:	89 cf                	mov    edi,ecx
c0002064:	56                   	push   esi
c0002065:	b9 0b 00 00 00       	mov    ecx,0xb
c000206a:	53                   	push   ebx
c000206b:	89 c6                	mov    esi,eax
c000206d:	83 ec 10             	sub    esp,0x10
c0002070:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002074:	e8 67 fc ff ff       	call   c0001ce0 <mem_cpy>
c0002079:	83 fb 05             	cmp    ebx,0x5
c000207c:	76 2d                	jbe    c00020ab <gen_numname+0x4a>
c000207e:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002081:	66 85 c0             	test   ax,ax
c0002084:	74 25                	je     c00020ab <gen_numname+0x4a>
c0002086:	83 c7 02             	add    edi,0x2
c0002089:	ba 10 00 00 00       	mov    edx,0x10
c000208e:	01 db                	add    ebx,ebx
c0002090:	89 c1                	mov    ecx,eax
c0002092:	66 d1 e8             	shr    ax,1
c0002095:	83 e1 01             	and    ecx,0x1
c0002098:	01 cb                	add    ebx,ecx
c000209a:	0f ba e3 10          	bt     ebx,0x10
c000209e:	73 06                	jae    c00020a6 <gen_numname+0x45>
c00020a0:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00020a6:	4a                   	dec    edx
c00020a7:	75 e5                	jne    c000208e <gen_numname+0x2d>
c00020a9:	eb d3                	jmp    c000207e <gen_numname+0x1d>
c00020ab:	b8 07 00 00 00       	mov    eax,0x7
c00020b0:	88 d9                	mov    cl,bl
c00020b2:	83 e1 0f             	and    ecx,0xf
c00020b5:	8d 51 30             	lea    edx,[ecx+0x30]
c00020b8:	80 fa 39             	cmp    dl,0x39
c00020bb:	76 03                	jbe    c00020c0 <gen_numname+0x5f>
c00020bd:	8d 51 37             	lea    edx,[ecx+0x37]
c00020c0:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020c3:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020c7:	89 da                	mov    edx,ebx
c00020c9:	c1 ea 04             	shr    edx,0x4
c00020cc:	83 fb 0f             	cmp    ebx,0xf
c00020cf:	76 06                	jbe    c00020d7 <gen_numname+0x76>
c00020d1:	89 c8                	mov    eax,ecx
c00020d3:	89 d3                	mov    ebx,edx
c00020d5:	eb d9                	jmp    c00020b0 <gen_numname+0x4f>
c00020d7:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020dc:	31 d2                	xor    edx,edx
c00020de:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020e1:	8d 04 16             	lea    eax,[esi+edx*1]
c00020e4:	39 ca                	cmp    edx,ecx
c00020e6:	73 18                	jae    c0002100 <gen_numname+0x9f>
c00020e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020eb:	3c 20                	cmp    al,0x20
c00020ed:	74 11                	je     c0002100 <gen_numname+0x9f>
c00020ef:	e8 41 fc ff ff       	call   c0001d35 <dbc_1st>
c00020f4:	85 c0                	test   eax,eax
c00020f6:	74 05                	je     c00020fd <gen_numname+0x9c>
c00020f8:	39 d3                	cmp    ebx,edx
c00020fa:	74 04                	je     c0002100 <gen_numname+0x9f>
c00020fc:	42                   	inc    edx
c00020fd:	42                   	inc    edx
c00020fe:	eb e1                	jmp    c00020e1 <gen_numname+0x80>
c0002100:	b0 20                	mov    al,0x20
c0002102:	83 f9 07             	cmp    ecx,0x7
c0002105:	77 05                	ja     c000210c <gen_numname+0xab>
c0002107:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c000210b:	41                   	inc    ecx
c000210c:	42                   	inc    edx
c000210d:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c0002111:	83 fa 07             	cmp    edx,0x7
c0002114:	76 ea                	jbe    c0002100 <gen_numname+0x9f>
c0002116:	83 c4 10             	add    esp,0x10
c0002119:	5b                   	pop    ebx
c000211a:	5e                   	pop    esi
c000211b:	5f                   	pop    edi
c000211c:	c3                   	ret    

c000211d <sum_sfn>:
c000211d:	31 c9                	xor    ecx,ecx
c000211f:	31 d2                	xor    edx,edx
c0002121:	d0 ca                	ror    dl,1
c0002123:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002126:	41                   	inc    ecx
c0002127:	83 f9 0b             	cmp    ecx,0xb
c000212a:	75 f5                	jne    c0002121 <sum_sfn+0x4>
c000212c:	88 d0                	mov    al,dl
c000212e:	c3                   	ret    

c000212f <xdir_sum>:
c000212f:	56                   	push   esi
c0002130:	31 c9                	xor    ecx,ecx
c0002132:	53                   	push   ebx
c0002133:	31 d2                	xor    edx,edx
c0002135:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c0002139:	43                   	inc    ebx
c000213a:	c1 e3 05             	shl    ebx,0x5
c000213d:	83 fa 02             	cmp    edx,0x2
c0002140:	74 0b                	je     c000214d <xdir_sum+0x1e>
c0002142:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002146:	66 d1 c9             	ror    cx,1
c0002149:	01 f1                	add    ecx,esi
c000214b:	eb 05                	jmp    c0002152 <xdir_sum+0x23>
c000214d:	ba 03 00 00 00       	mov    edx,0x3
c0002152:	42                   	inc    edx
c0002153:	39 d3                	cmp    ebx,edx
c0002155:	77 e6                	ja     c000213d <xdir_sum+0xe>
c0002157:	89 c8                	mov    eax,ecx
c0002159:	5b                   	pop    ebx
c000215a:	5e                   	pop    esi
c000215b:	c3                   	ret    

c000215c <xsum32>:
c000215c:	d1 ca                	ror    edx,1
c000215e:	0f b6 c0             	movzx  eax,al
c0002161:	01 d0                	add    eax,edx
c0002163:	c3                   	ret    

c0002164 <get_xfileinfo>:
c0002164:	55                   	push   ebp
c0002165:	31 c9                	xor    ecx,ecx
c0002167:	57                   	push   edi
c0002168:	bd 40 00 00 00       	mov    ebp,0x40
c000216d:	56                   	push   esi
c000216e:	31 ff                	xor    edi,edi
c0002170:	53                   	push   ebx
c0002171:	89 c6                	mov    esi,eax
c0002173:	83 ec 0c             	sub    esp,0xc
c0002176:	89 d3                	mov    ebx,edx
c0002178:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000217f:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002183:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002186:	76 6d                	jbe    c00021f5 <get_xfileinfo+0x91>
c0002188:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000218e:	76 0b                	jbe    c000219b <get_xfileinfo+0x37>
c0002190:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002194:	bf 01 00 00 00       	mov    edi,0x1
c0002199:	eb 63                	jmp    c00021fe <get_xfileinfo+0x9a>
c000219b:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c00021a1:	75 03                	jne    c00021a6 <get_xfileinfo+0x42>
c00021a3:	83 c5 02             	add    ebp,0x2
c00021a6:	8d 04 2e             	lea    eax,[esi+ebp*1]
c00021a9:	83 c5 02             	add    ebp,0x2
c00021ac:	e8 b0 fa ff ff       	call   c0001c61 <ld_word>
c00021b1:	ff 04 24             	inc    DWORD PTR [esp]
c00021b4:	66 85 c9             	test   cx,cx
c00021b7:	75 0d                	jne    c00021c6 <get_xfileinfo+0x62>
c00021b9:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021bf:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021c4:	76 2b                	jbe    c00021f1 <get_xfileinfo+0x8d>
c00021c6:	c1 e1 10             	shl    ecx,0x10
c00021c9:	ba ff 00 00 00       	mov    edx,0xff
c00021ce:	0f b7 c0             	movzx  eax,ax
c00021d1:	29 fa                	sub    edx,edi
c00021d3:	09 c8                	or     eax,ecx
c00021d5:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021d9:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021dd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021e1:	e8 1b fc ff ff       	call   c0001e01 <put_utf>
c00021e6:	84 c0                	test   al,al
c00021e8:	74 a6                	je     c0002190 <get_xfileinfo+0x2c>
c00021ea:	0f b6 c0             	movzx  eax,al
c00021ed:	01 c7                	add    edi,eax
c00021ef:	31 c0                	xor    eax,eax
c00021f1:	89 c1                	mov    ecx,eax
c00021f3:	eb 8a                	jmp    c000217f <get_xfileinfo+0x1b>
c00021f5:	85 ff                	test   edi,edi
c00021f7:	74 97                	je     c0002190 <get_xfileinfo+0x2c>
c00021f9:	66 85 c9             	test   cx,cx
c00021fc:	75 92                	jne    c0002190 <get_xfileinfo+0x2c>
c00021fe:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0002203:	31 c0                	xor    eax,eax
c0002205:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0002209:	31 d2                	xor    edx,edx
c000220b:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c000220e:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c0002211:	80 e1 10             	and    cl,0x10
c0002214:	75 08                	jne    c000221e <get_xfileinfo+0xba>
c0002216:	8d 46 38             	lea    eax,[esi+0x38]
c0002219:	e8 68 fa ff ff       	call   c0001c86 <ld_qword>
c000221e:	89 03                	mov    DWORD PTR [ebx],eax
c0002220:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002223:	8d 46 0c             	lea    eax,[esi+0xc]
c0002226:	e8 36 fa ff ff       	call   c0001c61 <ld_word>
c000222b:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c000222f:	8d 46 0e             	lea    eax,[esi+0xe]
c0002232:	e8 2a fa ff ff       	call   c0001c61 <ld_word>
c0002237:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000223b:	83 c4 0c             	add    esp,0xc
c000223e:	5b                   	pop    ebx
c000223f:	5e                   	pop    esi
c0002240:	5f                   	pop    edi
c0002241:	5d                   	pop    ebp
c0002242:	c3                   	ret    

c0002243 <get_ldnumber>:
c0002243:	8b 10                	mov    edx,DWORD PTR [eax]
c0002245:	85 d2                	test   edx,edx
c0002247:	74 14                	je     c000225d <get_ldnumber+0x1a>
c0002249:	56                   	push   esi
c000224a:	53                   	push   ebx
c000224b:	89 d3                	mov    ebx,edx
c000224d:	43                   	inc    ebx
c000224e:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002251:	80 f9 1f             	cmp    cl,0x1f
c0002254:	76 0d                	jbe    c0002263 <get_ldnumber+0x20>
c0002256:	80 f9 3a             	cmp    cl,0x3a
c0002259:	75 f2                	jne    c000224d <get_ldnumber+0xa>
c000225b:	eb 0a                	jmp    c0002267 <get_ldnumber+0x24>
c000225d:	83 c9 ff             	or     ecx,0xffffffff
c0002260:	89 c8                	mov    eax,ecx
c0002262:	c3                   	ret    
c0002263:	31 c9                	xor    ecx,ecx
c0002265:	eb 24                	jmp    c000228b <get_ldnumber+0x48>
c0002267:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226a:	8d 4e d0             	lea    ecx,[esi-0x30]
c000226d:	80 f9 09             	cmp    cl,0x9
c0002270:	77 16                	ja     c0002288 <get_ldnumber+0x45>
c0002272:	83 c2 02             	add    edx,0x2
c0002275:	83 c9 ff             	or     ecx,0xffffffff
c0002278:	39 d3                	cmp    ebx,edx
c000227a:	75 0f                	jne    c000228b <get_ldnumber+0x48>
c000227c:	89 f2                	mov    edx,esi
c000227e:	89 18                	mov    DWORD PTR [eax],ebx
c0002280:	0f be ca             	movsx  ecx,dl
c0002283:	83 e9 30             	sub    ecx,0x30
c0002286:	eb 03                	jmp    c000228b <get_ldnumber+0x48>
c0002288:	83 c9 ff             	or     ecx,0xffffffff
c000228b:	89 c8                	mov    eax,ecx
c000228d:	5b                   	pop    ebx
c000228e:	5e                   	pop    esi
c000228f:	c3                   	ret    

c0002290 <crc32>:
c0002290:	56                   	push   esi
c0002291:	89 d6                	mov    esi,edx
c0002293:	53                   	push   ebx
c0002294:	b2 01                	mov    dl,0x1
c0002296:	bb 08 00 00 00       	mov    ebx,0x8
c000229b:	89 f1                	mov    ecx,esi
c000229d:	84 d1                	test   cl,dl
c000229f:	0f 95 c1             	setne  cl
c00022a2:	0f b6 c9             	movzx  ecx,cl
c00022a5:	31 c1                	xor    ecx,eax
c00022a7:	89 c8                	mov    eax,ecx
c00022a9:	d1 e8                	shr    eax,1
c00022ab:	80 e1 01             	and    cl,0x1
c00022ae:	74 05                	je     c00022b5 <crc32+0x25>
c00022b0:	35 20 83 b8 ed       	xor    eax,0xedb88320
c00022b5:	d1 e2                	shl    edx,1
c00022b7:	4b                   	dec    ebx
c00022b8:	75 e1                	jne    c000229b <crc32+0xb>
c00022ba:	5b                   	pop    ebx
c00022bb:	5e                   	pop    esi
c00022bc:	c3                   	ret    

c00022bd <test_gpt_header>:
c00022bd:	55                   	push   ebp
c00022be:	b9 10 00 00 00       	mov    ecx,0x10
c00022c3:	57                   	push   edi
c00022c4:	ba 80 8f 02 c0       	mov    edx,0xc0028f80
c00022c9:	56                   	push   esi
c00022ca:	31 ff                	xor    edi,edi
c00022cc:	53                   	push   ebx
c00022cd:	89 c3                	mov    ebx,eax
c00022cf:	e8 2c fa ff ff       	call   c0001d00 <mem_cmp>
c00022d4:	85 c0                	test   eax,eax
c00022d6:	75 55                	jne    c000232d <test_gpt_header+0x70>
c00022d8:	89 c7                	mov    edi,eax
c00022da:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022df:	83 ce ff             	or     esi,0xffffffff
c00022e2:	31 d2                	xor    edx,edx
c00022e4:	83 fd 03             	cmp    ebp,0x3
c00022e7:	76 05                	jbe    c00022ee <test_gpt_header+0x31>
c00022e9:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022ee:	89 f0                	mov    eax,esi
c00022f0:	45                   	inc    ebp
c00022f1:	e8 9a ff ff ff       	call   c0002290 <crc32>
c00022f6:	83 fd 4c             	cmp    ebp,0x4c
c00022f9:	89 c6                	mov    esi,eax
c00022fb:	75 e5                	jne    c00022e2 <test_gpt_header+0x25>
c00022fd:	8d 43 10             	lea    eax,[ebx+0x10]
c0002300:	f7 d6                	not    esi
c0002302:	e8 67 f9 ff ff       	call   c0001c6e <ld_dword>
c0002307:	39 c6                	cmp    esi,eax
c0002309:	75 22                	jne    c000232d <test_gpt_header+0x70>
c000230b:	8d 43 54             	lea    eax,[ebx+0x54]
c000230e:	e8 5b f9 ff ff       	call   c0001c6e <ld_dword>
c0002313:	83 c0 80             	add    eax,0xffffff80
c0002316:	75 15                	jne    c000232d <test_gpt_header+0x70>
c0002318:	8d 43 50             	lea    eax,[ebx+0x50]
c000231b:	e8 4e f9 ff ff       	call   c0001c6e <ld_dword>
c0002320:	3d 80 00 00 00       	cmp    eax,0x80
c0002325:	0f 96 c0             	setbe  al
c0002328:	0f b6 c0             	movzx  eax,al
c000232b:	89 c7                	mov    edi,eax
c000232d:	5b                   	pop    ebx
c000232e:	89 f8                	mov    eax,edi
c0002330:	5e                   	pop    esi
c0002331:	5f                   	pop    edi
c0002332:	5d                   	pop    ebp
c0002333:	c3                   	ret    

c0002334 <make_rand>:
c0002334:	56                   	push   esi
c0002335:	85 c0                	test   eax,eax
c0002337:	53                   	push   ebx
c0002338:	75 05                	jne    c000233f <make_rand+0xb>
c000233a:	b8 01 00 00 00       	mov    eax,0x1
c000233f:	01 d1                	add    ecx,edx
c0002341:	bb 08 00 00 00       	mov    ebx,0x8
c0002346:	89 c6                	mov    esi,eax
c0002348:	d1 e8                	shr    eax,1
c000234a:	83 e6 01             	and    esi,0x1
c000234d:	85 f6                	test   esi,esi
c000234f:	74 05                	je     c0002356 <make_rand+0x22>
c0002351:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002356:	4b                   	dec    ebx
c0002357:	75 ed                	jne    c0002346 <make_rand+0x12>
c0002359:	42                   	inc    edx
c000235a:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000235d:	39 ca                	cmp    edx,ecx
c000235f:	75 e0                	jne    c0002341 <make_rand+0xd>
c0002361:	5b                   	pop    ebx
c0002362:	5e                   	pop    esi
c0002363:	c3                   	ret    

c0002364 <validate>:
c0002364:	56                   	push   esi
c0002365:	53                   	push   ebx
c0002366:	89 d6                	mov    esi,edx
c0002368:	51                   	push   ecx
c0002369:	85 c0                	test   eax,eax
c000236b:	75 09                	jne    c0002376 <validate+0x12>
c000236d:	b8 09 00 00 00       	mov    eax,0x9
c0002372:	31 c9                	xor    ecx,ecx
c0002374:	eb 2f                	jmp    c00023a5 <validate+0x41>
c0002376:	89 c3                	mov    ebx,eax
c0002378:	8b 00                	mov    eax,DWORD PTR [eax]
c000237a:	85 c0                	test   eax,eax
c000237c:	74 ef                	je     c000236d <validate+0x9>
c000237e:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002381:	74 ea                	je     c000236d <validate+0x9>
c0002383:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002387:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000238b:	75 e0                	jne    c000236d <validate+0x9>
c000238d:	83 ec 0c             	sub    esp,0xc
c0002390:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002394:	50                   	push   eax
c0002395:	e8 76 f8 ff ff       	call   c0001c10 <disk_status>
c000239a:	83 c4 10             	add    esp,0x10
c000239d:	a8 01                	test   al,0x1
c000239f:	75 cc                	jne    c000236d <validate+0x9>
c00023a1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00023a3:	31 c0                	xor    eax,eax
c00023a5:	89 0e                	mov    DWORD PTR [esi],ecx
c00023a7:	5a                   	pop    edx
c00023a8:	5b                   	pop    ebx
c00023a9:	5e                   	pop    esi
c00023aa:	c3                   	ret    

c00023ab <sync_window>:
c00023ab:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00023af:	0f 84 85 00 00 00    	je     c000243a <sync_window+0x8f>
c00023b5:	55                   	push   ebp
c00023b6:	8d 68 54             	lea    ebp,[eax+0x54]
c00023b9:	57                   	push   edi
c00023ba:	56                   	push   esi
c00023bb:	53                   	push   ebx
c00023bc:	89 c3                	mov    ebx,eax
c00023be:	83 ec 28             	sub    esp,0x28
c00023c1:	6a 01                	push   0x1
c00023c3:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023c6:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023c9:	55                   	push   ebp
c00023ca:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023ce:	50                   	push   eax
c00023cf:	e8 58 f8 ff ff       	call   c0001c2c <disk_write>
c00023d4:	83 c4 20             	add    esp,0x20
c00023d7:	ba 01 00 00 00       	mov    edx,0x1
c00023dc:	85 c0                	test   eax,eax
c00023de:	75 50                	jne    c0002430 <sync_window+0x85>
c00023e0:	31 ff                	xor    edi,edi
c00023e2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023e5:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023e9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ed:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023f0:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023f3:	89 c6                	mov    esi,eax
c00023f5:	89 d7                	mov    edi,edx
c00023f7:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023fa:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023fe:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c0002401:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0002405:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0002409:	73 23                	jae    c000242e <sync_window+0x83>
c000240b:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000240f:	75 1d                	jne    c000242e <sync_window+0x83>
c0002411:	83 ec 0c             	sub    esp,0xc
c0002414:	6a 01                	push   0x1
c0002416:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c000241a:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000241e:	52                   	push   edx
c000241f:	50                   	push   eax
c0002420:	55                   	push   ebp
c0002421:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002425:	50                   	push   eax
c0002426:	e8 01 f8 ff ff       	call   c0001c2c <disk_write>
c000242b:	83 c4 20             	add    esp,0x20
c000242e:	31 d2                	xor    edx,edx
c0002430:	83 c4 1c             	add    esp,0x1c
c0002433:	89 d0                	mov    eax,edx
c0002435:	5b                   	pop    ebx
c0002436:	5e                   	pop    esi
c0002437:	5f                   	pop    edi
c0002438:	5d                   	pop    ebp
c0002439:	c3                   	ret    
c000243a:	31 d2                	xor    edx,edx
c000243c:	89 d0                	mov    eax,edx
c000243e:	c3                   	ret    

c000243f <move_window>:
c000243f:	56                   	push   esi
c0002440:	53                   	push   ebx
c0002441:	89 c3                	mov    ebx,eax
c0002443:	83 ec 14             	sub    esp,0x14
c0002446:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c0002449:	75 07                	jne    c0002452 <move_window+0x13>
c000244b:	31 f6                	xor    esi,esi
c000244d:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002450:	74 59                	je     c00024ab <move_window+0x6c>
c0002452:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002456:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000245a:	89 d8                	mov    eax,ebx
c000245c:	e8 4a ff ff ff       	call   c00023ab <sync_window>
c0002461:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002465:	89 c6                	mov    esi,eax
c0002467:	85 c0                	test   eax,eax
c0002469:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000246d:	75 3c                	jne    c00024ab <move_window+0x6c>
c000246f:	83 ec 0c             	sub    esp,0xc
c0002472:	8d 43 54             	lea    eax,[ebx+0x54]
c0002475:	6a 01                	push   0x1
c0002477:	51                   	push   ecx
c0002478:	52                   	push   edx
c0002479:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000247d:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002481:	50                   	push   eax
c0002482:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002486:	50                   	push   eax
c0002487:	e8 8a f7 ff ff       	call   c0001c16 <disk_read>
c000248c:	83 c4 20             	add    esp,0x20
c000248f:	85 c0                	test   eax,eax
c0002491:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002495:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002499:	74 0a                	je     c00024a5 <move_window+0x66>
c000249b:	83 ca ff             	or     edx,0xffffffff
c000249e:	be 01 00 00 00       	mov    esi,0x1
c00024a3:	89 d1                	mov    ecx,edx
c00024a5:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c00024a8:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c00024ab:	89 f0                	mov    eax,esi
c00024ad:	83 c4 14             	add    esp,0x14
c00024b0:	5b                   	pop    ebx
c00024b1:	5e                   	pop    esi
c00024b2:	c3                   	ret    

c00024b3 <check_fs>:
c00024b3:	53                   	push   ebx
c00024b4:	89 c3                	mov    ebx,eax
c00024b6:	83 ec 08             	sub    esp,0x8
c00024b9:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c00024bd:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024c4:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024cb:	e8 6f ff ff ff       	call   c000243f <move_window>
c00024d0:	ba 04 00 00 00       	mov    edx,0x4
c00024d5:	85 c0                	test   eax,eax
c00024d7:	0f 85 89 00 00 00    	jne    c0002566 <check_fs+0xb3>
c00024dd:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024e3:	e8 79 f7 ff ff       	call   c0001c61 <ld_word>
c00024e8:	ba 03 00 00 00       	mov    edx,0x3
c00024ed:	66 3d 55 aa          	cmp    ax,0xaa55
c00024f1:	75 73                	jne    c0002566 <check_fs+0xb3>
c00024f3:	ba a0 90 02 c0       	mov    edx,0xc00290a0
c00024f8:	8d 43 54             	lea    eax,[ebx+0x54]
c00024fb:	b9 0b 00 00 00       	mov    ecx,0xb
c0002500:	e8 fb f7 ff ff       	call   c0001d00 <mem_cmp>
c0002505:	ba 01 00 00 00       	mov    edx,0x1
c000250a:	85 c0                	test   eax,eax
c000250c:	74 58                	je     c0002566 <check_fs+0xb3>
c000250e:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c0002511:	8d 50 18             	lea    edx,[eax+0x18]
c0002514:	80 fa 01             	cmp    dl,0x1
c0002517:	76 09                	jbe    c0002522 <check_fs+0x6f>
c0002519:	ba 02 00 00 00       	mov    edx,0x2
c000251e:	3c eb                	cmp    al,0xeb
c0002520:	75 44                	jne    c0002566 <check_fs+0xb3>
c0002522:	ba 0c c4 02 c0       	mov    edx,0xc002c40c
c0002527:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000252d:	b9 03 00 00 00       	mov    ecx,0x3
c0002532:	e8 c9 f7 ff ff       	call   c0001d00 <mem_cmp>
c0002537:	31 d2                	xor    edx,edx
c0002539:	85 c0                	test   eax,eax
c000253b:	74 29                	je     c0002566 <check_fs+0xb3>
c000253d:	ba ac 90 02 c0       	mov    edx,0xc00290ac
c0002542:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002548:	b9 05 00 00 00       	mov    ecx,0x5
c000254d:	e8 ae f7 ff ff       	call   c0001d00 <mem_cmp>
c0002552:	31 d2                	xor    edx,edx
c0002554:	85 c0                	test   eax,eax
c0002556:	74 0e                	je     c0002566 <check_fs+0xb3>
c0002558:	31 d2                	xor    edx,edx
c000255a:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002561:	0f 95 c2             	setne  dl
c0002564:	01 d2                	add    edx,edx
c0002566:	89 d0                	mov    eax,edx
c0002568:	83 c4 08             	add    esp,0x8
c000256b:	5b                   	pop    ebx
c000256c:	c3                   	ret    

c000256d <find_volume>:
c000256d:	55                   	push   ebp
c000256e:	31 c9                	xor    ecx,ecx
c0002570:	57                   	push   edi
c0002571:	56                   	push   esi
c0002572:	89 d6                	mov    esi,edx
c0002574:	53                   	push   ebx
c0002575:	31 d2                	xor    edx,edx
c0002577:	83 ec 3c             	sub    esp,0x3c
c000257a:	89 c3                	mov    ebx,eax
c000257c:	e8 32 ff ff ff       	call   c00024b3 <check_fs>
c0002581:	83 f8 02             	cmp    eax,0x2
c0002584:	74 0e                	je     c0002594 <find_volume+0x27>
c0002586:	0f 87 5d 01 00 00    	ja     c00026e9 <find_volume+0x17c>
c000258c:	85 f6                	test   esi,esi
c000258e:	0f 84 55 01 00 00    	je     c00026e9 <find_volume+0x17c>
c0002594:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000259b:	0f 85 dd 00 00 00    	jne    c000267e <find_volume+0x111>
c00025a1:	31 c9                	xor    ecx,ecx
c00025a3:	ba 01 00 00 00       	mov    edx,0x1
c00025a8:	89 d8                	mov    eax,ebx
c00025aa:	e8 90 fe ff ff       	call   c000243f <move_window>
c00025af:	85 c0                	test   eax,eax
c00025b1:	74 0a                	je     c00025bd <find_volume+0x50>
c00025b3:	b8 04 00 00 00       	mov    eax,0x4
c00025b8:	e9 2c 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025bd:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025c0:	89 e8                	mov    eax,ebp
c00025c2:	e8 f6 fc ff ff       	call   c00022bd <test_gpt_header>
c00025c7:	85 c0                	test   eax,eax
c00025c9:	75 0a                	jne    c00025d5 <find_volume+0x68>
c00025cb:	b8 03 00 00 00       	mov    eax,0x3
c00025d0:	e9 14 01 00 00       	jmp    c00026e9 <find_volume+0x17c>
c00025d5:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025db:	e8 8e f6 ff ff       	call   c0001c6e <ld_dword>
c00025e0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025e4:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025ea:	e8 97 f6 ff ff       	call   c0001c86 <ld_qword>
c00025ef:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025f7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025fb:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025ff:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0002607:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000260b:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c000260f:	74 ba                	je     c00025cb <find_volume+0x5e>
c0002611:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0002615:	31 c9                	xor    ecx,ecx
c0002617:	c1 e7 07             	shl    edi,0x7
c000261a:	89 d8                	mov    eax,ebx
c000261c:	89 fa                	mov    edx,edi
c000261e:	c1 ea 09             	shr    edx,0x9
c0002621:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002625:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c0002629:	e8 11 fe ff ff       	call   c000243f <move_window>
c000262e:	85 c0                	test   eax,eax
c0002630:	75 81                	jne    c00025b3 <find_volume+0x46>
c0002632:	81 e7 80 01 00 00    	and    edi,0x180
c0002638:	b9 10 00 00 00       	mov    ecx,0x10
c000263d:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002641:	ba 90 90 02 c0       	mov    edx,0xc0029090
c0002646:	e8 b5 f6 ff ff       	call   c0001d00 <mem_cmp>
c000264b:	85 c0                	test   eax,eax
c000264d:	75 29                	jne    c0002678 <find_volume+0x10b>
c000264f:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002653:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002657:	e8 2a f6 ff ff       	call   c0001c86 <ld_qword>
c000265c:	89 d1                	mov    ecx,edx
c000265e:	89 c2                	mov    edx,eax
c0002660:	89 d8                	mov    eax,ebx
c0002662:	e8 4c fe ff ff       	call   c00024b3 <check_fs>
c0002667:	85 f6                	test   esi,esi
c0002669:	75 07                	jne    c0002672 <find_volume+0x105>
c000266b:	83 f8 01             	cmp    eax,0x1
c000266e:	77 08                	ja     c0002678 <find_volume+0x10b>
c0002670:	eb 77                	jmp    c00026e9 <find_volume+0x17c>
c0002672:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002676:	74 71                	je     c00026e9 <find_volume+0x17c>
c0002678:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000267c:	eb 89                	jmp    c0002607 <find_volume+0x9a>
c000267e:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002682:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002688:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000268e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002692:	89 cd                	mov    ebp,ecx
c0002694:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002698:	89 f8                	mov    eax,edi
c000269a:	83 c7 10             	add    edi,0x10
c000269d:	e8 cc f5 ff ff       	call   c0001c6e <ld_dword>
c00026a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00026a6:	89 01                	mov    DWORD PTR [ecx],eax
c00026a8:	83 c1 04             	add    ecx,0x4
c00026ab:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c00026af:	75 e3                	jne    c0002694 <find_volume+0x127>
c00026b1:	31 ff                	xor    edi,edi
c00026b3:	85 f6                	test   esi,esi
c00026b5:	74 03                	je     c00026ba <find_volume+0x14d>
c00026b7:	8d 7e ff             	lea    edi,[esi-0x1]
c00026ba:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c00026be:	85 d2                	test   edx,edx
c00026c0:	74 14                	je     c00026d6 <find_volume+0x169>
c00026c2:	31 c9                	xor    ecx,ecx
c00026c4:	89 d8                	mov    eax,ebx
c00026c6:	e8 e8 fd ff ff       	call   c00024b3 <check_fs>
c00026cb:	83 f8 01             	cmp    eax,0x1
c00026ce:	76 19                	jbe    c00026e9 <find_volume+0x17c>
c00026d0:	85 f6                	test   esi,esi
c00026d2:	74 0f                	je     c00026e3 <find_volume+0x176>
c00026d4:	eb 13                	jmp    c00026e9 <find_volume+0x17c>
c00026d6:	85 f6                	test   esi,esi
c00026d8:	0f 85 ed fe ff ff    	jne    c00025cb <find_volume+0x5e>
c00026de:	b8 03 00 00 00       	mov    eax,0x3
c00026e3:	47                   	inc    edi
c00026e4:	83 ff 03             	cmp    edi,0x3
c00026e7:	76 d1                	jbe    c00026ba <find_volume+0x14d>
c00026e9:	83 c4 3c             	add    esp,0x3c
c00026ec:	5b                   	pop    ebx
c00026ed:	5e                   	pop    esi
c00026ee:	5f                   	pop    edi
c00026ef:	5d                   	pop    ebp
c00026f0:	c3                   	ret    

c00026f1 <mount_volume>:
c00026f1:	55                   	push   ebp
c00026f2:	57                   	push   edi
c00026f3:	89 cf                	mov    edi,ecx
c00026f5:	56                   	push   esi
c00026f6:	53                   	push   ebx
c00026f7:	bb 0b 00 00 00       	mov    ebx,0xb
c00026fc:	83 ec 3c             	sub    esp,0x3c
c00026ff:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0002705:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002709:	e8 35 fb ff ff       	call   c0002243 <get_ldnumber>
c000270e:	85 c0                	test   eax,eax
c0002710:	0f 88 3a 05 00 00    	js     c0002c50 <mount_volume+0x55f>
c0002716:	8b 2c 85 a0 df 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd2060]
c000271d:	89 c6                	mov    esi,eax
c000271f:	bb 0c 00 00 00       	mov    ebx,0xc
c0002724:	85 ed                	test   ebp,ebp
c0002726:	0f 84 24 05 00 00    	je     c0002c50 <mount_volume+0x55f>
c000272c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002730:	83 e7 fe             	and    edi,0xfffffffe
c0002733:	89 2a                	mov    DWORD PTR [edx],ebp
c0002735:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c0002739:	74 32                	je     c000276d <mount_volume+0x7c>
c000273b:	83 ec 0c             	sub    esp,0xc
c000273e:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002742:	50                   	push   eax
c0002743:	e8 c8 f4 ff ff       	call   c0001c10 <disk_status>
c0002748:	83 c4 10             	add    esp,0x10
c000274b:	a8 01                	test   al,0x1
c000274d:	75 1e                	jne    c000276d <mount_volume+0x7c>
c000274f:	31 db                	xor    ebx,ebx
c0002751:	89 f9                	mov    ecx,edi
c0002753:	84 c9                	test   cl,cl
c0002755:	0f 84 f5 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c000275b:	a8 04                	test   al,0x4
c000275d:	0f 84 ed 04 00 00    	je     c0002c50 <mount_volume+0x55f>
c0002763:	bb 0a 00 00 00       	mov    ebx,0xa
c0002768:	e9 e3 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c000276d:	83 ec 0c             	sub    esp,0xc
c0002770:	89 f0                	mov    eax,esi
c0002772:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002776:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c0002779:	0f b6 f0             	movzx  esi,al
c000277c:	bb 03 00 00 00       	mov    ebx,0x3
c0002781:	56                   	push   esi
c0002782:	e8 8c f4 ff ff       	call   c0001c13 <disk_initialize>
c0002787:	83 c4 10             	add    esp,0x10
c000278a:	a8 01                	test   al,0x1
c000278c:	0f 85 be 04 00 00    	jne    c0002c50 <mount_volume+0x55f>
c0002792:	89 f9                	mov    ecx,edi
c0002794:	84 c9                	test   cl,cl
c0002796:	74 04                	je     c000279c <mount_volume+0xab>
c0002798:	a8 04                	test   al,0x4
c000279a:	75 c7                	jne    c0002763 <mount_volume+0x72>
c000279c:	31 d2                	xor    edx,edx
c000279e:	89 e8                	mov    eax,ebp
c00027a0:	e8 c8 fd ff ff       	call   c000256d <find_volume>
c00027a5:	83 f8 04             	cmp    eax,0x4
c00027a8:	75 0a                	jne    c00027b4 <mount_volume+0xc3>
c00027aa:	bb 01 00 00 00       	mov    ebx,0x1
c00027af:	e9 9c 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027b4:	83 f8 01             	cmp    eax,0x1
c00027b7:	76 0a                	jbe    c00027c3 <mount_volume+0xd2>
c00027b9:	bb 0d 00 00 00       	mov    ebx,0xd
c00027be:	e9 8d 04 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c00027c3:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027c6:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027cd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027d1:	75 17                	jne    c00027ea <mount_volume+0xf9>
c00027d3:	b8 0b 00 00 00       	mov    eax,0xb
c00027d8:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027dd:	75 da                	jne    c00027b9 <mount_volume+0xc8>
c00027df:	40                   	inc    eax
c00027e0:	83 f8 40             	cmp    eax,0x40
c00027e3:	75 f3                	jne    c00027d8 <mount_volume+0xe7>
c00027e5:	e9 5a 02 00 00       	jmp    c0002a44 <mount_volume+0x353>
c00027ea:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ed:	e8 6f f4 ff ff       	call   c0001c61 <ld_word>
c00027f2:	66 3d 00 02          	cmp    ax,0x200
c00027f6:	75 c1                	jne    c00027b9 <mount_volume+0xc8>
c00027f8:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027fb:	e8 61 f4 ff ff       	call   c0001c61 <ld_word>
c0002800:	0f b7 c0             	movzx  eax,ax
c0002803:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002807:	85 c0                	test   eax,eax
c0002809:	75 0c                	jne    c0002817 <mount_volume+0x126>
c000280b:	8d 45 78             	lea    eax,[ebp+0x78]
c000280e:	e8 5b f4 ff ff       	call   c0001c6e <ld_dword>
c0002813:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000281b:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c000281e:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002821:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002825:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002828:	48                   	dec    eax
c0002829:	3c 01                	cmp    al,0x1
c000282b:	77 8c                	ja     c00027b9 <mount_volume+0xc8>
c000282d:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002831:	89 c3                	mov    ebx,eax
c0002833:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002837:	66 85 c0             	test   ax,ax
c000283a:	0f 84 79 ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002840:	8d 40 ff             	lea    eax,[eax-0x1]
c0002843:	85 d8                	test   eax,ebx
c0002845:	0f 85 6e ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000284b:	8d 45 65             	lea    eax,[ebp+0x65]
c000284e:	e8 0e f4 ff ff       	call   c0001c61 <ld_word>
c0002853:	89 c7                	mov    edi,eax
c0002855:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c0002859:	a8 0f                	test   al,0xf
c000285b:	0f 85 58 ff ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002861:	8d 45 67             	lea    eax,[ebp+0x67]
c0002864:	e8 f8 f3 ff ff       	call   c0001c61 <ld_word>
c0002869:	0f b7 f0             	movzx  esi,ax
c000286c:	85 f6                	test   esi,esi
c000286e:	75 0a                	jne    c000287a <mount_volume+0x189>
c0002870:	8d 45 74             	lea    eax,[ebp+0x74]
c0002873:	e8 f6 f3 ff ff       	call   c0001c6e <ld_dword>
c0002878:	89 c6                	mov    esi,eax
c000287a:	8d 45 62             	lea    eax,[ebp+0x62]
c000287d:	e8 df f3 ff ff       	call   c0001c61 <ld_word>
c0002882:	66 85 c0             	test   ax,ax
c0002885:	0f 84 2e ff ff ff    	je     c00027b9 <mount_volume+0xc8>
c000288b:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002890:	0f b7 c8             	movzx  ecx,ax
c0002893:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002898:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000289c:	89 fa                	mov    edx,edi
c000289e:	66 c1 ea 04          	shr    dx,0x4
c00028a2:	0f b7 d2             	movzx  edx,dx
c00028a5:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c00028a9:	8d 04 0a             	lea    eax,[edx+ecx*1]
c00028ac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00028b0:	39 c6                	cmp    esi,eax
c00028b2:	0f 82 01 ff ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028b8:	29 c6                	sub    esi,eax
c00028ba:	31 d2                	xor    edx,edx
c00028bc:	89 f0                	mov    eax,esi
c00028be:	f7 f3                	div    ebx
c00028c0:	39 de                	cmp    esi,ebx
c00028c2:	0f 82 f1 fe ff ff    	jb     c00027b9 <mount_volume+0xc8>
c00028c8:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028cd:	0f 87 e6 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c00028d3:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028d8:	0f 86 63 03 00 00    	jbe    c0002c41 <mount_volume+0x550>
c00028de:	bb 03 00 00 00       	mov    ebx,0x3
c00028e3:	8d 70 02             	lea    esi,[eax+0x2]
c00028e6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028ea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028ee:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028f1:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028f4:	31 d2                	xor    edx,edx
c00028f6:	89 c8                	mov    eax,ecx
c00028f8:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028fb:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028ff:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002903:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0002907:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000290b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c000290e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002911:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002915:	31 d2                	xor    edx,edx
c0002917:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000291b:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c000291f:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002922:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002925:	83 fb 03             	cmp    ebx,0x3
c0002928:	75 2b                	jne    c0002955 <mount_volume+0x264>
c000292a:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000292d:	e8 2f f3 ff ff       	call   c0001c61 <ld_word>
c0002932:	66 09 c7             	or     di,ax
c0002935:	0f 85 7e fe ff ff    	jne    c00027b9 <mount_volume+0xc8>
c000293b:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002941:	c1 e6 02             	shl    esi,0x2
c0002944:	e8 25 f3 ff ff       	call   c0001c6e <ld_dword>
c0002949:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002950:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002953:	eb 30                	jmp    c0002985 <mount_volume+0x294>
c0002955:	66 85 ff             	test   di,di
c0002958:	0f 84 5b fe ff ff    	je     c00027b9 <mount_volume+0xc8>
c000295e:	31 d2                	xor    edx,edx
c0002960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002964:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002968:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000296c:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c000296f:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002972:	83 fb 02             	cmp    ebx,0x2
c0002975:	75 04                	jne    c000297b <mount_volume+0x28a>
c0002977:	01 f6                	add    esi,esi
c0002979:	eb 0a                	jmp    c0002985 <mount_volume+0x294>
c000297b:	8d 04 76             	lea    eax,[esi+esi*2]
c000297e:	83 e6 01             	and    esi,0x1
c0002981:	d1 e8                	shr    eax,1
c0002983:	01 c6                	add    esi,eax
c0002985:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000298b:	c1 ee 09             	shr    esi,0x9
c000298e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002992:	0f 87 21 fe ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002998:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c000299f:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c00029a6:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c00029aa:	83 fb 03             	cmp    ebx,0x3
c00029ad:	75 7a                	jne    c0002a29 <mount_volume+0x338>
c00029af:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c00029b5:	e8 a7 f2 ff ff       	call   c0001c61 <ld_word>
c00029ba:	66 48                	dec    ax
c00029bc:	75 6b                	jne    c0002a29 <mount_volume+0x338>
c00029be:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029c2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029c6:	83 c2 01             	add    edx,0x1
c00029c9:	89 e8                	mov    eax,ebp
c00029cb:	83 d1 00             	adc    ecx,0x0
c00029ce:	e8 6c fa ff ff       	call   c000243f <move_window>
c00029d3:	85 c0                	test   eax,eax
c00029d5:	75 52                	jne    c0002a29 <mount_volume+0x338>
c00029d7:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029db:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029e1:	e8 7b f2 ff ff       	call   c0001c61 <ld_word>
c00029e6:	66 3d 55 aa          	cmp    ax,0xaa55
c00029ea:	75 3d                	jne    c0002a29 <mount_volume+0x338>
c00029ec:	8d 45 54             	lea    eax,[ebp+0x54]
c00029ef:	e8 7a f2 ff ff       	call   c0001c6e <ld_dword>
c00029f4:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029f9:	75 2e                	jne    c0002a29 <mount_volume+0x338>
c00029fb:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c0002a01:	e8 68 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a06:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002a0b:	75 1c                	jne    c0002a29 <mount_volume+0x338>
c0002a0d:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c0002a13:	e8 56 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a18:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c0002a1b:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a21:	e8 48 f2 ff ff       	call   c0001c6e <ld_dword>
c0002a26:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a29:	66 a1 80 df 02 c0    	mov    ax,ds:0xc002df80
c0002a2f:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a32:	40                   	inc    eax
c0002a33:	31 db                	xor    ebx,ebx
c0002a35:	66 a3 80 df 02 c0    	mov    ds:0xc002df80,ax
c0002a3b:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a3f:	e9 0c 02 00 00       	jmp    c0002c50 <mount_volume+0x55f>
c0002a44:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a4a:	e8 12 f2 ff ff       	call   c0001c61 <ld_word>
c0002a4f:	66 3d 00 01          	cmp    ax,0x100
c0002a53:	0f 85 60 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a59:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a60:	0f 85 53 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a66:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a6c:	e8 15 f2 ff ff       	call   c0001c86 <ld_qword>
c0002a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a75:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a79:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a7f:	e8 ea f1 ff ff       	call   c0001c6e <ld_dword>
c0002a84:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a87:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a8d:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a90:	fe c8                	dec    al
c0002a92:	0f 85 21 fd ff ff    	jne    c00027b9 <mount_volume+0xc8>
c0002a98:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a9f:	bb 01 00 00 00       	mov    ebx,0x1
c0002aa4:	d3 e3                	shl    ebx,cl
c0002aa6:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002aaa:	66 85 db             	test   bx,bx
c0002aad:	0f 84 06 fd ff ff    	je     c00027b9 <mount_volume+0xc8>
c0002ab3:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002ab9:	e8 b0 f1 ff ff       	call   c0001c6e <ld_dword>
c0002abe:	89 c6                	mov    esi,eax
c0002ac0:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002ac5:	0f 87 ee fc ff ff    	ja     c00027b9 <mount_volume+0xc8>
c0002acb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002acf:	8d 40 02             	lea    eax,[eax+0x2]
c0002ad2:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ad5:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ad8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002adc:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002adf:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ae5:	e8 84 f1 ff ff       	call   c0001c6e <ld_dword>
c0002aea:	31 d2                	xor    edx,edx
c0002aec:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002af4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002af8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002afc:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002aff:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002b02:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002b08:	e8 61 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b0d:	31 d2                	xor    edx,edx
c0002b0f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002b13:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002b17:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002b1b:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002b1e:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b21:	0f b7 c3             	movzx  eax,bx
c0002b24:	31 d2                	xor    edx,edx
c0002b26:	0f af f0             	imul   esi,eax
c0002b29:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b2d:	89 f0                	mov    eax,esi
c0002b2f:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b33:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b37:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b3b:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b3f:	39 c1                	cmp    ecx,eax
c0002b41:	89 df                	mov    edi,ebx
c0002b43:	19 d7                	sbb    edi,edx
c0002b45:	0f 82 6e fc ff ff    	jb     c00027b9 <mount_volume+0xc8>
c0002b4b:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b51:	31 db                	xor    ebx,ebx
c0002b53:	e8 16 f1 ff ff       	call   c0001c6e <ld_dword>
c0002b58:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b5f:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b62:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b6a:	85 db                	test   ebx,ebx
c0002b6c:	75 39                	jne    c0002ba7 <mount_volume+0x4b6>
c0002b6e:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b72:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b76:	0f 86 3d fc ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002b7c:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b7f:	31 ff                	xor    edi,edi
c0002b81:	89 e8                	mov    eax,ebp
c0002b83:	e8 72 f3 ff ff       	call   c0001efa <clst2sect>
c0002b88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b8c:	01 c6                	add    esi,eax
c0002b8e:	89 e8                	mov    eax,ebp
c0002b90:	11 d7                	adc    edi,edx
c0002b92:	89 f2                	mov    edx,esi
c0002b94:	89 f9                	mov    ecx,edi
c0002b96:	e8 a4 f8 ff ff       	call   c000243f <move_window>
c0002b9b:	85 c0                	test   eax,eax
c0002b9d:	0f 85 07 fc ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002ba3:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002ba7:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002bac:	74 0b                	je     c0002bb9 <mount_volume+0x4c8>
c0002bae:	83 c3 20             	add    ebx,0x20
c0002bb1:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002bb7:	eb b1                	jmp    c0002b6a <mount_volume+0x479>
c0002bb9:	8d 75 54             	lea    esi,[ebp+0x54]
c0002bbc:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002bc0:	e8 a9 f0 ff ff       	call   c0001c6e <ld_dword>
c0002bc5:	89 c3                	mov    ebx,eax
c0002bc7:	83 f8 01             	cmp    eax,0x1
c0002bca:	0f 86 e9 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd0:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bd3:	0f 86 e0 fb ff ff    	jbe    c00027b9 <mount_volume+0xc8>
c0002bd9:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bdc:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002be0:	0f af c2             	imul   eax,edx
c0002be3:	31 d2                	xor    edx,edx
c0002be5:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002be8:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002beb:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bee:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bf1:	31 c9                	xor    ecx,ecx
c0002bf3:	89 da                	mov    edx,ebx
c0002bf5:	89 e8                	mov    eax,ebp
c0002bf7:	c1 ea 07             	shr    edx,0x7
c0002bfa:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bfd:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002c00:	e8 3a f8 ff ff       	call   c000243f <move_window>
c0002c05:	85 c0                	test   eax,eax
c0002c07:	0f 85 9d fb ff ff    	jne    c00027aa <mount_volume+0xb9>
c0002c0d:	89 d8                	mov    eax,ebx
c0002c0f:	83 e0 7f             	and    eax,0x7f
c0002c12:	8d 04 86             	lea    eax,[esi+eax*4]
c0002c15:	e8 54 f0 ff ff       	call   c0001c6e <ld_dword>
c0002c1a:	83 f8 ff             	cmp    eax,0xffffffff
c0002c1d:	74 0a                	je     c0002c29 <mount_volume+0x538>
c0002c1f:	43                   	inc    ebx
c0002c20:	39 d8                	cmp    eax,ebx
c0002c22:	74 cd                	je     c0002bf1 <mount_volume+0x500>
c0002c24:	e9 90 fb ff ff       	jmp    c00027b9 <mount_volume+0xc8>
c0002c29:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c30:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c37:	bb 04 00 00 00       	mov    ebx,0x4
c0002c3c:	e9 e8 fd ff ff       	jmp    c0002a29 <mount_volume+0x338>
c0002c41:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c46:	19 db                	sbb    ebx,ebx
c0002c48:	83 c3 02             	add    ebx,0x2
c0002c4b:	e9 93 fc ff ff       	jmp    c00028e3 <mount_volume+0x1f2>
c0002c50:	83 c4 3c             	add    esp,0x3c
c0002c53:	89 d8                	mov    eax,ebx
c0002c55:	5b                   	pop    ebx
c0002c56:	5e                   	pop    esi
c0002c57:	5f                   	pop    edi
c0002c58:	5d                   	pop    ebp
c0002c59:	c3                   	ret    

c0002c5a <find_bitmap>:
c0002c5a:	55                   	push   ebp
c0002c5b:	57                   	push   edi
c0002c5c:	89 c7                	mov    edi,eax
c0002c5e:	56                   	push   esi
c0002c5f:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c62:	53                   	push   ebx
c0002c63:	83 ec 1c             	sub    esp,0x1c
c0002c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c69:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c6d:	83 e8 02             	sub    eax,0x2
c0002c70:	39 f0                	cmp    eax,esi
c0002c72:	77 02                	ja     c0002c76 <find_bitmap+0x1c>
c0002c74:	31 f6                	xor    esi,esi
c0002c76:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c7a:	89 f3                	mov    ebx,esi
c0002c7c:	31 ed                	xor    ebp,ebp
c0002c7e:	31 c9                	xor    ecx,ecx
c0002c80:	89 da                	mov    edx,ebx
c0002c82:	89 f8                	mov    eax,edi
c0002c84:	c1 ea 0c             	shr    edx,0xc
c0002c87:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c8a:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c8d:	e8 ad f7 ff ff       	call   c000243f <move_window>
c0002c92:	85 c0                	test   eax,eax
c0002c94:	75 68                	jne    c0002cfe <find_bitmap+0xa4>
c0002c96:	89 da                	mov    edx,ebx
c0002c98:	89 d9                	mov    ecx,ebx
c0002c9a:	c1 ea 03             	shr    edx,0x3
c0002c9d:	83 e1 07             	and    ecx,0x7
c0002ca0:	b8 01 00 00 00       	mov    eax,0x1
c0002ca5:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002cab:	d3 e0                	shl    eax,cl
c0002cad:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002cb0:	83 e9 02             	sub    ecx,0x2
c0002cb3:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002cb7:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002cbb:	43                   	inc    ebx
c0002cbc:	21 c1                	and    ecx,eax
c0002cbe:	d1 e0                	shl    eax,1
c0002cc0:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002cc4:	77 09                	ja     c0002ccf <find_bitmap+0x75>
c0002cc6:	31 db                	xor    ebx,ebx
c0002cc8:	ba 00 02 00 00       	mov    edx,0x200
c0002ccd:	31 c0                	xor    eax,eax
c0002ccf:	84 c9                	test   cl,cl
c0002cd1:	75 10                	jne    c0002ce3 <find_bitmap+0x89>
c0002cd3:	45                   	inc    ebp
c0002cd4:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cd8:	75 0f                	jne    c0002ce9 <find_bitmap+0x8f>
c0002cda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cde:	83 c0 02             	add    eax,0x2
c0002ce1:	eb 22                	jmp    c0002d05 <find_bitmap+0xab>
c0002ce3:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002ce7:	31 ed                	xor    ebp,ebp
c0002ce9:	39 de                	cmp    esi,ebx
c0002ceb:	74 16                	je     c0002d03 <find_bitmap+0xa9>
c0002ced:	84 c0                	test   al,al
c0002cef:	75 c6                	jne    c0002cb7 <find_bitmap+0x5d>
c0002cf1:	42                   	inc    edx
c0002cf2:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cf8:	77 84                	ja     c0002c7e <find_bitmap+0x24>
c0002cfa:	b0 01                	mov    al,0x1
c0002cfc:	eb b9                	jmp    c0002cb7 <find_bitmap+0x5d>
c0002cfe:	83 c8 ff             	or     eax,0xffffffff
c0002d01:	eb 02                	jmp    c0002d05 <find_bitmap+0xab>
c0002d03:	31 c0                	xor    eax,eax
c0002d05:	83 c4 1c             	add    esp,0x1c
c0002d08:	5b                   	pop    ebx
c0002d09:	5e                   	pop    esi
c0002d0a:	5f                   	pop    edi
c0002d0b:	5d                   	pop    ebp
c0002d0c:	c3                   	ret    

c0002d0d <change_bitmap>:
c0002d0d:	55                   	push   ebp
c0002d0e:	89 cd                	mov    ebp,ecx
c0002d10:	57                   	push   edi
c0002d11:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002d14:	56                   	push   esi
c0002d15:	89 c7                	mov    edi,eax
c0002d17:	53                   	push   ebx
c0002d18:	89 c8                	mov    eax,ecx
c0002d1a:	83 ec 1c             	sub    esp,0x1c
c0002d1d:	31 d2                	xor    edx,edx
c0002d1f:	89 ce                	mov    esi,ecx
c0002d21:	c1 e8 0c             	shr    eax,0xc
c0002d24:	bb 01 00 00 00       	mov    ebx,0x1
c0002d29:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d2c:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d2f:	c1 ee 03             	shr    esi,0x3
c0002d32:	83 e1 07             	and    ecx,0x7
c0002d35:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d3b:	d3 e3                	shl    ebx,cl
c0002d3d:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d41:	89 c1                	mov    ecx,eax
c0002d43:	89 d3                	mov    ebx,edx
c0002d45:	83 c1 01             	add    ecx,0x1
c0002d48:	83 d3 00             	adc    ebx,0x0
c0002d4b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d4f:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d53:	89 d1                	mov    ecx,edx
c0002d55:	89 c2                	mov    edx,eax
c0002d57:	89 f8                	mov    eax,edi
c0002d59:	e8 e1 f6 ff ff       	call   c000243f <move_window>
c0002d5e:	89 c1                	mov    ecx,eax
c0002d60:	85 c0                	test   eax,eax
c0002d62:	75 48                	jne    c0002dac <change_bitmap+0x9f>
c0002d64:	31 d2                	xor    edx,edx
c0002d66:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d6a:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d6e:	0f 95 c2             	setne  dl
c0002d71:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d75:	74 3c                	je     c0002db3 <change_bitmap+0xa6>
c0002d77:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d7b:	4d                   	dec    ebp
c0002d7c:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d80:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d84:	74 32                	je     c0002db8 <change_bitmap+0xab>
c0002d86:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d8a:	75 d8                	jne    c0002d64 <change_bitmap+0x57>
c0002d8c:	8d 46 01             	lea    eax,[esi+0x1]
c0002d8f:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d94:	89 c3                	mov    ebx,eax
c0002d96:	31 f6                	xor    esi,esi
c0002d98:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d9c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002da0:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002da6:	74 99                	je     c0002d41 <change_bitmap+0x34>
c0002da8:	89 de                	mov    esi,ebx
c0002daa:	eb b8                	jmp    c0002d64 <change_bitmap+0x57>
c0002dac:	b9 01 00 00 00       	mov    ecx,0x1
c0002db1:	eb 05                	jmp    c0002db8 <change_bitmap+0xab>
c0002db3:	b9 02 00 00 00       	mov    ecx,0x2
c0002db8:	83 c4 1c             	add    esp,0x1c
c0002dbb:	89 c8                	mov    eax,ecx
c0002dbd:	5b                   	pop    ebx
c0002dbe:	5e                   	pop    esi
c0002dbf:	5f                   	pop    edi
c0002dc0:	5d                   	pop    ebp
c0002dc1:	c3                   	ret    

c0002dc2 <put_fat>:
c0002dc2:	83 fa 01             	cmp    edx,0x1
c0002dc5:	0f 86 7b 01 00 00    	jbe    c0002f46 <put_fat+0x184>
c0002dcb:	55                   	push   ebp
c0002dcc:	57                   	push   edi
c0002dcd:	89 cf                	mov    edi,ecx
c0002dcf:	56                   	push   esi
c0002dd0:	b9 02 00 00 00       	mov    ecx,0x2
c0002dd5:	53                   	push   ebx
c0002dd6:	89 c6                	mov    esi,eax
c0002dd8:	83 ec 1c             	sub    esp,0x1c
c0002ddb:	89 d3                	mov    ebx,edx
c0002ddd:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002de0:	0f 86 68 01 00 00    	jbe    c0002f4e <put_fat+0x18c>
c0002de6:	8a 00                	mov    al,BYTE PTR [eax]
c0002de8:	3c 02                	cmp    al,0x2
c0002dea:	0f 84 c7 00 00 00    	je     c0002eb7 <put_fat+0xf5>
c0002df0:	77 09                	ja     c0002dfb <put_fat+0x39>
c0002df2:	fe c8                	dec    al
c0002df4:	74 17                	je     c0002e0d <put_fat+0x4b>
c0002df6:	e9 53 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002dfb:	b9 02 00 00 00       	mov    ecx,0x2
c0002e00:	3c 04                	cmp    al,0x4
c0002e02:	0f 86 e1 00 00 00    	jbe    c0002ee9 <put_fat+0x127>
c0002e08:	e9 41 01 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002e0d:	89 d5                	mov    ebp,edx
c0002e0f:	31 c9                	xor    ecx,ecx
c0002e11:	d1 ed                	shr    ebp,1
c0002e13:	89 f0                	mov    eax,esi
c0002e15:	01 d5                	add    ebp,edx
c0002e17:	89 ea                	mov    edx,ebp
c0002e19:	c1 ea 09             	shr    edx,0x9
c0002e1c:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e1f:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e22:	e8 18 f6 ff ff       	call   c000243f <move_window>
c0002e27:	89 c1                	mov    ecx,eax
c0002e29:	85 c0                	test   eax,eax
c0002e2b:	0f 85 1d 01 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e31:	8d 46 54             	lea    eax,[esi+0x54]
c0002e34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e38:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e3b:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e41:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e45:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e49:	89 f8                	mov    eax,edi
c0002e4b:	83 e3 01             	and    ebx,0x1
c0002e4e:	74 0d                	je     c0002e5d <put_fat+0x9b>
c0002e50:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e53:	89 fa                	mov    edx,edi
c0002e55:	83 e0 0f             	and    eax,0xf
c0002e58:	c1 e2 04             	shl    edx,0x4
c0002e5b:	09 d0                	or     eax,edx
c0002e5d:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e60:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e64:	31 c9                	xor    ecx,ecx
c0002e66:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e6a:	c1 ea 09             	shr    edx,0x9
c0002e6d:	89 f0                	mov    eax,esi
c0002e6f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e72:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e75:	e8 c5 f5 ff ff       	call   c000243f <move_window>
c0002e7a:	89 c1                	mov    ecx,eax
c0002e7c:	85 c0                	test   eax,eax
c0002e7e:	0f 85 ca 00 00 00    	jne    c0002f4e <put_fat+0x18c>
c0002e84:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e88:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e8e:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e92:	85 db                	test   ebx,ebx
c0002e94:	74 07                	je     c0002e9d <put_fat+0xdb>
c0002e96:	c1 ef 04             	shr    edi,0x4
c0002e99:	89 fa                	mov    edx,edi
c0002e9b:	eb 0e                	jmp    c0002eab <put_fat+0xe9>
c0002e9d:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002ea0:	c1 ef 08             	shr    edi,0x8
c0002ea3:	83 e2 f0             	and    edx,0xfffffff0
c0002ea6:	83 e7 0f             	and    edi,0xf
c0002ea9:	09 fa                	or     edx,edi
c0002eab:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002eae:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002eb2:	e9 97 00 00 00       	jmp    c0002f4e <put_fat+0x18c>
c0002eb7:	31 c9                	xor    ecx,ecx
c0002eb9:	c1 ea 08             	shr    edx,0x8
c0002ebc:	89 f0                	mov    eax,esi
c0002ebe:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ec1:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ec4:	e8 76 f5 ff ff       	call   c000243f <move_window>
c0002ec9:	89 c1                	mov    ecx,eax
c0002ecb:	85 c0                	test   eax,eax
c0002ecd:	75 7f                	jne    c0002f4e <put_fat+0x18c>
c0002ecf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ed3:	01 db                	add    ebx,ebx
c0002ed5:	0f b7 d7             	movzx  edx,di
c0002ed8:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ede:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ee2:	e8 ec ed ff ff       	call   c0001cd3 <st_word>
c0002ee7:	eb 53                	jmp    c0002f3c <put_fat+0x17a>
c0002ee9:	31 c9                	xor    ecx,ecx
c0002eeb:	c1 ea 07             	shr    edx,0x7
c0002eee:	89 f0                	mov    eax,esi
c0002ef0:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ef3:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ef6:	e8 44 f5 ff ff       	call   c000243f <move_window>
c0002efb:	89 c1                	mov    ecx,eax
c0002efd:	85 c0                	test   eax,eax
c0002eff:	75 4d                	jne    c0002f4e <put_fat+0x18c>
c0002f01:	c1 e3 02             	shl    ebx,0x2
c0002f04:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002f0a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002f0d:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002f11:	74 1c                	je     c0002f2f <put_fat+0x16d>
c0002f13:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002f17:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002f1d:	89 d8                	mov    eax,ebx
c0002f1f:	e8 4a ed ff ff       	call   c0001c6e <ld_dword>
c0002f24:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f28:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f2d:	09 c7                	or     edi,eax
c0002f2f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f33:	89 fa                	mov    edx,edi
c0002f35:	89 d8                	mov    eax,ebx
c0002f37:	e8 9b ed ff ff       	call   c0001cd7 <st_dword>
c0002f3c:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f44:	eb 08                	jmp    c0002f4e <put_fat+0x18c>
c0002f46:	b9 02 00 00 00       	mov    ecx,0x2
c0002f4b:	89 c8                	mov    eax,ecx
c0002f4d:	c3                   	ret    
c0002f4e:	83 c4 1c             	add    esp,0x1c
c0002f51:	89 c8                	mov    eax,ecx
c0002f53:	5b                   	pop    ebx
c0002f54:	5e                   	pop    esi
c0002f55:	5f                   	pop    edi
c0002f56:	5d                   	pop    ebp
c0002f57:	c3                   	ret    

c0002f58 <fill_last_frag>:
c0002f58:	57                   	push   edi
c0002f59:	89 cf                	mov    edi,ecx
c0002f5b:	56                   	push   esi
c0002f5c:	89 d6                	mov    esi,edx
c0002f5e:	53                   	push   ebx
c0002f5f:	89 c3                	mov    ebx,eax
c0002f61:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f64:	85 c0                	test   eax,eax
c0002f66:	74 21                	je     c0002f89 <fill_last_frag+0x31>
c0002f68:	89 f9                	mov    ecx,edi
c0002f6a:	83 f8 01             	cmp    eax,0x1
c0002f6d:	76 05                	jbe    c0002f74 <fill_last_frag+0x1c>
c0002f6f:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f72:	29 c1                	sub    ecx,eax
c0002f74:	8d 56 01             	lea    edx,[esi+0x1]
c0002f77:	29 c2                	sub    edx,eax
c0002f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f7b:	e8 42 fe ff ff       	call   c0002dc2 <put_fat>
c0002f80:	85 c0                	test   eax,eax
c0002f82:	75 05                	jne    c0002f89 <fill_last_frag+0x31>
c0002f84:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f87:	eb d8                	jmp    c0002f61 <fill_last_frag+0x9>
c0002f89:	5b                   	pop    ebx
c0002f8a:	5e                   	pop    esi
c0002f8b:	5f                   	pop    edi
c0002f8c:	c3                   	ret    

c0002f8d <fill_first_frag>:
c0002f8d:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f91:	75 2d                	jne    c0002fc0 <fill_first_frag+0x33>
c0002f93:	57                   	push   edi
c0002f94:	56                   	push   esi
c0002f95:	53                   	push   ebx
c0002f96:	89 c3                	mov    ebx,eax
c0002f98:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f9b:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f9e:	01 d7                	add    edi,edx
c0002fa0:	39 fa                	cmp    edx,edi
c0002fa2:	74 14                	je     c0002fb8 <fill_first_frag+0x2b>
c0002fa4:	8d 72 01             	lea    esi,[edx+0x1]
c0002fa7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002fa9:	89 f1                	mov    ecx,esi
c0002fab:	e8 12 fe ff ff       	call   c0002dc2 <put_fat>
c0002fb0:	89 f2                	mov    edx,esi
c0002fb2:	85 c0                	test   eax,eax
c0002fb4:	74 ea                	je     c0002fa0 <fill_first_frag+0x13>
c0002fb6:	eb 0b                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fb8:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002fbc:	31 c0                	xor    eax,eax
c0002fbe:	eb 03                	jmp    c0002fc3 <fill_first_frag+0x36>
c0002fc0:	31 c0                	xor    eax,eax
c0002fc2:	c3                   	ret    
c0002fc3:	5b                   	pop    ebx
c0002fc4:	5e                   	pop    esi
c0002fc5:	5f                   	pop    edi
c0002fc6:	c3                   	ret    

c0002fc7 <get_fat>:
c0002fc7:	83 fa 01             	cmp    edx,0x1
c0002fca:	0f 86 db 01 00 00    	jbe    c00031ab <get_fat+0x1e4>
c0002fd0:	55                   	push   ebp
c0002fd1:	b9 01 00 00 00       	mov    ecx,0x1
c0002fd6:	57                   	push   edi
c0002fd7:	56                   	push   esi
c0002fd8:	53                   	push   ebx
c0002fd9:	83 ec 1c             	sub    esp,0x1c
c0002fdc:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fde:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fe1:	0f 86 cc 01 00 00    	jbe    c00031b3 <get_fat+0x1ec>
c0002fe7:	89 c3                	mov    ebx,eax
c0002fe9:	89 d6                	mov    esi,edx
c0002feb:	8a 07                	mov    al,BYTE PTR [edi]
c0002fed:	3c 02                	cmp    al,0x2
c0002fef:	0f 84 99 00 00 00    	je     c000308e <get_fat+0xc7>
c0002ff5:	77 09                	ja     c0003000 <get_fat+0x39>
c0002ff7:	fe c8                	dec    al
c0002ff9:	74 1a                	je     c0003015 <get_fat+0x4e>
c0002ffb:	e9 b3 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003000:	3c 03                	cmp    al,0x3
c0003002:	0f 84 b5 00 00 00    	je     c00030bd <get_fat+0xf6>
c0003008:	3c 04                	cmp    al,0x4
c000300a:	0f 84 e3 00 00 00    	je     c00030f3 <get_fat+0x12c>
c0003010:	e9 9e 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c0003015:	89 d3                	mov    ebx,edx
c0003017:	31 c9                	xor    ecx,ecx
c0003019:	d1 eb                	shr    ebx,1
c000301b:	89 f8                	mov    eax,edi
c000301d:	01 d3                	add    ebx,edx
c000301f:	89 da                	mov    edx,ebx
c0003021:	c1 ea 09             	shr    edx,0x9
c0003024:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003027:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000302a:	e8 10 f4 ff ff       	call   c000243f <move_window>
c000302f:	85 c0                	test   eax,eax
c0003031:	74 08                	je     c000303b <get_fat+0x74>
c0003033:	83 c9 ff             	or     ecx,0xffffffff
c0003036:	e9 78 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000303b:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000303e:	31 c9                	xor    ecx,ecx
c0003040:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003046:	89 ea                	mov    edx,ebp
c0003048:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000304c:	c1 ea 09             	shr    edx,0x9
c000304f:	89 f8                	mov    eax,edi
c0003051:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003054:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003057:	e8 e3 f3 ff ff       	call   c000243f <move_window>
c000305c:	85 c0                	test   eax,eax
c000305e:	75 d3                	jne    c0003033 <get_fat+0x6c>
c0003060:	0f b6 c3             	movzx  eax,bl
c0003063:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003069:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000306e:	c1 e3 08             	shl    ebx,0x8
c0003071:	09 c3                	or     ebx,eax
c0003073:	89 d9                	mov    ecx,ebx
c0003075:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000307b:	83 e6 01             	and    esi,0x1
c000307e:	0f 84 2f 01 00 00    	je     c00031b3 <get_fat+0x1ec>
c0003084:	89 d9                	mov    ecx,ebx
c0003086:	c1 e9 04             	shr    ecx,0x4
c0003089:	e9 25 01 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c000308e:	31 c9                	xor    ecx,ecx
c0003090:	c1 ea 08             	shr    edx,0x8
c0003093:	89 f8                	mov    eax,edi
c0003095:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003098:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000309b:	e8 9f f3 ff ff       	call   c000243f <move_window>
c00030a0:	85 c0                	test   eax,eax
c00030a2:	75 8f                	jne    c0003033 <get_fat+0x6c>
c00030a4:	01 f6                	add    esi,esi
c00030a6:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00030ac:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030b0:	e8 ac eb ff ff       	call   c0001c61 <ld_word>
c00030b5:	0f b7 c8             	movzx  ecx,ax
c00030b8:	e9 f6 00 00 00       	jmp    c00031b3 <get_fat+0x1ec>
c00030bd:	31 c9                	xor    ecx,ecx
c00030bf:	c1 ea 07             	shr    edx,0x7
c00030c2:	89 f8                	mov    eax,edi
c00030c4:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030c7:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ca:	e8 70 f3 ff ff       	call   c000243f <move_window>
c00030cf:	85 c0                	test   eax,eax
c00030d1:	0f 85 5c ff ff ff    	jne    c0003033 <get_fat+0x6c>
c00030d7:	c1 e6 02             	shl    esi,0x2
c00030da:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030e0:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030e4:	e8 85 eb ff ff       	call   c0001c6e <ld_dword>
c00030e9:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030ee:	e9 b4 00 00 00       	jmp    c00031a7 <get_fat+0x1e0>
c00030f3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030f6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030f9:	89 d1                	mov    ecx,edx
c00030fb:	09 c1                	or     ecx,eax
c00030fd:	74 06                	je     c0003105 <get_fat+0x13e>
c00030ff:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0003103:	75 0f                	jne    c0003114 <get_fat+0x14d>
c0003105:	b9 01 00 00 00       	mov    ecx,0x1
c000310a:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c000310e:	0f 85 9f 00 00 00    	jne    c00031b3 <get_fat+0x1ec>
c0003114:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c0003118:	89 f5                	mov    ebp,esi
c000311a:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c000311f:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003122:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003125:	80 f9 02             	cmp    cl,0x2
c0003128:	75 35                	jne    c000315f <get_fat+0x198>
c000312a:	83 c0 ff             	add    eax,0xffffffff
c000312d:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003132:	83 d2 ff             	adc    edx,0xffffffff
c0003135:	31 db                	xor    ebx,ebx
c0003137:	0f ac d0 09          	shrd   eax,edx,0x9
c000313b:	53                   	push   ebx
c000313c:	c1 ea 09             	shr    edx,0x9
c000313f:	51                   	push   ecx
c0003140:	52                   	push   edx
c0003141:	50                   	push   eax
c0003142:	e8 a5 34 02 00       	call   c00265ec <__udivdi3>
c0003147:	83 c4 10             	add    esp,0x10
c000314a:	b9 01 00 00 00       	mov    ecx,0x1
c000314f:	39 c5                	cmp    ebp,eax
c0003151:	77 60                	ja     c00031b3 <get_fat+0x1ec>
c0003153:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003158:	74 59                	je     c00031b3 <get_fat+0x1ec>
c000315a:	8d 4e 01             	lea    ecx,[esi+0x1]
c000315d:	eb 54                	jmp    c00031b3 <get_fat+0x1ec>
c000315f:	80 f9 03             	cmp    cl,0x3
c0003162:	75 05                	jne    c0003169 <get_fat+0x1a2>
c0003164:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003167:	77 f1                	ja     c000315a <get_fat+0x193>
c0003169:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000316e:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003172:	75 3f                	jne    c00031b3 <get_fat+0x1ec>
c0003174:	31 c9                	xor    ecx,ecx
c0003176:	89 f2                	mov    edx,esi
c0003178:	89 f8                	mov    eax,edi
c000317a:	c1 ea 07             	shr    edx,0x7
c000317d:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003180:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003183:	e8 b7 f2 ff ff       	call   c000243f <move_window>
c0003188:	85 c0                	test   eax,eax
c000318a:	0f 85 a3 fe ff ff    	jne    c0003033 <get_fat+0x6c>
c0003190:	c1 e6 02             	shl    esi,0x2
c0003193:	81 e6 fc 01 00 00    	and    esi,0x1fc
c0003199:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000319d:	e8 cc ea ff ff       	call   c0001c6e <ld_dword>
c00031a2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00031a7:	89 c1                	mov    ecx,eax
c00031a9:	eb 08                	jmp    c00031b3 <get_fat+0x1ec>
c00031ab:	b9 01 00 00 00       	mov    ecx,0x1
c00031b0:	89 c8                	mov    eax,ecx
c00031b2:	c3                   	ret    
c00031b3:	83 c4 1c             	add    esp,0x1c
c00031b6:	89 c8                	mov    eax,ecx
c00031b8:	5b                   	pop    ebx
c00031b9:	5e                   	pop    esi
c00031ba:	5f                   	pop    edi
c00031bb:	5d                   	pop    ebp
c00031bc:	c3                   	ret    

c00031bd <dir_sdi>:
c00031bd:	55                   	push   ebp
c00031be:	57                   	push   edi
c00031bf:	56                   	push   esi
c00031c0:	53                   	push   ebx
c00031c1:	89 c3                	mov    ebx,eax
c00031c3:	83 ec 1c             	sub    esp,0x1c
c00031c6:	8b 38                	mov    edi,DWORD PTR [eax]
c00031c8:	31 c0                	xor    eax,eax
c00031ca:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031cd:	0f 94 c0             	sete   al
c00031d0:	48                   	dec    eax
c00031d1:	25 00 00 20 f0       	and    eax,0xf0200000
c00031d6:	05 00 00 00 10       	add    eax,0x10000000
c00031db:	39 d0                	cmp    eax,edx
c00031dd:	77 0a                	ja     c00031e9 <dir_sdi+0x2c>
c00031df:	b8 02 00 00 00       	mov    eax,0x2
c00031e4:	e9 c4 00 00 00       	jmp    c00032ad <dir_sdi+0xf0>
c00031e9:	89 d6                	mov    esi,edx
c00031eb:	f6 c2 1f             	test   dl,0x1f
c00031ee:	75 ef                	jne    c00031df <dir_sdi+0x22>
c00031f0:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031f3:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031f6:	85 c9                	test   ecx,ecx
c00031f8:	75 2d                	jne    c0003227 <dir_sdi+0x6a>
c00031fa:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031fd:	77 1b                	ja     c000321a <dir_sdi+0x5d>
c00031ff:	89 f2                	mov    edx,esi
c0003201:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c0003205:	c1 ea 05             	shr    edx,0x5
c0003208:	39 c2                	cmp    edx,eax
c000320a:	73 d3                	jae    c00031df <dir_sdi+0x22>
c000320c:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000320f:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c0003212:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003215:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003218:	eb 4b                	jmp    c0003265 <dir_sdi+0xa8>
c000321a:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c000321d:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003221:	85 c0                	test   eax,eax
c0003223:	74 da                	je     c00031ff <dir_sdi+0x42>
c0003225:	89 c1                	mov    ecx,eax
c0003227:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000322b:	c1 e5 09             	shl    ebp,0x9
c000322e:	89 ca                	mov    edx,ecx
c0003230:	39 ee                	cmp    esi,ebp
c0003232:	72 1c                	jb     c0003250 <dir_sdi+0x93>
c0003234:	89 d8                	mov    eax,ebx
c0003236:	e8 8c fd ff ff       	call   c0002fc7 <get_fat>
c000323b:	89 c1                	mov    ecx,eax
c000323d:	83 f8 ff             	cmp    eax,0xffffffff
c0003240:	74 66                	je     c00032a8 <dir_sdi+0xeb>
c0003242:	83 f8 01             	cmp    eax,0x1
c0003245:	76 98                	jbe    c00031df <dir_sdi+0x22>
c0003247:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000324a:	76 93                	jbe    c00031df <dir_sdi+0x22>
c000324c:	29 ee                	sub    esi,ebp
c000324e:	eb de                	jmp    c000322e <dir_sdi+0x71>
c0003250:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003254:	89 f8                	mov    eax,edi
c0003256:	e8 9f ec ff ff       	call   c0001efa <clst2sect>
c000325b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000325f:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003262:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003265:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003268:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000326b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000326e:	89 d1                	mov    ecx,edx
c0003270:	09 c1                	or     ecx,eax
c0003272:	0f 84 67 ff ff ff    	je     c00031df <dir_sdi+0x22>
c0003278:	89 f1                	mov    ecx,esi
c000327a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003282:	c1 e9 09             	shr    ecx,0x9
c0003285:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003289:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000328d:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003291:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003294:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000329a:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000329d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00032a1:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c00032a4:	31 c0                	xor    eax,eax
c00032a6:	eb 05                	jmp    c00032ad <dir_sdi+0xf0>
c00032a8:	b8 01 00 00 00       	mov    eax,0x1
c00032ad:	83 c4 1c             	add    esp,0x1c
c00032b0:	5b                   	pop    ebx
c00032b1:	5e                   	pop    esi
c00032b2:	5f                   	pop    edi
c00032b3:	5d                   	pop    ebp
c00032b4:	c3                   	ret    

c00032b5 <create_chain>:
c00032b5:	55                   	push   ebp
c00032b6:	89 c5                	mov    ebp,eax
c00032b8:	57                   	push   edi
c00032b9:	56                   	push   esi
c00032ba:	53                   	push   ebx
c00032bb:	83 ec 1c             	sub    esp,0x1c
c00032be:	85 d2                	test   edx,edx
c00032c0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032c4:	8b 30                	mov    esi,DWORD PTR [eax]
c00032c6:	75 0e                	jne    c00032d6 <create_chain+0x21>
c00032c8:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032cb:	85 ff                	test   edi,edi
c00032cd:	74 39                	je     c0003308 <create_chain+0x53>
c00032cf:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032d2:	77 39                	ja     c000330d <create_chain+0x58>
c00032d4:	eb 32                	jmp    c0003308 <create_chain+0x53>
c00032d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032da:	e8 e8 fc ff ff       	call   c0002fc7 <get_fat>
c00032df:	89 c3                	mov    ebx,eax
c00032e1:	83 f8 01             	cmp    eax,0x1
c00032e4:	77 0a                	ja     c00032f0 <create_chain+0x3b>
c00032e6:	bb 01 00 00 00       	mov    ebx,0x1
c00032eb:	e9 ba 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c00032f0:	83 f8 ff             	cmp    eax,0xffffffff
c00032f3:	0f 84 62 01 00 00    	je     c000345b <create_chain+0x1a6>
c00032f9:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032fc:	0f 87 a8 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c0003302:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0003306:	eb 05                	jmp    c000330d <create_chain+0x58>
c0003308:	bf 01 00 00 00       	mov    edi,0x1
c000330d:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c0003311:	75 07                	jne    c000331a <create_chain+0x65>
c0003313:	31 db                	xor    ebx,ebx
c0003315:	e9 90 01 00 00       	jmp    c00034aa <create_chain+0x1f5>
c000331a:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c000331d:	75 74                	jne    c0003393 <create_chain+0xde>
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	89 fa                	mov    edx,edi
c0003326:	89 f0                	mov    eax,esi
c0003328:	e8 2d f9 ff ff       	call   c0002c5a <find_bitmap>
c000332d:	89 c3                	mov    ebx,eax
c000332f:	8d 40 ff             	lea    eax,[eax-0x1]
c0003332:	83 f8 fd             	cmp    eax,0xfffffffd
c0003335:	0f 87 6f 01 00 00    	ja     c00034aa <create_chain+0x1f5>
c000333b:	83 ec 0c             	sub    esp,0xc
c000333e:	b9 01 00 00 00       	mov    ecx,0x1
c0003343:	6a 01                	push   0x1
c0003345:	89 da                	mov    edx,ebx
c0003347:	89 f0                	mov    eax,esi
c0003349:	e8 bf f9 ff ff       	call   c0002d0d <change_bitmap>
c000334e:	83 c4 10             	add    esp,0x10
c0003351:	83 f8 02             	cmp    eax,0x2
c0003354:	74 90                	je     c00032e6 <create_chain+0x31>
c0003356:	83 f8 01             	cmp    eax,0x1
c0003359:	0f 84 fc 00 00 00    	je     c000345b <create_chain+0x1a6>
c000335f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003364:	75 09                	jne    c000336f <create_chain+0xba>
c0003366:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000336a:	e9 0c 01 00 00       	jmp    c000347b <create_chain+0x1c6>
c000336f:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003373:	0f 85 e7 00 00 00    	jne    c0003460 <create_chain+0x1ab>
c0003379:	8d 57 01             	lea    edx,[edi+0x1]
c000337c:	39 da                	cmp    edx,ebx
c000337e:	0f 84 f7 00 00 00    	je     c000347b <create_chain+0x1c6>
c0003384:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003387:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000338b:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000338e:	e9 cd 00 00 00       	jmp    c0003460 <create_chain+0x1ab>
c0003393:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003397:	75 41                	jne    c00033da <create_chain+0x125>
c0003399:	8d 5f 01             	lea    ebx,[edi+0x1]
c000339c:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c000339f:	77 05                	ja     c00033a6 <create_chain+0xf1>
c00033a1:	bb 02 00 00 00       	mov    ebx,0x2
c00033a6:	89 da                	mov    edx,ebx
c00033a8:	89 e8                	mov    eax,ebp
c00033aa:	e8 18 fc ff ff       	call   c0002fc7 <get_fat>
c00033af:	83 f8 01             	cmp    eax,0x1
c00033b2:	0f 84 2e ff ff ff    	je     c00032e6 <create_chain+0x31>
c00033b8:	83 f8 ff             	cmp    eax,0xffffffff
c00033bb:	0f 84 9a 00 00 00    	je     c000345b <create_chain+0x1a6>
c00033c1:	85 c0                	test   eax,eax
c00033c3:	74 11                	je     c00033d6 <create_chain+0x121>
c00033c5:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033c8:	83 f8 01             	cmp    eax,0x1
c00033cb:	76 0d                	jbe    c00033da <create_chain+0x125>
c00033cd:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033d0:	76 08                	jbe    c00033da <create_chain+0x125>
c00033d2:	89 c7                	mov    edi,eax
c00033d4:	eb 04                	jmp    c00033da <create_chain+0x125>
c00033d6:	85 db                	test   ebx,ebx
c00033d8:	75 38                	jne    c0003412 <create_chain+0x15d>
c00033da:	89 fb                	mov    ebx,edi
c00033dc:	43                   	inc    ebx
c00033dd:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033e0:	77 0e                	ja     c00033f0 <create_chain+0x13b>
c00033e2:	83 ff 01             	cmp    edi,0x1
c00033e5:	0f 86 28 ff ff ff    	jbe    c0003313 <create_chain+0x5e>
c00033eb:	bb 02 00 00 00       	mov    ebx,0x2
c00033f0:	89 da                	mov    edx,ebx
c00033f2:	89 e8                	mov    eax,ebp
c00033f4:	e8 ce fb ff ff       	call   c0002fc7 <get_fat>
c00033f9:	85 c0                	test   eax,eax
c00033fb:	74 15                	je     c0003412 <create_chain+0x15d>
c00033fd:	83 f8 01             	cmp    eax,0x1
c0003400:	0f 84 e0 fe ff ff    	je     c00032e6 <create_chain+0x31>
c0003406:	40                   	inc    eax
c0003407:	74 52                	je     c000345b <create_chain+0x1a6>
c0003409:	39 fb                	cmp    ebx,edi
c000340b:	75 cf                	jne    c00033dc <create_chain+0x127>
c000340d:	e9 01 ff ff ff       	jmp    c0003313 <create_chain+0x5e>
c0003412:	83 c9 ff             	or     ecx,0xffffffff
c0003415:	89 da                	mov    edx,ebx
c0003417:	89 f0                	mov    eax,esi
c0003419:	e8 a4 f9 ff ff       	call   c0002dc2 <put_fat>
c000341e:	85 c0                	test   eax,eax
c0003420:	75 32                	jne    c0003454 <create_chain+0x19f>
c0003422:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003427:	74 11                	je     c000343a <create_chain+0x185>
c0003429:	89 d9                	mov    ecx,ebx
c000342b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000342f:	89 f0                	mov    eax,esi
c0003431:	e8 8c f9 ff ff       	call   c0002dc2 <put_fat>
c0003436:	85 c0                	test   eax,eax
c0003438:	75 1a                	jne    c0003454 <create_chain+0x19f>
c000343a:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000343d:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003440:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003443:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003446:	39 d0                	cmp    eax,edx
c0003448:	77 04                	ja     c000344e <create_chain+0x199>
c000344a:	48                   	dec    eax
c000344b:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000344e:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003452:	eb 56                	jmp    c00034aa <create_chain+0x1f5>
c0003454:	48                   	dec    eax
c0003455:	0f 85 8b fe ff ff    	jne    c00032e6 <create_chain+0x31>
c000345b:	83 cb ff             	or     ebx,0xffffffff
c000345e:	eb 4a                	jmp    c00034aa <create_chain+0x1f5>
c0003460:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003464:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003467:	41                   	inc    ecx
c0003468:	39 d9                	cmp    ecx,ebx
c000346a:	75 19                	jne    c0003485 <create_chain+0x1d0>
c000346c:	b9 02 00 00 00       	mov    ecx,0x2
c0003471:	85 d2                	test   edx,edx
c0003473:	74 03                	je     c0003478 <create_chain+0x1c3>
c0003475:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003478:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000347b:	85 c0                	test   eax,eax
c000347d:	0f 85 63 fe ff ff    	jne    c00032e6 <create_chain+0x31>
c0003483:	eb b5                	jmp    c000343a <create_chain+0x185>
c0003485:	85 d2                	test   edx,edx
c0003487:	75 07                	jne    c0003490 <create_chain+0x1db>
c0003489:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003490:	89 d9                	mov    ecx,ebx
c0003492:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003496:	89 e8                	mov    eax,ebp
c0003498:	e8 bb fa ff ff       	call   c0002f58 <fill_last_frag>
c000349d:	85 c0                	test   eax,eax
c000349f:	75 b3                	jne    c0003454 <create_chain+0x19f>
c00034a1:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c00034a8:	eb 90                	jmp    c000343a <create_chain+0x185>
c00034aa:	83 c4 1c             	add    esp,0x1c
c00034ad:	89 d8                	mov    eax,ebx
c00034af:	5b                   	pop    ebx
c00034b0:	5e                   	pop    esi
c00034b1:	5f                   	pop    edi
c00034b2:	5d                   	pop    ebp
c00034b3:	c3                   	ret    

c00034b4 <remove_chain>:
c00034b4:	55                   	push   ebp
c00034b5:	57                   	push   edi
c00034b6:	56                   	push   esi
c00034b7:	53                   	push   ebx
c00034b8:	83 ec 1c             	sub    esp,0x1c
c00034bb:	83 fa 01             	cmp    edx,0x1
c00034be:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034c4:	77 0a                	ja     c00034d0 <remove_chain+0x1c>
c00034c6:	b8 02 00 00 00       	mov    eax,0x2
c00034cb:	e9 24 01 00 00       	jmp    c00035f4 <remove_chain+0x140>
c00034d0:	89 d6                	mov    esi,edx
c00034d2:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034d5:	76 ef                	jbe    c00034c6 <remove_chain+0x12>
c00034d7:	89 c7                	mov    edi,eax
c00034d9:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034de:	75 06                	jne    c00034e6 <remove_chain+0x32>
c00034e0:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034e4:	eb 54                	jmp    c000353a <remove_chain+0x86>
c00034e6:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034e9:	75 06                	jne    c00034f1 <remove_chain+0x3d>
c00034eb:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034ef:	74 ef                	je     c00034e0 <remove_chain+0x2c>
c00034f1:	83 c9 ff             	or     ecx,0xffffffff
c00034f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034f8:	89 d8                	mov    eax,ebx
c00034fa:	e8 c3 f8 ff ff       	call   c0002dc2 <put_fat>
c00034ff:	85 c0                	test   eax,eax
c0003501:	74 dd                	je     c00034e0 <remove_chain+0x2c>
c0003503:	e9 ec 00 00 00       	jmp    c00035f4 <remove_chain+0x140>
c0003508:	83 f8 01             	cmp    eax,0x1
c000350b:	74 b9                	je     c00034c6 <remove_chain+0x12>
c000350d:	83 f8 ff             	cmp    eax,0xffffffff
c0003510:	74 6d                	je     c000357f <remove_chain+0xcb>
c0003512:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c0003515:	75 6f                	jne    c0003586 <remove_chain+0xd2>
c0003517:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000351a:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c000351d:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003520:	39 d0                	cmp    eax,edx
c0003522:	73 08                	jae    c000352c <remove_chain+0x78>
c0003524:	40                   	inc    eax
c0003525:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c0003529:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000352c:	8d 4e 01             	lea    ecx,[esi+0x1]
c000352f:	39 e9                	cmp    ecx,ebp
c0003531:	75 64                	jne    c0003597 <remove_chain+0xe3>
c0003533:	89 ee                	mov    esi,ebp
c0003535:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003538:	76 0f                	jbe    c0003549 <remove_chain+0x95>
c000353a:	89 f2                	mov    edx,esi
c000353c:	89 f8                	mov    eax,edi
c000353e:	e8 84 fa ff ff       	call   c0002fc7 <get_fat>
c0003543:	89 c5                	mov    ebp,eax
c0003545:	85 c0                	test   eax,eax
c0003547:	75 bf                	jne    c0003508 <remove_chain+0x54>
c0003549:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000354c:	0f 85 a0 00 00 00    	jne    c00035f2 <remove_chain+0x13e>
c0003552:	eb 6c                	jmp    c00035c0 <remove_chain+0x10c>
c0003554:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003557:	84 c0                	test   al,al
c0003559:	75 7d                	jne    c00035d8 <remove_chain+0x124>
c000355b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000355e:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003562:	0f 84 86 00 00 00    	je     c00035ee <remove_chain+0x13a>
c0003568:	89 da                	mov    edx,ebx
c000356a:	89 f8                	mov    eax,edi
c000356c:	e8 56 fa ff ff       	call   c0002fc7 <get_fat>
c0003571:	83 f8 01             	cmp    eax,0x1
c0003574:	0f 86 4c ff ff ff    	jbe    c00034c6 <remove_chain+0x12>
c000357a:	83 f8 ff             	cmp    eax,0xffffffff
c000357d:	75 4e                	jne    c00035cd <remove_chain+0x119>
c000357f:	b8 01 00 00 00       	mov    eax,0x1
c0003584:	eb 6e                	jmp    c00035f4 <remove_chain+0x140>
c0003586:	31 c9                	xor    ecx,ecx
c0003588:	89 f2                	mov    edx,esi
c000358a:	89 d8                	mov    eax,ebx
c000358c:	e8 31 f8 ff ff       	call   c0002dc2 <put_fat>
c0003591:	85 c0                	test   eax,eax
c0003593:	74 82                	je     c0003517 <remove_chain+0x63>
c0003595:	eb 5d                	jmp    c00035f4 <remove_chain+0x140>
c0003597:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000359a:	75 1b                	jne    c00035b7 <remove_chain+0x103>
c000359c:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c00035a0:	89 d8                	mov    eax,ebx
c00035a2:	83 ec 0c             	sub    esp,0xc
c00035a5:	6a 00                	push   0x0
c00035a7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00035ab:	e8 5d f7 ff ff       	call   c0002d0d <change_bitmap>
c00035b0:	83 c4 10             	add    esp,0x10
c00035b3:	85 c0                	test   eax,eax
c00035b5:	75 3d                	jne    c00035f4 <remove_chain+0x140>
c00035b7:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c00035bb:	e9 73 ff ff ff       	jmp    c0003533 <remove_chain+0x7f>
c00035c0:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035c5:	75 8d                	jne    c0003554 <remove_chain+0xa0>
c00035c7:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035cb:	eb 25                	jmp    c00035f2 <remove_chain+0x13e>
c00035cd:	8d 53 01             	lea    edx,[ebx+0x1]
c00035d0:	89 c3                	mov    ebx,eax
c00035d2:	39 c2                	cmp    edx,eax
c00035d4:	74 88                	je     c000355e <remove_chain+0xaa>
c00035d6:	eb 1a                	jmp    c00035f2 <remove_chain+0x13e>
c00035d8:	3c 03                	cmp    al,0x3
c00035da:	75 16                	jne    c00035f2 <remove_chain+0x13e>
c00035dc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035df:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035e3:	77 0d                	ja     c00035f2 <remove_chain+0x13e>
c00035e5:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035e8:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035ec:	72 04                	jb     c00035f2 <remove_chain+0x13e>
c00035ee:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035f2:	31 c0                	xor    eax,eax
c00035f4:	83 c4 1c             	add    esp,0x1c
c00035f7:	5b                   	pop    ebx
c00035f8:	5e                   	pop    esi
c00035f9:	5f                   	pop    edi
c00035fa:	5d                   	pop    ebp
c00035fb:	c3                   	ret    

c00035fc <dir_clear>:
c00035fc:	55                   	push   ebp
c00035fd:	57                   	push   edi
c00035fe:	56                   	push   esi
c00035ff:	89 c6                	mov    esi,eax
c0003601:	53                   	push   ebx
c0003602:	83 ec 1c             	sub    esp,0x1c
c0003605:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003609:	e8 9d ed ff ff       	call   c00023ab <sync_window>
c000360e:	85 c0                	test   eax,eax
c0003610:	0f 85 de 00 00 00    	jne    c00036f4 <dir_clear+0xf8>
c0003616:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000361a:	89 f0                	mov    eax,esi
c000361c:	8d 6e 54             	lea    ebp,[esi+0x54]
c000361f:	e8 d6 e8 ff ff       	call   c0001efa <clst2sect>
c0003624:	b9 00 02 00 00       	mov    ecx,0x200
c0003629:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000362d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003631:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003634:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003637:	89 e8                	mov    eax,ebp
c0003639:	31 d2                	xor    edx,edx
c000363b:	e8 b5 e6 ff ff       	call   c0001cf5 <mem_set>
c0003640:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003644:	c1 e3 09             	shl    ebx,0x9
c0003647:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000364d:	76 1f                	jbe    c000366e <dir_clear+0x72>
c000364f:	bb 00 80 00 00       	mov    ebx,0x8000
c0003654:	eb 18                	jmp    c000366e <dir_clear+0x72>
c0003656:	83 ec 0c             	sub    esp,0xc
c0003659:	53                   	push   ebx
c000365a:	e8 35 4e 00 00       	call   c0008494 <ff_memalloc>
c000365f:	83 c4 10             	add    esp,0x10
c0003662:	89 c7                	mov    edi,eax
c0003664:	85 c0                	test   eax,eax
c0003666:	0f 85 8f 00 00 00    	jne    c00036fb <dir_clear+0xff>
c000366c:	d1 eb                	shr    ebx,1
c000366e:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003674:	77 e0                	ja     c0003656 <dir_clear+0x5a>
c0003676:	31 db                	xor    ebx,ebx
c0003678:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000367c:	39 d8                	cmp    eax,ebx
c000367e:	76 66                	jbe    c00036e6 <dir_clear+0xea>
c0003680:	83 ec 0c             	sub    esp,0xc
c0003683:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003687:	6a 01                	push   0x1
c0003689:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000368d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003691:	55                   	push   ebp
c0003692:	50                   	push   eax
c0003693:	e8 94 e5 ff ff       	call   c0001c2c <disk_write>
c0003698:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000369d:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c00036a2:	83 c4 20             	add    esp,0x20
c00036a5:	85 c0                	test   eax,eax
c00036a7:	75 3d                	jne    c00036e6 <dir_clear+0xea>
c00036a9:	43                   	inc    ebx
c00036aa:	eb cc                	jmp    c0003678 <dir_clear+0x7c>
c00036ac:	83 ec 0c             	sub    esp,0xc
c00036af:	31 d2                	xor    edx,edx
c00036b1:	55                   	push   ebp
c00036b2:	89 d8                	mov    eax,ebx
c00036b4:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00036b8:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00036bc:	52                   	push   edx
c00036bd:	50                   	push   eax
c00036be:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036c2:	57                   	push   edi
c00036c3:	50                   	push   eax
c00036c4:	e8 63 e5 ff ff       	call   c0001c2c <disk_write>
c00036c9:	83 c4 20             	add    esp,0x20
c00036cc:	85 c0                	test   eax,eax
c00036ce:	75 0a                	jne    c00036da <dir_clear+0xde>
c00036d0:	01 eb                	add    ebx,ebp
c00036d2:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036d6:	39 d8                	cmp    eax,ebx
c00036d8:	77 d2                	ja     c00036ac <dir_clear+0xb0>
c00036da:	83 ec 0c             	sub    esp,0xc
c00036dd:	57                   	push   edi
c00036de:	e8 c7 4d 00 00       	call   c00084aa <ff_memfree>
c00036e3:	83 c4 10             	add    esp,0x10
c00036e6:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036ea:	39 d8                	cmp    eax,ebx
c00036ec:	0f 95 c0             	setne  al
c00036ef:	0f b6 c0             	movzx  eax,al
c00036f2:	eb 19                	jmp    c000370d <dir_clear+0x111>
c00036f4:	b8 01 00 00 00       	mov    eax,0x1
c00036f9:	eb 12                	jmp    c000370d <dir_clear+0x111>
c00036fb:	89 d9                	mov    ecx,ebx
c00036fd:	31 d2                	xor    edx,edx
c00036ff:	c1 eb 09             	shr    ebx,0x9
c0003702:	e8 ee e5 ff ff       	call   c0001cf5 <mem_set>
c0003707:	89 dd                	mov    ebp,ebx
c0003709:	31 db                	xor    ebx,ebx
c000370b:	eb c5                	jmp    c00036d2 <dir_clear+0xd6>
c000370d:	83 c4 1c             	add    esp,0x1c
c0003710:	5b                   	pop    ebx
c0003711:	5e                   	pop    esi
c0003712:	5f                   	pop    edi
c0003713:	5d                   	pop    ebp
c0003714:	c3                   	ret    

c0003715 <dir_next>:
c0003715:	55                   	push   ebp
c0003716:	57                   	push   edi
c0003717:	56                   	push   esi
c0003718:	53                   	push   ebx
c0003719:	89 c3                	mov    ebx,eax
c000371b:	83 ec 1c             	sub    esp,0x1c
c000371e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003720:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003724:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003727:	8d 78 20             	lea    edi,[eax+0x20]
c000372a:	31 c0                	xor    eax,eax
c000372c:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003730:	0f 94 c0             	sete   al
c0003733:	48                   	dec    eax
c0003734:	25 00 00 20 f0       	and    eax,0xf0200000
c0003739:	05 00 00 00 10       	add    eax,0x10000000
c000373e:	39 f8                	cmp    eax,edi
c0003740:	77 0e                	ja     c0003750 <dir_next+0x3b>
c0003742:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003749:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003750:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003753:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003756:	b8 04 00 00 00       	mov    eax,0x4
c000375b:	89 ce                	mov    esi,ecx
c000375d:	09 d6                	or     esi,edx
c000375f:	0f 84 da 00 00 00    	je     c000383f <dir_next+0x12a>
c0003765:	89 f8                	mov    eax,edi
c0003767:	25 ff 01 00 00       	and    eax,0x1ff
c000376c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003770:	0f 85 b9 00 00 00    	jne    c000382f <dir_next+0x11a>
c0003776:	83 c2 01             	add    edx,0x1
c0003779:	83 d1 00             	adc    ecx,0x0
c000377c:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c000377f:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003782:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003785:	85 d2                	test   edx,edx
c0003787:	75 29                	jne    c00037b2 <dir_next+0x9d>
c0003789:	89 fa                	mov    edx,edi
c000378b:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c000378f:	c1 ea 05             	shr    edx,0x5
c0003792:	39 c2                	cmp    edx,eax
c0003794:	0f 82 95 00 00 00    	jb     c000382f <dir_next+0x11a>
c000379a:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00037a1:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c00037a8:	b8 04 00 00 00       	mov    eax,0x4
c00037ad:	e9 8d 00 00 00       	jmp    c000383f <dir_next+0x12a>
c00037b2:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c00037b6:	89 f9                	mov    ecx,edi
c00037b8:	48                   	dec    eax
c00037b9:	c1 e9 09             	shr    ecx,0x9
c00037bc:	85 c8                	test   eax,ecx
c00037be:	75 6f                	jne    c000382f <dir_next+0x11a>
c00037c0:	89 d8                	mov    eax,ebx
c00037c2:	e8 00 f8 ff ff       	call   c0002fc7 <get_fat>
c00037c7:	89 c6                	mov    esi,eax
c00037c9:	83 f8 01             	cmp    eax,0x1
c00037cc:	77 07                	ja     c00037d5 <dir_next+0xc0>
c00037ce:	b8 02 00 00 00       	mov    eax,0x2
c00037d3:	eb 6a                	jmp    c000383f <dir_next+0x12a>
c00037d5:	83 f8 ff             	cmp    eax,0xffffffff
c00037d8:	75 07                	jne    c00037e1 <dir_next+0xcc>
c00037da:	b8 01 00 00 00       	mov    eax,0x1
c00037df:	eb 5e                	jmp    c000383f <dir_next+0x12a>
c00037e1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037e4:	77 37                	ja     c000381d <dir_next+0x108>
c00037e6:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037eb:	74 ad                	je     c000379a <dir_next+0x85>
c00037ed:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037f0:	89 d8                	mov    eax,ebx
c00037f2:	e8 be fa ff ff       	call   c00032b5 <create_chain>
c00037f7:	89 c6                	mov    esi,eax
c00037f9:	b8 07 00 00 00       	mov    eax,0x7
c00037fe:	85 f6                	test   esi,esi
c0003800:	74 3d                	je     c000383f <dir_next+0x12a>
c0003802:	83 fe 01             	cmp    esi,0x1
c0003805:	74 c7                	je     c00037ce <dir_next+0xb9>
c0003807:	83 fe ff             	cmp    esi,0xffffffff
c000380a:	74 ce                	je     c00037da <dir_next+0xc5>
c000380c:	89 f2                	mov    edx,esi
c000380e:	89 e8                	mov    eax,ebp
c0003810:	e8 e7 fd ff ff       	call   c00035fc <dir_clear>
c0003815:	85 c0                	test   eax,eax
c0003817:	75 c1                	jne    c00037da <dir_next+0xc5>
c0003819:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c000381d:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003820:	89 f2                	mov    edx,esi
c0003822:	89 e8                	mov    eax,ebp
c0003824:	e8 d1 e6 ff ff       	call   c0001efa <clst2sect>
c0003829:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000382c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000382f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003833:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003836:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000383a:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000383d:	31 c0                	xor    eax,eax
c000383f:	83 c4 1c             	add    esp,0x1c
c0003842:	5b                   	pop    ebx
c0003843:	5e                   	pop    esi
c0003844:	5f                   	pop    edi
c0003845:	5d                   	pop    ebp
c0003846:	c3                   	ret    

c0003847 <load_xdir>:
c0003847:	55                   	push   ebp
c0003848:	57                   	push   edi
c0003849:	56                   	push   esi
c000384a:	89 c6                	mov    esi,eax
c000384c:	53                   	push   ebx
c000384d:	83 ec 1c             	sub    esp,0x1c
c0003850:	8b 00                	mov    eax,DWORD PTR [eax]
c0003852:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003855:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003858:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000385b:	e8 df eb ff ff       	call   c000243f <move_window>
c0003860:	89 c3                	mov    ebx,eax
c0003862:	85 c0                	test   eax,eax
c0003864:	0f 85 0c 01 00 00    	jne    c0003976 <load_xdir+0x12f>
c000386a:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000386d:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003870:	0f 85 fb 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c0003876:	89 f8                	mov    eax,edi
c0003878:	b9 20 00 00 00       	mov    ecx,0x20
c000387d:	e8 5e e4 ff ff       	call   c0001ce0 <mem_cpy>
c0003882:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003886:	40                   	inc    eax
c0003887:	c1 e0 05             	shl    eax,0x5
c000388a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000388e:	83 e8 60             	sub    eax,0x60
c0003891:	3d 00 02 00 00       	cmp    eax,0x200
c0003896:	0f 87 d5 00 00 00    	ja     c0003971 <load_xdir+0x12a>
c000389c:	31 d2                	xor    edx,edx
c000389e:	89 f0                	mov    eax,esi
c00038a0:	e8 70 fe ff ff       	call   c0003715 <dir_next>
c00038a5:	89 c3                	mov    ebx,eax
c00038a7:	83 f8 04             	cmp    eax,0x4
c00038aa:	0f 84 c1 00 00 00    	je     c0003971 <load_xdir+0x12a>
c00038b0:	85 c0                	test   eax,eax
c00038b2:	0f 85 be 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038b8:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038bb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c00038be:	8b 06                	mov    eax,DWORD PTR [esi]
c00038c0:	e8 7a eb ff ff       	call   c000243f <move_window>
c00038c5:	89 c3                	mov    ebx,eax
c00038c7:	85 c0                	test   eax,eax
c00038c9:	0f 85 a7 00 00 00    	jne    c0003976 <load_xdir+0x12f>
c00038cf:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038d2:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038d5:	0f 85 96 00 00 00    	jne    c0003971 <load_xdir+0x12a>
c00038db:	8d 47 20             	lea    eax,[edi+0x20]
c00038de:	b9 20 00 00 00       	mov    ecx,0x20
c00038e3:	e8 f8 e3 ff ff       	call   c0001ce0 <mem_cpy>
c00038e8:	31 d2                	xor    edx,edx
c00038ea:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038ee:	b9 0f 00 00 00       	mov    ecx,0xf
c00038f3:	83 c0 2c             	add    eax,0x2c
c00038f6:	f7 f1                	div    ecx
c00038f8:	c1 e0 05             	shl    eax,0x5
c00038fb:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038ff:	77 70                	ja     c0003971 <load_xdir+0x12a>
c0003901:	bd 40 00 00 00       	mov    ebp,0x40
c0003906:	31 d2                	xor    edx,edx
c0003908:	89 f0                	mov    eax,esi
c000390a:	e8 06 fe ff ff       	call   c0003715 <dir_next>
c000390f:	89 c3                	mov    ebx,eax
c0003911:	83 f8 04             	cmp    eax,0x4
c0003914:	74 5b                	je     c0003971 <load_xdir+0x12a>
c0003916:	85 c0                	test   eax,eax
c0003918:	75 5c                	jne    c0003976 <load_xdir+0x12f>
c000391a:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000391d:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003920:	8b 06                	mov    eax,DWORD PTR [esi]
c0003922:	e8 18 eb ff ff       	call   c000243f <move_window>
c0003927:	89 c3                	mov    ebx,eax
c0003929:	85 c0                	test   eax,eax
c000392b:	75 49                	jne    c0003976 <load_xdir+0x12f>
c000392d:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003930:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003933:	75 3c                	jne    c0003971 <load_xdir+0x12a>
c0003935:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000393b:	77 0d                	ja     c000394a <load_xdir+0x103>
c000393d:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003940:	b9 20 00 00 00       	mov    ecx,0x20
c0003945:	e8 96 e3 ff ff       	call   c0001ce0 <mem_cpy>
c000394a:	83 c5 20             	add    ebp,0x20
c000394d:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003951:	77 b3                	ja     c0003906 <load_xdir+0xbf>
c0003953:	81 fd 60 02 00 00    	cmp    ebp,0x260
c0003959:	77 1b                	ja     c0003976 <load_xdir+0x12f>
c000395b:	89 f8                	mov    eax,edi
c000395d:	e8 cd e7 ff ff       	call   c000212f <xdir_sum>
c0003962:	89 c1                	mov    ecx,eax
c0003964:	8d 47 02             	lea    eax,[edi+0x2]
c0003967:	e8 f5 e2 ff ff       	call   c0001c61 <ld_word>
c000396c:	66 39 c1             	cmp    cx,ax
c000396f:	74 05                	je     c0003976 <load_xdir+0x12f>
c0003971:	bb 02 00 00 00       	mov    ebx,0x2
c0003976:	83 c4 1c             	add    esp,0x1c
c0003979:	89 d8                	mov    eax,ebx
c000397b:	5b                   	pop    ebx
c000397c:	5e                   	pop    esi
c000397d:	5f                   	pop    edi
c000397e:	5d                   	pop    ebp
c000397f:	c3                   	ret    

c0003980 <load_obj_xdir>:
c0003980:	53                   	push   ebx
c0003981:	89 c3                	mov    ebx,eax
c0003983:	83 ec 08             	sub    esp,0x8
c0003986:	8b 02                	mov    eax,DWORD PTR [edx]
c0003988:	89 03                	mov    DWORD PTR [ebx],eax
c000398a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000398d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003990:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003993:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003996:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003999:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00039a0:	30 c0                	xor    al,al
c00039a2:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c00039a9:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00039ac:	89 d8                	mov    eax,ebx
c00039ae:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c00039b1:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c00039b4:	e8 04 f8 ff ff       	call   c00031bd <dir_sdi>
c00039b9:	85 c0                	test   eax,eax
c00039bb:	75 0b                	jne    c00039c8 <load_obj_xdir+0x48>
c00039bd:	89 d8                	mov    eax,ebx
c00039bf:	83 c4 08             	add    esp,0x8
c00039c2:	5b                   	pop    ebx
c00039c3:	e9 7f fe ff ff       	jmp    c0003847 <load_xdir>
c00039c8:	83 c4 08             	add    esp,0x8
c00039cb:	5b                   	pop    ebx
c00039cc:	c3                   	ret    

c00039cd <dir_read>:
c00039cd:	55                   	push   ebp
c00039ce:	bd 04 00 00 00       	mov    ebp,0x4
c00039d3:	57                   	push   edi
c00039d4:	56                   	push   esi
c00039d5:	be ff ff ff ff       	mov    esi,0xffffffff
c00039da:	53                   	push   ebx
c00039db:	89 c3                	mov    ebx,eax
c00039dd:	83 ec 1c             	sub    esp,0x1c
c00039e0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e4:	8b 38                	mov    edi,DWORD PTR [eax]
c00039e6:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039eb:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039ee:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039f1:	89 c8                	mov    eax,ecx
c00039f3:	09 d0                	or     eax,edx
c00039f5:	0f 84 25 01 00 00    	je     c0003b20 <dir_read+0x153>
c00039fb:	89 f8                	mov    eax,edi
c00039fd:	e8 3d ea ff ff       	call   c000243f <move_window>
c0003a02:	89 c5                	mov    ebp,eax
c0003a04:	85 c0                	test   eax,eax
c0003a06:	0f 85 23 01 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a0c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003a0f:	8a 0a                	mov    cl,BYTE PTR [edx]
c0003a11:	84 c9                	test   cl,cl
c0003a13:	0f 84 11 01 00 00    	je     c0003b2a <dir_read+0x15d>
c0003a19:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003a1c:	75 48                	jne    c0003a66 <dir_read+0x99>
c0003a1e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a23:	74 10                	je     c0003a35 <dir_read+0x68>
c0003a25:	80 f9 83             	cmp    cl,0x83
c0003a28:	0f 85 dd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a2e:	31 ed                	xor    ebp,ebp
c0003a30:	e9 08 01 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a35:	80 f9 85             	cmp    cl,0x85
c0003a38:	0f 85 cd 00 00 00    	jne    c0003b0b <dir_read+0x13e>
c0003a3e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a41:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a44:	89 d8                	mov    eax,ebx
c0003a46:	e8 fc fd ff ff       	call   c0003847 <load_xdir>
c0003a4b:	89 c5                	mov    ebp,eax
c0003a4d:	85 c0                	test   eax,eax
c0003a4f:	0f 85 da 00 00 00    	jne    c0003b2f <dir_read+0x162>
c0003a55:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a58:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a5b:	83 e0 3f             	and    eax,0x3f
c0003a5e:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a61:	e9 d7 00 00 00       	jmp    c0003b3d <dir_read+0x170>
c0003a66:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a69:	83 e0 3f             	and    eax,0x3f
c0003a6c:	80 f9 2e             	cmp    cl,0x2e
c0003a6f:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a73:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a76:	0f 84 8a 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a7c:	80 f9 e5             	cmp    cl,0xe5
c0003a7f:	0f 84 81 00 00 00    	je     c0003b06 <dir_read+0x139>
c0003a85:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a89:	83 e0 1f             	and    eax,0x1f
c0003a8c:	83 f8 08             	cmp    eax,0x8
c0003a8f:	0f 94 c0             	sete   al
c0003a92:	0f b6 c0             	movzx  eax,al
c0003a95:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a99:	75 6b                	jne    c0003b06 <dir_read+0x139>
c0003a9b:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003aa0:	75 44                	jne    c0003ae6 <dir_read+0x119>
c0003aa2:	f6 c1 40             	test   cl,0x40
c0003aa5:	74 12                	je     c0003ab9 <dir_read+0xec>
c0003aa7:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003aaa:	83 e1 bf             	and    ecx,0xffffffbf
c0003aad:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003ab1:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003ab4:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003ab7:	eb 06                	jmp    c0003abf <dir_read+0xf2>
c0003ab9:	89 f0                	mov    eax,esi
c0003abb:	38 c8                	cmp    al,cl
c0003abd:	75 47                	jne    c0003b06 <dir_read+0x139>
c0003abf:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003ac3:	be ff ff ff ff       	mov    esi,0xffffffff
c0003ac8:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003acb:	75 3e                	jne    c0003b0b <dir_read+0x13e>
c0003acd:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ad1:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ad4:	e8 8a e4 ff ff       	call   c0001f63 <pick_lfn>
c0003ad9:	85 c0                	test   eax,eax
c0003adb:	74 2e                	je     c0003b0b <dir_read+0x13e>
c0003add:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ae1:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ae4:	eb 25                	jmp    c0003b0b <dir_read+0x13e>
c0003ae6:	89 f0                	mov    eax,esi
c0003ae8:	84 c0                	test   al,al
c0003aea:	75 11                	jne    c0003afd <dir_read+0x130>
c0003aec:	89 d0                	mov    eax,edx
c0003aee:	e8 2a e6 ff ff       	call   c000211d <sum_sfn>
c0003af3:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003af7:	0f 84 31 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003afd:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003b04:	eb 37                	jmp    c0003b3d <dir_read+0x170>
c0003b06:	be ff ff ff ff       	mov    esi,0xffffffff
c0003b0b:	31 d2                	xor    edx,edx
c0003b0d:	89 d8                	mov    eax,ebx
c0003b0f:	e8 01 fc ff ff       	call   c0003715 <dir_next>
c0003b14:	89 c5                	mov    ebp,eax
c0003b16:	85 c0                	test   eax,eax
c0003b18:	0f 84 cd fe ff ff    	je     c00039eb <dir_read+0x1e>
c0003b1e:	eb 0f                	jmp    c0003b2f <dir_read+0x162>
c0003b20:	85 ed                	test   ebp,ebp
c0003b22:	0f 84 06 ff ff ff    	je     c0003a2e <dir_read+0x61>
c0003b28:	eb 05                	jmp    c0003b2f <dir_read+0x162>
c0003b2a:	bd 04 00 00 00       	mov    ebp,0x4
c0003b2f:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b36:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b3d:	83 c4 1c             	add    esp,0x1c
c0003b40:	89 e8                	mov    eax,ebp
c0003b42:	5b                   	pop    ebx
c0003b43:	5e                   	pop    esi
c0003b44:	5f                   	pop    edi
c0003b45:	5d                   	pop    ebp
c0003b46:	c3                   	ret    

c0003b47 <dir_alloc>:
c0003b47:	55                   	push   ebp
c0003b48:	89 d5                	mov    ebp,edx
c0003b4a:	57                   	push   edi
c0003b4b:	31 d2                	xor    edx,edx
c0003b4d:	56                   	push   esi
c0003b4e:	53                   	push   ebx
c0003b4f:	89 c3                	mov    ebx,eax
c0003b51:	83 ec 0c             	sub    esp,0xc
c0003b54:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b56:	e8 62 f6 ff ff       	call   c00031bd <dir_sdi>
c0003b5b:	85 c0                	test   eax,eax
c0003b5d:	75 4e                	jne    c0003bad <dir_alloc+0x66>
c0003b5f:	31 f6                	xor    esi,esi
c0003b61:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b64:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b67:	89 f8                	mov    eax,edi
c0003b69:	e8 d1 e8 ff ff       	call   c000243f <move_window>
c0003b6e:	85 c0                	test   eax,eax
c0003b70:	75 3b                	jne    c0003bad <dir_alloc+0x66>
c0003b72:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b75:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b78:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b7a:	75 07                	jne    c0003b83 <dir_alloc+0x3c>
c0003b7c:	f7 d2                	not    edx
c0003b7e:	c0 ea 07             	shr    dl,0x7
c0003b81:	eb 0d                	jmp    c0003b90 <dir_alloc+0x49>
c0003b83:	84 d2                	test   dl,dl
c0003b85:	0f 94 c1             	sete   cl
c0003b88:	80 fa e5             	cmp    dl,0xe5
c0003b8b:	0f 94 c2             	sete   dl
c0003b8e:	09 ca                	or     edx,ecx
c0003b90:	84 d2                	test   dl,dl
c0003b92:	74 07                	je     c0003b9b <dir_alloc+0x54>
c0003b94:	46                   	inc    esi
c0003b95:	39 ee                	cmp    esi,ebp
c0003b97:	75 04                	jne    c0003b9d <dir_alloc+0x56>
c0003b99:	eb 1c                	jmp    c0003bb7 <dir_alloc+0x70>
c0003b9b:	31 f6                	xor    esi,esi
c0003b9d:	ba 01 00 00 00       	mov    edx,0x1
c0003ba2:	89 d8                	mov    eax,ebx
c0003ba4:	e8 6c fb ff ff       	call   c0003715 <dir_next>
c0003ba9:	85 c0                	test   eax,eax
c0003bab:	74 b4                	je     c0003b61 <dir_alloc+0x1a>
c0003bad:	83 f8 04             	cmp    eax,0x4
c0003bb0:	75 05                	jne    c0003bb7 <dir_alloc+0x70>
c0003bb2:	b8 07 00 00 00       	mov    eax,0x7
c0003bb7:	83 c4 0c             	add    esp,0xc
c0003bba:	5b                   	pop    ebx
c0003bbb:	5e                   	pop    esi
c0003bbc:	5f                   	pop    edi
c0003bbd:	5d                   	pop    ebp
c0003bbe:	c3                   	ret    

c0003bbf <store_xdir>:
c0003bbf:	55                   	push   ebp
c0003bc0:	57                   	push   edi
c0003bc1:	89 c7                	mov    edi,eax
c0003bc3:	56                   	push   esi
c0003bc4:	53                   	push   ebx
c0003bc5:	83 ec 0c             	sub    esp,0xc
c0003bc8:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bca:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bcd:	89 e8                	mov    eax,ebp
c0003bcf:	e8 5b e5 ff ff       	call   c000212f <xdir_sum>
c0003bd4:	0f b7 d0             	movzx  edx,ax
c0003bd7:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bda:	e8 f4 e0 ff ff       	call   c0001cd3 <st_word>
c0003bdf:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003be3:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003be6:	89 f8                	mov    eax,edi
c0003be8:	e8 d0 f5 ff ff       	call   c00031bd <dir_sdi>
c0003bed:	89 c6                	mov    esi,eax
c0003bef:	85 f6                	test   esi,esi
c0003bf1:	75 3d                	jne    c0003c30 <store_xdir+0x71>
c0003bf3:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bf6:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bf9:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bfb:	e8 3f e8 ff ff       	call   c000243f <move_window>
c0003c00:	89 c6                	mov    esi,eax
c0003c02:	85 c0                	test   eax,eax
c0003c04:	75 2a                	jne    c0003c30 <store_xdir+0x71>
c0003c06:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003c09:	b9 20 00 00 00       	mov    ecx,0x20
c0003c0e:	89 ea                	mov    edx,ebp
c0003c10:	e8 cb e0 ff ff       	call   c0001ce0 <mem_cpy>
c0003c15:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c17:	85 db                	test   ebx,ebx
c0003c19:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003c1d:	74 11                	je     c0003c30 <store_xdir+0x71>
c0003c1f:	31 d2                	xor    edx,edx
c0003c21:	89 f8                	mov    eax,edi
c0003c23:	83 c5 20             	add    ebp,0x20
c0003c26:	e8 ea fa ff ff       	call   c0003715 <dir_next>
c0003c2b:	4b                   	dec    ebx
c0003c2c:	89 c6                	mov    esi,eax
c0003c2e:	eb bf                	jmp    c0003bef <store_xdir+0x30>
c0003c30:	89 f0                	mov    eax,esi
c0003c32:	83 fe 02             	cmp    esi,0x2
c0003c35:	76 05                	jbe    c0003c3c <store_xdir+0x7d>
c0003c37:	b8 02 00 00 00       	mov    eax,0x2
c0003c3c:	83 c4 0c             	add    esp,0xc
c0003c3f:	5b                   	pop    ebx
c0003c40:	5e                   	pop    esi
c0003c41:	5f                   	pop    edi
c0003c42:	5d                   	pop    ebp
c0003c43:	c3                   	ret    

c0003c44 <dir_remove>:
c0003c44:	57                   	push   edi
c0003c45:	56                   	push   esi
c0003c46:	53                   	push   ebx
c0003c47:	89 c3                	mov    ebx,eax
c0003c49:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c4c:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c4e:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c51:	83 fa ff             	cmp    edx,0xffffffff
c0003c54:	74 09                	je     c0003c5f <dir_remove+0x1b>
c0003c56:	e8 62 f5 ff ff       	call   c00031bd <dir_sdi>
c0003c5b:	85 c0                	test   eax,eax
c0003c5d:	75 41                	jne    c0003ca0 <dir_remove+0x5c>
c0003c5f:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c62:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c65:	89 f0                	mov    eax,esi
c0003c67:	e8 d3 e7 ff ff       	call   c000243f <move_window>
c0003c6c:	85 c0                	test   eax,eax
c0003c6e:	75 26                	jne    c0003c96 <dir_remove+0x52>
c0003c70:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c73:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c76:	75 05                	jne    c0003c7d <dir_remove+0x39>
c0003c78:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c7b:	eb 03                	jmp    c0003c80 <dir_remove+0x3c>
c0003c7d:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c80:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c84:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c87:	73 17                	jae    c0003ca0 <dir_remove+0x5c>
c0003c89:	31 d2                	xor    edx,edx
c0003c8b:	89 d8                	mov    eax,ebx
c0003c8d:	e8 83 fa ff ff       	call   c0003715 <dir_next>
c0003c92:	85 c0                	test   eax,eax
c0003c94:	74 c9                	je     c0003c5f <dir_remove+0x1b>
c0003c96:	83 f8 04             	cmp    eax,0x4
c0003c99:	75 05                	jne    c0003ca0 <dir_remove+0x5c>
c0003c9b:	b8 02 00 00 00       	mov    eax,0x2
c0003ca0:	5b                   	pop    ebx
c0003ca1:	5e                   	pop    esi
c0003ca2:	5f                   	pop    edi
c0003ca3:	c3                   	ret    

c0003ca4 <create_name>:
c0003ca4:	55                   	push   ebp
c0003ca5:	89 d5                	mov    ebp,edx
c0003ca7:	57                   	push   edi
c0003ca8:	89 c7                	mov    edi,eax
c0003caa:	56                   	push   esi
c0003cab:	31 f6                	xor    esi,esi
c0003cad:	53                   	push   ebx
c0003cae:	83 ec 3c             	sub    esp,0x3c
c0003cb1:	8b 02                	mov    eax,DWORD PTR [edx]
c0003cb3:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003cb7:	8b 07                	mov    eax,DWORD PTR [edi]
c0003cb9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003cbc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003cc0:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003cc4:	e8 72 e0 ff ff       	call   c0001d3b <tchar2uni>
c0003cc9:	89 c3                	mov    ebx,eax
c0003ccb:	83 f8 ff             	cmp    eax,0xffffffff
c0003cce:	75 0a                	jne    c0003cda <create_name+0x36>
c0003cd0:	b8 06 00 00 00       	mov    eax,0x6
c0003cd5:	e9 9e 02 00 00       	jmp    c0003f78 <create_name+0x2d4>
c0003cda:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cdf:	76 0c                	jbe    c0003ced <create_name+0x49>
c0003ce1:	c1 e8 10             	shr    eax,0x10
c0003ce4:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003ce8:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003cec:	46                   	inc    esi
c0003ced:	66 83 fb 1f          	cmp    bx,0x1f
c0003cf1:	76 4f                	jbe    c0003d42 <create_name+0x9e>
c0003cf3:	66 83 fb 5c          	cmp    bx,0x5c
c0003cf7:	74 35                	je     c0003d2e <create_name+0x8a>
c0003cf9:	66 83 fb 2f          	cmp    bx,0x2f
c0003cfd:	74 2f                	je     c0003d2e <create_name+0x8a>
c0003cff:	66 83 fb 7f          	cmp    bx,0x7f
c0003d03:	77 11                	ja     c0003d16 <create_name+0x72>
c0003d05:	0f b7 d3             	movzx  edx,bx
c0003d08:	b8 b2 90 02 c0       	mov    eax,0xc00290b2
c0003d0d:	e8 11 e0 ff ff       	call   c0001d23 <chk_chr>
c0003d12:	85 c0                	test   eax,eax
c0003d14:	75 ba                	jne    c0003cd0 <create_name+0x2c>
c0003d16:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003d1c:	77 b2                	ja     c0003cd0 <create_name+0x2c>
c0003d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d22:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d26:	46                   	inc    esi
c0003d27:	eb 97                	jmp    c0003cc0 <create_name+0x1c>
c0003d29:	40                   	inc    eax
c0003d2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d2e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d32:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d34:	80 fa 2f             	cmp    dl,0x2f
c0003d37:	74 f0                	je     c0003d29 <create_name+0x85>
c0003d39:	80 fa 5c             	cmp    dl,0x5c
c0003d3c:	74 eb                	je     c0003d29 <create_name+0x85>
c0003d3e:	31 db                	xor    ebx,ebx
c0003d40:	eb 02                	jmp    c0003d44 <create_name+0xa0>
c0003d42:	b3 04                	mov    bl,0x4
c0003d44:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d48:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d4b:	85 f6                	test   esi,esi
c0003d4d:	74 18                	je     c0003d67 <create_name+0xc3>
c0003d4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d53:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d58:	66 83 f8 20          	cmp    ax,0x20
c0003d5c:	74 06                	je     c0003d64 <create_name+0xc0>
c0003d5e:	66 83 f8 2e          	cmp    ax,0x2e
c0003d62:	75 03                	jne    c0003d67 <create_name+0xc3>
c0003d64:	4e                   	dec    esi
c0003d65:	eb e4                	jmp    c0003d4b <create_name+0xa7>
c0003d67:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d6b:	31 ed                	xor    ebp,ebp
c0003d6d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d73:	85 f6                	test   esi,esi
c0003d75:	0f 84 55 ff ff ff    	je     c0003cd0 <create_name+0x2c>
c0003d7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d7f:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d82:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d86:	66 83 f8 20          	cmp    ax,0x20
c0003d8a:	75 04                	jne    c0003d90 <create_name+0xec>
c0003d8c:	89 d5                	mov    ebp,edx
c0003d8e:	eb eb                	jmp    c0003d7b <create_name+0xd7>
c0003d90:	85 ed                	test   ebp,ebp
c0003d92:	75 06                	jne    c0003d9a <create_name+0xf6>
c0003d94:	66 83 f8 2e          	cmp    ax,0x2e
c0003d98:	75 08                	jne    c0003da2 <create_name+0xfe>
c0003d9a:	83 cb 03             	or     ebx,0x3
c0003d9d:	eb 03                	jmp    c0003da2 <create_name+0xfe>
c0003d9f:	4e                   	dec    esi
c0003da0:	74 0c                	je     c0003dae <create_name+0x10a>
c0003da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003da6:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003dac:	75 f1                	jne    c0003d9f <create_name+0xfb>
c0003dae:	b9 0b 00 00 00       	mov    ecx,0xb
c0003db3:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003db6:	ba 20 00 00 00       	mov    edx,0x20
c0003dbb:	e8 35 df ff ff       	call   c0001cf5 <mem_set>
c0003dc0:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003dc8:	31 c9                	xor    ecx,ecx
c0003dca:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003dcf:	8d 45 01             	lea    eax,[ebp+0x1]
c0003dd2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003dd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dda:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dde:	66 85 ed             	test   bp,bp
c0003de1:	0f 84 30 01 00 00    	je     c0003f17 <create_name+0x273>
c0003de7:	66 83 fd 20          	cmp    bp,0x20
c0003deb:	74 10                	je     c0003dfd <create_name+0x159>
c0003ded:	66 83 fd 2e          	cmp    bp,0x2e
c0003df1:	75 13                	jne    c0003e06 <create_name+0x162>
c0003df3:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df7:	0f 84 6b 01 00 00    	je     c0003f68 <create_name+0x2c4>
c0003dfd:	83 cb 03             	or     ebx,0x3
c0003e00:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003e04:	eb c9                	jmp    c0003dcf <create_name+0x12b>
c0003e06:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003e0a:	73 0b                	jae    c0003e17 <create_name+0x173>
c0003e0c:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e10:	75 47                	jne    c0003e59 <create_name+0x1b5>
c0003e12:	e9 51 01 00 00       	jmp    c0003f68 <create_name+0x2c4>
c0003e17:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003e1c:	75 10                	jne    c0003e2e <create_name+0x18a>
c0003e1e:	83 cb 03             	or     ebx,0x3
c0003e21:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e29:	e9 e9 00 00 00       	jmp    c0003f17 <create_name+0x273>
c0003e2e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e32:	74 0d                	je     c0003e41 <create_name+0x19d>
c0003e34:	83 cb 03             	or     ebx,0x3
c0003e37:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e3b:	0f 87 d6 00 00 00    	ja     c0003f17 <create_name+0x273>
c0003e41:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e46:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e4a:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e52:	b9 08 00 00 00       	mov    ecx,0x8
c0003e57:	eb a7                	jmp    c0003e00 <create_name+0x15c>
c0003e59:	66 83 fd 7f          	cmp    bp,0x7f
c0003e5d:	76 68                	jbe    c0003ec7 <create_name+0x223>
c0003e5f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e63:	88 da                	mov    dl,bl
c0003e65:	83 ca 02             	or     edx,0x2
c0003e68:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e6c:	50                   	push   eax
c0003e6d:	50                   	push   eax
c0003e6e:	68 b5 01 00 00       	push   0x1b5
c0003e73:	55                   	push   ebp
c0003e74:	e8 48 46 00 00       	call   c00084c1 <ff_uni2oem>
c0003e79:	83 c4 10             	add    esp,0x10
c0003e7c:	89 c5                	mov    ebp,eax
c0003e7e:	a8 80                	test   al,0x80
c0003e80:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e84:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e88:	74 0c                	je     c0003e96 <create_name+0x1f2>
c0003e8a:	83 e5 7f             	and    ebp,0x7f
c0003e8d:	0f b6 ad 00 90 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd7000]
c0003e94:	eb 2a                	jmp    c0003ec0 <create_name+0x21c>
c0003e96:	66 3d ff 00          	cmp    ax,0xff
c0003e9a:	76 24                	jbe    c0003ec0 <create_name+0x21c>
c0003e9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003ea0:	48                   	dec    eax
c0003ea1:	39 c8                	cmp    eax,ecx
c0003ea3:	77 0c                	ja     c0003eb1 <create_name+0x20d>
c0003ea5:	83 cb 03             	or     ebx,0x3
c0003ea8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003eac:	e9 4f ff ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003eb1:	89 e8                	mov    eax,ebp
c0003eb3:	88 d3                	mov    bl,dl
c0003eb5:	66 c1 e8 08          	shr    ax,0x8
c0003eb9:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ebd:	41                   	inc    ecx
c0003ebe:	eb 4b                	jmp    c0003f0b <create_name+0x267>
c0003ec0:	88 d3                	mov    bl,dl
c0003ec2:	66 85 ed             	test   bp,bp
c0003ec5:	74 19                	je     c0003ee0 <create_name+0x23c>
c0003ec7:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003ecb:	0f b7 d5             	movzx  edx,bp
c0003ece:	b8 bb 90 02 c0       	mov    eax,0xc00290bb
c0003ed3:	e8 4b de ff ff       	call   c0001d23 <chk_chr>
c0003ed8:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003edc:	85 c0                	test   eax,eax
c0003ede:	74 0a                	je     c0003eea <create_name+0x246>
c0003ee0:	83 cb 03             	or     ebx,0x3
c0003ee3:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ee8:	eb 21                	jmp    c0003f0b <create_name+0x267>
c0003eea:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003eed:	66 83 f8 19          	cmp    ax,0x19
c0003ef1:	77 07                	ja     c0003efa <create_name+0x256>
c0003ef3:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ef8:	eb 11                	jmp    c0003f0b <create_name+0x267>
c0003efa:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003efd:	66 83 f8 19          	cmp    ax,0x19
c0003f01:	77 08                	ja     c0003f0b <create_name+0x267>
c0003f03:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003f08:	83 ed 20             	sub    ebp,0x20
c0003f0b:	89 e8                	mov    eax,ebp
c0003f0d:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003f11:	41                   	inc    ecx
c0003f12:	e9 e9 fe ff ff       	jmp    c0003e00 <create_name+0x15c>
c0003f17:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003f1b:	75 04                	jne    c0003f21 <create_name+0x27d>
c0003f1d:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f21:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f26:	75 05                	jne    c0003f2d <create_name+0x289>
c0003f28:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f2d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f31:	83 e0 0c             	and    eax,0xc
c0003f34:	3c 0c                	cmp    al,0xc
c0003f36:	74 0b                	je     c0003f43 <create_name+0x29f>
c0003f38:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f3c:	83 e0 03             	and    eax,0x3
c0003f3f:	3c 03                	cmp    al,0x3
c0003f41:	75 05                	jne    c0003f48 <create_name+0x2a4>
c0003f43:	83 cb 02             	or     ebx,0x2
c0003f46:	eb 19                	jmp    c0003f61 <create_name+0x2bd>
c0003f48:	f6 c3 02             	test   bl,0x2
c0003f4b:	75 14                	jne    c0003f61 <create_name+0x2bd>
c0003f4d:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f52:	74 03                	je     c0003f57 <create_name+0x2b3>
c0003f54:	83 cb 10             	or     ebx,0x10
c0003f57:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f5c:	74 03                	je     c0003f61 <create_name+0x2bd>
c0003f5e:	83 cb 08             	or     ebx,0x8
c0003f61:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f64:	31 c0                	xor    eax,eax
c0003f66:	eb 10                	jmp    c0003f78 <create_name+0x2d4>
c0003f68:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f6d:	0f 85 ce fe ff ff    	jne    c0003e41 <create_name+0x19d>
c0003f73:	e9 a6 fe ff ff       	jmp    c0003e1e <create_name+0x17a>
c0003f78:	83 c4 3c             	add    esp,0x3c
c0003f7b:	5b                   	pop    ebx
c0003f7c:	5e                   	pop    esi
c0003f7d:	5f                   	pop    edi
c0003f7e:	5d                   	pop    ebp
c0003f7f:	c3                   	ret    

c0003f80 <xname_sum>:
c0003f80:	56                   	push   esi
c0003f81:	53                   	push   ebx
c0003f82:	89 c6                	mov    esi,eax
c0003f84:	51                   	push   ecx
c0003f85:	31 db                	xor    ebx,ebx
c0003f87:	83 c6 02             	add    esi,0x2
c0003f8a:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f8e:	66 85 c0             	test   ax,ax
c0003f91:	74 1f                	je     c0003fb2 <xname_sum+0x32>
c0003f93:	83 ec 0c             	sub    esp,0xc
c0003f96:	66 d1 cb             	ror    bx,1
c0003f99:	50                   	push   eax
c0003f9a:	e8 1e 46 00 00       	call   c00085bd <ff_wtoupper>
c0003f9f:	83 c4 10             	add    esp,0x10
c0003fa2:	0f b6 d0             	movzx  edx,al
c0003fa5:	66 c1 e8 08          	shr    ax,0x8
c0003fa9:	01 d3                	add    ebx,edx
c0003fab:	66 d1 cb             	ror    bx,1
c0003fae:	01 c3                	add    ebx,eax
c0003fb0:	eb d5                	jmp    c0003f87 <xname_sum+0x7>
c0003fb2:	89 d8                	mov    eax,ebx
c0003fb4:	5a                   	pop    edx
c0003fb5:	5b                   	pop    ebx
c0003fb6:	5e                   	pop    esi
c0003fb7:	c3                   	ret    

c0003fb8 <create_xdir>:
c0003fb8:	55                   	push   ebp
c0003fb9:	b9 40 00 00 00       	mov    ecx,0x40
c0003fbe:	57                   	push   edi
c0003fbf:	bd 01 00 00 00       	mov    ebp,0x1
c0003fc4:	56                   	push   esi
c0003fc5:	31 ff                	xor    edi,edi
c0003fc7:	53                   	push   ebx
c0003fc8:	be 40 00 00 00       	mov    esi,0x40
c0003fcd:	89 c3                	mov    ebx,eax
c0003fcf:	83 ec 1c             	sub    esp,0x1c
c0003fd2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fd6:	31 d2                	xor    edx,edx
c0003fd8:	e8 18 dd ff ff       	call   c0001cf5 <mem_set>
c0003fdd:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fe0:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fe4:	31 c9                	xor    ecx,ecx
c0003fe6:	8d 46 01             	lea    eax,[esi+0x1]
c0003fe9:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fed:	83 c6 02             	add    esi,0x2
c0003ff0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003ff4:	66 85 ed             	test   bp,bp
c0003ff7:	74 12                	je     c000400b <create_xdir+0x53>
c0003ff9:	0f b6 c1             	movzx  eax,cl
c0003ffc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004000:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0004004:	66 83 fd 01          	cmp    bp,0x1
c0004008:	80 d9 ff             	sbb    cl,0xff
c000400b:	8d 04 33             	lea    eax,[ebx+esi*1]
c000400e:	0f b7 d5             	movzx  edx,bp
c0004011:	83 c6 02             	add    esi,0x2
c0004014:	e8 ba dc ff ff       	call   c0001cd3 <st_word>
c0004019:	f7 c6 1f 00 00 00    	test   esi,0x1f
c000401f:	75 d3                	jne    c0003ff4 <create_xdir+0x3c>
c0004021:	8d 47 01             	lea    eax,[edi+0x1]
c0004024:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004028:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000402c:	0f b6 c1             	movzx  eax,cl
c000402f:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004034:	74 07                	je     c000403d <create_xdir+0x85>
c0004036:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000403b:	eb a9                	jmp    c0003fe6 <create_xdir+0x2e>
c000403d:	8d 47 02             	lea    eax,[edi+0x2]
c0004040:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004043:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004046:	89 d0                	mov    eax,edx
c0004048:	e8 33 ff ff ff       	call   c0003f80 <xname_sum>
c000404d:	83 c4 1c             	add    esp,0x1c
c0004050:	0f b7 d0             	movzx  edx,ax
c0004053:	8d 43 24             	lea    eax,[ebx+0x24]
c0004056:	5b                   	pop    ebx
c0004057:	5e                   	pop    esi
c0004058:	5f                   	pop    edi
c0004059:	5d                   	pop    ebp
c000405a:	e9 74 dc ff ff       	jmp    c0001cd3 <st_word>

c000405f <cmp_lfn>:
c000405f:	55                   	push   ebp
c0004060:	57                   	push   edi
c0004061:	89 d7                	mov    edi,edx
c0004063:	56                   	push   esi
c0004064:	53                   	push   ebx
c0004065:	83 ec 1c             	sub    esp,0x1c
c0004068:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000406c:	8d 42 1a             	lea    eax,[edx+0x1a]
c000406f:	e8 ed db ff ff       	call   c0001c61 <ld_word>
c0004074:	66 85 c0             	test   ax,ax
c0004077:	74 07                	je     c0004080 <cmp_lfn+0x21>
c0004079:	31 c0                	xor    eax,eax
c000407b:	e9 9a 00 00 00       	jmp    c000411a <cmp_lfn+0xbb>
c0004080:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004082:	bd 01 00 00 00       	mov    ebp,0x1
c0004087:	83 e3 3f             	and    ebx,0x3f
c000408a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004092:	4b                   	dec    ebx
c0004093:	6b db 0d             	imul   ebx,ebx,0xd
c0004096:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000409a:	0f b6 80 80 90 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd6f80]
c00040a1:	01 f8                	add    eax,edi
c00040a3:	e8 b9 db ff ff       	call   c0001c61 <ld_word>
c00040a8:	66 85 ed             	test   bp,bp
c00040ab:	89 c6                	mov    esi,eax
c00040ad:	74 3c                	je     c00040eb <cmp_lfn+0x8c>
c00040af:	81 fb ff 00 00 00    	cmp    ebx,0xff
c00040b5:	77 c2                	ja     c0004079 <cmp_lfn+0x1a>
c00040b7:	83 ec 0c             	sub    esp,0xc
c00040ba:	0f b7 c0             	movzx  eax,ax
c00040bd:	50                   	push   eax
c00040be:	e8 fa 44 00 00       	call   c00085bd <ff_wtoupper>
c00040c3:	89 c5                	mov    ebp,eax
c00040c5:	8d 43 01             	lea    eax,[ebx+0x1]
c00040c8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040d0:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00040d7:	e8 e1 44 00 00       	call   c00085bd <ff_wtoupper>
c00040dc:	83 c4 10             	add    esp,0x10
c00040df:	39 c5                	cmp    ebp,eax
c00040e1:	75 96                	jne    c0004079 <cmp_lfn+0x1a>
c00040e3:	89 f5                	mov    ebp,esi
c00040e5:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040e9:	eb 04                	jmp    c00040ef <cmp_lfn+0x90>
c00040eb:	66 46                	inc    si
c00040ed:	75 8a                	jne    c0004079 <cmp_lfn+0x1a>
c00040ef:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040f3:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040f8:	75 9c                	jne    c0004096 <cmp_lfn+0x37>
c00040fa:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040fd:	74 16                	je     c0004115 <cmp_lfn+0xb6>
c00040ff:	66 85 ed             	test   bp,bp
c0004102:	74 11                	je     c0004115 <cmp_lfn+0xb6>
c0004104:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004108:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000410d:	0f 94 c0             	sete   al
c0004110:	0f b6 c0             	movzx  eax,al
c0004113:	eb 05                	jmp    c000411a <cmp_lfn+0xbb>
c0004115:	b8 01 00 00 00       	mov    eax,0x1
c000411a:	83 c4 1c             	add    esp,0x1c
c000411d:	5b                   	pop    ebx
c000411e:	5e                   	pop    esi
c000411f:	5f                   	pop    edi
c0004120:	5d                   	pop    ebp
c0004121:	c3                   	ret    

c0004122 <dir_find>:
c0004122:	55                   	push   ebp
c0004123:	31 d2                	xor    edx,edx
c0004125:	57                   	push   edi
c0004126:	56                   	push   esi
c0004127:	53                   	push   ebx
c0004128:	89 c3                	mov    ebx,eax
c000412a:	83 ec 1c             	sub    esp,0x1c
c000412d:	8b 30                	mov    esi,DWORD PTR [eax]
c000412f:	e8 89 f0 ff ff       	call   c00031bd <dir_sdi>
c0004134:	89 04 24             	mov    DWORD PTR [esp],eax
c0004137:	85 c0                	test   eax,eax
c0004139:	0f 85 9e 01 00 00    	jne    c00042dd <dir_find+0x1bb>
c000413f:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004142:	0f 85 8d 00 00 00    	jne    c00041d5 <dir_find+0xb3>
c0004148:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000414b:	e8 30 fe ff ff       	call   c0003f80 <xname_sum>
c0004150:	89 c7                	mov    edi,eax
c0004152:	31 d2                	xor    edx,edx
c0004154:	89 d8                	mov    eax,ebx
c0004156:	e8 72 f8 ff ff       	call   c00039cd <dir_read>
c000415b:	85 c0                	test   eax,eax
c000415d:	0f 85 5e 01 00 00    	jne    c00042c1 <dir_find+0x19f>
c0004163:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004166:	8d 41 24             	lea    eax,[ecx+0x24]
c0004169:	e8 f3 da ff ff       	call   c0001c61 <ld_word>
c000416e:	66 39 f8             	cmp    ax,di
c0004171:	75 df                	jne    c0004152 <dir_find+0x30>
c0004173:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004176:	31 ed                	xor    ebp,ebp
c0004178:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000417c:	ba 40 00 00 00       	mov    edx,0x40
c0004181:	89 e9                	mov    ecx,ebp
c0004183:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004187:	0f 84 42 01 00 00    	je     c00042cf <dir_find+0x1ad>
c000418d:	f6 c2 1f             	test   dl,0x1f
c0004190:	75 03                	jne    c0004195 <dir_find+0x73>
c0004192:	83 c2 02             	add    edx,0x2
c0004195:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004199:	89 d0                	mov    eax,edx
c000419b:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000419e:	e8 be da ff ff       	call   c0001c61 <ld_word>
c00041a3:	83 ec 0c             	sub    esp,0xc
c00041a6:	0f b7 c0             	movzx  eax,ax
c00041a9:	50                   	push   eax
c00041aa:	e8 0e 44 00 00       	call   c00085bd <ff_wtoupper>
c00041af:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00041b3:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00041b6:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c00041ba:	89 04 24             	mov    DWORD PTR [esp],eax
c00041bd:	e8 fb 43 00 00       	call   c00085bd <ff_wtoupper>
c00041c2:	83 c4 10             	add    esp,0x10
c00041c5:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041c9:	75 87                	jne    c0004152 <dir_find+0x30>
c00041cb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041cf:	45                   	inc    ebp
c00041d0:	83 c2 02             	add    edx,0x2
c00041d3:	eb ac                	jmp    c0004181 <dir_find+0x5f>
c00041d5:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041dc:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041e1:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041e6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041e9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041ec:	89 f0                	mov    eax,esi
c00041ee:	e8 4c e2 ff ff       	call   c000243f <move_window>
c00041f3:	85 c0                	test   eax,eax
c00041f5:	0f 85 c6 00 00 00    	jne    c00042c1 <dir_find+0x19f>
c00041fb:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041fe:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c0004201:	84 c9                	test   cl,cl
c0004203:	0f 84 bd 00 00 00    	je     c00042c6 <dir_find+0x1a4>
c0004209:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c000420c:	88 d0                	mov    al,dl
c000420e:	83 e0 3f             	and    eax,0x3f
c0004211:	80 f9 e5             	cmp    cl,0xe5
c0004214:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0004217:	0f 84 87 00 00 00    	je     c00042a4 <dir_find+0x182>
c000421d:	80 e2 08             	and    dl,0x8
c0004220:	74 06                	je     c0004228 <dir_find+0x106>
c0004222:	3c 0f                	cmp    al,0xf
c0004224:	75 7e                	jne    c00042a4 <dir_find+0x182>
c0004226:	eb 04                	jmp    c000422c <dir_find+0x10a>
c0004228:	3c 0f                	cmp    al,0xf
c000422a:	75 4c                	jne    c0004278 <dir_find+0x156>
c000422c:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004230:	75 7e                	jne    c00042b0 <dir_find+0x18e>
c0004232:	f6 c1 40             	test   cl,0x40
c0004235:	74 12                	je     c0004249 <dir_find+0x127>
c0004237:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000423a:	83 e1 bf             	and    ecx,0xffffffbf
c000423d:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004241:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004244:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004247:	eb 06                	jmp    c000424f <dir_find+0x12d>
c0004249:	89 f8                	mov    eax,edi
c000424b:	38 c8                	cmp    al,cl
c000424d:	75 5c                	jne    c00042ab <dir_find+0x189>
c000424f:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004253:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004258:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000425b:	75 53                	jne    c00042b0 <dir_find+0x18e>
c000425d:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004261:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004264:	89 ea                	mov    edx,ebp
c0004266:	e8 f4 fd ff ff       	call   c000405f <cmp_lfn>
c000426b:	85 c0                	test   eax,eax
c000426d:	74 41                	je     c00042b0 <dir_find+0x18e>
c000426f:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004273:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004276:	eb 38                	jmp    c00042b0 <dir_find+0x18e>
c0004278:	89 f8                	mov    eax,edi
c000427a:	84 c0                	test   al,al
c000427c:	75 0d                	jne    c000428b <dir_find+0x169>
c000427e:	89 e8                	mov    eax,ebp
c0004280:	e8 98 de ff ff       	call   c000211d <sum_sfn>
c0004285:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c0004289:	74 52                	je     c00042dd <dir_find+0x1bb>
c000428b:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c000428f:	75 13                	jne    c00042a4 <dir_find+0x182>
c0004291:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004294:	b9 0b 00 00 00       	mov    ecx,0xb
c0004299:	89 e8                	mov    eax,ebp
c000429b:	e8 60 da ff ff       	call   c0001d00 <mem_cmp>
c00042a0:	85 c0                	test   eax,eax
c00042a2:	74 39                	je     c00042dd <dir_find+0x1bb>
c00042a4:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00042ab:	bf ff ff ff ff       	mov    edi,0xffffffff
c00042b0:	31 d2                	xor    edx,edx
c00042b2:	89 d8                	mov    eax,ebx
c00042b4:	e8 5c f4 ff ff       	call   c0003715 <dir_next>
c00042b9:	85 c0                	test   eax,eax
c00042bb:	0f 84 25 ff ff ff    	je     c00041e6 <dir_find+0xc4>
c00042c1:	89 04 24             	mov    DWORD PTR [esp],eax
c00042c4:	eb 17                	jmp    c00042dd <dir_find+0x1bb>
c00042c6:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042cd:	eb 0e                	jmp    c00042dd <dir_find+0x1bb>
c00042cf:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042d2:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042d7:	0f 85 75 fe ff ff    	jne    c0004152 <dir_find+0x30>
c00042dd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042e0:	83 c4 1c             	add    esp,0x1c
c00042e3:	5b                   	pop    ebx
c00042e4:	5e                   	pop    esi
c00042e5:	5f                   	pop    edi
c00042e6:	5d                   	pop    ebp
c00042e7:	c3                   	ret    

c00042e8 <dir_register>:
c00042e8:	55                   	push   ebp
c00042e9:	57                   	push   edi
c00042ea:	56                   	push   esi
c00042eb:	be 06 00 00 00       	mov    esi,0x6
c00042f0:	53                   	push   ebx
c00042f1:	83 ec 6c             	sub    esp,0x6c
c00042f4:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042f8:	0f 85 62 02 00 00    	jne    c0004560 <dir_register+0x278>
c00042fe:	8b 28                	mov    ebp,DWORD PTR [eax]
c0004300:	31 ff                	xor    edi,edi
c0004302:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0004305:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c000430a:	74 03                	je     c000430f <dir_register+0x27>
c000430c:	47                   	inc    edi
c000430d:	eb f6                	jmp    c0004305 <dir_register+0x1d>
c000430f:	89 c3                	mov    ebx,eax
c0004311:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0004315:	0f 85 e1 00 00 00    	jne    c00043fc <dir_register+0x114>
c000431b:	83 c7 0e             	add    edi,0xe
c000431e:	b9 0f 00 00 00       	mov    ecx,0xf
c0004323:	89 f8                	mov    eax,edi
c0004325:	31 d2                	xor    edx,edx
c0004327:	f7 f1                	div    ecx
c0004329:	8d 50 02             	lea    edx,[eax+0x2]
c000432c:	89 c7                	mov    edi,eax
c000432e:	89 d8                	mov    eax,ebx
c0004330:	e8 12 f8 ff ff       	call   c0003b47 <dir_alloc>
c0004335:	89 c6                	mov    esi,eax
c0004337:	85 c0                	test   eax,eax
c0004339:	0f 85 21 02 00 00    	jne    c0004560 <dir_register+0x278>
c000433f:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004345:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004348:	c1 e7 05             	shl    edi,0x5
c000434b:	29 f8                	sub    eax,edi
c000434d:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004350:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004353:	a8 04                	test   al,0x4
c0004355:	0f 84 91 00 00 00    	je     c00043ec <dir_register+0x104>
c000435b:	83 e0 fb             	and    eax,0xfffffffb
c000435e:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004361:	89 d8                	mov    eax,ebx
c0004363:	e8 25 ec ff ff       	call   c0002f8d <fill_first_frag>
c0004368:	85 c0                	test   eax,eax
c000436a:	0f 85 ee 01 00 00    	jne    c000455e <dir_register+0x276>
c0004370:	83 c9 ff             	or     ecx,0xffffffff
c0004373:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004376:	89 d8                	mov    eax,ebx
c0004378:	e8 db eb ff ff       	call   c0002f58 <fill_last_frag>
c000437d:	85 c0                	test   eax,eax
c000437f:	0f 85 d9 01 00 00    	jne    c000455e <dir_register+0x276>
c0004385:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0004389:	74 61                	je     c00043ec <dir_register+0x104>
c000438b:	89 da                	mov    edx,ebx
c000438d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004391:	e8 ea f5 ff ff       	call   c0003980 <load_obj_xdir>
c0004396:	85 c0                	test   eax,eax
c0004398:	0f 85 c0 01 00 00    	jne    c000455e <dir_register+0x276>
c000439e:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c00043a2:	31 c9                	xor    ecx,ecx
c00043a4:	c1 e2 09             	shl    edx,0x9
c00043a7:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c00043aa:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c00043ad:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00043b0:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c00043b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043b6:	83 c0 38             	add    eax,0x38
c00043b9:	e8 1c d9 ff ff       	call   c0001cda <st_qword>
c00043be:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043c1:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043c4:	83 c0 28             	add    eax,0x28
c00043c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ca:	e8 0b d9 ff ff       	call   c0001cda <st_qword>
c00043cf:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043d2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043d5:	83 c8 01             	or     eax,0x1
c00043d8:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043db:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043df:	e8 db f7 ff ff       	call   c0003bbf <store_xdir>
c00043e4:	85 c0                	test   eax,eax
c00043e6:	0f 85 72 01 00 00    	jne    c000455e <dir_register+0x276>
c00043ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043f2:	e8 c1 fb ff ff       	call   c0003fb8 <create_xdir>
c00043f7:	e9 64 01 00 00       	jmp    c0004560 <dir_register+0x278>
c00043fc:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043ff:	b9 0c 00 00 00       	mov    ecx,0xc
c0004404:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004408:	89 c2                	mov    edx,eax
c000440a:	8d 44 24 14          	lea    eax,[esp+0x14]
c000440e:	e8 cd d8 ff ff       	call   c0001ce0 <mem_cpy>
c0004413:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0004418:	74 58                	je     c0004472 <dir_register+0x18a>
c000441a:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c000441e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004426:	83 ec 0c             	sub    esp,0xc
c0004429:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000442c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004430:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004434:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004438:	e8 24 dc ff ff       	call   c0002061 <gen_numname>
c000443d:	89 d8                	mov    eax,ebx
c000443f:	e8 de fc ff ff       	call   c0004122 <dir_find>
c0004444:	83 c4 10             	add    esp,0x10
c0004447:	89 c6                	mov    esi,eax
c0004449:	85 c0                	test   eax,eax
c000444b:	75 15                	jne    c0004462 <dir_register+0x17a>
c000444d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004451:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004456:	75 ce                	jne    c0004426 <dir_register+0x13e>
c0004458:	be 07 00 00 00       	mov    esi,0x7
c000445d:	e9 fe 00 00 00       	jmp    c0004560 <dir_register+0x278>
c0004462:	83 f8 04             	cmp    eax,0x4
c0004465:	0f 85 f5 00 00 00    	jne    c0004560 <dir_register+0x278>
c000446b:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000446f:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004472:	b9 01 00 00 00       	mov    ecx,0x1
c0004477:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000447c:	74 0f                	je     c000448d <dir_register+0x1a5>
c000447e:	b9 0d 00 00 00       	mov    ecx,0xd
c0004483:	8d 47 0c             	lea    eax,[edi+0xc]
c0004486:	31 d2                	xor    edx,edx
c0004488:	f7 f1                	div    ecx
c000448a:	8d 48 01             	lea    ecx,[eax+0x1]
c000448d:	89 ca                	mov    edx,ecx
c000448f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004493:	89 d8                	mov    eax,ebx
c0004495:	e8 ad f6 ff ff       	call   c0003b47 <dir_alloc>
c000449a:	89 c6                	mov    esi,eax
c000449c:	85 c0                	test   eax,eax
c000449e:	0f 85 bc 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044a4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00044a8:	49                   	dec    ecx
c00044a9:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00044ad:	74 6a                	je     c0004519 <dir_register+0x231>
c00044af:	89 c8                	mov    eax,ecx
c00044b1:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00044b4:	c1 e0 05             	shl    eax,0x5
c00044b7:	29 c2                	sub    edx,eax
c00044b9:	89 d8                	mov    eax,ebx
c00044bb:	e8 fd ec ff ff       	call   c00031bd <dir_sdi>
c00044c0:	89 c6                	mov    esi,eax
c00044c2:	85 c0                	test   eax,eax
c00044c4:	0f 85 96 00 00 00    	jne    c0004560 <dir_register+0x278>
c00044ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044ce:	e8 4a dc ff ff       	call   c000211d <sum_sfn>
c00044d3:	0f b6 f8             	movzx  edi,al
c00044d6:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044d9:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044dc:	89 e8                	mov    eax,ebp
c00044de:	e8 5c df ff ff       	call   c000243f <move_window>
c00044e3:	89 c6                	mov    esi,eax
c00044e5:	85 c0                	test   eax,eax
c00044e7:	75 77                	jne    c0004560 <dir_register+0x278>
c00044e9:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044ee:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044f1:	83 ec 0c             	sub    esp,0xc
c00044f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044f7:	57                   	push   edi
c00044f8:	e8 e0 da ff ff       	call   c0001fdd <put_lfn>
c00044fd:	31 d2                	xor    edx,edx
c00044ff:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c0004503:	89 d8                	mov    eax,ebx
c0004505:	e8 0b f2 ff ff       	call   c0003715 <dir_next>
c000450a:	83 c4 10             	add    esp,0x10
c000450d:	89 c6                	mov    esi,eax
c000450f:	85 c0                	test   eax,eax
c0004511:	75 4d                	jne    c0004560 <dir_register+0x278>
c0004513:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0004517:	75 bd                	jne    c00044d6 <dir_register+0x1ee>
c0004519:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000451c:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000451f:	89 e8                	mov    eax,ebp
c0004521:	e8 19 df ff ff       	call   c000243f <move_window>
c0004526:	89 c6                	mov    esi,eax
c0004528:	85 c0                	test   eax,eax
c000452a:	75 34                	jne    c0004560 <dir_register+0x278>
c000452c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000452f:	b9 20 00 00 00       	mov    ecx,0x20
c0004534:	31 d2                	xor    edx,edx
c0004536:	e8 ba d7 ff ff       	call   c0001cf5 <mem_set>
c000453b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000453e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004542:	b9 0b 00 00 00       	mov    ecx,0xb
c0004547:	e8 94 d7 ff ff       	call   c0001ce0 <mem_cpy>
c000454c:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c000454f:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004552:	83 e0 18             	and    eax,0x18
c0004555:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004558:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000455c:	eb 02                	jmp    c0004560 <dir_register+0x278>
c000455e:	89 c6                	mov    esi,eax
c0004560:	83 c4 6c             	add    esp,0x6c
c0004563:	89 f0                	mov    eax,esi
c0004565:	5b                   	pop    ebx
c0004566:	5e                   	pop    esi
c0004567:	5f                   	pop    edi
c0004568:	5d                   	pop    ebp
c0004569:	c3                   	ret    

c000456a <sync_fs>:
c000456a:	56                   	push   esi
c000456b:	53                   	push   ebx
c000456c:	53                   	push   ebx
c000456d:	89 c3                	mov    ebx,eax
c000456f:	e8 37 de ff ff       	call   c00023ab <sync_window>
c0004574:	85 c0                	test   eax,eax
c0004576:	0f 85 b1 00 00 00    	jne    c000462d <sync_fs+0xc3>
c000457c:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c000457f:	0f 85 8e 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c0004585:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0004589:	0f 85 84 00 00 00    	jne    c0004613 <sync_fs+0xa9>
c000458f:	b9 00 02 00 00       	mov    ecx,0x200
c0004594:	8d 73 54             	lea    esi,[ebx+0x54]
c0004597:	31 d2                	xor    edx,edx
c0004599:	89 f0                	mov    eax,esi
c000459b:	e8 55 d7 ff ff       	call   c0001cf5 <mem_set>
c00045a0:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00045a6:	ba 55 aa 00 00       	mov    edx,0xaa55
c00045ab:	e8 23 d7 ff ff       	call   c0001cd3 <st_word>
c00045b0:	ba 52 52 61 41       	mov    edx,0x41615252
c00045b5:	89 f0                	mov    eax,esi
c00045b7:	e8 1b d7 ff ff       	call   c0001cd7 <st_dword>
c00045bc:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045c2:	ba 72 72 41 61       	mov    edx,0x61417272
c00045c7:	e8 0b d7 ff ff       	call   c0001cd7 <st_dword>
c00045cc:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045cf:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045d5:	e8 fd d6 ff ff       	call   c0001cd7 <st_dword>
c00045da:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045dd:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045e3:	e8 ef d6 ff ff       	call   c0001cd7 <st_dword>
c00045e8:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045eb:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045ee:	83 c0 01             	add    eax,0x1
c00045f1:	83 d2 00             	adc    edx,0x0
c00045f4:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045f7:	83 ec 0c             	sub    esp,0xc
c00045fa:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045fd:	6a 01                	push   0x1
c00045ff:	52                   	push   edx
c0004600:	50                   	push   eax
c0004601:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004605:	56                   	push   esi
c0004606:	50                   	push   eax
c0004607:	e8 20 d6 ff ff       	call   c0001c2c <disk_write>
c000460c:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0004610:	83 c4 20             	add    esp,0x20
c0004613:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0004617:	51                   	push   ecx
c0004618:	6a 00                	push   0x0
c000461a:	6a 00                	push   0x0
c000461c:	50                   	push   eax
c000461d:	e8 20 d6 ff ff       	call   c0001c42 <disk_ioctl>
c0004622:	83 c4 10             	add    esp,0x10
c0004625:	85 c0                	test   eax,eax
c0004627:	0f 95 c0             	setne  al
c000462a:	0f b6 c0             	movzx  eax,al
c000462d:	5a                   	pop    edx
c000462e:	5b                   	pop    ebx
c000462f:	5e                   	pop    esi
c0004630:	c3                   	ret    

c0004631 <create_partition>:
c0004631:	55                   	push   ebp
c0004632:	0f b6 c0             	movzx  eax,al
c0004635:	57                   	push   edi
c0004636:	56                   	push   esi
c0004637:	53                   	push   ebx
c0004638:	83 ec 60             	sub    esp,0x60
c000463b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000463f:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004643:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004647:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000464b:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c000464f:	50                   	push   eax
c0004650:	6a 01                	push   0x1
c0004652:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004656:	e8 e7 d5 ff ff       	call   c0001c42 <disk_ioctl>
c000465b:	83 c4 10             	add    esp,0x10
c000465e:	85 c0                	test   eax,eax
c0004660:	74 0a                	je     c000466c <create_partition+0x3b>
c0004662:	b8 01 00 00 00       	mov    eax,0x1
c0004667:	e9 67 05 00 00       	jmp    c0004bd3 <create_partition+0x5a2>
c000466c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004670:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004674:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004678:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000467c:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004681:	0f 86 ed 03 00 00    	jbe    c0004a74 <create_partition+0x443>
c0004687:	83 c0 df             	add    eax,0xffffffdf
c000468a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004692:	83 d2 ff             	adc    edx,0xffffffff
c0004695:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004699:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000469d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00046a1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00046a5:	83 c0 bd             	add    eax,0xffffffbd
c00046a8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00046af:	83 d2 ff             	adc    edx,0xffffffff
c00046b2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00046b6:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00046ba:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046c2:	be 22 00 00 00       	mov    esi,0x22
c00046c7:	31 ff                	xor    edi,edi
c00046c9:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046d1:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046d9:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046e5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046eb:	75 0e                	jne    c00046fb <create_partition+0xca>
c00046ed:	b9 00 02 00 00       	mov    ecx,0x200
c00046f2:	31 d2                	xor    edx,edx
c00046f4:	89 d8                	mov    eax,ebx
c00046f6:	e8 fa d5 ff ff       	call   c0001cf5 <mem_set>
c00046fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046ff:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0004703:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0004707:	0b 04 24             	or     eax,DWORD PTR [esp]
c000470a:	0f 84 23 01 00 00    	je     c0004833 <create_partition+0x202>
c0004710:	89 f0                	mov    eax,esi
c0004712:	89 fa                	mov    edx,edi
c0004714:	05 ff 07 00 00       	add    eax,0x7ff
c0004719:	83 d2 00             	adc    edx,0x0
c000471c:	89 c1                	mov    ecx,eax
c000471e:	89 d7                	mov    edi,edx
c0004720:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004726:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000472a:	89 ce                	mov    esi,ecx
c000472c:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004730:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004734:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004738:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000473b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000473f:	89 04 24             	mov    DWORD PTR [esp],eax
c0004742:	b8 64 00 00 00       	mov    eax,0x64
c0004747:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000474a:	b8 00 00 00 00       	mov    eax,0x0
c000474f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004753:	72 41                	jb     c0004796 <create_partition+0x165>
c0004755:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0004759:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000475d:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004761:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004766:	01 c1                	add    ecx,eax
c0004768:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000476c:	f7 24 24             	mul    DWORD PTR [esp]
c000476f:	6a 00                	push   0x0
c0004771:	01 ca                	add    edx,ecx
c0004773:	6a 64                	push   0x64
c0004775:	52                   	push   edx
c0004776:	50                   	push   eax
c0004777:	e8 70 1e 02 00       	call   c00265ec <__udivdi3>
c000477c:	83 c4 10             	add    esp,0x10
c000477f:	05 ff 07 00 00       	add    eax,0x7ff
c0004784:	83 d2 00             	adc    edx,0x0
c0004787:	89 c1                	mov    ecx,eax
c0004789:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000478d:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004793:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004796:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004799:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000479d:	01 f0                	add    eax,esi
c000479f:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00047a3:	11 fa                	adc    edx,edi
c00047a5:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c00047a9:	19 d1                	sbb    ecx,edx
c00047ab:	73 2e                	jae    c00047db <create_partition+0x1aa>
c00047ad:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c00047b1:	89 f8                	mov    eax,edi
c00047b3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00047ba:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c00047be:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047c6:	73 6b                	jae    c0004833 <create_partition+0x202>
c00047c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047cc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047d0:	29 f0                	sub    eax,esi
c00047d2:	19 fa                	sbb    edx,edi
c00047d4:	89 04 24             	mov    DWORD PTR [esp],eax
c00047d7:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047db:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047df:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047e2:	74 4f                	je     c0004833 <create_partition+0x202>
c00047e4:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047e7:	b9 10 00 00 00       	mov    ecx,0x10
c00047ec:	ba 90 90 02 c0       	mov    edx,0xc0029090
c00047f1:	e8 ea d4 ff ff       	call   c0001ce0 <mem_cpy>
c00047f6:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047fa:	b9 10 00 00 00       	mov    ecx,0x10
c00047ff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004803:	e8 2c db ff ff       	call   c0002334 <make_rand>
c0004808:	89 f2                	mov    edx,esi
c000480a:	89 f9                	mov    ecx,edi
c000480c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004810:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c0004814:	e8 c1 d4 ff ff       	call   c0001cda <st_qword>
c0004819:	03 34 24             	add    esi,DWORD PTR [esp]
c000481c:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004820:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004824:	89 f2                	mov    edx,esi
c0004826:	89 f9                	mov    ecx,edi
c0004828:	83 c2 ff             	add    edx,0xffffffff
c000482b:	83 d1 ff             	adc    ecx,0xffffffff
c000482e:	e8 a7 d4 ff ff       	call   c0001cda <st_qword>
c0004833:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004837:	83 e8 80             	sub    eax,0xffffff80
c000483a:	89 c5                	mov    ebp,eax
c000483c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004840:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004846:	75 6b                	jne    c00048b3 <create_partition+0x282>
c0004848:	45                   	inc    ebp
c0004849:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000484d:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004852:	e8 39 da ff ff       	call   c0002290 <crc32>
c0004857:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000485d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004861:	75 e5                	jne    c0004848 <create_partition+0x217>
c0004863:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004867:	31 d2                	xor    edx,edx
c0004869:	83 ec 0c             	sub    esp,0xc
c000486c:	c1 ed 09             	shr    ebp,0x9
c000486f:	6a 01                	push   0x1
c0004871:	8d 45 02             	lea    eax,[ebp+0x2]
c0004874:	52                   	push   edx
c0004875:	50                   	push   eax
c0004876:	53                   	push   ebx
c0004877:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000487b:	e8 ac d3 ff ff       	call   c0001c2c <disk_write>
c0004880:	83 c4 20             	add    esp,0x20
c0004883:	85 c0                	test   eax,eax
c0004885:	0f 85 d7 fd ff ff    	jne    c0004662 <create_partition+0x31>
c000488b:	83 ec 0c             	sub    esp,0xc
c000488e:	31 d2                	xor    edx,edx
c0004890:	6a 01                	push   0x1
c0004892:	89 e8                	mov    eax,ebp
c0004894:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004898:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000489c:	52                   	push   edx
c000489d:	50                   	push   eax
c000489e:	53                   	push   ebx
c000489f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00048a3:	e8 84 d3 ff ff       	call   c0001c2c <disk_write>
c00048a8:	83 c4 20             	add    esp,0x20
c00048ab:	85 c0                	test   eax,eax
c00048ad:	0f 85 af fd ff ff    	jne    c0004662 <create_partition+0x31>
c00048b3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00048b7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00048bb:	3d 00 40 00 00       	cmp    eax,0x4000
c00048c0:	74 0d                	je     c00048cf <create_partition+0x29e>
c00048c2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048c6:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ca:	e9 12 fe ff ff       	jmp    c00046e1 <create_partition+0xb0>
c00048cf:	31 d2                	xor    edx,edx
c00048d1:	b9 00 02 00 00       	mov    ecx,0x200
c00048d6:	89 d8                	mov    eax,ebx
c00048d8:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048db:	e8 15 d4 ff ff       	call   c0001cf5 <mem_set>
c00048e0:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048e3:	b9 10 00 00 00       	mov    ecx,0x10
c00048e8:	ba 80 8f 02 c0       	mov    edx,0xc0028f80
c00048ed:	89 d8                	mov    eax,ebx
c00048ef:	e8 ec d3 ff ff       	call   c0001ce0 <mem_cpy>
c00048f4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048f8:	8d 43 58             	lea    eax,[ebx+0x58]
c00048fb:	f7 d2                	not    edx
c00048fd:	e8 d5 d3 ff ff       	call   c0001cd7 <st_dword>
c0004902:	8d 43 18             	lea    eax,[ebx+0x18]
c0004905:	31 c9                	xor    ecx,ecx
c0004907:	89 04 24             	mov    DWORD PTR [esp],eax
c000490a:	ba 01 00 00 00       	mov    edx,0x1
c000490f:	e8 c6 d3 ff ff       	call   c0001cda <st_qword>
c0004914:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c0004918:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000491c:	83 c2 ff             	add    edx,0xffffffff
c000491f:	89 e8                	mov    eax,ebp
c0004921:	83 d1 ff             	adc    ecx,0xffffffff
c0004924:	e8 b1 d3 ff ff       	call   c0001cda <st_qword>
c0004929:	31 c9                	xor    ecx,ecx
c000492b:	8d 43 28             	lea    eax,[ebx+0x28]
c000492e:	ba 22 00 00 00       	mov    edx,0x22
c0004933:	e8 a2 d3 ff ff       	call   c0001cda <st_qword>
c0004938:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000493c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004940:	83 c2 de             	add    edx,0xffffffde
c0004943:	8d 43 30             	lea    eax,[ebx+0x30]
c0004946:	83 d1 ff             	adc    ecx,0xffffffff
c0004949:	31 f6                	xor    esi,esi
c000494b:	e8 8a d3 ff ff       	call   c0001cda <st_qword>
c0004950:	8d 43 54             	lea    eax,[ebx+0x54]
c0004953:	ba 80 00 00 00       	mov    edx,0x80
c0004958:	e8 7a d3 ff ff       	call   c0001cd7 <st_dword>
c000495d:	8d 43 50             	lea    eax,[ebx+0x50]
c0004960:	ba 80 00 00 00       	mov    edx,0x80
c0004965:	e8 6d d3 ff ff       	call   c0001cd7 <st_dword>
c000496a:	ba 02 00 00 00       	mov    edx,0x2
c000496f:	89 f8                	mov    eax,edi
c0004971:	e8 61 d3 ff ff       	call   c0001cd7 <st_dword>
c0004976:	8d 53 38             	lea    edx,[ebx+0x38]
c0004979:	b9 10 00 00 00       	mov    ecx,0x10
c000497e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004982:	e8 ad d9 ff ff       	call   c0002334 <make_rand>
c0004987:	83 c8 ff             	or     eax,0xffffffff
c000498a:	46                   	inc    esi
c000498b:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004990:	e8 fb d8 ff ff       	call   c0002290 <crc32>
c0004995:	83 fe 5c             	cmp    esi,0x5c
c0004998:	75 f0                	jne    c000498a <create_partition+0x359>
c000499a:	f7 d0                	not    eax
c000499c:	8d 73 10             	lea    esi,[ebx+0x10]
c000499f:	89 c2                	mov    edx,eax
c00049a1:	89 f0                	mov    eax,esi
c00049a3:	e8 2f d3 ff ff       	call   c0001cd7 <st_dword>
c00049a8:	83 ec 0c             	sub    esp,0xc
c00049ab:	6a 01                	push   0x1
c00049ad:	6a 00                	push   0x0
c00049af:	6a 01                	push   0x1
c00049b1:	53                   	push   ebx
c00049b2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00049b6:	e8 71 d2 ff ff       	call   c0001c2c <disk_write>
c00049bb:	83 c4 20             	add    esp,0x20
c00049be:	85 c0                	test   eax,eax
c00049c0:	0f 85 9c fc ff ff    	jne    c0004662 <create_partition+0x31>
c00049c6:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ca:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049ce:	83 c2 ff             	add    edx,0xffffffff
c00049d1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049d4:	83 d1 ff             	adc    ecx,0xffffffff
c00049d7:	e8 fe d2 ff ff       	call   c0001cda <st_qword>
c00049dc:	ba 01 00 00 00       	mov    edx,0x1
c00049e1:	31 c9                	xor    ecx,ecx
c00049e3:	89 e8                	mov    eax,ebp
c00049e5:	e8 f0 d2 ff ff       	call   c0001cda <st_qword>
c00049ea:	89 f8                	mov    eax,edi
c00049ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049f0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049f4:	31 ff                	xor    edi,edi
c00049f6:	e8 df d2 ff ff       	call   c0001cda <st_qword>
c00049fb:	89 f0                	mov    eax,esi
c00049fd:	31 d2                	xor    edx,edx
c00049ff:	e8 d3 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a04:	83 c8 ff             	or     eax,0xffffffff
c0004a07:	47                   	inc    edi
c0004a08:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c0004a0d:	e8 7e d8 ff ff       	call   c0002290 <crc32>
c0004a12:	83 ff 5c             	cmp    edi,0x5c
c0004a15:	75 f0                	jne    c0004a07 <create_partition+0x3d6>
c0004a17:	f7 d0                	not    eax
c0004a19:	89 c2                	mov    edx,eax
c0004a1b:	89 f0                	mov    eax,esi
c0004a1d:	e8 b5 d2 ff ff       	call   c0001cd7 <st_dword>
c0004a22:	83 ec 0c             	sub    esp,0xc
c0004a25:	6a 01                	push   0x1
c0004a27:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a2b:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a2f:	83 c0 ff             	add    eax,0xffffffff
c0004a32:	83 d2 ff             	adc    edx,0xffffffff
c0004a35:	52                   	push   edx
c0004a36:	50                   	push   eax
c0004a37:	53                   	push   ebx
c0004a38:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a3c:	e8 eb d1 ff ff       	call   c0001c2c <disk_write>
c0004a41:	83 c4 20             	add    esp,0x20
c0004a44:	85 c0                	test   eax,eax
c0004a46:	0f 85 16 fc ff ff    	jne    c0004662 <create_partition+0x31>
c0004a4c:	31 d2                	xor    edx,edx
c0004a4e:	89 d8                	mov    eax,ebx
c0004a50:	b9 00 02 00 00       	mov    ecx,0x200
c0004a55:	e8 9b d2 ff ff       	call   c0001cf5 <mem_set>
c0004a5a:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a60:	b9 10 00 00 00       	mov    ecx,0x10
c0004a65:	ba 90 8f 02 c0       	mov    edx,0xc0028f90
c0004a6a:	e8 71 d2 ff ff       	call   c0001ce0 <mem_cpy>
c0004a6f:	e9 21 01 00 00       	jmp    c0004b95 <create_partition+0x564>
c0004a74:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a78:	b9 05 00 00 00       	mov    ecx,0x5
c0004a7d:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a80:	bf 08 00 00 00       	mov    edi,0x8
c0004a85:	89 f8                	mov    eax,edi
c0004a87:	31 d2                	xor    edx,edx
c0004a89:	0f b6 f0             	movzx  esi,al
c0004a8c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a8f:	f7 f6                	div    esi
c0004a91:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a96:	76 0a                	jbe    c0004aa2 <create_partition+0x471>
c0004a98:	d1 e7                	shl    edi,1
c0004a9a:	49                   	dec    ecx
c0004a9b:	75 e8                	jne    c0004a85 <create_partition+0x454>
c0004a9d:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004aa2:	b9 00 02 00 00       	mov    ecx,0x200
c0004aa7:	31 d2                	xor    edx,edx
c0004aa9:	89 d8                	mov    eax,ebx
c0004aab:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004ab1:	e8 3f d2 ff ff       	call   c0001cf5 <mem_set>
c0004ab6:	b9 64 00 00 00       	mov    ecx,0x64
c0004abb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004abe:	31 d2                	xor    edx,edx
c0004ac0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004ac8:	f7 f1                	div    ecx
c0004aca:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004acf:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ad3:	89 f8                	mov    eax,edi
c0004ad5:	0f b6 c0             	movzx  eax,al
c0004ad8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004adc:	e9 80 00 00 00       	jmp    c0004b61 <create_partition+0x530>
c0004ae1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ae4:	29 cf                	sub    edi,ecx
c0004ae6:	89 ca                	mov    edx,ecx
c0004ae8:	89 f0                	mov    eax,esi
c0004aea:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004aef:	e8 e3 d1 ff ff       	call   c0001cd7 <st_dword>
c0004af4:	8d 46 04             	lea    eax,[esi+0x4]
c0004af7:	89 fa                	mov    edx,edi
c0004af9:	83 c6 10             	add    esi,0x10
c0004afc:	e8 d6 d1 ff ff       	call   c0001cd7 <st_dword>
c0004b01:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004b05:	31 d2                	xor    edx,edx
c0004b07:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004b0a:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004b0e:	89 c8                	mov    eax,ecx
c0004b10:	01 f9                	add    ecx,edi
c0004b12:	f7 f5                	div    ebp
c0004b14:	89 d5                	mov    ebp,edx
c0004b16:	31 d2                	xor    edx,edx
c0004b18:	45                   	inc    ebp
c0004b19:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b1d:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b20:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b23:	89 c2                	mov    edx,eax
c0004b25:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b28:	c1 ea 02             	shr    edx,0x2
c0004b2b:	83 e2 c0             	and    edx,0xffffffc0
c0004b2e:	09 ea                	or     edx,ebp
c0004b30:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b35:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b38:	31 d2                	xor    edx,edx
c0004b3a:	f7 f5                	div    ebp
c0004b3c:	89 d7                	mov    edi,edx
c0004b3e:	31 d2                	xor    edx,edx
c0004b40:	47                   	inc    edi
c0004b41:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b45:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b48:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b4b:	89 c5                	mov    ebp,eax
c0004b4d:	c1 ed 02             	shr    ebp,0x2
c0004b50:	83 e5 c0             	and    ebp,0xffffffc0
c0004b53:	09 ef                	or     edi,ebp
c0004b55:	89 fa                	mov    edx,edi
c0004b57:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b5a:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b5f:	74 34                	je     c0004b95 <create_partition+0x564>
c0004b61:	85 c9                	test   ecx,ecx
c0004b63:	74 30                	je     c0004b95 <create_partition+0x564>
c0004b65:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b68:	76 2b                	jbe    c0004b95 <create_partition+0x564>
c0004b6a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b6e:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b72:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b75:	83 ff 64             	cmp    edi,0x64
c0004b78:	76 4b                	jbe    c0004bc5 <create_partition+0x594>
c0004b7a:	89 f8                	mov    eax,edi
c0004b7c:	01 c8                	add    eax,ecx
c0004b7e:	0f 82 5d ff ff ff    	jb     c0004ae1 <create_partition+0x4b0>
c0004b84:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b87:	0f 87 54 ff ff ff    	ja     c0004ae1 <create_partition+0x4b0>
c0004b8d:	85 ff                	test   edi,edi
c0004b8f:	0f 85 51 ff ff ff    	jne    c0004ae6 <create_partition+0x4b5>
c0004b95:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b9b:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004ba0:	e8 2e d1 ff ff       	call   c0001cd3 <st_word>
c0004ba5:	83 ec 0c             	sub    esp,0xc
c0004ba8:	6a 01                	push   0x1
c0004baa:	6a 00                	push   0x0
c0004bac:	6a 00                	push   0x0
c0004bae:	53                   	push   ebx
c0004baf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004bb3:	e8 74 d0 ff ff       	call   c0001c2c <disk_write>
c0004bb8:	83 c4 20             	add    esp,0x20
c0004bbb:	85 c0                	test   eax,eax
c0004bbd:	0f 95 c0             	setne  al
c0004bc0:	0f b6 c0             	movzx  eax,al
c0004bc3:	eb 0e                	jmp    c0004bd3 <create_partition+0x5a2>
c0004bc5:	74 07                	je     c0004bce <create_partition+0x59d>
c0004bc7:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bcc:	eb ac                	jmp    c0004b7a <create_partition+0x549>
c0004bce:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bd1:	eb a7                	jmp    c0004b7a <create_partition+0x549>
c0004bd3:	83 c4 5c             	add    esp,0x5c
c0004bd6:	5b                   	pop    ebx
c0004bd7:	5e                   	pop    esi
c0004bd8:	5f                   	pop    edi
c0004bd9:	5d                   	pop    ebp
c0004bda:	c3                   	ret    

c0004bdb <get_fileinfo>:
c0004bdb:	55                   	push   ebp
c0004bdc:	57                   	push   edi
c0004bdd:	56                   	push   esi
c0004bde:	53                   	push   ebx
c0004bdf:	83 ec 1c             	sub    esp,0x1c
c0004be2:	8b 30                	mov    esi,DWORD PTR [eax]
c0004be4:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004be8:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bec:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bef:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bf2:	0f 84 dc 01 00 00    	je     c0004dd4 <get_fileinfo+0x1f9>
c0004bf8:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bfb:	75 0f                	jne    c0004c0c <get_fileinfo+0x31>
c0004bfd:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004c00:	83 c4 1c             	add    esp,0x1c
c0004c03:	5b                   	pop    ebx
c0004c04:	5e                   	pop    esi
c0004c05:	5f                   	pop    edi
c0004c06:	5d                   	pop    ebp
c0004c07:	e9 58 d5 ff ff       	jmp    c0002164 <get_xfileinfo>
c0004c0c:	89 d3                	mov    ebx,edx
c0004c0e:	89 c6                	mov    esi,eax
c0004c10:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004c14:	74 6a                	je     c0004c80 <get_fileinfo+0xa5>
c0004c16:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004c1e:	31 ed                	xor    ebp,ebp
c0004c20:	31 ff                	xor    edi,edi
c0004c22:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c26:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c2a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c2d:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c31:	66 85 d2             	test   dx,dx
c0004c34:	74 3e                	je     c0004c74 <get_fileinfo+0x99>
c0004c36:	66 85 ed             	test   bp,bp
c0004c39:	75 0c                	jne    c0004c47 <get_fileinfo+0x6c>
c0004c3b:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c41:	66 3d ff 07          	cmp    ax,0x7ff
c0004c45:	76 22                	jbe    c0004c69 <get_fileinfo+0x8e>
c0004c47:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c4c:	89 e8                	mov    eax,ebp
c0004c4e:	29 f9                	sub    ecx,edi
c0004c50:	c1 e0 10             	shl    eax,0x10
c0004c53:	09 d0                	or     eax,edx
c0004c55:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c59:	e8 a3 d1 ff ff       	call   c0001e01 <put_utf>
c0004c5e:	84 c0                	test   al,al
c0004c60:	74 10                	je     c0004c72 <get_fileinfo+0x97>
c0004c62:	0f b6 c0             	movzx  eax,al
c0004c65:	31 d2                	xor    edx,edx
c0004c67:	01 c7                	add    edi,eax
c0004c69:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c6e:	89 d5                	mov    ebp,edx
c0004c70:	eb b0                	jmp    c0004c22 <get_fileinfo+0x47>
c0004c72:	31 ff                	xor    edi,edi
c0004c74:	66 85 ed             	test   bp,bp
c0004c77:	74 02                	je     c0004c7b <get_fileinfo+0xa0>
c0004c79:	31 ff                	xor    edi,edi
c0004c7b:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c80:	31 ff                	xor    edi,edi
c0004c82:	31 c9                	xor    ecx,ecx
c0004c84:	83 f9 0a             	cmp    ecx,0xa
c0004c87:	0f 87 ad 00 00 00    	ja     c0004d3a <get_fileinfo+0x15f>
c0004c8d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c90:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c93:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c97:	66 83 fa 20          	cmp    dx,0x20
c0004c9b:	0f 84 92 00 00 00    	je     c0004d33 <get_fileinfo+0x158>
c0004ca1:	66 83 fa 05          	cmp    dx,0x5
c0004ca5:	75 05                	jne    c0004cac <get_fileinfo+0xd1>
c0004ca7:	ba e5 00 00 00       	mov    edx,0xe5
c0004cac:	83 ff 0b             	cmp    edi,0xb
c0004caf:	77 0b                	ja     c0004cbc <get_fileinfo+0xe1>
c0004cb1:	83 fd 09             	cmp    ebp,0x9
c0004cb4:	75 06                	jne    c0004cbc <get_fileinfo+0xe1>
c0004cb6:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004cbb:	47                   	inc    edi
c0004cbc:	0f b7 c2             	movzx  eax,dx
c0004cbf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004cc3:	e8 6d d0 ff ff       	call   c0001d35 <dbc_1st>
c0004cc8:	85 c0                	test   eax,eax
c0004cca:	74 2f                	je     c0004cfb <get_fileinfo+0x120>
c0004ccc:	83 fd 08             	cmp    ebp,0x8
c0004ccf:	74 2a                	je     c0004cfb <get_fileinfo+0x120>
c0004cd1:	83 fd 0b             	cmp    ebp,0xb
c0004cd4:	74 25                	je     c0004cfb <get_fileinfo+0x120>
c0004cd6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cd9:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cdd:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004ce1:	e8 52 d0 ff ff       	call   c0001d38 <dbc_2nd>
c0004ce6:	85 c0                	test   eax,eax
c0004ce8:	74 11                	je     c0004cfb <get_fileinfo+0x120>
c0004cea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004cee:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cf3:	c1 e2 08             	shl    edx,0x8
c0004cf6:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cf9:	09 c2                	or     edx,eax
c0004cfb:	0f b7 d2             	movzx  edx,dx
c0004cfe:	50                   	push   eax
c0004cff:	50                   	push   eax
c0004d00:	68 b5 01 00 00       	push   0x1b5
c0004d05:	52                   	push   edx
c0004d06:	e8 46 38 00 00       	call   c0008551 <ff_oem2uni>
c0004d0b:	83 c4 10             	add    esp,0x10
c0004d0e:	66 85 c0             	test   ax,ax
c0004d11:	75 04                	jne    c0004d17 <get_fileinfo+0x13c>
c0004d13:	31 ff                	xor    edi,edi
c0004d15:	eb 23                	jmp    c0004d3a <get_fileinfo+0x15f>
c0004d17:	b9 0c 00 00 00       	mov    ecx,0xc
c0004d1c:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d20:	29 f9                	sub    ecx,edi
c0004d22:	0f b7 c0             	movzx  eax,ax
c0004d25:	e8 d7 d0 ff ff       	call   c0001e01 <put_utf>
c0004d2a:	84 c0                	test   al,al
c0004d2c:	74 e5                	je     c0004d13 <get_fileinfo+0x138>
c0004d2e:	0f b6 c0             	movzx  eax,al
c0004d31:	01 c7                	add    edi,eax
c0004d33:	89 e9                	mov    ecx,ebp
c0004d35:	e9 4a ff ff ff       	jmp    c0004c84 <get_fileinfo+0xa9>
c0004d3a:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d3f:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d43:	75 54                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d45:	85 ff                	test   edi,edi
c0004d47:	75 0b                	jne    c0004d54 <get_fileinfo+0x179>
c0004d49:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d4d:	ba 01 00 00 00       	mov    edx,0x1
c0004d52:	eb 33                	jmp    c0004d87 <get_fileinfo+0x1ac>
c0004d54:	b1 08                	mov    cl,0x8
c0004d56:	31 d2                	xor    edx,edx
c0004d58:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d5e:	84 c0                	test   al,al
c0004d60:	74 25                	je     c0004d87 <get_fileinfo+0x1ac>
c0004d62:	66 83 f8 2e          	cmp    ax,0x2e
c0004d66:	74 16                	je     c0004d7e <get_fileinfo+0x1a3>
c0004d68:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d6b:	66 83 ff 19          	cmp    di,0x19
c0004d6f:	77 0f                	ja     c0004d80 <get_fileinfo+0x1a5>
c0004d71:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d74:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d77:	74 07                	je     c0004d80 <get_fileinfo+0x1a5>
c0004d79:	83 c0 20             	add    eax,0x20
c0004d7c:	eb 02                	jmp    c0004d80 <get_fileinfo+0x1a5>
c0004d7e:	b1 10                	mov    cl,0x10
c0004d80:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d84:	42                   	inc    edx
c0004d85:	eb d1                	jmp    c0004d58 <get_fileinfo+0x17d>
c0004d87:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d8c:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d8f:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d93:	75 04                	jne    c0004d99 <get_fileinfo+0x1be>
c0004d95:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d99:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9c:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d9f:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004da2:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da5:	83 c0 1c             	add    eax,0x1c
c0004da8:	e8 c1 ce ff ff       	call   c0001c6e <ld_dword>
c0004dad:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004db4:	89 03                	mov    DWORD PTR [ebx],eax
c0004db6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004db9:	83 c0 16             	add    eax,0x16
c0004dbc:	e8 a0 ce ff ff       	call   c0001c61 <ld_word>
c0004dc1:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004dc5:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004dc8:	83 c0 18             	add    eax,0x18
c0004dcb:	e8 91 ce ff ff       	call   c0001c61 <ld_word>
c0004dd0:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004dd4:	83 c4 1c             	add    esp,0x1c
c0004dd7:	5b                   	pop    ebx
c0004dd8:	5e                   	pop    esi
c0004dd9:	5f                   	pop    edi
c0004dda:	5d                   	pop    ebp
c0004ddb:	c3                   	ret    

c0004ddc <ld_clust.isra.0>:
c0004ddc:	56                   	push   esi
c0004ddd:	89 c6                	mov    esi,eax
c0004ddf:	53                   	push   ebx
c0004de0:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004de3:	89 d3                	mov    ebx,edx
c0004de5:	e8 77 ce ff ff       	call   c0001c61 <ld_word>
c0004dea:	0f b7 c8             	movzx  ecx,ax
c0004ded:	89 f0                	mov    eax,esi
c0004def:	3c 03                	cmp    al,0x3
c0004df1:	75 0d                	jne    c0004e00 <ld_clust.isra.0+0x24>
c0004df3:	8d 43 14             	lea    eax,[ebx+0x14]
c0004df6:	e8 66 ce ff ff       	call   c0001c61 <ld_word>
c0004dfb:	c1 e0 10             	shl    eax,0x10
c0004dfe:	09 c1                	or     ecx,eax
c0004e00:	89 c8                	mov    eax,ecx
c0004e02:	5b                   	pop    ebx
c0004e03:	5e                   	pop    esi
c0004e04:	c3                   	ret    

c0004e05 <st_clust.isra.1>:
c0004e05:	56                   	push   esi
c0004e06:	89 c6                	mov    esi,eax
c0004e08:	53                   	push   ebx
c0004e09:	89 d3                	mov    ebx,edx
c0004e0b:	0f b7 d1             	movzx  edx,cx
c0004e0e:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004e11:	e8 bd ce ff ff       	call   c0001cd3 <st_word>
c0004e16:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004e19:	75 0f                	jne    c0004e2a <st_clust.isra.1+0x25>
c0004e1b:	c1 e9 10             	shr    ecx,0x10
c0004e1e:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e21:	89 ca                	mov    edx,ecx
c0004e23:	5b                   	pop    ebx
c0004e24:	5e                   	pop    esi
c0004e25:	e9 a9 ce ff ff       	jmp    c0001cd3 <st_word>
c0004e2a:	5b                   	pop    ebx
c0004e2b:	5e                   	pop    esi
c0004e2c:	c3                   	ret    

c0004e2d <init_alloc_info.isra.2>:
c0004e2d:	56                   	push   esi
c0004e2e:	53                   	push   ebx
c0004e2f:	89 c6                	mov    esi,eax
c0004e31:	89 d3                	mov    ebx,edx
c0004e33:	51                   	push   ecx
c0004e34:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e36:	83 c0 34             	add    eax,0x34
c0004e39:	e8 30 ce ff ff       	call   c0001c6e <ld_dword>
c0004e3e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e41:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e43:	83 c0 38             	add    eax,0x38
c0004e46:	e8 3b ce ff ff       	call   c0001c86 <ld_qword>
c0004e4b:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e4e:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e51:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e53:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e56:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e5d:	83 e0 02             	and    eax,0x2
c0004e60:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e63:	5b                   	pop    ebx
c0004e64:	5b                   	pop    ebx
c0004e65:	5e                   	pop    esi
c0004e66:	c3                   	ret    

c0004e67 <follow_path>:
c0004e67:	56                   	push   esi
c0004e68:	53                   	push   ebx
c0004e69:	89 c3                	mov    ebx,eax
c0004e6b:	83 ec 14             	sub    esp,0x14
c0004e6e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e72:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e74:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e78:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e7a:	80 fa 5c             	cmp    dl,0x5c
c0004e7d:	75 07                	jne    c0004e86 <follow_path+0x1f>
c0004e7f:	40                   	inc    eax
c0004e80:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e84:	eb ee                	jmp    c0004e74 <follow_path+0xd>
c0004e86:	80 fa 2f             	cmp    dl,0x2f
c0004e89:	74 f4                	je     c0004e7f <follow_path+0x18>
c0004e8b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e92:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e99:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e9c:	77 52                	ja     c0004ef0 <follow_path+0x89>
c0004e9e:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004ea2:	31 d2                	xor    edx,edx
c0004ea4:	89 d8                	mov    eax,ebx
c0004ea6:	e8 12 e3 ff ff       	call   c00031bd <dir_sdi>
c0004eab:	eb 7c                	jmp    c0004f29 <follow_path+0xc2>
c0004ead:	89 d8                	mov    eax,ebx
c0004eaf:	e8 6e f2 ff ff       	call   c0004122 <dir_find>
c0004eb4:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004eb7:	85 c0                	test   eax,eax
c0004eb9:	75 46                	jne    c0004f01 <follow_path+0x9a>
c0004ebb:	80 e2 04             	and    dl,0x4
c0004ebe:	75 69                	jne    c0004f29 <follow_path+0xc2>
c0004ec0:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ec4:	74 5e                	je     c0004f24 <follow_path+0xbd>
c0004ec6:	8a 06                	mov    al,BYTE PTR [esi]
c0004ec8:	3c 04                	cmp    al,0x4
c0004eca:	75 41                	jne    c0004f0d <follow_path+0xa6>
c0004ecc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004ecf:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004ed3:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004ed6:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004ed9:	30 c0                	xor    al,al
c0004edb:	09 d0                	or     eax,edx
c0004edd:	89 da                	mov    edx,ebx
c0004edf:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ee2:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ee5:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ee8:	8d 46 10             	lea    eax,[esi+0x10]
c0004eeb:	e8 3d ff ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0004ef0:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ef4:	89 d8                	mov    eax,ebx
c0004ef6:	e8 a9 ed ff ff       	call   c0003ca4 <create_name>
c0004efb:	85 c0                	test   eax,eax
c0004efd:	74 ae                	je     c0004ead <follow_path+0x46>
c0004eff:	eb 28                	jmp    c0004f29 <follow_path+0xc2>
c0004f01:	83 f8 04             	cmp    eax,0x4
c0004f04:	75 23                	jne    c0004f29 <follow_path+0xc2>
c0004f06:	80 e2 04             	and    dl,0x4
c0004f09:	74 19                	je     c0004f24 <follow_path+0xbd>
c0004f0b:	eb 1c                	jmp    c0004f29 <follow_path+0xc2>
c0004f0d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004f10:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004f16:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004f1a:	e8 bd fe ff ff       	call   c0004ddc <ld_clust.isra.0>
c0004f1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f22:	eb cc                	jmp    c0004ef0 <follow_path+0x89>
c0004f24:	b8 05 00 00 00       	mov    eax,0x5
c0004f29:	83 c4 14             	add    esp,0x14
c0004f2c:	5b                   	pop    ebx
c0004f2d:	5e                   	pop    esi
c0004f2e:	c3                   	ret    

c0004f2f <f_mount>:
c0004f2f:	53                   	push   ebx
c0004f30:	83 ec 18             	sub    esp,0x18
c0004f33:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f37:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f3b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f3f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f43:	e8 fb d2 ff ff       	call   c0002243 <get_ldnumber>
c0004f48:	89 c2                	mov    edx,eax
c0004f4a:	b8 0b 00 00 00       	mov    eax,0xb
c0004f4f:	85 d2                	test   edx,edx
c0004f51:	78 39                	js     c0004f8c <f_mount+0x5d>
c0004f53:	8b 04 95 a0 df 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd2060]
c0004f5a:	85 c0                	test   eax,eax
c0004f5c:	74 03                	je     c0004f61 <f_mount+0x32>
c0004f5e:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f65:	85 c0                	test   eax,eax
c0004f67:	74 03                	je     c0004f6c <f_mount+0x3d>
c0004f69:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f6c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f70:	89 04 95 a0 df 02 c0 	mov    DWORD PTR [edx*4-0x3ffd2060],eax
c0004f77:	31 c0                	xor    eax,eax
c0004f79:	84 db                	test   bl,bl
c0004f7b:	74 0f                	je     c0004f8c <f_mount+0x5d>
c0004f7d:	31 c9                	xor    ecx,ecx
c0004f7f:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f83:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f87:	e8 65 d7 ff ff       	call   c00026f1 <mount_volume>
c0004f8c:	83 c4 18             	add    esp,0x18
c0004f8f:	5b                   	pop    ebx
c0004f90:	c3                   	ret    

c0004f91 <f_open>:
c0004f91:	55                   	push   ebp
c0004f92:	bd 09 00 00 00       	mov    ebp,0x9
c0004f97:	57                   	push   edi
c0004f98:	56                   	push   esi
c0004f99:	53                   	push   ebx
c0004f9a:	83 ec 7c             	sub    esp,0x7c
c0004f9d:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004fa4:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004fab:	85 db                	test   ebx,ebx
c0004fad:	0f 84 10 04 00 00    	je     c00053c3 <f_open+0x432>
c0004fb3:	89 fe                	mov    esi,edi
c0004fb5:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004fb9:	83 e6 3f             	and    esi,0x3f
c0004fbc:	89 f0                	mov    eax,esi
c0004fbe:	0f b6 c8             	movzx  ecx,al
c0004fc1:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fc8:	e8 24 d7 ff ff       	call   c00026f1 <mount_volume>
c0004fcd:	89 c5                	mov    ebp,eax
c0004fcf:	85 c0                	test   eax,eax
c0004fd1:	0f 85 e6 03 00 00    	jne    c00053bd <f_open+0x42c>
c0004fd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fdb:	bd 11 00 00 00       	mov    ebp,0x11
c0004fe0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fe4:	83 ec 0c             	sub    esp,0xc
c0004fe7:	68 60 04 00 00       	push   0x460
c0004fec:	e8 a3 34 00 00       	call   c0008494 <ff_memalloc>
c0004ff1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ff5:	83 c4 10             	add    esp,0x10
c0004ff8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004ffd:	0f 84 c0 03 00 00    	je     c00053c3 <f_open+0x432>
c0005003:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005007:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000500b:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0005011:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0005014:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0005017:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c000501e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005022:	e8 40 fe ff ff       	call   c0004e67 <follow_path>
c0005027:	89 c5                	mov    ebp,eax
c0005029:	85 c0                	test   eax,eax
c000502b:	75 0c                	jne    c0005039 <f_open+0xa8>
c000502d:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005032:	79 05                	jns    c0005039 <f_open+0xa8>
c0005034:	bd 06 00 00 00       	mov    ebp,0x6
c0005039:	f7 c7 1c 00 00 00    	test   edi,0x1c
c000503f:	0f 84 84 01 00 00    	je     c00051c9 <f_open+0x238>
c0005045:	85 ed                	test   ebp,ebp
c0005047:	74 20                	je     c0005069 <f_open+0xd8>
c0005049:	83 fd 04             	cmp    ebp,0x4
c000504c:	0f 85 58 03 00 00    	jne    c00053aa <f_open+0x419>
c0005052:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005056:	83 ce 08             	or     esi,0x8
c0005059:	e8 8a f2 ff ff       	call   c00042e8 <dir_register>
c000505e:	89 c5                	mov    ebp,eax
c0005060:	85 c0                	test   eax,eax
c0005062:	74 2f                	je     c0005093 <f_open+0x102>
c0005064:	e9 41 03 00 00       	jmp    c00053aa <f_open+0x419>
c0005069:	bd 07 00 00 00       	mov    ebp,0x7
c000506e:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005073:	0f 85 31 03 00 00    	jne    c00053aa <f_open+0x419>
c0005079:	bd 08 00 00 00       	mov    ebp,0x8
c000507e:	f7 c7 04 00 00 00    	test   edi,0x4
c0005084:	0f 85 20 03 00 00    	jne    c00053aa <f_open+0x419>
c000508a:	83 e7 08             	and    edi,0x8
c000508d:	0f 84 65 01 00 00    	je     c00051f8 <f_open+0x267>
c0005093:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005097:	8a 02                	mov    al,BYTE PTR [edx]
c0005099:	3c 04                	cmp    al,0x4
c000509b:	0f 85 97 00 00 00    	jne    c0005138 <f_open+0x1a7>
c00050a1:	8d 42 10             	lea    eax,[edx+0x10]
c00050a4:	89 13                	mov    DWORD PTR [ebx],edx
c00050a6:	89 da                	mov    edx,ebx
c00050a8:	e8 80 fd ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c00050ad:	31 d2                	xor    edx,edx
c00050af:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050b3:	b9 1e 00 00 00       	mov    ecx,0x1e
c00050b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050bb:	83 c0 02             	add    eax,0x2
c00050be:	e8 32 cc ff ff       	call   c0001cf5 <mem_set>
c00050c3:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050c8:	31 d2                	xor    edx,edx
c00050ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050d1:	83 c0 26             	add    eax,0x26
c00050d4:	e8 1c cc ff ff       	call   c0001cf5 <mem_set>
c00050d9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050e0:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050e4:	ba 00 00 21 50       	mov    edx,0x50210000
c00050e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050ec:	83 c0 08             	add    eax,0x8
c00050ef:	e8 e3 cb ff ff       	call   c0001cd7 <st_dword>
c00050f4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050fb:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050ff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005103:	e8 b7 ea ff ff       	call   c0003bbf <store_xdir>
c0005108:	89 c5                	mov    ebp,eax
c000510a:	85 c0                	test   eax,eax
c000510c:	0f 85 98 02 00 00    	jne    c00053aa <f_open+0x419>
c0005112:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0005115:	85 d2                	test   edx,edx
c0005117:	0f 84 db 00 00 00    	je     c00051f8 <f_open+0x267>
c000511d:	31 c9                	xor    ecx,ecx
c000511f:	89 d8                	mov    eax,ebx
c0005121:	e8 8e e3 ff ff       	call   c00034b4 <remove_chain>
c0005126:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000512a:	89 c5                	mov    ebp,eax
c000512c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000512f:	48                   	dec    eax
c0005130:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005133:	e9 b8 00 00 00       	jmp    c00051f0 <f_open+0x25f>
c0005138:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000513c:	89 ea                	mov    edx,ebp
c000513e:	e8 99 fc ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005143:	ba 00 00 21 50       	mov    edx,0x50210000
c0005148:	89 c7                	mov    edi,eax
c000514a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000514d:	e8 85 cb ff ff       	call   c0001cd7 <st_dword>
c0005152:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005156:	31 c9                	xor    ecx,ecx
c0005158:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000515c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005160:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005164:	e8 9c fc ff ff       	call   c0004e05 <st_clust.isra.1>
c0005169:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000516d:	31 d2                	xor    edx,edx
c000516f:	83 c0 1c             	add    eax,0x1c
c0005172:	e8 60 cb ff ff       	call   c0001cd7 <st_dword>
c0005177:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000517b:	85 ff                	test   edi,edi
c000517d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005181:	74 75                	je     c00051f8 <f_open+0x267>
c0005183:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005187:	31 c9                	xor    ecx,ecx
c0005189:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000518c:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c000518f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005193:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005197:	89 fa                	mov    edx,edi
c0005199:	8d 44 24 24          	lea    eax,[esp+0x24]
c000519d:	e8 12 e3 ff ff       	call   c00034b4 <remove_chain>
c00051a2:	89 c5                	mov    ebp,eax
c00051a4:	85 c0                	test   eax,eax
c00051a6:	0f 85 fe 01 00 00    	jne    c00053aa <f_open+0x419>
c00051ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00051b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00051b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051b8:	4f                   	dec    edi
c00051b9:	e8 81 d2 ff ff       	call   c000243f <move_window>
c00051be:	89 c5                	mov    ebp,eax
c00051c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051c4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051c7:	eb 27                	jmp    c00051f0 <f_open+0x25f>
c00051c9:	85 ed                	test   ebp,ebp
c00051cb:	0f 85 d9 01 00 00    	jne    c00053aa <f_open+0x419>
c00051d1:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051d5:	bd 04 00 00 00       	mov    ebp,0x4
c00051da:	a8 10                	test   al,0x10
c00051dc:	0f 85 c8 01 00 00    	jne    c00053aa <f_open+0x419>
c00051e2:	83 e7 02             	and    edi,0x2
c00051e5:	74 11                	je     c00051f8 <f_open+0x267>
c00051e7:	bd 07 00 00 00       	mov    ebp,0x7
c00051ec:	a8 01                	test   al,0x1
c00051ee:	eb 02                	jmp    c00051f2 <f_open+0x261>
c00051f0:	85 ed                	test   ebp,ebp
c00051f2:	0f 85 b2 01 00 00    	jne    c00053aa <f_open+0x419>
c00051f8:	f7 c6 08 00 00 00    	test   esi,0x8
c00051fe:	74 03                	je     c0005203 <f_open+0x272>
c0005200:	83 ce 40             	or     esi,0x40
c0005203:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005207:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c000520a:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c000520d:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c0005210:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c0005213:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0005217:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c000521a:	8a 02                	mov    al,BYTE PTR [edx]
c000521c:	3c 04                	cmp    al,0x4
c000521e:	75 2a                	jne    c000524a <f_open+0x2b9>
c0005220:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005224:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c0005229:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000522c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005230:	30 c0                	xor    al,al
c0005232:	09 c8                	or     eax,ecx
c0005234:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005237:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000523b:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000523e:	8d 42 10             	lea    eax,[edx+0x10]
c0005241:	89 da                	mov    edx,ebx
c0005243:	e8 e5 fb ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0005248:	eb 1c                	jmp    c0005266 <f_open+0x2d5>
c000524a:	89 fa                	mov    edx,edi
c000524c:	e8 8b fb ff ff       	call   c0004ddc <ld_clust.isra.0>
c0005251:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005254:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005257:	e8 12 ca ff ff       	call   c0001c6e <ld_dword>
c000525c:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005263:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005266:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000526a:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005271:	89 03                	mov    DWORD PTR [ebx],eax
c0005273:	31 d2                	xor    edx,edx
c0005275:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0005279:	b9 00 02 00 00       	mov    ecx,0x200
c000527e:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005282:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005286:	89 f0                	mov    eax,esi
c0005288:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000528f:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005292:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c0005299:	8d 43 50             	lea    eax,[ebx+0x50]
c000529c:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c00052a3:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c00052aa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00052ae:	e8 42 ca ff ff       	call   c0001cf5 <mem_set>
c00052b3:	83 e6 20             	and    esi,0x20
c00052b6:	75 07                	jne    c00052bf <f_open+0x32e>
c00052b8:	31 ed                	xor    ebp,ebp
c00052ba:	e9 eb 00 00 00       	jmp    c00053aa <f_open+0x419>
c00052bf:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052c2:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052c5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052cd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052d1:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052d5:	74 e1                	je     c00052b8 <f_open+0x327>
c00052d7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052db:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052df:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052e2:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052e5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052e9:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052ec:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052f0:	31 ff                	xor    edi,edi
c00052f2:	c1 e5 09             	shl    ebp,0x9
c00052f5:	89 ee                	mov    esi,ebp
c00052f7:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052fb:	89 f8                	mov    eax,edi
c00052fd:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005301:	73 22                	jae    c0005325 <f_open+0x394>
c0005303:	89 d8                	mov    eax,ebx
c0005305:	e8 bd dc ff ff       	call   c0002fc7 <get_fat>
c000530a:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c000530e:	89 c2                	mov    edx,eax
c0005310:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c0005314:	83 f8 01             	cmp    eax,0x1
c0005317:	76 10                	jbe    c0005329 <f_open+0x398>
c0005319:	83 f8 ff             	cmp    eax,0xffffffff
c000531c:	75 d9                	jne    c00052f7 <f_open+0x366>
c000531e:	bd 01 00 00 00       	mov    ebp,0x1
c0005323:	eb 09                	jmp    c000532e <f_open+0x39d>
c0005325:	31 ed                	xor    ebp,ebp
c0005327:	eb 05                	jmp    c000532e <f_open+0x39d>
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005331:	85 ed                	test   ebp,ebp
c0005333:	75 75                	jne    c00053aa <f_open+0x419>
c0005335:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005339:	25 ff 01 00 00       	and    eax,0x1ff
c000533e:	0f 84 74 ff ff ff    	je     c00052b8 <f_open+0x327>
c0005344:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005348:	bd 02 00 00 00       	mov    ebp,0x2
c000534d:	89 c8                	mov    eax,ecx
c000534f:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005353:	e8 a2 cb ff ff       	call   c0001efa <clst2sect>
c0005358:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000535c:	89 d7                	mov    edi,edx
c000535e:	09 c7                	or     edi,eax
c0005360:	74 48                	je     c00053aa <f_open+0x419>
c0005362:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005366:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000536a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005372:	0f ac fe 09          	shrd   esi,edi,0x9
c0005376:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000537a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000537e:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005381:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005385:	83 ec 0c             	sub    esp,0xc
c0005388:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000538b:	6a 01                	push   0x1
c000538d:	52                   	push   edx
c000538e:	50                   	push   eax
c000538f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005393:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005397:	50                   	push   eax
c0005398:	e8 79 c8 ff ff       	call   c0001c16 <disk_read>
c000539d:	83 c4 20             	add    esp,0x20
c00053a0:	85 c0                	test   eax,eax
c00053a2:	0f 95 c0             	setne  al
c00053a5:	0f b6 c0             	movzx  eax,al
c00053a8:	89 c5                	mov    ebp,eax
c00053aa:	83 ec 0c             	sub    esp,0xc
c00053ad:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00053b1:	e8 f4 30 00 00       	call   c00084aa <ff_memfree>
c00053b6:	83 c4 10             	add    esp,0x10
c00053b9:	85 ed                	test   ebp,ebp
c00053bb:	74 06                	je     c00053c3 <f_open+0x432>
c00053bd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053c3:	83 c4 7c             	add    esp,0x7c
c00053c6:	89 e8                	mov    eax,ebp
c00053c8:	5b                   	pop    ebx
c00053c9:	5e                   	pop    esi
c00053ca:	5f                   	pop    edi
c00053cb:	5d                   	pop    ebp
c00053cc:	c3                   	ret    

c00053cd <f_read>:
c00053cd:	55                   	push   ebp
c00053ce:	57                   	push   edi
c00053cf:	56                   	push   esi
c00053d0:	53                   	push   ebx
c00053d1:	83 ec 2c             	sub    esp,0x2c
c00053d4:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053d8:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053dc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053e2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053e6:	89 d8                	mov    eax,ebx
c00053e8:	e8 77 cf ff ff       	call   c0002364 <validate>
c00053ed:	89 c5                	mov    ebp,eax
c00053ef:	85 c0                	test   eax,eax
c00053f1:	0f 85 4c 02 00 00    	jne    c0005643 <f_read+0x276>
c00053f7:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053fb:	85 ed                	test   ebp,ebp
c00053fd:	0f 85 40 02 00 00    	jne    c0005643 <f_read+0x276>
c0005403:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c0005407:	0f 84 31 02 00 00    	je     c000563e <f_read+0x271>
c000540d:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005410:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005413:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c0005416:	bf 00 00 00 00       	mov    edi,0x0
c000541b:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c000541e:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005422:	89 d1                	mov    ecx,edx
c0005424:	19 f9                	sbb    ecx,edi
c0005426:	0f 83 cf 00 00 00    	jae    c00054fb <f_read+0x12e>
c000542c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005430:	e9 c6 00 00 00       	jmp    c00054fb <f_read+0x12e>
c0005435:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005438:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000543b:	89 d0                	mov    eax,edx
c000543d:	25 ff 01 00 00       	and    eax,0x1ff
c0005442:	0f 85 c9 01 00 00    	jne    c0005611 <f_read+0x244>
c0005448:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000544c:	89 d6                	mov    esi,edx
c000544e:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005452:	89 cf                	mov    edi,ecx
c0005454:	48                   	dec    eax
c0005455:	0f ac fe 09          	shrd   esi,edi,0x9
c0005459:	21 f0                	and    eax,esi
c000545b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000545f:	0f 84 a6 00 00 00    	je     c000550b <f_read+0x13e>
c0005465:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005469:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000546c:	89 c8                	mov    eax,ecx
c000546e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005471:	e8 84 ca ff ff       	call   c0001efa <clst2sect>
c0005476:	89 d7                	mov    edi,edx
c0005478:	09 c7                	or     edi,eax
c000547a:	0f 84 b4 00 00 00    	je     c0005534 <f_read+0x167>
c0005480:	31 ff                	xor    edi,edi
c0005482:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005486:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005489:	01 c6                	add    esi,eax
c000548b:	11 d7                	adc    edi,edx
c000548d:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005495:	0f 86 fd 00 00 00    	jbe    c0005598 <f_read+0x1cb>
c000549b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000549f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00054a3:	c1 e8 09             	shr    eax,0x9
c00054a6:	89 04 24             	mov    DWORD PTR [esp],eax
c00054a9:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00054ad:	03 14 24             	add    edx,DWORD PTR [esp]
c00054b0:	39 c2                	cmp    edx,eax
c00054b2:	76 07                	jbe    c00054bb <f_read+0xee>
c00054b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00054b8:	89 04 24             	mov    DWORD PTR [esp],eax
c00054bb:	83 ec 0c             	sub    esp,0xc
c00054be:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054c2:	57                   	push   edi
c00054c3:	56                   	push   esi
c00054c4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054c8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054cc:	50                   	push   eax
c00054cd:	e8 44 c7 ff ff       	call   c0001c16 <disk_read>
c00054d2:	83 c4 20             	add    esp,0x20
c00054d5:	85 c0                	test   eax,eax
c00054d7:	75 6e                	jne    c0005547 <f_read+0x17a>
c00054d9:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054dd:	78 7e                	js     c000555d <f_read+0x190>
c00054df:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054e2:	c1 e6 09             	shl    esi,0x9
c00054e5:	31 ff                	xor    edi,edi
c00054e7:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054eb:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054ef:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054f3:	01 30                	add    DWORD PTR [eax],esi
c00054f5:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054f8:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054fb:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0005500:	0f 85 2f ff ff ff    	jne    c0005435 <f_read+0x68>
c0005506:	e9 38 01 00 00       	jmp    c0005643 <f_read+0x276>
c000550b:	89 c8                	mov    eax,ecx
c000550d:	09 d0                	or     eax,edx
c000550f:	75 05                	jne    c0005516 <f_read+0x149>
c0005511:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005514:	eb 19                	jmp    c000552f <f_read+0x162>
c0005516:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c000551a:	74 09                	je     c0005525 <f_read+0x158>
c000551c:	89 d8                	mov    eax,ebx
c000551e:	e8 f8 c9 ff ff       	call   c0001f1b <clmt_clust>
c0005523:	eb 0a                	jmp    c000552f <f_read+0x162>
c0005525:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005528:	89 d8                	mov    eax,ebx
c000552a:	e8 98 da ff ff       	call   c0002fc7 <get_fat>
c000552f:	83 f8 01             	cmp    eax,0x1
c0005532:	77 0e                	ja     c0005542 <f_read+0x175>
c0005534:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005538:	bd 02 00 00 00       	mov    ebp,0x2
c000553d:	e9 01 01 00 00       	jmp    c0005643 <f_read+0x276>
c0005542:	83 f8 ff             	cmp    eax,0xffffffff
c0005545:	75 0e                	jne    c0005555 <f_read+0x188>
c0005547:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000554b:	bd 01 00 00 00       	mov    ebp,0x1
c0005550:	e9 ee 00 00 00       	jmp    c0005643 <f_read+0x276>
c0005555:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005558:	e9 08 ff ff ff       	jmp    c0005465 <f_read+0x98>
c000555d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005560:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005563:	29 f0                	sub    eax,esi
c0005565:	19 fa                	sbb    edx,edi
c0005567:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000556a:	89 d7                	mov    edi,edx
c000556c:	ba 00 00 00 00       	mov    edx,0x0
c0005571:	89 f9                	mov    ecx,edi
c0005573:	19 d1                	sbb    ecx,edx
c0005575:	0f 83 64 ff ff ff    	jae    c00054df <f_read+0x112>
c000557b:	89 c7                	mov    edi,eax
c000557d:	8d 53 50             	lea    edx,[ebx+0x50]
c0005580:	c1 e7 09             	shl    edi,0x9
c0005583:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005587:	b9 00 02 00 00       	mov    ecx,0x200
c000558c:	01 f8                	add    eax,edi
c000558e:	e8 4d c7 ff ff       	call   c0001ce0 <mem_cpy>
c0005593:	e9 47 ff ff ff       	jmp    c00054df <f_read+0x112>
c0005598:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000559b:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000559e:	89 04 24             	mov    DWORD PTR [esp],eax
c00055a1:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00055a5:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c00055a9:	75 05                	jne    c00055b0 <f_read+0x1e3>
c00055ab:	39 34 24             	cmp    DWORD PTR [esp],esi
c00055ae:	74 5b                	je     c000560b <f_read+0x23e>
c00055b0:	8d 43 50             	lea    eax,[ebx+0x50]
c00055b3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00055b7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00055bb:	79 2a                	jns    c00055e7 <f_read+0x21a>
c00055bd:	83 ec 0c             	sub    esp,0xc
c00055c0:	6a 01                	push   0x1
c00055c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055ce:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055d2:	50                   	push   eax
c00055d3:	e8 54 c6 ff ff       	call   c0001c2c <disk_write>
c00055d8:	83 c4 20             	add    esp,0x20
c00055db:	85 c0                	test   eax,eax
c00055dd:	0f 85 64 ff ff ff    	jne    c0005547 <f_read+0x17a>
c00055e3:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055e7:	83 ec 0c             	sub    esp,0xc
c00055ea:	6a 01                	push   0x1
c00055ec:	57                   	push   edi
c00055ed:	56                   	push   esi
c00055ee:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055f2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055f6:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055fa:	50                   	push   eax
c00055fb:	e8 16 c6 ff ff       	call   c0001c16 <disk_read>
c0005600:	83 c4 20             	add    esp,0x20
c0005603:	85 c0                	test   eax,eax
c0005605:	0f 85 3c ff ff ff    	jne    c0005547 <f_read+0x17a>
c000560b:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000560e:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005611:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005614:	ba 00 02 00 00       	mov    edx,0x200
c0005619:	25 ff 01 00 00       	and    eax,0x1ff
c000561e:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005622:	29 c2                	sub    edx,eax
c0005624:	39 d6                	cmp    esi,edx
c0005626:	76 02                	jbe    c000562a <f_read+0x25d>
c0005628:	89 d6                	mov    esi,edx
c000562a:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000562e:	89 f1                	mov    ecx,esi
c0005630:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005634:	e8 a7 c6 ff ff       	call   c0001ce0 <mem_cpy>
c0005639:	e9 a7 fe ff ff       	jmp    c00054e5 <f_read+0x118>
c000563e:	bd 07 00 00 00       	mov    ebp,0x7
c0005643:	83 c4 2c             	add    esp,0x2c
c0005646:	89 e8                	mov    eax,ebp
c0005648:	5b                   	pop    ebx
c0005649:	5e                   	pop    esi
c000564a:	5f                   	pop    edi
c000564b:	5d                   	pop    ebp
c000564c:	c3                   	ret    

c000564d <f_write>:
c000564d:	55                   	push   ebp
c000564e:	57                   	push   edi
c000564f:	56                   	push   esi
c0005650:	53                   	push   ebx
c0005651:	83 ec 2c             	sub    esp,0x2c
c0005654:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005658:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000565c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005662:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005666:	89 d8                	mov    eax,ebx
c0005668:	e8 f7 cc ff ff       	call   c0002364 <validate>
c000566d:	89 c5                	mov    ebp,eax
c000566f:	85 c0                	test   eax,eax
c0005671:	0f 85 86 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005677:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000567b:	85 ed                	test   ebp,ebp
c000567d:	0f 85 7a 02 00 00    	jne    c00058fd <f_write+0x2b0>
c0005683:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005687:	0f 84 6b 02 00 00    	je     c00058f8 <f_write+0x2ab>
c000568d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005691:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005694:	0f 84 43 01 00 00    	je     c00057dd <f_write+0x190>
c000569a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000569d:	89 c1                	mov    ecx,eax
c000569f:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00056a3:	0f 83 34 01 00 00    	jae    c00057dd <f_write+0x190>
c00056a9:	f7 d0                	not    eax
c00056ab:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00056af:	e9 29 01 00 00       	jmp    c00057dd <f_write+0x190>
c00056b4:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00056b7:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c00056ba:	89 d0                	mov    eax,edx
c00056bc:	25 ff 01 00 00       	and    eax,0x1ff
c00056c1:	0f 85 00 02 00 00    	jne    c00058c7 <f_write+0x27a>
c00056c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056cb:	89 d6                	mov    esi,edx
c00056cd:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056d1:	89 cf                	mov    edi,ecx
c00056d3:	48                   	dec    eax
c00056d4:	0f ac fe 09          	shrd   esi,edi,0x9
c00056d8:	21 f0                	and    eax,esi
c00056da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056de:	0f 84 06 01 00 00    	je     c00057ea <f_write+0x19d>
c00056e4:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056e8:	0f 88 6e 01 00 00    	js     c000585c <f_write+0x20f>
c00056ee:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056f2:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056f5:	89 c8                	mov    eax,ecx
c00056f7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056fb:	e8 fa c7 ff ff       	call   c0001efa <clst2sect>
c0005700:	89 d1                	mov    ecx,edx
c0005702:	09 c1                	or     ecx,eax
c0005704:	0f 84 1c 01 00 00    	je     c0005826 <f_write+0x1d9>
c000570a:	31 ff                	xor    edi,edi
c000570c:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005710:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0005714:	01 c6                	add    esi,eax
c0005716:	11 d7                	adc    edi,edx
c0005718:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005720:	0f 86 63 01 00 00    	jbe    c0005889 <f_write+0x23c>
c0005726:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000572a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000572e:	c1 e8 09             	shr    eax,0x9
c0005731:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005735:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0005739:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000573d:	39 c2                	cmp    edx,eax
c000573f:	76 08                	jbe    c0005749 <f_write+0xfc>
c0005741:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005745:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005749:	83 ec 0c             	sub    esp,0xc
c000574c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005750:	57                   	push   edi
c0005751:	56                   	push   esi
c0005752:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005756:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000575a:	50                   	push   eax
c000575b:	e8 cc c4 ff ff       	call   c0001c2c <disk_write>
c0005760:	83 c4 20             	add    esp,0x20
c0005763:	85 c0                	test   eax,eax
c0005765:	0f 85 ce 00 00 00    	jne    c0005839 <f_write+0x1ec>
c000576b:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000576e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005771:	29 f0                	sub    eax,esi
c0005773:	19 fa                	sbb    edx,edi
c0005775:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0005779:	89 d7                	mov    edi,edx
c000577b:	ba 00 00 00 00       	mov    edx,0x0
c0005780:	89 f9                	mov    ecx,edi
c0005782:	19 d1                	sbb    ecx,edx
c0005784:	73 1c                	jae    c00057a2 <f_write+0x155>
c0005786:	89 c7                	mov    edi,eax
c0005788:	b9 00 02 00 00       	mov    ecx,0x200
c000578d:	c1 e7 09             	shl    edi,0x9
c0005790:	8d 43 50             	lea    eax,[ebx+0x50]
c0005793:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005797:	89 fa                	mov    edx,edi
c0005799:	e8 42 c5 ff ff       	call   c0001ce0 <mem_cpy>
c000579e:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00057a2:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00057a6:	c1 e6 09             	shl    esi,0x9
c00057a9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00057ad:	31 ff                	xor    edi,edi
c00057af:	01 30                	add    DWORD PTR [eax],esi
c00057b1:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00057b5:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00057b9:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00057bc:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057bf:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057c2:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057c5:	89 c1                	mov    ecx,eax
c00057c7:	39 f2                	cmp    edx,esi
c00057c9:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057cc:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057cf:	19 f9                	sbb    ecx,edi
c00057d1:	73 04                	jae    c00057d7 <f_write+0x18a>
c00057d3:	89 f2                	mov    edx,esi
c00057d5:	89 f8                	mov    eax,edi
c00057d7:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057da:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057dd:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057e2:	0f 85 cc fe ff ff    	jne    c00056b4 <f_write+0x67>
c00057e8:	eb 2e                	jmp    c0005818 <f_write+0x1cb>
c00057ea:	89 c8                	mov    eax,ecx
c00057ec:	09 d0                	or     eax,edx
c00057ee:	75 0b                	jne    c00057fb <f_write+0x1ae>
c00057f0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057f3:	31 d2                	xor    edx,edx
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 28                	jne    c0005821 <f_write+0x1d4>
c00057f9:	eb 12                	jmp    c000580d <f_write+0x1c0>
c00057fb:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057ff:	74 09                	je     c000580a <f_write+0x1bd>
c0005801:	89 d8                	mov    eax,ebx
c0005803:	e8 13 c7 ff ff       	call   c0001f1b <clmt_clust>
c0005808:	eb 0a                	jmp    c0005814 <f_write+0x1c7>
c000580a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000580d:	89 d8                	mov    eax,ebx
c000580f:	e8 a1 da ff ff       	call   c00032b5 <create_chain>
c0005814:	85 c0                	test   eax,eax
c0005816:	75 09                	jne    c0005821 <f_write+0x1d4>
c0005818:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c000581c:	e9 dc 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005821:	83 f8 01             	cmp    eax,0x1
c0005824:	75 0e                	jne    c0005834 <f_write+0x1e7>
c0005826:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000582a:	bd 02 00 00 00       	mov    ebp,0x2
c000582f:	e9 c9 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005834:	83 f8 ff             	cmp    eax,0xffffffff
c0005837:	75 0e                	jne    c0005847 <f_write+0x1fa>
c0005839:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000583d:	bd 01 00 00 00       	mov    ebp,0x1
c0005842:	e9 b6 00 00 00       	jmp    c00058fd <f_write+0x2b0>
c0005847:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000584a:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000584e:	0f 85 90 fe ff ff    	jne    c00056e4 <f_write+0x97>
c0005854:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005857:	e9 88 fe ff ff       	jmp    c00056e4 <f_write+0x97>
c000585c:	83 ec 0c             	sub    esp,0xc
c000585f:	8d 43 50             	lea    eax,[ebx+0x50]
c0005862:	6a 01                	push   0x1
c0005864:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005867:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000586a:	50                   	push   eax
c000586b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000586f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005873:	50                   	push   eax
c0005874:	e8 b3 c3 ff ff       	call   c0001c2c <disk_write>
c0005879:	83 c4 20             	add    esp,0x20
c000587c:	85 c0                	test   eax,eax
c000587e:	75 b9                	jne    c0005839 <f_write+0x1ec>
c0005880:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005884:	e9 65 fe ff ff       	jmp    c00056ee <f_write+0xa1>
c0005889:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000588c:	75 05                	jne    c0005893 <f_write+0x246>
c000588e:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005891:	74 2e                	je     c00058c1 <f_write+0x274>
c0005893:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005896:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005899:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000589c:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c000589f:	73 20                	jae    c00058c1 <f_write+0x274>
c00058a1:	83 ec 0c             	sub    esp,0xc
c00058a4:	8d 43 50             	lea    eax,[ebx+0x50]
c00058a7:	6a 01                	push   0x1
c00058a9:	57                   	push   edi
c00058aa:	56                   	push   esi
c00058ab:	50                   	push   eax
c00058ac:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00058b0:	50                   	push   eax
c00058b1:	e8 60 c3 ff ff       	call   c0001c16 <disk_read>
c00058b6:	83 c4 20             	add    esp,0x20
c00058b9:	85 c0                	test   eax,eax
c00058bb:	0f 85 78 ff ff ff    	jne    c0005839 <f_write+0x1ec>
c00058c1:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058c4:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058c7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ca:	ba 00 02 00 00       	mov    edx,0x200
c00058cf:	25 ff 01 00 00       	and    eax,0x1ff
c00058d4:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058d8:	29 c2                	sub    edx,eax
c00058da:	39 d6                	cmp    esi,edx
c00058dc:	76 02                	jbe    c00058e0 <f_write+0x293>
c00058de:	89 d6                	mov    esi,edx
c00058e0:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058e4:	89 f1                	mov    ecx,esi
c00058e6:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058ea:	e8 f1 c3 ff ff       	call   c0001ce0 <mem_cpy>
c00058ef:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058f3:	e9 b1 fe ff ff       	jmp    c00057a9 <f_write+0x15c>
c00058f8:	bd 07 00 00 00       	mov    ebp,0x7
c00058fd:	83 c4 2c             	add    esp,0x2c
c0005900:	89 e8                	mov    eax,ebp
c0005902:	5b                   	pop    ebx
c0005903:	5e                   	pop    esi
c0005904:	5f                   	pop    edi
c0005905:	5d                   	pop    ebp
c0005906:	c3                   	ret    

c0005907 <f_sync>:
c0005907:	56                   	push   esi
c0005908:	53                   	push   ebx
c0005909:	83 ec 64             	sub    esp,0x64
c000590c:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0005910:	8d 54 24 10          	lea    edx,[esp+0x10]
c0005914:	89 d8                	mov    eax,ebx
c0005916:	e8 49 ca ff ff       	call   c0002364 <validate>
c000591b:	85 c0                	test   eax,eax
c000591d:	0f 85 ba 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005923:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005926:	f6 c2 40             	test   dl,0x40
c0005929:	0f 84 ae 01 00 00    	je     c0005add <f_sync+0x1d6>
c000592f:	84 d2                	test   dl,dl
c0005931:	79 33                	jns    c0005966 <f_sync+0x5f>
c0005933:	83 ec 0c             	sub    esp,0xc
c0005936:	8d 43 50             	lea    eax,[ebx+0x50]
c0005939:	6a 01                	push   0x1
c000593b:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000593e:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005941:	50                   	push   eax
c0005942:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005946:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000594a:	50                   	push   eax
c000594b:	e8 dc c2 ff ff       	call   c0001c2c <disk_write>
c0005950:	83 c4 20             	add    esp,0x20
c0005953:	89 c2                	mov    edx,eax
c0005955:	b8 01 00 00 00       	mov    eax,0x1
c000595a:	85 d2                	test   edx,edx
c000595c:	0f 85 7b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005962:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005966:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000596a:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000596d:	0f 85 11 01 00 00    	jne    c0005a84 <f_sync+0x17d>
c0005973:	89 d8                	mov    eax,ebx
c0005975:	e8 13 d6 ff ff       	call   c0002f8d <fill_first_frag>
c000597a:	85 c0                	test   eax,eax
c000597c:	0f 85 5b 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005982:	83 c9 ff             	or     ecx,0xffffffff
c0005985:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005988:	89 d8                	mov    eax,ebx
c000598a:	e8 c9 d5 ff ff       	call   c0002f58 <fill_last_frag>
c000598f:	85 c0                	test   eax,eax
c0005991:	0f 85 46 01 00 00    	jne    c0005add <f_sync+0x1d6>
c0005997:	83 ec 0c             	sub    esp,0xc
c000599a:	68 60 04 00 00       	push   0x460
c000599f:	e8 f0 2a 00 00       	call   c0008494 <ff_memalloc>
c00059a4:	83 c4 10             	add    esp,0x10
c00059a7:	89 c6                	mov    esi,eax
c00059a9:	b8 11 00 00 00       	mov    eax,0x11
c00059ae:	85 f6                	test   esi,esi
c00059b0:	0f 84 27 01 00 00    	je     c0005add <f_sync+0x1d6>
c00059b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059ba:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059c0:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059c3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059c6:	89 da                	mov    edx,ebx
c00059c8:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059cc:	e8 af df ff ff       	call   c0003980 <load_obj_xdir>
c00059d1:	85 c0                	test   eax,eax
c00059d3:	0f 85 95 00 00 00    	jne    c0005a6e <f_sync+0x167>
c00059d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059dd:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059e0:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059e4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059e7:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059ea:	83 ca 01             	or     edx,0x1
c00059ed:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059f0:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059f3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059f6:	83 c0 34             	add    eax,0x34
c00059f9:	e8 d9 c2 ff ff       	call   c0001cd7 <st_dword>
c00059fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a02:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a05:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a08:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a0b:	83 c0 38             	add    eax,0x38
c0005a0e:	e8 c7 c2 ff ff       	call   c0001cda <st_qword>
c0005a13:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005a16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a1a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a1d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a20:	83 c0 28             	add    eax,0x28
c0005a23:	e8 b2 c2 ff ff       	call   c0001cda <st_qword>
c0005a28:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a2c:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a31:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a34:	83 c0 0c             	add    eax,0xc
c0005a37:	e8 9b c2 ff ff       	call   c0001cd7 <st_dword>
c0005a3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a40:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a43:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a47:	31 d2                	xor    edx,edx
c0005a49:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a4c:	83 c0 10             	add    eax,0x10
c0005a4f:	e8 83 c2 ff ff       	call   c0001cd7 <st_dword>
c0005a54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a58:	e8 62 e1 ff ff       	call   c0003bbf <store_xdir>
c0005a5d:	85 c0                	test   eax,eax
c0005a5f:	75 0d                	jne    c0005a6e <f_sync+0x167>
c0005a61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a65:	e8 00 eb ff ff       	call   c000456a <sync_fs>
c0005a6a:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a72:	83 ec 0c             	sub    esp,0xc
c0005a75:	56                   	push   esi
c0005a76:	e8 2f 2a 00 00       	call   c00084aa <ff_memfree>
c0005a7b:	83 c4 10             	add    esp,0x10
c0005a7e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a82:	eb 59                	jmp    c0005add <f_sync+0x1d6>
c0005a84:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a87:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a8a:	e8 b0 c9 ff ff       	call   c000243f <move_window>
c0005a8f:	85 c0                	test   eax,eax
c0005a91:	75 4a                	jne    c0005add <f_sync+0x1d6>
c0005a93:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a96:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a9a:	89 f2                	mov    edx,esi
c0005a9c:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a9f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005aa1:	e8 5f f3 ff ff       	call   c0004e05 <st_clust.isra.1>
c0005aa6:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005aa9:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005aac:	e8 26 c2 ff ff       	call   c0001cd7 <st_dword>
c0005ab1:	8d 46 16             	lea    eax,[esi+0x16]
c0005ab4:	ba 00 00 21 50       	mov    edx,0x50210000
c0005ab9:	e8 19 c2 ff ff       	call   c0001cd7 <st_dword>
c0005abe:	8d 46 12             	lea    eax,[esi+0x12]
c0005ac1:	31 d2                	xor    edx,edx
c0005ac3:	e8 0b c2 ff ff       	call   c0001cd3 <st_word>
c0005ac8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005acc:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ad0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ad4:	e8 91 ea ff ff       	call   c000456a <sync_fs>
c0005ad9:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005add:	83 c4 64             	add    esp,0x64
c0005ae0:	5b                   	pop    ebx
c0005ae1:	5e                   	pop    esi
c0005ae2:	c3                   	ret    

c0005ae3 <f_close>:
c0005ae3:	53                   	push   ebx
c0005ae4:	83 ec 24             	sub    esp,0x24
c0005ae7:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005aeb:	53                   	push   ebx
c0005aec:	e8 16 fe ff ff       	call   c0005907 <f_sync>
c0005af1:	83 c4 10             	add    esp,0x10
c0005af4:	85 c0                	test   eax,eax
c0005af6:	75 15                	jne    c0005b0d <f_close+0x2a>
c0005af8:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005afc:	89 d8                	mov    eax,ebx
c0005afe:	e8 61 c8 ff ff       	call   c0002364 <validate>
c0005b03:	85 c0                	test   eax,eax
c0005b05:	75 06                	jne    c0005b0d <f_close+0x2a>
c0005b07:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005b0d:	83 c4 18             	add    esp,0x18
c0005b10:	5b                   	pop    ebx
c0005b11:	c3                   	ret    

c0005b12 <f_lseek>:
c0005b12:	55                   	push   ebp
c0005b13:	57                   	push   edi
c0005b14:	56                   	push   esi
c0005b15:	53                   	push   ebx
c0005b16:	83 ec 3c             	sub    esp,0x3c
c0005b19:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005b1d:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b21:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b25:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b28:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b2c:	89 d8                	mov    eax,ebx
c0005b2e:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b32:	e8 2d c8 ff ff       	call   c0002364 <validate>
c0005b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	0f 85 7a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b43:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b47:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b4b:	85 c0                	test   eax,eax
c0005b4d:	0f 85 6a 04 00 00    	jne    c0005fbd <f_lseek+0x4ab>
c0005b53:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b57:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b5a:	74 0c                	je     c0005b68 <f_lseek+0x56>
c0005b5c:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b5f:	85 c0                	test   eax,eax
c0005b61:	75 1f                	jne    c0005b82 <f_lseek+0x70>
c0005b63:	e9 b5 01 00 00       	jmp    c0005d1d <f_lseek+0x20b>
c0005b68:	83 c9 ff             	or     ecx,0xffffffff
c0005b6b:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b6e:	89 d8                	mov    eax,ebx
c0005b70:	e8 e3 d3 ff ff       	call   c0002f58 <fill_last_frag>
c0005b75:	85 c0                	test   eax,eax
c0005b77:	74 e3                	je     c0005b5c <f_lseek+0x4a>
c0005b79:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b7d:	e9 3b 04 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005b82:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b87:	0f 85 ac 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b8d:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b91:	0f 85 a2 00 00 00    	jne    c0005c39 <f_lseek+0x127>
c0005b97:	8d 78 04             	lea    edi,[eax+0x4]
c0005b9a:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b9d:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b9f:	be 02 00 00 00       	mov    esi,0x2
c0005ba4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005ba8:	85 ed                	test   ebp,ebp
c0005baa:	74 73                	je     c0005c1f <f_lseek+0x10d>
c0005bac:	89 e9                	mov    ecx,ebp
c0005bae:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005bb5:	ff 04 24             	inc    DWORD PTR [esp]
c0005bb8:	89 ca                	mov    edx,ecx
c0005bba:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005bbe:	89 d8                	mov    eax,ebx
c0005bc0:	e8 02 d4 ff ff       	call   c0002fc7 <get_fat>
c0005bc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005bc9:	83 f8 01             	cmp    eax,0x1
c0005bcc:	77 11                	ja     c0005bdf <f_lseek+0xcd>
c0005bce:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bd2:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bda:	e9 de 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bdf:	83 f8 ff             	cmp    eax,0xffffffff
c0005be2:	75 11                	jne    c0005bf5 <f_lseek+0xe3>
c0005be4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005be8:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bf0:	e9 c8 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005bf5:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bf8:	89 c1                	mov    ecx,eax
c0005bfa:	39 c2                	cmp    edx,eax
c0005bfc:	74 b7                	je     c0005bb5 <f_lseek+0xa3>
c0005bfe:	83 c6 02             	add    esi,0x2
c0005c01:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005c05:	72 0b                	jb     c0005c12 <f_lseek+0x100>
c0005c07:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005c0a:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005c0d:	89 0f                	mov    DWORD PTR [edi],ecx
c0005c0f:	83 c7 08             	add    edi,0x8
c0005c12:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005c16:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005c19:	76 04                	jbe    c0005c1f <f_lseek+0x10d>
c0005c1b:	89 c5                	mov    ebp,eax
c0005c1d:	eb 8d                	jmp    c0005bac <f_lseek+0x9a>
c0005c1f:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c22:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c26:	89 30                	mov    DWORD PTR [eax],esi
c0005c28:	0f 87 87 03 00 00    	ja     c0005fb5 <f_lseek+0x4a3>
c0005c2e:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c34:	e9 84 03 00 00       	jmp    c0005fbd <f_lseek+0x4ab>
c0005c39:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c3c:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c47:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4b:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c52:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c56:	73 0f                	jae    c0005c67 <f_lseek+0x155>
c0005c58:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c5b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c63:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c67:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c6b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c6f:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c72:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c75:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c79:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c7d:	0f 84 3a 03 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005c83:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c87:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c8b:	83 c6 ff             	add    esi,0xffffffff
c0005c8e:	89 d8                	mov    eax,ebx
c0005c90:	83 d7 ff             	adc    edi,0xffffffff
c0005c93:	89 f2                	mov    edx,esi
c0005c95:	89 f9                	mov    ecx,edi
c0005c97:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c9e:	e8 78 c2 ff ff       	call   c0001f1b <clmt_clust>
c0005ca3:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005ca7:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005caa:	89 c2                	mov    edx,eax
c0005cac:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005cb0:	89 c8                	mov    eax,ecx
c0005cb2:	e8 43 c2 ff ff       	call   c0001efa <clst2sect>
c0005cb7:	89 d7                	mov    edi,edx
c0005cb9:	09 c7                	or     edi,eax
c0005cbb:	0f 84 0d ff ff ff    	je     c0005bce <f_lseek+0xbc>
c0005cc1:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005cc5:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005ccb:	0f 84 ec 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cd1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cd5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cd9:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cdc:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005ce0:	0f ac fe 09          	shrd   esi,edi,0x9
c0005ce4:	4d                   	dec    ebp
c0005ce5:	31 ff                	xor    edi,edi
c0005ce7:	21 ee                	and    esi,ebp
c0005ce9:	01 c6                	add    esi,eax
c0005ceb:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005cee:	11 d7                	adc    edi,edx
c0005cf0:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cf3:	39 fa                	cmp    edx,edi
c0005cf5:	75 08                	jne    c0005cff <f_lseek+0x1ed>
c0005cf7:	39 f0                	cmp    eax,esi
c0005cf9:	0f 84 be 02 00 00    	je     c0005fbd <f_lseek+0x4ab>
c0005cff:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005d02:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005d06:	0f 89 80 02 00 00    	jns    c0005f8c <f_lseek+0x47a>
c0005d0c:	83 ec 0c             	sub    esp,0xc
c0005d0f:	6a 01                	push   0x1
c0005d11:	52                   	push   edx
c0005d12:	50                   	push   eax
c0005d13:	55                   	push   ebp
c0005d14:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005d18:	e9 5a 02 00 00       	jmp    c0005f77 <f_lseek+0x465>
c0005d1d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d21:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d24:	74 16                	je     c0005d3c <f_lseek+0x22a>
c0005d26:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d2b:	76 0f                	jbe    c0005d3c <f_lseek+0x22a>
c0005d2d:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d34:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d3c:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d3f:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d42:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d45:	89 c7                	mov    edi,eax
c0005d47:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d4b:	73 0d                	jae    c0005d5a <f_lseek+0x248>
c0005d4d:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d51:	75 07                	jne    c0005d5a <f_lseek+0x248>
c0005d53:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d5a:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d5d:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d60:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d64:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d6b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d72:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d75:	75 09                	jne    c0005d80 <f_lseek+0x26e>
c0005d77:	31 f6                	xor    esi,esi
c0005d79:	31 ff                	xor    edi,edi
c0005d7b:	e9 af 01 00 00       	jmp    c0005f2f <f_lseek+0x41d>
c0005d80:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d84:	89 d7                	mov    edi,edx
c0005d86:	c1 e1 09             	shl    ecx,0x9
c0005d89:	09 c7                	or     edi,eax
c0005d8b:	89 cd                	mov    ebp,ecx
c0005d8d:	74 6d                	je     c0005dfc <f_lseek+0x2ea>
c0005d8f:	83 c0 ff             	add    eax,0xffffffff
c0005d92:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d96:	83 d2 ff             	adc    edx,0xffffffff
c0005d99:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d9c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005da0:	83 c0 ff             	add    eax,0xffffffff
c0005da3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005da7:	83 d2 ff             	adc    edx,0xffffffff
c0005daa:	31 ff                	xor    edi,edi
c0005dac:	57                   	push   edi
c0005dad:	51                   	push   ecx
c0005dae:	52                   	push   edx
c0005daf:	50                   	push   eax
c0005db0:	e8 37 08 02 00       	call   c00265ec <__udivdi3>
c0005db5:	83 c4 10             	add    esp,0x10
c0005db8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005dbc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005dc0:	57                   	push   edi
c0005dc1:	55                   	push   ebp
c0005dc2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dc6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dca:	e8 1d 08 02 00       	call   c00265ec <__udivdi3>
c0005dcf:	83 c4 10             	add    esp,0x10
c0005dd2:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005dd6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dda:	19 d1                	sbb    ecx,edx
c0005ddc:	72 1e                	jb     c0005dfc <f_lseek+0x2ea>
c0005dde:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005de2:	89 e9                	mov    ecx,ebp
c0005de4:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005de7:	f7 d9                	neg    ecx
c0005de9:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dec:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005df0:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005df3:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005df6:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005dfa:	eb 28                	jmp    c0005e24 <f_lseek+0x312>
c0005dfc:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005dff:	85 c0                	test   eax,eax
c0005e01:	75 1e                	jne    c0005e21 <f_lseek+0x30f>
c0005e03:	31 d2                	xor    edx,edx
c0005e05:	89 d8                	mov    eax,ebx
c0005e07:	e8 a9 d4 ff ff       	call   c00032b5 <create_chain>
c0005e0c:	83 f8 01             	cmp    eax,0x1
c0005e0f:	0f 84 b9 fd ff ff    	je     c0005bce <f_lseek+0xbc>
c0005e15:	83 f8 ff             	cmp    eax,0xffffffff
c0005e18:	0f 84 c6 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005e1e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e21:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e24:	85 c0                	test   eax,eax
c0005e26:	0f 84 4b ff ff ff    	je     c0005d77 <f_lseek+0x265>
c0005e2c:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e30:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e38:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e3b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e3f:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e42:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e45:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e49:	0f 83 9d 00 00 00    	jae    c0005eec <f_lseek+0x3da>
c0005e4f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e53:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e57:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e5a:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e5e:	01 f2                	add    edx,esi
c0005e60:	11 f9                	adc    ecx,edi
c0005e62:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e66:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e6a:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e6d:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e70:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e73:	f6 c1 02             	test   cl,0x2
c0005e76:	74 35                	je     c0005ead <f_lseek+0x39b>
c0005e78:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e7c:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e7f:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e82:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e86:	73 16                	jae    c0005e9e <f_lseek+0x38c>
c0005e88:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e8c:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e90:	88 ca                	mov    dl,cl
c0005e92:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e95:	83 ca 40             	or     edx,0x40
c0005e98:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e9b:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e9e:	89 c2                	mov    edx,eax
c0005ea0:	89 d8                	mov    eax,ebx
c0005ea2:	e8 0e d4 ff ff       	call   c00032b5 <create_chain>
c0005ea7:	85 c0                	test   eax,eax
c0005ea9:	75 0b                	jne    c0005eb6 <f_lseek+0x3a4>
c0005eab:	eb 30                	jmp    c0005edd <f_lseek+0x3cb>
c0005ead:	89 c2                	mov    edx,eax
c0005eaf:	89 d8                	mov    eax,ebx
c0005eb1:	e8 11 d1 ff ff       	call   c0002fc7 <get_fat>
c0005eb6:	83 f8 ff             	cmp    eax,0xffffffff
c0005eb9:	0f 84 25 fd ff ff    	je     c0005be4 <f_lseek+0xd2>
c0005ebf:	83 f8 01             	cmp    eax,0x1
c0005ec2:	0f 86 06 fd ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ec8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ecc:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005ecf:	0f 86 f9 fc ff ff    	jbe    c0005bce <f_lseek+0xbc>
c0005ed5:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005ed8:	e9 5b ff ff ff       	jmp    c0005e38 <f_lseek+0x326>
c0005edd:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ee4:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005eec:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005eef:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ef3:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ef6:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005ef9:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005efc:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005f02:	0f 84 6f fe ff ff    	je     c0005d77 <f_lseek+0x265>
c0005f08:	89 c2                	mov    edx,eax
c0005f0a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005f0e:	e8 e7 bf ff ff       	call   c0001efa <clst2sect>
c0005f13:	89 d7                	mov    edi,edx
c0005f15:	09 c7                	or     edi,eax
c0005f17:	0f 84 b1 fc ff ff    	je     c0005bce <f_lseek+0xbc>
c0005f1d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f21:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f24:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f28:	c1 ef 09             	shr    edi,0x9
c0005f2b:	01 c6                	add    esi,eax
c0005f2d:	11 d7                	adc    edi,edx
c0005f2f:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f32:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f35:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f38:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f3b:	19 d1                	sbb    ecx,edx
c0005f3d:	73 0a                	jae    c0005f49 <f_lseek+0x437>
c0005f3f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f42:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f45:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f49:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f4e:	74 6d                	je     c0005fbd <f_lseek+0x4ab>
c0005f50:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f53:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f56:	39 fa                	cmp    edx,edi
c0005f58:	75 04                	jne    c0005f5e <f_lseek+0x44c>
c0005f5a:	39 f0                	cmp    eax,esi
c0005f5c:	74 5f                	je     c0005fbd <f_lseek+0x4ab>
c0005f5e:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f61:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f65:	79 25                	jns    c0005f8c <f_lseek+0x47a>
c0005f67:	83 ec 0c             	sub    esp,0xc
c0005f6a:	6a 01                	push   0x1
c0005f6c:	52                   	push   edx
c0005f6d:	50                   	push   eax
c0005f6e:	55                   	push   ebp
c0005f6f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f73:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f77:	50                   	push   eax
c0005f78:	e8 af bc ff ff       	call   c0001c2c <disk_write>
c0005f7d:	83 c4 20             	add    esp,0x20
c0005f80:	85 c0                	test   eax,eax
c0005f82:	0f 85 5c fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005f88:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f8c:	83 ec 0c             	sub    esp,0xc
c0005f8f:	6a 01                	push   0x1
c0005f91:	57                   	push   edi
c0005f92:	56                   	push   esi
c0005f93:	55                   	push   ebp
c0005f94:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f9c:	50                   	push   eax
c0005f9d:	e8 74 bc ff ff       	call   c0001c16 <disk_read>
c0005fa2:	83 c4 20             	add    esp,0x20
c0005fa5:	85 c0                	test   eax,eax
c0005fa7:	0f 85 37 fc ff ff    	jne    c0005be4 <f_lseek+0xd2>
c0005fad:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005fb0:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005fb3:	eb 08                	jmp    c0005fbd <f_lseek+0x4ab>
c0005fb5:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005fbd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fc1:	83 c4 3c             	add    esp,0x3c
c0005fc4:	5b                   	pop    ebx
c0005fc5:	5e                   	pop    esi
c0005fc6:	5f                   	pop    edi
c0005fc7:	5d                   	pop    ebp
c0005fc8:	c3                   	ret    

c0005fc9 <f_opendir>:
c0005fc9:	56                   	push   esi
c0005fca:	b8 09 00 00 00       	mov    eax,0x9
c0005fcf:	53                   	push   ebx
c0005fd0:	83 ec 24             	sub    esp,0x24
c0005fd3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fd7:	85 db                	test   ebx,ebx
c0005fd9:	0f 84 e6 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c0005fdf:	31 c9                	xor    ecx,ecx
c0005fe1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fe5:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fe9:	e8 03 c7 ff ff       	call   c00026f1 <mount_volume>
c0005fee:	85 c0                	test   eax,eax
c0005ff0:	0f 85 c9 00 00 00    	jne    c00060bf <f_opendir+0xf6>
c0005ff6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005ffa:	83 ec 0c             	sub    esp,0xc
c0005ffd:	89 03                	mov    DWORD PTR [ebx],eax
c0005fff:	68 60 04 00 00       	push   0x460
c0006004:	e8 8b 24 00 00       	call   c0008494 <ff_memalloc>
c0006009:	83 c4 10             	add    esp,0x10
c000600c:	89 c6                	mov    esi,eax
c000600e:	b8 11 00 00 00       	mov    eax,0x11
c0006013:	85 f6                	test   esi,esi
c0006015:	0f 84 aa 00 00 00    	je     c00060c5 <f_opendir+0xfc>
c000601b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000601f:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006025:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006028:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000602b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000602f:	89 d8                	mov    eax,ebx
c0006031:	e8 31 ee ff ff       	call   c0004e67 <follow_path>
c0006036:	85 c0                	test   eax,eax
c0006038:	75 61                	jne    c000609b <f_opendir+0xd2>
c000603a:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000603e:	78 46                	js     c0006086 <f_opendir+0xbd>
c0006040:	b8 05 00 00 00       	mov    eax,0x5
c0006045:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0006049:	74 50                	je     c000609b <f_opendir+0xd2>
c000604b:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000604f:	8a 01                	mov    al,BYTE PTR [ecx]
c0006051:	3c 04                	cmp    al,0x4
c0006053:	75 26                	jne    c000607b <f_opendir+0xb2>
c0006055:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006058:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000605b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000605e:	30 d2                	xor    dl,dl
c0006060:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006064:	09 c2                	or     edx,eax
c0006066:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0006069:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000606c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000606f:	89 da                	mov    edx,ebx
c0006071:	8d 41 10             	lea    eax,[ecx+0x10]
c0006074:	e8 b4 ed ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c0006079:	eb 0b                	jmp    c0006086 <f_opendir+0xbd>
c000607b:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000607e:	e8 59 ed ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006083:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006086:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000608a:	31 d2                	xor    edx,edx
c000608c:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006090:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006094:	89 d8                	mov    eax,ebx
c0006096:	e8 22 d1 ff ff       	call   c00031bd <dir_sdi>
c000609b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000609f:	83 ec 0c             	sub    esp,0xc
c00060a2:	56                   	push   esi
c00060a3:	e8 02 24 00 00       	call   c00084aa <ff_memfree>
c00060a8:	83 c4 10             	add    esp,0x10
c00060ab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00060af:	83 f8 04             	cmp    eax,0x4
c00060b2:	74 06                	je     c00060ba <f_opendir+0xf1>
c00060b4:	85 c0                	test   eax,eax
c00060b6:	74 0d                	je     c00060c5 <f_opendir+0xfc>
c00060b8:	eb 05                	jmp    c00060bf <f_opendir+0xf6>
c00060ba:	b8 05 00 00 00       	mov    eax,0x5
c00060bf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c5:	83 c4 24             	add    esp,0x24
c00060c8:	5b                   	pop    ebx
c00060c9:	5e                   	pop    esi
c00060ca:	c3                   	ret    

c00060cb <f_closedir>:
c00060cb:	53                   	push   ebx
c00060cc:	83 ec 18             	sub    esp,0x18
c00060cf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060d3:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060d7:	89 d8                	mov    eax,ebx
c00060d9:	e8 86 c2 ff ff       	call   c0002364 <validate>
c00060de:	85 c0                	test   eax,eax
c00060e0:	75 06                	jne    c00060e8 <f_closedir+0x1d>
c00060e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060e8:	83 c4 18             	add    esp,0x18
c00060eb:	5b                   	pop    ebx
c00060ec:	c3                   	ret    

c00060ed <f_readdir>:
c00060ed:	57                   	push   edi
c00060ee:	56                   	push   esi
c00060ef:	53                   	push   ebx
c00060f0:	83 ec 20             	sub    esp,0x20
c00060f3:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060f7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060fb:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060ff:	89 d8                	mov    eax,ebx
c0006101:	e8 5e c2 ff ff       	call   c0002364 <validate>
c0006106:	85 c0                	test   eax,eax
c0006108:	75 77                	jne    c0006181 <f_readdir+0x94>
c000610a:	85 ff                	test   edi,edi
c000610c:	75 0b                	jne    c0006119 <f_readdir+0x2c>
c000610e:	31 d2                	xor    edx,edx
c0006110:	89 d8                	mov    eax,ebx
c0006112:	e8 a6 d0 ff ff       	call   c00031bd <dir_sdi>
c0006117:	eb 68                	jmp    c0006181 <f_readdir+0x94>
c0006119:	83 ec 0c             	sub    esp,0xc
c000611c:	68 60 04 00 00       	push   0x460
c0006121:	e8 6e 23 00 00       	call   c0008494 <ff_memalloc>
c0006126:	83 c4 10             	add    esp,0x10
c0006129:	89 c6                	mov    esi,eax
c000612b:	b8 11 00 00 00       	mov    eax,0x11
c0006130:	85 f6                	test   esi,esi
c0006132:	74 4d                	je     c0006181 <f_readdir+0x94>
c0006134:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006138:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000613e:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006141:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006144:	31 d2                	xor    edx,edx
c0006146:	89 d8                	mov    eax,ebx
c0006148:	e8 80 d8 ff ff       	call   c00039cd <dir_read>
c000614d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006152:	75 19                	jne    c000616d <f_readdir+0x80>
c0006154:	89 fa                	mov    edx,edi
c0006156:	89 d8                	mov    eax,ebx
c0006158:	e8 7e ea ff ff       	call   c0004bdb <get_fileinfo>
c000615d:	31 d2                	xor    edx,edx
c000615f:	89 d8                	mov    eax,ebx
c0006161:	e8 af d5 ff ff       	call   c0003715 <dir_next>
c0006166:	83 f8 04             	cmp    eax,0x4
c0006169:	75 02                	jne    c000616d <f_readdir+0x80>
c000616b:	31 c0                	xor    eax,eax
c000616d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006171:	83 ec 0c             	sub    esp,0xc
c0006174:	56                   	push   esi
c0006175:	e8 30 23 00 00       	call   c00084aa <ff_memfree>
c000617a:	83 c4 10             	add    esp,0x10
c000617d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006181:	83 c4 20             	add    esp,0x20
c0006184:	5b                   	pop    ebx
c0006185:	5e                   	pop    esi
c0006186:	5f                   	pop    edi
c0006187:	c3                   	ret    

c0006188 <f_stat>:
c0006188:	57                   	push   edi
c0006189:	31 c9                	xor    ecx,ecx
c000618b:	56                   	push   esi
c000618c:	53                   	push   ebx
c000618d:	83 ec 50             	sub    esp,0x50
c0006190:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006194:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006198:	8d 44 24 60          	lea    eax,[esp+0x60]
c000619c:	e8 50 c5 ff ff       	call   c00026f1 <mount_volume>
c00061a1:	89 c3                	mov    ebx,eax
c00061a3:	85 c0                	test   eax,eax
c00061a5:	75 67                	jne    c000620e <f_stat+0x86>
c00061a7:	83 ec 0c             	sub    esp,0xc
c00061aa:	bb 11 00 00 00       	mov    ebx,0x11
c00061af:	68 60 04 00 00       	push   0x460
c00061b4:	e8 db 22 00 00       	call   c0008494 <ff_memalloc>
c00061b9:	83 c4 10             	add    esp,0x10
c00061bc:	89 c6                	mov    esi,eax
c00061be:	85 c0                	test   eax,eax
c00061c0:	74 4c                	je     c000620e <f_stat+0x86>
c00061c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061c6:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061cc:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061cf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061d2:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061d6:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061da:	e8 88 ec ff ff       	call   c0004e67 <follow_path>
c00061df:	89 c3                	mov    ebx,eax
c00061e1:	85 c0                	test   eax,eax
c00061e3:	75 1d                	jne    c0006202 <f_stat+0x7a>
c00061e5:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061ea:	78 11                	js     c00061fd <f_stat+0x75>
c00061ec:	85 ff                	test   edi,edi
c00061ee:	74 12                	je     c0006202 <f_stat+0x7a>
c00061f0:	89 fa                	mov    edx,edi
c00061f2:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061f6:	e8 e0 e9 ff ff       	call   c0004bdb <get_fileinfo>
c00061fb:	eb 05                	jmp    c0006202 <f_stat+0x7a>
c00061fd:	bb 06 00 00 00       	mov    ebx,0x6
c0006202:	83 ec 0c             	sub    esp,0xc
c0006205:	56                   	push   esi
c0006206:	e8 9f 22 00 00       	call   c00084aa <ff_memfree>
c000620b:	83 c4 10             	add    esp,0x10
c000620e:	83 c4 50             	add    esp,0x50
c0006211:	89 d8                	mov    eax,ebx
c0006213:	5b                   	pop    ebx
c0006214:	5e                   	pop    esi
c0006215:	5f                   	pop    edi
c0006216:	c3                   	ret    

c0006217 <f_getfree>:
c0006217:	55                   	push   ebp
c0006218:	31 c9                	xor    ecx,ecx
c000621a:	57                   	push   edi
c000621b:	56                   	push   esi
c000621c:	53                   	push   ebx
c000621d:	83 ec 5c             	sub    esp,0x5c
c0006220:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006224:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006228:	e8 c4 c4 ff ff       	call   c00026f1 <mount_volume>
c000622d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006231:	85 c0                	test   eax,eax
c0006233:	0f 85 9d 01 00 00    	jne    c00063d6 <f_getfree+0x1bf>
c0006239:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000623d:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006241:	89 02                	mov    DWORD PTR [edx],eax
c0006243:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006246:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0006249:	8d 71 fe             	lea    esi,[ecx-0x2]
c000624c:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006250:	39 f2                	cmp    edx,esi
c0006252:	77 0b                	ja     c000625f <f_getfree+0x48>
c0006254:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006258:	89 10                	mov    DWORD PTR [eax],edx
c000625a:	e9 77 01 00 00       	jmp    c00063d6 <f_getfree+0x1bf>
c000625f:	8a 10                	mov    dl,BYTE PTR [eax]
c0006261:	80 fa 01             	cmp    dl,0x1
c0006264:	75 3a                	jne    c00062a0 <f_getfree+0x89>
c0006266:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000626a:	be 02 00 00 00       	mov    esi,0x2
c000626f:	31 db                	xor    ebx,ebx
c0006271:	89 f2                	mov    edx,esi
c0006273:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006277:	e8 4b cd ff ff       	call   c0002fc7 <get_fat>
c000627c:	83 f8 ff             	cmp    eax,0xffffffff
c000627f:	0f 84 28 01 00 00    	je     c00063ad <f_getfree+0x196>
c0006285:	83 f8 01             	cmp    eax,0x1
c0006288:	0f 84 29 01 00 00    	je     c00063b7 <f_getfree+0x1a0>
c000628e:	83 d3 00             	adc    ebx,0x0
c0006291:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006295:	46                   	inc    esi
c0006296:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c0006299:	77 d6                	ja     c0006271 <f_getfree+0x5a>
c000629b:	e9 25 01 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c00062a0:	80 fa 04             	cmp    dl,0x4
c00062a3:	0f 85 88 00 00 00    	jne    c0006331 <f_getfree+0x11a>
c00062a9:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c00062ac:	31 ed                	xor    ebp,ebp
c00062ae:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00062b1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062b5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062b9:	31 db                	xor    ebx,ebx
c00062bb:	85 ed                	test   ebp,ebp
c00062bd:	75 3f                	jne    c00062fe <f_getfree+0xe7>
c00062bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062c3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062c7:	83 c0 01             	add    eax,0x1
c00062ca:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062ce:	83 d2 00             	adc    edx,0x0
c00062d1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062d5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062d9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062dd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062e1:	e8 59 c1 ff ff       	call   c000243f <move_window>
c00062e6:	85 c0                	test   eax,eax
c00062e8:	0f 85 d3 00 00 00    	jne    c00063c1 <f_getfree+0x1aa>
c00062ee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062f2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062fe:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006302:	8d 4e f8             	lea    ecx,[esi-0x8]
c0006305:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c0006309:	89 cf                	mov    edi,ecx
c000630b:	85 f6                	test   esi,esi
c000630d:	74 12                	je     c0006321 <f_getfree+0x10a>
c000630f:	88 c1                	mov    cl,al
c0006311:	83 e1 01             	and    ecx,0x1
c0006314:	80 f9 01             	cmp    cl,0x1
c0006317:	83 d3 00             	adc    ebx,0x0
c000631a:	d0 e8                	shr    al,1
c000631c:	4e                   	dec    esi
c000631d:	39 fe                	cmp    esi,edi
c000631f:	75 ea                	jne    c000630b <f_getfree+0xf4>
c0006321:	45                   	inc    ebp
c0006322:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006328:	85 f6                	test   esi,esi
c000632a:	75 8f                	jne    c00062bb <f_getfree+0xa4>
c000632c:	e9 94 00 00 00       	jmp    c00063c5 <f_getfree+0x1ae>
c0006331:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006334:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006337:	31 f6                	xor    esi,esi
c0006339:	31 db                	xor    ebx,ebx
c000633b:	85 f6                	test   esi,esi
c000633d:	75 1b                	jne    c000635a <f_getfree+0x143>
c000633f:	89 d7                	mov    edi,edx
c0006341:	89 cd                	mov    ebp,ecx
c0006343:	83 c7 01             	add    edi,0x1
c0006346:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000634a:	83 d5 00             	adc    ebp,0x0
c000634d:	e8 ed c0 ff ff       	call   c000243f <move_window>
c0006352:	85 c0                	test   eax,eax
c0006354:	75 6b                	jne    c00063c1 <f_getfree+0x1aa>
c0006356:	89 fa                	mov    edx,edi
c0006358:	89 e9                	mov    ecx,ebp
c000635a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000635e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006362:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006366:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c0006369:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000636d:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006371:	75 11                	jne    c0006384 <f_getfree+0x16d>
c0006373:	e8 e9 b8 ff ff       	call   c0001c61 <ld_word>
c0006378:	66 83 f8 01          	cmp    ax,0x1
c000637c:	83 d3 00             	adc    ebx,0x0
c000637f:	83 c6 02             	add    esi,0x2
c0006382:	eb 13                	jmp    c0006397 <f_getfree+0x180>
c0006384:	e8 e5 b8 ff ff       	call   c0001c6e <ld_dword>
c0006389:	25 ff ff ff 0f       	and    eax,0xfffffff
c000638e:	83 f8 01             	cmp    eax,0x1
c0006391:	83 d3 00             	adc    ebx,0x0
c0006394:	83 c6 04             	add    esi,0x4
c0006397:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000639d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00063a1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00063a5:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c00063a9:	75 90                	jne    c000633b <f_getfree+0x124>
c00063ab:	eb 18                	jmp    c00063c5 <f_getfree+0x1ae>
c00063ad:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c00063b5:	eb 0e                	jmp    c00063c5 <f_getfree+0x1ae>
c00063b7:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063bf:	eb 04                	jmp    c00063c5 <f_getfree+0x1ae>
c00063c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063c5:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063c9:	89 18                	mov    DWORD PTR [eax],ebx
c00063cb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063cf:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063d2:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063d6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063da:	83 c4 5c             	add    esp,0x5c
c00063dd:	5b                   	pop    ebx
c00063de:	5e                   	pop    esi
c00063df:	5f                   	pop    edi
c00063e0:	5d                   	pop    ebp
c00063e1:	c3                   	ret    

c00063e2 <f_truncate>:
c00063e2:	56                   	push   esi
c00063e3:	53                   	push   ebx
c00063e4:	83 ec 14             	sub    esp,0x14
c00063e7:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063eb:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063ef:	89 d8                	mov    eax,ebx
c00063f1:	e8 6e bf ff ff       	call   c0002364 <validate>
c00063f6:	89 c6                	mov    esi,eax
c00063f8:	85 c0                	test   eax,eax
c00063fa:	0f 85 d2 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c0006400:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c0006404:	85 f6                	test   esi,esi
c0006406:	0f 85 c6 00 00 00    	jne    c00064d2 <f_truncate+0xf0>
c000640c:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0006410:	0f 84 b7 00 00 00    	je     c00064cd <f_truncate+0xeb>
c0006416:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0006419:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000641c:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000641f:	89 d1                	mov    ecx,edx
c0006421:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006424:	0f 83 a8 00 00 00    	jae    c00064d2 <f_truncate+0xf0>
c000642a:	09 c2                	or     edx,eax
c000642c:	75 15                	jne    c0006443 <f_truncate+0x61>
c000642e:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006431:	31 c9                	xor    ecx,ecx
c0006433:	89 d8                	mov    eax,ebx
c0006435:	e8 7a d0 ff ff       	call   c00034b4 <remove_chain>
c000643a:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006441:	eb 35                	jmp    c0006478 <f_truncate+0x96>
c0006443:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006446:	89 d8                	mov    eax,ebx
c0006448:	e8 7a cb ff ff       	call   c0002fc7 <get_fat>
c000644d:	89 c2                	mov    edx,eax
c000644f:	b8 01 00 00 00       	mov    eax,0x1
c0006454:	83 fa ff             	cmp    edx,0xffffffff
c0006457:	74 1f                	je     c0006478 <f_truncate+0x96>
c0006459:	b8 02 00 00 00       	mov    eax,0x2
c000645e:	83 fa 01             	cmp    edx,0x1
c0006461:	74 15                	je     c0006478 <f_truncate+0x96>
c0006463:	31 c0                	xor    eax,eax
c0006465:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006469:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000646c:	76 0a                	jbe    c0006478 <f_truncate+0x96>
c000646e:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006471:	89 d8                	mov    eax,ebx
c0006473:	e8 3c d0 ff ff       	call   c00034b4 <remove_chain>
c0006478:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000647b:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000647e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006481:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006484:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006487:	83 ca 40             	or     edx,0x40
c000648a:	85 c0                	test   eax,eax
c000648c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c000648f:	75 35                	jne    c00064c6 <f_truncate+0xe4>
c0006491:	84 d2                	test   dl,dl
c0006493:	79 3d                	jns    c00064d2 <f_truncate+0xf0>
c0006495:	83 ec 0c             	sub    esp,0xc
c0006498:	8d 43 50             	lea    eax,[ebx+0x50]
c000649b:	6a 01                	push   0x1
c000649d:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c00064a0:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00064a3:	50                   	push   eax
c00064a4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00064a8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00064ac:	50                   	push   eax
c00064ad:	e8 7a b7 ff ff       	call   c0001c2c <disk_write>
c00064b2:	83 c4 20             	add    esp,0x20
c00064b5:	85 c0                	test   eax,eax
c00064b7:	75 08                	jne    c00064c1 <f_truncate+0xdf>
c00064b9:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00064bd:	31 f6                	xor    esi,esi
c00064bf:	eb 11                	jmp    c00064d2 <f_truncate+0xf0>
c00064c1:	b8 01 00 00 00       	mov    eax,0x1
c00064c6:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064c9:	89 c6                	mov    esi,eax
c00064cb:	eb 05                	jmp    c00064d2 <f_truncate+0xf0>
c00064cd:	be 07 00 00 00       	mov    esi,0x7
c00064d2:	89 f0                	mov    eax,esi
c00064d4:	83 c4 14             	add    esp,0x14
c00064d7:	5b                   	pop    ebx
c00064d8:	5e                   	pop    esi
c00064d9:	c3                   	ret    

c00064da <f_unlink>:
c00064da:	56                   	push   esi
c00064db:	b9 02 00 00 00       	mov    ecx,0x2
c00064e0:	53                   	push   ebx
c00064e1:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064e7:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064eb:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064f2:	e8 fa c1 ff ff       	call   c00026f1 <mount_volume>
c00064f7:	85 c0                	test   eax,eax
c00064f9:	0f 85 55 01 00 00    	jne    c0006654 <f_unlink+0x17a>
c00064ff:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006503:	83 ec 0c             	sub    esp,0xc
c0006506:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000650a:	68 60 04 00 00       	push   0x460
c000650f:	e8 80 1f 00 00       	call   c0008494 <ff_memalloc>
c0006514:	83 c4 10             	add    esp,0x10
c0006517:	89 c3                	mov    ebx,eax
c0006519:	b8 11 00 00 00       	mov    eax,0x11
c000651e:	85 db                	test   ebx,ebx
c0006520:	0f 84 2e 01 00 00    	je     c0006654 <f_unlink+0x17a>
c0006526:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000652a:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006530:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006533:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006536:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000653d:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006541:	e8 21 e9 ff ff       	call   c0004e67 <follow_path>
c0006546:	85 c0                	test   eax,eax
c0006548:	0f 85 f2 00 00 00    	jne    c0006640 <f_unlink+0x166>
c000654e:	b8 06 00 00 00       	mov    eax,0x6
c0006553:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000655b:	0f 88 df 00 00 00    	js     c0006640 <f_unlink+0x166>
c0006561:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006566:	74 0a                	je     c0006572 <f_unlink+0x98>
c0006568:	b8 07 00 00 00       	mov    eax,0x7
c000656d:	e9 ce 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c0006572:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006576:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000657a:	8a 02                	mov    al,BYTE PTR [edx]
c000657c:	3c 04                	cmp    al,0x4
c000657e:	75 12                	jne    c0006592 <f_unlink+0xb8>
c0006580:	8d 42 10             	lea    eax,[edx+0x10]
c0006583:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006587:	e8 a1 e8 ff ff       	call   c0004e2d <init_alloc_info.isra.2>
c000658c:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006590:	eb 0e                	jmp    c00065a0 <f_unlink+0xc6>
c0006592:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c0006599:	e8 3e e8 ff ff       	call   c0004ddc <ld_clust.isra.0>
c000659e:	89 c6                	mov    esi,eax
c00065a0:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c00065a5:	75 12                	jne    c00065b9 <f_unlink+0xdf>
c00065a7:	8d 44 24 48          	lea    eax,[esp+0x48]
c00065ab:	e8 94 d6 ff ff       	call   c0003c44 <dir_remove>
c00065b0:	85 c0                	test   eax,eax
c00065b2:	74 6c                	je     c0006620 <f_unlink+0x146>
c00065b4:	e9 87 00 00 00       	jmp    c0006640 <f_unlink+0x166>
c00065b9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00065bd:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065c4:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065cb:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065ce:	75 21                	jne    c00065f1 <f_unlink+0x117>
c00065d0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065d4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065d8:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065df:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065e6:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065ea:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065f1:	31 d2                	xor    edx,edx
c00065f3:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065fa:	e8 be cb ff ff       	call   c00031bd <dir_sdi>
c00065ff:	85 c0                	test   eax,eax
c0006601:	75 3d                	jne    c0006640 <f_unlink+0x166>
c0006603:	31 d2                	xor    edx,edx
c0006605:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c000660c:	e8 bc d3 ff ff       	call   c00039cd <dir_read>
c0006611:	85 c0                	test   eax,eax
c0006613:	0f 84 4f ff ff ff    	je     c0006568 <f_unlink+0x8e>
c0006619:	83 f8 04             	cmp    eax,0x4
c000661c:	75 22                	jne    c0006640 <f_unlink+0x166>
c000661e:	eb 87                	jmp    c00065a7 <f_unlink+0xcd>
c0006620:	85 f6                	test   esi,esi
c0006622:	75 0b                	jne    c000662f <f_unlink+0x155>
c0006624:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006628:	e8 3d df ff ff       	call   c000456a <sync_fs>
c000662d:	eb 11                	jmp    c0006640 <f_unlink+0x166>
c000662f:	31 c9                	xor    ecx,ecx
c0006631:	89 f2                	mov    edx,esi
c0006633:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006637:	e8 78 ce ff ff       	call   c00034b4 <remove_chain>
c000663c:	85 c0                	test   eax,eax
c000663e:	74 e4                	je     c0006624 <f_unlink+0x14a>
c0006640:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006644:	83 ec 0c             	sub    esp,0xc
c0006647:	53                   	push   ebx
c0006648:	e8 5d 1e 00 00       	call   c00084aa <ff_memfree>
c000664d:	83 c4 10             	add    esp,0x10
c0006650:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006654:	81 c4 e4 00 00 00    	add    esp,0xe4
c000665a:	5b                   	pop    ebx
c000665b:	5e                   	pop    esi
c000665c:	c3                   	ret    

c000665d <f_mkdir>:
c000665d:	57                   	push   edi
c000665e:	b9 02 00 00 00       	mov    ecx,0x2
c0006663:	56                   	push   esi
c0006664:	53                   	push   ebx
c0006665:	83 c4 80             	add    esp,0xffffff80
c0006668:	8d 54 24 08          	lea    edx,[esp+0x8]
c000666c:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006673:	e8 79 c0 ff ff       	call   c00026f1 <mount_volume>
c0006678:	89 c3                	mov    ebx,eax
c000667a:	85 c0                	test   eax,eax
c000667c:	0f 85 fe 01 00 00    	jne    c0006880 <f_mkdir+0x223>
c0006682:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006686:	bb 11 00 00 00       	mov    ebx,0x11
c000668b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000668f:	83 ec 0c             	sub    esp,0xc
c0006692:	68 60 04 00 00       	push   0x460
c0006697:	e8 f8 1d 00 00       	call   c0008494 <ff_memalloc>
c000669c:	83 c4 10             	add    esp,0x10
c000669f:	89 c7                	mov    edi,eax
c00066a1:	85 c0                	test   eax,eax
c00066a3:	0f 84 d7 01 00 00    	je     c0006880 <f_mkdir+0x223>
c00066a9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066ad:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c00066b3:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c00066b6:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00066b9:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066c0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066c4:	e8 9e e7 ff ff       	call   c0004e67 <follow_path>
c00066c9:	89 c3                	mov    ebx,eax
c00066cb:	85 c0                	test   eax,eax
c00066cd:	74 3e                	je     c000670d <f_mkdir+0xb0>
c00066cf:	83 f8 04             	cmp    eax,0x4
c00066d2:	75 3e                	jne    c0006712 <f_mkdir+0xb5>
c00066d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066d8:	31 d2                	xor    edx,edx
c00066da:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066de:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e2:	e8 ce cb ff ff       	call   c00032b5 <create_chain>
c00066e7:	89 c6                	mov    esi,eax
c00066e9:	85 c0                	test   eax,eax
c00066eb:	74 0c                	je     c00066f9 <f_mkdir+0x9c>
c00066ed:	bb 02 00 00 00       	mov    ebx,0x2
c00066f2:	83 f8 01             	cmp    eax,0x1
c00066f5:	74 07                	je     c00066fe <f_mkdir+0xa1>
c00066f7:	eb 2a                	jmp    c0006723 <f_mkdir+0xc6>
c00066f9:	bb 07 00 00 00       	mov    ebx,0x7
c00066fe:	31 c9                	xor    ecx,ecx
c0006700:	89 f2                	mov    edx,esi
c0006702:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0006706:	e8 a9 cd ff ff       	call   c00034b4 <remove_chain>
c000670b:	eb 05                	jmp    c0006712 <f_mkdir+0xb5>
c000670d:	bb 08 00 00 00       	mov    ebx,0x8
c0006712:	83 ec 0c             	sub    esp,0xc
c0006715:	57                   	push   edi
c0006716:	e8 8f 1d 00 00       	call   c00084aa <ff_memfree>
c000671b:	83 c4 10             	add    esp,0x10
c000671e:	e9 5d 01 00 00       	jmp    c0006880 <f_mkdir+0x223>
c0006723:	bb 01 00 00 00       	mov    ebx,0x1
c0006728:	83 f8 ff             	cmp    eax,0xffffffff
c000672b:	74 d1                	je     c00066fe <f_mkdir+0xa1>
c000672d:	89 f2                	mov    edx,esi
c000672f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006733:	e8 c4 ce ff ff       	call   c00035fc <dir_clear>
c0006738:	89 c3                	mov    ebx,eax
c000673a:	85 c0                	test   eax,eax
c000673c:	75 c0                	jne    c00066fe <f_mkdir+0xa1>
c000673e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006742:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006745:	74 69                	je     c00067b0 <f_mkdir+0x153>
c0006747:	b9 0b 00 00 00       	mov    ecx,0xb
c000674c:	83 c0 54             	add    eax,0x54
c000674f:	ba 20 00 00 00       	mov    edx,0x20
c0006754:	e8 9c b5 ff ff       	call   c0001cf5 <mem_set>
c0006759:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000675d:	ba 00 00 21 50       	mov    edx,0x50210000
c0006762:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006766:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000676a:	83 c0 6a             	add    eax,0x6a
c000676d:	e8 65 b5 ff ff       	call   c0001cd7 <st_dword>
c0006772:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006776:	89 f1                	mov    ecx,esi
c0006778:	8d 50 54             	lea    edx,[eax+0x54]
c000677b:	e8 85 e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006784:	b9 20 00 00 00       	mov    ecx,0x20
c0006789:	8d 50 54             	lea    edx,[eax+0x54]
c000678c:	83 c0 74             	add    eax,0x74
c000678f:	e8 4c b5 ff ff       	call   c0001ce0 <mem_cpy>
c0006794:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006798:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000679c:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c00067a0:	8d 50 74             	lea    edx,[eax+0x74]
c00067a3:	e8 5d e6 ff ff       	call   c0004e05 <st_clust.isra.1>
c00067a8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067ac:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c00067b0:	8d 44 24 34          	lea    eax,[esp+0x34]
c00067b4:	e8 2f db ff ff       	call   c00042e8 <dir_register>
c00067b9:	89 c3                	mov    ebx,eax
c00067bb:	85 c0                	test   eax,eax
c00067bd:	0f 85 3b ff ff ff    	jne    c00066fe <f_mkdir+0xa1>
c00067c3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c7:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ca:	75 74                	jne    c0006840 <f_mkdir+0x1e3>
c00067cc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067cf:	ba 00 00 21 50       	mov    edx,0x50210000
c00067d4:	83 c0 0c             	add    eax,0xc
c00067d7:	e8 fb b4 ff ff       	call   c0001cd7 <st_dword>
c00067dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e0:	89 f2                	mov    edx,esi
c00067e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067e5:	83 c0 34             	add    eax,0x34
c00067e8:	e8 ea b4 ff ff       	call   c0001cd7 <st_dword>
c00067ed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067f1:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067f5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067f8:	c1 e2 09             	shl    edx,0x9
c00067fb:	83 c0 38             	add    eax,0x38
c00067fe:	e8 d4 b4 ff ff       	call   c0001cd7 <st_dword>
c0006803:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006807:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000680b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000680e:	c1 e2 09             	shl    edx,0x9
c0006811:	83 c0 28             	add    eax,0x28
c0006814:	e8 be b4 ff ff       	call   c0001cd7 <st_dword>
c0006819:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000681d:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006820:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006824:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006827:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000682b:	8d 44 24 34          	lea    eax,[esp+0x34]
c000682f:	e8 8b d3 ff ff       	call   c0003bbf <store_xdir>
c0006834:	89 c3                	mov    ebx,eax
c0006836:	85 c0                	test   eax,eax
c0006838:	0f 85 d4 fe ff ff    	jne    c0006712 <f_mkdir+0xb5>
c000683e:	eb 30                	jmp    c0006870 <f_mkdir+0x213>
c0006840:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006844:	ba 00 00 21 50       	mov    edx,0x50210000
c0006849:	83 c0 16             	add    eax,0x16
c000684c:	e8 86 b4 ff ff       	call   c0001cd7 <st_dword>
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	89 f1                	mov    ecx,esi
c0006857:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000685b:	e8 a5 e5 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006860:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006864:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006868:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000686c:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006870:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006874:	e8 f1 dc ff ff       	call   c000456a <sync_fs>
c0006879:	89 c3                	mov    ebx,eax
c000687b:	e9 92 fe ff ff       	jmp    c0006712 <f_mkdir+0xb5>
c0006880:	83 ec 80             	sub    esp,0xffffff80
c0006883:	89 d8                	mov    eax,ebx
c0006885:	5b                   	pop    ebx
c0006886:	5e                   	pop    esi
c0006887:	5f                   	pop    edi
c0006888:	c3                   	ret    

c0006889 <f_rename>:
c0006889:	55                   	push   ebp
c000688a:	57                   	push   edi
c000688b:	56                   	push   esi
c000688c:	53                   	push   ebx
c000688d:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006893:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000689a:	e8 a4 b9 ff ff       	call   c0002243 <get_ldnumber>
c000689f:	b9 02 00 00 00       	mov    ecx,0x2
c00068a4:	8d 54 24 14          	lea    edx,[esp+0x14]
c00068a8:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c00068af:	e8 3d be ff ff       	call   c00026f1 <mount_volume>
c00068b4:	85 c0                	test   eax,eax
c00068b6:	0f 85 b5 02 00 00    	jne    c0006b71 <f_rename+0x2e8>
c00068bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c0:	83 ec 0c             	sub    esp,0xc
c00068c3:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068c7:	68 60 04 00 00       	push   0x460
c00068cc:	e8 c3 1b 00 00       	call   c0008494 <ff_memalloc>
c00068d1:	83 c4 10             	add    esp,0x10
c00068d4:	89 c3                	mov    ebx,eax
c00068d6:	b8 11 00 00 00       	mov    eax,0x11
c00068db:	85 db                	test   ebx,ebx
c00068dd:	0f 84 8e 02 00 00    	je     c0006b71 <f_rename+0x2e8>
c00068e3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068e7:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ed:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068f0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068f3:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068fa:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068fe:	e8 64 e5 ff ff       	call   c0004e67 <follow_path>
c0006903:	85 c0                	test   eax,eax
c0006905:	0f 85 52 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000690b:	b8 06 00 00 00       	mov    eax,0x6
c0006910:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c0006918:	0f 85 3f 02 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000691e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006922:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006925:	0f 85 05 01 00 00    	jne    c0006a30 <f_rename+0x1a7>
c000692b:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000692e:	b9 40 00 00 00       	mov    ecx,0x40
c0006933:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006937:	e8 a4 b3 ff ff       	call   c0001ce0 <mem_cpy>
c000693c:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006941:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006945:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000694c:	e8 8f b3 ff ff       	call   c0001ce0 <mem_cpy>
c0006951:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006958:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000695f:	e8 03 e5 ff ff       	call   c0004e67 <follow_path>
c0006964:	85 c0                	test   eax,eax
c0006966:	75 29                	jne    c0006991 <f_rename+0x108>
c0006968:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000696c:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006973:	74 0a                	je     c000697f <f_rename+0xf6>
c0006975:	b8 08 00 00 00       	mov    eax,0x8
c000697a:	e9 de 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c000697f:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006986:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000698d:	75 e6                	jne    c0006975 <f_rename+0xec>
c000698f:	eb 09                	jmp    c000699a <f_rename+0x111>
c0006991:	83 f8 04             	cmp    eax,0x4
c0006994:	0f 85 c3 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c000699a:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069a1:	e8 42 d9 ff ff       	call   c00042e8 <dir_register>
c00069a6:	85 c0                	test   eax,eax
c00069a8:	0f 85 af 01 00 00    	jne    c0006b5d <f_rename+0x2d4>
c00069ae:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069b2:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c00069b5:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c00069b8:	89 c5                	mov    ebp,eax
c00069ba:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c00069bd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069c1:	8d 46 24             	lea    eax,[esi+0x24]
c00069c4:	e8 98 b2 ff ff       	call   c0001c61 <ld_word>
c00069c9:	b9 40 00 00 00       	mov    ecx,0x40
c00069ce:	89 c7                	mov    edi,eax
c00069d0:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069d4:	89 f0                	mov    eax,esi
c00069d6:	e8 05 b3 ff ff       	call   c0001ce0 <mem_cpy>
c00069db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069df:	89 e9                	mov    ecx,ebp
c00069e1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069e4:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069e7:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069ef:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069f2:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069f5:	0f b7 d7             	movzx  edx,di
c00069f8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069fb:	83 c0 24             	add    eax,0x24
c00069fe:	e8 d0 b2 ff ff       	call   c0001cd3 <st_word>
c0006a03:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006a07:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006a0a:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0006a0d:	a8 10                	test   al,0x10
c0006a0f:	75 06                	jne    c0006a17 <f_rename+0x18e>
c0006a11:	83 c8 20             	or     eax,0x20
c0006a14:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c0006a17:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a1e:	e8 9c d1 ff ff       	call   c0003bbf <store_xdir>
c0006a23:	85 c0                	test   eax,eax
c0006a25:	0f 84 1c 01 00 00    	je     c0006b47 <f_rename+0x2be>
c0006a2b:	e9 2d 01 00 00       	jmp    c0006b5d <f_rename+0x2d4>
c0006a30:	b9 20 00 00 00       	mov    ecx,0x20
c0006a35:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a3c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a40:	e8 9b b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a45:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a4a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a4e:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a55:	e8 86 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006a5a:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a61:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a68:	e8 fa e3 ff ff       	call   c0004e67 <follow_path>
c0006a6d:	85 c0                	test   eax,eax
c0006a6f:	75 27                	jne    c0006a98 <f_rename+0x20f>
c0006a71:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a75:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a7c:	0f 85 f3 fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a82:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a89:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a90:	0f 85 df fe ff ff    	jne    c0006975 <f_rename+0xec>
c0006a96:	eb 09                	jmp    c0006aa1 <f_rename+0x218>
c0006a98:	83 f8 04             	cmp    eax,0x4
c0006a9b:	0f 85 bc 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006aa1:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006aa8:	e8 3b d8 ff ff       	call   c00042e8 <dir_register>
c0006aad:	85 c0                	test   eax,eax
c0006aaf:	0f 85 a8 00 00 00    	jne    c0006b5d <f_rename+0x2d4>
c0006ab5:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006abc:	b9 13 00 00 00       	mov    ecx,0x13
c0006ac1:	8d 46 0d             	lea    eax,[esi+0xd]
c0006ac4:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006ac8:	e8 13 b2 ff ff       	call   c0001ce0 <mem_cpy>
c0006acd:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ad1:	a8 10                	test   al,0x10
c0006ad3:	75 03                	jne    c0006ad8 <f_rename+0x24f>
c0006ad5:	83 c8 20             	or     eax,0x20
c0006ad8:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006adb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006adf:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ae3:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ae7:	74 5e                	je     c0006b47 <f_rename+0x2be>
c0006ae9:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006af0:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006af4:	74 51                	je     c0006b47 <f_rename+0x2be>
c0006af6:	89 f2                	mov    edx,esi
c0006af8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006afc:	8a 07                	mov    al,BYTE PTR [edi]
c0006afe:	e8 d9 e2 ff ff       	call   c0004ddc <ld_clust.isra.0>
c0006b03:	89 c2                	mov    edx,eax
c0006b05:	89 f8                	mov    eax,edi
c0006b07:	e8 ee b3 ff ff       	call   c0001efa <clst2sect>
c0006b0c:	89 c6                	mov    esi,eax
c0006b0e:	89 d1                	mov    ecx,edx
c0006b10:	b8 02 00 00 00       	mov    eax,0x2
c0006b15:	09 f2                	or     edx,esi
c0006b17:	74 44                	je     c0006b5d <f_rename+0x2d4>
c0006b19:	89 f2                	mov    edx,esi
c0006b1b:	89 f8                	mov    eax,edi
c0006b1d:	e8 1d b9 ff ff       	call   c000243f <move_window>
c0006b22:	85 c0                	test   eax,eax
c0006b24:	75 37                	jne    c0006b5d <f_rename+0x2d4>
c0006b26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b2a:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b2e:	75 17                	jne    c0006b47 <f_rename+0x2be>
c0006b30:	8d 50 74             	lea    edx,[eax+0x74]
c0006b33:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b3a:	e8 c6 e2 ff ff       	call   c0004e05 <st_clust.isra.1>
c0006b3f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b43:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b47:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b4b:	e8 f4 d0 ff ff       	call   c0003c44 <dir_remove>
c0006b50:	85 c0                	test   eax,eax
c0006b52:	75 09                	jne    c0006b5d <f_rename+0x2d4>
c0006b54:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b58:	e8 0d da ff ff       	call   c000456a <sync_fs>
c0006b5d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b61:	83 ec 0c             	sub    esp,0xc
c0006b64:	53                   	push   ebx
c0006b65:	e8 40 19 00 00       	call   c00084aa <ff_memfree>
c0006b6a:	83 c4 10             	add    esp,0x10
c0006b6d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b71:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b77:	5b                   	pop    ebx
c0006b78:	5e                   	pop    esi
c0006b79:	5f                   	pop    edi
c0006b7a:	5d                   	pop    ebp
c0006b7b:	c3                   	ret    

c0006b7c <f_chmod>:
c0006b7c:	57                   	push   edi
c0006b7d:	b9 02 00 00 00       	mov    ecx,0x2
c0006b82:	56                   	push   esi
c0006b83:	53                   	push   ebx
c0006b84:	83 ec 60             	sub    esp,0x60
c0006b87:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b8b:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b8f:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b93:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b97:	e8 55 bb ff ff       	call   c00026f1 <mount_volume>
c0006b9c:	85 c0                	test   eax,eax
c0006b9e:	0f 85 af 00 00 00    	jne    c0006c53 <f_chmod+0xd7>
c0006ba4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ba8:	83 ec 0c             	sub    esp,0xc
c0006bab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006baf:	68 60 04 00 00       	push   0x460
c0006bb4:	e8 db 18 00 00       	call   c0008494 <ff_memalloc>
c0006bb9:	83 c4 10             	add    esp,0x10
c0006bbc:	89 c6                	mov    esi,eax
c0006bbe:	b8 11 00 00 00       	mov    eax,0x11
c0006bc3:	85 f6                	test   esi,esi
c0006bc5:	0f 84 88 00 00 00    	je     c0006c53 <f_chmod+0xd7>
c0006bcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bcf:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bd5:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bd8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bdb:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bdf:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006be3:	e8 7f e2 ff ff       	call   c0004e67 <follow_path>
c0006be8:	85 c0                	test   eax,eax
c0006bea:	75 53                	jne    c0006c3f <f_chmod+0xc3>
c0006bec:	b8 06 00 00 00       	mov    eax,0x6
c0006bf1:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bf6:	75 47                	jne    c0006c3f <f_chmod+0xc3>
c0006bf8:	89 f9                	mov    ecx,edi
c0006bfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bfe:	83 e1 27             	and    ecx,0x27
c0006c01:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006c04:	75 1d                	jne    c0006c23 <f_chmod+0xa7>
c0006c06:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006c09:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c0c:	21 cb                	and    ebx,ecx
c0006c0e:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006c11:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006c14:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c18:	e8 a2 cf ff ff       	call   c0003bbf <store_xdir>
c0006c1d:	85 c0                	test   eax,eax
c0006c1f:	75 1e                	jne    c0006c3f <f_chmod+0xc3>
c0006c21:	eb 13                	jmp    c0006c36 <f_chmod+0xba>
c0006c23:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c27:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2a:	21 cb                	and    ebx,ecx
c0006c2c:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c2f:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c32:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c3a:	e8 2b d9 ff ff       	call   c000456a <sync_fs>
c0006c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c43:	83 ec 0c             	sub    esp,0xc
c0006c46:	56                   	push   esi
c0006c47:	e8 5e 18 00 00       	call   c00084aa <ff_memfree>
c0006c4c:	83 c4 10             	add    esp,0x10
c0006c4f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c53:	83 c4 60             	add    esp,0x60
c0006c56:	5b                   	pop    ebx
c0006c57:	5e                   	pop    esi
c0006c58:	5f                   	pop    edi
c0006c59:	c3                   	ret    

c0006c5a <f_utime>:
c0006c5a:	56                   	push   esi
c0006c5b:	b9 02 00 00 00       	mov    ecx,0x2
c0006c60:	53                   	push   ebx
c0006c61:	83 ec 64             	sub    esp,0x64
c0006c64:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c68:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c70:	e8 7c ba ff ff       	call   c00026f1 <mount_volume>
c0006c75:	85 c0                	test   eax,eax
c0006c77:	0f 85 b5 00 00 00    	jne    c0006d32 <f_utime+0xd8>
c0006c7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c81:	83 ec 0c             	sub    esp,0xc
c0006c84:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c88:	68 60 04 00 00       	push   0x460
c0006c8d:	e8 02 18 00 00       	call   c0008494 <ff_memalloc>
c0006c92:	83 c4 10             	add    esp,0x10
c0006c95:	89 c3                	mov    ebx,eax
c0006c97:	b8 11 00 00 00       	mov    eax,0x11
c0006c9c:	85 db                	test   ebx,ebx
c0006c9e:	0f 84 8e 00 00 00    	je     c0006d32 <f_utime+0xd8>
c0006ca4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ca8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006cae:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006cb1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006cb4:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006cb8:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cbc:	e8 a6 e1 ff ff       	call   c0004e67 <follow_path>
c0006cc1:	85 c0                	test   eax,eax
c0006cc3:	75 59                	jne    c0006d1e <f_utime+0xc4>
c0006cc5:	b8 06 00 00 00       	mov    eax,0x6
c0006cca:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006ccf:	75 4d                	jne    c0006d1e <f_utime+0xc4>
c0006cd1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cd5:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cd9:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cdd:	c1 e2 10             	shl    edx,0x10
c0006ce0:	09 ca                	or     edx,ecx
c0006ce2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006ce5:	75 1a                	jne    c0006d01 <f_utime+0xa7>
c0006ce7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006cea:	83 c0 0c             	add    eax,0xc
c0006ced:	e8 e5 af ff ff       	call   c0001cd7 <st_dword>
c0006cf2:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cf6:	e8 c4 ce ff ff       	call   c0003bbf <store_xdir>
c0006cfb:	85 c0                	test   eax,eax
c0006cfd:	75 1f                	jne    c0006d1e <f_utime+0xc4>
c0006cff:	eb 14                	jmp    c0006d15 <f_utime+0xbb>
c0006d01:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d05:	83 c0 16             	add    eax,0x16
c0006d08:	e8 ca af ff ff       	call   c0001cd7 <st_dword>
c0006d0d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d11:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006d15:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d19:	e8 4c d8 ff ff       	call   c000456a <sync_fs>
c0006d1e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d22:	83 ec 0c             	sub    esp,0xc
c0006d25:	53                   	push   ebx
c0006d26:	e8 7f 17 00 00       	call   c00084aa <ff_memfree>
c0006d2b:	83 c4 10             	add    esp,0x10
c0006d2e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d32:	83 c4 64             	add    esp,0x64
c0006d35:	5b                   	pop    ebx
c0006d36:	5e                   	pop    esi
c0006d37:	c3                   	ret    

c0006d38 <f_getlabel>:
c0006d38:	55                   	push   ebp
c0006d39:	31 c9                	xor    ecx,ecx
c0006d3b:	57                   	push   edi
c0006d3c:	56                   	push   esi
c0006d3d:	53                   	push   ebx
c0006d3e:	83 ec 6c             	sub    esp,0x6c
c0006d41:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d45:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d4c:	e8 a0 b9 ff ff       	call   c00026f1 <mount_volume>
c0006d51:	89 c6                	mov    esi,eax
c0006d53:	85 c0                	test   eax,eax
c0006d55:	0f 85 c1 01 00 00    	jne    c0006f1c <f_getlabel+0x1e4>
c0006d5b:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d63:	0f 84 5f 01 00 00    	je     c0006ec8 <f_getlabel+0x190>
c0006d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d6d:	31 d2                	xor    edx,edx
c0006d6f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d73:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d7b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d7f:	e8 39 c4 ff ff       	call   c00031bd <dir_sdi>
c0006d84:	85 c0                	test   eax,eax
c0006d86:	0f 85 2d 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006d8c:	ba 01 00 00 00       	mov    edx,0x1
c0006d91:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d95:	e8 33 cc ff ff       	call   c00039cd <dir_read>
c0006d9a:	85 c0                	test   eax,eax
c0006d9c:	0f 85 17 01 00 00    	jne    c0006eb9 <f_getlabel+0x181>
c0006da2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006da6:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006da9:	74 09                	je     c0006db4 <f_getlabel+0x7c>
c0006dab:	31 db                	xor    ebx,ebx
c0006dad:	31 c9                	xor    ecx,ecx
c0006daf:	e9 c8 00 00 00       	jmp    c0006e7c <f_getlabel+0x144>
c0006db4:	31 ed                	xor    ebp,ebp
c0006db6:	31 db                	xor    ebx,ebx
c0006db8:	31 ff                	xor    edi,edi
c0006dba:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006dbe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006dc2:	39 fa                	cmp    edx,edi
c0006dc4:	76 4b                	jbe    c0006e11 <f_getlabel+0xd9>
c0006dc6:	47                   	inc    edi
c0006dc7:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dca:	01 d0                	add    eax,edx
c0006dcc:	e8 90 ae ff ff       	call   c0001c61 <ld_word>
c0006dd1:	66 85 ed             	test   bp,bp
c0006dd4:	75 0d                	jne    c0006de3 <f_getlabel+0xab>
c0006dd6:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006ddc:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006de1:	76 28                	jbe    c0006e0b <f_getlabel+0xd3>
c0006de3:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dea:	89 e9                	mov    ecx,ebp
c0006dec:	01 da                	add    edx,ebx
c0006dee:	c1 e1 10             	shl    ecx,0x10
c0006df1:	0f b7 c0             	movzx  eax,ax
c0006df4:	09 c8                	or     eax,ecx
c0006df6:	b9 04 00 00 00       	mov    ecx,0x4
c0006dfb:	e8 01 b0 ff ff       	call   c0001e01 <put_utf>
c0006e00:	84 c0                	test   al,al
c0006e02:	74 0b                	je     c0006e0f <f_getlabel+0xd7>
c0006e04:	0f b6 c0             	movzx  eax,al
c0006e07:	01 c3                	add    ebx,eax
c0006e09:	31 c0                	xor    eax,eax
c0006e0b:	89 c5                	mov    ebp,eax
c0006e0d:	eb ab                	jmp    c0006dba <f_getlabel+0x82>
c0006e0f:	31 db                	xor    ebx,ebx
c0006e11:	66 85 ed             	test   bp,bp
c0006e14:	74 02                	je     c0006e18 <f_getlabel+0xe0>
c0006e16:	31 db                	xor    ebx,ebx
c0006e18:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e1f:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e23:	e9 a0 00 00 00       	jmp    c0006ec8 <f_getlabel+0x190>
c0006e28:	83 ff 0b             	cmp    edi,0xb
c0006e2b:	74 11                	je     c0006e3e <f_getlabel+0x106>
c0006e2d:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e32:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e36:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e39:	c1 e0 08             	shl    eax,0x8
c0006e3c:	09 c2                	or     edx,eax
c0006e3e:	0f b7 d2             	movzx  edx,dx
c0006e41:	50                   	push   eax
c0006e42:	50                   	push   eax
c0006e43:	68 b5 01 00 00       	push   0x1b5
c0006e48:	52                   	push   edx
c0006e49:	e8 03 17 00 00       	call   c0008551 <ff_oem2uni>
c0006e4e:	83 c4 10             	add    esp,0x10
c0006e51:	66 85 c0             	test   ax,ax
c0006e54:	74 46                	je     c0006e9c <f_getlabel+0x164>
c0006e56:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e5d:	0f b7 c0             	movzx  eax,ax
c0006e60:	01 da                	add    edx,ebx
c0006e62:	b9 04 00 00 00       	mov    ecx,0x4
c0006e67:	e8 95 af ff ff       	call   c0001e01 <put_utf>
c0006e6c:	84 c0                	test   al,al
c0006e6e:	74 2c                	je     c0006e9c <f_getlabel+0x164>
c0006e70:	0f b6 c0             	movzx  eax,al
c0006e73:	01 c3                	add    ebx,eax
c0006e75:	83 ff 0b             	cmp    edi,0xb
c0006e78:	74 24                	je     c0006e9e <f_getlabel+0x166>
c0006e7a:	89 f9                	mov    ecx,edi
c0006e7c:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e80:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e83:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e88:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e8d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e91:	e8 9f ae ff ff       	call   c0001d35 <dbc_1st>
c0006e96:	85 c0                	test   eax,eax
c0006e98:	74 a4                	je     c0006e3e <f_getlabel+0x106>
c0006e9a:	eb 8c                	jmp    c0006e28 <f_getlabel+0xf0>
c0006e9c:	31 db                	xor    ebx,ebx
c0006e9e:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006ea5:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006ea8:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006eaf:	74 17                	je     c0006ec8 <f_getlabel+0x190>
c0006eb1:	4b                   	dec    ebx
c0006eb2:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006eb5:	74 ee                	je     c0006ea5 <f_getlabel+0x16d>
c0006eb7:	eb 0f                	jmp    c0006ec8 <f_getlabel+0x190>
c0006eb9:	83 f8 04             	cmp    eax,0x4
c0006ebc:	75 5c                	jne    c0006f1a <f_getlabel+0x1e2>
c0006ebe:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ec5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ec8:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006ed0:	74 4a                	je     c0006f1c <f_getlabel+0x1e4>
c0006ed2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ed6:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006ed9:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006edc:	e8 5e b5 ff ff       	call   c000243f <move_window>
c0006ee1:	89 c6                	mov    esi,eax
c0006ee3:	85 c0                	test   eax,eax
c0006ee5:	75 35                	jne    c0006f1c <f_getlabel+0x1e4>
c0006ee7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006eeb:	b8 43 00 00 00       	mov    eax,0x43
c0006ef0:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ef2:	80 f9 03             	cmp    cl,0x3
c0006ef5:	74 0f                	je     c0006f06 <f_getlabel+0x1ce>
c0006ef7:	31 c0                	xor    eax,eax
c0006ef9:	80 f9 04             	cmp    cl,0x4
c0006efc:	0f 94 c0             	sete   al
c0006eff:	48                   	dec    eax
c0006f00:	83 e0 c3             	and    eax,0xffffffc3
c0006f03:	83 c0 64             	add    eax,0x64
c0006f06:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006f0a:	e8 5f ad ff ff       	call   c0001c6e <ld_dword>
c0006f0f:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006f16:	89 07                	mov    DWORD PTR [edi],eax
c0006f18:	eb 02                	jmp    c0006f1c <f_getlabel+0x1e4>
c0006f1a:	89 c6                	mov    esi,eax
c0006f1c:	83 c4 6c             	add    esp,0x6c
c0006f1f:	89 f0                	mov    eax,esi
c0006f21:	5b                   	pop    ebx
c0006f22:	5e                   	pop    esi
c0006f23:	5f                   	pop    edi
c0006f24:	5d                   	pop    ebp
c0006f25:	c3                   	ret    

c0006f26 <f_setlabel>:
c0006f26:	56                   	push   esi
c0006f27:	b9 02 00 00 00       	mov    ecx,0x2
c0006f2c:	53                   	push   ebx
c0006f2d:	83 ec 74             	sub    esp,0x74
c0006f30:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f34:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f3b:	e8 b1 b7 ff ff       	call   c00026f1 <mount_volume>
c0006f40:	89 c6                	mov    esi,eax
c0006f42:	85 c0                	test   eax,eax
c0006f44:	0f 85 41 02 00 00    	jne    c000718b <f_setlabel+0x265>
c0006f4a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f4e:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f51:	0f 85 8e 00 00 00    	jne    c0006fe5 <f_setlabel+0xbf>
c0006f57:	b9 16 00 00 00       	mov    ecx,0x16
c0006f5c:	31 d2                	xor    edx,edx
c0006f5e:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f62:	31 db                	xor    ebx,ebx
c0006f64:	e8 8c ad ff ff       	call   c0001cf5 <mem_set>
c0006f69:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f70:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f73:	0f 86 0a 01 00 00    	jbe    c0007083 <f_setlabel+0x15d>
c0006f79:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f80:	e8 b6 ad ff ff       	call   c0001d3b <tchar2uni>
c0006f85:	89 c6                	mov    esi,eax
c0006f87:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f8c:	76 2a                	jbe    c0006fb8 <f_setlabel+0x92>
c0006f8e:	83 f8 ff             	cmp    eax,0xffffffff
c0006f91:	74 05                	je     c0006f98 <f_setlabel+0x72>
c0006f93:	83 fb 09             	cmp    ebx,0x9
c0006f96:	76 0a                	jbe    c0006fa2 <f_setlabel+0x7c>
c0006f98:	be 06 00 00 00       	mov    esi,0x6
c0006f9d:	e9 e9 01 00 00       	jmp    c000718b <f_setlabel+0x265>
c0006fa2:	89 c2                	mov    edx,eax
c0006fa4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fa8:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fab:	c1 ea 10             	shr    edx,0x10
c0006fae:	01 c8                	add    eax,ecx
c0006fb0:	43                   	inc    ebx
c0006fb1:	e8 1d ad ff ff       	call   c0001cd3 <st_word>
c0006fb6:	eb 04                	jmp    c0006fbc <f_setlabel+0x96>
c0006fb8:	85 c0                	test   eax,eax
c0006fba:	74 dc                	je     c0006f98 <f_setlabel+0x72>
c0006fbc:	89 f2                	mov    edx,esi
c0006fbe:	b8 d7 8f 02 c0       	mov    eax,0xc0028fd7
c0006fc3:	e8 5b ad ff ff       	call   c0001d23 <chk_chr>
c0006fc8:	85 c0                	test   eax,eax
c0006fca:	75 cc                	jne    c0006f98 <f_setlabel+0x72>
c0006fcc:	83 fb 0a             	cmp    ebx,0xa
c0006fcf:	77 c7                	ja     c0006f98 <f_setlabel+0x72>
c0006fd1:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fd4:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fd8:	0f b7 d6             	movzx  edx,si
c0006fdb:	01 c8                	add    eax,ecx
c0006fdd:	43                   	inc    ebx
c0006fde:	e8 f0 ac ff ff       	call   c0001cd3 <st_word>
c0006fe3:	eb 84                	jmp    c0006f69 <f_setlabel+0x43>
c0006fe5:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fea:	ba 20 00 00 00       	mov    edx,0x20
c0006fef:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006ff3:	31 db                	xor    ebx,ebx
c0006ff5:	e8 fb ac ff ff       	call   c0001cf5 <mem_set>
c0006ffa:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0007001:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0007004:	76 60                	jbe    c0007066 <f_setlabel+0x140>
c0007006:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c000700d:	e8 29 ad ff ff       	call   c0001d3b <tchar2uni>
c0007012:	3d ff ff 00 00       	cmp    eax,0xffff
c0007017:	0f 87 7b ff ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000701d:	83 ec 0c             	sub    esp,0xc
c0007020:	50                   	push   eax
c0007021:	e8 97 15 00 00       	call   c00085bd <ff_wtoupper>
c0007026:	5a                   	pop    edx
c0007027:	59                   	pop    ecx
c0007028:	68 b5 01 00 00       	push   0x1b5
c000702d:	50                   	push   eax
c000702e:	e8 8e 14 00 00       	call   c00084c1 <ff_uni2oem>
c0007033:	83 c4 10             	add    esp,0x10
c0007036:	89 c6                	mov    esi,eax
c0007038:	66 85 c0             	test   ax,ax
c000703b:	0f 84 57 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007041:	0f b7 d0             	movzx  edx,ax
c0007044:	b8 d0 8f 02 c0       	mov    eax,0xc0028fd0
c0007049:	e8 d5 ac ff ff       	call   c0001d23 <chk_chr>
c000704e:	85 c0                	test   eax,eax
c0007050:	0f 85 42 ff ff ff    	jne    c0006f98 <f_setlabel+0x72>
c0007056:	66 81 fe ff 00       	cmp    si,0xff
c000705b:	0f 87 14 01 00 00    	ja     c0007175 <f_setlabel+0x24f>
c0007061:	e9 fa 00 00 00       	jmp    c0007160 <f_setlabel+0x23a>
c0007066:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000706b:	0f 84 27 ff ff ff    	je     c0006f98 <f_setlabel+0x72>
c0007071:	85 db                	test   ebx,ebx
c0007073:	74 0e                	je     c0007083 <f_setlabel+0x15d>
c0007075:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007078:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000707d:	75 04                	jne    c0007083 <f_setlabel+0x15d>
c000707f:	89 c3                	mov    ebx,eax
c0007081:	eb ee                	jmp    c0007071 <f_setlabel+0x14b>
c0007083:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007087:	31 d2                	xor    edx,edx
c0007089:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000708d:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007095:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007099:	e8 1f c1 ff ff       	call   c00031bd <dir_sdi>
c000709e:	89 c6                	mov    esi,eax
c00070a0:	85 c0                	test   eax,eax
c00070a2:	0f 85 e3 00 00 00    	jne    c000718b <f_setlabel+0x265>
c00070a8:	ba 01 00 00 00       	mov    edx,0x1
c00070ad:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070b1:	e8 17 c9 ff ff       	call   c00039cd <dir_read>
c00070b6:	85 c0                	test   eax,eax
c00070b8:	75 21                	jne    c00070db <f_setlabel+0x1b5>
c00070ba:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00070be:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070c2:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070c5:	74 5d                	je     c0007124 <f_setlabel+0x1fe>
c00070c7:	85 db                	test   ebx,ebx
c00070c9:	74 0b                	je     c00070d6 <f_setlabel+0x1b0>
c00070cb:	b9 0b 00 00 00       	mov    ecx,0xb
c00070d0:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070d4:	eb 70                	jmp    c0007146 <f_setlabel+0x220>
c00070d6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070d9:	eb 70                	jmp    c000714b <f_setlabel+0x225>
c00070db:	83 f8 04             	cmp    eax,0x4
c00070de:	75 7c                	jne    c000715c <f_setlabel+0x236>
c00070e0:	85 db                	test   ebx,ebx
c00070e2:	0f 84 a3 00 00 00    	je     c000718b <f_setlabel+0x265>
c00070e8:	ba 01 00 00 00       	mov    edx,0x1
c00070ed:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070f1:	e8 51 ca ff ff       	call   c0003b47 <dir_alloc>
c00070f6:	89 c6                	mov    esi,eax
c00070f8:	85 c0                	test   eax,eax
c00070fa:	0f 85 8b 00 00 00    	jne    c000718b <f_setlabel+0x265>
c0007100:	31 d2                	xor    edx,edx
c0007102:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007106:	b9 20 00 00 00       	mov    ecx,0x20
c000710b:	e8 e5 ab ff ff       	call   c0001cf5 <mem_set>
c0007110:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007114:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0007117:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000711b:	75 18                	jne    c0007135 <f_setlabel+0x20f>
c000711d:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007120:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007124:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007127:	b9 16 00 00 00       	mov    ecx,0x16
c000712c:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007130:	83 c0 02             	add    eax,0x2
c0007133:	eb 9b                	jmp    c00070d0 <f_setlabel+0x1aa>
c0007135:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c0007139:	b9 0b 00 00 00       	mov    ecx,0xb
c000713e:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007142:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007146:	e8 95 ab ff ff       	call   c0001ce0 <mem_cpy>
c000714b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000714f:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007153:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007157:	e8 0e d4 ff ff       	call   c000456a <sync_fs>
c000715c:	89 c6                	mov    esi,eax
c000715e:	eb 2b                	jmp    c000718b <f_setlabel+0x265>
c0007160:	83 fb 0a             	cmp    ebx,0xa
c0007163:	0f 87 2f fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c0007169:	89 f0                	mov    eax,esi
c000716b:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c000716f:	43                   	inc    ebx
c0007170:	e9 85 fe ff ff       	jmp    c0006ffa <f_setlabel+0xd4>
c0007175:	83 fb 09             	cmp    ebx,0x9
c0007178:	0f 87 1a fe ff ff    	ja     c0006f98 <f_setlabel+0x72>
c000717e:	89 f0                	mov    eax,esi
c0007180:	66 c1 e8 08          	shr    ax,0x8
c0007184:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007188:	43                   	inc    ebx
c0007189:	eb de                	jmp    c0007169 <f_setlabel+0x243>
c000718b:	89 f0                	mov    eax,esi
c000718d:	83 c4 74             	add    esp,0x74
c0007190:	5b                   	pop    ebx
c0007191:	5e                   	pop    esi
c0007192:	c3                   	ret    

c0007193 <f_forward>:
c0007193:	55                   	push   ebp
c0007194:	57                   	push   edi
c0007195:	56                   	push   esi
c0007196:	53                   	push   ebx
c0007197:	83 ec 2c             	sub    esp,0x2c
c000719a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000719e:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00071a2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00071a8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00071ac:	89 d8                	mov    eax,ebx
c00071ae:	e8 b1 b1 ff ff       	call   c0002364 <validate>
c00071b3:	89 c5                	mov    ebp,eax
c00071b5:	85 c0                	test   eax,eax
c00071b7:	0f 85 aa 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071bd:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071c1:	85 ed                	test   ebp,ebp
c00071c3:	0f 85 9e 01 00 00    	jne    c0007367 <f_forward+0x1d4>
c00071c9:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071cd:	0f 84 8f 01 00 00    	je     c0007362 <f_forward+0x1cf>
c00071d3:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071d6:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071d9:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071dc:	bf 00 00 00 00       	mov    edi,0x0
c00071e1:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071e4:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071e8:	89 d1                	mov    ecx,edx
c00071ea:	19 f9                	sbb    ecx,edi
c00071ec:	0f 83 cf 00 00 00    	jae    c00072c1 <f_forward+0x12e>
c00071f2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071f6:	e9 c6 00 00 00       	jmp    c00072c1 <f_forward+0x12e>
c00071fb:	50                   	push   eax
c00071fc:	50                   	push   eax
c00071fd:	6a 00                	push   0x0
c00071ff:	6a 00                	push   0x0
c0007201:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007205:	83 c4 10             	add    esp,0x10
c0007208:	85 c0                	test   eax,eax
c000720a:	0f 84 57 01 00 00    	je     c0007367 <f_forward+0x1d4>
c0007210:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007213:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0007217:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c000721a:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c000721e:	89 d7                	mov    edi,edx
c0007220:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007223:	89 c6                	mov    esi,eax
c0007225:	0f ac fe 09          	shrd   esi,edi,0x9
c0007229:	21 ce                	and    esi,ecx
c000722b:	89 c1                	mov    ecx,eax
c000722d:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007233:	0f 84 98 00 00 00    	je     c00072d1 <f_forward+0x13e>
c0007239:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000723d:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007240:	89 c8                	mov    eax,ecx
c0007242:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007246:	e8 af ac ff ff       	call   c0001efa <clst2sect>
c000724b:	89 d7                	mov    edi,edx
c000724d:	09 c7                	or     edi,eax
c000724f:	0f 84 9e 00 00 00    	je     c00072f3 <f_forward+0x160>
c0007255:	31 ff                	xor    edi,edi
c0007257:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000725a:	01 c6                	add    esi,eax
c000725c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007260:	11 d7                	adc    edi,edx
c0007262:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007265:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007268:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000726c:	39 fa                	cmp    edx,edi
c000726e:	0f 85 a2 00 00 00    	jne    c0007316 <f_forward+0x183>
c0007274:	39 f0                	cmp    eax,esi
c0007276:	0f 85 9a 00 00 00    	jne    c0007316 <f_forward+0x183>
c000727c:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000727f:	ba 00 02 00 00       	mov    edx,0x200
c0007284:	25 ff 01 00 00       	and    eax,0x1ff
c0007289:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000728d:	29 c2                	sub    edx,eax
c000728f:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007292:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007295:	39 d1                	cmp    ecx,edx
c0007297:	76 02                	jbe    c000729b <f_forward+0x108>
c0007299:	89 d1                	mov    ecx,edx
c000729b:	8d 73 50             	lea    esi,[ebx+0x50]
c000729e:	52                   	push   edx
c000729f:	01 c6                	add    esi,eax
c00072a1:	52                   	push   edx
c00072a2:	51                   	push   ecx
c00072a3:	56                   	push   esi
c00072a4:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00072a8:	83 c4 10             	add    esp,0x10
c00072ab:	85 c0                	test   eax,eax
c00072ad:	74 44                	je     c00072f3 <f_forward+0x160>
c00072af:	31 ff                	xor    edi,edi
c00072b1:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c00072b4:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00072b7:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00072bb:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072bf:	01 07                	add    DWORD PTR [edi],eax
c00072c1:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072c6:	0f 85 2f ff ff ff    	jne    c00071fb <f_forward+0x68>
c00072cc:	e9 96 00 00 00       	jmp    c0007367 <f_forward+0x1d4>
c00072d1:	85 f6                	test   esi,esi
c00072d3:	0f 85 60 ff ff ff    	jne    c0007239 <f_forward+0xa6>
c00072d9:	89 d7                	mov    edi,edx
c00072db:	09 c7                	or     edi,eax
c00072dd:	75 05                	jne    c00072e4 <f_forward+0x151>
c00072df:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072e2:	eb 0a                	jmp    c00072ee <f_forward+0x15b>
c00072e4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072e7:	89 d8                	mov    eax,ebx
c00072e9:	e8 d9 bc ff ff       	call   c0002fc7 <get_fat>
c00072ee:	83 f8 01             	cmp    eax,0x1
c00072f1:	77 0b                	ja     c00072fe <f_forward+0x16b>
c00072f3:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072f7:	bd 02 00 00 00       	mov    ebp,0x2
c00072fc:	eb 69                	jmp    c0007367 <f_forward+0x1d4>
c00072fe:	83 f8 ff             	cmp    eax,0xffffffff
c0007301:	75 0b                	jne    c000730e <f_forward+0x17b>
c0007303:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0007307:	bd 01 00 00 00       	mov    ebp,0x1
c000730c:	eb 59                	jmp    c0007367 <f_forward+0x1d4>
c000730e:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0007311:	e9 23 ff ff ff       	jmp    c0007239 <f_forward+0xa6>
c0007316:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c000731a:	79 20                	jns    c000733c <f_forward+0x1a9>
c000731c:	83 ec 0c             	sub    esp,0xc
c000731f:	6a 01                	push   0x1
c0007321:	52                   	push   edx
c0007322:	50                   	push   eax
c0007323:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007327:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000732b:	50                   	push   eax
c000732c:	e8 fb a8 ff ff       	call   c0001c2c <disk_write>
c0007331:	83 c4 20             	add    esp,0x20
c0007334:	85 c0                	test   eax,eax
c0007336:	75 cb                	jne    c0007303 <f_forward+0x170>
c0007338:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000733c:	83 ec 0c             	sub    esp,0xc
c000733f:	6a 01                	push   0x1
c0007341:	57                   	push   edi
c0007342:	56                   	push   esi
c0007343:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007347:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000734b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000734f:	50                   	push   eax
c0007350:	e8 c1 a8 ff ff       	call   c0001c16 <disk_read>
c0007355:	83 c4 20             	add    esp,0x20
c0007358:	85 c0                	test   eax,eax
c000735a:	0f 84 1c ff ff ff    	je     c000727c <f_forward+0xe9>
c0007360:	eb a1                	jmp    c0007303 <f_forward+0x170>
c0007362:	bd 07 00 00 00       	mov    ebp,0x7
c0007367:	83 c4 2c             	add    esp,0x2c
c000736a:	89 e8                	mov    eax,ebp
c000736c:	5b                   	pop    ebx
c000736d:	5e                   	pop    esi
c000736e:	5f                   	pop    edi
c000736f:	5d                   	pop    ebp
c0007370:	c3                   	ret    

c0007371 <f_mkfs>:
c0007371:	55                   	push   ebp
c0007372:	57                   	push   edi
c0007373:	56                   	push   esi
c0007374:	53                   	push   ebx
c0007375:	bb 0b 00 00 00       	mov    ebx,0xb
c000737a:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007380:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007387:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000738e:	e8 b0 ae ff ff       	call   c0002243 <get_ldnumber>
c0007393:	85 c0                	test   eax,eax
c0007395:	0f 88 ec 10 00 00    	js     c0008487 <f_mkfs+0x1116>
c000739b:	8b 14 85 a0 df 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd2060]
c00073a2:	85 d2                	test   edx,edx
c00073a4:	74 03                	je     c00073a9 <f_mkfs+0x38>
c00073a6:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00073a9:	85 f6                	test   esi,esi
c00073ab:	75 05                	jne    c00073b2 <f_mkfs+0x41>
c00073ad:	be c0 8f 02 c0       	mov    esi,0xc0028fc0
c00073b2:	83 ec 0c             	sub    esp,0xc
c00073b5:	0f b6 c0             	movzx  eax,al
c00073b8:	bb 03 00 00 00       	mov    ebx,0x3
c00073bd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073c1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073c5:	e8 49 a8 ff ff       	call   c0001c13 <disk_initialize>
c00073ca:	83 c4 10             	add    esp,0x10
c00073cd:	a8 01                	test   al,0x1
c00073cf:	0f 85 b2 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073d5:	bb 0a 00 00 00       	mov    ebx,0xa
c00073da:	a8 04                	test   al,0x4
c00073dc:	0f 85 a5 10 00 00    	jne    c0008487 <f_mkfs+0x1116>
c00073e2:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073e5:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073e9:	85 c0                	test   eax,eax
c00073eb:	75 20                	jne    c000740d <f_mkfs+0x9c>
c00073ed:	51                   	push   ecx
c00073ee:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073f2:	50                   	push   eax
c00073f3:	6a 03                	push   0x3
c00073f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073f9:	e8 44 a8 ff ff       	call   c0001c42 <disk_ioctl>
c00073fe:	83 c4 10             	add    esp,0x10
c0007401:	85 c0                	test   eax,eax
c0007403:	74 08                	je     c000740d <f_mkfs+0x9c>
c0007405:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c000740d:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007411:	8d 42 ff             	lea    eax,[edx-0x1]
c0007414:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007419:	77 04                	ja     c000741f <f_mkfs+0xae>
c000741b:	85 c2                	test   edx,eax
c000741d:	74 08                	je     c0007427 <f_mkfs+0xb6>
c000741f:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007427:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000742a:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000742e:	48                   	dec    eax
c000742f:	3c 01                	cmp    al,0x1
c0007431:	76 05                	jbe    c0007438 <f_mkfs+0xc7>
c0007433:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007438:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000743b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000743f:	48                   	dec    eax
c0007440:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007445:	77 07                	ja     c000744e <f_mkfs+0xdd>
c0007447:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000744c:	74 08                	je     c0007456 <f_mkfs+0xe5>
c000744e:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007456:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0007459:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c000745f:	77 07                	ja     c0007468 <f_mkfs+0xf7>
c0007461:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007464:	85 d8                	test   eax,ebx
c0007466:	74 02                	je     c000746a <f_mkfs+0xf9>
c0007468:	31 db                	xor    ebx,ebx
c000746a:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007475:	77 0a                	ja     c0007481 <f_mkfs+0x110>
c0007477:	bb 11 00 00 00       	mov    ebx,0x11
c000747c:	e9 06 10 00 00       	jmp    c0008487 <f_mkfs+0x1116>
c0007481:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007488:	8b 36                	mov    esi,DWORD PTR [esi]
c000748a:	85 ed                	test   ebp,ebp
c000748c:	75 1e                	jne    c00074ac <f_mkfs+0x13b>
c000748e:	83 ec 0c             	sub    esp,0xc
c0007491:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007498:	25 00 fe ff ff       	and    eax,0xfffffe00
c000749d:	50                   	push   eax
c000749e:	e8 f1 0f 00 00       	call   c0008494 <ff_memalloc>
c00074a3:	83 c4 10             	add    esp,0x10
c00074a6:	89 c5                	mov    ebp,eax
c00074a8:	85 c0                	test   eax,eax
c00074aa:	74 cb                	je     c0007477 <f_mkfs+0x106>
c00074ac:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c00074b4:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c00074bc:	52                   	push   edx
c00074bd:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074c1:	50                   	push   eax
c00074c2:	6a 01                	push   0x1
c00074c4:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074c8:	e8 75 a7 ff ff       	call   c0001c42 <disk_ioctl>
c00074cd:	83 c4 10             	add    esp,0x10
c00074d0:	85 c0                	test   eax,eax
c00074d2:	0f 85 4a 0f 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00074d8:	89 f1                	mov    ecx,esi
c00074da:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074e2:	83 e1 0f             	and    ecx,0xf
c00074e5:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ed:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074f1:	83 e6 08             	and    esi,0x8
c00074f4:	75 56                	jne    c000754c <f_mkfs+0x1db>
c00074f6:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074fa:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074fe:	83 ff 00             	cmp    edi,0x0
c0007501:	76 20                	jbe    c0007523 <f_mkfs+0x1b2>
c0007503:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c0007508:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c0007510:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c0007516:	83 d7 ff             	adc    edi,0xffffffff
c0007519:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000751d:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007521:	eb 21                	jmp    c0007544 <f_mkfs+0x1d3>
c0007523:	ba 3f 00 00 00       	mov    edx,0x3f
c0007528:	39 f2                	cmp    edx,esi
c000752a:	19 f8                	sbb    eax,edi
c000752c:	73 1e                	jae    c000754c <f_mkfs+0x1db>
c000752e:	83 c6 c1             	add    esi,0xffffffc1
c0007531:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c0007539:	83 d7 ff             	adc    edi,0xffffffff
c000753c:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007540:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007544:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000754c:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007550:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007554:	89 04 24             	mov    DWORD PTR [esp],eax
c0007557:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000755b:	31 c0                	xor    eax,eax
c000755d:	ba 7f 00 00 00       	mov    edx,0x7f
c0007562:	89 c7                	mov    edi,eax
c0007564:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007567:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000756b:	0f 83 c5 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c0007571:	89 df                	mov    edi,ebx
c0007573:	c1 ef 09             	shr    edi,0x9
c0007576:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000757a:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007581:	c1 ef 09             	shr    edi,0x9
c0007584:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c0007589:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000758d:	74 29                	je     c00075b8 <f_mkfs+0x247>
c000758f:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007595:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000759a:	0f 97 c2             	seta   dl
c000759d:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c00075a0:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00075a4:	0f 92 c0             	setb   al
c00075a7:	08 c2                	or     dl,al
c00075a9:	75 5b                	jne    c0007606 <f_mkfs+0x295>
c00075ab:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075af:	83 e0 07             	and    eax,0x7
c00075b2:	3c 04                	cmp    al,0x4
c00075b4:	74 50                	je     c0007606 <f_mkfs+0x295>
c00075b6:	eb 1b                	jmp    c00075d3 <f_mkfs+0x262>
c00075b8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c00075bd:	0f 87 73 0a 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c00075c3:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075c9:	76 08                	jbe    c00075d3 <f_mkfs+0x262>
c00075cb:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075d3:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075d7:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075db:	83 e0 01             	and    eax,0x1
c00075de:	80 e1 02             	and    cl,0x2
c00075e1:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075e5:	74 0d                	je     c00075f4 <f_mkfs+0x283>
c00075e7:	84 c0                	test   al,al
c00075e9:	0f 84 53 09 00 00    	je     c0007f42 <f_mkfs+0xbd1>
c00075ef:	e9 12 08 00 00       	jmp    c0007e06 <f_mkfs+0xa95>
c00075f4:	bb 13 00 00 00       	mov    ebx,0x13
c00075f9:	84 c0                	test   al,al
c00075fb:	0f 85 05 08 00 00    	jne    c0007e06 <f_mkfs+0xa95>
c0007601:	e9 39 0e 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0007606:	31 c0                	xor    eax,eax
c0007608:	ba ff 0f 00 00       	mov    edx,0xfff
c000760d:	89 c7                	mov    edi,eax
c000760f:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007612:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0007616:	0f 83 1a 0a 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c000761c:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007622:	77 39                	ja     c000765d <f_mkfs+0x2ec>
c0007624:	ba ff ff 07 00       	mov    edx,0x7ffff
c0007629:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007631:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007634:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007638:	73 08                	jae    c0007642 <f_mkfs+0x2d1>
c000763a:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007642:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007647:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000764a:	b8 00 00 00 00       	mov    eax,0x0
c000764f:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007653:	73 08                	jae    c000765d <f_mkfs+0x2ec>
c0007655:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000765d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007661:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007665:	83 c0 20             	add    eax,0x20
c0007668:	83 d2 00             	adc    edx,0x0
c000766b:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000766f:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007673:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007677:	31 d2                	xor    edx,edx
c0007679:	31 ff                	xor    edi,edi
c000767b:	52                   	push   edx
c000767c:	89 fb                	mov    ebx,edi
c000767e:	50                   	push   eax
c000767f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007683:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007687:	e8 60 ef 01 00       	call   c00265ec <__udivdi3>
c000768c:	83 c4 10             	add    esp,0x10
c000768f:	c1 e0 02             	shl    eax,0x2
c0007692:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007696:	05 07 02 00 00       	add    eax,0x207
c000769b:	89 f1                	mov    ecx,esi
c000769d:	c1 e8 09             	shr    eax,0x9
c00076a0:	83 c1 ff             	add    ecx,0xffffffff
c00076a3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c00076a7:	83 d3 ff             	adc    ebx,0xffffffff
c00076aa:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c00076ae:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c00076b2:	31 d2                	xor    edx,edx
c00076b4:	01 c8                	add    eax,ecx
c00076b6:	11 da                	adc    edx,ebx
c00076b8:	89 c1                	mov    ecx,eax
c00076ba:	f7 de                	neg    esi
c00076bc:	89 d0                	mov    eax,edx
c00076be:	83 d7 00             	adc    edi,0x0
c00076c1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076c5:	f7 df                	neg    edi
c00076c7:	21 f1                	and    ecx,esi
c00076c9:	21 f8                	and    eax,edi
c00076cb:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076d3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076d7:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076db:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076df:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076e2:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076e6:	0f ac d0 01          	shrd   eax,edx,0x1
c00076ea:	89 df                	mov    edi,ebx
c00076ec:	d1 ea                	shr    edx,1
c00076ee:	39 c1                	cmp    ecx,eax
c00076f0:	19 d7                	sbb    edi,edx
c00076f2:	0f 83 3e 09 00 00    	jae    c0008036 <f_mkfs+0xcc5>
c00076f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076fc:	31 d2                	xor    edx,edx
c00076fe:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c0007702:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007706:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000770a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000770d:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c0007711:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c0007715:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007719:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000771d:	83 f8 0f             	cmp    eax,0xf
c0007720:	0f 86 10 09 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007726:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000772e:	0f 87 02 09 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007734:	31 d2                	xor    edx,edx
c0007736:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000773a:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007742:	83 c0 07             	add    eax,0x7
c0007745:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000774d:	c1 e8 03             	shr    eax,0x3
c0007750:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007757:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000775b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000775f:	c1 e0 09             	shl    eax,0x9
c0007762:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007766:	48                   	dec    eax
c0007767:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000776b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000776f:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007773:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007777:	31 d2                	xor    edx,edx
c0007779:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000777d:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007784:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007788:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000778d:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007791:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007795:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007799:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000779d:	31 ff                	xor    edi,edi
c000779f:	31 f6                	xor    esi,esi
c00077a1:	31 db                	xor    ebx,ebx
c00077a3:	85 ff                	test   edi,edi
c00077a5:	74 05                	je     c00077ac <f_mkfs+0x43b>
c00077a7:	4f                   	dec    edi
c00077a8:	74 44                	je     c00077ee <f_mkfs+0x47d>
c00077aa:	eb 4f                	jmp    c00077fb <f_mkfs+0x48a>
c00077ac:	83 ec 0c             	sub    esp,0xc
c00077af:	0f b7 c3             	movzx  eax,bx
c00077b2:	50                   	push   eax
c00077b3:	e8 05 0e 00 00       	call   c00085bd <ff_wtoupper>
c00077b8:	83 c4 10             	add    esp,0x10
c00077bb:	89 c1                	mov    ecx,eax
c00077bd:	8d 53 01             	lea    edx,[ebx+0x1]
c00077c0:	66 39 c3             	cmp    bx,ax
c00077c3:	75 3e                	jne    c0007803 <f_mkfs+0x492>
c00077c5:	be 01 00 00 00       	mov    esi,0x1
c00077ca:	89 df                	mov    edi,ebx
c00077cc:	66 01 f7             	add    di,si
c00077cf:	75 07                	jne    c00077d8 <f_mkfs+0x467>
c00077d1:	83 fe 7f             	cmp    esi,0x7f
c00077d4:	77 31                	ja     c0007807 <f_mkfs+0x496>
c00077d6:	eb 16                	jmp    c00077ee <f_mkfs+0x47d>
c00077d8:	83 ec 0c             	sub    esp,0xc
c00077db:	0f b7 ff             	movzx  edi,di
c00077de:	57                   	push   edi
c00077df:	e8 d9 0d 00 00       	call   c00085bd <ff_wtoupper>
c00077e4:	83 c4 10             	add    esp,0x10
c00077e7:	39 c7                	cmp    edi,eax
c00077e9:	75 e6                	jne    c00077d1 <f_mkfs+0x460>
c00077eb:	46                   	inc    esi
c00077ec:	eb dc                	jmp    c00077ca <f_mkfs+0x459>
c00077ee:	31 c0                	xor    eax,eax
c00077f0:	89 d9                	mov    ecx,ebx
c00077f2:	4e                   	dec    esi
c00077f3:	0f 95 c0             	setne  al
c00077f6:	43                   	inc    ebx
c00077f7:	89 c7                	mov    edi,eax
c00077f9:	eb 14                	jmp    c000780f <f_mkfs+0x49e>
c00077fb:	89 f1                	mov    ecx,esi
c00077fd:	01 f3                	add    ebx,esi
c00077ff:	31 ff                	xor    edi,edi
c0007801:	eb 0c                	jmp    c000780f <f_mkfs+0x49e>
c0007803:	89 d3                	mov    ebx,edx
c0007805:	eb 08                	jmp    c000780f <f_mkfs+0x49e>
c0007807:	bf 02 00 00 00       	mov    edi,0x2
c000780c:	83 c9 ff             	or     ecx,0xffffffff
c000780f:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007813:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007816:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c000781a:	0f b6 c1             	movzx  eax,cl
c000781d:	e8 3a a9 ff ff       	call   c000215c <xsum32>
c0007822:	66 c1 e9 08          	shr    cx,0x8
c0007826:	89 c2                	mov    edx,eax
c0007828:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000782b:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c000782f:	0f b7 c1             	movzx  eax,cx
c0007832:	e8 25 a9 ff ff       	call   c000215c <xsum32>
c0007837:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000783c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007840:	66 85 db             	test   bx,bx
c0007843:	74 1f                	je     c0007864 <f_mkfs+0x4f3>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c000784f:	83 c0 02             	add    eax,0x2
c0007852:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007858:	39 c2                	cmp    edx,eax
c000785a:	74 08                	je     c0007864 <f_mkfs+0x4f3>
c000785c:	89 04 24             	mov    DWORD PTR [esp],eax
c000785f:	e9 3f ff ff ff       	jmp    c00077a3 <f_mkfs+0x432>
c0007864:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007867:	83 ec 0c             	sub    esp,0xc
c000786a:	05 01 02 00 00       	add    eax,0x201
c000786f:	c1 e8 09             	shr    eax,0x9
c0007872:	50                   	push   eax
c0007873:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007877:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787b:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000787f:	55                   	push   ebp
c0007880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007884:	e8 a3 a3 ff ff       	call   c0001c2c <disk_write>
c0007889:	83 c4 20             	add    esp,0x20
c000788c:	85 c0                	test   eax,eax
c000788e:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007891:	0f 85 8b 0b 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007897:	89 d0                	mov    eax,edx
c0007899:	31 d2                	xor    edx,edx
c000789b:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c000789f:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c00078a3:	66 85 db             	test   bx,bx
c00078a6:	74 04                	je     c00078ac <f_mkfs+0x53b>
c00078a8:	31 c0                	xor    eax,eax
c00078aa:	eb b0                	jmp    c000785c <f_mkfs+0x4eb>
c00078ac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00078b0:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c00078b4:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c00078b8:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c00078be:	31 d2                	xor    edx,edx
c00078c0:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078cb:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078cf:	c1 eb 09             	shr    ebx,0x9
c00078d2:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078d9:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078dd:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078e1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078e5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078e9:	8d 70 01             	lea    esi,[eax+0x1]
c00078ec:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078f0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078f4:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078fb:	31 d2                	xor    edx,edx
c00078fd:	25 00 fe ff ff       	and    eax,0xfffffe00
c0007902:	89 04 24             	mov    DWORD PTR [esp],eax
c0007905:	89 c1                	mov    ecx,eax
c0007907:	89 e8                	mov    eax,ebp
c0007909:	e8 e7 a3 ff ff       	call   c0001cf5 <mem_set>
c000790e:	31 c0                	xor    eax,eax
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 10                	jbe    c0007925 <f_mkfs+0x5b4>
c0007915:	83 fe 07             	cmp    esi,0x7
c0007918:	76 0b                	jbe    c0007925 <f_mkfs+0x5b4>
c000791a:	40                   	inc    eax
c000791b:	83 ee 08             	sub    esi,0x8
c000791e:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007923:	eb eb                	jmp    c0007910 <f_mkfs+0x59f>
c0007925:	b2 01                	mov    dl,0x1
c0007927:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000792b:	85 f6                	test   esi,esi
c000792d:	74 0c                	je     c000793b <f_mkfs+0x5ca>
c000792f:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007932:	76 07                	jbe    c000793b <f_mkfs+0x5ca>
c0007934:	08 11                	or     BYTE PTR [ecx],dl
c0007936:	4e                   	dec    esi
c0007937:	d1 e2                	shl    edx,1
c0007939:	eb f0                	jmp    c000792b <f_mkfs+0x5ba>
c000793b:	89 df                	mov    edi,ebx
c000793d:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007941:	76 04                	jbe    c0007947 <f_mkfs+0x5d6>
c0007943:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007947:	83 ec 0c             	sub    esp,0xc
c000794a:	57                   	push   edi
c000794b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000794f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007953:	55                   	push   ebp
c0007954:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007958:	e8 cf a2 ff ff       	call   c0001c2c <disk_write>
c000795d:	83 c4 20             	add    esp,0x20
c0007960:	85 c0                	test   eax,eax
c0007962:	0f 85 ba 0a 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007968:	31 d2                	xor    edx,edx
c000796a:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000796e:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007972:	29 fb                	sub    ebx,edi
c0007974:	0f 85 7a ff ff ff    	jne    c00078f4 <f_mkfs+0x583>
c000797a:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000797e:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007986:	31 f6                	xor    esi,esi
c0007988:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000798c:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000798f:	31 d2                	xor    edx,edx
c0007991:	89 e8                	mov    eax,ebp
c0007993:	e8 5d a3 ff ff       	call   c0001cf5 <mem_set>
c0007998:	31 c9                	xor    ecx,ecx
c000799a:	85 db                	test   ebx,ebx
c000799c:	75 40                	jne    c00079de <f_mkfs+0x66d>
c000799e:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00079a3:	89 e8                	mov    eax,ebp
c00079a5:	bb 02 00 00 00       	mov    ebx,0x2
c00079aa:	e8 28 a3 ff ff       	call   c0001cd7 <st_dword>
c00079af:	8d 45 04             	lea    eax,[ebp+0x4]
c00079b2:	83 ca ff             	or     edx,0xffffffff
c00079b5:	e8 1d a3 ff ff       	call   c0001cd7 <st_dword>
c00079ba:	b9 08 00 00 00       	mov    ecx,0x8
c00079bf:	eb 1d                	jmp    c00079de <f_mkfs+0x66d>
c00079c1:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079c4:	76 3b                	jbe    c0007a01 <f_mkfs+0x690>
c00079c6:	43                   	inc    ebx
c00079c7:	83 fe 01             	cmp    esi,0x1
c00079ca:	89 da                	mov    edx,ebx
c00079cc:	77 03                	ja     c00079d1 <f_mkfs+0x660>
c00079ce:	83 ca ff             	or     edx,0xffffffff
c00079d1:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079d5:	4e                   	dec    esi
c00079d6:	e8 fc a2 ff ff       	call   c0001cd7 <st_dword>
c00079db:	83 c1 04             	add    ecx,0x4
c00079de:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079e2:	85 f6                	test   esi,esi
c00079e4:	75 db                	jne    c00079c1 <f_mkfs+0x650>
c00079e6:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079eb:	77 14                	ja     c0007a01 <f_mkfs+0x690>
c00079ed:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079f1:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079f8:	85 f6                	test   esi,esi
c00079fa:	74 05                	je     c0007a01 <f_mkfs+0x690>
c00079fc:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079ff:	77 dd                	ja     c00079de <f_mkfs+0x66d>
c0007a01:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0007a05:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007a09:	39 cf                	cmp    edi,ecx
c0007a0b:	76 02                	jbe    c0007a0f <f_mkfs+0x69e>
c0007a0d:	89 cf                	mov    edi,ecx
c0007a0f:	83 ec 0c             	sub    esp,0xc
c0007a12:	57                   	push   edi
c0007a13:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a17:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0007a1b:	55                   	push   ebp
c0007a1c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a20:	e8 07 a2 ff ff       	call   c0001c2c <disk_write>
c0007a25:	83 c4 20             	add    esp,0x20
c0007a28:	85 c0                	test   eax,eax
c0007a2a:	0f 85 f2 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007a30:	31 d2                	xor    edx,edx
c0007a32:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a36:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a3a:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a3e:	0f 85 48 ff ff ff    	jne    c000798c <f_mkfs+0x61b>
c0007a44:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a47:	31 d2                	xor    edx,edx
c0007a49:	89 e8                	mov    eax,ebp
c0007a4b:	31 ff                	xor    edi,edi
c0007a4d:	e8 a3 a2 ff ff       	call   c0001cf5 <mem_set>
c0007a52:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a55:	ba 02 00 00 00       	mov    edx,0x2
c0007a5a:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a5e:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a62:	e8 70 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a67:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a6a:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a6e:	e8 64 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a73:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a76:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a7a:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a7e:	e8 54 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a83:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a8a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a8e:	83 c2 02             	add    edx,0x2
c0007a91:	e8 41 a2 ff ff       	call   c0001cd7 <st_dword>
c0007a96:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a99:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a9d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007aa1:	e8 31 a2 ff ff       	call   c0001cd7 <st_dword>
c0007aa6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007aaa:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007aaf:	89 c6                	mov    esi,eax
c0007ab1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ab5:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007ab9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007abc:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007ac0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007ac3:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007ac7:	39 cb                	cmp    ebx,ecx
c0007ac9:	76 02                	jbe    c0007acd <f_mkfs+0x75c>
c0007acb:	89 cb                	mov    ebx,ecx
c0007acd:	83 ec 0c             	sub    esp,0xc
c0007ad0:	53                   	push   ebx
c0007ad1:	57                   	push   edi
c0007ad2:	56                   	push   esi
c0007ad3:	55                   	push   ebp
c0007ad4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ad8:	e8 4f a1 ff ff       	call   c0001c2c <disk_write>
c0007add:	83 c4 20             	add    esp,0x20
c0007ae0:	85 c0                	test   eax,eax
c0007ae2:	0f 85 3a 09 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007ae8:	31 d2                	xor    edx,edx
c0007aea:	b9 00 02 00 00       	mov    ecx,0x200
c0007aef:	89 e8                	mov    eax,ebp
c0007af1:	e8 ff a1 ff ff       	call   c0001cf5 <mem_set>
c0007af6:	31 d2                	xor    edx,edx
c0007af8:	01 de                	add    esi,ebx
c0007afa:	11 d7                	adc    edi,edx
c0007afc:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007aff:	75 bf                	jne    c0007ac0 <f_mkfs+0x74f>
c0007b01:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007b05:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007b09:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007b11:	b9 00 02 00 00       	mov    ecx,0x200
c0007b16:	31 d2                	xor    edx,edx
c0007b18:	89 e8                	mov    eax,ebp
c0007b1a:	e8 d6 a1 ff ff       	call   c0001cf5 <mem_set>
c0007b1f:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b24:	ba a0 90 02 c0       	mov    edx,0xc00290a0
c0007b29:	89 e8                	mov    eax,ebp
c0007b2b:	e8 b0 a1 ff ff       	call   c0001ce0 <mem_cpy>
c0007b30:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b33:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b3b:	e8 9a a1 ff ff       	call   c0001cda <st_qword>
c0007b40:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b44:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b47:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b4b:	e8 8a a1 ff ff       	call   c0001cda <st_qword>
c0007b50:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b53:	ba 20 00 00 00       	mov    edx,0x20
c0007b58:	e8 7a a1 ff ff       	call   c0001cd7 <st_dword>
c0007b5d:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b61:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b65:	e8 6d a1 ff ff       	call   c0001cd7 <st_dword>
c0007b6a:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b6e:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b72:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b76:	e8 5c a1 ff ff       	call   c0001cd7 <st_dword>
c0007b7b:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b7e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b82:	e8 50 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b87:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b8b:	8d 50 02             	lea    edx,[eax+0x2]
c0007b8e:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b91:	e8 41 a1 ff ff       	call   c0001cd7 <st_dword>
c0007b96:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b99:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b9e:	e8 34 a1 ff ff       	call   c0001cd7 <st_dword>
c0007ba3:	8d 45 68             	lea    eax,[ebp+0x68]
c0007ba6:	ba 00 01 00 00       	mov    edx,0x100
c0007bab:	e8 23 a1 ff ff       	call   c0001cd3 <st_word>
c0007bb0:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007bb4:	b8 0a 00 00 00       	mov    eax,0xa
c0007bb9:	48                   	dec    eax
c0007bba:	74 05                	je     c0007bc1 <f_mkfs+0x850>
c0007bbc:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007bbf:	eb f8                	jmp    c0007bb9 <f_mkfs+0x848>
c0007bc1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007bc5:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007bc9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bcd:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bd1:	74 05                	je     c0007bd8 <f_mkfs+0x867>
c0007bd3:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bd6:	eb f5                	jmp    c0007bcd <f_mkfs+0x85c>
c0007bd8:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bdb:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007be0:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007be6:	31 db                	xor    ebx,ebx
c0007be8:	e8 e6 a0 ff ff       	call   c0001cd3 <st_word>
c0007bed:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bf3:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bf8:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bfb:	e8 d3 a0 ff ff       	call   c0001cd3 <st_word>
c0007c00:	31 c9                	xor    ecx,ecx
c0007c02:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007c05:	83 f8 01             	cmp    eax,0x1
c0007c08:	76 13                	jbe    c0007c1d <f_mkfs+0x8ac>
c0007c0a:	83 f9 70             	cmp    ecx,0x70
c0007c0d:	74 0e                	je     c0007c1d <f_mkfs+0x8ac>
c0007c0f:	89 da                	mov    edx,ebx
c0007c11:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007c16:	e8 41 a5 ff ff       	call   c000215c <xsum32>
c0007c1b:	89 c3                	mov    ebx,eax
c0007c1d:	41                   	inc    ecx
c0007c1e:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c24:	75 dc                	jne    c0007c02 <f_mkfs+0x891>
c0007c26:	89 f0                	mov    eax,esi
c0007c28:	89 fa                	mov    edx,edi
c0007c2a:	83 c0 01             	add    eax,0x1
c0007c2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c31:	83 d2 00             	adc    edx,0x0
c0007c34:	83 ec 0c             	sub    esp,0xc
c0007c37:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c3b:	6a 01                	push   0x1
c0007c3d:	57                   	push   edi
c0007c3e:	56                   	push   esi
c0007c3f:	55                   	push   ebp
c0007c40:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c44:	e8 e3 9f ff ff       	call   c0001c2c <disk_write>
c0007c49:	83 c4 20             	add    esp,0x20
c0007c4c:	85 c0                	test   eax,eax
c0007c4e:	0f 85 ce 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007c54:	31 d2                	xor    edx,edx
c0007c56:	b9 00 02 00 00       	mov    ecx,0x200
c0007c5b:	89 e8                	mov    eax,ebp
c0007c5d:	e8 93 a0 ff ff       	call   c0001cf5 <mem_set>
c0007c62:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c67:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c6a:	e8 64 a0 ff ff       	call   c0001cd3 <st_word>
c0007c6f:	89 f0                	mov    eax,esi
c0007c71:	89 fa                	mov    edx,edi
c0007c73:	83 c0 09             	add    eax,0x9
c0007c76:	83 d2 00             	adc    edx,0x0
c0007c79:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c7c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c80:	31 c9                	xor    ecx,ecx
c0007c82:	41                   	inc    ecx
c0007c83:	89 da                	mov    edx,ebx
c0007c85:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c8a:	e8 cd a4 ff ff       	call   c000215c <xsum32>
c0007c8f:	89 c3                	mov    ebx,eax
c0007c91:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c97:	75 e9                	jne    c0007c82 <f_mkfs+0x911>
c0007c99:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c9d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007ca1:	83 c0 01             	add    eax,0x1
c0007ca4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007ca8:	83 d2 00             	adc    edx,0x0
c0007cab:	83 ec 0c             	sub    esp,0xc
c0007cae:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007cb2:	6a 01                	push   0x1
c0007cb4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cb8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007cbc:	55                   	push   ebp
c0007cbd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007cc1:	e8 66 9f ff ff       	call   c0001c2c <disk_write>
c0007cc6:	83 c4 20             	add    esp,0x20
c0007cc9:	85 c0                	test   eax,eax
c0007ccb:	0f 85 51 07 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007cd1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cd5:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cd9:	75 09                	jne    c0007ce4 <f_mkfs+0x973>
c0007cdb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cde:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007ce2:	74 12                	je     c0007cf6 <f_mkfs+0x985>
c0007ce4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007ce8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007cec:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cf0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cf4:	eb 8a                	jmp    c0007c80 <f_mkfs+0x90f>
c0007cf6:	31 d2                	xor    edx,edx
c0007cf8:	b9 00 02 00 00       	mov    ecx,0x200
c0007cfd:	89 e8                	mov    eax,ebp
c0007cff:	e8 f1 9f ff ff       	call   c0001cf5 <mem_set>
c0007d04:	83 c6 0b             	add    esi,0xb
c0007d07:	83 d7 00             	adc    edi,0x0
c0007d0a:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007d0e:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007d12:	31 c9                	xor    ecx,ecx
c0007d14:	41                   	inc    ecx
c0007d15:	89 da                	mov    edx,ebx
c0007d17:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007d1c:	e8 3b a4 ff ff       	call   c000215c <xsum32>
c0007d21:	89 c3                	mov    ebx,eax
c0007d23:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d29:	75 e9                	jne    c0007d14 <f_mkfs+0x9a3>
c0007d2b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d2e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d32:	83 c6 01             	add    esi,0x1
c0007d35:	83 d7 00             	adc    edi,0x0
c0007d38:	83 ec 0c             	sub    esp,0xc
c0007d3b:	6a 01                	push   0x1
c0007d3d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d41:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d45:	55                   	push   ebp
c0007d46:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d4a:	e8 dd 9e ff ff       	call   c0001c2c <disk_write>
c0007d4f:	83 c4 20             	add    esp,0x20
c0007d52:	85 c0                	test   eax,eax
c0007d54:	0f 85 c8 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007d5a:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d5e:	75 06                	jne    c0007d66 <f_mkfs+0x9f5>
c0007d60:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d64:	74 09                	je     c0007d6f <f_mkfs+0x9fe>
c0007d66:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d69:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d6d:	eb a3                	jmp    c0007d12 <f_mkfs+0x9a1>
c0007d6f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d73:	89 da                	mov    edx,ebx
c0007d75:	01 e8                	add    eax,ebp
c0007d77:	e8 5b 9f ff ff       	call   c0001cd7 <st_dword>
c0007d7c:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d81:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d89:	75 e4                	jne    c0007d6f <f_mkfs+0x9fe>
c0007d8b:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d8e:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d92:	83 c6 02             	add    esi,0x2
c0007d95:	83 d7 00             	adc    edi,0x0
c0007d98:	83 ec 0c             	sub    esp,0xc
c0007d9b:	6a 01                	push   0x1
c0007d9d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007da5:	55                   	push   ebp
c0007da6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007daa:	e8 7d 9e ff ff       	call   c0001c2c <disk_write>
c0007daf:	83 c4 20             	add    esp,0x20
c0007db2:	85 c0                	test   eax,eax
c0007db4:	0f 85 68 06 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0007dba:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007dbf:	74 0d                	je     c0007dce <f_mkfs+0xa5d>
c0007dc1:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007dc9:	e9 43 fd ff ff       	jmp    c0007b11 <f_mkfs+0x7a0>
c0007dce:	b1 07                	mov    cl,0x7
c0007dd0:	e9 e3 05 00 00       	jmp    c00083b8 <f_mkfs+0x1047>
c0007dd5:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dda:	0f 85 4f 02 00 00    	jne    c000802f <f_mkfs+0xcbe>
c0007de0:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007de5:	0f 86 22 02 00 00    	jbe    c000800d <f_mkfs+0xc9c>
c0007deb:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007df0:	0f 85 81 06 00 00    	jne    c0008477 <f_mkfs+0x1106>
c0007df6:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007df9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dfd:	83 f8 40             	cmp    eax,0x40
c0007e00:	0f 87 51 06 00 00    	ja     c0008457 <f_mkfs+0x10e6>
c0007e06:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007e0a:	85 ff                	test   edi,edi
c0007e0c:	75 1c                	jne    c0007e2a <f_mkfs+0xab9>
c0007e0e:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007e11:	ba a0 8f 02 c0       	mov    edx,0xc0028fa0
c0007e16:	c1 e9 0c             	shr    ecx,0xc
c0007e19:	bf 01 00 00 00       	mov    edi,0x1
c0007e1e:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e21:	66 85 c0             	test   ax,ax
c0007e24:	0f 85 95 01 00 00    	jne    c0007fbf <f_mkfs+0xc4e>
c0007e2a:	31 d2                	xor    edx,edx
c0007e2c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e2f:	f7 f7                	div    edi
c0007e31:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e36:	0f 86 95 01 00 00    	jbe    c0007fd1 <f_mkfs+0xc60>
c0007e3c:	83 c0 02             	add    eax,0x2
c0007e3f:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e44:	01 c0                	add    eax,eax
c0007e46:	05 ff 01 00 00       	add    eax,0x1ff
c0007e4b:	be 01 00 00 00       	mov    esi,0x1
c0007e50:	c1 e8 09             	shr    eax,0x9
c0007e53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e57:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e5b:	c1 e0 05             	shl    eax,0x5
c0007e5e:	c1 e8 09             	shr    eax,0x9
c0007e61:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e65:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e6a:	31 d2                	xor    edx,edx
c0007e6c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e70:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e74:	89 f0                	mov    eax,esi
c0007e76:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e7a:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e7e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e82:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e86:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e8a:	31 d2                	xor    edx,edx
c0007e8c:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e91:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e95:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e99:	31 db                	xor    ebx,ebx
c0007e9b:	01 c8                	add    eax,ecx
c0007e9d:	11 da                	adc    edx,ebx
c0007e9f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007ea3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007ea7:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007eab:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007eaf:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007eb3:	f7 da                	neg    edx
c0007eb5:	21 d1                	and    ecx,edx
c0007eb7:	29 d9                	sub    ecx,ebx
c0007eb9:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ebe:	0f 85 20 01 00 00    	jne    c0007fe4 <f_mkfs+0xc73>
c0007ec4:	31 db                	xor    ebx,ebx
c0007ec6:	01 ce                	add    esi,ecx
c0007ec8:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ecc:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007ed0:	31 d2                	xor    edx,edx
c0007ed2:	89 f8                	mov    eax,edi
c0007ed4:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007ed8:	c1 e0 04             	shl    eax,0x4
c0007edb:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007edf:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ee3:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ee7:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007eeb:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007eee:	19 d3                	sbb    ebx,edx
c0007ef0:	0f 82 40 01 00 00    	jb     c0008036 <f_mkfs+0xcc5>
c0007ef6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007ef9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007efd:	89 c8                	mov    eax,ecx
c0007eff:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007f04:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007f08:	29 f0                	sub    eax,esi
c0007f0a:	29 d0                	sub    eax,edx
c0007f0c:	31 d2                	xor    edx,edx
c0007f0e:	f7 f7                	div    edi
c0007f10:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007f15:	89 c3                	mov    ebx,eax
c0007f17:	0f 85 b8 fe ff ff    	jne    c0007dd5 <f_mkfs+0xa64>
c0007f1d:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f22:	0f 87 1d 01 00 00    	ja     c0008045 <f_mkfs+0xcd4>
c0007f28:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f2d:	0f 85 03 01 00 00    	jne    c0008036 <f_mkfs+0xcc5>
c0007f33:	83 ff 01             	cmp    edi,0x1
c0007f36:	0f 86 fa 00 00 00    	jbe    c0008036 <f_mkfs+0xcc5>
c0007f3c:	d1 ef                	shr    edi,1
c0007f3e:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f42:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f46:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f49:	85 db                	test   ebx,ebx
c0007f4b:	75 2d                	jne    c0007f7a <f_mkfs+0xc09>
c0007f4d:	89 cb                	mov    ebx,ecx
c0007f4f:	ba b0 8f 02 c0       	mov    edx,0xc0028fb0
c0007f54:	c1 eb 11             	shr    ebx,0x11
c0007f57:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f5f:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f62:	66 85 c0             	test   ax,ax
c0007f65:	74 11                	je     c0007f78 <f_mkfs+0xc07>
c0007f67:	83 c2 02             	add    edx,0x2
c0007f6a:	39 d8                	cmp    eax,ebx
c0007f6c:	77 0a                	ja     c0007f78 <f_mkfs+0xc07>
c0007f6e:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f72:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f76:	eb e7                	jmp    c0007f5f <f_mkfs+0xbee>
c0007f78:	31 db                	xor    ebx,ebx
c0007f7a:	31 d2                	xor    edx,edx
c0007f7c:	89 c8                	mov    eax,ecx
c0007f7e:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f82:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f89:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f8e:	c1 ea 09             	shr    edx,0x9
c0007f91:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f96:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f9a:	0f 87 96 00 00 00    	ja     c0008036 <f_mkfs+0xcc5>
c0007fa0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007fa4:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007fac:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007fb0:	be 20 00 00 00       	mov    esi,0x20
c0007fb5:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007fba:	e9 a6 fe ff ff       	jmp    c0007e65 <f_mkfs+0xaf4>
c0007fbf:	83 c2 02             	add    edx,0x2
c0007fc2:	39 c8                	cmp    eax,ecx
c0007fc4:	0f 87 60 fe ff ff    	ja     c0007e2a <f_mkfs+0xab9>
c0007fca:	01 ff                	add    edi,edi
c0007fcc:	e9 4d fe ff ff       	jmp    c0007e1e <f_mkfs+0xaad>
c0007fd1:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fd4:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fd9:	40                   	inc    eax
c0007fda:	d1 e8                	shr    eax,1
c0007fdc:	83 c0 03             	add    eax,0x3
c0007fdf:	e9 62 fe ff ff       	jmp    c0007e46 <f_mkfs+0xad5>
c0007fe4:	31 d2                	xor    edx,edx
c0007fe6:	89 c8                	mov    eax,ecx
c0007fe8:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fec:	85 d2                	test   edx,edx
c0007fee:	74 0c                	je     c0007ffc <f_mkfs+0xc8b>
c0007ff0:	49                   	dec    ecx
c0007ff1:	46                   	inc    esi
c0007ff2:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007ff7:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007ffc:	89 c8                	mov    eax,ecx
c0007ffe:	31 d2                	xor    edx,edx
c0008000:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0008004:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0008008:	e9 c3 fe ff ff       	jmp    c0007ed0 <f_mkfs+0xb5f>
c000800d:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008012:	77 31                	ja     c0008045 <f_mkfs+0xcd4>
c0008014:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0008019:	75 1b                	jne    c0008036 <f_mkfs+0xcc5>
c000801b:	8d 04 3f             	lea    eax,[edi+edi*1]
c000801e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008022:	3d 80 00 00 00       	cmp    eax,0x80
c0008027:	0f 86 d9 fd ff ff    	jbe    c0007e06 <f_mkfs+0xa95>
c000802d:	eb 07                	jmp    c0008036 <f_mkfs+0xcc5>
c000802f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008034:	76 0a                	jbe    c0008040 <f_mkfs+0xccf>
c0008036:	bb 0e 00 00 00       	mov    ebx,0xe
c000803b:	e9 ff 03 00 00       	jmp    c000843f <f_mkfs+0x10ce>
c0008040:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008045:	31 d2                	xor    edx,edx
c0008047:	b9 00 02 00 00       	mov    ecx,0x200
c000804c:	89 e8                	mov    eax,ebp
c000804e:	e8 a2 9c ff ff       	call   c0001cf5 <mem_set>
c0008053:	b9 0b 00 00 00       	mov    ecx,0xb
c0008058:	ba c2 90 02 c0       	mov    edx,0xc00290c2
c000805d:	89 e8                	mov    eax,ebp
c000805f:	e8 7c 9c ff ff       	call   c0001ce0 <mem_cpy>
c0008064:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008067:	ba 00 02 00 00       	mov    edx,0x200
c000806c:	e8 62 9c ff ff       	call   c0001cd3 <st_word>
c0008071:	89 f8                	mov    eax,edi
c0008073:	0f b7 d6             	movzx  edx,si
c0008076:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c0008079:	8d 45 0e             	lea    eax,[ebp+0xe]
c000807c:	e8 52 9c ff ff       	call   c0001cd3 <st_word>
c0008081:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008085:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000808a:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000808d:	75 08                	jne    c0008097 <f_mkfs+0xd26>
c000808f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008097:	8d 45 11             	lea    eax,[ebp+0x11]
c000809a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000809e:	e8 30 9c ff ff       	call   c0001cd3 <st_word>
c00080a3:	b8 ff ff 00 00       	mov    eax,0xffff
c00080a8:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c00080ac:	39 d0                	cmp    eax,edx
c00080ae:	b8 00 00 00 00       	mov    eax,0x0
c00080b3:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c00080b7:	72 0a                	jb     c00080c3 <f_mkfs+0xd52>
c00080b9:	8d 45 13             	lea    eax,[ebp+0x13]
c00080bc:	e8 12 9c ff ff       	call   c0001cd3 <st_word>
c00080c1:	eb 08                	jmp    c00080cb <f_mkfs+0xd5a>
c00080c3:	8d 45 20             	lea    eax,[ebp+0x20]
c00080c6:	e8 0c 9c ff ff       	call   c0001cd7 <st_dword>
c00080cb:	8d 45 18             	lea    eax,[ebp+0x18]
c00080ce:	ba 3f 00 00 00       	mov    edx,0x3f
c00080d3:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080d7:	e8 f7 9b ff ff       	call   c0001cd3 <st_word>
c00080dc:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080df:	ba ff 00 00 00       	mov    edx,0xff
c00080e4:	e8 ea 9b ff ff       	call   c0001cd3 <st_word>
c00080e9:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080ec:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080f0:	e8 e2 9b ff ff       	call   c0001cd7 <st_dword>
c00080f5:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080fa:	75 57                	jne    c0008153 <f_mkfs+0xde2>
c00080fc:	8d 45 43             	lea    eax,[ebp+0x43]
c00080ff:	ba 00 00 21 50       	mov    edx,0x50210000
c0008104:	e8 ce 9b ff ff       	call   c0001cd7 <st_dword>
c0008109:	8d 45 24             	lea    eax,[ebp+0x24]
c000810c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008110:	e8 c2 9b ff ff       	call   c0001cd7 <st_dword>
c0008115:	8d 45 2c             	lea    eax,[ebp+0x2c]
c0008118:	ba 02 00 00 00       	mov    edx,0x2
c000811d:	e8 b5 9b ff ff       	call   c0001cd7 <st_dword>
c0008122:	8d 45 30             	lea    eax,[ebp+0x30]
c0008125:	ba 01 00 00 00       	mov    edx,0x1
c000812a:	e8 a4 9b ff ff       	call   c0001cd3 <st_word>
c000812f:	8d 45 32             	lea    eax,[ebp+0x32]
c0008132:	ba 06 00 00 00       	mov    edx,0x6
c0008137:	e8 97 9b ff ff       	call   c0001cd3 <st_word>
c000813c:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008140:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008144:	8d 45 47             	lea    eax,[ebp+0x47]
c0008147:	b9 13 00 00 00       	mov    ecx,0x13
c000814c:	ba ce 90 02 c0       	mov    edx,0xc00290ce
c0008151:	eb 2f                	jmp    c0008182 <f_mkfs+0xe11>
c0008153:	8d 45 27             	lea    eax,[ebp+0x27]
c0008156:	ba 00 00 21 50       	mov    edx,0x50210000
c000815b:	e8 77 9b ff ff       	call   c0001cd7 <st_dword>
c0008160:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008165:	8d 45 16             	lea    eax,[ebp+0x16]
c0008168:	e8 66 9b ff ff       	call   c0001cd3 <st_word>
c000816d:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008171:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008175:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008178:	b9 13 00 00 00       	mov    ecx,0x13
c000817d:	ba e2 90 02 c0       	mov    edx,0xc00290e2
c0008182:	e8 59 9b ff ff       	call   c0001ce0 <mem_cpy>
c0008187:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000818d:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008192:	89 f0                	mov    eax,esi
c0008194:	e8 3a 9b ff ff       	call   c0001cd3 <st_word>
c0008199:	83 ec 0c             	sub    esp,0xc
c000819c:	6a 01                	push   0x1
c000819e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00081a6:	55                   	push   ebp
c00081a7:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081ab:	e8 7c 9a ff ff       	call   c0001c2c <disk_write>
c00081b0:	83 c4 20             	add    esp,0x20
c00081b3:	85 c0                	test   eax,eax
c00081b5:	0f 85 67 02 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c00081bb:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081c0:	0f 85 b7 00 00 00    	jne    c000827d <f_mkfs+0xf0c>
c00081c6:	83 ec 0c             	sub    esp,0xc
c00081c9:	6a 01                	push   0x1
c00081cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081cf:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081d3:	83 c0 06             	add    eax,0x6
c00081d6:	83 d2 00             	adc    edx,0x0
c00081d9:	52                   	push   edx
c00081da:	50                   	push   eax
c00081db:	55                   	push   ebp
c00081dc:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081e0:	e8 47 9a ff ff       	call   c0001c2c <disk_write>
c00081e5:	83 c4 20             	add    esp,0x20
c00081e8:	b9 00 02 00 00       	mov    ecx,0x200
c00081ed:	31 d2                	xor    edx,edx
c00081ef:	89 e8                	mov    eax,ebp
c00081f1:	e8 ff 9a ff ff       	call   c0001cf5 <mem_set>
c00081f6:	ba 52 52 61 41       	mov    edx,0x41615252
c00081fb:	89 e8                	mov    eax,ebp
c00081fd:	e8 d5 9a ff ff       	call   c0001cd7 <st_dword>
c0008202:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c0008208:	ba 72 72 41 61       	mov    edx,0x61417272
c000820d:	e8 c5 9a ff ff       	call   c0001cd7 <st_dword>
c0008212:	8d 53 ff             	lea    edx,[ebx-0x1]
c0008215:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c000821b:	e8 b7 9a ff ff       	call   c0001cd7 <st_dword>
c0008220:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008226:	ba 02 00 00 00       	mov    edx,0x2
c000822b:	e8 a7 9a ff ff       	call   c0001cd7 <st_dword>
c0008230:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008235:	89 f0                	mov    eax,esi
c0008237:	e8 97 9a ff ff       	call   c0001cd3 <st_word>
c000823c:	83 ec 0c             	sub    esp,0xc
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 07             	add    eax,0x7
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 d1 99 ff ff       	call   c0001c2c <disk_write>
c000825b:	83 c4 14             	add    esp,0x14
c000825e:	6a 01                	push   0x1
c0008260:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008264:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008268:	83 c0 01             	add    eax,0x1
c000826b:	83 d2 00             	adc    edx,0x0
c000826e:	52                   	push   edx
c000826f:	50                   	push   eax
c0008270:	55                   	push   ebp
c0008271:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008275:	e8 b2 99 ff ff       	call   c0001c2c <disk_write>
c000827a:	83 c4 20             	add    esp,0x20
c000827d:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008284:	31 d2                	xor    edx,edx
c0008286:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000828c:	31 db                	xor    ebx,ebx
c000828e:	89 e8                	mov    eax,ebp
c0008290:	e8 60 9a ff ff       	call   c0001cf5 <mem_set>
c0008295:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000829a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00082a1:	0f 94 c3             	sete   bl
c00082a4:	4b                   	dec    ebx
c00082a5:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c00082ab:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c00082b1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00082b6:	75 21                	jne    c00082d9 <f_mkfs+0xf68>
c00082b8:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c00082bd:	89 e8                	mov    eax,ebp
c00082bf:	e8 13 9a ff ff       	call   c0001cd7 <st_dword>
c00082c4:	8d 45 04             	lea    eax,[ebp+0x4]
c00082c7:	83 ca ff             	or     edx,0xffffffff
c00082ca:	e8 08 9a ff ff       	call   c0001cd7 <st_dword>
c00082cf:	8d 45 08             	lea    eax,[ebp+0x8]
c00082d2:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082d7:	eb 04                	jmp    c00082dd <f_mkfs+0xf6c>
c00082d9:	89 da                	mov    edx,ebx
c00082db:	89 e8                	mov    eax,ebp
c00082dd:	e8 f5 99 ff ff       	call   c0001cd7 <st_dword>
c00082e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082ea:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082ee:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082f2:	39 ce                	cmp    esi,ecx
c00082f4:	76 02                	jbe    c00082f8 <f_mkfs+0xf87>
c00082f6:	89 ce                	mov    esi,ecx
c00082f8:	83 ec 0c             	sub    esp,0xc
c00082fb:	56                   	push   esi
c00082fc:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008300:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008304:	55                   	push   ebp
c0008305:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008309:	e8 1e 99 ff ff       	call   c0001c2c <disk_write>
c000830e:	83 c4 20             	add    esp,0x20
c0008311:	85 c0                	test   eax,eax
c0008313:	0f 85 09 01 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008319:	31 d2                	xor    edx,edx
c000831b:	b9 00 02 00 00       	mov    ecx,0x200
c0008320:	89 e8                	mov    eax,ebp
c0008322:	e8 ce 99 ff ff       	call   c0001cf5 <mem_set>
c0008327:	31 d2                	xor    edx,edx
c0008329:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000832d:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008331:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008335:	75 b3                	jne    c00082ea <f_mkfs+0xf79>
c0008337:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000833a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008341:	40                   	inc    eax
c0008342:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008346:	0f 87 65 ff ff ff    	ja     c00082b1 <f_mkfs+0xf40>
c000834c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008351:	74 04                	je     c0008357 <f_mkfs+0xfe6>
c0008353:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008357:	89 fb                	mov    ebx,edi
c0008359:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000835d:	76 04                	jbe    c0008363 <f_mkfs+0xff2>
c000835f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008363:	83 ec 0c             	sub    esp,0xc
c0008366:	53                   	push   ebx
c0008367:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000836f:	55                   	push   ebp
c0008370:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008374:	e8 b3 98 ff ff       	call   c0001c2c <disk_write>
c0008379:	83 c4 20             	add    esp,0x20
c000837c:	85 c0                	test   eax,eax
c000837e:	0f 85 9e 00 00 00    	jne    c0008422 <f_mkfs+0x10b1>
c0008384:	31 d2                	xor    edx,edx
c0008386:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000838a:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000838e:	29 df                	sub    edi,ebx
c0008390:	75 c5                	jne    c0008357 <f_mkfs+0xfe6>
c0008392:	b1 0c                	mov    cl,0xc
c0008394:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008399:	74 1d                	je     c00083b8 <f_mkfs+0x1047>
c000839b:	b8 ff ff 00 00       	mov    eax,0xffff
c00083a0:	b1 06                	mov    cl,0x6
c00083a2:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c00083a6:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c00083aa:	72 0c                	jb     c00083b8 <f_mkfs+0x1047>
c00083ac:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c00083b1:	0f 94 c1             	sete   cl
c00083b4:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c00083b8:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c00083bd:	75 4c                	jne    c000840b <f_mkfs+0x109a>
c00083bf:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083c3:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083c7:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083ce:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083d5:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083e0:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083eb:	0f b6 c9             	movzx  ecx,cl
c00083ee:	83 ec 0c             	sub    esp,0xc
c00083f1:	55                   	push   ebp
c00083f2:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083f9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083fd:	e8 2f c2 ff ff       	call   c0004631 <create_partition>
c0008402:	83 c4 10             	add    esp,0x10
c0008405:	89 c3                	mov    ebx,eax
c0008407:	85 c0                	test   eax,eax
c0008409:	75 34                	jne    c000843f <f_mkfs+0x10ce>
c000840b:	31 db                	xor    ebx,ebx
c000840d:	50                   	push   eax
c000840e:	6a 00                	push   0x0
c0008410:	6a 00                	push   0x0
c0008412:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008416:	e8 27 98 ff ff       	call   c0001c42 <disk_ioctl>
c000841b:	83 c4 10             	add    esp,0x10
c000841e:	85 c0                	test   eax,eax
c0008420:	74 1d                	je     c000843f <f_mkfs+0x10ce>
c0008422:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000842a:	75 0c                	jne    c0008438 <f_mkfs+0x10c7>
c000842c:	83 ec 0c             	sub    esp,0xc
c000842f:	55                   	push   ebp
c0008430:	e8 75 00 00 00       	call   c00084aa <ff_memfree>
c0008435:	83 c4 10             	add    esp,0x10
c0008438:	bb 01 00 00 00       	mov    ebx,0x1
c000843d:	eb 48                	jmp    c0008487 <f_mkfs+0x1116>
c000843f:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008447:	75 3e                	jne    c0008487 <f_mkfs+0x1116>
c0008449:	83 ec 0c             	sub    esp,0xc
c000844c:	55                   	push   ebp
c000844d:	e8 58 00 00 00       	call   c00084aa <ff_memfree>
c0008452:	83 c4 10             	add    esp,0x10
c0008455:	eb 30                	jmp    c0008487 <f_mkfs+0x1116>
c0008457:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845c:	0f 85 eb fa ff ff    	jne    c0007f4d <f_mkfs+0xbdc>
c0008462:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008466:	81 ff 80 00 00 00    	cmp    edi,0x80
c000846c:	0f 86 b8 f9 ff ff    	jbe    c0007e2a <f_mkfs+0xab9>
c0008472:	e9 bf fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008477:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000847c:	0f 85 c0 fa ff ff    	jne    c0007f42 <f_mkfs+0xbd1>
c0008482:	e9 af fb ff ff       	jmp    c0008036 <f_mkfs+0xcc5>
c0008487:	81 c4 9c 00 00 00    	add    esp,0x9c
c000848d:	89 d8                	mov    eax,ebx
c000848f:	5b                   	pop    ebx
c0008490:	5e                   	pop    esi
c0008491:	5f                   	pop    edi
c0008492:	5d                   	pop    ebp
c0008493:	c3                   	ret    

c0008494 <ff_memalloc>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	83 ec 0c             	sub    esp,0xc
c000849a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000849e:	e8 9d 73 00 00       	call   c000f840 <malloc>
c00084a3:	83 c4 10             	add    esp,0x10
c00084a6:	83 c4 0c             	add    esp,0xc
c00084a9:	c3                   	ret    

c00084aa <ff_memfree>:
c00084aa:	83 ec 0c             	sub    esp,0xc
c00084ad:	83 ec 0c             	sub    esp,0xc
c00084b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084b4:	e8 97 73 00 00       	call   c000f850 <free>
c00084b9:	83 c4 10             	add    esp,0x10
c00084bc:	90                   	nop
c00084bd:	83 c4 0c             	add    esp,0xc
c00084c0:	c3                   	ret    

c00084c1 <ff_uni2oem>:
c00084c1:	83 ec 14             	sub    esp,0x14
c00084c4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084c8:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084cc:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084d3:	c7 44 24 0c 00 94 02 c0 	mov    DWORD PTR [esp+0xc],0xc0029400
c00084db:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084e0:	77 0b                	ja     c00084ed <ff_uni2oem+0x2c>
c00084e2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084e6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084eb:	eb 5b                	jmp    c0008548 <ff_uni2oem+0x87>
c00084ed:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084f5:	77 51                	ja     c0008548 <ff_uni2oem+0x87>
c00084f7:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084fd:	75 49                	jne    c0008548 <ff_uni2oem+0x87>
c00084ff:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0008506:	eb 0b                	jmp    c0008513 <ff_uni2oem+0x52>
c0008508:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000850d:	40                   	inc    eax
c000850e:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008513:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c0008519:	77 1b                	ja     c0008536 <ff_uni2oem+0x75>
c000851b:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008520:	01 c0                	add    eax,eax
c0008522:	89 c2                	mov    edx,eax
c0008524:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008528:	01 d0                	add    eax,edx
c000852a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000852d:	0f b7 c0             	movzx  eax,ax
c0008530:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008534:	75 d2                	jne    c0008508 <ff_uni2oem+0x47>
c0008536:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000853b:	83 e8 80             	sub    eax,0xffffff80
c000853e:	25 ff 00 00 00       	and    eax,0xff
c0008543:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008548:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000854d:	83 c4 14             	add    esp,0x14
c0008550:	c3                   	ret    

c0008551 <ff_oem2uni>:
c0008551:	83 ec 18             	sub    esp,0x18
c0008554:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008558:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000855c:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008561:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008565:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000856c:	c7 44 24 10 00 94 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029400
c0008574:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000857a:	77 0b                	ja     c0008587 <ff_oem2uni+0x36>
c000857c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008580:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008585:	eb 2d                	jmp    c00085b4 <ff_oem2uni+0x63>
c0008587:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000858d:	75 25                	jne    c00085b4 <ff_oem2uni+0x63>
c000858f:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008596:	77 1c                	ja     c00085b4 <ff_oem2uni+0x63>
c0008598:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000859d:	05 80 ff ff 7f       	add    eax,0x7fffff80
c00085a2:	01 c0                	add    eax,eax
c00085a4:	89 c2                	mov    edx,eax
c00085a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00085aa:	01 d0                	add    eax,edx
c00085ac:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085af:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c00085b4:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c00085b9:	83 c4 18             	add    esp,0x18
c00085bc:	c3                   	ret    

c00085bd <ff_wtoupper>:
c00085bd:	83 ec 10             	sub    esp,0x10
c00085c0:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085c8:	0f 87 3e 01 00 00    	ja     c000870c <ff_wtoupper+0x14f>
c00085ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085d2:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085d7:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085de:	77 07                	ja     c00085e7 <ff_wtoupper+0x2a>
c00085e0:	b8 00 92 02 c0       	mov    eax,0xc0029200
c00085e5:	eb 05                	jmp    c00085ec <ff_wtoupper+0x2f>
c00085e7:	b8 40 91 02 c0       	mov    eax,0xc0029140
c00085ec:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085f0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085f4:	8d 50 02             	lea    edx,[eax+0x2]
c00085f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085fb:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085fe:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0008603:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c0008609:	0f 84 f4 00 00 00    	je     c0008703 <ff_wtoupper+0x146>
c000860f:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0008614:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c0008619:	0f 82 e4 00 00 00    	jb     c0008703 <ff_wtoupper+0x146>
c000861f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008623:	8d 50 02             	lea    edx,[eax+0x2]
c0008626:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000862a:	66 8b 00             	mov    ax,WORD PTR [eax]
c000862d:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008632:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008637:	66 c1 e8 08          	shr    ax,0x8
c000863b:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008640:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008647:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000864c:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008651:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008656:	01 ca                	add    edx,ecx
c0008658:	39 d0                	cmp    eax,edx
c000865a:	0f 8d 86 00 00 00    	jge    c00086e6 <ff_wtoupper+0x129>
c0008660:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008665:	83 f8 08             	cmp    eax,0x8
c0008668:	0f 87 94 00 00 00    	ja     c0008702 <ff_wtoupper+0x145>
c000866e:	8b 04 85 00 91 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6f00]
c0008675:	ff e0                	jmp    eax
c0008677:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000867c:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008681:	29 c2                	sub    edx,eax
c0008683:	89 d0                	mov    eax,edx
c0008685:	01 c0                	add    eax,eax
c0008687:	89 c2                	mov    edx,eax
c0008689:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000868d:	01 d0                	add    eax,edx
c000868f:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008692:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008697:	eb 4b                	jmp    c00086e4 <ff_wtoupper+0x127>
c0008699:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000869e:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00086a2:	83 e0 01             	and    eax,0x1
c00086a5:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c00086aa:	eb 38                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086ac:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c00086b2:	eb 30                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086b4:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c00086ba:	eb 28                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086bc:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086c2:	eb 20                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086c4:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ca:	eb 18                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086cc:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086d2:	eb 10                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086d4:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086da:	eb 08                	jmp    c00086e4 <ff_wtoupper+0x127>
c00086dc:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086e3:	90                   	nop
c00086e4:	eb 1c                	jmp    c0008702 <ff_wtoupper+0x145>
c00086e6:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086ec:	0f 85 fe fe ff ff    	jne    c00085f0 <ff_wtoupper+0x33>
c00086f2:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086f7:	01 c0                	add    eax,eax
c00086f9:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086fd:	e9 ee fe ff ff       	jmp    c00085f0 <ff_wtoupper+0x33>
c0008702:	90                   	nop
c0008703:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0008708:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000870c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008710:	83 c4 10             	add    esp,0x10
c0008713:	c3                   	ret    

c0008714 <psrc_set_converter>:
c0008714:	56                   	push   esi
c0008715:	89 d6                	mov    esi,edx
c0008717:	53                   	push   ebx
c0008718:	89 c3                	mov    ebx,eax
c000871a:	83 ec 0c             	sub    esp,0xc
c000871d:	52                   	push   edx
c000871e:	50                   	push   eax
c000871f:	e8 6f 55 00 00       	call   c000dc93 <sinc_set_converter>
c0008724:	83 c4 10             	add    esp,0x10
c0008727:	85 c0                	test   eax,eax
c0008729:	74 25                	je     c0008750 <psrc_set_converter+0x3c>
c000872b:	50                   	push   eax
c000872c:	50                   	push   eax
c000872d:	56                   	push   esi
c000872e:	53                   	push   ebx
c000872f:	e8 17 5d 00 00       	call   c000e44b <zoh_set_converter>
c0008734:	83 c4 10             	add    esp,0x10
c0008737:	85 c0                	test   eax,eax
c0008739:	74 15                	je     c0008750 <psrc_set_converter+0x3c>
c000873b:	51                   	push   ecx
c000873c:	51                   	push   ecx
c000873d:	56                   	push   esi
c000873e:	53                   	push   ebx
c000873f:	e8 0f 11 00 00       	call   c0009853 <linear_set_converter>
c0008744:	83 c4 10             	add    esp,0x10
c0008747:	ba 0a 00 00 00       	mov    edx,0xa
c000874c:	85 c0                	test   eax,eax
c000874e:	75 02                	jne    c0008752 <psrc_set_converter+0x3e>
c0008750:	31 d2                	xor    edx,edx
c0008752:	89 d0                	mov    eax,edx
c0008754:	5a                   	pop    edx
c0008755:	5b                   	pop    ebx
c0008756:	5e                   	pop    esi
c0008757:	c3                   	ret    

c0008758 <src_delete>:
c0008758:	53                   	push   ebx
c0008759:	83 ec 08             	sub    esp,0x8
c000875c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008760:	85 db                	test   ebx,ebx
c0008762:	74 29                	je     c000878d <src_delete+0x35>
c0008764:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008767:	85 c0                	test   eax,eax
c0008769:	74 0c                	je     c0008777 <src_delete+0x1f>
c000876b:	83 ec 0c             	sub    esp,0xc
c000876e:	50                   	push   eax
c000876f:	e8 dc 70 00 00       	call   c000f850 <free>
c0008774:	83 c4 10             	add    esp,0x10
c0008777:	50                   	push   eax
c0008778:	6a 3c                	push   0x3c
c000877a:	6a 00                	push   0x0
c000877c:	53                   	push   ebx
c000877d:	e8 f6 7f ff ff       	call   c0000778 <memset>
c0008782:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008785:	e8 c6 70 00 00       	call   c000f850 <free>
c000878a:	83 c4 10             	add    esp,0x10
c000878d:	31 c0                	xor    eax,eax
c000878f:	83 c4 08             	add    esp,0x8
c0008792:	5b                   	pop    ebx
c0008793:	c3                   	ret    

c0008794 <src_process>:
c0008794:	55                   	push   ebp
c0008795:	57                   	push   edi
c0008796:	56                   	push   esi
c0008797:	53                   	push   ebx
c0008798:	83 ec 1c             	sub    esp,0x1c
c000879b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000879f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00087a3:	85 ed                	test   ebp,ebp
c00087a5:	0f 84 6f 01 00 00    	je     c000891a <src_process+0x186>
c00087ab:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c00087af:	0f 84 6c 01 00 00    	je     c0008921 <src_process+0x18d>
c00087b5:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c00087b9:	0f 84 62 01 00 00    	je     c0008921 <src_process+0x18d>
c00087bf:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087c6:	0f 85 5c 01 00 00    	jne    c0008928 <src_process+0x194>
c00087cc:	85 db                	test   ebx,ebx
c00087ce:	0f 84 5b 01 00 00    	je     c000892f <src_process+0x19b>
c00087d4:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087d6:	85 f6                	test   esi,esi
c00087d8:	0f 84 58 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087de:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087e1:	85 ff                	test   edi,edi
c00087e3:	0f 84 4d 01 00 00    	je     c0008936 <src_process+0x1a2>
c00087e9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087ef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087f3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087f7:	68 00 00 70 3f       	push   0x3f700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 b4 f8 01 00       	call   c00280bf <__ltdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 88 27 01 00 00    	js     c000893d <src_process+0x1a9>
c0008816:	68 00 00 70 40       	push   0x40700000
c000881b:	6a 00                	push   0x0
c000881d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008821:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008825:	e8 77 f8 01 00       	call   c00280a1 <__gtdf2>
c000882a:	83 c4 10             	add    esp,0x10
c000882d:	85 c0                	test   eax,eax
c000882f:	0f 8f 08 01 00 00    	jg     c000893d <src_process+0x1a9>
c0008835:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0008839:	79 07                	jns    c0008842 <src_process+0xae>
c000883b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008842:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008845:	85 c0                	test   eax,eax
c0008847:	79 50                	jns    c0008899 <src_process+0x105>
c0008849:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008850:	39 fe                	cmp    esi,edi
c0008852:	72 37                	jb     c000888b <src_process+0xf7>
c0008854:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000885b:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008862:	68 00 00 70 3f       	push   0x3f700000
c0008867:	6a 00                	push   0x0
c0008869:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000886c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000886f:	e8 4b f8 01 00       	call   c00280bf <__ltdf2>
c0008874:	83 c4 10             	add    esp,0x10
c0008877:	85 c0                	test   eax,eax
c0008879:	79 37                	jns    c00088b2 <src_process+0x11e>
c000887b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000887f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008883:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008886:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c0008889:	eb 27                	jmp    c00088b2 <src_process+0x11e>
c000888b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000888e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008892:	8d 04 86             	lea    eax,[esi+eax*4]
c0008895:	39 c7                	cmp    edi,eax
c0008897:	eb 0d                	jmp    c00088a6 <src_process+0x112>
c0008899:	39 fe                	cmp    esi,edi
c000889b:	72 ee                	jb     c000888b <src_process+0xf7>
c000889d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c00088a1:	8d 04 87             	lea    eax,[edi+eax*4]
c00088a4:	39 c6                	cmp    esi,eax
c00088a6:	73 ac                	jae    c0008854 <src_process+0xc0>
c00088a8:	b8 10 00 00 00       	mov    eax,0x10
c00088ad:	e9 90 00 00 00       	jmp    c0008942 <src_process+0x1ae>
c00088b2:	83 ec 10             	sub    esp,0x10
c00088b5:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c00088b8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00088bb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c00088be:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088c1:	e8 fe ee 01 00       	call   c00277c4 <__subdf3>
c00088c6:	83 c4 18             	add    esp,0x18
c00088c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088d1:	52                   	push   edx
c00088d2:	50                   	push   eax
c00088d3:	e8 78 f9 01 00       	call   c0028250 <fabs>
c00088d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088e0:	83 c4 10             	add    esp,0x10
c00088e3:	68 af 03 d2 3c       	push   0x3cd203af
c00088e8:	68 16 56 e7 9e       	push   0x9ee75616
c00088ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088f5:	e8 c5 f7 01 00       	call   c00280bf <__ltdf2>
c00088fa:	83 c4 10             	add    esp,0x10
c00088fd:	85 c0                	test   eax,eax
c00088ff:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0008903:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c0008907:	79 05                	jns    c000890e <src_process+0x17a>
c0008909:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c000890c:	eb 03                	jmp    c0008911 <src_process+0x17d>
c000890e:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c0008911:	83 c4 1c             	add    esp,0x1c
c0008914:	5b                   	pop    ebx
c0008915:	5e                   	pop    esi
c0008916:	5f                   	pop    edi
c0008917:	5d                   	pop    ebp
c0008918:	ff e0                	jmp    eax
c000891a:	b8 02 00 00 00       	mov    eax,0x2
c000891f:	eb 21                	jmp    c0008942 <src_process+0x1ae>
c0008921:	b8 07 00 00 00       	mov    eax,0x7
c0008926:	eb 1a                	jmp    c0008942 <src_process+0x1ae>
c0008928:	b8 12 00 00 00       	mov    eax,0x12
c000892d:	eb 13                	jmp    c0008942 <src_process+0x1ae>
c000892f:	b8 03 00 00 00       	mov    eax,0x3
c0008934:	eb 0c                	jmp    c0008942 <src_process+0x1ae>
c0008936:	b8 04 00 00 00       	mov    eax,0x4
c000893b:	eb 05                	jmp    c0008942 <src_process+0x1ae>
c000893d:	b8 06 00 00 00       	mov    eax,0x6
c0008942:	83 c4 1c             	add    esp,0x1c
c0008945:	5b                   	pop    ebx
c0008946:	5e                   	pop    esi
c0008947:	5f                   	pop    edi
c0008948:	5d                   	pop    ebp
c0008949:	c3                   	ret    

c000894a <src_callback_read>:
c000894a:	55                   	push   ebp
c000894b:	57                   	push   edi
c000894c:	56                   	push   esi
c000894d:	53                   	push   ebx
c000894e:	83 ec 3c             	sub    esp,0x3c
c0008951:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008955:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0008959:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000895d:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008961:	85 ed                	test   ebp,ebp
c0008963:	0f 8e 52 01 00 00    	jle    c0008abb <src_callback_read+0x171>
c0008969:	85 db                	test   ebx,ebx
c000896b:	0f 84 4a 01 00 00    	je     c0008abb <src_callback_read+0x171>
c0008971:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008978:	74 0c                	je     c0008986 <src_callback_read+0x3c>
c000897a:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008981:	e9 35 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008986:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000898a:	75 0c                	jne    c0008998 <src_callback_read+0x4e>
c000898c:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008993:	e9 23 01 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008998:	51                   	push   ecx
c0008999:	6a 24                	push   0x24
c000899b:	6a 00                	push   0x0
c000899d:	8d 44 24 18          	lea    eax,[esp+0x18]
c00089a1:	50                   	push   eax
c00089a2:	e8 d1 7d ff ff       	call   c0000778 <memset>
c00089a7:	83 c4 10             	add    esp,0x10
c00089aa:	68 00 00 70 3f       	push   0x3f700000
c00089af:	6a 00                	push   0x0
c00089b1:	57                   	push   edi
c00089b2:	56                   	push   esi
c00089b3:	e8 07 f7 01 00       	call   c00280bf <__ltdf2>
c00089b8:	83 c4 10             	add    esp,0x10
c00089bb:	85 c0                	test   eax,eax
c00089bd:	78 3e                	js     c00089fd <src_callback_read+0xb3>
c00089bf:	68 00 00 70 40       	push   0x40700000
c00089c4:	6a 00                	push   0x0
c00089c6:	57                   	push   edi
c00089c7:	56                   	push   esi
c00089c8:	e8 d4 f6 01 00       	call   c00280a1 <__gtdf2>
c00089cd:	83 c4 10             	add    esp,0x10
c00089d0:	85 c0                	test   eax,eax
c00089d2:	7f 29                	jg     c00089fd <src_callback_read+0xb3>
c00089d4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089d8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089dc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089e0:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089e4:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089e7:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089eb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089ef:	31 f6                	xor    esi,esi
c00089f1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089f8:	e9 97 00 00 00       	jmp    c0008a94 <src_callback_read+0x14a>
c00089fd:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c0008a04:	e9 b2 00 00 00       	jmp    c0008abb <src_callback_read+0x171>
c0008a09:	8d 44 24 04          	lea    eax,[esp+0x4]
c0008a0d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008a11:	52                   	push   edx
c0008a12:	52                   	push   edx
c0008a13:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008a17:	50                   	push   eax
c0008a18:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a1b:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c0008a1e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a22:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a26:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a2a:	83 c4 10             	add    esp,0x10
c0008a2d:	85 c0                	test   eax,eax
c0008a2f:	75 08                	jne    c0008a39 <src_callback_read+0xef>
c0008a31:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a39:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a40:	50                   	push   eax
c0008a41:	50                   	push   eax
c0008a42:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a46:	50                   	push   eax
c0008a47:	53                   	push   ebx
c0008a48:	e8 47 fd ff ff       	call   c0008794 <src_process>
c0008a4d:	83 c4 10             	add    esp,0x10
c0008a50:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a57:	85 c0                	test   eax,eax
c0008a59:	75 49                	jne    c0008aa4 <src_callback_read+0x15a>
c0008a5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a5f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a62:	89 f9                	mov    ecx,edi
c0008a64:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a68:	0f af ca             	imul   ecx,edx
c0008a6b:	c1 e1 02             	shl    ecx,0x2
c0008a6e:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a72:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a76:	0f af d1             	imul   edx,ecx
c0008a79:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a7d:	c1 e2 02             	shl    edx,0x2
c0008a80:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a84:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a87:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a8c:	74 12                	je     c0008aa0 <src_callback_read+0x156>
c0008a8e:	39 d5                	cmp    ebp,edx
c0008a90:	7e 14                	jle    c0008aa6 <src_callback_read+0x15c>
c0008a92:	89 d6                	mov    esi,edx
c0008a94:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a99:	75 9e                	jne    c0008a39 <src_callback_read+0xef>
c0008a9b:	e9 69 ff ff ff       	jmp    c0008a09 <src_callback_read+0xbf>
c0008aa0:	85 c9                	test   ecx,ecx
c0008aa2:	75 ea                	jne    c0008a8e <src_callback_read+0x144>
c0008aa4:	89 f2                	mov    edx,esi
c0008aa6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008aaa:	85 c0                	test   eax,eax
c0008aac:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008aaf:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008ab3:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008ab6:	74 05                	je     c0008abd <src_callback_read+0x173>
c0008ab8:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008abb:	31 d2                	xor    edx,edx
c0008abd:	83 c4 3c             	add    esp,0x3c
c0008ac0:	89 d0                	mov    eax,edx
c0008ac2:	5b                   	pop    ebx
c0008ac3:	5e                   	pop    esi
c0008ac4:	5f                   	pop    edi
c0008ac5:	5d                   	pop    ebp
c0008ac6:	c3                   	ret    

c0008ac7 <src_set_ratio>:
c0008ac7:	57                   	push   edi
c0008ac8:	ba 02 00 00 00       	mov    edx,0x2
c0008acd:	56                   	push   esi
c0008ace:	53                   	push   ebx
c0008acf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ad3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ad7:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008adb:	85 db                	test   ebx,ebx
c0008add:	74 4c                	je     c0008b2b <src_set_ratio+0x64>
c0008adf:	ba 07 00 00 00       	mov    edx,0x7
c0008ae4:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ae8:	74 41                	je     c0008b2b <src_set_ratio+0x64>
c0008aea:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008aee:	74 3b                	je     c0008b2b <src_set_ratio+0x64>
c0008af0:	68 00 00 70 3f       	push   0x3f700000
c0008af5:	6a 00                	push   0x0
c0008af7:	57                   	push   edi
c0008af8:	56                   	push   esi
c0008af9:	e8 c1 f5 01 00       	call   c00280bf <__ltdf2>
c0008afe:	83 c4 10             	add    esp,0x10
c0008b01:	ba 06 00 00 00       	mov    edx,0x6
c0008b06:	85 c0                	test   eax,eax
c0008b08:	78 21                	js     c0008b2b <src_set_ratio+0x64>
c0008b0a:	68 00 00 70 40       	push   0x40700000
c0008b0f:	6a 00                	push   0x0
c0008b11:	57                   	push   edi
c0008b12:	56                   	push   esi
c0008b13:	e8 89 f5 01 00       	call   c00280a1 <__gtdf2>
c0008b18:	83 c4 10             	add    esp,0x10
c0008b1b:	ba 06 00 00 00       	mov    edx,0x6
c0008b20:	85 c0                	test   eax,eax
c0008b22:	7f 07                	jg     c0008b2b <src_set_ratio+0x64>
c0008b24:	89 33                	mov    DWORD PTR [ebx],esi
c0008b26:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b29:	31 d2                	xor    edx,edx
c0008b2b:	5b                   	pop    ebx
c0008b2c:	89 d0                	mov    eax,edx
c0008b2e:	5e                   	pop    esi
c0008b2f:	5f                   	pop    edi
c0008b30:	c3                   	ret    

c0008b31 <src_get_channels>:
c0008b31:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	85 d2                	test   edx,edx
c0008b3c:	74 14                	je     c0008b52 <src_get_channels+0x21>
c0008b3e:	b8 07 00 00 00       	mov    eax,0x7
c0008b43:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b47:	74 09                	je     c0008b52 <src_get_channels+0x21>
c0008b49:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b4d:	74 03                	je     c0008b52 <src_get_channels+0x21>
c0008b4f:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b52:	c3                   	ret    

c0008b53 <src_reset>:
c0008b53:	53                   	push   ebx
c0008b54:	b8 02 00 00 00       	mov    eax,0x2
c0008b59:	83 ec 08             	sub    esp,0x8
c0008b5c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b60:	85 db                	test   ebx,ebx
c0008b62:	74 36                	je     c0008b9a <src_reset+0x47>
c0008b64:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b67:	85 c0                	test   eax,eax
c0008b69:	74 09                	je     c0008b74 <src_reset+0x21>
c0008b6b:	83 ec 0c             	sub    esp,0xc
c0008b6e:	53                   	push   ebx
c0008b6f:	ff d0                	call   eax
c0008b71:	83 c4 10             	add    esp,0x10
c0008b74:	31 c0                	xor    eax,eax
c0008b76:	31 d2                	xor    edx,edx
c0008b78:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b7b:	89 03                	mov    DWORD PTR [ebx],eax
c0008b7d:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b80:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b83:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b8a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b91:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b98:	31 c0                	xor    eax,eax
c0008b9a:	83 c4 08             	add    esp,0x8
c0008b9d:	5b                   	pop    ebx
c0008b9e:	c3                   	ret    

c0008b9f <src_new>:
c0008b9f:	57                   	push   edi
c0008ba0:	56                   	push   esi
c0008ba1:	53                   	push   ebx
c0008ba2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008ba6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008baa:	85 f6                	test   esi,esi
c0008bac:	74 73                	je     c0008c21 <src_new+0x82>
c0008bae:	85 ff                	test   edi,edi
c0008bb0:	7f 08                	jg     c0008bba <src_new+0x1b>
c0008bb2:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008bb8:	eb 1e                	jmp    c0008bd8 <src_new+0x39>
c0008bba:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008bc0:	50                   	push   eax
c0008bc1:	50                   	push   eax
c0008bc2:	6a 3c                	push   0x3c
c0008bc4:	6a 01                	push   0x1
c0008bc6:	e8 a5 6c 00 00       	call   c000f870 <calloc>
c0008bcb:	83 c4 10             	add    esp,0x10
c0008bce:	89 c3                	mov    ebx,eax
c0008bd0:	85 c0                	test   eax,eax
c0008bd2:	75 10                	jne    c0008be4 <src_new+0x45>
c0008bd4:	85 f6                	test   esi,esi
c0008bd6:	75 04                	jne    c0008bdc <src_new+0x3d>
c0008bd8:	31 db                	xor    ebx,ebx
c0008bda:	eb 4b                	jmp    c0008c27 <src_new+0x88>
c0008bdc:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008be2:	eb 43                	jmp    c0008c27 <src_new+0x88>
c0008be4:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008be7:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bf2:	e8 1d fb ff ff       	call   c0008714 <psrc_set_converter>
c0008bf7:	85 c0                	test   eax,eax
c0008bf9:	74 18                	je     c0008c13 <src_new+0x74>
c0008bfb:	85 f6                	test   esi,esi
c0008bfd:	74 06                	je     c0008c05 <src_new+0x66>
c0008bff:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008c05:	83 ec 0c             	sub    esp,0xc
c0008c08:	53                   	push   ebx
c0008c09:	31 db                	xor    ebx,ebx
c0008c0b:	e8 40 6c 00 00       	call   c000f850 <free>
c0008c10:	83 c4 10             	add    esp,0x10
c0008c13:	83 ec 0c             	sub    esp,0xc
c0008c16:	53                   	push   ebx
c0008c17:	e8 37 ff ff ff       	call   c0008b53 <src_reset>
c0008c1c:	83 c4 10             	add    esp,0x10
c0008c1f:	eb 06                	jmp    c0008c27 <src_new+0x88>
c0008c21:	85 ff                	test   edi,edi
c0008c23:	7f 9b                	jg     c0008bc0 <src_new+0x21>
c0008c25:	eb b1                	jmp    c0008bd8 <src_new+0x39>
c0008c27:	89 d8                	mov    eax,ebx
c0008c29:	5b                   	pop    ebx
c0008c2a:	5e                   	pop    esi
c0008c2b:	5f                   	pop    edi
c0008c2c:	c3                   	ret    

c0008c2d <src_callback_new>:
c0008c2d:	56                   	push   esi
c0008c2e:	53                   	push   ebx
c0008c2f:	53                   	push   ebx
c0008c30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c34:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c38:	85 f6                	test   esi,esi
c0008c3a:	75 0e                	jne    c0008c4a <src_callback_new+0x1d>
c0008c3c:	31 db                	xor    ebx,ebx
c0008c3e:	85 c0                	test   eax,eax
c0008c40:	74 47                	je     c0008c89 <src_callback_new+0x5c>
c0008c42:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c48:	eb 3f                	jmp    c0008c89 <src_callback_new+0x5c>
c0008c4a:	85 c0                	test   eax,eax
c0008c4c:	74 06                	je     c0008c54 <src_callback_new+0x27>
c0008c4e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c54:	51                   	push   ecx
c0008c55:	50                   	push   eax
c0008c56:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c5e:	e8 3c ff ff ff       	call   c0008b9f <src_new>
c0008c63:	83 c4 10             	add    esp,0x10
c0008c66:	89 c3                	mov    ebx,eax
c0008c68:	85 c0                	test   eax,eax
c0008c6a:	74 1d                	je     c0008c89 <src_callback_new+0x5c>
c0008c6c:	83 ec 0c             	sub    esp,0xc
c0008c6f:	50                   	push   eax
c0008c70:	e8 de fe ff ff       	call   c0008b53 <src_reset>
c0008c75:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c79:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c80:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c83:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c86:	83 c4 10             	add    esp,0x10
c0008c89:	89 d8                	mov    eax,ebx
c0008c8b:	5a                   	pop    edx
c0008c8c:	5b                   	pop    ebx
c0008c8d:	5e                   	pop    esi
c0008c8e:	c3                   	ret    

c0008c8f <src_get_name>:
c0008c8f:	53                   	push   ebx
c0008c90:	83 ec 14             	sub    esp,0x14
c0008c93:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c97:	53                   	push   ebx
c0008c98:	e8 d0 4f 00 00       	call   c000dc6d <sinc_get_name>
c0008c9d:	83 c4 10             	add    esp,0x10
c0008ca0:	85 c0                	test   eax,eax
c0008ca2:	75 1d                	jne    c0008cc1 <src_get_name+0x32>
c0008ca4:	83 ec 0c             	sub    esp,0xc
c0008ca7:	53                   	push   ebx
c0008ca8:	e8 80 57 00 00       	call   c000e42d <zoh_get_name>
c0008cad:	83 c4 10             	add    esp,0x10
c0008cb0:	85 c0                	test   eax,eax
c0008cb2:	75 0d                	jne    c0008cc1 <src_get_name+0x32>
c0008cb4:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cb8:	83 c4 08             	add    esp,0x8
c0008cbb:	5b                   	pop    ebx
c0008cbc:	e9 74 0b 00 00       	jmp    c0009835 <linear_get_name>
c0008cc1:	83 c4 08             	add    esp,0x8
c0008cc4:	5b                   	pop    ebx
c0008cc5:	c3                   	ret    

c0008cc6 <src_get_description>:
c0008cc6:	53                   	push   ebx
c0008cc7:	83 ec 14             	sub    esp,0x14
c0008cca:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008cce:	53                   	push   ebx
c0008ccf:	e8 ac 4f 00 00       	call   c000dc80 <sinc_get_description>
c0008cd4:	83 c4 10             	add    esp,0x10
c0008cd7:	85 c0                	test   eax,eax
c0008cd9:	75 1d                	jne    c0008cf8 <src_get_description+0x32>
c0008cdb:	83 ec 0c             	sub    esp,0xc
c0008cde:	53                   	push   ebx
c0008cdf:	e8 58 57 00 00       	call   c000e43c <zoh_get_description>
c0008ce4:	83 c4 10             	add    esp,0x10
c0008ce7:	85 c0                	test   eax,eax
c0008ce9:	75 0d                	jne    c0008cf8 <src_get_description+0x32>
c0008ceb:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cef:	83 c4 08             	add    esp,0x8
c0008cf2:	5b                   	pop    ebx
c0008cf3:	e9 4c 0b 00 00       	jmp    c0009844 <linear_get_description>
c0008cf8:	83 c4 08             	add    esp,0x8
c0008cfb:	5b                   	pop    ebx
c0008cfc:	c3                   	ret    

c0008cfd <src_get_version>:
c0008cfd:	b8 00 95 02 c0       	mov    eax,0xc0029500
c0008d02:	c3                   	ret    

c0008d03 <src_is_valid_ratio>:
c0008d03:	83 ec 1c             	sub    esp,0x1c
c0008d06:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008d0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008d0e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008d12:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008d16:	68 00 00 70 3f       	push   0x3f700000
c0008d1b:	6a 00                	push   0x0
c0008d1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d25:	e8 95 f3 01 00       	call   c00280bf <__ltdf2>
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	31 d2                	xor    edx,edx
c0008d2f:	85 c0                	test   eax,eax
c0008d31:	78 1e                	js     c0008d51 <src_is_valid_ratio+0x4e>
c0008d33:	68 00 00 70 40       	push   0x40700000
c0008d38:	6a 00                	push   0x0
c0008d3a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d3e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d42:	e8 5a f3 01 00       	call   c00280a1 <__gtdf2>
c0008d47:	31 d2                	xor    edx,edx
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	85 c0                	test   eax,eax
c0008d4e:	0f 9e c2             	setle  dl
c0008d51:	89 d0                	mov    eax,edx
c0008d53:	83 c4 1c             	add    esp,0x1c
c0008d56:	c3                   	ret    

c0008d57 <src_error>:
c0008d57:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d5b:	31 c0                	xor    eax,eax
c0008d5d:	85 d2                	test   edx,edx
c0008d5f:	74 03                	je     c0008d64 <src_error+0xd>
c0008d61:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d64:	c3                   	ret    

c0008d65 <src_strerror>:
c0008d65:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d69:	31 c0                	xor    eax,eax
c0008d6b:	83 fa 17             	cmp    edx,0x17
c0008d6e:	77 07                	ja     c0008d77 <src_strerror+0x12>
c0008d70:	8b 04 95 60 99 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd66a0]
c0008d77:	c3                   	ret    

c0008d78 <src_simple>:
c0008d78:	56                   	push   esi
c0008d79:	53                   	push   ebx
c0008d7a:	83 ec 18             	sub    esp,0x18
c0008d7d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d81:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d85:	50                   	push   eax
c0008d86:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d8e:	e8 0c fe ff ff       	call   c0008b9f <src_new>
c0008d93:	83 c4 10             	add    esp,0x10
c0008d96:	85 c0                	test   eax,eax
c0008d98:	75 06                	jne    c0008da0 <src_simple+0x28>
c0008d9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d9e:	eb 25                	jmp    c0008dc5 <src_simple+0x4d>
c0008da0:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008da7:	89 c3                	mov    ebx,eax
c0008da9:	50                   	push   eax
c0008daa:	50                   	push   eax
c0008dab:	56                   	push   esi
c0008dac:	53                   	push   ebx
c0008dad:	e8 e2 f9 ff ff       	call   c0008794 <src_process>
c0008db2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008db5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008db9:	e8 9a f9 ff ff       	call   c0008758 <src_delete>
c0008dbe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008dc2:	83 c4 10             	add    esp,0x10
c0008dc5:	83 c4 14             	add    esp,0x14
c0008dc8:	5b                   	pop    ebx
c0008dc9:	5e                   	pop    esi
c0008dca:	c3                   	ret    

c0008dcb <src_short_to_float_array>:
c0008dcb:	53                   	push   ebx
c0008dcc:	83 ec 18             	sub    esp,0x18
c0008dcf:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008dd3:	85 db                	test   ebx,ebx
c0008dd5:	74 54                	je     c0008e2b <src_short_to_float_array+0x60>
c0008dd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008ddb:	4b                   	dec    ebx
c0008ddc:	83 ec 0c             	sub    esp,0xc
c0008ddf:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008de3:	50                   	push   eax
c0008de4:	e8 6a f0 01 00       	call   c0027e53 <__floatsidf>
c0008de9:	83 c4 10             	add    esp,0x10
c0008dec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008df0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008df4:	68 00 00 00 3f       	push   0x3f000000
c0008df9:	6a 00                	push   0x0
c0008dfb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e03:	e8 e8 e9 01 00       	call   c00277f0 <__muldf3>
c0008e08:	59                   	pop    ecx
c0008e09:	59                   	pop    ecx
c0008e0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008e0e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008e12:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e16:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e1a:	e8 a4 f2 01 00       	call   c00280c3 <__truncdfsf2>
c0008e1f:	83 c4 10             	add    esp,0x10
c0008e22:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e26:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e29:	eb a8                	jmp    c0008dd3 <src_short_to_float_array+0x8>
c0008e2b:	83 c4 18             	add    esp,0x18
c0008e2e:	5b                   	pop    ebx
c0008e2f:	c3                   	ret    

c0008e30 <src_float_to_short_array>:
c0008e30:	56                   	push   esi
c0008e31:	53                   	push   ebx
c0008e32:	83 ec 14             	sub    esp,0x14
c0008e35:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e39:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e3d:	85 db                	test   ebx,ebx
c0008e3f:	0f 84 a4 00 00 00    	je     c0008ee9 <src_float_to_short_array+0xb9>
c0008e45:	83 ec 0c             	sub    esp,0xc
c0008e48:	4b                   	dec    ebx
c0008e49:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e4d:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e50:	e8 92 f3 01 00       	call   c00281e7 <__extendsfdf2>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 00 00 e0 41       	push   0x41e00000
c0008e65:	6a 00                	push   0x0
c0008e67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6f:	e8 7c e9 01 00       	call   c00277f0 <__muldf3>
c0008e74:	83 c4 10             	add    esp,0x10
c0008e77:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e7b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e7f:	68 ff ff df 41       	push   0x41dfffff
c0008e84:	68 00 00 c0 ff       	push   0xffc00000
c0008e89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	e8 27 f2 01 00       	call   c00280bd <__gedf2>
c0008e96:	83 c4 10             	add    esp,0x10
c0008e99:	85 c0                	test   eax,eax
c0008e9b:	78 08                	js     c0008ea5 <src_float_to_short_array+0x75>
c0008e9d:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008ea3:	eb 98                	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ea5:	68 00 00 e0 c1       	push   0xc1e00000
c0008eaa:	6a 00                	push   0x0
c0008eac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb4:	e8 08 f2 01 00       	call   c00280c1 <__ledf2>
c0008eb9:	83 c4 10             	add    esp,0x10
c0008ebc:	85 c0                	test   eax,eax
c0008ebe:	7f 0b                	jg     c0008ecb <src_float_to_short_array+0x9b>
c0008ec0:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ec6:	e9 72 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ecb:	50                   	push   eax
c0008ecc:	50                   	push   eax
c0008ecd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ed5:	e8 96 f3 01 00       	call   c0028270 <lrint>
c0008eda:	83 c4 10             	add    esp,0x10
c0008edd:	c1 f8 10             	sar    eax,0x10
c0008ee0:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ee4:	e9 54 ff ff ff       	jmp    c0008e3d <src_float_to_short_array+0xd>
c0008ee9:	83 c4 14             	add    esp,0x14
c0008eec:	5b                   	pop    ebx
c0008eed:	5e                   	pop    esi
c0008eee:	c3                   	ret    

c0008eef <src_int_to_float_array>:
c0008eef:	53                   	push   ebx
c0008ef0:	83 ec 18             	sub    esp,0x18
c0008ef3:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ef7:	85 db                	test   ebx,ebx
c0008ef9:	74 52                	je     c0008f4d <src_int_to_float_array+0x5e>
c0008efb:	83 ec 0c             	sub    esp,0xc
c0008efe:	4b                   	dec    ebx
c0008eff:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f03:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f06:	e8 48 ef 01 00       	call   c0027e53 <__floatsidf>
c0008f0b:	83 c4 10             	add    esp,0x10
c0008f0e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f12:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f16:	68 00 00 00 3e       	push   0x3e000000
c0008f1b:	6a 00                	push   0x0
c0008f1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f21:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f25:	e8 c6 e8 01 00       	call   c00277f0 <__muldf3>
c0008f2a:	59                   	pop    ecx
c0008f2b:	59                   	pop    ecx
c0008f2c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f30:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f3c:	e8 82 f1 01 00       	call   c00280c3 <__truncdfsf2>
c0008f41:	83 c4 10             	add    esp,0x10
c0008f44:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f48:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f4b:	eb aa                	jmp    c0008ef7 <src_int_to_float_array+0x8>
c0008f4d:	83 c4 18             	add    esp,0x18
c0008f50:	5b                   	pop    ebx
c0008f51:	c3                   	ret    

c0008f52 <src_float_to_int_array>:
c0008f52:	56                   	push   esi
c0008f53:	53                   	push   ebx
c0008f54:	83 ec 14             	sub    esp,0x14
c0008f57:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f5b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f5f:	85 db                	test   ebx,ebx
c0008f61:	0f 84 a2 00 00 00    	je     c0009009 <src_float_to_int_array+0xb7>
c0008f67:	83 ec 0c             	sub    esp,0xc
c0008f6a:	4b                   	dec    ebx
c0008f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f6f:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f72:	e8 70 f2 01 00       	call   c00281e7 <__extendsfdf2>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 00 00 e0 41       	push   0x41e00000
c0008f87:	6a 00                	push   0x0
c0008f89:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f91:	e8 5a e8 01 00       	call   c00277f0 <__muldf3>
c0008f96:	83 c4 10             	add    esp,0x10
c0008f99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008fa1:	68 ff ff df 41       	push   0x41dfffff
c0008fa6:	68 00 00 c0 ff       	push   0xffc00000
c0008fab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008faf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb3:	e8 05 f1 01 00       	call   c00280bd <__gedf2>
c0008fb8:	83 c4 10             	add    esp,0x10
c0008fbb:	85 c0                	test   eax,eax
c0008fbd:	78 09                	js     c0008fc8 <src_float_to_int_array+0x76>
c0008fbf:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fc6:	eb 97                	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fc8:	68 00 00 e0 c1       	push   0xc1e00000
c0008fcd:	6a 00                	push   0x0
c0008fcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd7:	e8 e5 f0 01 00       	call   c00280c1 <__ledf2>
c0008fdc:	83 c4 10             	add    esp,0x10
c0008fdf:	85 c0                	test   eax,eax
c0008fe1:	7f 0c                	jg     c0008fef <src_float_to_int_array+0x9d>
c0008fe3:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fea:	e9 70 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0008fef:	50                   	push   eax
c0008ff0:	50                   	push   eax
c0008ff1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008ff9:	e8 72 f2 01 00       	call   c0028270 <lrint>
c0008ffe:	83 c4 10             	add    esp,0x10
c0009001:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0009004:	e9 56 ff ff ff       	jmp    c0008f5f <src_float_to_int_array+0xd>
c0009009:	83 c4 14             	add    esp,0x14
c000900c:	5b                   	pop    ebx
c000900d:	5e                   	pop    esi
c000900e:	c3                   	ret    

c000900f <linear_vari_process>:
c000900f:	55                   	push   ebp
c0009010:	31 d2                	xor    edx,edx
c0009012:	57                   	push   edi
c0009013:	56                   	push   esi
c0009014:	53                   	push   ebx
c0009015:	83 ec 3c             	sub    esp,0x3c
c0009018:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000901c:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009020:	0f 8e d3 07 00 00    	jle    c00097f9 <linear_vari_process+0x7ea>
c0009026:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000902a:	ba 05 00 00 00       	mov    edx,0x5
c000902f:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009032:	85 db                	test   ebx,ebx
c0009034:	0f 84 bf 07 00 00    	je     c00097f9 <linear_vari_process+0x7ea>
c000903a:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000903d:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009041:	74 19                	je     c000905c <linear_vari_process+0x4d>
c0009043:	31 d2                	xor    edx,edx
c0009045:	39 c2                	cmp    edx,eax
c0009047:	7d 0c                	jge    c0009055 <linear_vari_process+0x46>
c0009049:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000904b:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000904e:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009052:	42                   	inc    edx
c0009053:	eb f0                	jmp    c0009045 <linear_vari_process+0x36>
c0009055:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000905c:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000905f:	0f af d0             	imul   edx,eax
c0009062:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009065:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c0009069:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009070:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009073:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000907a:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000907e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009081:	8b 00                	mov    eax,DWORD PTR [eax]
c0009083:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009087:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000908b:	68 00 00 70 3f       	push   0x3f700000
c0009090:	6a 00                	push   0x0
c0009092:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009096:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909a:	e8 20 f0 01 00       	call   c00280bf <__ltdf2>
c000909f:	83 c4 10             	add    esp,0x10
c00090a2:	ba 16 00 00 00       	mov    edx,0x16
c00090a7:	85 c0                	test   eax,eax
c00090a9:	0f 88 4a 07 00 00    	js     c00097f9 <linear_vari_process+0x7ea>
c00090af:	68 00 00 70 40       	push   0x40700000
c00090b4:	6a 00                	push   0x0
c00090b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00090be:	e8 de ef 01 00       	call   c00280a1 <__gtdf2>
c00090c3:	83 c4 10             	add    esp,0x10
c00090c6:	ba 16 00 00 00       	mov    edx,0x16
c00090cb:	85 c0                	test   eax,eax
c00090cd:	0f 8f 26 07 00 00    	jg     c00097f9 <linear_vari_process+0x7ea>
c00090d3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090d7:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090da:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090e5:	68 00 00 f0 3f       	push   0x3ff00000
c00090ea:	6a 00                	push   0x0
c00090ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090f4:	e8 c6 ef 01 00       	call   c00280bf <__ltdf2>
c00090f9:	83 c4 10             	add    esp,0x10
c00090fc:	85 c0                	test   eax,eax
c00090fe:	0f 89 89 02 00 00    	jns    c000938d <linear_vari_process+0x37e>
c0009104:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c0009107:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c000910a:	0f 8d 7d 02 00 00    	jge    c000938d <linear_vari_process+0x37e>
c0009110:	83 ec 0c             	sub    esp,0xc
c0009113:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009116:	e8 38 ed 01 00       	call   c0027e53 <__floatsidf>
c000911b:	83 c4 10             	add    esp,0x10
c000911e:	89 04 24             	mov    DWORD PTR [esp],eax
c0009121:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009125:	68 00 00 f0 3f       	push   0x3ff00000
c000912a:	6a 00                	push   0x0
c000912c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009130:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009134:	e8 3a e0 01 00       	call   c0027173 <__adddf3>
c0009139:	83 c4 10             	add    esp,0x10
c000913c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009140:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009144:	52                   	push   edx
c0009145:	50                   	push   eax
c0009146:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000914e:	e8 9d e6 01 00       	call   c00277f0 <__muldf3>
c0009153:	5d                   	pop    ebp
c0009154:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009158:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000915c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000915f:	e8 ef ec 01 00       	call   c0027e53 <__floatsidf>
c0009164:	83 c4 10             	add    esp,0x10
c0009167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000916b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000916f:	52                   	push   edx
c0009170:	50                   	push   eax
c0009171:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009175:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009179:	e8 f5 df 01 00       	call   c0027173 <__adddf3>
c000917e:	59                   	pop    ecx
c000917f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009183:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009187:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000918a:	e8 c4 ec 01 00       	call   c0027e53 <__floatsidf>
c000918f:	83 c4 10             	add    esp,0x10
c0009192:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009196:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000919a:	52                   	push   edx
c000919b:	50                   	push   eax
c000919c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091a4:	e8 14 ef 01 00       	call   c00280bd <__gedf2>
c00091a9:	83 c4 10             	add    esp,0x10
c00091ac:	85 c0                	test   eax,eax
c00091ae:	0f 89 d9 01 00 00    	jns    c000938d <linear_vari_process+0x37e>
c00091b4:	85 ff                	test   edi,edi
c00091b6:	0f 8e f4 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c00091bc:	83 ec 10             	sub    esp,0x10
c00091bf:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091c2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091c5:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091c9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091cc:	ff 30                	push   DWORD PTR [eax]
c00091ce:	e8 f1 e5 01 00       	call   c00277c4 <__subdf3>
c00091d3:	83 c4 18             	add    esp,0x18
c00091d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091de:	52                   	push   edx
c00091df:	50                   	push   eax
c00091e0:	e8 6b f0 01 00       	call   c0028250 <fabs>
c00091e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ed:	83 c4 10             	add    esp,0x10
c00091f0:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091f5:	68 23 42 92 0c       	push   0xc924223
c00091fa:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091fe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009202:	e8 9a ee 01 00       	call   c00280a1 <__gtdf2>
c0009207:	83 c4 10             	add    esp,0x10
c000920a:	85 c0                	test   eax,eax
c000920c:	0f 8e 9e 00 00 00    	jle    c00092b0 <linear_vari_process+0x2a1>
c0009212:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0009216:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009219:	8b 00                	mov    eax,DWORD PTR [eax]
c000921b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000921f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009222:	52                   	push   edx
c0009223:	50                   	push   eax
c0009224:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009227:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000922a:	e8 95 e5 01 00       	call   c00277c4 <__subdf3>
c000922f:	59                   	pop    ecx
c0009230:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009234:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009238:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000923b:	e8 13 ec 01 00       	call   c0027e53 <__floatsidf>
c0009240:	83 c4 10             	add    esp,0x10
c0009243:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009247:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000924b:	52                   	push   edx
c000924c:	50                   	push   eax
c000924d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009255:	e8 96 e5 01 00       	call   c00277f0 <__muldf3>
c000925a:	5f                   	pop    edi
c000925b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000925f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009263:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009266:	e8 e8 eb 01 00       	call   c0027e53 <__floatsidf>
c000926b:	83 c4 10             	add    esp,0x10
c000926e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009272:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009276:	52                   	push   edx
c0009277:	50                   	push   eax
c0009278:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009280:	e8 4f e8 01 00       	call   c0027ad4 <__divdf3>
c0009285:	83 c4 10             	add    esp,0x10
c0009288:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009290:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009294:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000929c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00092a0:	e8 ce de 01 00       	call   c0027173 <__adddf3>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00092ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00092b0:	31 ff                	xor    edi,edi
c00092b2:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c00092b5:	0f 8e 9d 00 00 00    	jle    c0009358 <linear_vari_process+0x349>
c00092bb:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00092be:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092c2:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092c5:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092c9:	89 04 24             	mov    DWORD PTR [esp],eax
c00092cc:	8b 06                	mov    eax,DWORD PTR [esi]
c00092ce:	52                   	push   edx
c00092cf:	52                   	push   edx
c00092d0:	55                   	push   ebp
c00092d1:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092d4:	47                   	inc    edi
c00092d5:	e8 2e d8 01 00       	call   c0026b08 <__subsf3>
c00092da:	89 04 24             	mov    DWORD PTR [esp],eax
c00092dd:	e8 05 ef 01 00       	call   c00281e7 <__extendsfdf2>
c00092e2:	83 c4 10             	add    esp,0x10
c00092e5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092e9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092f9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092fd:	e8 ee e4 01 00       	call   c00277f0 <__muldf3>
c0009302:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009305:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009309:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000930d:	e8 d5 ee 01 00       	call   c00281e7 <__extendsfdf2>
c0009312:	83 c4 10             	add    esp,0x10
c0009315:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009319:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000931d:	52                   	push   edx
c000931e:	50                   	push   eax
c000931f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009323:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009327:	e8 47 de 01 00       	call   c0027173 <__adddf3>
c000932c:	59                   	pop    ecx
c000932d:	5d                   	pop    ebp
c000932e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009332:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009336:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000933e:	e8 80 ed 01 00       	call   c00280c3 <__truncdfsf2>
c0009343:	83 c4 10             	add    esp,0x10
c0009346:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0009349:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000934d:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009350:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009353:	e9 5a ff ff ff       	jmp    c00092b2 <linear_vari_process+0x2a3>
c0009358:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009360:	68 00 00 f0 3f       	push   0x3ff00000
c0009365:	6a 00                	push   0x0
c0009367:	e8 68 e7 01 00       	call   c0027ad4 <__divdf3>
c000936c:	83 c4 10             	add    esp,0x10
c000936f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009372:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009376:	52                   	push   edx
c0009377:	50                   	push   eax
c0009378:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000937c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009380:	e8 ee dd 01 00       	call   c0027173 <__adddf3>
c0009385:	83 c4 10             	add    esp,0x10
c0009388:	e9 50 fd ff ff       	jmp    c00090dd <linear_vari_process+0xce>
c000938d:	50                   	push   eax
c000938e:	50                   	push   eax
c000938f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009393:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009397:	e8 d4 ee 01 00       	call   c0028270 <lrint>
c000939c:	83 ec 0c             	sub    esp,0xc
c000939f:	50                   	push   eax
c00093a0:	e8 ae ea 01 00       	call   c0027e53 <__floatsidf>
c00093a5:	83 c4 10             	add    esp,0x10
c00093a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00093ac:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00093b0:	52                   	push   edx
c00093b1:	50                   	push   eax
c00093b2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093b6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093ba:	e8 05 e4 01 00       	call   c00277c4 <__subdf3>
c00093bf:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093c3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093c7:	83 c4 20             	add    esp,0x20
c00093ca:	6a 00                	push   0x0
c00093cc:	6a 00                	push   0x0
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d6:	e8 e4 ec 01 00       	call   c00280bf <__ltdf2>
c00093db:	83 c4 10             	add    esp,0x10
c00093de:	85 c0                	test   eax,eax
c00093e0:	79 1e                	jns    c0009400 <linear_vari_process+0x3f1>
c00093e2:	68 00 00 f0 3f       	push   0x3ff00000
c00093e7:	6a 00                	push   0x0
c00093e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093f1:	e8 7d dd 01 00       	call   c0027173 <__adddf3>
c00093f6:	83 c4 10             	add    esp,0x10
c00093f9:	89 04 24             	mov    DWORD PTR [esp],eax
c00093fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009400:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009403:	83 ec 10             	sub    esp,0x10
c0009406:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000940e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009412:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009416:	e8 a9 e3 01 00       	call   c00277c4 <__subdf3>
c000941b:	83 c4 18             	add    esp,0x18
c000941e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009422:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009426:	52                   	push   edx
c0009427:	50                   	push   eax
c0009428:	e8 43 ee 01 00       	call   c0028270 <lrint>
c000942d:	83 c4 10             	add    esp,0x10
c0009430:	0f af f8             	imul   edi,eax
c0009433:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009436:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c0009439:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000943c:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c000943f:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009442:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009446:	0f 8d 13 03 00 00    	jge    c000975f <linear_vari_process+0x750>
c000944c:	83 ec 0c             	sub    esp,0xc
c000944f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009452:	e8 fc e9 01 00       	call   c0027e53 <__floatsidf>
c0009457:	83 c4 10             	add    esp,0x10
c000945a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000945e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009462:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009466:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000946a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000946e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009472:	e8 79 e3 01 00       	call   c00277f0 <__muldf3>
c0009477:	89 3c 24             	mov    DWORD PTR [esp],edi
c000947a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000947e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009482:	e8 cc e9 01 00       	call   c0027e53 <__floatsidf>
c0009487:	83 c4 10             	add    esp,0x10
c000948a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000948e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009492:	52                   	push   edx
c0009493:	50                   	push   eax
c0009494:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009498:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000949c:	e8 d2 dc 01 00       	call   c0027173 <__adddf3>
c00094a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00094a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094ac:	e8 a2 e9 01 00       	call   c0027e53 <__floatsidf>
c00094b1:	83 c4 10             	add    esp,0x10
c00094b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094bc:	52                   	push   edx
c00094bd:	50                   	push   eax
c00094be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094c6:	e8 f4 eb 01 00       	call   c00280bf <__ltdf2>
c00094cb:	83 c4 10             	add    esp,0x10
c00094ce:	85 c0                	test   eax,eax
c00094d0:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094d4:	0f 89 85 02 00 00    	jns    c000975f <linear_vari_process+0x750>
c00094da:	85 c9                	test   ecx,ecx
c00094dc:	0f 8e f5 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c00094e2:	83 ec 10             	sub    esp,0x10
c00094e5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094e8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094eb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094ef:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094f2:	ff 30                	push   DWORD PTR [eax]
c00094f4:	e8 cb e2 01 00       	call   c00277c4 <__subdf3>
c00094f9:	83 c4 18             	add    esp,0x18
c00094fc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009500:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009504:	52                   	push   edx
c0009505:	50                   	push   eax
c0009506:	e8 45 ed 01 00       	call   c0028250 <fabs>
c000950b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000950f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009513:	83 c4 10             	add    esp,0x10
c0009516:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000951b:	68 23 42 92 0c       	push   0xc924223
c0009520:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009524:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009528:	e8 74 eb 01 00       	call   c00280a1 <__gtdf2>
c000952d:	83 c4 10             	add    esp,0x10
c0009530:	85 c0                	test   eax,eax
c0009532:	0f 8e 9f 00 00 00    	jle    c00095d7 <linear_vari_process+0x5c8>
c0009538:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000953c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000953f:	8b 00                	mov    eax,DWORD PTR [eax]
c0009541:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009545:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009549:	52                   	push   edx
c000954a:	50                   	push   eax
c000954b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000954e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009551:	e8 6e e2 01 00       	call   c00277c4 <__subdf3>
c0009556:	5f                   	pop    edi
c0009557:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000955b:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000955f:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009562:	e8 ec e8 01 00       	call   c0027e53 <__floatsidf>
c0009567:	83 c4 10             	add    esp,0x10
c000956a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000956e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009572:	52                   	push   edx
c0009573:	50                   	push   eax
c0009574:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000957c:	e8 6f e2 01 00       	call   c00277f0 <__muldf3>
c0009581:	5d                   	pop    ebp
c0009582:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009586:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000958a:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000958d:	e8 c1 e8 01 00       	call   c0027e53 <__floatsidf>
c0009592:	83 c4 10             	add    esp,0x10
c0009595:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009599:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000959d:	52                   	push   edx
c000959e:	50                   	push   eax
c000959f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a7:	e8 28 e5 01 00       	call   c0027ad4 <__divdf3>
c00095ac:	83 c4 10             	add    esp,0x10
c00095af:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095c7:	e8 a7 db 01 00       	call   c0027173 <__adddf3>
c00095cc:	83 c4 10             	add    esp,0x10
c00095cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095d7:	31 ff                	xor    edi,edi
c00095d9:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095dc:	39 f8                	cmp    eax,edi
c00095de:	0f 8e ac 00 00 00    	jle    c0009690 <linear_vari_process+0x681>
c00095e4:	8b 16                	mov    edx,DWORD PTR [esi]
c00095e6:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095e9:	29 c1                	sub    ecx,eax
c00095eb:	89 c8                	mov    eax,ecx
c00095ed:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095f0:	01 f8                	add    eax,edi
c00095f2:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095f6:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095f9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009600:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009603:	51                   	push   ecx
c0009604:	01 f8                	add    eax,edi
c0009606:	51                   	push   ecx
c0009607:	47                   	inc    edi
c0009608:	55                   	push   ebp
c0009609:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c000960c:	e8 f7 d4 01 00       	call   c0026b08 <__subsf3>
c0009611:	89 04 24             	mov    DWORD PTR [esp],eax
c0009614:	e8 ce eb 01 00       	call   c00281e7 <__extendsfdf2>
c0009619:	83 c4 10             	add    esp,0x10
c000961c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009620:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009624:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000962c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009630:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009634:	e8 b7 e1 01 00       	call   c00277f0 <__muldf3>
c0009639:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000963c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009640:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009644:	e8 9e eb 01 00       	call   c00281e7 <__extendsfdf2>
c0009649:	83 c4 10             	add    esp,0x10
c000964c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009650:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009654:	52                   	push   edx
c0009655:	50                   	push   eax
c0009656:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000965e:	e8 10 db 01 00       	call   c0027173 <__adddf3>
c0009663:	5d                   	pop    ebp
c0009664:	59                   	pop    ecx
c0009665:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009669:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000966d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009671:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009675:	e8 49 ea 01 00       	call   c00280c3 <__truncdfsf2>
c000967a:	83 c4 10             	add    esp,0x10
c000967d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009681:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009685:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009688:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000968b:	e9 49 ff ff ff       	jmp    c00095d9 <linear_vari_process+0x5ca>
c0009690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009698:	68 00 00 f0 3f       	push   0x3ff00000
c000969d:	6a 00                	push   0x0
c000969f:	e8 30 e4 01 00       	call   c0027ad4 <__divdf3>
c00096a4:	83 c4 10             	add    esp,0x10
c00096a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00096ab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00096af:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b3:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c00096b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096bf:	e8 af da 01 00       	call   c0027173 <__adddf3>
c00096c4:	59                   	pop    ecx
c00096c5:	5f                   	pop    edi
c00096c6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ca:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096d6:	e8 95 eb 01 00       	call   c0028270 <lrint>
c00096db:	83 ec 0c             	sub    esp,0xc
c00096de:	50                   	push   eax
c00096df:	e8 6f e7 01 00       	call   c0027e53 <__floatsidf>
c00096e4:	83 c4 10             	add    esp,0x10
c00096e7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096eb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ef:	52                   	push   edx
c00096f0:	50                   	push   eax
c00096f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096f9:	e8 c6 e0 01 00       	call   c00277c4 <__subdf3>
c00096fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009702:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009706:	83 c4 20             	add    esp,0x20
c0009709:	6a 00                	push   0x0
c000970b:	6a 00                	push   0x0
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009715:	e8 a5 e9 01 00       	call   c00280bf <__ltdf2>
c000971a:	83 c4 10             	add    esp,0x10
c000971d:	85 c0                	test   eax,eax
c000971f:	79 1e                	jns    c000973f <linear_vari_process+0x730>
c0009721:	68 00 00 f0 3f       	push   0x3ff00000
c0009726:	6a 00                	push   0x0
c0009728:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000972c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009730:	e8 3e da 01 00       	call   c0027173 <__adddf3>
c0009735:	83 c4 10             	add    esp,0x10
c0009738:	89 04 24             	mov    DWORD PTR [esp],eax
c000973b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000973f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009742:	83 ec 10             	sub    esp,0x10
c0009745:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009749:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000974d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009751:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009755:	e8 6a e0 01 00       	call   c00277c4 <__subdf3>
c000975a:	e9 bc fc ff ff       	jmp    c000941b <linear_vari_process+0x40c>
c000975f:	39 fd                	cmp    ebp,edi
c0009761:	7d 38                	jge    c000979b <linear_vari_process+0x78c>
c0009763:	83 ec 0c             	sub    esp,0xc
c0009766:	89 f8                	mov    eax,edi
c0009768:	29 e8                	sub    eax,ebp
c000976a:	99                   	cdq    
c000976b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000976e:	50                   	push   eax
c000976f:	e8 df e6 01 00       	call   c0027e53 <__floatsidf>
c0009774:	83 c4 10             	add    esp,0x10
c0009777:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000977b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000977f:	52                   	push   edx
c0009780:	50                   	push   eax
c0009781:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009785:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009789:	e8 e5 d9 01 00       	call   c0027173 <__adddf3>
c000978e:	83 c4 10             	add    esp,0x10
c0009791:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009794:	89 04 24             	mov    DWORD PTR [esp],eax
c0009797:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000979b:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c000979f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00097a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00097a6:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c00097a9:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c00097ac:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097af:	85 c0                	test   eax,eax
c00097b1:	7f 29                	jg     c00097dc <linear_vari_process+0x7cd>
c00097b3:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00097b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00097bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097bf:	89 01                	mov    DWORD PTR [ecx],eax
c00097c1:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097c4:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097c7:	99                   	cdq    
c00097c8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097cb:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097ce:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097d1:	99                   	cdq    
c00097d2:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097d5:	31 d2                	xor    edx,edx
c00097d7:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097da:	eb 1d                	jmp    c00097f9 <linear_vari_process+0x7ea>
c00097dc:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097df:	31 d2                	xor    edx,edx
c00097e1:	29 c8                	sub    eax,ecx
c00097e3:	c1 e0 02             	shl    eax,0x2
c00097e6:	39 d1                	cmp    ecx,edx
c00097e8:	7e c9                	jle    c00097b3 <linear_vari_process+0x7a4>
c00097ea:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097ec:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097ef:	83 c0 04             	add    eax,0x4
c00097f2:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097f6:	42                   	inc    edx
c00097f7:	eb ed                	jmp    c00097e6 <linear_vari_process+0x7d7>
c00097f9:	83 c4 3c             	add    esp,0x3c
c00097fc:	89 d0                	mov    eax,edx
c00097fe:	5b                   	pop    ebx
c00097ff:	5e                   	pop    esi
c0009800:	5f                   	pop    edi
c0009801:	5d                   	pop    ebp
c0009802:	c3                   	ret    

c0009803 <linear_reset>:
c0009803:	83 ec 0c             	sub    esp,0xc
c0009806:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000980a:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000980d:	85 c0                	test   eax,eax
c000980f:	74 20                	je     c0009831 <linear_reset+0x2e>
c0009811:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c0009814:	83 c0 1c             	add    eax,0x1c
c0009817:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000981a:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009821:	c1 e2 02             	shl    edx,0x2
c0009824:	51                   	push   ecx
c0009825:	52                   	push   edx
c0009826:	6a 00                	push   0x0
c0009828:	50                   	push   eax
c0009829:	e8 4a 6f ff ff       	call   c0000778 <memset>
c000982e:	83 c4 10             	add    esp,0x10
c0009831:	83 c4 0c             	add    esp,0xc
c0009834:	c3                   	ret    

c0009835 <linear_get_name>:
c0009835:	31 c0                	xor    eax,eax
c0009837:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000983c:	75 05                	jne    c0009843 <linear_get_name+0xe>
c000983e:	b8 c0 99 02 c0       	mov    eax,0xc00299c0
c0009843:	c3                   	ret    

c0009844 <linear_get_description>:
c0009844:	31 c0                	xor    eax,eax
c0009846:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000984b:	75 05                	jne    c0009852 <linear_get_description+0xe>
c000984d:	b8 d4 99 02 c0       	mov    eax,0xc00299d4
c0009852:	c3                   	ret    

c0009853 <linear_set_converter>:
c0009853:	53                   	push   ebx
c0009854:	b8 0a 00 00 00       	mov    eax,0xa
c0009859:	83 ec 08             	sub    esp,0x8
c000985c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009860:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009865:	75 6e                	jne    c00098d5 <linear_set_converter+0x82>
c0009867:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000986a:	85 c0                	test   eax,eax
c000986c:	74 13                	je     c0009881 <linear_set_converter+0x2e>
c000986e:	83 ec 0c             	sub    esp,0xc
c0009871:	50                   	push   eax
c0009872:	e8 d9 5f 00 00       	call   c000f850 <free>
c0009877:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000987e:	83 c4 10             	add    esp,0x10
c0009881:	50                   	push   eax
c0009882:	50                   	push   eax
c0009883:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009886:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000988d:	50                   	push   eax
c000988e:	6a 01                	push   0x1
c0009890:	e8 db 5f 00 00       	call   c000f870 <calloc>
c0009895:	83 c4 10             	add    esp,0x10
c0009898:	89 c2                	mov    edx,eax
c000989a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000989d:	85 d2                	test   edx,edx
c000989f:	b8 01 00 00 00       	mov    eax,0x1
c00098a4:	74 2f                	je     c00098d5 <linear_set_converter+0x82>
c00098a6:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00098a9:	83 ec 0c             	sub    esp,0xc
c00098ac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00098af:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c00098b5:	c7 43 24 0f 90 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000900f
c00098bc:	c7 43 20 0f 90 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000900f
c00098c3:	c7 43 28 03 98 00 c0 	mov    DWORD PTR [ebx+0x28],0xc0009803
c00098ca:	53                   	push   ebx
c00098cb:	e8 33 ff ff ff       	call   c0009803 <linear_reset>
c00098d0:	83 c4 10             	add    esp,0x10
c00098d3:	31 c0                	xor    eax,eax
c00098d5:	83 c4 08             	add    esp,0x8
c00098d8:	5b                   	pop    ebx
c00098d9:	c3                   	ret    

c00098da <int_to_fp>:
c00098da:	c1 e0 0c             	shl    eax,0xc
c00098dd:	c3                   	ret    

c00098de <fp_to_int>:
c00098de:	c1 f8 0c             	sar    eax,0xc
c00098e1:	c3                   	ret    

c00098e2 <fp_fraction_part>:
c00098e2:	25 ff 0f 00 00       	and    eax,0xfff
c00098e7:	c3                   	ret    

c00098e8 <fp_to_double>:
c00098e8:	83 ec 1c             	sub    esp,0x1c
c00098eb:	e8 f2 ff ff ff       	call   c00098e2 <fp_fraction_part>
c00098f0:	83 ec 0c             	sub    esp,0xc
c00098f3:	50                   	push   eax
c00098f4:	e8 5a e5 01 00       	call   c0027e53 <__floatsidf>
c00098f9:	83 c4 10             	add    esp,0x10
c00098fc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009900:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009904:	68 00 00 30 3f       	push   0x3f300000
c0009909:	6a 00                	push   0x0
c000990b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000990f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009913:	e8 d8 de 01 00       	call   c00277f0 <__muldf3>
c0009918:	83 c4 2c             	add    esp,0x2c
c000991b:	c3                   	ret    

c000991c <calc_output_single>:
c000991c:	55                   	push   ebp
c000991d:	57                   	push   edi
c000991e:	56                   	push   esi
c000991f:	89 c6                	mov    esi,eax
c0009921:	53                   	push   ebx
c0009922:	89 d3                	mov    ebx,edx
c0009924:	83 ec 4c             	sub    esp,0x4c
c0009927:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000992b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000992e:	e8 a7 ff ff ff       	call   c00098da <int_to_fp>
c0009933:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009936:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000993a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000993e:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009942:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009945:	99                   	cdq    
c0009946:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000994e:	f7 fb                	idiv   ebx
c0009950:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009958:	89 da                	mov    edx,ebx
c000995a:	0f af d0             	imul   edx,eax
c000995d:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009961:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009965:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009969:	29 c2                	sub    edx,eax
c000996b:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000996e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009972:	83 c5 04             	add    ebp,0x4
c0009975:	e8 6e ff ff ff       	call   c00098e8 <fp_to_double>
c000997a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000997e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009986:	e8 53 ff ff ff       	call   c00098de <fp_to_int>
c000998b:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000998e:	52                   	push   edx
c000998f:	52                   	push   edx
c0009990:	51                   	push   ecx
c0009991:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009995:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009999:	e8 6a d1 01 00       	call   c0026b08 <__subsf3>
c000999e:	89 04 24             	mov    DWORD PTR [esp],eax
c00099a1:	e8 41 e8 01 00       	call   c00281e7 <__extendsfdf2>
c00099a6:	83 c4 10             	add    esp,0x10
c00099a9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099b1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00099b9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099c1:	e8 2a de 01 00       	call   c00277f0 <__muldf3>
c00099c6:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ca:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099ce:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099d1:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099d5:	e8 0d e8 01 00       	call   c00281e7 <__extendsfdf2>
c00099da:	83 c4 10             	add    esp,0x10
c00099dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099e5:	52                   	push   edx
c00099e6:	50                   	push   eax
c00099e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099ef:	e8 7f d7 01 00       	call   c0027173 <__adddf3>
c00099f4:	59                   	pop    ecx
c00099f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099fd:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c0009a03:	e8 df e7 01 00       	call   c00281e7 <__extendsfdf2>
c0009a08:	83 c4 10             	add    esp,0x10
c0009a0b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009a0f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009a13:	52                   	push   edx
c0009a14:	50                   	push   eax
c0009a15:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a19:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009a1d:	e8 ce dd 01 00       	call   c00277f0 <__muldf3>
c0009a22:	83 c4 10             	add    esp,0x10
c0009a25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a2d:	52                   	push   edx
c0009a2e:	50                   	push   eax
c0009a2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a37:	e8 37 d7 01 00       	call   c0027173 <__adddf3>
c0009a3c:	83 c4 10             	add    esp,0x10
c0009a3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a47:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a4b:	0f 89 1d ff ff ff    	jns    c000996e <calc_output_single+0x52>
c0009a51:	89 d9                	mov    ecx,ebx
c0009a53:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a57:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a5b:	89 dd                	mov    ebp,ebx
c0009a5d:	29 c8                	sub    eax,ecx
c0009a5f:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a67:	99                   	cdq    
c0009a68:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a70:	f7 fb                	idiv   ebx
c0009a72:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a76:	0f af e8             	imul   ebp,eax
c0009a79:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a7d:	01 cd                	add    ebp,ecx
c0009a7f:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a82:	89 e8                	mov    eax,ebp
c0009a84:	83 ee 04             	sub    esi,0x4
c0009a87:	e8 5c fe ff ff       	call   c00098e8 <fp_to_double>
c0009a8c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a90:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a94:	89 e8                	mov    eax,ebp
c0009a96:	29 dd                	sub    ebp,ebx
c0009a98:	e8 41 fe ff ff       	call   c00098de <fp_to_int>
c0009a9d:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009aa0:	52                   	push   edx
c0009aa1:	52                   	push   edx
c0009aa2:	51                   	push   ecx
c0009aa3:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009aa7:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009aab:	e8 58 d0 01 00       	call   c0026b08 <__subsf3>
c0009ab0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ab3:	e8 2f e7 01 00       	call   c00281e7 <__extendsfdf2>
c0009ab8:	83 c4 10             	add    esp,0x10
c0009abb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009abf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ac3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ac7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009acb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009acf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ad3:	e8 18 dd 01 00       	call   c00277f0 <__muldf3>
c0009ad8:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009adc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ae0:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ae3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ae7:	e8 fb e6 01 00       	call   c00281e7 <__extendsfdf2>
c0009aec:	83 c4 10             	add    esp,0x10
c0009aef:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009af3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009af7:	52                   	push   edx
c0009af8:	50                   	push   eax
c0009af9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009afd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b01:	e8 6d d6 01 00       	call   c0027173 <__adddf3>
c0009b06:	59                   	pop    ecx
c0009b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009b0b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009b0f:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009b15:	e8 cd e6 01 00       	call   c00281e7 <__extendsfdf2>
c0009b1a:	83 c4 10             	add    esp,0x10
c0009b1d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b21:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b25:	52                   	push   edx
c0009b26:	50                   	push   eax
c0009b27:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b2f:	e8 bc dc 01 00       	call   c00277f0 <__muldf3>
c0009b34:	83 c4 10             	add    esp,0x10
c0009b37:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b3b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b3f:	52                   	push   edx
c0009b40:	50                   	push   eax
c0009b41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b49:	e8 25 d6 01 00       	call   c0027173 <__adddf3>
c0009b4e:	83 c4 10             	add    esp,0x10
c0009b51:	85 ed                	test   ebp,ebp
c0009b53:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b57:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b5b:	0f 8f 21 ff ff ff    	jg     c0009a82 <calc_output_single+0x166>
c0009b61:	52                   	push   edx
c0009b62:	50                   	push   eax
c0009b63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b6b:	e8 03 d6 01 00       	call   c0027173 <__adddf3>
c0009b70:	83 c4 5c             	add    esp,0x5c
c0009b73:	5b                   	pop    ebx
c0009b74:	5e                   	pop    esi
c0009b75:	5f                   	pop    edi
c0009b76:	5d                   	pop    ebp
c0009b77:	c3                   	ret    

c0009b78 <calc_output_stereo>:
c0009b78:	55                   	push   ebp
c0009b79:	89 cd                	mov    ebp,ecx
c0009b7b:	57                   	push   edi
c0009b7c:	56                   	push   esi
c0009b7d:	53                   	push   ebx
c0009b7e:	89 c3                	mov    ebx,eax
c0009b80:	83 ec 6c             	sub    esp,0x6c
c0009b83:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b87:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b8e:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b95:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b99:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b9d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009ba0:	e8 35 fd ff ff       	call   c00098da <int_to_fp>
c0009ba5:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009bad:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009bb1:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009bb9:	29 c8                	sub    eax,ecx
c0009bbb:	99                   	cdq    
c0009bbc:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009bc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009bc4:	0f af d0             	imul   edx,eax
c0009bc7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bca:	31 d2                	xor    edx,edx
c0009bcc:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bd0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bd4:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bd7:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bdb:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bde:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009be2:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009be6:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009be9:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bee:	29 c1                	sub    ecx,eax
c0009bf0:	31 c0                	xor    eax,eax
c0009bf2:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bf5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bf9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bfd:	83 c7 08             	add    edi,0x8
c0009c00:	e8 e3 fc ff ff       	call   c00098e8 <fp_to_double>
c0009c05:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009c09:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009c0d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c11:	e8 c8 fc ff ff       	call   c00098de <fp_to_int>
c0009c16:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009c19:	52                   	push   edx
c0009c1a:	52                   	push   edx
c0009c1b:	51                   	push   ecx
c0009c1c:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c20:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c24:	e8 df ce 01 00       	call   c0026b08 <__subsf3>
c0009c29:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c2c:	e8 b6 e5 01 00       	call   c00281e7 <__extendsfdf2>
c0009c31:	83 c4 10             	add    esp,0x10
c0009c34:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c38:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c3c:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c40:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c44:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c48:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c4c:	e8 9f db 01 00       	call   c00277f0 <__muldf3>
c0009c51:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c55:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c59:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c5c:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c60:	e8 82 e5 01 00       	call   c00281e7 <__extendsfdf2>
c0009c65:	83 c4 10             	add    esp,0x10
c0009c68:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c6c:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c70:	52                   	push   edx
c0009c71:	50                   	push   eax
c0009c72:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c76:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c7a:	e8 f4 d4 01 00       	call   c0027173 <__adddf3>
c0009c7f:	59                   	pop    ecx
c0009c80:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c84:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c88:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c8e:	e8 54 e5 01 00       	call   c00281e7 <__extendsfdf2>
c0009c93:	83 c4 10             	add    esp,0x10
c0009c96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca2:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009ca6:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009caa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cae:	e8 3d db 01 00       	call   c00277f0 <__muldf3>
c0009cb3:	83 c4 10             	add    esp,0x10
c0009cb6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cba:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cbe:	52                   	push   edx
c0009cbf:	50                   	push   eax
c0009cc0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009cc8:	e8 a6 d4 01 00       	call   c0027173 <__adddf3>
c0009ccd:	59                   	pop    ecx
c0009cce:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cd6:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cdc:	e8 06 e5 01 00       	call   c00281e7 <__extendsfdf2>
c0009ce1:	83 c4 10             	add    esp,0x10
c0009ce4:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009ce8:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009cec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cf4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cf8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cfc:	e8 ef da 01 00       	call   c00277f0 <__muldf3>
c0009d01:	83 c4 10             	add    esp,0x10
c0009d04:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009d08:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009d0c:	52                   	push   edx
c0009d0d:	50                   	push   eax
c0009d0e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d12:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009d16:	e8 58 d4 01 00       	call   c0027173 <__adddf3>
c0009d1b:	83 c4 10             	add    esp,0x10
c0009d1e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d22:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d26:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d2a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d2e:	0f 89 c5 fe ff ff    	jns    c0009bf9 <calc_output_stereo+0x81>
c0009d34:	29 e9                	sub    ecx,ebp
c0009d36:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d3a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d3e:	29 c8                	sub    eax,ecx
c0009d40:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d48:	99                   	cdq    
c0009d49:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d4d:	31 d2                	xor    edx,edx
c0009d4f:	0f af f8             	imul   edi,eax
c0009d52:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d56:	40                   	inc    eax
c0009d57:	01 cf                	add    edi,ecx
c0009d59:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d5e:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d62:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d6a:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d6d:	31 c0                	xor    eax,eax
c0009d6f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d73:	89 f8                	mov    eax,edi
c0009d75:	83 eb 08             	sub    ebx,0x8
c0009d78:	e8 6b fb ff ff       	call   c00098e8 <fp_to_double>
c0009d7d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d81:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d85:	89 f8                	mov    eax,edi
c0009d87:	e8 52 fb ff ff       	call   c00098de <fp_to_int>
c0009d8c:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d8f:	52                   	push   edx
c0009d90:	52                   	push   edx
c0009d91:	55                   	push   ebp
c0009d92:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d96:	e8 6d cd 01 00       	call   c0026b08 <__subsf3>
c0009d9b:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d9e:	e8 44 e4 01 00       	call   c00281e7 <__extendsfdf2>
c0009da3:	83 c4 10             	add    esp,0x10
c0009da6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009daa:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009db6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dba:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dbe:	e8 2d da 01 00       	call   c00277f0 <__muldf3>
c0009dc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009dc6:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dca:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009dce:	e8 14 e4 01 00       	call   c00281e7 <__extendsfdf2>
c0009dd3:	83 c4 10             	add    esp,0x10
c0009dd6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dda:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dde:	52                   	push   edx
c0009ddf:	50                   	push   eax
c0009de0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009de8:	e8 86 d3 01 00       	call   c0027173 <__adddf3>
c0009ded:	59                   	pop    ecx
c0009dee:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009df2:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009df6:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009dfc:	e8 e6 e3 01 00       	call   c00281e7 <__extendsfdf2>
c0009e01:	83 c4 10             	add    esp,0x10
c0009e04:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e08:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e10:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e1c:	e8 cf d9 01 00       	call   c00277f0 <__muldf3>
c0009e21:	83 c4 10             	add    esp,0x10
c0009e24:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e28:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e2c:	52                   	push   edx
c0009e2d:	50                   	push   eax
c0009e2e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e32:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e36:	e8 38 d3 01 00       	call   c0027173 <__adddf3>
c0009e3b:	5d                   	pop    ebp
c0009e3c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e40:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e44:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e4a:	e8 98 e3 01 00       	call   c00281e7 <__extendsfdf2>
c0009e4f:	83 c4 10             	add    esp,0x10
c0009e52:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e56:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e62:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e66:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e6a:	e8 81 d9 01 00       	call   c00277f0 <__muldf3>
c0009e6f:	83 c4 10             	add    esp,0x10
c0009e72:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e76:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e7a:	52                   	push   edx
c0009e7b:	50                   	push   eax
c0009e7c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e84:	e8 ea d2 01 00       	call   c0027173 <__adddf3>
c0009e89:	83 c4 10             	add    esp,0x10
c0009e8c:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e90:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e98:	85 ff                	test   edi,edi
c0009e9a:	0f 8f d3 fe ff ff    	jg     c0009d73 <calc_output_stereo+0x1fb>
c0009ea0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ea8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009eb0:	e8 be d2 01 00       	call   c0027173 <__adddf3>
c0009eb5:	83 c4 10             	add    esp,0x10
c0009eb8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ebc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ec0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ec8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ecc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ed0:	e8 1b d9 01 00       	call   c00277f0 <__muldf3>
c0009ed5:	59                   	pop    ecx
c0009ed6:	5b                   	pop    ebx
c0009ed7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009edb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009edf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ee7:	e8 d7 e1 01 00       	call   c00280c3 <__truncdfsf2>
c0009eec:	83 c4 10             	add    esp,0x10
c0009eef:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ef6:	89 03                	mov    DWORD PTR [ebx],eax
c0009ef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009efc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f00:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f04:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009f08:	e8 66 d2 01 00       	call   c0027173 <__adddf3>
c0009f0d:	83 c4 10             	add    esp,0x10
c0009f10:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009f14:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009f18:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f1c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f28:	e8 c3 d8 01 00       	call   c00277f0 <__muldf3>
c0009f2d:	5e                   	pop    esi
c0009f2e:	5f                   	pop    edi
c0009f2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f33:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f3f:	e8 7f e1 01 00       	call   c00280c3 <__truncdfsf2>
c0009f44:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f4b:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f4e:	83 c4 7c             	add    esp,0x7c
c0009f51:	5b                   	pop    ebx
c0009f52:	5e                   	pop    esi
c0009f53:	5f                   	pop    edi
c0009f54:	5d                   	pop    ebp
c0009f55:	c3                   	ret    

c0009f56 <calc_output_quad>:
c0009f56:	55                   	push   ebp
c0009f57:	57                   	push   edi
c0009f58:	56                   	push   esi
c0009f59:	89 c6                	mov    esi,eax
c0009f5b:	53                   	push   ebx
c0009f5c:	83 ec 7c             	sub    esp,0x7c
c0009f5f:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f63:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f67:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f6e:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f75:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f79:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f7d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f80:	e8 55 f9 ff ff       	call   c00098da <int_to_fp>
c0009f85:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f88:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f8b:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f8f:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f93:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f97:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f9b:	99                   	cdq    
c0009f9c:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009fa0:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009fa4:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009fa7:	31 d2                	xor    edx,edx
c0009fa9:	0f af d8             	imul   ebx,eax
c0009fac:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009fb4:	0f af c7             	imul   eax,edi
c0009fb7:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009fbb:	29 c1                	sub    ecx,eax
c0009fbd:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fc5:	31 c0                	xor    eax,eax
c0009fc7:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fca:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009fce:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fda:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fde:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fe2:	89 d8                	mov    eax,ebx
c0009fe4:	83 c7 10             	add    edi,0x10
c0009fe7:	e8 fc f8 ff ff       	call   c00098e8 <fp_to_double>
c0009fec:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009ff0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009ff4:	89 d8                	mov    eax,ebx
c0009ff6:	e8 e3 f8 ff ff       	call   c00098de <fp_to_int>
c0009ffb:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fff:	52                   	push   edx
c000a000:	52                   	push   edx
c000a001:	51                   	push   ecx
c000a002:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c000a006:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a00a:	e8 f9 ca 01 00       	call   c0026b08 <__subsf3>
c000a00f:	89 04 24             	mov    DWORD PTR [esp],eax
c000a012:	e8 d0 e1 01 00       	call   c00281e7 <__extendsfdf2>
c000a017:	83 c4 10             	add    esp,0x10
c000a01a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a01e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a026:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a02a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a02e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a032:	e8 b9 d7 01 00       	call   c00277f0 <__muldf3>
c000a037:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a03b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a03f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a042:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a046:	e8 9c e1 01 00       	call   c00281e7 <__extendsfdf2>
c000a04b:	83 c4 10             	add    esp,0x10
c000a04e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a052:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a056:	52                   	push   edx
c000a057:	50                   	push   eax
c000a058:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a05c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a060:	e8 0e d1 01 00       	call   c0027173 <__adddf3>
c000a065:	59                   	pop    ecx
c000a066:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a06a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a06e:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a074:	e8 6e e1 01 00       	call   c00281e7 <__extendsfdf2>
c000a079:	83 c4 10             	add    esp,0x10
c000a07c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a080:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a084:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a088:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a08c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a090:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a094:	e8 57 d7 01 00       	call   c00277f0 <__muldf3>
c000a099:	83 c4 10             	add    esp,0x10
c000a09c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0a0:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0a4:	52                   	push   edx
c000a0a5:	50                   	push   eax
c000a0a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0aa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a0ae:	e8 c0 d0 01 00       	call   c0027173 <__adddf3>
c000a0b3:	59                   	pop    ecx
c000a0b4:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a0b8:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a0bc:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0c2:	e8 20 e1 01 00       	call   c00281e7 <__extendsfdf2>
c000a0c7:	83 c4 10             	add    esp,0x10
c000a0ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0da:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0de:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0e2:	e8 09 d7 01 00       	call   c00277f0 <__muldf3>
c000a0e7:	83 c4 10             	add    esp,0x10
c000a0ea:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0ee:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0f2:	52                   	push   edx
c000a0f3:	50                   	push   eax
c000a0f4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0f8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0fc:	e8 72 d0 01 00       	call   c0027173 <__adddf3>
c000a101:	59                   	pop    ecx
c000a102:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a106:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a10a:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a110:	e8 d2 e0 01 00       	call   c00281e7 <__extendsfdf2>
c000a115:	83 c4 10             	add    esp,0x10
c000a118:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a120:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a128:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a12c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a130:	e8 bb d6 01 00       	call   c00277f0 <__muldf3>
c000a135:	83 c4 10             	add    esp,0x10
c000a138:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a13c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a140:	52                   	push   edx
c000a141:	50                   	push   eax
c000a142:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a146:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a14a:	e8 24 d0 01 00       	call   c0027173 <__adddf3>
c000a14f:	59                   	pop    ecx
c000a150:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a154:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a158:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a15e:	e8 84 e0 01 00       	call   c00281e7 <__extendsfdf2>
c000a163:	83 c4 10             	add    esp,0x10
c000a166:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a16a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a16e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a172:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a176:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a17e:	e8 6d d6 01 00       	call   c00277f0 <__muldf3>
c000a183:	83 c4 10             	add    esp,0x10
c000a186:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a18a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a18e:	52                   	push   edx
c000a18f:	50                   	push   eax
c000a190:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a194:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a198:	e8 d6 cf 01 00       	call   c0027173 <__adddf3>
c000a19d:	83 c4 10             	add    esp,0x10
c000a1a0:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a1a4:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a1a8:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a1ac:	0f 89 30 fe ff ff    	jns    c0009fe2 <calc_output_quad+0x8c>
c000a1b2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a1b6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a1ba:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a1be:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1c2:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ca:	29 c8                	sub    eax,ecx
c000a1cc:	99                   	cdq    
c000a1cd:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1d1:	31 d2                	xor    edx,edx
c000a1d3:	0f af d8             	imul   ebx,eax
c000a1d6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1da:	40                   	inc    eax
c000a1db:	01 cb                	add    ebx,ecx
c000a1dd:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1e2:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1e6:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1ee:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1f1:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1f9:	31 c0                	xor    eax,eax
c000a1fb:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1ff:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a203:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a207:	89 d8                	mov    eax,ebx
c000a209:	83 ee 10             	sub    esi,0x10
c000a20c:	e8 d7 f6 ff ff       	call   c00098e8 <fp_to_double>
c000a211:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a215:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a219:	89 d8                	mov    eax,ebx
c000a21b:	e8 be f6 ff ff       	call   c00098de <fp_to_int>
c000a220:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a224:	52                   	push   edx
c000a225:	52                   	push   edx
c000a226:	57                   	push   edi
c000a227:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a22b:	e8 d8 c8 01 00       	call   c0026b08 <__subsf3>
c000a230:	89 04 24             	mov    DWORD PTR [esp],eax
c000a233:	e8 af df 01 00       	call   c00281e7 <__extendsfdf2>
c000a238:	83 c4 10             	add    esp,0x10
c000a23b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a23f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a243:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a247:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a24b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a24f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a253:	e8 98 d5 01 00       	call   c00277f0 <__muldf3>
c000a258:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a25b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a25f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a263:	e8 7f df 01 00       	call   c00281e7 <__extendsfdf2>
c000a268:	83 c4 10             	add    esp,0x10
c000a26b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a26f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a273:	52                   	push   edx
c000a274:	50                   	push   eax
c000a275:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a279:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a27d:	e8 f1 ce 01 00       	call   c0027173 <__adddf3>
c000a282:	59                   	pop    ecx
c000a283:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a287:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a28b:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a291:	e8 51 df 01 00       	call   c00281e7 <__extendsfdf2>
c000a296:	83 c4 10             	add    esp,0x10
c000a299:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2a9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ad:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2b1:	e8 3a d5 01 00       	call   c00277f0 <__muldf3>
c000a2b6:	83 c4 10             	add    esp,0x10
c000a2b9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2bd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2c1:	52                   	push   edx
c000a2c2:	50                   	push   eax
c000a2c3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2c7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2cb:	e8 a3 ce 01 00       	call   c0027173 <__adddf3>
c000a2d0:	5f                   	pop    edi
c000a2d1:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2d5:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2d9:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2df:	e8 03 df 01 00       	call   c00281e7 <__extendsfdf2>
c000a2e4:	83 c4 10             	add    esp,0x10
c000a2e7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2eb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2f7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2fb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2ff:	e8 ec d4 01 00       	call   c00277f0 <__muldf3>
c000a304:	83 c4 10             	add    esp,0x10
c000a307:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a30b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a30f:	52                   	push   edx
c000a310:	50                   	push   eax
c000a311:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a315:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a319:	e8 55 ce 01 00       	call   c0027173 <__adddf3>
c000a31e:	59                   	pop    ecx
c000a31f:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a323:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a327:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a32d:	e8 b5 de 01 00       	call   c00281e7 <__extendsfdf2>
c000a332:	83 c4 10             	add    esp,0x10
c000a335:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a339:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a341:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a345:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a349:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a34d:	e8 9e d4 01 00       	call   c00277f0 <__muldf3>
c000a352:	83 c4 10             	add    esp,0x10
c000a355:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a359:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a35d:	52                   	push   edx
c000a35e:	50                   	push   eax
c000a35f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a363:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a367:	e8 07 ce 01 00       	call   c0027173 <__adddf3>
c000a36c:	5f                   	pop    edi
c000a36d:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a371:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a375:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a37b:	e8 67 de 01 00       	call   c00281e7 <__extendsfdf2>
c000a380:	83 c4 10             	add    esp,0x10
c000a383:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a387:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a38b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a38f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a393:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a397:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a39b:	e8 50 d4 01 00       	call   c00277f0 <__muldf3>
c000a3a0:	83 c4 10             	add    esp,0x10
c000a3a3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a3a7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a3ab:	52                   	push   edx
c000a3ac:	50                   	push   eax
c000a3ad:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b1:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a3b5:	e8 b9 cd 01 00       	call   c0027173 <__adddf3>
c000a3ba:	83 c4 10             	add    esp,0x10
c000a3bd:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3c1:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3c5:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3c9:	85 db                	test   ebx,ebx
c000a3cb:	0f 8f 36 fe ff ff    	jg     c000a207 <calc_output_quad+0x2b1>
c000a3d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3d9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3dd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3e1:	e8 8d cd 01 00       	call   c0027173 <__adddf3>
c000a3e6:	83 c4 10             	add    esp,0x10
c000a3e9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ed:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a401:	e8 ea d3 01 00       	call   c00277f0 <__muldf3>
c000a406:	59                   	pop    ecx
c000a407:	5b                   	pop    ebx
c000a408:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a40c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a410:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a414:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a418:	e8 a6 dc 01 00       	call   c00280c3 <__truncdfsf2>
c000a41d:	83 c4 10             	add    esp,0x10
c000a420:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a427:	89 06                	mov    DWORD PTR [esi],eax
c000a429:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a42d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a431:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a435:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a439:	e8 35 cd 01 00       	call   c0027173 <__adddf3>
c000a43e:	83 c4 10             	add    esp,0x10
c000a441:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a445:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a455:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a459:	e8 92 d3 01 00       	call   c00277f0 <__muldf3>
c000a45e:	5e                   	pop    esi
c000a45f:	5f                   	pop    edi
c000a460:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a464:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a468:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a46c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a470:	e8 4e dc 01 00       	call   c00280c3 <__truncdfsf2>
c000a475:	83 c4 10             	add    esp,0x10
c000a478:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a47f:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a482:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a486:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a48a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a48e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a492:	e8 dc cc 01 00       	call   c0027173 <__adddf3>
c000a497:	83 c4 10             	add    esp,0x10
c000a49a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a49e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4b2:	e8 39 d3 01 00       	call   c00277f0 <__muldf3>
c000a4b7:	5d                   	pop    ebp
c000a4b8:	59                   	pop    ecx
c000a4b9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4c9:	e8 f5 db 01 00       	call   c00280c3 <__truncdfsf2>
c000a4ce:	83 c4 10             	add    esp,0x10
c000a4d1:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4d8:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4db:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4df:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4e7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4eb:	e8 83 cc 01 00       	call   c0027173 <__adddf3>
c000a4f0:	83 c4 10             	add    esp,0x10
c000a4f3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4f7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a507:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a50b:	e8 e0 d2 01 00       	call   c00277f0 <__muldf3>
c000a510:	5b                   	pop    ebx
c000a511:	5e                   	pop    esi
c000a512:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a516:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a51a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a51e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a522:	e8 9c db 01 00       	call   c00280c3 <__truncdfsf2>
c000a527:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a52e:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a531:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a537:	5b                   	pop    ebx
c000a538:	5e                   	pop    esi
c000a539:	5f                   	pop    edi
c000a53a:	5d                   	pop    ebp
c000a53b:	c3                   	ret    

c000a53c <calc_output_hex>:
c000a53c:	55                   	push   ebp
c000a53d:	89 cd                	mov    ebp,ecx
c000a53f:	57                   	push   edi
c000a540:	56                   	push   esi
c000a541:	53                   	push   ebx
c000a542:	89 c3                	mov    ebx,eax
c000a544:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a54a:	89 14 24             	mov    DWORD PTR [esp],edx
c000a54d:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a554:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a55b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a55f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a563:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a566:	e8 6f f3 ff ff       	call   c00098da <int_to_fp>
c000a56b:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a56e:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a572:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a575:	29 c8                	sub    eax,ecx
c000a577:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a57b:	99                   	cdq    
c000a57c:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a584:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a587:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a58f:	0f af f8             	imul   edi,eax
c000a592:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a595:	01 cf                	add    edi,ecx
c000a597:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a59b:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a59e:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a5a2:	0f af c2             	imul   eax,edx
c000a5a5:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a5a9:	29 c1                	sub    ecx,eax
c000a5ab:	31 d2                	xor    edx,edx
c000a5ad:	31 c0                	xor    eax,eax
c000a5af:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a5ba:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a5be:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5c2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5c6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ca:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5ce:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5d2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5d6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5da:	89 f8                	mov    eax,edi
c000a5dc:	e8 07 f3 ff ff       	call   c00098e8 <fp_to_double>
c000a5e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5e9:	89 f8                	mov    eax,edi
c000a5eb:	e8 ee f2 ff ff       	call   c00098de <fp_to_int>
c000a5f0:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5f4:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5f7:	52                   	push   edx
c000a5f8:	52                   	push   edx
c000a5f9:	51                   	push   ecx
c000a5fa:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5fe:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a605:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a609:	e8 fa c4 01 00       	call   c0026b08 <__subsf3>
c000a60e:	89 04 24             	mov    DWORD PTR [esp],eax
c000a611:	e8 d1 db 01 00       	call   c00281e7 <__extendsfdf2>
c000a616:	83 c4 10             	add    esp,0x10
c000a619:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a61d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a625:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a629:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a62d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a631:	e8 ba d1 01 00       	call   c00277f0 <__muldf3>
c000a636:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a63a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a63e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a641:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a645:	e8 9d db 01 00       	call   c00281e7 <__extendsfdf2>
c000a64a:	83 c4 10             	add    esp,0x10
c000a64d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a651:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a655:	52                   	push   edx
c000a656:	50                   	push   eax
c000a657:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a65f:	e8 0f cb 01 00       	call   c0027173 <__adddf3>
c000a664:	59                   	pop    ecx
c000a665:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a669:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a66d:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a673:	e8 6f db 01 00       	call   c00281e7 <__extendsfdf2>
c000a678:	83 c4 10             	add    esp,0x10
c000a67b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a67f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a683:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a687:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a68b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a68f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a693:	e8 58 d1 01 00       	call   c00277f0 <__muldf3>
c000a698:	83 c4 10             	add    esp,0x10
c000a69b:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a69f:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6a3:	52                   	push   edx
c000a6a4:	50                   	push   eax
c000a6a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6a9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a6ad:	e8 c1 ca 01 00       	call   c0027173 <__adddf3>
c000a6b2:	59                   	pop    ecx
c000a6b3:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a6b7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a6bb:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6c1:	e8 21 db 01 00       	call   c00281e7 <__extendsfdf2>
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6cd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6d9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6dd:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6e1:	e8 0a d1 01 00       	call   c00277f0 <__muldf3>
c000a6e6:	83 c4 10             	add    esp,0x10
c000a6e9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ed:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6f1:	52                   	push   edx
c000a6f2:	50                   	push   eax
c000a6f3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6f7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6fb:	e8 73 ca 01 00       	call   c0027173 <__adddf3>
c000a700:	59                   	pop    ecx
c000a701:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a705:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a709:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a70f:	e8 d3 da 01 00       	call   c00281e7 <__extendsfdf2>
c000a714:	83 c4 10             	add    esp,0x10
c000a717:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a71f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a723:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a727:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a72f:	e8 bc d0 01 00       	call   c00277f0 <__muldf3>
c000a734:	83 c4 10             	add    esp,0x10
c000a737:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a73b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a73f:	52                   	push   edx
c000a740:	50                   	push   eax
c000a741:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a745:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a749:	e8 25 ca 01 00       	call   c0027173 <__adddf3>
c000a74e:	59                   	pop    ecx
c000a74f:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a753:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a757:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a75d:	e8 85 da 01 00       	call   c00281e7 <__extendsfdf2>
c000a762:	83 c4 10             	add    esp,0x10
c000a765:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a769:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a771:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a775:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a779:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a77d:	e8 6e d0 01 00       	call   c00277f0 <__muldf3>
c000a782:	83 c4 10             	add    esp,0x10
c000a785:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a789:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a78d:	52                   	push   edx
c000a78e:	50                   	push   eax
c000a78f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a793:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a797:	e8 d7 c9 01 00       	call   c0027173 <__adddf3>
c000a79c:	59                   	pop    ecx
c000a79d:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a7a1:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a7a5:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a7ab:	e8 37 da 01 00       	call   c00281e7 <__extendsfdf2>
c000a7b0:	83 c4 10             	add    esp,0x10
c000a7b3:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7b7:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7c3:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7c7:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7cb:	e8 20 d0 01 00       	call   c00277f0 <__muldf3>
c000a7d0:	83 c4 10             	add    esp,0x10
c000a7d3:	83 c6 18             	add    esi,0x18
c000a7d6:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7da:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7de:	52                   	push   edx
c000a7df:	50                   	push   eax
c000a7e0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7e8:	e8 86 c9 01 00       	call   c0027173 <__adddf3>
c000a7ed:	59                   	pop    ecx
c000a7ee:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7f2:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7f6:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7fc:	e8 e6 d9 01 00       	call   c00281e7 <__extendsfdf2>
c000a801:	83 c4 10             	add    esp,0x10
c000a804:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a808:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a80c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a810:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a814:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a818:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a81c:	e8 cf cf 01 00       	call   c00277f0 <__muldf3>
c000a821:	83 c4 10             	add    esp,0x10
c000a824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a82c:	52                   	push   edx
c000a82d:	50                   	push   eax
c000a82e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a832:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a836:	e8 38 c9 01 00       	call   c0027173 <__adddf3>
c000a83b:	83 c4 10             	add    esp,0x10
c000a83e:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a842:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a846:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a849:	0f 89 8b fd ff ff    	jns    c000a5da <calc_output_hex+0x9e>
c000a84f:	31 f6                	xor    esi,esi
c000a851:	31 ff                	xor    edi,edi
c000a853:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a857:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a85a:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a85e:	29 e9                	sub    ecx,ebp
c000a860:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a864:	29 c8                	sub    eax,ecx
c000a866:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a869:	99                   	cdq    
c000a86a:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a86e:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a871:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a875:	0f af e8             	imul   ebp,eax
c000a878:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a87c:	40                   	inc    eax
c000a87d:	01 cd                	add    ebp,ecx
c000a87f:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a884:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a888:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a88c:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a890:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a893:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a897:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a89b:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a89f:	89 e8                	mov    eax,ebp
c000a8a1:	e8 42 f0 ff ff       	call   c00098e8 <fp_to_double>
c000a8a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a8aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a8ae:	89 e8                	mov    eax,ebp
c000a8b0:	e8 29 f0 ff ff       	call   c00098de <fp_to_int>
c000a8b5:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a8b9:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a8bc:	52                   	push   edx
c000a8bd:	52                   	push   edx
c000a8be:	51                   	push   ecx
c000a8bf:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8c6:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8cd:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8d1:	e8 32 c2 01 00       	call   c0026b08 <__subsf3>
c000a8d6:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8d9:	e8 09 d9 01 00       	call   c00281e7 <__extendsfdf2>
c000a8de:	83 c4 10             	add    esp,0x10
c000a8e1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8e5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8f1:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f5:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8f9:	e8 f2 ce 01 00       	call   c00277f0 <__muldf3>
c000a8fe:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a905:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a909:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a90c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a910:	e8 d2 d8 01 00       	call   c00281e7 <__extendsfdf2>
c000a915:	83 c4 10             	add    esp,0x10
c000a918:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a91c:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a920:	52                   	push   edx
c000a921:	50                   	push   eax
c000a922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a92a:	e8 44 c8 01 00       	call   c0027173 <__adddf3>
c000a92f:	59                   	pop    ecx
c000a930:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a934:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a938:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a93e:	e8 a4 d8 01 00       	call   c00281e7 <__extendsfdf2>
c000a943:	83 c4 10             	add    esp,0x10
c000a946:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a952:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a956:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a95e:	e8 8d ce 01 00       	call   c00277f0 <__muldf3>
c000a963:	83 c4 10             	add    esp,0x10
c000a966:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a96a:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a96e:	52                   	push   edx
c000a96f:	50                   	push   eax
c000a970:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a974:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a978:	e8 f6 c7 01 00       	call   c0027173 <__adddf3>
c000a97d:	59                   	pop    ecx
c000a97e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a982:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a986:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a98c:	e8 56 d8 01 00       	call   c00281e7 <__extendsfdf2>
c000a991:	83 c4 10             	add    esp,0x10
c000a994:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a998:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9a4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9a8:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9ac:	e8 3f ce 01 00       	call   c00277f0 <__muldf3>
c000a9b1:	83 c4 10             	add    esp,0x10
c000a9b4:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9b8:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9bc:	52                   	push   edx
c000a9bd:	50                   	push   eax
c000a9be:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c2:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9c6:	e8 a8 c7 01 00       	call   c0027173 <__adddf3>
c000a9cb:	59                   	pop    ecx
c000a9cc:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9d0:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9d4:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9da:	e8 08 d8 01 00       	call   c00281e7 <__extendsfdf2>
c000a9df:	83 c4 10             	add    esp,0x10
c000a9e2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9ea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9f2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9f6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9fa:	e8 f1 cd 01 00       	call   c00277f0 <__muldf3>
c000a9ff:	83 c4 10             	add    esp,0x10
c000aa02:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa06:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa0a:	52                   	push   edx
c000aa0b:	50                   	push   eax
c000aa0c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa10:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000aa14:	e8 5a c7 01 00       	call   c0027173 <__adddf3>
c000aa19:	59                   	pop    ecx
c000aa1a:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000aa1e:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa22:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa28:	e8 ba d7 01 00       	call   c00281e7 <__extendsfdf2>
c000aa2d:	83 c4 10             	add    esp,0x10
c000aa30:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa34:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa3c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa40:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa44:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa48:	e8 a3 cd 01 00       	call   c00277f0 <__muldf3>
c000aa4d:	83 c4 10             	add    esp,0x10
c000aa50:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa54:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa58:	52                   	push   edx
c000aa59:	50                   	push   eax
c000aa5a:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa5e:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa62:	e8 0c c7 01 00       	call   c0027173 <__adddf3>
c000aa67:	59                   	pop    ecx
c000aa68:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa6c:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa70:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa76:	e8 6c d7 01 00       	call   c00281e7 <__extendsfdf2>
c000aa7b:	83 c4 10             	add    esp,0x10
c000aa7e:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa82:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa86:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa8e:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa92:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa96:	e8 55 cd 01 00       	call   c00277f0 <__muldf3>
c000aa9b:	83 c4 10             	add    esp,0x10
c000aa9e:	83 eb 18             	sub    ebx,0x18
c000aaa1:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aaa5:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aaa9:	52                   	push   edx
c000aaaa:	50                   	push   eax
c000aaab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aaaf:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aab3:	e8 bb c6 01 00       	call   c0027173 <__adddf3>
c000aab8:	59                   	pop    ecx
c000aab9:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aabd:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aac1:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aac7:	e8 1b d7 01 00       	call   c00281e7 <__extendsfdf2>
c000aacc:	83 c4 10             	add    esp,0x10
c000aacf:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aad3:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aad7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aadf:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aae7:	e8 04 cd 01 00       	call   c00277f0 <__muldf3>
c000aaec:	83 c4 10             	add    esp,0x10
c000aaef:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aaf3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aaf7:	52                   	push   edx
c000aaf8:	50                   	push   eax
c000aaf9:	57                   	push   edi
c000aafa:	56                   	push   esi
c000aafb:	e8 73 c6 01 00       	call   c0027173 <__adddf3>
c000ab00:	83 c4 10             	add    esp,0x10
c000ab03:	89 c6                	mov    esi,eax
c000ab05:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000ab08:	89 d7                	mov    edi,edx
c000ab0a:	85 ed                	test   ebp,ebp
c000ab0c:	0f 8f 8d fd ff ff    	jg     c000a89f <calc_output_hex+0x363>
c000ab12:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab16:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab1e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab22:	e8 4c c6 01 00       	call   c0027173 <__adddf3>
c000ab27:	83 c4 10             	add    esp,0x10
c000ab2a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab2d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab3d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab41:	e8 aa cc 01 00       	call   c00277f0 <__muldf3>
c000ab46:	59                   	pop    ecx
c000ab47:	5b                   	pop    ebx
c000ab48:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab4c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab50:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab54:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab58:	e8 66 d5 01 00       	call   c00280c3 <__truncdfsf2>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab67:	89 03                	mov    DWORD PTR [ebx],eax
c000ab69:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab6d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab79:	e8 f5 c5 01 00       	call   c0027173 <__adddf3>
c000ab7e:	83 c4 10             	add    esp,0x10
c000ab81:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab84:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab98:	e8 53 cc 01 00       	call   c00277f0 <__muldf3>
c000ab9d:	5d                   	pop    ebp
c000ab9e:	59                   	pop    ecx
c000ab9f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000aba3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000aba7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abab:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abaf:	e8 0f d5 01 00       	call   c00280c3 <__truncdfsf2>
c000abb4:	83 c4 10             	add    esp,0x10
c000abb7:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abbe:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000abc1:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc5:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abc9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abcd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abd1:	e8 9d c5 01 00       	call   c0027173 <__adddf3>
c000abd6:	83 c4 10             	add    esp,0x10
c000abd9:	89 04 24             	mov    DWORD PTR [esp],eax
c000abdc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abf0:	e8 fb cb 01 00       	call   c00277f0 <__muldf3>
c000abf5:	5b                   	pop    ebx
c000abf6:	5d                   	pop    ebp
c000abf7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abfb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abff:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac03:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac07:	e8 b7 d4 01 00       	call   c00280c3 <__truncdfsf2>
c000ac0c:	83 c4 10             	add    esp,0x10
c000ac0f:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac16:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ac19:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac1d:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac21:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac25:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac29:	e8 45 c5 01 00       	call   c0027173 <__adddf3>
c000ac2e:	83 c4 10             	add    esp,0x10
c000ac31:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac34:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac44:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac48:	e8 a3 cb 01 00       	call   c00277f0 <__muldf3>
c000ac4d:	59                   	pop    ecx
c000ac4e:	5b                   	pop    ebx
c000ac4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac57:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac5f:	e8 5f d4 01 00       	call   c00280c3 <__truncdfsf2>
c000ac64:	83 c4 10             	add    esp,0x10
c000ac67:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac6e:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac71:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac75:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac79:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac7d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac81:	e8 ed c4 01 00       	call   c0027173 <__adddf3>
c000ac86:	83 c4 10             	add    esp,0x10
c000ac89:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac8c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000aca0:	e8 4b cb 01 00       	call   c00277f0 <__muldf3>
c000aca5:	5d                   	pop    ebp
c000aca6:	59                   	pop    ecx
c000aca7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000acab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acaf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acb7:	e8 07 d4 01 00       	call   c00280c3 <__truncdfsf2>
c000acbc:	83 c4 10             	add    esp,0x10
c000acbf:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000acc6:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acc9:	57                   	push   edi
c000acca:	56                   	push   esi
c000accb:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000accf:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acd3:	e8 9b c4 01 00       	call   c0027173 <__adddf3>
c000acd8:	83 c4 10             	add    esp,0x10
c000acdb:	89 04 24             	mov    DWORD PTR [esp],eax
c000acde:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acf2:	e8 f9 ca 01 00       	call   c00277f0 <__muldf3>
c000acf7:	5b                   	pop    ebx
c000acf8:	5e                   	pop    esi
c000acf9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acfd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ad01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ad09:	e8 b5 d3 01 00       	call   c00280c3 <__truncdfsf2>
c000ad0e:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000ad15:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000ad18:	81 c4 9c 00 00 00    	add    esp,0x9c
c000ad1e:	5b                   	pop    ebx
c000ad1f:	5e                   	pop    esi
c000ad20:	5f                   	pop    edi
c000ad21:	5d                   	pop    ebp
c000ad22:	c3                   	ret    

c000ad23 <sinc_reset>:
c000ad23:	56                   	push   esi
c000ad24:	53                   	push   ebx
c000ad25:	51                   	push   ecx
c000ad26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad2a:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad2d:	85 db                	test   ebx,ebx
c000ad2f:	74 59                	je     c000ad8a <sinc_reset+0x67>
c000ad31:	31 d2                	xor    edx,edx
c000ad33:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad3a:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad3d:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad40:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad47:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad4e:	31 c0                	xor    eax,eax
c000ad50:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad56:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad59:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad5c:	52                   	push   edx
c000ad5d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad60:	c1 e0 02             	shl    eax,0x2
c000ad63:	50                   	push   eax
c000ad64:	6a 00                	push   0x0
c000ad66:	56                   	push   esi
c000ad67:	e8 0c 5a ff ff       	call   c0000778 <memset>
c000ad6c:	83 c4 0c             	add    esp,0xc
c000ad6f:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad72:	c1 e0 02             	shl    eax,0x2
c000ad75:	50                   	push   eax
c000ad76:	68 aa 00 00 00       	push   0xaa
c000ad7b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad7e:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad81:	50                   	push   eax
c000ad82:	e8 f1 59 ff ff       	call   c0000778 <memset>
c000ad87:	83 c4 10             	add    esp,0x10
c000ad8a:	58                   	pop    eax
c000ad8b:	5b                   	pop    ebx
c000ad8c:	5e                   	pop    esi
c000ad8d:	c3                   	ret    

c000ad8e <calc_output_multi>:
c000ad8e:	55                   	push   ebp
c000ad8f:	57                   	push   edi
c000ad90:	56                   	push   esi
c000ad91:	89 c6                	mov    esi,eax
c000ad93:	53                   	push   ebx
c000ad94:	83 ec 4c             	sub    esp,0x4c
c000ad97:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad9b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad9f:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ada3:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ada7:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000adab:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000adaf:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000adb3:	8d 46 44             	lea    eax,[esi+0x44]
c000adb6:	89 04 24             	mov    DWORD PTR [esp],eax
c000adb9:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000adbf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000adc3:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000adc6:	e8 0f eb ff ff       	call   c00098da <int_to_fp>
c000adcb:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adce:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000add2:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000add6:	99                   	cdq    
c000add7:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000addb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000addf:	0f af d0             	imul   edx,eax
c000ade2:	0f af c3             	imul   eax,ebx
c000ade5:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000ade9:	29 c1                	sub    ecx,eax
c000adeb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000adef:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000adf3:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000adfa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000adfe:	57                   	push   edi
c000adff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ae03:	6a 00                	push   0x0
c000ae05:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ae09:	e8 6a 59 ff ff       	call   c0000778 <memset>
c000ae0e:	83 c4 10             	add    esp,0x10
c000ae11:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae15:	89 df                	mov    edi,ebx
c000ae17:	e8 cc ea ff ff       	call   c00098e8 <fp_to_double>
c000ae1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae28:	e8 b1 ea ff ff       	call   c00098de <fp_to_int>
c000ae2d:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae30:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae33:	51                   	push   ecx
c000ae34:	51                   	push   ecx
c000ae35:	55                   	push   ebp
c000ae36:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae3a:	e8 c9 bc 01 00       	call   c0026b08 <__subsf3>
c000ae3f:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae42:	e8 a0 d3 01 00       	call   c00281e7 <__extendsfdf2>
c000ae47:	83 c4 10             	add    esp,0x10
c000ae4a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae4e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae5e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae62:	e8 89 c9 01 00       	call   c00277f0 <__muldf3>
c000ae67:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae6a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae6e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae72:	e8 70 d3 01 00       	call   c00281e7 <__extendsfdf2>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae82:	52                   	push   edx
c000ae83:	50                   	push   eax
c000ae84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae8c:	e8 e2 c2 01 00       	call   c0027173 <__adddf3>
c000ae91:	83 c4 10             	add    esp,0x10
c000ae94:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae9c:	89 f8                	mov    eax,edi
c000ae9e:	b9 08 00 00 00       	mov    ecx,0x8
c000aea3:	99                   	cdq    
c000aea4:	f7 f9                	idiv   ecx
c000aea6:	4a                   	dec    edx
c000aea7:	83 fa 06             	cmp    edx,0x6
c000aeaa:	77 07                	ja     c000aeb3 <calc_output_multi+0x125>
c000aeac:	ff 24 95 04 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd65fc]
c000aeb3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aeb6:	4f                   	dec    edi
c000aeb7:	83 ec 0c             	sub    esp,0xc
c000aeba:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aebd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aec1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aec8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aecc:	e8 16 d3 01 00       	call   c00281e7 <__extendsfdf2>
c000aed1:	83 c4 10             	add    esp,0x10
c000aed4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aee4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aee8:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aeec:	e8 ff c8 01 00       	call   c00277f0 <__muldf3>
c000aef1:	83 c4 10             	add    esp,0x10
c000aef4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aef8:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aefc:	52                   	push   edx
c000aefd:	50                   	push   eax
c000aefe:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af01:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af04:	e8 6a c2 01 00       	call   c0027173 <__adddf3>
c000af09:	83 c4 10             	add    esp,0x10
c000af0c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af0f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af12:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af15:	4f                   	dec    edi
c000af16:	83 ec 0c             	sub    esp,0xc
c000af19:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af1c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af20:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af27:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af2b:	e8 b7 d2 01 00       	call   c00281e7 <__extendsfdf2>
c000af30:	83 c4 10             	add    esp,0x10
c000af33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af3f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af4b:	e8 a0 c8 01 00       	call   c00277f0 <__muldf3>
c000af50:	83 c4 10             	add    esp,0x10
c000af53:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af57:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af5b:	52                   	push   edx
c000af5c:	50                   	push   eax
c000af5d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af60:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af63:	e8 0b c2 01 00       	call   c0027173 <__adddf3>
c000af68:	83 c4 10             	add    esp,0x10
c000af6b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af6e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af71:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af74:	4f                   	dec    edi
c000af75:	83 ec 0c             	sub    esp,0xc
c000af78:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af7b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af7f:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af86:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af8a:	e8 58 d2 01 00       	call   c00281e7 <__extendsfdf2>
c000af8f:	83 c4 10             	add    esp,0x10
c000af92:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af96:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afa2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afa6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afaa:	e8 41 c8 01 00       	call   c00277f0 <__muldf3>
c000afaf:	83 c4 10             	add    esp,0x10
c000afb2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afb6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afba:	52                   	push   edx
c000afbb:	50                   	push   eax
c000afbc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afbf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afc2:	e8 ac c1 01 00       	call   c0027173 <__adddf3>
c000afc7:	83 c4 10             	add    esp,0x10
c000afca:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afcd:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afd0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afd3:	4f                   	dec    edi
c000afd4:	83 ec 0c             	sub    esp,0xc
c000afd7:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afda:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afde:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afe5:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afe9:	e8 f9 d1 01 00       	call   c00281e7 <__extendsfdf2>
c000afee:	83 c4 10             	add    esp,0x10
c000aff1:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff5:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000affd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b001:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b005:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b009:	e8 e2 c7 01 00       	call   c00277f0 <__muldf3>
c000b00e:	83 c4 10             	add    esp,0x10
c000b011:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b015:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b019:	52                   	push   edx
c000b01a:	50                   	push   eax
c000b01b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b01e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b021:	e8 4d c1 01 00       	call   c0027173 <__adddf3>
c000b026:	83 c4 10             	add    esp,0x10
c000b029:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b02c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b02f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b032:	4f                   	dec    edi
c000b033:	83 ec 0c             	sub    esp,0xc
c000b036:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b039:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b03d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b044:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b048:	e8 9a d1 01 00       	call   c00281e7 <__extendsfdf2>
c000b04d:	83 c4 10             	add    esp,0x10
c000b050:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b054:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b058:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b05c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b060:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b064:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b068:	e8 83 c7 01 00       	call   c00277f0 <__muldf3>
c000b06d:	83 c4 10             	add    esp,0x10
c000b070:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b074:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b078:	52                   	push   edx
c000b079:	50                   	push   eax
c000b07a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b07d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b080:	e8 ee c0 01 00       	call   c0027173 <__adddf3>
c000b085:	83 c4 10             	add    esp,0x10
c000b088:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b08b:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b08e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b091:	4f                   	dec    edi
c000b092:	83 ec 0c             	sub    esp,0xc
c000b095:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b098:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b09c:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0a3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0a7:	e8 3b d1 01 00       	call   c00281e7 <__extendsfdf2>
c000b0ac:	83 c4 10             	add    esp,0x10
c000b0af:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0bf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0c7:	e8 24 c7 01 00       	call   c00277f0 <__muldf3>
c000b0cc:	83 c4 10             	add    esp,0x10
c000b0cf:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0d3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0d7:	52                   	push   edx
c000b0d8:	50                   	push   eax
c000b0d9:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0dc:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0df:	e8 8f c0 01 00       	call   c0027173 <__adddf3>
c000b0e4:	83 c4 10             	add    esp,0x10
c000b0e7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0ea:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ed:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0f0:	4f                   	dec    edi
c000b0f1:	83 ec 0c             	sub    esp,0xc
c000b0f4:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0f7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0fb:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b102:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b106:	e8 dc d0 01 00       	call   c00281e7 <__extendsfdf2>
c000b10b:	83 c4 10             	add    esp,0x10
c000b10e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b112:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b116:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b11e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b122:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b126:	e8 c5 c6 01 00       	call   c00277f0 <__muldf3>
c000b12b:	83 c4 10             	add    esp,0x10
c000b12e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b132:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b136:	52                   	push   edx
c000b137:	50                   	push   eax
c000b138:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b13b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b13e:	e8 30 c0 01 00       	call   c0027173 <__adddf3>
c000b143:	83 c4 10             	add    esp,0x10
c000b146:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b149:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b14c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b14f:	4f                   	dec    edi
c000b150:	83 ec 0c             	sub    esp,0xc
c000b153:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b156:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b15a:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b161:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b165:	e8 7d d0 01 00       	call   c00281e7 <__extendsfdf2>
c000b16a:	83 c4 10             	add    esp,0x10
c000b16d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b171:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b175:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b179:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b17d:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b181:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b185:	e8 66 c6 01 00       	call   c00277f0 <__muldf3>
c000b18a:	83 c4 10             	add    esp,0x10
c000b18d:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b191:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b195:	52                   	push   edx
c000b196:	50                   	push   eax
c000b197:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b19a:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b19d:	e8 d1 bf 01 00       	call   c0027173 <__adddf3>
c000b1a2:	83 c4 10             	add    esp,0x10
c000b1a5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b1a8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b1ab:	85 ff                	test   edi,edi
c000b1ad:	0f 8f e9 fc ff ff    	jg     c000ae9c <calc_output_multi+0x10e>
c000b1b3:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b1b7:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b1bb:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1bf:	0f 89 4c fc ff ff    	jns    c000ae11 <calc_output_multi+0x83>
c000b1c5:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1cd:	29 c8                	sub    eax,ecx
c000b1cf:	99                   	cdq    
c000b1d0:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1d4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1d8:	0f af d0             	imul   edx,eax
c000b1db:	40                   	inc    eax
c000b1dc:	01 d1                	add    ecx,edx
c000b1de:	0f af c3             	imul   eax,ebx
c000b1e1:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1e5:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1ec:	55                   	push   ebp
c000b1ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1f1:	6a 00                	push   0x0
c000b1f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1f7:	e8 7c 55 ff ff       	call   c0000778 <memset>
c000b1fc:	83 c4 10             	add    esp,0x10
c000b1ff:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b203:	e8 e0 e6 ff ff       	call   c00098e8 <fp_to_double>
c000b208:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b20c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b210:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b214:	e8 c5 e6 ff ff       	call   c00098de <fp_to_int>
c000b219:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b21c:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b21f:	57                   	push   edi
c000b220:	57                   	push   edi
c000b221:	89 df                	mov    edi,ebx
c000b223:	55                   	push   ebp
c000b224:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b228:	e8 db b8 01 00       	call   c0026b08 <__subsf3>
c000b22d:	89 04 24             	mov    DWORD PTR [esp],eax
c000b230:	e8 b2 cf 01 00       	call   c00281e7 <__extendsfdf2>
c000b235:	83 c4 10             	add    esp,0x10
c000b238:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b23c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b240:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b244:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b248:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b24c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b250:	e8 9b c5 01 00       	call   c00277f0 <__muldf3>
c000b255:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b258:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b25c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b260:	e8 82 cf 01 00       	call   c00281e7 <__extendsfdf2>
c000b265:	83 c4 10             	add    esp,0x10
c000b268:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b26c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b270:	52                   	push   edx
c000b271:	50                   	push   eax
c000b272:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b27a:	e8 f4 be 01 00       	call   c0027173 <__adddf3>
c000b27f:	83 c4 10             	add    esp,0x10
c000b282:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b286:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b28a:	89 f8                	mov    eax,edi
c000b28c:	b9 08 00 00 00       	mov    ecx,0x8
c000b291:	99                   	cdq    
c000b292:	f7 f9                	idiv   ecx
c000b294:	4a                   	dec    edx
c000b295:	83 fa 06             	cmp    edx,0x6
c000b298:	77 07                	ja     c000b2a1 <calc_output_multi+0x513>
c000b29a:	ff 24 95 20 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd65e0]
c000b2a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2a5:	4f                   	dec    edi
c000b2a6:	83 ec 0c             	sub    esp,0xc
c000b2a9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2b0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2b7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2bb:	e8 27 cf 01 00       	call   c00281e7 <__extendsfdf2>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2d3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2db:	e8 10 c5 01 00       	call   c00277f0 <__muldf3>
c000b2e0:	83 c4 10             	add    esp,0x10
c000b2e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2eb:	52                   	push   edx
c000b2ec:	50                   	push   eax
c000b2ed:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2f0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2f3:	e8 7b be 01 00       	call   c0027173 <__adddf3>
c000b2f8:	83 c4 10             	add    esp,0x10
c000b2fb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2fe:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b301:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b305:	4f                   	dec    edi
c000b306:	83 ec 0c             	sub    esp,0xc
c000b309:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b30c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b310:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b317:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b31b:	e8 c7 ce 01 00       	call   c00281e7 <__extendsfdf2>
c000b320:	83 c4 10             	add    esp,0x10
c000b323:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b327:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b32f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b333:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b337:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b33b:	e8 b0 c4 01 00       	call   c00277f0 <__muldf3>
c000b340:	83 c4 10             	add    esp,0x10
c000b343:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b347:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b34b:	52                   	push   edx
c000b34c:	50                   	push   eax
c000b34d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b350:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b353:	e8 1b be 01 00       	call   c0027173 <__adddf3>
c000b358:	83 c4 10             	add    esp,0x10
c000b35b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b35e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b361:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b365:	4f                   	dec    edi
c000b366:	83 ec 0c             	sub    esp,0xc
c000b369:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b36c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b370:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b377:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b37b:	e8 67 ce 01 00       	call   c00281e7 <__extendsfdf2>
c000b380:	83 c4 10             	add    esp,0x10
c000b383:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b387:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b38f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b393:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b39b:	e8 50 c4 01 00       	call   c00277f0 <__muldf3>
c000b3a0:	83 c4 10             	add    esp,0x10
c000b3a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ab:	52                   	push   edx
c000b3ac:	50                   	push   eax
c000b3ad:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3b0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3b3:	e8 bb bd 01 00       	call   c0027173 <__adddf3>
c000b3b8:	83 c4 10             	add    esp,0x10
c000b3bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3be:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3c1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3c5:	4f                   	dec    edi
c000b3c6:	83 ec 0c             	sub    esp,0xc
c000b3c9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3d0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3d7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3db:	e8 07 ce 01 00       	call   c00281e7 <__extendsfdf2>
c000b3e0:	83 c4 10             	add    esp,0x10
c000b3e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3ef:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3fb:	e8 f0 c3 01 00       	call   c00277f0 <__muldf3>
c000b400:	83 c4 10             	add    esp,0x10
c000b403:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b407:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b40b:	52                   	push   edx
c000b40c:	50                   	push   eax
c000b40d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b410:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b413:	e8 5b bd 01 00       	call   c0027173 <__adddf3>
c000b418:	83 c4 10             	add    esp,0x10
c000b41b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b41e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b421:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b425:	4f                   	dec    edi
c000b426:	83 ec 0c             	sub    esp,0xc
c000b429:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b42c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b430:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b437:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b43b:	e8 a7 cd 01 00       	call   c00281e7 <__extendsfdf2>
c000b440:	83 c4 10             	add    esp,0x10
c000b443:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b447:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b44f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b453:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b457:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b45b:	e8 90 c3 01 00       	call   c00277f0 <__muldf3>
c000b460:	83 c4 10             	add    esp,0x10
c000b463:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b467:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b46b:	52                   	push   edx
c000b46c:	50                   	push   eax
c000b46d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b470:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b473:	e8 fb bc 01 00       	call   c0027173 <__adddf3>
c000b478:	83 c4 10             	add    esp,0x10
c000b47b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b47e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b481:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b485:	4f                   	dec    edi
c000b486:	83 ec 0c             	sub    esp,0xc
c000b489:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b48c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b490:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b497:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b49b:	e8 47 cd 01 00       	call   c00281e7 <__extendsfdf2>
c000b4a0:	83 c4 10             	add    esp,0x10
c000b4a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4b3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4b7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4bb:	e8 30 c3 01 00       	call   c00277f0 <__muldf3>
c000b4c0:	83 c4 10             	add    esp,0x10
c000b4c3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4c7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4cb:	52                   	push   edx
c000b4cc:	50                   	push   eax
c000b4cd:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4d0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4d3:	e8 9b bc 01 00       	call   c0027173 <__adddf3>
c000b4d8:	83 c4 10             	add    esp,0x10
c000b4db:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4de:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4e1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4e5:	4f                   	dec    edi
c000b4e6:	83 ec 0c             	sub    esp,0xc
c000b4e9:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4ec:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4f0:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4f7:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4fb:	e8 e7 cc 01 00       	call   c00281e7 <__extendsfdf2>
c000b500:	83 c4 10             	add    esp,0x10
c000b503:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b507:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b50f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b513:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b517:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b51b:	e8 d0 c2 01 00       	call   c00277f0 <__muldf3>
c000b520:	83 c4 10             	add    esp,0x10
c000b523:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b527:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b52b:	52                   	push   edx
c000b52c:	50                   	push   eax
c000b52d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b530:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b533:	e8 3b bc 01 00       	call   c0027173 <__adddf3>
c000b538:	83 c4 10             	add    esp,0x10
c000b53b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b53e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b541:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b545:	4f                   	dec    edi
c000b546:	83 ec 0c             	sub    esp,0xc
c000b549:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b54c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b550:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b557:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b55b:	e8 87 cc 01 00       	call   c00281e7 <__extendsfdf2>
c000b560:	83 c4 10             	add    esp,0x10
c000b563:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b567:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b56f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b573:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b577:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b57b:	e8 70 c2 01 00       	call   c00277f0 <__muldf3>
c000b580:	83 c4 10             	add    esp,0x10
c000b583:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b587:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b58b:	52                   	push   edx
c000b58c:	50                   	push   eax
c000b58d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b590:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b593:	e8 db bb 01 00       	call   c0027173 <__adddf3>
c000b598:	83 c4 10             	add    esp,0x10
c000b59b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b59e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b5a1:	85 ff                	test   edi,edi
c000b5a3:	0f 8f e1 fc ff ff    	jg     c000b28a <calc_output_multi+0x4fc>
c000b5a9:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b5ad:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b5b1:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b5b5:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b5ba:	0f 8f 3f fc ff ff    	jg     c000b1ff <calc_output_multi+0x471>
c000b5c0:	be 08 00 00 00       	mov    esi,0x8
c000b5c5:	89 d8                	mov    eax,ebx
c000b5c7:	99                   	cdq    
c000b5c8:	f7 fe                	idiv   esi
c000b5ca:	4a                   	dec    edx
c000b5cb:	83 fa 06             	cmp    edx,0x6
c000b5ce:	77 07                	ja     c000b5d7 <calc_output_multi+0x849>
c000b5d0:	ff 24 95 3c 9a 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd65c4]
c000b5d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5db:	4b                   	dec    ebx
c000b5dc:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5e0:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5e7:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5eb:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5ee:	e8 80 bb 01 00       	call   c0027173 <__adddf3>
c000b5f3:	83 c4 10             	add    esp,0x10
c000b5f6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5fa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b602:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b60e:	e8 dd c1 01 00       	call   c00277f0 <__muldf3>
c000b613:	5d                   	pop    ebp
c000b614:	59                   	pop    ecx
c000b615:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b619:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b61d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b621:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b625:	e8 99 ca 01 00       	call   c00280c3 <__truncdfsf2>
c000b62a:	83 c4 10             	add    esp,0x10
c000b62d:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b631:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b638:	4b                   	dec    ebx
c000b639:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b63d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b640:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b644:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b648:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b64b:	e8 23 bb 01 00       	call   c0027173 <__adddf3>
c000b650:	83 c4 10             	add    esp,0x10
c000b653:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b657:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b65b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b65f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b663:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b667:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b66b:	e8 80 c1 01 00       	call   c00277f0 <__muldf3>
c000b670:	59                   	pop    ecx
c000b671:	5f                   	pop    edi
c000b672:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b676:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b67a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b67e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b682:	e8 3c ca 01 00       	call   c00280c3 <__truncdfsf2>
c000b687:	83 c4 10             	add    esp,0x10
c000b68a:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b68e:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b691:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b695:	4b                   	dec    ebx
c000b696:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b69a:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b69d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6a1:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6a5:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6a8:	e8 c6 ba 01 00       	call   c0027173 <__adddf3>
c000b6ad:	83 c4 10             	add    esp,0x10
c000b6b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6bc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c8:	e8 23 c1 01 00       	call   c00277f0 <__muldf3>
c000b6cd:	5f                   	pop    edi
c000b6ce:	5d                   	pop    ebp
c000b6cf:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6d3:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6df:	e8 df c9 01 00       	call   c00280c3 <__truncdfsf2>
c000b6e4:	83 c4 10             	add    esp,0x10
c000b6e7:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6eb:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6f2:	4b                   	dec    ebx
c000b6f3:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6f7:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6fe:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b702:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b705:	e8 69 ba 01 00       	call   c0027173 <__adddf3>
c000b70a:	83 c4 10             	add    esp,0x10
c000b70d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b711:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b715:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b719:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b71d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b721:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b725:	e8 c6 c0 01 00       	call   c00277f0 <__muldf3>
c000b72a:	5d                   	pop    ebp
c000b72b:	59                   	pop    ecx
c000b72c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b730:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b734:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b738:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b73c:	e8 82 c9 01 00       	call   c00280c3 <__truncdfsf2>
c000b741:	83 c4 10             	add    esp,0x10
c000b744:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b748:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b74b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b74f:	4b                   	dec    ebx
c000b750:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b754:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b757:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b75b:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b75f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b762:	e8 0c ba 01 00       	call   c0027173 <__adddf3>
c000b767:	83 c4 10             	add    esp,0x10
c000b76a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b76e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b772:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b776:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b782:	e8 69 c0 01 00       	call   c00277f0 <__muldf3>
c000b787:	59                   	pop    ecx
c000b788:	5f                   	pop    edi
c000b789:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b78d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b791:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b799:	e8 25 c9 01 00       	call   c00280c3 <__truncdfsf2>
c000b79e:	83 c4 10             	add    esp,0x10
c000b7a1:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7a5:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ac:	4b                   	dec    ebx
c000b7ad:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7b1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7b4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7b8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7bc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7bf:	e8 af b9 01 00       	call   c0027173 <__adddf3>
c000b7c4:	83 c4 10             	add    esp,0x10
c000b7c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7cb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7d7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7db:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7df:	e8 0c c0 01 00       	call   c00277f0 <__muldf3>
c000b7e4:	5f                   	pop    edi
c000b7e5:	5d                   	pop    ebp
c000b7e6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7ea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7ee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7f6:	e8 c8 c8 01 00       	call   c00280c3 <__truncdfsf2>
c000b7fb:	83 c4 10             	add    esp,0x10
c000b7fe:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b802:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b805:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b809:	4b                   	dec    ebx
c000b80a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b80e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b811:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b815:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b819:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b81c:	e8 52 b9 01 00       	call   c0027173 <__adddf3>
c000b821:	83 c4 10             	add    esp,0x10
c000b824:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b828:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b82c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b830:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b834:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b838:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b83c:	e8 af bf 01 00       	call   c00277f0 <__muldf3>
c000b841:	5d                   	pop    ebp
c000b842:	59                   	pop    ecx
c000b843:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b847:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b84b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b84f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b853:	e8 6b c8 01 00       	call   c00280c3 <__truncdfsf2>
c000b858:	83 c4 10             	add    esp,0x10
c000b85b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b85f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b862:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b866:	4b                   	dec    ebx
c000b867:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b86b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b86e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b872:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b876:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b879:	e8 f5 b8 01 00       	call   c0027173 <__adddf3>
c000b87e:	83 c4 10             	add    esp,0x10
c000b881:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b885:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b889:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b88d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b891:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b895:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b899:	e8 52 bf 01 00       	call   c00277f0 <__muldf3>
c000b89e:	59                   	pop    ecx
c000b89f:	5f                   	pop    edi
c000b8a0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b8a4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b8a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b8b0:	e8 0e c8 01 00       	call   c00280c3 <__truncdfsf2>
c000b8b5:	83 c4 10             	add    esp,0x10
c000b8b8:	85 db                	test   ebx,ebx
c000b8ba:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b8be:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8c1:	0f 8f fe fc ff ff    	jg     c000b5c5 <calc_output_multi+0x837>
c000b8c7:	83 c4 4c             	add    esp,0x4c
c000b8ca:	5b                   	pop    ebx
c000b8cb:	5e                   	pop    esi
c000b8cc:	5f                   	pop    edi
c000b8cd:	5d                   	pop    ebp
c000b8ce:	c3                   	ret    

c000b8cf <double_to_fp>:
c000b8cf:	83 ec 0c             	sub    esp,0xc
c000b8d2:	68 00 00 b0 40       	push   0x40b00000
c000b8d7:	6a 00                	push   0x0
c000b8d9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8e1:	e8 0a bf 01 00       	call   c00277f0 <__muldf3>
c000b8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8ea:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8ee:	83 c4 1c             	add    esp,0x1c
c000b8f1:	e9 7a c9 01 00       	jmp    c0028270 <lrint>

c000b8f6 <prepare_data>:
c000b8f6:	55                   	push   ebp
c000b8f7:	57                   	push   edi
c000b8f8:	56                   	push   esi
c000b8f9:	53                   	push   ebx
c000b8fa:	83 ec 1c             	sub    esp,0x1c
c000b8fd:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b901:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b905:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b909:	0f 89 57 01 00 00    	jns    c000ba66 <prepare_data+0x170>
c000b90f:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b912:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b915:	85 d2                	test   edx,edx
c000b917:	75 0d                	jne    c000b926 <prepare_data+0x30>
c000b919:	8d 14 36             	lea    edx,[esi+esi*1]
c000b91c:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b91f:	29 d0                	sub    eax,edx
c000b921:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b924:	eb 44                	jmp    c000b96a <prepare_data+0x74>
c000b926:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b929:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b92c:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b92f:	39 c1                	cmp    ecx,eax
c000b931:	7d 04                	jge    c000b937 <prepare_data+0x41>
c000b933:	29 d0                	sub    eax,edx
c000b935:	eb 2d                	jmp    c000b964 <prepare_data+0x6e>
c000b937:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b93d:	29 d7                	sub    edi,edx
c000b93f:	01 f7                	add    edi,esi
c000b941:	51                   	push   ecx
c000b942:	29 f2                	sub    edx,esi
c000b944:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b94b:	8d 14 90             	lea    edx,[eax+edx*4]
c000b94e:	51                   	push   ecx
c000b94f:	52                   	push   edx
c000b950:	50                   	push   eax
c000b951:	e8 26 4d ff ff       	call   c000067c <memmove>
c000b956:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b959:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b95c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b95f:	29 f0                	sub    eax,esi
c000b961:	83 c4 10             	add    esp,0x10
c000b964:	29 f0                	sub    eax,esi
c000b966:	79 02                	jns    c000b96a <prepare_data+0x74>
c000b968:	31 c0                	xor    eax,eax
c000b96a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b96d:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b970:	29 ef                	sub    edi,ebp
c000b972:	39 c7                	cmp    edi,eax
c000b974:	7e 02                	jle    c000b978 <prepare_data+0x82>
c000b976:	89 c7                	mov    edi,eax
c000b978:	89 f8                	mov    eax,edi
c000b97a:	99                   	cdq    
c000b97b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b97e:	b8 15 00 00 00       	mov    eax,0x15
c000b983:	29 d7                	sub    edi,edx
c000b985:	0f 88 dd 00 00 00    	js     c000ba68 <prepare_data+0x172>
c000b98b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b98e:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b991:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b994:	0f 8f ce 00 00 00    	jg     c000ba68 <prepare_data+0x172>
c000b99a:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b9a0:	50                   	push   eax
c000b9a1:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9a8:	50                   	push   eax
c000b9a9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b9ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000b9af:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b9b2:	50                   	push   eax
c000b9b3:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b9ba:	50                   	push   eax
c000b9bb:	e8 84 4d ff ff       	call   c0000744 <memcpy>
c000b9c0:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9c3:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9c6:	01 fd                	add    ebp,edi
c000b9c8:	01 f9                	add    ecx,edi
c000b9ca:	83 c4 10             	add    esp,0x10
c000b9cd:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9d0:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9d3:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9d6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9da:	0f 85 86 00 00 00    	jne    c000ba66 <prepare_data+0x170>
c000b9e0:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9e3:	89 e8                	mov    eax,ebp
c000b9e5:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9e8:	29 c8                	sub    eax,ecx
c000b9ea:	39 f8                	cmp    eax,edi
c000b9ec:	7d 78                	jge    c000ba66 <prepare_data+0x170>
c000b9ee:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9f2:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9f6:	74 6e                	je     c000ba66 <prepare_data+0x170>
c000b9f8:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9fb:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9ff:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000ba02:	29 ef                	sub    edi,ebp
c000ba04:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ba08:	7c 29                	jl     c000ba33 <prepare_data+0x13d>
c000ba0a:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba0d:	29 f1                	sub    ecx,esi
c000ba0f:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000ba16:	55                   	push   ebp
c000ba17:	50                   	push   eax
c000ba18:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000ba1b:	50                   	push   eax
c000ba1c:	52                   	push   edx
c000ba1d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba21:	e8 56 4c ff ff       	call   c000067c <memmove>
c000ba26:	83 c4 10             	add    esp,0x10
c000ba29:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba2c:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba2f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba33:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba36:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba39:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba3c:	83 c6 05             	add    esi,0x5
c000ba3f:	78 07                	js     c000ba48 <prepare_data+0x152>
c000ba41:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba44:	39 cf                	cmp    edi,ecx
c000ba46:	7e 04                	jle    c000ba4c <prepare_data+0x156>
c000ba48:	89 ce                	mov    esi,ecx
c000ba4a:	29 c6                	sub    esi,eax
c000ba4c:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba4f:	51                   	push   ecx
c000ba50:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba57:	51                   	push   ecx
c000ba58:	6a 00                	push   0x0
c000ba5a:	50                   	push   eax
c000ba5b:	e8 18 4d ff ff       	call   c0000778 <memset>
c000ba60:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba63:	83 c4 10             	add    esp,0x10
c000ba66:	31 c0                	xor    eax,eax
c000ba68:	83 c4 1c             	add    esp,0x1c
c000ba6b:	5b                   	pop    ebx
c000ba6c:	5e                   	pop    esi
c000ba6d:	5f                   	pop    edi
c000ba6e:	5d                   	pop    ebp
c000ba6f:	c3                   	ret    

c000ba70 <sinc_multichan_vari_process>:
c000ba70:	55                   	push   ebp
c000ba71:	ba 05 00 00 00       	mov    edx,0x5
c000ba76:	57                   	push   edi
c000ba77:	56                   	push   esi
c000ba78:	53                   	push   ebx
c000ba79:	83 ec 4c             	sub    esp,0x4c
c000ba7c:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba80:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba84:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba87:	85 db                	test   ebx,ebx
c000ba89:	0f 84 9b 06 00 00    	je     c000c12a <sinc_multichan_vari_process+0x6ba>
c000ba8f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba92:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba95:	0f af c5             	imul   eax,ebp
c000ba98:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba9b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba9e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000baa5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000baac:	0f af c5             	imul   eax,ebp
c000baaf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000bab2:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000bab5:	8b 06                	mov    eax,DWORD PTR [esi]
c000bab7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000babb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000babf:	68 00 00 70 3f       	push   0x3f700000
c000bac4:	6a 00                	push   0x0
c000bac6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bace:	e8 ec c5 01 00       	call   c00280bf <__ltdf2>
c000bad3:	83 c4 10             	add    esp,0x10
c000bad6:	ba 16 00 00 00       	mov    edx,0x16
c000badb:	85 c0                	test   eax,eax
c000badd:	0f 88 47 06 00 00    	js     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bae3:	68 00 00 70 40       	push   0x40700000
c000bae8:	6a 00                	push   0x0
c000baea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baf2:	e8 aa c5 01 00       	call   c00280a1 <__gtdf2>
c000baf7:	83 c4 10             	add    esp,0x10
c000bafa:	ba 16 00 00 00       	mov    edx,0x16
c000baff:	85 c0                	test   eax,eax
c000bb01:	0f 8f 23 06 00 00    	jg     c000c12a <sinc_multichan_vari_process+0x6ba>
c000bb07:	83 ec 0c             	sub    esp,0xc
c000bb0a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000bb0d:	e8 41 c3 01 00       	call   c0027e53 <__floatsidf>
c000bb12:	83 c4 10             	add    esp,0x10
c000bb15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb19:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb1d:	68 00 00 00 40       	push   0x40000000
c000bb22:	6a 00                	push   0x0
c000bb24:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb28:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb2c:	e8 42 b6 01 00       	call   c0027173 <__adddf3>
c000bb31:	59                   	pop    ecx
c000bb32:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb36:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb3a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb3d:	e8 11 c3 01 00       	call   c0027e53 <__floatsidf>
c000bb42:	83 c4 10             	add    esp,0x10
c000bb45:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb49:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb4d:	52                   	push   edx
c000bb4e:	50                   	push   eax
c000bb4f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb53:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb57:	e8 78 bf 01 00       	call   c0027ad4 <__divdf3>
c000bb5c:	83 c4 10             	add    esp,0x10
c000bb5f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb63:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb67:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb6a:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb6d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb71:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb75:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb79:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb7d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb81:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb85:	e8 17 c5 01 00       	call   c00280a1 <__gtdf2>
c000bb8a:	83 c4 10             	add    esp,0x10
c000bb8d:	85 c0                	test   eax,eax
c000bb8f:	7e 2d                	jle    c000bbbe <sinc_multichan_vari_process+0x14e>
c000bb91:	68 00 00 f0 3f       	push   0x3ff00000
c000bb96:	6a 00                	push   0x0
c000bb98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bba0:	e8 1a c5 01 00       	call   c00280bf <__ltdf2>
c000bba5:	83 c4 10             	add    esp,0x10
c000bba8:	85 c0                	test   eax,eax
c000bbaa:	79 4d                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bbb0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bbb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bbb8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bbbc:	eb 1b                	jmp    c000bbd9 <sinc_multichan_vari_process+0x169>
c000bbbe:	68 00 00 f0 3f       	push   0x3ff00000
c000bbc3:	6a 00                	push   0x0
c000bbc5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbc9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbcd:	e8 ed c4 01 00       	call   c00280bf <__ltdf2>
c000bbd2:	83 c4 10             	add    esp,0x10
c000bbd5:	85 c0                	test   eax,eax
c000bbd7:	79 20                	jns    c000bbf9 <sinc_multichan_vari_process+0x189>
c000bbd9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbdd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbe1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe9:	e8 e6 be 01 00       	call   c0027ad4 <__divdf3>
c000bbee:	83 c4 10             	add    esp,0x10
c000bbf1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbf5:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbf9:	50                   	push   eax
c000bbfa:	50                   	push   eax
c000bbfb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc03:	e8 68 c6 01 00       	call   c0028270 <lrint>
c000bc08:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bc0b:	40                   	inc    eax
c000bc0c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc10:	0f af c5             	imul   eax,ebp
c000bc13:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bc17:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bc1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc1e:	58                   	pop    eax
c000bc1f:	5a                   	pop    edx
c000bc20:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc24:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc28:	e8 43 c6 01 00       	call   c0028270 <lrint>
c000bc2d:	83 ec 0c             	sub    esp,0xc
c000bc30:	50                   	push   eax
c000bc31:	e8 1d c2 01 00       	call   c0027e53 <__floatsidf>
c000bc36:	83 c4 10             	add    esp,0x10
c000bc39:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc3d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc41:	52                   	push   edx
c000bc42:	50                   	push   eax
c000bc43:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc47:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc4b:	e8 74 bb 01 00       	call   c00277c4 <__subdf3>
c000bc50:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc54:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc58:	83 c4 20             	add    esp,0x20
c000bc5b:	6a 00                	push   0x0
c000bc5d:	6a 00                	push   0x0
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc67:	e8 53 c4 01 00       	call   c00280bf <__ltdf2>
c000bc6c:	83 c4 10             	add    esp,0x10
c000bc6f:	85 c0                	test   eax,eax
c000bc71:	79 1f                	jns    c000bc92 <sinc_multichan_vari_process+0x222>
c000bc73:	68 00 00 f0 3f       	push   0x3ff00000
c000bc78:	6a 00                	push   0x0
c000bc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc82:	e8 ec b4 01 00       	call   c0027173 <__adddf3>
c000bc87:	83 c4 10             	add    esp,0x10
c000bc8a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc8e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc92:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc95:	83 ec 10             	sub    esp,0x10
c000bc98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc9c:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc9f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bcaf:	e8 10 bb 01 00       	call   c00277c4 <__subdf3>
c000bcb4:	83 c4 18             	add    esp,0x18
c000bcb7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bcbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bcbf:	52                   	push   edx
c000bcc0:	50                   	push   eax
c000bcc1:	e8 aa c5 01 00       	call   c0028270 <lrint>
c000bcc6:	0f af e8             	imul   ebp,eax
c000bcc9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bccd:	01 e8                	add    eax,ebp
c000bccf:	99                   	cdq    
c000bcd0:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcd3:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcd6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcda:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcde:	68 00 00 f0 3f       	push   0x3ff00000
c000bce3:	6a 00                	push   0x0
c000bce5:	e8 ea bd 01 00       	call   c0027ad4 <__divdf3>
c000bcea:	83 c4 10             	add    esp,0x10
c000bced:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcf1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcf5:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcfa:	68 23 42 92 0c       	push   0xc924223
c000bcff:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd03:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bd07:	e8 67 b4 01 00       	call   c0027173 <__adddf3>
c000bd0c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bd10:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bd14:	83 c4 20             	add    esp,0x20
c000bd17:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd1f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd27:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd2a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd2d:	7d 50                	jge    c000bd7f <sinc_multichan_vari_process+0x30f>
c000bd2f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd32:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd35:	01 c8                	add    eax,ecx
c000bd37:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd3a:	99                   	cdq    
c000bd3b:	f7 f9                	idiv   ecx
c000bd3d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd41:	7d 0c                	jge    c000bd4f <sinc_multichan_vari_process+0x2df>
c000bd43:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd46:	85 ed                	test   ebp,ebp
c000bd48:	79 6b                	jns    c000bdb5 <sinc_multichan_vari_process+0x345>
c000bd4a:	e9 e6 00 00 00       	jmp    c000be35 <sinc_multichan_vari_process+0x3c5>
c000bd4f:	50                   	push   eax
c000bd50:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd54:	57                   	push   edi
c000bd55:	53                   	push   ebx
c000bd56:	e8 9b fb ff ff       	call   c000b8f6 <prepare_data>
c000bd5b:	83 c4 10             	add    esp,0x10
c000bd5e:	89 c2                	mov    edx,eax
c000bd60:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd63:	85 c0                	test   eax,eax
c000bd65:	0f 85 bf 03 00 00    	jne    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bd6b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd6e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd71:	01 c8                	add    eax,ecx
c000bd73:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd76:	99                   	cdq    
c000bd77:	f7 f9                	idiv   ecx
c000bd79:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd7d:	7c c4                	jl     c000bd43 <sinc_multichan_vari_process+0x2d3>
c000bd7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd87:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd8a:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd95:	89 06                	mov    DWORD PTR [esi],eax
c000bd97:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd9a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd9d:	99                   	cdq    
c000bd9e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bda1:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bda4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bda7:	99                   	cdq    
c000bda8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bdab:	31 d2                	xor    edx,edx
c000bdad:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bdb0:	e9 75 03 00 00       	jmp    c000c12a <sinc_multichan_vari_process+0x6ba>
c000bdb5:	83 ec 0c             	sub    esp,0xc
c000bdb8:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bdbb:	e8 93 c0 01 00       	call   c0027e53 <__floatsidf>
c000bdc0:	83 c4 10             	add    esp,0x10
c000bdc3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdcf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdd3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddb:	e8 93 b3 01 00       	call   c0027173 <__adddf3>
c000bde0:	83 c4 10             	add    esp,0x10
c000bde3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bde7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdeb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdef:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdf7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdfb:	e8 73 b3 01 00       	call   c0027173 <__adddf3>
c000be00:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000be03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be07:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be0b:	e8 43 c0 01 00       	call   c0027e53 <__floatsidf>
c000be10:	83 c4 10             	add    esp,0x10
c000be13:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be17:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be1b:	52                   	push   edx
c000be1c:	50                   	push   eax
c000be1d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be21:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be25:	e8 93 c2 01 00       	call   c00280bd <__gedf2>
c000be2a:	83 c4 10             	add    esp,0x10
c000be2d:	85 c0                	test   eax,eax
c000be2f:	0f 89 4a ff ff ff    	jns    c000bd7f <sinc_multichan_vari_process+0x30f>
c000be35:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be39:	0f 8e ed 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be3f:	83 ec 10             	sub    esp,0x10
c000be42:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be45:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be48:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be4b:	ff 36                	push   DWORD PTR [esi]
c000be4d:	e8 72 b9 01 00       	call   c00277c4 <__subdf3>
c000be52:	83 c4 18             	add    esp,0x18
c000be55:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be59:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be5d:	52                   	push   edx
c000be5e:	50                   	push   eax
c000be5f:	e8 ec c3 01 00       	call   c0028250 <fabs>
c000be64:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be68:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be6c:	83 c4 10             	add    esp,0x10
c000be6f:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be74:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be81:	e8 1b c2 01 00       	call   c00280a1 <__gtdf2>
c000be86:	83 c4 10             	add    esp,0x10
c000be89:	85 c0                	test   eax,eax
c000be8b:	0f 8e 9b 00 00 00    	jle    c000bf2c <sinc_multichan_vari_process+0x4bc>
c000be91:	8b 06                	mov    eax,DWORD PTR [esi]
c000be93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be9a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be9e:	52                   	push   edx
c000be9f:	50                   	push   eax
c000bea0:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000bea3:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000bea6:	e8 19 b9 01 00       	call   c00277c4 <__subdf3>
c000beab:	59                   	pop    ecx
c000beac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000beb0:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000beb4:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000beb7:	e8 97 bf 01 00       	call   c0027e53 <__floatsidf>
c000bebc:	83 c4 10             	add    esp,0x10
c000bebf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bec3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bec7:	52                   	push   edx
c000bec8:	50                   	push   eax
c000bec9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000becd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed1:	e8 1a b9 01 00       	call   c00277f0 <__muldf3>
c000bed6:	5d                   	pop    ebp
c000bed7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bedb:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bedf:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bee2:	e8 6c bf 01 00       	call   c0027e53 <__floatsidf>
c000bee7:	83 c4 10             	add    esp,0x10
c000beea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000beee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bef2:	52                   	push   edx
c000bef3:	50                   	push   eax
c000bef4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befc:	e8 d3 bb 01 00       	call   c0027ad4 <__divdf3>
c000bf01:	83 c4 10             	add    esp,0x10
c000bf04:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf08:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf0c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bf14:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf18:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf1c:	e8 52 b2 01 00       	call   c0027173 <__adddf3>
c000bf21:	83 c4 10             	add    esp,0x10
c000bf24:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf28:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf2c:	83 ec 0c             	sub    esp,0xc
c000bf2f:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf32:	e8 1c bf 01 00       	call   c0027e53 <__floatsidf>
c000bf37:	83 c4 10             	add    esp,0x10
c000bf3a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf3e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf46:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf52:	e8 68 c1 01 00       	call   c00280bf <__ltdf2>
c000bf57:	83 c4 10             	add    esp,0x10
c000bf5a:	85 c0                	test   eax,eax
c000bf5c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf60:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf64:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf68:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf6c:	78 10                	js     c000bf7e <sinc_multichan_vari_process+0x50e>
c000bf6e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf72:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf76:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf7a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf7e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf82:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf86:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8e:	e8 5d b8 01 00       	call   c00277f0 <__muldf3>
c000bf93:	59                   	pop    ecx
c000bf94:	5d                   	pop    ebp
c000bf95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf99:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bfa5:	e8 25 f9 ff ff       	call   c000b8cf <double_to_fp>
c000bfaa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfae:	89 c5                	mov    ebp,eax
c000bfb0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bfb4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfb8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bfbc:	e8 2f b8 01 00       	call   c00277f0 <__muldf3>
c000bfc1:	83 c4 18             	add    esp,0x18
c000bfc4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfc8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfcc:	52                   	push   edx
c000bfcd:	50                   	push   eax
c000bfce:	e8 fc f8 ff ff       	call   c000b8cf <double_to_fp>
c000bfd3:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfd6:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfda:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfdd:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfe0:	50                   	push   eax
c000bfe1:	50                   	push   eax
c000bfe2:	50                   	push   eax
c000bfe3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfe6:	e8 68 be 01 00       	call   c0027e53 <__floatsidf>
c000bfeb:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfef:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bff3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bff7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bffb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfff:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c003:	e8 cc ba 01 00       	call   c0027ad4 <__divdf3>
c000c008:	83 c4 1c             	add    esp,0x1c
c000c00b:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000c00f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000c013:	52                   	push   edx
c000c014:	89 ea                	mov    edx,ebp
c000c016:	50                   	push   eax
c000c017:	89 d8                	mov    eax,ebx
c000c019:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c01c:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c020:	e8 69 ed ff ff       	call   c000ad8e <calc_output_multi>
c000c025:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c028:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c02b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c02f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c033:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c037:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c03b:	e8 94 ba 01 00       	call   c0027ad4 <__divdf3>
c000c040:	83 c4 10             	add    esp,0x10
c000c043:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c047:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c04b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c04f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c053:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c057:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c05b:	e8 13 b1 01 00       	call   c0027173 <__adddf3>
c000c060:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c064:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c068:	83 c4 28             	add    esp,0x28
c000c06b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c06f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c073:	e8 f8 c1 01 00       	call   c0028270 <lrint>
c000c078:	83 ec 0c             	sub    esp,0xc
c000c07b:	50                   	push   eax
c000c07c:	e8 d2 bd 01 00       	call   c0027e53 <__floatsidf>
c000c081:	83 c4 10             	add    esp,0x10
c000c084:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c088:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c08c:	52                   	push   edx
c000c08d:	50                   	push   eax
c000c08e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c092:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c096:	e8 29 b7 01 00       	call   c00277c4 <__subdf3>
c000c09b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c09f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0a3:	83 c4 20             	add    esp,0x20
c000c0a6:	6a 00                	push   0x0
c000c0a8:	6a 00                	push   0x0
c000c0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0b2:	e8 08 c0 01 00       	call   c00280bf <__ltdf2>
c000c0b7:	83 c4 10             	add    esp,0x10
c000c0ba:	85 c0                	test   eax,eax
c000c0bc:	79 20                	jns    c000c0de <sinc_multichan_vari_process+0x66e>
c000c0be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0c6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ce:	e8 a0 b0 01 00       	call   c0027173 <__adddf3>
c000c0d3:	83 c4 10             	add    esp,0x10
c000c0d6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0da:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0de:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0e1:	83 ec 10             	sub    esp,0x10
c000c0e4:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0e8:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0f3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0f7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0fb:	e8 c4 b6 01 00       	call   c00277c4 <__subdf3>
c000c100:	83 c4 18             	add    esp,0x18
c000c103:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c107:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c10b:	52                   	push   edx
c000c10c:	50                   	push   eax
c000c10d:	e8 5e c1 01 00       	call   c0028270 <lrint>
c000c112:	0f af e8             	imul   ebp,eax
c000c115:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c119:	83 c4 10             	add    esp,0x10
c000c11c:	01 e8                	add    eax,ebp
c000c11e:	99                   	cdq    
c000c11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c125:	e9 fd fb ff ff       	jmp    c000bd27 <sinc_multichan_vari_process+0x2b7>
c000c12a:	83 c4 4c             	add    esp,0x4c
c000c12d:	89 d0                	mov    eax,edx
c000c12f:	5b                   	pop    ebx
c000c130:	5e                   	pop    esi
c000c131:	5f                   	pop    edi
c000c132:	5d                   	pop    ebp
c000c133:	c3                   	ret    

c000c134 <sinc_hex_vari_process>:
c000c134:	55                   	push   ebp
c000c135:	ba 05 00 00 00       	mov    edx,0x5
c000c13a:	57                   	push   edi
c000c13b:	56                   	push   esi
c000c13c:	53                   	push   ebx
c000c13d:	83 ec 4c             	sub    esp,0x4c
c000c140:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c144:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c148:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c14b:	85 db                	test   ebx,ebx
c000c14d:	0f 84 9c 06 00 00    	je     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c153:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c156:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c159:	0f af c7             	imul   eax,edi
c000c15c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c15f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c162:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c169:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c170:	0f af c7             	imul   eax,edi
c000c173:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c176:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c179:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c17c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c180:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c184:	68 00 00 70 3f       	push   0x3f700000
c000c189:	6a 00                	push   0x0
c000c18b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c18f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c193:	e8 27 bf 01 00       	call   c00280bf <__ltdf2>
c000c198:	83 c4 10             	add    esp,0x10
c000c19b:	ba 16 00 00 00       	mov    edx,0x16
c000c1a0:	85 c0                	test   eax,eax
c000c1a2:	0f 88 47 06 00 00    	js     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1a8:	68 00 00 70 40       	push   0x40700000
c000c1ad:	6a 00                	push   0x0
c000c1af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c1b7:	e8 e5 be 01 00       	call   c00280a1 <__gtdf2>
c000c1bc:	83 c4 10             	add    esp,0x10
c000c1bf:	ba 16 00 00 00       	mov    edx,0x16
c000c1c4:	85 c0                	test   eax,eax
c000c1c6:	0f 8f 23 06 00 00    	jg     c000c7ef <sinc_hex_vari_process+0x6bb>
c000c1cc:	83 ec 0c             	sub    esp,0xc
c000c1cf:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1d2:	e8 7c bc 01 00       	call   c0027e53 <__floatsidf>
c000c1d7:	83 c4 10             	add    esp,0x10
c000c1da:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1de:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1e2:	68 00 00 00 40       	push   0x40000000
c000c1e7:	6a 00                	push   0x0
c000c1e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f1:	e8 7d af 01 00       	call   c0027173 <__adddf3>
c000c1f6:	59                   	pop    ecx
c000c1f7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1fb:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1ff:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c202:	e8 4c bc 01 00       	call   c0027e53 <__floatsidf>
c000c207:	83 c4 10             	add    esp,0x10
c000c20a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c20e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c212:	52                   	push   edx
c000c213:	50                   	push   eax
c000c214:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c218:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21c:	e8 b3 b8 01 00       	call   c0027ad4 <__divdf3>
c000c221:	83 c4 10             	add    esp,0x10
c000c224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c22c:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c22f:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c232:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c236:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c23a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c23e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c242:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c246:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c24a:	e8 52 be 01 00       	call   c00280a1 <__gtdf2>
c000c24f:	83 c4 10             	add    esp,0x10
c000c252:	85 c0                	test   eax,eax
c000c254:	7e 2d                	jle    c000c283 <sinc_hex_vari_process+0x14f>
c000c256:	68 00 00 f0 3f       	push   0x3ff00000
c000c25b:	6a 00                	push   0x0
c000c25d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c261:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c265:	e8 55 be 01 00       	call   c00280bf <__ltdf2>
c000c26a:	83 c4 10             	add    esp,0x10
c000c26d:	85 c0                	test   eax,eax
c000c26f:	79 4d                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c275:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c279:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c27d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c281:	eb 1b                	jmp    c000c29e <sinc_hex_vari_process+0x16a>
c000c283:	68 00 00 f0 3f       	push   0x3ff00000
c000c288:	6a 00                	push   0x0
c000c28a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c28e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c292:	e8 28 be 01 00       	call   c00280bf <__ltdf2>
c000c297:	83 c4 10             	add    esp,0x10
c000c29a:	85 c0                	test   eax,eax
c000c29c:	79 20                	jns    c000c2be <sinc_hex_vari_process+0x18a>
c000c29e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c2a6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ae:	e8 21 b8 01 00       	call   c0027ad4 <__divdf3>
c000c2b3:	83 c4 10             	add    esp,0x10
c000c2b6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2ba:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2be:	50                   	push   eax
c000c2bf:	50                   	push   eax
c000c2c0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2c8:	e8 a3 bf 01 00       	call   c0028270 <lrint>
c000c2cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2d0:	40                   	inc    eax
c000c2d1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2d5:	0f af c7             	imul   eax,edi
c000c2d8:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2df:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2e3:	58                   	pop    eax
c000c2e4:	5a                   	pop    edx
c000c2e5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ed:	e8 7e bf 01 00       	call   c0028270 <lrint>
c000c2f2:	83 ec 0c             	sub    esp,0xc
c000c2f5:	50                   	push   eax
c000c2f6:	e8 58 bb 01 00       	call   c0027e53 <__floatsidf>
c000c2fb:	83 c4 10             	add    esp,0x10
c000c2fe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c302:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c306:	52                   	push   edx
c000c307:	50                   	push   eax
c000c308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c30c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c310:	e8 af b4 01 00       	call   c00277c4 <__subdf3>
c000c315:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c319:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c31d:	83 c4 20             	add    esp,0x20
c000c320:	6a 00                	push   0x0
c000c322:	6a 00                	push   0x0
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c32c:	e8 8e bd 01 00       	call   c00280bf <__ltdf2>
c000c331:	83 c4 10             	add    esp,0x10
c000c334:	85 c0                	test   eax,eax
c000c336:	79 1f                	jns    c000c357 <sinc_hex_vari_process+0x223>
c000c338:	68 00 00 f0 3f       	push   0x3ff00000
c000c33d:	6a 00                	push   0x0
c000c33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c347:	e8 27 ae 01 00       	call   c0027173 <__adddf3>
c000c34c:	83 c4 10             	add    esp,0x10
c000c34f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c353:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c357:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c35a:	83 ec 10             	sub    esp,0x10
c000c35d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c361:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c364:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c368:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c36c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c370:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c374:	e8 4b b4 01 00       	call   c00277c4 <__subdf3>
c000c379:	83 c4 18             	add    esp,0x18
c000c37c:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c380:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c384:	52                   	push   edx
c000c385:	50                   	push   eax
c000c386:	e8 e5 be 01 00       	call   c0028270 <lrint>
c000c38b:	0f af f8             	imul   edi,eax
c000c38e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c392:	01 f8                	add    eax,edi
c000c394:	99                   	cdq    
c000c395:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c398:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c39b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c39f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c3a3:	68 00 00 f0 3f       	push   0x3ff00000
c000c3a8:	6a 00                	push   0x0
c000c3aa:	e8 25 b7 01 00       	call   c0027ad4 <__divdf3>
c000c3af:	83 c4 10             	add    esp,0x10
c000c3b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c3b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c3ba:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3bf:	68 23 42 92 0c       	push   0xc924223
c000c3c4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3cc:	e8 a2 ad 01 00       	call   c0027173 <__adddf3>
c000c3d1:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3d5:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3d9:	83 c4 20             	add    esp,0x20
c000c3dc:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3e4:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3ec:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3ef:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3f2:	7d 50                	jge    c000c444 <sinc_hex_vari_process+0x310>
c000c3f4:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3f7:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3fa:	01 c8                	add    eax,ecx
c000c3fc:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3ff:	99                   	cdq    
c000c400:	f7 f9                	idiv   ecx
c000c402:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c406:	7d 0c                	jge    c000c414 <sinc_hex_vari_process+0x2e0>
c000c408:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c40b:	85 ff                	test   edi,edi
c000c40d:	79 6c                	jns    c000c47b <sinc_hex_vari_process+0x347>
c000c40f:	e9 e7 00 00 00       	jmp    c000c4fb <sinc_hex_vari_process+0x3c7>
c000c414:	50                   	push   eax
c000c415:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c419:	56                   	push   esi
c000c41a:	53                   	push   ebx
c000c41b:	e8 d6 f4 ff ff       	call   c000b8f6 <prepare_data>
c000c420:	83 c4 10             	add    esp,0x10
c000c423:	89 c2                	mov    edx,eax
c000c425:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c428:	85 c0                	test   eax,eax
c000c42a:	0f 85 bf 03 00 00    	jne    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c430:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c433:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c436:	01 c8                	add    eax,ecx
c000c438:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c43b:	99                   	cdq    
c000c43c:	f7 f9                	idiv   ecx
c000c43e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c442:	7c c4                	jl     c000c408 <sinc_hex_vari_process+0x2d4>
c000c444:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c448:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c44c:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c44f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c452:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c456:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c45a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c45d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c460:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c463:	99                   	cdq    
c000c464:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c467:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c46a:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c46d:	99                   	cdq    
c000c46e:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c471:	31 d2                	xor    edx,edx
c000c473:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c476:	e9 74 03 00 00       	jmp    c000c7ef <sinc_hex_vari_process+0x6bb>
c000c47b:	83 ec 0c             	sub    esp,0xc
c000c47e:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c481:	e8 cd b9 01 00       	call   c0027e53 <__floatsidf>
c000c486:	83 c4 10             	add    esp,0x10
c000c489:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c491:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c495:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c499:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a1:	e8 cd ac 01 00       	call   c0027173 <__adddf3>
c000c4a6:	83 c4 10             	add    esp,0x10
c000c4a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c4ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c4b1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c4b9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c1:	e8 ad ac 01 00       	call   c0027173 <__adddf3>
c000c4c6:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4c9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4cd:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4d1:	e8 7d b9 01 00       	call   c0027e53 <__floatsidf>
c000c4d6:	83 c4 10             	add    esp,0x10
c000c4d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4e1:	52                   	push   edx
c000c4e2:	50                   	push   eax
c000c4e3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4e7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4eb:	e8 cd bb 01 00       	call   c00280bd <__gedf2>
c000c4f0:	83 c4 10             	add    esp,0x10
c000c4f3:	85 c0                	test   eax,eax
c000c4f5:	0f 89 49 ff ff ff    	jns    c000c444 <sinc_hex_vari_process+0x310>
c000c4fb:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4ff:	0f 8e ef 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c505:	83 ec 10             	sub    esp,0x10
c000c508:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c50b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c514:	e8 ab b2 01 00       	call   c00277c4 <__subdf3>
c000c519:	83 c4 18             	add    esp,0x18
c000c51c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c520:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c524:	52                   	push   edx
c000c525:	50                   	push   eax
c000c526:	e8 25 bd 01 00       	call   c0028250 <fabs>
c000c52b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c52f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c533:	83 c4 10             	add    esp,0x10
c000c536:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c53b:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c540:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c544:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c548:	e8 54 bb 01 00       	call   c00280a1 <__gtdf2>
c000c54d:	83 c4 10             	add    esp,0x10
c000c550:	85 c0                	test   eax,eax
c000c552:	0f 8e 9c 00 00 00    	jle    c000c5f4 <sinc_hex_vari_process+0x4c0>
c000c558:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c55b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c55e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c562:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c566:	52                   	push   edx
c000c567:	50                   	push   eax
c000c568:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c56b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c56e:	e8 51 b2 01 00       	call   c00277c4 <__subdf3>
c000c573:	59                   	pop    ecx
c000c574:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c578:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c57c:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c57f:	e8 cf b8 01 00       	call   c0027e53 <__floatsidf>
c000c584:	83 c4 10             	add    esp,0x10
c000c587:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c58b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c58f:	52                   	push   edx
c000c590:	50                   	push   eax
c000c591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c595:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c599:	e8 52 b2 01 00       	call   c00277f0 <__muldf3>
c000c59e:	5f                   	pop    edi
c000c59f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c5a3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c5a7:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c5aa:	e8 a4 b8 01 00       	call   c0027e53 <__floatsidf>
c000c5af:	83 c4 10             	add    esp,0x10
c000c5b2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5b6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5ba:	52                   	push   edx
c000c5bb:	50                   	push   eax
c000c5bc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c4:	e8 0b b5 01 00       	call   c0027ad4 <__divdf3>
c000c5c9:	83 c4 10             	add    esp,0x10
c000c5cc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5d0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5d4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5d8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5dc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5e4:	e8 8a ab 01 00       	call   c0027173 <__adddf3>
c000c5e9:	83 c4 10             	add    esp,0x10
c000c5ec:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5f0:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5f4:	83 ec 0c             	sub    esp,0xc
c000c5f7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5fa:	e8 54 b8 01 00       	call   c0027e53 <__floatsidf>
c000c5ff:	83 c4 10             	add    esp,0x10
c000c602:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c606:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c60a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c60e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c612:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c616:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c61a:	e8 a0 ba 01 00       	call   c00280bf <__ltdf2>
c000c61f:	83 c4 10             	add    esp,0x10
c000c622:	85 c0                	test   eax,eax
c000c624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c62c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c630:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c634:	78 10                	js     c000c646 <sinc_hex_vari_process+0x512>
c000c636:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c63a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c63e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c642:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c646:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c64e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c652:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c656:	e8 95 b1 01 00       	call   c00277f0 <__muldf3>
c000c65b:	59                   	pop    ecx
c000c65c:	5f                   	pop    edi
c000c65d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c661:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c665:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c669:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c66d:	e8 5d f2 ff ff       	call   c000b8cf <double_to_fp>
c000c672:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c676:	89 c7                	mov    edi,eax
c000c678:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c67c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c680:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c684:	e8 67 b1 01 00       	call   c00277f0 <__muldf3>
c000c689:	83 c4 18             	add    esp,0x18
c000c68c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c690:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c694:	52                   	push   edx
c000c695:	50                   	push   eax
c000c696:	e8 34 f2 ff ff       	call   c000b8cf <double_to_fp>
c000c69b:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c69e:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c6a2:	83 c4 0c             	add    esp,0xc
c000c6a5:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c6a8:	8d 04 90             	lea    eax,[eax+edx*4]
c000c6ab:	50                   	push   eax
c000c6ac:	50                   	push   eax
c000c6ad:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c6b0:	e8 9e b7 01 00       	call   c0027e53 <__floatsidf>
c000c6b5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c6b9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c6bd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6c9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6cd:	e8 02 b4 01 00       	call   c0027ad4 <__divdf3>
c000c6d2:	83 c4 18             	add    esp,0x18
c000c6d5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6d9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6dd:	52                   	push   edx
c000c6de:	89 fa                	mov    edx,edi
c000c6e0:	50                   	push   eax
c000c6e1:	89 d8                	mov    eax,ebx
c000c6e3:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6e7:	e8 50 de ff ff       	call   c000a53c <calc_output_hex>
c000c6ec:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6f0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c700:	e8 cf b3 01 00       	call   c0027ad4 <__divdf3>
c000c705:	83 c4 10             	add    esp,0x10
c000c708:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c70c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c710:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c714:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c718:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c71c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c720:	e8 4e aa 01 00       	call   c0027173 <__adddf3>
c000c725:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c729:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c72d:	83 c4 18             	add    esp,0x18
c000c730:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c734:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c738:	e8 33 bb 01 00       	call   c0028270 <lrint>
c000c73d:	83 ec 0c             	sub    esp,0xc
c000c740:	50                   	push   eax
c000c741:	e8 0d b7 01 00       	call   c0027e53 <__floatsidf>
c000c746:	83 c4 10             	add    esp,0x10
c000c749:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c74d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c751:	52                   	push   edx
c000c752:	50                   	push   eax
c000c753:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c757:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c75b:	e8 64 b0 01 00       	call   c00277c4 <__subdf3>
c000c760:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c764:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c768:	83 c4 20             	add    esp,0x20
c000c76b:	6a 00                	push   0x0
c000c76d:	6a 00                	push   0x0
c000c76f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c773:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c777:	e8 43 b9 01 00       	call   c00280bf <__ltdf2>
c000c77c:	83 c4 10             	add    esp,0x10
c000c77f:	85 c0                	test   eax,eax
c000c781:	79 20                	jns    c000c7a3 <sinc_hex_vari_process+0x66f>
c000c783:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c787:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c78b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c78f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c793:	e8 db a9 01 00       	call   c0027173 <__adddf3>
c000c798:	83 c4 10             	add    esp,0x10
c000c79b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c79f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c7a3:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c7a6:	83 ec 10             	sub    esp,0x10
c000c7a9:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c7ad:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c7b8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7bc:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7c0:	e8 ff af 01 00       	call   c00277c4 <__subdf3>
c000c7c5:	83 c4 18             	add    esp,0x18
c000c7c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7d0:	52                   	push   edx
c000c7d1:	50                   	push   eax
c000c7d2:	e8 99 ba 01 00       	call   c0028270 <lrint>
c000c7d7:	0f af f8             	imul   edi,eax
c000c7da:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7de:	83 c4 10             	add    esp,0x10
c000c7e1:	01 f8                	add    eax,edi
c000c7e3:	99                   	cdq    
c000c7e4:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7e7:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7ea:	e9 fd fb ff ff       	jmp    c000c3ec <sinc_hex_vari_process+0x2b8>
c000c7ef:	83 c4 4c             	add    esp,0x4c
c000c7f2:	89 d0                	mov    eax,edx
c000c7f4:	5b                   	pop    ebx
c000c7f5:	5e                   	pop    esi
c000c7f6:	5f                   	pop    edi
c000c7f7:	5d                   	pop    ebp
c000c7f8:	c3                   	ret    

c000c7f9 <sinc_quad_vari_process>:
c000c7f9:	55                   	push   ebp
c000c7fa:	ba 05 00 00 00       	mov    edx,0x5
c000c7ff:	57                   	push   edi
c000c800:	56                   	push   esi
c000c801:	53                   	push   ebx
c000c802:	83 ec 4c             	sub    esp,0x4c
c000c805:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c809:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c80d:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c810:	85 db                	test   ebx,ebx
c000c812:	0f 84 9c 06 00 00    	je     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c818:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c81b:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c81e:	0f af c7             	imul   eax,edi
c000c821:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c824:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c827:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c82e:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c835:	0f af c7             	imul   eax,edi
c000c838:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c83b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c83e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c841:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c845:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c849:	68 00 00 70 3f       	push   0x3f700000
c000c84e:	6a 00                	push   0x0
c000c850:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c854:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c858:	e8 62 b8 01 00       	call   c00280bf <__ltdf2>
c000c85d:	83 c4 10             	add    esp,0x10
c000c860:	ba 16 00 00 00       	mov    edx,0x16
c000c865:	85 c0                	test   eax,eax
c000c867:	0f 88 47 06 00 00    	js     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c86d:	68 00 00 70 40       	push   0x40700000
c000c872:	6a 00                	push   0x0
c000c874:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c878:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c87c:	e8 20 b8 01 00       	call   c00280a1 <__gtdf2>
c000c881:	83 c4 10             	add    esp,0x10
c000c884:	ba 16 00 00 00       	mov    edx,0x16
c000c889:	85 c0                	test   eax,eax
c000c88b:	0f 8f 23 06 00 00    	jg     c000ceb4 <sinc_quad_vari_process+0x6bb>
c000c891:	83 ec 0c             	sub    esp,0xc
c000c894:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c897:	e8 b7 b5 01 00       	call   c0027e53 <__floatsidf>
c000c89c:	83 c4 10             	add    esp,0x10
c000c89f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8a7:	68 00 00 00 40       	push   0x40000000
c000c8ac:	6a 00                	push   0x0
c000c8ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8b6:	e8 b8 a8 01 00       	call   c0027173 <__adddf3>
c000c8bb:	59                   	pop    ecx
c000c8bc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8c0:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8c4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8c7:	e8 87 b5 01 00       	call   c0027e53 <__floatsidf>
c000c8cc:	83 c4 10             	add    esp,0x10
c000c8cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d7:	52                   	push   edx
c000c8d8:	50                   	push   eax
c000c8d9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8dd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e1:	e8 ee b1 01 00       	call   c0027ad4 <__divdf3>
c000c8e6:	83 c4 10             	add    esp,0x10
c000c8e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8f1:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8f4:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8fb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c903:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c907:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c90f:	e8 8d b7 01 00       	call   c00280a1 <__gtdf2>
c000c914:	83 c4 10             	add    esp,0x10
c000c917:	85 c0                	test   eax,eax
c000c919:	7e 2d                	jle    c000c948 <sinc_quad_vari_process+0x14f>
c000c91b:	68 00 00 f0 3f       	push   0x3ff00000
c000c920:	6a 00                	push   0x0
c000c922:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c926:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c92a:	e8 90 b7 01 00       	call   c00280bf <__ltdf2>
c000c92f:	83 c4 10             	add    esp,0x10
c000c932:	85 c0                	test   eax,eax
c000c934:	79 4d                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c936:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c93a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c93e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c942:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c946:	eb 1b                	jmp    c000c963 <sinc_quad_vari_process+0x16a>
c000c948:	68 00 00 f0 3f       	push   0x3ff00000
c000c94d:	6a 00                	push   0x0
c000c94f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c953:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c957:	e8 63 b7 01 00       	call   c00280bf <__ltdf2>
c000c95c:	83 c4 10             	add    esp,0x10
c000c95f:	85 c0                	test   eax,eax
c000c961:	79 20                	jns    c000c983 <sinc_quad_vari_process+0x18a>
c000c963:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c967:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c96b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c973:	e8 5c b1 01 00       	call   c0027ad4 <__divdf3>
c000c978:	83 c4 10             	add    esp,0x10
c000c97b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c97f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c983:	50                   	push   eax
c000c984:	50                   	push   eax
c000c985:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c989:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98d:	e8 de b8 01 00       	call   c0028270 <lrint>
c000c992:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c995:	40                   	inc    eax
c000c996:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c99a:	0f af c7             	imul   eax,edi
c000c99d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c9a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c9a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9a8:	58                   	pop    eax
c000c9a9:	5a                   	pop    edx
c000c9aa:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9ae:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c9b2:	e8 b9 b8 01 00       	call   c0028270 <lrint>
c000c9b7:	83 ec 0c             	sub    esp,0xc
c000c9ba:	50                   	push   eax
c000c9bb:	e8 93 b4 01 00       	call   c0027e53 <__floatsidf>
c000c9c0:	83 c4 10             	add    esp,0x10
c000c9c3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9c7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9cb:	52                   	push   edx
c000c9cc:	50                   	push   eax
c000c9cd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9d5:	e8 ea ad 01 00       	call   c00277c4 <__subdf3>
c000c9da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9e2:	83 c4 20             	add    esp,0x20
c000c9e5:	6a 00                	push   0x0
c000c9e7:	6a 00                	push   0x0
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9f1:	e8 c9 b6 01 00       	call   c00280bf <__ltdf2>
c000c9f6:	83 c4 10             	add    esp,0x10
c000c9f9:	85 c0                	test   eax,eax
c000c9fb:	79 1f                	jns    c000ca1c <sinc_quad_vari_process+0x223>
c000c9fd:	68 00 00 f0 3f       	push   0x3ff00000
c000ca02:	6a 00                	push   0x0
c000ca04:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca08:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ca0c:	e8 62 a7 01 00       	call   c0027173 <__adddf3>
c000ca11:	83 c4 10             	add    esp,0x10
c000ca14:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ca18:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ca1c:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca1f:	83 ec 10             	sub    esp,0x10
c000ca22:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca26:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca31:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca35:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca39:	e8 86 ad 01 00       	call   c00277c4 <__subdf3>
c000ca3e:	83 c4 18             	add    esp,0x18
c000ca41:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca45:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca49:	52                   	push   edx
c000ca4a:	50                   	push   eax
c000ca4b:	e8 20 b8 01 00       	call   c0028270 <lrint>
c000ca50:	0f af f8             	imul   edi,eax
c000ca53:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca57:	01 f8                	add    eax,edi
c000ca59:	99                   	cdq    
c000ca5a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca5d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca60:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca64:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca68:	68 00 00 f0 3f       	push   0x3ff00000
c000ca6d:	6a 00                	push   0x0
c000ca6f:	e8 60 b0 01 00       	call   c0027ad4 <__divdf3>
c000ca74:	83 c4 10             	add    esp,0x10
c000ca77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca7f:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca84:	68 23 42 92 0c       	push   0xc924223
c000ca89:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca8d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca91:	e8 dd a6 01 00       	call   c0027173 <__adddf3>
c000ca96:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca9a:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca9e:	83 c4 20             	add    esp,0x20
c000caa1:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000caa9:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000cab1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000cab4:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000cab7:	7d 50                	jge    c000cb09 <sinc_quad_vari_process+0x310>
c000cab9:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cabc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cabf:	01 c8                	add    eax,ecx
c000cac1:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cac4:	99                   	cdq    
c000cac5:	f7 f9                	idiv   ecx
c000cac7:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cacb:	7d 0c                	jge    c000cad9 <sinc_quad_vari_process+0x2e0>
c000cacd:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cad0:	85 ff                	test   edi,edi
c000cad2:	79 6c                	jns    c000cb40 <sinc_quad_vari_process+0x347>
c000cad4:	e9 e7 00 00 00       	jmp    c000cbc0 <sinc_quad_vari_process+0x3c7>
c000cad9:	50                   	push   eax
c000cada:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cade:	56                   	push   esi
c000cadf:	53                   	push   ebx
c000cae0:	e8 11 ee ff ff       	call   c000b8f6 <prepare_data>
c000cae5:	83 c4 10             	add    esp,0x10
c000cae8:	89 c2                	mov    edx,eax
c000caea:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000caed:	85 c0                	test   eax,eax
c000caef:	0f 85 bf 03 00 00    	jne    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000caf5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000caf8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cafb:	01 c8                	add    eax,ecx
c000cafd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cb00:	99                   	cdq    
c000cb01:	f7 f9                	idiv   ecx
c000cb03:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cb07:	7c c4                	jl     c000cacd <sinc_quad_vari_process+0x2d4>
c000cb09:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000cb0d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000cb11:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000cb14:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000cb17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cb1b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb1f:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb22:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb25:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb28:	99                   	cdq    
c000cb29:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb2c:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb2f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb32:	99                   	cdq    
c000cb33:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb36:	31 d2                	xor    edx,edx
c000cb38:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb3b:	e9 74 03 00 00       	jmp    c000ceb4 <sinc_quad_vari_process+0x6bb>
c000cb40:	83 ec 0c             	sub    esp,0xc
c000cb43:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb46:	e8 08 b3 01 00       	call   c0027e53 <__floatsidf>
c000cb4b:	83 c4 10             	add    esp,0x10
c000cb4e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb52:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb56:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb66:	e8 08 a6 01 00       	call   c0027173 <__adddf3>
c000cb6b:	83 c4 10             	add    esp,0x10
c000cb6e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb72:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb76:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb86:	e8 e8 a5 01 00       	call   c0027173 <__adddf3>
c000cb8b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb8e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb92:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb96:	e8 b8 b2 01 00       	call   c0027e53 <__floatsidf>
c000cb9b:	83 c4 10             	add    esp,0x10
c000cb9e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cba2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cba6:	52                   	push   edx
c000cba7:	50                   	push   eax
c000cba8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbb0:	e8 08 b5 01 00       	call   c00280bd <__gedf2>
c000cbb5:	83 c4 10             	add    esp,0x10
c000cbb8:	85 c0                	test   eax,eax
c000cbba:	0f 89 49 ff ff ff    	jns    c000cb09 <sinc_quad_vari_process+0x310>
c000cbc0:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cbc4:	0f 8e ef 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cbca:	83 ec 10             	sub    esp,0x10
c000cbcd:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbd0:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbd3:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbd6:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbd9:	e8 e6 ab 01 00       	call   c00277c4 <__subdf3>
c000cbde:	83 c4 18             	add    esp,0x18
c000cbe1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbe5:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbe9:	52                   	push   edx
c000cbea:	50                   	push   eax
c000cbeb:	e8 60 b6 01 00       	call   c0028250 <fabs>
c000cbf0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbf4:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbf8:	83 c4 10             	add    esp,0x10
c000cbfb:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cc00:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cc05:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc09:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc0d:	e8 8f b4 01 00       	call   c00280a1 <__gtdf2>
c000cc12:	83 c4 10             	add    esp,0x10
c000cc15:	85 c0                	test   eax,eax
c000cc17:	0f 8e 9c 00 00 00    	jle    c000ccb9 <sinc_quad_vari_process+0x4c0>
c000cc1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc20:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc2b:	52                   	push   edx
c000cc2c:	50                   	push   eax
c000cc2d:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc30:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc33:	e8 8c ab 01 00       	call   c00277c4 <__subdf3>
c000cc38:	59                   	pop    ecx
c000cc39:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc3d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc41:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc44:	e8 0a b2 01 00       	call   c0027e53 <__floatsidf>
c000cc49:	83 c4 10             	add    esp,0x10
c000cc4c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc50:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc54:	52                   	push   edx
c000cc55:	50                   	push   eax
c000cc56:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc5e:	e8 8d ab 01 00       	call   c00277f0 <__muldf3>
c000cc63:	5f                   	pop    edi
c000cc64:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc68:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc6c:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc6f:	e8 df b1 01 00       	call   c0027e53 <__floatsidf>
c000cc74:	83 c4 10             	add    esp,0x10
c000cc77:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc7b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc7f:	52                   	push   edx
c000cc80:	50                   	push   eax
c000cc81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc85:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc89:	e8 46 ae 01 00       	call   c0027ad4 <__divdf3>
c000cc8e:	83 c4 10             	add    esp,0x10
c000cc91:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc95:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc99:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc9d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cca1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cca9:	e8 c5 a4 01 00       	call   c0027173 <__adddf3>
c000ccae:	83 c4 10             	add    esp,0x10
c000ccb1:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ccb5:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ccb9:	83 ec 0c             	sub    esp,0xc
c000ccbc:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000ccbf:	e8 8f b1 01 00       	call   c0027e53 <__floatsidf>
c000ccc4:	83 c4 10             	add    esp,0x10
c000ccc7:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cccb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cccf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccd7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccdf:	e8 db b3 01 00       	call   c00280bf <__ltdf2>
c000cce4:	83 c4 10             	add    esp,0x10
c000cce7:	85 c0                	test   eax,eax
c000cce9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000cced:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccf1:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccf5:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccf9:	78 10                	js     c000cd0b <sinc_quad_vari_process+0x512>
c000ccfb:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ccff:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cd03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cd07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cd0b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1b:	e8 d0 aa 01 00       	call   c00277f0 <__muldf3>
c000cd20:	59                   	pop    ecx
c000cd21:	5f                   	pop    edi
c000cd22:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd26:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd2a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd2e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd32:	e8 98 eb ff ff       	call   c000b8cf <double_to_fp>
c000cd37:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd3b:	89 c7                	mov    edi,eax
c000cd3d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd49:	e8 a2 aa 01 00       	call   c00277f0 <__muldf3>
c000cd4e:	83 c4 18             	add    esp,0x18
c000cd51:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd55:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd59:	52                   	push   edx
c000cd5a:	50                   	push   eax
c000cd5b:	e8 6f eb ff ff       	call   c000b8cf <double_to_fp>
c000cd60:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd63:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd67:	83 c4 0c             	add    esp,0xc
c000cd6a:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd6d:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd70:	50                   	push   eax
c000cd71:	50                   	push   eax
c000cd72:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd75:	e8 d9 b0 01 00       	call   c0027e53 <__floatsidf>
c000cd7a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd7e:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd82:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd86:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd8e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd92:	e8 3d ad 01 00       	call   c0027ad4 <__divdf3>
c000cd97:	83 c4 18             	add    esp,0x18
c000cd9a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd9e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cda2:	52                   	push   edx
c000cda3:	89 fa                	mov    edx,edi
c000cda5:	50                   	push   eax
c000cda6:	89 d8                	mov    eax,ebx
c000cda8:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cdac:	e8 a5 d1 ff ff       	call   c0009f56 <calc_output_quad>
c000cdb1:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cdb5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdb9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cdbd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cdc5:	e8 0a ad 01 00       	call   c0027ad4 <__divdf3>
c000cdca:	83 c4 10             	add    esp,0x10
c000cdcd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdd1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdd5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdd9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cddd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cde5:	e8 89 a3 01 00       	call   c0027173 <__adddf3>
c000cdea:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdee:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdf2:	83 c4 18             	add    esp,0x18
c000cdf5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdf9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdfd:	e8 6e b4 01 00       	call   c0028270 <lrint>
c000ce02:	83 ec 0c             	sub    esp,0xc
c000ce05:	50                   	push   eax
c000ce06:	e8 48 b0 01 00       	call   c0027e53 <__floatsidf>
c000ce0b:	83 c4 10             	add    esp,0x10
c000ce0e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ce12:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ce16:	52                   	push   edx
c000ce17:	50                   	push   eax
c000ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce1c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce20:	e8 9f a9 01 00       	call   c00277c4 <__subdf3>
c000ce25:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce29:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce2d:	83 c4 20             	add    esp,0x20
c000ce30:	6a 00                	push   0x0
c000ce32:	6a 00                	push   0x0
c000ce34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce38:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce3c:	e8 7e b2 01 00       	call   c00280bf <__ltdf2>
c000ce41:	83 c4 10             	add    esp,0x10
c000ce44:	85 c0                	test   eax,eax
c000ce46:	79 20                	jns    c000ce68 <sinc_quad_vari_process+0x66f>
c000ce48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce58:	e8 16 a3 01 00       	call   c0027173 <__adddf3>
c000ce5d:	83 c4 10             	add    esp,0x10
c000ce60:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce64:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce68:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce6b:	83 ec 10             	sub    esp,0x10
c000ce6e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce72:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce75:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce81:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce85:	e8 3a a9 01 00       	call   c00277c4 <__subdf3>
c000ce8a:	83 c4 18             	add    esp,0x18
c000ce8d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce91:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce95:	52                   	push   edx
c000ce96:	50                   	push   eax
c000ce97:	e8 d4 b3 01 00       	call   c0028270 <lrint>
c000ce9c:	0f af f8             	imul   edi,eax
c000ce9f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000cea3:	83 c4 10             	add    esp,0x10
c000cea6:	01 f8                	add    eax,edi
c000cea8:	99                   	cdq    
c000cea9:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ceac:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ceaf:	e9 fd fb ff ff       	jmp    c000cab1 <sinc_quad_vari_process+0x2b8>
c000ceb4:	83 c4 4c             	add    esp,0x4c
c000ceb7:	89 d0                	mov    eax,edx
c000ceb9:	5b                   	pop    ebx
c000ceba:	5e                   	pop    esi
c000cebb:	5f                   	pop    edi
c000cebc:	5d                   	pop    ebp
c000cebd:	c3                   	ret    

c000cebe <sinc_stereo_vari_process>:
c000cebe:	55                   	push   ebp
c000cebf:	ba 05 00 00 00       	mov    edx,0x5
c000cec4:	57                   	push   edi
c000cec5:	56                   	push   esi
c000cec6:	53                   	push   ebx
c000cec7:	83 ec 4c             	sub    esp,0x4c
c000ceca:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000cece:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ced2:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ced5:	85 db                	test   ebx,ebx
c000ced7:	0f 84 9c 06 00 00    	je     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cedd:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cee0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cee3:	0f af c7             	imul   eax,edi
c000cee6:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000cee9:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000ceec:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000cef3:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cefa:	0f af c7             	imul   eax,edi
c000cefd:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cf00:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cf03:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cf06:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cf0a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cf0e:	68 00 00 70 3f       	push   0x3f700000
c000cf13:	6a 00                	push   0x0
c000cf15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf19:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1d:	e8 9d b1 01 00       	call   c00280bf <__ltdf2>
c000cf22:	83 c4 10             	add    esp,0x10
c000cf25:	ba 16 00 00 00       	mov    edx,0x16
c000cf2a:	85 c0                	test   eax,eax
c000cf2c:	0f 88 47 06 00 00    	js     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf32:	68 00 00 70 40       	push   0x40700000
c000cf37:	6a 00                	push   0x0
c000cf39:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf3d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf41:	e8 5b b1 01 00       	call   c00280a1 <__gtdf2>
c000cf46:	83 c4 10             	add    esp,0x10
c000cf49:	ba 16 00 00 00       	mov    edx,0x16
c000cf4e:	85 c0                	test   eax,eax
c000cf50:	0f 8f 23 06 00 00    	jg     c000d579 <sinc_stereo_vari_process+0x6bb>
c000cf56:	83 ec 0c             	sub    esp,0xc
c000cf59:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf5c:	e8 f2 ae 01 00       	call   c0027e53 <__floatsidf>
c000cf61:	83 c4 10             	add    esp,0x10
c000cf64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf68:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf6c:	68 00 00 00 40       	push   0x40000000
c000cf71:	6a 00                	push   0x0
c000cf73:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf7b:	e8 f3 a1 01 00       	call   c0027173 <__adddf3>
c000cf80:	59                   	pop    ecx
c000cf81:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf85:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf89:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf8c:	e8 c2 ae 01 00       	call   c0027e53 <__floatsidf>
c000cf91:	83 c4 10             	add    esp,0x10
c000cf94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf98:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf9c:	52                   	push   edx
c000cf9d:	50                   	push   eax
c000cf9e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa6:	e8 29 ab 01 00       	call   c0027ad4 <__divdf3>
c000cfab:	83 c4 10             	add    esp,0x10
c000cfae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cfb2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cfb6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cfb9:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cfbc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfc0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfc4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfc8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfcc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfd4:	e8 c8 b0 01 00       	call   c00280a1 <__gtdf2>
c000cfd9:	83 c4 10             	add    esp,0x10
c000cfdc:	85 c0                	test   eax,eax
c000cfde:	7e 2d                	jle    c000d00d <sinc_stereo_vari_process+0x14f>
c000cfe0:	68 00 00 f0 3f       	push   0x3ff00000
c000cfe5:	6a 00                	push   0x0
c000cfe7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfeb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfef:	e8 cb b0 01 00       	call   c00280bf <__ltdf2>
c000cff4:	83 c4 10             	add    esp,0x10
c000cff7:	85 c0                	test   eax,eax
c000cff9:	79 4d                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000cffb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfff:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d003:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d007:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d00b:	eb 1b                	jmp    c000d028 <sinc_stereo_vari_process+0x16a>
c000d00d:	68 00 00 f0 3f       	push   0x3ff00000
c000d012:	6a 00                	push   0x0
c000d014:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d018:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d01c:	e8 9e b0 01 00       	call   c00280bf <__ltdf2>
c000d021:	83 c4 10             	add    esp,0x10
c000d024:	85 c0                	test   eax,eax
c000d026:	79 20                	jns    c000d048 <sinc_stereo_vari_process+0x18a>
c000d028:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d02c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d030:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d034:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d038:	e8 97 aa 01 00       	call   c0027ad4 <__divdf3>
c000d03d:	83 c4 10             	add    esp,0x10
c000d040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d044:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d048:	50                   	push   eax
c000d049:	50                   	push   eax
c000d04a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d04e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d052:	e8 19 b2 01 00       	call   c0028270 <lrint>
c000d057:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d05a:	40                   	inc    eax
c000d05b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d05f:	0f af c7             	imul   eax,edi
c000d062:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d069:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d06d:	58                   	pop    eax
c000d06e:	5a                   	pop    edx
c000d06f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d073:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d077:	e8 f4 b1 01 00       	call   c0028270 <lrint>
c000d07c:	83 ec 0c             	sub    esp,0xc
c000d07f:	50                   	push   eax
c000d080:	e8 ce ad 01 00       	call   c0027e53 <__floatsidf>
c000d085:	83 c4 10             	add    esp,0x10
c000d088:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d08c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d090:	52                   	push   edx
c000d091:	50                   	push   eax
c000d092:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d096:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d09a:	e8 25 a7 01 00       	call   c00277c4 <__subdf3>
c000d09f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d0a3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d0a7:	83 c4 20             	add    esp,0x20
c000d0aa:	6a 00                	push   0x0
c000d0ac:	6a 00                	push   0x0
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b6:	e8 04 b0 01 00       	call   c00280bf <__ltdf2>
c000d0bb:	83 c4 10             	add    esp,0x10
c000d0be:	85 c0                	test   eax,eax
c000d0c0:	79 1f                	jns    c000d0e1 <sinc_stereo_vari_process+0x223>
c000d0c2:	68 00 00 f0 3f       	push   0x3ff00000
c000d0c7:	6a 00                	push   0x0
c000d0c9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0d1:	e8 9d a0 01 00       	call   c0027173 <__adddf3>
c000d0d6:	83 c4 10             	add    esp,0x10
c000d0d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0dd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0e1:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0e4:	83 ec 10             	sub    esp,0x10
c000d0e7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0eb:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0fe:	e8 c1 a6 01 00       	call   c00277c4 <__subdf3>
c000d103:	83 c4 18             	add    esp,0x18
c000d106:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d10a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d10e:	52                   	push   edx
c000d10f:	50                   	push   eax
c000d110:	e8 5b b1 01 00       	call   c0028270 <lrint>
c000d115:	0f af f8             	imul   edi,eax
c000d118:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d11c:	01 f8                	add    eax,edi
c000d11e:	99                   	cdq    
c000d11f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d122:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d125:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d129:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d12d:	68 00 00 f0 3f       	push   0x3ff00000
c000d132:	6a 00                	push   0x0
c000d134:	e8 9b a9 01 00       	call   c0027ad4 <__divdf3>
c000d139:	83 c4 10             	add    esp,0x10
c000d13c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d140:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d144:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d149:	68 23 42 92 0c       	push   0xc924223
c000d14e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d152:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d156:	e8 18 a0 01 00       	call   c0027173 <__adddf3>
c000d15b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d15f:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d163:	83 c4 20             	add    esp,0x20
c000d166:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d16e:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d176:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d179:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d17c:	7d 50                	jge    c000d1ce <sinc_stereo_vari_process+0x310>
c000d17e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d181:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d184:	01 c8                	add    eax,ecx
c000d186:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d189:	99                   	cdq    
c000d18a:	f7 f9                	idiv   ecx
c000d18c:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d190:	7d 0c                	jge    c000d19e <sinc_stereo_vari_process+0x2e0>
c000d192:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d195:	85 ff                	test   edi,edi
c000d197:	79 6c                	jns    c000d205 <sinc_stereo_vari_process+0x347>
c000d199:	e9 e7 00 00 00       	jmp    c000d285 <sinc_stereo_vari_process+0x3c7>
c000d19e:	50                   	push   eax
c000d19f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d1a3:	56                   	push   esi
c000d1a4:	53                   	push   ebx
c000d1a5:	e8 4c e7 ff ff       	call   c000b8f6 <prepare_data>
c000d1aa:	83 c4 10             	add    esp,0x10
c000d1ad:	89 c2                	mov    edx,eax
c000d1af:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d1b2:	85 c0                	test   eax,eax
c000d1b4:	0f 85 bf 03 00 00    	jne    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d1ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d1bd:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1c0:	01 c8                	add    eax,ecx
c000d1c2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1c5:	99                   	cdq    
c000d1c6:	f7 f9                	idiv   ecx
c000d1c8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1cc:	7c c4                	jl     c000d192 <sinc_stereo_vari_process+0x2d4>
c000d1ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1d2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1d6:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1d9:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1e0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1e4:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1e7:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1ea:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ed:	99                   	cdq    
c000d1ee:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1f1:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1f4:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1f7:	99                   	cdq    
c000d1f8:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1fb:	31 d2                	xor    edx,edx
c000d1fd:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d200:	e9 74 03 00 00       	jmp    c000d579 <sinc_stereo_vari_process+0x6bb>
c000d205:	83 ec 0c             	sub    esp,0xc
c000d208:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d20b:	e8 43 ac 01 00       	call   c0027e53 <__floatsidf>
c000d210:	83 c4 10             	add    esp,0x10
c000d213:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d217:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d21f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d223:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d227:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22b:	e8 43 9f 01 00       	call   c0027173 <__adddf3>
c000d230:	83 c4 10             	add    esp,0x10
c000d233:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d237:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d23b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d23f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d243:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d247:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d24b:	e8 23 9f 01 00       	call   c0027173 <__adddf3>
c000d250:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d253:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d257:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d25b:	e8 f3 ab 01 00       	call   c0027e53 <__floatsidf>
c000d260:	83 c4 10             	add    esp,0x10
c000d263:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d267:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d26b:	52                   	push   edx
c000d26c:	50                   	push   eax
c000d26d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d271:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d275:	e8 43 ae 01 00       	call   c00280bd <__gedf2>
c000d27a:	83 c4 10             	add    esp,0x10
c000d27d:	85 c0                	test   eax,eax
c000d27f:	0f 89 49 ff ff ff    	jns    c000d1ce <sinc_stereo_vari_process+0x310>
c000d285:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d289:	0f 8e ef 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d28f:	83 ec 10             	sub    esp,0x10
c000d292:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d295:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d298:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d29b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d29e:	e8 21 a5 01 00       	call   c00277c4 <__subdf3>
c000d2a3:	83 c4 18             	add    esp,0x18
c000d2a6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2aa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2ae:	52                   	push   edx
c000d2af:	50                   	push   eax
c000d2b0:	e8 9b af 01 00       	call   c0028250 <fabs>
c000d2b5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d2b9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d2bd:	83 c4 10             	add    esp,0x10
c000d2c0:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2c5:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ca:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2ce:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2d2:	e8 ca ad 01 00       	call   c00280a1 <__gtdf2>
c000d2d7:	83 c4 10             	add    esp,0x10
c000d2da:	85 c0                	test   eax,eax
c000d2dc:	0f 8e 9c 00 00 00    	jle    c000d37e <sinc_stereo_vari_process+0x4c0>
c000d2e2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2e5:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2e8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2ec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2f0:	52                   	push   edx
c000d2f1:	50                   	push   eax
c000d2f2:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2f5:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2f8:	e8 c7 a4 01 00       	call   c00277c4 <__subdf3>
c000d2fd:	59                   	pop    ecx
c000d2fe:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d302:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d306:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d309:	e8 45 ab 01 00       	call   c0027e53 <__floatsidf>
c000d30e:	83 c4 10             	add    esp,0x10
c000d311:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d315:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d319:	52                   	push   edx
c000d31a:	50                   	push   eax
c000d31b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d31f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d323:	e8 c8 a4 01 00       	call   c00277f0 <__muldf3>
c000d328:	5f                   	pop    edi
c000d329:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d32d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d331:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d334:	e8 1a ab 01 00       	call   c0027e53 <__floatsidf>
c000d339:	83 c4 10             	add    esp,0x10
c000d33c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d340:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d344:	52                   	push   edx
c000d345:	50                   	push   eax
c000d346:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34e:	e8 81 a7 01 00       	call   c0027ad4 <__divdf3>
c000d353:	83 c4 10             	add    esp,0x10
c000d356:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d35a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d35e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d362:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d366:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d36e:	e8 00 9e 01 00       	call   c0027173 <__adddf3>
c000d373:	83 c4 10             	add    esp,0x10
c000d376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d37e:	83 ec 0c             	sub    esp,0xc
c000d381:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d384:	e8 ca aa 01 00       	call   c0027e53 <__floatsidf>
c000d389:	83 c4 10             	add    esp,0x10
c000d38c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d390:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d394:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d39c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d3a4:	e8 16 ad 01 00       	call   c00280bf <__ltdf2>
c000d3a9:	83 c4 10             	add    esp,0x10
c000d3ac:	85 c0                	test   eax,eax
c000d3ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d3b2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d3b6:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d3ba:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d3be:	78 10                	js     c000d3d0 <sinc_stereo_vari_process+0x512>
c000d3c0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3c8:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3cc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3d0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d4:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3dc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e0:	e8 0b a4 01 00       	call   c00277f0 <__muldf3>
c000d3e5:	59                   	pop    ecx
c000d3e6:	5f                   	pop    edi
c000d3e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3eb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3ef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3f7:	e8 d3 e4 ff ff       	call   c000b8cf <double_to_fp>
c000d3fc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d400:	89 c7                	mov    edi,eax
c000d402:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d406:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d40e:	e8 dd a3 01 00       	call   c00277f0 <__muldf3>
c000d413:	83 c4 18             	add    esp,0x18
c000d416:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d41a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d41e:	52                   	push   edx
c000d41f:	50                   	push   eax
c000d420:	e8 aa e4 ff ff       	call   c000b8cf <double_to_fp>
c000d425:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d428:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d42c:	83 c4 0c             	add    esp,0xc
c000d42f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d432:	8d 04 90             	lea    eax,[eax+edx*4]
c000d435:	50                   	push   eax
c000d436:	50                   	push   eax
c000d437:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d43a:	e8 14 aa 01 00       	call   c0027e53 <__floatsidf>
c000d43f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d443:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d447:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d44f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d453:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d457:	e8 78 a6 01 00       	call   c0027ad4 <__divdf3>
c000d45c:	83 c4 18             	add    esp,0x18
c000d45f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d463:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d467:	52                   	push   edx
c000d468:	89 fa                	mov    edx,edi
c000d46a:	50                   	push   eax
c000d46b:	89 d8                	mov    eax,ebx
c000d46d:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d471:	e8 02 c7 ff ff       	call   c0009b78 <calc_output_stereo>
c000d476:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d47a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d47e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d482:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d486:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d48a:	e8 45 a6 01 00       	call   c0027ad4 <__divdf3>
c000d48f:	83 c4 10             	add    esp,0x10
c000d492:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d496:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d49a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d49e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4aa:	e8 c4 9c 01 00       	call   c0027173 <__adddf3>
c000d4af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d4b3:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d4b7:	83 c4 18             	add    esp,0x18
c000d4ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4c2:	e8 a9 ad 01 00       	call   c0028270 <lrint>
c000d4c7:	83 ec 0c             	sub    esp,0xc
c000d4ca:	50                   	push   eax
c000d4cb:	e8 83 a9 01 00       	call   c0027e53 <__floatsidf>
c000d4d0:	83 c4 10             	add    esp,0x10
c000d4d3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4d7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4db:	52                   	push   edx
c000d4dc:	50                   	push   eax
c000d4dd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4e5:	e8 da a2 01 00       	call   c00277c4 <__subdf3>
c000d4ea:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4f2:	83 c4 20             	add    esp,0x20
c000d4f5:	6a 00                	push   0x0
c000d4f7:	6a 00                	push   0x0
c000d4f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d501:	e8 b9 ab 01 00       	call   c00280bf <__ltdf2>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	85 c0                	test   eax,eax
c000d50b:	79 20                	jns    c000d52d <sinc_stereo_vari_process+0x66f>
c000d50d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d511:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d515:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d519:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d51d:	e8 51 9c 01 00       	call   c0027173 <__adddf3>
c000d522:	83 c4 10             	add    esp,0x10
c000d525:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d529:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d52d:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d530:	83 ec 10             	sub    esp,0x10
c000d533:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d537:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d542:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d546:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d54a:	e8 75 a2 01 00       	call   c00277c4 <__subdf3>
c000d54f:	83 c4 18             	add    esp,0x18
c000d552:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d556:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d55a:	52                   	push   edx
c000d55b:	50                   	push   eax
c000d55c:	e8 0f ad 01 00       	call   c0028270 <lrint>
c000d561:	0f af f8             	imul   edi,eax
c000d564:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d568:	83 c4 10             	add    esp,0x10
c000d56b:	01 f8                	add    eax,edi
c000d56d:	99                   	cdq    
c000d56e:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d571:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d574:	e9 fd fb ff ff       	jmp    c000d176 <sinc_stereo_vari_process+0x2b8>
c000d579:	83 c4 4c             	add    esp,0x4c
c000d57c:	89 d0                	mov    eax,edx
c000d57e:	5b                   	pop    ebx
c000d57f:	5e                   	pop    esi
c000d580:	5f                   	pop    edi
c000d581:	5d                   	pop    ebp
c000d582:	c3                   	ret    

c000d583 <sinc_mono_vari_process>:
c000d583:	55                   	push   ebp
c000d584:	ba 05 00 00 00       	mov    edx,0x5
c000d589:	57                   	push   edi
c000d58a:	56                   	push   esi
c000d58b:	53                   	push   ebx
c000d58c:	83 ec 4c             	sub    esp,0x4c
c000d58f:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d593:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d597:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d59a:	85 db                	test   ebx,ebx
c000d59c:	0f 84 c1 06 00 00    	je     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5a2:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d5a5:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d5a8:	0f af c7             	imul   eax,edi
c000d5ab:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d5ae:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d5b1:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d5b8:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5bf:	0f af c7             	imul   eax,edi
c000d5c2:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5c5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5c9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5cc:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5ce:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5d6:	68 00 00 70 3f       	push   0x3f700000
c000d5db:	6a 00                	push   0x0
c000d5dd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e5:	e8 d5 aa 01 00       	call   c00280bf <__ltdf2>
c000d5ea:	83 c4 10             	add    esp,0x10
c000d5ed:	ba 16 00 00 00       	mov    edx,0x16
c000d5f2:	85 c0                	test   eax,eax
c000d5f4:	0f 88 69 06 00 00    	js     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d5fa:	68 00 00 70 40       	push   0x40700000
c000d5ff:	6a 00                	push   0x0
c000d601:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d605:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d609:	e8 93 aa 01 00       	call   c00280a1 <__gtdf2>
c000d60e:	83 c4 10             	add    esp,0x10
c000d611:	ba 16 00 00 00       	mov    edx,0x16
c000d616:	85 c0                	test   eax,eax
c000d618:	0f 8f 45 06 00 00    	jg     c000dc63 <sinc_mono_vari_process+0x6e0>
c000d61e:	83 ec 0c             	sub    esp,0xc
c000d621:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d624:	e8 2a a8 01 00       	call   c0027e53 <__floatsidf>
c000d629:	83 c4 10             	add    esp,0x10
c000d62c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d630:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d634:	68 00 00 00 40       	push   0x40000000
c000d639:	6a 00                	push   0x0
c000d63b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d63f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d643:	e8 2b 9b 01 00       	call   c0027173 <__adddf3>
c000d648:	59                   	pop    ecx
c000d649:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d64d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d651:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d654:	e8 fa a7 01 00       	call   c0027e53 <__floatsidf>
c000d659:	83 c4 10             	add    esp,0x10
c000d65c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d660:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d664:	52                   	push   edx
c000d665:	50                   	push   eax
c000d666:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d66e:	e8 61 a4 01 00       	call   c0027ad4 <__divdf3>
c000d673:	83 c4 10             	add    esp,0x10
c000d676:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d67a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d67e:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d681:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d684:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d68c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d690:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d694:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d69c:	e8 00 aa 01 00       	call   c00280a1 <__gtdf2>
c000d6a1:	83 c4 10             	add    esp,0x10
c000d6a4:	85 c0                	test   eax,eax
c000d6a6:	7e 2d                	jle    c000d6d5 <sinc_mono_vari_process+0x152>
c000d6a8:	68 00 00 f0 3f       	push   0x3ff00000
c000d6ad:	6a 00                	push   0x0
c000d6af:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6b7:	e8 03 aa 01 00       	call   c00280bf <__ltdf2>
c000d6bc:	83 c4 10             	add    esp,0x10
c000d6bf:	85 c0                	test   eax,eax
c000d6c1:	79 4d                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6c7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6cb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6cf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6d3:	eb 1b                	jmp    c000d6f0 <sinc_mono_vari_process+0x16d>
c000d6d5:	68 00 00 f0 3f       	push   0x3ff00000
c000d6da:	6a 00                	push   0x0
c000d6dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6e4:	e8 d6 a9 01 00       	call   c00280bf <__ltdf2>
c000d6e9:	83 c4 10             	add    esp,0x10
c000d6ec:	85 c0                	test   eax,eax
c000d6ee:	79 20                	jns    c000d710 <sinc_mono_vari_process+0x18d>
c000d6f0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d700:	e8 cf a3 01 00       	call   c0027ad4 <__divdf3>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d70c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d710:	50                   	push   eax
c000d711:	50                   	push   eax
c000d712:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d716:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d71a:	e8 51 ab 01 00       	call   c0028270 <lrint>
c000d71f:	40                   	inc    eax
c000d720:	0f af c7             	imul   eax,edi
c000d723:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d727:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d72b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d72e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d731:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d739:	58                   	pop    eax
c000d73a:	5a                   	pop    edx
c000d73b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d73f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d743:	e8 28 ab 01 00       	call   c0028270 <lrint>
c000d748:	83 ec 0c             	sub    esp,0xc
c000d74b:	50                   	push   eax
c000d74c:	e8 02 a7 01 00       	call   c0027e53 <__floatsidf>
c000d751:	83 c4 10             	add    esp,0x10
c000d754:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d758:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d75c:	52                   	push   edx
c000d75d:	50                   	push   eax
c000d75e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d762:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d766:	e8 59 a0 01 00       	call   c00277c4 <__subdf3>
c000d76b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d76f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d773:	83 c4 20             	add    esp,0x20
c000d776:	6a 00                	push   0x0
c000d778:	6a 00                	push   0x0
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d782:	e8 38 a9 01 00       	call   c00280bf <__ltdf2>
c000d787:	83 c4 10             	add    esp,0x10
c000d78a:	85 c0                	test   eax,eax
c000d78c:	79 1f                	jns    c000d7ad <sinc_mono_vari_process+0x22a>
c000d78e:	68 00 00 f0 3f       	push   0x3ff00000
c000d793:	6a 00                	push   0x0
c000d795:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d799:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d79d:	e8 d1 99 01 00       	call   c0027173 <__adddf3>
c000d7a2:	83 c4 10             	add    esp,0x10
c000d7a5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d7ad:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d7b0:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d7b3:	83 ec 10             	sub    esp,0x10
c000d7b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d7be:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7c6:	e8 f9 9f 01 00       	call   c00277c4 <__subdf3>
c000d7cb:	83 c4 18             	add    esp,0x18
c000d7ce:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7d2:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7d6:	52                   	push   edx
c000d7d7:	50                   	push   eax
c000d7d8:	e8 93 aa 01 00       	call   c0028270 <lrint>
c000d7dd:	0f af f8             	imul   edi,eax
c000d7e0:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7e3:	31 ff                	xor    edi,edi
c000d7e5:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7ea:	99                   	cdq    
c000d7eb:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7ee:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7f1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7f9:	55                   	push   ebp
c000d7fa:	57                   	push   edi
c000d7fb:	e8 d4 a2 01 00       	call   c0027ad4 <__divdf3>
c000d800:	83 c4 10             	add    esp,0x10
c000d803:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d807:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d80b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d810:	68 23 42 92 0c       	push   0xc924223
c000d815:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d819:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d81d:	e8 51 99 01 00       	call   c0027173 <__adddf3>
c000d822:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d826:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d82a:	83 c4 20             	add    esp,0x20
c000d82d:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d831:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d835:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d838:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d83b:	7d 54                	jge    c000d891 <sinc_mono_vari_process+0x30e>
c000d83d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d840:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d843:	01 c8                	add    eax,ecx
c000d845:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d848:	99                   	cdq    
c000d849:	f7 f9                	idiv   ecx
c000d84b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d84f:	7d 0c                	jge    c000d85d <sinc_mono_vari_process+0x2da>
c000d851:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d854:	85 ff                	test   edi,edi
c000d856:	79 73                	jns    c000d8cb <sinc_mono_vari_process+0x348>
c000d858:	e9 ee 00 00 00       	jmp    c000d94b <sinc_mono_vari_process+0x3c8>
c000d85d:	50                   	push   eax
c000d85e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d862:	56                   	push   esi
c000d863:	53                   	push   ebx
c000d864:	e8 8d e0 ff ff       	call   c000b8f6 <prepare_data>
c000d869:	89 c2                	mov    edx,eax
c000d86b:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d86f:	83 c4 10             	add    esp,0x10
c000d872:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d875:	85 d2                	test   edx,edx
c000d877:	0f 85 e6 03 00 00    	jne    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d87d:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d880:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d883:	01 c8                	add    eax,ecx
c000d885:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d888:	99                   	cdq    
c000d889:	f7 f9                	idiv   ecx
c000d88b:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d88f:	7c c0                	jl     c000d851 <sinc_mono_vari_process+0x2ce>
c000d891:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d895:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d899:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d89d:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d8a0:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d8a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d8a7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d8ab:	89 01                	mov    DWORD PTR [ecx],eax
c000d8ad:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d8b0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d8b3:	99                   	cdq    
c000d8b4:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8b7:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d8ba:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d8bd:	99                   	cdq    
c000d8be:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8c1:	31 d2                	xor    edx,edx
c000d8c3:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8c6:	e9 98 03 00 00       	jmp    c000dc63 <sinc_mono_vari_process+0x6e0>
c000d8cb:	83 ec 0c             	sub    esp,0xc
c000d8ce:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8d1:	e8 7d a5 01 00       	call   c0027e53 <__floatsidf>
c000d8d6:	83 c4 10             	add    esp,0x10
c000d8d9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8dd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f1:	e8 7d 98 01 00       	call   c0027173 <__adddf3>
c000d8f6:	83 c4 10             	add    esp,0x10
c000d8f9:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8fd:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d901:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d905:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d909:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d90d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d911:	e8 5d 98 01 00       	call   c0027173 <__adddf3>
c000d916:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d919:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d91d:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d921:	e8 2d a5 01 00       	call   c0027e53 <__floatsidf>
c000d926:	83 c4 10             	add    esp,0x10
c000d929:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d92d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d931:	52                   	push   edx
c000d932:	50                   	push   eax
c000d933:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d937:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d93b:	e8 61 a7 01 00       	call   c00280a1 <__gtdf2>
c000d940:	83 c4 10             	add    esp,0x10
c000d943:	85 c0                	test   eax,eax
c000d945:	0f 8f 46 ff ff ff    	jg     c000d891 <sinc_mono_vari_process+0x30e>
c000d94b:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d94f:	0f 8e f5 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d955:	83 ec 10             	sub    esp,0x10
c000d958:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d95b:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d95e:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d962:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d965:	ff 30                	push   DWORD PTR [eax]
c000d967:	e8 58 9e 01 00       	call   c00277c4 <__subdf3>
c000d96c:	83 c4 18             	add    esp,0x18
c000d96f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d973:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d977:	52                   	push   edx
c000d978:	50                   	push   eax
c000d979:	e8 d2 a8 01 00       	call   c0028250 <fabs>
c000d97e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d982:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d986:	83 c4 10             	add    esp,0x10
c000d989:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d98e:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d993:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d997:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d99b:	e8 01 a7 01 00       	call   c00280a1 <__gtdf2>
c000d9a0:	83 c4 10             	add    esp,0x10
c000d9a3:	85 c0                	test   eax,eax
c000d9a5:	0f 8e 9f 00 00 00    	jle    c000da4a <sinc_mono_vari_process+0x4c7>
c000d9ab:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d9af:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d9b2:	8b 00                	mov    eax,DWORD PTR [eax]
c000d9b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d9b8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d9bc:	52                   	push   edx
c000d9bd:	50                   	push   eax
c000d9be:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9c1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9c4:	e8 fb 9d 01 00       	call   c00277c4 <__subdf3>
c000d9c9:	5f                   	pop    edi
c000d9ca:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9ce:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9d2:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9d5:	e8 79 a4 01 00       	call   c0027e53 <__floatsidf>
c000d9da:	83 c4 10             	add    esp,0x10
c000d9dd:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9e1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9e5:	52                   	push   edx
c000d9e6:	50                   	push   eax
c000d9e7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9eb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9ef:	e8 fc 9d 01 00       	call   c00277f0 <__muldf3>
c000d9f4:	5d                   	pop    ebp
c000d9f5:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9f9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9fd:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000da00:	e8 4e a4 01 00       	call   c0027e53 <__floatsidf>
c000da05:	83 c4 10             	add    esp,0x10
c000da08:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da0c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da10:	52                   	push   edx
c000da11:	50                   	push   eax
c000da12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1a:	e8 b5 a0 01 00       	call   c0027ad4 <__divdf3>
c000da1f:	83 c4 10             	add    esp,0x10
c000da22:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da26:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da2a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da2e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da32:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da36:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da3a:	e8 34 97 01 00       	call   c0027173 <__adddf3>
c000da3f:	83 c4 10             	add    esp,0x10
c000da42:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da46:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da4a:	83 ec 0c             	sub    esp,0xc
c000da4d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da50:	e8 fe a3 01 00       	call   c0027e53 <__floatsidf>
c000da55:	83 c4 10             	add    esp,0x10
c000da58:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da5c:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da64:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da70:	e8 4a a6 01 00       	call   c00280bf <__ltdf2>
c000da75:	83 c4 10             	add    esp,0x10
c000da78:	85 c0                	test   eax,eax
c000da7a:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da7e:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da82:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da86:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da8a:	78 10                	js     c000da9c <sinc_mono_vari_process+0x519>
c000da8c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da90:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da94:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da98:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da9c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000daa4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daa8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daac:	e8 3f 9d 01 00       	call   c00277f0 <__muldf3>
c000dab1:	59                   	pop    ecx
c000dab2:	5f                   	pop    edi
c000dab3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dab7:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dabb:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dabf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dac3:	e8 07 de ff ff       	call   c000b8cf <double_to_fp>
c000dac8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dacc:	89 c7                	mov    edi,eax
c000dace:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dad2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dad6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dada:	e8 11 9d 01 00       	call   c00277f0 <__muldf3>
c000dadf:	83 c4 18             	add    esp,0x18
c000dae2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dae6:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	e8 de dd ff ff       	call   c000b8cf <double_to_fp>
c000daf1:	83 ec 0c             	sub    esp,0xc
c000daf4:	89 c5                	mov    ebp,eax
c000daf6:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000daf9:	e8 55 a3 01 00       	call   c0027e53 <__floatsidf>
c000dafe:	83 c4 10             	add    esp,0x10
c000db01:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db05:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db09:	52                   	push   edx
c000db0a:	50                   	push   eax
c000db0b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db0f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db13:	e8 bc 9f 01 00       	call   c0027ad4 <__divdf3>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	89 e9                	mov    ecx,ebp
c000db1d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db21:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db25:	89 d8                	mov    eax,ebx
c000db27:	89 fa                	mov    edx,edi
c000db29:	e8 ee bd ff ff       	call   c000991c <calc_output_single>
c000db2e:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db31:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db3c:	52                   	push   edx
c000db3d:	50                   	push   eax
c000db3e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db46:	e8 a5 9c 01 00       	call   c00277f0 <__muldf3>
c000db4b:	59                   	pop    ecx
c000db4c:	59                   	pop    ecx
c000db4d:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db55:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db59:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db5d:	e8 61 a5 01 00       	call   c00280c3 <__truncdfsf2>
c000db62:	83 c4 10             	add    esp,0x10
c000db65:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db68:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db6b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db6f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db73:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db77:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db7b:	e8 54 9f 01 00       	call   c0027ad4 <__divdf3>
c000db80:	83 c4 10             	add    esp,0x10
c000db83:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db87:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db8b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db93:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db9b:	e8 d3 95 01 00       	call   c0027173 <__adddf3>
c000dba0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000dba4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000dba8:	83 c4 18             	add    esp,0x18
c000dbab:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbaf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000dbb3:	e8 b8 a6 01 00       	call   c0028270 <lrint>
c000dbb8:	83 ec 0c             	sub    esp,0xc
c000dbbb:	50                   	push   eax
c000dbbc:	e8 92 a2 01 00       	call   c0027e53 <__floatsidf>
c000dbc1:	83 c4 10             	add    esp,0x10
c000dbc4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dbc8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbcc:	52                   	push   edx
c000dbcd:	50                   	push   eax
c000dbce:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbd6:	e8 e9 9b 01 00       	call   c00277c4 <__subdf3>
c000dbdb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbdf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbe3:	83 c4 20             	add    esp,0x20
c000dbe6:	6a 00                	push   0x0
c000dbe8:	6a 00                	push   0x0
c000dbea:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbee:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbf2:	e8 c8 a4 01 00       	call   c00280bf <__ltdf2>
c000dbf7:	83 c4 10             	add    esp,0x10
c000dbfa:	85 c0                	test   eax,eax
c000dbfc:	79 20                	jns    c000dc1e <sinc_mono_vari_process+0x69b>
c000dbfe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc06:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dc0e:	e8 60 95 01 00       	call   c0027173 <__adddf3>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dc1a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dc1e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc21:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc24:	83 ec 10             	sub    esp,0x10
c000dc27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc2f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc33:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc37:	e8 88 9b 01 00       	call   c00277c4 <__subdf3>
c000dc3c:	83 c4 18             	add    esp,0x18
c000dc3f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc43:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc47:	52                   	push   edx
c000dc48:	50                   	push   eax
c000dc49:	e8 22 a6 01 00       	call   c0028270 <lrint>
c000dc4e:	83 c4 10             	add    esp,0x10
c000dc51:	0f af f8             	imul   edi,eax
c000dc54:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc57:	99                   	cdq    
c000dc58:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc5b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc5e:	e9 d2 fb ff ff       	jmp    c000d835 <sinc_mono_vari_process+0x2b2>
c000dc63:	83 c4 4c             	add    esp,0x4c
c000dc66:	89 d0                	mov    eax,edx
c000dc68:	5b                   	pop    ebx
c000dc69:	5e                   	pop    esi
c000dc6a:	5f                   	pop    edi
c000dc6b:	5d                   	pop    ebp
c000dc6c:	c3                   	ret    

c000dc6d <sinc_get_name>:
c000dc6d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc71:	31 c0                	xor    eax,eax
c000dc73:	83 fa 02             	cmp    edx,0x2
c000dc76:	77 07                	ja     c000dc7f <sinc_get_name+0x12>
c000dc78:	8b 04 95 64 9a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd659c]
c000dc7f:	c3                   	ret    

c000dc80 <sinc_get_description>:
c000dc80:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc84:	31 c0                	xor    eax,eax
c000dc86:	83 fa 02             	cmp    edx,0x2
c000dc89:	77 07                	ja     c000dc92 <sinc_get_description+0x12>
c000dc8b:	8b 04 95 58 9a 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd65a8]
c000dc92:	c3                   	ret    

c000dc93 <sinc_set_converter>:
c000dc93:	53                   	push   ebx
c000dc94:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc9a:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dca1:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dca4:	85 c0                	test   eax,eax
c000dca6:	74 13                	je     c000dcbb <sinc_set_converter+0x28>
c000dca8:	83 ec 0c             	sub    esp,0xc
c000dcab:	50                   	push   eax
c000dcac:	e8 9f 1b 00 00       	call   c000f850 <free>
c000dcb1:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dcb8:	83 c4 10             	add    esp,0x10
c000dcbb:	50                   	push   eax
c000dcbc:	68 44 08 00 00       	push   0x844
c000dcc1:	6a 00                	push   0x0
c000dcc3:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dcc7:	50                   	push   eax
c000dcc8:	e8 ab 2a ff ff       	call   c0000778 <memset>
c000dccd:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcd0:	83 c4 10             	add    esp,0x10
c000dcd3:	b8 0b 00 00 00       	mov    eax,0xb
c000dcd8:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcde:	7f 6e                	jg     c000dd4e <sinc_set_converter+0xbb>
c000dce0:	83 fa 01             	cmp    edx,0x1
c000dce3:	75 10                	jne    c000dcf5 <sinc_set_converter+0x62>
c000dce5:	c7 43 24 83 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d583
c000dcec:	c7 43 20 83 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d583
c000dcf3:	eb 4d                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dcf5:	83 fa 02             	cmp    edx,0x2
c000dcf8:	75 10                	jne    c000dd0a <sinc_set_converter+0x77>
c000dcfa:	c7 43 24 be ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000cebe
c000dd01:	c7 43 20 be ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000cebe
c000dd08:	eb 38                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd0a:	83 fa 04             	cmp    edx,0x4
c000dd0d:	75 10                	jne    c000dd1f <sinc_set_converter+0x8c>
c000dd0f:	c7 43 24 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7f9
c000dd16:	c7 43 20 f9 c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7f9
c000dd1d:	eb 23                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd1f:	83 fa 06             	cmp    edx,0x6
c000dd22:	75 10                	jne    c000dd34 <sinc_set_converter+0xa1>
c000dd24:	c7 43 24 34 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c134
c000dd2b:	c7 43 20 34 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c134
c000dd32:	eb 0e                	jmp    c000dd42 <sinc_set_converter+0xaf>
c000dd34:	c7 43 24 70 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba70
c000dd3b:	c7 43 20 70 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba70
c000dd42:	c7 43 28 23 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad23
c000dd49:	b8 0a 00 00 00       	mov    eax,0xa
c000dd4e:	81 c4 58 08 00 00    	add    esp,0x858
c000dd54:	5b                   	pop    ebx
c000dd55:	c3                   	ret    

c000dd56 <zoh_vari_process>:
c000dd56:	55                   	push   ebp
c000dd57:	31 d2                	xor    edx,edx
c000dd59:	57                   	push   edi
c000dd5a:	56                   	push   esi
c000dd5b:	53                   	push   ebx
c000dd5c:	83 ec 3c             	sub    esp,0x3c
c000dd5f:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd63:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd67:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd6b:	0f 8e 80 06 00 00    	jle    c000e3f1 <zoh_vari_process+0x69b>
c000dd71:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd74:	ba 05 00 00 00       	mov    edx,0x5
c000dd79:	85 db                	test   ebx,ebx
c000dd7b:	0f 84 70 06 00 00    	je     c000e3f1 <zoh_vari_process+0x69b>
c000dd81:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd84:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd88:	74 19                	je     c000dda3 <zoh_vari_process+0x4d>
c000dd8a:	31 d2                	xor    edx,edx
c000dd8c:	39 c2                	cmp    edx,eax
c000dd8e:	7d 0c                	jge    c000dd9c <zoh_vari_process+0x46>
c000dd90:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd92:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd95:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd99:	42                   	inc    edx
c000dd9a:	eb f0                	jmp    c000dd8c <zoh_vari_process+0x36>
c000dd9c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dda3:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dda6:	0f af d0             	imul   edx,eax
c000dda9:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000ddac:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000ddb0:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000ddb7:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000ddba:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000ddc1:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000ddc4:	8b 07                	mov    eax,DWORD PTR [edi]
c000ddc6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddce:	68 00 00 70 3f       	push   0x3f700000
c000ddd3:	6a 00                	push   0x0
c000ddd5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddd9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dddd:	e8 dd a2 01 00       	call   c00280bf <__ltdf2>
c000dde2:	83 c4 10             	add    esp,0x10
c000dde5:	ba 16 00 00 00       	mov    edx,0x16
c000ddea:	85 c0                	test   eax,eax
c000ddec:	0f 88 ff 05 00 00    	js     c000e3f1 <zoh_vari_process+0x69b>
c000ddf2:	68 00 00 70 40       	push   0x40700000
c000ddf7:	6a 00                	push   0x0
c000ddf9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddfd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de01:	e8 9b a2 01 00       	call   c00280a1 <__gtdf2>
c000de06:	83 c4 10             	add    esp,0x10
c000de09:	ba 16 00 00 00       	mov    edx,0x16
c000de0e:	85 c0                	test   eax,eax
c000de10:	0f 8f db 05 00 00    	jg     c000e3f1 <zoh_vari_process+0x69b>
c000de16:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000de19:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000de1c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de20:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de24:	68 00 00 f0 3f       	push   0x3ff00000
c000de29:	6a 00                	push   0x0
c000de2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de33:	e8 87 a2 01 00       	call   c00280bf <__ltdf2>
c000de38:	83 c4 10             	add    esp,0x10
c000de3b:	85 c0                	test   eax,eax
c000de3d:	0f 89 da 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000de43:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de46:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de49:	0f 8d ce 01 00 00    	jge    c000e01d <zoh_vari_process+0x2c7>
c000de4f:	83 ec 0c             	sub    esp,0xc
c000de52:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de55:	e8 f9 9f 01 00       	call   c0027e53 <__floatsidf>
c000de5a:	83 c4 10             	add    esp,0x10
c000de5d:	89 04 24             	mov    DWORD PTR [esp],eax
c000de60:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de64:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de68:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de6c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de70:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de74:	e8 77 99 01 00       	call   c00277f0 <__muldf3>
c000de79:	59                   	pop    ecx
c000de7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de7e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de82:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de85:	e8 c9 9f 01 00       	call   c0027e53 <__floatsidf>
c000de8a:	83 c4 10             	add    esp,0x10
c000de8d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de91:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de95:	52                   	push   edx
c000de96:	50                   	push   eax
c000de97:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de9f:	e8 cf 92 01 00       	call   c0027173 <__adddf3>
c000dea4:	59                   	pop    ecx
c000dea5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000dea9:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000dead:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000deb0:	e8 9e 9f 01 00       	call   c0027e53 <__floatsidf>
c000deb5:	83 c4 10             	add    esp,0x10
c000deb8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000debc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dec0:	52                   	push   edx
c000dec1:	50                   	push   eax
c000dec2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dec6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deca:	e8 ee a1 01 00       	call   c00280bd <__gedf2>
c000decf:	83 c4 10             	add    esp,0x10
c000ded2:	85 c0                	test   eax,eax
c000ded4:	0f 89 43 01 00 00    	jns    c000e01d <zoh_vari_process+0x2c7>
c000deda:	85 ed                	test   ebp,ebp
c000dedc:	0f 8e ec 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000dee2:	83 ec 10             	sub    esp,0x10
c000dee5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dee8:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000deeb:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000deee:	ff 37                	push   DWORD PTR [edi]
c000def0:	e8 cf 98 01 00       	call   c00277c4 <__subdf3>
c000def5:	83 c4 18             	add    esp,0x18
c000def8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000defc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df00:	52                   	push   edx
c000df01:	50                   	push   eax
c000df02:	e8 49 a3 01 00       	call   c0028250 <fabs>
c000df07:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000df0b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000df0f:	83 c4 10             	add    esp,0x10
c000df12:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000df17:	68 23 42 92 0c       	push   0xc924223
c000df1c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df20:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df24:	e8 78 a1 01 00       	call   c00280a1 <__gtdf2>
c000df29:	83 c4 10             	add    esp,0x10
c000df2c:	85 c0                	test   eax,eax
c000df2e:	0f 8e 9a 00 00 00    	jle    c000dfce <zoh_vari_process+0x278>
c000df34:	8b 07                	mov    eax,DWORD PTR [edi]
c000df36:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df39:	89 04 24             	mov    DWORD PTR [esp],eax
c000df3c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df40:	52                   	push   edx
c000df41:	50                   	push   eax
c000df42:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df45:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df48:	e8 77 98 01 00       	call   c00277c4 <__subdf3>
c000df4d:	59                   	pop    ecx
c000df4e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df52:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df56:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df59:	e8 f5 9e 01 00       	call   c0027e53 <__floatsidf>
c000df5e:	83 c4 10             	add    esp,0x10
c000df61:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df65:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df69:	52                   	push   edx
c000df6a:	50                   	push   eax
c000df6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df6f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df73:	e8 78 98 01 00       	call   c00277f0 <__muldf3>
c000df78:	5d                   	pop    ebp
c000df79:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df7d:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df81:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df84:	e8 ca 9e 01 00       	call   c0027e53 <__floatsidf>
c000df89:	83 c4 10             	add    esp,0x10
c000df8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df94:	52                   	push   edx
c000df95:	50                   	push   eax
c000df96:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9e:	e8 31 9b 01 00       	call   c0027ad4 <__divdf3>
c000dfa3:	83 c4 10             	add    esp,0x10
c000dfa6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfaa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb2:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000dfb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dfbe:	e8 b0 91 01 00       	call   c0027173 <__adddf3>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfce:	31 c0                	xor    eax,eax
c000dfd0:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfd3:	7e 13                	jle    c000dfe8 <zoh_vari_process+0x292>
c000dfd5:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfd9:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfdc:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfdf:	40                   	inc    eax
c000dfe0:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfe3:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfe6:	eb e8                	jmp    c000dfd0 <zoh_vari_process+0x27a>
c000dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfec:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dff0:	68 00 00 f0 3f       	push   0x3ff00000
c000dff5:	6a 00                	push   0x0
c000dff7:	e8 d8 9a 01 00       	call   c0027ad4 <__divdf3>
c000dffc:	83 c4 10             	add    esp,0x10
c000dfff:	89 04 24             	mov    DWORD PTR [esp],eax
c000e002:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e006:	52                   	push   edx
c000e007:	50                   	push   eax
c000e008:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e00c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e010:	e8 5e 91 01 00       	call   c0027173 <__adddf3>
c000e015:	83 c4 10             	add    esp,0x10
c000e018:	e9 ff fd ff ff       	jmp    c000de1c <zoh_vari_process+0xc6>
c000e01d:	55                   	push   ebp
c000e01e:	55                   	push   ebp
c000e01f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e023:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e027:	e8 44 a2 01 00       	call   c0028270 <lrint>
c000e02c:	83 ec 0c             	sub    esp,0xc
c000e02f:	50                   	push   eax
c000e030:	e8 1e 9e 01 00       	call   c0027e53 <__floatsidf>
c000e035:	83 c4 10             	add    esp,0x10
c000e038:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e03c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e040:	52                   	push   edx
c000e041:	50                   	push   eax
c000e042:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e046:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e04a:	e8 75 97 01 00       	call   c00277c4 <__subdf3>
c000e04f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e053:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e057:	83 c4 20             	add    esp,0x20
c000e05a:	6a 00                	push   0x0
c000e05c:	6a 00                	push   0x0
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e066:	e8 54 a0 01 00       	call   c00280bf <__ltdf2>
c000e06b:	83 c4 10             	add    esp,0x10
c000e06e:	85 c0                	test   eax,eax
c000e070:	79 1e                	jns    c000e090 <zoh_vari_process+0x33a>
c000e072:	68 00 00 f0 3f       	push   0x3ff00000
c000e077:	6a 00                	push   0x0
c000e079:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e07d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e081:	e8 ed 90 01 00       	call   c0027173 <__adddf3>
c000e086:	83 c4 10             	add    esp,0x10
c000e089:	89 04 24             	mov    DWORD PTR [esp],eax
c000e08c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e090:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e093:	83 ec 10             	sub    esp,0x10
c000e096:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e09e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e0a6:	e8 19 97 01 00       	call   c00277c4 <__subdf3>
c000e0ab:	83 c4 18             	add    esp,0x18
c000e0ae:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0b2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0b6:	52                   	push   edx
c000e0b7:	50                   	push   eax
c000e0b8:	e8 b3 a1 01 00       	call   c0028270 <lrint>
c000e0bd:	83 c4 10             	add    esp,0x10
c000e0c0:	0f af e8             	imul   ebp,eax
c000e0c3:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0c6:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0c9:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0d0:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0d3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0d7:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0da:	0f 8d 7a 02 00 00    	jge    c000e35a <zoh_vari_process+0x604>
c000e0e0:	83 ec 0c             	sub    esp,0xc
c000e0e3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0e6:	e8 68 9d 01 00       	call   c0027e53 <__floatsidf>
c000e0eb:	83 c4 10             	add    esp,0x10
c000e0ee:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0f6:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0fe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e102:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e106:	e8 e5 96 01 00       	call   c00277f0 <__muldf3>
c000e10b:	59                   	pop    ecx
c000e10c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e110:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e114:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e118:	e8 36 9d 01 00       	call   c0027e53 <__floatsidf>
c000e11d:	83 c4 10             	add    esp,0x10
c000e120:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e124:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e128:	52                   	push   edx
c000e129:	50                   	push   eax
c000e12a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e12e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e132:	e8 3c 90 01 00       	call   c0027173 <__adddf3>
c000e137:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e13a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e13e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e142:	e8 0c 9d 01 00       	call   c0027e53 <__floatsidf>
c000e147:	83 c4 10             	add    esp,0x10
c000e14a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e14e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e152:	52                   	push   edx
c000e153:	50                   	push   eax
c000e154:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e158:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e15c:	e8 60 9f 01 00       	call   c00280c1 <__ledf2>
c000e161:	83 c4 10             	add    esp,0x10
c000e164:	85 c0                	test   eax,eax
c000e166:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e16a:	0f 8f ea 01 00 00    	jg     c000e35a <zoh_vari_process+0x604>
c000e170:	85 c9                	test   ecx,ecx
c000e172:	0f 8e ed 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e178:	83 ec 10             	sub    esp,0x10
c000e17b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e17e:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e181:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e184:	ff 37                	push   DWORD PTR [edi]
c000e186:	e8 39 96 01 00       	call   c00277c4 <__subdf3>
c000e18b:	83 c4 18             	add    esp,0x18
c000e18e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e192:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e196:	52                   	push   edx
c000e197:	50                   	push   eax
c000e198:	e8 b3 a0 01 00       	call   c0028250 <fabs>
c000e19d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e1a1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e1a5:	83 c4 10             	add    esp,0x10
c000e1a8:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e1ad:	68 23 42 92 0c       	push   0xc924223
c000e1b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1ba:	e8 e2 9e 01 00       	call   c00280a1 <__gtdf2>
c000e1bf:	83 c4 10             	add    esp,0x10
c000e1c2:	85 c0                	test   eax,eax
c000e1c4:	0f 8e 9b 00 00 00    	jle    c000e265 <zoh_vari_process+0x50f>
c000e1ca:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1cc:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1cf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1d3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1d7:	52                   	push   edx
c000e1d8:	50                   	push   eax
c000e1d9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1dc:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1df:	e8 e0 95 01 00       	call   c00277c4 <__subdf3>
c000e1e4:	5d                   	pop    ebp
c000e1e5:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1e9:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ed:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1f0:	e8 5e 9c 01 00       	call   c0027e53 <__floatsidf>
c000e1f5:	83 c4 10             	add    esp,0x10
c000e1f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1fc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e200:	52                   	push   edx
c000e201:	50                   	push   eax
c000e202:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e206:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e20a:	e8 e1 95 01 00       	call   c00277f0 <__muldf3>
c000e20f:	59                   	pop    ecx
c000e210:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e214:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e218:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e21b:	e8 33 9c 01 00       	call   c0027e53 <__floatsidf>
c000e220:	83 c4 10             	add    esp,0x10
c000e223:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e227:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e22b:	52                   	push   edx
c000e22c:	50                   	push   eax
c000e22d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e231:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e235:	e8 9a 98 01 00       	call   c0027ad4 <__divdf3>
c000e23a:	83 c4 10             	add    esp,0x10
c000e23d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e241:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e245:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e249:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e24d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e251:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e255:	e8 19 8f 01 00       	call   c0027173 <__adddf3>
c000e25a:	83 c4 10             	add    esp,0x10
c000e25d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e261:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e265:	31 d2                	xor    edx,edx
c000e267:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e26a:	39 d0                	cmp    eax,edx
c000e26c:	7e 1d                	jle    c000e28b <zoh_vari_process+0x535>
c000e26e:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e271:	29 c1                	sub    ecx,eax
c000e273:	89 c8                	mov    eax,ecx
c000e275:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e277:	01 d0                	add    eax,edx
c000e279:	42                   	inc    edx
c000e27a:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e27d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e280:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e283:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e286:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e289:	eb dc                	jmp    c000e267 <zoh_vari_process+0x511>
c000e28b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e28f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e293:	68 00 00 f0 3f       	push   0x3ff00000
c000e298:	6a 00                	push   0x0
c000e29a:	e8 35 98 01 00       	call   c0027ad4 <__divdf3>
c000e29f:	83 c4 10             	add    esp,0x10
c000e2a2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2a6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2aa:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2ae:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e2b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ba:	e8 b4 8e 01 00       	call   c0027173 <__adddf3>
c000e2bf:	5d                   	pop    ebp
c000e2c0:	59                   	pop    ecx
c000e2c1:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2c9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2cd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2d1:	e8 9a 9f 01 00       	call   c0028270 <lrint>
c000e2d6:	83 ec 0c             	sub    esp,0xc
c000e2d9:	50                   	push   eax
c000e2da:	e8 74 9b 01 00       	call   c0027e53 <__floatsidf>
c000e2df:	83 c4 10             	add    esp,0x10
c000e2e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2e6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2ea:	52                   	push   edx
c000e2eb:	50                   	push   eax
c000e2ec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2f4:	e8 cb 94 01 00       	call   c00277c4 <__subdf3>
c000e2f9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2fd:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e301:	83 c4 20             	add    esp,0x20
c000e304:	6a 00                	push   0x0
c000e306:	6a 00                	push   0x0
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e310:	e8 aa 9d 01 00       	call   c00280bf <__ltdf2>
c000e315:	83 c4 10             	add    esp,0x10
c000e318:	85 c0                	test   eax,eax
c000e31a:	79 1e                	jns    c000e33a <zoh_vari_process+0x5e4>
c000e31c:	68 00 00 f0 3f       	push   0x3ff00000
c000e321:	6a 00                	push   0x0
c000e323:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e327:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e32b:	e8 43 8e 01 00       	call   c0027173 <__adddf3>
c000e330:	83 c4 10             	add    esp,0x10
c000e333:	89 04 24             	mov    DWORD PTR [esp],eax
c000e336:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e33a:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e33d:	83 ec 10             	sub    esp,0x10
c000e340:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e344:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e348:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e34c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e350:	e8 6f 94 01 00       	call   c00277c4 <__subdf3>
c000e355:	e9 51 fd ff ff       	jmp    c000e0ab <zoh_vari_process+0x355>
c000e35a:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e35e:	7d 3a                	jge    c000e39a <zoh_vari_process+0x644>
c000e360:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e364:	83 ec 0c             	sub    esp,0xc
c000e367:	29 e8                	sub    eax,ebp
c000e369:	99                   	cdq    
c000e36a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e36d:	50                   	push   eax
c000e36e:	e8 e0 9a 01 00       	call   c0027e53 <__floatsidf>
c000e373:	83 c4 10             	add    esp,0x10
c000e376:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e37a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e37e:	52                   	push   edx
c000e37f:	50                   	push   eax
c000e380:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e384:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e388:	e8 e6 8d 01 00       	call   c0027173 <__adddf3>
c000e38d:	83 c4 10             	add    esp,0x10
c000e390:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e393:	89 04 24             	mov    DWORD PTR [esp],eax
c000e396:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e39a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e39d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e3a1:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e3a4:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e3a7:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3aa:	85 c0                	test   eax,eax
c000e3ac:	7f 25                	jg     c000e3d3 <zoh_vari_process+0x67d>
c000e3ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e3b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e3b6:	89 07                	mov    DWORD PTR [edi],eax
c000e3b8:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e3bb:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e3be:	99                   	cdq    
c000e3bf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3c2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3c5:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3c8:	99                   	cdq    
c000e3c9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3cc:	31 d2                	xor    edx,edx
c000e3ce:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3d1:	eb 1e                	jmp    c000e3f1 <zoh_vari_process+0x69b>
c000e3d3:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3d6:	31 d2                	xor    edx,edx
c000e3d8:	29 c8                	sub    eax,ecx
c000e3da:	c1 e0 02             	shl    eax,0x2
c000e3dd:	39 d1                	cmp    ecx,edx
c000e3df:	7e cd                	jle    c000e3ae <zoh_vari_process+0x658>
c000e3e1:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3e3:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3e7:	83 c0 04             	add    eax,0x4
c000e3ea:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3ee:	42                   	inc    edx
c000e3ef:	eb ec                	jmp    c000e3dd <zoh_vari_process+0x687>
c000e3f1:	83 c4 3c             	add    esp,0x3c
c000e3f4:	89 d0                	mov    eax,edx
c000e3f6:	5b                   	pop    ebx
c000e3f7:	5e                   	pop    esi
c000e3f8:	5f                   	pop    edi
c000e3f9:	5d                   	pop    ebp
c000e3fa:	c3                   	ret    

c000e3fb <zoh_reset>:
c000e3fb:	83 ec 0c             	sub    esp,0xc
c000e3fe:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e402:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e405:	85 c0                	test   eax,eax
c000e407:	74 20                	je     c000e429 <zoh_reset+0x2e>
c000e409:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e40c:	83 c0 1c             	add    eax,0x1c
c000e40f:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e412:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e419:	c1 e2 02             	shl    edx,0x2
c000e41c:	51                   	push   ecx
c000e41d:	52                   	push   edx
c000e41e:	6a 00                	push   0x0
c000e420:	50                   	push   eax
c000e421:	e8 52 23 ff ff       	call   c0000778 <memset>
c000e426:	83 c4 10             	add    esp,0x10
c000e429:	83 c4 0c             	add    esp,0xc
c000e42c:	c3                   	ret    

c000e42d <zoh_get_name>:
c000e42d:	31 c0                	xor    eax,eax
c000e42f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e434:	75 05                	jne    c000e43b <zoh_get_name+0xe>
c000e436:	b8 7e 9b 02 c0       	mov    eax,0xc0029b7e
c000e43b:	c3                   	ret    

c000e43c <zoh_get_description>:
c000e43c:	31 c0                	xor    eax,eax
c000e43e:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e443:	75 05                	jne    c000e44a <zoh_get_description+0xe>
c000e445:	b8 8f 9b 02 c0       	mov    eax,0xc0029b8f
c000e44a:	c3                   	ret    

c000e44b <zoh_set_converter>:
c000e44b:	53                   	push   ebx
c000e44c:	b8 0a 00 00 00       	mov    eax,0xa
c000e451:	83 ec 08             	sub    esp,0x8
c000e454:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e458:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e45d:	75 6e                	jne    c000e4cd <zoh_set_converter+0x82>
c000e45f:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e462:	85 c0                	test   eax,eax
c000e464:	74 13                	je     c000e479 <zoh_set_converter+0x2e>
c000e466:	83 ec 0c             	sub    esp,0xc
c000e469:	50                   	push   eax
c000e46a:	e8 e1 13 00 00       	call   c000f850 <free>
c000e46f:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e476:	83 c4 10             	add    esp,0x10
c000e479:	50                   	push   eax
c000e47a:	50                   	push   eax
c000e47b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e47e:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e485:	50                   	push   eax
c000e486:	6a 01                	push   0x1
c000e488:	e8 e3 13 00 00       	call   c000f870 <calloc>
c000e48d:	83 c4 10             	add    esp,0x10
c000e490:	89 c2                	mov    edx,eax
c000e492:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e495:	85 d2                	test   edx,edx
c000e497:	b8 01 00 00 00       	mov    eax,0x1
c000e49c:	74 2f                	je     c000e4cd <zoh_set_converter+0x82>
c000e49e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e4a1:	83 ec 0c             	sub    esp,0xc
c000e4a4:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e4a7:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e4ad:	c7 43 24 56 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd56
c000e4b4:	c7 43 20 56 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd56
c000e4bb:	c7 43 28 fb e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3fb
c000e4c2:	53                   	push   ebx
c000e4c3:	e8 33 ff ff ff       	call   c000e3fb <zoh_reset>
c000e4c8:	83 c4 10             	add    esp,0x10
c000e4cb:	31 c0                	xor    eax,eax
c000e4cd:	83 c4 08             	add    esp,0x8
c000e4d0:	5b                   	pop    ebx
c000e4d1:	c3                   	ret    

c000e4d2 <CPU::current()>:
c000e4d2:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c000e4d7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4dd:	90                   	nop
c000e4de:	c3                   	ret    

c000e4df <operator new(unsigned long)>:
c000e4df:	83 ec 0c             	sub    esp,0xc
c000e4e2:	83 ec 0c             	sub    esp,0xc
c000e4e5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e4e9:	e8 52 13 00 00       	call   c000f840 <malloc>
c000e4ee:	83 c4 10             	add    esp,0x10
c000e4f1:	83 c4 0c             	add    esp,0xc
c000e4f4:	c3                   	ret    

c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>:
c000e4f5:	83 ec 0c             	sub    esp,0xc
c000e4f8:	83 ec 08             	sub    esp,0x8
c000e4fb:	68 c6 9b 02 c0       	push   0xc0029bc6
c000e500:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e504:	e8 b7 23 ff ff       	call   c00008c0 <strcmp>
c000e509:	83 c4 10             	add    esp,0x10
c000e50c:	85 c0                	test   eax,eax
c000e50e:	0f 94 c0             	sete   al
c000e511:	84 c0                	test   al,al
c000e513:	74 0a                	je     c000e51f <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e515:	b8 08 e0 02 c0       	mov    eax,0xc002e008
c000e51a:	e9 e3 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e51f:	83 ec 08             	sub    esp,0x8
c000e522:	68 cf 9b 02 c0       	push   0xc0029bcf
c000e527:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e52b:	e8 90 23 ff ff       	call   c00008c0 <strcmp>
c000e530:	83 c4 10             	add    esp,0x10
c000e533:	85 c0                	test   eax,eax
c000e535:	0f 94 c0             	sete   al
c000e538:	84 c0                	test   al,al
c000e53a:	74 0a                	je     c000e546 <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e53c:	b8 ec 65 02 c0       	mov    eax,0xc00265ec
c000e541:	e9 bc 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e546:	83 ec 08             	sub    esp,0x8
c000e549:	68 d9 9b 02 c0       	push   0xc0029bd9
c000e54e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e552:	e8 69 23 ff ff       	call   c00008c0 <strcmp>
c000e557:	83 c4 10             	add    esp,0x10
c000e55a:	85 c0                	test   eax,eax
c000e55c:	0f 94 c0             	sete   al
c000e55f:	84 c0                	test   al,al
c000e561:	74 0a                	je     c000e56d <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e563:	b8 20 63 02 c0       	mov    eax,0xc0026320
c000e568:	e9 95 00 00 00       	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e56d:	83 ec 08             	sub    esp,0x8
c000e570:	68 e2 9b 02 c0       	push   0xc0029be2
c000e575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e579:	e8 42 23 ff ff       	call   c00008c0 <strcmp>
c000e57e:	83 c4 10             	add    esp,0x10
c000e581:	85 c0                	test   eax,eax
c000e583:	0f 94 c0             	sete   al
c000e586:	84 c0                	test   al,al
c000e588:	74 07                	je     c000e591 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e58a:	b8 ec 66 02 c0       	mov    eax,0xc00266ec
c000e58f:	eb 71                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e591:	83 ec 08             	sub    esp,0x8
c000e594:	68 ec 9b 02 c0       	push   0xc0029bec
c000e599:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e59d:	e8 1e 23 ff ff       	call   c00008c0 <strcmp>
c000e5a2:	83 c4 10             	add    esp,0x10
c000e5a5:	85 c0                	test   eax,eax
c000e5a7:	0f 94 c0             	sete   al
c000e5aa:	84 c0                	test   al,al
c000e5ac:	74 07                	je     c000e5b5 <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e5ae:	b8 6c 64 02 c0       	mov    eax,0xc002646c
c000e5b3:	eb 4d                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5b5:	83 ec 08             	sub    esp,0x8
c000e5b8:	68 f5 9b 02 c0       	push   0xc0029bf5
c000e5bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5c1:	e8 fa 22 ff ff       	call   c00008c0 <strcmp>
c000e5c6:	83 c4 10             	add    esp,0x10
c000e5c9:	85 c0                	test   eax,eax
c000e5cb:	0f 94 c0             	sete   al
c000e5ce:	84 c0                	test   al,al
c000e5d0:	74 07                	je     c000e5d9 <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e5d2:	b8 0c e0 02 c0       	mov    eax,0xc002e00c
c000e5d7:	eb 29                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d9:	83 ec 08             	sub    esp,0x8
c000e5dc:	68 02 9c 02 c0       	push   0xc0029c02
c000e5e1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5e5:	e8 d6 22 ff ff       	call   c00008c0 <strcmp>
c000e5ea:	83 c4 10             	add    esp,0x10
c000e5ed:	85 c0                	test   eax,eax
c000e5ef:	0f 94 c0             	sete   al
c000e5f2:	84 c0                	test   al,al
c000e5f4:	74 07                	je     c000e5fd <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e5f6:	b8 0d e0 02 c0       	mov    eax,0xc002e00d
c000e5fb:	eb 05                	jmp    c000e602 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5fd:	b8 00 00 00 00       	mov    eax,0x0
c000e602:	83 c4 0c             	add    esp,0xc
c000e605:	c3                   	ret    

c000e606 <Computer::close(int, int, void*)>:
c000e606:	57                   	push   edi
c000e607:	56                   	push   esi
c000e608:	53                   	push   ebx
c000e609:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e60d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e611:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e615:	83 ec 0c             	sub    esp,0xc
c000e618:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e61e:	e8 eb 5a 00 00       	call   c001410e <Device::closeAll()>
c000e623:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e629:	83 c4 10             	add    esp,0x10
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e632:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e63a:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e63e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e642:	5b                   	pop    ebx
c000e643:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e646:	5e                   	pop    esi
c000e647:	5f                   	pop    edi
c000e648:	ff e0                	jmp    eax

c000e64a <Krnl::firstTask()>:
c000e64a:	53                   	push   ebx
c000e64b:	83 ec 14             	sub    esp,0x14
c000e64e:	fb                   	sti    
c000e64f:	68 3f 07 00 00       	push   0x73f
c000e654:	e8 e7 11 00 00       	call   c000f840 <malloc>
c000e659:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e660:	89 c3                	mov    ebx,eax
c000e662:	ff 35 74 15 03 c0    	push   DWORD PTR ds:0xc0031574
c000e668:	68 0f 9c 02 c0       	push   0xc0029c0f
c000e66d:	6a 01                	push   0x1
c000e66f:	50                   	push   eax
c000e670:	e8 d1 f1 00 00       	call   c001d846 <Process::Process(bool, char const*, Process*, char**)>
c000e675:	83 c4 20             	add    esp,0x20
c000e678:	68 ff 00 00 00       	push   0xff
c000e67d:	6a 00                	push   0x0
c000e67f:	68 d5 f1 00 c0       	push   0xc000f1d5
c000e684:	53                   	push   ebx
c000e685:	e8 ba f4 00 00       	call   c001db44 <Process::createThread(void (*)(void*), void*, int)>
c000e68a:	6a 7a                	push   0x7a
c000e68c:	6a 00                	push   0x0
c000e68e:	68 a2 e3 01 c0       	push   0xc001e3a2
c000e693:	ff 35 74 15 03 c0    	push   DWORD PTR ds:0xc0031574
c000e699:	e8 a6 f4 00 00       	call   c001db44 <Process::createThread(void (*)(void*), void*, int)>
c000e69e:	83 c4 20             	add    esp,0x20
c000e6a1:	a3 28 15 03 c0       	mov    ds:0xc0031528,eax
c000e6a6:	c6 05 0d e0 02 c0 01 	mov    BYTE PTR ds:0xc002e00d,0x1
c000e6ad:	e8 71 00 01 00       	call   c001e723 <Vm::initialise8086()>
c000e6b2:	e8 3f 48 00 00       	call   c0012ef6 <Fs::initVFS()>
c000e6b7:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c000e6bc:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e6c2:	8b 10                	mov    edx,DWORD PTR [eax]
c000e6c4:	6a 00                	push   0x0
c000e6c6:	6a 00                	push   0x0
c000e6c8:	6a 00                	push   0x0
c000e6ca:	50                   	push   eax
c000e6cb:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e6ce:	e8 03 db 00 00       	call   c001c1d6 <Sys::loadSyscalls()>
c000e6d3:	e8 dc b9 00 00       	call   c001a0b4 <Krnl::loadSystemEnv()>
c000e6d8:	83 c4 0c             	add    esp,0xc
c000e6db:	6a 3a                	push   0x3a
c000e6dd:	68 1c 9c 02 c0       	push   0xc0029c1c
c000e6e2:	68 25 9c 02 c0       	push   0xc0029c25
c000e6e7:	e8 ee c6 00 00       	call   c001adda <Reg::readIntWithDefault(char*, char*, int)>
c000e6ec:	89 04 24             	mov    DWORD PTR [esp],eax
c000e6ef:	e8 ea 52 00 00       	call   c00139de <User::loadClockSettings(int)>
c000e6f4:	58                   	pop    eax
c000e6f5:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c000e6fa:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e700:	e8 dd 59 00 00       	call   c00140e2 <Device::loadDriversForAll()>
c000e705:	e8 f0 b4 00 00       	call   c0019bfa <Krnl::startCPUs()>
c000e70a:	5a                   	pop    edx
c000e70b:	8b 1d 08 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e008
c000e711:	59                   	pop    ecx
c000e712:	6a 01                	push   0x1
c000e714:	68 2d 9c 02 c0       	push   0xc0029c2d
c000e719:	e8 4c ec 00 00       	call   c001d36a <Thr::loadDLL(char const*, bool)>
c000e71e:	5a                   	pop    edx
c000e71f:	59                   	pop    ecx
c000e720:	53                   	push   ebx
c000e721:	50                   	push   eax
c000e722:	e8 77 ee 00 00       	call   c001d59e <Thr::executeDLL(unsigned long, void*)>
c000e727:	83 c4 10             	add    esp,0x10
c000e72a:	83 ec 0c             	sub    esp,0xc
c000e72d:	6a 02                	push   0x2
c000e72f:	e8 74 f7 00 00       	call   c001dea8 <blockTask(TaskState)>
c000e734:	83 c4 10             	add    esp,0x10
c000e737:	eb f1                	jmp    c000e72a <Krnl::firstTask()+0xe0>
c000e739:	90                   	nop

c000e73a <Computer::Computer()>:
c000e73a:	83 ec 0c             	sub    esp,0xc
c000e73d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e741:	83 ec 08             	sub    esp,0x8
c000e744:	68 49 9c 02 c0       	push   0xc0029c49
c000e749:	50                   	push   eax
c000e74a:	e8 39 5a 00 00       	call   c0014188 <Device::Device(char const*)>
c000e74f:	83 c4 10             	add    esp,0x10
c000e752:	ba e8 9d 02 c0       	mov    edx,0xc0029de8
c000e757:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e75b:	89 10                	mov    DWORD PTR [eax],edx
c000e75d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e761:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e76b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e76f:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e779:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e77d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e783:	83 ca 04             	or     edx,0x4
c000e786:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e78c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e790:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e796:	0f b6 d0             	movzx  edx,al
c000e799:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e79d:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e7a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a8:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ae:	0f b6 d0             	movzx  edx,al
c000e7b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7b5:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7be:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7c4:	8d 50 01             	lea    edx,[eax+0x1]
c000e7c7:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e7cb:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e7d1:	0f b6 d0             	movzx  edx,al
c000e7d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d8:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e7dc:	83 e1 3f             	and    ecx,0x3f
c000e7df:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e7e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7ed:	0f b6 d0             	movzx  edx,al
c000e7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f4:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e7fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ff:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e805:	0f b6 d0             	movzx  edx,al
c000e808:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80c:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e815:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e81b:	8d 50 01             	lea    edx,[eax+0x1]
c000e81e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e822:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e828:	0f b6 d0             	movzx  edx,al
c000e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82f:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e833:	83 e1 3f             	and    ecx,0x3f
c000e836:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e844:	0f b6 d0             	movzx  edx,al
c000e847:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84b:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e856:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e85c:	0f b6 d0             	movzx  edx,al
c000e85f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e863:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e868:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e86c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e872:	8d 50 01             	lea    edx,[eax+0x1]
c000e875:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e879:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e87f:	0f b6 d0             	movzx  edx,al
c000e882:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e886:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e88a:	83 e1 3f             	and    ecx,0x3f
c000e88d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e891:	90                   	nop
c000e892:	83 c4 0c             	add    esp,0xc
c000e895:	c3                   	ret    

c000e896 <Computer::setBootMessage(char const*)>:
c000e896:	c3                   	ret    
c000e897:	90                   	nop

c000e898 <Computer::detectFeatures()>:
c000e898:	55                   	push   ebp
c000e899:	57                   	push   edi
c000e89a:	56                   	push   esi
c000e89b:	53                   	push   ebx
c000e89c:	83 ec 1c             	sub    esp,0x1c
c000e89f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e8a3:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e8ad:	e8 32 1a ff ff       	call   c00002e4 <detectCPUID>
c000e8b2:	85 c0                	test   eax,eax
c000e8b4:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8ba:	0f 95 c2             	setne  dl
c000e8bd:	83 e0 fd             	and    eax,0xfffffffd
c000e8c0:	d1 e2                	shl    edx,1
c000e8c2:	09 d0                	or     eax,edx
c000e8c4:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8ca:	a8 02                	test   al,0x2
c000e8cc:	75 46                	jne    c000e914 <Computer::detectFeatures()+0x7c>
c000e8ce:	f6 05 21 e0 02 c0 04 	test   BYTE PTR ds:0xc002e021,0x4
c000e8d5:	74 07                	je     c000e8de <Computer::detectFeatures()+0x46>
c000e8d7:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e8de:	e8 d3 79 01 00       	call   c00262b6 <x87Detect>
c000e8e3:	83 e0 01             	and    eax,0x1
c000e8e6:	c1 e0 04             	shl    eax,0x4
c000e8e9:	88 c2                	mov    dl,al
c000e8eb:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e8f1:	83 e0 ef             	and    eax,0xffffffef
c000e8f4:	09 d0                	or     eax,edx
c000e8f6:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e8fc:	a8 10                	test   al,0x10
c000e8fe:	0f 85 2a 01 00 00    	jne    c000ea2e <Computer::detectFeatures()+0x196>
c000e904:	84 c0                	test   al,al
c000e906:	0f 88 45 01 00 00    	js     c000ea51 <Computer::detectFeatures()+0x1b9>
c000e90c:	83 c4 1c             	add    esp,0x1c
c000e90f:	5b                   	pop    ebx
c000e910:	5e                   	pop    esi
c000e911:	5f                   	pop    edi
c000e912:	5d                   	pop    ebp
c000e913:	c3                   	ret    
c000e914:	83 ec 0c             	sub    esp,0xc
c000e917:	6a 20                	push   0x20
c000e919:	e8 ee 9f 00 00       	call   c001890c <CPU::cpuidCheckEDX(unsigned int)>
c000e91e:	83 e0 01             	and    eax,0x1
c000e921:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e928:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e92e:	83 e0 f7             	and    eax,0xfffffff7
c000e931:	09 d0                	or     eax,edx
c000e933:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e939:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e940:	e8 c7 9f 00 00       	call   c001890c <CPU::cpuidCheckEDX(unsigned int)>
c000e945:	83 e0 01             	and    eax,0x1
c000e948:	88 c2                	mov    dl,al
c000e94a:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e950:	83 e0 fe             	and    eax,0xfffffffe
c000e953:	09 d0                	or     eax,edx
c000e955:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e95b:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e962:	e8 a5 9f 00 00       	call   c001890c <CPU::cpuidCheckEDX(unsigned int)>
c000e967:	c1 e0 07             	shl    eax,0x7
c000e96a:	88 c2                	mov    dl,al
c000e96c:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e972:	83 e0 7f             	and    eax,0x7f
c000e975:	09 d0                	or     eax,edx
c000e977:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e97d:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e984:	e8 83 9f 00 00       	call   c001890c <CPU::cpuidCheckEDX(unsigned int)>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	83 e0 01             	and    eax,0x1
c000e98f:	c1 e0 05             	shl    eax,0x5
c000e992:	88 c2                	mov    dl,al
c000e994:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e99a:	83 e0 df             	and    eax,0xffffffdf
c000e99d:	09 d0                	or     eax,edx
c000e99f:	f7 05 20 e0 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002e020,0x401
c000e9a9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9af:	0f 84 c2 00 00 00    	je     c000ea77 <Computer::detectFeatures()+0x1df>
c000e9b5:	83 e0 fe             	and    eax,0xfffffffe
c000e9b8:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9be:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e9c4:	88 c2                	mov    dl,al
c000e9c6:	83 e2 09             	and    edx,0x9
c000e9c9:	fe ca                	dec    dl
c000e9cb:	75 09                	jne    c000e9d6 <Computer::detectFeatures()+0x13e>
c000e9cd:	83 e0 fe             	and    eax,0xfffffffe
c000e9d0:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e9d6:	83 ec 0c             	sub    esp,0xc
c000e9d9:	8d 44 24 18          	lea    eax,[esp+0x18]
c000e9dd:	50                   	push   eax
c000e9de:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000e9e2:	55                   	push   ebp
c000e9e3:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000e9e7:	57                   	push   edi
c000e9e8:	8d 74 24 18          	lea    esi,[esp+0x18]
c000e9ec:	56                   	push   esi
c000e9ed:	68 00 00 00 80       	push   0x80000000
c000e9f2:	e8 91 9e 00 00       	call   c0018888 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000e9f7:	83 c4 20             	add    esp,0x20
c000e9fa:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea01:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea05:	0f 86 c3 fe ff ff    	jbe    c000e8ce <Computer::detectFeatures()+0x36>
c000ea0b:	83 ec 0c             	sub    esp,0xc
c000ea0e:	50                   	push   eax
c000ea0f:	55                   	push   ebp
c000ea10:	57                   	push   edi
c000ea11:	56                   	push   esi
c000ea12:	68 01 00 00 80       	push   0x80000001
c000ea17:	e8 6c 9e 00 00       	call   c0018888 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea1c:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea26:	83 c4 20             	add    esp,0x20
c000ea29:	e9 a0 fe ff ff       	jmp    c000e8ce <Computer::detectFeatures()+0x36>
c000ea2e:	e8 3d 78 01 00       	call   c0026270 <absolutelyNoChanceInHell>
c000ea33:	88 c2                	mov    dl,al
c000ea35:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea3b:	c1 e2 07             	shl    edx,0x7
c000ea3e:	83 e0 7f             	and    eax,0x7f
c000ea41:	09 d0                	or     eax,edx
c000ea43:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea49:	84 c0                	test   al,al
c000ea4b:	0f 89 bb fe ff ff    	jns    c000e90c <Computer::detectFeatures()+0x74>
c000ea51:	e8 fa 77 01 00       	call   c0026250 <avxDetect>
c000ea56:	83 e0 01             	and    eax,0x1
c000ea59:	c1 e0 05             	shl    eax,0x5
c000ea5c:	88 c2                	mov    dl,al
c000ea5e:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000ea64:	83 e0 df             	and    eax,0xffffffdf
c000ea67:	09 d0                	or     eax,edx
c000ea69:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ea6f:	83 c4 1c             	add    esp,0x1c
c000ea72:	5b                   	pop    ebx
c000ea73:	5e                   	pop    esi
c000ea74:	5f                   	pop    edi
c000ea75:	5d                   	pop    ebp
c000ea76:	c3                   	ret    
c000ea77:	83 ec 0c             	sub    esp,0xc
c000ea7a:	68 00 02 00 00       	push   0x200
c000ea7f:	e8 88 9e 00 00       	call   c001890c <CPU::cpuidCheckEDX(unsigned int)>
c000ea84:	83 c4 10             	add    esp,0x10
c000ea87:	83 e0 01             	and    eax,0x1
c000ea8a:	88 c2                	mov    dl,al
c000ea8c:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea92:	83 e0 fe             	and    eax,0xfffffffe
c000ea95:	09 d0                	or     eax,edx
c000ea97:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea9d:	e9 1c ff ff ff       	jmp    c000e9be <Computer::detectFeatures()+0x126>

c000eaa2 <Computer::displayFeatures()>:
c000eaa2:	53                   	push   ebx
c000eaa3:	83 ec 14             	sub    esp,0x14
c000eaa6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eaaa:	68 59 9c 02 c0       	push   0xc0029c59
c000eaaf:	e8 bd 40 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000eab4:	83 c4 10             	add    esp,0x10
c000eab7:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eabe:	0f 85 73 02 00 00    	jne    c000ed37 <Computer::displayFeatures()+0x295>
c000eac4:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c000eac9:	83 ec 08             	sub    esp,0x8
c000eacc:	50                   	push   eax
c000eacd:	68 6c 9c 02 c0       	push   0xc0029c6c
c000ead2:	e8 9a 40 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000ead7:	83 c4 10             	add    esp,0x10
c000eada:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eae1:	0f 85 8c 02 00 00    	jne    c000ed73 <Computer::displayFeatures()+0x2d1>
c000eae7:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c000eaec:	83 ec 08             	sub    esp,0x8
c000eaef:	50                   	push   eax
c000eaf0:	68 7d 9c 02 c0       	push   0xc0029c7d
c000eaf5:	e8 77 40 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000eafa:	83 c4 10             	add    esp,0x10
c000eafd:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb04:	0f 85 5f 02 00 00    	jne    c000ed69 <Computer::displayFeatures()+0x2c7>
c000eb0a:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c000eb0f:	83 ec 08             	sub    esp,0x8
c000eb12:	50                   	push   eax
c000eb13:	68 8e 9c 02 c0       	push   0xc0029c8e
c000eb18:	e8 54 40 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000eb1d:	83 c4 10             	add    esp,0x10
c000eb20:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb27:	0f 85 32 02 00 00    	jne    c000ed5f <Computer::displayFeatures()+0x2bd>
c000eb2d:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c000eb32:	83 ec 08             	sub    esp,0x8
c000eb35:	50                   	push   eax
c000eb36:	68 9f 9c 02 c0       	push   0xc0029c9f
c000eb3b:	e8 31 40 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000eb40:	83 c4 10             	add    esp,0x10
c000eb43:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000eb4a:	0f 85 05 02 00 00    	jne    c000ed55 <Computer::displayFeatures()+0x2b3>
c000eb50:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c000eb55:	83 ec 08             	sub    esp,0x8
c000eb58:	50                   	push   eax
c000eb59:	68 b0 9c 02 c0       	push   0xc0029cb0
c000eb5e:	e8 0e 40 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000eb63:	83 c4 10             	add    esp,0x10
c000eb66:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000eb6d:	0f 85 d8 01 00 00    	jne    c000ed4b <Computer::displayFeatures()+0x2a9>
c000eb73:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c000eb78:	83 ec 08             	sub    esp,0x8
c000eb7b:	50                   	push   eax
c000eb7c:	68 c1 9c 02 c0       	push   0xc0029cc1
c000eb81:	e8 eb 3f 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000eb86:	83 c4 10             	add    esp,0x10
c000eb89:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000eb90:	0f 85 ab 01 00 00    	jne    c000ed41 <Computer::displayFeatures()+0x29f>
c000eb96:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c000eb9b:	83 ec 08             	sub    esp,0x8
c000eb9e:	50                   	push   eax
c000eb9f:	68 d2 9c 02 c0       	push   0xc0029cd2
c000eba4:	e8 c8 3f 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000eba9:	83 c4 10             	add    esp,0x10
c000ebac:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ebb3:	0f 88 1b 02 00 00    	js     c000edd4 <Computer::displayFeatures()+0x332>
c000ebb9:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c000ebbe:	83 ec 08             	sub    esp,0x8
c000ebc1:	50                   	push   eax
c000ebc2:	68 e3 9c 02 c0       	push   0xc0029ce3
c000ebc7:	e8 a5 3f 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000ebcc:	83 c4 10             	add    esp,0x10
c000ebcf:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ebd6:	0f 85 a1 01 00 00    	jne    c000ed7d <Computer::displayFeatures()+0x2db>
c000ebdc:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c000ebe1:	83 ec 08             	sub    esp,0x8
c000ebe4:	50                   	push   eax
c000ebe5:	68 f4 9c 02 c0       	push   0xc0029cf4
c000ebea:	e8 82 3f 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000ebef:	83 c4 10             	add    esp,0x10
c000ebf2:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ebf9:	0f 85 cb 01 00 00    	jne    c000edca <Computer::displayFeatures()+0x328>
c000ebff:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c000ec04:	83 ec 08             	sub    esp,0x8
c000ec07:	50                   	push   eax
c000ec08:	68 05 9d 02 c0       	push   0xc0029d05
c000ec0d:	e8 5f 3f 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000ec12:	83 c4 10             	add    esp,0x10
c000ec15:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec1c:	0f 85 9e 01 00 00    	jne    c000edc0 <Computer::displayFeatures()+0x31e>
c000ec22:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c000ec27:	83 ec 08             	sub    esp,0x8
c000ec2a:	50                   	push   eax
c000ec2b:	68 16 9d 02 c0       	push   0xc0029d16
c000ec30:	e8 3c 3f 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000ec35:	83 c4 10             	add    esp,0x10
c000ec38:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000ec3f:	0f 85 71 01 00 00    	jne    c000edb6 <Computer::displayFeatures()+0x314>
c000ec45:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c000ec4a:	83 ec 08             	sub    esp,0x8
c000ec4d:	50                   	push   eax
c000ec4e:	68 27 9d 02 c0       	push   0xc0029d27
c000ec53:	e8 19 3f 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000ec58:	83 c4 10             	add    esp,0x10
c000ec5b:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ec62:	0f 85 44 01 00 00    	jne    c000edac <Computer::displayFeatures()+0x30a>
c000ec68:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c000ec6d:	83 ec 08             	sub    esp,0x8
c000ec70:	50                   	push   eax
c000ec71:	68 38 9d 02 c0       	push   0xc0029d38
c000ec76:	e8 f6 3e 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000ec7b:	83 c4 10             	add    esp,0x10
c000ec7e:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000ec85:	0f 85 17 01 00 00    	jne    c000eda2 <Computer::displayFeatures()+0x300>
c000ec8b:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c000ec90:	83 ec 08             	sub    esp,0x8
c000ec93:	50                   	push   eax
c000ec94:	68 49 9d 02 c0       	push   0xc0029d49
c000ec99:	e8 d3 3e 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000ec9e:	83 c4 10             	add    esp,0x10
c000eca1:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000eca8:	0f 85 ea 00 00 00    	jne    c000ed98 <Computer::displayFeatures()+0x2f6>
c000ecae:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c000ecb3:	83 ec 08             	sub    esp,0x8
c000ecb6:	50                   	push   eax
c000ecb7:	68 5a 9d 02 c0       	push   0xc0029d5a
c000ecbc:	e8 b0 3e 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000ecc1:	83 c4 10             	add    esp,0x10
c000ecc4:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000eccb:	0f 88 0d 01 00 00    	js     c000edde <Computer::displayFeatures()+0x33c>
c000ecd1:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c000ecd6:	83 ec 08             	sub    esp,0x8
c000ecd9:	50                   	push   eax
c000ecda:	68 6b 9d 02 c0       	push   0xc0029d6b
c000ecdf:	e8 8d 3e 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000ece4:	83 c4 10             	add    esp,0x10
c000ece7:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ecee:	0f 85 9a 00 00 00    	jne    c000ed8e <Computer::displayFeatures()+0x2ec>
c000ecf4:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c000ecf9:	83 ec 08             	sub    esp,0x8
c000ecfc:	50                   	push   eax
c000ecfd:	68 7c 9d 02 c0       	push   0xc0029d7c
c000ed02:	e8 6a 3e 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000ed07:	83 c4 10             	add    esp,0x10
c000ed0a:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed11:	75 74                	jne    c000ed87 <Computer::displayFeatures()+0x2e5>
c000ed13:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c000ed18:	83 ec 08             	sub    esp,0x8
c000ed1b:	50                   	push   eax
c000ed1c:	68 8d 9d 02 c0       	push   0xc0029d8d
c000ed21:	e8 4b 3e 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000ed26:	c7 44 24 20 70 b6 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b670
c000ed2e:	83 c4 18             	add    esp,0x18
c000ed31:	5b                   	pop    ebx
c000ed32:	e9 3a 3e 00 00       	jmp    c0012b71 <Dbg::kprintf(char const*, ...)>
c000ed37:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c000ed3c:	e9 88 fd ff ff       	jmp    c000eac9 <Computer::displayFeatures()+0x27>
c000ed41:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c000ed46:	e9 50 fe ff ff       	jmp    c000eb9b <Computer::displayFeatures()+0xf9>
c000ed4b:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c000ed50:	e9 23 fe ff ff       	jmp    c000eb78 <Computer::displayFeatures()+0xd6>
c000ed55:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c000ed5a:	e9 f6 fd ff ff       	jmp    c000eb55 <Computer::displayFeatures()+0xb3>
c000ed5f:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c000ed64:	e9 c9 fd ff ff       	jmp    c000eb32 <Computer::displayFeatures()+0x90>
c000ed69:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c000ed6e:	e9 9c fd ff ff       	jmp    c000eb0f <Computer::displayFeatures()+0x6d>
c000ed73:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c000ed78:	e9 6f fd ff ff       	jmp    c000eaec <Computer::displayFeatures()+0x4a>
c000ed7d:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c000ed82:	e9 5a fe ff ff       	jmp    c000ebe1 <Computer::displayFeatures()+0x13f>
c000ed87:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c000ed8c:	eb 8a                	jmp    c000ed18 <Computer::displayFeatures()+0x276>
c000ed8e:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c000ed93:	e9 61 ff ff ff       	jmp    c000ecf9 <Computer::displayFeatures()+0x257>
c000ed98:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c000ed9d:	e9 11 ff ff ff       	jmp    c000ecb3 <Computer::displayFeatures()+0x211>
c000eda2:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c000eda7:	e9 e4 fe ff ff       	jmp    c000ec90 <Computer::displayFeatures()+0x1ee>
c000edac:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c000edb1:	e9 b7 fe ff ff       	jmp    c000ec6d <Computer::displayFeatures()+0x1cb>
c000edb6:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c000edbb:	e9 8a fe ff ff       	jmp    c000ec4a <Computer::displayFeatures()+0x1a8>
c000edc0:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c000edc5:	e9 5d fe ff ff       	jmp    c000ec27 <Computer::displayFeatures()+0x185>
c000edca:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c000edcf:	e9 30 fe ff ff       	jmp    c000ec04 <Computer::displayFeatures()+0x162>
c000edd4:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c000edd9:	e9 e0 fd ff ff       	jmp    c000ebbe <Computer::displayFeatures()+0x11c>
c000edde:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c000ede3:	e9 ee fe ff ff       	jmp    c000ecd6 <Computer::displayFeatures()+0x234>

c000ede8 <Computer::rdmsr(unsigned int)>:
c000ede8:	83 ec 0c             	sub    esp,0xc
c000edeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000edef:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000edf6:	74 0a                	je     c000ee02 <Computer::rdmsr(unsigned int)+0x1a>
c000edf8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000edfc:	0f 32                	rdmsr  
c000edfe:	83 c4 0c             	add    esp,0xc
c000ee01:	c3                   	ret    
c000ee02:	83 ec 0c             	sub    esp,0xc
c000ee05:	68 9e 9d 02 c0       	push   0xc0029d9e
c000ee0a:	e8 de b3 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c000ee0f:	83 c4 10             	add    esp,0x10
c000ee12:	eb e4                	jmp    c000edf8 <Computer::rdmsr(unsigned int)+0x10>

c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee14:	57                   	push   edi
c000ee15:	56                   	push   esi
c000ee16:	52                   	push   edx
c000ee17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee1b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee1f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee23:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee2a:	74 0e                	je     c000ee3a <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee2c:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee30:	89 f0                	mov    eax,esi
c000ee32:	89 fa                	mov    edx,edi
c000ee34:	0f 30                	wrmsr  
c000ee36:	58                   	pop    eax
c000ee37:	5e                   	pop    esi
c000ee38:	5f                   	pop    edi
c000ee39:	c3                   	ret    
c000ee3a:	83 ec 0c             	sub    esp,0xc
c000ee3d:	68 a4 9d 02 c0       	push   0xc0029da4
c000ee42:	e8 a6 b3 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c000ee47:	83 c4 10             	add    esp,0x10
c000ee4a:	eb e0                	jmp    c000ee2c <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000ee4c <Computer::nmiEnabled()>:
c000ee4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee50:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000ee56:	c3                   	ret    
c000ee57:	90                   	nop

c000ee58 <Computer::readCMOS(unsigned char)>:
c000ee58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee5c:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ee63:	19 c0                	sbb    eax,eax
c000ee65:	83 e0 80             	and    eax,0xffffff80
c000ee68:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ee6c:	e6 70                	out    0x70,al
c000ee6e:	e4 71                	in     al,0x71
c000ee70:	c3                   	ret    
c000ee71:	90                   	nop

c000ee72 <Computer::enableNMI(bool)>:
c000ee72:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ee76:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ee7a:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000ee80:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000ee88:	eb ce                	jmp    c000ee58 <Computer::readCMOS(unsigned char)>

c000ee8a <Computer::open(int, int, void*)>:
c000ee8a:	56                   	push   esi
c000ee8b:	53                   	push   ebx
c000ee8c:	83 ec 10             	sub    esp,0x10
c000ee8f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ee93:	f6 05 20 e0 02 c0 04 	test   BYTE PTR ds:0xc002e020,0x4
c000ee9a:	68 68 12 00 00       	push   0x1268
c000ee9f:	0f 94 05 44 cf 02 c0 	sete   BYTE PTR ds:0xc002cf44
c000eea6:	e8 95 09 00 00       	call   c000f840 <malloc>
c000eeab:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeae:	89 c6                	mov    esi,eax
c000eeb0:	e8 27 8f 00 00       	call   c0017ddc <ACPI::ACPI()>
c000eeb5:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000eebb:	58                   	pop    eax
c000eebc:	5a                   	pop    edx
c000eebd:	56                   	push   esi
c000eebe:	53                   	push   ebx
c000eebf:	e8 d4 50 00 00       	call   c0013f98 <Device::addChild(Device*)>
c000eec4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eec7:	e8 cc f9 ff ff       	call   c000e898 <Computer::detectFeatures()>
c000eecc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000eecf:	e8 ce fb ff ff       	call   c000eaa2 <Computer::displayFeatures()>
c000eed4:	59                   	pop    ecx
c000eed5:	5e                   	pop    esi
c000eed6:	6a 01                	push   0x1
c000eed8:	53                   	push   ebx
c000eed9:	e8 94 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000eede:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000eee5:	e8 56 09 00 00       	call   c000f840 <malloc>
c000eeea:	89 04 24             	mov    DWORD PTR [esp],eax
c000eeed:	89 c6                	mov    esi,eax
c000eeef:	e8 d0 9a 00 00       	call   c00189c4 <CPU::CPU()>
c000eef4:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000eefa:	58                   	pop    eax
c000eefb:	5a                   	pop    edx
c000eefc:	56                   	push   esi
c000eefd:	53                   	push   ebx
c000eefe:	e8 95 50 00 00       	call   c0013f98 <Device::addChild(Device*)>
c000ef03:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef09:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef0f:	6a 00                	push   0x0
c000ef11:	6a 00                	push   0x0
c000ef13:	50                   	push   eax
c000ef14:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef17:	83 c4 20             	add    esp,0x20
c000ef1a:	e8 ff 55 00 00       	call   c001451e <setupFPU()>
c000ef1f:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef25:	85 c0                	test   eax,eax
c000ef27:	74 1f                	je     c000ef48 <Computer::open(int, int, void*)+0xbe>
c000ef29:	83 ec 08             	sub    esp,0x8
c000ef2c:	50                   	push   eax
c000ef2d:	53                   	push   ebx
c000ef2e:	e8 65 50 00 00       	call   c0013f98 <Device::addChild(Device*)>
c000ef33:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef39:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef3b:	6a 00                	push   0x0
c000ef3d:	6a 00                	push   0x0
c000ef3f:	6a 00                	push   0x0
c000ef41:	50                   	push   eax
c000ef42:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef45:	83 c4 20             	add    esp,0x20
c000ef48:	83 ec 0c             	sub    esp,0xc
c000ef4b:	68 4a e6 00 c0       	push   0xc000e64a
c000ef50:	e8 ef ec 00 00       	call   c001dc44 <setupMultitasking(void (*)())>
c000ef55:	83 c4 14             	add    esp,0x14
c000ef58:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ef5d:	5b                   	pop    ebx
c000ef5e:	5e                   	pop    esi
c000ef5f:	c3                   	ret    

c000ef60 <Computer::disableNMI()>:
c000ef60:	6a 00                	push   0x0
c000ef62:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000ef66:	e8 07 ff ff ff       	call   c000ee72 <Computer::enableNMI(bool)>
c000ef6b:	58                   	pop    eax
c000ef6c:	5a                   	pop    edx
c000ef6d:	c3                   	ret    

c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>:
c000ef6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000ef72:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000ef79:	19 c0                	sbb    eax,eax
c000ef7b:	83 e0 80             	and    eax,0xffffff80
c000ef7e:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000ef82:	e6 70                	out    0x70,al
c000ef84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ef88:	e6 71                	out    0x71,al
c000ef8a:	c3                   	ret    
c000ef8b:	90                   	nop

c000ef8c <Computer::handleNMI()>:
c000ef8c:	56                   	push   esi
c000ef8d:	53                   	push   ebx
c000ef8e:	83 ec 10             	sub    esp,0x10
c000ef91:	e4 92                	in     al,0x92
c000ef93:	89 c6                	mov    esi,eax
c000ef95:	e4 61                	in     al,0x61
c000ef97:	68 aa 9d 02 c0       	push   0xc0029daa
c000ef9c:	88 c3                	mov    bl,al
c000ef9e:	e8 ce 3b 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000efa3:	83 c4 10             	add    esp,0x10
c000efa6:	83 e6 10             	and    esi,0x10
c000efa9:	75 0d                	jne    c000efb8 <Computer::handleNMI()+0x2c>
c000efab:	f6 c3 40             	test   bl,0x40
c000efae:	75 1d                	jne    c000efcd <Computer::handleNMI()+0x41>
c000efb0:	84 db                	test   bl,bl
c000efb2:	78 2d                	js     c000efe1 <Computer::handleNMI()+0x55>
c000efb4:	58                   	pop    eax
c000efb5:	5b                   	pop    ebx
c000efb6:	5e                   	pop    esi
c000efb7:	c3                   	ret    
c000efb8:	83 ec 0c             	sub    esp,0xc
c000efbb:	68 bb 9d 02 c0       	push   0xc0029dbb
c000efc0:	e8 28 b2 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c000efc5:	83 c4 10             	add    esp,0x10
c000efc8:	f6 c3 40             	test   bl,0x40
c000efcb:	74 e3                	je     c000efb0 <Computer::handleNMI()+0x24>
c000efcd:	83 ec 0c             	sub    esp,0xc
c000efd0:	68 c8 9d 02 c0       	push   0xc0029dc8
c000efd5:	e8 13 b2 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c000efda:	83 c4 10             	add    esp,0x10
c000efdd:	84 db                	test   bl,bl
c000efdf:	79 d3                	jns    c000efb4 <Computer::handleNMI()+0x28>
c000efe1:	c7 44 24 10 d2 9d 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029dd2
c000efe9:	5a                   	pop    edx
c000efea:	5b                   	pop    ebx
c000efeb:	5e                   	pop    esi
c000efec:	e9 fc b1 00 00       	jmp    c001a1ed <Krnl::panic(char const*)>
c000eff1:	90                   	nop

c000eff2 <Computer::setDiskActivityLight(int, bool)>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000eff8:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000effd:	77 1b                	ja     c000f01a <Computer::setDiskActivityLight(int, bool)+0x28>
c000efff:	e4 92                	in     al,0x92
c000f001:	bb 40 00 00 00       	mov    ebx,0x40
c000f006:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f00a:	89 da                	mov    edx,ebx
c000f00c:	d3 e2                	shl    edx,cl
c000f00e:	89 f1                	mov    ecx,esi
c000f010:	f7 d2                	not    edx
c000f012:	d3 e3                	shl    ebx,cl
c000f014:	21 d0                	and    eax,edx
c000f016:	09 d8                	or     eax,ebx
c000f018:	e6 92                	out    0x92,al
c000f01a:	5b                   	pop    ebx
c000f01b:	5e                   	pop    esi
c000f01c:	c3                   	ret    
c000f01d:	90                   	nop

c000f01e <GDTEntry::setBase(unsigned int)>:
c000f01e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f022:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f026:	89 c1                	mov    ecx,eax
c000f028:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f02c:	c1 e9 10             	shr    ecx,0x10
c000f02f:	c1 e8 18             	shr    eax,0x18
c000f032:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f035:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f038:	c3                   	ret    
c000f039:	90                   	nop

c000f03a <GDTEntry::setLimit(unsigned int)>:
c000f03a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f03e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f042:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f045:	66 89 01             	mov    WORD PTR [ecx],ax
c000f048:	83 e2 f0             	and    edx,0xfffffff0
c000f04b:	c1 e8 10             	shr    eax,0x10
c000f04e:	83 e0 0f             	and    eax,0xf
c000f051:	09 d0                	or     eax,edx
c000f053:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f056:	c3                   	ret    
c000f057:	90                   	nop

c000f058 <GDT::GDT()>:
c000f058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f05c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f062:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f066:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f06c:	90                   	nop
c000f06d:	c3                   	ret    

c000f06e <GDT::addEntry(GDTEntry)>:
c000f06e:	53                   	push   ebx
c000f06f:	83 ec 0c             	sub    esp,0xc
c000f072:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f076:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f078:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f07f:	52                   	push   edx
c000f080:	50                   	push   eax
c000f081:	68 0c 9e 02 c0       	push   0xc0029e0c
c000f086:	e8 e6 3a 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000f08b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f08d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f091:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f095:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f099:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f09d:	8d 50 01             	lea    edx,[eax+0x1]
c000f0a0:	c1 e0 03             	shl    eax,0x3
c000f0a3:	89 13                	mov    DWORD PTR [ebx],edx
c000f0a5:	83 c4 18             	add    esp,0x18
c000f0a8:	5b                   	pop    ebx
c000f0a9:	c3                   	ret    

c000f0aa <GDT::getNumberOfEntries()>:
c000f0aa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0ae:	8b 00                	mov    eax,DWORD PTR [eax]
c000f0b0:	c3                   	ret    
c000f0b1:	90                   	nop

c000f0b2 <GDT::flush()>:
c000f0b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0b6:	8b 10                	mov    edx,DWORD PTR [eax]
c000f0b8:	83 c0 04             	add    eax,0x4
c000f0bb:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f0c2:	a3 12 e0 02 c0       	mov    ds:0xc002e012,eax
c000f0c7:	66 89 15 10 e0 02 c0 	mov    WORD PTR ds:0xc002e010,dx
c000f0ce:	e9 75 13 ff ff       	jmp    c0000448 <loadGDT>
c000f0d3:	90                   	nop

c000f0d4 <GDT::setup()>:
c000f0d4:	55                   	push   ebp
c000f0d5:	57                   	push   edi
c000f0d6:	56                   	push   esi
c000f0d7:	53                   	push   ebx
c000f0d8:	83 ec 3c             	sub    esp,0x3c
c000f0db:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f0df:	6a 00                	push   0x0
c000f0e1:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f0e5:	53                   	push   ebx
c000f0e6:	e8 33 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f0eb:	6a 00                	push   0x0
c000f0ed:	53                   	push   ebx
c000f0ee:	e8 47 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f0f3:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f0fb:	6a 00                	push   0x0
c000f0fd:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f101:	53                   	push   ebx
c000f102:	e8 17 ff ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f107:	68 ff ff ff 00       	push   0xffffff
c000f10c:	53                   	push   ebx
c000f10d:	e8 28 ff ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f112:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f116:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f11b:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f120:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f124:	83 c4 20             	add    esp,0x20
c000f127:	6a 00                	push   0x0
c000f129:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f12d:	53                   	push   ebx
c000f12e:	e8 eb fe ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c000f133:	68 ff ff ff 00       	push   0xffffff
c000f138:	53                   	push   ebx
c000f139:	e8 fc fe ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c000f13e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f142:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f146:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f14a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f14e:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f152:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f157:	0d 00 92 c0 00       	or     eax,0xc09200
c000f15c:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f160:	89 d8                	mov    eax,ebx
c000f162:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f166:	80 cc 60             	or     ah,0x60
c000f169:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f16d:	83 c4 0c             	add    esp,0xc
c000f170:	89 f8                	mov    eax,edi
c000f172:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f176:	80 cc 60             	or     ah,0x60
c000f179:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f17d:	89 c7                	mov    edi,eax
c000f17f:	55                   	push   ebp
c000f180:	e8 e9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f185:	83 c4 0c             	add    esp,0xc
c000f188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f18c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f190:	55                   	push   ebp
c000f191:	e8 d8 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f196:	83 c4 0c             	add    esp,0xc
c000f199:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f19d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f1a1:	55                   	push   ebp
c000f1a2:	e8 c7 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1a7:	83 c4 0c             	add    esp,0xc
c000f1aa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f1ae:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f1b2:	53                   	push   ebx
c000f1b3:	51                   	push   ecx
c000f1b4:	55                   	push   ebp
c000f1b5:	e8 b4 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1ba:	83 c4 0c             	add    esp,0xc
c000f1bd:	57                   	push   edi
c000f1be:	56                   	push   esi
c000f1bf:	55                   	push   ebp
c000f1c0:	e8 a9 fe ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c000f1c5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f1c8:	e8 e5 fe ff ff       	call   c000f0b2 <GDT::flush()>
c000f1cd:	83 c4 4c             	add    esp,0x4c
c000f1d0:	5b                   	pop    ebx
c000f1d1:	5e                   	pop    esi
c000f1d2:	5f                   	pop    edi
c000f1d3:	5d                   	pop    ebp
c000f1d4:	c3                   	ret    

c000f1d5 <idleFunction(void*)>:
c000f1d5:	53                   	push   ebx
c000f1d6:	83 ec 08             	sub    esp,0x8
c000f1d9:	e8 36 e8 00 00       	call   c001da14 <unlockScheduler()>
c000f1de:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c000f1e3:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f1e9:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f1f0:	74 3c                	je     c000f22e <idleFunction(void*)+0x59>
c000f1f2:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f1f9:	74 33                	je     c000f22e <idleFunction(void*)+0x59>
c000f1fb:	31 db                	xor    ebx,ebx
c000f1fd:	52                   	push   edx
c000f1fe:	52                   	push   edx
c000f1ff:	68 e1 00 00 00       	push   0xe1
c000f204:	50                   	push   eax
c000f205:	e8 de fb ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c000f20a:	53                   	push   ebx
c000f20b:	83 e0 02             	and    eax,0x2
c000f20e:	50                   	push   eax
c000f20f:	68 e1 00 00 00       	push   0xe1
c000f214:	ff 35 08 e0 02 c0    	push   DWORD PTR ds:0xc002e008
c000f21a:	e8 f5 fb ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c000f21f:	83 c4 20             	add    esp,0x20
c000f222:	e8 58 10 ff ff       	call   c000027f <doTPAUSE>
c000f227:	e8 c4 90 01 00       	call   c00282f0 <idleCommon()>
c000f22c:	eb f4                	jmp    c000f222 <idleFunction(void*)+0x4d>
c000f22e:	fb                   	sti    
c000f22f:	f4                   	hlt    
c000f230:	e8 bb 90 01 00       	call   c00282f0 <idleCommon()>
c000f235:	eb f7                	jmp    c000f22e <idleFunction(void*)+0x59>
c000f237:	90                   	nop

c000f238 <IDTEntry::IDTEntry(bool)>:
c000f238:	83 ec 04             	sub    esp,0x4
c000f23b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f23f:	88 04 24             	mov    BYTE PTR [esp],al
c000f242:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f246:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f24c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f250:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f254:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f258:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f25b:	83 e2 f0             	and    edx,0xfffffff0
c000f25e:	83 ca 0e             	or     edx,0xe
c000f261:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f264:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f268:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f26b:	83 e2 ef             	and    edx,0xffffffef
c000f26e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f271:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f275:	74 04                	je     c000f27b <IDTEntry::IDTEntry(bool)+0x43>
c000f277:	b2 03                	mov    dl,0x3
c000f279:	eb 02                	jmp    c000f27d <IDTEntry::IDTEntry(bool)+0x45>
c000f27b:	b2 00                	mov    dl,0x0
c000f27d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f281:	83 e2 03             	and    edx,0x3
c000f284:	88 d1                	mov    cl,dl
c000f286:	c1 e1 05             	shl    ecx,0x5
c000f289:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f28c:	83 e2 9f             	and    edx,0xffffff9f
c000f28f:	09 ca                	or     edx,ecx
c000f291:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f294:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f298:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f29b:	83 ca 80             	or     edx,0xffffff80
c000f29e:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2a1:	90                   	nop
c000f2a2:	83 c4 04             	add    esp,0x4
c000f2a5:	c3                   	ret    

c000f2a6 <IDTEntry::setOffset(unsigned int)>:
c000f2a6:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f2aa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ae:	66 89 02             	mov    WORD PTR [edx],ax
c000f2b1:	c1 e8 10             	shr    eax,0x10
c000f2b4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f2b8:	c3                   	ret    
c000f2b9:	90                   	nop

c000f2ba <IDT::IDT()>:
c000f2ba:	90                   	nop
c000f2bb:	c3                   	ret    

c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f2bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f2c0:	83 c0 30             	add    eax,0x30
c000f2c3:	c3                   	ret    

c000f2c4 <IDT::addEntry(IDTEntry, int)>:
c000f2c4:	53                   	push   ebx
c000f2c5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f2cd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f2d1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f2d5:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f2d8:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f2dc:	5b                   	pop    ebx
c000f2dd:	c3                   	ret    

c000f2de <IDT::addEntry(int, void (*)(), bool)>:
c000f2de:	53                   	push   ebx
c000f2df:	83 ec 10             	sub    esp,0x10
c000f2e2:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f2e7:	50                   	push   eax
c000f2e8:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f2ec:	53                   	push   ebx
c000f2ed:	e8 46 ff ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f2f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f2f6:	53                   	push   ebx
c000f2f7:	e8 aa ff ff ff       	call   c000f2a6 <IDTEntry::setOffset(unsigned int)>
c000f2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f300:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f308:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f30c:	e8 b3 ff ff ff       	call   c000f2c4 <IDT::addEntry(IDTEntry, int)>
c000f311:	83 c4 30             	add    esp,0x30
c000f314:	5b                   	pop    ebx
c000f315:	c3                   	ret    

c000f316 <IDT::flush()>:
c000f316:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f31a:	66 c7 05 18 e0 02 c0 ff 07 	mov    WORD PTR ds:0xc002e018,0x7ff
c000f323:	a3 1a e0 02 c0       	mov    ds:0xc002e01a,eax
c000f328:	0f 01 1d 18 e0 02 c0 	lidtd  ds:0xc002e018
c000f32f:	c3                   	ret    

c000f330 <IDT::setup()>:
c000f330:	57                   	push   edi
c000f331:	56                   	push   esi
c000f332:	53                   	push   ebx
c000f333:	83 ec 10             	sub    esp,0x10
c000f336:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f33a:	6a 00                	push   0x0
c000f33c:	68 68 04 00 c0       	push   0xc0000468
c000f341:	6a 00                	push   0x0
c000f343:	53                   	push   ebx
c000f344:	e8 95 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f349:	6a 00                	push   0x0
c000f34b:	68 78 04 00 c0       	push   0xc0000478
c000f350:	6a 01                	push   0x1
c000f352:	53                   	push   ebx
c000f353:	e8 86 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f358:	83 c4 20             	add    esp,0x20
c000f35b:	6a 00                	push   0x0
c000f35d:	68 82 04 00 c0       	push   0xc0000482
c000f362:	6a 02                	push   0x2
c000f364:	53                   	push   ebx
c000f365:	e8 74 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f36a:	6a 00                	push   0x0
c000f36c:	68 8c 04 00 c0       	push   0xc000048c
c000f371:	6a 03                	push   0x3
c000f373:	53                   	push   ebx
c000f374:	e8 65 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f379:	83 c4 20             	add    esp,0x20
c000f37c:	6a 00                	push   0x0
c000f37e:	68 96 04 00 c0       	push   0xc0000496
c000f383:	6a 04                	push   0x4
c000f385:	53                   	push   ebx
c000f386:	e8 53 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f38b:	6a 00                	push   0x0
c000f38d:	68 a0 04 00 c0       	push   0xc00004a0
c000f392:	6a 05                	push   0x5
c000f394:	53                   	push   ebx
c000f395:	e8 44 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f39a:	83 c4 20             	add    esp,0x20
c000f39d:	6a 00                	push   0x0
c000f39f:	68 aa 04 00 c0       	push   0xc00004aa
c000f3a4:	6a 06                	push   0x6
c000f3a6:	53                   	push   ebx
c000f3a7:	e8 32 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ac:	6a 00                	push   0x0
c000f3ae:	68 b4 04 00 c0       	push   0xc00004b4
c000f3b3:	6a 07                	push   0x7
c000f3b5:	53                   	push   ebx
c000f3b6:	e8 23 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3bb:	83 c4 20             	add    esp,0x20
c000f3be:	6a 00                	push   0x0
c000f3c0:	68 be 04 00 c0       	push   0xc00004be
c000f3c5:	6a 08                	push   0x8
c000f3c7:	53                   	push   ebx
c000f3c8:	e8 11 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3cd:	6a 00                	push   0x0
c000f3cf:	68 c6 04 00 c0       	push   0xc00004c6
c000f3d4:	6a 09                	push   0x9
c000f3d6:	53                   	push   ebx
c000f3d7:	e8 02 ff ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3dc:	83 c4 20             	add    esp,0x20
c000f3df:	6a 00                	push   0x0
c000f3e1:	68 d0 04 00 c0       	push   0xc00004d0
c000f3e6:	6a 0a                	push   0xa
c000f3e8:	53                   	push   ebx
c000f3e9:	e8 f0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3ee:	6a 00                	push   0x0
c000f3f0:	68 d8 04 00 c0       	push   0xc00004d8
c000f3f5:	6a 0b                	push   0xb
c000f3f7:	53                   	push   ebx
c000f3f8:	e8 e1 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f3fd:	83 c4 20             	add    esp,0x20
c000f400:	6a 00                	push   0x0
c000f402:	68 e0 04 00 c0       	push   0xc00004e0
c000f407:	6a 0c                	push   0xc
c000f409:	53                   	push   ebx
c000f40a:	e8 cf fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f40f:	6a 00                	push   0x0
c000f411:	68 e8 04 00 c0       	push   0xc00004e8
c000f416:	6a 0d                	push   0xd
c000f418:	53                   	push   ebx
c000f419:	e8 c0 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f41e:	83 c4 20             	add    esp,0x20
c000f421:	6a 00                	push   0x0
c000f423:	68 f0 04 00 c0       	push   0xc00004f0
c000f428:	6a 0e                	push   0xe
c000f42a:	53                   	push   ebx
c000f42b:	e8 ae fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f430:	6a 00                	push   0x0
c000f432:	68 f8 04 00 c0       	push   0xc00004f8
c000f437:	6a 0f                	push   0xf
c000f439:	53                   	push   ebx
c000f43a:	e8 9f fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f43f:	83 c4 20             	add    esp,0x20
c000f442:	6a 00                	push   0x0
c000f444:	68 02 05 00 c0       	push   0xc0000502
c000f449:	6a 10                	push   0x10
c000f44b:	53                   	push   ebx
c000f44c:	e8 8d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f451:	6a 00                	push   0x0
c000f453:	68 0c 05 00 c0       	push   0xc000050c
c000f458:	6a 11                	push   0x11
c000f45a:	53                   	push   ebx
c000f45b:	e8 7e fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f460:	83 c4 20             	add    esp,0x20
c000f463:	6a 00                	push   0x0
c000f465:	68 16 05 00 c0       	push   0xc0000516
c000f46a:	6a 12                	push   0x12
c000f46c:	53                   	push   ebx
c000f46d:	e8 6c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f472:	6a 01                	push   0x1
c000f474:	68 b0 05 00 c0       	push   0xc00005b0
c000f479:	6a 60                	push   0x60
c000f47b:	53                   	push   ebx
c000f47c:	e8 5d fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f481:	83 c4 20             	add    esp,0x20
c000f484:	6a 00                	push   0x0
c000f486:	68 b7 05 00 c0       	push   0xc00005b7
c000f48b:	6a 20                	push   0x20
c000f48d:	53                   	push   ebx
c000f48e:	e8 4b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f493:	6a 00                	push   0x0
c000f495:	68 a2 05 00 c0       	push   0xc00005a2
c000f49a:	6a 21                	push   0x21
c000f49c:	53                   	push   ebx
c000f49d:	e8 3c fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4a2:	83 c4 20             	add    esp,0x20
c000f4a5:	6a 00                	push   0x0
c000f4a7:	68 a9 05 00 c0       	push   0xc00005a9
c000f4ac:	6a 22                	push   0x22
c000f4ae:	53                   	push   ebx
c000f4af:	e8 2a fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4b4:	6a 00                	push   0x0
c000f4b6:	68 20 05 00 c0       	push   0xc0000520
c000f4bb:	6a 23                	push   0x23
c000f4bd:	53                   	push   ebx
c000f4be:	e8 1b fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4c3:	83 c4 20             	add    esp,0x20
c000f4c6:	6a 00                	push   0x0
c000f4c8:	68 2a 05 00 c0       	push   0xc000052a
c000f4cd:	6a 24                	push   0x24
c000f4cf:	53                   	push   ebx
c000f4d0:	e8 09 fe ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4d5:	6a 00                	push   0x0
c000f4d7:	68 34 05 00 c0       	push   0xc0000534
c000f4dc:	6a 25                	push   0x25
c000f4de:	53                   	push   ebx
c000f4df:	e8 fa fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4e4:	83 c4 20             	add    esp,0x20
c000f4e7:	6a 00                	push   0x0
c000f4e9:	68 3e 05 00 c0       	push   0xc000053e
c000f4ee:	6a 26                	push   0x26
c000f4f0:	53                   	push   ebx
c000f4f1:	e8 e8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f4f6:	6a 00                	push   0x0
c000f4f8:	68 48 05 00 c0       	push   0xc0000548
c000f4fd:	6a 27                	push   0x27
c000f4ff:	53                   	push   ebx
c000f500:	e8 d9 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f505:	83 c4 20             	add    esp,0x20
c000f508:	6a 00                	push   0x0
c000f50a:	68 52 05 00 c0       	push   0xc0000552
c000f50f:	6a 28                	push   0x28
c000f511:	53                   	push   ebx
c000f512:	e8 c7 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f517:	6a 00                	push   0x0
c000f519:	68 5c 05 00 c0       	push   0xc000055c
c000f51e:	6a 29                	push   0x29
c000f520:	53                   	push   ebx
c000f521:	e8 b8 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f526:	83 c4 20             	add    esp,0x20
c000f529:	6a 00                	push   0x0
c000f52b:	68 66 05 00 c0       	push   0xc0000566
c000f530:	6a 2a                	push   0x2a
c000f532:	53                   	push   ebx
c000f533:	e8 a6 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f538:	6a 00                	push   0x0
c000f53a:	68 70 05 00 c0       	push   0xc0000570
c000f53f:	6a 2b                	push   0x2b
c000f541:	53                   	push   ebx
c000f542:	e8 97 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f547:	83 c4 20             	add    esp,0x20
c000f54a:	6a 00                	push   0x0
c000f54c:	68 7a 05 00 c0       	push   0xc000057a
c000f551:	6a 2c                	push   0x2c
c000f553:	53                   	push   ebx
c000f554:	e8 85 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f559:	6a 00                	push   0x0
c000f55b:	68 84 05 00 c0       	push   0xc0000584
c000f560:	6a 2d                	push   0x2d
c000f562:	53                   	push   ebx
c000f563:	e8 76 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f568:	83 c4 20             	add    esp,0x20
c000f56b:	6a 00                	push   0x0
c000f56d:	68 8e 05 00 c0       	push   0xc000058e
c000f572:	6a 2e                	push   0x2e
c000f574:	53                   	push   ebx
c000f575:	e8 64 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f57a:	6a 00                	push   0x0
c000f57c:	68 98 05 00 c0       	push   0xc0000598
c000f581:	6a 2f                	push   0x2f
c000f583:	53                   	push   ebx
c000f584:	e8 55 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f589:	83 c4 20             	add    esp,0x20
c000f58c:	6a 00                	push   0x0
c000f58e:	68 ed 05 00 c0       	push   0xc00005ed
c000f593:	6a 30                	push   0x30
c000f595:	53                   	push   ebx
c000f596:	e8 43 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f59b:	6a 00                	push   0x0
c000f59d:	68 f7 05 00 c0       	push   0xc00005f7
c000f5a2:	6a 31                	push   0x31
c000f5a4:	53                   	push   ebx
c000f5a5:	e8 34 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5aa:	83 c4 20             	add    esp,0x20
c000f5ad:	6a 00                	push   0x0
c000f5af:	68 01 06 00 c0       	push   0xc0000601
c000f5b4:	6a 32                	push   0x32
c000f5b6:	53                   	push   ebx
c000f5b7:	e8 22 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5bc:	6a 00                	push   0x0
c000f5be:	68 0b 06 00 c0       	push   0xc000060b
c000f5c3:	6a 33                	push   0x33
c000f5c5:	53                   	push   ebx
c000f5c6:	e8 13 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5cb:	83 c4 20             	add    esp,0x20
c000f5ce:	6a 00                	push   0x0
c000f5d0:	68 15 06 00 c0       	push   0xc0000615
c000f5d5:	6a 34                	push   0x34
c000f5d7:	53                   	push   ebx
c000f5d8:	e8 01 fd ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5dd:	6a 00                	push   0x0
c000f5df:	68 1f 06 00 c0       	push   0xc000061f
c000f5e4:	6a 35                	push   0x35
c000f5e6:	53                   	push   ebx
c000f5e7:	e8 f2 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5ec:	83 c4 20             	add    esp,0x20
c000f5ef:	6a 00                	push   0x0
c000f5f1:	68 29 06 00 c0       	push   0xc0000629
c000f5f6:	6a 36                	push   0x36
c000f5f8:	53                   	push   ebx
c000f5f9:	e8 e0 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f5fe:	6a 00                	push   0x0
c000f600:	68 33 06 00 c0       	push   0xc0000633
c000f605:	6a 37                	push   0x37
c000f607:	53                   	push   ebx
c000f608:	e8 d1 fc ff ff       	call   c000f2de <IDT::addEntry(int, void (*)(), bool)>
c000f60d:	83 c4 20             	add    esp,0x20
c000f610:	e8 fc 26 00 00       	call   c0011d11 <Virt::getAKernelVAS()>
c000f615:	52                   	push   edx
c000f616:	6a 03                	push   0x3
c000f618:	6a 02                	push   0x2
c000f61a:	50                   	push   eax
c000f61b:	e8 2c 2d 00 00       	call   c001234c <VAS::allocatePages(int, int)>
c000f620:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f627:	89 c6                	mov    esi,eax
c000f629:	e8 12 02 00 00       	call   c000f840 <malloc>
c000f62e:	81 c6 00 20 00 00    	add    esi,0x2000
c000f634:	89 04 24             	mov    DWORD PTR [esp],eax
c000f637:	89 c7                	mov    edi,eax
c000f639:	e8 74 1e 00 00       	call   c00114b2 <TSS::TSS()>
c000f63e:	83 c4 0c             	add    esp,0xc
c000f641:	68 be 04 00 c0       	push   0xc00004be
c000f646:	56                   	push   esi
c000f647:	57                   	push   edi
c000f648:	e8 a5 1e 00 00       	call   c00114f2 <TSS::setup(unsigned long, unsigned long)>
c000f64d:	59                   	pop    ecx
c000f64e:	89 c6                	mov    esi,eax
c000f650:	5f                   	pop    edi
c000f651:	6a 00                	push   0x0
c000f653:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f657:	50                   	push   eax
c000f658:	e8 db fb ff ff       	call   c000f238 <IDTEntry::IDTEntry(bool)>
c000f65d:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f661:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f666:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f66d:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f673:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f677:	80 ce 05             	or     dh,0x5
c000f67a:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f67d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f681:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f685:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f688:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f68b:	e8 86 fc ff ff       	call   c000f316 <IDT::flush()>
c000f690:	83 c4 20             	add    esp,0x20
c000f693:	5b                   	pop    ebx
c000f694:	5e                   	pop    esi
c000f695:	5f                   	pop    edi
c000f696:	c3                   	ret    

c000f697 <sbrk>:
c000f697:	55                   	push   ebp
c000f698:	57                   	push   edi
c000f699:	56                   	push   esi
c000f69a:	53                   	push   ebx
c000f69b:	83 ec 1c             	sub    esp,0x1c
c000f69e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6a2:	85 c0                	test   eax,eax
c000f6a4:	74 3e                	je     c000f6e4 <sbrk+0x4d>
c000f6a6:	78 43                	js     c000f6eb <sbrk+0x54>
c000f6a8:	8b 15 08 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e008
c000f6ae:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f6b4:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f6ba:	83 e2 01             	and    edx,0x1
c000f6bd:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f6c1:	8b 0d 20 cf 02 c0    	mov    ecx,DWORD PTR ds:0xc002cf20
c000f6c7:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f6cb:	05 ff 0f 00 00       	add    eax,0xfff
c000f6d0:	89 c2                	mov    edx,eax
c000f6d2:	78 2f                	js     c000f703 <sbrk+0x6c>
c000f6d4:	c1 fa 0c             	sar    edx,0xc
c000f6d7:	89 d7                	mov    edi,edx
c000f6d9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f6dd:	be 00 00 00 00       	mov    esi,0x0
c000f6e2:	eb 36                	jmp    c000f71a <sbrk+0x83>
c000f6e4:	a1 20 cf 02 c0       	mov    eax,ds:0xc002cf20
c000f6e9:	eb 74                	jmp    c000f75f <sbrk+0xc8>
c000f6eb:	83 ec 08             	sub    esp,0x8
c000f6ee:	50                   	push   eax
c000f6ef:	68 28 9e 02 c0       	push   0xc0029e28
c000f6f4:	e8 78 34 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000f6f9:	83 c4 10             	add    esp,0x10
c000f6fc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f701:	eb 5c                	jmp    c000f75f <sbrk+0xc8>
c000f703:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f709:	eb c9                	jmp    c000f6d4 <sbrk+0x3d>
c000f70b:	81 05 20 cf 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002cf20,0x1000
c000f715:	46                   	inc    esi
c000f716:	39 f7                	cmp    edi,esi
c000f718:	74 34                	je     c000f74e <sbrk+0xb7>
c000f71a:	e8 f2 25 00 00       	call   c0011d11 <Virt::getAKernelVAS()>
c000f71f:	89 c3                	mov    ebx,eax
c000f721:	8b 2d 20 cf 02 c0    	mov    ebp,DWORD PTR ds:0xc002cf20
c000f727:	e8 09 08 00 00       	call   c000ff35 <Phys::allocatePage()>
c000f72c:	68 01 04 00 00       	push   0x401
c000f731:	55                   	push   ebp
c000f732:	50                   	push   eax
c000f733:	53                   	push   ebx
c000f734:	e8 13 2b 00 00       	call   c001224c <VAS::mapPage(unsigned long, unsigned long, int)>
c000f739:	83 c4 10             	add    esp,0x10
c000f73c:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f741:	74 c8                	je     c000f70b <sbrk+0x74>
c000f743:	8b 1d 20 cf 02 c0    	mov    ebx,DWORD PTR ds:0xc002cf20
c000f749:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f74c:	eb bd                	jmp    c000f70b <sbrk+0x74>
c000f74e:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f753:	75 12                	jne    c000f767 <sbrk+0xd0>
c000f755:	0f 20 d8             	mov    eax,cr3
c000f758:	0f 22 d8             	mov    cr3,eax
c000f75b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f75f:	83 c4 1c             	add    esp,0x1c
c000f762:	5b                   	pop    ebx
c000f763:	5e                   	pop    esi
c000f764:	5f                   	pop    edi
c000f765:	5d                   	pop    ebp
c000f766:	c3                   	ret    
c000f767:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f76b:	89 cb                	mov    ebx,ecx
c000f76d:	c1 eb 0a             	shr    ebx,0xa
c000f770:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f776:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f77c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f780:	c1 e0 0c             	shl    eax,0xc
c000f783:	01 c8                	add    eax,ecx
c000f785:	c1 e8 0a             	shr    eax,0xa
c000f788:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f78d:	2d 00 00 40 00       	sub    eax,0x400000
c000f792:	39 c3                	cmp    ebx,eax
c000f794:	77 c5                	ja     c000f75b <sbrk+0xc4>
c000f796:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f799:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f79f:	39 d8                	cmp    eax,ebx
c000f7a1:	73 f3                	jae    c000f796 <sbrk+0xff>
c000f7a3:	eb b6                	jmp    c000f75b <sbrk+0xc4>

c000f7a5 <mmap>:
c000f7a5:	83 ec 18             	sub    esp,0x18
c000f7a8:	68 58 9e 02 c0       	push   0xc0029e58
c000f7ad:	e8 3b aa 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c000f7b2:	b8 00 00 00 00       	mov    eax,0x0
c000f7b7:	83 c4 1c             	add    esp,0x1c
c000f7ba:	c3                   	ret    

c000f7bb <munmap>:
c000f7bb:	83 ec 18             	sub    esp,0x18
c000f7be:	68 5d 9e 02 c0       	push   0xc0029e5d
c000f7c3:	e8 25 aa 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c000f7c8:	b8 00 00 00 00       	mov    eax,0x0
c000f7cd:	83 c4 1c             	add    esp,0x1c
c000f7d0:	c3                   	ret    

c000f7d1 <liballoc_lock()>:
c000f7d1:	83 ec 0c             	sub    esp,0xc
c000f7d4:	e8 39 e2 00 00       	call   c001da12 <lockScheduler()>
c000f7d9:	b8 00 00 00 00       	mov    eax,0x0
c000f7de:	83 c4 0c             	add    esp,0xc
c000f7e1:	c3                   	ret    

c000f7e2 <liballoc_unlock()>:
c000f7e2:	83 ec 0c             	sub    esp,0xc
c000f7e5:	e8 2a e2 00 00       	call   c001da14 <unlockScheduler()>
c000f7ea:	b8 00 00 00 00       	mov    eax,0x0
c000f7ef:	83 c4 0c             	add    esp,0xc
c000f7f2:	c3                   	ret    

c000f7f3 <liballoc_alloc(int)>:
c000f7f3:	83 ec 0c             	sub    esp,0xc
c000f7f6:	e8 16 25 00 00       	call   c0011d11 <Virt::getAKernelVAS()>
c000f7fb:	83 ec 04             	sub    esp,0x4
c000f7fe:	6a 01                	push   0x1
c000f800:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f804:	50                   	push   eax
c000f805:	e8 42 2b 00 00       	call   c001234c <VAS::allocatePages(int, int)>
c000f80a:	83 c4 1c             	add    esp,0x1c
c000f80d:	c3                   	ret    

c000f80e <liballoc_free(void*, int)>:
c000f80e:	83 ec 0c             	sub    esp,0xc
c000f811:	e8 fb 24 00 00       	call   c0011d11 <Virt::getAKernelVAS()>
c000f816:	83 ec 08             	sub    esp,0x8
c000f819:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f81d:	50                   	push   eax
c000f81e:	e8 e5 27 00 00       	call   c0012008 <VAS::freeAllocatedPages(unsigned long)>
c000f823:	b8 00 00 00 00       	mov    eax,0x0
c000f828:	83 c4 1c             	add    esp,0x1c
c000f82b:	c3                   	ret    

c000f82c <realloc>:
c000f82c:	83 ec 14             	sub    esp,0x14
c000f82f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f833:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f837:	e8 18 1e ff ff       	call   c0001654 <dlrealloc>
c000f83c:	83 c4 1c             	add    esp,0x1c
c000f83f:	c3                   	ret    

c000f840 <malloc>:
c000f840:	83 ec 18             	sub    esp,0x18
c000f843:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f847:	e8 cb 18 ff ff       	call   c0001117 <dlmalloc>
c000f84c:	83 c4 1c             	add    esp,0x1c
c000f84f:	c3                   	ret    

c000f850 <free>:
c000f850:	83 ec 18             	sub    esp,0x18
c000f853:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f857:	e8 60 15 ff ff       	call   c0000dbc <dlfree>
c000f85c:	83 c4 1c             	add    esp,0x1c
c000f85f:	c3                   	ret    

c000f860 <rfree>:
c000f860:	83 ec 18             	sub    esp,0x18
c000f863:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f867:	e8 50 15 ff ff       	call   c0000dbc <dlfree>
c000f86c:	83 c4 1c             	add    esp,0x1c
c000f86f:	c3                   	ret    

c000f870 <calloc>:
c000f870:	56                   	push   esi
c000f871:	53                   	push   ebx
c000f872:	83 ec 10             	sub    esp,0x10
c000f875:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f879:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f87e:	53                   	push   ebx
c000f87f:	e8 bc ff ff ff       	call   c000f840 <malloc>
c000f884:	89 c6                	mov    esi,eax
c000f886:	83 c4 0c             	add    esp,0xc
c000f889:	53                   	push   ebx
c000f88a:	6a 00                	push   0x0
c000f88c:	50                   	push   eax
c000f88d:	e8 e6 0e ff ff       	call   c0000778 <memset>
c000f892:	89 f0                	mov    eax,esi
c000f894:	83 c4 14             	add    esp,0x14
c000f897:	5b                   	pop    ebx
c000f898:	5e                   	pop    esi
c000f899:	c3                   	ret    

c000f89a <hwTextMode_loadInData(VgaText*)>:
c000f89a:	55                   	push   ebp
c000f89b:	a1 40 cf 02 c0       	mov    eax,ds:0xc002cf40
c000f8a0:	57                   	push   edi
c000f8a1:	56                   	push   esi
c000f8a2:	53                   	push   ebx
c000f8a3:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f8a7:	8b 97 ac 0f 00 00    	mov    edx,DWORD PTR [edi+0xfac]
c000f8ad:	85 d2                	test   edx,edx
c000f8af:	7e 2f                	jle    c000f8e0 <hwTextMode_loadInData(VgaText*)+0x46>
c000f8b1:	8d a8 94 00 00 00    	lea    ebp,[eax+0x94]
c000f8b7:	8d 4f 0c             	lea    ecx,[edi+0xc]
c000f8ba:	31 f6                	xor    esi,esi
c000f8bc:	29 fd                	sub    ebp,edi
c000f8be:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f8c1:	31 c0                	xor    eax,eax
c000f8c3:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f8c7:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f8cb:	40                   	inc    eax
c000f8cc:	83 f8 50             	cmp    eax,0x50
c000f8cf:	75 f2                	jne    c000f8c3 <hwTextMode_loadInData(VgaText*)+0x29>
c000f8d1:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f8d7:	46                   	inc    esi
c000f8d8:	39 b7 ac 0f 00 00    	cmp    DWORD PTR [edi+0xfac],esi
c000f8de:	7f de                	jg     c000f8be <hwTextMode_loadInData(VgaText*)+0x24>
c000f8e0:	5b                   	pop    ebx
c000f8e1:	5e                   	pop    esi
c000f8e2:	5f                   	pop    edi
c000f8e3:	5d                   	pop    ebp
c000f8e4:	c3                   	ret    

c000f8e5 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f8e5:	55                   	push   ebp
c000f8e6:	80 3d a0 e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0a0,0x0
c000f8ed:	57                   	push   edi
c000f8ee:	56                   	push   esi
c000f8ef:	53                   	push   ebx
c000f8f0:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f8f4:	75 50                	jne    c000f946 <hwTextMode_loadInTitle(VgaText*, char*)+0x61>
c000f8f6:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f8fc:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f902:	8b 15 40 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cf40
c000f908:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f90c:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f912:	eb 0e                	jmp    c000f922 <hwTextMode_loadInTitle(VgaText*, char*)+0x3d>
c000f914:	8b ae d8 0f 00 00    	mov    ebp,DWORD PTR [esi+0xfd8]
c000f91a:	8b 86 d4 0f 00 00    	mov    eax,DWORD PTR [esi+0xfd4]
c000f920:	89 da                	mov    edx,ebx
c000f922:	83 e5 0f             	and    ebp,0xf
c000f925:	c1 e0 04             	shl    eax,0x4
c000f928:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f92b:	0f b6 c0             	movzx  eax,al
c000f92e:	41                   	inc    ecx
c000f92f:	09 e8                	or     eax,ebp
c000f931:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f935:	c1 e0 08             	shl    eax,0x8
c000f938:	09 e8                	or     eax,ebp
c000f93a:	39 fb                	cmp    ebx,edi
c000f93c:	66 89 02             	mov    WORD PTR [edx],ax
c000f93f:	75 d3                	jne    c000f914 <hwTextMode_loadInTitle(VgaText*, char*)+0x2f>
c000f941:	5b                   	pop    ebx
c000f942:	5e                   	pop    esi
c000f943:	5f                   	pop    edi
c000f944:	5d                   	pop    ebp
c000f945:	c3                   	ret    
c000f946:	c7 86 d8 0f 00 00 02 00 00 00 	mov    DWORD PTR [esi+0xfd8],0x2
c000f950:	c7 86 d4 0f 00 00 00 00 00 00 	mov    DWORD PTR [esi+0xfd4],0x0
c000f95a:	31 c0                	xor    eax,eax
c000f95c:	bd 02 00 00 00       	mov    ebp,0x2
c000f961:	eb 9f                	jmp    c000f902 <hwTextMode_loadInTitle(VgaText*, char*)+0x1d>

c000f963 <hwTextMode_showCursor(VgaText*, bool)>:
c000f963:	56                   	push   esi
c000f964:	80 3d a0 e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0a0,0x0
c000f96b:	53                   	push   ebx
c000f96c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f970:	75 39                	jne    c000f9ab <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f972:	84 c0                	test   al,al
c000f974:	74 38                	je     c000f9ae <hwTextMode_showCursor(VgaText*, bool)+0x4b>
c000f976:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f97b:	b0 0a                	mov    al,0xa
c000f97d:	89 da                	mov    edx,ebx
c000f97f:	ee                   	out    dx,al
c000f980:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f985:	89 ca                	mov    edx,ecx
c000f987:	ec                   	in     al,dx
c000f988:	b2 0f                	mov    dl,0xf
c000f98a:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f98e:	83 e0 c0             	and    eax,0xffffffc0
c000f991:	2b 96 b8 0f 00 00    	sub    edx,DWORD PTR [esi+0xfb8]
c000f997:	09 d0                	or     eax,edx
c000f999:	89 ca                	mov    edx,ecx
c000f99b:	ee                   	out    dx,al
c000f99c:	b0 0b                	mov    al,0xb
c000f99e:	89 da                	mov    edx,ebx
c000f9a0:	ee                   	out    dx,al
c000f9a1:	89 ca                	mov    edx,ecx
c000f9a3:	ec                   	in     al,dx
c000f9a4:	83 e0 e0             	and    eax,0xffffffe0
c000f9a7:	83 c8 0f             	or     eax,0xf
c000f9aa:	ee                   	out    dx,al
c000f9ab:	5b                   	pop    ebx
c000f9ac:	5e                   	pop    esi
c000f9ad:	c3                   	ret    
c000f9ae:	b0 0a                	mov    al,0xa
c000f9b0:	ba d4 03 00 00       	mov    edx,0x3d4
c000f9b5:	ee                   	out    dx,al
c000f9b6:	b0 20                	mov    al,0x20
c000f9b8:	ba d5 03 00 00       	mov    edx,0x3d5
c000f9bd:	ee                   	out    dx,al
c000f9be:	5b                   	pop    ebx
c000f9bf:	5e                   	pop    esi
c000f9c0:	c3                   	ret    

c000f9c1 <hwTextMode_update(VgaText*)>:
c000f9c1:	c3                   	ret    

c000f9c2 <hwTextMode_updateCursor(VgaText*)>:
c000f9c2:	56                   	push   esi
c000f9c3:	80 3d a0 e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0a0,0x0
c000f9ca:	53                   	push   ebx
c000f9cb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f9cf:	75 3f                	jne    c000fa10 <hwTextMode_updateCursor(VgaText*)+0x4e>
c000f9d1:	be d4 03 00 00       	mov    esi,0x3d4
c000f9d6:	b9 19 00 00 00       	mov    ecx,0x19
c000f9db:	89 f2                	mov    edx,esi
c000f9dd:	2b 88 ac 0f 00 00    	sub    ecx,DWORD PTR [eax+0xfac]
c000f9e3:	03 88 b4 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb4]
c000f9e9:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000f9ec:	c1 e1 04             	shl    ecx,0x4
c000f9ef:	03 88 b0 0f 00 00    	add    ecx,DWORD PTR [eax+0xfb0]
c000f9f5:	b0 0f                	mov    al,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	bb d5 03 00 00       	mov    ebx,0x3d5
c000f9fd:	88 c8                	mov    al,cl
c000f9ff:	89 da                	mov    edx,ebx
c000fa01:	ee                   	out    dx,al
c000fa02:	b0 0e                	mov    al,0xe
c000fa04:	89 f2                	mov    edx,esi
c000fa06:	ee                   	out    dx,al
c000fa07:	89 c8                	mov    eax,ecx
c000fa09:	89 da                	mov    edx,ebx
c000fa0b:	66 c1 e8 08          	shr    ax,0x8
c000fa0f:	ee                   	out    dx,al
c000fa10:	5b                   	pop    ebx
c000fa11:	5e                   	pop    esi
c000fa12:	c3                   	ret    

c000fa13 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa13:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa17:	80 3d a0 e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0a0,0x0
c000fa1e:	75 38                	jne    c000fa58 <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa20:	ba da 03 00 00       	mov    edx,0x3da
c000fa25:	84 c0                	test   al,al
c000fa27:	75 18                	jne    c000fa41 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa29:	ec                   	in     al,dx
c000fa2a:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa2f:	b0 30                	mov    al,0x30
c000fa31:	89 ca                	mov    edx,ecx
c000fa33:	ee                   	out    dx,al
c000fa34:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa39:	ec                   	in     al,dx
c000fa3a:	83 c8 08             	or     eax,0x8
c000fa3d:	89 ca                	mov    edx,ecx
c000fa3f:	ee                   	out    dx,al
c000fa40:	c3                   	ret    
c000fa41:	ec                   	in     al,dx
c000fa42:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa47:	b0 30                	mov    al,0x30
c000fa49:	89 ca                	mov    edx,ecx
c000fa4b:	ee                   	out    dx,al
c000fa4c:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa51:	ec                   	in     al,dx
c000fa52:	83 e0 f7             	and    eax,0xfffffff7
c000fa55:	89 ca                	mov    edx,ecx
c000fa57:	ee                   	out    dx,al
c000fa58:	c3                   	ret    

c000fa59 <hwTextMode_scrollScreen(VgaText*)>:
c000fa59:	55                   	push   ebp
c000fa5a:	57                   	push   edi
c000fa5b:	56                   	push   esi
c000fa5c:	53                   	push   ebx
c000fa5d:	83 ec 1c             	sub    esp,0x1c
c000fa60:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fa64:	80 3d a0 e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0a0,0x0
c000fa6b:	74 14                	je     c000fa81 <hwTextMode_scrollScreen(VgaText*)+0x28>
c000fa6d:	c7 81 d0 0f 00 00 02 00 00 00 	mov    DWORD PTR [ecx+0xfd0],0x2
c000fa77:	c7 81 cc 0f 00 00 00 00 00 00 	mov    DWORD PTR [ecx+0xfcc],0x0
c000fa81:	a1 40 cf 02 c0       	mov    eax,ds:0xc002cf40
c000fa86:	bd 02 00 00 00       	mov    ebp,0x2
c000fa8b:	05 a0 00 00 00       	add    eax,0xa0
c000fa90:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fa94:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fa98:	31 c0                	xor    eax,eax
c000fa9a:	eb 0b                	jmp    c000faa7 <hwTextMode_scrollScreen(VgaText*)+0x4e>
c000fa9c:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faa2:	74 57                	je     c000fafb <hwTextMode_scrollScreen(VgaText*)+0xa2>
c000faa4:	43                   	inc    ebx
c000faa5:	89 f0                	mov    eax,esi
c000faa7:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faad:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000fab3:	88 13                	mov    BYTE PTR [ebx],dl
c000fab5:	8d 70 01             	lea    esi,[eax+0x1]
c000fab8:	83 fd 18             	cmp    ebp,0x18
c000fabb:	75 df                	jne    c000fa9c <hwTextMode_scrollScreen(VgaText*)+0x43>
c000fabd:	a8 01                	test   al,0x1
c000fabf:	75 13                	jne    c000fad4 <hwTextMode_scrollScreen(VgaText*)+0x7b>
c000fac1:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fac4:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000faca:	75 d8                	jne    c000faa4 <hwTextMode_scrollScreen(VgaText*)+0x4b>
c000facc:	83 c4 1c             	add    esp,0x1c
c000facf:	5b                   	pop    ebx
c000fad0:	5e                   	pop    esi
c000fad1:	5f                   	pop    edi
c000fad2:	5d                   	pop    ebp
c000fad3:	c3                   	ret    
c000fad4:	83 ec 08             	sub    esp,0x8
c000fad7:	0f b6 81 cc 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfcc]
c000fade:	50                   	push   eax
c000fadf:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fae3:	0f b6 81 d0 0f 00 00 	movzx  eax,BYTE PTR [ecx+0xfd0]
c000faea:	50                   	push   eax
c000faeb:	e8 94 0c 00 00       	call   c0010784 <VgaText::combineColours(unsigned char, unsigned char)>
c000faf0:	83 c4 10             	add    esp,0x10
c000faf3:	88 07                	mov    BYTE PTR [edi],al
c000faf5:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faf9:	eb c9                	jmp    c000fac4 <hwTextMode_scrollScreen(VgaText*)+0x6b>
c000fafb:	45                   	inc    ebp
c000fafc:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb04:	eb 8e                	jmp    c000fa94 <hwTextMode_scrollScreen(VgaText*)+0x3b>

c000fb06 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb06:	57                   	push   edi
c000fb07:	80 3d a0 e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0a0,0x0
c000fb0e:	56                   	push   esi
c000fb0f:	53                   	push   ebx
c000fb10:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb14:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb18:	75 65                	jne    c000fb7f <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x79>
c000fb1a:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb1f:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb24:	83 ec 08             	sub    esp,0x8
c000fb27:	52                   	push   edx
c000fb28:	50                   	push   eax
c000fb29:	e8 56 0c 00 00       	call   c0010784 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb2e:	5a                   	pop    edx
c000fb2f:	0f b6 c0             	movzx  eax,al
c000fb32:	59                   	pop    ecx
c000fb33:	50                   	push   eax
c000fb34:	0f be c3             	movsx  eax,bl
c000fb37:	50                   	push   eax
c000fb38:	e8 ed 0c 00 00       	call   c001082a <VgaText::combineCharAndColour(char, unsigned char)>
c000fb3d:	83 c4 10             	add    esp,0x10
c000fb40:	8b 35 40 cf 02 c0    	mov    esi,DWORD PTR ds:0xc002cf40
c000fb46:	80 3d a0 e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e0a0,0x0
c000fb4d:	74 07                	je     c000fb56 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb4f:	66 0f be c3          	movsx  ax,bl
c000fb53:	80 cc 02             	or     ah,0x2
c000fb56:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb5a:	ba 19 00 00 00       	mov    edx,0x19
c000fb5f:	2b 91 ac 0f 00 00    	sub    edx,DWORD PTR [ecx+0xfac]
c000fb65:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb68:	8d 14 92             	lea    edx,[edx+edx*4]
c000fb6b:	c1 e1 04             	shl    ecx,0x4
c000fb6e:	c1 e2 04             	shl    edx,0x4
c000fb71:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fb75:	01 ca                	add    edx,ecx
c000fb77:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fb7b:	5b                   	pop    ebx
c000fb7c:	5e                   	pop    esi
c000fb7d:	5f                   	pop    edi
c000fb7e:	c3                   	ret    
c000fb7f:	b8 02 00 00 00       	mov    eax,0x2
c000fb84:	31 d2                	xor    edx,edx
c000fb86:	eb 9c                	jmp    c000fb24 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fb88 <setupTextMode()>:
c000fb88:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fb8d:	83 e0 30             	and    eax,0x30
c000fb90:	66 83 f8 30          	cmp    ax,0x30
c000fb94:	75 11                	jne    c000fba7 <setupTextMode()+0x1f>
c000fb96:	81 2d 40 cf 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002cf40,0x8000
c000fba0:	c6 05 a0 e0 02 c0 01 	mov    BYTE PTR ds:0xc002e0a0,0x1
c000fba7:	c7 05 d8 e0 02 c0 13 fa 00 c0 	mov    DWORD PTR ds:0xc002e0d8,0xc000fa13
c000fbb1:	c7 05 c4 e0 02 c0 9a f8 00 c0 	mov    DWORD PTR ds:0xc002e0c4,0xc000f89a
c000fbbb:	c7 05 c0 e0 02 c0 e5 f8 00 c0 	mov    DWORD PTR ds:0xc002e0c0,0xc000f8e5
c000fbc5:	c7 05 cc e0 02 c0 59 fa 00 c0 	mov    DWORD PTR ds:0xc002e0cc,0xc000fa59
c000fbcf:	c7 05 d4 e0 02 c0 63 f9 00 c0 	mov    DWORD PTR ds:0xc002e0d4,0xc000f963
c000fbd9:	c7 05 c8 e0 02 c0 c1 f9 00 c0 	mov    DWORD PTR ds:0xc002e0c8,0xc000f9c1
c000fbe3:	c7 05 d0 e0 02 c0 c2 f9 00 c0 	mov    DWORD PTR ds:0xc002e0d0,0xc000f9c2
c000fbed:	c7 05 dc e0 02 c0 06 fb 00 c0 	mov    DWORD PTR ds:0xc002e0dc,0xc000fb06
c000fbf7:	c3                   	ret    

c000fbf8 <kernel_main>:
c000fbf8:	57                   	push   edi
c000fbf9:	bf f9 03 00 00       	mov    edi,0x3f9
c000fbfe:	56                   	push   esi
c000fbff:	31 f6                	xor    esi,esi
c000fc01:	53                   	push   ebx
c000fc02:	83 ec 10             	sub    esp,0x10
c000fc05:	e8 d4 09 00 00       	call   c00105de <installVgaTextImplementation()>
c000fc0a:	e8 79 ff ff ff       	call   c000fb88 <setupTextMode()>
c000fc0f:	89 f0                	mov    eax,esi
c000fc11:	89 fa                	mov    edx,edi
c000fc13:	ee                   	out    dx,al
c000fc14:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc19:	b0 80                	mov    al,0x80
c000fc1b:	89 da                	mov    edx,ebx
c000fc1d:	ee                   	out    dx,al
c000fc1e:	b1 03                	mov    cl,0x3
c000fc20:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc25:	88 c8                	mov    al,cl
c000fc27:	ee                   	out    dx,al
c000fc28:	89 f0                	mov    eax,esi
c000fc2a:	89 fa                	mov    edx,edi
c000fc2c:	ee                   	out    dx,al
c000fc2d:	88 c8                	mov    al,cl
c000fc2f:	89 da                	mov    edx,ebx
c000fc31:	ee                   	out    dx,al
c000fc32:	b0 c7                	mov    al,0xc7
c000fc34:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc39:	ee                   	out    dx,al
c000fc3a:	b0 0b                	mov    al,0xb
c000fc3c:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc41:	ee                   	out    dx,al
c000fc42:	83 ec 0c             	sub    esp,0xc
c000fc45:	68 64 9e 02 c0       	push   0xc0029e64
c000fc4a:	e8 22 2f 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000fc4f:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc54:	8d 98 ff 0f 00 00    	lea    ebx,[eax+0xfff]
c000fc5a:	e8 33 20 00 00       	call   c0011c92 <Virt::virtualMemorySetup()>
c000fc5f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000fc65:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000fc68:	e8 2c 04 00 00       	call   c0010099 <Phys::physicalMemorySetup(unsigned int)>
c000fc6d:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fc73:	83 c4 10             	add    esp,0x10
c000fc76:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fc7c:	75 0e                	jne    c000fc8c <kernel_main+0x94>
c000fc7e:	89 d8                	mov    eax,ebx
c000fc80:	25 48 03 00 00       	and    eax,0x348
c000fc85:	3d 00 03 00 00       	cmp    eax,0x300
c000fc8a:	74 10                	je     c000fc9c <kernel_main+0xa4>
c000fc8c:	83 ec 0c             	sub    esp,0xc
c000fc8f:	68 71 b6 02 c0       	push   0xc002b671
c000fc94:	e8 54 a5 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c000fc99:	83 c4 10             	add    esp,0x10
c000fc9c:	83 ec 0c             	sub    esp,0xc
c000fc9f:	89 1d 20 e0 02 c0    	mov    DWORD PTR ds:0xc002e020,ebx
c000fca5:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000fca9:	53                   	push   ebx
c000fcaa:	e8 97 21 00 00       	call   c0011e46 <VAS::VAS()>
c000fcaf:	89 1d 84 e1 02 c0    	mov    DWORD PTR ds:0xc002e184,ebx
c000fcb5:	e8 66 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcba:	c7 04 24 7b 9e 02 c0 	mov    DWORD PTR [esp],0xc0029e7b
c000fcc1:	e8 ab 2e 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000fcc6:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fccd:	e8 6e fb ff ff       	call   c000f840 <malloc>
c000fcd2:	89 04 24             	mov    DWORD PTR [esp],eax
c000fcd5:	89 c6                	mov    esi,eax
c000fcd7:	e8 5e ea ff ff       	call   c000e73a <Computer::Computer()>
c000fcdc:	58                   	pop    eax
c000fcdd:	89 35 08 e0 02 c0    	mov    DWORD PTR ds:0xc002e008,esi
c000fce3:	5a                   	pop    edx
c000fce4:	56                   	push   esi
c000fce5:	68 98 9e 02 c0       	push   0xc0029e98
c000fcea:	e8 82 2e 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000fcef:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c000fcf4:	8b 10                	mov    edx,DWORD PTR [eax]
c000fcf6:	6a 00                	push   0x0
c000fcf8:	6a 00                	push   0x0
c000fcfa:	6a 00                	push   0x0
c000fcfc:	50                   	push   eax
c000fcfd:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd00:	83 c4 14             	add    esp,0x14
c000fd03:	53                   	push   ebx
c000fd04:	e8 d7 23 00 00       	call   c00120e0 <VAS::~VAS()>
c000fd09:	c7 04 24 ab 9e 02 c0 	mov    DWORD PTR [esp],0xc0029eab
c000fd10:	e8 d8 a4 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c000fd15:	83 c4 20             	add    esp,0x20
c000fd18:	5b                   	pop    ebx
c000fd19:	5e                   	pop    esi
c000fd1a:	5f                   	pop    edi
c000fd1b:	c3                   	ret    

c000fd1c <Phys::allocateDMA(unsigned long)>:
c000fd1c:	55                   	push   ebp
c000fd1d:	31 d2                	xor    edx,edx
c000fd1f:	57                   	push   edi
c000fd20:	31 ed                	xor    ebp,ebp
c000fd22:	56                   	push   esi
c000fd23:	31 c9                	xor    ecx,ecx
c000fd25:	53                   	push   ebx
c000fd26:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd2a:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd30:	31 c0                	xor    eax,eax
c000fd32:	c1 ee 0c             	shr    esi,0xc
c000fd35:	eb 17                	jmp    c000fd4e <Phys::allocateDMA(unsigned long)+0x32>
c000fd37:	85 c9                	test   ecx,ecx
c000fd39:	75 04                	jne    c000fd3f <Phys::allocateDMA(unsigned long)+0x23>
c000fd3b:	89 d5                	mov    ebp,edx
c000fd3d:	89 d0                	mov    eax,edx
c000fd3f:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd42:	39 de                	cmp    esi,ebx
c000fd44:	74 20                	je     c000fd66 <Phys::allocateDMA(unsigned long)+0x4a>
c000fd46:	42                   	inc    edx
c000fd47:	89 d9                	mov    ecx,ebx
c000fd49:	83 fa 2f             	cmp    edx,0x2f
c000fd4c:	7f 11                	jg     c000fd5f <Phys::allocateDMA(unsigned long)+0x43>
c000fd4e:	80 ba 60 e0 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1fa0],0x0
c000fd55:	74 e0                	je     c000fd37 <Phys::allocateDMA(unsigned long)+0x1b>
c000fd57:	31 c9                	xor    ecx,ecx
c000fd59:	42                   	inc    edx
c000fd5a:	83 fa 2f             	cmp    edx,0x2f
c000fd5d:	7e ef                	jle    c000fd4e <Phys::allocateDMA(unsigned long)+0x32>
c000fd5f:	5b                   	pop    ebx
c000fd60:	31 c0                	xor    eax,eax
c000fd62:	5e                   	pop    esi
c000fd63:	5f                   	pop    edi
c000fd64:	5d                   	pop    ebp
c000fd65:	c3                   	ret    
c000fd66:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd69:	89 d7                	mov    edi,edx
c000fd6b:	4f                   	dec    edi
c000fd6c:	79 03                	jns    c000fd71 <Phys::allocateDMA(unsigned long)+0x55>
c000fd6e:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fd71:	c1 ff 04             	sar    edi,0x4
c000fd74:	89 c2                	mov    edx,eax
c000fd76:	c1 fa 04             	sar    edx,0x4
c000fd79:	39 fa                	cmp    edx,edi
c000fd7b:	75 2f                	jne    c000fdac <Phys::allocateDMA(unsigned long)+0x90>
c000fd7d:	85 db                	test   ebx,ebx
c000fd7f:	74 1a                	je     c000fd9b <Phys::allocateDMA(unsigned long)+0x7f>
c000fd81:	be 60 e0 02 c0       	mov    esi,0xc002e060
c000fd86:	8d 90 60 e0 02 c0    	lea    edx,[eax-0x3ffd1fa0]
c000fd8c:	f7 d6                	not    esi
c000fd8e:	29 c6                	sub    esi,eax
c000fd90:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fd93:	42                   	inc    edx
c000fd94:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fd97:	39 d9                	cmp    ecx,ebx
c000fd99:	7f f5                	jg     c000fd90 <Phys::allocateDMA(unsigned long)+0x74>
c000fd9b:	85 ff                	test   edi,edi
c000fd9d:	74 13                	je     c000fdb2 <Phys::allocateDMA(unsigned long)+0x96>
c000fd9f:	5b                   	pop    ebx
c000fda0:	05 50 20 0c 00       	add    eax,0xc2050
c000fda5:	5e                   	pop    esi
c000fda6:	c1 e0 0c             	shl    eax,0xc
c000fda9:	5f                   	pop    edi
c000fdaa:	5d                   	pop    ebp
c000fdab:	c3                   	ret    
c000fdac:	89 ea                	mov    edx,ebp
c000fdae:	31 c9                	xor    ecx,ecx
c000fdb0:	eb a7                	jmp    c000fd59 <Phys::allocateDMA(unsigned long)+0x3d>
c000fdb2:	5b                   	pop    ebx
c000fdb3:	c1 e0 0c             	shl    eax,0xc
c000fdb6:	5e                   	pop    esi
c000fdb7:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdbc:	5f                   	pop    edi
c000fdbd:	5d                   	pop    ebp
c000fdbe:	c3                   	ret    

c000fdbf <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdbf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdc3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdc7:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fdcd:	c1 e9 0c             	shr    ecx,0xc
c000fdd0:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fdd5:	76 25                	jbe    c000fdfc <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fdd7:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fddc:	c1 e8 0c             	shr    eax,0xc
c000fddf:	8d 50 10             	lea    edx,[eax+0x10]
c000fde2:	85 c9                	test   ecx,ecx
c000fde4:	74 15                	je     c000fdfb <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fde6:	8d 82 60 e0 02 c0    	lea    eax,[edx-0x3ffd1fa0]
c000fdec:	8d 94 11 60 e0 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1fa0]
c000fdf3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fdf6:	40                   	inc    eax
c000fdf7:	39 d0                	cmp    eax,edx
c000fdf9:	75 f8                	jne    c000fdf3 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fdfb:	c3                   	ret    
c000fdfc:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe02:	c1 ea 0c             	shr    edx,0xc
c000fe05:	eb db                	jmp    c000fde2 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe07 <Phys::setPageState(unsigned long, bool)>:
c000fe07:	57                   	push   edi
c000fe08:	ba 01 00 00 00       	mov    edx,0x1
c000fe0d:	56                   	push   esi
c000fe0e:	8b 3d 24 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cf24
c000fe14:	53                   	push   ebx
c000fe15:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fe19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000fe1d:	89 f0                	mov    eax,esi
c000fe1f:	89 f1                	mov    ecx,esi
c000fe21:	c1 e8 03             	shr    eax,0x3
c000fe24:	83 e1 07             	and    ecx,0x7
c000fe27:	01 c7                	add    edi,eax
c000fe29:	d3 e2                	shl    edx,cl
c000fe2b:	f7 d2                	not    edx
c000fe2d:	20 17                	and    BYTE PTR [edi],dl
c000fe2f:	88 da                	mov    dl,bl
c000fe31:	03 05 24 cf 02 c0    	add    eax,DWORD PTR ds:0xc002cf24
c000fe37:	d3 e2                	shl    edx,cl
c000fe39:	08 10                	or     BYTE PTR [eax],dl
c000fe3b:	84 db                	test   bl,bl
c000fe3d:	75 38                	jne    c000fe77 <Phys::setPageState(unsigned long, bool)+0x70>
c000fe3f:	a1 44 e0 02 c0       	mov    eax,ds:0xc002e044
c000fe44:	85 c0                	test   eax,eax
c000fe46:	74 33                	je     c000fe7b <Phys::setPageState(unsigned long, bool)+0x74>
c000fe48:	e8 c4 1e 00 00       	call   c0011d11 <Virt::getAKernelVAS()>
c000fe4d:	c1 e6 0c             	shl    esi,0xc
c000fe50:	6a 07                	push   0x7
c000fe52:	ff 35 44 e0 02 c0    	push   DWORD PTR ds:0xc002e044
c000fe58:	56                   	push   esi
c000fe59:	50                   	push   eax
c000fe5a:	e8 ed 23 00 00       	call   c001224c <VAS::mapPage(unsigned long, unsigned long, int)>
c000fe5f:	83 c4 0c             	add    esp,0xc
c000fe62:	68 00 10 00 00       	push   0x1000
c000fe67:	6a 00                	push   0x0
c000fe69:	ff 35 44 e0 02 c0    	push   DWORD PTR ds:0xc002e044
c000fe6f:	e8 04 09 ff ff       	call   c0000778 <memset>
c000fe74:	83 c4 10             	add    esp,0x10
c000fe77:	5b                   	pop    ebx
c000fe78:	5e                   	pop    esi
c000fe79:	5f                   	pop    edi
c000fe7a:	c3                   	ret    
c000fe7b:	83 ec 0c             	sub    esp,0xc
c000fe7e:	6a 01                	push   0x1
c000fe80:	e8 fc 1c 00 00       	call   c0011b81 <Virt::allocateKernelVirtualPages(int)>
c000fe85:	83 c4 10             	add    esp,0x10
c000fe88:	a3 44 e0 02 c0       	mov    ds:0xc002e044,eax
c000fe8d:	eb b9                	jmp    c000fe48 <Phys::setPageState(unsigned long, bool)+0x41>

c000fe8f <Phys::getPageState(unsigned long)>:
c000fe8f:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe93:	8b 15 24 cf 02 c0    	mov    edx,DWORD PTR ds:0xc002cf24
c000fe99:	89 c8                	mov    eax,ecx
c000fe9b:	83 e1 07             	and    ecx,0x7
c000fe9e:	c1 e8 03             	shr    eax,0x3
c000fea1:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fea5:	d3 f8                	sar    eax,cl
c000fea7:	83 e0 01             	and    eax,0x1
c000feaa:	c3                   	ret    

c000feab <Phys::freePage(unsigned long)>:
c000feab:	53                   	push   ebx
c000feac:	83 ec 08             	sub    esp,0x8
c000feaf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000feb3:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000feb9:	76 57                	jbe    c000ff12 <Phys::freePage(unsigned long)+0x67>
c000febb:	c1 eb 0c             	shr    ebx,0xc
c000febe:	53                   	push   ebx
c000febf:	e8 cb ff ff ff       	call   c000fe8f <Phys::getPageState(unsigned long)>
c000fec4:	5a                   	pop    edx
c000fec5:	84 c0                	test   al,al
c000fec7:	74 5b                	je     c000ff24 <Phys::freePage(unsigned long)+0x79>
c000fec9:	a1 50 e0 02 c0       	mov    eax,ds:0xc002e050
c000fece:	48                   	dec    eax
c000fecf:	a3 50 e0 02 c0       	mov    ds:0xc002e050,eax
c000fed4:	8d 04 80             	lea    eax,[eax+eax*4]
c000fed7:	8d 04 80             	lea    eax,[eax+eax*4]
c000feda:	c1 e0 02             	shl    eax,0x2
c000fedd:	99                   	cdq    
c000fede:	f7 3d 54 e0 02 c0    	idiv   DWORD PTR ds:0xc002e054
c000fee4:	39 05 4c e0 02 c0    	cmp    DWORD PTR ds:0xc002e04c,eax
c000feea:	75 13                	jne    c000feff <Phys::freePage(unsigned long)+0x54>
c000feec:	83 ec 08             	sub    esp,0x8
c000feef:	6a 00                	push   0x0
c000fef1:	53                   	push   ebx
c000fef2:	e8 10 ff ff ff       	call   c000fe07 <Phys::setPageState(unsigned long, bool)>
c000fef7:	83 c4 10             	add    esp,0x10
c000fefa:	83 c4 08             	add    esp,0x8
c000fefd:	5b                   	pop    ebx
c000fefe:	c3                   	ret    
c000feff:	83 ec 0c             	sub    esp,0xc
c000ff02:	a3 4c e0 02 c0       	mov    ds:0xc002e04c,eax
c000ff07:	50                   	push   eax
c000ff08:	e8 65 0a 00 00       	call   c0010972 <VgaText::updateRAMUsageDisplay(int)>
c000ff0d:	83 c4 10             	add    esp,0x10
c000ff10:	eb da                	jmp    c000feec <Phys::freePage(unsigned long)+0x41>
c000ff12:	68 00 10 00 00       	push   0x1000
c000ff17:	53                   	push   ebx
c000ff18:	e8 a2 fe ff ff       	call   c000fdbf <Phys::freeDMA(unsigned long, unsigned long)>
c000ff1d:	59                   	pop    ecx
c000ff1e:	5b                   	pop    ebx
c000ff1f:	83 c4 08             	add    esp,0x8
c000ff22:	5b                   	pop    ebx
c000ff23:	c3                   	ret    
c000ff24:	c7 44 24 10 c6 9e 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029ec6
c000ff2c:	83 c4 08             	add    esp,0x8
c000ff2f:	5b                   	pop    ebx
c000ff30:	e9 b8 a2 00 00       	jmp    c001a1ed <Krnl::panic(char const*)>

c000ff35 <Phys::allocatePage()>:
c000ff35:	56                   	push   esi
c000ff36:	53                   	push   ebx
c000ff37:	53                   	push   ebx
c000ff38:	8b 35 40 e0 02 c0    	mov    esi,DWORD PTR ds:0xc002e040
c000ff3e:	89 f3                	mov    ebx,esi
c000ff40:	eb 0a                	jmp    c000ff4c <Phys::allocatePage()+0x17>
c000ff42:	89 1d 40 e0 02 c0    	mov    DWORD PTR ds:0xc002e040,ebx
c000ff48:	39 de                	cmp    esi,ebx
c000ff4a:	74 24                	je     c000ff70 <Phys::allocatePage()+0x3b>
c000ff4c:	53                   	push   ebx
c000ff4d:	e8 3d ff ff ff       	call   c000fe8f <Phys::getPageState(unsigned long)>
c000ff52:	59                   	pop    ecx
c000ff53:	84 c0                	test   al,al
c000ff55:	74 5a                	je     c000ffb1 <Phys::allocatePage()+0x7c>
c000ff57:	43                   	inc    ebx
c000ff58:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff5e:	75 e2                	jne    c000ff42 <Phys::allocatePage()+0xd>
c000ff60:	31 db                	xor    ebx,ebx
c000ff62:	c7 05 40 e0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e040,0x0
c000ff6c:	39 de                	cmp    esi,ebx
c000ff6e:	75 dc                	jne    c000ff4c <Phys::allocatePage()+0x17>
c000ff70:	83 ec 0c             	sub    esp,0xc
c000ff73:	68 dc 9e 02 c0       	push   0xc0029edc
c000ff78:	e8 f4 2b 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c000ff7d:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff84:	e8 93 fd ff ff       	call   c000fd1c <Phys::allocateDMA(unsigned long)>
c000ff89:	83 c4 10             	add    esp,0x10
c000ff8c:	85 c0                	test   eax,eax
c000ff8e:	75 5a                	jne    c000ffea <Phys::allocatePage()+0xb5>
c000ff90:	83 ec 0c             	sub    esp,0xc
c000ff93:	68 ed 9e 02 c0       	push   0xc0029eed
c000ff98:	e8 50 a2 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c000ff9d:	83 c4 10             	add    esp,0x10
c000ffa0:	8b 1d 40 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e040
c000ffa6:	53                   	push   ebx
c000ffa7:	e8 e3 fe ff ff       	call   c000fe8f <Phys::getPageState(unsigned long)>
c000ffac:	59                   	pop    ecx
c000ffad:	84 c0                	test   al,al
c000ffaf:	75 a6                	jne    c000ff57 <Phys::allocatePage()+0x22>
c000ffb1:	83 ec 08             	sub    esp,0x8
c000ffb4:	6a 01                	push   0x1
c000ffb6:	53                   	push   ebx
c000ffb7:	e8 4b fe ff ff       	call   c000fe07 <Phys::setPageState(unsigned long, bool)>
c000ffbc:	a1 50 e0 02 c0       	mov    eax,ds:0xc002e050
c000ffc1:	83 c4 10             	add    esp,0x10
c000ffc4:	40                   	inc    eax
c000ffc5:	a3 50 e0 02 c0       	mov    ds:0xc002e050,eax
c000ffca:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffcd:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffd0:	c1 e0 02             	shl    eax,0x2
c000ffd3:	99                   	cdq    
c000ffd4:	f7 3d 54 e0 02 c0    	idiv   DWORD PTR ds:0xc002e054
c000ffda:	39 05 4c e0 02 c0    	cmp    DWORD PTR ds:0xc002e04c,eax
c000ffe0:	75 0c                	jne    c000ffee <Phys::allocatePage()+0xb9>
c000ffe2:	a1 40 e0 02 c0       	mov    eax,ds:0xc002e040
c000ffe7:	c1 e0 0c             	shl    eax,0xc
c000ffea:	5a                   	pop    edx
c000ffeb:	5b                   	pop    ebx
c000ffec:	5e                   	pop    esi
c000ffed:	c3                   	ret    
c000ffee:	83 ec 0c             	sub    esp,0xc
c000fff1:	a3 4c e0 02 c0       	mov    ds:0xc002e04c,eax
c000fff6:	50                   	push   eax
c000fff7:	e8 76 09 00 00       	call   c0010972 <VgaText::updateRAMUsageDisplay(int)>
c000fffc:	83 c4 10             	add    esp,0x10
c000ffff:	eb e1                	jmp    c000ffe2 <Phys::allocatePage()+0xad>

c0010001 <Phys::allocateContiguousPages(int)>:
c0010001:	57                   	push   edi
c0010002:	56                   	push   esi
c0010003:	53                   	push   ebx
c0010004:	31 db                	xor    ebx,ebx
c0010006:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001000a:	e8 03 da 00 00       	call   c001da12 <lockScheduler()>
c001000f:	85 db                	test   ebx,ebx
c0010011:	75 11                	jne    c0010024 <Phys::allocateContiguousPages(int)+0x23>
c0010013:	e8 1d ff ff ff       	call   c000ff35 <Phys::allocatePage()>
c0010018:	83 ff 01             	cmp    edi,0x1
c001001b:	89 c6                	mov    esi,eax
c001001d:	74 21                	je     c0010040 <Phys::allocateContiguousPages(int)+0x3f>
c001001f:	bb 01 00 00 00       	mov    ebx,0x1
c0010024:	e8 0c ff ff ff       	call   c000ff35 <Phys::allocatePage()>
c0010029:	89 da                	mov    edx,ebx
c001002b:	c1 e2 0c             	shl    edx,0xc
c001002e:	01 f2                	add    edx,esi
c0010030:	39 c2                	cmp    edx,eax
c0010032:	74 17                	je     c001004b <Phys::allocateContiguousPages(int)+0x4a>
c0010034:	bb 01 00 00 00       	mov    ebx,0x1
c0010039:	89 c6                	mov    esi,eax
c001003b:	83 ff 01             	cmp    edi,0x1
c001003e:	75 e4                	jne    c0010024 <Phys::allocateContiguousPages(int)+0x23>
c0010040:	e8 cf d9 00 00       	call   c001da14 <unlockScheduler()>
c0010045:	89 f0                	mov    eax,esi
c0010047:	5b                   	pop    ebx
c0010048:	5e                   	pop    esi
c0010049:	5f                   	pop    edi
c001004a:	c3                   	ret    
c001004b:	43                   	inc    ebx
c001004c:	39 fb                	cmp    ebx,edi
c001004e:	75 bf                	jne    c001000f <Phys::allocateContiguousPages(int)+0xe>
c0010050:	e8 bf d9 00 00       	call   c001da14 <unlockScheduler()>
c0010055:	89 f0                	mov    eax,esi
c0010057:	5b                   	pop    ebx
c0010058:	5e                   	pop    esi
c0010059:	5f                   	pop    edi
c001005a:	c3                   	ret    

c001005b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c001005b:	56                   	push   esi
c001005c:	53                   	push   ebx
c001005d:	52                   	push   edx
c001005e:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010062:	39 1d 48 e0 02 c0    	cmp    DWORD PTR ds:0xc002e048,ebx
c0010068:	73 06                	jae    c0010070 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x15>
c001006a:	89 1d 48 e0 02 c0    	mov    DWORD PTR ds:0xc002e048,ebx
c0010070:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010074:	c1 eb 0c             	shr    ebx,0xc
c0010077:	c1 e8 0c             	shr    eax,0xc
c001007a:	39 d8                	cmp    eax,ebx
c001007c:	73 17                	jae    c0010095 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x3a>
c001007e:	83 ec 08             	sub    esp,0x8
c0010081:	8d 70 01             	lea    esi,[eax+0x1]
c0010084:	6a 00                	push   0x0
c0010086:	50                   	push   eax
c0010087:	e8 7b fd ff ff       	call   c000fe07 <Phys::setPageState(unsigned long, bool)>
c001008c:	83 c4 10             	add    esp,0x10
c001008f:	89 f0                	mov    eax,esi
c0010091:	39 f3                	cmp    ebx,esi
c0010093:	75 e9                	jne    c001007e <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x23>
c0010095:	58                   	pop    eax
c0010096:	5b                   	pop    ebx
c0010097:	5e                   	pop    esi
c0010098:	c3                   	ret    

c0010099 <Phys::physicalMemorySetup(unsigned int)>:
c0010099:	55                   	push   ebp
c001009a:	57                   	push   edi
c001009b:	56                   	push   esi
c001009c:	53                   	push   ebx
c001009d:	31 db                	xor    ebx,ebx
c001009f:	83 ec 40             	sub    esp,0x40
c00100a2:	6a 30                	push   0x30
c00100a4:	6a 00                	push   0x0
c00100a6:	68 60 e0 02 c0       	push   0xc002e060
c00100ab:	e8 c8 06 ff ff       	call   c0000778 <memset>
c00100b0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100b4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100b9:	05 00 10 00 00       	add    eax,0x1000
c00100be:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100c2:	83 c4 10             	add    esp,0x10
c00100c5:	83 ec 08             	sub    esp,0x8
c00100c8:	6a 01                	push   0x1
c00100ca:	53                   	push   ebx
c00100cb:	43                   	inc    ebx
c00100cc:	e8 36 fd ff ff       	call   c000fe07 <Phys::setPageState(unsigned long, bool)>
c00100d1:	83 c4 10             	add    esp,0x10
c00100d4:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100da:	75 e9                	jne    c00100c5 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100dc:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100e3:	66 85 c0             	test   ax,ax
c00100e6:	0f 84 8e 01 00 00    	je     c001027a <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100ec:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100f0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100fc:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0010101:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010105:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001010d:	eb 15                	jmp    c0010124 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c001010f:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010113:	83 c3 18             	add    ebx,0x18
c0010116:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001011a:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c001011e:	0f 84 66 01 00 00    	je     c001028a <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010124:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0010127:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001012a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001012d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010131:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010135:	8b 33                	mov    esi,DWORD PTR [ebx]
c0010137:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001013a:	01 f0                	add    eax,esi
c001013c:	55                   	push   ebp
c001013d:	11 fa                	adc    edx,edi
c001013f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010143:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0010147:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001014b:	56                   	push   esi
c001014c:	68 28 9f 02 c0       	push   0xc0029f28
c0010151:	e8 1b 2a 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0010156:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001015a:	83 c4 10             	add    esp,0x10
c001015d:	09 f8                	or     eax,edi
c001015f:	0f 85 25 01 00 00    	jne    c001028a <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010165:	4d                   	dec    ebp
c0010166:	75 a7                	jne    c001010f <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010168:	ba 00 00 08 00       	mov    edx,0x80000
c001016d:	89 c1                	mov    ecx,eax
c001016f:	39 f2                	cmp    edx,esi
c0010171:	19 f9                	sbb    ecx,edi
c0010173:	0f 82 a7 00 00 00    	jb     c0010220 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010179:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c001017d:	89 c1                	mov    ecx,eax
c001017f:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010183:	0f 83 97 00 00 00    	jae    c0010220 <Phys::physicalMemorySetup(unsigned int)+0x187>
c0010189:	ba 00 00 0a 00       	mov    edx,0xa0000
c001018e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010192:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0010196:	39 fa                	cmp    edx,edi
c0010198:	19 e8                	sbb    eax,ebp
c001019a:	0f 82 14 01 00 00    	jb     c00102b4 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c00101a0:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00101a4:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c00101a8:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101ae:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101b3:	83 d5 ff             	adc    ebp,0xffffffff
c00101b6:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101ba:	31 c0                	xor    eax,eax
c00101bc:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101c0:	39 fa                	cmp    edx,edi
c00101c2:	89 c1                	mov    ecx,eax
c00101c4:	19 e9                	sbb    ecx,ebp
c00101c6:	0f 83 43 ff ff ff    	jae    c001010f <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101cc:	be 00 00 08 00       	mov    esi,0x80000
c00101d1:	50                   	push   eax
c00101d2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101d6:	57                   	push   edi
c00101d7:	56                   	push   esi
c00101d8:	68 4c 9f 02 c0       	push   0xc0029f4c
c00101dd:	e8 8f 29 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c00101e2:	5a                   	pop    edx
c00101e3:	59                   	pop    ecx
c00101e4:	57                   	push   edi
c00101e5:	56                   	push   esi
c00101e6:	e8 70 fe ff ff       	call   c001005b <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101eb:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101ef:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101f3:	83 c4 0c             	add    esp,0xc
c00101f6:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101fa:	03 05 54 e0 02 c0    	add    eax,DWORD PTR ds:0xc002e054
c0010200:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0010207:	a3 54 e0 02 c0       	mov    ds:0xc002e054,eax
c001020c:	52                   	push   edx
c001020d:	50                   	push   eax
c001020e:	68 09 9f 02 c0       	push   0xc0029f09
c0010213:	e8 59 29 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0010218:	83 c4 10             	add    esp,0x10
c001021b:	e9 ef fe ff ff       	jmp    c001010f <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010220:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010224:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010228:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001022c:	39 ea                	cmp    edx,ebp
c001022e:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010232:	0f 82 d7 fe ff ff    	jb     c001010f <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010238:	ba ff 1f 00 00       	mov    edx,0x1fff
c001023d:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010241:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010245:	0f 83 c4 fe ff ff    	jae    c001010f <Phys::physicalMemorySetup(unsigned int)+0x76>
c001024b:	39 ee                	cmp    esi,ebp
c001024d:	89 f8                	mov    eax,edi
c001024f:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010253:	0f 83 78 ff ff ff    	jae    c00101d1 <Phys::physicalMemorySetup(unsigned int)+0x138>
c0010259:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001025d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010261:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010265:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0010269:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c001026d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010271:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010275:	e9 57 ff ff ff       	jmp    c00101d1 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001027a:	83 ec 0c             	sub    esp,0xc
c001027d:	68 fb 9e 02 c0       	push   0xc0029efb
c0010282:	e8 66 9f 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c0010287:	83 c4 10             	add    esp,0x10
c001028a:	bb 40 01 00 00       	mov    ebx,0x140
c001028f:	83 ec 08             	sub    esp,0x8
c0010292:	6a 00                	push   0x0
c0010294:	53                   	push   ebx
c0010295:	43                   	inc    ebx
c0010296:	e8 6c fb ff ff       	call   c000fe07 <Phys::setPageState(unsigned long, bool)>
c001029b:	ff 05 54 e0 02 c0    	inc    DWORD PTR ds:0xc002e054
c00102a1:	83 c4 10             	add    esp,0x10
c00102a4:	81 fb 80 01 00 00    	cmp    ebx,0x180
c00102aa:	75 e3                	jne    c001028f <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102ac:	83 c4 3c             	add    esp,0x3c
c00102af:	5b                   	pop    ebx
c00102b0:	5e                   	pop    esi
c00102b1:	5f                   	pop    edi
c00102b2:	5d                   	pop    ebp
c00102b3:	c3                   	ret    
c00102b4:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102bc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102c4:	e9 d7 fe ff ff       	jmp    c00101a0 <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102c9:	90                   	nop

c00102ca <Pipe::isAtty()>:
c00102ca:	31 c0                	xor    eax,eax
c00102cc:	c3                   	ret    
c00102cd:	90                   	nop

c00102ce <Pipe::~Pipe()>:
c00102ce:	83 ec 0c             	sub    esp,0xc
c00102d1:	ba b8 9f 02 c0       	mov    edx,0xc0029fb8
c00102d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102da:	89 10                	mov    DWORD PTR [eax],edx
c00102dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102e0:	83 ec 0c             	sub    esp,0xc
c00102e3:	50                   	push   eax
c00102e4:	e8 37 16 00 00       	call   c0011920 <UnixFile::~UnixFile()>
c00102e9:	83 c4 10             	add    esp,0x10
c00102ec:	90                   	nop
c00102ed:	83 c4 0c             	add    esp,0xc
c00102f0:	c3                   	ret    
c00102f1:	90                   	nop

c00102f2 <Pipe::~Pipe()>:
c00102f2:	83 ec 0c             	sub    esp,0xc
c00102f5:	83 ec 0c             	sub    esp,0xc
c00102f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102fc:	e8 cd ff ff ff       	call   c00102ce <Pipe::~Pipe()>
c0010301:	83 c4 10             	add    esp,0x10
c0010304:	83 ec 08             	sub    esp,0x8
c0010307:	6a 20                	push   0x20
c0010309:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001030d:	e8 7f 27 00 00       	call   c0012a91 <operator delete(void*, unsigned long)>
c0010312:	83 c4 10             	add    esp,0x10
c0010315:	83 c4 0c             	add    esp,0xc
c0010318:	c3                   	ret    
c0010319:	90                   	nop

c001031a <Pipe::read(unsigned long long, void*, int*)>:
c001031a:	55                   	push   ebp
c001031b:	57                   	push   edi
c001031c:	56                   	push   esi
c001031d:	53                   	push   ebx
c001031e:	83 ec 1c             	sub    esp,0x1c
c0010321:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010325:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010329:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001032d:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010330:	89 c8                	mov    eax,ecx
c0010332:	99                   	cdq    
c0010333:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0010337:	74 19                	je     c0010352 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010339:	39 f9                	cmp    ecx,edi
c001033b:	89 d1                	mov    ecx,edx
c001033d:	19 f1                	sbb    ecx,esi
c001033f:	73 11                	jae    c0010352 <Pipe::read(unsigned long long, void*, int*)+0x38>
c0010341:	e8 cc d6 00 00       	call   c001da12 <lockScheduler()>
c0010346:	e8 03 da 00 00       	call   c001dd4e <schedule()>
c001034b:	e8 c4 d6 00 00       	call   c001da14 <unlockScheduler()>
c0010350:	eb db                	jmp    c001032d <Pipe::read(unsigned long long, void*, int*)+0x13>
c0010352:	39 f8                	cmp    eax,edi
c0010354:	89 d1                	mov    ecx,edx
c0010356:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c001035a:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c001035e:	19 f1                	sbb    ecx,esi
c0010360:	73 08                	jae    c001036a <Pipe::read(unsigned long long, void*, int*)+0x50>
c0010362:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010366:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001036a:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001036d:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c0010370:	29 c6                	sub    esi,eax
c0010372:	89 f1                	mov    ecx,esi
c0010374:	c1 f9 1f             	sar    ecx,0x1f
c0010377:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c001037b:	89 ca                	mov    edx,ecx
c001037d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010381:	19 d1                	sbb    ecx,edx
c0010383:	73 04                	jae    c0010389 <Pipe::read(unsigned long long, void*, int*)+0x6f>
c0010385:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0010389:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001038d:	89 fd                	mov    ebp,edi
c001038f:	29 f5                	sub    ebp,esi
c0010391:	85 f6                	test   esi,esi
c0010393:	74 12                	je     c00103a7 <Pipe::read(unsigned long long, void*, int*)+0x8d>
c0010395:	52                   	push   edx
c0010396:	56                   	push   esi
c0010397:	03 43 0c             	add    eax,DWORD PTR [ebx+0xc]
c001039a:	50                   	push   eax
c001039b:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001039f:	e8 a0 03 ff ff       	call   c0000744 <memcpy>
c00103a4:	83 c4 10             	add    esp,0x10
c00103a7:	85 ed                	test   ebp,ebp
c00103a9:	74 12                	je     c00103bd <Pipe::read(unsigned long long, void*, int*)+0xa3>
c00103ab:	50                   	push   eax
c00103ac:	55                   	push   ebp
c00103ad:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c00103b0:	03 74 24 48          	add    esi,DWORD PTR [esp+0x48]
c00103b4:	56                   	push   esi
c00103b5:	e8 8a 03 ff ff       	call   c0000744 <memcpy>
c00103ba:	83 c4 10             	add    esp,0x10
c00103bd:	29 7b 14             	sub    DWORD PTR [ebx+0x14],edi
c00103c0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103c3:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103c6:	99                   	cdq    
c00103c7:	89 f7                	mov    edi,esi
c00103c9:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103cd:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103d1:	c1 ff 1f             	sar    edi,0x1f
c00103d4:	57                   	push   edi
c00103d5:	56                   	push   esi
c00103d6:	52                   	push   edx
c00103d7:	50                   	push   eax
c00103d8:	e8 0f 63 01 00       	call   c00266ec <__umoddi3>
c00103dd:	83 c4 10             	add    esp,0x10
c00103e0:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103e3:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103e8:	75 10                	jne    c00103fa <Pipe::read(unsigned long long, void*, int*)+0xe0>
c00103ea:	83 ec 0c             	sub    esp,0xc
c00103ed:	68 75 9f 02 c0       	push   0xc0029f75
c00103f2:	e8 f6 9d 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c00103f7:	83 c4 10             	add    esp,0x10
c00103fa:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103fe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010402:	89 10                	mov    DWORD PTR [eax],edx
c0010404:	83 c4 1c             	add    esp,0x1c
c0010407:	31 c0                	xor    eax,eax
c0010409:	5b                   	pop    ebx
c001040a:	5e                   	pop    esi
c001040b:	5f                   	pop    edi
c001040c:	5d                   	pop    ebp
c001040d:	c3                   	ret    

c001040e <Pipe::write(unsigned long long, void*, int*)>:
c001040e:	55                   	push   ebp
c001040f:	57                   	push   edi
c0010410:	56                   	push   esi
c0010411:	53                   	push   ebx
c0010412:	83 ec 1c             	sub    esp,0x1c
c0010415:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0010419:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001041d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010421:	89 04 24             	mov    DWORD PTR [esp],eax
c0010424:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
c0010427:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
c001042a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001042e:	89 de                	mov    esi,ebx
c0010430:	89 df                	mov    edi,ebx
c0010432:	c1 ff 1f             	sar    edi,0x1f
c0010435:	01 c6                	add    esi,eax
c0010437:	89 c8                	mov    eax,ecx
c0010439:	11 d7                	adc    edi,edx
c001043b:	99                   	cdq    
c001043c:	39 f1                	cmp    ecx,esi
c001043e:	89 d0                	mov    eax,edx
c0010440:	19 f8                	sbb    eax,edi
c0010442:	b8 01 00 00 00       	mov    eax,0x1
c0010447:	0f 82 80 00 00 00    	jb     c00104cd <Pipe::write(unsigned long long, void*, int*)+0xbf>
c001044d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0010450:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0010453:	01 d8                	add    eax,ebx
c0010455:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0010459:	99                   	cdq    
c001045a:	f7 f9                	idiv   ecx
c001045c:	29 d1                	sub    ecx,edx
c001045e:	89 d7                	mov    edi,edx
c0010460:	89 c8                	mov    eax,ecx
c0010462:	99                   	cdq    
c0010463:	39 ce                	cmp    esi,ecx
c0010465:	19 d3                	sbb    ebx,edx
c0010467:	bb 00 00 00 00       	mov    ebx,0x0
c001046c:	72 04                	jb     c0010472 <Pipe::write(unsigned long long, void*, int*)+0x64>
c001046e:	89 f3                	mov    ebx,esi
c0010470:	29 cb                	sub    ebx,ecx
c0010472:	89 f1                	mov    ecx,esi
c0010474:	29 d9                	sub    ecx,ebx
c0010476:	74 1a                	je     c0010492 <Pipe::write(unsigned long long, void*, int*)+0x84>
c0010478:	52                   	push   edx
c0010479:	51                   	push   ecx
c001047a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001047e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0010482:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c0010485:	57                   	push   edi
c0010486:	e8 b9 02 ff ff       	call   c0000744 <memcpy>
c001048b:	83 c4 10             	add    esp,0x10
c001048e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010492:	85 db                	test   ebx,ebx
c0010494:	74 12                	je     c00104a8 <Pipe::write(unsigned long long, void*, int*)+0x9a>
c0010496:	50                   	push   eax
c0010497:	53                   	push   ebx
c0010498:	03 4c 24 44          	add    ecx,DWORD PTR [esp+0x44]
c001049c:	51                   	push   ecx
c001049d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00104a0:	e8 9f 02 ff ff       	call   c0000744 <memcpy>
c00104a5:	83 c4 10             	add    esp,0x10
c00104a8:	01 75 14             	add    DWORD PTR [ebp+0x14],esi
c00104ab:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00104b0:	75 10                	jne    c00104c2 <Pipe::write(unsigned long long, void*, int*)+0xb4>
c00104b2:	83 ec 0c             	sub    esp,0xc
c00104b5:	68 91 9f 02 c0       	push   0xc0029f91
c00104ba:	e8 2e 9d 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c00104bf:	83 c4 10             	add    esp,0x10
c00104c2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104c6:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00104c9:	89 38                	mov    DWORD PTR [eax],edi
c00104cb:	31 c0                	xor    eax,eax
c00104cd:	83 c4 1c             	add    esp,0x1c
c00104d0:	5b                   	pop    ebx
c00104d1:	5e                   	pop    esi
c00104d2:	5f                   	pop    edi
c00104d3:	5d                   	pop    ebp
c00104d4:	c3                   	ret    
c00104d5:	90                   	nop

c00104d6 <Pipe::Pipe(int)>:
c00104d6:	83 ec 0c             	sub    esp,0xc
c00104d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104dd:	83 ec 08             	sub    esp,0x8
c00104e0:	6a 00                	push   0x0
c00104e2:	50                   	push   eax
c00104e3:	e8 56 12 00 00       	call   c001173e <UnixFile::UnixFile(int)>
c00104e8:	83 c4 10             	add    esp,0x10
c00104eb:	ba b8 9f 02 c0       	mov    edx,0xc0029fb8
c00104f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f4:	89 10                	mov    DWORD PTR [eax],edx
c00104f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104fa:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104fe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0010501:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010505:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c001050c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010510:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0010517:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001051b:	83 ec 0c             	sub    esp,0xc
c001051e:	50                   	push   eax
c001051f:	e8 1c f3 ff ff       	call   c000f840 <malloc>
c0010524:	83 c4 10             	add    esp,0x10
c0010527:	89 c2                	mov    edx,eax
c0010529:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001052d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010530:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010534:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010538:	90                   	nop
c0010539:	83 c4 0c             	add    esp,0xc
c001053c:	c3                   	ret    
c001053d:	90                   	nop

c001053e <VgaText::isAtty()>:
c001053e:	b0 01                	mov    al,0x1
c0010540:	c3                   	ret    
c0010541:	90                   	nop

c0010542 <VgaText::~VgaText()>:
c0010542:	83 ec 0c             	sub    esp,0xc
c0010545:	ba 74 a0 02 c0       	mov    edx,0xc002a074
c001054a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001054e:	89 10                	mov    DWORD PTR [eax],edx
c0010550:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010554:	83 ec 0c             	sub    esp,0xc
c0010557:	50                   	push   eax
c0010558:	e8 c3 13 00 00       	call   c0011920 <UnixFile::~UnixFile()>
c001055d:	83 c4 10             	add    esp,0x10
c0010560:	90                   	nop
c0010561:	83 c4 0c             	add    esp,0xc
c0010564:	c3                   	ret    
c0010565:	90                   	nop

c0010566 <VgaText::~VgaText()>:
c0010566:	83 ec 0c             	sub    esp,0xc
c0010569:	83 ec 0c             	sub    esp,0xc
c001056c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010570:	e8 cd ff ff ff       	call   c0010542 <VgaText::~VgaText()>
c0010575:	83 c4 10             	add    esp,0x10
c0010578:	83 ec 08             	sub    esp,0x8
c001057b:	68 60 12 00 00       	push   0x1260
c0010580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010584:	e8 08 25 00 00       	call   c0012a91 <operator delete(void*, unsigned long)>
c0010589:	83 c4 10             	add    esp,0x10
c001058c:	83 c4 0c             	add    esp,0xc
c001058f:	c3                   	ret    

c0010590 <VgaText::read(unsigned long long, void*, int*)>:
c0010590:	83 ec 10             	sub    esp,0x10
c0010593:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010597:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001059b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001059f:	e8 4a 59 00 00       	call   c0015eee <readKeyboard(VgaText*, char*, unsigned long)>
c00105a4:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00105a8:	89 02                	mov    DWORD PTR [edx],eax
c00105aa:	31 c0                	xor    eax,eax
c00105ac:	83 c4 1c             	add    esp,0x1c
c00105af:	c3                   	ret    

c00105b0 <setTerminalScrollLock(bool)>:
c00105b0:	c3                   	ret    

c00105b1 <addToTerminalCycle(VgaText*)>:
c00105b1:	8b 15 e0 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e0e0
c00105b7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105bb:	85 d2                	test   edx,edx
c00105bd:	75 0c                	jne    c00105cb <addToTerminalCycle(VgaText*)+0x1a>
c00105bf:	89 80 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],eax
c00105c5:	a3 e0 e0 02 c0       	mov    ds:0xc002e0e0,eax
c00105ca:	c3                   	ret    
c00105cb:	8b 8a c0 0f 00 00    	mov    ecx,DWORD PTR [edx+0xfc0]
c00105d1:	89 82 c0 0f 00 00    	mov    DWORD PTR [edx+0xfc0],eax
c00105d7:	89 88 c0 0f 00 00    	mov    DWORD PTR [eax+0xfc0],ecx
c00105dd:	c3                   	ret    

c00105de <installVgaTextImplementation()>:
c00105de:	83 ec 10             	sub    esp,0x10
c00105e1:	6a 20                	push   0x20
c00105e3:	6a 00                	push   0x0
c00105e5:	68 c0 e0 02 c0       	push   0xc002e0c0
c00105ea:	e8 89 01 ff ff       	call   c0000778 <memset>
c00105ef:	83 c4 1c             	add    esp,0x1c
c00105f2:	c3                   	ret    

c00105f3 <scrollTerminalScrollLock(int)>:
c00105f3:	c3                   	ret    

c00105f4 <VgaText::load()>:
c00105f4:	53                   	push   ebx
c00105f5:	31 c0                	xor    eax,eax
c00105f7:	83 ec 58             	sub    esp,0x58
c00105fa:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105fe:	89 e2                	mov    edx,esp
c0010600:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c0010604:	40                   	inc    eax
c0010605:	83 f8 50             	cmp    eax,0x50
c0010608:	75 f6                	jne    c0010600 <VgaText::load()+0xc>
c001060a:	31 c0                	xor    eax,eax
c001060c:	8a 8c 03 1e 10 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x101e]
c0010613:	84 c9                	test   cl,cl
c0010615:	74 06                	je     c001061d <VgaText::load()+0x29>
c0010617:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c001061a:	40                   	inc    eax
c001061b:	eb ef                	jmp    c001060c <VgaText::load()+0x18>
c001061d:	8b 83 fc 0f 00 00    	mov    eax,DWORD PTR [ebx+0xffc]
c0010623:	85 c0                	test   eax,eax
c0010625:	74 09                	je     c0010630 <VgaText::load()+0x3c>
c0010627:	51                   	push   ecx
c0010628:	51                   	push   ecx
c0010629:	52                   	push   edx
c001062a:	53                   	push   ebx
c001062b:	ff d0                	call   eax
c001062d:	83 c4 10             	add    esp,0x10
c0010630:	8b 83 00 10 00 00    	mov    eax,DWORD PTR [ebx+0x1000]
c0010636:	85 c0                	test   eax,eax
c0010638:	74 09                	je     c0010643 <VgaText::load()+0x4f>
c001063a:	83 ec 0c             	sub    esp,0xc
c001063d:	53                   	push   ebx
c001063e:	ff d0                	call   eax
c0010640:	83 c4 10             	add    esp,0x10
c0010643:	83 c4 58             	add    esp,0x58
c0010646:	5b                   	pop    ebx
c0010647:	c3                   	ret    

c0010648 <VgaText::updateCursor()>:
c0010648:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001064c:	39 05 e4 e0 02 c0    	cmp    DWORD PTR ds:0xc002e0e4,eax
c0010652:	75 0c                	jne    c0010660 <VgaText::updateCursor()+0x18>
c0010654:	8b 80 0c 10 00 00    	mov    eax,DWORD PTR [eax+0x100c]
c001065a:	85 c0                	test   eax,eax
c001065c:	74 02                	je     c0010660 <VgaText::updateCursor()+0x18>
c001065e:	ff e0                	jmp    eax
c0010660:	c3                   	ret    
c0010661:	90                   	nop

c0010662 <VgaText::showCursor(bool)>:
c0010662:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010666:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001066a:	88 90 bc 0f 00 00    	mov    BYTE PTR [eax+0xfbc],dl
c0010670:	c3                   	ret    
c0010671:	90                   	nop

c0010672 <VgaText::disableBlink(bool)>:
c0010672:	56                   	push   esi
c0010673:	53                   	push   ebx
c0010674:	51                   	push   ecx
c0010675:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010679:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001067d:	39 1d e4 e0 02 c0    	cmp    DWORD PTR ds:0xc002e0e4,ebx
c0010683:	75 18                	jne    c001069d <VgaText::disableBlink(bool)+0x2b>
c0010685:	8b 83 14 10 00 00    	mov    eax,DWORD PTR [ebx+0x1014]
c001068b:	85 c0                	test   eax,eax
c001068d:	74 0e                	je     c001069d <VgaText::disableBlink(bool)+0x2b>
c001068f:	89 f1                	mov    ecx,esi
c0010691:	52                   	push   edx
c0010692:	52                   	push   edx
c0010693:	0f b6 d1             	movzx  edx,cl
c0010696:	52                   	push   edx
c0010697:	53                   	push   ebx
c0010698:	ff d0                	call   eax
c001069a:	83 c4 10             	add    esp,0x10
c001069d:	89 f0                	mov    eax,esi
c001069f:	83 f0 01             	xor    eax,0x1
c00106a2:	88 83 bd 0f 00 00    	mov    BYTE PTR [ebx+0xfbd],al
c00106a8:	58                   	pop    eax
c00106a9:	5b                   	pop    ebx
c00106aa:	5e                   	pop    esi
c00106ab:	c3                   	ret    

c00106ac <VgaText::doANSI_SGR(int)>:
c00106ac:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106b0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106b4:	85 d2                	test   edx,edx
c00106b6:	75 14                	jne    c00106cc <VgaText::doANSI_SGR(int)+0x20>
c00106b8:	8b 90 c8 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc8]
c00106be:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c00106c4:	8b 90 c4 0f 00 00    	mov    edx,DWORD PTR [eax+0xfc4]
c00106ca:	eb 65                	jmp    c0010731 <VgaText::doANSI_SGR(int)+0x85>
c00106cc:	83 fa 07             	cmp    edx,0x7
c00106cf:	75 14                	jne    c00106e5 <VgaText::doANSI_SGR(int)+0x39>
c00106d1:	8b 90 d0 0f 00 00    	mov    edx,DWORD PTR [eax+0xfd0]
c00106d7:	8b 88 cc 0f 00 00    	mov    ecx,DWORD PTR [eax+0xfcc]
c00106dd:	89 88 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],ecx
c00106e3:	eb 4c                	jmp    c0010731 <VgaText::doANSI_SGR(int)+0x85>
c00106e5:	83 fa 1b             	cmp    edx,0x1b
c00106e8:	74 ce                	je     c00106b8 <VgaText::doANSI_SGR(int)+0xc>
c00106ea:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106ed:	83 f9 07             	cmp    ecx,0x7
c00106f0:	77 09                	ja     c00106fb <VgaText::doANSI_SGR(int)+0x4f>
c00106f2:	8b 14 8d 60 cf 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd30a0]
c00106f9:	eb 20                	jmp    c001071b <VgaText::doANSI_SGR(int)+0x6f>
c00106fb:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106fe:	83 f9 07             	cmp    ecx,0x7
c0010701:	77 09                	ja     c001070c <VgaText::doANSI_SGR(int)+0x60>
c0010703:	8b 14 8d 60 cf 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd30a0]
c001070a:	eb 25                	jmp    c0010731 <VgaText::doANSI_SGR(int)+0x85>
c001070c:	8d 4a a6             	lea    ecx,[edx-0x5a]
c001070f:	83 f9 07             	cmp    ecx,0x7
c0010712:	77 0e                	ja     c0010722 <VgaText::doANSI_SGR(int)+0x76>
c0010714:	8b 14 95 18 ce 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd31e8]
c001071b:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010721:	c3                   	ret    
c0010722:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0010725:	83 f9 07             	cmp    ecx,0x7
c0010728:	77 0d                	ja     c0010737 <VgaText::doANSI_SGR(int)+0x8b>
c001072a:	8b 14 95 f0 cd 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd3210]
c0010731:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c0010737:	c3                   	ret    

c0010738 <VgaText::setDefaultBgColour(VgaColour)>:
c0010738:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001073c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010740:	89 90 c4 0f 00 00    	mov    DWORD PTR [eax+0xfc4],edx
c0010746:	89 90 cc 0f 00 00    	mov    DWORD PTR [eax+0xfcc],edx
c001074c:	c3                   	ret    
c001074d:	90                   	nop

c001074e <VgaText::setDefaultFgColour(VgaColour)>:
c001074e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010752:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010756:	89 90 c8 0f 00 00    	mov    DWORD PTR [eax+0xfc8],edx
c001075c:	89 90 d0 0f 00 00    	mov    DWORD PTR [eax+0xfd0],edx
c0010762:	c3                   	ret    
c0010763:	90                   	nop

c0010764 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010764:	53                   	push   ebx
c0010765:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010769:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001076d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010771:	51                   	push   ecx
c0010772:	e8 c1 ff ff ff       	call   c0010738 <VgaText::setDefaultBgColour(VgaColour)>
c0010777:	58                   	pop    eax
c0010778:	5a                   	pop    edx
c0010779:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c001077d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010781:	5b                   	pop    ebx
c0010782:	eb ca                	jmp    c001074e <VgaText::setDefaultFgColour(VgaColour)>

c0010784 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010784:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0010788:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001078d:	83 e0 0f             	and    eax,0xf
c0010790:	c1 e2 04             	shl    edx,0x4
c0010793:	09 d0                	or     eax,edx
c0010795:	c3                   	ret    

c0010796 <VgaText::scrollScreen()>:
c0010796:	57                   	push   edi
c0010797:	56                   	push   esi
c0010798:	be 01 00 00 00       	mov    esi,0x1
c001079d:	53                   	push   ebx
c001079e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00107a2:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c00107a8:	31 ff                	xor    edi,edi
c00107aa:	01 d9                	add    ecx,ebx
c00107ac:	8a 41 0c             	mov    al,BYTE PTR [ecx+0xc]
c00107af:	83 fe 17             	cmp    esi,0x17
c00107b2:	88 81 6c ff ff ff    	mov    BYTE PTR [ecx-0x94],al
c00107b8:	75 28                	jne    c00107e2 <VgaText::scrollScreen()+0x4c>
c00107ba:	f7 c7 01 00 00 00    	test   edi,0x1
c00107c0:	74 1c                	je     c00107de <VgaText::scrollScreen()+0x48>
c00107c2:	0f b6 83 cc 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfcc]
c00107c9:	50                   	push   eax
c00107ca:	0f b6 83 d0 0f 00 00 	movzx  eax,BYTE PTR [ebx+0xfd0]
c00107d1:	50                   	push   eax
c00107d2:	e8 ad ff ff ff       	call   c0010784 <VgaText::combineColours(unsigned char, unsigned char)>
c00107d7:	5a                   	pop    edx
c00107d8:	5a                   	pop    edx
c00107d9:	88 41 0c             	mov    BYTE PTR [ecx+0xc],al
c00107dc:	eb 04                	jmp    c00107e2 <VgaText::scrollScreen()+0x4c>
c00107de:	c6 41 0c 20          	mov    BYTE PTR [ecx+0xc],0x20
c00107e2:	47                   	inc    edi
c00107e3:	41                   	inc    ecx
c00107e4:	81 ff a0 00 00 00    	cmp    edi,0xa0
c00107ea:	75 c0                	jne    c00107ac <VgaText::scrollScreen()+0x16>
c00107ec:	46                   	inc    esi
c00107ed:	83 fe 18             	cmp    esi,0x18
c00107f0:	75 b0                	jne    c00107a2 <VgaText::scrollScreen()+0xc>
c00107f2:	39 1d e4 e0 02 c0    	cmp    DWORD PTR ds:0xc002e0e4,ebx
c00107f8:	75 24                	jne    c001081e <VgaText::scrollScreen()+0x88>
c00107fa:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010801:	74 08                	je     c001080b <VgaText::scrollScreen()+0x75>
c0010803:	ff 8b f8 0f 00 00    	dec    DWORD PTR [ebx+0xff8]
c0010809:	eb 13                	jmp    c001081e <VgaText::scrollScreen()+0x88>
c001080b:	8b 83 08 10 00 00    	mov    eax,DWORD PTR [ebx+0x1008]
c0010811:	85 c0                	test   eax,eax
c0010813:	74 09                	je     c001081e <VgaText::scrollScreen()+0x88>
c0010815:	83 ec 0c             	sub    esp,0xc
c0010818:	53                   	push   ebx
c0010819:	ff d0                	call   eax
c001081b:	83 c4 10             	add    esp,0x10
c001081e:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010822:	5b                   	pop    ebx
c0010823:	5e                   	pop    esi
c0010824:	5f                   	pop    edi
c0010825:	e9 1e fe ff ff       	jmp    c0010648 <VgaText::updateCursor()>

c001082a <VgaText::combineCharAndColour(char, unsigned char)>:
c001082a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001082f:	c1 e0 08             	shl    eax,0x8
c0010832:	89 c2                	mov    edx,eax
c0010834:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0010839:	09 d0                	or     eax,edx
c001083b:	c3                   	ret    

c001083c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c001083c:	53                   	push   ebx
c001083d:	83 ec 08             	sub    esp,0x8
c0010840:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0010844:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0010849:	50                   	push   eax
c001084a:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c001084f:	50                   	push   eax
c0010850:	e8 2f ff ff ff       	call   c0010784 <VgaText::combineColours(unsigned char, unsigned char)>
c0010855:	5a                   	pop    edx
c0010856:	0f b6 c0             	movzx  eax,al
c0010859:	5b                   	pop    ebx
c001085a:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c001085f:	50                   	push   eax
c0010860:	53                   	push   ebx
c0010861:	e8 c4 ff ff ff       	call   c001082a <VgaText::combineCharAndColour(char, unsigned char)>
c0010866:	5a                   	pop    edx
c0010867:	5a                   	pop    edx
c0010868:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c001086e:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010872:	0f b7 d2             	movzx  edx,dx
c0010875:	66 89 44 51 0c       	mov    WORD PTR [ecx+edx*2+0xc],ax
c001087a:	39 0d e4 e0 02 c0    	cmp    DWORD PTR ds:0xc002e0e4,ecx
c0010880:	75 14                	jne    c0010896 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c0010882:	8b 81 18 10 00 00    	mov    eax,DWORD PTR [ecx+0x1018]
c0010888:	85 c0                	test   eax,eax
c001088a:	74 0a                	je     c0010896 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x5a>
c001088c:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010890:	83 c4 08             	add    esp,0x8
c0010893:	5b                   	pop    ebx
c0010894:	ff e0                	jmp    eax
c0010896:	83 c4 08             	add    esp,0x8
c0010899:	5b                   	pop    ebx
c001089a:	c3                   	ret    
c001089b:	90                   	nop

c001089c <VgaText::getCursorX()>:
c001089c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108a0:	8b 80 b0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb0]
c00108a6:	c3                   	ret    
c00108a7:	90                   	nop

c00108a8 <VgaText::getCursorY()>:
c00108a8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108ac:	8b 80 b4 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb4]
c00108b2:	c3                   	ret    
c00108b3:	90                   	nop

c00108b4 <VgaText::setCursor(int, int)>:
c00108b4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00108b8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00108bc:	89 90 b0 0f 00 00    	mov    DWORD PTR [eax+0xfb0],edx
c00108c2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00108c6:	89 90 b4 0f 00 00    	mov    DWORD PTR [eax+0xfb4],edx
c00108cc:	e9 77 fd ff ff       	jmp    c0010648 <VgaText::updateCursor()>
c00108d1:	90                   	nop

c00108d2 <VgaText::setCursorX(int)>:
c00108d2:	83 ec 10             	sub    esp,0x10
c00108d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108d9:	ff b0 b4 0f 00 00    	push   DWORD PTR [eax+0xfb4]
c00108df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00108e3:	50                   	push   eax
c00108e4:	e8 cb ff ff ff       	call   c00108b4 <VgaText::setCursor(int, int)>
c00108e9:	83 c4 1c             	add    esp,0x1c
c00108ec:	c3                   	ret    
c00108ed:	90                   	nop

c00108ee <VgaText::setCursorY(int)>:
c00108ee:	83 ec 10             	sub    esp,0x10
c00108f1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00108f5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00108f9:	ff b0 b0 0f 00 00    	push   DWORD PTR [eax+0xfb0]
c00108ff:	50                   	push   eax
c0010900:	e8 af ff ff ff       	call   c00108b4 <VgaText::setCursor(int, int)>
c0010905:	83 c4 1c             	add    esp,0x1c
c0010908:	c3                   	ret    
c0010909:	90                   	nop

c001090a <VgaText::incrementCursor(bool)>:
c001090a:	56                   	push   esi
c001090b:	53                   	push   ebx
c001090c:	51                   	push   ecx
c001090d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010911:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0010915:	8b 83 b0 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb0]
c001091b:	40                   	inc    eax
c001091c:	83 f8 50             	cmp    eax,0x50
c001091f:	74 08                	je     c0010929 <VgaText::incrementCursor(bool)+0x1f>
c0010921:	89 83 b0 0f 00 00    	mov    DWORD PTR [ebx+0xfb0],eax
c0010927:	eb 33                	jmp    c001095c <VgaText::incrementCursor(bool)+0x52>
c0010929:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c001092f:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010939:	8d 50 01             	lea    edx,[eax+0x1]
c001093c:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010942:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010948:	75 12                	jne    c001095c <VgaText::incrementCursor(bool)+0x52>
c001094a:	83 ec 0c             	sub    esp,0xc
c001094d:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010953:	53                   	push   ebx
c0010954:	e8 3d fe ff ff       	call   c0010796 <VgaText::scrollScreen()>
c0010959:	83 c4 10             	add    esp,0x10
c001095c:	89 f0                	mov    eax,esi
c001095e:	84 c0                	test   al,al
c0010960:	74 0c                	je     c001096e <VgaText::incrementCursor(bool)+0x64>
c0010962:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010966:	5a                   	pop    edx
c0010967:	5b                   	pop    ebx
c0010968:	5e                   	pop    esi
c0010969:	e9 da fc ff ff       	jmp    c0010648 <VgaText::updateCursor()>
c001096e:	58                   	pop    eax
c001096f:	5b                   	pop    ebx
c0010970:	5e                   	pop    esi
c0010971:	c3                   	ret    

c0010972 <VgaText::updateRAMUsageDisplay(int)>:
c0010972:	56                   	push   esi
c0010973:	8b 35 40 cf 02 c0    	mov    esi,DWORD PTR ds:0xc002cf40
c0010979:	53                   	push   ebx
c001097a:	bb 0a 00 00 00       	mov    ebx,0xa
c001097f:	6a 0f                	push   0xf
c0010981:	6a 00                	push   0x0
c0010983:	e8 fc fd ff ff       	call   c0010784 <VgaText::combineColours(unsigned char, unsigned char)>
c0010988:	5a                   	pop    edx
c0010989:	59                   	pop    ecx
c001098a:	0f b6 c8             	movzx  ecx,al
c001098d:	51                   	push   ecx
c001098e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010992:	99                   	cdq    
c0010993:	f7 fb                	idiv   ebx
c0010995:	89 d3                	mov    ebx,edx
c0010997:	83 c0 30             	add    eax,0x30
c001099a:	83 c3 30             	add    ebx,0x30
c001099d:	0f be c0             	movsx  eax,al
c00109a0:	0f b6 db             	movzx  ebx,bl
c00109a3:	50                   	push   eax
c00109a4:	e8 81 fe ff ff       	call   c001082a <VgaText::combineCharAndColour(char, unsigned char)>
c00109a9:	5a                   	pop    edx
c00109aa:	5a                   	pop    edx
c00109ab:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c00109b2:	51                   	push   ecx
c00109b3:	53                   	push   ebx
c00109b4:	e8 71 fe ff ff       	call   c001082a <VgaText::combineCharAndColour(char, unsigned char)>
c00109b9:	5b                   	pop    ebx
c00109ba:	5a                   	pop    edx
c00109bb:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c00109c2:	51                   	push   ecx
c00109c3:	6a 25                	push   0x25
c00109c5:	e8 60 fe ff ff       	call   c001082a <VgaText::combineCharAndColour(char, unsigned char)>
c00109ca:	59                   	pop    ecx
c00109cb:	5b                   	pop    ebx
c00109cc:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c00109d3:	5b                   	pop    ebx
c00109d4:	5e                   	pop    esi
c00109d5:	c3                   	ret    

c00109d6 <VgaText::updateDiskUsage()>:
c00109d6:	55                   	push   ebp
c00109d7:	bd 10 27 00 00       	mov    ebp,0x2710
c00109dc:	57                   	push   edi
c00109dd:	8b 3d 40 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cf40
c00109e3:	56                   	push   esi
c00109e4:	53                   	push   ebx
c00109e5:	6a 0f                	push   0xf
c00109e7:	6a 00                	push   0x0
c00109e9:	e8 96 fd ff ff       	call   c0010784 <VgaText::combineColours(unsigned char, unsigned char)>
c00109ee:	5a                   	pop    edx
c00109ef:	0f b6 d8             	movzx  ebx,al
c00109f2:	59                   	pop    ecx
c00109f3:	8b 35 68 23 03 c0    	mov    esi,DWORD PTR ds:0xc0032368
c00109f9:	53                   	push   ebx
c00109fa:	b9 0a 00 00 00       	mov    ecx,0xa
c00109ff:	89 f0                	mov    eax,esi
c0010a01:	99                   	cdq    
c0010a02:	f7 fd                	idiv   ebp
c0010a04:	99                   	cdq    
c0010a05:	f7 f9                	idiv   ecx
c0010a07:	8d 42 30             	lea    eax,[edx+0x30]
c0010a0a:	0f b6 c0             	movzx  eax,al
c0010a0d:	50                   	push   eax
c0010a0e:	e8 17 fe ff ff       	call   c001082a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a13:	5d                   	pop    ebp
c0010a14:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a19:	5a                   	pop    edx
c0010a1a:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010a1e:	53                   	push   ebx
c0010a1f:	89 f0                	mov    eax,esi
c0010a21:	99                   	cdq    
c0010a22:	f7 fd                	idiv   ebp
c0010a24:	99                   	cdq    
c0010a25:	f7 f9                	idiv   ecx
c0010a27:	8d 42 30             	lea    eax,[edx+0x30]
c0010a2a:	0f b6 c0             	movzx  eax,al
c0010a2d:	50                   	push   eax
c0010a2e:	e8 f7 fd ff ff       	call   c001082a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a33:	5d                   	pop    ebp
c0010a34:	bd 64 00 00 00       	mov    ebp,0x64
c0010a39:	5a                   	pop    edx
c0010a3a:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c0010a41:	53                   	push   ebx
c0010a42:	89 f0                	mov    eax,esi
c0010a44:	99                   	cdq    
c0010a45:	f7 fd                	idiv   ebp
c0010a47:	99                   	cdq    
c0010a48:	f7 f9                	idiv   ecx
c0010a4a:	8d 42 30             	lea    eax,[edx+0x30]
c0010a4d:	0f b6 c0             	movzx  eax,al
c0010a50:	50                   	push   eax
c0010a51:	e8 d4 fd ff ff       	call   c001082a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a56:	5d                   	pop    ebp
c0010a57:	5a                   	pop    edx
c0010a58:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c0010a5f:	53                   	push   ebx
c0010a60:	89 f0                	mov    eax,esi
c0010a62:	99                   	cdq    
c0010a63:	f7 f9                	idiv   ecx
c0010a65:	89 d6                	mov    esi,edx
c0010a67:	99                   	cdq    
c0010a68:	f7 f9                	idiv   ecx
c0010a6a:	8d 42 30             	lea    eax,[edx+0x30]
c0010a6d:	0f b6 c0             	movzx  eax,al
c0010a70:	50                   	push   eax
c0010a71:	e8 b4 fd ff ff       	call   c001082a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a76:	5d                   	pop    ebp
c0010a77:	5a                   	pop    edx
c0010a78:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c0010a7f:	53                   	push   ebx
c0010a80:	8d 46 30             	lea    eax,[esi+0x30]
c0010a83:	0f b6 f0             	movzx  esi,al
c0010a86:	56                   	push   esi
c0010a87:	e8 9e fd ff ff       	call   c001082a <VgaText::combineCharAndColour(char, unsigned char)>
c0010a8c:	5e                   	pop    esi
c0010a8d:	8b 35 64 23 03 c0    	mov    esi,DWORD PTR ds:0xc0032364
c0010a93:	5d                   	pop    ebp
c0010a94:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a9b:	bd 10 27 00 00       	mov    ebp,0x2710
c0010aa0:	53                   	push   ebx
c0010aa1:	89 f0                	mov    eax,esi
c0010aa3:	99                   	cdq    
c0010aa4:	f7 fd                	idiv   ebp
c0010aa6:	99                   	cdq    
c0010aa7:	f7 f9                	idiv   ecx
c0010aa9:	8d 42 30             	lea    eax,[edx+0x30]
c0010aac:	0f b6 c0             	movzx  eax,al
c0010aaf:	50                   	push   eax
c0010ab0:	e8 75 fd ff ff       	call   c001082a <VgaText::combineCharAndColour(char, unsigned char)>
c0010ab5:	5a                   	pop    edx
c0010ab6:	5d                   	pop    ebp
c0010ab7:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010abe:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010ac3:	53                   	push   ebx
c0010ac4:	89 f0                	mov    eax,esi
c0010ac6:	99                   	cdq    
c0010ac7:	f7 fd                	idiv   ebp
c0010ac9:	99                   	cdq    
c0010aca:	f7 f9                	idiv   ecx
c0010acc:	8d 42 30             	lea    eax,[edx+0x30]
c0010acf:	0f b6 c0             	movzx  eax,al
c0010ad2:	50                   	push   eax
c0010ad3:	e8 52 fd ff ff       	call   c001082a <VgaText::combineCharAndColour(char, unsigned char)>
c0010ad8:	5a                   	pop    edx
c0010ad9:	5d                   	pop    ebp
c0010ada:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010ae1:	bd 64 00 00 00       	mov    ebp,0x64
c0010ae6:	53                   	push   ebx
c0010ae7:	89 f0                	mov    eax,esi
c0010ae9:	99                   	cdq    
c0010aea:	f7 fd                	idiv   ebp
c0010aec:	99                   	cdq    
c0010aed:	f7 f9                	idiv   ecx
c0010aef:	83 c2 30             	add    edx,0x30
c0010af2:	0f b6 d2             	movzx  edx,dl
c0010af5:	52                   	push   edx
c0010af6:	e8 2f fd ff ff       	call   c001082a <VgaText::combineCharAndColour(char, unsigned char)>
c0010afb:	5a                   	pop    edx
c0010afc:	5d                   	pop    ebp
c0010afd:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010b04:	53                   	push   ebx
c0010b05:	89 f0                	mov    eax,esi
c0010b07:	99                   	cdq    
c0010b08:	f7 f9                	idiv   ecx
c0010b0a:	89 d6                	mov    esi,edx
c0010b0c:	99                   	cdq    
c0010b0d:	f7 f9                	idiv   ecx
c0010b0f:	8d 42 30             	lea    eax,[edx+0x30]
c0010b12:	0f b6 c0             	movzx  eax,al
c0010b15:	50                   	push   eax
c0010b16:	e8 0f fd ff ff       	call   c001082a <VgaText::combineCharAndColour(char, unsigned char)>
c0010b1b:	5a                   	pop    edx
c0010b1c:	59                   	pop    ecx
c0010b1d:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010b24:	53                   	push   ebx
c0010b25:	8d 46 30             	lea    eax,[esi+0x30]
c0010b28:	0f b6 f0             	movzx  esi,al
c0010b2b:	56                   	push   esi
c0010b2c:	e8 f9 fc ff ff       	call   c001082a <VgaText::combineCharAndColour(char, unsigned char)>
c0010b31:	5b                   	pop    ebx
c0010b32:	5e                   	pop    esi
c0010b33:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010b3a:	5b                   	pop    ebx
c0010b3b:	5e                   	pop    esi
c0010b3c:	5f                   	pop    edi
c0010b3d:	5d                   	pop    ebp
c0010b3e:	c3                   	ret    
c0010b3f:	90                   	nop

c0010b40 <VgaText::updateTitle()>:
c0010b40:	53                   	push   ebx
c0010b41:	31 c0                	xor    eax,eax
c0010b43:	83 ec 58             	sub    esp,0x58
c0010b46:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010b4a:	89 e1                	mov    ecx,esp
c0010b4c:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010b50:	40                   	inc    eax
c0010b51:	83 f8 50             	cmp    eax,0x50
c0010b54:	75 f6                	jne    c0010b4c <VgaText::updateTitle()+0xc>
c0010b56:	31 c0                	xor    eax,eax
c0010b58:	8a 9c 02 1e 10 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x101e]
c0010b5f:	84 db                	test   bl,bl
c0010b61:	74 06                	je     c0010b69 <VgaText::updateTitle()+0x29>
c0010b63:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010b66:	40                   	inc    eax
c0010b67:	eb ef                	jmp    c0010b58 <VgaText::updateTitle()+0x18>
c0010b69:	8b 82 fc 0f 00 00    	mov    eax,DWORD PTR [edx+0xffc]
c0010b6f:	85 c0                	test   eax,eax
c0010b71:	74 09                	je     c0010b7c <VgaText::updateTitle()+0x3c>
c0010b73:	53                   	push   ebx
c0010b74:	53                   	push   ebx
c0010b75:	51                   	push   ecx
c0010b76:	52                   	push   edx
c0010b77:	ff d0                	call   eax
c0010b79:	83 c4 10             	add    esp,0x10
c0010b7c:	e8 55 fe ff ff       	call   c00109d6 <VgaText::updateDiskUsage()>
c0010b81:	83 c4 58             	add    esp,0x58
c0010b84:	5b                   	pop    ebx
c0010b85:	c3                   	ret    

c0010b86 <VgaText::setTitleTextColour(VgaColour)>:
c0010b86:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b8a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b8e:	89 90 d8 0f 00 00    	mov    DWORD PTR [eax+0xfd8],edx
c0010b94:	eb aa                	jmp    c0010b40 <VgaText::updateTitle()>

c0010b96 <VgaText::setTitleColour(VgaColour)>:
c0010b96:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b9a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b9e:	89 90 d4 0f 00 00    	mov    DWORD PTR [eax+0xfd4],edx
c0010ba4:	eb 9a                	jmp    c0010b40 <VgaText::updateTitle()>

c0010ba6 <VgaText::setTitle(char*)>:
c0010ba6:	53                   	push   ebx
c0010ba7:	83 ec 10             	sub    esp,0x10
c0010baa:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010bae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010bb2:	8d 83 1e 10 00 00    	lea    eax,[ebx+0x101e]
c0010bb8:	50                   	push   eax
c0010bb9:	e8 76 fc fe ff       	call   c0000834 <strcpy>
c0010bbe:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010bc2:	83 c4 18             	add    esp,0x18
c0010bc5:	5b                   	pop    ebx
c0010bc6:	e9 75 ff ff ff       	jmp    c0010b40 <VgaText::updateTitle()>
c0010bcb:	90                   	nop

c0010bcc <VgaText::decrementCursor(bool)>:
c0010bcc:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010bd0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010bd4:	8b 82 b0 0f 00 00    	mov    eax,DWORD PTR [edx+0xfb0]
c0010bda:	85 c0                	test   eax,eax
c0010bdc:	74 07                	je     c0010be5 <VgaText::decrementCursor(bool)+0x19>
c0010bde:	48                   	dec    eax
c0010bdf:	89 82 b0 0f 00 00    	mov    DWORD PTR [edx+0xfb0],eax
c0010be5:	84 c9                	test   cl,cl
c0010be7:	74 09                	je     c0010bf2 <VgaText::decrementCursor(bool)+0x26>
c0010be9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010bed:	e9 56 fa ff ff       	jmp    c0010648 <VgaText::updateCursor()>
c0010bf2:	c3                   	ret    
c0010bf3:	90                   	nop

c0010bf4 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010bf4:	53                   	push   ebx
c0010bf5:	83 ec 08             	sub    esp,0x8
c0010bf8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010bfc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c00:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010c04:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010c08:	3c 07                	cmp    al,0x7
c0010c0a:	75 2a                	jne    c0010c36 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010c0c:	a1 8c e1 02 c0       	mov    eax,ds:0xc002e18c
c0010c11:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010c19:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010c21:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010c29:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010c2d:	83 c4 08             	add    esp,0x8
c0010c30:	5b                   	pop    ebx
c0010c31:	e9 3a 2d 00 00       	jmp    c0013970 <Buzzer::beep(int, int, bool)>
c0010c36:	3c 0d                	cmp    al,0xd
c0010c38:	75 0c                	jne    c0010c46 <VgaText::putchar(char, VgaColour, VgaColour)+0x52>
c0010c3a:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c44:	eb 3b                	jmp    c0010c81 <VgaText::putchar(char, VgaColour, VgaColour)+0x8d>
c0010c46:	3c 0a                	cmp    al,0xa
c0010c48:	75 40                	jne    c0010c8a <VgaText::putchar(char, VgaColour, VgaColour)+0x96>
c0010c4a:	8b 83 b4 0f 00 00    	mov    eax,DWORD PTR [ebx+0xfb4]
c0010c50:	c7 83 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xfb0],0x0
c0010c5a:	8d 50 01             	lea    edx,[eax+0x1]
c0010c5d:	89 93 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],edx
c0010c63:	3b 93 ac 0f 00 00    	cmp    edx,DWORD PTR [ebx+0xfac]
c0010c69:	75 12                	jne    c0010c7d <VgaText::putchar(char, VgaColour, VgaColour)+0x89>
c0010c6b:	83 ec 0c             	sub    esp,0xc
c0010c6e:	89 83 b4 0f 00 00    	mov    DWORD PTR [ebx+0xfb4],eax
c0010c74:	53                   	push   ebx
c0010c75:	e8 1c fb ff ff       	call   c0010796 <VgaText::scrollScreen()>
c0010c7a:	83 c4 10             	add    esp,0x10
c0010c7d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010c81:	83 c4 08             	add    esp,0x8
c0010c84:	5b                   	pop    ebx
c0010c85:	e9 be f9 ff ff       	jmp    c0010648 <VgaText::updateCursor()>
c0010c8a:	3c 08                	cmp    al,0x8
c0010c8c:	75 31                	jne    c0010cbf <VgaText::putchar(char, VgaColour, VgaColour)+0xcb>
c0010c8e:	50                   	push   eax
c0010c8f:	50                   	push   eax
c0010c90:	6a 01                	push   0x1
c0010c92:	53                   	push   ebx
c0010c93:	e8 34 ff ff ff       	call   c0010bcc <VgaText::decrementCursor(bool)>
c0010c98:	5a                   	pop    edx
c0010c99:	59                   	pop    ecx
c0010c9a:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010ca0:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010ca6:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0010cac:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0010cb2:	6a 20                	push   0x20
c0010cb4:	53                   	push   ebx
c0010cb5:	e8 82 fb ff ff       	call   c001083c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cba:	83 c4 28             	add    esp,0x28
c0010cbd:	5b                   	pop    ebx
c0010cbe:	c3                   	ret    
c0010cbf:	83 ec 08             	sub    esp,0x8
c0010cc2:	0f be c0             	movsx  eax,al
c0010cc5:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010ccb:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010cd1:	51                   	push   ecx
c0010cd2:	52                   	push   edx
c0010cd3:	50                   	push   eax
c0010cd4:	53                   	push   ebx
c0010cd5:	e8 62 fb ff ff       	call   c001083c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010cda:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010cde:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010ce6:	83 c4 28             	add    esp,0x28
c0010ce9:	5b                   	pop    ebx
c0010cea:	e9 1b fc ff ff       	jmp    c001090a <VgaText::incrementCursor(bool)>
c0010cef:	90                   	nop

c0010cf0 <VgaText::isShowingCursor()>:
c0010cf0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010cf4:	8a 80 bc 0f 00 00    	mov    al,BYTE PTR [eax+0xfbc]
c0010cfa:	c3                   	ret    
c0010cfb:	90                   	nop

c0010cfc <VgaText::isBlinkDisabled()>:
c0010cfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d00:	8a 80 bd 0f 00 00    	mov    al,BYTE PTR [eax+0xfbd]
c0010d06:	83 f0 01             	xor    eax,0x1
c0010d09:	c3                   	ret    

c0010d0a <VgaText::setCursorHeight(int)>:
c0010d0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d0e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010d12:	89 90 b8 0f 00 00    	mov    DWORD PTR [eax+0xfb8],edx
c0010d18:	0f b6 80 bc 0f 00 00 	movzx  eax,BYTE PTR [eax+0xfbc]
c0010d1f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010d23:	e9 3a f9 ff ff       	jmp    c0010662 <VgaText::showCursor(bool)>

c0010d28 <VgaText::getCursorHeight()>:
c0010d28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d2c:	8b 80 b8 0f 00 00    	mov    eax,DWORD PTR [eax+0xfb8]
c0010d32:	c3                   	ret    

c0010d33 <setActiveTerminal(VgaText*)>:
c0010d33:	53                   	push   ebx
c0010d34:	83 ec 08             	sub    esp,0x8
c0010d37:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010d3b:	85 db                	test   ebx,ebx
c0010d3d:	75 11                	jne    c0010d50 <setActiveTerminal(VgaText*)+0x1d>
c0010d3f:	c7 44 24 10 cc 9f 02 c0 	mov    DWORD PTR [esp+0x10],0xc0029fcc
c0010d47:	83 c4 08             	add    esp,0x8
c0010d4a:	5b                   	pop    ebx
c0010d4b:	e9 9d 94 00 00       	jmp    c001a1ed <Krnl::panic(char const*)>
c0010d50:	50                   	push   eax
c0010d51:	50                   	push   eax
c0010d52:	53                   	push   ebx
c0010d53:	68 da 9f 02 c0       	push   0xc0029fda
c0010d58:	e8 14 1e 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0010d5d:	a1 e4 e0 02 c0       	mov    eax,ds:0xc002e0e4
c0010d62:	83 c4 10             	add    esp,0x10
c0010d65:	85 c0                	test   eax,eax
c0010d67:	74 0c                	je     c0010d75 <setActiveTerminal(VgaText*)+0x42>
c0010d69:	83 ec 0c             	sub    esp,0xc
c0010d6c:	50                   	push   eax
c0010d6d:	e8 d6 f8 ff ff       	call   c0010648 <VgaText::updateCursor()>
c0010d72:	83 c4 10             	add    esp,0x10
c0010d75:	89 1d e4 e0 02 c0    	mov    DWORD PTR ds:0xc002e0e4,ebx
c0010d7b:	51                   	push   ecx
c0010d7c:	51                   	push   ecx
c0010d7d:	53                   	push   ebx
c0010d7e:	68 f2 9f 02 c0       	push   0xc0029ff2
c0010d83:	e8 e9 1d 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0010d88:	83 c4 0c             	add    esp,0xc
c0010d8b:	ff b3 b4 0f 00 00    	push   DWORD PTR [ebx+0xfb4]
c0010d91:	ff b3 b0 0f 00 00    	push   DWORD PTR [ebx+0xfb0]
c0010d97:	53                   	push   ebx
c0010d98:	e8 17 fb ff ff       	call   c00108b4 <VgaText::setCursor(int, int)>
c0010d9d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010da0:	e8 57 ff ff ff       	call   c0010cfc <VgaText::isBlinkDisabled()>
c0010da5:	5a                   	pop    edx
c0010da6:	0f b6 c0             	movzx  eax,al
c0010da9:	59                   	pop    ecx
c0010daa:	50                   	push   eax
c0010dab:	53                   	push   ebx
c0010dac:	e8 c1 f8 ff ff       	call   c0010672 <VgaText::disableBlink(bool)>
c0010db1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010db4:	e8 6f ff ff ff       	call   c0010d28 <VgaText::getCursorHeight()>
c0010db9:	5a                   	pop    edx
c0010dba:	59                   	pop    ecx
c0010dbb:	50                   	push   eax
c0010dbc:	53                   	push   ebx
c0010dbd:	e8 48 ff ff ff       	call   c0010d0a <VgaText::setCursorHeight(int)>
c0010dc2:	83 c4 10             	add    esp,0x10
c0010dc5:	80 bb f4 0f 00 00 00 	cmp    BYTE PTR [ebx+0xff4],0x0
c0010dcc:	75 0a                	jne    c0010dd8 <setActiveTerminal(VgaText*)+0xa5>
c0010dce:	c7 83 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff8],0x0
c0010dd8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010ddc:	83 c4 08             	add    esp,0x8
c0010ddf:	5b                   	pop    ebx
c0010de0:	e9 0f f8 ff ff       	jmp    c00105f4 <VgaText::load()>

c0010de5 <doTerminalCycle()>:
c0010de5:	83 ec 18             	sub    esp,0x18
c0010de8:	a1 e0 e0 02 c0       	mov    eax,ds:0xc002e0e0
c0010ded:	8b 80 c0 0f 00 00    	mov    eax,DWORD PTR [eax+0xfc0]
c0010df3:	50                   	push   eax
c0010df4:	a3 e0 e0 02 c0       	mov    ds:0xc002e0e0,eax
c0010df9:	e8 35 ff ff ff       	call   c0010d33 <setActiveTerminal(VgaText*)>
c0010dfe:	83 c4 1c             	add    esp,0x1c
c0010e01:	c3                   	ret    

c0010e02 <VgaText::doUpdate()>:
c0010e02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010e06:	8b 80 04 10 00 00    	mov    eax,DWORD PTR [eax+0x1004]
c0010e0c:	85 c0                	test   eax,eax
c0010e0e:	74 02                	je     c0010e12 <VgaText::doUpdate()+0x10>
c0010e10:	ff e0                	jmp    eax
c0010e12:	c3                   	ret    
c0010e13:	90                   	nop

c0010e14 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010e14:	55                   	push   ebp
c0010e15:	57                   	push   edi
c0010e16:	56                   	push   esi
c0010e17:	53                   	push   ebx
c0010e18:	83 ec 1c             	sub    esp,0x1c
c0010e1b:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0010e1f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e24:	c6 85 1d 10 00 00 01 	mov    BYTE PTR [ebp+0x101d],0x1
c0010e2b:	8d 7d 0c             	lea    edi,[ebp+0xc]
c0010e2e:	50                   	push   eax
c0010e2f:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010e34:	50                   	push   eax
c0010e35:	e8 4a f9 ff ff       	call   c0010784 <VgaText::combineColours(unsigned char, unsigned char)>
c0010e3a:	59                   	pop    ecx
c0010e3b:	0f b6 c0             	movzx  eax,al
c0010e3e:	5b                   	pop    ebx
c0010e3f:	31 c9                	xor    ecx,ecx
c0010e41:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010e49:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0010e4d:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010e53:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010e57:	0f b7 db             	movzx  ebx,bx
c0010e5a:	01 db                	add    ebx,ebx
c0010e5c:	01 fb                	add    ebx,edi
c0010e5e:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0010e61:	84 c0                	test   al,al
c0010e63:	0f 84 38 01 00 00    	je     c0010fa1 <VgaText::puts(char const*, VgaColour, VgaColour)+0x18d>
c0010e69:	3c 0d                	cmp    al,0xd
c0010e6b:	75 0f                	jne    c0010e7c <VgaText::puts(char const*, VgaColour, VgaColour)+0x68>
c0010e6d:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e77:	e9 1f 01 00 00       	jmp    c0010f9b <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010e7c:	3c 0a                	cmp    al,0xa
c0010e7e:	75 5b                	jne    c0010edb <VgaText::puts(char const*, VgaColour, VgaColour)+0xc7>
c0010e80:	8b 85 b4 0f 00 00    	mov    eax,DWORD PTR [ebp+0xfb4]
c0010e86:	c7 85 b0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0xfb0],0x0
c0010e90:	8d 48 01             	lea    ecx,[eax+0x1]
c0010e93:	89 8d b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],ecx
c0010e99:	3b 8d ac 0f 00 00    	cmp    ecx,DWORD PTR [ebp+0xfac]
c0010e9f:	75 12                	jne    c0010eb3 <VgaText::puts(char const*, VgaColour, VgaColour)+0x9f>
c0010ea1:	83 ec 0c             	sub    esp,0xc
c0010ea4:	89 85 b4 0f 00 00    	mov    DWORD PTR [ebp+0xfb4],eax
c0010eaa:	55                   	push   ebp
c0010eab:	e8 e6 f8 ff ff       	call   c0010796 <VgaText::scrollScreen()>
c0010eb0:	83 c4 10             	add    esp,0x10
c0010eb3:	83 ec 0c             	sub    esp,0xc
c0010eb6:	55                   	push   ebp
c0010eb7:	e8 8c f7 ff ff       	call   c0010648 <VgaText::updateCursor()>
c0010ebc:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010ec4:	83 c4 10             	add    esp,0x10
c0010ec7:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010ecd:	31 c9                	xor    ecx,ecx
c0010ecf:	0f b7 db             	movzx  ebx,bx
c0010ed2:	01 db                	add    ebx,ebx
c0010ed4:	01 fb                	add    ebx,edi
c0010ed6:	e9 c0 00 00 00       	jmp    c0010f9b <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010edb:	3c 08                	cmp    al,0x8
c0010edd:	75 4e                	jne    c0010f2d <VgaText::puts(char const*, VgaColour, VgaColour)+0x119>
c0010edf:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010ee3:	53                   	push   ebx
c0010ee4:	53                   	push   ebx
c0010ee5:	6a 01                	push   0x1
c0010ee7:	55                   	push   ebp
c0010ee8:	e8 df fc ff ff       	call   c0010bcc <VgaText::decrementCursor(bool)>
c0010eed:	58                   	pop    eax
c0010eee:	5a                   	pop    edx
c0010eef:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010ef5:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010efb:	ff b5 cc 0f 00 00    	push   DWORD PTR [ebp+0xfcc]
c0010f01:	ff b5 d0 0f 00 00    	push   DWORD PTR [ebp+0xfd0]
c0010f07:	6a 20                	push   0x20
c0010f09:	55                   	push   ebp
c0010f0a:	e8 2d f9 ff ff       	call   c001083c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010f0f:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f17:	83 c4 20             	add    esp,0x20
c0010f1a:	03 9d b0 0f 00 00    	add    ebx,DWORD PTR [ebp+0xfb0]
c0010f20:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f24:	0f b7 db             	movzx  ebx,bx
c0010f27:	01 db                	add    ebx,ebx
c0010f29:	01 fb                	add    ebx,edi
c0010f2b:	eb 6e                	jmp    c0010f9b <VgaText::puts(char const*, VgaColour, VgaColour)+0x187>
c0010f2d:	51                   	push   ecx
c0010f2e:	51                   	push   ecx
c0010f2f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010f33:	50                   	push   eax
c0010f34:	e8 f1 f8 ff ff       	call   c001082a <VgaText::combineCharAndColour(char, unsigned char)>
c0010f39:	83 c4 10             	add    esp,0x10
c0010f3c:	66 89 03             	mov    WORD PTR [ebx],ax
c0010f3f:	39 2d e4 e0 02 c0    	cmp    DWORD PTR ds:0xc002e0e4,ebp
c0010f45:	75 2a                	jne    c0010f71 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f47:	8b 85 18 10 00 00    	mov    eax,DWORD PTR [ebp+0x1018]
c0010f4d:	85 c0                	test   eax,eax
c0010f4f:	74 20                	je     c0010f71 <VgaText::puts(char const*, VgaColour, VgaColour)+0x15d>
c0010f51:	52                   	push   edx
c0010f52:	52                   	push   edx
c0010f53:	ff b5 b4 0f 00 00    	push   DWORD PTR [ebp+0xfb4]
c0010f59:	ff b5 b0 0f 00 00    	push   DWORD PTR [ebp+0xfb0]
c0010f5f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f63:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010f67:	0f be 0e             	movsx  ecx,BYTE PTR [esi]
c0010f6a:	51                   	push   ecx
c0010f6b:	55                   	push   ebp
c0010f6c:	ff d0                	call   eax
c0010f6e:	83 c4 20             	add    esp,0x20
c0010f71:	83 c3 02             	add    ebx,0x2
c0010f74:	50                   	push   eax
c0010f75:	50                   	push   eax
c0010f76:	6a 00                	push   0x0
c0010f78:	55                   	push   ebp
c0010f79:	e8 8c f9 ff ff       	call   c001090a <VgaText::incrementCursor(bool)>
c0010f7e:	83 c4 10             	add    esp,0x10
c0010f81:	83 bd b0 0f 00 00 00 	cmp    DWORD PTR [ebp+0xfb0],0x0
c0010f88:	75 0f                	jne    c0010f99 <VgaText::puts(char const*, VgaColour, VgaColour)+0x185>
c0010f8a:	66 6b 9d b4 0f 00 00 50 	imul   bx,WORD PTR [ebp+0xfb4],0x50
c0010f92:	0f b7 db             	movzx  ebx,bx
c0010f95:	01 db                	add    ebx,ebx
c0010f97:	01 fb                	add    ebx,edi
c0010f99:	b1 01                	mov    cl,0x1
c0010f9b:	46                   	inc    esi
c0010f9c:	e9 bd fe ff ff       	jmp    c0010e5e <VgaText::puts(char const*, VgaColour, VgaColour)+0x4a>
c0010fa1:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0010fa5:	83 ec 0c             	sub    esp,0xc
c0010fa8:	55                   	push   ebp
c0010fa9:	e8 9a f6 ff ff       	call   c0010648 <VgaText::updateCursor()>
c0010fae:	83 c4 10             	add    esp,0x10
c0010fb1:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0010fb5:	84 c9                	test   cl,cl
c0010fb7:	74 0c                	je     c0010fc5 <VgaText::puts(char const*, VgaColour, VgaColour)+0x1b1>
c0010fb9:	83 ec 0c             	sub    esp,0xc
c0010fbc:	55                   	push   ebp
c0010fbd:	e8 40 fe ff ff       	call   c0010e02 <VgaText::doUpdate()>
c0010fc2:	83 c4 10             	add    esp,0x10
c0010fc5:	c6 85 1d 10 00 00 00 	mov    BYTE PTR [ebp+0x101d],0x0
c0010fcc:	83 c4 1c             	add    esp,0x1c
c0010fcf:	5b                   	pop    ebx
c0010fd0:	5e                   	pop    esi
c0010fd1:	5f                   	pop    edi
c0010fd2:	5d                   	pop    ebp
c0010fd3:	c3                   	ret    

c0010fd4 <VgaText::clearScreen()>:
c0010fd4:	57                   	push   edi
c0010fd5:	56                   	push   esi
c0010fd6:	31 f6                	xor    esi,esi
c0010fd8:	53                   	push   ebx
c0010fd9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010fdd:	52                   	push   edx
c0010fde:	6a 00                	push   0x0
c0010fe0:	6a 00                	push   0x0
c0010fe2:	53                   	push   ebx
c0010fe3:	e8 cc f8 ff ff       	call   c00108b4 <VgaText::setCursor(int, int)>
c0010fe8:	c6 83 1d 10 00 00 01 	mov    BYTE PTR [ebx+0x101d],0x1
c0010fef:	83 c4 10             	add    esp,0x10
c0010ff2:	39 b3 ac 0f 00 00    	cmp    DWORD PTR [ebx+0xfac],esi
c0010ff8:	7e 26                	jle    c0011020 <VgaText::clearScreen()+0x4c>
c0010ffa:	31 ff                	xor    edi,edi
c0010ffc:	50                   	push   eax
c0010ffd:	50                   	push   eax
c0010ffe:	56                   	push   esi
c0010fff:	57                   	push   edi
c0011000:	47                   	inc    edi
c0011001:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011007:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c001100d:	6a 20                	push   0x20
c001100f:	53                   	push   ebx
c0011010:	e8 27 f8 ff ff       	call   c001083c <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0011015:	83 c4 20             	add    esp,0x20
c0011018:	83 ff 50             	cmp    edi,0x50
c001101b:	75 df                	jne    c0010ffc <VgaText::clearScreen()+0x28>
c001101d:	46                   	inc    esi
c001101e:	eb d2                	jmp    c0010ff2 <VgaText::clearScreen()+0x1e>
c0011020:	83 ec 0c             	sub    esp,0xc
c0011023:	53                   	push   ebx
c0011024:	e8 d9 fd ff ff       	call   c0010e02 <VgaText::doUpdate()>
c0011029:	c6 83 1d 10 00 00 00 	mov    BYTE PTR [ebx+0x101d],0x0
c0011030:	83 c4 10             	add    esp,0x10
c0011033:	5b                   	pop    ebx
c0011034:	5e                   	pop    esi
c0011035:	5f                   	pop    edi
c0011036:	c3                   	ret    
c0011037:	90                   	nop

c0011038 <VgaText::putchar(char)>:
c0011038:	56                   	push   esi
c0011039:	53                   	push   ebx
c001103a:	83 ec 14             	sub    esp,0x14
c001103d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0011041:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011045:	3c 5b                	cmp    al,0x5b
c0011047:	75 21                	jne    c001106a <VgaText::putchar(char)+0x32>
c0011049:	80 bb dc 0f 00 00 00 	cmp    BYTE PTR [ebx+0xfdc],0x0
c0011050:	74 28                	je     c001107a <VgaText::putchar(char)+0x42>
c0011052:	66 c7 83 dc 0f 00 00 00 01 	mov    WORD PTR [ebx+0xfdc],0x100
c001105b:	c7 83 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0xff0],0x0
c0011065:	e9 e2 00 00 00       	jmp    c001114c <VgaText::putchar(char)+0x114>
c001106a:	3c 1b                	cmp    al,0x1b
c001106c:	75 0c                	jne    c001107a <VgaText::putchar(char)+0x42>
c001106e:	c6 83 dc 0f 00 00 01 	mov    BYTE PTR [ebx+0xfdc],0x1
c0011075:	e9 d2 00 00 00       	jmp    c001114c <VgaText::putchar(char)+0x114>
c001107a:	8a 8b dd 0f 00 00    	mov    cl,BYTE PTR [ebx+0xfdd]
c0011080:	84 c9                	test   cl,cl
c0011082:	0f 84 ab 00 00 00    	je     c0011133 <VgaText::putchar(char)+0xfb>
c0011088:	8d 50 c0             	lea    edx,[eax-0x40]
c001108b:	80 fa 3e             	cmp    dl,0x3e
c001108e:	0f 87 82 00 00 00    	ja     c0011116 <VgaText::putchar(char)+0xde>
c0011094:	3c 6d                	cmp    al,0x6d
c0011096:	75 4d                	jne    c00110e5 <VgaText::putchar(char)+0xad>
c0011098:	31 f6                	xor    esi,esi
c001109a:	31 d2                	xor    edx,edx
c001109c:	31 c0                	xor    eax,eax
c001109e:	39 b3 f0 0f 00 00    	cmp    DWORD PTR [ebx+0xff0],esi
c00110a4:	7e 30                	jle    c00110d6 <VgaText::putchar(char)+0x9e>
c00110a6:	0f be 94 33 de 0f 00 00 	movsx  edx,BYTE PTR [ebx+esi*1+0xfde]
c00110ae:	80 fa 3b             	cmp    dl,0x3b
c00110b1:	75 17                	jne    c00110ca <VgaText::putchar(char)+0x92>
c00110b3:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00110b7:	50                   	push   eax
c00110b8:	53                   	push   ebx
c00110b9:	e8 ee f5 ff ff       	call   c00106ac <VgaText::doANSI_SGR(int)>
c00110be:	59                   	pop    ecx
c00110bf:	31 d2                	xor    edx,edx
c00110c1:	58                   	pop    eax
c00110c2:	31 c0                	xor    eax,eax
c00110c4:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00110c8:	eb 09                	jmp    c00110d3 <VgaText::putchar(char)+0x9b>
c00110ca:	6b c0 0a             	imul   eax,eax,0xa
c00110cd:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00110d1:	88 ca                	mov    dl,cl
c00110d3:	46                   	inc    esi
c00110d4:	eb c8                	jmp    c001109e <VgaText::putchar(char)+0x66>
c00110d6:	84 d2                	test   dl,dl
c00110d8:	74 31                	je     c001110b <VgaText::putchar(char)+0xd3>
c00110da:	50                   	push   eax
c00110db:	53                   	push   ebx
c00110dc:	e8 cb f5 ff ff       	call   c00106ac <VgaText::doANSI_SGR(int)>
c00110e1:	58                   	pop    eax
c00110e2:	5a                   	pop    edx
c00110e3:	eb 26                	jmp    c001110b <VgaText::putchar(char)+0xd3>
c00110e5:	3c 4a                	cmp    al,0x4a
c00110e7:	75 22                	jne    c001110b <VgaText::putchar(char)+0xd3>
c00110e9:	80 bb de 0f 00 00 32 	cmp    BYTE PTR [ebx+0xfde],0x32
c00110f0:	75 19                	jne    c001110b <VgaText::putchar(char)+0xd3>
c00110f2:	83 ec 0c             	sub    esp,0xc
c00110f5:	53                   	push   ebx
c00110f6:	e8 d9 fe ff ff       	call   c0010fd4 <VgaText::clearScreen()>
c00110fb:	83 c4 0c             	add    esp,0xc
c00110fe:	6a 00                	push   0x0
c0011100:	6a 00                	push   0x0
c0011102:	53                   	push   ebx
c0011103:	e8 ac f7 ff ff       	call   c00108b4 <VgaText::setCursor(int, int)>
c0011108:	83 c4 10             	add    esp,0x10
c001110b:	66 c7 83 dc 0f 00 00 00 00 	mov    WORD PTR [ebx+0xfdc],0x0
c0011114:	eb 36                	jmp    c001114c <VgaText::putchar(char)+0x114>
c0011116:	8b 93 f0 0f 00 00    	mov    edx,DWORD PTR [ebx+0xff0]
c001111c:	83 fa 0e             	cmp    edx,0xe
c001111f:	7f 2b                	jg     c001114c <VgaText::putchar(char)+0x114>
c0011121:	8d 4a 01             	lea    ecx,[edx+0x1]
c0011124:	89 8b f0 0f 00 00    	mov    DWORD PTR [ebx+0xff0],ecx
c001112a:	88 84 13 de 0f 00 00 	mov    BYTE PTR [ebx+edx*1+0xfde],al
c0011131:	eb 19                	jmp    c001114c <VgaText::putchar(char)+0x114>
c0011133:	ff b3 cc 0f 00 00    	push   DWORD PTR [ebx+0xfcc]
c0011139:	0f be c0             	movsx  eax,al
c001113c:	ff b3 d0 0f 00 00    	push   DWORD PTR [ebx+0xfd0]
c0011142:	50                   	push   eax
c0011143:	53                   	push   ebx
c0011144:	e8 ab fa ff ff       	call   c0010bf4 <VgaText::putchar(char, VgaColour, VgaColour)>
c0011149:	83 c4 10             	add    esp,0x10
c001114c:	83 c4 14             	add    esp,0x14
c001114f:	5b                   	pop    ebx
c0011150:	5e                   	pop    esi
c0011151:	c3                   	ret    

c0011152 <VgaText::puts(char const*)>:
c0011152:	53                   	push   ebx
c0011153:	83 ec 08             	sub    esp,0x8
c0011156:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001115a:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001115d:	84 c0                	test   al,al
c001115f:	74 12                	je     c0011173 <VgaText::puts(char const*)+0x21>
c0011161:	43                   	inc    ebx
c0011162:	51                   	push   ecx
c0011163:	51                   	push   ecx
c0011164:	50                   	push   eax
c0011165:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011169:	e8 ca fe ff ff       	call   c0011038 <VgaText::putchar(char)>
c001116e:	83 c4 10             	add    esp,0x10
c0011171:	eb e7                	jmp    c001115a <VgaText::puts(char const*)+0x8>
c0011173:	83 c4 08             	add    esp,0x8
c0011176:	5b                   	pop    ebx
c0011177:	c3                   	ret    

c0011178 <VgaText::putx(unsigned int)>:
c0011178:	57                   	push   edi
c0011179:	b9 11 00 00 00       	mov    ecx,0x11
c001117e:	56                   	push   esi
c001117f:	be 0e a0 02 c0       	mov    esi,0xc002a00e
c0011184:	53                   	push   ebx
c0011185:	83 ec 20             	sub    esp,0x20
c0011188:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001118c:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011190:	fc                   	cld    
c0011191:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011193:	be 08 00 00 00       	mov    esi,0x8
c0011198:	50                   	push   eax
c0011199:	50                   	push   eax
c001119a:	89 d8                	mov    eax,ebx
c001119c:	c1 e3 04             	shl    ebx,0x4
c001119f:	c1 e8 1c             	shr    eax,0x1c
c00111a2:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c00111a7:	50                   	push   eax
c00111a8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00111ac:	e8 87 fe ff ff       	call   c0011038 <VgaText::putchar(char)>
c00111b1:	83 c4 10             	add    esp,0x10
c00111b4:	4e                   	dec    esi
c00111b5:	75 e1                	jne    c0011198 <VgaText::putx(unsigned int)+0x20>
c00111b7:	83 c4 20             	add    esp,0x20
c00111ba:	5b                   	pop    ebx
c00111bb:	5e                   	pop    esi
c00111bc:	5f                   	pop    edi
c00111bd:	c3                   	ret    

c00111be <VgaText::VgaText(char const*)>:
c00111be:	57                   	push   edi
c00111bf:	56                   	push   esi
c00111c0:	53                   	push   ebx
c00111c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111c5:	83 ec 08             	sub    esp,0x8
c00111c8:	6a 00                	push   0x0
c00111ca:	50                   	push   eax
c00111cb:	e8 6e 05 00 00       	call   c001173e <UnixFile::UnixFile(int)>
c00111d0:	83 c4 10             	add    esp,0x10
c00111d3:	ba 74 a0 02 c0       	mov    edx,0xc002a074
c00111d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111dc:	89 10                	mov    DWORD PTR [eax],edx
c00111de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111e2:	c7 80 d4 0f 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xfd4],0x1
c00111ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f0:	c7 80 d8 0f 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0xfd8],0xf
c00111fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111fe:	c6 80 dc 0f 00 00 00 	mov    BYTE PTR [eax+0xfdc],0x0
c0011205:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011209:	c6 80 dd 0f 00 00 00 	mov    BYTE PTR [eax+0xfdd],0x0
c0011210:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011214:	c7 80 f0 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff0],0x0
c001121e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011222:	c7 80 f8 0f 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xff8],0x0
c001122c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011230:	c6 80 1c 10 00 00 00 	mov    BYTE PTR [eax+0x101c],0x0
c0011237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001123b:	c6 80 1d 10 00 00 00 	mov    BYTE PTR [eax+0x101d],0x0
c0011242:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011246:	8d 90 fc 0f 00 00    	lea    edx,[eax+0xffc]
c001124c:	bb c0 e0 02 c0       	mov    ebx,0xc002e0c0
c0011251:	b8 08 00 00 00       	mov    eax,0x8
c0011256:	fc                   	cld    
c0011257:	89 d7                	mov    edi,edx
c0011259:	89 de                	mov    esi,ebx
c001125b:	89 c1                	mov    ecx,eax
c001125d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001125f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011263:	05 1e 10 00 00       	add    eax,0x101e
c0011268:	83 ec 08             	sub    esp,0x8
c001126b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001126f:	50                   	push   eax
c0011270:	e8 bf f5 fe ff       	call   c0000834 <strcpy>
c0011275:	83 c4 10             	add    esp,0x10
c0011278:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001127c:	c7 80 ac 0f 00 00 18 00 00 00 	mov    DWORD PTR [eax+0xfac],0x18
c0011286:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001128a:	83 c0 0c             	add    eax,0xc
c001128d:	83 ec 04             	sub    esp,0x4
c0011290:	68 00 0f 00 00       	push   0xf00
c0011295:	6a 00                	push   0x0
c0011297:	50                   	push   eax
c0011298:	e8 db f4 fe ff       	call   c0000778 <memset>
c001129d:	83 c4 10             	add    esp,0x10
c00112a0:	83 ec 04             	sub    esp,0x4
c00112a3:	6a 00                	push   0x0
c00112a5:	6a 07                	push   0x7
c00112a7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112ab:	e8 b4 f4 ff ff       	call   c0010764 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c00112b0:	83 c4 10             	add    esp,0x10
c00112b3:	83 ec 08             	sub    esp,0x8
c00112b6:	6a 02                	push   0x2
c00112b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112bc:	e8 49 fa ff ff       	call   c0010d0a <VgaText::setCursorHeight(int)>
c00112c1:	83 c4 10             	add    esp,0x10
c00112c4:	83 ec 04             	sub    esp,0x4
c00112c7:	6a 00                	push   0x0
c00112c9:	6a 00                	push   0x0
c00112cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112cf:	e8 e0 f5 ff ff       	call   c00108b4 <VgaText::setCursor(int, int)>
c00112d4:	83 c4 10             	add    esp,0x10
c00112d7:	83 ec 08             	sub    esp,0x8
c00112da:	6a 01                	push   0x1
c00112dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112e0:	e8 7d f3 ff ff       	call   c0010662 <VgaText::showCursor(bool)>
c00112e5:	83 c4 10             	add    esp,0x10
c00112e8:	83 ec 08             	sub    esp,0x8
c00112eb:	6a 01                	push   0x1
c00112ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00112f1:	e8 7c f3 ff ff       	call   c0010672 <VgaText::disableBlink(bool)>
c00112f6:	83 c4 10             	add    esp,0x10
c00112f9:	83 ec 0c             	sub    esp,0xc
c00112fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011300:	e8 cf fc ff ff       	call   c0010fd4 <VgaText::clearScreen()>
c0011305:	83 c4 10             	add    esp,0x10
c0011308:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001130c:	c6 80 f4 0f 00 00 00 	mov    BYTE PTR [eax+0xff4],0x0
c0011313:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011317:	05 9e 10 00 00       	add    eax,0x109e
c001131c:	83 ec 04             	sub    esp,0x4
c001131f:	68 96 00 00 00       	push   0x96
c0011324:	6a 00                	push   0x0
c0011326:	50                   	push   eax
c0011327:	e8 4c f4 fe ff       	call   c0000778 <memset>
c001132c:	83 c4 10             	add    esp,0x10
c001132f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011333:	05 34 11 00 00       	add    eax,0x1134
c0011338:	83 ec 04             	sub    esp,0x4
c001133b:	68 2c 01 00 00       	push   0x12c
c0011340:	6a 00                	push   0x0
c0011342:	50                   	push   eax
c0011343:	e8 30 f4 fe ff       	call   c0000778 <memset>
c0011348:	83 c4 10             	add    esp,0x10
c001134b:	90                   	nop
c001134c:	5b                   	pop    ebx
c001134d:	5e                   	pop    esi
c001134e:	5f                   	pop    edi
c001134f:	c3                   	ret    

c0011350 <VgaText::receiveKey(unsigned char)>:
c0011350:	55                   	push   ebp
c0011351:	57                   	push   edi
c0011352:	56                   	push   esi
c0011353:	53                   	push   ebx
c0011354:	83 ec 1c             	sub    esp,0x1c
c0011357:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001135b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001135f:	84 db                	test   bl,bl
c0011361:	0f 84 c9 00 00 00    	je     c0011430 <VgaText::receiveKey(unsigned char)+0xe0>
c0011367:	8d be 9e 10 00 00    	lea    edi,[esi+0x109e]
c001136d:	80 fb 08             	cmp    bl,0x8
c0011370:	75 2c                	jne    c001139e <VgaText::receiveKey(unsigned char)+0x4e>
c0011372:	83 ec 0c             	sub    esp,0xc
c0011375:	57                   	push   edi
c0011376:	e8 19 f4 fe ff       	call   c0000794 <strlen>
c001137b:	83 c4 10             	add    esp,0x10
c001137e:	85 c0                	test   eax,eax
c0011380:	74 41                	je     c00113c3 <VgaText::receiveKey(unsigned char)+0x73>
c0011382:	50                   	push   eax
c0011383:	50                   	push   eax
c0011384:	6a 08                	push   0x8
c0011386:	56                   	push   esi
c0011387:	e8 ac fc ff ff       	call   c0011038 <VgaText::putchar(char)>
c001138c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001138f:	e8 00 f4 fe ff       	call   c0000794 <strlen>
c0011394:	c6 84 06 9d 10 00 00 00 	mov    BYTE PTR [esi+eax*1+0x109d],0x0
c001139c:	eb 22                	jmp    c00113c0 <VgaText::receiveKey(unsigned char)+0x70>
c001139e:	0f be c3             	movsx  eax,bl
c00113a1:	52                   	push   edx
c00113a2:	52                   	push   edx
c00113a3:	50                   	push   eax
c00113a4:	56                   	push   esi
c00113a5:	e8 8e fc ff ff       	call   c0011038 <VgaText::putchar(char)>
c00113aa:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c00113ae:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c00113b3:	59                   	pop    ecx
c00113b4:	5d                   	pop    ebp
c00113b5:	8d 44 24 16          	lea    eax,[esp+0x16]
c00113b9:	50                   	push   eax
c00113ba:	57                   	push   edi
c00113bb:	e8 b4 f5 fe ff       	call   c0000974 <strcat>
c00113c0:	83 c4 10             	add    esp,0x10
c00113c3:	80 be 1c 10 00 00 00 	cmp    BYTE PTR [esi+0x101c],0x0
c00113ca:	75 05                	jne    c00113d1 <VgaText::receiveKey(unsigned char)+0x81>
c00113cc:	80 fb 0a             	cmp    bl,0xa
c00113cf:	75 53                	jne    c0011424 <VgaText::receiveKey(unsigned char)+0xd4>
c00113d1:	83 ec 0c             	sub    esp,0xc
c00113d4:	8d 9e 34 11 00 00    	lea    ebx,[esi+0x1134]
c00113da:	53                   	push   ebx
c00113db:	e8 b4 f3 fe ff       	call   c0000794 <strlen>
c00113e0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00113e3:	89 c5                	mov    ebp,eax
c00113e5:	e8 aa f3 fe ff       	call   c0000794 <strlen>
c00113ea:	83 c4 10             	add    esp,0x10
c00113ed:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00113f1:	3d 2c 01 00 00       	cmp    eax,0x12c
c00113f6:	76 10                	jbe    c0011408 <VgaText::receiveKey(unsigned char)+0xb8>
c00113f8:	83 ec 0c             	sub    esp,0xc
c00113fb:	68 1f a0 02 c0       	push   0xc002a01f
c0011400:	e8 e8 8d 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c0011405:	83 c4 10             	add    esp,0x10
c0011408:	50                   	push   eax
c0011409:	50                   	push   eax
c001140a:	57                   	push   edi
c001140b:	53                   	push   ebx
c001140c:	e8 63 f5 fe ff       	call   c0000974 <strcat>
c0011411:	83 c4 0c             	add    esp,0xc
c0011414:	68 96 00 00 00       	push   0x96
c0011419:	6a 00                	push   0x0
c001141b:	57                   	push   edi
c001141c:	e8 57 f3 fe ff       	call   c0000778 <memset>
c0011421:	83 c4 10             	add    esp,0x10
c0011424:	83 ec 0c             	sub    esp,0xc
c0011427:	56                   	push   esi
c0011428:	e8 d5 f9 ff ff       	call   c0010e02 <VgaText::doUpdate()>
c001142d:	83 c4 10             	add    esp,0x10
c0011430:	83 c4 1c             	add    esp,0x1c
c0011433:	5b                   	pop    ebx
c0011434:	5e                   	pop    esi
c0011435:	5f                   	pop    edi
c0011436:	5d                   	pop    ebp
c0011437:	c3                   	ret    

c0011438 <VgaText::write(unsigned long long, void*, int*)>:
c0011438:	55                   	push   ebp
c0011439:	57                   	push   edi
c001143a:	56                   	push   esi
c001143b:	53                   	push   ebx
c001143c:	83 ec 0c             	sub    esp,0xc
c001143f:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011443:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011447:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001144b:	c6 86 1d 10 00 00 01 	mov    BYTE PTR [esi+0x101d],0x1
c0011452:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011455:	39 eb                	cmp    ebx,ebp
c0011457:	74 13                	je     c001146c <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011459:	43                   	inc    ebx
c001145a:	50                   	push   eax
c001145b:	50                   	push   eax
c001145c:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011460:	50                   	push   eax
c0011461:	56                   	push   esi
c0011462:	e8 d1 fb ff ff       	call   c0011038 <VgaText::putchar(char)>
c0011467:	83 c4 10             	add    esp,0x10
c001146a:	eb e9                	jmp    c0011455 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001146c:	83 ec 0c             	sub    esp,0xc
c001146f:	c6 86 1d 10 00 00 00 	mov    BYTE PTR [esi+0x101d],0x0
c0011476:	56                   	push   esi
c0011477:	e8 86 f9 ff ff       	call   c0010e02 <VgaText::doUpdate()>
c001147c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011480:	89 38                	mov    DWORD PTR [eax],edi
c0011482:	83 c4 1c             	add    esp,0x1c
c0011485:	31 c0                	xor    eax,eax
c0011487:	5b                   	pop    ebx
c0011488:	5e                   	pop    esi
c0011489:	5f                   	pop    edi
c001148a:	5d                   	pop    ebp
c001148b:	c3                   	ret    

c001148c <newTerminal(char*)>:
c001148c:	83 ec 28             	sub    esp,0x28
c001148f:	68 60 12 00 00       	push   0x1260
c0011494:	e8 a7 e3 ff ff       	call   c000f840 <malloc>
c0011499:	5a                   	pop    edx
c001149a:	59                   	pop    ecx
c001149b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001149f:	50                   	push   eax
c00114a0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00114a4:	e8 15 fd ff ff       	call   c00111be <VgaText::VgaText(char const*)>
c00114a9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00114ad:	83 c4 2c             	add    esp,0x2c
c00114b0:	c3                   	ret    
c00114b1:	90                   	nop

c00114b2 <TSS::TSS()>:
c00114b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00114b6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00114bd:	90                   	nop
c00114be:	c3                   	ret    
c00114bf:	90                   	nop

c00114c0 <TSS::setESP(unsigned long)>:
c00114c0:	55                   	push   ebp
c00114c1:	89 e5                	mov    ebp,esp
c00114c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00114c9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00114cc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00114cf:	90                   	nop
c00114d0:	5d                   	pop    ebp
c00114d1:	c3                   	ret    

c00114d2 <TSS::flush()>:
c00114d2:	55                   	push   ebp
c00114d3:	89 e5                	mov    ebp,esp
c00114d5:	83 ec 10             	sub    esp,0x10
c00114d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114db:	8b 00                	mov    eax,DWORD PTR [eax]
c00114dd:	83 c8 03             	or     eax,0x3
c00114e0:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00114e4:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00114e8:	66 89 d0             	mov    ax,dx
c00114eb:	0f 00 d8             	ltr    ax
c00114ee:	90                   	nop
c00114ef:	c9                   	leave  
c00114f0:	c3                   	ret    
c00114f1:	90                   	nop

c00114f2 <TSS::setup(unsigned long, unsigned long)>:
c00114f2:	55                   	push   ebp
c00114f3:	89 e5                	mov    ebp,esp
c00114f5:	83 ec 18             	sub    esp,0x18
c00114f8:	83 ec 0c             	sub    esp,0xc
c00114fb:	6a 68                	push   0x68
c00114fd:	e8 3e e3 ff ff       	call   c000f840 <malloc>
c0011502:	83 c4 10             	add    esp,0x10
c0011505:	89 c2                	mov    edx,eax
c0011507:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001150d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011510:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011513:	83 ec 04             	sub    esp,0x4
c0011516:	6a 68                	push   0x68
c0011518:	6a 00                	push   0x0
c001151a:	50                   	push   eax
c001151b:	e8 58 f2 fe ff       	call   c0000778 <memset>
c0011520:	83 c4 10             	add    esp,0x10
c0011523:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011526:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011529:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c001152f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011532:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011535:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c001153b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001153e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011541:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011544:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011547:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001154a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001154d:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011553:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011556:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011559:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001155f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011562:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011565:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001156b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001156e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011571:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011577:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001157a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001157d:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011583:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011586:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011589:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001158f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011592:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011595:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011598:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001159b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001159e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115a1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00115a4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00115a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115aa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ad:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c00115b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115b7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115ba:	0f 20 da             	mov    edx,cr3
c00115bd:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00115c0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00115c3:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c00115c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00115c9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115cc:	83 ec 08             	sub    esp,0x8
c00115cf:	50                   	push   eax
c00115d0:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115d3:	50                   	push   eax
c00115d4:	e8 45 da ff ff       	call   c000f01e <GDTEntry::setBase(unsigned int)>
c00115d9:	83 c4 10             	add    esp,0x10
c00115dc:	83 ec 08             	sub    esp,0x8
c00115df:	6a 68                	push   0x68
c00115e1:	8d 45 ec             	lea    eax,[ebp-0x14]
c00115e4:	50                   	push   eax
c00115e5:	e8 50 da ff ff       	call   c000f03a <GDTEntry::setLimit(unsigned int)>
c00115ea:	83 c4 10             	add    esp,0x10
c00115ed:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00115f1:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115f4:	83 e0 0f             	and    eax,0xf
c00115f7:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00115fa:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00115fd:	83 c8 40             	or     eax,0x40
c0011600:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0011603:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0011608:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001160e:	05 78 01 00 00       	add    eax,0x178
c0011613:	83 ec 04             	sub    esp,0x4
c0011616:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0011619:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001161c:	50                   	push   eax
c001161d:	e8 4c da ff ff       	call   c000f06e <GDT::addEntry(GDTEntry)>
c0011622:	83 c4 10             	add    esp,0x10
c0011625:	89 c2                	mov    edx,eax
c0011627:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001162a:	89 10                	mov    DWORD PTR [eax],edx
c001162c:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0011631:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0011637:	05 78 01 00 00       	add    eax,0x178
c001163c:	83 ec 0c             	sub    esp,0xc
c001163f:	50                   	push   eax
c0011640:	e8 6d da ff ff       	call   c000f0b2 <GDT::flush()>
c0011645:	83 c4 10             	add    esp,0x10
c0011648:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001164b:	8b 00                	mov    eax,DWORD PTR [eax]
c001164d:	83 ec 08             	sub    esp,0x8
c0011650:	50                   	push   eax
c0011651:	68 88 a0 02 c0       	push   0xc002a088
c0011656:	e8 16 15 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001165b:	83 c4 10             	add    esp,0x10
c001165e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011661:	8b 00                	mov    eax,DWORD PTR [eax]
c0011663:	c9                   	leave  
c0011664:	c3                   	ret    
c0011665:	90                   	nop

c0011666 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001166a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001166e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011671:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011676:	75 08                	jne    c0011680 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011678:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001167e:	eb 38                	jmp    c00116b8 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011680:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011685:	75 17                	jne    c001169e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011687:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001168c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001168f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011695:	8b 10                	mov    edx,DWORD PTR [eax]
c0011697:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001169b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001169e:	89 c1                	mov    ecx,eax
c00116a0:	83 e1 fd             	and    ecx,0xfffffffd
c00116a3:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c00116a9:	74 cd                	je     c0011678 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116ab:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00116b0:	83 e0 ef             	and    eax,0xffffffef
c00116b3:	83 f8 08             	cmp    eax,0x8
c00116b6:	76 c0                	jbe    c0011678 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c00116b8:	31 c0                	xor    eax,eax
c00116ba:	c3                   	ret    
c00116bb:	90                   	nop

c00116bc <ReservedFilename::isAtty()>:
c00116bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116c0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00116c3:	31 c0                	xor    eax,eax
c00116c5:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c00116cb:	74 09                	je     c00116d6 <ReservedFilename::isAtty()+0x1a>
c00116cd:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c00116d3:	0f 94 c0             	sete   al
c00116d6:	c3                   	ret    
c00116d7:	90                   	nop

c00116d8 <ReservedFilename::write(unsigned long long, void*, int*)>:
c00116d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00116dc:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00116e0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00116e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00116e7:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00116ec:	75 08                	jne    c00116f6 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00116ee:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00116f4:	eb 3d                	jmp    c0011733 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00116f6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00116fb:	75 17                	jne    c0011714 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00116fd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011702:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0011705:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001170b:	8b 10                	mov    edx,DWORD PTR [eax]
c001170d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011711:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0011714:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011719:	75 04                	jne    c001171f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c001171b:	89 0a                	mov    DWORD PTR [edx],ecx
c001171d:	eb 14                	jmp    c0011733 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c001171f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c0011724:	74 c8                	je     c00116ee <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011726:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c001172b:	83 e0 ef             	and    eax,0xffffffef
c001172e:	83 f8 08             	cmp    eax,0x8
c0011731:	76 bb                	jbe    c00116ee <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c0011733:	31 c0                	xor    eax,eax
c0011735:	c3                   	ret    

c0011736 <UnixFile::getFileDescriptor()>:
c0011736:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001173a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001173d:	c3                   	ret    

c001173e <UnixFile::UnixFile(int)>:
c001173e:	53                   	push   ebx
c001173f:	83 ec 28             	sub    esp,0x28
c0011742:	ba 74 a1 02 c0       	mov    edx,0xc002a174
c0011747:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001174b:	89 10                	mov    DWORD PTR [eax],edx
c001174d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011755:	0f 8f 8c 01 00 00    	jg     c00118e7 <UnixFile::UnixFile(int)+0x1a9>
c001175b:	a1 a0 cf 02 c0       	mov    eax,ds:0xc002cfa0
c0011760:	8d 50 01             	lea    edx,[eax+0x1]
c0011763:	89 15 a0 cf 02 c0    	mov    DWORD PTR ds:0xc002cfa0,edx
c0011769:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001176d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011770:	83 ec 08             	sub    esp,0x8
c0011773:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011777:	68 78 e1 02 c0       	push   0xc002e178
c001177c:	e8 df 6b 01 00       	call   c0028360 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011781:	83 c4 10             	add    esp,0x10
c0011784:	a0 74 e1 02 c0       	mov    al,ds:0xc002e174
c0011789:	83 f0 01             	xor    eax,0x1
c001178c:	84 c0                	test   al,al
c001178e:	0f 84 54 01 00 00    	je     c00118e8 <UnixFile::UnixFile(int)+0x1aa>
c0011794:	c6 05 74 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e174,0x1
c001179b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c00117a3:	83 ec 0c             	sub    esp,0xc
c00117a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00117aa:	e8 91 e0 ff ff       	call   c000f840 <malloc>
c00117af:	83 c4 10             	add    esp,0x10
c00117b2:	89 c3                	mov    ebx,eax
c00117b4:	83 ec 08             	sub    esp,0x8
c00117b7:	68 03 ff ff 0f       	push   0xfffff03
c00117bc:	53                   	push   ebx
c00117bd:	e8 2c 01 00 00       	call   c00118ee <ReservedFilename::ReservedFilename(int)>
c00117c2:	83 c4 10             	add    esp,0x10
c00117c5:	89 1d 6c e1 02 c0    	mov    DWORD PTR ds:0xc002e16c,ebx
c00117cb:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c00117d3:	83 ec 0c             	sub    esp,0xc
c00117d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117da:	e8 61 e0 ff ff       	call   c000f840 <malloc>
c00117df:	83 c4 10             	add    esp,0x10
c00117e2:	89 c3                	mov    ebx,eax
c00117e4:	83 ec 08             	sub    esp,0x8
c00117e7:	68 01 ff ff 0f       	push   0xfffff01
c00117ec:	53                   	push   ebx
c00117ed:	e8 fc 00 00 00       	call   c00118ee <ReservedFilename::ReservedFilename(int)>
c00117f2:	83 c4 10             	add    esp,0x10
c00117f5:	89 1d 70 e1 02 c0    	mov    DWORD PTR ds:0xc002e170,ebx
c00117fb:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0011803:	83 ec 0c             	sub    esp,0xc
c0011806:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001180a:	e8 31 e0 ff ff       	call   c000f840 <malloc>
c001180f:	83 c4 10             	add    esp,0x10
c0011812:	89 c3                	mov    ebx,eax
c0011814:	83 ec 08             	sub    esp,0x8
c0011817:	68 00 ff ff 0f       	push   0xfffff00
c001181c:	53                   	push   ebx
c001181d:	e8 cc 00 00 00       	call   c00118ee <ReservedFilename::ReservedFilename(int)>
c0011822:	83 c4 10             	add    esp,0x10
c0011825:	89 1d 64 e1 02 c0    	mov    DWORD PTR ds:0xc002e164,ebx
c001182b:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c0011833:	83 ec 0c             	sub    esp,0xc
c0011836:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001183a:	e8 01 e0 ff ff       	call   c000f840 <malloc>
c001183f:	83 c4 10             	add    esp,0x10
c0011842:	89 c3                	mov    ebx,eax
c0011844:	83 ec 08             	sub    esp,0x8
c0011847:	68 02 ff ff 0f       	push   0xfffff02
c001184c:	53                   	push   ebx
c001184d:	e8 9c 00 00 00       	call   c00118ee <ReservedFilename::ReservedFilename(int)>
c0011852:	83 c4 10             	add    esp,0x10
c0011855:	89 1d 68 e1 02 c0    	mov    DWORD PTR ds:0xc002e168,ebx
c001185b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011863:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011868:	7f 7e                	jg     c00118e8 <UnixFile::UnixFile(int)+0x1aa>
c001186a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011872:	83 ec 0c             	sub    esp,0xc
c0011875:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011879:	e8 c2 df ff ff       	call   c000f840 <malloc>
c001187e:	83 c4 10             	add    esp,0x10
c0011881:	89 c3                	mov    ebx,eax
c0011883:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011887:	05 10 ff ff 0f       	add    eax,0xfffff10
c001188c:	83 ec 08             	sub    esp,0x8
c001188f:	50                   	push   eax
c0011890:	53                   	push   ebx
c0011891:	e8 58 00 00 00       	call   c00118ee <ReservedFilename::ReservedFilename(int)>
c0011896:	83 c4 10             	add    esp,0x10
c0011899:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001189d:	89 1c 85 40 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1ec0],ebx
c00118a4:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c00118ac:	83 ec 0c             	sub    esp,0xc
c00118af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00118b3:	e8 88 df ff ff       	call   c000f840 <malloc>
c00118b8:	83 c4 10             	add    esp,0x10
c00118bb:	89 c3                	mov    ebx,eax
c00118bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118c1:	05 20 ff ff 0f       	add    eax,0xfffff20
c00118c6:	83 ec 08             	sub    esp,0x8
c00118c9:	50                   	push   eax
c00118ca:	53                   	push   ebx
c00118cb:	e8 1e 00 00 00       	call   c00118ee <ReservedFilename::ReservedFilename(int)>
c00118d0:	83 c4 10             	add    esp,0x10
c00118d3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00118d7:	89 1c 85 00 e1 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1f00],ebx
c00118de:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00118e2:	e9 7c ff ff ff       	jmp    c0011863 <UnixFile::UnixFile(int)+0x125>
c00118e7:	90                   	nop
c00118e8:	83 c4 28             	add    esp,0x28
c00118eb:	5b                   	pop    ebx
c00118ec:	c3                   	ret    
c00118ed:	90                   	nop

c00118ee <ReservedFilename::ReservedFilename(int)>:
c00118ee:	83 ec 0c             	sub    esp,0xc
c00118f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118f5:	83 ec 08             	sub    esp,0x8
c00118f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118fc:	50                   	push   eax
c00118fd:	e8 3c fe ff ff       	call   c001173e <UnixFile::UnixFile(int)>
c0011902:	83 c4 10             	add    esp,0x10
c0011905:	ba 90 a1 02 c0       	mov    edx,0xc002a190
c001190a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001190e:	89 10                	mov    DWORD PTR [eax],edx
c0011910:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011914:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0011918:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001191b:	90                   	nop
c001191c:	83 c4 0c             	add    esp,0xc
c001191f:	c3                   	ret    

c0011920 <UnixFile::~UnixFile()>:
c0011920:	83 ec 1c             	sub    esp,0x1c
c0011923:	ba 74 a1 02 c0       	mov    edx,0xc002a174
c0011928:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001192c:	89 10                	mov    DWORD PTR [eax],edx
c001192e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0011932:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011935:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c001193a:	7f 73                	jg     c00119af <UnixFile::~UnixFile()+0x8f>
c001193c:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011944:	83 ec 0c             	sub    esp,0xc
c0011947:	68 78 e1 02 c0       	push   0xc002e178
c001194c:	e8 e3 6a 01 00       	call   c0028434 <LinkedList<UnixFile>::getFirstElement()>
c0011951:	83 c4 10             	add    esp,0x10
c0011954:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011958:	83 ec 0c             	sub    esp,0xc
c001195b:	68 78 e1 02 c0       	push   0xc002e178
c0011960:	e8 d7 6a 01 00       	call   c002843c <LinkedList<UnixFile>::removeFirst()>
c0011965:	83 c4 10             	add    esp,0x10
c0011968:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001196c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011970:	74 40                	je     c00119b2 <UnixFile::~UnixFile()+0x92>
c0011972:	83 ec 08             	sub    esp,0x8
c0011975:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011979:	68 78 e1 02 c0       	push   0xc002e178
c001197e:	e8 dd 69 01 00       	call   c0028360 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011983:	83 c4 10             	add    esp,0x10
c0011986:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001198a:	8d 50 01             	lea    edx,[eax+0x1]
c001198d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011991:	3d 88 13 00 00       	cmp    eax,0x1388
c0011996:	0f 94 c0             	sete   al
c0011999:	84 c0                	test   al,al
c001199b:	74 a7                	je     c0011944 <UnixFile::~UnixFile()+0x24>
c001199d:	83 ec 0c             	sub    esp,0xc
c00119a0:	68 4c a1 02 c0       	push   0xc002a14c
c00119a5:	e8 43 88 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c00119aa:	83 c4 10             	add    esp,0x10
c00119ad:	eb 95                	jmp    c0011944 <UnixFile::~UnixFile()+0x24>
c00119af:	90                   	nop
c00119b0:	eb 01                	jmp    c00119b3 <UnixFile::~UnixFile()+0x93>
c00119b2:	90                   	nop
c00119b3:	90                   	nop
c00119b4:	83 c4 1c             	add    esp,0x1c
c00119b7:	c3                   	ret    

c00119b8 <UnixFile::~UnixFile()>:
c00119b8:	83 ec 0c             	sub    esp,0xc
c00119bb:	83 ec 0c             	sub    esp,0xc
c00119be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119c2:	e8 59 ff ff ff       	call   c0011920 <UnixFile::~UnixFile()>
c00119c7:	83 c4 10             	add    esp,0x10
c00119ca:	83 ec 08             	sub    esp,0x8
c00119cd:	6a 0c                	push   0xc
c00119cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00119d3:	e8 b9 10 00 00       	call   c0012a91 <operator delete(void*, unsigned long)>
c00119d8:	83 c4 10             	add    esp,0x10
c00119db:	83 c4 0c             	add    esp,0xc
c00119de:	c3                   	ret    
c00119df:	90                   	nop

c00119e0 <ReservedFilename::~ReservedFilename()>:
c00119e0:	83 ec 0c             	sub    esp,0xc
c00119e3:	ba 90 a1 02 c0       	mov    edx,0xc002a190
c00119e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119ec:	89 10                	mov    DWORD PTR [eax],edx
c00119ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00119f2:	83 ec 0c             	sub    esp,0xc
c00119f5:	50                   	push   eax
c00119f6:	e8 25 ff ff ff       	call   c0011920 <UnixFile::~UnixFile()>
c00119fb:	83 c4 10             	add    esp,0x10
c00119fe:	90                   	nop
c00119ff:	83 c4 0c             	add    esp,0xc
c0011a02:	c3                   	ret    
c0011a03:	90                   	nop

c0011a04 <ReservedFilename::~ReservedFilename()>:
c0011a04:	83 ec 0c             	sub    esp,0xc
c0011a07:	83 ec 0c             	sub    esp,0xc
c0011a0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a0e:	e8 cd ff ff ff       	call   c00119e0 <ReservedFilename::~ReservedFilename()>
c0011a13:	83 c4 10             	add    esp,0x10
c0011a16:	83 ec 08             	sub    esp,0x8
c0011a19:	6a 0c                	push   0xc
c0011a1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011a1f:	e8 6d 10 00 00       	call   c0012a91 <operator delete(void*, unsigned long)>
c0011a24:	83 c4 10             	add    esp,0x10
c0011a27:	83 c4 0c             	add    esp,0xc
c0011a2a:	c3                   	ret    

c0011a2b <getFromFileDescriptor(int)>:
c0011a2b:	53                   	push   ebx
c0011a2c:	83 ec 08             	sub    esp,0x8
c0011a2f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011a33:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c0011a39:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c0011a3f:	7f 2c                	jg     c0011a6d <getFromFileDescriptor(int)+0x42>
c0011a41:	83 ec 0c             	sub    esp,0xc
c0011a44:	68 78 e1 02 c0       	push   0xc002e178
c0011a49:	e8 e6 69 01 00       	call   c0028434 <LinkedList<UnixFile>::getFirstElement()>
c0011a4e:	83 c4 10             	add    esp,0x10
c0011a51:	85 c0                	test   eax,eax
c0011a53:	75 04                	jne    c0011a59 <getFromFileDescriptor(int)+0x2e>
c0011a55:	31 c0                	xor    eax,eax
c0011a57:	eb 6e                	jmp    c0011ac7 <getFromFileDescriptor(int)+0x9c>
c0011a59:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c0011a5c:	74 69                	je     c0011ac7 <getFromFileDescriptor(int)+0x9c>
c0011a5e:	52                   	push   edx
c0011a5f:	52                   	push   edx
c0011a60:	50                   	push   eax
c0011a61:	68 78 e1 02 c0       	push   0xc002e178
c0011a66:	e8 73 6a 01 00       	call   c00284de <LinkedList<UnixFile>::getNext(UnixFile*)>
c0011a6b:	eb e1                	jmp    c0011a4e <getFromFileDescriptor(int)+0x23>
c0011a6d:	a1 6c e1 02 c0       	mov    eax,ds:0xc002e16c
c0011a72:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011a78:	74 4d                	je     c0011ac7 <getFromFileDescriptor(int)+0x9c>
c0011a7a:	a1 70 e1 02 c0       	mov    eax,ds:0xc002e170
c0011a7f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011a85:	74 40                	je     c0011ac7 <getFromFileDescriptor(int)+0x9c>
c0011a87:	a1 68 e1 02 c0       	mov    eax,ds:0xc002e168
c0011a8c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011a92:	74 33                	je     c0011ac7 <getFromFileDescriptor(int)+0x9c>
c0011a94:	a1 64 e1 02 c0       	mov    eax,ds:0xc002e164
c0011a99:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011a9f:	74 26                	je     c0011ac7 <getFromFileDescriptor(int)+0x9c>
c0011aa1:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011aa7:	83 f8 08             	cmp    eax,0x8
c0011aaa:	77 09                	ja     c0011ab5 <getFromFileDescriptor(int)+0x8a>
c0011aac:	8b 04 85 40 e1 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1ec0]
c0011ab3:	eb 12                	jmp    c0011ac7 <getFromFileDescriptor(int)+0x9c>
c0011ab5:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0011abb:	83 fb 08             	cmp    ebx,0x8
c0011abe:	77 95                	ja     c0011a55 <getFromFileDescriptor(int)+0x2a>
c0011ac0:	8b 04 9d 00 e1 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd1f00]
c0011ac7:	83 c4 08             	add    esp,0x8
c0011aca:	5b                   	pop    ebx
c0011acb:	c3                   	ret    

c0011acc <__static_initialization_and_destruction_0(int, int)>:
c0011acc:	83 ec 0c             	sub    esp,0xc
c0011acf:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011ad4:	75 34                	jne    c0011b0a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ad6:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0011ade:	75 2a                	jne    c0011b0a <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011ae0:	83 ec 0c             	sub    esp,0xc
c0011ae3:	68 78 e1 02 c0       	push   0xc002e178
c0011ae8:	e8 1b 68 01 00       	call   c0028308 <LinkedList<UnixFile>::LinkedList()>
c0011aed:	83 c4 10             	add    esp,0x10
c0011af0:	83 ec 04             	sub    esp,0x4
c0011af3:	68 1c cf 02 c0       	push   0xc002cf1c
c0011af8:	68 78 e1 02 c0       	push   0xc002e178
c0011afd:	68 06 83 02 c0       	push   0xc0028306
c0011b02:	e8 04 0f 00 00       	call   c0012a0b <__cxa_atexit>
c0011b07:	83 c4 10             	add    esp,0x10
c0011b0a:	90                   	nop
c0011b0b:	83 c4 0c             	add    esp,0xc
c0011b0e:	c3                   	ret    

c0011b0f <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0011b0f:	83 ec 0c             	sub    esp,0xc
c0011b12:	83 ec 08             	sub    esp,0x8
c0011b15:	68 ff ff 00 00       	push   0xffff
c0011b1a:	6a 01                	push   0x1
c0011b1c:	e8 ab ff ff ff       	call   c0011acc <__static_initialization_and_destruction_0(int, int)>
c0011b21:	83 c4 10             	add    esp,0x10
c0011b24:	83 c4 0c             	add    esp,0xc
c0011b27:	c3                   	ret    

c0011b28 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c0011b28:	53                   	push   ebx
c0011b29:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0011b2d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0011b31:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c0011b37:	89 c8                	mov    eax,ecx
c0011b39:	d1 e8                	shr    eax,1
c0011b3b:	03 05 a8 cf 02 c0    	add    eax,DWORD PTR ds:0xc002cfa8
c0011b41:	83 e1 01             	and    ecx,0x1
c0011b44:	8a 10                	mov    dl,BYTE PTR [eax]
c0011b46:	75 09                	jne    c0011b51 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011b48:	83 e2 f0             	and    edx,0xfffffff0
c0011b4b:	09 da                	or     edx,ebx
c0011b4d:	88 10                	mov    BYTE PTR [eax],dl
c0011b4f:	5b                   	pop    ebx
c0011b50:	c3                   	ret    
c0011b51:	c1 e3 04             	shl    ebx,0x4
c0011b54:	83 e2 0f             	and    edx,0xf
c0011b57:	09 da                	or     edx,ebx
c0011b59:	88 10                	mov    BYTE PTR [eax],dl
c0011b5b:	5b                   	pop    ebx
c0011b5c:	c3                   	ret    

c0011b5d <Virt::getPageState(unsigned long)>:
c0011b5d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b61:	8b 0d a8 cf 02 c0    	mov    ecx,DWORD PTR ds:0xc002cfa8
c0011b67:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011b6d:	89 d0                	mov    eax,edx
c0011b6f:	d1 e8                	shr    eax,1
c0011b71:	83 e2 01             	and    edx,0x1
c0011b74:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011b77:	75 04                	jne    c0011b7d <Virt::getPageState(unsigned long)+0x20>
c0011b79:	83 e0 0f             	and    eax,0xf
c0011b7c:	c3                   	ret    
c0011b7d:	c0 e8 04             	shr    al,0x4
c0011b80:	c3                   	ret    

c0011b81 <Virt::allocateKernelVirtualPages(int)>:
c0011b81:	55                   	push   ebp
c0011b82:	31 ed                	xor    ebp,ebp
c0011b84:	57                   	push   edi
c0011b85:	56                   	push   esi
c0011b86:	53                   	push   ebx
c0011b87:	31 db                	xor    ebx,ebx
c0011b89:	83 ec 1c             	sub    esp,0x1c
c0011b8c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011b90:	8b 3d a4 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cfa4
c0011b96:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011b9b:	57                   	push   edi
c0011b9c:	e8 bc ff ff ff       	call   c0011b5d <Virt::getPageState(unsigned long)>
c0011ba1:	5a                   	pop    edx
c0011ba2:	84 c0                	test   al,al
c0011ba4:	75 3a                	jne    c0011be0 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011ba6:	85 db                	test   ebx,ebx
c0011ba8:	75 02                	jne    c0011bac <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011baa:	89 fd                	mov    ebp,edi
c0011bac:	43                   	inc    ebx
c0011bad:	39 f3                	cmp    ebx,esi
c0011baf:	74 5a                	je     c0011c0b <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011bb1:	47                   	inc    edi
c0011bb2:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011bb8:	76 31                	jbe    c0011beb <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011bba:	c7 05 a4 cf 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002cfa4,0xc8000
c0011bc4:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011bc9:	75 28                	jne    c0011bf3 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011bcb:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011bd0:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011bd5:	57                   	push   edi
c0011bd6:	e8 82 ff ff ff       	call   c0011b5d <Virt::getPageState(unsigned long)>
c0011bdb:	5a                   	pop    edx
c0011bdc:	84 c0                	test   al,al
c0011bde:	74 c6                	je     c0011ba6 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011be0:	31 db                	xor    ebx,ebx
c0011be2:	47                   	inc    edi
c0011be3:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011be9:	77 cf                	ja     c0011bba <Virt::allocateKernelVirtualPages(int)+0x39>
c0011beb:	89 3d a4 cf 02 c0    	mov    DWORD PTR ds:0xc002cfa4,edi
c0011bf1:	eb a8                	jmp    c0011b9b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011bf3:	83 ec 0c             	sub    esp,0xc
c0011bf6:	68 a4 a1 02 c0       	push   0xc002a1a4
c0011bfb:	e8 ed 85 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c0011c00:	8b 3d a4 cf 02 c0    	mov    edi,DWORD PTR ds:0xc002cfa4
c0011c06:	83 c4 10             	add    esp,0x10
c0011c09:	eb 90                	jmp    c0011b9b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011c0b:	89 2d a4 cf 02 c0    	mov    DWORD PTR ds:0xc002cfa4,ebp
c0011c11:	4b                   	dec    ebx
c0011c12:	74 5f                	je     c0011c73 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011c14:	85 f6                	test   esi,esi
c0011c16:	74 3d                	je     c0011c55 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c18:	89 e8                	mov    eax,ebp
c0011c1a:	31 db                	xor    ebx,ebx
c0011c1c:	8d 7e ff             	lea    edi,[esi-0x1]
c0011c1f:	eb 14                	jmp    c0011c35 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011c21:	6a 01                	push   0x1
c0011c23:	43                   	inc    ebx
c0011c24:	50                   	push   eax
c0011c25:	e8 fe fe ff ff       	call   c0011b28 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c2a:	58                   	pop    eax
c0011c2b:	39 f3                	cmp    ebx,esi
c0011c2d:	5a                   	pop    edx
c0011c2e:	74 25                	je     c0011c55 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011c30:	a1 a4 cf 02 c0       	mov    eax,ds:0xc002cfa4
c0011c35:	8d 50 01             	lea    edx,[eax+0x1]
c0011c38:	85 db                	test   ebx,ebx
c0011c3a:	89 15 a4 cf 02 c0    	mov    DWORD PTR ds:0xc002cfa4,edx
c0011c40:	74 20                	je     c0011c62 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011c42:	39 df                	cmp    edi,ebx
c0011c44:	75 db                	jne    c0011c21 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011c46:	6a 03                	push   0x3
c0011c48:	43                   	inc    ebx
c0011c49:	50                   	push   eax
c0011c4a:	e8 d9 fe ff ff       	call   c0011b28 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c4f:	59                   	pop    ecx
c0011c50:	39 f3                	cmp    ebx,esi
c0011c52:	58                   	pop    eax
c0011c53:	75 db                	jne    c0011c30 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c55:	83 c4 1c             	add    esp,0x1c
c0011c58:	89 e8                	mov    eax,ebp
c0011c5a:	5b                   	pop    ebx
c0011c5b:	c1 e0 0c             	shl    eax,0xc
c0011c5e:	5e                   	pop    esi
c0011c5f:	5f                   	pop    edi
c0011c60:	5d                   	pop    ebp
c0011c61:	c3                   	ret    
c0011c62:	6a 02                	push   0x2
c0011c64:	bb 01 00 00 00       	mov    ebx,0x1
c0011c69:	50                   	push   eax
c0011c6a:	e8 b9 fe ff ff       	call   c0011b28 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c6f:	58                   	pop    eax
c0011c70:	5a                   	pop    edx
c0011c71:	eb bd                	jmp    c0011c30 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011c73:	6a 04                	push   0x4
c0011c75:	8d 45 01             	lea    eax,[ebp+0x1]
c0011c78:	55                   	push   ebp
c0011c79:	a3 a4 cf 02 c0       	mov    ds:0xc002cfa4,eax
c0011c7e:	e8 a5 fe ff ff       	call   c0011b28 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c83:	59                   	pop    ecx
c0011c84:	89 e8                	mov    eax,ebp
c0011c86:	5b                   	pop    ebx
c0011c87:	c1 e0 0c             	shl    eax,0xc
c0011c8a:	83 c4 1c             	add    esp,0x1c
c0011c8d:	5b                   	pop    ebx
c0011c8e:	5e                   	pop    esi
c0011c8f:	5f                   	pop    edi
c0011c90:	5d                   	pop    ebp
c0011c91:	c3                   	ret    

c0011c92 <Virt::virtualMemorySetup()>:
c0011c92:	53                   	push   ebx
c0011c93:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c98:	83 ec 08             	sub    esp,0x8
c0011c9b:	6a 0f                	push   0xf
c0011c9d:	53                   	push   ebx
c0011c9e:	43                   	inc    ebx
c0011c9f:	e8 84 fe ff ff       	call   c0011b28 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ca4:	59                   	pop    ecx
c0011ca5:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011cab:	58                   	pop    eax
c0011cac:	75 ed                	jne    c0011c9b <Virt::virtualMemorySetup()+0x9>
c0011cae:	83 ec 08             	sub    esp,0x8
c0011cb1:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011cb6:	68 00 00 00 c8       	push   0xc8000000
c0011cbb:	68 2b a3 02 c0       	push   0xc002a32b
c0011cc0:	e8 ac 0e 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0011cc5:	58                   	pop    eax
c0011cc6:	5a                   	pop    edx
c0011cc7:	68 00 f0 ff ef       	push   0xeffff000
c0011ccc:	68 3f a3 02 c0       	push   0xc002a33f
c0011cd1:	e8 9b 0e 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0011cd6:	83 c4 10             	add    esp,0x10
c0011cd9:	83 ec 08             	sub    esp,0x8
c0011cdc:	6a 00                	push   0x0
c0011cde:	53                   	push   ebx
c0011cdf:	43                   	inc    ebx
c0011ce0:	e8 43 fe ff ff       	call   c0011b28 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011ce5:	83 c4 10             	add    esp,0x10
c0011ce8:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011cee:	75 e9                	jne    c0011cd9 <Virt::virtualMemorySetup()+0x47>
c0011cf0:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011cf5:	83 ec 08             	sub    esp,0x8
c0011cf8:	6a 0f                	push   0xf
c0011cfa:	53                   	push   ebx
c0011cfb:	43                   	inc    ebx
c0011cfc:	e8 27 fe ff ff       	call   c0011b28 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011d01:	83 c4 10             	add    esp,0x10
c0011d04:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011d0a:	75 e9                	jne    c0011cf5 <Virt::virtualMemorySetup()+0x63>
c0011d0c:	83 c4 08             	add    esp,0x8
c0011d0f:	5b                   	pop    ebx
c0011d10:	c3                   	ret    

c0011d11 <Virt::getAKernelVAS()>:
c0011d11:	a1 84 e1 02 c0       	mov    eax,ds:0xc002e184
c0011d16:	c3                   	ret    

c0011d17 <Virt::setupPageSwapping(int)>:
c0011d17:	57                   	push   edi
c0011d18:	56                   	push   esi
c0011d19:	53                   	push   ebx
c0011d1a:	83 ec 1c             	sub    esp,0x1c
c0011d1d:	68 14 01 00 00       	push   0x114
c0011d22:	e8 19 db ff ff       	call   c000f840 <malloc>
c0011d27:	83 c4 0c             	add    esp,0xc
c0011d2a:	89 c6                	mov    esi,eax
c0011d2c:	ff 35 74 15 03 c0    	push   DWORD PTR ds:0xc0031574
c0011d32:	68 53 a3 02 c0       	push   0xc002a353
c0011d37:	50                   	push   eax
c0011d38:	e8 8d 13 00 00       	call   c00130ca <File::File(char const*, Process*)>
c0011d3d:	89 34 24             	mov    DWORD PTR [esp],esi
c0011d40:	e8 61 15 00 00       	call   c00132a6 <File::unlink()>
c0011d45:	58                   	pop    eax
c0011d46:	5a                   	pop    edx
c0011d47:	6a 12                	push   0x12
c0011d49:	56                   	push   esi
c0011d4a:	e8 df 13 00 00       	call   c001312e <File::open(FileOpenMode)>
c0011d4f:	83 c4 10             	add    esp,0x10
c0011d52:	85 c0                	test   eax,eax
c0011d54:	0f 85 ca 00 00 00    	jne    c0011e24 <Virt::setupPageSwapping(int)+0x10d>
c0011d5a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011d5e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011d66:	c1 e3 08             	shl    ebx,0x8
c0011d69:	83 ec 0c             	sub    esp,0xc
c0011d6c:	68 00 00 01 00       	push   0x10000
c0011d71:	e8 ca da ff ff       	call   c000f840 <malloc>
c0011d76:	83 c4 0c             	add    esp,0xc
c0011d79:	89 c7                	mov    edi,eax
c0011d7b:	68 00 00 01 00       	push   0x10000
c0011d80:	6a 00                	push   0x0
c0011d82:	50                   	push   eax
c0011d83:	e8 f0 e9 fe ff       	call   c0000778 <memset>
c0011d88:	83 c4 10             	add    esp,0x10
c0011d8b:	85 db                	test   ebx,ebx
c0011d8d:	79 03                	jns    c0011d92 <Virt::setupPageSwapping(int)+0x7b>
c0011d8f:	83 c3 0f             	add    ebx,0xf
c0011d92:	c1 fb 04             	sar    ebx,0x4
c0011d95:	4b                   	dec    ebx
c0011d96:	83 fb ff             	cmp    ebx,0xffffffff
c0011d99:	74 4b                	je     c0011de6 <Virt::setupPageSwapping(int)+0xcf>
c0011d9b:	83 ec 0c             	sub    esp,0xc
c0011d9e:	8b 06                	mov    eax,DWORD PTR [esi]
c0011da0:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011da4:	52                   	push   edx
c0011da5:	57                   	push   edi
c0011da6:	6a 00                	push   0x0
c0011da8:	68 00 00 01 00       	push   0x10000
c0011dad:	56                   	push   esi
c0011dae:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011db1:	83 c4 20             	add    esp,0x20
c0011db4:	85 c0                	test   eax,eax
c0011db6:	75 59                	jne    c0011e11 <Virt::setupPageSwapping(int)+0xfa>
c0011db8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011dbc:	3d 00 00 01 00       	cmp    eax,0x10000
c0011dc1:	74 d2                	je     c0011d95 <Virt::setupPageSwapping(int)+0x7e>
c0011dc3:	83 ec 08             	sub    esp,0x8
c0011dc6:	4b                   	dec    ebx
c0011dc7:	50                   	push   eax
c0011dc8:	68 a6 a3 02 c0       	push   0xc002a3a6
c0011dcd:	e8 9f 0d 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0011dd2:	c7 04 24 af a3 02 c0 	mov    DWORD PTR [esp],0xc002a3af
c0011dd9:	e8 0f 84 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c0011dde:	83 c4 10             	add    esp,0x10
c0011de1:	83 fb ff             	cmp    ebx,0xffffffff
c0011de4:	75 b5                	jne    c0011d9b <Virt::setupPageSwapping(int)+0x84>
c0011de6:	83 ec 0c             	sub    esp,0xc
c0011de9:	56                   	push   esi
c0011dea:	e8 9d 13 00 00       	call   c001318c <File::close()>
c0011def:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011df2:	e8 69 da ff ff       	call   c000f860 <rfree>
c0011df7:	83 c4 10             	add    esp,0x10
c0011dfa:	85 f6                	test   esi,esi
c0011dfc:	74 0c                	je     c0011e0a <Virt::setupPageSwapping(int)+0xf3>
c0011dfe:	83 ec 0c             	sub    esp,0xc
c0011e01:	8b 06                	mov    eax,DWORD PTR [esi]
c0011e03:	56                   	push   esi
c0011e04:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e07:	83 c4 10             	add    esp,0x10
c0011e0a:	83 c4 10             	add    esp,0x10
c0011e0d:	5b                   	pop    ebx
c0011e0e:	5e                   	pop    esi
c0011e0f:	5f                   	pop    edi
c0011e10:	c3                   	ret    
c0011e11:	83 ec 08             	sub    esp,0x8
c0011e14:	50                   	push   eax
c0011e15:	68 8e a3 02 c0       	push   0xc002a38e
c0011e1a:	e8 52 0d 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0011e1f:	83 c4 10             	add    esp,0x10
c0011e22:	eb 94                	jmp    c0011db8 <Virt::setupPageSwapping(int)+0xa1>
c0011e24:	83 ec 08             	sub    esp,0x8
c0011e27:	50                   	push   eax
c0011e28:	68 6a a3 02 c0       	push   0xc002a36a
c0011e2d:	e8 3f 0d 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0011e32:	c7 04 24 73 a3 02 c0 	mov    DWORD PTR [esp],0xc002a373
c0011e39:	e8 af 83 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c0011e3e:	83 c4 10             	add    esp,0x10
c0011e41:	e9 14 ff ff ff       	jmp    c0011d5a <Virt::setupPageSwapping(int)+0x43>

c0011e46 <VAS::VAS()>:
c0011e46:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e4a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e51:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e55:	a3 84 e1 02 c0       	mov    ds:0xc002e184,eax
c0011e5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e5e:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e66:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e69:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e6d:	c7 40 08 00 10 00 c2 	mov    DWORD PTR [eax+0x8],0xc2001000
c0011e74:	90                   	nop
c0011e75:	c3                   	ret    

c0011e76 <VAS::VAS(VAS*)>:
c0011e76:	83 ec 0c             	sub    esp,0xc
c0011e79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e7d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e84:	83 ec 0c             	sub    esp,0xc
c0011e87:	68 c4 a1 02 c0       	push   0xc002a1c4
c0011e8c:	e8 5c 83 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c0011e91:	83 c4 10             	add    esp,0x10
c0011e94:	90                   	nop
c0011e95:	83 c4 0c             	add    esp,0xc
c0011e98:	c3                   	ret    
c0011e99:	90                   	nop

c0011e9a <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011e9a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011e9e:	89 c2                	mov    edx,eax
c0011ea0:	c1 e8 0a             	shr    eax,0xa
c0011ea3:	c1 ea 16             	shr    edx,0x16
c0011ea6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011eab:	19 c9                	sbb    ecx,ecx
c0011ead:	c1 e2 0c             	shl    edx,0xc
c0011eb0:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011eb6:	25 fc 0f 00 00       	and    eax,0xffc
c0011ebb:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011ec2:	01 d0                	add    eax,edx
c0011ec4:	c3                   	ret    
c0011ec5:	90                   	nop

c0011ec6 <VAS::getPageTableEntry(unsigned long)>:
c0011ec6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011eca:	89 ca                	mov    edx,ecx
c0011ecc:	c1 e9 0a             	shr    ecx,0xa
c0011ecf:	c1 ea 16             	shr    edx,0x16
c0011ed2:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011ed8:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011ede:	c1 e0 0c             	shl    eax,0xc
c0011ee1:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011ee4:	c3                   	ret    

c0011ee5 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011ee5:	57                   	push   edi
c0011ee6:	56                   	push   esi
c0011ee7:	be 01 00 00 00       	mov    esi,0x1
c0011eec:	53                   	push   ebx
c0011eed:	83 ec 10             	sub    esp,0x10
c0011ef0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011ef4:	c1 eb 0c             	shr    ebx,0xc
c0011ef7:	eb 3f                	jmp    c0011f38 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011ef9:	e8 13 fe ff ff       	call   c0011d11 <Virt::getAKernelVAS()>
c0011efe:	83 ec 08             	sub    esp,0x8
c0011f01:	57                   	push   edi
c0011f02:	50                   	push   eax
c0011f03:	e8 be ff ff ff       	call   c0011ec6 <VAS::getPageTableEntry(unsigned long)>
c0011f08:	83 c4 10             	add    esp,0x10
c0011f0b:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f0d:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f11:	f6 c4 04             	test   ah,0x4
c0011f14:	75 5f                	jne    c0011f75 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011f16:	80 fa 04             	cmp    dl,0x4
c0011f19:	74 78                	je     c0011f93 <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011f1b:	80 fa 02             	cmp    dl,0x2
c0011f1e:	0f 84 88 00 00 00    	je     c0011fac <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011f24:	80 fa 03             	cmp    dl,0x3
c0011f27:	0f 84 ad 00 00 00    	je     c0011fda <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011f2d:	fe ca                	dec    dl
c0011f2f:	0f 84 92 00 00 00    	je     c0011fc7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f35:	43                   	inc    ebx
c0011f36:	31 f6                	xor    esi,esi
c0011f38:	53                   	push   ebx
c0011f39:	e8 1f fc ff ff       	call   c0011b5d <Virt::getPageState(unsigned long)>
c0011f3e:	5f                   	pop    edi
c0011f3f:	89 df                	mov    edi,ebx
c0011f41:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f45:	c1 e7 0c             	shl    edi,0xc
c0011f48:	84 c0                	test   al,al
c0011f4a:	75 ad                	jne    c0011ef9 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011f4c:	83 ec 0c             	sub    esp,0xc
c0011f4f:	68 b5 a3 02 c0       	push   0xc002a3b5
c0011f54:	e8 94 82 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c0011f59:	e8 b3 fd ff ff       	call   c0011d11 <Virt::getAKernelVAS()>
c0011f5e:	5a                   	pop    edx
c0011f5f:	59                   	pop    ecx
c0011f60:	57                   	push   edi
c0011f61:	50                   	push   eax
c0011f62:	e8 5f ff ff ff       	call   c0011ec6 <VAS::getPageTableEntry(unsigned long)>
c0011f67:	83 c4 10             	add    esp,0x10
c0011f6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f6c:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f70:	f6 c4 04             	test   ah,0x4
c0011f73:	74 c0                	je     c0011f35 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f75:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f79:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f7e:	83 ec 0c             	sub    esp,0xc
c0011f81:	50                   	push   eax
c0011f82:	e8 24 df ff ff       	call   c000feab <Phys::freePage(unsigned long)>
c0011f87:	83 c4 10             	add    esp,0x10
c0011f8a:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f8e:	80 fa 04             	cmp    dl,0x4
c0011f91:	75 88                	jne    c0011f1b <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011f93:	89 f0                	mov    eax,esi
c0011f95:	84 c0                	test   al,al
c0011f97:	75 47                	jne    c0011fe0 <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011f99:	c7 44 24 20 e8 a1 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a1e8
c0011fa1:	83 c4 10             	add    esp,0x10
c0011fa4:	5b                   	pop    ebx
c0011fa5:	5e                   	pop    esi
c0011fa6:	5f                   	pop    edi
c0011fa7:	e9 41 82 00 00       	jmp    c001a1ed <Krnl::panic(char const*)>
c0011fac:	89 f0                	mov    eax,esi
c0011fae:	84 c0                	test   al,al
c0011fb0:	75 15                	jne    c0011fc7 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011fb2:	83 ec 0c             	sub    esp,0xc
c0011fb5:	68 d1 a3 02 c0       	push   0xc002a3d1
c0011fba:	e8 2e 82 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c0011fbf:	83 c4 10             	add    esp,0x10
c0011fc2:	e9 6e ff ff ff       	jmp    c0011f35 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011fc7:	83 ec 08             	sub    esp,0x8
c0011fca:	6a 00                	push   0x0
c0011fcc:	53                   	push   ebx
c0011fcd:	e8 56 fb ff ff       	call   c0011b28 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011fd2:	83 c4 10             	add    esp,0x10
c0011fd5:	e9 5b ff ff ff       	jmp    c0011f35 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011fda:	89 f0                	mov    eax,esi
c0011fdc:	84 c0                	test   al,al
c0011fde:	75 15                	jne    c0011ff5 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011fe0:	83 ec 08             	sub    esp,0x8
c0011fe3:	6a 00                	push   0x0
c0011fe5:	53                   	push   ebx
c0011fe6:	e8 3d fb ff ff       	call   c0011b28 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011feb:	83 c4 10             	add    esp,0x10
c0011fee:	83 c4 10             	add    esp,0x10
c0011ff1:	5b                   	pop    ebx
c0011ff2:	5e                   	pop    esi
c0011ff3:	5f                   	pop    edi
c0011ff4:	c3                   	ret    
c0011ff5:	c7 44 24 20 ed a3 02 c0 	mov    DWORD PTR [esp+0x20],0xc002a3ed
c0011ffd:	83 c4 10             	add    esp,0x10
c0012000:	5b                   	pop    ebx
c0012001:	5e                   	pop    esi
c0012002:	5f                   	pop    edi
c0012003:	e9 e5 81 00 00       	jmp    c001a1ed <Krnl::panic(char const*)>

c0012008 <VAS::freeAllocatedPages(unsigned long)>:
c0012008:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001200c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012010:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012014:	74 09                	je     c001201f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012016:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001201a:	e9 c6 fe ff ff       	jmp    c0011ee5 <Virt::freeKernelVirtualPages(unsigned long)>
c001201f:	c7 44 24 04 0c a2 02 c0 	mov    DWORD PTR [esp+0x4],0xc002a20c
c0012027:	e9 45 0b 00 00       	jmp    c0012b71 <Dbg::kprintf(char const*, ...)>

c001202c <VAS::virtualToPhysical(unsigned long)>:
c001202c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012030:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012034:	e8 8d fe ff ff       	call   c0011ec6 <VAS::getPageTableEntry(unsigned long)>
c0012039:	5a                   	pop    edx
c001203a:	8b 00                	mov    eax,DWORD PTR [eax]
c001203c:	59                   	pop    ecx
c001203d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012042:	c3                   	ret    
c0012043:	90                   	nop

c0012044 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012044:	55                   	push   ebp
c0012045:	57                   	push   edi
c0012046:	56                   	push   esi
c0012047:	53                   	push   ebx
c0012048:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001204c:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0012050:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012054:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012058:	85 db                	test   ebx,ebx
c001205a:	7e 22                	jle    c001207e <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c001205c:	c1 e3 0c             	shl    ebx,0xc
c001205f:	01 f3                	add    ebx,esi
c0012061:	56                   	push   esi
c0012062:	81 c6 00 10 00 00    	add    esi,0x1000
c0012068:	55                   	push   ebp
c0012069:	e8 58 fe ff ff       	call   c0011ec6 <VAS::getPageTableEntry(unsigned long)>
c001206e:	5a                   	pop    edx
c001206f:	59                   	pop    ecx
c0012070:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012072:	21 f9                	and    ecx,edi
c0012074:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012078:	39 f3                	cmp    ebx,esi
c001207a:	89 08                	mov    DWORD PTR [eax],ecx
c001207c:	75 e3                	jne    c0012061 <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001207e:	5b                   	pop    ebx
c001207f:	5e                   	pop    esi
c0012080:	5f                   	pop    edi
c0012081:	5d                   	pop    ebp
c0012082:	c3                   	ret    
c0012083:	90                   	nop

c0012084 <VAS::setToWriteCombining(unsigned long, int)>:
c0012084:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0012089:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001208f:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c0012096:	75 01                	jne    c0012099 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0012098:	c3                   	ret    
c0012099:	68 80 00 00 00       	push   0x80
c001209e:	6a ff                	push   0xffffffff
c00120a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120a4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120a8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120ac:	e8 93 ff ff ff       	call   c0012044 <VAS::reflagRange(unsigned long, int, int, int)>
c00120b1:	83 c4 14             	add    esp,0x14
c00120b4:	c3                   	ret    
c00120b5:	90                   	nop

c00120b6 <VAS::mapOtherVASIn(bool, VAS*)>:
c00120b6:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00120bb:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120bf:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00120c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120c6:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c00120c9:	19 c0                	sbb    eax,eax
c00120cb:	83 ca 03             	or     edx,0x3
c00120ce:	83 e0 fc             	and    eax,0xfffffffc
c00120d1:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00120d8:	0f 20 d8             	mov    eax,cr3
c00120db:	0f 22 d8             	mov    cr3,eax
c00120de:	c3                   	ret    
c00120df:	90                   	nop

c00120e0 <VAS::~VAS()>:
c00120e0:	83 ec 2c             	sub    esp,0x2c
c00120e3:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00120eb:	e8 22 b9 00 00       	call   c001da12 <lockScheduler()>
c00120f0:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00120f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00120f7:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00120fa:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012100:	83 ec 04             	sub    esp,0x4
c0012103:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0012107:	6a 01                	push   0x1
c0012109:	50                   	push   eax
c001210a:	e8 a7 ff ff ff       	call   c00120b6 <VAS::mapOtherVASIn(bool, VAS*)>
c001210f:	83 c4 10             	add    esp,0x10
c0012112:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001211a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012122:	0f 8f d7 00 00 00    	jg     c00121ff <VAS::~VAS()+0x11f>
c0012128:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001212c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001212f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012133:	c1 e2 02             	shl    edx,0x2
c0012136:	01 d0                	add    eax,edx
c0012138:	8b 00                	mov    eax,DWORD PTR [eax]
c001213a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001213e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012142:	83 e0 01             	and    eax,0x1
c0012145:	0f 84 ab 00 00 00    	je     c00121f6 <VAS::~VAS()+0x116>
c001214b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012153:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001215b:	7f 75                	jg     c00121d2 <VAS::~VAS()+0xf2>
c001215d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012161:	c1 e0 0a             	shl    eax,0xa
c0012164:	89 c2                	mov    edx,eax
c0012166:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001216a:	01 d0                	add    eax,edx
c001216c:	c1 e0 0c             	shl    eax,0xc
c001216f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012173:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012178:	8b 00                	mov    eax,DWORD PTR [eax]
c001217a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001217d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012183:	83 ec 04             	sub    esp,0x4
c0012186:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001218a:	6a 01                	push   0x1
c001218c:	50                   	push   eax
c001218d:	e8 08 fd ff ff       	call   c0011e9a <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0012192:	83 c4 10             	add    esp,0x10
c0012195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012199:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001219d:	8b 00                	mov    eax,DWORD PTR [eax]
c001219f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00121a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121a7:	25 01 04 00 00       	and    eax,0x401
c00121ac:	3d 01 04 00 00       	cmp    eax,0x401
c00121b1:	75 19                	jne    c00121cc <VAS::~VAS()+0xec>
c00121b3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121b7:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121bc:	83 ec 0c             	sub    esp,0xc
c00121bf:	50                   	push   eax
c00121c0:	e8 e6 dc ff ff       	call   c000feab <Phys::freePage(unsigned long)>
c00121c5:	83 c4 10             	add    esp,0x10
c00121c8:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121cc:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00121d0:	eb 81                	jmp    c0012153 <VAS::~VAS()+0x73>
c00121d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121d6:	25 00 04 00 00       	and    eax,0x400
c00121db:	74 19                	je     c00121f6 <VAS::~VAS()+0x116>
c00121dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121e1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121e6:	83 ec 0c             	sub    esp,0xc
c00121e9:	50                   	push   eax
c00121ea:	e8 bc dc ff ff       	call   c000feab <Phys::freePage(unsigned long)>
c00121ef:	83 c4 10             	add    esp,0x10
c00121f2:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121f6:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00121fa:	e9 1b ff ff ff       	jmp    c001211a <VAS::~VAS()+0x3a>
c00121ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012203:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012206:	83 ec 0c             	sub    esp,0xc
c0012209:	50                   	push   eax
c001220a:	e8 d6 fc ff ff       	call   c0011ee5 <Virt::freeKernelVirtualPages(unsigned long)>
c001220f:	83 c4 10             	add    esp,0x10
c0012212:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012216:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012219:	83 ec 0c             	sub    esp,0xc
c001221c:	50                   	push   eax
c001221d:	e8 89 dc ff ff       	call   c000feab <Phys::freePage(unsigned long)>
c0012222:	83 c4 10             	add    esp,0x10
c0012225:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012229:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001222d:	c1 e0 02             	shl    eax,0x2
c0012230:	83 ec 08             	sub    esp,0x8
c0012233:	50                   	push   eax
c0012234:	68 30 a2 02 c0       	push   0xc002a230
c0012239:	e8 33 09 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001223e:	83 c4 10             	add    esp,0x10
c0012241:	e8 ce b7 00 00       	call   c001da14 <unlockScheduler()>
c0012246:	90                   	nop
c0012247:	83 c4 2c             	add    esp,0x2c
c001224a:	c3                   	ret    
c001224b:	90                   	nop

c001224c <VAS::mapPage(unsigned long, unsigned long, int)>:
c001224c:	55                   	push   ebp
c001224d:	57                   	push   edi
c001224e:	56                   	push   esi
c001224f:	53                   	push   ebx
c0012250:	83 ec 1c             	sub    esp,0x1c
c0012253:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012257:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001225b:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0012261:	77 08                	ja     c001226b <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0012263:	0f 20 d8             	mov    eax,cr3
c0012266:	39 47 0c             	cmp    DWORD PTR [edi+0xc],eax
c0012269:	75 47                	jne    c00122b2 <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c001226b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001226f:	09 d8                	or     eax,ebx
c0012271:	a9 ff 0f 00 00       	test   eax,0xfff
c0012276:	75 57                	jne    c00122cf <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c0012278:	89 de                	mov    esi,ebx
c001227a:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001227d:	c1 ee 16             	shr    esi,0x16
c0012280:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0012287:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c001228b:	74 54                	je     c00122e1 <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c001228d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012291:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0012297:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c001229b:	c1 e6 0c             	shl    esi,0xc
c001229e:	c1 eb 0a             	shr    ebx,0xa
c00122a1:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00122a7:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00122aa:	83 c4 1c             	add    esp,0x1c
c00122ad:	5b                   	pop    ebx
c00122ae:	5e                   	pop    esi
c00122af:	5f                   	pop    edi
c00122b0:	5d                   	pop    ebp
c00122b1:	c3                   	ret    
c00122b2:	83 ec 0c             	sub    esp,0xc
c00122b5:	68 50 a2 02 c0       	push   0xc002a250
c00122ba:	e8 b2 08 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c00122bf:	83 c4 10             	add    esp,0x10
c00122c2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122c6:	09 d8                	or     eax,ebx
c00122c8:	a9 ff 0f 00 00       	test   eax,0xfff
c00122cd:	74 a9                	je     c0012278 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00122cf:	83 ec 0c             	sub    esp,0xc
c00122d2:	68 b8 a2 02 c0       	push   0xc002a2b8
c00122d7:	e8 11 7f 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c00122dc:	83 c4 10             	add    esp,0x10
c00122df:	eb 97                	jmp    c0012278 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00122e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00122e5:	e8 4b dc ff ff       	call   c000ff35 <Phys::allocatePage()>
c00122ea:	89 c5                	mov    ebp,eax
c00122ec:	e8 20 fa ff ff       	call   c0011d11 <Virt::getAKernelVAS()>
c00122f1:	83 ec 0c             	sub    esp,0xc
c00122f4:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00122f8:	6a 01                	push   0x1
c00122fa:	e8 82 f8 ff ff       	call   c0011b81 <Virt::allocateKernelVirtualPages(int)>
c00122ff:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012306:	6a 01                	push   0x1
c0012308:	50                   	push   eax
c0012309:	55                   	push   ebp
c001230a:	81 cd 07 04 00 00    	or     ebp,0x407
c0012310:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012314:	51                   	push   ecx
c0012315:	e8 26 02 00 00       	call   c0012540 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001231a:	83 c4 1c             	add    esp,0x1c
c001231d:	68 00 10 00 00       	push   0x1000
c0012322:	6a 00                	push   0x0
c0012324:	50                   	push   eax
c0012325:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012329:	e8 4a e4 fe ff       	call   c0000778 <memset>
c001232e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012332:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012335:	e8 ab fb ff ff       	call   c0011ee5 <Virt::freeKernelVirtualPages(unsigned long)>
c001233a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001233e:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0012341:	83 c4 10             	add    esp,0x10
c0012344:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012347:	e9 41 ff ff ff       	jmp    c001228d <VAS::mapPage(unsigned long, unsigned long, int)+0x41>

c001234c <VAS::allocatePages(int, int)>:
c001234c:	55                   	push   ebp
c001234d:	57                   	push   edi
c001234e:	56                   	push   esi
c001234f:	53                   	push   ebx
c0012350:	83 ec 1c             	sub    esp,0x1c
c0012353:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012357:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c001235c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012362:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012368:	83 e0 01             	and    eax,0x1
c001236b:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001236f:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012373:	0f 85 cc 00 00 00    	jne    c0012445 <VAS::allocatePages(int, int)+0xf9>
c0012379:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001237c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012380:	85 c0                	test   eax,eax
c0012382:	0f 84 a1 00 00 00    	je     c0012429 <VAS::allocatePages(int, int)+0xdd>
c0012388:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001238c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0012390:	c1 e6 0c             	shl    esi,0xc
c0012393:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0012397:	85 c0                	test   eax,eax
c0012399:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c001239c:	7e 33                	jle    c00123d1 <VAS::allocatePages(int, int)+0x85>
c001239e:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00123a2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123a6:	81 cd 00 04 00 00    	or     ebp,0x400
c00123ac:	e8 84 db ff ff       	call   c000ff35 <Phys::allocatePage()>
c00123b1:	55                   	push   ebp
c00123b2:	53                   	push   ebx
c00123b3:	50                   	push   eax
c00123b4:	57                   	push   edi
c00123b5:	e8 92 fe ff ff       	call   c001224c <VAS::mapPage(unsigned long, unsigned long, int)>
c00123ba:	83 c4 10             	add    esp,0x10
c00123bd:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123c2:	74 03                	je     c00123c7 <VAS::allocatePages(int, int)+0x7b>
c00123c4:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123c7:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123cd:	39 de                	cmp    esi,ebx
c00123cf:	75 db                	jne    c00123ac <VAS::allocatePages(int, int)+0x60>
c00123d1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123d6:	75 12                	jne    c00123ea <VAS::allocatePages(int, int)+0x9e>
c00123d8:	0f 20 d8             	mov    eax,cr3
c00123db:	0f 22 d8             	mov    cr3,eax
c00123de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00123e2:	83 c4 1c             	add    esp,0x1c
c00123e5:	5b                   	pop    ebx
c00123e6:	5e                   	pop    esi
c00123e7:	5f                   	pop    edi
c00123e8:	5d                   	pop    ebp
c00123e9:	c3                   	ret    
c00123ea:	c1 ee 0a             	shr    esi,0xa
c00123ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123f1:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c00123f7:	c1 eb 0a             	shr    ebx,0xa
c00123fa:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c0012400:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012406:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001240c:	39 c3                	cmp    ebx,eax
c001240e:	77 ce                	ja     c00123de <VAS::allocatePages(int, int)+0x92>
c0012410:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012413:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012419:	39 d8                	cmp    eax,ebx
c001241b:	73 f3                	jae    c0012410 <VAS::allocatePages(int, int)+0xc4>
c001241d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012421:	83 c4 1c             	add    esp,0x1c
c0012424:	5b                   	pop    ebx
c0012425:	5e                   	pop    esi
c0012426:	5f                   	pop    edi
c0012427:	5d                   	pop    ebp
c0012428:	c3                   	ret    
c0012429:	83 ec 0c             	sub    esp,0xc
c001242c:	68 dc a2 02 c0       	push   0xc002a2dc
c0012431:	e8 b7 7d 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c0012436:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012439:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001243d:	83 c4 10             	add    esp,0x10
c0012440:	e9 43 ff ff ff       	jmp    c0012388 <VAS::allocatePages(int, int)+0x3c>
c0012445:	83 ec 0c             	sub    esp,0xc
c0012448:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001244c:	e8 30 f7 ff ff       	call   c0011b81 <Virt::allocateKernelVirtualPages(int)>
c0012451:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012455:	83 c4 10             	add    esp,0x10
c0012458:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001245d:	0f 87 9b 00 00 00    	ja     c00124fe <VAS::allocatePages(int, int)+0x1b2>
c0012463:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012467:	85 d2                	test   edx,edx
c0012469:	7e 3c                	jle    c00124a7 <VAS::allocatePages(int, int)+0x15b>
c001246b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001246f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0012473:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012477:	c1 e5 0c             	shl    ebp,0xc
c001247a:	81 ce 00 04 00 00    	or     esi,0x400
c0012480:	01 dd                	add    ebp,ebx
c0012482:	e8 ae da ff ff       	call   c000ff35 <Phys::allocatePage()>
c0012487:	56                   	push   esi
c0012488:	53                   	push   ebx
c0012489:	50                   	push   eax
c001248a:	57                   	push   edi
c001248b:	e8 bc fd ff ff       	call   c001224c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012490:	83 c4 10             	add    esp,0x10
c0012493:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012498:	74 03                	je     c001249d <VAS::allocatePages(int, int)+0x151>
c001249a:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001249d:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124a3:	39 dd                	cmp    ebp,ebx
c00124a5:	75 db                	jne    c0012482 <VAS::allocatePages(int, int)+0x136>
c00124a7:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124ac:	0f 84 26 ff ff ff    	je     c00123d8 <VAS::allocatePages(int, int)+0x8c>
c00124b2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124b6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124ba:	89 d3                	mov    ebx,edx
c00124bc:	c1 e0 0c             	shl    eax,0xc
c00124bf:	c1 eb 0a             	shr    ebx,0xa
c00124c2:	01 d0                	add    eax,edx
c00124c4:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124ca:	c1 e8 0a             	shr    eax,0xa
c00124cd:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00124d3:	25 00 f0 ff ff       	and    eax,0xfffff000
c00124d8:	2d 00 00 40 00       	sub    eax,0x400000
c00124dd:	39 c3                	cmp    ebx,eax
c00124df:	0f 87 f9 fe ff ff    	ja     c00123de <VAS::allocatePages(int, int)+0x92>
c00124e5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124e8:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124ee:	39 d8                	cmp    eax,ebx
c00124f0:	73 f3                	jae    c00124e5 <VAS::allocatePages(int, int)+0x199>
c00124f2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00124f6:	83 c4 1c             	add    esp,0x1c
c00124f9:	5b                   	pop    ebx
c00124fa:	5e                   	pop    esi
c00124fb:	5f                   	pop    edi
c00124fc:	5d                   	pop    ebp
c00124fd:	c3                   	ret    
c00124fe:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0012503:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012509:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c0012510:	0f 84 4d ff ff ff    	je     c0012463 <VAS::allocatePages(int, int)+0x117>
c0012516:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001251e:	e9 40 ff ff ff       	jmp    c0012463 <VAS::allocatePages(int, int)+0x117>
c0012523:	90                   	nop

c0012524 <VAS::setCPUSpecific(unsigned long)>:
c0012524:	83 ec 0c             	sub    esp,0xc
c0012527:	6a 05                	push   0x5
c0012529:	68 00 00 40 c2       	push   0xc2400000
c001252e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012532:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012536:	e8 11 fd ff ff       	call   c001224c <VAS::mapPage(unsigned long, unsigned long, int)>
c001253b:	83 c4 1c             	add    esp,0x1c
c001253e:	c3                   	ret    
c001253f:	90                   	nop

c0012540 <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0012540:	55                   	push   ebp
c0012541:	57                   	push   edi
c0012542:	56                   	push   esi
c0012543:	53                   	push   ebx
c0012544:	83 ec 1c             	sub    esp,0x1c
c0012547:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c001254c:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012550:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012556:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001255a:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012560:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012564:	83 e0 01             	and    eax,0x1
c0012567:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001256b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001256f:	85 c0                	test   eax,eax
c0012571:	7e 39                	jle    c00125ac <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c0012573:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012577:	89 f3                	mov    ebx,esi
c0012579:	c1 e0 0c             	shl    eax,0xc
c001257c:	01 f0                	add    eax,esi
c001257e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012582:	55                   	push   ebp
c0012583:	53                   	push   ebx
c0012584:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0012588:	29 f0                	sub    eax,esi
c001258a:	01 d8                	add    eax,ebx
c001258c:	50                   	push   eax
c001258d:	57                   	push   edi
c001258e:	e8 b9 fc ff ff       	call   c001224c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012593:	83 c4 10             	add    esp,0x10
c0012596:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c001259b:	74 03                	je     c00125a0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c001259d:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125a0:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125a6:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00125aa:	75 d6                	jne    c0012582 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00125ac:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125b1:	75 10                	jne    c00125c3 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00125b3:	0f 20 d8             	mov    eax,cr3
c00125b6:	0f 22 d8             	mov    cr3,eax
c00125b9:	83 c4 1c             	add    esp,0x1c
c00125bc:	89 f0                	mov    eax,esi
c00125be:	5b                   	pop    ebx
c00125bf:	5e                   	pop    esi
c00125c0:	5f                   	pop    edi
c00125c1:	5d                   	pop    ebp
c00125c2:	c3                   	ret    
c00125c3:	89 f3                	mov    ebx,esi
c00125c5:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125c9:	c1 eb 0a             	shr    ebx,0xa
c00125cc:	c1 e0 0c             	shl    eax,0xc
c00125cf:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00125d5:	01 f0                	add    eax,esi
c00125d7:	81 eb 00 00 40 00    	sub    ebx,0x400000
c00125dd:	c1 e8 0a             	shr    eax,0xa
c00125e0:	25 00 f0 ff ff       	and    eax,0xfffff000
c00125e5:	2d 00 00 40 00       	sub    eax,0x400000
c00125ea:	39 c3                	cmp    ebx,eax
c00125ec:	77 cb                	ja     c00125b9 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c00125ee:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125f1:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125f7:	39 d8                	cmp    eax,ebx
c00125f9:	73 f3                	jae    c00125ee <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c00125fb:	83 c4 1c             	add    esp,0x1c
c00125fe:	89 f0                	mov    eax,esi
c0012600:	5b                   	pop    ebx
c0012601:	5e                   	pop    esi
c0012602:	5f                   	pop    edi
c0012603:	5d                   	pop    ebp
c0012604:	c3                   	ret    
c0012605:	90                   	nop

c0012606 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012606:	55                   	push   ebp
c0012607:	57                   	push   edi
c0012608:	56                   	push   esi
c0012609:	53                   	push   ebx
c001260a:	83 ec 1c             	sub    esp,0x1c
c001260d:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0012611:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012615:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012619:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001261d:	a9 ff 0f 00 00       	test   eax,0xfff
c0012622:	75 4a                	jne    c001266e <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012624:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012628:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001262b:	c1 eb 16             	shr    ebx,0x16
c001262e:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012635:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012639:	74 4d                	je     c0012688 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c001263b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001263f:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012643:	c1 e8 0a             	shr    eax,0xa
c0012646:	80 fa 01             	cmp    dl,0x1
c0012649:	19 d2                	sbb    edx,edx
c001264b:	c1 e3 0c             	shl    ebx,0xc
c001264e:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012652:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012658:	25 fc 0f 00 00       	and    eax,0xffc
c001265d:	01 d8                	add    eax,ebx
c001265f:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012666:	83 c4 1c             	add    esp,0x1c
c0012669:	5b                   	pop    ebx
c001266a:	5e                   	pop    esi
c001266b:	5f                   	pop    edi
c001266c:	5d                   	pop    ebp
c001266d:	c3                   	ret    
c001266e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0012672:	83 ec 0c             	sub    esp,0xc
c0012675:	68 08 a3 02 c0       	push   0xc002a308
c001267a:	e8 6e 7b 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c001267f:	83 c4 10             	add    esp,0x10
c0012682:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012686:	eb 9c                	jmp    c0012624 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c0012688:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001268c:	e8 a4 d8 ff ff       	call   c000ff35 <Phys::allocatePage()>
c0012691:	89 c5                	mov    ebp,eax
c0012693:	e8 79 f6 ff ff       	call   c0011d11 <Virt::getAKernelVAS()>
c0012698:	83 ec 0c             	sub    esp,0xc
c001269b:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001269f:	6a 01                	push   0x1
c00126a1:	e8 db f4 ff ff       	call   c0011b81 <Virt::allocateKernelVirtualPages(int)>
c00126a6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00126ad:	6a 01                	push   0x1
c00126af:	50                   	push   eax
c00126b0:	55                   	push   ebp
c00126b1:	81 cd 07 04 00 00    	or     ebp,0x407
c00126b7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00126bb:	51                   	push   ecx
c00126bc:	e8 7f fe ff ff       	call   c0012540 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126c1:	83 c4 1c             	add    esp,0x1c
c00126c4:	68 00 10 00 00       	push   0x1000
c00126c9:	6a 00                	push   0x0
c00126cb:	50                   	push   eax
c00126cc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126d0:	e8 a3 e0 fe ff       	call   c0000778 <memset>
c00126d5:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00126d9:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00126dc:	e8 04 f8 ff ff       	call   c0011ee5 <Virt::freeKernelVirtualPages(unsigned long)>
c00126e1:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00126e4:	83 c4 10             	add    esp,0x10
c00126e7:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c00126ea:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00126ee:	e9 48 ff ff ff       	jmp    c001263b <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>
c00126f3:	90                   	nop

c00126f4 <VAS::VAS(bool)>:
c00126f4:	53                   	push   ebx
c00126f5:	83 ec 28             	sub    esp,0x28
c00126f8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126fc:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0012700:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012704:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001270b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001270f:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c0012713:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c0012716:	e8 1a d8 ff ff       	call   c000ff35 <Phys::allocatePage()>
c001271b:	89 c2                	mov    edx,eax
c001271d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012721:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012724:	e8 e8 f5 ff ff       	call   c0011d11 <Virt::getAKernelVAS()>
c0012729:	89 c3                	mov    ebx,eax
c001272b:	83 ec 0c             	sub    esp,0xc
c001272e:	6a 01                	push   0x1
c0012730:	e8 4c f4 ff ff       	call   c0011b81 <Virt::allocateKernelVirtualPages(int)>
c0012735:	83 c4 10             	add    esp,0x10
c0012738:	89 c2                	mov    edx,eax
c001273a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001273e:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012741:	83 ec 0c             	sub    esp,0xc
c0012744:	6a 03                	push   0x3
c0012746:	6a 01                	push   0x1
c0012748:	52                   	push   edx
c0012749:	50                   	push   eax
c001274a:	53                   	push   ebx
c001274b:	e8 f0 fd ff ff       	call   c0012540 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012750:	83 c4 20             	add    esp,0x20
c0012753:	89 c2                	mov    edx,eax
c0012755:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012759:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001275c:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012764:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c001276c:	7f 1c                	jg     c001278a <VAS::VAS(bool)+0x96>
c001276e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012772:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0012775:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012779:	c1 e2 02             	shl    edx,0x2
c001277c:	01 d0                	add    eax,edx
c001277e:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012784:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012788:	eb da                	jmp    c0012764 <VAS::VAS(bool)+0x70>
c001278a:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c0012792:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c001279a:	7f 7a                	jg     c0012816 <VAS::VAS(bool)+0x122>
c001279c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127a0:	2d 00 02 00 00       	sub    eax,0x200
c00127a5:	c1 e0 0c             	shl    eax,0xc
c00127a8:	83 c8 03             	or     eax,0x3
c00127ab:	89 c2                	mov    edx,eax
c00127ad:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c00127b2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127b8:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00127be:	83 e0 10             	and    eax,0x10
c00127c1:	84 c0                	test   al,al
c00127c3:	74 07                	je     c00127cc <VAS::VAS(bool)+0xd8>
c00127c5:	b8 00 01 00 00       	mov    eax,0x100
c00127ca:	eb 05                	jmp    c00127d1 <VAS::VAS(bool)+0xdd>
c00127cc:	b8 00 00 00 00       	mov    eax,0x0
c00127d1:	09 d0                	or     eax,edx
c00127d3:	89 c1                	mov    ecx,eax
c00127d5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127d9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00127dc:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00127e0:	c1 e2 02             	shl    edx,0x2
c00127e3:	01 d0                	add    eax,edx
c00127e5:	89 ca                	mov    edx,ecx
c00127e7:	89 10                	mov    DWORD PTR [eax],edx
c00127e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127ed:	2d 40 03 00 00       	sub    eax,0x340
c00127f2:	83 f8 7f             	cmp    eax,0x7f
c00127f5:	77 16                	ja     c001280d <VAS::VAS(bool)+0x119>
c00127f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127fb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00127fe:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012802:	c1 e2 02             	shl    edx,0x2
c0012805:	01 d0                	add    eax,edx
c0012807:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c001280d:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012811:	e9 7c ff ff ff       	jmp    c0012792 <VAS::VAS(bool)+0x9e>
c0012816:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c001281b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012821:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012827:	83 e0 10             	and    eax,0x10
c001282a:	84 c0                	test   al,al
c001282c:	74 07                	je     c0012835 <VAS::VAS(bool)+0x141>
c001282e:	b8 03 41 00 00       	mov    eax,0x4103
c0012833:	eb 05                	jmp    c001283a <VAS::VAS(bool)+0x146>
c0012835:	b8 03 40 00 00       	mov    eax,0x4003
c001283a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001283e:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0012841:	81 c2 20 0c 00 00    	add    edx,0xc20
c0012847:	89 02                	mov    DWORD PTR [edx],eax
c0012849:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c001284e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012854:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c001285a:	83 ec 08             	sub    esp,0x8
c001285d:	50                   	push   eax
c001285e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012862:	e8 bd fc ff ff       	call   c0012524 <VAS::setCPUSpecific(unsigned long)>
c0012867:	83 c4 10             	add    esp,0x10
c001286a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001286e:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012871:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0012876:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001287c:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0012882:	83 e0 10             	and    eax,0x10
c0012885:	84 c0                	test   al,al
c0012887:	74 07                	je     c0012890 <VAS::VAS(bool)+0x19c>
c0012889:	b8 00 01 00 00       	mov    eax,0x100
c001288e:	eb 05                	jmp    c0012895 <VAS::VAS(bool)+0x1a1>
c0012890:	b8 00 00 00 00       	mov    eax,0x0
c0012895:	09 c2                	or     edx,eax
c0012897:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001289b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001289e:	05 fc 0f 00 00       	add    eax,0xffc
c00128a3:	83 ca 03             	or     edx,0x3
c00128a6:	89 10                	mov    DWORD PTR [eax],edx
c00128a8:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c00128ad:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128b3:	83 ec 0c             	sub    esp,0xc
c00128b6:	50                   	push   eax
c00128b7:	e8 c8 19 00 00       	call   c0014284 <Device::getName()>
c00128bc:	83 c4 10             	add    esp,0x10
c00128bf:	83 ec 08             	sub    esp,0x8
c00128c2:	68 07 a4 02 c0       	push   0xc002a407
c00128c7:	50                   	push   eax
c00128c8:	e8 f3 df fe ff       	call   c00008c0 <strcmp>
c00128cd:	83 c4 10             	add    esp,0x10
c00128d0:	85 c0                	test   eax,eax
c00128d2:	0f 94 c0             	sete   al
c00128d5:	84 c0                	test   al,al
c00128d7:	74 70                	je     c0012949 <VAS::VAS(bool)+0x255>
c00128d9:	e8 17 b1 00 00       	call   c001d9f5 <disableIRQs()>
c00128de:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c00128e3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128e9:	05 7c 09 00 00       	add    eax,0x97c
c00128ee:	83 ec 0c             	sub    esp,0xc
c00128f1:	50                   	push   eax
c00128f2:	e8 c5 c9 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c00128f7:	83 c4 10             	add    esp,0x10
c00128fa:	25 00 f0 ff ff       	and    eax,0xfffff000
c00128ff:	89 c3                	mov    ebx,eax
c0012901:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0012906:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001290c:	05 7c 09 00 00       	add    eax,0x97c
c0012911:	83 ec 0c             	sub    esp,0xc
c0012914:	50                   	push   eax
c0012915:	e8 a2 c9 ff ff       	call   c000f2bc <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001291a:	83 c4 10             	add    esp,0x10
c001291d:	83 ec 08             	sub    esp,0x8
c0012920:	50                   	push   eax
c0012921:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012925:	e8 9c f5 ff ff       	call   c0011ec6 <VAS::getPageTableEntry(unsigned long)>
c001292a:	83 c4 10             	add    esp,0x10
c001292d:	8b 00                	mov    eax,DWORD PTR [eax]
c001292f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012934:	6a 11                	push   0x11
c0012936:	53                   	push   ebx
c0012937:	50                   	push   eax
c0012938:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001293c:	e8 0b f9 ff ff       	call   c001224c <VAS::mapPage(unsigned long, unsigned long, int)>
c0012941:	83 c4 10             	add    esp,0x10
c0012944:	e8 ba b0 00 00       	call   c001da03 <enableIRQs()>
c0012949:	90                   	nop
c001294a:	83 c4 28             	add    esp,0x28
c001294d:	5b                   	pop    ebx
c001294e:	c3                   	ret    

c001294f <mapVASFirstTime>:
c001294f:	55                   	push   ebp
c0012950:	57                   	push   edi
c0012951:	56                   	push   esi
c0012952:	53                   	push   ebx
c0012953:	83 ec 0c             	sub    esp,0xc
c0012956:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001295b:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001295e:	4a                   	dec    edx
c001295f:	0f 84 8e 00 00 00    	je     c00129f3 <mapVASFirstTime+0xa4>
c0012965:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012968:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c001296b:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012970:	c1 e5 15             	shl    ebp,0x15
c0012973:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012978:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c001297e:	29 eb                	sub    ebx,ebp
c0012980:	29 ee                	sub    esi,ebp
c0012982:	e8 ae d5 ff ff       	call   c000ff35 <Phys::allocatePage()>
c0012987:	83 ec 0c             	sub    esp,0xc
c001298a:	68 03 04 00 00       	push   0x403
c001298f:	6a 01                	push   0x1
c0012991:	53                   	push   ebx
c0012992:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012998:	50                   	push   eax
c0012999:	57                   	push   edi
c001299a:	e8 a1 fb ff ff       	call   c0012540 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001299f:	83 c4 20             	add    esp,0x20
c00129a2:	39 f3                	cmp    ebx,esi
c00129a4:	75 dc                	jne    c0012982 <mapVASFirstTime+0x33>
c00129a6:	be 00 f0 ff 01       	mov    esi,0x1fff000
c00129ab:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c00129b0:	29 ee                	sub    esi,ebp
c00129b2:	29 e8                	sub    eax,ebp
c00129b4:	89 c5                	mov    ebp,eax
c00129b6:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c00129ba:	19 db                	sbb    ebx,ebx
c00129bc:	e8 74 d5 ff ff       	call   c000ff35 <Phys::allocatePage()>
c00129c1:	83 e3 04             	and    ebx,0x4
c00129c4:	83 ec 0c             	sub    esp,0xc
c00129c7:	81 c3 03 04 00 00    	add    ebx,0x403
c00129cd:	53                   	push   ebx
c00129ce:	6a 01                	push   0x1
c00129d0:	56                   	push   esi
c00129d1:	81 ee 00 10 00 00    	sub    esi,0x1000
c00129d7:	50                   	push   eax
c00129d8:	57                   	push   edi
c00129d9:	e8 62 fb ff ff       	call   c0012540 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00129de:	83 c4 20             	add    esp,0x20
c00129e1:	39 f5                	cmp    ebp,esi
c00129e3:	75 d1                	jne    c00129b6 <mapVASFirstTime+0x67>
c00129e5:	0f 20 d8             	mov    eax,cr3
c00129e8:	0f 22 d8             	mov    cr3,eax
c00129eb:	83 c4 0c             	add    esp,0xc
c00129ee:	5b                   	pop    ebx
c00129ef:	5e                   	pop    esi
c00129f0:	5f                   	pop    edi
c00129f1:	5d                   	pop    ebp
c00129f2:	c3                   	ret    
c00129f3:	83 ec 0c             	sub    esp,0xc
c00129f6:	68 15 a4 02 c0       	push   0xc002a415
c00129fb:	e8 71 01 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0012a00:	83 c4 10             	add    esp,0x10
c0012a03:	83 c4 0c             	add    esp,0xc
c0012a06:	5b                   	pop    ebx
c0012a07:	5e                   	pop    esi
c0012a08:	5f                   	pop    edi
c0012a09:	5d                   	pop    ebp
c0012a0a:	c3                   	ret    

c0012a0b <__cxa_atexit>:
c0012a0b:	31 c0                	xor    eax,eax
c0012a0d:	c3                   	ret    

c0012a0e <__cxa_finalize>:
c0012a0e:	c3                   	ret    

c0012a0f <__stack_chk_fail>:
c0012a0f:	55                   	push   ebp
c0012a10:	89 e5                	mov    ebp,esp
c0012a12:	83 ec 14             	sub    esp,0x14
c0012a15:	68 2e a4 02 c0       	push   0xc002a42e
c0012a1a:	e8 52 01 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0012a1f:	58                   	pop    eax
c0012a20:	5a                   	pop    edx
c0012a21:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012a24:	68 7e a4 02 c0       	push   0xc002a47e
c0012a29:	e8 43 01 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0012a2e:	59                   	pop    ecx
c0012a2f:	58                   	pop    eax
c0012a30:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012a33:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012a36:	68 7e a4 02 c0       	push   0xc002a47e
c0012a3b:	e8 31 01 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0012a40:	5a                   	pop    edx
c0012a41:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012a44:	59                   	pop    ecx
c0012a45:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a47:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012a4a:	68 7e a4 02 c0       	push   0xc002a47e
c0012a4f:	e8 1d 01 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0012a54:	5a                   	pop    edx
c0012a55:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012a58:	59                   	pop    ecx
c0012a59:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a5b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012a5d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012a60:	68 7e a4 02 c0       	push   0xc002a47e
c0012a65:	e8 07 01 00 00       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0012a6a:	c7 04 24 86 a4 02 c0 	mov    DWORD PTR [esp],0xc002a486
c0012a71:	e8 77 77 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c0012a76:	83 c4 10             	add    esp,0x10
c0012a79:	c9                   	leave  
c0012a7a:	c3                   	ret    

c0012a7b <__cxa_pure_virtual>:
c0012a7b:	83 ec 18             	sub    esp,0x18
c0012a7e:	68 9e a4 02 c0       	push   0xc002a49e
c0012a83:	e8 65 77 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c0012a88:	83 c4 1c             	add    esp,0x1c
c0012a8b:	c3                   	ret    

c0012a8c <operator new[](unsigned long)>:
c0012a8c:	e9 af cd ff ff       	jmp    c000f840 <malloc>

c0012a91 <operator delete(void*, unsigned long)>:
c0012a91:	e9 ca cd ff ff       	jmp    c000f860 <rfree>

c0012a96 <operator delete[](void*)>:
c0012a96:	e9 c5 cd ff ff       	jmp    c000f860 <rfree>

c0012a9b <operator delete[](void*, unsigned long)>:
c0012a9b:	e9 c0 cd ff ff       	jmp    c000f860 <rfree>

c0012aa0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012aa0:	57                   	push   edi
c0012aa1:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012aa6:	56                   	push   esi
c0012aa7:	be b4 a4 02 c0       	mov    esi,0xc002a4b4
c0012aac:	53                   	push   ebx
c0012aad:	83 ec 40             	sub    esp,0x40
c0012ab0:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012ab4:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012ab8:	fc                   	cld    
c0012ab9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012abb:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012abf:	83 f9 3e             	cmp    ecx,0x3e
c0012ac2:	7e 05                	jle    c0012ac9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012ac4:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012ac9:	89 df                	mov    edi,ebx
c0012acb:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012acf:	eb 02                	jmp    c0012ad3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012ad1:	89 c7                	mov    edi,eax
c0012ad3:	31 d2                	xor    edx,edx
c0012ad5:	46                   	inc    esi
c0012ad6:	89 f8                	mov    eax,edi
c0012ad8:	f7 f1                	div    ecx
c0012ada:	39 cf                	cmp    edi,ecx
c0012adc:	73 f3                	jae    c0012ad1 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012ade:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012ae1:	eb 02                	jmp    c0012ae5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012ae3:	89 c3                	mov    ebx,eax
c0012ae5:	31 d2                	xor    edx,edx
c0012ae7:	4e                   	dec    esi
c0012ae8:	89 d8                	mov    eax,ebx
c0012aea:	f7 f1                	div    ecx
c0012aec:	39 cb                	cmp    ebx,ecx
c0012aee:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012af2:	88 16                	mov    BYTE PTR [esi],dl
c0012af4:	73 ed                	jae    c0012ae3 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012af6:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012afa:	83 c4 40             	add    esp,0x40
c0012afd:	5b                   	pop    ebx
c0012afe:	5e                   	pop    esi
c0012aff:	5f                   	pop    edi
c0012b00:	c3                   	ret    

c0012b01 <Dbg::logc(char)>:
c0012b01:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012b05:	ba fd 03 00 00       	mov    edx,0x3fd
c0012b0a:	ec                   	in     al,dx
c0012b0b:	a8 20                	test   al,0x20
c0012b0d:	74 fb                	je     c0012b0a <Dbg::logc(char)+0x9>
c0012b0f:	ba f8 03 00 00       	mov    edx,0x3f8
c0012b14:	88 c8                	mov    al,cl
c0012b16:	ee                   	out    dx,al
c0012b17:	c3                   	ret    

c0012b18 <Dbg::logs(char*)>:
c0012b18:	53                   	push   ebx
c0012b19:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012b1d:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012b20:	84 c0                	test   al,al
c0012b22:	74 0f                	je     c0012b33 <Dbg::logs(char*)+0x1b>
c0012b24:	50                   	push   eax
c0012b25:	43                   	inc    ebx
c0012b26:	e8 d6 ff ff ff       	call   c0012b01 <Dbg::logc(char)>
c0012b2b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012b2e:	5a                   	pop    edx
c0012b2f:	84 c0                	test   al,al
c0012b31:	75 f1                	jne    c0012b24 <Dbg::logs(char*)+0xc>
c0012b33:	5b                   	pop    ebx
c0012b34:	c3                   	ret    

c0012b35 <Dbg::logWriteInt(unsigned int)>:
c0012b35:	83 ec 10             	sub    esp,0x10
c0012b38:	6a 0a                	push   0xa
c0012b3a:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012b3e:	50                   	push   eax
c0012b3f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b43:	e8 58 ff ff ff       	call   c0012aa0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012b48:	50                   	push   eax
c0012b49:	e8 ca ff ff ff       	call   c0012b18 <Dbg::logs(char*)>
c0012b4e:	83 c4 20             	add    esp,0x20
c0012b51:	c3                   	ret    

c0012b52 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012b52:	83 ec 10             	sub    esp,0x10
c0012b55:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012b59:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012b5d:	50                   	push   eax
c0012b5e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012b62:	e8 39 ff ff ff       	call   c0012aa0 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012b67:	50                   	push   eax
c0012b68:	e8 ab ff ff ff       	call   c0012b18 <Dbg::logs(char*)>
c0012b6d:	83 c4 20             	add    esp,0x20
c0012b70:	c3                   	ret    

c0012b71 <Dbg::kprintf(char const*, ...)>:
c0012b71:	55                   	push   ebp
c0012b72:	57                   	push   edi
c0012b73:	56                   	push   esi
c0012b74:	53                   	push   ebx
c0012b75:	83 ec 0c             	sub    esp,0xc
c0012b78:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012b7c:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012b80:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012b84:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012b87:	84 c0                	test   al,al
c0012b89:	74 4a                	je     c0012bd5 <Dbg::kprintf(char const*, ...)+0x64>
c0012b8b:	31 db                	xor    ebx,ebx
c0012b8d:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012b90:	3c 25                	cmp    al,0x25
c0012b92:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012b95:	0f 85 e4 00 00 00    	jne    c0012c7f <Dbg::kprintf(char const*, ...)+0x10e>
c0012b9b:	83 c3 02             	add    ebx,0x2
c0012b9e:	8a 07                	mov    al,BYTE PTR [edi]
c0012ba0:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012ba3:	83 e8 25             	sub    eax,0x25
c0012ba6:	3c 53                	cmp    al,0x53
c0012ba8:	0f 87 ba 00 00 00    	ja     c0012c68 <Dbg::kprintf(char const*, ...)+0xf7>
c0012bae:	0f b6 c0             	movzx  eax,al
c0012bb1:	ff 24 85 f4 a4 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd5b0c]
c0012bb8:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012bbc:	89 c8                	mov    eax,ecx
c0012bbe:	83 c1 04             	add    ecx,0x4
c0012bc1:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012bc5:	ff 30                	push   DWORD PTR [eax]
c0012bc7:	e8 4c ff ff ff       	call   c0012b18 <Dbg::logs(char*)>
c0012bcc:	58                   	pop    eax
c0012bcd:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012bd1:	84 c0                	test   al,al
c0012bd3:	75 b8                	jne    c0012b8d <Dbg::kprintf(char const*, ...)+0x1c>
c0012bd5:	83 c4 0c             	add    esp,0xc
c0012bd8:	5b                   	pop    ebx
c0012bd9:	5e                   	pop    esi
c0012bda:	5f                   	pop    edi
c0012bdb:	5d                   	pop    ebp
c0012bdc:	c3                   	ret    
c0012bdd:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012be1:	89 d0                	mov    eax,edx
c0012be3:	83 c2 04             	add    edx,0x4
c0012be6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012bea:	ff 30                	push   DWORD PTR [eax]
c0012bec:	e8 44 ff ff ff       	call   c0012b35 <Dbg::logWriteInt(unsigned int)>
c0012bf1:	58                   	pop    eax
c0012bf2:	eb d9                	jmp    c0012bcd <Dbg::kprintf(char const*, ...)+0x5c>
c0012bf4:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012bf8:	89 d0                	mov    eax,edx
c0012bfa:	83 c2 04             	add    edx,0x4
c0012bfd:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012c00:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012c04:	50                   	push   eax
c0012c05:	e8 f7 fe ff ff       	call   c0012b01 <Dbg::logc(char)>
c0012c0a:	58                   	pop    eax
c0012c0b:	eb c0                	jmp    c0012bcd <Dbg::kprintf(char const*, ...)+0x5c>
c0012c0d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c11:	89 c8                	mov    eax,ecx
c0012c13:	83 c1 04             	add    ecx,0x4
c0012c16:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012c1a:	ff 30                	push   DWORD PTR [eax]
c0012c1c:	e8 14 ff ff ff       	call   c0012b35 <Dbg::logWriteInt(unsigned int)>
c0012c21:	5f                   	pop    edi
c0012c22:	eb a9                	jmp    c0012bcd <Dbg::kprintf(char const*, ...)+0x5c>
c0012c24:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012c28:	89 c8                	mov    eax,ecx
c0012c2a:	83 c1 04             	add    ecx,0x4
c0012c2d:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012c31:	6a 10                	push   0x10
c0012c33:	ff 30                	push   DWORD PTR [eax]
c0012c35:	e8 18 ff ff ff       	call   c0012b52 <Dbg::logWriteIntBase(unsigned int, int)>
c0012c3a:	59                   	pop    ecx
c0012c3b:	5f                   	pop    edi
c0012c3c:	eb 8f                	jmp    c0012bcd <Dbg::kprintf(char const*, ...)+0x5c>
c0012c3e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012c42:	89 d0                	mov    eax,edx
c0012c44:	83 c2 08             	add    edx,0x8
c0012c47:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012c4b:	6a 10                	push   0x10
c0012c4d:	ff 30                	push   DWORD PTR [eax]
c0012c4f:	e8 fe fe ff ff       	call   c0012b52 <Dbg::logWriteIntBase(unsigned int, int)>
c0012c54:	58                   	pop    eax
c0012c55:	5a                   	pop    edx
c0012c56:	e9 72 ff ff ff       	jmp    c0012bcd <Dbg::kprintf(char const*, ...)+0x5c>
c0012c5b:	6a 25                	push   0x25
c0012c5d:	e8 9f fe ff ff       	call   c0012b01 <Dbg::logc(char)>
c0012c62:	58                   	pop    eax
c0012c63:	e9 65 ff ff ff       	jmp    c0012bcd <Dbg::kprintf(char const*, ...)+0x5c>
c0012c68:	6a 25                	push   0x25
c0012c6a:	e8 92 fe ff ff       	call   c0012b01 <Dbg::logc(char)>
c0012c6f:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012c72:	50                   	push   eax
c0012c73:	e8 89 fe ff ff       	call   c0012b01 <Dbg::logc(char)>
c0012c78:	5a                   	pop    edx
c0012c79:	59                   	pop    ecx
c0012c7a:	e9 4e ff ff ff       	jmp    c0012bcd <Dbg::kprintf(char const*, ...)+0x5c>
c0012c7f:	50                   	push   eax
c0012c80:	89 eb                	mov    ebx,ebp
c0012c82:	e8 7a fe ff ff       	call   c0012b01 <Dbg::logc(char)>
c0012c87:	89 fd                	mov    ebp,edi
c0012c89:	58                   	pop    eax
c0012c8a:	e9 3e ff ff ff       	jmp    c0012bcd <Dbg::kprintf(char const*, ...)+0x5c>
c0012c8f:	90                   	nop

c0012c90 <File::read(unsigned long long, void*, int*)>:
c0012c90:	53                   	push   ebx
c0012c91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012c95:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012c99:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012ca0:	3c 19                	cmp    al,0x19
c0012ca2:	77 35                	ja     c0012cd9 <File::read(unsigned long long, void*, int*)+0x49>
c0012ca4:	8b 04 85 20 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd19e0]
c0012cab:	85 c0                	test   eax,eax
c0012cad:	74 2a                	je     c0012cd9 <File::read(unsigned long long, void*, int*)+0x49>
c0012caf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012cb5:	85 c0                	test   eax,eax
c0012cb7:	74 20                	je     c0012cd9 <File::read(unsigned long long, void*, int*)+0x49>
c0012cb9:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012cbd:	74 21                	je     c0012ce0 <File::read(unsigned long long, void*, int*)+0x50>
c0012cbf:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012cc1:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012cc5:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012ccb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ccf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012cd3:	5b                   	pop    ebx
c0012cd4:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012cd7:	ff e0                	jmp    eax
c0012cd9:	b8 0b 00 00 00       	mov    eax,0xb
c0012cde:	eb 05                	jmp    c0012ce5 <File::read(unsigned long long, void*, int*)+0x55>
c0012ce0:	b8 05 00 00 00       	mov    eax,0x5
c0012ce5:	5b                   	pop    ebx
c0012ce6:	c3                   	ret    
c0012ce7:	90                   	nop

c0012ce8 <File::write(unsigned long long, void*, int*)>:
c0012ce8:	53                   	push   ebx
c0012ce9:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ced:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012cf1:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012cf8:	3c 19                	cmp    al,0x19
c0012cfa:	77 35                	ja     c0012d31 <File::write(unsigned long long, void*, int*)+0x49>
c0012cfc:	8b 04 85 20 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd19e0]
c0012d03:	85 c0                	test   eax,eax
c0012d05:	74 2a                	je     c0012d31 <File::write(unsigned long long, void*, int*)+0x49>
c0012d07:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d0d:	85 c0                	test   eax,eax
c0012d0f:	74 20                	je     c0012d31 <File::write(unsigned long long, void*, int*)+0x49>
c0012d11:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d15:	74 21                	je     c0012d38 <File::write(unsigned long long, void*, int*)+0x50>
c0012d17:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012d19:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012d1d:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012d23:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012d27:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012d2b:	5b                   	pop    ebx
c0012d2c:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0012d2f:	ff e0                	jmp    eax
c0012d31:	b8 0b 00 00 00       	mov    eax,0xb
c0012d36:	eb 05                	jmp    c0012d3d <File::write(unsigned long long, void*, int*)+0x55>
c0012d38:	b8 05 00 00 00       	mov    eax,0x5
c0012d3d:	5b                   	pop    ebx
c0012d3e:	c3                   	ret    
c0012d3f:	90                   	nop

c0012d40 <Directory::read(unsigned long long, void*, int*)>:
c0012d40:	53                   	push   ebx
c0012d41:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012d45:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012d49:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012d50:	3c 19                	cmp    al,0x19
c0012d52:	77 35                	ja     c0012d89 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012d54:	8b 04 85 20 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd19e0]
c0012d5b:	85 c0                	test   eax,eax
c0012d5d:	74 2a                	je     c0012d89 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012d5f:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012d65:	85 c0                	test   eax,eax
c0012d67:	74 20                	je     c0012d89 <Directory::read(unsigned long long, void*, int*)+0x49>
c0012d69:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012d6d:	74 21                	je     c0012d90 <Directory::read(unsigned long long, void*, int*)+0x50>
c0012d6f:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012d71:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012d75:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012d7b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012d7f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012d83:	5b                   	pop    ebx
c0012d84:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c0012d87:	ff e0                	jmp    eax
c0012d89:	b8 0b 00 00 00       	mov    eax,0xb
c0012d8e:	eb 05                	jmp    c0012d95 <Directory::read(unsigned long long, void*, int*)+0x55>
c0012d90:	b8 05 00 00 00       	mov    eax,0x5
c0012d95:	5b                   	pop    ebx
c0012d96:	c3                   	ret    
c0012d97:	90                   	nop

c0012d98 <Directory::write(unsigned long long, void*, int*)>:
c0012d98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012d9c:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0012da3:	b8 0b 00 00 00       	mov    eax,0xb
c0012da8:	80 fa 19             	cmp    dl,0x19
c0012dab:	77 18                	ja     c0012dc5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012dad:	8b 14 95 20 e6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd19e0]
c0012db4:	85 d2                	test   edx,edx
c0012db6:	74 0d                	je     c0012dc5 <Directory::write(unsigned long long, void*, int*)+0x2d>
c0012db8:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0012dbf:	19 c0                	sbb    eax,eax
c0012dc1:	83 e0 0a             	and    eax,0xa
c0012dc4:	40                   	inc    eax
c0012dc5:	c3                   	ret    

c0012dc6 <File::isAtty()>:
c0012dc6:	31 c0                	xor    eax,eax
c0012dc8:	c3                   	ret    
c0012dc9:	90                   	nop

c0012dca <Directory::isAtty()>:
c0012dca:	31 c0                	xor    eax,eax
c0012dcc:	c3                   	ret    
c0012dcd:	90                   	nop

c0012dce <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0012dce:	b8 0a 00 00 00       	mov    eax,0xa
c0012dd3:	c3                   	ret    

c0012dd4 <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c0012dd4:	b8 0a 00 00 00       	mov    eax,0xa
c0012dd9:	c3                   	ret    

c0012dda <File::~File()>:
c0012dda:	83 ec 0c             	sub    esp,0xc
c0012ddd:	ba b0 a6 02 c0       	mov    edx,0xc002a6b0
c0012de2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012de6:	89 10                	mov    DWORD PTR [eax],edx
c0012de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012dec:	83 ec 0c             	sub    esp,0xc
c0012def:	50                   	push   eax
c0012df0:	e8 2b eb ff ff       	call   c0011920 <UnixFile::~UnixFile()>
c0012df5:	83 c4 10             	add    esp,0x10
c0012df8:	90                   	nop
c0012df9:	83 c4 0c             	add    esp,0xc
c0012dfc:	c3                   	ret    
c0012dfd:	90                   	nop

c0012dfe <File::~File()>:
c0012dfe:	83 ec 0c             	sub    esp,0xc
c0012e01:	83 ec 0c             	sub    esp,0xc
c0012e04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e08:	e8 cd ff ff ff       	call   c0012dda <File::~File()>
c0012e0d:	83 c4 10             	add    esp,0x10
c0012e10:	83 ec 08             	sub    esp,0x8
c0012e13:	68 14 01 00 00       	push   0x114
c0012e18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e1c:	e8 70 fc ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0012e21:	83 c4 10             	add    esp,0x10
c0012e24:	83 c4 0c             	add    esp,0xc
c0012e27:	c3                   	ret    

c0012e28 <Directory::~Directory()>:
c0012e28:	83 ec 0c             	sub    esp,0xc
c0012e2b:	ba cc a6 02 c0       	mov    edx,0xc002a6cc
c0012e30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e34:	89 10                	mov    DWORD PTR [eax],edx
c0012e36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012e3a:	83 ec 0c             	sub    esp,0xc
c0012e3d:	50                   	push   eax
c0012e3e:	e8 dd ea ff ff       	call   c0011920 <UnixFile::~UnixFile()>
c0012e43:	83 c4 10             	add    esp,0x10
c0012e46:	90                   	nop
c0012e47:	83 c4 0c             	add    esp,0xc
c0012e4a:	c3                   	ret    
c0012e4b:	90                   	nop

c0012e4c <Directory::~Directory()>:
c0012e4c:	83 ec 0c             	sub    esp,0xc
c0012e4f:	83 ec 0c             	sub    esp,0xc
c0012e52:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e56:	e8 cd ff ff ff       	call   c0012e28 <Directory::~Directory()>
c0012e5b:	83 c4 10             	add    esp,0x10
c0012e5e:	83 ec 08             	sub    esp,0x8
c0012e61:	68 14 01 00 00       	push   0x114
c0012e66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e6a:	e8 22 fc ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0012e6f:	83 c4 10             	add    esp,0x10
c0012e72:	83 c4 0c             	add    esp,0xc
c0012e75:	c3                   	ret    

c0012e76 <Filesystem::Filesystem()>:
c0012e76:	ba 4c a6 02 c0       	mov    edx,0xc002a64c
c0012e7b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e7f:	89 10                	mov    DWORD PTR [eax],edx
c0012e81:	8b 15 88 e1 02 c0    	mov    edx,DWORD PTR ds:0xc002e188
c0012e87:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e8b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0012e8e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012e92:	a3 88 e1 02 c0       	mov    ds:0xc002e188,eax
c0012e97:	90                   	nop
c0012e98:	c3                   	ret    
c0012e99:	90                   	nop

c0012e9a <Filesystem::~Filesystem()>:
c0012e9a:	ba 4c a6 02 c0       	mov    edx,0xc002a64c
c0012e9f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012ea3:	89 10                	mov    DWORD PTR [eax],edx
c0012ea5:	90                   	nop
c0012ea6:	c3                   	ret    
c0012ea7:	90                   	nop

c0012ea8 <Filesystem::~Filesystem()>:
c0012ea8:	83 ec 0c             	sub    esp,0xc
c0012eab:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0012eaf:	e8 e6 ff ff ff       	call   c0012e9a <Filesystem::~Filesystem()>
c0012eb4:	83 c4 04             	add    esp,0x4
c0012eb7:	83 ec 08             	sub    esp,0x8
c0012eba:	6a 08                	push   0x8
c0012ebc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012ec0:	e8 cc fb ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0012ec5:	83 c4 10             	add    esp,0x10
c0012ec8:	83 c4 0c             	add    esp,0xc
c0012ecb:	c3                   	ret    

c0012ecc <Fs::getcwd(Process*, char*, int)>:
c0012ecc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012ed0:	31 c0                	xor    eax,eax
c0012ed2:	8d 0c 02             	lea    ecx,[edx+eax*1]
c0012ed5:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0012ed9:	7d 15                	jge    c0012ef0 <Fs::getcwd(Process*, char*, int)+0x24>
c0012edb:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012edf:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c0012ee6:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c0012ee9:	84 c9                	test   cl,cl
c0012eeb:	74 06                	je     c0012ef3 <Fs::getcwd(Process*, char*, int)+0x27>
c0012eed:	40                   	inc    eax
c0012eee:	eb e2                	jmp    c0012ed2 <Fs::getcwd(Process*, char*, int)+0x6>
c0012ef0:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c0012ef3:	31 c0                	xor    eax,eax
c0012ef5:	c3                   	ret    

c0012ef6 <Fs::initVFS()>:
c0012ef6:	83 ec 18             	sub    esp,0x18
c0012ef9:	6a 08                	push   0x8
c0012efb:	e8 40 c9 ff ff       	call   c000f840 <malloc>
c0012f00:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f03:	e8 7e dc 00 00       	call   c0020b86 <FAT::FAT()>
c0012f08:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0012f0f:	e8 2c c9 ff ff       	call   c000f840 <malloc>
c0012f14:	89 04 24             	mov    DWORD PTR [esp],eax
c0012f17:	e8 c2 ee 00 00       	call   c0021dde <ISO9660::ISO9660()>
c0012f1c:	83 c4 1c             	add    esp,0x1c
c0012f1f:	c3                   	ret    

c0012f20 <Fs::standardiseFiles(char*, char const*, char const*)>:
c0012f20:	55                   	push   ebp
c0012f21:	57                   	push   edi
c0012f22:	56                   	push   esi
c0012f23:	53                   	push   ebx
c0012f24:	81 ec 10 04 00 00    	sub    esp,0x410
c0012f2a:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c0012f31:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0012f38:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c0012f3f:	68 00 04 00 00       	push   0x400
c0012f44:	6a 00                	push   0x0
c0012f46:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0012f4a:	56                   	push   esi
c0012f4b:	e8 28 d8 fe ff       	call   c0000778 <memset>
c0012f50:	83 c4 10             	add    esp,0x10
c0012f53:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0012f57:	75 0b                	jne    c0012f64 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0012f59:	50                   	push   eax
c0012f5a:	50                   	push   eax
c0012f5b:	57                   	push   edi
c0012f5c:	56                   	push   esi
c0012f5d:	e8 d2 d8 fe ff       	call   c0000834 <strcpy>
c0012f62:	eb 41                	jmp    c0012fa5 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0012f64:	8a 07                	mov    al,BYTE PTR [edi]
c0012f66:	3c 5c                	cmp    al,0x5c
c0012f68:	74 04                	je     c0012f6e <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0012f6a:	3c 2f                	cmp    al,0x2f
c0012f6c:	75 18                	jne    c0012f86 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c0012f6e:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0012f71:	3c 60                	cmp    al,0x60
c0012f73:	7e 03                	jle    c0012f78 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0012f75:	83 e8 20             	sub    eax,0x20
c0012f78:	88 04 24             	mov    BYTE PTR [esp],al
c0012f7b:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012f82:	50                   	push   eax
c0012f83:	50                   	push   eax
c0012f84:	eb 18                	jmp    c0012f9e <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0012f86:	50                   	push   eax
c0012f87:	50                   	push   eax
c0012f88:	55                   	push   ebp
c0012f89:	56                   	push   esi
c0012f8a:	e8 a5 d8 fe ff       	call   c0000834 <strcpy>
c0012f8f:	5a                   	pop    edx
c0012f90:	59                   	pop    ecx
c0012f91:	68 e1 bd 02 c0       	push   0xc002bde1
c0012f96:	56                   	push   esi
c0012f97:	e8 d8 d9 fe ff       	call   c0000974 <strcat>
c0012f9c:	5d                   	pop    ebp
c0012f9d:	58                   	pop    eax
c0012f9e:	57                   	push   edi
c0012f9f:	56                   	push   esi
c0012fa0:	e8 cf d9 fe ff       	call   c0000974 <strcat>
c0012fa5:	83 c4 10             	add    esp,0x10
c0012fa8:	8a 04 24             	mov    al,BYTE PTR [esp]
c0012fab:	3c 60                	cmp    al,0x60
c0012fad:	7e 03                	jle    c0012fb2 <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c0012faf:	83 e8 20             	sub    eax,0x20
c0012fb2:	88 04 24             	mov    BYTE PTR [esp],al
c0012fb5:	88 03                	mov    BYTE PTR [ebx],al
c0012fb7:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c0012fbe:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c0012fc4:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0012fc8:	bf 03 00 00 00       	mov    edi,0x3
c0012fcd:	b8 03 00 00 00       	mov    eax,0x3
c0012fd2:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c0012fd5:	84 d2                	test   dl,dl
c0012fd7:	0f 84 91 00 00 00    	je     c001306e <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c0012fdd:	8d 4f 01             	lea    ecx,[edi+0x1]
c0012fe0:	80 fa 5c             	cmp    dl,0x5c
c0012fe3:	74 05                	je     c0012fea <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c0012fe5:	80 fa 2f             	cmp    dl,0x2f
c0012fe8:	75 12                	jne    c0012ffc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012fea:	89 c5                	mov    ebp,eax
c0012fec:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0012ff1:	74 09                	je     c0012ffc <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c0012ff3:	40                   	inc    eax
c0012ff4:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c0012ff8:	89 cf                	mov    edi,ecx
c0012ffa:	eb d6                	jmp    c0012fd2 <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c0012ffc:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c0013001:	75 5b                	jne    c001305e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013003:	80 fa 2e             	cmp    dl,0x2e
c0013006:	75 56                	jne    c001305e <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c0013008:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c001300c:	74 19                	je     c0013027 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c001300e:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013013:	74 53                	je     c0013068 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c0013015:	89 f9                	mov    ecx,edi
c0013017:	41                   	inc    ecx
c0013018:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c001301b:	80 fa 2f             	cmp    dl,0x2f
c001301e:	74 f7                	je     c0013017 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013020:	80 fa 5c             	cmp    dl,0x5c
c0013023:	74 f2                	je     c0013017 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013025:	eb d1                	jmp    c0012ff8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013027:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c001302c:	74 3a                	je     c0013068 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001302e:	83 f8 03             	cmp    eax,0x3
c0013031:	74 c5                	je     c0012ff8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013033:	41                   	inc    ecx
c0013034:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013037:	80 fa 2f             	cmp    dl,0x2f
c001303a:	74 f7                	je     c0013033 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001303c:	80 fa 5c             	cmp    dl,0x5c
c001303f:	74 f2                	je     c0013033 <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013041:	48                   	dec    eax
c0013042:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013046:	75 06                	jne    c001304e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013048:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001304c:	eb f3                	jmp    c0013041 <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c001304e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013052:	74 07                	je     c001305b <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013054:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013058:	48                   	dec    eax
c0013059:	eb f3                	jmp    c001304e <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c001305b:	40                   	inc    eax
c001305c:	eb 9a                	jmp    c0012ff8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001305e:	80 fa 2f             	cmp    dl,0x2f
c0013061:	74 95                	je     c0012ff8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013063:	80 fa 5c             	cmp    dl,0x5c
c0013066:	74 90                	je     c0012ff8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013068:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c001306b:	40                   	inc    eax
c001306c:	eb 8a                	jmp    c0012ff8 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001306e:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013072:	83 ec 0c             	sub    esp,0xc
c0013075:	53                   	push   ebx
c0013076:	e8 19 d7 fe ff       	call   c0000794 <strlen>
c001307b:	83 c4 10             	add    esp,0x10
c001307e:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c0013083:	75 26                	jne    c00130ab <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013085:	83 ec 0c             	sub    esp,0xc
c0013088:	53                   	push   ebx
c0013089:	e8 06 d7 fe ff       	call   c0000794 <strlen>
c001308e:	83 c4 10             	add    esp,0x10
c0013091:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013096:	74 26                	je     c00130be <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013098:	83 ec 0c             	sub    esp,0xc
c001309b:	53                   	push   ebx
c001309c:	e8 f3 d6 fe ff       	call   c0000794 <strlen>
c00130a1:	83 c4 10             	add    esp,0x10
c00130a4:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00130a9:	eb c7                	jmp    c0013072 <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c00130ab:	83 ec 0c             	sub    esp,0xc
c00130ae:	53                   	push   ebx
c00130af:	e8 e0 d6 fe ff       	call   c0000794 <strlen>
c00130b4:	83 c4 10             	add    esp,0x10
c00130b7:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00130bc:	74 c7                	je     c0013085 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c00130be:	81 c4 0c 04 00 00    	add    esp,0x40c
c00130c4:	5b                   	pop    ebx
c00130c5:	5e                   	pop    esi
c00130c6:	5f                   	pop    edi
c00130c7:	5d                   	pop    ebp
c00130c8:	c3                   	ret    
c00130c9:	90                   	nop

c00130ca <File::File(char const*, Process*)>:
c00130ca:	83 ec 0c             	sub    esp,0xc
c00130cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130d1:	83 ec 08             	sub    esp,0x8
c00130d4:	6a 00                	push   0x0
c00130d6:	50                   	push   eax
c00130d7:	e8 62 e6 ff ff       	call   c001173e <UnixFile::UnixFile(int)>
c00130dc:	83 c4 10             	add    esp,0x10
c00130df:	ba b0 a6 02 c0       	mov    edx,0xc002a6b0
c00130e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130e8:	89 10                	mov    DWORD PTR [eax],edx
c00130ea:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00130ee:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00130f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130f8:	83 c0 0d             	add    eax,0xd
c00130fb:	83 ec 04             	sub    esp,0x4
c00130fe:	52                   	push   edx
c00130ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013103:	50                   	push   eax
c0013104:	e8 17 fe ff ff       	call   c0012f20 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013109:	83 c4 10             	add    esp,0x10
c001310c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013110:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c0013113:	8d 50 bf             	lea    edx,[eax-0x41]
c0013116:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001311a:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c0013120:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013124:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013128:	90                   	nop
c0013129:	83 c4 0c             	add    esp,0xc
c001312c:	c3                   	ret    
c001312d:	90                   	nop

c001312e <File::open(FileOpenMode)>:
c001312e:	53                   	push   ebx
c001312f:	b8 0b 00 00 00       	mov    eax,0xb
c0013134:	83 ec 08             	sub    esp,0x8
c0013137:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001313b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c0013142:	80 fa 19             	cmp    dl,0x19
c0013145:	77 40                	ja     c0013187 <File::open(FileOpenMode)+0x59>
c0013147:	8b 14 95 20 e6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd19e0]
c001314e:	85 d2                	test   edx,edx
c0013150:	74 35                	je     c0013187 <File::open(FileOpenMode)+0x59>
c0013152:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013158:	85 d2                	test   edx,edx
c001315a:	74 2b                	je     c0013187 <File::open(FileOpenMode)+0x59>
c001315c:	b8 06 00 00 00       	mov    eax,0x6
c0013161:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013165:	75 20                	jne    c0013187 <File::open(FileOpenMode)+0x59>
c0013167:	8b 02                	mov    eax,DWORD PTR [edx]
c0013169:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001316f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0013173:	51                   	push   ecx
c0013174:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013177:	51                   	push   ecx
c0013178:	52                   	push   edx
c0013179:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001317c:	83 c4 10             	add    esp,0x10
c001317f:	85 c0                	test   eax,eax
c0013181:	75 04                	jne    c0013187 <File::open(FileOpenMode)+0x59>
c0013183:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013187:	83 c4 08             	add    esp,0x8
c001318a:	5b                   	pop    ebx
c001318b:	c3                   	ret    

c001318c <File::close()>:
c001318c:	53                   	push   ebx
c001318d:	b8 0b 00 00 00       	mov    eax,0xb
c0013192:	83 ec 08             	sub    esp,0x8
c0013195:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013199:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c00131a0:	80 fa 19             	cmp    dl,0x19
c00131a3:	77 41                	ja     c00131e6 <File::close()+0x5a>
c00131a5:	8b 1c 95 20 e6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd19e0]
c00131ac:	85 db                	test   ebx,ebx
c00131ae:	74 36                	je     c00131e6 <File::close()+0x5a>
c00131b0:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c00131b7:	74 2d                	je     c00131e6 <File::close()+0x5a>
c00131b9:	b8 05 00 00 00       	mov    eax,0x5
c00131be:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c00131c2:	74 22                	je     c00131e6 <File::close()+0x5a>
c00131c4:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00131c8:	8b 04 95 20 e6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd19e0]
c00131cf:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00131d5:	53                   	push   ebx
c00131d6:	53                   	push   ebx
c00131d7:	8b 10                	mov    edx,DWORD PTR [eax]
c00131d9:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00131df:	50                   	push   eax
c00131e0:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00131e3:	83 c4 10             	add    esp,0x10
c00131e6:	83 c4 08             	add    esp,0x8
c00131e9:	5b                   	pop    ebx
c00131ea:	c3                   	ret    
c00131eb:	90                   	nop

c00131ec <File::seek(unsigned long long)>:
c00131ec:	56                   	push   esi
c00131ed:	53                   	push   ebx
c00131ee:	b8 0b 00 00 00       	mov    eax,0xb
c00131f3:	51                   	push   ecx
c00131f4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00131f8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00131fc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c0013203:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013207:	80 fa 19             	cmp    dl,0x19
c001320a:	77 31                	ja     c001323d <File::seek(unsigned long long)+0x51>
c001320c:	8b 14 95 20 e6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd19e0]
c0013213:	85 d2                	test   edx,edx
c0013215:	74 26                	je     c001323d <File::seek(unsigned long long)+0x51>
c0013217:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001321d:	85 d2                	test   edx,edx
c001321f:	74 1c                	je     c001323d <File::seek(unsigned long long)+0x51>
c0013221:	b8 05 00 00 00       	mov    eax,0x5
c0013226:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c001322a:	74 11                	je     c001323d <File::seek(unsigned long long)+0x51>
c001322c:	8b 02                	mov    eax,DWORD PTR [edx]
c001322e:	53                   	push   ebx
c001322f:	51                   	push   ecx
c0013230:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013236:	52                   	push   edx
c0013237:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001323a:	83 c4 10             	add    esp,0x10
c001323d:	5a                   	pop    edx
c001323e:	5b                   	pop    ebx
c001323f:	5e                   	pop    esi
c0013240:	c3                   	ret    
c0013241:	90                   	nop

c0013242 <File::tell(unsigned long long*)>:
c0013242:	83 ec 0c             	sub    esp,0xc
c0013245:	b8 0b 00 00 00       	mov    eax,0xb
c001324a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001324e:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013255:	80 fa 19             	cmp    dl,0x19
c0013258:	77 34                	ja     c001328e <File::tell(unsigned long long*)+0x4c>
c001325a:	8b 14 95 20 e6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd19e0]
c0013261:	85 d2                	test   edx,edx
c0013263:	74 29                	je     c001328e <File::tell(unsigned long long*)+0x4c>
c0013265:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c001326b:	85 d2                	test   edx,edx
c001326d:	74 1f                	je     c001328e <File::tell(unsigned long long*)+0x4c>
c001326f:	b8 05 00 00 00       	mov    eax,0x5
c0013274:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013278:	74 14                	je     c001328e <File::tell(unsigned long long*)+0x4c>
c001327a:	50                   	push   eax
c001327b:	8b 02                	mov    eax,DWORD PTR [edx]
c001327d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013281:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013287:	52                   	push   edx
c0013288:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001328b:	83 c4 10             	add    esp,0x10
c001328e:	83 c4 0c             	add    esp,0xc
c0013291:	c3                   	ret    

c0013292 <File::rewind()>:
c0013292:	83 ec 10             	sub    esp,0x10
c0013295:	6a 00                	push   0x0
c0013297:	6a 00                	push   0x0
c0013299:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001329d:	e8 4a ff ff ff       	call   c00131ec <File::seek(unsigned long long)>
c00132a2:	83 c4 1c             	add    esp,0x1c
c00132a5:	c3                   	ret    

c00132a6 <File::unlink()>:
c00132a6:	83 ec 0c             	sub    esp,0xc
c00132a9:	b8 0b 00 00 00       	mov    eax,0xb
c00132ae:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132b2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00132b9:	80 f9 19             	cmp    cl,0x19
c00132bc:	77 2f                	ja     c00132ed <File::unlink()+0x47>
c00132be:	8b 0c 8d 20 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd19e0]
c00132c5:	85 c9                	test   ecx,ecx
c00132c7:	74 24                	je     c00132ed <File::unlink()+0x47>
c00132c9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00132cf:	85 c9                	test   ecx,ecx
c00132d1:	74 1a                	je     c00132ed <File::unlink()+0x47>
c00132d3:	b8 06 00 00 00       	mov    eax,0x6
c00132d8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00132dc:	75 0f                	jne    c00132ed <File::unlink()+0x47>
c00132de:	83 c2 0d             	add    edx,0xd
c00132e1:	50                   	push   eax
c00132e2:	50                   	push   eax
c00132e3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00132e5:	52                   	push   edx
c00132e6:	51                   	push   ecx
c00132e7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00132ea:	83 c4 10             	add    esp,0x10
c00132ed:	83 c4 0c             	add    esp,0xc
c00132f0:	c3                   	ret    
c00132f1:	90                   	nop

c00132f2 <File::rename(char const*)>:
c00132f2:	83 ec 0c             	sub    esp,0xc
c00132f5:	b8 0b 00 00 00       	mov    eax,0xb
c00132fa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00132fe:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013305:	80 f9 19             	cmp    cl,0x19
c0013308:	77 32                	ja     c001333c <File::rename(char const*)+0x4a>
c001330a:	8b 0c 8d 20 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd19e0]
c0013311:	85 c9                	test   ecx,ecx
c0013313:	74 27                	je     c001333c <File::rename(char const*)+0x4a>
c0013315:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001331b:	85 c9                	test   ecx,ecx
c001331d:	74 1d                	je     c001333c <File::rename(char const*)+0x4a>
c001331f:	b8 06 00 00 00       	mov    eax,0x6
c0013324:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013328:	75 12                	jne    c001333c <File::rename(char const*)+0x4a>
c001332a:	83 c2 0d             	add    edx,0xd
c001332d:	50                   	push   eax
c001332e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013330:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013334:	52                   	push   edx
c0013335:	51                   	push   ecx
c0013336:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013339:	83 c4 10             	add    esp,0x10
c001333c:	83 c4 0c             	add    esp,0xc
c001333f:	c3                   	ret    

c0013340 <File::chfatattr(unsigned char, unsigned char)>:
c0013340:	57                   	push   edi
c0013341:	b8 0b 00 00 00       	mov    eax,0xb
c0013346:	56                   	push   esi
c0013347:	53                   	push   ebx
c0013348:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001334c:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013350:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013357:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001335b:	80 f9 19             	cmp    cl,0x19
c001335e:	77 37                	ja     c0013397 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013360:	8b 0c 8d 20 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd19e0]
c0013367:	85 c9                	test   ecx,ecx
c0013369:	74 2c                	je     c0013397 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001336b:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013371:	85 c9                	test   ecx,ecx
c0013373:	74 22                	je     c0013397 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013375:	b8 06 00 00 00       	mov    eax,0x6
c001337a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001337e:	75 17                	jne    c0013397 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013380:	8b 39                	mov    edi,DWORD PTR [ecx]
c0013382:	89 f0                	mov    eax,esi
c0013384:	83 c2 0d             	add    edx,0xd
c0013387:	0f b6 f0             	movzx  esi,al
c001338a:	0f b6 db             	movzx  ebx,bl
c001338d:	56                   	push   esi
c001338e:	53                   	push   ebx
c001338f:	52                   	push   edx
c0013390:	51                   	push   ecx
c0013391:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013394:	83 c4 10             	add    esp,0x10
c0013397:	5b                   	pop    ebx
c0013398:	5e                   	pop    esi
c0013399:	5f                   	pop    edi
c001339a:	c3                   	ret    
c001339b:	90                   	nop

c001339c <File::exists()>:
c001339c:	83 ec 0c             	sub    esp,0xc
c001339f:	31 c0                	xor    eax,eax
c00133a1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133a5:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133ac:	80 f9 19             	cmp    cl,0x19
c00133af:	77 24                	ja     c00133d5 <File::exists()+0x39>
c00133b1:	8b 0c 8d 20 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd19e0]
c00133b8:	85 c9                	test   ecx,ecx
c00133ba:	74 19                	je     c00133d5 <File::exists()+0x39>
c00133bc:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00133c2:	85 c9                	test   ecx,ecx
c00133c4:	74 0f                	je     c00133d5 <File::exists()+0x39>
c00133c6:	83 c2 0d             	add    edx,0xd
c00133c9:	50                   	push   eax
c00133ca:	50                   	push   eax
c00133cb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00133cd:	52                   	push   edx
c00133ce:	51                   	push   ecx
c00133cf:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00133d2:	83 c4 10             	add    esp,0x10
c00133d5:	83 c4 0c             	add    esp,0xc
c00133d8:	c3                   	ret    
c00133d9:	90                   	nop

c00133da <File::stat(unsigned long long*, bool*)>:
c00133da:	56                   	push   esi
c00133db:	53                   	push   ebx
c00133dc:	50                   	push   eax
c00133dd:	b8 0b 00 00 00       	mov    eax,0xb
c00133e2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00133e6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00133ea:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00133f1:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00133f5:	80 f9 19             	cmp    cl,0x19
c00133f8:	77 3d                	ja     c0013437 <File::stat(unsigned long long*, bool*)+0x5d>
c00133fa:	8b 0c 8d 20 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd19e0]
c0013401:	85 c9                	test   ecx,ecx
c0013403:	74 32                	je     c0013437 <File::stat(unsigned long long*, bool*)+0x5d>
c0013405:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001340b:	85 c9                	test   ecx,ecx
c001340d:	74 28                	je     c0013437 <File::stat(unsigned long long*, bool*)+0x5d>
c001340f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013411:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013415:	74 13                	je     c001342a <File::stat(unsigned long long*, bool*)+0x50>
c0013417:	83 ec 04             	sub    esp,0x4
c001341a:	56                   	push   esi
c001341b:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c0013421:	51                   	push   ecx
c0013422:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013425:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013428:	eb 0a                	jmp    c0013434 <File::stat(unsigned long long*, bool*)+0x5a>
c001342a:	53                   	push   ebx
c001342b:	83 c2 0d             	add    edx,0xd
c001342e:	56                   	push   esi
c001342f:	52                   	push   edx
c0013430:	51                   	push   ecx
c0013431:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013434:	83 c4 10             	add    esp,0x10
c0013437:	5a                   	pop    edx
c0013438:	5b                   	pop    ebx
c0013439:	5e                   	pop    esi
c001343a:	c3                   	ret    

c001343b <Fs::setcwd(Process*, char*)>:
c001343b:	55                   	push   ebp
c001343c:	57                   	push   edi
c001343d:	56                   	push   esi
c001343e:	53                   	push   ebx
c001343f:	81 ec 20 02 00 00    	sub    esp,0x220
c0013445:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c001344c:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c0013452:	57                   	push   edi
c0013453:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c001345a:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001345e:	56                   	push   esi
c001345f:	e8 bc fa ff ff       	call   c0012f20 <Fs::standardiseFiles(char*, char const*, char const*)>
c0013464:	89 34 24             	mov    DWORD PTR [esp],esi
c0013467:	e8 28 d3 fe ff       	call   c0000794 <strlen>
c001346c:	83 c4 10             	add    esp,0x10
c001346f:	83 f8 02             	cmp    eax,0x2
c0013472:	77 17                	ja     c001348b <Fs::setcwd(Process*, char*)+0x50>
c0013474:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013479:	83 e8 41             	sub    eax,0x41
c001347c:	83 f8 19             	cmp    eax,0x19
c001347f:	76 24                	jbe    c00134a5 <Fs::setcwd(Process*, char*)+0x6a>
c0013481:	b8 03 00 00 00       	mov    eax,0x3
c0013486:	e9 e0 00 00 00       	jmp    c001356b <Fs::setcwd(Process*, char*)+0x130>
c001348b:	83 ec 0c             	sub    esp,0xc
c001348e:	56                   	push   esi
c001348f:	e8 00 d3 fe ff       	call   c0000794 <strlen>
c0013494:	83 c4 10             	add    esp,0x10
c0013497:	83 f8 03             	cmp    eax,0x3
c001349a:	75 34                	jne    c00134d0 <Fs::setcwd(Process*, char*)+0x95>
c001349c:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c00134a1:	75 2d                	jne    c00134d0 <Fs::setcwd(Process*, char*)+0x95>
c00134a3:	eb cf                	jmp    c0013474 <Fs::setcwd(Process*, char*)+0x39>
c00134a5:	8b 14 85 20 e6 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd19e0]
c00134ac:	b8 05 00 00 00       	mov    eax,0x5
c00134b1:	85 d2                	test   edx,edx
c00134b3:	0f 84 b2 00 00 00    	je     c001356b <Fs::setcwd(Process*, char*)+0x130>
c00134b9:	b8 06 00 00 00       	mov    eax,0x6
c00134be:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00134c5:	0f 85 92 00 00 00    	jne    c001355d <Fs::setcwd(Process*, char*)+0x122>
c00134cb:	e9 9b 00 00 00       	jmp    c001356b <Fs::setcwd(Process*, char*)+0x130>
c00134d0:	83 ec 0c             	sub    esp,0xc
c00134d3:	68 14 01 00 00       	push   0x114
c00134d8:	e8 63 c3 ff ff       	call   c000f840 <malloc>
c00134dd:	83 c4 0c             	add    esp,0xc
c00134e0:	89 c3                	mov    ebx,eax
c00134e2:	55                   	push   ebp
c00134e3:	56                   	push   esi
c00134e4:	50                   	push   eax
c00134e5:	e8 e0 fb ff ff       	call   c00130ca <File::File(char const*, Process*)>
c00134ea:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00134ef:	83 c4 0c             	add    esp,0xc
c00134f2:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00134f6:	50                   	push   eax
c00134f7:	8d 44 24 10          	lea    eax,[esp+0x10]
c00134fb:	50                   	push   eax
c00134fc:	53                   	push   ebx
c00134fd:	e8 d8 fe ff ff       	call   c00133da <File::stat(unsigned long long*, bool*)>
c0013502:	83 c4 10             	add    esp,0x10
c0013505:	83 f8 02             	cmp    eax,0x2
c0013508:	74 04                	je     c001350e <Fs::setcwd(Process*, char*)+0xd3>
c001350a:	85 c0                	test   eax,eax
c001350c:	74 1c                	je     c001352a <Fs::setcwd(Process*, char*)+0xef>
c001350e:	b8 01 00 00 00       	mov    eax,0x1
c0013513:	85 db                	test   ebx,ebx
c0013515:	74 54                	je     c001356b <Fs::setcwd(Process*, char*)+0x130>
c0013517:	83 ec 0c             	sub    esp,0xc
c001351a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001351c:	53                   	push   ebx
c001351d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013520:	83 c4 10             	add    esp,0x10
c0013523:	b8 01 00 00 00       	mov    eax,0x1
c0013528:	eb 41                	jmp    c001356b <Fs::setcwd(Process*, char*)+0x130>
c001352a:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001352f:	75 1c                	jne    c001354d <Fs::setcwd(Process*, char*)+0x112>
c0013531:	b8 02 00 00 00       	mov    eax,0x2
c0013536:	85 db                	test   ebx,ebx
c0013538:	74 31                	je     c001356b <Fs::setcwd(Process*, char*)+0x130>
c001353a:	83 ec 0c             	sub    esp,0xc
c001353d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001353f:	53                   	push   ebx
c0013540:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013543:	83 c4 10             	add    esp,0x10
c0013546:	b8 02 00 00 00       	mov    eax,0x2
c001354b:	eb 1e                	jmp    c001356b <Fs::setcwd(Process*, char*)+0x130>
c001354d:	85 db                	test   ebx,ebx
c001354f:	74 0c                	je     c001355d <Fs::setcwd(Process*, char*)+0x122>
c0013551:	83 ec 0c             	sub    esp,0xc
c0013554:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013556:	53                   	push   ebx
c0013557:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001355a:	83 c4 10             	add    esp,0x10
c001355d:	50                   	push   eax
c001355e:	50                   	push   eax
c001355f:	56                   	push   esi
c0013560:	57                   	push   edi
c0013561:	e8 ce d2 fe ff       	call   c0000834 <strcpy>
c0013566:	83 c4 10             	add    esp,0x10
c0013569:	31 c0                	xor    eax,eax
c001356b:	81 c4 1c 02 00 00    	add    esp,0x21c
c0013571:	5b                   	pop    ebx
c0013572:	5e                   	pop    esi
c0013573:	5f                   	pop    edi
c0013574:	5d                   	pop    ebp
c0013575:	c3                   	ret    

c0013576 <Directory::Directory(char const*, Process*)>:
c0013576:	83 ec 0c             	sub    esp,0xc
c0013579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001357d:	83 ec 08             	sub    esp,0x8
c0013580:	6a 00                	push   0x0
c0013582:	50                   	push   eax
c0013583:	e8 b6 e1 ff ff       	call   c001173e <UnixFile::UnixFile(int)>
c0013588:	83 c4 10             	add    esp,0x10
c001358b:	ba cc a6 02 c0       	mov    edx,0xc002a6cc
c0013590:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013594:	89 10                	mov    DWORD PTR [eax],edx
c0013596:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001359a:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00135a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135a4:	83 c0 0d             	add    eax,0xd
c00135a7:	83 ec 04             	sub    esp,0x4
c00135aa:	52                   	push   edx
c00135ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00135af:	50                   	push   eax
c00135b0:	e8 6b f9 ff ff       	call   c0012f20 <Fs::standardiseFiles(char*, char const*, char const*)>
c00135b5:	83 c4 10             	add    esp,0x10
c00135b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135bc:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00135bf:	8d 50 bf             	lea    edx,[eax-0x41]
c00135c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135c6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00135cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00135d0:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00135d4:	90                   	nop
c00135d5:	83 c4 0c             	add    esp,0xc
c00135d8:	c3                   	ret    
c00135d9:	90                   	nop

c00135da <Directory::open()>:
c00135da:	53                   	push   ebx
c00135db:	b8 0b 00 00 00       	mov    eax,0xb
c00135e0:	83 ec 08             	sub    esp,0x8
c00135e3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00135e7:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00135ee:	80 fa 19             	cmp    dl,0x19
c00135f1:	77 3d                	ja     c0013630 <Directory::open()+0x56>
c00135f3:	8b 14 95 20 e6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd19e0]
c00135fa:	85 d2                	test   edx,edx
c00135fc:	74 32                	je     c0013630 <Directory::open()+0x56>
c00135fe:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013604:	85 d2                	test   edx,edx
c0013606:	74 28                	je     c0013630 <Directory::open()+0x56>
c0013608:	b8 06 00 00 00       	mov    eax,0x6
c001360d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013611:	75 1d                	jne    c0013630 <Directory::open()+0x56>
c0013613:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c0013619:	50                   	push   eax
c001361a:	8b 02                	mov    eax,DWORD PTR [edx]
c001361c:	51                   	push   ecx
c001361d:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013620:	51                   	push   ecx
c0013621:	52                   	push   edx
c0013622:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013625:	83 c4 10             	add    esp,0x10
c0013628:	85 c0                	test   eax,eax
c001362a:	75 04                	jne    c0013630 <Directory::open()+0x56>
c001362c:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013630:	83 c4 08             	add    esp,0x8
c0013633:	5b                   	pop    ebx
c0013634:	c3                   	ret    
c0013635:	90                   	nop

c0013636 <Directory::close()>:
c0013636:	53                   	push   ebx
c0013637:	b8 0b 00 00 00       	mov    eax,0xb
c001363c:	83 ec 08             	sub    esp,0x8
c001363f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013643:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001364a:	80 fa 19             	cmp    dl,0x19
c001364d:	77 41                	ja     c0013690 <Directory::close()+0x5a>
c001364f:	8b 1c 95 20 e6 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd19e0]
c0013656:	85 db                	test   ebx,ebx
c0013658:	74 36                	je     c0013690 <Directory::close()+0x5a>
c001365a:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013661:	74 2d                	je     c0013690 <Directory::close()+0x5a>
c0013663:	b8 05 00 00 00       	mov    eax,0x5
c0013668:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001366c:	74 22                	je     c0013690 <Directory::close()+0x5a>
c001366e:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c0013672:	8b 04 95 20 e6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd19e0]
c0013679:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001367f:	53                   	push   ebx
c0013680:	53                   	push   ebx
c0013681:	8b 10                	mov    edx,DWORD PTR [eax]
c0013683:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013689:	50                   	push   eax
c001368a:	ff 52 20             	call   DWORD PTR [edx+0x20]
c001368d:	83 c4 10             	add    esp,0x10
c0013690:	83 c4 08             	add    esp,0x8
c0013693:	5b                   	pop    ebx
c0013694:	c3                   	ret    
c0013695:	90                   	nop

c0013696 <Directory::unlink()>:
c0013696:	83 ec 0c             	sub    esp,0xc
c0013699:	b8 0b 00 00 00       	mov    eax,0xb
c001369e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136a2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136a9:	80 f9 19             	cmp    cl,0x19
c00136ac:	77 2f                	ja     c00136dd <Directory::unlink()+0x47>
c00136ae:	8b 0c 8d 20 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd19e0]
c00136b5:	85 c9                	test   ecx,ecx
c00136b7:	74 24                	je     c00136dd <Directory::unlink()+0x47>
c00136b9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136bf:	85 c9                	test   ecx,ecx
c00136c1:	74 1a                	je     c00136dd <Directory::unlink()+0x47>
c00136c3:	b8 06 00 00 00       	mov    eax,0x6
c00136c8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136cc:	75 0f                	jne    c00136dd <Directory::unlink()+0x47>
c00136ce:	83 c2 0d             	add    edx,0xd
c00136d1:	50                   	push   eax
c00136d2:	50                   	push   eax
c00136d3:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136d5:	52                   	push   edx
c00136d6:	51                   	push   ecx
c00136d7:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00136da:	83 c4 10             	add    esp,0x10
c00136dd:	83 c4 0c             	add    esp,0xc
c00136e0:	c3                   	ret    
c00136e1:	90                   	nop

c00136e2 <Directory::rename(char const*)>:
c00136e2:	83 ec 0c             	sub    esp,0xc
c00136e5:	b8 0b 00 00 00       	mov    eax,0xb
c00136ea:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136ee:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136f5:	80 f9 19             	cmp    cl,0x19
c00136f8:	77 32                	ja     c001372c <Directory::rename(char const*)+0x4a>
c00136fa:	8b 0c 8d 20 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd19e0]
c0013701:	85 c9                	test   ecx,ecx
c0013703:	74 27                	je     c001372c <Directory::rename(char const*)+0x4a>
c0013705:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001370b:	85 c9                	test   ecx,ecx
c001370d:	74 1d                	je     c001372c <Directory::rename(char const*)+0x4a>
c001370f:	b8 06 00 00 00       	mov    eax,0x6
c0013714:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013718:	75 12                	jne    c001372c <Directory::rename(char const*)+0x4a>
c001371a:	83 c2 0d             	add    edx,0xd
c001371d:	50                   	push   eax
c001371e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013720:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013724:	52                   	push   edx
c0013725:	51                   	push   ecx
c0013726:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013729:	83 c4 10             	add    esp,0x10
c001372c:	83 c4 0c             	add    esp,0xc
c001372f:	c3                   	ret    

c0013730 <Directory::exists()>:
c0013730:	83 ec 0c             	sub    esp,0xc
c0013733:	31 c0                	xor    eax,eax
c0013735:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013739:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013740:	80 f9 19             	cmp    cl,0x19
c0013743:	77 24                	ja     c0013769 <Directory::exists()+0x39>
c0013745:	8b 0c 8d 20 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd19e0]
c001374c:	85 c9                	test   ecx,ecx
c001374e:	74 19                	je     c0013769 <Directory::exists()+0x39>
c0013750:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013756:	85 c9                	test   ecx,ecx
c0013758:	74 0f                	je     c0013769 <Directory::exists()+0x39>
c001375a:	83 c2 0d             	add    edx,0xd
c001375d:	50                   	push   eax
c001375e:	50                   	push   eax
c001375f:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013761:	52                   	push   edx
c0013762:	51                   	push   ecx
c0013763:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013766:	83 c4 10             	add    esp,0x10
c0013769:	83 c4 0c             	add    esp,0xc
c001376c:	c3                   	ret    
c001376d:	90                   	nop

c001376e <Directory::read(dirent*)>:
c001376e:	83 ec 1c             	sub    esp,0x1c
c0013771:	b8 0b 00 00 00       	mov    eax,0xb
c0013776:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001377a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013781:	80 fa 19             	cmp    dl,0x19
c0013784:	77 30                	ja     c00137b6 <Directory::read(dirent*)+0x48>
c0013786:	8b 14 95 20 e6 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd19e0]
c001378d:	85 d2                	test   edx,edx
c001378f:	74 25                	je     c00137b6 <Directory::read(dirent*)+0x48>
c0013791:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013798:	74 1c                	je     c00137b6 <Directory::read(dirent*)+0x48>
c001379a:	83 ec 0c             	sub    esp,0xc
c001379d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001379f:	8d 54 24 18          	lea    edx,[esp+0x18]
c00137a3:	52                   	push   edx
c00137a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00137a8:	6a 00                	push   0x0
c00137aa:	68 10 01 00 00       	push   0x110
c00137af:	51                   	push   ecx
c00137b0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00137b3:	83 c4 20             	add    esp,0x20
c00137b6:	83 c4 1c             	add    esp,0x1c
c00137b9:	c3                   	ret    

c00137ba <Directory::create()>:
c00137ba:	83 ec 0c             	sub    esp,0xc
c00137bd:	b8 0b 00 00 00       	mov    eax,0xb
c00137c2:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00137c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00137cd:	80 f9 19             	cmp    cl,0x19
c00137d0:	77 2f                	ja     c0013801 <Directory::create()+0x47>
c00137d2:	8b 0c 8d 20 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd19e0]
c00137d9:	85 c9                	test   ecx,ecx
c00137db:	74 24                	je     c0013801 <Directory::create()+0x47>
c00137dd:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00137e3:	85 c9                	test   ecx,ecx
c00137e5:	74 1a                	je     c0013801 <Directory::create()+0x47>
c00137e7:	b8 06 00 00 00       	mov    eax,0x6
c00137ec:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00137f0:	75 0f                	jne    c0013801 <Directory::create()+0x47>
c00137f2:	83 c2 0d             	add    edx,0xd
c00137f5:	50                   	push   eax
c00137f6:	50                   	push   eax
c00137f7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00137f9:	52                   	push   edx
c00137fa:	51                   	push   ecx
c00137fb:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c00137fe:	83 c4 10             	add    esp,0x10
c0013801:	83 c4 0c             	add    esp,0xc
c0013804:	c3                   	ret    
c0013805:	90                   	nop

c0013806 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013806:	b8 0a 00 00 00       	mov    eax,0xa
c001380b:	c3                   	ret    

c001380c <Bus::Bus(char const*)>:
c001380c:	83 ec 0c             	sub    esp,0xc
c001380f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013813:	83 ec 08             	sub    esp,0x8
c0013816:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001381a:	50                   	push   eax
c001381b:	e8 68 09 00 00       	call   c0014188 <Device::Device(char const*)>
c0013820:	83 c4 10             	add    esp,0x10
c0013823:	ba e8 a6 02 c0       	mov    edx,0xc002a6e8
c0013828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001382c:	89 10                	mov    DWORD PTR [eax],edx
c001382e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013832:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c001383c:	90                   	nop
c001383d:	83 c4 0c             	add    esp,0xc
c0013840:	c3                   	ret    
c0013841:	90                   	nop

c0013842 <Bus::~Bus()>:
c0013842:	83 ec 0c             	sub    esp,0xc
c0013845:	ba e8 a6 02 c0       	mov    edx,0xc002a6e8
c001384a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001384e:	89 10                	mov    DWORD PTR [eax],edx
c0013850:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013854:	83 ec 0c             	sub    esp,0xc
c0013857:	50                   	push   eax
c0013858:	e8 0d 06 00 00       	call   c0013e6a <Device::~Device()>
c001385d:	83 c4 10             	add    esp,0x10
c0013860:	90                   	nop
c0013861:	83 c4 0c             	add    esp,0xc
c0013864:	c3                   	ret    
c0013865:	90                   	nop

c0013866 <Bus::~Bus()>:
c0013866:	83 ec 0c             	sub    esp,0xc
c0013869:	83 ec 0c             	sub    esp,0xc
c001386c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013870:	e8 cd ff ff ff       	call   c0013842 <Bus::~Bus()>
c0013875:	83 c4 10             	add    esp,0x10
c0013878:	83 ec 08             	sub    esp,0x8
c001387b:	68 58 01 00 00       	push   0x158
c0013880:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013884:	e8 08 f2 ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0013889:	83 c4 10             	add    esp,0x10
c001388c:	83 c4 0c             	add    esp,0xc
c001388f:	c3                   	ret    

c0013890 <Buzzer::Buzzer(char const*)>:
c0013890:	83 ec 0c             	sub    esp,0xc
c0013893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013897:	83 ec 08             	sub    esp,0x8
c001389a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001389e:	50                   	push   eax
c001389f:	e8 e4 08 00 00       	call   c0014188 <Device::Device(char const*)>
c00138a4:	83 c4 10             	add    esp,0x10
c00138a7:	ba 14 a7 02 c0       	mov    edx,0xc002a714
c00138ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138b0:	89 10                	mov    DWORD PTR [eax],edx
c00138b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138b6:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00138c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138c4:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c00138ce:	90                   	nop
c00138cf:	83 c4 0c             	add    esp,0xc
c00138d2:	c3                   	ret    
c00138d3:	90                   	nop

c00138d4 <Buzzer::~Buzzer()>:
c00138d4:	83 ec 0c             	sub    esp,0xc
c00138d7:	ba 14 a7 02 c0       	mov    edx,0xc002a714
c00138dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138e0:	89 10                	mov    DWORD PTR [eax],edx
c00138e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138e6:	83 ec 0c             	sub    esp,0xc
c00138e9:	50                   	push   eax
c00138ea:	e8 7b 05 00 00       	call   c0013e6a <Device::~Device()>
c00138ef:	83 c4 10             	add    esp,0x10
c00138f2:	90                   	nop
c00138f3:	83 c4 0c             	add    esp,0xc
c00138f6:	c3                   	ret    
c00138f7:	90                   	nop

c00138f8 <Buzzer::~Buzzer()>:
c00138f8:	83 ec 0c             	sub    esp,0xc
c00138fb:	83 ec 0c             	sub    esp,0xc
c00138fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013902:	e8 cd ff ff ff       	call   c00138d4 <Buzzer::~Buzzer()>
c0013907:	83 c4 10             	add    esp,0x10
c001390a:	83 ec 08             	sub    esp,0x8
c001390d:	68 5c 01 00 00       	push   0x15c
c0013912:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013916:	e8 76 f1 ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c001391b:	83 c4 10             	add    esp,0x10
c001391e:	83 c4 0c             	add    esp,0xc
c0013921:	c3                   	ret    

c0013922 <Buzzer::stop()>:
c0013922:	83 ec 14             	sub    esp,0x14
c0013925:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013929:	8b 10                	mov    edx,DWORD PTR [eax]
c001392b:	6a 00                	push   0x0
c001392d:	50                   	push   eax
c001392e:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013931:	83 c4 1c             	add    esp,0x1c
c0013934:	c3                   	ret    

c0013935 <beepThread(void*)>:
c0013935:	53                   	push   ebx
c0013936:	83 ec 08             	sub    esp,0x8
c0013939:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001393d:	e8 d2 a0 00 00       	call   c001da14 <unlockScheduler()>
c0013942:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013947:	52                   	push   edx
c0013948:	52                   	push   edx
c0013949:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c001394f:	52                   	push   edx
c0013950:	50                   	push   eax
c0013951:	e8 0c a6 00 00       	call   c001df62 <nanoSleep(unsigned long long)>
c0013956:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013959:	e8 c4 ff ff ff       	call   c0013922 <Buzzer::stop()>
c001395e:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013966:	83 c4 18             	add    esp,0x18
c0013969:	5b                   	pop    ebx
c001396a:	e9 39 a5 00 00       	jmp    c001dea8 <blockTask(TaskState)>
c001396f:	90                   	nop

c0013970 <Buzzer::beep(int, int, bool)>:
c0013970:	57                   	push   edi
c0013971:	56                   	push   esi
c0013972:	53                   	push   ebx
c0013973:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013977:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001397b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001397f:	52                   	push   edx
c0013980:	52                   	push   edx
c0013981:	8b 06                	mov    eax,DWORD PTR [esi]
c0013983:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013987:	56                   	push   esi
c0013988:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001398b:	83 c4 10             	add    esp,0x10
c001398e:	89 f8                	mov    eax,edi
c0013990:	84 c0                	test   al,al
c0013992:	74 1f                	je     c00139b3 <Buzzer::beep(int, int, bool)+0x43>
c0013994:	50                   	push   eax
c0013995:	50                   	push   eax
c0013996:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c001399c:	99                   	cdq    
c001399d:	52                   	push   edx
c001399e:	50                   	push   eax
c001399f:	e8 be a5 00 00       	call   c001df62 <nanoSleep(unsigned long long)>
c00139a4:	83 c4 10             	add    esp,0x10
c00139a7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c00139ab:	5b                   	pop    ebx
c00139ac:	5e                   	pop    esi
c00139ad:	5f                   	pop    edi
c00139ae:	e9 6f ff ff ff       	jmp    c0013922 <Buzzer::stop()>
c00139b3:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c00139b9:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c00139be:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c00139c6:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c00139ca:	c7 44 24 14 35 39 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013935
c00139d2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00139d6:	5b                   	pop    ebx
c00139d7:	5e                   	pop    esi
c00139d8:	5f                   	pop    edi
c00139d9:	e9 66 a1 00 00       	jmp    c001db44 <Process::createThread(void (*)(void*), void*, int)>

c00139de <User::loadClockSettings(int)>:
c00139de:	53                   	push   ebx
c00139df:	83 ec 14             	sub    esp,0x14
c00139e2:	68 14 01 00 00       	push   0x114
c00139e7:	e8 54 be ff ff       	call   c000f840 <malloc>
c00139ec:	83 c4 0c             	add    esp,0xc
c00139ef:	89 c3                	mov    ebx,eax
c00139f1:	ff 35 74 15 03 c0    	push   DWORD PTR ds:0xc0031574
c00139f7:	68 3c a7 02 c0       	push   0xc002a73c
c00139fc:	50                   	push   eax
c00139fd:	e8 c8 f6 ff ff       	call   c00130ca <File::File(char const*, Process*)>
c0013a02:	58                   	pop    eax
c0013a03:	5a                   	pop    edx
c0013a04:	6a 01                	push   0x1
c0013a06:	53                   	push   ebx
c0013a07:	e8 22 f7 ff ff       	call   c001312e <File::open(FileOpenMode)>
c0013a0c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013a0f:	e8 78 f7 ff ff       	call   c001318c <File::close()>
c0013a14:	83 c4 10             	add    esp,0x10
c0013a17:	85 db                	test   ebx,ebx
c0013a19:	74 0f                	je     c0013a2a <User::loadClockSettings(int)+0x4c>
c0013a1b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013a1d:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013a21:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013a24:	83 c4 08             	add    esp,0x8
c0013a27:	5b                   	pop    ebx
c0013a28:	ff e0                	jmp    eax
c0013a2a:	83 c4 08             	add    esp,0x8
c0013a2d:	5b                   	pop    ebx
c0013a2e:	c3                   	ret    
c0013a2f:	90                   	nop

c0013a30 <Clock::Clock(char const*)>:
c0013a30:	83 ec 0c             	sub    esp,0xc
c0013a33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a37:	83 ec 08             	sub    esp,0x8
c0013a3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a3e:	50                   	push   eax
c0013a3f:	e8 44 07 00 00       	call   c0014188 <Device::Device(char const*)>
c0013a44:	83 c4 10             	add    esp,0x10
c0013a47:	ba 64 a7 02 c0       	mov    edx,0xc002a764
c0013a4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a50:	89 10                	mov    DWORD PTR [eax],edx
c0013a52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a56:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013a60:	90                   	nop
c0013a61:	83 c4 0c             	add    esp,0xc
c0013a64:	c3                   	ret    
c0013a65:	90                   	nop

c0013a66 <Clock::~Clock()>:
c0013a66:	83 ec 0c             	sub    esp,0xc
c0013a69:	ba 64 a7 02 c0       	mov    edx,0xc002a764
c0013a6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a72:	89 10                	mov    DWORD PTR [eax],edx
c0013a74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013a78:	83 ec 0c             	sub    esp,0xc
c0013a7b:	50                   	push   eax
c0013a7c:	e8 e9 03 00 00       	call   c0013e6a <Device::~Device()>
c0013a81:	83 c4 10             	add    esp,0x10
c0013a84:	90                   	nop
c0013a85:	83 c4 0c             	add    esp,0xc
c0013a88:	c3                   	ret    
c0013a89:	90                   	nop

c0013a8a <Clock::~Clock()>:
c0013a8a:	83 ec 0c             	sub    esp,0xc
c0013a8d:	83 ec 0c             	sub    esp,0xc
c0013a90:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013a94:	e8 cd ff ff ff       	call   c0013a66 <Clock::~Clock()>
c0013a99:	83 c4 10             	add    esp,0x10
c0013a9c:	83 ec 08             	sub    esp,0x8
c0013a9f:	68 58 01 00 00       	push   0x158
c0013aa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013aa8:	e8 e4 ef ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0013aad:	83 c4 10             	add    esp,0x10
c0013ab0:	83 c4 0c             	add    esp,0xc
c0013ab3:	c3                   	ret    

c0013ab4 <Clock::timeInSecondsLocal()>:
c0013ab4:	53                   	push   ebx
c0013ab5:	83 ec 14             	sub    esp,0x14
c0013ab8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013abc:	8b 10                	mov    edx,DWORD PTR [eax]
c0013abe:	50                   	push   eax
c0013abf:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013ac2:	0f b6 0d 90 e1 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e190
c0013ac9:	03 0d 94 e1 02 c0    	add    ecx,DWORD PTR ds:0xc002e194
c0013acf:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013ad5:	89 cb                	mov    ebx,ecx
c0013ad7:	c1 fb 1f             	sar    ebx,0x1f
c0013ada:	01 c8                	add    eax,ecx
c0013adc:	11 da                	adc    edx,ebx
c0013ade:	83 c4 10             	add    esp,0x10
c0013ae1:	31 c9                	xor    ecx,ecx
c0013ae3:	80 3d 91 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e191,0x0
c0013aea:	74 05                	je     c0013af1 <Clock::timeInSecondsLocal()+0x3d>
c0013aec:	b9 08 07 00 00       	mov    ecx,0x708
c0013af1:	31 db                	xor    ebx,ebx
c0013af3:	01 c8                	add    eax,ecx
c0013af5:	11 da                	adc    edx,ebx
c0013af7:	83 c4 08             	add    esp,0x8
c0013afa:	5b                   	pop    ebx
c0013afb:	c3                   	ret    

c0013afc <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013afc:	57                   	push   edi
c0013afd:	56                   	push   esi
c0013afe:	53                   	push   ebx
c0013aff:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013b03:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013b07:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013b09:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013b0d:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013b10:	0f b6 05 90 e1 02 c0 	movzx  eax,BYTE PTR ds:0xc002e190
c0013b17:	03 05 94 e1 02 c0    	add    eax,DWORD PTR ds:0xc002e194
c0013b1d:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013b23:	99                   	cdq    
c0013b24:	29 c6                	sub    esi,eax
c0013b26:	19 d7                	sbb    edi,edx
c0013b28:	89 f0                	mov    eax,esi
c0013b2a:	89 fa                	mov    edx,edi
c0013b2c:	31 f6                	xor    esi,esi
c0013b2e:	80 3d 91 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e191,0x0
c0013b35:	74 05                	je     c0013b3c <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013b37:	be 08 07 00 00       	mov    esi,0x708
c0013b3c:	31 ff                	xor    edi,edi
c0013b3e:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013b42:	29 f0                	sub    eax,esi
c0013b44:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013b48:	19 fa                	sbb    edx,edi
c0013b4a:	89 d8                	mov    eax,ebx
c0013b4c:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013b50:	5b                   	pop    ebx
c0013b51:	5e                   	pop    esi
c0013b52:	5f                   	pop    edi
c0013b53:	ff e0                	jmp    eax

c0013b55 <datetimeToSeconds(datetime_t)>:
c0013b55:	55                   	push   ebp
c0013b56:	57                   	push   edi
c0013b57:	56                   	push   esi
c0013b58:	53                   	push   ebx
c0013b59:	83 ec 14             	sub    esp,0x14
c0013b5c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013b60:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013b64:	89 d3                	mov    ebx,edx
c0013b66:	0f b6 c6             	movzx  eax,dh
c0013b69:	c1 eb 10             	shr    ebx,0x10
c0013b6c:	48                   	dec    eax
c0013b6d:	66 81 eb 6c 07       	sub    bx,0x76c
c0013b72:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013b76:	0f b6 f5             	movzx  esi,ch
c0013b79:	89 cf                	mov    edi,ecx
c0013b7b:	6b f6 3c             	imul   esi,esi,0x3c
c0013b7e:	c1 ef 10             	shr    edi,0x10
c0013b81:	0f b6 c9             	movzx  ecx,cl
c0013b84:	89 f8                	mov    eax,edi
c0013b86:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013b8c:	0f b6 f8             	movzx  edi,al
c0013b8f:	0f b6 d2             	movzx  edx,dl
c0013b92:	01 fe                	add    esi,edi
c0013b94:	01 f1                	add    ecx,esi
c0013b96:	0f b7 f3             	movzx  esi,bx
c0013b99:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013b9d:	c1 f9 1f             	sar    ecx,0x1f
c0013ba0:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013ba5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013ba9:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013bae:	8b 0c 8d a0 a7 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd5860]
c0013bb5:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013bb9:	76 29                	jbe    c0013be4 <datetimeToSeconds(datetime_t)+0x8f>
c0013bbb:	f6 c3 03             	test   bl,0x3
c0013bbe:	75 24                	jne    c0013be4 <datetimeToSeconds(datetime_t)+0x8f>
c0013bc0:	31 d2                	xor    edx,edx
c0013bc2:	bf 64 00 00 00       	mov    edi,0x64
c0013bc7:	89 d8                	mov    eax,ebx
c0013bc9:	66 f7 f7             	div    di
c0013bcc:	66 85 d2             	test   dx,dx
c0013bcf:	75 12                	jne    c0013be3 <datetimeToSeconds(datetime_t)+0x8e>
c0013bd1:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013bd7:	bf 90 01 00 00       	mov    edi,0x190
c0013bdc:	99                   	cdq    
c0013bdd:	f7 ff                	idiv   edi
c0013bdf:	85 d2                	test   edx,edx
c0013be1:	75 01                	jne    c0013be4 <datetimeToSeconds(datetime_t)+0x8f>
c0013be3:	41                   	inc    ecx
c0013be4:	66 83 fb 46          	cmp    bx,0x46
c0013be8:	76 45                	jbe    c0013c2f <datetimeToSeconds(datetime_t)+0xda>
c0013bea:	bb 46 00 00 00       	mov    ebx,0x46
c0013bef:	bf 64 00 00 00       	mov    edi,0x64
c0013bf4:	bd 90 01 00 00       	mov    ebp,0x190
c0013bf9:	b8 6d 01 00 00       	mov    eax,0x16d
c0013bfe:	f6 c3 03             	test   bl,0x3
c0013c01:	75 23                	jne    c0013c26 <datetimeToSeconds(datetime_t)+0xd1>
c0013c03:	89 d8                	mov    eax,ebx
c0013c05:	99                   	cdq    
c0013c06:	f7 ff                	idiv   edi
c0013c08:	b8 6e 01 00 00       	mov    eax,0x16e
c0013c0d:	85 d2                	test   edx,edx
c0013c0f:	75 15                	jne    c0013c26 <datetimeToSeconds(datetime_t)+0xd1>
c0013c11:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013c17:	99                   	cdq    
c0013c18:	f7 fd                	idiv   ebp
c0013c1a:	83 fa 01             	cmp    edx,0x1
c0013c1d:	19 c0                	sbb    eax,eax
c0013c1f:	f7 d0                	not    eax
c0013c21:	05 6e 01 00 00       	add    eax,0x16e
c0013c26:	01 c1                	add    ecx,eax
c0013c28:	43                   	inc    ebx
c0013c29:	39 f3                	cmp    ebx,esi
c0013c2b:	7c cc                	jl     c0013bf9 <datetimeToSeconds(datetime_t)+0xa4>
c0013c2d:	eb 35                	jmp    c0013c64 <datetimeToSeconds(datetime_t)+0x10f>
c0013c2f:	74 33                	je     c0013c64 <datetimeToSeconds(datetime_t)+0x10f>
c0013c31:	b8 45 00 00 00       	mov    eax,0x45
c0013c36:	89 c2                	mov    edx,eax
c0013c38:	83 e2 03             	and    edx,0x3
c0013c3b:	39 f0                	cmp    eax,esi
c0013c3d:	7e 0f                	jle    c0013c4e <datetimeToSeconds(datetime_t)+0xf9>
c0013c3f:	83 fa 01             	cmp    edx,0x1
c0013c42:	19 d2                	sbb    edx,edx
c0013c44:	48                   	dec    eax
c0013c45:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013c4c:	eb e8                	jmp    c0013c36 <datetimeToSeconds(datetime_t)+0xe1>
c0013c4e:	b8 6d 01 00 00       	mov    eax,0x16d
c0013c53:	85 d2                	test   edx,edx
c0013c55:	75 0b                	jne    c0013c62 <datetimeToSeconds(datetime_t)+0x10d>
c0013c57:	66 83 fb 01          	cmp    bx,0x1
c0013c5b:	19 c0                	sbb    eax,eax
c0013c5d:	05 6e 01 00 00       	add    eax,0x16e
c0013c62:	29 c1                	sub    ecx,eax
c0013c64:	b8 80 51 01 00       	mov    eax,0x15180
c0013c69:	f7 e9                	imul   ecx
c0013c6b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013c6f:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013c73:	83 c4 14             	add    esp,0x14
c0013c76:	5b                   	pop    ebx
c0013c77:	5e                   	pop    esi
c0013c78:	5f                   	pop    edi
c0013c79:	5d                   	pop    ebp
c0013c7a:	c3                   	ret    
c0013c7b:	90                   	nop

c0013c7c <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013c7c:	57                   	push   edi
c0013c7d:	56                   	push   esi
c0013c7e:	53                   	push   ebx
c0013c7f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c83:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c85:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013c88:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c8c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013c90:	e8 c0 fe ff ff       	call   c0013b55 <datetimeToSeconds(datetime_t)>
c0013c95:	59                   	pop    ecx
c0013c96:	0f b6 0d 90 e1 02 c0 	movzx  ecx,BYTE PTR ds:0xc002e190
c0013c9d:	5b                   	pop    ebx
c0013c9e:	03 0d 94 e1 02 c0    	add    ecx,DWORD PTR ds:0xc002e194
c0013ca4:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013caa:	89 cb                	mov    ebx,ecx
c0013cac:	c1 fb 1f             	sar    ebx,0x1f
c0013caf:	29 c8                	sub    eax,ecx
c0013cb1:	19 da                	sbb    edx,ebx
c0013cb3:	31 c9                	xor    ecx,ecx
c0013cb5:	80 3d 91 e1 02 c0 00 	cmp    BYTE PTR ds:0xc002e191,0x0
c0013cbc:	74 05                	je     c0013cc3 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013cbe:	b9 08 07 00 00       	mov    ecx,0x708
c0013cc3:	31 db                	xor    ebx,ebx
c0013cc5:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013cc9:	29 c8                	sub    eax,ecx
c0013ccb:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013ccf:	19 da                	sbb    edx,ebx
c0013cd1:	89 f8                	mov    eax,edi
c0013cd3:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013cd7:	5b                   	pop    ebx
c0013cd8:	5e                   	pop    esi
c0013cd9:	5f                   	pop    edi
c0013cda:	ff e0                	jmp    eax

c0013cdc <secondsToDatetime(unsigned long long)>:
c0013cdc:	55                   	push   ebp
c0013cdd:	57                   	push   edi
c0013cde:	56                   	push   esi
c0013cdf:	53                   	push   ebx
c0013ce0:	83 ec 1c             	sub    esp,0x1c
c0013ce3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013ce7:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013ceb:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013cef:	6a 00                	push   0x0
c0013cf1:	68 80 51 01 00       	push   0x15180
c0013cf6:	55                   	push   ebp
c0013cf7:	57                   	push   edi
c0013cf8:	e8 ef 28 01 00       	call   c00265ec <__udivdi3>
c0013cfd:	83 c4 10             	add    esp,0x10
c0013d00:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013d06:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013d0a:	6a 00                	push   0x0
c0013d0c:	68 80 51 01 00       	push   0x15180
c0013d11:	55                   	push   ebp
c0013d12:	57                   	push   edi
c0013d13:	bf 10 0e 00 00       	mov    edi,0xe10
c0013d18:	e8 cf 29 01 00       	call   c00266ec <__umoddi3>
c0013d1d:	83 c4 10             	add    esp,0x10
c0013d20:	99                   	cdq    
c0013d21:	f7 ff                	idiv   edi
c0013d23:	bf 3c 00 00 00       	mov    edi,0x3c
c0013d28:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0013d2b:	89 d0                	mov    eax,edx
c0013d2d:	99                   	cdq    
c0013d2e:	f7 ff                	idiv   edi
c0013d30:	85 db                	test   ebx,ebx
c0013d32:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0013d35:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c0013d38:	79 11                	jns    c0013d4b <secondsToDatetime(unsigned long long)+0x6f>
c0013d3a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0013d3e:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0013d44:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013d49:	eb 07                	jmp    c0013d52 <secondsToDatetime(unsigned long long)+0x76>
c0013d4b:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0013d50:	89 d8                	mov    eax,ebx
c0013d52:	bf b4 05 00 00       	mov    edi,0x5b4
c0013d57:	99                   	cdq    
c0013d58:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0013d5d:	f7 f9                	idiv   ecx
c0013d5f:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0013d64:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013d68:	31 d2                	xor    edx,edx
c0013d6a:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0013d72:	01 c3                	add    ebx,eax
c0013d74:	89 d8                	mov    eax,ebx
c0013d76:	f7 f1                	div    ecx
c0013d78:	31 d2                	xor    edx,edx
c0013d7a:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0013d7d:	89 d8                	mov    eax,ebx
c0013d7f:	f7 f7                	div    edi
c0013d81:	31 d2                	xor    edx,edx
c0013d83:	29 c1                	sub    ecx,eax
c0013d85:	89 d8                	mov    eax,ebx
c0013d87:	f7 f5                	div    ebp
c0013d89:	bd 6d 01 00 00       	mov    ebp,0x16d
c0013d8e:	29 c1                	sub    ecx,eax
c0013d90:	31 d2                	xor    edx,edx
c0013d92:	89 c8                	mov    eax,ecx
c0013d94:	f7 f5                	div    ebp
c0013d96:	bd 94 8e 00 00       	mov    ebp,0x8e94
c0013d9b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0013d9f:	31 d2                	xor    edx,edx
c0013da1:	89 c8                	mov    eax,ecx
c0013da3:	f7 f5                	div    ebp
c0013da5:	31 d2                	xor    edx,edx
c0013da7:	01 c3                	add    ebx,eax
c0013da9:	89 c8                	mov    eax,ecx
c0013dab:	f7 f7                	div    edi
c0013dad:	bf 99 00 00 00       	mov    edi,0x99
c0013db2:	29 c3                	sub    ebx,eax
c0013db4:	31 d2                	xor    edx,edx
c0013db6:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c0013dbe:	29 c3                	sub    ebx,eax
c0013dc0:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013dc3:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c0013dc6:	bb 05 00 00 00       	mov    ebx,0x5
c0013dcb:	83 c1 02             	add    ecx,0x2
c0013dce:	89 c8                	mov    eax,ecx
c0013dd0:	f7 f7                	div    edi
c0013dd2:	31 d2                	xor    edx,edx
c0013dd4:	89 c7                	mov    edi,eax
c0013dd6:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c0013ddc:	83 c0 02             	add    eax,0x2
c0013ddf:	f7 f3                	div    ebx
c0013de1:	89 eb                	mov    ebx,ebp
c0013de3:	29 c3                	sub    ebx,eax
c0013de5:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c0013deb:	88 1e                	mov    BYTE PTR [esi],bl
c0013ded:	19 c0                	sbb    eax,eax
c0013def:	31 d2                	xor    edx,edx
c0013df1:	83 e0 0c             	and    eax,0xc
c0013df4:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c0013df8:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c0013e00:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0013e04:	83 f9 01             	cmp    ecx,0x1
c0013e07:	0f 96 c2             	setbe  dl
c0013e0a:	41                   	inc    ecx
c0013e0b:	01 d0                	add    eax,edx
c0013e0d:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c0013e10:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c0013e14:	83 c4 1c             	add    esp,0x1c
c0013e17:	89 f0                	mov    eax,esi
c0013e19:	5b                   	pop    ebx
c0013e1a:	5e                   	pop    esi
c0013e1b:	5f                   	pop    edi
c0013e1c:	5d                   	pop    ebp
c0013e1d:	c2 04 00             	ret    0x4

c0013e20 <Clock::timeInDatetimeLocal()>:
c0013e20:	53                   	push   ebx
c0013e21:	83 ec 14             	sub    esp,0x14
c0013e24:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013e28:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013e2c:	e8 83 fc ff ff       	call   c0013ab4 <Clock::timeInSecondsLocal()>
c0013e31:	83 c4 0c             	add    esp,0xc
c0013e34:	52                   	push   edx
c0013e35:	50                   	push   eax
c0013e36:	53                   	push   ebx
c0013e37:	e8 a0 fe ff ff       	call   c0013cdc <secondsToDatetime(unsigned long long)>
c0013e3c:	89 d8                	mov    eax,ebx
c0013e3e:	83 c4 14             	add    esp,0x14
c0013e41:	5b                   	pop    ebx
c0013e42:	c2 04 00             	ret    0x4
c0013e45:	90                   	nop

c0013e46 <Device::hibernate()>:
c0013e46:	c3                   	ret    
c0013e47:	90                   	nop

c0013e48 <Device::wake()>:
c0013e48:	c3                   	ret    
c0013e49:	90                   	nop

c0013e4a <Device::detect()>:
c0013e4a:	c3                   	ret    
c0013e4b:	90                   	nop

c0013e4c <Device::disableLegacy()>:
c0013e4c:	c3                   	ret    
c0013e4d:	90                   	nop

c0013e4e <Device::powerSaving(PowerSavingLevel)>:
c0013e4e:	c3                   	ret    
c0013e4f:	90                   	nop

c0013e50 <DriverlessDevice::close(int, int, void*)>:
c0013e50:	31 c0                	xor    eax,eax
c0013e52:	c3                   	ret    
c0013e53:	90                   	nop

c0013e54 <DriverlessDevice::detect()>:
c0013e54:	c3                   	ret    
c0013e55:	90                   	nop

c0013e56 <DriverlessDevice::open(int, int, void*)>:
c0013e56:	83 ec 18             	sub    esp,0x18
c0013e59:	68 d0 a7 02 c0       	push   0xc002a7d0
c0013e5e:	e8 8a 63 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c0013e63:	83 c8 ff             	or     eax,0xffffffff
c0013e66:	83 c4 1c             	add    esp,0x1c
c0013e69:	c3                   	ret    

c0013e6a <Device::~Device()>:
c0013e6a:	ba f8 a7 02 c0       	mov    edx,0xc002a7f8
c0013e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013e73:	89 10                	mov    DWORD PTR [eax],edx
c0013e75:	90                   	nop
c0013e76:	c3                   	ret    
c0013e77:	90                   	nop

c0013e78 <Device::~Device()>:
c0013e78:	83 ec 0c             	sub    esp,0xc
c0013e7b:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0013e7f:	e8 e6 ff ff ff       	call   c0013e6a <Device::~Device()>
c0013e84:	83 c4 04             	add    esp,0x4
c0013e87:	83 ec 08             	sub    esp,0x8
c0013e8a:	68 58 01 00 00       	push   0x158
c0013e8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013e93:	e8 f9 eb ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0013e98:	83 c4 10             	add    esp,0x10
c0013e9b:	83 c4 0c             	add    esp,0xc
c0013e9e:	c3                   	ret    
c0013e9f:	90                   	nop

c0013ea0 <Device::findAndLoadDriver()>:
c0013ea0:	c3                   	ret    
c0013ea1:	90                   	nop

c0013ea2 <Device::preOpenPCI(PCIDeviceInfo)>:
c0013ea2:	57                   	push   edi
c0013ea3:	b9 09 00 00 00       	mov    ecx,0x9
c0013ea8:	56                   	push   esi
c0013ea9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0013ead:	8d 74 24 10          	lea    esi,[esp+0x10]
c0013eb1:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c0013ebb:	81 c7 18 01 00 00    	add    edi,0x118
c0013ec1:	fc                   	cld    
c0013ec2:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0013ec4:	5e                   	pop    esi
c0013ec5:	5f                   	pop    edi
c0013ec6:	c3                   	ret    
c0013ec7:	90                   	nop

c0013ec8 <Device::preOpenACPI(void*, char*, char*)>:
c0013ec8:	56                   	push   esi
c0013ec9:	53                   	push   ebx
c0013eca:	83 ec 08             	sub    esp,0x8
c0013ecd:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0013ed1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0013ed5:	c7 83 14 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x114],0x3
c0013edf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013ee3:	89 83 18 01 00 00    	mov    DWORD PTR [ebx+0x118],eax
c0013ee9:	6a 1e                	push   0x1e
c0013eeb:	8d 83 1c 01 00 00    	lea    eax,[ebx+0x11c]
c0013ef1:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0013ef5:	81 c3 3a 01 00 00    	add    ebx,0x13a
c0013efb:	50                   	push   eax
c0013efc:	e8 43 c8 fe ff       	call   c0000744 <memcpy>
c0013f01:	89 74 24 24          	mov    DWORD PTR [esp+0x24],esi
c0013f05:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0013f09:	c7 44 24 28 0e 00 00 00 	mov    DWORD PTR [esp+0x28],0xe
c0013f11:	83 c4 14             	add    esp,0x14
c0013f14:	5b                   	pop    ebx
c0013f15:	5e                   	pop    esi
c0013f16:	e9 29 c8 fe ff       	jmp    c0000744 <memcpy>
c0013f1b:	90                   	nop

c0013f1c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c0013f1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f20:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013f25:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013f2c:	75 0b                	jne    c0013f39 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0013f2e:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f30:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013f34:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0013f37:	eb 1e                	jmp    c0013f57 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c0013f39:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0013f3e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013f44:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013f4a:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013f4c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013f50:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013f54:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0013f57:	ff e0                	jmp    eax
c0013f59:	90                   	nop

c0013f5a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c0013f5a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013f5e:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0013f63:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c0013f6a:	75 0b                	jne    c0013f77 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c0013f6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0013f6e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013f72:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0013f75:	eb 1e                	jmp    c0013f95 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0013f77:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0013f7c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0013f82:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0013f88:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013f8a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0013f8e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0013f92:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0013f95:	ff e0                	jmp    eax
c0013f97:	90                   	nop

c0013f98 <Device::addChild(Device*)>:
c0013f98:	53                   	push   ebx
c0013f99:	83 ec 08             	sub    esp,0x8
c0013f9c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013fa0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013fa4:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c0013faa:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0013fb0:	8b 13                	mov    edx,DWORD PTR [ebx]
c0013fb2:	85 d2                	test   edx,edx
c0013fb4:	74 04                	je     c0013fba <Device::addChild(Device*)+0x22>
c0013fb6:	89 d3                	mov    ebx,edx
c0013fb8:	eb f6                	jmp    c0013fb0 <Device::addChild(Device*)+0x18>
c0013fba:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0013fbd:	83 ec 0c             	sub    esp,0xc
c0013fc0:	6a 08                	push   0x8
c0013fc2:	e8 79 b8 ff ff       	call   c000f840 <malloc>
c0013fc7:	89 03                	mov    DWORD PTR [ebx],eax
c0013fc9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0013fcf:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0013fd6:	83 c4 18             	add    esp,0x18
c0013fd9:	5b                   	pop    ebx
c0013fda:	c3                   	ret    
c0013fdb:	90                   	nop

c0013fdc <Device::removeAllChildren()>:
c0013fdc:	56                   	push   esi
c0013fdd:	53                   	push   ebx
c0013fde:	52                   	push   edx
c0013fdf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013fe3:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c0013fe9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0013fec:	74 17                	je     c0014005 <Device::removeAllChildren()+0x29>
c0013fee:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0013ff1:	85 c0                	test   eax,eax
c0013ff3:	74 0c                	je     c0014001 <Device::removeAllChildren()+0x25>
c0013ff5:	83 ec 0c             	sub    esp,0xc
c0013ff8:	8b 10                	mov    edx,DWORD PTR [eax]
c0013ffa:	50                   	push   eax
c0013ffb:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0013ffe:	83 c4 10             	add    esp,0x10
c0014001:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014003:	eb e4                	jmp    c0013fe9 <Device::removeAllChildren()+0xd>
c0014005:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c001400b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0014011:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c0014017:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001401e:	58                   	pop    eax
c001401f:	5b                   	pop    ebx
c0014020:	5e                   	pop    esi
c0014021:	c3                   	ret    

c0014022 <Device::hibernateAll()>:
c0014022:	53                   	push   ebx
c0014023:	83 ec 14             	sub    esp,0x14
c0014026:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001402a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001402c:	53                   	push   ebx
c001402d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014030:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014036:	83 c4 10             	add    esp,0x10
c0014039:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001403c:	74 0f                	je     c001404d <Device::hibernateAll()+0x2b>
c001403e:	83 ec 0c             	sub    esp,0xc
c0014041:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014044:	e8 d9 ff ff ff       	call   c0014022 <Device::hibernateAll()>
c0014049:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001404b:	eb e9                	jmp    c0014036 <Device::hibernateAll()+0x14>
c001404d:	83 c4 08             	add    esp,0x8
c0014050:	5b                   	pop    ebx
c0014051:	c3                   	ret    

c0014052 <Device::wakeAll()>:
c0014052:	53                   	push   ebx
c0014053:	83 ec 14             	sub    esp,0x14
c0014056:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001405a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001405c:	53                   	push   ebx
c001405d:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014060:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014066:	83 c4 10             	add    esp,0x10
c0014069:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001406c:	74 0f                	je     c001407d <Device::wakeAll()+0x2b>
c001406e:	83 ec 0c             	sub    esp,0xc
c0014071:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014074:	e8 d9 ff ff ff       	call   c0014052 <Device::wakeAll()>
c0014079:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001407b:	eb e9                	jmp    c0014066 <Device::wakeAll()+0x14>
c001407d:	83 c4 08             	add    esp,0x8
c0014080:	5b                   	pop    ebx
c0014081:	c3                   	ret    

c0014082 <Device::detectAll()>:
c0014082:	53                   	push   ebx
c0014083:	83 ec 14             	sub    esp,0x14
c0014086:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001408a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001408c:	53                   	push   ebx
c001408d:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014090:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014096:	83 c4 10             	add    esp,0x10
c0014099:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001409c:	74 0f                	je     c00140ad <Device::detectAll()+0x2b>
c001409e:	83 ec 0c             	sub    esp,0xc
c00140a1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00140a4:	e8 d9 ff ff ff       	call   c0014082 <Device::detectAll()>
c00140a9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00140ab:	eb e9                	jmp    c0014096 <Device::detectAll()+0x14>
c00140ad:	83 c4 08             	add    esp,0x8
c00140b0:	5b                   	pop    ebx
c00140b1:	c3                   	ret    

c00140b2 <Device::disableLegacyAll()>:
c00140b2:	53                   	push   ebx
c00140b3:	83 ec 14             	sub    esp,0x14
c00140b6:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00140ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c00140bc:	53                   	push   ebx
c00140bd:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c00140c0:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00140c6:	83 c4 10             	add    esp,0x10
c00140c9:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00140cc:	74 0f                	je     c00140dd <Device::disableLegacyAll()+0x2b>
c00140ce:	83 ec 0c             	sub    esp,0xc
c00140d1:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00140d4:	e8 d9 ff ff ff       	call   c00140b2 <Device::disableLegacyAll()>
c00140d9:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00140db:	eb e9                	jmp    c00140c6 <Device::disableLegacyAll()+0x14>
c00140dd:	83 c4 08             	add    esp,0x8
c00140e0:	5b                   	pop    ebx
c00140e1:	c3                   	ret    

c00140e2 <Device::loadDriversForAll()>:
c00140e2:	53                   	push   ebx
c00140e3:	83 ec 08             	sub    esp,0x8
c00140e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00140ea:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00140f0:	8b 18                	mov    ebx,DWORD PTR [eax]
c00140f2:	85 db                	test   ebx,ebx
c00140f4:	74 12                	je     c0014108 <Device::loadDriversForAll()+0x26>
c00140f6:	83 ec 0c             	sub    esp,0xc
c00140f9:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00140fc:	e8 e1 ff ff ff       	call   c00140e2 <Device::loadDriversForAll()>
c0014101:	83 c4 10             	add    esp,0x10
c0014104:	89 d8                	mov    eax,ebx
c0014106:	eb e8                	jmp    c00140f0 <Device::loadDriversForAll()+0xe>
c0014108:	83 c4 08             	add    esp,0x8
c001410b:	5b                   	pop    ebx
c001410c:	c3                   	ret    
c001410d:	90                   	nop

c001410e <Device::closeAll()>:
c001410e:	53                   	push   ebx
c001410f:	83 ec 08             	sub    esp,0x8
c0014112:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0014116:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014118:	6a 00                	push   0x0
c001411a:	6a 00                	push   0x0
c001411c:	6a 00                	push   0x0
c001411e:	53                   	push   ebx
c001411f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014122:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014128:	83 c4 10             	add    esp,0x10
c001412b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001412e:	74 0f                	je     c001413f <Device::closeAll()+0x31>
c0014130:	83 ec 0c             	sub    esp,0xc
c0014133:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014136:	e8 d3 ff ff ff       	call   c001410e <Device::closeAll()>
c001413b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001413d:	eb e9                	jmp    c0014128 <Device::closeAll()+0x1a>
c001413f:	83 c4 08             	add    esp,0x8
c0014142:	5b                   	pop    ebx
c0014143:	c3                   	ret    

c0014144 <Device::powerSavingAll(PowerSavingLevel)>:
c0014144:	56                   	push   esi
c0014145:	53                   	push   ebx
c0014146:	83 ec 0c             	sub    esp,0xc
c0014149:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001414d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014151:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014153:	56                   	push   esi
c0014154:	53                   	push   ebx
c0014155:	ff 50 20             	call   DWORD PTR [eax+0x20]
c0014158:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c001415e:	83 c4 10             	add    esp,0x10
c0014161:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014164:	74 0f                	je     c0014175 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014166:	52                   	push   edx
c0014167:	52                   	push   edx
c0014168:	56                   	push   esi
c0014169:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001416c:	e8 d3 ff ff ff       	call   c0014144 <Device::powerSavingAll(PowerSavingLevel)>
c0014171:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014173:	eb e9                	jmp    c001415e <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014175:	58                   	pop    eax
c0014176:	5b                   	pop    ebx
c0014177:	5e                   	pop    esi
c0014178:	c3                   	ret    
c0014179:	90                   	nop

c001417a <Device::setName(char const*)>:
c001417a:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014182:	e9 ad c6 fe ff       	jmp    c0000834 <strcpy>
c0014187:	90                   	nop

c0014188 <Device::Device(char const*)>:
c0014188:	83 ec 1c             	sub    esp,0x1c
c001418b:	ba f8 a7 02 c0       	mov    edx,0xc002a7f8
c0014190:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014194:	89 10                	mov    DWORD PTR [eax],edx
c0014196:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001419a:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c00141a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141a8:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c00141b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141b6:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00141c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00141c4:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00141ce:	83 ec 08             	sub    esp,0x8
c00141d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00141d5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00141d9:	e8 9c ff ff ff       	call   c001417a <Device::setName(char const*)>
c00141de:	83 c4 10             	add    esp,0x10
c00141e1:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00141e9:	83 ec 0c             	sub    esp,0xc
c00141ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00141f0:	e8 4b b6 ff ff       	call   c000f840 <malloc>
c00141f5:	83 c4 10             	add    esp,0x10
c00141f8:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00141fe:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014205:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0014209:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c001420f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014213:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014219:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001421f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014223:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c0014229:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014230:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014234:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001423b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001423f:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014246:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001424a:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014254:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014258:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014262:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014266:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014274:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c001427e:	90                   	nop
c001427f:	83 c4 1c             	add    esp,0x1c
c0014282:	c3                   	ret    
c0014283:	90                   	nop

c0014284 <Device::getName()>:
c0014284:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014288:	05 d0 00 00 00       	add    eax,0xd0
c001428d:	c3                   	ret    

c001428e <DriverlessDevice::DriverlessDevice(char const*)>:
c001428e:	83 ec 0c             	sub    esp,0xc
c0014291:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014295:	83 ec 08             	sub    esp,0x8
c0014298:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001429c:	50                   	push   eax
c001429d:	e8 e6 fe ff ff       	call   c0014188 <Device::Device(char const*)>
c00142a2:	83 c4 10             	add    esp,0x10
c00142a5:	ba 24 a8 02 c0       	mov    edx,0xc002a824
c00142aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00142ae:	89 10                	mov    DWORD PTR [eax],edx
c00142b0:	90                   	nop
c00142b1:	83 c4 0c             	add    esp,0xc
c00142b4:	c3                   	ret    
c00142b5:	90                   	nop

c00142b6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c00142b6:	57                   	push   edi
c00142b7:	56                   	push   esi
c00142b8:	53                   	push   ebx
c00142b9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00142bd:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00142c1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00142c5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00142cb:	75 0c                	jne    c00142d9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00142cd:	52                   	push   edx
c00142ce:	52                   	push   edx
c00142cf:	53                   	push   ebx
c00142d0:	56                   	push   esi
c00142d1:	e8 54 42 01 00       	call   c002852a <LinkedList<Device>::addElement(Device*)>
c00142d6:	83 c4 10             	add    esp,0x10
c00142d9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00142df:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142e2:	74 12                	je     c00142f6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00142e4:	50                   	push   eax
c00142e5:	57                   	push   edi
c00142e6:	56                   	push   esi
c00142e7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00142ea:	e8 c7 ff ff ff       	call   c00142b6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00142ef:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142f1:	83 c4 10             	add    esp,0x10
c00142f4:	eb e9                	jmp    c00142df <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00142f6:	5b                   	pop    ebx
c00142f7:	5e                   	pop    esi
c00142f8:	5f                   	pop    edi
c00142f9:	c3                   	ret    

c00142fa <getDevicesOfType(DeviceType)>:
c00142fa:	53                   	push   ebx
c00142fb:	83 ec 14             	sub    esp,0x14
c00142fe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014302:	53                   	push   ebx
c0014303:	e8 fe 42 01 00       	call   c0028606 <LinkedList<Device>::LinkedList()>
c0014308:	83 c4 0c             	add    esp,0xc
c001430b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001430f:	53                   	push   ebx
c0014310:	ff 35 08 e0 02 c0    	push   DWORD PTR ds:0xc002e008
c0014316:	e8 9b ff ff ff       	call   c00142b6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c001431b:	89 d8                	mov    eax,ebx
c001431d:	83 c4 18             	add    esp,0x18
c0014320:	5b                   	pop    ebx
c0014321:	c2 04 00             	ret    0x4

c0014324 <HardDiskController::HardDiskController(char const*)>:
c0014324:	83 ec 0c             	sub    esp,0xc
c0014327:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001432b:	83 ec 08             	sub    esp,0x8
c001432e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014332:	50                   	push   eax
c0014333:	e8 50 fe ff ff       	call   c0014188 <Device::Device(char const*)>
c0014338:	83 c4 10             	add    esp,0x10
c001433b:	ba 50 a8 02 c0       	mov    edx,0xc002a850
c0014340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014344:	89 10                	mov    DWORD PTR [eax],edx
c0014346:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001434a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014354:	90                   	nop
c0014355:	83 c4 0c             	add    esp,0xc
c0014358:	c3                   	ret    
c0014359:	90                   	nop

c001435a <HardDiskController::~HardDiskController()>:
c001435a:	83 ec 0c             	sub    esp,0xc
c001435d:	ba 50 a8 02 c0       	mov    edx,0xc002a850
c0014362:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014366:	89 10                	mov    DWORD PTR [eax],edx
c0014368:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001436c:	83 ec 0c             	sub    esp,0xc
c001436f:	50                   	push   eax
c0014370:	e8 f5 fa ff ff       	call   c0013e6a <Device::~Device()>
c0014375:	83 c4 10             	add    esp,0x10
c0014378:	90                   	nop
c0014379:	83 c4 0c             	add    esp,0xc
c001437c:	c3                   	ret    
c001437d:	90                   	nop

c001437e <HardDiskController::~HardDiskController()>:
c001437e:	83 ec 0c             	sub    esp,0xc
c0014381:	83 ec 0c             	sub    esp,0xc
c0014384:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014388:	e8 cd ff ff ff       	call   c001435a <HardDiskController::~HardDiskController()>
c001438d:	83 c4 10             	add    esp,0x10
c0014390:	83 ec 08             	sub    esp,0x8
c0014393:	68 58 01 00 00       	push   0x158
c0014398:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001439c:	e8 f0 e6 ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c00143a1:	83 c4 10             	add    esp,0x10
c00143a4:	83 c4 0c             	add    esp,0xc
c00143a7:	c3                   	ret    

c00143a8 <PhysicalDisk::eject()>:
c00143a8:	83 ec 18             	sub    esp,0x18
c00143ab:	68 74 a8 02 c0       	push   0xc002a874
c00143b0:	e8 bc e7 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c00143b5:	83 c8 ff             	or     eax,0xffffffff
c00143b8:	83 c4 1c             	add    esp,0x1c
c00143bb:	c3                   	ret    

c00143bc <PhysicalDisk::PhysicalDisk(char const*, int)>:
c00143bc:	83 ec 0c             	sub    esp,0xc
c00143bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143c3:	83 ec 08             	sub    esp,0x8
c00143c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00143ca:	50                   	push   eax
c00143cb:	e8 b8 fd ff ff       	call   c0014188 <Device::Device(char const*)>
c00143d0:	83 c4 10             	add    esp,0x10
c00143d3:	ba a4 a8 02 c0       	mov    edx,0xc002a8a4
c00143d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143dc:	89 10                	mov    DWORD PTR [eax],edx
c00143de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143e2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00143e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143ed:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00143f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143f8:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c0014402:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014406:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001440a:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0014410:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014414:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c001441e:	90                   	nop
c001441f:	83 c4 0c             	add    esp,0xc
c0014422:	c3                   	ret    
c0014423:	90                   	nop

c0014424 <PhysicalDisk::startCache()>:
c0014424:	56                   	push   esi
c0014425:	53                   	push   ebx
c0014426:	83 ec 10             	sub    esp,0x10
c0014429:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001442d:	6a 44                	push   0x44
c001442f:	e8 0c b4 ff ff       	call   c000f840 <malloc>
c0014434:	89 c6                	mov    esi,eax
c0014436:	58                   	pop    eax
c0014437:	5a                   	pop    edx
c0014438:	53                   	push   ebx
c0014439:	56                   	push   esi
c001443a:	e8 03 27 00 00       	call   c0016b42 <VCache::VCache(PhysicalDisk*)>
c001443f:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014445:	83 c4 14             	add    esp,0x14
c0014448:	5b                   	pop    ebx
c0014449:	5e                   	pop    esi
c001444a:	c3                   	ret    
c001444b:	90                   	nop

c001444c <PhysicalDisk::~PhysicalDisk()>:
c001444c:	83 ec 0c             	sub    esp,0xc
c001444f:	ba a4 a8 02 c0       	mov    edx,0xc002a8a4
c0014454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014458:	89 10                	mov    DWORD PTR [eax],edx
c001445a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001445e:	83 ec 0c             	sub    esp,0xc
c0014461:	50                   	push   eax
c0014462:	e8 03 fa ff ff       	call   c0013e6a <Device::~Device()>
c0014467:	83 c4 10             	add    esp,0x10
c001446a:	90                   	nop
c001446b:	83 c4 0c             	add    esp,0xc
c001446e:	c3                   	ret    
c001446f:	90                   	nop

c0014470 <PhysicalDisk::~PhysicalDisk()>:
c0014470:	83 ec 0c             	sub    esp,0xc
c0014473:	83 ec 0c             	sub    esp,0xc
c0014476:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001447a:	e8 cd ff ff ff       	call   c001444c <PhysicalDisk::~PhysicalDisk()>
c001447f:	83 c4 10             	add    esp,0x10
c0014482:	83 ec 08             	sub    esp,0x8
c0014485:	68 6c 01 00 00       	push   0x16c
c001448a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001448e:	e8 fe e5 ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0014493:	83 c4 10             	add    esp,0x10
c0014496:	83 c4 0c             	add    esp,0xc
c0014499:	c3                   	ret    

c001449a <FPU::FPU(char const*)>:
c001449a:	83 ec 0c             	sub    esp,0xc
c001449d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144a1:	83 ec 08             	sub    esp,0x8
c00144a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144a8:	50                   	push   eax
c00144a9:	e8 da fc ff ff       	call   c0014188 <Device::Device(char const*)>
c00144ae:	83 c4 10             	add    esp,0x10
c00144b1:	ba e8 a8 02 c0       	mov    edx,0xc002a8e8
c00144b6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144ba:	89 10                	mov    DWORD PTR [eax],edx
c00144bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144c0:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00144ca:	90                   	nop
c00144cb:	83 c4 0c             	add    esp,0xc
c00144ce:	c3                   	ret    
c00144cf:	90                   	nop

c00144d0 <FPU::~FPU()>:
c00144d0:	83 ec 0c             	sub    esp,0xc
c00144d3:	ba e8 a8 02 c0       	mov    edx,0xc002a8e8
c00144d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144dc:	89 10                	mov    DWORD PTR [eax],edx
c00144de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00144e2:	83 ec 0c             	sub    esp,0xc
c00144e5:	50                   	push   eax
c00144e6:	e8 7f f9 ff ff       	call   c0013e6a <Device::~Device()>
c00144eb:	83 c4 10             	add    esp,0x10
c00144ee:	90                   	nop
c00144ef:	83 c4 0c             	add    esp,0xc
c00144f2:	c3                   	ret    
c00144f3:	90                   	nop

c00144f4 <FPU::~FPU()>:
c00144f4:	83 ec 0c             	sub    esp,0xc
c00144f7:	83 ec 0c             	sub    esp,0xc
c00144fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00144fe:	e8 cd ff ff ff       	call   c00144d0 <FPU::~FPU()>
c0014503:	83 c4 10             	add    esp,0x10
c0014506:	83 ec 08             	sub    esp,0x8
c0014509:	68 58 01 00 00       	push   0x158
c001450e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014512:	e8 7a e5 ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0014517:	83 c4 10             	add    esp,0x10
c001451a:	83 c4 0c             	add    esp,0xc
c001451d:	c3                   	ret    

c001451e <setupFPU()>:
c001451e:	53                   	push   ebx
c001451f:	83 ec 08             	sub    esp,0x8
c0014522:	8b 15 08 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e008
c0014528:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001452f:	74 19                	je     c001454a <setupFPU()+0x2c>
c0014531:	83 ec 0c             	sub    esp,0xc
c0014534:	68 58 01 00 00       	push   0x158
c0014539:	e8 02 b3 ff ff       	call   c000f840 <malloc>
c001453e:	89 c3                	mov    ebx,eax
c0014540:	89 04 24             	mov    DWORD PTR [esp],eax
c0014543:	e8 30 0c 01 00       	call   c0025178 <AVX::AVX()>
c0014548:	eb 5b                	jmp    c00145a5 <setupFPU()+0x87>
c001454a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014550:	84 c0                	test   al,al
c0014552:	79 19                	jns    c001456d <setupFPU()+0x4f>
c0014554:	83 ec 0c             	sub    esp,0xc
c0014557:	68 58 01 00 00       	push   0x158
c001455c:	e8 df b2 ff ff       	call   c000f840 <malloc>
c0014561:	89 c3                	mov    ebx,eax
c0014563:	89 04 24             	mov    DWORD PTR [esp],eax
c0014566:	e8 33 0d 01 00       	call   c002529e <SSE::SSE()>
c001456b:	eb 38                	jmp    c00145a5 <setupFPU()+0x87>
c001456d:	a8 20                	test   al,0x20
c001456f:	74 19                	je     c001458a <setupFPU()+0x6c>
c0014571:	83 ec 0c             	sub    esp,0xc
c0014574:	68 58 01 00 00       	push   0x158
c0014579:	e8 c2 b2 ff ff       	call   c000f840 <malloc>
c001457e:	89 c3                	mov    ebx,eax
c0014580:	89 04 24             	mov    DWORD PTR [esp],eax
c0014583:	e8 80 0c 01 00       	call   c0025208 <MMX::MMX()>
c0014588:	eb 1b                	jmp    c00145a5 <setupFPU()+0x87>
c001458a:	a8 10                	test   al,0x10
c001458c:	74 1c                	je     c00145aa <setupFPU()+0x8c>
c001458e:	83 ec 0c             	sub    esp,0xc
c0014591:	68 58 01 00 00       	push   0x158
c0014596:	e8 a5 b2 ff ff       	call   c000f840 <malloc>
c001459b:	89 c3                	mov    ebx,eax
c001459d:	89 04 24             	mov    DWORD PTR [esp],eax
c00145a0:	e8 87 0d 01 00       	call   c002532c <x87::x87()>
c00145a5:	83 c4 10             	add    esp,0x10
c00145a8:	eb 24                	jmp    c00145ce <setupFPU()+0xb0>
c00145aa:	83 e0 ef             	and    eax,0xffffffef
c00145ad:	83 ec 0c             	sub    esp,0xc
c00145b0:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00145b6:	68 d4 a8 02 c0       	push   0xc002a8d4
c00145bb:	e8 b1 e5 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c00145c0:	0f 20 c0             	mov    eax,cr0
c00145c3:	83 c8 04             	or     eax,0x4
c00145c6:	0f 22 c0             	mov    cr0,eax
c00145c9:	31 db                	xor    ebx,ebx
c00145cb:	83 c4 10             	add    esp,0x10
c00145ce:	89 d8                	mov    eax,ebx
c00145d0:	83 c4 08             	add    esp,0x8
c00145d3:	5b                   	pop    ebx
c00145d4:	c3                   	ret    
c00145d5:	90                   	nop

c00145d6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00145d6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00145da:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00145de:	c1 e0 04             	shl    eax,0x4
c00145e1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00145e5:	8d 50 10             	lea    edx,[eax+0x10]
c00145e8:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00145ee:	74 08                	je     c00145f8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00145f0:	83 c0 04             	add    eax,0x4
c00145f3:	39 d0                	cmp    eax,edx
c00145f5:	75 f1                	jne    c00145e8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00145f7:	c3                   	ret    
c00145f8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014602:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c001460c:	eb e2                	jmp    c00145f0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c001460e <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c001460e:	57                   	push   edi
c001460f:	31 c0                	xor    eax,eax
c0014611:	56                   	push   esi
c0014612:	53                   	push   ebx
c0014613:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0014617:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001461b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001461f:	89 da                	mov    edx,ebx
c0014621:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014625:	c1 e2 04             	shl    edx,0x4
c0014628:	01 ca                	add    edx,ecx
c001462a:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014632:	74 16                	je     c001464a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014634:	40                   	inc    eax
c0014635:	83 f8 04             	cmp    eax,0x4
c0014638:	75 f0                	jne    c001462a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001463a:	c7 44 24 10 18 a9 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a918
c0014642:	5b                   	pop    ebx
c0014643:	5e                   	pop    esi
c0014644:	5f                   	pop    edi
c0014645:	e9 a3 5b 00 00       	jmp    c001a1ed <Krnl::panic(char const*)>
c001464a:	8d 04 98             	lea    eax,[eax+ebx*4]
c001464d:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014650:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014656:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001465c:	5b                   	pop    ebx
c001465d:	5e                   	pop    esi
c001465e:	5f                   	pop    edi
c001465f:	c3                   	ret    

c0014660 <doubleFault(regs*, void*)>:
c0014660:	55                   	push   ebp
c0014661:	89 e5                	mov    ebp,esp
c0014663:	83 ec 08             	sub    esp,0x8
c0014666:	83 ec 0c             	sub    esp,0xc
c0014669:	68 53 a9 02 c0       	push   0xc002a953
c001466e:	e8 7a 5b 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c0014673:	83 c4 10             	add    esp,0x10
c0014676:	90                   	nop
c0014677:	c9                   	leave  
c0014678:	c3                   	ret    
c0014679:	90                   	nop

c001467a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001467a:	56                   	push   esi
c001467b:	53                   	push   ebx
c001467c:	50                   	push   eax
c001467d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014681:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014685:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001468a:	75 35                	jne    c00146c1 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001468c:	8d 43 20             	lea    eax,[ebx+0x20]
c001468f:	31 d2                	xor    edx,edx
c0014691:	89 c1                	mov    ecx,eax
c0014693:	c1 e1 04             	shl    ecx,0x4
c0014696:	01 f1                	add    ecx,esi
c0014698:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c00146a0:	74 3e                	je     c00146e0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c00146a2:	42                   	inc    edx
c00146a3:	83 fa 04             	cmp    edx,0x4
c00146a6:	75 f0                	jne    c0014698 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c00146a8:	83 ec 0c             	sub    esp,0xc
c00146ab:	68 98 a9 02 c0       	push   0xc002a998
c00146b0:	e8 38 5b 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c00146b5:	83 c4 10             	add    esp,0x10
c00146b8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00146bd:	5a                   	pop    edx
c00146be:	5b                   	pop    ebx
c00146bf:	5e                   	pop    esi
c00146c0:	c3                   	ret    
c00146c1:	83 ec 0c             	sub    esp,0xc
c00146c4:	56                   	push   esi
c00146c5:	e8 ba fb ff ff       	call   c0014284 <Device::getName()>
c00146ca:	83 c4 10             	add    esp,0x10
c00146cd:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00146d0:	75 ba                	jne    c001468c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00146d2:	83 fb 0f             	cmp    ebx,0xf
c00146d5:	7f 29                	jg     c0014700 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00146d7:	0f b6 9b 60 d2 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd2da0]
c00146de:	eb ac                	jmp    c001468c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00146e0:	8d 04 82             	lea    eax,[edx+eax*4]
c00146e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00146e7:	8d 04 86             	lea    eax,[esi+eax*4]
c00146ea:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00146f0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00146f4:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00146fa:	89 d8                	mov    eax,ebx
c00146fc:	5a                   	pop    edx
c00146fd:	5b                   	pop    ebx
c00146fe:	5e                   	pop    esi
c00146ff:	c3                   	ret    
c0014700:	83 ec 0c             	sub    esp,0xc
c0014703:	68 60 a9 02 c0       	push   0xc002a960
c0014708:	e8 e0 5a 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c001470d:	83 c4 10             	add    esp,0x10
c0014710:	e9 77 ff ff ff       	jmp    c001468c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c0014715:	90                   	nop

c0014716 <InterruptController::clearAllHandlers(int, bool)>:
c0014716:	56                   	push   esi
c0014717:	53                   	push   ebx
c0014718:	52                   	push   edx
c0014719:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001471d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014721:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014726:	75 61                	jne    c0014789 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014728:	8d 46 20             	lea    eax,[esi+0x20]
c001472b:	c1 e6 04             	shl    esi,0x4
c001472e:	c1 e0 04             	shl    eax,0x4
c0014731:	01 de                	add    esi,ebx
c0014733:	01 d8                	add    eax,ebx
c0014735:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c001473f:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014749:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014753:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c001475d:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014767:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014771:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c001477b:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014785:	58                   	pop    eax
c0014786:	5b                   	pop    ebx
c0014787:	5e                   	pop    esi
c0014788:	c3                   	ret    
c0014789:	83 ec 0c             	sub    esp,0xc
c001478c:	53                   	push   ebx
c001478d:	e8 f2 fa ff ff       	call   c0014284 <Device::getName()>
c0014792:	83 c4 10             	add    esp,0x10
c0014795:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014798:	75 8e                	jne    c0014728 <InterruptController::clearAllHandlers(int, bool)+0x12>
c001479a:	83 fe 0f             	cmp    esi,0xf
c001479d:	7f 09                	jg     c00147a8 <InterruptController::clearAllHandlers(int, bool)+0x92>
c001479f:	0f b6 b6 60 d2 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd2da0]
c00147a6:	eb 80                	jmp    c0014728 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00147a8:	83 ec 0c             	sub    esp,0xc
c00147ab:	68 d4 a9 02 c0       	push   0xc002a9d4
c00147b0:	e8 38 5a 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c00147b5:	83 c4 10             	add    esp,0x10
c00147b8:	e9 6b ff ff ff       	jmp    c0014728 <InterruptController::clearAllHandlers(int, bool)+0x12>
c00147bd:	90                   	nop

c00147be <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c00147be:	56                   	push   esi
c00147bf:	53                   	push   ebx
c00147c0:	52                   	push   edx
c00147c1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00147c5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00147c9:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c00147ce:	75 3a                	jne    c001480a <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c00147d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00147d4:	8d 50 20             	lea    edx,[eax+0x20]
c00147d7:	c1 e2 04             	shl    edx,0x4
c00147da:	8d 04 16             	lea    eax,[esi+edx*1]
c00147dd:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c00147e1:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c00147e7:	74 0b                	je     c00147f4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c00147e9:	83 c0 04             	add    eax,0x4
c00147ec:	39 d0                	cmp    eax,edx
c00147ee:	75 f1                	jne    c00147e1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c00147f0:	58                   	pop    eax
c00147f1:	5b                   	pop    ebx
c00147f2:	5e                   	pop    esi
c00147f3:	c3                   	ret    
c00147f4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00147fe:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014808:	eb df                	jmp    c00147e9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c001480a:	83 ec 0c             	sub    esp,0xc
c001480d:	56                   	push   esi
c001480e:	e8 71 fa ff ff       	call   c0014284 <Device::getName()>
c0014813:	83 c4 10             	add    esp,0x10
c0014816:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014819:	75 b5                	jne    c00147d0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c001481b:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014820:	7f 11                	jg     c0014833 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014822:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014826:	0f b6 80 60 d2 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd2da0]
c001482d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014831:	eb 9d                	jmp    c00147d0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014833:	83 ec 0c             	sub    esp,0xc
c0014836:	68 d4 a9 02 c0       	push   0xc002a9d4
c001483b:	e8 ad 59 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c0014840:	83 c4 10             	add    esp,0x10
c0014843:	eb 8b                	jmp    c00147d0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014845 <nmiHandler(regs*, void*)>:
c0014845:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c001484a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001484e:	e9 39 a7 ff ff       	jmp    c000ef8c <Computer::handleNMI()>

c0014853 <int_handler>:
c0014853:	55                   	push   ebp
c0014854:	57                   	push   edi
c0014855:	56                   	push   esi
c0014856:	53                   	push   ebx
c0014857:	83 ec 0c             	sub    esp,0xc
c001485a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001485e:	80 3d 64 0b 03 c0 00 	cmp    BYTE PTR ds:0xc0030b64,0x0
c0014865:	74 0b                	je     c0014872 <int_handler+0x1f>
c0014867:	fa                   	cli    
c0014868:	f4                   	hlt    
c0014869:	80 3d 64 0b 03 c0 00 	cmp    BYTE PTR ds:0xc0030b64,0x0
c0014870:	75 f5                	jne    c0014867 <int_handler+0x14>
c0014872:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0014877:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c001487a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014880:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014886:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014889:	83 f8 17             	cmp    eax,0x17
c001488c:	77 13                	ja     c00148a1 <int_handler+0x4e>
c001488e:	83 ec 08             	sub    esp,0x8
c0014891:	8b 17                	mov    edx,DWORD PTR [edi]
c0014893:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014896:	0f b6 c0             	movzx  eax,al
c0014899:	50                   	push   eax
c001489a:	57                   	push   edi
c001489b:	ff 52 38             	call   DWORD PTR [edx+0x38]
c001489e:	83 c4 10             	add    esp,0x10
c00148a1:	83 c3 15             	add    ebx,0x15
c00148a4:	c1 e3 04             	shl    ebx,0x4
c00148a7:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c00148ab:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c00148b2:	31 db                	xor    ebx,ebx
c00148b4:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c00148b8:	85 c0                	test   eax,eax
c00148ba:	74 13                	je     c00148cf <int_handler+0x7c>
c00148bc:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c00148bf:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c00148c3:	74 1c                	je     c00148e1 <int_handler+0x8e>
c00148c5:	83 ec 08             	sub    esp,0x8
c00148c8:	52                   	push   edx
c00148c9:	56                   	push   esi
c00148ca:	ff d0                	call   eax
c00148cc:	83 c4 10             	add    esp,0x10
c00148cf:	43                   	inc    ebx
c00148d0:	83 fb 04             	cmp    ebx,0x4
c00148d3:	75 df                	jne    c00148b4 <int_handler+0x61>
c00148d5:	83 c4 0c             	add    esp,0xc
c00148d8:	31 c0                	xor    eax,eax
c00148da:	5b                   	pop    ebx
c00148db:	31 d2                	xor    edx,edx
c00148dd:	5e                   	pop    esi
c00148de:	5f                   	pop    edi
c00148df:	5d                   	pop    ebp
c00148e0:	c3                   	ret    
c00148e1:	83 ec 08             	sub    esp,0x8
c00148e4:	52                   	push   edx
c00148e5:	56                   	push   esi
c00148e6:	ff d0                	call   eax
c00148e8:	83 c4 10             	add    esp,0x10
c00148eb:	83 c4 0c             	add    esp,0xc
c00148ee:	5b                   	pop    ebx
c00148ef:	5e                   	pop    esi
c00148f0:	5f                   	pop    edi
c00148f1:	5d                   	pop    ebp
c00148f2:	c3                   	ret    
c00148f3:	90                   	nop

c00148f4 <InterruptController::InterruptController(char const*)>:
c00148f4:	83 ec 1c             	sub    esp,0x1c
c00148f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00148fb:	83 ec 08             	sub    esp,0x8
c00148fe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014902:	50                   	push   eax
c0014903:	e8 80 f8 ff ff       	call   c0014188 <Device::Device(char const*)>
c0014908:	83 c4 10             	add    esp,0x10
c001490b:	ba 70 ac 02 c0       	mov    edx,0xc002ac70
c0014910:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014914:	89 10                	mov    DWORD PTR [eax],edx
c0014916:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001491a:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014924:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001492c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014934:	7f 5e                	jg     c0014994 <InterruptController::InterruptController(char const*)+0xa0>
c0014936:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001493e:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014943:	7f 49                	jg     c001498e <InterruptController::InterruptController(char const*)+0x9a>
c0014945:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014949:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001494d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014954:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014958:	01 ca                	add    edx,ecx
c001495a:	83 c2 54             	add    edx,0x54
c001495d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014965:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014969:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001496d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014974:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014978:	01 ca                	add    edx,ecx
c001497a:	81 c2 54 04 00 00    	add    edx,0x454
c0014980:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014988:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001498c:	eb b0                	jmp    c001493e <InterruptController::InterruptController(char const*)+0x4a>
c001498e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014992:	eb 98                	jmp    c001492c <InterruptController::InterruptController(char const*)+0x38>
c0014994:	90                   	nop
c0014995:	83 c4 1c             	add    esp,0x1c
c0014998:	c3                   	ret    
c0014999:	90                   	nop

c001499a <InterruptController::~InterruptController()>:
c001499a:	83 ec 0c             	sub    esp,0xc
c001499d:	ba 70 ac 02 c0       	mov    edx,0xc002ac70
c00149a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00149a6:	89 10                	mov    DWORD PTR [eax],edx
c00149a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00149ac:	83 ec 0c             	sub    esp,0xc
c00149af:	50                   	push   eax
c00149b0:	e8 b5 f4 ff ff       	call   c0013e6a <Device::~Device()>
c00149b5:	83 c4 10             	add    esp,0x10
c00149b8:	90                   	nop
c00149b9:	83 c4 0c             	add    esp,0xc
c00149bc:	c3                   	ret    
c00149bd:	90                   	nop

c00149be <InterruptController::~InterruptController()>:
c00149be:	83 ec 0c             	sub    esp,0xc
c00149c1:	83 ec 0c             	sub    esp,0xc
c00149c4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149c8:	e8 cd ff ff ff       	call   c001499a <InterruptController::~InterruptController()>
c00149cd:	83 c4 10             	add    esp,0x10
c00149d0:	83 ec 08             	sub    esp,0x8
c00149d3:	68 58 21 00 00       	push   0x2158
c00149d8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00149dc:	e8 b0 e0 ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c00149e1:	83 c4 10             	add    esp,0x10
c00149e4:	83 c4 0c             	add    esp,0xc
c00149e7:	c3                   	ret    

c00149e8 <displayDebugInfo(regs*)>:
c00149e8:	55                   	push   ebp
c00149e9:	57                   	push   edi
c00149ea:	56                   	push   esi
c00149eb:	53                   	push   ebx
c00149ec:	83 ec 24             	sub    esp,0x24
c00149ef:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00149f3:	0f 20 c2             	mov    edx,cr0
c00149f6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00149fa:	0f 20 d7             	mov    edi,cr2
c00149fd:	0f 20 de             	mov    esi,cr3
c0014a00:	0f 20 e5             	mov    ebp,cr4
c0014a03:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014a06:	68 0e aa 02 c0       	push   0xc002aa0e
c0014a0b:	e8 61 e1 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0014a10:	59                   	pop    ecx
c0014a11:	58                   	pop    eax
c0014a12:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014a15:	68 19 aa 02 c0       	push   0xc002aa19
c0014a1a:	e8 52 e1 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0014a1f:	58                   	pop    eax
c0014a20:	5a                   	pop    edx
c0014a21:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014a24:	68 24 aa 02 c0       	push   0xc002aa24
c0014a29:	e8 43 e1 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0014a2e:	59                   	pop    ecx
c0014a2f:	58                   	pop    eax
c0014a30:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014a33:	68 2f aa 02 c0       	push   0xc002aa2f
c0014a38:	e8 34 e1 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0014a3d:	58                   	pop    eax
c0014a3e:	5a                   	pop    edx
c0014a3f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014a42:	68 3a aa 02 c0       	push   0xc002aa3a
c0014a47:	e8 25 e1 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0014a4c:	59                   	pop    ecx
c0014a4d:	58                   	pop    eax
c0014a4e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014a51:	68 45 aa 02 c0       	push   0xc002aa45
c0014a56:	e8 16 e1 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0014a5b:	58                   	pop    eax
c0014a5c:	5a                   	pop    edx
c0014a5d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014a60:	68 50 aa 02 c0       	push   0xc002aa50
c0014a65:	e8 07 e1 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0014a6a:	59                   	pop    ecx
c0014a6b:	58                   	pop    eax
c0014a6c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014a6f:	68 5b aa 02 c0       	push   0xc002aa5b
c0014a74:	e8 f8 e0 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0014a79:	58                   	pop    eax
c0014a7a:	5a                   	pop    edx
c0014a7b:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014a7e:	68 66 aa 02 c0       	push   0xc002aa66
c0014a83:	e8 e9 e0 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0014a88:	59                   	pop    ecx
c0014a89:	58                   	pop    eax
c0014a8a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014a8d:	68 75 aa 02 c0       	push   0xc002aa75
c0014a92:	e8 da e0 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0014a97:	58                   	pop    eax
c0014a98:	5a                   	pop    edx
c0014a99:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014a9c:	68 80 aa 02 c0       	push   0xc002aa80
c0014aa1:	e8 cb e0 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0014aa6:	59                   	pop    ecx
c0014aa7:	58                   	pop    eax
c0014aa8:	57                   	push   edi
c0014aa9:	68 8b aa 02 c0       	push   0xc002aa8b
c0014aae:	e8 be e0 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0014ab3:	58                   	pop    eax
c0014ab4:	5a                   	pop    edx
c0014ab5:	56                   	push   esi
c0014ab6:	68 96 aa 02 c0       	push   0xc002aa96
c0014abb:	e8 b1 e0 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0014ac0:	59                   	pop    ecx
c0014ac1:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014ac6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014acc:	e8 62 c2 ff ff       	call   c0010d33 <setActiveTerminal(VgaText*)>
c0014ad1:	58                   	pop    eax
c0014ad2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014ad5:	5a                   	pop    edx
c0014ad6:	c1 e0 05             	shl    eax,0x5
c0014ad9:	05 c0 cf 02 c0       	add    eax,0xc002cfc0
c0014ade:	50                   	push   eax
c0014adf:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014ae4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014aea:	e8 63 c6 ff ff       	call   c0011152 <VgaText::puts(char const*)>
c0014aef:	59                   	pop    ecx
c0014af0:	58                   	pop    eax
c0014af1:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014af6:	68 a1 aa 02 c0       	push   0xc002aaa1
c0014afb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b01:	e8 4c c6 ff ff       	call   c0011152 <VgaText::puts(char const*)>
c0014b06:	58                   	pop    eax
c0014b07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014b0c:	5a                   	pop    edx
c0014b0d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014b10:	83 c0 0c             	add    eax,0xc
c0014b13:	50                   	push   eax
c0014b14:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014b19:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b1f:	e8 2e c6 ff ff       	call   c0011152 <VgaText::puts(char const*)>
c0014b24:	59                   	pop    ecx
c0014b25:	58                   	pop    eax
c0014b26:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014b2b:	68 aa aa 02 c0       	push   0xc002aaaa
c0014b30:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b36:	e8 17 c6 ff ff       	call   c0011152 <VgaText::puts(char const*)>
c0014b3b:	58                   	pop    eax
c0014b3c:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014b41:	5a                   	pop    edx
c0014b42:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014b45:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b4b:	e8 28 c6 ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c0014b50:	59                   	pop    ecx
c0014b51:	58                   	pop    eax
c0014b52:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014b57:	68 b2 aa 02 c0       	push   0xc002aab2
c0014b5c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b62:	e8 eb c5 ff ff       	call   c0011152 <VgaText::puts(char const*)>
c0014b67:	58                   	pop    eax
c0014b68:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014b6d:	5a                   	pop    edx
c0014b6e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014b71:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b77:	e8 fc c5 ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c0014b7c:	59                   	pop    ecx
c0014b7d:	58                   	pop    eax
c0014b7e:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014b83:	68 ba aa 02 c0       	push   0xc002aaba
c0014b88:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014b8e:	e8 bf c5 ff ff       	call   c0011152 <VgaText::puts(char const*)>
c0014b93:	58                   	pop    eax
c0014b94:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014b99:	5a                   	pop    edx
c0014b9a:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014b9d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ba3:	e8 d0 c5 ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c0014ba8:	59                   	pop    ecx
c0014ba9:	58                   	pop    eax
c0014baa:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014baf:	68 c2 aa 02 c0       	push   0xc002aac2
c0014bb4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bba:	e8 93 c5 ff ff       	call   c0011152 <VgaText::puts(char const*)>
c0014bbf:	58                   	pop    eax
c0014bc0:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014bc5:	5a                   	pop    edx
c0014bc6:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014bc9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bcf:	e8 a4 c5 ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c0014bd4:	59                   	pop    ecx
c0014bd5:	58                   	pop    eax
c0014bd6:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014bdb:	68 ca aa 02 c0       	push   0xc002aaca
c0014be0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014be6:	e8 67 c5 ff ff       	call   c0011152 <VgaText::puts(char const*)>
c0014beb:	58                   	pop    eax
c0014bec:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014bf1:	5a                   	pop    edx
c0014bf2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014bf5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014bfb:	e8 78 c5 ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c0014c00:	59                   	pop    ecx
c0014c01:	58                   	pop    eax
c0014c02:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014c07:	68 d2 aa 02 c0       	push   0xc002aad2
c0014c0c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c12:	e8 3b c5 ff ff       	call   c0011152 <VgaText::puts(char const*)>
c0014c17:	58                   	pop    eax
c0014c18:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014c1d:	5a                   	pop    edx
c0014c1e:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014c21:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c27:	e8 4c c5 ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c0014c2c:	59                   	pop    ecx
c0014c2d:	58                   	pop    eax
c0014c2e:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014c33:	68 da aa 02 c0       	push   0xc002aada
c0014c38:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c3e:	e8 0f c5 ff ff       	call   c0011152 <VgaText::puts(char const*)>
c0014c43:	58                   	pop    eax
c0014c44:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014c49:	5a                   	pop    edx
c0014c4a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014c4e:	52                   	push   edx
c0014c4f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c55:	e8 1e c5 ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c0014c5a:	59                   	pop    ecx
c0014c5b:	58                   	pop    eax
c0014c5c:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014c61:	68 e3 aa 02 c0       	push   0xc002aae3
c0014c66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c6c:	e8 e1 c4 ff ff       	call   c0011152 <VgaText::puts(char const*)>
c0014c71:	58                   	pop    eax
c0014c72:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014c77:	5a                   	pop    edx
c0014c78:	57                   	push   edi
c0014c79:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c7f:	e8 f4 c4 ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c0014c84:	59                   	pop    ecx
c0014c85:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014c8a:	5f                   	pop    edi
c0014c8b:	68 eb aa 02 c0       	push   0xc002aaeb
c0014c90:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014c96:	e8 b7 c4 ff ff       	call   c0011152 <VgaText::puts(char const*)>
c0014c9b:	58                   	pop    eax
c0014c9c:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014ca1:	5a                   	pop    edx
c0014ca2:	56                   	push   esi
c0014ca3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ca9:	e8 ca c4 ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c0014cae:	59                   	pop    ecx
c0014caf:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014cb4:	5e                   	pop    esi
c0014cb5:	68 f3 aa 02 c0       	push   0xc002aaf3
c0014cba:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cc0:	e8 8d c4 ff ff       	call   c0011152 <VgaText::puts(char const*)>
c0014cc5:	5f                   	pop    edi
c0014cc6:	58                   	pop    eax
c0014cc7:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014ccc:	55                   	push   ebp
c0014ccd:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cd3:	e8 a0 c4 ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c0014cd8:	58                   	pop    eax
c0014cd9:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014cde:	5a                   	pop    edx
c0014cdf:	68 fb aa 02 c0       	push   0xc002aafb
c0014ce4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014cea:	e8 63 c4 ff ff       	call   c0011152 <VgaText::puts(char const*)>
c0014cef:	0f 21 c0             	mov    eax,db0
c0014cf2:	59                   	pop    ecx
c0014cf3:	5e                   	pop    esi
c0014cf4:	50                   	push   eax
c0014cf5:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014cfa:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d00:	e8 73 c4 ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c0014d05:	5f                   	pop    edi
c0014d06:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014d0b:	5d                   	pop    ebp
c0014d0c:	68 04 ab 02 c0       	push   0xc002ab04
c0014d11:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d17:	e8 36 c4 ff ff       	call   c0011152 <VgaText::puts(char const*)>
c0014d1c:	0f 21 c8             	mov    eax,db1
c0014d1f:	5a                   	pop    edx
c0014d20:	59                   	pop    ecx
c0014d21:	50                   	push   eax
c0014d22:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014d27:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d2d:	e8 46 c4 ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c0014d32:	5e                   	pop    esi
c0014d33:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014d38:	5f                   	pop    edi
c0014d39:	68 0c ab 02 c0       	push   0xc002ab0c
c0014d3e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d44:	e8 09 c4 ff ff       	call   c0011152 <VgaText::puts(char const*)>
c0014d49:	0f 21 d0             	mov    eax,db2
c0014d4c:	5d                   	pop    ebp
c0014d4d:	5a                   	pop    edx
c0014d4e:	50                   	push   eax
c0014d4f:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014d54:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d5a:	e8 19 c4 ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c0014d5f:	59                   	pop    ecx
c0014d60:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014d65:	5e                   	pop    esi
c0014d66:	68 14 ab 02 c0       	push   0xc002ab14
c0014d6b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d71:	e8 dc c3 ff ff       	call   c0011152 <VgaText::puts(char const*)>
c0014d76:	0f 21 d8             	mov    eax,db3
c0014d79:	5f                   	pop    edi
c0014d7a:	5d                   	pop    ebp
c0014d7b:	50                   	push   eax
c0014d7c:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014d81:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d87:	e8 ec c3 ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c0014d8c:	58                   	pop    eax
c0014d8d:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014d92:	5a                   	pop    edx
c0014d93:	68 1c ab 02 c0       	push   0xc002ab1c
c0014d98:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014d9e:	e8 af c3 ff ff       	call   c0011152 <VgaText::puts(char const*)>
c0014da3:	0f 21 f0             	mov    eax,db6
c0014da6:	59                   	pop    ecx
c0014da7:	5e                   	pop    esi
c0014da8:	50                   	push   eax
c0014da9:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014dae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014db4:	e8 bf c3 ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c0014db9:	5f                   	pop    edi
c0014dba:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014dbf:	5d                   	pop    ebp
c0014dc0:	68 24 ab 02 c0       	push   0xc002ab24
c0014dc5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dcb:	e8 82 c3 ff ff       	call   c0011152 <VgaText::puts(char const*)>
c0014dd0:	0f 21 f8             	mov    eax,db7
c0014dd3:	5a                   	pop    edx
c0014dd4:	59                   	pop    ecx
c0014dd5:	50                   	push   eax
c0014dd6:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014ddb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014de1:	e8 92 c3 ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c0014de6:	5e                   	pop    esi
c0014de7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014dea:	e8 2a 85 00 00       	call   c001d319 <Thr::getDriverNameFromAddress(unsigned long)>
c0014def:	83 c4 10             	add    esp,0x10
c0014df2:	85 c0                	test   eax,eax
c0014df4:	74 7d                	je     c0014e73 <displayDebugInfo(regs*)+0x48b>
c0014df6:	89 c6                	mov    esi,eax
c0014df8:	50                   	push   eax
c0014df9:	50                   	push   eax
c0014dfa:	56                   	push   esi
c0014dfb:	68 2c ab 02 c0       	push   0xc002ab2c
c0014e00:	e8 6c dd ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0014e05:	5a                   	pop    edx
c0014e06:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014e0b:	59                   	pop    ecx
c0014e0c:	68 3a ab 02 c0       	push   0xc002ab3a
c0014e11:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e17:	e8 36 c3 ff ff       	call   c0011152 <VgaText::puts(char const*)>
c0014e1c:	5f                   	pop    edi
c0014e1d:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014e22:	5d                   	pop    ebp
c0014e23:	56                   	push   esi
c0014e24:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e2a:	e8 23 c3 ff ff       	call   c0011152 <VgaText::puts(char const*)>
c0014e2f:	58                   	pop    eax
c0014e30:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014e35:	5a                   	pop    edx
c0014e36:	68 46 ab 02 c0       	push   0xc002ab46
c0014e3b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e41:	e8 0c c3 ff ff       	call   c0011152 <VgaText::puts(char const*)>
c0014e46:	59                   	pop    ecx
c0014e47:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0014e4c:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0014e52:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e55:	e8 f6 84 00 00       	call   c001d350 <Thr::getDriverOffsetFromAddress(unsigned long)>
c0014e5a:	5b                   	pop    ebx
c0014e5b:	5d                   	pop    ebp
c0014e5c:	50                   	push   eax
c0014e5d:	57                   	push   edi
c0014e5e:	e8 15 c3 ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c0014e63:	58                   	pop    eax
c0014e64:	5a                   	pop    edx
c0014e65:	56                   	push   esi
c0014e66:	68 52 ab 02 c0       	push   0xc002ab52
c0014e6b:	e8 01 dd ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0014e70:	83 c4 10             	add    esp,0x10
c0014e73:	fa                   	cli    
c0014e74:	f4                   	hlt    
c0014e75:	eb fe                	jmp    c0014e75 <displayDebugInfo(regs*)+0x48d>

c0014e77 <x87EmulHandler(regs*, void*)>:
c0014e77:	53                   	push   ebx
c0014e78:	83 ec 14             	sub    esp,0x14
c0014e7b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014e7f:	53                   	push   ebx
c0014e80:	e8 21 a8 00 00       	call   c001f6a6 <Vm::x87Handler(regs*)>
c0014e85:	83 c4 10             	add    esp,0x10
c0014e88:	84 c0                	test   al,al
c0014e8a:	74 05                	je     c0014e91 <x87EmulHandler(regs*, void*)+0x1a>
c0014e8c:	83 c4 08             	add    esp,0x8
c0014e8f:	5b                   	pop    ebx
c0014e90:	c3                   	ret    
c0014e91:	83 ec 0c             	sub    esp,0xc
c0014e94:	68 62 ab 02 c0       	push   0xc002ab62
c0014e99:	e8 d3 dc ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0014e9e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ea1:	e8 42 fb ff ff       	call   c00149e8 <displayDebugInfo(regs*)>

c0014ea6 <gpFault(regs*, void*)>:
c0014ea6:	53                   	push   ebx
c0014ea7:	83 ec 14             	sub    esp,0x14
c0014eaa:	c7 05 b0 e1 02 c0 23 ea 01 c0 	mov    DWORD PTR ds:0xc002e1b0,0xc001ea23
c0014eb4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0014eb8:	53                   	push   ebx
c0014eb9:	e8 65 9b 00 00       	call   c001ea23 <Vm::faultHandler(regs*)>
c0014ebe:	83 c4 10             	add    esp,0x10
c0014ec1:	84 c0                	test   al,al
c0014ec3:	74 05                	je     c0014eca <gpFault(regs*, void*)+0x24>
c0014ec5:	83 c4 08             	add    esp,0x8
c0014ec8:	5b                   	pop    ebx
c0014ec9:	c3                   	ret    
c0014eca:	83 ec 0c             	sub    esp,0xc
c0014ecd:	68 78 ab 02 c0       	push   0xc002ab78
c0014ed2:	e8 9a dc ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0014ed7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014eda:	e8 09 fb ff ff       	call   c00149e8 <displayDebugInfo(regs*)>

c0014edf <pgFault(regs*, void*)>:
c0014edf:	83 ec 18             	sub    esp,0x18
c0014ee2:	68 93 ab 02 c0       	push   0xc002ab93
c0014ee7:	e8 85 dc ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0014eec:	58                   	pop    eax
c0014eed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ef1:	e8 f2 fa ff ff       	call   c00149e8 <displayDebugInfo(regs*)>

c0014ef6 <otherISRHandler(regs*, void*)>:
c0014ef6:	53                   	push   ebx
c0014ef7:	83 ec 0c             	sub    esp,0xc
c0014efa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014efe:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014f01:	50                   	push   eax
c0014f02:	50                   	push   eax
c0014f03:	68 a0 ab 02 c0       	push   0xc002aba0
c0014f08:	e8 64 dc ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0014f0d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014f10:	e8 d3 fa ff ff       	call   c00149e8 <displayDebugInfo(regs*)>

c0014f15 <opcodeFault(regs*, void*)>:
c0014f15:	55                   	push   ebp
c0014f16:	89 e5                	mov    ebp,esp
c0014f18:	56                   	push   esi
c0014f19:	53                   	push   ebx
c0014f1a:	83 ec 40             	sub    esp,0x40
c0014f1d:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0014f22:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014f28:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0014f2e:	84 c0                	test   al,al
c0014f30:	74 24                	je     c0014f56 <opcodeFault(regs*, void*)+0x41>
c0014f32:	83 ec 0c             	sub    esp,0xc
c0014f35:	68 c0 ab 02 c0       	push   0xc002abc0
c0014f3a:	e8 32 dc ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0014f3f:	83 c4 10             	add    esp,0x10
c0014f42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f45:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f48:	8d 50 19             	lea    edx,[eax+0x19]
c0014f4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f4e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f51:	e9 be 05 00 00       	jmp    c0015514 <opcodeFault(regs*, void*)+0x5ff>
c0014f56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f59:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f5c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0014f5f:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c0014f63:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c0014f67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f6a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f6d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0014f70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f73:	8a 00                	mov    al,BYTE PTR [eax]
c0014f75:	3c f0                	cmp    al,0xf0
c0014f77:	75 17                	jne    c0014f90 <opcodeFault(regs*, void*)+0x7b>
c0014f79:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014f7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f7f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014f82:	8d 50 01             	lea    edx,[eax+0x1]
c0014f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014f88:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014f8b:	e9 da 00 00 00       	jmp    c001506a <opcodeFault(regs*, void*)+0x155>
c0014f90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f93:	8a 00                	mov    al,BYTE PTR [eax]
c0014f95:	3c f2                	cmp    al,0xf2
c0014f97:	74 09                	je     c0014fa2 <opcodeFault(regs*, void*)+0x8d>
c0014f99:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014f9c:	8a 00                	mov    al,BYTE PTR [eax]
c0014f9e:	3c f3                	cmp    al,0xf3
c0014fa0:	75 1b                	jne    c0014fbd <opcodeFault(regs*, void*)+0xa8>
c0014fa2:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014fa6:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014faf:	8d 50 01             	lea    edx,[eax+0x1]
c0014fb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fb5:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fb8:	e9 ad 00 00 00       	jmp    c001506a <opcodeFault(regs*, void*)+0x155>
c0014fbd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fc0:	8a 00                	mov    al,BYTE PTR [eax]
c0014fc2:	3c 66                	cmp    al,0x66
c0014fc4:	75 1f                	jne    c0014fe5 <opcodeFault(regs*, void*)+0xd0>
c0014fc6:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014fca:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0014fce:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fd4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014fd7:	8d 50 01             	lea    edx,[eax+0x1]
c0014fda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014fdd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0014fe0:	e9 85 00 00 00       	jmp    c001506a <opcodeFault(regs*, void*)+0x155>
c0014fe5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0014fe8:	8a 00                	mov    al,BYTE PTR [eax]
c0014fea:	3c 67                	cmp    al,0x67
c0014fec:	75 18                	jne    c0015006 <opcodeFault(regs*, void*)+0xf1>
c0014fee:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0014ff2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0014ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0014ff8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0014ffb:	8d 50 01             	lea    edx,[eax+0x1]
c0014ffe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015001:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015004:	eb 64                	jmp    c001506a <opcodeFault(regs*, void*)+0x155>
c0015006:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015009:	8a 00                	mov    al,BYTE PTR [eax]
c001500b:	3c 2e                	cmp    al,0x2e
c001500d:	74 09                	je     c0015018 <opcodeFault(regs*, void*)+0x103>
c001500f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015012:	8a 00                	mov    al,BYTE PTR [eax]
c0015014:	3c 3e                	cmp    al,0x3e
c0015016:	75 18                	jne    c0015030 <opcodeFault(regs*, void*)+0x11b>
c0015018:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001501c:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001501f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015022:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015025:	8d 50 01             	lea    edx,[eax+0x1]
c0015028:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001502b:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001502e:	eb 3a                	jmp    c001506a <opcodeFault(regs*, void*)+0x155>
c0015030:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015033:	8a 00                	mov    al,BYTE PTR [eax]
c0015035:	3c 36                	cmp    al,0x36
c0015037:	74 1b                	je     c0015054 <opcodeFault(regs*, void*)+0x13f>
c0015039:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001503c:	8a 00                	mov    al,BYTE PTR [eax]
c001503e:	3c 26                	cmp    al,0x26
c0015040:	74 12                	je     c0015054 <opcodeFault(regs*, void*)+0x13f>
c0015042:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015045:	8a 00                	mov    al,BYTE PTR [eax]
c0015047:	3c 64                	cmp    al,0x64
c0015049:	74 09                	je     c0015054 <opcodeFault(regs*, void*)+0x13f>
c001504b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001504e:	8a 00                	mov    al,BYTE PTR [eax]
c0015050:	3c 65                	cmp    al,0x65
c0015052:	75 16                	jne    c001506a <opcodeFault(regs*, void*)+0x155>
c0015054:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015058:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001505b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001505e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015061:	8d 50 01             	lea    edx,[eax+0x1]
c0015064:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015067:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001506a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001506d:	8a 00                	mov    al,BYTE PTR [eax]
c001506f:	3c 0f                	cmp    al,0xf
c0015071:	0f 85 ad 00 00 00    	jne    c0015124 <opcodeFault(regs*, void*)+0x20f>
c0015077:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001507a:	40                   	inc    eax
c001507b:	8a 00                	mov    al,BYTE PTR [eax]
c001507d:	3c c2                	cmp    al,0xc2
c001507f:	74 0e                	je     c001508f <opcodeFault(regs*, void*)+0x17a>
c0015081:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015084:	40                   	inc    eax
c0015085:	8a 00                	mov    al,BYTE PTR [eax]
c0015087:	3c c3                	cmp    al,0xc3
c0015089:	0f 85 95 00 00 00    	jne    c0015124 <opcodeFault(regs*, void*)+0x20f>
c001508f:	83 ec 0c             	sub    esp,0xc
c0015092:	68 e3 ab 02 c0       	push   0xc002abe3
c0015097:	e8 d5 da ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001509c:	83 c4 10             	add    esp,0x10
c001509f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150a2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150a5:	8d 50 01             	lea    edx,[eax+0x1]
c00150a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ab:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150ae:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00150b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150b4:	8a 00                	mov    al,BYTE PTR [eax]
c00150b6:	8d 50 fe             	lea    edx,[eax-0x2]
c00150b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00150bc:	88 10                	mov    BYTE PTR [eax],dl
c00150be:	8d 45 c2             	lea    eax,[ebp-0x3e]
c00150c1:	50                   	push   eax
c00150c2:	8d 45 c3             	lea    eax,[ebp-0x3d]
c00150c5:	50                   	push   eax
c00150c6:	8d 45 c4             	lea    eax,[ebp-0x3c]
c00150c9:	50                   	push   eax
c00150ca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00150cd:	e8 e2 47 00 00       	call   c00198b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00150d2:	83 c4 10             	add    esp,0x10
c00150d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150d8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150db:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00150de:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c00150e1:	01 d0                	add    eax,edx
c00150e3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00150e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150e9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00150ec:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c00150ef:	48                   	dec    eax
c00150f0:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00150f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150f6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00150f9:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00150fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00150ff:	83 ec 04             	sub    esp,0x4
c0015102:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c0015105:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015108:	50                   	push   eax
c0015109:	e8 a6 b0 fe ff       	call   c00001b4 <voodooXADD>
c001510e:	83 c4 10             	add    esp,0x10
c0015111:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0015114:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015117:	01 c2                	add    edx,eax
c0015119:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001511c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001511f:	e9 f0 03 00 00       	jmp    c0015514 <opcodeFault(regs*, void*)+0x5ff>
c0015124:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015127:	8a 00                	mov    al,BYTE PTR [eax]
c0015129:	3c 0f                	cmp    al,0xf
c001512b:	0f 85 8b 01 00 00    	jne    c00152bc <opcodeFault(regs*, void*)+0x3a7>
c0015131:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015134:	40                   	inc    eax
c0015135:	8a 00                	mov    al,BYTE PTR [eax]
c0015137:	3c c7                	cmp    al,0xc7
c0015139:	0f 86 7d 01 00 00    	jbe    c00152bc <opcodeFault(regs*, void*)+0x3a7>
c001513f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015142:	40                   	inc    eax
c0015143:	8a 00                	mov    al,BYTE PTR [eax]
c0015145:	3c cf                	cmp    al,0xcf
c0015147:	0f 87 6f 01 00 00    	ja     c00152bc <opcodeFault(regs*, void*)+0x3a7>
c001514d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015150:	40                   	inc    eax
c0015151:	8a 00                	mov    al,BYTE PTR [eax]
c0015153:	83 c0 38             	add    eax,0x38
c0015156:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c0015159:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001515d:	75 0b                	jne    c001516a <opcodeFault(regs*, void*)+0x255>
c001515f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015162:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015165:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015168:	eb 75                	jmp    c00151df <opcodeFault(regs*, void*)+0x2ca>
c001516a:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c001516e:	75 0b                	jne    c001517b <opcodeFault(regs*, void*)+0x266>
c0015170:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015173:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015176:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015179:	eb 64                	jmp    c00151df <opcodeFault(regs*, void*)+0x2ca>
c001517b:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c001517f:	75 0b                	jne    c001518c <opcodeFault(regs*, void*)+0x277>
c0015181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015184:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015187:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001518a:	eb 53                	jmp    c00151df <opcodeFault(regs*, void*)+0x2ca>
c001518c:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015190:	75 0b                	jne    c001519d <opcodeFault(regs*, void*)+0x288>
c0015192:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015195:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015198:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001519b:	eb 42                	jmp    c00151df <opcodeFault(regs*, void*)+0x2ca>
c001519d:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00151a1:	75 0b                	jne    c00151ae <opcodeFault(regs*, void*)+0x299>
c00151a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151a6:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00151a9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151ac:	eb 31                	jmp    c00151df <opcodeFault(regs*, void*)+0x2ca>
c00151ae:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00151b2:	75 0b                	jne    c00151bf <opcodeFault(regs*, void*)+0x2aa>
c00151b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151b7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00151ba:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151bd:	eb 20                	jmp    c00151df <opcodeFault(regs*, void*)+0x2ca>
c00151bf:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00151c3:	75 0b                	jne    c00151d0 <opcodeFault(regs*, void*)+0x2bb>
c00151c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151c8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00151cb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151ce:	eb 0f                	jmp    c00151df <opcodeFault(regs*, void*)+0x2ca>
c00151d0:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00151d4:	75 09                	jne    c00151df <opcodeFault(regs*, void*)+0x2ca>
c00151d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00151d9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00151dc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00151df:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c00151e3:	74 10                	je     c00151f5 <opcodeFault(regs*, void*)+0x2e0>
c00151e5:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c00151ec:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c00151f3:	eb 2d                	jmp    c0015222 <opcodeFault(regs*, void*)+0x30d>
c00151f5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00151f8:	c1 e0 18             	shl    eax,0x18
c00151fb:	89 c2                	mov    edx,eax
c00151fd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015200:	c1 e0 08             	shl    eax,0x8
c0015203:	25 00 00 ff 00       	and    eax,0xff0000
c0015208:	09 c2                	or     edx,eax
c001520a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001520d:	c1 e8 08             	shr    eax,0x8
c0015210:	25 00 ff 00 00       	and    eax,0xff00
c0015215:	09 c2                	or     edx,eax
c0015217:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001521a:	c1 e8 18             	shr    eax,0x18
c001521d:	09 d0                	or     eax,edx
c001521f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015222:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c0015226:	75 0b                	jne    c0015233 <opcodeFault(regs*, void*)+0x31e>
c0015228:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001522b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001522e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0015231:	eb 75                	jmp    c00152a8 <opcodeFault(regs*, void*)+0x393>
c0015233:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015237:	75 0b                	jne    c0015244 <opcodeFault(regs*, void*)+0x32f>
c0015239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001523c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001523f:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0015242:	eb 64                	jmp    c00152a8 <opcodeFault(regs*, void*)+0x393>
c0015244:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015248:	75 0b                	jne    c0015255 <opcodeFault(regs*, void*)+0x340>
c001524a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001524d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015250:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015253:	eb 53                	jmp    c00152a8 <opcodeFault(regs*, void*)+0x393>
c0015255:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c0015259:	75 0b                	jne    c0015266 <opcodeFault(regs*, void*)+0x351>
c001525b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001525e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015261:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0015264:	eb 42                	jmp    c00152a8 <opcodeFault(regs*, void*)+0x393>
c0015266:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c001526a:	75 0b                	jne    c0015277 <opcodeFault(regs*, void*)+0x362>
c001526c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001526f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015272:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c0015275:	eb 31                	jmp    c00152a8 <opcodeFault(regs*, void*)+0x393>
c0015277:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c001527b:	75 0b                	jne    c0015288 <opcodeFault(regs*, void*)+0x373>
c001527d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015280:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015283:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015286:	eb 20                	jmp    c00152a8 <opcodeFault(regs*, void*)+0x393>
c0015288:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001528c:	75 0b                	jne    c0015299 <opcodeFault(regs*, void*)+0x384>
c001528e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015291:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015294:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0015297:	eb 0f                	jmp    c00152a8 <opcodeFault(regs*, void*)+0x393>
c0015299:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001529d:	75 09                	jne    c00152a8 <opcodeFault(regs*, void*)+0x393>
c001529f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00152a5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00152a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152ab:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152ae:	8d 50 02             	lea    edx,[eax+0x2]
c00152b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152b7:	e9 58 02 00 00       	jmp    c0015514 <opcodeFault(regs*, void*)+0x5ff>
c00152bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152bf:	8a 00                	mov    al,BYTE PTR [eax]
c00152c1:	3c 0f                	cmp    al,0xf
c00152c3:	0f 85 76 01 00 00    	jne    c001543f <opcodeFault(regs*, void*)+0x52a>
c00152c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152cc:	40                   	inc    eax
c00152cd:	8a 00                	mov    al,BYTE PTR [eax]
c00152cf:	3c c7                	cmp    al,0xc7
c00152d1:	0f 85 68 01 00 00    	jne    c001543f <opcodeFault(regs*, void*)+0x52a>
c00152d7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152dd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152e0:	8d 50 01             	lea    edx,[eax+0x1]
c00152e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152e6:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152e9:	8d 45 ba             	lea    eax,[ebp-0x46]
c00152ec:	50                   	push   eax
c00152ed:	8d 45 bb             	lea    eax,[ebp-0x45]
c00152f0:	50                   	push   eax
c00152f1:	8d 45 bc             	lea    eax,[ebp-0x44]
c00152f4:	50                   	push   eax
c00152f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00152f8:	e8 b7 45 00 00       	call   c00198b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c00152fd:	83 c4 10             	add    esp,0x10
c0015300:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0015303:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c0015306:	83 f0 01             	xor    eax,0x1
c0015309:	84 c0                	test   al,al
c001530b:	0f 84 2e 01 00 00    	je     c001543f <opcodeFault(regs*, void*)+0x52a>
c0015311:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c0015314:	3c 01                	cmp    al,0x1
c0015316:	0f 85 23 01 00 00    	jne    c001543f <opcodeFault(regs*, void*)+0x52a>
c001531c:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c001531f:	83 f0 01             	xor    eax,0x1
c0015322:	84 c0                	test   al,al
c0015324:	0f 84 15 01 00 00    	je     c001543f <opcodeFault(regs*, void*)+0x52a>
c001532a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001532d:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015330:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015333:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c001533a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c001533d:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015340:	89 c2                	mov    edx,eax
c0015342:	b8 00 00 00 00       	mov    eax,0x0
c0015347:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001534a:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c001534d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015350:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0015353:	ba 00 00 00 00       	mov    edx,0x0
c0015358:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c001535b:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c001535e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015361:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0015364:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c0015367:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c001536e:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c0015371:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0015374:	89 c2                	mov    edx,eax
c0015376:	b8 00 00 00 00       	mov    eax,0x0
c001537b:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c001537e:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c0015381:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015384:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015387:	ba 00 00 00 00       	mov    edx,0x0
c001538c:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c001538f:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c0015392:	e8 7b 86 00 00       	call   c001da12 <lockScheduler()>
c0015397:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001539a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001539d:	8b 00                	mov    eax,DWORD PTR [eax]
c001539f:	89 c1                	mov    ecx,eax
c00153a1:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00153a4:	89 cb                	mov    ebx,ecx
c00153a6:	89 d0                	mov    eax,edx
c00153a8:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00153ab:	89 c6                	mov    esi,eax
c00153ad:	89 f0                	mov    eax,esi
c00153af:	09 d8                	or     eax,ebx
c00153b1:	85 c0                	test   eax,eax
c00153b3:	75 21                	jne    c00153d6 <opcodeFault(regs*, void*)+0x4c1>
c00153b5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00153b8:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00153bb:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00153be:	89 01                	mov    DWORD PTR [ecx],eax
c00153c0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00153c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153c6:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00153c9:	83 c8 40             	or     eax,0x40
c00153cc:	89 c2                	mov    edx,eax
c00153ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153d1:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c00153d4:	eb 3e                	jmp    c0015414 <opcodeFault(regs*, void*)+0x4ff>
c00153d6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00153d9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00153dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00153de:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00153e1:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c00153e4:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00153e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153ea:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00153ed:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00153f0:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00153f3:	89 d0                	mov    eax,edx
c00153f5:	31 d2                	xor    edx,edx
c00153f7:	89 c3                	mov    ebx,eax
c00153f9:	89 d6                	mov    esi,edx
c00153fb:	89 da                	mov    edx,ebx
c00153fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015400:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015406:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015409:	83 e0 bf             	and    eax,0xffffffbf
c001540c:	89 c2                	mov    edx,eax
c001540e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015411:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015414:	e8 fb 85 00 00       	call   c001da14 <unlockScheduler()>
c0015419:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001541c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001541f:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015422:	01 c2                	add    edx,eax
c0015424:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015427:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001542a:	83 ec 0c             	sub    esp,0xc
c001542d:	68 f2 ab 02 c0       	push   0xc002abf2
c0015432:	e8 3a d7 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0015437:	83 c4 10             	add    esp,0x10
c001543a:	e9 d5 00 00 00       	jmp    c0015514 <opcodeFault(regs*, void*)+0x5ff>
c001543f:	83 ec 0c             	sub    esp,0xc
c0015442:	68 05 ac 02 c0       	push   0xc002ac05
c0015447:	e8 25 d7 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001544c:	83 c4 10             	add    esp,0x10
c001544f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015452:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015455:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015458:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001545b:	c1 e0 04             	shl    eax,0x4
c001545e:	01 d0                	add    eax,edx
c0015460:	83 c0 03             	add    eax,0x3
c0015463:	8a 00                	mov    al,BYTE PTR [eax]
c0015465:	0f b6 d8             	movzx  ebx,al
c0015468:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001546b:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c001546e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015471:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015474:	c1 e0 04             	shl    eax,0x4
c0015477:	01 d0                	add    eax,edx
c0015479:	83 c0 02             	add    eax,0x2
c001547c:	8a 00                	mov    al,BYTE PTR [eax]
c001547e:	0f b6 c8             	movzx  ecx,al
c0015481:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015484:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015487:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001548a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001548d:	c1 e0 04             	shl    eax,0x4
c0015490:	01 d0                	add    eax,edx
c0015492:	40                   	inc    eax
c0015493:	8a 00                	mov    al,BYTE PTR [eax]
c0015495:	0f b6 d0             	movzx  edx,al
c0015498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001549b:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c001549e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154a1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00154a4:	c1 e0 04             	shl    eax,0x4
c00154a7:	01 f0                	add    eax,esi
c00154a9:	8a 00                	mov    al,BYTE PTR [eax]
c00154ab:	0f b6 c0             	movzx  eax,al
c00154ae:	83 ec 0c             	sub    esp,0xc
c00154b1:	53                   	push   ebx
c00154b2:	51                   	push   ecx
c00154b3:	52                   	push   edx
c00154b4:	50                   	push   eax
c00154b5:	68 18 ac 02 c0       	push   0xc002ac18
c00154ba:	e8 b2 d6 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c00154bf:	83 c4 20             	add    esp,0x20
c00154c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154c5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154c8:	83 c0 03             	add    eax,0x3
c00154cb:	8a 00                	mov    al,BYTE PTR [eax]
c00154cd:	0f b6 d8             	movzx  ebx,al
c00154d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154d3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154d6:	83 c0 02             	add    eax,0x2
c00154d9:	8a 00                	mov    al,BYTE PTR [eax]
c00154db:	0f b6 c8             	movzx  ecx,al
c00154de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154e1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154e4:	40                   	inc    eax
c00154e5:	8a 00                	mov    al,BYTE PTR [eax]
c00154e7:	0f b6 d0             	movzx  edx,al
c00154ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ed:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00154f0:	8a 00                	mov    al,BYTE PTR [eax]
c00154f2:	0f b6 c0             	movzx  eax,al
c00154f5:	83 ec 0c             	sub    esp,0xc
c00154f8:	53                   	push   ebx
c00154f9:	51                   	push   ecx
c00154fa:	52                   	push   edx
c00154fb:	50                   	push   eax
c00154fc:	68 40 ac 02 c0       	push   0xc002ac40
c0015501:	e8 6b d6 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0015506:	83 c4 20             	add    esp,0x20
c0015509:	83 ec 0c             	sub    esp,0xc
c001550c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001550f:	e8 d4 f4 ff ff       	call   c00149e8 <displayDebugInfo(regs*)>
c0015514:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015517:	5b                   	pop    ebx
c0015518:	5e                   	pop    esi
c0015519:	5d                   	pop    ebp
c001551a:	c3                   	ret    

c001551b <displayProgramFault(char const*)>:
c001551b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015520:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015523:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015529:	85 c0                	test   eax,eax
c001552b:	74 15                	je     c0015542 <displayProgramFault(char const*)+0x27>
c001552d:	83 ec 0c             	sub    esp,0xc
c0015530:	6a 04                	push   0x4
c0015532:	6a 0f                	push   0xf
c0015534:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015538:	50                   	push   eax
c0015539:	e8 d6 b8 ff ff       	call   c0010e14 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001553e:	83 c4 1c             	add    esp,0x1c
c0015541:	c3                   	ret    
c0015542:	c3                   	ret    

c0015543 <setupInterruptController()>:
c0015543:	55                   	push   ebp
c0015544:	89 e5                	mov    ebp,esp
c0015546:	53                   	push   ebx
c0015547:	83 ec 24             	sub    esp,0x24
c001554a:	b8 00 00 00 00       	mov    eax,0x0
c001554f:	85 c0                	test   eax,eax
c0015551:	0f 95 c0             	setne  al
c0015554:	84 c0                	test   al,al
c0015556:	74 5b                	je     c00155b3 <setupInterruptController()+0x70>
c0015558:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c001555f:	83 ec 0c             	sub    esp,0xc
c0015562:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c0015565:	e8 d6 a2 ff ff       	call   c000f840 <malloc>
c001556a:	83 c4 10             	add    esp,0x10
c001556d:	89 c3                	mov    ebx,eax
c001556f:	83 ec 0c             	sub    esp,0xc
c0015572:	53                   	push   ebx
c0015573:	e8 f2 ff 00 00       	call   c002556a <APIC::APIC()>
c0015578:	83 c4 10             	add    esp,0x10
c001557b:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c001557e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c0015581:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015584:	8b 00                	mov    eax,DWORD PTR [eax]
c0015586:	83 c0 08             	add    eax,0x8
c0015589:	8b 00                	mov    eax,DWORD PTR [eax]
c001558b:	6a 00                	push   0x0
c001558d:	6a 00                	push   0x0
c001558f:	6a 00                	push   0x0
c0015591:	52                   	push   edx
c0015592:	ff d0                	call   eax
c0015594:	83 c4 10             	add    esp,0x10
c0015597:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c001559c:	83 ec 08             	sub    esp,0x8
c001559f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00155a2:	50                   	push   eax
c00155a3:	e8 f0 e9 ff ff       	call   c0013f98 <Device::addChild(Device*)>
c00155a8:	83 c4 10             	add    esp,0x10
c00155ab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00155ae:	e9 52 03 00 00       	jmp    c0015905 <setupInterruptController()+0x3c2>
c00155b3:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c00155b8:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00155be:	83 e0 01             	and    eax,0x1
c00155c1:	84 c0                	test   al,al
c00155c3:	0f 95 c0             	setne  al
c00155c6:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c00155c9:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c00155d0:	83 ec 0c             	sub    esp,0xc
c00155d3:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c00155d6:	e8 65 a2 ff ff       	call   c000f840 <malloc>
c00155db:	83 c4 10             	add    esp,0x10
c00155de:	89 c3                	mov    ebx,eax
c00155e0:	83 ec 0c             	sub    esp,0xc
c00155e3:	53                   	push   ebx
c00155e4:	e8 d9 04 01 00       	call   c0025ac2 <PIC::PIC()>
c00155e9:	83 c4 10             	add    esp,0x10
c00155ec:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00155ef:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00155f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00155f5:	8b 00                	mov    eax,DWORD PTR [eax]
c00155f7:	83 c0 08             	add    eax,0x8
c00155fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00155fc:	6a 00                	push   0x0
c00155fe:	6a 00                	push   0x0
c0015600:	6a 00                	push   0x0
c0015602:	52                   	push   edx
c0015603:	ff d0                	call   eax
c0015605:	83 c4 10             	add    esp,0x10
c0015608:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c001560c:	74 73                	je     c0015681 <setupInterruptController()+0x13e>
c001560e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0015611:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015614:	8b 00                	mov    eax,DWORD PTR [eax]
c0015616:	83 c0 0c             	add    eax,0xc
c0015619:	8b 00                	mov    eax,DWORD PTR [eax]
c001561b:	6a 00                	push   0x0
c001561d:	6a 00                	push   0x0
c001561f:	6a 00                	push   0x0
c0015621:	52                   	push   edx
c0015622:	ff d0                	call   eax
c0015624:	83 c4 10             	add    esp,0x10
c0015627:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c001562b:	74 15                	je     c0015642 <setupInterruptController()+0xff>
c001562d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015630:	8b 00                	mov    eax,DWORD PTR [eax]
c0015632:	83 c0 04             	add    eax,0x4
c0015635:	8b 00                	mov    eax,DWORD PTR [eax]
c0015637:	83 ec 0c             	sub    esp,0xc
c001563a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001563d:	ff d0                	call   eax
c001563f:	83 c4 10             	add    esp,0x10
c0015642:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c0015649:	83 ec 0c             	sub    esp,0xc
c001564c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001564f:	e8 ec a1 ff ff       	call   c000f840 <malloc>
c0015654:	83 c4 10             	add    esp,0x10
c0015657:	89 c3                	mov    ebx,eax
c0015659:	83 ec 0c             	sub    esp,0xc
c001565c:	53                   	push   ebx
c001565d:	e8 08 ff 00 00       	call   c002556a <APIC::APIC()>
c0015662:	83 c4 10             	add    esp,0x10
c0015665:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c0015668:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001566b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001566e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015670:	83 c0 08             	add    eax,0x8
c0015673:	8b 00                	mov    eax,DWORD PTR [eax]
c0015675:	6a 00                	push   0x0
c0015677:	6a 00                	push   0x0
c0015679:	6a 00                	push   0x0
c001567b:	52                   	push   edx
c001567c:	ff d0                	call   eax
c001567e:	83 c4 10             	add    esp,0x10
c0015681:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0015686:	83 ec 08             	sub    esp,0x8
c0015689:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001568c:	50                   	push   eax
c001568d:	e8 06 e9 ff ff       	call   c0013f98 <Device::addChild(Device*)>
c0015692:	83 c4 10             	add    esp,0x10
c0015695:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015698:	8b 00                	mov    eax,DWORD PTR [eax]
c001569a:	83 c0 24             	add    eax,0x24
c001569d:	8b 00                	mov    eax,DWORD PTR [eax]
c001569f:	6a 00                	push   0x0
c00156a1:	68 f6 4e 01 c0       	push   0xc0014ef6
c00156a6:	6a 00                	push   0x0
c00156a8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156ab:	ff d0                	call   eax
c00156ad:	83 c4 10             	add    esp,0x10
c00156b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156b3:	8b 00                	mov    eax,DWORD PTR [eax]
c00156b5:	83 c0 24             	add    eax,0x24
c00156b8:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ba:	6a 00                	push   0x0
c00156bc:	68 f6 4e 01 c0       	push   0xc0014ef6
c00156c1:	6a 01                	push   0x1
c00156c3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156c6:	ff d0                	call   eax
c00156c8:	83 c4 10             	add    esp,0x10
c00156cb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156ce:	8b 00                	mov    eax,DWORD PTR [eax]
c00156d0:	83 c0 24             	add    eax,0x24
c00156d3:	8b 00                	mov    eax,DWORD PTR [eax]
c00156d5:	6a 00                	push   0x0
c00156d7:	68 45 48 01 c0       	push   0xc0014845
c00156dc:	6a 02                	push   0x2
c00156de:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156e1:	ff d0                	call   eax
c00156e3:	83 c4 10             	add    esp,0x10
c00156e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00156e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00156eb:	83 c0 24             	add    eax,0x24
c00156ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00156f0:	6a 00                	push   0x0
c00156f2:	68 f6 4e 01 c0       	push   0xc0014ef6
c00156f7:	6a 03                	push   0x3
c00156f9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00156fc:	ff d0                	call   eax
c00156fe:	83 c4 10             	add    esp,0x10
c0015701:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015704:	8b 00                	mov    eax,DWORD PTR [eax]
c0015706:	83 c0 24             	add    eax,0x24
c0015709:	8b 00                	mov    eax,DWORD PTR [eax]
c001570b:	6a 00                	push   0x0
c001570d:	68 f6 4e 01 c0       	push   0xc0014ef6
c0015712:	6a 04                	push   0x4
c0015714:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015717:	ff d0                	call   eax
c0015719:	83 c4 10             	add    esp,0x10
c001571c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001571f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015721:	83 c0 24             	add    eax,0x24
c0015724:	8b 00                	mov    eax,DWORD PTR [eax]
c0015726:	6a 00                	push   0x0
c0015728:	68 f6 4e 01 c0       	push   0xc0014ef6
c001572d:	6a 05                	push   0x5
c001572f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015732:	ff d0                	call   eax
c0015734:	83 c4 10             	add    esp,0x10
c0015737:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001573a:	8b 00                	mov    eax,DWORD PTR [eax]
c001573c:	83 c0 24             	add    eax,0x24
c001573f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015741:	6a 00                	push   0x0
c0015743:	68 15 4f 01 c0       	push   0xc0014f15
c0015748:	6a 06                	push   0x6
c001574a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001574d:	ff d0                	call   eax
c001574f:	83 c4 10             	add    esp,0x10
c0015752:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015755:	8b 00                	mov    eax,DWORD PTR [eax]
c0015757:	83 c0 24             	add    eax,0x24
c001575a:	8b 00                	mov    eax,DWORD PTR [eax]
c001575c:	6a 00                	push   0x0
c001575e:	68 77 4e 01 c0       	push   0xc0014e77
c0015763:	6a 07                	push   0x7
c0015765:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015768:	ff d0                	call   eax
c001576a:	83 c4 10             	add    esp,0x10
c001576d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015770:	8b 00                	mov    eax,DWORD PTR [eax]
c0015772:	83 c0 24             	add    eax,0x24
c0015775:	8b 00                	mov    eax,DWORD PTR [eax]
c0015777:	6a 00                	push   0x0
c0015779:	68 60 46 01 c0       	push   0xc0014660
c001577e:	6a 08                	push   0x8
c0015780:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015783:	ff d0                	call   eax
c0015785:	83 c4 10             	add    esp,0x10
c0015788:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001578b:	8b 00                	mov    eax,DWORD PTR [eax]
c001578d:	83 c0 24             	add    eax,0x24
c0015790:	8b 00                	mov    eax,DWORD PTR [eax]
c0015792:	6a 00                	push   0x0
c0015794:	68 f6 4e 01 c0       	push   0xc0014ef6
c0015799:	6a 09                	push   0x9
c001579b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001579e:	ff d0                	call   eax
c00157a0:	83 c4 10             	add    esp,0x10
c00157a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00157a8:	83 c0 24             	add    eax,0x24
c00157ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00157ad:	6a 00                	push   0x0
c00157af:	68 f6 4e 01 c0       	push   0xc0014ef6
c00157b4:	6a 0a                	push   0xa
c00157b6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157b9:	ff d0                	call   eax
c00157bb:	83 c4 10             	add    esp,0x10
c00157be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157c1:	8b 00                	mov    eax,DWORD PTR [eax]
c00157c3:	83 c0 24             	add    eax,0x24
c00157c6:	8b 00                	mov    eax,DWORD PTR [eax]
c00157c8:	6a 00                	push   0x0
c00157ca:	68 f6 4e 01 c0       	push   0xc0014ef6
c00157cf:	6a 0b                	push   0xb
c00157d1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157d4:	ff d0                	call   eax
c00157d6:	83 c4 10             	add    esp,0x10
c00157d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157dc:	8b 00                	mov    eax,DWORD PTR [eax]
c00157de:	83 c0 24             	add    eax,0x24
c00157e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00157e3:	6a 00                	push   0x0
c00157e5:	68 f6 4e 01 c0       	push   0xc0014ef6
c00157ea:	6a 0c                	push   0xc
c00157ec:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00157ef:	ff d0                	call   eax
c00157f1:	83 c4 10             	add    esp,0x10
c00157f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00157f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00157f9:	83 c0 24             	add    eax,0x24
c00157fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00157fe:	6a 00                	push   0x0
c0015800:	68 a6 4e 01 c0       	push   0xc0014ea6
c0015805:	6a 0d                	push   0xd
c0015807:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001580a:	ff d0                	call   eax
c001580c:	83 c4 10             	add    esp,0x10
c001580f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015812:	8b 00                	mov    eax,DWORD PTR [eax]
c0015814:	83 c0 24             	add    eax,0x24
c0015817:	8b 00                	mov    eax,DWORD PTR [eax]
c0015819:	6a 00                	push   0x0
c001581b:	68 df 4e 01 c0       	push   0xc0014edf
c0015820:	6a 0e                	push   0xe
c0015822:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015825:	ff d0                	call   eax
c0015827:	83 c4 10             	add    esp,0x10
c001582a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001582d:	8b 00                	mov    eax,DWORD PTR [eax]
c001582f:	83 c0 24             	add    eax,0x24
c0015832:	8b 00                	mov    eax,DWORD PTR [eax]
c0015834:	6a 00                	push   0x0
c0015836:	68 f6 4e 01 c0       	push   0xc0014ef6
c001583b:	6a 0f                	push   0xf
c001583d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015840:	ff d0                	call   eax
c0015842:	83 c4 10             	add    esp,0x10
c0015845:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015848:	8b 00                	mov    eax,DWORD PTR [eax]
c001584a:	83 c0 24             	add    eax,0x24
c001584d:	8b 00                	mov    eax,DWORD PTR [eax]
c001584f:	6a 00                	push   0x0
c0015851:	68 f6 4e 01 c0       	push   0xc0014ef6
c0015856:	6a 10                	push   0x10
c0015858:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c001585b:	ff d0                	call   eax
c001585d:	83 c4 10             	add    esp,0x10
c0015860:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015863:	8b 00                	mov    eax,DWORD PTR [eax]
c0015865:	83 c0 24             	add    eax,0x24
c0015868:	8b 00                	mov    eax,DWORD PTR [eax]
c001586a:	6a 00                	push   0x0
c001586c:	68 f6 4e 01 c0       	push   0xc0014ef6
c0015871:	6a 11                	push   0x11
c0015873:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015876:	ff d0                	call   eax
c0015878:	83 c4 10             	add    esp,0x10
c001587b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001587e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015880:	83 c0 24             	add    eax,0x24
c0015883:	8b 00                	mov    eax,DWORD PTR [eax]
c0015885:	6a 00                	push   0x0
c0015887:	68 f6 4e 01 c0       	push   0xc0014ef6
c001588c:	6a 12                	push   0x12
c001588e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015891:	ff d0                	call   eax
c0015893:	83 c4 10             	add    esp,0x10
c0015896:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015899:	8b 00                	mov    eax,DWORD PTR [eax]
c001589b:	83 c0 24             	add    eax,0x24
c001589e:	8b 00                	mov    eax,DWORD PTR [eax]
c00158a0:	6a 00                	push   0x0
c00158a2:	68 f6 4e 01 c0       	push   0xc0014ef6
c00158a7:	6a 13                	push   0x13
c00158a9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158ac:	ff d0                	call   eax
c00158ae:	83 c4 10             	add    esp,0x10
c00158b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158b4:	8b 00                	mov    eax,DWORD PTR [eax]
c00158b6:	83 c0 24             	add    eax,0x24
c00158b9:	8b 00                	mov    eax,DWORD PTR [eax]
c00158bb:	6a 00                	push   0x0
c00158bd:	68 f6 4e 01 c0       	push   0xc0014ef6
c00158c2:	6a 14                	push   0x14
c00158c4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158c7:	ff d0                	call   eax
c00158c9:	83 c4 10             	add    esp,0x10
c00158cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158cf:	8b 00                	mov    eax,DWORD PTR [eax]
c00158d1:	83 c0 24             	add    eax,0x24
c00158d4:	8b 00                	mov    eax,DWORD PTR [eax]
c00158d6:	6a 00                	push   0x0
c00158d8:	68 f6 4e 01 c0       	push   0xc0014ef6
c00158dd:	6a 1e                	push   0x1e
c00158df:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158e2:	ff d0                	call   eax
c00158e4:	83 c4 10             	add    esp,0x10
c00158e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00158ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00158ec:	83 c0 24             	add    eax,0x24
c00158ef:	8b 00                	mov    eax,DWORD PTR [eax]
c00158f1:	6a 00                	push   0x0
c00158f3:	68 c1 c3 01 c0       	push   0xc001c3c1
c00158f8:	6a 60                	push   0x60
c00158fa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00158fd:	ff d0                	call   eax
c00158ff:	83 c4 10             	add    esp,0x10
c0015902:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015905:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015908:	c9                   	leave  
c0015909:	c3                   	ret    

c001590a <InterruptController::convertLegacyIRQNumber(int)>:
c001590a:	55                   	push   ebp
c001590b:	89 e5                	mov    ebp,esp
c001590d:	83 ec 08             	sub    esp,0x8
c0015910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015913:	83 ec 0c             	sub    esp,0xc
c0015916:	50                   	push   eax
c0015917:	e8 68 e9 ff ff       	call   c0014284 <Device::getName()>
c001591c:	83 c4 10             	add    esp,0x10
c001591f:	8a 00                	mov    al,BYTE PTR [eax]
c0015921:	3c 41                	cmp    al,0x41
c0015923:	0f 94 c0             	sete   al
c0015926:	84 c0                	test   al,al
c0015928:	74 28                	je     c0015952 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c001592a:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c001592e:	7f 12                	jg     c0015942 <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015930:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015933:	05 60 d2 02 c0       	add    eax,0xc002d260
c0015938:	8a 00                	mov    al,BYTE PTR [eax]
c001593a:	0f b6 c0             	movzx  eax,al
c001593d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015940:	eb 10                	jmp    c0015952 <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015942:	83 ec 0c             	sub    esp,0xc
c0015945:	68 60 a9 02 c0       	push   0xc002a960
c001594a:	e8 9e 48 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c001594f:	83 c4 10             	add    esp,0x10
c0015952:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015955:	c9                   	leave  
c0015956:	c3                   	ret    
c0015957:	90                   	nop

c0015958 <startGUI(void*)>:
c0015958:	55                   	push   ebp
c0015959:	89 e5                	mov    ebp,esp
c001595b:	53                   	push   ebx
c001595c:	83 ec 04             	sub    esp,0x4
c001595f:	e8 b0 80 00 00       	call   c001da14 <unlockScheduler()>
c0015964:	8b 1d 08 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e008
c001596a:	83 ec 08             	sub    esp,0x8
c001596d:	6a 01                	push   0x1
c001596f:	68 b0 ac 02 c0       	push   0xc002acb0
c0015974:	e8 f1 79 00 00       	call   c001d36a <Thr::loadDLL(char const*, bool)>
c0015979:	83 c4 10             	add    esp,0x10
c001597c:	83 ec 08             	sub    esp,0x8
c001597f:	53                   	push   ebx
c0015980:	50                   	push   eax
c0015981:	e8 18 7c 00 00       	call   c001d59e <Thr::executeDLL(unsigned long, void*)>
c0015986:	83 c4 10             	add    esp,0x10
c0015989:	8b 1d 08 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e008
c001598f:	83 ec 08             	sub    esp,0x8
c0015992:	6a 01                	push   0x1
c0015994:	68 ca ac 02 c0       	push   0xc002acca
c0015999:	e8 cc 79 00 00       	call   c001d36a <Thr::loadDLL(char const*, bool)>
c001599e:	83 c4 10             	add    esp,0x10
c00159a1:	83 ec 08             	sub    esp,0x8
c00159a4:	53                   	push   ebx
c00159a5:	50                   	push   eax
c00159a6:	e8 f3 7b 00 00       	call   c001d59e <Thr::executeDLL(unsigned long, void*)>
c00159ab:	83 c4 10             	add    esp,0x10
c00159ae:	90                   	nop
c00159af:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00159b2:	c9                   	leave  
c00159b3:	c3                   	ret    

c00159b4 <startGUIVESA(void*)>:
c00159b4:	55                   	push   ebp
c00159b5:	89 e5                	mov    ebp,esp
c00159b7:	53                   	push   ebx
c00159b8:	83 ec 04             	sub    esp,0x4
c00159bb:	e8 54 80 00 00       	call   c001da14 <unlockScheduler()>
c00159c0:	8b 1d 08 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e008
c00159c6:	83 ec 08             	sub    esp,0x8
c00159c9:	6a 01                	push   0x1
c00159cb:	68 e4 ac 02 c0       	push   0xc002ace4
c00159d0:	e8 95 79 00 00       	call   c001d36a <Thr::loadDLL(char const*, bool)>
c00159d5:	83 c4 10             	add    esp,0x10
c00159d8:	83 ec 08             	sub    esp,0x8
c00159db:	53                   	push   ebx
c00159dc:	50                   	push   eax
c00159dd:	e8 bc 7b 00 00       	call   c001d59e <Thr::executeDLL(unsigned long, void*)>
c00159e2:	83 c4 10             	add    esp,0x10
c00159e5:	8b 1d 08 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e008
c00159eb:	83 ec 08             	sub    esp,0x8
c00159ee:	6a 01                	push   0x1
c00159f0:	68 ca ac 02 c0       	push   0xc002acca
c00159f5:	e8 70 79 00 00       	call   c001d36a <Thr::loadDLL(char const*, bool)>
c00159fa:	83 c4 10             	add    esp,0x10
c00159fd:	83 ec 08             	sub    esp,0x8
c0015a00:	53                   	push   ebx
c0015a01:	50                   	push   eax
c0015a02:	e8 97 7b 00 00       	call   c001d59e <Thr::executeDLL(unsigned long, void*)>
c0015a07:	83 c4 10             	add    esp,0x10
c0015a0a:	90                   	nop
c0015a0b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015a0e:	c9                   	leave  
c0015a0f:	c3                   	ret    

c0015a10 <sendKeyToTerminal(unsigned char)>:
c0015a10:	55                   	push   ebp
c0015a11:	89 e5                	mov    ebp,esp
c0015a13:	83 ec 28             	sub    esp,0x28
c0015a16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a19:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015a1c:	a1 e4 e0 02 c0       	mov    eax,ds:0xc002e0e4
c0015a21:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015a25:	83 ec 08             	sub    esp,0x8
c0015a28:	52                   	push   edx
c0015a29:	50                   	push   eax
c0015a2a:	e8 21 b9 ff ff       	call   c0011350 <VgaText::receiveKey(unsigned char)>
c0015a2f:	83 c4 10             	add    esp,0x10
c0015a32:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015a36:	75 41                	jne    c0015a79 <sendKeyToTerminal(unsigned char)+0x69>
c0015a38:	e8 fc 7f 00 00       	call   c001da39 <lockStuff()>
c0015a3d:	a1 c0 e1 02 c0       	mov    eax,ds:0xc002e1c0
c0015a42:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015a45:	c7 05 c0 e1 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e1c0,0x0
c0015a4f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015a53:	74 1f                	je     c0015a74 <sendKeyToTerminal(unsigned char)+0x64>
c0015a55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a58:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015a5b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015a5e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015a61:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015a64:	83 ec 0c             	sub    esp,0xc
c0015a67:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015a6a:	e8 bb 85 00 00       	call   c001e02a <unblockTask(ThreadControlBlock*)>
c0015a6f:	83 c4 10             	add    esp,0x10
c0015a72:	eb db                	jmp    c0015a4f <sendKeyToTerminal(unsigned char)+0x3f>
c0015a74:	e8 5a 83 00 00       	call   c001ddd3 <unlockStuff()>
c0015a79:	90                   	nop
c0015a7a:	c9                   	leave  
c0015a7b:	c3                   	ret    

c0015a7c <sendKeyboardToken(KeyboardToken)>:
c0015a7c:	55                   	push   ebp
c0015a7d:	89 e5                	mov    ebp,esp
c0015a7f:	83 ec 18             	sub    esp,0x18
c0015a82:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015a85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015a88:	0f b7 c0             	movzx  eax,ax
c0015a8b:	83 f2 01             	xor    edx,0x1
c0015a8e:	88 90 e0 e1 02 c0    	mov    BYTE PTR [eax-0x3ffd1e20],dl
c0015a94:	a1 c8 e1 02 c0       	mov    eax,ds:0xc002e1c8
c0015a99:	85 c0                	test   eax,eax
c0015a9b:	74 24                	je     c0015ac1 <sendKeyboardToken(KeyboardToken)+0x45>
c0015a9d:	8b 0d c8 e1 02 c0    	mov    ecx,DWORD PTR ds:0xc002e1c8
c0015aa3:	83 ec 04             	sub    esp,0x4
c0015aa6:	68 e0 e1 02 c0       	push   0xc002e1e0
c0015aab:	83 ec 08             	sub    esp,0x8
c0015aae:	89 e2                	mov    edx,esp
c0015ab0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ab3:	89 02                	mov    DWORD PTR [edx],eax
c0015ab5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ab8:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015abc:	ff d1                	call   ecx
c0015abe:	83 c4 10             	add    esp,0x10
c0015ac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ac4:	66 3d 03 02          	cmp    ax,0x203
c0015ac8:	75 07                	jne    c0015ad1 <sendKeyboardToken(KeyboardToken)+0x55>
c0015aca:	a0 e0 e2 02 c0       	mov    al,ds:0xc002e2e0
c0015acf:	84 c0                	test   al,al
c0015ad1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015ad5:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015ad8:	a0 e8 e5 02 c0       	mov    al,ds:0xc002e5e8
c0015add:	38 c2                	cmp    dl,al
c0015adf:	74 1c                	je     c0015afd <sendKeyboardToken(KeyboardToken)+0x81>
c0015ae1:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015ae4:	a2 e8 e5 02 c0       	mov    ds:0xc002e5e8,al
c0015ae9:	a0 e8 e5 02 c0       	mov    al,ds:0xc002e5e8
c0015aee:	0f b6 c0             	movzx  eax,al
c0015af1:	83 ec 0c             	sub    esp,0xc
c0015af4:	50                   	push   eax
c0015af5:	e8 b6 aa ff ff       	call   c00105b0 <setTerminalScrollLock(bool)>
c0015afa:	83 c4 10             	add    esp,0x10
c0015afd:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015b00:	84 c0                	test   al,al
c0015b02:	0f 84 ae 00 00 00    	je     c0015bb6 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015b08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b0b:	66 3d 10 03          	cmp    ax,0x310
c0015b0f:	75 06                	jne    c0015b17 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015b11:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015b17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b1a:	66 3d 11 03          	cmp    ax,0x311
c0015b1e:	75 06                	jne    c0015b26 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015b20:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015b26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b29:	66 3d 12 03          	cmp    ax,0x312
c0015b2d:	75 06                	jne    c0015b35 <sendKeyboardToken(KeyboardToken)+0xb9>
c0015b2f:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015b35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b38:	66 3d 13 03          	cmp    ax,0x313
c0015b3c:	75 06                	jne    c0015b44 <sendKeyboardToken(KeyboardToken)+0xc8>
c0015b3e:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015b44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b47:	66 3d 14 03          	cmp    ax,0x314
c0015b4b:	75 06                	jne    c0015b53 <sendKeyboardToken(KeyboardToken)+0xd7>
c0015b4d:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015b53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b56:	66 3d 15 03          	cmp    ax,0x315
c0015b5a:	75 06                	jne    c0015b62 <sendKeyboardToken(KeyboardToken)+0xe6>
c0015b5c:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b65:	66 3d 16 03          	cmp    ax,0x316
c0015b69:	75 06                	jne    c0015b71 <sendKeyboardToken(KeyboardToken)+0xf5>
c0015b6b:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015b71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b74:	66 3d 17 03          	cmp    ax,0x317
c0015b78:	75 06                	jne    c0015b80 <sendKeyboardToken(KeyboardToken)+0x104>
c0015b7a:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015b80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b83:	66 3d 18 03          	cmp    ax,0x318
c0015b87:	75 06                	jne    c0015b8f <sendKeyboardToken(KeyboardToken)+0x113>
c0015b89:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015b8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015b92:	66 3d 19 03          	cmp    ax,0x319
c0015b96:	75 06                	jne    c0015b9e <sendKeyboardToken(KeyboardToken)+0x122>
c0015b98:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015b9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ba1:	66 3d 1a 03          	cmp    ax,0x31a
c0015ba5:	0f 85 c9 00 00 00    	jne    c0015c74 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015bab:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015bb1:	e9 be 00 00 00       	jmp    c0015c74 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015bb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bb9:	66 3d 10 03          	cmp    ax,0x310
c0015bbd:	75 0a                	jne    c0015bc9 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015bbf:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015bc5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bcc:	66 3d 11 03          	cmp    ax,0x311
c0015bd0:	75 0a                	jne    c0015bdc <sendKeyboardToken(KeyboardToken)+0x160>
c0015bd2:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015bd8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bdf:	66 3d 12 03          	cmp    ax,0x312
c0015be3:	75 0a                	jne    c0015bef <sendKeyboardToken(KeyboardToken)+0x173>
c0015be5:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015beb:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015bef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015bf2:	66 3d 13 03          	cmp    ax,0x313
c0015bf6:	75 0a                	jne    c0015c02 <sendKeyboardToken(KeyboardToken)+0x186>
c0015bf8:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0015bfe:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c05:	66 3d 14 03          	cmp    ax,0x314
c0015c09:	75 0a                	jne    c0015c15 <sendKeyboardToken(KeyboardToken)+0x199>
c0015c0b:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c0015c11:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c18:	66 3d 15 03          	cmp    ax,0x315
c0015c1c:	75 0a                	jne    c0015c28 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0015c1e:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015c24:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c2b:	66 3d 16 03          	cmp    ax,0x316
c0015c2f:	75 0a                	jne    c0015c3b <sendKeyboardToken(KeyboardToken)+0x1bf>
c0015c31:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0015c37:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c3e:	66 3d 17 03          	cmp    ax,0x317
c0015c42:	75 0a                	jne    c0015c4e <sendKeyboardToken(KeyboardToken)+0x1d2>
c0015c44:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0015c4a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c51:	66 3d 18 03          	cmp    ax,0x318
c0015c55:	75 0a                	jne    c0015c61 <sendKeyboardToken(KeyboardToken)+0x1e5>
c0015c57:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0015c5d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c64:	66 3d 19 03          	cmp    ax,0x319
c0015c68:	75 0a                	jne    c0015c74 <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015c6a:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c0015c70:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015c74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015c77:	66 3d 00 02          	cmp    ax,0x200
c0015c7b:	75 2c                	jne    c0015ca9 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015c7d:	a0 e0 e5 02 c0       	mov    al,ds:0xc002e5e0
c0015c82:	83 f0 01             	xor    eax,0x1
c0015c85:	84 c0                	test   al,al
c0015c87:	74 20                	je     c0015ca9 <sendKeyboardToken(KeyboardToken)+0x22d>
c0015c89:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0015c8e:	6a 01                	push   0x1
c0015c90:	6a 00                	push   0x0
c0015c92:	68 58 59 01 c0       	push   0xc0015958
c0015c97:	50                   	push   eax
c0015c98:	e8 a7 7e 00 00       	call   c001db44 <Process::createThread(void (*)(void*), void*, int)>
c0015c9d:	83 c4 10             	add    esp,0x10
c0015ca0:	c6 05 e0 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5e0,0x1
c0015ca7:	eb 33                	jmp    c0015cdc <sendKeyboardToken(KeyboardToken)+0x260>
c0015ca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cac:	66 3d 01 02          	cmp    ax,0x201
c0015cb0:	75 2a                	jne    c0015cdc <sendKeyboardToken(KeyboardToken)+0x260>
c0015cb2:	a0 e0 e5 02 c0       	mov    al,ds:0xc002e5e0
c0015cb7:	83 f0 01             	xor    eax,0x1
c0015cba:	84 c0                	test   al,al
c0015cbc:	74 1e                	je     c0015cdc <sendKeyboardToken(KeyboardToken)+0x260>
c0015cbe:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c0015cc3:	6a 01                	push   0x1
c0015cc5:	6a 00                	push   0x0
c0015cc7:	68 b4 59 01 c0       	push   0xc00159b4
c0015ccc:	50                   	push   eax
c0015ccd:	e8 72 7e 00 00       	call   c001db44 <Process::createThread(void (*)(void*), void*, int)>
c0015cd2:	83 c4 10             	add    esp,0x10
c0015cd5:	c6 05 e0 e5 02 c0 01 	mov    BYTE PTR ds:0xc002e5e0,0x1
c0015cdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cdf:	66 3d 1d 03          	cmp    ax,0x31d
c0015ce3:	75 06                	jne    c0015ceb <sendKeyboardToken(KeyboardToken)+0x26f>
c0015ce5:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c0015ceb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cee:	66 3d 1c 03          	cmp    ax,0x31c
c0015cf2:	75 06                	jne    c0015cfa <sendKeyboardToken(KeyboardToken)+0x27e>
c0015cf4:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0015cfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cfd:	66 3d 1b 03          	cmp    ax,0x31b
c0015d01:	75 06                	jne    c0015d09 <sendKeyboardToken(KeyboardToken)+0x28d>
c0015d03:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0015d09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d0c:	66 3d 1e 03          	cmp    ax,0x31e
c0015d10:	75 06                	jne    c0015d18 <sendKeyboardToken(KeyboardToken)+0x29c>
c0015d12:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0015d18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d1b:	66 3d 1f 03          	cmp    ax,0x31f
c0015d1f:	75 06                	jne    c0015d27 <sendKeyboardToken(KeyboardToken)+0x2ab>
c0015d21:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0015d27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d2a:	66 3d 1a 03          	cmp    ax,0x31a
c0015d2e:	75 06                	jne    c0015d36 <sendKeyboardToken(KeyboardToken)+0x2ba>
c0015d30:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0015d36:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0015d3a:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015d3d:	83 f0 01             	xor    eax,0x1
c0015d40:	84 c0                	test   al,al
c0015d42:	74 77                	je     c0015dbb <sendKeyboardToken(KeyboardToken)+0x33f>
c0015d44:	a0 e1 e2 02 c0       	mov    al,ds:0xc002e2e1
c0015d49:	84 c0                	test   al,al
c0015d4b:	74 41                	je     c0015d8e <sendKeyboardToken(KeyboardToken)+0x312>
c0015d4d:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015d51:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c0015d55:	74 2b                	je     c0015d82 <sendKeyboardToken(KeyboardToken)+0x306>
c0015d57:	8b 15 e4 e5 02 c0    	mov    edx,DWORD PTR ds:0xc002e5e4
c0015d5d:	89 d0                	mov    eax,edx
c0015d5f:	c1 e0 02             	shl    eax,0x2
c0015d62:	01 d0                	add    eax,edx
c0015d64:	01 c0                	add    eax,eax
c0015d66:	a3 e4 e5 02 c0       	mov    ds:0xc002e5e4,eax
c0015d6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015d6e:	0f b7 c0             	movzx  eax,ax
c0015d71:	8d 50 d0             	lea    edx,[eax-0x30]
c0015d74:	a1 e4 e5 02 c0       	mov    eax,ds:0xc002e5e4
c0015d79:	01 d0                	add    eax,edx
c0015d7b:	a3 e4 e5 02 c0       	mov    ds:0xc002e5e4,eax
c0015d80:	eb 6d                	jmp    c0015def <sendKeyboardToken(KeyboardToken)+0x373>
c0015d82:	c7 05 e4 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e5e4,0x0
c0015d8c:	eb 61                	jmp    c0015def <sendKeyboardToken(KeyboardToken)+0x373>
c0015d8e:	a1 e4 e5 02 c0       	mov    eax,ds:0xc002e5e4
c0015d93:	85 c0                	test   eax,eax
c0015d95:	74 18                	je     c0015daf <sendKeyboardToken(KeyboardToken)+0x333>
c0015d97:	a1 e4 e5 02 c0       	mov    eax,ds:0xc002e5e4
c0015d9c:	0f b6 c0             	movzx  eax,al
c0015d9f:	83 ec 0c             	sub    esp,0xc
c0015da2:	50                   	push   eax
c0015da3:	e8 68 fc ff ff       	call   c0015a10 <sendKeyToTerminal(unsigned char)>
c0015da8:	83 c4 10             	add    esp,0x10
c0015dab:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015daf:	c7 05 e4 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e5e4,0x0
c0015db9:	eb 34                	jmp    c0015def <sendKeyboardToken(KeyboardToken)+0x373>
c0015dbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dbe:	66 3d 01 01          	cmp    ax,0x101
c0015dc2:	75 2b                	jne    c0015def <sendKeyboardToken(KeyboardToken)+0x373>
c0015dc4:	a1 e4 e5 02 c0       	mov    eax,ds:0xc002e5e4
c0015dc9:	85 c0                	test   eax,eax
c0015dcb:	74 18                	je     c0015de5 <sendKeyboardToken(KeyboardToken)+0x369>
c0015dcd:	a1 e4 e5 02 c0       	mov    eax,ds:0xc002e5e4
c0015dd2:	0f b6 c0             	movzx  eax,al
c0015dd5:	83 ec 0c             	sub    esp,0xc
c0015dd8:	50                   	push   eax
c0015dd9:	e8 32 fc ff ff       	call   c0015a10 <sendKeyToTerminal(unsigned char)>
c0015dde:	83 c4 10             	add    esp,0x10
c0015de1:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c0015de5:	c7 05 e4 e5 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002e5e4,0x0
c0015def:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015df2:	83 f0 01             	xor    eax,0x1
c0015df5:	84 c0                	test   al,al
c0015df7:	74 4c                	je     c0015e45 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015df9:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015dfc:	83 f0 01             	xor    eax,0x1
c0015dff:	84 c0                	test   al,al
c0015e01:	74 42                	je     c0015e45 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015e03:	a0 e0 e2 02 c0       	mov    al,ds:0xc002e2e0
c0015e08:	83 f0 01             	xor    eax,0x1
c0015e0b:	84 c0                	test   al,al
c0015e0d:	74 36                	je     c0015e45 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015e0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e12:	66 83 f8 1f          	cmp    ax,0x1f
c0015e16:	76 09                	jbe    c0015e21 <sendKeyboardToken(KeyboardToken)+0x3a5>
c0015e18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e1b:	66 83 f8 7e          	cmp    ax,0x7e
c0015e1f:	76 12                	jbe    c0015e33 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015e21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e24:	66 83 f8 0a          	cmp    ax,0xa
c0015e28:	74 09                	je     c0015e33 <sendKeyboardToken(KeyboardToken)+0x3b7>
c0015e2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e2d:	66 83 f8 08          	cmp    ax,0x8
c0015e31:	75 12                	jne    c0015e45 <sendKeyboardToken(KeyboardToken)+0x3c9>
c0015e33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e36:	0f b6 c0             	movzx  eax,al
c0015e39:	83 ec 0c             	sub    esp,0xc
c0015e3c:	50                   	push   eax
c0015e3d:	e8 ce fb ff ff       	call   c0015a10 <sendKeyToTerminal(unsigned char)>
c0015e42:	83 c4 10             	add    esp,0x10
c0015e45:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0015e48:	83 f0 01             	xor    eax,0x1
c0015e4b:	84 c0                	test   al,al
c0015e4d:	74 4f                	je     c0015e9e <sendKeyboardToken(KeyboardToken)+0x422>
c0015e4f:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015e52:	83 f0 01             	xor    eax,0x1
c0015e55:	84 c0                	test   al,al
c0015e57:	74 45                	je     c0015e9e <sendKeyboardToken(KeyboardToken)+0x422>
c0015e59:	a0 e0 e2 02 c0       	mov    al,ds:0xc002e2e0
c0015e5e:	84 c0                	test   al,al
c0015e60:	74 3c                	je     c0015e9e <sendKeyboardToken(KeyboardToken)+0x422>
c0015e62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e65:	66 83 f8 3f          	cmp    ax,0x3f
c0015e69:	76 33                	jbe    c0015e9e <sendKeyboardToken(KeyboardToken)+0x422>
c0015e6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e6e:	66 83 f8 7f          	cmp    ax,0x7f
c0015e72:	77 2a                	ja     c0015e9e <sendKeyboardToken(KeyboardToken)+0x422>
c0015e74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e77:	88 c2                	mov    dl,al
c0015e79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e7c:	66 83 f8 5f          	cmp    ax,0x5f
c0015e80:	76 04                	jbe    c0015e86 <sendKeyboardToken(KeyboardToken)+0x40a>
c0015e82:	b0 20                	mov    al,0x20
c0015e84:	eb 02                	jmp    c0015e88 <sendKeyboardToken(KeyboardToken)+0x40c>
c0015e86:	b0 00                	mov    al,0x0
c0015e88:	29 c2                	sub    edx,eax
c0015e8a:	88 d0                	mov    al,dl
c0015e8c:	83 e8 40             	sub    eax,0x40
c0015e8f:	0f b6 c0             	movzx  eax,al
c0015e92:	83 ec 0c             	sub    esp,0xc
c0015e95:	50                   	push   eax
c0015e96:	e8 75 fb ff ff       	call   c0015a10 <sendKeyToTerminal(unsigned char)>
c0015e9b:	83 c4 10             	add    esp,0x10
c0015e9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ea1:	66 3d 00 03          	cmp    ax,0x300
c0015ea5:	75 0f                	jne    c0015eb6 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015ea7:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0015eaa:	83 f0 01             	xor    eax,0x1
c0015ead:	84 c0                	test   al,al
c0015eaf:	74 05                	je     c0015eb6 <sendKeyboardToken(KeyboardToken)+0x43a>
c0015eb1:	e8 2f af ff ff       	call   c0010de5 <doTerminalCycle()>
c0015eb6:	90                   	nop
c0015eb7:	c9                   	leave  
c0015eb8:	c3                   	ret    

c0015eb9 <clearInternalKeybuffer(VgaText*)>:
c0015eb9:	55                   	push   ebp
c0015eba:	89 e5                	mov    ebp,esp
c0015ebc:	83 ec 08             	sub    esp,0x8
c0015ebf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ec2:	05 34 11 00 00       	add    eax,0x1134
c0015ec7:	83 ec 0c             	sub    esp,0xc
c0015eca:	50                   	push   eax
c0015ecb:	e8 c4 a8 fe ff       	call   c0000794 <strlen>
c0015ed0:	83 c4 10             	add    esp,0x10
c0015ed3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015ed6:	81 c2 34 11 00 00    	add    edx,0x1134
c0015edc:	83 ec 04             	sub    esp,0x4
c0015edf:	50                   	push   eax
c0015ee0:	6a 00                	push   0x0
c0015ee2:	52                   	push   edx
c0015ee3:	e8 90 a8 fe ff       	call   c0000778 <memset>
c0015ee8:	83 c4 10             	add    esp,0x10
c0015eeb:	90                   	nop
c0015eec:	c9                   	leave  
c0015eed:	c3                   	ret    

c0015eee <readKeyboard(VgaText*, char*, unsigned long)>:
c0015eee:	55                   	push   ebp
c0015eef:	89 e5                	mov    ebp,esp
c0015ef1:	83 ec 18             	sub    esp,0x18
c0015ef4:	fb                   	sti    
c0015ef5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0015efc:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c0015f00:	0f 84 8a 00 00 00    	je     c0015f90 <readKeyboard(VgaText*, char*, unsigned long)+0xa2>
c0015f06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f09:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015f0f:	84 c0                	test   al,al
c0015f11:	75 11                	jne    c0015f24 <readKeyboard(VgaText*, char*, unsigned long)+0x36>
c0015f13:	e8 fa 7a 00 00       	call   c001da12 <lockScheduler()>
c0015f18:	e8 31 7e 00 00       	call   c001dd4e <schedule()>
c0015f1d:	e8 f2 7a 00 00       	call   c001da14 <unlockScheduler()>
c0015f22:	eb e2                	jmp    c0015f06 <readKeyboard(VgaText*, char*, unsigned long)+0x18>
c0015f24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015f27:	8d 50 01             	lea    edx,[eax+0x1]
c0015f2a:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0015f2d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f30:	8a 92 34 11 00 00    	mov    dl,BYTE PTR [edx+0x1134]
c0015f36:	88 10                	mov    BYTE PTR [eax],dl
c0015f38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f3b:	8a 80 34 11 00 00    	mov    al,BYTE PTR [eax+0x1134]
c0015f41:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c0015f44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f47:	05 34 11 00 00       	add    eax,0x1134
c0015f4c:	83 ec 0c             	sub    esp,0xc
c0015f4f:	50                   	push   eax
c0015f50:	e8 3f a8 fe ff       	call   c0000794 <strlen>
c0015f55:	83 c4 10             	add    esp,0x10
c0015f58:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f5b:	81 c2 34 11 00 00    	add    edx,0x1134
c0015f61:	8d 4a 01             	lea    ecx,[edx+0x1]
c0015f64:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0015f67:	81 c2 34 11 00 00    	add    edx,0x1134
c0015f6d:	83 ec 04             	sub    esp,0x4
c0015f70:	50                   	push   eax
c0015f71:	51                   	push   ecx
c0015f72:	52                   	push   edx
c0015f73:	e8 04 a7 fe ff       	call   c000067c <memmove>
c0015f78:	83 c4 10             	add    esp,0x10
c0015f7b:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c0015f7e:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015f81:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c0015f85:	0f 85 71 ff ff ff    	jne    c0015efc <readKeyboard(VgaText*, char*, unsigned long)+0xe>
c0015f8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f8e:	eb 03                	jmp    c0015f93 <readKeyboard(VgaText*, char*, unsigned long)+0xa5>
c0015f90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015f93:	c9                   	leave  
c0015f94:	c3                   	ret    
c0015f95:	90                   	nop

c0015f96 <Keyboard::Keyboard(char const*)>:
c0015f96:	83 ec 0c             	sub    esp,0xc
c0015f99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015f9d:	83 ec 08             	sub    esp,0x8
c0015fa0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015fa4:	50                   	push   eax
c0015fa5:	e8 de e1 ff ff       	call   c0014188 <Device::Device(char const*)>
c0015faa:	83 c4 10             	add    esp,0x10
c0015fad:	ba 08 ad 02 c0       	mov    edx,0xc002ad08
c0015fb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fb6:	89 10                	mov    DWORD PTR [eax],edx
c0015fb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fbc:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c0015fc6:	c6 05 c4 e1 02 c0 01 	mov    BYTE PTR ds:0xc002e1c4,0x1
c0015fcd:	90                   	nop
c0015fce:	83 c4 0c             	add    esp,0xc
c0015fd1:	c3                   	ret    

c0015fd2 <Keyboard::~Keyboard()>:
c0015fd2:	83 ec 0c             	sub    esp,0xc
c0015fd5:	ba 08 ad 02 c0       	mov    edx,0xc002ad08
c0015fda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fde:	89 10                	mov    DWORD PTR [eax],edx
c0015fe0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015fe4:	83 ec 0c             	sub    esp,0xc
c0015fe7:	50                   	push   eax
c0015fe8:	e8 7d de ff ff       	call   c0013e6a <Device::~Device()>
c0015fed:	83 c4 10             	add    esp,0x10
c0015ff0:	90                   	nop
c0015ff1:	83 c4 0c             	add    esp,0xc
c0015ff4:	c3                   	ret    
c0015ff5:	90                   	nop

c0015ff6 <Keyboard::~Keyboard()>:
c0015ff6:	83 ec 0c             	sub    esp,0xc
c0015ff9:	83 ec 0c             	sub    esp,0xc
c0015ffc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016000:	e8 cd ff ff ff       	call   c0015fd2 <Keyboard::~Keyboard()>
c0016005:	83 c4 10             	add    esp,0x10
c0016008:	83 ec 08             	sub    esp,0x8
c001600b:	68 5c 01 00 00       	push   0x15c
c0016010:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016014:	e8 78 ca ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0016019:	83 c4 10             	add    esp,0x10
c001601c:	83 c4 0c             	add    esp,0xc
c001601f:	c3                   	ret    

c0016020 <LogicalDisk::close(int, int, void*)>:
c0016020:	83 c8 ff             	or     eax,0xffffffff
c0016023:	c3                   	ret    

c0016024 <LogicalDisk::~LogicalDisk()>:
c0016024:	83 ec 0c             	sub    esp,0xc
c0016027:	ba b8 ad 02 c0       	mov    edx,0xc002adb8
c001602c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016030:	89 10                	mov    DWORD PTR [eax],edx
c0016032:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016036:	83 ec 0c             	sub    esp,0xc
c0016039:	50                   	push   eax
c001603a:	e8 2b de ff ff       	call   c0013e6a <Device::~Device()>
c001603f:	83 c4 10             	add    esp,0x10
c0016042:	90                   	nop
c0016043:	83 c4 0c             	add    esp,0xc
c0016046:	c3                   	ret    
c0016047:	90                   	nop

c0016048 <LogicalDisk::~LogicalDisk()>:
c0016048:	83 ec 0c             	sub    esp,0xc
c001604b:	83 ec 0c             	sub    esp,0xc
c001604e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016052:	e8 cd ff ff ff       	call   c0016024 <LogicalDisk::~LogicalDisk()>
c0016057:	83 c4 10             	add    esp,0x10
c001605a:	83 ec 08             	sub    esp,0x8
c001605d:	68 74 01 00 00       	push   0x174
c0016062:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016066:	e8 26 ca ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c001606b:	83 c4 10             	add    esp,0x10
c001606e:	83 c4 0c             	add    esp,0xc
c0016071:	c3                   	ret    

c0016072 <LogicalDisk::open(int, int, void*)>:
c0016072:	83 ec 18             	sub    esp,0x18
c0016075:	68 34 ad 02 c0       	push   0xc002ad34
c001607a:	e8 6e 41 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c001607f:	83 c8 ff             	or     eax,0xffffffff
c0016082:	83 c4 1c             	add    esp,0x1c
c0016085:	c3                   	ret    

c0016086 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c0016086:	53                   	push   ebx
c0016087:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001608b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001608f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0016093:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c0016099:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c001609f:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c00160a5:	77 10                	ja     c00160b7 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c00160a7:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c00160ad:	89 d3                	mov    ebx,edx
c00160af:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c00160b5:	72 05                	jb     c00160bc <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c00160b7:	83 c8 ff             	or     eax,0xffffffff
c00160ba:	89 c2                	mov    edx,eax
c00160bc:	5b                   	pop    ebx
c00160bd:	c3                   	ret    

c00160be <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c00160be:	56                   	push   esi
c00160bf:	83 c8 ff             	or     eax,0xffffffff
c00160c2:	53                   	push   ebx
c00160c3:	89 c2                	mov    edx,eax
c00160c5:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00160c9:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00160cd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00160d1:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00160d7:	77 27                	ja     c0016100 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00160d9:	89 d8                	mov    eax,ebx
c00160db:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c00160e1:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c00160e7:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00160ec:	89 c2                	mov    edx,eax
c00160ee:	73 10                	jae    c0016100 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c00160f0:	89 c8                	mov    eax,ecx
c00160f2:	89 da                	mov    edx,ebx
c00160f4:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00160fa:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016100:	5b                   	pop    ebx
c0016101:	5e                   	pop    esi
c0016102:	c3                   	ret    
c0016103:	90                   	nop

c0016104 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016104:	83 ec 1c             	sub    esp,0x1c
c0016107:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001610b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001610f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016113:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016117:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001611b:	89 04 24             	mov    DWORD PTR [esp],eax
c001611e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016122:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016126:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001612a:	83 ec 08             	sub    esp,0x8
c001612d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016131:	50                   	push   eax
c0016132:	e8 51 e0 ff ff       	call   c0014188 <Device::Device(char const*)>
c0016137:	83 c4 10             	add    esp,0x10
c001613a:	ba b8 ad 02 c0       	mov    edx,0xc002adb8
c001613f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016143:	89 10                	mov    DWORD PTR [eax],edx
c0016145:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016149:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c0016150:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016154:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c001615b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001615f:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c0016169:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001616d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016171:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016175:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c001617b:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c0016181:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016185:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0016188:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001618c:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c0016192:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c0016198:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001619c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00161a0:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c00161a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00161aa:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00161b4:	90                   	nop
c00161b5:	83 c4 1c             	add    esp,0x1c
c00161b8:	c3                   	ret    
c00161b9:	90                   	nop

c00161ba <LogicalDisk::assignDriveLetter()>:
c00161ba:	55                   	push   ebp
c00161bb:	57                   	push   edi
c00161bc:	56                   	push   esi
c00161bd:	53                   	push   ebx
c00161be:	83 ec 14             	sub    esp,0x14
c00161c1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00161c5:	8b 3d 00 e6 02 c0    	mov    edi,DWORD PTR ds:0xc002e600
c00161cb:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c00161d1:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00161d5:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c00161db:	8b 3d 04 e6 02 c0    	mov    edi,DWORD PTR ds:0xc002e604
c00161e1:	3c 01                	cmp    al,0x1
c00161e3:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c00161e7:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00161eb:	19 c0                	sbb    eax,eax
c00161ed:	83 e0 02             	and    eax,0x2
c00161f0:	83 c0 41             	add    eax,0x41
c00161f3:	0f be e8             	movsx  ebp,al
c00161f6:	3c 43                	cmp    al,0x43
c00161f8:	75 10                	jne    c001620a <LogicalDisk::assignDriveLetter()+0x50>
c00161fa:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016201:	75 5d                	jne    c0016260 <LogicalDisk::assignDriveLetter()+0xa6>
c0016203:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c0016208:	75 56                	jne    c0016260 <LogicalDisk::assignDriveLetter()+0xa6>
c001620a:	8d 75 bf             	lea    esi,[ebp-0x41]
c001620d:	ba 01 00 00 00       	mov    edx,0x1
c0016212:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0016216:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001621a:	d3 e2                	shl    edx,cl
c001621c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016220:	89 d7                	mov    edi,edx
c0016222:	89 d6                	mov    esi,edx
c0016224:	c1 ff 1f             	sar    edi,0x1f
c0016227:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001622b:	21 f9                	and    ecx,edi
c001622d:	09 d1                	or     ecx,edx
c001622f:	75 2f                	jne    c0016260 <LogicalDisk::assignDriveLetter()+0xa6>
c0016231:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016235:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0016239:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c001623f:	09 f2                	or     edx,esi
c0016241:	89 15 00 e6 02 c0    	mov    DWORD PTR ds:0xc002e600,edx
c0016247:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001624b:	09 fa                	or     edx,edi
c001624d:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0016251:	89 15 04 e6 02 c0    	mov    DWORD PTR ds:0xc002e604,edx
c0016257:	89 1c bd 20 e6 02 c0 	mov    DWORD PTR [edi*4-0x3ffd19e0],ebx
c001625e:	eb 08                	jmp    c0016268 <LogicalDisk::assignDriveLetter()+0xae>
c0016260:	45                   	inc    ebp
c0016261:	40                   	inc    eax
c0016262:	3c 5b                	cmp    al,0x5b
c0016264:	75 90                	jne    c00161f6 <LogicalDisk::assignDriveLetter()+0x3c>
c0016266:	31 c0                	xor    eax,eax
c0016268:	83 c4 14             	add    esp,0x14
c001626b:	5b                   	pop    ebx
c001626c:	5e                   	pop    esi
c001626d:	5f                   	pop    edi
c001626e:	5d                   	pop    ebp
c001626f:	c3                   	ret    

c0016270 <LogicalDisk::mount()>:
c0016270:	56                   	push   esi
c0016271:	53                   	push   ebx
c0016272:	51                   	push   ecx
c0016273:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016277:	8b 1d 88 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e188
c001627d:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c0016287:	85 db                	test   ebx,ebx
c0016289:	74 50                	je     c00162db <LogicalDisk::mount()+0x6b>
c001628b:	e8 6d 77 00 00       	call   c001d9fd <getIRQNestingLevel()>
c0016290:	52                   	push   edx
c0016291:	52                   	push   edx
c0016292:	50                   	push   eax
c0016293:	68 58 ad 02 c0       	push   0xc002ad58
c0016298:	e8 d4 c8 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001629d:	83 c4 0c             	add    esp,0xc
c00162a0:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c00162a7:	8b 13                	mov    edx,DWORD PTR [ebx]
c00162a9:	83 e8 41             	sub    eax,0x41
c00162ac:	50                   	push   eax
c00162ad:	56                   	push   esi
c00162ae:	53                   	push   ebx
c00162af:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00162b2:	83 c4 10             	add    esp,0x10
c00162b5:	84 c0                	test   al,al
c00162b7:	74 08                	je     c00162c1 <LogicalDisk::mount()+0x51>
c00162b9:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c00162bf:	eb 1c                	jmp    c00162dd <LogicalDisk::mount()+0x6d>
c00162c1:	e8 37 77 00 00       	call   c001d9fd <getIRQNestingLevel()>
c00162c6:	51                   	push   ecx
c00162c7:	51                   	push   ecx
c00162c8:	50                   	push   eax
c00162c9:	68 73 ad 02 c0       	push   0xc002ad73
c00162ce:	e8 9e c8 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c00162d3:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00162d6:	83 c4 10             	add    esp,0x10
c00162d9:	eb ac                	jmp    c0016287 <LogicalDisk::mount()+0x17>
c00162db:	31 c0                	xor    eax,eax
c00162dd:	5a                   	pop    edx
c00162de:	5b                   	pop    ebx
c00162df:	5e                   	pop    esi
c00162e0:	c3                   	ret    
c00162e1:	90                   	nop

c00162e2 <LogicalDisk::unmount()>:
c00162e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162e6:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c00162f0:	c3                   	ret    
c00162f1:	90                   	nop

c00162f2 <LogicalDisk::eject()>:
c00162f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00162f6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00162fc:	8b 10                	mov    edx,DWORD PTR [eax]
c00162fe:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016302:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016305:	90                   	nop

c0016306 <LogicalDisk::unassignDriveLetter()>:
c0016306:	57                   	push   edi
c0016307:	56                   	push   esi
c0016308:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001630c:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016313:	84 c9                	test   cl,cl
c0016315:	75 0f                	jne    c0016326 <LogicalDisk::unassignDriveLetter()+0x20>
c0016317:	c7 44 24 0c 8e ad 02 c0 	mov    DWORD PTR [esp+0xc],0xc002ad8e
c001631f:	5e                   	pop    esi
c0016320:	5f                   	pop    edi
c0016321:	e9 c7 3e 00 00       	jmp    c001a1ed <Krnl::panic(char const*)>
c0016326:	83 e9 41             	sub    ecx,0x41
c0016329:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016330:	b8 01 00 00 00       	mov    eax,0x1
c0016335:	c7 04 8d 20 e6 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd19e0],0x0
c0016340:	d3 e0                	shl    eax,cl
c0016342:	89 c7                	mov    edi,eax
c0016344:	f7 d0                	not    eax
c0016346:	c1 ff 1f             	sar    edi,0x1f
c0016349:	21 05 00 e6 02 c0    	and    DWORD PTR ds:0xc002e600,eax
c001634f:	89 fe                	mov    esi,edi
c0016351:	f7 d6                	not    esi
c0016353:	21 35 04 e6 02 c0    	and    DWORD PTR ds:0xc002e604,esi
c0016359:	5e                   	pop    esi
c001635a:	5f                   	pop    edi
c001635b:	c3                   	ret    

c001635c <LogicalDisk::read(unsigned long long, int, void*)>:
c001635c:	57                   	push   edi
c001635d:	56                   	push   esi
c001635e:	53                   	push   ebx
c001635f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016363:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016367:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001636b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001636f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016375:	77 41                	ja     c00163b8 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c0016377:	99                   	cdq    
c0016378:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001637e:	01 c8                	add    eax,ecx
c0016380:	11 da                	adc    edx,ebx
c0016382:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016388:	19 d7                	sbb    edi,edx
c001638a:	72 33                	jb     c00163bf <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c001638c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016392:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016398:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001639c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c00163a0:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c00163a6:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00163ac:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00163b0:	5b                   	pop    ebx
c00163b1:	5e                   	pop    esi
c00163b2:	5f                   	pop    edi
c00163b3:	e9 b0 0a 00 00       	jmp    c0016e68 <VCache::read(unsigned long long, int, void*)>
c00163b8:	b8 05 00 00 00       	mov    eax,0x5
c00163bd:	eb 05                	jmp    c00163c4 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c00163bf:	b8 07 00 00 00       	mov    eax,0x7
c00163c4:	5b                   	pop    ebx
c00163c5:	5e                   	pop    esi
c00163c6:	5f                   	pop    edi
c00163c7:	c3                   	ret    

c00163c8 <LogicalDisk::write(unsigned long long, int, void*)>:
c00163c8:	57                   	push   edi
c00163c9:	56                   	push   esi
c00163ca:	53                   	push   ebx
c00163cb:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00163cf:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00163d3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00163d7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00163db:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00163e1:	77 41                	ja     c0016424 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c00163e3:	99                   	cdq    
c00163e4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00163ea:	01 c8                	add    eax,ecx
c00163ec:	11 da                	adc    edx,ebx
c00163ee:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00163f4:	19 d7                	sbb    edi,edx
c00163f6:	72 33                	jb     c001642b <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c00163f8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00163fe:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016404:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016408:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c001640c:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016412:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016418:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001641c:	5b                   	pop    ebx
c001641d:	5e                   	pop    esi
c001641e:	5f                   	pop    edi
c001641f:	e9 4e 09 00 00       	jmp    c0016d72 <VCache::write(unsigned long long, int, void*)>
c0016424:	b8 05 00 00 00       	mov    eax,0x5
c0016429:	eb 05                	jmp    c0016430 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001642b:	b8 07 00 00 00       	mov    eax,0x7
c0016430:	5b                   	pop    ebx
c0016431:	5e                   	pop    esi
c0016432:	5f                   	pop    edi
c0016433:	c3                   	ret    

c0016434 <Mouse::Mouse(char const*)>:
c0016434:	83 ec 0c             	sub    esp,0xc
c0016437:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001643b:	83 ec 08             	sub    esp,0x8
c001643e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016442:	50                   	push   eax
c0016443:	e8 40 dd ff ff       	call   c0014188 <Device::Device(char const*)>
c0016448:	83 c4 10             	add    esp,0x10
c001644b:	ba e4 ad 02 c0       	mov    edx,0xc002ade4
c0016450:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016454:	89 10                	mov    DWORD PTR [eax],edx
c0016456:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001645a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c0016464:	90                   	nop
c0016465:	83 c4 0c             	add    esp,0xc
c0016468:	c3                   	ret    
c0016469:	90                   	nop

c001646a <Mouse::~Mouse()>:
c001646a:	83 ec 0c             	sub    esp,0xc
c001646d:	ba e4 ad 02 c0       	mov    edx,0xc002ade4
c0016472:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016476:	89 10                	mov    DWORD PTR [eax],edx
c0016478:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001647c:	83 ec 0c             	sub    esp,0xc
c001647f:	50                   	push   eax
c0016480:	e8 e5 d9 ff ff       	call   c0013e6a <Device::~Device()>
c0016485:	83 c4 10             	add    esp,0x10
c0016488:	90                   	nop
c0016489:	83 c4 0c             	add    esp,0xc
c001648c:	c3                   	ret    
c001648d:	90                   	nop

c001648e <Mouse::~Mouse()>:
c001648e:	83 ec 0c             	sub    esp,0xc
c0016491:	83 ec 0c             	sub    esp,0xc
c0016494:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016498:	e8 cd ff ff ff       	call   c001646a <Mouse::~Mouse()>
c001649d:	83 c4 10             	add    esp,0x10
c00164a0:	83 ec 08             	sub    esp,0x8
c00164a3:	68 58 01 00 00       	push   0x158
c00164a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164ac:	e8 e0 c5 ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c00164b1:	83 c4 10             	add    esp,0x10
c00164b4:	83 c4 0c             	add    esp,0xc
c00164b7:	c3                   	ret    

c00164b8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c00164b8:	55                   	push   ebp
c00164b9:	57                   	push   edi
c00164ba:	56                   	push   esi
c00164bb:	53                   	push   ebx
c00164bc:	81 ec 28 01 00 00    	sub    esp,0x128
c00164c2:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00164c9:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00164d0:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c00164d7:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c00164de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00164e2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00164e6:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00164ed:	e8 92 dd ff ff       	call   c0014284 <Device::getName()>
c00164f2:	5a                   	pop    edx
c00164f3:	59                   	pop    ecx
c00164f4:	50                   	push   eax
c00164f5:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c00164f9:	55                   	push   ebp
c00164fa:	e8 35 a3 fe ff       	call   c0000834 <strcpy>
c00164ff:	5b                   	pop    ebx
c0016500:	58                   	pop    eax
c0016501:	68 08 ae 02 c0       	push   0xc002ae08
c0016506:	55                   	push   ebp
c0016507:	e8 68 a4 fe ff       	call   c0000974 <strcat>
c001650c:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016513:	e8 28 93 ff ff       	call   c000f840 <malloc>
c0016518:	83 c4 0c             	add    esp,0xc
c001651b:	89 c3                	mov    ebx,eax
c001651d:	57                   	push   edi
c001651e:	56                   	push   esi
c001651f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016523:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016527:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c001652e:	55                   	push   ebp
c001652f:	50                   	push   eax
c0016530:	e8 cf fb ff ff       	call   c0016104 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c0016535:	83 c4 14             	add    esp,0x14
c0016538:	53                   	push   ebx
c0016539:	e8 7c fc ff ff       	call   c00161ba <LogicalDisk::assignDriveLetter()>
c001653e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016541:	89 c6                	mov    esi,eax
c0016543:	e8 28 fd ff ff       	call   c0016270 <LogicalDisk::mount()>
c0016548:	58                   	pop    eax
c0016549:	5a                   	pop    edx
c001654a:	53                   	push   ebx
c001654b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016552:	e8 41 da ff ff       	call   c0013f98 <Device::addChild(Device*)>
c0016557:	59                   	pop    ecx
c0016558:	89 f0                	mov    eax,esi
c001655a:	5b                   	pop    ebx
c001655b:	0f be f0             	movsx  esi,al
c001655e:	56                   	push   esi
c001655f:	68 13 ae 02 c0       	push   0xc002ae13
c0016564:	e8 08 c6 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0016569:	81 c4 2c 01 00 00    	add    esp,0x12c
c001656f:	5b                   	pop    ebx
c0016570:	5e                   	pop    esi
c0016571:	5f                   	pop    edi
c0016572:	5d                   	pop    ebp
c0016573:	c3                   	ret    

c0016574 <createPartitionsForDisk(PhysicalDisk*)>:
c0016574:	55                   	push   ebp
c0016575:	57                   	push   edi
c0016576:	56                   	push   esi
c0016577:	53                   	push   ebx
c0016578:	81 ec 5c 02 00 00    	sub    esp,0x25c
c001657e:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c0016585:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001658b:	3d 00 02 00 00       	cmp    eax,0x200
c0016590:	74 27                	je     c00165b9 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016592:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016598:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c001659e:	83 ec 10             	sub    esp,0x10
c00165a1:	0f a4 f7 0a          	shld   edi,esi,0xa
c00165a5:	99                   	cdq    
c00165a6:	c1 e6 0a             	shl    esi,0xa
c00165a9:	52                   	push   edx
c00165aa:	89 fd                	mov    ebp,edi
c00165ac:	50                   	push   eax
c00165ad:	55                   	push   ebp
c00165ae:	56                   	push   esi
c00165af:	e8 38 00 01 00       	call   c00265ec <__udivdi3>
c00165b4:	e9 b1 00 00 00       	jmp    c001666a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c00165b9:	83 ec 0c             	sub    esp,0xc
c00165bc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00165be:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c00165c2:	56                   	push   esi
c00165c3:	6a 01                	push   0x1
c00165c5:	6a 00                	push   0x0
c00165c7:	6a 00                	push   0x0
c00165c9:	53                   	push   ebx
c00165ca:	ff 50 28             	call   DWORD PTR [eax+0x28]
c00165cd:	83 c4 20             	add    esp,0x20
c00165d0:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c00165d8:	75 0a                	jne    c00165e4 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c00165da:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c00165e2:	74 2c                	je     c0016610 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c00165e4:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c00165ea:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c00165f0:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00165f6:	83 ec 10             	sub    esp,0x10
c00165f9:	0f a4 c2 0a          	shld   edx,eax,0xa
c00165fd:	89 f7                	mov    edi,esi
c00165ff:	c1 e0 0a             	shl    eax,0xa
c0016602:	c1 ff 1f             	sar    edi,0x1f
c0016605:	57                   	push   edi
c0016606:	56                   	push   esi
c0016607:	52                   	push   edx
c0016608:	50                   	push   eax
c0016609:	e8 de ff 00 00       	call   c00265ec <__udivdi3>
c001660e:	eb 5a                	jmp    c001666a <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016610:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016617:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c001661e:	83 e1 7f             	and    ecx,0x7f
c0016621:	83 e0 7f             	and    eax,0x7f
c0016624:	01 c1                	add    ecx,eax
c0016626:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c001662d:	83 e0 7f             	and    eax,0x7f
c0016630:	01 c1                	add    ecx,eax
c0016632:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016639:	83 e0 7f             	and    eax,0x7f
c001663c:	00 c1                	add    cl,al
c001663e:	74 41                	je     c0016681 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016640:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016646:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c001664c:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016652:	83 ec 10             	sub    esp,0x10
c0016655:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016659:	89 f7                	mov    edi,esi
c001665b:	c1 e0 0a             	shl    eax,0xa
c001665e:	c1 ff 1f             	sar    edi,0x1f
c0016661:	57                   	push   edi
c0016662:	56                   	push   esi
c0016663:	52                   	push   edx
c0016664:	50                   	push   eax
c0016665:	e8 82 ff 00 00       	call   c00265ec <__udivdi3>
c001666a:	83 c4 14             	add    esp,0x14
c001666d:	52                   	push   edx
c001666e:	50                   	push   eax
c001666f:	6a 00                	push   0x0
c0016671:	6a 00                	push   0x0
c0016673:	53                   	push   ebx
c0016674:	e8 3f fe ff ff       	call   c00164b8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016679:	83 c4 20             	add    esp,0x20
c001667c:	e9 79 01 00 00       	jmp    c00167fa <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016681:	89 f0                	mov    eax,esi
c0016683:	31 f6                	xor    esi,esi
c0016685:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c001668c:	75 02                	jne    c0016690 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c001668e:	89 f1                	mov    ecx,esi
c0016690:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016697:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c001669e:	c1 e2 08             	shl    edx,0x8
c00166a1:	c1 e7 10             	shl    edi,0x10
c00166a4:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c00166ac:	09 fa                	or     edx,edi
c00166ae:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c00166b6:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c00166bd:	83 c0 10             	add    eax,0x10
c00166c0:	09 fa                	or     edx,edi
c00166c2:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c00166c9:	c1 e7 18             	shl    edi,0x18
c00166cc:	09 fa                	or     edx,edi
c00166ce:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c00166d5:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c00166d9:	c1 e7 10             	shl    edi,0x10
c00166dc:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c00166e3:	c1 e2 08             	shl    edx,0x8
c00166e6:	09 fa                	or     edx,edi
c00166e8:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c00166ef:	09 fa                	or     edx,edi
c00166f1:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c00166f8:	c1 e7 18             	shl    edi,0x18
c00166fb:	09 fa                	or     edx,edi
c00166fd:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016701:	46                   	inc    esi
c0016702:	83 fe 04             	cmp    esi,0x4
c0016705:	0f 85 7a ff ff ff    	jne    c0016685 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c001670b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001670f:	83 f0 01             	xor    eax,0x1
c0016712:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016716:	75 57                	jne    c001676f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016718:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001671c:	83 f0 01             	xor    eax,0x1
c001671f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016723:	75 4a                	jne    c001676f <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016725:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016729:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016731:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016739:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c001673f:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016745:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001674b:	0f a4 c2 0a          	shld   edx,eax,0xa
c001674f:	89 f7                	mov    edi,esi
c0016751:	c1 e0 0a             	shl    eax,0xa
c0016754:	c1 ff 1f             	sar    edi,0x1f
c0016757:	57                   	push   edi
c0016758:	56                   	push   esi
c0016759:	52                   	push   edx
c001675a:	50                   	push   eax
c001675b:	e8 8c fe 00 00       	call   c00265ec <__udivdi3>
c0016760:	83 c4 10             	add    esp,0x10
c0016763:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016767:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001676b:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c001676f:	84 c9                	test   cl,cl
c0016771:	74 53                	je     c00167c6 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016773:	0f b6 c9             	movzx  ecx,cl
c0016776:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001677a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001677e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016782:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016786:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001678a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001678e:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016792:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016796:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001679a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c001679e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00167a2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00167a6:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c00167aa:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c00167ae:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c00167b2:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c00167b6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00167ba:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00167be:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c00167c2:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c00167c6:	31 ed                	xor    ebp,ebp
c00167c8:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c00167cc:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c00167d0:	89 f8                	mov    eax,edi
c00167d2:	09 f0                	or     eax,esi
c00167d4:	74 1e                	je     c00167f4 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00167d6:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c00167da:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c00167de:	89 d1                	mov    ecx,edx
c00167e0:	09 c1                	or     ecx,eax
c00167e2:	74 10                	je     c00167f4 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c00167e4:	83 ec 0c             	sub    esp,0xc
c00167e7:	57                   	push   edi
c00167e8:	56                   	push   esi
c00167e9:	52                   	push   edx
c00167ea:	50                   	push   eax
c00167eb:	53                   	push   ebx
c00167ec:	e8 c7 fc ff ff       	call   c00164b8 <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c00167f1:	83 c4 20             	add    esp,0x20
c00167f4:	45                   	inc    ebp
c00167f5:	83 fd 04             	cmp    ebp,0x4
c00167f8:	75 ce                	jne    c00167c8 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c00167fa:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016800:	5b                   	pop    ebx
c0016801:	5e                   	pop    esi
c0016802:	5f                   	pop    edi
c0016803:	5d                   	pop    ebp
c0016804:	c3                   	ret    
c0016805:	90                   	nop

c0016806 <Serial::Serial(char const*)>:
c0016806:	83 ec 0c             	sub    esp,0xc
c0016809:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001680d:	83 ec 08             	sub    esp,0x8
c0016810:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016814:	50                   	push   eax
c0016815:	e8 6e d9 ff ff       	call   c0014188 <Device::Device(char const*)>
c001681a:	83 c4 10             	add    esp,0x10
c001681d:	ba 40 ae 02 c0       	mov    edx,0xc002ae40
c0016822:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016826:	89 10                	mov    DWORD PTR [eax],edx
c0016828:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001682c:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016836:	90                   	nop
c0016837:	83 c4 0c             	add    esp,0xc
c001683a:	c3                   	ret    
c001683b:	90                   	nop

c001683c <Serial::~Serial()>:
c001683c:	83 ec 0c             	sub    esp,0xc
c001683f:	ba 40 ae 02 c0       	mov    edx,0xc002ae40
c0016844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016848:	89 10                	mov    DWORD PTR [eax],edx
c001684a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001684e:	83 ec 0c             	sub    esp,0xc
c0016851:	50                   	push   eax
c0016852:	e8 13 d6 ff ff       	call   c0013e6a <Device::~Device()>
c0016857:	83 c4 10             	add    esp,0x10
c001685a:	90                   	nop
c001685b:	83 c4 0c             	add    esp,0xc
c001685e:	c3                   	ret    
c001685f:	90                   	nop

c0016860 <Serial::~Serial()>:
c0016860:	83 ec 0c             	sub    esp,0xc
c0016863:	83 ec 0c             	sub    esp,0xc
c0016866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001686a:	e8 cd ff ff ff       	call   c001683c <Serial::~Serial()>
c001686f:	83 c4 10             	add    esp,0x10
c0016872:	83 ec 08             	sub    esp,0x8
c0016875:	68 58 01 00 00       	push   0x158
c001687a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001687e:	e8 0e c2 ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0016883:	83 c4 10             	add    esp,0x10
c0016886:	83 c4 0c             	add    esp,0xc
c0016889:	c3                   	ret    

c001688a <Timer::Timer(char const*)>:
c001688a:	83 ec 0c             	sub    esp,0xc
c001688d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016891:	83 ec 08             	sub    esp,0x8
c0016894:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016898:	50                   	push   eax
c0016899:	e8 ea d8 ff ff       	call   c0014188 <Device::Device(char const*)>
c001689e:	83 c4 10             	add    esp,0x10
c00168a1:	ba 84 ae 02 c0       	mov    edx,0xc002ae84
c00168a6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168aa:	89 10                	mov    DWORD PTR [eax],edx
c00168ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168b0:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c00168ba:	90                   	nop
c00168bb:	83 c4 0c             	add    esp,0xc
c00168be:	c3                   	ret    
c00168bf:	90                   	nop

c00168c0 <Timer::~Timer()>:
c00168c0:	83 ec 0c             	sub    esp,0xc
c00168c3:	ba 84 ae 02 c0       	mov    edx,0xc002ae84
c00168c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168cc:	89 10                	mov    DWORD PTR [eax],edx
c00168ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168d2:	83 ec 0c             	sub    esp,0xc
c00168d5:	50                   	push   eax
c00168d6:	e8 8f d5 ff ff       	call   c0013e6a <Device::~Device()>
c00168db:	83 c4 10             	add    esp,0x10
c00168de:	90                   	nop
c00168df:	83 c4 0c             	add    esp,0xc
c00168e2:	c3                   	ret    
c00168e3:	90                   	nop

c00168e4 <Timer::~Timer()>:
c00168e4:	83 ec 0c             	sub    esp,0xc
c00168e7:	83 ec 0c             	sub    esp,0xc
c00168ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168ee:	e8 cd ff ff ff       	call   c00168c0 <Timer::~Timer()>
c00168f3:	83 c4 10             	add    esp,0x10
c00168f6:	83 ec 08             	sub    esp,0x8
c00168f9:	68 5c 01 00 00       	push   0x15c
c00168fe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016902:	e8 8a c1 ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0016907:	83 c4 10             	add    esp,0x10
c001690a:	83 c4 0c             	add    esp,0xc
c001690d:	c3                   	ret    

c001690e <Timer::read()>:
c001690e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016912:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016918:	c3                   	ret    

c0016919 <timerHandler(unsigned long long)>:
c0016919:	55                   	push   ebp
c001691a:	57                   	push   edi
c001691b:	56                   	push   esi
c001691c:	53                   	push   ebx
c001691d:	83 ec 0c             	sub    esp,0xc
c0016920:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016924:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016928:	01 35 90 e6 02 c0    	add    DWORD PTR ds:0xc002e690,esi
c001692e:	11 3d 94 e6 02 c0    	adc    DWORD PTR ds:0xc002e694,edi
c0016934:	80 3d 0d e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e00d,0x0
c001693b:	0f 84 07 01 00 00    	je     c0016a48 <timerHandler(unsigned long long)+0x12f>
c0016941:	e8 f3 70 00 00       	call   c001da39 <lockStuff()>
c0016946:	83 ec 0c             	sub    esp,0xc
c0016949:	68 5c 15 03 c0       	push   0xc003155c
c001694e:	e8 0b 1d 01 00       	call   c002865e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016953:	c7 04 24 5c 15 03 c0 	mov    DWORD PTR [esp],0xc003155c
c001695a:	89 c3                	mov    ebx,eax
c001695c:	e8 05 1d 01 00       	call   c0028666 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016961:	83 c4 10             	add    esp,0x10
c0016964:	84 c0                	test   al,al
c0016966:	74 60                	je     c00169c8 <timerHandler(unsigned long long)+0xaf>
c0016968:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001696e:	8b 42 38             	mov    eax,DWORD PTR [edx+0x38]
c0016971:	85 c0                	test   eax,eax
c0016973:	0f 85 91 00 00 00    	jne    c0016a0a <timerHandler(unsigned long long)+0xf1>
c0016979:	e9 be 00 00 00       	jmp    c0016a3c <timerHandler(unsigned long long)+0x123>
c001697e:	83 ec 0c             	sub    esp,0xc
c0016981:	55                   	push   ebp
c0016982:	e8 a3 76 00 00       	call   c001e02a <unblockTask(ThreadControlBlock*)>
c0016987:	83 c4 10             	add    esp,0x10
c001698a:	39 eb                	cmp    ebx,ebp
c001698c:	75 12                	jne    c00169a0 <timerHandler(unsigned long long)+0x87>
c001698e:	83 ec 0c             	sub    esp,0xc
c0016991:	68 5c 15 03 c0       	push   0xc003155c
c0016996:	e8 c3 1c 01 00       	call   c002865e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001699b:	89 c3                	mov    ebx,eax
c001699d:	83 c4 10             	add    esp,0x10
c00169a0:	83 ec 0c             	sub    esp,0xc
c00169a3:	68 5c 15 03 c0       	push   0xc003155c
c00169a8:	e8 b9 1c 01 00       	call   c0028666 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c00169ad:	83 c4 10             	add    esp,0x10
c00169b0:	84 c0                	test   al,al
c00169b2:	75 b4                	jne    c0016968 <timerHandler(unsigned long long)+0x4f>
c00169b4:	83 ec 0c             	sub    esp,0xc
c00169b7:	68 5c 15 03 c0       	push   0xc003155c
c00169bc:	e8 9d 1c 01 00       	call   c002865e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169c1:	83 c4 10             	add    esp,0x10
c00169c4:	39 d8                	cmp    eax,ebx
c00169c6:	74 a0                	je     c0016968 <timerHandler(unsigned long long)+0x4f>
c00169c8:	83 ec 0c             	sub    esp,0xc
c00169cb:	68 5c 15 03 c0       	push   0xc003155c
c00169d0:	e8 89 1c 01 00       	call   c002865e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c00169d5:	c7 04 24 5c 15 03 c0 	mov    DWORD PTR [esp],0xc003155c
c00169dc:	89 c5                	mov    ebp,eax
c00169de:	e8 9f 1c 01 00       	call   c0028682 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c00169e3:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c00169e6:	83 c4 10             	add    esp,0x10
c00169e9:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c00169ec:	39 15 90 e6 02 c0    	cmp    DWORD PTR ds:0xc002e690,edx
c00169f2:	a1 94 e6 02 c0       	mov    eax,ds:0xc002e694
c00169f7:	19 c8                	sbb    eax,ecx
c00169f9:	73 83                	jae    c001697e <timerHandler(unsigned long long)+0x65>
c00169fb:	50                   	push   eax
c00169fc:	50                   	push   eax
c00169fd:	55                   	push   ebp
c00169fe:	68 5c 15 03 c0       	push   0xc003155c
c0016a03:	e8 28 1d 01 00       	call   c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016a08:	eb 93                	jmp    c001699d <timerHandler(unsigned long long)+0x84>
c0016a0a:	80 3d 0c e0 02 c0 00 	cmp    BYTE PTR ds:0xc002e00c,0x0
c0016a11:	74 29                	je     c0016a3c <timerHandler(unsigned long long)+0x123>
c0016a13:	39 c6                	cmp    esi,eax
c0016a15:	bb 00 00 00 00       	mov    ebx,0x0
c0016a1a:	19 df                	sbb    edi,ebx
c0016a1c:	72 19                	jb     c0016a37 <timerHandler(unsigned long long)+0x11e>
c0016a1e:	e8 ef 6f 00 00       	call   c001da12 <lockScheduler()>
c0016a23:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016a28:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016a2b:	e8 1e 73 00 00       	call   c001dd4e <schedule()>
c0016a30:	e8 df 6f 00 00       	call   c001da14 <unlockScheduler()>
c0016a35:	eb 05                	jmp    c0016a3c <timerHandler(unsigned long long)+0x123>
c0016a37:	29 f0                	sub    eax,esi
c0016a39:	89 42 38             	mov    DWORD PTR [edx+0x38],eax
c0016a3c:	83 c4 0c             	add    esp,0xc
c0016a3f:	5b                   	pop    ebx
c0016a40:	5e                   	pop    esi
c0016a41:	5f                   	pop    edi
c0016a42:	5d                   	pop    ebp
c0016a43:	e9 8b 73 00 00       	jmp    c001ddd3 <unlockStuff()>
c0016a48:	83 c4 0c             	add    esp,0xc
c0016a4b:	5b                   	pop    ebx
c0016a4c:	5e                   	pop    esi
c0016a4d:	5f                   	pop    edi
c0016a4e:	5d                   	pop    ebp
c0016a4f:	c3                   	ret    

c0016a50 <setupTimer(int)>:
c0016a50:	57                   	push   edi
c0016a51:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0016a56:	56                   	push   esi
c0016a57:	53                   	push   ebx
c0016a58:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016a5c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016a62:	83 ec 0c             	sub    esp,0xc
c0016a65:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016a6b:	e8 14 d8 ff ff       	call   c0014284 <Device::getName()>
c0016a70:	83 c4 10             	add    esp,0x10
c0016a73:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016a76:	0f 85 8d 00 00 00    	jne    c0016b09 <setupTimer(int)+0xb9>
c0016a7c:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0016a81:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016a88:	74 7f                	je     c0016b09 <setupTimer(int)+0xb9>
c0016a8a:	83 ec 0c             	sub    esp,0xc
c0016a8d:	68 5c 01 00 00       	push   0x15c
c0016a92:	e8 a9 8d ff ff       	call   c000f840 <malloc>
c0016a97:	89 04 24             	mov    DWORD PTR [esp],eax
c0016a9a:	89 c3                	mov    ebx,eax
c0016a9c:	e8 2b f7 00 00       	call   c00261cc <PIT::PIT()>
c0016aa1:	59                   	pop    ecx
c0016aa2:	5f                   	pop    edi
c0016aa3:	53                   	push   ebx
c0016aa4:	ff 35 08 e0 02 c0    	push   DWORD PTR ds:0xc002e008
c0016aaa:	e8 e9 d4 ff ff       	call   c0013f98 <Device::addChild(Device*)>
c0016aaf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ab1:	6a 00                	push   0x0
c0016ab3:	6a 00                	push   0x0
c0016ab5:	56                   	push   esi
c0016ab6:	53                   	push   ebx
c0016ab7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016aba:	83 c4 14             	add    esp,0x14
c0016abd:	68 60 01 00 00       	push   0x160
c0016ac2:	e8 79 8d ff ff       	call   c000f840 <malloc>
c0016ac7:	89 04 24             	mov    DWORD PTR [esp],eax
c0016aca:	89 c7                	mov    edi,eax
c0016acc:	e8 ab f5 00 00       	call   c002607c <APICTimer::APICTimer()>
c0016ad1:	6a 00                	push   0x0
c0016ad3:	6a 00                	push   0x0
c0016ad5:	56                   	push   esi
c0016ad6:	57                   	push   edi
c0016ad7:	e8 a2 f4 00 00       	call   c0025f7e <APICTimer::open(int, int, void*)>
c0016adc:	83 c4 20             	add    esp,0x20
c0016adf:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016ae1:	6a 00                	push   0x0
c0016ae3:	6a 00                	push   0x0
c0016ae5:	6a 00                	push   0x0
c0016ae7:	53                   	push   ebx
c0016ae8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016aeb:	58                   	pop    eax
c0016aec:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0016af1:	5a                   	pop    edx
c0016af2:	57                   	push   edi
c0016af3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016af9:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016aff:	e8 94 d4 ff ff       	call   c0013f98 <Device::addChild(Device*)>
c0016b04:	83 c4 10             	add    esp,0x10
c0016b07:	eb 33                	jmp    c0016b3c <setupTimer(int)+0xec>
c0016b09:	83 ec 0c             	sub    esp,0xc
c0016b0c:	68 5c 01 00 00       	push   0x15c
c0016b11:	e8 2a 8d ff ff       	call   c000f840 <malloc>
c0016b16:	89 04 24             	mov    DWORD PTR [esp],eax
c0016b19:	89 c3                	mov    ebx,eax
c0016b1b:	e8 ac f6 00 00       	call   c00261cc <PIT::PIT()>
c0016b20:	58                   	pop    eax
c0016b21:	5a                   	pop    edx
c0016b22:	53                   	push   ebx
c0016b23:	ff 35 08 e0 02 c0    	push   DWORD PTR ds:0xc002e008
c0016b29:	e8 6a d4 ff ff       	call   c0013f98 <Device::addChild(Device*)>
c0016b2e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016b30:	6a 00                	push   0x0
c0016b32:	6a 00                	push   0x0
c0016b34:	56                   	push   esi
c0016b35:	53                   	push   ebx
c0016b36:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016b39:	83 c4 20             	add    esp,0x20
c0016b3c:	89 d8                	mov    eax,ebx
c0016b3e:	5b                   	pop    ebx
c0016b3f:	5e                   	pop    esi
c0016b40:	5f                   	pop    edi
c0016b41:	c3                   	ret    

c0016b42 <VCache::VCache(PhysicalDisk*)>:
c0016b42:	53                   	push   ebx
c0016b43:	83 ec 18             	sub    esp,0x18
c0016b46:	ba b4 ae 02 c0       	mov    edx,0xc002aeb4
c0016b4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b4f:	89 10                	mov    DWORD PTR [eax],edx
c0016b51:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b55:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0016b5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b60:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0016b67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b6b:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c0016b72:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0016b79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b7d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0016b84:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0016b8b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b8f:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0016b96:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b9a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016b9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ba2:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0016ba9:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c0016bb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bb4:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016bb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bbc:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c0016bc0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bc4:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016bc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bcc:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016bd3:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0016bdb:	83 ec 0c             	sub    esp,0xc
c0016bde:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016be2:	e8 59 8c ff ff       	call   c000f840 <malloc>
c0016be7:	83 c4 10             	add    esp,0x10
c0016bea:	89 c3                	mov    ebx,eax
c0016bec:	83 ec 0c             	sub    esp,0xc
c0016bef:	53                   	push   ebx
c0016bf0:	e8 3d 6f 00 00       	call   c001db32 <Mutex::Mutex()>
c0016bf5:	83 c4 10             	add    esp,0x10
c0016bf8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016bfc:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0016bff:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c03:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0016c07:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0016c0a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c0e:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c0016c15:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c19:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016c1f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c23:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0016c26:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c2a:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c0016c30:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016c36:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0016c3a:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c0016c3d:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c0016c40:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c44:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0016c48:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c4c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016c52:	05 00 01 00 00       	add    eax,0x100
c0016c57:	c1 e0 04             	shl    eax,0x4
c0016c5a:	83 ec 0c             	sub    esp,0xc
c0016c5d:	50                   	push   eax
c0016c5e:	e8 dd 8b ff ff       	call   c000f840 <malloc>
c0016c63:	83 c4 10             	add    esp,0x10
c0016c66:	89 c2                	mov    edx,eax
c0016c68:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c6c:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0016c6f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c73:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0016c7a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016c7e:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c0016c82:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0016c86:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016c8c:	c1 e0 07             	shl    eax,0x7
c0016c8f:	83 ec 0c             	sub    esp,0xc
c0016c92:	50                   	push   eax
c0016c93:	e8 a8 8b ff ff       	call   c000f840 <malloc>
c0016c98:	83 c4 10             	add    esp,0x10
c0016c9b:	89 c2                	mov    edx,eax
c0016c9d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ca1:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0016ca4:	90                   	nop
c0016ca5:	83 c4 18             	add    esp,0x18
c0016ca8:	5b                   	pop    ebx
c0016ca9:	c3                   	ret    

c0016caa <VCache::invalidateReadBuffer()>:
c0016caa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016cae:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0016cb4:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0016cb8:	c3                   	ret    
c0016cb9:	90                   	nop

c0016cba <VCache::writeWriteBuffer()>:
c0016cba:	53                   	push   ebx
c0016cbb:	83 ec 14             	sub    esp,0x14
c0016cbe:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0016cc2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016cc5:	8b 10                	mov    edx,DWORD PTR [eax]
c0016cc7:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016cca:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0016ccd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0016cd0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0016cd3:	50                   	push   eax
c0016cd4:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016cd7:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0016cde:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0016ce5:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0016ce9:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c0016cf0:	83 c4 28             	add    esp,0x28
c0016cf3:	5b                   	pop    ebx
c0016cf4:	c3                   	ret    
c0016cf5:	90                   	nop

c0016cf6 <VCache::~VCache()>:
c0016cf6:	83 ec 0c             	sub    esp,0xc
c0016cf9:	ba b4 ae 02 c0       	mov    edx,0xc002aeb4
c0016cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d02:	89 10                	mov    DWORD PTR [eax],edx
c0016d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d08:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c0016d0b:	84 c0                	test   al,al
c0016d0d:	74 0f                	je     c0016d1e <VCache::~VCache()+0x28>
c0016d0f:	83 ec 0c             	sub    esp,0xc
c0016d12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d16:	e8 9f ff ff ff       	call   c0016cba <VCache::writeWriteBuffer()>
c0016d1b:	83 c4 10             	add    esp,0x10
c0016d1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d22:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0016d25:	83 ec 0c             	sub    esp,0xc
c0016d28:	50                   	push   eax
c0016d29:	e8 22 8b ff ff       	call   c000f850 <free>
c0016d2e:	83 c4 10             	add    esp,0x10
c0016d31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d35:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016d38:	83 ec 0c             	sub    esp,0xc
c0016d3b:	50                   	push   eax
c0016d3c:	e8 0f 8b ff ff       	call   c000f850 <free>
c0016d41:	83 c4 10             	add    esp,0x10
c0016d44:	90                   	nop
c0016d45:	83 c4 0c             	add    esp,0xc
c0016d48:	c3                   	ret    
c0016d49:	90                   	nop

c0016d4a <VCache::~VCache()>:
c0016d4a:	83 ec 0c             	sub    esp,0xc
c0016d4d:	83 ec 0c             	sub    esp,0xc
c0016d50:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d54:	e8 9d ff ff ff       	call   c0016cf6 <VCache::~VCache()>
c0016d59:	83 c4 10             	add    esp,0x10
c0016d5c:	83 ec 08             	sub    esp,0x8
c0016d5f:	6a 44                	push   0x44
c0016d61:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d65:	e8 27 bd ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0016d6a:	83 c4 10             	add    esp,0x10
c0016d6d:	83 c4 0c             	add    esp,0xc
c0016d70:	c3                   	ret    
c0016d71:	90                   	nop

c0016d72 <VCache::write(unsigned long long, int, void*)>:
c0016d72:	55                   	push   ebp
c0016d73:	57                   	push   edi
c0016d74:	56                   	push   esi
c0016d75:	53                   	push   ebx
c0016d76:	83 ec 28             	sub    esp,0x28
c0016d79:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016d7d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0016d81:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0016d85:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0016d89:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016d8c:	e8 03 72 00 00       	call   c001df94 <Semaphore::acquire()>
c0016d91:	83 c4 10             	add    esp,0x10
c0016d94:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016d98:	74 0c                	je     c0016da6 <VCache::write(unsigned long long, int, void*)+0x34>
c0016d9a:	83 ec 0c             	sub    esp,0xc
c0016d9d:	53                   	push   ebx
c0016d9e:	e8 07 ff ff ff       	call   c0016caa <VCache::invalidateReadBuffer()>
c0016da3:	83 c4 10             	add    esp,0x10
c0016da6:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016daa:	74 66                	je     c0016e12 <VCache::write(unsigned long long, int, void*)+0xa0>
c0016dac:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016daf:	99                   	cdq    
c0016db0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016db4:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c0016db7:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0016dba:	89 c1                	mov    ecx,eax
c0016dbc:	89 d0                	mov    eax,edx
c0016dbe:	31 f1                	xor    ecx,esi
c0016dc0:	31 f8                	xor    eax,edi
c0016dc2:	89 ca                	mov    edx,ecx
c0016dc4:	09 c2                	or     edx,eax
c0016dc6:	75 3e                	jne    c0016e06 <VCache::write(unsigned long long, int, void*)+0x94>
c0016dc8:	83 fd 01             	cmp    ebp,0x1
c0016dcb:	75 39                	jne    c0016e06 <VCache::write(unsigned long long, int, void*)+0x94>
c0016dcd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016dd0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0016dd6:	51                   	push   ecx
c0016dd7:	50                   	push   eax
c0016dd8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016ddc:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0016de0:	0f af c8             	imul   ecx,eax
c0016de3:	03 4b 28             	add    ecx,DWORD PTR [ebx+0x28]
c0016de6:	51                   	push   ecx
c0016de7:	e8 58 99 fe ff       	call   c0000744 <memcpy>
c0016dec:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0016def:	83 c4 10             	add    esp,0x10
c0016df2:	40                   	inc    eax
c0016df3:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0016df6:	83 c0 80             	add    eax,0xffffff80
c0016df9:	75 57                	jne    c0016e52 <VCache::write(unsigned long long, int, void*)+0xe0>
c0016dfb:	83 ec 0c             	sub    esp,0xc
c0016dfe:	53                   	push   ebx
c0016dff:	e8 b6 fe ff ff       	call   c0016cba <VCache::writeWriteBuffer()>
c0016e04:	eb 34                	jmp    c0016e3a <VCache::write(unsigned long long, int, void*)+0xc8>
c0016e06:	83 ec 0c             	sub    esp,0xc
c0016e09:	53                   	push   ebx
c0016e0a:	e8 ab fe ff ff       	call   c0016cba <VCache::writeWriteBuffer()>
c0016e0f:	83 c4 10             	add    esp,0x10
c0016e12:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016e15:	83 fd 7f             	cmp    ebp,0x7f
c0016e18:	7f 25                	jg     c0016e3f <VCache::write(unsigned long long, int, void*)+0xcd>
c0016e1a:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c0016e1d:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c0016e20:	89 6b 24             	mov    DWORD PTR [ebx+0x24],ebp
c0016e23:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c0016e27:	52                   	push   edx
c0016e28:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0016e2e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016e32:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0016e35:	e8 0a 99 fe ff       	call   c0000744 <memcpy>
c0016e3a:	83 c4 10             	add    esp,0x10
c0016e3d:	eb 13                	jmp    c0016e52 <VCache::write(unsigned long long, int, void*)+0xe0>
c0016e3f:	83 ec 0c             	sub    esp,0xc
c0016e42:	8b 10                	mov    edx,DWORD PTR [eax]
c0016e44:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0016e48:	55                   	push   ebp
c0016e49:	57                   	push   edi
c0016e4a:	56                   	push   esi
c0016e4b:	50                   	push   eax
c0016e4c:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0016e4f:	83 c4 20             	add    esp,0x20
c0016e52:	83 ec 0c             	sub    esp,0xc
c0016e55:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016e58:	e8 e5 76 00 00       	call   c001e542 <Semaphore::release()>
c0016e5d:	83 c4 2c             	add    esp,0x2c
c0016e60:	31 c0                	xor    eax,eax
c0016e62:	5b                   	pop    ebx
c0016e63:	5e                   	pop    esi
c0016e64:	5f                   	pop    edi
c0016e65:	5d                   	pop    ebp
c0016e66:	c3                   	ret    
c0016e67:	90                   	nop

c0016e68 <VCache::read(unsigned long long, int, void*)>:
c0016e68:	55                   	push   ebp
c0016e69:	57                   	push   edi
c0016e6a:	56                   	push   esi
c0016e6b:	53                   	push   ebx
c0016e6c:	83 ec 28             	sub    esp,0x28
c0016e6f:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0016e73:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0016e77:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0016e7b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016e7f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016e83:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0016e87:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0016e8b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016e8e:	e8 01 71 00 00       	call   c001df94 <Semaphore::acquire()>
c0016e93:	83 c4 10             	add    esp,0x10
c0016e96:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0016e9a:	74 0c                	je     c0016ea8 <VCache::read(unsigned long long, int, void*)+0x40>
c0016e9c:	83 ec 0c             	sub    esp,0xc
c0016e9f:	53                   	push   ebx
c0016ea0:	e8 15 fe ff ff       	call   c0016cba <VCache::writeWriteBuffer()>
c0016ea5:	83 c4 10             	add    esp,0x10
c0016ea8:	83 fe 01             	cmp    esi,0x1
c0016eab:	0f 85 80 00 00 00    	jne    c0016f31 <VCache::read(unsigned long long, int, void*)+0xc9>
c0016eb1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016eb4:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0016ebb:	75 74                	jne    c0016f31 <VCache::read(unsigned long long, int, void*)+0xc9>
c0016ebd:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016ec0:	89 d1                	mov    ecx,edx
c0016ec2:	f7 d9                	neg    ecx
c0016ec4:	89 cf                	mov    edi,ecx
c0016ec6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0016eca:	c1 ff 1f             	sar    edi,0x1f
c0016ecd:	23 0c 24             	and    ecx,DWORD PTR [esp]
c0016ed0:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0016ed4:	89 ce                	mov    esi,ecx
c0016ed6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016eda:	23 4c 24 04          	and    ecx,DWORD PTR [esp+0x4]
c0016ede:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0016ee2:	89 cf                	mov    edi,ecx
c0016ee4:	74 0a                	je     c0016ef0 <VCache::read(unsigned long long, int, void*)+0x88>
c0016ee6:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0016ee9:	75 05                	jne    c0016ef0 <VCache::read(unsigned long long, int, void*)+0x88>
c0016eeb:	39 73 30             	cmp    DWORD PTR [ebx+0x30],esi
c0016eee:	74 1c                	je     c0016f0c <VCache::read(unsigned long long, int, void*)+0xa4>
c0016ef0:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c0016ef4:	89 73 30             	mov    DWORD PTR [ebx+0x30],esi
c0016ef7:	89 7b 34             	mov    DWORD PTR [ebx+0x34],edi
c0016efa:	83 ec 0c             	sub    esp,0xc
c0016efd:	8b 08                	mov    ecx,DWORD PTR [eax]
c0016eff:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0016f02:	52                   	push   edx
c0016f03:	57                   	push   edi
c0016f04:	56                   	push   esi
c0016f05:	50                   	push   eax
c0016f06:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c0016f09:	83 c4 20             	add    esp,0x20
c0016f0c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f0f:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0016f15:	50                   	push   eax
c0016f16:	52                   	push   edx
c0016f17:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c0016f1a:	48                   	dec    eax
c0016f1b:	23 44 24 08          	and    eax,DWORD PTR [esp+0x8]
c0016f1f:	0f af c2             	imul   eax,edx
c0016f22:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c0016f25:	50                   	push   eax
c0016f26:	55                   	push   ebp
c0016f27:	e8 18 98 fe ff       	call   c0000744 <memcpy>
c0016f2c:	83 c4 10             	add    esp,0x10
c0016f2f:	eb 21                	jmp    c0016f52 <VCache::read(unsigned long long, int, void*)+0xea>
c0016f31:	83 ec 0c             	sub    esp,0xc
c0016f34:	53                   	push   ebx
c0016f35:	e8 70 fd ff ff       	call   c0016caa <VCache::invalidateReadBuffer()>
c0016f3a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0016f3d:	8b 10                	mov    edx,DWORD PTR [eax]
c0016f3f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0016f42:	56                   	push   esi
c0016f43:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f47:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016f4b:	50                   	push   eax
c0016f4c:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0016f4f:	83 c4 20             	add    esp,0x20
c0016f52:	83 ec 0c             	sub    esp,0xc
c0016f55:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0016f58:	e8 e5 75 00 00       	call   c001e542 <Semaphore::release()>
c0016f5d:	83 c4 2c             	add    esp,0x2c
c0016f60:	31 c0                	xor    eax,eax
c0016f62:	5b                   	pop    ebx
c0016f63:	5e                   	pop    esi
c0016f64:	5f                   	pop    edi
c0016f65:	5d                   	pop    ebp
c0016f66:	c3                   	ret    
c0016f67:	90                   	nop

c0016f68 <Video::putrect(int, int, int, int, unsigned int)>:
c0016f68:	55                   	push   ebp
c0016f69:	57                   	push   edi
c0016f6a:	56                   	push   esi
c0016f6b:	53                   	push   ebx
c0016f6c:	83 ec 1c             	sub    esp,0x1c
c0016f6f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0016f73:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0016f77:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0016f7b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0016f7f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016f83:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0016f87:	01 df                	add    edi,ebx
c0016f89:	39 fb                	cmp    ebx,edi
c0016f8b:	7d 1f                	jge    c0016fac <Video::putrect(int, int, int, int, unsigned int)+0x44>
c0016f8d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0016f91:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0016f95:	7d 12                	jge    c0016fa9 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0016f97:	8b 16                	mov    edx,DWORD PTR [esi]
c0016f99:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0016f9d:	53                   	push   ebx
c0016f9e:	55                   	push   ebp
c0016f9f:	45                   	inc    ebp
c0016fa0:	56                   	push   esi
c0016fa1:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0016fa4:	83 c4 10             	add    esp,0x10
c0016fa7:	eb e8                	jmp    c0016f91 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c0016fa9:	43                   	inc    ebx
c0016faa:	eb dd                	jmp    c0016f89 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c0016fac:	83 c4 1c             	add    esp,0x1c
c0016faf:	5b                   	pop    ebx
c0016fb0:	5e                   	pop    esi
c0016fb1:	5f                   	pop    edi
c0016fb2:	5d                   	pop    ebp
c0016fb3:	c3                   	ret    

c0016fb4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0016fb4:	55                   	push   ebp
c0016fb5:	57                   	push   edi
c0016fb6:	31 ff                	xor    edi,edi
c0016fb8:	56                   	push   esi
c0016fb9:	53                   	push   ebx
c0016fba:	83 ec 1c             	sub    esp,0x1c
c0016fbd:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0016fc1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0016fc5:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c0016fcc:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0016fd1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016fd5:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c0016fd9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0016fdd:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0016fe0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0016fe4:	01 f9                	add    ecx,edi
c0016fe6:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c0016fea:	7d 2f                	jge    c001701b <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c0016fec:	31 f6                	xor    esi,esi
c0016fee:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0016ff2:	01 f2                	add    edx,esi
c0016ff4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0016ff8:	7d 1a                	jge    c0017014 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c0016ffa:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0016ffd:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017000:	46                   	inc    esi
c0017001:	51                   	push   ecx
c0017002:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017006:	52                   	push   edx
c0017007:	55                   	push   ebp
c0017008:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001700b:	83 c4 10             	add    esp,0x10
c001700e:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017012:	eb da                	jmp    c0016fee <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c0017014:	47                   	inc    edi
c0017015:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0017019:	eb c5                	jmp    c0016fe0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c001701b:	83 c4 1c             	add    esp,0x1c
c001701e:	5b                   	pop    ebx
c001701f:	5e                   	pop    esi
c0017020:	5f                   	pop    edi
c0017021:	5d                   	pop    ebp
c0017022:	c3                   	ret    
c0017023:	90                   	nop

c0017024 <Video::blit(unsigned int*, int, int, int, int)>:
c0017024:	55                   	push   ebp
c0017025:	57                   	push   edi
c0017026:	56                   	push   esi
c0017027:	53                   	push   ebx
c0017028:	83 ec 1c             	sub    esp,0x1c
c001702b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001702f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017033:	85 c0                	test   eax,eax
c0017035:	79 02                	jns    c0017039 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c0017037:	31 c0                	xor    eax,eax
c0017039:	c1 e0 02             	shl    eax,0x2
c001703c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017040:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017044:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017048:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c001704c:	39 d8                	cmp    eax,ebx
c001704e:	7e 49                	jle    c0017099 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017050:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017056:	7c 41                	jl     c0017099 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c0017058:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001705c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017060:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017064:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c0017068:	39 f9                	cmp    ecx,edi
c001706a:	7e 22                	jle    c001708e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c001706c:	83 c5 04             	add    ebp,0x4
c001706f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017075:	7c 14                	jl     c001708b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017077:	8b 0e                	mov    ecx,DWORD PTR [esi]
c0017079:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001707c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017080:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017084:	56                   	push   esi
c0017085:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c0017088:	83 c4 10             	add    esp,0x10
c001708b:	47                   	inc    edi
c001708c:	eb d2                	jmp    c0017060 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c001708e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017092:	43                   	inc    ebx
c0017093:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017097:	eb ab                	jmp    c0017044 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c0017099:	83 c4 1c             	add    esp,0x1c
c001709c:	5b                   	pop    ebx
c001709d:	5e                   	pop    esi
c001709e:	5f                   	pop    edi
c001709f:	5d                   	pop    ebp
c00170a0:	c3                   	ret    
c00170a1:	90                   	nop

c00170a2 <Video::clearScreen(unsigned int)>:
c00170a2:	57                   	push   edi
c00170a3:	56                   	push   esi
c00170a4:	53                   	push   ebx
c00170a5:	31 db                	xor    ebx,ebx
c00170a7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00170ab:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00170b1:	7e 1f                	jle    c00170d2 <Video::clearScreen(unsigned int)+0x30>
c00170b3:	31 ff                	xor    edi,edi
c00170b5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c00170bb:	7e 12                	jle    c00170cf <Video::clearScreen(unsigned int)+0x2d>
c00170bd:	8b 06                	mov    eax,DWORD PTR [esi]
c00170bf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00170c3:	53                   	push   ebx
c00170c4:	57                   	push   edi
c00170c5:	47                   	inc    edi
c00170c6:	56                   	push   esi
c00170c7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00170ca:	83 c4 10             	add    esp,0x10
c00170cd:	eb e6                	jmp    c00170b5 <Video::clearScreen(unsigned int)+0x13>
c00170cf:	43                   	inc    ebx
c00170d0:	eb d9                	jmp    c00170ab <Video::clearScreen(unsigned int)+0x9>
c00170d2:	5b                   	pop    ebx
c00170d3:	5e                   	pop    esi
c00170d4:	5f                   	pop    edi
c00170d5:	c3                   	ret    

c00170d6 <Video::putpixel(int, int, unsigned int)>:
c00170d6:	c7 44 24 04 bc ae 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aebc
c00170de:	e9 0a 31 00 00       	jmp    c001a1ed <Krnl::panic(char const*)>
c00170e3:	90                   	nop

c00170e4 <Video::Video(char const*)>:
c00170e4:	83 ec 0c             	sub    esp,0xc
c00170e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00170eb:	83 ec 08             	sub    esp,0x8
c00170ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00170f2:	50                   	push   eax
c00170f3:	e8 90 d0 ff ff       	call   c0014188 <Device::Device(char const*)>
c00170f8:	83 c4 10             	add    esp,0x10
c00170fb:	ba 40 af 02 c0       	mov    edx,0xc002af40
c0017100:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017104:	89 10                	mov    DWORD PTR [eax],edx
c0017106:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001710a:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c0017114:	90                   	nop
c0017115:	83 c4 0c             	add    esp,0xc
c0017118:	c3                   	ret    
c0017119:	90                   	nop

c001711a <Video::~Video()>:
c001711a:	83 ec 0c             	sub    esp,0xc
c001711d:	ba 40 af 02 c0       	mov    edx,0xc002af40
c0017122:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017126:	89 10                	mov    DWORD PTR [eax],edx
c0017128:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001712c:	83 ec 0c             	sub    esp,0xc
c001712f:	50                   	push   eax
c0017130:	e8 35 cd ff ff       	call   c0013e6a <Device::~Device()>
c0017135:	83 c4 10             	add    esp,0x10
c0017138:	90                   	nop
c0017139:	83 c4 0c             	add    esp,0xc
c001713c:	c3                   	ret    
c001713d:	90                   	nop

c001713e <Video::~Video()>:
c001713e:	83 ec 0c             	sub    esp,0xc
c0017141:	83 ec 0c             	sub    esp,0xc
c0017144:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017148:	e8 cd ff ff ff       	call   c001711a <Video::~Video()>
c001714d:	83 c4 10             	add    esp,0x10
c0017150:	83 ec 08             	sub    esp,0x8
c0017153:	68 64 01 00 00       	push   0x164
c0017158:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001715c:	e8 30 b9 ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0017161:	83 c4 10             	add    esp,0x10
c0017164:	83 c4 0c             	add    esp,0xc
c0017167:	c3                   	ret    

c0017168 <Video::isMonochrome()>:
c0017168:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001716c:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017172:	c3                   	ret    
c0017173:	90                   	nop

c0017174 <Video::getWidth()>:
c0017174:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017178:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001717e:	c3                   	ret    
c001717f:	90                   	nop

c0017180 <Video::getHeight()>:
c0017180:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017184:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001718a:	c3                   	ret    
c001718b:	90                   	nop

c001718c <Video::drawCursor(int, int, unsigned char*, int)>:
c001718c:	55                   	push   ebp
c001718d:	57                   	push   edi
c001718e:	56                   	push   esi
c001718f:	53                   	push   ebx
c0017190:	83 ec 2c             	sub    esp,0x2c
c0017193:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017197:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001719b:	83 f8 01             	cmp    eax,0x1
c001719e:	19 c9                	sbb    ecx,ecx
c00171a0:	31 db                	xor    ebx,ebx
c00171a2:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00171a6:	89 cd                	mov    ebp,ecx
c00171a8:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c00171b0:	f7 d5                	not    ebp
c00171b2:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c00171b8:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00171bc:	01 d8                	add    eax,ebx
c00171be:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00171c2:	56                   	push   esi
c00171c3:	e8 b8 ff ff ff       	call   c0017180 <Video::getHeight()>
c00171c8:	59                   	pop    ecx
c00171c9:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00171cd:	7e 70                	jle    c001723f <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c00171cf:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00171d3:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00171d7:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c00171da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00171de:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00171e2:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c00171e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00171ed:	89 f8                	mov    eax,edi
c00171ef:	83 c0 20             	add    eax,0x20
c00171f2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00171f6:	56                   	push   esi
c00171f7:	e8 78 ff ff ff       	call   c0017174 <Video::getWidth()>
c00171fc:	5a                   	pop    edx
c00171fd:	39 c7                	cmp    edi,eax
c00171ff:	7d 34                	jge    c0017235 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017201:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017206:	74 05                	je     c001720d <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c0017208:	8b 06                	mov    eax,DWORD PTR [esi]
c001720a:	55                   	push   ebp
c001720b:	eb 0d                	jmp    c001721a <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001720d:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c0017212:	74 12                	je     c0017226 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c0017214:	8b 06                	mov    eax,DWORD PTR [esi]
c0017216:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001721a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001721e:	57                   	push   edi
c001721f:	56                   	push   esi
c0017220:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017223:	83 c4 10             	add    esp,0x10
c0017226:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c001722a:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c001722e:	47                   	inc    edi
c001722f:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0017233:	75 c1                	jne    c00171f6 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c0017235:	43                   	inc    ebx
c0017236:	83 fb 20             	cmp    ebx,0x20
c0017239:	0f 85 79 ff ff ff    	jne    c00171b8 <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c001723f:	83 c4 2c             	add    esp,0x2c
c0017242:	5b                   	pop    ebx
c0017243:	5e                   	pop    esi
c0017244:	5f                   	pop    edi
c0017245:	5d                   	pop    ebp
c0017246:	c3                   	ret    
c0017247:	90                   	nop

c0017248 <Video::tgaParse(unsigned char*, int, int*, int*)>:
c0017248:	55                   	push   ebp
c0017249:	57                   	push   edi
c001724a:	56                   	push   esi
c001724b:	53                   	push   ebx
c001724c:	83 ec 28             	sub    esp,0x28
c001724f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0017253:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c0017257:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c001725b:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c001725f:	c1 e7 08             	shl    edi,0x8
c0017262:	01 c7                	add    edi,eax
c0017264:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c0017268:	c1 e0 08             	shl    eax,0x8
c001726b:	01 d0                	add    eax,edx
c001726d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017271:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017275:	0f af c7             	imul   eax,edi
c0017278:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c001727f:	50                   	push   eax
c0017280:	e8 bb 85 ff ff       	call   c000f840 <malloc>
c0017285:	83 c4 10             	add    esp,0x10
c0017288:	89 c5                	mov    ebp,eax
c001728a:	85 c0                	test   eax,eax
c001728c:	75 15                	jne    c00172a3 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c001728e:	83 ec 0c             	sub    esp,0xc
c0017291:	68 dd ae 02 c0       	push   0xc002aedd
c0017296:	e8 d6 b8 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001729b:	83 c4 10             	add    esp,0x10
c001729e:	e9 1c 01 00 00       	jmp    c00173bf <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00172a3:	be 12 00 00 00       	mov    esi,0x12
c00172a8:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c00172ac:	74 11                	je     c00172bf <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c00172ae:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c00172b2:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c00172b6:	c1 fe 03             	sar    esi,0x3
c00172b9:	0f af f0             	imul   esi,eax
c00172bc:	83 c6 12             	add    esi,0x12
c00172bf:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c00172c3:	74 04                	je     c00172c9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c00172c5:	85 ff                	test   edi,edi
c00172c7:	75 12                	jne    c00172db <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c00172c9:	83 ec 0c             	sub    esp,0xc
c00172cc:	68 f4 ae 02 c0       	push   0xc002aef4
c00172d1:	e8 9b b8 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c00172d6:	e9 ce 00 00 00       	jmp    c00173a9 <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c00172db:	52                   	push   edx
c00172dc:	52                   	push   edx
c00172dd:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c00172e1:	50                   	push   eax
c00172e2:	68 09 af 02 c0       	push   0xc002af09
c00172e7:	e8 85 b8 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c00172ec:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c00172f0:	83 c4 10             	add    esp,0x10
c00172f3:	80 fa 02             	cmp    dl,0x2
c00172f6:	0f 85 98 00 00 00    	jne    c0017394 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c00172fc:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017301:	75 10                	jne    c0017313 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017303:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017307:	75 0a                	jne    c0017313 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017309:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001730c:	83 e8 18             	sub    eax,0x18
c001730f:	a8 f7                	test   al,0xf7
c0017311:	74 0a                	je     c001731d <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c0017313:	83 ec 0c             	sub    esp,0xc
c0017316:	68 16 af 02 c0       	push   0xc002af16
c001731b:	eb 7f                	jmp    c001739c <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c001731d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017325:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001732d:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017331:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0017339:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c001733d:	75 0c                	jne    c001734b <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c001733f:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c0017344:	c1 e0 18             	shl    eax,0x18
c0017347:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001734b:	41                   	inc    ecx
c001734c:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c0017351:	c1 e2 10             	shl    edx,0x10
c0017354:	89 d0                	mov    eax,edx
c0017356:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c001735b:	c1 e2 08             	shl    edx,0x8
c001735e:	09 c2                	or     edx,eax
c0017360:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c0017364:	09 c2                	or     edx,eax
c0017366:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c001736a:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c001736e:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017372:	c1 f8 03             	sar    eax,0x3
c0017375:	01 c6                	add    esi,eax
c0017377:	89 c8                	mov    eax,ecx
c0017379:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001737d:	39 c7                	cmp    edi,eax
c001737f:	7f b0                	jg     c0017331 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017381:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017385:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017389:	39 14 24             	cmp    DWORD PTR [esp],edx
c001738c:	7e 22                	jle    c00173b0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c001738e:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017392:	eb 99                	jmp    c001732d <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017394:	50                   	push   eax
c0017395:	50                   	push   eax
c0017396:	52                   	push   edx
c0017397:	68 24 af 02 c0       	push   0xc002af24
c001739c:	e8 d0 b7 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c00173a1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00173a4:	e8 a7 84 ff ff       	call   c000f850 <free>
c00173a9:	83 c4 10             	add    esp,0x10
c00173ac:	31 ed                	xor    ebp,ebp
c00173ae:	eb 0f                	jmp    c00173bf <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c00173b0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00173b4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c00173b7:	89 38                	mov    DWORD PTR [eax],edi
c00173b9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00173bd:	89 08                	mov    DWORD PTR [eax],ecx
c00173bf:	83 c4 1c             	add    esp,0x1c
c00173c2:	89 e8                	mov    eax,ebp
c00173c4:	5b                   	pop    ebx
c00173c5:	5e                   	pop    esi
c00173c6:	5f                   	pop    edi
c00173c7:	5d                   	pop    ebp
c00173c8:	c3                   	ret    
c00173c9:	90                   	nop

c00173ca <Video::putTGA(int, int, unsigned char*, int)>:
c00173ca:	55                   	push   ebp
c00173cb:	57                   	push   edi
c00173cc:	56                   	push   esi
c00173cd:	53                   	push   ebx
c00173ce:	83 ec 28             	sub    esp,0x28
c00173d1:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00173d5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00173d9:	50                   	push   eax
c00173da:	8d 44 24 18          	lea    eax,[esp+0x18]
c00173de:	50                   	push   eax
c00173df:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00173e3:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00173e7:	56                   	push   esi
c00173e8:	e8 5b fe ff ff       	call   c0017248 <Video::tgaParse(unsigned char*, int, int*, int*)>
c00173ed:	83 c4 20             	add    esp,0x20
c00173f0:	85 c0                	test   eax,eax
c00173f2:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00173f6:	74 35                	je     c001742d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c00173f8:	89 c7                	mov    edi,eax
c00173fa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00173fe:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017402:	39 d8                	cmp    eax,ebx
c0017404:	7e 27                	jle    c001742d <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017406:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001740a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001740e:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0017412:	39 e8                	cmp    eax,ebp
c0017414:	7e 14                	jle    c001742a <Video::putTGA(int, int, unsigned char*, int)+0x60>
c0017416:	8b 06                	mov    eax,DWORD PTR [esi]
c0017418:	83 c7 04             	add    edi,0x4
c001741b:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c001741e:	53                   	push   ebx
c001741f:	55                   	push   ebp
c0017420:	45                   	inc    ebp
c0017421:	56                   	push   esi
c0017422:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0017425:	83 c4 10             	add    esp,0x10
c0017428:	eb e0                	jmp    c001740a <Video::putTGA(int, int, unsigned char*, int)+0x40>
c001742a:	43                   	inc    ebx
c001742b:	eb cd                	jmp    c00173fa <Video::putTGA(int, int, unsigned char*, int)+0x30>
c001742d:	83 c4 1c             	add    esp,0x1c
c0017430:	5b                   	pop    ebx
c0017431:	5e                   	pop    esi
c0017432:	5f                   	pop    edi
c0017433:	5d                   	pop    ebp
c0017434:	c3                   	ret    
c0017435:	90                   	nop

c0017436 <ACPI::close(int, int, void*)>:
c0017436:	83 ec 1c             	sub    esp,0x1c
c0017439:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c0017441:	74 0a                	je     c001744d <ACPI::close(int, int, void*)+0x17>
c0017443:	b8 00 00 00 00       	mov    eax,0x0
c0017448:	e9 9a 00 00 00       	jmp    c00174e7 <ACPI::close(int, int, void*)+0xb1>
c001744d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0017452:	75 37                	jne    c001748b <ACPI::close(int, int, void*)+0x55>
c0017454:	83 ec 0c             	sub    esp,0xc
c0017457:	68 80 af 02 c0       	push   0xc002af80
c001745c:	e8 10 b7 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0017461:	83 c4 10             	add    esp,0x10
c0017464:	a1 c8 06 03 c0       	mov    eax,ds:0xc00306c8
c0017469:	85 c0                	test   eax,eax
c001746b:	74 07                	je     c0017474 <ACPI::close(int, int, void*)+0x3e>
c001746d:	a1 c8 06 03 c0       	mov    eax,ds:0xc00306c8
c0017472:	ff d0                	call   eax
c0017474:	83 ec 0c             	sub    esp,0xc
c0017477:	68 a4 b0 02 c0       	push   0xc002b0a4
c001747c:	e8 6c 2d 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c0017481:	83 c4 10             	add    esp,0x10
c0017484:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017489:	eb 5c                	jmp    c00174e7 <ACPI::close(int, int, void*)+0xb1>
c001748b:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017490:	75 50                	jne    c00174e2 <ACPI::close(int, int, void*)+0xac>
c0017492:	a1 c4 06 03 c0       	mov    eax,ds:0xc00306c4
c0017497:	85 c0                	test   eax,eax
c0017499:	74 07                	je     c00174a2 <ACPI::close(int, int, void*)+0x6c>
c001749b:	a1 c4 06 03 c0       	mov    eax,ds:0xc00306c4
c00174a0:	ff d0                	call   eax
c00174a2:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c00174a7:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00174ac:	83 e0 02             	and    eax,0x2
c00174af:	74 1c                	je     c00174cd <ACPI::close(int, int, void*)+0x97>
c00174b1:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c00174b8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00174bc:	89 c2                	mov    edx,eax
c00174be:	ec                   	in     al,dx
c00174bf:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00174c3:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c00174c7:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00174cb:	eb da                	jmp    c00174a7 <ACPI::close(int, int, void*)+0x71>
c00174cd:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c00174d4:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c00174d9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00174dd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00174e1:	ee                   	out    dx,al
c00174e2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c00174e7:	83 c4 1c             	add    esp,0x1c
c00174ea:	c3                   	ret    

c00174eb <findRSDP()>:
c00174eb:	83 ec 1c             	sub    esp,0x1c
c00174ee:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c00174f3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00174f9:	83 e0 04             	and    eax,0x4
c00174fc:	84 c0                	test   al,al
c00174fe:	75 07                	jne    c0017507 <findRSDP()+0x1c>
c0017500:	b8 00 00 00 00       	mov    eax,0x0
c0017505:	eb 6a                	jmp    c0017571 <findRSDP()+0x86>
c0017507:	a1 54 e0 02 c0       	mov    eax,ds:0xc002e054
c001750c:	3d ff 07 00 00       	cmp    eax,0x7ff
c0017511:	7f 1b                	jg     c001752e <findRSDP()+0x43>
c0017513:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0017518:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001751e:	83 e2 fb             	and    edx,0xfffffffb
c0017521:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017527:	b8 00 00 00 00       	mov    eax,0x0
c001752c:	eb 43                	jmp    c0017571 <findRSDP()+0x86>
c001752e:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c0017536:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c001753e:	77 2c                	ja     c001756c <findRSDP()+0x81>
c0017540:	83 ec 04             	sub    esp,0x4
c0017543:	6a 08                	push   0x8
c0017545:	68 8d af 02 c0       	push   0xc002af8d
c001754a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001754e:	e8 ed 90 fe ff       	call   c0000640 <memcmp>
c0017553:	83 c4 10             	add    esp,0x10
c0017556:	85 c0                	test   eax,eax
c0017558:	0f 94 c0             	sete   al
c001755b:	84 c0                	test   al,al
c001755d:	74 06                	je     c0017565 <findRSDP()+0x7a>
c001755f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017563:	eb 0c                	jmp    c0017571 <findRSDP()+0x86>
c0017565:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c001756a:	eb ca                	jmp    c0017536 <findRSDP()+0x4b>
c001756c:	b8 00 00 00 00       	mov    eax,0x0
c0017571:	83 c4 1c             	add    esp,0x1c
c0017574:	c3                   	ret    

c0017575 <loadACPITables(unsigned char*)>:
c0017575:	56                   	push   esi
c0017576:	53                   	push   ebx
c0017577:	83 ec 44             	sub    esp,0x44
c001757a:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c001757f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017585:	83 e0 04             	and    eax,0x4
c0017588:	84 c0                	test   al,al
c001758a:	0f 84 05 02 00 00    	je     c0017795 <loadACPITables(unsigned char*)+0x220>
c0017590:	a0 e0 08 03 c0       	mov    al,ds:0xc00308e0
c0017595:	84 c0                	test   al,al
c0017597:	74 75                	je     c001760e <loadACPITables(unsigned char*)+0x99>
c0017599:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001759d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00175a1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00175a5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00175a8:	83 e8 24             	sub    eax,0x24
c00175ab:	c1 e8 03             	shr    eax,0x3
c00175ae:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00175b2:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00175ba:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00175be:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c00175c2:	0f 8d b2 00 00 00    	jge    c001767a <loadACPITables(unsigned char*)+0x105>
c00175c8:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00175cc:	83 c0 24             	add    eax,0x24
c00175cf:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00175d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00175d7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00175db:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00175df:	c1 e0 03             	shl    eax,0x3
c00175e2:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c00175e6:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00175ea:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00175ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00175ef:	89 c1                	mov    ecx,eax
c00175f1:	a1 cc 06 03 c0       	mov    eax,ds:0xc00306cc
c00175f6:	8d 50 01             	lea    edx,[eax+0x1]
c00175f9:	89 15 cc 06 03 c0    	mov    DWORD PTR ds:0xc00306cc,edx
c00175ff:	89 ca                	mov    edx,ecx
c0017601:	89 14 c5 e4 06 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf91c],edx
c0017608:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c001760c:	eb ac                	jmp    c00175ba <loadACPITables(unsigned char*)+0x45>
c001760e:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017612:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017616:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001761a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001761d:	83 e8 24             	sub    eax,0x24
c0017620:	c1 e8 02             	shr    eax,0x2
c0017623:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017627:	c7 44 24 38 00 00 00 00 	mov    DWORD PTR [esp+0x38],0x0
c001762f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017633:	3b 44 24 1c          	cmp    eax,DWORD PTR [esp+0x1c]
c0017637:	7d 41                	jge    c001767a <loadACPITables(unsigned char*)+0x105>
c0017639:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001763d:	83 c0 24             	add    eax,0x24
c0017640:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017644:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017648:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001764c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017650:	c1 e0 02             	shl    eax,0x2
c0017653:	01 44 24 14          	add    DWORD PTR [esp+0x14],eax
c0017657:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001765b:	8b 08                	mov    ecx,DWORD PTR [eax]
c001765d:	a1 cc 06 03 c0       	mov    eax,ds:0xc00306cc
c0017662:	8d 50 01             	lea    edx,[eax+0x1]
c0017665:	89 15 cc 06 03 c0    	mov    DWORD PTR ds:0xc00306cc,edx
c001766b:	89 ca                	mov    edx,ecx
c001766d:	89 14 c5 e4 06 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf91c],edx
c0017674:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0017678:	eb b5                	jmp    c001762f <loadACPITables(unsigned char*)+0xba>
c001767a:	c7 44 24 34 00 00 00 00 	mov    DWORD PTR [esp+0x34],0x0
c0017682:	a1 cc 06 03 c0       	mov    eax,ds:0xc00306cc
c0017687:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c001768b:	0f 8d 05 01 00 00    	jge    c0017796 <loadACPITables(unsigned char*)+0x221>
c0017691:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017695:	8b 04 c5 e4 06 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf91c]
c001769c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00176a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00176ac:	25 ff 0f 00 00       	and    eax,0xfff
c00176b1:	89 c6                	mov    esi,eax
c00176b3:	e8 59 a6 ff ff       	call   c0011d11 <Virt::getAKernelVAS()>
c00176b8:	89 c3                	mov    ebx,eax
c00176ba:	83 ec 0c             	sub    esp,0xc
c00176bd:	6a 01                	push   0x1
c00176bf:	e8 bd a4 ff ff       	call   c0011b81 <Virt::allocateKernelVirtualPages(int)>
c00176c4:	83 c4 10             	add    esp,0x10
c00176c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00176cb:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00176d1:	83 ec 0c             	sub    esp,0xc
c00176d4:	6a 01                	push   0x1
c00176d6:	6a 01                	push   0x1
c00176d8:	50                   	push   eax
c00176d9:	52                   	push   edx
c00176da:	53                   	push   ebx
c00176db:	e8 60 ae ff ff       	call   c0012540 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00176e0:	83 c4 20             	add    esp,0x20
c00176e3:	09 f0                	or     eax,esi
c00176e5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00176e9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00176ed:	c1 e0 03             	shl    eax,0x3
c00176f0:	05 e0 06 03 c0       	add    eax,0xc00306e0
c00176f5:	83 ec 04             	sub    esp,0x4
c00176f8:	6a 04                	push   0x4
c00176fa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176fe:	50                   	push   eax
c00176ff:	e8 40 90 fe ff       	call   c0000744 <memcpy>
c0017704:	83 c4 10             	add    esp,0x10
c0017707:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001770b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001770e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017712:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017716:	05 00 10 00 00       	add    eax,0x1000
c001771b:	c1 e8 0c             	shr    eax,0xc
c001771e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017722:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017726:	89 04 24             	mov    DWORD PTR [esp],eax
c0017729:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001772d:	25 ff 0f 00 00       	and    eax,0xfff
c0017732:	89 c6                	mov    esi,eax
c0017734:	e8 d8 a5 ff ff       	call   c0011d11 <Virt::getAKernelVAS()>
c0017739:	89 c3                	mov    ebx,eax
c001773b:	83 ec 0c             	sub    esp,0xc
c001773e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017742:	e8 3a a4 ff ff       	call   c0011b81 <Virt::allocateKernelVirtualPages(int)>
c0017747:	83 c4 10             	add    esp,0x10
c001774a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001774e:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017754:	83 ec 0c             	sub    esp,0xc
c0017757:	6a 01                	push   0x1
c0017759:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001775d:	50                   	push   eax
c001775e:	52                   	push   edx
c001775f:	53                   	push   ebx
c0017760:	e8 db ad ff ff       	call   c0012540 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017765:	83 c4 20             	add    esp,0x20
c0017768:	09 f0                	or     eax,esi
c001776a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001776e:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0017771:	83 ec 0c             	sub    esp,0xc
c0017774:	50                   	push   eax
c0017775:	e8 6b a7 ff ff       	call   c0011ee5 <Virt::freeKernelVirtualPages(unsigned long)>
c001777a:	83 c4 10             	add    esp,0x10
c001777d:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017781:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017785:	89 14 c5 e4 06 03 c0 	mov    DWORD PTR [eax*8-0x3ffcf91c],edx
c001778c:	ff 44 24 34          	inc    DWORD PTR [esp+0x34]
c0017790:	e9 ed fe ff ff       	jmp    c0017682 <loadACPITables(unsigned char*)+0x10d>
c0017795:	90                   	nop
c0017796:	83 c4 44             	add    esp,0x44
c0017799:	5b                   	pop    ebx
c001779a:	5e                   	pop    esi
c001779b:	c3                   	ret    

c001779c <findRSDT(unsigned char*)>:
c001779c:	56                   	push   esi
c001779d:	53                   	push   ebx
c001779e:	83 ec 44             	sub    esp,0x44
c00177a1:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c00177a6:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00177ac:	83 e0 04             	and    eax,0x4
c00177af:	84 c0                	test   al,al
c00177b1:	75 0a                	jne    c00177bd <findRSDT(unsigned char*)+0x21>
c00177b3:	b8 00 00 00 00       	mov    eax,0x0
c00177b8:	e9 f7 00 00 00       	jmp    c00178b4 <findRSDT(unsigned char*)+0x118>
c00177bd:	83 ec 04             	sub    esp,0x4
c00177c0:	6a 24                	push   0x24
c00177c2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00177c6:	8d 44 24 18          	lea    eax,[esp+0x18]
c00177ca:	50                   	push   eax
c00177cb:	e8 74 8f fe ff       	call   c0000744 <memcpy>
c00177d0:	83 c4 10             	add    esp,0x10
c00177d3:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c00177d7:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c00177db:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c00177e3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00177e7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00177eb:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00177ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00177f3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00177f7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00177fb:	25 ff 0f 00 00       	and    eax,0xfff
c0017800:	89 c6                	mov    esi,eax
c0017802:	e8 0a a5 ff ff       	call   c0011d11 <Virt::getAKernelVAS()>
c0017807:	89 c3                	mov    ebx,eax
c0017809:	83 ec 0c             	sub    esp,0xc
c001780c:	6a 02                	push   0x2
c001780e:	e8 6e a3 ff ff       	call   c0011b81 <Virt::allocateKernelVirtualPages(int)>
c0017813:	83 c4 10             	add    esp,0x10
c0017816:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001781a:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017820:	83 ec 0c             	sub    esp,0xc
c0017823:	6a 01                	push   0x1
c0017825:	6a 02                	push   0x2
c0017827:	50                   	push   eax
c0017828:	52                   	push   edx
c0017829:	53                   	push   ebx
c001782a:	e8 11 ad ff ff       	call   c0012540 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001782f:	83 c4 20             	add    esp,0x20
c0017832:	09 f0                	or     eax,esi
c0017834:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017838:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001783c:	25 ff 0f 00 00       	and    eax,0xfff
c0017841:	89 c6                	mov    esi,eax
c0017843:	e8 c9 a4 ff ff       	call   c0011d11 <Virt::getAKernelVAS()>
c0017848:	89 c3                	mov    ebx,eax
c001784a:	83 ec 0c             	sub    esp,0xc
c001784d:	6a 02                	push   0x2
c001784f:	e8 2d a3 ff ff       	call   c0011b81 <Virt::allocateKernelVirtualPages(int)>
c0017854:	83 c4 10             	add    esp,0x10
c0017857:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001785b:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017861:	83 ec 0c             	sub    esp,0xc
c0017864:	6a 01                	push   0x1
c0017866:	6a 02                	push   0x2
c0017868:	50                   	push   eax
c0017869:	52                   	push   edx
c001786a:	53                   	push   ebx
c001786b:	e8 d0 ac ff ff       	call   c0012540 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017870:	83 c4 20             	add    esp,0x20
c0017873:	09 f0                	or     eax,esi
c0017875:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017879:	80 7c 24 3b 00       	cmp    BYTE PTR [esp+0x3b],0x0
c001787e:	75 11                	jne    c0017891 <findRSDT(unsigned char*)+0xf5>
c0017880:	c6 05 e0 08 03 c0 00 	mov    BYTE PTR ds:0xc00308e0,0x0
c0017887:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001788b:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001788f:	eb 1f                	jmp    c00178b0 <findRSDT(unsigned char*)+0x114>
c0017891:	80 7c 24 3b 02       	cmp    BYTE PTR [esp+0x3b],0x2
c0017896:	75 11                	jne    c00178a9 <findRSDT(unsigned char*)+0x10d>
c0017898:	c6 05 e0 08 03 c0 01 	mov    BYTE PTR ds:0xc00308e0,0x1
c001789f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178a3:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c00178a7:	eb 07                	jmp    c00178b0 <findRSDT(unsigned char*)+0x114>
c00178a9:	b8 00 00 00 00       	mov    eax,0x0
c00178ae:	eb 04                	jmp    c00178b4 <findRSDT(unsigned char*)+0x118>
c00178b0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00178b4:	83 c4 44             	add    esp,0x44
c00178b7:	5b                   	pop    ebx
c00178b8:	5e                   	pop    esi
c00178b9:	c3                   	ret    

c00178ba <findDataTable(unsigned char*, char*)>:
c00178ba:	83 ec 1c             	sub    esp,0x1c
c00178bd:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c00178c2:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00178c8:	83 e0 04             	and    eax,0x4
c00178cb:	84 c0                	test   al,al
c00178cd:	75 07                	jne    c00178d6 <findDataTable(unsigned char*, char*)+0x1c>
c00178cf:	b8 00 00 00 00       	mov    eax,0x0
c00178d4:	eb 7c                	jmp    c0017952 <findDataTable(unsigned char*, char*)+0x98>
c00178d6:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00178de:	a1 cc 06 03 c0       	mov    eax,ds:0xc00306cc
c00178e3:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00178e7:	7d 3a                	jge    c0017923 <findDataTable(unsigned char*, char*)+0x69>
c00178e9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00178ed:	c1 e0 03             	shl    eax,0x3
c00178f0:	05 e0 06 03 c0       	add    eax,0xc00306e0
c00178f5:	83 ec 04             	sub    esp,0x4
c00178f8:	6a 04                	push   0x4
c00178fa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00178fe:	50                   	push   eax
c00178ff:	e8 3c 8d fe ff       	call   c0000640 <memcmp>
c0017904:	83 c4 10             	add    esp,0x10
c0017907:	85 c0                	test   eax,eax
c0017909:	0f 94 c0             	sete   al
c001790c:	84 c0                	test   al,al
c001790e:	74 0d                	je     c001791d <findDataTable(unsigned char*, char*)+0x63>
c0017910:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017914:	8b 04 c5 e4 06 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffcf91c]
c001791b:	eb 35                	jmp    c0017952 <findDataTable(unsigned char*, char*)+0x98>
c001791d:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017921:	eb bb                	jmp    c00178de <findDataTable(unsigned char*, char*)+0x24>
c0017923:	a0 e0 08 03 c0       	mov    al,ds:0xc00308e0
c0017928:	84 c0                	test   al,al
c001792a:	74 07                	je     c0017933 <findDataTable(unsigned char*, char*)+0x79>
c001792c:	b8 58 00 00 00       	mov    eax,0x58
c0017931:	eb 05                	jmp    c0017938 <findDataTable(unsigned char*, char*)+0x7e>
c0017933:	b8 52 00 00 00       	mov    eax,0x52
c0017938:	83 ec 04             	sub    esp,0x4
c001793b:	50                   	push   eax
c001793c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017940:	68 c8 b0 02 c0       	push   0xc002b0c8
c0017945:	e8 27 b2 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001794a:	83 c4 10             	add    esp,0x10
c001794d:	b8 00 00 00 00       	mov    eax,0x0
c0017952:	83 c4 1c             	add    esp,0x1c
c0017955:	c3                   	ret    

c0017956 <scanMADT()>:
c0017956:	53                   	push   ebx
c0017957:	83 ec 38             	sub    esp,0x38
c001795a:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c001795f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017965:	83 e0 04             	and    eax,0x4
c0017968:	84 c0                	test   al,al
c001796a:	0f 84 63 04 00 00    	je     c0017dd3 <scanMADT()+0x47d>
c0017970:	e8 76 fb ff ff       	call   c00174eb <findRSDP()>
c0017975:	a3 ec 08 03 c0       	mov    ds:0xc00308ec,eax
c001797a:	a1 ec 08 03 c0       	mov    eax,ds:0xc00308ec
c001797f:	85 c0                	test   eax,eax
c0017981:	75 19                	jne    c001799c <scanMADT()+0x46>
c0017983:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0017988:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c001798e:	83 e2 fb             	and    edx,0xfffffffb
c0017991:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017997:	e9 3b 04 00 00       	jmp    c0017dd7 <scanMADT()+0x481>
c001799c:	a1 ec 08 03 c0       	mov    eax,ds:0xc00308ec
c00179a1:	83 ec 0c             	sub    esp,0xc
c00179a4:	50                   	push   eax
c00179a5:	e8 f2 fd ff ff       	call   c001779c <findRSDT(unsigned char*)>
c00179aa:	83 c4 10             	add    esp,0x10
c00179ad:	a3 e8 08 03 c0       	mov    ds:0xc00308e8,eax
c00179b2:	a1 e8 08 03 c0       	mov    eax,ds:0xc00308e8
c00179b7:	85 c0                	test   eax,eax
c00179b9:	75 19                	jne    c00179d4 <scanMADT()+0x7e>
c00179bb:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c00179c0:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179c6:	83 e2 fb             	and    edx,0xfffffffb
c00179c9:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179cf:	e9 03 04 00 00       	jmp    c0017dd7 <scanMADT()+0x481>
c00179d4:	a1 e8 08 03 c0       	mov    eax,ds:0xc00308e8
c00179d9:	83 ec 0c             	sub    esp,0xc
c00179dc:	50                   	push   eax
c00179dd:	e8 93 fb ff ff       	call   c0017575 <loadACPITables(unsigned char*)>
c00179e2:	83 c4 10             	add    esp,0x10
c00179e5:	a1 e8 08 03 c0       	mov    eax,ds:0xc00308e8
c00179ea:	83 ec 08             	sub    esp,0x8
c00179ed:	68 96 af 02 c0       	push   0xc002af96
c00179f2:	50                   	push   eax
c00179f3:	e8 c2 fe ff ff       	call   c00178ba <findDataTable(unsigned char*, char*)>
c00179f8:	83 c4 10             	add    esp,0x10
c00179fb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00179ff:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017a04:	75 19                	jne    c0017a1f <scanMADT()+0xc9>
c0017a06:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0017a0b:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017a11:	83 e2 fe             	and    edx,0xfffffffe
c0017a14:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017a1a:	e9 b8 03 00 00       	jmp    c0017dd7 <scanMADT()+0x481>
c0017a1f:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017a27:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017a2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a2e:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017a32:	0f 87 9f 03 00 00    	ja     c0017dd7 <scanMADT()+0x481>
c0017a38:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017a40:	0f 87 91 03 00 00    	ja     c0017dd7 <scanMADT()+0x481>
c0017a46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a4a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017a4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a52:	8d 50 01             	lea    edx,[eax+0x1]
c0017a55:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a59:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a5d:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a61:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017a65:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a69:	8d 50 01             	lea    edx,[eax+0x1]
c0017a6c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a70:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017a74:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017a78:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017a7c:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017a81:	0f 86 4f 03 00 00    	jbe    c0017dd6 <scanMADT()+0x480>
c0017a87:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017a8c:	75 57                	jne    c0017ae5 <scanMADT()+0x18f>
c0017a8e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017a92:	8d 50 01             	lea    edx,[eax+0x1]
c0017a95:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017a99:	8a 15 e0 0a 03 c0    	mov    dl,BYTE PTR ds:0xc0030ae0
c0017a9f:	0f b6 d2             	movzx  edx,dl
c0017aa2:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017aa6:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017aaa:	88 82 20 0b 03 c0    	mov    BYTE PTR [edx-0x3ffcf4e0],al
c0017ab0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ab4:	8d 50 01             	lea    edx,[eax+0x1]
c0017ab7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017abb:	8a 15 e0 0a 03 c0    	mov    dl,BYTE PTR ds:0xc0030ae0
c0017ac1:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017ac4:	88 0d e0 0a 03 c0    	mov    BYTE PTR ds:0xc0030ae0,cl
c0017aca:	0f b6 d2             	movzx  edx,dl
c0017acd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017ad1:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017ad5:	88 82 00 0b 03 c0    	mov    BYTE PTR [edx-0x3ffcf500],al
c0017adb:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017ae0:	e9 da 02 00 00       	jmp    c0017dbf <scanMADT()+0x469>
c0017ae5:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017aea:	0f 85 14 01 00 00    	jne    c0017c04 <scanMADT()+0x2ae>
c0017af0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017af4:	8d 50 01             	lea    edx,[eax+0x1]
c0017af7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017afb:	8a 15 a0 09 03 c0    	mov    dl,BYTE PTR ds:0xc00309a0
c0017b01:	0f b6 d2             	movzx  edx,dl
c0017b04:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017b08:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017b0c:	88 82 c0 09 03 c0    	mov    BYTE PTR [edx-0x3ffcf640],al
c0017b12:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017b16:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b1a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b1e:	01 d0                	add    eax,edx
c0017b20:	83 c0 2c             	add    eax,0x2c
c0017b23:	8a 00                	mov    al,BYTE PTR [eax]
c0017b25:	0f b6 d0             	movzx  edx,al
c0017b28:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b2c:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b2f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b33:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017b37:	0f b6 c0             	movzx  eax,al
c0017b3a:	c1 e0 08             	shl    eax,0x8
c0017b3d:	89 d1                	mov    ecx,edx
c0017b3f:	09 c1                	or     ecx,eax
c0017b41:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b45:	8d 50 02             	lea    edx,[eax+0x2]
c0017b48:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b4c:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b50:	0f b6 c0             	movzx  eax,al
c0017b53:	c1 e0 10             	shl    eax,0x10
c0017b56:	09 c1                	or     ecx,eax
c0017b58:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b5c:	8d 50 03             	lea    edx,[eax+0x3]
c0017b5f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017b63:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017b67:	0f b6 c0             	movzx  eax,al
c0017b6a:	c1 e0 18             	shl    eax,0x18
c0017b6d:	09 c1                	or     ecx,eax
c0017b6f:	89 ca                	mov    edx,ecx
c0017b71:	a0 a0 09 03 c0       	mov    al,ds:0xc00309a0
c0017b76:	0f b6 c0             	movzx  eax,al
c0017b79:	89 14 85 e0 09 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf620],edx
c0017b80:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017b85:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017b89:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b8d:	01 d0                	add    eax,edx
c0017b8f:	83 c0 2c             	add    eax,0x2c
c0017b92:	8a 00                	mov    al,BYTE PTR [eax]
c0017b94:	0f b6 d0             	movzx  edx,al
c0017b97:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017b9b:	8d 48 01             	lea    ecx,[eax+0x1]
c0017b9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017ba2:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017ba6:	0f b6 c0             	movzx  eax,al
c0017ba9:	c1 e0 08             	shl    eax,0x8
c0017bac:	89 d1                	mov    ecx,edx
c0017bae:	09 c1                	or     ecx,eax
c0017bb0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bb4:	8d 50 02             	lea    edx,[eax+0x2]
c0017bb7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bbb:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017bbf:	0f b6 c0             	movzx  eax,al
c0017bc2:	c1 e0 10             	shl    eax,0x10
c0017bc5:	09 c1                	or     ecx,eax
c0017bc7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017bcb:	8d 50 03             	lea    edx,[eax+0x3]
c0017bce:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017bd2:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017bd6:	0f b6 c0             	movzx  eax,al
c0017bd9:	c1 e0 18             	shl    eax,0x18
c0017bdc:	09 c1                	or     ecx,eax
c0017bde:	89 ca                	mov    edx,ecx
c0017be0:	a0 a0 09 03 c0       	mov    al,ds:0xc00309a0
c0017be5:	0f b6 c0             	movzx  eax,al
c0017be8:	89 14 85 60 0a 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf5a0],edx
c0017bef:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017bf4:	a0 a0 09 03 c0       	mov    al,ds:0xc00309a0
c0017bf9:	40                   	inc    eax
c0017bfa:	a2 a0 09 03 c0       	mov    ds:0xc00309a0,al
c0017bff:	e9 bb 01 00 00       	jmp    c0017dbf <scanMADT()+0x469>
c0017c04:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c0017c09:	0f 85 e9 00 00 00    	jne    c0017cf8 <scanMADT()+0x3a2>
c0017c0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c13:	8d 50 01             	lea    edx,[eax+0x1]
c0017c16:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c1a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c1e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c22:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0017c26:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c2a:	8d 50 01             	lea    edx,[eax+0x1]
c0017c2d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017c31:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c35:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017c39:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0017c3d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017c41:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c45:	01 d0                	add    eax,edx
c0017c47:	83 c0 2c             	add    eax,0x2c
c0017c4a:	8a 00                	mov    al,BYTE PTR [eax]
c0017c4c:	0f b6 d0             	movzx  edx,al
c0017c4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c53:	8d 48 01             	lea    ecx,[eax+0x1]
c0017c56:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c5a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017c5e:	0f b6 c0             	movzx  eax,al
c0017c61:	c1 e0 08             	shl    eax,0x8
c0017c64:	89 d1                	mov    ecx,edx
c0017c66:	09 c1                	or     ecx,eax
c0017c68:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c6c:	8d 50 02             	lea    edx,[eax+0x2]
c0017c6f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c73:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c77:	0f b6 c0             	movzx  eax,al
c0017c7a:	c1 e0 10             	shl    eax,0x10
c0017c7d:	09 c1                	or     ecx,eax
c0017c7f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017c83:	8d 50 03             	lea    edx,[eax+0x3]
c0017c86:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017c8a:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0017c8e:	0f b6 c0             	movzx  eax,al
c0017c91:	c1 e0 18             	shl    eax,0x18
c0017c94:	09 c8                	or     eax,ecx
c0017c96:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017c9a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017c9f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ca3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ca7:	01 d0                	add    eax,edx
c0017ca9:	83 c0 2c             	add    eax,0x2c
c0017cac:	8a 00                	mov    al,BYTE PTR [eax]
c0017cae:	0f b6 c0             	movzx  eax,al
c0017cb1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017cb5:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017cb8:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cbc:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c0017cc0:	0f b6 d2             	movzx  edx,dl
c0017cc3:	c1 e2 08             	shl    edx,0x8
c0017cc6:	09 d0                	or     eax,edx
c0017cc8:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c0017ccd:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017cd2:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c0017cd7:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017cdb:	88 90 60 d2 02 c0    	mov    BYTE PTR [eax-0x3ffd2da0],dl
c0017ce1:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c0017ce6:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c0017ceb:	66 89 84 12 80 09 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffcf680],ax
c0017cf3:	e9 c7 00 00 00       	jmp    c0017dbf <scanMADT()+0x469>
c0017cf8:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c0017cfd:	0f 85 b0 00 00 00    	jne    c0017db3 <scanMADT()+0x45d>
c0017d03:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d07:	8d 50 01             	lea    edx,[eax+0x1]
c0017d0a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d0e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d12:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d16:	0f b6 c0             	movzx  eax,al
c0017d19:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017d1d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d21:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d25:	01 d0                	add    eax,edx
c0017d27:	83 c0 2c             	add    eax,0x2c
c0017d2a:	8a 00                	mov    al,BYTE PTR [eax]
c0017d2c:	0f b6 d0             	movzx  edx,al
c0017d2f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d33:	8d 48 01             	lea    ecx,[eax+0x1]
c0017d36:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017d3a:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0017d3e:	0f b6 c0             	movzx  eax,al
c0017d41:	c1 e0 08             	shl    eax,0x8
c0017d44:	09 d0                	or     eax,edx
c0017d46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017d4a:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c0017d4f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017d53:	8d 50 01             	lea    edx,[eax+0x1]
c0017d56:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017d5a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017d5e:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017d62:	0f b6 c0             	movzx  eax,al
c0017d65:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017d69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017d6d:	c1 e0 08             	shl    eax,0x8
c0017d70:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0017d74:	89 c1                	mov    ecx,eax
c0017d76:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017d7a:	c1 e0 18             	shl    eax,0x18
c0017d7d:	89 c3                	mov    ebx,eax
c0017d7f:	a1 f0 08 03 c0       	mov    eax,ds:0xc00308f0
c0017d84:	8d 50 01             	lea    edx,[eax+0x1]
c0017d87:	89 15 f0 08 03 c0    	mov    DWORD PTR ds:0xc00308f0,edx
c0017d8d:	09 d9                	or     ecx,ebx
c0017d8f:	89 ca                	mov    edx,ecx
c0017d91:	89 14 85 00 09 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf700],edx
c0017d98:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017d9c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017da0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017da4:	68 f8 b0 02 c0       	push   0xc002b0f8
c0017da9:	e8 c3 ad ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0017dae:	83 c4 10             	add    esp,0x10
c0017db1:	eb 0c                	jmp    c0017dbf <scanMADT()+0x469>
c0017db3:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0017db8:	75 05                	jne    c0017dbf <scanMADT()+0x469>
c0017dba:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c0017dbf:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c0017dc4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017dc8:	01 d0                	add    eax,edx
c0017dca:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017dce:	e9 54 fc ff ff       	jmp    c0017a27 <scanMADT()+0xd1>
c0017dd3:	90                   	nop
c0017dd4:	eb 01                	jmp    c0017dd7 <scanMADT()+0x481>
c0017dd6:	90                   	nop
c0017dd7:	83 c4 38             	add    esp,0x38
c0017dda:	5b                   	pop    ebx
c0017ddb:	c3                   	ret    

c0017ddc <ACPI::ACPI()>:
c0017ddc:	83 ec 0c             	sub    esp,0xc
c0017ddf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017de3:	83 ec 08             	sub    esp,0x8
c0017de6:	68 9b af 02 c0       	push   0xc002af9b
c0017deb:	50                   	push   eax
c0017dec:	e8 97 c3 ff ff       	call   c0014188 <Device::Device(char const*)>
c0017df1:	83 c4 10             	add    esp,0x10
c0017df4:	ba 6c b1 02 c0       	mov    edx,0xc002b16c
c0017df9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017dfd:	89 10                	mov    DWORD PTR [eax],edx
c0017dff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e03:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0017e0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e0e:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0017e18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e1c:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0017e26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e2a:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0017e31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017e35:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0017e3c:	e8 15 fb ff ff       	call   c0017956 <scanMADT()>
c0017e41:	90                   	nop
c0017e42:	83 c4 0c             	add    esp,0xc
c0017e45:	c3                   	ret    

c0017e46 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0017e46:	83 ec 2c             	sub    esp,0x2c
c0017e49:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017e4d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017e51:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017e55:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0017e59:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0017e5e:	88 d0                	mov    al,dl
c0017e60:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017e64:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0017e69:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0017e71:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e75:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017e7b:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0017e7f:	0f 8d 97 00 00 00    	jge    c0017f1c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0017e85:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e89:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017e8d:	83 c2 2a             	add    edx,0x2a
c0017e90:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0017e94:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0017e99:	75 78                	jne    c0017f13 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017e9b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017e9f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ea3:	83 c2 2a             	add    edx,0x2a
c0017ea6:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0017eaa:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c0017eae:	75 63                	jne    c0017f13 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0017eb0:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0017eb5:	74 3a                	je     c0017ef1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0017eb7:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ebb:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017ebf:	83 c2 2a             	add    edx,0x2a
c0017ec2:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c0017ec6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017eca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ecd:	39 c2                	cmp    edx,eax
c0017ecf:	74 10                	je     c0017ee1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c0017ed1:	83 ec 0c             	sub    esp,0xc
c0017ed4:	68 34 b1 02 c0       	push   0xc002b134
c0017ed9:	e8 0f 23 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c0017ede:	83 c4 10             	add    esp,0x10
c0017ee1:	83 ec 0c             	sub    esp,0xc
c0017ee4:	68 a0 af 02 c0       	push   0xc002afa0
c0017ee9:	e8 ff 22 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c0017eee:	83 c4 10             	add    esp,0x10
c0017ef1:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0017ef5:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017ef9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0017efd:	83 c2 2a             	add    edx,0x2a
c0017f00:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c0017f04:	8b 02                	mov    eax,DWORD PTR [edx]
c0017f06:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c0017f09:	89 01                	mov    DWORD PTR [ecx],eax
c0017f0b:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0017f0e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c0017f13:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0017f17:	e9 55 ff ff ff       	jmp    c0017e71 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c0017f1c:	90                   	nop
c0017f1d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017f21:	83 c4 2c             	add    esp,0x2c
c0017f24:	c2 04 00             	ret    0x4
c0017f27:	90                   	nop

c0017f28 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0017f28:	83 ec 1c             	sub    esp,0x1c
c0017f2b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f2f:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0017f33:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017f37:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c0017f3c:	88 c8                	mov    al,cl
c0017f3e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0017f42:	88 d0                	mov    al,dl
c0017f44:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0017f48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f4c:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f56:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017f59:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c0017f5d:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c0017f61:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f65:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017f6b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f6f:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0017f72:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017f76:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0017f7b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f7f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017f85:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0017f89:	8d 48 01             	lea    ecx,[eax+0x1]
c0017f8c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f90:	83 c2 2a             	add    edx,0x2a
c0017f93:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0017f97:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017f9b:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0017fa1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fa5:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0017fa8:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017fac:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c0017fb0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fb4:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017fba:	8d 50 01             	lea    edx,[eax+0x1]
c0017fbd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fc1:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c0017fc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017fcb:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0017fd1:	3d 00 02 00 00       	cmp    eax,0x200
c0017fd6:	75 10                	jne    c0017fe8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c0017fd8:	83 ec 0c             	sub    esp,0xc
c0017fdb:	68 af af 02 c0       	push   0xc002afaf
c0017fe0:	e8 08 22 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c0017fe5:	83 c4 10             	add    esp,0x10
c0017fe8:	90                   	nop
c0017fe9:	83 c4 1c             	add    esp,0x1c
c0017fec:	c3                   	ret    
c0017fed:	90                   	nop

c0017fee <ACPI::setScreenBrightnessLevel(void*, int)>:
c0017fee:	b8 00 00 00 00       	mov    eax,0x0
c0017ff3:	c3                   	ret    

c0017ff4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c0017ff4:	83 ec 1c             	sub    esp,0x1c
c0017ff7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017ffb:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c0017ffe:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0018002:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0018007:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c001800c:	83 ec 08             	sub    esp,0x8
c001800f:	52                   	push   edx
c0018010:	50                   	push   eax
c0018011:	e8 42 6e ff ff       	call   c000ee58 <Computer::readCMOS(unsigned char)>
c0018016:	83 c4 10             	add    esp,0x10
c0018019:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c001801d:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0018022:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018027:	83 ec 04             	sub    esp,0x4
c001802a:	6a 01                	push   0x1
c001802c:	52                   	push   edx
c001802d:	50                   	push   eax
c001802e:	e8 3b 6f ff ff       	call   c000ef6e <Computer::writeCMOS(unsigned char, unsigned char)>
c0018033:	83 c4 10             	add    esp,0x10
c0018036:	90                   	nop
c0018037:	83 c4 1c             	add    esp,0x1c
c001803a:	c3                   	ret    
c001803b:	90                   	nop

c001803c <ACPI::open(int, int, void*)>:
c001803c:	53                   	push   ebx
c001803d:	83 ec 28             	sub    esp,0x28
c0018040:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018044:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001804b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001804f:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c0018056:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c001805b:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018061:	83 e0 04             	and    eax,0x4
c0018064:	84 c0                	test   al,al
c0018066:	74 47                	je     c00180af <ACPI::open(int, int, void*)+0x73>
c0018068:	a1 e8 08 03 c0       	mov    eax,ds:0xc00308e8
c001806d:	83 ec 08             	sub    esp,0x8
c0018070:	68 cc af 02 c0       	push   0xc002afcc
c0018075:	50                   	push   eax
c0018076:	e8 3f f8 ff ff       	call   c00178ba <findDataTable(unsigned char*, char*)>
c001807b:	83 c4 10             	add    esp,0x10
c001807e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018082:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0018087:	74 26                	je     c00180af <ACPI::open(int, int, void*)+0x73>
c0018089:	83 ec 0c             	sub    esp,0xc
c001808c:	68 d1 af 02 c0       	push   0xc002afd1
c0018091:	e8 db aa ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018096:	83 c4 10             	add    esp,0x10
c0018099:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001809d:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00180a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180a8:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00180af:	c7 44 24 18 5f 0c 00 00 	mov    DWORD PTR [esp+0x18],0xc5f
c00180b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00180bb:	8a 00                	mov    al,BYTE PTR [eax]
c00180bd:	3c 01                	cmp    al,0x1
c00180bf:	75 28                	jne    c00180e9 <ACPI::open(int, int, void*)+0xad>
c00180c1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180c5:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00180cc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180d0:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00180d7:	83 ec 0c             	sub    esp,0xc
c00180da:	68 e2 af 02 c0       	push   0xc002afe2
c00180df:	e8 8d aa ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c00180e4:	83 c4 10             	add    esp,0x10
c00180e7:	eb 25                	jmp    c001810e <ACPI::open(int, int, void*)+0xd2>
c00180e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00180ed:	8a 00                	mov    al,BYTE PTR [eax]
c00180ef:	3c 02                	cmp    al,0x2
c00180f1:	75 1b                	jne    c001810e <ACPI::open(int, int, void*)+0xd2>
c00180f3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00180f7:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00180fe:	83 ec 0c             	sub    esp,0xc
c0018101:	68 ea af 02 c0       	push   0xc002afea
c0018106:	e8 66 aa ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001810b:	83 c4 10             	add    esp,0x10
c001810e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018112:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018118:	83 f0 01             	xor    eax,0x1
c001811b:	84 c0                	test   al,al
c001811d:	74 6a                	je     c0018189 <ACPI::open(int, int, void*)+0x14d>
c001811f:	83 ec 0c             	sub    esp,0xc
c0018122:	68 f2 af 02 c0       	push   0xc002aff2
c0018127:	e8 45 aa ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001812c:	83 c4 10             	add    esp,0x10
c001812f:	e8 1c 80 fe ff       	call   c0000150 <manualPCIProbe>
c0018134:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018138:	83 7c 24 14 01       	cmp    DWORD PTR [esp+0x14],0x1
c001813d:	75 28                	jne    c0018167 <ACPI::open(int, int, void*)+0x12b>
c001813f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018143:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001814a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001814e:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c0018155:	83 ec 0c             	sub    esp,0xc
c0018158:	68 00 b0 02 c0       	push   0xc002b000
c001815d:	e8 0f aa ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018162:	83 c4 10             	add    esp,0x10
c0018165:	eb 22                	jmp    c0018189 <ACPI::open(int, int, void*)+0x14d>
c0018167:	83 7c 24 14 02       	cmp    DWORD PTR [esp+0x14],0x2
c001816c:	75 1b                	jne    c0018189 <ACPI::open(int, int, void*)+0x14d>
c001816e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0018172:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018179:	83 ec 0c             	sub    esp,0xc
c001817c:	68 0a b0 02 c0       	push   0xc002b00a
c0018181:	e8 eb a9 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018186:	83 c4 10             	add    esp,0x10
c0018189:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001818d:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018193:	84 c0                	test   al,al
c0018195:	74 13                	je     c00181aa <ACPI::open(int, int, void*)+0x16e>
c0018197:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001819b:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c00181a1:	83 f0 01             	xor    eax,0x1
c00181a4:	0f b6 c0             	movzx  eax,al
c00181a7:	40                   	inc    eax
c00181a8:	eb 05                	jmp    c00181af <ACPI::open(int, int, void*)+0x173>
c00181aa:	b8 00 00 00 00       	mov    eax,0x0
c00181af:	83 ec 08             	sub    esp,0x8
c00181b2:	50                   	push   eax
c00181b3:	68 14 b0 02 c0       	push   0xc002b014
c00181b8:	e8 b4 a9 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c00181bd:	83 c4 10             	add    esp,0x10
c00181c0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181c4:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00181ca:	84 c0                	test   al,al
c00181cc:	74 67                	je     c0018235 <ACPI::open(int, int, void*)+0x1f9>
c00181ce:	c7 44 24 04 58 01 00 00 	mov    DWORD PTR [esp+0x4],0x158
c00181d6:	83 ec 0c             	sub    esp,0xc
c00181d9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00181dd:	e8 5e 76 ff ff       	call   c000f840 <malloc>
c00181e2:	83 c4 10             	add    esp,0x10
c00181e5:	89 c3                	mov    ebx,eax
c00181e7:	83 ec 0c             	sub    esp,0xc
c00181ea:	53                   	push   ebx
c00181eb:	e8 26 a3 00 00       	call   c0022516 <PCI::PCI()>
c00181f0:	83 c4 10             	add    esp,0x10
c00181f3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00181f7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00181fb:	83 ec 08             	sub    esp,0x8
c00181fe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0018202:	50                   	push   eax
c0018203:	e8 90 bd ff ff       	call   c0013f98 <Device::addChild(Device*)>
c0018208:	83 c4 10             	add    esp,0x10
c001820b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001820f:	8b 00                	mov    eax,DWORD PTR [eax]
c0018211:	83 c0 08             	add    eax,0x8
c0018214:	8b 00                	mov    eax,DWORD PTR [eax]
c0018216:	6a 00                	push   0x0
c0018218:	6a 00                	push   0x0
c001821a:	6a 00                	push   0x0
c001821c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018220:	ff d0                	call   eax
c0018222:	83 c4 10             	add    esp,0x10
c0018225:	83 ec 0c             	sub    esp,0xc
c0018228:	68 1d b0 02 c0       	push   0xc002b01d
c001822d:	e8 3f a9 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018232:	83 c4 10             	add    esp,0x10
c0018235:	83 ec 0c             	sub    esp,0xc
c0018238:	68 28 b0 02 c0       	push   0xc002b028
c001823d:	e8 cb 46 00 00       	call   c001c90d <Thr::loadKernelSymbolTable(char const*)>
c0018242:	83 c4 10             	add    esp,0x10
c0018245:	8b 1d 08 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e008
c001824b:	83 ec 08             	sub    esp,0x8
c001824e:	6a 01                	push   0x1
c0018250:	68 46 b0 02 c0       	push   0xc002b046
c0018255:	e8 10 51 00 00       	call   c001d36a <Thr::loadDLL(char const*, bool)>
c001825a:	83 c4 10             	add    esp,0x10
c001825d:	83 ec 08             	sub    esp,0x8
c0018260:	53                   	push   ebx
c0018261:	50                   	push   eax
c0018262:	e8 37 53 00 00       	call   c001d59e <Thr::executeDLL(unsigned long, void*)>
c0018267:	83 c4 10             	add    esp,0x10
c001826a:	8b 1d 08 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e008
c0018270:	83 ec 08             	sub    esp,0x8
c0018273:	6a 01                	push   0x1
c0018275:	68 63 b0 02 c0       	push   0xc002b063
c001827a:	e8 eb 50 00 00       	call   c001d36a <Thr::loadDLL(char const*, bool)>
c001827f:	83 c4 10             	add    esp,0x10
c0018282:	83 ec 08             	sub    esp,0x8
c0018285:	53                   	push   ebx
c0018286:	50                   	push   eax
c0018287:	e8 12 53 00 00       	call   c001d59e <Thr::executeDLL(unsigned long, void*)>
c001828c:	83 c4 10             	add    esp,0x10
c001828f:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0018294:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001829a:	83 e0 04             	and    eax,0x4
c001829d:	84 c0                	test   al,al
c001829f:	0f 84 d2 00 00 00    	je     c0018377 <ACPI::open(int, int, void*)+0x33b>
c00182a5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c00182ac:	83 ec 0c             	sub    esp,0xc
c00182af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00182b3:	e8 88 75 ff ff       	call   c000f840 <malloc>
c00182b8:	83 c4 10             	add    esp,0x10
c00182bb:	89 c3                	mov    ebx,eax
c00182bd:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c00182c2:	83 ec 04             	sub    esp,0x4
c00182c5:	50                   	push   eax
c00182c6:	68 80 b0 02 c0       	push   0xc002b080
c00182cb:	53                   	push   ebx
c00182cc:	e8 f9 ad ff ff       	call   c00130ca <File::File(char const*, Process*)>
c00182d1:	83 c4 10             	add    esp,0x10
c00182d4:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00182d8:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00182dd:	74 17                	je     c00182f6 <ACPI::open(int, int, void*)+0x2ba>
c00182df:	83 ec 0c             	sub    esp,0xc
c00182e2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00182e6:	e8 b1 b0 ff ff       	call   c001339c <File::exists()>
c00182eb:	83 c4 10             	add    esp,0x10
c00182ee:	84 c0                	test   al,al
c00182f0:	74 04                	je     c00182f6 <ACPI::open(int, int, void*)+0x2ba>
c00182f2:	b0 01                	mov    al,0x1
c00182f4:	eb 02                	jmp    c00182f8 <ACPI::open(int, int, void*)+0x2bc>
c00182f6:	b0 00                	mov    al,0x0
c00182f8:	84 c0                	test   al,al
c00182fa:	74 22                	je     c001831e <ACPI::open(int, int, void*)+0x2e2>
c00182fc:	83 ec 08             	sub    esp,0x8
c00182ff:	6a 01                	push   0x1
c0018301:	68 80 b0 02 c0       	push   0xc002b080
c0018306:	e8 5f 50 00 00       	call   c001d36a <Thr::loadDLL(char const*, bool)>
c001830b:	83 c4 10             	add    esp,0x10
c001830e:	83 ec 08             	sub    esp,0x8
c0018311:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0018315:	50                   	push   eax
c0018316:	e8 83 52 00 00       	call   c001d59e <Thr::executeDLL(unsigned long, void*)>
c001831b:	83 c4 10             	add    esp,0x10
c001831e:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018323:	74 1e                	je     c0018343 <ACPI::open(int, int, void*)+0x307>
c0018325:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001832a:	74 17                	je     c0018343 <ACPI::open(int, int, void*)+0x307>
c001832c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018330:	8b 00                	mov    eax,DWORD PTR [eax]
c0018332:	83 c0 08             	add    eax,0x8
c0018335:	8b 00                	mov    eax,DWORD PTR [eax]
c0018337:	83 ec 0c             	sub    esp,0xc
c001833a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001833e:	ff d0                	call   eax
c0018340:	83 c4 10             	add    esp,0x10
c0018343:	a1 e8 08 03 c0       	mov    eax,ds:0xc00308e8
c0018348:	83 ec 08             	sub    esp,0x8
c001834b:	68 9d b0 02 c0       	push   0xc002b09d
c0018350:	50                   	push   eax
c0018351:	e8 64 f5 ff ff       	call   c00178ba <findDataTable(unsigned char*, char*)>
c0018356:	83 c4 10             	add    esp,0x10
c0018359:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001835d:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018362:	74 13                	je     c0018377 <ACPI::open(int, int, void*)+0x33b>
c0018364:	83 ec 08             	sub    esp,0x8
c0018367:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001836b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001836f:	e8 80 fc ff ff       	call   c0017ff4 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c0018374:	83 c4 10             	add    esp,0x10
c0018377:	b8 00 00 00 00       	mov    eax,0x0
c001837c:	83 c4 28             	add    esp,0x28
c001837f:	5b                   	pop    ebx
c0018380:	c3                   	ret    
c0018381:	90                   	nop

c0018382 <ACPI::sleep()>:
c0018382:	83 ec 0c             	sub    esp,0xc
c0018385:	a1 c0 06 03 c0       	mov    eax,ds:0xc00306c0
c001838a:	85 c0                	test   eax,eax
c001838c:	74 07                	je     c0018395 <ACPI::sleep()+0x13>
c001838e:	a1 c0 06 03 c0       	mov    eax,ds:0xc00306c0
c0018393:	ff d0                	call   eax
c0018395:	90                   	nop
c0018396:	83 c4 0c             	add    esp,0xc
c0018399:	c3                   	ret    

c001839a <CPU::close(int, int, void*)>:
c001839a:	31 c0                	xor    eax,eax
c001839c:	c3                   	ret    
c001839d:	90                   	nop

c001839e <CPU::lookupAMDName(unsigned char, unsigned char)>:
c001839e:	55                   	push   ebp
c001839f:	57                   	push   edi
c00183a0:	56                   	push   esi
c00183a1:	53                   	push   ebx
c00183a2:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00183a6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183aa:	89 ce                	mov    esi,ecx
c00183ac:	89 d5                	mov    ebp,edx
c00183ae:	80 f9 04             	cmp    cl,0x4
c00183b1:	75 28                	jne    c00183db <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00183b3:	8d 42 f9             	lea    eax,[edx-0x7]
c00183b6:	3c 03                	cmp    al,0x3
c00183b8:	0f 86 63 01 00 00    	jbe    c0018521 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00183be:	80 fa 03             	cmp    dl,0x3
c00183c1:	0f 84 5a 01 00 00    	je     c0018521 <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00183c7:	8d 7a f2             	lea    edi,[edx-0xe]
c00183ca:	b8 30 d4 02 c0       	mov    eax,0xc002d430
c00183cf:	89 fb                	mov    ebx,edi
c00183d1:	80 fb 01             	cmp    bl,0x1
c00183d4:	77 4e                	ja     c0018424 <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c00183d6:	e9 52 01 00 00       	jmp    c001852d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183db:	80 f9 05             	cmp    cl,0x5
c00183de:	75 4d                	jne    c001842d <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c00183e0:	b8 40 d4 02 c0       	mov    eax,0xc002d440
c00183e5:	80 fa 03             	cmp    dl,0x3
c00183e8:	0f 86 3f 01 00 00    	jbe    c001852d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00183ee:	8d 7a fa             	lea    edi,[edx-0x6]
c00183f1:	b8 50 d4 02 c0       	mov    eax,0xc002d450
c00183f6:	89 fb                	mov    ebx,edi
c00183f8:	80 fb 01             	cmp    bl,0x1
c00183fb:	0f 86 2c 01 00 00    	jbe    c001852d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018401:	b8 60 d4 02 c0       	mov    eax,0xc002d460
c0018406:	80 fa 08             	cmp    dl,0x8
c0018409:	0f 84 1e 01 00 00    	je     c001852d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001840f:	89 d7                	mov    edi,edx
c0018411:	b8 70 d4 02 c0       	mov    eax,0xc002d470
c0018416:	83 e7 fb             	and    edi,0xfffffffb
c0018419:	89 fb                	mov    ebx,edi
c001841b:	80 fb 09             	cmp    bl,0x9
c001841e:	0f 84 09 01 00 00    	je     c001852d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018424:	31 c0                	xor    eax,eax
c0018426:	89 eb                	mov    ebx,ebp
c0018428:	0f b6 fb             	movzx  edi,bl
c001842b:	eb 30                	jmp    c001845d <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c001842d:	31 c0                	xor    eax,eax
c001842f:	80 f9 06             	cmp    cl,0x6
c0018432:	75 f2                	jne    c0018426 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018434:	80 fa 0a             	cmp    dl,0xa
c0018437:	77 ed                	ja     c0018426 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018439:	bf de 05 00 00       	mov    edi,0x5de
c001843e:	0f a3 d7             	bt     edi,edx
c0018441:	73 e3                	jae    c0018426 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018443:	b8 80 d4 02 c0       	mov    eax,0xc002d480
c0018448:	e9 e0 00 00 00       	jmp    c001852d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001844d:	39 c7                	cmp    edi,eax
c001844f:	0f 84 d3 00 00 00    	je     c0018528 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018455:	40                   	inc    eax
c0018456:	3d d0 00 00 00       	cmp    eax,0xd0
c001845b:	74 09                	je     c0018466 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c001845d:	89 f3                	mov    ebx,esi
c001845f:	80 fb 0f             	cmp    bl,0xf
c0018462:	75 f1                	jne    c0018455 <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018464:	eb e7                	jmp    c001844d <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018466:	80 f9 10             	cmp    cl,0x10
c0018469:	75 14                	jne    c001847f <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c001846b:	8d 42 fc             	lea    eax,[edx-0x4]
c001846e:	83 e0 fb             	and    eax,0xfffffffb
c0018471:	3c 02                	cmp    al,0x2
c0018473:	76 34                	jbe    c00184a9 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018475:	b8 82 b4 02 c0       	mov    eax,0xc002b482
c001847a:	80 fa 02             	cmp    dl,0x2
c001847d:	eb 24                	jmp    c00184a3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c001847f:	80 f9 11             	cmp    cl,0x11
c0018482:	75 13                	jne    c0018497 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018484:	b8 82 b4 02 c0       	mov    eax,0xc002b482
c0018489:	80 fa 03             	cmp    dl,0x3
c001848c:	0f 85 9b 00 00 00    	jne    c001852d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018492:	e9 91 00 00 00       	jmp    c0018528 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018497:	80 f9 12             	cmp    cl,0x12
c001849a:	75 14                	jne    c00184b0 <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c001849c:	b8 82 b4 02 c0       	mov    eax,0xc002b482
c00184a1:	fe ca                	dec    dl
c00184a3:	0f 85 84 00 00 00    	jne    c001852d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184a9:	b8 a0 d4 02 c0       	mov    eax,0xc002d4a0
c00184ae:	eb 7d                	jmp    c001852d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184b0:	80 f9 14             	cmp    cl,0x14
c00184b3:	75 12                	jne    c00184c7 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c00184b5:	4a                   	dec    edx
c00184b6:	b8 82 b4 02 c0       	mov    eax,0xc002b482
c00184bb:	80 fa 01             	cmp    dl,0x1
c00184be:	77 6d                	ja     c001852d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184c0:	b8 b0 d4 02 c0       	mov    eax,0xc002d4b0
c00184c5:	eb 66                	jmp    c001852d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184c7:	80 f9 15             	cmp    cl,0x15
c00184ca:	75 31                	jne    c00184fd <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c00184cc:	b8 c0 d4 02 c0       	mov    eax,0xc002d4c0
c00184d1:	80 fa 01             	cmp    dl,0x1
c00184d4:	74 57                	je     c001852d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184d6:	b8 82 b4 02 c0       	mov    eax,0xc002b482
c00184db:	80 fa 13             	cmp    dl,0x13
c00184de:	76 0c                	jbe    c00184ec <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c00184e0:	80 fa 30             	cmp    dl,0x30
c00184e3:	75 48                	jne    c001852d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184e5:	b8 e0 d4 02 c0       	mov    eax,0xc002d4e0
c00184ea:	eb 41                	jmp    c001852d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184ec:	b9 04 00 09 00       	mov    ecx,0x90004
c00184f1:	0f a3 d1             	bt     ecx,edx
c00184f4:	73 37                	jae    c001852d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184f6:	b8 d0 d4 02 c0       	mov    eax,0xc002d4d0
c00184fb:	eb 30                	jmp    c001852d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c00184fd:	b8 82 b4 02 c0       	mov    eax,0xc002b482
c0018502:	80 f9 16             	cmp    cl,0x16
c0018505:	75 26                	jne    c001852d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018507:	b8 f0 d4 02 c0       	mov    eax,0xc002d4f0
c001850c:	84 d2                	test   dl,dl
c001850e:	74 1d                	je     c001852d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018510:	b8 82 b4 02 c0       	mov    eax,0xc002b482
c0018515:	80 fa 30             	cmp    dl,0x30
c0018518:	75 13                	jne    c001852d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c001851a:	b8 00 d5 02 c0       	mov    eax,0xc002d500
c001851f:	eb 0c                	jmp    c001852d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018521:	b8 20 d4 02 c0       	mov    eax,0xc002d420
c0018526:	eb 05                	jmp    c001852d <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018528:	b8 90 d4 02 c0       	mov    eax,0xc002d490
c001852d:	5b                   	pop    ebx
c001852e:	5e                   	pop    esi
c001852f:	5f                   	pop    edi
c0018530:	5d                   	pop    ebp
c0018531:	c3                   	ret    

c0018532 <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018532:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018536:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001853a:	80 f9 04             	cmp    cl,0x4
c001853d:	75 6b                	jne    c00185aa <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c001853f:	b8 80 d2 02 c0       	mov    eax,0xc002d280
c0018544:	80 fa 01             	cmp    dl,0x1
c0018547:	0f 86 92 02 00 00    	jbe    c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001854d:	b8 90 d2 02 c0       	mov    eax,0xc002d290
c0018552:	80 fa 02             	cmp    dl,0x2
c0018555:	0f 84 84 02 00 00    	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001855b:	b8 a0 d2 02 c0       	mov    eax,0xc002d2a0
c0018560:	80 fa 03             	cmp    dl,0x3
c0018563:	0f 84 76 02 00 00    	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018569:	b8 b0 d2 02 c0       	mov    eax,0xc002d2b0
c001856e:	80 fa 04             	cmp    dl,0x4
c0018571:	0f 84 68 02 00 00    	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018577:	b8 c0 d2 02 c0       	mov    eax,0xc002d2c0
c001857c:	80 fa 05             	cmp    dl,0x5
c001857f:	0f 84 5a 02 00 00    	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018585:	b8 a0 d2 02 c0       	mov    eax,0xc002d2a0
c001858a:	80 fa 07             	cmp    dl,0x7
c001858d:	0f 84 4c 02 00 00    	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018593:	83 ea 08             	sub    edx,0x8
c0018596:	b8 82 b4 02 c0       	mov    eax,0xc002b482
c001859b:	80 fa 01             	cmp    dl,0x1
c001859e:	0f 87 3b 02 00 00    	ja     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185a4:	b8 d0 d2 02 c0       	mov    eax,0xc002d2d0
c00185a9:	c3                   	ret    
c00185aa:	80 f9 05             	cmp    cl,0x5
c00185ad:	75 45                	jne    c00185f4 <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c00185af:	8d 4a ff             	lea    ecx,[edx-0x1]
c00185b2:	b8 e0 d2 02 c0       	mov    eax,0xc002d2e0
c00185b7:	80 f9 02             	cmp    cl,0x2
c00185ba:	0f 86 1f 02 00 00    	jbe    c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185c0:	80 fa 04             	cmp    dl,0x4
c00185c3:	0f 84 f3 01 00 00    	je     c00187bc <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c00185c9:	80 fa 07             	cmp    dl,0x7
c00185cc:	0f 84 0d 02 00 00    	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185d2:	b8 f0 d2 02 c0       	mov    eax,0xc002d2f0
c00185d7:	80 fa 08             	cmp    dl,0x8
c00185da:	0f 84 ff 01 00 00    	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185e0:	b8 82 b4 02 c0       	mov    eax,0xc002b482
c00185e5:	80 fa 09             	cmp    dl,0x9
c00185e8:	0f 85 f1 01 00 00    	jne    c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00185ee:	b8 00 d3 02 c0       	mov    eax,0xc002d300
c00185f3:	c3                   	ret    
c00185f4:	80 f9 06             	cmp    cl,0x6
c00185f7:	0f 85 85 01 00 00    	jne    c0018782 <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c00185fd:	b8 10 d3 02 c0       	mov    eax,0xc002d310
c0018602:	80 fa 01             	cmp    dl,0x1
c0018605:	0f 84 d4 01 00 00    	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001860b:	8d 42 fb             	lea    eax,[edx-0x5]
c001860e:	3c 01                	cmp    al,0x1
c0018610:	0f 86 ac 01 00 00    	jbe    c00187c2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018616:	80 fa 03             	cmp    dl,0x3
c0018619:	0f 84 a3 01 00 00    	je     c00187c2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c001861f:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018622:	b8 30 d3 02 c0       	mov    eax,0xc002d330
c0018627:	80 f9 01             	cmp    cl,0x1
c001862a:	0f 86 af 01 00 00    	jbe    c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018630:	80 fa 09             	cmp    dl,0x9
c0018633:	0f 84 8f 01 00 00    	je     c00187c8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018639:	8d 4a f6             	lea    ecx,[edx-0xa]
c001863c:	80 f9 01             	cmp    cl,0x1
c001863f:	0f 86 9a 01 00 00    	jbe    c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018645:	b8 40 d3 02 c0       	mov    eax,0xc002d340
c001864a:	80 fa 0d             	cmp    dl,0xd
c001864d:	0f 84 8c 01 00 00    	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018653:	b8 50 d3 02 c0       	mov    eax,0xc002d350
c0018658:	80 fa 0e             	cmp    dl,0xe
c001865b:	0f 84 7e 01 00 00    	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018661:	b8 60 d3 02 c0       	mov    eax,0xc002d360
c0018666:	80 fa 0f             	cmp    dl,0xf
c0018669:	0f 84 70 01 00 00    	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001866f:	b8 40 d3 02 c0       	mov    eax,0xc002d340
c0018674:	80 fa 15             	cmp    dl,0x15
c0018677:	0f 84 62 01 00 00    	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001867d:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018680:	b8 60 d3 02 c0       	mov    eax,0xc002d360
c0018685:	80 f9 01             	cmp    cl,0x1
c0018688:	0f 86 51 01 00 00    	jbe    c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001868e:	80 fa 1a             	cmp    dl,0x1a
c0018691:	0f 84 37 01 00 00    	je     c00187ce <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018697:	80 fa 1c             	cmp    dl,0x1c
c001869a:	0f 84 34 01 00 00    	je     c00187d4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c00186a0:	80 fa 1d             	cmp    dl,0x1d
c00186a3:	0f 84 36 01 00 00    	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186a9:	b8 90 d3 02 c0       	mov    eax,0xc002d390
c00186ae:	80 fa 25             	cmp    dl,0x25
c00186b1:	0f 84 28 01 00 00    	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186b7:	8d 4a da             	lea    ecx,[edx-0x26]
c00186ba:	b8 80 d3 02 c0       	mov    eax,0xc002d380
c00186bf:	80 f9 01             	cmp    cl,0x1
c00186c2:	0f 86 17 01 00 00    	jbe    c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186c8:	b8 a0 d3 02 c0       	mov    eax,0xc002d3a0
c00186cd:	80 fa 2a             	cmp    dl,0x2a
c00186d0:	0f 84 09 01 00 00    	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186d6:	b8 90 d3 02 c0       	mov    eax,0xc002d390
c00186db:	80 fa 2c             	cmp    dl,0x2c
c00186de:	0f 84 fb 00 00 00    	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186e4:	b8 a0 d3 02 c0       	mov    eax,0xc002d3a0
c00186e9:	80 fa 2d             	cmp    dl,0x2d
c00186ec:	0f 84 ed 00 00 00    	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00186f2:	b8 70 d3 02 c0       	mov    eax,0xc002d370
c00186f7:	80 fa 2e             	cmp    dl,0x2e
c00186fa:	0f 84 df 00 00 00    	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018700:	b8 90 d3 02 c0       	mov    eax,0xc002d390
c0018705:	80 fa 2f             	cmp    dl,0x2f
c0018708:	0f 84 d1 00 00 00    	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001870e:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018711:	b8 80 d3 02 c0       	mov    eax,0xc002d380
c0018716:	80 f9 01             	cmp    cl,0x1
c0018719:	0f 86 c0 00 00 00    	jbe    c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001871f:	b8 b0 d3 02 c0       	mov    eax,0xc002d3b0
c0018724:	80 fa 37             	cmp    dl,0x37
c0018727:	0f 84 b2 00 00 00    	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001872d:	b8 c0 d3 02 c0       	mov    eax,0xc002d3c0
c0018732:	80 fa 3a             	cmp    dl,0x3a
c0018735:	0f 84 a4 00 00 00    	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001873b:	b8 d0 d3 02 c0       	mov    eax,0xc002d3d0
c0018740:	80 fa 3c             	cmp    dl,0x3c
c0018743:	0f 84 96 00 00 00    	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018749:	b8 e0 d3 02 c0       	mov    eax,0xc002d3e0
c001874e:	80 fa 3d             	cmp    dl,0x3d
c0018751:	0f 84 88 00 00 00    	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018757:	b8 c0 d3 02 c0       	mov    eax,0xc002d3c0
c001875c:	80 fa 3e             	cmp    dl,0x3e
c001875f:	74 7e                	je     c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018761:	8d 42 bb             	lea    eax,[edx-0x45]
c0018764:	3c 01                	cmp    al,0x1
c0018766:	76 72                	jbe    c00187da <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018768:	80 fa 3f             	cmp    dl,0x3f
c001876b:	74 6d                	je     c00187da <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c001876d:	80 fa 4a             	cmp    dl,0x4a
c0018770:	74 0a                	je     c001877c <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018772:	b8 82 b4 02 c0       	mov    eax,0xc002b482
c0018777:	80 fa 4d             	cmp    dl,0x4d
c001877a:	75 63                	jne    c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001877c:	b8 b0 d3 02 c0       	mov    eax,0xc002d3b0
c0018781:	c3                   	ret    
c0018782:	b8 82 b4 02 c0       	mov    eax,0xc002b482
c0018787:	80 f9 0b             	cmp    cl,0xb
c001878a:	75 0a                	jne    c0018796 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c001878c:	fe ca                	dec    dl
c001878e:	75 4f                	jne    c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018790:	b8 f0 d3 02 c0       	mov    eax,0xc002d3f0
c0018795:	c3                   	ret    
c0018796:	80 f9 0f             	cmp    cl,0xf
c0018799:	75 44                	jne    c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c001879b:	b8 00 d4 02 c0       	mov    eax,0xc002d400
c00187a0:	80 fa 02             	cmp    dl,0x2
c00187a3:	76 3a                	jbe    c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187a5:	8d 42 fd             	lea    eax,[edx-0x3]
c00187a8:	3c 01                	cmp    al,0x1
c00187aa:	76 0a                	jbe    c00187b6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c00187ac:	b8 82 b4 02 c0       	mov    eax,0xc002b482
c00187b1:	80 fa 06             	cmp    dl,0x6
c00187b4:	75 29                	jne    c00187df <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c00187b6:	b8 10 d4 02 c0       	mov    eax,0xc002d410
c00187bb:	c3                   	ret    
c00187bc:	b8 f0 d2 02 c0       	mov    eax,0xc002d2f0
c00187c1:	c3                   	ret    
c00187c2:	b8 20 d3 02 c0       	mov    eax,0xc002d320
c00187c7:	c3                   	ret    
c00187c8:	b8 40 d3 02 c0       	mov    eax,0xc002d340
c00187cd:	c3                   	ret    
c00187ce:	b8 70 d3 02 c0       	mov    eax,0xc002d370
c00187d3:	c3                   	ret    
c00187d4:	b8 80 d3 02 c0       	mov    eax,0xc002d380
c00187d9:	c3                   	ret    
c00187da:	b8 d0 d3 02 c0       	mov    eax,0xc002d3d0
c00187df:	c3                   	ret    

c00187e0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c00187e0:	60                   	pusha  
c00187e1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00187e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187e9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00187ed:	9c                   	pushf  
c00187ee:	fa                   	cli    
c00187ef:	0f 09                	wbinvd 
c00187f1:	0f 30                	wrmsr  
c00187f3:	9d                   	popf   
c00187f4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00187f8:	89 02                	mov    DWORD PTR [edx],eax
c00187fa:	61                   	popa   
c00187fb:	c3                   	ret    

c00187fc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c00187fc:	60                   	pusha  
c00187fd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018801:	9c                   	pushf  
c0018802:	fa                   	cli    
c0018803:	0f 09                	wbinvd 
c0018805:	31 c0                	xor    eax,eax
c0018807:	31 d2                	xor    edx,edx
c0018809:	0f 32                	rdmsr  
c001880b:	9d                   	popf   
c001880c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018810:	89 02                	mov    DWORD PTR [edx],eax
c0018812:	61                   	popa   
c0018813:	c3                   	ret    

c0018814 <CPU::AMD_K6_writeback(int, int, int)>:
c0018814:	56                   	push   esi
c0018815:	53                   	push   ebx
c0018816:	83 ec 10             	sub    esp,0x10
c0018819:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001881d:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018822:	75 5d                	jne    c0018881 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018824:	83 f8 08             	cmp    eax,0x8
c0018827:	75 09                	jne    c0018832 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018829:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c001882e:	7e 13                	jle    c0018843 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018830:	eb 30                	jmp    c0018862 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018832:	83 f8 06             	cmp    eax,0x6
c0018835:	7c 4a                	jl     c0018881 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018837:	83 f8 07             	cmp    eax,0x7
c001883a:	7e 07                	jle    c0018843 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c001883c:	83 f8 09             	cmp    eax,0x9
c001883f:	74 21                	je     c0018862 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018841:	eb 3e                	jmp    c0018881 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018843:	89 e6                	mov    esi,esp
c0018845:	8b 1d 48 e0 02 c0    	mov    ebx,DWORD PTR ds:0xc002e048
c001884b:	56                   	push   esi
c001884c:	c1 eb 15             	shr    ebx,0x15
c001884f:	68 82 00 00 c0       	push   0xc0000082
c0018854:	83 e3 7e             	and    ebx,0x7e
c0018857:	e8 a0 ff ff ff       	call   c00187fc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001885c:	56                   	push   esi
c001885d:	6a 00                	push   0x0
c001885f:	53                   	push   ebx
c0018860:	eb 12                	jmp    c0018874 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018862:	89 e3                	mov    ebx,esp
c0018864:	53                   	push   ebx
c0018865:	68 82 00 00 c0       	push   0xc0000082
c001886a:	e8 8d ff ff ff       	call   c00187fc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c001886f:	53                   	push   ebx
c0018870:	6a 00                	push   0x0
c0018872:	6a 00                	push   0x0
c0018874:	68 82 00 00 c0       	push   0xc0000082
c0018879:	e8 62 ff ff ff       	call   c00187e0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c001887e:	83 c4 18             	add    esp,0x18
c0018881:	83 c4 10             	add    esp,0x10
c0018884:	5b                   	pop    ebx
c0018885:	5e                   	pop    esi
c0018886:	c3                   	ret    
c0018887:	90                   	nop

c0018888 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018888:	55                   	push   ebp
c0018889:	57                   	push   edi
c001888a:	56                   	push   esi
c001888b:	53                   	push   ebx
c001888c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018890:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018894:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018898:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001889c:	39 05 20 d5 02 c0    	cmp    DWORD PTR ds:0xc002d520,eax
c00188a2:	75 23                	jne    c00188c7 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c00188a4:	a1 4c 0b 03 c0       	mov    eax,ds:0xc0030b4c
c00188a9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00188ad:	89 06                	mov    DWORD PTR [esi],eax
c00188af:	a1 48 0b 03 c0       	mov    eax,ds:0xc0030b48
c00188b4:	89 07                	mov    DWORD PTR [edi],eax
c00188b6:	a1 44 0b 03 c0       	mov    eax,ds:0xc0030b44
c00188bb:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c00188be:	a1 40 0b 03 c0       	mov    eax,ds:0xc0030b40
c00188c3:	89 02                	mov    DWORD PTR [edx],eax
c00188c5:	eb 3f                	jmp    c0018906 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c00188c7:	31 c9                	xor    ecx,ecx
c00188c9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00188cd:	0f a2                	cpuid  
c00188cf:	89 06                	mov    DWORD PTR [esi],eax
c00188d1:	89 1f                	mov    DWORD PTR [edi],ebx
c00188d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188d7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c00188da:	89 10                	mov    DWORD PTR [eax],edx
c00188dc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00188e0:	a3 20 d5 02 c0       	mov    ds:0xc002d520,eax
c00188e5:	8b 06                	mov    eax,DWORD PTR [esi]
c00188e7:	a3 4c 0b 03 c0       	mov    ds:0xc0030b4c,eax
c00188ec:	8b 07                	mov    eax,DWORD PTR [edi]
c00188ee:	a3 48 0b 03 c0       	mov    ds:0xc0030b48,eax
c00188f3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00188f6:	a3 44 0b 03 c0       	mov    ds:0xc0030b44,eax
c00188fb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188ff:	8b 00                	mov    eax,DWORD PTR [eax]
c0018901:	a3 40 0b 03 c0       	mov    ds:0xc0030b40,eax
c0018906:	5b                   	pop    ebx
c0018907:	5e                   	pop    esi
c0018908:	5f                   	pop    edi
c0018909:	5d                   	pop    ebp
c001890a:	c3                   	ret    
c001890b:	90                   	nop

c001890c <CPU::cpuidCheckEDX(unsigned int)>:
c001890c:	83 ec 10             	sub    esp,0x10
c001890f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018913:	50                   	push   eax
c0018914:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018918:	50                   	push   eax
c0018919:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001891d:	50                   	push   eax
c001891e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018922:	50                   	push   eax
c0018923:	6a 01                	push   0x1
c0018925:	e8 5e ff ff ff       	call   c0018888 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c001892a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001892e:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018932:	0f 95 c0             	setne  al
c0018935:	83 c4 24             	add    esp,0x24
c0018938:	c3                   	ret    
c0018939:	90                   	nop

c001893a <CPU::cpuidCheckECX(unsigned int)>:
c001893a:	83 ec 10             	sub    esp,0x10
c001893d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018941:	50                   	push   eax
c0018942:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018946:	50                   	push   eax
c0018947:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001894b:	50                   	push   eax
c001894c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018950:	50                   	push   eax
c0018951:	6a 01                	push   0x1
c0018953:	e8 30 ff ff ff       	call   c0018888 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018958:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001895c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018960:	0f 95 c0             	setne  al
c0018963:	83 c4 24             	add    esp,0x24
c0018966:	c3                   	ret    
c0018967:	90                   	nop

c0018968 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018968:	83 ec 10             	sub    esp,0x10
c001896b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001896f:	50                   	push   eax
c0018970:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018974:	50                   	push   eax
c0018975:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018979:	50                   	push   eax
c001897a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001897e:	50                   	push   eax
c001897f:	6a 07                	push   0x7
c0018981:	e8 02 ff ff ff       	call   c0018888 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018986:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001898a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001898e:	0f 95 c0             	setne  al
c0018991:	83 c4 24             	add    esp,0x24
c0018994:	c3                   	ret    
c0018995:	90                   	nop

c0018996 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018996:	83 ec 10             	sub    esp,0x10
c0018999:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001899d:	50                   	push   eax
c001899e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189a2:	50                   	push   eax
c00189a3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189a7:	50                   	push   eax
c00189a8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00189ac:	50                   	push   eax
c00189ad:	6a 07                	push   0x7
c00189af:	e8 d4 fe ff ff       	call   c0018888 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00189b4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00189b8:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c00189bc:	0f 95 c0             	setne  al
c00189bf:	83 c4 24             	add    esp,0x24
c00189c2:	c3                   	ret    
c00189c3:	90                   	nop

c00189c4 <CPU::CPU()>:
c00189c4:	83 ec 0c             	sub    esp,0xc
c00189c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189cb:	83 ec 08             	sub    esp,0x8
c00189ce:	68 82 b4 02 c0       	push   0xc002b482
c00189d3:	50                   	push   eax
c00189d4:	e8 af b7 ff ff       	call   c0014188 <Device::Device(char const*)>
c00189d9:	83 c4 10             	add    esp,0x10
c00189dc:	ba 5c b5 02 c0       	mov    edx,0xc002b55c
c00189e1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189e5:	89 10                	mov    DWORD PTR [eax],edx
c00189e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189eb:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00189f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00189f9:	05 78 01 00 00       	add    eax,0x178
c00189fe:	83 ec 0c             	sub    esp,0xc
c0018a01:	50                   	push   eax
c0018a02:	e8 51 66 ff ff       	call   c000f058 <GDT::GDT()>
c0018a07:	83 c4 10             	add    esp,0x10
c0018a0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a0e:	05 7c 09 00 00       	add    eax,0x97c
c0018a13:	83 ec 0c             	sub    esp,0xc
c0018a16:	50                   	push   eax
c0018a17:	e8 9e 68 ff ff       	call   c000f2ba <IDT::IDT()>
c0018a1c:	83 c4 10             	add    esp,0x10
c0018a1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a23:	05 7c 11 00 00       	add    eax,0x117c
c0018a28:	83 ec 0c             	sub    esp,0xc
c0018a2b:	50                   	push   eax
c0018a2c:	e8 81 8a ff ff       	call   c00114b2 <TSS::TSS()>
c0018a31:	83 c4 10             	add    esp,0x10
c0018a34:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a38:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0018a3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a43:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0018a4d:	90                   	nop
c0018a4e:	83 c4 0c             	add    esp,0xc
c0018a51:	c3                   	ret    

c0018a52 <CPU::displayFeatures()>:
c0018a52:	53                   	push   ebx
c0018a53:	83 ec 10             	sub    esp,0x10
c0018a56:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0018a5a:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0018a60:	68 90 b1 02 c0       	push   0xc002b190
c0018a65:	e8 07 a1 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018a6a:	59                   	pop    ecx
c0018a6b:	58                   	pop    eax
c0018a6c:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c0018a72:	50                   	push   eax
c0018a73:	68 a1 b1 02 c0       	push   0xc002b1a1
c0018a78:	e8 f4 a0 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018a7d:	58                   	pop    eax
c0018a7e:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a84:	5a                   	pop    edx
c0018a85:	c1 e8 0e             	shr    eax,0xe
c0018a88:	0f b6 c0             	movzx  eax,al
c0018a8b:	50                   	push   eax
c0018a8c:	68 b2 b1 02 c0       	push   0xc002b1b2
c0018a91:	e8 db a0 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018a96:	59                   	pop    ecx
c0018a97:	58                   	pop    eax
c0018a98:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0018a9e:	66 c1 e8 06          	shr    ax,0x6
c0018aa2:	0f b6 c0             	movzx  eax,al
c0018aa5:	50                   	push   eax
c0018aa6:	68 c3 b1 02 c0       	push   0xc002b1c3
c0018aab:	e8 c1 a0 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018ab0:	c7 04 24 70 b6 02 c0 	mov    DWORD PTR [esp],0xc002b670
c0018ab7:	e8 b5 a0 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018abc:	83 c4 10             	add    esp,0x10
c0018abf:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c0018ac4:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c0018acb:	74 05                	je     c0018ad2 <CPU::displayFeatures()+0x80>
c0018acd:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c0018ad2:	52                   	push   edx
c0018ad3:	52                   	push   edx
c0018ad4:	50                   	push   eax
c0018ad5:	68 d4 b1 02 c0       	push   0xc002b1d4
c0018ada:	e8 92 a0 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018adf:	83 c4 10             	add    esp,0x10
c0018ae2:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c0018ae7:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0018aee:	78 05                	js     c0018af5 <CPU::displayFeatures()+0xa3>
c0018af0:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c0018af5:	51                   	push   ecx
c0018af6:	51                   	push   ecx
c0018af7:	50                   	push   eax
c0018af8:	68 eb b1 02 c0       	push   0xc002b1eb
c0018afd:	e8 6f a0 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018b02:	83 c4 10             	add    esp,0x10
c0018b05:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c0018b0a:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c0018b11:	75 05                	jne    c0018b18 <CPU::displayFeatures()+0xc6>
c0018b13:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c0018b18:	52                   	push   edx
c0018b19:	52                   	push   edx
c0018b1a:	50                   	push   eax
c0018b1b:	68 02 b2 02 c0       	push   0xc002b202
c0018b20:	e8 4c a0 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018b25:	83 c4 10             	add    esp,0x10
c0018b28:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c0018b2d:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c0018b34:	75 05                	jne    c0018b3b <CPU::displayFeatures()+0xe9>
c0018b36:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c0018b3b:	51                   	push   ecx
c0018b3c:	51                   	push   ecx
c0018b3d:	50                   	push   eax
c0018b3e:	68 19 b2 02 c0       	push   0xc002b219
c0018b43:	e8 29 a0 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018b48:	83 c4 10             	add    esp,0x10
c0018b4b:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c0018b50:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0018b57:	75 05                	jne    c0018b5e <CPU::displayFeatures()+0x10c>
c0018b59:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c0018b5e:	52                   	push   edx
c0018b5f:	52                   	push   edx
c0018b60:	50                   	push   eax
c0018b61:	68 30 b2 02 c0       	push   0xc002b230
c0018b66:	e8 06 a0 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018b6b:	83 c4 10             	add    esp,0x10
c0018b6e:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c0018b73:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c0018b7a:	75 05                	jne    c0018b81 <CPU::displayFeatures()+0x12f>
c0018b7c:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c0018b81:	51                   	push   ecx
c0018b82:	51                   	push   ecx
c0018b83:	50                   	push   eax
c0018b84:	68 47 b2 02 c0       	push   0xc002b247
c0018b89:	e8 e3 9f ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018b8e:	83 c4 10             	add    esp,0x10
c0018b91:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c0018b96:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c0018b9d:	75 05                	jne    c0018ba4 <CPU::displayFeatures()+0x152>
c0018b9f:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c0018ba4:	52                   	push   edx
c0018ba5:	52                   	push   edx
c0018ba6:	50                   	push   eax
c0018ba7:	68 5e b2 02 c0       	push   0xc002b25e
c0018bac:	e8 c0 9f ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018bb1:	83 c4 10             	add    esp,0x10
c0018bb4:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c0018bb9:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c0018bc0:	75 05                	jne    c0018bc7 <CPU::displayFeatures()+0x175>
c0018bc2:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c0018bc7:	51                   	push   ecx
c0018bc8:	51                   	push   ecx
c0018bc9:	50                   	push   eax
c0018bca:	68 75 b2 02 c0       	push   0xc002b275
c0018bcf:	e8 9d 9f ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018bd4:	83 c4 10             	add    esp,0x10
c0018bd7:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c0018bdc:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c0018be3:	75 05                	jne    c0018bea <CPU::displayFeatures()+0x198>
c0018be5:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c0018bea:	52                   	push   edx
c0018beb:	52                   	push   edx
c0018bec:	50                   	push   eax
c0018bed:	68 8c b2 02 c0       	push   0xc002b28c
c0018bf2:	e8 7a 9f ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018bf7:	83 c4 10             	add    esp,0x10
c0018bfa:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c0018bff:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0018c06:	75 05                	jne    c0018c0d <CPU::displayFeatures()+0x1bb>
c0018c08:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c0018c0d:	51                   	push   ecx
c0018c0e:	51                   	push   ecx
c0018c0f:	50                   	push   eax
c0018c10:	68 a3 b2 02 c0       	push   0xc002b2a3
c0018c15:	e8 57 9f ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018c1a:	83 c4 10             	add    esp,0x10
c0018c1d:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c0018c22:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0018c29:	75 05                	jne    c0018c30 <CPU::displayFeatures()+0x1de>
c0018c2b:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c0018c30:	52                   	push   edx
c0018c31:	52                   	push   edx
c0018c32:	50                   	push   eax
c0018c33:	68 ba b2 02 c0       	push   0xc002b2ba
c0018c38:	e8 34 9f ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018c3d:	83 c4 10             	add    esp,0x10
c0018c40:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c0018c45:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0018c4c:	75 05                	jne    c0018c53 <CPU::displayFeatures()+0x201>
c0018c4e:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c0018c53:	51                   	push   ecx
c0018c54:	51                   	push   ecx
c0018c55:	50                   	push   eax
c0018c56:	68 d1 b2 02 c0       	push   0xc002b2d1
c0018c5b:	e8 11 9f ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018c60:	83 c4 10             	add    esp,0x10
c0018c63:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c0018c68:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0018c6f:	75 05                	jne    c0018c76 <CPU::displayFeatures()+0x224>
c0018c71:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c0018c76:	52                   	push   edx
c0018c77:	52                   	push   edx
c0018c78:	50                   	push   eax
c0018c79:	68 e8 b2 02 c0       	push   0xc002b2e8
c0018c7e:	e8 ee 9e ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018c83:	83 c4 10             	add    esp,0x10
c0018c86:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c0018c8b:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c0018c92:	78 05                	js     c0018c99 <CPU::displayFeatures()+0x247>
c0018c94:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c0018c99:	51                   	push   ecx
c0018c9a:	51                   	push   ecx
c0018c9b:	50                   	push   eax
c0018c9c:	68 ff b2 02 c0       	push   0xc002b2ff
c0018ca1:	e8 cb 9e ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018ca6:	83 c4 10             	add    esp,0x10
c0018ca9:	b8 52 9c 02 c0       	mov    eax,0xc0029c52
c0018cae:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c0018cb5:	75 05                	jne    c0018cbc <CPU::displayFeatures()+0x26a>
c0018cb7:	b8 56 9c 02 c0       	mov    eax,0xc0029c56
c0018cbc:	52                   	push   edx
c0018cbd:	52                   	push   edx
c0018cbe:	50                   	push   eax
c0018cbf:	68 16 b3 02 c0       	push   0xc002b316
c0018cc4:	e8 a8 9e ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0018cc9:	83 c4 18             	add    esp,0x18
c0018ccc:	5b                   	pop    ebx
c0018ccd:	c3                   	ret    

c0018cce <CPU::detectFeatures()>:
c0018cce:	55                   	push   ebp
c0018ccf:	57                   	push   edi
c0018cd0:	56                   	push   esi
c0018cd1:	53                   	push   ebx
c0018cd2:	83 ec 50             	sub    esp,0x50
c0018cd5:	8b 5c 24 64          	mov    ebx,DWORD PTR [esp+0x64]
c0018cd9:	81 a3 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x1190],0xfff80700
c0018ce3:	c6 83 94 11 00 00 01 	mov    BYTE PTR [ebx+0x1194],0x1
c0018cea:	8d bb 5f 01 00 00    	lea    edi,[ebx+0x15f]
c0018cf0:	6a 0d                	push   0xd
c0018cf2:	6a 00                	push   0x0
c0018cf4:	57                   	push   edi
c0018cf5:	e8 7e 7a fe ff       	call   c0000778 <memset>
c0018cfa:	83 c4 10             	add    esp,0x10
c0018cfd:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0018d02:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0018d09:	0f 84 20 09 00 00    	je     c001962f <CPU::detectFeatures()+0x961>
c0018d0f:	83 ec 0c             	sub    esp,0xc
c0018d12:	6a 10                	push   0x10
c0018d14:	e8 f3 fb ff ff       	call   c001890c <CPU::cpuidCheckEDX(unsigned int)>
c0018d19:	83 e0 01             	and    eax,0x1
c0018d1c:	8d 14 00             	lea    edx,[eax+eax*1]
c0018d1f:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d25:	83 e0 fd             	and    eax,0xfffffffd
c0018d28:	09 d0                	or     eax,edx
c0018d2a:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d30:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0018d37:	e8 d0 fb ff ff       	call   c001890c <CPU::cpuidCheckEDX(unsigned int)>
c0018d3c:	83 e0 01             	and    eax,0x1
c0018d3f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c0018d46:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d4c:	83 e0 fb             	and    eax,0xfffffffb
c0018d4f:	09 d0                	or     eax,edx
c0018d51:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d57:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0018d5e:	e8 a9 fb ff ff       	call   c001890c <CPU::cpuidCheckEDX(unsigned int)>
c0018d63:	83 e0 01             	and    eax,0x1
c0018d66:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0018d6d:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d73:	83 e0 f7             	and    eax,0xfffffff7
c0018d76:	09 d0                	or     eax,edx
c0018d78:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018d7e:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c0018d85:	e8 82 fb ff ff       	call   c001890c <CPU::cpuidCheckEDX(unsigned int)>
c0018d8a:	83 e0 01             	and    eax,0x1
c0018d8d:	c1 e0 04             	shl    eax,0x4
c0018d90:	88 c2                	mov    dl,al
c0018d92:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018d98:	83 e0 ef             	and    eax,0xffffffef
c0018d9b:	09 d0                	or     eax,edx
c0018d9d:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018da3:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0018daa:	e8 5d fb ff ff       	call   c001890c <CPU::cpuidCheckEDX(unsigned int)>
c0018daf:	83 e0 01             	and    eax,0x1
c0018db2:	c1 e0 05             	shl    eax,0x5
c0018db5:	88 c2                	mov    dl,al
c0018db7:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0018dbd:	83 e0 df             	and    eax,0xffffffdf
c0018dc0:	09 d0                	or     eax,edx
c0018dc2:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c0018dc8:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0018dcf:	e8 38 fb ff ff       	call   c001890c <CPU::cpuidCheckEDX(unsigned int)>
c0018dd4:	83 e0 01             	and    eax,0x1
c0018dd7:	8d 14 00             	lea    edx,[eax+eax*1]
c0018dda:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0018de0:	83 e0 fd             	and    eax,0xfffffffd
c0018de3:	09 d0                	or     eax,edx
c0018de5:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c0018deb:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c0018df2:	e8 15 fb ff ff       	call   c001890c <CPU::cpuidCheckEDX(unsigned int)>
c0018df7:	83 e0 01             	and    eax,0x1
c0018dfa:	c1 e0 06             	shl    eax,0x6
c0018dfd:	88 c2                	mov    dl,al
c0018dff:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0018e05:	83 e0 bf             	and    eax,0xffffffbf
c0018e08:	09 d0                	or     eax,edx
c0018e0a:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0018e10:	58                   	pop    eax
c0018e11:	8d 74 24 28          	lea    esi,[esp+0x28]
c0018e15:	56                   	push   esi
c0018e16:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0018e1a:	55                   	push   ebp
c0018e1b:	8d 44 24 28          	lea    eax,[esp+0x28]
c0018e1f:	50                   	push   eax
c0018e20:	8d 54 24 28          	lea    edx,[esp+0x28]
c0018e24:	52                   	push   edx
c0018e25:	6a 00                	push   0x0
c0018e27:	e8 5c fa ff ff       	call   c0018888 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018e2c:	83 c4 1c             	add    esp,0x1c
c0018e2f:	6a 04                	push   0x4
c0018e31:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0018e35:	50                   	push   eax
c0018e36:	57                   	push   edi
c0018e37:	e8 08 79 fe ff       	call   c0000744 <memcpy>
c0018e3c:	83 c4 0c             	add    esp,0xc
c0018e3f:	8d 83 63 01 00 00    	lea    eax,[ebx+0x163]
c0018e45:	6a 04                	push   0x4
c0018e47:	56                   	push   esi
c0018e48:	50                   	push   eax
c0018e49:	e8 f6 78 fe ff       	call   c0000744 <memcpy>
c0018e4e:	83 c4 0c             	add    esp,0xc
c0018e51:	8d 83 67 01 00 00    	lea    eax,[ebx+0x167]
c0018e57:	6a 04                	push   0x4
c0018e59:	55                   	push   ebp
c0018e5a:	50                   	push   eax
c0018e5b:	e8 e4 78 fe ff       	call   c0000744 <memcpy>
c0018e60:	58                   	pop    eax
c0018e61:	5a                   	pop    edx
c0018e62:	68 2d b3 02 c0       	push   0xc002b32d
c0018e67:	57                   	push   edi
c0018e68:	e8 53 7a fe ff       	call   c00008c0 <strcmp>
c0018e6d:	83 c4 10             	add    esp,0x10
c0018e70:	85 c0                	test   eax,eax
c0018e72:	75 0f                	jne    c0018e83 <CPU::detectFeatures()+0x1b5>
c0018e74:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c0018e7e:	e9 22 02 00 00       	jmp    c00190a5 <CPU::detectFeatures()+0x3d7>
c0018e83:	50                   	push   eax
c0018e84:	50                   	push   eax
c0018e85:	68 3a b3 02 c0       	push   0xc002b33a
c0018e8a:	57                   	push   edi
c0018e8b:	e8 30 7a fe ff       	call   c00008c0 <strcmp>
c0018e90:	83 c4 10             	add    esp,0x10
c0018e93:	85 c0                	test   eax,eax
c0018e95:	74 dd                	je     c0018e74 <CPU::detectFeatures()+0x1a6>
c0018e97:	51                   	push   ecx
c0018e98:	51                   	push   ecx
c0018e99:	68 47 b3 02 c0       	push   0xc002b347
c0018e9e:	57                   	push   edi
c0018e9f:	e8 1c 7a fe ff       	call   c00008c0 <strcmp>
c0018ea4:	83 c4 10             	add    esp,0x10
c0018ea7:	85 c0                	test   eax,eax
c0018ea9:	74 2a                	je     c0018ed5 <CPU::detectFeatures()+0x207>
c0018eab:	52                   	push   edx
c0018eac:	52                   	push   edx
c0018ead:	68 54 b3 02 c0       	push   0xc002b354
c0018eb2:	57                   	push   edi
c0018eb3:	e8 08 7a fe ff       	call   c00008c0 <strcmp>
c0018eb8:	83 c4 10             	add    esp,0x10
c0018ebb:	85 c0                	test   eax,eax
c0018ebd:	74 16                	je     c0018ed5 <CPU::detectFeatures()+0x207>
c0018ebf:	50                   	push   eax
c0018ec0:	50                   	push   eax
c0018ec1:	68 61 b3 02 c0       	push   0xc002b361
c0018ec6:	57                   	push   edi
c0018ec7:	e8 f4 79 fe ff       	call   c00008c0 <strcmp>
c0018ecc:	83 c4 10             	add    esp,0x10
c0018ecf:	85 c0                	test   eax,eax
c0018ed1:	74 48                	je     c0018f1b <CPU::detectFeatures()+0x24d>
c0018ed3:	eb 0f                	jmp    c0018ee4 <CPU::detectFeatures()+0x216>
c0018ed5:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0018edf:	e9 c1 01 00 00       	jmp    c00190a5 <CPU::detectFeatures()+0x3d7>
c0018ee4:	50                   	push   eax
c0018ee5:	50                   	push   eax
c0018ee6:	68 6e b3 02 c0       	push   0xc002b36e
c0018eeb:	57                   	push   edi
c0018eec:	e8 cf 79 fe ff       	call   c00008c0 <strcmp>
c0018ef1:	83 c4 10             	add    esp,0x10
c0018ef4:	85 c0                	test   eax,eax
c0018ef6:	74 23                	je     c0018f1b <CPU::detectFeatures()+0x24d>
c0018ef8:	50                   	push   eax
c0018ef9:	50                   	push   eax
c0018efa:	68 7b b3 02 c0       	push   0xc002b37b
c0018eff:	57                   	push   edi
c0018f00:	e8 bb 79 fe ff       	call   c00008c0 <strcmp>
c0018f05:	83 c4 10             	add    esp,0x10
c0018f08:	85 c0                	test   eax,eax
c0018f0a:	75 1e                	jne    c0018f2a <CPU::detectFeatures()+0x25c>
c0018f0c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0018f16:	e9 8a 01 00 00       	jmp    c00190a5 <CPU::detectFeatures()+0x3d7>
c0018f1b:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c0018f25:	e9 7b 01 00 00       	jmp    c00190a5 <CPU::detectFeatures()+0x3d7>
c0018f2a:	50                   	push   eax
c0018f2b:	50                   	push   eax
c0018f2c:	68 88 b3 02 c0       	push   0xc002b388
c0018f31:	57                   	push   edi
c0018f32:	e8 89 79 fe ff       	call   c00008c0 <strcmp>
c0018f37:	83 c4 10             	add    esp,0x10
c0018f3a:	85 c0                	test   eax,eax
c0018f3c:	75 0f                	jne    c0018f4d <CPU::detectFeatures()+0x27f>
c0018f3e:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0018f48:	e9 58 01 00 00       	jmp    c00190a5 <CPU::detectFeatures()+0x3d7>
c0018f4d:	50                   	push   eax
c0018f4e:	50                   	push   eax
c0018f4f:	68 47 b3 02 c0       	push   0xc002b347
c0018f54:	57                   	push   edi
c0018f55:	e8 66 79 fe ff       	call   c00008c0 <strcmp>
c0018f5a:	83 c4 10             	add    esp,0x10
c0018f5d:	85 c0                	test   eax,eax
c0018f5f:	75 0f                	jne    c0018f70 <CPU::detectFeatures()+0x2a2>
c0018f61:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c0018f6b:	e9 35 01 00 00       	jmp    c00190a5 <CPU::detectFeatures()+0x3d7>
c0018f70:	50                   	push   eax
c0018f71:	50                   	push   eax
c0018f72:	68 95 b3 02 c0       	push   0xc002b395
c0018f77:	57                   	push   edi
c0018f78:	e8 43 79 fe ff       	call   c00008c0 <strcmp>
c0018f7d:	83 c4 10             	add    esp,0x10
c0018f80:	85 c0                	test   eax,eax
c0018f82:	75 0f                	jne    c0018f93 <CPU::detectFeatures()+0x2c5>
c0018f84:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c0018f8e:	e9 12 01 00 00       	jmp    c00190a5 <CPU::detectFeatures()+0x3d7>
c0018f93:	51                   	push   ecx
c0018f94:	51                   	push   ecx
c0018f95:	68 a2 b3 02 c0       	push   0xc002b3a2
c0018f9a:	57                   	push   edi
c0018f9b:	e8 20 79 fe ff       	call   c00008c0 <strcmp>
c0018fa0:	83 c4 10             	add    esp,0x10
c0018fa3:	85 c0                	test   eax,eax
c0018fa5:	75 0f                	jne    c0018fb6 <CPU::detectFeatures()+0x2e8>
c0018fa7:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c0018fb1:	e9 ef 00 00 00       	jmp    c00190a5 <CPU::detectFeatures()+0x3d7>
c0018fb6:	52                   	push   edx
c0018fb7:	52                   	push   edx
c0018fb8:	68 af b3 02 c0       	push   0xc002b3af
c0018fbd:	57                   	push   edi
c0018fbe:	e8 fd 78 fe ff       	call   c00008c0 <strcmp>
c0018fc3:	83 c4 10             	add    esp,0x10
c0018fc6:	85 c0                	test   eax,eax
c0018fc8:	75 0f                	jne    c0018fd9 <CPU::detectFeatures()+0x30b>
c0018fca:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c0018fd4:	e9 cc 00 00 00       	jmp    c00190a5 <CPU::detectFeatures()+0x3d7>
c0018fd9:	50                   	push   eax
c0018fda:	50                   	push   eax
c0018fdb:	68 bc b3 02 c0       	push   0xc002b3bc
c0018fe0:	57                   	push   edi
c0018fe1:	e8 da 78 fe ff       	call   c00008c0 <strcmp>
c0018fe6:	83 c4 10             	add    esp,0x10
c0018fe9:	85 c0                	test   eax,eax
c0018feb:	75 0f                	jne    c0018ffc <CPU::detectFeatures()+0x32e>
c0018fed:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0018ff7:	e9 a9 00 00 00       	jmp    c00190a5 <CPU::detectFeatures()+0x3d7>
c0018ffc:	50                   	push   eax
c0018ffd:	50                   	push   eax
c0018ffe:	68 c9 b3 02 c0       	push   0xc002b3c9
c0019003:	57                   	push   edi
c0019004:	e8 b7 78 fe ff       	call   c00008c0 <strcmp>
c0019009:	83 c4 10             	add    esp,0x10
c001900c:	85 c0                	test   eax,eax
c001900e:	75 0f                	jne    c001901f <CPU::detectFeatures()+0x351>
c0019010:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c001901a:	e9 86 00 00 00       	jmp    c00190a5 <CPU::detectFeatures()+0x3d7>
c001901f:	50                   	push   eax
c0019020:	50                   	push   eax
c0019021:	68 d6 b3 02 c0       	push   0xc002b3d6
c0019026:	57                   	push   edi
c0019027:	e8 94 78 fe ff       	call   c00008c0 <strcmp>
c001902c:	83 c4 10             	add    esp,0x10
c001902f:	85 c0                	test   eax,eax
c0019031:	75 0c                	jne    c001903f <CPU::detectFeatures()+0x371>
c0019033:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c001903d:	eb 66                	jmp    c00190a5 <CPU::detectFeatures()+0x3d7>
c001903f:	50                   	push   eax
c0019040:	50                   	push   eax
c0019041:	68 e3 b3 02 c0       	push   0xc002b3e3
c0019046:	57                   	push   edi
c0019047:	e8 74 78 fe ff       	call   c00008c0 <strcmp>
c001904c:	83 c4 10             	add    esp,0x10
c001904f:	85 c0                	test   eax,eax
c0019051:	75 0c                	jne    c001905f <CPU::detectFeatures()+0x391>
c0019053:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c001905d:	eb 46                	jmp    c00190a5 <CPU::detectFeatures()+0x3d7>
c001905f:	50                   	push   eax
c0019060:	50                   	push   eax
c0019061:	68 f0 b3 02 c0       	push   0xc002b3f0
c0019066:	57                   	push   edi
c0019067:	e8 54 78 fe ff       	call   c00008c0 <strcmp>
c001906c:	83 c4 10             	add    esp,0x10
c001906f:	85 c0                	test   eax,eax
c0019071:	74 e0                	je     c0019053 <CPU::detectFeatures()+0x385>
c0019073:	50                   	push   eax
c0019074:	50                   	push   eax
c0019075:	68 fd b3 02 c0       	push   0xc002b3fd
c001907a:	57                   	push   edi
c001907b:	e8 40 78 fe ff       	call   c00008c0 <strcmp>
c0019080:	83 c4 10             	add    esp,0x10
c0019083:	85 c0                	test   eax,eax
c0019085:	74 cc                	je     c0019053 <CPU::detectFeatures()+0x385>
c0019087:	51                   	push   ecx
c0019088:	51                   	push   ecx
c0019089:	68 0a b4 02 c0       	push   0xc002b40a
c001908e:	57                   	push   edi
c001908f:	e8 2c 78 fe ff       	call   c00008c0 <strcmp>
c0019094:	83 c4 10             	add    esp,0x10
c0019097:	85 c0                	test   eax,eax
c0019099:	74 b8                	je     c0019053 <CPU::detectFeatures()+0x385>
c001909b:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00190a5:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00190aa:	0f 86 be 00 00 00    	jbe    c001916e <CPU::detectFeatures()+0x4a0>
c00190b0:	83 ec 0c             	sub    esp,0xc
c00190b3:	68 80 00 00 00       	push   0x80
c00190b8:	e8 ab f8 ff ff       	call   c0018968 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00190bd:	83 e0 01             	and    eax,0x1
c00190c0:	c1 e0 06             	shl    eax,0x6
c00190c3:	88 c2                	mov    dl,al
c00190c5:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c00190cb:	83 e0 bf             	and    eax,0xffffffbf
c00190ce:	09 d0                	or     eax,edx
c00190d0:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c00190d6:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00190dd:	e8 86 f8 ff ff       	call   c0018968 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00190e2:	83 e0 01             	and    eax,0x1
c00190e5:	c1 e0 04             	shl    eax,0x4
c00190e8:	88 c2                	mov    dl,al
c00190ea:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c00190f0:	83 e0 ef             	and    eax,0xffffffef
c00190f3:	09 d0                	or     eax,edx
c00190f5:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c00190fb:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c0019102:	e8 61 f8 ff ff       	call   c0018968 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019107:	c1 e0 07             	shl    eax,0x7
c001910a:	88 c2                	mov    dl,al
c001910c:	8a 83 90 11 00 00    	mov    al,BYTE PTR [ebx+0x1190]
c0019112:	83 e0 7f             	and    eax,0x7f
c0019115:	09 d0                	or     eax,edx
c0019117:	88 83 90 11 00 00    	mov    BYTE PTR [ebx+0x1190],al
c001911d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0019124:	e8 6d f8 ff ff       	call   c0018996 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019129:	83 e0 01             	and    eax,0x1
c001912c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0019133:	8a 83 91 11 00 00    	mov    al,BYTE PTR [ebx+0x1191]
c0019139:	83 e0 f7             	and    eax,0xfffffff7
c001913c:	09 d0                	or     eax,edx
c001913e:	88 83 91 11 00 00    	mov    BYTE PTR [ebx+0x1191],al
c0019144:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c001914b:	e8 46 f8 ff ff       	call   c0018996 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019150:	83 c4 10             	add    esp,0x10
c0019153:	83 e0 01             	and    eax,0x1
c0019156:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001915d:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c0019163:	83 e0 fb             	and    eax,0xfffffffb
c0019166:	09 d0                	or     eax,edx
c0019168:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c001916e:	83 ec 0c             	sub    esp,0xc
c0019171:	56                   	push   esi
c0019172:	55                   	push   ebp
c0019173:	8d 7c 24 28          	lea    edi,[esp+0x28]
c0019177:	57                   	push   edi
c0019178:	8d 44 24 28          	lea    eax,[esp+0x28]
c001917c:	50                   	push   eax
c001917d:	6a 01                	push   0x1
c001917f:	e8 04 f7 ff ff       	call   c0018888 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019184:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0019188:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c001918e:	88 ca                	mov    dl,cl
c0019190:	83 e0 f0             	and    eax,0xfffffff0
c0019193:	83 e2 0f             	and    edx,0xf
c0019196:	09 d0                	or     eax,edx
c0019198:	88 ca                	mov    dl,cl
c001919a:	88 83 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],al
c00191a0:	c0 ea 04             	shr    dl,0x4
c00191a3:	88 54 24 2f          	mov    BYTE PTR [esp+0x2f],dl
c00191a7:	0f b6 c2             	movzx  eax,dl
c00191aa:	83 c4 20             	add    esp,0x20
c00191ad:	c1 e0 06             	shl    eax,0x6
c00191b0:	89 c5                	mov    ebp,eax
c00191b2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00191b8:	66 25 3f c0          	and    ax,0xc03f
c00191bc:	09 e8                	or     eax,ebp
c00191be:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c00191c5:	89 c8                	mov    eax,ecx
c00191c7:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00191cd:	c1 e8 08             	shr    eax,0x8
c00191d0:	83 e2 3f             	and    edx,0x3f
c00191d3:	83 e0 0f             	and    eax,0xf
c00191d6:	89 c5                	mov    ebp,eax
c00191d8:	c1 e5 06             	shl    ebp,0x6
c00191db:	09 d5                	or     ebp,edx
c00191dd:	89 ea                	mov    edx,ebp
c00191df:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00191e5:	88 c2                	mov    dl,al
c00191e7:	c0 ea 02             	shr    dl,0x2
c00191ea:	89 d5                	mov    ebp,edx
c00191ec:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00191f2:	83 e2 c0             	and    edx,0xffffffc0
c00191f5:	09 d5                	or     ebp,edx
c00191f7:	89 ea                	mov    edx,ebp
c00191f9:	89 cd                	mov    ebp,ecx
c00191fb:	88 93 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],dl
c0019201:	c1 ed 0c             	shr    ebp,0xc
c0019204:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c001920a:	83 e5 03             	and    ebp,0x3
c001920d:	83 e2 cf             	and    edx,0xffffffcf
c0019210:	c1 e5 04             	shl    ebp,0x4
c0019213:	09 d5                	or     ebp,edx
c0019215:	3c 06                	cmp    al,0x6
c0019217:	89 ea                	mov    edx,ebp
c0019219:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c001921f:	74 04                	je     c0019225 <CPU::detectFeatures()+0x557>
c0019221:	3c 0f                	cmp    al,0xf
c0019223:	75 5c                	jne    c0019281 <CPU::detectFeatures()+0x5b3>
c0019225:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0019229:	89 cd                	mov    ebp,ecx
c001922b:	c1 ed 10             	shr    ebp,0x10
c001922e:	c1 e5 04             	shl    ebp,0x4
c0019231:	09 ea                	or     edx,ebp
c0019233:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0019239:	0f b6 d2             	movzx  edx,dl
c001923c:	66 81 e5 3f c0       	and    bp,0xc03f
c0019241:	c1 e2 06             	shl    edx,0x6
c0019244:	09 ea                	or     edx,ebp
c0019246:	3c 0f                	cmp    al,0xf
c0019248:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c001924f:	75 30                	jne    c0019281 <CPU::detectFeatures()+0x5b3>
c0019251:	8a 83 5d 01 00 00    	mov    al,BYTE PTR [ebx+0x15d]
c0019257:	c1 e9 14             	shr    ecx,0x14
c001925a:	83 e0 3f             	and    eax,0x3f
c001925d:	83 c1 0f             	add    ecx,0xf
c0019260:	88 ca                	mov    dl,cl
c0019262:	c0 e9 02             	shr    cl,0x2
c0019265:	c1 e2 06             	shl    edx,0x6
c0019268:	09 d0                	or     eax,edx
c001926a:	88 83 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],al
c0019270:	8a 83 5e 01 00 00    	mov    al,BYTE PTR [ebx+0x15e]
c0019276:	83 e0 c0             	and    eax,0xffffffc0
c0019279:	09 c1                	or     ecx,eax
c001927b:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0019281:	83 ec 0c             	sub    esp,0xc
c0019284:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c001928b:	56                   	push   esi
c001928c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0019290:	50                   	push   eax
c0019291:	57                   	push   edi
c0019292:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019296:	55                   	push   ebp
c0019297:	68 00 00 00 80       	push   0x80000000
c001929c:	e8 e7 f5 ff ff       	call   c0018888 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192a1:	83 c4 20             	add    esp,0x20
c00192a4:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c00192ac:	8d 44 24 18          	lea    eax,[esp+0x18]
c00192b0:	76 1e                	jbe    c00192d0 <CPU::detectFeatures()+0x602>
c00192b2:	83 ec 0c             	sub    esp,0xc
c00192b5:	56                   	push   esi
c00192b6:	50                   	push   eax
c00192b7:	57                   	push   edi
c00192b8:	55                   	push   ebp
c00192b9:	68 01 00 00 80       	push   0x80000001
c00192be:	e8 c5 f5 ff ff       	call   c0018888 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00192c3:	81 a3 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x1190],0xfffe5fff
c00192cd:	83 c4 20             	add    esp,0x20
c00192d0:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c00192d6:	83 f8 01             	cmp    eax,0x1
c00192d9:	75 6f                	jne    c001934a <CPU::detectFeatures()+0x67c>
c00192db:	51                   	push   ecx
c00192dc:	51                   	push   ecx
c00192dd:	68 16 b4 02 c0       	push   0xc002b416
c00192e2:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00192e6:	56                   	push   esi
c00192e7:	e8 48 75 fe ff       	call   c0000834 <strcpy>
c00192ec:	5f                   	pop    edi
c00192ed:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00192f3:	5d                   	pop    ebp
c00192f4:	66 c1 e8 06          	shr    ax,0x6
c00192f8:	0f b6 c0             	movzx  eax,al
c00192fb:	50                   	push   eax
c00192fc:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0019302:	c1 e8 0e             	shr    eax,0xe
c0019305:	0f b6 c0             	movzx  eax,al
c0019308:	50                   	push   eax
c0019309:	e8 24 f2 ff ff       	call   c0018532 <CPU::lookupIntelName(unsigned char, unsigned char)>
c001930e:	5a                   	pop    edx
c001930f:	59                   	pop    ecx
c0019310:	50                   	push   eax
c0019311:	56                   	push   esi
c0019312:	e8 5d 76 fe ff       	call   c0000974 <strcat>
c0019317:	5f                   	pop    edi
c0019318:	5d                   	pop    ebp
c0019319:	56                   	push   esi
c001931a:	53                   	push   ebx
c001931b:	e8 5a ae ff ff       	call   c001417a <Device::setName(char const*)>
c0019320:	58                   	pop    eax
c0019321:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c0019327:	5a                   	pop    edx
c0019328:	68 1d b4 02 c0       	push   0xc002b41d
c001932d:	50                   	push   eax
c001932e:	e8 8d 75 fe ff       	call   c00008c0 <strcmp>
c0019333:	83 c4 10             	add    esp,0x10
c0019336:	85 c0                	test   eax,eax
c0019338:	0f 85 71 03 00 00    	jne    c00196af <CPU::detectFeatures()+0x9e1>
c001933e:	80 a3 91 11 00 00 3f 	and    BYTE PTR [ebx+0x1191],0x3f
c0019345:	e9 65 03 00 00       	jmp    c00196af <CPU::detectFeatures()+0x9e1>
c001934a:	83 f8 02             	cmp    eax,0x2
c001934d:	0f 85 b5 00 00 00    	jne    c0019408 <CPU::detectFeatures()+0x73a>
c0019353:	57                   	push   edi
c0019354:	57                   	push   edi
c0019355:	68 2f b4 02 c0       	push   0xc002b42f
c001935a:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001935e:	56                   	push   esi
c001935f:	e8 d0 74 fe ff       	call   c0000834 <strcpy>
c0019364:	5d                   	pop    ebp
c0019365:	58                   	pop    eax
c0019366:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001936c:	66 c1 e8 06          	shr    ax,0x6
c0019370:	0f b6 c0             	movzx  eax,al
c0019373:	50                   	push   eax
c0019374:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001937a:	c1 e8 0e             	shr    eax,0xe
c001937d:	0f b6 c0             	movzx  eax,al
c0019380:	50                   	push   eax
c0019381:	e8 18 f0 ff ff       	call   c001839e <CPU::lookupAMDName(unsigned char, unsigned char)>
c0019386:	5a                   	pop    edx
c0019387:	59                   	pop    ecx
c0019388:	50                   	push   eax
c0019389:	56                   	push   esi
c001938a:	e8 e5 75 fe ff       	call   c0000974 <strcat>
c001938f:	5f                   	pop    edi
c0019390:	5d                   	pop    ebp
c0019391:	56                   	push   esi
c0019392:	53                   	push   ebx
c0019393:	e8 e2 ad ff ff       	call   c001417a <Device::setName(char const*)>
c0019398:	58                   	pop    eax
c0019399:	8d 83 d0 00 00 00    	lea    eax,[ebx+0xd0]
c001939f:	5a                   	pop    edx
c00193a0:	68 34 b4 02 c0       	push   0xc002b434
c00193a5:	50                   	push   eax
c00193a6:	e8 15 75 fe ff       	call   c00008c0 <strcmp>
c00193ab:	83 c4 10             	add    esp,0x10
c00193ae:	85 c0                	test   eax,eax
c00193b0:	75 20                	jne    c00193d2 <CPU::detectFeatures()+0x704>
c00193b2:	8b 15 08 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e008
c00193b8:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c00193be:	a8 01                	test   al,0x1
c00193c0:	74 10                	je     c00193d2 <CPU::detectFeatures()+0x704>
c00193c2:	83 e0 fe             	and    eax,0xfffffffe
c00193c5:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c00193cb:	80 8b 90 11 00 00 10 	or     BYTE PTR [ebx+0x1190],0x10
c00193d2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00193d8:	c1 e8 0e             	shr    eax,0xe
c00193db:	3c 05                	cmp    al,0x5
c00193dd:	0f 85 cc 02 00 00    	jne    c00196af <CPU::detectFeatures()+0x9e1>
c00193e3:	56                   	push   esi
c00193e4:	8a 83 5c 01 00 00    	mov    al,BYTE PTR [ebx+0x15c]
c00193ea:	83 e0 0f             	and    eax,0xf
c00193ed:	50                   	push   eax
c00193ee:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00193f4:	66 c1 e8 06          	shr    ax,0x6
c00193f8:	0f b6 c0             	movzx  eax,al
c00193fb:	50                   	push   eax
c00193fc:	6a 05                	push   0x5
c00193fe:	e8 11 f4 ff ff       	call   c0018814 <CPU::AMD_K6_writeback(int, int, int)>
c0019403:	e9 1f 02 00 00       	jmp    c0019627 <CPU::detectFeatures()+0x959>
c0019408:	8d 50 fd             	lea    edx,[eax-0x3]
c001940b:	83 fa 01             	cmp    edx,0x1
c001940e:	76 09                	jbe    c0019419 <CPU::detectFeatures()+0x74b>
c0019410:	83 f8 06             	cmp    eax,0x6
c0019413:	0f 85 91 01 00 00    	jne    c00195aa <CPU::detectFeatures()+0x8dc>
c0019419:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001941f:	c1 ea 0e             	shr    edx,0xe
c0019422:	80 fa 05             	cmp    dl,0x5
c0019425:	75 7b                	jne    c00194a2 <CPU::detectFeatures()+0x7d4>
c0019427:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c001942d:	66 81 e2 c0 3f       	and    dx,0x3fc0
c0019432:	66 81 fa 00 01       	cmp    dx,0x100
c0019437:	75 0c                	jne    c0019445 <CPU::detectFeatures()+0x777>
c0019439:	51                   	push   ecx
c001943a:	51                   	push   ecx
c001943b:	68 3b b4 02 c0       	push   0xc002b43b
c0019440:	e9 dc 01 00 00       	jmp    c0019621 <CPU::detectFeatures()+0x953>
c0019445:	66 81 fa 00 02       	cmp    dx,0x200
c001944a:	75 0c                	jne    c0019458 <CPU::detectFeatures()+0x78a>
c001944c:	52                   	push   edx
c001944d:	52                   	push   edx
c001944e:	68 4e b4 02 c0       	push   0xc002b44e
c0019453:	e9 c9 01 00 00       	jmp    c0019621 <CPU::detectFeatures()+0x953>
c0019458:	66 81 fa 40 02       	cmp    dx,0x240
c001945d:	75 0c                	jne    c001946b <CPU::detectFeatures()+0x79d>
c001945f:	50                   	push   eax
c0019460:	50                   	push   eax
c0019461:	68 60 b4 02 c0       	push   0xc002b460
c0019466:	e9 b6 01 00 00       	jmp    c0019621 <CPU::detectFeatures()+0x953>
c001946b:	83 f8 06             	cmp    eax,0x6
c001946e:	75 0c                	jne    c001947c <CPU::detectFeatures()+0x7ae>
c0019470:	50                   	push   eax
c0019471:	50                   	push   eax
c0019472:	68 72 b4 02 c0       	push   0xc002b472
c0019477:	e9 a5 01 00 00       	jmp    c0019621 <CPU::detectFeatures()+0x953>
c001947c:	83 f8 04             	cmp    eax,0x4
c001947f:	75 0c                	jne    c001948d <CPU::detectFeatures()+0x7bf>
c0019481:	50                   	push   eax
c0019482:	50                   	push   eax
c0019483:	68 7e b4 02 c0       	push   0xc002b47e
c0019488:	e9 94 01 00 00       	jmp    c0019621 <CPU::detectFeatures()+0x953>
c001948d:	83 f8 03             	cmp    eax,0x3
c0019490:	0f 85 19 02 00 00    	jne    c00196af <CPU::detectFeatures()+0x9e1>
c0019496:	50                   	push   eax
c0019497:	50                   	push   eax
c0019498:	68 86 b4 02 c0       	push   0xc002b486
c001949d:	e9 7f 01 00 00       	jmp    c0019621 <CPU::detectFeatures()+0x953>
c00194a2:	80 fa 06             	cmp    dl,0x6
c00194a5:	0f 85 db 00 00 00    	jne    c0019586 <CPU::detectFeatures()+0x8b8>
c00194ab:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c00194b1:	66 81 e2 c0 3f       	and    dx,0x3fc0
c00194b6:	66 81 fa 80 01       	cmp    dx,0x180
c00194bb:	75 0c                	jne    c00194c9 <CPU::detectFeatures()+0x7fb>
c00194bd:	50                   	push   eax
c00194be:	50                   	push   eax
c00194bf:	68 91 b4 02 c0       	push   0xc002b491
c00194c4:	e9 58 01 00 00       	jmp    c0019621 <CPU::detectFeatures()+0x953>
c00194c9:	8d 8a 40 fe ff ff    	lea    ecx,[edx-0x1c0]
c00194cf:	66 f7 c1 80 ff       	test   cx,0xff80
c00194d4:	75 0c                	jne    c00194e2 <CPU::detectFeatures()+0x814>
c00194d6:	50                   	push   eax
c00194d7:	50                   	push   eax
c00194d8:	68 a1 b4 02 c0       	push   0xc002b4a1
c00194dd:	e9 3f 01 00 00       	jmp    c0019621 <CPU::detectFeatures()+0x953>
c00194e2:	66 81 fa 40 02       	cmp    dx,0x240
c00194e7:	75 0c                	jne    c00194f5 <CPU::detectFeatures()+0x827>
c00194e9:	55                   	push   ebp
c00194ea:	55                   	push   ebp
c00194eb:	68 a8 b4 02 c0       	push   0xc002b4a8
c00194f0:	e9 2c 01 00 00       	jmp    c0019621 <CPU::detectFeatures()+0x953>
c00194f5:	66 81 fa 80 02       	cmp    dx,0x280
c00194fa:	75 0c                	jne    c0019508 <CPU::detectFeatures()+0x83a>
c00194fc:	57                   	push   edi
c00194fd:	57                   	push   edi
c00194fe:	68 b1 b4 02 c0       	push   0xc002b4b1
c0019503:	e9 19 01 00 00       	jmp    c0019621 <CPU::detectFeatures()+0x953>
c0019508:	66 81 fa 40 03       	cmp    dx,0x340
c001950d:	74 ed                	je     c00194fc <CPU::detectFeatures()+0x82e>
c001950f:	66 81 fa c0 03       	cmp    dx,0x3c0
c0019514:	75 0c                	jne    c0019522 <CPU::detectFeatures()+0x854>
c0019516:	56                   	push   esi
c0019517:	56                   	push   esi
c0019518:	68 b8 b4 02 c0       	push   0xc002b4b8
c001951d:	e9 ff 00 00 00       	jmp    c0019621 <CPU::detectFeatures()+0x953>
c0019522:	83 f8 06             	cmp    eax,0x6
c0019525:	0f 84 45 ff ff ff    	je     c0019470 <CPU::detectFeatures()+0x7a2>
c001952b:	83 f8 04             	cmp    eax,0x4
c001952e:	0f 84 4d ff ff ff    	je     c0019481 <CPU::detectFeatures()+0x7b3>
c0019534:	83 f8 03             	cmp    eax,0x3
c0019537:	0f 85 72 01 00 00    	jne    c00196af <CPU::detectFeatures()+0x9e1>
c001953d:	51                   	push   ecx
c001953e:	51                   	push   ecx
c001953f:	68 c1 b4 02 c0       	push   0xc002b4c1
c0019544:	53                   	push   ebx
c0019545:	e8 30 ac ff ff       	call   c001417a <Device::setName(char const*)>
c001954a:	b1 c1                	mov    cl,0xc1
c001954c:	88 c8                	mov    al,cl
c001954e:	e6 22                	out    0x22,al
c0019550:	e4 23                	in     al,0x23
c0019552:	88 c2                	mov    dl,al
c0019554:	88 c8                	mov    al,cl
c0019556:	e6 22                	out    0x22,al
c0019558:	88 d0                	mov    al,dl
c001955a:	83 c8 10             	or     eax,0x10
c001955d:	e6 23                	out    0x23,al
c001955f:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0019566:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0019569:	89 d0                	mov    eax,edx
c001956b:	66 c7 41 04 22 00    	mov    WORD PTR [ecx+0x4],0x22
c0019571:	c6 41 06 02          	mov    BYTE PTR [ecx+0x6],0x2
c0019575:	40                   	inc    eax
c0019576:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001957c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0019581:	e9 a1 00 00 00       	jmp    c0019627 <CPU::detectFeatures()+0x959>
c0019586:	83 f8 06             	cmp    eax,0x6
c0019589:	0f 84 e1 fe ff ff    	je     c0019470 <CPU::detectFeatures()+0x7a2>
c001958f:	83 f8 04             	cmp    eax,0x4
c0019592:	0f 84 e9 fe ff ff    	je     c0019481 <CPU::detectFeatures()+0x7b3>
c0019598:	83 f8 03             	cmp    eax,0x3
c001959b:	0f 85 0e 01 00 00    	jne    c00196af <CPU::detectFeatures()+0x9e1>
c00195a1:	52                   	push   edx
c00195a2:	52                   	push   edx
c00195a3:	68 cc b4 02 c0       	push   0xc002b4cc
c00195a8:	eb 77                	jmp    c0019621 <CPU::detectFeatures()+0x953>
c00195aa:	83 f8 07             	cmp    eax,0x7
c00195ad:	75 09                	jne    c00195b8 <CPU::detectFeatures()+0x8ea>
c00195af:	50                   	push   eax
c00195b0:	50                   	push   eax
c00195b1:	68 d6 b4 02 c0       	push   0xc002b4d6
c00195b6:	eb 69                	jmp    c0019621 <CPU::detectFeatures()+0x953>
c00195b8:	83 f8 0a             	cmp    eax,0xa
c00195bb:	75 09                	jne    c00195c6 <CPU::detectFeatures()+0x8f8>
c00195bd:	50                   	push   eax
c00195be:	50                   	push   eax
c00195bf:	68 e1 b4 02 c0       	push   0xc002b4e1
c00195c4:	eb 5b                	jmp    c0019621 <CPU::detectFeatures()+0x953>
c00195c6:	83 f8 0b             	cmp    eax,0xb
c00195c9:	75 09                	jne    c00195d4 <CPU::detectFeatures()+0x906>
c00195cb:	50                   	push   eax
c00195cc:	50                   	push   eax
c00195cd:	68 e9 b4 02 c0       	push   0xc002b4e9
c00195d2:	eb 4d                	jmp    c0019621 <CPU::detectFeatures()+0x953>
c00195d4:	83 f8 08             	cmp    eax,0x8
c00195d7:	75 09                	jne    c00195e2 <CPU::detectFeatures()+0x914>
c00195d9:	50                   	push   eax
c00195da:	50                   	push   eax
c00195db:	68 f2 b4 02 c0       	push   0xc002b4f2
c00195e0:	eb 3f                	jmp    c0019621 <CPU::detectFeatures()+0x953>
c00195e2:	83 f8 09             	cmp    eax,0x9
c00195e5:	75 09                	jne    c00195f0 <CPU::detectFeatures()+0x922>
c00195e7:	50                   	push   eax
c00195e8:	50                   	push   eax
c00195e9:	68 fa b4 02 c0       	push   0xc002b4fa
c00195ee:	eb 31                	jmp    c0019621 <CPU::detectFeatures()+0x953>
c00195f0:	83 f8 05             	cmp    eax,0x5
c00195f3:	75 09                	jne    c00195fe <CPU::detectFeatures()+0x930>
c00195f5:	50                   	push   eax
c00195f6:	50                   	push   eax
c00195f7:	68 02 b5 02 c0       	push   0xc002b502
c00195fc:	eb 23                	jmp    c0019621 <CPU::detectFeatures()+0x953>
c00195fe:	83 f8 0c             	cmp    eax,0xc
c0019601:	75 09                	jne    c001960c <CPU::detectFeatures()+0x93e>
c0019603:	55                   	push   ebp
c0019604:	55                   	push   ebp
c0019605:	68 10 b5 02 c0       	push   0xc002b510
c001960a:	eb 15                	jmp    c0019621 <CPU::detectFeatures()+0x953>
c001960c:	83 f8 0d             	cmp    eax,0xd
c001960f:	75 09                	jne    c001961a <CPU::detectFeatures()+0x94c>
c0019611:	57                   	push   edi
c0019612:	57                   	push   edi
c0019613:	68 1b b5 02 c0       	push   0xc002b51b
c0019618:	eb 07                	jmp    c0019621 <CPU::detectFeatures()+0x953>
c001961a:	56                   	push   esi
c001961b:	56                   	push   esi
c001961c:	68 2f b5 02 c0       	push   0xc002b52f
c0019621:	53                   	push   ebx
c0019622:	e8 53 ab ff ff       	call   c001417a <Device::setName(char const*)>
c0019627:	83 c4 10             	add    esp,0x10
c001962a:	e9 80 00 00 00       	jmp    c00196af <CPU::detectFeatures()+0x9e1>
c001962f:	51                   	push   ecx
c0019630:	51                   	push   ecx
c0019631:	68 7b b3 02 c0       	push   0xc002b37b
c0019636:	57                   	push   edi
c0019637:	e8 f8 71 fe ff       	call   c0000834 <strcpy>
c001963c:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0019646:	e8 63 6c fe ff       	call   c00002ae <is486>
c001964b:	83 c4 10             	add    esp,0x10
c001964e:	85 c0                	test   eax,eax
c0019650:	74 2b                	je     c001967d <CPU::detectFeatures()+0x9af>
c0019652:	52                   	push   edx
c0019653:	52                   	push   edx
c0019654:	68 3b b5 02 c0       	push   0xc002b53b
c0019659:	53                   	push   ebx
c001965a:	e8 1b ab ff ff       	call   c001417a <Device::setName(char const*)>
c001965f:	80 8b 91 11 00 00 07 	or     BYTE PTR [ebx+0x1191],0x7
c0019666:	0f 20 c0             	mov    eax,cr0
c0019669:	83 e0 14             	and    eax,0x14
c001966c:	83 c4 10             	add    esp,0x10
c001966f:	83 f8 04             	cmp    eax,0x4
c0019672:	75 1f                	jne    c0019693 <CPU::detectFeatures()+0x9c5>
c0019674:	80 a3 92 11 00 00 fd 	and    BYTE PTR [ebx+0x1192],0xfd
c001967b:	eb 32                	jmp    c00196af <CPU::detectFeatures()+0x9e1>
c001967d:	50                   	push   eax
c001967e:	50                   	push   eax
c001967f:	68 46 b5 02 c0       	push   0xc002b546
c0019684:	53                   	push   ebx
c0019685:	e8 f0 aa ff ff       	call   c001417a <Device::setName(char const*)>
c001968a:	80 a3 91 11 00 00 f8 	and    BYTE PTR [ebx+0x1191],0xf8
c0019691:	eb d3                	jmp    c0019666 <CPU::detectFeatures()+0x998>
c0019693:	e8 f1 6b fe ff       	call   c0000289 <hasLegacyFPU>
c0019698:	83 e0 01             	and    eax,0x1
c001969b:	8d 14 00             	lea    edx,[eax+eax*1]
c001969e:	8a 83 92 11 00 00    	mov    al,BYTE PTR [ebx+0x1192]
c00196a4:	83 e0 fd             	and    eax,0xfffffffd
c00196a7:	09 d0                	or     eax,edx
c00196a9:	88 83 92 11 00 00    	mov    BYTE PTR [ebx+0x1192],al
c00196af:	c6 83 94 11 00 00 00 	mov    BYTE PTR [ebx+0x1194],0x0
c00196b6:	83 c4 4c             	add    esp,0x4c
c00196b9:	5b                   	pop    ebx
c00196ba:	5e                   	pop    esi
c00196bb:	5f                   	pop    edi
c00196bc:	5d                   	pop    ebp
c00196bd:	c3                   	ret    

c00196be <CPU::setupSMEP()>:
c00196be:	0f 20 e0             	mov    eax,cr4
c00196c1:	0d 00 00 10 00       	or     eax,0x100000
c00196c6:	0f 22 e0             	mov    cr4,eax
c00196c9:	c3                   	ret    

c00196ca <CPU::setupUMIP()>:
c00196ca:	0f 20 e0             	mov    eax,cr4
c00196cd:	80 cc 08             	or     ah,0x8
c00196d0:	0f 22 e0             	mov    cr4,eax
c00196d3:	c3                   	ret    

c00196d4 <CPU::setupTSC()>:
c00196d4:	0f 20 e0             	mov    eax,cr4
c00196d7:	83 c8 04             	or     eax,0x4
c00196da:	0f 22 e0             	mov    cr4,eax
c00196dd:	c3                   	ret    

c00196de <CPU::setupLargePages()>:
c00196de:	0f 20 e0             	mov    eax,cr4
c00196e1:	83 c8 10             	or     eax,0x10
c00196e4:	0f 22 e0             	mov    cr4,eax
c00196e7:	c3                   	ret    

c00196e8 <CPU::setupPAT()>:
c00196e8:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c00196ed:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c00196f4:	74 2c                	je     c0019722 <CPU::setupPAT()+0x3a>
c00196f6:	53                   	push   ebx
c00196f7:	83 ec 10             	sub    esp,0x10
c00196fa:	68 77 02 00 00       	push   0x277
c00196ff:	50                   	push   eax
c0019700:	e8 e3 56 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019705:	83 e2 f8             	and    edx,0xfffffff8
c0019708:	83 ca 01             	or     edx,0x1
c001970b:	52                   	push   edx
c001970c:	50                   	push   eax
c001970d:	68 77 02 00 00       	push   0x277
c0019712:	ff 35 08 e0 02 c0    	push   DWORD PTR ds:0xc002e008
c0019718:	e8 f7 56 ff ff       	call   c000ee14 <Computer::wrmsr(unsigned int, unsigned long long)>
c001971d:	83 c4 28             	add    esp,0x28
c0019720:	5b                   	pop    ebx
c0019721:	c3                   	ret    
c0019722:	c3                   	ret    
c0019723:	90                   	nop

c0019724 <CPU::setupMTRR()>:
c0019724:	c3                   	ret    
c0019725:	90                   	nop

c0019726 <CPU::setupGlobalPages()>:
c0019726:	0f 20 e0             	mov    eax,cr4
c0019729:	0c 80                	or     al,0x80
c001972b:	0f 22 e0             	mov    cr4,eax
c001972e:	c3                   	ret    
c001972f:	90                   	nop

c0019730 <CPU::allowUsermodeDataAccess()>:
c0019730:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019734:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001973b:	74 03                	je     c0019740 <CPU::allowUsermodeDataAccess()+0x10>
c001973d:	0f 01 cb             	stac   
c0019740:	c3                   	ret    
c0019741:	90                   	nop

c0019742 <CPU::prohibitUsermodeDataAccess()>:
c0019742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019746:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c001974d:	74 03                	je     c0019752 <CPU::prohibitUsermodeDataAccess()+0x10>
c001974f:	0f 01 ca             	clac   
c0019752:	c3                   	ret    
c0019753:	90                   	nop

c0019754 <CPU::setupSMAP()>:
c0019754:	0f 20 e0             	mov    eax,cr4
c0019757:	0d 00 00 20 00       	or     eax,0x200000
c001975c:	0f 22 e0             	mov    cr4,eax
c001975f:	eb e1                	jmp    c0019742 <CPU::prohibitUsermodeDataAccess()>
c0019761:	90                   	nop

c0019762 <CPU::setupFeatures()>:
c0019762:	83 ec 0c             	sub    esp,0xc
c0019765:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019769:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019770:	74 07                	je     c0019779 <CPU::setupFeatures()+0x17>
c0019772:	52                   	push   edx
c0019773:	e8 46 ff ff ff       	call   c00196be <CPU::setupSMEP()>
c0019778:	58                   	pop    eax
c0019779:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019780:	74 07                	je     c0019789 <CPU::setupFeatures()+0x27>
c0019782:	52                   	push   edx
c0019783:	e8 cc ff ff ff       	call   c0019754 <CPU::setupSMAP()>
c0019788:	58                   	pop    eax
c0019789:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019790:	74 07                	je     c0019799 <CPU::setupFeatures()+0x37>
c0019792:	52                   	push   edx
c0019793:	e8 32 ff ff ff       	call   c00196ca <CPU::setupUMIP()>
c0019798:	58                   	pop    eax
c0019799:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c00197a0:	74 07                	je     c00197a9 <CPU::setupFeatures()+0x47>
c00197a2:	52                   	push   edx
c00197a3:	e8 2c ff ff ff       	call   c00196d4 <CPU::setupTSC()>
c00197a8:	58                   	pop    eax
c00197a9:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c00197b0:	74 07                	je     c00197b9 <CPU::setupFeatures()+0x57>
c00197b2:	52                   	push   edx
c00197b3:	e8 26 ff ff ff       	call   c00196de <CPU::setupLargePages()>
c00197b8:	59                   	pop    ecx
c00197b9:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c00197c0:	74 07                	je     c00197c9 <CPU::setupFeatures()+0x67>
c00197c2:	52                   	push   edx
c00197c3:	e8 5e ff ff ff       	call   c0019726 <CPU::setupGlobalPages()>
c00197c8:	58                   	pop    eax
c00197c9:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c00197d0:	74 0c                	je     c00197de <CPU::setupFeatures()+0x7c>
c00197d2:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00197d6:	83 c4 0c             	add    esp,0xc
c00197d9:	e9 0a ff ff ff       	jmp    c00196e8 <CPU::setupPAT()>
c00197de:	83 c4 0c             	add    esp,0xc
c00197e1:	c3                   	ret    

c00197e2 <CPU::open(int, int, void*)>:
c00197e2:	57                   	push   edi
c00197e3:	56                   	push   esi
c00197e4:	53                   	push   ebx
c00197e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00197e9:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00197ed:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c00197f3:	83 ec 0c             	sub    esp,0xc
c00197f6:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c00197fc:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019802:	50                   	push   eax
c0019803:	e8 cc 58 ff ff       	call   c000f0d4 <GDT::setup()>
c0019808:	83 c4 0c             	add    esp,0xc
c001980b:	6a 00                	push   0x0
c001980d:	68 ef be ad de       	push   0xdeadbeef
c0019812:	57                   	push   edi
c0019813:	e8 da 7c ff ff       	call   c00114f2 <TSS::setup(unsigned long, unsigned long)>
c0019818:	89 3c 24             	mov    DWORD PTR [esp],edi
c001981b:	e8 b2 7c ff ff       	call   c00114d2 <TSS::flush()>
c0019820:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019826:	89 04 24             	mov    DWORD PTR [esp],eax
c0019829:	e8 02 5b ff ff       	call   c000f330 <IDT::setup()>
c001982e:	b8 00 04 00 00       	mov    eax,0x400
c0019833:	0f 23 f8             	mov    db7,eax
c0019836:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019840:	e8 f0 66 ff ff       	call   c000ff35 <Phys::allocatePage()>
c0019845:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001984b:	89 30                	mov    DWORD PTR [eax],esi
c001984d:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019853:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019856:	58                   	pop    eax
c0019857:	5a                   	pop    edx
c0019858:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001985e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019862:	e8 bd 8c ff ff       	call   c0012524 <VAS::setCPUSpecific(unsigned long)>
c0019867:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001986a:	e8 5f f4 ff ff       	call   c0018cce <CPU::detectFeatures()>
c001986f:	e8 cf bc ff ff       	call   c0015543 <setupInterruptController()>
c0019874:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c001987a:	a1 20 e0 02 c0       	mov    eax,ds:0xc002e020
c001987f:	83 e0 10             	and    eax,0x10
c0019882:	83 f8 01             	cmp    eax,0x1
c0019885:	19 c0                	sbb    eax,eax
c0019887:	83 e0 46             	and    eax,0x46
c001988a:	83 c0 1e             	add    eax,0x1e
c001988d:	89 04 24             	mov    DWORD PTR [esp],eax
c0019890:	e8 bb d1 ff ff       	call   c0016a50 <setupTimer(int)>
c0019895:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c001989b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001989e:	e8 bf fe ff ff       	call   c0019762 <CPU::setupFeatures()>
c00198a3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00198a6:	e8 a7 f1 ff ff       	call   c0018a52 <CPU::displayFeatures()>
c00198ab:	83 c4 10             	add    esp,0x10
c00198ae:	31 c0                	xor    eax,eax
c00198b0:	5b                   	pop    ebx
c00198b1:	5e                   	pop    esi
c00198b2:	5f                   	pop    edi
c00198b3:	c3                   	ret    

c00198b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c00198b4:	57                   	push   edi
c00198b5:	56                   	push   esi
c00198b6:	53                   	push   ebx
c00198b7:	51                   	push   ecx
c00198b8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00198bc:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c00198bf:	0f 02 c0             	lar    eax,ax
c00198c2:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c00198c5:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c00198c9:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c00198cc:	88 ca                	mov    dl,cl
c00198ce:	c0 ea 06             	shr    dl,0x6
c00198d1:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c00198d5:	89 ca                	mov    edx,ecx
c00198d7:	66 c1 ea 03          	shr    dx,0x3
c00198db:	83 e2 07             	and    edx,0x7
c00198de:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c00198e3:	88 17                	mov    BYTE PTR [edi],dl
c00198e5:	0f 84 a6 01 00 00    	je     c0019a91 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c00198eb:	83 e1 07             	and    ecx,0x7
c00198ee:	80 f9 04             	cmp    cl,0x4
c00198f1:	0f 84 98 00 00 00    	je     c001998f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c00198f7:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c00198fc:	0f 95 c0             	setne  al
c00198ff:	80 f9 05             	cmp    cl,0x5
c0019902:	0f 95 c2             	setne  dl
c0019905:	08 c2                	or     dl,al
c0019907:	74 79                	je     c0019982 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019909:	84 c9                	test   cl,cl
c001990b:	75 05                	jne    c0019912 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c001990d:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019910:	eb 3c                	jmp    c001994e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019912:	80 f9 01             	cmp    cl,0x1
c0019915:	75 05                	jne    c001991c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019917:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001991a:	eb 32                	jmp    c001994e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001991c:	80 f9 02             	cmp    cl,0x2
c001991f:	75 05                	jne    c0019926 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019921:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019924:	eb 28                	jmp    c001994e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019926:	31 c0                	xor    eax,eax
c0019928:	80 f9 03             	cmp    cl,0x3
c001992b:	75 05                	jne    c0019932 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c001992d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019930:	eb 1c                	jmp    c001994e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019932:	80 f9 05             	cmp    cl,0x5
c0019935:	75 05                	jne    c001993c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019937:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001993a:	eb 12                	jmp    c001994e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001993c:	80 f9 06             	cmp    cl,0x6
c001993f:	75 05                	jne    c0019946 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019941:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019944:	eb 08                	jmp    c001994e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019946:	80 f9 07             	cmp    cl,0x7
c0019949:	75 03                	jne    c001994e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c001994b:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001994e:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019953:	75 10                	jne    c0019965 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019955:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019959:	b9 03 00 00 00       	mov    ecx,0x3
c001995e:	01 d0                	add    eax,edx
c0019960:	e9 37 01 00 00       	jmp    c0019a9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019965:	b9 02 00 00 00       	mov    ecx,0x2
c001996a:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c001996f:	0f 85 27 01 00 00    	jne    c0019a9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019975:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019978:	b9 06 00 00 00       	mov    ecx,0x6
c001997d:	e9 1a 01 00 00       	jmp    c0019a9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019982:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019985:	b9 06 00 00 00       	mov    ecx,0x6
c001998a:	e9 0f 01 00 00       	jmp    c0019a9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001998f:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019992:	88 ca                	mov    dl,cl
c0019994:	c0 ea 06             	shr    dl,0x6
c0019997:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c001999b:	89 ca                	mov    edx,ecx
c001999d:	66 c1 ea 03          	shr    dx,0x3
c00199a1:	83 e2 07             	and    edx,0x7
c00199a4:	80 e1 07             	and    cl,0x7
c00199a7:	75 05                	jne    c00199ae <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c00199a9:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c00199ac:	eb 4c                	jmp    c00199fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00199ae:	80 f9 01             	cmp    cl,0x1
c00199b1:	75 05                	jne    c00199b8 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c00199b3:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c00199b6:	eb 42                	jmp    c00199fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00199b8:	80 f9 02             	cmp    cl,0x2
c00199bb:	75 05                	jne    c00199c2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c00199bd:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c00199c0:	eb 38                	jmp    c00199fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00199c2:	80 f9 03             	cmp    cl,0x3
c00199c5:	75 05                	jne    c00199cc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c00199c7:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c00199ca:	eb 2e                	jmp    c00199fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00199cc:	80 f9 04             	cmp    cl,0x4
c00199cf:	75 12                	jne    c00199e3 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c00199d1:	f6 c4 60             	test   ah,0x60
c00199d4:	75 08                	jne    c00199de <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c00199d6:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00199d9:	8d 78 14             	lea    edi,[eax+0x14]
c00199dc:	eb 1c                	jmp    c00199fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00199de:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c00199e1:	eb 17                	jmp    c00199fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00199e3:	80 f9 05             	cmp    cl,0x5
c00199e6:	75 05                	jne    c00199ed <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c00199e8:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00199eb:	eb 0d                	jmp    c00199fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00199ed:	80 f9 06             	cmp    cl,0x6
c00199f0:	75 05                	jne    c00199f7 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c00199f2:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00199f5:	eb 03                	jmp    c00199fa <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c00199f7:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c00199fa:	84 d2                	test   dl,dl
c00199fc:	75 05                	jne    c0019a03 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c00199fe:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019a01:	eb 3c                	jmp    c0019a3f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a03:	80 fa 01             	cmp    dl,0x1
c0019a06:	75 05                	jne    c0019a0d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c0019a08:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019a0b:	eb 32                	jmp    c0019a3f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a0d:	80 fa 02             	cmp    dl,0x2
c0019a10:	75 05                	jne    c0019a17 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c0019a12:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019a15:	eb 28                	jmp    c0019a3f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a17:	80 fa 03             	cmp    dl,0x3
c0019a1a:	75 05                	jne    c0019a21 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c0019a1c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019a1f:	eb 1e                	jmp    c0019a3f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a21:	31 c0                	xor    eax,eax
c0019a23:	80 fa 04             	cmp    dl,0x4
c0019a26:	74 17                	je     c0019a3f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a28:	80 fa 05             	cmp    dl,0x5
c0019a2b:	75 05                	jne    c0019a32 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c0019a2d:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019a30:	eb 0d                	jmp    c0019a3f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a32:	80 fa 06             	cmp    dl,0x6
c0019a35:	75 05                	jne    c0019a3c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c0019a37:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019a3a:	eb 03                	jmp    c0019a3f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c0019a3c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019a3f:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019a44:	0f 94 c2             	sete   dl
c0019a47:	80 f9 05             	cmp    cl,0x5
c0019a4a:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c0019a4e:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c0019a53:	d3 e0                	shl    eax,cl
c0019a55:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c0019a59:	74 0a                	je     c0019a65 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c0019a5b:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019a5e:	b9 07 00 00 00       	mov    ecx,0x7
c0019a63:	eb 37                	jmp    c0019a9c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019a65:	01 f8                	add    eax,edi
c0019a67:	b9 03 00 00 00       	mov    ecx,0x3
c0019a6c:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019a71:	74 2b                	je     c0019a9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019a73:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019a78:	75 0d                	jne    c0019a87 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c0019a7a:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c0019a7e:	01 c8                	add    eax,ecx
c0019a80:	b9 04 00 00 00       	mov    ecx,0x4
c0019a85:	eb 17                	jmp    c0019a9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019a87:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c0019a8a:	b9 07 00 00 00       	mov    ecx,0x7
c0019a8f:	eb 0d                	jmp    c0019a9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019a91:	b9 02 00 00 00       	mov    ecx,0x2
c0019a96:	b2 01                	mov    dl,0x1
c0019a98:	31 c0                	xor    eax,eax
c0019a9a:	eb 02                	jmp    c0019a9e <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019a9c:	31 d2                	xor    edx,edx
c0019a9e:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019aa2:	89 0b                	mov    DWORD PTR [ebx],ecx
c0019aa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0019aa8:	88 11                	mov    BYTE PTR [ecx],dl
c0019aaa:	5a                   	pop    edx
c0019aab:	5b                   	pop    ebx
c0019aac:	5e                   	pop    esi
c0019aad:	5f                   	pop    edi
c0019aae:	c3                   	ret    

c0019aaf <Krnl::smpEntry()>:
c0019aaf:	eb fe                	jmp    c0019aaf <Krnl::smpEntry()>

c0019ab1 <Krnl::startCPU(int)>:
c0019ab1:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0019ab6:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019abd:	0f 84 36 01 00 00    	je     c0019bf9 <Krnl::startCPU(int)+0x148>
c0019ac3:	53                   	push   ebx
c0019ac4:	83 ec 08             	sub    esp,0x8
c0019ac7:	e8 46 3f 00 00       	call   c001da12 <lockScheduler()>
c0019acc:	52                   	push   edx
c0019acd:	52                   	push   edx
c0019ace:	6a 1b                	push   0x1b
c0019ad0:	ff 35 08 e0 02 c0    	push   DWORD PTR ds:0xc002e008
c0019ad6:	e8 0d 53 ff ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c0019adb:	59                   	pop    ecx
c0019adc:	25 00 f0 ff ff       	and    eax,0xfffff000
c0019ae1:	89 c3                	mov    ebx,eax
c0019ae3:	58                   	pop    eax
c0019ae4:	53                   	push   ebx
c0019ae5:	68 80 b5 02 c0       	push   0xc002b580
c0019aea:	e8 82 90 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0019aef:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019af9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019afd:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019b07:	c1 e0 18             	shl    eax,0x18
c0019b0a:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c0019b10:	83 c4 10             	add    esp,0x10
c0019b13:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0019b19:	09 c2                	or     edx,eax
c0019b1b:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c0019b21:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c0019b27:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019b2d:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019b33:	80 cd c5             	or     ch,0xc5
c0019b36:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019b3c:	f3 90                	pause  
c0019b3e:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019b40:	0f ba e1 0c          	bt     ecx,0xc
c0019b44:	72 f6                	jb     c0019b3c <Krnl::startCPU(int)+0x8b>
c0019b46:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019b4c:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019b52:	09 c1                	or     ecx,eax
c0019b54:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019b5a:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019b60:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c0019b66:	80 cd 85             	or     ch,0x85
c0019b69:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019b6f:	f3 90                	pause  
c0019b71:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019b73:	0f ba e1 0c          	bt     ecx,0xc
c0019b77:	72 f6                	jb     c0019b6f <Krnl::startCPU(int)+0xbe>
c0019b79:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019b83:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019b89:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019b8f:	09 c1                	or     ecx,eax
c0019b91:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c0019b97:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c0019b9d:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c0019ba3:	81 c9 02 06 00 00    	or     ecx,0x602
c0019ba9:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c0019baf:	f3 90                	pause  
c0019bb1:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0019bb3:	0f ba e1 0c          	bt     ecx,0xc
c0019bb7:	72 f6                	jb     c0019baf <Krnl::startCPU(int)+0xfe>
c0019bb9:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c0019bc3:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c0019bc9:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c0019bcf:	09 c8                	or     eax,ecx
c0019bd1:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c0019bd7:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c0019bdd:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c0019be2:	0d 02 06 00 00       	or     eax,0x602
c0019be7:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c0019bed:	f3 90                	pause  
c0019bef:	8b 02                	mov    eax,DWORD PTR [edx]
c0019bf1:	0f ba e0 0c          	bt     eax,0xc
c0019bf5:	72 f6                	jb     c0019bed <Krnl::startCPU(int)+0x13c>
c0019bf7:	eb fe                	jmp    c0019bf7 <Krnl::startCPU(int)+0x146>
c0019bf9:	c3                   	ret    

c0019bfa <Krnl::startCPUs()>:
c0019bfa:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0019bff:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0019c05:	88 c2                	mov    dl,al
c0019c07:	83 e2 0a             	and    edx,0xa
c0019c0a:	80 fa 0a             	cmp    dl,0xa
c0019c0d:	75 09                	jne    c0019c18 <Krnl::startCPUs()+0x1e>
c0019c0f:	a8 01                	test   al,0x1
c0019c11:	74 05                	je     c0019c18 <Krnl::startCPUs()+0x1e>
c0019c13:	e9 83 65 fe ff       	jmp    c000019b <prepareTramp>
c0019c18:	c3                   	ret    
c0019c19:	90                   	nop

c0019c1a <EnvVarContainer::getEnv(char const*)>:
c0019c1a:	57                   	push   edi
c0019c1b:	56                   	push   esi
c0019c1c:	53                   	push   ebx
c0019c1d:	31 db                	xor    ebx,ebx
c0019c1f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0019c23:	39 1e                	cmp    DWORD PTR [esi],ebx
c0019c25:	7e 2b                	jle    c0019c52 <EnvVarContainer::getEnv(char const*)+0x38>
c0019c27:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0019c2e:	50                   	push   eax
c0019c2f:	50                   	push   eax
c0019c30:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019c33:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0019c36:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0019c3a:	e8 81 6c fe ff       	call   c00008c0 <strcmp>
c0019c3f:	83 c4 10             	add    esp,0x10
c0019c42:	85 c0                	test   eax,eax
c0019c44:	75 09                	jne    c0019c4f <EnvVarContainer::getEnv(char const*)+0x35>
c0019c46:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019c49:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0019c4d:	eb 05                	jmp    c0019c54 <EnvVarContainer::getEnv(char const*)+0x3a>
c0019c4f:	43                   	inc    ebx
c0019c50:	eb d1                	jmp    c0019c23 <EnvVarContainer::getEnv(char const*)+0x9>
c0019c52:	31 c0                	xor    eax,eax
c0019c54:	5b                   	pop    ebx
c0019c55:	5e                   	pop    esi
c0019c56:	5f                   	pop    edi
c0019c57:	c3                   	ret    

c0019c58 <EnvVarContainer::setEnv(char const*, char const*)>:
c0019c58:	57                   	push   edi
c0019c59:	56                   	push   esi
c0019c5a:	53                   	push   ebx
c0019c5b:	83 ec 1c             	sub    esp,0x1c
c0019c5e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019c62:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0019c66:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0019c6a:	57                   	push   edi
c0019c6b:	e8 24 6b fe ff       	call   c0000794 <strlen>
c0019c70:	40                   	inc    eax
c0019c71:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c74:	e8 c7 5b ff ff       	call   c000f840 <malloc>
c0019c79:	89 34 24             	mov    DWORD PTR [esp],esi
c0019c7c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019c80:	e8 0f 6b fe ff       	call   c0000794 <strlen>
c0019c85:	40                   	inc    eax
c0019c86:	89 04 24             	mov    DWORD PTR [esp],eax
c0019c89:	e8 b2 5b ff ff       	call   c000f840 <malloc>
c0019c8e:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019c91:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019c95:	e8 fa 6a fe ff       	call   c0000794 <strlen>
c0019c9a:	83 c4 0c             	add    esp,0xc
c0019c9d:	40                   	inc    eax
c0019c9e:	50                   	push   eax
c0019c9f:	6a 00                	push   0x0
c0019ca1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019ca5:	e8 ce 6a fe ff       	call   c0000778 <memset>
c0019caa:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019cad:	e8 e2 6a fe ff       	call   c0000794 <strlen>
c0019cb2:	83 c4 0c             	add    esp,0xc
c0019cb5:	40                   	inc    eax
c0019cb6:	50                   	push   eax
c0019cb7:	57                   	push   edi
c0019cb8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0019cbc:	e8 83 6a fe ff       	call   c0000744 <memcpy>
c0019cc1:	89 34 24             	mov    DWORD PTR [esp],esi
c0019cc4:	e8 cb 6a fe ff       	call   c0000794 <strlen>
c0019cc9:	83 c4 0c             	add    esp,0xc
c0019ccc:	40                   	inc    eax
c0019ccd:	50                   	push   eax
c0019cce:	6a 00                	push   0x0
c0019cd0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019cd4:	e8 9f 6a fe ff       	call   c0000778 <memset>
c0019cd9:	89 34 24             	mov    DWORD PTR [esp],esi
c0019cdc:	e8 b3 6a fe ff       	call   c0000794 <strlen>
c0019ce1:	83 c4 0c             	add    esp,0xc
c0019ce4:	40                   	inc    eax
c0019ce5:	50                   	push   eax
c0019ce6:	56                   	push   esi
c0019ce7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ceb:	e8 54 6a fe ff       	call   c0000744 <memcpy>
c0019cf0:	8b 03                	mov    eax,DWORD PTR [ebx]
c0019cf2:	40                   	inc    eax
c0019cf3:	89 03                	mov    DWORD PTR [ebx],eax
c0019cf5:	c1 e0 03             	shl    eax,0x3
c0019cf8:	5a                   	pop    edx
c0019cf9:	59                   	pop    ecx
c0019cfa:	50                   	push   eax
c0019cfb:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0019cfe:	e8 29 5b ff ff       	call   c000f82c <realloc>
c0019d03:	83 c4 0c             	add    esp,0xc
c0019d06:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0019d09:	6a 08                	push   0x8
c0019d0b:	8d 54 24 10          	lea    edx,[esp+0x10]
c0019d0f:	52                   	push   edx
c0019d10:	8b 13                	mov    edx,DWORD PTR [ebx]
c0019d12:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019d16:	50                   	push   eax
c0019d17:	e8 28 6a fe ff       	call   c0000744 <memcpy>
c0019d1c:	83 c4 20             	add    esp,0x20
c0019d1f:	5b                   	pop    ebx
c0019d20:	5e                   	pop    esi
c0019d21:	5f                   	pop    edi
c0019d22:	c3                   	ret    
c0019d23:	90                   	nop

c0019d24 <EnvVarContainer::deleteEnv(char const*)>:
c0019d24:	c3                   	ret    
c0019d25:	90                   	nop

c0019d26 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0019d26:	55                   	push   ebp
c0019d27:	57                   	push   edi
c0019d28:	56                   	push   esi
c0019d29:	53                   	push   ebx
c0019d2a:	81 ec 38 01 00 00    	sub    esp,0x138
c0019d30:	8b b4 24 4c 01 00 00 	mov    esi,DWORD PTR [esp+0x14c]
c0019d37:	8b ac 24 54 01 00 00 	mov    ebp,DWORD PTR [esp+0x154]
c0019d3e:	68 14 01 00 00       	push   0x114
c0019d43:	e8 f8 5a ff ff       	call   c000f840 <malloc>
c0019d48:	83 c4 0c             	add    esp,0xc
c0019d4b:	89 c7                	mov    edi,eax
c0019d4d:	ff 76 08             	push   DWORD PTR [esi+0x8]
c0019d50:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0019d57:	50                   	push   eax
c0019d58:	e8 6d 93 ff ff       	call   c00130ca <File::File(char const*, Process*)>
c0019d5d:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019d60:	e8 37 96 ff ff       	call   c001339c <File::exists()>
c0019d65:	83 c4 10             	add    esp,0x10
c0019d68:	84 c0                	test   al,al
c0019d6a:	75 31                	jne    c0019d9d <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0019d6c:	51                   	push   ecx
c0019d6d:	51                   	push   ecx
c0019d6e:	6a 12                	push   0x12
c0019d70:	57                   	push   edi
c0019d71:	e8 b8 93 ff ff       	call   c001312e <File::open(FileOpenMode)>
c0019d76:	8b 07                	mov    eax,DWORD PTR [edi]
c0019d78:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0019d7b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0019d7e:	e8 11 6a fe ff       	call   c0000794 <strlen>
c0019d83:	5a                   	pop    edx
c0019d84:	31 d2                	xor    edx,edx
c0019d86:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019d8a:	51                   	push   ecx
c0019d8b:	55                   	push   ebp
c0019d8c:	52                   	push   edx
c0019d8d:	50                   	push   eax
c0019d8e:	57                   	push   edi
c0019d8f:	ff d3                	call   ebx
c0019d91:	83 c4 14             	add    esp,0x14
c0019d94:	57                   	push   edi
c0019d95:	e8 f2 93 ff ff       	call   c001318c <File::close()>
c0019d9a:	83 c4 10             	add    esp,0x10
c0019d9d:	31 db                	xor    ebx,ebx
c0019d9f:	50                   	push   eax
c0019da0:	31 ed                	xor    ebp,ebp
c0019da2:	68 00 01 00 00       	push   0x100
c0019da7:	6a 00                	push   0x0
c0019da9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0019dad:	50                   	push   eax
c0019dae:	e8 c5 69 fe ff       	call   c0000778 <memset>
c0019db3:	58                   	pop    eax
c0019db4:	5a                   	pop    edx
c0019db5:	6a 01                	push   0x1
c0019db7:	57                   	push   edi
c0019db8:	e8 71 93 ff ff       	call   c001312e <File::open(FileOpenMode)>
c0019dbd:	83 c4 10             	add    esp,0x10
c0019dc0:	83 ec 0c             	sub    esp,0xc
c0019dc3:	8b 07                	mov    eax,DWORD PTR [edi]
c0019dc5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0019dc9:	51                   	push   ecx
c0019dca:	8d 54 24 23          	lea    edx,[esp+0x23]
c0019dce:	52                   	push   edx
c0019dcf:	6a 00                	push   0x0
c0019dd1:	6a 01                	push   0x1
c0019dd3:	57                   	push   edi
c0019dd4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0019dd7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0019ddb:	83 c4 20             	add    esp,0x20
c0019dde:	3c 0d                	cmp    al,0xd
c0019de0:	0f 84 12 01 00 00    	je     c0019ef8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019de6:	85 db                	test   ebx,ebx
c0019de8:	0f 84 fd 00 00 00    	je     c0019eeb <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019dee:	3c 0a                	cmp    al,0xa
c0019df0:	74 13                	je     c0019e05 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019df2:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019df7:	74 0c                	je     c0019e05 <EnvVarContainer::loadFrom(char const*, char const*)+0xdf>
c0019df9:	81 fd fe 00 00 00    	cmp    ebp,0xfe
c0019dff:	0f 8e e6 00 00 00    	jle    c0019eeb <EnvVarContainer::loadFrom(char const*, char const*)+0x1c5>
c0019e05:	83 ec 0c             	sub    esp,0xc
c0019e08:	8d 53 01             	lea    edx,[ebx+0x1]
c0019e0b:	29 dd                	sub    ebp,ebx
c0019e0d:	52                   	push   edx
c0019e0e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0019e12:	e8 29 5a ff ff       	call   c000f840 <malloc>
c0019e17:	8d 4d 04             	lea    ecx,[ebp+0x4]
c0019e1a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0019e1e:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0019e21:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0019e25:	e8 16 5a ff ff       	call   c000f840 <malloc>
c0019e2a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0019e2e:	83 c4 0c             	add    esp,0xc
c0019e31:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019e35:	52                   	push   edx
c0019e36:	6a 00                	push   0x0
c0019e38:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019e3c:	e8 37 69 fe ff       	call   c0000778 <memset>
c0019e41:	83 c4 0c             	add    esp,0xc
c0019e44:	53                   	push   ebx
c0019e45:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c0019e49:	55                   	push   ebp
c0019e4a:	01 eb                	add    ebx,ebp
c0019e4c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019e50:	e8 ef 68 fe ff       	call   c0000744 <memcpy>
c0019e55:	83 c4 0c             	add    esp,0xc
c0019e58:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0019e5c:	51                   	push   ecx
c0019e5d:	6a 00                	push   0x0
c0019e5f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019e63:	e8 10 69 fe ff       	call   c0000778 <memset>
c0019e68:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e6b:	e8 24 69 fe ff       	call   c0000794 <strlen>
c0019e70:	83 c4 0c             	add    esp,0xc
c0019e73:	50                   	push   eax
c0019e74:	53                   	push   ebx
c0019e75:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019e79:	e8 c6 68 fe ff       	call   c0000744 <memcpy>
c0019e7e:	5b                   	pop    ebx
c0019e7f:	58                   	pop    eax
c0019e80:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0019e84:	68 91 b5 02 c0       	push   0xc002b591
c0019e89:	e8 e3 8c ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0019e8e:	8b 06                	mov    eax,DWORD PTR [esi]
c0019e90:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c0019e93:	40                   	inc    eax
c0019e94:	83 c4 10             	add    esp,0x10
c0019e97:	89 06                	mov    DWORD PTR [esi],eax
c0019e99:	85 d2                	test   edx,edx
c0019e9b:	75 0c                	jne    c0019ea9 <EnvVarContainer::loadFrom(char const*, char const*)+0x183>
c0019e9d:	83 ec 0c             	sub    esp,0xc
c0019ea0:	6a 08                	push   0x8
c0019ea2:	e8 99 59 ff ff       	call   c000f840 <malloc>
c0019ea7:	eb 0c                	jmp    c0019eb5 <EnvVarContainer::loadFrom(char const*, char const*)+0x18f>
c0019ea9:	c1 e0 03             	shl    eax,0x3
c0019eac:	51                   	push   ecx
c0019ead:	51                   	push   ecx
c0019eae:	50                   	push   eax
c0019eaf:	52                   	push   edx
c0019eb0:	e8 77 59 ff ff       	call   c000f82c <realloc>
c0019eb5:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c0019eb8:	83 c4 10             	add    esp,0x10
c0019ebb:	31 db                	xor    ebx,ebx
c0019ebd:	52                   	push   edx
c0019ebe:	6a 08                	push   0x8
c0019ec0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019ec4:	50                   	push   eax
c0019ec5:	8b 16                	mov    edx,DWORD PTR [esi]
c0019ec7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0019eca:	8d 44 d0 f8          	lea    eax,[eax+edx*8-0x8]
c0019ece:	50                   	push   eax
c0019ecf:	e8 70 68 fe ff       	call   c0000744 <memcpy>
c0019ed4:	83 c4 0c             	add    esp,0xc
c0019ed7:	68 00 01 00 00       	push   0x100
c0019edc:	6a 00                	push   0x0
c0019ede:	55                   	push   ebp
c0019edf:	31 ed                	xor    ebp,ebp
c0019ee1:	e8 92 68 fe ff       	call   c0000778 <memset>
c0019ee6:	83 c4 10             	add    esp,0x10
c0019ee9:	eb 0d                	jmp    c0019ef8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019eeb:	3c 3d                	cmp    al,0x3d
c0019eed:	74 07                	je     c0019ef6 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d0>
c0019eef:	88 44 2c 20          	mov    BYTE PTR [esp+ebp*1+0x20],al
c0019ef3:	45                   	inc    ebp
c0019ef4:	eb 02                	jmp    c0019ef8 <EnvVarContainer::loadFrom(char const*, char const*)+0x1d2>
c0019ef6:	89 eb                	mov    ebx,ebp
c0019ef8:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0019efd:	0f 85 bd fe ff ff    	jne    c0019dc0 <EnvVarContainer::loadFrom(char const*, char const*)+0x9a>
c0019f03:	50                   	push   eax
c0019f04:	50                   	push   eax
c0019f05:	ff 36                	push   DWORD PTR [esi]
c0019f07:	68 9f b5 02 c0       	push   0xc002b59f
c0019f0c:	e8 60 8c ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0019f11:	81 c4 3c 01 00 00    	add    esp,0x13c
c0019f17:	5b                   	pop    ebx
c0019f18:	5e                   	pop    esi
c0019f19:	5f                   	pop    edi
c0019f1a:	5d                   	pop    ebp
c0019f1b:	c3                   	ret    

c0019f1c <EnvVarContainer::__loadSystem()>:
c0019f1c:	83 ec 10             	sub    esp,0x10
c0019f1f:	68 40 d5 02 c0       	push   0xc002d540
c0019f24:	68 ca b5 02 c0       	push   0xc002b5ca
c0019f29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f2d:	e8 f4 fd ff ff       	call   c0019d26 <EnvVarContainer::loadFrom(char const*, char const*)>
c0019f32:	83 c4 1c             	add    esp,0x1c
c0019f35:	c3                   	ret    

c0019f36 <EnvVarContainer::__loadUser()>:
c0019f36:	c3                   	ret    
c0019f37:	90                   	nop

c0019f38 <EnvVarContainer::EnvVarContainer(Process*)>:
c0019f38:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f3c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0019f42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f46:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0019f4a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0019f4d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019f51:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0019f58:	90                   	nop
c0019f59:	c3                   	ret    

c0019f5a <EnvVarContainer::~EnvVarContainer()>:
c0019f5a:	83 ec 0c             	sub    esp,0xc
c0019f5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f61:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019f64:	85 c0                	test   eax,eax
c0019f66:	74 1d                	je     c0019f85 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019f68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f6c:	8b 00                	mov    eax,DWORD PTR [eax]
c0019f6e:	85 c0                	test   eax,eax
c0019f70:	74 13                	je     c0019f85 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0019f72:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f76:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0019f79:	83 ec 0c             	sub    esp,0xc
c0019f7c:	50                   	push   eax
c0019f7d:	e8 ce 58 ff ff       	call   c000f850 <free>
c0019f82:	83 c4 10             	add    esp,0x10
c0019f85:	90                   	nop
c0019f86:	83 c4 0c             	add    esp,0xc
c0019f89:	c3                   	ret    

c0019f8a <Krnl::getEnv(Process*, char const*)>:
c0019f8a:	53                   	push   ebx
c0019f8b:	83 ec 08             	sub    esp,0x8
c0019f8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f92:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019f96:	39 05 74 15 03 c0    	cmp    DWORD PTR ds:0xc0031574,eax
c0019f9c:	74 04                	je     c0019fa2 <Krnl::getEnv(Process*, char const*)+0x18>
c0019f9e:	85 c0                	test   eax,eax
c0019fa0:	75 0b                	jne    c0019fad <Krnl::getEnv(Process*, char const*)+0x23>
c0019fa2:	a1 54 0b 03 c0       	mov    eax,ds:0xc0030b54
c0019fa7:	85 c0                	test   eax,eax
c0019fa9:	75 19                	jne    c0019fc4 <Krnl::getEnv(Process*, char const*)+0x3a>
c0019fab:	eb 27                	jmp    c0019fd4 <Krnl::getEnv(Process*, char const*)+0x4a>
c0019fad:	52                   	push   edx
c0019fae:	52                   	push   edx
c0019faf:	53                   	push   ebx
c0019fb0:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c0019fb6:	e8 5f fc ff ff       	call   c0019c1a <EnvVarContainer::getEnv(char const*)>
c0019fbb:	83 c4 10             	add    esp,0x10
c0019fbe:	85 c0                	test   eax,eax
c0019fc0:	75 28                	jne    c0019fea <Krnl::getEnv(Process*, char const*)+0x60>
c0019fc2:	eb de                	jmp    c0019fa2 <Krnl::getEnv(Process*, char const*)+0x18>
c0019fc4:	52                   	push   edx
c0019fc5:	52                   	push   edx
c0019fc6:	53                   	push   ebx
c0019fc7:	50                   	push   eax
c0019fc8:	e8 4d fc ff ff       	call   c0019c1a <EnvVarContainer::getEnv(char const*)>
c0019fcd:	83 c4 10             	add    esp,0x10
c0019fd0:	85 c0                	test   eax,eax
c0019fd2:	75 16                	jne    c0019fea <Krnl::getEnv(Process*, char const*)+0x60>
c0019fd4:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0019fd8:	a1 58 0b 03 c0       	mov    eax,ds:0xc0030b58
c0019fdd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0019fe1:	83 c4 08             	add    esp,0x8
c0019fe4:	5b                   	pop    ebx
c0019fe5:	e9 30 fc ff ff       	jmp    c0019c1a <EnvVarContainer::getEnv(char const*)>
c0019fea:	83 c4 08             	add    esp,0x8
c0019fed:	5b                   	pop    ebx
c0019fee:	c3                   	ret    

c0019fef <Krnl::setEnvSystem(char const*, char const*)>:
c0019fef:	83 ec 10             	sub    esp,0x10
c0019ff2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ff6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019ffa:	ff 35 58 0b 03 c0    	push   DWORD PTR ds:0xc0030b58
c001a000:	e8 53 fc ff ff       	call   c0019c58 <EnvVarContainer::setEnv(char const*, char const*)>
c001a005:	83 c4 1c             	add    esp,0x1c
c001a008:	c3                   	ret    

c001a009 <Krnl::setEnvUser(char const*, char const*)>:
c001a009:	a1 54 0b 03 c0       	mov    eax,ds:0xc0030b54
c001a00e:	85 c0                	test   eax,eax
c001a010:	74 15                	je     c001a027 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a012:	83 ec 10             	sub    esp,0x10
c001a015:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a019:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a01d:	50                   	push   eax
c001a01e:	e8 35 fc ff ff       	call   c0019c58 <EnvVarContainer::setEnv(char const*, char const*)>
c001a023:	83 c4 1c             	add    esp,0x1c
c001a026:	c3                   	ret    
c001a027:	c3                   	ret    

c001a028 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a028:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a02c:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a032:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a036:	e9 1d fc ff ff       	jmp    c0019c58 <EnvVarContainer::setEnv(char const*, char const*)>

c001a03b <Krnl::deleteEnvSystem(char const*)>:
c001a03b:	c3                   	ret    

c001a03c <Krnl::deleteEnvUser(char const*)>:
c001a03c:	c3                   	ret    

c001a03d <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a03d:	c3                   	ret    

c001a03e <Krnl::newProcessEnv(Process*)>:
c001a03e:	83 ec 28             	sub    esp,0x28
c001a041:	6a 0c                	push   0xc
c001a043:	e8 f8 57 ff ff       	call   c000f840 <malloc>
c001a048:	5a                   	pop    edx
c001a049:	59                   	pop    ecx
c001a04a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a04e:	50                   	push   eax
c001a04f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a053:	e8 e0 fe ff ff       	call   c0019f38 <EnvVarContainer::EnvVarContainer(Process*)>
c001a058:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a05c:	83 c4 2c             	add    esp,0x2c
c001a05f:	c3                   	ret    

c001a060 <Krnl::copyProcessEnv(Process*, Process*)>:
c001a060:	56                   	push   esi
c001a061:	53                   	push   ebx
c001a062:	83 ec 10             	sub    esp,0x10
c001a065:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a069:	8b b0 3a 07 00 00    	mov    esi,DWORD PTR [eax+0x73a]
c001a06f:	6a 0c                	push   0xc
c001a071:	e8 ca 57 ff ff       	call   c000f840 <malloc>
c001a076:	89 c3                	mov    ebx,eax
c001a078:	58                   	pop    eax
c001a079:	5a                   	pop    edx
c001a07a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a07e:	53                   	push   ebx
c001a07f:	e8 b4 fe ff ff       	call   c0019f38 <EnvVarContainer::EnvVarContainer(Process*)>
c001a084:	8b 06                	mov    eax,DWORD PTR [esi]
c001a086:	89 03                	mov    DWORD PTR [ebx],eax
c001a088:	c1 e0 03             	shl    eax,0x3
c001a08b:	89 04 24             	mov    DWORD PTR [esp],eax
c001a08e:	e8 ad 57 ff ff       	call   c000f840 <malloc>
c001a093:	83 c4 0c             	add    esp,0xc
c001a096:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a099:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001a09b:	8d 14 cd 00 00 00 00 	lea    edx,[ecx*8+0x0]
c001a0a2:	52                   	push   edx
c001a0a3:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001a0a6:	50                   	push   eax
c001a0a7:	e8 98 66 fe ff       	call   c0000744 <memcpy>
c001a0ac:	89 d8                	mov    eax,ebx
c001a0ae:	83 c4 14             	add    esp,0x14
c001a0b1:	5b                   	pop    ebx
c001a0b2:	5e                   	pop    esi
c001a0b3:	c3                   	ret    

c001a0b4 <Krnl::loadSystemEnv()>:
c001a0b4:	53                   	push   ebx
c001a0b5:	83 ec 14             	sub    esp,0x14
c001a0b8:	6a 0c                	push   0xc
c001a0ba:	e8 81 57 ff ff       	call   c000f840 <malloc>
c001a0bf:	89 c3                	mov    ebx,eax
c001a0c1:	58                   	pop    eax
c001a0c2:	5a                   	pop    edx
c001a0c3:	ff 35 74 15 03 c0    	push   DWORD PTR ds:0xc0031574
c001a0c9:	53                   	push   ebx
c001a0ca:	e8 69 fe ff ff       	call   c0019f38 <EnvVarContainer::EnvVarContainer(Process*)>
c001a0cf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a0d2:	89 1d 58 0b 03 c0    	mov    DWORD PTR ds:0xc0030b58,ebx
c001a0d8:	e8 3f fe ff ff       	call   c0019f1c <EnvVarContainer::__loadSystem()>
c001a0dd:	83 c4 18             	add    esp,0x18
c001a0e0:	5b                   	pop    ebx
c001a0e1:	c3                   	ret    

c001a0e2 <Krnl::loadUserEnv()>:
c001a0e2:	53                   	push   ebx
c001a0e3:	83 ec 14             	sub    esp,0x14
c001a0e6:	6a 0c                	push   0xc
c001a0e8:	e8 53 57 ff ff       	call   c000f840 <malloc>
c001a0ed:	89 c3                	mov    ebx,eax
c001a0ef:	58                   	pop    eax
c001a0f0:	5a                   	pop    edx
c001a0f1:	ff 35 74 15 03 c0    	push   DWORD PTR ds:0xc0031574
c001a0f7:	53                   	push   ebx
c001a0f8:	e8 3b fe ff ff       	call   c0019f38 <EnvVarContainer::EnvVarContainer(Process*)>
c001a0fd:	89 1d 54 0b 03 c0    	mov    DWORD PTR ds:0xc0030b54,ebx
c001a103:	83 c4 18             	add    esp,0x18
c001a106:	5b                   	pop    ebx
c001a107:	c3                   	ret    

c001a108 <Krnl::flushEnv()>:
c001a108:	c3                   	ret    

c001a109 <Krnl::getProcessTotalEnvCount(Process*)>:
c001a109:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a10d:	8b 15 54 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030b54
c001a113:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a119:	a1 58 0b 03 c0       	mov    eax,ds:0xc0030b58
c001a11e:	8b 00                	mov    eax,DWORD PTR [eax]
c001a120:	03 01                	add    eax,DWORD PTR [ecx]
c001a122:	85 d2                	test   edx,edx
c001a124:	74 02                	je     c001a128 <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a126:	03 02                	add    eax,DWORD PTR [edx]
c001a128:	c3                   	ret    

c001a129 <Krnl::getProcessEnvPair(Process*, int)>:
c001a129:	57                   	push   edi
c001a12a:	8b 0d 54 0b 03 c0    	mov    ecx,DWORD PTR ds:0xc0030b54
c001a130:	56                   	push   esi
c001a131:	85 c9                	test   ecx,ecx
c001a133:	53                   	push   ebx
c001a134:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a138:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a13c:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a142:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a146:	8b 02                	mov    eax,DWORD PTR [edx]
c001a148:	75 47                	jne    c001a191 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a14a:	39 c3                	cmp    ebx,eax
c001a14c:	7c 47                	jl     c001a195 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a14e:	8b 15 58 0b 03 c0    	mov    edx,DWORD PTR ds:0xc0030b58
c001a154:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a156:	01 c1                	add    ecx,eax
c001a158:	39 d9                	cmp    ecx,ebx
c001a15a:	7e 6c                	jle    c001a1c8 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a15c:	51                   	push   ecx
c001a15d:	89 d9                	mov    ecx,ebx
c001a15f:	29 c1                	sub    ecx,eax
c001a161:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a164:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a168:	53                   	push   ebx
c001a169:	68 ec b5 02 c0       	push   0xc002b5ec
c001a16e:	e8 fe 89 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001a173:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a179:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a17b:	a1 58 0b 03 c0       	mov    eax,ds:0xc0030b58
c001a180:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a183:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a187:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a18a:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a18d:	89 06                	mov    DWORD PTR [esi],eax
c001a18f:	eb 51                	jmp    c001a1e2 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a191:	39 c3                	cmp    ebx,eax
c001a193:	7d 05                	jge    c001a19a <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a195:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a198:	eb 20                	jmp    c001a1ba <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a19a:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a19c:	8d 14 07             	lea    edx,[edi+eax*1]
c001a19f:	39 da                	cmp    edx,ebx
c001a1a1:	7e 04                	jle    c001a1a7 <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a1a3:	29 c3                	sub    ebx,eax
c001a1a5:	eb 10                	jmp    c001a1b7 <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a1a7:	8b 0d 58 0b 03 c0    	mov    ecx,DWORD PTR ds:0xc0030b58
c001a1ad:	03 11                	add    edx,DWORD PTR [ecx]
c001a1af:	39 da                	cmp    edx,ebx
c001a1b1:	7e 15                	jle    c001a1c8 <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a1b3:	29 c3                	sub    ebx,eax
c001a1b5:	29 fb                	sub    ebx,edi
c001a1b7:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a1ba:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a1be:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a1c1:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a1c4:	89 06                	mov    DWORD PTR [esi],eax
c001a1c6:	eb 1d                	jmp    c001a1e5 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a1c8:	83 ec 0c             	sub    esp,0xc
c001a1cb:	68 00 b6 02 c0       	push   0xc002b600
c001a1d0:	e8 18 00 00 00       	call   c001a1ed <Krnl::panic(char const*)>
c001a1d5:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a1db:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a1e2:	83 c4 10             	add    esp,0x10
c001a1e5:	89 f0                	mov    eax,esi
c001a1e7:	5b                   	pop    ebx
c001a1e8:	5e                   	pop    esi
c001a1e9:	5f                   	pop    edi
c001a1ea:	c2 04 00             	ret    0x4

c001a1ed <Krnl::panic(char const*)>:
c001a1ed:	55                   	push   ebp
c001a1ee:	89 e5                	mov    ebp,esp
c001a1f0:	53                   	push   ebx
c001a1f1:	83 ec 0c             	sub    esp,0xc
c001a1f4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a1f7:	fa                   	cli    
c001a1f8:	c6 05 64 0b 03 c0 01 	mov    BYTE PTR ds:0xc0030b64,0x1
c001a1ff:	53                   	push   ebx
c001a200:	c6 05 44 cf 02 c0 00 	mov    BYTE PTR ds:0xc002cf44,0x0
c001a207:	68 1a b6 02 c0       	push   0xc002b61a
c001a20c:	e8 60 89 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001a211:	58                   	pop    eax
c001a212:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a217:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a21d:	e8 11 6b ff ff       	call   c0010d33 <setActiveTerminal(VgaText*)>
c001a222:	83 c4 0c             	add    esp,0xc
c001a225:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a22a:	6a 01                	push   0x1
c001a22c:	6a 0f                	push   0xf
c001a22e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a234:	e8 2b 65 ff ff       	call   c0010764 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a239:	58                   	pop    eax
c001a23a:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a23f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a245:	e8 8a 6d ff ff       	call   c0010fd4 <VgaText::clearScreen()>
c001a24a:	58                   	pop    eax
c001a24b:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a250:	5a                   	pop    edx
c001a251:	68 33 b6 02 c0       	push   0xc002b633
c001a256:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a25c:	e8 f1 6e ff ff       	call   c0011152 <VgaText::puts(char const*)>
c001a261:	59                   	pop    ecx
c001a262:	58                   	pop    eax
c001a263:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a268:	68 d8 b6 02 c0       	push   0xc002b6d8
c001a26d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a273:	e8 da 6e ff ff       	call   c0011152 <VgaText::puts(char const*)>
c001a278:	58                   	pop    eax
c001a279:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a27e:	5a                   	pop    edx
c001a27f:	68 4f b6 02 c0       	push   0xc002b64f
c001a284:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a28a:	e8 c3 6e ff ff       	call   c0011152 <VgaText::puts(char const*)>
c001a28f:	59                   	pop    ecx
c001a290:	58                   	pop    eax
c001a291:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a296:	53                   	push   ebx
c001a297:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a29d:	e8 b0 6e ff ff       	call   c0011152 <VgaText::puts(char const*)>
c001a2a2:	58                   	pop    eax
c001a2a3:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a2a8:	5a                   	pop    edx
c001a2a9:	68 6f b6 02 c0       	push   0xc002b66f
c001a2ae:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a2b4:	e8 99 6e ff ff       	call   c0011152 <VgaText::puts(char const*)>
c001a2b9:	a1 60 0b 03 c0       	mov    eax,ds:0xc0030b60
c001a2be:	83 c4 10             	add    esp,0x10
c001a2c1:	85 c0                	test   eax,eax
c001a2c3:	74 02                	je     c001a2c7 <Krnl::panic(char const*)+0xda>
c001a2c5:	ff d0                	call   eax
c001a2c7:	83 ec 0c             	sub    esp,0xc
c001a2ca:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a2cd:	e8 47 30 00 00       	call   c001d319 <Thr::getDriverNameFromAddress(unsigned long)>
c001a2d2:	83 c4 10             	add    esp,0x10
c001a2d5:	89 c3                	mov    ebx,eax
c001a2d7:	85 c0                	test   eax,eax
c001a2d9:	0f 84 50 02 00 00    	je     c001a52f <Krnl::panic(char const*)+0x342>
c001a2df:	83 ec 08             	sub    esp,0x8
c001a2e2:	8b 15 74 15 03 c0    	mov    edx,DWORD PTR ds:0xc0031574
c001a2e8:	68 14 b7 02 c0       	push   0xc002b714
c001a2ed:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a2f3:	e8 5a 6e ff ff       	call   c0011152 <VgaText::puts(char const*)>
c001a2f8:	58                   	pop    eax
c001a2f9:	5a                   	pop    edx
c001a2fa:	8b 15 74 15 03 c0    	mov    edx,DWORD PTR ds:0xc0031574
c001a300:	68 4f b6 02 c0       	push   0xc002b64f
c001a305:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a30b:	e8 42 6e ff ff       	call   c0011152 <VgaText::puts(char const*)>
c001a310:	59                   	pop    ecx
c001a311:	58                   	pop    eax
c001a312:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a317:	53                   	push   ebx
c001a318:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a31e:	e8 2f 6e ff ff       	call   c0011152 <VgaText::puts(char const*)>
c001a323:	83 c4 10             	add    esp,0x10
c001a326:	83 ec 08             	sub    esp,0x8
c001a329:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a32e:	68 6e b6 02 c0       	push   0xc002b66e
c001a333:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a339:	e8 14 6e ff ff       	call   c0011152 <VgaText::puts(char const*)>
c001a33e:	58                   	pop    eax
c001a33f:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a344:	5a                   	pop    edx
c001a345:	68 6c b7 02 c0       	push   0xc002b76c
c001a34a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a350:	e8 fd 6d ff ff       	call   c0011152 <VgaText::puts(char const*)>
c001a355:	59                   	pop    ecx
c001a356:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a35b:	5b                   	pop    ebx
c001a35c:	68 ac b7 02 c0       	push   0xc002b7ac
c001a361:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a367:	e8 e6 6d ff ff       	call   c0011152 <VgaText::puts(char const*)>
c001a36c:	58                   	pop    eax
c001a36d:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a372:	5a                   	pop    edx
c001a373:	68 5a b6 02 c0       	push   0xc002b65a
c001a378:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a37e:	e8 cf 6d ff ff       	call   c0011152 <VgaText::puts(char const*)>
c001a383:	59                   	pop    ecx
c001a384:	5b                   	pop    ebx
c001a385:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a388:	68 72 b6 02 c0       	push   0xc002b672
c001a38d:	e8 df 87 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001a392:	58                   	pop    eax
c001a393:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a396:	5a                   	pop    edx
c001a397:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a39a:	68 7b b6 02 c0       	push   0xc002b67b
c001a39f:	e8 cd 87 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001a3a4:	59                   	pop    ecx
c001a3a5:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a3a8:	5b                   	pop    ebx
c001a3a9:	8b 00                	mov    eax,DWORD PTR [eax]
c001a3ab:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a3ae:	68 84 b6 02 c0       	push   0xc002b684
c001a3b3:	e8 b9 87 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001a3b8:	58                   	pop    eax
c001a3b9:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a3be:	5a                   	pop    edx
c001a3bf:	68 f0 b7 02 c0       	push   0xc002b7f0
c001a3c4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3ca:	e8 83 6d ff ff       	call   c0011152 <VgaText::puts(char const*)>
c001a3cf:	59                   	pop    ecx
c001a3d0:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a3d5:	5b                   	pop    ebx
c001a3d6:	68 8d b6 02 c0       	push   0xc002b68d
c001a3db:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3e1:	e8 6c 6d ff ff       	call   c0011152 <VgaText::puts(char const*)>
c001a3e6:	0f 20 c0             	mov    eax,cr0
c001a3e9:	5a                   	pop    edx
c001a3ea:	59                   	pop    ecx
c001a3eb:	50                   	push   eax
c001a3ec:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a3f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a3f7:	e8 7c 6d ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c001a3fc:	5b                   	pop    ebx
c001a3fd:	58                   	pop    eax
c001a3fe:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a403:	68 97 b6 02 c0       	push   0xc002b697
c001a408:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a40e:	e8 3f 6d ff ff       	call   c0011152 <VgaText::puts(char const*)>
c001a413:	0f 20 d0             	mov    eax,cr2
c001a416:	5a                   	pop    edx
c001a417:	59                   	pop    ecx
c001a418:	50                   	push   eax
c001a419:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a41e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a424:	e8 4f 6d ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c001a429:	5b                   	pop    ebx
c001a42a:	58                   	pop    eax
c001a42b:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a430:	68 a1 b6 02 c0       	push   0xc002b6a1
c001a435:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a43b:	e8 12 6d ff ff       	call   c0011152 <VgaText::puts(char const*)>
c001a440:	0f 20 d8             	mov    eax,cr3
c001a443:	5a                   	pop    edx
c001a444:	59                   	pop    ecx
c001a445:	50                   	push   eax
c001a446:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a44b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a451:	e8 22 6d ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c001a456:	5b                   	pop    ebx
c001a457:	58                   	pop    eax
c001a458:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a45d:	68 b4 b6 02 c0       	push   0xc002b6b4
c001a462:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a468:	e8 e5 6c ff ff       	call   c0011152 <VgaText::puts(char const*)>
c001a46d:	0f 20 e0             	mov    eax,cr4
c001a470:	5a                   	pop    edx
c001a471:	59                   	pop    ecx
c001a472:	50                   	push   eax
c001a473:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a478:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a47e:	e8 f5 6c ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c001a483:	5b                   	pop    ebx
c001a484:	58                   	pop    eax
c001a485:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a48a:	68 be b6 02 c0       	push   0xc002b6be
c001a48f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a495:	e8 b8 6c ff ff       	call   c0011152 <VgaText::puts(char const*)>
c001a49a:	5a                   	pop    edx
c001a49b:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a4a0:	59                   	pop    ecx
c001a4a1:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a4a7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a4aa:	50                   	push   eax
c001a4ab:	e8 c8 6c ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c001a4b0:	5b                   	pop    ebx
c001a4b1:	58                   	pop    eax
c001a4b2:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a4b7:	68 d5 b6 02 c0       	push   0xc002b6d5
c001a4bc:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4c2:	e8 8b 6c ff ff       	call   c0011152 <VgaText::puts(char const*)>
c001a4c7:	5a                   	pop    edx
c001a4c8:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a4cd:	59                   	pop    ecx
c001a4ce:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a4d4:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a4d7:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a4da:	50                   	push   eax
c001a4db:	e8 98 6c ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c001a4e0:	5b                   	pop    ebx
c001a4e1:	58                   	pop    eax
c001a4e2:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a4e7:	68 d5 b6 02 c0       	push   0xc002b6d5
c001a4ec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a4f2:	e8 5b 6c ff ff       	call   c0011152 <VgaText::puts(char const*)>
c001a4f7:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a4fc:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001a4ff:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001a505:	8b 12                	mov    edx,DWORD PTR [edx]
c001a507:	59                   	pop    ecx
c001a508:	5b                   	pop    ebx
c001a509:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001a50c:	50                   	push   eax
c001a50d:	e8 66 6c ff ff       	call   c0011178 <VgaText::putx(unsigned int)>
c001a512:	83 c4 10             	add    esp,0x10
c001a515:	b2 fe                	mov    dl,0xfe
c001a517:	e4 60                	in     al,0x60
c001a519:	3c 1c                	cmp    al,0x1c
c001a51b:	74 04                	je     c001a521 <Krnl::panic(char const*)+0x334>
c001a51d:	3c 5a                	cmp    al,0x5a
c001a51f:	75 f6                	jne    c001a517 <Krnl::panic(char const*)+0x32a>
c001a521:	e4 64                	in     al,0x64
c001a523:	a8 02                	test   al,0x2
c001a525:	75 fa                	jne    c001a521 <Krnl::panic(char const*)+0x334>
c001a527:	88 d0                	mov    al,dl
c001a529:	e6 64                	out    0x64,al
c001a52b:	fa                   	cli    
c001a52c:	f4                   	hlt    
c001a52d:	eb e8                	jmp    c001a517 <Krnl::panic(char const*)+0x32a>
c001a52f:	50                   	push   eax
c001a530:	50                   	push   eax
c001a531:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a536:	68 40 b7 02 c0       	push   0xc002b740
c001a53b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a541:	e8 0c 6c ff ff       	call   c0011152 <VgaText::puts(char const*)>
c001a546:	58                   	pop    eax
c001a547:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a54c:	5a                   	pop    edx
c001a54d:	68 4f b6 02 c0       	push   0xc002b64f
c001a552:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a558:	e8 f5 6b ff ff       	call   c0011152 <VgaText::puts(char const*)>
c001a55d:	59                   	pop    ecx
c001a55e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001a563:	5b                   	pop    ebx
c001a564:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001a567:	83 c0 0c             	add    eax,0xc
c001a56a:	50                   	push   eax
c001a56b:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001a570:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a576:	e8 d7 6b ff ff       	call   c0011152 <VgaText::puts(char const*)>
c001a57b:	83 c4 10             	add    esp,0x10
c001a57e:	e9 a3 fd ff ff       	jmp    c001a326 <Krnl::panic(char const*)+0x139>

c001a583 <Net::switchEndian16(unsigned short)>:
c001a583:	83 ec 04             	sub    esp,0x4
c001a586:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a58a:	66 89 04 24          	mov    WORD PTR [esp],ax
c001a58e:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a592:	c1 f8 08             	sar    eax,0x8
c001a595:	89 c2                	mov    edx,eax
c001a597:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001a59b:	c1 e0 08             	shl    eax,0x8
c001a59e:	09 d0                	or     eax,edx
c001a5a0:	83 c4 04             	add    esp,0x4
c001a5a3:	c3                   	ret    

c001a5a4 <Net::switchEndian32(unsigned int)>:
c001a5a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5a8:	c1 e8 18             	shr    eax,0x18
c001a5ab:	89 c2                	mov    edx,eax
c001a5ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5b1:	c1 e0 08             	shl    eax,0x8
c001a5b4:	25 00 00 ff 00       	and    eax,0xff0000
c001a5b9:	09 c2                	or     edx,eax
c001a5bb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5bf:	c1 e8 08             	shr    eax,0x8
c001a5c2:	25 00 ff 00 00       	and    eax,0xff00
c001a5c7:	09 c2                	or     edx,eax
c001a5c9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a5cd:	c1 e0 18             	shl    eax,0x18
c001a5d0:	09 d0                	or     eax,edx
c001a5d2:	c3                   	ret    

c001a5d3 <Net::crc32Calc(unsigned char*, int)>:
c001a5d3:	83 ec 10             	sub    esp,0x10
c001a5d6:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a5db:	75 07                	jne    c001a5e4 <Net::crc32Calc(unsigned char*, int)+0x11>
c001a5dd:	b8 00 00 00 00       	mov    eax,0x0
c001a5e2:	eb 7c                	jmp    c001a660 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a5e4:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001a5e9:	7f 07                	jg     c001a5f2 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001a5eb:	b8 00 00 00 00       	mov    eax,0x0
c001a5f0:	eb 6e                	jmp    c001a660 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001a5f2:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001a5fa:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a602:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a606:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001a60a:	7d 4e                	jge    c001a65a <Net::crc32Calc(unsigned char*, int)+0x87>
c001a60c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a610:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a614:	01 d0                	add    eax,edx
c001a616:	8a 00                	mov    al,BYTE PTR [eax]
c001a618:	0f b6 c0             	movzx  eax,al
c001a61b:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001a61f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a627:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001a62c:	7f 26                	jg     c001a654 <Net::crc32Calc(unsigned char*, int)+0x81>
c001a62e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a632:	83 e0 01             	and    eax,0x1
c001a635:	74 0d                	je     c001a644 <Net::crc32Calc(unsigned char*, int)+0x71>
c001a637:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a63b:	d1 e8                	shr    eax,1
c001a63d:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001a642:	eb 06                	jmp    c001a64a <Net::crc32Calc(unsigned char*, int)+0x77>
c001a644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a648:	d1 e8                	shr    eax,1
c001a64a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a64e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a652:	eb d3                	jmp    c001a627 <Net::crc32Calc(unsigned char*, int)+0x54>
c001a654:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001a658:	eb a8                	jmp    c001a602 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001a65a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a65e:	f7 d0                	not    eax
c001a660:	83 c4 10             	add    esp,0x10
c001a663:	c3                   	ret    

c001a664 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001a664:	83 ec 1c             	sub    esp,0x1c
c001a667:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a66b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a66f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a677:	83 7c 24 0c 06       	cmp    DWORD PTR [esp+0xc],0x6
c001a67c:	7f 14                	jg     c001a692 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x2e>
c001a67e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a682:	8d 50 01             	lea    edx,[eax+0x1]
c001a685:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a689:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001a68c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001a690:	eb e5                	jmp    c001a677 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x13>
c001a692:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a696:	8d 50 01             	lea    edx,[eax+0x1]
c001a699:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a69d:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001a6a0:	83 ec 04             	sub    esp,0x4
c001a6a3:	6a 06                	push   0x6
c001a6a5:	8d 44 24 36          	lea    eax,[esp+0x36]
c001a6a9:	50                   	push   eax
c001a6aa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a6ae:	e8 91 60 fe ff       	call   c0000744 <memcpy>
c001a6b3:	83 c4 10             	add    esp,0x10
c001a6b6:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a6bb:	83 ec 04             	sub    esp,0x4
c001a6be:	6a 06                	push   0x6
c001a6c0:	8d 44 24 30          	lea    eax,[esp+0x30]
c001a6c4:	50                   	push   eax
c001a6c5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a6c9:	e8 76 60 fe ff       	call   c0000744 <memcpy>
c001a6ce:	83 c4 10             	add    esp,0x10
c001a6d1:	83 44 24 38 06       	add    DWORD PTR [esp+0x38],0x6
c001a6d6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a6da:	0f b7 c0             	movzx  eax,ax
c001a6dd:	c1 f8 08             	sar    eax,0x8
c001a6e0:	89 c1                	mov    ecx,eax
c001a6e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a6e6:	8d 50 01             	lea    edx,[eax+0x1]
c001a6e9:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a6ed:	88 ca                	mov    dl,cl
c001a6ef:	88 10                	mov    BYTE PTR [eax],dl
c001a6f1:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001a6f5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a6f9:	8d 48 01             	lea    ecx,[eax+0x1]
c001a6fc:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001a700:	88 10                	mov    BYTE PTR [eax],dl
c001a702:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001a706:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a70a:	83 ec 04             	sub    esp,0x4
c001a70d:	52                   	push   edx
c001a70e:	50                   	push   eax
c001a70f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001a713:	e8 2c 60 fe ff       	call   c0000744 <memcpy>
c001a718:	83 c4 10             	add    esp,0x10
c001a71b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a71f:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c001a723:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a727:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c001a72b:	83 ec 08             	sub    esp,0x8
c001a72e:	50                   	push   eax
c001a72f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a733:	e8 9b fe ff ff       	call   c001a5d3 <Net::crc32Calc(unsigned char*, int)>
c001a738:	83 c4 10             	add    esp,0x10
c001a73b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a73f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a743:	c1 e8 18             	shr    eax,0x18
c001a746:	89 c1                	mov    ecx,eax
c001a748:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a74c:	8d 50 01             	lea    edx,[eax+0x1]
c001a74f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a753:	88 ca                	mov    dl,cl
c001a755:	88 10                	mov    BYTE PTR [eax],dl
c001a757:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a75b:	c1 e8 10             	shr    eax,0x10
c001a75e:	89 c1                	mov    ecx,eax
c001a760:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a764:	8d 50 01             	lea    edx,[eax+0x1]
c001a767:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a76b:	88 ca                	mov    dl,cl
c001a76d:	88 10                	mov    BYTE PTR [eax],dl
c001a76f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a773:	c1 e8 08             	shr    eax,0x8
c001a776:	89 c1                	mov    ecx,eax
c001a778:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a77c:	8d 50 01             	lea    edx,[eax+0x1]
c001a77f:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a783:	88 ca                	mov    dl,cl
c001a785:	88 10                	mov    BYTE PTR [eax],dl
c001a787:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a78b:	8d 50 01             	lea    edx,[eax+0x1]
c001a78e:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c001a792:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a796:	88 10                	mov    BYTE PTR [eax],dl
c001a798:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001a79c:	83 c4 1c             	add    esp,0x1c
c001a79f:	c3                   	ret    

c001a7a0 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001a7a0:	83 ec 2c             	sub    esp,0x2c
c001a7a3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a7a7:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a7ab:	83 44 24 34 08       	add    DWORD PTR [esp+0x34],0x8
c001a7b0:	83 ec 04             	sub    esp,0x4
c001a7b3:	6a 06                	push   0x6
c001a7b5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a7b9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a7bd:	83 c0 0e             	add    eax,0xe
c001a7c0:	50                   	push   eax
c001a7c1:	e8 7e 5f fe ff       	call   c0000744 <memcpy>
c001a7c6:	83 c4 10             	add    esp,0x10
c001a7c9:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a7ce:	83 ec 04             	sub    esp,0x4
c001a7d1:	6a 06                	push   0x6
c001a7d3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a7d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001a7db:	83 c0 08             	add    eax,0x8
c001a7de:	50                   	push   eax
c001a7df:	e8 60 5f fe ff       	call   c0000744 <memcpy>
c001a7e4:	83 c4 10             	add    esp,0x10
c001a7e7:	83 44 24 34 06       	add    DWORD PTR [esp+0x34],0x6
c001a7ec:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a7f0:	8d 50 01             	lea    edx,[eax+0x1]
c001a7f3:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a7f7:	8a 00                	mov    al,BYTE PTR [eax]
c001a7f9:	0f b6 c0             	movzx  eax,al
c001a7fc:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c001a801:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a805:	8d 50 01             	lea    edx,[eax+0x1]
c001a808:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a80c:	8a 00                	mov    al,BYTE PTR [eax]
c001a80e:	0f b6 c0             	movzx  eax,al
c001a811:	66 89 44 24 18       	mov    WORD PTR [esp+0x18],ax
c001a816:	0f b7 44 24 1a       	movzx  eax,WORD PTR [esp+0x1a]
c001a81b:	c1 e0 08             	shl    eax,0x8
c001a81e:	89 c2                	mov    edx,eax
c001a820:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001a824:	09 d0                	or     eax,edx
c001a826:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001a82a:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001a82e:	83 7c 24 38 ff       	cmp    DWORD PTR [esp+0x38],0xffffffff
c001a833:	75 3a                	jne    c001a86f <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a835:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a839:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a83c:	66 3d dc 05          	cmp    ax,0x5dc
c001a840:	77 10                	ja     c001a852 <Net::unwrapEthernetFrame(unsigned char*, int)+0xb2>
c001a842:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a846:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a849:	0f b7 c0             	movzx  eax,ax
c001a84c:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001a850:	eb 1d                	jmp    c001a86f <Net::unwrapEthernetFrame(unsigned char*, int)+0xcf>
c001a852:	83 ec 0c             	sub    esp,0xc
c001a855:	68 18 b8 02 c0       	push   0xc002b818
c001a85a:	e8 12 83 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001a85f:	83 c4 10             	add    esp,0x10
c001a862:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a866:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001a86a:	e9 c0 00 00 00       	jmp    c001a92f <Net::unwrapEthernetFrame(unsigned char*, int)+0x18f>
c001a86f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001a873:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a877:	8b 00                	mov    eax,DWORD PTR [eax]
c001a879:	83 ec 04             	sub    esp,0x4
c001a87c:	52                   	push   edx
c001a87d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001a881:	50                   	push   eax
c001a882:	e8 bd 5e fe ff       	call   c0000744 <memcpy>
c001a887:	83 c4 10             	add    esp,0x10
c001a88a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001a88e:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c001a892:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a896:	8d 50 01             	lea    edx,[eax+0x1]
c001a899:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a89d:	8a 00                	mov    al,BYTE PTR [eax]
c001a89f:	0f b6 c0             	movzx  eax,al
c001a8a2:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a8a6:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a8aa:	8d 50 01             	lea    edx,[eax+0x1]
c001a8ad:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a8b1:	8a 00                	mov    al,BYTE PTR [eax]
c001a8b3:	0f b6 c0             	movzx  eax,al
c001a8b6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a8ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a8be:	8d 50 01             	lea    edx,[eax+0x1]
c001a8c1:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a8c5:	8a 00                	mov    al,BYTE PTR [eax]
c001a8c7:	0f b6 c0             	movzx  eax,al
c001a8ca:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a8ce:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a8d2:	8d 50 01             	lea    edx,[eax+0x1]
c001a8d5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001a8d9:	8a 00                	mov    al,BYTE PTR [eax]
c001a8db:	0f b6 c0             	movzx  eax,al
c001a8de:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001a8e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a8e6:	c1 e0 18             	shl    eax,0x18
c001a8e9:	89 c2                	mov    edx,eax
c001a8eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8ef:	c1 e0 10             	shl    eax,0x10
c001a8f2:	09 c2                	or     edx,eax
c001a8f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a8f8:	c1 e0 08             	shl    eax,0x8
c001a8fb:	09 d0                	or     eax,edx
c001a8fd:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c001a901:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a905:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001a909:	2b 44 24 1c          	sub    eax,DWORD PTR [esp+0x1c]
c001a90d:	83 e8 04             	sub    eax,0x4
c001a910:	83 ec 08             	sub    esp,0x8
c001a913:	50                   	push   eax
c001a914:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a918:	e8 b6 fc ff ff       	call   c001a5d3 <Net::crc32Calc(unsigned char*, int)>
c001a91d:	83 c4 10             	add    esp,0x10
c001a920:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001a924:	0f 94 c2             	sete   dl
c001a927:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a92b:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001a92e:	90                   	nop
c001a92f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001a933:	83 c4 2c             	add    esp,0x2c
c001a936:	c2 04 00             	ret    0x4

c001a939 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001a939:	55                   	push   ebp
c001a93a:	57                   	push   edi
c001a93b:	56                   	push   esi
c001a93c:	53                   	push   ebx
c001a93d:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001a943:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001a94a:	8a 1e                	mov    bl,BYTE PTR [esi]
c001a94c:	8d 6e 01             	lea    ebp,[esi+0x1]
c001a94f:	80 fb 40             	cmp    bl,0x40
c001a952:	75 1b                	jne    c001a96f <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001a954:	8a 16                	mov    dl,BYTE PTR [esi]
c001a956:	84 d2                	test   dl,dl
c001a958:	0f 84 f1 00 00 00    	je     c001aa4f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a95e:	8d 46 01             	lea    eax,[esi+0x1]
c001a961:	80 fa 3a             	cmp    dl,0x3a
c001a964:	74 04                	je     c001a96a <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001a966:	89 c6                	mov    esi,eax
c001a968:	eb ea                	jmp    c001a954 <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001a96a:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a96d:	89 c6                	mov    esi,eax
c001a96f:	50                   	push   eax
c001a970:	6a 40                	push   0x40
c001a972:	6a 00                	push   0x0
c001a974:	8d 44 24 24          	lea    eax,[esp+0x24]
c001a978:	50                   	push   eax
c001a979:	e8 fa 5d fe ff       	call   c0000778 <memset>
c001a97e:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001a985:	31 c0                	xor    eax,eax
c001a987:	83 c4 10             	add    esp,0x10
c001a98a:	8a 0f                	mov    cl,BYTE PTR [edi]
c001a98c:	84 c9                	test   cl,cl
c001a98e:	0f 84 bb 00 00 00    	je     c001aa4f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a994:	3d c7 00 00 00       	cmp    eax,0xc7
c001a999:	0f 8f b0 00 00 00    	jg     c001aa4f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a99f:	80 f9 0a             	cmp    cl,0xa
c001a9a2:	0f 85 98 00 00 00    	jne    c001aa40 <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001a9a8:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001a9ad:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001a9b1:	a8 df                	test   al,0xdf
c001a9b3:	0f 94 c1             	sete   cl
c001a9b6:	3c 23                	cmp    al,0x23
c001a9b8:	0f 94 c2             	sete   dl
c001a9bb:	08 d1                	or     cl,dl
c001a9bd:	75 4a                	jne    c001aa09 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a9bf:	8d 50 f7             	lea    edx,[eax-0x9]
c001a9c2:	80 fa 01             	cmp    dl,0x1
c001a9c5:	76 42                	jbe    c001aa09 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a9c7:	3c 5b                	cmp    al,0x5b
c001a9c9:	75 42                	jne    c001aa0d <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001a9cb:	80 fb 40             	cmp    bl,0x40
c001a9ce:	75 39                	jne    c001aa09 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001a9d0:	83 ec 0c             	sub    esp,0xc
c001a9d3:	8d 54 24 65          	lea    edx,[esp+0x65]
c001a9d7:	52                   	push   edx
c001a9d8:	e8 b7 5d fe ff       	call   c0000794 <strlen>
c001a9dd:	83 c4 10             	add    esp,0x10
c001a9e0:	83 f8 3f             	cmp    eax,0x3f
c001a9e3:	77 6a                	ja     c001aa4f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001a9e5:	50                   	push   eax
c001a9e6:	50                   	push   eax
c001a9e7:	8d 54 24 61          	lea    edx,[esp+0x61]
c001a9eb:	52                   	push   edx
c001a9ec:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a9f0:	52                   	push   edx
c001a9f1:	e8 3e 5e fe ff       	call   c0000834 <strcpy>
c001a9f6:	58                   	pop    eax
c001a9f7:	8d 54 24 24          	lea    edx,[esp+0x24]
c001a9fb:	52                   	push   edx
c001a9fc:	e8 93 5d fe ff       	call   c0000794 <strlen>
c001aa01:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001aa06:	83 c4 10             	add    esp,0x10
c001aa09:	31 d2                	xor    edx,edx
c001aa0b:	eb 3a                	jmp    c001aa47 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001aa0d:	80 fb 40             	cmp    bl,0x40
c001aa10:	74 06                	je     c001aa18 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001aa12:	8d 44 24 58          	lea    eax,[esp+0x58]
c001aa16:	eb 20                	jmp    c001aa38 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001aa18:	50                   	push   eax
c001aa19:	50                   	push   eax
c001aa1a:	55                   	push   ebp
c001aa1b:	8d 44 24 24          	lea    eax,[esp+0x24]
c001aa1f:	50                   	push   eax
c001aa20:	e8 9b 5e fe ff       	call   c00008c0 <strcmp>
c001aa25:	83 c4 10             	add    esp,0x10
c001aa28:	85 c0                	test   eax,eax
c001aa2a:	75 dd                	jne    c001aa09 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aa2c:	eb e4                	jmp    c001aa12 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001aa2e:	8d 50 01             	lea    edx,[eax+0x1]
c001aa31:	80 f9 3d             	cmp    cl,0x3d
c001aa34:	74 1d                	je     c001aa53 <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001aa36:	89 d0                	mov    eax,edx
c001aa38:	8a 08                	mov    cl,BYTE PTR [eax]
c001aa3a:	84 c9                	test   cl,cl
c001aa3c:	75 f0                	jne    c001aa2e <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001aa3e:	eb 0f                	jmp    c001aa4f <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001aa40:	8d 50 01             	lea    edx,[eax+0x1]
c001aa43:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001aa47:	47                   	inc    edi
c001aa48:	89 d0                	mov    eax,edx
c001aa4a:	e9 3b ff ff ff       	jmp    c001a98a <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001aa4f:	31 c0                	xor    eax,eax
c001aa51:	eb 33                	jmp    c001aa86 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001aa53:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001aa57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001aa5a:	50                   	push   eax
c001aa5b:	50                   	push   eax
c001aa5c:	8d 44 24 60          	lea    eax,[esp+0x60]
c001aa60:	50                   	push   eax
c001aa61:	56                   	push   esi
c001aa62:	e8 59 5e fe ff       	call   c00008c0 <strcmp>
c001aa67:	83 c4 10             	add    esp,0x10
c001aa6a:	85 c0                	test   eax,eax
c001aa6c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001aa70:	75 97                	jne    c001aa09 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001aa72:	51                   	push   ecx
c001aa73:	51                   	push   ecx
c001aa74:	52                   	push   edx
c001aa75:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001aa7c:	e8 b3 5d fe ff       	call   c0000834 <strcpy>
c001aa81:	83 c4 10             	add    esp,0x10
c001aa84:	b0 01                	mov    al,0x1
c001aa86:	81 c4 2c 01 00 00    	add    esp,0x12c
c001aa8c:	5b                   	pop    ebx
c001aa8d:	5e                   	pop    esi
c001aa8e:	5f                   	pop    edi
c001aa8f:	5d                   	pop    ebp
c001aa90:	c3                   	ret    

c001aa91 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001aa91:	57                   	push   edi
c001aa92:	56                   	push   esi
c001aa93:	53                   	push   ebx
c001aa94:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001aa9a:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001aaa1:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001aaa8:	53                   	push   ebx
c001aaa9:	e8 e6 5c fe ff       	call   c0000794 <strlen>
c001aaae:	89 34 24             	mov    DWORD PTR [esp],esi
c001aab1:	89 c7                	mov    edi,eax
c001aab3:	e8 dc 5c fe ff       	call   c0000794 <strlen>
c001aab8:	83 c4 10             	add    esp,0x10
c001aabb:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001aabf:	3d ff 00 00 00       	cmp    eax,0xff
c001aac4:	0f 87 d3 00 00 00    	ja     c001ab9d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001aaca:	57                   	push   edi
c001aacb:	57                   	push   edi
c001aacc:	56                   	push   esi
c001aacd:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001aad1:	56                   	push   esi
c001aad2:	e8 5d 5d fe ff       	call   c0000834 <strcpy>
c001aad7:	58                   	pop    eax
c001aad8:	5a                   	pop    edx
c001aad9:	68 e1 bd 02 c0       	push   0xc002bde1
c001aade:	56                   	push   esi
c001aadf:	e8 90 5e fe ff       	call   c0000974 <strcat>
c001aae4:	59                   	pop    ecx
c001aae5:	5f                   	pop    edi
c001aae6:	53                   	push   ebx
c001aae7:	56                   	push   esi
c001aae8:	e8 87 5e fe ff       	call   c0000974 <strcat>
c001aaed:	58                   	pop    eax
c001aaee:	5a                   	pop    edx
c001aaef:	68 64 b8 02 c0       	push   0xc002b864
c001aaf4:	56                   	push   esi
c001aaf5:	e8 7a 5e fe ff       	call   c0000974 <strcat>
c001aafa:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001ab01:	e8 3a 4d ff ff       	call   c000f840 <malloc>
c001ab06:	83 c4 0c             	add    esp,0xc
c001ab09:	89 c3                	mov    ebx,eax
c001ab0b:	ff 35 74 15 03 c0    	push   DWORD PTR ds:0xc0031574
c001ab11:	56                   	push   esi
c001ab12:	50                   	push   eax
c001ab13:	e8 b2 85 ff ff       	call   c00130ca <File::File(char const*, Process*)>
c001ab18:	83 c4 10             	add    esp,0x10
c001ab1b:	85 db                	test   ebx,ebx
c001ab1d:	74 7e                	je     c001ab9d <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001ab1f:	51                   	push   ecx
c001ab20:	51                   	push   ecx
c001ab21:	6a 01                	push   0x1
c001ab23:	53                   	push   ebx
c001ab24:	e8 05 86 ff ff       	call   c001312e <File::open(FileOpenMode)>
c001ab29:	83 c4 10             	add    esp,0x10
c001ab2c:	85 c0                	test   eax,eax
c001ab2e:	74 08                	je     c001ab38 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001ab30:	83 ec 0c             	sub    esp,0xc
c001ab33:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab35:	53                   	push   ebx
c001ab36:	eb 5f                	jmp    c001ab97 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001ab38:	52                   	push   edx
c001ab39:	8d 44 24 17          	lea    eax,[esp+0x17]
c001ab3d:	50                   	push   eax
c001ab3e:	8d 44 24 20          	lea    eax,[esp+0x20]
c001ab42:	50                   	push   eax
c001ab43:	53                   	push   ebx
c001ab44:	e8 91 88 ff ff       	call   c00133da <File::stat(unsigned long long*, bool*)>
c001ab49:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001ab4d:	83 c4 10             	add    esp,0x10
c001ab50:	89 c1                	mov    ecx,eax
c001ab52:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001ab56:	74 31                	je     c001ab89 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ab58:	83 ec 0c             	sub    esp,0xc
c001ab5b:	50                   	push   eax
c001ab5c:	e8 df 4c ff ff       	call   c000f840 <malloc>
c001ab61:	89 c6                	mov    esi,eax
c001ab63:	58                   	pop    eax
c001ab64:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab66:	8d 54 24 20          	lea    edx,[esp+0x20]
c001ab6a:	52                   	push   edx
c001ab6b:	56                   	push   esi
c001ab6c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ab70:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001ab74:	53                   	push   ebx
c001ab75:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ab78:	83 c4 20             	add    esp,0x20
c001ab7b:	85 c0                	test   eax,eax
c001ab7d:	75 0a                	jne    c001ab89 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001ab7f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ab83:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001ab87:	74 18                	je     c001aba1 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001ab89:	83 ec 0c             	sub    esp,0xc
c001ab8c:	53                   	push   ebx
c001ab8d:	e8 fa 85 ff ff       	call   c001318c <File::close()>
c001ab92:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ab94:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ab97:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001ab9a:	83 c4 10             	add    esp,0x10
c001ab9d:	31 c0                	xor    eax,eax
c001ab9f:	eb 3b                	jmp    c001abdc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001aba1:	83 ec 0c             	sub    esp,0xc
c001aba4:	53                   	push   ebx
c001aba5:	e8 e2 85 ff ff       	call   c001318c <File::close()>
c001abaa:	8b 03                	mov    eax,DWORD PTR [ebx]
c001abac:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001abaf:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001abb2:	83 c4 0c             	add    esp,0xc
c001abb5:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001abbc:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001abc3:	56                   	push   esi
c001abc4:	e8 70 fd ff ff       	call   c001a939 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001abc9:	89 34 24             	mov    DWORD PTR [esp],esi
c001abcc:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001abd0:	e8 7b 4c ff ff       	call   c000f850 <free>
c001abd5:	83 c4 10             	add    esp,0x10
c001abd8:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001abdc:	81 c4 20 01 00 00    	add    esp,0x120
c001abe2:	5b                   	pop    ebx
c001abe3:	5e                   	pop    esi
c001abe4:	5f                   	pop    edi
c001abe5:	c3                   	ret    

c001abe6 <Reg::getLine(char*, char*, char*)>:
c001abe6:	57                   	push   edi
c001abe7:	56                   	push   esi
c001abe8:	53                   	push   ebx
c001abe9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001abed:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001abf1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001abf5:	57                   	push   edi
c001abf6:	56                   	push   esi
c001abf7:	53                   	push   ebx
c001abf8:	68 69 b8 02 c0       	push   0xc002b869
c001abfd:	e8 8f fe ff ff       	call   c001aa91 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ac02:	83 c4 10             	add    esp,0x10
c001ac05:	84 c0                	test   al,al
c001ac07:	75 10                	jne    c001ac19 <Reg::getLine(char*, char*, char*)+0x33>
c001ac09:	57                   	push   edi
c001ac0a:	56                   	push   esi
c001ac0b:	53                   	push   ebx
c001ac0c:	68 8e b8 02 c0       	push   0xc002b88e
c001ac11:	e8 7b fe ff ff       	call   c001aa91 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001ac16:	83 c4 10             	add    esp,0x10
c001ac19:	5b                   	pop    ebx
c001ac1a:	5e                   	pop    esi
c001ac1b:	5f                   	pop    edi
c001ac1c:	c3                   	ret    

c001ac1d <Reg::readInt(char*, char*, int*)>:
c001ac1d:	55                   	push   ebp
c001ac1e:	57                   	push   edi
c001ac1f:	56                   	push   esi
c001ac20:	53                   	push   ebx
c001ac21:	81 ec f0 00 00 00    	sub    esp,0xf0
c001ac27:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001ac2b:	57                   	push   edi
c001ac2c:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ac33:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001ac3a:	e8 a7 ff ff ff       	call   c001abe6 <Reg::getLine(char*, char*, char*)>
c001ac3f:	83 c4 10             	add    esp,0x10
c001ac42:	84 c0                	test   al,al
c001ac44:	0f 84 b3 00 00 00    	je     c001acfd <Reg::readInt(char*, char*, int*)+0xe0>
c001ac4a:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001ac4e:	80 fa 2b             	cmp    dl,0x2b
c001ac51:	74 0c                	je     c001ac5f <Reg::readInt(char*, char*, int*)+0x42>
c001ac53:	80 fa 2d             	cmp    dl,0x2d
c001ac56:	75 0e                	jne    c001ac66 <Reg::readInt(char*, char*, int*)+0x49>
c001ac58:	ba 01 00 00 00       	mov    edx,0x1
c001ac5d:	eb 0b                	jmp    c001ac6a <Reg::readInt(char*, char*, int*)+0x4d>
c001ac5f:	ba 01 00 00 00       	mov    edx,0x1
c001ac64:	eb 02                	jmp    c001ac68 <Reg::readInt(char*, char*, int*)+0x4b>
c001ac66:	31 d2                	xor    edx,edx
c001ac68:	31 c0                	xor    eax,eax
c001ac6a:	be 0a 00 00 00       	mov    esi,0xa
c001ac6f:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001ac74:	75 20                	jne    c001ac96 <Reg::readInt(char*, char*, int*)+0x79>
c001ac76:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001ac7a:	80 f9 78             	cmp    cl,0x78
c001ac7d:	75 0a                	jne    c001ac89 <Reg::readInt(char*, char*, int*)+0x6c>
c001ac7f:	83 c2 02             	add    edx,0x2
c001ac82:	be 10 00 00 00       	mov    esi,0x10
c001ac87:	eb 0d                	jmp    c001ac96 <Reg::readInt(char*, char*, int*)+0x79>
c001ac89:	80 f9 62             	cmp    cl,0x62
c001ac8c:	75 08                	jne    c001ac96 <Reg::readInt(char*, char*, int*)+0x79>
c001ac8e:	83 c2 02             	add    edx,0x2
c001ac91:	be 02 00 00 00       	mov    esi,0x2
c001ac96:	01 d7                	add    edi,edx
c001ac98:	31 d2                	xor    edx,edx
c001ac9a:	8a 1f                	mov    bl,BYTE PTR [edi]
c001ac9c:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001aca0:	80 fb 0d             	cmp    bl,0xd
c001aca3:	0f 94 c3             	sete   bl
c001aca6:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001acab:	0f 94 c1             	sete   cl
c001acae:	08 cb                	or     bl,cl
c001acb0:	75 3a                	jne    c001acec <Reg::readInt(char*, char*, int*)+0xcf>
c001acb2:	0f af d6             	imul   edx,esi
c001acb5:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001acba:	83 fe 10             	cmp    esi,0x10
c001acbd:	75 26                	jne    c001ace5 <Reg::readInt(char*, char*, int*)+0xc8>
c001acbf:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001acc3:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001acc6:	89 e9                	mov    ecx,ebp
c001acc8:	80 f9 05             	cmp    cl,0x5
c001accb:	77 06                	ja     c001acd3 <Reg::readInt(char*, char*, int*)+0xb6>
c001accd:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001acd1:	eb 16                	jmp    c001ace9 <Reg::readInt(char*, char*, int*)+0xcc>
c001acd3:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001acd7:	83 e9 61             	sub    ecx,0x61
c001acda:	80 f9 05             	cmp    cl,0x5
c001acdd:	77 06                	ja     c001ace5 <Reg::readInt(char*, char*, int*)+0xc8>
c001acdf:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001ace3:	eb 04                	jmp    c001ace9 <Reg::readInt(char*, char*, int*)+0xcc>
c001ace5:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001ace9:	47                   	inc    edi
c001acea:	eb ae                	jmp    c001ac9a <Reg::readInt(char*, char*, int*)+0x7d>
c001acec:	84 c0                	test   al,al
c001acee:	74 02                	je     c001acf2 <Reg::readInt(char*, char*, int*)+0xd5>
c001acf0:	f7 da                	neg    edx
c001acf2:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001acf9:	89 10                	mov    DWORD PTR [eax],edx
c001acfb:	88 d8                	mov    al,bl
c001acfd:	81 c4 ec 00 00 00    	add    esp,0xec
c001ad03:	5b                   	pop    ebx
c001ad04:	5e                   	pop    esi
c001ad05:	5f                   	pop    edi
c001ad06:	5d                   	pop    ebp
c001ad07:	c3                   	ret    

c001ad08 <Reg::readString(char*, char*, char*, int)>:
c001ad08:	57                   	push   edi
c001ad09:	56                   	push   esi
c001ad0a:	53                   	push   ebx
c001ad0b:	81 ec d4 00 00 00    	sub    esp,0xd4
c001ad11:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001ad18:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001ad1c:	57                   	push   edi
c001ad1d:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ad24:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001ad2b:	e8 b6 fe ff ff       	call   c001abe6 <Reg::getLine(char*, char*, char*)>
c001ad30:	83 c4 10             	add    esp,0x10
c001ad33:	89 c6                	mov    esi,eax
c001ad35:	84 c0                	test   al,al
c001ad37:	74 44                	je     c001ad7d <Reg::readString(char*, char*, char*, int)+0x75>
c001ad39:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001ad40:	31 c0                	xor    eax,eax
c001ad42:	4a                   	dec    edx
c001ad43:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001ad46:	84 c9                	test   cl,cl
c001ad48:	74 0f                	je     c001ad59 <Reg::readString(char*, char*, char*, int)+0x51>
c001ad4a:	39 c2                	cmp    edx,eax
c001ad4c:	7e 0b                	jle    c001ad59 <Reg::readString(char*, char*, char*, int)+0x51>
c001ad4e:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001ad51:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001ad56:	40                   	inc    eax
c001ad57:	eb ea                	jmp    c001ad43 <Reg::readString(char*, char*, char*, int)+0x3b>
c001ad59:	83 ec 0c             	sub    esp,0xc
c001ad5c:	53                   	push   ebx
c001ad5d:	e8 32 5a fe ff       	call   c0000794 <strlen>
c001ad62:	83 c4 10             	add    esp,0x10
c001ad65:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001ad6a:	75 11                	jne    c001ad7d <Reg::readString(char*, char*, char*, int)+0x75>
c001ad6c:	83 ec 0c             	sub    esp,0xc
c001ad6f:	53                   	push   ebx
c001ad70:	e8 1f 5a fe ff       	call   c0000794 <strlen>
c001ad75:	83 c4 10             	add    esp,0x10
c001ad78:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001ad7d:	81 c4 d0 00 00 00    	add    esp,0xd0
c001ad83:	89 f0                	mov    eax,esi
c001ad85:	5b                   	pop    ebx
c001ad86:	5e                   	pop    esi
c001ad87:	5f                   	pop    edi
c001ad88:	c3                   	ret    

c001ad89 <Reg::readBool(char*, char*, bool*)>:
c001ad89:	83 ec 20             	sub    esp,0x20
c001ad8c:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ad90:	50                   	push   eax
c001ad91:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad95:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ad99:	e8 7f fe ff ff       	call   c001ac1d <Reg::readInt(char*, char*, int*)>
c001ad9e:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001ada3:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001ada7:	0f 95 02             	setne  BYTE PTR [edx]
c001adaa:	83 c4 2c             	add    esp,0x2c
c001adad:	c3                   	ret    

c001adae <Reg::readBoolWithDefault(char*, char*, bool)>:
c001adae:	53                   	push   ebx
c001adaf:	83 ec 1c             	sub    esp,0x1c
c001adb2:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001adb6:	8d 44 24 13          	lea    eax,[esp+0x13]
c001adba:	50                   	push   eax
c001adbb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001adbf:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001adc3:	e8 c1 ff ff ff       	call   c001ad89 <Reg::readBool(char*, char*, bool*)>
c001adc8:	83 c4 10             	add    esp,0x10
c001adcb:	84 c0                	test   al,al
c001adcd:	74 04                	je     c001add3 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001adcf:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001add3:	88 d8                	mov    al,bl
c001add5:	83 c4 18             	add    esp,0x18
c001add8:	5b                   	pop    ebx
c001add9:	c3                   	ret    

c001adda <Reg::readIntWithDefault(char*, char*, int)>:
c001adda:	53                   	push   ebx
c001addb:	83 ec 1c             	sub    esp,0x1c
c001adde:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001ade2:	8d 44 24 10          	lea    eax,[esp+0x10]
c001ade6:	50                   	push   eax
c001ade7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001adeb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001adef:	e8 29 fe ff ff       	call   c001ac1d <Reg::readInt(char*, char*, int*)>
c001adf4:	83 c4 10             	add    esp,0x10
c001adf7:	84 c0                	test   al,al
c001adf9:	74 04                	je     c001adff <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001adfb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001adff:	89 d8                	mov    eax,ebx
c001ae01:	83 c4 18             	add    esp,0x18
c001ae04:	5b                   	pop    ebx
c001ae05:	c3                   	ret    

c001ae06 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001ae06:	57                   	push   edi
c001ae07:	56                   	push   esi
c001ae08:	53                   	push   ebx
c001ae09:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ae0d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001ae11:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001ae15:	56                   	push   esi
c001ae16:	53                   	push   ebx
c001ae17:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae1b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ae1f:	e8 e4 fe ff ff       	call   c001ad08 <Reg::readString(char*, char*, char*, int)>
c001ae24:	83 c4 10             	add    esp,0x10
c001ae27:	84 c0                	test   al,al
c001ae29:	75 1b                	jne    c001ae46 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x40>
c001ae2b:	50                   	push   eax
c001ae2c:	56                   	push   esi
c001ae2d:	4e                   	dec    esi
c001ae2e:	6a 00                	push   0x0
c001ae30:	53                   	push   ebx
c001ae31:	e8 42 59 fe ff       	call   c0000778 <memset>
c001ae36:	83 c4 0c             	add    esp,0xc
c001ae39:	56                   	push   esi
c001ae3a:	57                   	push   edi
c001ae3b:	53                   	push   ebx
c001ae3c:	89 fb                	mov    ebx,edi
c001ae3e:	e8 01 59 fe ff       	call   c0000744 <memcpy>
c001ae43:	83 c4 10             	add    esp,0x10
c001ae46:	89 d8                	mov    eax,ebx
c001ae48:	5b                   	pop    ebx
c001ae49:	5e                   	pop    esi
c001ae4a:	5f                   	pop    edi
c001ae4b:	c3                   	ret    

c001ae4c <Sys::eject(regs*)>:
c001ae4c:	83 ec 0c             	sub    esp,0xc
c001ae4f:	83 ca ff             	or     edx,0xffffffff
c001ae52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ae56:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001ae59:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ae5e:	83 e9 41             	sub    ecx,0x41
c001ae61:	83 f9 19             	cmp    ecx,0x19
c001ae64:	77 18                	ja     c001ae7e <Sys::eject(regs*)+0x32>
c001ae66:	8b 0c 8d 20 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd19e0]
c001ae6d:	85 c9                	test   ecx,ecx
c001ae6f:	74 0d                	je     c001ae7e <Sys::eject(regs*)+0x32>
c001ae71:	83 ec 0c             	sub    esp,0xc
c001ae74:	51                   	push   ecx
c001ae75:	e8 78 b4 ff ff       	call   c00162f2 <LogicalDisk::eject()>
c001ae7a:	83 c4 10             	add    esp,0x10
c001ae7d:	99                   	cdq    
c001ae7e:	83 c4 0c             	add    esp,0xc
c001ae81:	c3                   	ret    

c001ae82 <Sys::exit(regs*)>:
c001ae82:	83 ec 18             	sub    esp,0x18
c001ae85:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae89:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001ae8c:	e8 c4 35 00 00       	call   c001e455 <terminateTask(int)>
c001ae91:	83 c8 ff             	or     eax,0xffffffff
c001ae94:	83 c4 1c             	add    esp,0x1c
c001ae97:	89 c2                	mov    edx,eax
c001ae99:	c3                   	ret    

c001ae9a <Sys::getCwd(regs*)>:
c001ae9a:	83 ec 10             	sub    esp,0x10
c001ae9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001aea1:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001aea4:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001aea7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aeac:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001aeaf:	e8 18 80 ff ff       	call   c0012ecc <Fs::getcwd(Process*, char*, int)>
c001aeb4:	83 c4 1c             	add    esp,0x1c
c001aeb7:	99                   	cdq    
c001aeb8:	c3                   	ret    

c001aeb9 <Sys::getPID(regs*)>:
c001aeb9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001aebe:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001aec1:	8b 00                	mov    eax,DWORD PTR [eax]
c001aec3:	99                   	cdq    
c001aec4:	c3                   	ret    

c001aec5 <Sys::getRAMData(regs*)>:
c001aec5:	8b 0d 54 e0 02 c0    	mov    ecx,DWORD PTR ds:0xc002e054
c001aecb:	6b 05 50 e0 02 c0 64 	imul   eax,DWORD PTR ds:0xc002e050,0x64
c001aed2:	99                   	cdq    
c001aed3:	f7 f9                	idiv   ecx
c001aed5:	c1 e0 18             	shl    eax,0x18
c001aed8:	09 c8                	or     eax,ecx
c001aeda:	99                   	cdq    
c001aedb:	c3                   	ret    

c001aedc <Sys::loadDLL(regs*)>:
c001aedc:	56                   	push   esi
c001aedd:	53                   	push   ebx
c001aede:	31 d2                	xor    edx,edx
c001aee0:	51                   	push   ecx
c001aee1:	b8 01 00 00 00       	mov    eax,0x1
c001aee6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001aeea:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001aeee:	0f 84 8c 00 00 00    	je     c001af80 <Sys::loadDLL(regs*)+0xa4>
c001aef4:	83 ec 0c             	sub    esp,0xc
c001aef7:	68 14 01 00 00       	push   0x114
c001aefc:	e8 3f 49 ff ff       	call   c000f840 <malloc>
c001af01:	83 c4 0c             	add    esp,0xc
c001af04:	89 c3                	mov    ebx,eax
c001af06:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af0b:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001af0e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001af11:	53                   	push   ebx
c001af12:	e8 b3 81 ff ff       	call   c00130ca <File::File(char const*, Process*)>
c001af17:	83 c4 10             	add    esp,0x10
c001af1a:	31 d2                	xor    edx,edx
c001af1c:	b8 02 00 00 00       	mov    eax,0x2
c001af21:	85 db                	test   ebx,ebx
c001af23:	74 5b                	je     c001af80 <Sys::loadDLL(regs*)+0xa4>
c001af25:	83 ec 0c             	sub    esp,0xc
c001af28:	53                   	push   ebx
c001af29:	e8 6e 84 ff ff       	call   c001339c <File::exists()>
c001af2e:	83 c4 10             	add    esp,0x10
c001af31:	84 c0                	test   al,al
c001af33:	8b 03                	mov    eax,DWORD PTR [ebx]
c001af35:	75 11                	jne    c001af48 <Sys::loadDLL(regs*)+0x6c>
c001af37:	83 ec 0c             	sub    esp,0xc
c001af3a:	53                   	push   ebx
c001af3b:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af3e:	83 c4 10             	add    esp,0x10
c001af41:	b8 03 00 00 00       	mov    eax,0x3
c001af46:	eb 36                	jmp    c001af7e <Sys::loadDLL(regs*)+0xa2>
c001af48:	83 ec 0c             	sub    esp,0xc
c001af4b:	53                   	push   ebx
c001af4c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001af4f:	58                   	pop    eax
c001af50:	5a                   	pop    edx
c001af51:	6a 00                	push   0x0
c001af53:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001af56:	e8 0f 24 00 00       	call   c001d36a <Thr::loadDLL(char const*, bool)>
c001af5b:	83 c4 10             	add    esp,0x10
c001af5e:	89 c1                	mov    ecx,eax
c001af60:	31 d2                	xor    edx,edx
c001af62:	b8 04 00 00 00       	mov    eax,0x4
c001af67:	85 c9                	test   ecx,ecx
c001af69:	74 15                	je     c001af80 <Sys::loadDLL(regs*)+0xa4>
c001af6b:	53                   	push   ebx
c001af6c:	53                   	push   ebx
c001af6d:	ff 35 08 e0 02 c0    	push   DWORD PTR ds:0xc002e008
c001af73:	51                   	push   ecx
c001af74:	e8 25 26 00 00       	call   c001d59e <Thr::executeDLL(unsigned long, void*)>
c001af79:	83 c4 10             	add    esp,0x10
c001af7c:	31 c0                	xor    eax,eax
c001af7e:	31 d2                	xor    edx,edx
c001af80:	59                   	pop    ecx
c001af81:	5b                   	pop    ebx
c001af82:	5e                   	pop    esi
c001af83:	c3                   	ret    

c001af84 <Sys::read(regs*)>:
c001af84:	57                   	push   edi
c001af85:	56                   	push   esi
c001af86:	53                   	push   ebx
c001af87:	83 ec 10             	sub    esp,0x10
c001af8a:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001af8e:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001af91:	83 f8 02             	cmp    eax,0x2
c001af94:	77 10                	ja     c001afa6 <Sys::read(regs*)+0x22>
c001af96:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001af9b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001af9e:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001afa4:	eb 0e                	jmp    c001afb4 <Sys::read(regs*)+0x30>
c001afa6:	83 ec 0c             	sub    esp,0xc
c001afa9:	50                   	push   eax
c001afaa:	e8 7c 6a ff ff       	call   c0011a2b <getFromFileDescriptor(int)>
c001afaf:	83 c4 10             	add    esp,0x10
c001afb2:	89 c1                	mov    ecx,eax
c001afb4:	83 c8 ff             	or     eax,0xffffffff
c001afb7:	85 c9                	test   ecx,ecx
c001afb9:	89 c2                	mov    edx,eax
c001afbb:	74 28                	je     c001afe5 <Sys::read(regs*)+0x61>
c001afbd:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001afc5:	31 ff                	xor    edi,edi
c001afc7:	83 ec 0c             	sub    esp,0xc
c001afca:	8b 01                	mov    eax,DWORD PTR [ecx]
c001afcc:	8d 54 24 18          	lea    edx,[esp+0x18]
c001afd0:	52                   	push   edx
c001afd1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001afd4:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001afd7:	57                   	push   edi
c001afd8:	56                   	push   esi
c001afd9:	51                   	push   ecx
c001afda:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001afdd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001afe1:	83 c4 20             	add    esp,0x20
c001afe4:	99                   	cdq    
c001afe5:	83 c4 10             	add    esp,0x10
c001afe8:	5b                   	pop    ebx
c001afe9:	5e                   	pop    esi
c001afea:	5f                   	pop    edi
c001afeb:	c3                   	ret    

c001afec <Sys::sbrk(regs*)>:
c001afec:	56                   	push   esi
c001afed:	53                   	push   ebx
c001afee:	83 ec 0c             	sub    esp,0xc
c001aff1:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001aff5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001affa:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001affd:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c001b003:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
c001b006:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b009:	68 a9 b8 02 c0       	push   0xc002b8a9
c001b00e:	e8 5e 7b ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001b013:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b016:	83 c4 10             	add    esp,0x10
c001b019:	85 c0                	test   eax,eax
c001b01b:	75 0a                	jne    c001b027 <Sys::sbrk(regs*)+0x3b>
c001b01d:	50                   	push   eax
c001b01e:	50                   	push   eax
c001b01f:	53                   	push   ebx
c001b020:	68 c5 b8 02 c0       	push   0xc002b8c5
c001b025:	eb 54                	jmp    c001b07b <Sys::sbrk(regs*)+0x8f>
c001b027:	79 0a                	jns    c001b033 <Sys::sbrk(regs*)+0x47>
c001b029:	56                   	push   esi
c001b02a:	56                   	push   esi
c001b02b:	53                   	push   ebx
c001b02c:	68 d8 b8 02 c0       	push   0xc002b8d8
c001b031:	eb 48                	jmp    c001b07b <Sys::sbrk(regs*)+0x8f>
c001b033:	3d 00 00 00 04       	cmp    eax,0x4000000
c001b038:	76 17                	jbe    c001b051 <Sys::sbrk(regs*)+0x65>
c001b03a:	51                   	push   ecx
c001b03b:	51                   	push   ecx
c001b03c:	53                   	push   ebx
c001b03d:	68 ea b8 02 c0       	push   0xc002b8ea
c001b042:	e8 2a 7b ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001b047:	83 c8 ff             	or     eax,0xffffffff
c001b04a:	83 c4 10             	add    esp,0x10
c001b04d:	89 c2                	mov    edx,eax
c001b04f:	eb 36                	jmp    c001b087 <Sys::sbrk(regs*)+0x9b>
c001b051:	05 ff 0f 00 00       	add    eax,0xfff
c001b056:	56                   	push   esi
c001b057:	c1 e8 0c             	shr    eax,0xc
c001b05a:	68 07 04 00 00       	push   0x407
c001b05f:	50                   	push   eax
c001b060:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b065:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b068:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001b06e:	e8 d9 72 ff ff       	call   c001234c <VAS::allocatePages(int, int)>
c001b073:	58                   	pop    eax
c001b074:	5a                   	pop    edx
c001b075:	53                   	push   ebx
c001b076:	68 03 b9 02 c0       	push   0xc002b903
c001b07b:	e8 f1 7a ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001b080:	89 d8                	mov    eax,ebx
c001b082:	31 d2                	xor    edx,edx
c001b084:	83 c4 10             	add    esp,0x10
c001b087:	59                   	pop    ecx
c001b088:	5b                   	pop    ebx
c001b089:	5e                   	pop    esi
c001b08a:	c3                   	ret    

c001b08b <Sys::setCwd(regs*)>:
c001b08b:	83 ec 14             	sub    esp,0x14
c001b08e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b092:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b095:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b09a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b09d:	e8 99 83 ff ff       	call   c001343b <Fs::setcwd(Process*, char*)>
c001b0a2:	83 c4 1c             	add    esp,0x1c
c001b0a5:	99                   	cdq    
c001b0a6:	c3                   	ret    

c001b0a7 <Sys::setTime(regs*)>:
c001b0a7:	55                   	push   ebp
c001b0a8:	31 d2                	xor    edx,edx
c001b0aa:	57                   	push   edi
c001b0ab:	bf 18 00 00 00       	mov    edi,0x18
c001b0b0:	56                   	push   esi
c001b0b1:	53                   	push   ebx
c001b0b2:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b0b7:	83 ec 30             	sub    esp,0x30
c001b0ba:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b0be:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b0c1:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b0c4:	f7 f3                	div    ebx
c001b0c6:	89 d6                	mov    esi,edx
c001b0c8:	31 d2                	xor    edx,edx
c001b0ca:	f7 f3                	div    ebx
c001b0cc:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b0cf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b0d3:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b0d8:	31 d2                	xor    edx,edx
c001b0da:	f7 f3                	div    ebx
c001b0dc:	31 d2                	xor    edx,edx
c001b0de:	bb 0c 00 00 00       	mov    ebx,0xc
c001b0e3:	f7 f7                	div    edi
c001b0e5:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b0e8:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b0ec:	0f b7 cd             	movzx  ecx,bp
c001b0ef:	56                   	push   esi
c001b0f0:	89 c7                	mov    edi,eax
c001b0f2:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b0f6:	c1 e6 10             	shl    esi,0x10
c001b0f9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b0fd:	83 e7 1f             	and    edi,0x1f
c001b100:	51                   	push   ecx
c001b101:	47                   	inc    edi
c001b102:	c1 e8 05             	shr    eax,0x5
c001b105:	31 d2                	xor    edx,edx
c001b107:	f7 f3                	div    ebx
c001b109:	31 db                	xor    ebx,ebx
c001b10b:	52                   	push   edx
c001b10c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b110:	57                   	push   edi
c001b111:	68 29 b9 02 c0       	push   0xc002b929
c001b116:	e8 56 7a ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001b11b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b11f:	89 f8                	mov    eax,edi
c001b121:	31 c9                	xor    ecx,ecx
c001b123:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b127:	88 c1                	mov    cl,al
c001b129:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b12f:	88 d5                	mov    ch,dl
c001b131:	c1 e0 10             	shl    eax,0x10
c001b134:	0f b7 d1             	movzx  edx,cx
c001b137:	09 c2                	or     edx,eax
c001b139:	89 d8                	mov    eax,ebx
c001b13b:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b140:	09 f0                	or     eax,esi
c001b142:	89 c3                	mov    ebx,eax
c001b144:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b148:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b14c:	83 c4 18             	add    esp,0x18
c001b14f:	53                   	push   ebx
c001b150:	52                   	push   edx
c001b151:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b155:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b159:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b15d:	e8 f3 89 ff ff       	call   c0013b55 <datetimeToSeconds(datetime_t)>
c001b162:	83 c4 0c             	add    esp,0xc
c001b165:	52                   	push   edx
c001b166:	50                   	push   eax
c001b167:	56                   	push   esi
c001b168:	e8 6f 8b ff ff       	call   c0013cdc <secondsToDatetime(unsigned long long)>
c001b16d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b171:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b175:	51                   	push   ecx
c001b176:	89 d6                	mov    esi,edx
c001b178:	51                   	push   ecx
c001b179:	c1 ee 10             	shr    esi,0x10
c001b17c:	89 f3                	mov    ebx,esi
c001b17e:	0f b6 f3             	movzx  esi,bl
c001b181:	56                   	push   esi
c001b182:	0f b6 f6             	movzx  esi,dh
c001b185:	0f b6 d2             	movzx  edx,dl
c001b188:	56                   	push   esi
c001b189:	52                   	push   edx
c001b18a:	89 c2                	mov    edx,eax
c001b18c:	c1 ea 10             	shr    edx,0x10
c001b18f:	52                   	push   edx
c001b190:	0f b6 d4             	movzx  edx,ah
c001b193:	0f b6 c0             	movzx  eax,al
c001b196:	52                   	push   edx
c001b197:	50                   	push   eax
c001b198:	68 45 b9 02 c0       	push   0xc002b945
c001b19d:	e8 cf 79 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001b1a2:	83 c4 2c             	add    esp,0x2c
c001b1a5:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c001b1aa:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b1ae:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b1b2:	53                   	push   ebx
c001b1b3:	51                   	push   ecx
c001b1b4:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b1ba:	e8 bd 8a ff ff       	call   c0013c7c <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b1bf:	83 f0 01             	xor    eax,0x1
c001b1c2:	31 d2                	xor    edx,edx
c001b1c4:	0f b6 c0             	movzx  eax,al
c001b1c7:	83 c4 3c             	add    esp,0x3c
c001b1ca:	5b                   	pop    ebx
c001b1cb:	5e                   	pop    esi
c001b1cc:	5f                   	pop    edi
c001b1cd:	5d                   	pop    ebp
c001b1ce:	c3                   	ret    

c001b1cf <Sys::timezone(regs*)>:
c001b1cf:	53                   	push   ebx
c001b1d0:	83 ec 08             	sub    esp,0x8
c001b1d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b1d7:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b1db:	75 17                	jne    c001b1f4 <Sys::timezone(regs*)+0x25>
c001b1dd:	83 ec 0c             	sub    esp,0xc
c001b1e0:	68 61 b9 02 c0       	push   0xc002b961
c001b1e5:	e8 87 79 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001b1ea:	83 c8 ff             	or     eax,0xffffffff
c001b1ed:	83 c4 10             	add    esp,0x10
c001b1f0:	89 c2                	mov    edx,eax
c001b1f2:	eb 20                	jmp    c001b214 <Sys::timezone(regs*)+0x45>
c001b1f4:	83 ec 0c             	sub    esp,0xc
c001b1f7:	68 99 b9 02 c0       	push   0xc002b999
c001b1fc:	e8 70 79 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001b201:	58                   	pop    eax
c001b202:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b205:	e8 d4 87 ff ff       	call   c00139de <User::loadClockSettings(int)>
c001b20a:	83 c4 10             	add    esp,0x10
c001b20d:	b8 01 00 00 00       	mov    eax,0x1
c001b212:	31 d2                	xor    edx,edx
c001b214:	83 c4 08             	add    esp,0x8
c001b217:	5b                   	pop    ebx
c001b218:	c3                   	ret    

c001b219 <Sys::write(regs*)>:
c001b219:	57                   	push   edi
c001b21a:	56                   	push   esi
c001b21b:	53                   	push   ebx
c001b21c:	83 ec 10             	sub    esp,0x10
c001b21f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b223:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b226:	83 f8 02             	cmp    eax,0x2
c001b229:	77 10                	ja     c001b23b <Sys::write(regs*)+0x22>
c001b22b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b230:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b233:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b239:	eb 0e                	jmp    c001b249 <Sys::write(regs*)+0x30>
c001b23b:	83 ec 0c             	sub    esp,0xc
c001b23e:	50                   	push   eax
c001b23f:	e8 e7 67 ff ff       	call   c0011a2b <getFromFileDescriptor(int)>
c001b244:	83 c4 10             	add    esp,0x10
c001b247:	89 c1                	mov    ecx,eax
c001b249:	83 c8 ff             	or     eax,0xffffffff
c001b24c:	85 c9                	test   ecx,ecx
c001b24e:	89 c2                	mov    edx,eax
c001b250:	74 28                	je     c001b27a <Sys::write(regs*)+0x61>
c001b252:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b25a:	31 ff                	xor    edi,edi
c001b25c:	83 ec 0c             	sub    esp,0xc
c001b25f:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b261:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b265:	52                   	push   edx
c001b266:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b269:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b26c:	57                   	push   edi
c001b26d:	56                   	push   esi
c001b26e:	51                   	push   ecx
c001b26f:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b272:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b276:	83 c4 20             	add    esp,0x20
c001b279:	99                   	cdq    
c001b27a:	83 c4 10             	add    esp,0x10
c001b27d:	5b                   	pop    ebx
c001b27e:	5e                   	pop    esi
c001b27f:	5f                   	pop    edi
c001b280:	c3                   	ret    

c001b281 <Sys::wsbe(regs*)>:
c001b281:	57                   	push   edi
c001b282:	b9 0b 00 00 00       	mov    ecx,0xb
c001b287:	56                   	push   esi
c001b288:	be d8 b9 02 c0       	mov    esi,0xc002b9d8
c001b28d:	53                   	push   ebx
c001b28e:	83 ec 30             	sub    esp,0x30
c001b291:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b295:	fc                   	cld    
c001b296:	83 ec 0c             	sub    esp,0xc
c001b299:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b29b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b29f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b2a4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b2a7:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b2ad:	8b 06                	mov    eax,DWORD PTR [esi]
c001b2af:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b2b2:	57                   	push   edi
c001b2b3:	e8 dc 54 fe ff       	call   c0000794 <strlen>
c001b2b8:	5a                   	pop    edx
c001b2b9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b2bd:	52                   	push   edx
c001b2be:	31 d2                	xor    edx,edx
c001b2c0:	57                   	push   edi
c001b2c1:	52                   	push   edx
c001b2c2:	50                   	push   eax
c001b2c3:	56                   	push   esi
c001b2c4:	ff d3                	call   ebx
c001b2c6:	83 c4 14             	add    esp,0x14
c001b2c9:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b2cd:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b2d0:	e8 80 31 00 00       	call   c001e455 <terminateTask(int)>
c001b2d5:	83 c4 40             	add    esp,0x40
c001b2d8:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b2dd:	5b                   	pop    ebx
c001b2de:	31 d2                	xor    edx,edx
c001b2e0:	5e                   	pop    esi
c001b2e1:	5f                   	pop    edi
c001b2e2:	c3                   	ret    

c001b2e3 <Sys::yield(regs*)>:
c001b2e3:	57                   	push   edi
c001b2e4:	56                   	push   esi
c001b2e5:	53                   	push   ebx
c001b2e6:	e8 27 27 00 00       	call   c001da12 <lockScheduler()>
c001b2eb:	e8 5e 2a 00 00       	call   c001dd4e <schedule()>
c001b2f0:	e8 1f 27 00 00       	call   c001da14 <unlockScheduler()>
c001b2f5:	8b 35 90 e6 02 c0    	mov    esi,DWORD PTR ds:0xc002e690
c001b2fb:	8b 3d 94 e6 02 c0    	mov    edi,DWORD PTR ds:0xc002e694
c001b301:	89 f0                	mov    eax,esi
c001b303:	89 fb                	mov    ebx,edi
c001b305:	89 f1                	mov    ecx,esi
c001b307:	c1 e0 07             	shl    eax,0x7
c001b30a:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001b30e:	25 80 30 0f 00       	and    eax,0xf3080
c001b313:	c1 eb 17             	shr    ebx,0x17
c001b316:	31 c8                	xor    eax,ecx
c001b318:	89 da                	mov    edx,ebx
c001b31a:	5b                   	pop    ebx
c001b31b:	5e                   	pop    esi
c001b31c:	5f                   	pop    edi
c001b31d:	c3                   	ret    

c001b31e <sysCallSeekDir(regs*)>:
c001b31e:	31 c0                	xor    eax,eax
c001b320:	31 d2                	xor    edx,edx
c001b322:	c3                   	ret    

c001b323 <sysCallTellDir(regs*)>:
c001b323:	31 c0                	xor    eax,eax
c001b325:	31 d2                	xor    edx,edx
c001b327:	c3                   	ret    

c001b328 <sysCallVerify(regs*)>:
c001b328:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b32c:	31 d2                	xor    edx,edx
c001b32e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b331:	c3                   	ret    

c001b332 <sysFormatDisk(regs*)>:
c001b332:	56                   	push   esi
c001b333:	53                   	push   ebx
c001b334:	53                   	push   ebx
c001b335:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b339:	8b 1d 88 e1 02 c0    	mov    ebx,DWORD PTR ds:0xc002e188
c001b33f:	eb 25                	jmp    c001b366 <sysFormatDisk(regs*)+0x34>
c001b341:	83 ec 0c             	sub    esp,0xc
c001b344:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001b347:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b349:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001b34c:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001b34f:	50                   	push   eax
c001b350:	ff 34 85 20 e6 02 c0 	push   DWORD PTR [eax*4-0x3ffd19e0]
c001b357:	53                   	push   ebx
c001b358:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001b35b:	83 c4 20             	add    esp,0x20
c001b35e:	83 f8 08             	cmp    eax,0x8
c001b361:	75 12                	jne    c001b375 <sysFormatDisk(regs*)+0x43>
c001b363:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001b366:	85 db                	test   ebx,ebx
c001b368:	75 d7                	jne    c001b341 <sysFormatDisk(regs*)+0xf>
c001b36a:	59                   	pop    ecx
c001b36b:	b8 03 00 00 00       	mov    eax,0x3
c001b370:	31 d2                	xor    edx,edx
c001b372:	5b                   	pop    ebx
c001b373:	5e                   	pop    esi
c001b374:	c3                   	ret    
c001b375:	85 c0                	test   eax,eax
c001b377:	74 1b                	je     c001b394 <sysFormatDisk(regs*)+0x62>
c001b379:	83 f8 09             	cmp    eax,0x9
c001b37c:	74 0b                	je     c001b389 <sysFormatDisk(regs*)+0x57>
c001b37e:	59                   	pop    ecx
c001b37f:	b8 02 00 00 00       	mov    eax,0x2
c001b384:	31 d2                	xor    edx,edx
c001b386:	5b                   	pop    ebx
c001b387:	5e                   	pop    esi
c001b388:	c3                   	ret    
c001b389:	59                   	pop    ecx
c001b38a:	b8 01 00 00 00       	mov    eax,0x1
c001b38f:	31 d2                	xor    edx,edx
c001b391:	5b                   	pop    ebx
c001b392:	5e                   	pop    esi
c001b393:	c3                   	ret    
c001b394:	59                   	pop    ecx
c001b395:	31 c0                	xor    eax,eax
c001b397:	31 d2                	xor    edx,edx
c001b399:	5b                   	pop    ebx
c001b39a:	5e                   	pop    esi
c001b39b:	c3                   	ret    

c001b39c <sysSetDiskVolumeLabel(regs*)>:
c001b39c:	56                   	push   esi
c001b39d:	53                   	push   ebx
c001b39e:	53                   	push   ebx
c001b39f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b3a3:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001b3a6:	83 f8 19             	cmp    eax,0x19
c001b3a9:	77 29                	ja     c001b3d4 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b3ab:	8b 0c 85 20 e6 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd19e0]
c001b3b2:	85 c9                	test   ecx,ecx
c001b3b4:	74 1e                	je     c001b3d4 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b3b6:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001b3b9:	85 d2                	test   edx,edx
c001b3bb:	74 17                	je     c001b3d4 <sysSetDiskVolumeLabel(regs*)+0x38>
c001b3bd:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001b3c3:	8b 33                	mov    esi,DWORD PTR [ebx]
c001b3c5:	52                   	push   edx
c001b3c6:	50                   	push   eax
c001b3c7:	51                   	push   ecx
c001b3c8:	53                   	push   ebx
c001b3c9:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001b3cc:	83 c4 10             	add    esp,0x10
c001b3cf:	99                   	cdq    
c001b3d0:	59                   	pop    ecx
c001b3d1:	5b                   	pop    ebx
c001b3d2:	5e                   	pop    esi
c001b3d3:	c3                   	ret    
c001b3d4:	59                   	pop    ecx
c001b3d5:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b3da:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b3df:	5b                   	pop    ebx
c001b3e0:	5e                   	pop    esi
c001b3e1:	c3                   	ret    

c001b3e2 <sysGetDiskVolumeLabel(regs*)>:
c001b3e2:	57                   	push   edi
c001b3e3:	56                   	push   esi
c001b3e4:	53                   	push   ebx
c001b3e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b3e9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001b3ec:	83 fa 19             	cmp    edx,0x19
c001b3ef:	77 34                	ja     c001b425 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b3f1:	8b 0c 95 20 e6 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd19e0]
c001b3f8:	85 c9                	test   ecx,ecx
c001b3fa:	74 29                	je     c001b425 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b3fc:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001b3ff:	85 db                	test   ebx,ebx
c001b401:	74 22                	je     c001b425 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b403:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001b406:	85 c0                	test   eax,eax
c001b408:	74 1b                	je     c001b425 <sysGetDiskVolumeLabel(regs*)+0x43>
c001b40a:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001b410:	83 ec 0c             	sub    esp,0xc
c001b413:	8b 3e                	mov    edi,DWORD PTR [esi]
c001b415:	50                   	push   eax
c001b416:	53                   	push   ebx
c001b417:	52                   	push   edx
c001b418:	51                   	push   ecx
c001b419:	56                   	push   esi
c001b41a:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001b41d:	83 c4 20             	add    esp,0x20
c001b420:	99                   	cdq    
c001b421:	5b                   	pop    ebx
c001b422:	5e                   	pop    esi
c001b423:	5f                   	pop    edi
c001b424:	c3                   	ret    
c001b425:	5b                   	pop    ebx
c001b426:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b42b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b430:	5e                   	pop    esi
c001b431:	5f                   	pop    edi
c001b432:	c3                   	ret    

c001b433 <sysShutdown(regs*)>:
c001b433:	83 ec 0c             	sub    esp,0xc
c001b436:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b43a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b43d:	85 c0                	test   eax,eax
c001b43f:	74 18                	je     c001b459 <sysShutdown(regs*)+0x26>
c001b441:	83 f8 01             	cmp    eax,0x1
c001b444:	74 38                	je     c001b47e <sysShutdown(regs*)+0x4b>
c001b446:	83 f8 02             	cmp    eax,0x2
c001b449:	74 24                	je     c001b46f <sysShutdown(regs*)+0x3c>
c001b44b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b450:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b455:	83 c4 0c             	add    esp,0xc
c001b458:	c3                   	ret    
c001b459:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c001b45e:	8b 10                	mov    edx,DWORD PTR [eax]
c001b460:	6a 00                	push   0x0
c001b462:	6a 00                	push   0x0
c001b464:	6a 00                	push   0x0
c001b466:	50                   	push   eax
c001b467:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b46a:	83 c4 10             	add    esp,0x10
c001b46d:	eb dc                	jmp    c001b44b <sysShutdown(regs*)+0x18>
c001b46f:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c001b474:	8b 10                	mov    edx,DWORD PTR [eax]
c001b476:	6a 00                	push   0x0
c001b478:	6a 00                	push   0x0
c001b47a:	6a 01                	push   0x1
c001b47c:	eb e8                	jmp    c001b466 <sysShutdown(regs*)+0x33>
c001b47e:	a1 c0 06 03 c0       	mov    eax,ds:0xc00306c0
c001b483:	85 c0                	test   eax,eax
c001b485:	74 02                	je     c001b489 <sysShutdown(regs*)+0x56>
c001b487:	ff d0                	call   eax
c001b489:	31 c0                	xor    eax,eax
c001b48b:	31 d2                	xor    edx,edx
c001b48d:	83 c4 0c             	add    esp,0xc
c001b490:	c3                   	ret    

c001b491 <sysCallRealpath(regs*)>:
c001b491:	83 ec 0c             	sub    esp,0xc
c001b494:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b498:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001b49b:	85 d2                	test   edx,edx
c001b49d:	74 07                	je     c001b4a6 <sysCallRealpath(regs*)+0x15>
c001b49f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001b4a2:	85 c0                	test   eax,eax
c001b4a4:	75 0b                	jne    c001b4b1 <sysCallRealpath(regs*)+0x20>
c001b4a6:	b8 01 00 00 00       	mov    eax,0x1
c001b4ab:	31 d2                	xor    edx,edx
c001b4ad:	83 c4 0c             	add    esp,0xc
c001b4b0:	c3                   	ret    
c001b4b1:	51                   	push   ecx
c001b4b2:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001b4b8:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001b4bb:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001b4c1:	51                   	push   ecx
c001b4c2:	52                   	push   edx
c001b4c3:	50                   	push   eax
c001b4c4:	e8 57 7a ff ff       	call   c0012f20 <Fs::standardiseFiles(char*, char const*, char const*)>
c001b4c9:	83 c4 10             	add    esp,0x10
c001b4cc:	31 c0                	xor    eax,eax
c001b4ce:	31 d2                	xor    edx,edx
c001b4d0:	83 c4 0c             	add    esp,0xc
c001b4d3:	c3                   	ret    

c001b4d4 <sysCallGetArgc(regs*)>:
c001b4d4:	83 ec 14             	sub    esp,0x14
c001b4d7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4dc:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4df:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001b4e5:	68 04 ba 02 c0       	push   0xc002ba04
c001b4ea:	e8 82 76 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001b4ef:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b4f4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b4f7:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001b4fd:	83 c4 1c             	add    esp,0x1c
c001b500:	99                   	cdq    
c001b501:	c3                   	ret    

c001b502 <sysCallReadDir(regs*)>:
c001b502:	53                   	push   ebx
c001b503:	83 ec 18             	sub    esp,0x18
c001b506:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b50a:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b50d:	83 f8 02             	cmp    eax,0x2
c001b510:	76 53                	jbe    c001b565 <sysCallReadDir(regs*)+0x63>
c001b512:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b515:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001b51b:	77 4f                	ja     c001b56c <sysCallReadDir(regs*)+0x6a>
c001b51d:	83 ec 0c             	sub    esp,0xc
c001b520:	50                   	push   eax
c001b521:	e8 05 65 ff ff       	call   c0011a2b <getFromFileDescriptor(int)>
c001b526:	83 c4 10             	add    esp,0x10
c001b529:	85 c0                	test   eax,eax
c001b52b:	74 50                	je     c001b57d <sysCallReadDir(regs*)+0x7b>
c001b52d:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b535:	83 ec 0c             	sub    esp,0xc
c001b538:	8b 10                	mov    edx,DWORD PTR [eax]
c001b53a:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001b53e:	51                   	push   ecx
c001b53f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b542:	6a 00                	push   0x0
c001b544:	68 10 01 00 00       	push   0x110
c001b549:	50                   	push   eax
c001b54a:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b54d:	83 c4 20             	add    esp,0x20
c001b550:	85 c0                	test   eax,eax
c001b552:	74 38                	je     c001b58c <sysCallReadDir(regs*)+0x8a>
c001b554:	83 f8 07             	cmp    eax,0x7
c001b557:	74 0c                	je     c001b565 <sysCallReadDir(regs*)+0x63>
c001b559:	b8 02 00 00 00       	mov    eax,0x2
c001b55e:	31 d2                	xor    edx,edx
c001b560:	83 c4 18             	add    esp,0x18
c001b563:	5b                   	pop    ebx
c001b564:	c3                   	ret    
c001b565:	b8 01 00 00 00       	mov    eax,0x1
c001b56a:	eb f2                	jmp    c001b55e <sysCallReadDir(regs*)+0x5c>
c001b56c:	83 ec 08             	sub    esp,0x8
c001b56f:	52                   	push   edx
c001b570:	68 1c bb 02 c0       	push   0xc002bb1c
c001b575:	e8 f7 75 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001b57a:	83 c4 10             	add    esp,0x10
c001b57d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b582:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b587:	83 c4 18             	add    esp,0x18
c001b58a:	5b                   	pop    ebx
c001b58b:	c3                   	ret    
c001b58c:	31 c0                	xor    eax,eax
c001b58e:	eb ce                	jmp    c001b55e <sysCallReadDir(regs*)+0x5c>

c001b590 <sysCallIsATTY(regs*)>:
c001b590:	83 ec 0c             	sub    esp,0xc
c001b593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b597:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b59a:	83 f8 02             	cmp    eax,0x2
c001b59d:	76 07                	jbe    c001b5a6 <sysCallIsATTY(regs*)+0x16>
c001b59f:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b5a4:	75 26                	jne    c001b5cc <sysCallIsATTY(regs*)+0x3c>
c001b5a6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b5ab:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b5ae:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001b5b4:	85 c0                	test   eax,eax
c001b5b6:	74 24                	je     c001b5dc <sysCallIsATTY(regs*)+0x4c>
c001b5b8:	83 ec 0c             	sub    esp,0xc
c001b5bb:	8b 10                	mov    edx,DWORD PTR [eax]
c001b5bd:	50                   	push   eax
c001b5be:	ff 12                	call   DWORD PTR [edx]
c001b5c0:	31 d2                	xor    edx,edx
c001b5c2:	0f b6 c0             	movzx  eax,al
c001b5c5:	83 c4 10             	add    esp,0x10
c001b5c8:	83 c4 0c             	add    esp,0xc
c001b5cb:	c3                   	ret    
c001b5cc:	83 ec 0c             	sub    esp,0xc
c001b5cf:	50                   	push   eax
c001b5d0:	e8 56 64 ff ff       	call   c0011a2b <getFromFileDescriptor(int)>
c001b5d5:	83 c4 10             	add    esp,0x10
c001b5d8:	85 c0                	test   eax,eax
c001b5da:	75 dc                	jne    c001b5b8 <sysCallIsATTY(regs*)+0x28>
c001b5dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b5e1:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b5e6:	83 c4 0c             	add    esp,0xc
c001b5e9:	c3                   	ret    

c001b5ea <sysCallSeek(regs*)>:
c001b5ea:	53                   	push   ebx
c001b5eb:	83 ec 08             	sub    esp,0x8
c001b5ee:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b5f2:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b5f5:	83 f8 02             	cmp    eax,0x2
c001b5f8:	76 4a                	jbe    c001b644 <sysCallSeek(regs*)+0x5a>
c001b5fa:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b5ff:	77 32                	ja     c001b633 <sysCallSeek(regs*)+0x49>
c001b601:	83 ec 0c             	sub    esp,0xc
c001b604:	50                   	push   eax
c001b605:	e8 21 64 ff ff       	call   c0011a2b <getFromFileDescriptor(int)>
c001b60a:	83 c4 0c             	add    esp,0xc
c001b60d:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001b610:	31 db                	xor    ebx,ebx
c001b612:	53                   	push   ebx
c001b613:	51                   	push   ecx
c001b614:	50                   	push   eax
c001b615:	e8 d2 7b ff ff       	call   c00131ec <File::seek(unsigned long long)>
c001b61a:	83 c4 10             	add    esp,0x10
c001b61d:	85 c0                	test   eax,eax
c001b61f:	0f 95 c0             	setne  al
c001b622:	31 d2                	xor    edx,edx
c001b624:	0f b6 c0             	movzx  eax,al
c001b627:	f7 d8                	neg    eax
c001b629:	83 d2 00             	adc    edx,0x0
c001b62c:	83 c4 08             	add    esp,0x8
c001b62f:	f7 da                	neg    edx
c001b631:	5b                   	pop    ebx
c001b632:	c3                   	ret    
c001b633:	83 ec 08             	sub    esp,0x8
c001b636:	50                   	push   eax
c001b637:	68 0f ba 02 c0       	push   0xc002ba0f
c001b63c:	e8 30 75 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001b641:	83 c4 10             	add    esp,0x10
c001b644:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b649:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b64e:	83 c4 08             	add    esp,0x8
c001b651:	5b                   	pop    ebx
c001b652:	c3                   	ret    

c001b653 <sysCallTell(regs*)>:
c001b653:	53                   	push   ebx
c001b654:	83 ec 08             	sub    esp,0x8
c001b657:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b65b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b65e:	83 f8 02             	cmp    eax,0x2
c001b661:	76 5e                	jbe    c001b6c1 <sysCallTell(regs*)+0x6e>
c001b663:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b668:	77 2d                	ja     c001b697 <sysCallTell(regs*)+0x44>
c001b66a:	83 ec 0c             	sub    esp,0xc
c001b66d:	50                   	push   eax
c001b66e:	e8 b8 63 ff ff       	call   c0011a2b <getFromFileDescriptor(int)>
c001b673:	5a                   	pop    edx
c001b674:	59                   	pop    ecx
c001b675:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b678:	50                   	push   eax
c001b679:	e8 c4 7b ff ff       	call   c0013242 <File::tell(unsigned long long*)>
c001b67e:	83 c4 10             	add    esp,0x10
c001b681:	85 c0                	test   eax,eax
c001b683:	0f 95 c0             	setne  al
c001b686:	31 d2                	xor    edx,edx
c001b688:	0f b6 c0             	movzx  eax,al
c001b68b:	f7 d8                	neg    eax
c001b68d:	83 d2 00             	adc    edx,0x0
c001b690:	83 c4 08             	add    esp,0x8
c001b693:	f7 da                	neg    edx
c001b695:	5b                   	pop    ebx
c001b696:	c3                   	ret    
c001b697:	83 ec 08             	sub    esp,0x8
c001b69a:	50                   	push   eax
c001b69b:	68 29 ba 02 c0       	push   0xc002ba29
c001b6a0:	e8 cc 74 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001b6a5:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b6a8:	83 c4 10             	add    esp,0x10
c001b6ab:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b6b1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b6b8:	31 d2                	xor    edx,edx
c001b6ba:	31 c0                	xor    eax,eax
c001b6bc:	83 c4 08             	add    esp,0x8
c001b6bf:	5b                   	pop    ebx
c001b6c0:	c3                   	ret    
c001b6c1:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b6c6:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b6cb:	83 c4 08             	add    esp,0x8
c001b6ce:	5b                   	pop    ebx
c001b6cf:	c3                   	ret    

c001b6d0 <sysCallSize(regs*)>:
c001b6d0:	53                   	push   ebx
c001b6d1:	83 ec 18             	sub    esp,0x18
c001b6d4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b6d8:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b6db:	83 f8 02             	cmp    eax,0x2
c001b6de:	76 64                	jbe    c001b744 <sysCallSize(regs*)+0x74>
c001b6e0:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b6e5:	77 33                	ja     c001b71a <sysCallSize(regs*)+0x4a>
c001b6e7:	83 ec 0c             	sub    esp,0xc
c001b6ea:	50                   	push   eax
c001b6eb:	e8 3b 63 ff ff       	call   c0011a2b <getFromFileDescriptor(int)>
c001b6f0:	83 c4 0c             	add    esp,0xc
c001b6f3:	8d 54 24 13          	lea    edx,[esp+0x13]
c001b6f7:	52                   	push   edx
c001b6f8:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001b6fb:	50                   	push   eax
c001b6fc:	e8 d9 7c ff ff       	call   c00133da <File::stat(unsigned long long*, bool*)>
c001b701:	83 c4 10             	add    esp,0x10
c001b704:	85 c0                	test   eax,eax
c001b706:	0f 95 c0             	setne  al
c001b709:	31 d2                	xor    edx,edx
c001b70b:	0f b6 c0             	movzx  eax,al
c001b70e:	f7 d8                	neg    eax
c001b710:	83 d2 00             	adc    edx,0x0
c001b713:	83 c4 18             	add    esp,0x18
c001b716:	f7 da                	neg    edx
c001b718:	5b                   	pop    ebx
c001b719:	c3                   	ret    
c001b71a:	83 ec 08             	sub    esp,0x8
c001b71d:	50                   	push   eax
c001b71e:	68 43 ba 02 c0       	push   0xc002ba43
c001b723:	e8 49 74 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001b728:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001b72b:	83 c4 10             	add    esp,0x10
c001b72e:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b734:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b73b:	31 d2                	xor    edx,edx
c001b73d:	31 c0                	xor    eax,eax
c001b73f:	83 c4 18             	add    esp,0x18
c001b742:	5b                   	pop    ebx
c001b743:	c3                   	ret    
c001b744:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b749:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b74e:	83 c4 18             	add    esp,0x18
c001b751:	5b                   	pop    ebx
c001b752:	c3                   	ret    

c001b753 <sysCallSizeFromFilename(regs*)>:
c001b753:	57                   	push   edi
c001b754:	56                   	push   esi
c001b755:	53                   	push   ebx
c001b756:	83 ec 20             	sub    esp,0x20
c001b759:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001b75d:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001b760:	83 fb 02             	cmp    ebx,0x2
c001b763:	0f 86 99 00 00 00    	jbe    c001b802 <sysCallSizeFromFilename(regs*)+0xaf>
c001b769:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001b76f:	77 65                	ja     c001b7d6 <sysCallSizeFromFilename(regs*)+0x83>
c001b771:	83 ec 0c             	sub    esp,0xc
c001b774:	68 14 01 00 00       	push   0x114
c001b779:	e8 c2 40 ff ff       	call   c000f840 <malloc>
c001b77e:	83 c4 0c             	add    esp,0xc
c001b781:	89 c6                	mov    esi,eax
c001b783:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b788:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b78b:	53                   	push   ebx
c001b78c:	56                   	push   esi
c001b78d:	e8 38 79 ff ff       	call   c00130ca <File::File(char const*, Process*)>
c001b792:	83 c4 0c             	add    esp,0xc
c001b795:	8d 44 24 23          	lea    eax,[esp+0x23]
c001b799:	50                   	push   eax
c001b79a:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001b79d:	56                   	push   esi
c001b79e:	e8 37 7c ff ff       	call   c00133da <File::stat(unsigned long long*, bool*)>
c001b7a3:	83 c4 10             	add    esp,0x10
c001b7a6:	85 f6                	test   esi,esi
c001b7a8:	74 14                	je     c001b7be <sysCallSizeFromFilename(regs*)+0x6b>
c001b7aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b7ae:	8b 16                	mov    edx,DWORD PTR [esi]
c001b7b0:	83 ec 0c             	sub    esp,0xc
c001b7b3:	56                   	push   esi
c001b7b4:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001b7b7:	83 c4 10             	add    esp,0x10
c001b7ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b7be:	85 c0                	test   eax,eax
c001b7c0:	0f 95 c0             	setne  al
c001b7c3:	31 d2                	xor    edx,edx
c001b7c5:	0f b6 c0             	movzx  eax,al
c001b7c8:	f7 d8                	neg    eax
c001b7ca:	83 d2 00             	adc    edx,0x0
c001b7cd:	83 c4 20             	add    esp,0x20
c001b7d0:	f7 da                	neg    edx
c001b7d2:	5b                   	pop    ebx
c001b7d3:	5e                   	pop    esi
c001b7d4:	5f                   	pop    edi
c001b7d5:	c3                   	ret    
c001b7d6:	83 ec 08             	sub    esp,0x8
c001b7d9:	53                   	push   ebx
c001b7da:	68 43 ba 02 c0       	push   0xc002ba43
c001b7df:	e8 8d 73 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001b7e4:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001b7e7:	83 c4 10             	add    esp,0x10
c001b7ea:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001b7f0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001b7f7:	31 d2                	xor    edx,edx
c001b7f9:	83 c4 20             	add    esp,0x20
c001b7fc:	31 c0                	xor    eax,eax
c001b7fe:	5b                   	pop    ebx
c001b7ff:	5e                   	pop    esi
c001b800:	5f                   	pop    edi
c001b801:	c3                   	ret    
c001b802:	83 c4 20             	add    esp,0x20
c001b805:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b80a:	5b                   	pop    ebx
c001b80b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b810:	5e                   	pop    esi
c001b811:	5f                   	pop    edi
c001b812:	c3                   	ret    

c001b813 <sysCallClose(regs*)>:
c001b813:	53                   	push   ebx
c001b814:	83 ec 08             	sub    esp,0x8
c001b817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b81b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b81e:	83 f8 02             	cmp    eax,0x2
c001b821:	76 50                	jbe    c001b873 <sysCallClose(regs*)+0x60>
c001b823:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001b828:	74 58                	je     c001b882 <sysCallClose(regs*)+0x6f>
c001b82a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b82f:	74 60                	je     c001b891 <sysCallClose(regs*)+0x7e>
c001b831:	77 2f                	ja     c001b862 <sysCallClose(regs*)+0x4f>
c001b833:	83 ec 0c             	sub    esp,0xc
c001b836:	50                   	push   eax
c001b837:	e8 ef 61 ff ff       	call   c0011a2b <getFromFileDescriptor(int)>
c001b83c:	89 c3                	mov    ebx,eax
c001b83e:	89 04 24             	mov    DWORD PTR [esp],eax
c001b841:	e8 46 79 ff ff       	call   c001318c <File::close()>
c001b846:	83 c4 10             	add    esp,0x10
c001b849:	85 db                	test   ebx,ebx
c001b84b:	74 0c                	je     c001b859 <sysCallClose(regs*)+0x46>
c001b84d:	83 ec 0c             	sub    esp,0xc
c001b850:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b852:	53                   	push   ebx
c001b853:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b856:	83 c4 10             	add    esp,0x10
c001b859:	31 c0                	xor    eax,eax
c001b85b:	31 d2                	xor    edx,edx
c001b85d:	83 c4 08             	add    esp,0x8
c001b860:	5b                   	pop    ebx
c001b861:	c3                   	ret    
c001b862:	83 ec 08             	sub    esp,0x8
c001b865:	50                   	push   eax
c001b866:	68 40 bb 02 c0       	push   0xc002bb40
c001b86b:	e8 01 73 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001b870:	83 c4 10             	add    esp,0x10
c001b873:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b878:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b87d:	83 c4 08             	add    esp,0x8
c001b880:	5b                   	pop    ebx
c001b881:	c3                   	ret    
c001b882:	83 ec 0c             	sub    esp,0xc
c001b885:	68 5e ba 02 c0       	push   0xc002ba5e
c001b88a:	e8 e2 72 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001b88f:	eb c5                	jmp    c001b856 <sysCallClose(regs*)+0x43>
c001b891:	83 ec 0c             	sub    esp,0xc
c001b894:	68 6c ba 02 c0       	push   0xc002ba6c
c001b899:	eb ef                	jmp    c001b88a <sysCallClose(regs*)+0x77>

c001b89b <sysCallOpenDir(regs*)>:
c001b89b:	56                   	push   esi
c001b89c:	53                   	push   ebx
c001b89d:	53                   	push   ebx
c001b89e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8a2:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001b8a5:	85 f6                	test   esi,esi
c001b8a7:	74 59                	je     c001b902 <sysCallOpenDir(regs*)+0x67>
c001b8a9:	83 ec 0c             	sub    esp,0xc
c001b8ac:	68 14 01 00 00       	push   0x114
c001b8b1:	e8 8a 3f ff ff       	call   c000f840 <malloc>
c001b8b6:	83 c4 0c             	add    esp,0xc
c001b8b9:	89 c6                	mov    esi,eax
c001b8bb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b8c0:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b8c3:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b8c6:	56                   	push   esi
c001b8c7:	e8 aa 7c ff ff       	call   c0013576 <Directory::Directory(char const*, Process*)>
c001b8cc:	83 c4 10             	add    esp,0x10
c001b8cf:	85 f6                	test   esi,esi
c001b8d1:	74 2f                	je     c001b902 <sysCallOpenDir(regs*)+0x67>
c001b8d3:	83 ec 0c             	sub    esp,0xc
c001b8d6:	56                   	push   esi
c001b8d7:	e8 fe 7c ff ff       	call   c00135da <Directory::open()>
c001b8dc:	83 c4 10             	add    esp,0x10
c001b8df:	85 c0                	test   eax,eax
c001b8e1:	75 1f                	jne    c001b902 <sysCallOpenDir(regs*)+0x67>
c001b8e3:	83 ec 0c             	sub    esp,0xc
c001b8e6:	56                   	push   esi
c001b8e7:	e8 4a 5e ff ff       	call   c0011736 <UnixFile::getFileDescriptor()>
c001b8ec:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001b8ef:	83 c4 10             	add    esp,0x10
c001b8f2:	89 02                	mov    DWORD PTR [edx],eax
c001b8f4:	c1 f8 1f             	sar    eax,0x1f
c001b8f7:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001b8fa:	31 c0                	xor    eax,eax
c001b8fc:	59                   	pop    ecx
c001b8fd:	31 d2                	xor    edx,edx
c001b8ff:	5b                   	pop    ebx
c001b900:	5e                   	pop    esi
c001b901:	c3                   	ret    
c001b902:	59                   	pop    ecx
c001b903:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b908:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b90d:	5b                   	pop    ebx
c001b90e:	5e                   	pop    esi
c001b90f:	c3                   	ret    

c001b910 <sysCallCloseDir(regs*)>:
c001b910:	53                   	push   ebx
c001b911:	83 ec 08             	sub    esp,0x8
c001b914:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b918:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001b91b:	83 f8 02             	cmp    eax,0x2
c001b91e:	76 47                	jbe    c001b967 <sysCallCloseDir(regs*)+0x57>
c001b920:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001b925:	77 2f                	ja     c001b956 <sysCallCloseDir(regs*)+0x46>
c001b927:	83 ec 0c             	sub    esp,0xc
c001b92a:	50                   	push   eax
c001b92b:	e8 fb 60 ff ff       	call   c0011a2b <getFromFileDescriptor(int)>
c001b930:	89 c3                	mov    ebx,eax
c001b932:	89 04 24             	mov    DWORD PTR [esp],eax
c001b935:	e8 fc 7c ff ff       	call   c0013636 <Directory::close()>
c001b93a:	83 c4 10             	add    esp,0x10
c001b93d:	85 db                	test   ebx,ebx
c001b93f:	74 0c                	je     c001b94d <sysCallCloseDir(regs*)+0x3d>
c001b941:	83 ec 0c             	sub    esp,0xc
c001b944:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b946:	53                   	push   ebx
c001b947:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b94a:	83 c4 10             	add    esp,0x10
c001b94d:	31 c0                	xor    eax,eax
c001b94f:	31 d2                	xor    edx,edx
c001b951:	83 c4 08             	add    esp,0x8
c001b954:	5b                   	pop    ebx
c001b955:	c3                   	ret    
c001b956:	83 ec 08             	sub    esp,0x8
c001b959:	50                   	push   eax
c001b95a:	68 68 bb 02 c0       	push   0xc002bb68
c001b95f:	e8 0d 72 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001b964:	83 c4 10             	add    esp,0x10
c001b967:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b96c:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b971:	83 c4 08             	add    esp,0x8
c001b974:	5b                   	pop    ebx
c001b975:	c3                   	ret    

c001b976 <sysCallMakeDir(regs*)>:
c001b976:	56                   	push   esi
c001b977:	53                   	push   ebx
c001b978:	83 ec 10             	sub    esp,0x10
c001b97b:	68 14 01 00 00       	push   0x114
c001b980:	e8 bb 3e ff ff       	call   c000f840 <malloc>
c001b985:	83 c4 0c             	add    esp,0xc
c001b988:	89 c3                	mov    ebx,eax
c001b98a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b98f:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b992:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b996:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b999:	53                   	push   ebx
c001b99a:	e8 d7 7b ff ff       	call   c0013576 <Directory::Directory(char const*, Process*)>
c001b99f:	83 c4 10             	add    esp,0x10
c001b9a2:	85 db                	test   ebx,ebx
c001b9a4:	74 32                	je     c001b9d8 <sysCallMakeDir(regs*)+0x62>
c001b9a6:	83 ec 0c             	sub    esp,0xc
c001b9a9:	53                   	push   ebx
c001b9aa:	e8 0b 7e ff ff       	call   c00137ba <Directory::create()>
c001b9af:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b9b2:	89 c6                	mov    esi,eax
c001b9b4:	e8 7d 7c ff ff       	call   c0013636 <Directory::close()>
c001b9b9:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b9bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b9be:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b9c1:	83 c4 10             	add    esp,0x10
c001b9c4:	31 c0                	xor    eax,eax
c001b9c6:	59                   	pop    ecx
c001b9c7:	85 f6                	test   esi,esi
c001b9c9:	5b                   	pop    ebx
c001b9ca:	0f 95 c0             	setne  al
c001b9cd:	5e                   	pop    esi
c001b9ce:	31 d2                	xor    edx,edx
c001b9d0:	f7 d8                	neg    eax
c001b9d2:	83 d2 00             	adc    edx,0x0
c001b9d5:	f7 da                	neg    edx
c001b9d7:	c3                   	ret    
c001b9d8:	59                   	pop    ecx
c001b9d9:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001b9de:	ba ff ff ff ff       	mov    edx,0xffffffff
c001b9e3:	5b                   	pop    ebx
c001b9e4:	5e                   	pop    esi
c001b9e5:	c3                   	ret    

c001b9e6 <sysCallWait(regs*)>:
c001b9e6:	83 ec 10             	sub    esp,0x10
c001b9e9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b9ed:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b9f0:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b9f3:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b9f6:	e8 ce 24 00 00       	call   c001dec9 <waitTask(int, int*, int)>
c001b9fb:	83 c4 1c             	add    esp,0x1c
c001b9fe:	99                   	cdq    
c001b9ff:	c3                   	ret    

c001ba00 <sysCallNotImpl(regs*)>:
c001ba00:	83 ec 18             	sub    esp,0x18
c001ba03:	68 7a ba 02 c0       	push   0xc002ba7a
c001ba08:	e8 e0 e7 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001ba0d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001ba12:	ba ff ff ff ff       	mov    edx,0xffffffff
c001ba17:	83 c4 1c             	add    esp,0x1c
c001ba1a:	c3                   	ret    

c001ba1b <sysPanic(regs*)>:
c001ba1b:	83 ec 18             	sub    esp,0x18
c001ba1e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ba22:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001ba25:	e8 c3 e7 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001ba2a:	c7 04 24 94 ba 02 c0 	mov    DWORD PTR [esp],0xc002ba94
c001ba31:	e8 b7 e7 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001ba36:	b8 01 00 00 00       	mov    eax,0x1
c001ba3b:	31 d2                	xor    edx,edx
c001ba3d:	83 c4 1c             	add    esp,0x1c
c001ba40:	c3                   	ret    

c001ba41 <sysCallRmdir(regs*)>:
c001ba41:	56                   	push   esi
c001ba42:	53                   	push   ebx
c001ba43:	83 ec 20             	sub    esp,0x20
c001ba46:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ba4a:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001ba4d:	68 14 01 00 00       	push   0x114
c001ba52:	e8 e9 3d ff ff       	call   c000f840 <malloc>
c001ba57:	83 c4 0c             	add    esp,0xc
c001ba5a:	89 c3                	mov    ebx,eax
c001ba5c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ba61:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001ba64:	56                   	push   esi
c001ba65:	53                   	push   ebx
c001ba66:	e8 5f 76 ff ff       	call   c00130ca <File::File(char const*, Process*)>
c001ba6b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ba6e:	e8 33 78 ff ff       	call   c00132a6 <File::unlink()>
c001ba73:	83 c4 10             	add    esp,0x10
c001ba76:	85 db                	test   ebx,ebx
c001ba78:	74 14                	je     c001ba8e <sysCallRmdir(regs*)+0x4d>
c001ba7a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ba7e:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ba80:	83 ec 0c             	sub    esp,0xc
c001ba83:	53                   	push   ebx
c001ba84:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001ba87:	83 c4 10             	add    esp,0x10
c001ba8a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ba8e:	85 c0                	test   eax,eax
c001ba90:	0f 95 c0             	setne  al
c001ba93:	31 d2                	xor    edx,edx
c001ba95:	0f b6 c0             	movzx  eax,al
c001ba98:	f7 d8                	neg    eax
c001ba9a:	83 d2 00             	adc    edx,0x0
c001ba9d:	83 c4 14             	add    esp,0x14
c001baa0:	f7 da                	neg    edx
c001baa2:	5b                   	pop    ebx
c001baa3:	5e                   	pop    esi
c001baa4:	c3                   	ret    

c001baa5 <sysCallUnlink(regs*)>:
c001baa5:	56                   	push   esi
c001baa6:	53                   	push   ebx
c001baa7:	83 ec 20             	sub    esp,0x20
c001baaa:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001baae:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001bab1:	68 14 01 00 00       	push   0x114
c001bab6:	e8 85 3d ff ff       	call   c000f840 <malloc>
c001babb:	83 c4 0c             	add    esp,0xc
c001babe:	89 c3                	mov    ebx,eax
c001bac0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bac5:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bac8:	56                   	push   esi
c001bac9:	53                   	push   ebx
c001baca:	e8 fb 75 ff ff       	call   c00130ca <File::File(char const*, Process*)>
c001bacf:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bad2:	e8 cf 77 ff ff       	call   c00132a6 <File::unlink()>
c001bad7:	83 c4 10             	add    esp,0x10
c001bada:	85 db                	test   ebx,ebx
c001badc:	74 14                	je     c001baf2 <sysCallUnlink(regs*)+0x4d>
c001bade:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bae2:	8b 13                	mov    edx,DWORD PTR [ebx]
c001bae4:	83 ec 0c             	sub    esp,0xc
c001bae7:	53                   	push   ebx
c001bae8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001baeb:	83 c4 10             	add    esp,0x10
c001baee:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001baf2:	85 c0                	test   eax,eax
c001baf4:	0f 95 c0             	setne  al
c001baf7:	31 d2                	xor    edx,edx
c001baf9:	0f b6 c0             	movzx  eax,al
c001bafc:	f7 d8                	neg    eax
c001bafe:	83 d2 00             	adc    edx,0x0
c001bb01:	83 c4 14             	add    esp,0x14
c001bb04:	f7 da                	neg    edx
c001bb06:	5b                   	pop    ebx
c001bb07:	5e                   	pop    esi
c001bb08:	c3                   	ret    

c001bb09 <sysCallGetArgv(regs*)>:
c001bb09:	83 ec 0c             	sub    esp,0xc
c001bb0c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001bb10:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001bb13:	85 c0                	test   eax,eax
c001bb15:	78 2b                	js     c001bb42 <sysCallGetArgv(regs*)+0x39>
c001bb17:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bb1d:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bb20:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001bb26:	7d 1a                	jge    c001bb42 <sysCallGetArgv(regs*)+0x39>
c001bb28:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001bb2f:	85 c0                	test   eax,eax
c001bb31:	74 17                	je     c001bb4a <sysCallGetArgv(regs*)+0x41>
c001bb33:	83 ec 08             	sub    esp,0x8
c001bb36:	50                   	push   eax
c001bb37:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001bb3a:	e8 f5 4c fe ff       	call   c0000834 <strcpy>
c001bb3f:	83 c4 10             	add    esp,0x10
c001bb42:	31 c0                	xor    eax,eax
c001bb44:	31 d2                	xor    edx,edx
c001bb46:	83 c4 0c             	add    esp,0xc
c001bb49:	c3                   	ret    
c001bb4a:	b8 01 00 00 00       	mov    eax,0x1
c001bb4f:	31 d2                	xor    edx,edx
c001bb51:	83 c4 0c             	add    esp,0xc
c001bb54:	c3                   	ret    

c001bb55 <sysCallTTYName(regs*)>:
c001bb55:	56                   	push   esi
c001bb56:	53                   	push   ebx
c001bb57:	53                   	push   ebx
c001bb58:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001bb5c:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001bb5f:	85 c0                	test   eax,eax
c001bb61:	74 5f                	je     c001bbc2 <sysCallTTYName(regs*)+0x6d>
c001bb63:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001bb66:	83 f8 02             	cmp    eax,0x2
c001bb69:	77 3e                	ja     c001bba9 <sysCallTTYName(regs*)+0x54>
c001bb6b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bb70:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bb73:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001bb79:	85 db                	test   ebx,ebx
c001bb7b:	74 45                	je     c001bbc2 <sysCallTTYName(regs*)+0x6d>
c001bb7d:	83 ec 0c             	sub    esp,0xc
c001bb80:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bb82:	53                   	push   ebx
c001bb83:	ff 10                	call   DWORD PTR [eax]
c001bb85:	83 c4 10             	add    esp,0x10
c001bb88:	84 c0                	test   al,al
c001bb8a:	74 41                	je     c001bbcd <sysCallTTYName(regs*)+0x78>
c001bb8c:	83 ec 08             	sub    esp,0x8
c001bb8f:	81 c3 1e 10 00 00    	add    ebx,0x101e
c001bb95:	53                   	push   ebx
c001bb96:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001bb99:	e8 96 4c fe ff       	call   c0000834 <strcpy>
c001bb9e:	83 c4 10             	add    esp,0x10
c001bba1:	31 c0                	xor    eax,eax
c001bba3:	59                   	pop    ecx
c001bba4:	31 d2                	xor    edx,edx
c001bba6:	5b                   	pop    ebx
c001bba7:	5e                   	pop    esi
c001bba8:	c3                   	ret    
c001bba9:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bbae:	74 bb                	je     c001bb6b <sysCallTTYName(regs*)+0x16>
c001bbb0:	83 ec 0c             	sub    esp,0xc
c001bbb3:	50                   	push   eax
c001bbb4:	e8 72 5e ff ff       	call   c0011a2b <getFromFileDescriptor(int)>
c001bbb9:	83 c4 10             	add    esp,0x10
c001bbbc:	89 c3                	mov    ebx,eax
c001bbbe:	85 db                	test   ebx,ebx
c001bbc0:	75 bb                	jne    c001bb7d <sysCallTTYName(regs*)+0x28>
c001bbc2:	59                   	pop    ecx
c001bbc3:	b8 01 00 00 00       	mov    eax,0x1
c001bbc8:	31 d2                	xor    edx,edx
c001bbca:	5b                   	pop    ebx
c001bbcb:	5e                   	pop    esi
c001bbcc:	c3                   	ret    
c001bbcd:	59                   	pop    ecx
c001bbce:	b8 02 00 00 00       	mov    eax,0x2
c001bbd3:	31 d2                	xor    edx,edx
c001bbd5:	5b                   	pop    ebx
c001bbd6:	5e                   	pop    esi
c001bbd7:	c3                   	ret    

c001bbd8 <sysCallUSleep(regs*)>:
c001bbd8:	83 ec 14             	sub    esp,0x14
c001bbdb:	b8 e8 03 00 00       	mov    eax,0x3e8
c001bbe0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bbe4:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001bbeb:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001bbee:	01 ca                	add    edx,ecx
c001bbf0:	52                   	push   edx
c001bbf1:	50                   	push   eax
c001bbf2:	e8 6b 23 00 00       	call   c001df62 <nanoSleep(unsigned long long)>
c001bbf7:	31 c0                	xor    eax,eax
c001bbf9:	31 d2                	xor    edx,edx
c001bbfb:	83 c4 1c             	add    esp,0x1c
c001bbfe:	c3                   	ret    

c001bbff <sysCallSpawn(regs*)>:
c001bbff:	56                   	push   esi
c001bc00:	53                   	push   ebx
c001bc01:	53                   	push   ebx
c001bc02:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bc06:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001bc09:	85 f6                	test   esi,esi
c001bc0b:	75 08                	jne    c001bc15 <sysCallSpawn(regs*)+0x16>
c001bc0d:	59                   	pop    ecx
c001bc0e:	31 c0                	xor    eax,eax
c001bc10:	31 d2                	xor    edx,edx
c001bc12:	5b                   	pop    ebx
c001bc13:	5e                   	pop    esi
c001bc14:	c3                   	ret    
c001bc15:	83 ec 0c             	sub    esp,0xc
c001bc18:	68 3f 07 00 00       	push   0x73f
c001bc1d:	e8 1e 3c ff ff       	call   c000f840 <malloc>
c001bc22:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bc25:	89 c6                	mov    esi,eax
c001bc27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc2c:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc2f:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc32:	56                   	push   esi
c001bc33:	e8 2a 1a 00 00       	call   c001d662 <Process::Process(char const*, Process*, char**)>
c001bc38:	83 c4 20             	add    esp,0x20
c001bc3b:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001bc42:	75 c9                	jne    c001bc0d <sysCallSpawn(regs*)+0xe>
c001bc44:	83 ec 0c             	sub    esp,0xc
c001bc47:	56                   	push   esi
c001bc48:	e8 db 1f 00 00       	call   c001dc28 <Process::createUserThread()>
c001bc4d:	8b 06                	mov    eax,DWORD PTR [esi]
c001bc4f:	83 c4 10             	add    esp,0x10
c001bc52:	99                   	cdq    
c001bc53:	59                   	pop    ecx
c001bc54:	5b                   	pop    ebx
c001bc55:	5e                   	pop    esi
c001bc56:	c3                   	ret    

c001bc57 <sysCallGetEnv(regs*)>:
c001bc57:	55                   	push   ebp
c001bc58:	57                   	push   edi
c001bc59:	56                   	push   esi
c001bc5a:	53                   	push   ebx
c001bc5b:	83 ec 28             	sub    esp,0x28
c001bc5e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001bc62:	68 a3 ba 02 c0       	push   0xc002baa3
c001bc67:	e8 05 6f ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001bc6c:	5f                   	pop    edi
c001bc6d:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001bc70:	5d                   	pop    ebp
c001bc71:	53                   	push   ebx
c001bc72:	68 d2 bd 02 c0       	push   0xc002bdd2
c001bc77:	e8 f5 6e ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001bc7c:	58                   	pop    eax
c001bc7d:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001bc80:	5a                   	pop    edx
c001bc81:	57                   	push   edi
c001bc82:	68 ac ba 02 c0       	push   0xc002baac
c001bc87:	e8 e5 6e ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001bc8c:	59                   	pop    ecx
c001bc8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bc92:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bc95:	e8 6f e4 ff ff       	call   c001a109 <Krnl::getProcessTotalEnvCount(Process*)>
c001bc9a:	5a                   	pop    edx
c001bc9b:	89 c5                	mov    ebp,eax
c001bc9d:	59                   	pop    ecx
c001bc9e:	50                   	push   eax
c001bc9f:	68 b6 ba 02 c0       	push   0xc002bab6
c001bca4:	e8 c8 6e ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001bca9:	83 c4 10             	add    esp,0x10
c001bcac:	39 ef                	cmp    edi,ebp
c001bcae:	7c 15                	jl     c001bcc5 <sysCallGetEnv(regs*)+0x6e>
c001bcb0:	85 db                	test   ebx,ebx
c001bcb2:	75 0c                	jne    c001bcc0 <sysCallGetEnv(regs*)+0x69>
c001bcb4:	83 c4 1c             	add    esp,0x1c
c001bcb7:	31 c0                	xor    eax,eax
c001bcb9:	5b                   	pop    ebx
c001bcba:	31 d2                	xor    edx,edx
c001bcbc:	5e                   	pop    esi
c001bcbd:	5f                   	pop    edi
c001bcbe:	5d                   	pop    ebp
c001bcbf:	c3                   	ret    
c001bcc0:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bcc3:	eb ef                	jmp    c001bcb4 <sysCallGetEnv(regs*)+0x5d>
c001bcc5:	83 ec 0c             	sub    esp,0xc
c001bcc8:	68 c2 ba 02 c0       	push   0xc002bac2
c001bccd:	e8 9f 6e ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001bcd2:	8d 44 24 18          	lea    eax,[esp+0x18]
c001bcd6:	83 c4 0c             	add    esp,0xc
c001bcd9:	57                   	push   edi
c001bcda:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001bce0:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001bce3:	50                   	push   eax
c001bce4:	e8 40 e4 ff ff       	call   c001a129 <Krnl::getProcessEnvPair(Process*, int)>
c001bce9:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001bced:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001bcf1:	68 51 be 02 c0       	push   0xc002be51
c001bcf6:	e8 76 6e ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001bcfb:	83 c4 10             	add    esp,0x10
c001bcfe:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001bd01:	85 f6                	test   esi,esi
c001bd03:	75 47                	jne    c001bd4c <sysCallGetEnv(regs*)+0xf5>
c001bd05:	83 ec 0c             	sub    esp,0xc
c001bd08:	55                   	push   ebp
c001bd09:	e8 86 4a fe ff       	call   c0000794 <strlen>
c001bd0e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bd11:	89 c3                	mov    ebx,eax
c001bd13:	e8 7c 4a fe ff       	call   c0000794 <strlen>
c001bd18:	5a                   	pop    edx
c001bd19:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bd1d:	59                   	pop    ecx
c001bd1e:	50                   	push   eax
c001bd1f:	68 c5 ba 02 c0       	push   0xc002bac5
c001bd24:	e8 48 6e ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001bd29:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001bd2c:	e8 63 4a fe ff       	call   c0000794 <strlen>
c001bd31:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bd34:	89 c3                	mov    ebx,eax
c001bd36:	e8 59 4a fe ff       	call   c0000794 <strlen>
c001bd3b:	83 c4 10             	add    esp,0x10
c001bd3e:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001bd42:	83 c4 1c             	add    esp,0x1c
c001bd45:	31 d2                	xor    edx,edx
c001bd47:	5b                   	pop    ebx
c001bd48:	5e                   	pop    esi
c001bd49:	5f                   	pop    edi
c001bd4a:	5d                   	pop    ebp
c001bd4b:	c3                   	ret    
c001bd4c:	83 ec 0c             	sub    esp,0xc
c001bd4f:	68 6b be 02 c0       	push   0xc002be6b
c001bd54:	e8 18 6e ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001bd59:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001bd5c:	58                   	pop    eax
c001bd5d:	5a                   	pop    edx
c001bd5e:	55                   	push   ebp
c001bd5f:	53                   	push   ebx
c001bd60:	e8 cf 4a fe ff       	call   c0000834 <strcpy>
c001bd65:	59                   	pop    ecx
c001bd66:	5e                   	pop    esi
c001bd67:	68 cf ba 02 c0       	push   0xc002bacf
c001bd6c:	53                   	push   ebx
c001bd6d:	e8 02 4c fe ff       	call   c0000974 <strcat>
c001bd72:	5d                   	pop    ebp
c001bd73:	58                   	pop    eax
c001bd74:	57                   	push   edi
c001bd75:	53                   	push   ebx
c001bd76:	e8 f9 4b fe ff       	call   c0000974 <strcat>
c001bd7b:	c7 04 24 85 be 02 c0 	mov    DWORD PTR [esp],0xc002be85
c001bd82:	e8 ea 6d ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001bd87:	83 c4 10             	add    esp,0x10
c001bd8a:	e9 25 ff ff ff       	jmp    c001bcb4 <sysCallGetEnv(regs*)+0x5d>

c001bd8f <sysAppSettings(regs*)>:
c001bd8f:	53                   	push   ebx
c001bd90:	83 ec 08             	sub    esp,0x8
c001bd93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bd97:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001bd9a:	8b 83 00 01 00 00    	mov    eax,DWORD PTR [ebx+0x100]
c001bda0:	25 e0 1f 00 00       	and    eax,0x1fe0
c001bda5:	66 3d c0 09          	cmp    ax,0x9c0
c001bda9:	75 2f                	jne    c001bdda <sysAppSettings(regs*)+0x4b>
c001bdab:	8a 83 00 01 00 00    	mov    al,BYTE PTR [ebx+0x100]
c001bdb1:	83 e0 1f             	and    eax,0x1f
c001bdb4:	3c 01                	cmp    al,0x1
c001bdb6:	74 2e                	je     c001bde6 <sysAppSettings(regs*)+0x57>
c001bdb8:	3c 07                	cmp    al,0x7
c001bdba:	0f 84 bd 00 00 00    	je     c001be7d <sysAppSettings(regs*)+0xee>
c001bdc0:	84 c0                	test   al,al
c001bdc2:	0f 84 dc 00 00 00    	je     c001bea4 <sysAppSettings(regs*)+0x115>
c001bdc8:	3c 08                	cmp    al,0x8
c001bdca:	74 6d                	je     c001be39 <sysAppSettings(regs*)+0xaa>
c001bdcc:	0f b6 c0             	movzx  eax,al
c001bdcf:	83 c4 08             	add    esp,0x8
c001bdd2:	05 e8 03 00 00       	add    eax,0x3e8
c001bdd7:	5b                   	pop    ebx
c001bdd8:	99                   	cdq    
c001bdd9:	c3                   	ret    
c001bdda:	b8 01 00 00 00       	mov    eax,0x1
c001bddf:	31 d2                	xor    edx,edx
c001bde1:	83 c4 08             	add    esp,0x8
c001bde4:	5b                   	pop    ebx
c001bde5:	c3                   	ret    
c001bde6:	51                   	push   ecx
c001bde7:	68 00 01 00 00       	push   0x100
c001bdec:	6a 00                	push   0x0
c001bdee:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bdf3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bdf6:	83 c0 0c             	add    eax,0xc
c001bdf9:	50                   	push   eax
c001bdfa:	e8 79 49 fe ff       	call   c0000778 <memset>
c001bdff:	83 c4 0c             	add    esp,0xc
c001be02:	68 ff 00 00 00       	push   0xff
c001be07:	53                   	push   ebx
c001be08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be0d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be10:	83 c0 0c             	add    eax,0xc
c001be13:	50                   	push   eax
c001be14:	e8 2b 49 fe ff       	call   c0000744 <memcpy>
c001be19:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be1e:	5b                   	pop    ebx
c001be1f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be22:	5a                   	pop    edx
c001be23:	8d 50 0c             	lea    edx,[eax+0xc]
c001be26:	52                   	push   edx
c001be27:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001be2d:	e8 74 4d ff ff       	call   c0010ba6 <VgaText::setTitle(char*)>
c001be32:	83 c4 10             	add    esp,0x10
c001be35:	31 c0                	xor    eax,eax
c001be37:	eb a6                	jmp    c001bddf <sysAppSettings(regs*)+0x50>
c001be39:	83 ec 08             	sub    esp,0x8
c001be3c:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001be42:	83 e0 0f             	and    eax,0xf
c001be45:	50                   	push   eax
c001be46:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be4b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be4e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001be54:	e8 3d 4d ff ff       	call   c0010b96 <VgaText::setTitleColour(VgaColour)>
c001be59:	58                   	pop    eax
c001be5a:	8b 83 04 01 00 00    	mov    eax,DWORD PTR [ebx+0x104]
c001be60:	5a                   	pop    edx
c001be61:	c1 e8 04             	shr    eax,0x4
c001be64:	83 e0 0f             	and    eax,0xf
c001be67:	50                   	push   eax
c001be68:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be6d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001be76:	e8 0b 4d ff ff       	call   c0010b86 <VgaText::setTitleTextColour(VgaColour)>
c001be7b:	eb b5                	jmp    c001be32 <sysAppSettings(regs*)+0xa3>
c001be7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be82:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001be85:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001be8b:	8a 83 01 01 00 00    	mov    al,BYTE PTR [ebx+0x101]
c001be91:	c0 e8 06             	shr    al,0x6
c001be94:	83 e0 01             	and    eax,0x1
c001be97:	88 82 1c 10 00 00    	mov    BYTE PTR [edx+0x101c],al
c001be9d:	31 c0                	xor    eax,eax
c001be9f:	e9 3b ff ff ff       	jmp    c001bddf <sysAppSettings(regs*)+0x50>
c001bea4:	b8 02 00 00 00       	mov    eax,0x2
c001bea9:	e9 31 ff ff ff       	jmp    c001bddf <sysAppSettings(regs*)+0x50>

c001beae <sysSetFatAttrib(regs*)>:
c001beae:	57                   	push   edi
c001beaf:	56                   	push   esi
c001beb0:	53                   	push   ebx
c001beb1:	83 ec 1c             	sub    esp,0x1c
c001beb4:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001beb8:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001bebb:	68 14 01 00 00       	push   0x114
c001bec0:	e8 7b 39 ff ff       	call   c000f840 <malloc>
c001bec5:	83 c4 0c             	add    esp,0xc
c001bec8:	89 c3                	mov    ebx,eax
c001beca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001becf:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bed2:	57                   	push   edi
c001bed3:	53                   	push   ebx
c001bed4:	e8 f1 71 ff ff       	call   c00130ca <File::File(char const*, Process*)>
c001bed9:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001bedc:	83 c4 0c             	add    esp,0xc
c001bedf:	0f b6 d4             	movzx  edx,ah
c001bee2:	0f b6 c0             	movzx  eax,al
c001bee5:	52                   	push   edx
c001bee6:	50                   	push   eax
c001bee7:	53                   	push   ebx
c001bee8:	e8 53 74 ff ff       	call   c0013340 <File::chfatattr(unsigned char, unsigned char)>
c001beed:	83 c4 10             	add    esp,0x10
c001bef0:	85 db                	test   ebx,ebx
c001bef2:	74 14                	je     c001bf08 <sysSetFatAttrib(regs*)+0x5a>
c001bef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bef8:	8b 13                	mov    edx,DWORD PTR [ebx]
c001befa:	83 ec 0c             	sub    esp,0xc
c001befd:	53                   	push   ebx
c001befe:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001bf01:	83 c4 10             	add    esp,0x10
c001bf04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001bf08:	85 c0                	test   eax,eax
c001bf0a:	0f 95 c0             	setne  al
c001bf0d:	31 d2                	xor    edx,edx
c001bf0f:	0f b6 c0             	movzx  eax,al
c001bf12:	f7 d8                	neg    eax
c001bf14:	83 d2 00             	adc    edx,0x0
c001bf17:	83 c4 10             	add    esp,0x10
c001bf1a:	f7 da                	neg    edx
c001bf1c:	5b                   	pop    ebx
c001bf1d:	5e                   	pop    esi
c001bf1e:	5f                   	pop    edi
c001bf1f:	c3                   	ret    

c001bf20 <sysPipe(regs*)>:
c001bf20:	57                   	push   edi
c001bf21:	56                   	push   esi
c001bf22:	53                   	push   ebx
c001bf23:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf27:	83 ec 0c             	sub    esp,0xc
c001bf2a:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001bf2d:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001bf30:	6a 20                	push   0x20
c001bf32:	e8 09 39 ff ff       	call   c000f840 <malloc>
c001bf37:	89 c3                	mov    ebx,eax
c001bf39:	58                   	pop    eax
c001bf3a:	5a                   	pop    edx
c001bf3b:	68 00 50 00 00       	push   0x5000
c001bf40:	53                   	push   ebx
c001bf41:	e8 90 45 ff ff       	call   c00104d6 <Pipe::Pipe(int)>
c001bf46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf49:	e8 e8 57 ff ff       	call   c0011736 <UnixFile::getFileDescriptor()>
c001bf4e:	89 07                	mov    DWORD PTR [edi],eax
c001bf50:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001bf53:	e8 de 57 ff ff       	call   c0011736 <UnixFile::getFileDescriptor()>
c001bf58:	83 c4 10             	add    esp,0x10
c001bf5b:	89 06                	mov    DWORD PTR [esi],eax
c001bf5d:	31 d2                	xor    edx,edx
c001bf5f:	5b                   	pop    ebx
c001bf60:	31 c0                	xor    eax,eax
c001bf62:	5e                   	pop    esi
c001bf63:	5f                   	pop    edi
c001bf64:	c3                   	ret    

c001bf65 <sysGetUnixTime(regs*)>:
c001bf65:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c001bf6a:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001bf70:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001bf74:	e9 3b 7b ff ff       	jmp    c0013ab4 <Clock::timeInSecondsLocal()>

c001bf79 <string_ends_with(char const*, char const*)>:
c001bf79:	57                   	push   edi
c001bf7a:	56                   	push   esi
c001bf7b:	53                   	push   ebx
c001bf7c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf80:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001bf84:	83 ec 0c             	sub    esp,0xc
c001bf87:	53                   	push   ebx
c001bf88:	e8 07 48 fe ff       	call   c0000794 <strlen>
c001bf8d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001bf90:	89 c6                	mov    esi,eax
c001bf92:	e8 fd 47 fe ff       	call   c0000794 <strlen>
c001bf97:	83 c4 10             	add    esp,0x10
c001bf9a:	39 c6                	cmp    esi,eax
c001bf9c:	7d 06                	jge    c001bfa4 <string_ends_with(char const*, char const*)+0x2b>
c001bf9e:	5b                   	pop    ebx
c001bf9f:	31 c0                	xor    eax,eax
c001bfa1:	5e                   	pop    esi
c001bfa2:	5f                   	pop    edi
c001bfa3:	c3                   	ret    
c001bfa4:	83 ec 08             	sub    esp,0x8
c001bfa7:	29 c6                	sub    esi,eax
c001bfa9:	57                   	push   edi
c001bfaa:	01 f3                	add    ebx,esi
c001bfac:	53                   	push   ebx
c001bfad:	e8 0e 49 fe ff       	call   c00008c0 <strcmp>
c001bfb2:	83 c4 10             	add    esp,0x10
c001bfb5:	85 c0                	test   eax,eax
c001bfb7:	5b                   	pop    ebx
c001bfb8:	0f 94 c0             	sete   al
c001bfbb:	5e                   	pop    esi
c001bfbc:	0f b6 c0             	movzx  eax,al
c001bfbf:	5f                   	pop    edi
c001bfc0:	c3                   	ret    

c001bfc1 <sysCallOpen(regs*)>:
c001bfc1:	56                   	push   esi
c001bfc2:	53                   	push   ebx
c001bfc3:	81 ec 04 01 00 00    	sub    esp,0x104
c001bfc9:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001bfd0:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001bfd3:	85 c9                	test   ecx,ecx
c001bfd5:	0f 84 b3 00 00 00    	je     c001c08e <sysCallOpen(regs*)+0xcd>
c001bfdb:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001bfde:	85 c0                	test   eax,eax
c001bfe0:	0f 84 a8 00 00 00    	je     c001c08e <sysCallOpen(regs*)+0xcd>
c001bfe6:	52                   	push   edx
c001bfe7:	68 d1 ba 02 c0       	push   0xc002bad1
c001bfec:	50                   	push   eax
c001bfed:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001bff1:	56                   	push   esi
c001bff2:	e8 29 6f ff ff       	call   c0012f20 <Fs::standardiseFiles(char*, char const*, char const*)>
c001bff7:	89 34 24             	mov    DWORD PTR [esp],esi
c001bffa:	e8 95 47 fe ff       	call   c0000794 <strlen>
c001bfff:	83 c4 10             	add    esp,0x10
c001c002:	48                   	dec    eax
c001c003:	74 1d                	je     c001c022 <sysCallOpen(regs*)+0x61>
c001c005:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c008:	eb 0f                	jmp    c001c019 <sysCallOpen(regs*)+0x58>
c001c00a:	80 fa 3a             	cmp    dl,0x3a
c001c00d:	74 0f                	je     c001c01e <sysCallOpen(regs*)+0x5d>
c001c00f:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c013:	48                   	dec    eax
c001c014:	74 0c                	je     c001c022 <sysCallOpen(regs*)+0x61>
c001c016:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c019:	80 fa 2e             	cmp    dl,0x2e
c001c01c:	75 ec                	jne    c001c00a <sysCallOpen(regs*)+0x49>
c001c01e:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c022:	83 ec 08             	sub    esp,0x8
c001c025:	68 d5 ba 02 c0       	push   0xc002bad5
c001c02a:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c02d:	e8 47 ff ff ff       	call   c001bf79 <string_ends_with(char const*, char const*)>
c001c032:	83 c4 10             	add    esp,0x10
c001c035:	85 c0                	test   eax,eax
c001c037:	75 17                	jne    c001c050 <sysCallOpen(regs*)+0x8f>
c001c039:	83 ec 08             	sub    esp,0x8
c001c03c:	68 f6 ba 02 c0       	push   0xc002baf6
c001c041:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c044:	e8 30 ff ff ff       	call   c001bf79 <string_ends_with(char const*, char const*)>
c001c049:	83 c4 10             	add    esp,0x10
c001c04c:	85 c0                	test   eax,eax
c001c04e:	74 51                	je     c001c0a1 <sysCallOpen(regs*)+0xe0>
c001c050:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c053:	83 ec 08             	sub    esp,0x8
c001c056:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c05c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c063:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c066:	ff 30                	push   DWORD PTR [eax]
c001c068:	68 da ba 02 c0       	push   0xc002bada
c001c06d:	e8 ff 6a ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001c072:	c7 04 24 e9 ba 02 c0 	mov    DWORD PTR [esp],0xc002bae9
c001c079:	e8 f3 6a ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001c07e:	83 c4 10             	add    esp,0x10
c001c081:	81 c4 04 01 00 00    	add    esp,0x104
c001c087:	31 c0                	xor    eax,eax
c001c089:	31 d2                	xor    edx,edx
c001c08b:	5b                   	pop    ebx
c001c08c:	5e                   	pop    esi
c001c08d:	c3                   	ret    
c001c08e:	81 c4 04 01 00 00    	add    esp,0x104
c001c094:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c099:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c09e:	5b                   	pop    ebx
c001c09f:	5e                   	pop    esi
c001c0a0:	c3                   	ret    
c001c0a1:	83 ec 08             	sub    esp,0x8
c001c0a4:	68 d6 ba 02 c0       	push   0xc002bad6
c001c0a9:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0ac:	e8 0f 48 fe ff       	call   c00008c0 <strcmp>
c001c0b1:	83 c4 10             	add    esp,0x10
c001c0b4:	85 c0                	test   eax,eax
c001c0b6:	74 98                	je     c001c050 <sysCallOpen(regs*)+0x8f>
c001c0b8:	83 ec 08             	sub    esp,0x8
c001c0bb:	68 d5 ba 02 c0       	push   0xc002bad5
c001c0c0:	56                   	push   esi
c001c0c1:	e8 b3 fe ff ff       	call   c001bf79 <string_ends_with(char const*, char const*)>
c001c0c6:	83 c4 10             	add    esp,0x10
c001c0c9:	85 c0                	test   eax,eax
c001c0cb:	75 83                	jne    c001c050 <sysCallOpen(regs*)+0x8f>
c001c0cd:	83 ec 08             	sub    esp,0x8
c001c0d0:	68 fb ba 02 c0       	push   0xc002bafb
c001c0d5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0d8:	e8 9c fe ff ff       	call   c001bf79 <string_ends_with(char const*, char const*)>
c001c0dd:	83 c4 10             	add    esp,0x10
c001c0e0:	85 c0                	test   eax,eax
c001c0e2:	0f 85 d9 00 00 00    	jne    c001c1c1 <sysCallOpen(regs*)+0x200>
c001c0e8:	83 ec 08             	sub    esp,0x8
c001c0eb:	68 00 bb 02 c0       	push   0xc002bb00
c001c0f0:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c0f3:	e8 81 fe ff ff       	call   c001bf79 <string_ends_with(char const*, char const*)>
c001c0f8:	83 c4 10             	add    esp,0x10
c001c0fb:	85 c0                	test   eax,eax
c001c0fd:	0f 85 be 00 00 00    	jne    c001c1c1 <sysCallOpen(regs*)+0x200>
c001c103:	83 ec 08             	sub    esp,0x8
c001c106:	68 fc ba 02 c0       	push   0xc002bafc
c001c10b:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c10e:	e8 ad 47 fe ff       	call   c00008c0 <strcmp>
c001c113:	83 c4 10             	add    esp,0x10
c001c116:	85 c0                	test   eax,eax
c001c118:	0f 84 a3 00 00 00    	je     c001c1c1 <sysCallOpen(regs*)+0x200>
c001c11e:	83 ec 08             	sub    esp,0x8
c001c121:	68 fb ba 02 c0       	push   0xc002bafb
c001c126:	56                   	push   esi
c001c127:	e8 4d fe ff ff       	call   c001bf79 <string_ends_with(char const*, char const*)>
c001c12c:	83 c4 10             	add    esp,0x10
c001c12f:	85 c0                	test   eax,eax
c001c131:	0f 85 8a 00 00 00    	jne    c001c1c1 <sysCallOpen(regs*)+0x200>
c001c137:	83 ec 0c             	sub    esp,0xc
c001c13a:	68 14 01 00 00       	push   0x114
c001c13f:	e8 fc 36 ff ff       	call   c000f840 <malloc>
c001c144:	83 c4 0c             	add    esp,0xc
c001c147:	89 c6                	mov    esi,eax
c001c149:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c14e:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c151:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c154:	56                   	push   esi
c001c155:	e8 70 6f ff ff       	call   c00130ca <File::File(char const*, Process*)>
c001c15a:	83 c4 10             	add    esp,0x10
c001c15d:	85 f6                	test   esi,esi
c001c15f:	0f 84 29 ff ff ff    	je     c001c08e <sysCallOpen(regs*)+0xcd>
c001c165:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c168:	0f b6 c2             	movzx  eax,dl
c001c16b:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c16e:	89 d0                	mov    eax,edx
c001c170:	83 e0 01             	and    eax,0x1
c001c173:	f6 c2 02             	test   dl,0x2
c001c176:	74 03                	je     c001c17b <sysCallOpen(regs*)+0x1ba>
c001c178:	83 c8 02             	or     eax,0x2
c001c17b:	f6 c2 04             	test   dl,0x4
c001c17e:	74 03                	je     c001c183 <sysCallOpen(regs*)+0x1c2>
c001c180:	83 c8 04             	or     eax,0x4
c001c183:	f6 c2 08             	test   dl,0x8
c001c186:	74 03                	je     c001c18b <sysCallOpen(regs*)+0x1ca>
c001c188:	83 c8 0a             	or     eax,0xa
c001c18b:	83 e2 10             	and    edx,0x10
c001c18e:	74 03                	je     c001c193 <sysCallOpen(regs*)+0x1d2>
c001c190:	83 c8 12             	or     eax,0x12
c001c193:	83 ec 08             	sub    esp,0x8
c001c196:	50                   	push   eax
c001c197:	56                   	push   esi
c001c198:	e8 91 6f ff ff       	call   c001312e <File::open(FileOpenMode)>
c001c19d:	83 c4 10             	add    esp,0x10
c001c1a0:	85 c0                	test   eax,eax
c001c1a2:	0f 85 e6 fe ff ff    	jne    c001c08e <sysCallOpen(regs*)+0xcd>
c001c1a8:	83 ec 0c             	sub    esp,0xc
c001c1ab:	56                   	push   esi
c001c1ac:	e8 85 55 ff ff       	call   c0011736 <UnixFile::getFileDescriptor()>
c001c1b1:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c1b4:	89 02                	mov    DWORD PTR [edx],eax
c001c1b6:	c1 f8 1f             	sar    eax,0x1f
c001c1b9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c1bc:	e9 bd fe ff ff       	jmp    c001c07e <sysCallOpen(regs*)+0xbd>
c001c1c1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c1c4:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c1ca:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c1d1:	e9 ab fe ff ff       	jmp    c001c081 <sysCallOpen(regs*)+0xc0>

c001c1d6 <Sys::loadSyscalls()>:
c001c1d6:	c7 05 80 0b 03 c0 e3 b2 01 c0 	mov    DWORD PTR ds:0xc0030b80,0xc001b2e3
c001c1e0:	c7 05 84 0b 03 c0 82 ae 01 c0 	mov    DWORD PTR ds:0xc0030b84,0xc001ae82
c001c1ea:	c7 05 88 0b 03 c0 ec af 01 c0 	mov    DWORD PTR ds:0xc0030b88,0xc001afec
c001c1f4:	c7 05 8c 0b 03 c0 19 b2 01 c0 	mov    DWORD PTR ds:0xc0030b8c,0xc001b219
c001c1fe:	c7 05 90 0b 03 c0 84 af 01 c0 	mov    DWORD PTR ds:0xc0030b90,0xc001af84
c001c208:	c7 05 94 0b 03 c0 b9 ae 01 c0 	mov    DWORD PTR ds:0xc0030b94,0xc001aeb9
c001c212:	c7 05 98 0b 03 c0 9a ae 01 c0 	mov    DWORD PTR ds:0xc0030b98,0xc001ae9a
c001c21c:	c7 05 9c 0b 03 c0 8b b0 01 c0 	mov    DWORD PTR ds:0xc0030b9c,0xc001b08b
c001c226:	c7 05 a4 0b 03 c0 13 b8 01 c0 	mov    DWORD PTR ds:0xc0030ba4,0xc001b813
c001c230:	c7 05 a0 0b 03 c0 c1 bf 01 c0 	mov    DWORD PTR ds:0xc0030ba0,0xc001bfc1
c001c23a:	c7 05 a8 0b 03 c0 9b b8 01 c0 	mov    DWORD PTR ds:0xc0030ba8,0xc001b89b
c001c244:	c7 05 ac 0b 03 c0 02 b5 01 c0 	mov    DWORD PTR ds:0xc0030bac,0xc001b502
c001c24e:	c7 05 b0 0b 03 c0 1e b3 01 c0 	mov    DWORD PTR ds:0xc0030bb0,0xc001b31e
c001c258:	c7 05 b4 0b 03 c0 23 b3 01 c0 	mov    DWORD PTR ds:0xc0030bb4,0xc001b323
c001c262:	c7 05 b8 0b 03 c0 76 b9 01 c0 	mov    DWORD PTR ds:0xc0030bb8,0xc001b976
c001c26c:	c7 05 bc 0b 03 c0 10 b9 01 c0 	mov    DWORD PTR ds:0xc0030bbc,0xc001b910
c001c276:	c7 05 c0 0b 03 c0 ea b5 01 c0 	mov    DWORD PTR ds:0xc0030bc0,0xc001b5ea
c001c280:	c7 05 c4 0b 03 c0 53 b6 01 c0 	mov    DWORD PTR ds:0xc0030bc4,0xc001b653
c001c28a:	c7 05 c8 0b 03 c0 d0 b6 01 c0 	mov    DWORD PTR ds:0xc0030bc8,0xc001b6d0
c001c294:	c7 05 cc 0b 03 c0 28 b3 01 c0 	mov    DWORD PTR ds:0xc0030bcc,0xc001b328
c001c29e:	c7 05 d0 0b 03 c0 e6 b9 01 c0 	mov    DWORD PTR ds:0xc0030bd0,0xc001b9e6
c001c2a8:	c7 05 d4 0b 03 c0 00 ba 01 c0 	mov    DWORD PTR ds:0xc0030bd4,0xc001ba00
c001c2b2:	c7 05 d8 0b 03 c0 00 ba 01 c0 	mov    DWORD PTR ds:0xc0030bd8,0xc001ba00
c001c2bc:	c7 05 dc 0b 03 c0 41 ba 01 c0 	mov    DWORD PTR ds:0xc0030bdc,0xc001ba41
c001c2c6:	c7 05 e0 0b 03 c0 a5 ba 01 c0 	mov    DWORD PTR ds:0xc0030be0,0xc001baa5
c001c2d0:	c7 05 e4 0b 03 c0 d4 b4 01 c0 	mov    DWORD PTR ds:0xc0030be4,0xc001b4d4
c001c2da:	c7 05 e8 0b 03 c0 09 bb 01 c0 	mov    DWORD PTR ds:0xc0030be8,0xc001bb09
c001c2e4:	c7 05 ec 0b 03 c0 91 b4 01 c0 	mov    DWORD PTR ds:0xc0030bec,0xc001b491
c001c2ee:	c7 05 f0 0b 03 c0 55 bb 01 c0 	mov    DWORD PTR ds:0xc0030bf0,0xc001bb55
c001c2f8:	c7 05 f4 0b 03 c0 90 b5 01 c0 	mov    DWORD PTR ds:0xc0030bf4,0xc001b590
c001c302:	c7 05 f8 0b 03 c0 d8 bb 01 c0 	mov    DWORD PTR ds:0xc0030bf8,0xc001bbd8
c001c30c:	c7 05 fc 0b 03 c0 53 b7 01 c0 	mov    DWORD PTR ds:0xc0030bfc,0xc001b753
c001c316:	c7 05 00 0c 03 c0 ff bb 01 c0 	mov    DWORD PTR ds:0xc0030c00,0xc001bbff
c001c320:	c7 05 04 0c 03 c0 57 bc 01 c0 	mov    DWORD PTR ds:0xc0030c04,0xc001bc57
c001c32a:	c7 05 08 0c 03 c0 8f bd 01 c0 	mov    DWORD PTR ds:0xc0030c08,0xc001bd8f
c001c334:	c7 05 0c 0c 03 c0 32 b3 01 c0 	mov    DWORD PTR ds:0xc0030c0c,0xc001b332
c001c33e:	c7 05 10 0c 03 c0 9c b3 01 c0 	mov    DWORD PTR ds:0xc0030c10,0xc001b39c
c001c348:	c7 05 14 0c 03 c0 e2 b3 01 c0 	mov    DWORD PTR ds:0xc0030c14,0xc001b3e2
c001c352:	c7 05 18 0c 03 c0 ae be 01 c0 	mov    DWORD PTR ds:0xc0030c18,0xc001beae
c001c35c:	c7 05 1c 0c 03 c0 1b ba 01 c0 	mov    DWORD PTR ds:0xc0030c1c,0xc001ba1b
c001c366:	c7 05 20 0c 03 c0 33 b4 01 c0 	mov    DWORD PTR ds:0xc0030c20,0xc001b433
c001c370:	c7 05 24 0c 03 c0 20 bf 01 c0 	mov    DWORD PTR ds:0xc0030c24,0xc001bf20
c001c37a:	c7 05 28 0c 03 c0 65 bf 01 c0 	mov    DWORD PTR ds:0xc0030c28,0xc001bf65
c001c384:	c7 05 2c 0c 03 c0 dc ae 01 c0 	mov    DWORD PTR ds:0xc0030c2c,0xc001aedc
c001c38e:	c7 05 30 0c 03 c0 a7 b0 01 c0 	mov    DWORD PTR ds:0xc0030c30,0xc001b0a7
c001c398:	c7 05 34 0c 03 c0 cf b1 01 c0 	mov    DWORD PTR ds:0xc0030c34,0xc001b1cf
c001c3a2:	c7 05 38 0c 03 c0 4c ae 01 c0 	mov    DWORD PTR ds:0xc0030c38,0xc001ae4c
c001c3ac:	c7 05 3c 0c 03 c0 81 b2 01 c0 	mov    DWORD PTR ds:0xc0030c3c,0xc001b281
c001c3b6:	c7 05 40 0c 03 c0 c5 ae 01 c0 	mov    DWORD PTR ds:0xc0030c40,0xc001aec5
c001c3c0:	c3                   	ret    

c001c3c1 <Sys::systemCall(regs*, void*)>:
c001c3c1:	53                   	push   ebx
c001c3c2:	83 ec 08             	sub    esp,0x8
c001c3c5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c3c9:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001c3cc:	83 f8 7f             	cmp    eax,0x7f
c001c3cf:	77 16                	ja     c001c3e7 <Sys::systemCall(regs*, void*)+0x26>
c001c3d1:	8b 14 85 80 0b 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf480]
c001c3d8:	85 d2                	test   edx,edx
c001c3da:	74 0b                	je     c001c3e7 <Sys::systemCall(regs*, void*)+0x26>
c001c3dc:	83 ec 0c             	sub    esp,0xc
c001c3df:	53                   	push   ebx
c001c3e0:	ff d2                	call   edx
c001c3e2:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001c3e5:	eb 0d                	jmp    c001c3f4 <Sys::systemCall(regs*, void*)+0x33>
c001c3e7:	52                   	push   edx
c001c3e8:	52                   	push   edx
c001c3e9:	50                   	push   eax
c001c3ea:	68 05 bb 02 c0       	push   0xc002bb05
c001c3ef:	e8 7d 67 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001c3f4:	83 c4 10             	add    esp,0x10
c001c3f7:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001c3fc:	31 d2                	xor    edx,edx
c001c3fe:	83 c4 08             	add    esp,0x8
c001c401:	5b                   	pop    ebx
c001c402:	c3                   	ret    

c001c403 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001c403:	55                   	push   ebp
c001c404:	57                   	push   edi
c001c405:	56                   	push   esi
c001c406:	53                   	push   ebx
c001c407:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001c40d:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c414:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001c41b:	85 c0                	test   eax,eax
c001c41d:	0f 95 c1             	setne  cl
c001c420:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001c428:	0f 94 c2             	sete   dl
c001c42b:	84 d1                	test   cl,dl
c001c42d:	74 23                	je     c001c452 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c42f:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001c435:	74 1b                	je     c001c452 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001c437:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c43d:	89 da                	mov    edx,ebx
c001c43f:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001c445:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001c44b:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001c452:	8b 8c 24 48 10 00 00 	mov    ecx,DWORD PTR [esp+0x1048]
c001c459:	05 ff 0f 00 00       	add    eax,0xfff
c001c45e:	83 ec 0c             	sub    esp,0xc
c001c461:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001c465:	8d a9 ff 0f 00 00    	lea    ebp,[ecx+0xfff]
c001c46b:	c1 e8 0c             	shr    eax,0xc
c001c46e:	89 ef                	mov    edi,ebp
c001c470:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c474:	c1 ef 0c             	shr    edi,0xc
c001c477:	6a 01                	push   0x1
c001c479:	e8 03 57 ff ff       	call   c0011b81 <Virt::allocateKernelVirtualPages(int)>
c001c47e:	89 c6                	mov    esi,eax
c001c480:	58                   	pop    eax
c001c481:	5a                   	pop    edx
c001c482:	57                   	push   edi
c001c483:	68 8b bb 02 c0       	push   0xc002bb8b
c001c488:	e8 e4 66 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001c48d:	59                   	pop    ecx
c001c48e:	58                   	pop    eax
c001c48f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001c493:	68 9d bb 02 c0       	push   0xc002bb9d
c001c498:	e8 d4 66 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001c49d:	83 c4 10             	add    esp,0x10
c001c4a0:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001c4a6:	0f 86 24 01 00 00    	jbe    c001c5d0 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cd>
c001c4ac:	c1 e7 0c             	shl    edi,0xc
c001c4af:	8d 04 1f             	lea    eax,[edi+ebx*1]
c001c4b2:	89 df                	mov    edi,ebx
c001c4b4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c4b8:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001c4bf:	01 dd                	add    ebp,ebx
c001c4c1:	29 fd                	sub    ebp,edi
c001c4c3:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c001c4c7:	0f 84 01 01 00 00    	je     c001c5ce <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1cb>
c001c4cd:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001c4d3:	76 05                	jbe    c001c4da <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xd7>
c001c4d5:	bd 00 10 00 00       	mov    ebp,0x1000
c001c4da:	83 ec 0c             	sub    esp,0xc
c001c4dd:	31 d2                	xor    edx,edx
c001c4df:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001c4e6:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c4e8:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c4ec:	50                   	push   eax
c001c4ed:	8d 44 24 30          	lea    eax,[esp+0x30]
c001c4f1:	50                   	push   eax
c001c4f2:	52                   	push   edx
c001c4f3:	55                   	push   ebp
c001c4f4:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001c4fb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c4fe:	83 c4 20             	add    esp,0x20
c001c501:	85 c0                	test   eax,eax
c001c503:	74 0a                	je     c001c50f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x10c>
c001c505:	53                   	push   ebx
c001c506:	53                   	push   ebx
c001c507:	50                   	push   eax
c001c508:	68 af bb 02 c0       	push   0xc002bbaf
c001c50d:	eb 0f                	jmp    c001c51e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x11b>
c001c50f:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001c513:	74 20                	je     c001c535 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x132>
c001c515:	51                   	push   ecx
c001c516:	51                   	push   ecx
c001c517:	6a 00                	push   0x0
c001c519:	68 da bb 02 c0       	push   0xc002bbda
c001c51e:	e8 4e 66 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001c523:	89 34 24             	mov    DWORD PTR [esp],esi
c001c526:	e8 ba 59 ff ff       	call   c0011ee5 <Virt::freeKernelVirtualPages(unsigned long)>
c001c52b:	83 c4 10             	add    esp,0x10
c001c52e:	31 c0                	xor    eax,eax
c001c530:	e9 55 01 00 00       	jmp    c001c68a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x287>
c001c535:	e8 d8 14 00 00       	call   c001da12 <lockScheduler()>
c001c53a:	e8 f6 39 ff ff       	call   c000ff35 <Phys::allocatePage()>
c001c53f:	6a 07                	push   0x7
c001c541:	89 c5                	mov    ebp,eax
c001c543:	56                   	push   esi
c001c544:	50                   	push   eax
c001c545:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c54a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c54d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c553:	e8 f4 5c ff ff       	call   c001224c <VAS::mapPage(unsigned long, unsigned long, int)>
c001c558:	83 c4 0c             	add    esp,0xc
c001c55b:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c562:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c568:	6a 00                	push   0x0
c001c56a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c56f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c572:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c578:	e8 39 5b ff ff       	call   c00120b6 <VAS::mapOtherVASIn(bool, VAS*)>
c001c57d:	58                   	pop    eax
c001c57e:	5a                   	pop    edx
c001c57f:	68 07 04 00 00       	push   0x407
c001c584:	57                   	push   edi
c001c585:	81 c7 00 10 00 00    	add    edi,0x1000
c001c58b:	55                   	push   ebp
c001c58c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c593:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c599:	6a 00                	push   0x0
c001c59b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5a0:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5a3:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5a9:	e8 58 60 ff ff       	call   c0012606 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c5ae:	83 c4 1c             	add    esp,0x1c
c001c5b1:	68 00 10 00 00       	push   0x1000
c001c5b6:	8d 44 24 28          	lea    eax,[esp+0x28]
c001c5ba:	50                   	push   eax
c001c5bb:	56                   	push   esi
c001c5bc:	e8 83 41 fe ff       	call   c0000744 <memcpy>
c001c5c1:	e8 4e 14 00 00       	call   c001da14 <unlockScheduler()>
c001c5c6:	83 c4 10             	add    esp,0x10
c001c5c9:	e9 ea fe ff ff       	jmp    c001c4b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb5>
c001c5ce:	89 fb                	mov    ebx,edi
c001c5d0:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001c5d8:	0f 86 9e 00 00 00    	jbe    c001c67c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x279>
c001c5de:	e8 2f 14 00 00       	call   c001da12 <lockScheduler()>
c001c5e3:	51                   	push   ecx
c001c5e4:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001c5eb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c5f1:	6a 00                	push   0x0
c001c5f3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5f8:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c5fb:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c601:	e8 b0 5a ff ff       	call   c00120b6 <VAS::mapOtherVASIn(bool, VAS*)>
c001c606:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c60a:	c1 e7 0c             	shl    edi,0xc
c001c60d:	01 df                	add    edi,ebx
c001c60f:	83 c4 10             	add    esp,0x10
c001c612:	39 fb                	cmp    ebx,edi
c001c614:	74 61                	je     c001c677 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x274>
c001c616:	e8 1a 39 ff ff       	call   c000ff35 <Phys::allocatePage()>
c001c61b:	6a 07                	push   0x7
c001c61d:	89 c5                	mov    ebp,eax
c001c61f:	56                   	push   esi
c001c620:	50                   	push   eax
c001c621:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c626:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c629:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c62f:	e8 18 5c ff ff       	call   c001224c <VAS::mapPage(unsigned long, unsigned long, int)>
c001c634:	58                   	pop    eax
c001c635:	5a                   	pop    edx
c001c636:	68 07 04 00 00       	push   0x407
c001c63b:	53                   	push   ebx
c001c63c:	81 c3 00 10 00 00    	add    ebx,0x1000
c001c642:	55                   	push   ebp
c001c643:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001c64a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c650:	6a 00                	push   0x0
c001c652:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c657:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c65a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001c660:	e8 a1 5f ff ff       	call   c0012606 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001c665:	83 c4 1c             	add    esp,0x1c
c001c668:	68 00 10 00 00       	push   0x1000
c001c66d:	6a 00                	push   0x0
c001c66f:	56                   	push   esi
c001c670:	e8 03 41 fe ff       	call   c0000778 <memset>
c001c675:	eb 98                	jmp    c001c60f <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x20c>
c001c677:	e8 98 13 00 00       	call   c001da14 <unlockScheduler()>
c001c67c:	83 ec 0c             	sub    esp,0xc
c001c67f:	56                   	push   esi
c001c680:	e8 60 58 ff ff       	call   c0011ee5 <Virt::freeKernelVirtualPages(unsigned long)>
c001c685:	83 c4 10             	add    esp,0x10
c001c688:	b0 01                	mov    al,0x1
c001c68a:	81 c4 2c 10 00 00    	add    esp,0x102c
c001c690:	5b                   	pop    ebx
c001c691:	5e                   	pop    esi
c001c692:	5f                   	pop    edi
c001c693:	5d                   	pop    ebp
c001c694:	c3                   	ret    

c001c695 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001c695:	55                   	push   ebp
c001c696:	57                   	push   edi
c001c697:	56                   	push   esi
c001c698:	53                   	push   ebx
c001c699:	83 ec 48             	sub    esp,0x48
c001c69c:	68 14 01 00 00       	push   0x114
c001c6a1:	e8 9a 31 ff ff       	call   c000f840 <malloc>
c001c6a6:	83 c4 0c             	add    esp,0xc
c001c6a9:	89 c6                	mov    esi,eax
c001c6ab:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001c6af:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001c6b3:	50                   	push   eax
c001c6b4:	e8 11 6a ff ff       	call   c00130ca <File::File(char const*, Process*)>
c001c6b9:	58                   	pop    eax
c001c6ba:	5a                   	pop    edx
c001c6bb:	6a 01                	push   0x1
c001c6bd:	56                   	push   esi
c001c6be:	e8 6b 6a ff ff       	call   c001312e <File::open(FileOpenMode)>
c001c6c3:	83 c4 10             	add    esp,0x10
c001c6c6:	85 c0                	test   eax,eax
c001c6c8:	0f 85 47 01 00 00    	jne    c001c815 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c6ce:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001c6d6:	83 ec 0c             	sub    esp,0xc
c001c6d9:	6a 34                	push   0x34
c001c6db:	e8 60 31 ff ff       	call   c000f840 <malloc>
c001c6e0:	89 c3                	mov    ebx,eax
c001c6e2:	58                   	pop    eax
c001c6e3:	8b 06                	mov    eax,DWORD PTR [esi]
c001c6e5:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001c6e9:	57                   	push   edi
c001c6ea:	53                   	push   ebx
c001c6eb:	6a 00                	push   0x0
c001c6ed:	6a 34                	push   0x34
c001c6ef:	56                   	push   esi
c001c6f0:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c6f3:	83 c4 20             	add    esp,0x20
c001c6f6:	85 c0                	test   eax,eax
c001c6f8:	0f 85 17 01 00 00    	jne    c001c815 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c6fe:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001c704:	0f 85 0b 01 00 00    	jne    c001c815 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c70a:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c70d:	85 c0                	test   eax,eax
c001c70f:	0f 84 00 01 00 00    	je     c001c815 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c715:	31 d2                	xor    edx,edx
c001c717:	55                   	push   ebp
c001c718:	52                   	push   edx
c001c719:	50                   	push   eax
c001c71a:	56                   	push   esi
c001c71b:	e8 cc 6a ff ff       	call   c00131ec <File::seek(unsigned long long)>
c001c720:	83 c4 10             	add    esp,0x10
c001c723:	85 c0                	test   eax,eax
c001c725:	0f 85 ea 00 00 00    	jne    c001c815 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c72b:	83 ec 0c             	sub    esp,0xc
c001c72e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001c731:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c735:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001c739:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c73d:	0f af c2             	imul   eax,edx
c001c740:	50                   	push   eax
c001c741:	e8 fa 30 ff ff       	call   c000f840 <malloc>
c001c746:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c748:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001c74c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c74f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001c753:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001c757:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001c75b:	0f af c2             	imul   eax,edx
c001c75e:	99                   	cdq    
c001c75f:	52                   	push   edx
c001c760:	50                   	push   eax
c001c761:	56                   	push   esi
c001c762:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c765:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001c768:	83 c4 20             	add    esp,0x20
c001c76b:	85 c0                	test   eax,eax
c001c76d:	0f 84 a2 00 00 00    	je     c001c815 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c773:	31 d2                	xor    edx,edx
c001c775:	51                   	push   ecx
c001c776:	52                   	push   edx
c001c777:	50                   	push   eax
c001c778:	56                   	push   esi
c001c779:	e8 6e 6a ff ff       	call   c00131ec <File::seek(unsigned long long)>
c001c77e:	83 c4 10             	add    esp,0x10
c001c781:	85 c0                	test   eax,eax
c001c783:	0f 85 8c 00 00 00    	jne    c001c815 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001c789:	83 ec 0c             	sub    esp,0xc
c001c78c:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c790:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c794:	31 ed                	xor    ebp,ebp
c001c796:	0f af c2             	imul   eax,edx
c001c799:	50                   	push   eax
c001c79a:	e8 a1 30 ff ff       	call   c000f840 <malloc>
c001c79f:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001c7a1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c7a5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c7a8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c7ac:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001c7b0:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001c7b4:	0f af c2             	imul   eax,edx
c001c7b7:	99                   	cdq    
c001c7b8:	52                   	push   edx
c001c7b9:	50                   	push   eax
c001c7ba:	56                   	push   esi
c001c7bb:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c7be:	83 c4 20             	add    esp,0x20
c001c7c1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001c7c9:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001c7cd:	0f 86 80 00 00 00    	jbe    c001c853 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001c7d3:	0f b7 fd             	movzx  edi,bp
c001c7d6:	c1 e7 05             	shl    edi,0x5
c001c7d9:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001c7dd:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001c7e0:	75 6b                	jne    c001c84d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c7e2:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001c7e5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001c7e9:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001c7ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c7f0:	52                   	push   edx
c001c7f1:	31 d2                	xor    edx,edx
c001c7f3:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001c7f6:	52                   	push   edx
c001c7f7:	50                   	push   eax
c001c7f8:	56                   	push   esi
c001c7f9:	e8 ee 69 ff ff       	call   c00131ec <File::seek(unsigned long long)>
c001c7fe:	83 c4 10             	add    esp,0x10
c001c801:	85 c0                	test   eax,eax
c001c803:	74 17                	je     c001c81c <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001c805:	83 ec 0c             	sub    esp,0xc
c001c808:	68 06 bc 02 c0       	push   0xc002bc06
c001c80d:	e8 5f 63 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001c812:	83 c4 10             	add    esp,0x10
c001c815:	31 c0                	xor    eax,eax
c001c817:	e9 87 00 00 00       	jmp    c001c8a3 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001c81c:	83 ec 0c             	sub    esp,0xc
c001c81f:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001c822:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001c825:	50                   	push   eax
c001c826:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001c82a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001c82e:	56                   	push   esi
c001c82f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001c833:	e8 cb fb ff ff       	call   c001c403 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001c838:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c83c:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001c840:	83 c4 20             	add    esp,0x20
c001c843:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001c847:	73 04                	jae    c001c84d <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001c849:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c84d:	45                   	inc    ebp
c001c84e:	e9 76 ff ff ff       	jmp    c001c7c9 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001c853:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001c857:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001c85b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c85f:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001c865:	83 ec 0c             	sub    esp,0xc
c001c868:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001c86e:	25 00 f0 ff ff       	and    eax,0xfffff000
c001c873:	05 00 10 00 00       	add    eax,0x1000
c001c878:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c87b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001c87f:	e8 cc 2f ff ff       	call   c000f850 <free>
c001c884:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c887:	e8 c4 2f ff ff       	call   c000f850 <free>
c001c88c:	58                   	pop    eax
c001c88d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c891:	e8 ba 2f ff ff       	call   c000f850 <free>
c001c896:	89 34 24             	mov    DWORD PTR [esp],esi
c001c899:	e8 ee 68 ff ff       	call   c001318c <File::close()>
c001c89e:	83 c4 10             	add    esp,0x10
c001c8a1:	b0 01                	mov    al,0x1
c001c8a3:	83 c4 3c             	add    esp,0x3c
c001c8a6:	5b                   	pop    ebx
c001c8a7:	5e                   	pop    esi
c001c8a8:	5f                   	pop    edi
c001c8a9:	5d                   	pop    ebp
c001c8aa:	c3                   	ret    

c001c8ab <Thr::runtimeReferenceHelper()>:
c001c8ab:	83 ec 18             	sub    esp,0x18
c001c8ae:	68 0e bc 02 c0       	push   0xc002bc0e
c001c8b3:	e8 b9 62 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001c8b8:	fa                   	cli    
c001c8b9:	83 c4 10             	add    esp,0x10
c001c8bc:	eb fe                	jmp    c001c8bc <Thr::runtimeReferenceHelper()+0x11>

c001c8be <Thr::getAddressOfKernelSymbol(char const*)>:
c001c8be:	57                   	push   edi
c001c8bf:	56                   	push   esi
c001c8c0:	53                   	push   ebx
c001c8c1:	31 db                	xor    ebx,ebx
c001c8c3:	39 1d 20 15 03 c0    	cmp    DWORD PTR ds:0xc0031520,ebx
c001c8c9:	7e 3c                	jle    c001c907 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001c8cb:	8b 34 9d a0 14 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffceb60]
c001c8d2:	31 ff                	xor    edi,edi
c001c8d4:	39 3c 9d a0 13 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcec60],edi
c001c8db:	7e 27                	jle    c001c904 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001c8dd:	50                   	push   eax
c001c8de:	50                   	push   eax
c001c8df:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c8e3:	8b 06                	mov    eax,DWORD PTR [esi]
c001c8e5:	03 04 9d 20 14 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcebe0]
c001c8ec:	50                   	push   eax
c001c8ed:	e8 ce 3f fe ff       	call   c00008c0 <strcmp>
c001c8f2:	83 c4 10             	add    esp,0x10
c001c8f5:	85 c0                	test   eax,eax
c001c8f7:	75 05                	jne    c001c8fe <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001c8f9:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001c8fc:	eb 0b                	jmp    c001c909 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001c8fe:	83 c6 10             	add    esi,0x10
c001c901:	47                   	inc    edi
c001c902:	eb d0                	jmp    c001c8d4 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001c904:	43                   	inc    ebx
c001c905:	eb bc                	jmp    c001c8c3 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001c907:	31 c0                	xor    eax,eax
c001c909:	5b                   	pop    ebx
c001c90a:	5e                   	pop    esi
c001c90b:	5f                   	pop    edi
c001c90c:	c3                   	ret    

c001c90d <Thr::loadKernelSymbolTable(char const*)>:
c001c90d:	55                   	push   ebp
c001c90e:	57                   	push   edi
c001c90f:	56                   	push   esi
c001c910:	53                   	push   ebx
c001c911:	83 ec 68             	sub    esp,0x68
c001c914:	8b 35 74 15 03 c0    	mov    esi,DWORD PTR ds:0xc0031574
c001c91a:	68 14 01 00 00       	push   0x114
c001c91f:	e8 1c 2f ff ff       	call   c000f840 <malloc>
c001c924:	83 c4 0c             	add    esp,0xc
c001c927:	89 c3                	mov    ebx,eax
c001c929:	56                   	push   esi
c001c92a:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001c92e:	50                   	push   eax
c001c92f:	e8 96 67 ff ff       	call   c00130ca <File::File(char const*, Process*)>
c001c934:	5e                   	pop    esi
c001c935:	5f                   	pop    edi
c001c936:	6a 01                	push   0x1
c001c938:	53                   	push   ebx
c001c939:	e8 f0 67 ff ff       	call   c001312e <File::open(FileOpenMode)>
c001c93e:	83 c4 10             	add    esp,0x10
c001c941:	85 c0                	test   eax,eax
c001c943:	74 0a                	je     c001c94f <Thr::loadKernelSymbolTable(char const*)+0x42>
c001c945:	83 ec 0c             	sub    esp,0xc
c001c948:	68 30 bc 02 c0       	push   0xc002bc30
c001c94d:	eb 34                	jmp    c001c983 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001c94f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001c957:	83 ec 0c             	sub    esp,0xc
c001c95a:	6a 34                	push   0x34
c001c95c:	e8 df 2e ff ff       	call   c000f840 <malloc>
c001c961:	59                   	pop    ecx
c001c962:	89 c7                	mov    edi,eax
c001c964:	8d 74 24 34          	lea    esi,[esp+0x34]
c001c968:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c96a:	56                   	push   esi
c001c96b:	57                   	push   edi
c001c96c:	6a 00                	push   0x0
c001c96e:	6a 34                	push   0x34
c001c970:	53                   	push   ebx
c001c971:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001c974:	83 c4 20             	add    esp,0x20
c001c977:	85 c0                	test   eax,eax
c001c979:	74 17                	je     c001c992 <Thr::loadKernelSymbolTable(char const*)+0x85>
c001c97b:	83 ec 0c             	sub    esp,0xc
c001c97e:	68 47 bc 02 c0       	push   0xc002bc47
c001c983:	e8 65 d8 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001c988:	83 c4 10             	add    esp,0x10
c001c98b:	31 c0                	xor    eax,eax
c001c98d:	e9 31 02 00 00       	jmp    c001cbc3 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001c992:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001c998:	75 e1                	jne    c001c97b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c99a:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001c99d:	85 c0                	test   eax,eax
c001c99f:	74 da                	je     c001c97b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c9a1:	52                   	push   edx
c001c9a2:	31 d2                	xor    edx,edx
c001c9a4:	52                   	push   edx
c001c9a5:	50                   	push   eax
c001c9a6:	53                   	push   ebx
c001c9a7:	e8 40 68 ff ff       	call   c00131ec <File::seek(unsigned long long)>
c001c9ac:	83 c4 10             	add    esp,0x10
c001c9af:	85 c0                	test   eax,eax
c001c9b1:	75 c8                	jne    c001c97b <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001c9b3:	83 ec 0c             	sub    esp,0xc
c001c9b6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c9ba:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c9be:	31 ed                	xor    ebp,ebp
c001c9c0:	0f af c2             	imul   eax,edx
c001c9c3:	50                   	push   eax
c001c9c4:	e8 77 2e ff ff       	call   c000f840 <malloc>
c001c9c9:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001c9cb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001c9cf:	89 34 24             	mov    DWORD PTR [esp],esi
c001c9d2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001c9d6:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001c9da:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001c9de:	0f af c2             	imul   eax,edx
c001c9e1:	99                   	cdq    
c001c9e2:	52                   	push   edx
c001c9e3:	50                   	push   eax
c001c9e4:	53                   	push   ebx
c001c9e5:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001c9e8:	83 c4 20             	add    esp,0x20
c001c9eb:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001c9f3:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001c9fb:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001ca03:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ca0b:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001ca0f:	0f 86 aa 00 00 00    	jbe    c001cabf <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001ca15:	0f b7 f5             	movzx  esi,bp
c001ca18:	6b f6 28             	imul   esi,esi,0x28
c001ca1b:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ca1f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ca22:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001ca26:	50                   	push   eax
c001ca27:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ca2b:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001ca2f:	8b 16                	mov    edx,DWORD PTR [esi]
c001ca31:	6b c0 28             	imul   eax,eax,0x28
c001ca34:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001ca38:	89 d0                	mov    eax,edx
c001ca3a:	31 d2                	xor    edx,edx
c001ca3c:	52                   	push   edx
c001ca3d:	50                   	push   eax
c001ca3e:	53                   	push   ebx
c001ca3f:	e8 a8 67 ff ff       	call   c00131ec <File::seek(unsigned long long)>
c001ca44:	83 c4 0c             	add    esp,0xc
c001ca47:	6a 20                	push   0x20
c001ca49:	6a 00                	push   0x0
c001ca4b:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ca4f:	52                   	push   edx
c001ca50:	e8 23 3d fe ff       	call   c0000778 <memset>
c001ca55:	58                   	pop    eax
c001ca56:	8b 03                	mov    eax,DWORD PTR [ebx]
c001ca58:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001ca5c:	51                   	push   ecx
c001ca5d:	8d 54 24 40          	lea    edx,[esp+0x40]
c001ca61:	52                   	push   edx
c001ca62:	6a 00                	push   0x0
c001ca64:	6a 1f                	push   0x1f
c001ca66:	53                   	push   ebx
c001ca67:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ca6a:	83 c4 18             	add    esp,0x18
c001ca6d:	68 5e bc 02 c0       	push   0xc002bc5e
c001ca72:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001ca76:	52                   	push   edx
c001ca77:	e8 44 3e fe ff       	call   c00008c0 <strcmp>
c001ca7c:	83 c4 10             	add    esp,0x10
c001ca7f:	85 c0                	test   eax,eax
c001ca81:	75 0f                	jne    c001ca92 <Thr::loadKernelSymbolTable(char const*)+0x185>
c001ca83:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ca86:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ca8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001ca8e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ca92:	50                   	push   eax
c001ca93:	50                   	push   eax
c001ca94:	68 66 bc 02 c0       	push   0xc002bc66
c001ca99:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001ca9d:	50                   	push   eax
c001ca9e:	e8 1d 3e fe ff       	call   c00008c0 <strcmp>
c001caa3:	83 c4 10             	add    esp,0x10
c001caa6:	85 c0                	test   eax,eax
c001caa8:	75 0f                	jne    c001cab9 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001caaa:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001caad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cab1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cab5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cab9:	45                   	inc    ebp
c001caba:	e9 4c ff ff ff       	jmp    c001ca0b <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001cabf:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001cac4:	75 10                	jne    c001cad6 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001cac6:	83 ec 0c             	sub    esp,0xc
c001cac9:	68 6e bc 02 c0       	push   0xc002bc6e
c001cace:	e8 1a d7 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001cad3:	83 c4 10             	add    esp,0x10
c001cad6:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001cadb:	75 10                	jne    c001caed <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001cadd:	83 ec 0c             	sub    esp,0xc
c001cae0:	68 6e bc 02 c0       	push   0xc002bc6e
c001cae5:	e8 03 d7 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001caea:	83 c4 10             	add    esp,0x10
c001caed:	31 d2                	xor    edx,edx
c001caef:	50                   	push   eax
c001caf0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001caf4:	52                   	push   edx
c001caf5:	50                   	push   eax
c001caf6:	53                   	push   ebx
c001caf7:	e8 f0 66 ff ff       	call   c00131ec <File::seek(unsigned long long)>
c001cafc:	5a                   	pop    edx
c001cafd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cb01:	e8 3a 2d ff ff       	call   c000f840 <malloc>
c001cb06:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001cb0a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cb0e:	31 c9                	xor    ecx,ecx
c001cb10:	5e                   	pop    esi
c001cb11:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb13:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001cb17:	55                   	push   ebp
c001cb18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cb1c:	51                   	push   ecx
c001cb1d:	52                   	push   edx
c001cb1e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001cb22:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001cb26:	53                   	push   ebx
c001cb27:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb2a:	83 c4 14             	add    esp,0x14
c001cb2d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cb31:	e8 0a 2d ff ff       	call   c000f840 <malloc>
c001cb36:	89 c6                	mov    esi,eax
c001cb38:	8b 03                	mov    eax,DWORD PTR [ebx]
c001cb3a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cb3d:	56                   	push   esi
c001cb3e:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cb42:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001cb46:	51                   	push   ecx
c001cb47:	52                   	push   edx
c001cb48:	53                   	push   ebx
c001cb49:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cb4c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cb50:	8b 15 20 15 03 c0    	mov    edx,DWORD PTR ds:0xc0031520
c001cb56:	83 c4 1c             	add    esp,0x1c
c001cb59:	c1 e8 04             	shr    eax,0x4
c001cb5c:	89 04 95 a0 13 03 c0 	mov    DWORD PTR [edx*4-0x3ffcec60],eax
c001cb63:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001cb67:	31 d2                	xor    edx,edx
c001cb69:	52                   	push   edx
c001cb6a:	50                   	push   eax
c001cb6b:	53                   	push   ebx
c001cb6c:	e8 7b 66 ff ff       	call   c00131ec <File::seek(unsigned long long)>
c001cb71:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001cb73:	31 d2                	xor    edx,edx
c001cb75:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001cb78:	56                   	push   esi
c001cb79:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cb7d:	52                   	push   edx
c001cb7e:	50                   	push   eax
c001cb7f:	53                   	push   ebx
c001cb80:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cb83:	83 c4 14             	add    esp,0x14
c001cb86:	53                   	push   ebx
c001cb87:	e8 00 66 ff ff       	call   c001318c <File::close()>
c001cb8c:	5d                   	pop    ebp
c001cb8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cb91:	e8 ba 2c ff ff       	call   c000f850 <free>
c001cb96:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cb99:	e8 b2 2c ff ff       	call   c000f850 <free>
c001cb9e:	a1 20 15 03 c0       	mov    eax,ds:0xc0031520
c001cba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001cba7:	8d 50 01             	lea    edx,[eax+0x1]
c001cbaa:	89 0c 85 a0 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffceb60],ecx
c001cbb1:	89 34 85 20 14 03 c0 	mov    DWORD PTR [eax*4-0x3ffcebe0],esi
c001cbb8:	89 15 20 15 03 c0    	mov    DWORD PTR ds:0xc0031520,edx
c001cbbe:	83 c4 10             	add    esp,0x10
c001cbc1:	b0 01                	mov    al,0x1
c001cbc3:	83 c4 5c             	add    esp,0x5c
c001cbc6:	5b                   	pop    ebx
c001cbc7:	5e                   	pop    esi
c001cbc8:	5f                   	pop    edi
c001cbc9:	5d                   	pop    ebp
c001cbca:	c3                   	ret    

c001cbcb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001cbcb:	55                   	push   ebp
c001cbcc:	57                   	push   edi
c001cbcd:	56                   	push   esi
c001cbce:	53                   	push   ebx
c001cbcf:	81 ec 68 03 00 00    	sub    esp,0x368
c001cbd5:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001cbdc:	8b 1d 74 15 03 c0    	mov    ebx,DWORD PTR ds:0xc0031574
c001cbe2:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001cbe6:	68 14 01 00 00       	push   0x114
c001cbeb:	e8 50 2c ff ff       	call   c000f840 <malloc>
c001cbf0:	83 c4 0c             	add    esp,0xc
c001cbf3:	89 c5                	mov    ebp,eax
c001cbf5:	53                   	push   ebx
c001cbf6:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001cbfd:	50                   	push   eax
c001cbfe:	e8 c7 64 ff ff       	call   c00130ca <File::File(char const*, Process*)>
c001cc03:	5e                   	pop    esi
c001cc04:	5f                   	pop    edi
c001cc05:	6a 01                	push   0x1
c001cc07:	55                   	push   ebp
c001cc08:	e8 21 65 ff ff       	call   c001312e <File::open(FileOpenMode)>
c001cc0d:	83 c4 10             	add    esp,0x10
c001cc10:	85 c0                	test   eax,eax
c001cc12:	0f 85 8d 06 00 00    	jne    c001d2a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cc18:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001cc20:	83 ec 0c             	sub    esp,0xc
c001cc23:	6a 34                	push   0x34
c001cc25:	e8 16 2c ff ff       	call   c000f840 <malloc>
c001cc2a:	5b                   	pop    ebx
c001cc2b:	89 c7                	mov    edi,eax
c001cc2d:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cc31:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001cc34:	53                   	push   ebx
c001cc35:	57                   	push   edi
c001cc36:	6a 00                	push   0x0
c001cc38:	6a 34                	push   0x34
c001cc3a:	55                   	push   ebp
c001cc3b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001cc3e:	83 c4 20             	add    esp,0x20
c001cc41:	85 c0                	test   eax,eax
c001cc43:	0f 85 5c 06 00 00    	jne    c001d2a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cc49:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001cc4f:	0f 85 50 06 00 00    	jne    c001d2a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cc55:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001cc58:	85 c0                	test   eax,eax
c001cc5a:	0f 84 45 06 00 00    	je     c001d2a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cc60:	31 d2                	xor    edx,edx
c001cc62:	51                   	push   ecx
c001cc63:	52                   	push   edx
c001cc64:	50                   	push   eax
c001cc65:	55                   	push   ebp
c001cc66:	e8 81 65 ff ff       	call   c00131ec <File::seek(unsigned long long)>
c001cc6b:	83 c4 10             	add    esp,0x10
c001cc6e:	85 c0                	test   eax,eax
c001cc70:	0f 85 2f 06 00 00    	jne    c001d2a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cc76:	83 ec 0c             	sub    esp,0xc
c001cc79:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001cc7c:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cc80:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001cc84:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cc88:	0f af c2             	imul   eax,edx
c001cc8b:	50                   	push   eax
c001cc8c:	e8 af 2b ff ff       	call   c000f840 <malloc>
c001cc91:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cc94:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cc98:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cc9b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cc9f:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001cca3:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001cca7:	0f af c2             	imul   eax,edx
c001ccaa:	99                   	cdq    
c001ccab:	52                   	push   edx
c001ccac:	50                   	push   eax
c001ccad:	55                   	push   ebp
c001ccae:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ccb1:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001ccb4:	83 c4 20             	add    esp,0x20
c001ccb7:	85 c0                	test   eax,eax
c001ccb9:	0f 84 e6 05 00 00    	je     c001d2a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ccbf:	52                   	push   edx
c001ccc0:	31 d2                	xor    edx,edx
c001ccc2:	52                   	push   edx
c001ccc3:	50                   	push   eax
c001ccc4:	55                   	push   ebp
c001ccc5:	e8 22 65 ff ff       	call   c00131ec <File::seek(unsigned long long)>
c001ccca:	83 c4 10             	add    esp,0x10
c001cccd:	85 c0                	test   eax,eax
c001cccf:	0f 85 d0 05 00 00    	jne    c001d2a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001ccd5:	83 ec 0c             	sub    esp,0xc
c001ccd8:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001ccdc:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cce0:	31 f6                	xor    esi,esi
c001cce2:	0f af c2             	imul   eax,edx
c001cce5:	50                   	push   eax
c001cce6:	e8 55 2b ff ff       	call   c000f840 <malloc>
c001cceb:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001ccee:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ccf2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ccf5:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ccf9:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001ccfd:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001cd01:	0f af c2             	imul   eax,edx
c001cd04:	99                   	cdq    
c001cd05:	52                   	push   edx
c001cd06:	50                   	push   eax
c001cd07:	55                   	push   ebp
c001cd08:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd0b:	83 c4 20             	add    esp,0x20
c001cd0e:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001cd12:	0f 86 8a 00 00 00    	jbe    c001cda2 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001cd18:	0f b7 de             	movzx  ebx,si
c001cd1b:	c1 e3 05             	shl    ebx,0x5
c001cd1e:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001cd22:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001cd25:	75 75                	jne    c001cd9c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001cd27:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001cd2a:	31 d2                	xor    edx,edx
c001cd2c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001cd30:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001cd33:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cd37:	50                   	push   eax
c001cd38:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001cd3b:	52                   	push   edx
c001cd3c:	50                   	push   eax
c001cd3d:	55                   	push   ebp
c001cd3e:	e8 a9 64 ff ff       	call   c00131ec <File::seek(unsigned long long)>
c001cd43:	83 c4 10             	add    esp,0x10
c001cd46:	85 c0                	test   eax,eax
c001cd48:	0f 85 57 05 00 00    	jne    c001d2a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001cd4e:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001cd55:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cd58:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001cd5c:	31 d2                	xor    edx,edx
c001cd5e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001cd62:	83 ec 0c             	sub    esp,0xc
c001cd65:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cd69:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cd70:	50                   	push   eax
c001cd71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001cd75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cd79:	52                   	push   edx
c001cd7a:	50                   	push   eax
c001cd7b:	55                   	push   ebp
c001cd7c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cd7f:	83 c4 1c             	add    esp,0x1c
c001cd82:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001cd85:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001cd88:	50                   	push   eax
c001cd89:	6a 00                	push   0x0
c001cd8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cd8f:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001cd93:	50                   	push   eax
c001cd94:	e8 df 39 fe ff       	call   c0000778 <memset>
c001cd99:	83 c4 10             	add    esp,0x10
c001cd9c:	46                   	inc    esi
c001cd9d:	e9 6c ff ff ff       	jmp    c001cd0e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001cda2:	53                   	push   ebx
c001cda3:	31 db                	xor    ebx,ebx
c001cda5:	68 00 01 00 00       	push   0x100
c001cdaa:	6a 00                	push   0x0
c001cdac:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001cdb0:	50                   	push   eax
c001cdb1:	e8 c2 39 fe ff       	call   c0000778 <memset>
c001cdb6:	83 c4 0c             	add    esp,0xc
c001cdb9:	68 00 01 00 00       	push   0x100
c001cdbe:	6a 00                	push   0x0
c001cdc0:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001cdc7:	50                   	push   eax
c001cdc8:	e8 ab 39 fe ff       	call   c0000778 <memset>
c001cdcd:	83 c4 10             	add    esp,0x10
c001cdd0:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001cdd8:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001cde0:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001cde8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cdf0:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001cdf8:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001cdfc:	0f 86 30 01 00 00    	jbe    c001cf32 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001ce02:	0f b7 f3             	movzx  esi,bx
c001ce05:	6b f6 28             	imul   esi,esi,0x28
c001ce08:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001ce0c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001ce0f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001ce13:	52                   	push   edx
c001ce14:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ce18:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001ce1c:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce1e:	6b d2 28             	imul   edx,edx,0x28
c001ce21:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001ce25:	31 d2                	xor    edx,edx
c001ce27:	52                   	push   edx
c001ce28:	50                   	push   eax
c001ce29:	55                   	push   ebp
c001ce2a:	e8 bd 63 ff ff       	call   c00131ec <File::seek(unsigned long long)>
c001ce2f:	83 c4 0c             	add    esp,0xc
c001ce32:	6a 20                	push   0x20
c001ce34:	6a 00                	push   0x0
c001ce36:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ce3d:	51                   	push   ecx
c001ce3e:	e8 35 39 fe ff       	call   c0000778 <memset>
c001ce43:	59                   	pop    ecx
c001ce44:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001ce47:	8d 54 24 58          	lea    edx,[esp+0x58]
c001ce4b:	52                   	push   edx
c001ce4c:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001ce53:	51                   	push   ecx
c001ce54:	6a 00                	push   0x0
c001ce56:	6a 1f                	push   0x1f
c001ce58:	55                   	push   ebp
c001ce59:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce5c:	83 c4 1c             	add    esp,0x1c
c001ce5f:	6a 09                	push   0x9
c001ce61:	68 88 bc 02 c0       	push   0xc002bc88
c001ce66:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001ce6d:	51                   	push   ecx
c001ce6e:	e8 cd 37 fe ff       	call   c0000640 <memcmp>
c001ce73:	83 c4 10             	add    esp,0x10
c001ce76:	85 c0                	test   eax,eax
c001ce78:	75 21                	jne    c001ce9b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001ce7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ce7e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ce82:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001ce86:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001ce8a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ce8d:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001ce94:	89 d0                	mov    eax,edx
c001ce96:	40                   	inc    eax
c001ce97:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ce9b:	50                   	push   eax
c001ce9c:	6a 09                	push   0x9
c001ce9e:	68 92 bc 02 c0       	push   0xc002bc92
c001cea3:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001ceaa:	50                   	push   eax
c001ceab:	e8 90 37 fe ff       	call   c0000640 <memcmp>
c001ceb0:	83 c4 10             	add    esp,0x10
c001ceb3:	85 c0                	test   eax,eax
c001ceb5:	75 21                	jne    c001ced8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001ceb7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001cebb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001cebf:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001cec3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001cec7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001ceca:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001ced1:	89 d0                	mov    eax,edx
c001ced3:	40                   	inc    eax
c001ced4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ced8:	50                   	push   eax
c001ced9:	50                   	push   eax
c001ceda:	68 5e bc 02 c0       	push   0xc002bc5e
c001cedf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cee6:	50                   	push   eax
c001cee7:	e8 d4 39 fe ff       	call   c00008c0 <strcmp>
c001ceec:	83 c4 10             	add    esp,0x10
c001ceef:	85 c0                	test   eax,eax
c001cef1:	75 0f                	jne    c001cf02 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001cef3:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cef6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cefa:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cefe:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf02:	50                   	push   eax
c001cf03:	50                   	push   eax
c001cf04:	68 66 bc 02 c0       	push   0xc002bc66
c001cf09:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001cf10:	50                   	push   eax
c001cf11:	e8 aa 39 fe ff       	call   c00008c0 <strcmp>
c001cf16:	83 c4 10             	add    esp,0x10
c001cf19:	85 c0                	test   eax,eax
c001cf1b:	75 0f                	jne    c001cf2c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001cf1d:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001cf20:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001cf24:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001cf28:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001cf2c:	43                   	inc    ebx
c001cf2d:	e9 c6 fe ff ff       	jmp    c001cdf8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001cf32:	31 d2                	xor    edx,edx
c001cf34:	50                   	push   eax
c001cf35:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001cf39:	52                   	push   edx
c001cf3a:	50                   	push   eax
c001cf3b:	55                   	push   ebp
c001cf3c:	e8 ab 62 ff ff       	call   c00131ec <File::seek(unsigned long long)>
c001cf41:	58                   	pop    eax
c001cf42:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001cf46:	e8 f5 28 ff ff       	call   c000f840 <malloc>
c001cf4b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf4e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001cf52:	31 d2                	xor    edx,edx
c001cf54:	58                   	pop    eax
c001cf55:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001cf59:	53                   	push   ebx
c001cf5a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001cf5e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf62:	52                   	push   edx
c001cf63:	50                   	push   eax
c001cf64:	55                   	push   ebp
c001cf65:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf68:	83 c4 14             	add    esp,0x14
c001cf6b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf6f:	e8 cc 28 ff ff       	call   c000f840 <malloc>
c001cf74:	31 d2                	xor    edx,edx
c001cf76:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001cf7a:	83 c4 0c             	add    esp,0xc
c001cf7d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001cf81:	52                   	push   edx
c001cf82:	50                   	push   eax
c001cf83:	55                   	push   ebp
c001cf84:	e8 63 62 ff ff       	call   c00131ec <File::seek(unsigned long long)>
c001cf89:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cf8c:	31 d2                	xor    edx,edx
c001cf8e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cf91:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001cf95:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cf99:	52                   	push   edx
c001cf9a:	50                   	push   eax
c001cf9b:	55                   	push   ebp
c001cf9c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cf9f:	83 c4 20             	add    esp,0x20
c001cfa2:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001cfaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001cfae:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001cfb2:	0f 84 f1 02 00 00    	je     c001d2a9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6de>
c001cfb8:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001cfbf:	31 d2                	xor    edx,edx
c001cfc1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cfc5:	c1 e8 03             	shr    eax,0x3
c001cfc8:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001cfcc:	51                   	push   ecx
c001cfcd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cfd1:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001cfd5:	52                   	push   edx
c001cfd6:	50                   	push   eax
c001cfd7:	55                   	push   ebp
c001cfd8:	e8 0f 62 ff ff       	call   c00131ec <File::seek(unsigned long long)>
c001cfdd:	5b                   	pop    ebx
c001cfde:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001cfe2:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001cfe9:	e8 52 28 ff ff       	call   c000f840 <malloc>
c001cfee:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001cff1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001cff5:	31 d2                	xor    edx,edx
c001cff7:	5e                   	pop    esi
c001cff8:	8d 44 24 58          	lea    eax,[esp+0x58]
c001cffc:	50                   	push   eax
c001cffd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d001:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d005:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d00c:	52                   	push   edx
c001d00d:	50                   	push   eax
c001d00e:	55                   	push   ebp
c001d00f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d012:	83 c4 20             	add    esp,0x20
c001d015:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d01d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d021:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d025:	0f 8d 62 02 00 00    	jge    c001d28d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6c2>
c001d02b:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d02f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d033:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d038:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d03b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d03f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d043:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d047:	89 d8                	mov    eax,ebx
c001d049:	c1 e8 08             	shr    eax,0x8
c001d04c:	89 c6                	mov    esi,eax
c001d04e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d052:	c1 e6 04             	shl    esi,0x4
c001d055:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d059:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d05c:	85 d2                	test   edx,edx
c001d05e:	0f 85 bf 00 00 00    	jne    c001d123 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d064:	83 ec 0c             	sub    esp,0xc
c001d067:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d06b:	03 06                	add    eax,DWORD PTR [esi]
c001d06d:	50                   	push   eax
c001d06e:	e8 4b f8 ff ff       	call   c001c8be <Thr::getAddressOfKernelSymbol(char const*)>
c001d073:	83 c4 10             	add    esp,0x10
c001d076:	89 c2                	mov    edx,eax
c001d078:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d07d:	85 c0                	test   eax,eax
c001d07f:	0f 85 9e 00 00 00    	jne    c001d123 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d085:	83 ec 0c             	sub    esp,0xc
c001d088:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d08c:	03 06                	add    eax,DWORD PTR [esi]
c001d08e:	50                   	push   eax
c001d08f:	e8 61 14 ff ff       	call   c000e4f5 <Krnl::resolveCompatibilitySymbol(char*)>
c001d094:	83 c4 10             	add    esp,0x10
c001d097:	89 c2                	mov    edx,eax
c001d099:	85 c0                	test   eax,eax
c001d09b:	0f 85 82 00 00 00    	jne    c001d123 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d0a1:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d0a5:	50                   	push   eax
c001d0a6:	50                   	push   eax
c001d0a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0ab:	03 06                	add    eax,DWORD PTR [esi]
c001d0ad:	50                   	push   eax
c001d0ae:	68 9c bc 02 c0       	push   0xc002bc9c
c001d0b3:	e8 b9 5a ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001d0b8:	58                   	pop    eax
c001d0b9:	5a                   	pop    edx
c001d0ba:	68 b6 bc 02 c0       	push   0xc002bcb6
c001d0bf:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0c6:	50                   	push   eax
c001d0c7:	e8 68 37 fe ff       	call   c0000834 <strcpy>
c001d0cc:	59                   	pop    ecx
c001d0cd:	58                   	pop    eax
c001d0ce:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d0d2:	03 06                	add    eax,DWORD PTR [esi]
c001d0d4:	50                   	push   eax
c001d0d5:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0dc:	50                   	push   eax
c001d0dd:	e8 92 38 fe ff       	call   c0000974 <strcat>
c001d0e2:	58                   	pop    eax
c001d0e3:	5a                   	pop    edx
c001d0e4:	68 4c bd 02 c0       	push   0xc002bd4c
c001d0e9:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d0f0:	50                   	push   eax
c001d0f1:	e8 7e 38 fe ff       	call   c0000974 <strcat>
c001d0f6:	83 c4 10             	add    esp,0x10
c001d0f9:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d0fe:	0f 84 43 01 00 00    	je     c001d247 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d104:	83 ec 0c             	sub    esp,0xc
c001d107:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d10e:	50                   	push   eax
c001d10f:	e8 d9 d0 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001d114:	83 c4 10             	add    esp,0x10
c001d117:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d11b:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d11f:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d123:	80 fb 01             	cmp    bl,0x1
c001d126:	75 7d                	jne    c001d1a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5da>
c001d128:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d12f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d133:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d137:	01 ce                	add    esi,ecx
c001d139:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d13f:	0f 94 c0             	sete   al
c001d142:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d148:	0f 94 c3             	sete   bl
c001d14b:	09 c3                	or     ebx,eax
c001d14d:	8b 06                	mov    eax,DWORD PTR [esi]
c001d14f:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d154:	74 36                	je     c001d18c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5c1>
c001d156:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d159:	84 db                	test   bl,bl
c001d15b:	75 0a                	jne    c001d167 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x59c>
c001d15d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d161:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d165:	76 37                	jbe    c001d19e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d167:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d16b:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d170:	0f 84 d1 00 00 00    	je     c001d247 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d176:	83 ec 0c             	sub    esp,0xc
c001d179:	68 cd bc 02 c0       	push   0xc002bccd
c001d17e:	e8 6a d0 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001d183:	83 c4 10             	add    esp,0x10
c001d186:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d18a:	eb 12                	jmp    c001d19e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d18c:	01 c1                	add    ecx,eax
c001d18e:	84 db                	test   bl,bl
c001d190:	75 0c                	jne    c001d19e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d192:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d196:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d19a:	77 02                	ja     c001d19e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d3>
c001d19c:	01 d1                	add    ecx,edx
c001d19e:	89 0e                	mov    DWORD PTR [esi],ecx
c001d1a0:	e9 df 00 00 00       	jmp    c001d284 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d1a5:	80 fb 02             	cmp    bl,0x2
c001d1a8:	75 71                	jne    c001d21b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x650>
c001d1aa:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d1b1:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d1b5:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d1b9:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d1bf:	74 15                	je     c001d1d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d1c1:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d1c7:	74 0d                	je     c001d1d6 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x60b>
c001d1c9:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d1cd:	83 e8 04             	sub    eax,0x4
c001d1d0:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d1d4:	76 1f                	jbe    c001d1f5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62a>
c001d1d6:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d1da:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d1df:	74 66                	je     c001d247 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d1e1:	83 ec 0c             	sub    esp,0xc
c001d1e4:	68 e9 bc 02 c0       	push   0xc002bce9
c001d1e9:	e8 ff cf ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001d1ee:	83 c4 10             	add    esp,0x10
c001d1f1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d1f5:	8b 06                	mov    eax,DWORD PTR [esi]
c001d1f7:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d1fc:	74 13                	je     c001d211 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x646>
c001d1fe:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d202:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d209:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d20d:	01 c8                	add    eax,ecx
c001d20f:	eb 04                	jmp    c001d215 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c001d211:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d215:	01 c2                	add    edx,eax
c001d217:	89 16                	mov    DWORD PTR [esi],edx
c001d219:	eb 69                	jmp    c001d284 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d21b:	0f b6 db             	movzx  ebx,bl
c001d21e:	50                   	push   eax
c001d21f:	50                   	push   eax
c001d220:	53                   	push   ebx
c001d221:	68 05 bd 02 c0       	push   0xc002bd05
c001d226:	e8 46 59 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001d22b:	83 c4 10             	add    esp,0x10
c001d22e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d233:	74 12                	je     c001d247 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x67c>
c001d235:	83 ec 0c             	sub    esp,0xc
c001d238:	68 10 bd 02 c0       	push   0xc002bd10
c001d23d:	e8 ab cf ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001d242:	83 c4 10             	add    esp,0x10
c001d245:	eb 3d                	jmp    c001d284 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6b9>
c001d247:	83 ec 0c             	sub    esp,0xc
c001d24a:	55                   	push   ebp
c001d24b:	e8 3c 5f ff ff       	call   c001318c <File::close()>
c001d250:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d253:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d256:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d259:	59                   	pop    ecx
c001d25a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d25e:	e8 ed 25 ff ff       	call   c000f850 <free>
c001d263:	5b                   	pop    ebx
c001d264:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d268:	e8 e3 25 ff ff       	call   c000f850 <free>
c001d26d:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d270:	e8 db 25 ff ff       	call   c000f850 <free>
c001d275:	5e                   	pop    esi
c001d276:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d27a:	e8 d1 25 ff ff       	call   c000f850 <free>
c001d27f:	83 c4 10             	add    esp,0x10
c001d282:	eb 21                	jmp    c001d2a5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6da>
c001d284:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d288:	e9 90 fd ff ff       	jmp    c001d01d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d28d:	83 ec 0c             	sub    esp,0xc
c001d290:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d294:	e8 b7 25 ff ff       	call   c000f850 <free>
c001d299:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d29d:	83 c4 10             	add    esp,0x10
c001d2a0:	e9 05 fd ff ff       	jmp    c001cfaa <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d2a5:	31 c0                	xor    eax,eax
c001d2a7:	eb 33                	jmp    c001d2dc <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x711>
c001d2a9:	83 ec 0c             	sub    esp,0xc
c001d2ac:	55                   	push   ebp
c001d2ad:	e8 da 5e ff ff       	call   c001318c <File::close()>
c001d2b2:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d2b5:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d2b8:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d2bb:	58                   	pop    eax
c001d2bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d2c0:	e8 8b 25 ff ff       	call   c000f850 <free>
c001d2c5:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d2c8:	e8 83 25 ff ff       	call   c000f850 <free>
c001d2cd:	5a                   	pop    edx
c001d2ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d2d2:	e8 79 25 ff ff       	call   c000f850 <free>
c001d2d7:	83 c4 10             	add    esp,0x10
c001d2da:	b0 01                	mov    al,0x1
c001d2dc:	81 c4 5c 03 00 00    	add    esp,0x35c
c001d2e2:	5b                   	pop    ebx
c001d2e3:	5e                   	pop    esi
c001d2e4:	5f                   	pop    edi
c001d2e5:	5d                   	pop    ebp
c001d2e6:	c3                   	ret    

c001d2e7 <Thr::getDriverBaseFromAddress(unsigned long)>:
c001d2e7:	56                   	push   esi
c001d2e8:	31 d2                	xor    edx,edx
c001d2ea:	53                   	push   ebx
c001d2eb:	8b 1d 80 0d 03 c0    	mov    ebx,DWORD PTR ds:0xc0030d80
c001d2f1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d2f5:	39 d3                	cmp    ebx,edx
c001d2f7:	7e 1b                	jle    c001d314 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001d2f9:	8b 04 95 a0 0f 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffcf060]
c001d300:	39 c8                	cmp    eax,ecx
c001d302:	77 0d                	ja     c001d311 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001d304:	8b 34 95 a0 0d 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffcf260]
c001d30b:	01 c6                	add    esi,eax
c001d30d:	39 ce                	cmp    esi,ecx
c001d30f:	77 05                	ja     c001d316 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001d311:	42                   	inc    edx
c001d312:	eb e1                	jmp    c001d2f5 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001d314:	31 c0                	xor    eax,eax
c001d316:	5b                   	pop    ebx
c001d317:	5e                   	pop    esi
c001d318:	c3                   	ret    

c001d319 <Thr::getDriverNameFromAddress(unsigned long)>:
c001d319:	53                   	push   ebx
c001d31a:	31 c0                	xor    eax,eax
c001d31c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001d320:	8b 1d 80 0d 03 c0    	mov    ebx,DWORD PTR ds:0xc0030d80
c001d326:	39 c3                	cmp    ebx,eax
c001d328:	7e 22                	jle    c001d34c <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001d32a:	8b 14 85 a0 0f 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf060]
c001d331:	39 ca                	cmp    edx,ecx
c001d333:	77 14                	ja     c001d349 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d335:	03 14 85 a0 0d 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffcf260]
c001d33c:	39 ca                	cmp    edx,ecx
c001d33e:	76 09                	jbe    c001d349 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001d340:	8b 04 85 a0 11 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcee60]
c001d347:	eb 05                	jmp    c001d34e <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001d349:	40                   	inc    eax
c001d34a:	eb da                	jmp    c001d326 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001d34c:	31 c0                	xor    eax,eax
c001d34e:	5b                   	pop    ebx
c001d34f:	c3                   	ret    

c001d350 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001d350:	53                   	push   ebx
c001d351:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001d355:	53                   	push   ebx
c001d356:	e8 8c ff ff ff       	call   c001d2e7 <Thr::getDriverBaseFromAddress(unsigned long)>
c001d35b:	5a                   	pop    edx
c001d35c:	31 d2                	xor    edx,edx
c001d35e:	85 c0                	test   eax,eax
c001d360:	74 04                	je     c001d366 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001d362:	89 da                	mov    edx,ebx
c001d364:	29 c2                	sub    edx,eax
c001d366:	89 d0                	mov    eax,edx
c001d368:	5b                   	pop    ebx
c001d369:	c3                   	ret    

c001d36a <Thr::loadDLL(char const*, bool)>:
c001d36a:	55                   	push   ebp
c001d36b:	57                   	push   edi
c001d36c:	56                   	push   esi
c001d36d:	53                   	push   ebx
c001d36e:	81 ec 34 01 00 00    	sub    esp,0x134
c001d374:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001d37b:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c001d382:	56                   	push   esi
c001d383:	68 28 bd 02 c0       	push   0xc002bd28
c001d388:	e8 e4 57 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001d38d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001d394:	e8 a7 24 ff ff       	call   c000f840 <malloc>
c001d399:	83 c4 0c             	add    esp,0xc
c001d39c:	89 c3                	mov    ebx,eax
c001d39e:	ff 35 74 15 03 c0    	push   DWORD PTR ds:0xc0031574
c001d3a4:	56                   	push   esi
c001d3a5:	50                   	push   eax
c001d3a6:	e8 1f 5d ff ff       	call   c00130ca <File::File(char const*, Process*)>
c001d3ab:	83 c4 10             	add    esp,0x10
c001d3ae:	85 db                	test   ebx,ebx
c001d3b0:	75 3c                	jne    c001d3ee <Thr::loadDLL(char const*, bool)+0x84>
c001d3b2:	89 e8                	mov    eax,ebp
c001d3b4:	84 c0                	test   al,al
c001d3b6:	0f 84 d5 01 00 00    	je     c001d591 <Thr::loadDLL(char const*, bool)+0x227>
c001d3bc:	57                   	push   edi
c001d3bd:	57                   	push   edi
c001d3be:	68 39 bd 02 c0       	push   0xc002bd39
c001d3c3:	8d 7c 24 2c          	lea    edi,[esp+0x2c]
c001d3c7:	57                   	push   edi
c001d3c8:	e8 67 34 fe ff       	call   c0000834 <strcpy>
c001d3cd:	58                   	pop    eax
c001d3ce:	5a                   	pop    edx
c001d3cf:	56                   	push   esi
c001d3d0:	57                   	push   edi
c001d3d1:	e8 9e 35 fe ff       	call   c0000974 <strcat>
c001d3d6:	59                   	pop    ecx
c001d3d7:	58                   	pop    eax
c001d3d8:	68 4c bd 02 c0       	push   0xc002bd4c
c001d3dd:	57                   	push   edi
c001d3de:	e8 91 35 fe ff       	call   c0000974 <strcat>
c001d3e3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d3e6:	e8 02 ce ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001d3eb:	83 c4 10             	add    esp,0x10
c001d3ee:	51                   	push   ecx
c001d3ef:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001d3f3:	50                   	push   eax
c001d3f4:	8d 44 24 20          	lea    eax,[esp+0x20]
c001d3f8:	50                   	push   eax
c001d3f9:	53                   	push   ebx
c001d3fa:	e8 db 5f ff ff       	call   c00133da <File::stat(unsigned long long*, bool*)>
c001d3ff:	83 c4 10             	add    esp,0x10
c001d402:	85 db                	test   ebx,ebx
c001d404:	74 0c                	je     c001d412 <Thr::loadDLL(char const*, bool)+0xa8>
c001d406:	83 ec 0c             	sub    esp,0xc
c001d409:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d40b:	53                   	push   ebx
c001d40c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d40f:	83 c4 10             	add    esp,0x10
c001d412:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001d417:	75 0a                	jne    c001d423 <Thr::loadDLL(char const*, bool)+0xb9>
c001d419:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d41d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001d421:	75 3c                	jne    c001d45f <Thr::loadDLL(char const*, bool)+0xf5>
c001d423:	89 e8                	mov    eax,ebp
c001d425:	84 c0                	test   al,al
c001d427:	0f 84 4c 01 00 00    	je     c001d579 <Thr::loadDLL(char const*, bool)+0x20f>
c001d42d:	51                   	push   ecx
c001d42e:	51                   	push   ecx
c001d42f:	68 39 bd 02 c0       	push   0xc002bd39
c001d434:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001d438:	53                   	push   ebx
c001d439:	e8 f6 33 fe ff       	call   c0000834 <strcpy>
c001d43e:	5f                   	pop    edi
c001d43f:	58                   	pop    eax
c001d440:	56                   	push   esi
c001d441:	53                   	push   ebx
c001d442:	e8 2d 35 fe ff       	call   c0000974 <strcat>
c001d447:	58                   	pop    eax
c001d448:	5a                   	pop    edx
c001d449:	68 4c bd 02 c0       	push   0xc002bd4c
c001d44e:	53                   	push   ebx
c001d44f:	e8 20 35 fe ff       	call   c0000974 <strcat>
c001d454:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d457:	e8 91 cd ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001d45c:	83 c4 10             	add    esp,0x10
c001d45f:	e8 ad 48 ff ff       	call   c0011d11 <Virt::getAKernelVAS()>
c001d464:	51                   	push   ecx
c001d465:	6a 03                	push   0x3
c001d467:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001d46b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001d46f:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c001d475:	83 d3 00             	adc    ebx,0x0
c001d478:	89 ca                	mov    edx,ecx
c001d47a:	89 d1                	mov    ecx,edx
c001d47c:	0f ac d9 0c          	shrd   ecx,ebx,0xc
c001d480:	51                   	push   ecx
c001d481:	50                   	push   eax
c001d482:	e8 c5 4e ff ff       	call   c001234c <VAS::allocatePages(int, int)>
c001d487:	5f                   	pop    edi
c001d488:	89 c3                	mov    ebx,eax
c001d48a:	58                   	pop    eax
c001d48b:	53                   	push   ebx
c001d48c:	68 4e bd 02 c0       	push   0xc002bd4e
c001d491:	e8 db 56 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001d496:	89 34 24             	mov    DWORD PTR [esp],esi
c001d499:	e8 f6 32 fe ff       	call   c0000794 <strlen>
c001d49e:	8b 3d 80 0d 03 c0    	mov    edi,DWORD PTR ds:0xc0030d80
c001d4a4:	40                   	inc    eax
c001d4a5:	89 04 24             	mov    DWORD PTR [esp],eax
c001d4a8:	e8 93 23 ff ff       	call   c000f840 <malloc>
c001d4ad:	89 04 bd a0 11 03 c0 	mov    DWORD PTR [edi*4-0x3ffcee60],eax
c001d4b4:	58                   	pop    eax
c001d4b5:	a1 80 0d 03 c0       	mov    eax,ds:0xc0030d80
c001d4ba:	5a                   	pop    edx
c001d4bb:	56                   	push   esi
c001d4bc:	ff 34 85 a0 11 03 c0 	push   DWORD PTR [eax*4-0x3ffcee60]
c001d4c3:	e8 6c 33 fe ff       	call   c0000834 <strcpy>
c001d4c8:	a1 80 0d 03 c0       	mov    eax,ds:0xc0030d80
c001d4cd:	8d 50 01             	lea    edx,[eax+0x1]
c001d4d0:	89 1c 85 a0 0f 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf060],ebx
c001d4d7:	89 15 80 0d 03 c0    	mov    DWORD PTR ds:0xc0030d80,edx
c001d4dd:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d4e1:	83 c4 0c             	add    esp,0xc
c001d4e4:	89 14 85 a0 0d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcf260],edx
c001d4eb:	6a 01                	push   0x1
c001d4ed:	53                   	push   ebx
c001d4ee:	56                   	push   esi
c001d4ef:	e8 d7 f6 ff ff       	call   c001cbcb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001d4f4:	83 c4 10             	add    esp,0x10
c001d4f7:	89 c7                	mov    edi,eax
c001d4f9:	84 c0                	test   al,al
c001d4fb:	0f 85 8c 00 00 00    	jne    c001d58d <Thr::loadDLL(char const*, bool)+0x223>
c001d501:	89 e8                	mov    eax,ebp
c001d503:	84 c0                	test   al,al
c001d505:	74 76                	je     c001d57d <Thr::loadDLL(char const*, bool)+0x213>
c001d507:	83 ec 0c             	sub    esp,0xc
c001d50a:	68 5b bd 02 c0       	push   0xc002bd5b
c001d50f:	e8 d9 cc ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001d514:	83 c4 10             	add    esp,0x10
c001d517:	eb 64                	jmp    c001d57d <Thr::loadDLL(char const*, bool)+0x213>
c001d519:	e8 f3 47 ff ff       	call   c0011d11 <Virt::getAKernelVAS()>
c001d51e:	89 f5                	mov    ebp,esi
c001d520:	c1 e5 0c             	shl    ebp,0xc
c001d523:	52                   	push   edx
c001d524:	01 dd                	add    ebp,ebx
c001d526:	52                   	push   edx
c001d527:	55                   	push   ebp
c001d528:	50                   	push   eax
c001d529:	e8 98 49 ff ff       	call   c0011ec6 <VAS::getPageTableEntry(unsigned long)>
c001d52e:	83 c4 10             	add    esp,0x10
c001d531:	f6 00 60             	test   BYTE PTR [eax],0x60
c001d534:	75 0c                	jne    c001d542 <Thr::loadDLL(char const*, bool)+0x1d8>
c001d536:	83 ec 0c             	sub    esp,0xc
c001d539:	55                   	push   ebp
c001d53a:	e8 6c 29 ff ff       	call   c000feab <Phys::freePage(unsigned long)>
c001d53f:	83 c4 10             	add    esp,0x10
c001d542:	46                   	inc    esi
c001d543:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d547:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d54b:	05 ff 0f 00 00       	add    eax,0xfff
c001d550:	83 d2 00             	adc    edx,0x0
c001d553:	0f ac d0 0c          	shrd   eax,edx,0xc
c001d557:	c1 ea 0c             	shr    edx,0xc
c001d55a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d55e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001d562:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c001d566:	ba 00 00 00 00       	mov    edx,0x0
c001d56b:	89 d0                	mov    eax,edx
c001d56d:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c001d571:	72 a6                	jb     c001d519 <Thr::loadDLL(char const*, bool)+0x1af>
c001d573:	89 f8                	mov    eax,edi
c001d575:	84 c0                	test   al,al
c001d577:	75 18                	jne    c001d591 <Thr::loadDLL(char const*, bool)+0x227>
c001d579:	31 db                	xor    ebx,ebx
c001d57b:	eb 14                	jmp    c001d591 <Thr::loadDLL(char const*, bool)+0x227>
c001d57d:	83 ec 0c             	sub    esp,0xc
c001d580:	68 7a bd 02 c0       	push   0xc002bd7a
c001d585:	e8 63 cc ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001d58a:	83 c4 10             	add    esp,0x10
c001d58d:	31 f6                	xor    esi,esi
c001d58f:	eb b2                	jmp    c001d543 <Thr::loadDLL(char const*, bool)+0x1d9>
c001d591:	81 c4 2c 01 00 00    	add    esp,0x12c
c001d597:	89 d8                	mov    eax,ebx
c001d599:	5b                   	pop    ebx
c001d59a:	5e                   	pop    esi
c001d59b:	5f                   	pop    edi
c001d59c:	5d                   	pop    ebp
c001d59d:	c3                   	ret    

c001d59e <Thr::executeDLL(unsigned long, void*)>:
c001d59e:	56                   	push   esi
c001d59f:	53                   	push   ebx
c001d5a0:	52                   	push   edx
c001d5a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d5a5:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001d5a9:	85 db                	test   ebx,ebx
c001d5ab:	75 10                	jne    c001d5bd <Thr::executeDLL(unsigned long, void*)+0x1f>
c001d5ad:	83 ec 0c             	sub    esp,0xc
c001d5b0:	68 96 bd 02 c0       	push   0xc002bd96
c001d5b5:	e8 33 cc ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001d5ba:	83 c4 10             	add    esp,0x10
c001d5bd:	50                   	push   eax
c001d5be:	50                   	push   eax
c001d5bf:	53                   	push   ebx
c001d5c0:	68 c0 bd 02 c0       	push   0xc002bdc0
c001d5c5:	e8 a7 55 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001d5ca:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001d5ce:	89 d8                	mov    eax,ebx
c001d5d0:	83 c4 14             	add    esp,0x14
c001d5d3:	5b                   	pop    ebx
c001d5d4:	5e                   	pop    esi
c001d5d5:	ff e0                	jmp    eax
c001d5d7:	90                   	nop

c001d5d8 <changeTSS>:
c001d5d8:	83 ec 14             	sub    esp,0x14
c001d5db:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001d5e0:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001d5e3:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001d5e8:	c1 e2 15             	shl    edx,0x15
c001d5eb:	29 d0                	sub    eax,edx
c001d5ed:	50                   	push   eax
c001d5ee:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c001d5f3:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d5f9:	05 7c 11 00 00       	add    eax,0x117c
c001d5fe:	50                   	push   eax
c001d5ff:	e8 bc 3e ff ff       	call   c00114c0 <TSS::setESP(unsigned long)>
c001d604:	83 c4 1c             	add    esp,0x1c
c001d607:	c3                   	ret    

c001d608 <Process::addArgs(char**)>:
c001d608:	57                   	push   edi
c001d609:	56                   	push   esi
c001d60a:	53                   	push   ebx
c001d60b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d60f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001d613:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001d61d:	85 ff                	test   edi,edi
c001d61f:	74 3d                	je     c001d65e <Process::addArgs(char**)+0x56>
c001d621:	8b 07                	mov    eax,DWORD PTR [edi]
c001d623:	85 c0                	test   eax,eax
c001d625:	74 37                	je     c001d65e <Process::addArgs(char**)+0x56>
c001d627:	31 db                	xor    ebx,ebx
c001d629:	83 ec 0c             	sub    esp,0xc
c001d62c:	50                   	push   eax
c001d62d:	e8 62 31 fe ff       	call   c0000794 <strlen>
c001d632:	40                   	inc    eax
c001d633:	89 04 24             	mov    DWORD PTR [esp],eax
c001d636:	e8 05 22 ff ff       	call   c000f840 <malloc>
c001d63b:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001d642:	5a                   	pop    edx
c001d643:	59                   	pop    ecx
c001d644:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001d647:	43                   	inc    ebx
c001d648:	50                   	push   eax
c001d649:	e8 e6 31 fe ff       	call   c0000834 <strcpy>
c001d64e:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001d654:	83 c4 10             	add    esp,0x10
c001d657:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001d65a:	85 c0                	test   eax,eax
c001d65c:	75 cb                	jne    c001d629 <Process::addArgs(char**)+0x21>
c001d65e:	5b                   	pop    ebx
c001d65f:	5e                   	pop    esi
c001d660:	5f                   	pop    edi
c001d661:	c3                   	ret    

c001d662 <Process::Process(char const*, Process*, char**)>:
c001d662:	56                   	push   esi
c001d663:	53                   	push   ebx
c001d664:	83 ec 14             	sub    esp,0x14
c001d667:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d66b:	05 0c 02 00 00       	add    eax,0x20c
c001d670:	bb 07 00 00 00       	mov    ebx,0x7
c001d675:	89 c6                	mov    esi,eax
c001d677:	85 db                	test   ebx,ebx
c001d679:	78 12                	js     c001d68d <Process::Process(char const*, Process*, char**)+0x2b>
c001d67b:	83 ec 0c             	sub    esp,0xc
c001d67e:	56                   	push   esi
c001d67f:	e8 1e b2 00 00       	call   c00288a2 <ThreadControlBlock::ThreadControlBlock()>
c001d684:	83 c4 10             	add    esp,0x10
c001d687:	83 c6 63             	add    esi,0x63
c001d68a:	4b                   	dec    ebx
c001d68b:	eb ea                	jmp    c001d677 <Process::Process(char const*, Process*, char**)+0x15>
c001d68d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d691:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d698:	83 ec 0c             	sub    esp,0xc
c001d69b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d69f:	e8 9a c9 ff ff       	call   c001a03e <Krnl::newProcessEnv(Process*)>
c001d6a4:	83 c4 10             	add    esp,0x10
c001d6a7:	89 c2                	mov    edx,eax
c001d6a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6ad:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d6b3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6b7:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d6c0:	a1 90 d5 02 c0       	mov    eax,ds:0xc002d590
c001d6c5:	8d 50 01             	lea    edx,[eax+0x1]
c001d6c8:	89 15 90 d5 02 c0    	mov    DWORD PTR ds:0xc002d590,edx
c001d6ce:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001d6d2:	89 02                	mov    DWORD PTR [edx],eax
c001d6d4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c001d6dc:	83 ec 0c             	sub    esp,0xc
c001d6df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d6e3:	e8 58 21 ff ff       	call   c000f840 <malloc>
c001d6e8:	83 c4 10             	add    esp,0x10
c001d6eb:	89 c3                	mov    ebx,eax
c001d6ed:	83 ec 08             	sub    esp,0x8
c001d6f0:	6a 00                	push   0x0
c001d6f2:	53                   	push   ebx
c001d6f3:	e8 fc 4f ff ff       	call   c00126f4 <VAS::VAS(bool)>
c001d6f8:	83 c4 10             	add    esp,0x10
c001d6fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d6ff:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d705:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d709:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d713:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d717:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d71b:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d721:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d725:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d72b:	85 c0                	test   eax,eax
c001d72d:	74 42                	je     c001d771 <Process::Process(char const*, Process*, char**)+0x10f>
c001d72f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d733:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d739:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d73f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d743:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d749:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d74d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d753:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d759:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d75d:	05 0c 01 00 00       	add    eax,0x10c
c001d762:	83 ec 08             	sub    esp,0x8
c001d765:	52                   	push   edx
c001d766:	50                   	push   eax
c001d767:	e8 c8 30 fe ff       	call   c0000834 <strcpy>
c001d76c:	83 c4 10             	add    esp,0x10
c001d76f:	eb 63                	jmp    c001d7d4 <Process::Process(char const*, Process*, char**)+0x172>
c001d771:	c7 44 24 04 60 12 00 00 	mov    DWORD PTR [esp+0x4],0x1260
c001d779:	83 ec 0c             	sub    esp,0xc
c001d77c:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d780:	e8 bb 20 ff ff       	call   c000f840 <malloc>
c001d785:	83 c4 10             	add    esp,0x10
c001d788:	89 c3                	mov    ebx,eax
c001d78a:	83 ec 08             	sub    esp,0x8
c001d78d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d791:	53                   	push   ebx
c001d792:	e8 27 3a ff ff       	call   c00111be <VgaText::VgaText(char const*)>
c001d797:	83 c4 10             	add    esp,0x10
c001d79a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d79e:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d7a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7a8:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d7ae:	83 ec 0c             	sub    esp,0xc
c001d7b1:	50                   	push   eax
c001d7b2:	e8 fa 2d ff ff       	call   c00105b1 <addToTerminalCycle(VgaText*)>
c001d7b7:	83 c4 10             	add    esp,0x10
c001d7ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7be:	05 0c 01 00 00       	add    eax,0x10c
c001d7c3:	83 ec 08             	sub    esp,0x8
c001d7c6:	68 df bd 02 c0       	push   0xc002bddf
c001d7cb:	50                   	push   eax
c001d7cc:	e8 63 30 fe ff       	call   c0000834 <strcpy>
c001d7d1:	83 c4 10             	add    esp,0x10
c001d7d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7d8:	83 c0 0c             	add    eax,0xc
c001d7db:	83 ec 08             	sub    esp,0x8
c001d7de:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d7e2:	50                   	push   eax
c001d7e3:	e8 4c 30 fe ff       	call   c0000834 <strcpy>
c001d7e8:	83 c4 10             	add    esp,0x10
c001d7eb:	83 ec 08             	sub    esp,0x8
c001d7ee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001d7f2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d7f6:	e8 0d fe ff ff       	call   c001d608 <Process::addArgs(char**)>
c001d7fb:	83 c4 10             	add    esp,0x10
c001d7fe:	83 ec 08             	sub    esp,0x8
c001d801:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d805:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d809:	e8 87 ee ff ff       	call   c001c695 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001d80e:	83 c4 10             	add    esp,0x10
c001d811:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001d815:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001d819:	83 f0 01             	xor    eax,0x1
c001d81c:	88 c2                	mov    dl,al
c001d81e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d822:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001d828:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001d82d:	83 ec 08             	sub    esp,0x8
c001d830:	50                   	push   eax
c001d831:	68 dc be 02 c0       	push   0xc002bedc
c001d836:	e8 36 53 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001d83b:	83 c4 10             	add    esp,0x10
c001d83e:	90                   	nop
c001d83f:	83 c4 14             	add    esp,0x14
c001d842:	5b                   	pop    ebx
c001d843:	5e                   	pop    esi
c001d844:	c3                   	ret    
c001d845:	90                   	nop

c001d846 <Process::Process(bool, char const*, Process*, char**)>:
c001d846:	56                   	push   esi
c001d847:	53                   	push   ebx
c001d848:	83 ec 24             	sub    esp,0x24
c001d84b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d84f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001d853:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d857:	05 0c 02 00 00       	add    eax,0x20c
c001d85c:	bb 07 00 00 00       	mov    ebx,0x7
c001d861:	89 c6                	mov    esi,eax
c001d863:	85 db                	test   ebx,ebx
c001d865:	78 12                	js     c001d879 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001d867:	83 ec 0c             	sub    esp,0xc
c001d86a:	56                   	push   esi
c001d86b:	e8 32 b0 00 00       	call   c00288a2 <ThreadControlBlock::ThreadControlBlock()>
c001d870:	83 c4 10             	add    esp,0x10
c001d873:	83 c6 63             	add    esi,0x63
c001d876:	4b                   	dec    ebx
c001d877:	eb ea                	jmp    c001d863 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001d879:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d87d:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001d884:	83 ec 0c             	sub    esp,0xc
c001d887:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d88b:	e8 ae c7 ff ff       	call   c001a03e <Krnl::newProcessEnv(Process*)>
c001d890:	83 c4 10             	add    esp,0x10
c001d893:	89 c2                	mov    edx,eax
c001d895:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d899:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001d89f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8a3:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001d8ac:	a1 90 d5 02 c0       	mov    eax,ds:0xc002d590
c001d8b1:	8d 50 01             	lea    edx,[eax+0x1]
c001d8b4:	89 15 90 d5 02 c0    	mov    DWORD PTR ds:0xc002d590,edx
c001d8ba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d8be:	89 02                	mov    DWORD PTR [edx],eax
c001d8c0:	c7 44 24 1c 10 00 00 00 	mov    DWORD PTR [esp+0x1c],0x10
c001d8c8:	83 ec 0c             	sub    esp,0xc
c001d8cb:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d8cf:	e8 6c 1f ff ff       	call   c000f840 <malloc>
c001d8d4:	83 c4 10             	add    esp,0x10
c001d8d7:	89 c3                	mov    ebx,eax
c001d8d9:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001d8de:	83 ec 08             	sub    esp,0x8
c001d8e1:	50                   	push   eax
c001d8e2:	53                   	push   ebx
c001d8e3:	e8 0c 4e ff ff       	call   c00126f4 <VAS::VAS(bool)>
c001d8e8:	83 c4 10             	add    esp,0x10
c001d8eb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8ef:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001d8f5:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d8f9:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001d903:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d907:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d90b:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001d911:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d915:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d91b:	85 c0                	test   eax,eax
c001d91d:	74 42                	je     c001d961 <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001d91f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d923:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d929:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001d92f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d933:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001d939:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d93d:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001d943:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001d949:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d94d:	05 0c 01 00 00       	add    eax,0x10c
c001d952:	83 ec 08             	sub    esp,0x8
c001d955:	52                   	push   edx
c001d956:	50                   	push   eax
c001d957:	e8 d8 2e fe ff       	call   c0000834 <strcpy>
c001d95c:	83 c4 10             	add    esp,0x10
c001d95f:	eb 63                	jmp    c001d9c4 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001d961:	c7 44 24 18 60 12 00 00 	mov    DWORD PTR [esp+0x18],0x1260
c001d969:	83 ec 0c             	sub    esp,0xc
c001d96c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001d970:	e8 cb 1e ff ff       	call   c000f840 <malloc>
c001d975:	83 c4 10             	add    esp,0x10
c001d978:	89 c3                	mov    ebx,eax
c001d97a:	83 ec 08             	sub    esp,0x8
c001d97d:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d981:	53                   	push   ebx
c001d982:	e8 37 38 ff ff       	call   c00111be <VgaText::VgaText(char const*)>
c001d987:	83 c4 10             	add    esp,0x10
c001d98a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d98e:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001d994:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d998:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001d99e:	83 ec 0c             	sub    esp,0xc
c001d9a1:	50                   	push   eax
c001d9a2:	e8 0a 2c ff ff       	call   c00105b1 <addToTerminalCycle(VgaText*)>
c001d9a7:	83 c4 10             	add    esp,0x10
c001d9aa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9ae:	05 0c 01 00 00       	add    eax,0x10c
c001d9b3:	83 ec 08             	sub    esp,0x8
c001d9b6:	68 df bd 02 c0       	push   0xc002bddf
c001d9bb:	50                   	push   eax
c001d9bc:	e8 73 2e fe ff       	call   c0000834 <strcpy>
c001d9c1:	83 c4 10             	add    esp,0x10
c001d9c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001d9c8:	83 c0 0c             	add    eax,0xc
c001d9cb:	83 ec 08             	sub    esp,0x8
c001d9ce:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001d9d2:	50                   	push   eax
c001d9d3:	e8 5c 2e fe ff       	call   c0000834 <strcpy>
c001d9d8:	83 c4 10             	add    esp,0x10
c001d9db:	83 ec 08             	sub    esp,0x8
c001d9de:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001d9e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d9e6:	e8 1d fc ff ff       	call   c001d608 <Process::addArgs(char**)>
c001d9eb:	83 c4 10             	add    esp,0x10
c001d9ee:	90                   	nop
c001d9ef:	83 c4 24             	add    esp,0x24
c001d9f2:	5b                   	pop    ebx
c001d9f3:	5e                   	pop    esi
c001d9f4:	c3                   	ret    

c001d9f5 <disableIRQs()>:
c001d9f5:	fa                   	cli    
c001d9f6:	ff 05 4c 15 03 c0    	inc    DWORD PTR ds:0xc003154c
c001d9fc:	c3                   	ret    

c001d9fd <getIRQNestingLevel()>:
c001d9fd:	a1 4c 15 03 c0       	mov    eax,ds:0xc003154c
c001da02:	c3                   	ret    

c001da03 <enableIRQs()>:
c001da03:	a1 4c 15 03 c0       	mov    eax,ds:0xc003154c
c001da08:	48                   	dec    eax
c001da09:	a3 4c 15 03 c0       	mov    ds:0xc003154c,eax
c001da0e:	75 01                	jne    c001da11 <enableIRQs()+0xe>
c001da10:	fb                   	sti    
c001da11:	c3                   	ret    

c001da12 <lockScheduler()>:
c001da12:	eb e1                	jmp    c001d9f5 <disableIRQs()>

c001da14 <unlockScheduler()>:
c001da14:	eb ed                	jmp    c001da03 <enableIRQs()>

c001da16 <userModeEntryPoint(void*)>:
c001da16:	83 ec 0c             	sub    esp,0xc
c001da19:	e8 f6 ff ff ff       	call   c001da14 <unlockScheduler()>
c001da1e:	fb                   	sti    
c001da1f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da24:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001da27:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001da2d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001da31:	83 c4 0c             	add    esp,0xc
c001da34:	e9 f1 28 fe ff       	jmp    c000032a <goToUsermode>

c001da39 <lockStuff()>:
c001da39:	e8 b7 ff ff ff       	call   c001d9f5 <disableIRQs()>
c001da3e:	ff 05 48 15 03 c0    	inc    DWORD PTR ds:0xc0031548
c001da44:	c3                   	ret    

c001da45 <taskStartupFunction>:
c001da45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da4a:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001da4d:	c3                   	ret    

c001da4e <updateTimeUsed()>:
c001da4e:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c001da53:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001da59:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001da60:	74 50                	je     c001dab2 <updateTimeUsed()+0x64>
c001da62:	57                   	push   edi
c001da63:	56                   	push   esi
c001da64:	53                   	push   ebx
c001da65:	0f 31                	rdtsc  
c001da67:	89 c1                	mov    ecx,eax
c001da69:	a3 88 15 03 c0       	mov    ds:0xc0031588,eax
c001da6e:	2b 0d 78 15 03 c0    	sub    ecx,DWORD PTR ds:0xc0031578
c001da74:	89 d3                	mov    ebx,edx
c001da76:	89 0d 80 15 03 c0    	mov    DWORD PTR ds:0xc0031580,ecx
c001da7c:	1b 1d 7c 15 03 c0    	sbb    ebx,DWORD PTR ds:0xc003157c
c001da82:	a3 78 15 03 c0       	mov    ds:0xc0031578,eax
c001da87:	89 1d 84 15 03 c0    	mov    DWORD PTR ds:0xc0031584,ebx
c001da8d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001da92:	89 15 8c 15 03 c0    	mov    DWORD PTR ds:0xc003158c,edx
c001da98:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c001da9b:	89 15 7c 15 03 c0    	mov    DWORD PTR ds:0xc003157c,edx
c001daa1:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c001daa4:	01 f1                	add    ecx,esi
c001daa6:	89 48 10             	mov    DWORD PTR [eax+0x10],ecx
c001daa9:	11 fb                	adc    ebx,edi
c001daab:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c001daae:	5b                   	pop    ebx
c001daaf:	5e                   	pop    esi
c001dab0:	5f                   	pop    edi
c001dab1:	c3                   	ret    
c001dab2:	c3                   	ret    

c001dab3 <switchToThread(ThreadControlBlock*)>:
c001dab3:	53                   	push   ebx
c001dab4:	83 ec 08             	sub    esp,0x8
c001dab7:	a1 48 15 03 c0       	mov    eax,ds:0xc0031548
c001dabc:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dac0:	85 c0                	test   eax,eax
c001dac2:	75 30                	jne    c001daf4 <switchToThread(ThreadControlBlock*)+0x41>
c001dac4:	8a 43 44             	mov    al,BYTE PTR [ebx+0x44]
c001dac7:	3c ff                	cmp    al,0xff
c001dac9:	74 25                	je     c001daf0 <switchToThread(ThreadControlBlock*)+0x3d>
c001dacb:	0f b6 d0             	movzx  edx,al
c001dace:	b8 84 03 00 00       	mov    eax,0x384
c001dad3:	29 d0                	sub    eax,edx
c001dad5:	c1 e0 10             	shl    eax,0x10
c001dad8:	03 43 38             	add    eax,DWORD PTR [ebx+0x38]
c001dadb:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c001dade:	e8 6b ff ff ff       	call   c001da4e <updateTimeUsed()>
c001dae3:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001dae7:	83 c4 08             	add    esp,0x8
c001daea:	5b                   	pop    ebx
c001daeb:	e9 72 28 fe ff       	jmp    c0000362 <switchToThreadASM>
c001daf0:	31 c0                	xor    eax,eax
c001daf2:	eb e7                	jmp    c001dadb <switchToThread(ThreadControlBlock*)+0x28>
c001daf4:	c7 05 44 15 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031544,0x1
c001dafe:	83 c4 08             	add    esp,0x8
c001db01:	5b                   	pop    ebx
c001db02:	c3                   	ret    
c001db03:	90                   	nop

c001db04 <Semaphore::Semaphore(int)>:
c001db04:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db08:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001db0c:	89 10                	mov    DWORD PTR [eax],edx
c001db0e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db12:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001db19:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db1d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001db24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db28:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001db2f:	90                   	nop
c001db30:	c3                   	ret    
c001db31:	90                   	nop

c001db32 <Mutex::Mutex()>:
c001db32:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001db36:	6a 01                	push   0x1
c001db38:	50                   	push   eax
c001db39:	e8 c6 ff ff ff       	call   c001db04 <Semaphore::Semaphore(int)>
c001db3e:	83 c4 08             	add    esp,0x8
c001db41:	90                   	nop
c001db42:	c3                   	ret    
c001db43:	90                   	nop

c001db44 <Process::createThread(void (*)(void*), void*, int)>:
c001db44:	55                   	push   ebp
c001db45:	31 c9                	xor    ecx,ecx
c001db47:	57                   	push   edi
c001db48:	56                   	push   esi
c001db49:	53                   	push   ebx
c001db4a:	83 ec 1c             	sub    esp,0x1c
c001db4d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001db51:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001db58:	89 f2                	mov    edx,esi
c001db5a:	0f b7 c2             	movzx  eax,dx
c001db5d:	83 e2 01             	and    edx,0x1
c001db60:	74 14                	je     c001db76 <Process::createThread(void (*)(void*), void*, int)+0x32>
c001db62:	d1 f8                	sar    eax,1
c001db64:	41                   	inc    ecx
c001db65:	89 c2                	mov    edx,eax
c001db67:	83 f9 10             	cmp    ecx,0x10
c001db6a:	75 ee                	jne    c001db5a <Process::createThread(void (*)(void*), void*, int)+0x16>
c001db6c:	83 c4 1c             	add    esp,0x1c
c001db6f:	31 c0                	xor    eax,eax
c001db71:	5b                   	pop    ebx
c001db72:	5e                   	pop    esi
c001db73:	5f                   	pop    edi
c001db74:	5d                   	pop    ebp
c001db75:	c3                   	ret    
c001db76:	83 ec 08             	sub    esp,0x8
c001db79:	b8 01 00 00 00       	mov    eax,0x1
c001db7e:	d3 e0                	shl    eax,cl
c001db80:	09 c6                	or     esi,eax
c001db82:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001db88:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001db8f:	8d 34 09             	lea    esi,[ecx+ecx*1]
c001db92:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001db95:	01 ce                	add    esi,ecx
c001db97:	89 f0                	mov    eax,esi
c001db99:	c1 e0 05             	shl    eax,0x5
c001db9c:	01 c6                	add    esi,eax
c001db9e:	8d 04 33             	lea    eax,[ebx+esi*1]
c001dba1:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c001dba7:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001dbad:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c001dbb1:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001dbb7:	89 90 51 02 00 00    	mov    DWORD PTR [eax+0x251],edx
c001dbbd:	89 ca                	mov    edx,ecx
c001dbbf:	f7 da                	neg    edx
c001dbc1:	c1 e2 15             	shl    edx,0x15
c001dbc4:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c001dbca:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001dbd0:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001dbd4:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001dbde:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001dbe4:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001dbe8:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c001dbee:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001dbf8:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001dc02:	8d 84 33 0c 02 00 00 	lea    eax,[ebx+esi*1+0x20c]
c001dc09:	50                   	push   eax
c001dc0a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001dc0e:	68 68 15 03 c0       	push   0xc0031568
c001dc13:	e8 18 ab 00 00       	call   c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001dc18:	83 c4 10             	add    esp,0x10
c001dc1b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001dc1f:	83 c4 1c             	add    esp,0x1c
c001dc22:	5b                   	pop    ebx
c001dc23:	5e                   	pop    esi
c001dc24:	5f                   	pop    edi
c001dc25:	5d                   	pop    ebp
c001dc26:	c3                   	ret    
c001dc27:	90                   	nop

c001dc28 <Process::createUserThread()>:
c001dc28:	83 ec 0c             	sub    esp,0xc
c001dc2b:	68 80 00 00 00       	push   0x80
c001dc30:	6a 00                	push   0x0
c001dc32:	68 16 da 01 c0       	push   0xc001da16
c001dc37:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001dc3b:	e8 04 ff ff ff       	call   c001db44 <Process::createThread(void (*)(void*), void*, int)>
c001dc40:	83 c4 1c             	add    esp,0x1c
c001dc43:	c3                   	ret    

c001dc44 <setupMultitasking(void (*)())>:
c001dc44:	56                   	push   esi
c001dc45:	53                   	push   ebx
c001dc46:	53                   	push   ebx
c001dc47:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001dc4b:	eb 10                	jmp    c001dc5d <setupMultitasking(void (*)())+0x19>
c001dc4d:	83 ec 0c             	sub    esp,0xc
c001dc50:	68 68 15 03 c0       	push   0xc0031568
c001dc55:	e8 28 aa 00 00       	call   c0028682 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dc5a:	83 c4 10             	add    esp,0x10
c001dc5d:	83 ec 0c             	sub    esp,0xc
c001dc60:	68 68 15 03 c0       	push   0xc0031568
c001dc65:	e8 fc a9 00 00       	call   c0028666 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dc6a:	83 c4 10             	add    esp,0x10
c001dc6d:	84 c0                	test   al,al
c001dc6f:	74 dc                	je     c001dc4d <setupMultitasking(void (*)())+0x9>
c001dc71:	83 ec 0c             	sub    esp,0xc
c001dc74:	68 3f 07 00 00       	push   0x73f
c001dc79:	e8 c2 1b ff ff       	call   c000f840 <malloc>
c001dc7e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001dc85:	89 c3                	mov    ebx,eax
c001dc87:	6a 00                	push   0x0
c001dc89:	68 e3 bd 02 c0       	push   0xc002bde3
c001dc8e:	6a 01                	push   0x1
c001dc90:	50                   	push   eax
c001dc91:	e8 b0 fb ff ff       	call   c001d846 <Process::Process(bool, char const*, Process*, char**)>
c001dc96:	83 c4 18             	add    esp,0x18
c001dc99:	89 1d 74 15 03 c0    	mov    DWORD PTR ds:0xc0031574,ebx
c001dc9f:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dca5:	68 04 bf 02 c0       	push   0xc002bf04
c001dcaa:	e8 c2 4e ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001dcaf:	58                   	pop    eax
c001dcb0:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001dcb6:	e8 78 30 ff ff       	call   c0010d33 <setActiveTerminal(VgaText*)>
c001dcbb:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001dcc3:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001dcc9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001dccc:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001dcd6:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001dcdc:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001dce2:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001dcec:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001dcf6:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001dd00:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001dd06:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001dd0c:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001dd16:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001dd1c:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001dd26:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001dd2c:	5a                   	pop    edx
c001dd2d:	59                   	pop    ecx
c001dd2e:	68 df bd 02 c0       	push   0xc002bddf
c001dd33:	50                   	push   eax
c001dd34:	e8 fb 2a fe ff       	call   c0000834 <strcpy>
c001dd39:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001dd40:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dd44:	83 c4 14             	add    esp,0x14
c001dd47:	5b                   	pop    ebx
c001dd48:	5e                   	pop    esi
c001dd49:	e9 06 26 fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001dd4e <schedule()>:
c001dd4e:	a1 48 15 03 c0       	mov    eax,ds:0xc0031548
c001dd53:	85 c0                	test   eax,eax
c001dd55:	74 0b                	je     c001dd62 <schedule()+0x14>
c001dd57:	c7 05 44 15 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0031544,0x1
c001dd61:	c3                   	ret    
c001dd62:	53                   	push   ebx
c001dd63:	83 ec 14             	sub    esp,0x14
c001dd66:	68 68 15 03 c0       	push   0xc0031568
c001dd6b:	e8 f6 a8 00 00       	call   c0028666 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001dd70:	83 c4 10             	add    esp,0x10
c001dd73:	84 c0                	test   al,al
c001dd75:	75 38                	jne    c001ddaf <schedule()+0x61>
c001dd77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd7c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001dd7f:	4a                   	dec    edx
c001dd80:	74 32                	je     c001ddb4 <schedule()+0x66>
c001dd82:	83 ec 0c             	sub    esp,0xc
c001dd85:	68 68 15 03 c0       	push   0xc0031568
c001dd8a:	e8 cf a8 00 00       	call   c002865e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001dd8f:	c7 04 24 68 15 03 c0 	mov    DWORD PTR [esp],0xc0031568
c001dd96:	89 c3                	mov    ebx,eax
c001dd98:	e8 e5 a8 00 00       	call   c0028682 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001dd9d:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001dda4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001dda7:	e8 07 fd ff ff       	call   c001dab3 <switchToThread(ThreadControlBlock*)>
c001ddac:	83 c4 10             	add    esp,0x10
c001ddaf:	83 c4 08             	add    esp,0x8
c001ddb2:	5b                   	pop    ebx
c001ddb3:	c3                   	ret    
c001ddb4:	83 ec 08             	sub    esp,0x8
c001ddb7:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001ddbe:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001ddc4:	68 68 15 03 c0       	push   0xc0031568
c001ddc9:	e8 62 a9 00 00       	call   c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ddce:	83 c4 10             	add    esp,0x10
c001ddd1:	eb af                	jmp    c001dd82 <schedule()+0x34>

c001ddd3 <unlockStuff()>:
c001ddd3:	a1 48 15 03 c0       	mov    eax,ds:0xc0031548
c001ddd8:	48                   	dec    eax
c001ddd9:	a3 48 15 03 c0       	mov    ds:0xc0031548,eax
c001ddde:	75 09                	jne    c001dde9 <unlockStuff()+0x16>
c001dde0:	a1 44 15 03 c0       	mov    eax,ds:0xc0031544
c001dde5:	85 c0                	test   eax,eax
c001dde7:	75 05                	jne    c001ddee <unlockStuff()+0x1b>
c001dde9:	e9 15 fc ff ff       	jmp    c001da03 <enableIRQs()>
c001ddee:	83 ec 0c             	sub    esp,0xc
c001ddf1:	c7 05 44 15 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031544,0x0
c001ddfb:	e8 4e ff ff ff       	call   c001dd4e <schedule()>
c001de00:	83 c4 0c             	add    esp,0xc
c001de03:	e9 fb fb ff ff       	jmp    c001da03 <enableIRQs()>

c001de08 <Semaphore::tryAcquire()>:
c001de08:	83 ec 0c             	sub    esp,0xc
c001de0b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de0f:	e8 25 fc ff ff       	call   c001da39 <lockStuff()>
c001de14:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001de17:	3b 10                	cmp    edx,DWORD PTR [eax]
c001de19:	7c 0b                	jl     c001de26 <Semaphore::tryAcquire()+0x1e>
c001de1b:	e8 b3 ff ff ff       	call   c001ddd3 <unlockStuff()>
c001de20:	31 c0                	xor    eax,eax
c001de22:	83 c4 0c             	add    esp,0xc
c001de25:	c3                   	ret    
c001de26:	42                   	inc    edx
c001de27:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001de2a:	e8 a4 ff ff ff       	call   c001ddd3 <unlockStuff()>
c001de2f:	b0 01                	mov    al,0x1
c001de31:	83 c4 0c             	add    esp,0xc
c001de34:	c3                   	ret    
c001de35:	90                   	nop

c001de36 <Semaphore::assertLocked(char const*)>:
c001de36:	83 ec 0c             	sub    esp,0xc
c001de39:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de3d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001de41:	e8 f3 fb ff ff       	call   c001da39 <lockStuff()>
c001de46:	8b 08                	mov    ecx,DWORD PTR [eax]
c001de48:	39 48 0c             	cmp    DWORD PTR [eax+0xc],ecx
c001de4b:	7c 05                	jl     c001de52 <Semaphore::assertLocked(char const*)+0x1c>
c001de4d:	83 c4 0c             	add    esp,0xc
c001de50:	eb 81                	jmp    c001ddd3 <unlockStuff()>
c001de52:	83 ec 0c             	sub    esp,0xc
c001de55:	52                   	push   edx
c001de56:	e8 92 c3 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001de5b:	83 c4 10             	add    esp,0x10
c001de5e:	83 c4 0c             	add    esp,0xc
c001de61:	e9 6d ff ff ff       	jmp    c001ddd3 <unlockStuff()>

c001de66 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001de66:	83 ec 0c             	sub    esp,0xc
c001de69:	e8 8f fb ff ff       	call   c001d9fd <getIRQNestingLevel()>
c001de6e:	83 ec 08             	sub    esp,0x8
c001de71:	50                   	push   eax
c001de72:	68 38 bf 02 c0       	push   0xc002bf38
c001de77:	e8 f5 4c ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001de7c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001de80:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001de85:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001de88:	e8 c1 fe ff ff       	call   c001dd4e <schedule()>
c001de8d:	e8 82 fb ff ff       	call   c001da14 <unlockScheduler()>
c001de92:	e8 66 fb ff ff       	call   c001d9fd <getIRQNestingLevel()>
c001de97:	5a                   	pop    edx
c001de98:	59                   	pop    ecx
c001de99:	50                   	push   eax
c001de9a:	68 6c bf 02 c0       	push   0xc002bf6c
c001de9f:	e8 cd 4c ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001dea4:	83 c4 1c             	add    esp,0x1c
c001dea7:	c3                   	ret    

c001dea8 <blockTask(TaskState)>:
c001dea8:	83 ec 0c             	sub    esp,0xc
c001deab:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001deaf:	e8 5e fb ff ff       	call   c001da12 <lockScheduler()>
c001deb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001deb9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001debc:	e8 8d fe ff ff       	call   c001dd4e <schedule()>
c001dec1:	83 c4 0c             	add    esp,0xc
c001dec4:	e9 4b fb ff ff       	jmp    c001da14 <unlockScheduler()>

c001dec9 <waitTask(int, int*, int)>:
c001dec9:	83 ec 18             	sub    esp,0x18
c001decc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ded1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001ded5:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001ded8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dedc:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dee1:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001dee4:	6a 07                	push   0x7
c001dee6:	e8 bd ff ff ff       	call   c001dea8 <blockTask(TaskState)>
c001deeb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001def0:	83 c4 10             	add    esp,0x10
c001def3:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001def6:	85 d2                	test   edx,edx
c001def8:	74 0a                	je     c001df04 <waitTask(int, int*, int)+0x3b>
c001defa:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001defd:	89 02                	mov    DWORD PTR [edx],eax
c001deff:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001df04:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001df07:	83 c4 0c             	add    esp,0xc
c001df0a:	c3                   	ret    

c001df0b <nanoSleepUntil(unsigned long long)>:
c001df0b:	83 ec 0c             	sub    esp,0xc
c001df0e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df12:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001df16:	3b 05 90 e6 02 c0    	cmp    eax,DWORD PTR ds:0xc002e690
c001df1c:	89 d1                	mov    ecx,edx
c001df1e:	1b 0d 94 e6 02 c0    	sbb    ecx,DWORD PTR ds:0xc002e694
c001df24:	73 04                	jae    c001df2a <nanoSleepUntil(unsigned long long)+0x1f>
c001df26:	83 c4 0c             	add    esp,0xc
c001df29:	c3                   	ret    
c001df2a:	e8 0a fb ff ff       	call   c001da39 <lockStuff()>
c001df2f:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001df35:	83 ec 08             	sub    esp,0x8
c001df38:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001df3b:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001df3e:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001df44:	68 5c 15 03 c0       	push   0xc003155c
c001df49:	e8 e2 a7 00 00       	call   c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001df4e:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001df55:	e8 4e ff ff ff       	call   c001dea8 <blockTask(TaskState)>
c001df5a:	83 c4 1c             	add    esp,0x1c
c001df5d:	e9 71 fe ff ff       	jmp    c001ddd3 <unlockStuff()>

c001df62 <nanoSleep(unsigned long long)>:
c001df62:	a1 90 e6 02 c0       	mov    eax,ds:0xc002e690
c001df67:	8b 15 94 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e694
c001df6d:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001df71:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001df75:	eb 94                	jmp    c001df0b <nanoSleepUntil(unsigned long long)>

c001df77 <sleep(unsigned long long)>:
c001df77:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001df7f:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001df84:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001df88:	01 ca                	add    edx,ecx
c001df8a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001df8e:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001df92:	eb ce                	jmp    c001df62 <nanoSleep(unsigned long long)>

c001df94 <Semaphore::acquire()>:
c001df94:	83 ec 0c             	sub    esp,0xc
c001df97:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001df9b:	e8 99 fa ff ff       	call   c001da39 <lockStuff()>
c001dfa0:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c001dfa3:	3b 10                	cmp    edx,DWORD PTR [eax]
c001dfa5:	7d 0c                	jge    c001dfb3 <Semaphore::acquire()+0x1f>
c001dfa7:	42                   	inc    edx
c001dfa8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001dfab:	83 c4 0c             	add    esp,0xc
c001dfae:	e9 20 fe ff ff       	jmp    c001ddd3 <unlockStuff()>
c001dfb3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001dfb9:	c7 42 20 00 00 00 00 	mov    DWORD PTR [edx+0x20],0x0
c001dfc0:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001dfc3:	85 d2                	test   edx,edx
c001dfc5:	74 2a                	je     c001dff1 <Semaphore::acquire()+0x5d>
c001dfc7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001dfca:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001dfd0:	89 4a 20             	mov    DWORD PTR [edx+0x20],ecx
c001dfd3:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001dfd9:	83 ec 0c             	sub    esp,0xc
c001dfdc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001dfdf:	6a 05                	push   0x5
c001dfe1:	e8 c2 fe ff ff       	call   c001dea8 <blockTask(TaskState)>
c001dfe6:	83 c4 10             	add    esp,0x10
c001dfe9:	83 c4 0c             	add    esp,0xc
c001dfec:	e9 e2 fd ff ff       	jmp    c001ddd3 <unlockStuff()>
c001dff1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001dff7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001dffa:	eb d7                	jmp    c001dfd3 <Semaphore::acquire()+0x3f>

c001dffc <taskReturned>:
c001dffc:	83 ec 18             	sub    esp,0x18
c001dfff:	68 a0 bf 02 c0       	push   0xc002bfa0
c001e004:	e8 e4 c1 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001e009:	83 c4 10             	add    esp,0x10
c001e00c:	83 ec 0c             	sub    esp,0xc
c001e00f:	6a 02                	push   0x2
c001e011:	e8 92 fe ff ff       	call   c001dea8 <blockTask(TaskState)>
c001e016:	e8 f7 f9 ff ff       	call   c001da12 <lockScheduler()>
c001e01b:	e8 2e fd ff ff       	call   c001dd4e <schedule()>
c001e020:	e8 ef f9 ff ff       	call   c001da14 <unlockScheduler()>
c001e025:	83 c4 10             	add    esp,0x10
c001e028:	eb e2                	jmp    c001e00c <taskReturned+0x10>

c001e02a <unblockTask(ThreadControlBlock*)>:
c001e02a:	53                   	push   ebx
c001e02b:	83 ec 08             	sub    esp,0x8
c001e02e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e032:	e8 db f9 ff ff       	call   c001da12 <lockScheduler()>
c001e037:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e03a:	85 c0                	test   eax,eax
c001e03c:	74 5c                	je     c001e09a <unblockTask(ThreadControlBlock*)+0x70>
c001e03e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e041:	48                   	dec    eax
c001e042:	74 31                	je     c001e075 <unblockTask(ThreadControlBlock*)+0x4b>
c001e044:	83 ec 0c             	sub    esp,0xc
c001e047:	68 68 15 03 c0       	push   0xc0031568
c001e04c:	e8 0d a6 00 00       	call   c002865e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e051:	83 c4 10             	add    esp,0x10
c001e054:	85 c0                	test   eax,eax
c001e056:	75 17                	jne    c001e06f <unblockTask(ThreadControlBlock*)+0x45>
c001e058:	eb 65                	jmp    c001e0bf <unblockTask(ThreadControlBlock*)+0x95>
c001e05a:	83 ec 08             	sub    esp,0x8
c001e05d:	50                   	push   eax
c001e05e:	68 68 15 03 c0       	push   0xc0031568
c001e063:	e8 d0 a8 00 00       	call   c0028938 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e068:	83 c4 10             	add    esp,0x10
c001e06b:	85 c0                	test   eax,eax
c001e06d:	74 50                	je     c001e0bf <unblockTask(ThreadControlBlock*)+0x95>
c001e06f:	39 c3                	cmp    ebx,eax
c001e071:	75 e7                	jne    c001e05a <unblockTask(ThreadControlBlock*)+0x30>
c001e073:	eb 1c                	jmp    c001e091 <unblockTask(ThreadControlBlock*)+0x67>
c001e075:	83 ec 0c             	sub    esp,0xc
c001e078:	68 90 c0 02 c0       	push   0xc002c090
c001e07d:	e8 ef 4a ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001e082:	c7 04 24 1c c0 02 c0 	mov    DWORD PTR [esp],0xc002c01c
c001e089:	e8 e3 4a ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001e08e:	83 c4 10             	add    esp,0x10
c001e091:	83 c4 08             	add    esp,0x8
c001e094:	5b                   	pop    ebx
c001e095:	e9 7a f9 ff ff       	jmp    c001da14 <unlockScheduler()>
c001e09a:	83 ec 0c             	sub    esp,0xc
c001e09d:	68 d4 bf 02 c0       	push   0xc002bfd4
c001e0a2:	e8 ca 4a ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001e0a7:	c7 04 24 1c c0 02 c0 	mov    DWORD PTR [esp],0xc002c01c
c001e0ae:	e8 be 4a ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001e0b3:	83 c4 10             	add    esp,0x10
c001e0b6:	83 c4 08             	add    esp,0x8
c001e0b9:	5b                   	pop    ebx
c001e0ba:	e9 55 f9 ff ff       	jmp    c001da14 <unlockScheduler()>
c001e0bf:	83 ec 08             	sub    esp,0x8
c001e0c2:	53                   	push   ebx
c001e0c3:	68 68 15 03 c0       	push   0xc0031568
c001e0c8:	e8 63 a6 00 00       	call   c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e0cd:	83 c4 10             	add    esp,0x10
c001e0d0:	83 c4 08             	add    esp,0x8
c001e0d3:	5b                   	pop    ebx
c001e0d4:	e9 3b f9 ff ff       	jmp    c001da14 <unlockScheduler()>

c001e0d9 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001e0d9:	55                   	push   ebp
c001e0da:	57                   	push   edi
c001e0db:	56                   	push   esi
c001e0dc:	53                   	push   ebx
c001e0dd:	83 ec 1c             	sub    esp,0x1c
c001e0e0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e0e4:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e0e7:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001e0ed:	85 ff                	test   edi,edi
c001e0ef:	7e 20                	jle    c001e111 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001e0f1:	31 f6                	xor    esi,esi
c001e0f3:	83 ec 0c             	sub    esp,0xc
c001e0f6:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001e0fd:	46                   	inc    esi
c001e0fe:	e8 4d 17 ff ff       	call   c000f850 <free>
c001e103:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e106:	83 c4 10             	add    esp,0x10
c001e109:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001e10f:	7f e2                	jg     c001e0f3 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001e111:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e11b:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001e120:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001e123:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001e126:	d3 c0                	rol    eax,cl
c001e128:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001e12f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e132:	89 f7                	mov    edi,esi
c001e134:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001e13c:	0f 85 74 01 00 00    	jne    c001e2b6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001e142:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001e148:	85 ed                	test   ebp,ebp
c001e14a:	74 1b                	je     c001e167 <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001e14c:	83 ec 0c             	sub    esp,0xc
c001e14f:	55                   	push   ebp
c001e150:	e8 05 be ff ff       	call   c0019f5a <EnvVarContainer::~EnvVarContainer()>
c001e155:	59                   	pop    ecx
c001e156:	5e                   	pop    esi
c001e157:	6a 0c                	push   0xc
c001e159:	55                   	push   ebp
c001e15a:	e8 32 49 ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c001e15f:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e162:	83 c4 10             	add    esp,0x10
c001e165:	89 f7                	mov    edi,esi
c001e167:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e16d:	85 c0                	test   eax,eax
c001e16f:	0f 84 aa 00 00 00    	je     c001e21f <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e175:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001e178:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001e17c:	31 c9                	xor    ecx,ecx
c001e17e:	eb 10                	jmp    c001e190 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001e180:	41                   	inc    ecx
c001e181:	83 f9 10             	cmp    ecx,0x10
c001e184:	0f 84 95 00 00 00    	je     c001e21f <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001e18a:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e190:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001e197:	d3 fa                	sar    edx,cl
c001e199:	83 e2 01             	and    edx,0x1
c001e19c:	74 e2                	je     c001e180 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e19e:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e1a1:	01 ca                	add    edx,ecx
c001e1a3:	89 d5                	mov    ebp,edx
c001e1a5:	c1 e5 05             	shl    ebp,0x5
c001e1a8:	01 ea                	add    edx,ebp
c001e1aa:	01 d0                	add    eax,edx
c001e1ac:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001e1b2:	83 fd 07             	cmp    ebp,0x7
c001e1b5:	75 c9                	jne    c001e180 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e1b7:	05 40 02 00 00       	add    eax,0x240
c001e1bc:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001e1bf:	83 fd ff             	cmp    ebp,0xffffffff
c001e1c2:	0f 8c 08 01 00 00    	jl     c001e2d0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001e1c8:	0f 84 b9 01 00 00    	je     c001e387 <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001e1ce:	85 ed                	test   ebp,ebp
c001e1d0:	0f 84 a0 01 00 00    	je     c001e376 <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001e1d6:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001e1d8:	75 a6                	jne    c001e180 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e1da:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001e1e0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e1e4:	01 d0                	add    eax,edx
c001e1e6:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001e1ea:	83 ec 0c             	sub    esp,0xc
c001e1ed:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001e1f3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e1f6:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e1fc:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001e203:	50                   	push   eax
c001e204:	e8 21 fe ff ff       	call   c001e02a <unblockTask(ThreadControlBlock*)>
c001e209:	83 c4 10             	add    esp,0x10
c001e20c:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e20f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e213:	89 f7                	mov    edi,esi
c001e215:	41                   	inc    ecx
c001e216:	83 f9 10             	cmp    ecx,0x10
c001e219:	0f 85 6b ff ff ff    	jne    c001e18a <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001e21f:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001e225:	85 c0                	test   eax,eax
c001e227:	74 5d                	je     c001e286 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e229:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001e22f:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001e235:	74 4f                	je     c001e286 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001e237:	83 ec 0c             	sub    esp,0xc
c001e23a:	68 68 15 03 c0       	push   0xc0031568
c001e23f:	e8 1a a4 00 00       	call   c002865e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e244:	c7 04 24 68 15 03 c0 	mov    DWORD PTR [esp],0xc0031568
c001e24b:	89 c7                	mov    edi,eax
c001e24d:	e8 14 a4 00 00       	call   c0028666 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e252:	83 c4 10             	add    esp,0x10
c001e255:	84 c0                	test   al,al
c001e257:	0f 84 e4 00 00 00    	je     c001e341 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001e25d:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e260:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e266:	85 d2                	test   edx,edx
c001e268:	74 0f                	je     c001e279 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001e26a:	83 ec 0c             	sub    esp,0xc
c001e26d:	8b 02                	mov    eax,DWORD PTR [edx]
c001e26f:	52                   	push   edx
c001e270:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001e273:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e276:	83 c4 10             	add    esp,0x10
c001e279:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001e283:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001e286:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001e28c:	85 db                	test   ebx,ebx
c001e28e:	74 16                	je     c001e2a6 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001e290:	83 ec 0c             	sub    esp,0xc
c001e293:	53                   	push   ebx
c001e294:	e8 47 3e ff ff       	call   c00120e0 <VAS::~VAS()>
c001e299:	58                   	pop    eax
c001e29a:	5a                   	pop    edx
c001e29b:	6a 10                	push   0x10
c001e29d:	53                   	push   ebx
c001e29e:	e8 ee 47 ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c001e2a3:	83 c4 10             	add    esp,0x10
c001e2a6:	83 ec 0c             	sub    esp,0xc
c001e2a9:	68 ea bd 02 c0       	push   0xc002bdea
c001e2ae:	e8 be 48 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001e2b3:	83 c4 10             	add    esp,0x10
c001e2b6:	83 ec 08             	sub    esp,0x8
c001e2b9:	68 3f 07 00 00       	push   0x73f
c001e2be:	68 f8 bd 02 c0       	push   0xc002bdf8
c001e2c3:	e8 a9 48 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001e2c8:	83 c4 2c             	add    esp,0x2c
c001e2cb:	5b                   	pop    ebx
c001e2cc:	5e                   	pop    esi
c001e2cd:	5f                   	pop    edi
c001e2ce:	5d                   	pop    ebp
c001e2cf:	c3                   	ret    
c001e2d0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e2d4:	83 ec 0c             	sub    esp,0xc
c001e2d7:	68 d4 c0 02 c0       	push   0xc002c0d4
c001e2dc:	e8 0c bf ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001e2e1:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001e2e4:	83 c4 10             	add    esp,0x10
c001e2e7:	89 f7                	mov    edi,esi
c001e2e9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e2ed:	e9 8e fe ff ff       	jmp    c001e180 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001e2f2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e2f8:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001e2fe:	75 1c                	jne    c001e31c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e300:	83 ec 0c             	sub    esp,0xc
c001e303:	68 3c c1 02 c0       	push   0xc002c13c
c001e308:	e8 64 48 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001e30d:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001e314:	e8 8f fb ff ff       	call   c001dea8 <blockTask(TaskState)>
c001e319:	83 c4 10             	add    esp,0x10
c001e31c:	83 ec 08             	sub    esp,0x8
c001e31f:	56                   	push   esi
c001e320:	68 68 15 03 c0       	push   0xc0031568
c001e325:	e8 06 a4 00 00       	call   c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e32a:	c7 04 24 68 15 03 c0 	mov    DWORD PTR [esp],0xc0031568
c001e331:	e8 28 a3 00 00       	call   c002865e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e336:	83 c4 10             	add    esp,0x10
c001e339:	39 f8                	cmp    eax,edi
c001e33b:	0f 84 1c ff ff ff    	je     c001e25d <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001e341:	83 ec 0c             	sub    esp,0xc
c001e344:	68 68 15 03 c0       	push   0xc0031568
c001e349:	e8 10 a3 00 00       	call   c002865e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e34e:	c7 04 24 68 15 03 c0 	mov    DWORD PTR [esp],0xc0031568
c001e355:	89 c6                	mov    esi,eax
c001e357:	e8 26 a3 00 00       	call   c0028682 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e35c:	83 c4 10             	add    esp,0x10
c001e35f:	39 f3                	cmp    ebx,esi
c001e361:	74 b9                	je     c001e31c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e363:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001e366:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e369:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001e36f:	75 ab                	jne    c001e31c <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001e371:	e9 7c ff ff ff       	jmp    c001e2f2 <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001e376:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e37a:	83 ec 0c             	sub    esp,0xc
c001e37d:	68 08 c1 02 c0       	push   0xc002c108
c001e382:	e9 55 ff ff ff       	jmp    c001e2dc <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001e387:	8b 36                	mov    esi,DWORD PTR [esi]
c001e389:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001e38d:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001e390:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e393:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001e399:	01 d7                	add    edi,edx
c001e39b:	89 f8                	mov    eax,edi
c001e39d:	e9 44 fe ff ff       	jmp    c001e1e6 <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001e3a2 <cleanerTaskFunction(void*)>:
c001e3a2:	53                   	push   ebx
c001e3a3:	83 ec 08             	sub    esp,0x8
c001e3a6:	e8 69 f6 ff ff       	call   c001da14 <unlockScheduler()>
c001e3ab:	e8 62 f6 ff ff       	call   c001da12 <lockScheduler()>
c001e3b0:	80 3d 2c 15 03 c0 00 	cmp    BYTE PTR ds:0xc003152c,0x0
c001e3b7:	0f 85 8e 00 00 00    	jne    c001e44b <cleanerTaskFunction(void*)+0xa9>
c001e3bd:	83 ec 0c             	sub    esp,0xc
c001e3c0:	6a 02                	push   0x2
c001e3c2:	e8 9f fa ff ff       	call   c001de66 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e3c7:	83 c4 10             	add    esp,0x10
c001e3ca:	c6 05 2c 15 03 c0 00 	mov    BYTE PTR ds:0xc003152c,0x0
c001e3d1:	e8 63 f6 ff ff       	call   c001da39 <lockStuff()>
c001e3d6:	e8 37 f6 ff ff       	call   c001da12 <lockScheduler()>
c001e3db:	83 ec 0c             	sub    esp,0xc
c001e3de:	68 50 15 03 c0       	push   0xc0031550
c001e3e3:	e8 7e a2 00 00       	call   c0028666 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e3e8:	83 c4 10             	add    esp,0x10
c001e3eb:	84 c0                	test   al,al
c001e3ed:	75 40                	jne    c001e42f <cleanerTaskFunction(void*)+0x8d>
c001e3ef:	83 ec 0c             	sub    esp,0xc
c001e3f2:	68 50 15 03 c0       	push   0xc0031550
c001e3f7:	e8 62 a2 00 00       	call   c002865e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e3fc:	c7 04 24 50 15 03 c0 	mov    DWORD PTR [esp],0xc0031550
c001e403:	89 c3                	mov    ebx,eax
c001e405:	e8 78 a2 00 00       	call   c0028682 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e40a:	c7 04 24 0e be 02 c0 	mov    DWORD PTR [esp],0xc002be0e
c001e411:	e8 5b 47 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001e416:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e419:	e8 bb fc ff ff       	call   c001e0d9 <cleanupTerminatedTask(ThreadControlBlock*)>
c001e41e:	c7 04 24 27 be 02 c0 	mov    DWORD PTR [esp],0xc002be27
c001e425:	e8 47 47 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001e42a:	83 c4 10             	add    esp,0x10
c001e42d:	eb ac                	jmp    c001e3db <cleanerTaskFunction(void*)+0x39>
c001e42f:	e8 e0 f5 ff ff       	call   c001da14 <unlockScheduler()>
c001e434:	e8 9a f9 ff ff       	call   c001ddd3 <unlockStuff()>
c001e439:	e8 d4 f5 ff ff       	call   c001da12 <lockScheduler()>
c001e43e:	80 3d 2c 15 03 c0 00 	cmp    BYTE PTR ds:0xc003152c,0x0
c001e445:	0f 84 72 ff ff ff    	je     c001e3bd <cleanerTaskFunction(void*)+0x1b>
c001e44b:	e8 c4 f5 ff ff       	call   c001da14 <unlockScheduler()>
c001e450:	e9 75 ff ff ff       	jmp    c001e3ca <cleanerTaskFunction(void*)+0x28>

c001e455 <terminateTask(int)>:
c001e455:	83 ec 14             	sub    esp,0x14
c001e458:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e45d:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001e460:	83 c0 0c             	add    eax,0xc
c001e463:	50                   	push   eax
c001e464:	68 64 c1 02 c0       	push   0xc002c164
c001e469:	e8 03 47 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001e46e:	e8 c6 f5 ff ff       	call   c001da39 <lockStuff()>
c001e473:	e8 9a f5 ff ff       	call   c001da12 <lockScheduler()>
c001e478:	c7 04 24 3a be 02 c0 	mov    DWORD PTR [esp],0xc002be3a
c001e47f:	e8 ed 46 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001e484:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e488:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e48d:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001e490:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e495:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001e498:	5a                   	pop    edx
c001e499:	59                   	pop    ecx
c001e49a:	50                   	push   eax
c001e49b:	68 50 15 03 c0       	push   0xc0031550
c001e4a0:	e8 8b a2 00 00       	call   c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e4a5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4aa:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001e4b1:	c7 04 24 54 be 02 c0 	mov    DWORD PTR [esp],0xc002be54
c001e4b8:	e8 b4 46 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001e4bd:	83 c4 10             	add    esp,0x10
c001e4c0:	a1 28 15 03 c0       	mov    eax,ds:0xc0031528
c001e4c5:	85 c0                	test   eax,eax
c001e4c7:	74 5a                	je     c001e523 <terminateTask(int)+0xce>
c001e4c9:	83 ec 0c             	sub    esp,0xc
c001e4cc:	68 6e be 02 c0       	push   0xc002be6e
c001e4d1:	e8 9b 46 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001e4d6:	58                   	pop    eax
c001e4d7:	c6 05 2c 15 03 c0 01 	mov    BYTE PTR ds:0xc003152c,0x1
c001e4de:	ff 35 28 15 03 c0    	push   DWORD PTR ds:0xc0031528
c001e4e4:	e8 41 fb ff ff       	call   c001e02a <unblockTask(ThreadControlBlock*)>
c001e4e9:	c7 04 24 88 be 02 c0 	mov    DWORD PTR [esp],0xc002be88
c001e4f0:	e8 7c 46 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001e4f5:	83 c4 10             	add    esp,0x10
c001e4f8:	e8 17 f5 ff ff       	call   c001da14 <unlockScheduler()>
c001e4fd:	e8 d1 f8 ff ff       	call   c001ddd3 <unlockStuff()>
c001e502:	83 ec 0c             	sub    esp,0xc
c001e505:	68 c0 be 02 c0       	push   0xc002bec0
c001e50a:	e8 62 46 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001e50f:	83 c4 10             	add    esp,0x10
c001e512:	e8 fb f4 ff ff       	call   c001da12 <lockScheduler()>
c001e517:	e8 32 f8 ff ff       	call   c001dd4e <schedule()>
c001e51c:	e8 f3 f4 ff ff       	call   c001da14 <unlockScheduler()>
c001e521:	eb ef                	jmp    c001e512 <terminateTask(int)+0xbd>
c001e523:	83 ec 0c             	sub    esp,0xc
c001e526:	68 a2 be 02 c0       	push   0xc002bea2
c001e52b:	e8 41 46 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001e530:	83 c4 10             	add    esp,0x10
c001e533:	eb c3                	jmp    c001e4f8 <terminateTask(int)+0xa3>

c001e535 <Thr::terminateFromIRQ(int)>:
c001e535:	83 ec 18             	sub    esp,0x18
c001e538:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e53c:	e8 14 ff ff ff       	call   c001e455 <terminateTask(int)>
c001e541:	90                   	nop

c001e542 <Semaphore::release()>:
c001e542:	83 ec 0c             	sub    esp,0xc
c001e545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e549:	e8 eb f4 ff ff       	call   c001da39 <lockStuff()>
c001e54e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001e551:	85 d2                	test   edx,edx
c001e553:	74 1a                	je     c001e56f <Semaphore::release()+0x2d>
c001e555:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c001e558:	83 ec 0c             	sub    esp,0xc
c001e55b:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c001e55e:	52                   	push   edx
c001e55f:	e8 c6 fa ff ff       	call   c001e02a <unblockTask(ThreadControlBlock*)>
c001e564:	83 c4 10             	add    esp,0x10
c001e567:	83 c4 0c             	add    esp,0xc
c001e56a:	e9 64 f8 ff ff       	jmp    c001ddd3 <unlockStuff()>
c001e56f:	ff 48 0c             	dec    DWORD PTR [eax+0xc]
c001e572:	83 c4 0c             	add    esp,0xc
c001e575:	e9 59 f8 ff ff       	jmp    c001ddd3 <unlockStuff()>

c001e57a <__static_initialization_and_destruction_0(int, int)>:
c001e57a:	83 ec 0c             	sub    esp,0xc
c001e57d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001e582:	0f 85 88 00 00 00    	jne    c001e610 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e588:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001e590:	75 7e                	jne    c001e610 <__static_initialization_and_destruction_0(int, int)+0x96>
c001e592:	83 ec 0c             	sub    esp,0xc
c001e595:	68 68 15 03 c0       	push   0xc0031568
c001e59a:	e8 41 a3 00 00       	call   c00288e0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e59f:	83 c4 10             	add    esp,0x10
c001e5a2:	83 ec 04             	sub    esp,0x4
c001e5a5:	68 1c cf 02 c0       	push   0xc002cf1c
c001e5aa:	68 68 15 03 c0       	push   0xc0031568
c001e5af:	68 a0 88 02 c0       	push   0xc00288a0
c001e5b4:	e8 52 44 ff ff       	call   c0012a0b <__cxa_atexit>
c001e5b9:	83 c4 10             	add    esp,0x10
c001e5bc:	83 ec 0c             	sub    esp,0xc
c001e5bf:	68 5c 15 03 c0       	push   0xc003155c
c001e5c4:	e8 17 a3 00 00       	call   c00288e0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e5c9:	83 c4 10             	add    esp,0x10
c001e5cc:	83 ec 04             	sub    esp,0x4
c001e5cf:	68 1c cf 02 c0       	push   0xc002cf1c
c001e5d4:	68 5c 15 03 c0       	push   0xc003155c
c001e5d9:	68 a0 88 02 c0       	push   0xc00288a0
c001e5de:	e8 28 44 ff ff       	call   c0012a0b <__cxa_atexit>
c001e5e3:	83 c4 10             	add    esp,0x10
c001e5e6:	83 ec 0c             	sub    esp,0xc
c001e5e9:	68 50 15 03 c0       	push   0xc0031550
c001e5ee:	e8 ed a2 00 00       	call   c00288e0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001e5f3:	83 c4 10             	add    esp,0x10
c001e5f6:	83 ec 04             	sub    esp,0x4
c001e5f9:	68 1c cf 02 c0       	push   0xc002cf1c
c001e5fe:	68 50 15 03 c0       	push   0xc0031550
c001e603:	68 a0 88 02 c0       	push   0xc00288a0
c001e608:	e8 fe 43 ff ff       	call   c0012a0b <__cxa_atexit>
c001e60d:	83 c4 10             	add    esp,0x10
c001e610:	90                   	nop
c001e611:	83 c4 0c             	add    esp,0xc
c001e614:	c3                   	ret    

c001e615 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001e615:	83 ec 0c             	sub    esp,0xc
c001e618:	83 ec 08             	sub    esp,0x8
c001e61b:	68 ff ff 00 00       	push   0xffff
c001e620:	6a 01                	push   0x1
c001e622:	e8 53 ff ff ff       	call   c001e57a <__static_initialization_and_destruction_0(int, int)>
c001e627:	83 c4 10             	add    esp,0x10
c001e62a:	83 c4 0c             	add    esp,0xc
c001e62d:	c3                   	ret    

c001e62e <Vm::inbv(unsigned short)>:
c001e62e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001e632:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e637:	75 06                	jne    c001e63f <Vm::inbv(unsigned short)+0x11>
c001e639:	a0 ac 15 03 c0       	mov    al,ds:0xc00315ac
c001e63e:	c3                   	ret    
c001e63f:	ec                   	in     al,dx
c001e640:	c3                   	ret    

c001e641 <Vm::outbv(unsigned short, unsigned char)>:
c001e641:	53                   	push   ebx
c001e642:	83 ec 08             	sub    esp,0x8
c001e645:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e649:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e64d:	66 81 fa fe fe       	cmp    dx,0xfefe
c001e652:	75 38                	jne    c001e68c <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001e654:	0f b6 c3             	movzx  eax,bl
c001e657:	51                   	push   ecx
c001e658:	51                   	push   ecx
c001e659:	50                   	push   eax
c001e65a:	68 83 c1 02 c0       	push   0xc002c183
c001e65f:	e8 0d 45 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001e664:	8b 15 ac 15 03 c0    	mov    edx,DWORD PTR ds:0xc00315ac
c001e66a:	83 c4 10             	add    esp,0x10
c001e66d:	8d 42 01             	lea    eax,[edx+0x1]
c001e670:	88 9a c0 15 03 c0    	mov    BYTE PTR [edx-0x3ffcea40],bl
c001e676:	a3 ac 15 03 c0       	mov    ds:0xc00315ac,eax
c001e67b:	83 f8 20             	cmp    eax,0x20
c001e67e:	75 0f                	jne    c001e68f <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e680:	c7 05 ac 15 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00315ac,0x1f
c001e68a:	eb 03                	jmp    c001e68f <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001e68c:	88 d8                	mov    al,bl
c001e68e:	ee                   	out    dx,al
c001e68f:	83 c4 08             	add    esp,0x8
c001e692:	5b                   	pop    ebx
c001e693:	c3                   	ret    

c001e694 <Vm::realToLinear(unsigned short, unsigned short)>:
c001e694:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e699:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e69e:	c1 e0 04             	shl    eax,0x4
c001e6a1:	01 d0                	add    eax,edx
c001e6a3:	c3                   	ret    

c001e6a4 <Vm::getSegment(unsigned int)>:
c001e6a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6a8:	c1 e8 10             	shr    eax,0x10
c001e6ab:	c3                   	ret    

c001e6ac <Vm::getOffset(unsigned int)>:
c001e6ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e6b0:	c3                   	ret    

c001e6b1 <Vm::mainloop2()>:
c001e6b1:	83 ec 0c             	sub    esp,0xc
c001e6b4:	e8 59 f3 ff ff       	call   c001da12 <lockScheduler()>
c001e6b9:	83 ec 0c             	sub    esp,0xc
c001e6bc:	c6 05 a5 15 03 c0 01 	mov    BYTE PTR ds:0xc00315a5,0x1
c001e6c3:	6a 02                	push   0x2
c001e6c5:	e8 9c f7 ff ff       	call   c001de66 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e6ca:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6cf:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001e6d3:	52                   	push   edx
c001e6d4:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001e6d8:	52                   	push   edx
c001e6d9:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001e6dd:	52                   	push   edx
c001e6de:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001e6e2:	50                   	push   eax
c001e6e3:	e8 12 1c fe ff       	call   c00002fa <goToVM86>
c001e6e8:	83 c4 2c             	add    esp,0x2c
c001e6eb:	c3                   	ret    

c001e6ec <Vm::mainVm8086Loop(void*)>:
c001e6ec:	83 ec 0c             	sub    esp,0xc
c001e6ef:	e8 20 f3 ff ff       	call   c001da14 <unlockScheduler()>
c001e6f4:	83 c4 0c             	add    esp,0xc
c001e6f7:	eb b8                	jmp    c001e6b1 <Vm::mainloop2()>

c001e6f9 <Vm::mainloop3(unsigned long)>:
c001e6f9:	53                   	push   ebx
c001e6fa:	83 ec 08             	sub    esp,0x8
c001e6fd:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e701:	e8 0c f3 ff ff       	call   c001da12 <lockScheduler()>
c001e706:	83 ec 0c             	sub    esp,0xc
c001e709:	89 1d a0 15 03 c0    	mov    DWORD PTR ds:0xc00315a0,ebx
c001e70f:	6a 02                	push   0x2
c001e711:	c6 05 a4 15 03 c0 01 	mov    BYTE PTR ds:0xc00315a4,0x1
c001e718:	e8 49 f7 ff ff       	call   c001de66 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001e71d:	83 c4 18             	add    esp,0x18
c001e720:	5b                   	pop    ebx
c001e721:	eb 8e                	jmp    c001e6b1 <Vm::mainloop2()>

c001e723 <Vm::initialise8086()>:
c001e723:	83 ec 0c             	sub    esp,0xc
c001e726:	68 80 00 00 00       	push   0x80
c001e72b:	6a 00                	push   0x0
c001e72d:	68 ec e6 01 c0       	push   0xc001e6ec
c001e732:	ff 35 74 15 03 c0    	push   DWORD PTR ds:0xc0031574
c001e738:	e8 07 f4 ff ff       	call   c001db44 <Process::createThread(void (*)(void*), void*, int)>
c001e73d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001e744:	a3 a8 15 03 c0       	mov    ds:0xc00315a8,eax
c001e749:	68 00 01 00 00       	push   0x100
c001e74e:	a1 74 15 03 c0       	mov    eax,ds:0xc0031574
c001e753:	6a 00                	push   0x0
c001e755:	6a 00                	push   0x0
c001e757:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001e75d:	e8 de 3d ff ff       	call   c0012540 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001e762:	83 c4 2c             	add    esp,0x2c
c001e765:	c3                   	ret    

c001e766 <Vm::finish8086()>:
c001e766:	53                   	push   ebx
c001e767:	83 ec 08             	sub    esp,0x8
c001e76a:	e8 a3 f2 ff ff       	call   c001da12 <lockScheduler()>
c001e76f:	80 3d a4 15 03 c0 00 	cmp    BYTE PTR ds:0xc00315a4,0x0
c001e776:	75 0c                	jne    c001e784 <Vm::finish8086()+0x1e>
c001e778:	e8 d1 f5 ff ff       	call   c001dd4e <schedule()>
c001e77d:	e8 92 f2 ff ff       	call   c001da14 <unlockScheduler()>
c001e782:	eb e6                	jmp    c001e76a <Vm::finish8086()+0x4>
c001e784:	83 ec 0c             	sub    esp,0xc
c001e787:	8b 1d a0 15 03 c0    	mov    ebx,DWORD PTR ds:0xc00315a0
c001e78d:	ff 35 a8 15 03 c0    	push   DWORD PTR ds:0xc00315a8
c001e793:	c6 05 a4 15 03 c0 00 	mov    BYTE PTR ds:0xc00315a4,0x0
c001e79a:	e8 8b f8 ff ff       	call   c001e02a <unblockTask(ThreadControlBlock*)>
c001e79f:	e8 70 f2 ff ff       	call   c001da14 <unlockScheduler()>
c001e7a4:	89 d8                	mov    eax,ebx
c001e7a6:	83 c4 18             	add    esp,0x18
c001e7a9:	5b                   	pop    ebx
c001e7aa:	c3                   	ret    

c001e7ab <Vm::getOutput8086(unsigned char*)>:
c001e7ab:	83 ec 10             	sub    esp,0x10
c001e7ae:	ff 35 ac 15 03 c0    	push   DWORD PTR ds:0xc00315ac
c001e7b4:	68 c0 15 03 c0       	push   0xc00315c0
c001e7b9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e7bd:	e8 82 1f fe ff       	call   c0000744 <memcpy>
c001e7c2:	a1 ac 15 03 c0       	mov    eax,ds:0xc00315ac
c001e7c7:	c7 05 ac 15 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00315ac,0x0
c001e7d1:	83 c4 1c             	add    esp,0x1c
c001e7d4:	c3                   	ret    

c001e7d5 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001e7d5:	55                   	push   ebp
c001e7d6:	57                   	push   edi
c001e7d7:	56                   	push   esi
c001e7d8:	53                   	push   ebx
c001e7d9:	83 ec 2c             	sub    esp,0x2c
c001e7dc:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001e7e0:	8b 5c 24 48          	mov    ebx,DWORD PTR [esp+0x48]
c001e7e4:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c001e7e8:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001e7ec:	e8 21 f2 ff ff       	call   c001da12 <lockScheduler()>
c001e7f1:	a0 a5 15 03 c0       	mov    al,ds:0xc00315a5
c001e7f6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e7fa:	84 c0                	test   al,al
c001e7fc:	75 0c                	jne    c001e80a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x35>
c001e7fe:	e8 4b f5 ff ff       	call   c001dd4e <schedule()>
c001e803:	e8 0c f2 ff ff       	call   c001da14 <unlockScheduler()>
c001e808:	eb e2                	jmp    c001e7ec <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001e80a:	a1 a8 15 03 c0       	mov    eax,ds:0xc00315a8
c001e80f:	c7 05 ac 15 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00315ac,0x0
c001e819:	66 89 78 5f          	mov    WORD PTR [eax+0x5f],di
c001e81d:	66 89 70 59          	mov    WORD PTR [eax+0x59],si
c001e821:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c001e825:	66 89 68 5d          	mov    WORD PTR [eax+0x5d],bp
c001e829:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001e82d:	50                   	push   eax
c001e82e:	6a 20                	push   0x20
c001e830:	6a 00                	push   0x0
c001e832:	68 c0 15 03 c0       	push   0xc00315c0
c001e837:	e8 3c 1f fe ff       	call   c0000778 <memset>
c001e83c:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001e843:	e8 f8 0f ff ff       	call   c000f840 <malloc>
c001e848:	83 c4 0c             	add    esp,0xc
c001e84b:	89 c7                	mov    edi,eax
c001e84d:	ff 35 74 15 03 c0    	push   DWORD PTR ds:0xc0031574
c001e853:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e857:	50                   	push   eax
c001e858:	e8 6d 48 ff ff       	call   c00130ca <File::File(char const*, Process*)>
c001e85d:	83 c4 10             	add    esp,0x10
c001e860:	85 ff                	test   edi,edi
c001e862:	75 0a                	jne    c001e86e <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x99>
c001e864:	83 ec 0c             	sub    esp,0xc
c001e867:	68 9f c1 02 c0       	push   0xc002c19f
c001e86c:	eb 27                	jmp    c001e895 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xc0>
c001e86e:	50                   	push   eax
c001e86f:	8d 44 24 17          	lea    eax,[esp+0x17]
c001e873:	50                   	push   eax
c001e874:	8d 44 24 20          	lea    eax,[esp+0x20]
c001e878:	50                   	push   eax
c001e879:	57                   	push   edi
c001e87a:	e8 5b 4b ff ff       	call   c00133da <File::stat(unsigned long long*, bool*)>
c001e87f:	0f b6 6c 24 23       	movzx  ebp,BYTE PTR [esp+0x23]
c001e884:	83 c4 10             	add    esp,0x10
c001e887:	89 e8                	mov    eax,ebp
c001e889:	84 c0                	test   al,al
c001e88b:	74 19                	je     c001e8a6 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001e88d:	83 ec 0c             	sub    esp,0xc
c001e890:	68 b3 c1 02 c0       	push   0xc002c1b3
c001e895:	e8 53 b9 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001e89a:	31 ed                	xor    ebp,ebp
c001e89c:	e8 73 f1 ff ff       	call   c001da14 <unlockScheduler()>
c001e8a1:	83 c4 10             	add    esp,0x10
c001e8a4:	eb 75                	jmp    c001e91b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e8a6:	50                   	push   eax
c001e8a7:	50                   	push   eax
c001e8a8:	6a 01                	push   0x1
c001e8aa:	57                   	push   edi
c001e8ab:	e8 7e 48 ff ff       	call   c001312e <File::open(FileOpenMode)>
c001e8b0:	83 c4 10             	add    esp,0x10
c001e8b3:	85 c0                	test   eax,eax
c001e8b5:	74 17                	je     c001e8ce <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xf9>
c001e8b7:	83 ec 0c             	sub    esp,0xc
c001e8ba:	68 cc c1 02 c0       	push   0xc002c1cc
c001e8bf:	e8 29 b9 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001e8c4:	e8 4b f1 ff ff       	call   c001da14 <unlockScheduler()>
c001e8c9:	83 c4 10             	add    esp,0x10
c001e8cc:	eb 4d                	jmp    c001e91b <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x146>
c001e8ce:	0f b7 f6             	movzx  esi,si
c001e8d1:	50                   	push   eax
c001e8d2:	0f b7 db             	movzx  ebx,bx
c001e8d5:	50                   	push   eax
c001e8d6:	56                   	push   esi
c001e8d7:	53                   	push   ebx
c001e8d8:	e8 b7 fd ff ff       	call   c001e694 <Vm::realToLinear(unsigned short, unsigned short)>
c001e8dd:	5a                   	pop    edx
c001e8de:	8b 17                	mov    edx,DWORD PTR [edi]
c001e8e0:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001e8e4:	51                   	push   ecx
c001e8e5:	50                   	push   eax
c001e8e6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e8ea:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001e8ee:	57                   	push   edi
c001e8ef:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001e8f2:	83 c4 14             	add    esp,0x14
c001e8f5:	57                   	push   edi
c001e8f6:	e8 91 48 ff ff       	call   c001318c <File::close()>
c001e8fb:	c6 05 a5 15 03 c0 00 	mov    BYTE PTR ds:0xc00315a5,0x0
c001e902:	e8 0d f1 ff ff       	call   c001da14 <unlockScheduler()>
c001e907:	59                   	pop    ecx
c001e908:	ff 35 a8 15 03 c0    	push   DWORD PTR ds:0xc00315a8
c001e90e:	e8 17 f7 ff ff       	call   c001e02a <unblockTask(ThreadControlBlock*)>
c001e913:	83 c4 10             	add    esp,0x10
c001e916:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001e91b:	83 c4 2c             	add    esp,0x2c
c001e91e:	89 e8                	mov    eax,ebp
c001e920:	5b                   	pop    ebx
c001e921:	5e                   	pop    esi
c001e922:	5f                   	pop    edi
c001e923:	5d                   	pop    ebp
c001e924:	c3                   	ret    

c001e925 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001e925:	57                   	push   edi
c001e926:	56                   	push   esi
c001e927:	53                   	push   ebx
c001e928:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e92c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e930:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001e934:	83 e8 06             	sub    eax,0x6
c001e937:	0f b7 c0             	movzx  eax,ax
c001e93a:	50                   	push   eax
c001e93b:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001e940:	50                   	push   eax
c001e941:	e8 4e fd ff ff       	call   c001e694 <Vm::realToLinear(unsigned short, unsigned short)>
c001e946:	5a                   	pop    edx
c001e947:	5e                   	pop    esi
c001e948:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001e94b:	8d 56 fa             	lea    edx,[esi-0x6]
c001e94e:	81 e2 ff ff 00 00    	and    edx,0xffff
c001e954:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001e957:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001e95a:	83 c2 02             	add    edx,0x2
c001e95d:	66 89 10             	mov    WORD PTR [eax],dx
c001e960:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001e963:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001e967:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001e96a:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001e96e:	89 d6                	mov    esi,edx
c001e970:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001e976:	66 81 e6 ff fd       	and    si,0xfdff
c001e97b:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001e97f:	74 07                	je     c001e988 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001e981:	89 d6                	mov    esi,edx
c001e983:	66 81 ce 00 02       	or     si,0x200
c001e988:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001e98c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e991:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001e995:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001e99d:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001e9a0:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001e9a8:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001e9ab:	5b                   	pop    ebx
c001e9ac:	5e                   	pop    esi
c001e9ad:	5f                   	pop    edi
c001e9ae:	c3                   	ret    

c001e9af <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001e9af:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9b4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e9b9:	c1 e0 04             	shl    eax,0x4
c001e9bc:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001e9bf:	c3                   	ret    

c001e9c0 <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001e9c0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9c5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e9ca:	c1 e0 04             	shl    eax,0x4
c001e9cd:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001e9d1:	c3                   	ret    

c001e9d2 <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001e9d2:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9d7:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e9dc:	c1 e0 04             	shl    eax,0x4
c001e9df:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001e9e2:	c3                   	ret    

c001e9e3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001e9e3:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9e8:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001e9ed:	c1 e0 04             	shl    eax,0x4
c001e9f0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001e9f4:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001e9f7:	c3                   	ret    

c001e9f8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001e9f8:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001e9fd:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea02:	c1 e0 04             	shl    eax,0x4
c001ea05:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ea09:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001ea0d:	c3                   	ret    

c001ea0e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001ea0e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001ea13:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001ea18:	c1 e0 04             	shl    eax,0x4
c001ea1b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ea1f:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001ea22:	c3                   	ret    

c001ea23 <Vm::faultHandler(regs*)>:
c001ea23:	55                   	push   ebp
c001ea24:	57                   	push   edi
c001ea25:	56                   	push   esi
c001ea26:	53                   	push   ebx
c001ea27:	83 ec 1c             	sub    esp,0x1c
c001ea2a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ea2e:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001ea31:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001ea34:	0f b7 c1             	movzx  eax,cx
c001ea37:	50                   	push   eax
c001ea38:	0f b7 c3             	movzx  eax,bx
c001ea3b:	c1 e3 04             	shl    ebx,0x4
c001ea3e:	50                   	push   eax
c001ea3f:	e8 50 fc ff ff       	call   c001e694 <Vm::realToLinear(unsigned short, unsigned short)>
c001ea44:	5a                   	pop    edx
c001ea45:	89 c5                	mov    ebp,eax
c001ea47:	5e                   	pop    esi
c001ea48:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001ea4c:	50                   	push   eax
c001ea4d:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ea51:	50                   	push   eax
c001ea52:	e8 3d fc ff ff       	call   c001e694 <Vm::realToLinear(unsigned short, unsigned short)>
c001ea57:	01 cb                	add    ebx,ecx
c001ea59:	89 c6                	mov    esi,eax
c001ea5b:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001ea5f:	50                   	push   eax
c001ea60:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001ea64:	50                   	push   eax
c001ea65:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ea69:	50                   	push   eax
c001ea6a:	55                   	push   ebp
c001ea6b:	53                   	push   ebx
c001ea6c:	b3 06                	mov    bl,0x6
c001ea6e:	68 e5 c1 02 c0       	push   0xc002c1e5
c001ea73:	e8 f9 40 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001ea78:	83 c4 20             	add    esp,0x20
c001ea7b:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001ea80:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001ea85:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001ea89:	3c 9d                	cmp    al,0x9d
c001ea8b:	0f 84 d7 02 00 00    	je     c001ed68 <Vm::faultHandler(regs*)+0x345>
c001ea91:	0f 87 a3 00 00 00    	ja     c001eb3a <Vm::faultHandler(regs*)+0x117>
c001ea97:	3c 66                	cmp    al,0x66
c001ea99:	0f 84 15 02 00 00    	je     c001ecb4 <Vm::faultHandler(regs*)+0x291>
c001ea9f:	77 5f                	ja     c001eb00 <Vm::faultHandler(regs*)+0xdd>
c001eaa1:	3c 36                	cmp    al,0x36
c001eaa3:	0f 84 f1 01 00 00    	je     c001ec9a <Vm::faultHandler(regs*)+0x277>
c001eaa9:	77 28                	ja     c001ead3 <Vm::faultHandler(regs*)+0xb0>
c001eaab:	3c 26                	cmp    al,0x26
c001eaad:	0f 84 99 01 00 00    	je     c001ec4c <Vm::faultHandler(regs*)+0x229>
c001eab3:	3c 2e                	cmp    al,0x2e
c001eab5:	0f 85 3b 07 00 00    	jne    c001f1f6 <Vm::faultHandler(regs*)+0x7d3>
c001eabb:	83 ec 0c             	sub    esp,0xc
c001eabe:	31 db                	xor    ebx,ebx
c001eac0:	68 fa c1 02 c0       	push   0xc002c1fa
c001eac5:	e8 a7 40 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001eaca:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eacd:	83 c4 10             	add    esp,0x10
c001ead0:	45                   	inc    ebp
c001ead1:	eb b2                	jmp    c001ea85 <Vm::faultHandler(regs*)+0x62>
c001ead3:	3c 64                	cmp    al,0x64
c001ead5:	0f 84 8b 01 00 00    	je     c001ec66 <Vm::faultHandler(regs*)+0x243>
c001eadb:	0f 87 9f 01 00 00    	ja     c001ec80 <Vm::faultHandler(regs*)+0x25d>
c001eae1:	3c 3e                	cmp    al,0x3e
c001eae3:	0f 85 0d 07 00 00    	jne    c001f1f6 <Vm::faultHandler(regs*)+0x7d3>
c001eae9:	83 ec 0c             	sub    esp,0xc
c001eaec:	b3 01                	mov    bl,0x1
c001eaee:	68 fe c1 02 c0       	push   0xc002c1fe
c001eaf3:	e8 79 40 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001eaf8:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001eafb:	83 c4 10             	add    esp,0x10
c001eafe:	eb d0                	jmp    c001ead0 <Vm::faultHandler(regs*)+0xad>
c001eb00:	3c 6d                	cmp    al,0x6d
c001eb02:	0f 84 af 03 00 00    	je     c001eeb7 <Vm::faultHandler(regs*)+0x494>
c001eb08:	77 15                	ja     c001eb1f <Vm::faultHandler(regs*)+0xfc>
c001eb0a:	3c 67                	cmp    al,0x67
c001eb0c:	0f 84 bf 01 00 00    	je     c001ecd1 <Vm::faultHandler(regs*)+0x2ae>
c001eb12:	3c 6c                	cmp    al,0x6c
c001eb14:	0f 84 3f 03 00 00    	je     c001ee59 <Vm::faultHandler(regs*)+0x436>
c001eb1a:	e9 d7 06 00 00       	jmp    c001f1f6 <Vm::faultHandler(regs*)+0x7d3>
c001eb1f:	3c 6f                	cmp    al,0x6f
c001eb21:	0f 84 a4 04 00 00    	je     c001efcb <Vm::faultHandler(regs*)+0x5a8>
c001eb27:	0f 82 11 04 00 00    	jb     c001ef3e <Vm::faultHandler(regs*)+0x51b>
c001eb2d:	3c 9c                	cmp    al,0x9c
c001eb2f:	0f 84 ba 01 00 00    	je     c001ecef <Vm::faultHandler(regs*)+0x2cc>
c001eb35:	e9 bc 06 00 00       	jmp    c001f1f6 <Vm::faultHandler(regs*)+0x7d3>
c001eb3a:	3c ec                	cmp    al,0xec
c001eb3c:	0f 84 24 06 00 00    	je     c001f166 <Vm::faultHandler(regs*)+0x743>
c001eb42:	0f 87 93 00 00 00    	ja     c001ebdb <Vm::faultHandler(regs*)+0x1b8>
c001eb48:	3c e4                	cmp    al,0xe4
c001eb4a:	0f 84 5c 05 00 00    	je     c001f0ac <Vm::faultHandler(regs*)+0x689>
c001eb50:	77 6a                	ja     c001ebbc <Vm::faultHandler(regs*)+0x199>
c001eb52:	3c cd                	cmp    al,0xcd
c001eb54:	0f 84 7e 02 00 00    	je     c001edd8 <Vm::faultHandler(regs*)+0x3b5>
c001eb5a:	3c cf                	cmp    al,0xcf
c001eb5c:	0f 85 94 06 00 00    	jne    c001f1f6 <Vm::faultHandler(regs*)+0x7d3>
c001eb62:	83 ec 0c             	sub    esp,0xc
c001eb65:	68 42 c2 02 c0       	push   0xc002c242
c001eb6a:	e8 02 40 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001eb6f:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001eb72:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001eb75:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001eb79:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001eb7c:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001eb80:	0d 00 02 02 00       	or     eax,0x20200
c001eb85:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001eb88:	56                   	push   esi
c001eb89:	53                   	push   ebx
c001eb8a:	52                   	push   edx
c001eb8b:	68 48 c2 02 c0       	push   0xc002c248
c001eb90:	e8 dc 3f ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001eb95:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001eb99:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001eb9f:	66 c1 e8 09          	shr    ax,0x9
c001eba3:	83 e0 01             	and    eax,0x1
c001eba6:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001eba9:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001ebac:	83 c0 06             	add    eax,0x6
c001ebaf:	25 ff ff 00 00       	and    eax,0xffff
c001ebb4:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001ebb7:	e9 95 02 00 00       	jmp    c001ee51 <Vm::faultHandler(regs*)+0x42e>
c001ebbc:	3c e6                	cmp    al,0xe6
c001ebbe:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001ebc2:	0f 84 4e 05 00 00    	je     c001f116 <Vm::faultHandler(regs*)+0x6f3>
c001ebc8:	0f 82 0a 05 00 00    	jb     c001f0d8 <Vm::faultHandler(regs*)+0x6b5>
c001ebce:	3c e7                	cmp    al,0xe7
c001ebd0:	0f 84 69 05 00 00    	je     c001f13f <Vm::faultHandler(regs*)+0x71c>
c001ebd6:	e9 1b 06 00 00       	jmp    c001f1f6 <Vm::faultHandler(regs*)+0x7d3>
c001ebdb:	3c ef                	cmp    al,0xef
c001ebdd:	0f 84 e6 05 00 00    	je     c001f1c9 <Vm::faultHandler(regs*)+0x7a6>
c001ebe3:	77 37                	ja     c001ec1c <Vm::faultHandler(regs*)+0x1f9>
c001ebe5:	3c ed                	cmp    al,0xed
c001ebe7:	0f 84 a3 05 00 00    	je     c001f190 <Vm::faultHandler(regs*)+0x76d>
c001ebed:	3c ee                	cmp    al,0xee
c001ebef:	0f 85 01 06 00 00    	jne    c001f1f6 <Vm::faultHandler(regs*)+0x7d3>
c001ebf5:	52                   	push   edx
c001ebf6:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001ebf9:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001ebfc:	68 e3 c2 02 c0       	push   0xc002c2e3
c001ec01:	e8 6b 3f ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001ec06:	59                   	pop    ecx
c001ec07:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001ec0b:	5b                   	pop    ebx
c001ec0c:	50                   	push   eax
c001ec0d:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ec11:	50                   	push   eax
c001ec12:	e8 2a fa ff ff       	call   c001e641 <Vm::outbv(unsigned short, unsigned char)>
c001ec17:	e9 a5 05 00 00       	jmp    c001f1c1 <Vm::faultHandler(regs*)+0x79e>
c001ec1c:	3c fa                	cmp    al,0xfa
c001ec1e:	0f 84 f7 01 00 00    	je     c001ee1b <Vm::faultHandler(regs*)+0x3f8>
c001ec24:	3c fb                	cmp    al,0xfb
c001ec26:	0f 84 0a 02 00 00    	je     c001ee36 <Vm::faultHandler(regs*)+0x413>
c001ec2c:	3c f3                	cmp    al,0xf3
c001ec2e:	0f 85 c2 05 00 00    	jne    c001f1f6 <Vm::faultHandler(regs*)+0x7d3>
c001ec34:	83 ec 0c             	sub    esp,0xc
c001ec37:	68 1b c2 02 c0       	push   0xc002c21b
c001ec3c:	e8 30 3f ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001ec41:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ec44:	83 c4 10             	add    esp,0x10
c001ec47:	e9 84 fe ff ff       	jmp    c001ead0 <Vm::faultHandler(regs*)+0xad>
c001ec4c:	83 ec 0c             	sub    esp,0xc
c001ec4f:	b3 02                	mov    bl,0x2
c001ec51:	68 f6 c1 02 c0       	push   0xc002c1f6
c001ec56:	e8 16 3f ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001ec5b:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ec5e:	83 c4 10             	add    esp,0x10
c001ec61:	e9 6a fe ff ff       	jmp    c001ead0 <Vm::faultHandler(regs*)+0xad>
c001ec66:	83 ec 0c             	sub    esp,0xc
c001ec69:	b3 03                	mov    bl,0x3
c001ec6b:	68 02 c2 02 c0       	push   0xc002c202
c001ec70:	e8 fc 3e ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001ec75:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ec78:	83 c4 10             	add    esp,0x10
c001ec7b:	e9 50 fe ff ff       	jmp    c001ead0 <Vm::faultHandler(regs*)+0xad>
c001ec80:	83 ec 0c             	sub    esp,0xc
c001ec83:	b3 04                	mov    bl,0x4
c001ec85:	68 06 c2 02 c0       	push   0xc002c206
c001ec8a:	e8 e2 3e ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001ec8f:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ec92:	83 c4 10             	add    esp,0x10
c001ec95:	e9 36 fe ff ff       	jmp    c001ead0 <Vm::faultHandler(regs*)+0xad>
c001ec9a:	83 ec 0c             	sub    esp,0xc
c001ec9d:	b3 05                	mov    bl,0x5
c001ec9f:	68 0a c2 02 c0       	push   0xc002c20a
c001eca4:	e8 c8 3e ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001eca9:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ecac:	83 c4 10             	add    esp,0x10
c001ecaf:	e9 1c fe ff ff       	jmp    c001ead0 <Vm::faultHandler(regs*)+0xad>
c001ecb4:	83 ec 0c             	sub    esp,0xc
c001ecb7:	68 0e c2 02 c0       	push   0xc002c20e
c001ecbc:	e8 b0 3e ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001ecc1:	83 c4 10             	add    esp,0x10
c001ecc4:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ecc7:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001eccc:	e9 ff fd ff ff       	jmp    c001ead0 <Vm::faultHandler(regs*)+0xad>
c001ecd1:	50                   	push   eax
c001ecd2:	50                   	push   eax
c001ecd3:	6a 01                	push   0x1
c001ecd5:	68 13 c2 02 c0       	push   0xc002c213
c001ecda:	e8 92 3e ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001ecdf:	83 c4 10             	add    esp,0x10
c001ece2:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001ece5:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001ecea:	e9 e1 fd ff ff       	jmp    c001ead0 <Vm::faultHandler(regs*)+0xad>
c001ecef:	83 ec 0c             	sub    esp,0xc
c001ecf2:	68 21 c2 02 c0       	push   0xc002c221
c001ecf7:	e8 75 3e ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001ecfc:	83 c4 10             	add    esp,0x10
c001ecff:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001ed02:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ed07:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001ed0a:	74 2f                	je     c001ed3b <Vm::faultHandler(regs*)+0x318>
c001ed0c:	83 ea 04             	sub    edx,0x4
c001ed0f:	25 ff 0d 00 00       	and    eax,0xdff
c001ed14:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed1a:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001ed1d:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001ed20:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ed26:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001ed2a:	0f 84 bf 04 00 00    	je     c001f1ef <Vm::faultHandler(regs*)+0x7cc>
c001ed30:	80 cc 02             	or     ah,0x2
c001ed33:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001ed36:	e9 b4 04 00 00       	jmp    c001f1ef <Vm::faultHandler(regs*)+0x7cc>
c001ed3b:	83 ea 02             	sub    edx,0x2
c001ed3e:	81 e2 ff ff 00 00    	and    edx,0xffff
c001ed44:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001ed47:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001ed4b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ed51:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001ed55:	74 05                	je     c001ed5c <Vm::faultHandler(regs*)+0x339>
c001ed57:	80 cc 02             	or     ah,0x2
c001ed5a:	eb 03                	jmp    c001ed5f <Vm::faultHandler(regs*)+0x33c>
c001ed5c:	80 e4 fd             	and    ah,0xfd
c001ed5f:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001ed63:	e9 87 04 00 00       	jmp    c001f1ef <Vm::faultHandler(regs*)+0x7cc>
c001ed68:	83 ec 0c             	sub    esp,0xc
c001ed6b:	68 28 c2 02 c0       	push   0xc002c228
c001ed70:	e8 fc 3d ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001ed75:	83 c4 10             	add    esp,0x10
c001ed78:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001ed7d:	74 28                	je     c001eda7 <Vm::faultHandler(regs*)+0x384>
c001ed7f:	8b 06                	mov    eax,DWORD PTR [esi]
c001ed81:	25 ff 0d 00 00       	and    eax,0xdff
c001ed86:	0d 00 02 02 00       	or     eax,0x20200
c001ed8b:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001ed8e:	8b 06                	mov    eax,DWORD PTR [esi]
c001ed90:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001ed96:	c1 e8 09             	shr    eax,0x9
c001ed99:	83 e0 01             	and    eax,0x1
c001ed9c:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001ed9f:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001eda2:	83 c0 04             	add    eax,0x4
c001eda5:	eb 24                	jmp    c001edcb <Vm::faultHandler(regs*)+0x3a8>
c001eda7:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001edaa:	0d 00 02 02 00       	or     eax,0x20200
c001edaf:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001edb2:	66 8b 06             	mov    ax,WORD PTR [esi]
c001edb5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001edbb:	66 c1 e8 09          	shr    ax,0x9
c001edbf:	83 e0 01             	and    eax,0x1
c001edc2:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001edc5:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001edc8:	83 c0 02             	add    eax,0x2
c001edcb:	25 ff ff 00 00       	and    eax,0xffff
c001edd0:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001edd3:	e9 17 04 00 00       	jmp    c001f1ef <Vm::faultHandler(regs*)+0x7cc>
c001edd8:	53                   	push   ebx
c001edd9:	53                   	push   ebx
c001edda:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001edde:	50                   	push   eax
c001eddf:	68 2e c2 02 c0       	push   0xc002c22e
c001ede4:	e8 88 3d ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001ede9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001eded:	83 c4 10             	add    esp,0x10
c001edf0:	3c ee                	cmp    al,0xee
c001edf2:	75 10                	jne    c001ee04 <Vm::faultHandler(regs*)+0x3e1>
c001edf4:	83 ec 0c             	sub    esp,0xc
c001edf7:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001edfa:	e8 fa f8 ff ff       	call   c001e6f9 <Vm::mainloop3(unsigned long)>
c001edff:	e9 c0 03 00 00       	jmp    c001f1c4 <Vm::faultHandler(regs*)+0x7a1>
c001ee04:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001ee08:	83 ec 0c             	sub    esp,0xc
c001ee0b:	53                   	push   ebx
c001ee0c:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001ee10:	53                   	push   ebx
c001ee11:	55                   	push   ebp
c001ee12:	50                   	push   eax
c001ee13:	57                   	push   edi
c001ee14:	e8 0c fb ff ff       	call   c001e925 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001ee19:	eb 36                	jmp    c001ee51 <Vm::faultHandler(regs*)+0x42e>
c001ee1b:	83 ec 0c             	sub    esp,0xc
c001ee1e:	68 38 c2 02 c0       	push   0xc002c238
c001ee23:	e8 49 3d ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001ee28:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee2d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001ee31:	e9 8b 03 00 00       	jmp    c001f1c1 <Vm::faultHandler(regs*)+0x79e>
c001ee36:	83 ec 0c             	sub    esp,0xc
c001ee39:	68 3d c2 02 c0       	push   0xc002c23d
c001ee3e:	e8 2e 3d ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001ee43:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee48:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001ee4c:	e9 70 03 00 00       	jmp    c001f1c1 <Vm::faultHandler(regs*)+0x79e>
c001ee51:	83 c4 20             	add    esp,0x20
c001ee54:	e9 99 03 00 00       	jmp    c001f1f2 <Vm::faultHandler(regs*)+0x7cf>
c001ee59:	83 ec 0c             	sub    esp,0xc
c001ee5c:	68 7b c2 02 c0       	push   0xc002c27b
c001ee61:	e8 0b 3d ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001ee66:	83 c4 10             	add    esp,0x10
c001ee69:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001ee6c:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ee71:	74 0d                	je     c001ee80 <Vm::faultHandler(regs*)+0x45d>
c001ee73:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001ee7a:	0f 87 9e 01 00 00    	ja     c001f01e <Vm::faultHandler(regs*)+0x5fb>
c001ee80:	83 ec 0c             	sub    esp,0xc
c001ee83:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001ee87:	0f b7 db             	movzx  ebx,bx
c001ee8a:	50                   	push   eax
c001ee8b:	e8 9e f7 ff ff       	call   c001e62e <Vm::inbv(unsigned short)>
c001ee90:	83 c4 0c             	add    esp,0xc
c001ee93:	0f b6 c0             	movzx  eax,al
c001ee96:	50                   	push   eax
c001ee97:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001ee9b:	50                   	push   eax
c001ee9c:	53                   	push   ebx
c001ee9d:	e8 41 fb ff ff       	call   c001e9e3 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001eea2:	83 c4 10             	add    esp,0x10
c001eea5:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001eea8:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001eeac:	74 03                	je     c001eeb1 <Vm::faultHandler(regs*)+0x48e>
c001eeae:	48                   	dec    eax
c001eeaf:	eb 01                	jmp    c001eeb2 <Vm::faultHandler(regs*)+0x48f>
c001eeb1:	40                   	inc    eax
c001eeb2:	0f b7 c0             	movzx  eax,ax
c001eeb5:	eb 7f                	jmp    c001ef36 <Vm::faultHandler(regs*)+0x513>
c001eeb7:	83 ec 0c             	sub    esp,0xc
c001eeba:	68 ad c2 02 c0       	push   0xc002c2ad
c001eebf:	e8 ad 3c ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001eec4:	83 c4 10             	add    esp,0x10
c001eec7:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001eeca:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001eecf:	74 0d                	je     c001eede <Vm::faultHandler(regs*)+0x4bb>
c001eed1:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001eed8:	0f 87 40 01 00 00    	ja     c001f01e <Vm::faultHandler(regs*)+0x5fb>
c001eede:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001eee1:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001eee5:	0f b7 db             	movzx  ebx,bx
c001eee8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001eeed:	74 20                	je     c001ef0f <Vm::faultHandler(regs*)+0x4ec>
c001eeef:	ed                   	in     eax,dx
c001eef0:	51                   	push   ecx
c001eef1:	50                   	push   eax
c001eef2:	56                   	push   esi
c001eef3:	53                   	push   ebx
c001eef4:	e8 15 fb ff ff       	call   c001ea0e <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001eef9:	83 c4 10             	add    esp,0x10
c001eefc:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001eeff:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001ef03:	74 05                	je     c001ef0a <Vm::faultHandler(regs*)+0x4e7>
c001ef05:	83 e8 04             	sub    eax,0x4
c001ef08:	eb 27                	jmp    c001ef31 <Vm::faultHandler(regs*)+0x50e>
c001ef0a:	83 c0 04             	add    eax,0x4
c001ef0d:	eb 22                	jmp    c001ef31 <Vm::faultHandler(regs*)+0x50e>
c001ef0f:	66 ed                	in     ax,dx
c001ef11:	0f b7 c0             	movzx  eax,ax
c001ef14:	52                   	push   edx
c001ef15:	50                   	push   eax
c001ef16:	56                   	push   esi
c001ef17:	53                   	push   ebx
c001ef18:	e8 db fa ff ff       	call   c001e9f8 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001ef1d:	83 c4 10             	add    esp,0x10
c001ef20:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001ef23:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001ef27:	74 05                	je     c001ef2e <Vm::faultHandler(regs*)+0x50b>
c001ef29:	83 e8 02             	sub    eax,0x2
c001ef2c:	eb 03                	jmp    c001ef31 <Vm::faultHandler(regs*)+0x50e>
c001ef2e:	83 c0 02             	add    eax,0x2
c001ef31:	25 ff ff 00 00       	and    eax,0xffff
c001ef36:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001ef39:	e9 b1 02 00 00       	jmp    c001f1ef <Vm::faultHandler(regs*)+0x7cc>
c001ef3e:	83 ec 0c             	sub    esp,0xc
c001ef41:	4b                   	dec    ebx
c001ef42:	68 b3 c2 02 c0       	push   0xc002c2b3
c001ef47:	e8 25 3c ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001ef4c:	83 c4 10             	add    esp,0x10
c001ef4f:	80 fb 05             	cmp    bl,0x5
c001ef52:	77 0a                	ja     c001ef5e <Vm::faultHandler(regs*)+0x53b>
c001ef54:	0f b6 db             	movzx  ebx,bl
c001ef57:	ff 24 9d 24 c3 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3cdc]
c001ef5e:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001ef62:	eb 1b                	jmp    c001ef7f <Vm::faultHandler(regs*)+0x55c>
c001ef64:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001ef68:	eb 15                	jmp    c001ef7f <Vm::faultHandler(regs*)+0x55c>
c001ef6a:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001ef6e:	eb 0f                	jmp    c001ef7f <Vm::faultHandler(regs*)+0x55c>
c001ef70:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001ef74:	eb 09                	jmp    c001ef7f <Vm::faultHandler(regs*)+0x55c>
c001ef76:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001ef79:	eb 04                	jmp    c001ef7f <Vm::faultHandler(regs*)+0x55c>
c001ef7b:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001ef7f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001ef84:	74 0d                	je     c001ef93 <Vm::faultHandler(regs*)+0x570>
c001ef86:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001ef8d:	0f 87 8b 00 00 00    	ja     c001f01e <Vm::faultHandler(regs*)+0x5fb>
c001ef93:	53                   	push   ebx
c001ef94:	53                   	push   ebx
c001ef95:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001ef99:	52                   	push   edx
c001ef9a:	50                   	push   eax
c001ef9b:	e8 0f fa ff ff       	call   c001e9af <Vm::readByteFromReal(unsigned short, unsigned short)>
c001efa0:	5e                   	pop    esi
c001efa1:	0f b6 c0             	movzx  eax,al
c001efa4:	5d                   	pop    ebp
c001efa5:	50                   	push   eax
c001efa6:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001efaa:	50                   	push   eax
c001efab:	e8 91 f6 ff ff       	call   c001e641 <Vm::outbv(unsigned short, unsigned char)>
c001efb0:	83 c4 10             	add    esp,0x10
c001efb3:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001efb6:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001efba:	74 03                	je     c001efbf <Vm::faultHandler(regs*)+0x59c>
c001efbc:	48                   	dec    eax
c001efbd:	eb 01                	jmp    c001efc0 <Vm::faultHandler(regs*)+0x59d>
c001efbf:	40                   	inc    eax
c001efc0:	0f b7 c0             	movzx  eax,ax
c001efc3:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001efc6:	e9 24 02 00 00       	jmp    c001f1ef <Vm::faultHandler(regs*)+0x7cc>
c001efcb:	83 ec 0c             	sub    esp,0xc
c001efce:	4b                   	dec    ebx
c001efcf:	68 b3 c2 02 c0       	push   0xc002c2b3
c001efd4:	e8 98 3b ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001efd9:	83 c4 10             	add    esp,0x10
c001efdc:	80 fb 05             	cmp    bl,0x5
c001efdf:	77 0a                	ja     c001efeb <Vm::faultHandler(regs*)+0x5c8>
c001efe1:	0f b6 db             	movzx  ebx,bl
c001efe4:	ff 24 9d 3c c3 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd3cc4]
c001efeb:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001efef:	eb 1b                	jmp    c001f00c <Vm::faultHandler(regs*)+0x5e9>
c001eff1:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001eff5:	eb 15                	jmp    c001f00c <Vm::faultHandler(regs*)+0x5e9>
c001eff7:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001effb:	eb 0f                	jmp    c001f00c <Vm::faultHandler(regs*)+0x5e9>
c001effd:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f001:	eb 09                	jmp    c001f00c <Vm::faultHandler(regs*)+0x5e9>
c001f003:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f006:	eb 04                	jmp    c001f00c <Vm::faultHandler(regs*)+0x5e9>
c001f008:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f00c:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001f00f:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f014:	74 39                	je     c001f04f <Vm::faultHandler(regs*)+0x62c>
c001f016:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001f01c:	76 31                	jbe    c001f04f <Vm::faultHandler(regs*)+0x62c>
c001f01e:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f022:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f026:	51                   	push   ecx
c001f027:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f02b:	51                   	push   ecx
c001f02c:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f030:	51                   	push   ecx
c001f031:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f035:	51                   	push   ecx
c001f036:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f03a:	52                   	push   edx
c001f03b:	50                   	push   eax
c001f03c:	50                   	push   eax
c001f03d:	68 80 c2 02 c0       	push   0xc002c280
c001f042:	e8 2a 3b ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001f047:	83 c4 20             	add    esp,0x20
c001f04a:	e9 fb 01 00 00       	jmp    c001f24a <Vm::faultHandler(regs*)+0x827>
c001f04f:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001f052:	0f b7 d3             	movzx  edx,bx
c001f055:	81 e6 00 04 00 00    	and    esi,0x400
c001f05b:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001f05e:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f063:	74 1d                	je     c001f082 <Vm::faultHandler(regs*)+0x65f>
c001f065:	51                   	push   ecx
c001f066:	51                   	push   ecx
c001f067:	52                   	push   edx
c001f068:	50                   	push   eax
c001f069:	e8 64 f9 ff ff       	call   c001e9d2 <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001f06e:	83 c4 10             	add    esp,0x10
c001f071:	89 ea                	mov    edx,ebp
c001f073:	ef                   	out    dx,eax
c001f074:	85 f6                	test   esi,esi
c001f076:	74 05                	je     c001f07d <Vm::faultHandler(regs*)+0x65a>
c001f078:	83 eb 04             	sub    ebx,0x4
c001f07b:	eb 21                	jmp    c001f09e <Vm::faultHandler(regs*)+0x67b>
c001f07d:	83 c3 04             	add    ebx,0x4
c001f080:	eb 1c                	jmp    c001f09e <Vm::faultHandler(regs*)+0x67b>
c001f082:	51                   	push   ecx
c001f083:	51                   	push   ecx
c001f084:	52                   	push   edx
c001f085:	50                   	push   eax
c001f086:	e8 35 f9 ff ff       	call   c001e9c0 <Vm::readWordFromReal(unsigned short, unsigned short)>
c001f08b:	83 c4 10             	add    esp,0x10
c001f08e:	89 ea                	mov    edx,ebp
c001f090:	66 ef                	out    dx,ax
c001f092:	85 f6                	test   esi,esi
c001f094:	74 05                	je     c001f09b <Vm::faultHandler(regs*)+0x678>
c001f096:	83 eb 02             	sub    ebx,0x2
c001f099:	eb 03                	jmp    c001f09e <Vm::faultHandler(regs*)+0x67b>
c001f09b:	83 c3 02             	add    ebx,0x2
c001f09e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001f0a4:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001f0a7:	e9 43 01 00 00       	jmp    c001f1ef <Vm::faultHandler(regs*)+0x7cc>
c001f0ac:	53                   	push   ebx
c001f0ad:	53                   	push   ebx
c001f0ae:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f0b2:	50                   	push   eax
c001f0b3:	68 b9 c2 02 c0       	push   0xc002c2b9
c001f0b8:	e8 b4 3a ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001f0bd:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f0c4:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f0c8:	89 04 24             	mov    DWORD PTR [esp],eax
c001f0cb:	e8 5e f5 ff ff       	call   c001e62e <Vm::inbv(unsigned short)>
c001f0d0:	0f b6 c0             	movzx  eax,al
c001f0d3:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f0d6:	eb 5e                	jmp    c001f136 <Vm::faultHandler(regs*)+0x713>
c001f0d8:	51                   	push   ecx
c001f0d9:	51                   	push   ecx
c001f0da:	53                   	push   ebx
c001f0db:	68 bf c2 02 c0       	push   0xc002c2bf
c001f0e0:	e8 8c 3a ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001f0e5:	83 c4 10             	add    esp,0x10
c001f0e8:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f0ed:	74 07                	je     c001f0f6 <Vm::faultHandler(regs*)+0x6d3>
c001f0ef:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f0f3:	ed                   	in     eax,dx
c001f0f4:	eb 14                	jmp    c001f10a <Vm::faultHandler(regs*)+0x6e7>
c001f0f6:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001f0f9:	66 31 db             	xor    bx,bx
c001f0fc:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001f0ff:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f103:	66 ed                	in     ax,dx
c001f105:	0f b7 c0             	movzx  eax,ax
c001f108:	09 d8                	or     eax,ebx
c001f10a:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f10d:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f111:	e9 dc 00 00 00       	jmp    c001f1f2 <Vm::faultHandler(regs*)+0x7cf>
c001f116:	50                   	push   eax
c001f117:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f11a:	53                   	push   ebx
c001f11b:	68 c5 c2 02 c0       	push   0xc002c2c5
c001f120:	e8 4c 3a ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001f125:	58                   	pop    eax
c001f126:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f12a:	5a                   	pop    edx
c001f12b:	50                   	push   eax
c001f12c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f130:	50                   	push   eax
c001f131:	e8 0b f5 ff ff       	call   c001e641 <Vm::outbv(unsigned short, unsigned char)>
c001f136:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001f13a:	e9 85 00 00 00       	jmp    c001f1c4 <Vm::faultHandler(regs*)+0x7a1>
c001f13f:	50                   	push   eax
c001f140:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f143:	53                   	push   ebx
c001f144:	68 ce c2 02 c0       	push   0xc002c2ce
c001f149:	e8 23 3a ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001f14e:	83 c4 10             	add    esp,0x10
c001f151:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f155:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f15a:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f15d:	74 03                	je     c001f162 <Vm::faultHandler(regs*)+0x73f>
c001f15f:	ef                   	out    dx,eax
c001f160:	eb ab                	jmp    c001f10d <Vm::faultHandler(regs*)+0x6ea>
c001f162:	66 ef                	out    dx,ax
c001f164:	eb a7                	jmp    c001f10d <Vm::faultHandler(regs*)+0x6ea>
c001f166:	55                   	push   ebp
c001f167:	55                   	push   ebp
c001f168:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f16b:	68 d7 c2 02 c0       	push   0xc002c2d7
c001f170:	e8 fc 39 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001f175:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001f17c:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f180:	89 04 24             	mov    DWORD PTR [esp],eax
c001f183:	e8 a6 f4 ff ff       	call   c001e62e <Vm::inbv(unsigned short)>
c001f188:	0f b6 c0             	movzx  eax,al
c001f18b:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001f18e:	eb 31                	jmp    c001f1c1 <Vm::faultHandler(regs*)+0x79e>
c001f190:	56                   	push   esi
c001f191:	56                   	push   esi
c001f192:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f195:	68 dd c2 02 c0       	push   0xc002c2dd
c001f19a:	e8 d2 39 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001f19f:	83 c4 10             	add    esp,0x10
c001f1a2:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f1a5:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1aa:	74 03                	je     c001f1af <Vm::faultHandler(regs*)+0x78c>
c001f1ac:	ed                   	in     eax,dx
c001f1ad:	eb 0d                	jmp    c001f1bc <Vm::faultHandler(regs*)+0x799>
c001f1af:	66 ed                	in     ax,dx
c001f1b1:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001f1b4:	0f b7 c0             	movzx  eax,ax
c001f1b7:	66 31 d2             	xor    dx,dx
c001f1ba:	09 d0                	or     eax,edx
c001f1bc:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001f1bf:	eb 2e                	jmp    c001f1ef <Vm::faultHandler(regs*)+0x7cc>
c001f1c1:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f1c4:	83 c4 10             	add    esp,0x10
c001f1c7:	eb 29                	jmp    c001f1f2 <Vm::faultHandler(regs*)+0x7cf>
c001f1c9:	50                   	push   eax
c001f1ca:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f1cd:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f1d0:	68 ec c2 02 c0       	push   0xc002c2ec
c001f1d5:	e8 97 39 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001f1da:	83 c4 10             	add    esp,0x10
c001f1dd:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f1e0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f1e5:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001f1e8:	74 03                	je     c001f1ed <Vm::faultHandler(regs*)+0x7ca>
c001f1ea:	ef                   	out    dx,eax
c001f1eb:	eb 02                	jmp    c001f1ef <Vm::faultHandler(regs*)+0x7cc>
c001f1ed:	66 ef                	out    dx,ax
c001f1ef:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f1f2:	b0 01                	mov    al,0x1
c001f1f4:	eb 56                	jmp    c001f24c <Vm::faultHandler(regs*)+0x829>
c001f1f6:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001f1fa:	51                   	push   ecx
c001f1fb:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001f1ff:	51                   	push   ecx
c001f200:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001f204:	51                   	push   ecx
c001f205:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001f209:	51                   	push   ecx
c001f20a:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001f20e:	52                   	push   edx
c001f20f:	50                   	push   eax
c001f210:	50                   	push   eax
c001f211:	68 f5 c2 02 c0       	push   0xc002c2f5
c001f216:	e8 56 39 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c001f21b:	83 c4 20             	add    esp,0x20
c001f21e:	83 ec 0c             	sub    esp,0xc
c001f221:	6a 60                	push   0x60
c001f223:	e8 06 f4 ff ff       	call   c001e62e <Vm::inbv(unsigned short)>
c001f228:	83 c4 10             	add    esp,0x10
c001f22b:	3c 1c                	cmp    al,0x1c
c001f22d:	74 04                	je     c001f233 <Vm::faultHandler(regs*)+0x810>
c001f22f:	3c 5a                	cmp    al,0x5a
c001f231:	75 eb                	jne    c001f21e <Vm::faultHandler(regs*)+0x7fb>
c001f233:	3c 1c                	cmp    al,0x1c
c001f235:	74 04                	je     c001f23b <Vm::faultHandler(regs*)+0x818>
c001f237:	3c 5a                	cmp    al,0x5a
c001f239:	75 0f                	jne    c001f24a <Vm::faultHandler(regs*)+0x827>
c001f23b:	83 ec 0c             	sub    esp,0xc
c001f23e:	6a 60                	push   0x60
c001f240:	e8 e9 f3 ff ff       	call   c001e62e <Vm::inbv(unsigned short)>
c001f245:	83 c4 10             	add    esp,0x10
c001f248:	eb e9                	jmp    c001f233 <Vm::faultHandler(regs*)+0x810>
c001f24a:	31 c0                	xor    eax,eax
c001f24c:	83 c4 1c             	add    esp,0x1c
c001f24f:	5b                   	pop    ebx
c001f250:	5e                   	pop    esi
c001f251:	5f                   	pop    edi
c001f252:	5d                   	pop    ebp
c001f253:	c3                   	ret    

c001f254 <Vm::fpuInternalTo32(unsigned long long)>:
c001f254:	57                   	push   edi
c001f255:	56                   	push   esi
c001f256:	53                   	push   ebx
c001f257:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f25b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f25f:	89 d6                	mov    esi,edx
c001f261:	89 d7                	mov    edi,edx
c001f263:	89 c1                	mov    ecx,eax
c001f265:	c1 ef 14             	shr    edi,0x14
c001f268:	89 d3                	mov    ebx,edx
c001f26a:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001f270:	31 d2                	xor    edx,edx
c001f272:	89 f8                	mov    eax,edi
c001f274:	81 e6 00 00 00 80    	and    esi,0x80000000
c001f27a:	bf ff 00 00 00       	mov    edi,0xff
c001f27f:	05 80 fc ff ff       	add    eax,0xfffffc80
c001f284:	83 d2 ff             	adc    edx,0xffffffff
c001f287:	39 c7                	cmp    edi,eax
c001f289:	bf 00 00 00 00       	mov    edi,0x0
c001f28e:	19 d7                	sbb    edi,edx
c001f290:	72 15                	jb     c001f2a7 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001f292:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001f296:	c1 e0 17             	shl    eax,0x17
c001f299:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001f29f:	09 f1                	or     ecx,esi
c001f2a1:	09 c1                	or     ecx,eax
c001f2a3:	89 cf                	mov    edi,ecx
c001f2a5:	eb 02                	jmp    c001f2a9 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001f2a7:	31 ff                	xor    edi,edi
c001f2a9:	89 f8                	mov    eax,edi
c001f2ab:	5b                   	pop    ebx
c001f2ac:	5e                   	pop    esi
c001f2ad:	5f                   	pop    edi
c001f2ae:	c3                   	ret    

c001f2af <Vm::fpuInternalTo64(unsigned long long)>:
c001f2af:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f2b3:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f2b7:	c3                   	ret    

c001f2b8 <Vm::fpu32ToInternal(unsigned int)>:
c001f2b8:	57                   	push   edi
c001f2b9:	31 ff                	xor    edi,edi
c001f2bb:	56                   	push   esi
c001f2bc:	53                   	push   ebx
c001f2bd:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f2c1:	89 cb                	mov    ebx,ecx
c001f2c3:	89 ce                	mov    esi,ecx
c001f2c5:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001f2cb:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001f2d1:	c1 e9 17             	shr    ecx,0x17
c001f2d4:	89 f0                	mov    eax,esi
c001f2d6:	0f b6 d1             	movzx  edx,cl
c001f2d9:	81 c2 80 03 00 00    	add    edx,0x380
c001f2df:	89 d1                	mov    ecx,edx
c001f2e1:	89 fa                	mov    edx,edi
c001f2e3:	c1 e1 14             	shl    ecx,0x14
c001f2e6:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001f2ea:	c1 e0 1d             	shl    eax,0x1d
c001f2ed:	89 d7                	mov    edi,edx
c001f2ef:	89 c6                	mov    esi,eax
c001f2f1:	89 ca                	mov    edx,ecx
c001f2f3:	89 f0                	mov    eax,esi
c001f2f5:	09 fa                	or     edx,edi
c001f2f7:	09 da                	or     edx,ebx
c001f2f9:	5b                   	pop    ebx
c001f2fa:	5e                   	pop    esi
c001f2fb:	5f                   	pop    edi
c001f2fc:	c3                   	ret    

c001f2fd <Vm::fpu64ToInternal(unsigned long long)>:
c001f2fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f301:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f305:	c3                   	ret    

c001f306 <Vm::fpuFloatToLong(unsigned long long)>:
c001f306:	57                   	push   edi
c001f307:	31 c0                	xor    eax,eax
c001f309:	56                   	push   esi
c001f30a:	31 d2                	xor    edx,edx
c001f30c:	53                   	push   ebx
c001f30d:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f311:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f315:	89 d9                	mov    ecx,ebx
c001f317:	c1 e9 14             	shr    ecx,0x14
c001f31a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001f320:	89 cf                	mov    edi,ecx
c001f322:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001f328:	78 33                	js     c001f35d <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f32a:	89 d9                	mov    ecx,ebx
c001f32c:	89 f0                	mov    eax,esi
c001f32e:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f334:	81 c9 00 00 10 00    	or     ecx,0x100000
c001f33a:	89 ca                	mov    edx,ecx
c001f33c:	b9 34 00 00 00       	mov    ecx,0x34
c001f341:	29 f9                	sub    ecx,edi
c001f343:	0f ad d0             	shrd   eax,edx,cl
c001f346:	d3 fa                	sar    edx,cl
c001f348:	f6 c1 20             	test   cl,0x20
c001f34b:	74 05                	je     c001f352 <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001f34d:	89 d0                	mov    eax,edx
c001f34f:	c1 fa 1f             	sar    edx,0x1f
c001f352:	85 db                	test   ebx,ebx
c001f354:	79 07                	jns    c001f35d <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001f356:	f7 d8                	neg    eax
c001f358:	83 d2 00             	adc    edx,0x0
c001f35b:	f7 da                	neg    edx
c001f35d:	5b                   	pop    ebx
c001f35e:	5e                   	pop    esi
c001f35f:	5f                   	pop    edi
c001f360:	c3                   	ret    

c001f361 <Vm::fpuULongToFloat(unsigned long long)>:
c001f361:	57                   	push   edi
c001f362:	31 c9                	xor    ecx,ecx
c001f364:	56                   	push   esi
c001f365:	53                   	push   ebx
c001f366:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001f36a:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001f36e:	0f ba e7 14          	bt     edi,0x14
c001f372:	72 07                	jb     c001f37b <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001f374:	01 f6                	add    esi,esi
c001f376:	11 ff                	adc    edi,edi
c001f378:	41                   	inc    ecx
c001f379:	eb f3                	jmp    c001f36e <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001f37b:	89 fa                	mov    edx,edi
c001f37d:	89 f0                	mov    eax,esi
c001f37f:	bb 33 04 00 00       	mov    ebx,0x433
c001f384:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001f38a:	29 cb                	sub    ebx,ecx
c001f38c:	89 d9                	mov    ecx,ebx
c001f38e:	5b                   	pop    ebx
c001f38f:	c1 e1 14             	shl    ecx,0x14
c001f392:	5e                   	pop    esi
c001f393:	09 ca                	or     edx,ecx
c001f395:	5f                   	pop    edi
c001f396:	c3                   	ret    

c001f397 <Vm::fpuLongToFloat(long long)>:
c001f397:	56                   	push   esi
c001f398:	31 c0                	xor    eax,eax
c001f39a:	53                   	push   ebx
c001f39b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f39f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001f3a3:	39 c8                	cmp    eax,ecx
c001f3a5:	19 d8                	sbb    eax,ebx
c001f3a7:	7d 04                	jge    c001f3ad <Vm::fpuLongToFloat(long long)+0x16>
c001f3a9:	31 f6                	xor    esi,esi
c001f3ab:	eb 0c                	jmp    c001f3b9 <Vm::fpuLongToFloat(long long)+0x22>
c001f3ad:	f7 d9                	neg    ecx
c001f3af:	be 01 00 00 00       	mov    esi,0x1
c001f3b4:	83 d3 00             	adc    ebx,0x0
c001f3b7:	f7 db                	neg    ebx
c001f3b9:	31 c0                	xor    eax,eax
c001f3bb:	0f ba e3 14          	bt     ebx,0x14
c001f3bf:	72 07                	jb     c001f3c8 <Vm::fpuLongToFloat(long long)+0x31>
c001f3c1:	01 c9                	add    ecx,ecx
c001f3c3:	11 db                	adc    ebx,ebx
c001f3c5:	40                   	inc    eax
c001f3c6:	eb f3                	jmp    c001f3bb <Vm::fpuLongToFloat(long long)+0x24>
c001f3c8:	ba 33 04 00 00       	mov    edx,0x433
c001f3cd:	29 c2                	sub    edx,eax
c001f3cf:	89 c8                	mov    eax,ecx
c001f3d1:	c1 e2 14             	shl    edx,0x14
c001f3d4:	89 d9                	mov    ecx,ebx
c001f3d6:	89 f3                	mov    ebx,esi
c001f3d8:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001f3de:	09 ca                	or     edx,ecx
c001f3e0:	84 db                	test   bl,bl
c001f3e2:	74 06                	je     c001f3ea <Vm::fpuLongToFloat(long long)+0x53>
c001f3e4:	81 ca 00 00 00 80    	or     edx,0x80000000
c001f3ea:	5b                   	pop    ebx
c001f3eb:	5e                   	pop    esi
c001f3ec:	c3                   	ret    

c001f3ed <Vm::fpuGet0()>:
c001f3ed:	31 c0                	xor    eax,eax
c001f3ef:	31 d2                	xor    edx,edx
c001f3f1:	c3                   	ret    

c001f3f2 <Vm::fpuGet1()>:
c001f3f2:	b8 01 00 00 00       	mov    eax,0x1
c001f3f7:	31 d2                	xor    edx,edx
c001f3f9:	c3                   	ret    

c001f3fa <Vm::fpuGetPi()>:
c001f3fa:	b8 03 00 00 00       	mov    eax,0x3
c001f3ff:	31 d2                	xor    edx,edx
c001f401:	c3                   	ret    

c001f402 <Vm::fpuGetLog2E()>:
c001f402:	83 ec 18             	sub    esp,0x18
c001f405:	68 54 c3 02 c0       	push   0xc002c354
c001f40a:	e8 de ad ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001f40f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f414:	31 d2                	xor    edx,edx
c001f416:	83 c4 1c             	add    esp,0x1c
c001f419:	c3                   	ret    

c001f41a <Vm::fpuGetLogE2()>:
c001f41a:	83 ec 18             	sub    esp,0x18
c001f41d:	68 60 c3 02 c0       	push   0xc002c360
c001f422:	e8 c6 ad ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001f427:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f42c:	31 d2                	xor    edx,edx
c001f42e:	83 c4 1c             	add    esp,0x1c
c001f431:	c3                   	ret    

c001f432 <Vm::fpuGetLog210()>:
c001f432:	83 ec 18             	sub    esp,0x18
c001f435:	68 6c c3 02 c0       	push   0xc002c36c
c001f43a:	e8 ae ad ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001f43f:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f444:	31 d2                	xor    edx,edx
c001f446:	83 c4 1c             	add    esp,0x1c
c001f449:	c3                   	ret    

c001f44a <Vm::fpuGetLog102()>:
c001f44a:	83 ec 18             	sub    esp,0x18
c001f44d:	68 79 c3 02 c0       	push   0xc002c379
c001f452:	e8 96 ad ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001f457:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001f45c:	31 d2                	xor    edx,edx
c001f45e:	83 c4 1c             	add    esp,0x1c
c001f461:	c3                   	ret    

c001f462 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001f462:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f466:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001f46a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f46e:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001f472:	0f 92 c0             	setb   al
c001f475:	c3                   	ret    

c001f476 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001f476:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f47a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f47e:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001f482:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001f486:	09 c2                	or     edx,eax
c001f488:	0f 94 c0             	sete   al
c001f48b:	c3                   	ret    

c001f48c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001f48c:	57                   	push   edi
c001f48d:	56                   	push   esi
c001f48e:	53                   	push   ebx
c001f48f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f493:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f497:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001f49b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001f49f:	57                   	push   edi
c001f4a0:	56                   	push   esi
c001f4a1:	53                   	push   ebx
c001f4a2:	51                   	push   ecx
c001f4a3:	e8 ce ff ff ff       	call   c001f476 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001f4a8:	83 c4 10             	add    esp,0x10
c001f4ab:	88 c2                	mov    dl,al
c001f4ad:	31 c0                	xor    eax,eax
c001f4af:	84 d2                	test   dl,dl
c001f4b1:	75 0c                	jne    c001f4bf <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001f4b3:	57                   	push   edi
c001f4b4:	56                   	push   esi
c001f4b5:	53                   	push   ebx
c001f4b6:	51                   	push   ecx
c001f4b7:	e8 a6 ff ff ff       	call   c001f462 <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001f4bc:	83 c4 10             	add    esp,0x10
c001f4bf:	83 e0 01             	and    eax,0x1
c001f4c2:	5b                   	pop    ebx
c001f4c3:	88 c1                	mov    cl,al
c001f4c5:	83 e2 01             	and    edx,0x1
c001f4c8:	a0 e1 15 03 c0       	mov    al,ds:0xc00315e1
c001f4cd:	c1 e2 06             	shl    edx,0x6
c001f4d0:	83 e0 ba             	and    eax,0xffffffba
c001f4d3:	5e                   	pop    esi
c001f4d4:	09 c8                	or     eax,ecx
c001f4d6:	5f                   	pop    edi
c001f4d7:	09 d0                	or     eax,edx
c001f4d9:	a2 e1 15 03 c0       	mov    ds:0xc00315e1,al
c001f4de:	c3                   	ret    

c001f4df <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001f4df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f4e3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f4e7:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001f4eb:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001f4ef:	c3                   	ret    

c001f4f0 <Vm::fpuAbs(unsigned long long)>:
c001f4f0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4f4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f4f8:	c3                   	ret    

c001f4f9 <Vm::fpuChs(unsigned long long)>:
c001f4f9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f4fd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001f501:	f7 d8                	neg    eax
c001f503:	83 d2 00             	adc    edx,0x0
c001f506:	f7 da                	neg    edx
c001f508:	c3                   	ret    

c001f509 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001f509:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001f50d:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001f512:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001f516:	eb c7                	jmp    c001f4df <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001f518 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001f518:	53                   	push   ebx
c001f519:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f51d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f521:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f525:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f529:	0f af ca             	imul   ecx,edx
c001f52c:	0f af d8             	imul   ebx,eax
c001f52f:	f7 e2                	mul    edx
c001f531:	01 d9                	add    ecx,ebx
c001f533:	5b                   	pop    ebx
c001f534:	01 ca                	add    edx,ecx
c001f536:	c3                   	ret    

c001f537 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001f537:	83 ec 0c             	sub    esp,0xc
c001f53a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f53e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f542:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f546:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f54a:	e8 9d 70 00 00       	call   c00265ec <__udivdi3>
c001f54f:	83 c4 1c             	add    esp,0x1c
c001f552:	c3                   	ret    

c001f553 <Vm::fpuSquare(unsigned long long)>:
c001f553:	50                   	push   eax
c001f554:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f558:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f55c:	52                   	push   edx
c001f55d:	50                   	push   eax
c001f55e:	52                   	push   edx
c001f55f:	50                   	push   eax
c001f560:	e8 b3 ff ff ff       	call   c001f518 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f565:	83 c4 14             	add    esp,0x14
c001f568:	c3                   	ret    

c001f569 <Vm::fpuGetReg(int)>:
c001f569:	83 ec 0c             	sub    esp,0xc
c001f56c:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f571:	76 10                	jbe    c001f583 <Vm::fpuGetReg(int)+0x1a>
c001f573:	83 ec 0c             	sub    esp,0xc
c001f576:	68 86 c3 02 c0       	push   0xc002c386
c001f57b:	e8 6d ac ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001f580:	83 c4 10             	add    esp,0x10
c001f583:	a0 e1 15 03 c0       	mov    al,ds:0xc00315e1
c001f588:	b9 08 00 00 00       	mov    ecx,0x8
c001f58d:	c0 e8 03             	shr    al,0x3
c001f590:	83 e0 07             	and    eax,0x7
c001f593:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f597:	99                   	cdq    
c001f598:	f7 f9                	idiv   ecx
c001f59a:	8b 04 d5 e4 15 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcea1c]
c001f5a1:	8b 14 d5 e8 15 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcea18]
c001f5a8:	83 c4 0c             	add    esp,0xc
c001f5ab:	c3                   	ret    

c001f5ac <Vm::fpuSetReg(int, unsigned long long)>:
c001f5ac:	57                   	push   edi
c001f5ad:	56                   	push   esi
c001f5ae:	52                   	push   edx
c001f5af:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001f5b3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f5b7:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001f5bc:	76 10                	jbe    c001f5ce <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001f5be:	83 ec 0c             	sub    esp,0xc
c001f5c1:	68 99 c3 02 c0       	push   0xc002c399
c001f5c6:	e8 22 ac ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c001f5cb:	83 c4 10             	add    esp,0x10
c001f5ce:	a0 e1 15 03 c0       	mov    al,ds:0xc00315e1
c001f5d3:	b9 08 00 00 00       	mov    ecx,0x8
c001f5d8:	c0 e8 03             	shr    al,0x3
c001f5db:	83 e0 07             	and    eax,0x7
c001f5de:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001f5e2:	99                   	cdq    
c001f5e3:	f7 f9                	idiv   ecx
c001f5e5:	89 34 d5 e4 15 03 c0 	mov    DWORD PTR [edx*8-0x3ffcea1c],esi
c001f5ec:	89 3c d5 e8 15 03 c0 	mov    DWORD PTR [edx*8-0x3ffcea18],edi
c001f5f3:	58                   	pop    eax
c001f5f4:	5e                   	pop    esi
c001f5f5:	5f                   	pop    edi
c001f5f6:	c3                   	ret    

c001f5f7 <Vm::fpuPush(unsigned long long)>:
c001f5f7:	a0 e1 15 03 c0       	mov    al,ds:0xc00315e1
c001f5fc:	c0 e8 03             	shr    al,0x3
c001f5ff:	83 e0 07             	and    eax,0x7
c001f602:	83 c0 07             	add    eax,0x7
c001f605:	88 c2                	mov    dl,al
c001f607:	83 e0 07             	and    eax,0x7
c001f60a:	83 e2 07             	and    edx,0x7
c001f60d:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c001f614:	8a 15 e1 15 03 c0    	mov    dl,BYTE PTR ds:0xc00315e1
c001f61a:	83 e2 c7             	and    edx,0xffffffc7
c001f61d:	09 ca                	or     edx,ecx
c001f61f:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f623:	88 15 e1 15 03 c0    	mov    BYTE PTR ds:0xc00315e1,dl
c001f629:	89 0c c5 e8 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffcea18],ecx
c001f630:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f634:	89 14 c5 e4 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffcea1c],edx
c001f63b:	a1 24 16 03 c0       	mov    eax,ds:0xc0031624
c001f640:	83 f8 08             	cmp    eax,0x8
c001f643:	75 08                	jne    c001f64d <Vm::fpuPush(unsigned long long)+0x56>
c001f645:	80 0d e0 15 03 c0 40 	or     BYTE PTR ds:0xc00315e0,0x40
c001f64c:	c3                   	ret    
c001f64d:	40                   	inc    eax
c001f64e:	a3 24 16 03 c0       	mov    ds:0xc0031624,eax
c001f653:	c3                   	ret    

c001f654 <Vm::fpuPop()>:
c001f654:	8a 0d e1 15 03 c0    	mov    cl,BYTE PTR ds:0xc00315e1
c001f65a:	53                   	push   ebx
c001f65b:	c0 e9 03             	shr    cl,0x3
c001f65e:	8a 1d e1 15 03 c0    	mov    bl,BYTE PTR ds:0xc00315e1
c001f664:	83 e1 07             	and    ecx,0x7
c001f667:	83 e3 c7             	and    ebx,0xffffffc7
c001f66a:	8b 04 cd e4 15 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcea1c]
c001f671:	8b 14 cd e8 15 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcea18]
c001f678:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c001f67f:	83 e1 38             	and    ecx,0x38
c001f682:	09 d9                	or     ecx,ebx
c001f684:	88 0d e1 15 03 c0    	mov    BYTE PTR ds:0xc00315e1,cl
c001f68a:	8b 0d 24 16 03 c0    	mov    ecx,DWORD PTR ds:0xc0031624
c001f690:	85 c9                	test   ecx,ecx
c001f692:	74 09                	je     c001f69d <Vm::fpuPop()+0x49>
c001f694:	49                   	dec    ecx
c001f695:	89 0d 24 16 03 c0    	mov    DWORD PTR ds:0xc0031624,ecx
c001f69b:	eb 07                	jmp    c001f6a4 <Vm::fpuPop()+0x50>
c001f69d:	80 0d e0 15 03 c0 40 	or     BYTE PTR ds:0xc00315e0,0x40
c001f6a4:	5b                   	pop    ebx
c001f6a5:	c3                   	ret    

c001f6a6 <Vm::x87Handler(regs*)>:
c001f6a6:	55                   	push   ebp
c001f6a7:	57                   	push   edi
c001f6a8:	56                   	push   esi
c001f6a9:	53                   	push   ebx
c001f6aa:	83 ec 1c             	sub    esp,0x1c
c001f6ad:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001f6b1:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c001f6b6:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c001f6b9:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c001f6c1:	8d 44 24 0b          	lea    eax,[esp+0xb]
c001f6c5:	50                   	push   eax
c001f6c6:	8d 44 24 0e          	lea    eax,[esp+0xe]
c001f6ca:	50                   	push   eax
c001f6cb:	8d 44 24 14          	lea    eax,[esp+0x14]
c001f6cf:	50                   	push   eax
c001f6d0:	53                   	push   ebx
c001f6d1:	e8 de a1 ff ff       	call   c00198b4 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001f6d6:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c001f6d9:	83 c4 10             	add    esp,0x10
c001f6dc:	89 c6                	mov    esi,eax
c001f6de:	80 fa d9             	cmp    dl,0xd9
c001f6e1:	0f 85 52 01 00 00    	jne    c001f839 <Vm::x87Handler(regs*)+0x193>
c001f6e7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f6eb:	8d 50 20             	lea    edx,[eax+0x20]
c001f6ee:	80 fa 0e             	cmp    dl,0xe
c001f6f1:	0f 87 86 00 00 00    	ja     c001f77d <Vm::x87Handler(regs*)+0xd7>
c001f6f7:	0f b6 d2             	movzx  edx,dl
c001f6fa:	ff 24 95 ac c3 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd3c54]
c001f701:	e8 e7 fc ff ff       	call   c001f3ed <Vm::fpuGet0()>
c001f706:	eb 05                	jmp    c001f70d <Vm::x87Handler(regs*)+0x67>
c001f708:	e8 e5 fc ff ff       	call   c001f3f2 <Vm::fpuGet1()>
c001f70d:	57                   	push   edi
c001f70e:	57                   	push   edi
c001f70f:	52                   	push   edx
c001f710:	50                   	push   eax
c001f711:	e8 e1 fe ff ff       	call   c001f5f7 <Vm::fpuPush(unsigned long long)>
c001f716:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001f71a:	83 c4 10             	add    esp,0x10
c001f71d:	b0 01                	mov    al,0x1
c001f71f:	e9 e3 09 00 00       	jmp    c0020107 <Vm::x87Handler(regs*)+0xa61>
c001f724:	83 ec 0c             	sub    esp,0xc
c001f727:	6a 00                	push   0x0
c001f729:	e8 3b fe ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001f72e:	59                   	pop    ecx
c001f72f:	5e                   	pop    esi
c001f730:	52                   	push   edx
c001f731:	50                   	push   eax
c001f732:	e8 c2 fd ff ff       	call   c001f4f9 <Vm::fpuChs(unsigned long long)>
c001f737:	eb 13                	jmp    c001f74c <Vm::x87Handler(regs*)+0xa6>
c001f739:	83 ec 0c             	sub    esp,0xc
c001f73c:	6a 00                	push   0x0
c001f73e:	e8 26 fe ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001f743:	5f                   	pop    edi
c001f744:	5d                   	pop    ebp
c001f745:	52                   	push   edx
c001f746:	50                   	push   eax
c001f747:	e8 a4 fd ff ff       	call   c001f4f0 <Vm::fpuAbs(unsigned long long)>
c001f74c:	83 c4 0c             	add    esp,0xc
c001f74f:	52                   	push   edx
c001f750:	50                   	push   eax
c001f751:	6a 00                	push   0x0
c001f753:	e8 54 fe ff ff       	call   c001f5ac <Vm::fpuSetReg(int, unsigned long long)>
c001f758:	eb bc                	jmp    c001f716 <Vm::x87Handler(regs*)+0x70>
c001f75a:	e8 d3 fc ff ff       	call   c001f432 <Vm::fpuGetLog210()>
c001f75f:	eb ac                	jmp    c001f70d <Vm::x87Handler(regs*)+0x67>
c001f761:	e8 9c fc ff ff       	call   c001f402 <Vm::fpuGetLog2E()>
c001f766:	eb a5                	jmp    c001f70d <Vm::x87Handler(regs*)+0x67>
c001f768:	e8 8d fc ff ff       	call   c001f3fa <Vm::fpuGetPi()>
c001f76d:	eb 9e                	jmp    c001f70d <Vm::x87Handler(regs*)+0x67>
c001f76f:	e8 d6 fc ff ff       	call   c001f44a <Vm::fpuGetLog102()>
c001f774:	eb 97                	jmp    c001f70d <Vm::x87Handler(regs*)+0x67>
c001f776:	e8 9f fc ff ff       	call   c001f41a <Vm::fpuGetLogE2()>
c001f77b:	eb 90                	jmp    c001f70d <Vm::x87Handler(regs*)+0x67>
c001f77d:	8d 50 40             	lea    edx,[eax+0x40]
c001f780:	80 fa 07             	cmp    dl,0x7
c001f783:	77 15                	ja     c001f79a <Vm::x87Handler(regs*)+0xf4>
c001f785:	83 ec 0c             	sub    esp,0xc
c001f788:	2d c0 00 00 00       	sub    eax,0xc0
c001f78d:	50                   	push   eax
c001f78e:	e8 d6 fd ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001f793:	59                   	pop    ecx
c001f794:	5e                   	pop    esi
c001f795:	e9 75 ff ff ff       	jmp    c001f70f <Vm::x87Handler(regs*)+0x69>
c001f79a:	8d 50 38             	lea    edx,[eax+0x38]
c001f79d:	80 fa 07             	cmp    dl,0x7
c001f7a0:	77 3c                	ja     c001f7de <Vm::x87Handler(regs*)+0x138>
c001f7a2:	83 ec 0c             	sub    esp,0xc
c001f7a5:	2d c8 00 00 00       	sub    eax,0xc8
c001f7aa:	50                   	push   eax
c001f7ab:	e8 b9 fd ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001f7b0:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f7b7:	89 c6                	mov    esi,eax
c001f7b9:	89 d7                	mov    edi,edx
c001f7bb:	e8 a9 fd ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001f7c0:	83 c4 0c             	add    esp,0xc
c001f7c3:	52                   	push   edx
c001f7c4:	50                   	push   eax
c001f7c5:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f7c9:	2d c8 00 00 00       	sub    eax,0xc8
c001f7ce:	50                   	push   eax
c001f7cf:	e8 d8 fd ff ff       	call   c001f5ac <Vm::fpuSetReg(int, unsigned long long)>
c001f7d4:	83 c4 0c             	add    esp,0xc
c001f7d7:	57                   	push   edi
c001f7d8:	56                   	push   esi
c001f7d9:	e9 73 ff ff ff       	jmp    c001f751 <Vm::x87Handler(regs*)+0xab>
c001f7de:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f7e2:	84 d2                	test   dl,dl
c001f7e4:	75 0f                	jne    c001f7f5 <Vm::x87Handler(regs*)+0x14f>
c001f7e6:	83 ec 0c             	sub    esp,0xc
c001f7e9:	ff 36                	push   DWORD PTR [esi]
c001f7eb:	e8 c8 fa ff ff       	call   c001f2b8 <Vm::fpu32ToInternal(unsigned int)>
c001f7f0:	e9 bf 00 00 00       	jmp    c001f8b4 <Vm::x87Handler(regs*)+0x20e>
c001f7f5:	80 fa 03             	cmp    dl,0x3
c001f7f8:	75 13                	jne    c001f80d <Vm::x87Handler(regs*)+0x167>
c001f7fa:	e8 55 fe ff ff       	call   c001f654 <Vm::fpuPop()>
c001f7ff:	55                   	push   ebp
c001f800:	55                   	push   ebp
c001f801:	52                   	push   edx
c001f802:	50                   	push   eax
c001f803:	e8 4c fa ff ff       	call   c001f254 <Vm::fpuInternalTo32(unsigned long long)>
c001f808:	e9 88 00 00 00       	jmp    c001f895 <Vm::x87Handler(regs*)+0x1ef>
c001f80d:	80 fa 05             	cmp    dl,0x5
c001f810:	75 0e                	jne    c001f820 <Vm::x87Handler(regs*)+0x17a>
c001f812:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f815:	66 a3 e2 15 03 c0    	mov    ds:0xc00315e2,ax
c001f81b:	e9 df 00 00 00       	jmp    c001f8ff <Vm::x87Handler(regs*)+0x259>
c001f820:	31 c0                	xor    eax,eax
c001f822:	80 fa 07             	cmp    dl,0x7
c001f825:	0f 85 dc 08 00 00    	jne    c0020107 <Vm::x87Handler(regs*)+0xa61>
c001f82b:	66 a1 e2 15 03 c0    	mov    ax,ds:0xc00315e2
c001f831:	66 89 06             	mov    WORD PTR [esi],ax
c001f834:	e9 c6 00 00 00       	jmp    c001f8ff <Vm::x87Handler(regs*)+0x259>
c001f839:	80 fa d8             	cmp    dl,0xd8
c001f83c:	0f 84 c9 00 00 00    	je     c001f90b <Vm::x87Handler(regs*)+0x265>
c001f842:	80 fa dc             	cmp    dl,0xdc
c001f845:	0f 84 0d 02 00 00    	je     c001fa58 <Vm::x87Handler(regs*)+0x3b2>
c001f84b:	80 fa de             	cmp    dl,0xde
c001f84e:	0f 84 cd 02 00 00    	je     c001fb21 <Vm::x87Handler(regs*)+0x47b>
c001f854:	80 fa dd             	cmp    dl,0xdd
c001f857:	0f 84 5f 04 00 00    	je     c001fcbc <Vm::x87Handler(regs*)+0x616>
c001f85d:	80 fa da             	cmp    dl,0xda
c001f860:	0f 84 24 05 00 00    	je     c001fd8a <Vm::x87Handler(regs*)+0x6e4>
c001f866:	80 fa df             	cmp    dl,0xdf
c001f869:	0f 84 68 05 00 00    	je     c001fdd7 <Vm::x87Handler(regs*)+0x731>
c001f86f:	31 c0                	xor    eax,eax
c001f871:	80 fa db             	cmp    dl,0xdb
c001f874:	0f 85 8d 08 00 00    	jne    c0020107 <Vm::x87Handler(regs*)+0xa61>
c001f87a:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f87e:	80 fa 03             	cmp    dl,0x3
c001f881:	0f 85 70 06 00 00    	jne    c001fef7 <Vm::x87Handler(regs*)+0x851>
c001f887:	e8 c8 fd ff ff       	call   c001f654 <Vm::fpuPop()>
c001f88c:	55                   	push   ebp
c001f88d:	55                   	push   ebp
c001f88e:	52                   	push   edx
c001f88f:	50                   	push   eax
c001f890:	e8 71 fa ff ff       	call   c001f306 <Vm::fpuFloatToLong(unsigned long long)>
c001f895:	83 c4 10             	add    esp,0x10
c001f898:	89 06                	mov    DWORD PTR [esi],eax
c001f89a:	eb 63                	jmp    c001f8ff <Vm::x87Handler(regs*)+0x259>
c001f89c:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001f8a0:	84 d2                	test   dl,dl
c001f8a2:	0f 85 e6 05 00 00    	jne    c001fe8e <Vm::x87Handler(regs*)+0x7e8>
c001f8a8:	57                   	push   edi
c001f8a9:	57                   	push   edi
c001f8aa:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f8ad:	ff 36                	push   DWORD PTR [esi]
c001f8af:	e8 49 fa ff ff       	call   c001f2fd <Vm::fpu64ToInternal(unsigned long long)>
c001f8b4:	5e                   	pop    esi
c001f8b5:	5f                   	pop    edi
c001f8b6:	52                   	push   edx
c001f8b7:	50                   	push   eax
c001f8b8:	e8 3a fd ff ff       	call   c001f5f7 <Vm::fpuPush(unsigned long long)>
c001f8bd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f8c1:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f8c4:	e9 51 fe ff ff       	jmp    c001f71a <Vm::x87Handler(regs*)+0x74>
c001f8c9:	80 fa 03             	cmp    dl,0x3
c001f8cc:	0f 85 d7 06 00 00    	jne    c001ffa9 <Vm::x87Handler(regs*)+0x903>
c001f8d2:	57                   	push   edi
c001f8d3:	57                   	push   edi
c001f8d4:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001f8d7:	ff 36                	push   DWORD PTR [esi]
c001f8d9:	e8 1f fa ff ff       	call   c001f2fd <Vm::fpu64ToInternal(unsigned long long)>
c001f8de:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f8e5:	89 c6                	mov    esi,eax
c001f8e7:	89 d7                	mov    edi,edx
c001f8e9:	e8 7b fc ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001f8ee:	57                   	push   edi
c001f8ef:	56                   	push   esi
c001f8f0:	52                   	push   edx
c001f8f1:	50                   	push   eax
c001f8f2:	e8 95 fb ff ff       	call   c001f48c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001f8f7:	83 c4 20             	add    esp,0x20
c001f8fa:	e8 55 fd ff ff       	call   c001f654 <Vm::fpuPop()>
c001f8ff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f903:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001f906:	e9 12 fe ff ff       	jmp    c001f71d <Vm::x87Handler(regs*)+0x77>
c001f90b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f90f:	8d 50 40             	lea    edx,[eax+0x40]
c001f912:	80 fa 07             	cmp    dl,0x7
c001f915:	77 29                	ja     c001f940 <Vm::x87Handler(regs*)+0x29a>
c001f917:	83 ec 0c             	sub    esp,0xc
c001f91a:	2d c0 00 00 00       	sub    eax,0xc0
c001f91f:	50                   	push   eax
c001f920:	e8 44 fc ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001f925:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f92c:	89 c6                	mov    esi,eax
c001f92e:	89 d7                	mov    edi,edx
c001f930:	e8 34 fc ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001f935:	57                   	push   edi
c001f936:	56                   	push   esi
c001f937:	52                   	push   edx
c001f938:	50                   	push   eax
c001f939:	e8 a1 fb ff ff       	call   c001f4df <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001f93e:	eb 2f                	jmp    c001f96f <Vm::x87Handler(regs*)+0x2c9>
c001f940:	8d 50 38             	lea    edx,[eax+0x38]
c001f943:	80 fa 07             	cmp    dl,0x7
c001f946:	77 2f                	ja     c001f977 <Vm::x87Handler(regs*)+0x2d1>
c001f948:	83 ec 0c             	sub    esp,0xc
c001f94b:	2d c8 00 00 00       	sub    eax,0xc8
c001f950:	50                   	push   eax
c001f951:	e8 13 fc ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001f956:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f95d:	89 c6                	mov    esi,eax
c001f95f:	89 d7                	mov    edi,edx
c001f961:	e8 03 fc ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001f966:	57                   	push   edi
c001f967:	56                   	push   esi
c001f968:	52                   	push   edx
c001f969:	50                   	push   eax
c001f96a:	e8 a9 fb ff ff       	call   c001f518 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001f96f:	83 c4 1c             	add    esp,0x1c
c001f972:	e9 d8 fd ff ff       	jmp    c001f74f <Vm::x87Handler(regs*)+0xa9>
c001f977:	8d 50 30             	lea    edx,[eax+0x30]
c001f97a:	80 fa 07             	cmp    dl,0x7
c001f97d:	77 0d                	ja     c001f98c <Vm::x87Handler(regs*)+0x2e6>
c001f97f:	83 ec 0c             	sub    esp,0xc
c001f982:	2d d0 00 00 00       	sub    eax,0xd0
c001f987:	e9 99 03 00 00       	jmp    c001fd25 <Vm::x87Handler(regs*)+0x67f>
c001f98c:	8d 50 28             	lea    edx,[eax+0x28]
c001f98f:	80 fa 07             	cmp    dl,0x7
c001f992:	77 0d                	ja     c001f9a1 <Vm::x87Handler(regs*)+0x2fb>
c001f994:	83 ec 0c             	sub    esp,0xc
c001f997:	2d d8 00 00 00       	sub    eax,0xd8
c001f99c:	e9 c0 03 00 00       	jmp    c001fd61 <Vm::x87Handler(regs*)+0x6bb>
c001f9a1:	8d 50 20             	lea    edx,[eax+0x20]
c001f9a4:	80 fa 07             	cmp    dl,0x7
c001f9a7:	77 1b                	ja     c001f9c4 <Vm::x87Handler(regs*)+0x31e>
c001f9a9:	83 ec 0c             	sub    esp,0xc
c001f9ac:	2d e0 00 00 00       	sub    eax,0xe0
c001f9b1:	50                   	push   eax
c001f9b2:	e8 b2 fb ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001f9b7:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001f9be:	89 c6                	mov    esi,eax
c001f9c0:	89 d7                	mov    edi,edx
c001f9c2:	eb 22                	jmp    c001f9e6 <Vm::x87Handler(regs*)+0x340>
c001f9c4:	8d 50 18             	lea    edx,[eax+0x18]
c001f9c7:	80 fa 07             	cmp    dl,0x7
c001f9ca:	77 2d                	ja     c001f9f9 <Vm::x87Handler(regs*)+0x353>
c001f9cc:	83 ec 0c             	sub    esp,0xc
c001f9cf:	6a 00                	push   0x0
c001f9d1:	e8 93 fb ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001f9d6:	89 c6                	mov    esi,eax
c001f9d8:	89 d7                	mov    edi,edx
c001f9da:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f9de:	2d e8 00 00 00       	sub    eax,0xe8
c001f9e3:	89 04 24             	mov    DWORD PTR [esp],eax
c001f9e6:	e8 7e fb ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001f9eb:	57                   	push   edi
c001f9ec:	56                   	push   esi
c001f9ed:	52                   	push   edx
c001f9ee:	50                   	push   eax
c001f9ef:	e8 15 fb ff ff       	call   c001f509 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001f9f4:	e9 76 ff ff ff       	jmp    c001f96f <Vm::x87Handler(regs*)+0x2c9>
c001f9f9:	8d 50 10             	lea    edx,[eax+0x10]
c001f9fc:	80 fa 07             	cmp    dl,0x7
c001f9ff:	77 1b                	ja     c001fa1c <Vm::x87Handler(regs*)+0x376>
c001fa01:	83 ec 0c             	sub    esp,0xc
c001fa04:	2d f0 00 00 00       	sub    eax,0xf0
c001fa09:	50                   	push   eax
c001fa0a:	e8 5a fb ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fa0f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa16:	89 c6                	mov    esi,eax
c001fa18:	89 d7                	mov    edi,edx
c001fa1a:	eb 22                	jmp    c001fa3e <Vm::x87Handler(regs*)+0x398>
c001fa1c:	3c f7                	cmp    al,0xf7
c001fa1e:	0f 86 d1 03 00 00    	jbe    c001fdf5 <Vm::x87Handler(regs*)+0x74f>
c001fa24:	83 ec 0c             	sub    esp,0xc
c001fa27:	6a 00                	push   0x0
c001fa29:	e8 3b fb ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fa2e:	89 c6                	mov    esi,eax
c001fa30:	89 d7                	mov    edi,edx
c001fa32:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa36:	2d f8 00 00 00       	sub    eax,0xf8
c001fa3b:	89 04 24             	mov    DWORD PTR [esp],eax
c001fa3e:	e8 26 fb ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fa43:	57                   	push   edi
c001fa44:	56                   	push   esi
c001fa45:	52                   	push   edx
c001fa46:	50                   	push   eax
c001fa47:	e8 eb fa ff ff       	call   c001f537 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fa4c:	83 c4 1c             	add    esp,0x1c
c001fa4f:	52                   	push   edx
c001fa50:	50                   	push   eax
c001fa51:	6a 00                	push   0x0
c001fa53:	e9 51 02 00 00       	jmp    c001fca9 <Vm::x87Handler(regs*)+0x603>
c001fa58:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa5c:	8d 50 40             	lea    edx,[eax+0x40]
c001fa5f:	80 fa 07             	cmp    dl,0x7
c001fa62:	77 37                	ja     c001fa9b <Vm::x87Handler(regs*)+0x3f5>
c001fa64:	83 ec 0c             	sub    esp,0xc
c001fa67:	2d c0 00 00 00       	sub    eax,0xc0
c001fa6c:	50                   	push   eax
c001fa6d:	e8 f7 fa ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fa72:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fa79:	89 c6                	mov    esi,eax
c001fa7b:	89 d7                	mov    edi,edx
c001fa7d:	e8 e7 fa ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fa82:	57                   	push   edi
c001fa83:	56                   	push   esi
c001fa84:	52                   	push   edx
c001fa85:	50                   	push   eax
c001fa86:	e8 54 fa ff ff       	call   c001f4df <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fa8b:	83 c4 1c             	add    esp,0x1c
c001fa8e:	52                   	push   edx
c001fa8f:	50                   	push   eax
c001fa90:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fa94:	2d c0 00 00 00       	sub    eax,0xc0
c001fa99:	eb 3d                	jmp    c001fad8 <Vm::x87Handler(regs*)+0x432>
c001fa9b:	8d 50 38             	lea    edx,[eax+0x38]
c001fa9e:	80 fa 07             	cmp    dl,0x7
c001faa1:	77 3b                	ja     c001fade <Vm::x87Handler(regs*)+0x438>
c001faa3:	83 ec 0c             	sub    esp,0xc
c001faa6:	2d c8 00 00 00       	sub    eax,0xc8
c001faab:	50                   	push   eax
c001faac:	e8 b8 fa ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fab1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fab8:	89 c6                	mov    esi,eax
c001faba:	89 d7                	mov    edi,edx
c001fabc:	e8 a8 fa ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fac1:	57                   	push   edi
c001fac2:	56                   	push   esi
c001fac3:	52                   	push   edx
c001fac4:	50                   	push   eax
c001fac5:	e8 4e fa ff ff       	call   c001f518 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001faca:	83 c4 1c             	add    esp,0x1c
c001facd:	52                   	push   edx
c001face:	50                   	push   eax
c001facf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fad3:	2d c8 00 00 00       	sub    eax,0xc8
c001fad8:	50                   	push   eax
c001fad9:	e9 75 fc ff ff       	jmp    c001f753 <Vm::x87Handler(regs*)+0xad>
c001fade:	83 c0 18             	add    eax,0x18
c001fae1:	3c 07                	cmp    al,0x7
c001fae3:	0f 87 3b 04 00 00    	ja     c001ff24 <Vm::x87Handler(regs*)+0x87e>
c001fae9:	83 ec 0c             	sub    esp,0xc
c001faec:	6a 00                	push   0x0
c001faee:	e8 76 fa ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001faf3:	89 c6                	mov    esi,eax
c001faf5:	89 d7                	mov    edi,edx
c001faf7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fafb:	2d e8 00 00 00       	sub    eax,0xe8
c001fb00:	89 04 24             	mov    DWORD PTR [esp],eax
c001fb03:	e8 61 fa ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fb08:	57                   	push   edi
c001fb09:	56                   	push   esi
c001fb0a:	52                   	push   edx
c001fb0b:	50                   	push   eax
c001fb0c:	e8 f8 f9 ff ff       	call   c001f509 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fb11:	83 c4 1c             	add    esp,0x1c
c001fb14:	52                   	push   edx
c001fb15:	50                   	push   eax
c001fb16:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb1a:	2d e8 00 00 00       	sub    eax,0xe8
c001fb1f:	eb b7                	jmp    c001fad8 <Vm::x87Handler(regs*)+0x432>
c001fb21:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb25:	8d 50 40             	lea    edx,[eax+0x40]
c001fb28:	80 fa 07             	cmp    dl,0x7
c001fb2b:	77 3a                	ja     c001fb67 <Vm::x87Handler(regs*)+0x4c1>
c001fb2d:	83 ec 0c             	sub    esp,0xc
c001fb30:	2d c0 00 00 00       	sub    eax,0xc0
c001fb35:	50                   	push   eax
c001fb36:	e8 2e fa ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fb3b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb42:	89 c6                	mov    esi,eax
c001fb44:	89 d7                	mov    edi,edx
c001fb46:	e8 1e fa ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fb4b:	57                   	push   edi
c001fb4c:	56                   	push   esi
c001fb4d:	52                   	push   edx
c001fb4e:	50                   	push   eax
c001fb4f:	e8 8b f9 ff ff       	call   c001f4df <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001fb54:	83 c4 1c             	add    esp,0x1c
c001fb57:	52                   	push   edx
c001fb58:	50                   	push   eax
c001fb59:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb5d:	2d c0 00 00 00       	sub    eax,0xc0
c001fb62:	e9 9e 01 00 00       	jmp    c001fd05 <Vm::x87Handler(regs*)+0x65f>
c001fb67:	8d 50 20             	lea    edx,[eax+0x20]
c001fb6a:	80 fa 07             	cmp    dl,0x7
c001fb6d:	77 3a                	ja     c001fba9 <Vm::x87Handler(regs*)+0x503>
c001fb6f:	83 ec 0c             	sub    esp,0xc
c001fb72:	2d e0 00 00 00       	sub    eax,0xe0
c001fb77:	50                   	push   eax
c001fb78:	e8 ec f9 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fb7d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fb84:	89 c6                	mov    esi,eax
c001fb86:	89 d7                	mov    edi,edx
c001fb88:	e8 dc f9 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fb8d:	57                   	push   edi
c001fb8e:	56                   	push   esi
c001fb8f:	52                   	push   edx
c001fb90:	50                   	push   eax
c001fb91:	e8 73 f9 ff ff       	call   c001f509 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fb96:	83 c4 1c             	add    esp,0x1c
c001fb99:	52                   	push   edx
c001fb9a:	50                   	push   eax
c001fb9b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb9f:	2d e0 00 00 00       	sub    eax,0xe0
c001fba4:	e9 5c 01 00 00       	jmp    c001fd05 <Vm::x87Handler(regs*)+0x65f>
c001fba9:	8d 50 18             	lea    edx,[eax+0x18]
c001fbac:	80 fa 07             	cmp    dl,0x7
c001fbaf:	77 3b                	ja     c001fbec <Vm::x87Handler(regs*)+0x546>
c001fbb1:	83 ec 0c             	sub    esp,0xc
c001fbb4:	6a 00                	push   0x0
c001fbb6:	e8 ae f9 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fbbb:	89 c6                	mov    esi,eax
c001fbbd:	89 d7                	mov    edi,edx
c001fbbf:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbc3:	2d e8 00 00 00       	sub    eax,0xe8
c001fbc8:	89 04 24             	mov    DWORD PTR [esp],eax
c001fbcb:	e8 99 f9 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fbd0:	57                   	push   edi
c001fbd1:	56                   	push   esi
c001fbd2:	52                   	push   edx
c001fbd3:	50                   	push   eax
c001fbd4:	e8 30 f9 ff ff       	call   c001f509 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001fbd9:	83 c4 1c             	add    esp,0x1c
c001fbdc:	52                   	push   edx
c001fbdd:	50                   	push   eax
c001fbde:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fbe2:	2d e8 00 00 00       	sub    eax,0xe8
c001fbe7:	e9 19 01 00 00       	jmp    c001fd05 <Vm::x87Handler(regs*)+0x65f>
c001fbec:	8d 50 38             	lea    edx,[eax+0x38]
c001fbef:	80 fa 07             	cmp    dl,0x7
c001fbf2:	77 37                	ja     c001fc2b <Vm::x87Handler(regs*)+0x585>
c001fbf4:	83 ec 0c             	sub    esp,0xc
c001fbf7:	2d c8 00 00 00       	sub    eax,0xc8
c001fbfc:	50                   	push   eax
c001fbfd:	e8 67 f9 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fc02:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc09:	89 c6                	mov    esi,eax
c001fc0b:	89 d7                	mov    edi,edx
c001fc0d:	e8 57 f9 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fc12:	57                   	push   edi
c001fc13:	56                   	push   esi
c001fc14:	52                   	push   edx
c001fc15:	50                   	push   eax
c001fc16:	e8 fd f8 ff ff       	call   c001f518 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001fc1b:	83 c4 1c             	add    esp,0x1c
c001fc1e:	52                   	push   edx
c001fc1f:	50                   	push   eax
c001fc20:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc24:	2d c8 00 00 00       	sub    eax,0xc8
c001fc29:	eb 7d                	jmp    c001fca8 <Vm::x87Handler(regs*)+0x602>
c001fc2b:	3c f7                	cmp    al,0xf7
c001fc2d:	76 38                	jbe    c001fc67 <Vm::x87Handler(regs*)+0x5c1>
c001fc2f:	83 ec 0c             	sub    esp,0xc
c001fc32:	6a 00                	push   0x0
c001fc34:	e8 30 f9 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fc39:	89 c6                	mov    esi,eax
c001fc3b:	89 d7                	mov    edi,edx
c001fc3d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc41:	2d f8 00 00 00       	sub    eax,0xf8
c001fc46:	89 04 24             	mov    DWORD PTR [esp],eax
c001fc49:	e8 1b f9 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fc4e:	57                   	push   edi
c001fc4f:	56                   	push   esi
c001fc50:	52                   	push   edx
c001fc51:	50                   	push   eax
c001fc52:	e8 e0 f8 ff ff       	call   c001f537 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fc57:	83 c4 1c             	add    esp,0x1c
c001fc5a:	52                   	push   edx
c001fc5b:	50                   	push   eax
c001fc5c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fc60:	2d f8 00 00 00       	sub    eax,0xf8
c001fc65:	eb 41                	jmp    c001fca8 <Vm::x87Handler(regs*)+0x602>
c001fc67:	8d 50 10             	lea    edx,[eax+0x10]
c001fc6a:	80 fa 07             	cmp    dl,0x7
c001fc6d:	0f 87 5a 01 00 00    	ja     c001fdcd <Vm::x87Handler(regs*)+0x727>
c001fc73:	83 ec 0c             	sub    esp,0xc
c001fc76:	2d f0 00 00 00       	sub    eax,0xf0
c001fc7b:	50                   	push   eax
c001fc7c:	e8 e8 f8 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fc81:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fc88:	89 c6                	mov    esi,eax
c001fc8a:	89 d7                	mov    edi,edx
c001fc8c:	e8 d8 f8 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fc91:	57                   	push   edi
c001fc92:	56                   	push   esi
c001fc93:	52                   	push   edx
c001fc94:	50                   	push   eax
c001fc95:	e8 9d f8 ff ff       	call   c001f537 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c001fc9a:	83 c4 1c             	add    esp,0x1c
c001fc9d:	52                   	push   edx
c001fc9e:	50                   	push   eax
c001fc9f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fca3:	2d f0 00 00 00       	sub    eax,0xf0
c001fca8:	50                   	push   eax
c001fca9:	e8 fe f8 ff ff       	call   c001f5ac <Vm::fpuSetReg(int, unsigned long long)>
c001fcae:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fcb2:	e8 9d f9 ff ff       	call   c001f654 <Vm::fpuPop()>
c001fcb7:	e9 5e fa ff ff       	jmp    c001f71a <Vm::x87Handler(regs*)+0x74>
c001fcbc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcc0:	8d 50 30             	lea    edx,[eax+0x30]
c001fcc3:	80 fa 07             	cmp    dl,0x7
c001fcc6:	77 1d                	ja     c001fce5 <Vm::x87Handler(regs*)+0x63f>
c001fcc8:	83 ec 0c             	sub    esp,0xc
c001fccb:	6a 00                	push   0x0
c001fccd:	e8 97 f8 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fcd2:	83 c4 0c             	add    esp,0xc
c001fcd5:	52                   	push   edx
c001fcd6:	50                   	push   eax
c001fcd7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fcdb:	2d d0 00 00 00       	sub    eax,0xd0
c001fce0:	e9 f3 fd ff ff       	jmp    c001fad8 <Vm::x87Handler(regs*)+0x432>
c001fce5:	8d 50 28             	lea    edx,[eax+0x28]
c001fce8:	80 fa 07             	cmp    dl,0x7
c001fceb:	77 28                	ja     c001fd15 <Vm::x87Handler(regs*)+0x66f>
c001fced:	83 ec 0c             	sub    esp,0xc
c001fcf0:	6a 00                	push   0x0
c001fcf2:	e8 72 f8 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fcf7:	83 c4 0c             	add    esp,0xc
c001fcfa:	52                   	push   edx
c001fcfb:	50                   	push   eax
c001fcfc:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fd00:	2d d8 00 00 00       	sub    eax,0xd8
c001fd05:	50                   	push   eax
c001fd06:	e8 a1 f8 ff ff       	call   c001f5ac <Vm::fpuSetReg(int, unsigned long long)>
c001fd0b:	e8 44 f9 ff ff       	call   c001f654 <Vm::fpuPop()>
c001fd10:	e9 01 fa ff ff       	jmp    c001f716 <Vm::x87Handler(regs*)+0x70>
c001fd15:	8d 50 20             	lea    edx,[eax+0x20]
c001fd18:	80 fa 07             	cmp    dl,0x7
c001fd1b:	77 30                	ja     c001fd4d <Vm::x87Handler(regs*)+0x6a7>
c001fd1d:	83 ec 0c             	sub    esp,0xc
c001fd20:	2d e0 00 00 00       	sub    eax,0xe0
c001fd25:	50                   	push   eax
c001fd26:	e8 3e f8 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fd2b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd32:	89 c6                	mov    esi,eax
c001fd34:	89 d7                	mov    edi,edx
c001fd36:	e8 2e f8 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fd3b:	57                   	push   edi
c001fd3c:	56                   	push   esi
c001fd3d:	52                   	push   edx
c001fd3e:	50                   	push   eax
c001fd3f:	e8 48 f7 ff ff       	call   c001f48c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd44:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fd48:	e9 54 02 00 00       	jmp    c001ffa1 <Vm::x87Handler(regs*)+0x8fb>
c001fd4d:	8d 50 18             	lea    edx,[eax+0x18]
c001fd50:	80 fa 07             	cmp    dl,0x7
c001fd53:	0f 87 43 fb ff ff    	ja     c001f89c <Vm::x87Handler(regs*)+0x1f6>
c001fd59:	83 ec 0c             	sub    esp,0xc
c001fd5c:	2d e8 00 00 00       	sub    eax,0xe8
c001fd61:	50                   	push   eax
c001fd62:	e8 02 f8 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fd67:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fd6e:	89 c6                	mov    esi,eax
c001fd70:	89 d7                	mov    edi,edx
c001fd72:	e8 f2 f7 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fd77:	57                   	push   edi
c001fd78:	56                   	push   esi
c001fd79:	52                   	push   edx
c001fd7a:	50                   	push   eax
c001fd7b:	e8 0c f7 ff ff       	call   c001f48c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fd80:	83 c4 20             	add    esp,0x20
c001fd83:	e8 cc f8 ff ff       	call   c001f654 <Vm::fpuPop()>
c001fd88:	eb 62                	jmp    c001fdec <Vm::x87Handler(regs*)+0x746>
c001fd8a:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c001fd8e:	0f 85 0f 01 00 00    	jne    c001fea3 <Vm::x87Handler(regs*)+0x7fd>
c001fd94:	83 ec 0c             	sub    esp,0xc
c001fd97:	6a 01                	push   0x1
c001fd99:	e8 cb f7 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fd9e:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001fda5:	89 c6                	mov    esi,eax
c001fda7:	89 d7                	mov    edi,edx
c001fda9:	e8 bb f7 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fdae:	57                   	push   edi
c001fdaf:	56                   	push   esi
c001fdb0:	52                   	push   edx
c001fdb1:	50                   	push   eax
c001fdb2:	e8 d5 f6 ff ff       	call   c001f48c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001fdb7:	83 c4 20             	add    esp,0x20
c001fdba:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fdbe:	e8 91 f8 ff ff       	call   c001f654 <Vm::fpuPop()>
c001fdc3:	e8 8c f8 ff ff       	call   c001f654 <Vm::fpuPop()>
c001fdc8:	e9 50 f9 ff ff       	jmp    c001f71d <Vm::x87Handler(regs*)+0x77>
c001fdcd:	3c d9                	cmp    al,0xd9
c001fdcf:	0f 85 b5 02 00 00    	jne    c002008a <Vm::x87Handler(regs*)+0x9e4>
c001fdd5:	eb bd                	jmp    c001fd94 <Vm::x87Handler(regs*)+0x6ee>
c001fdd7:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c001fddb:	0f 85 ea 02 00 00    	jne    c00200cb <Vm::x87Handler(regs*)+0xa25>
c001fde1:	0f b7 05 e0 15 03 c0 	movzx  eax,WORD PTR ds:0xc00315e0
c001fde8:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c001fdec:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001fdf0:	e9 28 f9 ff ff       	jmp    c001f71d <Vm::x87Handler(regs*)+0x77>
c001fdf5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fdf9:	84 d2                	test   dl,dl
c001fdfb:	75 0f                	jne    c001fe0c <Vm::x87Handler(regs*)+0x766>
c001fdfd:	83 ec 0c             	sub    esp,0xc
c001fe00:	ff 36                	push   DWORD PTR [esi]
c001fe02:	e8 b1 f4 ff ff       	call   c001f2b8 <Vm::fpu32ToInternal(unsigned int)>
c001fe07:	e9 2c 01 00 00       	jmp    c001ff38 <Vm::x87Handler(regs*)+0x892>
c001fe0c:	80 fa 01             	cmp    dl,0x1
c001fe0f:	75 0f                	jne    c001fe20 <Vm::x87Handler(regs*)+0x77a>
c001fe11:	83 ec 0c             	sub    esp,0xc
c001fe14:	ff 36                	push   DWORD PTR [esi]
c001fe16:	e8 9d f4 ff ff       	call   c001f2b8 <Vm::fpu32ToInternal(unsigned int)>
c001fe1b:	e9 81 02 00 00       	jmp    c00200a1 <Vm::x87Handler(regs*)+0x9fb>
c001fe20:	80 fa 04             	cmp    dl,0x4
c001fe23:	75 0f                	jne    c001fe34 <Vm::x87Handler(regs*)+0x78e>
c001fe25:	83 ec 0c             	sub    esp,0xc
c001fe28:	ff 36                	push   DWORD PTR [esi]
c001fe2a:	e8 89 f4 ff ff       	call   c001f2b8 <Vm::fpu32ToInternal(unsigned int)>
c001fe2f:	e9 86 01 00 00       	jmp    c001ffba <Vm::x87Handler(regs*)+0x914>
c001fe34:	80 fa 05             	cmp    dl,0x5
c001fe37:	75 1b                	jne    c001fe54 <Vm::x87Handler(regs*)+0x7ae>
c001fe39:	83 ec 0c             	sub    esp,0xc
c001fe3c:	6a 00                	push   0x0
c001fe3e:	e8 26 f7 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fe43:	89 c7                	mov    edi,eax
c001fe45:	89 d5                	mov    ebp,edx
c001fe47:	58                   	pop    eax
c001fe48:	ff 36                	push   DWORD PTR [esi]
c001fe4a:	e8 69 f4 ff ff       	call   c001f2b8 <Vm::fpu32ToInternal(unsigned int)>
c001fe4f:	e9 a3 01 00 00       	jmp    c001fff7 <Vm::x87Handler(regs*)+0x951>
c001fe54:	80 fa 06             	cmp    dl,0x6
c001fe57:	75 0f                	jne    c001fe68 <Vm::x87Handler(regs*)+0x7c2>
c001fe59:	83 ec 0c             	sub    esp,0xc
c001fe5c:	ff 36                	push   DWORD PTR [esi]
c001fe5e:	e8 55 f4 ff ff       	call   c001f2b8 <Vm::fpu32ToInternal(unsigned int)>
c001fe63:	e9 ae 01 00 00       	jmp    c0020016 <Vm::x87Handler(regs*)+0x970>
c001fe68:	31 c0                	xor    eax,eax
c001fe6a:	80 fa 07             	cmp    dl,0x7
c001fe6d:	0f 85 94 02 00 00    	jne    c0020107 <Vm::x87Handler(regs*)+0xa61>
c001fe73:	83 ec 0c             	sub    esp,0xc
c001fe76:	6a 00                	push   0x0
c001fe78:	e8 ec f6 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fe7d:	89 c7                	mov    edi,eax
c001fe7f:	89 d5                	mov    ebp,edx
c001fe81:	58                   	pop    eax
c001fe82:	ff 36                	push   DWORD PTR [esi]
c001fe84:	e8 2f f4 ff ff       	call   c001f2b8 <Vm::fpu32ToInternal(unsigned int)>
c001fe89:	e9 cb 01 00 00       	jmp    c0020059 <Vm::x87Handler(regs*)+0x9b3>
c001fe8e:	80 fa 03             	cmp    dl,0x3
c001fe91:	0f 85 d3 01 00 00    	jne    c002006a <Vm::x87Handler(regs*)+0x9c4>
c001fe97:	e8 b8 f7 ff ff       	call   c001f654 <Vm::fpuPop()>
c001fe9c:	51                   	push   ecx
c001fe9d:	51                   	push   ecx
c001fe9e:	e9 de 01 00 00       	jmp    c0020081 <Vm::x87Handler(regs*)+0x9db>
c001fea3:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001fea7:	80 fa 01             	cmp    dl,0x1
c001feaa:	75 09                	jne    c001feb5 <Vm::x87Handler(regs*)+0x80f>
c001feac:	57                   	push   edi
c001fead:	57                   	push   edi
c001feae:	8b 06                	mov    eax,DWORD PTR [esi]
c001feb0:	e9 e3 01 00 00       	jmp    c0020098 <Vm::x87Handler(regs*)+0x9f2>
c001feb5:	80 fa 04             	cmp    dl,0x4
c001feb8:	75 12                	jne    c001fecc <Vm::x87Handler(regs*)+0x826>
c001feba:	31 d2                	xor    edx,edx
c001febc:	51                   	push   ecx
c001febd:	51                   	push   ecx
c001febe:	8b 06                	mov    eax,DWORD PTR [esi]
c001fec0:	52                   	push   edx
c001fec1:	50                   	push   eax
c001fec2:	e8 d0 f4 ff ff       	call   c001f397 <Vm::fpuLongToFloat(long long)>
c001fec7:	e9 ee 00 00 00       	jmp    c001ffba <Vm::x87Handler(regs*)+0x914>
c001fecc:	31 c0                	xor    eax,eax
c001fece:	80 fa 07             	cmp    dl,0x7
c001fed1:	0f 85 30 02 00 00    	jne    c0020107 <Vm::x87Handler(regs*)+0xa61>
c001fed7:	83 ec 0c             	sub    esp,0xc
c001feda:	6a 00                	push   0x0
c001fedc:	e8 88 f6 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001fee1:	89 c7                	mov    edi,eax
c001fee3:	89 d5                	mov    ebp,edx
c001fee5:	58                   	pop    eax
c001fee6:	8b 06                	mov    eax,DWORD PTR [esi]
c001fee8:	5a                   	pop    edx
c001fee9:	31 d2                	xor    edx,edx
c001feeb:	52                   	push   edx
c001feec:	50                   	push   eax
c001feed:	e8 a5 f4 ff ff       	call   c001f397 <Vm::fpuLongToFloat(long long)>
c001fef2:	e9 62 01 00 00       	jmp    c0020059 <Vm::x87Handler(regs*)+0x9b3>
c001fef7:	84 d2                	test   dl,dl
c001fef9:	75 0d                	jne    c001ff08 <Vm::x87Handler(regs*)+0x862>
c001fefb:	31 d2                	xor    edx,edx
c001fefd:	55                   	push   ebp
c001fefe:	55                   	push   ebp
c001feff:	8b 06                	mov    eax,DWORD PTR [esi]
c001ff01:	52                   	push   edx
c001ff02:	50                   	push   eax
c001ff03:	e9 d3 01 00 00       	jmp    c00200db <Vm::x87Handler(regs*)+0xa35>
c001ff08:	31 c0                	xor    eax,eax
c001ff0a:	80 fa 02             	cmp    dl,0x2
c001ff0d:	0f 85 f4 01 00 00    	jne    c0020107 <Vm::x87Handler(regs*)+0xa61>
c001ff13:	83 ec 0c             	sub    esp,0xc
c001ff16:	6a 00                	push   0x0
c001ff18:	e8 4c f6 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001ff1d:	59                   	pop    ecx
c001ff1e:	5f                   	pop    edi
c001ff1f:	e9 6a f9 ff ff       	jmp    c001f88e <Vm::x87Handler(regs*)+0x1e8>
c001ff24:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c001ff28:	84 d2                	test   dl,dl
c001ff2a:	75 2a                	jne    c001ff56 <Vm::x87Handler(regs*)+0x8b0>
c001ff2c:	50                   	push   eax
c001ff2d:	50                   	push   eax
c001ff2e:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ff31:	ff 36                	push   DWORD PTR [esi]
c001ff33:	e8 c5 f3 ff ff       	call   c001f2fd <Vm::fpu64ToInternal(unsigned long long)>
c001ff38:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff3f:	89 c6                	mov    esi,eax
c001ff41:	89 d7                	mov    edi,edx
c001ff43:	e8 21 f6 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001ff48:	57                   	push   edi
c001ff49:	56                   	push   esi
c001ff4a:	52                   	push   edx
c001ff4b:	50                   	push   eax
c001ff4c:	e8 8e f5 ff ff       	call   c001f4df <Vm::fpuAdd(unsigned long long, unsigned long long)>
c001ff51:	e9 64 01 00 00       	jmp    c00200ba <Vm::x87Handler(regs*)+0xa14>
c001ff56:	80 fa 01             	cmp    dl,0x1
c001ff59:	75 11                	jne    c001ff6c <Vm::x87Handler(regs*)+0x8c6>
c001ff5b:	50                   	push   eax
c001ff5c:	50                   	push   eax
c001ff5d:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ff60:	ff 36                	push   DWORD PTR [esi]
c001ff62:	e8 96 f3 ff ff       	call   c001f2fd <Vm::fpu64ToInternal(unsigned long long)>
c001ff67:	e9 35 01 00 00       	jmp    c00200a1 <Vm::x87Handler(regs*)+0x9fb>
c001ff6c:	80 fa 02             	cmp    dl,0x2
c001ff6f:	0f 85 54 f9 ff ff    	jne    c001f8c9 <Vm::x87Handler(regs*)+0x223>
c001ff75:	55                   	push   ebp
c001ff76:	55                   	push   ebp
c001ff77:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ff7a:	ff 36                	push   DWORD PTR [esi]
c001ff7c:	e8 7c f3 ff ff       	call   c001f2fd <Vm::fpu64ToInternal(unsigned long long)>
c001ff81:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ff88:	89 c6                	mov    esi,eax
c001ff8a:	89 d7                	mov    edi,edx
c001ff8c:	e8 d8 f5 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001ff91:	57                   	push   edi
c001ff92:	56                   	push   esi
c001ff93:	52                   	push   edx
c001ff94:	50                   	push   eax
c001ff95:	e8 f2 f4 ff ff       	call   c001f48c <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c001ff9a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ff9e:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c001ffa1:	83 c4 20             	add    esp,0x20
c001ffa4:	e9 74 f7 ff ff       	jmp    c001f71d <Vm::x87Handler(regs*)+0x77>
c001ffa9:	80 fa 04             	cmp    dl,0x4
c001ffac:	75 2a                	jne    c001ffd8 <Vm::x87Handler(regs*)+0x932>
c001ffae:	51                   	push   ecx
c001ffaf:	51                   	push   ecx
c001ffb0:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001ffb3:	ff 36                	push   DWORD PTR [esi]
c001ffb5:	e8 43 f3 ff ff       	call   c001f2fd <Vm::fpu64ToInternal(unsigned long long)>
c001ffba:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001ffc1:	89 c6                	mov    esi,eax
c001ffc3:	89 d7                	mov    edi,edx
c001ffc5:	e8 9f f5 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001ffca:	57                   	push   edi
c001ffcb:	56                   	push   esi
c001ffcc:	52                   	push   edx
c001ffcd:	50                   	push   eax
c001ffce:	e8 36 f5 ff ff       	call   c001f509 <Vm::fpuSub(unsigned long long, unsigned long long)>
c001ffd3:	e9 e2 00 00 00       	jmp    c00200ba <Vm::x87Handler(regs*)+0xa14>
c001ffd8:	80 fa 05             	cmp    dl,0x5
c001ffdb:	75 28                	jne    c0020005 <Vm::x87Handler(regs*)+0x95f>
c001ffdd:	83 ec 0c             	sub    esp,0xc
c001ffe0:	6a 00                	push   0x0
c001ffe2:	e8 82 f5 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c001ffe7:	89 c7                	mov    edi,eax
c001ffe9:	89 d5                	mov    ebp,edx
c001ffeb:	58                   	pop    eax
c001ffec:	5a                   	pop    edx
c001ffed:	ff 76 04             	push   DWORD PTR [esi+0x4]
c001fff0:	ff 36                	push   DWORD PTR [esi]
c001fff2:	e8 06 f3 ff ff       	call   c001f2fd <Vm::fpu64ToInternal(unsigned long long)>
c001fff7:	83 c4 10             	add    esp,0x10
c001fffa:	55                   	push   ebp
c001fffb:	57                   	push   edi
c001fffc:	52                   	push   edx
c001fffd:	50                   	push   eax
c001fffe:	e8 06 f5 ff ff       	call   c001f509 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020003:	eb 60                	jmp    c0020065 <Vm::x87Handler(regs*)+0x9bf>
c0020005:	80 fa 06             	cmp    dl,0x6
c0020008:	75 2a                	jne    c0020034 <Vm::x87Handler(regs*)+0x98e>
c002000a:	51                   	push   ecx
c002000b:	51                   	push   ecx
c002000c:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002000f:	ff 36                	push   DWORD PTR [esi]
c0020011:	e8 e7 f2 ff ff       	call   c001f2fd <Vm::fpu64ToInternal(unsigned long long)>
c0020016:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002001d:	89 c6                	mov    esi,eax
c002001f:	89 d7                	mov    edi,edx
c0020021:	e8 43 f5 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c0020026:	57                   	push   edi
c0020027:	56                   	push   esi
c0020028:	52                   	push   edx
c0020029:	50                   	push   eax
c002002a:	e8 08 f5 ff ff       	call   c001f537 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c002002f:	e9 86 00 00 00       	jmp    c00200ba <Vm::x87Handler(regs*)+0xa14>
c0020034:	31 c0                	xor    eax,eax
c0020036:	80 fa 07             	cmp    dl,0x7
c0020039:	0f 85 c8 00 00 00    	jne    c0020107 <Vm::x87Handler(regs*)+0xa61>
c002003f:	83 ec 0c             	sub    esp,0xc
c0020042:	6a 00                	push   0x0
c0020044:	e8 20 f5 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c0020049:	89 c7                	mov    edi,eax
c002004b:	89 d5                	mov    ebp,edx
c002004d:	58                   	pop    eax
c002004e:	5a                   	pop    edx
c002004f:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020052:	ff 36                	push   DWORD PTR [esi]
c0020054:	e8 a4 f2 ff ff       	call   c001f2fd <Vm::fpu64ToInternal(unsigned long long)>
c0020059:	83 c4 10             	add    esp,0x10
c002005c:	55                   	push   ebp
c002005d:	57                   	push   edi
c002005e:	52                   	push   edx
c002005f:	50                   	push   eax
c0020060:	e8 d2 f4 ff ff       	call   c001f537 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020065:	83 c4 0c             	add    esp,0xc
c0020068:	eb 53                	jmp    c00200bd <Vm::x87Handler(regs*)+0xa17>
c002006a:	31 c0                	xor    eax,eax
c002006c:	80 fa 02             	cmp    dl,0x2
c002006f:	0f 85 92 00 00 00    	jne    c0020107 <Vm::x87Handler(regs*)+0xa61>
c0020075:	83 ec 0c             	sub    esp,0xc
c0020078:	6a 00                	push   0x0
c002007a:	e8 ea f4 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c002007f:	59                   	pop    ecx
c0020080:	5f                   	pop    edi
c0020081:	52                   	push   edx
c0020082:	50                   	push   eax
c0020083:	e8 27 f2 ff ff       	call   c001f2af <Vm::fpuInternalTo64(unsigned long long)>
c0020088:	eb 70                	jmp    c00200fa <Vm::x87Handler(regs*)+0xa54>
c002008a:	31 c0                	xor    eax,eax
c002008c:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020091:	75 74                	jne    c0020107 <Vm::x87Handler(regs*)+0xa61>
c0020093:	50                   	push   eax
c0020094:	50                   	push   eax
c0020095:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020098:	31 d2                	xor    edx,edx
c002009a:	52                   	push   edx
c002009b:	50                   	push   eax
c002009c:	e8 f6 f2 ff ff       	call   c001f397 <Vm::fpuLongToFloat(long long)>
c00200a1:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00200a8:	89 c6                	mov    esi,eax
c00200aa:	89 d7                	mov    edi,edx
c00200ac:	e8 b8 f4 ff ff       	call   c001f569 <Vm::fpuGetReg(int)>
c00200b1:	57                   	push   edi
c00200b2:	56                   	push   esi
c00200b3:	52                   	push   edx
c00200b4:	50                   	push   eax
c00200b5:	e8 5e f4 ff ff       	call   c001f518 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00200ba:	83 c4 1c             	add    esp,0x1c
c00200bd:	52                   	push   edx
c00200be:	50                   	push   eax
c00200bf:	6a 00                	push   0x0
c00200c1:	e8 e6 f4 ff ff       	call   c001f5ac <Vm::fpuSetReg(int, unsigned long long)>
c00200c6:	e9 f2 f7 ff ff       	jmp    c001f8bd <Vm::x87Handler(regs*)+0x217>
c00200cb:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00200cf:	80 fa 05             	cmp    dl,0x5
c00200d2:	75 11                	jne    c00200e5 <Vm::x87Handler(regs*)+0xa3f>
c00200d4:	55                   	push   ebp
c00200d5:	55                   	push   ebp
c00200d6:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00200d9:	ff 36                	push   DWORD PTR [esi]
c00200db:	e8 81 f2 ff ff       	call   c001f361 <Vm::fpuULongToFloat(unsigned long long)>
c00200e0:	e9 cf f7 ff ff       	jmp    c001f8b4 <Vm::x87Handler(regs*)+0x20e>
c00200e5:	31 c0                	xor    eax,eax
c00200e7:	80 fa 07             	cmp    dl,0x7
c00200ea:	75 1b                	jne    c0020107 <Vm::x87Handler(regs*)+0xa61>
c00200ec:	e8 63 f5 ff ff       	call   c001f654 <Vm::fpuPop()>
c00200f1:	51                   	push   ecx
c00200f2:	51                   	push   ecx
c00200f3:	52                   	push   edx
c00200f4:	50                   	push   eax
c00200f5:	e8 0c f2 ff ff       	call   c001f306 <Vm::fpuFloatToLong(unsigned long long)>
c00200fa:	83 c4 10             	add    esp,0x10
c00200fd:	89 06                	mov    DWORD PTR [esi],eax
c00200ff:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020102:	e9 f8 f7 ff ff       	jmp    c001f8ff <Vm::x87Handler(regs*)+0x259>
c0020107:	83 c4 1c             	add    esp,0x1c
c002010a:	5b                   	pop    ebx
c002010b:	5e                   	pop    esi
c002010c:	5f                   	pop    edi
c002010d:	5d                   	pop    ebp
c002010e:	c3                   	ret    

c002010f <__static_initialization_and_destruction_0(int, int)>:
c002010f:	83 ec 0c             	sub    esp,0xc
c0020112:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020117:	75 1a                	jne    c0020133 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020119:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020121:	75 10                	jne    c0020133 <__static_initialization_and_destruction_0(int, int)+0x24>
c0020123:	83 ec 0c             	sub    esp,0xc
c0020126:	68 e0 15 03 c0       	push   0xc00315e0
c002012b:	e8 10 88 00 00       	call   c0028940 <Vm::_FPUState::_FPUState()>
c0020130:	83 c4 10             	add    esp,0x10
c0020133:	90                   	nop
c0020134:	83 c4 0c             	add    esp,0xc
c0020137:	c3                   	ret    

c0020138 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020138:	83 ec 0c             	sub    esp,0xc
c002013b:	83 ec 08             	sub    esp,0x8
c002013e:	68 ff ff 00 00       	push   0xffff
c0020143:	6a 01                	push   0x1
c0020145:	e8 c5 ff ff ff       	call   c002010f <__static_initialization_and_destruction_0(int, int)>
c002014a:	83 c4 10             	add    esp,0x10
c002014d:	83 c4 0c             	add    esp,0xc
c0020150:	c3                   	ret    
c0020151:	90                   	nop

c0020152 <FAT::getName()>:
c0020152:	b8 e8 c3 02 c0       	mov    eax,0xc002c3e8
c0020157:	c3                   	ret    

c0020158 <FAT::tell(void*, unsigned long long*)>:
c0020158:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c002015d:	75 06                	jne    c0020165 <FAT::tell(void*, unsigned long long*)+0xd>
c002015f:	b8 04 00 00 00       	mov    eax,0x4
c0020164:	c3                   	ret    
c0020165:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002016a:	75 06                	jne    c0020172 <FAT::tell(void*, unsigned long long*)+0x1a>
c002016c:	b8 04 00 00 00       	mov    eax,0x4
c0020171:	c3                   	ret    
c0020172:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020176:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020179:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c002017c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020180:	89 01                	mov    DWORD PTR [ecx],eax
c0020182:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020185:	b8 00 00 00 00       	mov    eax,0x0
c002018a:	c3                   	ret    
c002018b:	90                   	nop

c002018c <FAT::stat(void*, unsigned long long*)>:
c002018c:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020191:	75 06                	jne    c0020199 <FAT::stat(void*, unsigned long long*)+0xd>
c0020193:	b8 04 00 00 00       	mov    eax,0x4
c0020198:	c3                   	ret    
c0020199:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002019e:	75 06                	jne    c00201a6 <FAT::stat(void*, unsigned long long*)+0x1a>
c00201a0:	b8 04 00 00 00       	mov    eax,0x4
c00201a5:	c3                   	ret    
c00201a6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00201aa:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00201ad:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00201b0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00201b4:	89 01                	mov    DWORD PTR [ecx],eax
c00201b6:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00201b9:	b8 00 00 00 00       	mov    eax,0x0
c00201be:	c3                   	ret    
c00201bf:	90                   	nop

c00201c0 <FAT::~FAT()>:
c00201c0:	83 ec 0c             	sub    esp,0xc
c00201c3:	ba 6c c4 02 c0       	mov    edx,0xc002c46c
c00201c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201cc:	89 10                	mov    DWORD PTR [eax],edx
c00201ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00201d2:	83 ec 0c             	sub    esp,0xc
c00201d5:	50                   	push   eax
c00201d6:	e8 bf 2c ff ff       	call   c0012e9a <Filesystem::~Filesystem()>
c00201db:	83 c4 10             	add    esp,0x10
c00201de:	90                   	nop
c00201df:	83 c4 0c             	add    esp,0xc
c00201e2:	c3                   	ret    
c00201e3:	90                   	nop

c00201e4 <FAT::~FAT()>:
c00201e4:	83 ec 0c             	sub    esp,0xc
c00201e7:	83 ec 0c             	sub    esp,0xc
c00201ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201ee:	e8 cd ff ff ff       	call   c00201c0 <FAT::~FAT()>
c00201f3:	83 c4 10             	add    esp,0x10
c00201f6:	83 ec 08             	sub    esp,0x8
c00201f9:	6a 08                	push   0x8
c00201fb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00201ff:	e8 8d 28 ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0020204:	83 c4 10             	add    esp,0x10
c0020207:	83 c4 0c             	add    esp,0xc
c002020a:	c3                   	ret    
c002020b:	90                   	nop

c002020c <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c002020c:	83 ec 1c             	sub    esp,0x1c
c002020f:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020216:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c002021b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002021f:	8b 04 85 60 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce9a0]
c0020226:	83 f8 ff             	cmp    eax,0xffffffff
c0020229:	75 34                	jne    c002025f <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c002022b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c002022f:	88 c2                	mov    dl,al
c0020231:	a1 40 16 03 c0       	mov    eax,ds:0xc0031640
c0020236:	01 d0                	add    eax,edx
c0020238:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c002023c:	8b 15 40 16 03 c0    	mov    edx,DWORD PTR ds:0xc0031640
c0020242:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020246:	89 14 85 60 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce9a0],edx
c002024d:	a1 40 16 03 c0       	mov    eax,ds:0xc0031640
c0020252:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020256:	89 14 85 e0 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce920],edx
c002025d:	eb 17                	jmp    c0020276 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c002025f:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020263:	88 c2                	mov    dl,al
c0020265:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020269:	8b 04 85 60 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce9a0]
c0020270:	01 d0                	add    eax,edx
c0020272:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020276:	83 ec 04             	sub    esp,0x4
c0020279:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002027d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020281:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020285:	50                   	push   eax
c0020286:	e8 ad 6a fe ff       	call   c0006d38 <f_getlabel>
c002028b:	83 c4 10             	add    esp,0x10
c002028e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020292:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020297:	75 07                	jne    c00202a0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020299:	b8 00 00 00 00       	mov    eax,0x0
c002029e:	eb 05                	jmp    c00202a5 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c00202a0:	b8 01 00 00 00       	mov    eax,0x1
c00202a5:	83 c4 1c             	add    esp,0x1c
c00202a8:	c3                   	ret    
c00202a9:	90                   	nop

c00202aa <FAT::setlabel(LogicalDisk*, int, char*)>:
c00202aa:	57                   	push   edi
c00202ab:	83 ec 58             	sub    esp,0x58
c00202ae:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c00202b6:	8d 54 24 10          	lea    edx,[esp+0x10]
c00202ba:	b9 0f 00 00 00       	mov    ecx,0xf
c00202bf:	b8 00 00 00 00       	mov    eax,0x0
c00202c4:	fc                   	cld    
c00202c5:	89 d7                	mov    edi,edx
c00202c7:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00202c9:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00202cd:	8b 04 85 60 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce9a0]
c00202d4:	83 f8 ff             	cmp    eax,0xffffffff
c00202d7:	75 34                	jne    c002030d <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c00202d9:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00202dd:	88 c2                	mov    dl,al
c00202df:	a1 40 16 03 c0       	mov    eax,ds:0xc0031640
c00202e4:	01 d0                	add    eax,edx
c00202e6:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00202ea:	8b 15 40 16 03 c0    	mov    edx,DWORD PTR ds:0xc0031640
c00202f0:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00202f4:	89 14 85 60 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce9a0],edx
c00202fb:	a1 40 16 03 c0       	mov    eax,ds:0xc0031640
c0020300:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020304:	89 14 85 e0 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce920],edx
c002030b:	eb 17                	jmp    c0020324 <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c002030d:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020311:	88 c2                	mov    dl,al
c0020313:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020317:	8b 04 85 60 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce9a0]
c002031e:	01 d0                	add    eax,edx
c0020320:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020324:	83 ec 08             	sub    esp,0x8
c0020327:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c002032b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002032f:	50                   	push   eax
c0020330:	e8 3f 06 fe ff       	call   c0000974 <strcat>
c0020335:	83 c4 10             	add    esp,0x10
c0020338:	83 ec 0c             	sub    esp,0xc
c002033b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002033f:	50                   	push   eax
c0020340:	e8 e1 6b fe ff       	call   c0006f26 <f_setlabel>
c0020345:	83 c4 10             	add    esp,0x10
c0020348:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c002034c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020351:	75 07                	jne    c002035a <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020353:	b8 00 00 00 00       	mov    eax,0x0
c0020358:	eb 05                	jmp    c002035f <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c002035a:	b8 01 00 00 00       	mov    eax,0x1
c002035f:	83 c4 58             	add    esp,0x58
c0020362:	5f                   	pop    edi
c0020363:	c3                   	ret    

c0020364 <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020364:	83 ec 2c             	sub    esp,0x2c
c0020367:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c002036f:	83 ec 08             	sub    esp,0x8
c0020372:	68 0c c4 02 c0       	push   0xc002c40c
c0020377:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002037b:	e8 40 05 fe ff       	call   c00008c0 <strcmp>
c0020380:	83 c4 10             	add    esp,0x10
c0020383:	85 c0                	test   eax,eax
c0020385:	0f 94 c0             	sete   al
c0020388:	84 c0                	test   al,al
c002038a:	74 0d                	je     c0020399 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c002038c:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020394:	e9 a6 00 00 00       	jmp    c002043f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020399:	83 ec 08             	sub    esp,0x8
c002039c:	68 fe c3 02 c0       	push   0xc002c3fe
c00203a1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00203a5:	e8 16 05 fe ff       	call   c00008c0 <strcmp>
c00203aa:	83 c4 10             	add    esp,0x10
c00203ad:	85 c0                	test   eax,eax
c00203af:	0f 94 c0             	sete   al
c00203b2:	84 c0                	test   al,al
c00203b4:	74 0a                	je     c00203c0 <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c00203b6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00203be:	eb 7f                	jmp    c002043f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00203c0:	83 ec 08             	sub    esp,0x8
c00203c3:	68 04 c4 02 c0       	push   0xc002c404
c00203c8:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00203cc:	e8 ef 04 fe ff       	call   c00008c0 <strcmp>
c00203d1:	83 c4 10             	add    esp,0x10
c00203d4:	85 c0                	test   eax,eax
c00203d6:	0f 94 c0             	sete   al
c00203d9:	84 c0                	test   al,al
c00203db:	74 0a                	je     c00203e7 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c00203dd:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c00203e5:	eb 58                	jmp    c002043f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c00203e7:	83 ec 08             	sub    esp,0x8
c00203ea:	68 ac 90 02 c0       	push   0xc00290ac
c00203ef:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00203f3:	e8 c8 04 fe ff       	call   c00008c0 <strcmp>
c00203f8:	83 c4 10             	add    esp,0x10
c00203fb:	85 c0                	test   eax,eax
c00203fd:	0f 94 c0             	sete   al
c0020400:	84 c0                	test   al,al
c0020402:	74 0a                	je     c002040e <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020404:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c002040c:	eb 31                	jmp    c002043f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c002040e:	83 ec 08             	sub    esp,0x8
c0020411:	68 0a c4 02 c0       	push   0xc002c40a
c0020416:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c002041a:	e8 a1 04 fe ff       	call   c00008c0 <strcmp>
c002041f:	83 c4 10             	add    esp,0x10
c0020422:	85 c0                	test   eax,eax
c0020424:	0f 94 c0             	sete   al
c0020427:	84 c0                	test   al,al
c0020429:	74 0a                	je     c0020435 <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c002042b:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020433:	eb 0a                	jmp    c002043f <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020435:	b8 08 00 00 00       	mov    eax,0x8
c002043a:	e9 04 01 00 00       	jmp    c0020543 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002043f:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020446:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c002044b:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002044f:	8b 04 85 60 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce9a0]
c0020456:	83 f8 ff             	cmp    eax,0xffffffff
c0020459:	75 34                	jne    c002048f <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c002045b:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c002045f:	88 c2                	mov    dl,al
c0020461:	a1 40 16 03 c0       	mov    eax,ds:0xc0031640
c0020466:	01 d0                	add    eax,edx
c0020468:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c002046c:	8b 15 40 16 03 c0    	mov    edx,DWORD PTR ds:0xc0031640
c0020472:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020476:	89 14 85 60 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce9a0],edx
c002047d:	a1 40 16 03 c0       	mov    eax,ds:0xc0031640
c0020482:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020486:	89 14 85 e0 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce920],edx
c002048d:	eb 17                	jmp    c00204a6 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c002048f:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020493:	88 c2                	mov    dl,al
c0020495:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020499:	8b 04 85 60 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce9a0]
c00204a0:	01 d0                	add    eax,edx
c00204a2:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c00204a6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00204aa:	88 04 24             	mov    BYTE PTR [esp],al
c00204ad:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00204b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00204b5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00204bd:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c00204c2:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00204ca:	83 ec 0c             	sub    esp,0xc
c00204cd:	68 00 20 00 00       	push   0x2000
c00204d2:	e8 69 f3 fe ff       	call   c000f840 <malloc>
c00204d7:	83 c4 10             	add    esp,0x10
c00204da:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00204de:	68 00 20 00 00       	push   0x2000
c00204e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00204e7:	8d 44 24 08          	lea    eax,[esp+0x8]
c00204eb:	50                   	push   eax
c00204ec:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c00204f0:	50                   	push   eax
c00204f1:	e8 7b 6e fe ff       	call   c0007371 <f_mkfs>
c00204f6:	83 c4 10             	add    esp,0x10
c00204f9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00204fd:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020502:	75 07                	jne    c002050b <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020504:	b8 00 00 00 00       	mov    eax,0x0
c0020509:	eb 38                	jmp    c0020543 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c002050b:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020510:	75 17                	jne    c0020529 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020512:	83 ec 0c             	sub    esp,0xc
c0020515:	68 3c c4 02 c0       	push   0xc002c43c
c002051a:	e8 52 26 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c002051f:	83 c4 10             	add    esp,0x10
c0020522:	b8 09 00 00 00       	mov    eax,0x9
c0020527:	eb 1a                	jmp    c0020543 <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020529:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002052d:	83 ec 08             	sub    esp,0x8
c0020530:	50                   	push   eax
c0020531:	68 10 c4 02 c0       	push   0xc002c410
c0020536:	e8 36 26 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c002053b:	83 c4 10             	add    esp,0x10
c002053e:	b8 01 00 00 00       	mov    eax,0x1
c0020543:	83 c4 2c             	add    esp,0x2c
c0020546:	c3                   	ret    
c0020547:	90                   	nop

c0020548 <FAT::tryMount(LogicalDisk*, int)>:
c0020548:	81 ec 6c 03 00 00    	sub    esp,0x36c
c002054e:	a1 40 16 03 c0       	mov    eax,ds:0xc0031640
c0020553:	83 f8 14             	cmp    eax,0x14
c0020556:	75 17                	jne    c002056f <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020558:	83 ec 0c             	sub    esp,0xc
c002055b:	68 22 c4 02 c0       	push   0xc002c422
c0020560:	e8 88 9c ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c0020565:	83 c4 10             	add    esp,0x10
c0020568:	b0 00                	mov    al,0x0
c002056a:	e9 d7 01 00 00       	jmp    c0020746 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002056f:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020576:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c002057c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020582:	3d 00 02 00 00       	cmp    eax,0x200
c0020587:	74 07                	je     c0020590 <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020589:	b0 00                	mov    al,0x0
c002058b:	e9 b6 01 00 00       	jmp    c0020746 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020590:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020598:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c002059f:	8b 04 85 60 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce9a0]
c00205a6:	83 f8 ff             	cmp    eax,0xffffffff
c00205a9:	74 07                	je     c00205b2 <FAT::tryMount(LogicalDisk*, int)+0x6a>
c00205ab:	b0 01                	mov    al,0x1
c00205ad:	e9 94 01 00 00       	jmp    c0020746 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c00205b2:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c00205bc:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c00205c4:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c00205cb:	88 c2                	mov    dl,al
c00205cd:	a1 40 16 03 c0       	mov    eax,ds:0xc0031640
c00205d2:	01 d0                	add    eax,edx
c00205d4:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c00205db:	8b 15 40 16 03 c0    	mov    edx,DWORD PTR ds:0xc0031640
c00205e1:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c00205e8:	89 14 85 60 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce9a0],edx
c00205ef:	a1 40 16 03 c0       	mov    eax,ds:0xc0031640
c00205f4:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c00205fb:	89 14 85 e0 16 03 c0 	mov    DWORD PTR [eax*4-0x3ffce920],edx
c0020602:	83 ec 0c             	sub    esp,0xc
c0020605:	68 54 02 00 00       	push   0x254
c002060a:	e8 31 f2 fe ff       	call   c000f840 <malloc>
c002060f:	83 c4 10             	add    esp,0x10
c0020612:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0020619:	83 ec 04             	sub    esp,0x4
c002061c:	6a 00                	push   0x0
c002061e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020625:	50                   	push   eax
c0020626:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002062d:	e8 fd 48 fe ff       	call   c0004f2f <f_mount>
c0020632:	83 c4 10             	add    esp,0x10
c0020635:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c002063c:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c0020644:	74 19                	je     c002065f <FAT::tryMount(LogicalDisk*, int)+0x117>
c0020646:	83 ec 0c             	sub    esp,0xc
c0020649:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020650:	e8 0b f2 fe ff       	call   c000f860 <rfree>
c0020655:	83 c4 10             	add    esp,0x10
c0020658:	b0 00                	mov    al,0x0
c002065a:	e9 e7 00 00 00       	jmp    c0020746 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002065f:	83 ec 04             	sub    esp,0x4
c0020662:	68 00 01 00 00       	push   0x100
c0020667:	6a 00                	push   0x0
c0020669:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c0020670:	50                   	push   eax
c0020671:	e8 02 01 fe ff       	call   c0000778 <memset>
c0020676:	83 c4 10             	add    esp,0x10
c0020679:	83 ec 08             	sub    esp,0x8
c002067c:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020683:	50                   	push   eax
c0020684:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002068b:	50                   	push   eax
c002068c:	e8 e3 02 fe ff       	call   c0000974 <strcat>
c0020691:	83 c4 10             	add    esp,0x10
c0020694:	83 ec 08             	sub    esp,0x8
c0020697:	68 30 c4 02 c0       	push   0xc002c430
c002069c:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00206a3:	50                   	push   eax
c00206a4:	e8 cb 02 fe ff       	call   c0000974 <strcat>
c00206a9:	83 c4 10             	add    esp,0x10
c00206ac:	83 ec 04             	sub    esp,0x4
c00206af:	6a 01                	push   0x1
c00206b1:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00206b8:	50                   	push   eax
c00206b9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00206bd:	50                   	push   eax
c00206be:	e8 ce 48 fe ff       	call   c0004f91 <f_open>
c00206c3:	83 c4 10             	add    esp,0x10
c00206c6:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00206cd:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00206d4:	85 c0                	test   eax,eax
c00206d6:	74 0a                	je     c00206e2 <FAT::tryMount(LogicalDisk*, int)+0x19a>
c00206d8:	78 2d                	js     c0020707 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00206da:	83 e8 04             	sub    eax,0x4
c00206dd:	83 f8 01             	cmp    eax,0x1
c00206e0:	77 25                	ja     c0020707 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c00206e2:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c00206ea:	83 ec 0c             	sub    esp,0xc
c00206ed:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00206f1:	50                   	push   eax
c00206f2:	e8 ec 53 fe ff       	call   c0005ae3 <f_close>
c00206f7:	83 c4 10             	add    esp,0x10
c00206fa:	90                   	nop
c00206fb:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c0020703:	74 3a                	je     c002073f <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c0020705:	eb 2d                	jmp    c0020734 <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0020707:	83 ec 0c             	sub    esp,0xc
c002070a:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0020711:	e8 4a f1 fe ff       	call   c000f860 <rfree>
c0020716:	83 c4 10             	add    esp,0x10
c0020719:	83 ec 04             	sub    esp,0x4
c002071c:	6a 00                	push   0x0
c002071e:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c0020725:	50                   	push   eax
c0020726:	6a 00                	push   0x0
c0020728:	e8 02 48 fe ff       	call   c0004f2f <f_mount>
c002072d:	83 c4 10             	add    esp,0x10
c0020730:	b0 00                	mov    al,0x0
c0020732:	eb 12                	jmp    c0020746 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020734:	a1 40 16 03 c0       	mov    eax,ds:0xc0031640
c0020739:	40                   	inc    eax
c002073a:	a3 40 16 03 c0       	mov    ds:0xc0031640,eax
c002073f:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0020746:	81 c4 6c 03 00 00    	add    esp,0x36c
c002074c:	c3                   	ret    
c002074d:	90                   	nop

c002074e <FAT::readDir(void*, unsigned long, void*, int*)>:
c002074e:	81 ec 3c 02 00 00    	sub    esp,0x23c
c0020754:	83 bc 24 44 02 00 00 00 	cmp    DWORD PTR [esp+0x244],0x0
c002075c:	74 0a                	je     c0020768 <FAT::readDir(void*, unsigned long, void*, int*)+0x1a>
c002075e:	83 bc 24 50 02 00 00 00 	cmp    DWORD PTR [esp+0x250],0x0
c0020766:	75 0a                	jne    c0020772 <FAT::readDir(void*, unsigned long, void*, int*)+0x24>
c0020768:	b8 04 00 00 00       	mov    eax,0x4
c002076d:	e9 db 00 00 00       	jmp    c002084d <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020772:	83 ec 08             	sub    esp,0x8
c0020775:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002077c:	50                   	push   eax
c002077d:	ff b4 24 50 02 00 00 	push   DWORD PTR [esp+0x250]
c0020784:	e8 64 59 fe ff       	call   c00060ed <f_readdir>
c0020789:	83 c4 10             	add    esp,0x10
c002078c:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c0020793:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0020799:	83 ec 0c             	sub    esp,0xc
c002079c:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c00207a3:	83 c0 1a             	add    eax,0x1a
c00207a6:	50                   	push   eax
c00207a7:	e8 e8 ff fd ff       	call   c0000794 <strlen>
c00207ac:	83 c4 10             	add    esp,0x10
c00207af:	ba 00 00 00 00       	mov    edx,0x0
c00207b4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00207b8:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00207bc:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c00207c3:	0f b6 c0             	movzx  eax,al
c00207c6:	83 e0 10             	and    eax,0x10
c00207c9:	74 07                	je     c00207d2 <FAT::readDir(void*, unsigned long, void*, int*)+0x84>
c00207cb:	b8 02 00 00 00       	mov    eax,0x2
c00207d0:	eb 05                	jmp    c00207d7 <FAT::readDir(void*, unsigned long, void*, int*)+0x89>
c00207d2:	b8 01 00 00 00       	mov    eax,0x1
c00207d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00207db:	83 ec 08             	sub    esp,0x8
c00207de:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00207e5:	83 c0 1a             	add    eax,0x1a
c00207e8:	50                   	push   eax
c00207e9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00207ed:	83 c0 10             	add    eax,0x10
c00207f0:	50                   	push   eax
c00207f1:	e8 3e 00 fe ff       	call   c0000834 <strcpy>
c00207f6:	83 c4 10             	add    esp,0x10
c00207f9:	83 ec 04             	sub    esp,0x4
c00207fc:	ff b4 24 4c 02 00 00 	push   DWORD PTR [esp+0x24c]
c0020803:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020807:	50                   	push   eax
c0020808:	ff b4 24 58 02 00 00 	push   DWORD PTR [esp+0x258]
c002080f:	e8 30 ff fd ff       	call   c0000744 <memcpy>
c0020814:	83 c4 10             	add    esp,0x10
c0020817:	8b 84 24 50 02 00 00 	mov    eax,DWORD PTR [esp+0x250]
c002081e:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0020824:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c002082b:	84 c0                	test   al,al
c002082d:	75 07                	jne    c0020836 <FAT::readDir(void*, unsigned long, void*, int*)+0xe8>
c002082f:	b8 07 00 00 00       	mov    eax,0x7
c0020834:	eb 17                	jmp    c002084d <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020836:	8b 84 24 2c 02 00 00 	mov    eax,DWORD PTR [esp+0x22c]
c002083d:	85 c0                	test   eax,eax
c002083f:	75 07                	jne    c0020848 <FAT::readDir(void*, unsigned long, void*, int*)+0xfa>
c0020841:	b8 00 00 00 00       	mov    eax,0x0
c0020846:	eb 05                	jmp    c002084d <FAT::readDir(void*, unsigned long, void*, int*)+0xff>
c0020848:	b8 01 00 00 00       	mov    eax,0x1
c002084d:	81 c4 3c 02 00 00    	add    esp,0x23c
c0020853:	c3                   	ret    

c0020854 <FAT::read(void*, unsigned long, void*, int*)>:
c0020854:	83 ec 1c             	sub    esp,0x1c
c0020857:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002085c:	74 07                	je     c0020865 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c002085e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0020863:	75 07                	jne    c002086c <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0020865:	b8 04 00 00 00       	mov    eax,0x4
c002086a:	eb 3d                	jmp    c00208a9 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002086c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020870:	50                   	push   eax
c0020871:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0020875:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020879:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002087d:	e8 4b 4b fe ff       	call   c00053cd <f_read>
c0020882:	83 c4 10             	add    esp,0x10
c0020885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020889:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002088d:	89 c2                	mov    edx,eax
c002088f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0020893:	89 10                	mov    DWORD PTR [eax],edx
c0020895:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020899:	85 c0                	test   eax,eax
c002089b:	75 07                	jne    c00208a4 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c002089d:	b8 00 00 00 00       	mov    eax,0x0
c00208a2:	eb 05                	jmp    c00208a9 <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00208a4:	b8 01 00 00 00       	mov    eax,0x1
c00208a9:	83 c4 1c             	add    esp,0x1c
c00208ac:	c3                   	ret    
c00208ad:	90                   	nop

c00208ae <FAT::write(void*, unsigned long, void*, int*)>:
c00208ae:	83 ec 1c             	sub    esp,0x1c
c00208b1:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00208b6:	74 07                	je     c00208bf <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00208b8:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00208bd:	75 07                	jne    c00208c6 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00208bf:	b8 04 00 00 00       	mov    eax,0x4
c00208c4:	eb 3d                	jmp    c0020903 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00208c6:	8d 44 24 08          	lea    eax,[esp+0x8]
c00208ca:	50                   	push   eax
c00208cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00208cf:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00208d3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00208d7:	e8 71 4d fe ff       	call   c000564d <f_write>
c00208dc:	83 c4 10             	add    esp,0x10
c00208df:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00208e3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00208e7:	89 c2                	mov    edx,eax
c00208e9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00208ed:	89 10                	mov    DWORD PTR [eax],edx
c00208ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00208f3:	85 c0                	test   eax,eax
c00208f5:	75 07                	jne    c00208fe <FAT::write(void*, unsigned long, void*, int*)+0x50>
c00208f7:	b8 00 00 00 00       	mov    eax,0x0
c00208fc:	eb 05                	jmp    c0020903 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00208fe:	b8 01 00 00 00       	mov    eax,0x1
c0020903:	83 c4 1c             	add    esp,0x1c
c0020906:	c3                   	ret    
c0020907:	90                   	nop

c0020908 <FAT::close(void*)>:
c0020908:	83 ec 1c             	sub    esp,0x1c
c002090b:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0020910:	75 07                	jne    c0020919 <FAT::close(void*)+0x11>
c0020912:	b8 04 00 00 00       	mov    eax,0x4
c0020917:	eb 36                	jmp    c002094f <FAT::close(void*)+0x47>
c0020919:	83 ec 0c             	sub    esp,0xc
c002091c:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020920:	e8 be 51 fe ff       	call   c0005ae3 <f_close>
c0020925:	83 c4 10             	add    esp,0x10
c0020928:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002092c:	83 ec 0c             	sub    esp,0xc
c002092f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020933:	e8 18 ef fe ff       	call   c000f850 <free>
c0020938:	83 c4 10             	add    esp,0x10
c002093b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002093f:	85 c0                	test   eax,eax
c0020941:	75 07                	jne    c002094a <FAT::close(void*)+0x42>
c0020943:	b8 00 00 00 00       	mov    eax,0x0
c0020948:	eb 05                	jmp    c002094f <FAT::close(void*)+0x47>
c002094a:	b8 01 00 00 00       	mov    eax,0x1
c002094f:	83 c4 1c             	add    esp,0x1c
c0020952:	c3                   	ret    
c0020953:	90                   	nop

c0020954 <FAT::closeDir(void*)>:
c0020954:	83 ec 1c             	sub    esp,0x1c
c0020957:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002095c:	75 07                	jne    c0020965 <FAT::closeDir(void*)+0x11>
c002095e:	b8 04 00 00 00       	mov    eax,0x4
c0020963:	eb 36                	jmp    c002099b <FAT::closeDir(void*)+0x47>
c0020965:	83 ec 0c             	sub    esp,0xc
c0020968:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002096c:	e8 5a 57 fe ff       	call   c00060cb <f_closedir>
c0020971:	83 c4 10             	add    esp,0x10
c0020974:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020978:	83 ec 0c             	sub    esp,0xc
c002097b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002097f:	e8 cc ee fe ff       	call   c000f850 <free>
c0020984:	83 c4 10             	add    esp,0x10
c0020987:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002098b:	85 c0                	test   eax,eax
c002098d:	75 07                	jne    c0020996 <FAT::closeDir(void*)+0x42>
c002098f:	b8 00 00 00 00       	mov    eax,0x0
c0020994:	eb 05                	jmp    c002099b <FAT::closeDir(void*)+0x47>
c0020996:	b8 01 00 00 00       	mov    eax,0x1
c002099b:	83 c4 1c             	add    esp,0x1c
c002099e:	c3                   	ret    
c002099f:	90                   	nop

c00209a0 <FAT::seek(void*, unsigned long long)>:
c00209a0:	83 ec 2c             	sub    esp,0x2c
c00209a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00209a7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00209ab:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00209af:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00209b3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00209b8:	75 07                	jne    c00209c1 <FAT::seek(void*, unsigned long long)+0x21>
c00209ba:	b8 04 00 00 00       	mov    eax,0x4
c00209bf:	eb 2f                	jmp    c00209f0 <FAT::seek(void*, unsigned long long)+0x50>
c00209c1:	83 ec 04             	sub    esp,0x4
c00209c4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00209c8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00209cc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00209d0:	e8 3d 51 fe ff       	call   c0005b12 <f_lseek>
c00209d5:	83 c4 10             	add    esp,0x10
c00209d8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00209dc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00209e0:	85 c0                	test   eax,eax
c00209e2:	75 07                	jne    c00209eb <FAT::seek(void*, unsigned long long)+0x4b>
c00209e4:	b8 00 00 00 00       	mov    eax,0x0
c00209e9:	eb 05                	jmp    c00209f0 <FAT::seek(void*, unsigned long long)+0x50>
c00209eb:	b8 01 00 00 00       	mov    eax,0x1
c00209f0:	83 c4 2c             	add    esp,0x2c
c00209f3:	c3                   	ret    

c00209f4 <fatWrapperReadDisk>:
c00209f4:	83 ec 1c             	sub    esp,0x1c
c00209f7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00209fb:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00209ff:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020a03:	89 04 24             	mov    DWORD PTR [esp],eax
c0020a06:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020a0a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020a0e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020a13:	8b 04 85 20 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd19e0]
c0020a1a:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020a1e:	83 ec 0c             	sub    esp,0xc
c0020a21:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020a25:	52                   	push   edx
c0020a26:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020a2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020a2e:	50                   	push   eax
c0020a2f:	e8 28 59 ff ff       	call   c001635c <LogicalDisk::read(unsigned long long, int, void*)>
c0020a34:	83 c4 20             	add    esp,0x20
c0020a37:	83 c4 1c             	add    esp,0x1c
c0020a3a:	c3                   	ret    

c0020a3b <fatWrapperWriteDisk>:
c0020a3b:	83 ec 1c             	sub    esp,0x1c
c0020a3e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020a42:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020a46:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020a4a:	89 04 24             	mov    DWORD PTR [esp],eax
c0020a4d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0020a51:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0020a55:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020a5a:	8b 04 85 20 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd19e0]
c0020a61:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020a65:	83 ec 0c             	sub    esp,0xc
c0020a68:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0020a6c:	52                   	push   edx
c0020a6d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020a71:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0020a75:	50                   	push   eax
c0020a76:	e8 4d 59 ff ff       	call   c00163c8 <LogicalDisk::write(unsigned long long, int, void*)>
c0020a7b:	83 c4 20             	add    esp,0x20
c0020a7e:	83 c4 1c             	add    esp,0x1c
c0020a81:	c3                   	ret    

c0020a82 <fatWrapperIoctl>:
c0020a82:	53                   	push   ebx
c0020a83:	83 ec 28             	sub    esp,0x28
c0020a86:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0020a8a:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0020a8e:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020a92:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020a96:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c0020a9b:	75 31                	jne    c0020ace <fatWrapperIoctl+0x4c>
c0020a9d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020aa1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0020aa5:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020aaa:	8b 04 85 20 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd19e0]
c0020ab1:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020ab7:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020abd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0020ac1:	66 89 02             	mov    WORD PTR [edx],ax
c0020ac4:	b8 00 00 00 00       	mov    eax,0x0
c0020ac9:	e9 b2 00 00 00       	jmp    c0020b80 <fatWrapperIoctl+0xfe>
c0020ace:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0020ad3:	75 6a                	jne    c0020b3f <fatWrapperIoctl+0xbd>
c0020ad5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ad9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020add:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ae2:	8b 04 85 20 e6 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd19e0]
c0020ae9:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020aef:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0020af5:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0020afb:	89 c8                	mov    eax,ecx
c0020afd:	89 da                	mov    edx,ebx
c0020aff:	0f a4 c2 0a          	shld   edx,eax,0xa
c0020b03:	c1 e0 0a             	shl    eax,0xa
c0020b06:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0020b0b:	8b 0c 8d 20 e6 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd19e0]
c0020b12:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0020b18:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0020b1e:	89 cb                	mov    ebx,ecx
c0020b20:	c1 fb 1f             	sar    ebx,0x1f
c0020b23:	53                   	push   ebx
c0020b24:	51                   	push   ecx
c0020b25:	52                   	push   edx
c0020b26:	50                   	push   eax
c0020b27:	e8 c0 5a 00 00       	call   c00265ec <__udivdi3>
c0020b2c:	83 c4 10             	add    esp,0x10
c0020b2f:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0020b33:	89 01                	mov    DWORD PTR [ecx],eax
c0020b35:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020b38:	b8 00 00 00 00       	mov    eax,0x0
c0020b3d:	eb 41                	jmp    c0020b80 <fatWrapperIoctl+0xfe>
c0020b3f:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0020b44:	75 07                	jne    c0020b4d <fatWrapperIoctl+0xcb>
c0020b46:	b8 00 00 00 00       	mov    eax,0x0
c0020b4b:	eb 33                	jmp    c0020b80 <fatWrapperIoctl+0xfe>
c0020b4d:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0020b52:	75 19                	jne    c0020b6d <fatWrapperIoctl+0xeb>
c0020b54:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020b58:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020b5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020b60:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0020b66:	b8 00 00 00 00       	mov    eax,0x0
c0020b6b:	eb 13                	jmp    c0020b80 <fatWrapperIoctl+0xfe>
c0020b6d:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0020b72:	75 07                	jne    c0020b7b <fatWrapperIoctl+0xf9>
c0020b74:	b8 00 00 00 00       	mov    eax,0x0
c0020b79:	eb 05                	jmp    c0020b80 <fatWrapperIoctl+0xfe>
c0020b7b:	b8 04 00 00 00       	mov    eax,0x4
c0020b80:	83 c4 28             	add    esp,0x28
c0020b83:	5b                   	pop    ebx
c0020b84:	c3                   	ret    
c0020b85:	90                   	nop

c0020b86 <FAT::FAT()>:
c0020b86:	83 ec 1c             	sub    esp,0x1c
c0020b89:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020b8d:	83 ec 0c             	sub    esp,0xc
c0020b90:	50                   	push   eax
c0020b91:	e8 e0 22 ff ff       	call   c0012e76 <Filesystem::Filesystem()>
c0020b96:	83 c4 10             	add    esp,0x10
c0020b99:	ba 6c c4 02 c0       	mov    edx,0xc002c46c
c0020b9e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0020ba2:	89 10                	mov    DWORD PTR [eax],edx
c0020ba4:	c7 05 40 16 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0031640,0x0
c0020bae:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0020bb6:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c0020bbb:	7f 15                	jg     c0020bd2 <FAT::FAT()+0x4c>
c0020bbd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0020bc1:	c7 04 85 60 16 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffce9a0],0xffffffff
c0020bcc:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0020bd0:	eb e4                	jmp    c0020bb6 <FAT::FAT()+0x30>
c0020bd2:	90                   	nop
c0020bd3:	83 c4 1c             	add    esp,0x1c
c0020bd6:	c3                   	ret    
c0020bd7:	90                   	nop

c0020bd8 <FAT::fixFilepath(char*)>:
c0020bd8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020bdc:	8a 00                	mov    al,BYTE PTR [eax]
c0020bde:	3c 40                	cmp    al,0x40
c0020be0:	7e 2c                	jle    c0020c0e <FAT::fixFilepath(char*)+0x36>
c0020be2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020be6:	8a 00                	mov    al,BYTE PTR [eax]
c0020be8:	83 e8 41             	sub    eax,0x41
c0020beb:	88 c2                	mov    dl,al
c0020bed:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020bf1:	88 10                	mov    BYTE PTR [eax],dl
c0020bf3:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020bf7:	8a 00                	mov    al,BYTE PTR [eax]
c0020bf9:	0f be c0             	movsx  eax,al
c0020bfc:	8b 04 85 60 16 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce9a0]
c0020c03:	83 c0 30             	add    eax,0x30
c0020c06:	88 c2                	mov    dl,al
c0020c08:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020c0c:	88 10                	mov    BYTE PTR [eax],dl
c0020c0e:	90                   	nop
c0020c0f:	c3                   	ret    

c0020c10 <FAT::open(char const*, void**, FileOpenMode)>:
c0020c10:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020c16:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020c1e:	74 0a                	je     c0020c2a <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0020c20:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020c28:	75 0a                	jne    c0020c34 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c0020c2a:	b8 04 00 00 00       	mov    eax,0x4
c0020c2f:	e9 fd 00 00 00       	jmp    c0020d31 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020c34:	83 ec 08             	sub    esp,0x8
c0020c37:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c3e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020c42:	50                   	push   eax
c0020c43:	e8 ec fb fd ff       	call   c0000834 <strcpy>
c0020c48:	83 c4 10             	add    esp,0x10
c0020c4b:	83 ec 08             	sub    esp,0x8
c0020c4e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0020c52:	50                   	push   eax
c0020c53:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020c5a:	e8 79 ff ff ff       	call   c0020bd8 <FAT::fixFilepath(char*)>
c0020c5f:	83 c4 10             	add    esp,0x10
c0020c62:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c0020c6a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020c71:	83 e0 01             	and    eax,0x1
c0020c74:	74 08                	je     c0020c7e <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0020c76:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c0020c7e:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020c85:	83 e0 04             	and    eax,0x4
c0020c88:	74 10                	je     c0020c9a <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c0020c8a:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c0020c92:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020c9a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020ca1:	83 e0 02             	and    eax,0x2
c0020ca4:	74 08                	je     c0020cae <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c0020ca6:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c0020cae:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020cb5:	83 e0 08             	and    eax,0x8
c0020cb8:	74 08                	je     c0020cc2 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c0020cba:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c0020cc2:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0020cc9:	83 e0 10             	and    eax,0x10
c0020ccc:	74 08                	je     c0020cd6 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c0020cce:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c0020cd6:	83 ec 0c             	sub    esp,0xc
c0020cd9:	68 50 02 00 00       	push   0x250
c0020cde:	e8 5d eb fe ff       	call   c000f840 <malloc>
c0020ce3:	83 c4 10             	add    esp,0x10
c0020ce6:	89 c2                	mov    edx,eax
c0020ce8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020cef:	89 10                	mov    DWORD PTR [eax],edx
c0020cf1:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c0020cf9:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020d00:	8b 00                	mov    eax,DWORD PTR [eax]
c0020d02:	83 ec 04             	sub    esp,0x4
c0020d05:	52                   	push   edx
c0020d06:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020d0a:	52                   	push   edx
c0020d0b:	50                   	push   eax
c0020d0c:	e8 80 42 fe ff       	call   c0004f91 <f_open>
c0020d11:	83 c4 10             	add    esp,0x10
c0020d14:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c0020d1b:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0020d23:	74 07                	je     c0020d2c <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0020d25:	b8 01 00 00 00       	mov    eax,0x1
c0020d2a:	eb 05                	jmp    c0020d31 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0020d2c:	b8 00 00 00 00       	mov    eax,0x0
c0020d31:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020d37:	c3                   	ret    

c0020d38 <FAT::openDir(char const*, void**)>:
c0020d38:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020d3e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020d46:	74 0a                	je     c0020d52 <FAT::openDir(char const*, void**)+0x1a>
c0020d48:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0020d50:	75 07                	jne    c0020d59 <FAT::openDir(char const*, void**)+0x21>
c0020d52:	b8 04 00 00 00       	mov    eax,0x4
c0020d57:	eb 7d                	jmp    c0020dd6 <FAT::openDir(char const*, void**)+0x9e>
c0020d59:	83 ec 08             	sub    esp,0x8
c0020d5c:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020d63:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d67:	50                   	push   eax
c0020d68:	e8 c7 fa fd ff       	call   c0000834 <strcpy>
c0020d6d:	83 c4 10             	add    esp,0x10
c0020d70:	83 ec 08             	sub    esp,0x8
c0020d73:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020d77:	50                   	push   eax
c0020d78:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020d7f:	e8 54 fe ff ff       	call   c0020bd8 <FAT::fixFilepath(char*)>
c0020d84:	83 c4 10             	add    esp,0x10
c0020d87:	83 ec 0c             	sub    esp,0xc
c0020d8a:	6a 4c                	push   0x4c
c0020d8c:	e8 af ea fe ff       	call   c000f840 <malloc>
c0020d91:	83 c4 10             	add    esp,0x10
c0020d94:	89 c2                	mov    edx,eax
c0020d96:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020d9d:	89 10                	mov    DWORD PTR [eax],edx
c0020d9f:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0020da6:	8b 00                	mov    eax,DWORD PTR [eax]
c0020da8:	83 ec 08             	sub    esp,0x8
c0020dab:	8d 54 24 14          	lea    edx,[esp+0x14]
c0020daf:	52                   	push   edx
c0020db0:	50                   	push   eax
c0020db1:	e8 13 52 fe ff       	call   c0005fc9 <f_opendir>
c0020db6:	83 c4 10             	add    esp,0x10
c0020db9:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020dc0:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0020dc8:	74 07                	je     c0020dd1 <FAT::openDir(char const*, void**)+0x99>
c0020dca:	b8 01 00 00 00       	mov    eax,0x1
c0020dcf:	eb 05                	jmp    c0020dd6 <FAT::openDir(char const*, void**)+0x9e>
c0020dd1:	b8 00 00 00 00       	mov    eax,0x0
c0020dd6:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020ddc:	c3                   	ret    
c0020ddd:	90                   	nop

c0020dde <FAT::stat(char const*, unsigned long long*, bool*)>:
c0020dde:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0020de4:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c0020dec:	75 0a                	jne    c0020df8 <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0020dee:	b8 04 00 00 00       	mov    eax,0x4
c0020df3:	e9 c9 00 00 00       	jmp    c0020ec1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020df8:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0020e00:	75 0a                	jne    c0020e0c <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0020e02:	b8 04 00 00 00       	mov    eax,0x4
c0020e07:	e9 b5 00 00 00       	jmp    c0020ec1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020e0c:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0020e14:	75 0a                	jne    c0020e20 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0020e16:	b8 04 00 00 00       	mov    eax,0x4
c0020e1b:	e9 a1 00 00 00       	jmp    c0020ec1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020e20:	83 ec 08             	sub    esp,0x8
c0020e23:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020e2a:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020e31:	50                   	push   eax
c0020e32:	e8 fd f9 fd ff       	call   c0000834 <strcpy>
c0020e37:	83 c4 10             	add    esp,0x10
c0020e3a:	83 ec 08             	sub    esp,0x8
c0020e3d:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0020e44:	50                   	push   eax
c0020e45:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0020e4c:	e8 87 fd ff ff       	call   c0020bd8 <FAT::fixFilepath(char*)>
c0020e51:	83 c4 10             	add    esp,0x10
c0020e54:	83 ec 08             	sub    esp,0x8
c0020e57:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020e5b:	50                   	push   eax
c0020e5c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0020e63:	50                   	push   eax
c0020e64:	e8 1f 53 fe ff       	call   c0006188 <f_stat>
c0020e69:	83 c4 10             	add    esp,0x10
c0020e6c:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0020e73:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0020e7a:	85 c0                	test   eax,eax
c0020e7c:	74 07                	je     c0020e85 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c0020e7e:	83 f8 04             	cmp    eax,0x4
c0020e81:	74 32                	je     c0020eb5 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c0020e83:	eb 37                	jmp    c0020ebc <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c0020e85:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020e89:	0f b6 c0             	movzx  eax,al
c0020e8c:	83 e0 10             	and    eax,0x10
c0020e8f:	0f 95 c2             	setne  dl
c0020e92:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0020e99:	88 10                	mov    BYTE PTR [eax],dl
c0020e9b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0020e9e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0020ea2:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0020ea9:	89 01                	mov    DWORD PTR [ecx],eax
c0020eab:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020eae:	b8 00 00 00 00       	mov    eax,0x0
c0020eb3:	eb 0c                	jmp    c0020ec1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020eb5:	b8 02 00 00 00       	mov    eax,0x2
c0020eba:	eb 05                	jmp    c0020ec1 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0020ebc:	b8 01 00 00 00       	mov    eax,0x1
c0020ec1:	81 c4 2c 02 00 00    	add    esp,0x22c
c0020ec7:	c3                   	ret    

c0020ec8 <FAT::unlink(char const*)>:
c0020ec8:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0020ece:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0020ed6:	75 07                	jne    c0020edf <FAT::unlink(char const*)+0x17>
c0020ed8:	b8 04 00 00 00       	mov    eax,0x4
c0020edd:	eb 5c                	jmp    c0020f3b <FAT::unlink(char const*)+0x73>
c0020edf:	83 ec 08             	sub    esp,0x8
c0020ee2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020ee9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020eed:	50                   	push   eax
c0020eee:	e8 41 f9 fd ff       	call   c0000834 <strcpy>
c0020ef3:	83 c4 10             	add    esp,0x10
c0020ef6:	83 ec 08             	sub    esp,0x8
c0020ef9:	8d 44 24 14          	lea    eax,[esp+0x14]
c0020efd:	50                   	push   eax
c0020efe:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0020f05:	e8 ce fc ff ff       	call   c0020bd8 <FAT::fixFilepath(char*)>
c0020f0a:	83 c4 10             	add    esp,0x10
c0020f0d:	83 ec 0c             	sub    esp,0xc
c0020f10:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020f14:	50                   	push   eax
c0020f15:	e8 c0 55 fe ff       	call   c00064da <f_unlink>
c0020f1a:	83 c4 10             	add    esp,0x10
c0020f1d:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0020f24:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0020f2b:	85 c0                	test   eax,eax
c0020f2d:	75 07                	jne    c0020f36 <FAT::unlink(char const*)+0x6e>
c0020f2f:	b8 00 00 00 00       	mov    eax,0x0
c0020f34:	eb 05                	jmp    c0020f3b <FAT::unlink(char const*)+0x73>
c0020f36:	b8 01 00 00 00       	mov    eax,0x1
c0020f3b:	81 c4 1c 01 00 00    	add    esp,0x11c
c0020f41:	c3                   	ret    

c0020f42 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0020f42:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0020f48:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0020f4f:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0020f56:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0020f5a:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0020f5e:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0020f66:	75 0a                	jne    c0020f72 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0020f68:	b8 04 00 00 00       	mov    eax,0x4
c0020f6d:	e9 1c 01 00 00       	jmp    c002108e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0020f72:	83 ec 08             	sub    esp,0x8
c0020f75:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020f7c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0020f80:	50                   	push   eax
c0020f81:	e8 ae f8 fd ff       	call   c0000834 <strcpy>
c0020f86:	83 c4 10             	add    esp,0x10
c0020f89:	83 ec 08             	sub    esp,0x8
c0020f8c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0020f90:	50                   	push   eax
c0020f91:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0020f98:	e8 3b fc ff ff       	call   c0020bd8 <FAT::fixFilepath(char*)>
c0020f9d:	83 c4 10             	add    esp,0x10
c0020fa0:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0020fa8:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0020fb0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020fb5:	83 e0 01             	and    eax,0x1
c0020fb8:	74 08                	je     c0020fc2 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0020fba:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0020fc2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020fc7:	83 e0 02             	and    eax,0x2
c0020fca:	74 08                	je     c0020fd4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0020fcc:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0020fd4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020fd9:	83 e0 04             	and    eax,0x4
c0020fdc:	74 08                	je     c0020fe6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0020fde:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0020fe6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0020feb:	83 e0 08             	and    eax,0x8
c0020fee:	74 08                	je     c0020ff8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0020ff0:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0020ff8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0020ffd:	83 e0 01             	and    eax,0x1
c0021000:	74 08                	je     c002100a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021002:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c002100a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002100f:	83 e0 02             	and    eax,0x2
c0021012:	74 08                	je     c002101c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021014:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c002101c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021021:	83 e0 04             	and    eax,0x4
c0021024:	74 08                	je     c002102e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021026:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c002102e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021033:	83 e0 08             	and    eax,0x8
c0021036:	74 08                	je     c0021040 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021038:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021040:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021047:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c002104e:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021056:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c002105e:	83 ec 04             	sub    esp,0x4
c0021061:	52                   	push   edx
c0021062:	50                   	push   eax
c0021063:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021067:	50                   	push   eax
c0021068:	e8 0f 5b fe ff       	call   c0006b7c <f_chmod>
c002106d:	83 c4 10             	add    esp,0x10
c0021070:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021077:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c002107e:	85 c0                	test   eax,eax
c0021080:	75 07                	jne    c0021089 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021082:	b8 00 00 00 00       	mov    eax,0x0
c0021087:	eb 05                	jmp    c002108e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021089:	b8 01 00 00 00       	mov    eax,0x1
c002108e:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021094:	c3                   	ret    
c0021095:	90                   	nop

c0021096 <FAT::rename(char const*, char const*)>:
c0021096:	81 ec 1c 02 00 00    	sub    esp,0x21c
c002109c:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c00210a4:	74 0a                	je     c00210b0 <FAT::rename(char const*, char const*)+0x1a>
c00210a6:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c00210ae:	75 0a                	jne    c00210ba <FAT::rename(char const*, char const*)+0x24>
c00210b0:	b8 04 00 00 00       	mov    eax,0x4
c00210b5:	e9 98 00 00 00       	jmp    c0021152 <FAT::rename(char const*, char const*)+0xbc>
c00210ba:	83 ec 08             	sub    esp,0x8
c00210bd:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00210c4:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00210cb:	50                   	push   eax
c00210cc:	e8 63 f7 fd ff       	call   c0000834 <strcpy>
c00210d1:	83 c4 10             	add    esp,0x10
c00210d4:	83 ec 08             	sub    esp,0x8
c00210d7:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c00210de:	50                   	push   eax
c00210df:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c00210e6:	e8 ed fa ff ff       	call   c0020bd8 <FAT::fixFilepath(char*)>
c00210eb:	83 c4 10             	add    esp,0x10
c00210ee:	83 ec 08             	sub    esp,0x8
c00210f1:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c00210f8:	8d 44 24 18          	lea    eax,[esp+0x18]
c00210fc:	50                   	push   eax
c00210fd:	e8 32 f7 fd ff       	call   c0000834 <strcpy>
c0021102:	83 c4 10             	add    esp,0x10
c0021105:	83 ec 08             	sub    esp,0x8
c0021108:	8d 44 24 14          	lea    eax,[esp+0x14]
c002110c:	50                   	push   eax
c002110d:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021114:	e8 bf fa ff ff       	call   c0020bd8 <FAT::fixFilepath(char*)>
c0021119:	83 c4 10             	add    esp,0x10
c002111c:	83 ec 08             	sub    esp,0x8
c002111f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021123:	50                   	push   eax
c0021124:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002112b:	50                   	push   eax
c002112c:	e8 58 57 fe ff       	call   c0006889 <f_rename>
c0021131:	83 c4 10             	add    esp,0x10
c0021134:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c002113b:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021142:	85 c0                	test   eax,eax
c0021144:	75 07                	jne    c002114d <FAT::rename(char const*, char const*)+0xb7>
c0021146:	b8 00 00 00 00       	mov    eax,0x0
c002114b:	eb 05                	jmp    c0021152 <FAT::rename(char const*, char const*)+0xbc>
c002114d:	b8 01 00 00 00       	mov    eax,0x1
c0021152:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021158:	c3                   	ret    
c0021159:	90                   	nop

c002115a <FAT::mkdir(char const*)>:
c002115a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021160:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021168:	75 07                	jne    c0021171 <FAT::mkdir(char const*)+0x17>
c002116a:	b8 04 00 00 00       	mov    eax,0x4
c002116f:	eb 5c                	jmp    c00211cd <FAT::mkdir(char const*)+0x73>
c0021171:	83 ec 08             	sub    esp,0x8
c0021174:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002117b:	8d 44 24 18          	lea    eax,[esp+0x18]
c002117f:	50                   	push   eax
c0021180:	e8 af f6 fd ff       	call   c0000834 <strcpy>
c0021185:	83 c4 10             	add    esp,0x10
c0021188:	83 ec 08             	sub    esp,0x8
c002118b:	8d 44 24 14          	lea    eax,[esp+0x14]
c002118f:	50                   	push   eax
c0021190:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021197:	e8 3c fa ff ff       	call   c0020bd8 <FAT::fixFilepath(char*)>
c002119c:	83 c4 10             	add    esp,0x10
c002119f:	83 ec 0c             	sub    esp,0xc
c00211a2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00211a6:	50                   	push   eax
c00211a7:	e8 b1 54 fe ff       	call   c000665d <f_mkdir>
c00211ac:	83 c4 10             	add    esp,0x10
c00211af:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00211b6:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c00211bd:	85 c0                	test   eax,eax
c00211bf:	75 07                	jne    c00211c8 <FAT::mkdir(char const*)+0x6e>
c00211c1:	b8 00 00 00 00       	mov    eax,0x0
c00211c6:	eb 05                	jmp    c00211cd <FAT::mkdir(char const*)+0x73>
c00211c8:	b8 01 00 00 00       	mov    eax,0x1
c00211cd:	81 c4 1c 01 00 00    	add    esp,0x11c
c00211d3:	c3                   	ret    

c00211d4 <FAT::exists(char const*)>:
c00211d4:	81 ec 2c 02 00 00    	sub    esp,0x22c
c00211da:	83 ec 08             	sub    esp,0x8
c00211dd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00211e4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00211e8:	50                   	push   eax
c00211e9:	e8 46 f6 fd ff       	call   c0000834 <strcpy>
c00211ee:	83 c4 10             	add    esp,0x10
c00211f1:	83 ec 08             	sub    esp,0x8
c00211f4:	8d 44 24 08          	lea    eax,[esp+0x8]
c00211f8:	50                   	push   eax
c00211f9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021200:	e8 d3 f9 ff ff       	call   c0020bd8 <FAT::fixFilepath(char*)>
c0021205:	83 c4 10             	add    esp,0x10
c0021208:	83 ec 08             	sub    esp,0x8
c002120b:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021212:	50                   	push   eax
c0021213:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021217:	50                   	push   eax
c0021218:	e8 6b 4f fe ff       	call   c0006188 <f_stat>
c002121d:	83 c4 10             	add    esp,0x10
c0021220:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021227:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002122e:	85 c0                	test   eax,eax
c0021230:	75 04                	jne    c0021236 <FAT::exists(char const*)+0x62>
c0021232:	b0 01                	mov    al,0x1
c0021234:	eb 02                	jmp    c0021238 <FAT::exists(char const*)+0x64>
c0021236:	b0 00                	mov    al,0x0
c0021238:	81 c4 2c 02 00 00    	add    esp,0x22c
c002123e:	c3                   	ret    
c002123f:	90                   	nop

c0021240 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021240:	b8 08 00 00 00       	mov    eax,0x8
c0021245:	c3                   	ret    

c0021246 <ISO9660::seek(void*, unsigned long long)>:
c0021246:	53                   	push   ebx
c0021247:	b8 04 00 00 00       	mov    eax,0x4
c002124c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021250:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021254:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021258:	85 d2                	test   edx,edx
c002125a:	74 17                	je     c0021273 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002125c:	89 c8                	mov    eax,ecx
c002125e:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021261:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021264:	b8 01 00 00 00       	mov    eax,0x1
c0021269:	73 08                	jae    c0021273 <ISO9660::seek(void*, unsigned long long)+0x2d>
c002126b:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c002126e:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021271:	31 c0                	xor    eax,eax
c0021273:	5b                   	pop    ebx
c0021274:	c3                   	ret    
c0021275:	90                   	nop

c0021276 <ISO9660::tell(void*, unsigned long long*)>:
c0021276:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002127a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002127e:	85 d2                	test   edx,edx
c0021280:	74 12                	je     c0021294 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021282:	85 c0                	test   eax,eax
c0021284:	74 0e                	je     c0021294 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021286:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021289:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c002128c:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c002128f:	89 10                	mov    DWORD PTR [eax],edx
c0021291:	31 c0                	xor    eax,eax
c0021293:	c3                   	ret    
c0021294:	b8 04 00 00 00       	mov    eax,0x4
c0021299:	c3                   	ret    

c002129a <ISO9660::getName()>:
c002129a:	b8 c8 c4 02 c0       	mov    eax,0xc002c4c8
c002129f:	c3                   	ret    

c00212a0 <ISO9660::stat(void*, unsigned long long*)>:
c00212a0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00212a4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00212a8:	85 d2                	test   edx,edx
c00212aa:	74 12                	je     c00212be <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00212ac:	85 c0                	test   eax,eax
c00212ae:	74 0e                	je     c00212be <ISO9660::stat(void*, unsigned long long*)+0x1e>
c00212b0:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00212b3:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00212b6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00212b9:	89 10                	mov    DWORD PTR [eax],edx
c00212bb:	31 c0                	xor    eax,eax
c00212bd:	c3                   	ret    
c00212be:	b8 04 00 00 00       	mov    eax,0x4
c00212c3:	c3                   	ret    

c00212c4 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c00212c4:	b8 01 00 00 00       	mov    eax,0x1
c00212c9:	c3                   	ret    

c00212ca <ISO9660::unlink(char const*)>:
c00212ca:	b8 01 00 00 00       	mov    eax,0x1
c00212cf:	c3                   	ret    

c00212d0 <ISO9660::write(void*, unsigned long, void*, int*)>:
c00212d0:	b8 01 00 00 00       	mov    eax,0x1
c00212d5:	c3                   	ret    

c00212d6 <ISO9660::rename(char const*, char const*)>:
c00212d6:	b8 01 00 00 00       	mov    eax,0x1
c00212db:	c3                   	ret    

c00212dc <ISO9660::mkdir(char const*)>:
c00212dc:	b8 01 00 00 00       	mov    eax,0x1
c00212e1:	c3                   	ret    

c00212e2 <ISO9660::close(void*)>:
c00212e2:	83 ec 0c             	sub    esp,0xc
c00212e5:	b8 04 00 00 00       	mov    eax,0x4
c00212ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00212ee:	85 d2                	test   edx,edx
c00212f0:	74 0e                	je     c0021300 <ISO9660::close(void*)+0x1e>
c00212f2:	83 ec 0c             	sub    esp,0xc
c00212f5:	52                   	push   edx
c00212f6:	e8 55 e5 fe ff       	call   c000f850 <free>
c00212fb:	83 c4 10             	add    esp,0x10
c00212fe:	31 c0                	xor    eax,eax
c0021300:	83 c4 0c             	add    esp,0xc
c0021303:	c3                   	ret    

c0021304 <ISO9660::closeDir(void*)>:
c0021304:	83 ec 0c             	sub    esp,0xc
c0021307:	b8 04 00 00 00       	mov    eax,0x4
c002130c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021310:	85 d2                	test   edx,edx
c0021312:	74 0e                	je     c0021322 <ISO9660::closeDir(void*)+0x1e>
c0021314:	83 ec 0c             	sub    esp,0xc
c0021317:	52                   	push   edx
c0021318:	e8 33 e5 fe ff       	call   c000f850 <free>
c002131d:	83 c4 10             	add    esp,0x10
c0021320:	31 c0                	xor    eax,eax
c0021322:	83 c4 0c             	add    esp,0xc
c0021325:	c3                   	ret    

c0021326 <ISO9660::~ISO9660()>:
c0021326:	83 ec 0c             	sub    esp,0xc
c0021329:	ba 2c c5 02 c0       	mov    edx,0xc002c52c
c002132e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021332:	89 10                	mov    DWORD PTR [eax],edx
c0021334:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021338:	83 ec 0c             	sub    esp,0xc
c002133b:	50                   	push   eax
c002133c:	e8 59 1b ff ff       	call   c0012e9a <Filesystem::~Filesystem()>
c0021341:	83 c4 10             	add    esp,0x10
c0021344:	90                   	nop
c0021345:	83 c4 0c             	add    esp,0xc
c0021348:	c3                   	ret    
c0021349:	90                   	nop

c002134a <ISO9660::~ISO9660()>:
c002134a:	83 ec 0c             	sub    esp,0xc
c002134d:	83 ec 0c             	sub    esp,0xc
c0021350:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021354:	e8 cd ff ff ff       	call   c0021326 <ISO9660::~ISO9660()>
c0021359:	83 c4 10             	add    esp,0x10
c002135c:	83 ec 08             	sub    esp,0x8
c002135f:	6a 08                	push   0x8
c0021361:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021365:	e8 27 17 ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c002136a:	83 c4 10             	add    esp,0x10
c002136d:	83 c4 0c             	add    esp,0xc
c0021370:	c3                   	ret    

c0021371 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021371:	55                   	push   ebp
c0021372:	31 c9                	xor    ecx,ecx
c0021374:	57                   	push   edi
c0021375:	56                   	push   esi
c0021376:	53                   	push   ebx
c0021377:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c002137b:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c002137f:	89 eb                	mov    ebx,ebp
c0021381:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021385:	39 ce                	cmp    esi,ecx
c0021387:	7e 17                	jle    c00213a0 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021389:	31 d2                	xor    edx,edx
c002138b:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c002138f:	7d 13                	jge    c00213a4 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021391:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021395:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021398:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c002139b:	75 0d                	jne    c00213aa <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c002139d:	42                   	inc    edx
c002139e:	eb eb                	jmp    c002138b <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c00213a0:	31 c0                	xor    eax,eax
c00213a2:	eb 0a                	jmp    c00213ae <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00213a4:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00213a8:	eb 04                	jmp    c00213ae <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c00213aa:	41                   	inc    ecx
c00213ab:	43                   	inc    ebx
c00213ac:	eb d7                	jmp    c0021385 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c00213ae:	5b                   	pop    ebx
c00213af:	5e                   	pop    esi
c00213b0:	5f                   	pop    edi
c00213b1:	5d                   	pop    ebp
c00213b2:	c3                   	ret    

c00213b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c00213b3:	56                   	push   esi
c00213b4:	53                   	push   ebx
c00213b5:	52                   	push   edx
c00213b6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00213ba:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00213be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00213c2:	39 0d 40 17 03 c0    	cmp    DWORD PTR ds:0xc0031740,ecx
c00213c8:	75 08                	jne    c00213d2 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1f>
c00213ca:	38 05 94 d5 02 c0    	cmp    BYTE PTR ds:0xc002d594,al
c00213d0:	74 2b                	je     c00213fd <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x4a>
c00213d2:	83 ec 0c             	sub    esp,0xc
c00213d5:	a2 94 d5 02 c0       	mov    ds:0xc002d594,al
c00213da:	68 60 17 03 c0       	push   0xc0031760
c00213df:	0f be c0             	movsx  eax,al
c00213e2:	6a 01                	push   0x1
c00213e4:	89 0d 40 17 03 c0    	mov    DWORD PTR ds:0xc0031740,ecx
c00213ea:	31 db                	xor    ebx,ebx
c00213ec:	53                   	push   ebx
c00213ed:	51                   	push   ecx
c00213ee:	ff 34 85 1c e5 02 c0 	push   DWORD PTR [eax*4-0x3ffd1ae4]
c00213f5:	e8 62 4f ff ff       	call   c001635c <LogicalDisk::read(unsigned long long, int, void*)>
c00213fa:	83 c4 20             	add    esp,0x20
c00213fd:	c7 44 24 18 00 08 00 00 	mov    DWORD PTR [esp+0x18],0x800
c0021405:	c7 44 24 14 60 17 03 c0 	mov    DWORD PTR [esp+0x14],0xc0031760
c002140d:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021411:	58                   	pop    eax
c0021412:	5b                   	pop    ebx
c0021413:	5e                   	pop    esi
c0021414:	e9 2b f3 fd ff       	jmp    c0000744 <memcpy>
c0021419:	90                   	nop

c002141a <ISO9660::tryMount(LogicalDisk*, int)>:
c002141a:	81 ec 10 08 00 00    	sub    esp,0x810
c0021420:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021427:	83 c0 41             	add    eax,0x41
c002142a:	0f be c0             	movsx  eax,al
c002142d:	50                   	push   eax
c002142e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021432:	50                   	push   eax
c0021433:	6a 10                	push   0x10
c0021435:	e8 79 ff ff ff       	call   c00213b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002143a:	83 c4 10             	add    esp,0x10
c002143d:	31 c0                	xor    eax,eax
c002143f:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021444:	75 1d                	jne    c0021463 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021446:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c002144b:	75 16                	jne    c0021463 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002144d:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021452:	75 0f                	jne    c0021463 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021454:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021459:	75 08                	jne    c0021463 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c002145b:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021460:	0f 94 c0             	sete   al
c0021463:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021469:	c3                   	ret    

c002146a <ISO9660::read(void*, unsigned long, void*, int*)>:
c002146a:	55                   	push   ebp
c002146b:	57                   	push   edi
c002146c:	56                   	push   esi
c002146d:	53                   	push   ebx
c002146e:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021474:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c002147b:	85 ed                	test   ebp,ebp
c002147d:	0f 84 d6 01 00 00    	je     c0021659 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021483:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c002148b:	0f 84 c8 01 00 00    	je     c0021659 <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021491:	b8 01 00 00 00       	mov    eax,0x1
c0021496:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c002149a:	0f 85 be 01 00 00    	jne    c002165e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c00214a0:	31 d2                	xor    edx,edx
c00214a2:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c00214a9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00214ac:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c00214af:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00214b3:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c00214b6:	89 04 24             	mov    DWORD PTR [esp],eax
c00214b9:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00214bd:	01 f0                	add    eax,esi
c00214bf:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c00214c2:	11 fa                	adc    edx,edi
c00214c4:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00214c8:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c00214cc:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00214d0:	19 d1                	sbb    ecx,edx
c00214d2:	72 0a                	jb     c00214de <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c00214d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00214d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00214dc:	eb 13                	jmp    c00214f1 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c00214de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00214e2:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00214e6:	29 f0                	sub    eax,esi
c00214e8:	19 fa                	sbb    edx,edi
c00214ea:	89 04 24             	mov    DWORD PTR [esp],eax
c00214ed:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00214f1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00214f4:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c00214f7:	0f a4 c2 0b          	shld   edx,eax,0xb
c00214fb:	51                   	push   ecx
c00214fc:	c1 e0 0b             	shl    eax,0xb
c00214ff:	01 c6                	add    esi,eax
c0021501:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0021505:	11 d7                	adc    edi,edx
c0021507:	50                   	push   eax
c0021508:	89 fa                	mov    edx,edi
c002150a:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c002150e:	89 f0                	mov    eax,esi
c0021510:	53                   	push   ebx
c0021511:	0f ac d0 0b          	shrd   eax,edx,0xb
c0021515:	50                   	push   eax
c0021516:	e8 98 fe ff ff       	call   c00213b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002151b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002151f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0021522:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c0021526:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002152c:	83 c4 10             	add    esp,0x10
c002152f:	b8 00 08 00 00       	mov    eax,0x800
c0021534:	29 d0                	sub    eax,edx
c0021536:	39 c1                	cmp    ecx,eax
c0021538:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c002153c:	83 d9 00             	sbb    ecx,0x0
c002153f:	7d 1c                	jge    c002155d <ISO9660::read(void*, unsigned long, void*, int*)+0xf3>
c0021541:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0021546:	75 12                	jne    c002155a <ISO9660::read(void*, unsigned long, void*, int*)+0xf0>
c0021548:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c002154f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0021555:	e9 fb 00 00 00       	jmp    c0021655 <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c002155a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002155d:	8d 0c 13             	lea    ecx,[ebx+edx*1]
c0021560:	31 d2                	xor    edx,edx
c0021562:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0021566:	39 c2                	cmp    edx,eax
c0021568:	7d 14                	jge    c002157e <ISO9660::read(void*, unsigned long, void*, int*)+0x114>
c002156a:	8b 9c 24 4c 08 00 00 	mov    ebx,DWORD PTR [esp+0x84c]
c0021571:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021575:	8a 0c 11             	mov    cl,BYTE PTR [ecx+edx*1]
c0021578:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c002157b:	42                   	inc    edx
c002157c:	eb e8                	jmp    c0021566 <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c002157e:	89 c3                	mov    ebx,eax
c0021580:	85 c0                	test   eax,eax
c0021582:	79 02                	jns    c0021586 <ISO9660::read(void*, unsigned long, void*, int*)+0x11c>
c0021584:	31 db                	xor    ebx,ebx
c0021586:	99                   	cdq    
c0021587:	01 c3                	add    ebx,eax
c0021589:	03 9c 24 4c 08 00 00 	add    ebx,DWORD PTR [esp+0x84c]
c0021590:	01 c6                	add    esi,eax
c0021592:	11 d7                	adc    edi,edx
c0021594:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0021598:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002159c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c002159f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00215a3:	29 c6                	sub    esi,eax
c00215a5:	19 d7                	sbb    edi,edx
c00215a7:	89 34 24             	mov    DWORD PTR [esp],esi
c00215aa:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c00215ae:	b8 ff 07 00 00       	mov    eax,0x7ff
c00215b3:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00215b6:	b8 00 00 00 00       	mov    eax,0x0
c00215bb:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00215bf:	7d 3e                	jge    c00215ff <ISO9660::read(void*, unsigned long, void*, int*)+0x195>
c00215c1:	52                   	push   edx
c00215c2:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00215c6:	50                   	push   eax
c00215c7:	53                   	push   ebx
c00215c8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00215cc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00215d0:	0f ac d0 0b          	shrd   eax,edx,0xb
c00215d4:	50                   	push   eax
c00215d5:	e8 d9 fd ff ff       	call   c00213b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00215da:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c00215e2:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c00215e7:	81 c3 00 08 00 00    	add    ebx,0x800
c00215ed:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c00215f5:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c00215fa:	83 c4 10             	add    esp,0x10
c00215fd:	eb af                	jmp    c00215ae <ISO9660::read(void*, unsigned long, void*, int*)+0x144>
c00215ff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021603:	0b 04 24             	or     eax,DWORD PTR [esp]
c0021606:	74 32                	je     c002163a <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0021608:	50                   	push   eax
c0021609:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002160d:	50                   	push   eax
c002160e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021612:	50                   	push   eax
c0021613:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0021617:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c002161b:	0f ac fe 0b          	shrd   esi,edi,0xb
c002161f:	56                   	push   esi
c0021620:	e8 8e fd ff ff       	call   c00213b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021625:	83 c4 0c             	add    esp,0xc
c0021628:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c002162c:	8d 44 24 28          	lea    eax,[esp+0x28]
c0021630:	50                   	push   eax
c0021631:	53                   	push   ebx
c0021632:	e8 0d f1 fd ff       	call   c0000744 <memcpy>
c0021637:	83 c4 10             	add    esp,0x10
c002163a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021641:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021645:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021649:	89 38                	mov    DWORD PTR [eax],edi
c002164b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002164f:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0021652:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0021655:	31 c0                	xor    eax,eax
c0021657:	eb 05                	jmp    c002165e <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021659:	b8 04 00 00 00       	mov    eax,0x4
c002165e:	81 c4 2c 08 00 00    	add    esp,0x82c
c0021664:	5b                   	pop    ebx
c0021665:	5e                   	pop    esi
c0021666:	5f                   	pop    edi
c0021667:	5d                   	pop    ebp
c0021668:	c3                   	ret    
c0021669:	90                   	nop

c002166a <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c002166a:	55                   	push   ebp
c002166b:	57                   	push   edi
c002166c:	56                   	push   esi
c002166d:	53                   	push   ebx
c002166e:	81 ec 5c 09 00 00    	sub    esp,0x95c
c0021674:	8b b4 24 74 09 00 00 	mov    esi,DWORD PTR [esp+0x974]
c002167b:	85 f6                	test   esi,esi
c002167d:	0f 84 64 02 00 00    	je     c00218e7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021683:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c002168b:	0f 84 56 02 00 00    	je     c00218e7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x27d>
c0021691:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0021694:	0b 46 08             	or     eax,DWORD PTR [esi+0x8]
c0021697:	75 0a                	jne    c00216a3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c0021699:	b8 07 00 00 00       	mov    eax,0x7
c002169e:	e9 49 02 00 00       	jmp    c00218ec <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00216a3:	50                   	push   eax
c00216a4:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c00216a8:	50                   	push   eax
c00216a9:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00216b0:	53                   	push   ebx
c00216b1:	8b 06                	mov    eax,DWORD PTR [esi]
c00216b3:	c1 e0 0b             	shl    eax,0xb
c00216b6:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c00216b9:	c1 e8 0b             	shr    eax,0xb
c00216bc:	50                   	push   eax
c00216bd:	e8 f1 fc ff ff       	call   c00213b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00216c2:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c00216c5:	83 c4 10             	add    esp,0x10
c00216c8:	89 c1                	mov    ecx,eax
c00216ca:	8b 56 14             	mov    edx,DWORD PTR [esi+0x14]
c00216cd:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00216d3:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00216d6:	84 db                	test   bl,bl
c00216d8:	0f 85 90 00 00 00    	jne    c002176e <ISO9660::readDir(void*, unsigned long, void*, int*)+0x104>
c00216de:	8d b8 ff 07 00 00    	lea    edi,[eax+0x7ff]
c00216e4:	81 e7 ff 07 00 00    	and    edi,0x7ff
c00216ea:	29 c7                	sub    edi,eax
c00216ec:	89 fb                	mov    ebx,edi
c00216ee:	c1 fb 1f             	sar    ebx,0x1f
c00216f1:	01 f8                	add    eax,edi
c00216f3:	11 da                	adc    edx,ebx
c00216f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00216f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00216fd:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0021700:	89 56 14             	mov    DWORD PTR [esi+0x14],edx
c0021703:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0021706:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0021709:	89 04 24             	mov    DWORD PTR [esp],eax
c002170c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021710:	89 d8                	mov    eax,ebx
c0021712:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0021715:	ba 00 00 00 00       	mov    edx,0x0
c002171a:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c002171e:	b8 00 00 00 00       	mov    eax,0x0
c0021723:	73 0b                	jae    c0021730 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c0021725:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0021728:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002172c:	29 f8                	sub    eax,edi
c002172e:	19 da                	sbb    edx,ebx
c0021730:	89 d3                	mov    ebx,edx
c0021732:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c0021735:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c0021738:	09 c3                	or     ebx,eax
c002173a:	0f 84 59 ff ff ff    	je     c0021699 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0021740:	55                   	push   ebp
c0021741:	0f be 46 19          	movsx  eax,BYTE PTR [esi+0x19]
c0021745:	50                   	push   eax
c0021746:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002174d:	53                   	push   ebx
c002174e:	8b 06                	mov    eax,DWORD PTR [esi]
c0021750:	c1 e0 0b             	shl    eax,0xb
c0021753:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c0021757:	c1 e8 0b             	shr    eax,0xb
c002175a:	50                   	push   eax
c002175b:	e8 53 fc ff ff       	call   c00213b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021760:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021763:	83 c4 10             	add    esp,0x10
c0021766:	25 ff 07 00 00       	and    eax,0x7ff
c002176b:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c002176e:	57                   	push   edi
c002176f:	6a 28                	push   0x28
c0021771:	6a 00                	push   0x0
c0021773:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021777:	50                   	push   eax
c0021778:	e8 fb ef fd ff       	call   c0000778 <memset>
c002177d:	31 d2                	xor    edx,edx
c002177f:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c0021782:	81 e7 ff 07 00 00    	and    edi,0x7ff
c0021788:	89 f8                	mov    eax,edi
c002178a:	83 c0 21             	add    eax,0x21
c002178d:	83 d2 00             	adc    edx,0x0
c0021790:	89 c7                	mov    edi,eax
c0021792:	89 d5                	mov    ebp,edx
c0021794:	83 c4 10             	add    esp,0x10
c0021797:	31 c9                	xor    ecx,ecx
c0021799:	8a 84 3c 50 01 00 00 	mov    al,BYTE PTR [esp+edi*1+0x150]
c00217a0:	83 f9 28             	cmp    ecx,0x28
c00217a3:	88 04 24             	mov    BYTE PTR [esp],al
c00217a6:	0f 94 c2             	sete   dl
c00217a9:	88 d0                	mov    al,dl
c00217ab:	ba ff 07 00 00       	mov    edx,0x7ff
c00217b0:	39 fa                	cmp    edx,edi
c00217b2:	ba 00 00 00 00       	mov    edx,0x0
c00217b7:	19 ea                	sbb    edx,ebp
c00217b9:	0f 92 c2             	setb   dl
c00217bc:	09 c2                	or     edx,eax
c00217be:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00217c2:	0f 94 c0             	sete   al
c00217c5:	08 d0                	or     al,dl
c00217c7:	75 16                	jne    c00217df <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c00217c9:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00217cd:	74 10                	je     c00217df <ISO9660::readDir(void*, unsigned long, void*, int*)+0x175>
c00217cf:	8a 04 24             	mov    al,BYTE PTR [esp]
c00217d2:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00217d6:	41                   	inc    ecx
c00217d7:	83 c7 01             	add    edi,0x1
c00217da:	83 d5 00             	adc    ebp,0x0
c00217dd:	eb ba                	jmp    c0021799 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x12f>
c00217df:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00217e6:	83 ec 0c             	sub    esp,0xc
c00217e9:	8d 7c 24 24          	lea    edi,[esp+0x24]
c00217ed:	57                   	push   edi
c00217ee:	e8 a1 ef fd ff       	call   c0000794 <strlen>
c00217f3:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c00217fb:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00217ff:	8d 8c 24 60 09 00 00 	lea    ecx,[esp+0x960]
c0021806:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0021809:	5a                   	pop    edx
c002180a:	25 ff 07 00 00       	and    eax,0x7ff
c002180f:	01 c8                	add    eax,ecx
c0021811:	59                   	pop    ecx
c0021812:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0021818:	83 e0 02             	and    eax,0x2
c002181b:	3c 01                	cmp    al,0x1
c002181d:	19 c0                	sbb    eax,eax
c002181f:	83 c0 02             	add    eax,0x2
c0021822:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0021826:	57                   	push   edi
c0021827:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c002182b:	50                   	push   eax
c002182c:	e8 03 f0 fd ff       	call   c0000834 <strcpy>
c0021831:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0021835:	83 c4 10             	add    esp,0x10
c0021838:	84 c0                	test   al,al
c002183a:	75 21                	jne    c002185d <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1f3>
c002183c:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0021844:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002184c:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021854:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c002185b:	eb 28                	jmp    c0021885 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c002185d:	fe c8                	dec    al
c002185f:	75 24                	jne    c0021885 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x21b>
c0021861:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0021869:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0021871:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0021879:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c0021880:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0021885:	0f b6 fb             	movzx  edi,bl
c0021888:	31 db                	xor    ebx,ebx
c002188a:	50                   	push   eax
c002188b:	ff b4 24 7c 09 00 00 	push   DWORD PTR [esp+0x97c]
c0021892:	8d 44 24 48          	lea    eax,[esp+0x48]
c0021896:	50                   	push   eax
c0021897:	ff b4 24 88 09 00 00 	push   DWORD PTR [esp+0x988]
c002189e:	e8 a1 ee fd ff       	call   c0000744 <memcpy>
c00218a3:	8b 84 24 90 09 00 00 	mov    eax,DWORD PTR [esp+0x990]
c00218aa:	89 f9                	mov    ecx,edi
c00218ac:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00218b2:	01 7e 10             	add    DWORD PTR [esi+0x10],edi
c00218b5:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c00218b8:	11 5e 14             	adc    DWORD PTR [esi+0x14],ebx
c00218bb:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c00218be:	83 c4 10             	add    esp,0x10
c00218c1:	39 c7                	cmp    edi,eax
c00218c3:	89 df                	mov    edi,ebx
c00218c5:	19 d7                	sbb    edi,edx
c00218c7:	72 10                	jb     c00218d9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26f>
c00218c9:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c00218d0:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00218d7:	eb 0a                	jmp    c00218e3 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x279>
c00218d9:	29 c8                	sub    eax,ecx
c00218db:	19 da                	sbb    edx,ebx
c00218dd:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c00218e0:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c00218e3:	31 c0                	xor    eax,eax
c00218e5:	eb 05                	jmp    c00218ec <ISO9660::readDir(void*, unsigned long, void*, int*)+0x282>
c00218e7:	b8 04 00 00 00       	mov    eax,0x4
c00218ec:	81 c4 5c 09 00 00    	add    esp,0x95c
c00218f2:	5b                   	pop    ebx
c00218f3:	5e                   	pop    esi
c00218f4:	5f                   	pop    edi
c00218f5:	5d                   	pop    ebp
c00218f6:	c3                   	ret    

c00218f7 <readRoot(unsigned int*, unsigned int*, char)>:
c00218f7:	81 ec 40 08 00 00    	sub    esp,0x840
c00218fd:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c0021905:	50                   	push   eax
c0021906:	8d 44 24 38          	lea    eax,[esp+0x38]
c002190a:	50                   	push   eax
c002190b:	6a 10                	push   0x10
c002190d:	e8 a1 fa ff ff       	call   c00213b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021912:	83 c4 0c             	add    esp,0xc
c0021915:	6a 22                	push   0x22
c0021917:	8d 84 24 d4 00 00 00 	lea    eax,[esp+0xd4]
c002191e:	50                   	push   eax
c002191f:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0021923:	50                   	push   eax
c0021924:	e8 1b ee fd ff       	call   c0000744 <memcpy>
c0021929:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0021930:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0021934:	89 10                	mov    DWORD PTR [eax],edx
c0021936:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c002193d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021941:	89 10                	mov    DWORD PTR [eax],edx
c0021943:	b0 01                	mov    al,0x1
c0021945:	81 c4 4c 08 00 00    	add    esp,0x84c
c002194b:	c3                   	ret    

c002194c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c002194c:	55                   	push   ebp
c002194d:	57                   	push   edi
c002194e:	56                   	push   esi
c002194f:	53                   	push   ebx
c0021950:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021956:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c002195d:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0021964:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021968:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c002196c:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0021970:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021974:	75 03                	jne    c0021979 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021976:	83 c3 02             	add    ebx,0x2
c0021979:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c002197c:	75 03                	jne    c0021981 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c002197e:	43                   	inc    ebx
c002197f:	eb f8                	jmp    c0021979 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0021981:	51                   	push   ecx
c0021982:	68 00 01 00 00       	push   0x100
c0021987:	6a 00                	push   0x0
c0021989:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002198d:	50                   	push   eax
c002198e:	e8 e5 ed fd ff       	call   c0000778 <memset>
c0021993:	83 c4 10             	add    esp,0x10
c0021996:	31 d2                	xor    edx,edx
c0021998:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002199b:	84 c0                	test   al,al
c002199d:	74 21                	je     c00219c0 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c002199f:	3c 2f                	cmp    al,0x2f
c00219a1:	75 0b                	jne    c00219ae <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00219a3:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00219a7:	bd 01 00 00 00       	mov    ebp,0x1
c00219ac:	eb 14                	jmp    c00219c2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00219ae:	8d 48 9f             	lea    ecx,[eax-0x61]
c00219b1:	80 f9 19             	cmp    cl,0x19
c00219b4:	77 03                	ja     c00219b9 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00219b6:	83 e8 20             	sub    eax,0x20
c00219b9:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00219bd:	42                   	inc    edx
c00219be:	eb d8                	jmp    c0021998 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00219c0:	31 ed                	xor    ebp,ebp
c00219c2:	83 ec 0c             	sub    esp,0xc
c00219c5:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00219cc:	e8 6f de fe ff       	call   c000f840 <malloc>
c00219d1:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00219d8:	89 c6                	mov    esi,eax
c00219da:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00219e0:	c1 ef 0b             	shr    edi,0xb
c00219e3:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00219ea:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00219ee:	83 c4 10             	add    esp,0x10
c00219f1:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00219f6:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00219fa:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0021a01:	74 28                	je     c0021a2b <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0021a03:	52                   	push   edx
c0021a04:	57                   	push   edi
c0021a05:	50                   	push   eax
c0021a06:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021a0a:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0021a11:	e8 9d f9 ff ff       	call   c00213b3 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021a16:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021a1a:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0021a21:	05 00 08 00 00       	add    eax,0x800
c0021a26:	83 c4 10             	add    esp,0x10
c0021a29:	eb cb                	jmp    c00219f6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c0021a2b:	83 ec 0c             	sub    esp,0xc
c0021a2e:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0021a32:	57                   	push   edi
c0021a33:	e8 5c ed fd ff       	call   c0000794 <strlen>
c0021a38:	50                   	push   eax
c0021a39:	57                   	push   edi
c0021a3a:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0021a41:	56                   	push   esi
c0021a42:	e8 2a f9 ff ff       	call   c0021371 <__memmem(unsigned char*, int, unsigned char*, int)>
c0021a47:	83 c4 20             	add    esp,0x20
c0021a4a:	85 c0                	test   eax,eax
c0021a4c:	75 13                	jne    c0021a61 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0021a4e:	83 ec 0c             	sub    esp,0xc
c0021a51:	56                   	push   esi
c0021a52:	e8 f9 dd fe ff       	call   c000f850 <free>
c0021a57:	83 c4 10             	add    esp,0x10
c0021a5a:	31 c0                	xor    eax,eax
c0021a5c:	e9 b3 00 00 00       	jmp    c0021b14 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021a61:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0021a65:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c0021a69:	c1 e7 08             	shl    edi,0x8
c0021a6c:	c1 e2 10             	shl    edx,0x10
c0021a6f:	09 d7                	or     edi,edx
c0021a71:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0021a75:	09 d7                	or     edi,edx
c0021a77:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c0021a7b:	c1 e2 18             	shl    edx,0x18
c0021a7e:	09 d7                	or     edi,edx
c0021a80:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0021a84:	89 d1                	mov    ecx,edx
c0021a86:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c0021a8a:	c1 e1 08             	shl    ecx,0x8
c0021a8d:	c1 e2 10             	shl    edx,0x10
c0021a90:	09 ca                	or     edx,ecx
c0021a92:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c0021a96:	09 ca                	or     edx,ecx
c0021a98:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c0021a9c:	c1 e1 18             	shl    ecx,0x18
c0021a9f:	09 ca                	or     edx,ecx
c0021aa1:	89 e9                	mov    ecx,ebp
c0021aa3:	84 c9                	test   cl,cl
c0021aa5:	74 3c                	je     c0021ae3 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c0021aa7:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0021aab:	83 ec 0c             	sub    esp,0xc
c0021aae:	56                   	push   esi
c0021aaf:	e8 9c dd fe ff       	call   c000f850 <free>
c0021ab4:	83 c4 0c             	add    esp,0xc
c0021ab7:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021abe:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0021ac3:	50                   	push   eax
c0021ac4:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021acb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0021ad2:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0021ad6:	52                   	push   edx
c0021ad7:	57                   	push   edi
c0021ad8:	53                   	push   ebx
c0021ad9:	e8 6e fe ff ff       	call   c002194c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021ade:	83 c4 20             	add    esp,0x20
c0021ae1:	eb 31                	jmp    c0021b14 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0021ae3:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c0021ae6:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c0021aed:	d0 e8                	shr    al,1
c0021aef:	89 3b                	mov    DWORD PTR [ebx],edi
c0021af1:	83 e0 01             	and    eax,0x1
c0021af4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c0021afb:	83 ec 0c             	sub    esp,0xc
c0021afe:	89 13                	mov    DWORD PTR [ebx],edx
c0021b00:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c0021b07:	89 03                	mov    DWORD PTR [ebx],eax
c0021b09:	56                   	push   esi
c0021b0a:	e8 41 dd fe ff       	call   c000f850 <free>
c0021b0f:	83 c4 10             	add    esp,0x10
c0021b12:	b0 01                	mov    al,0x1
c0021b14:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021b1a:	5b                   	pop    ebx
c0021b1b:	5e                   	pop    esi
c0021b1c:	5f                   	pop    edi
c0021b1d:	5d                   	pop    ebp
c0021b1e:	c3                   	ret    

c0021b1f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0021b1f:	55                   	push   ebp
c0021b20:	57                   	push   edi
c0021b21:	56                   	push   esi
c0021b22:	53                   	push   ebx
c0021b23:	83 ec 20             	sub    esp,0x20
c0021b26:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0021b2a:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0021b2e:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0021b32:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021b3a:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0021b42:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c0021b47:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0021b4d:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0021b53:	57                   	push   edi
c0021b54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021b58:	50                   	push   eax
c0021b59:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021b5d:	50                   	push   eax
c0021b5e:	e8 94 fd ff ff       	call   c00218f7 <readRoot(unsigned int*, unsigned int*, char)>
c0021b63:	5a                   	pop    edx
c0021b64:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0021b68:	e8 27 ec fd ff       	call   c0000794 <strlen>
c0021b6d:	83 c4 10             	add    esp,0x10
c0021b70:	83 f8 03             	cmp    eax,0x3
c0021b73:	77 17                	ja     c0021b8c <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0021b75:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021b79:	89 03                	mov    DWORD PTR [ebx],eax
c0021b7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021b7f:	89 06                	mov    DWORD PTR [esi],eax
c0021b81:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c0021b88:	b0 01                	mov    al,0x1
c0021b8a:	eb 19                	jmp    c0021ba5 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0021b8c:	50                   	push   eax
c0021b8d:	55                   	push   ebp
c0021b8e:	57                   	push   edi
c0021b8f:	56                   	push   esi
c0021b90:	53                   	push   ebx
c0021b91:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021b95:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021b99:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0021b9d:	e8 aa fd ff ff       	call   c002194c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c0021ba2:	83 c4 20             	add    esp,0x20
c0021ba5:	83 c4 1c             	add    esp,0x1c
c0021ba8:	5b                   	pop    ebx
c0021ba9:	5e                   	pop    esi
c0021baa:	5f                   	pop    edi
c0021bab:	5d                   	pop    ebp
c0021bac:	c3                   	ret    
c0021bad:	90                   	nop

c0021bae <ISO9660::open(char const*, void**, FileOpenMode)>:
c0021bae:	57                   	push   edi
c0021baf:	56                   	push   esi
c0021bb0:	53                   	push   ebx
c0021bb1:	83 ec 10             	sub    esp,0x10
c0021bb4:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021bb8:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021bbc:	85 ff                	test   edi,edi
c0021bbe:	0f 84 9d 00 00 00    	je     c0021c61 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021bc4:	85 f6                	test   esi,esi
c0021bc6:	0f 84 95 00 00 00    	je     c0021c61 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c0021bcc:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0021bd1:	74 17                	je     c0021bea <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c0021bd3:	83 ec 0c             	sub    esp,0xc
c0021bd6:	68 e3 c4 02 c0       	push   0xc002c4e3
c0021bdb:	e8 91 0f ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0021be0:	83 c4 10             	add    esp,0x10
c0021be3:	b8 03 00 00 00       	mov    eax,0x3
c0021be8:	eb 7c                	jmp    c0021c66 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021bea:	83 ec 0c             	sub    esp,0xc
c0021bed:	6a 1c                	push   0x1c
c0021bef:	e8 4c dc fe ff       	call   c000f840 <malloc>
c0021bf4:	89 07                	mov    DWORD PTR [edi],eax
c0021bf6:	89 c3                	mov    ebx,eax
c0021bf8:	58                   	pop    eax
c0021bf9:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021bfd:	50                   	push   eax
c0021bfe:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021c01:	50                   	push   eax
c0021c02:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021c06:	50                   	push   eax
c0021c07:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021c0b:	50                   	push   eax
c0021c0c:	56                   	push   esi
c0021c0d:	e8 0d ff ff ff       	call   c0021b1f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021c12:	83 c4 20             	add    esp,0x20
c0021c15:	84 c0                	test   al,al
c0021c17:	74 07                	je     c0021c20 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c0021c19:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021c1e:	74 0b                	je     c0021c2b <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0021c20:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021c24:	b8 01 00 00 00       	mov    eax,0x1
c0021c29:	eb 3b                	jmp    c0021c66 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021c2b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021c2f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021c33:	89 03                	mov    DWORD PTR [ebx],eax
c0021c35:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021c3c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021c40:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021c47:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021c4e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021c51:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021c58:	8a 06                	mov    al,BYTE PTR [esi]
c0021c5a:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021c5d:	31 c0                	xor    eax,eax
c0021c5f:	eb 05                	jmp    c0021c66 <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0021c61:	b8 04 00 00 00       	mov    eax,0x4
c0021c66:	83 c4 10             	add    esp,0x10
c0021c69:	5b                   	pop    ebx
c0021c6a:	5e                   	pop    esi
c0021c6b:	5f                   	pop    edi
c0021c6c:	c3                   	ret    
c0021c6d:	90                   	nop

c0021c6e <ISO9660::exists(char const*)>:
c0021c6e:	83 ec 28             	sub    esp,0x28
c0021c71:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0021c75:	8d 54 24 18          	lea    edx,[esp+0x18]
c0021c79:	52                   	push   edx
c0021c7a:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0021c7d:	52                   	push   edx
c0021c7e:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021c82:	52                   	push   edx
c0021c83:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0021c87:	52                   	push   edx
c0021c88:	50                   	push   eax
c0021c89:	e8 91 fe ff ff       	call   c0021b1f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021c8e:	83 c4 3c             	add    esp,0x3c
c0021c91:	c3                   	ret    

c0021c92 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0021c92:	56                   	push   esi
c0021c93:	53                   	push   ebx
c0021c94:	83 ec 14             	sub    esp,0x14
c0021c97:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0021c9b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c0021c9f:	85 db                	test   ebx,ebx
c0021ca1:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0021ca5:	0f 94 c2             	sete   dl
c0021ca8:	85 f6                	test   esi,esi
c0021caa:	0f 94 c0             	sete   al
c0021cad:	08 c2                	or     dl,al
c0021caf:	75 68                	jne    c0021d19 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021cb1:	85 c9                	test   ecx,ecx
c0021cb3:	74 64                	je     c0021d19 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c0021cb5:	83 ec 0c             	sub    esp,0xc
c0021cb8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0021cbb:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021cbf:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021cc5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021ccc:	50                   	push   eax
c0021ccd:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c0021cd0:	50                   	push   eax
c0021cd1:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021cd5:	50                   	push   eax
c0021cd6:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021cda:	50                   	push   eax
c0021cdb:	51                   	push   ecx
c0021cdc:	e8 3e fe ff ff       	call   c0021b1f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021ce1:	83 c4 20             	add    esp,0x20
c0021ce4:	ba 01 00 00 00       	mov    edx,0x1
c0021ce9:	84 c0                	test   al,al
c0021ceb:	74 31                	je     c0021d1e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021ced:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021cf1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021cf8:	89 03                	mov    DWORD PTR [ebx],eax
c0021cfa:	ba 00 00 00 00       	mov    edx,0x0
c0021cff:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021d03:	85 c0                	test   eax,eax
c0021d05:	0f 95 06             	setne  BYTE PTR [esi]
c0021d08:	74 14                	je     c0021d1e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021d0a:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0021d10:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021d17:	eb 05                	jmp    c0021d1e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c0021d19:	ba 04 00 00 00       	mov    edx,0x4
c0021d1e:	83 c4 14             	add    esp,0x14
c0021d21:	89 d0                	mov    eax,edx
c0021d23:	5b                   	pop    ebx
c0021d24:	5e                   	pop    esi
c0021d25:	c3                   	ret    

c0021d26 <ISO9660::openDir(char const*, void**)>:
c0021d26:	57                   	push   edi
c0021d27:	56                   	push   esi
c0021d28:	53                   	push   ebx
c0021d29:	83 ec 10             	sub    esp,0x10
c0021d2c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0021d30:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0021d34:	85 ff                	test   edi,edi
c0021d36:	0f 84 95 00 00 00    	je     c0021dd1 <ISO9660::openDir(char const*, void**)+0xab>
c0021d3c:	85 f6                	test   esi,esi
c0021d3e:	0f 84 8d 00 00 00    	je     c0021dd1 <ISO9660::openDir(char const*, void**)+0xab>
c0021d44:	83 ec 0c             	sub    esp,0xc
c0021d47:	6a 1c                	push   0x1c
c0021d49:	e8 f2 da fe ff       	call   c000f840 <malloc>
c0021d4e:	89 07                	mov    DWORD PTR [edi],eax
c0021d50:	89 c3                	mov    ebx,eax
c0021d52:	59                   	pop    ecx
c0021d53:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021d57:	50                   	push   eax
c0021d58:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0021d5b:	50                   	push   eax
c0021d5c:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d60:	50                   	push   eax
c0021d61:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0021d65:	50                   	push   eax
c0021d66:	56                   	push   esi
c0021d67:	e8 b3 fd ff ff       	call   c0021b1f <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0021d6c:	83 c4 20             	add    esp,0x20
c0021d6f:	84 c0                	test   al,al
c0021d71:	74 07                	je     c0021d7a <ISO9660::openDir(char const*, void**)+0x54>
c0021d73:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0021d78:	75 21                	jne    c0021d9b <ISO9660::openDir(char const*, void**)+0x75>
c0021d7a:	0f b6 c0             	movzx  eax,al
c0021d7d:	52                   	push   edx
c0021d7e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0021d82:	50                   	push   eax
c0021d83:	68 09 c5 02 c0       	push   0xc002c509
c0021d88:	e8 e4 0d ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0021d8d:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0021d91:	83 c4 10             	add    esp,0x10
c0021d94:	b8 01 00 00 00       	mov    eax,0x1
c0021d99:	eb 3b                	jmp    c0021dd6 <ISO9660::openDir(char const*, void**)+0xb0>
c0021d9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021d9f:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0021da3:	89 03                	mov    DWORD PTR [ebx],eax
c0021da5:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0021dac:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021db0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0021db7:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0021dbe:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0021dc1:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0021dc8:	8a 06                	mov    al,BYTE PTR [esi]
c0021dca:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0021dcd:	31 c0                	xor    eax,eax
c0021dcf:	eb 05                	jmp    c0021dd6 <ISO9660::openDir(char const*, void**)+0xb0>
c0021dd1:	b8 04 00 00 00       	mov    eax,0x4
c0021dd6:	83 c4 10             	add    esp,0x10
c0021dd9:	5b                   	pop    ebx
c0021dda:	5e                   	pop    esi
c0021ddb:	5f                   	pop    edi
c0021ddc:	c3                   	ret    
c0021ddd:	90                   	nop

c0021dde <ISO9660::ISO9660()>:
c0021dde:	83 ec 0c             	sub    esp,0xc
c0021de1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021de5:	83 ec 0c             	sub    esp,0xc
c0021de8:	50                   	push   eax
c0021de9:	e8 88 10 ff ff       	call   c0012e76 <Filesystem::Filesystem()>
c0021dee:	83 c4 10             	add    esp,0x10
c0021df1:	ba 2c c5 02 c0       	mov    edx,0xc002c52c
c0021df6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021dfa:	89 10                	mov    DWORD PTR [eax],edx
c0021dfc:	90                   	nop
c0021dfd:	83 c4 0c             	add    esp,0xc
c0021e00:	c3                   	ret    
c0021e01:	90                   	nop

c0021e02 <SoundChannel::~SoundChannel()>:
c0021e02:	83 ec 0c             	sub    esp,0xc
c0021e05:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e09:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0021e0c:	83 ec 0c             	sub    esp,0xc
c0021e0f:	50                   	push   eax
c0021e10:	e8 3b da fe ff       	call   c000f850 <free>
c0021e15:	83 c4 10             	add    esp,0x10
c0021e18:	90                   	nop
c0021e19:	83 c4 0c             	add    esp,0xc
c0021e1c:	c3                   	ret    
c0021e1d:	90                   	nop

c0021e1e <SoundChannel::setSpeed(float)>:
c0021e1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e22:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021e26:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0021e29:	c3                   	ret    

c0021e2a <SoundChannel::getSpeed()>:
c0021e2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e2e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0021e31:	c3                   	ret    

c0021e32 <SoundChannel::setVolume(int)>:
c0021e32:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021e36:	83 f8 64             	cmp    eax,0x64
c0021e39:	7e 05                	jle    c0021e40 <SoundChannel::setVolume(int)+0xe>
c0021e3b:	b8 64 00 00 00       	mov    eax,0x64
c0021e40:	85 c0                	test   eax,eax
c0021e42:	79 02                	jns    c0021e46 <SoundChannel::setVolume(int)+0x14>
c0021e44:	31 c0                	xor    eax,eax
c0021e46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0021e4a:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0021e4d:	c3                   	ret    

c0021e4e <SoundChannel::getVolume()>:
c0021e4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e52:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0021e55:	c3                   	ret    

c0021e56 <SoundChannel::pause()>:
c0021e56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021e5a:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0021e5e:	c3                   	ret    
c0021e5f:	90                   	nop

c0021e60 <SoundChannel::SoundChannel(int, int, int, int)>:
c0021e60:	83 ec 1c             	sub    esp,0x1c
c0021e63:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0021e67:	e8 ea ff ff ff       	call   c0021e56 <SoundChannel::pause()>
c0021e6c:	83 c4 04             	add    esp,0x4
c0021e6f:	6a 50                	push   0x50
c0021e71:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021e75:	e8 b8 ff ff ff       	call   c0021e32 <SoundChannel::setVolume(int)>
c0021e7a:	83 c4 08             	add    esp,0x8
c0021e7d:	a1 a4 c5 02 c0       	mov    eax,ds:0xc002c5a4
c0021e82:	50                   	push   eax
c0021e83:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0021e87:	e8 92 ff ff ff       	call   c0021e1e <SoundChannel::setSpeed(float)>
c0021e8c:	83 c4 08             	add    esp,0x8
c0021e8f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e93:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0021e97:	89 10                	mov    DWORD PTR [eax],edx
c0021e99:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021e9d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0021ea1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0021ea4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ea8:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0021eac:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0021eaf:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c0021eb4:	75 23                	jne    c0021ed9 <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c0021eb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021eba:	8b 10                	mov    edx,DWORD PTR [eax]
c0021ebc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ec0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021ec3:	0f af c2             	imul   eax,edx
c0021ec6:	85 c0                	test   eax,eax
c0021ec8:	79 03                	jns    c0021ecd <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c0021eca:	83 c0 03             	add    eax,0x3
c0021ecd:	c1 f8 02             	sar    eax,0x2
c0021ed0:	05 a0 0f 00 00       	add    eax,0xfa0
c0021ed5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0021ed9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021edd:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021ee1:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0021ee4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ee8:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0021eef:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021ef3:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0021efa:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021efe:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021f01:	c1 e0 02             	shl    eax,0x2
c0021f04:	83 ec 0c             	sub    esp,0xc
c0021f07:	50                   	push   eax
c0021f08:	e8 33 d9 fe ff       	call   c000f840 <malloc>
c0021f0d:	83 c4 10             	add    esp,0x10
c0021f10:	89 c2                	mov    edx,eax
c0021f12:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f16:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0021f19:	83 ec 04             	sub    esp,0x4
c0021f1c:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021f20:	50                   	push   eax
c0021f21:	6a 01                	push   0x1
c0021f23:	6a 04                	push   0x4
c0021f25:	e8 75 6c fe ff       	call   c0008b9f <src_new>
c0021f2a:	83 c4 10             	add    esp,0x10
c0021f2d:	89 c2                	mov    edx,eax
c0021f2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021f33:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0021f36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021f3a:	85 c0                	test   eax,eax
c0021f3c:	74 10                	je     c0021f4e <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0021f3e:	83 ec 0c             	sub    esp,0xc
c0021f41:	68 88 c5 02 c0       	push   0xc002c588
c0021f46:	e8 a2 82 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c0021f4b:	83 c4 10             	add    esp,0x10
c0021f4e:	a0 60 23 03 c0       	mov    al,ds:0xc0032360
c0021f53:	83 f0 01             	xor    eax,0x1
c0021f56:	84 c0                	test   al,al
c0021f58:	74 57                	je     c0021fb1 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0021f5a:	a1 a8 c5 02 c0       	mov    eax,ds:0xc002c5a8
c0021f5f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021f63:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0021f6b:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0021f73:	7f 35                	jg     c0021faa <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0021f75:	83 ec 0c             	sub    esp,0xc
c0021f78:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021f7c:	e8 96 4f 00 00       	call   c0026f17 <__floatsisf>
c0021f81:	83 c4 10             	add    esp,0x10
c0021f84:	8b 15 a8 c5 02 c0    	mov    edx,DWORD PTR ds:0xc002c5a8
c0021f8a:	83 ec 08             	sub    esp,0x8
c0021f8d:	52                   	push   edx
c0021f8e:	50                   	push   eax
c0021f8f:	e8 95 4b 00 00       	call   c0026b29 <__mulsf3>
c0021f94:	83 c4 10             	add    esp,0x10
c0021f97:	89 c2                	mov    edx,eax
c0021f99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021f9d:	89 14 85 60 1f 03 c0 	mov    DWORD PTR [eax*4-0x3ffce0a0],edx
c0021fa4:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0021fa8:	eb c1                	jmp    c0021f6b <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0021faa:	c6 05 60 23 03 c0 01 	mov    BYTE PTR ds:0xc0032360,0x1
c0021fb1:	90                   	nop
c0021fb2:	83 c4 1c             	add    esp,0x1c
c0021fb5:	c3                   	ret    

c0021fb6 <SoundChannel::play()>:
c0021fb6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fba:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0021fbe:	c3                   	ret    
c0021fbf:	90                   	nop

c0021fc0 <SoundChannel::paused()>:
c0021fc0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fc4:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0021fc7:	c3                   	ret    

c0021fc8 <SoundChannel::getSampleRate()>:
c0021fc8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fcc:	8b 00                	mov    eax,DWORD PTR [eax]
c0021fce:	c3                   	ret    
c0021fcf:	90                   	nop

c0021fd0 <SoundChannel::getBits()>:
c0021fd0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0021fd7:	c3                   	ret    

c0021fd8 <SoundChannel::getBufferUsed()>:
c0021fd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fdc:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0021fdf:	c3                   	ret    

c0021fe0 <SoundChannel::getBufferSize()>:
c0021fe0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0021fe4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0021fe7:	c3                   	ret    

c0021fe8 <SoundChannel::unbuffer(float*, int, int)>:
c0021fe8:	56                   	push   esi
c0021fe9:	53                   	push   ebx
c0021fea:	83 ec 40             	sub    esp,0x40
c0021fed:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0021ff1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0021ff4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0021ff8:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0021ffb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0021fff:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022003:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022007:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c002200b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c002200f:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022013:	e8 ff 4e 00 00       	call   c0026f17 <__floatsisf>
c0022018:	5a                   	pop    edx
c0022019:	89 c6                	mov    esi,eax
c002201b:	ff 33                	push   DWORD PTR [ebx]
c002201d:	e8 f5 4e 00 00       	call   c0026f17 <__floatsisf>
c0022022:	59                   	pop    ecx
c0022023:	5a                   	pop    edx
c0022024:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022027:	50                   	push   eax
c0022028:	e8 fc 4a 00 00       	call   c0026b29 <__mulsf3>
c002202d:	59                   	pop    ecx
c002202e:	5a                   	pop    edx
c002202f:	50                   	push   eax
c0022030:	56                   	push   esi
c0022031:	e8 b6 4c 00 00       	call   c0026cec <__divsf3>
c0022036:	89 04 24             	mov    DWORD PTR [esp],eax
c0022039:	e8 a9 61 00 00       	call   c00281e7 <__extendsfdf2>
c002203e:	59                   	pop    ecx
c002203f:	5e                   	pop    esi
c0022040:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022044:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022048:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022050:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022054:	50                   	push   eax
c0022055:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022058:	e8 37 67 fe ff       	call   c0008794 <src_process>
c002205d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022061:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022064:	83 c4 0c             	add    esp,0xc
c0022067:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c002206a:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c002206d:	29 d0                	sub    eax,edx
c002206f:	c1 e0 02             	shl    eax,0x2
c0022072:	50                   	push   eax
c0022073:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022076:	50                   	push   eax
c0022077:	51                   	push   ecx
c0022078:	e8 ff e5 fd ff       	call   c000067c <memmove>
c002207d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022081:	83 c4 44             	add    esp,0x44
c0022084:	5b                   	pop    ebx
c0022085:	5e                   	pop    esi
c0022086:	c3                   	ret    
c0022087:	90                   	nop

c0022088 <SoundChannel::buffer8(unsigned char*, int)>:
c0022088:	55                   	push   ebp
c0022089:	57                   	push   edi
c002208a:	56                   	push   esi
c002208b:	53                   	push   ebx
c002208c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022090:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022094:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022097:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c002209b:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c002209e:	74 7a                	je     c002211a <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00220a0:	85 ff                	test   edi,edi
c00220a2:	7e 76                	jle    c002211a <SoundChannel::buffer8(unsigned char*, int)+0x92>
c00220a4:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c00220a8:	8d 70 01             	lea    esi,[eax+0x1]
c00220ab:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00220ae:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00220b1:	8b 1c 9d 60 1f 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce0a0]
c00220b8:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00220bb:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00220be:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c00220c1:	74 5e                	je     c0022121 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c00220c3:	83 ff 01             	cmp    edi,0x1
c00220c6:	74 4b                	je     c0022113 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c00220c8:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c00220cc:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c00220cf:	8d 70 01             	lea    esi,[eax+0x1]
c00220d2:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00220d5:	8b 1c 9d 60 1f 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce0a0]
c00220dc:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c00220df:	b8 02 00 00 00       	mov    eax,0x2
c00220e4:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c00220e7:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c00220ea:	75 23                	jne    c002210f <SoundChannel::buffer8(unsigned char*, int)+0x87>
c00220ec:	eb 27                	jmp    c0022115 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c00220ee:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c00220f3:	8d 71 01             	lea    esi,[ecx+0x1]
c00220f6:	40                   	inc    eax
c00220f7:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c00220fa:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c00220fd:	8b 1c 9d 60 1f 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffce0a0]
c0022104:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022107:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c002210a:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c002210d:	74 06                	je     c0022115 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c002210f:	39 c7                	cmp    edi,eax
c0022111:	75 db                	jne    c00220ee <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022113:	89 f8                	mov    eax,edi
c0022115:	5b                   	pop    ebx
c0022116:	5e                   	pop    esi
c0022117:	5f                   	pop    edi
c0022118:	5d                   	pop    ebp
c0022119:	c3                   	ret    
c002211a:	5b                   	pop    ebx
c002211b:	31 c0                	xor    eax,eax
c002211d:	5e                   	pop    esi
c002211e:	5f                   	pop    edi
c002211f:	5d                   	pop    ebp
c0022120:	c3                   	ret    
c0022121:	b8 01 00 00 00       	mov    eax,0x1
c0022126:	eb ed                	jmp    c0022115 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022128 <SoundDevice::SoundDevice(char const*)>:
c0022128:	83 ec 1c             	sub    esp,0x1c
c002212b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002212f:	83 ec 08             	sub    esp,0x8
c0022132:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022136:	50                   	push   eax
c0022137:	e8 4c 20 ff ff       	call   c0014188 <Device::Device(char const*)>
c002213c:	83 c4 10             	add    esp,0x10
c002213f:	ba b4 c5 02 c0       	mov    edx,0xc002c5b4
c0022144:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022148:	89 10                	mov    DWORD PTR [eax],edx
c002214a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002214e:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002215c:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022166:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002216e:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022173:	7f 19                	jg     c002218e <SoundDevice::SoundDevice(char const*)+0x66>
c0022175:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022179:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002217d:	83 c2 54             	add    edx,0x54
c0022180:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022188:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c002218c:	eb e0                	jmp    c002216e <SoundDevice::SoundDevice(char const*)+0x46>
c002218e:	90                   	nop
c002218f:	83 c4 1c             	add    esp,0x1c
c0022192:	c3                   	ret    
c0022193:	90                   	nop

c0022194 <SoundDevice::~SoundDevice()>:
c0022194:	53                   	push   ebx
c0022195:	83 ec 18             	sub    esp,0x18
c0022198:	ba b4 c5 02 c0       	mov    edx,0xc002c5b4
c002219d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221a1:	89 10                	mov    DWORD PTR [eax],edx
c00221a3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00221ab:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c00221b0:	7f 46                	jg     c00221f8 <SoundDevice::~SoundDevice()+0x64>
c00221b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221b6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00221ba:	83 c2 54             	add    edx,0x54
c00221bd:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c00221c1:	85 c0                	test   eax,eax
c00221c3:	74 2d                	je     c00221f2 <SoundDevice::~SoundDevice()+0x5e>
c00221c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221c9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00221cd:	83 c2 54             	add    edx,0x54
c00221d0:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c00221d4:	85 db                	test   ebx,ebx
c00221d6:	74 1a                	je     c00221f2 <SoundDevice::~SoundDevice()+0x5e>
c00221d8:	83 ec 0c             	sub    esp,0xc
c00221db:	53                   	push   ebx
c00221dc:	e8 21 fc ff ff       	call   c0021e02 <SoundChannel::~SoundChannel()>
c00221e1:	83 c4 10             	add    esp,0x10
c00221e4:	83 ec 08             	sub    esp,0x8
c00221e7:	6a 2c                	push   0x2c
c00221e9:	53                   	push   ebx
c00221ea:	e8 a2 08 ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c00221ef:	83 c4 10             	add    esp,0x10
c00221f2:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00221f6:	eb b3                	jmp    c00221ab <SoundDevice::~SoundDevice()+0x17>
c00221f8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00221fc:	83 ec 0c             	sub    esp,0xc
c00221ff:	50                   	push   eax
c0022200:	e8 65 1c ff ff       	call   c0013e6a <Device::~Device()>
c0022205:	83 c4 10             	add    esp,0x10
c0022208:	90                   	nop
c0022209:	83 c4 18             	add    esp,0x18
c002220c:	5b                   	pop    ebx
c002220d:	c3                   	ret    

c002220e <SoundDevice::~SoundDevice()>:
c002220e:	83 ec 0c             	sub    esp,0xc
c0022211:	83 ec 0c             	sub    esp,0xc
c0022214:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022218:	e8 77 ff ff ff       	call   c0022194 <SoundDevice::~SoundDevice()>
c002221d:	83 c4 10             	add    esp,0x10
c0022220:	83 ec 08             	sub    esp,0x8
c0022223:	68 e4 01 00 00       	push   0x1e4
c0022228:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002222c:	e8 60 08 ff ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0022231:	83 c4 10             	add    esp,0x10
c0022234:	83 c4 0c             	add    esp,0xc
c0022237:	c3                   	ret    

c0022238 <SoundDevice::getFreeChannelNum()>:
c0022238:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002223c:	31 c0                	xor    eax,eax
c002223e:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022246:	74 09                	je     c0022251 <SoundDevice::getFreeChannelNum()+0x19>
c0022248:	40                   	inc    eax
c0022249:	83 f8 20             	cmp    eax,0x20
c002224c:	75 f0                	jne    c002223e <SoundDevice::getFreeChannelNum()+0x6>
c002224e:	83 c8 ff             	or     eax,0xffffffff
c0022251:	c3                   	ret    

c0022252 <SoundDevice::addChannel(SoundChannel*)>:
c0022252:	56                   	push   esi
c0022253:	53                   	push   ebx
c0022254:	51                   	push   ecx
c0022255:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022259:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c002225d:	53                   	push   ebx
c002225e:	e8 d5 ff ff ff       	call   c0022238 <SoundDevice::getFreeChannelNum()>
c0022263:	5a                   	pop    edx
c0022264:	83 f8 ff             	cmp    eax,0xffffffff
c0022267:	74 51                	je     c00222ba <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022269:	85 f6                	test   esi,esi
c002226b:	74 4d                	je     c00222ba <SoundDevice::addChannel(SoundChannel*)+0x68>
c002226d:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022274:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c002227b:	75 30                	jne    c00222ad <SoundDevice::addChannel(SoundChannel*)+0x5b>
c002227d:	83 ec 0c             	sub    esp,0xc
c0022280:	56                   	push   esi
c0022281:	e8 42 fd ff ff       	call   c0021fc8 <SoundChannel::getSampleRate()>
c0022286:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c002228c:	89 34 24             	mov    DWORD PTR [esp],esi
c002228f:	e8 3c fd ff ff       	call   c0021fd0 <SoundChannel::getBits()>
c0022294:	83 c4 0c             	add    esp,0xc
c0022297:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c002229d:	8b 13                	mov    edx,DWORD PTR [ebx]
c002229f:	50                   	push   eax
c00222a0:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c00222a6:	53                   	push   ebx
c00222a7:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00222aa:	83 c4 10             	add    esp,0x10
c00222ad:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c00222b3:	b8 01 00 00 00       	mov    eax,0x1
c00222b8:	eb 03                	jmp    c00222bd <SoundDevice::addChannel(SoundChannel*)+0x6b>
c00222ba:	83 c8 ff             	or     eax,0xffffffff
c00222bd:	5a                   	pop    edx
c00222be:	5b                   	pop    ebx
c00222bf:	5e                   	pop    esi
c00222c0:	c3                   	ret    
c00222c1:	90                   	nop

c00222c2 <SoundDevice::removeChannel(int)>:
c00222c2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00222c6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00222ca:	83 fa 1f             	cmp    edx,0x1f
c00222cd:	77 23                	ja     c00222f2 <SoundDevice::removeChannel(int)+0x30>
c00222cf:	8d 14 90             	lea    edx,[eax+edx*4]
c00222d2:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c00222d9:	74 17                	je     c00222f2 <SoundDevice::removeChannel(int)+0x30>
c00222db:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c00222e5:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c00222eb:	75 05                	jne    c00222f2 <SoundDevice::removeChannel(int)+0x30>
c00222ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00222ef:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c00222f2:	c3                   	ret    
c00222f3:	90                   	nop

c00222f4 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c00222f4:	57                   	push   edi
c00222f5:	56                   	push   esi
c00222f6:	53                   	push   ebx
c00222f7:	31 db                	xor    ebx,ebx
c00222f9:	83 ec 10             	sub    esp,0x10
c00222fc:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022300:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022304:	0f 8d cb 00 00 00    	jge    c00223d5 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c002230a:	83 ec 0c             	sub    esp,0xc
c002230d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022311:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022314:	e8 ce 5e 00 00       	call   c00281e7 <__extendsfdf2>
c0022319:	83 c4 10             	add    esp,0x10
c002231c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022320:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022324:	68 00 00 f0 3f       	push   0x3ff00000
c0022329:	6a 00                	push   0x0
c002232b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002232f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022333:	e8 3b 4e 00 00       	call   c0027173 <__adddf3>
c0022338:	83 c4 10             	add    esp,0x10
c002233b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002233f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022343:	68 00 00 e0 3f       	push   0x3fe00000
c0022348:	6a 00                	push   0x0
c002234a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002234e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022352:	e8 99 54 00 00       	call   c00277f0 <__muldf3>
c0022357:	83 c4 10             	add    esp,0x10
c002235a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002235e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022362:	68 00 00 60 40       	push   0x40600000
c0022367:	6a 00                	push   0x0
c0022369:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002236d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022371:	e8 7a 54 00 00       	call   c00277f0 <__muldf3>
c0022376:	59                   	pop    ecx
c0022377:	5f                   	pop    edi
c0022378:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002237c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022380:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022384:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022388:	e8 36 5d 00 00       	call   c00280c3 <__truncdfsf2>
c002238d:	5a                   	pop    edx
c002238e:	89 c7                	mov    edi,eax
c0022390:	59                   	pop    ecx
c0022391:	68 00 00 fe 42       	push   0x42fe0000
c0022396:	50                   	push   eax
c0022397:	e8 d1 4d 00 00       	call   c002716d <__gesf2>
c002239c:	83 c4 10             	add    esp,0x10
c002239f:	85 c0                	test   eax,eax
c00223a1:	78 06                	js     c00223a9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c00223a3:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c00223a7:	eb 26                	jmp    c00223cf <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00223a9:	50                   	push   eax
c00223aa:	50                   	push   eax
c00223ab:	6a 00                	push   0x0
c00223ad:	57                   	push   edi
c00223ae:	e8 be 4d 00 00       	call   c0027171 <__lesf2>
c00223b3:	83 c4 10             	add    esp,0x10
c00223b6:	85 c0                	test   eax,eax
c00223b8:	7f 06                	jg     c00223c0 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c00223ba:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c00223be:	eb 0f                	jmp    c00223cf <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c00223c0:	83 ec 0c             	sub    esp,0xc
c00223c3:	57                   	push   edi
c00223c4:	e8 b3 5e 00 00       	call   c002827c <lrintf>
c00223c9:	83 c4 10             	add    esp,0x10
c00223cc:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c00223cf:	43                   	inc    ebx
c00223d0:	e9 2b ff ff ff       	jmp    c0022300 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c00223d5:	83 c4 10             	add    esp,0x10
c00223d8:	5b                   	pop    ebx
c00223d9:	5e                   	pop    esi
c00223da:	5f                   	pop    edi
c00223db:	c3                   	ret    

c00223dc <SoundDevice::getAudio(int, float*, float*)>:
c00223dc:	55                   	push   ebp
c00223dd:	57                   	push   edi
c00223de:	56                   	push   esi
c00223df:	53                   	push   ebx
c00223e0:	31 db                	xor    ebx,ebx
c00223e2:	83 ec 20             	sub    esp,0x20
c00223e5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00223e9:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00223ed:	c1 e0 02             	shl    eax,0x2
c00223f0:	50                   	push   eax
c00223f1:	6a 00                	push   0x0
c00223f3:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00223f7:	e8 7c e3 fd ff       	call   c0000778 <memset>
c00223fc:	83 c4 10             	add    esp,0x10
c00223ff:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022403:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c002240a:	85 c0                	test   eax,eax
c002240c:	0f 84 d7 00 00 00    	je     c00224e9 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022412:	83 ec 0c             	sub    esp,0xc
c0022415:	50                   	push   eax
c0022416:	e8 a5 fb ff ff       	call   c0021fc0 <SoundChannel::paused()>
c002241b:	83 c4 10             	add    esp,0x10
c002241e:	84 c0                	test   al,al
c0022420:	0f 85 c3 00 00 00    	jne    c00224e9 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022426:	83 ec 0c             	sub    esp,0xc
c0022429:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022430:	e8 19 fa ff ff       	call   c0021e4e <SoundChannel::getVolume()>
c0022435:	83 c4 10             	add    esp,0x10
c0022438:	85 c0                	test   eax,eax
c002243a:	0f 84 a9 00 00 00    	je     c00224e9 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022440:	83 ec 0c             	sub    esp,0xc
c0022443:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c002244a:	e8 ff f9 ff ff       	call   c0021e4e <SoundChannel::getVolume()>
c002244f:	83 ec 0c             	sub    esp,0xc
c0022452:	50                   	push   eax
c0022453:	e8 bf 4a 00 00       	call   c0026f17 <__floatsisf>
c0022458:	59                   	pop    ecx
c0022459:	5d                   	pop    ebp
c002245a:	31 ed                	xor    ebp,ebp
c002245c:	68 00 00 c8 42       	push   0x42c80000
c0022461:	50                   	push   eax
c0022462:	e8 85 48 00 00       	call   c0026cec <__divsf3>
c0022467:	83 c4 10             	add    esp,0x10
c002246a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002246e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022472:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022478:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c002247c:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022483:	e8 60 fb ff ff       	call   c0021fe8 <SoundChannel::unbuffer(float*, int, int)>
c0022488:	83 c4 20             	add    esp,0x20
c002248b:	89 c1                	mov    ecx,eax
c002248d:	39 cd                	cmp    ebp,ecx
c002248f:	7d 52                	jge    c00224e3 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022491:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022495:	50                   	push   eax
c0022496:	50                   	push   eax
c0022497:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c002249b:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c002249e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00224a2:	e8 82 46 00 00       	call   c0026b29 <__mulsf3>
c00224a7:	5a                   	pop    edx
c00224a8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00224ac:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c00224b2:	e8 60 4a 00 00       	call   c0026f17 <__floatsisf>
c00224b7:	59                   	pop    ecx
c00224b8:	5a                   	pop    edx
c00224b9:	50                   	push   eax
c00224ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00224be:	e8 29 48 00 00       	call   c0026cec <__divsf3>
c00224c3:	59                   	pop    ecx
c00224c4:	5a                   	pop    edx
c00224c5:	50                   	push   eax
c00224c6:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00224ca:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c00224cd:	e8 34 43 00 00       	call   c0026806 <__addsf3>
c00224d2:	83 c4 10             	add    esp,0x10
c00224d5:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00224d9:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00224dd:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c00224e0:	45                   	inc    ebp
c00224e1:	eb aa                	jmp    c002248d <SoundDevice::getAudio(int, float*, float*)+0xb1>
c00224e3:	39 cf                	cmp    edi,ecx
c00224e5:	7e 02                	jle    c00224e9 <SoundDevice::getAudio(int, float*, float*)+0x10d>
c00224e7:	89 cf                	mov    edi,ecx
c00224e9:	43                   	inc    ebx
c00224ea:	83 fb 20             	cmp    ebx,0x20
c00224ed:	0f 85 10 ff ff ff    	jne    c0022403 <SoundDevice::getAudio(int, float*, float*)+0x27>
c00224f3:	83 c4 1c             	add    esp,0x1c
c00224f6:	89 f8                	mov    eax,edi
c00224f8:	5b                   	pop    ebx
c00224f9:	5e                   	pop    esi
c00224fa:	5f                   	pop    edi
c00224fb:	5d                   	pop    ebp
c00224fc:	c3                   	ret    
c00224fd:	90                   	nop

c00224fe <PCI::open(int, int, void*)>:
c00224fe:	83 ec 18             	sub    esp,0x18
c0022501:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022505:	8b 10                	mov    edx,DWORD PTR [eax]
c0022507:	50                   	push   eax
c0022508:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002250b:	31 c0                	xor    eax,eax
c002250d:	83 c4 1c             	add    esp,0x1c
c0022510:	c3                   	ret    
c0022511:	90                   	nop

c0022512 <PCI::close(int, int, void*)>:
c0022512:	31 c0                	xor    eax,eax
c0022514:	c3                   	ret    
c0022515:	90                   	nop

c0022516 <PCI::PCI()>:
c0022516:	83 ec 0c             	sub    esp,0xc
c0022519:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002251d:	83 ec 08             	sub    esp,0x8
c0022520:	68 e4 c5 02 c0       	push   0xc002c5e4
c0022525:	50                   	push   eax
c0022526:	e8 e1 12 ff ff       	call   c001380c <Bus::Bus(char const*)>
c002252b:	83 c4 10             	add    esp,0x10
c002252e:	ba 50 c6 02 c0       	mov    edx,0xc002c650
c0022533:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022537:	89 10                	mov    DWORD PTR [eax],edx
c0022539:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002253d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022543:	0f b6 d0             	movzx  edx,al
c0022546:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002254a:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0022551:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022555:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002255b:	0f b6 d0             	movzx  edx,al
c002255e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022562:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c0022567:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002256b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0022571:	8d 50 01             	lea    edx,[eax+0x1]
c0022574:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0022578:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c002257e:	0f b6 d0             	movzx  edx,al
c0022581:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022585:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0022589:	83 c9 c0             	or     ecx,0xffffffc0
c002258c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0022590:	90                   	nop
c0022591:	83 c4 0c             	add    esp,0xc
c0022594:	c3                   	ret    
c0022595:	90                   	nop

c0022596 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0022596:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c002259a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002259f:	89 ca                	mov    edx,ecx
c00225a1:	c1 e0 10             	shl    eax,0x10
c00225a4:	81 e2 fc 00 00 00    	and    edx,0xfc
c00225aa:	09 d0                	or     eax,edx
c00225ac:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00225b1:	c1 e2 08             	shl    edx,0x8
c00225b4:	09 d0                	or     eax,edx
c00225b6:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c00225bb:	c1 e2 0b             	shl    edx,0xb
c00225be:	09 d0                	or     eax,edx
c00225c0:	ba f8 0c 00 00       	mov    edx,0xcf8
c00225c5:	0d 00 00 00 80       	or     eax,0x80000000
c00225ca:	ef                   	out    dx,eax
c00225cb:	ba fc 0c 00 00       	mov    edx,0xcfc
c00225d0:	ed                   	in     eax,dx
c00225d1:	83 e1 02             	and    ecx,0x2
c00225d4:	0f b6 c9             	movzx  ecx,cl
c00225d7:	c1 e1 03             	shl    ecx,0x3
c00225da:	d3 e8                	shr    eax,cl
c00225dc:	c3                   	ret    
c00225dd:	90                   	nop

c00225de <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c00225de:	6a 00                	push   0x0
c00225e0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00225e5:	50                   	push   eax
c00225e6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00225eb:	50                   	push   eax
c00225ec:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00225f1:	50                   	push   eax
c00225f2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00225f6:	e8 9b ff ff ff       	call   c0022596 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00225fb:	83 c4 14             	add    esp,0x14
c00225fe:	c3                   	ret    
c00225ff:	90                   	nop

c0022600 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c0022600:	6a 0e                	push   0xe
c0022602:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022607:	50                   	push   eax
c0022608:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002260d:	50                   	push   eax
c002260e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022613:	50                   	push   eax
c0022614:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022618:	e8 79 ff ff ff       	call   c0022596 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002261d:	83 c4 14             	add    esp,0x14
c0022620:	0f b6 c0             	movzx  eax,al
c0022623:	c3                   	ret    

c0022624 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c0022624:	55                   	push   ebp
c0022625:	57                   	push   edi
c0022626:	56                   	push   esi
c0022627:	53                   	push   ebx
c0022628:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c002262d:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c0022632:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c0022637:	6a 0a                	push   0xa
c0022639:	56                   	push   esi
c002263a:	55                   	push   ebp
c002263b:	57                   	push   edi
c002263c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022640:	e8 51 ff ff ff       	call   c0022596 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022645:	6a 0a                	push   0xa
c0022647:	89 c3                	mov    ebx,eax
c0022649:	56                   	push   esi
c002264a:	0f b6 db             	movzx  ebx,bl
c002264d:	55                   	push   ebp
c002264e:	57                   	push   edi
c002264f:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0022653:	e8 3e ff ff ff       	call   c0022596 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022658:	83 c4 28             	add    esp,0x28
c002265b:	25 00 ff 00 00       	and    eax,0xff00
c0022660:	09 d8                	or     eax,ebx
c0022662:	5b                   	pop    ebx
c0022663:	5e                   	pop    esi
c0022664:	5f                   	pop    edi
c0022665:	5d                   	pop    ebp
c0022666:	c3                   	ret    
c0022667:	90                   	nop

c0022668 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0022668:	6a 08                	push   0x8
c002266a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002266f:	50                   	push   eax
c0022670:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022675:	50                   	push   eax
c0022676:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002267b:	50                   	push   eax
c002267c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022680:	e8 11 ff ff ff       	call   c0022596 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022685:	83 c4 14             	add    esp,0x14
c0022688:	0f b6 c4             	movzx  eax,ah
c002268b:	c3                   	ret    

c002268c <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c002268c:	6a 08                	push   0x8
c002268e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022693:	50                   	push   eax
c0022694:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022699:	50                   	push   eax
c002269a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002269f:	50                   	push   eax
c00226a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226a4:	e8 ed fe ff ff       	call   c0022596 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226a9:	83 c4 14             	add    esp,0x14
c00226ac:	c3                   	ret    
c00226ad:	90                   	nop

c00226ae <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c00226ae:	6a 3c                	push   0x3c
c00226b0:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00226b5:	50                   	push   eax
c00226b6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00226bb:	50                   	push   eax
c00226bc:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00226c1:	50                   	push   eax
c00226c2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226c6:	e8 cb fe ff ff       	call   c0022596 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226cb:	83 c4 14             	add    esp,0x14
c00226ce:	c3                   	ret    
c00226cf:	90                   	nop

c00226d0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c00226d0:	6a 18                	push   0x18
c00226d2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00226d7:	50                   	push   eax
c00226d8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00226dd:	50                   	push   eax
c00226de:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00226e3:	50                   	push   eax
c00226e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00226e8:	e8 a9 fe ff ff       	call   c0022596 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00226ed:	83 c4 14             	add    esp,0x14
c00226f0:	0f b6 c4             	movzx  eax,ah
c00226f3:	c3                   	ret    

c00226f4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00226f4:	55                   	push   ebp
c00226f5:	57                   	push   edi
c00226f6:	56                   	push   esi
c00226f7:	53                   	push   ebx
c00226f8:	50                   	push   eax
c00226f9:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00226fd:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c0022702:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022707:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c002270c:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c0022713:	8d 43 12             	lea    eax,[ebx+0x12]
c0022716:	83 c3 10             	add    ebx,0x10
c0022719:	0f b6 c0             	movzx  eax,al
c002271c:	0f b6 db             	movzx  ebx,bl
c002271f:	50                   	push   eax
c0022720:	51                   	push   ecx
c0022721:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0022725:	57                   	push   edi
c0022726:	55                   	push   ebp
c0022727:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c002272b:	e8 66 fe ff ff       	call   c0022596 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022730:	53                   	push   ebx
c0022731:	89 c6                	mov    esi,eax
c0022733:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0022737:	c1 e6 10             	shl    esi,0x10
c002273a:	51                   	push   ecx
c002273b:	57                   	push   edi
c002273c:	55                   	push   ebp
c002273d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0022741:	e8 50 fe ff ff       	call   c0022596 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022746:	83 c4 2c             	add    esp,0x2c
c0022749:	0f b7 c0             	movzx  eax,ax
c002274c:	5b                   	pop    ebx
c002274d:	09 f0                	or     eax,esi
c002274f:	5e                   	pop    esi
c0022750:	5f                   	pop    edi
c0022751:	5d                   	pop    ebp
c0022752:	c3                   	ret    
c0022753:	90                   	nop

c0022754 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0022754:	53                   	push   ebx
c0022755:	ba f8 0c 00 00       	mov    edx,0xcf8
c002275a:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002275f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022763:	c1 e1 10             	shl    ecx,0x10
c0022766:	25 fc 00 00 00       	and    eax,0xfc
c002276b:	09 c1                	or     ecx,eax
c002276d:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0022772:	c1 e0 08             	shl    eax,0x8
c0022775:	09 c1                	or     ecx,eax
c0022777:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c002277c:	c1 e0 0b             	shl    eax,0xb
c002277f:	09 c1                	or     ecx,eax
c0022781:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0022787:	89 c8                	mov    eax,ecx
c0022789:	ef                   	out    dx,eax
c002278a:	ba fc 0c 00 00       	mov    edx,0xcfc
c002278f:	ed                   	in     eax,dx
c0022790:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0022795:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c002279a:	74 0a                	je     c00227a6 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c002279c:	0f b7 d8             	movzx  ebx,ax
c002279f:	89 d0                	mov    eax,edx
c00227a1:	c1 e0 10             	shl    eax,0x10
c00227a4:	eb 05                	jmp    c00227ab <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c00227a6:	66 31 c0             	xor    ax,ax
c00227a9:	89 d3                	mov    ebx,edx
c00227ab:	09 c3                	or     ebx,eax
c00227ad:	ba f8 0c 00 00       	mov    edx,0xcf8
c00227b2:	89 c8                	mov    eax,ecx
c00227b4:	ef                   	out    dx,eax
c00227b5:	ba fc 0c 00 00       	mov    edx,0xcfc
c00227ba:	89 d8                	mov    eax,ebx
c00227bc:	ef                   	out    dx,eax
c00227bd:	5b                   	pop    ebx
c00227be:	c3                   	ret    
c00227bf:	90                   	nop

c00227c0 <PCI::checkBus(unsigned char)>:
c00227c0:	56                   	push   esi
c00227c1:	53                   	push   ebx
c00227c2:	31 db                	xor    ebx,ebx
c00227c4:	51                   	push   ecx
c00227c5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00227ca:	52                   	push   edx
c00227cb:	53                   	push   ebx
c00227cc:	43                   	inc    ebx
c00227cd:	56                   	push   esi
c00227ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00227d2:	e8 2b 03 00 00       	call   c0022b02 <PCI::checkDevice(unsigned char, unsigned char)>
c00227d7:	83 c4 10             	add    esp,0x10
c00227da:	83 fb 20             	cmp    ebx,0x20
c00227dd:	75 eb                	jne    c00227ca <PCI::checkBus(unsigned char)+0xa>
c00227df:	58                   	pop    eax
c00227e0:	5b                   	pop    ebx
c00227e1:	5e                   	pop    esi
c00227e2:	c3                   	ret    
c00227e3:	90                   	nop

c00227e4 <PCI::foundDevice(PCIDeviceInfo)>:
c00227e4:	55                   	push   ebp
c00227e5:	57                   	push   edi
c00227e6:	56                   	push   esi
c00227e7:	53                   	push   ebx
c00227e8:	83 ec 1c             	sub    esp,0x1c
c00227eb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00227ef:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00227f5:	0f 84 52 01 00 00    	je     c002294d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c00227fb:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00227ff:	66 81 f9 06 04       	cmp    cx,0x406
c0022804:	75 2c                	jne    c0022832 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c0022806:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c002280b:	50                   	push   eax
c002280c:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c0022811:	50                   	push   eax
c0022812:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c0022817:	50                   	push   eax
c0022818:	56                   	push   esi
c0022819:	e8 b2 fe ff ff       	call   c00226d0 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c002281e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0022822:	0f b6 c0             	movzx  eax,al
c0022825:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0022829:	83 c4 2c             	add    esp,0x2c
c002282c:	5b                   	pop    ebx
c002282d:	5e                   	pop    esi
c002282e:	5f                   	pop    edi
c002282f:	5d                   	pop    ebp
c0022830:	eb 8e                	jmp    c00227c0 <PCI::checkBus(unsigned char)>
c0022832:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022836:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c002283c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0022844:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0022848:	88 d3                	mov    bl,dl
c002284a:	85 c0                	test   eax,eax
c002284c:	74 33                	je     c0022881 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002284e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0022851:	85 d2                	test   edx,edx
c0022853:	74 28                	je     c002287d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022855:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c002285b:	31 ef                	xor    edi,ebp
c002285d:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0022863:	75 18                	jne    c002287d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022865:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0022869:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c002286f:	75 0c                	jne    c002287d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0022871:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0022877:	0f 84 d0 00 00 00    	je     c002294d <PCI::foundDevice(PCIDeviceInfo)+0x169>
c002287d:	8b 00                	mov    eax,DWORD PTR [eax]
c002287f:	eb c9                	jmp    c002284a <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0022881:	66 81 f9 01 06       	cmp    cx,0x601
c0022886:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c002288a:	75 19                	jne    c00228a5 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c002288c:	83 ec 0c             	sub    esp,0xc
c002288f:	68 64 01 00 00       	push   0x164
c0022894:	e8 a7 cf fe ff       	call   c000f840 <malloc>
c0022899:	89 c5                	mov    ebp,eax
c002289b:	89 04 24             	mov    DWORD PTR [esp],eax
c002289e:	e8 95 0f 00 00       	call   c0023838 <SATABus::SATABus()>
c00228a3:	eb 1e                	jmp    c00228c3 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c00228a5:	66 81 f9 01 01       	cmp    cx,0x101
c00228aa:	75 60                	jne    c002290c <PCI::foundDevice(PCIDeviceInfo)+0x128>
c00228ac:	83 ec 0c             	sub    esp,0xc
c00228af:	68 70 02 00 00       	push   0x270
c00228b4:	e8 87 cf fe ff       	call   c000f840 <malloc>
c00228b9:	89 c5                	mov    ebp,eax
c00228bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00228be:	e8 03 03 00 00       	call   c0022bc6 <IDE::IDE()>
c00228c3:	58                   	pop    eax
c00228c4:	5a                   	pop    edx
c00228c5:	55                   	push   ebp
c00228c6:	56                   	push   esi
c00228c7:	e8 cc 16 ff ff       	call   c0013f98 <Device::addChild(Device*)>
c00228cc:	83 ec 1c             	sub    esp,0x1c
c00228cf:	b9 09 00 00 00       	mov    ecx,0x9
c00228d4:	fc                   	cld    
c00228d5:	89 e7                	mov    edi,esp
c00228d7:	89 de                	mov    esi,ebx
c00228d9:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00228db:	55                   	push   ebp
c00228dc:	e8 c1 15 ff ff       	call   c0013ea2 <Device::preOpenPCI(PCIDeviceInfo)>
c00228e1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00228e4:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00228e8:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00228f0:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00228f8:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c0022900:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0022903:	83 c4 4c             	add    esp,0x4c
c0022906:	5b                   	pop    ebx
c0022907:	5e                   	pop    esi
c0022908:	5f                   	pop    edi
c0022909:	5d                   	pop    ebp
c002290a:	ff e0                	jmp    eax
c002290c:	83 ec 0c             	sub    esp,0xc
c002290f:	68 58 01 00 00       	push   0x158
c0022914:	e8 27 cf fe ff       	call   c000f840 <malloc>
c0022919:	89 c5                	mov    ebp,eax
c002291b:	58                   	pop    eax
c002291c:	5a                   	pop    edx
c002291d:	68 ec c5 02 c0       	push   0xc002c5ec
c0022922:	55                   	push   ebp
c0022923:	e8 66 19 ff ff       	call   c001428e <DriverlessDevice::DriverlessDevice(char const*)>
c0022928:	59                   	pop    ecx
c0022929:	5f                   	pop    edi
c002292a:	55                   	push   ebp
c002292b:	56                   	push   esi
c002292c:	e8 67 16 ff ff       	call   c0013f98 <Device::addChild(Device*)>
c0022931:	b9 09 00 00 00       	mov    ecx,0x9
c0022936:	fc                   	cld    
c0022937:	89 df                	mov    edi,ebx
c0022939:	89 de                	mov    esi,ebx
c002293b:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002293d:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0022941:	83 c4 2c             	add    esp,0x2c
c0022944:	5b                   	pop    ebx
c0022945:	5e                   	pop    esi
c0022946:	5f                   	pop    edi
c0022947:	5d                   	pop    ebp
c0022948:	e9 55 15 ff ff       	jmp    c0013ea2 <Device::preOpenPCI(PCIDeviceInfo)>
c002294d:	83 c4 1c             	add    esp,0x1c
c0022950:	5b                   	pop    ebx
c0022951:	5e                   	pop    esi
c0022952:	5f                   	pop    edi
c0022953:	5d                   	pop    ebp
c0022954:	c3                   	ret    
c0022955:	90                   	nop

c0022956 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c0022956:	55                   	push   ebp
c0022957:	57                   	push   edi
c0022958:	56                   	push   esi
c0022959:	53                   	push   ebx
c002295a:	83 ec 5c             	sub    esp,0x5c
c002295d:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0022961:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022965:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0022969:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c002296e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022972:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0022976:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c002297b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002297f:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0022984:	6a 0c                	push   0xc
c0022986:	55                   	push   ebp
c0022987:	53                   	push   ebx
c0022988:	57                   	push   edi
c0022989:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0022990:	e8 01 fc ff ff       	call   c0022596 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022995:	55                   	push   ebp
c0022996:	53                   	push   ebx
c0022997:	57                   	push   edi
c0022998:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002299f:	e8 80 fc ff ff       	call   c0022624 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c00229a4:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c00229a9:	83 c4 24             	add    esp,0x24
c00229ac:	55                   	push   ebp
c00229ad:	53                   	push   ebx
c00229ae:	57                   	push   edi
c00229af:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00229b3:	e8 f6 fc ff ff       	call   c00226ae <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c00229b8:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c00229bc:	6a 3c                	push   0x3c
c00229be:	55                   	push   ebp
c00229bf:	53                   	push   ebx
c00229c0:	57                   	push   edi
c00229c1:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c00229c8:	e8 c9 fb ff ff       	call   c0022596 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00229cd:	0f b6 c4             	movzx  eax,ah
c00229d0:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00229d4:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00229d8:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c00229dc:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c00229e1:	83 c4 24             	add    esp,0x24
c00229e4:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00229ea:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c00229f1:	74 6c                	je     c0022a5f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00229f3:	31 f6                	xor    esi,esi
c00229f5:	8b 15 08 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e008
c00229fb:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022a01:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c0022a07:	7e 56                	jle    c0022a5f <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c0022a09:	8d 14 f2             	lea    edx,[edx+esi*8]
c0022a0c:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c0022a13:	39 cb                	cmp    ebx,ecx
c0022a15:	75 45                	jne    c0022a5c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022a17:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c0022a1e:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c0022a22:	75 38                	jne    c0022a5c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c0022a24:	83 ec 0c             	sub    esp,0xc
c0022a27:	68 06 c6 02 c0       	push   0xc002c606
c0022a2c:	e8 40 01 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0022a31:	8b 15 08 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e008
c0022a37:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0022a3d:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c0022a45:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c0022a49:	52                   	push   edx
c0022a4a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022a4e:	53                   	push   ebx
c0022a4f:	68 2b c6 02 c0       	push   0xc002c62b
c0022a54:	e8 18 01 ff ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0022a59:	83 c4 20             	add    esp,0x20
c0022a5c:	46                   	inc    esi
c0022a5d:	eb 96                	jmp    c00229f5 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0022a5f:	31 d2                	xor    edx,edx
c0022a61:	83 ec 0c             	sub    esp,0xc
c0022a64:	55                   	push   ebp
c0022a65:	53                   	push   ebx
c0022a66:	57                   	push   edi
c0022a67:	52                   	push   edx
c0022a68:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0022a6c:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022a73:	e8 7c fc ff ff       	call   c00226f4 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c0022a78:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0022a7c:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022a80:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c0022a84:	42                   	inc    edx
c0022a85:	83 c4 20             	add    esp,0x20
c0022a88:	83 fa 06             	cmp    edx,0x6
c0022a8b:	75 d4                	jne    c0022a61 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0022a8d:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0022a91:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c0022a95:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c0022a99:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0022a9d:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0022aa1:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c0022aa5:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0022aaa:	86 e0                	xchg   al,ah
c0022aac:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0022ab1:	55                   	push   ebp
c0022ab2:	53                   	push   ebx
c0022ab3:	57                   	push   edi
c0022ab4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0022ab8:	e8 ab fb ff ff       	call   c0022668 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0022abd:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0022ac1:	55                   	push   ebp
c0022ac2:	53                   	push   ebx
c0022ac3:	57                   	push   edi
c0022ac4:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0022acb:	e8 0e fb ff ff       	call   c00225de <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022ad0:	83 ec 0c             	sub    esp,0xc
c0022ad3:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c0022ad8:	b9 09 00 00 00       	mov    ecx,0x9
c0022add:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c0022ae1:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c0022ae5:	fc                   	cld    
c0022ae6:	89 e7                	mov    edi,esp
c0022ae8:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0022aea:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0022af1:	e8 ee fc ff ff       	call   c00227e4 <PCI::foundDevice(PCIDeviceInfo)>
c0022af6:	81 c4 8c 00 00 00    	add    esp,0x8c
c0022afc:	5b                   	pop    ebx
c0022afd:	5e                   	pop    esi
c0022afe:	5f                   	pop    edi
c0022aff:	5d                   	pop    ebp
c0022b00:	c3                   	ret    
c0022b01:	90                   	nop

c0022b02 <PCI::checkDevice(unsigned char, unsigned char)>:
c0022b02:	55                   	push   ebp
c0022b03:	57                   	push   edi
c0022b04:	56                   	push   esi
c0022b05:	53                   	push   ebx
c0022b06:	83 ec 0c             	sub    esp,0xc
c0022b09:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0022b0d:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c0022b12:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c0022b17:	6a 00                	push   0x0
c0022b19:	56                   	push   esi
c0022b1a:	57                   	push   edi
c0022b1b:	55                   	push   ebp
c0022b1c:	e8 bd fa ff ff       	call   c00225de <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022b21:	6a 00                	push   0x0
c0022b23:	56                   	push   esi
c0022b24:	57                   	push   edi
c0022b25:	55                   	push   ebp
c0022b26:	e8 2b fe ff ff       	call   c0022956 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022b2b:	83 c4 20             	add    esp,0x20
c0022b2e:	6a 00                	push   0x0
c0022b30:	56                   	push   esi
c0022b31:	57                   	push   edi
c0022b32:	55                   	push   ebp
c0022b33:	e8 c8 fa ff ff       	call   c0022600 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022b38:	83 c4 10             	add    esp,0x10
c0022b3b:	84 c0                	test   al,al
c0022b3d:	79 27                	jns    c0022b66 <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0022b3f:	bb 01 00 00 00       	mov    ebx,0x1
c0022b44:	53                   	push   ebx
c0022b45:	56                   	push   esi
c0022b46:	57                   	push   edi
c0022b47:	55                   	push   ebp
c0022b48:	e8 91 fa ff ff       	call   c00225de <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022b4d:	83 c4 10             	add    esp,0x10
c0022b50:	66 40                	inc    ax
c0022b52:	74 0c                	je     c0022b60 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c0022b54:	53                   	push   ebx
c0022b55:	56                   	push   esi
c0022b56:	57                   	push   edi
c0022b57:	55                   	push   ebp
c0022b58:	e8 f9 fd ff ff       	call   c0022956 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0022b5d:	83 c4 10             	add    esp,0x10
c0022b60:	43                   	inc    ebx
c0022b61:	83 fb 08             	cmp    ebx,0x8
c0022b64:	75 de                	jne    c0022b44 <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c0022b66:	83 c4 0c             	add    esp,0xc
c0022b69:	5b                   	pop    ebx
c0022b6a:	5e                   	pop    esi
c0022b6b:	5f                   	pop    edi
c0022b6c:	5d                   	pop    ebp
c0022b6d:	c3                   	ret    

c0022b6e <PCI::detect()>:
c0022b6e:	56                   	push   esi
c0022b6f:	53                   	push   ebx
c0022b70:	53                   	push   ebx
c0022b71:	31 db                	xor    ebx,ebx
c0022b73:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0022b77:	6a 00                	push   0x0
c0022b79:	6a 00                	push   0x0
c0022b7b:	6a 00                	push   0x0
c0022b7d:	56                   	push   esi
c0022b7e:	e8 7d fa ff ff       	call   c0022600 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0022b83:	83 c4 10             	add    esp,0x10
c0022b86:	a8 80                	test   al,0x80
c0022b88:	75 21                	jne    c0022bab <PCI::detect()+0x3d>
c0022b8a:	51                   	push   ecx
c0022b8b:	51                   	push   ecx
c0022b8c:	6a 00                	push   0x0
c0022b8e:	56                   	push   esi
c0022b8f:	e8 2c fc ff ff       	call   c00227c0 <PCI::checkBus(unsigned char)>
c0022b94:	83 c4 10             	add    esp,0x10
c0022b97:	eb 24                	jmp    c0022bbd <PCI::detect()+0x4f>
c0022b99:	52                   	push   edx
c0022b9a:	52                   	push   edx
c0022b9b:	53                   	push   ebx
c0022b9c:	43                   	inc    ebx
c0022b9d:	56                   	push   esi
c0022b9e:	e8 1d fc ff ff       	call   c00227c0 <PCI::checkBus(unsigned char)>
c0022ba3:	83 c4 10             	add    esp,0x10
c0022ba6:	83 fb 08             	cmp    ebx,0x8
c0022ba9:	74 12                	je     c0022bbd <PCI::detect()+0x4f>
c0022bab:	53                   	push   ebx
c0022bac:	6a 00                	push   0x0
c0022bae:	6a 00                	push   0x0
c0022bb0:	56                   	push   esi
c0022bb1:	e8 28 fa ff ff       	call   c00225de <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0022bb6:	83 c4 10             	add    esp,0x10
c0022bb9:	66 40                	inc    ax
c0022bbb:	74 dc                	je     c0022b99 <PCI::detect()+0x2b>
c0022bbd:	58                   	pop    eax
c0022bbe:	5b                   	pop    ebx
c0022bbf:	5e                   	pop    esi
c0022bc0:	c3                   	ret    
c0022bc1:	90                   	nop

c0022bc2 <IDE::close(int, int, void*)>:
c0022bc2:	83 c8 ff             	or     eax,0xffffffff
c0022bc5:	c3                   	ret    

c0022bc6 <IDE::IDE()>:
c0022bc6:	83 ec 0c             	sub    esp,0xc
c0022bc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bcd:	83 ec 08             	sub    esp,0x8
c0022bd0:	68 74 c6 02 c0       	push   0xc002c674
c0022bd5:	50                   	push   eax
c0022bd6:	e8 49 17 ff ff       	call   c0014324 <HardDiskController::HardDiskController(char const*)>
c0022bdb:	83 c4 10             	add    esp,0x10
c0022bde:	ba b4 c8 02 c0       	mov    edx,0xc002c8b4
c0022be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022be7:	89 10                	mov    DWORD PTR [eax],edx
c0022be9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0022bed:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c0022bf4:	90                   	nop
c0022bf5:	83 c4 0c             	add    esp,0xc
c0022bf8:	c3                   	ret    
c0022bf9:	90                   	nop

c0022bfa <IDE::prepareInterrupt(unsigned char)>:
c0022bfa:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0022bff:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022c03:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c0022c0b:	c3                   	ret    

c0022c0c <selectDrive(unsigned char, unsigned char)>:
c0022c0c:	c3                   	ret    
c0022c0d:	90                   	nop

c0022c0e <IDE::getBase(unsigned char)>:
c0022c0e:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0022c13:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022c17:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c0022c1f:	c3                   	ret    

c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c0022c20:	55                   	push   ebp
c0022c21:	57                   	push   edi
c0022c22:	56                   	push   esi
c0022c23:	53                   	push   ebx
c0022c24:	83 ec 1c             	sub    esp,0x1c
c0022c27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022c2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022c2f:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0022c32:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022c36:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0022c3a:	80 f9 03             	cmp    cl,0x3
c0022c3d:	77 51                	ja     c0022c90 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0022c3f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0022c43:	0f b6 f2             	movzx  esi,dl
c0022c46:	0f b6 db             	movzx  ebx,bl
c0022c49:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022c4c:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0022c50:	83 ca 80             	or     edx,0xffffff80
c0022c53:	0f b6 d2             	movzx  edx,dl
c0022c56:	52                   	push   edx
c0022c57:	6a 0c                	push   0xc
c0022c59:	56                   	push   esi
c0022c5a:	57                   	push   edi
c0022c5b:	e8 c0 ff ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022c60:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c0022c65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022c69:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0022c6d:	ee                   	out    dx,al
c0022c6e:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0022c73:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c0022c77:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0022c7b:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0022c7f:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0022c87:	83 c4 2c             	add    esp,0x2c
c0022c8a:	5b                   	pop    ebx
c0022c8b:	5e                   	pop    esi
c0022c8c:	5f                   	pop    edi
c0022c8d:	5d                   	pop    ebp
c0022c8e:	eb 90                	jmp    c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022c90:	80 fb 07             	cmp    bl,0x7
c0022c93:	77 12                	ja     c0022ca7 <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c0022c95:	0f b6 d2             	movzx  edx,dl
c0022c98:	0f b6 db             	movzx  ebx,bl
c0022c9b:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0022ca3:	89 da                	mov    edx,ebx
c0022ca5:	eb 2f                	jmp    c0022cd6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022ca7:	80 fb 0d             	cmp    bl,0xd
c0022caa:	77 13                	ja     c0022cbf <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0022cac:	0f b6 d2             	movzx  edx,dl
c0022caf:	0f b6 db             	movzx  ebx,bl
c0022cb2:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c0022cb9:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0022cbd:	eb 17                	jmp    c0022cd6 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0022cbf:	80 fb 15             	cmp    bl,0x15
c0022cc2:	77 13                	ja     c0022cd7 <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c0022cc4:	0f b6 d2             	movzx  edx,dl
c0022cc7:	0f b6 db             	movzx  ebx,bl
c0022cca:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c0022cd2:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c0022cd6:	ee                   	out    dx,al
c0022cd7:	83 c4 1c             	add    esp,0x1c
c0022cda:	5b                   	pop    ebx
c0022cdb:	5e                   	pop    esi
c0022cdc:	5f                   	pop    edi
c0022cdd:	5d                   	pop    ebp
c0022cde:	c3                   	ret    
c0022cdf:	90                   	nop

c0022ce0 <IDE::read(unsigned char, unsigned char)>:
c0022ce0:	55                   	push   ebp
c0022ce1:	57                   	push   edi
c0022ce2:	56                   	push   esi
c0022ce3:	53                   	push   ebx
c0022ce4:	83 ec 1c             	sub    esp,0x1c
c0022ce7:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0022ceb:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0022cef:	8d 43 f8             	lea    eax,[ebx-0x8]
c0022cf2:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0022cf6:	3c 03                	cmp    al,0x3
c0022cf8:	77 43                	ja     c0022d3d <IDE::read(unsigned char, unsigned char)+0x5d>
c0022cfa:	0f b6 f2             	movzx  esi,dl
c0022cfd:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0022d00:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c0022d04:	83 c8 80             	or     eax,0xffffff80
c0022d07:	0f b6 c0             	movzx  eax,al
c0022d0a:	50                   	push   eax
c0022d0b:	6a 0c                	push   0xc
c0022d0d:	56                   	push   esi
c0022d0e:	57                   	push   edi
c0022d0f:	e8 0c ff ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d14:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c0022d19:	0f b6 c3             	movzx  eax,bl
c0022d1c:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c0022d20:	ec                   	in     al,dx
c0022d21:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0022d25:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0022d2a:	52                   	push   edx
c0022d2b:	6a 0c                	push   0xc
c0022d2d:	56                   	push   esi
c0022d2e:	57                   	push   edi
c0022d2f:	e8 ec fe ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022d34:	83 c4 20             	add    esp,0x20
c0022d37:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0022d3b:	eb 49                	jmp    c0022d86 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022d3d:	80 fb 07             	cmp    bl,0x7
c0022d40:	77 12                	ja     c0022d54 <IDE::read(unsigned char, unsigned char)+0x74>
c0022d42:	0f b6 d2             	movzx  edx,dl
c0022d45:	0f b6 c3             	movzx  eax,bl
c0022d48:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0022d50:	89 c2                	mov    edx,eax
c0022d52:	eb 31                	jmp    c0022d85 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022d54:	80 fb 0d             	cmp    bl,0xd
c0022d57:	77 13                	ja     c0022d6c <IDE::read(unsigned char, unsigned char)+0x8c>
c0022d59:	0f b6 d2             	movzx  edx,dl
c0022d5c:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0022d63:	0f b6 d3             	movzx  edx,bl
c0022d66:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0022d6a:	eb 19                	jmp    c0022d85 <IDE::read(unsigned char, unsigned char)+0xa5>
c0022d6c:	31 c0                	xor    eax,eax
c0022d6e:	80 fb 15             	cmp    bl,0x15
c0022d71:	77 13                	ja     c0022d86 <IDE::read(unsigned char, unsigned char)+0xa6>
c0022d73:	0f b6 d2             	movzx  edx,dl
c0022d76:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0022d7e:	0f b6 d3             	movzx  edx,bl
c0022d81:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c0022d85:	ec                   	in     al,dx
c0022d86:	83 c4 1c             	add    esp,0x1c
c0022d89:	5b                   	pop    ebx
c0022d8a:	5e                   	pop    esi
c0022d8b:	5f                   	pop    edi
c0022d8c:	5d                   	pop    ebp
c0022d8d:	c3                   	ret    

c0022d8e <IDE::waitInterrupt(unsigned char)>:
c0022d8e:	55                   	push   ebp
c0022d8f:	57                   	push   edi
c0022d90:	56                   	push   esi
c0022d91:	53                   	push   ebx
c0022d92:	31 db                	xor    ebx,ebx
c0022d94:	83 ec 0c             	sub    esp,0xc
c0022d97:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0022d9b:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0022da0:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c0022da8:	89 e8                	mov    eax,ebp
c0022daa:	84 c0                	test   al,al
c0022dac:	75 34                	jne    c0022de2 <IDE::waitInterrupt(unsigned char)+0x54>
c0022dae:	52                   	push   edx
c0022daf:	6a 0c                	push   0xc
c0022db1:	56                   	push   esi
c0022db2:	57                   	push   edi
c0022db3:	e8 28 ff ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c0022db8:	83 c4 10             	add    esp,0x10
c0022dbb:	a8 01                	test   al,0x1
c0022dbd:	75 2b                	jne    c0022dea <IDE::waitInterrupt(unsigned char)+0x5c>
c0022dbf:	f6 c3 04             	test   bl,0x4
c0022dc2:	75 16                	jne    c0022dda <IDE::waitInterrupt(unsigned char)+0x4c>
c0022dc4:	83 fb 32             	cmp    ebx,0x32
c0022dc7:	7e 11                	jle    c0022dda <IDE::waitInterrupt(unsigned char)+0x4c>
c0022dc9:	50                   	push   eax
c0022dca:	50                   	push   eax
c0022dcb:	6a 00                	push   0x0
c0022dcd:	68 80 96 98 00       	push   0x989680
c0022dd2:	e8 8b b1 ff ff       	call   c001df62 <nanoSleep(unsigned long long)>
c0022dd7:	83 c4 10             	add    esp,0x10
c0022dda:	83 fb 3c             	cmp    ebx,0x3c
c0022ddd:	74 0b                	je     c0022dea <IDE::waitInterrupt(unsigned char)+0x5c>
c0022ddf:	43                   	inc    ebx
c0022de0:	eb be                	jmp    c0022da0 <IDE::waitInterrupt(unsigned char)+0x12>
c0022de2:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c0022dea:	83 c4 0c             	add    esp,0xc
c0022ded:	89 e8                	mov    eax,ebp
c0022def:	5b                   	pop    ebx
c0022df0:	5e                   	pop    esi
c0022df1:	5f                   	pop    edi
c0022df2:	5d                   	pop    ebp
c0022df3:	c3                   	ret    

c0022df4 <ideChannel0IRQHandler(regs*, void*)>:
c0022df4:	83 ec 10             	sub    esp,0x10
c0022df7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022dfb:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c0022e02:	6a 07                	push   0x7
c0022e04:	6a 00                	push   0x0
c0022e06:	50                   	push   eax
c0022e07:	e8 d4 fe ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c0022e0c:	83 c4 1c             	add    esp,0x1c
c0022e0f:	c3                   	ret    

c0022e10 <ideChannel1IRQHandler(regs*, void*)>:
c0022e10:	83 ec 10             	sub    esp,0x10
c0022e13:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0022e17:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c0022e1e:	6a 07                	push   0x7
c0022e20:	6a 01                	push   0x1
c0022e22:	50                   	push   eax
c0022e23:	e8 b8 fe ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c0022e28:	83 c4 1c             	add    esp,0x1c
c0022e2b:	c3                   	ret    

c0022e2c <IDE::enableIRQs(unsigned char, bool)>:
c0022e2c:	57                   	push   edi
c0022e2d:	56                   	push   esi
c0022e2e:	be 04 00 00 00       	mov    esi,0x4
c0022e33:	53                   	push   ebx
c0022e34:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0022e39:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022e3d:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0022e42:	0f 94 c0             	sete   al
c0022e45:	d1 e0                	shl    eax,1
c0022e47:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0022e4e:	0f b6 c0             	movzx  eax,al
c0022e51:	50                   	push   eax
c0022e52:	6a 0c                	push   0xc
c0022e54:	57                   	push   edi
c0022e55:	53                   	push   ebx
c0022e56:	e8 c5 fd ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0022e5b:	83 c4 10             	add    esp,0x10
c0022e5e:	50                   	push   eax
c0022e5f:	6a 0c                	push   0xc
c0022e61:	57                   	push   edi
c0022e62:	53                   	push   ebx
c0022e63:	e8 78 fe ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c0022e68:	83 c4 10             	add    esp,0x10
c0022e6b:	4e                   	dec    esi
c0022e6c:	75 f0                	jne    c0022e5e <IDE::enableIRQs(unsigned char, bool)+0x32>
c0022e6e:	5b                   	pop    ebx
c0022e6f:	5e                   	pop    esi
c0022e70:	5f                   	pop    edi
c0022e71:	c3                   	ret    

c0022e72 <IDE::open(int, int, void*)>:
c0022e72:	55                   	push   ebp
c0022e73:	57                   	push   edi
c0022e74:	56                   	push   esi
c0022e75:	53                   	push   ebx
c0022e76:	83 ec 1c             	sub    esp,0x1c
c0022e79:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0022e7d:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0022e86:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0022e8f:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0022e96:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0022e9d:	0f 85 b0 02 00 00    	jne    c0023153 <IDE::open(int, int, void*)+0x2e1>
c0022ea3:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0022ea9:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0022ead:	83 e0 7f             	and    eax,0x7f
c0022eb0:	3c 05                	cmp    al,0x5
c0022eb2:	74 04                	je     c0022eb8 <IDE::open(int, int, void*)+0x46>
c0022eb4:	3c 0f                	cmp    al,0xf
c0022eb6:	75 32                	jne    c0022eea <IDE::open(int, int, void*)+0x78>
c0022eb8:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0022ebe:	83 e0 fc             	and    eax,0xfffffffc
c0022ec1:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0022ec8:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0022ece:	83 e0 fc             	and    eax,0xfffffffc
c0022ed1:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0022ed8:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0022ede:	83 e0 fc             	and    eax,0xfffffffc
c0022ee1:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0022ee8:	eb 14                	jmp    c0022efe <IDE::open(int, int, void*)+0x8c>
c0022eea:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0022ef4:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0022efe:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0022f05:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0022f0c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0022f10:	89 c6                	mov    esi,eax
c0022f12:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022f17:	c1 e6 10             	shl    esi,0x10
c0022f1a:	89 e8                	mov    eax,ebp
c0022f1c:	89 fa                	mov    edx,edi
c0022f1e:	c1 e0 0b             	shl    eax,0xb
c0022f21:	09 f0                	or     eax,esi
c0022f23:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0022f2a:	c1 e6 08             	shl    esi,0x8
c0022f2d:	09 c6                	or     esi,eax
c0022f2f:	89 f0                	mov    eax,esi
c0022f31:	0d 08 00 00 80       	or     eax,0x80000008
c0022f36:	ef                   	out    dx,eax
c0022f37:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0022f3c:	89 ca                	mov    edx,ecx
c0022f3e:	ed                   	in     eax,dx
c0022f3f:	c1 e8 10             	shr    eax,0x10
c0022f42:	3d ff ff 00 00       	cmp    eax,0xffff
c0022f47:	0f 84 f5 00 00 00    	je     c0023042 <IDE::open(int, int, void*)+0x1d0>
c0022f4d:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0022f53:	89 fa                	mov    edx,edi
c0022f55:	89 f0                	mov    eax,esi
c0022f57:	ef                   	out    dx,eax
c0022f58:	b0 fe                	mov    al,0xfe
c0022f5a:	89 ca                	mov    edx,ecx
c0022f5c:	ee                   	out    dx,al
c0022f5d:	89 f0                	mov    eax,esi
c0022f5f:	89 fa                	mov    edx,edi
c0022f61:	ef                   	out    dx,eax
c0022f62:	89 ca                	mov    edx,ecx
c0022f64:	ed                   	in     eax,dx
c0022f65:	3c fe                	cmp    al,0xfe
c0022f67:	0f 85 a9 00 00 00    	jne    c0023016 <IDE::open(int, int, void*)+0x1a4>
c0022f6d:	8b 15 08 e0 02 c0    	mov    edx,DWORD PTR ds:0xc002e008
c0022f73:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0022f7a:	74 33                	je     c0022faf <IDE::open(int, int, void*)+0x13d>
c0022f7c:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0022f82:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0022f86:	40                   	inc    eax
c0022f87:	83 ec 0c             	sub    esp,0xc
c0022f8a:	0f b6 c0             	movzx  eax,al
c0022f8d:	50                   	push   eax
c0022f8e:	55                   	push   ebp
c0022f8f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022f93:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0022f99:	51                   	push   ecx
c0022f9a:	e8 a7 4e ff ff       	call   c0017e46 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0022f9f:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0022fa4:	83 c4 1c             	add    esp,0x1c
c0022fa7:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0022fad:	eb 0a                	jmp    c0022fb9 <IDE::open(int, int, void*)+0x147>
c0022faf:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0022fb9:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0022fc0:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0022fc7:	c1 e1 10             	shl    ecx,0x10
c0022fca:	c1 e0 08             	shl    eax,0x8
c0022fcd:	bf f8 0c 00 00       	mov    edi,0xcf8
c0022fd2:	09 c1                	or     ecx,eax
c0022fd4:	89 fa                	mov    edx,edi
c0022fd6:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0022fdd:	c1 e0 0b             	shl    eax,0xb
c0022fe0:	09 c1                	or     ecx,eax
c0022fe2:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0022fe8:	89 c8                	mov    eax,ecx
c0022fea:	ef                   	out    dx,eax
c0022feb:	be fc 0c 00 00       	mov    esi,0xcfc
c0022ff0:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0022ff6:	89 f2                	mov    edx,esi
c0022ff8:	ee                   	out    dx,al
c0022ff9:	89 c8                	mov    eax,ecx
c0022ffb:	89 fa                	mov    edx,edi
c0022ffd:	ef                   	out    dx,eax
c0022ffe:	89 f2                	mov    edx,esi
c0023000:	ed                   	in     eax,dx
c0023001:	0f b6 c0             	movzx  eax,al
c0023004:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c002300a:	74 46                	je     c0023052 <IDE::open(int, int, void*)+0x1e0>
c002300c:	83 ec 0c             	sub    esp,0xc
c002300f:	68 8c c6 02 c0       	push   0xc002c68c
c0023014:	eb 34                	jmp    c002304a <IDE::open(int, int, void*)+0x1d8>
c0023016:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c002301f:	75 17                	jne    c0023038 <IDE::open(int, int, void*)+0x1c6>
c0023021:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023026:	74 07                	je     c002302f <IDE::open(int, int, void*)+0x1bd>
c0023028:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c002302d:	75 09                	jne    c0023038 <IDE::open(int, int, void*)+0x1c6>
c002302f:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023036:	eb 1a                	jmp    c0023052 <IDE::open(int, int, void*)+0x1e0>
c0023038:	83 ec 0c             	sub    esp,0xc
c002303b:	68 94 c6 02 c0       	push   0xc002c694
c0023040:	eb 08                	jmp    c002304a <IDE::open(int, int, void*)+0x1d8>
c0023042:	83 ec 0c             	sub    esp,0xc
c0023045:	68 c5 c6 02 c0       	push   0xc002c6c5
c002304a:	e8 9e 71 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c002304f:	83 c4 10             	add    esp,0x10
c0023052:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023059:	79 1a                	jns    c0023075 <IDE::open(int, int, void*)+0x203>
c002305b:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023061:	83 e0 fc             	and    eax,0xfffffffc
c0023064:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c002306b:	83 c0 08             	add    eax,0x8
c002306e:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023075:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c002307b:	89 c2                	mov    edx,eax
c002307d:	83 e2 0f             	and    edx,0xf
c0023080:	66 83 fa 08          	cmp    dx,0x8
c0023084:	75 0a                	jne    c0023090 <IDE::open(int, int, void*)+0x21e>
c0023086:	83 e8 02             	sub    eax,0x2
c0023089:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023090:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023096:	89 c2                	mov    edx,eax
c0023098:	83 e2 0f             	and    edx,0xf
c002309b:	66 83 fa 08          	cmp    dx,0x8
c002309f:	75 0a                	jne    c00230ab <IDE::open(int, int, void*)+0x239>
c00230a1:	83 e8 02             	sub    eax,0x2
c00230a4:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c00230ab:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c00230b2:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c00230b9:	89 d0                	mov    eax,edx
c00230bb:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00230be:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00230c2:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c00230c6:	8d 4a 01             	lea    ecx,[edx+0x1]
c00230c9:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c00230ce:	0f b6 c9             	movzx  ecx,cl
c00230d1:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c00230d8:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c00230db:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c00230df:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c00230e3:	8d 50 02             	lea    edx,[eax+0x2]
c00230e6:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c00230eb:	0f b6 d2             	movzx  edx,dl
c00230ee:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c00230f4:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c00230f7:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c00230fb:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c00230ff:	8d 48 03             	lea    ecx,[eax+0x3]
c0023102:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023107:	0f b6 c9             	movzx  ecx,cl
c002310a:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023110:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023113:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023117:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c002311b:	8d 50 04             	lea    edx,[eax+0x4]
c002311e:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023124:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023129:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023130:	66 85 f6             	test   si,si
c0023133:	74 3e                	je     c0023173 <IDE::open(int, int, void*)+0x301>
c0023135:	0f b6 d2             	movzx  edx,dl
c0023138:	83 c0 05             	add    eax,0x5
c002313b:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c002313e:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023142:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023146:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c002314c:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023151:	eb 20                	jmp    c0023173 <IDE::open(int, int, void*)+0x301>
c0023153:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c002315d:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023167:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c002316e:	e9 02 ff ff ff       	jmp    c0023075 <IDE::open(int, int, void*)+0x203>
c0023173:	52                   	push   edx
c0023174:	52                   	push   edx
c0023175:	6a 00                	push   0x0
c0023177:	53                   	push   ebx
c0023178:	e8 7d fa ff ff       	call   c0022bfa <IDE::prepareInterrupt(unsigned char)>
c002317d:	59                   	pop    ecx
c002317e:	5e                   	pop    esi
c002317f:	6a 01                	push   0x1
c0023181:	53                   	push   ebx
c0023182:	e8 73 fa ff ff       	call   c0022bfa <IDE::prepareInterrupt(unsigned char)>
c0023187:	83 c4 0c             	add    esp,0xc
c002318a:	6a 00                	push   0x0
c002318c:	6a 00                	push   0x0
c002318e:	53                   	push   ebx
c002318f:	e8 98 fc ff ff       	call   c0022e2c <IDE::enableIRQs(unsigned char, bool)>
c0023194:	83 c4 0c             	add    esp,0xc
c0023197:	6a 00                	push   0x0
c0023199:	6a 01                	push   0x1
c002319b:	53                   	push   ebx
c002319c:	e8 8b fc ff ff       	call   c0022e2c <IDE::enableIRQs(unsigned char, bool)>
c00231a1:	83 c4 10             	add    esp,0x10
c00231a4:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c00231ab:	74 40                	je     c00231ed <IDE::open(int, int, void*)+0x37b>
c00231ad:	83 ec 0c             	sub    esp,0xc
c00231b0:	68 ef c6 02 c0       	push   0xc002c6ef
c00231b5:	e8 b7 f9 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c00231ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00231bd:	6a 01                	push   0x1
c00231bf:	68 f4 2d 02 c0       	push   0xc0022df4
c00231c4:	6a 0e                	push   0xe
c00231c6:	53                   	push   ebx
c00231c7:	e8 50 0d ff ff       	call   c0013f1c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00231cc:	83 c4 14             	add    esp,0x14
c00231cf:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c00231d5:	53                   	push   ebx
c00231d6:	6a 01                	push   0x1
c00231d8:	68 10 2e 02 c0       	push   0xc0022e10
c00231dd:	6a 0f                	push   0xf
c00231df:	53                   	push   ebx
c00231e0:	e8 37 0d ff ff       	call   c0013f1c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c00231e5:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c00231eb:	eb 4a                	jmp    c0023237 <IDE::open(int, int, void*)+0x3c5>
c00231ed:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c00231f7:	50                   	push   eax
c00231f8:	6a 0f                	push   0xf
c00231fa:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023200:	68 0b c7 02 c0       	push   0xc002c70b
c0023205:	e8 67 f9 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c002320a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c002320d:	6a 00                	push   0x0
c002320f:	68 f4 2d 02 c0       	push   0xc0022df4
c0023214:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c002321a:	53                   	push   ebx
c002321b:	e8 fc 0c ff ff       	call   c0013f1c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023220:	83 c4 14             	add    esp,0x14
c0023223:	53                   	push   ebx
c0023224:	6a 00                	push   0x0
c0023226:	68 10 2e 02 c0       	push   0xc0022e10
c002322b:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023231:	53                   	push   ebx
c0023232:	e8 e5 0c ff ff       	call   c0013f1c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023237:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023239:	83 c4 20             	add    esp,0x20
c002323c:	83 ec 0c             	sub    esp,0xc
c002323f:	53                   	push   ebx
c0023240:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023243:	83 c4 0c             	add    esp,0xc
c0023246:	6a 07                	push   0x7
c0023248:	6a 00                	push   0x0
c002324a:	53                   	push   ebx
c002324b:	e8 90 fa ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c0023250:	83 c4 0c             	add    esp,0xc
c0023253:	6a 07                	push   0x7
c0023255:	6a 01                	push   0x1
c0023257:	53                   	push   ebx
c0023258:	e8 83 fa ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c002325d:	83 c4 0c             	add    esp,0xc
c0023260:	6a 01                	push   0x1
c0023262:	6a 00                	push   0x0
c0023264:	53                   	push   ebx
c0023265:	e8 c2 fb ff ff       	call   c0022e2c <IDE::enableIRQs(unsigned char, bool)>
c002326a:	83 c4 0c             	add    esp,0xc
c002326d:	6a 01                	push   0x1
c002326f:	6a 01                	push   0x1
c0023271:	53                   	push   ebx
c0023272:	e8 b5 fb ff ff       	call   c0022e2c <IDE::enableIRQs(unsigned char, bool)>
c0023277:	83 c4 2c             	add    esp,0x2c
c002327a:	31 c0                	xor    eax,eax
c002327c:	5b                   	pop    ebx
c002327d:	5e                   	pop    esi
c002327e:	5f                   	pop    edi
c002327f:	5d                   	pop    ebp
c0023280:	c3                   	ret    
c0023281:	90                   	nop

c0023282 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023282:	55                   	push   ebp
c0023283:	57                   	push   edi
c0023284:	56                   	push   esi
c0023285:	53                   	push   ebx
c0023286:	83 ec 1c             	sub    esp,0x1c
c0023289:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002328d:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023291:	8d 50 f8             	lea    edx,[eax-0x8]
c0023294:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023298:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c002329c:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c00232a0:	80 fa 03             	cmp    dl,0x3
c00232a3:	77 5d                	ja     c0023302 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c00232a5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00232a9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00232ad:	0f b6 db             	movzx  ebx,bl
c00232b0:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c00232b3:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c00232b7:	83 ca 80             	or     edx,0xffffff80
c00232ba:	0f b6 d2             	movzx  edx,dl
c00232bd:	52                   	push   edx
c00232be:	6a 0c                	push   0xc
c00232c0:	53                   	push   ebx
c00232c1:	56                   	push   esi
c00232c2:	e8 59 f9 ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00232c7:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c00232cc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00232d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00232d4:	0f b6 c0             	movzx  eax,al
c00232d7:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c00232db:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c00232dd:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c00232e2:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c00232e6:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00232ea:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c00232ee:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c00232f6:	83 c4 2c             	add    esp,0x2c
c00232f9:	5b                   	pop    ebx
c00232fa:	5e                   	pop    esi
c00232fb:	5f                   	pop    edi
c00232fc:	5d                   	pop    ebp
c00232fd:	e9 1e f9 ff ff       	jmp    c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023302:	3c 07                	cmp    al,0x7
c0023304:	77 10                	ja     c0023316 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023306:	0f b6 db             	movzx  ebx,bl
c0023309:	0f b6 d0             	movzx  edx,al
c002330c:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023314:	eb 2d                	jmp    c0023343 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023316:	3c 0d                	cmp    al,0xd
c0023318:	77 13                	ja     c002332d <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c002331a:	0f b6 db             	movzx  ebx,bl
c002331d:	0f b6 c0             	movzx  eax,al
c0023320:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023327:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c002332b:	eb 16                	jmp    c0023343 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c002332d:	3c 15                	cmp    al,0x15
c002332f:	77 14                	ja     c0023345 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023331:	0f b6 db             	movzx  ebx,bl
c0023334:	0f b6 c0             	movzx  eax,al
c0023337:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c002333f:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023343:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023345:	83 c4 1c             	add    esp,0x1c
c0023348:	5b                   	pop    ebx
c0023349:	5e                   	pop    esi
c002334a:	5f                   	pop    edi
c002334b:	5d                   	pop    ebp
c002334c:	c3                   	ret    
c002334d:	90                   	nop

c002334e <IDE::detect()>:
c002334e:	55                   	push   ebp
c002334f:	57                   	push   edi
c0023350:	56                   	push   esi
c0023351:	53                   	push   ebx
c0023352:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023358:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c002335f:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023366:	0f 85 be 02 00 00    	jne    c002362a <IDE::detect()+0x2dc>
c002336c:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023373:	31 f6                	xor    esi,esi
c0023375:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c002337d:	31 ed                	xor    ebp,ebp
c002337f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023383:	c1 e0 06             	shl    eax,0x6
c0023386:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c002338e:	89 e8                	mov    eax,ebp
c0023390:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023394:	c1 e0 04             	shl    eax,0x4
c0023397:	83 c8 a0             	or     eax,0xffffffa0
c002339a:	0f b6 c0             	movzx  eax,al
c002339d:	50                   	push   eax
c002339e:	6a 06                	push   0x6
c00233a0:	56                   	push   esi
c00233a1:	53                   	push   ebx
c00233a2:	e8 79 f8 ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233a7:	83 c4 0c             	add    esp,0xc
c00233aa:	6a 0c                	push   0xc
c00233ac:	56                   	push   esi
c00233ad:	53                   	push   ebx
c00233ae:	e8 2d f9 ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c00233b3:	83 c4 0c             	add    esp,0xc
c00233b6:	6a 0c                	push   0xc
c00233b8:	56                   	push   esi
c00233b9:	53                   	push   ebx
c00233ba:	e8 21 f9 ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c00233bf:	83 c4 0c             	add    esp,0xc
c00233c2:	6a 0c                	push   0xc
c00233c4:	56                   	push   esi
c00233c5:	53                   	push   ebx
c00233c6:	e8 15 f9 ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c00233cb:	83 c4 0c             	add    esp,0xc
c00233ce:	6a 0c                	push   0xc
c00233d0:	56                   	push   esi
c00233d1:	53                   	push   ebx
c00233d2:	e8 09 f9 ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c00233d7:	68 ec 00 00 00       	push   0xec
c00233dc:	6a 07                	push   0x7
c00233de:	56                   	push   esi
c00233df:	53                   	push   ebx
c00233e0:	e8 3b f8 ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00233e5:	83 c4 1c             	add    esp,0x1c
c00233e8:	6a 0c                	push   0xc
c00233ea:	56                   	push   esi
c00233eb:	53                   	push   ebx
c00233ec:	e8 ef f8 ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c00233f1:	83 c4 0c             	add    esp,0xc
c00233f4:	6a 0c                	push   0xc
c00233f6:	56                   	push   esi
c00233f7:	53                   	push   ebx
c00233f8:	e8 e3 f8 ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c00233fd:	83 c4 0c             	add    esp,0xc
c0023400:	6a 0c                	push   0xc
c0023402:	56                   	push   esi
c0023403:	53                   	push   ebx
c0023404:	e8 d7 f8 ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c0023409:	83 c4 0c             	add    esp,0xc
c002340c:	6a 0c                	push   0xc
c002340e:	56                   	push   esi
c002340f:	53                   	push   ebx
c0023410:	e8 cb f8 ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c0023415:	83 c4 0c             	add    esp,0xc
c0023418:	6a 0c                	push   0xc
c002341a:	56                   	push   esi
c002341b:	53                   	push   ebx
c002341c:	e8 bf f8 ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c0023421:	83 c4 10             	add    esp,0x10
c0023424:	84 c0                	test   al,al
c0023426:	0f 84 8b 01 00 00    	je     c00235b7 <IDE::detect()+0x269>
c002342c:	31 ff                	xor    edi,edi
c002342e:	50                   	push   eax
c002342f:	6a 0c                	push   0xc
c0023431:	56                   	push   esi
c0023432:	53                   	push   ebx
c0023433:	e8 a8 f8 ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c0023438:	83 c4 10             	add    esp,0x10
c002343b:	a8 01                	test   al,0x1
c002343d:	0f 85 8e 01 00 00    	jne    c00235d1 <IDE::detect()+0x283>
c0023443:	84 c0                	test   al,al
c0023445:	78 04                	js     c002344b <IDE::detect()+0xfd>
c0023447:	a8 08                	test   al,0x8
c0023449:	75 27                	jne    c0023472 <IDE::detect()+0x124>
c002344b:	47                   	inc    edi
c002344c:	81 ff 17 01 00 00    	cmp    edi,0x117
c0023452:	7e da                	jle    c002342e <IDE::detect()+0xe0>
c0023454:	50                   	push   eax
c0023455:	50                   	push   eax
c0023456:	6a 00                	push   0x0
c0023458:	68 40 4b 4c 00       	push   0x4c4b40
c002345d:	e8 00 ab ff ff       	call   c001df62 <nanoSleep(unsigned long long)>
c0023462:	83 c4 10             	add    esp,0x10
c0023465:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c002346b:	75 c1                	jne    c002342e <IDE::detect()+0xe0>
c002346d:	e9 5f 01 00 00       	jmp    c00235d1 <IDE::detect()+0x283>
c0023472:	31 c9                	xor    ecx,ecx
c0023474:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0023478:	8d 7c 24 10          	lea    edi,[esp+0x10]
c002347c:	83 ec 0c             	sub    esp,0xc
c002347f:	68 80 00 00 00       	push   0x80
c0023484:	57                   	push   edi
c0023485:	6a 00                	push   0x0
c0023487:	56                   	push   esi
c0023488:	53                   	push   ebx
c0023489:	e8 f4 fd ff ff       	call   c0023282 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c002348e:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0023493:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023497:	89 d1                	mov    ecx,edx
c0023499:	c1 e0 06             	shl    eax,0x6
c002349c:	01 d8                	add    eax,ebx
c002349e:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c00234a5:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c00234ac:	89 f2                	mov    edx,esi
c00234ae:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c00234b4:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c00234b8:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c00234be:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00234c2:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c00234c9:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00234d1:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00234d8:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00234e0:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00234e6:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00234ed:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00234f3:	8d 54 24 58          	lea    edx,[esp+0x58]
c00234f7:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00234fb:	83 c4 20             	add    esp,0x20
c00234fe:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c0023501:	83 c0 02             	add    eax,0x2
c0023504:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c002350a:	83 c7 02             	add    edi,0x2
c002350d:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c0023510:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c0023516:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c002351a:	75 e2                	jne    c00234fe <IDE::detect()+0x1b0>
c002351c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023520:	c1 e0 06             	shl    eax,0x6
c0023523:	01 d8                	add    eax,ebx
c0023525:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c002352b:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0023532:	66 c1 ea 09          	shr    dx,0x9
c0023536:	83 e2 01             	and    edx,0x1
c0023539:	84 c9                	test   cl,cl
c002353b:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0023541:	75 2f                	jne    c0023572 <IDE::detect()+0x224>
c0023543:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c0023549:	85 c0                	test   eax,eax
c002354b:	74 66                	je     c00235b3 <IDE::detect()+0x265>
c002354d:	50                   	push   eax
c002354e:	55                   	push   ebp
c002354f:	56                   	push   esi
c0023550:	68 27 c7 02 c0       	push   0xc002c727
c0023555:	e8 17 f6 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c002355a:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023561:	e8 da c2 fe ff       	call   c000f840 <malloc>
c0023566:	89 c7                	mov    edi,eax
c0023568:	89 04 24             	mov    DWORD PTR [esp],eax
c002356b:	e8 78 06 00 00       	call   c0023be8 <ATA::ATA()>
c0023570:	eb 28                	jmp    c002359a <IDE::detect()+0x24c>
c0023572:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c0023578:	55                   	push   ebp
c0023579:	56                   	push   esi
c002357a:	68 56 c7 02 c0       	push   0xc002c756
c002357f:	e8 ed f5 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0023584:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002358b:	e8 b0 c2 fe ff       	call   c000f840 <malloc>
c0023590:	89 c7                	mov    edi,eax
c0023592:	89 04 24             	mov    DWORD PTR [esp],eax
c0023595:	e8 8e 0c 00 00       	call   c0024228 <ATAPI::ATAPI()>
c002359a:	5a                   	pop    edx
c002359b:	59                   	pop    ecx
c002359c:	57                   	push   edi
c002359d:	53                   	push   ebx
c002359e:	e8 f5 09 ff ff       	call   c0013f98 <Device::addChild(Device*)>
c00235a3:	8b 07                	mov    eax,DWORD PTR [edi]
c00235a5:	53                   	push   ebx
c00235a6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00235aa:	6a 00                	push   0x0
c00235ac:	57                   	push   edi
c00235ad:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00235b0:	83 c4 20             	add    esp,0x20
c00235b3:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00235b7:	4d                   	dec    ebp
c00235b8:	74 0a                	je     c00235c4 <IDE::detect()+0x276>
c00235ba:	bd 01 00 00 00       	mov    ebp,0x1
c00235bf:	e9 bb fd ff ff       	jmp    c002337f <IDE::detect()+0x31>
c00235c4:	4e                   	dec    esi
c00235c5:	74 63                	je     c002362a <IDE::detect()+0x2dc>
c00235c7:	be 01 00 00 00       	mov    esi,0x1
c00235cc:	e9 ac fd ff ff       	jmp    c002337d <IDE::detect()+0x2f>
c00235d1:	50                   	push   eax
c00235d2:	6a 04                	push   0x4
c00235d4:	56                   	push   esi
c00235d5:	53                   	push   ebx
c00235d6:	e8 05 f7 ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c00235db:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00235df:	83 c4 0c             	add    esp,0xc
c00235e2:	6a 05                	push   0x5
c00235e4:	56                   	push   esi
c00235e5:	53                   	push   ebx
c00235e6:	e8 f5 f6 ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c00235eb:	83 c4 10             	add    esp,0x10
c00235ee:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00235f2:	80 fa 14             	cmp    dl,0x14
c00235f5:	75 04                	jne    c00235fb <IDE::detect()+0x2ad>
c00235f7:	3c eb                	cmp    al,0xeb
c00235f9:	eb 07                	jmp    c0023602 <IDE::detect()+0x2b4>
c00235fb:	3c 96                	cmp    al,0x96
c00235fd:	75 b8                	jne    c00235b7 <IDE::detect()+0x269>
c00235ff:	80 fa 69             	cmp    dl,0x69
c0023602:	75 b3                	jne    c00235b7 <IDE::detect()+0x269>
c0023604:	68 a1 00 00 00       	push   0xa1
c0023609:	6a 07                	push   0x7
c002360b:	56                   	push   esi
c002360c:	53                   	push   ebx
c002360d:	e8 0e f6 ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023612:	5f                   	pop    edi
c0023613:	58                   	pop    eax
c0023614:	6a 00                	push   0x0
c0023616:	68 40 42 0f 00       	push   0xf4240
c002361b:	e8 42 a9 ff ff       	call   c001df62 <nanoSleep(unsigned long long)>
c0023620:	83 c4 10             	add    esp,0x10
c0023623:	b1 01                	mov    cl,0x1
c0023625:	e9 4a fe ff ff       	jmp    c0023474 <IDE::detect()+0x126>
c002362a:	81 c4 1c 02 00 00    	add    esp,0x21c
c0023630:	5b                   	pop    ebx
c0023631:	5e                   	pop    esi
c0023632:	5f                   	pop    edi
c0023633:	5d                   	pop    ebp
c0023634:	c3                   	ret    
c0023635:	90                   	nop

c0023636 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c0023636:	55                   	push   ebp
c0023637:	57                   	push   edi
c0023638:	56                   	push   esi
c0023639:	53                   	push   ebx
c002363a:	83 ec 1c             	sub    esp,0x1c
c002363d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023641:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023645:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0023649:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c002364d:	88 c3                	mov    bl,al
c002364f:	84 c0                	test   al,al
c0023651:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023655:	0f 84 67 01 00 00    	je     c00237c2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c002365b:	83 ec 0c             	sub    esp,0xc
c002365e:	68 87 c7 02 c0       	push   0xc002c787
c0023663:	e8 09 f5 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0023668:	83 c4 10             	add    esp,0x10
c002366b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002366f:	3c 01                	cmp    al,0x1
c0023671:	75 17                	jne    c002368a <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0023673:	83 ec 0c             	sub    esp,0xc
c0023676:	b3 13                	mov    bl,0x13
c0023678:	68 93 c7 02 c0       	push   0xc002c793
c002367d:	e8 ef f4 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0023682:	83 c4 10             	add    esp,0x10
c0023685:	e9 25 01 00 00       	jmp    c00237af <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002368a:	3c 02                	cmp    al,0x2
c002368c:	0f 85 ef 00 00 00    	jne    c0023781 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0023692:	d1 e6                	shl    esi,1
c0023694:	09 ee                	or     esi,ebp
c0023696:	52                   	push   edx
c0023697:	89 f0                	mov    eax,esi
c0023699:	6a 01                	push   0x1
c002369b:	0f b6 f0             	movzx  esi,al
c002369e:	c1 e6 06             	shl    esi,0x6
c00236a1:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c00236a9:	50                   	push   eax
c00236aa:	57                   	push   edi
c00236ab:	e8 30 f6 ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c00236b0:	83 c4 10             	add    esp,0x10
c00236b3:	89 c6                	mov    esi,eax
c00236b5:	a8 01                	test   al,0x1
c00236b7:	74 12                	je     c00236cb <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c00236b9:	83 ec 0c             	sub    esp,0xc
c00236bc:	b3 07                	mov    bl,0x7
c00236be:	68 a8 c7 02 c0       	push   0xc002c7a8
c00236c3:	e8 a9 f4 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c00236c8:	83 c4 10             	add    esp,0x10
c00236cb:	f7 c6 02 00 00 00    	test   esi,0x2
c00236d1:	74 12                	je     c00236e5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c00236d3:	83 ec 0c             	sub    esp,0xc
c00236d6:	b3 03                	mov    bl,0x3
c00236d8:	68 c6 c7 02 c0       	push   0xc002c7c6
c00236dd:	e8 8f f4 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c00236e2:	83 c4 10             	add    esp,0x10
c00236e5:	f7 c6 04 00 00 00    	test   esi,0x4
c00236eb:	74 12                	je     c00236ff <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00236ed:	83 ec 0c             	sub    esp,0xc
c00236f0:	b3 14                	mov    bl,0x14
c00236f2:	68 e6 c7 02 c0       	push   0xc002c7e6
c00236f7:	e8 75 f4 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c00236fc:	83 c4 10             	add    esp,0x10
c00236ff:	f7 c6 08 00 00 00    	test   esi,0x8
c0023705:	74 12                	je     c0023719 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c0023707:	83 ec 0c             	sub    esp,0xc
c002370a:	b3 03                	mov    bl,0x3
c002370c:	68 c6 c7 02 c0       	push   0xc002c7c6
c0023711:	e8 5b f4 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0023716:	83 c4 10             	add    esp,0x10
c0023719:	f7 c6 10 00 00 00    	test   esi,0x10
c002371f:	74 12                	je     c0023733 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c0023721:	83 ec 0c             	sub    esp,0xc
c0023724:	b3 15                	mov    bl,0x15
c0023726:	68 fe c7 02 c0       	push   0xc002c7fe
c002372b:	e8 41 f4 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0023730:	83 c4 10             	add    esp,0x10
c0023733:	f7 c6 20 00 00 00    	test   esi,0x20
c0023739:	74 12                	je     c002374d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c002373b:	83 ec 0c             	sub    esp,0xc
c002373e:	b3 03                	mov    bl,0x3
c0023740:	68 c6 c7 02 c0       	push   0xc002c7c6
c0023745:	e8 27 f4 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c002374a:	83 c4 10             	add    esp,0x10
c002374d:	f7 c6 40 00 00 00    	test   esi,0x40
c0023753:	74 12                	je     c0023767 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c0023755:	83 ec 0c             	sub    esp,0xc
c0023758:	b3 16                	mov    bl,0x16
c002375a:	68 18 c8 02 c0       	push   0xc002c818
c002375f:	e8 0d f4 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0023764:	83 c4 10             	add    esp,0x10
c0023767:	89 f0                	mov    eax,esi
c0023769:	84 c0                	test   al,al
c002376b:	79 42                	jns    c00237af <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002376d:	83 ec 0c             	sub    esp,0xc
c0023770:	b3 0d                	mov    bl,0xd
c0023772:	68 39 c8 02 c0       	push   0xc002c839
c0023777:	e8 f5 f3 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c002377c:	83 c4 10             	add    esp,0x10
c002377f:	eb 2e                	jmp    c00237af <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023781:	3c 03                	cmp    al,0x3
c0023783:	75 14                	jne    c0023799 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c0023785:	83 ec 0c             	sub    esp,0xc
c0023788:	b3 17                	mov    bl,0x17
c002378a:	68 4d c8 02 c0       	push   0xc002c84d
c002378f:	e8 dd f3 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0023794:	83 c4 10             	add    esp,0x10
c0023797:	eb 16                	jmp    c00237af <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0023799:	3c 04                	cmp    al,0x4
c002379b:	75 12                	jne    c00237af <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002379d:	83 ec 0c             	sub    esp,0xc
c00237a0:	b3 08                	mov    bl,0x8
c00237a2:	68 63 c8 02 c0       	push   0xc002c863
c00237a7:	e8 c5 f3 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c00237ac:	83 c4 10             	add    esp,0x10
c00237af:	50                   	push   eax
c00237b0:	50                   	push   eax
c00237b1:	0f b6 c3             	movzx  eax,bl
c00237b4:	50                   	push   eax
c00237b5:	68 7b c8 02 c0       	push   0xc002c87b
c00237ba:	e8 b2 f3 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c00237bf:	83 c4 10             	add    esp,0x10
c00237c2:	83 c4 1c             	add    esp,0x1c
c00237c5:	88 d8                	mov    al,bl
c00237c7:	5b                   	pop    ebx
c00237c8:	5e                   	pop    esi
c00237c9:	5f                   	pop    edi
c00237ca:	5d                   	pop    ebp
c00237cb:	c3                   	ret    

c00237cc <IDE::polling(unsigned char, unsigned int)>:
c00237cc:	57                   	push   edi
c00237cd:	56                   	push   esi
c00237ce:	53                   	push   ebx
c00237cf:	bb 04 00 00 00       	mov    ebx,0x4
c00237d4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00237d8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00237dd:	52                   	push   edx
c00237de:	6a 0c                	push   0xc
c00237e0:	56                   	push   esi
c00237e1:	57                   	push   edi
c00237e2:	e8 f9 f4 ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c00237e7:	83 c4 10             	add    esp,0x10
c00237ea:	4b                   	dec    ebx
c00237eb:	75 f0                	jne    c00237dd <IDE::polling(unsigned char, unsigned int)+0x11>
c00237ed:	bb a0 86 01 00       	mov    ebx,0x186a0
c00237f2:	50                   	push   eax
c00237f3:	6a 0c                	push   0xc
c00237f5:	56                   	push   esi
c00237f6:	57                   	push   edi
c00237f7:	e8 e4 f4 ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c00237fc:	83 c4 10             	add    esp,0x10
c00237ff:	a8 01                	test   al,0x1
c0023801:	74 12                	je     c0023815 <IDE::polling(unsigned char, unsigned int)+0x49>
c0023803:	83 ec 0c             	sub    esp,0xc
c0023806:	68 95 c8 02 c0       	push   0xc002c895
c002380b:	e8 61 f3 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0023810:	83 c4 10             	add    esp,0x10
c0023813:	eb 17                	jmp    c002382c <IDE::polling(unsigned char, unsigned int)+0x60>
c0023815:	a8 20                	test   al,0x20
c0023817:	75 0f                	jne    c0023828 <IDE::polling(unsigned char, unsigned int)+0x5c>
c0023819:	4b                   	dec    ebx
c002381a:	74 10                	je     c002382c <IDE::polling(unsigned char, unsigned int)+0x60>
c002381c:	84 c0                	test   al,al
c002381e:	78 d2                	js     c00237f2 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023820:	a8 08                	test   al,0x8
c0023822:	74 ce                	je     c00237f2 <IDE::polling(unsigned char, unsigned int)+0x26>
c0023824:	31 c0                	xor    eax,eax
c0023826:	eb 06                	jmp    c002382e <IDE::polling(unsigned char, unsigned int)+0x62>
c0023828:	b0 01                	mov    al,0x1
c002382a:	eb 02                	jmp    c002382e <IDE::polling(unsigned char, unsigned int)+0x62>
c002382c:	b0 02                	mov    al,0x2
c002382e:	5b                   	pop    ebx
c002382f:	5e                   	pop    esi
c0023830:	5f                   	pop    edi
c0023831:	c3                   	ret    

c0023832 <SATABus::close(int, int, void*)>:
c0023832:	31 c0                	xor    eax,eax
c0023834:	c3                   	ret    
c0023835:	90                   	nop

c0023836 <SATABus::detect()>:
c0023836:	c3                   	ret    
c0023837:	90                   	nop

c0023838 <SATABus::SATABus()>:
c0023838:	83 ec 0c             	sub    esp,0xc
c002383b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002383f:	83 ec 08             	sub    esp,0x8
c0023842:	68 d8 c8 02 c0       	push   0xc002c8d8
c0023847:	50                   	push   eax
c0023848:	e8 d7 0a ff ff       	call   c0014324 <HardDiskController::HardDiskController(char const*)>
c002384d:	83 c4 10             	add    esp,0x10
c0023850:	ba 94 c9 02 c0       	mov    edx,0xc002c994
c0023855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023859:	89 10                	mov    DWORD PTR [eax],edx
c002385b:	83 ec 0c             	sub    esp,0xc
c002385e:	6a 50                	push   0x50
c0023860:	e8 9c c7 fe ff       	call   c0010001 <Phys::allocateContiguousPages(int)>
c0023865:	83 c4 10             	add    esp,0x10
c0023868:	89 c2                	mov    edx,eax
c002386a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002386e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0023874:	83 ec 0c             	sub    esp,0xc
c0023877:	6a 50                	push   0x50
c0023879:	e8 03 e3 fe ff       	call   c0011b81 <Virt::allocateKernelVirtualPages(int)>
c002387e:	83 c4 10             	add    esp,0x10
c0023881:	89 c2                	mov    edx,eax
c0023883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023887:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c002388d:	e8 7f e4 fe ff       	call   c0011d11 <Virt::getAKernelVAS()>
c0023892:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0023896:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c002389c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00238a0:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c00238a6:	83 ec 0c             	sub    esp,0xc
c00238a9:	6a 03                	push   0x3
c00238ab:	6a 50                	push   0x50
c00238ad:	51                   	push   ecx
c00238ae:	52                   	push   edx
c00238af:	50                   	push   eax
c00238b0:	e8 8b ec fe ff       	call   c0012540 <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00238b5:	83 c4 20             	add    esp,0x20
c00238b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238bc:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c00238c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238c6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00238cc:	83 ec 04             	sub    esp,0x4
c00238cf:	52                   	push   edx
c00238d0:	50                   	push   eax
c00238d1:	68 fc c8 02 c0       	push   0xc002c8fc
c00238d6:	e8 96 f2 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c00238db:	83 c4 10             	add    esp,0x10
c00238de:	90                   	nop
c00238df:	83 c4 0c             	add    esp,0xc
c00238e2:	c3                   	ret    
c00238e3:	90                   	nop

c00238e4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00238e4:	83 ec 0c             	sub    esp,0xc
c00238e7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00238eb:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00238ee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00238f1:	09 c2                	or     edx,eax
c00238f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00238f7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00238fd:	8b 08                	mov    ecx,DWORD PTR [eax]
c00238ff:	31 c0                	xor    eax,eax
c0023901:	c1 e9 08             	shr    ecx,0x8
c0023904:	83 e1 0f             	and    ecx,0xf
c0023907:	39 c8                	cmp    eax,ecx
c0023909:	74 0a                	je     c0023915 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c002390b:	f6 c2 01             	test   dl,0x1
c002390e:	74 18                	je     c0023928 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c0023910:	d1 ea                	shr    edx,1
c0023912:	40                   	inc    eax
c0023913:	eb f2                	jmp    c0023907 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c0023915:	83 ec 0c             	sub    esp,0xc
c0023918:	68 20 c9 02 c0       	push   0xc002c920
c002391d:	e8 cb 68 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c0023922:	83 c4 10             	add    esp,0x10
c0023925:	83 c8 ff             	or     eax,0xffffffff
c0023928:	83 c4 0c             	add    esp,0xc
c002392b:	c3                   	ret    

c002392c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c002392c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023930:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0023933:	89 c2                	mov    edx,eax
c0023935:	c1 ea 08             	shr    edx,0x8
c0023938:	83 e2 0f             	and    edx,0xf
c002393b:	fe ca                	dec    dl
c002393d:	75 31                	jne    c0023970 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002393f:	83 e0 0f             	and    eax,0xf
c0023942:	3c 03                	cmp    al,0x3
c0023944:	75 2a                	jne    c0023970 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0023946:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c0023949:	b8 02 00 00 00       	mov    eax,0x2
c002394e:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c0023954:	74 1c                	je     c0023972 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023956:	b8 04 00 00 00       	mov    eax,0x4
c002395b:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0023961:	74 0f                	je     c0023972 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0023963:	31 c0                	xor    eax,eax
c0023965:	83 fa 03             	cmp    edx,0x3
c0023968:	0f 94 c0             	sete   al
c002396b:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c002396f:	c3                   	ret    
c0023970:	31 c0                	xor    eax,eax
c0023972:	c3                   	ret    
c0023973:	90                   	nop

c0023974 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c0023974:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023978:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002397b:	0f ba e2 0f          	bt     edx,0xf
c002397f:	72 f7                	jb     c0023978 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0023981:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0023984:	83 ca 10             	or     edx,0x10
c0023987:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c002398a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002398d:	83 ca 01             	or     edx,0x1
c0023990:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0023993:	c3                   	ret    

c0023994 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c0023994:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0023998:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002399b:	83 e2 fe             	and    edx,0xfffffffe
c002399e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00239a1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239a4:	83 e2 ef             	and    edx,0xffffffef
c00239a7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00239aa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239ad:	0f ba e2 0e          	bt     edx,0xe
c00239b1:	72 f7                	jb     c00239aa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00239b3:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c00239b6:	0f ba e2 0f          	bt     edx,0xf
c00239ba:	72 ee                	jb     c00239aa <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c00239bc:	c3                   	ret    
c00239bd:	90                   	nop

c00239be <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c00239be:	55                   	push   ebp
c00239bf:	57                   	push   edi
c00239c0:	56                   	push   esi
c00239c1:	53                   	push   ebx
c00239c2:	83 ec 1c             	sub    esp,0x1c
c00239c5:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00239c9:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00239cd:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00239d1:	53                   	push   ebx
c00239d2:	89 fd                	mov    ebp,edi
c00239d4:	56                   	push   esi
c00239d5:	c1 e5 0a             	shl    ebp,0xa
c00239d8:	e8 b7 ff ff ff       	call   c0023994 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00239dd:	83 ec 0c             	sub    esp,0xc
c00239e0:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00239e6:	01 e8                	add    eax,ebp
c00239e8:	89 03                	mov    DWORD PTR [ebx],eax
c00239ea:	8b 03                	mov    eax,DWORD PTR [ebx]
c00239ec:	68 00 04 00 00       	push   0x400
c00239f1:	6a 00                	push   0x0
c00239f3:	50                   	push   eax
c00239f4:	e8 7f cd fd ff       	call   c0000778 <memset>
c00239f9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00239ff:	89 fa                	mov    edx,edi
c0023a01:	01 e8                	add    eax,ebp
c0023a03:	c1 e7 0d             	shl    edi,0xd
c0023a06:	89 03                	mov    DWORD PTR [ebx],eax
c0023a08:	c1 e2 08             	shl    edx,0x8
c0023a0b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0023a12:	81 c2 00 80 00 00    	add    edx,0x8000
c0023a18:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0023a1c:	89 d0                	mov    eax,edx
c0023a1e:	83 c4 1c             	add    esp,0x1c
c0023a21:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023a27:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0023a2a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0023a2d:	68 00 01 00 00       	push   0x100
c0023a32:	6a 00                	push   0x0
c0023a34:	50                   	push   eax
c0023a35:	e8 3e cd fd ff       	call   c0000778 <memset>
c0023a3a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0023a3e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c0023a44:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0023a4a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0023a4e:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0023a51:	83 c4 10             	add    esp,0x10
c0023a54:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0023a5b:	31 ff                	xor    edi,edi
c0023a5d:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0023a63:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c0023a69:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023a6d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0023a73:	83 c5 20             	add    ebp,0x20
c0023a76:	01 f8                	add    eax,edi
c0023a78:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023a7b:	52                   	push   edx
c0023a7c:	68 00 01 00 00       	push   0x100
c0023a81:	6a 00                	push   0x0
c0023a83:	50                   	push   eax
c0023a84:	e8 ef cc fd ff       	call   c0000778 <memset>
c0023a89:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023a8d:	83 c4 10             	add    esp,0x10
c0023a90:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c0023a96:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0023a9d:	01 f8                	add    eax,edi
c0023a9f:	81 c7 00 01 00 00    	add    edi,0x100
c0023aa5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0023aa8:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0023aae:	75 b3                	jne    c0023a63 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0023ab0:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c0023ab4:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0023ab8:	83 c4 1c             	add    esp,0x1c
c0023abb:	5b                   	pop    ebx
c0023abc:	5e                   	pop    esi
c0023abd:	5f                   	pop    edi
c0023abe:	5d                   	pop    ebp
c0023abf:	e9 b0 fe ff ff       	jmp    c0023974 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c0023ac4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c0023ac4:	55                   	push   ebp
c0023ac5:	57                   	push   edi
c0023ac6:	56                   	push   esi
c0023ac7:	53                   	push   ebx
c0023ac8:	31 db                	xor    ebx,ebx
c0023aca:	83 ec 0c             	sub    esp,0xc
c0023acd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0023ad1:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0023ad5:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c0023ad8:	f7 c7 01 00 00 00    	test   edi,0x1
c0023ade:	0f 84 aa 00 00 00    	je     c0023b8e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023ae4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0023ae8:	89 d8                	mov    eax,ebx
c0023aea:	c1 e0 07             	shl    eax,0x7
c0023aed:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c0023af4:	55                   	push   ebp
c0023af5:	56                   	push   esi
c0023af6:	e8 31 fe ff ff       	call   c002392c <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c0023afb:	5a                   	pop    edx
c0023afc:	83 f8 01             	cmp    eax,0x1
c0023aff:	59                   	pop    ecx
c0023b00:	75 30                	jne    c0023b32 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c0023b02:	50                   	push   eax
c0023b03:	50                   	push   eax
c0023b04:	53                   	push   ebx
c0023b05:	68 45 c9 02 c0       	push   0xc002c945
c0023b0a:	e8 62 f0 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0023b0f:	83 c4 0c             	add    esp,0xc
c0023b12:	53                   	push   ebx
c0023b13:	55                   	push   ebp
c0023b14:	56                   	push   esi
c0023b15:	e8 a4 fe ff ff       	call   c00239be <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023b1a:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0023b21:	e8 1a bd fe ff       	call   c000f840 <malloc>
c0023b26:	89 c5                	mov    ebp,eax
c0023b28:	89 04 24             	mov    DWORD PTR [esp],eax
c0023b2b:	e8 60 0d 00 00       	call   c0024890 <SATA::SATA()>
c0023b30:	eb 33                	jmp    c0023b65 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0023b32:	83 f8 04             	cmp    eax,0x4
c0023b35:	75 47                	jne    c0023b7e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c0023b37:	50                   	push   eax
c0023b38:	50                   	push   eax
c0023b39:	53                   	push   ebx
c0023b3a:	68 5c c9 02 c0       	push   0xc002c95c
c0023b3f:	e8 2d f0 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0023b44:	83 c4 0c             	add    esp,0xc
c0023b47:	53                   	push   ebx
c0023b48:	55                   	push   ebp
c0023b49:	56                   	push   esi
c0023b4a:	e8 6f fe ff ff       	call   c00239be <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0023b4f:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0023b56:	e8 e5 bc fe ff       	call   c000f840 <malloc>
c0023b5b:	89 c5                	mov    ebp,eax
c0023b5d:	89 04 24             	mov    DWORD PTR [esp],eax
c0023b60:	e8 d7 10 00 00       	call   c0024c3c <SATAPI::SATAPI()>
c0023b65:	5a                   	pop    edx
c0023b66:	59                   	pop    ecx
c0023b67:	55                   	push   ebp
c0023b68:	56                   	push   esi
c0023b69:	e8 2a 04 ff ff       	call   c0013f98 <Device::addChild(Device*)>
c0023b6e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0023b71:	56                   	push   esi
c0023b72:	6a 00                	push   0x0
c0023b74:	53                   	push   ebx
c0023b75:	55                   	push   ebp
c0023b76:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0023b79:	83 c4 20             	add    esp,0x20
c0023b7c:	eb 10                	jmp    c0023b8e <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0023b7e:	50                   	push   eax
c0023b7f:	50                   	push   eax
c0023b80:	53                   	push   ebx
c0023b81:	68 75 c9 02 c0       	push   0xc002c975
c0023b86:	e8 e6 ef fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0023b8b:	83 c4 10             	add    esp,0x10
c0023b8e:	d1 ef                	shr    edi,1
c0023b90:	43                   	inc    ebx
c0023b91:	83 fb 20             	cmp    ebx,0x20
c0023b94:	0f 85 3e ff ff ff    	jne    c0023ad8 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0023b9a:	83 c4 0c             	add    esp,0xc
c0023b9d:	5b                   	pop    ebx
c0023b9e:	5e                   	pop    esi
c0023b9f:	5f                   	pop    edi
c0023ba0:	5d                   	pop    ebp
c0023ba1:	c3                   	ret    

c0023ba2 <SATABus::open(int, int, void*)>:
c0023ba2:	83 ec 14             	sub    esp,0x14
c0023ba5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023ba9:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0023baf:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c0023bb5:	52                   	push   edx
c0023bb6:	50                   	push   eax
c0023bb7:	e8 08 ff ff ff       	call   c0023ac4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0023bbc:	31 c0                	xor    eax,eax
c0023bbe:	83 c4 1c             	add    esp,0x1c
c0023bc1:	c3                   	ret    

c0023bc2 <ATA::close(int, int, void*)>:
c0023bc2:	83 ec 0c             	sub    esp,0xc
c0023bc5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bc9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0023bcf:	85 c0                	test   eax,eax
c0023bd1:	74 0c                	je     c0023bdf <ATA::close(int, int, void*)+0x1d>
c0023bd3:	83 ec 0c             	sub    esp,0xc
c0023bd6:	8b 10                	mov    edx,DWORD PTR [eax]
c0023bd8:	50                   	push   eax
c0023bd9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0023bdc:	83 c4 10             	add    esp,0x10
c0023bdf:	31 c0                	xor    eax,eax
c0023be1:	83 c4 0c             	add    esp,0xc
c0023be4:	c3                   	ret    
c0023be5:	90                   	nop

c0023be6 <ATA::powerSaving(PowerSavingLevel)>:
c0023be6:	c3                   	ret    
c0023be7:	90                   	nop

c0023be8 <ATA::ATA()>:
c0023be8:	83 ec 0c             	sub    esp,0xc
c0023beb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023bef:	83 ec 04             	sub    esp,0x4
c0023bf2:	68 00 02 00 00       	push   0x200
c0023bf7:	68 5d ca 02 c0       	push   0xc002ca5d
c0023bfc:	50                   	push   eax
c0023bfd:	e8 ba 07 ff ff       	call   c00143bc <PhysicalDisk::PhysicalDisk(char const*, int)>
c0023c02:	83 c4 10             	add    esp,0x10
c0023c05:	ba e0 c9 02 c0       	mov    edx,0xc002c9e0
c0023c0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023c0e:	89 10                	mov    DWORD PTR [eax],edx
c0023c10:	90                   	nop
c0023c11:	83 c4 0c             	add    esp,0xc
c0023c14:	c3                   	ret    
c0023c15:	90                   	nop

c0023c16 <ATA::flush(bool)>:
c0023c16:	53                   	push   ebx
c0023c17:	83 ec 08             	sub    esp,0x8
c0023c1a:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c0023c1f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023c23:	19 c0                	sbb    eax,eax
c0023c25:	83 e0 fd             	and    eax,0xfffffffd
c0023c28:	05 ea 00 00 00       	add    eax,0xea
c0023c2d:	50                   	push   eax
c0023c2e:	6a 07                	push   0x7
c0023c30:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023c37:	50                   	push   eax
c0023c38:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c3e:	e8 dd ef ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023c43:	83 c4 0c             	add    esp,0xc
c0023c46:	6a 00                	push   0x0
c0023c48:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023c4f:	50                   	push   eax
c0023c50:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023c56:	e8 71 fb ff ff       	call   c00237cc <IDE::polling(unsigned char, unsigned int)>
c0023c5b:	83 c4 18             	add    esp,0x18
c0023c5e:	5b                   	pop    ebx
c0023c5f:	c3                   	ret    

c0023c60 <ATA::readyForCommand()>:
c0023c60:	56                   	push   esi
c0023c61:	53                   	push   ebx
c0023c62:	31 db                	xor    ebx,ebx
c0023c64:	50                   	push   eax
c0023c65:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0023c69:	50                   	push   eax
c0023c6a:	6a 0c                	push   0xc
c0023c6c:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0023c73:	50                   	push   eax
c0023c74:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0023c7a:	e8 61 f0 ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c0023c7f:	83 c4 10             	add    esp,0x10
c0023c82:	a8 88                	test   al,0x88
c0023c84:	74 23                	je     c0023ca9 <ATA::readyForCommand()+0x49>
c0023c86:	43                   	inc    ebx
c0023c87:	83 fb 63             	cmp    ebx,0x63
c0023c8a:	7e dd                	jle    c0023c69 <ATA::readyForCommand()+0x9>
c0023c8c:	51                   	push   ecx
c0023c8d:	51                   	push   ecx
c0023c8e:	6a 00                	push   0x0
c0023c90:	68 40 42 0f 00       	push   0xf4240
c0023c95:	e8 c8 a2 ff ff       	call   c001df62 <nanoSleep(unsigned long long)>
c0023c9a:	83 c4 10             	add    esp,0x10
c0023c9d:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0023ca3:	75 c4                	jne    c0023c69 <ATA::readyForCommand()+0x9>
c0023ca5:	31 c0                	xor    eax,eax
c0023ca7:	eb 02                	jmp    c0023cab <ATA::readyForCommand()+0x4b>
c0023ca9:	b0 01                	mov    al,0x1
c0023cab:	5a                   	pop    edx
c0023cac:	5b                   	pop    ebx
c0023cad:	5e                   	pop    esi
c0023cae:	c3                   	ret    
c0023caf:	90                   	nop

c0023cb0 <ATA::access(unsigned long long, int, void*, bool)>:
c0023cb0:	55                   	push   ebp
c0023cb1:	57                   	push   edi
c0023cb2:	56                   	push   esi
c0023cb3:	53                   	push   ebx
c0023cb4:	83 ec 2c             	sub    esp,0x2c
c0023cb7:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0023cbb:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0023cbf:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0023cc3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023cc7:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0023ccb:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0023ccf:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0023cd3:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0023cd9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023cdd:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0023ce3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0023ce7:	c1 e0 06             	shl    eax,0x6
c0023cea:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c0023cf2:	74 5d                	je     c0023d51 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c0023cf4:	89 fa                	mov    edx,edi
c0023cf6:	89 f0                	mov    eax,esi
c0023cf8:	0f ac d0 1c          	shrd   eax,edx,0x1c
c0023cfc:	c1 ea 1c             	shr    edx,0x1c
c0023cff:	89 d1                	mov    ecx,edx
c0023d01:	09 c1                	or     ecx,eax
c0023d03:	74 25                	je     c0023d2a <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c0023d05:	31 ed                	xor    ebp,ebp
c0023d07:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c0023d0e:	89 fa                	mov    edx,edi
c0023d10:	89 f0                	mov    eax,esi
c0023d12:	0f ad d0             	shrd   eax,edx,cl
c0023d15:	d3 ea                	shr    edx,cl
c0023d17:	f6 c1 20             	test   cl,0x20
c0023d1a:	74 02                	je     c0023d1e <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c0023d1c:	89 d0                	mov    eax,edx
c0023d1e:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c0023d22:	45                   	inc    ebp
c0023d23:	83 fd 06             	cmp    ebp,0x6
c0023d26:	75 df                	jne    c0023d07 <ATA::access(unsigned long long, int, void*, bool)+0x57>
c0023d28:	eb 76                	jmp    c0023da0 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0023d2a:	89 f0                	mov    eax,esi
c0023d2c:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0023d31:	89 fa                	mov    edx,edi
c0023d33:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023d3a:	0f ac d0 10          	shrd   eax,edx,0x10
c0023d3e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023d43:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0023d47:	c1 ee 18             	shr    esi,0x18
c0023d4a:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0023d4f:	eb 56                	jmp    c0023da7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023d51:	6a 00                	push   0x0
c0023d53:	6a 3f                	push   0x3f
c0023d55:	57                   	push   edi
c0023d56:	56                   	push   esi
c0023d57:	e8 90 29 00 00       	call   c00266ec <__umoddi3>
c0023d5c:	83 c4 10             	add    esp,0x10
c0023d5f:	40                   	inc    eax
c0023d60:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c0023d64:	6a 00                	push   0x0
c0023d66:	68 f0 03 00 00       	push   0x3f0
c0023d6b:	57                   	push   edi
c0023d6c:	56                   	push   esi
c0023d6d:	e8 7a 28 00 00       	call   c00265ec <__udivdi3>
c0023d72:	83 c4 10             	add    esp,0x10
c0023d75:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0023d7a:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0023d81:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0023d86:	6a 00                	push   0x0
c0023d88:	6a 3f                	push   0x3f
c0023d8a:	57                   	push   edi
c0023d8b:	56                   	push   esi
c0023d8c:	e8 5b 28 00 00       	call   c00265ec <__udivdi3>
c0023d91:	83 c4 10             	add    esp,0x10
c0023d94:	89 c6                	mov    esi,eax
c0023d96:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0023d9b:	83 e6 0f             	and    esi,0xf
c0023d9e:	eb 07                	jmp    c0023da7 <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0023da0:	31 f6                	xor    esi,esi
c0023da2:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c0023da7:	bf 01 00 00 00       	mov    edi,0x1
c0023dac:	50                   	push   eax
c0023dad:	6a 00                	push   0x0
c0023daf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023db6:	50                   	push   eax
c0023db7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023dbb:	e8 6c f0 ff ff       	call   c0022e2c <IDE::enableIRQs(unsigned char, bool)>
c0023dc0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023dc3:	e8 98 fe ff ff       	call   c0023c60 <ATA::readyForCommand()>
c0023dc8:	83 c4 10             	add    esp,0x10
c0023dcb:	84 c0                	test   al,al
c0023dcd:	0f 84 5a 02 00 00    	je     c002402d <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0023dd3:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c0023dd9:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0023ddf:	c1 e0 04             	shl    eax,0x4
c0023de2:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c0023de9:	09 c6                	or     esi,eax
c0023deb:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c0023df0:	75 05                	jne    c0023df7 <ATA::access(unsigned long long, int, void*, bool)+0x147>
c0023df2:	83 ce a0             	or     esi,0xffffffa0
c0023df5:	eb 03                	jmp    c0023dfa <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c0023df7:	83 ce e0             	or     esi,0xffffffe0
c0023dfa:	89 f0                	mov    eax,esi
c0023dfc:	0f b6 f0             	movzx  esi,al
c0023dff:	56                   	push   esi
c0023e00:	6a 06                	push   0x6
c0023e02:	51                   	push   ecx
c0023e03:	52                   	push   edx
c0023e04:	e8 17 ee ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e09:	83 c4 10             	add    esp,0x10
c0023e0c:	6a 00                	push   0x0
c0023e0e:	6a 01                	push   0x1
c0023e10:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e17:	50                   	push   eax
c0023e18:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e1e:	e8 fd ed ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e23:	83 c4 10             	add    esp,0x10
c0023e26:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023e2b:	75 6e                	jne    c0023e9b <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0023e2d:	6a 00                	push   0x0
c0023e2f:	6a 08                	push   0x8
c0023e31:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e38:	50                   	push   eax
c0023e39:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e3f:	e8 dc ed ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e44:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0023e49:	50                   	push   eax
c0023e4a:	6a 09                	push   0x9
c0023e4c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e53:	50                   	push   eax
c0023e54:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e5a:	e8 c1 ed ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e5f:	83 c4 20             	add    esp,0x20
c0023e62:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0023e67:	50                   	push   eax
c0023e68:	6a 0a                	push   0xa
c0023e6a:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e71:	50                   	push   eax
c0023e72:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e78:	e8 a3 ed ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e7d:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0023e82:	50                   	push   eax
c0023e83:	6a 0b                	push   0xb
c0023e85:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023e8c:	50                   	push   eax
c0023e8d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023e93:	e8 88 ed ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e98:	83 c4 20             	add    esp,0x20
c0023e9b:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0023ea0:	50                   	push   eax
c0023ea1:	6a 02                	push   0x2
c0023ea3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023eaa:	50                   	push   eax
c0023eab:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023eb1:	e8 6a ed ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023eb6:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0023ebb:	50                   	push   eax
c0023ebc:	6a 03                	push   0x3
c0023ebe:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ec5:	50                   	push   eax
c0023ec6:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023ecc:	e8 4f ed ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ed1:	83 c4 20             	add    esp,0x20
c0023ed4:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0023ed9:	50                   	push   eax
c0023eda:	6a 04                	push   0x4
c0023edc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023ee3:	50                   	push   eax
c0023ee4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023eea:	e8 31 ed ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023eef:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0023ef4:	50                   	push   eax
c0023ef5:	6a 05                	push   0x5
c0023ef7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023efe:	50                   	push   eax
c0023eff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f05:	e8 16 ed ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f0a:	83 c4 20             	add    esp,0x20
c0023f0d:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0023f12:	0f 94 c0             	sete   al
c0023f15:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0023f1a:	74 09                	je     c0023f25 <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0023f1c:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0023f23:	eb 07                	jmp    c0023f2c <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0023f25:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0023f2c:	0f b6 c0             	movzx  eax,al
c0023f2f:	50                   	push   eax
c0023f30:	6a 07                	push   0x7
c0023f32:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f39:	50                   	push   eax
c0023f3a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f40:	e8 db ec ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f45:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0023f49:	83 c4 10             	add    esp,0x10
c0023f4c:	85 f6                	test   esi,esi
c0023f4e:	0f 84 ba 00 00 00    	je     c002400e <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0023f54:	50                   	push   eax
c0023f55:	6a 01                	push   0x1
c0023f57:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023f5e:	50                   	push   eax
c0023f5f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f65:	e8 62 f8 ff ff       	call   c00237cc <IDE::polling(unsigned char, unsigned int)>
c0023f6a:	83 c4 10             	add    esp,0x10
c0023f6d:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0023f73:	84 c0                	test   al,al
c0023f75:	74 2c                	je     c0023fa3 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0023f77:	0f b6 f8             	movzx  edi,al
c0023f7a:	0f b6 d2             	movzx  edx,dl
c0023f7d:	57                   	push   edi
c0023f7e:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0023f85:	50                   	push   eax
c0023f86:	52                   	push   edx
c0023f87:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023f8d:	e8 a4 f6 ff ff       	call   c0023636 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0023f92:	c7 04 24 b8 c9 02 c0 	mov    DWORD PTR [esp],0xc002c9b8
c0023f99:	e8 d3 eb fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0023f9e:	e9 87 00 00 00       	jmp    c002402a <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0023fa3:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0023fa8:	74 33                	je     c0023fdd <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0023faa:	31 ed                	xor    ebp,ebp
c0023fac:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0023fb0:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0023fb4:	50                   	push   eax
c0023fb5:	50                   	push   eax
c0023fb6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0023fbd:	50                   	push   eax
c0023fbe:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fc4:	e8 45 ec ff ff       	call   c0022c0e <IDE::getBase(unsigned char)>
c0023fc9:	89 c2                	mov    edx,eax
c0023fcb:	89 f8                	mov    eax,edi
c0023fcd:	66 ef                	out    dx,ax
c0023fcf:	45                   	inc    ebp
c0023fd0:	83 c4 10             	add    esp,0x10
c0023fd3:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0023fd9:	75 d1                	jne    c0023fac <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0023fdb:	eb 23                	jmp    c0024000 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0023fdd:	0f b6 d2             	movzx  edx,dl
c0023fe0:	51                   	push   ecx
c0023fe1:	51                   	push   ecx
c0023fe2:	52                   	push   edx
c0023fe3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0023fe9:	e8 20 ec ff ff       	call   c0022c0e <IDE::getBase(unsigned char)>
c0023fee:	b9 00 01 00 00       	mov    ecx,0x100
c0023ff3:	89 c2                	mov    edx,eax
c0023ff5:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0023ff9:	fc                   	cld    
c0023ffa:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0023ffd:	83 c4 10             	add    esp,0x10
c0024000:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024008:	4e                   	dec    esi
c0024009:	e9 3e ff ff ff       	jmp    c0023f4c <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c002400e:	31 ff                	xor    edi,edi
c0024010:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024015:	74 16                	je     c002402d <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024017:	50                   	push   eax
c0024018:	50                   	push   eax
c0024019:	31 c0                	xor    eax,eax
c002401b:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024020:	0f 94 c0             	sete   al
c0024023:	50                   	push   eax
c0024024:	53                   	push   ebx
c0024025:	e8 ec fb ff ff       	call   c0023c16 <ATA::flush(bool)>
c002402a:	83 c4 10             	add    esp,0x10
c002402d:	83 c4 2c             	add    esp,0x2c
c0024030:	89 f8                	mov    eax,edi
c0024032:	5b                   	pop    ebx
c0024033:	5e                   	pop    esi
c0024034:	5f                   	pop    edi
c0024035:	5d                   	pop    ebp
c0024036:	c3                   	ret    
c0024037:	90                   	nop

c0024038 <ATA::read(unsigned long long, int, void*)>:
c0024038:	57                   	push   edi
c0024039:	b8 04 00 00 00       	mov    eax,0x4
c002403e:	56                   	push   esi
c002403f:	53                   	push   ebx
c0024040:	83 ec 10             	sub    esp,0x10
c0024043:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024047:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c002404b:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002404e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024052:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024056:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002405c:	77 3b                	ja     c0024099 <ATA::read(unsigned long long, int, void*)+0x61>
c002405e:	b8 06 00 00 00       	mov    eax,0x6
c0024063:	85 d2                	test   edx,edx
c0024065:	74 32                	je     c0024099 <ATA::read(unsigned long long, int, void*)+0x61>
c0024067:	50                   	push   eax
c0024068:	50                   	push   eax
c0024069:	6a 00                	push   0x0
c002406b:	52                   	push   edx
c002406c:	53                   	push   ebx
c002406d:	57                   	push   edi
c002406e:	56                   	push   esi
c002406f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024073:	e8 38 fc ff ff       	call   c0023cb0 <ATA::access(unsigned long long, int, void*, bool)>
c0024078:	83 c4 20             	add    esp,0x20
c002407b:	85 c0                	test   eax,eax
c002407d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024081:	75 11                	jne    c0024094 <ATA::read(unsigned long long, int, void*)+0x5c>
c0024083:	01 1d 68 23 03 c0    	add    DWORD PTR ds:0xc0032368,ebx
c0024089:	e8 48 c9 fe ff       	call   c00109d6 <VgaText::updateDiskUsage()>
c002408e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024092:	eb 05                	jmp    c0024099 <ATA::read(unsigned long long, int, void*)+0x61>
c0024094:	b8 01 00 00 00       	mov    eax,0x1
c0024099:	83 c4 10             	add    esp,0x10
c002409c:	5b                   	pop    ebx
c002409d:	5e                   	pop    esi
c002409e:	5f                   	pop    edi
c002409f:	c3                   	ret    

c00240a0 <ATA::write(unsigned long long, int, void*)>:
c00240a0:	57                   	push   edi
c00240a1:	b8 04 00 00 00       	mov    eax,0x4
c00240a6:	56                   	push   esi
c00240a7:	53                   	push   ebx
c00240a8:	83 ec 10             	sub    esp,0x10
c00240ab:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00240af:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00240b3:	8d 4b ff             	lea    ecx,[ebx-0x1]
c00240b6:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00240ba:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00240be:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c00240c4:	77 3b                	ja     c0024101 <ATA::write(unsigned long long, int, void*)+0x61>
c00240c6:	b8 06 00 00 00       	mov    eax,0x6
c00240cb:	85 d2                	test   edx,edx
c00240cd:	74 32                	je     c0024101 <ATA::write(unsigned long long, int, void*)+0x61>
c00240cf:	50                   	push   eax
c00240d0:	50                   	push   eax
c00240d1:	6a 01                	push   0x1
c00240d3:	52                   	push   edx
c00240d4:	53                   	push   ebx
c00240d5:	57                   	push   edi
c00240d6:	56                   	push   esi
c00240d7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00240db:	e8 d0 fb ff ff       	call   c0023cb0 <ATA::access(unsigned long long, int, void*, bool)>
c00240e0:	83 c4 20             	add    esp,0x20
c00240e3:	85 c0                	test   eax,eax
c00240e5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00240e9:	75 11                	jne    c00240fc <ATA::write(unsigned long long, int, void*)+0x5c>
c00240eb:	01 1d 64 23 03 c0    	add    DWORD PTR ds:0xc0032364,ebx
c00240f1:	e8 e0 c8 fe ff       	call   c00109d6 <VgaText::updateDiskUsage()>
c00240f6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00240fa:	eb 05                	jmp    c0024101 <ATA::write(unsigned long long, int, void*)+0x61>
c00240fc:	b8 01 00 00 00       	mov    eax,0x1
c0024101:	83 c4 10             	add    esp,0x10
c0024104:	5b                   	pop    ebx
c0024105:	5e                   	pop    esi
c0024106:	5f                   	pop    edi
c0024107:	c3                   	ret    

c0024108 <ATA::detectCHS()>:
c0024108:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002410c:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024112:	c1 e0 06             	shl    eax,0x6
c0024115:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c002411b:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024125:	c7 44 24 04 c3 c9 02 c0 	mov    DWORD PTR [esp+0x4],0xc002c9c3
c002412d:	e9 bb 60 ff ff       	jmp    c001a1ed <Krnl::panic(char const*)>

c0024132 <ATA::open(int, int, void*)>:
c0024132:	53                   	push   ebx
c0024133:	83 ec 08             	sub    esp,0x8
c0024136:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c002413a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002413e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024142:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024148:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002414e:	c1 e0 06             	shl    eax,0x6
c0024151:	01 d0                	add    eax,edx
c0024153:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c002415a:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024160:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024167:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024171:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024177:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c002417e:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024185:	75 0c                	jne    c0024193 <ATA::open(int, int, void*)+0x61>
c0024187:	83 ec 0c             	sub    esp,0xc
c002418a:	53                   	push   ebx
c002418b:	e8 78 ff ff ff       	call   c0024108 <ATA::detectCHS()>
c0024190:	83 c4 10             	add    esp,0x10
c0024193:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024199:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c002419f:	c1 e0 06             	shl    eax,0x6
c00241a2:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c00241a9:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00241b3:	d1 e8                	shr    eax,1
c00241b5:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c00241bb:	6a 04                	push   0x4
c00241bd:	6a 0c                	push   0xc
c00241bf:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241c6:	50                   	push   eax
c00241c7:	52                   	push   edx
c00241c8:	e8 53 ea ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241cd:	90                   	nop
c00241ce:	90                   	nop
c00241cf:	6a 00                	push   0x0
c00241d1:	6a 0c                	push   0xc
c00241d3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00241da:	50                   	push   eax
c00241db:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00241e1:	e8 3a ea ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241e6:	83 c4 14             	add    esp,0x14
c00241e9:	53                   	push   ebx
c00241ea:	e8 35 02 ff ff       	call   c0014424 <PhysicalDisk::startCache()>
c00241ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00241f2:	e8 7d 23 ff ff       	call   c0016574 <createPartitionsForDisk(PhysicalDisk*)>
c00241f7:	31 c0                	xor    eax,eax
c00241f9:	83 c4 18             	add    esp,0x18
c00241fc:	5b                   	pop    ebx
c00241fd:	c3                   	ret    

c00241fe <ATAPI::write(unsigned long long, int, void*)>:
c00241fe:	b8 03 00 00 00       	mov    eax,0x3
c0024203:	c3                   	ret    

c0024204 <ATAPI::close(int, int, void*)>:
c0024204:	83 ec 0c             	sub    esp,0xc
c0024207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002420b:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024211:	85 c0                	test   eax,eax
c0024213:	74 0c                	je     c0024221 <ATAPI::close(int, int, void*)+0x1d>
c0024215:	83 ec 0c             	sub    esp,0xc
c0024218:	8b 10                	mov    edx,DWORD PTR [eax]
c002421a:	50                   	push   eax
c002421b:	ff 52 04             	call   DWORD PTR [edx+0x4]
c002421e:	83 c4 10             	add    esp,0x10
c0024221:	31 c0                	xor    eax,eax
c0024223:	83 c4 0c             	add    esp,0xc
c0024226:	c3                   	ret    
c0024227:	90                   	nop

c0024228 <ATAPI::ATAPI()>:
c0024228:	83 ec 0c             	sub    esp,0xc
c002422b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002422f:	83 ec 04             	sub    esp,0x4
c0024232:	68 00 08 00 00       	push   0x800
c0024237:	68 fd ca 02 c0       	push   0xc002cafd
c002423c:	50                   	push   eax
c002423d:	e8 7a 01 ff ff       	call   c00143bc <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024242:	83 c4 10             	add    esp,0x10
c0024245:	ba 18 ca 02 c0       	mov    edx,0xc002ca18
c002424a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002424e:	89 10                	mov    DWORD PTR [eax],edx
c0024250:	90                   	nop
c0024251:	83 c4 0c             	add    esp,0xc
c0024254:	c3                   	ret    
c0024255:	90                   	nop

c0024256 <ATAPI::readyForCommand()>:
c0024256:	56                   	push   esi
c0024257:	53                   	push   ebx
c0024258:	31 db                	xor    ebx,ebx
c002425a:	50                   	push   eax
c002425b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002425f:	50                   	push   eax
c0024260:	6a 0c                	push   0xc
c0024262:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024269:	50                   	push   eax
c002426a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024270:	e8 6b ea ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c0024275:	83 c4 10             	add    esp,0x10
c0024278:	a8 88                	test   al,0x88
c002427a:	74 23                	je     c002429f <ATAPI::readyForCommand()+0x49>
c002427c:	43                   	inc    ebx
c002427d:	83 fb 63             	cmp    ebx,0x63
c0024280:	7e dd                	jle    c002425f <ATAPI::readyForCommand()+0x9>
c0024282:	51                   	push   ecx
c0024283:	51                   	push   ecx
c0024284:	6a 00                	push   0x0
c0024286:	68 40 42 0f 00       	push   0xf4240
c002428b:	e8 d2 9c ff ff       	call   c001df62 <nanoSleep(unsigned long long)>
c0024290:	83 c4 10             	add    esp,0x10
c0024293:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024299:	75 c4                	jne    c002425f <ATAPI::readyForCommand()+0x9>
c002429b:	31 c0                	xor    eax,eax
c002429d:	eb 02                	jmp    c00242a1 <ATAPI::readyForCommand()+0x4b>
c002429f:	b0 01                	mov    al,0x1
c00242a1:	5a                   	pop    edx
c00242a2:	5b                   	pop    ebx
c00242a3:	5e                   	pop    esi
c00242a4:	c3                   	ret    
c00242a5:	90                   	nop

c00242a6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c00242a6:	55                   	push   ebp
c00242a7:	57                   	push   edi
c00242a8:	56                   	push   esi
c00242a9:	53                   	push   ebx
c00242aa:	83 ec 20             	sub    esp,0x20
c00242ad:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00242b1:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c00242b5:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00242b9:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00242bd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00242c1:	6a 01                	push   0x1
c00242c3:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00242ca:	50                   	push   eax
c00242cb:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00242d1:	e8 56 eb ff ff       	call   c0022e2c <IDE::enableIRQs(unsigned char, bool)>
c00242d6:	5e                   	pop    esi
c00242d7:	58                   	pop    eax
c00242d8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00242df:	50                   	push   eax
c00242e0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00242e6:	e8 0f e9 ff ff       	call   c0022bfa <IDE::prepareInterrupt(unsigned char)>
c00242eb:	89 3c 24             	mov    DWORD PTR [esp],edi
c00242ee:	e8 63 ff ff ff       	call   c0024256 <ATAPI::readyForCommand()>
c00242f3:	83 c4 10             	add    esp,0x10
c00242f6:	84 c0                	test   al,al
c00242f8:	75 0a                	jne    c0024304 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c00242fa:	bb 01 00 00 00       	mov    ebx,0x1
c00242ff:	e9 57 02 00 00       	jmp    c002455b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024304:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c002430a:	c1 e0 04             	shl    eax,0x4
c002430d:	0f b6 c0             	movzx  eax,al
c0024310:	50                   	push   eax
c0024311:	6a 06                	push   0x6
c0024313:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002431a:	50                   	push   eax
c002431b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024321:	e8 fa e8 ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024326:	6a 00                	push   0x0
c0024328:	6a 01                	push   0x1
c002432a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024331:	50                   	push   eax
c0024332:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024338:	e8 e3 e8 ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002433d:	83 c4 20             	add    esp,0x20
c0024340:	0f b6 c3             	movzx  eax,bl
c0024343:	0f b6 df             	movzx  ebx,bh
c0024346:	50                   	push   eax
c0024347:	6a 04                	push   0x4
c0024349:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024350:	50                   	push   eax
c0024351:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024357:	e8 c4 e8 ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002435c:	53                   	push   ebx
c002435d:	6a 05                	push   0x5
c002435f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024366:	50                   	push   eax
c0024367:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002436d:	e8 ae e8 ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024372:	83 c4 20             	add    esp,0x20
c0024375:	68 a0 00 00 00       	push   0xa0
c002437a:	6a 07                	push   0x7
c002437c:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024383:	50                   	push   eax
c0024384:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002438a:	e8 91 e8 ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002438f:	83 c4 0c             	add    esp,0xc
c0024392:	6a 01                	push   0x1
c0024394:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002439b:	50                   	push   eax
c002439c:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243a2:	e8 25 f4 ff ff       	call   c00237cc <IDE::polling(unsigned char, unsigned int)>
c00243a7:	83 c4 10             	add    esp,0x10
c00243aa:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c00243b0:	84 c0                	test   al,al
c00243b2:	74 23                	je     c00243d7 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c00243b4:	0f b6 d8             	movzx  ebx,al
c00243b7:	0f b6 d2             	movzx  edx,dl
c00243ba:	53                   	push   ebx
c00243bb:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c00243c2:	50                   	push   eax
c00243c3:	52                   	push   edx
c00243c4:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243ca:	e8 67 f2 ff ff       	call   c0023636 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c00243cf:	83 c4 10             	add    esp,0x10
c00243d2:	e9 84 01 00 00       	jmp    c002455b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c00243d7:	0f b6 d2             	movzx  edx,dl
c00243da:	53                   	push   ebx
c00243db:	53                   	push   ebx
c00243dc:	52                   	push   edx
c00243dd:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00243e3:	e8 26 e8 ff ff       	call   c0022c0e <IDE::getBase(unsigned char)>
c00243e8:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c00243ec:	b9 06 00 00 00       	mov    ecx,0x6
c00243f1:	89 c2                	mov    edx,eax
c00243f3:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c00243f6:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00243fa:	83 c4 10             	add    esp,0x10
c00243fd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024403:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002440a:	85 db                	test   ebx,ebx
c002440c:	0f 84 ec 00 00 00    	je     c00244fe <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024412:	51                   	push   ecx
c0024413:	51                   	push   ecx
c0024414:	52                   	push   edx
c0024415:	50                   	push   eax
c0024416:	e8 73 e9 ff ff       	call   c0022d8e <IDE::waitInterrupt(unsigned char)>
c002441b:	83 c4 10             	add    esp,0x10
c002441e:	84 c0                	test   al,al
c0024420:	0f 84 d4 fe ff ff    	je     c00242fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024426:	56                   	push   esi
c0024427:	56                   	push   esi
c0024428:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002442f:	50                   	push   eax
c0024430:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024436:	e8 bf e7 ff ff       	call   c0022bfa <IDE::prepareInterrupt(unsigned char)>
c002443b:	83 c4 0c             	add    esp,0xc
c002443e:	6a 04                	push   0x4
c0024440:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024447:	50                   	push   eax
c0024448:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002444e:	e8 8d e8 ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c0024453:	83 c4 0c             	add    esp,0xc
c0024456:	89 c6                	mov    esi,eax
c0024458:	6a 05                	push   0x5
c002445a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024461:	50                   	push   eax
c0024462:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024468:	e8 73 e8 ff ff       	call   c0022ce0 <IDE::read(unsigned char, unsigned char)>
c002446d:	89 f1                	mov    ecx,esi
c002446f:	0f b6 c0             	movzx  eax,al
c0024472:	0f b6 f1             	movzx  esi,cl
c0024475:	c1 e0 08             	shl    eax,0x8
c0024478:	09 c6                	or     esi,eax
c002447a:	d1 fe                	sar    esi,1
c002447c:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0024480:	83 c4 10             	add    esp,0x10
c0024483:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0024488:	74 41                	je     c00244cb <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c002448a:	31 c9                	xor    ecx,ecx
c002448c:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024492:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024499:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c002449d:	75 0a                	jne    c00244a9 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c002449f:	01 c9                	add    ecx,ecx
c00244a1:	01 cd                	add    ebp,ecx
c00244a3:	4b                   	dec    ebx
c00244a4:	e9 54 ff ff ff       	jmp    c00243fd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c00244a9:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c00244ae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00244b2:	51                   	push   ecx
c00244b3:	51                   	push   ecx
c00244b4:	52                   	push   edx
c00244b5:	50                   	push   eax
c00244b6:	e8 53 e7 ff ff       	call   c0022c0e <IDE::getBase(unsigned char)>
c00244bb:	89 c2                	mov    edx,eax
c00244bd:	89 f0                	mov    eax,esi
c00244bf:	66 ef                	out    dx,ax
c00244c1:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00244c5:	83 c4 10             	add    esp,0x10
c00244c8:	41                   	inc    ecx
c00244c9:	eb c1                	jmp    c002448c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00244cb:	31 f6                	xor    esi,esi
c00244cd:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00244d3:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00244da:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00244de:	75 06                	jne    c00244e6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00244e0:	01 f6                	add    esi,esi
c00244e2:	01 f5                	add    ebp,esi
c00244e4:	eb bd                	jmp    c00244a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00244e6:	51                   	push   ecx
c00244e7:	51                   	push   ecx
c00244e8:	52                   	push   edx
c00244e9:	50                   	push   eax
c00244ea:	e8 1f e7 ff ff       	call   c0022c0e <IDE::getBase(unsigned char)>
c00244ef:	89 c2                	mov    edx,eax
c00244f1:	66 ed                	in     ax,dx
c00244f3:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00244f8:	83 c4 10             	add    esp,0x10
c00244fb:	46                   	inc    esi
c00244fc:	eb cf                	jmp    c00244cd <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00244fe:	51                   	push   ecx
c00244ff:	51                   	push   ecx
c0024500:	52                   	push   edx
c0024501:	50                   	push   eax
c0024502:	e8 87 e8 ff ff       	call   c0022d8e <IDE::waitInterrupt(unsigned char)>
c0024507:	83 c4 10             	add    esp,0x10
c002450a:	84 c0                	test   al,al
c002450c:	0f 84 e8 fd ff ff    	je     c00242fa <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024512:	bb a0 86 01 00       	mov    ebx,0x186a0
c0024517:	52                   	push   edx
c0024518:	52                   	push   edx
c0024519:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024520:	50                   	push   eax
c0024521:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024527:	e8 ce e6 ff ff       	call   c0022bfa <IDE::prepareInterrupt(unsigned char)>
c002452c:	83 c4 10             	add    esp,0x10
c002452f:	50                   	push   eax
c0024530:	50                   	push   eax
c0024531:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024538:	50                   	push   eax
c0024539:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002453f:	e8 ca e6 ff ff       	call   c0022c0e <IDE::getBase(unsigned char)>
c0024544:	8d 50 07             	lea    edx,[eax+0x7]
c0024547:	ec                   	in     al,dx
c0024548:	83 c4 10             	add    esp,0x10
c002454b:	a8 88                	test   al,0x88
c002454d:	74 0a                	je     c0024559 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c002454f:	4b                   	dec    ebx
c0024550:	75 dd                	jne    c002452f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0024552:	bb 02 00 00 00       	mov    ebx,0x2
c0024557:	eb 02                	jmp    c002455b <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024559:	31 db                	xor    ebx,ebx
c002455b:	83 c4 1c             	add    esp,0x1c
c002455e:	89 d8                	mov    eax,ebx
c0024560:	5b                   	pop    ebx
c0024561:	5e                   	pop    esi
c0024562:	5f                   	pop    edi
c0024563:	5d                   	pop    ebp
c0024564:	c3                   	ret    
c0024565:	90                   	nop

c0024566 <ATAPI::diskRemoved()>:
c0024566:	83 ec 18             	sub    esp,0x18
c0024569:	68 09 cb 02 c0       	push   0xc002cb09
c002456e:	e8 fe e5 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0024573:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024577:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c002457e:	83 c4 1c             	add    esp,0x1c
c0024581:	c3                   	ret    

c0024582 <ATAPI::eject()>:
c0024582:	57                   	push   edi
c0024583:	b9 03 00 00 00       	mov    ecx,0x3
c0024588:	53                   	push   ebx
c0024589:	83 ec 14             	sub    esp,0x14
c002458c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024590:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024594:	fc                   	cld    
c0024595:	31 c0                	xor    eax,eax
c0024597:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024599:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c002459e:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c00245a3:	50                   	push   eax
c00245a4:	50                   	push   eax
c00245a5:	6a 00                	push   0x0
c00245a7:	6a 00                	push   0x0
c00245a9:	6a 00                	push   0x0
c00245ab:	6a 02                	push   0x2
c00245ad:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00245b1:	50                   	push   eax
c00245b2:	53                   	push   ebx
c00245b3:	e8 ee fc ff ff       	call   c00242a6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00245b8:	83 c4 14             	add    esp,0x14
c00245bb:	53                   	push   ebx
c00245bc:	e8 a5 ff ff ff       	call   c0024566 <ATAPI::diskRemoved()>
c00245c1:	83 c4 24             	add    esp,0x24
c00245c4:	31 c0                	xor    eax,eax
c00245c6:	5b                   	pop    ebx
c00245c7:	5f                   	pop    edi
c00245c8:	c3                   	ret    
c00245c9:	90                   	nop

c00245ca <ATAPI::diskInserted()>:
c00245ca:	53                   	push   ebx
c00245cb:	83 ec 14             	sub    esp,0x14
c00245ce:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00245d2:	68 20 cb 02 c0       	push   0xc002cb20
c00245d7:	e8 95 e5 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c00245dc:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00245e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00245e6:	e8 39 fe fe ff       	call   c0014424 <PhysicalDisk::startCache()>
c00245eb:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00245ef:	83 c4 18             	add    esp,0x18
c00245f2:	5b                   	pop    ebx
c00245f3:	e9 7c 1f ff ff       	jmp    c0016574 <createPartitionsForDisk(PhysicalDisk*)>

c00245f8 <ATAPI::detectMedia()>:
c00245f8:	56                   	push   esi
c00245f9:	53                   	push   ebx
c00245fa:	83 ec 28             	sub    esp,0x28
c00245fd:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024601:	6a 0c                	push   0xc
c0024603:	6a 00                	push   0x0
c0024605:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024609:	56                   	push   esi
c002460a:	e8 69 c1 fd ff       	call   c0000778 <memset>
c002460f:	58                   	pop    eax
c0024610:	5a                   	pop    edx
c0024611:	6a 00                	push   0x0
c0024613:	6a 00                	push   0x0
c0024615:	6a 00                	push   0x0
c0024617:	6a 00                	push   0x0
c0024619:	56                   	push   esi
c002461a:	53                   	push   ebx
c002461b:	e8 86 fc ff ff       	call   c00242a6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024620:	83 c4 1c             	add    esp,0x1c
c0024623:	6a 0c                	push   0xc
c0024625:	6a 00                	push   0x0
c0024627:	56                   	push   esi
c0024628:	e8 4b c1 fd ff       	call   c0000778 <memset>
c002462d:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024632:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024637:	59                   	pop    ecx
c0024638:	58                   	pop    eax
c0024639:	6a 01                	push   0x1
c002463b:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c002463f:	50                   	push   eax
c0024640:	6a 00                	push   0x0
c0024642:	6a 12                	push   0x12
c0024644:	56                   	push   esi
c0024645:	53                   	push   ebx
c0024646:	e8 5b fc ff ff       	call   c00242a6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002464b:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c002464f:	83 c4 20             	add    esp,0x20
c0024652:	83 e0 7f             	and    eax,0x7f
c0024655:	3c 70                	cmp    al,0x70
c0024657:	74 15                	je     c002466e <ATAPI::detectMedia()+0x76>
c0024659:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024660:	75 0c                	jne    c002466e <ATAPI::detectMedia()+0x76>
c0024662:	83 ec 0c             	sub    esp,0xc
c0024665:	53                   	push   ebx
c0024666:	e8 5f ff ff ff       	call   c00245ca <ATAPI::diskInserted()>
c002466b:	83 c4 10             	add    esp,0x10
c002466e:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024672:	83 e0 0f             	and    eax,0xf
c0024675:	3c 02                	cmp    al,0x2
c0024677:	75 1b                	jne    c0024694 <ATAPI::detectMedia()+0x9c>
c0024679:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c002467e:	75 2d                	jne    c00246ad <ATAPI::detectMedia()+0xb5>
c0024680:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0024687:	74 24                	je     c00246ad <ATAPI::detectMedia()+0xb5>
c0024689:	83 ec 0c             	sub    esp,0xc
c002468c:	53                   	push   ebx
c002468d:	e8 d4 fe ff ff       	call   c0024566 <ATAPI::diskRemoved()>
c0024692:	eb 16                	jmp    c00246aa <ATAPI::detectMedia()+0xb2>
c0024694:	84 c0                	test   al,al
c0024696:	75 15                	jne    c00246ad <ATAPI::detectMedia()+0xb5>
c0024698:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002469f:	75 0c                	jne    c00246ad <ATAPI::detectMedia()+0xb5>
c00246a1:	83 ec 0c             	sub    esp,0xc
c00246a4:	53                   	push   ebx
c00246a5:	e8 20 ff ff ff       	call   c00245ca <ATAPI::diskInserted()>
c00246aa:	83 c4 10             	add    esp,0x10
c00246ad:	83 c4 24             	add    esp,0x24
c00246b0:	5b                   	pop    ebx
c00246b1:	5e                   	pop    esi
c00246b2:	c3                   	ret    
c00246b3:	90                   	nop

c00246b4 <ATAPI::open(int, int, void*)>:
c00246b4:	53                   	push   ebx
c00246b5:	83 ec 08             	sub    esp,0x8
c00246b8:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00246bc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00246c0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00246c4:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00246ca:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00246d0:	c1 e0 06             	shl    eax,0x6
c00246d3:	01 d0                	add    eax,edx
c00246d5:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00246dc:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00246e2:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00246e9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00246f3:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00246f9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0024700:	6a 04                	push   0x4
c0024702:	6a 0c                	push   0xc
c0024704:	51                   	push   ecx
c0024705:	52                   	push   edx
c0024706:	e8 15 e5 ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002470b:	90                   	nop
c002470c:	90                   	nop
c002470d:	6a 00                	push   0x0
c002470f:	6a 0c                	push   0xc
c0024711:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024718:	50                   	push   eax
c0024719:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002471f:	e8 fc e4 ff ff       	call   c0022c20 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024724:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c002472b:	83 c4 14             	add    esp,0x14
c002472e:	53                   	push   ebx
c002472f:	e8 c4 fe ff ff       	call   c00245f8 <ATAPI::detectMedia()>
c0024734:	31 c0                	xor    eax,eax
c0024736:	83 c4 18             	add    esp,0x18
c0024739:	5b                   	pop    ebx
c002473a:	c3                   	ret    
c002473b:	90                   	nop

c002473c <ATAPI::read(unsigned long long, int, void*)>:
c002473c:	55                   	push   ebp
c002473d:	57                   	push   edi
c002473e:	56                   	push   esi
c002473f:	53                   	push   ebx
c0024740:	83 ec 1c             	sub    esp,0x1c
c0024743:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0024747:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002474b:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002474f:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0024756:	74 41                	je     c0024799 <ATAPI::read(unsigned long long, int, void*)+0x5d>
c0024758:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002475c:	b9 03 00 00 00       	mov    ecx,0x3
c0024761:	fc                   	cld    
c0024762:	31 c0                	xor    eax,eax
c0024764:	86 fb                	xchg   bl,bh
c0024766:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024768:	c1 c3 10             	rol    ebx,0x10
c002476b:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0024770:	89 e8                	mov    eax,ebp
c0024772:	86 fb                	xchg   bl,bh
c0024774:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0024778:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c002477c:	50                   	push   eax
c002477d:	50                   	push   eax
c002477e:	55                   	push   ebp
c002477f:	c1 e5 0b             	shl    ebp,0xb
c0024782:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024786:	6a 00                	push   0x0
c0024788:	55                   	push   ebp
c0024789:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002478d:	50                   	push   eax
c002478e:	56                   	push   esi
c002478f:	e8 12 fb ff ff       	call   c00242a6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0024794:	83 c4 20             	add    esp,0x20
c0024797:	eb 1a                	jmp    c00247b3 <ATAPI::read(unsigned long long, int, void*)+0x77>
c0024799:	83 ec 0c             	sub    esp,0xc
c002479c:	56                   	push   esi
c002479d:	e8 56 fe ff ff       	call   c00245f8 <ATAPI::detectMedia()>
c00247a2:	83 c4 10             	add    esp,0x10
c00247a5:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c00247ac:	75 aa                	jne    c0024758 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c00247ae:	b8 02 00 00 00       	mov    eax,0x2
c00247b3:	83 c4 1c             	add    esp,0x1c
c00247b6:	5b                   	pop    ebx
c00247b7:	5e                   	pop    esi
c00247b8:	5f                   	pop    edi
c00247b9:	5d                   	pop    ebp
c00247ba:	c3                   	ret    
c00247bb:	90                   	nop

c00247bc <SATA::close(int, int, void*)>:
c00247bc:	83 ec 0c             	sub    esp,0xc
c00247bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247c3:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00247c9:	85 c0                	test   eax,eax
c00247cb:	74 0c                	je     c00247d9 <SATA::close(int, int, void*)+0x1d>
c00247cd:	83 ec 0c             	sub    esp,0xc
c00247d0:	8b 10                	mov    edx,DWORD PTR [eax]
c00247d2:	50                   	push   eax
c00247d3:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00247d6:	83 c4 10             	add    esp,0x10
c00247d9:	31 c0                	xor    eax,eax
c00247db:	83 c4 0c             	add    esp,0xc
c00247de:	c3                   	ret    
c00247df:	90                   	nop

c00247e0 <SATA::powerSaving(PowerSavingLevel)>:
c00247e0:	c3                   	ret    
c00247e1:	90                   	nop

c00247e2 <SATA::open(int, int, void*)>:
c00247e2:	56                   	push   esi
c00247e3:	53                   	push   ebx
c00247e4:	50                   	push   eax
c00247e5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00247e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00247ed:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00247f7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00247fd:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024807:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002480b:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024815:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c002481b:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024822:	e8 0e b7 fe ff       	call   c000ff35 <Phys::allocatePage()>
c0024827:	89 c6                	mov    esi,eax
c0024829:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c002482f:	81 c6 00 10 00 00    	add    esi,0x1000
c0024835:	e8 fb b6 fe ff       	call   c000ff35 <Phys::allocatePage()>
c002483a:	39 c6                	cmp    esi,eax
c002483c:	74 10                	je     c002484e <SATA::open(int, int, void*)+0x6c>
c002483e:	83 ec 0c             	sub    esp,0xc
c0024841:	68 48 ca 02 c0       	push   0xc002ca48
c0024846:	e8 a2 59 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c002484b:	83 c4 10             	add    esp,0x10
c002484e:	83 ec 0c             	sub    esp,0xc
c0024851:	6a 02                	push   0x2
c0024853:	e8 29 d3 fe ff       	call   c0011b81 <Virt::allocateKernelVirtualPages(int)>
c0024858:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002485e:	e8 ae d4 fe ff       	call   c0011d11 <Virt::getAKernelVAS()>
c0024863:	6a 03                	push   0x3
c0024865:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c002486b:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c0024871:	50                   	push   eax
c0024872:	e8 d5 d9 fe ff       	call   c001224c <VAS::mapPage(unsigned long, unsigned long, int)>
c0024877:	83 c4 14             	add    esp,0x14
c002487a:	53                   	push   ebx
c002487b:	e8 a4 fb fe ff       	call   c0014424 <PhysicalDisk::startCache()>
c0024880:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024883:	e8 ec 1c ff ff       	call   c0016574 <createPartitionsForDisk(PhysicalDisk*)>
c0024888:	83 c4 14             	add    esp,0x14
c002488b:	31 c0                	xor    eax,eax
c002488d:	5b                   	pop    ebx
c002488e:	5e                   	pop    esi
c002488f:	c3                   	ret    

c0024890 <SATA::SATA()>:
c0024890:	83 ec 0c             	sub    esp,0xc
c0024893:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024897:	83 ec 04             	sub    esp,0x4
c002489a:	68 00 02 00 00       	push   0x200
c002489f:	68 5c ca 02 c0       	push   0xc002ca5c
c00248a4:	50                   	push   eax
c00248a5:	e8 12 fb fe ff       	call   c00143bc <PhysicalDisk::PhysicalDisk(char const*, int)>
c00248aa:	83 c4 10             	add    esp,0x10
c00248ad:	ba cc ca 02 c0       	mov    edx,0xc002cacc
c00248b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00248b6:	89 10                	mov    DWORD PTR [eax],edx
c00248b8:	90                   	nop
c00248b9:	83 c4 0c             	add    esp,0xc
c00248bc:	c3                   	ret    
c00248bd:	90                   	nop

c00248be <SATA::access(unsigned long long, int, void*, bool)>:
c00248be:	55                   	push   ebp
c00248bf:	57                   	push   edi
c00248c0:	56                   	push   esi
c00248c1:	53                   	push   ebx
c00248c2:	83 ec 2c             	sub    esp,0x2c
c00248c5:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00248c9:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c00248cd:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00248d1:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00248d5:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00248d9:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00248de:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00248e2:	7e 10                	jle    c00248f4 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c00248e4:	83 ec 0c             	sub    esp,0xc
c00248e7:	68 6c ca 02 c0       	push   0xc002ca6c
c00248ec:	e8 fc 58 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c00248f1:	83 c4 10             	add    esp,0x10
c00248f4:	8b b5 6c 01 00 00    	mov    esi,DWORD PTR [ebp+0x16c]
c00248fa:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c0024900:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024906:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002490a:	89 f0                	mov    eax,esi
c002490c:	c1 e0 07             	shl    eax,0x7
c002490f:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024913:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c002491d:	53                   	push   ebx
c002491e:	8d 46 02             	lea    eax,[esi+0x2]
c0024921:	53                   	push   ebx
c0024922:	c1 e0 07             	shl    eax,0x7
c0024925:	bb 01 00 00 00       	mov    ebx,0x1
c002492a:	03 44 24 14          	add    eax,DWORD PTR [esp+0x14]
c002492e:	50                   	push   eax
c002492f:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c0024935:	e8 aa ef ff ff       	call   c00238e4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002493a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c002493e:	83 c4 10             	add    esp,0x10
c0024941:	83 7c 24 14 ff       	cmp    DWORD PTR [esp+0x14],0xffffffff
c0024946:	0f 84 ce 01 00 00    	je     c0024b1a <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c002494c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024950:	c1 e0 09             	shl    eax,0x9
c0024953:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024958:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002495c:	74 17                	je     c0024975 <SATA::access(unsigned long long, int, void*, bool)+0xb7>
c002495e:	51                   	push   ecx
c002495f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024963:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0024967:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c002496d:	e8 d2 bd fd ff       	call   c0000744 <memcpy>
c0024972:	83 c4 10             	add    esp,0x10
c0024975:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c002497b:	8d 46 02             	lea    eax,[esi+0x2]
c002497e:	c1 e0 07             	shl    eax,0x7
c0024981:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0024985:	8b 00                	mov    eax,DWORD PTR [eax]
c0024987:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002498d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024993:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0024997:	c1 e1 05             	shl    ecx,0x5
c002499a:	01 c8                	add    eax,ecx
c002499c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c00249a0:	8a 18                	mov    bl,BYTE PTR [eax]
c00249a2:	83 e1 01             	and    ecx,0x1
c00249a5:	83 e3 bf             	and    ebx,0xffffffbf
c00249a8:	c1 e1 06             	shl    ecx,0x6
c00249ab:	09 d9                	or     ecx,ebx
c00249ad:	88 08                	mov    BYTE PTR [eax],cl
c00249af:	8b 08                	mov    ecx,DWORD PTR [eax]
c00249b1:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c00249b7:	81 c9 05 00 01 00    	or     ecx,0x10005
c00249bd:	89 08                	mov    DWORD PTR [eax],ecx
c00249bf:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c00249c5:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c00249cb:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c00249d1:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c00249d4:	52                   	push   edx
c00249d5:	68 90 00 00 00       	push   0x90
c00249da:	6a 00                	push   0x0
c00249dc:	53                   	push   ebx
c00249dd:	e8 96 bd fd ff       	call   c0000778 <memset>
c00249e2:	8b 85 74 01 00 00    	mov    eax,DWORD PTR [ebp+0x174]
c00249e8:	66 89 7b 04          	mov    WORD PTR [ebx+0x4],di
c00249ec:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c00249f2:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c00249f6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00249fa:	83 c4 10             	add    esp,0x10
c00249fd:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024a00:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024a06:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024a0c:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024a11:	09 c8                	or     eax,ecx
c0024a13:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024a19:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024a1c:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024a23:	66 25 00 7f          	and    ax,0x7f00
c0024a27:	66 0d 27 80          	or     ax,0x8027
c0024a2b:	80 7c 24 10 01       	cmp    BYTE PTR [esp+0x10],0x1
c0024a30:	66 89 03             	mov    WORD PTR [ebx],ax
c0024a33:	19 c0                	sbb    eax,eax
c0024a35:	83 e0 f0             	and    eax,0xfffffff0
c0024a38:	83 c0 35             	add    eax,0x35
c0024a3b:	88 43 02             	mov    BYTE PTR [ebx+0x2],al
c0024a3e:	89 f8                	mov    eax,edi
c0024a40:	c1 e8 10             	shr    eax,0x10
c0024a43:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024a46:	89 f8                	mov    eax,edi
c0024a48:	c1 e8 18             	shr    eax,0x18
c0024a4b:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0024a4e:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024a52:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024a55:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024a59:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024a5c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0024a60:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024a64:	89 f3                	mov    ebx,esi
c0024a66:	31 c0                	xor    eax,eax
c0024a68:	c1 e3 07             	shl    ebx,0x7
c0024a6b:	03 5c 24 0c          	add    ebx,DWORD PTR [esp+0xc]
c0024a6f:	8b 8b 20 01 00 00    	mov    ecx,DWORD PTR [ebx+0x120]
c0024a75:	80 e1 88             	and    cl,0x88
c0024a78:	74 0a                	je     c0024a84 <SATA::access(unsigned long long, int, void*, bool)+0x1c6>
c0024a7a:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024a7f:	74 0a                	je     c0024a8b <SATA::access(unsigned long long, int, void*, bool)+0x1cd>
c0024a81:	40                   	inc    eax
c0024a82:	eb eb                	jmp    c0024a6f <SATA::access(unsigned long long, int, void*, bool)+0x1b1>
c0024a84:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024a89:	75 0a                	jne    c0024a95 <SATA::access(unsigned long long, int, void*, bool)+0x1d7>
c0024a8b:	83 ec 0c             	sub    esp,0xc
c0024a8e:	68 a5 ca 02 c0       	push   0xc002caa5
c0024a93:	eb 56                	jmp    c0024aeb <SATA::access(unsigned long long, int, void*, bool)+0x22d>
c0024a95:	b8 01 00 00 00       	mov    eax,0x1
c0024a9a:	8a 4c 24 14          	mov    cl,BYTE PTR [esp+0x14]
c0024a9e:	c1 e6 07             	shl    esi,0x7
c0024aa1:	d3 e0                	shl    eax,cl
c0024aa3:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c0024aa7:	89 83 38 01 00 00    	mov    DWORD PTR [ebx+0x138],eax
c0024aad:	8b 8e 38 01 00 00    	mov    ecx,DWORD PTR [esi+0x138]
c0024ab3:	85 c8                	test   eax,ecx
c0024ab5:	74 20                	je     c0024ad7 <SATA::access(unsigned long long, int, void*, bool)+0x219>
c0024ab7:	8b 8e 10 01 00 00    	mov    ecx,DWORD PTR [esi+0x110]
c0024abd:	0f ba e1 1e          	bt     ecx,0x1e
c0024ac1:	73 ea                	jae    c0024aad <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c0024ac3:	83 ec 0c             	sub    esp,0xc
c0024ac6:	31 db                	xor    ebx,ebx
c0024ac8:	68 b3 ca 02 c0       	push   0xc002cab3
c0024acd:	e8 1b 57 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c0024ad2:	83 c4 10             	add    esp,0x10
c0024ad5:	eb 43                	jmp    c0024b1a <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024ad7:	8b 86 10 01 00 00    	mov    eax,DWORD PTR [esi+0x110]
c0024add:	0f ba e0 1e          	bt     eax,0x1e
c0024ae1:	73 17                	jae    c0024afa <SATA::access(unsigned long long, int, void*, bool)+0x23c>
c0024ae3:	83 ec 0c             	sub    esp,0xc
c0024ae6:	68 b3 ca 02 c0       	push   0xc002cab3
c0024aeb:	e8 fd 56 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c0024af0:	bb 01 00 00 00       	mov    ebx,0x1
c0024af5:	83 c4 10             	add    esp,0x10
c0024af8:	eb 20                	jmp    c0024b1a <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024afa:	31 db                	xor    ebx,ebx
c0024afc:	80 7c 24 10 00       	cmp    BYTE PTR [esp+0x10],0x0
c0024b01:	75 17                	jne    c0024b1a <SATA::access(unsigned long long, int, void*, bool)+0x25c>
c0024b03:	50                   	push   eax
c0024b04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0024b08:	ff b5 78 01 00 00    	push   DWORD PTR [ebp+0x178]
c0024b0e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0024b12:	e8 2d bc fd ff       	call   c0000744 <memcpy>
c0024b17:	83 c4 10             	add    esp,0x10
c0024b1a:	83 c4 2c             	add    esp,0x2c
c0024b1d:	89 d8                	mov    eax,ebx
c0024b1f:	5b                   	pop    ebx
c0024b20:	5e                   	pop    esi
c0024b21:	5f                   	pop    edi
c0024b22:	5d                   	pop    ebp
c0024b23:	c3                   	ret    

c0024b24 <SATA::read(unsigned long long, int, void*)>:
c0024b24:	57                   	push   edi
c0024b25:	b8 04 00 00 00       	mov    eax,0x4
c0024b2a:	56                   	push   esi
c0024b2b:	53                   	push   ebx
c0024b2c:	83 ec 10             	sub    esp,0x10
c0024b2f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024b33:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024b37:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024b3a:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024b3e:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024b42:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024b48:	77 3b                	ja     c0024b85 <SATA::read(unsigned long long, int, void*)+0x61>
c0024b4a:	b8 06 00 00 00       	mov    eax,0x6
c0024b4f:	85 d2                	test   edx,edx
c0024b51:	74 32                	je     c0024b85 <SATA::read(unsigned long long, int, void*)+0x61>
c0024b53:	50                   	push   eax
c0024b54:	50                   	push   eax
c0024b55:	6a 00                	push   0x0
c0024b57:	52                   	push   edx
c0024b58:	53                   	push   ebx
c0024b59:	57                   	push   edi
c0024b5a:	56                   	push   esi
c0024b5b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024b5f:	e8 5a fd ff ff       	call   c00248be <SATA::access(unsigned long long, int, void*, bool)>
c0024b64:	83 c4 20             	add    esp,0x20
c0024b67:	85 c0                	test   eax,eax
c0024b69:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024b6d:	75 11                	jne    c0024b80 <SATA::read(unsigned long long, int, void*)+0x5c>
c0024b6f:	01 1d 68 23 03 c0    	add    DWORD PTR ds:0xc0032368,ebx
c0024b75:	e8 5c be fe ff       	call   c00109d6 <VgaText::updateDiskUsage()>
c0024b7a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024b7e:	eb 05                	jmp    c0024b85 <SATA::read(unsigned long long, int, void*)+0x61>
c0024b80:	b8 01 00 00 00       	mov    eax,0x1
c0024b85:	83 c4 10             	add    esp,0x10
c0024b88:	5b                   	pop    ebx
c0024b89:	5e                   	pop    esi
c0024b8a:	5f                   	pop    edi
c0024b8b:	c3                   	ret    

c0024b8c <SATA::write(unsigned long long, int, void*)>:
c0024b8c:	55                   	push   ebp
c0024b8d:	b8 04 00 00 00       	mov    eax,0x4
c0024b92:	57                   	push   edi
c0024b93:	56                   	push   esi
c0024b94:	53                   	push   ebx
c0024b95:	83 ec 1c             	sub    esp,0x1c
c0024b98:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0024b9c:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0024ba0:	8d 75 ff             	lea    esi,[ebp-0x1]
c0024ba3:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0024ba7:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c0024bab:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0024bb1:	77 56                	ja     c0024c09 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024bb3:	b8 06 00 00 00       	mov    eax,0x6
c0024bb8:	85 ff                	test   edi,edi
c0024bba:	74 4d                	je     c0024c09 <SATA::write(unsigned long long, int, void*)+0x7d>
c0024bbc:	89 ee                	mov    esi,ebp
c0024bbe:	c1 e6 09             	shl    esi,0x9
c0024bc1:	01 fe                	add    esi,edi
c0024bc3:	89 c8                	mov    eax,ecx
c0024bc5:	89 da                	mov    edx,ebx
c0024bc7:	83 c0 01             	add    eax,0x1
c0024bca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024bce:	83 d2 00             	adc    edx,0x0
c0024bd1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0024bd5:	50                   	push   eax
c0024bd6:	50                   	push   eax
c0024bd7:	6a 01                	push   0x1
c0024bd9:	57                   	push   edi
c0024bda:	81 c7 00 02 00 00    	add    edi,0x200
c0024be0:	6a 01                	push   0x1
c0024be2:	53                   	push   ebx
c0024be3:	51                   	push   ecx
c0024be4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0024be8:	e8 d1 fc ff ff       	call   c00248be <SATA::access(unsigned long long, int, void*, bool)>
c0024bed:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0024bf1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024bf5:	83 c4 20             	add    esp,0x20
c0024bf8:	39 f7                	cmp    edi,esi
c0024bfa:	75 c7                	jne    c0024bc3 <SATA::write(unsigned long long, int, void*)+0x37>
c0024bfc:	01 2d 64 23 03 c0    	add    DWORD PTR ds:0xc0032364,ebp
c0024c02:	e8 cf bd fe ff       	call   c00109d6 <VgaText::updateDiskUsage()>
c0024c07:	31 c0                	xor    eax,eax
c0024c09:	83 c4 1c             	add    esp,0x1c
c0024c0c:	5b                   	pop    ebx
c0024c0d:	5e                   	pop    esi
c0024c0e:	5f                   	pop    edi
c0024c0f:	5d                   	pop    ebp
c0024c10:	c3                   	ret    
c0024c11:	90                   	nop

c0024c12 <SATAPI::write(unsigned long long, int, void*)>:
c0024c12:	b8 03 00 00 00       	mov    eax,0x3
c0024c17:	c3                   	ret    

c0024c18 <SATAPI::close(int, int, void*)>:
c0024c18:	83 ec 0c             	sub    esp,0xc
c0024c1b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c1f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024c25:	85 c0                	test   eax,eax
c0024c27:	74 0c                	je     c0024c35 <SATAPI::close(int, int, void*)+0x1d>
c0024c29:	83 ec 0c             	sub    esp,0xc
c0024c2c:	8b 10                	mov    edx,DWORD PTR [eax]
c0024c2e:	50                   	push   eax
c0024c2f:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024c32:	83 c4 10             	add    esp,0x10
c0024c35:	31 c0                	xor    eax,eax
c0024c37:	83 c4 0c             	add    esp,0xc
c0024c3a:	c3                   	ret    
c0024c3b:	90                   	nop

c0024c3c <SATAPI::SATAPI()>:
c0024c3c:	83 ec 0c             	sub    esp,0xc
c0024c3f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c43:	83 ec 04             	sub    esp,0x4
c0024c46:	68 00 08 00 00       	push   0x800
c0024c4b:	68 fc ca 02 c0       	push   0xc002cafc
c0024c50:	50                   	push   eax
c0024c51:	e8 66 f7 fe ff       	call   c00143bc <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024c56:	83 c4 10             	add    esp,0x10
c0024c59:	ba a8 cb 02 c0       	mov    edx,0xc002cba8
c0024c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024c62:	89 10                	mov    DWORD PTR [eax],edx
c0024c64:	90                   	nop
c0024c65:	83 c4 0c             	add    esp,0xc
c0024c68:	c3                   	ret    
c0024c69:	90                   	nop

c0024c6a <SATAPI::diskRemoved()>:
c0024c6a:	83 ec 18             	sub    esp,0x18
c0024c6d:	68 08 cb 02 c0       	push   0xc002cb08
c0024c72:	e8 fa de fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0024c77:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0024c7b:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0024c82:	83 c4 1c             	add    esp,0x1c
c0024c85:	c3                   	ret    

c0024c86 <SATAPI::diskInserted()>:
c0024c86:	53                   	push   ebx
c0024c87:	83 ec 14             	sub    esp,0x14
c0024c8a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024c8e:	68 1f cb 02 c0       	push   0xc002cb1f
c0024c93:	e8 d9 de fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0024c98:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0024c9f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024ca2:	e8 7d f7 fe ff       	call   c0014424 <PhysicalDisk::startCache()>
c0024ca7:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0024cab:	83 c4 18             	add    esp,0x18
c0024cae:	5b                   	pop    ebx
c0024caf:	e9 c0 18 ff ff       	jmp    c0016574 <createPartitionsForDisk(PhysicalDisk*)>

c0024cb4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0024cb4:	55                   	push   ebp
c0024cb5:	57                   	push   edi
c0024cb6:	56                   	push   esi
c0024cb7:	53                   	push   ebx
c0024cb8:	83 ec 24             	sub    esp,0x24
c0024cbb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0024cbf:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024cc3:	8b be 6c 01 00 00    	mov    edi,DWORD PTR [esi+0x16c]
c0024cc9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024ccd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024cd1:	8b 86 70 01 00 00    	mov    eax,DWORD PTR [esi+0x170]
c0024cd7:	8d 5f 02             	lea    ebx,[edi+0x2]
c0024cda:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0024ce0:	c1 e3 07             	shl    ebx,0x7
c0024ce3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024ce7:	89 f8                	mov    eax,edi
c0024ce9:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c0024ced:	c1 e0 07             	shl    eax,0x7
c0024cf0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0024cf4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0024cf8:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c0024d02:	53                   	push   ebx
c0024d03:	ff b6 70 01 00 00    	push   DWORD PTR [esi+0x170]
c0024d09:	e8 d6 eb ff ff       	call   c00238e4 <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c0024d0e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0024d12:	83 c4 10             	add    esp,0x10
c0024d15:	b8 01 00 00 00       	mov    eax,0x1
c0024d1a:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0024d1f:	0f 84 8a 01 00 00    	je     c0024eaf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0024d25:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024d2b:	8b 03                	mov    eax,DWORD PTR [ebx]
c0024d2d:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0024d33:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0024d39:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0024d3d:	c1 e1 05             	shl    ecx,0x5
c0024d40:	01 c8                	add    eax,ecx
c0024d42:	8b 08                	mov    ecx,DWORD PTR [eax]
c0024d44:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0024d4a:	81 c9 25 00 01 00    	or     ecx,0x10025
c0024d50:	89 08                	mov    DWORD PTR [eax],ecx
c0024d52:	8b 8e 70 01 00 00    	mov    ecx,DWORD PTR [esi+0x170]
c0024d58:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c0024d5e:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0024d64:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0024d67:	52                   	push   edx
c0024d68:	68 90 00 00 00       	push   0x90
c0024d6d:	6a 00                	push   0x0
c0024d6f:	53                   	push   ebx
c0024d70:	e8 03 ba fd ff       	call   c0000778 <memset>
c0024d75:	83 c4 0c             	add    esp,0xc
c0024d78:	8d 43 40             	lea    eax,[ebx+0x40]
c0024d7b:	6a 0c                	push   0xc
c0024d7d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024d81:	50                   	push   eax
c0024d82:	e8 bd b9 fd ff       	call   c0000744 <memcpy>
c0024d87:	8b 86 78 01 00 00    	mov    eax,DWORD PTR [esi+0x178]
c0024d8d:	89 ea                	mov    edx,ebp
c0024d8f:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c0024d95:	c1 ea 18             	shr    edx,0x18
c0024d98:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0024d9c:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c0024d9f:	8d 48 ff             	lea    ecx,[eax-0x1]
c0024da2:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0024da6:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0024dac:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
c0024db2:	25 00 00 c0 ff       	and    eax,0xffc00000
c0024db7:	66 89 6b 04          	mov    WORD PTR [ebx+0x4],bp
c0024dbb:	09 c8                	or     eax,ecx
c0024dbd:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0024dc1:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0024dc7:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0024dca:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c0024dd1:	66 25 00 7f          	and    ax,0x7f00
c0024dd5:	66 0d 27 80          	or     ax,0x8027
c0024dd9:	66 89 03             	mov    WORD PTR [ebx],ax
c0024ddc:	89 e8                	mov    eax,ebp
c0024dde:	c1 e8 10             	shr    eax,0x10
c0024de1:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0024de4:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c0024de8:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c0024deb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024def:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c0024df2:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0024df6:	83 c4 10             	add    esp,0x10
c0024df9:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c0024dfd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0024e01:	31 c0                	xor    eax,eax
c0024e03:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c0024e09:	80 e1 88             	and    cl,0x88
c0024e0c:	74 0a                	je     c0024e18 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x164>
c0024e0e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e13:	74 0a                	je     c0024e1f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c0024e15:	40                   	inc    eax
c0024e16:	eb eb                	jmp    c0024e03 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x14f>
c0024e18:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0024e1d:	75 0f                	jne    c0024e2e <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x17a>
c0024e1f:	83 ec 0c             	sub    esp,0xc
c0024e22:	68 a5 ca 02 c0       	push   0xc002caa5
c0024e27:	e8 c1 53 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c0024e2c:	eb 3a                	jmp    c0024e68 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1b4>
c0024e2e:	b8 01 00 00 00       	mov    eax,0x1
c0024e33:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c0024e37:	c1 e7 07             	shl    edi,0x7
c0024e3a:	d3 e0                	shl    eax,cl
c0024e3c:	03 3c 24             	add    edi,DWORD PTR [esp]
c0024e3f:	89 82 38 01 00 00    	mov    DWORD PTR [edx+0x138],eax
c0024e45:	8b 97 38 01 00 00    	mov    edx,DWORD PTR [edi+0x138]
c0024e4b:	85 d0                	test   eax,edx
c0024e4d:	74 23                	je     c0024e72 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1be>
c0024e4f:	8b 97 10 01 00 00    	mov    edx,DWORD PTR [edi+0x110]
c0024e55:	0f ba e2 1e          	bt     edx,0x1e
c0024e59:	73 ea                	jae    c0024e45 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x191>
c0024e5b:	83 ec 0c             	sub    esp,0xc
c0024e5e:	68 37 cb 02 c0       	push   0xc002cb37
c0024e63:	e8 09 dd fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0024e68:	83 c4 10             	add    esp,0x10
c0024e6b:	b8 01 00 00 00       	mov    eax,0x1
c0024e70:	eb 3d                	jmp    c0024eaf <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fb>
c0024e72:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c0024e78:	0f ba e0 1e          	bt     eax,0x1e
c0024e7c:	73 0a                	jae    c0024e88 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1d4>
c0024e7e:	83 ec 0c             	sub    esp,0xc
c0024e81:	68 4a cb 02 c0       	push   0xc002cb4a
c0024e86:	eb db                	jmp    c0024e63 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1af>
c0024e88:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0024e8d:	74 1e                	je     c0024ead <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0024e8f:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0024e94:	74 17                	je     c0024ead <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1f9>
c0024e96:	50                   	push   eax
c0024e97:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024e9b:	ff b6 7c 01 00 00    	push   DWORD PTR [esi+0x17c]
c0024ea1:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0024ea5:	e8 9a b8 fd ff       	call   c0000744 <memcpy>
c0024eaa:	83 c4 10             	add    esp,0x10
c0024ead:	31 c0                	xor    eax,eax
c0024eaf:	83 c4 1c             	add    esp,0x1c
c0024eb2:	5b                   	pop    ebx
c0024eb3:	5e                   	pop    esi
c0024eb4:	5f                   	pop    edi
c0024eb5:	5d                   	pop    ebp
c0024eb6:	c3                   	ret    
c0024eb7:	90                   	nop

c0024eb8 <SATAPI::eject()>:
c0024eb8:	57                   	push   edi
c0024eb9:	b9 03 00 00 00       	mov    ecx,0x3
c0024ebe:	53                   	push   ebx
c0024ebf:	83 ec 14             	sub    esp,0x14
c0024ec2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0024ec6:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024eca:	fc                   	cld    
c0024ecb:	31 c0                	xor    eax,eax
c0024ecd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0024ecf:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0024ed4:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0024ed9:	50                   	push   eax
c0024eda:	6a 00                	push   0x0
c0024edc:	6a 00                	push   0x0
c0024ede:	6a 00                	push   0x0
c0024ee0:	6a 00                	push   0x0
c0024ee2:	6a 02                	push   0x2
c0024ee4:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0024ee8:	50                   	push   eax
c0024ee9:	53                   	push   ebx
c0024eea:	e8 c5 fd ff ff       	call   c0024cb4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024eef:	83 c4 14             	add    esp,0x14
c0024ef2:	53                   	push   ebx
c0024ef3:	e8 72 fd ff ff       	call   c0024c6a <SATAPI::diskRemoved()>
c0024ef8:	83 c4 24             	add    esp,0x24
c0024efb:	31 c0                	xor    eax,eax
c0024efd:	5b                   	pop    ebx
c0024efe:	5f                   	pop    edi
c0024eff:	c3                   	ret    

c0024f00 <SATAPI::detectMedia()>:
c0024f00:	56                   	push   esi
c0024f01:	53                   	push   ebx
c0024f02:	83 ec 28             	sub    esp,0x28
c0024f05:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0024f09:	6a 0c                	push   0xc
c0024f0b:	6a 00                	push   0x0
c0024f0d:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0024f11:	56                   	push   esi
c0024f12:	e8 61 b8 fd ff       	call   c0000778 <memset>
c0024f17:	83 c4 0c             	add    esp,0xc
c0024f1a:	6a 00                	push   0x0
c0024f1c:	6a 00                	push   0x0
c0024f1e:	6a 00                	push   0x0
c0024f20:	6a 00                	push   0x0
c0024f22:	6a 00                	push   0x0
c0024f24:	56                   	push   esi
c0024f25:	53                   	push   ebx
c0024f26:	e8 89 fd ff ff       	call   c0024cb4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024f2b:	83 c4 1c             	add    esp,0x1c
c0024f2e:	6a 0c                	push   0xc
c0024f30:	6a 00                	push   0x0
c0024f32:	56                   	push   esi
c0024f33:	e8 40 b8 fd ff       	call   c0000778 <memset>
c0024f38:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0024f3d:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0024f42:	83 c4 0c             	add    esp,0xc
c0024f45:	6a 01                	push   0x1
c0024f47:	8d 44 24 16          	lea    eax,[esp+0x16]
c0024f4b:	50                   	push   eax
c0024f4c:	6a 00                	push   0x0
c0024f4e:	6a 00                	push   0x0
c0024f50:	6a 12                	push   0x12
c0024f52:	56                   	push   esi
c0024f53:	53                   	push   ebx
c0024f54:	e8 5b fd ff ff       	call   c0024cb4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0024f59:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0024f5d:	83 c4 20             	add    esp,0x20
c0024f60:	83 e0 7f             	and    eax,0x7f
c0024f63:	3c 70                	cmp    al,0x70
c0024f65:	74 15                	je     c0024f7c <SATAPI::detectMedia()+0x7c>
c0024f67:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024f6e:	75 0c                	jne    c0024f7c <SATAPI::detectMedia()+0x7c>
c0024f70:	83 ec 0c             	sub    esp,0xc
c0024f73:	53                   	push   ebx
c0024f74:	e8 0d fd ff ff       	call   c0024c86 <SATAPI::diskInserted()>
c0024f79:	83 c4 10             	add    esp,0x10
c0024f7c:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0024f80:	83 e0 0f             	and    eax,0xf
c0024f83:	3c 02                	cmp    al,0x2
c0024f85:	75 1b                	jne    c0024fa2 <SATAPI::detectMedia()+0xa2>
c0024f87:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0024f8c:	75 2d                	jne    c0024fbb <SATAPI::detectMedia()+0xbb>
c0024f8e:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024f95:	74 24                	je     c0024fbb <SATAPI::detectMedia()+0xbb>
c0024f97:	83 ec 0c             	sub    esp,0xc
c0024f9a:	53                   	push   ebx
c0024f9b:	e8 ca fc ff ff       	call   c0024c6a <SATAPI::diskRemoved()>
c0024fa0:	eb 16                	jmp    c0024fb8 <SATAPI::detectMedia()+0xb8>
c0024fa2:	84 c0                	test   al,al
c0024fa4:	75 15                	jne    c0024fbb <SATAPI::detectMedia()+0xbb>
c0024fa6:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0024fad:	75 0c                	jne    c0024fbb <SATAPI::detectMedia()+0xbb>
c0024faf:	83 ec 0c             	sub    esp,0xc
c0024fb2:	53                   	push   ebx
c0024fb3:	e8 ce fc ff ff       	call   c0024c86 <SATAPI::diskInserted()>
c0024fb8:	83 c4 10             	add    esp,0x10
c0024fbb:	83 c4 24             	add    esp,0x24
c0024fbe:	5b                   	pop    ebx
c0024fbf:	5e                   	pop    esi
c0024fc0:	c3                   	ret    
c0024fc1:	90                   	nop

c0024fc2 <SATAPI::open(int, int, void*)>:
c0024fc2:	56                   	push   esi
c0024fc3:	53                   	push   ebx
c0024fc4:	50                   	push   eax
c0024fc5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024fc9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024fcd:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0024fd7:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0024fdd:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024fe7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0024feb:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0024ff5:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0024ffb:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025002:	e8 2e af fe ff       	call   c000ff35 <Phys::allocatePage()>
c0025007:	89 c6                	mov    esi,eax
c0025009:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c002500f:	81 c6 00 10 00 00    	add    esi,0x1000
c0025015:	e8 1b af fe ff       	call   c000ff35 <Phys::allocatePage()>
c002501a:	39 c6                	cmp    esi,eax
c002501c:	74 10                	je     c002502e <SATAPI::open(int, int, void*)+0x6c>
c002501e:	83 ec 0c             	sub    esp,0xc
c0025021:	68 5f cb 02 c0       	push   0xc002cb5f
c0025026:	e8 c2 51 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c002502b:	83 c4 10             	add    esp,0x10
c002502e:	83 ec 0c             	sub    esp,0xc
c0025031:	6a 02                	push   0x2
c0025033:	e8 49 cb fe ff       	call   c0011b81 <Virt::allocateKernelVirtualPages(int)>
c0025038:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c002503e:	e8 ce cc fe ff       	call   c0011d11 <Virt::getAKernelVAS()>
c0025043:	6a 03                	push   0x3
c0025045:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c002504b:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025051:	50                   	push   eax
c0025052:	e8 f5 d1 fe ff       	call   c001224c <VAS::mapPage(unsigned long, unsigned long, int)>
c0025057:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c002505e:	83 c4 14             	add    esp,0x14
c0025061:	53                   	push   ebx
c0025062:	e8 99 fe ff ff       	call   c0024f00 <SATAPI::detectMedia()>
c0025067:	83 c4 14             	add    esp,0x14
c002506a:	31 c0                	xor    eax,eax
c002506c:	5b                   	pop    ebx
c002506d:	5e                   	pop    esi
c002506e:	c3                   	ret    
c002506f:	90                   	nop

c0025070 <SATAPI::read(unsigned long long, int, void*)>:
c0025070:	55                   	push   ebp
c0025071:	57                   	push   edi
c0025072:	56                   	push   esi
c0025073:	53                   	push   ebx
c0025074:	83 ec 1c             	sub    esp,0x1c
c0025077:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c002507b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002507f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025083:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c002508a:	74 19                	je     c00250a5 <SATAPI::read(unsigned long long, int, void*)+0x35>
c002508c:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025091:	7e 2e                	jle    c00250c1 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025093:	83 ec 0c             	sub    esp,0xc
c0025096:	68 75 cb 02 c0       	push   0xc002cb75
c002509b:	e8 4d 51 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c00250a0:	83 c4 10             	add    esp,0x10
c00250a3:	eb 1c                	jmp    c00250c1 <SATAPI::read(unsigned long long, int, void*)+0x51>
c00250a5:	83 ec 0c             	sub    esp,0xc
c00250a8:	55                   	push   ebp
c00250a9:	e8 52 fe ff ff       	call   c0024f00 <SATAPI::detectMedia()>
c00250ae:	83 c4 10             	add    esp,0x10
c00250b1:	b8 02 00 00 00       	mov    eax,0x2
c00250b6:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c00250bd:	75 cd                	jne    c002508c <SATAPI::read(unsigned long long, int, void*)+0x1c>
c00250bf:	eb 49                	jmp    c002510a <SATAPI::read(unsigned long long, int, void*)+0x9a>
c00250c1:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00250c5:	b9 03 00 00 00       	mov    ecx,0x3
c00250ca:	fc                   	cld    
c00250cb:	31 c0                	xor    eax,eax
c00250cd:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c00250cf:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c00250d4:	89 d8                	mov    eax,ebx
c00250d6:	86 e0                	xchg   al,ah
c00250d8:	c1 c0 10             	rol    eax,0x10
c00250db:	86 e0                	xchg   al,ah
c00250dd:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c00250e1:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c00250e5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c00250e9:	50                   	push   eax
c00250ea:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00250ee:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c00250f2:	56                   	push   esi
c00250f3:	53                   	push   ebx
c00250f4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00250f8:	c1 e0 0b             	shl    eax,0xb
c00250fb:	50                   	push   eax
c00250fc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025100:	50                   	push   eax
c0025101:	55                   	push   ebp
c0025102:	e8 ad fb ff ff       	call   c0024cb4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025107:	83 c4 20             	add    esp,0x20
c002510a:	83 c4 1c             	add    esp,0x1c
c002510d:	5b                   	pop    ebx
c002510e:	5e                   	pop    esi
c002510f:	5f                   	pop    edi
c0025110:	5d                   	pop    ebp
c0025111:	c3                   	ret    

c0025112 <AVX::open(int, int, void*)>:
c0025112:	83 ec 0c             	sub    esp,0xc
c0025115:	e8 3e 11 00 00       	call   c0026258 <avxInit>
c002511a:	b8 00 00 00 00       	mov    eax,0x0
c002511f:	83 c4 0c             	add    esp,0xc
c0025122:	c3                   	ret    
c0025123:	90                   	nop

c0025124 <AVX::close(int, int, void*)>:
c0025124:	83 ec 0c             	sub    esp,0xc
c0025127:	e8 2d 11 00 00       	call   c0026259 <avxClose>
c002512c:	b8 00 00 00 00       	mov    eax,0x0
c0025131:	83 c4 0c             	add    esp,0xc
c0025134:	c3                   	ret    
c0025135:	90                   	nop

c0025136 <AVX::available()>:
c0025136:	83 ec 0c             	sub    esp,0xc
c0025139:	e8 12 11 00 00       	call   c0026250 <avxDetect>
c002513e:	85 c0                	test   eax,eax
c0025140:	0f 95 c0             	setne  al
c0025143:	83 c4 0c             	add    esp,0xc
c0025146:	c3                   	ret    
c0025147:	90                   	nop

c0025148 <AVX::save(void*)>:
c0025148:	83 ec 0c             	sub    esp,0xc
c002514b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002514f:	83 ec 0c             	sub    esp,0xc
c0025152:	50                   	push   eax
c0025153:	e8 fe 10 00 00       	call   c0026256 <avxSave>
c0025158:	83 c4 10             	add    esp,0x10
c002515b:	90                   	nop
c002515c:	83 c4 0c             	add    esp,0xc
c002515f:	c3                   	ret    

c0025160 <AVX::load(void*)>:
c0025160:	83 ec 0c             	sub    esp,0xc
c0025163:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025167:	83 ec 0c             	sub    esp,0xc
c002516a:	50                   	push   eax
c002516b:	e8 e7 10 00 00       	call   c0026257 <avxLoad>
c0025170:	83 c4 10             	add    esp,0x10
c0025173:	90                   	nop
c0025174:	83 c4 0c             	add    esp,0xc
c0025177:	c3                   	ret    

c0025178 <AVX::AVX()>:
c0025178:	83 ec 0c             	sub    esp,0xc
c002517b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002517f:	83 ec 08             	sub    esp,0x8
c0025182:	68 d8 cb 02 c0       	push   0xc002cbd8
c0025187:	50                   	push   eax
c0025188:	e8 0d f3 fe ff       	call   c001449a <FPU::FPU(char const*)>
c002518d:	83 c4 10             	add    esp,0x10
c0025190:	ba e8 cb 02 c0       	mov    edx,0xc002cbe8
c0025195:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025199:	89 10                	mov    DWORD PTR [eax],edx
c002519b:	90                   	nop
c002519c:	83 c4 0c             	add    esp,0xc
c002519f:	c3                   	ret    

c00251a0 <MMX::available()>:
c00251a0:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c00251a5:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00251ab:	83 e0 20             	and    eax,0x20
c00251ae:	84 c0                	test   al,al
c00251b0:	0f 95 c0             	setne  al
c00251b3:	c3                   	ret    

c00251b4 <MMX::open(int, int, void*)>:
c00251b4:	83 ec 0c             	sub    esp,0xc
c00251b7:	e8 20 11 00 00       	call   c00262dc <x87Init>
c00251bc:	b8 00 00 00 00       	mov    eax,0x0
c00251c1:	83 c4 0c             	add    esp,0xc
c00251c4:	c3                   	ret    
c00251c5:	90                   	nop

c00251c6 <MMX::close(int, int, void*)>:
c00251c6:	83 ec 0c             	sub    esp,0xc
c00251c9:	e8 28 11 00 00       	call   c00262f6 <x87Close>
c00251ce:	b8 00 00 00 00       	mov    eax,0x0
c00251d3:	83 c4 0c             	add    esp,0xc
c00251d6:	c3                   	ret    
c00251d7:	90                   	nop

c00251d8 <MMX::save(void*)>:
c00251d8:	83 ec 0c             	sub    esp,0xc
c00251db:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00251df:	83 ec 0c             	sub    esp,0xc
c00251e2:	50                   	push   eax
c00251e3:	e8 e9 10 00 00       	call   c00262d1 <x87Save>
c00251e8:	83 c4 10             	add    esp,0x10
c00251eb:	90                   	nop
c00251ec:	83 c4 0c             	add    esp,0xc
c00251ef:	c3                   	ret    

c00251f0 <MMX::load(void*)>:
c00251f0:	83 ec 0c             	sub    esp,0xc
c00251f3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00251f7:	83 ec 0c             	sub    esp,0xc
c00251fa:	50                   	push   eax
c00251fb:	e8 d7 10 00 00       	call   c00262d7 <x87Load>
c0025200:	83 c4 10             	add    esp,0x10
c0025203:	90                   	nop
c0025204:	83 c4 0c             	add    esp,0xc
c0025207:	c3                   	ret    

c0025208 <MMX::MMX()>:
c0025208:	83 ec 0c             	sub    esp,0xc
c002520b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002520f:	83 ec 08             	sub    esp,0x8
c0025212:	68 18 cc 02 c0       	push   0xc002cc18
c0025217:	50                   	push   eax
c0025218:	e8 7d f2 fe ff       	call   c001449a <FPU::FPU(char const*)>
c002521d:	83 c4 10             	add    esp,0x10
c0025220:	ba 28 cc 02 c0       	mov    edx,0xc002cc28
c0025225:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025229:	89 10                	mov    DWORD PTR [eax],edx
c002522b:	90                   	nop
c002522c:	83 c4 0c             	add    esp,0xc
c002522f:	c3                   	ret    

c0025230 <SSE::open(int, int, void*)>:
c0025230:	83 ec 0c             	sub    esp,0xc
c0025233:	e8 5c 10 00 00       	call   c0026294 <sseInit>
c0025238:	b8 00 00 00 00       	mov    eax,0x0
c002523d:	83 c4 0c             	add    esp,0xc
c0025240:	c3                   	ret    
c0025241:	90                   	nop

c0025242 <SSE::close(int, int, void*)>:
c0025242:	83 ec 0c             	sub    esp,0xc
c0025245:	e8 5a 10 00 00       	call   c00262a4 <sseClose>
c002524a:	b8 00 00 00 00       	mov    eax,0x0
c002524f:	83 c4 0c             	add    esp,0xc
c0025252:	c3                   	ret    
c0025253:	90                   	nop

c0025254 <SSE::available()>:
c0025254:	83 ec 1c             	sub    esp,0x1c
c0025257:	e8 14 10 00 00       	call   c0026270 <absolutelyNoChanceInHell>
c002525c:	85 c0                	test   eax,eax
c002525e:	0f 95 c0             	setne  al
c0025261:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025265:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025269:	83 c4 1c             	add    esp,0x1c
c002526c:	c3                   	ret    
c002526d:	90                   	nop

c002526e <SSE::save(void*)>:
c002526e:	83 ec 0c             	sub    esp,0xc
c0025271:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025275:	83 ec 0c             	sub    esp,0xc
c0025278:	50                   	push   eax
c0025279:	e8 0a 10 00 00       	call   c0026288 <sseSave>
c002527e:	83 c4 10             	add    esp,0x10
c0025281:	90                   	nop
c0025282:	83 c4 0c             	add    esp,0xc
c0025285:	c3                   	ret    

c0025286 <SSE::load(void*)>:
c0025286:	83 ec 0c             	sub    esp,0xc
c0025289:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002528d:	83 ec 0c             	sub    esp,0xc
c0025290:	50                   	push   eax
c0025291:	e8 f8 0f 00 00       	call   c002628e <sseLoad>
c0025296:	83 c4 10             	add    esp,0x10
c0025299:	90                   	nop
c002529a:	83 c4 0c             	add    esp,0xc
c002529d:	c3                   	ret    

c002529e <SSE::SSE()>:
c002529e:	83 ec 0c             	sub    esp,0xc
c00252a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252a5:	83 ec 08             	sub    esp,0x8
c00252a8:	68 58 cc 02 c0       	push   0xc002cc58
c00252ad:	50                   	push   eax
c00252ae:	e8 e7 f1 fe ff       	call   c001449a <FPU::FPU(char const*)>
c00252b3:	83 c4 10             	add    esp,0x10
c00252b6:	ba 68 cc 02 c0       	mov    edx,0xc002cc68
c00252bb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00252bf:	89 10                	mov    DWORD PTR [eax],edx
c00252c1:	90                   	nop
c00252c2:	83 c4 0c             	add    esp,0xc
c00252c5:	c3                   	ret    

c00252c6 <x87::open(int, int, void*)>:
c00252c6:	83 ec 0c             	sub    esp,0xc
c00252c9:	e8 0e 10 00 00       	call   c00262dc <x87Init>
c00252ce:	b8 00 00 00 00       	mov    eax,0x0
c00252d3:	83 c4 0c             	add    esp,0xc
c00252d6:	c3                   	ret    
c00252d7:	90                   	nop

c00252d8 <x87::close(int, int, void*)>:
c00252d8:	83 ec 0c             	sub    esp,0xc
c00252db:	e8 16 10 00 00       	call   c00262f6 <x87Close>
c00252e0:	b8 00 00 00 00       	mov    eax,0x0
c00252e5:	83 c4 0c             	add    esp,0xc
c00252e8:	c3                   	ret    
c00252e9:	90                   	nop

c00252ea <x87::available()>:
c00252ea:	83 ec 0c             	sub    esp,0xc
c00252ed:	e8 c4 0f 00 00       	call   c00262b6 <x87Detect>
c00252f2:	85 c0                	test   eax,eax
c00252f4:	0f 95 c0             	setne  al
c00252f7:	83 c4 0c             	add    esp,0xc
c00252fa:	c3                   	ret    
c00252fb:	90                   	nop

c00252fc <x87::save(void*)>:
c00252fc:	83 ec 0c             	sub    esp,0xc
c00252ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025303:	83 ec 0c             	sub    esp,0xc
c0025306:	50                   	push   eax
c0025307:	e8 c5 0f 00 00       	call   c00262d1 <x87Save>
c002530c:	83 c4 10             	add    esp,0x10
c002530f:	90                   	nop
c0025310:	83 c4 0c             	add    esp,0xc
c0025313:	c3                   	ret    

c0025314 <x87::load(void*)>:
c0025314:	83 ec 0c             	sub    esp,0xc
c0025317:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002531b:	83 ec 0c             	sub    esp,0xc
c002531e:	50                   	push   eax
c002531f:	e8 b3 0f 00 00       	call   c00262d7 <x87Load>
c0025324:	83 c4 10             	add    esp,0x10
c0025327:	90                   	nop
c0025328:	83 c4 0c             	add    esp,0xc
c002532b:	c3                   	ret    

c002532c <x87::x87()>:
c002532c:	83 ec 0c             	sub    esp,0xc
c002532f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025333:	83 ec 08             	sub    esp,0x8
c0025336:	68 98 cc 02 c0       	push   0xc002cc98
c002533b:	50                   	push   eax
c002533c:	e8 59 f1 fe ff       	call   c001449a <FPU::FPU(char const*)>
c0025341:	83 c4 10             	add    esp,0x10
c0025344:	ba a8 cc 02 c0       	mov    edx,0xc002cca8
c0025349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002534d:	89 10                	mov    DWORD PTR [eax],edx
c002534f:	90                   	nop
c0025350:	83 c4 0c             	add    esp,0xc
c0025353:	c3                   	ret    

c0025354 <APIC::disable()>:
c0025354:	90                   	nop
c0025355:	c3                   	ret    

c0025356 <APIC::close(int, int, void*)>:
c0025356:	55                   	push   ebp
c0025357:	89 e5                	mov    ebp,esp
c0025359:	83 ec 08             	sub    esp,0x8
c002535c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002535f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025361:	83 c0 3c             	add    eax,0x3c
c0025364:	8b 00                	mov    eax,DWORD PTR [eax]
c0025366:	83 ec 0c             	sub    esp,0xc
c0025369:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002536c:	ff d0                	call   eax
c002536e:	83 c4 10             	add    esp,0x10
c0025371:	b8 00 00 00 00       	mov    eax,0x0
c0025376:	c9                   	leave  
c0025377:	c3                   	ret    

c0025378 <IOAPIC::close(int, int, void*)>:
c0025378:	b8 00 00 00 00       	mov    eax,0x0
c002537d:	c3                   	ret    

c002537e <APIC::io_wait()>:
c002537e:	eb 00                	jmp    c0025380 <APIC::io_wait()+0x2>
c0025380:	eb 00                	jmp    c0025382 <APIC::io_wait()+0x4>
c0025382:	90                   	nop
c0025383:	c3                   	ret    

c0025384 <APIC::getBase()>:
c0025384:	55                   	push   ebp
c0025385:	89 e5                	mov    ebp,esp
c0025387:	83 ec 18             	sub    esp,0x18
c002538a:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c002538f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025395:	83 e0 08             	and    eax,0x8
c0025398:	84 c0                	test   al,al
c002539a:	75 07                	jne    c00253a3 <APIC::getBase()+0x1f>
c002539c:	b8 00 00 00 00       	mov    eax,0x0
c00253a1:	eb 21                	jmp    c00253c4 <APIC::getBase()+0x40>
c00253a3:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c00253a8:	83 ec 08             	sub    esp,0x8
c00253ab:	6a 1b                	push   0x1b
c00253ad:	50                   	push   eax
c00253ae:	e8 35 9a fe ff       	call   c000ede8 <Computer::rdmsr(unsigned int)>
c00253b3:	83 c4 10             	add    esp,0x10
c00253b6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00253b9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c00253bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00253bf:	25 00 f0 ff ff       	and    eax,0xfffff000
c00253c4:	c9                   	leave  
c00253c5:	c3                   	ret    

c00253c6 <APIC::eoi(unsigned char)>:
c00253c6:	55                   	push   ebp
c00253c7:	89 e5                	mov    ebp,esp
c00253c9:	83 ec 28             	sub    esp,0x28
c00253cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00253cf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00253d2:	83 ec 0c             	sub    esp,0xc
c00253d5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00253d8:	e8 a7 ff ff ff       	call   c0025384 <APIC::getBase()>
c00253dd:	83 c4 10             	add    esp,0x10
c00253e0:	05 b0 00 00 00       	add    eax,0xb0
c00253e5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00253e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00253eb:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c00253f1:	90                   	nop
c00253f2:	c9                   	leave  
c00253f3:	c3                   	ret    

c00253f4 <APIC::open(int, int, void*)>:
c00253f4:	55                   	push   ebp
c00253f5:	89 e5                	mov    ebp,esp
c00253f7:	57                   	push   edi
c00253f8:	56                   	push   esi
c00253f9:	53                   	push   ebx
c00253fa:	83 ec 2c             	sub    esp,0x2c
c00253fd:	83 ec 0c             	sub    esp,0xc
c0025400:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025403:	e8 7c ff ff ff       	call   c0025384 <APIC::getBase()>
c0025408:	83 c4 10             	add    esp,0x10
c002540b:	89 c2                	mov    edx,eax
c002540d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025410:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025416:	0f b6 f8             	movzx  edi,al
c0025419:	89 d0                	mov    eax,edx
c002541b:	ba 00 00 00 00       	mov    edx,0x0
c0025420:	89 c1                	mov    ecx,eax
c0025422:	80 e5 ff             	and    ch,0xff
c0025425:	89 cb                	mov    ebx,ecx
c0025427:	0f b6 f2             	movzx  esi,dl
c002542a:	89 d8                	mov    eax,ebx
c002542c:	89 f2                	mov    edx,esi
c002542e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025431:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025434:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025438:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002543c:	83 e0 00             	and    eax,0x0
c002543f:	09 d0                	or     eax,edx
c0025441:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025445:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025448:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002544e:	8d 50 01             	lea    edx,[eax+0x1]
c0025451:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025454:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002545a:	0f b6 d0             	movzx  edx,al
c002545d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025460:	83 c2 08             	add    edx,0x8
c0025463:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0025467:	0f b6 c9             	movzx  ecx,cl
c002546a:	81 c9 00 00 01 00    	or     ecx,0x10000
c0025470:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025474:	83 ec 0c             	sub    esp,0xc
c0025477:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002547a:	e8 05 ff ff ff       	call   c0025384 <APIC::getBase()>
c002547f:	83 c4 10             	add    esp,0x10
c0025482:	05 f0 00 00 00       	add    eax,0xf0
c0025487:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002548a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002548d:	8b 00                	mov    eax,DWORD PTR [eax]
c002548f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0025492:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0025499:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c00254a0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00254a3:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00254a6:	89 10                	mov    DWORD PTR [eax],edx
c00254a8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c00254af:	a1 f0 08 03 c0       	mov    eax,ds:0xc00308f0
c00254b4:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c00254b7:	7d 7c                	jge    c0025535 <APIC::open(int, int, void*)+0x141>
c00254b9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00254bc:	8b 04 85 00 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf700]
c00254c3:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c00254c6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00254c9:	8b 04 85 00 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf700]
c00254d0:	c1 e8 08             	shr    eax,0x8
c00254d3:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00254d7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00254da:	8b 04 85 00 09 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcf700]
c00254e1:	c1 e8 18             	shr    eax,0x18
c00254e4:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00254e7:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00254eb:	75 40                	jne    c002552d <APIC::open(int, int, void*)+0x139>
c00254ed:	83 ec 0c             	sub    esp,0xc
c00254f0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00254f3:	e8 8c fe ff ff       	call   c0025384 <APIC::getBase()>
c00254f8:	83 c4 10             	add    esp,0x10
c00254fb:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00254ff:	75 07                	jne    c0025508 <APIC::open(int, int, void*)+0x114>
c0025501:	ba 60 03 00 00       	mov    edx,0x360
c0025506:	eb 05                	jmp    c002550d <APIC::open(int, int, void*)+0x119>
c0025508:	ba 50 03 00 00       	mov    edx,0x350
c002550d:	01 d0                	add    eax,edx
c002550f:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0025512:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025515:	8b 00                	mov    eax,DWORD PTR [eax]
c0025517:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002551a:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c0025521:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c0025525:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0025528:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c002552b:	89 10                	mov    DWORD PTR [eax],edx
c002552d:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0025530:	e9 7a ff ff ff       	jmp    c00254af <APIC::open(int, int, void*)+0xbb>
c0025535:	b8 00 00 00 00       	mov    eax,0x0
c002553a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002553d:	5b                   	pop    ebx
c002553e:	5e                   	pop    esi
c002553f:	5f                   	pop    edi
c0025540:	5d                   	pop    ebp
c0025541:	c3                   	ret    

c0025542 <IOAPIC::IOAPIC()>:
c0025542:	83 ec 0c             	sub    esp,0xc
c0025545:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025549:	83 ec 08             	sub    esp,0x8
c002554c:	68 d8 cc 02 c0       	push   0xc002ccd8
c0025551:	50                   	push   eax
c0025552:	e8 31 ec fe ff       	call   c0014188 <Device::Device(char const*)>
c0025557:	83 c4 10             	add    esp,0x10
c002555a:	ba 00 ce 02 c0       	mov    edx,0xc002ce00
c002555f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025563:	89 10                	mov    DWORD PTR [eax],edx
c0025565:	90                   	nop
c0025566:	83 c4 0c             	add    esp,0xc
c0025569:	c3                   	ret    

c002556a <APIC::APIC()>:
c002556a:	53                   	push   ebx
c002556b:	83 ec 18             	sub    esp,0x18
c002556e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0025572:	83 ec 08             	sub    esp,0x8
c0025575:	68 e0 cc 02 c0       	push   0xc002cce0
c002557a:	50                   	push   eax
c002557b:	e8 74 f3 fe ff       	call   c00148f4 <InterruptController::InterruptController(char const*)>
c0025580:	83 c4 10             	add    esp,0x10
c0025583:	ba b8 cd 02 c0       	mov    edx,0xc002cdb8
c0025588:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002558c:	89 10                	mov    DWORD PTR [eax],edx
c002558e:	a0 c0 23 03 c0       	mov    al,ds:0xc00323c0
c0025593:	83 f0 01             	xor    eax,0x1
c0025596:	84 c0                	test   al,al
c0025598:	0f 84 a1 00 00 00    	je     c002563f <APIC::APIC()+0xd5>
c002559e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c00255a3:	a0 a0 09 03 c0       	mov    al,ds:0xc00309a0
c00255a8:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c00255ac:	0f 83 86 00 00 00    	jae    c0025638 <APIC::APIC()+0xce>
c00255b2:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c00255ba:	83 ec 0c             	sub    esp,0xc
c00255bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00255c1:	e8 7a a2 fe ff       	call   c000f840 <malloc>
c00255c6:	83 c4 10             	add    esp,0x10
c00255c9:	89 c3                	mov    ebx,eax
c00255cb:	83 ec 0c             	sub    esp,0xc
c00255ce:	53                   	push   ebx
c00255cf:	e8 6e ff ff ff       	call   c0025542 <IOAPIC::IOAPIC()>
c00255d4:	83 c4 10             	add    esp,0x10
c00255d7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00255db:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00255e0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00255e4:	89 14 85 a0 23 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdc60],edx
c00255eb:	a1 80 23 03 c0       	mov    eax,ds:0xc0032380
c00255f0:	40                   	inc    eax
c00255f1:	a3 80 23 03 c0       	mov    ds:0xc0032380,eax
c00255f6:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c00255fb:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c0025601:	83 ec 08             	sub    esp,0x8
c0025604:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0025608:	50                   	push   eax
c0025609:	e8 8a e9 fe ff       	call   c0013f98 <Device::addChild(Device*)>
c002560e:	83 c4 10             	add    esp,0x10
c0025611:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025615:	8b 00                	mov    eax,DWORD PTR [eax]
c0025617:	83 c0 08             	add    eax,0x8
c002561a:	8b 00                	mov    eax,DWORD PTR [eax]
c002561c:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0025621:	6a 00                	push   0x0
c0025623:	6a 00                	push   0x0
c0025625:	52                   	push   edx
c0025626:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002562a:	ff d0                	call   eax
c002562c:	83 c4 10             	add    esp,0x10
c002562f:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0025633:	e9 6b ff ff ff       	jmp    c00255a3 <APIC::APIC()+0x39>
c0025638:	c6 05 c0 23 03 c0 01 	mov    BYTE PTR ds:0xc00323c0,0x1
c002563f:	90                   	nop
c0025640:	83 c4 18             	add    esp,0x18
c0025643:	5b                   	pop    ebx
c0025644:	c3                   	ret    
c0025645:	90                   	nop

c0025646 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0025646:	55                   	push   ebp
c0025647:	89 e5                	mov    ebp,esp
c0025649:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002564c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025652:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0025655:	72 1d                	jb     c0025674 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025657:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002565a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0025660:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025663:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0025669:	01 d0                	add    eax,edx
c002566b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002566e:	73 04                	jae    c0025674 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0025670:	b0 01                	mov    al,0x1
c0025672:	eb 02                	jmp    c0025676 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0025674:	b0 00                	mov    al,0x0
c0025676:	5d                   	pop    ebp
c0025677:	c3                   	ret    

c0025678 <IOAPIC::read(int)>:
c0025678:	55                   	push   ebp
c0025679:	89 e5                	mov    ebp,esp
c002567b:	83 ec 10             	sub    esp,0x10
c002567e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025681:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025687:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002568a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002568d:	0f b6 d0             	movzx  edx,al
c0025690:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025693:	89 10                	mov    DWORD PTR [eax],edx
c0025695:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025698:	83 c0 10             	add    eax,0x10
c002569b:	8b 00                	mov    eax,DWORD PTR [eax]
c002569d:	c9                   	leave  
c002569e:	c3                   	ret    
c002569f:	90                   	nop

c00256a0 <IOAPIC::open(int, int, void*)>:
c00256a0:	55                   	push   ebp
c00256a1:	89 e5                	mov    ebp,esp
c00256a3:	57                   	push   edi
c00256a4:	56                   	push   esi
c00256a5:	53                   	push   ebx
c00256a6:	83 ec 0c             	sub    esp,0xc
c00256a9:	83 ec 0c             	sub    esp,0xc
c00256ac:	68 0b cd 02 c0       	push   0xc002cd0b
c00256b1:	e8 bb d4 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c00256b6:	83 c4 10             	add    esp,0x10
c00256b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256bc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00256bf:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00256c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256c8:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00256ce:	8b 14 85 e0 09 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf620]
c00256d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256d8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00256de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256e1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00256e7:	8b 14 85 60 0a 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffcf5a0]
c00256ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256f1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00256f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00256fa:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0025700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025703:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025709:	0f b6 f8             	movzx  edi,al
c002570c:	89 d0                	mov    eax,edx
c002570e:	ba 00 00 00 00       	mov    edx,0x0
c0025713:	89 c1                	mov    ecx,eax
c0025715:	80 e5 ff             	and    ch,0xff
c0025718:	89 cb                	mov    ebx,ecx
c002571a:	0f b6 f2             	movzx  esi,dl
c002571d:	89 d8                	mov    eax,ebx
c002571f:	89 f2                	mov    edx,esi
c0025721:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025724:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025727:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c002572b:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002572f:	83 e0 00             	and    eax,0x0
c0025732:	09 d0                	or     eax,edx
c0025734:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025738:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002573b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025741:	8d 50 01             	lea    edx,[eax+0x1]
c0025744:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0025747:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002574d:	0f b6 d0             	movzx  edx,al
c0025750:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025753:	83 c2 08             	add    edx,0x8
c0025756:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002575a:	0f b6 c9             	movzx  ecx,cl
c002575d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0025763:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0025767:	83 ec 08             	sub    esp,0x8
c002576a:	6a 01                	push   0x1
c002576c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002576f:	e8 04 ff ff ff       	call   c0025678 <IOAPIC::read(int)>
c0025774:	83 c4 10             	add    esp,0x10
c0025777:	c1 f8 10             	sar    eax,0x10
c002577a:	0f b6 c0             	movzx  eax,al
c002577d:	8d 50 01             	lea    edx,[eax+0x1]
c0025780:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025783:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0025789:	b8 00 00 00 00       	mov    eax,0x0
c002578e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025791:	5b                   	pop    ebx
c0025792:	5e                   	pop    esi
c0025793:	5f                   	pop    edi
c0025794:	5d                   	pop    ebp
c0025795:	c3                   	ret    

c0025796 <IOAPIC::write(int, int)>:
c0025796:	55                   	push   ebp
c0025797:	89 e5                	mov    ebp,esp
c0025799:	83 ec 10             	sub    esp,0x10
c002579c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002579f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00257a5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c00257a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257ab:	0f b6 d0             	movzx  edx,al
c00257ae:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257b1:	89 10                	mov    DWORD PTR [eax],edx
c00257b3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c00257b6:	8d 50 10             	lea    edx,[eax+0x10]
c00257b9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00257bc:	89 02                	mov    DWORD PTR [edx],eax
c00257be:	90                   	nop
c00257bf:	c9                   	leave  
c00257c0:	c3                   	ret    
c00257c1:	90                   	nop

c00257c2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c00257c2:	55                   	push   ebp
c00257c3:	89 e5                	mov    ebp,esp
c00257c5:	53                   	push   ebx
c00257c6:	83 ec 2c             	sub    esp,0x2c
c00257c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00257cc:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c00257cf:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00257d2:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00257d5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00257d8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00257db:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00257de:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00257e1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00257e4:	88 d8                	mov    al,bl
c00257e6:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00257e9:	88 c8                	mov    al,cl
c00257eb:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00257ee:	88 d0                	mov    al,dl
c00257f0:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00257f3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00257f7:	83 c0 08             	add    eax,0x8
c00257fa:	01 c0                	add    eax,eax
c00257fc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00257ff:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0025803:	83 c0 08             	add    eax,0x8
c0025806:	01 c0                	add    eax,eax
c0025808:	40                   	inc    eax
c0025809:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002580c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002580f:	50                   	push   eax
c0025810:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025813:	e8 60 fe ff ff       	call   c0025678 <IOAPIC::read(int)>
c0025818:	83 c4 08             	add    esp,0x8
c002581b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002581e:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c0025825:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0025828:	c1 e0 18             	shl    eax,0x18
c002582b:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c002582e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025831:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0025834:	52                   	push   edx
c0025835:	50                   	push   eax
c0025836:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025839:	e8 58 ff ff ff       	call   c0025796 <IOAPIC::write(int, int)>
c002583e:	83 c4 0c             	add    esp,0xc
c0025841:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025844:	50                   	push   eax
c0025845:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025848:	e8 2b fe ff ff       	call   c0025678 <IOAPIC::read(int)>
c002584d:	83 c4 08             	add    esp,0x8
c0025850:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025853:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002585a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0025861:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0025868:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002586c:	74 09                	je     c0025877 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002586e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0025875:	eb 07                	jmp    c002587e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0025877:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002587e:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0025882:	74 09                	je     c002588d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0025884:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002588b:	eb 07                	jmp    c0025894 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002588d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0025894:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002589b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002589f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c00258a2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00258a5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00258a8:	52                   	push   edx
c00258a9:	50                   	push   eax
c00258aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00258ad:	e8 e4 fe ff ff       	call   c0025796 <IOAPIC::write(int, int)>
c00258b2:	83 c4 0c             	add    esp,0xc
c00258b5:	90                   	nop
c00258b6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c00258b9:	c9                   	leave  
c00258ba:	c3                   	ret    
c00258bb:	90                   	nop

c00258bc <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00258bc:	55                   	push   ebp
c00258bd:	89 e5                	mov    ebp,esp
c00258bf:	57                   	push   edi
c00258c0:	56                   	push   esi
c00258c1:	53                   	push   ebx
c00258c2:	83 ec 2c             	sub    esp,0x2c
c00258c5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00258c8:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00258cb:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00258cf:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00258d3:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00258d7:	74 5a                	je     c0025933 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00258d9:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00258dd:	7f 44                	jg     c0025923 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00258df:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258e2:	05 60 d2 02 c0       	add    eax,0xc002d260
c00258e7:	8a 00                	mov    al,BYTE PTR [eax]
c00258e9:	0f b6 c0             	movzx  eax,al
c00258ec:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00258ef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00258f2:	66 8b 84 00 80 09 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf680]
c00258fa:	0f b7 c0             	movzx  eax,ax
c00258fd:	83 e0 02             	and    eax,0x2
c0025900:	85 c0                	test   eax,eax
c0025902:	74 04                	je     c0025908 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c0025904:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c0025908:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002590b:	66 8b 84 00 80 09 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffcf680]
c0025913:	0f b7 c0             	movzx  eax,ax
c0025916:	83 e0 08             	and    eax,0x8
c0025919:	85 c0                	test   eax,eax
c002591b:	74 16                	je     c0025933 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c002591d:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c0025921:	eb 10                	jmp    c0025933 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c0025923:	83 ec 0c             	sub    esp,0xc
c0025926:	68 1c cd 02 c0       	push   0xc002cd1c
c002592b:	e8 bd 48 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c0025930:	83 c4 10             	add    esp,0x10
c0025933:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0025937:	a1 80 23 03 c0       	mov    eax,ds:0xc0032380
c002593c:	83 ec 08             	sub    esp,0x8
c002593f:	50                   	push   eax
c0025940:	68 54 cd 02 c0       	push   0xc002cd54
c0025945:	e8 27 d2 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c002594a:	83 c4 10             	add    esp,0x10
c002594d:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0025954:	a1 80 23 03 c0       	mov    eax,ds:0xc0032380
c0025959:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c002595c:	7d 67                	jge    c00259c5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002595e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0025961:	8b 04 85 a0 23 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdc60]
c0025968:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002596b:	83 ec 08             	sub    esp,0x8
c002596e:	52                   	push   edx
c002596f:	50                   	push   eax
c0025970:	e8 d1 fc ff ff       	call   c0025646 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0025975:	83 c4 10             	add    esp,0x10
c0025978:	84 c0                	test   al,al
c002597a:	74 44                	je     c00259c0 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002597c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002597f:	8b 1c 85 a0 23 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcdc60]
c0025986:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002598a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002598d:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0025991:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025994:	83 c0 20             	add    eax,0x20
c0025997:	0f b6 f0             	movzx  esi,al
c002599a:	b8 00 00 00 00       	mov    eax,0x0
c002599f:	99                   	cdq    
c00259a0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00259a3:	0f b6 c9             	movzx  ecx,cl
c00259a6:	83 ec 04             	sub    esp,0x4
c00259a9:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c00259ac:	57                   	push   edi
c00259ad:	56                   	push   esi
c00259ae:	52                   	push   edx
c00259af:	50                   	push   eax
c00259b0:	51                   	push   ecx
c00259b1:	53                   	push   ebx
c00259b2:	e8 0b fe ff ff       	call   c00257c2 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c00259b7:	83 c4 20             	add    esp,0x20
c00259ba:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c00259be:	eb 05                	jmp    c00259c5 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c00259c0:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c00259c3:	eb 8f                	jmp    c0025954 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c00259c5:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c00259c8:	83 f0 01             	xor    eax,0x1
c00259cb:	84 c0                	test   al,al
c00259cd:	74 10                	je     c00259df <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c00259cf:	83 ec 0c             	sub    esp,0xc
c00259d2:	68 6b cd 02 c0       	push   0xc002cd6b
c00259d7:	e8 11 48 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c00259dc:	83 c4 10             	add    esp,0x10
c00259df:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00259e3:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00259ea:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00259ee:	7f 65                	jg     c0025a55 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00259f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00259f3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00259f6:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00259fd:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a00:	01 ca                	add    edx,ecx
c0025a02:	83 c2 54             	add    edx,0x54
c0025a05:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c0025a09:	85 c0                	test   eax,eax
c0025a0b:	75 43                	jne    c0025a50 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c0025a0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a10:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a13:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025a1a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a1d:	01 ca                	add    edx,ecx
c0025a1f:	8d 4a 54             	lea    ecx,[edx+0x54]
c0025a22:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0025a25:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025a29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025a2c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0025a2f:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0025a36:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025a39:	01 ca                	add    edx,ecx
c0025a3b:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0025a41:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0025a44:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0025a48:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025a4b:	83 e8 20             	sub    eax,0x20
c0025a4e:	eb 1a                	jmp    c0025a6a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0025a50:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0025a53:	eb 95                	jmp    c00259ea <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0025a55:	83 ec 0c             	sub    esp,0xc
c0025a58:	68 78 cd 02 c0       	push   0xc002cd78
c0025a5d:	e8 8b 47 ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c0025a62:	83 c4 10             	add    esp,0x10
c0025a65:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0025a6a:	8d 65 f4             	lea    esp,[ebp-0xc]
c0025a6d:	5b                   	pop    ebx
c0025a6e:	5e                   	pop    esi
c0025a6f:	5f                   	pop    edi
c0025a70:	5d                   	pop    ebp
c0025a71:	c3                   	ret    

c0025a72 <PIC::disable()>:
c0025a72:	55                   	push   ebp
c0025a73:	89 e5                	mov    ebp,esp
c0025a75:	83 ec 10             	sub    esp,0x10
c0025a78:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c0025a7e:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0025a82:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025a85:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025a89:	ee                   	out    dx,al
c0025a8a:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0025a90:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0025a94:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025a97:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0025a9b:	ee                   	out    dx,al
c0025a9c:	90                   	nop
c0025a9d:	c9                   	leave  
c0025a9e:	c3                   	ret    
c0025a9f:	90                   	nop

c0025aa0 <PIC::close(int, int, void*)>:
c0025aa0:	55                   	push   ebp
c0025aa1:	89 e5                	mov    ebp,esp
c0025aa3:	83 ec 08             	sub    esp,0x8
c0025aa6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025aa9:	8b 00                	mov    eax,DWORD PTR [eax]
c0025aab:	83 c0 3c             	add    eax,0x3c
c0025aae:	8b 00                	mov    eax,DWORD PTR [eax]
c0025ab0:	83 ec 0c             	sub    esp,0xc
c0025ab3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025ab6:	ff d0                	call   eax
c0025ab8:	83 c4 10             	add    esp,0x10
c0025abb:	b8 00 00 00 00       	mov    eax,0x0
c0025ac0:	c9                   	leave  
c0025ac1:	c3                   	ret    

c0025ac2 <PIC::PIC()>:
c0025ac2:	83 ec 0c             	sub    esp,0xc
c0025ac5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ac9:	83 ec 08             	sub    esp,0x8
c0025acc:	68 24 ce 02 c0       	push   0xc002ce24
c0025ad1:	50                   	push   eax
c0025ad2:	e8 1d ee fe ff       	call   c00148f4 <InterruptController::InterruptController(char const*)>
c0025ad7:	83 c4 10             	add    esp,0x10
c0025ada:	ba 50 ce 02 c0       	mov    edx,0xc002ce50
c0025adf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ae3:	89 10                	mov    DWORD PTR [eax],edx
c0025ae5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ae9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025aef:	0f b6 d0             	movzx  edx,al
c0025af2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025af6:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c0025afd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b01:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b07:	0f b6 d0             	movzx  edx,al
c0025b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b0e:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025b13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b17:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b1d:	8d 50 01             	lea    edx,[eax+0x1]
c0025b20:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025b24:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025b2a:	0f b6 d0             	movzx  edx,al
c0025b2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b31:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025b35:	83 e1 3f             	and    ecx,0x3f
c0025b38:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025b3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b40:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b46:	0f b6 d0             	movzx  edx,al
c0025b49:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b4d:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0025b54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b58:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b5e:	0f b6 d0             	movzx  edx,al
c0025b61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b65:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0025b6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b6e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0025b74:	8d 50 01             	lea    edx,[eax+0x1]
c0025b77:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025b7b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0025b81:	0f b6 d0             	movzx  edx,al
c0025b84:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025b88:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0025b8c:	83 e1 3f             	and    ecx,0x3f
c0025b8f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0025b93:	90                   	nop
c0025b94:	83 c4 0c             	add    esp,0xc
c0025b97:	c3                   	ret    

c0025b98 <PIC::ioWait()>:
c0025b98:	eb 00                	jmp    c0025b9a <PIC::ioWait()+0x2>
c0025b9a:	eb 00                	jmp    c0025b9c <PIC::ioWait()+0x4>
c0025b9c:	90                   	nop
c0025b9d:	c3                   	ret    

c0025b9e <PIC::getIRQReg(int)>:
c0025b9e:	55                   	push   ebp
c0025b9f:	89 e5                	mov    ebp,esp
c0025ba1:	83 ec 10             	sub    esp,0x10
c0025ba4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025ba7:	0f b6 c0             	movzx  eax,al
c0025baa:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025bb0:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0025bb3:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025bb6:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025bba:	ee                   	out    dx,al
c0025bbb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025bbe:	0f b6 c0             	movzx  eax,al
c0025bc1:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025bc7:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c0025bca:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025bcd:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025bd1:	ee                   	out    dx,al
c0025bd2:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c0025bd8:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c0025bdc:	89 c2                	mov    edx,eax
c0025bde:	ec                   	in     al,dx
c0025bdf:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c0025be2:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025be5:	0f b6 c0             	movzx  eax,al
c0025be8:	c1 e0 08             	shl    eax,0x8
c0025beb:	89 c1                	mov    ecx,eax
c0025bed:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c0025bf3:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c0025bf7:	89 c2                	mov    edx,eax
c0025bf9:	ec                   	in     al,dx
c0025bfa:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c0025bfd:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0025c00:	0f b6 c0             	movzx  eax,al
c0025c03:	09 c8                	or     eax,ecx
c0025c05:	c9                   	leave  
c0025c06:	c3                   	ret    
c0025c07:	90                   	nop

c0025c08 <PIC::eoi(unsigned char)>:
c0025c08:	55                   	push   ebp
c0025c09:	89 e5                	mov    ebp,esp
c0025c0b:	83 ec 14             	sub    esp,0x14
c0025c0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025c11:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c0025c14:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025c18:	75 1e                	jne    c0025c38 <PIC::eoi(unsigned char)+0x30>
c0025c1a:	6a 0b                	push   0xb
c0025c1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c1f:	e8 7a ff ff ff       	call   c0025b9e <PIC::getIRQReg(int)>
c0025c24:	83 c4 08             	add    esp,0x8
c0025c27:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0025c2b:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c0025c2f:	25 80 00 00 00       	and    eax,0x80
c0025c34:	85 c0                	test   eax,eax
c0025c36:	74 5f                	je     c0025c97 <PIC::eoi(unsigned char)+0x8f>
c0025c38:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c0025c3c:	75 2d                	jne    c0025c6b <PIC::eoi(unsigned char)+0x63>
c0025c3e:	6a 0b                	push   0xb
c0025c40:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025c43:	e8 56 ff ff ff       	call   c0025b9e <PIC::getIRQReg(int)>
c0025c48:	83 c4 08             	add    esp,0x8
c0025c4b:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c0025c4f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0025c52:	66 85 c0             	test   ax,ax
c0025c55:	78 14                	js     c0025c6b <PIC::eoi(unsigned char)+0x63>
c0025c57:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c0025c5d:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0025c61:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0025c64:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0025c68:	ee                   	out    dx,al
c0025c69:	eb 2d                	jmp    c0025c98 <PIC::eoi(unsigned char)+0x90>
c0025c6b:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c0025c6f:	76 12                	jbe    c0025c83 <PIC::eoi(unsigned char)+0x7b>
c0025c71:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0025c77:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c0025c7b:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025c7e:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025c82:	ee                   	out    dx,al
c0025c83:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0025c89:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c0025c8d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025c90:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025c94:	ee                   	out    dx,al
c0025c95:	eb 01                	jmp    c0025c98 <PIC::eoi(unsigned char)+0x90>
c0025c97:	90                   	nop
c0025c98:	c9                   	leave  
c0025c99:	c3                   	ret    

c0025c9a <PIC::remap()>:
c0025c9a:	55                   	push   ebp
c0025c9b:	89 e5                	mov    ebp,esp
c0025c9d:	83 ec 48             	sub    esp,0x48
c0025ca0:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0025ca7:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c0025cae:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0025cb4:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0025cb7:	89 c2                	mov    edx,eax
c0025cb9:	ec                   	in     al,dx
c0025cba:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c0025cbd:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0025cc0:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0025cc3:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0025cc9:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c0025ccc:	89 c2                	mov    edx,eax
c0025cce:	ec                   	in     al,dx
c0025ccf:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c0025cd2:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c0025cd5:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c0025cd8:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c0025cde:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c0025ce2:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c0025ce5:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c0025ce8:	ee                   	out    dx,al
c0025ce9:	83 ec 0c             	sub    esp,0xc
c0025cec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025cef:	e8 a4 fe ff ff       	call   c0025b98 <PIC::ioWait()>
c0025cf4:	83 c4 10             	add    esp,0x10
c0025cf7:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c0025cfd:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c0025d01:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c0025d04:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c0025d07:	ee                   	out    dx,al
c0025d08:	83 ec 0c             	sub    esp,0xc
c0025d0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d0e:	e8 85 fe ff ff       	call   c0025b98 <PIC::ioWait()>
c0025d13:	83 c4 10             	add    esp,0x10
c0025d16:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025d19:	0f b6 c0             	movzx  eax,al
c0025d1c:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c0025d22:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c0025d25:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c0025d28:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0025d2b:	ee                   	out    dx,al
c0025d2c:	83 ec 0c             	sub    esp,0xc
c0025d2f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d32:	e8 61 fe ff ff       	call   c0025b98 <PIC::ioWait()>
c0025d37:	83 c4 10             	add    esp,0x10
c0025d3a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025d3d:	0f b6 c0             	movzx  eax,al
c0025d40:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0025d46:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0025d49:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c0025d4c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0025d4f:	ee                   	out    dx,al
c0025d50:	83 ec 0c             	sub    esp,0xc
c0025d53:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d56:	e8 3d fe ff ff       	call   c0025b98 <PIC::ioWait()>
c0025d5b:	83 c4 10             	add    esp,0x10
c0025d5e:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0025d64:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0025d68:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c0025d6b:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c0025d6e:	ee                   	out    dx,al
c0025d6f:	83 ec 0c             	sub    esp,0xc
c0025d72:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d75:	e8 1e fe ff ff       	call   c0025b98 <PIC::ioWait()>
c0025d7a:	83 c4 10             	add    esp,0x10
c0025d7d:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0025d83:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0025d87:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c0025d8a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0025d8d:	ee                   	out    dx,al
c0025d8e:	83 ec 0c             	sub    esp,0xc
c0025d91:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025d94:	e8 ff fd ff ff       	call   c0025b98 <PIC::ioWait()>
c0025d99:	83 c4 10             	add    esp,0x10
c0025d9c:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0025da2:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0025da6:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0025da9:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0025dac:	ee                   	out    dx,al
c0025dad:	83 ec 0c             	sub    esp,0xc
c0025db0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025db3:	e8 e0 fd ff ff       	call   c0025b98 <PIC::ioWait()>
c0025db8:	83 c4 10             	add    esp,0x10
c0025dbb:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0025dc1:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0025dc5:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0025dc8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0025dcb:	ee                   	out    dx,al
c0025dcc:	83 ec 0c             	sub    esp,0xc
c0025dcf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025dd2:	e8 c1 fd ff ff       	call   c0025b98 <PIC::ioWait()>
c0025dd7:	83 c4 10             	add    esp,0x10
c0025dda:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c0025dde:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c0025de4:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c0025de7:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c0025dea:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0025ded:	ee                   	out    dx,al
c0025dee:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c0025df2:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c0025df8:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c0025dfb:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c0025dfe:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0025e01:	ee                   	out    dx,al
c0025e02:	90                   	nop
c0025e03:	c9                   	leave  
c0025e04:	c3                   	ret    
c0025e05:	90                   	nop

c0025e06 <PIC::open(int, int, void*)>:
c0025e06:	55                   	push   ebp
c0025e07:	89 e5                	mov    ebp,esp
c0025e09:	83 ec 18             	sub    esp,0x18
c0025e0c:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c0025e12:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c0025e16:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0025e19:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0025e1d:	ee                   	out    dx,al
c0025e1e:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c0025e24:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c0025e28:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c0025e2b:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0025e2f:	ee                   	out    dx,al
c0025e30:	83 ec 0c             	sub    esp,0xc
c0025e33:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025e36:	e8 5f fe ff ff       	call   c0025c9a <PIC::remap()>
c0025e3b:	83 c4 10             	add    esp,0x10
c0025e3e:	b8 00 00 00 00       	mov    eax,0x0
c0025e43:	c9                   	leave  
c0025e44:	c3                   	ret    
c0025e45:	90                   	nop

c0025e46 <APICTimer::close(int, int, void*)>:
c0025e46:	b8 00 00 00 00       	mov    eax,0x0
c0025e4b:	c3                   	ret    

c0025e4c <apicTimerHandler(regs*, void*)>:
c0025e4c:	83 ec 0c             	sub    esp,0xc
c0025e4f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e53:	8b 00                	mov    eax,DWORD PTR [eax]
c0025e55:	99                   	cdq    
c0025e56:	52                   	push   edx
c0025e57:	50                   	push   eax
c0025e58:	6a 00                	push   0x0
c0025e5a:	68 00 ca 9a 3b       	push   0x3b9aca00
c0025e5f:	e8 88 07 00 00       	call   c00265ec <__udivdi3>
c0025e64:	83 c4 10             	add    esp,0x10
c0025e67:	83 ec 08             	sub    esp,0x8
c0025e6a:	52                   	push   edx
c0025e6b:	50                   	push   eax
c0025e6c:	e8 a8 0a ff ff       	call   c0016919 <timerHandler(unsigned long long)>
c0025e71:	83 c4 10             	add    esp,0x10
c0025e74:	90                   	nop
c0025e75:	83 c4 0c             	add    esp,0xc
c0025e78:	c3                   	ret    
c0025e79:	90                   	nop

c0025e7a <APICTimer::write(int)>:
c0025e7a:	53                   	push   ebx
c0025e7b:	83 ec 28             	sub    esp,0x28
c0025e7e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025e82:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0025e86:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0025e8c:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0025e91:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025e97:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025e9d:	83 ec 0c             	sub    esp,0xc
c0025ea0:	50                   	push   eax
c0025ea1:	e8 de f4 ff ff       	call   c0025384 <APIC::getBase()>
c0025ea6:	83 c4 10             	add    esp,0x10
c0025ea9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0025ead:	a1 90 e6 02 c0       	mov    eax,ds:0xc002e690
c0025eb2:	8b 15 94 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e694
c0025eb8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0025ebc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0025ec0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ec4:	05 e0 03 00 00       	add    eax,0x3e0
c0025ec9:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025ecf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ed3:	05 80 03 00 00       	add    eax,0x380
c0025ed8:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0025ede:	fb                   	sti    
c0025edf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ee3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0025ee7:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0025eec:	83 d2 00             	adc    edx,0x0
c0025eef:	89 c1                	mov    ecx,eax
c0025ef1:	89 d3                	mov    ebx,edx
c0025ef3:	a1 90 e6 02 c0       	mov    eax,ds:0xc002e690
c0025ef8:	8b 15 94 e6 02 c0    	mov    edx,DWORD PTR ds:0xc002e694
c0025efe:	39 c8                	cmp    eax,ecx
c0025f00:	89 d0                	mov    eax,edx
c0025f02:	19 d8                	sbb    eax,ebx
c0025f04:	73 02                	jae    c0025f08 <APICTimer::write(int)+0x8e>
c0025f06:	eb d7                	jmp    c0025edf <APICTimer::write(int)+0x65>
c0025f08:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f0c:	05 20 03 00 00       	add    eax,0x320
c0025f11:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0025f17:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f1b:	05 90 03 00 00       	add    eax,0x390
c0025f20:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f22:	f7 d0                	not    eax
c0025f24:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0025f28:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025f2c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025f30:	ba 00 00 00 00       	mov    edx,0x0
c0025f35:	f7 f3                	div    ebx
c0025f37:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0025f3b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0025f3f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0025f45:	0d 00 00 02 00       	or     eax,0x20000
c0025f4a:	89 c2                	mov    edx,eax
c0025f4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f50:	05 20 03 00 00       	add    eax,0x320
c0025f55:	89 10                	mov    DWORD PTR [eax],edx
c0025f57:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f5b:	05 e0 03 00 00       	add    eax,0x3e0
c0025f60:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0025f66:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025f6a:	05 80 03 00 00       	add    eax,0x380
c0025f6f:	89 c2                	mov    edx,eax
c0025f71:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0025f75:	89 02                	mov    DWORD PTR [edx],eax
c0025f77:	90                   	nop
c0025f78:	83 c4 28             	add    esp,0x28
c0025f7b:	5b                   	pop    ebx
c0025f7c:	c3                   	ret    
c0025f7d:	90                   	nop

c0025f7e <APICTimer::open(int, int, void*)>:
c0025f7e:	57                   	push   edi
c0025f7f:	56                   	push   esi
c0025f80:	53                   	push   ebx
c0025f81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f85:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f87:	83 c0 24             	add    eax,0x24
c0025f8a:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f8c:	83 ec 08             	sub    esp,0x8
c0025f8f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f93:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0025f97:	ff d0                	call   eax
c0025f99:	83 c4 10             	add    esp,0x10
c0025f9c:	a1 08 e0 02 c0       	mov    eax,ds:0xc002e008
c0025fa1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0025fa7:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0025fad:	83 ec 0c             	sub    esp,0xc
c0025fb0:	50                   	push   eax
c0025fb1:	e8 ce f3 ff ff       	call   c0025384 <APIC::getBase()>
c0025fb6:	83 c4 10             	add    esp,0x10
c0025fb9:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0025fbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025fc3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025fc9:	0f b6 f8             	movzx  edi,al
c0025fcc:	89 d0                	mov    eax,edx
c0025fce:	ba 00 00 00 00       	mov    edx,0x0
c0025fd3:	89 c1                	mov    ecx,eax
c0025fd5:	80 e5 ff             	and    ch,0xff
c0025fd8:	89 cb                	mov    ebx,ecx
c0025fda:	0f b6 f2             	movzx  esi,dl
c0025fdd:	89 d8                	mov    eax,ebx
c0025fdf:	89 f2                	mov    edx,esi
c0025fe1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025fe5:	8d 5f 08             	lea    ebx,[edi+0x8]
c0025fe8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0025fec:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0025ff0:	83 e0 00             	and    eax,0x0
c0025ff3:	09 d0                	or     eax,edx
c0025ff5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0025ff9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ffd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026003:	8d 50 01             	lea    edx,[eax+0x1]
c0026006:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002600a:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026010:	0f b6 d0             	movzx  edx,al
c0026013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026017:	83 c2 08             	add    edx,0x8
c002601a:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002601e:	0f b6 c9             	movzx  ecx,cl
c0026021:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026027:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c002602b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002602f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026033:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026039:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002603d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026041:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026047:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002604b:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026051:	83 ec 0c             	sub    esp,0xc
c0026054:	51                   	push   ecx
c0026055:	6a 01                	push   0x1
c0026057:	68 4c 5e 02 c0       	push   0xc0025e4c
c002605c:	52                   	push   edx
c002605d:	50                   	push   eax
c002605e:	e8 b9 de fe ff       	call   c0013f1c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026063:	83 c4 20             	add    esp,0x20
c0026066:	89 c2                	mov    edx,eax
c0026068:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002606c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026072:	b8 00 00 00 00       	mov    eax,0x0
c0026077:	5b                   	pop    ebx
c0026078:	5e                   	pop    esi
c0026079:	5f                   	pop    edi
c002607a:	c3                   	ret    
c002607b:	90                   	nop

c002607c <APICTimer::APICTimer()>:
c002607c:	83 ec 0c             	sub    esp,0xc
c002607f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026083:	83 ec 08             	sub    esp,0x8
c0026086:	68 90 ce 02 c0       	push   0xc002ce90
c002608b:	50                   	push   eax
c002608c:	e8 f9 07 ff ff       	call   c001688a <Timer::Timer(char const*)>
c0026091:	83 c4 10             	add    esp,0x10
c0026094:	ba a4 ce 02 c0       	mov    edx,0xc002cea4
c0026099:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002609d:	89 10                	mov    DWORD PTR [eax],edx
c002609f:	90                   	nop
c00260a0:	83 c4 0c             	add    esp,0xc
c00260a3:	c3                   	ret    

c00260a4 <PIT::write(int)>:
c00260a4:	83 ec 10             	sub    esp,0x10
c00260a7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00260ab:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00260af:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00260b5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00260b9:	a3 c4 23 03 c0       	mov    ds:0xc00323c4,eax
c00260be:	b8 dc 34 12 00       	mov    eax,0x1234dc
c00260c3:	99                   	cdq    
c00260c4:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c00260c8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00260cc:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c00260d3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c00260d8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c00260dc:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c00260e1:	ee                   	out    dx,al
c00260e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00260e6:	0f b6 c0             	movzx  eax,al
c00260e9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c00260f0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c00260f4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00260f8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00260fd:	ee                   	out    dx,al
c00260fe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026102:	c1 f8 08             	sar    eax,0x8
c0026105:	0f b6 c0             	movzx  eax,al
c0026108:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c002610f:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026113:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026117:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c002611c:	ee                   	out    dx,al
c002611d:	90                   	nop
c002611e:	83 c4 10             	add    esp,0x10
c0026121:	c3                   	ret    

c0026122 <pitHandler(regs*, void*)>:
c0026122:	83 ec 0c             	sub    esp,0xc
c0026125:	a1 c4 23 03 c0       	mov    eax,ds:0xc00323c4
c002612a:	99                   	cdq    
c002612b:	52                   	push   edx
c002612c:	50                   	push   eax
c002612d:	6a 00                	push   0x0
c002612f:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026134:	e8 b3 04 00 00       	call   c00265ec <__udivdi3>
c0026139:	83 c4 10             	add    esp,0x10
c002613c:	83 ec 08             	sub    esp,0x8
c002613f:	52                   	push   edx
c0026140:	50                   	push   eax
c0026141:	e8 d3 07 ff ff       	call   c0016919 <timerHandler(unsigned long long)>
c0026146:	83 c4 10             	add    esp,0x10
c0026149:	90                   	nop
c002614a:	83 c4 0c             	add    esp,0xc
c002614d:	c3                   	ret    

c002614e <PIT::open(int, int, void*)>:
c002614e:	83 ec 0c             	sub    esp,0xc
c0026151:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026155:	8b 00                	mov    eax,DWORD PTR [eax]
c0026157:	83 c0 24             	add    eax,0x24
c002615a:	8b 00                	mov    eax,DWORD PTR [eax]
c002615c:	83 ec 08             	sub    esp,0x8
c002615f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026163:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026167:	ff d0                	call   eax
c0026169:	83 c4 10             	add    esp,0x10
c002616c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026170:	83 ec 0c             	sub    esp,0xc
c0026173:	6a 00                	push   0x0
c0026175:	6a 01                	push   0x1
c0026177:	68 22 61 02 c0       	push   0xc0026122
c002617c:	6a 00                	push   0x0
c002617e:	50                   	push   eax
c002617f:	e8 98 dd fe ff       	call   c0013f1c <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026184:	83 c4 20             	add    esp,0x20
c0026187:	89 c2                	mov    edx,eax
c0026189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002618d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026193:	b8 00 00 00 00       	mov    eax,0x0
c0026198:	83 c4 0c             	add    esp,0xc
c002619b:	c3                   	ret    

c002619c <PIT::close(int, int, void*)>:
c002619c:	83 ec 0c             	sub    esp,0xc
c002619f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261a3:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c00261ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261b1:	6a 01                	push   0x1
c00261b3:	68 22 61 02 c0       	push   0xc0026122
c00261b8:	6a 00                	push   0x0
c00261ba:	50                   	push   eax
c00261bb:	e8 9a dd fe ff       	call   c0013f5a <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c00261c0:	83 c4 10             	add    esp,0x10
c00261c3:	b8 00 00 00 00       	mov    eax,0x0
c00261c8:	83 c4 0c             	add    esp,0xc
c00261cb:	c3                   	ret    

c00261cc <PIT::PIT()>:
c00261cc:	83 ec 0c             	sub    esp,0xc
c00261cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261d3:	83 ec 08             	sub    esp,0x8
c00261d6:	68 cc ce 02 c0       	push   0xc002cecc
c00261db:	50                   	push   eax
c00261dc:	e8 a9 06 ff ff       	call   c001688a <Timer::Timer(char const*)>
c00261e1:	83 c4 10             	add    esp,0x10
c00261e4:	ba f4 ce 02 c0       	mov    edx,0xc002cef4
c00261e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261ed:	89 10                	mov    DWORD PTR [eax],edx
c00261ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00261f3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00261f9:	0f b6 d0             	movzx  edx,al
c00261fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026200:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026207:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002620b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026211:	0f b6 d0             	movzx  edx,al
c0026214:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026218:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c002621d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026221:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026227:	8d 50 01             	lea    edx,[eax+0x1]
c002622a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002622e:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026234:	0f b6 d0             	movzx  edx,al
c0026237:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002623b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002623f:	83 e1 3f             	and    ecx,0x3f
c0026242:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026246:	90                   	nop
c0026247:	83 c4 0c             	add    esp,0xc
c002624a:	c3                   	ret    
c002624b:	66 90                	xchg   ax,ax
c002624d:	66 90                	xchg   ax,ax
c002624f:	90                   	nop

c0026250 <avxDetect>:
c0026250:	b8 00 00 00 00       	mov    eax,0x0
c0026255:	c3                   	ret    

c0026256 <avxSave>:
c0026256:	c3                   	ret    

c0026257 <avxLoad>:
c0026257:	c3                   	ret    

c0026258 <avxInit>:
c0026258:	c3                   	ret    

c0026259 <avxClose>:
c0026259:	c3                   	ret    

c002625a <wouldSheSayYes>:
c002625a:	c3                   	ret    
c002625b:	49                   	dec    ecx
c002625c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026260:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026264:	75 20                	jne    c0026286 <sseDetect.noSSE+0x1>
c0026266:	4e                   	dec    esi
c0026267:	79 61                	jns    c00262ca <x87Detect+0x14>
c0026269:	68 2e 2e 2e 00       	push   0x2e2e2e
c002626e:	66 90                	xchg   ax,ax

c0026270 <absolutelyNoChanceInHell>:
c0026270:	b8 01 00 00 00       	mov    eax,0x1
c0026275:	0f a2                	cpuid  
c0026277:	f7 c2 00 00 00 02    	test   edx,0x2000000
c002627d:	74 06                	je     c0026285 <sseDetect.noSSE>
c002627f:	b8 01 00 00 00       	mov    eax,0x1
c0026284:	c3                   	ret    

c0026285 <sseDetect.noSSE>:
c0026285:	31 c0                	xor    eax,eax
c0026287:	c3                   	ret    

c0026288 <sseSave>:
c0026288:	0f ae 44 24 08       	fxsave [esp+0x8]
c002628d:	c3                   	ret    

c002628e <sseLoad>:
c002628e:	0f ae 4c 24 08       	fxrstor [esp+0x8]
c0026293:	c3                   	ret    

c0026294 <sseInit>:
c0026294:	e8 43 00 00 00       	call   c00262dc <x87Init>
c0026299:	0f 20 e0             	mov    eax,cr4
c002629c:	66 0d 00 06          	or     ax,0x600
c00262a0:	0f 22 e0             	mov    cr4,eax
c00262a3:	c3                   	ret    

c00262a4 <sseClose>:
c00262a4:	c3                   	ret    
c00262a5:	66 90                	xchg   ax,ax
c00262a7:	66 90                	xchg   ax,ax
c00262a9:	66 90                	xchg   ax,ax
c00262ab:	66 90                	xchg   ax,ax
c00262ad:	66 90                	xchg   ax,ax
c00262af:	90                   	nop

c00262b0 <value_37F>:
c00262b0:	7f 03                	jg     c00262b5 <value_37A+0x1>

c00262b2 <value_37E>:
c00262b2:	7e 03                	jle    c00262b7 <x87Detect+0x1>

c00262b4 <value_37A>:
c00262b4:	7a 03                	jp     c00262b9 <x87Detect+0x3>

c00262b6 <x87Detect>:
c00262b6:	b8 01 00 00 00       	mov    eax,0x1
c00262bb:	0f a2                	cpuid  
c00262bd:	f7 c2 01 00 00 00    	test   edx,0x1
c00262c3:	74 06                	je     c00262cb <x87Detect.nox87>
c00262c5:	b8 01 00 00 00       	mov    eax,0x1
c00262ca:	c3                   	ret    

c00262cb <x87Detect.nox87>:
c00262cb:	b8 00 00 00 00       	mov    eax,0x0
c00262d0:	c3                   	ret    

c00262d1 <x87Save>:
c00262d1:	9b dd 74 24 08       	fsave  [esp+0x8]
c00262d6:	c3                   	ret    

c00262d7 <x87Load>:
c00262d7:	dd 64 24 08          	frstor [esp+0x8]
c00262db:	c3                   	ret    

c00262dc <x87Init>:
c00262dc:	9b db e3             	finit  
c00262df:	0f 20 c0             	mov    eax,cr0
c00262e2:	66 25 fb ff          	and    ax,0xfffb
c00262e6:	66 0d 22 00          	or     ax,0x22
c00262ea:	0f 22 c0             	mov    cr0,eax
c00262ed:	0f 06                	clts   
c00262ef:	d9 2d b4 62 02 c0    	fldcw  WORD PTR ds:0xc00262b4
c00262f5:	c3                   	ret    

c00262f6 <x87Close>:
c00262f6:	c3                   	ret    
c00262f7:	90                   	nop

c00262f8 <__do_global_ctors_aux>:
c00262f8:	a1 3c 8e 02 c0       	mov    eax,ds:0xc0028e3c
c00262fd:	83 f8 ff             	cmp    eax,0xffffffff
c0026300:	74 1a                	je     c002631c <__do_global_ctors_aux+0x24>
c0026302:	55                   	push   ebp
c0026303:	89 e5                	mov    ebp,esp
c0026305:	53                   	push   ebx
c0026306:	52                   	push   edx
c0026307:	bb 3c 8e 02 c0       	mov    ebx,0xc0028e3c
c002630c:	ff d0                	call   eax
c002630e:	83 eb 04             	sub    ebx,0x4
c0026311:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026313:	83 f8 ff             	cmp    eax,0xffffffff
c0026316:	75 f4                	jne    c002630c <__do_global_ctors_aux+0x14>
c0026318:	58                   	pop    eax
c0026319:	5b                   	pop    ebx
c002631a:	5d                   	pop    ebp
c002631b:	c3                   	ret    
c002631c:	c3                   	ret    
c002631d:	66 90                	xchg   ax,ax
c002631f:	90                   	nop

c0026320 <__divdi3>:
c0026320:	55                   	push   ebp
c0026321:	57                   	push   edi
c0026322:	56                   	push   esi
c0026323:	53                   	push   ebx
c0026324:	83 ec 1c             	sub    esp,0x1c
c0026327:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c002632b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002632f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026332:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026336:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002633a:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c002633e:	85 db                	test   ebx,ebx
c0026340:	0f 88 8e 00 00 00    	js     c00263d4 <__divdi3+0xb4>
c0026346:	89 dd                	mov    ebp,ebx
c0026348:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026350:	89 d3                	mov    ebx,edx
c0026352:	85 d2                	test   edx,edx
c0026354:	79 0d                	jns    c0026363 <__divdi3+0x43>
c0026356:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c002635a:	f7 d8                	neg    eax
c002635c:	83 d2 00             	adc    edx,0x0
c002635f:	f7 da                	neg    edx
c0026361:	89 d3                	mov    ebx,edx
c0026363:	89 c7                	mov    edi,eax
c0026365:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026368:	85 db                	test   ebx,ebx
c002636a:	75 48                	jne    c00263b4 <__divdi3+0x94>
c002636c:	39 ef                	cmp    edi,ebp
c002636e:	76 24                	jbe    c0026394 <__divdi3+0x74>
c0026370:	89 ea                	mov    edx,ebp
c0026372:	f7 f7                	div    edi
c0026374:	89 c1                	mov    ecx,eax
c0026376:	31 f6                	xor    esi,esi
c0026378:	89 c8                	mov    eax,ecx
c002637a:	89 f2                	mov    edx,esi
c002637c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026380:	85 c9                	test   ecx,ecx
c0026382:	74 07                	je     c002638b <__divdi3+0x6b>
c0026384:	f7 d8                	neg    eax
c0026386:	83 d2 00             	adc    edx,0x0
c0026389:	f7 da                	neg    edx
c002638b:	83 c4 1c             	add    esp,0x1c
c002638e:	5b                   	pop    ebx
c002638f:	5e                   	pop    esi
c0026390:	5f                   	pop    edi
c0026391:	5d                   	pop    ebp
c0026392:	c3                   	ret    
c0026393:	90                   	nop
c0026394:	85 ff                	test   edi,edi
c0026396:	75 0b                	jne    c00263a3 <__divdi3+0x83>
c0026398:	b8 01 00 00 00       	mov    eax,0x1
c002639d:	31 d2                	xor    edx,edx
c002639f:	f7 f3                	div    ebx
c00263a1:	89 c7                	mov    edi,eax
c00263a3:	31 d2                	xor    edx,edx
c00263a5:	89 e8                	mov    eax,ebp
c00263a7:	f7 f7                	div    edi
c00263a9:	89 c6                	mov    esi,eax
c00263ab:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00263ae:	f7 f7                	div    edi
c00263b0:	89 c1                	mov    ecx,eax
c00263b2:	eb c4                	jmp    c0026378 <__divdi3+0x58>
c00263b4:	39 eb                	cmp    ebx,ebp
c00263b6:	77 3c                	ja     c00263f4 <__divdi3+0xd4>
c00263b8:	0f bd f3             	bsr    esi,ebx
c00263bb:	83 f6 1f             	xor    esi,0x1f
c00263be:	75 40                	jne    c0026400 <__divdi3+0xe0>
c00263c0:	39 eb                	cmp    ebx,ebp
c00263c2:	72 09                	jb     c00263cd <__divdi3+0xad>
c00263c4:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c00263c7:	0f 87 97 00 00 00    	ja     c0026464 <__divdi3+0x144>
c00263cd:	b9 01 00 00 00       	mov    ecx,0x1
c00263d2:	eb a4                	jmp    c0026378 <__divdi3+0x58>
c00263d4:	f7 d9                	neg    ecx
c00263d6:	83 d3 00             	adc    ebx,0x0
c00263d9:	f7 db                	neg    ebx
c00263db:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00263de:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c00263e2:	89 dd                	mov    ebp,ebx
c00263e4:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c00263ec:	e9 5f ff ff ff       	jmp    c0026350 <__divdi3+0x30>
c00263f1:	8d 76 00             	lea    esi,[esi+0x0]
c00263f4:	31 f6                	xor    esi,esi
c00263f6:	31 c9                	xor    ecx,ecx
c00263f8:	e9 7b ff ff ff       	jmp    c0026378 <__divdi3+0x58>
c00263fd:	8d 76 00             	lea    esi,[esi+0x0]
c0026400:	b8 20 00 00 00       	mov    eax,0x20
c0026405:	29 f0                	sub    eax,esi
c0026407:	89 f1                	mov    ecx,esi
c0026409:	d3 e3                	shl    ebx,cl
c002640b:	89 fa                	mov    edx,edi
c002640d:	88 c1                	mov    cl,al
c002640f:	d3 ea                	shr    edx,cl
c0026411:	09 da                	or     edx,ebx
c0026413:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026417:	89 f1                	mov    ecx,esi
c0026419:	d3 e7                	shl    edi,cl
c002641b:	89 eb                	mov    ebx,ebp
c002641d:	88 c1                	mov    cl,al
c002641f:	d3 eb                	shr    ebx,cl
c0026421:	89 f1                	mov    ecx,esi
c0026423:	d3 e5                	shl    ebp,cl
c0026425:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0026428:	88 c1                	mov    cl,al
c002642a:	d3 ea                	shr    edx,cl
c002642c:	09 d5                	or     ebp,edx
c002642e:	89 e8                	mov    eax,ebp
c0026430:	89 da                	mov    edx,ebx
c0026432:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c0026436:	89 d3                	mov    ebx,edx
c0026438:	89 c5                	mov    ebp,eax
c002643a:	f7 e7                	mul    edi
c002643c:	39 d3                	cmp    ebx,edx
c002643e:	72 18                	jb     c0026458 <__divdi3+0x138>
c0026440:	74 0a                	je     c002644c <__divdi3+0x12c>
c0026442:	89 e9                	mov    ecx,ebp
c0026444:	31 f6                	xor    esi,esi
c0026446:	e9 2d ff ff ff       	jmp    c0026378 <__divdi3+0x58>
c002644b:	90                   	nop
c002644c:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c002644f:	89 f1                	mov    ecx,esi
c0026451:	d3 e7                	shl    edi,cl
c0026453:	39 c7                	cmp    edi,eax
c0026455:	73 eb                	jae    c0026442 <__divdi3+0x122>
c0026457:	90                   	nop
c0026458:	8d 4d ff             	lea    ecx,[ebp-0x1]
c002645b:	31 f6                	xor    esi,esi
c002645d:	e9 16 ff ff ff       	jmp    c0026378 <__divdi3+0x58>
c0026462:	66 90                	xchg   ax,ax
c0026464:	31 c9                	xor    ecx,ecx
c0026466:	e9 0d ff ff ff       	jmp    c0026378 <__divdi3+0x58>
c002646b:	90                   	nop

c002646c <__moddi3>:
c002646c:	55                   	push   ebp
c002646d:	57                   	push   edi
c002646e:	56                   	push   esi
c002646f:	53                   	push   ebx
c0026470:	83 ec 2c             	sub    esp,0x2c
c0026473:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0026477:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c002647b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002647f:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0026483:	85 db                	test   ebx,ebx
c0026485:	0f 88 85 00 00 00    	js     c0026510 <__moddi3+0xa4>
c002648b:	89 de                	mov    esi,ebx
c002648d:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0026495:	89 d7                	mov    edi,edx
c0026497:	85 d2                	test   edx,edx
c0026499:	79 09                	jns    c00264a4 <__moddi3+0x38>
c002649b:	f7 d8                	neg    eax
c002649d:	83 d2 00             	adc    edx,0x0
c00264a0:	f7 da                	neg    edx
c00264a2:	89 d7                	mov    edi,edx
c00264a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00264a8:	89 cd                	mov    ebp,ecx
c00264aa:	85 ff                	test   edi,edi
c00264ac:	75 52                	jne    c0026500 <__moddi3+0x94>
c00264ae:	89 c3                	mov    ebx,eax
c00264b0:	39 f0                	cmp    eax,esi
c00264b2:	76 24                	jbe    c00264d8 <__moddi3+0x6c>
c00264b4:	89 c8                	mov    eax,ecx
c00264b6:	89 f2                	mov    edx,esi
c00264b8:	f7 f3                	div    ebx
c00264ba:	89 d6                	mov    esi,edx
c00264bc:	89 f0                	mov    eax,esi
c00264be:	31 d2                	xor    edx,edx
c00264c0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00264c4:	85 c9                	test   ecx,ecx
c00264c6:	74 07                	je     c00264cf <__moddi3+0x63>
c00264c8:	f7 d8                	neg    eax
c00264ca:	83 d2 00             	adc    edx,0x0
c00264cd:	f7 da                	neg    edx
c00264cf:	83 c4 2c             	add    esp,0x2c
c00264d2:	5b                   	pop    ebx
c00264d3:	5e                   	pop    esi
c00264d4:	5f                   	pop    edi
c00264d5:	5d                   	pop    ebp
c00264d6:	c3                   	ret    
c00264d7:	90                   	nop
c00264d8:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00264dc:	85 db                	test   ebx,ebx
c00264de:	75 0d                	jne    c00264ed <__moddi3+0x81>
c00264e0:	b8 01 00 00 00       	mov    eax,0x1
c00264e5:	31 d2                	xor    edx,edx
c00264e7:	f7 f7                	div    edi
c00264e9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00264ed:	89 f0                	mov    eax,esi
c00264ef:	31 d2                	xor    edx,edx
c00264f1:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00264f5:	f7 f7                	div    edi
c00264f7:	89 e8                	mov    eax,ebp
c00264f9:	f7 f7                	div    edi
c00264fb:	89 d6                	mov    esi,edx
c00264fd:	eb bd                	jmp    c00264bc <__moddi3+0x50>
c00264ff:	90                   	nop
c0026500:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0026504:	39 f7                	cmp    edi,esi
c0026506:	76 20                	jbe    c0026528 <__moddi3+0xbc>
c0026508:	89 c8                	mov    eax,ecx
c002650a:	89 f2                	mov    edx,esi
c002650c:	eb b2                	jmp    c00264c0 <__moddi3+0x54>
c002650e:	66 90                	xchg   ax,ax
c0026510:	f7 d9                	neg    ecx
c0026512:	83 d3 00             	adc    ebx,0x0
c0026515:	f7 db                	neg    ebx
c0026517:	89 de                	mov    esi,ebx
c0026519:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c0026521:	e9 6f ff ff ff       	jmp    c0026495 <__moddi3+0x29>
c0026526:	66 90                	xchg   ax,ax
c0026528:	0f bd c7             	bsr    eax,edi
c002652b:	83 f0 1f             	xor    eax,0x1f
c002652e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0026532:	75 24                	jne    c0026558 <__moddi3+0xec>
c0026534:	39 f7                	cmp    edi,esi
c0026536:	72 06                	jb     c002653e <__moddi3+0xd2>
c0026538:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c002653c:	77 0c                	ja     c002654a <__moddi3+0xde>
c002653e:	89 e9                	mov    ecx,ebp
c0026540:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0026544:	19 fe                	sbb    esi,edi
c0026546:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c002654a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002654e:	89 f2                	mov    edx,esi
c0026550:	e9 6b ff ff ff       	jmp    c00264c0 <__moddi3+0x54>
c0026555:	8d 76 00             	lea    esi,[esi+0x0]
c0026558:	b8 20 00 00 00       	mov    eax,0x20
c002655d:	89 c2                	mov    edx,eax
c002655f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0026563:	29 da                	sub    edx,ebx
c0026565:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0026569:	88 d9                	mov    cl,bl
c002656b:	d3 e7                	shl    edi,cl
c002656d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026571:	88 d1                	mov    cl,dl
c0026573:	d3 e8                	shr    eax,cl
c0026575:	09 c7                	or     edi,eax
c0026577:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c002657b:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c002657f:	89 d8                	mov    eax,ebx
c0026581:	88 d9                	mov    cl,bl
c0026583:	d3 e7                	shl    edi,cl
c0026585:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0026589:	89 f3                	mov    ebx,esi
c002658b:	88 d1                	mov    cl,dl
c002658d:	d3 eb                	shr    ebx,cl
c002658f:	89 c7                	mov    edi,eax
c0026591:	88 c1                	mov    cl,al
c0026593:	d3 e6                	shl    esi,cl
c0026595:	89 e8                	mov    eax,ebp
c0026597:	88 d1                	mov    cl,dl
c0026599:	d3 e8                	shr    eax,cl
c002659b:	09 f0                	or     eax,esi
c002659d:	89 f9                	mov    ecx,edi
c002659f:	d3 e5                	shl    ebp,cl
c00265a1:	89 da                	mov    edx,ebx
c00265a3:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c00265a7:	89 d3                	mov    ebx,edx
c00265a9:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00265ad:	89 c6                	mov    esi,eax
c00265af:	89 d1                	mov    ecx,edx
c00265b1:	39 d3                	cmp    ebx,edx
c00265b3:	72 27                	jb     c00265dc <__moddi3+0x170>
c00265b5:	74 21                	je     c00265d8 <__moddi3+0x16c>
c00265b7:	29 f5                	sub    ebp,esi
c00265b9:	19 cb                	sbb    ebx,ecx
c00265bb:	89 de                	mov    esi,ebx
c00265bd:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c00265c1:	d3 e6                	shl    esi,cl
c00265c3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00265c7:	89 f9                	mov    ecx,edi
c00265c9:	d3 ed                	shr    ebp,cl
c00265cb:	09 ee                	or     esi,ebp
c00265cd:	89 f0                	mov    eax,esi
c00265cf:	d3 eb                	shr    ebx,cl
c00265d1:	89 da                	mov    edx,ebx
c00265d3:	e9 e8 fe ff ff       	jmp    c00264c0 <__moddi3+0x54>
c00265d8:	39 c5                	cmp    ebp,eax
c00265da:	73 db                	jae    c00265b7 <__moddi3+0x14b>
c00265dc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00265e0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00265e4:	89 d1                	mov    ecx,edx
c00265e6:	89 c6                	mov    esi,eax
c00265e8:	eb cd                	jmp    c00265b7 <__moddi3+0x14b>
c00265ea:	66 90                	xchg   ax,ax

c00265ec <__udivdi3>:
c00265ec:	55                   	push   ebp
c00265ed:	57                   	push   edi
c00265ee:	56                   	push   esi
c00265ef:	53                   	push   ebx
c00265f0:	83 ec 1c             	sub    esp,0x1c
c00265f3:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00265f7:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00265fb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00265ff:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026603:	85 d2                	test   edx,edx
c0026605:	75 41                	jne    c0026648 <__udivdi3+0x5c>
c0026607:	39 f7                	cmp    edi,esi
c0026609:	76 15                	jbe    c0026620 <__udivdi3+0x34>
c002660b:	89 e8                	mov    eax,ebp
c002660d:	89 f2                	mov    edx,esi
c002660f:	f7 f7                	div    edi
c0026611:	31 db                	xor    ebx,ebx
c0026613:	89 da                	mov    edx,ebx
c0026615:	83 c4 1c             	add    esp,0x1c
c0026618:	5b                   	pop    ebx
c0026619:	5e                   	pop    esi
c002661a:	5f                   	pop    edi
c002661b:	5d                   	pop    ebp
c002661c:	c3                   	ret    
c002661d:	8d 76 00             	lea    esi,[esi+0x0]
c0026620:	89 f9                	mov    ecx,edi
c0026622:	85 ff                	test   edi,edi
c0026624:	75 0b                	jne    c0026631 <__udivdi3+0x45>
c0026626:	b8 01 00 00 00       	mov    eax,0x1
c002662b:	31 d2                	xor    edx,edx
c002662d:	f7 f7                	div    edi
c002662f:	89 c1                	mov    ecx,eax
c0026631:	31 d2                	xor    edx,edx
c0026633:	89 f0                	mov    eax,esi
c0026635:	f7 f1                	div    ecx
c0026637:	89 c3                	mov    ebx,eax
c0026639:	89 e8                	mov    eax,ebp
c002663b:	f7 f1                	div    ecx
c002663d:	89 da                	mov    edx,ebx
c002663f:	83 c4 1c             	add    esp,0x1c
c0026642:	5b                   	pop    ebx
c0026643:	5e                   	pop    esi
c0026644:	5f                   	pop    edi
c0026645:	5d                   	pop    ebp
c0026646:	c3                   	ret    
c0026647:	90                   	nop
c0026648:	39 f2                	cmp    edx,esi
c002664a:	77 1c                	ja     c0026668 <__udivdi3+0x7c>
c002664c:	0f bd da             	bsr    ebx,edx
c002664f:	83 f3 1f             	xor    ebx,0x1f
c0026652:	75 24                	jne    c0026678 <__udivdi3+0x8c>
c0026654:	39 f2                	cmp    edx,esi
c0026656:	72 08                	jb     c0026660 <__udivdi3+0x74>
c0026658:	39 ef                	cmp    edi,ebp
c002665a:	0f 87 84 00 00 00    	ja     c00266e4 <__udivdi3+0xf8>
c0026660:	b8 01 00 00 00       	mov    eax,0x1
c0026665:	eb ac                	jmp    c0026613 <__udivdi3+0x27>
c0026667:	90                   	nop
c0026668:	31 db                	xor    ebx,ebx
c002666a:	31 c0                	xor    eax,eax
c002666c:	89 da                	mov    edx,ebx
c002666e:	83 c4 1c             	add    esp,0x1c
c0026671:	5b                   	pop    ebx
c0026672:	5e                   	pop    esi
c0026673:	5f                   	pop    edi
c0026674:	5d                   	pop    ebp
c0026675:	c3                   	ret    
c0026676:	66 90                	xchg   ax,ax
c0026678:	b8 20 00 00 00       	mov    eax,0x20
c002667d:	29 d8                	sub    eax,ebx
c002667f:	88 d9                	mov    cl,bl
c0026681:	d3 e2                	shl    edx,cl
c0026683:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0026687:	89 fa                	mov    edx,edi
c0026689:	88 c1                	mov    cl,al
c002668b:	d3 ea                	shr    edx,cl
c002668d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026691:	09 d1                	or     ecx,edx
c0026693:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026697:	88 d9                	mov    cl,bl
c0026699:	d3 e7                	shl    edi,cl
c002669b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002669f:	89 f7                	mov    edi,esi
c00266a1:	88 c1                	mov    cl,al
c00266a3:	d3 ef                	shr    edi,cl
c00266a5:	88 d9                	mov    cl,bl
c00266a7:	d3 e6                	shl    esi,cl
c00266a9:	89 ea                	mov    edx,ebp
c00266ab:	88 c1                	mov    cl,al
c00266ad:	d3 ea                	shr    edx,cl
c00266af:	09 d6                	or     esi,edx
c00266b1:	89 f0                	mov    eax,esi
c00266b3:	89 fa                	mov    edx,edi
c00266b5:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00266b9:	89 d7                	mov    edi,edx
c00266bb:	89 c6                	mov    esi,eax
c00266bd:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00266c1:	39 d7                	cmp    edi,edx
c00266c3:	72 13                	jb     c00266d8 <__udivdi3+0xec>
c00266c5:	74 09                	je     c00266d0 <__udivdi3+0xe4>
c00266c7:	89 f0                	mov    eax,esi
c00266c9:	31 db                	xor    ebx,ebx
c00266cb:	e9 43 ff ff ff       	jmp    c0026613 <__udivdi3+0x27>
c00266d0:	88 d9                	mov    cl,bl
c00266d2:	d3 e5                	shl    ebp,cl
c00266d4:	39 c5                	cmp    ebp,eax
c00266d6:	73 ef                	jae    c00266c7 <__udivdi3+0xdb>
c00266d8:	8d 46 ff             	lea    eax,[esi-0x1]
c00266db:	31 db                	xor    ebx,ebx
c00266dd:	e9 31 ff ff ff       	jmp    c0026613 <__udivdi3+0x27>
c00266e2:	66 90                	xchg   ax,ax
c00266e4:	31 c0                	xor    eax,eax
c00266e6:	e9 28 ff ff ff       	jmp    c0026613 <__udivdi3+0x27>
c00266eb:	90                   	nop

c00266ec <__umoddi3>:
c00266ec:	55                   	push   ebp
c00266ed:	57                   	push   edi
c00266ee:	56                   	push   esi
c00266ef:	53                   	push   ebx
c00266f0:	83 ec 1c             	sub    esp,0x1c
c00266f3:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00266f7:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00266fb:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00266ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0026703:	89 da                	mov    edx,ebx
c0026705:	85 c0                	test   eax,eax
c0026707:	75 37                	jne    c0026740 <__umoddi3+0x54>
c0026709:	39 df                	cmp    edi,ebx
c002670b:	76 13                	jbe    c0026720 <__umoddi3+0x34>
c002670d:	89 f0                	mov    eax,esi
c002670f:	f7 f7                	div    edi
c0026711:	89 d0                	mov    eax,edx
c0026713:	31 d2                	xor    edx,edx
c0026715:	83 c4 1c             	add    esp,0x1c
c0026718:	5b                   	pop    ebx
c0026719:	5e                   	pop    esi
c002671a:	5f                   	pop    edi
c002671b:	5d                   	pop    ebp
c002671c:	c3                   	ret    
c002671d:	8d 76 00             	lea    esi,[esi+0x0]
c0026720:	89 fd                	mov    ebp,edi
c0026722:	85 ff                	test   edi,edi
c0026724:	75 0b                	jne    c0026731 <__umoddi3+0x45>
c0026726:	b8 01 00 00 00       	mov    eax,0x1
c002672b:	31 d2                	xor    edx,edx
c002672d:	f7 f7                	div    edi
c002672f:	89 c5                	mov    ebp,eax
c0026731:	89 d8                	mov    eax,ebx
c0026733:	31 d2                	xor    edx,edx
c0026735:	f7 f5                	div    ebp
c0026737:	89 f0                	mov    eax,esi
c0026739:	f7 f5                	div    ebp
c002673b:	89 d0                	mov    eax,edx
c002673d:	eb d4                	jmp    c0026713 <__umoddi3+0x27>
c002673f:	90                   	nop
c0026740:	89 f1                	mov    ecx,esi
c0026742:	39 d8                	cmp    eax,ebx
c0026744:	76 0a                	jbe    c0026750 <__umoddi3+0x64>
c0026746:	89 f0                	mov    eax,esi
c0026748:	83 c4 1c             	add    esp,0x1c
c002674b:	5b                   	pop    ebx
c002674c:	5e                   	pop    esi
c002674d:	5f                   	pop    edi
c002674e:	5d                   	pop    ebp
c002674f:	c3                   	ret    
c0026750:	0f bd e8             	bsr    ebp,eax
c0026753:	83 f5 1f             	xor    ebp,0x1f
c0026756:	75 1c                	jne    c0026774 <__umoddi3+0x88>
c0026758:	39 d8                	cmp    eax,ebx
c002675a:	72 04                	jb     c0026760 <__umoddi3+0x74>
c002675c:	39 f7                	cmp    edi,esi
c002675e:	77 08                	ja     c0026768 <__umoddi3+0x7c>
c0026760:	89 da                	mov    edx,ebx
c0026762:	29 fe                	sub    esi,edi
c0026764:	19 c2                	sbb    edx,eax
c0026766:	89 f1                	mov    ecx,esi
c0026768:	89 c8                	mov    eax,ecx
c002676a:	83 c4 1c             	add    esp,0x1c
c002676d:	5b                   	pop    ebx
c002676e:	5e                   	pop    esi
c002676f:	5f                   	pop    edi
c0026770:	5d                   	pop    ebp
c0026771:	c3                   	ret    
c0026772:	66 90                	xchg   ax,ax
c0026774:	ba 20 00 00 00       	mov    edx,0x20
c0026779:	29 ea                	sub    edx,ebp
c002677b:	89 e9                	mov    ecx,ebp
c002677d:	d3 e0                	shl    eax,cl
c002677f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026783:	89 f8                	mov    eax,edi
c0026785:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0026789:	88 d1                	mov    cl,dl
c002678b:	d3 e8                	shr    eax,cl
c002678d:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026791:	09 c1                	or     ecx,eax
c0026793:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0026797:	89 e9                	mov    ecx,ebp
c0026799:	d3 e7                	shl    edi,cl
c002679b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c002679f:	89 d8                	mov    eax,ebx
c00267a1:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00267a5:	88 d1                	mov    cl,dl
c00267a7:	d3 e8                	shr    eax,cl
c00267a9:	89 c7                	mov    edi,eax
c00267ab:	89 e9                	mov    ecx,ebp
c00267ad:	d3 e3                	shl    ebx,cl
c00267af:	89 f0                	mov    eax,esi
c00267b1:	88 d1                	mov    cl,dl
c00267b3:	d3 e8                	shr    eax,cl
c00267b5:	09 d8                	or     eax,ebx
c00267b7:	89 e9                	mov    ecx,ebp
c00267b9:	d3 e6                	shl    esi,cl
c00267bb:	89 f3                	mov    ebx,esi
c00267bd:	89 fa                	mov    edx,edi
c00267bf:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00267c3:	89 d1                	mov    ecx,edx
c00267c5:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00267c9:	89 c6                	mov    esi,eax
c00267cb:	89 d7                	mov    edi,edx
c00267cd:	39 d1                	cmp    ecx,edx
c00267cf:	72 27                	jb     c00267f8 <__umoddi3+0x10c>
c00267d1:	74 21                	je     c00267f4 <__umoddi3+0x108>
c00267d3:	89 ca                	mov    edx,ecx
c00267d5:	29 f3                	sub    ebx,esi
c00267d7:	19 fa                	sbb    edx,edi
c00267d9:	89 d0                	mov    eax,edx
c00267db:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00267df:	d3 e0                	shl    eax,cl
c00267e1:	89 e9                	mov    ecx,ebp
c00267e3:	d3 eb                	shr    ebx,cl
c00267e5:	09 d8                	or     eax,ebx
c00267e7:	d3 ea                	shr    edx,cl
c00267e9:	83 c4 1c             	add    esp,0x1c
c00267ec:	5b                   	pop    ebx
c00267ed:	5e                   	pop    esi
c00267ee:	5f                   	pop    edi
c00267ef:	5d                   	pop    ebp
c00267f0:	c3                   	ret    
c00267f1:	8d 76 00             	lea    esi,[esi+0x0]
c00267f4:	39 c3                	cmp    ebx,eax
c00267f6:	73 db                	jae    c00267d3 <__umoddi3+0xe7>
c00267f8:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00267fc:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c0026800:	89 d7                	mov    edi,edx
c0026802:	89 c6                	mov    esi,eax
c0026804:	eb cd                	jmp    c00267d3 <__umoddi3+0xe7>

c0026806 <__addsf3>:
c0026806:	55                   	push   ebp
c0026807:	89 e5                	mov    ebp,esp
c0026809:	57                   	push   edi
c002680a:	56                   	push   esi
c002680b:	53                   	push   ebx
c002680c:	83 ec 08             	sub    esp,0x8
c002680f:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0026812:	89 fa                	mov    edx,edi
c0026814:	89 f8                	mov    eax,edi
c0026816:	c1 f8 17             	sar    eax,0x17
c0026819:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002681c:	c1 e2 08             	shl    edx,0x8
c002681f:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0026825:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026828:	89 de                	mov    esi,ebx
c002682a:	c1 fe 17             	sar    esi,0x17
c002682d:	c1 e3 08             	shl    ebx,0x8
c0026830:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026836:	31 f0                	xor    eax,esi
c0026838:	0f 88 3b 01 00 00    	js     c0026979 <__addsf3+0x173>
c002683e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0026841:	29 f1                	sub    ecx,esi
c0026843:	85 c9                	test   ecx,ecx
c0026845:	7e 54                	jle    c002689b <__addsf3+0x95>
c0026847:	89 f0                	mov    eax,esi
c0026849:	84 c0                	test   al,al
c002684b:	75 10                	jne    c002685d <__addsf3+0x57>
c002684d:	85 db                	test   ebx,ebx
c002684f:	0f 84 aa 02 00 00    	je     c0026aff <__addsf3+0x2f9>
c0026855:	49                   	dec    ecx
c0026856:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0026859:	74 38                	je     c0026893 <__addsf3+0x8d>
c002685b:	eb 13                	jmp    c0026870 <__addsf3+0x6a>
c002685d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026860:	f7 d0                	not    eax
c0026862:	84 c0                	test   al,al
c0026864:	0f 84 95 02 00 00    	je     c0026aff <__addsf3+0x2f9>
c002686a:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026870:	83 f9 1f             	cmp    ecx,0x1f
c0026873:	0f 8f 86 02 00 00    	jg     c0026aff <__addsf3+0x2f9>
c0026879:	89 de                	mov    esi,ebx
c002687b:	d3 ee                	shr    esi,cl
c002687d:	b8 20 00 00 00       	mov    eax,0x20
c0026882:	29 c8                	sub    eax,ecx
c0026884:	89 c1                	mov    ecx,eax
c0026886:	d3 e3                	shl    ebx,cl
c0026888:	31 c0                	xor    eax,eax
c002688a:	85 db                	test   ebx,ebx
c002688c:	0f 95 c0             	setne  al
c002688f:	09 f0                	or     eax,esi
c0026891:	01 d0                	add    eax,edx
c0026893:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026896:	e9 b6 00 00 00       	jmp    c0026951 <__addsf3+0x14b>
c002689b:	74 5c                	je     c00268f9 <__addsf3+0xf3>
c002689d:	89 f1                	mov    ecx,esi
c002689f:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c00268a2:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00268a5:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00268a9:	75 14                	jne    c00268bf <__addsf3+0xb9>
c00268ab:	85 d2                	test   edx,edx
c00268ad:	0f 84 4c 02 00 00    	je     c0026aff <__addsf3+0x2f9>
c00268b3:	49                   	dec    ecx
c00268b4:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00268b7:	0f 84 94 00 00 00    	je     c0026951 <__addsf3+0x14b>
c00268bd:	eb 12                	jmp    c00268d1 <__addsf3+0xcb>
c00268bf:	89 f0                	mov    eax,esi
c00268c1:	f7 d0                	not    eax
c00268c3:	84 c0                	test   al,al
c00268c5:	0f 84 34 02 00 00    	je     c0026aff <__addsf3+0x2f9>
c00268cb:	81 ca 00 00 00 80    	or     edx,0x80000000
c00268d1:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00268d4:	83 f9 1f             	cmp    ecx,0x1f
c00268d7:	0f 8f 22 02 00 00    	jg     c0026aff <__addsf3+0x2f9>
c00268dd:	89 d7                	mov    edi,edx
c00268df:	d3 ef                	shr    edi,cl
c00268e1:	b8 20 00 00 00       	mov    eax,0x20
c00268e6:	29 c8                	sub    eax,ecx
c00268e8:	89 c1                	mov    ecx,eax
c00268ea:	d3 e2                	shl    edx,cl
c00268ec:	31 c0                	xor    eax,eax
c00268ee:	85 d2                	test   edx,edx
c00268f0:	0f 95 c0             	setne  al
c00268f3:	09 f8                	or     eax,edi
c00268f5:	01 d8                	add    eax,ebx
c00268f7:	eb 58                	jmp    c0026951 <__addsf3+0x14b>
c00268f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00268fc:	8d 70 01             	lea    esi,[eax+0x1]
c00268ff:	f7 c6 fe 00 00 00    	test   esi,0xfe
c0026905:	75 32                	jne    c0026939 <__addsf3+0x133>
c0026907:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c002690b:	75 1f                	jne    c002692c <__addsf3+0x126>
c002690d:	85 d2                	test   edx,edx
c002690f:	0f 84 e0 01 00 00    	je     c0026af5 <__addsf3+0x2ef>
c0026915:	85 db                	test   ebx,ebx
c0026917:	0f 84 e2 01 00 00    	je     c0026aff <__addsf3+0x2f9>
c002691d:	89 d0                	mov    eax,edx
c002691f:	01 d8                	add    eax,ebx
c0026921:	0f 89 a9 01 00 00    	jns    c0026ad0 <__addsf3+0x2ca>
c0026927:	e9 9d 01 00 00       	jmp    c0026ac9 <__addsf3+0x2c3>
c002692c:	85 d2                	test   edx,edx
c002692e:	0f 85 cb 01 00 00    	jne    c0026aff <__addsf3+0x2f9>
c0026934:	e9 bc 01 00 00       	jmp    c0026af5 <__addsf3+0x2ef>
c0026939:	31 c0                	xor    eax,eax
c002693b:	89 f1                	mov    ecx,esi
c002693d:	f7 d1                	not    ecx
c002693f:	84 c9                	test   cl,cl
c0026941:	0f 84 90 01 00 00    	je     c0026ad7 <__addsf3+0x2d1>
c0026947:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002694a:	d1 e8                	shr    eax,1
c002694c:	e9 86 01 00 00       	jmp    c0026ad7 <__addsf3+0x2d1>
c0026951:	85 c0                	test   eax,eax
c0026953:	0f 89 7e 01 00 00    	jns    c0026ad7 <__addsf3+0x2d1>
c0026959:	46                   	inc    esi
c002695a:	89 f2                	mov    edx,esi
c002695c:	f7 d2                	not    edx
c002695e:	84 d2                	test   dl,dl
c0026960:	0f 84 6f 01 00 00    	je     c0026ad5 <__addsf3+0x2cf>
c0026966:	89 c2                	mov    edx,eax
c0026968:	83 e2 01             	and    edx,0x1
c002696b:	d1 e8                	shr    eax,1
c002696d:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0026972:	09 d0                	or     eax,edx
c0026974:	e9 5e 01 00 00       	jmp    c0026ad7 <__addsf3+0x2d1>
c0026979:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c002697d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0026980:	89 f0                	mov    eax,esi
c0026982:	0f b6 c0             	movzx  eax,al
c0026985:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0026988:	29 c1                	sub    ecx,eax
c002698a:	85 c9                	test   ecx,ecx
c002698c:	7e 55                	jle    c00269e3 <__addsf3+0x1dd>
c002698e:	85 c0                	test   eax,eax
c0026990:	75 11                	jne    c00269a3 <__addsf3+0x19d>
c0026992:	85 db                	test   ebx,ebx
c0026994:	0f 84 65 01 00 00    	je     c0026aff <__addsf3+0x2f9>
c002699a:	49                   	dec    ecx
c002699b:	75 19                	jne    c00269b6 <__addsf3+0x1b0>
c002699d:	89 d0                	mov    eax,edx
c002699f:	29 d8                	sub    eax,ebx
c00269a1:	eb 38                	jmp    c00269db <__addsf3+0x1d5>
c00269a3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00269a6:	f7 d0                	not    eax
c00269a8:	84 c0                	test   al,al
c00269aa:	0f 84 4f 01 00 00    	je     c0026aff <__addsf3+0x2f9>
c00269b0:	81 cb 00 00 00 80    	or     ebx,0x80000000
c00269b6:	83 f9 1f             	cmp    ecx,0x1f
c00269b9:	0f 8f 40 01 00 00    	jg     c0026aff <__addsf3+0x2f9>
c00269bf:	89 de                	mov    esi,ebx
c00269c1:	d3 ee                	shr    esi,cl
c00269c3:	b8 20 00 00 00       	mov    eax,0x20
c00269c8:	29 c8                	sub    eax,ecx
c00269ca:	89 c1                	mov    ecx,eax
c00269cc:	d3 e3                	shl    ebx,cl
c00269ce:	31 c0                	xor    eax,eax
c00269d0:	85 db                	test   ebx,ebx
c00269d2:	0f 95 c0             	setne  al
c00269d5:	09 f0                	or     eax,esi
c00269d7:	29 c2                	sub    edx,eax
c00269d9:	89 d0                	mov    eax,edx
c00269db:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00269de:	e9 af 00 00 00       	jmp    c0026a92 <__addsf3+0x28c>
c00269e3:	74 5c                	je     c0026a41 <__addsf3+0x23b>
c00269e5:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00269e8:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00269eb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00269ef:	75 14                	jne    c0026a05 <__addsf3+0x1ff>
c00269f1:	85 d2                	test   edx,edx
c00269f3:	0f 84 06 01 00 00    	je     c0026aff <__addsf3+0x2f9>
c00269f9:	48                   	dec    eax
c00269fa:	75 1b                	jne    c0026a17 <__addsf3+0x211>
c00269fc:	89 d8                	mov    eax,ebx
c00269fe:	29 d0                	sub    eax,edx
c0026a00:	e9 8d 00 00 00       	jmp    c0026a92 <__addsf3+0x28c>
c0026a05:	89 f1                	mov    ecx,esi
c0026a07:	f7 d1                	not    ecx
c0026a09:	84 c9                	test   cl,cl
c0026a0b:	0f 84 ee 00 00 00    	je     c0026aff <__addsf3+0x2f9>
c0026a11:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026a17:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a1a:	83 f8 1f             	cmp    eax,0x1f
c0026a1d:	0f 8f dc 00 00 00    	jg     c0026aff <__addsf3+0x2f9>
c0026a23:	89 d7                	mov    edi,edx
c0026a25:	88 c1                	mov    cl,al
c0026a27:	d3 ef                	shr    edi,cl
c0026a29:	b9 20 00 00 00       	mov    ecx,0x20
c0026a2e:	29 c1                	sub    ecx,eax
c0026a30:	d3 e2                	shl    edx,cl
c0026a32:	31 c0                	xor    eax,eax
c0026a34:	85 d2                	test   edx,edx
c0026a36:	0f 95 c0             	setne  al
c0026a39:	09 f8                	or     eax,edi
c0026a3b:	29 c3                	sub    ebx,eax
c0026a3d:	89 d8                	mov    eax,ebx
c0026a3f:	eb 51                	jmp    c0026a92 <__addsf3+0x28c>
c0026a41:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026a44:	40                   	inc    eax
c0026a45:	a8 fe                	test   al,0xfe
c0026a47:	75 3d                	jne    c0026a86 <__addsf3+0x280>
c0026a49:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0026a4d:	0f 85 a7 00 00 00    	jne    c0026afa <__addsf3+0x2f4>
c0026a53:	85 d2                	test   edx,edx
c0026a55:	75 12                	jne    c0026a69 <__addsf3+0x263>
c0026a57:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026a5a:	85 db                	test   ebx,ebx
c0026a5c:	0f 85 9d 00 00 00    	jne    c0026aff <__addsf3+0x2f9>
c0026a62:	31 ff                	xor    edi,edi
c0026a64:	e9 96 00 00 00       	jmp    c0026aff <__addsf3+0x2f9>
c0026a69:	85 db                	test   ebx,ebx
c0026a6b:	0f 84 8e 00 00 00    	je     c0026aff <__addsf3+0x2f9>
c0026a71:	89 d0                	mov    eax,edx
c0026a73:	29 d8                	sub    eax,ebx
c0026a75:	79 06                	jns    c0026a7d <__addsf3+0x277>
c0026a77:	89 d8                	mov    eax,ebx
c0026a79:	29 d0                	sub    eax,edx
c0026a7b:	eb 5a                	jmp    c0026ad7 <__addsf3+0x2d1>
c0026a7d:	bf 00 00 00 00       	mov    edi,0x0
c0026a82:	74 7b                	je     c0026aff <__addsf3+0x2f9>
c0026a84:	eb 4a                	jmp    c0026ad0 <__addsf3+0x2ca>
c0026a86:	89 d0                	mov    eax,edx
c0026a88:	29 d8                	sub    eax,ebx
c0026a8a:	79 12                	jns    c0026a9e <__addsf3+0x298>
c0026a8c:	89 d8                	mov    eax,ebx
c0026a8e:	29 d0                	sub    eax,edx
c0026a90:	eb 09                	jmp    c0026a9b <__addsf3+0x295>
c0026a92:	85 c0                	test   eax,eax
c0026a94:	79 41                	jns    c0026ad7 <__addsf3+0x2d1>
c0026a96:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026a9b:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0026a9e:	31 f6                	xor    esi,esi
c0026aa0:	85 c0                	test   eax,eax
c0026aa2:	74 33                	je     c0026ad7 <__addsf3+0x2d1>
c0026aa4:	0f bd c8             	bsr    ecx,eax
c0026aa7:	83 f1 1f             	xor    ecx,0x1f
c0026aaa:	d3 e0                	shl    eax,cl
c0026aac:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0026ab0:	39 ca                	cmp    edx,ecx
c0026ab2:	7f 10                	jg     c0026ac4 <__addsf3+0x2be>
c0026ab4:	29 d1                	sub    ecx,edx
c0026ab6:	41                   	inc    ecx
c0026ab7:	d3 e8                	shr    eax,cl
c0026ab9:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026abc:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c0026ac2:	eb 13                	jmp    c0026ad7 <__addsf3+0x2d1>
c0026ac4:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ac7:	29 ce                	sub    esi,ecx
c0026ac9:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026ace:	eb 07                	jmp    c0026ad7 <__addsf3+0x2d1>
c0026ad0:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0026ad3:	eb 02                	jmp    c0026ad7 <__addsf3+0x2d1>
c0026ad5:	31 c0                	xor    eax,eax
c0026ad7:	89 c2                	mov    edx,eax
c0026ad9:	c1 ea 08             	shr    edx,0x8
c0026adc:	a8 7f                	test   al,0x7f
c0026ade:	0f 95 c1             	setne  cl
c0026ae1:	09 d1                	or     ecx,edx
c0026ae3:	83 e1 01             	and    ecx,0x1
c0026ae6:	c1 e8 07             	shr    eax,0x7
c0026ae9:	21 c8                	and    eax,ecx
c0026aeb:	c1 e6 17             	shl    esi,0x17
c0026aee:	09 d6                	or     esi,edx
c0026af0:	8d 3c 30             	lea    edi,[eax+esi*1]
c0026af3:	eb 0a                	jmp    c0026aff <__addsf3+0x2f9>
c0026af5:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0026af8:	eb 05                	jmp    c0026aff <__addsf3+0x2f9>
c0026afa:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c0026aff:	89 f8                	mov    eax,edi
c0026b01:	5a                   	pop    edx
c0026b02:	59                   	pop    ecx
c0026b03:	5b                   	pop    ebx
c0026b04:	5e                   	pop    esi
c0026b05:	5f                   	pop    edi
c0026b06:	5d                   	pop    ebp
c0026b07:	c3                   	ret    

c0026b08 <__subsf3>:
c0026b08:	55                   	push   ebp
c0026b09:	89 e5                	mov    ebp,esp
c0026b0b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b0e:	05 00 00 00 80       	add    eax,0x80000000
c0026b13:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0026b16:	5d                   	pop    ebp
c0026b17:	e9 ea fc ff ff       	jmp    c0026806 <__addsf3>

c0026b1c <__negsf2>:
c0026b1c:	55                   	push   ebp
c0026b1d:	89 e5                	mov    ebp,esp
c0026b1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026b22:	05 00 00 00 80       	add    eax,0x80000000
c0026b27:	5d                   	pop    ebp
c0026b28:	c3                   	ret    

c0026b29 <__mulsf3>:
c0026b29:	55                   	push   ebp
c0026b2a:	89 e5                	mov    ebp,esp
c0026b2c:	57                   	push   edi
c0026b2d:	56                   	push   esi
c0026b2e:	53                   	push   ebx
c0026b2f:	83 ec 1c             	sub    esp,0x1c
c0026b32:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0026b35:	89 f0                	mov    eax,esi
c0026b37:	89 f1                	mov    ecx,esi
c0026b39:	c1 f9 17             	sar    ecx,0x17
c0026b3c:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026b3f:	c1 e0 08             	shl    eax,0x8
c0026b42:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026b47:	89 c1                	mov    ecx,eax
c0026b49:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026b4c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026b4f:	89 c7                	mov    edi,eax
c0026b51:	c1 ff 17             	sar    edi,0x17
c0026b54:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026b58:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026b5b:	89 f8                	mov    eax,edi
c0026b5d:	0f b6 c0             	movzx  eax,al
c0026b60:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0026b63:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c0026b67:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026b6a:	42                   	inc    edx
c0026b6b:	80 e2 fe             	and    dl,0xfe
c0026b6e:	75 7b                	jne    c0026beb <__mulsf3+0xc2>
c0026b70:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026b74:	74 54                	je     c0026bca <__mulsf3+0xa1>
c0026b76:	85 c9                	test   ecx,ecx
c0026b78:	0f 85 64 01 00 00    	jne    c0026ce2 <__mulsf3+0x1b9>
c0026b7e:	8d 57 01             	lea    edx,[edi+0x1]
c0026b81:	80 e2 fe             	and    dl,0xfe
c0026b84:	75 1f                	jne    c0026ba5 <__mulsf3+0x7c>
c0026b86:	85 c0                	test   eax,eax
c0026b88:	b8 00 00 00 00       	mov    eax,0x0
c0026b8d:	74 29                	je     c0026bb8 <__mulsf3+0x8f>
c0026b8f:	53                   	push   ebx
c0026b90:	53                   	push   ebx
c0026b91:	50                   	push   eax
c0026b92:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026b95:	e8 96 05 00 00       	call   c0027130 <__nesf2>
c0026b9a:	83 c4 10             	add    esp,0x10
c0026b9d:	85 c0                	test   eax,eax
c0026b9f:	0f 85 3a 01 00 00    	jne    c0026cdf <__mulsf3+0x1b6>
c0026ba5:	85 ff                	test   edi,edi
c0026ba7:	0f 89 35 01 00 00    	jns    c0026ce2 <__mulsf3+0x1b9>
c0026bad:	81 c6 00 00 00 80    	add    esi,0x80000000
c0026bb3:	e9 2a 01 00 00       	jmp    c0026ce2 <__mulsf3+0x1b9>
c0026bb8:	51                   	push   ecx
c0026bb9:	51                   	push   ecx
c0026bba:	50                   	push   eax
c0026bbb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026bbe:	e8 6d 05 00 00       	call   c0027130 <__nesf2>
c0026bc3:	83 c4 10             	add    esp,0x10
c0026bc6:	85 c0                	test   eax,eax
c0026bc8:	eb 15                	jmp    c0026bdf <__mulsf3+0xb6>
c0026bca:	85 c9                	test   ecx,ecx
c0026bcc:	74 0b                	je     c0026bd9 <__mulsf3+0xb0>
c0026bce:	8d 53 ff             	lea    edx,[ebx-0x1]
c0026bd1:	01 c9                	add    ecx,ecx
c0026bd3:	78 16                	js     c0026beb <__mulsf3+0xc2>
c0026bd5:	89 d3                	mov    ebx,edx
c0026bd7:	eb f5                	jmp    c0026bce <__mulsf3+0xa5>
c0026bd9:	89 f8                	mov    eax,edi
c0026bdb:	f7 d0                	not    eax
c0026bdd:	84 c0                	test   al,al
c0026bdf:	75 c4                	jne    c0026ba5 <__mulsf3+0x7c>
c0026be1:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c0026be6:	e9 f7 00 00 00       	jmp    c0026ce2 <__mulsf3+0x1b9>
c0026beb:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0026bee:	c1 e6 08             	shl    esi,0x8
c0026bf1:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c0026bf7:	8d 57 01             	lea    edx,[edi+0x1]
c0026bfa:	80 e2 fe             	and    dl,0xfe
c0026bfd:	75 63                	jne    c0026c62 <__mulsf3+0x139>
c0026bff:	85 c0                	test   eax,eax
c0026c01:	74 2f                	je     c0026c32 <__mulsf3+0x109>
c0026c03:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026c07:	0f 89 d2 00 00 00    	jns    c0026cdf <__mulsf3+0x1b6>
c0026c0d:	52                   	push   edx
c0026c0e:	52                   	push   edx
c0026c0f:	6a 00                	push   0x0
c0026c11:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c14:	e8 dc 04 00 00       	call   c00270f5 <__eqsf2>
c0026c19:	83 c4 10             	add    esp,0x10
c0026c1c:	85 c0                	test   eax,eax
c0026c1e:	0f 85 bb 00 00 00    	jne    c0026cdf <__mulsf3+0x1b6>
c0026c24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026c27:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0026c2d:	e9 b0 00 00 00       	jmp    c0026ce2 <__mulsf3+0x1b9>
c0026c32:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026c35:	50                   	push   eax
c0026c36:	50                   	push   eax
c0026c37:	6a 00                	push   0x0
c0026c39:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026c3c:	e8 b4 04 00 00       	call   c00270f5 <__eqsf2>
c0026c41:	83 c4 10             	add    esp,0x10
c0026c44:	85 c0                	test   eax,eax
c0026c46:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026c49:	75 0c                	jne    c0026c57 <__mulsf3+0x12e>
c0026c4b:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0026c4f:	0f 89 8a 00 00 00    	jns    c0026cdf <__mulsf3+0x1b6>
c0026c55:	eb cd                	jmp    c0026c24 <__mulsf3+0xfb>
c0026c57:	8d 43 ff             	lea    eax,[ebx-0x1]
c0026c5a:	01 f6                	add    esi,esi
c0026c5c:	78 04                	js     c0026c62 <__mulsf3+0x139>
c0026c5e:	89 c3                	mov    ebx,eax
c0026c60:	eb f5                	jmp    c0026c57 <__mulsf3+0x12e>
c0026c62:	89 c8                	mov    eax,ecx
c0026c64:	0d 00 00 00 80       	or     eax,0x80000000
c0026c69:	81 ce 00 00 00 80    	or     esi,0x80000000
c0026c6f:	f7 e6                	mul    esi
c0026c71:	85 c0                	test   eax,eax
c0026c73:	0f 95 c0             	setne  al
c0026c76:	0f b6 c0             	movzx  eax,al
c0026c79:	09 c2                	or     edx,eax
c0026c7b:	78 03                	js     c0026c80 <__mulsf3+0x157>
c0026c7d:	01 d2                	add    edx,edx
c0026c7f:	4b                   	dec    ebx
c0026c80:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c0026c86:	7f 22                	jg     c0026caa <__mulsf3+0x181>
c0026c88:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026c8e:	85 db                	test   ebx,ebx
c0026c90:	7f 23                	jg     c0026cb5 <__mulsf3+0x18c>
c0026c92:	83 fb e9             	cmp    ebx,0xffffffe9
c0026c95:	7c 1a                	jl     c0026cb1 <__mulsf3+0x188>
c0026c97:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026c9d:	b9 01 00 00 00       	mov    ecx,0x1
c0026ca2:	29 d9                	sub    ecx,ebx
c0026ca4:	d3 ea                	shr    edx,cl
c0026ca6:	31 db                	xor    ebx,ebx
c0026ca8:	eb 0b                	jmp    c0026cb5 <__mulsf3+0x18c>
c0026caa:	bb ff 00 00 00       	mov    ebx,0xff
c0026caf:	eb 02                	jmp    c0026cb3 <__mulsf3+0x18a>
c0026cb1:	31 db                	xor    ebx,ebx
c0026cb3:	31 d2                	xor    edx,edx
c0026cb5:	89 d0                	mov    eax,edx
c0026cb7:	c1 e8 08             	shr    eax,0x8
c0026cba:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026cbd:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026cc3:	09 fb                	or     ebx,edi
c0026cc5:	c1 e3 17             	shl    ebx,0x17
c0026cc8:	09 c3                	or     ebx,eax
c0026cca:	f6 c2 7f             	test   dl,0x7f
c0026ccd:	0f 95 c1             	setne  cl
c0026cd0:	09 c8                	or     eax,ecx
c0026cd2:	83 e0 01             	and    eax,0x1
c0026cd5:	c1 ea 07             	shr    edx,0x7
c0026cd8:	21 c2                	and    edx,eax
c0026cda:	8d 34 13             	lea    esi,[ebx+edx*1]
c0026cdd:	eb 03                	jmp    c0026ce2 <__mulsf3+0x1b9>
c0026cdf:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0026ce2:	89 f0                	mov    eax,esi
c0026ce4:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026ce7:	5b                   	pop    ebx
c0026ce8:	5e                   	pop    esi
c0026ce9:	5f                   	pop    edi
c0026cea:	5d                   	pop    ebp
c0026ceb:	c3                   	ret    

c0026cec <__divsf3>:
c0026cec:	55                   	push   ebp
c0026ced:	89 e5                	mov    ebp,esp
c0026cef:	57                   	push   edi
c0026cf0:	56                   	push   esi
c0026cf1:	53                   	push   ebx
c0026cf2:	83 ec 1c             	sub    esp,0x1c
c0026cf5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0026cf8:	89 d8                	mov    eax,ebx
c0026cfa:	89 d9                	mov    ecx,ebx
c0026cfc:	c1 f9 17             	sar    ecx,0x17
c0026cff:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0026d02:	c1 e0 08             	shl    eax,0x8
c0026d05:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0026d0a:	89 c1                	mov    ecx,eax
c0026d0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026d0f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026d12:	89 c7                	mov    edi,eax
c0026d14:	c1 ff 17             	sar    edi,0x17
c0026d17:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0026d1b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0026d1e:	89 f8                	mov    eax,edi
c0026d20:	0f b6 c0             	movzx  eax,al
c0026d23:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0026d26:	29 c6                	sub    esi,eax
c0026d28:	83 c6 7f             	add    esi,0x7f
c0026d2b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0026d2e:	42                   	inc    edx
c0026d2f:	80 e2 fe             	and    dl,0xfe
c0026d32:	0f 85 9c 00 00 00    	jne    c0026dd4 <__divsf3+0xe8>
c0026d38:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0026d3c:	74 33                	je     c0026d71 <__divsf3+0x85>
c0026d3e:	85 c9                	test   ecx,ecx
c0026d40:	0f 85 c7 01 00 00    	jne    c0026f0d <__divsf3+0x221>
c0026d46:	8d 57 01             	lea    edx,[edi+0x1]
c0026d49:	80 e2 fe             	and    dl,0xfe
c0026d4c:	75 2f                	jne    c0026d7d <__divsf3+0x91>
c0026d4e:	85 c0                	test   eax,eax
c0026d50:	74 2b                	je     c0026d7d <__divsf3+0x91>
c0026d52:	51                   	push   ecx
c0026d53:	51                   	push   ecx
c0026d54:	6a 00                	push   0x0
c0026d56:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026d59:	e8 d2 03 00 00       	call   c0027130 <__nesf2>
c0026d5e:	83 c4 10             	add    esp,0x10
c0026d61:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026d64:	85 c0                	test   eax,eax
c0026d66:	0f 85 a1 01 00 00    	jne    c0026f0d <__divsf3+0x221>
c0026d6c:	e9 92 01 00 00       	jmp    c0026f03 <__divsf3+0x217>
c0026d71:	85 c9                	test   ecx,ecx
c0026d73:	75 1b                	jne    c0026d90 <__divsf3+0xa4>
c0026d75:	8d 57 01             	lea    edx,[edi+0x1]
c0026d78:	80 e2 fe             	and    dl,0xfe
c0026d7b:	74 1e                	je     c0026d9b <__divsf3+0xaf>
c0026d7d:	85 ff                	test   edi,edi
c0026d7f:	0f 89 88 01 00 00    	jns    c0026f0d <__divsf3+0x221>
c0026d85:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0026d8b:	e9 7d 01 00 00       	jmp    c0026f0d <__divsf3+0x221>
c0026d90:	8d 56 ff             	lea    edx,[esi-0x1]
c0026d93:	01 c9                	add    ecx,ecx
c0026d95:	78 3d                	js     c0026dd4 <__divsf3+0xe8>
c0026d97:	89 d6                	mov    esi,edx
c0026d99:	eb f5                	jmp    c0026d90 <__divsf3+0xa4>
c0026d9b:	85 c0                	test   eax,eax
c0026d9d:	b8 00 00 00 00       	mov    eax,0x0
c0026da2:	74 18                	je     c0026dbc <__divsf3+0xd0>
c0026da4:	52                   	push   edx
c0026da5:	52                   	push   edx
c0026da6:	50                   	push   eax
c0026da7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026daa:	e8 81 03 00 00       	call   c0027130 <__nesf2>
c0026daf:	83 c4 10             	add    esp,0x10
c0026db2:	85 c0                	test   eax,eax
c0026db4:	0f 85 50 01 00 00    	jne    c0026f0a <__divsf3+0x21e>
c0026dba:	eb c1                	jmp    c0026d7d <__divsf3+0x91>
c0026dbc:	56                   	push   esi
c0026dbd:	56                   	push   esi
c0026dbe:	50                   	push   eax
c0026dbf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026dc2:	e8 69 03 00 00       	call   c0027130 <__nesf2>
c0026dc7:	83 c4 10             	add    esp,0x10
c0026dca:	85 c0                	test   eax,eax
c0026dcc:	0f 84 31 01 00 00    	je     c0026f03 <__divsf3+0x217>
c0026dd2:	eb a9                	jmp    c0026d7d <__divsf3+0x91>
c0026dd4:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c0026dd7:	c1 e3 08             	shl    ebx,0x8
c0026dda:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0026de0:	8d 57 01             	lea    edx,[edi+0x1]
c0026de3:	80 e2 fe             	and    dl,0xfe
c0026de6:	75 71                	jne    c0026e59 <__divsf3+0x16d>
c0026de8:	85 c0                	test   eax,eax
c0026dea:	ba 00 00 00 00       	mov    edx,0x0
c0026def:	74 2f                	je     c0026e20 <__divsf3+0x134>
c0026df1:	51                   	push   ecx
c0026df2:	51                   	push   ecx
c0026df3:	52                   	push   edx
c0026df4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026df7:	e8 f9 02 00 00       	call   c00270f5 <__eqsf2>
c0026dfc:	83 c4 10             	add    esp,0x10
c0026dff:	85 c0                	test   eax,eax
c0026e01:	0f 85 03 01 00 00    	jne    c0026f0a <__divsf3+0x21e>
c0026e07:	31 d2                	xor    edx,edx
c0026e09:	89 d3                	mov    ebx,edx
c0026e0b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026e0e:	31 f8                	xor    eax,edi
c0026e10:	0f 89 f7 00 00 00    	jns    c0026f0d <__divsf3+0x221>
c0026e16:	bb 00 00 00 80       	mov    ebx,0x80000000
c0026e1b:	e9 ed 00 00 00       	jmp    c0026f0d <__divsf3+0x221>
c0026e20:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c0026e23:	50                   	push   eax
c0026e24:	50                   	push   eax
c0026e25:	52                   	push   edx
c0026e26:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0026e29:	e8 c7 02 00 00       	call   c00270f5 <__eqsf2>
c0026e2e:	83 c4 10             	add    esp,0x10
c0026e31:	85 c0                	test   eax,eax
c0026e33:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0026e36:	75 16                	jne    c0026e4e <__divsf3+0x162>
c0026e38:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0026e3b:	31 fb                	xor    ebx,edi
c0026e3d:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0026e43:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0026e49:	e9 bf 00 00 00       	jmp    c0026f0d <__divsf3+0x221>
c0026e4e:	8d 46 01             	lea    eax,[esi+0x1]
c0026e51:	01 db                	add    ebx,ebx
c0026e53:	78 04                	js     c0026e59 <__divsf3+0x16d>
c0026e55:	89 c6                	mov    esi,eax
c0026e57:	eb f5                	jmp    c0026e4e <__divsf3+0x162>
c0026e59:	89 c8                	mov    eax,ecx
c0026e5b:	0d 00 00 00 80       	or     eax,0x80000000
c0026e60:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0026e66:	31 d2                	xor    edx,edx
c0026e68:	39 d8                	cmp    eax,ebx
c0026e6a:	72 07                	jb     c0026e73 <__divsf3+0x187>
c0026e6c:	29 d8                	sub    eax,ebx
c0026e6e:	ba 01 00 00 00       	mov    edx,0x1
c0026e73:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0026e7a:	01 d2                	add    edx,edx
c0026e7c:	89 c1                	mov    ecx,eax
c0026e7e:	01 c0                	add    eax,eax
c0026e80:	85 c9                	test   ecx,ecx
c0026e82:	78 04                	js     c0026e88 <__divsf3+0x19c>
c0026e84:	39 c3                	cmp    ebx,eax
c0026e86:	77 05                	ja     c0026e8d <__divsf3+0x1a1>
c0026e88:	29 d8                	sub    eax,ebx
c0026e8a:	83 ca 01             	or     edx,0x1
c0026e8d:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0026e90:	75 e8                	jne    c0026e7a <__divsf3+0x18e>
c0026e92:	85 c0                	test   eax,eax
c0026e94:	0f 95 c0             	setne  al
c0026e97:	0f b6 c0             	movzx  eax,al
c0026e9a:	c1 e2 06             	shl    edx,0x6
c0026e9d:	09 c2                	or     edx,eax
c0026e9f:	78 03                	js     c0026ea4 <__divsf3+0x1b8>
c0026ea1:	01 d2                	add    edx,edx
c0026ea3:	4e                   	dec    esi
c0026ea4:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0026eaa:	7f 22                	jg     c0026ece <__divsf3+0x1e2>
c0026eac:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0026eb2:	85 f6                	test   esi,esi
c0026eb4:	7f 23                	jg     c0026ed9 <__divsf3+0x1ed>
c0026eb6:	83 fe e9             	cmp    esi,0xffffffe9
c0026eb9:	7c 1a                	jl     c0026ed5 <__divsf3+0x1e9>
c0026ebb:	81 ca 00 00 00 80    	or     edx,0x80000000
c0026ec1:	b9 01 00 00 00       	mov    ecx,0x1
c0026ec6:	29 f1                	sub    ecx,esi
c0026ec8:	d3 ea                	shr    edx,cl
c0026eca:	31 f6                	xor    esi,esi
c0026ecc:	eb 0b                	jmp    c0026ed9 <__divsf3+0x1ed>
c0026ece:	be ff 00 00 00       	mov    esi,0xff
c0026ed3:	eb 02                	jmp    c0026ed7 <__divsf3+0x1eb>
c0026ed5:	31 f6                	xor    esi,esi
c0026ed7:	31 d2                	xor    edx,edx
c0026ed9:	89 d0                	mov    eax,edx
c0026edb:	c1 e8 08             	shr    eax,0x8
c0026ede:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0026ee1:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0026ee7:	09 fe                	or     esi,edi
c0026ee9:	c1 e6 17             	shl    esi,0x17
c0026eec:	09 c6                	or     esi,eax
c0026eee:	f6 c2 7f             	test   dl,0x7f
c0026ef1:	0f 95 c1             	setne  cl
c0026ef4:	09 c8                	or     eax,ecx
c0026ef6:	83 e0 01             	and    eax,0x1
c0026ef9:	c1 ea 07             	shr    edx,0x7
c0026efc:	21 c2                	and    edx,eax
c0026efe:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0026f01:	eb 0a                	jmp    c0026f0d <__divsf3+0x221>
c0026f03:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0026f08:	eb 03                	jmp    c0026f0d <__divsf3+0x221>
c0026f0a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0026f0d:	89 d8                	mov    eax,ebx
c0026f0f:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026f12:	5b                   	pop    ebx
c0026f13:	5e                   	pop    esi
c0026f14:	5f                   	pop    edi
c0026f15:	5d                   	pop    ebp
c0026f16:	c3                   	ret    

c0026f17 <__floatsisf>:
c0026f17:	55                   	push   ebp
c0026f18:	89 e5                	mov    ebp,esp
c0026f1a:	53                   	push   ebx
c0026f1b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026f1e:	85 d2                	test   edx,edx
c0026f20:	7e 2b                	jle    c0026f4d <__floatsisf+0x36>
c0026f22:	0f bd ca             	bsr    ecx,edx
c0026f25:	83 f1 1f             	xor    ecx,0x1f
c0026f28:	d3 e2                	shl    edx,cl
c0026f2a:	89 d0                	mov    eax,edx
c0026f2c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f31:	89 c3                	mov    ebx,eax
c0026f33:	c1 eb 08             	shr    ebx,0x8
c0026f36:	80 e2 7f             	and    dl,0x7f
c0026f39:	0f 95 c2             	setne  dl
c0026f3c:	09 da                	or     edx,ebx
c0026f3e:	83 e2 01             	and    edx,0x1
c0026f41:	c1 e8 07             	shr    eax,0x7
c0026f44:	21 c2                	and    edx,eax
c0026f46:	b8 9e 00 00 00       	mov    eax,0x9e
c0026f4b:	eb 32                	jmp    c0026f7f <__floatsisf+0x68>
c0026f4d:	b8 00 00 00 00       	mov    eax,0x0
c0026f52:	74 34                	je     c0026f88 <__floatsisf+0x71>
c0026f54:	f7 da                	neg    edx
c0026f56:	0f bd ca             	bsr    ecx,edx
c0026f59:	83 f1 1f             	xor    ecx,0x1f
c0026f5c:	d3 e2                	shl    edx,cl
c0026f5e:	89 d0                	mov    eax,edx
c0026f60:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026f65:	89 c3                	mov    ebx,eax
c0026f67:	c1 eb 08             	shr    ebx,0x8
c0026f6a:	80 e2 7f             	and    dl,0x7f
c0026f6d:	0f 95 c2             	setne  dl
c0026f70:	09 da                	or     edx,ebx
c0026f72:	83 e2 01             	and    edx,0x1
c0026f75:	c1 e8 07             	shr    eax,0x7
c0026f78:	21 c2                	and    edx,eax
c0026f7a:	b8 9e 01 00 00       	mov    eax,0x19e
c0026f7f:	29 c8                	sub    eax,ecx
c0026f81:	c1 e0 17             	shl    eax,0x17
c0026f84:	09 d8                	or     eax,ebx
c0026f86:	01 d0                	add    eax,edx
c0026f88:	5b                   	pop    ebx
c0026f89:	5d                   	pop    ebp
c0026f8a:	c3                   	ret    

c0026f8b <__floatunsisf>:
c0026f8b:	55                   	push   ebp
c0026f8c:	89 e5                	mov    ebp,esp
c0026f8e:	53                   	push   ebx
c0026f8f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026f92:	31 c0                	xor    eax,eax
c0026f94:	85 d2                	test   edx,edx
c0026f96:	74 32                	je     c0026fca <__floatunsisf+0x3f>
c0026f98:	0f bd ca             	bsr    ecx,edx
c0026f9b:	83 f1 1f             	xor    ecx,0x1f
c0026f9e:	d3 e2                	shl    edx,cl
c0026fa0:	89 d0                	mov    eax,edx
c0026fa2:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0026fa7:	89 c3                	mov    ebx,eax
c0026fa9:	c1 eb 08             	shr    ebx,0x8
c0026fac:	80 e2 7f             	and    dl,0x7f
c0026faf:	0f 95 c2             	setne  dl
c0026fb2:	09 da                	or     edx,ebx
c0026fb4:	83 e2 01             	and    edx,0x1
c0026fb7:	c1 e8 07             	shr    eax,0x7
c0026fba:	21 c2                	and    edx,eax
c0026fbc:	b8 9e 00 00 00       	mov    eax,0x9e
c0026fc1:	29 c8                	sub    eax,ecx
c0026fc3:	c1 e0 17             	shl    eax,0x17
c0026fc6:	09 d8                	or     eax,ebx
c0026fc8:	01 d0                	add    eax,edx
c0026fca:	5b                   	pop    ebx
c0026fcb:	5d                   	pop    ebp
c0026fcc:	c3                   	ret    

c0026fcd <__fixsfsi>:
c0026fcd:	55                   	push   ebp
c0026fce:	89 e5                	mov    ebp,esp
c0026fd0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0026fd3:	89 d1                	mov    ecx,edx
c0026fd5:	c1 e1 08             	shl    ecx,0x8
c0026fd8:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0026fde:	c1 fa 17             	sar    edx,0x17
c0026fe1:	78 1c                	js     c0026fff <__fixsfsi+0x32>
c0026fe3:	83 ea 7f             	sub    edx,0x7f
c0026fe6:	31 c0                	xor    eax,eax
c0026fe8:	83 fa 1e             	cmp    edx,0x1e
c0026feb:	77 40                	ja     c002702d <__fixsfsi+0x60>
c0026fed:	89 c8                	mov    eax,ecx
c0026fef:	0d 00 00 00 80       	or     eax,0x80000000
c0026ff4:	b9 1f 00 00 00       	mov    ecx,0x1f
c0026ff9:	29 d1                	sub    ecx,edx
c0026ffb:	d3 e8                	shr    eax,cl
c0026ffd:	eb 2e                	jmp    c002702d <__fixsfsi+0x60>
c0026fff:	31 c0                	xor    eax,eax
c0027001:	81 c2 81 00 00 00    	add    edx,0x81
c0027007:	78 24                	js     c002702d <__fixsfsi+0x60>
c0027009:	83 fa 1e             	cmp    edx,0x1e
c002700c:	7e 09                	jle    c0027017 <__fixsfsi+0x4a>
c002700e:	83 fa 1f             	cmp    edx,0x1f
c0027011:	75 18                	jne    c002702b <__fixsfsi+0x5e>
c0027013:	85 c9                	test   ecx,ecx
c0027015:	75 14                	jne    c002702b <__fixsfsi+0x5e>
c0027017:	89 c8                	mov    eax,ecx
c0027019:	0d 00 00 00 80       	or     eax,0x80000000
c002701e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027023:	29 d1                	sub    ecx,edx
c0027025:	d3 e8                	shr    eax,cl
c0027027:	f7 d8                	neg    eax
c0027029:	eb 02                	jmp    c002702d <__fixsfsi+0x60>
c002702b:	31 c0                	xor    eax,eax
c002702d:	5d                   	pop    ebp
c002702e:	c3                   	ret    

c002702f <__fixunssfsi>:
c002702f:	55                   	push   ebp
c0027030:	89 e5                	mov    ebp,esp
c0027032:	53                   	push   ebx
c0027033:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027036:	89 d3                	mov    ebx,edx
c0027038:	c1 fb 17             	sar    ebx,0x17
c002703b:	83 eb 7f             	sub    ebx,0x7f
c002703e:	31 c0                	xor    eax,eax
c0027040:	83 fb 1f             	cmp    ebx,0x1f
c0027043:	77 18                	ja     c002705d <__fixunssfsi+0x2e>
c0027045:	89 d0                	mov    eax,edx
c0027047:	c1 e0 08             	shl    eax,0x8
c002704a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002704f:	0d 00 00 00 80       	or     eax,0x80000000
c0027054:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027059:	29 d9                	sub    ecx,ebx
c002705b:	d3 e8                	shr    eax,cl
c002705d:	5b                   	pop    ebx
c002705e:	5d                   	pop    ebp
c002705f:	c3                   	ret    

c0027060 <__cmpsf2>:
c0027060:	55                   	push   ebp
c0027061:	89 e5                	mov    ebp,esp
c0027063:	57                   	push   edi
c0027064:	56                   	push   esi
c0027065:	53                   	push   ebx
c0027066:	83 ec 24             	sub    esp,0x24
c0027069:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002706c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002706f:	e8 4f 10 00 00       	call   c00280c3 <__truncdfsf2>
c0027074:	5a                   	pop    edx
c0027075:	59                   	pop    ecx
c0027076:	89 c3                	mov    ebx,eax
c0027078:	c1 e8 17             	shr    eax,0x17
c002707b:	0f b6 f0             	movzx  esi,al
c002707e:	89 d8                	mov    eax,ebx
c0027080:	c1 e8 1f             	shr    eax,0x1f
c0027083:	31 c6                	xor    esi,eax
c0027085:	c1 e3 08             	shl    ebx,0x8
c0027088:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002708b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002708e:	e8 30 10 00 00       	call   c00280c3 <__truncdfsf2>
c0027093:	83 c4 10             	add    esp,0x10
c0027096:	89 c1                	mov    ecx,eax
c0027098:	c1 e9 17             	shr    ecx,0x17
c002709b:	0f b6 c9             	movzx  ecx,cl
c002709e:	89 c7                	mov    edi,eax
c00270a0:	c1 ef 1f             	shr    edi,0x1f
c00270a3:	89 ca                	mov    edx,ecx
c00270a5:	31 fa                	xor    edx,edi
c00270a7:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00270aa:	c1 e0 08             	shl    eax,0x8
c00270ad:	89 c2                	mov    edx,eax
c00270af:	89 d8                	mov    eax,ebx
c00270b1:	09 d0                	or     eax,edx
c00270b3:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00270b8:	09 f0                	or     eax,esi
c00270ba:	75 08                	jne    c00270c4 <__cmpsf2+0x64>
c00270bc:	31 c0                	xor    eax,eax
c00270be:	39 f9                	cmp    ecx,edi
c00270c0:	75 0c                	jne    c00270ce <__cmpsf2+0x6e>
c00270c2:	eb 29                	jmp    c00270ed <__cmpsf2+0x8d>
c00270c4:	b8 01 00 00 00       	mov    eax,0x1
c00270c9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00270cc:	7f 1f                	jg     c00270ed <__cmpsf2+0x8d>
c00270ce:	83 c8 ff             	or     eax,0xffffffff
c00270d1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c00270d4:	7c 17                	jl     c00270ed <__cmpsf2+0x8d>
c00270d6:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00270dc:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00270e2:	b8 01 00 00 00       	mov    eax,0x1
c00270e7:	39 d3                	cmp    ebx,edx
c00270e9:	77 02                	ja     c00270ed <__cmpsf2+0x8d>
c00270eb:	19 c0                	sbb    eax,eax
c00270ed:	8d 65 f4             	lea    esp,[ebp-0xc]
c00270f0:	5b                   	pop    ebx
c00270f1:	5e                   	pop    esi
c00270f2:	5f                   	pop    edi
c00270f3:	5d                   	pop    ebp
c00270f4:	c3                   	ret    

c00270f5 <__eqsf2>:
c00270f5:	55                   	push   ebp
c00270f6:	89 e5                	mov    ebp,esp
c00270f8:	83 ec 24             	sub    esp,0x24
c00270fb:	6a 01                	push   0x1
c00270fd:	83 ec 0c             	sub    esp,0xc
c0027100:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027103:	e8 df 10 00 00       	call   c00281e7 <__extendsfdf2>
c0027108:	83 c4 10             	add    esp,0x10
c002710b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002710e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027111:	52                   	push   edx
c0027112:	50                   	push   eax
c0027113:	50                   	push   eax
c0027114:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027117:	e8 cb 10 00 00       	call   c00281e7 <__extendsfdf2>
c002711c:	59                   	pop    ecx
c002711d:	59                   	pop    ecx
c002711e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027121:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027124:	52                   	push   edx
c0027125:	50                   	push   eax
c0027126:	e8 35 ff ff ff       	call   c0027060 <__cmpsf2>
c002712b:	83 c4 20             	add    esp,0x20
c002712e:	c9                   	leave  
c002712f:	c3                   	ret    

c0027130 <__nesf2>:
c0027130:	eb c3                	jmp    c00270f5 <__eqsf2>

c0027132 <__gtsf2>:
c0027132:	55                   	push   ebp
c0027133:	89 e5                	mov    ebp,esp
c0027135:	83 ec 24             	sub    esp,0x24
c0027138:	6a ff                	push   0xffffffff
c002713a:	83 ec 0c             	sub    esp,0xc
c002713d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027140:	e8 a2 10 00 00       	call   c00281e7 <__extendsfdf2>
c0027145:	83 c4 10             	add    esp,0x10
c0027148:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002714b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c002714e:	52                   	push   edx
c002714f:	50                   	push   eax
c0027150:	50                   	push   eax
c0027151:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027154:	e8 8e 10 00 00       	call   c00281e7 <__extendsfdf2>
c0027159:	59                   	pop    ecx
c002715a:	59                   	pop    ecx
c002715b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c002715e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027161:	52                   	push   edx
c0027162:	50                   	push   eax
c0027163:	e8 f8 fe ff ff       	call   c0027060 <__cmpsf2>
c0027168:	83 c4 20             	add    esp,0x20
c002716b:	c9                   	leave  
c002716c:	c3                   	ret    

c002716d <__gesf2>:
c002716d:	eb c3                	jmp    c0027132 <__gtsf2>

c002716f <__ltsf2>:
c002716f:	eb 84                	jmp    c00270f5 <__eqsf2>

c0027171 <__lesf2>:
c0027171:	eb 82                	jmp    c00270f5 <__eqsf2>

c0027173 <__adddf3>:
c0027173:	55                   	push   ebp
c0027174:	89 e5                	mov    ebp,esp
c0027176:	57                   	push   edi
c0027177:	56                   	push   esi
c0027178:	53                   	push   ebx
c0027179:	83 ec 24             	sub    esp,0x24
c002717c:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c002717f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027182:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027185:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027188:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c002718b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c002718e:	89 c8                	mov    eax,ecx
c0027190:	89 ce                	mov    esi,ecx
c0027192:	c1 fe 14             	sar    esi,0x14
c0027195:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027198:	89 fb                	mov    ebx,edi
c002719a:	89 fa                	mov    edx,edi
c002719c:	c1 e2 0b             	shl    edx,0xb
c002719f:	c1 e0 0b             	shl    eax,0xb
c00271a2:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00271a7:	c1 eb 15             	shr    ebx,0x15
c00271aa:	09 d8                	or     eax,ebx
c00271ac:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00271af:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c00271b2:	c1 fe 14             	sar    esi,0x14
c00271b5:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c00271b8:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00271bb:	89 f3                	mov    ebx,esi
c00271bd:	c1 e3 0b             	shl    ebx,0xb
c00271c0:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c00271c3:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00271c6:	c1 e3 0b             	shl    ebx,0xb
c00271c9:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c00271cf:	c1 ee 15             	shr    esi,0x15
c00271d2:	09 f3                	or     ebx,esi
c00271d4:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c00271d7:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00271da:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c00271dd:	0f 88 5f 02 00 00    	js     c0027442 <__adddf3+0x2cf>
c00271e3:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00271e6:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c00271e9:	85 db                	test   ebx,ebx
c00271eb:	0f 8e c7 00 00 00    	jle    c00272b8 <__adddf3+0x145>
c00271f1:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c00271f8:	75 1a                	jne    c0027214 <__adddf3+0xa1>
c00271fa:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00271fd:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027200:	0f 84 b2 05 00 00    	je     c00277b8 <__adddf3+0x645>
c0027206:	4b                   	dec    ebx
c0027207:	75 23                	jne    c002722c <__adddf3+0xb9>
c0027209:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c002720c:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c002720f:	e9 99 00 00 00       	jmp    c00272ad <__adddf3+0x13a>
c0027214:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027217:	f7 d6                	not    esi
c0027219:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002721f:	0f 84 93 05 00 00    	je     c00277b8 <__adddf3+0x645>
c0027225:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002722c:	83 fb 1f             	cmp    ebx,0x1f
c002722f:	7e 42                	jle    c0027273 <__adddf3+0x100>
c0027231:	83 fb 3f             	cmp    ebx,0x3f
c0027234:	0f 8f 7e 05 00 00    	jg     c00277b8 <__adddf3+0x645>
c002723a:	83 e3 1f             	and    ebx,0x1f
c002723d:	89 d9                	mov    ecx,ebx
c002723f:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027242:	d3 ef                	shr    edi,cl
c0027244:	31 db                	xor    ebx,ebx
c0027246:	85 c9                	test   ecx,ecx
c0027248:	74 15                	je     c002725f <__adddf3+0xec>
c002724a:	be 20 00 00 00       	mov    esi,0x20
c002724f:	29 ce                	sub    esi,ecx
c0027251:	89 f1                	mov    ecx,esi
c0027253:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027256:	d3 e6                	shl    esi,cl
c0027258:	31 db                	xor    ebx,ebx
c002725a:	85 f6                	test   esi,esi
c002725c:	0f 95 c3             	setne  bl
c002725f:	31 c9                	xor    ecx,ecx
c0027261:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027265:	0f 95 c1             	setne  cl
c0027268:	09 cf                	or     edi,ecx
c002726a:	09 fb                	or     ebx,edi
c002726c:	01 da                	add    edx,ebx
c002726e:	83 d0 00             	adc    eax,0x0
c0027271:	eb 3a                	jmp    c00272ad <__adddf3+0x13a>
c0027273:	bf 20 00 00 00       	mov    edi,0x20
c0027278:	29 df                	sub    edi,ebx
c002727a:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002727d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027280:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027283:	d3 e6                	shl    esi,cl
c0027285:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027288:	88 d9                	mov    cl,bl
c002728a:	d3 ef                	shr    edi,cl
c002728c:	09 fe                	or     esi,edi
c002728e:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027291:	88 d9                	mov    cl,bl
c0027293:	d3 ef                	shr    edi,cl
c0027295:	89 fb                	mov    ebx,edi
c0027297:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002729a:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002729d:	d3 e7                	shl    edi,cl
c002729f:	85 ff                	test   edi,edi
c00272a1:	0f 95 c1             	setne  cl
c00272a4:	0f b6 c9             	movzx  ecx,cl
c00272a7:	09 ce                	or     esi,ecx
c00272a9:	01 f2                	add    edx,esi
c00272ab:	11 d8                	adc    eax,ebx
c00272ad:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00272b0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00272b3:	e9 52 01 00 00       	jmp    c002740a <__adddf3+0x297>
c00272b8:	0f 84 d5 00 00 00    	je     c0027393 <__adddf3+0x220>
c00272be:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00272c1:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c00272c4:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00272c7:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00272ca:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00272d1:	75 20                	jne    c00272f3 <__adddf3+0x180>
c00272d3:	89 d6                	mov    esi,edx
c00272d5:	09 c6                	or     esi,eax
c00272d7:	0f 84 db 04 00 00    	je     c00277b8 <__adddf3+0x645>
c00272dd:	4b                   	dec    ebx
c00272de:	75 29                	jne    c0027309 <__adddf3+0x196>
c00272e0:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00272e3:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00272e6:	01 d1                	add    ecx,edx
c00272e8:	11 c6                	adc    esi,eax
c00272ea:	89 f0                	mov    eax,esi
c00272ec:	89 ca                	mov    edx,ecx
c00272ee:	e9 17 01 00 00       	jmp    c002740a <__adddf3+0x297>
c00272f3:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c00272f6:	f7 d6                	not    esi
c00272f8:	81 e6 ff 07 00 00    	and    esi,0x7ff
c00272fe:	0f 84 b4 04 00 00    	je     c00277b8 <__adddf3+0x645>
c0027304:	0d 00 00 00 80       	or     eax,0x80000000
c0027309:	83 fb 1f             	cmp    ebx,0x1f
c002730c:	7e 48                	jle    c0027356 <__adddf3+0x1e3>
c002730e:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027311:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027314:	83 fb 3f             	cmp    ebx,0x3f
c0027317:	0f 8f 9b 04 00 00    	jg     c00277b8 <__adddf3+0x645>
c002731d:	83 e3 1f             	and    ebx,0x1f
c0027320:	89 d9                	mov    ecx,ebx
c0027322:	89 c7                	mov    edi,eax
c0027324:	d3 ef                	shr    edi,cl
c0027326:	31 db                	xor    ebx,ebx
c0027328:	85 c9                	test   ecx,ecx
c002732a:	74 12                	je     c002733e <__adddf3+0x1cb>
c002732c:	be 20 00 00 00       	mov    esi,0x20
c0027331:	29 ce                	sub    esi,ecx
c0027333:	89 f1                	mov    ecx,esi
c0027335:	d3 e0                	shl    eax,cl
c0027337:	31 db                	xor    ebx,ebx
c0027339:	85 c0                	test   eax,eax
c002733b:	0f 95 c3             	setne  bl
c002733e:	31 c0                	xor    eax,eax
c0027340:	85 d2                	test   edx,edx
c0027342:	0f 95 c0             	setne  al
c0027345:	09 c7                	or     edi,eax
c0027347:	09 fb                	or     ebx,edi
c0027349:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002734c:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002734f:	01 da                	add    edx,ebx
c0027351:	83 d6 00             	adc    esi,0x0
c0027354:	eb 39                	jmp    c002738f <__adddf3+0x21c>
c0027356:	be 20 00 00 00       	mov    esi,0x20
c002735b:	29 de                	sub    esi,ebx
c002735d:	89 c7                	mov    edi,eax
c002735f:	89 f1                	mov    ecx,esi
c0027361:	d3 e7                	shl    edi,cl
c0027363:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027366:	89 d7                	mov    edi,edx
c0027368:	88 d9                	mov    cl,bl
c002736a:	d3 ef                	shr    edi,cl
c002736c:	89 f9                	mov    ecx,edi
c002736e:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027371:	09 cf                	or     edi,ecx
c0027373:	88 d9                	mov    cl,bl
c0027375:	d3 e8                	shr    eax,cl
c0027377:	89 f1                	mov    ecx,esi
c0027379:	d3 e2                	shl    edx,cl
c002737b:	85 d2                	test   edx,edx
c002737d:	0f 95 c2             	setne  dl
c0027380:	0f b6 d2             	movzx  edx,dl
c0027383:	09 d7                	or     edi,edx
c0027385:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027388:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002738b:	01 fa                	add    edx,edi
c002738d:	11 c6                	adc    esi,eax
c002738f:	89 f0                	mov    eax,esi
c0027391:	eb 77                	jmp    c002740a <__adddf3+0x297>
c0027393:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027396:	46                   	inc    esi
c0027397:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c002739a:	81 e6 fe 07 00 00    	and    esi,0x7fe
c00273a0:	75 41                	jne    c00273e3 <__adddf3+0x270>
c00273a2:	89 d3                	mov    ebx,edx
c00273a4:	09 c3                	or     ebx,eax
c00273a6:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c00273ad:	75 27                	jne    c00273d6 <__adddf3+0x263>
c00273af:	85 db                	test   ebx,ebx
c00273b1:	0f 84 fb 03 00 00    	je     c00277b2 <__adddf3+0x63f>
c00273b7:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00273ba:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c00273bd:	0f 84 f5 03 00 00    	je     c00277b8 <__adddf3+0x645>
c00273c3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00273c6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00273c9:	85 c0                	test   eax,eax
c00273cb:	0f 89 91 03 00 00    	jns    c0027762 <__adddf3+0x5ef>
c00273d1:	e9 85 03 00 00       	jmp    c002775b <__adddf3+0x5e8>
c00273d6:	85 db                	test   ebx,ebx
c00273d8:	0f 85 da 03 00 00    	jne    c00277b8 <__adddf3+0x645>
c00273de:	e9 cf 03 00 00       	jmp    c00277b2 <__adddf3+0x63f>
c00273e3:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c00273e6:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c00273e9:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00273ec:	f7 d1                	not    ecx
c00273ee:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00273f4:	0f 84 70 03 00 00    	je     c002776a <__adddf3+0x5f7>
c00273fa:	d1 ea                	shr    edx,1
c00273fc:	89 c1                	mov    ecx,eax
c00273fe:	c1 e1 1f             	shl    ecx,0x1f
c0027401:	09 ca                	or     edx,ecx
c0027403:	d1 e8                	shr    eax,1
c0027405:	e9 6f 03 00 00       	jmp    c0027779 <__adddf3+0x606>
c002740a:	85 c0                	test   eax,eax
c002740c:	0f 89 67 03 00 00    	jns    c0027779 <__adddf3+0x606>
c0027412:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027415:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027418:	f7 d1                	not    ecx
c002741a:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027420:	0f 84 44 03 00 00    	je     c002776a <__adddf3+0x5f7>
c0027426:	89 d1                	mov    ecx,edx
c0027428:	d1 e9                	shr    ecx,1
c002742a:	83 e2 01             	and    edx,0x1
c002742d:	09 ca                	or     edx,ecx
c002742f:	89 c1                	mov    ecx,eax
c0027431:	c1 e1 1f             	shl    ecx,0x1f
c0027434:	09 ca                	or     edx,ecx
c0027436:	d1 e8                	shr    eax,1
c0027438:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002743d:	e9 37 03 00 00       	jmp    c0027779 <__adddf3+0x606>
c0027442:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027445:	81 e6 ff 07 00 00    	and    esi,0x7ff
c002744b:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c002744e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027451:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027457:	29 de                	sub    esi,ebx
c0027459:	85 f6                	test   esi,esi
c002745b:	0f 8e bd 00 00 00    	jle    c002751e <__adddf3+0x3ab>
c0027461:	85 db                	test   ebx,ebx
c0027463:	75 17                	jne    c002747c <__adddf3+0x309>
c0027465:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027468:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002746b:	0f 84 47 03 00 00    	je     c00277b8 <__adddf3+0x645>
c0027471:	4e                   	dec    esi
c0027472:	75 20                	jne    c0027494 <__adddf3+0x321>
c0027474:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027477:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002747a:	eb 5b                	jmp    c00274d7 <__adddf3+0x364>
c002747c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002747f:	f7 d3                	not    ebx
c0027481:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027487:	0f 84 2b 03 00 00    	je     c00277b8 <__adddf3+0x645>
c002748d:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027494:	83 fe 1f             	cmp    esi,0x1f
c0027497:	7e 49                	jle    c00274e2 <__adddf3+0x36f>
c0027499:	83 fe 3f             	cmp    esi,0x3f
c002749c:	0f 8f 16 03 00 00    	jg     c00277b8 <__adddf3+0x645>
c00274a2:	83 e6 1f             	and    esi,0x1f
c00274a5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00274a8:	89 f1                	mov    ecx,esi
c00274aa:	d3 ef                	shr    edi,cl
c00274ac:	31 db                	xor    ebx,ebx
c00274ae:	85 f6                	test   esi,esi
c00274b0:	74 13                	je     c00274c5 <__adddf3+0x352>
c00274b2:	b9 20 00 00 00       	mov    ecx,0x20
c00274b7:	29 f1                	sub    ecx,esi
c00274b9:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00274bc:	d3 e6                	shl    esi,cl
c00274be:	31 db                	xor    ebx,ebx
c00274c0:	85 f6                	test   esi,esi
c00274c2:	0f 95 c3             	setne  bl
c00274c5:	31 c9                	xor    ecx,ecx
c00274c7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00274cb:	0f 95 c1             	setne  cl
c00274ce:	09 cf                	or     edi,ecx
c00274d0:	09 fb                	or     ebx,edi
c00274d2:	29 da                	sub    edx,ebx
c00274d4:	83 d8 00             	sbb    eax,0x0
c00274d7:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00274da:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00274dd:	e9 aa 01 00 00       	jmp    c002768c <__adddf3+0x519>
c00274e2:	bf 20 00 00 00       	mov    edi,0x20
c00274e7:	29 f7                	sub    edi,esi
c00274e9:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00274ec:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00274ef:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00274f2:	d3 e3                	shl    ebx,cl
c00274f4:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00274f7:	89 f1                	mov    ecx,esi
c00274f9:	d3 ef                	shr    edi,cl
c00274fb:	09 fb                	or     ebx,edi
c00274fd:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027500:	89 f1                	mov    ecx,esi
c0027502:	d3 ef                	shr    edi,cl
c0027504:	89 fe                	mov    esi,edi
c0027506:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027509:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c002750c:	d3 e7                	shl    edi,cl
c002750e:	85 ff                	test   edi,edi
c0027510:	0f 95 c1             	setne  cl
c0027513:	0f b6 c9             	movzx  ecx,cl
c0027516:	09 cb                	or     ebx,ecx
c0027518:	29 da                	sub    edx,ebx
c002751a:	19 f0                	sbb    eax,esi
c002751c:	eb b9                	jmp    c00274d7 <__adddf3+0x364>
c002751e:	0f 84 cd 00 00 00    	je     c00275f1 <__adddf3+0x47e>
c0027524:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c0027527:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002752a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002752d:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027531:	75 1b                	jne    c002754e <__adddf3+0x3db>
c0027533:	89 d6                	mov    esi,edx
c0027535:	09 c6                	or     esi,eax
c0027537:	0f 84 7b 02 00 00    	je     c00277b8 <__adddf3+0x645>
c002753d:	4b                   	dec    ebx
c002753e:	75 24                	jne    c0027564 <__adddf3+0x3f1>
c0027540:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027543:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027546:	29 d1                	sub    ecx,edx
c0027548:	19 c6                	sbb    esi,eax
c002754a:	89 ca                	mov    edx,ecx
c002754c:	eb 61                	jmp    c00275af <__adddf3+0x43c>
c002754e:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027551:	f7 d6                	not    esi
c0027553:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027559:	0f 84 59 02 00 00    	je     c00277b8 <__adddf3+0x645>
c002755f:	0d 00 00 00 80       	or     eax,0x80000000
c0027564:	83 fb 1f             	cmp    ebx,0x1f
c0027567:	7e 4d                	jle    c00275b6 <__adddf3+0x443>
c0027569:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002756c:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c002756f:	83 fb 3f             	cmp    ebx,0x3f
c0027572:	0f 8f 40 02 00 00    	jg     c00277b8 <__adddf3+0x645>
c0027578:	83 e3 1f             	and    ebx,0x1f
c002757b:	89 d9                	mov    ecx,ebx
c002757d:	89 c7                	mov    edi,eax
c002757f:	d3 ef                	shr    edi,cl
c0027581:	31 db                	xor    ebx,ebx
c0027583:	85 c9                	test   ecx,ecx
c0027585:	74 12                	je     c0027599 <__adddf3+0x426>
c0027587:	be 20 00 00 00       	mov    esi,0x20
c002758c:	29 ce                	sub    esi,ecx
c002758e:	89 f1                	mov    ecx,esi
c0027590:	d3 e0                	shl    eax,cl
c0027592:	31 db                	xor    ebx,ebx
c0027594:	85 c0                	test   eax,eax
c0027596:	0f 95 c3             	setne  bl
c0027599:	31 c0                	xor    eax,eax
c002759b:	85 d2                	test   edx,edx
c002759d:	0f 95 c0             	setne  al
c00275a0:	09 c7                	or     edi,eax
c00275a2:	09 fb                	or     ebx,edi
c00275a4:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275a7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00275aa:	29 da                	sub    edx,ebx
c00275ac:	83 de 00             	sbb    esi,0x0
c00275af:	89 f0                	mov    eax,esi
c00275b1:	e9 d6 00 00 00       	jmp    c002768c <__adddf3+0x519>
c00275b6:	be 20 00 00 00       	mov    esi,0x20
c00275bb:	29 de                	sub    esi,ebx
c00275bd:	89 c7                	mov    edi,eax
c00275bf:	89 f1                	mov    ecx,esi
c00275c1:	d3 e7                	shl    edi,cl
c00275c3:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c00275c6:	89 d7                	mov    edi,edx
c00275c8:	88 d9                	mov    cl,bl
c00275ca:	d3 ef                	shr    edi,cl
c00275cc:	89 f9                	mov    ecx,edi
c00275ce:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00275d1:	09 cf                	or     edi,ecx
c00275d3:	88 d9                	mov    cl,bl
c00275d5:	d3 e8                	shr    eax,cl
c00275d7:	89 f1                	mov    ecx,esi
c00275d9:	d3 e2                	shl    edx,cl
c00275db:	85 d2                	test   edx,edx
c00275dd:	0f 95 c2             	setne  dl
c00275e0:	0f b6 d2             	movzx  edx,dl
c00275e3:	09 d7                	or     edi,edx
c00275e5:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00275e8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00275eb:	29 fa                	sub    edx,edi
c00275ed:	19 c6                	sbb    esi,eax
c00275ef:	eb be                	jmp    c00275af <__adddf3+0x43c>
c00275f1:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00275f4:	8d 5e 01             	lea    ebx,[esi+0x1]
c00275f7:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00275fd:	75 6a                	jne    c0027669 <__adddf3+0x4f6>
c00275ff:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027603:	75 58                	jne    c002765d <__adddf3+0x4ea>
c0027605:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0027608:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c002760b:	89 d6                	mov    esi,edx
c002760d:	09 c6                	or     esi,eax
c002760f:	75 17                	jne    c0027628 <__adddf3+0x4b5>
c0027611:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027614:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027617:	85 db                	test   ebx,ebx
c0027619:	0f 85 99 01 00 00    	jne    c00277b8 <__adddf3+0x645>
c002761f:	31 ff                	xor    edi,edi
c0027621:	31 c9                	xor    ecx,ecx
c0027623:	e9 90 01 00 00       	jmp    c00277b8 <__adddf3+0x645>
c0027628:	85 db                	test   ebx,ebx
c002762a:	0f 84 88 01 00 00    	je     c00277b8 <__adddf3+0x645>
c0027630:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c0027633:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0027636:	85 c0                	test   eax,eax
c0027638:	79 10                	jns    c002764a <__adddf3+0x4d7>
c002763a:	31 c9                	xor    ecx,ecx
c002763c:	f7 da                	neg    edx
c002763e:	0f 95 c1             	setne  cl
c0027641:	01 c8                	add    eax,ecx
c0027643:	f7 d8                	neg    eax
c0027645:	e9 2f 01 00 00       	jmp    c0027779 <__adddf3+0x606>
c002764a:	31 ff                	xor    edi,edi
c002764c:	31 c9                	xor    ecx,ecx
c002764e:	89 c3                	mov    ebx,eax
c0027650:	09 d3                	or     ebx,edx
c0027652:	0f 84 60 01 00 00    	je     c00277b8 <__adddf3+0x645>
c0027658:	e9 05 01 00 00       	jmp    c0027762 <__adddf3+0x5ef>
c002765d:	31 ff                	xor    edi,edi
c002765f:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027664:	e9 4f 01 00 00       	jmp    c00277b8 <__adddf3+0x645>
c0027669:	89 c1                	mov    ecx,eax
c002766b:	89 d0                	mov    eax,edx
c002766d:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0027670:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c0027673:	89 ca                	mov    edx,ecx
c0027675:	85 c9                	test   ecx,ecx
c0027677:	79 2c                	jns    c00276a5 <__adddf3+0x532>
c0027679:	31 c9                	xor    ecx,ecx
c002767b:	f7 d8                	neg    eax
c002767d:	0f 95 c1             	setne  cl
c0027680:	01 ca                	add    edx,ecx
c0027682:	f7 da                	neg    edx
c0027684:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027687:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002768a:	eb 19                	jmp    c00276a5 <__adddf3+0x532>
c002768c:	85 c0                	test   eax,eax
c002768e:	0f 89 e5 00 00 00    	jns    c0027779 <__adddf3+0x606>
c0027694:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027699:	89 c1                	mov    ecx,eax
c002769b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002769e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00276a1:	89 d0                	mov    eax,edx
c00276a3:	89 ca                	mov    edx,ecx
c00276a5:	85 d2                	test   edx,edx
c00276a7:	74 59                	je     c0027702 <__adddf3+0x58f>
c00276a9:	0f bd da             	bsr    ebx,edx
c00276ac:	83 f3 1f             	xor    ebx,0x1f
c00276af:	88 d9                	mov    cl,bl
c00276b1:	d3 e2                	shl    edx,cl
c00276b3:	bf 20 00 00 00       	mov    edi,0x20
c00276b8:	89 f9                	mov    ecx,edi
c00276ba:	29 d9                	sub    ecx,ebx
c00276bc:	89 c6                	mov    esi,eax
c00276be:	d3 ee                	shr    esi,cl
c00276c0:	09 d6                	or     esi,edx
c00276c2:	88 d9                	mov    cl,bl
c00276c4:	d3 e0                	shl    eax,cl
c00276c6:	89 c2                	mov    edx,eax
c00276c8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00276cb:	25 ff 07 00 00       	and    eax,0x7ff
c00276d0:	39 d8                	cmp    eax,ebx
c00276d2:	7f 22                	jg     c00276f6 <__adddf3+0x583>
c00276d4:	29 c3                	sub    ebx,eax
c00276d6:	43                   	inc    ebx
c00276d7:	88 d9                	mov    cl,bl
c00276d9:	d3 ea                	shr    edx,cl
c00276db:	29 df                	sub    edi,ebx
c00276dd:	89 f9                	mov    ecx,edi
c00276df:	89 f0                	mov    eax,esi
c00276e1:	d3 e0                	shl    eax,cl
c00276e3:	09 c2                	or     edx,eax
c00276e5:	89 f0                	mov    eax,esi
c00276e7:	88 d9                	mov    cl,bl
c00276e9:	d3 e8                	shr    eax,cl
c00276eb:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00276ee:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00276f4:	eb 6f                	jmp    c0027765 <__adddf3+0x5f2>
c00276f6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00276f9:	29 d8                	sub    eax,ebx
c00276fb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00276fe:	89 f0                	mov    eax,esi
c0027700:	eb 59                	jmp    c002775b <__adddf3+0x5e8>
c0027702:	85 c0                	test   eax,eax
c0027704:	74 6a                	je     c0027770 <__adddf3+0x5fd>
c0027706:	0f bd c8             	bsr    ecx,eax
c0027709:	83 f1 1f             	xor    ecx,0x1f
c002770c:	d3 e0                	shl    eax,cl
c002770e:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027711:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027717:	83 c1 20             	add    ecx,0x20
c002771a:	39 cb                	cmp    ebx,ecx
c002771c:	7f 35                	jg     c0027753 <__adddf3+0x5e0>
c002771e:	29 d9                	sub    ecx,ebx
c0027720:	8d 71 01             	lea    esi,[ecx+0x1]
c0027723:	83 fe 1f             	cmp    esi,0x1f
c0027726:	7e 09                	jle    c0027731 <__adddf3+0x5be>
c0027728:	83 e9 1f             	sub    ecx,0x1f
c002772b:	d3 e8                	shr    eax,cl
c002772d:	89 c3                	mov    ebx,eax
c002772f:	eb 11                	jmp    c0027742 <__adddf3+0x5cf>
c0027731:	b9 20 00 00 00       	mov    ecx,0x20
c0027736:	29 f1                	sub    ecx,esi
c0027738:	89 c3                	mov    ebx,eax
c002773a:	d3 e3                	shl    ebx,cl
c002773c:	89 f1                	mov    ecx,esi
c002773e:	d3 e8                	shr    eax,cl
c0027740:	89 c2                	mov    edx,eax
c0027742:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027745:	25 00 f8 ff ff       	and    eax,0xfffff800
c002774a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002774d:	89 d0                	mov    eax,edx
c002774f:	89 da                	mov    edx,ebx
c0027751:	eb 26                	jmp    c0027779 <__adddf3+0x606>
c0027753:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027756:	29 cf                	sub    edi,ecx
c0027758:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c002775b:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027760:	eb 17                	jmp    c0027779 <__adddf3+0x606>
c0027762:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027765:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027768:	eb 0f                	jmp    c0027779 <__adddf3+0x606>
c002776a:	31 d2                	xor    edx,edx
c002776c:	31 c0                	xor    eax,eax
c002776e:	eb 09                	jmp    c0027779 <__adddf3+0x606>
c0027770:	89 c2                	mov    edx,eax
c0027772:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0027779:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002777c:	c1 e1 14             	shl    ecx,0x14
c002777f:	89 c3                	mov    ebx,eax
c0027781:	c1 eb 0b             	shr    ebx,0xb
c0027784:	09 d9                	or     ecx,ebx
c0027786:	89 d3                	mov    ebx,edx
c0027788:	c1 eb 0b             	shr    ebx,0xb
c002778b:	c1 e0 15             	shl    eax,0x15
c002778e:	09 d8                	or     eax,ebx
c0027790:	89 c7                	mov    edi,eax
c0027792:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0027798:	0f 95 c0             	setne  al
c002779b:	89 c6                	mov    esi,eax
c002779d:	09 f3                	or     ebx,esi
c002779f:	83 e3 01             	and    ebx,0x1
c00277a2:	c1 ea 0a             	shr    edx,0xa
c00277a5:	21 da                	and    edx,ebx
c00277a7:	89 f8                	mov    eax,edi
c00277a9:	01 d0                	add    eax,edx
c00277ab:	83 d1 00             	adc    ecx,0x0
c00277ae:	89 c7                	mov    edi,eax
c00277b0:	eb 06                	jmp    c00277b8 <__adddf3+0x645>
c00277b2:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00277b5:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00277b8:	89 f8                	mov    eax,edi
c00277ba:	89 ca                	mov    edx,ecx
c00277bc:	83 c4 24             	add    esp,0x24
c00277bf:	5b                   	pop    ebx
c00277c0:	5e                   	pop    esi
c00277c1:	5f                   	pop    edi
c00277c2:	5d                   	pop    ebp
c00277c3:	c3                   	ret    

c00277c4 <__subdf3>:
c00277c4:	55                   	push   ebp
c00277c5:	89 e5                	mov    ebp,esp
c00277c7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00277ca:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00277cd:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00277d3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00277d6:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00277d9:	5d                   	pop    ebp
c00277da:	e9 94 f9 ff ff       	jmp    c0027173 <__adddf3>

c00277df <__negdf2>:
c00277df:	55                   	push   ebp
c00277e0:	89 e5                	mov    ebp,esp
c00277e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00277e5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00277e8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00277ee:	5d                   	pop    ebp
c00277ef:	c3                   	ret    

c00277f0 <__muldf3>:
c00277f0:	55                   	push   ebp
c00277f1:	89 e5                	mov    ebp,esp
c00277f3:	57                   	push   edi
c00277f4:	56                   	push   esi
c00277f5:	53                   	push   ebx
c00277f6:	83 ec 24             	sub    esp,0x24
c00277f9:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00277fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00277ff:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027802:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027805:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027808:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c002780b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c002780e:	89 c8                	mov    eax,ecx
c0027810:	c1 f8 14             	sar    eax,0x14
c0027813:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027816:	89 f8                	mov    eax,edi
c0027818:	89 fb                	mov    ebx,edi
c002781a:	c1 e3 0b             	shl    ebx,0xb
c002781d:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c0027820:	c1 e1 0b             	shl    ecx,0xb
c0027823:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027829:	c1 e8 15             	shr    eax,0x15
c002782c:	09 c1                	or     ecx,eax
c002782e:	89 d6                	mov    esi,edx
c0027830:	89 d0                	mov    eax,edx
c0027832:	c1 f8 14             	sar    eax,0x14
c0027835:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0027838:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c002783b:	89 c3                	mov    ebx,eax
c002783d:	c1 e3 0b             	shl    ebx,0xb
c0027840:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027843:	c1 e6 0b             	shl    esi,0xb
c0027846:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c002784c:	c1 e8 15             	shr    eax,0x15
c002784f:	09 c6                	or     esi,eax
c0027851:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027854:	25 ff 07 00 00       	and    eax,0x7ff
c0027859:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002785c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002785f:	25 ff 07 00 00       	and    eax,0x7ff
c0027864:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027867:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c002786a:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c002786d:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c0027874:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027877:	40                   	inc    eax
c0027878:	a9 fe 07 00 00       	test   eax,0x7fe
c002787d:	0f 85 8d 00 00 00    	jne    c0027910 <__muldf3+0x120>
c0027883:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027886:	09 c8                	or     eax,ecx
c0027888:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c002788c:	74 44                	je     c00278d2 <__muldf3+0xe2>
c002788e:	85 c0                	test   eax,eax
c0027890:	0f 85 31 02 00 00    	jne    c0027ac7 <__muldf3+0x2d7>
c0027896:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027899:	40                   	inc    eax
c002789a:	a9 fe 07 00 00       	test   eax,0x7fe
c002789f:	75 13                	jne    c00278b4 <__muldf3+0xc4>
c00278a1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c00278a4:	09 f1                	or     ecx,esi
c00278a6:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00278aa:	74 22                	je     c00278ce <__muldf3+0xde>
c00278ac:	85 c9                	test   ecx,ecx
c00278ae:	0f 85 0d 02 00 00    	jne    c0027ac1 <__muldf3+0x2d1>
c00278b4:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c00278b8:	0f 89 09 02 00 00    	jns    c0027ac7 <__muldf3+0x2d7>
c00278be:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00278c1:	05 00 00 00 80       	add    eax,0x80000000
c00278c6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00278c9:	e9 f9 01 00 00       	jmp    c0027ac7 <__muldf3+0x2d7>
c00278ce:	85 c9                	test   ecx,ecx
c00278d0:	eb 2e                	jmp    c0027900 <__muldf3+0x110>
c00278d2:	85 c0                	test   eax,eax
c00278d4:	74 20                	je     c00278f6 <__muldf3+0x106>
c00278d6:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00278d9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00278dc:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00278df:	c1 ef 1f             	shr    edi,0x1f
c00278e2:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00278e5:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00278e8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00278eb:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00278ee:	09 f9                	or     ecx,edi
c00278f0:	78 1e                	js     c0027910 <__muldf3+0x120>
c00278f2:	89 c3                	mov    ebx,eax
c00278f4:	eb e0                	jmp    c00278d6 <__muldf3+0xe6>
c00278f6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00278f9:	f7 d0                	not    eax
c00278fb:	a9 ff 07 00 00       	test   eax,0x7ff
c0027900:	75 b2                	jne    c00278b4 <__muldf3+0xc4>
c0027902:	31 ff                	xor    edi,edi
c0027904:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c002790b:	e9 b7 01 00 00       	jmp    c0027ac7 <__muldf3+0x2d7>
c0027910:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027913:	40                   	inc    eax
c0027914:	a9 fe 07 00 00       	test   eax,0x7fe
c0027919:	75 57                	jne    c0027972 <__muldf3+0x182>
c002791b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002791e:	09 f0                	or     eax,esi
c0027920:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0027924:	74 23                	je     c0027949 <__muldf3+0x159>
c0027926:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c002792a:	0f 89 91 01 00 00    	jns    c0027ac1 <__muldf3+0x2d1>
c0027930:	85 c0                	test   eax,eax
c0027932:	0f 85 89 01 00 00    	jne    c0027ac1 <__muldf3+0x2d1>
c0027938:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002793b:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0027941:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027944:	e9 7e 01 00 00       	jmp    c0027ac7 <__muldf3+0x2d7>
c0027949:	85 c0                	test   eax,eax
c002794b:	75 0c                	jne    c0027959 <__muldf3+0x169>
c002794d:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0027951:	0f 89 6a 01 00 00    	jns    c0027ac1 <__muldf3+0x2d1>
c0027957:	eb df                	jmp    c0027938 <__muldf3+0x148>
c0027959:	01 f6                	add    esi,esi
c002795b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002795e:	c1 ea 1f             	shr    edx,0x1f
c0027961:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027964:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c0027967:	8d 43 ff             	lea    eax,[ebx-0x1]
c002796a:	09 d6                	or     esi,edx
c002796c:	78 04                	js     c0027972 <__muldf3+0x182>
c002796e:	89 c3                	mov    ebx,eax
c0027970:	eb e7                	jmp    c0027959 <__muldf3+0x169>
c0027972:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0027978:	81 ce 00 00 00 80    	or     esi,0x80000000
c002797e:	89 c8                	mov    eax,ecx
c0027980:	f7 e6                	mul    esi
c0027982:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c0027985:	89 c7                	mov    edi,eax
c0027987:	89 c8                	mov    eax,ecx
c0027989:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c002798c:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c002798f:	89 c1                	mov    ecx,eax
c0027991:	89 f0                	mov    eax,esi
c0027993:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c0027996:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0027999:	89 c6                	mov    esi,eax
c002799b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002799e:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c00279a1:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c00279a4:	31 c0                	xor    eax,eax
c00279a6:	01 f1                	add    ecx,esi
c00279a8:	0f 92 c0             	setb   al
c00279ab:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c00279ae:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c00279b1:	83 d6 00             	adc    esi,0x0
c00279b4:	01 c7                	add    edi,eax
c00279b6:	83 d6 00             	adc    esi,0x0
c00279b9:	01 ca                	add    edx,ecx
c00279bb:	0f 92 c1             	setb   cl
c00279be:	0f b6 c9             	movzx  ecx,cl
c00279c1:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c00279c4:	83 d6 00             	adc    esi,0x0
c00279c7:	01 cf                	add    edi,ecx
c00279c9:	83 d6 00             	adc    esi,0x0
c00279cc:	31 c9                	xor    ecx,ecx
c00279ce:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00279d1:	0f 95 c1             	setne  cl
c00279d4:	09 cf                	or     edi,ecx
c00279d6:	85 f6                	test   esi,esi
c00279d8:	78 0c                	js     c00279e6 <__muldf3+0x1f6>
c00279da:	01 f6                	add    esi,esi
c00279dc:	89 f8                	mov    eax,edi
c00279de:	c1 e8 1f             	shr    eax,0x1f
c00279e1:	09 c6                	or     esi,eax
c00279e3:	01 ff                	add    edi,edi
c00279e5:	4b                   	dec    ebx
c00279e6:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00279ec:	0f 8f 85 00 00 00    	jg     c0027a77 <__muldf3+0x287>
c00279f2:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00279f8:	85 db                	test   ebx,ebx
c00279fa:	0f 8f 84 00 00 00    	jg     c0027a84 <__muldf3+0x294>
c0027a00:	83 fb cc             	cmp    ebx,0xffffffcc
c0027a03:	7c 79                	jl     c0027a7e <__muldf3+0x28e>
c0027a05:	ba 01 00 00 00       	mov    edx,0x1
c0027a0a:	29 da                	sub    edx,ebx
c0027a0c:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027a12:	83 fa 1f             	cmp    edx,0x1f
c0027a15:	7e 30                	jle    c0027a47 <__muldf3+0x257>
c0027a17:	83 fa 20             	cmp    edx,0x20
c0027a1a:	75 0b                	jne    c0027a27 <__muldf3+0x237>
c0027a1c:	31 c0                	xor    eax,eax
c0027a1e:	85 ff                	test   edi,edi
c0027a20:	0f 95 c0             	setne  al
c0027a23:	89 c7                	mov    edi,eax
c0027a25:	eb 1a                	jmp    c0027a41 <__muldf3+0x251>
c0027a27:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0027a2a:	89 f0                	mov    eax,esi
c0027a2c:	d3 e0                	shl    eax,cl
c0027a2e:	09 f8                	or     eax,edi
c0027a30:	0f 95 c0             	setne  al
c0027a33:	0f b6 c0             	movzx  eax,al
c0027a36:	89 c7                	mov    edi,eax
c0027a38:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027a3d:	29 d9                	sub    ecx,ebx
c0027a3f:	d3 ee                	shr    esi,cl
c0027a41:	09 f7                	or     edi,esi
c0027a43:	31 db                	xor    ebx,ebx
c0027a45:	eb 3b                	jmp    c0027a82 <__muldf3+0x292>
c0027a47:	83 c3 1f             	add    ebx,0x1f
c0027a4a:	89 f0                	mov    eax,esi
c0027a4c:	88 d9                	mov    cl,bl
c0027a4e:	d3 e0                	shl    eax,cl
c0027a50:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027a53:	89 f8                	mov    eax,edi
c0027a55:	88 d1                	mov    cl,dl
c0027a57:	d3 e8                	shr    eax,cl
c0027a59:	89 c1                	mov    ecx,eax
c0027a5b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0027a5e:	09 c8                	or     eax,ecx
c0027a60:	88 d9                	mov    cl,bl
c0027a62:	d3 e7                	shl    edi,cl
c0027a64:	31 db                	xor    ebx,ebx
c0027a66:	85 ff                	test   edi,edi
c0027a68:	0f 95 c3             	setne  bl
c0027a6b:	89 df                	mov    edi,ebx
c0027a6d:	09 c7                	or     edi,eax
c0027a6f:	88 d1                	mov    cl,dl
c0027a71:	d3 ee                	shr    esi,cl
c0027a73:	31 db                	xor    ebx,ebx
c0027a75:	eb 0d                	jmp    c0027a84 <__muldf3+0x294>
c0027a77:	bb ff 07 00 00       	mov    ebx,0x7ff
c0027a7c:	eb 02                	jmp    c0027a80 <__muldf3+0x290>
c0027a7e:	31 db                	xor    ebx,ebx
c0027a80:	31 ff                	xor    edi,edi
c0027a82:	31 f6                	xor    esi,esi
c0027a84:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027a87:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0027a8a:	25 00 f8 ff ff       	and    eax,0xfffff800
c0027a8f:	09 c3                	or     ebx,eax
c0027a91:	c1 e3 14             	shl    ebx,0x14
c0027a94:	89 f0                	mov    eax,esi
c0027a96:	c1 e8 0b             	shr    eax,0xb
c0027a99:	09 c3                	or     ebx,eax
c0027a9b:	89 f8                	mov    eax,edi
c0027a9d:	c1 e8 0b             	shr    eax,0xb
c0027aa0:	c1 e6 15             	shl    esi,0x15
c0027aa3:	09 c6                	or     esi,eax
c0027aa5:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0027aab:	0f 95 c1             	setne  cl
c0027aae:	09 c8                	or     eax,ecx
c0027ab0:	83 e0 01             	and    eax,0x1
c0027ab3:	c1 ef 0a             	shr    edi,0xa
c0027ab6:	21 c7                	and    edi,eax
c0027ab8:	01 f7                	add    edi,esi
c0027aba:	83 d3 00             	adc    ebx,0x0
c0027abd:	89 da                	mov    edx,ebx
c0027abf:	eb 03                	jmp    c0027ac4 <__muldf3+0x2d4>
c0027ac1:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0027ac4:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0027ac7:	89 f8                	mov    eax,edi
c0027ac9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0027acc:	83 c4 24             	add    esp,0x24
c0027acf:	5b                   	pop    ebx
c0027ad0:	5e                   	pop    esi
c0027ad1:	5f                   	pop    edi
c0027ad2:	5d                   	pop    ebp
c0027ad3:	c3                   	ret    

c0027ad4 <__divdf3>:
c0027ad4:	55                   	push   ebp
c0027ad5:	89 e5                	mov    ebp,esp
c0027ad7:	57                   	push   edi
c0027ad8:	56                   	push   esi
c0027ad9:	53                   	push   ebx
c0027ada:	83 ec 2c             	sub    esp,0x2c
c0027add:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027ae0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027ae3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027ae6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c0027ae9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027aec:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0027aef:	89 ce                	mov    esi,ecx
c0027af1:	89 c8                	mov    eax,ecx
c0027af3:	c1 f8 14             	sar    eax,0x14
c0027af6:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027af9:	89 f8                	mov    eax,edi
c0027afb:	89 fb                	mov    ebx,edi
c0027afd:	c1 e3 0b             	shl    ebx,0xb
c0027b00:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c0027b03:	c1 e6 0b             	shl    esi,0xb
c0027b06:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0027b0c:	c1 e8 15             	shr    eax,0x15
c0027b0f:	09 c6                	or     esi,eax
c0027b11:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c0027b14:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0027b17:	89 c2                	mov    edx,eax
c0027b19:	c1 fa 14             	sar    edx,0x14
c0027b1c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027b1f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0027b22:	89 de                	mov    esi,ebx
c0027b24:	c1 e6 0b             	shl    esi,0xb
c0027b27:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027b2a:	c1 e0 0b             	shl    eax,0xb
c0027b2d:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027b32:	c1 eb 15             	shr    ebx,0x15
c0027b35:	09 d8                	or     eax,ebx
c0027b37:	89 c2                	mov    edx,eax
c0027b39:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027b3c:	25 ff 07 00 00       	and    eax,0x7ff
c0027b41:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c0027b44:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027b47:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0027b4d:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0027b50:	29 d8                	sub    eax,ebx
c0027b52:	05 ff 03 00 00       	add    eax,0x3ff
c0027b57:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027b5a:	46                   	inc    esi
c0027b5b:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027b61:	0f 85 a5 00 00 00    	jne    c0027c0c <__divdf3+0x138>
c0027b67:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027b6a:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0027b6d:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0027b71:	74 2a                	je     c0027b9d <__divdf3+0xc9>
c0027b73:	85 f6                	test   esi,esi
c0027b75:	0f 85 cc 02 00 00    	jne    c0027e47 <__divdf3+0x373>
c0027b7b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027b7e:	40                   	inc    eax
c0027b7f:	a9 fe 07 00 00       	test   eax,0x7fe
c0027b84:	75 26                	jne    c0027bac <__divdf3+0xd8>
c0027b86:	85 db                	test   ebx,ebx
c0027b88:	74 22                	je     c0027bac <__divdf3+0xd8>
c0027b8a:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027b8d:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027b90:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027b93:	09 d0                	or     eax,edx
c0027b95:	0f 85 ac 02 00 00    	jne    c0027e47 <__divdf3+0x373>
c0027b9b:	eb 63                	jmp    c0027c00 <__divdf3+0x12c>
c0027b9d:	85 f6                	test   esi,esi
c0027b9f:	75 22                	jne    c0027bc3 <__divdf3+0xef>
c0027ba1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0027ba4:	40                   	inc    eax
c0027ba5:	a9 fe 07 00 00       	test   eax,0x7fe
c0027baa:	74 36                	je     c0027be2 <__divdf3+0x10e>
c0027bac:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027bb0:	0f 89 91 02 00 00    	jns    c0027e47 <__divdf3+0x373>
c0027bb6:	89 f8                	mov    eax,edi
c0027bb8:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0027bbe:	e9 80 02 00 00       	jmp    c0027e43 <__divdf3+0x36f>
c0027bc3:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027bc6:	01 f6                	add    esi,esi
c0027bc8:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027bcb:	c1 ef 1f             	shr    edi,0x1f
c0027bce:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027bd1:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c0027bd4:	8d 48 ff             	lea    ecx,[eax-0x1]
c0027bd7:	09 f7                	or     edi,esi
c0027bd9:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c0027bdc:	78 2e                	js     c0027c0c <__divdf3+0x138>
c0027bde:	89 c8                	mov    eax,ecx
c0027be0:	eb e1                	jmp    c0027bc3 <__divdf3+0xef>
c0027be2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0027be5:	09 d0                	or     eax,edx
c0027be7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027beb:	74 0f                	je     c0027bfc <__divdf3+0x128>
c0027bed:	85 c0                	test   eax,eax
c0027bef:	74 bb                	je     c0027bac <__divdf3+0xd8>
c0027bf1:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027bf4:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027bf7:	e9 4b 02 00 00       	jmp    c0027e47 <__divdf3+0x373>
c0027bfc:	85 c0                	test   eax,eax
c0027bfe:	75 ac                	jne    c0027bac <__divdf3+0xd8>
c0027c00:	31 ff                	xor    edi,edi
c0027c02:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c0027c07:	e9 3b 02 00 00       	jmp    c0027e47 <__divdf3+0x373>
c0027c0c:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027c0f:	8d 4f 01             	lea    ecx,[edi+0x1]
c0027c12:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c0027c18:	75 6b                	jne    c0027c85 <__divdf3+0x1b1>
c0027c1a:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027c1d:	09 d6                	or     esi,edx
c0027c1f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c0027c23:	74 28                	je     c0027c4d <__divdf3+0x179>
c0027c25:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0027c28:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0027c2b:	85 f6                	test   esi,esi
c0027c2d:	0f 85 14 02 00 00    	jne    c0027e47 <__divdf3+0x373>
c0027c33:	31 ff                	xor    edi,edi
c0027c35:	31 c9                	xor    ecx,ecx
c0027c37:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c3a:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027c3d:	0f 89 04 02 00 00    	jns    c0027e47 <__divdf3+0x373>
c0027c43:	b9 00 00 00 80       	mov    ecx,0x80000000
c0027c48:	e9 fa 01 00 00       	jmp    c0027e47 <__divdf3+0x373>
c0027c4d:	85 f6                	test   esi,esi
c0027c4f:	75 1b                	jne    c0027c6c <__divdf3+0x198>
c0027c51:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0027c54:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0027c57:	25 00 00 00 80       	and    eax,0x80000000
c0027c5c:	31 c9                	xor    ecx,ecx
c0027c5e:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c0027c63:	89 cf                	mov    edi,ecx
c0027c65:	89 c1                	mov    ecx,eax
c0027c67:	e9 db 01 00 00       	jmp    c0027e47 <__divdf3+0x373>
c0027c6c:	01 d2                	add    edx,edx
c0027c6e:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027c71:	c1 eb 1f             	shr    ebx,0x1f
c0027c74:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027c77:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0027c7a:	8d 48 01             	lea    ecx,[eax+0x1]
c0027c7d:	09 da                	or     edx,ebx
c0027c7f:	78 04                	js     c0027c85 <__divdf3+0x1b1>
c0027c81:	89 c8                	mov    eax,ecx
c0027c83:	eb e7                	jmp    c0027c6c <__divdf3+0x198>
c0027c85:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027c88:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027c8e:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027c94:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c0027c97:	39 d6                	cmp    esi,edx
c0027c99:	77 0d                	ja     c0027ca8 <__divdf3+0x1d4>
c0027c9b:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0027c9e:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0027ca1:	72 1b                	jb     c0027cbe <__divdf3+0x1ea>
c0027ca3:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c0027ca6:	75 16                	jne    c0027cbe <__divdf3+0x1ea>
c0027ca8:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027cab:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027cae:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0027cb1:	83 de 00             	sbb    esi,0x0
c0027cb4:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c0027cb7:	ba 01 00 00 00       	mov    edx,0x1
c0027cbc:	eb 02                	jmp    c0027cc0 <__divdf3+0x1ec>
c0027cbe:	31 d2                	xor    edx,edx
c0027cc0:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c0027cc7:	31 ff                	xor    edi,edi
c0027cc9:	01 ff                	add    edi,edi
c0027ccb:	89 d1                	mov    ecx,edx
c0027ccd:	c1 e9 1f             	shr    ecx,0x1f
c0027cd0:	09 cf                	or     edi,ecx
c0027cd2:	8d 1c 12             	lea    ebx,[edx+edx*1]
c0027cd5:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c0027cd8:	89 da                	mov    edx,ebx
c0027cda:	89 f3                	mov    ebx,esi
c0027cdc:	8d 34 36             	lea    esi,[esi+esi*1]
c0027cdf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027ce2:	c1 e9 1f             	shr    ecx,0x1f
c0027ce5:	09 ce                	or     esi,ecx
c0027ce7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027cea:	01 c9                	add    ecx,ecx
c0027cec:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c0027cef:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027cf2:	85 db                	test   ebx,ebx
c0027cf4:	78 29                	js     c0027d1f <__divdf3+0x24b>
c0027cf6:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c0027cf9:	72 07                	jb     c0027d02 <__divdf3+0x22e>
c0027cfb:	75 3c                	jne    c0027d39 <__divdf3+0x265>
c0027cfd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027d00:	77 37                	ja     c0027d39 <__divdf3+0x265>
c0027d02:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027d05:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c0027d08:	31 d2                	xor    edx,edx
c0027d0a:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c0027d0d:	0f 97 c2             	seta   dl
c0027d10:	29 d6                	sub    esi,edx
c0027d12:	89 d9                	mov    ecx,ebx
c0027d14:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c0027d17:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c0027d1a:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0027d1d:	eb 17                	jmp    c0027d36 <__divdf3+0x262>
c0027d1f:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0027d22:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027d25:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0027d28:	0f 97 c1             	seta   cl
c0027d2b:	0f b6 c9             	movzx  ecx,cl
c0027d2e:	29 ce                	sub    esi,ecx
c0027d30:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c0027d33:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c0027d36:	83 ca 01             	or     edx,0x1
c0027d39:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0027d3c:	75 8b                	jne    c0027cc9 <__divdf3+0x1f5>
c0027d3e:	c1 e7 09             	shl    edi,0x9
c0027d41:	89 d1                	mov    ecx,edx
c0027d43:	c1 e9 17             	shr    ecx,0x17
c0027d46:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027d49:	09 f3                	or     ebx,esi
c0027d4b:	0f 95 c3             	setne  bl
c0027d4e:	0f b6 db             	movzx  ebx,bl
c0027d51:	c1 e2 09             	shl    edx,0x9
c0027d54:	09 d3                	or     ebx,edx
c0027d56:	89 ca                	mov    edx,ecx
c0027d58:	09 fa                	or     edx,edi
c0027d5a:	78 0c                	js     c0027d68 <__divdf3+0x294>
c0027d5c:	01 d2                	add    edx,edx
c0027d5e:	89 d9                	mov    ecx,ebx
c0027d60:	c1 e9 1f             	shr    ecx,0x1f
c0027d63:	09 ca                	or     edx,ecx
c0027d65:	01 db                	add    ebx,ebx
c0027d67:	48                   	dec    eax
c0027d68:	3d fe 07 00 00       	cmp    eax,0x7fe
c0027d6d:	0f 8f 83 00 00 00    	jg     c0027df6 <__divdf3+0x322>
c0027d73:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027d79:	85 c0                	test   eax,eax
c0027d7b:	0f 8f 82 00 00 00    	jg     c0027e03 <__divdf3+0x32f>
c0027d81:	83 f8 cc             	cmp    eax,0xffffffcc
c0027d84:	7c 77                	jl     c0027dfd <__divdf3+0x329>
c0027d86:	be 01 00 00 00       	mov    esi,0x1
c0027d8b:	29 c6                	sub    esi,eax
c0027d8d:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027d93:	83 fe 1f             	cmp    esi,0x1f
c0027d96:	7e 2f                	jle    c0027dc7 <__divdf3+0x2f3>
c0027d98:	83 fe 20             	cmp    esi,0x20
c0027d9b:	75 0a                	jne    c0027da7 <__divdf3+0x2d3>
c0027d9d:	85 db                	test   ebx,ebx
c0027d9f:	0f 95 c3             	setne  bl
c0027da2:	0f b6 db             	movzx  ebx,bl
c0027da5:	eb 1a                	jmp    c0027dc1 <__divdf3+0x2ed>
c0027da7:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0027daa:	89 d7                	mov    edi,edx
c0027dac:	d3 e7                	shl    edi,cl
c0027dae:	89 f9                	mov    ecx,edi
c0027db0:	09 d9                	or     ecx,ebx
c0027db2:	0f 95 c3             	setne  bl
c0027db5:	0f b6 db             	movzx  ebx,bl
c0027db8:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0027dbd:	29 c1                	sub    ecx,eax
c0027dbf:	d3 ea                	shr    edx,cl
c0027dc1:	09 d3                	or     ebx,edx
c0027dc3:	31 c0                	xor    eax,eax
c0027dc5:	eb 3a                	jmp    c0027e01 <__divdf3+0x32d>
c0027dc7:	83 c0 1f             	add    eax,0x1f
c0027dca:	89 d7                	mov    edi,edx
c0027dcc:	88 c1                	mov    cl,al
c0027dce:	d3 e7                	shl    edi,cl
c0027dd0:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027dd3:	89 df                	mov    edi,ebx
c0027dd5:	89 f1                	mov    ecx,esi
c0027dd7:	d3 ef                	shr    edi,cl
c0027dd9:	89 f9                	mov    ecx,edi
c0027ddb:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c0027dde:	09 cf                	or     edi,ecx
c0027de0:	88 c1                	mov    cl,al
c0027de2:	d3 e3                	shl    ebx,cl
c0027de4:	85 db                	test   ebx,ebx
c0027de6:	0f 95 c3             	setne  bl
c0027de9:	0f b6 db             	movzx  ebx,bl
c0027dec:	09 fb                	or     ebx,edi
c0027dee:	89 f1                	mov    ecx,esi
c0027df0:	d3 ea                	shr    edx,cl
c0027df2:	31 c0                	xor    eax,eax
c0027df4:	eb 0d                	jmp    c0027e03 <__divdf3+0x32f>
c0027df6:	b8 ff 07 00 00       	mov    eax,0x7ff
c0027dfb:	eb 02                	jmp    c0027dff <__divdf3+0x32b>
c0027dfd:	31 c0                	xor    eax,eax
c0027dff:	31 db                	xor    ebx,ebx
c0027e01:	31 d2                	xor    edx,edx
c0027e03:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c0027e06:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c0027e09:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0027e0f:	09 c8                	or     eax,ecx
c0027e11:	c1 e0 14             	shl    eax,0x14
c0027e14:	89 d1                	mov    ecx,edx
c0027e16:	c1 e9 0b             	shr    ecx,0xb
c0027e19:	09 c8                	or     eax,ecx
c0027e1b:	89 c6                	mov    esi,eax
c0027e1d:	89 d9                	mov    ecx,ebx
c0027e1f:	c1 e9 0b             	shr    ecx,0xb
c0027e22:	c1 e2 15             	shl    edx,0x15
c0027e25:	09 ca                	or     edx,ecx
c0027e27:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0027e2d:	0f 95 c0             	setne  al
c0027e30:	09 c1                	or     ecx,eax
c0027e32:	83 e1 01             	and    ecx,0x1
c0027e35:	c1 eb 0a             	shr    ebx,0xa
c0027e38:	21 cb                	and    ebx,ecx
c0027e3a:	01 d3                	add    ebx,edx
c0027e3c:	89 d8                	mov    eax,ebx
c0027e3e:	83 d6 00             	adc    esi,0x0
c0027e41:	89 f2                	mov    edx,esi
c0027e43:	89 c7                	mov    edi,eax
c0027e45:	89 d1                	mov    ecx,edx
c0027e47:	89 f8                	mov    eax,edi
c0027e49:	89 ca                	mov    edx,ecx
c0027e4b:	83 c4 2c             	add    esp,0x2c
c0027e4e:	5b                   	pop    ebx
c0027e4f:	5e                   	pop    esi
c0027e50:	5f                   	pop    edi
c0027e51:	5d                   	pop    ebp
c0027e52:	c3                   	ret    

c0027e53 <__floatsidf>:
c0027e53:	55                   	push   ebp
c0027e54:	89 e5                	mov    ebp,esp
c0027e56:	56                   	push   esi
c0027e57:	53                   	push   ebx
c0027e58:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027e5b:	85 db                	test   ebx,ebx
c0027e5d:	7e 15                	jle    c0027e74 <__floatsidf+0x21>
c0027e5f:	0f bd cb             	bsr    ecx,ebx
c0027e62:	83 f1 1f             	xor    ecx,0x1f
c0027e65:	d3 e3                	shl    ebx,cl
c0027e67:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027e6d:	b8 1e 04 00 00       	mov    eax,0x41e
c0027e72:	eb 21                	jmp    c0027e95 <__floatsidf+0x42>
c0027e74:	b8 00 00 00 00       	mov    eax,0x0
c0027e79:	ba 00 00 00 00       	mov    edx,0x0
c0027e7e:	74 2a                	je     c0027eaa <__floatsidf+0x57>
c0027e80:	f7 db                	neg    ebx
c0027e82:	0f bd cb             	bsr    ecx,ebx
c0027e85:	83 f1 1f             	xor    ecx,0x1f
c0027e88:	d3 e3                	shl    ebx,cl
c0027e8a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027e90:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0027e95:	29 c8                	sub    eax,ecx
c0027e97:	c1 e0 14             	shl    eax,0x14
c0027e9a:	89 c1                	mov    ecx,eax
c0027e9c:	89 de                	mov    esi,ebx
c0027e9e:	c1 ee 0b             	shr    esi,0xb
c0027ea1:	09 f1                	or     ecx,esi
c0027ea3:	89 ca                	mov    edx,ecx
c0027ea5:	c1 e3 15             	shl    ebx,0x15
c0027ea8:	89 d8                	mov    eax,ebx
c0027eaa:	5b                   	pop    ebx
c0027eab:	5e                   	pop    esi
c0027eac:	5d                   	pop    ebp
c0027ead:	c3                   	ret    

c0027eae <__floatunsidf>:
c0027eae:	55                   	push   ebp
c0027eaf:	89 e5                	mov    ebp,esp
c0027eb1:	56                   	push   esi
c0027eb2:	53                   	push   ebx
c0027eb3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027eb6:	85 db                	test   ebx,ebx
c0027eb8:	74 2a                	je     c0027ee4 <__floatunsidf+0x36>
c0027eba:	0f bd cb             	bsr    ecx,ebx
c0027ebd:	83 f1 1f             	xor    ecx,0x1f
c0027ec0:	d3 e3                	shl    ebx,cl
c0027ec2:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0027ec8:	b8 1e 04 00 00       	mov    eax,0x41e
c0027ecd:	29 c8                	sub    eax,ecx
c0027ecf:	c1 e0 14             	shl    eax,0x14
c0027ed2:	89 c1                	mov    ecx,eax
c0027ed4:	89 de                	mov    esi,ebx
c0027ed6:	c1 ee 0b             	shr    esi,0xb
c0027ed9:	09 f1                	or     ecx,esi
c0027edb:	89 ca                	mov    edx,ecx
c0027edd:	c1 e3 15             	shl    ebx,0x15
c0027ee0:	89 d8                	mov    eax,ebx
c0027ee2:	eb 04                	jmp    c0027ee8 <__floatunsidf+0x3a>
c0027ee4:	31 c0                	xor    eax,eax
c0027ee6:	31 d2                	xor    edx,edx
c0027ee8:	5b                   	pop    ebx
c0027ee9:	5e                   	pop    esi
c0027eea:	5d                   	pop    ebp
c0027eeb:	c3                   	ret    

c0027eec <__fixdfsi>:
c0027eec:	55                   	push   ebp
c0027eed:	89 e5                	mov    ebp,esp
c0027eef:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027ef2:	89 d1                	mov    ecx,edx
c0027ef4:	c1 e1 0b             	shl    ecx,0xb
c0027ef7:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027efd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0027f00:	c1 e8 15             	shr    eax,0x15
c0027f03:	09 c1                	or     ecx,eax
c0027f05:	c1 fa 14             	sar    edx,0x14
c0027f08:	78 1f                	js     c0027f29 <__fixdfsi+0x3d>
c0027f0a:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0027f10:	31 c0                	xor    eax,eax
c0027f12:	83 fa 1e             	cmp    edx,0x1e
c0027f15:	77 40                	ja     c0027f57 <__fixdfsi+0x6b>
c0027f17:	89 c8                	mov    eax,ecx
c0027f19:	0d 00 00 00 80       	or     eax,0x80000000
c0027f1e:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027f23:	29 d1                	sub    ecx,edx
c0027f25:	d3 e8                	shr    eax,cl
c0027f27:	eb 2e                	jmp    c0027f57 <__fixdfsi+0x6b>
c0027f29:	31 c0                	xor    eax,eax
c0027f2b:	81 c2 01 04 00 00    	add    edx,0x401
c0027f31:	78 24                	js     c0027f57 <__fixdfsi+0x6b>
c0027f33:	83 fa 1e             	cmp    edx,0x1e
c0027f36:	7e 09                	jle    c0027f41 <__fixdfsi+0x55>
c0027f38:	83 fa 1f             	cmp    edx,0x1f
c0027f3b:	75 18                	jne    c0027f55 <__fixdfsi+0x69>
c0027f3d:	85 c9                	test   ecx,ecx
c0027f3f:	75 14                	jne    c0027f55 <__fixdfsi+0x69>
c0027f41:	89 c8                	mov    eax,ecx
c0027f43:	0d 00 00 00 80       	or     eax,0x80000000
c0027f48:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027f4d:	29 d1                	sub    ecx,edx
c0027f4f:	d3 e8                	shr    eax,cl
c0027f51:	f7 d8                	neg    eax
c0027f53:	eb 02                	jmp    c0027f57 <__fixdfsi+0x6b>
c0027f55:	31 c0                	xor    eax,eax
c0027f57:	5d                   	pop    ebp
c0027f58:	c3                   	ret    

c0027f59 <__fixunsdfsi>:
c0027f59:	55                   	push   ebp
c0027f5a:	89 e5                	mov    ebp,esp
c0027f5c:	53                   	push   ebx
c0027f5d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0027f60:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0027f63:	89 d3                	mov    ebx,edx
c0027f65:	c1 fb 14             	sar    ebx,0x14
c0027f68:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0027f6e:	31 c0                	xor    eax,eax
c0027f70:	83 fb 1f             	cmp    ebx,0x1f
c0027f73:	77 1d                	ja     c0027f92 <__fixunsdfsi+0x39>
c0027f75:	89 d0                	mov    eax,edx
c0027f77:	c1 e0 0b             	shl    eax,0xb
c0027f7a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027f7f:	c1 e9 15             	shr    ecx,0x15
c0027f82:	09 c8                	or     eax,ecx
c0027f84:	0d 00 00 00 80       	or     eax,0x80000000
c0027f89:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027f8e:	29 d9                	sub    ecx,ebx
c0027f90:	d3 e8                	shr    eax,cl
c0027f92:	5b                   	pop    ebx
c0027f93:	5d                   	pop    ebp
c0027f94:	c3                   	ret    

c0027f95 <__cmpdf2>:
c0027f95:	55                   	push   ebp
c0027f96:	89 e5                	mov    ebp,esp
c0027f98:	57                   	push   edi
c0027f99:	56                   	push   esi
c0027f9a:	53                   	push   ebx
c0027f9b:	83 ec 0c             	sub    esp,0xc
c0027f9e:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0027fa1:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027fa4:	89 ca                	mov    edx,ecx
c0027fa6:	c1 ea 14             	shr    edx,0x14
c0027fa9:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0027faf:	89 cb                	mov    ebx,ecx
c0027fb1:	c1 fb 1f             	sar    ebx,0x1f
c0027fb4:	31 da                	xor    edx,ebx
c0027fb6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0027fb9:	89 df                	mov    edi,ebx
c0027fbb:	c1 e7 0b             	shl    edi,0xb
c0027fbe:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027fc1:	c1 e1 0b             	shl    ecx,0xb
c0027fc4:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027fca:	c1 eb 15             	shr    ebx,0x15
c0027fcd:	09 d9                	or     ecx,ebx
c0027fcf:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0027fd2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0027fd5:	89 ce                	mov    esi,ecx
c0027fd7:	c1 ee 14             	shr    esi,0x14
c0027fda:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027fe0:	89 cb                	mov    ebx,ecx
c0027fe2:	c1 fb 1f             	sar    ebx,0x1f
c0027fe5:	31 de                	xor    esi,ebx
c0027fe7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0027fea:	89 df                	mov    edi,ebx
c0027fec:	c1 e7 0b             	shl    edi,0xb
c0027fef:	c1 e1 0b             	shl    ecx,0xb
c0027ff2:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0027ff8:	c1 eb 15             	shr    ebx,0x15
c0027ffb:	09 d9                	or     ecx,ebx
c0027ffd:	89 d3                	mov    ebx,edx
c0027fff:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028005:	43                   	inc    ebx
c0028006:	83 fb 01             	cmp    ebx,0x1
c0028009:	77 08                	ja     c0028013 <__cmpdf2+0x7e>
c002800b:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c002800e:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028011:	75 68                	jne    c002807b <__cmpdf2+0xe6>
c0028013:	89 f3                	mov    ebx,esi
c0028015:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c002801b:	43                   	inc    ebx
c002801c:	83 fb 01             	cmp    ebx,0x1
c002801f:	77 06                	ja     c0028027 <__cmpdf2+0x92>
c0028021:	89 fb                	mov    ebx,edi
c0028023:	09 cb                	or     ebx,ecx
c0028025:	75 54                	jne    c002807b <__cmpdf2+0xe6>
c0028027:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c002802a:	09 f8                	or     eax,edi
c002802c:	09 c8                	or     eax,ecx
c002802e:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028031:	75 12                	jne    c0028045 <__cmpdf2+0xb0>
c0028033:	8d 42 01             	lea    eax,[edx+0x1]
c0028036:	83 f8 01             	cmp    eax,0x1
c0028039:	77 0a                	ja     c0028045 <__cmpdf2+0xb0>
c002803b:	8d 5e 01             	lea    ebx,[esi+0x1]
c002803e:	31 c0                	xor    eax,eax
c0028040:	83 fb 01             	cmp    ebx,0x1
c0028043:	76 36                	jbe    c002807b <__cmpdf2+0xe6>
c0028045:	b8 01 00 00 00       	mov    eax,0x1
c002804a:	39 f2                	cmp    edx,esi
c002804c:	7f 2d                	jg     c002807b <__cmpdf2+0xe6>
c002804e:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028053:	7c 26                	jl     c002807b <__cmpdf2+0xe6>
c0028055:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028058:	77 07                	ja     c0028061 <__cmpdf2+0xcc>
c002805a:	72 16                	jb     c0028072 <__cmpdf2+0xdd>
c002805c:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c002805f:	76 0a                	jbe    c002806b <__cmpdf2+0xd6>
c0028061:	89 d0                	mov    eax,edx
c0028063:	c1 f8 1f             	sar    eax,0x1f
c0028066:	83 c8 01             	or     eax,0x1
c0028069:	eb 10                	jmp    c002807b <__cmpdf2+0xe6>
c002806b:	b8 00 00 00 00       	mov    eax,0x0
c0028070:	73 09                	jae    c002807b <__cmpdf2+0xe6>
c0028072:	89 d0                	mov    eax,edx
c0028074:	c1 f8 1f             	sar    eax,0x1f
c0028077:	83 e0 02             	and    eax,0x2
c002807a:	48                   	dec    eax
c002807b:	83 c4 0c             	add    esp,0xc
c002807e:	5b                   	pop    ebx
c002807f:	5e                   	pop    esi
c0028080:	5f                   	pop    edi
c0028081:	5d                   	pop    ebp
c0028082:	c3                   	ret    

c0028083 <__eqdf2>:
c0028083:	55                   	push   ebp
c0028084:	89 e5                	mov    ebp,esp
c0028086:	50                   	push   eax
c0028087:	6a 01                	push   0x1
c0028089:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c002808c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c002808f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028092:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028095:	e8 fb fe ff ff       	call   c0027f95 <__cmpdf2>
c002809a:	83 c4 18             	add    esp,0x18
c002809d:	c9                   	leave  
c002809e:	c3                   	ret    

c002809f <__nedf2>:
c002809f:	eb e2                	jmp    c0028083 <__eqdf2>

c00280a1 <__gtdf2>:
c00280a1:	55                   	push   ebp
c00280a2:	89 e5                	mov    ebp,esp
c00280a4:	50                   	push   eax
c00280a5:	6a ff                	push   0xffffffff
c00280a7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c00280aa:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c00280ad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00280b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00280b3:	e8 dd fe ff ff       	call   c0027f95 <__cmpdf2>
c00280b8:	83 c4 18             	add    esp,0x18
c00280bb:	c9                   	leave  
c00280bc:	c3                   	ret    

c00280bd <__gedf2>:
c00280bd:	eb e2                	jmp    c00280a1 <__gtdf2>

c00280bf <__ltdf2>:
c00280bf:	eb c2                	jmp    c0028083 <__eqdf2>

c00280c1 <__ledf2>:
c00280c1:	eb c0                	jmp    c0028083 <__eqdf2>

c00280c3 <__truncdfsf2>:
c00280c3:	55                   	push   ebp
c00280c4:	89 e5                	mov    ebp,esp
c00280c6:	57                   	push   edi
c00280c7:	56                   	push   esi
c00280c8:	53                   	push   ebx
c00280c9:	83 ec 0c             	sub    esp,0xc
c00280cc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00280cf:	89 d1                	mov    ecx,edx
c00280d1:	c1 f9 14             	sar    ecx,0x14
c00280d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00280d7:	89 df                	mov    edi,ebx
c00280d9:	c1 e7 0b             	shl    edi,0xb
c00280dc:	89 d0                	mov    eax,edx
c00280de:	c1 e0 0b             	shl    eax,0xb
c00280e1:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c00280e6:	c1 eb 15             	shr    ebx,0x15
c00280e9:	09 d8                	or     eax,ebx
c00280eb:	89 cb                	mov    ebx,ecx
c00280ed:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00280f3:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c00280f9:	81 fe fd 00 00 00    	cmp    esi,0xfd
c00280ff:	0f 86 9e 00 00 00    	jbe    c00281a3 <__truncdfsf2+0xe0>
c0028105:	85 db                	test   ebx,ebx
c0028107:	75 0a                	jne    c0028113 <__truncdfsf2+0x50>
c0028109:	c1 fa 17             	sar    edx,0x17
c002810c:	30 d2                	xor    dl,dl
c002810e:	e9 84 00 00 00       	jmp    c0028197 <__truncdfsf2+0xd4>
c0028113:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028119:	83 fe 83             	cmp    esi,0xffffff83
c002811c:	7d 4b                	jge    c0028169 <__truncdfsf2+0xa6>
c002811e:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028123:	29 f1                	sub    ecx,esi
c0028125:	83 f9 1f             	cmp    ecx,0x1f
c0028128:	7f 6b                	jg     c0028195 <__truncdfsf2+0xd2>
c002812a:	0d 00 00 00 80       	or     eax,0x80000000
c002812f:	89 c3                	mov    ebx,eax
c0028131:	d3 eb                	shr    ebx,cl
c0028133:	be 01 00 00 00       	mov    esi,0x1
c0028138:	d3 e6                	shl    esi,cl
c002813a:	4e                   	dec    esi
c002813b:	21 f0                	and    eax,esi
c002813d:	09 f8                	or     eax,edi
c002813f:	0f 95 c0             	setne  al
c0028142:	0f b6 c0             	movzx  eax,al
c0028145:	09 c3                	or     ebx,eax
c0028147:	89 d9                	mov    ecx,ebx
c0028149:	c1 e9 08             	shr    ecx,0x8
c002814c:	f6 c3 7f             	test   bl,0x7f
c002814f:	0f 95 c0             	setne  al
c0028152:	09 c8                	or     eax,ecx
c0028154:	83 e0 01             	and    eax,0x1
c0028157:	c1 eb 07             	shr    ebx,0x7
c002815a:	21 c3                	and    ebx,eax
c002815c:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028162:	09 d1                	or     ecx,edx
c0028164:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028167:	eb 76                	jmp    c00281df <__truncdfsf2+0x11c>
c0028169:	83 c6 80             	add    esi,0xffffff80
c002816c:	7e 1d                	jle    c002818b <__truncdfsf2+0xc8>
c002816e:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028174:	75 0b                	jne    c0028181 <__truncdfsf2+0xbe>
c0028176:	09 f8                	or     eax,edi
c0028178:	74 09                	je     c0028183 <__truncdfsf2+0xc0>
c002817a:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c002817f:	eb 02                	jmp    c0028183 <__truncdfsf2+0xc0>
c0028181:	31 c0                	xor    eax,eax
c0028183:	c1 fa 17             	sar    edx,0x17
c0028186:	80 ca ff             	or     dl,0xff
c0028189:	eb 0e                	jmp    c0028199 <__truncdfsf2+0xd6>
c002818b:	c1 fa 1f             	sar    edx,0x1f
c002818e:	c1 e2 08             	shl    edx,0x8
c0028191:	09 ca                	or     edx,ecx
c0028193:	eb 04                	jmp    c0028199 <__truncdfsf2+0xd6>
c0028195:	31 d2                	xor    edx,edx
c0028197:	31 c0                	xor    eax,eax
c0028199:	c1 e2 17             	shl    edx,0x17
c002819c:	c1 e8 08             	shr    eax,0x8
c002819f:	09 d0                	or     eax,edx
c00281a1:	eb 3c                	jmp    c00281df <__truncdfsf2+0x11c>
c00281a3:	81 e9 80 03 00 00    	sub    ecx,0x380
c00281a9:	89 ca                	mov    edx,ecx
c00281ab:	c1 fa 0b             	sar    edx,0xb
c00281ae:	c1 e2 08             	shl    edx,0x8
c00281b1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c00281b4:	31 db                	xor    ebx,ebx
c00281b6:	85 ff                	test   edi,edi
c00281b8:	0f 95 c3             	setne  bl
c00281bb:	09 d8                	or     eax,ebx
c00281bd:	89 c3                	mov    ebx,eax
c00281bf:	c1 eb 08             	shr    ebx,0x8
c00281c2:	a8 7f                	test   al,0x7f
c00281c4:	0f 95 c2             	setne  dl
c00281c7:	89 d6                	mov    esi,edx
c00281c9:	09 de                	or     esi,ebx
c00281cb:	83 e6 01             	and    esi,0x1
c00281ce:	c1 e8 07             	shr    eax,0x7
c00281d1:	21 f0                	and    eax,esi
c00281d3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00281d6:	09 ca                	or     edx,ecx
c00281d8:	c1 e2 17             	shl    edx,0x17
c00281db:	09 da                	or     edx,ebx
c00281dd:	01 d0                	add    eax,edx
c00281df:	83 c4 0c             	add    esp,0xc
c00281e2:	5b                   	pop    ebx
c00281e3:	5e                   	pop    esi
c00281e4:	5f                   	pop    edi
c00281e5:	5d                   	pop    ebp
c00281e6:	c3                   	ret    

c00281e7 <__extendsfdf2>:
c00281e7:	55                   	push   ebp
c00281e8:	89 e5                	mov    ebp,esp
c00281ea:	57                   	push   edi
c00281eb:	56                   	push   esi
c00281ec:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00281ef:	89 d1                	mov    ecx,edx
c00281f1:	c1 f9 17             	sar    ecx,0x17
c00281f4:	c1 e2 08             	shl    edx,0x8
c00281f7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00281fd:	89 c8                	mov    eax,ecx
c00281ff:	80 e4 f8             	and    ah,0xf8
c0028202:	8d 71 01             	lea    esi,[ecx+0x1]
c0028205:	81 e6 fe 00 00 00    	and    esi,0xfe
c002820b:	75 27                	jne    c0028234 <__extendsfdf2+0x4d>
c002820d:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028213:	75 18                	jne    c002822d <__extendsfdf2+0x46>
c0028215:	85 d2                	test   edx,edx
c0028217:	74 20                	je     c0028239 <__extendsfdf2+0x52>
c0028219:	41                   	inc    ecx
c002821a:	01 d2                	add    edx,edx
c002821c:	79 fb                	jns    c0028219 <__extendsfdf2+0x32>
c002821e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028224:	29 c8                	sub    eax,ecx
c0028226:	05 81 03 00 00       	add    eax,0x381
c002822b:	eb 0c                	jmp    c0028239 <__extendsfdf2+0x52>
c002822d:	05 00 07 00 00       	add    eax,0x700
c0028232:	eb 05                	jmp    c0028239 <__extendsfdf2+0x52>
c0028234:	05 80 03 00 00       	add    eax,0x380
c0028239:	c1 e0 14             	shl    eax,0x14
c002823c:	89 c1                	mov    ecx,eax
c002823e:	89 d0                	mov    eax,edx
c0028240:	c1 e8 0b             	shr    eax,0xb
c0028243:	09 c1                	or     ecx,eax
c0028245:	c1 e2 15             	shl    edx,0x15
c0028248:	89 d0                	mov    eax,edx
c002824a:	89 ca                	mov    edx,ecx
c002824c:	5e                   	pop    esi
c002824d:	5f                   	pop    edi
c002824e:	5d                   	pop    ebp
c002824f:	c3                   	ret    

c0028250 <fabs>:
c0028250:	83 ec 0c             	sub    esp,0xc
c0028253:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028257:	89 04 24             	mov    DWORD PTR [esp],eax
c002825a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c002825e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028263:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028267:	dd 04 24             	fld    QWORD PTR [esp]
c002826a:	83 c4 0c             	add    esp,0xc
c002826d:	c3                   	ret    
c002826e:	66 90                	xchg   ax,ax

c0028270 <lrint>:
c0028270:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028274:	83 ec 04             	sub    esp,0x4
c0028277:	db 1c 24             	fistp  DWORD PTR [esp]
c002827a:	58                   	pop    eax
c002827b:	c3                   	ret    

c002827c <lrintf>:
c002827c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028280:	83 ec 04             	sub    esp,0x4
c0028283:	db 1c 24             	fistp  DWORD PTR [esp]
c0028286:	58                   	pop    eax
c0028287:	c3                   	ret    

Disassembly of section .init:

c0028288 <_init>:
c0028288:	55                   	push   ebp
c0028289:	89 e5                	mov    ebp,esp
c002828b:	e8 88 7e fd ff       	call   c0000118 <frame_dummy>
c0028290:	e8 63 e0 ff ff       	call   c00262f8 <__do_global_ctors_aux>
c0028295:	5d                   	pop    ebp
c0028296:	c3                   	ret    

Disassembly of section .fini:

c0028297 <_fini>:
c0028297:	55                   	push   ebp
c0028298:	89 e5                	mov    ebp,esp
c002829a:	e8 09 7e fd ff       	call   c00000a8 <__do_global_dtors_aux>
c002829f:	5d                   	pop    ebp
c00282a0:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c00282a2 <Computer::~Computer()>:
c00282a2:	83 ec 0c             	sub    esp,0xc
c00282a5:	ba e8 9d 02 c0       	mov    edx,0xc0029de8
c00282aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282ae:	89 10                	mov    DWORD PTR [eax],edx
c00282b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00282b4:	83 ec 0c             	sub    esp,0xc
c00282b7:	50                   	push   eax
c00282b8:	e8 ad bb fe ff       	call   c0013e6a <Device::~Device()>
c00282bd:	83 c4 10             	add    esp,0x10
c00282c0:	90                   	nop
c00282c1:	83 c4 0c             	add    esp,0xc
c00282c4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c00282c6 <Computer::~Computer()>:
c00282c6:	83 ec 0c             	sub    esp,0xc
c00282c9:	83 ec 0c             	sub    esp,0xc
c00282cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00282d0:	e8 cd ff ff ff       	call   c00282a2 <Computer::~Computer()>
c00282d5:	83 c4 10             	add    esp,0x10
c00282d8:	83 ec 08             	sub    esp,0x8
c00282db:	68 ec 01 00 00       	push   0x1ec
c00282e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00282e4:	e8 a8 a7 fe ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c00282e9:	83 c4 10             	add    esp,0x10
c00282ec:	83 c4 0c             	add    esp,0xc
c00282ef:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c00282f0 <idleCommon()>:
c00282f0:	83 ec 0c             	sub    esp,0xc
c00282f3:	e8 1a 57 ff ff       	call   c001da12 <lockScheduler()>
c00282f8:	e8 51 5a ff ff       	call   c001dd4e <schedule()>
c00282fd:	83 c4 0c             	add    esp,0xc
c0028300:	e9 0f 57 ff ff       	jmp    c001da14 <unlockScheduler()>

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028306 <LinkedList<UnixFile>::~LinkedList()>:
c0028306:	90                   	nop
c0028307:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028308 <LinkedList<UnixFile>::LinkedList()>:
c0028308:	83 ec 0c             	sub    esp,0xc
c002830b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002830f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028315:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028319:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028320:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028324:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002832b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002832f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028335:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028339:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028344:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c002834b:	83 ec 0c             	sub    esp,0xc
c002834e:	68 a6 a0 02 c0       	push   0xc002a0a6
c0028353:	e8 19 a8 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0028358:	83 c4 10             	add    esp,0x10
c002835b:	90                   	nop
c002835c:	83 c4 0c             	add    esp,0xc
c002835f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028360 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028360:	83 ec 0c             	sub    esp,0xc
c0028363:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028368:	75 10                	jne    c002837a <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c002836a:	83 ec 0c             	sub    esp,0xc
c002836d:	68 c0 a0 02 c0       	push   0xc002a0c0
c0028372:	e8 76 1e ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c0028377:	83 c4 10             	add    esp,0x10
c002837a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002837e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028380:	85 c0                	test   eax,eax
c0028382:	74 34                	je     c00283b8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028384:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028388:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002838b:	85 c0                	test   eax,eax
c002838d:	74 29                	je     c00283b8 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c002838f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028393:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028396:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002839a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002839d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00283a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283af:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00283b6:	eb 65                	jmp    c002841d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00283b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283bc:	8b 00                	mov    eax,DWORD PTR [eax]
c00283be:	85 c0                	test   eax,eax
c00283c0:	75 4b                	jne    c002840d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00283c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283c9:	85 c0                	test   eax,eax
c00283cb:	75 40                	jne    c002840d <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c00283cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283d1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283d5:	89 10                	mov    DWORD PTR [eax],edx
c00283d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283db:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00283df:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00283e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00283e9:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00283f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00283f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00283f7:	85 c0                	test   eax,eax
c00283f9:	74 22                	je     c002841d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c00283fb:	83 ec 0c             	sub    esp,0xc
c00283fe:	68 e2 a0 02 c0       	push   0xc002a0e2
c0028403:	e8 e5 1d ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c0028408:	83 c4 10             	add    esp,0x10
c002840b:	eb 10                	jmp    c002841d <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c002840d:	83 ec 0c             	sub    esp,0xc
c0028410:	68 ec a0 02 c0       	push   0xc002a0ec
c0028415:	e8 d3 1d ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c002841a:	83 c4 10             	add    esp,0x10
c002841d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028421:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028424:	8d 50 01             	lea    edx,[eax+0x1]
c0028427:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002842b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002842e:	90                   	nop
c002842f:	83 c4 0c             	add    esp,0xc
c0028432:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0028434 <LinkedList<UnixFile>::getFirstElement()>:
c0028434:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028438:	8b 00                	mov    eax,DWORD PTR [eax]
c002843a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c002843c <LinkedList<UnixFile>::removeFirst()>:
c002843c:	83 ec 0c             	sub    esp,0xc
c002843f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028443:	8b 00                	mov    eax,DWORD PTR [eax]
c0028445:	85 c0                	test   eax,eax
c0028447:	75 12                	jne    c002845b <LinkedList<UnixFile>::removeFirst()+0x1f>
c0028449:	83 ec 0c             	sub    esp,0xc
c002844c:	68 f8 a0 02 c0       	push   0xc002a0f8
c0028451:	e8 97 1d ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c0028456:	83 c4 10             	add    esp,0x10
c0028459:	eb 7e                	jmp    c00284d9 <LinkedList<UnixFile>::removeFirst()+0x9d>
c002845b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002845f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028462:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028465:	85 c0                	test   eax,eax
c0028467:	74 10                	je     c0028479 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0028469:	83 ec 0c             	sub    esp,0xc
c002846c:	68 43 a1 02 c0       	push   0xc002a143
c0028471:	e8 77 1d ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c0028476:	83 c4 10             	add    esp,0x10
c0028479:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002847d:	8b 00                	mov    eax,DWORD PTR [eax]
c002847f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028482:	85 c0                	test   eax,eax
c0028484:	75 33                	jne    c00284b9 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0028486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002848a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028494:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002849b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002849f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284a2:	83 f8 01             	cmp    eax,0x1
c00284a5:	74 21                	je     c00284c8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00284a7:	83 ec 0c             	sub    esp,0xc
c00284aa:	68 1c a1 02 c0       	push   0xc002a11c
c00284af:	e8 39 1d ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c00284b4:	83 c4 10             	add    esp,0x10
c00284b7:	eb 0f                	jmp    c00284c8 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00284b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00284bf:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00284c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284c6:	89 10                	mov    DWORD PTR [eax],edx
c00284c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284cc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284cf:	8d 50 ff             	lea    edx,[eax-0x1]
c00284d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00284d6:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00284d9:	83 c4 0c             	add    esp,0xc
c00284dc:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00284de <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00284de:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00284e2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00284e5:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00284e6 <DriverlessDevice::~DriverlessDevice()>:
c00284e6:	ba 24 a8 02 c0       	mov    edx,0xc002a824
c00284eb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00284ef:	89 10                	mov    DWORD PTR [eax],edx
c00284f1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00284f5:	50                   	push   eax
c00284f6:	e8 6f b9 fe ff       	call   c0013e6a <Device::~Device()>
c00284fb:	83 c4 04             	add    esp,0x4
c00284fe:	90                   	nop
c00284ff:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c0028500 <DriverlessDevice::~DriverlessDevice()>:
c0028500:	83 ec 0c             	sub    esp,0xc
c0028503:	83 ec 0c             	sub    esp,0xc
c0028506:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002850a:	e8 d7 ff ff ff       	call   c00284e6 <DriverlessDevice::~DriverlessDevice()>
c002850f:	83 c4 10             	add    esp,0x10
c0028512:	83 ec 08             	sub    esp,0x8
c0028515:	68 58 01 00 00       	push   0x158
c002851a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002851e:	e8 6e a5 fe ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0028523:	83 c4 10             	add    esp,0x10
c0028526:	83 c4 0c             	add    esp,0xc
c0028529:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c002852a <LinkedList<Device>::addElement(Device*)>:
c002852a:	83 ec 0c             	sub    esp,0xc
c002852d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028532:	75 10                	jne    c0028544 <LinkedList<Device>::addElement(Device*)+0x1a>
c0028534:	83 ec 0c             	sub    esp,0xc
c0028537:	68 c0 a0 02 c0       	push   0xc002a0c0
c002853c:	e8 ac 1c ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c0028541:	83 c4 10             	add    esp,0x10
c0028544:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028548:	8b 00                	mov    eax,DWORD PTR [eax]
c002854a:	85 c0                	test   eax,eax
c002854c:	74 3a                	je     c0028588 <LinkedList<Device>::addElement(Device*)+0x5e>
c002854e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028552:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028555:	85 c0                	test   eax,eax
c0028557:	74 2f                	je     c0028588 <LinkedList<Device>::addElement(Device*)+0x5e>
c0028559:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002855d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028560:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028564:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c002856a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002856e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028572:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028575:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028579:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002857c:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0028586:	eb 68                	jmp    c00285f0 <LinkedList<Device>::addElement(Device*)+0xc6>
c0028588:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002858c:	8b 00                	mov    eax,DWORD PTR [eax]
c002858e:	85 c0                	test   eax,eax
c0028590:	75 4e                	jne    c00285e0 <LinkedList<Device>::addElement(Device*)+0xb6>
c0028592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028596:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028599:	85 c0                	test   eax,eax
c002859b:	75 43                	jne    c00285e0 <LinkedList<Device>::addElement(Device*)+0xb6>
c002859d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285a5:	89 10                	mov    DWORD PTR [eax],edx
c00285a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00285af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00285b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00285b9:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00285c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285ca:	85 c0                	test   eax,eax
c00285cc:	74 22                	je     c00285f0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00285ce:	83 ec 0c             	sub    esp,0xc
c00285d1:	68 e2 a0 02 c0       	push   0xc002a0e2
c00285d6:	e8 12 1c ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c00285db:	83 c4 10             	add    esp,0x10
c00285de:	eb 10                	jmp    c00285f0 <LinkedList<Device>::addElement(Device*)+0xc6>
c00285e0:	83 ec 0c             	sub    esp,0xc
c00285e3:	68 ec a0 02 c0       	push   0xc002a0ec
c00285e8:	e8 00 1c ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c00285ed:	83 c4 10             	add    esp,0x10
c00285f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285f4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00285f7:	8d 50 01             	lea    edx,[eax+0x1]
c00285fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00285fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028601:	90                   	nop
c0028602:	83 c4 0c             	add    esp,0xc
c0028605:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c0028606 <LinkedList<Device>::LinkedList()>:
c0028606:	83 ec 0c             	sub    esp,0xc
c0028609:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002860d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028613:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028617:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002861e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028622:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028629:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002862d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028633:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028637:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002863e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028642:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028649:	83 ec 0c             	sub    esp,0xc
c002864c:	68 a6 a0 02 c0       	push   0xc002a0a6
c0028651:	e8 1b a5 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0028656:	83 c4 10             	add    esp,0x10
c0028659:	90                   	nop
c002865a:	83 c4 0c             	add    esp,0xc
c002865d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c002865e <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c002865e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028662:	8b 00                	mov    eax,DWORD PTR [eax]
c0028664:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c0028666 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c0028666:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002866a:	8b 00                	mov    eax,DWORD PTR [eax]
c002866c:	85 c0                	test   eax,eax
c002866e:	75 0e                	jne    c002867e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0028670:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028674:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028677:	85 c0                	test   eax,eax
c0028679:	75 03                	jne    c002867e <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002867b:	b0 01                	mov    al,0x1
c002867d:	c3                   	ret    
c002867e:	b0 00                	mov    al,0x0
c0028680:	90                   	nop
c0028681:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c0028682 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c0028682:	83 ec 0c             	sub    esp,0xc
c0028685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028689:	8b 00                	mov    eax,DWORD PTR [eax]
c002868b:	85 c0                	test   eax,eax
c002868d:	75 15                	jne    c00286a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002868f:	83 ec 0c             	sub    esp,0xc
c0028692:	68 f8 a0 02 c0       	push   0xc002a0f8
c0028697:	e8 51 1b ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c002869c:	83 c4 10             	add    esp,0x10
c002869f:	e9 88 00 00 00       	jmp    c002872c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c00286a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00286ab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00286ae:	85 c0                	test   eax,eax
c00286b0:	0f 95 c0             	setne  al
c00286b3:	84 c0                	test   al,al
c00286b5:	74 10                	je     c00286c7 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00286b7:	83 ec 0c             	sub    esp,0xc
c00286ba:	68 43 a1 02 c0       	push   0xc002a143
c00286bf:	e8 29 1b ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c00286c4:	83 c4 10             	add    esp,0x10
c00286c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286cb:	8b 00                	mov    eax,DWORD PTR [eax]
c00286cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00286d0:	85 c0                	test   eax,eax
c00286d2:	0f 94 c0             	sete   al
c00286d5:	84 c0                	test   al,al
c00286d7:	74 33                	je     c002870c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00286d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00286e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286e7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00286ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00286f2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00286f5:	83 f8 01             	cmp    eax,0x1
c00286f8:	74 21                	je     c002871b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00286fa:	83 ec 0c             	sub    esp,0xc
c00286fd:	68 1c a1 02 c0       	push   0xc002a11c
c0028702:	e8 e6 1a ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c0028707:	83 c4 10             	add    esp,0x10
c002870a:	eb 0f                	jmp    c002871b <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c002870c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028710:	8b 00                	mov    eax,DWORD PTR [eax]
c0028712:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0028715:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028719:	89 10                	mov    DWORD PTR [eax],edx
c002871b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002871f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028722:	8d 50 ff             	lea    edx,[eax-0x1]
c0028725:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028729:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002872c:	83 c4 0c             	add    esp,0xc
c002872f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c0028730 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c0028730:	83 ec 0c             	sub    esp,0xc
c0028733:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028738:	75 10                	jne    c002874a <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c002873a:	83 ec 0c             	sub    esp,0xc
c002873d:	68 c0 a0 02 c0       	push   0xc002a0c0
c0028742:	e8 a6 1a ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c0028747:	83 c4 10             	add    esp,0x10
c002874a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002874e:	8b 00                	mov    eax,DWORD PTR [eax]
c0028750:	85 c0                	test   eax,eax
c0028752:	74 34                	je     c0028788 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0028754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028758:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002875b:	85 c0                	test   eax,eax
c002875d:	74 29                	je     c0028788 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002875f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028763:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028766:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002876a:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c002876d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028771:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028775:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028778:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002877c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002877f:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0028786:	eb 65                	jmp    c00287ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0028788:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002878c:	8b 00                	mov    eax,DWORD PTR [eax]
c002878e:	85 c0                	test   eax,eax
c0028790:	75 4b                	jne    c00287dd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0028792:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028796:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028799:	85 c0                	test   eax,eax
c002879b:	75 40                	jne    c00287dd <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002879d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287a1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287a5:	89 10                	mov    DWORD PTR [eax],edx
c00287a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287ab:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00287af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00287b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00287b9:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00287c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287c4:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287c7:	85 c0                	test   eax,eax
c00287c9:	74 22                	je     c00287ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00287cb:	83 ec 0c             	sub    esp,0xc
c00287ce:	68 e2 a0 02 c0       	push   0xc002a0e2
c00287d3:	e8 15 1a ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c00287d8:	83 c4 10             	add    esp,0x10
c00287db:	eb 10                	jmp    c00287ed <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00287dd:	83 ec 0c             	sub    esp,0xc
c00287e0:	68 ec a0 02 c0       	push   0xc002a0ec
c00287e5:	e8 03 1a ff ff       	call   c001a1ed <Krnl::panic(char const*)>
c00287ea:	83 c4 10             	add    esp,0x10
c00287ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287f1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00287f4:	8d 50 01             	lea    edx,[eax+0x1]
c00287f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00287fb:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00287fe:	90                   	nop
c00287ff:	83 c4 0c             	add    esp,0xc
c0028802:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c0028804 <ACPI::~ACPI()>:
c0028804:	83 ec 0c             	sub    esp,0xc
c0028807:	ba 6c b1 02 c0       	mov    edx,0xc002b16c
c002880c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028810:	89 10                	mov    DWORD PTR [eax],edx
c0028812:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028816:	83 ec 0c             	sub    esp,0xc
c0028819:	50                   	push   eax
c002881a:	e8 4b b6 fe ff       	call   c0013e6a <Device::~Device()>
c002881f:	83 c4 10             	add    esp,0x10
c0028822:	90                   	nop
c0028823:	83 c4 0c             	add    esp,0xc
c0028826:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0028828 <ACPI::~ACPI()>:
c0028828:	83 ec 0c             	sub    esp,0xc
c002882b:	83 ec 0c             	sub    esp,0xc
c002882e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028832:	e8 cd ff ff ff       	call   c0028804 <ACPI::~ACPI()>
c0028837:	83 c4 10             	add    esp,0x10
c002883a:	83 ec 08             	sub    esp,0x8
c002883d:	68 68 12 00 00       	push   0x1268
c0028842:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028846:	e8 46 a2 fe ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c002884b:	83 c4 10             	add    esp,0x10
c002884e:	83 c4 0c             	add    esp,0xc
c0028851:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0028852 <CPU::~CPU()>:
c0028852:	83 ec 0c             	sub    esp,0xc
c0028855:	ba 5c b5 02 c0       	mov    edx,0xc002b55c
c002885a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002885e:	89 10                	mov    DWORD PTR [eax],edx
c0028860:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028864:	83 ec 0c             	sub    esp,0xc
c0028867:	50                   	push   eax
c0028868:	e8 fd b5 fe ff       	call   c0013e6a <Device::~Device()>
c002886d:	83 c4 10             	add    esp,0x10
c0028870:	90                   	nop
c0028871:	83 c4 0c             	add    esp,0xc
c0028874:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0028876 <CPU::~CPU()>:
c0028876:	83 ec 0c             	sub    esp,0xc
c0028879:	83 ec 0c             	sub    esp,0xc
c002887c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028880:	e8 cd ff ff ff       	call   c0028852 <CPU::~CPU()>
c0028885:	83 c4 10             	add    esp,0x10
c0028888:	83 ec 08             	sub    esp,0x8
c002888b:	68 98 11 00 00       	push   0x1198
c0028890:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028894:	e8 f8 a1 fe ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0028899:	83 c4 10             	add    esp,0x10
c002889c:	83 c4 0c             	add    esp,0xc
c002889f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c00288a0 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c00288a0:	90                   	nop
c00288a1:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c00288a2 <ThreadControlBlock::ThreadControlBlock()>:
c00288a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288a6:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00288ad:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288b1:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c00288b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288bc:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c00288c3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288c7:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c00288ce:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288d2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00288d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00288da:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00288de:	90                   	nop
c00288df:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00288e0 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00288e0:	83 ec 0c             	sub    esp,0xc
c00288e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288e7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00288ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288f1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00288f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00288fc:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028903:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028907:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002890d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028911:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028918:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002891c:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028923:	83 ec 0c             	sub    esp,0xc
c0028926:	68 a6 a0 02 c0       	push   0xc002a0a6
c002892b:	e8 41 a2 fe ff       	call   c0012b71 <Dbg::kprintf(char const*, ...)>
c0028930:	83 c4 10             	add    esp,0x10
c0028933:	90                   	nop
c0028934:	83 c4 0c             	add    esp,0xc
c0028937:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0028938 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0028938:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002893c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002893f:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c0028940 <Vm::_FPUState::_FPUState()>:
c0028940:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0028944:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c002894b:	90                   	nop
c002894c:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002894e <PCI::~PCI()>:
c002894e:	83 ec 0c             	sub    esp,0xc
c0028951:	ba 50 c6 02 c0       	mov    edx,0xc002c650
c0028956:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002895a:	89 10                	mov    DWORD PTR [eax],edx
c002895c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028960:	83 ec 0c             	sub    esp,0xc
c0028963:	50                   	push   eax
c0028964:	e8 d9 ae fe ff       	call   c0013842 <Bus::~Bus()>
c0028969:	83 c4 10             	add    esp,0x10
c002896c:	90                   	nop
c002896d:	83 c4 0c             	add    esp,0xc
c0028970:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c0028972 <PCI::~PCI()>:
c0028972:	83 ec 0c             	sub    esp,0xc
c0028975:	83 ec 0c             	sub    esp,0xc
c0028978:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002897c:	e8 cd ff ff ff       	call   c002894e <PCI::~PCI()>
c0028981:	83 c4 10             	add    esp,0x10
c0028984:	83 ec 08             	sub    esp,0x8
c0028987:	68 58 01 00 00       	push   0x158
c002898c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028990:	e8 fc a0 fe ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0028995:	83 c4 10             	add    esp,0x10
c0028998:	83 c4 0c             	add    esp,0xc
c002899b:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c002899c <IDE::~IDE()>:
c002899c:	83 ec 0c             	sub    esp,0xc
c002899f:	ba b4 c8 02 c0       	mov    edx,0xc002c8b4
c00289a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289a8:	89 10                	mov    DWORD PTR [eax],edx
c00289aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289ae:	83 ec 0c             	sub    esp,0xc
c00289b1:	50                   	push   eax
c00289b2:	e8 a3 b9 fe ff       	call   c001435a <HardDiskController::~HardDiskController()>
c00289b7:	83 c4 10             	add    esp,0x10
c00289ba:	90                   	nop
c00289bb:	83 c4 0c             	add    esp,0xc
c00289be:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c00289c0 <IDE::~IDE()>:
c00289c0:	83 ec 0c             	sub    esp,0xc
c00289c3:	83 ec 0c             	sub    esp,0xc
c00289c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289ca:	e8 cd ff ff ff       	call   c002899c <IDE::~IDE()>
c00289cf:	83 c4 10             	add    esp,0x10
c00289d2:	83 ec 08             	sub    esp,0x8
c00289d5:	68 70 02 00 00       	push   0x270
c00289da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00289de:	e8 ae a0 fe ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c00289e3:	83 c4 10             	add    esp,0x10
c00289e6:	83 c4 0c             	add    esp,0xc
c00289e9:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00289ea <SATABus::~SATABus()>:
c00289ea:	83 ec 0c             	sub    esp,0xc
c00289ed:	ba 94 c9 02 c0       	mov    edx,0xc002c994
c00289f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289f6:	89 10                	mov    DWORD PTR [eax],edx
c00289f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00289fc:	83 ec 0c             	sub    esp,0xc
c00289ff:	50                   	push   eax
c0028a00:	e8 55 b9 fe ff       	call   c001435a <HardDiskController::~HardDiskController()>
c0028a05:	83 c4 10             	add    esp,0x10
c0028a08:	90                   	nop
c0028a09:	83 c4 0c             	add    esp,0xc
c0028a0c:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c0028a0e <SATABus::~SATABus()>:
c0028a0e:	83 ec 0c             	sub    esp,0xc
c0028a11:	83 ec 0c             	sub    esp,0xc
c0028a14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a18:	e8 cd ff ff ff       	call   c00289ea <SATABus::~SATABus()>
c0028a1d:	83 c4 10             	add    esp,0x10
c0028a20:	83 ec 08             	sub    esp,0x8
c0028a23:	68 64 01 00 00       	push   0x164
c0028a28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a2c:	e8 60 a0 fe ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0028a31:	83 c4 10             	add    esp,0x10
c0028a34:	83 c4 0c             	add    esp,0xc
c0028a37:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0028a38 <ATA::~ATA()>:
c0028a38:	83 ec 0c             	sub    esp,0xc
c0028a3b:	ba e0 c9 02 c0       	mov    edx,0xc002c9e0
c0028a40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a44:	89 10                	mov    DWORD PTR [eax],edx
c0028a46:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a4a:	83 ec 0c             	sub    esp,0xc
c0028a4d:	50                   	push   eax
c0028a4e:	e8 f9 b9 fe ff       	call   c001444c <PhysicalDisk::~PhysicalDisk()>
c0028a53:	83 c4 10             	add    esp,0x10
c0028a56:	90                   	nop
c0028a57:	83 c4 0c             	add    esp,0xc
c0028a5a:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0028a5c <ATA::~ATA()>:
c0028a5c:	83 ec 0c             	sub    esp,0xc
c0028a5f:	83 ec 0c             	sub    esp,0xc
c0028a62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a66:	e8 cd ff ff ff       	call   c0028a38 <ATA::~ATA()>
c0028a6b:	83 c4 10             	add    esp,0x10
c0028a6e:	83 ec 08             	sub    esp,0x8
c0028a71:	68 7c 01 00 00       	push   0x17c
c0028a76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028a7a:	e8 12 a0 fe ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0028a7f:	83 c4 10             	add    esp,0x10
c0028a82:	83 c4 0c             	add    esp,0xc
c0028a85:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0028a86 <ATAPI::~ATAPI()>:
c0028a86:	83 ec 0c             	sub    esp,0xc
c0028a89:	ba 18 ca 02 c0       	mov    edx,0xc002ca18
c0028a8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a92:	89 10                	mov    DWORD PTR [eax],edx
c0028a94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028a98:	83 ec 0c             	sub    esp,0xc
c0028a9b:	50                   	push   eax
c0028a9c:	e8 ab b9 fe ff       	call   c001444c <PhysicalDisk::~PhysicalDisk()>
c0028aa1:	83 c4 10             	add    esp,0x10
c0028aa4:	90                   	nop
c0028aa5:	83 c4 0c             	add    esp,0xc
c0028aa8:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0028aaa <ATAPI::~ATAPI()>:
c0028aaa:	83 ec 0c             	sub    esp,0xc
c0028aad:	83 ec 0c             	sub    esp,0xc
c0028ab0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ab4:	e8 cd ff ff ff       	call   c0028a86 <ATAPI::~ATAPI()>
c0028ab9:	83 c4 10             	add    esp,0x10
c0028abc:	83 ec 08             	sub    esp,0x8
c0028abf:	68 80 01 00 00       	push   0x180
c0028ac4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ac8:	e8 c4 9f fe ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0028acd:	83 c4 10             	add    esp,0x10
c0028ad0:	83 c4 0c             	add    esp,0xc
c0028ad3:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c0028ad4 <SATA::~SATA()>:
c0028ad4:	83 ec 0c             	sub    esp,0xc
c0028ad7:	ba cc ca 02 c0       	mov    edx,0xc002cacc
c0028adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae0:	89 10                	mov    DWORD PTR [eax],edx
c0028ae2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028ae6:	83 ec 0c             	sub    esp,0xc
c0028ae9:	50                   	push   eax
c0028aea:	e8 5d b9 fe ff       	call   c001444c <PhysicalDisk::~PhysicalDisk()>
c0028aef:	83 c4 10             	add    esp,0x10
c0028af2:	90                   	nop
c0028af3:	83 c4 0c             	add    esp,0xc
c0028af6:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c0028af8 <SATA::~SATA()>:
c0028af8:	83 ec 0c             	sub    esp,0xc
c0028afb:	83 ec 0c             	sub    esp,0xc
c0028afe:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b02:	e8 cd ff ff ff       	call   c0028ad4 <SATA::~SATA()>
c0028b07:	83 c4 10             	add    esp,0x10
c0028b0a:	83 ec 08             	sub    esp,0x8
c0028b0d:	68 7c 01 00 00       	push   0x17c
c0028b12:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b16:	e8 76 9f fe ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0028b1b:	83 c4 10             	add    esp,0x10
c0028b1e:	83 c4 0c             	add    esp,0xc
c0028b21:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c0028b22 <SATAPI::~SATAPI()>:
c0028b22:	83 ec 0c             	sub    esp,0xc
c0028b25:	ba a8 cb 02 c0       	mov    edx,0xc002cba8
c0028b2a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b2e:	89 10                	mov    DWORD PTR [eax],edx
c0028b30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b34:	83 ec 0c             	sub    esp,0xc
c0028b37:	50                   	push   eax
c0028b38:	e8 0f b9 fe ff       	call   c001444c <PhysicalDisk::~PhysicalDisk()>
c0028b3d:	83 c4 10             	add    esp,0x10
c0028b40:	90                   	nop
c0028b41:	83 c4 0c             	add    esp,0xc
c0028b44:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0028b46 <SATAPI::~SATAPI()>:
c0028b46:	83 ec 0c             	sub    esp,0xc
c0028b49:	83 ec 0c             	sub    esp,0xc
c0028b4c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b50:	e8 cd ff ff ff       	call   c0028b22 <SATAPI::~SATAPI()>
c0028b55:	83 c4 10             	add    esp,0x10
c0028b58:	83 ec 08             	sub    esp,0x8
c0028b5b:	68 80 01 00 00       	push   0x180
c0028b60:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b64:	e8 28 9f fe ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0028b69:	83 c4 10             	add    esp,0x10
c0028b6c:	83 c4 0c             	add    esp,0xc
c0028b6f:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c0028b70 <AVX::~AVX()>:
c0028b70:	83 ec 0c             	sub    esp,0xc
c0028b73:	ba e8 cb 02 c0       	mov    edx,0xc002cbe8
c0028b78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b7c:	89 10                	mov    DWORD PTR [eax],edx
c0028b7e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028b82:	83 ec 0c             	sub    esp,0xc
c0028b85:	50                   	push   eax
c0028b86:	e8 45 b9 fe ff       	call   c00144d0 <FPU::~FPU()>
c0028b8b:	83 c4 10             	add    esp,0x10
c0028b8e:	90                   	nop
c0028b8f:	83 c4 0c             	add    esp,0xc
c0028b92:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0028b94 <AVX::~AVX()>:
c0028b94:	83 ec 0c             	sub    esp,0xc
c0028b97:	83 ec 0c             	sub    esp,0xc
c0028b9a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028b9e:	e8 cd ff ff ff       	call   c0028b70 <AVX::~AVX()>
c0028ba3:	83 c4 10             	add    esp,0x10
c0028ba6:	83 ec 08             	sub    esp,0x8
c0028ba9:	68 58 01 00 00       	push   0x158
c0028bae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bb2:	e8 da 9e fe ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0028bb7:	83 c4 10             	add    esp,0x10
c0028bba:	83 c4 0c             	add    esp,0xc
c0028bbd:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c0028bbe <MMX::~MMX()>:
c0028bbe:	83 ec 0c             	sub    esp,0xc
c0028bc1:	ba 28 cc 02 c0       	mov    edx,0xc002cc28
c0028bc6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bca:	89 10                	mov    DWORD PTR [eax],edx
c0028bcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028bd0:	83 ec 0c             	sub    esp,0xc
c0028bd3:	50                   	push   eax
c0028bd4:	e8 f7 b8 fe ff       	call   c00144d0 <FPU::~FPU()>
c0028bd9:	83 c4 10             	add    esp,0x10
c0028bdc:	90                   	nop
c0028bdd:	83 c4 0c             	add    esp,0xc
c0028be0:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c0028be2 <MMX::~MMX()>:
c0028be2:	83 ec 0c             	sub    esp,0xc
c0028be5:	83 ec 0c             	sub    esp,0xc
c0028be8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028bec:	e8 cd ff ff ff       	call   c0028bbe <MMX::~MMX()>
c0028bf1:	83 c4 10             	add    esp,0x10
c0028bf4:	83 ec 08             	sub    esp,0x8
c0028bf7:	68 58 01 00 00       	push   0x158
c0028bfc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c00:	e8 8c 9e fe ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0028c05:	83 c4 10             	add    esp,0x10
c0028c08:	83 c4 0c             	add    esp,0xc
c0028c0b:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c0028c0c <SSE::~SSE()>:
c0028c0c:	83 ec 0c             	sub    esp,0xc
c0028c0f:	ba 68 cc 02 c0       	mov    edx,0xc002cc68
c0028c14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c18:	89 10                	mov    DWORD PTR [eax],edx
c0028c1a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c1e:	83 ec 0c             	sub    esp,0xc
c0028c21:	50                   	push   eax
c0028c22:	e8 a9 b8 fe ff       	call   c00144d0 <FPU::~FPU()>
c0028c27:	83 c4 10             	add    esp,0x10
c0028c2a:	90                   	nop
c0028c2b:	83 c4 0c             	add    esp,0xc
c0028c2e:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c0028c30 <SSE::~SSE()>:
c0028c30:	83 ec 0c             	sub    esp,0xc
c0028c33:	83 ec 0c             	sub    esp,0xc
c0028c36:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c3a:	e8 cd ff ff ff       	call   c0028c0c <SSE::~SSE()>
c0028c3f:	83 c4 10             	add    esp,0x10
c0028c42:	83 ec 08             	sub    esp,0x8
c0028c45:	68 58 01 00 00       	push   0x158
c0028c4a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c4e:	e8 3e 9e fe ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0028c53:	83 c4 10             	add    esp,0x10
c0028c56:	83 c4 0c             	add    esp,0xc
c0028c59:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0028c5a <x87::~x87()>:
c0028c5a:	83 ec 0c             	sub    esp,0xc
c0028c5d:	ba a8 cc 02 c0       	mov    edx,0xc002cca8
c0028c62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c66:	89 10                	mov    DWORD PTR [eax],edx
c0028c68:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028c6c:	83 ec 0c             	sub    esp,0xc
c0028c6f:	50                   	push   eax
c0028c70:	e8 5b b8 fe ff       	call   c00144d0 <FPU::~FPU()>
c0028c75:	83 c4 10             	add    esp,0x10
c0028c78:	90                   	nop
c0028c79:	83 c4 0c             	add    esp,0xc
c0028c7c:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c0028c7e <x87::~x87()>:
c0028c7e:	83 ec 0c             	sub    esp,0xc
c0028c81:	83 ec 0c             	sub    esp,0xc
c0028c84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c88:	e8 cd ff ff ff       	call   c0028c5a <x87::~x87()>
c0028c8d:	83 c4 10             	add    esp,0x10
c0028c90:	83 ec 08             	sub    esp,0x8
c0028c93:	68 58 01 00 00       	push   0x158
c0028c98:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028c9c:	e8 f0 9d fe ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0028ca1:	83 c4 10             	add    esp,0x10
c0028ca4:	83 c4 0c             	add    esp,0xc
c0028ca7:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0028ca8 <IOAPIC::~IOAPIC()>:
c0028ca8:	83 ec 0c             	sub    esp,0xc
c0028cab:	ba 00 ce 02 c0       	mov    edx,0xc002ce00
c0028cb0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cb4:	89 10                	mov    DWORD PTR [eax],edx
c0028cb6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028cba:	83 ec 0c             	sub    esp,0xc
c0028cbd:	50                   	push   eax
c0028cbe:	e8 a7 b1 fe ff       	call   c0013e6a <Device::~Device()>
c0028cc3:	83 c4 10             	add    esp,0x10
c0028cc6:	90                   	nop
c0028cc7:	83 c4 0c             	add    esp,0xc
c0028cca:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0028ccc <IOAPIC::~IOAPIC()>:
c0028ccc:	83 ec 0c             	sub    esp,0xc
c0028ccf:	83 ec 0c             	sub    esp,0xc
c0028cd2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cd6:	e8 cd ff ff ff       	call   c0028ca8 <IOAPIC::~IOAPIC()>
c0028cdb:	83 c4 10             	add    esp,0x10
c0028cde:	83 ec 08             	sub    esp,0x8
c0028ce1:	68 68 01 00 00       	push   0x168
c0028ce6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028cea:	e8 a2 9d fe ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0028cef:	83 c4 10             	add    esp,0x10
c0028cf2:	83 c4 0c             	add    esp,0xc
c0028cf5:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c0028cf6 <APIC::~APIC()>:
c0028cf6:	83 ec 0c             	sub    esp,0xc
c0028cf9:	ba b8 cd 02 c0       	mov    edx,0xc002cdb8
c0028cfe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d02:	89 10                	mov    DWORD PTR [eax],edx
c0028d04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d08:	83 ec 0c             	sub    esp,0xc
c0028d0b:	50                   	push   eax
c0028d0c:	e8 89 bc fe ff       	call   c001499a <InterruptController::~InterruptController()>
c0028d11:	83 c4 10             	add    esp,0x10
c0028d14:	90                   	nop
c0028d15:	83 c4 0c             	add    esp,0xc
c0028d18:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c0028d1a <APIC::~APIC()>:
c0028d1a:	83 ec 0c             	sub    esp,0xc
c0028d1d:	83 ec 0c             	sub    esp,0xc
c0028d20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d24:	e8 cd ff ff ff       	call   c0028cf6 <APIC::~APIC()>
c0028d29:	83 c4 10             	add    esp,0x10
c0028d2c:	83 ec 08             	sub    esp,0x8
c0028d2f:	68 58 21 00 00       	push   0x2158
c0028d34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d38:	e8 54 9d fe ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0028d3d:	83 c4 10             	add    esp,0x10
c0028d40:	83 c4 0c             	add    esp,0xc
c0028d43:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0028d44 <PIC::~PIC()>:
c0028d44:	83 ec 0c             	sub    esp,0xc
c0028d47:	ba 50 ce 02 c0       	mov    edx,0xc002ce50
c0028d4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d50:	89 10                	mov    DWORD PTR [eax],edx
c0028d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d56:	83 ec 0c             	sub    esp,0xc
c0028d59:	50                   	push   eax
c0028d5a:	e8 3b bc fe ff       	call   c001499a <InterruptController::~InterruptController()>
c0028d5f:	83 c4 10             	add    esp,0x10
c0028d62:	90                   	nop
c0028d63:	83 c4 0c             	add    esp,0xc
c0028d66:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0028d68 <PIC::~PIC()>:
c0028d68:	83 ec 0c             	sub    esp,0xc
c0028d6b:	83 ec 0c             	sub    esp,0xc
c0028d6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d72:	e8 cd ff ff ff       	call   c0028d44 <PIC::~PIC()>
c0028d77:	83 c4 10             	add    esp,0x10
c0028d7a:	83 ec 08             	sub    esp,0x8
c0028d7d:	68 58 21 00 00       	push   0x2158
c0028d82:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028d86:	e8 06 9d fe ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0028d8b:	83 c4 10             	add    esp,0x10
c0028d8e:	83 c4 0c             	add    esp,0xc
c0028d91:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0028d92 <APICTimer::~APICTimer()>:
c0028d92:	83 ec 0c             	sub    esp,0xc
c0028d95:	ba a4 ce 02 c0       	mov    edx,0xc002cea4
c0028d9a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028d9e:	89 10                	mov    DWORD PTR [eax],edx
c0028da0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028da4:	83 ec 0c             	sub    esp,0xc
c0028da7:	50                   	push   eax
c0028da8:	e8 13 db fe ff       	call   c00168c0 <Timer::~Timer()>
c0028dad:	83 c4 10             	add    esp,0x10
c0028db0:	90                   	nop
c0028db1:	83 c4 0c             	add    esp,0xc
c0028db4:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0028db6 <APICTimer::~APICTimer()>:
c0028db6:	83 ec 0c             	sub    esp,0xc
c0028db9:	83 ec 0c             	sub    esp,0xc
c0028dbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dc0:	e8 cd ff ff ff       	call   c0028d92 <APICTimer::~APICTimer()>
c0028dc5:	83 c4 10             	add    esp,0x10
c0028dc8:	83 ec 08             	sub    esp,0x8
c0028dcb:	68 60 01 00 00       	push   0x160
c0028dd0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028dd4:	e8 b8 9c fe ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0028dd9:	83 c4 10             	add    esp,0x10
c0028ddc:	83 c4 0c             	add    esp,0xc
c0028ddf:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0028de0 <PIT::~PIT()>:
c0028de0:	83 ec 0c             	sub    esp,0xc
c0028de3:	ba f4 ce 02 c0       	mov    edx,0xc002cef4
c0028de8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028dec:	89 10                	mov    DWORD PTR [eax],edx
c0028dee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028df2:	83 ec 0c             	sub    esp,0xc
c0028df5:	50                   	push   eax
c0028df6:	e8 c5 da fe ff       	call   c00168c0 <Timer::~Timer()>
c0028dfb:	83 c4 10             	add    esp,0x10
c0028dfe:	90                   	nop
c0028dff:	83 c4 0c             	add    esp,0xc
c0028e02:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0028e04 <PIT::~PIT()>:
c0028e04:	83 ec 0c             	sub    esp,0xc
c0028e07:	83 ec 0c             	sub    esp,0xc
c0028e0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e0e:	e8 cd ff ff ff       	call   c0028de0 <PIT::~PIT()>
c0028e13:	83 c4 10             	add    esp,0x10
c0028e16:	83 ec 08             	sub    esp,0x8
c0028e19:	68 5c 01 00 00       	push   0x15c
c0028e1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028e22:	e8 6a 9c fe ff       	call   c0012a91 <operator delete(void*, unsigned long)>
c0028e27:	83 c4 10             	add    esp,0x10
c0028e2a:	83 c4 0c             	add    esp,0xc
c0028e2d:	c3                   	ret    
