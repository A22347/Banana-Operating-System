
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 f0 7a 00 00       	call   c0007b10 <KeEntryPoint>

c0000020 <deregister_tm_clones>:
c0000020:	b8 44 37 02 c0       	mov    eax,0xc0023744
c0000025:	3d 44 37 02 c0       	cmp    eax,0xc0023744
c000002a:	74 1c                	je     c0000048 <deregister_tm_clones+0x28>
c000002c:	b8 00 00 00 00       	mov    eax,0x0
c0000031:	85 c0                	test   eax,eax
c0000033:	74 13                	je     c0000048 <deregister_tm_clones+0x28>
c0000035:	55                   	push   ebp
c0000036:	89 e5                	mov    ebp,esp
c0000038:	83 ec 14             	sub    esp,0x14
c000003b:	68 44 37 02 c0       	push   0xc0023744
c0000040:	ff d0                	call   eax
c0000042:	83 c4 10             	add    esp,0x10
c0000045:	c9                   	leave  
c0000046:	c3                   	ret    
c0000047:	90                   	nop
c0000048:	c3                   	ret    
c0000049:	8d 76 00             	lea    esi,[esi+0x0]

c000004c <register_tm_clones>:
c000004c:	b8 44 37 02 c0       	mov    eax,0xc0023744
c0000051:	2d 44 37 02 c0       	sub    eax,0xc0023744
c0000056:	c1 f8 02             	sar    eax,0x2
c0000059:	89 c2                	mov    edx,eax
c000005b:	c1 ea 1f             	shr    edx,0x1f
c000005e:	01 d0                	add    eax,edx
c0000060:	d1 f8                	sar    eax,1
c0000062:	74 1c                	je     c0000080 <register_tm_clones+0x34>
c0000064:	ba 00 00 00 00       	mov    edx,0x0
c0000069:	85 d2                	test   edx,edx
c000006b:	74 13                	je     c0000080 <register_tm_clones+0x34>
c000006d:	55                   	push   ebp
c000006e:	89 e5                	mov    ebp,esp
c0000070:	83 ec 10             	sub    esp,0x10
c0000073:	50                   	push   eax
c0000074:	68 44 37 02 c0       	push   0xc0023744
c0000079:	ff d2                	call   edx
c000007b:	83 c4 10             	add    esp,0x10
c000007e:	c9                   	leave  
c000007f:	c3                   	ret    
c0000080:	c3                   	ret    
c0000081:	8d 76 00             	lea    esi,[esi+0x0]

c0000084 <__do_global_dtors_aux>:
c0000084:	80 3d c0 50 02 c0 00 	cmp    BYTE PTR ds:0xc00250c0,0x0
c000008b:	75 63                	jne    c00000f0 <__do_global_dtors_aux+0x6c>
c000008d:	55                   	push   ebp
c000008e:	89 e5                	mov    ebp,esp
c0000090:	56                   	push   esi
c0000091:	53                   	push   ebx
c0000092:	bb 7c fe 01 c0       	mov    ebx,0xc001fe7c
c0000097:	81 eb 78 fe 01 c0    	sub    ebx,0xc001fe78
c000009d:	c1 fb 02             	sar    ebx,0x2
c00000a0:	4b                   	dec    ebx
c00000a1:	be 78 fe 01 c0       	mov    esi,0xc001fe78
c00000a6:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000ab:	39 d8                	cmp    eax,ebx
c00000ad:	73 13                	jae    c00000c2 <__do_global_dtors_aux+0x3e>
c00000af:	90                   	nop
c00000b0:	40                   	inc    eax
c00000b1:	a3 c4 50 02 c0       	mov    ds:0xc00250c4,eax
c00000b6:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000b9:	a1 c4 50 02 c0       	mov    eax,ds:0xc00250c4
c00000be:	39 d8                	cmp    eax,ebx
c00000c0:	72 ee                	jb     c00000b0 <__do_global_dtors_aux+0x2c>
c00000c2:	e8 59 ff ff ff       	call   c0000020 <deregister_tm_clones>
c00000c7:	b8 00 00 00 00       	mov    eax,0x0
c00000cc:	85 c0                	test   eax,eax
c00000ce:	74 10                	je     c00000e0 <__do_global_dtors_aux+0x5c>
c00000d0:	83 ec 0c             	sub    esp,0xc
c00000d3:	68 44 37 02 c0       	push   0xc0023744
c00000d8:	e8 23 ff ff 3f       	call   0 <SIG_STATE_STRUCT>
c00000dd:	83 c4 10             	add    esp,0x10
c00000e0:	c6 05 c0 50 02 c0 01 	mov    BYTE PTR ds:0xc00250c0,0x1
c00000e7:	8d 65 f8             	lea    esp,[ebp-0x8]
c00000ea:	5b                   	pop    ebx
c00000eb:	5e                   	pop    esi
c00000ec:	5d                   	pop    ebp
c00000ed:	c3                   	ret    
c00000ee:	66 90                	xchg   ax,ax
c00000f0:	c3                   	ret    
c00000f1:	8d 76 00             	lea    esi,[esi+0x0]

c00000f4 <frame_dummy>:
c00000f4:	b8 00 00 00 00       	mov    eax,0x0
c00000f9:	85 c0                	test   eax,eax
c00000fb:	74 1f                	je     c000011c <frame_dummy+0x28>
c00000fd:	55                   	push   ebp
c00000fe:	89 e5                	mov    ebp,esp
c0000100:	83 ec 10             	sub    esp,0x10
c0000103:	68 c8 50 02 c0       	push   0xc00250c8
c0000108:	68 44 37 02 c0       	push   0xc0023744
c000010d:	e8 ee fe ff 3f       	call   0 <SIG_STATE_STRUCT>
c0000112:	83 c4 10             	add    esp,0x10
c0000115:	c9                   	leave  
c0000116:	e9 31 ff ff ff       	jmp    c000004c <register_tm_clones>
c000011b:	90                   	nop
c000011c:	e9 2b ff ff ff       	jmp    c000004c <register_tm_clones>
c0000121:	66 90                	xchg   ax,ax
c0000123:	66 90                	xchg   ax,ax
c0000125:	66 90                	xchg   ax,ax
c0000127:	66 90                	xchg   ax,ax
c0000129:	66 90                	xchg   ax,ax
c000012b:	66 90                	xchg   ax,ax
c000012d:	66 90                	xchg   ax,ax
c000012f:	90                   	nop

c0000130 <manualPCIProbe>:
c0000130:	31 c0                	xor    eax,eax
c0000132:	66 ba f8 0c          	mov    dx,0xcf8
c0000136:	ed                   	in     eax,dx
c0000137:	89 c3                	mov    ebx,eax
c0000139:	b8 00 00 00 80       	mov    eax,0x80000000
c000013e:	ef                   	out    dx,eax
c000013f:	ed                   	in     eax,dx
c0000140:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000145:	75 0a                	jne    c0000151 <manualPCIProbe.noMech1>
c0000147:	b8 01 00 00 00       	mov    eax,0x1
c000014c:	e9 26 00 00 00       	jmp    c0000177 <manualPCIProbe.gotPCI>

c0000151 <manualPCIProbe.noMech1>:
c0000151:	89 d8                	mov    eax,ebx
c0000153:	ef                   	out    dx,eax
c0000154:	66 ba f8 0c          	mov    dx,0xcf8
c0000158:	ec                   	in     al,dx
c0000159:	88 c3                	mov    bl,al
c000015b:	30 c0                	xor    al,al
c000015d:	ee                   	out    dx,al
c000015e:	ec                   	in     al,dx
c000015f:	84 c0                	test   al,al
c0000161:	75 15                	jne    c0000178 <manualPCIProbe.noPCI>
c0000163:	66 ba fa 0c          	mov    dx,0xcfa
c0000167:	ec                   	in     al,dx
c0000168:	88 c7                	mov    bh,al
c000016a:	30 c0                	xor    al,al
c000016c:	ee                   	out    dx,al
c000016d:	ec                   	in     al,dx
c000016e:	84 c0                	test   al,al
c0000170:	75 06                	jne    c0000178 <manualPCIProbe.noPCI>
c0000172:	b8 02 00 00 00       	mov    eax,0x2

c0000177 <manualPCIProbe.gotPCI>:
c0000177:	c3                   	ret    

c0000178 <manualPCIProbe.noPCI>:
c0000178:	31 c0                	xor    eax,eax
c000017a:	c3                   	ret    

c000017b <prepareTramp>:
c000017b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c0000182:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c0000189:	50                   	push   eax
c000018a:	0f 20 d8             	mov    eax,cr3
c000018d:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c0000192:	58                   	pop    eax
c0000193:	c3                   	ret    

c0000194 <doTPAUSE>:
c0000194:	fb                   	sti    
c0000195:	31 c0                	xor    eax,eax
c0000197:	31 d2                	xor    edx,edx
c0000199:	66 0f ae f0          	tpause eax
c000019d:	c3                   	ret    

c000019e <hasLegacyFPU>:
c000019e:	0f 20 c2             	mov    edx,cr0
c00001a1:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c00001a7:	0f 22 c2             	mov    cr0,edx
c00001aa:	db e3                	fninit 
c00001ac:	dd 3d c1 01 00 c0    	fnstsw WORD PTR ds:0xc00001c1
c00001b2:	31 c0                	xor    eax,eax
c00001b4:	66 81 3d c1 01 00 c0 00 00 	cmp    WORD PTR ds:0xc00001c1,0x0
c00001bd:	75 01                	jne    c00001c0 <hasLegacyFPU.nofpu>

c00001bf <hasLegacyFPU.hasfpu>:
c00001bf:	40                   	inc    eax

c00001c0 <hasLegacyFPU.nofpu>:
c00001c0:	c3                   	ret    

c00001c1 <testword>:
c00001c1:	aa                   	stos   BYTE PTR es:[edi],al
c00001c2:	55                   	push   ebp

c00001c3 <is486>:
c00001c3:	0f 09                	wbinvd 
c00001c5:	31 c0                	xor    eax,eax
c00001c7:	40                   	inc    eax
c00001c8:	c3                   	ret    
c00001c9:	90                   	nop
c00001ca:	90                   	nop
c00001cb:	90                   	nop
c00001cc:	90                   	nop
c00001cd:	90                   	nop
c00001ce:	90                   	nop
c00001cf:	90                   	nop
c00001d0:	90                   	nop
c00001d1:	90                   	nop
c00001d2:	90                   	nop
c00001d3:	90                   	nop
c00001d4:	90                   	nop
c00001d5:	90                   	nop
c00001d6:	90                   	nop
c00001d7:	90                   	nop
c00001d8:	90                   	nop
c00001d9:	90                   	nop
c00001da:	90                   	nop
c00001db:	90                   	nop
c00001dc:	90                   	nop
c00001dd:	90                   	nop
c00001de:	90                   	nop
c00001df:	90                   	nop
c00001e0:	90                   	nop
c00001e1:	90                   	nop
c00001e2:	90                   	nop
c00001e3:	90                   	nop
c00001e4:	90                   	nop
c00001e5:	90                   	nop
c00001e6:	90                   	nop
c00001e7:	90                   	nop
c00001e8:	90                   	nop
c00001e9:	90                   	nop
c00001ea:	90                   	nop
c00001eb:	90                   	nop
c00001ec:	90                   	nop
c00001ed:	90                   	nop
c00001ee:	90                   	nop
c00001ef:	90                   	nop
c00001f0:	90                   	nop
c00001f1:	90                   	nop
c00001f2:	90                   	nop
c00001f3:	90                   	nop
c00001f4:	90                   	nop
c00001f5:	90                   	nop
c00001f6:	31 c0                	xor    eax,eax
c00001f8:	c3                   	ret    

c00001f9 <detectCPUID>:
c00001f9:	9c                   	pushf  
c00001fa:	9c                   	pushf  
c00001fb:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c0000202:	9d                   	popf   
c0000203:	9c                   	pushf  
c0000204:	58                   	pop    eax
c0000205:	33 04 24             	xor    eax,DWORD PTR [esp]
c0000208:	9d                   	popf   
c0000209:	25 00 00 20 00       	and    eax,0x200000
c000020e:	c3                   	ret    

c000020f <goToVM86>:
c000020f:	55                   	push   ebp
c0000210:	89 e5                	mov    ebp,esp
c0000212:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000215:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000218:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c000021b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000021e:	25 ff ff 00 00       	and    eax,0xffff
c0000223:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000229:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000022f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000235:	52                   	push   edx
c0000236:	51                   	push   ecx
c0000237:	68 02 02 02 00       	push   0x20202
c000023c:	53                   	push   ebx
c000023d:	50                   	push   eax
c000023e:	cf                   	iret   

c000023f <goToUsermode>:
c000023f:	55                   	push   ebp
c0000240:	89 e5                	mov    ebp,esp
c0000242:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000245:	66 b8 23 00          	mov    ax,0x23
c0000249:	66 8e d8             	mov    ds,ax
c000024c:	66 8e c0             	mov    es,ax
c000024f:	66 8e e0             	mov    fs,ax
c0000252:	66 8e e8             	mov    gs,ax
c0000255:	89 e0                	mov    eax,esp
c0000257:	68 23 00 00 00       	push   0x23
c000025c:	50                   	push   eax
c000025d:	68 02 02 00 00       	push   0x202
c0000262:	68 1b 00 00 00       	push   0x1b
c0000267:	53                   	push   ebx
c0000268:	cf                   	iret   

c0000269 <switchToThreadASMFirstTime>:
c0000269:	9c                   	pushf  
c000026a:	fa                   	cli    
c000026b:	50                   	push   eax
c000026c:	53                   	push   ebx
c000026d:	51                   	push   ecx
c000026e:	52                   	push   edx
c000026f:	56                   	push   esi
c0000270:	57                   	push   edi
c0000271:	55                   	push   ebp
c0000272:	e9 11 00 00 00       	jmp    c0000288 <commonThreadSwitch>

c0000277 <switchToThreadASM>:
c0000277:	9c                   	pushf  
c0000278:	50                   	push   eax
c0000279:	53                   	push   ebx
c000027a:	51                   	push   ecx
c000027b:	52                   	push   edx
c000027c:	56                   	push   esi
c000027d:	57                   	push   edi
c000027e:	55                   	push   ebp
c000027f:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000285:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000288 <commonThreadSwitch>:
c0000288:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000028c:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0000292:	8b 06                	mov    eax,DWORD PTR [esi]
c0000294:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000297:	0f 20 d9             	mov    ecx,cr3
c000029a:	39 c8                	cmp    eax,ecx
c000029c:	74 03                	je     c00002a1 <commonThreadSwitch.doneVAS>
c000029e:	0f 22 d8             	mov    cr3,eax

c00002a1 <commonThreadSwitch.doneVAS>:
c00002a1:	85 d2                	test   edx,edx
c00002a3:	75 11                	jne    c00002b6 <commonThreadSwitch.firstTime>
c00002a5:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c00002a8:	e8 bf 50 01 00       	call   c001536c <changeTSS>
c00002ad:	5d                   	pop    ebp
c00002ae:	5f                   	pop    edi
c00002af:	5e                   	pop    esi
c00002b0:	5a                   	pop    edx
c00002b1:	59                   	pop    ecx
c00002b2:	5b                   	pop    ebx
c00002b3:	58                   	pop    eax
c00002b4:	9d                   	popf   
c00002b5:	c3                   	ret    

c00002b6 <commonThreadSwitch.firstTime>:
c00002b6:	fa                   	cli    
c00002b7:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00002ba:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00002bf:	60                   	pusha  
c00002c0:	e8 08 a4 00 00       	call   c000a6cd <mapVASFirstTime>
c00002c5:	61                   	popa   
c00002c6:	89 c4                	mov    esp,eax
c00002c8:	56                   	push   esi
c00002c9:	52                   	push   edx
c00002ca:	e8 9d 50 01 00       	call   c001536c <changeTSS>
c00002cf:	5a                   	pop    edx
c00002d0:	5e                   	pop    esi
c00002d1:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00002d8:	5d                   	pop    ebp
c00002d9:	5f                   	pop    edi
c00002da:	5e                   	pop    esi
c00002db:	59                   	pop    ecx
c00002dc:	59                   	pop    ecx
c00002dd:	5b                   	pop    ebx
c00002de:	58                   	pop    eax
c00002df:	81 c4 04 00 00 00    	add    esp,0x4
c00002e5:	6a 02                	push   0x2
c00002e7:	9d                   	popf   
c00002e8:	52                   	push   edx
c00002e9:	e8 aa 55 01 00       	call   c0015898 <taskStartupFunction>
c00002ee:	5a                   	pop    edx
c00002ef:	50                   	push   eax
c00002f0:	ff d2                	call   edx
c00002f2:	e8 69 5c 01 00       	call   c0015f60 <taskReturned>
c00002f7:	e9 fb ff ff ff       	jmp    c00002f7 <commonThreadSwitch.firstTime+0x41>

c00002fc <asmQuickAcquireLock>:
c00002fc:	55                   	push   ebp
c00002fd:	89 e5                	mov    ebp,esp
c00002ff:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000302 <asmQuickAcquireLock.retry>:
c0000302:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000307:	72 02                	jb     c000030b <asmQuickAcquireLock.spin_with_pause>
c0000309:	fa                   	cli    
c000030a:	c3                   	ret    

c000030b <asmQuickAcquireLock.spin_with_pause>:
c000030b:	f3 90                	pause  
c000030d:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000313:	75 f6                	jne    c000030b <asmQuickAcquireLock.spin_with_pause>
c0000315:	e9 e8 ff ff ff       	jmp    c0000302 <asmQuickAcquireLock.retry>

c000031a <asmQuickReleaseLock>:
c000031a:	55                   	push   ebp
c000031b:	89 e5                	mov    ebp,esp
c000031d:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c0000324:	5d                   	pop    ebp
c0000325:	c3                   	ret    

c0000326 <asmAcquireLock>:
c0000326:	55                   	push   ebp
c0000327:	89 e5                	mov    ebp,esp
c0000329:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c000032c <asmAcquireLock.retry>:
c000032c:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000331:	72 05                	jb     c0000338 <asmAcquireLock.spin_with_pause>
c0000333:	9c                   	pushf  
c0000334:	58                   	pop    eax
c0000335:	fa                   	cli    
c0000336:	5d                   	pop    ebp
c0000337:	c3                   	ret    

c0000338 <asmAcquireLock.spin_with_pause>:
c0000338:	f3 90                	pause  
c000033a:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000340:	75 f6                	jne    c0000338 <asmAcquireLock.spin_with_pause>
c0000342:	e9 e5 ff ff ff       	jmp    c000032c <asmAcquireLock.retry>

c0000347 <asmReleaseLock>:
c0000347:	55                   	push   ebp
c0000348:	89 e5                	mov    ebp,esp
c000034a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c000034d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000350:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0000356:	52                   	push   edx
c0000357:	9d                   	popf   
c0000358:	5d                   	pop    ebp
c0000359:	c3                   	ret    

c000035a <loadGDT>:
c000035a:	0f 01 15 c0 5e 02 c0 	lgdtd  ds:0xc0025ec0
c0000361:	66 b8 10 00          	mov    ax,0x10
c0000365:	66 8e d8             	mov    ds,ax
c0000368:	66 8e c0             	mov    es,ax
c000036b:	66 8e e0             	mov    fs,ax
c000036e:	66 8e e8             	mov    gs,ax
c0000371:	66 8e d0             	mov    ss,ax
c0000374:	e9 00 00 00 00       	jmp    c0000379 <flush2>

c0000379 <flush2>:
c0000379:	c3                   	ret    

c000037a <memcpy>:
c000037a:	e9 e5 0e 01 00       	jmp    c0011264 <__not_memcpy>
c000037f:	90                   	nop

c0000380 <memcmp>:
c0000380:	56                   	push   esi
c0000381:	53                   	push   ebx
c0000382:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000386:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000038a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000038e:	85 f6                	test   esi,esi
c0000390:	74 21                	je     c00003b3 <memcmp+0x33>
c0000392:	8a 08                	mov    cl,BYTE PTR [eax]
c0000394:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c0000397:	38 d9                	cmp    cl,bl
c0000399:	75 25                	jne    c00003c0 <memcmp+0x40>
c000039b:	01 c6                	add    esi,eax
c000039d:	eb 0a                	jmp    c00003a9 <memcmp+0x29>
c000039f:	90                   	nop
c00003a0:	8a 08                	mov    cl,BYTE PTR [eax]
c00003a2:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c00003a5:	38 cb                	cmp    bl,cl
c00003a7:	75 17                	jne    c00003c0 <memcmp+0x40>
c00003a9:	83 c0 01             	add    eax,0x1
c00003ac:	83 c2 01             	add    edx,0x1
c00003af:	39 f0                	cmp    eax,esi
c00003b1:	75 ed                	jne    c00003a0 <memcmp+0x20>
c00003b3:	31 c0                	xor    eax,eax
c00003b5:	5b                   	pop    ebx
c00003b6:	5e                   	pop    esi
c00003b7:	c3                   	ret    
c00003b8:	90                   	nop
c00003b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00003c0:	0f b6 c1             	movzx  eax,cl
c00003c3:	29 d8                	sub    eax,ebx
c00003c5:	5b                   	pop    ebx
c00003c6:	5e                   	pop    esi
c00003c7:	c3                   	ret    
c00003c8:	90                   	nop
c00003c9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

c00003d0 <memmove>:
c00003d0:	55                   	push   ebp
c00003d1:	57                   	push   edi
c00003d2:	56                   	push   esi
c00003d3:	53                   	push   ebx
c00003d4:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00003d8:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00003dc:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00003e0:	39 dd                	cmp    ebp,ebx
c00003e2:	0f 83 a8 00 00 00    	jae    c0000490 <memmove+0xc0>
c00003e8:	85 d2                	test   edx,edx
c00003ea:	0f 84 8c 00 00 00    	je     c000047c <memmove+0xac>
c00003f0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00003f3:	8d 75 04             	lea    esi,[ebp+0x4]
c00003f6:	39 cd                	cmp    ebp,ecx
c00003f8:	0f 93 c1             	setae  cl
c00003fb:	39 f3                	cmp    ebx,esi
c00003fd:	0f 93 c0             	setae  al
c0000400:	89 c6                	mov    esi,eax
c0000402:	31 c0                	xor    eax,eax
c0000404:	09 f1                	or     ecx,esi
c0000406:	8d 72 ff             	lea    esi,[edx-0x1]
c0000409:	83 fe 0c             	cmp    esi,0xc
c000040c:	0f 97 c0             	seta   al
c000040f:	89 c6                	mov    esi,eax
c0000411:	85 ce                	test   esi,ecx
c0000413:	0f 84 a7 00 00 00    	je     c00004c0 <memmove+0xf0>
c0000419:	89 e9                	mov    ecx,ebp
c000041b:	09 d9                	or     ecx,ebx
c000041d:	80 e1 03             	and    cl,0x3
c0000420:	0f 85 9a 00 00 00    	jne    c00004c0 <memmove+0xf0>
c0000426:	89 d7                	mov    edi,edx
c0000428:	89 d9                	mov    ecx,ebx
c000042a:	83 e7 fc             	and    edi,0xfffffffc
c000042d:	89 ee                	mov    esi,ebp
c000042f:	01 df                	add    edi,ebx
c0000431:	eb 0d                	jmp    c0000440 <memmove+0x70>
c0000433:	90                   	nop
c0000434:	90                   	nop
c0000435:	90                   	nop
c0000436:	90                   	nop
c0000437:	90                   	nop
c0000438:	90                   	nop
c0000439:	90                   	nop
c000043a:	90                   	nop
c000043b:	90                   	nop
c000043c:	90                   	nop
c000043d:	90                   	nop
c000043e:	90                   	nop
c000043f:	90                   	nop
c0000440:	8b 01                	mov    eax,DWORD PTR [ecx]
c0000442:	83 c6 04             	add    esi,0x4
c0000445:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000448:	83 c1 04             	add    ecx,0x4
c000044b:	39 f9                	cmp    ecx,edi
c000044d:	75 f1                	jne    c0000440 <memmove+0x70>
c000044f:	89 d1                	mov    ecx,edx
c0000451:	89 d7                	mov    edi,edx
c0000453:	83 e1 fc             	and    ecx,0xfffffffc
c0000456:	29 cf                	sub    edi,ecx
c0000458:	01 cb                	add    ebx,ecx
c000045a:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c000045e:	39 ca                	cmp    edx,ecx
c0000460:	74 1a                	je     c000047c <memmove+0xac>
c0000462:	8a 03                	mov    al,BYTE PTR [ebx]
c0000464:	83 ff 01             	cmp    edi,0x1
c0000467:	88 06                	mov    BYTE PTR [esi],al
c0000469:	74 11                	je     c000047c <memmove+0xac>
c000046b:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c000046e:	83 ff 02             	cmp    edi,0x2
c0000471:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c0000474:	74 06                	je     c000047c <memmove+0xac>
c0000476:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000479:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c000047c:	5b                   	pop    ebx
c000047d:	89 e8                	mov    eax,ebp
c000047f:	5e                   	pop    esi
c0000480:	5f                   	pop    edi
c0000481:	5d                   	pop    ebp
c0000482:	c3                   	ret    
c0000483:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000489:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000490:	76 ea                	jbe    c000047c <memmove+0xac>
c0000492:	85 d2                	test   edx,edx
c0000494:	74 e6                	je     c000047c <memmove+0xac>
c0000496:	83 eb 01             	sub    ebx,0x1
c0000499:	8d 4d ff             	lea    ecx,[ebp-0x1]
c000049c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c00004a0:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c00004a3:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c00004a6:	83 ea 01             	sub    edx,0x1
c00004a9:	75 f5                	jne    c00004a0 <memmove+0xd0>
c00004ab:	5b                   	pop    ebx
c00004ac:	89 e8                	mov    eax,ebp
c00004ae:	5e                   	pop    esi
c00004af:	5f                   	pop    edi
c00004b0:	5d                   	pop    ebp
c00004b1:	c3                   	ret    
c00004b2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00004b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00004c0:	01 ea                	add    edx,ebp
c00004c2:	89 e9                	mov    ecx,ebp
c00004c4:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00004ca:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c00004d0:	8a 03                	mov    al,BYTE PTR [ebx]
c00004d2:	83 c1 01             	add    ecx,0x1
c00004d5:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c00004d8:	83 c3 01             	add    ebx,0x1
c00004db:	39 d1                	cmp    ecx,edx
c00004dd:	75 f1                	jne    c00004d0 <memmove+0x100>
c00004df:	eb 9b                	jmp    c000047c <memmove+0xac>
c00004e1:	eb 0d                	jmp    c00004f0 <memset>
c00004e3:	90                   	nop
c00004e4:	90                   	nop
c00004e5:	90                   	nop
c00004e6:	90                   	nop
c00004e7:	90                   	nop
c00004e8:	90                   	nop
c00004e9:	90                   	nop
c00004ea:	90                   	nop
c00004eb:	90                   	nop
c00004ec:	90                   	nop
c00004ed:	90                   	nop
c00004ee:	90                   	nop
c00004ef:	90                   	nop

c00004f0 <memset>:
c00004f0:	57                   	push   edi
c00004f1:	56                   	push   esi
c00004f2:	53                   	push   ebx
c00004f3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00004f7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00004fb:	85 d2                	test   edx,edx
c00004fd:	74 1d                	je     c000051c <memset+0x2c>
c00004ff:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0000504:	89 f7                	mov    edi,esi
c0000506:	83 fa 04             	cmp    edx,0x4
c0000509:	73 25                	jae    c0000530 <memset+0x40>
c000050b:	83 e2 03             	and    edx,0x3
c000050e:	74 0c                	je     c000051c <memset+0x2c>
c0000510:	31 c0                	xor    eax,eax
c0000512:	88 1c 07             	mov    BYTE PTR [edi+eax*1],bl
c0000515:	83 c0 01             	add    eax,0x1
c0000518:	39 d0                	cmp    eax,edx
c000051a:	72 f6                	jb     c0000512 <memset+0x22>
c000051c:	89 f0                	mov    eax,esi
c000051e:	5b                   	pop    ebx
c000051f:	5e                   	pop    esi
c0000520:	5f                   	pop    edi
c0000521:	c3                   	ret    
c0000522:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c0000529:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000530:	0f b6 c3             	movzx  eax,bl
c0000533:	88 c4                	mov    ah,al
c0000535:	89 c1                	mov    ecx,eax
c0000537:	c1 e1 10             	shl    ecx,0x10
c000053a:	09 c8                	or     eax,ecx
c000053c:	f7 c6 01 00 00 00    	test   esi,0x1
c0000542:	75 12                	jne    c0000556 <memset+0x66>
c0000544:	f7 c7 02 00 00 00    	test   edi,0x2
c000054a:	75 14                	jne    c0000560 <memset+0x70>
c000054c:	89 d1                	mov    ecx,edx
c000054e:	c1 e9 02             	shr    ecx,0x2
c0000551:	fc                   	cld    
c0000552:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0000554:	eb b5                	jmp    c000050b <memset+0x1b>
c0000556:	88 06                	mov    BYTE PTR [esi],al
c0000558:	8d 7e 01             	lea    edi,[esi+0x1]
c000055b:	83 ea 01             	sub    edx,0x1
c000055e:	eb e4                	jmp    c0000544 <memset+0x54>
c0000560:	66 89 07             	mov    WORD PTR [edi],ax
c0000563:	83 ea 02             	sub    edx,0x2
c0000566:	83 c7 02             	add    edi,0x2
c0000569:	eb e1                	jmp    c000054c <memset+0x5c>
c000056b:	90                   	nop
c000056c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

c0000570 <strlen>:
c0000570:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0000574:	31 c0                	xor    eax,eax
c0000576:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000579:	74 15                	je     c0000590 <strlen+0x20>
c000057b:	90                   	nop
c000057c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000580:	83 c0 01             	add    eax,0x1
c0000583:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000587:	75 f7                	jne    c0000580 <strlen+0x10>
c0000589:	c3                   	ret    
c000058a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000590:	c3                   	ret    
c0000591:	eb 0d                	jmp    c00005a0 <strpbrk>
c0000593:	90                   	nop
c0000594:	90                   	nop
c0000595:	90                   	nop
c0000596:	90                   	nop
c0000597:	90                   	nop
c0000598:	90                   	nop
c0000599:	90                   	nop
c000059a:	90                   	nop
c000059b:	90                   	nop
c000059c:	90                   	nop
c000059d:	90                   	nop
c000059e:	90                   	nop
c000059f:	90                   	nop

c00005a0 <strpbrk>:
c00005a0:	57                   	push   edi
c00005a1:	56                   	push   esi
c00005a2:	53                   	push   ebx
c00005a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00005a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00005ab:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005ae:	85 db                	test   ebx,ebx
c00005b0:	74 36                	je     c00005e8 <strpbrk+0x48>
c00005b2:	0f be 37             	movsx  esi,BYTE PTR [edi]
c00005b5:	85 f6                	test   esi,esi
c00005b7:	74 25                	je     c00005de <strpbrk+0x3e>
c00005b9:	39 de                	cmp    esi,ebx
c00005bb:	74 2d                	je     c00005ea <strpbrk+0x4a>
c00005bd:	89 fa                	mov    edx,edi
c00005bf:	eb 13                	jmp    c00005d4 <strpbrk+0x34>
c00005c1:	eb 0d                	jmp    c00005d0 <strpbrk+0x30>
c00005c3:	90                   	nop
c00005c4:	90                   	nop
c00005c5:	90                   	nop
c00005c6:	90                   	nop
c00005c7:	90                   	nop
c00005c8:	90                   	nop
c00005c9:	90                   	nop
c00005ca:	90                   	nop
c00005cb:	90                   	nop
c00005cc:	90                   	nop
c00005cd:	90                   	nop
c00005ce:	90                   	nop
c00005cf:	90                   	nop
c00005d0:	39 d9                	cmp    ecx,ebx
c00005d2:	74 16                	je     c00005ea <strpbrk+0x4a>
c00005d4:	83 c2 01             	add    edx,0x1
c00005d7:	0f be 0a             	movsx  ecx,BYTE PTR [edx]
c00005da:	85 c9                	test   ecx,ecx
c00005dc:	75 f2                	jne    c00005d0 <strpbrk+0x30>
c00005de:	83 c0 01             	add    eax,0x1
c00005e1:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00005e4:	85 db                	test   ebx,ebx
c00005e6:	75 cd                	jne    c00005b5 <strpbrk+0x15>
c00005e8:	31 c0                	xor    eax,eax
c00005ea:	5b                   	pop    ebx
c00005eb:	5e                   	pop    esi
c00005ec:	5f                   	pop    edi
c00005ed:	c3                   	ret    
c00005ee:	66 90                	xchg   ax,ax

c00005f0 <strtok>:
c00005f0:	56                   	push   esi
c00005f1:	53                   	push   ebx
c00005f2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00005f6:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00005fa:	85 db                	test   ebx,ebx
c00005fc:	75 09                	jne    c0000607 <strtok+0x17>
c00005fe:	eb 30                	jmp    c0000630 <strtok+0x40>
c0000600:	83 c3 01             	add    ebx,0x1
c0000603:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c0000607:	56                   	push   esi
c0000608:	53                   	push   ebx
c0000609:	e8 92 ff ff ff       	call   c00005a0 <strpbrk>
c000060e:	5a                   	pop    edx
c000060f:	a3 e0 50 02 c0       	mov    ds:0xc00250e0,eax
c0000614:	59                   	pop    ecx
c0000615:	39 d8                	cmp    eax,ebx
c0000617:	74 e7                	je     c0000600 <strtok+0x10>
c0000619:	85 c0                	test   eax,eax
c000061b:	74 1d                	je     c000063a <strtok+0x4a>
c000061d:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0000620:	8d 50 01             	lea    edx,[eax+0x1]
c0000623:	89 d8                	mov    eax,ebx
c0000625:	89 15 e0 50 02 c0    	mov    DWORD PTR ds:0xc00250e0,edx
c000062b:	5b                   	pop    ebx
c000062c:	5e                   	pop    esi
c000062d:	c3                   	ret    
c000062e:	66 90                	xchg   ax,ax
c0000630:	8b 1d e0 50 02 c0    	mov    ebx,DWORD PTR ds:0xc00250e0
c0000636:	85 db                	test   ebx,ebx
c0000638:	75 cd                	jne    c0000607 <strtok+0x17>
c000063a:	31 c0                	xor    eax,eax
c000063c:	5b                   	pop    ebx
c000063d:	5e                   	pop    esi
c000063e:	c3                   	ret    
c000063f:	90                   	nop

c0000640 <strcpy>:
c0000640:	53                   	push   ebx
c0000641:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000645:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000649:	89 c3                	mov    ebx,eax
c000064b:	8a 11                	mov    dl,BYTE PTR [ecx]
c000064d:	84 d2                	test   dl,dl
c000064f:	74 1d                	je     c000066e <strcpy+0x2e>
c0000651:	eb 0d                	jmp    c0000660 <strcpy+0x20>
c0000653:	90                   	nop
c0000654:	90                   	nop
c0000655:	90                   	nop
c0000656:	90                   	nop
c0000657:	90                   	nop
c0000658:	90                   	nop
c0000659:	90                   	nop
c000065a:	90                   	nop
c000065b:	90                   	nop
c000065c:	90                   	nop
c000065d:	90                   	nop
c000065e:	90                   	nop
c000065f:	90                   	nop
c0000660:	88 13                	mov    BYTE PTR [ebx],dl
c0000662:	83 c1 01             	add    ecx,0x1
c0000665:	83 c3 01             	add    ebx,0x1
c0000668:	8a 11                	mov    dl,BYTE PTR [ecx]
c000066a:	84 d2                	test   dl,dl
c000066c:	75 f2                	jne    c0000660 <strcpy+0x20>
c000066e:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000671:	5b                   	pop    ebx
c0000672:	c3                   	ret    
c0000673:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000679:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000680 <strncpy>:
c0000680:	57                   	push   edi
c0000681:	56                   	push   esi
c0000682:	53                   	push   ebx
c0000683:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0000687:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000068b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000068f:	85 f6                	test   esi,esi
c0000691:	74 44                	je     c00006d7 <strncpy+0x57>
c0000693:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000695:	8d 46 ff             	lea    eax,[esi-0x1]
c0000698:	8d 7a 01             	lea    edi,[edx+0x1]
c000069b:	88 0a                	mov    BYTE PTR [edx],cl
c000069d:	84 c9                	test   cl,cl
c000069f:	74 3f                	je     c00006e0 <strncpy+0x60>
c00006a1:	85 c0                	test   eax,eax
c00006a3:	74 32                	je     c00006d7 <strncpy+0x57>
c00006a5:	8d 4b 02             	lea    ecx,[ebx+0x2]
c00006a8:	8d 46 fe             	lea    eax,[esi-0x2]
c00006ab:	8a 5b 01             	mov    bl,BYTE PTR [ebx+0x1]
c00006ae:	8d 7a 02             	lea    edi,[edx+0x2]
c00006b1:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c00006b4:	84 db                	test   bl,bl
c00006b6:	75 1b                	jne    c00006d3 <strncpy+0x53>
c00006b8:	eb 26                	jmp    c00006e0 <strncpy+0x60>
c00006ba:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00006c0:	83 c1 01             	add    ecx,0x1
c00006c3:	83 c7 01             	add    edi,0x1
c00006c6:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00006c9:	83 e8 01             	sub    eax,0x1
c00006cc:	88 5f ff             	mov    BYTE PTR [edi-0x1],bl
c00006cf:	84 db                	test   bl,bl
c00006d1:	74 0d                	je     c00006e0 <strncpy+0x60>
c00006d3:	85 c0                	test   eax,eax
c00006d5:	75 e9                	jne    c00006c0 <strncpy+0x40>
c00006d7:	5b                   	pop    ebx
c00006d8:	89 d0                	mov    eax,edx
c00006da:	5e                   	pop    esi
c00006db:	5f                   	pop    edi
c00006dc:	c3                   	ret    
c00006dd:	8d 76 00             	lea    esi,[esi+0x0]
c00006e0:	85 c0                	test   eax,eax
c00006e2:	74 f3                	je     c00006d7 <strncpy+0x57>
c00006e4:	89 c3                	mov    ebx,eax
c00006e6:	83 f8 04             	cmp    eax,0x4
c00006e9:	73 25                	jae    c0000710 <strncpy+0x90>
c00006eb:	f6 c3 02             	test   bl,0x2
c00006ee:	74 08                	je     c00006f8 <strncpy+0x78>
c00006f0:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c00006f5:	83 c7 02             	add    edi,0x2
c00006f8:	80 e3 01             	and    bl,0x1
c00006fb:	74 da                	je     c00006d7 <strncpy+0x57>
c00006fd:	c6 07 00             	mov    BYTE PTR [edi],0x0
c0000700:	89 d0                	mov    eax,edx
c0000702:	5b                   	pop    ebx
c0000703:	5e                   	pop    esi
c0000704:	5f                   	pop    edi
c0000705:	c3                   	ret    
c0000706:	8d 76 00             	lea    esi,[esi+0x0]
c0000709:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000710:	f7 c7 01 00 00 00    	test   edi,0x1
c0000716:	75 14                	jne    c000072c <strncpy+0xac>
c0000718:	f7 c7 02 00 00 00    	test   edi,0x2
c000071e:	75 17                	jne    c0000737 <strncpy+0xb7>
c0000720:	89 d9                	mov    ecx,ebx
c0000722:	c1 e9 02             	shr    ecx,0x2
c0000725:	fc                   	cld    
c0000726:	31 c0                	xor    eax,eax
c0000728:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c000072a:	eb bf                	jmp    c00006eb <strncpy+0x6b>
c000072c:	c6 07 00             	mov    BYTE PTR [edi],0x0
c000072f:	83 eb 01             	sub    ebx,0x1
c0000732:	83 c7 01             	add    edi,0x1
c0000735:	eb e1                	jmp    c0000718 <strncpy+0x98>
c0000737:	66 c7 07 00 00       	mov    WORD PTR [edi],0x0
c000073c:	83 eb 02             	sub    ebx,0x2
c000073f:	83 c7 02             	add    edi,0x2
c0000742:	eb dc                	jmp    c0000720 <strncpy+0xa0>
c0000744:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000074a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000750 <strcmp>:
c0000750:	57                   	push   edi
c0000751:	56                   	push   esi
c0000752:	53                   	push   ebx
c0000753:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0000757:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000075b:	8a 17                	mov    dl,BYTE PTR [edi]
c000075d:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0000760:	38 c2                	cmp    dl,al
c0000762:	75 32                	jne    c0000796 <strcmp+0x46>
c0000764:	85 c0                	test   eax,eax
c0000766:	74 28                	je     c0000790 <strcmp+0x40>
c0000768:	b8 01 00 00 00       	mov    eax,0x1
c000076d:	eb 08                	jmp    c0000777 <strcmp+0x27>
c000076f:	90                   	nop
c0000770:	83 c0 01             	add    eax,0x1
c0000773:	85 db                	test   ebx,ebx
c0000775:	74 19                	je     c0000790 <strcmp+0x40>
c0000777:	0f be 1c 07          	movsx  ebx,BYTE PTR [edi+eax*1]
c000077b:	8a 0c 06             	mov    cl,BYTE PTR [esi+eax*1]
c000077e:	89 da                	mov    edx,ebx
c0000780:	38 d9                	cmp    cl,bl
c0000782:	74 ec                	je     c0000770 <strcmp+0x20>
c0000784:	5b                   	pop    ebx
c0000785:	0f b6 c2             	movzx  eax,dl
c0000788:	0f b6 c9             	movzx  ecx,cl
c000078b:	5e                   	pop    esi
c000078c:	29 c8                	sub    eax,ecx
c000078e:	5f                   	pop    edi
c000078f:	c3                   	ret    
c0000790:	5b                   	pop    ebx
c0000791:	31 c0                	xor    eax,eax
c0000793:	5e                   	pop    esi
c0000794:	5f                   	pop    edi
c0000795:	c3                   	ret    
c0000796:	89 c1                	mov    ecx,eax
c0000798:	eb ea                	jmp    c0000784 <strcmp+0x34>
c000079a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]

c00007a0 <strchr>:
c00007a0:	53                   	push   ebx
c00007a1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00007a5:	0f be 18             	movsx  ebx,BYTE PTR [eax]
c00007a8:	85 db                	test   ebx,ebx
c00007aa:	74 22                	je     c00007ce <strchr+0x2e>
c00007ac:	0f be 54 24 0c       	movsx  edx,BYTE PTR [esp+0xc]
c00007b1:	39 d3                	cmp    ebx,edx
c00007b3:	74 1b                	je     c00007d0 <strchr+0x30>
c00007b5:	89 d1                	mov    ecx,edx
c00007b7:	eb 0b                	jmp    c00007c4 <strchr+0x24>
c00007b9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007c0:	39 ca                	cmp    edx,ecx
c00007c2:	74 0c                	je     c00007d0 <strchr+0x30>
c00007c4:	83 c0 01             	add    eax,0x1
c00007c7:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00007ca:	85 d2                	test   edx,edx
c00007cc:	75 f2                	jne    c00007c0 <strchr+0x20>
c00007ce:	31 c0                	xor    eax,eax
c00007d0:	5b                   	pop    ebx
c00007d1:	c3                   	ret    
c00007d2:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
c00007d9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00007e0 <strncmp>:
c00007e0:	55                   	push   ebp
c00007e1:	57                   	push   edi
c00007e2:	56                   	push   esi
c00007e3:	53                   	push   ebx
c00007e4:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c00007e8:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ec:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00007f0:	85 f6                	test   esi,esi
c00007f2:	74 35                	je     c0000829 <strncmp+0x49>
c00007f4:	8a 17                	mov    dl,BYTE PTR [edi]
c00007f6:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00007f9:	89 e9                	mov    ecx,ebp
c00007fb:	38 ca                	cmp    dl,cl
c00007fd:	75 31                	jne    c0000830 <strncmp+0x50>
c00007ff:	8d 47 01             	lea    eax,[edi+0x1]
c0000802:	85 ed                	test   ebp,ebp
c0000804:	74 23                	je     c0000829 <strncmp+0x49>
c0000806:	01 f7                	add    edi,esi
c0000808:	eb 18                	jmp    c0000822 <strncmp+0x42>
c000080a:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000810:	0f be 30             	movsx  esi,BYTE PTR [eax]
c0000813:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000815:	89 f2                	mov    edx,esi
c0000817:	38 d1                	cmp    cl,dl
c0000819:	75 15                	jne    c0000830 <strncmp+0x50>
c000081b:	83 c0 01             	add    eax,0x1
c000081e:	85 f6                	test   esi,esi
c0000820:	74 07                	je     c0000829 <strncmp+0x49>
c0000822:	83 c3 01             	add    ebx,0x1
c0000825:	39 c7                	cmp    edi,eax
c0000827:	75 e7                	jne    c0000810 <strncmp+0x30>
c0000829:	5b                   	pop    ebx
c000082a:	31 c0                	xor    eax,eax
c000082c:	5e                   	pop    esi
c000082d:	5f                   	pop    edi
c000082e:	5d                   	pop    ebp
c000082f:	c3                   	ret    
c0000830:	5b                   	pop    ebx
c0000831:	0f b6 c2             	movzx  eax,dl
c0000834:	5e                   	pop    esi
c0000835:	0f b6 c9             	movzx  ecx,cl
c0000838:	5f                   	pop    edi
c0000839:	29 c8                	sub    eax,ecx
c000083b:	5d                   	pop    ebp
c000083c:	c3                   	ret    
c000083d:	8d 76 00             	lea    esi,[esi+0x0]

c0000840 <strcat>:
c0000840:	56                   	push   esi
c0000841:	53                   	push   ebx
c0000842:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000846:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000084a:	89 c3                	mov    ebx,eax
c000084c:	eb 04                	jmp    c0000852 <strcat+0x12>
c000084e:	66 90                	xchg   ax,ax
c0000850:	89 d3                	mov    ebx,edx
c0000852:	8d 53 01             	lea    edx,[ebx+0x1]
c0000855:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000859:	75 f5                	jne    c0000850 <strcat+0x10>
c000085b:	31 d2                	xor    edx,edx
c000085d:	8d 76 00             	lea    esi,[esi+0x0]
c0000860:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c0000863:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c0000866:	83 c2 01             	add    edx,0x1
c0000869:	84 c9                	test   cl,cl
c000086b:	75 f3                	jne    c0000860 <strcat+0x20>
c000086d:	5b                   	pop    ebx
c000086e:	5e                   	pop    esi
c000086f:	c3                   	ret    

c0000870 <strncat>:
c0000870:	56                   	push   esi
c0000871:	53                   	push   ebx
c0000872:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0000876:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000087a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000087e:	85 f6                	test   esi,esi
c0000880:	74 32                	je     c00008b4 <strncat+0x44>
c0000882:	89 c2                	mov    edx,eax
c0000884:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000088a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]
c0000890:	83 c2 01             	add    edx,0x1
c0000893:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000897:	75 f7                	jne    c0000890 <strncat+0x20>
c0000899:	01 ce                	add    esi,ecx
c000089b:	eb 0a                	jmp    c00008a7 <strncat+0x37>
c000089d:	8d 76 00             	lea    esi,[esi+0x0]
c00008a0:	39 f1                	cmp    ecx,esi
c00008a2:	74 1c                	je     c00008c0 <strncat+0x50>
c00008a4:	83 c2 01             	add    edx,0x1
c00008a7:	83 c1 01             	add    ecx,0x1
c00008aa:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00008ad:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00008b0:	84 db                	test   bl,bl
c00008b2:	75 ec                	jne    c00008a0 <strncat+0x30>
c00008b4:	5b                   	pop    ebx
c00008b5:	5e                   	pop    esi
c00008b6:	c3                   	ret    
c00008b7:	89 f6                	mov    esi,esi
c00008b9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c00008c0:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00008c3:	5b                   	pop    ebx
c00008c4:	5e                   	pop    esi
c00008c5:	c3                   	ret    
c00008c6:	8d 76 00             	lea    esi,[esi+0x0]
c00008c9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c00008d0 <strstr>:
c00008d0:	57                   	push   edi
c00008d1:	56                   	push   esi
c00008d2:	53                   	push   ebx
c00008d3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008d7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00008db:	57                   	push   edi
c00008dc:	e8 8f fc ff ff       	call   c0000570 <strlen>
c00008e1:	59                   	pop    ecx
c00008e2:	85 c0                	test   eax,eax
c00008e4:	74 3a                	je     c0000920 <strstr+0x50>
c00008e6:	89 c6                	mov    esi,eax
c00008e8:	eb 18                	jmp    c0000902 <strstr+0x32>
c00008ea:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c00008f0:	56                   	push   esi
c00008f1:	57                   	push   edi
c00008f2:	53                   	push   ebx
c00008f3:	e8 88 fa ff ff       	call   c0000380 <memcmp>
c00008f8:	83 c4 0c             	add    esp,0xc
c00008fb:	85 c0                	test   eax,eax
c00008fd:	74 21                	je     c0000920 <strstr+0x50>
c00008ff:	83 c3 01             	add    ebx,0x1
c0000902:	53                   	push   ebx
c0000903:	e8 68 fc ff ff       	call   c0000570 <strlen>
c0000908:	5a                   	pop    edx
c0000909:	39 f0                	cmp    eax,esi
c000090b:	73 e3                	jae    c00008f0 <strstr+0x20>
c000090d:	5b                   	pop    ebx
c000090e:	31 c0                	xor    eax,eax
c0000910:	5e                   	pop    esi
c0000911:	5f                   	pop    edi
c0000912:	c3                   	ret    
c0000913:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c0000919:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000920:	89 d8                	mov    eax,ebx
c0000922:	5b                   	pop    ebx
c0000923:	5e                   	pop    esi
c0000924:	5f                   	pop    edi
c0000925:	c3                   	ret    
c0000926:	8d 76 00             	lea    esi,[esi+0x0]
c0000929:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]

c0000930 <toupper>:
c0000930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000934:	0f b6 d0             	movzx  edx,al
c0000937:	f6 82 80 fe 01 c0 02 	test   BYTE PTR [edx-0x3ffe0180],0x2
c000093e:	74 03                	je     c0000943 <toupper+0x13>
c0000940:	83 e8 20             	sub    eax,0x20
c0000943:	c3                   	ret    
c0000944:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000094a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000950 <tolower>:
c0000950:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000954:	0f b6 d0             	movzx  edx,al
c0000957:	f6 82 80 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe0180],0x1
c000095e:	74 03                	je     c0000963 <tolower+0x13>
c0000960:	83 c0 20             	add    eax,0x20
c0000963:	c3                   	ret    
c0000964:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
c000096a:	8d bf 00 00 00 00    	lea    edi,[edi+0x0]

c0000970 <simple_strtoul>:
c0000970:	55                   	push   ebp
c0000971:	57                   	push   edi
c0000972:	56                   	push   esi
c0000973:	53                   	push   ebx
c0000974:	83 ec 08             	sub    esp,0x8
c0000977:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000097b:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000097f:	eb 12                	jmp    c0000993 <simple_strtoul+0x23>
c0000981:	eb 0d                	jmp    c0000990 <simple_strtoul+0x20>
c0000983:	90                   	nop
c0000984:	90                   	nop
c0000985:	90                   	nop
c0000986:	90                   	nop
c0000987:	90                   	nop
c0000988:	90                   	nop
c0000989:	90                   	nop
c000098a:	90                   	nop
c000098b:	90                   	nop
c000098c:	90                   	nop
c000098d:	90                   	nop
c000098e:	90                   	nop
c000098f:	90                   	nop
c0000990:	83 c3 01             	add    ebx,0x1
c0000993:	0f b6 13             	movzx  edx,BYTE PTR [ebx]
c0000996:	f6 82 80 fe 01 c0 08 	test   BYTE PTR [edx-0x3ffe0180],0x8
c000099d:	75 f1                	jne    c0000990 <simple_strtoul+0x20>
c000099f:	0f be c2             	movsx  eax,dl
c00009a2:	83 f8 09             	cmp    eax,0x9
c00009a5:	74 e9                	je     c0000990 <simple_strtoul+0x20>
c00009a7:	83 f8 2d             	cmp    eax,0x2d
c00009aa:	0f 84 60 01 00 00    	je     c0000b10 <simple_strtoul+0x1a0>
c00009b0:	83 f8 2b             	cmp    eax,0x2b
c00009b3:	0f 84 e7 00 00 00    	je     c0000aa0 <simple_strtoul+0x130>
c00009b9:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00009c1:	85 f6                	test   esi,esi
c00009c3:	0f 85 ea 00 00 00    	jne    c0000ab3 <simple_strtoul+0x143>
c00009c9:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c00009cc:	89 d1                	mov    ecx,edx
c00009ce:	83 fa 30             	cmp    edx,0x30
c00009d1:	0f 84 90 01 00 00    	je     c0000b67 <simple_strtoul+0x1f7>
c00009d7:	be 0a 00 00 00       	mov    esi,0xa
c00009dc:	85 d2                	test   edx,edx
c00009de:	0f 84 c5 01 00 00    	je     c0000ba9 <simple_strtoul+0x239>
c00009e4:	31 ed                	xor    ebp,ebp
c00009e6:	31 ff                	xor    edi,edi
c00009e8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00009ef:	eb 3e                	jmp    c0000a2f <simple_strtoul+0xbf>
c00009f1:	eb 0d                	jmp    c0000a00 <simple_strtoul+0x90>
c00009f3:	90                   	nop
c00009f4:	90                   	nop
c00009f5:	90                   	nop
c00009f6:	90                   	nop
c00009f7:	90                   	nop
c00009f8:	90                   	nop
c00009f9:	90                   	nop
c00009fa:	90                   	nop
c00009fb:	90                   	nop
c00009fc:	90                   	nop
c00009fd:	90                   	nop
c00009fe:	90                   	nop
c00009ff:	90                   	nop
c0000a00:	83 e9 30             	sub    ecx,0x30
c0000a03:	39 f1                	cmp    ecx,esi
c0000a05:	73 59                	jae    c0000a60 <simple_strtoul+0xf0>
c0000a07:	31 d2                	xor    edx,edx
c0000a09:	89 c8                	mov    eax,ecx
c0000a0b:	f7 d0                	not    eax
c0000a0d:	f7 f6                	div    esi
c0000a0f:	39 f8                	cmp    eax,edi
c0000a11:	0f 82 d9 00 00 00    	jb     c0000af0 <simple_strtoul+0x180>
c0000a17:	0f af fe             	imul   edi,esi
c0000a1a:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000a21:	01 cf                	add    edi,ecx
c0000a23:	83 c3 01             	add    ebx,0x1
c0000a26:	0f be 13             	movsx  edx,BYTE PTR [ebx]
c0000a29:	89 d1                	mov    ecx,edx
c0000a2b:	85 d2                	test   edx,edx
c0000a2d:	74 31                	je     c0000a60 <simple_strtoul+0xf0>
c0000a2f:	0f b6 c9             	movzx  ecx,cl
c0000a32:	f6 81 80 fe 01 c0 04 	test   BYTE PTR [ecx-0x3ffe0180],0x4
c0000a39:	75 c5                	jne    c0000a00 <simple_strtoul+0x90>
c0000a3b:	52                   	push   edx
c0000a3c:	e8 ef fe ff ff       	call   c0000930 <toupper>
c0000a41:	59                   	pop    ecx
c0000a42:	0f b6 d0             	movzx  edx,al
c0000a45:	f6 82 80 fe 01 c0 01 	test   BYTE PTR [edx-0x3ffe0180],0x1
c0000a4c:	74 12                	je     c0000a60 <simple_strtoul+0xf0>
c0000a4e:	8d 48 c9             	lea    ecx,[eax-0x37]
c0000a51:	39 f1                	cmp    ecx,esi
c0000a53:	72 b2                	jb     c0000a07 <simple_strtoul+0x97>
c0000a55:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000a59:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000a60:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a64:	85 c0                	test   eax,eax
c0000a66:	74 18                	je     c0000a80 <simple_strtoul+0x110>
c0000a68:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000a6b:	09 f8                	or     eax,edi
c0000a6d:	0f 85 8d 00 00 00    	jne    c0000b00 <simple_strtoul+0x190>
c0000a73:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000a77:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000a7b:	31 ff                	xor    edi,edi
c0000a7d:	89 30                	mov    DWORD PTR [eax],esi
c0000a7f:	90                   	nop
c0000a80:	83 fd 01             	cmp    ebp,0x1
c0000a83:	75 05                	jne    c0000a8a <simple_strtoul+0x11a>
c0000a85:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000a8a:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000a8f:	75 02                	jne    c0000a93 <simple_strtoul+0x123>
c0000a91:	f7 df                	neg    edi
c0000a93:	83 c4 08             	add    esp,0x8
c0000a96:	89 f8                	mov    eax,edi
c0000a98:	5b                   	pop    ebx
c0000a99:	5e                   	pop    esi
c0000a9a:	5f                   	pop    edi
c0000a9b:	5d                   	pop    ebp
c0000a9c:	c3                   	ret    
c0000a9d:	8d 76 00             	lea    esi,[esi+0x0]
c0000aa0:	83 c3 01             	add    ebx,0x1
c0000aa3:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000aab:	85 f6                	test   esi,esi
c0000aad:	0f 84 16 ff ff ff    	je     c00009c9 <simple_strtoul+0x59>
c0000ab3:	8d 46 fe             	lea    eax,[esi-0x2]
c0000ab6:	83 f8 22             	cmp    eax,0x22
c0000ab9:	0f 87 8b 00 00 00    	ja     c0000b4a <simple_strtoul+0x1da>
c0000abf:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0000ac1:	83 fe 08             	cmp    esi,0x8
c0000ac4:	0f 84 c8 00 00 00    	je     c0000b92 <simple_strtoul+0x222>
c0000aca:	83 fe 10             	cmp    esi,0x10
c0000acd:	0f 85 0d 01 00 00    	jne    c0000be0 <simple_strtoul+0x270>
c0000ad3:	0f be d1             	movsx  edx,cl
c0000ad6:	83 fa 30             	cmp    edx,0x30
c0000ad9:	74 45                	je     c0000b20 <simple_strtoul+0x1b0>
c0000adb:	be 10 00 00 00       	mov    esi,0x10
c0000ae0:	e9 f7 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000ae5:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000ae9:	8d bc 27 00 00 00 00 	lea    edi,[edi+eiz*1+0x0]
c0000af0:	bd 01 00 00 00       	mov    ebp,0x1
c0000af5:	31 ff                	xor    edi,edi
c0000af7:	e9 27 ff ff ff       	jmp    c0000a23 <simple_strtoul+0xb3>
c0000afc:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b00:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b04:	89 18                	mov    DWORD PTR [eax],ebx
c0000b06:	e9 75 ff ff ff       	jmp    c0000a80 <simple_strtoul+0x110>
c0000b0b:	90                   	nop
c0000b0c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
c0000b10:	83 c3 01             	add    ebx,0x1
c0000b13:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b1b:	e9 a1 fe ff ff       	jmp    c00009c1 <simple_strtoul+0x51>
c0000b20:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b24:	52                   	push   edx
c0000b25:	89 d1                	mov    ecx,edx
c0000b27:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b2b:	e8 20 fe ff ff       	call   c0000950 <tolower>
c0000b30:	5e                   	pop    esi
c0000b31:	83 f8 78             	cmp    eax,0x78
c0000b34:	0f 84 93 00 00 00    	je     c0000bcd <simple_strtoul+0x25d>
c0000b3a:	83 c3 01             	add    ebx,0x1
c0000b3d:	be 10 00 00 00       	mov    esi,0x10
c0000b42:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b45:	e9 92 fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b4a:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000b4e:	85 ff                	test   edi,edi
c0000b50:	74 69                	je     c0000bbb <simple_strtoul+0x24b>
c0000b52:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b56:	85 db                	test   ebx,ebx
c0000b58:	75 5b                	jne    c0000bb5 <simple_strtoul+0x245>
c0000b5a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000b60:	31 ff                	xor    edi,edi
c0000b62:	e9 23 ff ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000b67:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000b6b:	52                   	push   edx
c0000b6c:	89 d1                	mov    ecx,edx
c0000b6e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0000b72:	e8 d9 fd ff ff       	call   c0000950 <tolower>
c0000b77:	5d                   	pop    ebp
c0000b78:	83 f8 78             	cmp    eax,0x78
c0000b7b:	74 45                	je     c0000bc2 <simple_strtoul+0x252>
c0000b7d:	83 c3 01             	add    ebx,0x1
c0000b80:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0000b83:	83 fa 30             	cmp    edx,0x30
c0000b86:	74 16                	je     c0000b9e <simple_strtoul+0x22e>
c0000b88:	be 08 00 00 00       	mov    esi,0x8
c0000b8d:	e9 4a fe ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000b92:	0f be d1             	movsx  edx,cl
c0000b95:	83 fa 30             	cmp    edx,0x30
c0000b98:	0f 85 3e fe ff ff    	jne    c00009dc <simple_strtoul+0x6c>
c0000b9e:	0f be 53 01          	movsx  edx,BYTE PTR [ebx+0x1]
c0000ba2:	83 c3 01             	add    ebx,0x1
c0000ba5:	89 d1                	mov    ecx,edx
c0000ba7:	eb df                	jmp    c0000b88 <simple_strtoul+0x218>
c0000ba9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000bad:	85 d2                	test   edx,edx
c0000baf:	74 0a                	je     c0000bbb <simple_strtoul+0x24b>
c0000bb1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bb5:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000bb9:	89 30                	mov    DWORD PTR [eax],esi
c0000bbb:	31 ff                	xor    edi,edi
c0000bbd:	e9 c8 fe ff ff       	jmp    c0000a8a <simple_strtoul+0x11a>
c0000bc2:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0000bc5:	83 c3 02             	add    ebx,0x2
c0000bc8:	e9 06 ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x163>
c0000bcd:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0000bd1:	be 10 00 00 00       	mov    esi,0x10
c0000bd6:	89 d1                	mov    ecx,edx
c0000bd8:	83 c3 02             	add    ebx,0x2
c0000bdb:	e9 fc fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>
c0000be0:	0f be d1             	movsx  edx,cl
c0000be3:	e9 f4 fd ff ff       	jmp    c00009dc <simple_strtoul+0x6c>

c0000be8 <largebin_index>:
c0000be8:	89 c2                	mov    edx,eax
c0000bea:	c1 ea 08             	shr    edx,0x8
c0000bed:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000bf3:	77 10                	ja     c0000c05 <largebin_index+0x1d>
c0000bf5:	0f bd d2             	bsr    edx,edx
c0000bf8:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000bfb:	d3 e8                	shr    eax,cl
c0000bfd:	83 e0 03             	and    eax,0x3
c0000c00:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c04:	c3                   	ret    
c0000c05:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c0a:	c3                   	ret    

c0000c0b <malloc_init_state>:
c0000c0b:	53                   	push   ebx
c0000c0c:	8d 50 34             	lea    edx,[eax+0x34]
c0000c0f:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c15:	89 d1                	mov    ecx,edx
c0000c17:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c1a:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c1d:	83 c2 08             	add    edx,0x8
c0000c20:	39 da                	cmp    edx,ebx
c0000c22:	75 f3                	jne    c0000c17 <malloc_init_state+0xc>
c0000c24:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c26:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c30:	83 e2 03             	and    edx,0x3
c0000c33:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c3d:	83 ca 48             	or     edx,0x48
c0000c40:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000c4a:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000c54:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000c5b:	89 10                	mov    DWORD PTR [eax],edx
c0000c5d:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000c60:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000c6a:	5b                   	pop    ebx
c0000c6b:	c3                   	ret    

c0000c6c <malloc_consolidate>:
c0000c6c:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c6e:	85 d2                	test   edx,edx
c0000c70:	0f 84 d8 00 00 00    	je     c0000d4e <malloc_consolidate+0xe2>
c0000c76:	55                   	push   ebp
c0000c77:	83 e2 fd             	and    edx,0xfffffffd
c0000c7a:	57                   	push   edi
c0000c7b:	89 c5                	mov    ebp,eax
c0000c7d:	56                   	push   esi
c0000c7e:	8d 78 34             	lea    edi,[eax+0x34]
c0000c81:	53                   	push   ebx
c0000c82:	83 ec 10             	sub    esp,0x10
c0000c85:	89 10                	mov    DWORD PTR [eax],edx
c0000c87:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000c8b:	c1 ea 03             	shr    edx,0x3
c0000c8e:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000c92:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000c96:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000c99:	85 d2                	test   edx,edx
c0000c9b:	0f 84 98 00 00 00    	je     c0000d39 <malloc_consolidate+0xcd>
c0000ca1:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000ca8:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000cab:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000cae:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000cb2:	89 f9                	mov    ecx,edi
c0000cb4:	83 e1 fe             	and    ecx,0xfffffffe
c0000cb7:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000cba:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000cbd:	83 e3 fc             	and    ebx,0xfffffffc
c0000cc0:	83 e7 01             	and    edi,0x1
c0000cc3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000cc6:	75 14                	jne    c0000cdc <malloc_consolidate+0x70>
c0000cc8:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000cca:	29 fa                	sub    edx,edi
c0000ccc:	01 f9                	add    ecx,edi
c0000cce:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000cd1:	89 fb                	mov    ebx,edi
c0000cd3:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000cd6:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000cd9:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000cdc:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000cdf:	74 40                	je     c0000d21 <malloc_consolidate+0xb5>
c0000ce1:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000ce4:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000ce7:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000ceb:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000cee:	83 e7 01             	and    edi,0x1
c0000cf1:	75 0e                	jne    c0000d01 <malloc_consolidate+0x95>
c0000cf3:	01 d9                	add    ecx,ebx
c0000cf5:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000cf8:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000cfb:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000cfe:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d01:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d04:	89 ce                	mov    esi,ecx
c0000d06:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d09:	83 ce 01             	or     esi,0x1
c0000d0c:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d0f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d12:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d15:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d19:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d1c:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d1f:	eb 0c                	jmp    c0000d2d <malloc_consolidate+0xc1>
c0000d21:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d24:	83 c9 01             	or     ecx,0x1
c0000d27:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d2a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d2d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d31:	85 d2                	test   edx,edx
c0000d33:	0f 85 6f ff ff ff    	jne    c0000ca8 <malloc_consolidate+0x3c>
c0000d39:	83 c5 04             	add    ebp,0x4
c0000d3c:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d40:	0f 85 50 ff ff ff    	jne    c0000c96 <malloc_consolidate+0x2a>
c0000d46:	83 c4 10             	add    esp,0x10
c0000d49:	5b                   	pop    ebx
c0000d4a:	5e                   	pop    esi
c0000d4b:	5f                   	pop    edi
c0000d4c:	5d                   	pop    ebp
c0000d4d:	c3                   	ret    
c0000d4e:	e9 b8 fe ff ff       	jmp    c0000c0b <malloc_init_state>

c0000d53 <dlfree>:
c0000d53:	57                   	push   edi
c0000d54:	56                   	push   esi
c0000d55:	53                   	push   ebx
c0000d56:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000d5a:	85 db                	test   ebx,ebx
c0000d5c:	0f 84 e2 00 00 00    	je     c0000e44 <dlfree+0xf1>
c0000d62:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000d65:	8b 0d 00 51 02 c0    	mov    ecx,DWORD PTR ds:0xc0025100
c0000d6b:	89 f0                	mov    eax,esi
c0000d6d:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000d70:	83 e0 fc             	and    eax,0xfffffffc
c0000d73:	39 c1                	cmp    ecx,eax
c0000d75:	72 24                	jb     c0000d9b <dlfree+0x48>
c0000d77:	83 c9 03             	or     ecx,0x3
c0000d7a:	c1 e8 03             	shr    eax,0x3
c0000d7d:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000d83:	83 e8 02             	sub    eax,0x2
c0000d86:	8b 0c 85 04 51 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdaefc]
c0000d8d:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000d8f:	89 14 85 04 51 02 c0 	mov    DWORD PTR [eax*4-0x3ffdaefc],edx
c0000d96:	e9 a9 00 00 00       	jmp    c0000e44 <dlfree+0xf1>
c0000d9b:	83 e6 02             	and    esi,0x2
c0000d9e:	0f 85 a0 00 00 00    	jne    c0000e44 <dlfree+0xf1>
c0000da4:	83 c9 01             	or     ecx,0x1
c0000da7:	8d 34 02             	lea    esi,[edx+eax*1]
c0000daa:	89 0d 00 51 02 c0    	mov    DWORD PTR ds:0xc0025100,ecx
c0000db0:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000db3:	83 e1 fc             	and    ecx,0xfffffffc
c0000db6:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000dba:	75 13                	jne    c0000dcf <dlfree+0x7c>
c0000dbc:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000dbf:	29 da                	sub    edx,ebx
c0000dc1:	01 d8                	add    eax,ebx
c0000dc3:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000dc6:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000dc9:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dcc:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000dcf:	39 35 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,esi
c0000dd5:	74 40                	je     c0000e17 <dlfree+0xc4>
c0000dd7:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000ddb:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000dde:	80 e3 01             	and    bl,0x1
c0000de1:	75 0e                	jne    c0000df1 <dlfree+0x9e>
c0000de3:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000de6:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000de9:	01 c8                	add    eax,ecx
c0000deb:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000dee:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000df1:	8b 0d 3c 51 02 c0    	mov    ecx,DWORD PTR ds:0xc002513c
c0000df7:	c7 42 0c 34 51 02 c0 	mov    DWORD PTR [edx+0xc],0xc0025134
c0000dfe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e01:	89 15 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edx
c0000e07:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e0a:	89 c1                	mov    ecx,eax
c0000e0c:	83 c9 01             	or     ecx,0x1
c0000e0f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e12:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e15:	eb 10                	jmp    c0000e27 <dlfree+0xd4>
c0000e17:	01 c8                	add    eax,ecx
c0000e19:	89 c1                	mov    ecx,eax
c0000e1b:	83 c9 01             	or     ecx,0x1
c0000e1e:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e21:	89 15 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edx
c0000e27:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e2c:	76 16                	jbe    c0000e44 <dlfree+0xf1>
c0000e2e:	f6 05 00 51 02 c0 02 	test   BYTE PTR ds:0xc0025100,0x2
c0000e35:	74 0d                	je     c0000e44 <dlfree+0xf1>
c0000e37:	5b                   	pop    ebx
c0000e38:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0000e3d:	5e                   	pop    esi
c0000e3e:	5f                   	pop    edi
c0000e3f:	e9 28 fe ff ff       	jmp    c0000c6c <malloc_consolidate>
c0000e44:	5b                   	pop    ebx
c0000e45:	5e                   	pop    esi
c0000e46:	5f                   	pop    edi
c0000e47:	c3                   	ret    

c0000e48 <sYSMALLOc>:
c0000e48:	55                   	push   ebp
c0000e49:	57                   	push   edi
c0000e4a:	56                   	push   esi
c0000e4b:	53                   	push   ebx
c0000e4c:	89 d3                	mov    ebx,edx
c0000e4e:	83 ec 2c             	sub    esp,0x2c
c0000e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000e55:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000e5b:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000e5e:	8d 42 ff             	lea    eax,[edx-0x1]
c0000e61:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0000e65:	74 1f                	je     c0000e86 <sYSMALLOc+0x3e>
c0000e67:	89 d8                	mov    eax,ebx
c0000e69:	e8 fe fd ff ff       	call   c0000c6c <malloc_consolidate>
c0000e6e:	83 ec 0c             	sub    esp,0xc
c0000e71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000e75:	83 e8 07             	sub    eax,0x7
c0000e78:	50                   	push   eax
c0000e79:	e8 2d 02 00 00       	call   c00010ab <dlmalloc>
c0000e7e:	83 c4 10             	add    esp,0x10
c0000e81:	e9 1d 02 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000e86:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000e89:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000e8f:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000e92:	83 e0 fc             	and    eax,0xfffffffc
c0000e95:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000e99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000e9d:	83 c0 10             	add    eax,0x10
c0000ea0:	01 c1                	add    ecx,eax
c0000ea2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0000ea6:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000ead:	74 04                	je     c0000eb3 <sYSMALLOc+0x6b>
c0000eaf:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000eb3:	f7 da                	neg    edx
c0000eb5:	03 4c 24 14          	add    ecx,DWORD PTR [esp+0x14]
c0000eb9:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0000ebd:	21 d1                	and    ecx,edx
c0000ebf:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000ec3:	7f 07                	jg     c0000ecc <sYSMALLOc+0x84>
c0000ec5:	31 c0                	xor    eax,eax
c0000ec7:	e9 d7 01 00 00       	jmp    c00010a3 <sYSMALLOc+0x25b>
c0000ecc:	83 ec 0c             	sub    esp,0xc
c0000ecf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000ed3:	e8 b0 6a 00 00       	call   c0007988 <sbrk>
c0000ed8:	83 c4 10             	add    esp,0x10
c0000edb:	89 c6                	mov    esi,eax
c0000edd:	83 f8 ff             	cmp    eax,0xffffffff
c0000ee0:	74 e3                	je     c0000ec5 <sYSMALLOc+0x7d>
c0000ee2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000ee6:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000ee9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000eed:	03 83 68 03 00 00    	add    eax,DWORD PTR [ebx+0x368]
c0000ef3:	39 f1                	cmp    ecx,esi
c0000ef5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ef9:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000eff:	75 13                	jne    c0000f14 <sYSMALLOc+0xcc>
c0000f01:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f05:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f09:	83 c8 01             	or     eax,0x1
c0000f0c:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f0f:	e9 37 01 00 00       	jmp    c000104b <sYSMALLOc+0x203>
c0000f14:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f1a:	89 d5                	mov    ebp,edx
c0000f1c:	83 e5 01             	and    ebp,0x1
c0000f1f:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f24:	0f 95 c0             	setne  al
c0000f27:	21 e8                	and    eax,ebp
c0000f29:	39 f1                	cmp    ecx,esi
c0000f2b:	76 12                	jbe    c0000f3f <sYSMALLOc+0xf7>
c0000f2d:	85 c0                	test   eax,eax
c0000f2f:	74 0e                	je     c0000f3f <sYSMALLOc+0xf7>
c0000f31:	83 e2 fe             	and    edx,0xfffffffe
c0000f34:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f3a:	e9 82 00 00 00       	jmp    c0000fc1 <sYSMALLOc+0x179>
c0000f3f:	85 ed                	test   ebp,ebp
c0000f41:	74 7e                	je     c0000fc1 <sYSMALLOc+0x179>
c0000f43:	85 c0                	test   eax,eax
c0000f45:	74 0e                	je     c0000f55 <sYSMALLOc+0x10d>
c0000f47:	89 f0                	mov    eax,esi
c0000f49:	29 c8                	sub    eax,ecx
c0000f4b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0000f4f:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000f55:	89 f2                	mov    edx,esi
c0000f57:	83 e2 07             	and    edx,0x7
c0000f5a:	74 0c                	je     c0000f68 <sYSMALLOc+0x120>
c0000f5c:	b8 08 00 00 00       	mov    eax,0x8
c0000f61:	29 d0                	sub    eax,edx
c0000f63:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000f66:	eb 04                	jmp    c0000f6c <sYSMALLOc+0x124>
c0000f68:	89 f5                	mov    ebp,esi
c0000f6a:	31 c0                	xor    eax,eax
c0000f6c:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f70:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000f74:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0000f78:	01 c1                	add    ecx,eax
c0000f7a:	83 ec 0c             	sub    esp,0xc
c0000f7d:	01 f1                	add    ecx,esi
c0000f7f:	01 ca                	add    edx,ecx
c0000f81:	29 c8                	sub    eax,ecx
c0000f83:	23 54 24 24          	and    edx,DWORD PTR [esp+0x24]
c0000f87:	01 c2                	add    edx,eax
c0000f89:	52                   	push   edx
c0000f8a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000f8e:	e8 f5 69 00 00       	call   c0007988 <sbrk>
c0000f93:	83 c4 10             	add    esp,0x10
c0000f96:	83 f8 ff             	cmp    eax,0xffffffff
c0000f99:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000f9d:	75 0f                	jne    c0000fae <sYSMALLOc+0x166>
c0000f9f:	83 ec 0c             	sub    esp,0xc
c0000fa2:	6a 00                	push   0x0
c0000fa4:	e8 df 69 00 00       	call   c0007988 <sbrk>
c0000fa9:	83 c4 10             	add    esp,0x10
c0000fac:	eb 30                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fae:	39 c6                	cmp    esi,eax
c0000fb0:	76 33                	jbe    c0000fe5 <sYSMALLOc+0x19d>
c0000fb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000fb6:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c0000fbd:	01 f0                	add    eax,esi
c0000fbf:	eb 1d                	jmp    c0000fde <sYSMALLOc+0x196>
c0000fc1:	83 ec 0c             	sub    esp,0xc
c0000fc4:	89 f5                	mov    ebp,esi
c0000fc6:	6a 00                	push   0x0
c0000fc8:	e8 bb 69 00 00       	call   c0007988 <sbrk>
c0000fcd:	89 c2                	mov    edx,eax
c0000fcf:	29 f2                	sub    edx,esi
c0000fd1:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0000fd5:	83 c4 10             	add    esp,0x10
c0000fd8:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000fde:	31 d2                	xor    edx,edx
c0000fe0:	83 f8 ff             	cmp    eax,0xffffffff
c0000fe3:	74 66                	je     c000104b <sYSMALLOc+0x203>
c0000fe5:	29 e8                	sub    eax,ebp
c0000fe7:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c0000fea:	01 d0                	add    eax,edx
c0000fec:	83 c8 01             	or     eax,0x1
c0000fef:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0000ff2:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0000ff8:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000ffd:	74 4c                	je     c000104b <sYSMALLOc+0x203>
c0000fff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001003:	83 e8 0c             	sub    eax,0xc
c0001006:	83 e0 f8             	and    eax,0xfffffff8
c0001009:	89 c2                	mov    edx,eax
c000100b:	83 ca 01             	or     edx,0x1
c000100e:	83 f8 0f             	cmp    eax,0xf
c0001011:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001014:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000101c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001024:	76 25                	jbe    c000104b <sYSMALLOc+0x203>
c0001026:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000102c:	83 ec 0c             	sub    esp,0xc
c000102f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001039:	83 c7 08             	add    edi,0x8
c000103c:	57                   	push   edi
c000103d:	e8 11 fd ff ff       	call   c0000d53 <dlfree>
c0001042:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c0001048:	83 c4 10             	add    esp,0x10
c000104b:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c0001051:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c0001057:	73 06                	jae    c000105f <sYSMALLOc+0x217>
c0001059:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c000105f:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c0001065:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c000106b:	73 06                	jae    c0001073 <sYSMALLOc+0x22b>
c000106d:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c0001073:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0001076:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001079:	83 e2 fc             	and    edx,0xfffffffc
c000107c:	3b 54 24 1c          	cmp    edx,DWORD PTR [esp+0x1c]
c0001080:	0f 82 3f fe ff ff    	jb     c0000ec5 <sYSMALLOc+0x7d>
c0001086:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000108a:	8d 0c 38             	lea    ecx,[eax+edi*1]
c000108d:	29 fa                	sub    edx,edi
c000108f:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0001092:	83 ca 01             	or     edx,0x1
c0001095:	89 fb                	mov    ebx,edi
c0001097:	83 c0 08             	add    eax,0x8
c000109a:	83 cb 01             	or     ebx,0x1
c000109d:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c00010a0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00010a3:	83 c4 2c             	add    esp,0x2c
c00010a6:	5b                   	pop    ebx
c00010a7:	5e                   	pop    esi
c00010a8:	5f                   	pop    edi
c00010a9:	5d                   	pop    ebp
c00010aa:	c3                   	ret    

c00010ab <dlmalloc>:
c00010ab:	55                   	push   ebp
c00010ac:	57                   	push   edi
c00010ad:	56                   	push   esi
c00010ae:	53                   	push   ebx
c00010af:	83 ec 1c             	sub    esp,0x1c
c00010b2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00010b6:	83 f8 df             	cmp    eax,0xffffffdf
c00010b9:	0f 87 70 03 00 00    	ja     c000142f <dlmalloc+0x384>
c00010bf:	83 c0 0b             	add    eax,0xb
c00010c2:	be 10 00 00 00       	mov    esi,0x10
c00010c7:	83 f8 0f             	cmp    eax,0xf
c00010ca:	76 05                	jbe    c00010d1 <dlmalloc+0x26>
c00010cc:	83 e0 f8             	and    eax,0xfffffff8
c00010cf:	89 c6                	mov    esi,eax
c00010d1:	8b 3d 00 51 02 c0    	mov    edi,DWORD PTR ds:0xc0025100
c00010d7:	f7 c7 01 00 00 00    	test   edi,0x1
c00010dd:	75 17                	jne    c00010f6 <dlmalloc+0x4b>
c00010df:	85 ff                	test   edi,edi
c00010e1:	0f 85 05 03 00 00    	jne    c00013ec <dlmalloc+0x341>
c00010e7:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00010ec:	e8 7b fb ff ff       	call   c0000c6c <malloc_consolidate>
c00010f1:	e9 f6 02 00 00       	jmp    c00013ec <dlmalloc+0x341>
c00010f6:	39 f7                	cmp    edi,esi
c00010f8:	72 1f                	jb     c0001119 <dlmalloc+0x6e>
c00010fa:	89 f2                	mov    edx,esi
c00010fc:	c1 ea 03             	shr    edx,0x3
c00010ff:	83 ea 02             	sub    edx,0x2
c0001102:	8b 04 95 04 51 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdaefc]
c0001109:	85 c0                	test   eax,eax
c000110b:	74 0c                	je     c0001119 <dlmalloc+0x6e>
c000110d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001110:	89 0c 95 04 51 02 c0 	mov    DWORD PTR [edx*4-0x3ffdaefc],ecx
c0001117:	eb 30                	jmp    c0001149 <dlmalloc+0x9e>
c0001119:	89 f0                	mov    eax,esi
c000111b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001121:	77 2e                	ja     c0001151 <dlmalloc+0xa6>
c0001123:	c1 e8 03             	shr    eax,0x3
c0001126:	8d 14 c5 34 51 02 c0 	lea    edx,[eax*8-0x3ffdaecc]
c000112d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001131:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001134:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001137:	39 c3                	cmp    ebx,eax
c0001139:	74 2e                	je     c0001169 <dlmalloc+0xbe>
c000113b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000113e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c0001143:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0001146:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c0001149:	83 c0 08             	add    eax,0x8
c000114c:	e9 e0 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001151:	e8 92 fa ff ff       	call   c0000be8 <largebin_index>
c0001156:	83 e7 02             	and    edi,0x2
c0001159:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000115d:	74 0a                	je     c0001169 <dlmalloc+0xbe>
c000115f:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001164:	e8 03 fb ff ff       	call   c0000c6c <malloc_consolidate>
c0001169:	8d 46 10             	lea    eax,[esi+0x10]
c000116c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001170:	8b 1d 40 51 02 c0    	mov    ebx,DWORD PTR ds:0xc0025140
c0001176:	81 fb 34 51 02 c0    	cmp    ebx,0xc0025134
c000117c:	0f 84 13 01 00 00    	je     c0001295 <dlmalloc+0x1ea>
c0001182:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0001185:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0001188:	83 e7 fc             	and    edi,0xfffffffc
c000118b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001191:	77 4c                	ja     c00011df <dlmalloc+0x134>
c0001193:	3d 34 51 02 c0       	cmp    eax,0xc0025134
c0001198:	75 45                	jne    c00011df <dlmalloc+0x134>
c000119a:	39 1d 30 51 02 c0    	cmp    DWORD PTR ds:0xc0025130,ebx
c00011a0:	75 3d                	jne    c00011df <dlmalloc+0x134>
c00011a2:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c00011a6:	73 37                	jae    c00011df <dlmalloc+0x134>
c00011a8:	8d 04 33             	lea    eax,[ebx+esi*1]
c00011ab:	89 fa                	mov    edx,edi
c00011ad:	a3 3c 51 02 c0       	mov    ds:0xc002513c,eax
c00011b2:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011b7:	a3 30 51 02 c0       	mov    ds:0xc0025130,eax
c00011bc:	29 f2                	sub    edx,esi
c00011be:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011c5:	c7 40 0c 34 51 02 c0 	mov    DWORD PTR [eax+0xc],0xc0025134
c00011cc:	83 ce 01             	or     esi,0x1
c00011cf:	89 d1                	mov    ecx,edx
c00011d1:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c00011d4:	83 c9 01             	or     ecx,0x1
c00011d7:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c00011da:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c00011dd:	eb 15                	jmp    c00011f4 <dlmalloc+0x149>
c00011df:	a3 40 51 02 c0       	mov    ds:0xc0025140,eax
c00011e4:	39 fe                	cmp    esi,edi
c00011e6:	c7 40 08 34 51 02 c0 	mov    DWORD PTR [eax+0x8],0xc0025134
c00011ed:	75 0d                	jne    c00011fc <dlmalloc+0x151>
c00011ef:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c00011f4:	8d 43 08             	lea    eax,[ebx+0x8]
c00011f7:	e9 35 02 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00011fc:	89 f8                	mov    eax,edi
c00011fe:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001204:	77 19                	ja     c000121f <dlmalloc+0x174>
c0001206:	c1 e8 03             	shr    eax,0x3
c0001209:	8d 14 00             	lea    edx,[eax+eax*1]
c000120c:	83 c2 0d             	add    edx,0xd
c000120f:	8d 2c 95 f8 50 02 c0 	lea    ebp,[edx*4-0x3ffdaf08]
c0001216:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c000121d:	eb 46                	jmp    c0001265 <dlmalloc+0x1ba>
c000121f:	e8 c4 f9 ff ff       	call   c0000be8 <largebin_index>
c0001224:	8d 14 00             	lea    edx,[eax+eax*1]
c0001227:	83 c2 0d             	add    edx,0xd
c000122a:	8d 0c 95 00 51 02 c0 	lea    ecx,[edx*4-0x3ffdaf00]
c0001231:	8b 14 95 00 51 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdaf00]
c0001238:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000123b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000123f:	89 d5                	mov    ebp,edx
c0001241:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c0001245:	74 1e                	je     c0001265 <dlmalloc+0x1ba>
c0001247:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c000124a:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c000124d:	77 12                	ja     c0001261 <dlmalloc+0x1b6>
c000124f:	83 cf 01             	or     edi,0x1
c0001252:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c0001255:	76 05                	jbe    c000125c <dlmalloc+0x1b1>
c0001257:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c000125a:	eb f6                	jmp    c0001252 <dlmalloc+0x1a7>
c000125c:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c000125f:	eb 04                	jmp    c0001265 <dlmalloc+0x1ba>
c0001261:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001265:	89 c7                	mov    edi,eax
c0001267:	88 c1                	mov    cl,al
c0001269:	c1 ff 05             	sar    edi,0x5
c000126c:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0001270:	bf 01 00 00 00       	mov    edi,0x1
c0001275:	d3 e7                	shl    edi,cl
c0001277:	89 f8                	mov    eax,edi
c0001279:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000127d:	09 04 bd 34 54 02 c0 	or     DWORD PTR [edi*4-0x3ffdabcc],eax
c0001284:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c0001287:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c000128a:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c000128d:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c0001290:	e9 db fe ff ff       	jmp    c0001170 <dlmalloc+0xc5>
c0001295:	81 fe ff 00 00 00    	cmp    esi,0xff
c000129b:	76 78                	jbe    c0001315 <dlmalloc+0x26a>
c000129d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00012a1:	8d 04 c5 34 51 02 c0 	lea    eax,[eax*8-0x3ffdaecc]
c00012a8:	8d 48 f8             	lea    ecx,[eax-0x8]
c00012ab:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00012ae:	39 ca                	cmp    edx,ecx
c00012b0:	74 63                	je     c0001315 <dlmalloc+0x26a>
c00012b2:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c00012b5:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c00012b8:	83 e3 fc             	and    ebx,0xfffffffc
c00012bb:	39 de                	cmp    esi,ebx
c00012bd:	77 52                	ja     c0001311 <dlmalloc+0x266>
c00012bf:	89 df                	mov    edi,ebx
c00012c1:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c00012c4:	29 f7                	sub    edi,esi
c00012c6:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c00012c9:	01 d3                	add    ebx,edx
c00012cb:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c00012ce:	83 ff 0f             	cmp    edi,0xf
c00012d1:	8d 42 08             	lea    eax,[edx+0x8]
c00012d4:	77 09                	ja     c00012df <dlmalloc+0x234>
c00012d6:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c00012da:	e9 52 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00012df:	8d 0c 32             	lea    ecx,[edx+esi*1]
c00012e2:	83 ce 01             	or     esi,0x1
c00012e5:	89 0d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,ecx
c00012eb:	89 0d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,ecx
c00012f1:	c7 41 08 34 51 02 c0 	mov    DWORD PTR [ecx+0x8],0xc0025134
c00012f8:	c7 41 0c 34 51 02 c0 	mov    DWORD PTR [ecx+0xc],0xc0025134
c00012ff:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001302:	89 fa                	mov    edx,edi
c0001304:	83 ca 01             	or     edx,0x1
c0001307:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000130a:	89 3b                	mov    DWORD PTR [ebx],edi
c000130c:	e9 20 01 00 00       	jmp    c0001431 <dlmalloc+0x386>
c0001311:	89 c2                	mov    edx,eax
c0001313:	eb 99                	jmp    c00012ae <dlmalloc+0x203>
c0001315:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001319:	b8 01 00 00 00       	mov    eax,0x1
c000131e:	41                   	inc    ecx
c000131f:	89 cb                	mov    ebx,ecx
c0001321:	8d 14 cd 2c 51 02 c0 	lea    edx,[ecx*8-0x3ffdaed4]
c0001328:	c1 eb 05             	shr    ebx,0x5
c000132b:	d3 e0                	shl    eax,cl
c000132d:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c0001334:	39 f8                	cmp    eax,edi
c0001336:	77 04                	ja     c000133c <dlmalloc+0x291>
c0001338:	85 c0                	test   eax,eax
c000133a:	75 26                	jne    c0001362 <dlmalloc+0x2b7>
c000133c:	43                   	inc    ebx
c000133d:	83 fb 02             	cmp    ebx,0x2
c0001340:	0f 87 a6 00 00 00    	ja     c00013ec <dlmalloc+0x341>
c0001346:	8b 3c 9d 34 54 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffdabcc]
c000134d:	85 ff                	test   edi,edi
c000134f:	74 eb                	je     c000133c <dlmalloc+0x291>
c0001351:	89 d8                	mov    eax,ebx
c0001353:	c1 e0 06             	shl    eax,0x6
c0001356:	8d 14 85 2c 51 02 c0 	lea    edx,[eax*4-0x3ffdaed4]
c000135d:	b8 01 00 00 00       	mov    eax,0x1
c0001362:	85 f8                	test   eax,edi
c0001364:	75 07                	jne    c000136d <dlmalloc+0x2c2>
c0001366:	83 c2 08             	add    edx,0x8
c0001369:	01 c0                	add    eax,eax
c000136b:	eb f5                	jmp    c0001362 <dlmalloc+0x2b7>
c000136d:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0001370:	39 ca                	cmp    edx,ecx
c0001372:	75 14                	jne    c0001388 <dlmalloc+0x2dd>
c0001374:	89 c1                	mov    ecx,eax
c0001376:	83 c2 08             	add    edx,0x8
c0001379:	f7 d1                	not    ecx
c000137b:	01 c0                	add    eax,eax
c000137d:	21 cf                	and    edi,ecx
c000137f:	89 3c 9d 34 54 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdabcc],edi
c0001386:	eb ac                	jmp    c0001334 <dlmalloc+0x289>
c0001388:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c000138b:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c000138e:	83 e0 fc             	and    eax,0xfffffffc
c0001391:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c0001394:	89 c3                	mov    ebx,eax
c0001396:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c0001399:	29 f3                	sub    ebx,esi
c000139b:	8d 14 01             	lea    edx,[ecx+eax*1]
c000139e:	83 fb 0f             	cmp    ebx,0xf
c00013a1:	8d 41 08             	lea    eax,[ecx+0x8]
c00013a4:	77 09                	ja     c00013af <dlmalloc+0x304>
c00013a6:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c00013aa:	e9 82 00 00 00       	jmp    c0001431 <dlmalloc+0x386>
c00013af:	8d 3c 31             	lea    edi,[ecx+esi*1]
c00013b2:	81 fe ff 00 00 00    	cmp    esi,0xff
c00013b8:	89 3d 3c 51 02 c0    	mov    DWORD PTR ds:0xc002513c,edi
c00013be:	89 3d 40 51 02 c0    	mov    DWORD PTR ds:0xc0025140,edi
c00013c4:	c7 47 08 34 51 02 c0 	mov    DWORD PTR [edi+0x8],0xc0025134
c00013cb:	c7 47 0c 34 51 02 c0 	mov    DWORD PTR [edi+0xc],0xc0025134
c00013d2:	77 06                	ja     c00013da <dlmalloc+0x32f>
c00013d4:	89 3d 30 51 02 c0    	mov    DWORD PTR ds:0xc0025130,edi
c00013da:	83 ce 01             	or     esi,0x1
c00013dd:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c00013e0:	89 d9                	mov    ecx,ebx
c00013e2:	83 c9 01             	or     ecx,0x1
c00013e5:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c00013e8:	89 1a                	mov    DWORD PTR [edx],ebx
c00013ea:	eb 45                	jmp    c0001431 <dlmalloc+0x386>
c00013ec:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c00013f1:	8d 4e 10             	lea    ecx,[esi+0x10]
c00013f4:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00013f7:	83 e2 fc             	and    edx,0xfffffffc
c00013fa:	39 d1                	cmp    ecx,edx
c00013fc:	77 1e                	ja     c000141c <dlmalloc+0x371>
c00013fe:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001401:	89 f3                	mov    ebx,esi
c0001403:	89 0d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,ecx
c0001409:	83 cb 01             	or     ebx,0x1
c000140c:	29 f2                	sub    edx,esi
c000140e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001411:	83 ca 01             	or     edx,0x1
c0001414:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001417:	e9 2d fd ff ff       	jmp    c0001149 <dlmalloc+0x9e>
c000141c:	83 c4 1c             	add    esp,0x1c
c000141f:	89 f0                	mov    eax,esi
c0001421:	5b                   	pop    ebx
c0001422:	ba 00 51 02 c0       	mov    edx,0xc0025100
c0001427:	5e                   	pop    esi
c0001428:	5f                   	pop    edi
c0001429:	5d                   	pop    ebp
c000142a:	e9 19 fa ff ff       	jmp    c0000e48 <sYSMALLOc>
c000142f:	31 c0                	xor    eax,eax
c0001431:	83 c4 1c             	add    esp,0x1c
c0001434:	5b                   	pop    ebx
c0001435:	5e                   	pop    esi
c0001436:	5f                   	pop    edi
c0001437:	5d                   	pop    ebp
c0001438:	c3                   	ret    

c0001439 <iALLOc>:
c0001439:	55                   	push   ebp
c000143a:	89 c5                	mov    ebp,eax
c000143c:	57                   	push   edi
c000143d:	56                   	push   esi
c000143e:	53                   	push   ebx
c000143f:	83 ec 2c             	sub    esp,0x2c
c0001442:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0001446:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000144e:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001455:	75 12                	jne    c0001469 <iALLOc+0x30>
c0001457:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000145b:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001460:	e8 07 f8 ff ff       	call   c0000c6c <malloc_consolidate>
c0001465:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0001469:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000146e:	74 12                	je     c0001482 <iALLOc+0x49>
c0001470:	85 ed                	test   ebp,ebp
c0001472:	0f 84 64 01 00 00    	je     c00015dc <iALLOc+0x1a3>
c0001478:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0001480:	eb 33                	jmp    c00014b5 <iALLOc+0x7c>
c0001482:	85 ed                	test   ebp,ebp
c0001484:	75 14                	jne    c000149a <iALLOc+0x61>
c0001486:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c000148e:	83 c4 2c             	add    esp,0x2c
c0001491:	5b                   	pop    ebx
c0001492:	5e                   	pop    esi
c0001493:	5f                   	pop    edi
c0001494:	5d                   	pop    ebp
c0001495:	e9 11 fc ff ff       	jmp    c00010ab <dlmalloc>
c000149a:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c00014a1:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c00014a9:	83 f8 0f             	cmp    eax,0xf
c00014ac:	76 07                	jbe    c00014b5 <iALLOc+0x7c>
c00014ae:	83 e0 f8             	and    eax,0xfffffff8
c00014b1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00014b5:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c00014ba:	75 09                	jne    c00014c5 <iALLOc+0x8c>
c00014bc:	89 d0                	mov    eax,edx
c00014be:	8d 3c aa             	lea    edi,[edx+ebp*4]
c00014c1:	31 f6                	xor    esi,esi
c00014c3:	eb 3b                	jmp    c0001500 <iALLOc+0xc7>
c00014c5:	8b 02                	mov    eax,DWORD PTR [edx]
c00014c7:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c00014cf:	83 c0 0b             	add    eax,0xb
c00014d2:	83 f8 0f             	cmp    eax,0xf
c00014d5:	76 07                	jbe    c00014de <iALLOc+0xa5>
c00014d7:	83 e0 f8             	and    eax,0xfffffff8
c00014da:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00014de:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00014e2:	0f af f5             	imul   esi,ebp
c00014e5:	eb 25                	jmp    c000150c <iALLOc+0xd3>
c00014e7:	8b 18                	mov    ebx,DWORD PTR [eax]
c00014e9:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c00014ec:	bb 10 00 00 00       	mov    ebx,0x10
c00014f1:	83 f9 0f             	cmp    ecx,0xf
c00014f4:	76 05                	jbe    c00014fb <iALLOc+0xc2>
c00014f6:	83 e1 f8             	and    ecx,0xfffffff8
c00014f9:	89 cb                	mov    ebx,ecx
c00014fb:	01 de                	add    esi,ebx
c00014fd:	83 c0 04             	add    eax,0x4
c0001500:	39 c7                	cmp    edi,eax
c0001502:	75 e3                	jne    c00014e7 <iALLOc+0xae>
c0001504:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000150c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001510:	8b 1d 54 54 02 c0    	mov    ebx,DWORD PTR ds:0xc0025454
c0001516:	83 ec 0c             	sub    esp,0xc
c0001519:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001523:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001527:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000152b:	50                   	push   eax
c000152c:	e8 7a fb ff ff       	call   c00010ab <dlmalloc>
c0001531:	83 c4 10             	add    esp,0x10
c0001534:	89 1d 54 54 02 c0    	mov    DWORD PTR ds:0xc0025454,ebx
c000153a:	85 c0                	test   eax,eax
c000153c:	0f 84 92 00 00 00    	je     c00015d4 <iALLOc+0x19b>
c0001542:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c0001545:	8d 78 f8             	lea    edi,[eax-0x8]
c0001548:	83 e3 fc             	and    ebx,0xfffffffc
c000154b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000154f:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0001554:	74 1e                	je     c0001574 <iALLOc+0x13b>
c0001556:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000155a:	89 d9                	mov    ecx,ebx
c000155c:	52                   	push   edx
c000155d:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0001561:	83 e9 04             	sub    ecx,0x4
c0001564:	51                   	push   ecx
c0001565:	6a 00                	push   0x0
c0001567:	50                   	push   eax
c0001568:	e8 83 ef ff ff       	call   c00004f0 <memset>
c000156d:	83 c4 10             	add    esp,0x10
c0001570:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001574:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0001579:	75 14                	jne    c000158f <iALLOc+0x156>
c000157b:	8d 04 37             	lea    eax,[edi+esi*1]
c000157e:	29 f3                	sub    ebx,esi
c0001580:	8d 48 08             	lea    ecx,[eax+0x8]
c0001583:	83 cb 01             	or     ebx,0x1
c0001586:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000158a:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000158d:	89 f3                	mov    ebx,esi
c000158f:	31 c0                	xor    eax,eax
c0001591:	4d                   	dec    ebp
c0001592:	8d 4f 08             	lea    ecx,[edi+0x8]
c0001595:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001599:	39 c5                	cmp    ebp,eax
c000159b:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c000159e:	74 2c                	je     c00015cc <iALLOc+0x193>
c00015a0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00015a4:	85 c9                	test   ecx,ecx
c00015a6:	75 15                	jne    c00015bd <iALLOc+0x184>
c00015a8:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c00015ab:	8d 71 0b             	lea    esi,[ecx+0xb]
c00015ae:	b9 10 00 00 00       	mov    ecx,0x10
c00015b3:	83 fe 0f             	cmp    esi,0xf
c00015b6:	76 05                	jbe    c00015bd <iALLOc+0x184>
c00015b8:	83 e6 f8             	and    esi,0xfffffff8
c00015bb:	89 f1                	mov    ecx,esi
c00015bd:	89 ce                	mov    esi,ecx
c00015bf:	29 cb                	sub    ebx,ecx
c00015c1:	83 ce 01             	or     esi,0x1
c00015c4:	40                   	inc    eax
c00015c5:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00015c8:	01 cf                	add    edi,ecx
c00015ca:	eb c6                	jmp    c0001592 <iALLOc+0x159>
c00015cc:	83 cb 01             	or     ebx,0x1
c00015cf:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c00015d2:	eb 08                	jmp    c00015dc <iALLOc+0x1a3>
c00015d4:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00015dc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00015e0:	83 c4 2c             	add    esp,0x2c
c00015e3:	5b                   	pop    ebx
c00015e4:	5e                   	pop    esi
c00015e5:	5f                   	pop    edi
c00015e6:	5d                   	pop    ebp
c00015e7:	c3                   	ret    

c00015e8 <dlrealloc>:
c00015e8:	55                   	push   ebp
c00015e9:	57                   	push   edi
c00015ea:	56                   	push   esi
c00015eb:	53                   	push   ebx
c00015ec:	83 ec 1c             	sub    esp,0x1c
c00015ef:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00015f3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00015f7:	85 db                	test   ebx,ebx
c00015f9:	75 10                	jne    c000160b <dlrealloc+0x23>
c00015fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00015ff:	83 c4 1c             	add    esp,0x1c
c0001602:	5b                   	pop    ebx
c0001603:	5e                   	pop    esi
c0001604:	5f                   	pop    edi
c0001605:	5d                   	pop    ebp
c0001606:	e9 a0 fa ff ff       	jmp    c00010ab <dlmalloc>
c000160b:	83 f8 df             	cmp    eax,0xffffffdf
c000160e:	76 07                	jbe    c0001617 <dlrealloc+0x2f>
c0001610:	31 db                	xor    ebx,ebx
c0001612:	e9 6a 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001617:	83 c0 0b             	add    eax,0xb
c000161a:	bd 10 00 00 00       	mov    ebp,0x10
c000161f:	83 f8 0f             	cmp    eax,0xf
c0001622:	76 05                	jbe    c0001629 <dlrealloc+0x41>
c0001624:	83 e0 f8             	and    eax,0xfffffff8
c0001627:	89 c5                	mov    ebp,eax
c0001629:	8b 43 fc             	mov    eax,DWORD PTR [ebx-0x4]
c000162c:	8d 7b f8             	lea    edi,[ebx-0x8]
c000162f:	89 c6                	mov    esi,eax
c0001631:	83 e6 fc             	and    esi,0xfffffffc
c0001634:	a8 02                	test   al,0x2
c0001636:	75 d8                	jne    c0001610 <dlrealloc+0x28>
c0001638:	39 f5                	cmp    ebp,esi
c000163a:	0f 86 04 01 00 00    	jbe    c0001744 <dlrealloc+0x15c>
c0001640:	8d 14 37             	lea    edx,[edi+esi*1]
c0001643:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0001646:	39 15 2c 51 02 c0    	cmp    DWORD PTR ds:0xc002512c,edx
c000164c:	75 33                	jne    c0001681 <dlrealloc+0x99>
c000164e:	83 e1 fc             	and    ecx,0xfffffffc
c0001651:	01 f1                	add    ecx,esi
c0001653:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0001657:	8d 4d 10             	lea    ecx,[ebp+0x10]
c000165a:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c000165e:	77 49                	ja     c00016a9 <dlrealloc+0xc1>
c0001660:	01 ef                	add    edi,ebp
c0001662:	83 e0 01             	and    eax,0x1
c0001665:	09 e8                	or     eax,ebp
c0001667:	89 43 fc             	mov    DWORD PTR [ebx-0x4],eax
c000166a:	89 3d 2c 51 02 c0    	mov    DWORD PTR ds:0xc002512c,edi
c0001670:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001674:	29 e8                	sub    eax,ebp
c0001676:	83 c8 01             	or     eax,0x1
c0001679:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000167c:	e9 00 01 00 00       	jmp    c0001781 <dlrealloc+0x199>
c0001681:	89 c8                	mov    eax,ecx
c0001683:	83 e0 fe             	and    eax,0xfffffffe
c0001686:	f6 44 02 04 01       	test   BYTE PTR [edx+eax*1+0x4],0x1
c000168b:	75 1c                	jne    c00016a9 <dlrealloc+0xc1>
c000168d:	83 e1 fc             	and    ecx,0xfffffffc
c0001690:	01 f1                	add    ecx,esi
c0001692:	39 cd                	cmp    ebp,ecx
c0001694:	77 13                	ja     c00016a9 <dlrealloc+0xc1>
c0001696:	8b 72 08             	mov    esi,DWORD PTR [edx+0x8]
c0001699:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000169c:	89 46 0c             	mov    DWORD PTR [esi+0xc],eax
c000169f:	89 70 08             	mov    DWORD PTR [eax+0x8],esi
c00016a2:	89 ce                	mov    esi,ecx
c00016a4:	e9 9b 00 00 00       	jmp    c0001744 <dlrealloc+0x15c>
c00016a9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00016ad:	8d 45 f9             	lea    eax,[ebp-0x7]
c00016b0:	83 ec 0c             	sub    esp,0xc
c00016b3:	50                   	push   eax
c00016b4:	e8 f2 f9 ff ff       	call   c00010ab <dlmalloc>
c00016b9:	83 c4 10             	add    esp,0x10
c00016bc:	85 c0                	test   eax,eax
c00016be:	0f 84 4c ff ff ff    	je     c0001610 <dlrealloc+0x28>
c00016c4:	8d 48 f8             	lea    ecx,[eax-0x8]
c00016c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00016cb:	39 ca                	cmp    edx,ecx
c00016cd:	75 0a                	jne    c00016d9 <dlrealloc+0xf1>
c00016cf:	8b 40 fc             	mov    eax,DWORD PTR [eax-0x4]
c00016d2:	83 e0 fc             	and    eax,0xfffffffc
c00016d5:	01 c6                	add    esi,eax
c00016d7:	eb 6b                	jmp    c0001744 <dlrealloc+0x15c>
c00016d9:	8d 4e fc             	lea    ecx,[esi-0x4]
c00016dc:	83 f9 27             	cmp    ecx,0x27
c00016df:	76 08                	jbe    c00016e9 <dlrealloc+0x101>
c00016e1:	89 de                	mov    esi,ebx
c00016e3:	89 c7                	mov    edi,eax
c00016e5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00016e7:	eb 43                	jmp    c000172c <dlrealloc+0x144>
c00016e9:	8b 13                	mov    edx,DWORD PTR [ebx]
c00016eb:	83 f9 13             	cmp    ecx,0x13
c00016ee:	89 10                	mov    DWORD PTR [eax],edx
c00016f0:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00016f3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00016f6:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00016f9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00016fc:	76 2e                	jbe    c000172c <dlrealloc+0x144>
c00016fe:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0001701:	83 f9 1b             	cmp    ecx,0x1b
c0001704:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0001707:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c000170a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000170d:	76 1d                	jbe    c000172c <dlrealloc+0x144>
c000170f:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0001712:	83 f9 23             	cmp    ecx,0x23
c0001715:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0001718:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000171b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c000171e:	76 0c                	jbe    c000172c <dlrealloc+0x144>
c0001720:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0001723:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0001726:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0001729:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c000172c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0001730:	83 ec 0c             	sub    esp,0xc
c0001733:	53                   	push   ebx
c0001734:	e8 1a f6 ff ff       	call   c0000d53 <dlfree>
c0001739:	83 c4 10             	add    esp,0x10
c000173c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001740:	89 c3                	mov    ebx,eax
c0001742:	eb 3d                	jmp    c0001781 <dlrealloc+0x199>
c0001744:	89 f2                	mov    edx,esi
c0001746:	8b 4b fc             	mov    ecx,DWORD PTR [ebx-0x4]
c0001749:	29 ea                	sub    edx,ebp
c000174b:	83 e1 01             	and    ecx,0x1
c000174e:	8d 04 37             	lea    eax,[edi+esi*1]
c0001751:	83 fa 0f             	cmp    edx,0xf
c0001754:	77 0b                	ja     c0001761 <dlrealloc+0x179>
c0001756:	09 ce                	or     esi,ecx
c0001758:	89 73 fc             	mov    DWORD PTR [ebx-0x4],esi
c000175b:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c000175f:	eb 20                	jmp    c0001781 <dlrealloc+0x199>
c0001761:	01 ef                	add    edi,ebp
c0001763:	83 ec 0c             	sub    esp,0xc
c0001766:	09 cd                	or     ebp,ecx
c0001768:	83 ca 01             	or     edx,0x1
c000176b:	89 6b fc             	mov    DWORD PTR [ebx-0x4],ebp
c000176e:	83 c7 08             	add    edi,0x8
c0001771:	89 57 fc             	mov    DWORD PTR [edi-0x4],edx
c0001774:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c0001778:	57                   	push   edi
c0001779:	e8 d5 f5 ff ff       	call   c0000d53 <dlfree>
c000177e:	83 c4 10             	add    esp,0x10
c0001781:	83 c4 1c             	add    esp,0x1c
c0001784:	89 d8                	mov    eax,ebx
c0001786:	5b                   	pop    ebx
c0001787:	5e                   	pop    esi
c0001788:	5f                   	pop    edi
c0001789:	5d                   	pop    ebp
c000178a:	c3                   	ret    

c000178b <dlmemalign>:
c000178b:	55                   	push   ebp
c000178c:	57                   	push   edi
c000178d:	56                   	push   esi
c000178e:	53                   	push   ebx
c000178f:	83 ec 0c             	sub    esp,0xc
c0001792:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0001796:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000179a:	83 fa 08             	cmp    edx,0x8
c000179d:	77 10                	ja     c00017af <dlmemalign+0x24>
c000179f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00017a3:	83 c4 0c             	add    esp,0xc
c00017a6:	5b                   	pop    ebx
c00017a7:	5e                   	pop    esi
c00017a8:	5f                   	pop    edi
c00017a9:	5d                   	pop    ebp
c00017aa:	e9 fc f8 ff ff       	jmp    c00010ab <dlmalloc>
c00017af:	bf 10 00 00 00       	mov    edi,0x10
c00017b4:	83 fa 0f             	cmp    edx,0xf
c00017b7:	76 13                	jbe    c00017cc <dlmemalign+0x41>
c00017b9:	8d 4a ff             	lea    ecx,[edx-0x1]
c00017bc:	85 d1                	test   ecx,edx
c00017be:	75 04                	jne    c00017c4 <dlmemalign+0x39>
c00017c0:	89 d7                	mov    edi,edx
c00017c2:	eb 08                	jmp    c00017cc <dlmemalign+0x41>
c00017c4:	39 d7                	cmp    edi,edx
c00017c6:	73 04                	jae    c00017cc <dlmemalign+0x41>
c00017c8:	01 ff                	add    edi,edi
c00017ca:	eb f8                	jmp    c00017c4 <dlmemalign+0x39>
c00017cc:	83 f8 df             	cmp    eax,0xffffffdf
c00017cf:	76 07                	jbe    c00017d8 <dlmemalign+0x4d>
c00017d1:	31 c0                	xor    eax,eax
c00017d3:	e9 ce 00 00 00       	jmp    c00018a6 <dlmemalign+0x11b>
c00017d8:	83 c0 0b             	add    eax,0xb
c00017db:	bd 10 00 00 00       	mov    ebp,0x10
c00017e0:	83 f8 0f             	cmp    eax,0xf
c00017e3:	76 05                	jbe    c00017ea <dlmemalign+0x5f>
c00017e5:	83 e0 f8             	and    eax,0xfffffff8
c00017e8:	89 c5                	mov    ebp,eax
c00017ea:	83 ec 0c             	sub    esp,0xc
c00017ed:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c00017f1:	50                   	push   eax
c00017f2:	e8 b4 f8 ff ff       	call   c00010ab <dlmalloc>
c00017f7:	83 c4 10             	add    esp,0x10
c00017fa:	89 c1                	mov    ecx,eax
c00017fc:	85 c0                	test   eax,eax
c00017fe:	74 d1                	je     c00017d1 <dlmemalign+0x46>
c0001800:	31 d2                	xor    edx,edx
c0001802:	8d 70 f8             	lea    esi,[eax-0x8]
c0001805:	f7 f7                	div    edi
c0001807:	85 d2                	test   edx,edx
c0001809:	74 62                	je     c000186d <dlmemalign+0xe2>
c000180b:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000180f:	89 f8                	mov    eax,edi
c0001811:	f7 d8                	neg    eax
c0001813:	21 c3                	and    ebx,eax
c0001815:	83 eb 08             	sub    ebx,0x8
c0001818:	89 d8                	mov    eax,ebx
c000181a:	29 f0                	sub    eax,esi
c000181c:	83 f8 0f             	cmp    eax,0xf
c000181f:	77 02                	ja     c0001823 <dlmemalign+0x98>
c0001821:	01 fb                	add    ebx,edi
c0001823:	89 d8                	mov    eax,ebx
c0001825:	29 f0                	sub    eax,esi
c0001827:	89 c6                	mov    esi,eax
c0001829:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000182c:	89 c2                	mov    edx,eax
c000182e:	83 e2 fc             	and    edx,0xfffffffc
c0001831:	29 f2                	sub    edx,esi
c0001833:	a8 02                	test   al,0x2
c0001835:	74 10                	je     c0001847 <dlmemalign+0xbc>
c0001837:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c000183a:	83 ca 02             	or     edx,0x2
c000183d:	8d 43 08             	lea    eax,[ebx+0x8]
c0001840:	89 33                	mov    DWORD PTR [ebx],esi
c0001842:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0001845:	eb 5f                	jmp    c00018a6 <dlmemalign+0x11b>
c0001847:	83 ec 0c             	sub    esp,0xc
c000184a:	89 d0                	mov    eax,edx
c000184c:	83 c8 01             	or     eax,0x1
c000184f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0001852:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c0001857:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000185a:	83 e0 01             	and    eax,0x1
c000185d:	09 f0                	or     eax,esi
c000185f:	89 de                	mov    esi,ebx
c0001861:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c0001864:	51                   	push   ecx
c0001865:	e8 e9 f4 ff ff       	call   c0000d53 <dlfree>
c000186a:	83 c4 10             	add    esp,0x10
c000186d:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001870:	a8 02                	test   al,0x2
c0001872:	75 2f                	jne    c00018a3 <dlmemalign+0x118>
c0001874:	83 e0 fc             	and    eax,0xfffffffc
c0001877:	8d 55 10             	lea    edx,[ebp+0x10]
c000187a:	39 c2                	cmp    edx,eax
c000187c:	73 25                	jae    c00018a3 <dlmemalign+0x118>
c000187e:	8d 14 2e             	lea    edx,[esi+ebp*1]
c0001881:	83 ec 0c             	sub    esp,0xc
c0001884:	29 e8                	sub    eax,ebp
c0001886:	83 c2 08             	add    edx,0x8
c0001889:	83 c8 01             	or     eax,0x1
c000188c:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c000188f:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0001892:	83 e0 01             	and    eax,0x1
c0001895:	09 c5                	or     ebp,eax
c0001897:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c000189a:	52                   	push   edx
c000189b:	e8 b3 f4 ff ff       	call   c0000d53 <dlfree>
c00018a0:	83 c4 10             	add    esp,0x10
c00018a3:	8d 46 08             	lea    eax,[esi+0x8]
c00018a6:	83 c4 0c             	add    esp,0xc
c00018a9:	5b                   	pop    ebx
c00018aa:	5e                   	pop    esi
c00018ab:	5f                   	pop    edi
c00018ac:	5d                   	pop    ebp
c00018ad:	c3                   	ret    

c00018ae <dlcalloc>:
c00018ae:	53                   	push   ebx
c00018af:	83 ec 14             	sub    esp,0x14
c00018b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00018b6:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c00018bb:	50                   	push   eax
c00018bc:	e8 ea f7 ff ff       	call   c00010ab <dlmalloc>
c00018c1:	83 c4 10             	add    esp,0x10
c00018c4:	89 c3                	mov    ebx,eax
c00018c6:	85 c0                	test   eax,eax
c00018c8:	74 77                	je     c0001941 <dlcalloc+0x93>
c00018ca:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c00018cd:	89 d0                	mov    eax,edx
c00018cf:	83 e0 fc             	and    eax,0xfffffffc
c00018d2:	80 e2 02             	and    dl,0x2
c00018d5:	75 5a                	jne    c0001931 <dlcalloc+0x83>
c00018d7:	83 e8 04             	sub    eax,0x4
c00018da:	83 f8 27             	cmp    eax,0x27
c00018dd:	76 03                	jbe    c00018e2 <dlcalloc+0x34>
c00018df:	51                   	push   ecx
c00018e0:	eb 53                	jmp    c0001935 <dlcalloc+0x87>
c00018e2:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00018e8:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00018ef:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c00018f6:	83 f8 13             	cmp    eax,0x13
c00018f9:	76 46                	jbe    c0001941 <dlcalloc+0x93>
c00018fb:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001902:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001909:	83 f8 1b             	cmp    eax,0x1b
c000190c:	76 33                	jbe    c0001941 <dlcalloc+0x93>
c000190e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001915:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000191c:	83 f8 23             	cmp    eax,0x23
c000191f:	76 20                	jbe    c0001941 <dlcalloc+0x93>
c0001921:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001928:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000192f:	eb 10                	jmp    c0001941 <dlcalloc+0x93>
c0001931:	83 e8 08             	sub    eax,0x8
c0001934:	52                   	push   edx
c0001935:	50                   	push   eax
c0001936:	6a 00                	push   0x0
c0001938:	53                   	push   ebx
c0001939:	e8 b2 eb ff ff       	call   c00004f0 <memset>
c000193e:	83 c4 10             	add    esp,0x10
c0001941:	89 d8                	mov    eax,ebx
c0001943:	83 c4 08             	add    esp,0x8
c0001946:	5b                   	pop    ebx
c0001947:	c3                   	ret    

c0001948 <dlcfree>:
c0001948:	e9 06 f4 ff ff       	jmp    c0000d53 <dlfree>

c000194d <dlindependent_calloc>:
c000194d:	83 ec 28             	sub    esp,0x28
c0001950:	b9 03 00 00 00       	mov    ecx,0x3
c0001955:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001959:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000195d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0001961:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0001965:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001969:	e8 cb fa ff ff       	call   c0001439 <iALLOc>
c000196e:	83 c4 2c             	add    esp,0x2c
c0001971:	c3                   	ret    

c0001972 <dlindependent_comalloc>:
c0001972:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0001976:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000197a:	31 c9                	xor    ecx,ecx
c000197c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0001980:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001984:	e9 b0 fa ff ff       	jmp    c0001439 <iALLOc>

c0001989 <dlvalloc>:
c0001989:	83 ec 0c             	sub    esp,0xc
c000198c:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c0001993:	75 0a                	jne    c000199f <dlvalloc+0x16>
c0001995:	b8 00 51 02 c0       	mov    eax,0xc0025100
c000199a:	e8 cd f2 ff ff       	call   c0000c6c <malloc_consolidate>
c000199f:	50                   	push   eax
c00019a0:	50                   	push   eax
c00019a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00019a5:	ff 35 5c 54 02 c0    	push   DWORD PTR ds:0xc002545c
c00019ab:	e8 db fd ff ff       	call   c000178b <dlmemalign>
c00019b0:	83 c4 1c             	add    esp,0x1c
c00019b3:	c3                   	ret    

c00019b4 <dlpvalloc>:
c00019b4:	83 ec 0c             	sub    esp,0xc
c00019b7:	83 3d 00 51 02 c0 00 	cmp    DWORD PTR ds:0xc0025100,0x0
c00019be:	75 0a                	jne    c00019ca <dlpvalloc+0x16>
c00019c0:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019c5:	e8 a2 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019ca:	a1 5c 54 02 c0       	mov    eax,ds:0xc002545c
c00019cf:	89 c1                	mov    ecx,eax
c00019d1:	52                   	push   edx
c00019d2:	f7 d9                	neg    ecx
c00019d4:	52                   	push   edx
c00019d5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00019d9:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c00019dd:	21 ca                	and    edx,ecx
c00019df:	52                   	push   edx
c00019e0:	50                   	push   eax
c00019e1:	e8 a5 fd ff ff       	call   c000178b <dlmemalign>
c00019e6:	83 c4 1c             	add    esp,0x1c
c00019e9:	c3                   	ret    

c00019ea <dlmalloc_trim>:
c00019ea:	b8 00 51 02 c0       	mov    eax,0xc0025100
c00019ef:	e8 78 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c00019f4:	31 c0                	xor    eax,eax
c00019f6:	c3                   	ret    

c00019f7 <dlmalloc_usable_size>:
c00019f7:	53                   	push   ebx
c00019f8:	31 c0                	xor    eax,eax
c00019fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00019fe:	85 c9                	test   ecx,ecx
c0001a00:	74 24                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a02:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a05:	f6 c2 02             	test   dl,0x2
c0001a08:	74 08                	je     c0001a12 <dlmalloc_usable_size+0x1b>
c0001a0a:	83 e2 fc             	and    edx,0xfffffffc
c0001a0d:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a10:	eb 14                	jmp    c0001a26 <dlmalloc_usable_size+0x2f>
c0001a12:	89 d3                	mov    ebx,edx
c0001a14:	31 c0                	xor    eax,eax
c0001a16:	83 e3 fe             	and    ebx,0xfffffffe
c0001a19:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a1e:	74 06                	je     c0001a26 <dlmalloc_usable_size+0x2f>
c0001a20:	83 e2 fc             	and    edx,0xfffffffc
c0001a23:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a26:	5b                   	pop    ebx
c0001a27:	c3                   	ret    

c0001a28 <dlmallinfo>:
c0001a28:	55                   	push   ebp
c0001a29:	57                   	push   edi
c0001a2a:	56                   	push   esi
c0001a2b:	53                   	push   ebx
c0001a2c:	83 ec 08             	sub    esp,0x8
c0001a2f:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a33:	83 3d 2c 51 02 c0 00 	cmp    DWORD PTR ds:0xc002512c,0x0
c0001a3a:	75 0a                	jne    c0001a46 <dlmallinfo+0x1e>
c0001a3c:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001a41:	e8 26 f2 ff ff       	call   c0000c6c <malloc_consolidate>
c0001a46:	a1 2c 51 02 c0       	mov    eax,ds:0xc002512c
c0001a4b:	31 ed                	xor    ebp,ebp
c0001a4d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001a50:	31 c9                	xor    ecx,ecx
c0001a52:	83 e0 fc             	and    eax,0xfffffffc
c0001a55:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001a59:	31 c0                	xor    eax,eax
c0001a5b:	8b 14 85 04 51 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaefc]
c0001a62:	85 d2                	test   edx,edx
c0001a64:	74 0e                	je     c0001a74 <dlmallinfo+0x4c>
c0001a66:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001a69:	45                   	inc    ebp
c0001a6a:	83 e6 fc             	and    esi,0xfffffffc
c0001a6d:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001a70:	01 f1                	add    ecx,esi
c0001a72:	eb ee                	jmp    c0001a62 <dlmallinfo+0x3a>
c0001a74:	40                   	inc    eax
c0001a75:	83 f8 0a             	cmp    eax,0xa
c0001a78:	75 e1                	jne    c0001a5b <dlmallinfo+0x33>
c0001a7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001a7e:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001a85:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001a88:	b8 34 51 02 c0       	mov    eax,0xc0025134
c0001a8d:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001a90:	39 f0                	cmp    eax,esi
c0001a92:	74 10                	je     c0001aa4 <dlmallinfo+0x7c>
c0001a94:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001a97:	ff 04 24             	inc    DWORD PTR [esp]
c0001a9a:	83 e7 fc             	and    edi,0xfffffffc
c0001a9d:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aa0:	01 fa                	add    edx,edi
c0001aa2:	eb ec                	jmp    c0001a90 <dlmallinfo+0x68>
c0001aa4:	83 c0 08             	add    eax,0x8
c0001aa7:	3d 2c 54 02 c0       	cmp    eax,0xc002542c
c0001aac:	75 df                	jne    c0001a8d <dlmallinfo+0x65>
c0001aae:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001ab1:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001ab4:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001ab7:	a1 68 54 02 c0       	mov    eax,ds:0xc0025468
c0001abc:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001abf:	89 03                	mov    DWORD PTR [ebx],eax
c0001ac1:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001ac4:	8b 35 50 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025450
c0001aca:	29 d0                	sub    eax,edx
c0001acc:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001acf:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001ad2:	8b 35 64 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025464
c0001ad8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001adc:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001adf:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001ae2:	8b 35 74 54 02 c0    	mov    esi,DWORD PTR ds:0xc0025474
c0001ae8:	89 d8                	mov    eax,ebx
c0001aea:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001aed:	83 c4 08             	add    esp,0x8
c0001af0:	5b                   	pop    ebx
c0001af1:	5e                   	pop    esi
c0001af2:	5f                   	pop    edi
c0001af3:	5d                   	pop    ebp
c0001af4:	c2 04 00             	ret    0x4

c0001af7 <dlmalloc_stats>:
c0001af7:	83 ec 30             	sub    esp,0x30
c0001afa:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001afe:	50                   	push   eax
c0001aff:	e8 24 ff ff ff       	call   c0001a28 <dlmallinfo>
c0001b04:	83 c4 30             	add    esp,0x30
c0001b07:	c3                   	ret    

c0001b08 <dlmallopt>:
c0001b08:	56                   	push   esi
c0001b09:	b8 00 51 02 c0       	mov    eax,0xc0025100
c0001b0e:	53                   	push   ebx
c0001b0f:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b13:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b17:	e8 50 f1 ff ff       	call   c0000c6c <malloc_consolidate>
c0001b1c:	8d 46 04             	lea    eax,[esi+0x4]
c0001b1f:	83 f8 05             	cmp    eax,0x5
c0001b22:	77 67                	ja     c0001b8b <dlmallopt+0x83>
c0001b24:	ff 24 85 84 ff 01 c0 	jmp    DWORD PTR [eax*4-0x3ffe007c]
c0001b2b:	83 fb 50             	cmp    ebx,0x50
c0001b2e:	77 5b                	ja     c0001b8b <dlmallopt+0x83>
c0001b30:	ba 08 00 00 00       	mov    edx,0x8
c0001b35:	85 db                	test   ebx,ebx
c0001b37:	74 12                	je     c0001b4b <dlmallopt+0x43>
c0001b39:	83 c3 0b             	add    ebx,0xb
c0001b3c:	ba 10 00 00 00       	mov    edx,0x10
c0001b41:	83 fb 0f             	cmp    ebx,0xf
c0001b44:	76 05                	jbe    c0001b4b <dlmallopt+0x43>
c0001b46:	89 da                	mov    edx,ebx
c0001b48:	83 e2 f8             	and    edx,0xfffffff8
c0001b4b:	a1 00 51 02 c0       	mov    eax,ds:0xc0025100
c0001b50:	83 e0 03             	and    eax,0x3
c0001b53:	09 d0                	or     eax,edx
c0001b55:	a3 00 51 02 c0       	mov    ds:0xc0025100,eax
c0001b5a:	eb 31                	jmp    c0001b8d <dlmallopt+0x85>
c0001b5c:	89 1d 44 54 02 c0    	mov    DWORD PTR ds:0xc0025444,ebx
c0001b62:	eb 06                	jmp    c0001b6a <dlmallopt+0x62>
c0001b64:	89 1d 48 54 02 c0    	mov    DWORD PTR ds:0xc0025448,ebx
c0001b6a:	be 01 00 00 00       	mov    esi,0x1
c0001b6f:	eb 1c                	jmp    c0001b8d <dlmallopt+0x85>
c0001b71:	89 1d 4c 54 02 c0    	mov    DWORD PTR ds:0xc002544c,ebx
c0001b77:	eb f1                	jmp    c0001b6a <dlmallopt+0x62>
c0001b79:	31 f6                	xor    esi,esi
c0001b7b:	85 db                	test   ebx,ebx
c0001b7d:	75 0e                	jne    c0001b8d <dlmallopt+0x85>
c0001b7f:	c7 05 54 54 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025454,0x0
c0001b89:	eb df                	jmp    c0001b6a <dlmallopt+0x62>
c0001b8b:	31 f6                	xor    esi,esi
c0001b8d:	89 f0                	mov    eax,esi
c0001b8f:	5b                   	pop    ebx
c0001b90:	5e                   	pop    esi
c0001b91:	c3                   	ret    
c0001b92:	66 90                	xchg   ax,ax

c0001b94 <isblank>:
c0001b94:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001b99:	74 09                	je     c0001ba4 <isblank+0x10>
c0001b9b:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001ba0:	75 0a                	jne    c0001bac <isblank+0x18>
c0001ba2:	66 90                	xchg   ax,ax
c0001ba4:	b8 01 00 00 00       	mov    eax,0x1
c0001ba9:	c3                   	ret    
c0001baa:	66 90                	xchg   ax,ax
c0001bac:	b8 00 00 00 00       	mov    eax,0x0
c0001bb1:	c3                   	ret    
c0001bb2:	66 90                	xchg   ax,ax

c0001bb4 <iscntrl>:
c0001bb4:	83 7c 24 04 1f       	cmp    DWORD PTR [esp+0x4],0x1f
c0001bb9:	7e 09                	jle    c0001bc4 <iscntrl+0x10>
c0001bbb:	83 7c 24 04 7f       	cmp    DWORD PTR [esp+0x4],0x7f
c0001bc0:	75 0a                	jne    c0001bcc <iscntrl+0x18>
c0001bc2:	66 90                	xchg   ax,ax
c0001bc4:	b8 01 00 00 00       	mov    eax,0x1
c0001bc9:	c3                   	ret    
c0001bca:	66 90                	xchg   ax,ax
c0001bcc:	b8 00 00 00 00       	mov    eax,0x0
c0001bd1:	c3                   	ret    
c0001bd2:	66 90                	xchg   ax,ax

c0001bd4 <isdigit>:
c0001bd4:	83 7c 24 04 2f       	cmp    DWORD PTR [esp+0x4],0x2f
c0001bd9:	7e 0d                	jle    c0001be8 <isdigit+0x14>
c0001bdb:	83 7c 24 04 39       	cmp    DWORD PTR [esp+0x4],0x39
c0001be0:	7f 06                	jg     c0001be8 <isdigit+0x14>
c0001be2:	b8 01 00 00 00       	mov    eax,0x1
c0001be7:	c3                   	ret    
c0001be8:	b8 00 00 00 00       	mov    eax,0x0
c0001bed:	c3                   	ret    
c0001bee:	66 90                	xchg   ax,ax

c0001bf0 <islower>:
c0001bf0:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001bf5:	7e 0d                	jle    c0001c04 <islower+0x14>
c0001bf7:	83 7c 24 04 7a       	cmp    DWORD PTR [esp+0x4],0x7a
c0001bfc:	7f 06                	jg     c0001c04 <islower+0x14>
c0001bfe:	b8 01 00 00 00       	mov    eax,0x1
c0001c03:	c3                   	ret    
c0001c04:	b8 00 00 00 00       	mov    eax,0x0
c0001c09:	c3                   	ret    
c0001c0a:	66 90                	xchg   ax,ax

c0001c0c <isspace>:
c0001c0c:	83 7c 24 04 09       	cmp    DWORD PTR [esp+0x4],0x9
c0001c11:	7c 19                	jl     c0001c2c <isspace+0x20>
c0001c13:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0001c18:	7e 0a                	jle    c0001c24 <isspace+0x18>
c0001c1a:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001c1f:	75 0b                	jne    c0001c2c <isspace+0x20>
c0001c21:	8d 76 00             	lea    esi,[esi+0x0]
c0001c24:	b8 01 00 00 00       	mov    eax,0x1
c0001c29:	c3                   	ret    
c0001c2a:	66 90                	xchg   ax,ax
c0001c2c:	b8 00 00 00 00       	mov    eax,0x0
c0001c31:	c3                   	ret    
c0001c32:	66 90                	xchg   ax,ax

c0001c34 <isupper>:
c0001c34:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001c39:	7e 0d                	jle    c0001c48 <isupper+0x14>
c0001c3b:	83 7c 24 04 5a       	cmp    DWORD PTR [esp+0x4],0x5a
c0001c40:	7f 06                	jg     c0001c48 <isupper+0x14>
c0001c42:	b8 01 00 00 00       	mov    eax,0x1
c0001c47:	c3                   	ret    
c0001c48:	b8 00 00 00 00       	mov    eax,0x0
c0001c4d:	c3                   	ret    
c0001c4e:	66 90                	xchg   ax,ax

c0001c50 <isalpha>:
c0001c50:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c54:	e8 db ff ff ff       	call   c0001c34 <isupper>
c0001c59:	83 c4 04             	add    esp,0x4
c0001c5c:	85 c0                	test   eax,eax
c0001c5e:	75 10                	jne    c0001c70 <isalpha+0x20>
c0001c60:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c64:	e8 87 ff ff ff       	call   c0001bf0 <islower>
c0001c69:	83 c4 04             	add    esp,0x4
c0001c6c:	85 c0                	test   eax,eax
c0001c6e:	74 08                	je     c0001c78 <isalpha+0x28>
c0001c70:	b8 01 00 00 00       	mov    eax,0x1
c0001c75:	c3                   	ret    
c0001c76:	66 90                	xchg   ax,ax
c0001c78:	b8 00 00 00 00       	mov    eax,0x0
c0001c7d:	c3                   	ret    
c0001c7e:	66 90                	xchg   ax,ax

c0001c80 <isalnum>:
c0001c80:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c84:	e8 c7 ff ff ff       	call   c0001c50 <isalpha>
c0001c89:	83 c4 04             	add    esp,0x4
c0001c8c:	85 c0                	test   eax,eax
c0001c8e:	75 10                	jne    c0001ca0 <isalnum+0x20>
c0001c90:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001c94:	e8 3b ff ff ff       	call   c0001bd4 <isdigit>
c0001c99:	83 c4 04             	add    esp,0x4
c0001c9c:	85 c0                	test   eax,eax
c0001c9e:	74 08                	je     c0001ca8 <isalnum+0x28>
c0001ca0:	b8 01 00 00 00       	mov    eax,0x1
c0001ca5:	c3                   	ret    
c0001ca6:	66 90                	xchg   ax,ax
c0001ca8:	b8 00 00 00 00       	mov    eax,0x0
c0001cad:	c3                   	ret    
c0001cae:	66 90                	xchg   ax,ax

c0001cb0 <ispunct>:
c0001cb0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cb4:	e8 c7 ff ff ff       	call   c0001c80 <isalnum>
c0001cb9:	83 c4 04             	add    esp,0x4
c0001cbc:	85 c0                	test   eax,eax
c0001cbe:	75 28                	jne    c0001ce8 <ispunct+0x38>
c0001cc0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cc4:	e8 43 ff ff ff       	call   c0001c0c <isspace>
c0001cc9:	83 c4 04             	add    esp,0x4
c0001ccc:	85 c0                	test   eax,eax
c0001cce:	75 18                	jne    c0001ce8 <ispunct+0x38>
c0001cd0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cd4:	e8 db fe ff ff       	call   c0001bb4 <iscntrl>
c0001cd9:	83 c4 04             	add    esp,0x4
c0001cdc:	85 c0                	test   eax,eax
c0001cde:	75 08                	jne    c0001ce8 <ispunct+0x38>
c0001ce0:	b8 01 00 00 00       	mov    eax,0x1
c0001ce5:	c3                   	ret    
c0001ce6:	66 90                	xchg   ax,ax
c0001ce8:	b8 00 00 00 00       	mov    eax,0x0
c0001ced:	c3                   	ret    
c0001cee:	66 90                	xchg   ax,ax

c0001cf0 <isgraph>:
c0001cf0:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001cf4:	e8 87 ff ff ff       	call   c0001c80 <isalnum>
c0001cf9:	83 c4 04             	add    esp,0x4
c0001cfc:	85 c0                	test   eax,eax
c0001cfe:	75 10                	jne    c0001d10 <isgraph+0x20>
c0001d00:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d04:	e8 a7 ff ff ff       	call   c0001cb0 <ispunct>
c0001d09:	83 c4 04             	add    esp,0x4
c0001d0c:	85 c0                	test   eax,eax
c0001d0e:	74 08                	je     c0001d18 <isgraph+0x28>
c0001d10:	b8 01 00 00 00       	mov    eax,0x1
c0001d15:	c3                   	ret    
c0001d16:	66 90                	xchg   ax,ax
c0001d18:	b8 00 00 00 00       	mov    eax,0x0
c0001d1d:	c3                   	ret    
c0001d1e:	66 90                	xchg   ax,ax

c0001d20 <isprint>:
c0001d20:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d24:	e8 c7 ff ff ff       	call   c0001cf0 <isgraph>
c0001d29:	83 c4 04             	add    esp,0x4
c0001d2c:	85 c0                	test   eax,eax
c0001d2e:	75 08                	jne    c0001d38 <isprint+0x18>
c0001d30:	83 7c 24 04 20       	cmp    DWORD PTR [esp+0x4],0x20
c0001d35:	75 09                	jne    c0001d40 <isprint+0x20>
c0001d37:	90                   	nop
c0001d38:	b8 01 00 00 00       	mov    eax,0x1
c0001d3d:	c3                   	ret    
c0001d3e:	66 90                	xchg   ax,ax
c0001d40:	b8 00 00 00 00       	mov    eax,0x0
c0001d45:	c3                   	ret    
c0001d46:	66 90                	xchg   ax,ax

c0001d48 <isxdigit>:
c0001d48:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0001d4c:	e8 83 fe ff ff       	call   c0001bd4 <isdigit>
c0001d51:	83 c4 04             	add    esp,0x4
c0001d54:	85 c0                	test   eax,eax
c0001d56:	75 20                	jne    c0001d78 <isxdigit+0x30>
c0001d58:	83 7c 24 04 40       	cmp    DWORD PTR [esp+0x4],0x40
c0001d5d:	7e 09                	jle    c0001d68 <isxdigit+0x20>
c0001d5f:	83 7c 24 04 46       	cmp    DWORD PTR [esp+0x4],0x46
c0001d64:	7e 12                	jle    c0001d78 <isxdigit+0x30>
c0001d66:	66 90                	xchg   ax,ax
c0001d68:	83 7c 24 04 60       	cmp    DWORD PTR [esp+0x4],0x60
c0001d6d:	7e 11                	jle    c0001d80 <isxdigit+0x38>
c0001d6f:	83 7c 24 04 66       	cmp    DWORD PTR [esp+0x4],0x66
c0001d74:	7f 0a                	jg     c0001d80 <isxdigit+0x38>
c0001d76:	66 90                	xchg   ax,ax
c0001d78:	b8 01 00 00 00       	mov    eax,0x1
c0001d7d:	c3                   	ret    
c0001d7e:	66 90                	xchg   ax,ax
c0001d80:	b8 00 00 00 00       	mov    eax,0x0
c0001d85:	c3                   	ret    

c0001d86 <disk_status>:
c0001d86:	31 c0                	xor    eax,eax
c0001d88:	c3                   	ret    

c0001d89 <disk_initialize>:
c0001d89:	31 c0                	xor    eax,eax
c0001d8b:	c3                   	ret    

c0001d8c <disk_read>:
c0001d8c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001d91:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001d99:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001d9d:	e9 66 77 01 00       	jmp    c0019508 <fatWrapperReadDisk>

c0001da2 <disk_write>:
c0001da2:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001da7:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001daf:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001db3:	e9 90 77 01 00       	jmp    c0019548 <fatWrapperWriteDisk>

c0001db8 <disk_ioctl>:
c0001db8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001dbd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001dc1:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001dc6:	0f b6 04 85 20 98 02 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffd67e0]
c0001dce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001dd2:	e9 b1 77 01 00       	jmp    c0019588 <fatWrapperIoctl>

c0001dd7 <ld_word>:
c0001dd7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001ddb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001dde:	c1 e2 08             	shl    edx,0x8
c0001de1:	09 d0                	or     eax,edx
c0001de3:	c3                   	ret    

c0001de4 <ld_dword>:
c0001de4:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001de8:	89 d1                	mov    ecx,edx
c0001dea:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001dee:	c1 e1 08             	shl    ecx,0x8
c0001df1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001df4:	09 ca                	or     edx,ecx
c0001df6:	c1 e2 08             	shl    edx,0x8
c0001df9:	09 d0                	or     eax,edx
c0001dfb:	c3                   	ret    

c0001dfc <st_word>:
c0001dfc:	66 89 10             	mov    WORD PTR [eax],dx
c0001dff:	c3                   	ret    

c0001e00 <st_dword>:
c0001e00:	89 10                	mov    DWORD PTR [eax],edx
c0001e02:	c3                   	ret    

c0001e03 <mem_cpy>:
c0001e03:	85 c9                	test   ecx,ecx
c0001e05:	74 10                	je     c0001e17 <mem_cpy+0x14>
c0001e07:	57                   	push   edi
c0001e08:	01 c1                	add    ecx,eax
c0001e0a:	56                   	push   esi
c0001e0b:	89 c7                	mov    edi,eax
c0001e0d:	89 d6                	mov    esi,edx
c0001e0f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001e10:	39 f9                	cmp    ecx,edi
c0001e12:	75 fb                	jne    c0001e0f <mem_cpy+0xc>
c0001e14:	5e                   	pop    esi
c0001e15:	5f                   	pop    edi
c0001e16:	c3                   	ret    
c0001e17:	c3                   	ret    

c0001e18 <mem_set>:
c0001e18:	01 c1                	add    ecx,eax
c0001e1a:	40                   	inc    eax
c0001e1b:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001e1e:	39 c8                	cmp    eax,ecx
c0001e20:	75 f8                	jne    c0001e1a <mem_set+0x2>
c0001e22:	c3                   	ret    

c0001e23 <mem_cmp>:
c0001e23:	57                   	push   edi
c0001e24:	56                   	push   esi
c0001e25:	89 c6                	mov    esi,eax
c0001e27:	53                   	push   ebx
c0001e28:	46                   	inc    esi
c0001e29:	42                   	inc    edx
c0001e2a:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001e2e:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001e32:	29 fb                	sub    ebx,edi
c0001e34:	89 cf                	mov    edi,ecx
c0001e36:	29 f7                	sub    edi,esi
c0001e38:	01 c7                	add    edi,eax
c0001e3a:	74 04                	je     c0001e40 <mem_cmp+0x1d>
c0001e3c:	85 db                	test   ebx,ebx
c0001e3e:	74 e8                	je     c0001e28 <mem_cmp+0x5>
c0001e40:	89 d8                	mov    eax,ebx
c0001e42:	5b                   	pop    ebx
c0001e43:	5e                   	pop    esi
c0001e44:	5f                   	pop    edi
c0001e45:	c3                   	ret    

c0001e46 <chk_chr>:
c0001e46:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001e49:	85 c9                	test   ecx,ecx
c0001e4b:	74 07                	je     c0001e54 <chk_chr+0xe>
c0001e4d:	39 d1                	cmp    ecx,edx
c0001e4f:	74 03                	je     c0001e54 <chk_chr+0xe>
c0001e51:	40                   	inc    eax
c0001e52:	eb f2                	jmp    c0001e46 <chk_chr>
c0001e54:	89 c8                	mov    eax,ecx
c0001e56:	c3                   	ret    

c0001e57 <dbc_1st>:
c0001e57:	31 c0                	xor    eax,eax
c0001e59:	c3                   	ret    

c0001e5a <dbc_2nd>:
c0001e5a:	31 c0                	xor    eax,eax
c0001e5c:	c3                   	ret    

c0001e5d <tchar2uni>:
c0001e5d:	57                   	push   edi
c0001e5e:	56                   	push   esi
c0001e5f:	53                   	push   ebx
c0001e60:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001e62:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001e64:	8d 73 01             	lea    esi,[ebx+0x1]
c0001e67:	f6 c1 80             	test   cl,0x80
c0001e6a:	75 0a                	jne    c0001e76 <tchar2uni+0x19>
c0001e6c:	0f b6 d1             	movzx  edx,cl
c0001e6f:	89 f3                	mov    ebx,esi
c0001e71:	e9 b2 00 00 00       	jmp    c0001f28 <tchar2uni+0xcb>
c0001e76:	89 ca                	mov    edx,ecx
c0001e78:	81 e2 e0 00 00 00    	and    edx,0xe0
c0001e7e:	81 fa c0 00 00 00    	cmp    edx,0xc0
c0001e84:	89 ca                	mov    edx,ecx
c0001e86:	75 0a                	jne    c0001e92 <tchar2uni+0x35>
c0001e88:	83 e2 1f             	and    edx,0x1f
c0001e8b:	b9 01 00 00 00       	mov    ecx,0x1
c0001e90:	eb 37                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001e92:	81 e2 f0 00 00 00    	and    edx,0xf0
c0001e98:	81 fa e0 00 00 00    	cmp    edx,0xe0
c0001e9e:	75 0c                	jne    c0001eac <tchar2uni+0x4f>
c0001ea0:	89 ca                	mov    edx,ecx
c0001ea2:	b9 02 00 00 00       	mov    ecx,0x2
c0001ea7:	83 e2 0f             	and    edx,0xf
c0001eaa:	eb 1d                	jmp    c0001ec9 <tchar2uni+0x6c>
c0001eac:	89 cf                	mov    edi,ecx
c0001eae:	83 ca ff             	or     edx,0xffffffff
c0001eb1:	81 e7 f8 00 00 00    	and    edi,0xf8
c0001eb7:	81 ff f0 00 00 00    	cmp    edi,0xf0
c0001ebd:	75 70                	jne    c0001f2f <tchar2uni+0xd2>
c0001ebf:	89 ca                	mov    edx,ecx
c0001ec1:	b9 03 00 00 00       	mov    ecx,0x3
c0001ec6:	83 e2 07             	and    edx,0x7
c0001ec9:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001ecd:	46                   	inc    esi
c0001ece:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001ed1:	89 cf                	mov    edi,ecx
c0001ed3:	81 e7 c0 00 00 00    	and    edi,0xc0
c0001ed9:	83 c7 80             	add    edi,0xffffff80
c0001edc:	75 4e                	jne    c0001f2c <tchar2uni+0xcf>
c0001ede:	c1 e2 06             	shl    edx,0x6
c0001ee1:	83 e1 3f             	and    ecx,0x3f
c0001ee4:	09 ca                	or     edx,ecx
c0001ee6:	39 de                	cmp    esi,ebx
c0001ee8:	75 e3                	jne    c0001ecd <tchar2uni+0x70>
c0001eea:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001eed:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001ef3:	77 37                	ja     c0001f2c <tchar2uni+0xcf>
c0001ef5:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001efb:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f01:	76 29                	jbe    c0001f2c <tchar2uni+0xcf>
c0001f03:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001f09:	76 1d                	jbe    c0001f28 <tchar2uni+0xcb>
c0001f0b:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001f11:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001f17:	c1 e1 06             	shl    ecx,0x6
c0001f1a:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001f20:	09 ca                	or     edx,ecx
c0001f22:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001f28:	89 18                	mov    DWORD PTR [eax],ebx
c0001f2a:	eb 03                	jmp    c0001f2f <tchar2uni+0xd2>
c0001f2c:	83 ca ff             	or     edx,0xffffffff
c0001f2f:	5b                   	pop    ebx
c0001f30:	89 d0                	mov    eax,edx
c0001f32:	5e                   	pop    esi
c0001f33:	5f                   	pop    edi
c0001f34:	c3                   	ret    

c0001f35 <put_utf>:
c0001f35:	53                   	push   ebx
c0001f36:	83 f8 7f             	cmp    eax,0x7f
c0001f39:	89 c3                	mov    ebx,eax
c0001f3b:	b0 00                	mov    al,0x0
c0001f3d:	77 11                	ja     c0001f50 <put_utf+0x1b>
c0001f3f:	85 c9                	test   ecx,ecx
c0001f41:	0f 84 e5 00 00 00    	je     c000202c <put_utf+0xf7>
c0001f47:	88 1a                	mov    BYTE PTR [edx],bl
c0001f49:	b0 01                	mov    al,0x1
c0001f4b:	e9 dc 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f50:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001f56:	77 23                	ja     c0001f7b <put_utf+0x46>
c0001f58:	83 f9 01             	cmp    ecx,0x1
c0001f5b:	0f 86 cb 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f61:	89 d8                	mov    eax,ebx
c0001f63:	83 e3 3f             	and    ebx,0x3f
c0001f66:	c1 e8 06             	shr    eax,0x6
c0001f69:	83 cb 80             	or     ebx,0xffffff80
c0001f6c:	83 c8 c0             	or     eax,0xffffffc0
c0001f6f:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001f72:	88 02                	mov    BYTE PTR [edx],al
c0001f74:	b0 02                	mov    al,0x2
c0001f76:	e9 b1 00 00 00       	jmp    c000202c <put_utf+0xf7>
c0001f7b:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001f81:	77 40                	ja     c0001fc3 <put_utf+0x8e>
c0001f83:	83 f9 02             	cmp    ecx,0x2
c0001f86:	0f 86 a0 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f8c:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001f92:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001f98:	0f 86 8e 00 00 00    	jbe    c000202c <put_utf+0xf7>
c0001f9e:	89 d8                	mov    eax,ebx
c0001fa0:	c1 e8 0c             	shr    eax,0xc
c0001fa3:	83 c8 e0             	or     eax,0xffffffe0
c0001fa6:	88 02                	mov    BYTE PTR [edx],al
c0001fa8:	89 d8                	mov    eax,ebx
c0001faa:	83 e3 3f             	and    ebx,0x3f
c0001fad:	c1 e8 06             	shr    eax,0x6
c0001fb0:	83 cb 80             	or     ebx,0xffffff80
c0001fb3:	83 e0 3f             	and    eax,0x3f
c0001fb6:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001fb9:	83 c8 80             	or     eax,0xffffff80
c0001fbc:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001fbf:	b0 03                	mov    al,0x3
c0001fc1:	eb 69                	jmp    c000202c <put_utf+0xf7>
c0001fc3:	83 f9 03             	cmp    ecx,0x3
c0001fc6:	76 64                	jbe    c000202c <put_utf+0xf7>
c0001fc8:	89 d9                	mov    ecx,ebx
c0001fca:	0f b7 c3             	movzx  eax,bx
c0001fcd:	66 31 c9             	xor    cx,cx
c0001fd0:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001fd6:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001fdc:	c1 e9 06             	shr    ecx,0x6
c0001fdf:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001fe5:	77 43                	ja     c000202a <put_utf+0xf5>
c0001fe7:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001fed:	77 3b                	ja     c000202a <put_utf+0xf5>
c0001fef:	09 cb                	or     ebx,ecx
c0001ff1:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ff7:	89 d8                	mov    eax,ebx
c0001ff9:	c1 e8 12             	shr    eax,0x12
c0001ffc:	83 c8 f0             	or     eax,0xfffffff0
c0001fff:	88 02                	mov    BYTE PTR [edx],al
c0002001:	89 d8                	mov    eax,ebx
c0002003:	c1 e8 0c             	shr    eax,0xc
c0002006:	83 e0 3f             	and    eax,0x3f
c0002009:	83 c8 80             	or     eax,0xffffff80
c000200c:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c000200f:	89 d8                	mov    eax,ebx
c0002011:	83 e3 3f             	and    ebx,0x3f
c0002014:	c1 e8 06             	shr    eax,0x6
c0002017:	83 cb 80             	or     ebx,0xffffff80
c000201a:	83 e0 3f             	and    eax,0x3f
c000201d:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0002020:	83 c8 80             	or     eax,0xffffff80
c0002023:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0002026:	b0 04                	mov    al,0x4
c0002028:	eb 02                	jmp    c000202c <put_utf+0xf7>
c000202a:	31 c0                	xor    eax,eax
c000202c:	5b                   	pop    ebx
c000202d:	c3                   	ret    

c000202e <clst2sect>:
c000202e:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002031:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0002034:	83 ea 02             	sub    edx,0x2
c0002037:	39 ca                	cmp    edx,ecx
c0002039:	76 0d                	jbe    c0002048 <clst2sect+0x1a>
c000203b:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c000203f:	0f af d1             	imul   edx,ecx
c0002042:	03 50 2c             	add    edx,DWORD PTR [eax+0x2c]
c0002045:	89 d0                	mov    eax,edx
c0002047:	c3                   	ret    
c0002048:	31 c0                	xor    eax,eax
c000204a:	c3                   	ret    

c000204b <pick_lfn>:
c000204b:	55                   	push   ebp
c000204c:	57                   	push   edi
c000204d:	89 c7                	mov    edi,eax
c000204f:	56                   	push   esi
c0002050:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002053:	53                   	push   ebx
c0002054:	89 d3                	mov    ebx,edx
c0002056:	e8 7c fd ff ff       	call   c0001dd7 <ld_word>
c000205b:	66 85 c0             	test   ax,ax
c000205e:	74 04                	je     c0002064 <pick_lfn+0x19>
c0002060:	31 c0                	xor    eax,eax
c0002062:	eb 62                	jmp    c00020c6 <pick_lfn+0x7b>
c0002064:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0002067:	bd 01 00 00 00       	mov    ebp,0x1
c000206c:	83 e1 bf             	and    ecx,0xffffffbf
c000206f:	31 f6                	xor    esi,esi
c0002071:	49                   	dec    ecx
c0002072:	6b c9 0d             	imul   ecx,ecx,0xd
c0002075:	0f b6 86 e0 00 02 c0 	movzx  eax,BYTE PTR [esi-0x3ffdff20]
c000207c:	01 d8                	add    eax,ebx
c000207e:	e8 54 fd ff ff       	call   c0001dd7 <ld_word>
c0002083:	66 85 ed             	test   bp,bp
c0002086:	74 11                	je     c0002099 <pick_lfn+0x4e>
c0002088:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c000208e:	77 d0                	ja     c0002060 <pick_lfn+0x15>
c0002090:	66 89 04 4f          	mov    WORD PTR [edi+ecx*2],ax
c0002094:	89 c5                	mov    ebp,eax
c0002096:	41                   	inc    ecx
c0002097:	eb 0a                	jmp    c00020a3 <pick_lfn+0x58>
c0002099:	0f b7 c0             	movzx  eax,ax
c000209c:	3d ff ff 00 00       	cmp    eax,0xffff
c00020a1:	75 bd                	jne    c0002060 <pick_lfn+0x15>
c00020a3:	46                   	inc    esi
c00020a4:	83 fe 0d             	cmp    esi,0xd
c00020a7:	75 cc                	jne    c0002075 <pick_lfn+0x2a>
c00020a9:	f6 03 40             	test   BYTE PTR [ebx],0x40
c00020ac:	74 13                	je     c00020c1 <pick_lfn+0x76>
c00020ae:	66 85 ed             	test   bp,bp
c00020b1:	74 0e                	je     c00020c1 <pick_lfn+0x76>
c00020b3:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c00020b9:	77 a5                	ja     c0002060 <pick_lfn+0x15>
c00020bb:	66 c7 04 4f 00 00    	mov    WORD PTR [edi+ecx*2],0x0
c00020c1:	b8 01 00 00 00       	mov    eax,0x1
c00020c6:	5b                   	pop    ebx
c00020c7:	5e                   	pop    esi
c00020c8:	5f                   	pop    edi
c00020c9:	5d                   	pop    ebp
c00020ca:	c3                   	ret    

c00020cb <put_lfn>:
c00020cb:	55                   	push   ebp
c00020cc:	57                   	push   edi
c00020cd:	89 d7                	mov    edi,edx
c00020cf:	56                   	push   esi
c00020d0:	31 f6                	xor    esi,esi
c00020d2:	53                   	push   ebx
c00020d3:	83 ec 0c             	sub    esp,0xc
c00020d6:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00020da:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00020de:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00020e2:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c00020e8:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c00020eb:	8d 42 1a             	lea    eax,[edx+0x1a]
c00020ee:	31 d2                	xor    edx,edx
c00020f0:	e8 07 fd ff ff       	call   c0001dfc <st_word>
c00020f5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00020fc:	0f b6 d9             	movzx  ebx,cl
c00020ff:	4b                   	dec    ebx
c0002100:	6b db 0d             	imul   ebx,ebx,0xd
c0002103:	0f b7 c6             	movzx  eax,si
c0002106:	3d ff ff 00 00       	cmp    eax,0xffff
c000210b:	74 09                	je     c0002116 <put_lfn+0x4b>
c000210d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002111:	0f b7 34 58          	movzx  esi,WORD PTR [eax+ebx*2]
c0002115:	43                   	inc    ebx
c0002116:	0f b7 ee             	movzx  ebp,si
c0002119:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000211c:	89 ea                	mov    edx,ebp
c000211e:	0f b6 80 e0 00 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdff20]
c0002125:	01 f8                	add    eax,edi
c0002127:	e8 d0 fc ff ff       	call   c0001dfc <st_word>
c000212c:	85 ed                	test   ebp,ebp
c000212e:	75 05                	jne    c0002135 <put_lfn+0x6a>
c0002130:	be ff ff 00 00       	mov    esi,0xffff
c0002135:	ff 04 24             	inc    DWORD PTR [esp]
c0002138:	83 3c 24 0d          	cmp    DWORD PTR [esp],0xd
c000213c:	75 c5                	jne    c0002103 <put_lfn+0x38>
c000213e:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0002144:	74 0b                	je     c0002151 <put_lfn+0x86>
c0002146:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000214a:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c000214f:	75 07                	jne    c0002158 <put_lfn+0x8d>
c0002151:	83 c9 40             	or     ecx,0x40
c0002154:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002158:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000215c:	88 07                	mov    BYTE PTR [edi],al
c000215e:	83 c4 0c             	add    esp,0xc
c0002161:	5b                   	pop    ebx
c0002162:	5e                   	pop    esi
c0002163:	5f                   	pop    edi
c0002164:	5d                   	pop    ebp
c0002165:	c3                   	ret    

c0002166 <gen_numname>:
c0002166:	57                   	push   edi
c0002167:	89 cf                	mov    edi,ecx
c0002169:	56                   	push   esi
c000216a:	b9 0b 00 00 00       	mov    ecx,0xb
c000216f:	53                   	push   ebx
c0002170:	89 c6                	mov    esi,eax
c0002172:	83 ec 10             	sub    esp,0x10
c0002175:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002179:	e8 85 fc ff ff       	call   c0001e03 <mem_cpy>
c000217e:	83 fb 05             	cmp    ebx,0x5
c0002181:	76 30                	jbe    c00021b3 <gen_numname+0x4d>
c0002183:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002186:	66 85 c0             	test   ax,ax
c0002189:	74 28                	je     c00021b3 <gen_numname+0x4d>
c000218b:	83 c7 02             	add    edi,0x2
c000218e:	ba 10 00 00 00       	mov    edx,0x10
c0002193:	01 db                	add    ebx,ebx
c0002195:	89 c1                	mov    ecx,eax
c0002197:	c1 e0 10             	shl    eax,0x10
c000219a:	83 e1 01             	and    ecx,0x1
c000219d:	c1 e8 11             	shr    eax,0x11
c00021a0:	01 cb                	add    ebx,ecx
c00021a2:	0f ba e3 10          	bt     ebx,0x10
c00021a6:	73 06                	jae    c00021ae <gen_numname+0x48>
c00021a8:	81 f3 21 10 01 00    	xor    ebx,0x11021
c00021ae:	4a                   	dec    edx
c00021af:	75 e2                	jne    c0002193 <gen_numname+0x2d>
c00021b1:	eb d0                	jmp    c0002183 <gen_numname+0x1d>
c00021b3:	b8 07 00 00 00       	mov    eax,0x7
c00021b8:	89 d9                	mov    ecx,ebx
c00021ba:	83 e1 0f             	and    ecx,0xf
c00021bd:	8d 79 30             	lea    edi,[ecx+0x30]
c00021c0:	89 fa                	mov    edx,edi
c00021c2:	83 ff 39             	cmp    edi,0x39
c00021c5:	76 03                	jbe    c00021ca <gen_numname+0x64>
c00021c7:	8d 51 37             	lea    edx,[ecx+0x37]
c00021ca:	8d 48 ff             	lea    ecx,[eax-0x1]
c00021cd:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00021d1:	89 da                	mov    edx,ebx
c00021d3:	c1 ea 04             	shr    edx,0x4
c00021d6:	83 fb 0f             	cmp    ebx,0xf
c00021d9:	76 06                	jbe    c00021e1 <gen_numname+0x7b>
c00021db:	89 c8                	mov    eax,ecx
c00021dd:	89 d3                	mov    ebx,edx
c00021df:	eb d7                	jmp    c00021b8 <gen_numname+0x52>
c00021e1:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00021e6:	31 d2                	xor    edx,edx
c00021e8:	8d 58 fe             	lea    ebx,[eax-0x2]
c00021eb:	8d 04 16             	lea    eax,[esi+edx*1]
c00021ee:	39 ca                	cmp    edx,ecx
c00021f0:	73 19                	jae    c000220b <gen_numname+0xa5>
c00021f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00021f5:	83 f8 20             	cmp    eax,0x20
c00021f8:	74 11                	je     c000220b <gen_numname+0xa5>
c00021fa:	e8 58 fc ff ff       	call   c0001e57 <dbc_1st>
c00021ff:	85 c0                	test   eax,eax
c0002201:	74 05                	je     c0002208 <gen_numname+0xa2>
c0002203:	39 d3                	cmp    ebx,edx
c0002205:	74 04                	je     c000220b <gen_numname+0xa5>
c0002207:	42                   	inc    edx
c0002208:	42                   	inc    edx
c0002209:	eb e0                	jmp    c00021eb <gen_numname+0x85>
c000220b:	b0 20                	mov    al,0x20
c000220d:	83 f9 07             	cmp    ecx,0x7
c0002210:	77 05                	ja     c0002217 <gen_numname+0xb1>
c0002212:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c0002216:	41                   	inc    ecx
c0002217:	42                   	inc    edx
c0002218:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c000221c:	83 fa 07             	cmp    edx,0x7
c000221f:	76 ea                	jbe    c000220b <gen_numname+0xa5>
c0002221:	83 c4 10             	add    esp,0x10
c0002224:	5b                   	pop    ebx
c0002225:	5e                   	pop    esi
c0002226:	5f                   	pop    edi
c0002227:	c3                   	ret    

c0002228 <sum_sfn>:
c0002228:	53                   	push   ebx
c0002229:	31 c9                	xor    ecx,ecx
c000222b:	31 db                	xor    ebx,ebx
c000222d:	0f b6 d1             	movzx  edx,cl
c0002230:	c1 e1 07             	shl    ecx,0x7
c0002233:	d1 ea                	shr    edx,1
c0002235:	09 ca                	or     edx,ecx
c0002237:	8a 0c 18             	mov    cl,BYTE PTR [eax+ebx*1]
c000223a:	43                   	inc    ebx
c000223b:	01 ca                	add    edx,ecx
c000223d:	83 fb 0b             	cmp    ebx,0xb
c0002240:	88 d1                	mov    cl,dl
c0002242:	75 e9                	jne    c000222d <sum_sfn+0x5>
c0002244:	88 d0                	mov    al,dl
c0002246:	5b                   	pop    ebx
c0002247:	c3                   	ret    

c0002248 <get_ldnumber>:
c0002248:	8b 10                	mov    edx,DWORD PTR [eax]
c000224a:	85 d2                	test   edx,edx
c000224c:	74 14                	je     c0002262 <get_ldnumber+0x1a>
c000224e:	56                   	push   esi
c000224f:	53                   	push   ebx
c0002250:	89 d3                	mov    ebx,edx
c0002252:	43                   	inc    ebx
c0002253:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002256:	80 f9 1f             	cmp    cl,0x1f
c0002259:	76 0d                	jbe    c0002268 <get_ldnumber+0x20>
c000225b:	80 f9 3a             	cmp    cl,0x3a
c000225e:	75 f2                	jne    c0002252 <get_ldnumber+0xa>
c0002260:	eb 0a                	jmp    c000226c <get_ldnumber+0x24>
c0002262:	83 c9 ff             	or     ecx,0xffffffff
c0002265:	89 c8                	mov    eax,ecx
c0002267:	c3                   	ret    
c0002268:	31 c9                	xor    ecx,ecx
c000226a:	eb 24                	jmp    c0002290 <get_ldnumber+0x48>
c000226c:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000226f:	8d 4e d0             	lea    ecx,[esi-0x30]
c0002272:	80 f9 09             	cmp    cl,0x9
c0002275:	77 16                	ja     c000228d <get_ldnumber+0x45>
c0002277:	83 c2 02             	add    edx,0x2
c000227a:	83 c9 ff             	or     ecx,0xffffffff
c000227d:	39 d3                	cmp    ebx,edx
c000227f:	75 0f                	jne    c0002290 <get_ldnumber+0x48>
c0002281:	89 f2                	mov    edx,esi
c0002283:	89 18                	mov    DWORD PTR [eax],ebx
c0002285:	0f be ca             	movsx  ecx,dl
c0002288:	83 e9 30             	sub    ecx,0x30
c000228b:	eb 03                	jmp    c0002290 <get_ldnumber+0x48>
c000228d:	83 c9 ff             	or     ecx,0xffffffff
c0002290:	89 c8                	mov    eax,ecx
c0002292:	5b                   	pop    ebx
c0002293:	5e                   	pop    esi
c0002294:	c3                   	ret    

c0002295 <validate>:
c0002295:	56                   	push   esi
c0002296:	53                   	push   ebx
c0002297:	89 d6                	mov    esi,edx
c0002299:	51                   	push   ecx
c000229a:	85 c0                	test   eax,eax
c000229c:	75 09                	jne    c00022a7 <validate+0x12>
c000229e:	b8 09 00 00 00       	mov    eax,0x9
c00022a3:	31 c9                	xor    ecx,ecx
c00022a5:	eb 2e                	jmp    c00022d5 <validate+0x40>
c00022a7:	89 c3                	mov    ebx,eax
c00022a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00022ab:	85 c0                	test   eax,eax
c00022ad:	74 ef                	je     c000229e <validate+0x9>
c00022af:	80 38 00             	cmp    BYTE PTR [eax],0x0
c00022b2:	74 ea                	je     c000229e <validate+0x9>
c00022b4:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c00022b7:	66 39 50 06          	cmp    WORD PTR [eax+0x6],dx
c00022bb:	75 e1                	jne    c000229e <validate+0x9>
c00022bd:	83 ec 0c             	sub    esp,0xc
c00022c0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022c4:	50                   	push   eax
c00022c5:	e8 bc fa ff ff       	call   c0001d86 <disk_status>
c00022ca:	83 c4 10             	add    esp,0x10
c00022cd:	a8 01                	test   al,0x1
c00022cf:	75 cd                	jne    c000229e <validate+0x9>
c00022d1:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00022d3:	31 c0                	xor    eax,eax
c00022d5:	89 0e                	mov    DWORD PTR [esi],ecx
c00022d7:	5a                   	pop    edx
c00022d8:	5b                   	pop    ebx
c00022d9:	5e                   	pop    esi
c00022da:	c3                   	ret    

c00022db <sync_window>:
c00022db:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c00022df:	74 58                	je     c0002339 <sync_window+0x5e>
c00022e1:	56                   	push   esi
c00022e2:	53                   	push   ebx
c00022e3:	8d 70 34             	lea    esi,[eax+0x34]
c00022e6:	51                   	push   ecx
c00022e7:	89 c3                	mov    ebx,eax
c00022e9:	6a 01                	push   0x1
c00022eb:	ff 70 30             	push   DWORD PTR [eax+0x30]
c00022ee:	56                   	push   esi
c00022ef:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00022f3:	50                   	push   eax
c00022f4:	e8 a9 fa ff ff       	call   c0001da2 <disk_write>
c00022f9:	83 c4 10             	add    esp,0x10
c00022fc:	ba 01 00 00 00       	mov    edx,0x1
c0002301:	85 c0                	test   eax,eax
c0002303:	75 2e                	jne    c0002333 <sync_window+0x58>
c0002305:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0002308:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000230b:	89 c1                	mov    ecx,eax
c000230d:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c0002311:	2b 4b 24             	sub    ecx,DWORD PTR [ebx+0x24]
c0002314:	39 d1                	cmp    ecx,edx
c0002316:	73 19                	jae    c0002331 <sync_window+0x56>
c0002318:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c000231c:	75 13                	jne    c0002331 <sync_window+0x56>
c000231e:	6a 01                	push   0x1
c0002320:	01 d0                	add    eax,edx
c0002322:	50                   	push   eax
c0002323:	56                   	push   esi
c0002324:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002328:	50                   	push   eax
c0002329:	e8 74 fa ff ff       	call   c0001da2 <disk_write>
c000232e:	83 c4 10             	add    esp,0x10
c0002331:	31 d2                	xor    edx,edx
c0002333:	89 d0                	mov    eax,edx
c0002335:	5a                   	pop    edx
c0002336:	5b                   	pop    ebx
c0002337:	5e                   	pop    esi
c0002338:	c3                   	ret    
c0002339:	31 d2                	xor    edx,edx
c000233b:	89 d0                	mov    eax,edx
c000233d:	c3                   	ret    

c000233e <move_window>:
c000233e:	57                   	push   edi
c000233f:	56                   	push   esi
c0002340:	31 f6                	xor    esi,esi
c0002342:	53                   	push   ebx
c0002343:	39 50 30             	cmp    DWORD PTR [eax+0x30],edx
c0002346:	74 32                	je     c000237a <move_window+0x3c>
c0002348:	89 c3                	mov    ebx,eax
c000234a:	89 d7                	mov    edi,edx
c000234c:	e8 8a ff ff ff       	call   c00022db <sync_window>
c0002351:	89 c6                	mov    esi,eax
c0002353:	85 c0                	test   eax,eax
c0002355:	75 23                	jne    c000237a <move_window+0x3c>
c0002357:	6a 01                	push   0x1
c0002359:	8d 43 34             	lea    eax,[ebx+0x34]
c000235c:	57                   	push   edi
c000235d:	50                   	push   eax
c000235e:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002362:	50                   	push   eax
c0002363:	e8 24 fa ff ff       	call   c0001d8c <disk_read>
c0002368:	83 c4 10             	add    esp,0x10
c000236b:	85 c0                	test   eax,eax
c000236d:	74 08                	je     c0002377 <move_window+0x39>
c000236f:	be 01 00 00 00       	mov    esi,0x1
c0002374:	83 cf ff             	or     edi,0xffffffff
c0002377:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c000237a:	89 f0                	mov    eax,esi
c000237c:	5b                   	pop    ebx
c000237d:	5e                   	pop    esi
c000237e:	5f                   	pop    edi
c000237f:	c3                   	ret    

c0002380 <check_fs>:
c0002380:	53                   	push   ebx
c0002381:	89 c3                	mov    ebx,eax
c0002383:	83 ec 08             	sub    esp,0x8
c0002386:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000238a:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
c0002391:	e8 a8 ff ff ff       	call   c000233e <move_window>
c0002396:	ba 04 00 00 00       	mov    edx,0x4
c000239b:	85 c0                	test   eax,eax
c000239d:	75 68                	jne    c0002407 <check_fs+0x87>
c000239f:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c00023a5:	e8 2d fa ff ff       	call   c0001dd7 <ld_word>
c00023aa:	ba 03 00 00 00       	mov    edx,0x3
c00023af:	66 3d 55 aa          	cmp    ax,0xaa55
c00023b3:	75 52                	jne    c0002407 <check_fs+0x87>
c00023b5:	8a 43 34             	mov    al,BYTE PTR [ebx+0x34]
c00023b8:	8d 50 18             	lea    edx,[eax+0x18]
c00023bb:	80 fa 01             	cmp    dl,0x1
c00023be:	76 09                	jbe    c00023c9 <check_fs+0x49>
c00023c0:	ba 02 00 00 00       	mov    edx,0x2
c00023c5:	3c eb                	cmp    al,0xeb
c00023c7:	75 3e                	jne    c0002407 <check_fs+0x87>
c00023c9:	ba 64 27 02 c0       	mov    edx,0xc0022764
c00023ce:	8d 43 6a             	lea    eax,[ebx+0x6a]
c00023d1:	b9 03 00 00 00       	mov    ecx,0x3
c00023d6:	e8 48 fa ff ff       	call   c0001e23 <mem_cmp>
c00023db:	31 d2                	xor    edx,edx
c00023dd:	85 c0                	test   eax,eax
c00023df:	74 26                	je     c0002407 <check_fs+0x87>
c00023e1:	ba 9c ff 01 c0       	mov    edx,0xc001ff9c
c00023e6:	8d 83 86 00 00 00    	lea    eax,[ebx+0x86]
c00023ec:	b9 05 00 00 00       	mov    ecx,0x5
c00023f1:	e8 2d fa ff ff       	call   c0001e23 <mem_cmp>
c00023f6:	31 d2                	xor    edx,edx
c00023f8:	85 c0                	test   eax,eax
c00023fa:	74 0b                	je     c0002407 <check_fs+0x87>
c00023fc:	31 d2                	xor    edx,edx
c00023fe:	80 7b 76 28          	cmp    BYTE PTR [ebx+0x76],0x28
c0002402:	0f 95 c2             	setne  dl
c0002405:	01 d2                	add    edx,edx
c0002407:	89 d0                	mov    eax,edx
c0002409:	83 c4 08             	add    esp,0x8
c000240c:	5b                   	pop    ebx
c000240d:	c3                   	ret    

c000240e <find_volume>:
c000240e:	55                   	push   ebp
c000240f:	57                   	push   edi
c0002410:	56                   	push   esi
c0002411:	89 c6                	mov    esi,eax
c0002413:	53                   	push   ebx
c0002414:	89 d3                	mov    ebx,edx
c0002416:	83 ec 2c             	sub    esp,0x2c
c0002419:	31 d2                	xor    edx,edx
c000241b:	e8 60 ff ff ff       	call   c0002380 <check_fs>
c0002420:	83 f8 02             	cmp    eax,0x2
c0002423:	74 06                	je     c000242b <find_volume+0x1d>
c0002425:	77 62                	ja     c0002489 <find_volume+0x7b>
c0002427:	85 db                	test   ebx,ebx
c0002429:	74 5e                	je     c0002489 <find_volume+0x7b>
c000242b:	8d 4c 24 10          	lea    ecx,[esp+0x10]
c000242f:	8d 86 3a 02 00 00    	lea    eax,[esi+0x23a]
c0002435:	8d ae fa 01 00 00    	lea    ebp,[esi+0x1fa]
c000243b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000243f:	89 cf                	mov    edi,ecx
c0002441:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002445:	89 e8                	mov    eax,ebp
c0002447:	83 c5 10             	add    ebp,0x10
c000244a:	e8 95 f9 ff ff       	call   c0001de4 <ld_dword>
c000244f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0002453:	89 01                	mov    DWORD PTR [ecx],eax
c0002455:	83 c1 04             	add    ecx,0x4
c0002458:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c000245c:	75 e3                	jne    c0002441 <find_volume+0x33>
c000245e:	31 ed                	xor    ebp,ebp
c0002460:	85 db                	test   ebx,ebx
c0002462:	74 03                	je     c0002467 <find_volume+0x59>
c0002464:	8d 6b ff             	lea    ebp,[ebx-0x1]
c0002467:	8b 14 af             	mov    edx,DWORD PTR [edi+ebp*4]
c000246a:	b8 03 00 00 00       	mov    eax,0x3
c000246f:	85 d2                	test   edx,edx
c0002471:	74 0c                	je     c000247f <find_volume+0x71>
c0002473:	89 f0                	mov    eax,esi
c0002475:	e8 06 ff ff ff       	call   c0002380 <check_fs>
c000247a:	83 f8 01             	cmp    eax,0x1
c000247d:	76 0a                	jbe    c0002489 <find_volume+0x7b>
c000247f:	85 db                	test   ebx,ebx
c0002481:	75 06                	jne    c0002489 <find_volume+0x7b>
c0002483:	45                   	inc    ebp
c0002484:	83 fd 03             	cmp    ebp,0x3
c0002487:	76 de                	jbe    c0002467 <find_volume+0x59>
c0002489:	83 c4 2c             	add    esp,0x2c
c000248c:	5b                   	pop    ebx
c000248d:	5e                   	pop    esi
c000248e:	5f                   	pop    edi
c000248f:	5d                   	pop    ebp
c0002490:	c3                   	ret    

c0002491 <mount_volume>:
c0002491:	55                   	push   ebp
c0002492:	89 d5                	mov    ebp,edx
c0002494:	57                   	push   edi
c0002495:	89 cf                	mov    edi,ecx
c0002497:	56                   	push   esi
c0002498:	53                   	push   ebx
c0002499:	bb 0b 00 00 00       	mov    ebx,0xb
c000249e:	83 ec 1c             	sub    esp,0x1c
c00024a1:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00024a7:	e8 9c fd ff ff       	call   c0002248 <get_ldnumber>
c00024ac:	85 c0                	test   eax,eax
c00024ae:	0f 88 c4 02 00 00    	js     c0002778 <mount_volume+0x2e7>
c00024b4:	8b 34 85 a0 54 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdab60]
c00024bb:	89 c2                	mov    edx,eax
c00024bd:	bb 0c 00 00 00       	mov    ebx,0xc
c00024c2:	85 f6                	test   esi,esi
c00024c4:	0f 84 ae 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024ca:	89 75 00             	mov    DWORD PTR [ebp+0x0],esi
c00024cd:	83 e7 fe             	and    edi,0xfffffffe
c00024d0:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c00024d3:	74 3a                	je     c000250f <mount_volume+0x7e>
c00024d5:	89 04 24             	mov    DWORD PTR [esp],eax
c00024d8:	83 ec 0c             	sub    esp,0xc
c00024db:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00024df:	50                   	push   eax
c00024e0:	e8 a1 f8 ff ff       	call   c0001d86 <disk_status>
c00024e5:	83 c4 10             	add    esp,0x10
c00024e8:	a8 01                	test   al,0x1
c00024ea:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00024ed:	75 20                	jne    c000250f <mount_volume+0x7e>
c00024ef:	31 db                	xor    ebx,ebx
c00024f1:	81 e7 fe 00 00 00    	and    edi,0xfe
c00024f7:	0f 84 7b 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c00024fd:	a8 04                	test   al,0x4
c00024ff:	0f 84 73 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002505:	bb 0a 00 00 00       	mov    ebx,0xa
c000250a:	e9 69 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c000250f:	83 ec 0c             	sub    esp,0xc
c0002512:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0002515:	88 56 01             	mov    BYTE PTR [esi+0x1],dl
c0002518:	0f b6 c2             	movzx  eax,dl
c000251b:	bb 03 00 00 00       	mov    ebx,0x3
c0002520:	50                   	push   eax
c0002521:	e8 63 f8 ff ff       	call   c0001d89 <disk_initialize>
c0002526:	83 c4 10             	add    esp,0x10
c0002529:	a8 01                	test   al,0x1
c000252b:	0f 85 47 02 00 00    	jne    c0002778 <mount_volume+0x2e7>
c0002531:	81 e7 fe 00 00 00    	and    edi,0xfe
c0002537:	74 04                	je     c000253d <mount_volume+0xac>
c0002539:	a8 04                	test   al,0x4
c000253b:	75 c8                	jne    c0002505 <mount_volume+0x74>
c000253d:	31 d2                	xor    edx,edx
c000253f:	89 f0                	mov    eax,esi
c0002541:	bb 01 00 00 00       	mov    ebx,0x1
c0002546:	e8 c3 fe ff ff       	call   c000240e <find_volume>
c000254b:	83 f8 04             	cmp    eax,0x4
c000254e:	0f 84 24 02 00 00    	je     c0002778 <mount_volume+0x2e7>
c0002554:	83 f8 01             	cmp    eax,0x1
c0002557:	76 0a                	jbe    c0002563 <mount_volume+0xd2>
c0002559:	bb 0d 00 00 00       	mov    ebx,0xd
c000255e:	e9 15 02 00 00       	jmp    c0002778 <mount_volume+0x2e7>
c0002563:	8d 46 3f             	lea    eax,[esi+0x3f]
c0002566:	e8 6c f8 ff ff       	call   c0001dd7 <ld_word>
c000256b:	66 3d 00 02          	cmp    ax,0x200
c000256f:	75 e8                	jne    c0002559 <mount_volume+0xc8>
c0002571:	8d 46 4a             	lea    eax,[esi+0x4a]
c0002574:	e8 5e f8 ff ff       	call   c0001dd7 <ld_word>
c0002579:	0f b7 c0             	movzx  eax,ax
c000257c:	89 04 24             	mov    DWORD PTR [esp],eax
c000257f:	85 c0                	test   eax,eax
c0002581:	75 0b                	jne    c000258e <mount_volume+0xfd>
c0002583:	8d 46 58             	lea    eax,[esi+0x58]
c0002586:	e8 59 f8 ff ff       	call   c0001de4 <ld_dword>
c000258b:	89 04 24             	mov    DWORD PTR [esp],eax
c000258e:	8b 46 30             	mov    eax,DWORD PTR [esi+0x30]
c0002591:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002595:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002598:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c000259b:	8a 46 44             	mov    al,BYTE PTR [esi+0x44]
c000259e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00025a2:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c00025a5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00025a9:	48                   	dec    eax
c00025aa:	3c 01                	cmp    al,0x1
c00025ac:	77 ab                	ja     c0002559 <mount_volume+0xc8>
c00025ae:	0f b6 46 41          	movzx  eax,BYTE PTR [esi+0x41]
c00025b2:	89 c3                	mov    ebx,eax
c00025b4:	66 89 46 0a          	mov    WORD PTR [esi+0xa],ax
c00025b8:	66 85 c0             	test   ax,ax
c00025bb:	74 9c                	je     c0002559 <mount_volume+0xc8>
c00025bd:	8d 40 ff             	lea    eax,[eax-0x1]
c00025c0:	85 d8                	test   eax,ebx
c00025c2:	75 95                	jne    c0002559 <mount_volume+0xc8>
c00025c4:	8d 46 45             	lea    eax,[esi+0x45]
c00025c7:	e8 0b f8 ff ff       	call   c0001dd7 <ld_word>
c00025cc:	89 c7                	mov    edi,eax
c00025ce:	66 89 46 08          	mov    WORD PTR [esi+0x8],ax
c00025d2:	a8 0f                	test   al,0xf
c00025d4:	75 83                	jne    c0002559 <mount_volume+0xc8>
c00025d6:	8d 46 47             	lea    eax,[esi+0x47]
c00025d9:	e8 f9 f7 ff ff       	call   c0001dd7 <ld_word>
c00025de:	0f b7 e8             	movzx  ebp,ax
c00025e1:	85 ed                	test   ebp,ebp
c00025e3:	75 0a                	jne    c00025ef <mount_volume+0x15e>
c00025e5:	8d 46 54             	lea    eax,[esi+0x54]
c00025e8:	e8 f7 f7 ff ff       	call   c0001de4 <ld_dword>
c00025ed:	89 c5                	mov    ebp,eax
c00025ef:	8d 46 42             	lea    eax,[esi+0x42]
c00025f2:	e8 e0 f7 ff ff       	call   c0001dd7 <ld_word>
c00025f7:	0f b7 c8             	movzx  ecx,ax
c00025fa:	85 c9                	test   ecx,ecx
c00025fc:	0f 84 57 ff ff ff    	je     c0002559 <mount_volume+0xc8>
c0002602:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0002607:	0f af 04 24          	imul   eax,DWORD PTR [esp]
c000260b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000260f:	0f b7 c7             	movzx  eax,di
c0002612:	c1 e8 04             	shr    eax,0x4
c0002615:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0002619:	01 c8                	add    eax,ecx
c000261b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000261f:	39 c5                	cmp    ebp,eax
c0002621:	0f 82 32 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002627:	29 c5                	sub    ebp,eax
c0002629:	31 d2                	xor    edx,edx
c000262b:	89 e8                	mov    eax,ebp
c000262d:	f7 f3                	div    ebx
c000262f:	39 dd                	cmp    ebp,ebx
c0002631:	0f 82 22 ff ff ff    	jb     c0002559 <mount_volume+0xc8>
c0002637:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c000263c:	0f 87 17 ff ff ff    	ja     c0002559 <mount_volume+0xc8>
c0002642:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0002647:	0f 86 1c 01 00 00    	jbe    c0002769 <mount_volume+0x2d8>
c000264d:	bb 03 00 00 00       	mov    ebx,0x3
c0002652:	8d 68 02             	lea    ebp,[eax+0x2]
c0002655:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002659:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000265d:	03 54 24 04          	add    edx,DWORD PTR [esp+0x4]
c0002661:	89 46 20             	mov    DWORD PTR [esi+0x20],eax
c0002664:	89 6e 18             	mov    DWORD PTR [esi+0x18],ebp
c0002667:	01 c8                	add    eax,ecx
c0002669:	89 56 2c             	mov    DWORD PTR [esi+0x2c],edx
c000266c:	89 46 24             	mov    DWORD PTR [esi+0x24],eax
c000266f:	83 fb 03             	cmp    ebx,0x3
c0002672:	75 23                	jne    c0002697 <mount_volume+0x206>
c0002674:	8d 46 5e             	lea    eax,[esi+0x5e]
c0002677:	e8 5b f7 ff ff       	call   c0001dd7 <ld_word>
c000267c:	09 c7                	or     edi,eax
c000267e:	66 85 ff             	test   di,di
c0002681:	0f 85 d2 fe ff ff    	jne    c0002559 <mount_volume+0xc8>
c0002687:	8d 46 60             	lea    eax,[esi+0x60]
c000268a:	c1 e5 02             	shl    ebp,0x2
c000268d:	e8 52 f7 ff ff       	call   c0001de4 <ld_dword>
c0002692:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c0002695:	eb 24                	jmp    c00026bb <mount_volume+0x22a>
c0002697:	66 85 ff             	test   di,di
c000269a:	0f 84 b9 fe ff ff    	je     c0002559 <mount_volume+0xc8>
c00026a0:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00026a4:	83 fb 02             	cmp    ebx,0x2
c00026a7:	89 46 28             	mov    DWORD PTR [esi+0x28],eax
c00026aa:	75 04                	jne    c00026b0 <mount_volume+0x21f>
c00026ac:	01 ed                	add    ebp,ebp
c00026ae:	eb 0b                	jmp    c00026bb <mount_volume+0x22a>
c00026b0:	8d 44 6d 00          	lea    eax,[ebp+ebp*2+0x0]
c00026b4:	83 e5 01             	and    ebp,0x1
c00026b7:	d1 e8                	shr    eax,1
c00026b9:	01 c5                	add    ebp,eax
c00026bb:	81 c5 ff 01 00 00    	add    ebp,0x1ff
c00026c1:	c1 ed 09             	shr    ebp,0x9
c00026c4:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c00026c7:	0f 87 8c fe ff ff    	ja     c0002559 <mount_volume+0xc8>
c00026cd:	c7 46 14 ff ff ff ff 	mov    DWORD PTR [esi+0x14],0xffffffff
c00026d4:	c7 46 10 ff ff ff ff 	mov    DWORD PTR [esi+0x10],0xffffffff
c00026db:	c6 46 04 80          	mov    BYTE PTR [esi+0x4],0x80
c00026df:	83 fb 03             	cmp    ebx,0x3
c00026e2:	75 6e                	jne    c0002752 <mount_volume+0x2c1>
c00026e4:	8d 46 64             	lea    eax,[esi+0x64]
c00026e7:	e8 eb f6 ff ff       	call   c0001dd7 <ld_word>
c00026ec:	66 48                	dec    ax
c00026ee:	75 62                	jne    c0002752 <mount_volume+0x2c1>
c00026f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00026f4:	89 f0                	mov    eax,esi
c00026f6:	42                   	inc    edx
c00026f7:	e8 42 fc ff ff       	call   c000233e <move_window>
c00026fc:	85 c0                	test   eax,eax
c00026fe:	75 52                	jne    c0002752 <mount_volume+0x2c1>
c0002700:	c6 46 04 00          	mov    BYTE PTR [esi+0x4],0x0
c0002704:	8d 86 32 02 00 00    	lea    eax,[esi+0x232]
c000270a:	e8 c8 f6 ff ff       	call   c0001dd7 <ld_word>
c000270f:	66 3d 55 aa          	cmp    ax,0xaa55
c0002713:	75 3d                	jne    c0002752 <mount_volume+0x2c1>
c0002715:	8d 46 34             	lea    eax,[esi+0x34]
c0002718:	e8 c7 f6 ff ff       	call   c0001de4 <ld_dword>
c000271d:	3d 52 52 61 41       	cmp    eax,0x41615252
c0002722:	75 2e                	jne    c0002752 <mount_volume+0x2c1>
c0002724:	8d 86 18 02 00 00    	lea    eax,[esi+0x218]
c000272a:	e8 b5 f6 ff ff       	call   c0001de4 <ld_dword>
c000272f:	3d 72 72 41 61       	cmp    eax,0x61417272
c0002734:	75 1c                	jne    c0002752 <mount_volume+0x2c1>
c0002736:	8d 86 1c 02 00 00    	lea    eax,[esi+0x21c]
c000273c:	e8 a3 f6 ff ff       	call   c0001de4 <ld_dword>
c0002741:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c0002744:	8d 86 20 02 00 00    	lea    eax,[esi+0x220]
c000274a:	e8 95 f6 ff ff       	call   c0001de4 <ld_dword>
c000274f:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c0002752:	66 a1 80 54 02 c0    	mov    ax,ds:0xc0025480
c0002758:	88 1e                	mov    BYTE PTR [esi],bl
c000275a:	40                   	inc    eax
c000275b:	31 db                	xor    ebx,ebx
c000275d:	66 a3 80 54 02 c0    	mov    ds:0xc0025480,ax
c0002763:	66 89 46 06          	mov    WORD PTR [esi+0x6],ax
c0002767:	eb 0f                	jmp    c0002778 <mount_volume+0x2e7>
c0002769:	3d f6 0f 00 00       	cmp    eax,0xff6
c000276e:	19 db                	sbb    ebx,ebx
c0002770:	83 c3 02             	add    ebx,0x2
c0002773:	e9 da fe ff ff       	jmp    c0002652 <mount_volume+0x1c1>
c0002778:	83 c4 1c             	add    esp,0x1c
c000277b:	89 d8                	mov    eax,ebx
c000277d:	5b                   	pop    ebx
c000277e:	5e                   	pop    esi
c000277f:	5f                   	pop    edi
c0002780:	5d                   	pop    ebp
c0002781:	c3                   	ret    

c0002782 <put_fat>:
c0002782:	55                   	push   ebp
c0002783:	bd 02 00 00 00       	mov    ebp,0x2
c0002788:	57                   	push   edi
c0002789:	56                   	push   esi
c000278a:	53                   	push   ebx
c000278b:	83 ec 1c             	sub    esp,0x1c
c000278e:	83 fa 01             	cmp    edx,0x1
c0002791:	0f 86 38 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c0002797:	39 50 18             	cmp    DWORD PTR [eax+0x18],edx
c000279a:	0f 86 2f 01 00 00    	jbe    c00028cf <put_fat+0x14d>
c00027a0:	89 c6                	mov    esi,eax
c00027a2:	89 cf                	mov    edi,ecx
c00027a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00027a7:	89 d3                	mov    ebx,edx
c00027a9:	83 f8 02             	cmp    eax,0x2
c00027ac:	0f 84 b1 00 00 00    	je     c0002863 <put_fat+0xe1>
c00027b2:	83 f8 03             	cmp    eax,0x3
c00027b5:	0f 84 d5 00 00 00    	je     c0002890 <put_fat+0x10e>
c00027bb:	48                   	dec    eax
c00027bc:	0f 85 0d 01 00 00    	jne    c00028cf <put_fat+0x14d>
c00027c2:	89 d1                	mov    ecx,edx
c00027c4:	89 f0                	mov    eax,esi
c00027c6:	d1 e9                	shr    ecx,1
c00027c8:	01 d1                	add    ecx,edx
c00027ca:	89 ca                	mov    edx,ecx
c00027cc:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00027d0:	c1 ea 09             	shr    edx,0x9
c00027d3:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c00027d6:	e8 63 fb ff ff       	call   c000233e <move_window>
c00027db:	89 c5                	mov    ebp,eax
c00027dd:	85 c0                	test   eax,eax
c00027df:	0f 85 ea 00 00 00    	jne    c00028cf <put_fat+0x14d>
c00027e5:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00027e9:	8d 46 34             	lea    eax,[esi+0x34]
c00027ec:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027f0:	8d 41 01             	lea    eax,[ecx+0x1]
c00027f3:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c00027f9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00027fd:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002801:	89 f8                	mov    eax,edi
c0002803:	83 e3 01             	and    ebx,0x1
c0002806:	74 11                	je     c0002819 <put_fat+0x97>
c0002808:	8a 11                	mov    dl,BYTE PTR [ecx]
c000280a:	89 f8                	mov    eax,edi
c000280c:	83 e2 0f             	and    edx,0xf
c000280f:	c1 e0 04             	shl    eax,0x4
c0002812:	25 f0 0f 00 00       	and    eax,0xff0
c0002817:	09 d0                	or     eax,edx
c0002819:	88 01                	mov    BYTE PTR [ecx],al
c000281b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000281f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002823:	c1 ea 09             	shr    edx,0x9
c0002826:	89 f0                	mov    eax,esi
c0002828:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000282b:	e8 0e fb ff ff       	call   c000233e <move_window>
c0002830:	89 c5                	mov    ebp,eax
c0002832:	85 c0                	test   eax,eax
c0002834:	0f 85 95 00 00 00    	jne    c00028cf <put_fat+0x14d>
c000283a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000283e:	25 ff 01 00 00       	and    eax,0x1ff
c0002843:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002847:	85 db                	test   ebx,ebx
c0002849:	74 07                	je     c0002852 <put_fat+0xd0>
c000284b:	c1 ef 04             	shr    edi,0x4
c000284e:	89 f9                	mov    ecx,edi
c0002850:	eb 0d                	jmp    c000285f <put_fat+0xdd>
c0002852:	8a 08                	mov    cl,BYTE PTR [eax]
c0002854:	c1 ef 08             	shr    edi,0x8
c0002857:	83 e1 f0             	and    ecx,0xfffffff0
c000285a:	83 e7 0f             	and    edi,0xf
c000285d:	09 f9                	or     ecx,edi
c000285f:	88 08                	mov    BYTE PTR [eax],cl
c0002861:	eb 27                	jmp    c000288a <put_fat+0x108>
c0002863:	c1 ea 08             	shr    edx,0x8
c0002866:	89 f0                	mov    eax,esi
c0002868:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c000286b:	e8 ce fa ff ff       	call   c000233e <move_window>
c0002870:	89 c5                	mov    ebp,eax
c0002872:	85 c0                	test   eax,eax
c0002874:	75 59                	jne    c00028cf <put_fat+0x14d>
c0002876:	01 db                	add    ebx,ebx
c0002878:	0f b7 d7             	movzx  edx,di
c000287b:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002881:	8d 44 1e 34          	lea    eax,[esi+ebx*1+0x34]
c0002885:	e8 72 f5 ff ff       	call   c0001dfc <st_word>
c000288a:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c000288e:	eb 3f                	jmp    c00028cf <put_fat+0x14d>
c0002890:	c1 ea 07             	shr    edx,0x7
c0002893:	89 f0                	mov    eax,esi
c0002895:	03 56 24             	add    edx,DWORD PTR [esi+0x24]
c0002898:	e8 a1 fa ff ff       	call   c000233e <move_window>
c000289d:	89 c5                	mov    ebp,eax
c000289f:	85 c0                	test   eax,eax
c00028a1:	75 2c                	jne    c00028cf <put_fat+0x14d>
c00028a3:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c00028a9:	c1 e3 02             	shl    ebx,0x2
c00028ac:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c00028b2:	8d 5c 1e 34          	lea    ebx,[esi+ebx*1+0x34]
c00028b6:	89 d8                	mov    eax,ebx
c00028b8:	e8 27 f5 ff ff       	call   c0001de4 <ld_dword>
c00028bd:	25 00 00 00 f0       	and    eax,0xf0000000
c00028c2:	09 f8                	or     eax,edi
c00028c4:	89 c2                	mov    edx,eax
c00028c6:	89 d8                	mov    eax,ebx
c00028c8:	e8 33 f5 ff ff       	call   c0001e00 <st_dword>
c00028cd:	eb bb                	jmp    c000288a <put_fat+0x108>
c00028cf:	83 c4 1c             	add    esp,0x1c
c00028d2:	89 e8                	mov    eax,ebp
c00028d4:	5b                   	pop    ebx
c00028d5:	5e                   	pop    esi
c00028d6:	5f                   	pop    edi
c00028d7:	5d                   	pop    ebp
c00028d8:	c3                   	ret    

c00028d9 <dir_clear>:
c00028d9:	55                   	push   ebp
c00028da:	57                   	push   edi
c00028db:	56                   	push   esi
c00028dc:	89 c6                	mov    esi,eax
c00028de:	53                   	push   ebx
c00028df:	83 ec 1c             	sub    esp,0x1c
c00028e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00028e6:	e8 f0 f9 ff ff       	call   c00022db <sync_window>
c00028eb:	85 c0                	test   eax,eax
c00028ed:	0f 85 c0 00 00 00    	jne    c00029b3 <dir_clear+0xda>
c00028f3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028f7:	89 f0                	mov    eax,esi
c00028f9:	e8 30 f7 ff ff       	call   c000202e <clst2sect>
c00028fe:	31 d2                	xor    edx,edx
c0002900:	89 46 30             	mov    DWORD PTR [esi+0x30],eax
c0002903:	89 c5                	mov    ebp,eax
c0002905:	b9 00 02 00 00       	mov    ecx,0x200
c000290a:	8d 46 34             	lea    eax,[esi+0x34]
c000290d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002911:	e8 02 f5 ff ff       	call   c0001e18 <mem_set>
c0002916:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c000291a:	c1 e3 09             	shl    ebx,0x9
c000291d:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c0002923:	76 1b                	jbe    c0002940 <dir_clear+0x67>
c0002925:	bb 00 80 00 00       	mov    ebx,0x8000
c000292a:	eb 14                	jmp    c0002940 <dir_clear+0x67>
c000292c:	83 ec 0c             	sub    esp,0xc
c000292f:	53                   	push   ebx
c0002930:	e8 eb 32 00 00       	call   c0005c20 <ff_memalloc>
c0002935:	83 c4 10             	add    esp,0x10
c0002938:	89 c7                	mov    edi,eax
c000293a:	85 c0                	test   eax,eax
c000293c:	75 7c                	jne    c00029ba <dir_clear+0xe1>
c000293e:	d1 eb                	shr    ebx,1
c0002940:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002946:	77 e4                	ja     c000292c <dir_clear+0x53>
c0002948:	31 db                	xor    ebx,ebx
c000294a:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000294e:	39 d8                	cmp    eax,ebx
c0002950:	76 53                	jbe    c00029a5 <dir_clear+0xcc>
c0002952:	6a 01                	push   0x1
c0002954:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002957:	50                   	push   eax
c0002958:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000295c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0002960:	50                   	push   eax
c0002961:	e8 3c f4 ff ff       	call   c0001da2 <disk_write>
c0002966:	83 c4 10             	add    esp,0x10
c0002969:	85 c0                	test   eax,eax
c000296b:	75 38                	jne    c00029a5 <dir_clear+0xcc>
c000296d:	43                   	inc    ebx
c000296e:	eb da                	jmp    c000294a <dir_clear+0x71>
c0002970:	52                   	push   edx
c0002971:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c0002974:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0002978:	50                   	push   eax
c0002979:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c000297d:	57                   	push   edi
c000297e:	50                   	push   eax
c000297f:	e8 1e f4 ff ff       	call   c0001da2 <disk_write>
c0002984:	83 c4 10             	add    esp,0x10
c0002987:	85 c0                	test   eax,eax
c0002989:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000298d:	75 0a                	jne    c0002999 <dir_clear+0xc0>
c000298f:	01 d3                	add    ebx,edx
c0002991:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c0002995:	39 d8                	cmp    eax,ebx
c0002997:	77 d7                	ja     c0002970 <dir_clear+0x97>
c0002999:	83 ec 0c             	sub    esp,0xc
c000299c:	57                   	push   edi
c000299d:	e8 96 32 00 00       	call   c0005c38 <ff_memfree>
c00029a2:	83 c4 10             	add    esp,0x10
c00029a5:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00029a9:	39 d8                	cmp    eax,ebx
c00029ab:	0f 95 c0             	setne  al
c00029ae:	0f b6 c0             	movzx  eax,al
c00029b1:	eb 19                	jmp    c00029cc <dir_clear+0xf3>
c00029b3:	b8 01 00 00 00       	mov    eax,0x1
c00029b8:	eb 12                	jmp    c00029cc <dir_clear+0xf3>
c00029ba:	89 d9                	mov    ecx,ebx
c00029bc:	31 d2                	xor    edx,edx
c00029be:	e8 55 f4 ff ff       	call   c0001e18 <mem_set>
c00029c3:	89 da                	mov    edx,ebx
c00029c5:	31 db                	xor    ebx,ebx
c00029c7:	c1 ea 09             	shr    edx,0x9
c00029ca:	eb c5                	jmp    c0002991 <dir_clear+0xb8>
c00029cc:	83 c4 1c             	add    esp,0x1c
c00029cf:	5b                   	pop    ebx
c00029d0:	5e                   	pop    esi
c00029d1:	5f                   	pop    edi
c00029d2:	5d                   	pop    ebp
c00029d3:	c3                   	ret    

c00029d4 <create_name>:
c00029d4:	55                   	push   ebp
c00029d5:	57                   	push   edi
c00029d6:	89 d7                	mov    edi,edx
c00029d8:	56                   	push   esi
c00029d9:	31 f6                	xor    esi,esi
c00029db:	53                   	push   ebx
c00029dc:	83 ec 3c             	sub    esp,0x3c
c00029df:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00029e3:	8b 02                	mov    eax,DWORD PTR [edx]
c00029e5:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00029e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00029ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00029ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00029f2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00029f6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00029fa:	e8 5e f4 ff ff       	call   c0001e5d <tchar2uni>
c00029ff:	89 c3                	mov    ebx,eax
c0002a01:	83 f8 ff             	cmp    eax,0xffffffff
c0002a04:	75 0a                	jne    c0002a10 <create_name+0x3c>
c0002a06:	b8 06 00 00 00       	mov    eax,0x6
c0002a0b:	e9 93 02 00 00       	jmp    c0002ca3 <create_name+0x2cf>
c0002a10:	3d ff ff 00 00       	cmp    eax,0xffff
c0002a15:	76 0c                	jbe    c0002a23 <create_name+0x4f>
c0002a17:	c1 e8 10             	shr    eax,0x10
c0002a1a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002a1e:	66 89 04 72          	mov    WORD PTR [edx+esi*2],ax
c0002a22:	46                   	inc    esi
c0002a23:	0f b7 d3             	movzx  edx,bx
c0002a26:	83 fa 1f             	cmp    edx,0x1f
c0002a29:	76 4a                	jbe    c0002a75 <create_name+0xa1>
c0002a2b:	83 fa 5c             	cmp    edx,0x5c
c0002a2e:	74 30                	je     c0002a60 <create_name+0x8c>
c0002a30:	83 fa 2f             	cmp    edx,0x2f
c0002a33:	74 2b                	je     c0002a60 <create_name+0x8c>
c0002a35:	83 fa 7f             	cmp    edx,0x7f
c0002a38:	77 0e                	ja     c0002a48 <create_name+0x74>
c0002a3a:	b8 a2 ff 01 c0       	mov    eax,0xc001ffa2
c0002a3f:	e8 02 f4 ff ff       	call   c0001e46 <chk_chr>
c0002a44:	85 c0                	test   eax,eax
c0002a46:	75 be                	jne    c0002a06 <create_name+0x32>
c0002a48:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0002a4e:	77 b6                	ja     c0002a06 <create_name+0x32>
c0002a50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a54:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0002a58:	46                   	inc    esi
c0002a59:	eb 9b                	jmp    c00029f6 <create_name+0x22>
c0002a5b:	40                   	inc    eax
c0002a5c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0002a60:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a64:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0002a67:	83 fa 2f             	cmp    edx,0x2f
c0002a6a:	74 ef                	je     c0002a5b <create_name+0x87>
c0002a6c:	83 fa 5c             	cmp    edx,0x5c
c0002a6f:	74 ea                	je     c0002a5b <create_name+0x87>
c0002a71:	31 db                	xor    ebx,ebx
c0002a73:	eb 02                	jmp    c0002a77 <create_name+0xa3>
c0002a75:	b3 04                	mov    bl,0x4
c0002a77:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002a7b:	89 07                	mov    DWORD PTR [edi],eax
c0002a7d:	85 f6                	test   esi,esi
c0002a7f:	74 16                	je     c0002a97 <create_name+0xc3>
c0002a81:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a85:	0f b7 44 70 fe       	movzx  eax,WORD PTR [eax+esi*2-0x2]
c0002a8a:	83 f8 20             	cmp    eax,0x20
c0002a8d:	74 05                	je     c0002a94 <create_name+0xc0>
c0002a8f:	83 f8 2e             	cmp    eax,0x2e
c0002a92:	75 03                	jne    c0002a97 <create_name+0xc3>
c0002a94:	4e                   	dec    esi
c0002a95:	eb e6                	jmp    c0002a7d <create_name+0xa9>
c0002a97:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002a9b:	31 ff                	xor    edi,edi
c0002a9d:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0002aa3:	85 f6                	test   esi,esi
c0002aa5:	0f 84 5b ff ff ff    	je     c0002a06 <create_name+0x32>
c0002aab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002aaf:	8d 57 01             	lea    edx,[edi+0x1]
c0002ab2:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002ab6:	83 f8 20             	cmp    eax,0x20
c0002ab9:	75 04                	jne    c0002abf <create_name+0xeb>
c0002abb:	89 d7                	mov    edi,edx
c0002abd:	eb ec                	jmp    c0002aab <create_name+0xd7>
c0002abf:	85 ff                	test   edi,edi
c0002ac1:	75 05                	jne    c0002ac8 <create_name+0xf4>
c0002ac3:	83 f8 2e             	cmp    eax,0x2e
c0002ac6:	75 08                	jne    c0002ad0 <create_name+0xfc>
c0002ac8:	83 cb 03             	or     ebx,0x3
c0002acb:	eb 03                	jmp    c0002ad0 <create_name+0xfc>
c0002acd:	4e                   	dec    esi
c0002ace:	74 0c                	je     c0002adc <create_name+0x108>
c0002ad0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002ad4:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0002ada:	75 f1                	jne    c0002acd <create_name+0xf9>
c0002adc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002ae0:	b9 0b 00 00 00       	mov    ecx,0xb
c0002ae5:	83 c0 20             	add    eax,0x20
c0002ae8:	ba 20 00 00 00       	mov    edx,0x20
c0002aed:	31 ed                	xor    ebp,ebp
c0002aef:	e8 24 f3 ff ff       	call   c0001e18 <mem_set>
c0002af4:	b9 08 00 00 00       	mov    ecx,0x8
c0002af9:	c6 44 24 08 00       	mov    BYTE PTR [esp+0x8],0x0
c0002afe:	8d 47 01             	lea    eax,[edi+0x1]
c0002b01:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0002b05:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0002b09:	0f b7 04 78          	movzx  eax,WORD PTR [eax+edi*2]
c0002b0d:	89 c7                	mov    edi,eax
c0002b0f:	85 c0                	test   eax,eax
c0002b11:	0f 84 25 01 00 00    	je     c0002c3c <create_name+0x268>
c0002b17:	83 f8 20             	cmp    eax,0x20
c0002b1a:	74 0f                	je     c0002b2b <create_name+0x157>
c0002b1c:	83 f8 2e             	cmp    eax,0x2e
c0002b1f:	75 13                	jne    c0002b34 <create_name+0x160>
c0002b21:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b25:	0f 84 6a 01 00 00    	je     c0002c95 <create_name+0x2c1>
c0002b2b:	83 cb 03             	or     ebx,0x3
c0002b2e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0002b32:	eb ca                	jmp    c0002afe <create_name+0x12a>
c0002b34:	39 cd                	cmp    ebp,ecx
c0002b36:	73 0b                	jae    c0002b43 <create_name+0x16f>
c0002b38:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b3c:	75 3f                	jne    c0002b7d <create_name+0x1a9>
c0002b3e:	e9 52 01 00 00       	jmp    c0002c95 <create_name+0x2c1>
c0002b43:	83 f9 0b             	cmp    ecx,0xb
c0002b46:	75 0d                	jne    c0002b55 <create_name+0x181>
c0002b48:	83 cb 03             	or     ebx,0x3
c0002b4b:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b50:	e9 e7 00 00 00       	jmp    c0002c3c <create_name+0x268>
c0002b55:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b59:	74 0d                	je     c0002b68 <create_name+0x194>
c0002b5b:	83 cb 03             	or     ebx,0x3
c0002b5e:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0002b62:	0f 87 d4 00 00 00    	ja     c0002c3c <create_name+0x268>
c0002b68:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002b6d:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0002b71:	b9 0b 00 00 00       	mov    ecx,0xb
c0002b76:	bd 08 00 00 00       	mov    ebp,0x8
c0002b7b:	eb b1                	jmp    c0002b2e <create_name+0x15a>
c0002b7d:	83 f8 7f             	cmp    eax,0x7f
c0002b80:	76 66                	jbe    c0002be8 <create_name+0x214>
c0002b82:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002b86:	89 d9                	mov    ecx,ebx
c0002b88:	83 c9 02             	or     ecx,0x2
c0002b8b:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002b8f:	52                   	push   edx
c0002b90:	52                   	push   edx
c0002b91:	68 b5 01 00 00       	push   0x1b5
c0002b96:	50                   	push   eax
c0002b97:	e8 b4 30 00 00       	call   c0005c50 <ff_uni2oem>
c0002b9c:	83 c4 10             	add    esp,0x10
c0002b9f:	89 c7                	mov    edi,eax
c0002ba1:	a8 80                	test   al,0x80
c0002ba3:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0002ba7:	74 0c                	je     c0002bb5 <create_name+0x1e1>
c0002ba9:	83 e7 7f             	and    edi,0x7f
c0002bac:	0f b6 bf 60 00 02 c0 	movzx  edi,BYTE PTR [edi-0x3ffdffa0]
c0002bb3:	eb 2a                	jmp    c0002bdf <create_name+0x20b>
c0002bb5:	0f b7 c0             	movzx  eax,ax
c0002bb8:	3d ff 00 00 00       	cmp    eax,0xff
c0002bbd:	76 20                	jbe    c0002bdf <create_name+0x20b>
c0002bbf:	8d 51 ff             	lea    edx,[ecx-0x1]
c0002bc2:	39 ea                	cmp    edx,ebp
c0002bc4:	77 0a                	ja     c0002bd0 <create_name+0x1fc>
c0002bc6:	83 cb 03             	or     ebx,0x3
c0002bc9:	89 cd                	mov    ebp,ecx
c0002bcb:	e9 5e ff ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002bd0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0002bd4:	88 64 2b 20          	mov    BYTE PTR [ebx+ebp*1+0x20],ah
c0002bd8:	45                   	inc    ebp
c0002bd9:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002bdd:	eb 4d                	jmp    c0002c2c <create_name+0x258>
c0002bdf:	8a 5c 24 18          	mov    bl,BYTE PTR [esp+0x18]
c0002be3:	66 85 ff             	test   di,di
c0002be6:	74 19                	je     c0002c01 <create_name+0x22d>
c0002be8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0002bec:	0f b7 d7             	movzx  edx,di
c0002bef:	b8 ab ff 01 c0       	mov    eax,0xc001ffab
c0002bf4:	e8 4d f2 ff ff       	call   c0001e46 <chk_chr>
c0002bf9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002bfd:	85 c0                	test   eax,eax
c0002bff:	74 0a                	je     c0002c0b <create_name+0x237>
c0002c01:	83 cb 03             	or     ebx,0x3
c0002c04:	bf 5f 00 00 00       	mov    edi,0x5f
c0002c09:	eb 21                	jmp    c0002c2c <create_name+0x258>
c0002c0b:	8d 47 bf             	lea    eax,[edi-0x41]
c0002c0e:	66 83 f8 19          	cmp    ax,0x19
c0002c12:	77 07                	ja     c0002c1b <create_name+0x247>
c0002c14:	83 4c 24 08 02       	or     DWORD PTR [esp+0x8],0x2
c0002c19:	eb 11                	jmp    c0002c2c <create_name+0x258>
c0002c1b:	8d 47 9f             	lea    eax,[edi-0x61]
c0002c1e:	66 83 f8 19          	cmp    ax,0x19
c0002c22:	77 08                	ja     c0002c2c <create_name+0x258>
c0002c24:	83 4c 24 08 01       	or     DWORD PTR [esp+0x8],0x1
c0002c29:	83 ef 20             	sub    edi,0x20
c0002c2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0002c30:	89 f8                	mov    eax,edi
c0002c32:	88 44 2a 20          	mov    BYTE PTR [edx+ebp*1+0x20],al
c0002c36:	45                   	inc    ebp
c0002c37:	e9 f2 fe ff ff       	jmp    c0002b2e <create_name+0x15a>
c0002c3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c40:	80 78 20 e5          	cmp    BYTE PTR [eax+0x20],0xe5
c0002c44:	75 04                	jne    c0002c4a <create_name+0x276>
c0002c46:	c6 40 20 05          	mov    BYTE PTR [eax+0x20],0x5
c0002c4a:	83 f9 08             	cmp    ecx,0x8
c0002c4d:	75 05                	jne    c0002c54 <create_name+0x280>
c0002c4f:	c1 64 24 08 02       	shl    DWORD PTR [esp+0x8],0x2
c0002c54:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c58:	83 e0 0c             	and    eax,0xc
c0002c5b:	83 f8 0c             	cmp    eax,0xc
c0002c5e:	74 0c                	je     c0002c6c <create_name+0x298>
c0002c60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002c64:	83 e0 03             	and    eax,0x3
c0002c67:	83 f8 03             	cmp    eax,0x3
c0002c6a:	75 05                	jne    c0002c71 <create_name+0x29d>
c0002c6c:	83 cb 02             	or     ebx,0x2
c0002c6f:	eb 19                	jmp    c0002c8a <create_name+0x2b6>
c0002c71:	f6 c3 02             	test   bl,0x2
c0002c74:	75 14                	jne    c0002c8a <create_name+0x2b6>
c0002c76:	f6 44 24 08 01       	test   BYTE PTR [esp+0x8],0x1
c0002c7b:	74 03                	je     c0002c80 <create_name+0x2ac>
c0002c7d:	83 cb 10             	or     ebx,0x10
c0002c80:	f6 44 24 08 04       	test   BYTE PTR [esp+0x8],0x4
c0002c85:	74 03                	je     c0002c8a <create_name+0x2b6>
c0002c87:	83 cb 08             	or     ebx,0x8
c0002c8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0002c8e:	88 58 2b             	mov    BYTE PTR [eax+0x2b],bl
c0002c91:	31 c0                	xor    eax,eax
c0002c93:	eb 0e                	jmp    c0002ca3 <create_name+0x2cf>
c0002c95:	83 f9 0b             	cmp    ecx,0xb
c0002c98:	0f 85 ca fe ff ff    	jne    c0002b68 <create_name+0x194>
c0002c9e:	e9 a5 fe ff ff       	jmp    c0002b48 <create_name+0x174>
c0002ca3:	83 c4 3c             	add    esp,0x3c
c0002ca6:	5b                   	pop    ebx
c0002ca7:	5e                   	pop    esi
c0002ca8:	5f                   	pop    edi
c0002ca9:	5d                   	pop    ebp
c0002caa:	c3                   	ret    

c0002cab <cmp_lfn>:
c0002cab:	55                   	push   ebp
c0002cac:	57                   	push   edi
c0002cad:	89 d7                	mov    edi,edx
c0002caf:	56                   	push   esi
c0002cb0:	53                   	push   ebx
c0002cb1:	83 ec 1c             	sub    esp,0x1c
c0002cb4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002cb8:	8d 42 1a             	lea    eax,[edx+0x1a]
c0002cbb:	e8 17 f1 ff ff       	call   c0001dd7 <ld_word>
c0002cc0:	66 85 c0             	test   ax,ax
c0002cc3:	74 07                	je     c0002ccc <cmp_lfn+0x21>
c0002cc5:	31 c0                	xor    eax,eax
c0002cc7:	e9 a1 00 00 00       	jmp    c0002d6d <cmp_lfn+0xc2>
c0002ccc:	8a 1f                	mov    bl,BYTE PTR [edi]
c0002cce:	bd 01 00 00 00       	mov    ebp,0x1
c0002cd3:	83 e3 3f             	and    ebx,0x3f
c0002cd6:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002cde:	4b                   	dec    ebx
c0002cdf:	6b db 0d             	imul   ebx,ebx,0xd
c0002ce2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002ce6:	0f b6 80 e0 00 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdff20]
c0002ced:	01 f8                	add    eax,edi
c0002cef:	e8 e3 f0 ff ff       	call   c0001dd7 <ld_word>
c0002cf4:	66 85 ed             	test   bp,bp
c0002cf7:	89 c6                	mov    esi,eax
c0002cf9:	74 3c                	je     c0002d37 <cmp_lfn+0x8c>
c0002cfb:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0002d01:	77 c2                	ja     c0002cc5 <cmp_lfn+0x1a>
c0002d03:	83 ec 0c             	sub    esp,0xc
c0002d06:	0f b7 c0             	movzx  eax,ax
c0002d09:	50                   	push   eax
c0002d0a:	e8 59 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d0f:	89 c5                	mov    ebp,eax
c0002d11:	8d 43 01             	lea    eax,[ebx+0x1]
c0002d14:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002d18:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0002d1c:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c0002d20:	89 04 24             	mov    DWORD PTR [esp],eax
c0002d23:	e8 40 30 00 00       	call   c0005d68 <ff_wtoupper>
c0002d28:	83 c4 10             	add    esp,0x10
c0002d2b:	39 c5                	cmp    ebp,eax
c0002d2d:	75 96                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d2f:	89 f5                	mov    ebp,esi
c0002d31:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0002d35:	eb 0b                	jmp    c0002d42 <cmp_lfn+0x97>
c0002d37:	0f b7 c8             	movzx  ecx,ax
c0002d3a:	81 f9 ff ff 00 00    	cmp    ecx,0xffff
c0002d40:	75 83                	jne    c0002cc5 <cmp_lfn+0x1a>
c0002d42:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c0002d46:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c0002d4b:	75 95                	jne    c0002ce2 <cmp_lfn+0x37>
c0002d4d:	f6 07 40             	test   BYTE PTR [edi],0x40
c0002d50:	74 16                	je     c0002d68 <cmp_lfn+0xbd>
c0002d52:	66 85 ed             	test   bp,bp
c0002d55:	74 11                	je     c0002d68 <cmp_lfn+0xbd>
c0002d57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d5b:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002d60:	0f 94 c0             	sete   al
c0002d63:	0f b6 c0             	movzx  eax,al
c0002d66:	eb 05                	jmp    c0002d6d <cmp_lfn+0xc2>
c0002d68:	b8 01 00 00 00       	mov    eax,0x1
c0002d6d:	83 c4 1c             	add    esp,0x1c
c0002d70:	5b                   	pop    ebx
c0002d71:	5e                   	pop    esi
c0002d72:	5f                   	pop    edi
c0002d73:	5d                   	pop    ebp
c0002d74:	c3                   	ret    

c0002d75 <sync_fs>:
c0002d75:	56                   	push   esi
c0002d76:	53                   	push   ebx
c0002d77:	53                   	push   ebx
c0002d78:	89 c3                	mov    ebx,eax
c0002d7a:	e8 5c f5 ff ff       	call   c00022db <sync_window>
c0002d7f:	85 c0                	test   eax,eax
c0002d81:	0f 85 9a 00 00 00    	jne    c0002e21 <sync_fs+0xac>
c0002d87:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0002d8a:	75 7b                	jne    c0002e07 <sync_fs+0x92>
c0002d8c:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c0002d90:	75 75                	jne    c0002e07 <sync_fs+0x92>
c0002d92:	b9 00 02 00 00       	mov    ecx,0x200
c0002d97:	8d 73 34             	lea    esi,[ebx+0x34]
c0002d9a:	31 d2                	xor    edx,edx
c0002d9c:	89 f0                	mov    eax,esi
c0002d9e:	e8 75 f0 ff ff       	call   c0001e18 <mem_set>
c0002da3:	8d 83 32 02 00 00    	lea    eax,[ebx+0x232]
c0002da9:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002dae:	e8 49 f0 ff ff       	call   c0001dfc <st_word>
c0002db3:	ba 52 52 61 41       	mov    edx,0x41615252
c0002db8:	89 f0                	mov    eax,esi
c0002dba:	e8 41 f0 ff ff       	call   c0001e00 <st_dword>
c0002dbf:	8d 83 18 02 00 00    	lea    eax,[ebx+0x218]
c0002dc5:	ba 72 72 41 61       	mov    edx,0x61417272
c0002dca:	e8 31 f0 ff ff       	call   c0001e00 <st_dword>
c0002dcf:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0002dd2:	8d 83 1c 02 00 00    	lea    eax,[ebx+0x21c]
c0002dd8:	e8 23 f0 ff ff       	call   c0001e00 <st_dword>
c0002ddd:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0002de0:	8d 83 20 02 00 00    	lea    eax,[ebx+0x220]
c0002de6:	e8 15 f0 ff ff       	call   c0001e00 <st_dword>
c0002deb:	6a 01                	push   0x1
c0002ded:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0002df0:	40                   	inc    eax
c0002df1:	50                   	push   eax
c0002df2:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0002df5:	56                   	push   esi
c0002df6:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002dfa:	50                   	push   eax
c0002dfb:	e8 a2 ef ff ff       	call   c0001da2 <disk_write>
c0002e00:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c0002e04:	83 c4 10             	add    esp,0x10
c0002e07:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002e0b:	51                   	push   ecx
c0002e0c:	6a 00                	push   0x0
c0002e0e:	6a 00                	push   0x0
c0002e10:	50                   	push   eax
c0002e11:	e8 a2 ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e16:	83 c4 10             	add    esp,0x10
c0002e19:	85 c0                	test   eax,eax
c0002e1b:	0f 95 c0             	setne  al
c0002e1e:	0f b6 c0             	movzx  eax,al
c0002e21:	5a                   	pop    edx
c0002e22:	5b                   	pop    ebx
c0002e23:	5e                   	pop    esi
c0002e24:	c3                   	ret    

c0002e25 <create_partition>:
c0002e25:	55                   	push   ebp
c0002e26:	0f b6 c0             	movzx  eax,al
c0002e29:	57                   	push   edi
c0002e2a:	56                   	push   esi
c0002e2b:	53                   	push   ebx
c0002e2c:	83 ec 40             	sub    esp,0x40
c0002e2f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002e33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0002e37:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0002e3b:	8d 44 24 30          	lea    eax,[esp+0x30]
c0002e3f:	50                   	push   eax
c0002e40:	6a 01                	push   0x1
c0002e42:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002e46:	e8 6d ef ff ff       	call   c0001db8 <disk_ioctl>
c0002e4b:	83 c4 10             	add    esp,0x10
c0002e4e:	85 c0                	test   eax,eax
c0002e50:	0f 85 6a 01 00 00    	jne    c0002fc0 <create_partition+0x19b>
c0002e56:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002e5a:	b9 05 00 00 00       	mov    ecx,0x5
c0002e5f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0002e63:	be 08 00 00 00       	mov    esi,0x8
c0002e68:	89 f0                	mov    eax,esi
c0002e6a:	31 d2                	xor    edx,edx
c0002e6c:	0f b6 d8             	movzx  ebx,al
c0002e6f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e73:	f7 f3                	div    ebx
c0002e75:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0002e7a:	76 0a                	jbe    c0002e86 <create_partition+0x61>
c0002e7c:	d1 e6                	shl    esi,1
c0002e7e:	49                   	dec    ecx
c0002e7f:	75 e7                	jne    c0002e68 <create_partition+0x43>
c0002e81:	be ff ff ff ff       	mov    esi,0xffffffff
c0002e86:	b9 00 02 00 00       	mov    ecx,0x200
c0002e8b:	31 d2                	xor    edx,edx
c0002e8d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002e91:	e8 82 ef ff ff       	call   c0001e18 <mem_set>
c0002e96:	b9 64 00 00 00       	mov    ecx,0x64
c0002e9b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002e9f:	31 d2                	xor    edx,edx
c0002ea1:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002ea9:	f7 f1                	div    ecx
c0002eab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0002eb0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0002eb4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002eb8:	8d 98 c6 01 00 00    	lea    ebx,[eax+0x1c6]
c0002ebe:	89 f0                	mov    eax,esi
c0002ec0:	0f b6 c0             	movzx  eax,al
c0002ec3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ec7:	85 c9                	test   ecx,ecx
c0002ec9:	75 34                	jne    c0002eff <create_partition+0xda>
c0002ecb:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0002ecf:	ba 55 aa 00 00       	mov    edx,0xaa55
c0002ed4:	05 fe 01 00 00       	add    eax,0x1fe
c0002ed9:	e8 1e ef ff ff       	call   c0001dfc <st_word>
c0002ede:	6a 01                	push   0x1
c0002ee0:	6a 00                	push   0x0
c0002ee2:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c0002ee6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0002eea:	e8 b3 ee ff ff       	call   c0001da2 <disk_write>
c0002eef:	83 c4 10             	add    esp,0x10
c0002ef2:	85 c0                	test   eax,eax
c0002ef4:	0f 95 c0             	setne  al
c0002ef7:	0f b6 c0             	movzx  eax,al
c0002efa:	e9 c6 00 00 00       	jmp    c0002fc5 <create_partition+0x1a0>
c0002eff:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0002f03:	76 c6                	jbe    c0002ecb <create_partition+0xa6>
c0002f05:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0002f09:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0002f0d:	8b 34 b8             	mov    esi,DWORD PTR [eax+edi*4]
c0002f10:	83 fe 64             	cmp    esi,0x64
c0002f13:	77 0d                	ja     c0002f22 <create_partition+0xfd>
c0002f15:	74 07                	je     c0002f1e <create_partition+0xf9>
c0002f17:	0f af 74 24 1c       	imul   esi,DWORD PTR [esp+0x1c]
c0002f1c:	eb 04                	jmp    c0002f22 <create_partition+0xfd>
c0002f1e:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f22:	31 c0                	xor    eax,eax
c0002f24:	89 f2                	mov    edx,esi
c0002f26:	01 ca                	add    edx,ecx
c0002f28:	0f 92 c0             	setb   al
c0002f2b:	3b 54 24 04          	cmp    edx,DWORD PTR [esp+0x4]
c0002f2f:	77 04                	ja     c0002f35 <create_partition+0x110>
c0002f31:	85 c0                	test   eax,eax
c0002f33:	74 08                	je     c0002f3d <create_partition+0x118>
c0002f35:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0002f39:	29 ce                	sub    esi,ecx
c0002f3b:	eb 04                	jmp    c0002f41 <create_partition+0x11c>
c0002f3d:	85 f6                	test   esi,esi
c0002f3f:	74 8a                	je     c0002ecb <create_partition+0xa6>
c0002f41:	89 ca                	mov    edx,ecx
c0002f43:	89 d8                	mov    eax,ebx
c0002f45:	bf 3f 00 00 00       	mov    edi,0x3f
c0002f4a:	e8 b1 ee ff ff       	call   c0001e00 <st_dword>
c0002f4f:	8d 43 04             	lea    eax,[ebx+0x4]
c0002f52:	89 f2                	mov    edx,esi
c0002f54:	83 c3 10             	add    ebx,0x10
c0002f57:	e8 a4 ee ff ff       	call   c0001e00 <st_dword>
c0002f5c:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0002f60:	31 d2                	xor    edx,edx
c0002f62:	88 43 ec             	mov    BYTE PTR [ebx-0x14],al
c0002f65:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002f69:	89 c8                	mov    eax,ecx
c0002f6b:	01 f1                	add    ecx,esi
c0002f6d:	f7 f7                	div    edi
c0002f6f:	89 d5                	mov    ebp,edx
c0002f71:	31 d2                	xor    edx,edx
c0002f73:	45                   	inc    ebp
c0002f74:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f78:	88 53 e9             	mov    BYTE PTR [ebx-0x17],dl
c0002f7b:	88 43 eb             	mov    BYTE PTR [ebx-0x15],al
c0002f7e:	89 c2                	mov    edx,eax
c0002f80:	8d 41 ff             	lea    eax,[ecx-0x1]
c0002f83:	c1 ea 02             	shr    edx,0x2
c0002f86:	83 e2 c0             	and    edx,0xffffffc0
c0002f89:	09 ea                	or     edx,ebp
c0002f8b:	88 53 ea             	mov    BYTE PTR [ebx-0x16],dl
c0002f8e:	31 d2                	xor    edx,edx
c0002f90:	f7 f7                	div    edi
c0002f92:	89 d6                	mov    esi,edx
c0002f94:	31 d2                	xor    edx,edx
c0002f96:	46                   	inc    esi
c0002f97:	f7 74 24 10          	div    DWORD PTR [esp+0x10]
c0002f9b:	88 53 ed             	mov    BYTE PTR [ebx-0x13],dl
c0002f9e:	88 43 ef             	mov    BYTE PTR [ebx-0x11],al
c0002fa1:	89 c7                	mov    edi,eax
c0002fa3:	c1 ef 02             	shr    edi,0x2
c0002fa6:	83 e7 c0             	and    edi,0xffffffc0
c0002fa9:	09 fe                	or     esi,edi
c0002fab:	89 f2                	mov    edx,esi
c0002fad:	88 53 ee             	mov    BYTE PTR [ebx-0x12],dl
c0002fb0:	83 7c 24 08 04       	cmp    DWORD PTR [esp+0x8],0x4
c0002fb5:	0f 85 0c ff ff ff    	jne    c0002ec7 <create_partition+0xa2>
c0002fbb:	e9 0b ff ff ff       	jmp    c0002ecb <create_partition+0xa6>
c0002fc0:	b8 01 00 00 00       	mov    eax,0x1
c0002fc5:	83 c4 3c             	add    esp,0x3c
c0002fc8:	5b                   	pop    ebx
c0002fc9:	5e                   	pop    esi
c0002fca:	5f                   	pop    edi
c0002fcb:	5d                   	pop    ebp
c0002fcc:	c3                   	ret    

c0002fcd <get_fileinfo>:
c0002fcd:	55                   	push   ebp
c0002fce:	57                   	push   edi
c0002fcf:	56                   	push   esi
c0002fd0:	53                   	push   ebx
c0002fd1:	83 ec 1c             	sub    esp,0x1c
c0002fd4:	8b 30                	mov    esi,DWORD PTR [eax]
c0002fd6:	c6 42 16 00          	mov    BYTE PTR [edx+0x16],0x0
c0002fda:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0002fde:	83 78 18 00          	cmp    DWORD PTR [eax+0x18],0x0
c0002fe2:	0f 84 d3 01 00 00    	je     c00031bb <get_fileinfo+0x1ee>
c0002fe8:	89 d3                	mov    ebx,edx
c0002fea:	89 c6                	mov    esi,eax
c0002fec:	83 78 2c ff          	cmp    DWORD PTR [eax+0x2c],0xffffffff
c0002ff0:	74 72                	je     c0003064 <get_fileinfo+0x97>
c0002ff2:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0002ffa:	31 ed                	xor    ebp,ebp
c0002ffc:	31 ff                	xor    edi,edi
c0002ffe:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003002:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0003006:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003009:	0f b7 04 08          	movzx  eax,WORD PTR [eax+ecx*1]
c000300d:	89 c2                	mov    edx,eax
c000300f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003013:	85 c0                	test   eax,eax
c0003015:	74 41                	je     c0003058 <get_fileinfo+0x8b>
c0003017:	0f b7 c5             	movzx  eax,bp
c000301a:	85 c0                	test   eax,eax
c000301c:	75 0d                	jne    c000302b <get_fileinfo+0x5e>
c000301e:	8d 8a 00 28 00 00    	lea    ecx,[edx+0x2800]
c0003024:	66 81 f9 ff 07       	cmp    cx,0x7ff
c0003029:	76 22                	jbe    c000304d <get_fileinfo+0x80>
c000302b:	c1 e0 10             	shl    eax,0x10
c000302e:	b9 ff 00 00 00       	mov    ecx,0xff
c0003033:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0003037:	29 f9                	sub    ecx,edi
c0003039:	8d 54 3b 16          	lea    edx,[ebx+edi*1+0x16]
c000303d:	e8 f3 ee ff ff       	call   c0001f35 <put_utf>
c0003042:	0f b6 c0             	movzx  eax,al
c0003045:	85 c0                	test   eax,eax
c0003047:	74 0d                	je     c0003056 <get_fileinfo+0x89>
c0003049:	01 c7                	add    edi,eax
c000304b:	31 d2                	xor    edx,edx
c000304d:	83 44 24 04 02       	add    DWORD PTR [esp+0x4],0x2
c0003052:	89 d5                	mov    ebp,edx
c0003054:	eb a8                	jmp    c0002ffe <get_fileinfo+0x31>
c0003056:	31 ff                	xor    edi,edi
c0003058:	66 85 ed             	test   bp,bp
c000305b:	74 02                	je     c000305f <get_fileinfo+0x92>
c000305d:	31 ff                	xor    edi,edi
c000305f:	c6 44 3b 16 00       	mov    BYTE PTR [ebx+edi*1+0x16],0x0
c0003064:	31 ff                	xor    edi,edi
c0003066:	31 c9                	xor    ecx,ecx
c0003068:	83 f9 0a             	cmp    ecx,0xa
c000306b:	0f 87 ac 00 00 00    	ja     c000311d <get_fileinfo+0x150>
c0003071:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003074:	8d 69 01             	lea    ebp,[ecx+0x1]
c0003077:	0f b6 04 08          	movzx  eax,BYTE PTR [eax+ecx*1]
c000307b:	89 c2                	mov    edx,eax
c000307d:	83 f8 20             	cmp    eax,0x20
c0003080:	0f 84 90 00 00 00    	je     c0003116 <get_fileinfo+0x149>
c0003086:	83 f8 05             	cmp    eax,0x5
c0003089:	75 05                	jne    c0003090 <get_fileinfo+0xc3>
c000308b:	ba e5 00 00 00       	mov    edx,0xe5
c0003090:	83 ff 0b             	cmp    edi,0xb
c0003093:	77 0b                	ja     c00030a0 <get_fileinfo+0xd3>
c0003095:	83 fd 09             	cmp    ebp,0x9
c0003098:	75 06                	jne    c00030a0 <get_fileinfo+0xd3>
c000309a:	c6 44 3b 09 2e       	mov    BYTE PTR [ebx+edi*1+0x9],0x2e
c000309f:	47                   	inc    edi
c00030a0:	0f b7 c2             	movzx  eax,dx
c00030a3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00030a7:	e8 ab ed ff ff       	call   c0001e57 <dbc_1st>
c00030ac:	85 c0                	test   eax,eax
c00030ae:	74 2f                	je     c00030df <get_fileinfo+0x112>
c00030b0:	83 fd 08             	cmp    ebp,0x8
c00030b3:	74 2a                	je     c00030df <get_fileinfo+0x112>
c00030b5:	83 fd 0b             	cmp    ebp,0xb
c00030b8:	74 25                	je     c00030df <get_fileinfo+0x112>
c00030ba:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00030bd:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c00030c1:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c00030c5:	e8 90 ed ff ff       	call   c0001e5a <dbc_2nd>
c00030ca:	85 c0                	test   eax,eax
c00030cc:	74 11                	je     c00030df <get_fileinfo+0x112>
c00030ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00030d2:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c00030d7:	c1 e0 08             	shl    eax,0x8
c00030da:	8d 69 02             	lea    ebp,[ecx+0x2]
c00030dd:	09 c2                	or     edx,eax
c00030df:	0f b7 d2             	movzx  edx,dx
c00030e2:	50                   	push   eax
c00030e3:	50                   	push   eax
c00030e4:	68 b5 01 00 00       	push   0x1b5
c00030e9:	52                   	push   edx
c00030ea:	e8 01 2c 00 00       	call   c0005cf0 <ff_oem2uni>
c00030ef:	83 c4 10             	add    esp,0x10
c00030f2:	0f b7 c0             	movzx  eax,ax
c00030f5:	85 c0                	test   eax,eax
c00030f7:	75 04                	jne    c00030fd <get_fileinfo+0x130>
c00030f9:	31 ff                	xor    edi,edi
c00030fb:	eb 20                	jmp    c000311d <get_fileinfo+0x150>
c00030fd:	b9 0c 00 00 00       	mov    ecx,0xc
c0003102:	8d 54 3b 09          	lea    edx,[ebx+edi*1+0x9]
c0003106:	29 f9                	sub    ecx,edi
c0003108:	e8 28 ee ff ff       	call   c0001f35 <put_utf>
c000310d:	0f b6 c0             	movzx  eax,al
c0003110:	85 c0                	test   eax,eax
c0003112:	74 e5                	je     c00030f9 <get_fileinfo+0x12c>
c0003114:	01 c7                	add    edi,eax
c0003116:	89 e9                	mov    ecx,ebp
c0003118:	e9 4b ff ff ff       	jmp    c0003068 <get_fileinfo+0x9b>
c000311d:	c6 44 3b 09 00       	mov    BYTE PTR [ebx+edi*1+0x9],0x0
c0003122:	80 7b 16 00          	cmp    BYTE PTR [ebx+0x16],0x0
c0003126:	75 5f                	jne    c0003187 <get_fileinfo+0x1ba>
c0003128:	85 ff                	test   edi,edi
c000312a:	75 0b                	jne    c0003137 <get_fileinfo+0x16a>
c000312c:	c6 43 16 3f          	mov    BYTE PTR [ebx+0x16],0x3f
c0003130:	ba 01 00 00 00       	mov    edx,0x1
c0003135:	eb 3e                	jmp    c0003175 <get_fileinfo+0x1a8>
c0003137:	bf 08 00 00 00       	mov    edi,0x8
c000313c:	31 d2                	xor    edx,edx
c000313e:	66 0f be 44 13 09    	movsx  ax,BYTE PTR [ebx+edx*1+0x9]
c0003144:	84 c0                	test   al,al
c0003146:	74 2d                	je     c0003175 <get_fileinfo+0x1a8>
c0003148:	66 83 f8 2e          	cmp    ax,0x2e
c000314c:	74 1b                	je     c0003169 <get_fileinfo+0x19c>
c000314e:	8d 48 bf             	lea    ecx,[eax-0x41]
c0003151:	66 83 f9 19          	cmp    cx,0x19
c0003155:	77 17                	ja     c000316e <get_fileinfo+0x1a1>
c0003157:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c000315a:	8a 49 0c             	mov    cl,BYTE PTR [ecx+0xc]
c000315d:	21 f9                	and    ecx,edi
c000315f:	80 e1 18             	and    cl,0x18
c0003162:	74 0a                	je     c000316e <get_fileinfo+0x1a1>
c0003164:	83 c0 20             	add    eax,0x20
c0003167:	eb 05                	jmp    c000316e <get_fileinfo+0x1a1>
c0003169:	bf 10 00 00 00       	mov    edi,0x10
c000316e:	88 44 13 16          	mov    BYTE PTR [ebx+edx*1+0x16],al
c0003172:	42                   	inc    edx
c0003173:	eb c9                	jmp    c000313e <get_fileinfo+0x171>
c0003175:	c6 44 13 16 00       	mov    BYTE PTR [ebx+edx*1+0x16],0x0
c000317a:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000317d:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0003181:	75 04                	jne    c0003187 <get_fileinfo+0x1ba>
c0003183:	c6 43 09 00          	mov    BYTE PTR [ebx+0x9],0x0
c0003187:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000318a:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c000318d:	88 43 08             	mov    BYTE PTR [ebx+0x8],al
c0003190:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0003193:	83 c0 1c             	add    eax,0x1c
c0003196:	e8 49 ec ff ff       	call   c0001de4 <ld_dword>
c000319b:	89 03                	mov    DWORD PTR [ebx],eax
c000319d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031a0:	83 c0 16             	add    eax,0x16
c00031a3:	e8 2f ec ff ff       	call   c0001dd7 <ld_word>
c00031a8:	66 89 43 06          	mov    WORD PTR [ebx+0x6],ax
c00031ac:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c00031af:	83 c0 18             	add    eax,0x18
c00031b2:	e8 20 ec ff ff       	call   c0001dd7 <ld_word>
c00031b7:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c00031bb:	83 c4 1c             	add    esp,0x1c
c00031be:	5b                   	pop    ebx
c00031bf:	5e                   	pop    esi
c00031c0:	5f                   	pop    edi
c00031c1:	5d                   	pop    ebp
c00031c2:	c3                   	ret    

c00031c3 <ld_clust.isra.0>:
c00031c3:	56                   	push   esi
c00031c4:	89 c6                	mov    esi,eax
c00031c6:	53                   	push   ebx
c00031c7:	8d 42 1a             	lea    eax,[edx+0x1a]
c00031ca:	89 d3                	mov    ebx,edx
c00031cc:	e8 06 ec ff ff       	call   c0001dd7 <ld_word>
c00031d1:	0f b7 c8             	movzx  ecx,ax
c00031d4:	89 f0                	mov    eax,esi
c00031d6:	3c 03                	cmp    al,0x3
c00031d8:	75 0d                	jne    c00031e7 <ld_clust.isra.0+0x24>
c00031da:	8d 43 14             	lea    eax,[ebx+0x14]
c00031dd:	e8 f5 eb ff ff       	call   c0001dd7 <ld_word>
c00031e2:	c1 e0 10             	shl    eax,0x10
c00031e5:	09 c1                	or     ecx,eax
c00031e7:	89 c8                	mov    eax,ecx
c00031e9:	5b                   	pop    ebx
c00031ea:	5e                   	pop    esi
c00031eb:	c3                   	ret    

c00031ec <st_clust.isra.1>:
c00031ec:	56                   	push   esi
c00031ed:	89 c6                	mov    esi,eax
c00031ef:	53                   	push   ebx
c00031f0:	89 d3                	mov    ebx,edx
c00031f2:	0f b7 d1             	movzx  edx,cx
c00031f5:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00031f8:	e8 ff eb ff ff       	call   c0001dfc <st_word>
c00031fd:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0003200:	75 0f                	jne    c0003211 <st_clust.isra.1+0x25>
c0003202:	c1 e9 10             	shr    ecx,0x10
c0003205:	8d 43 14             	lea    eax,[ebx+0x14]
c0003208:	89 ca                	mov    edx,ecx
c000320a:	5b                   	pop    ebx
c000320b:	5e                   	pop    esi
c000320c:	e9 eb eb ff ff       	jmp    c0001dfc <st_word>
c0003211:	5b                   	pop    ebx
c0003212:	5e                   	pop    esi
c0003213:	c3                   	ret    

c0003214 <get_fat.isra.2>:
c0003214:	b9 01 00 00 00       	mov    ecx,0x1
c0003219:	83 fa 01             	cmp    edx,0x1
c000321c:	0f 86 f3 00 00 00    	jbe    c0003315 <get_fat.isra.2+0x101>
c0003222:	3b 50 18             	cmp    edx,DWORD PTR [eax+0x18]
c0003225:	0f 83 ea 00 00 00    	jae    c0003315 <get_fat.isra.2+0x101>
c000322b:	55                   	push   ebp
c000322c:	57                   	push   edi
c000322d:	89 c7                	mov    edi,eax
c000322f:	56                   	push   esi
c0003230:	89 d6                	mov    esi,edx
c0003232:	53                   	push   ebx
c0003233:	83 ec 0c             	sub    esp,0xc
c0003236:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0003239:	83 f8 02             	cmp    eax,0x2
c000323c:	74 78                	je     c00032b6 <get_fat.isra.2+0xa2>
c000323e:	83 f8 03             	cmp    eax,0x3
c0003241:	0f 84 96 00 00 00    	je     c00032dd <get_fat.isra.2+0xc9>
c0003247:	48                   	dec    eax
c0003248:	0f 85 bd 00 00 00    	jne    c000330b <get_fat.isra.2+0xf7>
c000324e:	89 d3                	mov    ebx,edx
c0003250:	89 f8                	mov    eax,edi
c0003252:	d1 eb                	shr    ebx,1
c0003254:	01 d3                	add    ebx,edx
c0003256:	89 da                	mov    edx,ebx
c0003258:	c1 ea 09             	shr    edx,0x9
c000325b:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c000325e:	e8 db f0 ff ff       	call   c000233e <move_window>
c0003263:	85 c0                	test   eax,eax
c0003265:	74 08                	je     c000326f <get_fat.isra.2+0x5b>
c0003267:	83 c9 ff             	or     ecx,0xffffffff
c000326a:	e9 9c 00 00 00       	jmp    c000330b <get_fat.isra.2+0xf7>
c000326f:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0003272:	89 f8                	mov    eax,edi
c0003274:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c000327a:	89 ea                	mov    edx,ebp
c000327c:	8a 5c 1f 34          	mov    bl,BYTE PTR [edi+ebx*1+0x34]
c0003280:	c1 ea 09             	shr    edx,0x9
c0003283:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c0003286:	e8 b3 f0 ff ff       	call   c000233e <move_window>
c000328b:	85 c0                	test   eax,eax
c000328d:	75 d8                	jne    c0003267 <get_fat.isra.2+0x53>
c000328f:	0f b6 c3             	movzx  eax,bl
c0003292:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0003298:	0f b6 5c 2f 34       	movzx  ebx,BYTE PTR [edi+ebp*1+0x34]
c000329d:	c1 e3 08             	shl    ebx,0x8
c00032a0:	09 c3                	or     ebx,eax
c00032a2:	89 d9                	mov    ecx,ebx
c00032a4:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c00032aa:	83 e6 01             	and    esi,0x1
c00032ad:	74 5c                	je     c000330b <get_fat.isra.2+0xf7>
c00032af:	89 d9                	mov    ecx,ebx
c00032b1:	c1 e9 04             	shr    ecx,0x4
c00032b4:	eb 55                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032b6:	c1 ea 08             	shr    edx,0x8
c00032b9:	89 f8                	mov    eax,edi
c00032bb:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032be:	e8 7b f0 ff ff       	call   c000233e <move_window>
c00032c3:	85 c0                	test   eax,eax
c00032c5:	75 a0                	jne    c0003267 <get_fat.isra.2+0x53>
c00032c7:	01 f6                	add    esi,esi
c00032c9:	81 e6 fe 01 00 00    	and    esi,0x1fe
c00032cf:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032d3:	e8 ff ea ff ff       	call   c0001dd7 <ld_word>
c00032d8:	0f b7 c8             	movzx  ecx,ax
c00032db:	eb 2e                	jmp    c000330b <get_fat.isra.2+0xf7>
c00032dd:	c1 ea 07             	shr    edx,0x7
c00032e0:	89 f8                	mov    eax,edi
c00032e2:	03 57 24             	add    edx,DWORD PTR [edi+0x24]
c00032e5:	e8 54 f0 ff ff       	call   c000233e <move_window>
c00032ea:	85 c0                	test   eax,eax
c00032ec:	0f 85 75 ff ff ff    	jne    c0003267 <get_fat.isra.2+0x53>
c00032f2:	c1 e6 02             	shl    esi,0x2
c00032f5:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00032fb:	8d 44 37 34          	lea    eax,[edi+esi*1+0x34]
c00032ff:	e8 e0 ea ff ff       	call   c0001de4 <ld_dword>
c0003304:	25 ff ff ff 0f       	and    eax,0xfffffff
c0003309:	89 c1                	mov    ecx,eax
c000330b:	83 c4 0c             	add    esp,0xc
c000330e:	89 c8                	mov    eax,ecx
c0003310:	5b                   	pop    ebx
c0003311:	5e                   	pop    esi
c0003312:	5f                   	pop    edi
c0003313:	5d                   	pop    ebp
c0003314:	c3                   	ret    
c0003315:	89 c8                	mov    eax,ecx
c0003317:	c3                   	ret    

c0003318 <dir_sdi>:
c0003318:	81 fa ff ff 1f 00    	cmp    edx,0x1fffff
c000331e:	0f 87 b6 00 00 00    	ja     c00033da <dir_sdi+0xc2>
c0003324:	55                   	push   ebp
c0003325:	57                   	push   edi
c0003326:	56                   	push   esi
c0003327:	53                   	push   ebx
c0003328:	89 d3                	mov    ebx,edx
c000332a:	83 ec 1c             	sub    esp,0x1c
c000332d:	f6 c2 1f             	test   dl,0x1f
c0003330:	74 0a                	je     c000333c <dir_sdi+0x24>
c0003332:	b8 02 00 00 00       	mov    eax,0x2
c0003337:	e9 96 00 00 00       	jmp    c00033d2 <dir_sdi+0xba>
c000333c:	89 c6                	mov    esi,eax
c000333e:	8b 38                	mov    edi,DWORD PTR [eax]
c0003340:	89 56 10             	mov    DWORD PTR [esi+0x10],edx
c0003343:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0003346:	85 c9                	test   ecx,ecx
c0003348:	75 23                	jne    c000336d <dir_sdi+0x55>
c000334a:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000334d:	76 07                	jbe    c0003356 <dir_sdi+0x3e>
c000334f:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003352:	85 c0                	test   eax,eax
c0003354:	75 15                	jne    c000336b <dir_sdi+0x53>
c0003356:	89 da                	mov    edx,ebx
c0003358:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c000335c:	c1 ea 05             	shr    edx,0x5
c000335f:	39 c2                	cmp    edx,eax
c0003361:	73 cf                	jae    c0003332 <dir_sdi+0x1a>
c0003363:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c0003366:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c0003369:	eb 3d                	jmp    c00033a8 <dir_sdi+0x90>
c000336b:	89 c1                	mov    ecx,eax
c000336d:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c0003371:	c1 e5 09             	shl    ebp,0x9
c0003374:	89 ca                	mov    edx,ecx
c0003376:	39 eb                	cmp    ebx,ebp
c0003378:	72 1c                	jb     c0003396 <dir_sdi+0x7e>
c000337a:	8b 06                	mov    eax,DWORD PTR [esi]
c000337c:	e8 93 fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003381:	89 c1                	mov    ecx,eax
c0003383:	83 f8 ff             	cmp    eax,0xffffffff
c0003386:	74 45                	je     c00033cd <dir_sdi+0xb5>
c0003388:	83 f8 01             	cmp    eax,0x1
c000338b:	76 a5                	jbe    c0003332 <dir_sdi+0x1a>
c000338d:	39 47 18             	cmp    DWORD PTR [edi+0x18],eax
c0003390:	76 a0                	jbe    c0003332 <dir_sdi+0x1a>
c0003392:	29 eb                	sub    ebx,ebp
c0003394:	eb de                	jmp    c0003374 <dir_sdi+0x5c>
c0003396:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000339a:	89 f8                	mov    eax,edi
c000339c:	e8 8d ec ff ff       	call   c000202e <clst2sect>
c00033a1:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00033a5:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033a8:	8b 56 18             	mov    edx,DWORD PTR [esi+0x18]
c00033ab:	89 4e 14             	mov    DWORD PTR [esi+0x14],ecx
c00033ae:	85 d2                	test   edx,edx
c00033b0:	74 80                	je     c0003332 <dir_sdi+0x1a>
c00033b2:	89 d8                	mov    eax,ebx
c00033b4:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c00033ba:	c1 e8 09             	shr    eax,0x9
c00033bd:	01 d0                	add    eax,edx
c00033bf:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c00033c2:	8d 44 1f 34          	lea    eax,[edi+ebx*1+0x34]
c00033c6:	89 46 1c             	mov    DWORD PTR [esi+0x1c],eax
c00033c9:	31 c0                	xor    eax,eax
c00033cb:	eb 05                	jmp    c00033d2 <dir_sdi+0xba>
c00033cd:	b8 01 00 00 00       	mov    eax,0x1
c00033d2:	83 c4 1c             	add    esp,0x1c
c00033d5:	5b                   	pop    ebx
c00033d6:	5e                   	pop    esi
c00033d7:	5f                   	pop    edi
c00033d8:	5d                   	pop    ebp
c00033d9:	c3                   	ret    
c00033da:	b8 02 00 00 00       	mov    eax,0x2
c00033df:	c3                   	ret    

c00033e0 <create_chain>:
c00033e0:	55                   	push   ebp
c00033e1:	89 c5                	mov    ebp,eax
c00033e3:	57                   	push   edi
c00033e4:	89 d7                	mov    edi,edx
c00033e6:	56                   	push   esi
c00033e7:	53                   	push   ebx
c00033e8:	83 ec 1c             	sub    esp,0x1c
c00033eb:	85 d2                	test   edx,edx
c00033ed:	8b 30                	mov    esi,DWORD PTR [eax]
c00033ef:	75 0e                	jne    c00033ff <create_chain+0x1f>
c00033f1:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c00033f4:	85 c9                	test   ecx,ecx
c00033f6:	74 34                	je     c000342c <create_chain+0x4c>
c00033f8:	39 4e 18             	cmp    DWORD PTR [esi+0x18],ecx
c00033fb:	77 34                	ja     c0003431 <create_chain+0x51>
c00033fd:	eb 2d                	jmp    c000342c <create_chain+0x4c>
c00033ff:	89 f0                	mov    eax,esi
c0003401:	e8 0e fe ff ff       	call   c0003214 <get_fat.isra.2>
c0003406:	89 c3                	mov    ebx,eax
c0003408:	83 f8 01             	cmp    eax,0x1
c000340b:	77 0a                	ja     c0003417 <create_chain+0x37>
c000340d:	bb 01 00 00 00       	mov    ebx,0x1
c0003412:	e9 fe 00 00 00       	jmp    c0003515 <create_chain+0x135>
c0003417:	83 f8 ff             	cmp    eax,0xffffffff
c000341a:	0f 84 f2 00 00 00    	je     c0003512 <create_chain+0x132>
c0003420:	89 f9                	mov    ecx,edi
c0003422:	39 46 18             	cmp    DWORD PTR [esi+0x18],eax
c0003425:	76 0a                	jbe    c0003431 <create_chain+0x51>
c0003427:	e9 e9 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000342c:	b9 01 00 00 00       	mov    ecx,0x1
c0003431:	83 7e 14 00          	cmp    DWORD PTR [esi+0x14],0x0
c0003435:	75 07                	jne    c000343e <create_chain+0x5e>
c0003437:	31 db                	xor    ebx,ebx
c0003439:	e9 d7 00 00 00       	jmp    c0003515 <create_chain+0x135>
c000343e:	39 f9                	cmp    ecx,edi
c0003440:	75 46                	jne    c0003488 <create_chain+0xa8>
c0003442:	8d 59 01             	lea    ebx,[ecx+0x1]
c0003445:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c0003448:	77 05                	ja     c000344f <create_chain+0x6f>
c000344a:	bb 02 00 00 00       	mov    ebx,0x2
c000344f:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003453:	89 da                	mov    edx,ebx
c0003455:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0003458:	e8 b7 fd ff ff       	call   c0003214 <get_fat.isra.2>
c000345d:	83 f8 01             	cmp    eax,0x1
c0003460:	74 ab                	je     c000340d <create_chain+0x2d>
c0003462:	83 f8 ff             	cmp    eax,0xffffffff
c0003465:	0f 84 a7 00 00 00    	je     c0003512 <create_chain+0x132>
c000346b:	85 c0                	test   eax,eax
c000346d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003471:	74 11                	je     c0003484 <create_chain+0xa4>
c0003473:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0003476:	83 f8 01             	cmp    eax,0x1
c0003479:	76 0d                	jbe    c0003488 <create_chain+0xa8>
c000347b:	3b 46 18             	cmp    eax,DWORD PTR [esi+0x18]
c000347e:	73 08                	jae    c0003488 <create_chain+0xa8>
c0003480:	89 c1                	mov    ecx,eax
c0003482:	eb 04                	jmp    c0003488 <create_chain+0xa8>
c0003484:	85 db                	test   ebx,ebx
c0003486:	75 3d                	jne    c00034c5 <create_chain+0xe5>
c0003488:	89 cb                	mov    ebx,ecx
c000348a:	43                   	inc    ebx
c000348b:	39 5e 18             	cmp    DWORD PTR [esi+0x18],ebx
c000348e:	77 0a                	ja     c000349a <create_chain+0xba>
c0003490:	83 f9 01             	cmp    ecx,0x1
c0003493:	76 a2                	jbe    c0003437 <create_chain+0x57>
c0003495:	bb 02 00 00 00       	mov    ebx,0x2
c000349a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000349e:	89 da                	mov    edx,ebx
c00034a0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00034a3:	e8 6c fd ff ff       	call   c0003214 <get_fat.isra.2>
c00034a8:	85 c0                	test   eax,eax
c00034aa:	74 19                	je     c00034c5 <create_chain+0xe5>
c00034ac:	83 f8 01             	cmp    eax,0x1
c00034af:	0f 84 58 ff ff ff    	je     c000340d <create_chain+0x2d>
c00034b5:	40                   	inc    eax
c00034b6:	74 5a                	je     c0003512 <create_chain+0x132>
c00034b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00034bc:	39 cb                	cmp    ebx,ecx
c00034be:	75 ca                	jne    c000348a <create_chain+0xaa>
c00034c0:	e9 72 ff ff ff       	jmp    c0003437 <create_chain+0x57>
c00034c5:	83 c9 ff             	or     ecx,0xffffffff
c00034c8:	89 da                	mov    edx,ebx
c00034ca:	89 f0                	mov    eax,esi
c00034cc:	e8 b1 f2 ff ff       	call   c0002782 <put_fat>
c00034d1:	85 c0                	test   eax,eax
c00034d3:	75 36                	jne    c000350b <create_chain+0x12b>
c00034d5:	85 ff                	test   edi,edi
c00034d7:	75 16                	jne    c00034ef <create_chain+0x10f>
c00034d9:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00034dc:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c00034df:	89 5e 10             	mov    DWORD PTR [esi+0x10],ebx
c00034e2:	8d 57 fe             	lea    edx,[edi-0x2]
c00034e5:	39 d0                	cmp    eax,edx
c00034e7:	77 17                	ja     c0003500 <create_chain+0x120>
c00034e9:	48                   	dec    eax
c00034ea:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00034ed:	eb 11                	jmp    c0003500 <create_chain+0x120>
c00034ef:	89 d9                	mov    ecx,ebx
c00034f1:	89 fa                	mov    edx,edi
c00034f3:	89 f0                	mov    eax,esi
c00034f5:	e8 88 f2 ff ff       	call   c0002782 <put_fat>
c00034fa:	85 c0                	test   eax,eax
c00034fc:	74 db                	je     c00034d9 <create_chain+0xf9>
c00034fe:	eb 0b                	jmp    c000350b <create_chain+0x12b>
c0003500:	8a 46 04             	mov    al,BYTE PTR [esi+0x4]
c0003503:	83 c8 01             	or     eax,0x1
c0003506:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c0003509:	eb 0a                	jmp    c0003515 <create_chain+0x135>
c000350b:	48                   	dec    eax
c000350c:	0f 85 fb fe ff ff    	jne    c000340d <create_chain+0x2d>
c0003512:	83 cb ff             	or     ebx,0xffffffff
c0003515:	83 c4 1c             	add    esp,0x1c
c0003518:	89 d8                	mov    eax,ebx
c000351a:	5b                   	pop    ebx
c000351b:	5e                   	pop    esi
c000351c:	5f                   	pop    edi
c000351d:	5d                   	pop    ebp
c000351e:	c3                   	ret    

c000351f <remove_chain>:
c000351f:	55                   	push   ebp
c0003520:	57                   	push   edi
c0003521:	56                   	push   esi
c0003522:	89 d6                	mov    esi,edx
c0003524:	53                   	push   ebx
c0003525:	83 ec 0c             	sub    esp,0xc
c0003528:	83 fa 01             	cmp    edx,0x1
c000352b:	8b 18                	mov    ebx,DWORD PTR [eax]
c000352d:	76 6a                	jbe    c0003599 <remove_chain+0x7a>
c000352f:	39 53 18             	cmp    DWORD PTR [ebx+0x18],edx
c0003532:	76 65                	jbe    c0003599 <remove_chain+0x7a>
c0003534:	89 c5                	mov    ebp,eax
c0003536:	89 ca                	mov    edx,ecx
c0003538:	85 c9                	test   ecx,ecx
c000353a:	74 0e                	je     c000354a <remove_chain+0x2b>
c000353c:	83 c9 ff             	or     ecx,0xffffffff
c000353f:	89 d8                	mov    eax,ebx
c0003541:	e8 3c f2 ff ff       	call   c0002782 <put_fat>
c0003546:	85 c0                	test   eax,eax
c0003548:	75 5b                	jne    c00035a5 <remove_chain+0x86>
c000354a:	89 f2                	mov    edx,esi
c000354c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000354f:	e8 c0 fc ff ff       	call   c0003214 <get_fat.isra.2>
c0003554:	89 c7                	mov    edi,eax
c0003556:	85 c0                	test   eax,eax
c0003558:	75 04                	jne    c000355e <remove_chain+0x3f>
c000355a:	31 c0                	xor    eax,eax
c000355c:	eb 47                	jmp    c00035a5 <remove_chain+0x86>
c000355e:	83 f8 01             	cmp    eax,0x1
c0003561:	74 36                	je     c0003599 <remove_chain+0x7a>
c0003563:	83 f8 ff             	cmp    eax,0xffffffff
c0003566:	74 38                	je     c00035a0 <remove_chain+0x81>
c0003568:	31 c9                	xor    ecx,ecx
c000356a:	89 f2                	mov    edx,esi
c000356c:	89 d8                	mov    eax,ebx
c000356e:	e8 0f f2 ff ff       	call   c0002782 <put_fat>
c0003573:	85 c0                	test   eax,eax
c0003575:	75 2e                	jne    c00035a5 <remove_chain+0x86>
c0003577:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000357a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000357d:	8d 4a fe             	lea    ecx,[edx-0x2]
c0003580:	39 c8                	cmp    eax,ecx
c0003582:	73 0d                	jae    c0003591 <remove_chain+0x72>
c0003584:	40                   	inc    eax
c0003585:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0003588:	8a 43 04             	mov    al,BYTE PTR [ebx+0x4]
c000358b:	83 c8 01             	or     eax,0x1
c000358e:	88 43 04             	mov    BYTE PTR [ebx+0x4],al
c0003591:	89 fe                	mov    esi,edi
c0003593:	39 fa                	cmp    edx,edi
c0003595:	77 b3                	ja     c000354a <remove_chain+0x2b>
c0003597:	eb c1                	jmp    c000355a <remove_chain+0x3b>
c0003599:	b8 02 00 00 00       	mov    eax,0x2
c000359e:	eb 05                	jmp    c00035a5 <remove_chain+0x86>
c00035a0:	b8 01 00 00 00       	mov    eax,0x1
c00035a5:	83 c4 0c             	add    esp,0xc
c00035a8:	5b                   	pop    ebx
c00035a9:	5e                   	pop    esi
c00035aa:	5f                   	pop    edi
c00035ab:	5d                   	pop    ebp
c00035ac:	c3                   	ret    

c00035ad <dir_next>:
c00035ad:	55                   	push   ebp
c00035ae:	57                   	push   edi
c00035af:	56                   	push   esi
c00035b0:	53                   	push   ebx
c00035b1:	83 ec 1c             	sub    esp,0x1c
c00035b4:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c00035b7:	8b 28                	mov    ebp,DWORD PTR [eax]
c00035b9:	83 c7 20             	add    edi,0x20
c00035bc:	81 ff ff ff 1f 00    	cmp    edi,0x1fffff
c00035c2:	76 07                	jbe    c00035cb <dir_next+0x1e>
c00035c4:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00035cb:	8b 70 18             	mov    esi,DWORD PTR [eax+0x18]
c00035ce:	b9 04 00 00 00       	mov    ecx,0x4
c00035d3:	85 f6                	test   esi,esi
c00035d5:	0f 84 cd 00 00 00    	je     c00036a8 <dir_next+0xfb>
c00035db:	89 c3                	mov    ebx,eax
c00035dd:	89 d1                	mov    ecx,edx
c00035df:	89 f8                	mov    eax,edi
c00035e1:	25 ff 01 00 00       	and    eax,0x1ff
c00035e6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00035ea:	0f 85 a8 00 00 00    	jne    c0003698 <dir_next+0xeb>
c00035f0:	46                   	inc    esi
c00035f1:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00035f4:	89 73 18             	mov    DWORD PTR [ebx+0x18],esi
c00035f7:	85 d2                	test   edx,edx
c00035f9:	75 22                	jne    c000361d <dir_next+0x70>
c00035fb:	89 fa                	mov    edx,edi
c00035fd:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003601:	c1 ea 05             	shr    edx,0x5
c0003604:	39 c2                	cmp    edx,eax
c0003606:	0f 82 8c 00 00 00    	jb     c0003698 <dir_next+0xeb>
c000360c:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003613:	b9 04 00 00 00       	mov    ecx,0x4
c0003618:	e9 8b 00 00 00       	jmp    c00036a8 <dir_next+0xfb>
c000361d:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003621:	89 fe                	mov    esi,edi
c0003623:	48                   	dec    eax
c0003624:	c1 ee 09             	shr    esi,0x9
c0003627:	85 f0                	test   eax,esi
c0003629:	75 6d                	jne    c0003698 <dir_next+0xeb>
c000362b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000362f:	89 e8                	mov    eax,ebp
c0003631:	e8 de fb ff ff       	call   c0003214 <get_fat.isra.2>
c0003636:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000363a:	89 c6                	mov    esi,eax
c000363c:	83 f8 01             	cmp    eax,0x1
c000363f:	77 07                	ja     c0003648 <dir_next+0x9b>
c0003641:	b9 02 00 00 00       	mov    ecx,0x2
c0003646:	eb 60                	jmp    c00036a8 <dir_next+0xfb>
c0003648:	83 f8 ff             	cmp    eax,0xffffffff
c000364b:	75 07                	jne    c0003654 <dir_next+0xa7>
c000364d:	b9 01 00 00 00       	mov    ecx,0x1
c0003652:	eb 54                	jmp    c00036a8 <dir_next+0xfb>
c0003654:	39 45 18             	cmp    DWORD PTR [ebp+0x18],eax
c0003657:	77 30                	ja     c0003689 <dir_next+0xdc>
c0003659:	85 c9                	test   ecx,ecx
c000365b:	74 af                	je     c000360c <dir_next+0x5f>
c000365d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0003660:	89 d8                	mov    eax,ebx
c0003662:	e8 79 fd ff ff       	call   c00033e0 <create_chain>
c0003667:	b9 07 00 00 00       	mov    ecx,0x7
c000366c:	89 c6                	mov    esi,eax
c000366e:	85 c0                	test   eax,eax
c0003670:	74 36                	je     c00036a8 <dir_next+0xfb>
c0003672:	83 f8 01             	cmp    eax,0x1
c0003675:	74 ca                	je     c0003641 <dir_next+0x94>
c0003677:	83 f8 ff             	cmp    eax,0xffffffff
c000367a:	74 d1                	je     c000364d <dir_next+0xa0>
c000367c:	89 c2                	mov    edx,eax
c000367e:	89 e8                	mov    eax,ebp
c0003680:	e8 54 f2 ff ff       	call   c00028d9 <dir_clear>
c0003685:	85 c0                	test   eax,eax
c0003687:	75 c4                	jne    c000364d <dir_next+0xa0>
c0003689:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c000368c:	89 f2                	mov    edx,esi
c000368e:	89 e8                	mov    eax,ebp
c0003690:	e8 99 e9 ff ff       	call   c000202e <clst2sect>
c0003695:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0003698:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000369c:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c000369f:	8d 44 05 34          	lea    eax,[ebp+eax*1+0x34]
c00036a3:	31 c9                	xor    ecx,ecx
c00036a5:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c00036a8:	83 c4 1c             	add    esp,0x1c
c00036ab:	89 c8                	mov    eax,ecx
c00036ad:	5b                   	pop    ebx
c00036ae:	5e                   	pop    esi
c00036af:	5f                   	pop    edi
c00036b0:	5d                   	pop    ebp
c00036b1:	c3                   	ret    

c00036b2 <dir_alloc>:
c00036b2:	55                   	push   ebp
c00036b3:	89 c5                	mov    ebp,eax
c00036b5:	57                   	push   edi
c00036b6:	89 d7                	mov    edi,edx
c00036b8:	56                   	push   esi
c00036b9:	31 d2                	xor    edx,edx
c00036bb:	53                   	push   ebx
c00036bc:	83 ec 0c             	sub    esp,0xc
c00036bf:	8b 30                	mov    esi,DWORD PTR [eax]
c00036c1:	e8 52 fc ff ff       	call   c0003318 <dir_sdi>
c00036c6:	85 c0                	test   eax,eax
c00036c8:	75 3b                	jne    c0003705 <dir_alloc+0x53>
c00036ca:	31 db                	xor    ebx,ebx
c00036cc:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c00036cf:	89 f0                	mov    eax,esi
c00036d1:	e8 68 ec ff ff       	call   c000233e <move_window>
c00036d6:	85 c0                	test   eax,eax
c00036d8:	75 2b                	jne    c0003705 <dir_alloc+0x53>
c00036da:	8b 55 1c             	mov    edx,DWORD PTR [ebp+0x1c]
c00036dd:	0f b6 12             	movzx  edx,BYTE PTR [edx]
c00036e0:	85 d2                	test   edx,edx
c00036e2:	74 08                	je     c00036ec <dir_alloc+0x3a>
c00036e4:	81 fa e5 00 00 00    	cmp    edx,0xe5
c00036ea:	75 07                	jne    c00036f3 <dir_alloc+0x41>
c00036ec:	43                   	inc    ebx
c00036ed:	39 fb                	cmp    ebx,edi
c00036ef:	75 04                	jne    c00036f5 <dir_alloc+0x43>
c00036f1:	eb 1c                	jmp    c000370f <dir_alloc+0x5d>
c00036f3:	31 db                	xor    ebx,ebx
c00036f5:	ba 01 00 00 00       	mov    edx,0x1
c00036fa:	89 e8                	mov    eax,ebp
c00036fc:	e8 ac fe ff ff       	call   c00035ad <dir_next>
c0003701:	85 c0                	test   eax,eax
c0003703:	74 c7                	je     c00036cc <dir_alloc+0x1a>
c0003705:	83 f8 04             	cmp    eax,0x4
c0003708:	75 05                	jne    c000370f <dir_alloc+0x5d>
c000370a:	b8 07 00 00 00       	mov    eax,0x7
c000370f:	83 c4 0c             	add    esp,0xc
c0003712:	5b                   	pop    ebx
c0003713:	5e                   	pop    esi
c0003714:	5f                   	pop    edi
c0003715:	5d                   	pop    ebp
c0003716:	c3                   	ret    

c0003717 <dir_read>:
c0003717:	55                   	push   ebp
c0003718:	57                   	push   edi
c0003719:	bf ff ff ff ff       	mov    edi,0xffffffff
c000371e:	56                   	push   esi
c000371f:	be 04 00 00 00       	mov    esi,0x4
c0003724:	53                   	push   ebx
c0003725:	89 c3                	mov    ebx,eax
c0003727:	83 ec 1c             	sub    esp,0x1c
c000372a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000372e:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003730:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c0003735:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003738:	85 d2                	test   edx,edx
c000373a:	0f 84 e3 00 00 00    	je     c0003823 <dir_read+0x10c>
c0003740:	89 e8                	mov    eax,ebp
c0003742:	e8 f7 eb ff ff       	call   c000233e <move_window>
c0003747:	89 c6                	mov    esi,eax
c0003749:	85 c0                	test   eax,eax
c000374b:	0f 85 dd 00 00 00    	jne    c000382e <dir_read+0x117>
c0003751:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003754:	0f b6 02             	movzx  eax,BYTE PTR [edx]
c0003757:	88 04 24             	mov    BYTE PTR [esp],al
c000375a:	85 c0                	test   eax,eax
c000375c:	0f 84 c7 00 00 00    	je     c0003829 <dir_read+0x112>
c0003762:	8a 4a 0b             	mov    cl,BYTE PTR [edx+0xb]
c0003765:	83 e1 3f             	and    ecx,0x3f
c0003768:	83 f8 2e             	cmp    eax,0x2e
c000376b:	88 4b 06             	mov    BYTE PTR [ebx+0x6],cl
c000376e:	0f 84 95 00 00 00    	je     c0003809 <dir_read+0xf2>
c0003774:	3d e5 00 00 00       	cmp    eax,0xe5
c0003779:	0f 84 8a 00 00 00    	je     c0003809 <dir_read+0xf2>
c000377f:	0f b6 c9             	movzx  ecx,cl
c0003782:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003786:	83 e1 df             	and    ecx,0xffffffdf
c0003789:	83 f9 08             	cmp    ecx,0x8
c000378c:	0f 94 c1             	sete   cl
c000378f:	0f b6 c9             	movzx  ecx,cl
c0003792:	3b 4c 24 0c          	cmp    ecx,DWORD PTR [esp+0xc]
c0003796:	75 71                	jne    c0003809 <dir_read+0xf2>
c0003798:	83 7c 24 08 0f       	cmp    DWORD PTR [esp+0x8],0xf
c000379d:	75 4a                	jne    c00037e9 <dir_read+0xd2>
c000379f:	f6 04 24 40          	test   BYTE PTR [esp],0x40
c00037a3:	74 16                	je     c00037bb <dir_read+0xa4>
c00037a5:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c00037a8:	81 24 24 bf 00 00 00 	and    DWORD PTR [esp],0xbf
c00037af:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c00037b3:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00037b6:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00037b9:	eb 0e                	jmp    c00037c9 <dir_read+0xb2>
c00037bb:	89 f9                	mov    ecx,edi
c00037bd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037c2:	0f b6 c9             	movzx  ecx,cl
c00037c5:	39 c1                	cmp    ecx,eax
c00037c7:	75 45                	jne    c000380e <dir_read+0xf7>
c00037c9:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c00037cd:	bf ff ff ff ff       	mov    edi,0xffffffff
c00037d2:	3a 42 0d             	cmp    al,BYTE PTR [edx+0xd]
c00037d5:	75 37                	jne    c000380e <dir_read+0xf7>
c00037d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00037da:	e8 6c e8 ff ff       	call   c000204b <pick_lfn>
c00037df:	85 c0                	test   eax,eax
c00037e1:	74 2b                	je     c000380e <dir_read+0xf7>
c00037e3:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00037e6:	4f                   	dec    edi
c00037e7:	eb 25                	jmp    c000380e <dir_read+0xf7>
c00037e9:	89 f8                	mov    eax,edi
c00037eb:	84 c0                	test   al,al
c00037ed:	75 11                	jne    c0003800 <dir_read+0xe9>
c00037ef:	89 d0                	mov    eax,edx
c00037f1:	e8 32 ea ff ff       	call   c0002228 <sum_sfn>
c00037f6:	38 44 24 07          	cmp    BYTE PTR [esp+0x7],al
c00037fa:	75 04                	jne    c0003800 <dir_read+0xe9>
c00037fc:	31 f6                	xor    esi,esi
c00037fe:	eb 35                	jmp    c0003835 <dir_read+0x11e>
c0003800:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c0003807:	eb 2c                	jmp    c0003835 <dir_read+0x11e>
c0003809:	bf ff ff ff ff       	mov    edi,0xffffffff
c000380e:	31 d2                	xor    edx,edx
c0003810:	89 d8                	mov    eax,ebx
c0003812:	e8 96 fd ff ff       	call   c00035ad <dir_next>
c0003817:	89 c6                	mov    esi,eax
c0003819:	85 c0                	test   eax,eax
c000381b:	0f 84 14 ff ff ff    	je     c0003735 <dir_read+0x1e>
c0003821:	eb 0b                	jmp    c000382e <dir_read+0x117>
c0003823:	85 f6                	test   esi,esi
c0003825:	74 d5                	je     c00037fc <dir_read+0xe5>
c0003827:	eb 05                	jmp    c000382e <dir_read+0x117>
c0003829:	be 04 00 00 00       	mov    esi,0x4
c000382e:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0003835:	83 c4 1c             	add    esp,0x1c
c0003838:	89 f0                	mov    eax,esi
c000383a:	5b                   	pop    ebx
c000383b:	5e                   	pop    esi
c000383c:	5f                   	pop    edi
c000383d:	5d                   	pop    ebp
c000383e:	c3                   	ret    

c000383f <dir_remove>:
c000383f:	57                   	push   edi
c0003840:	56                   	push   esi
c0003841:	53                   	push   ebx
c0003842:	89 c3                	mov    ebx,eax
c0003844:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0003847:	8b 30                	mov    esi,DWORD PTR [eax]
c0003849:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000384c:	83 fa ff             	cmp    edx,0xffffffff
c000384f:	74 09                	je     c000385a <dir_remove+0x1b>
c0003851:	e8 c2 fa ff ff       	call   c0003318 <dir_sdi>
c0003856:	85 c0                	test   eax,eax
c0003858:	75 34                	jne    c000388e <dir_remove+0x4f>
c000385a:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000385d:	89 f0                	mov    eax,esi
c000385f:	e8 da ea ff ff       	call   c000233e <move_window>
c0003864:	85 c0                	test   eax,eax
c0003866:	75 1c                	jne    c0003884 <dir_remove+0x45>
c0003868:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c000386b:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c000386e:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003872:	39 7b 10             	cmp    DWORD PTR [ebx+0x10],edi
c0003875:	73 17                	jae    c000388e <dir_remove+0x4f>
c0003877:	31 d2                	xor    edx,edx
c0003879:	89 d8                	mov    eax,ebx
c000387b:	e8 2d fd ff ff       	call   c00035ad <dir_next>
c0003880:	85 c0                	test   eax,eax
c0003882:	74 d6                	je     c000385a <dir_remove+0x1b>
c0003884:	83 f8 04             	cmp    eax,0x4
c0003887:	75 05                	jne    c000388e <dir_remove+0x4f>
c0003889:	b8 02 00 00 00       	mov    eax,0x2
c000388e:	5b                   	pop    ebx
c000388f:	5e                   	pop    esi
c0003890:	5f                   	pop    edi
c0003891:	c3                   	ret    

c0003892 <dir_find>:
c0003892:	55                   	push   ebp
c0003893:	31 d2                	xor    edx,edx
c0003895:	57                   	push   edi
c0003896:	56                   	push   esi
c0003897:	53                   	push   ebx
c0003898:	89 c3                	mov    ebx,eax
c000389a:	83 ec 1c             	sub    esp,0x1c
c000389d:	8b 00                	mov    eax,DWORD PTR [eax]
c000389f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00038a3:	89 d8                	mov    eax,ebx
c00038a5:	e8 6e fa ff ff       	call   c0003318 <dir_sdi>
c00038aa:	89 c6                	mov    esi,eax
c00038ac:	85 c0                	test   eax,eax
c00038ae:	0f 85 1d 01 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038b4:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00038bb:	c6 44 24 0b ff       	mov    BYTE PTR [esp+0xb],0xff
c00038c0:	bf ff ff ff ff       	mov    edi,0xffffffff
c00038c5:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00038c8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00038cc:	e8 6d ea ff ff       	call   c000233e <move_window>
c00038d1:	89 c6                	mov    esi,eax
c00038d3:	85 c0                	test   eax,eax
c00038d5:	0f 85 f6 00 00 00    	jne    c00039d1 <dir_find+0x13f>
c00038db:	8b 6b 1c             	mov    ebp,DWORD PTR [ebx+0x1c]
c00038de:	0f b6 4d 00          	movzx  ecx,BYTE PTR [ebp+0x0]
c00038e2:	88 4c 24 04          	mov    BYTE PTR [esp+0x4],cl
c00038e6:	85 c9                	test   ecx,ecx
c00038e8:	0f 84 de 00 00 00    	je     c00039cc <dir_find+0x13a>
c00038ee:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00038f1:	89 d0                	mov    eax,edx
c00038f3:	83 e0 3f             	and    eax,0x3f
c00038f6:	81 f9 e5 00 00 00    	cmp    ecx,0xe5
c00038fc:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00038ff:	0f 84 a6 00 00 00    	je     c00039ab <dir_find+0x119>
c0003905:	80 e2 08             	and    dl,0x8
c0003908:	0f b6 c0             	movzx  eax,al
c000390b:	74 0b                	je     c0003918 <dir_find+0x86>
c000390d:	83 f8 0f             	cmp    eax,0xf
c0003910:	0f 85 95 00 00 00    	jne    c00039ab <dir_find+0x119>
c0003916:	eb 05                	jmp    c000391d <dir_find+0x8b>
c0003918:	83 f8 0f             	cmp    eax,0xf
c000391b:	75 62                	jne    c000397f <dir_find+0xed>
c000391d:	f6 43 2b 40          	test   BYTE PTR [ebx+0x2b],0x40
c0003921:	0f 85 90 00 00 00    	jne    c00039b7 <dir_find+0x125>
c0003927:	f6 44 24 04 40       	test   BYTE PTR [esp+0x4],0x40
c000392c:	74 17                	je     c0003945 <dir_find+0xb3>
c000392e:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c0003931:	81 64 24 04 bf 00 00 00 	and    DWORD PTR [esp+0x4],0xbf
c0003939:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000393d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003940:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0003943:	eb 13                	jmp    c0003958 <dir_find+0xc6>
c0003945:	89 f8                	mov    eax,edi
c0003947:	bf ff ff ff ff       	mov    edi,0xffffffff
c000394c:	0f b6 d0             	movzx  edx,al
c000394f:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0003954:	39 c2                	cmp    edx,eax
c0003956:	75 5f                	jne    c00039b7 <dir_find+0x125>
c0003958:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000395c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0003961:	3a 45 0d             	cmp    al,BYTE PTR [ebp+0xd]
c0003964:	75 51                	jne    c00039b7 <dir_find+0x125>
c0003966:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000396a:	89 ea                	mov    edx,ebp
c000396c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000396f:	e8 37 f3 ff ff       	call   c0002cab <cmp_lfn>
c0003974:	85 c0                	test   eax,eax
c0003976:	74 3f                	je     c00039b7 <dir_find+0x125>
c0003978:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000397c:	4f                   	dec    edi
c000397d:	eb 38                	jmp    c00039b7 <dir_find+0x125>
c000397f:	89 f8                	mov    eax,edi
c0003981:	84 c0                	test   al,al
c0003983:	75 0d                	jne    c0003992 <dir_find+0x100>
c0003985:	89 e8                	mov    eax,ebp
c0003987:	e8 9c e8 ff ff       	call   c0002228 <sum_sfn>
c000398c:	38 44 24 0b          	cmp    BYTE PTR [esp+0xb],al
c0003990:	74 3f                	je     c00039d1 <dir_find+0x13f>
c0003992:	f6 43 2b 01          	test   BYTE PTR [ebx+0x2b],0x1
c0003996:	75 13                	jne    c00039ab <dir_find+0x119>
c0003998:	8d 53 20             	lea    edx,[ebx+0x20]
c000399b:	b9 0b 00 00 00       	mov    ecx,0xb
c00039a0:	89 e8                	mov    eax,ebp
c00039a2:	e8 7c e4 ff ff       	call   c0001e23 <mem_cmp>
c00039a7:	85 c0                	test   eax,eax
c00039a9:	74 26                	je     c00039d1 <dir_find+0x13f>
c00039ab:	c7 43 2c ff ff ff ff 	mov    DWORD PTR [ebx+0x2c],0xffffffff
c00039b2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00039b7:	31 d2                	xor    edx,edx
c00039b9:	89 d8                	mov    eax,ebx
c00039bb:	e8 ed fb ff ff       	call   c00035ad <dir_next>
c00039c0:	89 c6                	mov    esi,eax
c00039c2:	85 c0                	test   eax,eax
c00039c4:	0f 84 fb fe ff ff    	je     c00038c5 <dir_find+0x33>
c00039ca:	eb 05                	jmp    c00039d1 <dir_find+0x13f>
c00039cc:	be 04 00 00 00       	mov    esi,0x4
c00039d1:	83 c4 1c             	add    esp,0x1c
c00039d4:	89 f0                	mov    eax,esi
c00039d6:	5b                   	pop    ebx
c00039d7:	5e                   	pop    esi
c00039d8:	5f                   	pop    edi
c00039d9:	5d                   	pop    ebp
c00039da:	c3                   	ret    

c00039db <follow_path>:
c00039db:	56                   	push   esi
c00039dc:	53                   	push   ebx
c00039dd:	89 c3                	mov    ebx,eax
c00039df:	83 ec 14             	sub    esp,0x14
c00039e2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039e6:	8b 30                	mov    esi,DWORD PTR [eax]
c00039e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00039ec:	0f be 10             	movsx  edx,BYTE PTR [eax]
c00039ef:	83 fa 5c             	cmp    edx,0x5c
c00039f2:	75 07                	jne    c00039fb <follow_path+0x20>
c00039f4:	40                   	inc    eax
c00039f5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00039f9:	eb ed                	jmp    c00039e8 <follow_path+0xd>
c00039fb:	83 fa 2f             	cmp    edx,0x2f
c00039fe:	74 f4                	je     c00039f4 <follow_path+0x19>
c0003a00:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0003a07:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0003a0a:	77 3e                	ja     c0003a4a <follow_path+0x6f>
c0003a0c:	c6 43 2b 80          	mov    BYTE PTR [ebx+0x2b],0x80
c0003a10:	31 d2                	xor    edx,edx
c0003a12:	89 d8                	mov    eax,ebx
c0003a14:	e8 ff f8 ff ff       	call   c0003318 <dir_sdi>
c0003a19:	eb 4f                	jmp    c0003a6a <follow_path+0x8f>
c0003a1b:	89 d8                	mov    eax,ebx
c0003a1d:	e8 70 fe ff ff       	call   c0003892 <dir_find>
c0003a22:	8a 53 2b             	mov    dl,BYTE PTR [ebx+0x2b]
c0003a25:	85 c0                	test   eax,eax
c0003a27:	75 32                	jne    c0003a5b <follow_path+0x80>
c0003a29:	80 e2 04             	and    dl,0x4
c0003a2c:	75 3c                	jne    c0003a6a <follow_path+0x8f>
c0003a2e:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0003a32:	74 31                	je     c0003a65 <follow_path+0x8a>
c0003a34:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0003a37:	25 ff 01 00 00       	and    eax,0x1ff
c0003a3c:	8d 54 06 34          	lea    edx,[esi+eax*1+0x34]
c0003a40:	8a 06                	mov    al,BYTE PTR [esi]
c0003a42:	e8 7c f7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003a47:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003a4a:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0003a4e:	89 d8                	mov    eax,ebx
c0003a50:	e8 7f ef ff ff       	call   c00029d4 <create_name>
c0003a55:	85 c0                	test   eax,eax
c0003a57:	74 c2                	je     c0003a1b <follow_path+0x40>
c0003a59:	eb 0f                	jmp    c0003a6a <follow_path+0x8f>
c0003a5b:	83 f8 04             	cmp    eax,0x4
c0003a5e:	75 0a                	jne    c0003a6a <follow_path+0x8f>
c0003a60:	80 e2 04             	and    dl,0x4
c0003a63:	75 05                	jne    c0003a6a <follow_path+0x8f>
c0003a65:	b8 05 00 00 00       	mov    eax,0x5
c0003a6a:	83 c4 14             	add    esp,0x14
c0003a6d:	5b                   	pop    ebx
c0003a6e:	5e                   	pop    esi
c0003a6f:	c3                   	ret    

c0003a70 <dir_register>:
c0003a70:	55                   	push   ebp
c0003a71:	57                   	push   edi
c0003a72:	56                   	push   esi
c0003a73:	be 06 00 00 00       	mov    esi,0x6
c0003a78:	53                   	push   ebx
c0003a79:	83 ec 2c             	sub    esp,0x2c
c0003a7c:	8a 50 2b             	mov    dl,BYTE PTR [eax+0x2b]
c0003a7f:	80 e2 a0             	and    dl,0xa0
c0003a82:	0f 85 66 01 00 00    	jne    c0003bee <dir_register+0x17e>
c0003a88:	8b 38                	mov    edi,DWORD PTR [eax]
c0003a8a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003a92:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c0003a95:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003a99:	66 83 3c 4a 00       	cmp    WORD PTR [edx+ecx*2],0x0
c0003a9e:	74 06                	je     c0003aa6 <dir_register+0x36>
c0003aa0:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0003aa4:	eb ef                	jmp    c0003a95 <dir_register+0x25>
c0003aa6:	89 c3                	mov    ebx,eax
c0003aa8:	b9 0c 00 00 00       	mov    ecx,0xc
c0003aad:	8d 40 20             	lea    eax,[eax+0x20]
c0003ab0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003ab4:	89 c2                	mov    edx,eax
c0003ab6:	8d 44 24 14          	lea    eax,[esp+0x14]
c0003aba:	e8 44 e3 ff ff       	call   c0001e03 <mem_cpy>
c0003abf:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c0003ac4:	74 48                	je     c0003b0e <dir_register+0x9e>
c0003ac6:	c6 43 2b 40          	mov    BYTE PTR [ebx+0x2b],0x40
c0003aca:	bd 01 00 00 00       	mov    ebp,0x1
c0003acf:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c0003ad2:	55                   	push   ebp
c0003ad3:	8d 54 24 18          	lea    edx,[esp+0x18]
c0003ad7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003adb:	e8 86 e6 ff ff       	call   c0002166 <gen_numname>
c0003ae0:	58                   	pop    eax
c0003ae1:	89 d8                	mov    eax,ebx
c0003ae3:	e8 aa fd ff ff       	call   c0003892 <dir_find>
c0003ae8:	89 c6                	mov    esi,eax
c0003aea:	85 c0                	test   eax,eax
c0003aec:	75 10                	jne    c0003afe <dir_register+0x8e>
c0003aee:	45                   	inc    ebp
c0003aef:	83 fd 64             	cmp    ebp,0x64
c0003af2:	75 db                	jne    c0003acf <dir_register+0x5f>
c0003af4:	be 07 00 00 00       	mov    esi,0x7
c0003af9:	e9 f0 00 00 00       	jmp    c0003bee <dir_register+0x17e>
c0003afe:	83 f8 04             	cmp    eax,0x4
c0003b01:	0f 85 e7 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b07:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0003b0b:	88 43 2b             	mov    BYTE PTR [ebx+0x2b],al
c0003b0e:	bd 01 00 00 00       	mov    ebp,0x1
c0003b13:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c0003b18:	74 13                	je     c0003b2d <dir_register+0xbd>
c0003b1a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003b1e:	b9 0d 00 00 00       	mov    ecx,0xd
c0003b23:	83 c0 0c             	add    eax,0xc
c0003b26:	31 d2                	xor    edx,edx
c0003b28:	f7 f1                	div    ecx
c0003b2a:	8d 68 01             	lea    ebp,[eax+0x1]
c0003b2d:	89 ea                	mov    edx,ebp
c0003b2f:	89 d8                	mov    eax,ebx
c0003b31:	e8 7c fb ff ff       	call   c00036b2 <dir_alloc>
c0003b36:	89 c6                	mov    esi,eax
c0003b38:	85 c0                	test   eax,eax
c0003b3a:	0f 85 ae 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b40:	4d                   	dec    ebp
c0003b41:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c0003b45:	74 67                	je     c0003bae <dir_register+0x13e>
c0003b47:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0003b4a:	89 e8                	mov    eax,ebp
c0003b4c:	c1 e0 05             	shl    eax,0x5
c0003b4f:	29 c2                	sub    edx,eax
c0003b51:	89 d8                	mov    eax,ebx
c0003b53:	e8 c0 f7 ff ff       	call   c0003318 <dir_sdi>
c0003b58:	89 c6                	mov    esi,eax
c0003b5a:	85 c0                	test   eax,eax
c0003b5c:	0f 85 8c 00 00 00    	jne    c0003bee <dir_register+0x17e>
c0003b62:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003b66:	e8 bd e6 ff ff       	call   c0002228 <sum_sfn>
c0003b6b:	0f b6 e8             	movzx  ebp,al
c0003b6e:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003b71:	89 f8                	mov    eax,edi
c0003b73:	e8 c6 e7 ff ff       	call   c000233e <move_window>
c0003b78:	89 c6                	mov    esi,eax
c0003b7a:	85 c0                	test   eax,eax
c0003b7c:	75 70                	jne    c0003bee <dir_register+0x17e>
c0003b7e:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0003b83:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003b86:	83 ec 0c             	sub    esp,0xc
c0003b89:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003b8c:	55                   	push   ebp
c0003b8d:	e8 39 e5 ff ff       	call   c00020cb <put_lfn>
c0003b92:	31 d2                	xor    edx,edx
c0003b94:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003b98:	89 d8                	mov    eax,ebx
c0003b9a:	e8 0e fa ff ff       	call   c00035ad <dir_next>
c0003b9f:	83 c4 10             	add    esp,0x10
c0003ba2:	89 c6                	mov    esi,eax
c0003ba4:	85 c0                	test   eax,eax
c0003ba6:	75 46                	jne    c0003bee <dir_register+0x17e>
c0003ba8:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c0003bac:	75 c0                	jne    c0003b6e <dir_register+0xfe>
c0003bae:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003bb1:	89 f8                	mov    eax,edi
c0003bb3:	e8 86 e7 ff ff       	call   c000233e <move_window>
c0003bb8:	89 c6                	mov    esi,eax
c0003bba:	85 c0                	test   eax,eax
c0003bbc:	75 30                	jne    c0003bee <dir_register+0x17e>
c0003bbe:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bc1:	b9 20 00 00 00       	mov    ecx,0x20
c0003bc6:	31 d2                	xor    edx,edx
c0003bc8:	e8 4b e2 ff ff       	call   c0001e18 <mem_set>
c0003bcd:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0003bd0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003bd4:	b9 0b 00 00 00       	mov    ecx,0xb
c0003bd9:	e8 25 e2 ff ff       	call   c0001e03 <mem_cpy>
c0003bde:	8a 43 2b             	mov    al,BYTE PTR [ebx+0x2b]
c0003be1:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0003be4:	83 e0 18             	and    eax,0x18
c0003be7:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0003bea:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0003bee:	83 c4 2c             	add    esp,0x2c
c0003bf1:	89 f0                	mov    eax,esi
c0003bf3:	5b                   	pop    ebx
c0003bf4:	5e                   	pop    esi
c0003bf5:	5f                   	pop    edi
c0003bf6:	5d                   	pop    ebp
c0003bf7:	c3                   	ret    

c0003bf8 <f_mount>:
c0003bf8:	53                   	push   ebx
c0003bf9:	83 ec 18             	sub    esp,0x18
c0003bfc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0003c00:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0003c04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003c08:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0003c0c:	e8 37 e6 ff ff       	call   c0002248 <get_ldnumber>
c0003c11:	89 c2                	mov    edx,eax
c0003c13:	b8 0b 00 00 00       	mov    eax,0xb
c0003c18:	85 d2                	test   edx,edx
c0003c1a:	78 39                	js     c0003c55 <f_mount+0x5d>
c0003c1c:	8b 04 95 a0 54 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffdab60]
c0003c23:	85 c0                	test   eax,eax
c0003c25:	74 03                	je     c0003c2a <f_mount+0x32>
c0003c27:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c2a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c2e:	85 c0                	test   eax,eax
c0003c30:	74 03                	je     c0003c35 <f_mount+0x3d>
c0003c32:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0003c35:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0003c39:	89 04 95 a0 54 02 c0 	mov    DWORD PTR [edx*4-0x3ffdab60],eax
c0003c40:	31 c0                	xor    eax,eax
c0003c42:	84 db                	test   bl,bl
c0003c44:	74 0f                	je     c0003c55 <f_mount+0x5d>
c0003c46:	31 c9                	xor    ecx,ecx
c0003c48:	8d 54 24 20          	lea    edx,[esp+0x20]
c0003c4c:	8d 44 24 24          	lea    eax,[esp+0x24]
c0003c50:	e8 3c e8 ff ff       	call   c0002491 <mount_volume>
c0003c55:	83 c4 18             	add    esp,0x18
c0003c58:	5b                   	pop    ebx
c0003c59:	c3                   	ret    

c0003c5a <f_open>:
c0003c5a:	55                   	push   ebp
c0003c5b:	b8 09 00 00 00       	mov    eax,0x9
c0003c60:	57                   	push   edi
c0003c61:	56                   	push   esi
c0003c62:	53                   	push   ebx
c0003c63:	83 ec 5c             	sub    esp,0x5c
c0003c66:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c0003c6a:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0003c6e:	85 db                	test   ebx,ebx
c0003c70:	0f 84 9f 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003c76:	89 fd                	mov    ebp,edi
c0003c78:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003c7c:	83 e5 3f             	and    ebp,0x3f
c0003c7f:	89 e8                	mov    eax,ebp
c0003c81:	89 ee                	mov    esi,ebp
c0003c83:	0f b6 c8             	movzx  ecx,al
c0003c86:	8d 44 24 74          	lea    eax,[esp+0x74]
c0003c8a:	e8 02 e8 ff ff       	call   c0002491 <mount_volume>
c0003c8f:	85 c0                	test   eax,eax
c0003c91:	0f 85 78 02 00 00    	jne    c0003f0f <f_open+0x2b5>
c0003c97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003c9b:	83 ec 0c             	sub    esp,0xc
c0003c9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003ca2:	68 00 02 00 00       	push   0x200
c0003ca7:	e8 74 1f 00 00       	call   c0005c20 <ff_memalloc>
c0003cac:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0003cb0:	83 c4 10             	add    esp,0x10
c0003cb3:	b8 11 00 00 00       	mov    eax,0x11
c0003cb8:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0003cbd:	0f 84 52 02 00 00    	je     c0003f15 <f_open+0x2bb>
c0003cc3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003cc7:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003ccb:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0003ccf:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0003cd2:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003cd6:	e8 00 fd ff ff       	call   c00039db <follow_path>
c0003cdb:	85 c0                	test   eax,eax
c0003cdd:	75 0c                	jne    c0003ceb <f_open+0x91>
c0003cdf:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0003ce4:	74 05                	je     c0003ceb <f_open+0x91>
c0003ce6:	b8 06 00 00 00       	mov    eax,0x6
c0003ceb:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0003cf1:	0f 84 d5 00 00 00    	je     c0003dcc <f_open+0x172>
c0003cf7:	85 c0                	test   eax,eax
c0003cf9:	74 21                	je     c0003d1c <f_open+0xc2>
c0003cfb:	83 f8 04             	cmp    eax,0x4
c0003cfe:	0f 85 f0 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d04:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003d08:	e8 63 fd ff ff       	call   c0003a70 <dir_register>
c0003d0d:	85 c0                	test   eax,eax
c0003d0f:	0f 85 df 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d15:	83 cd 08             	or     ebp,0x8
c0003d18:	89 ee                	mov    esi,ebp
c0003d1a:	eb 2c                	jmp    c0003d48 <f_open+0xee>
c0003d1c:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003d20:	b8 07 00 00 00       	mov    eax,0x7
c0003d25:	80 e2 11             	and    dl,0x11
c0003d28:	0f 85 c6 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d2e:	b8 08 00 00 00       	mov    eax,0x8
c0003d33:	f7 c7 04 00 00 00    	test   edi,0x4
c0003d39:	0f 85 b5 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003d3f:	83 e7 08             	and    edi,0x8
c0003d42:	0f 84 b1 00 00 00    	je     c0003df9 <f_open+0x19f>
c0003d48:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0003d4c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d50:	89 ea                	mov    edx,ebp
c0003d52:	8a 00                	mov    al,BYTE PTR [eax]
c0003d54:	e8 6a f4 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003d59:	ba 00 00 21 50       	mov    edx,0x50210000
c0003d5e:	89 c7                	mov    edi,eax
c0003d60:	8d 45 0e             	lea    eax,[ebp+0xe]
c0003d63:	e8 98 e0 ff ff       	call   c0001e00 <st_dword>
c0003d68:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d6c:	31 c9                	xor    ecx,ecx
c0003d6e:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c0003d72:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d76:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0003d7a:	e8 6d f4 ff ff       	call   c00031ec <st_clust.isra.1>
c0003d7f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0003d83:	31 d2                	xor    edx,edx
c0003d85:	83 c0 1c             	add    eax,0x1c
c0003d88:	e8 73 e0 ff ff       	call   c0001e00 <st_dword>
c0003d8d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d91:	85 ff                	test   edi,edi
c0003d93:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003d97:	74 60                	je     c0003df9 <f_open+0x19f>
c0003d99:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003d9d:	31 c9                	xor    ecx,ecx
c0003d9f:	8b 68 30             	mov    ebp,DWORD PTR [eax+0x30]
c0003da2:	89 fa                	mov    edx,edi
c0003da4:	8d 44 24 20          	lea    eax,[esp+0x20]
c0003da8:	e8 72 f7 ff ff       	call   c000351f <remove_chain>
c0003dad:	85 c0                	test   eax,eax
c0003daf:	0f 85 3f 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003db5:	89 ea                	mov    edx,ebp
c0003db7:	4f                   	dec    edi
c0003db8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003dbc:	e8 7d e5 ff ff       	call   c000233e <move_window>
c0003dc1:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003dc5:	85 c0                	test   eax,eax
c0003dc7:	89 7a 10             	mov    DWORD PTR [edx+0x10],edi
c0003dca:	eb 27                	jmp    c0003df3 <f_open+0x199>
c0003dcc:	85 c0                	test   eax,eax
c0003dce:	0f 85 20 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003dd4:	8a 54 24 26          	mov    dl,BYTE PTR [esp+0x26]
c0003dd8:	b8 04 00 00 00       	mov    eax,0x4
c0003ddd:	f6 c2 10             	test   dl,0x10
c0003de0:	0f 85 0e 01 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003de6:	83 e7 02             	and    edi,0x2
c0003de9:	74 0e                	je     c0003df9 <f_open+0x19f>
c0003deb:	b8 07 00 00 00       	mov    eax,0x7
c0003df0:	80 e2 01             	and    dl,0x1
c0003df3:	0f 85 fb 00 00 00    	jne    c0003ef4 <f_open+0x29a>
c0003df9:	f7 c6 08 00 00 00    	test   esi,0x8
c0003dff:	74 03                	je     c0003e04 <f_open+0x1aa>
c0003e01:	83 ce 40             	or     esi,0x40
c0003e04:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0003e08:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0003e0c:	8b 45 30             	mov    eax,DWORD PTR [ebp+0x30]
c0003e0f:	89 fa                	mov    edx,edi
c0003e11:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c0003e14:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0003e17:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0003e1a:	e8 a4 f3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0003e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003e22:	8d 47 1c             	lea    eax,[edi+0x1c]
c0003e25:	8d 7b 28             	lea    edi,[ebx+0x28]
c0003e28:	e8 b7 df ff ff       	call   c0001de4 <ld_dword>
c0003e2d:	89 2b                	mov    DWORD PTR [ebx],ebp
c0003e2f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0003e32:	31 d2                	xor    edx,edx
c0003e34:	66 8b 45 06          	mov    ax,WORD PTR [ebp+0x6]
c0003e38:	b9 00 02 00 00       	mov    ecx,0x200
c0003e3d:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0003e41:	c6 43 11 00          	mov    BYTE PTR [ebx+0x11],0x0
c0003e45:	89 f0                	mov    eax,esi
c0003e47:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0003e4e:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0003e51:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0003e58:	89 f8                	mov    eax,edi
c0003e5a:	e8 b9 df ff ff       	call   c0001e18 <mem_set>
c0003e5f:	83 e6 20             	and    esi,0x20
c0003e62:	75 07                	jne    c0003e6b <f_open+0x211>
c0003e64:	31 c0                	xor    eax,eax
c0003e66:	e9 89 00 00 00       	jmp    c0003ef4 <f_open+0x29a>
c0003e6b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0003e6e:	85 ed                	test   ebp,ebp
c0003e70:	74 f2                	je     c0003e64 <f_open+0x20a>
c0003e72:	89 6b 14             	mov    DWORD PTR [ebx+0x14],ebp
c0003e75:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0003e79:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0003e7c:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0003e80:	c1 e6 09             	shl    esi,0x9
c0003e83:	39 ee                	cmp    esi,ebp
c0003e85:	73 1c                	jae    c0003ea3 <f_open+0x249>
c0003e87:	8b 03                	mov    eax,DWORD PTR [ebx]
c0003e89:	29 f5                	sub    ebp,esi
c0003e8b:	e8 84 f3 ff ff       	call   c0003214 <get_fat.isra.2>
c0003e90:	89 c2                	mov    edx,eax
c0003e92:	83 f8 01             	cmp    eax,0x1
c0003e95:	76 10                	jbe    c0003ea7 <f_open+0x24d>
c0003e97:	83 f8 ff             	cmp    eax,0xffffffff
c0003e9a:	75 e7                	jne    c0003e83 <f_open+0x229>
c0003e9c:	b8 01 00 00 00       	mov    eax,0x1
c0003ea1:	eb 09                	jmp    c0003eac <f_open+0x252>
c0003ea3:	31 c0                	xor    eax,eax
c0003ea5:	eb 05                	jmp    c0003eac <f_open+0x252>
c0003ea7:	b8 02 00 00 00       	mov    eax,0x2
c0003eac:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0003eaf:	85 c0                	test   eax,eax
c0003eb1:	75 41                	jne    c0003ef4 <f_open+0x29a>
c0003eb3:	f7 c5 ff 01 00 00    	test   ebp,0x1ff
c0003eb9:	74 a9                	je     c0003e64 <f_open+0x20a>
c0003ebb:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0003ebf:	89 f0                	mov    eax,esi
c0003ec1:	e8 68 e1 ff ff       	call   c000202e <clst2sect>
c0003ec6:	89 c2                	mov    edx,eax
c0003ec8:	b8 02 00 00 00       	mov    eax,0x2
c0003ecd:	85 d2                	test   edx,edx
c0003ecf:	74 23                	je     c0003ef4 <f_open+0x29a>
c0003ed1:	c1 ed 09             	shr    ebp,0x9
c0003ed4:	8d 44 15 00          	lea    eax,[ebp+edx*1+0x0]
c0003ed8:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0003edb:	6a 01                	push   0x1
c0003edd:	50                   	push   eax
c0003ede:	57                   	push   edi
c0003edf:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003ee3:	50                   	push   eax
c0003ee4:	e8 a3 de ff ff       	call   c0001d8c <disk_read>
c0003ee9:	83 c4 10             	add    esp,0x10
c0003eec:	85 c0                	test   eax,eax
c0003eee:	0f 95 c0             	setne  al
c0003ef1:	0f b6 c0             	movzx  eax,al
c0003ef4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0003ef8:	83 ec 0c             	sub    esp,0xc
c0003efb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0003eff:	e8 34 1d 00 00       	call   c0005c38 <ff_memfree>
c0003f04:	83 c4 10             	add    esp,0x10
c0003f07:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0003f0b:	85 c0                	test   eax,eax
c0003f0d:	74 06                	je     c0003f15 <f_open+0x2bb>
c0003f0f:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0003f15:	83 c4 5c             	add    esp,0x5c
c0003f18:	5b                   	pop    ebx
c0003f19:	5e                   	pop    esi
c0003f1a:	5f                   	pop    edi
c0003f1b:	5d                   	pop    ebp
c0003f1c:	c3                   	ret    

c0003f1d <f_read>:
c0003f1d:	55                   	push   ebp
c0003f1e:	57                   	push   edi
c0003f1f:	56                   	push   esi
c0003f20:	53                   	push   ebx
c0003f21:	83 ec 2c             	sub    esp,0x2c
c0003f24:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0003f28:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0003f2c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0003f32:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0003f36:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0003f3a:	89 d8                	mov    eax,ebx
c0003f3c:	e8 54 e3 ff ff       	call   c0002295 <validate>
c0003f41:	89 c5                	mov    ebp,eax
c0003f43:	85 c0                	test   eax,eax
c0003f45:	0f 85 c7 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f4b:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0003f4f:	85 ed                	test   ebp,ebp
c0003f51:	0f 85 bb 01 00 00    	jne    c0004112 <f_read+0x1f5>
c0003f57:	f6 43 10 01          	test   BYTE PTR [ebx+0x10],0x1
c0003f5b:	0f 84 ac 01 00 00    	je     c000410d <f_read+0x1f0>
c0003f61:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0003f64:	2b 43 14             	sub    eax,DWORD PTR [ebx+0x14]
c0003f67:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0003f6b:	39 f0                	cmp    eax,esi
c0003f6d:	0f 86 b0 00 00 00    	jbe    c0004023 <f_read+0x106>
c0003f73:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0003f77:	e9 a7 00 00 00       	jmp    c0004023 <f_read+0x106>
c0003f7c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0003f7f:	a9 ff 01 00 00       	test   eax,0x1ff
c0003f84:	0f 85 56 01 00 00    	jne    c00040e0 <f_read+0x1c3>
c0003f8a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0003f8e:	0f b7 7a 0a          	movzx  edi,WORD PTR [edx+0xa]
c0003f92:	89 c2                	mov    edx,eax
c0003f94:	4f                   	dec    edi
c0003f95:	c1 ea 09             	shr    edx,0x9
c0003f98:	21 d7                	and    edi,edx
c0003f9a:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0003f9e:	0f 84 8f 00 00 00    	je     c0004033 <f_read+0x116>
c0003fa4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003fa8:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0003fab:	89 c8                	mov    eax,ecx
c0003fad:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0003fb1:	e8 78 e0 ff ff       	call   c000202e <clst2sect>
c0003fb6:	85 c0                	test   eax,eax
c0003fb8:	0f 84 8d 00 00 00    	je     c000404b <f_read+0x12e>
c0003fbe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003fc2:	81 7c 24 04 ff 01 00 00 	cmp    DWORD PTR [esp+0x4],0x1ff
c0003fca:	8d 3c 01             	lea    edi,[ecx+eax*1]
c0003fcd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003fd1:	0f 86 bf 00 00 00    	jbe    c0004096 <f_read+0x179>
c0003fd7:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0003fdb:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0003fdf:	c1 ee 09             	shr    esi,0x9
c0003fe2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe6:	01 f2                	add    edx,esi
c0003fe8:	39 c2                	cmp    edx,eax
c0003fea:	76 06                	jbe    c0003ff2 <f_read+0xd5>
c0003fec:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0003ff0:	89 c6                	mov    esi,eax
c0003ff2:	56                   	push   esi
c0003ff3:	57                   	push   edi
c0003ff4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0003ff8:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0003ffc:	50                   	push   eax
c0003ffd:	e8 8a dd ff ff       	call   c0001d8c <disk_read>
c0004002:	83 c4 10             	add    esp,0x10
c0004005:	85 c0                	test   eax,eax
c0004007:	75 55                	jne    c000405e <f_read+0x141>
c0004009:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c000400d:	75 65                	jne    c0004074 <f_read+0x157>
c000400f:	c1 e6 09             	shl    esi,0x9
c0004012:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004016:	29 74 24 04          	sub    DWORD PTR [esp+0x4],esi
c000401a:	01 30                	add    DWORD PTR [eax],esi
c000401c:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004020:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c0004023:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0004028:	0f 85 4e ff ff ff    	jne    c0003f7c <f_read+0x5f>
c000402e:	e9 df 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004033:	85 c0                	test   eax,eax
c0004035:	75 05                	jne    c000403c <f_read+0x11f>
c0004037:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000403a:	eb 0a                	jmp    c0004046 <f_read+0x129>
c000403c:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000403f:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004041:	e8 ce f1 ff ff       	call   c0003214 <get_fat.isra.2>
c0004046:	83 f8 01             	cmp    eax,0x1
c0004049:	77 0e                	ja     c0004059 <f_read+0x13c>
c000404b:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c000404f:	bd 02 00 00 00       	mov    ebp,0x2
c0004054:	e9 b9 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c0004059:	83 f8 ff             	cmp    eax,0xffffffff
c000405c:	75 0e                	jne    c000406c <f_read+0x14f>
c000405e:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c0004062:	bd 01 00 00 00       	mov    ebp,0x1
c0004067:	e9 a6 00 00 00       	jmp    c0004112 <f_read+0x1f5>
c000406c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000406f:	e9 30 ff ff ff       	jmp    c0003fa4 <f_read+0x87>
c0004074:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004077:	29 f8                	sub    eax,edi
c0004079:	39 f0                	cmp    eax,esi
c000407b:	73 92                	jae    c000400f <f_read+0xf2>
c000407d:	c1 e0 09             	shl    eax,0x9
c0004080:	8d 53 28             	lea    edx,[ebx+0x28]
c0004083:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c0004087:	b9 00 02 00 00       	mov    ecx,0x200
c000408c:	e8 72 dd ff ff       	call   c0001e03 <mem_cpy>
c0004091:	e9 79 ff ff ff       	jmp    c000400f <f_read+0xf2>
c0004096:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0004099:	39 f8                	cmp    eax,edi
c000409b:	74 40                	je     c00040dd <f_read+0x1c0>
c000409d:	8d 73 28             	lea    esi,[ebx+0x28]
c00040a0:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00040a4:	74 1e                	je     c00040c4 <f_read+0x1a7>
c00040a6:	6a 01                	push   0x1
c00040a8:	50                   	push   eax
c00040a9:	56                   	push   esi
c00040aa:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00040ae:	50                   	push   eax
c00040af:	e8 ee dc ff ff       	call   c0001da2 <disk_write>
c00040b4:	83 c4 10             	add    esp,0x10
c00040b7:	85 c0                	test   eax,eax
c00040b9:	75 a3                	jne    c000405e <f_read+0x141>
c00040bb:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00040be:	83 e0 7f             	and    eax,0x7f
c00040c1:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00040c4:	6a 01                	push   0x1
c00040c6:	57                   	push   edi
c00040c7:	56                   	push   esi
c00040c8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00040cc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00040d0:	50                   	push   eax
c00040d1:	e8 b6 dc ff ff       	call   c0001d8c <disk_read>
c00040d6:	83 c4 10             	add    esp,0x10
c00040d9:	85 c0                	test   eax,eax
c00040db:	75 81                	jne    c000405e <f_read+0x141>
c00040dd:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c00040e0:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00040e3:	ba 00 02 00 00       	mov    edx,0x200
c00040e8:	25 ff 01 00 00       	and    eax,0x1ff
c00040ed:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00040f1:	29 c2                	sub    edx,eax
c00040f3:	39 d6                	cmp    esi,edx
c00040f5:	76 02                	jbe    c00040f9 <f_read+0x1dc>
c00040f7:	89 d6                	mov    esi,edx
c00040f9:	8d 54 03 28          	lea    edx,[ebx+eax*1+0x28]
c00040fd:	89 f1                	mov    ecx,esi
c00040ff:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0004103:	e8 fb dc ff ff       	call   c0001e03 <mem_cpy>
c0004108:	e9 05 ff ff ff       	jmp    c0004012 <f_read+0xf5>
c000410d:	bd 07 00 00 00       	mov    ebp,0x7
c0004112:	83 c4 2c             	add    esp,0x2c
c0004115:	89 e8                	mov    eax,ebp
c0004117:	5b                   	pop    ebx
c0004118:	5e                   	pop    esi
c0004119:	5f                   	pop    edi
c000411a:	5d                   	pop    ebp
c000411b:	c3                   	ret    

c000411c <f_write>:
c000411c:	55                   	push   ebp
c000411d:	57                   	push   edi
c000411e:	56                   	push   esi
c000411f:	53                   	push   ebx
c0004120:	83 ec 2c             	sub    esp,0x2c
c0004123:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004127:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000412b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0004131:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 59 e1 ff ff       	call   c0002295 <validate>
c000413c:	89 c5                	mov    ebp,eax
c000413e:	85 c0                	test   eax,eax
c0004140:	0f 85 14 02 00 00    	jne    c000435a <f_write+0x23e>
c0004146:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c000414a:	85 ed                	test   ebp,ebp
c000414c:	0f 85 08 02 00 00    	jne    c000435a <f_write+0x23e>
c0004152:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004156:	0f 84 f9 01 00 00    	je     c0004355 <f_write+0x239>
c000415c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000415f:	89 c7                	mov    edi,eax
c0004161:	03 7c 24 48          	add    edi,DWORD PTR [esp+0x48]
c0004165:	0f 83 ef 00 00 00    	jae    c000425a <f_write+0x13e>
c000416b:	f7 d0                	not    eax
c000416d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0004171:	e9 e4 00 00 00       	jmp    c000425a <f_write+0x13e>
c0004176:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004179:	f7 c2 ff 01 00 00    	test   edx,0x1ff
c000417f:	0f 85 9a 01 00 00    	jne    c000431f <f_write+0x203>
c0004185:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004189:	89 d1                	mov    ecx,edx
c000418b:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c000418f:	c1 e9 09             	shr    ecx,0x9
c0004192:	48                   	dec    eax
c0004193:	21 c8                	and    eax,ecx
c0004195:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0004199:	0f 84 c8 00 00 00    	je     c0004267 <f_write+0x14b>
c000419f:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00041a3:	0f 85 22 01 00 00    	jne    c00042cb <f_write+0x1af>
c00041a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00041ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00041b0:	89 c8                	mov    eax,ecx
c00041b2:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00041b6:	e8 73 de ff ff       	call   c000202e <clst2sect>
c00041bb:	85 c0                	test   eax,eax
c00041bd:	0f 84 d2 00 00 00    	je     c0004295 <f_write+0x179>
c00041c3:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00041c7:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00041cb:	01 c7                	add    edi,eax
c00041cd:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c00041d5:	0f 86 1c 01 00 00    	jbe    c00042f7 <f_write+0x1db>
c00041db:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00041df:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c00041e3:	c1 ee 09             	shr    esi,0x9
c00041e6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00041ea:	01 f2                	add    edx,esi
c00041ec:	39 c2                	cmp    edx,eax
c00041ee:	76 06                	jbe    c00041f6 <f_write+0xda>
c00041f0:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c00041f4:	89 c6                	mov    esi,eax
c00041f6:	56                   	push   esi
c00041f7:	57                   	push   edi
c00041f8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00041fc:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0004200:	50                   	push   eax
c0004201:	e8 9c db ff ff       	call   c0001da2 <disk_write>
c0004206:	83 c4 10             	add    esp,0x10
c0004209:	85 c0                	test   eax,eax
c000420b:	0f 85 97 00 00 00    	jne    c00042a8 <f_write+0x18c>
c0004211:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004214:	29 fa                	sub    edx,edi
c0004216:	39 f2                	cmp    edx,esi
c0004218:	73 1d                	jae    c0004237 <f_write+0x11b>
c000421a:	8d 43 28             	lea    eax,[ebx+0x28]
c000421d:	c1 e2 09             	shl    edx,0x9
c0004220:	b9 00 02 00 00       	mov    ecx,0x200
c0004225:	03 54 24 44          	add    edx,DWORD PTR [esp+0x44]
c0004229:	e8 d5 db ff ff       	call   c0001e03 <mem_cpy>
c000422e:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004231:	83 e0 7f             	and    eax,0x7f
c0004234:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004237:	c1 e6 09             	shl    esi,0x9
c000423a:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c000423e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0004242:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c0004246:	01 30                	add    DWORD PTR [eax],esi
c0004248:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c000424b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000424e:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0004251:	39 f0                	cmp    eax,esi
c0004253:	73 02                	jae    c0004257 <f_write+0x13b>
c0004255:	89 f0                	mov    eax,esi
c0004257:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000425a:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c000425f:	0f 85 11 ff ff ff    	jne    c0004176 <f_write+0x5a>
c0004265:	eb 1b                	jmp    c0004282 <f_write+0x166>
c0004267:	85 d2                	test   edx,edx
c0004269:	75 09                	jne    c0004274 <f_write+0x158>
c000426b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000426e:	85 c0                	test   eax,eax
c0004270:	75 1e                	jne    c0004290 <f_write+0x174>
c0004272:	eb 03                	jmp    c0004277 <f_write+0x15b>
c0004274:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c0004277:	89 d8                	mov    eax,ebx
c0004279:	e8 62 f1 ff ff       	call   c00033e0 <create_chain>
c000427e:	85 c0                	test   eax,eax
c0004280:	75 0e                	jne    c0004290 <f_write+0x174>
c0004282:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c0004285:	83 c8 40             	or     eax,0x40
c0004288:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000428b:	e9 ca 00 00 00       	jmp    c000435a <f_write+0x23e>
c0004290:	83 f8 01             	cmp    eax,0x1
c0004293:	75 0e                	jne    c00042a3 <f_write+0x187>
c0004295:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c0004299:	bd 02 00 00 00       	mov    ebp,0x2
c000429e:	e9 b7 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042a3:	83 f8 ff             	cmp    eax,0xffffffff
c00042a6:	75 0e                	jne    c00042b6 <f_write+0x19a>
c00042a8:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c00042ac:	bd 01 00 00 00       	mov    ebp,0x1
c00042b1:	e9 a4 00 00 00       	jmp    c000435a <f_write+0x23e>
c00042b6:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00042b9:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00042bd:	0f 85 dc fe ff ff    	jne    c000419f <f_write+0x83>
c00042c3:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00042c6:	e9 d4 fe ff ff       	jmp    c000419f <f_write+0x83>
c00042cb:	6a 01                	push   0x1
c00042cd:	8d 43 28             	lea    eax,[ebx+0x28]
c00042d0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00042d3:	50                   	push   eax
c00042d4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00042d8:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00042dc:	50                   	push   eax
c00042dd:	e8 c0 da ff ff       	call   c0001da2 <disk_write>
c00042e2:	83 c4 10             	add    esp,0x10
c00042e5:	85 c0                	test   eax,eax
c00042e7:	75 bf                	jne    c00042a8 <f_write+0x18c>
c00042e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00042ec:	83 e0 7f             	and    eax,0x7f
c00042ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00042f2:	e9 b2 fe ff ff       	jmp    c00041a9 <f_write+0x8d>
c00042f7:	39 7b 1c             	cmp    DWORD PTR [ebx+0x1c],edi
c00042fa:	74 20                	je     c000431c <f_write+0x200>
c00042fc:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00042ff:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0004302:	76 18                	jbe    c000431c <f_write+0x200>
c0004304:	6a 01                	push   0x1
c0004306:	8d 43 28             	lea    eax,[ebx+0x28]
c0004309:	57                   	push   edi
c000430a:	50                   	push   eax
c000430b:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000430f:	50                   	push   eax
c0004310:	e8 77 da ff ff       	call   c0001d8c <disk_read>
c0004315:	83 c4 10             	add    esp,0x10
c0004318:	85 c0                	test   eax,eax
c000431a:	75 8c                	jne    c00042a8 <f_write+0x18c>
c000431c:	89 7b 1c             	mov    DWORD PTR [ebx+0x1c],edi
c000431f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004322:	ba 00 02 00 00       	mov    edx,0x200
c0004327:	25 ff 01 00 00       	and    eax,0x1ff
c000432c:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0004330:	29 c2                	sub    edx,eax
c0004332:	39 d6                	cmp    esi,edx
c0004334:	76 02                	jbe    c0004338 <f_write+0x21c>
c0004336:	89 d6                	mov    esi,edx
c0004338:	8d 44 03 28          	lea    eax,[ebx+eax*1+0x28]
c000433c:	89 f1                	mov    ecx,esi
c000433e:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0004342:	e8 bc da ff ff       	call   c0001e03 <mem_cpy>
c0004347:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000434a:	83 c8 80             	or     eax,0xffffff80
c000434d:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c0004350:	e9 e5 fe ff ff       	jmp    c000423a <f_write+0x11e>
c0004355:	bd 07 00 00 00       	mov    ebp,0x7
c000435a:	83 c4 2c             	add    esp,0x2c
c000435d:	89 e8                	mov    eax,ebp
c000435f:	5b                   	pop    ebx
c0004360:	5e                   	pop    esi
c0004361:	5f                   	pop    edi
c0004362:	5d                   	pop    ebp
c0004363:	c3                   	ret    

c0004364 <f_sync>:
c0004364:	56                   	push   esi
c0004365:	53                   	push   ebx
c0004366:	83 ec 14             	sub    esp,0x14
c0004369:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000436d:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004371:	89 d8                	mov    eax,ebx
c0004373:	e8 1d df ff ff       	call   c0002295 <validate>
c0004378:	85 c0                	test   eax,eax
c000437a:	0f 85 a3 00 00 00    	jne    c0004423 <f_sync+0xbf>
c0004380:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004383:	f6 c2 40             	test   dl,0x40
c0004386:	0f 84 97 00 00 00    	je     c0004423 <f_sync+0xbf>
c000438c:	80 e2 80             	and    dl,0x80
c000438f:	74 2e                	je     c00043bf <f_sync+0x5b>
c0004391:	6a 01                	push   0x1
c0004393:	8d 43 28             	lea    eax,[ebx+0x28]
c0004396:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0004399:	50                   	push   eax
c000439a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000439e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00043a2:	50                   	push   eax
c00043a3:	e8 fa d9 ff ff       	call   c0001da2 <disk_write>
c00043a8:	83 c4 10             	add    esp,0x10
c00043ab:	89 c2                	mov    edx,eax
c00043ad:	b8 01 00 00 00       	mov    eax,0x1
c00043b2:	85 d2                	test   edx,edx
c00043b4:	75 6d                	jne    c0004423 <f_sync+0xbf>
c00043b6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00043b9:	83 e0 7f             	and    eax,0x7f
c00043bc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00043bf:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00043c2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00043c6:	e8 73 df ff ff       	call   c000233e <move_window>
c00043cb:	85 c0                	test   eax,eax
c00043cd:	75 54                	jne    c0004423 <f_sync+0xbf>
c00043cf:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00043d2:	8a 46 0b             	mov    al,BYTE PTR [esi+0xb]
c00043d5:	89 f2                	mov    edx,esi
c00043d7:	83 c8 20             	or     eax,0x20
c00043da:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c00043dd:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00043e0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00043e2:	e8 05 ee ff ff       	call   c00031ec <st_clust.isra.1>
c00043e7:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043ea:	8d 46 1c             	lea    eax,[esi+0x1c]
c00043ed:	e8 0e da ff ff       	call   c0001e00 <st_dword>
c00043f2:	8d 46 16             	lea    eax,[esi+0x16]
c00043f5:	ba 00 00 21 50       	mov    edx,0x50210000
c00043fa:	e8 01 da ff ff       	call   c0001e00 <st_dword>
c00043ff:	31 d2                	xor    edx,edx
c0004401:	8d 46 12             	lea    eax,[esi+0x12]
c0004404:	e8 f3 d9 ff ff       	call   c0001dfc <st_word>
c0004409:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000440d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004415:	e8 5b e9 ff ff       	call   c0002d75 <sync_fs>
c000441a:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c000441d:	83 e2 bf             	and    edx,0xffffffbf
c0004420:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c0004423:	83 c4 14             	add    esp,0x14
c0004426:	5b                   	pop    ebx
c0004427:	5e                   	pop    esi
c0004428:	c3                   	ret    

c0004429 <f_close>:
c0004429:	53                   	push   ebx
c000442a:	83 ec 24             	sub    esp,0x24
c000442d:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0004431:	53                   	push   ebx
c0004432:	e8 2d ff ff ff       	call   c0004364 <f_sync>
c0004437:	83 c4 10             	add    esp,0x10
c000443a:	85 c0                	test   eax,eax
c000443c:	75 15                	jne    c0004453 <f_close+0x2a>
c000443e:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004442:	89 d8                	mov    eax,ebx
c0004444:	e8 4c de ff ff       	call   c0002295 <validate>
c0004449:	85 c0                	test   eax,eax
c000444b:	75 06                	jne    c0004453 <f_close+0x2a>
c000444d:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0004453:	83 c4 18             	add    esp,0x18
c0004456:	5b                   	pop    ebx
c0004457:	c3                   	ret    

c0004458 <f_lseek>:
c0004458:	55                   	push   ebp
c0004459:	57                   	push   edi
c000445a:	56                   	push   esi
c000445b:	53                   	push   ebx
c000445c:	83 ec 2c             	sub    esp,0x2c
c000445f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0004463:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0004467:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000446b:	89 d8                	mov    eax,ebx
c000446d:	e8 23 de ff ff       	call   c0002295 <validate>
c0004472:	89 c5                	mov    ebp,eax
c0004474:	85 c0                	test   eax,eax
c0004476:	0f 85 83 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c000447c:	0f b6 6b 11          	movzx  ebp,BYTE PTR [ebx+0x11]
c0004480:	85 ed                	test   ebp,ebp
c0004482:	0f 85 77 01 00 00    	jne    c00045ff <f_lseek+0x1a7>
c0004488:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000448b:	39 f0                	cmp    eax,esi
c000448d:	73 08                	jae    c0004497 <f_lseek+0x3f>
c000448f:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004493:	75 02                	jne    c0004497 <f_lseek+0x3f>
c0004495:	89 c6                	mov    esi,eax
c0004497:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000449a:	85 f6                	test   esi,esi
c000449c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00044a3:	75 07                	jne    c00044ac <f_lseek+0x54>
c00044a5:	31 f6                	xor    esi,esi
c00044a7:	e9 e2 00 00 00       	jmp    c000458e <f_lseek+0x136>
c00044ac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00044b0:	0f b7 78 0a          	movzx  edi,WORD PTR [eax+0xa]
c00044b4:	c1 e7 09             	shl    edi,0x9
c00044b7:	85 c9                	test   ecx,ecx
c00044b9:	74 28                	je     c00044e3 <f_lseek+0x8b>
c00044bb:	49                   	dec    ecx
c00044bc:	31 d2                	xor    edx,edx
c00044be:	8d 46 ff             	lea    eax,[esi-0x1]
c00044c1:	f7 f7                	div    edi
c00044c3:	31 d2                	xor    edx,edx
c00044c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00044c9:	89 c8                	mov    eax,ecx
c00044cb:	f7 f7                	div    edi
c00044cd:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c00044d1:	72 10                	jb     c00044e3 <f_lseek+0x8b>
c00044d3:	89 f8                	mov    eax,edi
c00044d5:	f7 d8                	neg    eax
c00044d7:	21 c1                	and    ecx,eax
c00044d9:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00044dc:	89 4b 14             	mov    DWORD PTR [ebx+0x14],ecx
c00044df:	29 ce                	sub    esi,ecx
c00044e1:	eb 3c                	jmp    c000451f <f_lseek+0xc7>
c00044e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00044e6:	85 c0                	test   eax,eax
c00044e8:	75 32                	jne    c000451c <f_lseek+0xc4>
c00044ea:	31 d2                	xor    edx,edx
c00044ec:	89 d8                	mov    eax,ebx
c00044ee:	e8 ed ee ff ff       	call   c00033e0 <create_chain>
c00044f3:	83 f8 01             	cmp    eax,0x1
c00044f6:	75 0e                	jne    c0004506 <f_lseek+0xae>
c00044f8:	c6 43 11 02          	mov    BYTE PTR [ebx+0x11],0x2
c00044fc:	bd 02 00 00 00       	mov    ebp,0x2
c0004501:	e9 f9 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004506:	83 f8 ff             	cmp    eax,0xffffffff
c0004509:	75 0e                	jne    c0004519 <f_lseek+0xc1>
c000450b:	c6 43 11 01          	mov    BYTE PTR [ebx+0x11],0x1
c000450f:	bd 01 00 00 00       	mov    ebp,0x1
c0004514:	e9 e6 00 00 00       	jmp    c00045ff <f_lseek+0x1a7>
c0004519:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000451c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000451f:	85 c0                	test   eax,eax
c0004521:	74 82                	je     c00044a5 <f_lseek+0x4d>
c0004523:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0004526:	39 fe                	cmp    esi,edi
c0004528:	76 3d                	jbe    c0004567 <f_lseek+0x10f>
c000452a:	01 fa                	add    edx,edi
c000452c:	29 fe                	sub    esi,edi
c000452e:	89 53 14             	mov    DWORD PTR [ebx+0x14],edx
c0004531:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c0004535:	89 c2                	mov    edx,eax
c0004537:	74 0d                	je     c0004546 <f_lseek+0xee>
c0004539:	89 d8                	mov    eax,ebx
c000453b:	e8 a0 ee ff ff       	call   c00033e0 <create_chain>
c0004540:	85 c0                	test   eax,eax
c0004542:	75 09                	jne    c000454d <f_lseek+0xf5>
c0004544:	eb 1f                	jmp    c0004565 <f_lseek+0x10d>
c0004546:	8b 03                	mov    eax,DWORD PTR [ebx]
c0004548:	e8 c7 ec ff ff       	call   c0003214 <get_fat.isra.2>
c000454d:	83 f8 ff             	cmp    eax,0xffffffff
c0004550:	74 b9                	je     c000450b <f_lseek+0xb3>
c0004552:	83 f8 01             	cmp    eax,0x1
c0004555:	76 a1                	jbe    c00044f8 <f_lseek+0xa0>
c0004557:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000455b:	39 42 18             	cmp    DWORD PTR [edx+0x18],eax
c000455e:	76 98                	jbe    c00044f8 <f_lseek+0xa0>
c0004560:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0004563:	eb be                	jmp    c0004523 <f_lseek+0xcb>
c0004565:	31 f6                	xor    esi,esi
c0004567:	01 73 14             	add    DWORD PTR [ebx+0x14],esi
c000456a:	f7 c6 ff 01 00 00    	test   esi,0x1ff
c0004570:	0f 84 2f ff ff ff    	je     c00044a5 <f_lseek+0x4d>
c0004576:	89 c2                	mov    edx,eax
c0004578:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000457c:	e8 ad da ff ff       	call   c000202e <clst2sect>
c0004581:	85 c0                	test   eax,eax
c0004583:	0f 84 6f ff ff ff    	je     c00044f8 <f_lseek+0xa0>
c0004589:	c1 ee 09             	shr    esi,0x9
c000458c:	01 c6                	add    esi,eax
c000458e:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004591:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0004594:	76 0c                	jbe    c00045a2 <f_lseek+0x14a>
c0004596:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c0004599:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000459c:	83 ca 40             	or     edx,0x40
c000459f:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00045a2:	a9 ff 01 00 00       	test   eax,0x1ff
c00045a7:	74 56                	je     c00045ff <f_lseek+0x1a7>
c00045a9:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00045ac:	39 f0                	cmp    eax,esi
c00045ae:	74 4f                	je     c00045ff <f_lseek+0x1a7>
c00045b0:	8d 7b 28             	lea    edi,[ebx+0x28]
c00045b3:	f6 43 10 80          	test   BYTE PTR [ebx+0x10],0x80
c00045b7:	74 26                	je     c00045df <f_lseek+0x187>
c00045b9:	6a 01                	push   0x1
c00045bb:	50                   	push   eax
c00045bc:	57                   	push   edi
c00045bd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045c1:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045c5:	50                   	push   eax
c00045c6:	e8 d7 d7 ff ff       	call   c0001da2 <disk_write>
c00045cb:	83 c4 10             	add    esp,0x10
c00045ce:	85 c0                	test   eax,eax
c00045d0:	0f 85 35 ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045d6:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00045d9:	83 e0 7f             	and    eax,0x7f
c00045dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00045df:	6a 01                	push   0x1
c00045e1:	56                   	push   esi
c00045e2:	57                   	push   edi
c00045e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00045e7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00045eb:	50                   	push   eax
c00045ec:	e8 9b d7 ff ff       	call   c0001d8c <disk_read>
c00045f1:	83 c4 10             	add    esp,0x10
c00045f4:	85 c0                	test   eax,eax
c00045f6:	0f 85 0f ff ff ff    	jne    c000450b <f_lseek+0xb3>
c00045fc:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00045ff:	83 c4 2c             	add    esp,0x2c
c0004602:	89 e8                	mov    eax,ebp
c0004604:	5b                   	pop    ebx
c0004605:	5e                   	pop    esi
c0004606:	5f                   	pop    edi
c0004607:	5d                   	pop    ebp
c0004608:	c3                   	ret    

c0004609 <f_opendir>:
c0004609:	56                   	push   esi
c000460a:	b8 09 00 00 00       	mov    eax,0x9
c000460f:	53                   	push   ebx
c0004610:	83 ec 24             	sub    esp,0x24
c0004613:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004617:	85 db                	test   ebx,ebx
c0004619:	0f 84 af 00 00 00    	je     c00046ce <f_opendir+0xc5>
c000461f:	31 c9                	xor    ecx,ecx
c0004621:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004625:	8d 44 24 34          	lea    eax,[esp+0x34]
c0004629:	e8 63 de ff ff       	call   c0002491 <mount_volume>
c000462e:	85 c0                	test   eax,eax
c0004630:	0f 85 92 00 00 00    	jne    c00046c8 <f_opendir+0xbf>
c0004636:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000463a:	83 ec 0c             	sub    esp,0xc
c000463d:	89 03                	mov    DWORD PTR [ebx],eax
c000463f:	68 00 02 00 00       	push   0x200
c0004644:	e8 d7 15 00 00       	call   c0005c20 <ff_memalloc>
c0004649:	83 c4 10             	add    esp,0x10
c000464c:	89 c6                	mov    esi,eax
c000464e:	b8 11 00 00 00       	mov    eax,0x11
c0004653:	85 f6                	test   esi,esi
c0004655:	74 77                	je     c00046ce <f_opendir+0xc5>
c0004657:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000465b:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000465f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004662:	89 d8                	mov    eax,ebx
c0004664:	e8 72 f3 ff ff       	call   c00039db <follow_path>
c0004669:	85 c0                	test   eax,eax
c000466b:	75 37                	jne    c00046a4 <f_opendir+0x9b>
c000466d:	f6 43 2b 80          	test   BYTE PTR [ebx+0x2b],0x80
c0004671:	75 1c                	jne    c000468f <f_opendir+0x86>
c0004673:	b8 05 00 00 00       	mov    eax,0x5
c0004678:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000467c:	74 26                	je     c00046a4 <f_opendir+0x9b>
c000467e:	8b 53 1c             	mov    edx,DWORD PTR [ebx+0x1c]
c0004681:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004685:	8a 00                	mov    al,BYTE PTR [eax]
c0004687:	e8 37 eb ff ff       	call   c00031c3 <ld_clust.isra.0>
c000468c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000468f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004693:	31 d2                	xor    edx,edx
c0004695:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0004699:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c000469d:	89 d8                	mov    eax,ebx
c000469f:	e8 74 ec ff ff       	call   c0003318 <dir_sdi>
c00046a4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00046a8:	83 ec 0c             	sub    esp,0xc
c00046ab:	56                   	push   esi
c00046ac:	e8 87 15 00 00       	call   c0005c38 <ff_memfree>
c00046b1:	83 c4 10             	add    esp,0x10
c00046b4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00046b8:	83 f8 04             	cmp    eax,0x4
c00046bb:	74 06                	je     c00046c3 <f_opendir+0xba>
c00046bd:	85 c0                	test   eax,eax
c00046bf:	74 0d                	je     c00046ce <f_opendir+0xc5>
c00046c1:	eb 05                	jmp    c00046c8 <f_opendir+0xbf>
c00046c3:	b8 05 00 00 00       	mov    eax,0x5
c00046c8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046ce:	83 c4 24             	add    esp,0x24
c00046d1:	5b                   	pop    ebx
c00046d2:	5e                   	pop    esi
c00046d3:	c3                   	ret    

c00046d4 <f_closedir>:
c00046d4:	53                   	push   ebx
c00046d5:	83 ec 18             	sub    esp,0x18
c00046d8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00046dc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00046e0:	89 d8                	mov    eax,ebx
c00046e2:	e8 ae db ff ff       	call   c0002295 <validate>
c00046e7:	85 c0                	test   eax,eax
c00046e9:	75 06                	jne    c00046f1 <f_closedir+0x1d>
c00046eb:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00046f1:	83 c4 18             	add    esp,0x18
c00046f4:	5b                   	pop    ebx
c00046f5:	c3                   	ret    

c00046f6 <f_readdir>:
c00046f6:	57                   	push   edi
c00046f7:	56                   	push   esi
c00046f8:	53                   	push   ebx
c00046f9:	83 ec 20             	sub    esp,0x20
c00046fc:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0004700:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0004704:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004708:	89 d8                	mov    eax,ebx
c000470a:	e8 86 db ff ff       	call   c0002295 <validate>
c000470f:	85 c0                	test   eax,eax
c0004711:	75 6e                	jne    c0004781 <f_readdir+0x8b>
c0004713:	85 ff                	test   edi,edi
c0004715:	75 0b                	jne    c0004722 <f_readdir+0x2c>
c0004717:	31 d2                	xor    edx,edx
c0004719:	89 d8                	mov    eax,ebx
c000471b:	e8 f8 eb ff ff       	call   c0003318 <dir_sdi>
c0004720:	eb 5f                	jmp    c0004781 <f_readdir+0x8b>
c0004722:	83 ec 0c             	sub    esp,0xc
c0004725:	68 00 02 00 00       	push   0x200
c000472a:	e8 f1 14 00 00       	call   c0005c20 <ff_memalloc>
c000472f:	83 c4 10             	add    esp,0x10
c0004732:	89 c6                	mov    esi,eax
c0004734:	b8 11 00 00 00       	mov    eax,0x11
c0004739:	85 f6                	test   esi,esi
c000473b:	74 44                	je     c0004781 <f_readdir+0x8b>
c000473d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004741:	31 d2                	xor    edx,edx
c0004743:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004746:	89 d8                	mov    eax,ebx
c0004748:	e8 ca ef ff ff       	call   c0003717 <dir_read>
c000474d:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0004752:	75 19                	jne    c000476d <f_readdir+0x77>
c0004754:	89 fa                	mov    edx,edi
c0004756:	89 d8                	mov    eax,ebx
c0004758:	e8 70 e8 ff ff       	call   c0002fcd <get_fileinfo>
c000475d:	31 d2                	xor    edx,edx
c000475f:	89 d8                	mov    eax,ebx
c0004761:	e8 47 ee ff ff       	call   c00035ad <dir_next>
c0004766:	83 f8 04             	cmp    eax,0x4
c0004769:	75 02                	jne    c000476d <f_readdir+0x77>
c000476b:	31 c0                	xor    eax,eax
c000476d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004771:	83 ec 0c             	sub    esp,0xc
c0004774:	56                   	push   esi
c0004775:	e8 be 14 00 00       	call   c0005c38 <ff_memfree>
c000477a:	83 c4 10             	add    esp,0x10
c000477d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004781:	83 c4 20             	add    esp,0x20
c0004784:	5b                   	pop    ebx
c0004785:	5e                   	pop    esi
c0004786:	5f                   	pop    edi
c0004787:	c3                   	ret    

c0004788 <f_stat>:
c0004788:	57                   	push   edi
c0004789:	31 c9                	xor    ecx,ecx
c000478b:	56                   	push   esi
c000478c:	53                   	push   ebx
c000478d:	83 ec 30             	sub    esp,0x30
c0004790:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0004794:	89 e2                	mov    edx,esp
c0004796:	8d 44 24 40          	lea    eax,[esp+0x40]
c000479a:	e8 f2 dc ff ff       	call   c0002491 <mount_volume>
c000479f:	89 c3                	mov    ebx,eax
c00047a1:	85 c0                	test   eax,eax
c00047a3:	75 59                	jne    c00047fe <f_stat+0x76>
c00047a5:	83 ec 0c             	sub    esp,0xc
c00047a8:	bb 11 00 00 00       	mov    ebx,0x11
c00047ad:	68 00 02 00 00       	push   0x200
c00047b2:	e8 69 14 00 00       	call   c0005c20 <ff_memalloc>
c00047b7:	83 c4 10             	add    esp,0x10
c00047ba:	89 c6                	mov    esi,eax
c00047bc:	85 c0                	test   eax,eax
c00047be:	74 3e                	je     c00047fe <f_stat+0x76>
c00047c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00047c3:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00047c7:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00047ca:	89 e0                	mov    eax,esp
c00047cc:	e8 0a f2 ff ff       	call   c00039db <follow_path>
c00047d1:	89 c3                	mov    ebx,eax
c00047d3:	85 c0                	test   eax,eax
c00047d5:	75 1b                	jne    c00047f2 <f_stat+0x6a>
c00047d7:	f6 44 24 2b 80       	test   BYTE PTR [esp+0x2b],0x80
c00047dc:	75 0f                	jne    c00047ed <f_stat+0x65>
c00047de:	85 ff                	test   edi,edi
c00047e0:	74 10                	je     c00047f2 <f_stat+0x6a>
c00047e2:	89 fa                	mov    edx,edi
c00047e4:	89 e0                	mov    eax,esp
c00047e6:	e8 e2 e7 ff ff       	call   c0002fcd <get_fileinfo>
c00047eb:	eb 05                	jmp    c00047f2 <f_stat+0x6a>
c00047ed:	bb 06 00 00 00       	mov    ebx,0x6
c00047f2:	83 ec 0c             	sub    esp,0xc
c00047f5:	56                   	push   esi
c00047f6:	e8 3d 14 00 00       	call   c0005c38 <ff_memfree>
c00047fb:	83 c4 10             	add    esp,0x10
c00047fe:	83 c4 30             	add    esp,0x30
c0004801:	89 d8                	mov    eax,ebx
c0004803:	5b                   	pop    ebx
c0004804:	5e                   	pop    esi
c0004805:	5f                   	pop    edi
c0004806:	c3                   	ret    

c0004807 <f_getfree>:
c0004807:	55                   	push   ebp
c0004808:	31 c9                	xor    ecx,ecx
c000480a:	57                   	push   edi
c000480b:	56                   	push   esi
c000480c:	53                   	push   ebx
c000480d:	83 ec 2c             	sub    esp,0x2c
c0004810:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004814:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004818:	e8 74 dc ff ff       	call   c0002491 <mount_volume>
c000481d:	89 c7                	mov    edi,eax
c000481f:	85 c0                	test   eax,eax
c0004821:	0f 85 df 00 00 00    	jne    c0004906 <f_getfree+0xff>
c0004827:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000482b:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000482f:	89 30                	mov    DWORD PTR [eax],esi
c0004831:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0004834:	8b 6e 18             	mov    ebp,DWORD PTR [esi+0x18]
c0004837:	8d 55 fe             	lea    edx,[ebp-0x2]
c000483a:	39 d0                	cmp    eax,edx
c000483c:	77 0b                	ja     c0004849 <f_getfree+0x42>
c000483e:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0004842:	89 01                	mov    DWORD PTR [ecx],eax
c0004844:	e9 bd 00 00 00       	jmp    c0004906 <f_getfree+0xff>
c0004849:	80 3e 01             	cmp    BYTE PTR [esi],0x1
c000484c:	75 29                	jne    c0004877 <f_getfree+0x70>
c000484e:	bd 02 00 00 00       	mov    ebp,0x2
c0004853:	31 db                	xor    ebx,ebx
c0004855:	89 ea                	mov    edx,ebp
c0004857:	89 f0                	mov    eax,esi
c0004859:	e8 b6 e9 ff ff       	call   c0003214 <get_fat.isra.2>
c000485e:	83 f8 ff             	cmp    eax,0xffffffff
c0004861:	74 7d                	je     c00048e0 <f_getfree+0xd9>
c0004863:	83 f8 01             	cmp    eax,0x1
c0004866:	74 7f                	je     c00048e7 <f_getfree+0xe0>
c0004868:	83 d3 00             	adc    ebx,0x0
c000486b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000486f:	45                   	inc    ebp
c0004870:	39 68 18             	cmp    DWORD PTR [eax+0x18],ebp
c0004873:	77 e0                	ja     c0004855 <f_getfree+0x4e>
c0004875:	eb 79                	jmp    c00048f0 <f_getfree+0xe9>
c0004877:	8b 56 24             	mov    edx,DWORD PTR [esi+0x24]
c000487a:	31 db                	xor    ebx,ebx
c000487c:	31 f6                	xor    esi,esi
c000487e:	85 f6                	test   esi,esi
c0004880:	75 18                	jne    c000489a <f_getfree+0x93>
c0004882:	8d 42 01             	lea    eax,[edx+0x1]
c0004885:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004889:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000488d:	e8 ac da ff ff       	call   c000233e <move_window>
c0004892:	85 c0                	test   eax,eax
c0004894:	75 58                	jne    c00048ee <f_getfree+0xe7>
c0004896:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000489a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000489e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00048a2:	8d 44 31 34          	lea    eax,[ecx+esi*1+0x34]
c00048a6:	80 39 02             	cmp    BYTE PTR [ecx],0x2
c00048a9:	75 13                	jne    c00048be <f_getfree+0xb7>
c00048ab:	e8 27 d5 ff ff       	call   c0001dd7 <ld_word>
c00048b0:	0f b7 c0             	movzx  eax,ax
c00048b3:	83 f8 01             	cmp    eax,0x1
c00048b6:	83 d3 00             	adc    ebx,0x0
c00048b9:	83 c6 02             	add    esi,0x2
c00048bc:	eb 13                	jmp    c00048d1 <f_getfree+0xca>
c00048be:	e8 21 d5 ff ff       	call   c0001de4 <ld_dword>
c00048c3:	25 ff ff ff 0f       	and    eax,0xfffffff
c00048c8:	83 f8 01             	cmp    eax,0x1
c00048cb:	83 d3 00             	adc    ebx,0x0
c00048ce:	83 c6 04             	add    esi,0x4
c00048d1:	81 e6 ff 01 00 00    	and    esi,0x1ff
c00048d7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00048db:	4d                   	dec    ebp
c00048dc:	75 a0                	jne    c000487e <f_getfree+0x77>
c00048de:	eb 10                	jmp    c00048f0 <f_getfree+0xe9>
c00048e0:	bf 01 00 00 00       	mov    edi,0x1
c00048e5:	eb 09                	jmp    c00048f0 <f_getfree+0xe9>
c00048e7:	bf 02 00 00 00       	mov    edi,0x2
c00048ec:	eb 02                	jmp    c00048f0 <f_getfree+0xe9>
c00048ee:	89 c7                	mov    edi,eax
c00048f0:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00048f4:	89 18                	mov    DWORD PTR [eax],ebx
c00048f6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00048fa:	8a 50 04             	mov    dl,BYTE PTR [eax+0x4]
c00048fd:	89 58 14             	mov    DWORD PTR [eax+0x14],ebx
c0004900:	83 ca 01             	or     edx,0x1
c0004903:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
c0004906:	83 c4 2c             	add    esp,0x2c
c0004909:	89 f8                	mov    eax,edi
c000490b:	5b                   	pop    ebx
c000490c:	5e                   	pop    esi
c000490d:	5f                   	pop    edi
c000490e:	5d                   	pop    ebp
c000490f:	c3                   	ret    

c0004910 <f_truncate>:
c0004910:	56                   	push   esi
c0004911:	53                   	push   ebx
c0004912:	83 ec 14             	sub    esp,0x14
c0004915:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0004919:	8d 54 24 0c          	lea    edx,[esp+0xc]
c000491d:	89 d8                	mov    eax,ebx
c000491f:	e8 71 d9 ff ff       	call   c0002295 <validate>
c0004924:	89 c6                	mov    esi,eax
c0004926:	85 c0                	test   eax,eax
c0004928:	0f 85 c4 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000492e:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c0004932:	85 f6                	test   esi,esi
c0004934:	0f 85 b8 00 00 00    	jne    c00049f2 <f_truncate+0xe2>
c000493a:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c000493e:	0f 84 a9 00 00 00    	je     c00049ed <f_truncate+0xdd>
c0004944:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0004947:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c000494a:	0f 83 a2 00 00 00    	jae    c00049f2 <f_truncate+0xe2>
c0004950:	85 c0                	test   eax,eax
c0004952:	75 15                	jne    c0004969 <f_truncate+0x59>
c0004954:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0004957:	31 c9                	xor    ecx,ecx
c0004959:	89 d8                	mov    eax,ebx
c000495b:	e8 bf eb ff ff       	call   c000351f <remove_chain>
c0004960:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004967:	eb 35                	jmp    c000499e <f_truncate+0x8e>
c0004969:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c000496c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000496e:	e8 a1 e8 ff ff       	call   c0003214 <get_fat.isra.2>
c0004973:	89 c2                	mov    edx,eax
c0004975:	b8 01 00 00 00       	mov    eax,0x1
c000497a:	83 fa ff             	cmp    edx,0xffffffff
c000497d:	74 1f                	je     c000499e <f_truncate+0x8e>
c000497f:	b8 02 00 00 00       	mov    eax,0x2
c0004984:	83 fa 01             	cmp    edx,0x1
c0004987:	74 15                	je     c000499e <f_truncate+0x8e>
c0004989:	31 c0                	xor    eax,eax
c000498b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000498f:	39 51 18             	cmp    DWORD PTR [ecx+0x18],edx
c0004992:	76 0a                	jbe    c000499e <f_truncate+0x8e>
c0004994:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0004997:	89 d8                	mov    eax,ebx
c0004999:	e8 81 eb ff ff       	call   c000351f <remove_chain>
c000499e:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00049a1:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00049a4:	8a 53 10             	mov    dl,BYTE PTR [ebx+0x10]
c00049a7:	83 ca 40             	or     edx,0x40
c00049aa:	85 c0                	test   eax,eax
c00049ac:	88 53 10             	mov    BYTE PTR [ebx+0x10],dl
c00049af:	75 35                	jne    c00049e6 <f_truncate+0xd6>
c00049b1:	80 e2 80             	and    dl,0x80
c00049b4:	74 3c                	je     c00049f2 <f_truncate+0xe2>
c00049b6:	6a 01                	push   0x1
c00049b8:	8d 43 28             	lea    eax,[ebx+0x28]
c00049bb:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c00049be:	50                   	push   eax
c00049bf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00049c3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00049c7:	50                   	push   eax
c00049c8:	e8 d5 d3 ff ff       	call   c0001da2 <disk_write>
c00049cd:	83 c4 10             	add    esp,0x10
c00049d0:	85 c0                	test   eax,eax
c00049d2:	75 0d                	jne    c00049e1 <f_truncate+0xd1>
c00049d4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00049d7:	31 f6                	xor    esi,esi
c00049d9:	83 e0 7f             	and    eax,0x7f
c00049dc:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00049df:	eb 11                	jmp    c00049f2 <f_truncate+0xe2>
c00049e1:	b8 01 00 00 00       	mov    eax,0x1
c00049e6:	88 43 11             	mov    BYTE PTR [ebx+0x11],al
c00049e9:	89 c6                	mov    esi,eax
c00049eb:	eb 05                	jmp    c00049f2 <f_truncate+0xe2>
c00049ed:	be 07 00 00 00       	mov    esi,0x7
c00049f2:	89 f0                	mov    eax,esi
c00049f4:	83 c4 14             	add    esp,0x14
c00049f7:	5b                   	pop    ebx
c00049f8:	5e                   	pop    esi
c00049f9:	c3                   	ret    

c00049fa <f_unlink>:
c00049fa:	55                   	push   ebp
c00049fb:	b9 02 00 00 00       	mov    ecx,0x2
c0004a00:	57                   	push   edi
c0004a01:	56                   	push   esi
c0004a02:	53                   	push   ebx
c0004a03:	81 ec 8c 00 00 00    	sub    esp,0x8c
c0004a09:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004a0d:	8d 84 24 a0 00 00 00 	lea    eax,[esp+0xa0]
c0004a14:	e8 78 da ff ff       	call   c0002491 <mount_volume>
c0004a19:	85 c0                	test   eax,eax
c0004a1b:	0f 85 f0 00 00 00    	jne    c0004b11 <f_unlink+0x117>
c0004a21:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a25:	83 ec 0c             	sub    esp,0xc
c0004a28:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004a2c:	68 00 02 00 00       	push   0x200
c0004a31:	e8 ea 11 00 00       	call   c0005c20 <ff_memalloc>
c0004a36:	83 c4 10             	add    esp,0x10
c0004a39:	89 c3                	mov    ebx,eax
c0004a3b:	b8 11 00 00 00       	mov    eax,0x11
c0004a40:	85 db                	test   ebx,ebx
c0004a42:	0f 84 c9 00 00 00    	je     c0004b11 <f_unlink+0x117>
c0004a48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004a4c:	8b 94 24 a0 00 00 00 	mov    edx,DWORD PTR [esp+0xa0]
c0004a53:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004a56:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004a5a:	e8 7c ef ff ff       	call   c00039db <follow_path>
c0004a5f:	85 c0                	test   eax,eax
c0004a61:	0f 85 96 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a67:	b8 06 00 00 00       	mov    eax,0x6
c0004a6c:	f6 44 24 4b 80       	test   BYTE PTR [esp+0x4b],0x80
c0004a71:	0f 85 86 00 00 00    	jne    c0004afd <f_unlink+0x103>
c0004a77:	0f b6 6c 24 26       	movzx  ebp,BYTE PTR [esp+0x26]
c0004a7c:	f7 c5 01 00 00 00    	test   ebp,0x1
c0004a82:	74 07                	je     c0004a8b <f_unlink+0x91>
c0004a84:	b8 07 00 00 00       	mov    eax,0x7
c0004a89:	eb 72                	jmp    c0004afd <f_unlink+0x103>
c0004a8b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004a8f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004a93:	8a 07                	mov    al,BYTE PTR [edi]
c0004a95:	e8 29 e7 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004a9a:	83 e5 10             	and    ebp,0x10
c0004a9d:	89 c6                	mov    esi,eax
c0004a9f:	75 0f                	jne    c0004ab0 <f_unlink+0xb6>
c0004aa1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004aa5:	e8 95 ed ff ff       	call   c000383f <dir_remove>
c0004aaa:	85 c0                	test   eax,eax
c0004aac:	74 2f                	je     c0004add <f_unlink+0xe3>
c0004aae:	eb 4d                	jmp    c0004afd <f_unlink+0x103>
c0004ab0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0004ab4:	31 d2                	xor    edx,edx
c0004ab6:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0004aba:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004abe:	e8 55 e8 ff ff       	call   c0003318 <dir_sdi>
c0004ac3:	85 c0                	test   eax,eax
c0004ac5:	75 36                	jne    c0004afd <f_unlink+0x103>
c0004ac7:	31 d2                	xor    edx,edx
c0004ac9:	8d 44 24 50          	lea    eax,[esp+0x50]
c0004acd:	e8 45 ec ff ff       	call   c0003717 <dir_read>
c0004ad2:	85 c0                	test   eax,eax
c0004ad4:	74 ae                	je     c0004a84 <f_unlink+0x8a>
c0004ad6:	83 f8 04             	cmp    eax,0x4
c0004ad9:	75 22                	jne    c0004afd <f_unlink+0x103>
c0004adb:	eb c4                	jmp    c0004aa1 <f_unlink+0xa7>
c0004add:	85 f6                	test   esi,esi
c0004adf:	75 0b                	jne    c0004aec <f_unlink+0xf2>
c0004ae1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ae5:	e8 8b e2 ff ff       	call   c0002d75 <sync_fs>
c0004aea:	eb 11                	jmp    c0004afd <f_unlink+0x103>
c0004aec:	31 c9                	xor    ecx,ecx
c0004aee:	89 f2                	mov    edx,esi
c0004af0:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004af4:	e8 26 ea ff ff       	call   c000351f <remove_chain>
c0004af9:	85 c0                	test   eax,eax
c0004afb:	74 e4                	je     c0004ae1 <f_unlink+0xe7>
c0004afd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004b01:	83 ec 0c             	sub    esp,0xc
c0004b04:	53                   	push   ebx
c0004b05:	e8 2e 11 00 00       	call   c0005c38 <ff_memfree>
c0004b0a:	83 c4 10             	add    esp,0x10
c0004b0d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b11:	81 c4 8c 00 00 00    	add    esp,0x8c
c0004b17:	5b                   	pop    ebx
c0004b18:	5e                   	pop    esi
c0004b19:	5f                   	pop    edi
c0004b1a:	5d                   	pop    ebp
c0004b1b:	c3                   	ret    

c0004b1c <f_mkdir>:
c0004b1c:	57                   	push   edi
c0004b1d:	b9 02 00 00 00       	mov    ecx,0x2
c0004b22:	56                   	push   esi
c0004b23:	53                   	push   ebx
c0004b24:	83 ec 50             	sub    esp,0x50
c0004b27:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004b2b:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004b2f:	e8 5d d9 ff ff       	call   c0002491 <mount_volume>
c0004b34:	89 c3                	mov    ebx,eax
c0004b36:	85 c0                	test   eax,eax
c0004b38:	0f 85 70 01 00 00    	jne    c0004cae <f_mkdir+0x192>
c0004b3e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b42:	bb 11 00 00 00       	mov    ebx,0x11
c0004b47:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0004b4b:	83 ec 0c             	sub    esp,0xc
c0004b4e:	68 00 02 00 00       	push   0x200
c0004b53:	e8 c8 10 00 00       	call   c0005c20 <ff_memalloc>
c0004b58:	83 c4 10             	add    esp,0x10
c0004b5b:	89 c7                	mov    edi,eax
c0004b5d:	85 c0                	test   eax,eax
c0004b5f:	0f 84 49 01 00 00    	je     c0004cae <f_mkdir+0x192>
c0004b65:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004b6d:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0004b70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004b74:	e8 62 ee ff ff       	call   c00039db <follow_path>
c0004b79:	89 c3                	mov    ebx,eax
c0004b7b:	85 c0                	test   eax,eax
c0004b7d:	74 3e                	je     c0004bbd <f_mkdir+0xa1>
c0004b7f:	83 f8 04             	cmp    eax,0x4
c0004b82:	75 3e                	jne    c0004bc2 <f_mkdir+0xa6>
c0004b84:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004b88:	31 d2                	xor    edx,edx
c0004b8a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004b8e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004b92:	e8 49 e8 ff ff       	call   c00033e0 <create_chain>
c0004b97:	89 c6                	mov    esi,eax
c0004b99:	85 c0                	test   eax,eax
c0004b9b:	74 0c                	je     c0004ba9 <f_mkdir+0x8d>
c0004b9d:	bb 02 00 00 00       	mov    ebx,0x2
c0004ba2:	83 f8 01             	cmp    eax,0x1
c0004ba5:	74 07                	je     c0004bae <f_mkdir+0x92>
c0004ba7:	eb 2a                	jmp    c0004bd3 <f_mkdir+0xb7>
c0004ba9:	bb 07 00 00 00       	mov    ebx,0x7
c0004bae:	31 c9                	xor    ecx,ecx
c0004bb0:	89 f2                	mov    edx,esi
c0004bb2:	8d 44 24 10          	lea    eax,[esp+0x10]
c0004bb6:	e8 64 e9 ff ff       	call   c000351f <remove_chain>
c0004bbb:	eb 05                	jmp    c0004bc2 <f_mkdir+0xa6>
c0004bbd:	bb 08 00 00 00       	mov    ebx,0x8
c0004bc2:	83 ec 0c             	sub    esp,0xc
c0004bc5:	57                   	push   edi
c0004bc6:	e8 6d 10 00 00       	call   c0005c38 <ff_memfree>
c0004bcb:	83 c4 10             	add    esp,0x10
c0004bce:	e9 db 00 00 00       	jmp    c0004cae <f_mkdir+0x192>
c0004bd3:	bb 01 00 00 00       	mov    ebx,0x1
c0004bd8:	83 f8 ff             	cmp    eax,0xffffffff
c0004bdb:	74 d1                	je     c0004bae <f_mkdir+0x92>
c0004bdd:	89 f2                	mov    edx,esi
c0004bdf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004be3:	e8 f1 dc ff ff       	call   c00028d9 <dir_clear>
c0004be8:	89 c3                	mov    ebx,eax
c0004bea:	85 c0                	test   eax,eax
c0004bec:	75 c0                	jne    c0004bae <f_mkdir+0x92>
c0004bee:	b9 0b 00 00 00       	mov    ecx,0xb
c0004bf3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004bf7:	ba 20 00 00 00       	mov    edx,0x20
c0004bfc:	83 c0 34             	add    eax,0x34
c0004bff:	e8 14 d2 ff ff       	call   c0001e18 <mem_set>
c0004c04:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c08:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c0d:	c6 40 34 2e          	mov    BYTE PTR [eax+0x34],0x2e
c0004c11:	c6 40 3f 10          	mov    BYTE PTR [eax+0x3f],0x10
c0004c15:	83 c0 4a             	add    eax,0x4a
c0004c18:	e8 e3 d1 ff ff       	call   c0001e00 <st_dword>
c0004c1d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c21:	89 f1                	mov    ecx,esi
c0004c23:	8d 50 34             	lea    edx,[eax+0x34]
c0004c26:	e8 c1 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c2b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c2f:	b9 20 00 00 00       	mov    ecx,0x20
c0004c34:	8d 50 34             	lea    edx,[eax+0x34]
c0004c37:	83 c0 54             	add    eax,0x54
c0004c3a:	e8 c4 d1 ff ff       	call   c0001e03 <mem_cpy>
c0004c3f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c43:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0004c47:	8d 50 54             	lea    edx,[eax+0x54]
c0004c4a:	c6 40 55 2e          	mov    BYTE PTR [eax+0x55],0x2e
c0004c4e:	e8 99 e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c53:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c57:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c5b:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004c5f:	e8 0c ee ff ff       	call   c0003a70 <dir_register>
c0004c64:	89 c3                	mov    ebx,eax
c0004c66:	85 c0                	test   eax,eax
c0004c68:	0f 85 40 ff ff ff    	jne    c0004bae <f_mkdir+0x92>
c0004c6e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c72:	ba 00 00 21 50       	mov    edx,0x50210000
c0004c77:	83 c0 16             	add    eax,0x16
c0004c7a:	e8 81 d1 ff ff       	call   c0001e00 <st_dword>
c0004c7f:	89 f1                	mov    ecx,esi
c0004c81:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0004c85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c89:	e8 5e e5 ff ff       	call   c00031ec <st_clust.isra.1>
c0004c8e:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004c92:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0004c96:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004c9a:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004c9e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004ca2:	e8 ce e0 ff ff       	call   c0002d75 <sync_fs>
c0004ca7:	89 c3                	mov    ebx,eax
c0004ca9:	e9 14 ff ff ff       	jmp    c0004bc2 <f_mkdir+0xa6>
c0004cae:	83 c4 50             	add    esp,0x50
c0004cb1:	89 d8                	mov    eax,ebx
c0004cb3:	5b                   	pop    ebx
c0004cb4:	5e                   	pop    esi
c0004cb5:	5f                   	pop    edi
c0004cb6:	c3                   	ret    

c0004cb7 <f_rename>:
c0004cb7:	57                   	push   edi
c0004cb8:	56                   	push   esi
c0004cb9:	53                   	push   ebx
c0004cba:	81 ec a0 00 00 00    	sub    esp,0xa0
c0004cc0:	8d 84 24 b4 00 00 00 	lea    eax,[esp+0xb4]
c0004cc7:	e8 7c d5 ff ff       	call   c0002248 <get_ldnumber>
c0004ccc:	b9 02 00 00 00       	mov    ecx,0x2
c0004cd1:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004cd5:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c0004cdc:	e8 b0 d7 ff ff       	call   c0002491 <mount_volume>
c0004ce1:	85 c0                	test   eax,eax
c0004ce3:	0f 85 7c 01 00 00    	jne    c0004e65 <f_rename+0x1ae>
c0004ce9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ced:	83 ec 0c             	sub    esp,0xc
c0004cf0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0004cf4:	68 00 02 00 00       	push   0x200
c0004cf9:	e8 22 0f 00 00       	call   c0005c20 <ff_memalloc>
c0004cfe:	83 c4 10             	add    esp,0x10
c0004d01:	89 c6                	mov    esi,eax
c0004d03:	b8 11 00 00 00       	mov    eax,0x11
c0004d08:	85 f6                	test   esi,esi
c0004d0a:	0f 84 55 01 00 00    	je     c0004e65 <f_rename+0x1ae>
c0004d10:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004d14:	8b 94 24 b0 00 00 00 	mov    edx,DWORD PTR [esp+0xb0]
c0004d1b:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004d1e:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004d22:	e8 b4 ec ff ff       	call   c00039db <follow_path>
c0004d27:	85 c0                	test   eax,eax
c0004d29:	0f 85 22 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d2f:	8a 54 24 6b          	mov    dl,BYTE PTR [esp+0x6b]
c0004d33:	b8 06 00 00 00       	mov    eax,0x6
c0004d38:	80 e2 a0             	and    dl,0xa0
c0004d3b:	0f 85 10 01 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d41:	b9 20 00 00 00       	mov    ecx,0x20
c0004d46:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004d4a:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004d4e:	e8 b0 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d53:	b9 30 00 00 00       	mov    ecx,0x30
c0004d58:	8d 54 24 40          	lea    edx,[esp+0x40]
c0004d5c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d60:	e8 9e d0 ff ff       	call   c0001e03 <mem_cpy>
c0004d65:	8b 94 24 b4 00 00 00 	mov    edx,DWORD PTR [esp+0xb4]
c0004d6c:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004d70:	e8 66 ec ff ff       	call   c00039db <follow_path>
c0004d75:	85 c0                	test   eax,eax
c0004d77:	75 20                	jne    c0004d99 <f_rename+0xe2>
c0004d79:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c0004d7d:	b8 08 00 00 00       	mov    eax,0x8
c0004d82:	39 7c 24 78          	cmp    DWORD PTR [esp+0x78],edi
c0004d86:	0f 85 c5 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004d8c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0004d90:	39 8c 24 80 00 00 00 	cmp    DWORD PTR [esp+0x80],ecx
c0004d97:	eb 03                	jmp    c0004d9c <f_rename+0xe5>
c0004d99:	83 f8 04             	cmp    eax,0x4
c0004d9c:	0f 85 af 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004da2:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004da6:	e8 c5 ec ff ff       	call   c0003a70 <dir_register>
c0004dab:	85 c0                	test   eax,eax
c0004dad:	0f 85 9e 00 00 00    	jne    c0004e51 <f_rename+0x19a>
c0004db3:	8b 9c 24 8c 00 00 00 	mov    ebx,DWORD PTR [esp+0x8c]
c0004dba:	b9 13 00 00 00       	mov    ecx,0x13
c0004dbf:	8d 43 0d             	lea    eax,[ebx+0xd]
c0004dc2:	8d 54 24 2d          	lea    edx,[esp+0x2d]
c0004dc6:	e8 38 d0 ff ff       	call   c0001e03 <mem_cpy>
c0004dcb:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0004dcf:	a8 10                	test   al,0x10
c0004dd1:	75 03                	jne    c0004dd6 <f_rename+0x11f>
c0004dd3:	83 c8 20             	or     eax,0x20
c0004dd6:	88 43 0b             	mov    BYTE PTR [ebx+0xb],al
c0004dd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ddd:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004de1:	f6 43 0b 10          	test   BYTE PTR [ebx+0xb],0x10
c0004de5:	74 54                	je     c0004e3b <f_rename+0x184>
c0004de7:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0004deb:	39 44 24 48          	cmp    DWORD PTR [esp+0x48],eax
c0004def:	74 4a                	je     c0004e3b <f_rename+0x184>
c0004df1:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0004df5:	89 da                	mov    edx,ebx
c0004df7:	8a 07                	mov    al,BYTE PTR [edi]
c0004df9:	e8 c5 e3 ff ff       	call   c00031c3 <ld_clust.isra.0>
c0004dfe:	89 c2                	mov    edx,eax
c0004e00:	89 f8                	mov    eax,edi
c0004e02:	e8 27 d2 ff ff       	call   c000202e <clst2sect>
c0004e07:	89 c2                	mov    edx,eax
c0004e09:	b8 02 00 00 00       	mov    eax,0x2
c0004e0e:	85 d2                	test   edx,edx
c0004e10:	74 3f                	je     c0004e51 <f_rename+0x19a>
c0004e12:	89 f8                	mov    eax,edi
c0004e14:	e8 25 d5 ff ff       	call   c000233e <move_window>
c0004e19:	85 c0                	test   eax,eax
c0004e1b:	75 34                	jne    c0004e51 <f_rename+0x19a>
c0004e1d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e21:	80 78 55 2e          	cmp    BYTE PTR [eax+0x55],0x2e
c0004e25:	75 14                	jne    c0004e3b <f_rename+0x184>
c0004e27:	8d 50 54             	lea    edx,[eax+0x54]
c0004e2a:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c0004e2e:	e8 b9 e3 ff ff       	call   c00031ec <st_clust.isra.1>
c0004e33:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e37:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004e3b:	8d 44 24 40          	lea    eax,[esp+0x40]
c0004e3f:	e8 fb e9 ff ff       	call   c000383f <dir_remove>
c0004e44:	85 c0                	test   eax,eax
c0004e46:	75 09                	jne    c0004e51 <f_rename+0x19a>
c0004e48:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e4c:	e8 24 df ff ff       	call   c0002d75 <sync_fs>
c0004e51:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e55:	83 ec 0c             	sub    esp,0xc
c0004e58:	56                   	push   esi
c0004e59:	e8 da 0d 00 00       	call   c0005c38 <ff_memfree>
c0004e5e:	83 c4 10             	add    esp,0x10
c0004e61:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e65:	81 c4 a0 00 00 00    	add    esp,0xa0
c0004e6b:	5b                   	pop    ebx
c0004e6c:	5e                   	pop    esi
c0004e6d:	5f                   	pop    edi
c0004e6e:	c3                   	ret    

c0004e6f <f_chmod>:
c0004e6f:	57                   	push   edi
c0004e70:	b9 02 00 00 00       	mov    ecx,0x2
c0004e75:	56                   	push   esi
c0004e76:	53                   	push   ebx
c0004e77:	83 ec 50             	sub    esp,0x50
c0004e7a:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0004e7e:	8b 5c 24 68          	mov    ebx,DWORD PTR [esp+0x68]
c0004e82:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004e86:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004e8a:	e8 02 d6 ff ff       	call   c0002491 <mount_volume>
c0004e8f:	85 c0                	test   eax,eax
c0004e91:	0f 85 81 00 00 00    	jne    c0004f18 <f_chmod+0xa9>
c0004e97:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004e9b:	83 ec 0c             	sub    esp,0xc
c0004e9e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004ea2:	68 00 02 00 00       	push   0x200
c0004ea7:	e8 74 0d 00 00       	call   c0005c20 <ff_memalloc>
c0004eac:	83 c4 10             	add    esp,0x10
c0004eaf:	89 c6                	mov    esi,eax
c0004eb1:	b8 11 00 00 00       	mov    eax,0x11
c0004eb6:	85 f6                	test   esi,esi
c0004eb8:	74 5e                	je     c0004f18 <f_chmod+0xa9>
c0004eba:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ebe:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004ec2:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0004ec5:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004ec9:	e8 0d eb ff ff       	call   c00039db <follow_path>
c0004ece:	85 c0                	test   eax,eax
c0004ed0:	75 32                	jne    c0004f04 <f_chmod+0x95>
c0004ed2:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004ed6:	b8 06 00 00 00       	mov    eax,0x6
c0004edb:	80 e2 a0             	and    dl,0xa0
c0004ede:	75 24                	jne    c0004f04 <f_chmod+0x95>
c0004ee0:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004ee4:	8a 50 0b             	mov    dl,BYTE PTR [eax+0xb]
c0004ee7:	31 d7                	xor    edi,edx
c0004ee9:	21 fb                	and    ebx,edi
c0004eeb:	83 e3 27             	and    ebx,0x27
c0004eee:	31 d3                	xor    ebx,edx
c0004ef0:	88 58 0b             	mov    BYTE PTR [eax+0xb],bl
c0004ef3:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ef7:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004efb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004eff:	e8 71 de ff ff       	call   c0002d75 <sync_fs>
c0004f04:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f08:	83 ec 0c             	sub    esp,0xc
c0004f0b:	56                   	push   esi
c0004f0c:	e8 27 0d 00 00       	call   c0005c38 <ff_memfree>
c0004f11:	83 c4 10             	add    esp,0x10
c0004f14:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004f18:	83 c4 50             	add    esp,0x50
c0004f1b:	5b                   	pop    ebx
c0004f1c:	5e                   	pop    esi
c0004f1d:	5f                   	pop    edi
c0004f1e:	c3                   	ret    

c0004f1f <f_utime>:
c0004f1f:	56                   	push   esi
c0004f20:	b9 02 00 00 00       	mov    ecx,0x2
c0004f25:	53                   	push   ebx
c0004f26:	83 ec 54             	sub    esp,0x54
c0004f29:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0004f2d:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004f31:	8d 44 24 60          	lea    eax,[esp+0x60]
c0004f35:	e8 57 d5 ff ff       	call   c0002491 <mount_volume>
c0004f3a:	85 c0                	test   eax,eax
c0004f3c:	0f 85 87 00 00 00    	jne    c0004fc9 <f_utime+0xaa>
c0004f42:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f46:	83 ec 0c             	sub    esp,0xc
c0004f49:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0004f4d:	68 00 02 00 00       	push   0x200
c0004f52:	e8 c9 0c 00 00       	call   c0005c20 <ff_memalloc>
c0004f57:	83 c4 10             	add    esp,0x10
c0004f5a:	89 c3                	mov    ebx,eax
c0004f5c:	b8 11 00 00 00       	mov    eax,0x11
c0004f61:	85 db                	test   ebx,ebx
c0004f63:	74 64                	je     c0004fc9 <f_utime+0xaa>
c0004f65:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004f69:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0004f6d:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0004f70:	8d 44 24 20          	lea    eax,[esp+0x20]
c0004f74:	e8 62 ea ff ff       	call   c00039db <follow_path>
c0004f79:	85 c0                	test   eax,eax
c0004f7b:	75 38                	jne    c0004fb5 <f_utime+0x96>
c0004f7d:	8a 54 24 4b          	mov    dl,BYTE PTR [esp+0x4b]
c0004f81:	b8 06 00 00 00       	mov    eax,0x6
c0004f86:	80 e2 a0             	and    dl,0xa0
c0004f89:	75 2a                	jne    c0004fb5 <f_utime+0x96>
c0004f8b:	0f b7 46 06          	movzx  eax,WORD PTR [esi+0x6]
c0004f8f:	0f b7 56 04          	movzx  edx,WORD PTR [esi+0x4]
c0004f93:	c1 e2 10             	shl    edx,0x10
c0004f96:	09 c2                	or     edx,eax
c0004f98:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004f9c:	83 c0 16             	add    eax,0x16
c0004f9f:	e8 5c ce ff ff       	call   c0001e00 <st_dword>
c0004fa4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fa8:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0004fac:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004fb0:	e8 c0 dd ff ff       	call   c0002d75 <sync_fs>
c0004fb5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004fb9:	83 ec 0c             	sub    esp,0xc
c0004fbc:	53                   	push   ebx
c0004fbd:	e8 76 0c 00 00       	call   c0005c38 <ff_memfree>
c0004fc2:	83 c4 10             	add    esp,0x10
c0004fc5:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004fc9:	83 c4 54             	add    esp,0x54
c0004fcc:	5b                   	pop    ebx
c0004fcd:	5e                   	pop    esi
c0004fce:	c3                   	ret    

c0004fcf <f_getlabel>:
c0004fcf:	55                   	push   ebp
c0004fd0:	31 c9                	xor    ecx,ecx
c0004fd2:	57                   	push   edi
c0004fd3:	56                   	push   esi
c0004fd4:	53                   	push   ebx
c0004fd5:	83 ec 5c             	sub    esp,0x5c
c0004fd8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0004fdc:	8d 44 24 70          	lea    eax,[esp+0x70]
c0004fe0:	e8 ac d4 ff ff       	call   c0002491 <mount_volume>
c0004fe5:	89 c6                	mov    esi,eax
c0004fe7:	85 c0                	test   eax,eax
c0004fe9:	0f 85 27 01 00 00    	jne    c0005116 <f_getlabel+0x147>
c0004fef:	83 7c 24 74 00       	cmp    DWORD PTR [esp+0x74],0x0
c0004ff4:	0f 84 d0 00 00 00    	je     c00050ca <f_getlabel+0xfb>
c0004ffa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0004ffe:	31 d2                	xor    edx,edx
c0005000:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0005004:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000500c:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005010:	e8 03 e3 ff ff       	call   c0003318 <dir_sdi>
c0005015:	85 c0                	test   eax,eax
c0005017:	0f 85 a1 00 00 00    	jne    c00050be <f_getlabel+0xef>
c000501d:	ba 01 00 00 00       	mov    edx,0x1
c0005022:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005026:	e8 ec e6 ff ff       	call   c0003717 <dir_read>
c000502b:	85 c0                	test   eax,eax
c000502d:	0f 85 8b 00 00 00    	jne    c00050be <f_getlabel+0xef>
c0005033:	31 db                	xor    ebx,ebx
c0005035:	31 c9                	xor    ecx,ecx
c0005037:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000503b:	8d 79 01             	lea    edi,[ecx+0x1]
c000503e:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0005043:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0005048:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000504c:	e8 06 ce ff ff       	call   c0001e57 <dbc_1st>
c0005051:	85 c0                	test   eax,eax
c0005053:	74 16                	je     c000506b <f_getlabel+0x9c>
c0005055:	83 ff 0b             	cmp    edi,0xb
c0005058:	74 11                	je     c000506b <f_getlabel+0x9c>
c000505a:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c000505f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005063:	8d 79 02             	lea    edi,[ecx+0x2]
c0005066:	c1 e0 08             	shl    eax,0x8
c0005069:	09 c2                	or     edx,eax
c000506b:	0f b7 d2             	movzx  edx,dx
c000506e:	50                   	push   eax
c000506f:	50                   	push   eax
c0005070:	68 b5 01 00 00       	push   0x1b5
c0005075:	52                   	push   edx
c0005076:	e8 75 0c 00 00       	call   c0005cf0 <ff_oem2uni>
c000507b:	83 c4 10             	add    esp,0x10
c000507e:	0f b7 c0             	movzx  eax,ax
c0005081:	85 c0                	test   eax,eax
c0005083:	74 22                	je     c00050a7 <f_getlabel+0xd8>
c0005085:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0005089:	b9 04 00 00 00       	mov    ecx,0x4
c000508e:	01 da                	add    edx,ebx
c0005090:	e8 a0 ce ff ff       	call   c0001f35 <put_utf>
c0005095:	0f b6 c0             	movzx  eax,al
c0005098:	85 c0                	test   eax,eax
c000509a:	74 0b                	je     c00050a7 <f_getlabel+0xd8>
c000509c:	01 c3                	add    ebx,eax
c000509e:	83 ff 0b             	cmp    edi,0xb
c00050a1:	74 06                	je     c00050a9 <f_getlabel+0xda>
c00050a3:	89 f9                	mov    ecx,edi
c00050a5:	eb 90                	jmp    c0005037 <f_getlabel+0x68>
c00050a7:	31 db                	xor    ebx,ebx
c00050a9:	03 5c 24 74          	add    ebx,DWORD PTR [esp+0x74]
c00050ad:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c00050b0:	39 5c 24 74          	cmp    DWORD PTR [esp+0x74],ebx
c00050b4:	74 14                	je     c00050ca <f_getlabel+0xfb>
c00050b6:	4b                   	dec    ebx
c00050b7:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c00050ba:	74 f1                	je     c00050ad <f_getlabel+0xde>
c00050bc:	eb 0c                	jmp    c00050ca <f_getlabel+0xfb>
c00050be:	83 f8 04             	cmp    eax,0x4
c00050c1:	75 51                	jne    c0005114 <f_getlabel+0x145>
c00050c3:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00050c7:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00050ca:	83 7c 24 78 00       	cmp    DWORD PTR [esp+0x78],0x0
c00050cf:	74 45                	je     c0005116 <f_getlabel+0x147>
c00050d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00050d5:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c00050d8:	e8 61 d2 ff ff       	call   c000233e <move_window>
c00050dd:	89 c6                	mov    esi,eax
c00050df:	85 c0                	test   eax,eax
c00050e1:	75 33                	jne    c0005116 <f_getlabel+0x147>
c00050e3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00050e7:	b8 43 00 00 00       	mov    eax,0x43
c00050ec:	0f b6 0a             	movzx  ecx,BYTE PTR [edx]
c00050ef:	83 f9 03             	cmp    ecx,0x3
c00050f2:	74 0f                	je     c0005103 <f_getlabel+0x134>
c00050f4:	31 c0                	xor    eax,eax
c00050f6:	83 f9 04             	cmp    ecx,0x4
c00050f9:	0f 94 c0             	sete   al
c00050fc:	48                   	dec    eax
c00050fd:	83 e0 c3             	and    eax,0xffffffc3
c0005100:	83 c0 64             	add    eax,0x64
c0005103:	8d 44 02 34          	lea    eax,[edx+eax*1+0x34]
c0005107:	e8 d8 cc ff ff       	call   c0001de4 <ld_dword>
c000510c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0005110:	89 07                	mov    DWORD PTR [edi],eax
c0005112:	eb 02                	jmp    c0005116 <f_getlabel+0x147>
c0005114:	89 c6                	mov    esi,eax
c0005116:	83 c4 5c             	add    esp,0x5c
c0005119:	89 f0                	mov    eax,esi
c000511b:	5b                   	pop    ebx
c000511c:	5e                   	pop    esi
c000511d:	5f                   	pop    edi
c000511e:	5d                   	pop    ebp
c000511f:	c3                   	ret    

c0005120 <f_setlabel>:
c0005120:	57                   	push   edi
c0005121:	b9 02 00 00 00       	mov    ecx,0x2
c0005126:	56                   	push   esi
c0005127:	53                   	push   ebx
c0005128:	83 ec 50             	sub    esp,0x50
c000512b:	8d 54 24 04          	lea    edx,[esp+0x4]
c000512f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005133:	e8 59 d3 ff ff       	call   c0002491 <mount_volume>
c0005138:	89 c6                	mov    esi,eax
c000513a:	85 c0                	test   eax,eax
c000513c:	0f 85 65 01 00 00    	jne    c00052a7 <f_setlabel+0x187>
c0005142:	b9 0b 00 00 00       	mov    ecx,0xb
c0005147:	ba 20 00 00 00       	mov    edx,0x20
c000514c:	8d 44 24 0a          	lea    eax,[esp+0xa]
c0005150:	31 db                	xor    ebx,ebx
c0005152:	e8 c1 cc ff ff       	call   c0001e18 <mem_set>
c0005157:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000515b:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c000515e:	76 5d                	jbe    c00051bd <f_setlabel+0x9d>
c0005160:	8d 44 24 60          	lea    eax,[esp+0x60]
c0005164:	e8 f4 cc ff ff       	call   c0001e5d <tchar2uni>
c0005169:	3d ff ff 00 00       	cmp    eax,0xffff
c000516e:	76 0a                	jbe    c000517a <f_setlabel+0x5a>
c0005170:	be 06 00 00 00       	mov    esi,0x6
c0005175:	e9 2d 01 00 00       	jmp    c00052a7 <f_setlabel+0x187>
c000517a:	83 ec 0c             	sub    esp,0xc
c000517d:	50                   	push   eax
c000517e:	e8 e5 0b 00 00       	call   c0005d68 <ff_wtoupper>
c0005183:	5a                   	pop    edx
c0005184:	59                   	pop    ecx
c0005185:	68 b5 01 00 00       	push   0x1b5
c000518a:	50                   	push   eax
c000518b:	e8 c0 0a 00 00       	call   c0005c50 <ff_uni2oem>
c0005190:	83 c4 10             	add    esp,0x10
c0005193:	0f b7 f0             	movzx  esi,ax
c0005196:	89 f7                	mov    edi,esi
c0005198:	85 f6                	test   esi,esi
c000519a:	74 d4                	je     c0005170 <f_setlabel+0x50>
c000519c:	89 f2                	mov    edx,esi
c000519e:	b8 30 00 02 c0       	mov    eax,0xc0020030
c00051a3:	e8 9e cc ff ff       	call   c0001e46 <chk_chr>
c00051a8:	85 c0                	test   eax,eax
c00051aa:	75 c4                	jne    c0005170 <f_setlabel+0x50>
c00051ac:	81 fe ff 00 00 00    	cmp    esi,0xff
c00051b2:	0f 87 c9 00 00 00    	ja     c0005281 <f_setlabel+0x161>
c00051b8:	e9 e0 00 00 00       	jmp    c000529d <f_setlabel+0x17d>
c00051bd:	80 7c 24 0a e5       	cmp    BYTE PTR [esp+0xa],0xe5
c00051c2:	74 ac                	je     c0005170 <f_setlabel+0x50>
c00051c4:	85 db                	test   ebx,ebx
c00051c6:	74 0e                	je     c00051d6 <f_setlabel+0xb6>
c00051c8:	8d 43 ff             	lea    eax,[ebx-0x1]
c00051cb:	80 7c 1c 09 20       	cmp    BYTE PTR [esp+ebx*1+0x9],0x20
c00051d0:	75 04                	jne    c00051d6 <f_setlabel+0xb6>
c00051d2:	89 c3                	mov    ebx,eax
c00051d4:	eb ee                	jmp    c00051c4 <f_setlabel+0xa4>
c00051d6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00051da:	31 d2                	xor    edx,edx
c00051dc:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00051e0:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00051e8:	8d 44 24 20          	lea    eax,[esp+0x20]
c00051ec:	e8 27 e1 ff ff       	call   c0003318 <dir_sdi>
c00051f1:	89 c6                	mov    esi,eax
c00051f3:	85 c0                	test   eax,eax
c00051f5:	0f 85 ac 00 00 00    	jne    c00052a7 <f_setlabel+0x187>
c00051fb:	ba 01 00 00 00       	mov    edx,0x1
c0005200:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005204:	e8 0e e5 ff ff       	call   c0003717 <dir_read>
c0005209:	85 c0                	test   eax,eax
c000520b:	75 18                	jne    c0005225 <f_setlabel+0x105>
c000520d:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005211:	85 db                	test   ebx,ebx
c0005213:	74 0b                	je     c0005220 <f_setlabel+0x100>
c0005215:	b9 0b 00 00 00       	mov    ecx,0xb
c000521a:	8d 54 24 0a          	lea    edx,[esp+0xa]
c000521e:	eb 47                	jmp    c0005267 <f_setlabel+0x147>
c0005220:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c0005223:	eb 47                	jmp    c000526c <f_setlabel+0x14c>
c0005225:	83 f8 04             	cmp    eax,0x4
c0005228:	75 53                	jne    c000527d <f_setlabel+0x15d>
c000522a:	85 db                	test   ebx,ebx
c000522c:	74 79                	je     c00052a7 <f_setlabel+0x187>
c000522e:	ba 01 00 00 00       	mov    edx,0x1
c0005233:	8d 44 24 20          	lea    eax,[esp+0x20]
c0005237:	e8 76 e4 ff ff       	call   c00036b2 <dir_alloc>
c000523c:	89 c6                	mov    esi,eax
c000523e:	85 c0                	test   eax,eax
c0005240:	75 65                	jne    c00052a7 <f_setlabel+0x187>
c0005242:	b9 20 00 00 00       	mov    ecx,0x20
c0005247:	31 d2                	xor    edx,edx
c0005249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000524d:	e8 c6 cb ff ff       	call   c0001e18 <mem_set>
c0005252:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005256:	b9 0b 00 00 00       	mov    ecx,0xb
c000525b:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000525f:	8d 54 24 0a          	lea    edx,[esp+0xa]
c0005263:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0005267:	e8 97 cb ff ff       	call   c0001e03 <mem_cpy>
c000526c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005270:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005274:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005278:	e8 f8 da ff ff       	call   c0002d75 <sync_fs>
c000527d:	89 c6                	mov    esi,eax
c000527f:	eb 26                	jmp    c00052a7 <f_setlabel+0x187>
c0005281:	83 fb 09             	cmp    ebx,0x9
c0005284:	0f 87 e6 fe ff ff    	ja     c0005170 <f_setlabel+0x50>
c000528a:	89 f0                	mov    eax,esi
c000528c:	88 64 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],ah
c0005290:	43                   	inc    ebx
c0005291:	89 f8                	mov    eax,edi
c0005293:	88 44 1c 0a          	mov    BYTE PTR [esp+ebx*1+0xa],al
c0005297:	43                   	inc    ebx
c0005298:	e9 ba fe ff ff       	jmp    c0005157 <f_setlabel+0x37>
c000529d:	83 fb 0a             	cmp    ebx,0xa
c00052a0:	76 ef                	jbe    c0005291 <f_setlabel+0x171>
c00052a2:	e9 c9 fe ff ff       	jmp    c0005170 <f_setlabel+0x50>
c00052a7:	83 c4 50             	add    esp,0x50
c00052aa:	89 f0                	mov    eax,esi
c00052ac:	5b                   	pop    ebx
c00052ad:	5e                   	pop    esi
c00052ae:	5f                   	pop    edi
c00052af:	c3                   	ret    

c00052b0 <f_expand>:
c00052b0:	55                   	push   ebp
c00052b1:	57                   	push   edi
c00052b2:	56                   	push   esi
c00052b3:	53                   	push   ebx
c00052b4:	83 ec 2c             	sub    esp,0x2c
c00052b7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00052bb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00052bf:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00052c7:	89 d8                	mov    eax,ebx
c00052c9:	e8 c7 cf ff ff       	call   c0002295 <validate>
c00052ce:	89 c6                	mov    esi,eax
c00052d0:	85 c0                	test   eax,eax
c00052d2:	0f 85 3b 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052d8:	0f b6 73 11          	movzx  esi,BYTE PTR [ebx+0x11]
c00052dc:	85 f6                	test   esi,esi
c00052de:	0f 85 2f 01 00 00    	jne    c0005413 <f_expand+0x163>
c00052e4:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c00052e9:	75 0a                	jne    c00052f5 <f_expand+0x45>
c00052eb:	be 07 00 00 00       	mov    esi,0x7
c00052f0:	e9 1e 01 00 00       	jmp    c0005413 <f_expand+0x163>
c00052f5:	83 7b 0c 00          	cmp    DWORD PTR [ebx+0xc],0x0
c00052f9:	75 f0                	jne    c00052eb <f_expand+0x3b>
c00052fb:	f6 43 10 02          	test   BYTE PTR [ebx+0x10],0x2
c00052ff:	74 ea                	je     c00052eb <f_expand+0x3b>
c0005301:	8b 6c 24 1c          	mov    ebp,DWORD PTR [esp+0x1c]
c0005305:	0f b7 4d 0a          	movzx  ecx,WORD PTR [ebp+0xa]
c0005309:	c1 e1 09             	shl    ecx,0x9
c000530c:	8d 41 ff             	lea    eax,[ecx-0x1]
c000530f:	85 44 24 44          	test   DWORD PTR [esp+0x44],eax
c0005313:	0f 95 c0             	setne  al
c0005316:	31 d2                	xor    edx,edx
c0005318:	0f b6 c0             	movzx  eax,al
c000531b:	89 c7                	mov    edi,eax
c000531d:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005321:	f7 f1                	div    ecx
c0005323:	01 f8                	add    eax,edi
c0005325:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
c0005328:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000532c:	83 ff 01             	cmp    edi,0x1
c000532f:	76 05                	jbe    c0005336 <f_expand+0x86>
c0005331:	39 7d 18             	cmp    DWORD PTR [ebp+0x18],edi
c0005334:	77 05                	ja     c000533b <f_expand+0x8b>
c0005336:	bf 02 00 00 00       	mov    edi,0x2
c000533b:	89 3c 24             	mov    DWORD PTR [esp],edi
c000533e:	89 fd                	mov    ebp,edi
c0005340:	31 c9                	xor    ecx,ecx
c0005342:	89 ea                	mov    edx,ebp
c0005344:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005348:	8b 03                	mov    eax,DWORD PTR [ebx]
c000534a:	45                   	inc    ebp
c000534b:	e8 c4 de ff ff       	call   c0003214 <get_fat.isra.2>
c0005350:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005354:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005358:	39 6a 18             	cmp    DWORD PTR [edx+0x18],ebp
c000535b:	77 05                	ja     c0005362 <f_expand+0xb2>
c000535d:	bd 02 00 00 00       	mov    ebp,0x2
c0005362:	83 f8 01             	cmp    eax,0x1
c0005365:	74 20                	je     c0005387 <f_expand+0xd7>
c0005367:	83 f8 ff             	cmp    eax,0xffffffff
c000536a:	74 25                	je     c0005391 <f_expand+0xe1>
c000536c:	85 c0                	test   eax,eax
c000536e:	75 09                	jne    c0005379 <f_expand+0xc9>
c0005370:	41                   	inc    ecx
c0005371:	39 4c 24 04          	cmp    DWORD PTR [esp+0x4],ecx
c0005375:	75 07                	jne    c000537e <f_expand+0xce>
c0005377:	eb 1f                	jmp    c0005398 <f_expand+0xe8>
c0005379:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000537c:	31 c9                	xor    ecx,ecx
c000537e:	39 fd                	cmp    ebp,edi
c0005380:	75 c0                	jne    c0005342 <f_expand+0x92>
c0005382:	e9 64 ff ff ff       	jmp    c00052eb <f_expand+0x3b>
c0005387:	be 02 00 00 00       	mov    esi,0x2
c000538c:	e9 82 00 00 00       	jmp    c0005413 <f_expand+0x163>
c0005391:	be 01 00 00 00       	mov    esi,0x1
c0005396:	eb 7b                	jmp    c0005413 <f_expand+0x163>
c0005398:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c000539d:	74 2b                	je     c00053ca <f_expand+0x11a>
c000539f:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c00053a2:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c00053a6:	85 ed                	test   ebp,ebp
c00053a8:	74 24                	je     c00053ce <f_expand+0x11e>
c00053aa:	83 c9 ff             	or     ecx,0xffffffff
c00053ad:	83 fd 01             	cmp    ebp,0x1
c00053b0:	74 03                	je     c00053b5 <f_expand+0x105>
c00053b2:	8d 4f 01             	lea    ecx,[edi+0x1]
c00053b5:	89 fa                	mov    edx,edi
c00053b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00053bb:	e8 c2 d3 ff ff       	call   c0002782 <put_fat>
c00053c0:	85 c0                	test   eax,eax
c00053c2:	75 4d                	jne    c0005411 <f_expand+0x161>
c00053c4:	89 f8                	mov    eax,edi
c00053c6:	4d                   	dec    ebp
c00053c7:	47                   	inc    edi
c00053c8:	eb dc                	jmp    c00053a6 <f_expand+0xf6>
c00053ca:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053cd:	48                   	dec    eax
c00053ce:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00053d2:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c00053d7:	89 42 10             	mov    DWORD PTR [edx+0x10],eax
c00053da:	74 37                	je     c0005413 <f_expand+0x163>
c00053dc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00053df:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00053e2:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00053e6:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00053e9:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c00053ec:	83 c8 40             	or     eax,0x40
c00053ef:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c00053f2:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c00053f5:	8b 5a 18             	mov    ebx,DWORD PTR [edx+0x18]
c00053f8:	8d 4b fe             	lea    ecx,[ebx-0x2]
c00053fb:	39 c8                	cmp    eax,ecx
c00053fd:	77 14                	ja     c0005413 <f_expand+0x163>
c00053ff:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c0005403:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005406:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c0005409:	83 c8 01             	or     eax,0x1
c000540c:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c000540f:	eb 02                	jmp    c0005413 <f_expand+0x163>
c0005411:	89 c6                	mov    esi,eax
c0005413:	83 c4 2c             	add    esp,0x2c
c0005416:	89 f0                	mov    eax,esi
c0005418:	5b                   	pop    ebx
c0005419:	5e                   	pop    esi
c000541a:	5f                   	pop    edi
c000541b:	5d                   	pop    ebp
c000541c:	c3                   	ret    

c000541d <f_mkfs>:
c000541d:	55                   	push   ebp
c000541e:	57                   	push   edi
c000541f:	56                   	push   esi
c0005420:	be 0b 00 00 00       	mov    esi,0xb
c0005425:	53                   	push   ebx
c0005426:	83 ec 5c             	sub    esp,0x5c
c0005429:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000542d:	8b 6c 24 78          	mov    ebp,DWORD PTR [esp+0x78]
c0005431:	8d 44 24 70          	lea    eax,[esp+0x70]
c0005435:	e8 0e ce ff ff       	call   c0002248 <get_ldnumber>
c000543a:	85 c0                	test   eax,eax
c000543c:	0f 88 d1 07 00 00    	js     c0005c13 <f_mkfs+0x7f6>
c0005442:	8b 14 85 a0 54 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdab60]
c0005449:	85 d2                	test   edx,edx
c000544b:	74 03                	je     c0005450 <f_mkfs+0x33>
c000544d:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0005450:	85 db                	test   ebx,ebx
c0005452:	75 05                	jne    c0005459 <f_mkfs+0x3c>
c0005454:	bb 20 00 02 c0       	mov    ebx,0xc0020020
c0005459:	83 ec 0c             	sub    esp,0xc
c000545c:	0f b6 c0             	movzx  eax,al
c000545f:	be 03 00 00 00       	mov    esi,0x3
c0005464:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005468:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000546c:	e8 18 c9 ff ff       	call   c0001d89 <disk_initialize>
c0005471:	83 c4 10             	add    esp,0x10
c0005474:	a8 01                	test   al,0x1
c0005476:	0f 85 97 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c000547c:	be 0a 00 00 00       	mov    esi,0xa
c0005481:	a8 04                	test   al,0x4
c0005483:	0f 85 8a 07 00 00    	jne    c0005c13 <f_mkfs+0x7f6>
c0005489:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000548c:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0005490:	85 c0                	test   eax,eax
c0005492:	75 20                	jne    c00054b4 <f_mkfs+0x97>
c0005494:	51                   	push   ecx
c0005495:	8d 44 24 44          	lea    eax,[esp+0x44]
c0005499:	50                   	push   eax
c000549a:	6a 03                	push   0x3
c000549c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00054a0:	e8 13 c9 ff ff       	call   c0001db8 <disk_ioctl>
c00054a5:	83 c4 10             	add    esp,0x10
c00054a8:	85 c0                	test   eax,eax
c00054aa:	74 08                	je     c00054b4 <f_mkfs+0x97>
c00054ac:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054b4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c00054b8:	8d 42 ff             	lea    eax,[edx-0x1]
c00054bb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054c0:	77 04                	ja     c00054c6 <f_mkfs+0xa9>
c00054c2:	85 c2                	test   edx,eax
c00054c4:	74 08                	je     c00054ce <f_mkfs+0xb1>
c00054c6:	c7 44 24 40 01 00 00 00 	mov    DWORD PTR [esp+0x40],0x1
c00054ce:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c00054d1:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c00054d5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00054d9:	48                   	dec    eax
c00054da:	3c 01                	cmp    al,0x1
c00054dc:	76 05                	jbe    c00054e3 <f_mkfs+0xc6>
c00054de:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c00054e3:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054e6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00054ea:	48                   	dec    eax
c00054eb:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00054f0:	77 07                	ja     c00054f9 <f_mkfs+0xdc>
c00054f2:	f6 44 24 14 0f       	test   BYTE PTR [esp+0x14],0xf
c00054f7:	74 08                	je     c0005501 <f_mkfs+0xe4>
c00054f9:	c7 44 24 14 00 02 00 00 	mov    DWORD PTR [esp+0x14],0x200
c0005501:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0005504:	81 ff 00 00 00 01    	cmp    edi,0x1000000
c000550a:	77 07                	ja     c0005513 <f_mkfs+0xf6>
c000550c:	8d 47 ff             	lea    eax,[edi-0x1]
c000550f:	85 f8                	test   eax,edi
c0005511:	74 02                	je     c0005515 <f_mkfs+0xf8>
c0005513:	31 ff                	xor    edi,edi
c0005515:	81 7c 24 7c ff 01 00 00 	cmp    DWORD PTR [esp+0x7c],0x1ff
c000551d:	77 0a                	ja     c0005529 <f_mkfs+0x10c>
c000551f:	be 11 00 00 00       	mov    esi,0x11
c0005524:	e9 ea 06 00 00       	jmp    c0005c13 <f_mkfs+0x7f6>
c0005529:	8b 33                	mov    esi,DWORD PTR [ebx]
c000552b:	85 ed                	test   ebp,ebp
c000552d:	89 eb                	mov    ebx,ebp
c000552f:	75 1e                	jne    c000554f <f_mkfs+0x132>
c0005531:	83 ec 0c             	sub    esp,0xc
c0005534:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c000553b:	25 00 fe ff ff       	and    eax,0xfffffe00
c0005540:	50                   	push   eax
c0005541:	e8 da 06 00 00       	call   c0005c20 <ff_memalloc>
c0005546:	83 c4 10             	add    esp,0x10
c0005549:	89 c3                	mov    ebx,eax
c000554b:	85 c0                	test   eax,eax
c000554d:	74 d0                	je     c000551f <f_mkfs+0x102>
c000554f:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0005557:	52                   	push   edx
c0005558:	8d 44 24 48          	lea    eax,[esp+0x48]
c000555c:	50                   	push   eax
c000555d:	6a 01                	push   0x1
c000555f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005563:	e8 50 c8 ff ff       	call   c0001db8 <disk_ioctl>
c0005568:	83 c4 10             	add    esp,0x10
c000556b:	85 c0                	test   eax,eax
c000556d:	0f 85 49 06 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005573:	89 f0                	mov    eax,esi
c0005575:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000557d:	83 e0 08             	and    eax,0x8
c0005580:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0005584:	75 18                	jne    c000559e <f_mkfs+0x181>
c0005586:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000558a:	83 f8 3f             	cmp    eax,0x3f
c000558d:	76 0f                	jbe    c000559e <f_mkfs+0x181>
c000558f:	83 e8 3f             	sub    eax,0x3f
c0005592:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000559a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000559e:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c00055a2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00055a6:	83 f8 7f             	cmp    eax,0x7f
c00055a9:	0f 86 5b 02 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c00055af:	b9 80 00 00 00       	mov    ecx,0x80
c00055b4:	81 ff ff 01 01 00    	cmp    edi,0x101ff
c00055ba:	77 05                	ja     c00055c1 <f_mkfs+0x1a4>
c00055bc:	c1 ef 09             	shr    edi,0x9
c00055bf:	89 f9                	mov    ecx,edi
c00055c1:	89 f0                	mov    eax,esi
c00055c3:	89 f7                	mov    edi,esi
c00055c5:	83 e0 01             	and    eax,0x1
c00055c8:	83 e7 02             	and    edi,0x2
c00055cb:	0f b6 c0             	movzx  eax,al
c00055ce:	89 7c 24 38          	mov    DWORD PTR [esp+0x38],edi
c00055d2:	74 0a                	je     c00055de <f_mkfs+0x1c1>
c00055d4:	85 c0                	test   eax,eax
c00055d6:	0f 84 4f 01 00 00    	je     c000572b <f_mkfs+0x30e>
c00055dc:	eb 37                	jmp    c0005615 <f_mkfs+0x1f8>
c00055de:	be 13 00 00 00       	mov    esi,0x13
c00055e3:	85 c0                	test   eax,eax
c00055e5:	75 2e                	jne    c0005615 <f_mkfs+0x1f8>
c00055e7:	e9 e7 05 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c00055ec:	83 f8 02             	cmp    eax,0x2
c00055ef:	0f 85 0d 02 00 00    	jne    c0005802 <f_mkfs+0x3e5>
c00055f5:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c00055fb:	0f 86 e4 01 00 00    	jbe    c00057e5 <f_mkfs+0x3c8>
c0005601:	85 c9                	test   ecx,ecx
c0005603:	0f 85 dc 05 00 00    	jne    c0005be5 <f_mkfs+0x7c8>
c0005609:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c000560c:	83 f9 40             	cmp    ecx,0x40
c000560f:	0f 87 e0 05 00 00    	ja     c0005bf5 <f_mkfs+0x7d8>
c0005615:	89 cf                	mov    edi,ecx
c0005617:	85 c9                	test   ecx,ecx
c0005619:	75 1c                	jne    c0005637 <f_mkfs+0x21a>
c000561b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000561f:	b8 00 00 02 c0       	mov    eax,0xc0020000
c0005624:	c1 ee 0c             	shr    esi,0xc
c0005627:	bf 01 00 00 00       	mov    edi,0x1
c000562c:	0f b7 10             	movzx  edx,WORD PTR [eax]
c000562f:	85 d2                	test   edx,edx
c0005631:	0f 85 63 01 00 00    	jne    c000579a <f_mkfs+0x37d>
c0005637:	31 d2                	xor    edx,edx
c0005639:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000563d:	f7 f7                	div    edi
c000563f:	3d f5 0f 00 00       	cmp    eax,0xff5
c0005644:	0f 86 62 01 00 00    	jbe    c00057ac <f_mkfs+0x38f>
c000564a:	83 c0 02             	add    eax,0x2
c000564d:	c6 44 24 0b 02       	mov    BYTE PTR [esp+0xb],0x2
c0005652:	01 c0                	add    eax,eax
c0005654:	05 ff 01 00 00       	add    eax,0x1ff
c0005659:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005661:	c1 e8 09             	shr    eax,0x9
c0005664:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005668:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000566c:	c1 e0 05             	shl    eax,0x5
c000566f:	c1 e8 09             	shr    eax,0x9
c0005672:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0005676:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c000567b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000567f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005683:	03 44 24 24          	add    eax,DWORD PTR [esp+0x24]
c0005687:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000568b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000568f:	0f af 44 24 28       	imul   eax,DWORD PTR [esp+0x28]
c0005694:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0005698:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c000569c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00056a0:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00056a4:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00056a8:	8d 74 10 ff          	lea    esi,[eax+edx*1-0x1]
c00056ac:	f7 d8                	neg    eax
c00056ae:	21 c6                	and    esi,eax
c00056b0:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00056b5:	29 d6                	sub    esi,edx
c00056b7:	83 f8 03             	cmp    eax,0x3
c00056ba:	0f 85 ff 00 00 00    	jne    c00057bf <f_mkfs+0x3a2>
c00056c0:	01 74 24 24          	add    DWORD PTR [esp+0x24],esi
c00056c4:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c00056c8:	89 f8                	mov    eax,edi
c00056ca:	c1 e0 04             	shl    eax,0x4
c00056cd:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c00056d1:	03 44 24 34          	add    eax,DWORD PTR [esp+0x34]
c00056d5:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c00056d9:	0f 82 2b 01 00 00    	jb     c000580a <f_mkfs+0x3ed>
c00056df:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056e3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00056e7:	2b 44 24 30          	sub    eax,DWORD PTR [esp+0x30]
c00056eb:	0f af 54 24 28       	imul   edx,DWORD PTR [esp+0x28]
c00056f0:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c00056f4:	29 d0                	sub    eax,edx
c00056f6:	31 d2                	xor    edx,edx
c00056f8:	f7 f7                	div    edi
c00056fa:	89 c6                	mov    esi,eax
c00056fc:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005701:	83 f8 03             	cmp    eax,0x3
c0005704:	0f 85 e2 fe ff ff    	jne    c00055ec <f_mkfs+0x1cf>
c000570a:	81 fe f5 ff 00 00    	cmp    esi,0xfff5
c0005710:	0f 87 03 01 00 00    	ja     c0005819 <f_mkfs+0x3fc>
c0005716:	85 c9                	test   ecx,ecx
c0005718:	0f 85 ec 00 00 00    	jne    c000580a <f_mkfs+0x3ed>
c000571e:	83 ff 01             	cmp    edi,0x1
c0005721:	0f 86 e3 00 00 00    	jbe    c000580a <f_mkfs+0x3ed>
c0005727:	d1 ef                	shr    edi,1
c0005729:	89 f9                	mov    ecx,edi
c000572b:	89 ce                	mov    esi,ecx
c000572d:	85 c9                	test   ecx,ecx
c000572f:	75 25                	jne    c0005756 <f_mkfs+0x339>
c0005731:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005735:	b8 10 00 02 c0       	mov    eax,0xc0020010
c000573a:	c1 ee 11             	shr    esi,0x11
c000573d:	b9 01 00 00 00       	mov    ecx,0x1
c0005742:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0005745:	85 d2                	test   edx,edx
c0005747:	74 0b                	je     c0005754 <f_mkfs+0x337>
c0005749:	83 c0 02             	add    eax,0x2
c000574c:	39 f2                	cmp    edx,esi
c000574e:	77 04                	ja     c0005754 <f_mkfs+0x337>
c0005750:	01 c9                	add    ecx,ecx
c0005752:	eb ee                	jmp    c0005742 <f_mkfs+0x325>
c0005754:	31 f6                	xor    esi,esi
c0005756:	31 d2                	xor    edx,edx
c0005758:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000575c:	f7 f1                	div    ecx
c000575e:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0005765:	2d f6 ff 00 00       	sub    eax,0xfff6
c000576a:	c1 ea 09             	shr    edx,0x9
c000576d:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0005772:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0005776:	0f 87 8e 00 00 00    	ja     c000580a <f_mkfs+0x3ed>
c000577c:	89 cf                	mov    edi,ecx
c000577e:	c7 44 24 30 00 00 00 00 	mov    DWORD PTR [esp+0x30],0x0
c0005786:	89 f1                	mov    ecx,esi
c0005788:	c7 44 24 24 20 00 00 00 	mov    DWORD PTR [esp+0x24],0x20
c0005790:	c6 44 24 0b 03       	mov    BYTE PTR [esp+0xb],0x3
c0005795:	e9 dc fe ff ff       	jmp    c0005676 <f_mkfs+0x259>
c000579a:	83 c0 02             	add    eax,0x2
c000579d:	39 f2                	cmp    edx,esi
c000579f:	0f 87 92 fe ff ff    	ja     c0005637 <f_mkfs+0x21a>
c00057a5:	01 ff                	add    edi,edi
c00057a7:	e9 80 fe ff ff       	jmp    c000562c <f_mkfs+0x20f>
c00057ac:	8d 04 40             	lea    eax,[eax+eax*2]
c00057af:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c00057b4:	40                   	inc    eax
c00057b5:	d1 e8                	shr    eax,1
c00057b7:	83 c0 03             	add    eax,0x3
c00057ba:	e9 95 fe ff ff       	jmp    c0005654 <f_mkfs+0x237>
c00057bf:	31 d2                	xor    edx,edx
c00057c1:	89 f0                	mov    eax,esi
c00057c3:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057c7:	85 d2                	test   edx,edx
c00057c9:	74 09                	je     c00057d4 <f_mkfs+0x3b7>
c00057cb:	4e                   	dec    esi
c00057cc:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c00057d0:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c00057d4:	89 f0                	mov    eax,esi
c00057d6:	31 d2                	xor    edx,edx
c00057d8:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00057dc:	01 44 24 18          	add    DWORD PTR [esp+0x18],eax
c00057e0:	e9 e3 fe ff ff       	jmp    c00056c8 <f_mkfs+0x2ab>
c00057e5:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c00057eb:	77 2c                	ja     c0005819 <f_mkfs+0x3fc>
c00057ed:	85 c9                	test   ecx,ecx
c00057ef:	75 19                	jne    c000580a <f_mkfs+0x3ed>
c00057f1:	8d 0c 3f             	lea    ecx,[edi+edi*1]
c00057f4:	81 f9 80 00 00 00    	cmp    ecx,0x80
c00057fa:	0f 86 15 fe ff ff    	jbe    c0005615 <f_mkfs+0x1f8>
c0005800:	eb 08                	jmp    c000580a <f_mkfs+0x3ed>
c0005802:	81 fe f5 0f 00 00    	cmp    esi,0xff5
c0005808:	76 0a                	jbe    c0005814 <f_mkfs+0x3f7>
c000580a:	be 0e 00 00 00       	mov    esi,0xe
c000580f:	e9 bf 03 00 00       	jmp    c0005bd3 <f_mkfs+0x7b6>
c0005814:	c6 44 24 0b 01       	mov    BYTE PTR [esp+0xb],0x1
c0005819:	31 d2                	xor    edx,edx
c000581b:	b9 00 02 00 00       	mov    ecx,0x200
c0005820:	89 d8                	mov    eax,ebx
c0005822:	e8 f1 c5 ff ff       	call   c0001e18 <mem_set>
c0005827:	b9 0b 00 00 00       	mov    ecx,0xb
c000582c:	ba b2 ff 01 c0       	mov    edx,0xc001ffb2
c0005831:	89 d8                	mov    eax,ebx
c0005833:	e8 cb c5 ff ff       	call   c0001e03 <mem_cpy>
c0005838:	8d 43 0b             	lea    eax,[ebx+0xb]
c000583b:	ba 00 02 00 00       	mov    edx,0x200
c0005840:	e8 b7 c5 ff ff       	call   c0001dfc <st_word>
c0005845:	89 f8                	mov    eax,edi
c0005847:	0f b7 54 24 24       	movzx  edx,WORD PTR [esp+0x24]
c000584c:	88 43 0d             	mov    BYTE PTR [ebx+0xd],al
c000584f:	8d 43 0e             	lea    eax,[ebx+0xe]
c0005852:	e8 a5 c5 ff ff       	call   c0001dfc <st_word>
c0005857:	8a 44 24 2c          	mov    al,BYTE PTR [esp+0x2c]
c000585b:	88 43 10             	mov    BYTE PTR [ebx+0x10],al
c000585e:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005863:	83 f8 03             	cmp    eax,0x3
c0005866:	75 08                	jne    c0005870 <f_mkfs+0x453>
c0005868:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005870:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005874:	8d 43 11             	lea    eax,[ebx+0x11]
c0005877:	e8 80 c5 ff ff       	call   c0001dfc <st_word>
c000587c:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0005880:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0005886:	77 0a                	ja     c0005892 <f_mkfs+0x475>
c0005888:	8d 43 13             	lea    eax,[ebx+0x13]
c000588b:	e8 6c c5 ff ff       	call   c0001dfc <st_word>
c0005890:	eb 08                	jmp    c000589a <f_mkfs+0x47d>
c0005892:	8d 43 20             	lea    eax,[ebx+0x20]
c0005895:	e8 66 c5 ff ff       	call   c0001e00 <st_dword>
c000589a:	8d 43 18             	lea    eax,[ebx+0x18]
c000589d:	ba 3f 00 00 00       	mov    edx,0x3f
c00058a2:	c6 43 15 f8          	mov    BYTE PTR [ebx+0x15],0xf8
c00058a6:	e8 51 c5 ff ff       	call   c0001dfc <st_word>
c00058ab:	8d 43 1a             	lea    eax,[ebx+0x1a]
c00058ae:	ba ff 00 00 00       	mov    edx,0xff
c00058b3:	e8 44 c5 ff ff       	call   c0001dfc <st_word>
c00058b8:	8d 43 1c             	lea    eax,[ebx+0x1c]
c00058bb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00058bf:	e8 3c c5 ff ff       	call   c0001e00 <st_dword>
c00058c4:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c00058c9:	83 f8 03             	cmp    eax,0x3
c00058cc:	75 57                	jne    c0005925 <f_mkfs+0x508>
c00058ce:	8d 43 43             	lea    eax,[ebx+0x43]
c00058d1:	ba 00 00 21 50       	mov    edx,0x50210000
c00058d6:	e8 25 c5 ff ff       	call   c0001e00 <st_dword>
c00058db:	8d 43 24             	lea    eax,[ebx+0x24]
c00058de:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00058e2:	e8 19 c5 ff ff       	call   c0001e00 <st_dword>
c00058e7:	8d 43 2c             	lea    eax,[ebx+0x2c]
c00058ea:	ba 02 00 00 00       	mov    edx,0x2
c00058ef:	e8 0c c5 ff ff       	call   c0001e00 <st_dword>
c00058f4:	8d 43 30             	lea    eax,[ebx+0x30]
c00058f7:	ba 01 00 00 00       	mov    edx,0x1
c00058fc:	e8 fb c4 ff ff       	call   c0001dfc <st_word>
c0005901:	8d 43 32             	lea    eax,[ebx+0x32]
c0005904:	ba 06 00 00 00       	mov    edx,0x6
c0005909:	e8 ee c4 ff ff       	call   c0001dfc <st_word>
c000590e:	c6 43 40 80          	mov    BYTE PTR [ebx+0x40],0x80
c0005912:	c6 43 42 29          	mov    BYTE PTR [ebx+0x42],0x29
c0005916:	8d 43 47             	lea    eax,[ebx+0x47]
c0005919:	b9 13 00 00 00       	mov    ecx,0x13
c000591e:	ba be ff 01 c0       	mov    edx,0xc001ffbe
c0005923:	eb 2f                	jmp    c0005954 <f_mkfs+0x537>
c0005925:	8d 43 27             	lea    eax,[ebx+0x27]
c0005928:	ba 00 00 21 50       	mov    edx,0x50210000
c000592d:	e8 ce c4 ff ff       	call   c0001e00 <st_dword>
c0005932:	0f b7 54 24 18       	movzx  edx,WORD PTR [esp+0x18]
c0005937:	8d 43 16             	lea    eax,[ebx+0x16]
c000593a:	e8 bd c4 ff ff       	call   c0001dfc <st_word>
c000593f:	c6 43 24 80          	mov    BYTE PTR [ebx+0x24],0x80
c0005943:	c6 43 26 29          	mov    BYTE PTR [ebx+0x26],0x29
c0005947:	8d 43 2b             	lea    eax,[ebx+0x2b]
c000594a:	b9 13 00 00 00       	mov    ecx,0x13
c000594f:	ba d2 ff 01 c0       	mov    edx,0xc001ffd2
c0005954:	e8 aa c4 ff ff       	call   c0001e03 <mem_cpy>
c0005959:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c000595f:	ba 55 aa 00 00       	mov    edx,0xaa55
c0005964:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005968:	e8 8f c4 ff ff       	call   c0001dfc <st_word>
c000596d:	6a 01                	push   0x1
c000596f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005973:	53                   	push   ebx
c0005974:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005978:	e8 25 c4 ff ff       	call   c0001da2 <disk_write>
c000597d:	83 c4 10             	add    esp,0x10
c0005980:	85 c0                	test   eax,eax
c0005982:	0f 85 34 02 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005988:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c000598d:	83 f8 03             	cmp    eax,0x3
c0005990:	0f 85 98 00 00 00    	jne    c0005a2e <f_mkfs+0x611>
c0005996:	6a 01                	push   0x1
c0005998:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000599c:	83 c0 06             	add    eax,0x6
c000599f:	50                   	push   eax
c00059a0:	53                   	push   ebx
c00059a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00059a5:	e8 f8 c3 ff ff       	call   c0001da2 <disk_write>
c00059aa:	b9 00 02 00 00       	mov    ecx,0x200
c00059af:	31 d2                	xor    edx,edx
c00059b1:	89 d8                	mov    eax,ebx
c00059b3:	e8 60 c4 ff ff       	call   c0001e18 <mem_set>
c00059b8:	ba 52 52 61 41       	mov    edx,0x41615252
c00059bd:	89 d8                	mov    eax,ebx
c00059bf:	e8 3c c4 ff ff       	call   c0001e00 <st_dword>
c00059c4:	8d 83 e4 01 00 00    	lea    eax,[ebx+0x1e4]
c00059ca:	ba 72 72 41 61       	mov    edx,0x61417272
c00059cf:	e8 2c c4 ff ff       	call   c0001e00 <st_dword>
c00059d4:	8d 56 ff             	lea    edx,[esi-0x1]
c00059d7:	8d 83 e8 01 00 00    	lea    eax,[ebx+0x1e8]
c00059dd:	e8 1e c4 ff ff       	call   c0001e00 <st_dword>
c00059e2:	8d 83 ec 01 00 00    	lea    eax,[ebx+0x1ec]
c00059e8:	ba 02 00 00 00       	mov    edx,0x2
c00059ed:	e8 0e c4 ff ff       	call   c0001e00 <st_dword>
c00059f2:	ba 55 aa 00 00       	mov    edx,0xaa55
c00059f7:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c00059fd:	e8 fa c3 ff ff       	call   c0001dfc <st_word>
c0005a02:	6a 01                	push   0x1
c0005a04:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005a08:	83 c0 07             	add    eax,0x7
c0005a0b:	50                   	push   eax
c0005a0c:	53                   	push   ebx
c0005a0d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0005a11:	e8 8c c3 ff ff       	call   c0001da2 <disk_write>
c0005a16:	83 c4 20             	add    esp,0x20
c0005a19:	6a 01                	push   0x1
c0005a1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005a1f:	40                   	inc    eax
c0005a20:	50                   	push   eax
c0005a21:	53                   	push   ebx
c0005a22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005a26:	e8 77 c3 ff ff       	call   c0001da2 <disk_write>
c0005a2b:	83 c4 10             	add    esp,0x10
c0005a2e:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c0005a32:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0005a36:	c1 e8 09             	shr    eax,0x9
c0005a39:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c0005a3f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005a43:	31 d2                	xor    edx,edx
c0005a45:	89 d8                	mov    eax,ebx
c0005a47:	e8 cc c3 ff ff       	call   c0001e18 <mem_set>
c0005a4c:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005a51:	31 c9                	xor    ecx,ecx
c0005a53:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0005a5b:	83 f8 01             	cmp    eax,0x1
c0005a5e:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0005a62:	0f 94 c1             	sete   cl
c0005a65:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0005a69:	ff 4c 24 14          	dec    DWORD PTR [esp+0x14]
c0005a6d:	81 64 24 14 00 00 00 ff 	and    DWORD PTR [esp+0x14],0xff000000
c0005a75:	81 44 24 14 f8 ff ff 00 	add    DWORD PTR [esp+0x14],0xfffff8
c0005a7d:	83 7c 24 2c 03       	cmp    DWORD PTR [esp+0x2c],0x3
c0005a82:	75 21                	jne    c0005aa5 <f_mkfs+0x688>
c0005a84:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0005a89:	89 d8                	mov    eax,ebx
c0005a8b:	e8 70 c3 ff ff       	call   c0001e00 <st_dword>
c0005a90:	8d 43 04             	lea    eax,[ebx+0x4]
c0005a93:	83 ca ff             	or     edx,0xffffffff
c0005a96:	e8 65 c3 ff ff       	call   c0001e00 <st_dword>
c0005a9b:	8d 43 08             	lea    eax,[ebx+0x8]
c0005a9e:	ba ff ff ff 0f       	mov    edx,0xfffffff
c0005aa3:	eb 06                	jmp    c0005aab <f_mkfs+0x68e>
c0005aa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0005aa9:	89 d8                	mov    eax,ebx
c0005aab:	e8 50 c3 ff ff       	call   c0001e00 <st_dword>
c0005ab0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005ab4:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0005ab8:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0005abc:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005ac0:	39 ce                	cmp    esi,ecx
c0005ac2:	76 02                	jbe    c0005ac6 <f_mkfs+0x6a9>
c0005ac4:	89 ce                	mov    esi,ecx
c0005ac6:	56                   	push   esi
c0005ac7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005acb:	53                   	push   ebx
c0005acc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005ad0:	e8 cd c2 ff ff       	call   c0001da2 <disk_write>
c0005ad5:	83 c4 10             	add    esp,0x10
c0005ad8:	85 c0                	test   eax,eax
c0005ada:	0f 85 dc 00 00 00    	jne    c0005bbc <f_mkfs+0x79f>
c0005ae0:	31 d2                	xor    edx,edx
c0005ae2:	b9 00 02 00 00       	mov    ecx,0x200
c0005ae7:	89 d8                	mov    eax,ebx
c0005ae9:	e8 2a c3 ff ff       	call   c0001e18 <mem_set>
c0005aee:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005af2:	29 74 24 1c          	sub    DWORD PTR [esp+0x1c],esi
c0005af6:	75 c0                	jne    c0005ab8 <f_mkfs+0x69b>
c0005af8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0005afc:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0005b04:	40                   	inc    eax
c0005b05:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c0005b09:	0f 87 6e ff ff ff    	ja     c0005a7d <f_mkfs+0x660>
c0005b0f:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b14:	83 f8 03             	cmp    eax,0x3
c0005b17:	74 04                	je     c0005b1d <f_mkfs+0x700>
c0005b19:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0005b1d:	89 fe                	mov    esi,edi
c0005b1f:	3b 7c 24 10          	cmp    edi,DWORD PTR [esp+0x10]
c0005b23:	76 04                	jbe    c0005b29 <f_mkfs+0x70c>
c0005b25:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005b29:	56                   	push   esi
c0005b2a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0005b2e:	53                   	push   ebx
c0005b2f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005b33:	e8 6a c2 ff ff       	call   c0001da2 <disk_write>
c0005b38:	83 c4 10             	add    esp,0x10
c0005b3b:	85 c0                	test   eax,eax
c0005b3d:	75 7d                	jne    c0005bbc <f_mkfs+0x79f>
c0005b3f:	01 74 24 20          	add    DWORD PTR [esp+0x20],esi
c0005b43:	29 f7                	sub    edi,esi
c0005b45:	75 d6                	jne    c0005b1d <f_mkfs+0x700>
c0005b47:	0f b6 44 24 0b       	movzx  eax,BYTE PTR [esp+0xb]
c0005b4c:	b9 0c 00 00 00       	mov    ecx,0xc
c0005b51:	83 f8 03             	cmp    eax,0x3
c0005b54:	74 1e                	je     c0005b74 <f_mkfs+0x757>
c0005b56:	b9 06 00 00 00       	mov    ecx,0x6
c0005b5b:	81 7c 24 44 ff ff 00 00 	cmp    DWORD PTR [esp+0x44],0xffff
c0005b63:	77 0f                	ja     c0005b74 <f_mkfs+0x757>
c0005b65:	b9 04 00 00 00       	mov    ecx,0x4
c0005b6a:	83 f8 02             	cmp    eax,0x2
c0005b6d:	74 05                	je     c0005b74 <f_mkfs+0x757>
c0005b6f:	b9 01 00 00 00       	mov    ecx,0x1
c0005b74:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c0005b79:	75 2a                	jne    c0005ba5 <f_mkfs+0x788>
c0005b7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005b7f:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0005b87:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005b8b:	83 ec 0c             	sub    esp,0xc
c0005b8e:	53                   	push   ebx
c0005b8f:	8d 54 24 58          	lea    edx,[esp+0x58]
c0005b93:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005b97:	e8 89 d2 ff ff       	call   c0002e25 <create_partition>
c0005b9c:	83 c4 10             	add    esp,0x10
c0005b9f:	89 c6                	mov    esi,eax
c0005ba1:	85 c0                	test   eax,eax
c0005ba3:	75 2e                	jne    c0005bd3 <f_mkfs+0x7b6>
c0005ba5:	31 f6                	xor    esi,esi
c0005ba7:	50                   	push   eax
c0005ba8:	6a 00                	push   0x0
c0005baa:	6a 00                	push   0x0
c0005bac:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0005bb0:	e8 03 c2 ff ff       	call   c0001db8 <disk_ioctl>
c0005bb5:	83 c4 10             	add    esp,0x10
c0005bb8:	85 c0                	test   eax,eax
c0005bba:	74 17                	je     c0005bd3 <f_mkfs+0x7b6>
c0005bbc:	85 ed                	test   ebp,ebp
c0005bbe:	75 0c                	jne    c0005bcc <f_mkfs+0x7af>
c0005bc0:	83 ec 0c             	sub    esp,0xc
c0005bc3:	53                   	push   ebx
c0005bc4:	e8 6f 00 00 00       	call   c0005c38 <ff_memfree>
c0005bc9:	83 c4 10             	add    esp,0x10
c0005bcc:	be 01 00 00 00       	mov    esi,0x1
c0005bd1:	eb 40                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005bd3:	85 ed                	test   ebp,ebp
c0005bd5:	75 3c                	jne    c0005c13 <f_mkfs+0x7f6>
c0005bd7:	83 ec 0c             	sub    esp,0xc
c0005bda:	53                   	push   ebx
c0005bdb:	e8 58 00 00 00       	call   c0005c38 <ff_memfree>
c0005be0:	83 c4 10             	add    esp,0x10
c0005be3:	eb 2e                	jmp    c0005c13 <f_mkfs+0x7f6>
c0005be5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bea:	0f 85 3b fb ff ff    	jne    c000572b <f_mkfs+0x30e>
c0005bf0:	e9 15 fc ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005bf5:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c0005bfa:	0f 85 31 fb ff ff    	jne    c0005731 <f_mkfs+0x314>
c0005c00:	89 cf                	mov    edi,ecx
c0005c02:	81 f9 80 00 00 00    	cmp    ecx,0x80
c0005c08:	0f 86 29 fa ff ff    	jbe    c0005637 <f_mkfs+0x21a>
c0005c0e:	e9 f7 fb ff ff       	jmp    c000580a <f_mkfs+0x3ed>
c0005c13:	83 c4 5c             	add    esp,0x5c
c0005c16:	89 f0                	mov    eax,esi
c0005c18:	5b                   	pop    ebx
c0005c19:	5e                   	pop    esi
c0005c1a:	5f                   	pop    edi
c0005c1b:	5d                   	pop    ebp
c0005c1c:	c3                   	ret    
c0005c1d:	66 90                	xchg   ax,ax
c0005c1f:	90                   	nop

c0005c20 <ff_memalloc>:
c0005c20:	83 ec 0c             	sub    esp,0xc
c0005c23:	83 ec 0c             	sub    esp,0xc
c0005c26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c2a:	e8 87 1e 00 00       	call   c0007ab6 <malloc>
c0005c2f:	83 c4 10             	add    esp,0x10
c0005c32:	83 c4 0c             	add    esp,0xc
c0005c35:	c3                   	ret    
c0005c36:	66 90                	xchg   ax,ax

c0005c38 <ff_memfree>:
c0005c38:	83 ec 0c             	sub    esp,0xc
c0005c3b:	83 ec 0c             	sub    esp,0xc
c0005c3e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0005c42:	e8 7f 1e 00 00       	call   c0007ac6 <free>
c0005c47:	83 c4 10             	add    esp,0x10
c0005c4a:	90                   	nop
c0005c4b:	83 c4 0c             	add    esp,0xc
c0005c4e:	c3                   	ret    
c0005c4f:	90                   	nop

c0005c50 <ff_uni2oem>:
c0005c50:	83 ec 14             	sub    esp,0x14
c0005c53:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005c57:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005c5b:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c62:	c7 44 24 0c 00 04 02 c0 	mov    DWORD PTR [esp+0xc],0xc0020400
c0005c6a:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c0005c6f:	77 0b                	ja     c0005c7c <ff_uni2oem+0x2c>
c0005c71:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005c75:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005c7a:	eb 68                	jmp    c0005ce4 <ff_uni2oem+0x94>
c0005c7c:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c0005c84:	77 5e                	ja     c0005ce4 <ff_uni2oem+0x94>
c0005c86:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005c8a:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005c8f:	75 53                	jne    c0005ce4 <ff_uni2oem+0x94>
c0005c91:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c0005c98:	eb 12                	jmp    c0005cac <ff_uni2oem+0x5c>
c0005c9a:	66 90                	xchg   ax,ax
c0005c9c:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ca1:	83 c0 01             	add    eax,0x1
c0005ca4:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ca9:	8d 76 00             	lea    esi,[esi+0x0]
c0005cac:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cb1:	83 f8 7f             	cmp    eax,0x7f
c0005cb4:	77 1e                	ja     c0005cd4 <ff_uni2oem+0x84>
c0005cb6:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0005cbb:	01 c0                	add    eax,eax
c0005cbd:	89 c2                	mov    edx,eax
c0005cbf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005cc3:	01 d0                	add    eax,edx
c0005cc5:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005cc8:	0f b7 c0             	movzx  eax,ax
c0005ccb:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0005ccf:	75 cb                	jne    c0005c9c <ff_uni2oem+0x4c>
c0005cd1:	8d 76 00             	lea    esi,[esi+0x0]
c0005cd4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005cd9:	83 e8 80             	sub    eax,0xffffff80
c0005cdc:	0f b6 c0             	movzx  eax,al
c0005cdf:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0005ce4:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c0005ce9:	83 c4 14             	add    esp,0x14
c0005cec:	c3                   	ret    
c0005ced:	8d 76 00             	lea    esi,[esi+0x0]

c0005cf0 <ff_oem2uni>:
c0005cf0:	83 ec 18             	sub    esp,0x18
c0005cf3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0005cf7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005cfb:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0005d00:	66 89 04 24          	mov    WORD PTR [esp],ax
c0005d04:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c0005d0b:	c7 44 24 10 00 04 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020400
c0005d13:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d18:	83 f8 7f             	cmp    eax,0x7f
c0005d1b:	77 0b                	ja     c0005d28 <ff_oem2uni+0x38>
c0005d1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005d21:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d26:	eb 34                	jmp    c0005d5c <ff_oem2uni+0x6c>
c0005d28:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c0005d2c:	3d b5 01 00 00       	cmp    eax,0x1b5
c0005d31:	75 29                	jne    c0005d5c <ff_oem2uni+0x6c>
c0005d33:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d38:	3d ff 00 00 00       	cmp    eax,0xff
c0005d3d:	77 1d                	ja     c0005d5c <ff_oem2uni+0x6c>
c0005d3f:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005d44:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0005d49:	01 c0                	add    eax,eax
c0005d4b:	89 c2                	mov    edx,eax
c0005d4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005d51:	01 d0                	add    eax,edx
c0005d53:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005d56:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0005d5b:	90                   	nop
c0005d5c:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c0005d61:	83 c4 18             	add    esp,0x18
c0005d64:	c3                   	ret    
c0005d65:	8d 76 00             	lea    esi,[esi+0x0]

c0005d68 <ff_wtoupper>:
c0005d68:	83 ec 10             	sub    esp,0x10
c0005d6b:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0005d73:	0f 87 ab 01 00 00    	ja     c0005f24 <ff_wtoupper+0x1bc>
c0005d79:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005d7d:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005d82:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005d87:	3d ff 0f 00 00       	cmp    eax,0xfff
c0005d8c:	77 0a                	ja     c0005d98 <ff_wtoupper+0x30>
c0005d8e:	b8 00 02 02 c0       	mov    eax,0xc0020200
c0005d93:	eb 0b                	jmp    c0005da0 <ff_wtoupper+0x38>
c0005d95:	8d 76 00             	lea    esi,[esi+0x0]
c0005d98:	b8 40 01 02 c0       	mov    eax,0xc0020140
c0005d9d:	8d 76 00             	lea    esi,[esi+0x0]
c0005da0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005da4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005da8:	8d 50 02             	lea    edx,[eax+0x2]
c0005dab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005daf:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005db2:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c0005db7:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dbc:	85 c0                	test   eax,eax
c0005dbe:	0f 84 54 01 00 00    	je     c0005f18 <ff_wtoupper+0x1b0>
c0005dc4:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005dc9:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005dce:	39 c2                	cmp    edx,eax
c0005dd0:	0f 82 42 01 00 00    	jb     c0005f18 <ff_wtoupper+0x1b0>
c0005dd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005dda:	8d 50 02             	lea    edx,[eax+0x2]
c0005ddd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005de1:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005de4:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005de9:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005dee:	c1 e8 08             	shr    eax,0x8
c0005df1:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0005df6:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0005dfb:	0f b6 c0             	movzx  eax,al
c0005dfe:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0005e03:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005e08:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0005e0d:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0005e12:	01 ca                	add    edx,ecx
c0005e14:	39 d0                	cmp    eax,edx
c0005e16:	0f 8d d8 00 00 00    	jge    c0005ef4 <ff_wtoupper+0x18c>
c0005e1c:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005e21:	83 f8 08             	cmp    eax,0x8
c0005e24:	0f 87 ea 00 00 00    	ja     c0005f14 <ff_wtoupper+0x1ac>
c0005e2a:	8b 04 85 00 01 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdff00]
c0005e31:	ff e0                	jmp    eax
c0005e33:	90                   	nop
c0005e34:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c0005e39:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0005e3e:	29 c2                	sub    edx,eax
c0005e40:	89 d0                	mov    eax,edx
c0005e42:	01 c0                	add    eax,eax
c0005e44:	89 c2                	mov    edx,eax
c0005e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005e4a:	01 d0                	add    eax,edx
c0005e4c:	66 8b 00             	mov    ax,WORD PTR [eax]
c0005e4f:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e54:	e9 97 00 00 00       	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e59:	8d 76 00             	lea    esi,[esi+0x0]
c0005e5c:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0005e61:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005e65:	89 d1                	mov    ecx,edx
c0005e67:	29 c1                	sub    ecx,eax
c0005e69:	89 c8                	mov    eax,ecx
c0005e6b:	83 e0 01             	and    eax,0x1
c0005e6e:	89 c2                	mov    edx,eax
c0005e70:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e75:	29 d0                	sub    eax,edx
c0005e77:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e7c:	eb 72                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e7e:	66 90                	xchg   ax,ax
c0005e80:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e85:	83 e8 10             	sub    eax,0x10
c0005e88:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e8d:	eb 61                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e8f:	90                   	nop
c0005e90:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005e95:	83 e8 20             	sub    eax,0x20
c0005e98:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005e9d:	eb 51                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005e9f:	90                   	nop
c0005ea0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ea5:	83 e8 30             	sub    eax,0x30
c0005ea8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ead:	eb 41                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005eaf:	90                   	nop
c0005eb0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005eb5:	83 e8 1a             	sub    eax,0x1a
c0005eb8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ebd:	eb 31                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ebf:	90                   	nop
c0005ec0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ec5:	83 c0 08             	add    eax,0x8
c0005ec8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005ecd:	eb 21                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005ecf:	90                   	nop
c0005ed0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ed5:	83 e8 50             	sub    eax,0x50
c0005ed8:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005edd:	eb 11                	jmp    c0005ef0 <ff_wtoupper+0x188>
c0005edf:	90                   	nop
c0005ee0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0005ee5:	2d 60 1c 00 00       	sub    eax,0x1c60
c0005eea:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0005eef:	90                   	nop
c0005ef0:	eb 22                	jmp    c0005f14 <ff_wtoupper+0x1ac>
c0005ef2:	66 90                	xchg   ax,ax
c0005ef4:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0005ef9:	85 c0                	test   eax,eax
c0005efb:	0f 85 a3 fe ff ff    	jne    c0005da4 <ff_wtoupper+0x3c>
c0005f01:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c0005f06:	01 c0                	add    eax,eax
c0005f08:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c0005f0c:	e9 93 fe ff ff       	jmp    c0005da4 <ff_wtoupper+0x3c>
c0005f11:	8d 76 00             	lea    esi,[esi+0x0]
c0005f14:	90                   	nop
c0005f15:	8d 76 00             	lea    esi,[esi+0x0]
c0005f18:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c0005f1d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0005f21:	8d 76 00             	lea    esi,[esi+0x0]
c0005f24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0005f28:	83 c4 10             	add    esp,0x10
c0005f2b:	c3                   	ret    

c0005f2c <utf2ucs>:
c0005f2c:	57                   	push   edi
c0005f2d:	31 c9                	xor    ecx,ecx
c0005f2f:	56                   	push   esi
c0005f30:	89 d7                	mov    edi,edx
c0005f32:	53                   	push   ebx
c0005f33:	0f be 1c 0f          	movsx  ebx,BYTE PTR [edi+ecx*1]
c0005f37:	88 5c 48 01          	mov    BYTE PTR [eax+ecx*2+0x1],bl
c0005f3b:	89 de                	mov    esi,ebx
c0005f3d:	c1 fe 08             	sar    esi,0x8
c0005f40:	89 f2                	mov    edx,esi
c0005f42:	88 14 48             	mov    BYTE PTR [eax+ecx*2],dl
c0005f45:	41                   	inc    ecx
c0005f46:	85 db                	test   ebx,ebx
c0005f48:	75 e9                	jne    c0005f33 <utf2ucs+0x7>
c0005f4a:	5b                   	pop    ebx
c0005f4b:	5e                   	pop    esi
c0005f4c:	5f                   	pop    edi
c0005f4d:	c3                   	ret    

c0005f4e <ucs2utfn>:
c0005f4e:	83 e1 fe             	and    ecx,0xfffffffe
c0005f51:	01 d1                	add    ecx,edx
c0005f53:	39 d1                	cmp    ecx,edx
c0005f55:	75 04                	jne    c0005f5b <ucs2utfn+0xd>
c0005f57:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005f5a:	c3                   	ret    
c0005f5b:	57                   	push   edi
c0005f5c:	56                   	push   esi
c0005f5d:	53                   	push   ebx
c0005f5e:	0f be 1a             	movsx  ebx,BYTE PTR [edx]
c0005f61:	83 c2 02             	add    edx,0x2
c0005f64:	89 de                	mov    esi,ebx
c0005f66:	0f be 5a ff          	movsx  ebx,BYTE PTR [edx-0x1]
c0005f6a:	c1 e6 08             	shl    esi,0x8
c0005f6d:	09 f3                	or     ebx,esi
c0005f6f:	83 fb 3b             	cmp    ebx,0x3b
c0005f72:	74 50                	je     c0005fc4 <ucs2utfn+0x76>
c0005f74:	83 fb 7f             	cmp    ebx,0x7f
c0005f77:	7f 05                	jg     c0005f7e <ucs2utfn+0x30>
c0005f79:	88 18                	mov    BYTE PTR [eax],bl
c0005f7b:	40                   	inc    eax
c0005f7c:	eb 42                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005f7e:	89 de                	mov    esi,ebx
c0005f80:	89 df                	mov    edi,ebx
c0005f82:	c1 fe 06             	sar    esi,0x6
c0005f85:	83 e7 3f             	and    edi,0x3f
c0005f88:	83 cf 80             	or     edi,0xffffff80
c0005f8b:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0005f91:	7f 12                	jg     c0005fa5 <ucs2utfn+0x57>
c0005f93:	83 ce c0             	or     esi,0xffffffc0
c0005f96:	83 c0 02             	add    eax,0x2
c0005f99:	89 f3                	mov    ebx,esi
c0005f9b:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005f9e:	89 fb                	mov    ebx,edi
c0005fa0:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fa3:	eb 1b                	jmp    c0005fc0 <ucs2utfn+0x72>
c0005fa5:	c1 fb 0c             	sar    ebx,0xc
c0005fa8:	83 e6 3f             	and    esi,0x3f
c0005fab:	83 cb e0             	or     ebx,0xffffffe0
c0005fae:	83 ce 80             	or     esi,0xffffff80
c0005fb1:	88 18                	mov    BYTE PTR [eax],bl
c0005fb3:	89 f3                	mov    ebx,esi
c0005fb5:	83 c0 03             	add    eax,0x3
c0005fb8:	88 58 fe             	mov    BYTE PTR [eax-0x2],bl
c0005fbb:	89 fb                	mov    ebx,edi
c0005fbd:	88 58 ff             	mov    BYTE PTR [eax-0x1],bl
c0005fc0:	39 d1                	cmp    ecx,edx
c0005fc2:	75 9a                	jne    c0005f5e <ucs2utfn+0x10>
c0005fc4:	5b                   	pop    ebx
c0005fc5:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0005fc8:	5e                   	pop    esi
c0005fc9:	5f                   	pop    edi
c0005fca:	c3                   	ret    

c0005fcb <isjoliet>:
c0005fcb:	31 d2                	xor    edx,edx
c0005fcd:	80 38 25             	cmp    BYTE PTR [eax],0x25
c0005fd0:	75 26                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd2:	80 78 01 2f          	cmp    BYTE PTR [eax+0x1],0x2f
c0005fd6:	75 20                	jne    c0005ff8 <isjoliet+0x2d>
c0005fd8:	0f be 40 02          	movsx  eax,BYTE PTR [eax+0x2]
c0005fdc:	ba 02 00 00 00       	mov    edx,0x2
c0005fe1:	83 f8 43             	cmp    eax,0x43
c0005fe4:	74 12                	je     c0005ff8 <isjoliet+0x2d>
c0005fe6:	ba 03 00 00 00       	mov    edx,0x3
c0005feb:	83 f8 45             	cmp    eax,0x45
c0005fee:	74 08                	je     c0005ff8 <isjoliet+0x2d>
c0005ff0:	31 d2                	xor    edx,edx
c0005ff2:	83 f8 40             	cmp    eax,0x40
c0005ff5:	0f 94 c2             	sete   dl
c0005ff8:	89 d0                	mov    eax,edx
c0005ffa:	c3                   	ret    

c0005ffb <htohl_32>:
c0005ffb:	8b 00                	mov    eax,DWORD PTR [eax]
c0005ffd:	c3                   	ret    

c0005ffe <iso_733>:
c0005ffe:	eb fb                	jmp    c0005ffb <htohl_32>

c0006000 <bgrad_cache>:
c0006000:	83 fa 0e             	cmp    edx,0xe
c0006003:	77 16                	ja     c000601b <bgrad_cache+0x1b>
c0006005:	53                   	push   ebx
c0006006:	8b 0c 90             	mov    ecx,DWORD PTR [eax+edx*4]
c0006009:	8b 5c 90 04          	mov    ebx,DWORD PTR [eax+edx*4+0x4]
c000600d:	89 1c 90             	mov    DWORD PTR [eax+edx*4],ebx
c0006010:	42                   	inc    edx
c0006011:	83 fa 0f             	cmp    edx,0xf
c0006014:	75 f3                	jne    c0006009 <bgrad_cache+0x9>
c0006016:	89 48 3c             	mov    DWORD PTR [eax+0x3c],ecx
c0006019:	5b                   	pop    ebx
c000601a:	c3                   	ret    
c000601b:	c3                   	ret    

c000601c <ucscompare>:
c000601c:	55                   	push   ebp
c000601d:	57                   	push   edi
c000601e:	89 c7                	mov    edi,eax
c0006020:	56                   	push   esi
c0006021:	89 d6                	mov    esi,edx
c0006023:	53                   	push   ebx
c0006024:	31 d2                	xor    edx,edx
c0006026:	83 ec 1c             	sub    esp,0x1c
c0006029:	0f be 1c 16          	movsx  ebx,BYTE PTR [esi+edx*1]
c000602d:	0f be 44 16 01       	movsx  eax,BYTE PTR [esi+edx*1+0x1]
c0006032:	c1 e3 08             	shl    ebx,0x8
c0006035:	09 c3                	or     ebx,eax
c0006037:	39 ca                	cmp    edx,ecx
c0006039:	7d 42                	jge    c000607d <ucscompare+0x61>
c000603b:	0f be 04 17          	movsx  eax,BYTE PTR [edi+edx*1]
c000603f:	0f be 6c 17 01       	movsx  ebp,BYTE PTR [edi+edx*1+0x1]
c0006044:	c1 e0 08             	shl    eax,0x8
c0006047:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000604b:	09 e8                	or     eax,ebp
c000604d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0006051:	83 f8 3b             	cmp    eax,0x3b
c0006054:	74 27                	je     c000607d <ucscompare+0x61>
c0006056:	83 ec 0c             	sub    esp,0xc
c0006059:	50                   	push   eax
c000605a:	e8 f1 a8 ff ff       	call   c0000950 <tolower>
c000605f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0006062:	89 c5                	mov    ebp,eax
c0006064:	e8 e7 a8 ff ff       	call   c0000950 <tolower>
c0006069:	83 c4 10             	add    esp,0x10
c000606c:	39 c5                	cmp    ebp,eax
c000606e:	75 20                	jne    c0006090 <ucscompare+0x74>
c0006070:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0006074:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0006078:	83 c2 02             	add    edx,0x2
c000607b:	eb ac                	jmp    c0006029 <ucscompare+0xd>
c000607d:	85 db                	test   ebx,ebx
c000607f:	0f 95 c2             	setne  dl
c0006082:	31 c0                	xor    eax,eax
c0006084:	83 fb 2f             	cmp    ebx,0x2f
c0006087:	0f 95 c0             	setne  al
c000608a:	21 d0                	and    eax,edx
c000608c:	f7 d8                	neg    eax
c000608e:	eb 03                	jmp    c0006093 <ucscompare+0x77>
c0006090:	83 c8 ff             	or     eax,0xffffffff
c0006093:	83 c4 1c             	add    esp,0x1c
c0006096:	5b                   	pop    ebx
c0006097:	5e                   	pop    esi
c0006098:	5f                   	pop    edi
c0006099:	5d                   	pop    ebp
c000609a:	c3                   	ret    

c000609b <fncompare>:
c000609b:	55                   	push   ebp
c000609c:	57                   	push   edi
c000609d:	89 c7                	mov    edi,eax
c000609f:	56                   	push   esi
c00060a0:	89 ce                	mov    esi,ecx
c00060a2:	53                   	push   ebx
c00060a3:	31 db                	xor    ebx,ebx
c00060a5:	83 ec 1c             	sub    esp,0x1c
c00060a8:	39 d3                	cmp    ebx,edx
c00060aa:	7d 45                	jge    c00060f1 <fncompare+0x56>
c00060ac:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c00060b0:	83 f8 3b             	cmp    eax,0x3b
c00060b3:	74 3c                	je     c00060f1 <fncompare+0x56>
c00060b5:	83 f8 2e             	cmp    eax,0x2e
c00060b8:	75 0e                	jne    c00060c8 <fncompare+0x2d>
c00060ba:	8d 4a ff             	lea    ecx,[edx-0x1]
c00060bd:	39 d9                	cmp    ecx,ebx
c00060bf:	74 30                	je     c00060f1 <fncompare+0x56>
c00060c1:	80 7c 1f 01 3b       	cmp    BYTE PTR [edi+ebx*1+0x1],0x3b
c00060c6:	74 29                	je     c00060f1 <fncompare+0x56>
c00060c8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00060cc:	83 ec 0c             	sub    esp,0xc
c00060cf:	50                   	push   eax
c00060d0:	e8 7b a8 ff ff       	call   c0000950 <tolower>
c00060d5:	89 c5                	mov    ebp,eax
c00060d7:	0f be 04 1e          	movsx  eax,BYTE PTR [esi+ebx*1]
c00060db:	89 04 24             	mov    DWORD PTR [esp],eax
c00060de:	e8 6d a8 ff ff       	call   c0000950 <tolower>
c00060e3:	83 c4 10             	add    esp,0x10
c00060e6:	39 c5                	cmp    ebp,eax
c00060e8:	75 1e                	jne    c0006108 <fncompare+0x6d>
c00060ea:	43                   	inc    ebx
c00060eb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00060ef:	eb b7                	jmp    c00060a8 <fncompare+0xd>
c00060f1:	0f be 14 1e          	movsx  edx,BYTE PTR [esi+ebx*1]
c00060f5:	85 d2                	test   edx,edx
c00060f7:	0f 95 c1             	setne  cl
c00060fa:	31 c0                	xor    eax,eax
c00060fc:	83 fa 2f             	cmp    edx,0x2f
c00060ff:	0f 95 c0             	setne  al
c0006102:	21 c8                	and    eax,ecx
c0006104:	f7 d8                	neg    eax
c0006106:	eb 03                	jmp    c000610b <fncompare+0x70>
c0006108:	83 c8 ff             	or     eax,0xffffffff
c000610b:	83 c4 1c             	add    esp,0x1c
c000610e:	5b                   	pop    ebx
c000610f:	5e                   	pop    esi
c0006110:	5f                   	pop    edi
c0006111:	5d                   	pop    ebp
c0006112:	c3                   	ret    

c0006113 <bclear_cache>:
c0006113:	83 ec 18             	sub    esp,0x18
c0006116:	68 00 05 02 c0       	push   0xc0020500
c000611b:	e8 84 3d 01 00       	call   c0019ea4 <iso_kprintf>
c0006120:	83 c4 10             	add    esp,0x10
c0006123:	31 c0                	xor    eax,eax
c0006125:	8b 14 85 20 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdafe0]
c000612c:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006132:	8b 14 85 80 50 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdaf80]
c0006139:	40                   	inc    eax
c000613a:	c7 02 ff ff ff ff    	mov    DWORD PTR [edx],0xffffffff
c0006140:	83 f8 10             	cmp    eax,0x10
c0006143:	75 e0                	jne    c0006125 <bclear_cache+0x12>
c0006145:	83 c4 0c             	add    esp,0xc
c0006148:	c3                   	ret    

c0006149 <bclear>:
c0006149:	eb c8                	jmp    c0006113 <bclear_cache>

c000614b <iso_break_all>:
c000614b:	83 ec 18             	sub    esp,0x18
c000614e:	68 0e 05 02 c0       	push   0xc002050e
c0006153:	e8 4c 3d 01 00       	call   c0019ea4 <iso_kprintf>
c0006158:	83 c4 10             	add    esp,0x10
c000615b:	31 c0                	xor    eax,eax
c000615d:	c7 80 d0 55 02 c0 01 00 00 00 	mov    DWORD PTR [eax-0x3ffdaa30],0x1
c0006167:	05 94 00 00 00       	add    eax,0x94
c000616c:	3d 40 09 00 00       	cmp    eax,0x940
c0006171:	75 ea                	jne    c000615d <iso_break_all+0x12>
c0006173:	83 c4 0c             	add    esp,0xc
c0006176:	c3                   	ret    

c0006177 <isoReadDiscSector>:
c0006177:	83 ec 0c             	sub    esp,0xc
c000617a:	0f be 05 60 50 02 c0 	movsx  eax,BYTE PTR ds:0xc0025060
c0006181:	50                   	push   eax
c0006182:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0006186:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000618e:	e8 b5 3c 01 00       	call   c0019e48 <isoReadDiscSectorHelper>
c0006193:	83 c4 1c             	add    esp,0x1c
c0006196:	c3                   	ret    

c0006197 <bread_cache>:
c0006197:	55                   	push   ebp
c0006198:	57                   	push   edi
c0006199:	89 d7                	mov    edi,edx
c000619b:	56                   	push   esi
c000619c:	ba 0f 00 00 00       	mov    edx,0xf
c00061a1:	53                   	push   ebx
c00061a2:	89 c6                	mov    esi,eax
c00061a4:	83 ec 0c             	sub    esp,0xc
c00061a7:	8b 04 96             	mov    eax,DWORD PTR [esi+edx*4]
c00061aa:	39 38                	cmp    DWORD PTR [eax],edi
c00061ac:	74 3c                	je     c00061ea <bread_cache+0x53>
c00061ae:	4a                   	dec    edx
c00061af:	83 fa ff             	cmp    edx,0xffffffff
c00061b2:	75 f3                	jne    c00061a7 <bread_cache+0x10>
c00061b4:	31 db                	xor    ebx,ebx
c00061b6:	8b 04 9e             	mov    eax,DWORD PTR [esi+ebx*4]
c00061b9:	83 38 ff             	cmp    DWORD PTR [eax],0xffffffff
c00061bc:	74 08                	je     c00061c6 <bread_cache+0x2f>
c00061be:	43                   	inc    ebx
c00061bf:	83 fb 10             	cmp    ebx,0x10
c00061c2:	75 f2                	jne    c00061b6 <bread_cache+0x1f>
c00061c4:	31 db                	xor    ebx,ebx
c00061c6:	8d 2c 9e             	lea    ebp,[esi+ebx*4]
c00061c9:	50                   	push   eax
c00061ca:	6a 01                	push   0x1
c00061cc:	57                   	push   edi
c00061cd:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061d0:	83 c0 04             	add    eax,0x4
c00061d3:	50                   	push   eax
c00061d4:	e8 9e ff ff ff       	call   c0006177 <isoReadDiscSector>
c00061d9:	83 c4 10             	add    esp,0x10
c00061dc:	83 c9 ff             	or     ecx,0xffffffff
c00061df:	85 c0                	test   eax,eax
c00061e1:	78 13                	js     c00061f6 <bread_cache+0x5f>
c00061e3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00061e6:	89 da                	mov    edx,ebx
c00061e8:	89 38                	mov    DWORD PTR [eax],edi
c00061ea:	89 f0                	mov    eax,esi
c00061ec:	e8 0f fe ff ff       	call   c0006000 <bgrad_cache>
c00061f1:	b9 0f 00 00 00       	mov    ecx,0xf
c00061f6:	83 c4 0c             	add    esp,0xc
c00061f9:	89 c8                	mov    eax,ecx
c00061fb:	5b                   	pop    ebx
c00061fc:	5e                   	pop    esi
c00061fd:	5f                   	pop    edi
c00061fe:	5d                   	pop    ebp
c00061ff:	c3                   	ret    

c0006200 <biread>:
c0006200:	89 c2                	mov    edx,eax
c0006202:	b8 80 50 02 c0       	mov    eax,0xc0025080
c0006207:	eb 8e                	jmp    c0006197 <bread_cache>

c0006209 <bdread>:
c0006209:	89 c2                	mov    edx,eax
c000620b:	b8 20 50 02 c0       	mov    eax,0xc0025020
c0006210:	eb 85                	jmp    c0006197 <bread_cache>

c0006212 <strnicmp>:
c0006212:	55                   	push   ebp
c0006213:	57                   	push   edi
c0006214:	31 ff                	xor    edi,edi
c0006216:	56                   	push   esi
c0006217:	53                   	push   ebx
c0006218:	83 ec 0c             	sub    esp,0xc
c000621b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000621f:	3b 7c 24 28          	cmp    edi,DWORD PTR [esp+0x28]
c0006223:	74 43                	je     c0006268 <strnicmp+0x56>
c0006225:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0006229:	0f be 04 38          	movsx  eax,BYTE PTR [eax+edi*1]
c000622d:	85 c0                	test   eax,eax
c000622f:	74 37                	je     c0006268 <strnicmp+0x56>
c0006231:	0f be 14 3e          	movsx  edx,BYTE PTR [esi+edi*1]
c0006235:	85 d2                	test   edx,edx
c0006237:	74 2f                	je     c0006268 <strnicmp+0x56>
c0006239:	39 d0                	cmp    eax,edx
c000623b:	8d 6f 01             	lea    ebp,[edi+0x1]
c000623e:	75 04                	jne    c0006244 <strnicmp+0x32>
c0006240:	89 ef                	mov    edi,ebp
c0006242:	eb db                	jmp    c000621f <strnicmp+0xd>
c0006244:	83 ec 0c             	sub    esp,0xc
c0006247:	50                   	push   eax
c0006248:	e8 03 a7 ff ff       	call   c0000950 <tolower>
c000624d:	89 c3                	mov    ebx,eax
c000624f:	0f be 04 3e          	movsx  eax,BYTE PTR [esi+edi*1]
c0006253:	89 ef                	mov    edi,ebp
c0006255:	89 04 24             	mov    DWORD PTR [esp],eax
c0006258:	e8 f3 a6 ff ff       	call   c0000950 <tolower>
c000625d:	83 c4 10             	add    esp,0x10
c0006260:	29 c3                	sub    ebx,eax
c0006262:	89 d8                	mov    eax,ebx
c0006264:	74 b9                	je     c000621f <strnicmp+0xd>
c0006266:	eb 02                	jmp    c000626a <strnicmp+0x58>
c0006268:	31 c0                	xor    eax,eax
c000626a:	83 c4 0c             	add    esp,0xc
c000626d:	5b                   	pop    ebx
c000626e:	5e                   	pop    esi
c000626f:	5f                   	pop    edi
c0006270:	5d                   	pop    ebp
c0006271:	c3                   	ret    

c0006272 <find_object>:
c0006272:	55                   	push   ebp
c0006273:	57                   	push   edi
c0006274:	89 c7                	mov    edi,eax
c0006276:	56                   	push   esi
c0006277:	53                   	push   ebx
c0006278:	89 d3                	mov    ebx,edx
c000627a:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0006280:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0006287:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000628b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000628f:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006296:	74 0b                	je     c00062a3 <find_object+0x31>
c0006298:	89 fa                	mov    edx,edi
c000629a:	8d 44 24 20          	lea    eax,[esp+0x20]
c000629e:	e8 89 fc ff ff       	call   c0005f2c <utf2ucs>
c00062a3:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c00062a6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062aa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00062af:	7e 11                	jle    c00062c2 <find_object+0x50>
c00062b1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062b5:	e8 46 ff ff ff       	call   c0006200 <biread>
c00062ba:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00062be:	85 c0                	test   eax,eax
c00062c0:	79 07                	jns    c00062c9 <find_object+0x57>
c00062c2:	31 db                	xor    ebx,ebx
c00062c4:	e9 56 01 00 00       	jmp    c000641f <find_object+0x1ad>
c00062c9:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00062d1:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00062d5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00062d9:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c00062e0:	8d 5c 08 04          	lea    ebx,[eax+ecx*1+0x4]
c00062e4:	0f b6 33             	movzx  esi,BYTE PTR [ebx]
c00062e7:	85 f6                	test   esi,esi
c00062e9:	75 0e                	jne    c00062f9 <find_object+0x87>
c00062eb:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00062ef:	81 6c 24 0c 00 08 00 00 	sub    DWORD PTR [esp+0xc],0x800
c00062f7:	eb b1                	jmp    c00062aa <find_object+0x38>
c00062f9:	8b 2d b4 5e 02 c0    	mov    ebp,DWORD PTR ds:0xc0025eb4
c00062ff:	0f b6 4b 20          	movzx  ecx,BYTE PTR [ebx+0x20]
c0006303:	85 ed                	test   ebp,ebp
c0006305:	89 c8                	mov    eax,ecx
c0006307:	74 2b                	je     c0006334 <find_object+0xc2>
c0006309:	8d 43 21             	lea    eax,[ebx+0x21]
c000630c:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006310:	e8 07 fd ff ff       	call   c000601c <ucscompare>
c0006315:	85 c0                	test   eax,eax
c0006317:	0f 84 bf 00 00 00    	je     c00063dc <find_object+0x16a>
c000631d:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
c0006320:	01 44 24 08          	add    DWORD PTR [esp+0x8],eax
c0006324:	81 7c 24 08 ff 07 00 00 	cmp    DWORD PTR [esp+0x8],0x7ff
c000632c:	0f 8e da 00 00 00    	jle    c000640c <find_object+0x19a>
c0006332:	eb b7                	jmp    c00062eb <find_object+0x79>
c0006334:	29 ce                	sub    esi,ecx
c0006336:	8d 54 0b 21          	lea    edx,[ebx+ecx*1+0x21]
c000633a:	a8 01                	test   al,0x1
c000633c:	74 05                	je     c0006343 <find_object+0xd1>
c000633e:	83 ee 21             	sub    esi,0x21
c0006341:	eb 5a                	jmp    c000639d <find_object+0x12b>
c0006343:	42                   	inc    edx
c0006344:	83 ee 22             	sub    esi,0x22
c0006347:	eb 54                	jmp    c000639d <find_object+0x12b>
c0006349:	8a 42 03             	mov    al,BYTE PTR [edx+0x3]
c000634c:	48                   	dec    eax
c000634d:	3c 01                	cmp    al,0x1
c000634f:	77 51                	ja     c00063a2 <find_object+0x130>
c0006351:	50                   	push   eax
c0006352:	6a 02                	push   0x2
c0006354:	68 1d 05 02 c0       	push   0xc002051d
c0006359:	52                   	push   edx
c000635a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000635e:	e8 7d a4 ff ff       	call   c00007e0 <strncmp>
c0006363:	83 c4 10             	add    esp,0x10
c0006366:	85 c0                	test   eax,eax
c0006368:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000636c:	75 27                	jne    c0006395 <find_object+0x123>
c000636e:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006372:	8d 68 fb             	lea    ebp,[eax-0x5]
c0006375:	50                   	push   eax
c0006376:	8d 42 05             	lea    eax,[edx+0x5]
c0006379:	55                   	push   ebp
c000637a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000637e:	50                   	push   eax
c000637f:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0006383:	50                   	push   eax
c0006384:	e8 f7 a2 ff ff       	call   c0000680 <strncpy>
c0006389:	c6 44 2c 30 00       	mov    BYTE PTR [esp+ebp*1+0x30],0x0
c000638e:	83 c4 10             	add    esp,0x10
c0006391:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006395:	0f be 42 02          	movsx  eax,BYTE PTR [edx+0x2]
c0006399:	29 c6                	sub    esi,eax
c000639b:	01 c2                	add    edx,eax
c000639d:	83 fe 03             	cmp    esi,0x3
c00063a0:	7f a7                	jg     c0006349 <find_object+0xd7>
c00063a2:	85 ed                	test   ebp,ebp
c00063a4:	7e 40                	jle    c00063e6 <find_object+0x174>
c00063a6:	51                   	push   ecx
c00063a7:	51                   	push   ecx
c00063a8:	6a 2f                	push   0x2f
c00063aa:	57                   	push   edi
c00063ab:	e8 f0 a3 ff ff       	call   c00007a0 <strchr>
c00063b0:	83 c4 10             	add    esp,0x10
c00063b3:	85 c0                	test   eax,eax
c00063b5:	74 04                	je     c00063bb <find_object+0x149>
c00063b7:	29 f8                	sub    eax,edi
c00063b9:	eb 0c                	jmp    c00063c7 <find_object+0x155>
c00063bb:	83 ec 0c             	sub    esp,0xc
c00063be:	57                   	push   edi
c00063bf:	e8 ac a1 ff ff       	call   c0000570 <strlen>
c00063c4:	83 c4 10             	add    esp,0x10
c00063c7:	52                   	push   edx
c00063c8:	50                   	push   eax
c00063c9:	57                   	push   edi
c00063ca:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c00063ce:	50                   	push   eax
c00063cf:	e8 3e fe ff ff       	call   c0006212 <strnicmp>
c00063d4:	83 c4 10             	add    esp,0x10
c00063d7:	e9 39 ff ff ff       	jmp    c0006315 <find_object+0xa3>
c00063dc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c00063e0:	3b 44 24 10          	cmp    eax,DWORD PTR [esp+0x10]
c00063e4:	eb 1e                	jmp    c0006404 <find_object+0x192>
c00063e6:	0f b6 53 20          	movzx  edx,BYTE PTR [ebx+0x20]
c00063ea:	8d 43 21             	lea    eax,[ebx+0x21]
c00063ed:	89 f9                	mov    ecx,edi
c00063ef:	e8 a7 fc ff ff       	call   c000609b <fncompare>
c00063f4:	85 c0                	test   eax,eax
c00063f6:	0f 85 21 ff ff ff    	jne    c000631d <find_object+0xab>
c00063fc:	0f b6 43 19          	movzx  eax,BYTE PTR [ebx+0x19]
c0006400:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0006404:	0f 85 13 ff ff ff    	jne    c000631d <find_object+0xab>
c000640a:	eb 13                	jmp    c000641f <find_object+0x1ad>
c000640c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006410:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0006414:	0f 8f b7 fe ff ff    	jg     c00062d1 <find_object+0x5f>
c000641a:	e9 cc fe ff ff       	jmp    c00062eb <find_object+0x79>
c000641f:	81 c4 2c 01 00 00    	add    esp,0x12c
c0006425:	89 d8                	mov    eax,ebx
c0006427:	5b                   	pop    ebx
c0006428:	5e                   	pop    esi
c0006429:	5f                   	pop    edi
c000642a:	5d                   	pop    ebp
c000642b:	c3                   	ret    

c000642c <find_object_path>:
c000642c:	55                   	push   ebp
c000642d:	57                   	push   edi
c000642e:	89 d7                	mov    edi,edx
c0006430:	56                   	push   esi
c0006431:	89 c6                	mov    esi,eax
c0006433:	53                   	push   ebx
c0006434:	89 cb                	mov    ebx,ecx
c0006436:	83 ec 0c             	sub    esp,0xc
c0006439:	50                   	push   eax
c000643a:	50                   	push   eax
c000643b:	6a 2f                	push   0x2f
c000643d:	56                   	push   esi
c000643e:	e8 5d a3 ff ff       	call   c00007a0 <strchr>
c0006443:	83 c4 10             	add    esp,0x10
c0006446:	89 c5                	mov    ebp,eax
c0006448:	85 c0                	test   eax,eax
c000644a:	74 3a                	je     c0006486 <find_object_path+0x5a>
c000644c:	39 ee                	cmp    esi,ebp
c000644e:	74 31                	je     c0006481 <find_object_path+0x55>
c0006450:	8d 43 0a             	lea    eax,[ebx+0xa]
c0006453:	e8 a6 fb ff ff       	call   c0005ffe <iso_733>
c0006458:	89 c2                	mov    edx,eax
c000645a:	8d 43 02             	lea    eax,[ebx+0x2]
c000645d:	e8 9c fb ff ff       	call   c0005ffe <iso_733>
c0006462:	83 ec 0c             	sub    esp,0xc
c0006465:	89 c1                	mov    ecx,eax
c0006467:	52                   	push   edx
c0006468:	89 f0                	mov    eax,esi
c000646a:	ba 01 00 00 00       	mov    edx,0x1
c000646f:	e8 fe fd ff ff       	call   c0006272 <find_object>
c0006474:	83 c4 10             	add    esp,0x10
c0006477:	89 c3                	mov    ebx,eax
c0006479:	85 c0                	test   eax,eax
c000647b:	75 04                	jne    c0006481 <find_object_path+0x55>
c000647d:	31 db                	xor    ebx,ebx
c000647f:	eb 36                	jmp    c00064b7 <find_object_path+0x8b>
c0006481:	8d 75 01             	lea    esi,[ebp+0x1]
c0006484:	eb b3                	jmp    c0006439 <find_object_path+0xd>
c0006486:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006489:	74 28                	je     c00064b3 <find_object_path+0x87>
c000648b:	8d 43 0a             	lea    eax,[ebx+0xa]
c000648e:	e8 6b fb ff ff       	call   c0005ffe <iso_733>
c0006493:	89 c2                	mov    edx,eax
c0006495:	8d 43 02             	lea    eax,[ebx+0x2]
c0006498:	e8 61 fb ff ff       	call   c0005ffe <iso_733>
c000649d:	83 ec 0c             	sub    esp,0xc
c00064a0:	89 c1                	mov    ecx,eax
c00064a2:	52                   	push   edx
c00064a3:	89 f0                	mov    eax,esi
c00064a5:	89 fa                	mov    edx,edi
c00064a7:	e8 c6 fd ff ff       	call   c0006272 <find_object>
c00064ac:	83 c4 10             	add    esp,0x10
c00064af:	89 c3                	mov    ebx,eax
c00064b1:	eb 04                	jmp    c00064b7 <find_object_path+0x8b>
c00064b3:	85 ff                	test   edi,edi
c00064b5:	74 c6                	je     c000647d <find_object_path+0x51>
c00064b7:	83 c4 0c             	add    esp,0xc
c00064ba:	89 d8                	mov    eax,ebx
c00064bc:	5b                   	pop    ebx
c00064bd:	5e                   	pop    esi
c00064be:	5f                   	pop    edi
c00064bf:	5d                   	pop    ebp
c00064c0:	c3                   	ret    

c00064c1 <stricmp>:
c00064c1:	57                   	push   edi
c00064c2:	56                   	push   esi
c00064c3:	31 f6                	xor    esi,esi
c00064c5:	53                   	push   ebx
c00064c6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00064ca:	83 ec 0c             	sub    esp,0xc
c00064cd:	0f b6 3c 30          	movzx  edi,BYTE PTR [eax+esi*1]
c00064d1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064d5:	0f b6 04 30          	movzx  eax,BYTE PTR [eax+esi*1]
c00064d9:	50                   	push   eax
c00064da:	e8 51 a4 ff ff       	call   c0000930 <toupper>
c00064df:	89 04 24             	mov    DWORD PTR [esp],eax
c00064e2:	e8 69 a4 ff ff       	call   c0000950 <tolower>
c00064e7:	89 3c 24             	mov    DWORD PTR [esp],edi
c00064ea:	89 c3                	mov    ebx,eax
c00064ec:	e8 3f a4 ff ff       	call   c0000930 <toupper>
c00064f1:	89 04 24             	mov    DWORD PTR [esp],eax
c00064f4:	e8 57 a4 ff ff       	call   c0000950 <tolower>
c00064f9:	83 c4 10             	add    esp,0x10
c00064fc:	39 c3                	cmp    ebx,eax
c00064fe:	75 05                	jne    c0006505 <stricmp+0x44>
c0006500:	46                   	inc    esi
c0006501:	85 db                	test   ebx,ebx
c0006503:	75 c1                	jne    c00064c6 <stricmp+0x5>
c0006505:	29 c3                	sub    ebx,eax
c0006507:	89 d8                	mov    eax,ebx
c0006509:	5b                   	pop    ebx
c000650a:	5e                   	pop    esi
c000650b:	5f                   	pop    edi
c000650c:	c3                   	ret    

c000650d <iso_open>:
c000650d:	57                   	push   edi
c000650e:	31 c0                	xor    eax,eax
c0006510:	56                   	push   esi
c0006511:	b9 80 5e 02 c0       	mov    ecx,0xc0025e80
c0006516:	53                   	push   ebx
c0006517:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000651c:	0f 95 c0             	setne  al
c000651f:	89 c2                	mov    edx,eax
c0006521:	89 c6                	mov    esi,eax
c0006523:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006527:	e8 00 ff ff ff       	call   c000642c <find_object_path>
c000652c:	83 ca ff             	or     edx,0xffffffff
c000652f:	85 c0                	test   eax,eax
c0006531:	74 5e                	je     c0006591 <iso_open+0x84>
c0006533:	89 c1                	mov    ecx,eax
c0006535:	31 d2                	xor    edx,edx
c0006537:	69 fa 94 00 00 00    	imul   edi,edx,0x94
c000653d:	83 bf 40 55 02 c0 00 	cmp    DWORD PTR [edi-0x3ffdaac0],0x0
c0006544:	75 42                	jne    c0006588 <iso_open+0x7b>
c0006546:	8d 41 02             	lea    eax,[ecx+0x2]
c0006549:	c7 87 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR [edi-0x3ffdaac0],0xffffffff
c0006553:	e8 a6 fa ff ff       	call   c0005ffe <iso_733>
c0006558:	89 b7 44 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaabc],esi
c000655e:	89 87 40 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaac0],eax
c0006564:	c7 87 48 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaab8],0x0
c000656e:	8d 41 0a             	lea    eax,[ecx+0xa]
c0006571:	e8 88 fa ff ff       	call   c0005ffe <iso_733>
c0006576:	c7 87 d0 55 02 c0 00 00 00 00 	mov    DWORD PTR [edi-0x3ffdaa30],0x0
c0006580:	89 87 4c 55 02 c0    	mov    DWORD PTR [edi-0x3ffdaab4],eax
c0006586:	eb 09                	jmp    c0006591 <iso_open+0x84>
c0006588:	42                   	inc    edx
c0006589:	83 fa 10             	cmp    edx,0x10
c000658c:	75 a9                	jne    c0006537 <iso_open+0x2a>
c000658e:	83 ca ff             	or     edx,0xffffffff
c0006591:	5b                   	pop    ebx
c0006592:	89 d0                	mov    eax,edx
c0006594:	5e                   	pop    esi
c0006595:	5f                   	pop    edi
c0006596:	c3                   	ret    

c0006597 <iso_close>:
c0006597:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000659b:	83 f8 0f             	cmp    eax,0xf
c000659e:	7f 10                	jg     c00065b0 <iso_close+0x19>
c00065a0:	69 c0 94 00 00 00    	imul   eax,eax,0x94
c00065a6:	c7 80 40 55 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffdaac0],0x0
c00065b0:	e9 5e fb ff ff       	jmp    c0006113 <bclear_cache>

c00065b5 <iso_read>:
c00065b5:	55                   	push   ebp
c00065b6:	57                   	push   edi
c00065b7:	56                   	push   esi
c00065b8:	53                   	push   ebx
c00065b9:	83 ec 1c             	sub    esp,0x1c
c00065bc:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00065c0:	83 fd 0f             	cmp    ebp,0xf
c00065c3:	7e 0a                	jle    c00065cf <iso_read+0x1a>
c00065c5:	83 c8 ff             	or     eax,0xffffffff
c00065c8:	89 c2                	mov    edx,eax
c00065ca:	e9 f4 00 00 00       	jmp    c00066c3 <iso_read+0x10e>
c00065cf:	69 ed 94 00 00 00    	imul   ebp,ebp,0x94
c00065d5:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00065dc:	74 e7                	je     c00065c5 <iso_read+0x10>
c00065de:	8b 95 d0 55 02 c0    	mov    edx,DWORD PTR [ebp-0x3ffdaa30]
c00065e4:	85 d2                	test   edx,edx
c00065e6:	75 dd                	jne    c00065c5 <iso_read+0x10>
c00065e8:	83 7c 24 38 00       	cmp    DWORD PTR [esp+0x38],0x0
c00065ed:	0f 84 cd 00 00 00    	je     c00066c0 <iso_read+0x10b>
c00065f3:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c00065f9:	8b 8d 4c 55 02 c0    	mov    ecx,DWORD PTR [ebp-0x3ffdaab4]
c00065ff:	29 c1                	sub    ecx,eax
c0006601:	3b 4c 24 38          	cmp    ecx,DWORD PTR [esp+0x38]
c0006605:	76 04                	jbe    c000660b <iso_read+0x56>
c0006607:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000660b:	85 c9                	test   ecx,ecx
c000660d:	0f 84 ad 00 00 00    	je     c00066c0 <iso_read+0x10b>
c0006613:	89 c6                	mov    esi,eax
c0006615:	bb 00 08 00 00       	mov    ebx,0x800
c000661a:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0006620:	c1 e8 0b             	shr    eax,0xb
c0006623:	29 f3                	sub    ebx,esi
c0006625:	03 85 40 55 02 c0    	add    eax,DWORD PTR [ebp-0x3ffdaac0]
c000662b:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0006631:	7e 3f                	jle    c0006672 <iso_read+0xbd>
c0006633:	81 fb 00 08 00 00    	cmp    ebx,0x800
c0006639:	75 37                	jne    c0006672 <iso_read+0xbd>
c000663b:	be 20 00 00 00       	mov    esi,0x20
c0006640:	81 f9 ff 07 01 00    	cmp    ecx,0x107ff
c0006646:	7f 05                	jg     c000664d <iso_read+0x98>
c0006648:	89 ce                	mov    esi,ecx
c000664a:	c1 fe 0b             	sar    esi,0xb
c000664d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0006651:	89 f3                	mov    ebx,esi
c0006653:	c1 e3 0b             	shl    ebx,0xb
c0006656:	52                   	push   edx
c0006657:	56                   	push   esi
c0006658:	50                   	push   eax
c0006659:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000665d:	e8 15 fb ff ff       	call   c0006177 <isoReadDiscSector>
c0006662:	83 c4 10             	add    esp,0x10
c0006665:	85 c0                	test   eax,eax
c0006667:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000666b:	7f 3e                	jg     c00066ab <iso_read+0xf6>
c000666d:	e9 53 ff ff ff       	jmp    c00065c5 <iso_read+0x10>
c0006672:	39 cb                	cmp    ebx,ecx
c0006674:	7e 02                	jle    c0006678 <iso_read+0xc3>
c0006676:	89 cb                	mov    ebx,ecx
c0006678:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000667c:	e8 88 fb ff ff       	call   c0006209 <bdread>
c0006681:	85 c0                	test   eax,eax
c0006683:	0f 88 3c ff ff ff    	js     c00065c5 <iso_read+0x10>
c0006689:	8b 0c 85 20 50 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdafe0]
c0006690:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0006694:	8b 85 48 55 02 c0    	mov    eax,DWORD PTR [ebp-0x3ffdaab8]
c000669a:	25 ff 07 00 00       	and    eax,0x7ff
c000669f:	8d 74 01 04          	lea    esi,[ecx+eax*1+0x4]
c00066a3:	89 d9                	mov    ecx,ebx
c00066a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00066a7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00066ab:	01 5c 24 34          	add    DWORD PTR [esp+0x34],ebx
c00066af:	01 9d 48 55 02 c0    	add    DWORD PTR [ebp-0x3ffdaab8],ebx
c00066b5:	29 5c 24 38          	sub    DWORD PTR [esp+0x38],ebx
c00066b9:	01 da                	add    edx,ebx
c00066bb:	e9 28 ff ff ff       	jmp    c00065e8 <iso_read+0x33>
c00066c0:	89 d0                	mov    eax,edx
c00066c2:	99                   	cdq    
c00066c3:	83 c4 1c             	add    esp,0x1c
c00066c6:	5b                   	pop    ebx
c00066c7:	5e                   	pop    esi
c00066c8:	5f                   	pop    edi
c00066c9:	5d                   	pop    ebp
c00066ca:	c3                   	ret    

c00066cb <iso_seek>:
c00066cb:	55                   	push   ebp
c00066cc:	83 c8 ff             	or     eax,0xffffffff
c00066cf:	57                   	push   edi
c00066d0:	89 c2                	mov    edx,eax
c00066d2:	56                   	push   esi
c00066d3:	53                   	push   ebx
c00066d4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00066d8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00066dc:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00066e0:	83 fe 0f             	cmp    esi,0xf
c00066e3:	7f 65                	jg     c000674a <iso_seek+0x7f>
c00066e5:	69 ee 94 00 00 00    	imul   ebp,esi,0x94
c00066eb:	8d 8d 40 55 02 c0    	lea    ecx,[ebp-0x3ffdaac0]
c00066f1:	83 bd 40 55 02 c0 00 	cmp    DWORD PTR [ebp-0x3ffdaac0],0x0
c00066f8:	74 50                	je     c000674a <iso_seek+0x7f>
c00066fa:	83 b9 90 00 00 00 00 	cmp    DWORD PTR [ecx+0x90],0x0
c0006701:	75 47                	jne    c000674a <iso_seek+0x7f>
c0006703:	83 fb 01             	cmp    ebx,0x1
c0006706:	74 0e                	je     c0006716 <iso_seek+0x4b>
c0006708:	83 fb 02             	cmp    ebx,0x2
c000670b:	74 0e                	je     c000671b <iso_seek+0x50>
c000670d:	85 db                	test   ebx,ebx
c000670f:	75 39                	jne    c000674a <iso_seek+0x7f>
c0006711:	89 79 08             	mov    DWORD PTR [ecx+0x8],edi
c0006714:	eb 0d                	jmp    c0006723 <iso_seek+0x58>
c0006716:	01 79 08             	add    DWORD PTR [ecx+0x8],edi
c0006719:	eb 08                	jmp    c0006723 <iso_seek+0x58>
c000671b:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c000671e:	01 f8                	add    eax,edi
c0006720:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c0006723:	69 c6 94 00 00 00    	imul   eax,esi,0x94
c0006729:	8b 88 4c 55 02 c0    	mov    ecx,DWORD PTR [eax-0x3ffdaab4]
c000672f:	05 40 55 02 c0       	add    eax,0xc0025540
c0006734:	39 48 08             	cmp    DWORD PTR [eax+0x8],ecx
c0006737:	76 03                	jbe    c000673c <iso_seek+0x71>
c0006739:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000673c:	69 d6 94 00 00 00    	imul   edx,esi,0x94
c0006742:	8b 82 48 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab8]
c0006748:	31 d2                	xor    edx,edx
c000674a:	5b                   	pop    ebx
c000674b:	5e                   	pop    esi
c000674c:	5f                   	pop    edi
c000674d:	5d                   	pop    ebp
c000674e:	c3                   	ret    

c000674f <iso_tell>:
c000674f:	83 c8 ff             	or     eax,0xffffffff
c0006752:	53                   	push   ebx
c0006753:	89 c2                	mov    edx,eax
c0006755:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0006759:	83 f9 0f             	cmp    ecx,0xf
c000675c:	7f 20                	jg     c000677e <iso_tell+0x2f>
c000675e:	69 d9 94 00 00 00    	imul   ebx,ecx,0x94
c0006764:	83 bb 40 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaac0],0x0
c000676b:	74 11                	je     c000677e <iso_tell+0x2f>
c000676d:	83 bb d0 55 02 c0 00 	cmp    DWORD PTR [ebx-0x3ffdaa30],0x0
c0006774:	75 08                	jne    c000677e <iso_tell+0x2f>
c0006776:	8b 83 48 55 02 c0    	mov    eax,DWORD PTR [ebx-0x3ffdaab8]
c000677c:	31 d2                	xor    edx,edx
c000677e:	5b                   	pop    ebx
c000677f:	c3                   	ret    

c0006780 <iso_total>:
c0006780:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0006784:	83 c8 ff             	or     eax,0xffffffff
c0006787:	83 fa 0f             	cmp    edx,0xf
c000678a:	7f 1e                	jg     c00067aa <iso_total+0x2a>
c000678c:	69 d2 94 00 00 00    	imul   edx,edx,0x94
c0006792:	83 ba 40 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaac0],0x0
c0006799:	74 0f                	je     c00067aa <iso_total+0x2a>
c000679b:	83 ba d0 55 02 c0 00 	cmp    DWORD PTR [edx-0x3ffdaa30],0x0
c00067a2:	75 06                	jne    c00067aa <iso_total+0x2a>
c00067a4:	8b 82 4c 55 02 c0    	mov    eax,DWORD PTR [edx-0x3ffdaab4]
c00067aa:	c3                   	ret    

c00067ab <fn_postprocess>:
c00067ab:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00067af:	89 d0                	mov    eax,edx
c00067b1:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00067b4:	83 f9 3b             	cmp    ecx,0x3b
c00067b7:	74 07                	je     c00067c0 <fn_postprocess+0x15>
c00067b9:	85 c9                	test   ecx,ecx
c00067bb:	74 03                	je     c00067c0 <fn_postprocess+0x15>
c00067bd:	40                   	inc    eax
c00067be:	eb f1                	jmp    c00067b1 <fn_postprocess+0x6>
c00067c0:	c6 00 00             	mov    BYTE PTR [eax],0x0
c00067c3:	39 d0                	cmp    eax,edx
c00067c5:	76 0a                	jbe    c00067d1 <fn_postprocess+0x26>
c00067c7:	80 78 ff 2e          	cmp    BYTE PTR [eax-0x1],0x2e
c00067cb:	75 04                	jne    c00067d1 <fn_postprocess+0x26>
c00067cd:	c6 40 ff 00          	mov    BYTE PTR [eax-0x1],0x0
c00067d1:	c3                   	ret    

c00067d2 <iso_readdir>:
c00067d2:	55                   	push   ebp
c00067d3:	57                   	push   edi
c00067d4:	56                   	push   esi
c00067d5:	53                   	push   ebx
c00067d6:	83 ec 1c             	sub    esp,0x1c
c00067d9:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00067dd:	83 fb 0f             	cmp    ebx,0xf
c00067e0:	7f 28                	jg     c000680a <iso_readdir+0x38>
c00067e2:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c00067e8:	8d b8 40 55 02 c0    	lea    edi,[eax-0x3ffdaac0]
c00067ee:	83 b8 40 55 02 c0 00 	cmp    DWORD PTR [eax-0x3ffdaac0],0x0
c00067f5:	74 13                	je     c000680a <iso_readdir+0x38>
c00067f7:	83 7f 04 00          	cmp    DWORD PTR [edi+0x4],0x0
c00067fb:	74 0d                	je     c000680a <iso_readdir+0x38>
c00067fd:	83 bf 90 00 00 00 00 	cmp    DWORD PTR [edi+0x90],0x0
c0006804:	0f 84 b1 00 00 00    	je     c00068bb <iso_readdir+0xe9>
c000680a:	83 ec 0c             	sub    esp,0xc
c000680d:	68 20 05 02 c0       	push   0xc0020520
c0006812:	e8 8d 36 01 00       	call   c0019ea4 <iso_kprintf>
c0006817:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000681a:	e8 a1 36 01 00       	call   c0019ec0 <iso_kprintfd>
c000681f:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006825:	c7 04 24 25 05 02 c0 	mov    DWORD PTR [esp],0xc0020525
c000682c:	e8 73 36 01 00       	call   c0019ea4 <iso_kprintf>
c0006831:	5d                   	pop    ebp
c0006832:	ff b3 40 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaac0]
c0006838:	e8 83 36 01 00       	call   c0019ec0 <iso_kprintfd>
c000683d:	c7 04 24 2b 05 02 c0 	mov    DWORD PTR [esp],0xc002052b
c0006844:	e8 5b 36 01 00       	call   c0019ea4 <iso_kprintf>
c0006849:	58                   	pop    eax
c000684a:	ff b3 44 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaabc]
c0006850:	e8 6b 36 01 00       	call   c0019ec0 <iso_kprintfd>
c0006855:	c7 04 24 31 05 02 c0 	mov    DWORD PTR [esp],0xc0020531
c000685c:	e8 43 36 01 00       	call   c0019ea4 <iso_kprintf>
c0006861:	58                   	pop    eax
c0006862:	ff b3 d0 55 02 c0    	push   DWORD PTR [ebx-0x3ffdaa30]
c0006868:	e8 53 36 01 00       	call   c0019ec0 <iso_kprintfd>
c000686d:	83 c4 10             	add    esp,0x10
c0006870:	eb 42                	jmp    c00068b4 <iso_readdir+0xe2>
c0006872:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c0006875:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c000687c:	89 d1                	mov    ecx,edx
c000687e:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0006884:	8d 74 0e 04          	lea    esi,[esi+ecx*1+0x4]
c0006888:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c000688b:	75 35                	jne    c00068c2 <iso_readdir+0xf0>
c000688d:	81 e2 00 f8 ff ff    	and    edx,0xfffff800
c0006893:	81 c2 00 08 00 00    	add    edx,0x800
c0006899:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c000689c:	8b 57 08             	mov    edx,DWORD PTR [edi+0x8]
c000689f:	3b 57 0c             	cmp    edx,DWORD PTR [edi+0xc]
c00068a2:	73 1e                	jae    c00068c2 <iso_readdir+0xf0>
c00068a4:	c1 ea 0b             	shr    edx,0xb
c00068a7:	8b 07                	mov    eax,DWORD PTR [edi]
c00068a9:	01 d0                	add    eax,edx
c00068ab:	e8 50 f9 ff ff       	call   c0006200 <biread>
c00068b0:	85 c0                	test   eax,eax
c00068b2:	79 be                	jns    c0006872 <iso_readdir+0xa0>
c00068b4:	31 c0                	xor    eax,eax
c00068b6:	e9 66 01 00 00       	jmp    c0006a21 <iso_readdir+0x24f>
c00068bb:	31 f6                	xor    esi,esi
c00068bd:	83 c8 ff             	or     eax,0xffffffff
c00068c0:	eb da                	jmp    c000689c <iso_readdir+0xca>
c00068c2:	69 d3 94 00 00 00    	imul   edx,ebx,0x94
c00068c8:	8b ba 48 55 02 c0    	mov    edi,DWORD PTR [edx-0x3ffdaab8]
c00068ce:	81 c2 40 55 02 c0    	add    edx,0xc0025540
c00068d4:	3b 7a 0c             	cmp    edi,DWORD PTR [edx+0xc]
c00068d7:	73 db                	jae    c00068b4 <iso_readdir+0xe2>
c00068d9:	80 7e 21 00          	cmp    BYTE PTR [esi+0x21],0x0
c00068dd:	75 34                	jne    c0006913 <iso_readdir+0x141>
c00068df:	80 7e 20 01          	cmp    BYTE PTR [esi+0x20],0x1
c00068e3:	75 2e                	jne    c0006913 <iso_readdir+0x141>
c00068e5:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c00068e8:	8b 34 85 80 50 02 c0 	mov    esi,DWORD PTR [eax*4-0x3ffdaf80]
c00068ef:	01 f9                	add    ecx,edi
c00068f1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c00068f4:	89 c8                	mov    eax,ecx
c00068f6:	25 ff 07 00 00       	and    eax,0x7ff
c00068fb:	0f b6 44 06 04       	movzx  eax,BYTE PTR [esi+eax*1+0x4]
c0006900:	01 c8                	add    eax,ecx
c0006902:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0006905:	25 ff 07 00 00       	and    eax,0x7ff
c000690a:	8d 74 06 04          	lea    esi,[esi+eax*1+0x4]
c000690e:	80 3e 00             	cmp    BYTE PTR [esi],0x0
c0006911:	74 a1                	je     c00068b4 <iso_readdir+0xe2>
c0006913:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c0006919:	0f b6 4e 20          	movzx  ecx,BYTE PTR [esi+0x20]
c000691d:	8d 56 21             	lea    edx,[esi+0x21]
c0006920:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0006924:	8d a8 58 55 02 c0    	lea    ebp,[eax-0x3ffdaaa8]
c000692a:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006931:	74 0c                	je     c000693f <iso_readdir+0x16d>
c0006933:	89 e8                	mov    eax,ebp
c0006935:	e8 14 f6 ff ff       	call   c0005f4e <ucs2utfn>
c000693a:	e9 a6 00 00 00       	jmp    c00069e5 <iso_readdir+0x213>
c000693f:	57                   	push   edi
c0006940:	51                   	push   ecx
c0006941:	52                   	push   edx
c0006942:	55                   	push   ebp
c0006943:	e8 38 9d ff ff       	call   c0000680 <strncpy>
c0006948:	0f b6 46 20          	movzx  eax,BYTE PTR [esi+0x20]
c000694c:	69 cb 94 00 00 00    	imul   ecx,ebx,0x94
c0006952:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0006955:	c6 84 01 58 55 02 c0 00 	mov    BYTE PTR [ecx+eax*1-0x3ffdaaa8],0x0
c000695d:	e8 49 fe ff ff       	call   c00067ab <fn_postprocess>
c0006962:	0f b6 56 20          	movzx  edx,BYTE PTR [esi+0x20]
c0006966:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006969:	83 c4 10             	add    esp,0x10
c000696c:	29 d0                	sub    eax,edx
c000696e:	8d 7c 16 21          	lea    edi,[esi+edx*1+0x21]
c0006972:	f6 46 20 01          	test   BYTE PTR [esi+0x20],0x1
c0006976:	74 05                	je     c000697d <iso_readdir+0x1ab>
c0006978:	83 e8 21             	sub    eax,0x21
c000697b:	eb 04                	jmp    c0006981 <iso_readdir+0x1af>
c000697d:	47                   	inc    edi
c000697e:	83 e8 22             	sub    eax,0x22
c0006981:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0006985:	69 c3 94 00 00 00    	imul   eax,ebx,0x94
c000698b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000698f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c0006994:	7e 4f                	jle    c00069e5 <iso_readdir+0x213>
c0006996:	8a 47 03             	mov    al,BYTE PTR [edi+0x3]
c0006999:	48                   	dec    eax
c000699a:	3c 01                	cmp    al,0x1
c000699c:	77 47                	ja     c00069e5 <iso_readdir+0x213>
c000699e:	52                   	push   edx
c000699f:	6a 02                	push   0x2
c00069a1:	68 1d 05 02 c0       	push   0xc002051d
c00069a6:	57                   	push   edi
c00069a7:	e8 34 9e ff ff       	call   c00007e0 <strncmp>
c00069ac:	83 c4 10             	add    esp,0x10
c00069af:	85 c0                	test   eax,eax
c00069b1:	75 26                	jne    c00069d9 <iso_readdir+0x207>
c00069b3:	50                   	push   eax
c00069b4:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069b8:	83 e8 05             	sub    eax,0x5
c00069bb:	50                   	push   eax
c00069bc:	8d 47 05             	lea    eax,[edi+0x5]
c00069bf:	50                   	push   eax
c00069c0:	55                   	push   ebp
c00069c1:	e8 ba 9c ff ff       	call   c0000680 <strncpy>
c00069c6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00069ca:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069ce:	83 c4 10             	add    esp,0x10
c00069d1:	c6 84 08 53 55 02 c0 00 	mov    BYTE PTR [eax+ecx*1-0x3ffdaaad],0x0
c00069d9:	0f be 47 02          	movsx  eax,BYTE PTR [edi+0x2]
c00069dd:	29 44 24 04          	sub    DWORD PTR [esp+0x4],eax
c00069e1:	01 c7                	add    edi,eax
c00069e3:	eb aa                	jmp    c000698f <iso_readdir+0x1bd>
c00069e5:	83 c8 ff             	or     eax,0xffffffff
c00069e8:	f6 46 19 02          	test   BYTE PTR [esi+0x19],0x2
c00069ec:	89 c2                	mov    edx,eax
c00069ee:	75 0a                	jne    c00069fa <iso_readdir+0x228>
c00069f0:	8d 46 0a             	lea    eax,[esi+0xa]
c00069f3:	e8 06 f6 ff ff       	call   c0005ffe <iso_733>
c00069f8:	31 d2                	xor    edx,edx
c00069fa:	69 db 94 00 00 00    	imul   ebx,ebx,0x94
c0006a00:	89 83 50 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaab0],eax
c0006a06:	89 93 54 55 02 c0    	mov    DWORD PTR [ebx-0x3ffdaaac],edx
c0006a0c:	81 c3 40 55 02 c0    	add    ebx,0xc0025540
c0006a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
c0006a15:	01 43 08             	add    DWORD PTR [ebx+0x8],eax
c0006a18:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006a1c:	05 50 55 02 c0       	add    eax,0xc0025550
c0006a21:	83 c4 1c             	add    esp,0x1c
c0006a24:	5b                   	pop    ebx
c0006a25:	5e                   	pop    esi
c0006a26:	5f                   	pop    edi
c0006a27:	5d                   	pop    ebp
c0006a28:	c3                   	ret    

c0006a29 <iso_reset>:
c0006a29:	83 ec 18             	sub    esp,0x18
c0006a2c:	68 3a 05 02 c0       	push   0xc002053a
c0006a31:	e8 6e 34 01 00       	call   c0019ea4 <iso_kprintf>
c0006a36:	e8 10 f7 ff ff       	call   c000614b <iso_break_all>
c0006a3b:	e8 09 f7 ff ff       	call   c0006149 <bclear>
c0006a40:	31 c0                	xor    eax,eax
c0006a42:	83 c4 1c             	add    esp,0x1c
c0006a45:	c3                   	ret    

c0006a46 <init_percd>:
c0006a46:	57                   	push   edi
c0006a47:	56                   	push   esi
c0006a48:	53                   	push   ebx
c0006a49:	bb 01 00 00 00       	mov    ebx,0x1
c0006a4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006a52:	a2 60 50 02 c0       	mov    ds:0xc0025060,al
c0006a57:	e8 cd ff ff ff       	call   c0006a29 <iso_reset>
c0006a5c:	c7 05 b4 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb4,0x0
c0006a66:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006a6b:	8d 44 03 10          	lea    eax,[ebx+eax*1+0x10]
c0006a6f:	e8 8c f7 ff ff       	call   c0006200 <biread>
c0006a74:	89 c6                	mov    esi,eax
c0006a76:	85 c0                	test   eax,eax
c0006a78:	0f 88 ba 00 00 00    	js     c0006b38 <init_percd+0xf2>
c0006a7e:	8b 04 85 80 50 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdaf80]
c0006a85:	83 c0 04             	add    eax,0x4
c0006a88:	52                   	push   edx
c0006a89:	6a 06                	push   0x6
c0006a8b:	68 45 05 02 c0       	push   0xc0020545
c0006a90:	50                   	push   eax
c0006a91:	e8 ea 98 ff ff       	call   c0000380 <memcmp>
c0006a96:	83 c4 10             	add    esp,0x10
c0006a99:	85 c0                	test   eax,eax
c0006a9b:	74 08                	je     c0006aa5 <init_percd+0x5f>
c0006a9d:	43                   	inc    ebx
c0006a9e:	83 fb 04             	cmp    ebx,0x4
c0006aa1:	75 c3                	jne    c0006a66 <init_percd+0x20>
c0006aa3:	eb 1a                	jmp    c0006abf <init_percd+0x79>
c0006aa5:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006aac:	83 c0 5c             	add    eax,0x5c
c0006aaf:	e8 17 f5 ff ff       	call   c0005fcb <isjoliet>
c0006ab4:	a3 b4 5e 02 c0       	mov    ds:0xc0025eb4,eax
c0006ab9:	85 c0                	test   eax,eax
c0006abb:	74 e0                	je     c0006a9d <init_percd+0x57>
c0006abd:	eb 3e                	jmp    c0006afd <init_percd+0xb7>
c0006abf:	83 3d b4 5e 02 c0 00 	cmp    DWORD PTR ds:0xc0025eb4,0x0
c0006ac6:	75 35                	jne    c0006afd <init_percd+0xb7>
c0006ac8:	a1 ac 5e 02 c0       	mov    eax,ds:0xc0025eac
c0006acd:	83 c0 10             	add    eax,0x10
c0006ad0:	e8 2b f7 ff ff       	call   c0006200 <biread>
c0006ad5:	89 c6                	mov    esi,eax
c0006ad7:	85 c0                	test   eax,eax
c0006ad9:	78 5f                	js     c0006b3a <init_percd+0xf4>
c0006adb:	83 cb ff             	or     ebx,0xffffffff
c0006ade:	50                   	push   eax
c0006adf:	8b 04 b5 80 50 02 c0 	mov    eax,DWORD PTR [esi*4-0x3ffdaf80]
c0006ae6:	6a 06                	push   0x6
c0006ae8:	83 c0 04             	add    eax,0x4
c0006aeb:	68 4c 05 02 c0       	push   0xc002054c
c0006af0:	50                   	push   eax
c0006af1:	e8 8a 98 ff ff       	call   c0000380 <memcmp>
c0006af6:	83 c4 10             	add    esp,0x10
c0006af9:	85 c0                	test   eax,eax
c0006afb:	75 3d                	jne    c0006b3a <init_percd+0xf4>
c0006afd:	8b 34 b5 80 50 02 c0 	mov    esi,DWORD PTR [esi*4-0x3ffdaf80]
c0006b04:	bf 80 5e 02 c0       	mov    edi,0xc0025e80
c0006b09:	81 c6 a0 00 00 00    	add    esi,0xa0
c0006b0f:	b9 22 00 00 00       	mov    ecx,0x22
c0006b14:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0006b16:	b8 82 5e 02 c0       	mov    eax,0xc0025e82
c0006b1b:	31 db                	xor    ebx,ebx
c0006b1d:	e8 dc f4 ff ff       	call   c0005ffe <iso_733>
c0006b22:	a3 a8 5e 02 c0       	mov    ds:0xc0025ea8,eax
c0006b27:	b8 8a 5e 02 c0       	mov    eax,0xc0025e8a
c0006b2c:	e8 cd f4 ff ff       	call   c0005ffe <iso_733>
c0006b31:	a3 a4 5e 02 c0       	mov    ds:0xc0025ea4,eax
c0006b36:	eb 02                	jmp    c0006b3a <init_percd+0xf4>
c0006b38:	89 c3                	mov    ebx,eax
c0006b3a:	89 d8                	mov    eax,ebx
c0006b3c:	5b                   	pop    ebx
c0006b3d:	5e                   	pop    esi
c0006b3e:	5f                   	pop    edi
c0006b3f:	c3                   	ret    

c0006b40 <iso_ioctl>:
c0006b40:	83 ec 18             	sub    esp,0x18
c0006b43:	68 53 05 02 c0       	push   0xc0020553
c0006b48:	e8 57 33 01 00       	call   c0019ea4 <iso_kprintf>
c0006b4d:	e8 d7 fe ff ff       	call   c0006a29 <iso_reset>
c0006b52:	31 c0                	xor    eax,eax
c0006b54:	83 c4 1c             	add    esp,0x1c
c0006b57:	c3                   	ret    

c0006b58 <fs_iso9660_init>:
c0006b58:	53                   	push   ebx
c0006b59:	31 db                	xor    ebx,ebx
c0006b5b:	83 ec 14             	sub    esp,0x14
c0006b5e:	68 5e 05 02 c0       	push   0xc002055e
c0006b63:	e8 3c 33 01 00       	call   c0019ea4 <iso_kprintf>
c0006b68:	83 c4 0c             	add    esp,0xc
c0006b6b:	68 40 09 00 00       	push   0x940
c0006b70:	6a 00                	push   0x0
c0006b72:	68 40 55 02 c0       	push   0xc0025540
c0006b77:	e8 74 99 ff ff       	call   c00004f0 <memset>
c0006b7c:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b83:	c7 05 40 55 02 c0 ff ff ff ff 	mov    DWORD PTR ds:0xc0025540,0xffffffff
c0006b8d:	e8 24 0f 00 00       	call   c0007ab6 <malloc>
c0006b92:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0006b99:	a3 b0 5e 02 c0       	mov    ds:0xc0025eb0,eax
c0006b9e:	e8 13 0f 00 00       	call   c0007ab6 <malloc>
c0006ba3:	83 c4 10             	add    esp,0x10
c0006ba6:	a3 20 55 02 c0       	mov    ds:0xc0025520,eax
c0006bab:	83 ec 0c             	sub    esp,0xc
c0006bae:	68 04 08 00 00       	push   0x804
c0006bb3:	e8 fe 0e 00 00       	call   c0007ab6 <malloc>
c0006bb8:	89 04 9d 80 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdaf80],eax
c0006bbf:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006bc5:	c7 04 24 04 08 00 00 	mov    DWORD PTR [esp],0x804
c0006bcc:	e8 e5 0e 00 00       	call   c0007ab6 <malloc>
c0006bd1:	83 c4 10             	add    esp,0x10
c0006bd4:	89 04 9d 20 50 02 c0 	mov    DWORD PTR [ebx*4-0x3ffdafe0],eax
c0006bdb:	43                   	inc    ebx
c0006bdc:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0006be2:	83 fb 10             	cmp    ebx,0x10
c0006be5:	75 c4                	jne    c0006bab <fs_iso9660_init+0x53>
c0006be7:	31 c0                	xor    eax,eax
c0006be9:	83 c4 08             	add    esp,0x8
c0006bec:	5b                   	pop    ebx
c0006bed:	c3                   	ret    

c0006bee <fs_iso9660_shutdown>:
c0006bee:	53                   	push   ebx
c0006bef:	31 db                	xor    ebx,ebx
c0006bf1:	83 ec 08             	sub    esp,0x8
c0006bf4:	83 ec 0c             	sub    esp,0xc
c0006bf7:	ff 34 9d 80 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdaf80]
c0006bfe:	e8 c3 0e 00 00       	call   c0007ac6 <free>
c0006c03:	58                   	pop    eax
c0006c04:	ff 34 9d 20 50 02 c0 	push   DWORD PTR [ebx*4-0x3ffdafe0]
c0006c0b:	43                   	inc    ebx
c0006c0c:	e8 b5 0e 00 00       	call   c0007ac6 <free>
c0006c11:	83 c4 10             	add    esp,0x10
c0006c14:	83 fb 10             	cmp    ebx,0x10
c0006c17:	75 db                	jne    c0006bf4 <fs_iso9660_shutdown+0x6>
c0006c19:	a1 b0 5e 02 c0       	mov    eax,ds:0xc0025eb0
c0006c1e:	85 c0                	test   eax,eax
c0006c20:	74 0c                	je     c0006c2e <fs_iso9660_shutdown+0x40>
c0006c22:	83 ec 0c             	sub    esp,0xc
c0006c25:	50                   	push   eax
c0006c26:	e8 9b 0e 00 00       	call   c0007ac6 <free>
c0006c2b:	83 c4 10             	add    esp,0x10
c0006c2e:	a1 20 55 02 c0       	mov    eax,ds:0xc0025520
c0006c33:	85 c0                	test   eax,eax
c0006c35:	74 0c                	je     c0006c43 <fs_iso9660_shutdown+0x55>
c0006c37:	83 ec 0c             	sub    esp,0xc
c0006c3a:	50                   	push   eax
c0006c3b:	e8 86 0e 00 00       	call   c0007ac6 <free>
c0006c40:	83 c4 10             	add    esp,0x10
c0006c43:	c7 05 20 55 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025520,0x0
c0006c4d:	c7 05 b0 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025eb0,0x0
c0006c57:	31 c0                	xor    eax,eax
c0006c59:	83 c4 08             	add    esp,0x8
c0006c5c:	5b                   	pop    ebx
c0006c5d:	c3                   	ret    

c0006c5e <Computer::close(int, int, void*)>:
c0006c5e:	57                   	push   edi
c0006c5f:	56                   	push   esi
c0006c60:	53                   	push   ebx
c0006c61:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0006c65:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0006c69:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0006c6d:	e8 52 9e 00 00       	call   c0010ac4 <KeExecuteAtexit()>
c0006c72:	83 ec 0c             	sub    esp,0xc
c0006c75:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c7b:	50                   	push   eax
c0006c7c:	e8 e7 5a 00 00       	call   c000c768 <Device::closeAll()>
c0006c81:	8b 83 68 01 00 00    	mov    eax,DWORD PTR [ebx+0x168]
c0006c87:	83 c4 10             	add    esp,0x10
c0006c8a:	8b 10                	mov    edx,DWORD PTR [eax]
c0006c8c:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c0006c90:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c0006c98:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0006c9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0006ca0:	5b                   	pop    ebx
c0006ca1:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0006ca4:	5e                   	pop    esi
c0006ca5:	5f                   	pop    edi
c0006ca6:	ff e0                	jmp    eax

c0006ca8 <Krnl::firstTask()>:
c0006ca8:	53                   	push   ebx
c0006ca9:	83 ec 14             	sub    esp,0x14
c0006cac:	fb                   	sti    
c0006cad:	68 6f 05 02 c0       	push   0xc002056f
c0006cb2:	e8 ec 9e 00 00       	call   c0010ba3 <KeSetBootMessage(char const*)>
c0006cb7:	c7 04 24 24 07 00 00 	mov    DWORD PTR [esp],0x724
c0006cbe:	e8 f3 0d 00 00       	call   c0007ab6 <malloc>
c0006cc3:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0006cca:	89 c3                	mov    ebx,eax
c0006ccc:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0006cd1:	50                   	push   eax
c0006cd2:	68 88 05 02 c0       	push   0xc0020588
c0006cd7:	6a 01                	push   0x1
c0006cd9:	53                   	push   ebx
c0006cda:	e8 e5 e9 00 00       	call   c00156c4 <Process::Process(bool, char const*, Process*, char**)>
c0006cdf:	83 c4 20             	add    esp,0x20
c0006ce2:	68 ff 00 00 00       	push   0xff
c0006ce7:	6a 00                	push   0x0
c0006ce9:	68 fd 74 00 c0       	push   0xc00074fd
c0006cee:	53                   	push   ebx
c0006cef:	e8 f4 eb 00 00       	call   c00158e8 <Process::createThread(void (*)(void*), void*, int)>
c0006cf4:	8b 15 f0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296f0
c0006cfa:	6a 7a                	push   0x7a
c0006cfc:	6a 00                	push   0x0
c0006cfe:	68 d0 63 01 c0       	push   0xc00163d0
c0006d03:	52                   	push   edx
c0006d04:	e8 df eb 00 00       	call   c00158e8 <Process::createThread(void (*)(void*), void*, int)>
c0006d09:	83 c4 14             	add    esp,0x14
c0006d0c:	a3 a8 96 02 c0       	mov    ds:0xc00296a8,eax
c0006d11:	68 84 06 02 c0       	push   0xc0020684
c0006d16:	e8 88 9e 00 00       	call   c0010ba3 <KeSetBootMessage(char const*)>
c0006d1b:	c6 05 bd 5e 02 c0 01 	mov    BYTE PTR ds:0xc0025ebd,0x1
c0006d22:	e8 0b a7 00 00       	call   c0011432 <KeInitRand()>
c0006d27:	e8 c7 fa 00 00       	call   c00167f3 <Vm::initialise8086()>
c0006d2c:	e8 31 48 00 00       	call   c000b562 <Fs::initVFS()>
c0006d31:	c7 04 24 95 05 02 c0 	mov    DWORD PTR [esp],0xc0020595
c0006d38:	e8 66 9e 00 00       	call   c0010ba3 <KeSetBootMessage(char const*)>
c0006d3d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d42:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0006d48:	8b 10                	mov    edx,DWORD PTR [eax]
c0006d4a:	6a 00                	push   0x0
c0006d4c:	6a 00                	push   0x0
c0006d4e:	6a 00                	push   0x0
c0006d50:	50                   	push   eax
c0006d51:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0006d54:	83 c4 14             	add    esp,0x14
c0006d57:	68 84 06 02 c0       	push   0xc0020684
c0006d5c:	e8 42 9e 00 00       	call   c0010ba3 <KeSetBootMessage(char const*)>
c0006d61:	e8 d9 44 00 00       	call   c000b23f <KeInitialiseSymlinks()>
c0006d66:	e8 71 a3 00 00       	call   c00110dc <KeLoadSystemEnv()>
c0006d6b:	e8 ce a5 00 00       	call   c001133e <KeSetupPowerManager()>
c0006d70:	83 c4 0c             	add    esp,0xc
c0006d73:	6a 3a                	push   0x3a
c0006d75:	68 af 05 02 c0       	push   0xc00205af
c0006d7a:	68 b8 05 02 c0       	push   0xc00205b8
c0006d7f:	e8 8c cb 00 00       	call   c0013910 <Reg::readIntWithDefault(char*, char*, int)>
c0006d84:	89 04 24             	mov    DWORD PTR [esp],eax
c0006d87:	e8 3c 53 00 00       	call   c000c0c8 <User::loadClockSettings(int)>
c0006d8c:	c7 04 24 a8 06 02 c0 	mov    DWORD PTR [esp],0xc00206a8
c0006d93:	e8 0b 9e 00 00       	call   c0010ba3 <KeSetBootMessage(char const*)>
c0006d98:	59                   	pop    ecx
c0006d99:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0006d9e:	8b 98 68 01 00 00    	mov    ebx,DWORD PTR [eax+0x168]
c0006da4:	53                   	push   ebx
c0006da5:	e8 bc 59 00 00       	call   c000c766 <Device::loadDriversForAll()>
c0006daa:	c7 04 24 c0 05 02 c0 	mov    DWORD PTR [esp],0xc00205c0
c0006db1:	e8 ed 9d 00 00       	call   c0010ba3 <KeSetBootMessage(char const*)>
c0006db6:	58                   	pop    eax
c0006db7:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c0006dbd:	5a                   	pop    edx
c0006dbe:	6a 01                	push   0x1
c0006dc0:	68 d1 05 02 c0       	push   0xc00205d1
c0006dc5:	e8 10 e3 00 00       	call   c00150da <Thr::loadDLL(char const*, bool)>
c0006dca:	59                   	pop    ecx
c0006dcb:	5a                   	pop    edx
c0006dcc:	53                   	push   ebx
c0006dcd:	50                   	push   eax
c0006dce:	e8 38 e5 00 00       	call   c001530b <Thr::executeDLL(unsigned long, void*)>
c0006dd3:	83 c4 10             	add    esp,0x10
c0006dd6:	83 ec 0c             	sub    esp,0xc
c0006dd9:	6a 02                	push   0x2
c0006ddb:	e8 6c ef 00 00       	call   c0015d4c <blockTask(TaskState)>
c0006de0:	83 c4 10             	add    esp,0x10
c0006de3:	eb f1                	jmp    c0006dd6 <Krnl::firstTask()+0x12e>
c0006de5:	90                   	nop

c0006de6 <Computer::Computer()>:
c0006de6:	83 ec 0c             	sub    esp,0xc
c0006de9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006ded:	83 ec 08             	sub    esp,0x8
c0006df0:	68 ed 05 02 c0       	push   0xc00205ed
c0006df5:	50                   	push   eax
c0006df6:	e8 e7 59 00 00       	call   c000c7e2 <Device::Device(char const*)>
c0006dfb:	83 c4 10             	add    esp,0x10
c0006dfe:	ba f4 06 02 c0       	mov    edx,0xc00206f4
c0006e03:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e07:	89 10                	mov    DWORD PTR [eax],edx
c0006e09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e0d:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0006e17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e1b:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c0006e25:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e29:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0006e2f:	83 ca 04             	or     edx,0x4
c0006e32:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0006e38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e3c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e42:	0f b6 d0             	movzx  edx,al
c0006e45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e49:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c0006e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e54:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e5a:	0f b6 d0             	movzx  edx,al
c0006e5d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e61:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c0006e66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e6a:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0006e70:	8d 50 01             	lea    edx,[eax+0x1]
c0006e73:	88 d1                	mov    cl,dl
c0006e75:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006e79:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c0006e7f:	0f b6 d0             	movzx  edx,al
c0006e82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006e86:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0006e8a:	83 e1 3f             	and    ecx,0x3f
c0006e8d:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0006e91:	90                   	nop
c0006e92:	83 c4 0c             	add    esp,0xc
c0006e95:	c3                   	ret    

c0006e96 <Computer::setBootMessage(char const*)>:
c0006e96:	c3                   	ret    
c0006e97:	90                   	nop

c0006e98 <Computer::detectFeatures()>:
c0006e98:	55                   	push   ebp
c0006e99:	57                   	push   edi
c0006e9a:	56                   	push   esi
c0006e9b:	53                   	push   ebx
c0006e9c:	83 ec 1c             	sub    esp,0x1c
c0006e9f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0006ea3:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0006ea9:	81 e2 04 00 fc ff    	and    edx,0xfffc0004
c0006eaf:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0006eb5:	e8 3f 93 ff ff       	call   c00001f9 <detectCPUID>
c0006eba:	31 d2                	xor    edx,edx
c0006ebc:	85 c0                	test   eax,eax
c0006ebe:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ec4:	0f 95 c2             	setne  dl
c0006ec7:	83 e0 fd             	and    eax,0xfffffffd
c0006eca:	d1 e2                	shl    edx,1
c0006ecc:	09 d0                	or     eax,edx
c0006ece:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ed4:	a8 02                	test   al,0x2
c0006ed6:	75 51                	jne    c0006f29 <Computer::detectFeatures()+0x91>
c0006ed8:	f6 05 d1 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed1,0x4
c0006edf:	74 0f                	je     c0006ef0 <Computer::detectFeatures()+0x58>
c0006ee1:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006ee7:	83 e0 fb             	and    eax,0xfffffffb
c0006eea:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006ef0:	e8 81 7f 01 00       	call   c001ee76 <x87Detect>
c0006ef5:	83 e0 01             	and    eax,0x1
c0006ef8:	c1 e0 04             	shl    eax,0x4
c0006efb:	89 c2                	mov    edx,eax
c0006efd:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f03:	83 e0 ef             	and    eax,0xffffffef
c0006f06:	09 d0                	or     eax,edx
c0006f08:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f0e:	88 c2                	mov    dl,al
c0006f10:	a8 10                	test   al,0x10
c0006f12:	0f 85 33 01 00 00    	jne    c000704b <Computer::detectFeatures()+0x1b3>
c0006f18:	80 e2 80             	and    dl,0x80
c0006f1b:	0f 85 4c 01 00 00    	jne    c000706d <Computer::detectFeatures()+0x1d5>
c0006f21:	83 c4 1c             	add    esp,0x1c
c0006f24:	5b                   	pop    ebx
c0006f25:	5e                   	pop    esi
c0006f26:	5f                   	pop    edi
c0006f27:	5d                   	pop    ebp
c0006f28:	c3                   	ret    
c0006f29:	83 ec 0c             	sub    esp,0xc
c0006f2c:	6a 20                	push   0x20
c0006f2e:	e8 a9 90 00 00       	call   c000ffdc <CPU::cpuidCheckEDX(unsigned int)>
c0006f33:	83 e0 01             	and    eax,0x1
c0006f36:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c0006f3d:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006f43:	83 e0 f7             	and    eax,0xfffffff7
c0006f46:	09 d0                	or     eax,edx
c0006f48:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006f4e:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c0006f55:	e8 82 90 00 00       	call   c000ffdc <CPU::cpuidCheckEDX(unsigned int)>
c0006f5a:	89 c2                	mov    edx,eax
c0006f5c:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f62:	83 e2 01             	and    edx,0x1
c0006f65:	83 e0 fe             	and    eax,0xfffffffe
c0006f68:	09 d0                	or     eax,edx
c0006f6a:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f70:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c0006f77:	e8 60 90 00 00       	call   c000ffdc <CPU::cpuidCheckEDX(unsigned int)>
c0006f7c:	89 c2                	mov    edx,eax
c0006f7e:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0006f84:	c1 e2 07             	shl    edx,0x7
c0006f87:	83 e0 7f             	and    eax,0x7f
c0006f8a:	09 d0                	or     eax,edx
c0006f8c:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c0006f92:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c0006f99:	e8 3e 90 00 00       	call   c000ffdc <CPU::cpuidCheckEDX(unsigned int)>
c0006f9e:	83 c4 10             	add    esp,0x10
c0006fa1:	83 e0 01             	and    eax,0x1
c0006fa4:	c1 e0 05             	shl    eax,0x5
c0006fa7:	89 c2                	mov    edx,eax
c0006fa9:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006faf:	83 e0 df             	and    eax,0xffffffdf
c0006fb2:	09 d0                	or     eax,edx
c0006fb4:	f7 05 d0 5e 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc0025ed0,0x401
c0006fbe:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fc4:	0f 84 c9 00 00 00    	je     c0007093 <Computer::detectFeatures()+0x1fb>
c0006fca:	83 e0 fe             	and    eax,0xfffffffe
c0006fcd:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fd3:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c0006fd9:	89 c2                	mov    edx,eax
c0006fdb:	83 e2 09             	and    edx,0x9
c0006fde:	83 fa 01             	cmp    edx,0x1
c0006fe1:	75 09                	jne    c0006fec <Computer::detectFeatures()+0x154>
c0006fe3:	83 e0 fe             	and    eax,0xfffffffe
c0006fe6:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c0006fec:	83 ec 0c             	sub    esp,0xc
c0006fef:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006ff3:	50                   	push   eax
c0006ff4:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c0006ff8:	55                   	push   ebp
c0006ff9:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0006ffd:	57                   	push   edi
c0006ffe:	8d 74 24 18          	lea    esi,[esp+0x18]
c0007002:	56                   	push   esi
c0007003:	68 00 00 00 80       	push   0x80000000
c0007008:	e8 4b 8f 00 00       	call   c000ff58 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000700d:	83 c4 20             	add    esp,0x20
c0007010:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c0007017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000701b:	0f 86 b7 fe ff ff    	jbe    c0006ed8 <Computer::detectFeatures()+0x40>
c0007021:	83 ec 0c             	sub    esp,0xc
c0007024:	50                   	push   eax
c0007025:	55                   	push   ebp
c0007026:	57                   	push   edi
c0007027:	56                   	push   esi
c0007028:	68 01 00 00 80       	push   0x80000001
c000702d:	e8 26 8f 00 00       	call   c000ff58 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0007032:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0007038:	83 c4 20             	add    esp,0x20
c000703b:	25 bf ff fc ff       	and    eax,0xfffcffbf
c0007040:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0007046:	e9 8d fe ff ff       	jmp    c0006ed8 <Computer::detectFeatures()+0x40>
c000704b:	e8 e0 7d 01 00       	call   c001ee30 <absolutelyNoChanceInHell>
c0007050:	8a 93 6c 01 00 00    	mov    dl,BYTE PTR [ebx+0x16c]
c0007056:	c1 e0 07             	shl    eax,0x7
c0007059:	83 e2 7f             	and    edx,0x7f
c000705c:	09 c2                	or     edx,eax
c000705e:	88 93 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],dl
c0007064:	80 e2 80             	and    dl,0x80
c0007067:	0f 84 b4 fe ff ff    	je     c0006f21 <Computer::detectFeatures()+0x89>
c000706d:	e8 2e 7a 01 00       	call   c001eaa0 <avxDetect>
c0007072:	83 e0 01             	and    eax,0x1
c0007075:	c1 e0 05             	shl    eax,0x5
c0007078:	89 c2                	mov    edx,eax
c000707a:	8a 83 6d 01 00 00    	mov    al,BYTE PTR [ebx+0x16d]
c0007080:	83 e0 df             	and    eax,0xffffffdf
c0007083:	09 d0                	or     eax,edx
c0007085:	88 83 6d 01 00 00    	mov    BYTE PTR [ebx+0x16d],al
c000708b:	83 c4 1c             	add    esp,0x1c
c000708e:	5b                   	pop    ebx
c000708f:	5e                   	pop    esi
c0007090:	5f                   	pop    edi
c0007091:	5d                   	pop    ebp
c0007092:	c3                   	ret    
c0007093:	83 ec 0c             	sub    esp,0xc
c0007096:	68 00 02 00 00       	push   0x200
c000709b:	e8 3c 8f 00 00       	call   c000ffdc <CPU::cpuidCheckEDX(unsigned int)>
c00070a0:	83 c4 10             	add    esp,0x10
c00070a3:	89 c2                	mov    edx,eax
c00070a5:	8a 83 6c 01 00 00    	mov    al,BYTE PTR [ebx+0x16c]
c00070ab:	83 e2 01             	and    edx,0x1
c00070ae:	83 e0 fe             	and    eax,0xfffffffe
c00070b1:	09 d0                	or     eax,edx
c00070b3:	88 83 6c 01 00 00    	mov    BYTE PTR [ebx+0x16c],al
c00070b9:	e9 15 ff ff ff       	jmp    c0006fd3 <Computer::detectFeatures()+0x13b>

c00070be <Computer::displayFeatures()>:
c00070be:	c3                   	ret    
c00070bf:	90                   	nop

c00070c0 <Computer::rdmsr(unsigned int)>:
c00070c0:	83 ec 0c             	sub    esp,0xc
c00070c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070c7:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c00070ce:	74 0a                	je     c00070da <Computer::rdmsr(unsigned int)+0x1a>
c00070d0:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00070d4:	0f 32                	rdmsr  
c00070d6:	83 c4 0c             	add    esp,0xc
c00070d9:	c3                   	ret    
c00070da:	83 ec 0c             	sub    esp,0xc
c00070dd:	68 f6 05 02 c0       	push   0xc00205f6
c00070e2:	e8 92 a1 00 00       	call   c0011279 <KePanic(char const*)>
c00070e7:	83 c4 10             	add    esp,0x10
c00070ea:	eb e4                	jmp    c00070d0 <Computer::rdmsr(unsigned int)+0x10>

c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>:
c00070ec:	57                   	push   edi
c00070ed:	56                   	push   esi
c00070ee:	83 ec 04             	sub    esp,0x4
c00070f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00070f5:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00070f9:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c00070fd:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c0007104:	74 10                	je     c0007116 <Computer::wrmsr(unsigned int, unsigned long long)+0x2a>
c0007106:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000710a:	89 f0                	mov    eax,esi
c000710c:	89 fa                	mov    edx,edi
c000710e:	0f 30                	wrmsr  
c0007110:	83 c4 04             	add    esp,0x4
c0007113:	5e                   	pop    esi
c0007114:	5f                   	pop    edi
c0007115:	c3                   	ret    
c0007116:	83 ec 0c             	sub    esp,0xc
c0007119:	68 fc 05 02 c0       	push   0xc00205fc
c000711e:	e8 56 a1 00 00       	call   c0011279 <KePanic(char const*)>
c0007123:	83 c4 10             	add    esp,0x10
c0007126:	eb de                	jmp    c0007106 <Computer::wrmsr(unsigned int, unsigned long long)+0x1a>

c0007128 <Computer::shutdown()>:
c0007128:	83 ec 0c             	sub    esp,0xc
c000712b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000712f:	8b 10                	mov    edx,DWORD PTR [eax]
c0007131:	6a 00                	push   0x0
c0007133:	6a 00                	push   0x0
c0007135:	6a 00                	push   0x0
c0007137:	50                   	push   eax
c0007138:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000713b:	83 c4 1c             	add    esp,0x1c
c000713e:	c3                   	ret    
c000713f:	90                   	nop

c0007140 <Computer::restart()>:
c0007140:	83 ec 0c             	sub    esp,0xc
c0007143:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007147:	8b 10                	mov    edx,DWORD PTR [eax]
c0007149:	6a 00                	push   0x0
c000714b:	6a 00                	push   0x0
c000714d:	6a 01                	push   0x1
c000714f:	50                   	push   eax
c0007150:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0007153:	83 c4 1c             	add    esp,0x1c
c0007156:	c3                   	ret    
c0007157:	90                   	nop

c0007158 <Computer::sleep()>:
c0007158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000715c:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c0007162:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0007166:	e9 89 88 00 00       	jmp    c000f9f4 <ACPI::sleep()>
c000716b:	90                   	nop

c000716c <Computer::nmiEnabled()>:
c000716c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007170:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c0007176:	c3                   	ret    
c0007177:	90                   	nop

c0007178 <Computer::readCMOS(unsigned char)>:
c0007178:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000717c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007180:	80 ba 58 01 00 00 00 	cmp    BYTE PTR [edx+0x158],0x0
c0007187:	75 09                	jne    c0007192 <Computer::readCMOS(unsigned char)+0x1a>
c0007189:	b2 80                	mov    dl,0x80
c000718b:	09 d0                	or     eax,edx
c000718d:	e6 70                	out    0x70,al
c000718f:	e4 71                	in     al,0x71
c0007191:	c3                   	ret    
c0007192:	31 d2                	xor    edx,edx
c0007194:	eb f5                	jmp    c000718b <Computer::readCMOS(unsigned char)+0x13>

c0007196 <Computer::enableNMI(bool)>:
c0007196:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000719a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000719e:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c00071a4:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c00071ac:	eb ca                	jmp    c0007178 <Computer::readCMOS(unsigned char)>

c00071ae <Computer::open(int, int, void*)>:
c00071ae:	56                   	push   esi
c00071af:	53                   	push   ebx
c00071b0:	83 ec 10             	sub    esp,0x10
c00071b3:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00071b7:	f6 05 d0 5e 02 c0 04 	test   BYTE PTR ds:0xc0025ed0,0x4
c00071be:	68 02 06 02 c0       	push   0xc0020602
c00071c3:	0f 94 05 a0 2f 02 c0 	sete   BYTE PTR ds:0xc0022fa0
c00071ca:	e8 d4 99 00 00       	call   c0010ba3 <KeSetBootMessage(char const*)>
c00071cf:	c7 04 24 64 12 00 00 	mov    DWORD PTR [esp],0x1264
c00071d6:	e8 db 08 00 00       	call   c0007ab6 <malloc>
c00071db:	89 04 24             	mov    DWORD PTR [esp],eax
c00071de:	89 c6                	mov    esi,eax
c00071e0:	e8 83 83 00 00       	call   c000f568 <ACPI::ACPI()>
c00071e5:	89 b3 68 01 00 00    	mov    DWORD PTR [ebx+0x168],esi
c00071eb:	58                   	pop    eax
c00071ec:	5a                   	pop    edx
c00071ed:	56                   	push   esi
c00071ee:	53                   	push   ebx
c00071ef:	e8 56 54 00 00       	call   c000c64a <Device::addChild(Device*)>
c00071f4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00071f7:	e8 9c fc ff ff       	call   c0006e98 <Computer::detectFeatures()>
c00071fc:	59                   	pop    ecx
c00071fd:	5e                   	pop    esi
c00071fe:	6a 01                	push   0x1
c0007200:	53                   	push   ebx
c0007201:	e8 90 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c0007206:	c7 04 24 1a 06 02 c0 	mov    DWORD PTR [esp],0xc002061a
c000720d:	e8 91 99 00 00       	call   c0010ba3 <KeSetBootMessage(char const*)>
c0007212:	c7 04 24 94 11 00 00 	mov    DWORD PTR [esp],0x1194
c0007219:	e8 98 08 00 00       	call   c0007ab6 <malloc>
c000721e:	89 04 24             	mov    DWORD PTR [esp],eax
c0007221:	89 c6                	mov    esi,eax
c0007223:	e8 6c 8e 00 00       	call   c0010094 <CPU::CPU()>
c0007228:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000722e:	58                   	pop    eax
c000722f:	5a                   	pop    edx
c0007230:	56                   	push   esi
c0007231:	53                   	push   ebx
c0007232:	e8 13 54 00 00       	call   c000c64a <Device::addChild(Device*)>
c0007237:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000723d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0007241:	8b 10                	mov    edx,DWORD PTR [eax]
c0007243:	51                   	push   ecx
c0007244:	6a 00                	push   0x0
c0007246:	6a 00                	push   0x0
c0007248:	50                   	push   eax
c0007249:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000724c:	83 c4 14             	add    esp,0x14
c000724f:	68 c8 06 02 c0       	push   0xc00206c8
c0007254:	e8 4a 99 00 00       	call   c0010ba3 <KeSetBootMessage(char const*)>
c0007259:	e8 d2 07 01 00       	call   c0017a30 <HalInitialiseCoprocessor()>
c000725e:	c7 04 24 34 06 02 c0 	mov    DWORD PTR [esp],0xc0020634
c0007265:	e8 39 99 00 00       	call   c0010ba3 <KeSetBootMessage(char const*)>
c000726a:	c7 04 24 a8 6c 00 c0 	mov    DWORD PTR [esp],0xc0006ca8
c0007271:	e8 9e e7 00 00       	call   c0015a14 <setupMultitasking(void (*)())>
c0007276:	83 c4 14             	add    esp,0x14
c0007279:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000727e:	5b                   	pop    ebx
c000727f:	5e                   	pop    esi
c0007280:	c3                   	ret    
c0007281:	90                   	nop

c0007282 <Computer::disableNMI()>:
c0007282:	6a 00                	push   0x0
c0007284:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007288:	50                   	push   eax
c0007289:	e8 08 ff ff ff       	call   c0007196 <Computer::enableNMI(bool)>
c000728e:	5a                   	pop    edx
c000728f:	59                   	pop    ecx
c0007290:	c3                   	ret    
c0007291:	90                   	nop

c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>:
c0007292:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007296:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000729a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000729e:	80 b9 58 01 00 00 00 	cmp    BYTE PTR [ecx+0x158],0x0
c00072a5:	75 0b                	jne    c00072b2 <Computer::writeCMOS(unsigned char, unsigned char)+0x20>
c00072a7:	b1 80                	mov    cl,0x80
c00072a9:	09 c8                	or     eax,ecx
c00072ab:	e6 70                	out    0x70,al
c00072ad:	88 d0                	mov    al,dl
c00072af:	e6 71                	out    0x71,al
c00072b1:	c3                   	ret    
c00072b2:	31 c9                	xor    ecx,ecx
c00072b4:	eb f3                	jmp    c00072a9 <Computer::writeCMOS(unsigned char, unsigned char)+0x17>

c00072b6 <Computer::handleNMI()>:
c00072b6:	56                   	push   esi
c00072b7:	53                   	push   ebx
c00072b8:	83 ec 10             	sub    esp,0x10
c00072bb:	e4 92                	in     al,0x92
c00072bd:	89 c6                	mov    esi,eax
c00072bf:	e4 61                	in     al,0x61
c00072c1:	68 4f 06 02 c0       	push   0xc002064f
c00072c6:	88 c3                	mov    bl,al
c00072c8:	e8 78 36 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00072cd:	83 c4 10             	add    esp,0x10
c00072d0:	83 e6 10             	and    esi,0x10
c00072d3:	75 10                	jne    c00072e5 <Computer::handleNMI()+0x2f>
c00072d5:	f6 c3 40             	test   bl,0x40
c00072d8:	75 20                	jne    c00072fa <Computer::handleNMI()+0x44>
c00072da:	80 e3 80             	and    bl,0x80
c00072dd:	75 30                	jne    c000730f <Computer::handleNMI()+0x59>
c00072df:	83 c4 04             	add    esp,0x4
c00072e2:	5b                   	pop    ebx
c00072e3:	5e                   	pop    esi
c00072e4:	c3                   	ret    
c00072e5:	83 ec 0c             	sub    esp,0xc
c00072e8:	68 60 06 02 c0       	push   0xc0020660
c00072ed:	e8 87 9f 00 00       	call   c0011279 <KePanic(char const*)>
c00072f2:	83 c4 10             	add    esp,0x10
c00072f5:	f6 c3 40             	test   bl,0x40
c00072f8:	74 e0                	je     c00072da <Computer::handleNMI()+0x24>
c00072fa:	83 ec 0c             	sub    esp,0xc
c00072fd:	68 6d 06 02 c0       	push   0xc002066d
c0007302:	e8 72 9f 00 00       	call   c0011279 <KePanic(char const*)>
c0007307:	83 c4 10             	add    esp,0x10
c000730a:	80 e3 80             	and    bl,0x80
c000730d:	74 d0                	je     c00072df <Computer::handleNMI()+0x29>
c000730f:	c7 44 24 10 77 06 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020677
c0007317:	83 c4 04             	add    esp,0x4
c000731a:	5b                   	pop    ebx
c000731b:	5e                   	pop    esi
c000731c:	e9 58 9f 00 00       	jmp    c0011279 <KePanic(char const*)>
c0007321:	90                   	nop

c0007322 <GDTEntry::setBase(unsigned int)>:
c0007322:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007326:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000732a:	89 c1                	mov    ecx,eax
c000732c:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c0007330:	c1 e9 10             	shr    ecx,0x10
c0007333:	c1 e8 18             	shr    eax,0x18
c0007336:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c0007339:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000733c:	c3                   	ret    
c000733d:	90                   	nop

c000733e <GDTEntry::setLimit(unsigned int)>:
c000733e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007342:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007346:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c0007349:	66 89 01             	mov    WORD PTR [ecx],ax
c000734c:	83 e2 f0             	and    edx,0xfffffff0
c000734f:	c1 e8 10             	shr    eax,0x10
c0007352:	83 e0 0f             	and    eax,0xf
c0007355:	09 d0                	or     eax,edx
c0007357:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000735a:	c3                   	ret    
c000735b:	90                   	nop

c000735c <GDT::GDT()>:
c000735c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007366:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000736a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007370:	90                   	nop
c0007371:	c3                   	ret    

c0007372 <GDT::addEntry(GDTEntry)>:
c0007372:	53                   	push   ebx
c0007373:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0007377:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000737b:	8b 02                	mov    eax,DWORD PTR [edx]
c000737d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007381:	89 4c c2 04          	mov    DWORD PTR [edx+eax*8+0x4],ecx
c0007385:	89 5c c2 08          	mov    DWORD PTR [edx+eax*8+0x8],ebx
c0007389:	8d 48 01             	lea    ecx,[eax+0x1]
c000738c:	c1 e0 03             	shl    eax,0x3
c000738f:	89 0a                	mov    DWORD PTR [edx],ecx
c0007391:	5b                   	pop    ebx
c0007392:	c3                   	ret    
c0007393:	90                   	nop

c0007394 <GDT::getNumberOfEntries()>:
c0007394:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007398:	8b 00                	mov    eax,DWORD PTR [eax]
c000739a:	c3                   	ret    
c000739b:	90                   	nop

c000739c <GDT::flush()>:
c000739c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00073a0:	8b 10                	mov    edx,DWORD PTR [eax]
c00073a2:	83 c0 04             	add    eax,0x4
c00073a5:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c00073ac:	a3 c2 5e 02 c0       	mov    ds:0xc0025ec2,eax
c00073b1:	66 89 15 c0 5e 02 c0 	mov    WORD PTR ds:0xc0025ec0,dx
c00073b8:	e9 9d 8f ff ff       	jmp    c000035a <loadGDT>
c00073bd:	90                   	nop

c00073be <GDT::setup()>:
c00073be:	57                   	push   edi
c00073bf:	56                   	push   esi
c00073c0:	53                   	push   ebx
c00073c1:	83 ec 30             	sub    esp,0x30
c00073c4:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00073c8:	6a 00                	push   0x0
c00073ca:	8d 74 24 14          	lea    esi,[esp+0x14]
c00073ce:	56                   	push   esi
c00073cf:	e8 4e ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073d4:	6a 00                	push   0x0
c00073d6:	56                   	push   esi
c00073d7:	e8 62 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073dc:	81 64 24 24 ff 00 0f ff 	and    DWORD PTR [esp+0x24],0xff0f00ff
c00073e4:	6a 00                	push   0x0
c00073e6:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c00073ea:	56                   	push   esi
c00073eb:	e8 32 ff ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c00073f0:	68 ff ff ff 00       	push   0xffffff
c00073f5:	56                   	push   esi
c00073f6:	e8 43 ff ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c00073fb:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c00073ff:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0007403:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007407:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000740b:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c0007410:	0d 00 9a c0 00       	or     eax,0xc09a00
c0007415:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0007419:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000741d:	89 f8                	mov    eax,edi
c000741f:	89 fa                	mov    edx,edi
c0007421:	80 e4 f7             	and    ah,0xf7
c0007424:	80 ce 60             	or     dh,0x60
c0007427:	89 c7                	mov    edi,eax
c0007429:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000742d:	80 cc 60             	or     ah,0x60
c0007430:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0007434:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0007438:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000743c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007440:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007444:	83 c4 20             	add    esp,0x20
c0007447:	6a 00                	push   0x0
c0007449:	8d 44 24 24          	lea    eax,[esp+0x24]
c000744d:	50                   	push   eax
c000744e:	e8 cf fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007453:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0007457:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000745b:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000745f:	83 e0 3f             	and    eax,0x3f
c0007462:	88 44 24 2e          	mov    BYTE PTR [esp+0x2e],al
c0007466:	6a 00                	push   0x0
c0007468:	8d 44 24 34          	lea    eax,[esp+0x34]
c000746c:	50                   	push   eax
c000746d:	e8 b0 fe ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c0007472:	8a 44 24 3e          	mov    al,BYTE PTR [esp+0x3e]
c0007476:	83 e0 3f             	and    eax,0x3f
c0007479:	88 44 24 3e          	mov    BYTE PTR [esp+0x3e],al
c000747d:	83 c4 0c             	add    esp,0xc
c0007480:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007484:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007488:	53                   	push   ebx
c0007489:	e8 e4 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000748e:	83 c4 0c             	add    esp,0xc
c0007491:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007495:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007499:	53                   	push   ebx
c000749a:	e8 d3 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c000749f:	83 c4 0c             	add    esp,0xc
c00074a2:	57                   	push   edi
c00074a3:	56                   	push   esi
c00074a4:	53                   	push   ebx
c00074a5:	e8 c8 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074aa:	83 c4 0c             	add    esp,0xc
c00074ad:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b1:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c00074b5:	53                   	push   ebx
c00074b6:	e8 b7 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074bb:	83 c4 0c             	add    esp,0xc
c00074be:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00074c6:	53                   	push   ebx
c00074c7:	e8 a6 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074cc:	83 c4 0c             	add    esp,0xc
c00074cf:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00074d7:	53                   	push   ebx
c00074d8:	e8 95 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074dd:	83 c4 0c             	add    esp,0xc
c00074e0:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e4:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00074e8:	53                   	push   ebx
c00074e9:	e8 84 fe ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00074ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00074f1:	e8 a6 fe ff ff       	call   c000739c <GDT::flush()>
c00074f6:	83 c4 40             	add    esp,0x40
c00074f9:	5b                   	pop    ebx
c00074fa:	5e                   	pop    esi
c00074fb:	5f                   	pop    edi
c00074fc:	c3                   	ret    

c00074fd <idleFunction(void*)>:
c00074fd:	83 ec 0c             	sub    esp,0xc
c0007500:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007505:	48                   	dec    eax
c0007506:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000750b:	75 01                	jne    c000750e <idleFunction(void*)+0x11>
c000750d:	fb                   	sti    
c000750e:	e8 e9 01 01 00       	call   c00176fc <HalSystemIdle()>
c0007513:	e8 1a 7f 01 00       	call   c001f432 <idleCommon()>
c0007518:	eb f4                	jmp    c000750e <idleFunction(void*)+0x11>
c000751a:	66 90                	xchg   ax,ax

c000751c <IDTEntry::IDTEntry(bool)>:
c000751c:	53                   	push   ebx
c000751d:	83 ec 04             	sub    esp,0x4
c0007520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007524:	88 04 24             	mov    BYTE PTR [esp],al
c0007527:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000752b:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c0007531:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007535:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c0007539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000753d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007540:	83 e2 f0             	and    edx,0xfffffff0
c0007543:	83 ca 0e             	or     edx,0xe
c0007546:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007549:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000754d:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007550:	83 e2 ef             	and    edx,0xffffffef
c0007553:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007556:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c000755a:	85 c0                	test   eax,eax
c000755c:	74 06                	je     c0007564 <IDTEntry::IDTEntry(bool)+0x48>
c000755e:	b2 03                	mov    dl,0x3
c0007560:	eb 06                	jmp    c0007568 <IDTEntry::IDTEntry(bool)+0x4c>
c0007562:	66 90                	xchg   ax,ax
c0007564:	b2 00                	mov    dl,0x0
c0007566:	66 90                	xchg   ax,ax
c0007568:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000756c:	83 e2 03             	and    edx,0x3
c000756f:	89 d3                	mov    ebx,edx
c0007571:	c1 e3 05             	shl    ebx,0x5
c0007574:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c0007577:	83 e2 9f             	and    edx,0xffffff9f
c000757a:	88 d1                	mov    cl,dl
c000757c:	88 da                	mov    dl,bl
c000757e:	09 ca                	or     edx,ecx
c0007580:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007583:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007587:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000758a:	83 ca 80             	or     edx,0xffffff80
c000758d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c0007590:	90                   	nop
c0007591:	83 c4 04             	add    esp,0x4
c0007594:	5b                   	pop    ebx
c0007595:	c3                   	ret    

c0007596 <IDTEntry::setOffset(unsigned int)>:
c0007596:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000759a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000759e:	66 89 02             	mov    WORD PTR [edx],ax
c00075a1:	c1 e8 10             	shr    eax,0x10
c00075a4:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c00075a8:	c3                   	ret    
c00075a9:	90                   	nop
c00075aa:	66 90                	xchg   ax,ax

c00075ac <IDT::IDT()>:
c00075ac:	90                   	nop
c00075ad:	c3                   	ret    

c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c00075ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00075b2:	83 c0 30             	add    eax,0x30
c00075b5:	c3                   	ret    

c00075b6 <IDT::addEntry(IDTEntry, int)>:
c00075b6:	53                   	push   ebx
c00075b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00075bb:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00075bf:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00075c3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00075c7:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c00075ca:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c00075ce:	5b                   	pop    ebx
c00075cf:	c3                   	ret    

c00075d0 <IDT::addEntry(int, void (*)(), bool)>:
c00075d0:	53                   	push   ebx
c00075d1:	83 ec 10             	sub    esp,0x10
c00075d4:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c00075d9:	50                   	push   eax
c00075da:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c00075de:	53                   	push   ebx
c00075df:	e8 38 ff ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c00075e4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00075e8:	53                   	push   ebx
c00075e9:	e8 a8 ff ff ff       	call   c0007596 <IDTEntry::setOffset(unsigned int)>
c00075ee:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00075f2:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075f6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00075fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00075fe:	e8 b3 ff ff ff       	call   c00075b6 <IDT::addEntry(IDTEntry, int)>
c0007603:	83 c4 30             	add    esp,0x30
c0007606:	5b                   	pop    ebx
c0007607:	c3                   	ret    

c0007608 <IDT::flush()>:
c0007608:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000760c:	66 c7 05 c8 5e 02 c0 ff 07 	mov    WORD PTR ds:0xc0025ec8,0x7ff
c0007615:	a3 ca 5e 02 c0       	mov    ds:0xc0025eca,eax
c000761a:	0f 01 1d c8 5e 02 c0 	lidtd  ds:0xc0025ec8
c0007621:	c3                   	ret    

c0007622 <IDT::setup()>:
c0007622:	57                   	push   edi
c0007623:	56                   	push   esi
c0007624:	53                   	push   ebx
c0007625:	83 ec 10             	sub    esp,0x10
c0007628:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000762c:	6a 00                	push   0x0
c000762e:	68 30 eb 01 c0       	push   0xc001eb30
c0007633:	6a 00                	push   0x0
c0007635:	53                   	push   ebx
c0007636:	e8 95 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000763b:	6a 00                	push   0x0
c000763d:	68 40 eb 01 c0       	push   0xc001eb40
c0007642:	6a 01                	push   0x1
c0007644:	53                   	push   ebx
c0007645:	e8 86 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000764a:	83 c4 20             	add    esp,0x20
c000764d:	6a 00                	push   0x0
c000764f:	68 4a eb 01 c0       	push   0xc001eb4a
c0007654:	6a 02                	push   0x2
c0007656:	53                   	push   ebx
c0007657:	e8 74 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000765c:	6a 00                	push   0x0
c000765e:	68 54 eb 01 c0       	push   0xc001eb54
c0007663:	6a 03                	push   0x3
c0007665:	53                   	push   ebx
c0007666:	e8 65 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000766b:	83 c4 20             	add    esp,0x20
c000766e:	6a 00                	push   0x0
c0007670:	68 5e eb 01 c0       	push   0xc001eb5e
c0007675:	6a 04                	push   0x4
c0007677:	53                   	push   ebx
c0007678:	e8 53 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000767d:	6a 00                	push   0x0
c000767f:	68 68 eb 01 c0       	push   0xc001eb68
c0007684:	6a 05                	push   0x5
c0007686:	53                   	push   ebx
c0007687:	e8 44 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000768c:	83 c4 20             	add    esp,0x20
c000768f:	6a 00                	push   0x0
c0007691:	68 72 eb 01 c0       	push   0xc001eb72
c0007696:	6a 06                	push   0x6
c0007698:	53                   	push   ebx
c0007699:	e8 32 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000769e:	6a 00                	push   0x0
c00076a0:	68 7c eb 01 c0       	push   0xc001eb7c
c00076a5:	6a 07                	push   0x7
c00076a7:	53                   	push   ebx
c00076a8:	e8 23 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ad:	83 c4 20             	add    esp,0x20
c00076b0:	6a 00                	push   0x0
c00076b2:	68 86 eb 01 c0       	push   0xc001eb86
c00076b7:	6a 08                	push   0x8
c00076b9:	53                   	push   ebx
c00076ba:	e8 11 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076bf:	6a 00                	push   0x0
c00076c1:	68 8e eb 01 c0       	push   0xc001eb8e
c00076c6:	6a 09                	push   0x9
c00076c8:	53                   	push   ebx
c00076c9:	e8 02 ff ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ce:	83 c4 20             	add    esp,0x20
c00076d1:	6a 00                	push   0x0
c00076d3:	68 98 eb 01 c0       	push   0xc001eb98
c00076d8:	6a 0a                	push   0xa
c00076da:	53                   	push   ebx
c00076db:	e8 f0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076e0:	6a 00                	push   0x0
c00076e2:	68 a0 eb 01 c0       	push   0xc001eba0
c00076e7:	6a 0b                	push   0xb
c00076e9:	53                   	push   ebx
c00076ea:	e8 e1 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00076ef:	83 c4 20             	add    esp,0x20
c00076f2:	6a 00                	push   0x0
c00076f4:	68 a8 eb 01 c0       	push   0xc001eba8
c00076f9:	6a 0c                	push   0xc
c00076fb:	53                   	push   ebx
c00076fc:	e8 cf fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007701:	6a 00                	push   0x0
c0007703:	68 b0 eb 01 c0       	push   0xc001ebb0
c0007708:	6a 0d                	push   0xd
c000770a:	53                   	push   ebx
c000770b:	e8 c0 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007710:	83 c4 20             	add    esp,0x20
c0007713:	6a 00                	push   0x0
c0007715:	68 ca eb 01 c0       	push   0xc001ebca
c000771a:	6a 0e                	push   0xe
c000771c:	53                   	push   ebx
c000771d:	e8 ae fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007722:	6a 00                	push   0x0
c0007724:	68 d2 eb 01 c0       	push   0xc001ebd2
c0007729:	6a 0f                	push   0xf
c000772b:	53                   	push   ebx
c000772c:	e8 9f fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007731:	83 c4 20             	add    esp,0x20
c0007734:	6a 00                	push   0x0
c0007736:	68 dc eb 01 c0       	push   0xc001ebdc
c000773b:	6a 10                	push   0x10
c000773d:	53                   	push   ebx
c000773e:	e8 8d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007743:	6a 00                	push   0x0
c0007745:	68 e6 eb 01 c0       	push   0xc001ebe6
c000774a:	6a 11                	push   0x11
c000774c:	53                   	push   ebx
c000774d:	e8 7e fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007752:	83 c4 20             	add    esp,0x20
c0007755:	6a 00                	push   0x0
c0007757:	68 f0 eb 01 c0       	push   0xc001ebf0
c000775c:	6a 12                	push   0x12
c000775e:	53                   	push   ebx
c000775f:	e8 6c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007764:	6a 01                	push   0x1
c0007766:	68 8a ec 01 c0       	push   0xc001ec8a
c000776b:	6a 60                	push   0x60
c000776d:	53                   	push   ebx
c000776e:	e8 5d fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007773:	83 c4 20             	add    esp,0x20
c0007776:	6a 00                	push   0x0
c0007778:	68 91 ec 01 c0       	push   0xc001ec91
c000777d:	6a 20                	push   0x20
c000777f:	53                   	push   ebx
c0007780:	e8 4b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007785:	6a 00                	push   0x0
c0007787:	68 7c ec 01 c0       	push   0xc001ec7c
c000778c:	6a 21                	push   0x21
c000778e:	53                   	push   ebx
c000778f:	e8 3c fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007794:	83 c4 20             	add    esp,0x20
c0007797:	6a 00                	push   0x0
c0007799:	68 83 ec 01 c0       	push   0xc001ec83
c000779e:	6a 22                	push   0x22
c00077a0:	53                   	push   ebx
c00077a1:	e8 2a fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077a6:	6a 00                	push   0x0
c00077a8:	68 fa eb 01 c0       	push   0xc001ebfa
c00077ad:	6a 23                	push   0x23
c00077af:	53                   	push   ebx
c00077b0:	e8 1b fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077b5:	83 c4 20             	add    esp,0x20
c00077b8:	6a 00                	push   0x0
c00077ba:	68 04 ec 01 c0       	push   0xc001ec04
c00077bf:	6a 24                	push   0x24
c00077c1:	53                   	push   ebx
c00077c2:	e8 09 fe ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077c7:	6a 00                	push   0x0
c00077c9:	68 0e ec 01 c0       	push   0xc001ec0e
c00077ce:	6a 25                	push   0x25
c00077d0:	53                   	push   ebx
c00077d1:	e8 fa fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077d6:	83 c4 20             	add    esp,0x20
c00077d9:	6a 00                	push   0x0
c00077db:	68 18 ec 01 c0       	push   0xc001ec18
c00077e0:	6a 26                	push   0x26
c00077e2:	53                   	push   ebx
c00077e3:	e8 e8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077e8:	6a 00                	push   0x0
c00077ea:	68 22 ec 01 c0       	push   0xc001ec22
c00077ef:	6a 27                	push   0x27
c00077f1:	53                   	push   ebx
c00077f2:	e8 d9 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00077f7:	83 c4 20             	add    esp,0x20
c00077fa:	6a 00                	push   0x0
c00077fc:	68 2c ec 01 c0       	push   0xc001ec2c
c0007801:	6a 28                	push   0x28
c0007803:	53                   	push   ebx
c0007804:	e8 c7 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007809:	6a 00                	push   0x0
c000780b:	68 36 ec 01 c0       	push   0xc001ec36
c0007810:	6a 29                	push   0x29
c0007812:	53                   	push   ebx
c0007813:	e8 b8 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007818:	83 c4 20             	add    esp,0x20
c000781b:	6a 00                	push   0x0
c000781d:	68 40 ec 01 c0       	push   0xc001ec40
c0007822:	6a 2a                	push   0x2a
c0007824:	53                   	push   ebx
c0007825:	e8 a6 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000782a:	6a 00                	push   0x0
c000782c:	68 4a ec 01 c0       	push   0xc001ec4a
c0007831:	6a 2b                	push   0x2b
c0007833:	53                   	push   ebx
c0007834:	e8 97 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c0007839:	83 c4 20             	add    esp,0x20
c000783c:	6a 00                	push   0x0
c000783e:	68 54 ec 01 c0       	push   0xc001ec54
c0007843:	6a 2c                	push   0x2c
c0007845:	53                   	push   ebx
c0007846:	e8 85 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000784b:	6a 00                	push   0x0
c000784d:	68 5e ec 01 c0       	push   0xc001ec5e
c0007852:	6a 2d                	push   0x2d
c0007854:	53                   	push   ebx
c0007855:	e8 76 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000785a:	83 c4 20             	add    esp,0x20
c000785d:	6a 00                	push   0x0
c000785f:	68 68 ec 01 c0       	push   0xc001ec68
c0007864:	6a 2e                	push   0x2e
c0007866:	53                   	push   ebx
c0007867:	e8 64 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000786c:	6a 00                	push   0x0
c000786e:	68 72 ec 01 c0       	push   0xc001ec72
c0007873:	6a 2f                	push   0x2f
c0007875:	53                   	push   ebx
c0007876:	e8 55 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000787b:	83 c4 20             	add    esp,0x20
c000787e:	6a 00                	push   0x0
c0007880:	68 cc ed 01 c0       	push   0xc001edcc
c0007885:	6a 30                	push   0x30
c0007887:	53                   	push   ebx
c0007888:	e8 43 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000788d:	6a 00                	push   0x0
c000788f:	68 d6 ed 01 c0       	push   0xc001edd6
c0007894:	6a 31                	push   0x31
c0007896:	53                   	push   ebx
c0007897:	e8 34 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c000789c:	83 c4 20             	add    esp,0x20
c000789f:	6a 00                	push   0x0
c00078a1:	68 e0 ed 01 c0       	push   0xc001ede0
c00078a6:	6a 32                	push   0x32
c00078a8:	53                   	push   ebx
c00078a9:	e8 22 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ae:	6a 00                	push   0x0
c00078b0:	68 ea ed 01 c0       	push   0xc001edea
c00078b5:	6a 33                	push   0x33
c00078b7:	53                   	push   ebx
c00078b8:	e8 13 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078bd:	83 c4 20             	add    esp,0x20
c00078c0:	6a 00                	push   0x0
c00078c2:	68 f4 ed 01 c0       	push   0xc001edf4
c00078c7:	6a 34                	push   0x34
c00078c9:	53                   	push   ebx
c00078ca:	e8 01 fd ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078cf:	6a 00                	push   0x0
c00078d1:	68 fe ed 01 c0       	push   0xc001edfe
c00078d6:	6a 35                	push   0x35
c00078d8:	53                   	push   ebx
c00078d9:	e8 f2 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078de:	83 c4 20             	add    esp,0x20
c00078e1:	6a 00                	push   0x0
c00078e3:	68 08 ee 01 c0       	push   0xc001ee08
c00078e8:	6a 36                	push   0x36
c00078ea:	53                   	push   ebx
c00078eb:	e8 e0 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078f0:	6a 00                	push   0x0
c00078f2:	68 12 ee 01 c0       	push   0xc001ee12
c00078f7:	6a 37                	push   0x37
c00078f9:	53                   	push   ebx
c00078fa:	e8 d1 fc ff ff       	call   c00075d0 <IDT::addEntry(int, void (*)(), bool)>
c00078ff:	83 c4 1c             	add    esp,0x1c
c0007902:	6a 03                	push   0x3
c0007904:	6a 02                	push   0x2
c0007906:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c000790c:	e8 13 25 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007911:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c0007918:	89 c6                	mov    esi,eax
c000791a:	e8 97 01 00 00       	call   c0007ab6 <malloc>
c000791f:	81 c6 00 20 00 00    	add    esi,0x2000
c0007925:	89 04 24             	mov    DWORD PTR [esp],eax
c0007928:	89 c7                	mov    edi,eax
c000792a:	e8 15 16 00 00       	call   c0008f44 <TSS::TSS()>
c000792f:	83 c4 0c             	add    esp,0xc
c0007932:	68 86 eb 01 c0       	push   0xc001eb86
c0007937:	56                   	push   esi
c0007938:	57                   	push   edi
c0007939:	e8 4a 16 00 00       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c000793e:	89 c6                	mov    esi,eax
c0007940:	58                   	pop    eax
c0007941:	5a                   	pop    edx
c0007942:	6a 00                	push   0x0
c0007944:	8d 44 24 14          	lea    eax,[esp+0x14]
c0007948:	50                   	push   eax
c0007949:	e8 ce fb ff ff       	call   c000751c <IDTEntry::IDTEntry(bool)>
c000794e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007952:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0007957:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000795e:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c0007964:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007968:	80 ce 05             	or     dh,0x5
c000796b:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000796e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007972:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0007976:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0007979:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000797c:	e8 87 fc ff ff       	call   c0007608 <IDT::flush()>
c0007981:	83 c4 20             	add    esp,0x20
c0007984:	5b                   	pop    ebx
c0007985:	5e                   	pop    esi
c0007986:	5f                   	pop    edi
c0007987:	c3                   	ret    

c0007988 <sbrk>:
c0007988:	55                   	push   ebp
c0007989:	57                   	push   edi
c000798a:	56                   	push   esi
c000798b:	53                   	push   ebx
c000798c:	83 ec 1c             	sub    esp,0x1c
c000798f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007993:	85 c0                	test   eax,eax
c0007995:	74 61                	je     c00079f8 <sbrk+0x70>
c0007997:	78 66                	js     c00079ff <sbrk+0x77>
c0007999:	8b 15 94 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f94
c000799f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00079a3:	05 ff 0f 00 00       	add    eax,0xfff
c00079a8:	89 c5                	mov    ebp,eax
c00079aa:	78 6b                	js     c0007a17 <sbrk+0x8f>
c00079ac:	c1 fd 0c             	sar    ebp,0xc
c00079af:	bb 00 00 00 00       	mov    ebx,0x0
c00079b4:	8b 35 b0 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fb0
c00079ba:	8b 3d 94 2f 02 c0    	mov    edi,DWORD PTR ds:0xc0022f94
c00079c0:	e8 fa 03 00 00       	call   c0007dbf <Phys::allocatePage()>
c00079c5:	68 01 04 00 00       	push   0x401
c00079ca:	57                   	push   edi
c00079cb:	50                   	push   eax
c00079cc:	56                   	push   esi
c00079cd:	e8 4e 23 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c00079d2:	81 05 94 2f 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc0022f94,0x1000
c00079dc:	83 c3 01             	add    ebx,0x1
c00079df:	83 c4 10             	add    esp,0x10
c00079e2:	39 dd                	cmp    ebp,ebx
c00079e4:	75 ce                	jne    c00079b4 <sbrk+0x2c>
c00079e6:	0f 20 d8             	mov    eax,cr3
c00079e9:	0f 22 d8             	mov    cr3,eax
c00079ec:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00079f0:	83 c4 1c             	add    esp,0x1c
c00079f3:	5b                   	pop    ebx
c00079f4:	5e                   	pop    esi
c00079f5:	5f                   	pop    edi
c00079f6:	5d                   	pop    ebp
c00079f7:	c3                   	ret    
c00079f8:	a1 94 2f 02 c0       	mov    eax,ds:0xc0022f94
c00079fd:	eb f1                	jmp    c00079f0 <sbrk+0x68>
c00079ff:	83 ec 08             	sub    esp,0x8
c0007a02:	50                   	push   eax
c0007a03:	68 18 07 02 c0       	push   0xc0020718
c0007a08:	e8 38 2f 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007a0d:	83 c4 10             	add    esp,0x10
c0007a10:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0007a15:	eb d9                	jmp    c00079f0 <sbrk+0x68>
c0007a17:	8d a8 ff 0f 00 00    	lea    ebp,[eax+0xfff]
c0007a1d:	eb 8d                	jmp    c00079ac <sbrk+0x24>

c0007a1f <mmap>:
c0007a1f:	83 ec 18             	sub    esp,0x18
c0007a22:	68 48 07 02 c0       	push   0xc0020748
c0007a27:	e8 4d 98 00 00       	call   c0011279 <KePanic(char const*)>
c0007a2c:	b8 00 00 00 00       	mov    eax,0x0
c0007a31:	83 c4 1c             	add    esp,0x1c
c0007a34:	c3                   	ret    

c0007a35 <munmap>:
c0007a35:	83 ec 18             	sub    esp,0x18
c0007a38:	68 4d 07 02 c0       	push   0xc002074d
c0007a3d:	e8 37 98 00 00       	call   c0011279 <KePanic(char const*)>
c0007a42:	b8 00 00 00 00       	mov    eax,0x0
c0007a47:	83 c4 1c             	add    esp,0x1c
c0007a4a:	c3                   	ret    

c0007a4b <liballoc_lock()>:
c0007a4b:	fa                   	cli    
c0007a4c:	83 05 c8 96 02 c0 01 	add    DWORD PTR ds:0xc00296c8,0x1
c0007a53:	b8 00 00 00 00       	mov    eax,0x0
c0007a58:	c3                   	ret    

c0007a59 <liballoc_unlock()>:
c0007a59:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007a5e:	83 e8 01             	sub    eax,0x1
c0007a61:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007a66:	75 01                	jne    c0007a69 <liballoc_unlock()+0x10>
c0007a68:	fb                   	sti    
c0007a69:	b8 00 00 00 00       	mov    eax,0x0
c0007a6e:	c3                   	ret    

c0007a6f <liballoc_alloc(int)>:
c0007a6f:	83 ec 10             	sub    esp,0x10
c0007a72:	6a 01                	push   0x1
c0007a74:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a78:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a7e:	e8 a1 23 00 00       	call   c0009e24 <VAS::allocatePages(int, int)>
c0007a83:	83 c4 1c             	add    esp,0x1c
c0007a86:	c3                   	ret    

c0007a87 <liballoc_free(void*, int)>:
c0007a87:	83 ec 14             	sub    esp,0x14
c0007a8a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0007a8e:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0007a94:	e8 cf 1f 00 00       	call   c0009a68 <VAS::freeAllocatedPages(unsigned long)>
c0007a99:	b8 00 00 00 00       	mov    eax,0x0
c0007a9e:	83 c4 1c             	add    esp,0x1c
c0007aa1:	c3                   	ret    

c0007aa2 <realloc>:
c0007aa2:	83 ec 14             	sub    esp,0x14
c0007aa5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aa9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007aad:	e8 36 9b ff ff       	call   c00015e8 <dlrealloc>
c0007ab2:	83 c4 1c             	add    esp,0x1c
c0007ab5:	c3                   	ret    

c0007ab6 <malloc>:
c0007ab6:	83 ec 18             	sub    esp,0x18
c0007ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007abd:	e8 e9 95 ff ff       	call   c00010ab <dlmalloc>
c0007ac2:	83 c4 1c             	add    esp,0x1c
c0007ac5:	c3                   	ret    

c0007ac6 <free>:
c0007ac6:	83 ec 18             	sub    esp,0x18
c0007ac9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007acd:	e8 81 92 ff ff       	call   c0000d53 <dlfree>
c0007ad2:	83 c4 1c             	add    esp,0x1c
c0007ad5:	c3                   	ret    

c0007ad6 <rfree>:
c0007ad6:	83 ec 18             	sub    esp,0x18
c0007ad9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0007add:	e8 71 92 ff ff       	call   c0000d53 <dlfree>
c0007ae2:	83 c4 1c             	add    esp,0x1c
c0007ae5:	c3                   	ret    

c0007ae6 <calloc>:
c0007ae6:	56                   	push   esi
c0007ae7:	53                   	push   ebx
c0007ae8:	83 ec 10             	sub    esp,0x10
c0007aeb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0007aef:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c0007af4:	53                   	push   ebx
c0007af5:	e8 bc ff ff ff       	call   c0007ab6 <malloc>
c0007afa:	89 c6                	mov    esi,eax
c0007afc:	83 c4 0c             	add    esp,0xc
c0007aff:	53                   	push   ebx
c0007b00:	6a 00                	push   0x0
c0007b02:	50                   	push   eax
c0007b03:	e8 e8 89 ff ff       	call   c00004f0 <memset>
c0007b08:	89 f0                	mov    eax,esi
c0007b0a:	83 c4 14             	add    esp,0x14
c0007b0d:	5b                   	pop    ebx
c0007b0e:	5e                   	pop    esi
c0007b0f:	c3                   	ret    

c0007b10 <KeEntryPoint>:
c0007b10:	57                   	push   edi
c0007b11:	bf f9 03 00 00       	mov    edi,0x3f9
c0007b16:	56                   	push   esi
c0007b17:	89 fa                	mov    edx,edi
c0007b19:	53                   	push   ebx
c0007b1a:	31 f6                	xor    esi,esi
c0007b1c:	83 ec 2c             	sub    esp,0x2c
c0007b1f:	a1 00 05 00 00       	mov    eax,ds:0x500
c0007b24:	a3 d0 5e 02 c0       	mov    ds:0xc0025ed0,eax
c0007b29:	89 f0                	mov    eax,esi
c0007b2b:	ee                   	out    dx,al
c0007b2c:	bb fb 03 00 00       	mov    ebx,0x3fb
c0007b31:	b0 80                	mov    al,0x80
c0007b33:	89 da                	mov    edx,ebx
c0007b35:	ee                   	out    dx,al
c0007b36:	b1 03                	mov    cl,0x3
c0007b38:	ba f8 03 00 00       	mov    edx,0x3f8
c0007b3d:	88 c8                	mov    al,cl
c0007b3f:	ee                   	out    dx,al
c0007b40:	89 f0                	mov    eax,esi
c0007b42:	89 fa                	mov    edx,edi
c0007b44:	ee                   	out    dx,al
c0007b45:	88 c8                	mov    al,cl
c0007b47:	89 da                	mov    edx,ebx
c0007b49:	ee                   	out    dx,al
c0007b4a:	b0 c7                	mov    al,0xc7
c0007b4c:	ba fa 03 00 00       	mov    edx,0x3fa
c0007b51:	ee                   	out    dx,al
c0007b52:	b0 0b                	mov    al,0xb
c0007b54:	ba fc 03 00 00       	mov    edx,0x3fc
c0007b59:	ee                   	out    dx,al
c0007b5a:	68 54 07 02 c0       	push   0xc0020754
c0007b5f:	e8 e1 2d 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007b64:	e8 be 8f 00 00       	call   c0010b27 <KeDisplaySplashScreen()>
c0007b69:	a1 24 05 00 00       	mov    eax,ds:0x524
c0007b6e:	05 ff 0f 00 00       	add    eax,0xfff
c0007b73:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007b78:	89 04 24             	mov    DWORD PTR [esp],eax
c0007b7b:	e8 ad 03 00 00       	call   c0007f2d <Phys::physicalMemorySetup(unsigned int)>
c0007b80:	e8 66 1c 00 00       	call   c00097eb <Virt::virtualMemorySetup()>
c0007b85:	e8 e7 8e 00 00       	call   c0010a71 <KeInitialiseAtexit()>
c0007b8a:	58                   	pop    eax
c0007b8b:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c0007b8f:	53                   	push   ebx
c0007b90:	e8 53 1f 00 00       	call   c0009ae8 <VAS::VAS()>
c0007b95:	89 1d b0 5f 02 c0    	mov    DWORD PTR ds:0xc0025fb0,ebx
c0007b9b:	e8 2a 78 01 00       	call   c001f3ca <_init>
c0007ba0:	c7 04 24 70 01 00 00 	mov    DWORD PTR [esp],0x170
c0007ba7:	e8 0a ff ff ff       	call   c0007ab6 <malloc>
c0007bac:	89 04 24             	mov    DWORD PTR [esp],eax
c0007baf:	89 c6                	mov    esi,eax
c0007bb1:	e8 30 f2 ff ff       	call   c0006de6 <Computer::Computer()>
c0007bb6:	53                   	push   ebx
c0007bb7:	89 35 b8 5e 02 c0    	mov    DWORD PTR ds:0xc0025eb8,esi
c0007bbd:	6a 00                	push   0x0
c0007bbf:	6a 00                	push   0x0
c0007bc1:	56                   	push   esi
c0007bc2:	e8 e7 f5 ff ff       	call   c00071ae <Computer::open(int, int, void*)>
c0007bc7:	83 c4 14             	add    esp,0x14
c0007bca:	53                   	push   ebx
c0007bcb:	e8 e2 1f 00 00       	call   c0009bb2 <VAS::~VAS()>
c0007bd0:	83 c4 30             	add    esp,0x30
c0007bd3:	5b                   	pop    ebx
c0007bd4:	5e                   	pop    esi
c0007bd5:	5f                   	pop    edi
c0007bd6:	c3                   	ret    

c0007bd7 <Phys::allocateDMA(unsigned long)>:
c0007bd7:	55                   	push   ebp
c0007bd8:	31 ed                	xor    ebp,ebp
c0007bda:	57                   	push   edi
c0007bdb:	56                   	push   esi
c0007bdc:	53                   	push   ebx
c0007bdd:	31 db                	xor    ebx,ebx
c0007bdf:	83 ec 1c             	sub    esp,0x1c
c0007be2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0007be6:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0007bee:	8d b8 ff 0f 00 00    	lea    edi,[eax+0xfff]
c0007bf4:	31 c0                	xor    eax,eax
c0007bf6:	c1 ef 0c             	shr    edi,0xc
c0007bf9:	eb 1b                	jmp    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007bfb:	85 c0                	test   eax,eax
c0007bfd:	75 06                	jne    c0007c05 <Phys::allocateDMA(unsigned long)+0x2e>
c0007bff:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007c03:	89 dd                	mov    ebp,ebx
c0007c05:	8d 70 01             	lea    esi,[eax+0x1]
c0007c08:	39 f7                	cmp    edi,esi
c0007c0a:	74 37                	je     c0007c43 <Phys::allocateDMA(unsigned long)+0x6c>
c0007c0c:	89 f0                	mov    eax,esi
c0007c0e:	83 c3 01             	add    ebx,0x1
c0007c11:	83 fb 0f             	cmp    ebx,0xf
c0007c14:	7f 13                	jg     c0007c29 <Phys::allocateDMA(unsigned long)+0x52>
c0007c16:	80 bb ec 5e 02 c0 00 	cmp    BYTE PTR [ebx-0x3ffda114],0x0
c0007c1d:	74 dc                	je     c0007bfb <Phys::allocateDMA(unsigned long)+0x24>
c0007c1f:	31 c0                	xor    eax,eax
c0007c21:	83 c3 01             	add    ebx,0x1
c0007c24:	83 fb 0f             	cmp    ebx,0xf
c0007c27:	7e ed                	jle    c0007c16 <Phys::allocateDMA(unsigned long)+0x3f>
c0007c29:	83 ec 0c             	sub    esp,0xc
c0007c2c:	68 6c 07 02 c0       	push   0xc002076c
c0007c31:	e8 43 96 00 00       	call   c0011279 <KePanic(char const*)>
c0007c36:	83 c4 10             	add    esp,0x10
c0007c39:	31 c0                	xor    eax,eax
c0007c3b:	83 c4 1c             	add    esp,0x1c
c0007c3e:	5b                   	pop    ebx
c0007c3f:	5e                   	pop    esi
c0007c40:	5f                   	pop    edi
c0007c41:	5d                   	pop    ebp
c0007c42:	c3                   	ret    
c0007c43:	89 e9                	mov    ecx,ebp
c0007c45:	c1 f9 04             	sar    ecx,0x4
c0007c48:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007c4c:	8d 4c 3d 00          	lea    ecx,[ebp+edi*1+0x0]
c0007c50:	89 ca                	mov    edx,ecx
c0007c52:	83 ea 01             	sub    edx,0x1
c0007c55:	79 03                	jns    c0007c5a <Phys::allocateDMA(unsigned long)+0x83>
c0007c57:	8d 51 0e             	lea    edx,[ecx+0xe]
c0007c5a:	c1 fa 04             	sar    edx,0x4
c0007c5d:	39 54 24 0c          	cmp    DWORD PTR [esp+0xc],edx
c0007c61:	74 08                	je     c0007c6b <Phys::allocateDMA(unsigned long)+0x94>
c0007c63:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007c67:	31 c0                	xor    eax,eax
c0007c69:	eb b6                	jmp    c0007c21 <Phys::allocateDMA(unsigned long)+0x4a>
c0007c6b:	85 f6                	test   esi,esi
c0007c6d:	74 17                	je     c0007c86 <Phys::allocateDMA(unsigned long)+0xaf>
c0007c6f:	8d 95 ec 5e 02 c0    	lea    edx,[ebp-0x3ffda114]
c0007c75:	8d 84 05 ed 5e 02 c0 	lea    eax,[ebp+eax*1-0x3ffda113]
c0007c7c:	c6 02 01             	mov    BYTE PTR [edx],0x1
c0007c7f:	83 c2 01             	add    edx,0x1
c0007c82:	39 d0                	cmp    eax,edx
c0007c84:	75 f6                	jne    c0007c7c <Phys::allocateDMA(unsigned long)+0xa5>
c0007c86:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007c8b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0007c8f:	01 f8                	add    eax,edi
c0007c91:	85 d2                	test   edx,edx
c0007c93:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007c98:	74 17                	je     c0007cb1 <Phys::allocateDMA(unsigned long)+0xda>
c0007c9a:	83 ec 0c             	sub    esp,0xc
c0007c9d:	68 6c 07 02 c0       	push   0xc002076c
c0007ca2:	e8 d2 95 00 00       	call   c0011279 <KePanic(char const*)>
c0007ca7:	83 c4 10             	add    esp,0x10
c0007caa:	89 f0                	mov    eax,esi
c0007cac:	e9 5d ff ff ff       	jmp    c0007c0e <Phys::allocateDMA(unsigned long)+0x37>
c0007cb1:	c1 e5 0c             	shl    ebp,0xc
c0007cb4:	8d 85 00 00 01 c2    	lea    eax,[ebp-0x3dff0000]
c0007cba:	e9 7c ff ff ff       	jmp    c0007c3b <Phys::allocateDMA(unsigned long)+0x64>

c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>:
c0007cbf:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007cc3:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c0007cc9:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007cce:	c1 ea 0c             	shr    edx,0xc
c0007cd1:	29 d0                	sub    eax,edx
c0007cd3:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007cd8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cdc:	05 00 00 ff 3d       	add    eax,0x3dff0000
c0007ce1:	c1 e8 0c             	shr    eax,0xc
c0007ce4:	85 d2                	test   edx,edx
c0007ce6:	74 11                	je     c0007cf9 <Phys::freeDMA(unsigned long, unsigned long)+0x3a>
c0007ce8:	05 ec 5e 02 c0       	add    eax,0xc0025eec
c0007ced:	01 c2                	add    edx,eax
c0007cef:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0007cf2:	83 c0 01             	add    eax,0x1
c0007cf5:	39 d0                	cmp    eax,edx
c0007cf7:	75 f6                	jne    c0007cef <Phys::freeDMA(unsigned long, unsigned long)+0x30>
c0007cf9:	c3                   	ret    

c0007cfa <Phys::setPageState(unsigned long, bool)>:
c0007cfa:	57                   	push   edi
c0007cfb:	56                   	push   esi
c0007cfc:	8b 35 98 2f 02 c0    	mov    esi,DWORD PTR ds:0xc0022f98
c0007d02:	53                   	push   ebx
c0007d03:	bb fe ff ff ff       	mov    ebx,0xfffffffe
c0007d08:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007d0c:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0007d10:	0f b6 c0             	movzx  eax,al
c0007d13:	89 ca                	mov    edx,ecx
c0007d15:	83 e1 07             	and    ecx,0x7
c0007d18:	c1 ea 03             	shr    edx,0x3
c0007d1b:	d3 c3                	rol    ebx,cl
c0007d1d:	01 d6                	add    esi,edx
c0007d1f:	d3 e0                	shl    eax,cl
c0007d21:	0f b6 3e             	movzx  edi,BYTE PTR [esi]
c0007d24:	21 fb                	and    ebx,edi
c0007d26:	88 1e                	mov    BYTE PTR [esi],bl
c0007d28:	8b 1d 98 2f 02 c0    	mov    ebx,DWORD PTR ds:0xc0022f98
c0007d2e:	01 da                	add    edx,ebx
c0007d30:	8a 0a                	mov    cl,BYTE PTR [edx]
c0007d32:	09 c8                	or     eax,ecx
c0007d34:	88 02                	mov    BYTE PTR [edx],al
c0007d36:	5b                   	pop    ebx
c0007d37:	5e                   	pop    esi
c0007d38:	5f                   	pop    edi
c0007d39:	c3                   	ret    

c0007d3a <Phys::getPageState(unsigned long)>:
c0007d3a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0007d3e:	8b 15 98 2f 02 c0    	mov    edx,DWORD PTR ds:0xc0022f98
c0007d44:	89 c8                	mov    eax,ecx
c0007d46:	83 e1 07             	and    ecx,0x7
c0007d49:	c1 e8 03             	shr    eax,0x3
c0007d4c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c0007d50:	d3 f8                	sar    eax,cl
c0007d52:	83 e0 01             	and    eax,0x1
c0007d55:	c3                   	ret    

c0007d56 <Phys::freePage(unsigned long)>:
c0007d56:	53                   	push   ebx
c0007d57:	83 ec 08             	sub    esp,0x8
c0007d5a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007d5e:	8d 90 00 00 ff ff    	lea    edx,[eax-0x10000]
c0007d64:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0007d6a:	76 41                	jbe    c0007dad <Phys::freePage(unsigned long)+0x57>
c0007d6c:	c1 e8 0c             	shr    eax,0xc
c0007d6f:	50                   	push   eax
c0007d70:	89 c3                	mov    ebx,eax
c0007d72:	e8 c3 ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007d77:	5a                   	pop    edx
c0007d78:	84 c0                	test   al,al
c0007d7a:	74 20                	je     c0007d9c <Phys::freePage(unsigned long)+0x46>
c0007d7c:	83 ec 08             	sub    esp,0x8
c0007d7f:	a1 e4 5e 02 c0       	mov    eax,ds:0xc0025ee4
c0007d84:	6a 00                	push   0x0
c0007d86:	83 e8 01             	sub    eax,0x1
c0007d89:	53                   	push   ebx
c0007d8a:	a3 e4 5e 02 c0       	mov    ds:0xc0025ee4,eax
c0007d8f:	e8 66 ff ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007d94:	83 c4 10             	add    esp,0x10
c0007d97:	83 c4 08             	add    esp,0x8
c0007d9a:	5b                   	pop    ebx
c0007d9b:	c3                   	ret    
c0007d9c:	c7 44 24 10 11 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc0020811
c0007da4:	83 c4 08             	add    esp,0x8
c0007da7:	5b                   	pop    ebx
c0007da8:	e9 cc 94 00 00       	jmp    c0011279 <KePanic(char const*)>
c0007dad:	68 00 10 00 00       	push   0x1000
c0007db2:	50                   	push   eax
c0007db3:	e8 07 ff ff ff       	call   c0007cbf <Phys::freeDMA(unsigned long, unsigned long)>
c0007db8:	59                   	pop    ecx
c0007db9:	5b                   	pop    ebx
c0007dba:	83 c4 08             	add    esp,0x8
c0007dbd:	5b                   	pop    ebx
c0007dbe:	c3                   	ret    

c0007dbf <Phys::allocatePage()>:
c0007dbf:	56                   	push   esi
c0007dc0:	53                   	push   ebx
c0007dc1:	83 ec 14             	sub    esp,0x14
c0007dc4:	8b 35 d8 5e 02 c0    	mov    esi,DWORD PTR ds:0xc0025ed8
c0007dca:	89 f3                	mov    ebx,esi
c0007dcc:	eb 0a                	jmp    c0007dd8 <Phys::allocatePage()+0x19>
c0007dce:	89 1d d8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ed8,ebx
c0007dd4:	39 de                	cmp    esi,ebx
c0007dd6:	74 26                	je     c0007dfe <Phys::allocatePage()+0x3f>
c0007dd8:	53                   	push   ebx
c0007dd9:	e8 5c ff ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007dde:	5a                   	pop    edx
c0007ddf:	84 c0                	test   al,al
c0007de1:	74 67                	je     c0007e4a <Phys::allocatePage()+0x8b>
c0007de3:	83 c3 01             	add    ebx,0x1
c0007de6:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007dec:	75 e0                	jne    c0007dce <Phys::allocatePage()+0xf>
c0007dee:	31 db                	xor    ebx,ebx
c0007df0:	c7 05 d8 5e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025ed8,0x0
c0007dfa:	39 de                	cmp    esi,ebx
c0007dfc:	75 da                	jne    c0007dd8 <Phys::allocatePage()+0x19>
c0007dfe:	83 ec 0c             	sub    esp,0xc
c0007e01:	a0 fc 5e 02 c0       	mov    al,ds:0xc0025efc
c0007e06:	83 f0 01             	xor    eax,0x1
c0007e09:	a2 fc 5e 02 c0       	mov    ds:0xc0025efc,al
c0007e0e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0007e13:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0007e16:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0007e1c:	50                   	push   eax
c0007e1d:	e8 a8 27 00 00       	call   c000a5ca <VAS::scanForEviction()>
c0007e22:	83 c4 10             	add    esp,0x10
c0007e25:	85 c0                	test   eax,eax
c0007e27:	75 48                	jne    c0007e71 <Phys::allocatePage()+0xb2>
c0007e29:	83 ec 0c             	sub    esp,0xc
c0007e2c:	68 94 07 02 c0       	push   0xc0020794
c0007e31:	e8 43 94 00 00       	call   c0011279 <KePanic(char const*)>
c0007e36:	83 c4 10             	add    esp,0x10
c0007e39:	8b 1d d8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025ed8
c0007e3f:	53                   	push   ebx
c0007e40:	e8 f5 fe ff ff       	call   c0007d3a <Phys::getPageState(unsigned long)>
c0007e45:	5a                   	pop    edx
c0007e46:	84 c0                	test   al,al
c0007e48:	75 99                	jne    c0007de3 <Phys::allocatePage()+0x24>
c0007e4a:	6a 01                	push   0x1
c0007e4c:	53                   	push   ebx
c0007e4d:	e8 a8 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e52:	8b 15 e4 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee4
c0007e58:	a1 d8 5e 02 c0       	mov    eax,ds:0xc0025ed8
c0007e5d:	83 c2 01             	add    edx,0x1
c0007e60:	59                   	pop    ecx
c0007e61:	89 15 e4 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee4,edx
c0007e67:	c1 e0 0c             	shl    eax,0xc
c0007e6a:	5b                   	pop    ebx
c0007e6b:	83 c4 14             	add    esp,0x14
c0007e6e:	5b                   	pop    ebx
c0007e6f:	5e                   	pop    esi
c0007e70:	c3                   	ret    
c0007e71:	83 ec 08             	sub    esp,0x8
c0007e74:	89 c2                	mov    edx,eax
c0007e76:	6a 01                	push   0x1
c0007e78:	c1 ea 0c             	shr    edx,0xc
c0007e7b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007e7f:	52                   	push   edx
c0007e80:	e8 75 fe ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007e85:	83 c4 10             	add    esp,0x10
c0007e88:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007e8c:	eb dd                	jmp    c0007e6b <Phys::allocatePage()+0xac>

c0007e8e <Phys::allocateContiguousPages(int)>:
c0007e8e:	57                   	push   edi
c0007e8f:	56                   	push   esi
c0007e90:	53                   	push   ebx
c0007e91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007e95:	fa                   	cli    
c0007e96:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007e9b:	31 db                	xor    ebx,ebx
c0007e9d:	83 c0 01             	add    eax,0x1
c0007ea0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ea5:	85 db                	test   ebx,ebx
c0007ea7:	75 11                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ea9:	e8 11 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007eae:	83 fe 01             	cmp    esi,0x1
c0007eb1:	89 c7                	mov    edi,eax
c0007eb3:	74 21                	je     c0007ed6 <Phys::allocateContiguousPages(int)+0x48>
c0007eb5:	bb 01 00 00 00       	mov    ebx,0x1
c0007eba:	e8 00 ff ff ff       	call   c0007dbf <Phys::allocatePage()>
c0007ebf:	89 da                	mov    edx,ebx
c0007ec1:	c1 e2 0c             	shl    edx,0xc
c0007ec4:	01 fa                	add    edx,edi
c0007ec6:	39 c2                	cmp    edx,eax
c0007ec8:	74 22                	je     c0007eec <Phys::allocateContiguousPages(int)+0x5e>
c0007eca:	bb 01 00 00 00       	mov    ebx,0x1
c0007ecf:	89 c7                	mov    edi,eax
c0007ed1:	83 fe 01             	cmp    esi,0x1
c0007ed4:	75 e4                	jne    c0007eba <Phys::allocateContiguousPages(int)+0x2c>
c0007ed6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0007edb:	83 e8 01             	sub    eax,0x1
c0007ede:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0007ee3:	75 01                	jne    c0007ee6 <Phys::allocateContiguousPages(int)+0x58>
c0007ee5:	fb                   	sti    
c0007ee6:	89 f8                	mov    eax,edi
c0007ee8:	5b                   	pop    ebx
c0007ee9:	5e                   	pop    esi
c0007eea:	5f                   	pop    edi
c0007eeb:	c3                   	ret    
c0007eec:	83 c3 01             	add    ebx,0x1
c0007eef:	39 f3                	cmp    ebx,esi
c0007ef1:	75 b2                	jne    c0007ea5 <Phys::allocateContiguousPages(int)+0x17>
c0007ef3:	eb e1                	jmp    c0007ed6 <Phys::allocateContiguousPages(int)+0x48>

c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0007ef5:	56                   	push   esi
c0007ef6:	53                   	push   ebx
c0007ef7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0007efb:	39 1d dc 5e 02 c0    	cmp    DWORD PTR ds:0xc0025edc,ebx
c0007f01:	73 06                	jae    c0007f09 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0007f03:	89 1d dc 5e 02 c0    	mov    DWORD PTR ds:0xc0025edc,ebx
c0007f09:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0007f0d:	c1 eb 0c             	shr    ebx,0xc
c0007f10:	c1 e8 0c             	shr    eax,0xc
c0007f13:	39 d8                	cmp    eax,ebx
c0007f15:	73 13                	jae    c0007f2a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0007f17:	6a 00                	push   0x0
c0007f19:	8d 70 01             	lea    esi,[eax+0x1]
c0007f1c:	50                   	push   eax
c0007f1d:	e8 d8 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f22:	5a                   	pop    edx
c0007f23:	89 f0                	mov    eax,esi
c0007f25:	59                   	pop    ecx
c0007f26:	39 f3                	cmp    ebx,esi
c0007f28:	75 ed                	jne    c0007f17 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c0007f2a:	5b                   	pop    ebx
c0007f2b:	5e                   	pop    esi
c0007f2c:	c3                   	ret    

c0007f2d <Phys::physicalMemorySetup(unsigned int)>:
c0007f2d:	55                   	push   ebp
c0007f2e:	57                   	push   edi
c0007f2f:	56                   	push   esi
c0007f30:	53                   	push   ebx
c0007f31:	83 ec 40             	sub    esp,0x40
c0007f34:	6a 10                	push   0x10
c0007f36:	6a 00                	push   0x0
c0007f38:	68 ec 5e 02 c0       	push   0xc0025eec
c0007f3d:	e8 ae 85 ff ff       	call   c00004f0 <memset>
c0007f42:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0007f46:	25 00 f0 ff ff       	and    eax,0xfffff000
c0007f4b:	05 00 10 00 00       	add    eax,0x1000
c0007f50:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0007f54:	5b                   	pop    ebx
c0007f55:	31 db                	xor    ebx,ebx
c0007f57:	5e                   	pop    esi
c0007f58:	50                   	push   eax
c0007f59:	68 27 08 02 c0       	push   0xc0020827
c0007f5e:	e8 e2 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0007f63:	83 c4 10             	add    esp,0x10
c0007f66:	83 ec 08             	sub    esp,0x8
c0007f69:	6a 01                	push   0x1
c0007f6b:	53                   	push   ebx
c0007f6c:	83 c3 01             	add    ebx,0x1
c0007f6f:	e8 86 fd ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0007f74:	83 c4 10             	add    esp,0x10
c0007f77:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c0007f7d:	75 e7                	jne    c0007f66 <Phys::physicalMemorySetup(unsigned int)+0x39>
c0007f7f:	0f b6 05 14 05 00 c2 	movzx  eax,BYTE PTR ds:0xc2000514
c0007f86:	0f b6 15 13 05 00 c2 	movzx  edx,BYTE PTR ds:0xc2000513
c0007f8d:	c1 e0 08             	shl    eax,0x8
c0007f90:	09 c2                	or     edx,eax
c0007f92:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0007f96:	0f 84 98 01 00 00    	je     c0008134 <Phys::physicalMemorySetup(unsigned int)+0x207>
c0007f9c:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0007fa0:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0007fa8:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c0007fad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007fb1:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007fb9:	eb 1c                	jmp    c0007fd7 <Phys::physicalMemorySetup(unsigned int)+0xaa>
c0007fbb:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0007fbf:	83 c3 18             	add    ebx,0x18
c0007fc2:	83 c6 01             	add    esi,0x1
c0007fc5:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0007fc9:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0007fcd:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0007fd1:	0f 84 6d 01 00 00    	je     c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0007fd7:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0007fda:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0007fdd:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0007fe0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007fe4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0007fe8:	8b 33                	mov    esi,DWORD PTR [ebx]
c0007fea:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c0007fed:	01 f0                	add    eax,esi
c0007fef:	55                   	push   ebp
c0007ff0:	11 fa                	adc    edx,edi
c0007ff2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0007ff6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0007ffa:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0007ffe:	51                   	push   ecx
c0007fff:	56                   	push   esi
c0008000:	68 c4 07 02 c0       	push   0xc00207c4
c0008005:	e8 3b 29 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000800a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000800e:	83 c4 10             	add    esp,0x10
c0008011:	09 f8                	or     eax,edi
c0008013:	0f 85 2b 01 00 00    	jne    c0008144 <Phys::physicalMemorySetup(unsigned int)+0x217>
c0008019:	83 fd 01             	cmp    ebp,0x1
c000801c:	75 9d                	jne    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c000801e:	ba 00 00 08 00       	mov    edx,0x80000
c0008023:	89 c1                	mov    ecx,eax
c0008025:	39 f2                	cmp    edx,esi
c0008027:	19 f9                	sbb    ecx,edi
c0008029:	0f 82 ab 00 00 00    	jb     c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000802f:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0008033:	89 c1                	mov    ecx,eax
c0008035:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0008039:	0f 83 9b 00 00 00    	jae    c00080da <Phys::physicalMemorySetup(unsigned int)+0x1ad>
c000803f:	ba 00 00 0a 00       	mov    edx,0xa0000
c0008044:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008048:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000804c:	39 fa                	cmp    edx,edi
c000804e:	19 e8                	sbb    eax,ebp
c0008050:	0f 82 b0 01 00 00    	jb     c0008206 <Phys::physicalMemorySetup(unsigned int)+0x2d9>
c0008056:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000805a:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c000805e:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c0008064:	ba ff 1f 00 00       	mov    edx,0x1fff
c0008069:	83 d5 ff             	adc    ebp,0xffffffff
c000806c:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c0008070:	31 c0                	xor    eax,eax
c0008072:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c0008076:	39 fa                	cmp    edx,edi
c0008078:	89 c1                	mov    ecx,eax
c000807a:	19 e9                	sbb    ecx,ebp
c000807c:	0f 83 39 ff ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008082:	be 00 00 08 00       	mov    esi,0x80000
c0008087:	83 ec 04             	sub    esp,0x4
c000808a:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000808e:	57                   	push   edi
c000808f:	56                   	push   esi
c0008090:	68 e8 07 02 c0       	push   0xc00207e8
c0008095:	e8 ab 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000809a:	5d                   	pop    ebp
c000809b:	58                   	pop    eax
c000809c:	57                   	push   edi
c000809d:	56                   	push   esi
c000809e:	e8 52 fe ff ff       	call   c0007ef5 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00080a3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00080a7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00080ab:	83 c4 0c             	add    esp,0xc
c00080ae:	0f ac d0 0c          	shrd   eax,edx,0xc
c00080b2:	8b 15 e8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025ee8
c00080b8:	01 d0                	add    eax,edx
c00080ba:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00080c1:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00080c6:	52                   	push   edx
c00080c7:	50                   	push   eax
c00080c8:	68 4d 08 02 c0       	push   0xc002084d
c00080cd:	e8 73 28 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00080d2:	83 c4 10             	add    esp,0x10
c00080d5:	e9 e1 fe ff ff       	jmp    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080da:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c00080de:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00080e2:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00080e6:	39 ea                	cmp    edx,ebp
c00080e8:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c00080ec:	0f 82 c9 fe ff ff    	jb     c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c00080f2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00080f7:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00080fb:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c00080ff:	0f 83 b6 fe ff ff    	jae    c0007fbb <Phys::physicalMemorySetup(unsigned int)+0x8e>
c0008105:	39 ee                	cmp    esi,ebp
c0008107:	89 f8                	mov    eax,edi
c0008109:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c000810d:	0f 83 74 ff ff ff    	jae    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008113:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008117:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000811b:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000811f:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008123:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0008127:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000812b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000812f:	e9 53 ff ff ff       	jmp    c0008087 <Phys::physicalMemorySetup(unsigned int)+0x15a>
c0008134:	83 ec 0c             	sub    esp,0xc
c0008137:	68 3f 08 02 c0       	push   0xc002083f
c000813c:	e8 38 91 00 00       	call   c0011279 <KePanic(char const*)>
c0008141:	83 c4 10             	add    esp,0x10
c0008144:	83 ec 08             	sub    esp,0x8
c0008147:	bb 60 00 00 00       	mov    ebx,0x60
c000814c:	6a 00                	push   0x0
c000814e:	6a 06                	push   0x6
c0008150:	e8 a5 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008155:	58                   	pop    eax
c0008156:	5a                   	pop    edx
c0008157:	6a 00                	push   0x0
c0008159:	6a 07                	push   0x7
c000815b:	e8 9a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008160:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c0008166:	83 c4 10             	add    esp,0x10
c0008169:	83 c1 02             	add    ecx,0x2
c000816c:	89 0d e8 5e 02 c0    	mov    DWORD PTR ds:0xc0025ee8,ecx
c0008172:	83 ec 08             	sub    esp,0x8
c0008175:	6a 00                	push   0x0
c0008177:	53                   	push   ebx
c0008178:	83 c3 01             	add    ebx,0x1
c000817b:	e8 7a fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c0008180:	83 c4 10             	add    esp,0x10
c0008183:	81 fb 80 00 00 00    	cmp    ebx,0x80
c0008189:	75 e7                	jne    c0008172 <Phys::physicalMemorySetup(unsigned int)+0x245>
c000818b:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c0008190:	bb 40 01 00 00       	mov    ebx,0x140
c0008195:	83 c0 20             	add    eax,0x20
c0008198:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c000819d:	eb 26                	jmp    c00081c5 <Phys::physicalMemorySetup(unsigned int)+0x298>
c000819f:	83 ec 08             	sub    esp,0x8
c00081a2:	6a 00                	push   0x0
c00081a4:	53                   	push   ebx
c00081a5:	83 c3 01             	add    ebx,0x1
c00081a8:	e8 4d fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081ad:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081b2:	83 c4 10             	add    esp,0x10
c00081b5:	83 c0 01             	add    eax,0x1
c00081b8:	81 fb c0 01 00 00    	cmp    ebx,0x1c0
c00081be:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081c3:	74 07                	je     c00081cc <Phys::physicalMemorySetup(unsigned int)+0x29f>
c00081c5:	3d ff 03 00 00       	cmp    eax,0x3ff
c00081ca:	7e d3                	jle    c000819f <Phys::physicalMemorySetup(unsigned int)+0x272>
c00081cc:	bb d0 01 00 00       	mov    ebx,0x1d0
c00081d1:	3d ff 07 00 00       	cmp    eax,0x7ff
c00081d6:	7f 26                	jg     c00081fe <Phys::physicalMemorySetup(unsigned int)+0x2d1>
c00081d8:	83 ec 08             	sub    esp,0x8
c00081db:	6a 00                	push   0x0
c00081dd:	53                   	push   ebx
c00081de:	83 c3 01             	add    ebx,0x1
c00081e1:	e8 14 fb ff ff       	call   c0007cfa <Phys::setPageState(unsigned long, bool)>
c00081e6:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c00081eb:	83 c4 10             	add    esp,0x10
c00081ee:	83 c0 01             	add    eax,0x1
c00081f1:	81 fb e0 01 00 00    	cmp    ebx,0x1e0
c00081f7:	a3 e8 5e 02 c0       	mov    ds:0xc0025ee8,eax
c00081fc:	75 d3                	jne    c00081d1 <Phys::physicalMemorySetup(unsigned int)+0x2a4>
c00081fe:	83 c4 3c             	add    esp,0x3c
c0008201:	5b                   	pop    ebx
c0008202:	5e                   	pop    esi
c0008203:	5f                   	pop    edi
c0008204:	5d                   	pop    ebp
c0008205:	c3                   	ret    
c0008206:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c000820e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0008216:	e9 3b fe ff ff       	jmp    c0008056 <Phys::physicalMemorySetup(unsigned int)+0x129>
c000821b:	90                   	nop

c000821c <Pipe::isAtty()>:
c000821c:	31 c0                	xor    eax,eax
c000821e:	c3                   	ret    
c000821f:	90                   	nop

c0008220 <Pipe::~Pipe()>:
c0008220:	83 ec 0c             	sub    esp,0xc
c0008223:	ba ac 08 02 c0       	mov    edx,0xc00208ac
c0008228:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000822c:	89 10                	mov    DWORD PTR [eax],edx
c000822e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008232:	83 ec 0c             	sub    esp,0xc
c0008235:	50                   	push   eax
c0008236:	e8 69 11 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c000823b:	83 c4 10             	add    esp,0x10
c000823e:	90                   	nop
c000823f:	83 c4 0c             	add    esp,0xc
c0008242:	c3                   	ret    
c0008243:	90                   	nop

c0008244 <Pipe::~Pipe()>:
c0008244:	83 ec 0c             	sub    esp,0xc
c0008247:	83 ec 0c             	sub    esp,0xc
c000824a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000824e:	e8 cd ff ff ff       	call   c0008220 <Pipe::~Pipe()>
c0008253:	83 c4 10             	add    esp,0x10
c0008256:	83 ec 08             	sub    esp,0x8
c0008259:	6a 20                	push   0x20
c000825b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000825f:	e8 b4 25 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0008264:	83 c4 10             	add    esp,0x10
c0008267:	83 c4 0c             	add    esp,0xc
c000826a:	c3                   	ret    
c000826b:	90                   	nop

c000826c <Pipe::write(unsigned long long, void*, int*)>:
c000826c:	55                   	push   ebp
c000826d:	57                   	push   edi
c000826e:	56                   	push   esi
c000826f:	53                   	push   ebx
c0008270:	83 ec 1c             	sub    esp,0x1c
c0008273:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008277:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000827b:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c000827e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0008282:	89 04 24             	mov    DWORD PTR [esp],eax
c0008285:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008289:	89 d8                	mov    eax,ebx
c000828b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c000828e:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0008292:	89 d6                	mov    esi,edx
c0008294:	89 d7                	mov    edi,edx
c0008296:	c1 ff 1f             	sar    edi,0x1f
c0008299:	03 34 24             	add    esi,DWORD PTR [esp]
c000829c:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c00082a0:	c1 f8 1f             	sar    eax,0x1f
c00082a3:	39 f3                	cmp    ebx,esi
c00082a5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00082a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00082ad:	19 f8                	sbb    eax,edi
c00082af:	b8 01 00 00 00       	mov    eax,0x1
c00082b4:	72 6e                	jb     c0008324 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c00082b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00082b9:	01 d0                	add    eax,edx
c00082bb:	99                   	cdq    
c00082bc:	f7 fb                	idiv   ebx
c00082be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00082c2:	29 d3                	sub    ebx,edx
c00082c4:	89 d7                	mov    edi,edx
c00082c6:	89 de                	mov    esi,ebx
c00082c8:	8b 14 24             	mov    edx,DWORD PTR [esp]
c00082cb:	c1 fb 1f             	sar    ebx,0x1f
c00082ce:	39 f2                	cmp    edx,esi
c00082d0:	19 d8                	sbb    eax,ebx
c00082d2:	b8 00 00 00 00       	mov    eax,0x0
c00082d7:	72 04                	jb     c00082dd <Pipe::write(unsigned long long, void*, int*)+0x71>
c00082d9:	89 d0                	mov    eax,edx
c00082db:	29 f0                	sub    eax,esi
c00082dd:	89 d3                	mov    ebx,edx
c00082df:	29 c3                	sub    ebx,eax
c00082e1:	74 0b                	je     c00082ee <Pipe::write(unsigned long long, void*, int*)+0x82>
c00082e3:	03 7d 0c             	add    edi,DWORD PTR [ebp+0xc]
c00082e6:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c00082ea:	89 d9                	mov    ecx,ebx
c00082ec:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ee:	85 c0                	test   eax,eax
c00082f0:	74 0d                	je     c00082ff <Pipe::write(unsigned long long, void*, int*)+0x93>
c00082f2:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c00082f6:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00082f9:	89 de                	mov    esi,ebx
c00082fb:	89 c1                	mov    ecx,eax
c00082fd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00082ff:	01 55 14             	add    DWORD PTR [ebp+0x14],edx
c0008302:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008307:	75 10                	jne    c0008319 <Pipe::write(unsigned long long, void*, int*)+0xad>
c0008309:	83 ec 0c             	sub    esp,0xc
c000830c:	68 69 08 02 c0       	push   0xc0020869
c0008311:	e8 63 8f 00 00       	call   c0011279 <KePanic(char const*)>
c0008316:	83 c4 10             	add    esp,0x10
c0008319:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000831d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0008320:	89 08                	mov    DWORD PTR [eax],ecx
c0008322:	31 c0                	xor    eax,eax
c0008324:	83 c4 1c             	add    esp,0x1c
c0008327:	5b                   	pop    ebx
c0008328:	5e                   	pop    esi
c0008329:	5f                   	pop    edi
c000832a:	5d                   	pop    ebp
c000832b:	c3                   	ret    

c000832c <Pipe::read(unsigned long long, void*, int*)>:
c000832c:	55                   	push   ebp
c000832d:	57                   	push   edi
c000832e:	56                   	push   esi
c000832f:	53                   	push   ebx
c0008330:	83 ec 1c             	sub    esp,0x1c
c0008333:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0008337:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000833b:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000833f:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0008342:	89 c8                	mov    eax,ecx
c0008344:	99                   	cdq    
c0008345:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c0008349:	74 24                	je     c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c000834b:	39 f9                	cmp    ecx,edi
c000834d:	89 d1                	mov    ecx,edx
c000834f:	19 f1                	sbb    ecx,esi
c0008351:	73 1c                	jae    c000836f <Pipe::read(unsigned long long, void*, int*)+0x43>
c0008353:	fa                   	cli    
c0008354:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000835a:	e8 d9 d7 00 00       	call   c0015b38 <schedule()>
c000835f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0008364:	48                   	dec    eax
c0008365:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000836a:	75 d3                	jne    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836c:	fb                   	sti    
c000836d:	eb d0                	jmp    c000833f <Pipe::read(unsigned long long, void*, int*)+0x13>
c000836f:	39 f8                	cmp    eax,edi
c0008371:	89 d1                	mov    ecx,edx
c0008373:	89 3c 24             	mov    DWORD PTR [esp],edi
c0008376:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c000837a:	19 f1                	sbb    ecx,esi
c000837c:	73 07                	jae    c0008385 <Pipe::read(unsigned long long, void*, int*)+0x59>
c000837e:	89 04 24             	mov    DWORD PTR [esp],eax
c0008381:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008385:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0008388:	8b 7b 18             	mov    edi,DWORD PTR [ebx+0x18]
c000838b:	29 f7                	sub    edi,esi
c000838d:	89 f8                	mov    eax,edi
c000838f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0008393:	99                   	cdq    
c0008394:	39 3c 24             	cmp    DWORD PTR [esp],edi
c0008397:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000839b:	19 d0                	sbb    eax,edx
c000839d:	73 07                	jae    c00083a6 <Pipe::read(unsigned long long, void*, int*)+0x7a>
c000839f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00083a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00083a6:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c00083a9:	89 ea                	mov    edx,ebp
c00083ab:	2b 54 24 0c          	sub    edx,DWORD PTR [esp+0xc]
c00083af:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00083b4:	74 0d                	je     c00083c3 <Pipe::read(unsigned long long, void*, int*)+0x97>
c00083b6:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c00083b9:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c00083bd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00083c1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083c3:	85 d2                	test   edx,edx
c00083c5:	74 11                	je     c00083d8 <Pipe::read(unsigned long long, void*, int*)+0xac>
c00083c7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00083cb:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00083ce:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c00083d2:	89 d1                	mov    ecx,edx
c00083d4:	89 c7                	mov    edi,eax
c00083d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00083d8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00083db:	29 6b 14             	sub    DWORD PTR [ebx+0x14],ebp
c00083de:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00083e1:	99                   	cdq    
c00083e2:	89 f7                	mov    edi,esi
c00083e4:	03 04 24             	add    eax,DWORD PTR [esp]
c00083e7:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c00083eb:	c1 ff 1f             	sar    edi,0x1f
c00083ee:	57                   	push   edi
c00083ef:	56                   	push   esi
c00083f0:	52                   	push   edx
c00083f1:	50                   	push   eax
c00083f2:	e8 b9 6e 01 00       	call   c001f2b0 <__umoddi3>
c00083f7:	83 c4 10             	add    esp,0x10
c00083fa:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00083fd:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0008402:	75 10                	jne    c0008414 <Pipe::read(unsigned long long, void*, int*)+0xe8>
c0008404:	83 ec 0c             	sub    esp,0xc
c0008407:	68 86 08 02 c0       	push   0xc0020886
c000840c:	e8 68 8e 00 00       	call   c0011279 <KePanic(char const*)>
c0008411:	83 c4 10             	add    esp,0x10
c0008414:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0008418:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000841b:	89 10                	mov    DWORD PTR [eax],edx
c000841d:	83 c4 1c             	add    esp,0x1c
c0008420:	31 c0                	xor    eax,eax
c0008422:	5b                   	pop    ebx
c0008423:	5e                   	pop    esi
c0008424:	5f                   	pop    edi
c0008425:	5d                   	pop    ebp
c0008426:	c3                   	ret    
c0008427:	90                   	nop

c0008428 <Pipe::Pipe(int)>:
c0008428:	83 ec 0c             	sub    esp,0xc
c000842b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000842f:	83 ec 08             	sub    esp,0x8
c0008432:	6a 00                	push   0x0
c0008434:	50                   	push   eax
c0008435:	e8 84 0d 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c000843a:	83 c4 10             	add    esp,0x10
c000843d:	ba ac 08 02 c0       	mov    edx,0xc00208ac
c0008442:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008446:	89 10                	mov    DWORD PTR [eax],edx
c0008448:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000844c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0008450:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008453:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008457:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c000845e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008462:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c0008469:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000846d:	83 ec 0c             	sub    esp,0xc
c0008470:	50                   	push   eax
c0008471:	e8 40 f6 ff ff       	call   c0007ab6 <malloc>
c0008476:	83 c4 10             	add    esp,0x10
c0008479:	89 c2                	mov    edx,eax
c000847b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000847f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008482:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008486:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c000848a:	90                   	nop
c000848b:	83 c4 0c             	add    esp,0xc
c000848e:	c3                   	ret    
c000848f:	90                   	nop

c0008490 <VgaText::isAtty()>:
c0008490:	b0 01                	mov    al,0x1
c0008492:	c3                   	ret    
c0008493:	90                   	nop

c0008494 <VgaText::~VgaText()>:
c0008494:	83 ec 0c             	sub    esp,0xc
c0008497:	ba f4 08 02 c0       	mov    edx,0xc00208f4
c000849c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a0:	89 10                	mov    DWORD PTR [eax],edx
c00084a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00084a6:	83 ec 0c             	sub    esp,0xc
c00084a9:	50                   	push   eax
c00084aa:	e8 f5 0e 00 00       	call   c00093a4 <UnixFile::~UnixFile()>
c00084af:	83 c4 10             	add    esp,0x10
c00084b2:	90                   	nop
c00084b3:	83 c4 0c             	add    esp,0xc
c00084b6:	c3                   	ret    
c00084b7:	90                   	nop

c00084b8 <VgaText::~VgaText()>:
c00084b8:	83 ec 0c             	sub    esp,0xc
c00084bb:	83 ec 0c             	sub    esp,0xc
c00084be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084c2:	e8 cd ff ff ff       	call   c0008494 <VgaText::~VgaText()>
c00084c7:	83 c4 10             	add    esp,0x10
c00084ca:	83 ec 08             	sub    esp,0x8
c00084cd:	68 84 01 00 00       	push   0x184
c00084d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084d6:	e8 3d 23 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00084db:	83 c4 10             	add    esp,0x10
c00084de:	83 c4 0c             	add    esp,0xc
c00084e1:	c3                   	ret    

c00084e2 <VgaText::read(unsigned long long, void*, int*)>:
c00084e2:	83 ec 10             	sub    esp,0x10
c00084e5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00084e9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00084ed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00084f1:	e8 2e 50 00 00       	call   c000d524 <readKeyboard(VgaText*, char*, unsigned long)>
c00084f6:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00084fa:	89 02                	mov    DWORD PTR [edx],eax
c00084fc:	31 c0                	xor    eax,eax
c00084fe:	83 c4 1c             	add    esp,0x1c
c0008501:	c3                   	ret    

c0008502 <setTerminalScrollLock(bool)>:
c0008502:	c3                   	ret    

c0008503 <doTerminalCycle()>:
c0008503:	c3                   	ret    

c0008504 <addToTerminalCycle(VgaText*)>:
c0008504:	c3                   	ret    

c0008505 <scrollTerminalScrollLock(int)>:
c0008505:	c3                   	ret    

c0008506 <VgaText::updateTitle()>:
c0008506:	c3                   	ret    
c0008507:	90                   	nop

c0008508 <VgaText::load()>:
c0008508:	c3                   	ret    
c0008509:	90                   	nop

c000850a <VgaText::updateCursor()>:
c000850a:	83 ec 14             	sub    esp,0x14
c000850d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0008511:	ff 70 18             	push   DWORD PTR [eax+0x18]
c0008514:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008517:	e8 d4 03 01 00       	call   c00188f0 <HalConsoleCursorUpdate(int, int)>
c000851c:	83 c4 1c             	add    esp,0x1c
c000851f:	c3                   	ret    

c0008520 <VgaText::doANSI_SGR(int)>:
c0008520:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0008524:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008528:	85 d2                	test   edx,edx
c000852a:	75 0b                	jne    c0008537 <VgaText::doANSI_SGR(int)+0x17>
c000852c:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c000852f:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008532:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0008535:	eb 59                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008537:	83 fa 07             	cmp    edx,0x7
c000853a:	75 0b                	jne    c0008547 <VgaText::doANSI_SGR(int)+0x27>
c000853c:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c000853f:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0008542:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0008545:	eb 49                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c0008547:	83 fa 1b             	cmp    edx,0x1b
c000854a:	74 e0                	je     c000852c <VgaText::doANSI_SGR(int)+0xc>
c000854c:	8d 4a e2             	lea    ecx,[edx-0x1e]
c000854f:	83 f9 07             	cmp    ecx,0x7
c0008552:	77 09                	ja     c000855d <VgaText::doANSI_SGR(int)+0x3d>
c0008554:	8b 14 8d c0 2f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd040]
c000855b:	eb 20                	jmp    c000857d <VgaText::doANSI_SGR(int)+0x5d>
c000855d:	8d 4a d8             	lea    ecx,[edx-0x28]
c0008560:	83 f9 07             	cmp    ecx,0x7
c0008563:	77 09                	ja     c000856e <VgaText::doANSI_SGR(int)+0x4e>
c0008565:	8b 14 8d c0 2f 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffdd040]
c000856c:	eb 22                	jmp    c0008590 <VgaText::doANSI_SGR(int)+0x70>
c000856e:	8d 4a a6             	lea    ecx,[edx-0x5a]
c0008571:	83 f9 07             	cmp    ecx,0x7
c0008574:	77 0b                	ja     c0008581 <VgaText::doANSI_SGR(int)+0x61>
c0008576:	8b 14 95 78 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd188]
c000857d:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0008580:	c3                   	ret    
c0008581:	8d 4a 9c             	lea    ecx,[edx-0x64]
c0008584:	83 f9 07             	cmp    ecx,0x7
c0008587:	77 0a                	ja     c0008593 <VgaText::doANSI_SGR(int)+0x73>
c0008589:	8b 14 95 50 2e 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffdd1b0]
c0008590:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c0008593:	c3                   	ret    

c0008594 <VgaText::setDefaultBgColour(VgaColour)>:
c0008594:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008598:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000859c:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000859f:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00085a2:	c3                   	ret    
c00085a3:	90                   	nop

c00085a4 <VgaText::setDefaultFgColour(VgaColour)>:
c00085a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085ac:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c00085af:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00085b2:	c3                   	ret    
c00085b3:	90                   	nop

c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c00085b4:	53                   	push   ebx
c00085b5:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00085b9:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00085bd:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00085c1:	51                   	push   ecx
c00085c2:	e8 cd ff ff ff       	call   c0008594 <VgaText::setDefaultBgColour(VgaColour)>
c00085c7:	58                   	pop    eax
c00085c8:	5a                   	pop    edx
c00085c9:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c00085cd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00085d1:	5b                   	pop    ebx
c00085d2:	eb d0                	jmp    c00085a4 <VgaText::setDefaultFgColour(VgaColour)>

c00085d4 <VgaText::setTitleTextColour(VgaColour)>:
c00085d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085d8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085dc:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c00085df:	c3                   	ret    

c00085e0 <VgaText::setTitleColour(VgaColour)>:
c00085e0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085e4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00085e8:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00085eb:	c3                   	ret    

c00085ec <VgaText::setTitle(char*)>:
c00085ec:	c3                   	ret    
c00085ed:	90                   	nop

c00085ee <VgaText::combineColours(unsigned char, unsigned char)>:
c00085ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00085f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00085f7:	83 e0 0f             	and    eax,0xf
c00085fa:	c1 e2 04             	shl    edx,0x4
c00085fd:	09 d0                	or     eax,edx
c00085ff:	c3                   	ret    

c0008600 <VgaText::scrollScreen()>:
c0008600:	55                   	push   ebp
c0008601:	57                   	push   edi
c0008602:	56                   	push   esi
c0008603:	be 01 00 00 00       	mov    esi,0x1
c0008608:	53                   	push   ebx
c0008609:	83 ec 0c             	sub    esp,0xc
c000860c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008610:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0008613:	69 ce a0 00 00 00    	imul   ecx,esi,0xa0
c0008619:	31 ff                	xor    edi,edi
c000861b:	01 e9                	add    ecx,ebp
c000861d:	8a 01                	mov    al,BYTE PTR [ecx]
c000861f:	83 fe 18             	cmp    esi,0x18
c0008622:	88 81 60 ff ff ff    	mov    BYTE PTR [ecx-0xa0],al
c0008628:	75 20                	jne    c000864a <VgaText::scrollScreen()+0x4a>
c000862a:	f7 c7 01 00 00 00    	test   edi,0x1
c0008630:	74 15                	je     c0008647 <VgaText::scrollScreen()+0x47>
c0008632:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008636:	50                   	push   eax
c0008637:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c000863b:	50                   	push   eax
c000863c:	e8 ad ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008641:	5a                   	pop    edx
c0008642:	5a                   	pop    edx
c0008643:	88 01                	mov    BYTE PTR [ecx],al
c0008645:	eb 03                	jmp    c000864a <VgaText::scrollScreen()+0x4a>
c0008647:	c6 01 20             	mov    BYTE PTR [ecx],0x20
c000864a:	47                   	inc    edi
c000864b:	41                   	inc    ecx
c000864c:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0008652:	75 c9                	jne    c000861d <VgaText::scrollScreen()+0x1d>
c0008654:	46                   	inc    esi
c0008655:	83 fe 19             	cmp    esi,0x19
c0008658:	75 b9                	jne    c0008613 <VgaText::scrollScreen()+0x13>
c000865a:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008660:	75 1f                	jne    c0008681 <VgaText::scrollScreen()+0x81>
c0008662:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0008666:	74 05                	je     c000866d <VgaText::scrollScreen()+0x6d>
c0008668:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c000866b:	eb 14                	jmp    c0008681 <VgaText::scrollScreen()+0x81>
c000866d:	50                   	push   eax
c000866e:	50                   	push   eax
c000866f:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0008673:	50                   	push   eax
c0008674:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c0008678:	50                   	push   eax
c0008679:	e8 06 01 01 00       	call   c0018784 <HalConsoleScroll(int, int)>
c000867e:	83 c4 10             	add    esp,0x10
c0008681:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0008685:	83 c4 0c             	add    esp,0xc
c0008688:	5b                   	pop    ebx
c0008689:	5e                   	pop    esi
c000868a:	5f                   	pop    edi
c000868b:	5d                   	pop    ebp
c000868c:	e9 79 fe ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008691:	90                   	nop

c0008692 <VgaText::combineCharAndColour(char, unsigned char)>:
c0008692:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0008697:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000869c:	c1 e0 08             	shl    eax,0x8
c000869f:	09 d0                	or     eax,edx
c00086a1:	c3                   	ret    

c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00086a2:	55                   	push   ebp
c00086a3:	57                   	push   edi
c00086a4:	56                   	push   esi
c00086a5:	53                   	push   ebx
c00086a6:	83 ec 1c             	sub    esp,0x1c
c00086a9:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00086ad:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00086b1:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00086b5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00086b9:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c00086bd:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c00086c1:	0f b6 c3             	movzx  eax,bl
c00086c4:	50                   	push   eax
c00086c5:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c00086ca:	50                   	push   eax
c00086cb:	e8 1e ff ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c00086d0:	5a                   	pop    edx
c00086d1:	0f b6 c0             	movzx  eax,al
c00086d4:	59                   	pop    ecx
c00086d5:	0f be 4c 24 34       	movsx  ecx,BYTE PTR [esp+0x34]
c00086da:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00086de:	50                   	push   eax
c00086df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00086e3:	e8 aa ff ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c00086e8:	5a                   	pop    edx
c00086e9:	6b d7 50             	imul   edx,edi,0x50
c00086ec:	59                   	pop    ecx
c00086ed:	01 f2                	add    edx,esi
c00086ef:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00086f2:	0f b7 d2             	movzx  edx,dx
c00086f5:	66 89 04 51          	mov    WORD PTR [ecx+edx*2],ax
c00086f9:	39 2d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebp
c00086ff:	75 28                	jne    c0008729 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x87>
c0008701:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008705:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0008709:	89 74 24 3c          	mov    DWORD PTR [esp+0x3c],esi
c000870d:	89 5c 24 38          	mov    DWORD PTR [esp+0x38],ebx
c0008711:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0008715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008719:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000871d:	83 c4 1c             	add    esp,0x1c
c0008720:	5b                   	pop    ebx
c0008721:	5e                   	pop    esi
c0008722:	5f                   	pop    edi
c0008723:	5d                   	pop    ebp
c0008724:	e9 63 01 01 00       	jmp    c001888c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008729:	83 c4 1c             	add    esp,0x1c
c000872c:	5b                   	pop    ebx
c000872d:	5e                   	pop    esi
c000872e:	5f                   	pop    edi
c000872f:	5d                   	pop    ebp
c0008730:	c3                   	ret    
c0008731:	90                   	nop

c0008732 <VgaText::getCursorX()>:
c0008732:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008736:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0008739:	c3                   	ret    

c000873a <VgaText::getCursorY()>:
c000873a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000873e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0008741:	c3                   	ret    

c0008742 <VgaText::setCursor(int, int)>:
c0008742:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008746:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000874a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c000874d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008751:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0008754:	e9 b1 fd ff ff       	jmp    c000850a <VgaText::updateCursor()>

c0008759 <setActiveTerminal(VgaText*)>:
c0008759:	53                   	push   ebx
c000875a:	83 ec 08             	sub    esp,0x8
c000875d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008761:	85 db                	test   ebx,ebx
c0008763:	75 11                	jne    c0008776 <setActiveTerminal(VgaText*)+0x1d>
c0008765:	c7 44 24 10 c0 08 02 c0 	mov    DWORD PTR [esp+0x10],0xc00208c0
c000876d:	83 c4 08             	add    esp,0x8
c0008770:	5b                   	pop    ebx
c0008771:	e9 03 8b 00 00       	jmp    c0011279 <KePanic(char const*)>
c0008776:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000877b:	85 c0                	test   eax,eax
c000877d:	74 0c                	je     c000878b <setActiveTerminal(VgaText*)+0x32>
c000877f:	83 ec 0c             	sub    esp,0xc
c0008782:	50                   	push   eax
c0008783:	e8 82 fd ff ff       	call   c000850a <VgaText::updateCursor()>
c0008788:	83 c4 10             	add    esp,0x10
c000878b:	89 1d 04 5f 02 c0    	mov    DWORD PTR ds:0xc0025f04,ebx
c0008791:	50                   	push   eax
c0008792:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008795:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008798:	53                   	push   ebx
c0008799:	e8 a4 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000879e:	83 c4 18             	add    esp,0x18
c00087a1:	5b                   	pop    ebx
c00087a2:	c3                   	ret    
c00087a3:	90                   	nop

c00087a4 <VgaText::clearScreen()>:
c00087a4:	57                   	push   edi
c00087a5:	56                   	push   esi
c00087a6:	31 f6                	xor    esi,esi
c00087a8:	53                   	push   ebx
c00087a9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00087ad:	52                   	push   edx
c00087ae:	6a 00                	push   0x0
c00087b0:	6a 00                	push   0x0
c00087b2:	53                   	push   ebx
c00087b3:	e8 8a ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c00087b8:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c00087bf:	83 c4 10             	add    esp,0x10
c00087c2:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c00087c5:	7e 20                	jle    c00087e7 <VgaText::clearScreen()+0x43>
c00087c7:	31 ff                	xor    edi,edi
c00087c9:	50                   	push   eax
c00087ca:	50                   	push   eax
c00087cb:	56                   	push   esi
c00087cc:	57                   	push   edi
c00087cd:	47                   	inc    edi
c00087ce:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00087d1:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c00087d4:	6a 20                	push   0x20
c00087d6:	53                   	push   ebx
c00087d7:	e8 c6 fe ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c00087dc:	83 c4 20             	add    esp,0x20
c00087df:	83 ff 50             	cmp    edi,0x50
c00087e2:	75 e5                	jne    c00087c9 <VgaText::clearScreen()+0x25>
c00087e4:	46                   	inc    esi
c00087e5:	eb db                	jmp    c00087c2 <VgaText::clearScreen()+0x1e>
c00087e7:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c00087ee:	5b                   	pop    ebx
c00087ef:	5e                   	pop    esi
c00087f0:	5f                   	pop    edi
c00087f1:	c3                   	ret    

c00087f2 <VgaText::setCursorX(int)>:
c00087f2:	83 ec 10             	sub    esp,0x10
c00087f5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00087f9:	ff 70 18             	push   DWORD PTR [eax+0x18]
c00087fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008800:	50                   	push   eax
c0008801:	e8 3c ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008806:	83 c4 1c             	add    esp,0x1c
c0008809:	c3                   	ret    

c000880a <VgaText::setCursorY(int)>:
c000880a:	83 ec 10             	sub    esp,0x10
c000880d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0008811:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0008815:	ff 70 14             	push   DWORD PTR [eax+0x14]
c0008818:	50                   	push   eax
c0008819:	e8 24 ff ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c000881e:	83 c4 1c             	add    esp,0x1c
c0008821:	c3                   	ret    

c0008822 <VgaText::incrementCursor(bool)>:
c0008822:	56                   	push   esi
c0008823:	53                   	push   ebx
c0008824:	51                   	push   ecx
c0008825:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008829:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000882d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0008830:	40                   	inc    eax
c0008831:	83 f8 50             	cmp    eax,0x50
c0008834:	74 05                	je     c000883b <VgaText::incrementCursor(bool)+0x19>
c0008836:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0008839:	eb 24                	jmp    c000885f <VgaText::incrementCursor(bool)+0x3d>
c000883b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000883e:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008845:	8d 50 01             	lea    edx,[eax+0x1]
c0008848:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c000884b:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c000884e:	75 0f                	jne    c000885f <VgaText::incrementCursor(bool)+0x3d>
c0008850:	83 ec 0c             	sub    esp,0xc
c0008853:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008856:	53                   	push   ebx
c0008857:	e8 a4 fd ff ff       	call   c0008600 <VgaText::scrollScreen()>
c000885c:	83 c4 10             	add    esp,0x10
c000885f:	89 f0                	mov    eax,esi
c0008861:	84 c0                	test   al,al
c0008863:	74 0c                	je     c0008871 <VgaText::incrementCursor(bool)+0x4f>
c0008865:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008869:	5a                   	pop    edx
c000886a:	5b                   	pop    ebx
c000886b:	5e                   	pop    esi
c000886c:	e9 99 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008871:	58                   	pop    eax
c0008872:	5b                   	pop    ebx
c0008873:	5e                   	pop    esi
c0008874:	c3                   	ret    
c0008875:	90                   	nop

c0008876 <VgaText::decrementCursor(bool)>:
c0008876:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000887a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000887e:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008881:	85 c0                	test   eax,eax
c0008883:	74 04                	je     c0008889 <VgaText::decrementCursor(bool)+0x13>
c0008885:	48                   	dec    eax
c0008886:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0008889:	84 c9                	test   cl,cl
c000888b:	74 09                	je     c0008896 <VgaText::decrementCursor(bool)+0x20>
c000888d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0008891:	e9 74 fc ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008896:	c3                   	ret    
c0008897:	90                   	nop

c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>:
c0008898:	53                   	push   ebx
c0008899:	83 ec 08             	sub    esp,0x8
c000889c:	0f be 44 24 14       	movsx  eax,BYTE PTR [esp+0x14]
c00088a1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00088a5:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00088a9:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00088ad:	83 f8 07             	cmp    eax,0x7
c00088b0:	75 21                	jne    c00088d3 <VgaText::putchar(char, VgaColour, VgaColour)+0x3b>
c00088b2:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c00088ba:	c7 44 24 14 f4 01 00 00 	mov    DWORD PTR [esp+0x14],0x1f4
c00088c2:	c7 44 24 10 b8 01 00 00 	mov    DWORD PTR [esp+0x10],0x1b8
c00088ca:	83 c4 08             	add    esp,0x8
c00088cd:	5b                   	pop    ebx
c00088ce:	e9 9c 37 00 00       	jmp    c000c06f <Krnl::beep(int, int, bool)>
c00088d3:	83 f8 0d             	cmp    eax,0xd
c00088d6:	75 09                	jne    c00088e1 <VgaText::putchar(char, VgaColour, VgaColour)+0x49>
c00088d8:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088df:	eb 2d                	jmp    c000890e <VgaText::putchar(char, VgaColour, VgaColour)+0x76>
c00088e1:	83 f8 0a             	cmp    eax,0xa
c00088e4:	75 31                	jne    c0008917 <VgaText::putchar(char, VgaColour, VgaColour)+0x7f>
c00088e6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00088e9:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00088f0:	8d 50 01             	lea    edx,[eax+0x1]
c00088f3:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00088f6:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00088f9:	75 0f                	jne    c000890a <VgaText::putchar(char, VgaColour, VgaColour)+0x72>
c00088fb:	83 ec 0c             	sub    esp,0xc
c00088fe:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008901:	53                   	push   ebx
c0008902:	e8 f9 fc ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008907:	83 c4 10             	add    esp,0x10
c000890a:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000890e:	83 c4 08             	add    esp,0x8
c0008911:	5b                   	pop    ebx
c0008912:	e9 f3 fb ff ff       	jmp    c000850a <VgaText::updateCursor()>
c0008917:	83 f8 08             	cmp    eax,0x8
c000891a:	75 25                	jne    c0008941 <VgaText::putchar(char, VgaColour, VgaColour)+0xa9>
c000891c:	50                   	push   eax
c000891d:	50                   	push   eax
c000891e:	6a 01                	push   0x1
c0008920:	53                   	push   ebx
c0008921:	e8 50 ff ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008926:	5a                   	pop    edx
c0008927:	59                   	pop    ecx
c0008928:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000892b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000892e:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008931:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008934:	6a 20                	push   0x20
c0008936:	53                   	push   ebx
c0008937:	e8 66 fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c000893c:	83 c4 28             	add    esp,0x28
c000893f:	5b                   	pop    ebx
c0008940:	c3                   	ret    
c0008941:	83 ec 08             	sub    esp,0x8
c0008944:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008947:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000894a:	51                   	push   ecx
c000894b:	52                   	push   edx
c000894c:	50                   	push   eax
c000894d:	53                   	push   ebx
c000894e:	e8 4f fd ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008953:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0008957:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c000895f:	83 c4 28             	add    esp,0x28
c0008962:	5b                   	pop    ebx
c0008963:	e9 ba fe ff ff       	jmp    c0008822 <VgaText::incrementCursor(bool)>

c0008968 <VgaText::putchar(char)>:
c0008968:	57                   	push   edi
c0008969:	56                   	push   esi
c000896a:	53                   	push   ebx
c000896b:	83 ec 10             	sub    esp,0x10
c000896e:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008972:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008976:	89 f8                	mov    eax,edi
c0008978:	0f be c0             	movsx  eax,al
c000897b:	83 f8 5b             	cmp    eax,0x5b
c000897e:	75 18                	jne    c0008998 <VgaText::putchar(char)+0x30>
c0008980:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0008984:	74 20                	je     c00089a6 <VgaText::putchar(char)+0x3e>
c0008986:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c000898c:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0008993:	e9 c1 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008998:	83 f8 1b             	cmp    eax,0x1b
c000899b:	75 09                	jne    c00089a6 <VgaText::putchar(char)+0x3e>
c000899d:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c00089a1:	e9 b3 00 00 00       	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c00089a6:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c00089a9:	84 c9                	test   cl,cl
c00089ab:	0f 84 98 00 00 00    	je     c0008a49 <VgaText::putchar(char)+0xe1>
c00089b1:	8d 77 c0             	lea    esi,[edi-0x40]
c00089b4:	89 f2                	mov    edx,esi
c00089b6:	80 fa 3e             	cmp    dl,0x3e
c00089b9:	77 78                	ja     c0008a33 <VgaText::putchar(char)+0xcb>
c00089bb:	83 f8 6d             	cmp    eax,0x6d
c00089be:	75 47                	jne    c0008a07 <VgaText::putchar(char)+0x9f>
c00089c0:	31 f6                	xor    esi,esi
c00089c2:	31 d2                	xor    edx,edx
c00089c4:	31 c0                	xor    eax,eax
c00089c6:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c00089c9:	7e 2d                	jle    c00089f8 <VgaText::putchar(char)+0x90>
c00089cb:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c00089d0:	83 fa 3b             	cmp    edx,0x3b
c00089d3:	75 17                	jne    c00089ec <VgaText::putchar(char)+0x84>
c00089d5:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c00089d9:	50                   	push   eax
c00089da:	53                   	push   ebx
c00089db:	e8 40 fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c00089e0:	59                   	pop    ecx
c00089e1:	31 d2                	xor    edx,edx
c00089e3:	5f                   	pop    edi
c00089e4:	31 c0                	xor    eax,eax
c00089e6:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c00089ea:	eb 09                	jmp    c00089f5 <VgaText::putchar(char)+0x8d>
c00089ec:	6b c0 0a             	imul   eax,eax,0xa
c00089ef:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c00089f3:	88 ca                	mov    dl,cl
c00089f5:	46                   	inc    esi
c00089f6:	eb ce                	jmp    c00089c6 <VgaText::putchar(char)+0x5e>
c00089f8:	84 d2                	test   dl,dl
c00089fa:	74 2f                	je     c0008a2b <VgaText::putchar(char)+0xc3>
c00089fc:	50                   	push   eax
c00089fd:	53                   	push   ebx
c00089fe:	e8 1d fb ff ff       	call   c0008520 <VgaText::doANSI_SGR(int)>
c0008a03:	58                   	pop    eax
c0008a04:	5a                   	pop    edx
c0008a05:	eb 24                	jmp    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a07:	83 f8 4a             	cmp    eax,0x4a
c0008a0a:	75 1f                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a0c:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0008a10:	75 19                	jne    c0008a2b <VgaText::putchar(char)+0xc3>
c0008a12:	83 ec 0c             	sub    esp,0xc
c0008a15:	53                   	push   ebx
c0008a16:	e8 89 fd ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008a1b:	83 c4 0c             	add    esp,0xc
c0008a1e:	6a 00                	push   0x0
c0008a20:	6a 00                	push   0x0
c0008a22:	53                   	push   ebx
c0008a23:	e8 1a fd ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008a28:	83 c4 10             	add    esp,0x10
c0008a2b:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0008a31:	eb 26                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a33:	8b 43 54             	mov    eax,DWORD PTR [ebx+0x54]
c0008a36:	83 f8 0e             	cmp    eax,0xe
c0008a39:	7f 1e                	jg     c0008a59 <VgaText::putchar(char)+0xf1>
c0008a3b:	8d 48 01             	lea    ecx,[eax+0x1]
c0008a3e:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0008a41:	89 f9                	mov    ecx,edi
c0008a43:	88 4c 03 42          	mov    BYTE PTR [ebx+eax*1+0x42],cl
c0008a47:	eb 10                	jmp    c0008a59 <VgaText::putchar(char)+0xf1>
c0008a49:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008a4c:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008a4f:	50                   	push   eax
c0008a50:	53                   	push   ebx
c0008a51:	e8 42 fe ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008a56:	83 c4 10             	add    esp,0x10
c0008a59:	83 c4 10             	add    esp,0x10
c0008a5c:	5b                   	pop    ebx
c0008a5d:	5e                   	pop    esi
c0008a5e:	5f                   	pop    edi
c0008a5f:	c3                   	ret    

c0008a60 <VgaText::putx(unsigned int)>:
c0008a60:	57                   	push   edi
c0008a61:	b9 11 00 00 00       	mov    ecx,0x11
c0008a66:	56                   	push   esi
c0008a67:	be ce 08 02 c0       	mov    esi,0xc00208ce
c0008a6c:	53                   	push   ebx
c0008a6d:	83 ec 20             	sub    esp,0x20
c0008a70:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008a74:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0008a78:	fc                   	cld    
c0008a79:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0008a7b:	be 08 00 00 00       	mov    esi,0x8
c0008a80:	50                   	push   eax
c0008a81:	50                   	push   eax
c0008a82:	89 d8                	mov    eax,ebx
c0008a84:	c1 e3 04             	shl    ebx,0x4
c0008a87:	c1 e8 1c             	shr    eax,0x1c
c0008a8a:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c0008a8f:	50                   	push   eax
c0008a90:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0008a94:	e8 cf fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008a99:	83 c4 10             	add    esp,0x10
c0008a9c:	4e                   	dec    esi
c0008a9d:	75 e1                	jne    c0008a80 <VgaText::putx(unsigned int)+0x20>
c0008a9f:	83 c4 20             	add    esp,0x20
c0008aa2:	5b                   	pop    ebx
c0008aa3:	5e                   	pop    esi
c0008aa4:	5f                   	pop    edi
c0008aa5:	c3                   	ret    

c0008aa6 <VgaText::puts(char const*)>:
c0008aa6:	53                   	push   ebx
c0008aa7:	83 ec 08             	sub    esp,0x8
c0008aaa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0008aae:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0008ab1:	85 c0                	test   eax,eax
c0008ab3:	74 12                	je     c0008ac7 <VgaText::puts(char const*)+0x21>
c0008ab5:	43                   	inc    ebx
c0008ab6:	51                   	push   ecx
c0008ab7:	51                   	push   ecx
c0008ab8:	50                   	push   eax
c0008ab9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008abd:	e8 a6 fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ac2:	83 c4 10             	add    esp,0x10
c0008ac5:	eb e7                	jmp    c0008aae <VgaText::puts(char const*)+0x8>
c0008ac7:	83 c4 08             	add    esp,0x8
c0008aca:	5b                   	pop    ebx
c0008acb:	c3                   	ret    

c0008acc <VgaText::write(unsigned long long, void*, int*)>:
c0008acc:	55                   	push   ebp
c0008acd:	57                   	push   edi
c0008ace:	56                   	push   esi
c0008acf:	53                   	push   ebx
c0008ad0:	83 ec 0c             	sub    esp,0xc
c0008ad3:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0008ad7:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008adb:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0008adf:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0008ae6:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0008ae9:	39 eb                	cmp    ebx,ebp
c0008aeb:	74 13                	je     c0008b00 <VgaText::write(unsigned long long, void*, int*)+0x34>
c0008aed:	43                   	inc    ebx
c0008aee:	50                   	push   eax
c0008aef:	50                   	push   eax
c0008af0:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0008af4:	50                   	push   eax
c0008af5:	56                   	push   esi
c0008af6:	e8 6d fe ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008afb:	83 c4 10             	add    esp,0x10
c0008afe:	eb e9                	jmp    c0008ae9 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c0008b00:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0008b07:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008b0b:	89 38                	mov    DWORD PTR [eax],edi
c0008b0d:	83 c4 0c             	add    esp,0xc
c0008b10:	31 c0                	xor    eax,eax
c0008b12:	5b                   	pop    ebx
c0008b13:	5e                   	pop    esi
c0008b14:	5f                   	pop    edi
c0008b15:	5d                   	pop    ebp
c0008b16:	c3                   	ret    
c0008b17:	90                   	nop

c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0008b18:	55                   	push   ebp
c0008b19:	57                   	push   edi
c0008b1a:	56                   	push   esi
c0008b1b:	53                   	push   ebx
c0008b1c:	83 ec 0c             	sub    esp,0xc
c0008b1f:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008b23:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b28:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0008b2f:	50                   	push   eax
c0008b30:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0008b35:	50                   	push   eax
c0008b36:	e8 b3 fa ff ff       	call   c00085ee <VgaText::combineColours(unsigned char, unsigned char)>
c0008b3b:	5a                   	pop    edx
c0008b3c:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008b40:	59                   	pop    ecx
c0008b41:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008b44:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0008b48:	0f b7 f6             	movzx  esi,si
c0008b4b:	0f b6 e8             	movzx  ebp,al
c0008b4e:	01 f6                	add    esi,esi
c0008b50:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008b53:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008b56:	85 c0                	test   eax,eax
c0008b58:	0f 84 ef 00 00 00    	je     c0008c4d <VgaText::puts(char const*, VgaColour, VgaColour)+0x135>
c0008b5e:	83 f8 0d             	cmp    eax,0xd
c0008b61:	75 0c                	jne    c0008b6f <VgaText::puts(char const*, VgaColour, VgaColour)+0x57>
c0008b63:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b6a:	e9 d8 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008b6f:	83 f8 0a             	cmp    eax,0xa
c0008b72:	75 44                	jne    c0008bb8 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa0>
c0008b74:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0008b77:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008b7e:	8d 48 01             	lea    ecx,[eax+0x1]
c0008b81:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0008b84:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0008b87:	75 0f                	jne    c0008b98 <VgaText::puts(char const*, VgaColour, VgaColour)+0x80>
c0008b89:	83 ec 0c             	sub    esp,0xc
c0008b8c:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0008b8f:	53                   	push   ebx
c0008b90:	e8 6b fa ff ff       	call   c0008600 <VgaText::scrollScreen()>
c0008b95:	83 c4 10             	add    esp,0x10
c0008b98:	83 ec 0c             	sub    esp,0xc
c0008b9b:	53                   	push   ebx
c0008b9c:	e8 69 f9 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008ba1:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008ba5:	83 c4 10             	add    esp,0x10
c0008ba8:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008bab:	0f b7 f6             	movzx  esi,si
c0008bae:	01 f6                	add    esi,esi
c0008bb0:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bb3:	e9 8f 00 00 00       	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bb8:	83 f8 08             	cmp    eax,0x8
c0008bbb:	75 34                	jne    c0008bf1 <VgaText::puts(char const*, VgaColour, VgaColour)+0xd9>
c0008bbd:	51                   	push   ecx
c0008bbe:	51                   	push   ecx
c0008bbf:	6a 01                	push   0x1
c0008bc1:	53                   	push   ebx
c0008bc2:	e8 af fc ff ff       	call   c0008876 <VgaText::decrementCursor(bool)>
c0008bc7:	5e                   	pop    esi
c0008bc8:	58                   	pop    eax
c0008bc9:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008bcc:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008bcf:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008bd2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008bd5:	6a 20                	push   0x20
c0008bd7:	53                   	push   ebx
c0008bd8:	e8 c5 fa ff ff       	call   c00086a2 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0008bdd:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008be1:	83 c4 20             	add    esp,0x20
c0008be4:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0008be7:	0f b7 f6             	movzx  esi,si
c0008bea:	01 f6                	add    esi,esi
c0008bec:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008bef:	eb 56                	jmp    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008bf1:	52                   	push   edx
c0008bf2:	52                   	push   edx
c0008bf3:	55                   	push   ebp
c0008bf4:	50                   	push   eax
c0008bf5:	e8 98 fa ff ff       	call   c0008692 <VgaText::combineCharAndColour(char, unsigned char)>
c0008bfa:	83 c4 10             	add    esp,0x10
c0008bfd:	66 89 06             	mov    WORD PTR [esi],ax
c0008c00:	39 1d 04 5f 02 c0    	cmp    DWORD PTR ds:0xc0025f04,ebx
c0008c06:	75 1d                	jne    c0008c25 <VgaText::puts(char const*, VgaColour, VgaColour)+0x10d>
c0008c08:	83 ec 0c             	sub    esp,0xc
c0008c0b:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0008c0e:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0008c11:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c15:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0008c19:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0008c1c:	50                   	push   eax
c0008c1d:	e8 6a fc 00 00       	call   c001888c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0008c22:	83 c4 20             	add    esp,0x20
c0008c25:	83 c6 02             	add    esi,0x2
c0008c28:	50                   	push   eax
c0008c29:	50                   	push   eax
c0008c2a:	6a 00                	push   0x0
c0008c2c:	53                   	push   ebx
c0008c2d:	e8 f0 fb ff ff       	call   c0008822 <VgaText::incrementCursor(bool)>
c0008c32:	83 c4 10             	add    esp,0x10
c0008c35:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0008c39:	75 0c                	jne    c0008c47 <VgaText::puts(char const*, VgaColour, VgaColour)+0x12f>
c0008c3b:	6b 73 18 50          	imul   esi,DWORD PTR [ebx+0x18],0x50
c0008c3f:	0f b7 f6             	movzx  esi,si
c0008c42:	01 f6                	add    esi,esi
c0008c44:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0008c47:	47                   	inc    edi
c0008c48:	e9 06 ff ff ff       	jmp    c0008b53 <VgaText::puts(char const*, VgaColour, VgaColour)+0x3b>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	53                   	push   ebx
c0008c51:	e8 b4 f8 ff ff       	call   c000850a <VgaText::updateCursor()>
c0008c56:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0008c5d:	83 c4 1c             	add    esp,0x1c
c0008c60:	5b                   	pop    ebx
c0008c61:	5e                   	pop    esi
c0008c62:	5f                   	pop    edi
c0008c63:	5d                   	pop    ebp
c0008c64:	c3                   	ret    
c0008c65:	90                   	nop

c0008c66 <VgaText::VgaText(char const*)>:
c0008c66:	56                   	push   esi
c0008c67:	53                   	push   ebx
c0008c68:	83 ec 04             	sub    esp,0x4
c0008c6b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c6f:	83 ec 08             	sub    esp,0x8
c0008c72:	6a 00                	push   0x0
c0008c74:	50                   	push   eax
c0008c75:	e8 44 05 00 00       	call   c00091be <UnixFile::UnixFile(int)>
c0008c7a:	83 c4 10             	add    esp,0x10
c0008c7d:	ba f4 08 02 c0       	mov    edx,0xc00208f4
c0008c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c86:	89 10                	mov    DWORD PTR [eax],edx
c0008c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c8c:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c0008c93:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008c97:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0008c9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008ca2:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c0008ca6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008caa:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c0008cae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cb2:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c0008cb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cbd:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c0008cc4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cc8:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c0008ccf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cd3:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c0008cda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cde:	c7 40 10 19 00 00 00 	mov    DWORD PTR [eax+0x10],0x19
c0008ce5:	83 ec 0c             	sub    esp,0xc
c0008ce8:	6a 01                	push   0x1
c0008cea:	e8 1e 09 00 00       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0008cef:	83 c4 10             	add    esp,0x10
c0008cf2:	89 c2                	mov    edx,eax
c0008cf4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008cf8:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0008cfb:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c0008d01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d05:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d08:	89 c6                	mov    esi,eax
c0008d0a:	e8 b0 f0 ff ff       	call   c0007dbf <Phys::allocatePage()>
c0008d0f:	68 05 0c 00 00       	push   0xc05
c0008d14:	56                   	push   esi
c0008d15:	50                   	push   eax
c0008d16:	53                   	push   ebx
c0008d17:	e8 04 10 00 00       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0008d1c:	83 c4 10             	add    esp,0x10
c0008d1f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d23:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0008d26:	83 ec 04             	sub    esp,0x4
c0008d29:	68 a0 0f 00 00       	push   0xfa0
c0008d2e:	6a 00                	push   0x0
c0008d30:	50                   	push   eax
c0008d31:	e8 ba 77 ff ff       	call   c00004f0 <memset>
c0008d36:	83 c4 10             	add    esp,0x10
c0008d39:	83 ec 04             	sub    esp,0x4
c0008d3c:	6a 00                	push   0x0
c0008d3e:	6a 07                	push   0x7
c0008d40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d44:	e8 6b f8 ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0008d49:	83 c4 10             	add    esp,0x10
c0008d4c:	83 ec 04             	sub    esp,0x4
c0008d4f:	6a 00                	push   0x0
c0008d51:	6a 00                	push   0x0
c0008d53:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d57:	e8 e6 f9 ff ff       	call   c0008742 <VgaText::setCursor(int, int)>
c0008d5c:	83 c4 10             	add    esp,0x10
c0008d5f:	83 ec 0c             	sub    esp,0xc
c0008d62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008d66:	e8 39 fa ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0008d6b:	83 c4 10             	add    esp,0x10
c0008d6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d72:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c0008d76:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d7a:	05 82 00 00 00       	add    eax,0x82
c0008d7f:	83 ec 04             	sub    esp,0x4
c0008d82:	68 80 00 00 00       	push   0x80
c0008d87:	6a 00                	push   0x0
c0008d89:	50                   	push   eax
c0008d8a:	e8 61 77 ff ff       	call   c00004f0 <memset>
c0008d8f:	83 c4 10             	add    esp,0x10
c0008d92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0008d96:	05 02 01 00 00       	add    eax,0x102
c0008d9b:	83 ec 04             	sub    esp,0x4
c0008d9e:	68 80 00 00 00       	push   0x80
c0008da3:	6a 00                	push   0x0
c0008da5:	50                   	push   eax
c0008da6:	e8 45 77 ff ff       	call   c00004f0 <memset>
c0008dab:	83 c4 10             	add    esp,0x10
c0008dae:	90                   	nop
c0008daf:	83 c4 04             	add    esp,0x4
c0008db2:	5b                   	pop    ebx
c0008db3:	5e                   	pop    esi
c0008db4:	c3                   	ret    
c0008db5:	90                   	nop

c0008db6 <VgaText::receiveKey(unsigned char)>:
c0008db6:	55                   	push   ebp
c0008db7:	57                   	push   edi
c0008db8:	56                   	push   esi
c0008db9:	53                   	push   ebx
c0008dba:	83 ec 2c             	sub    esp,0x2c
c0008dbd:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0008dc1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0008dc5:	89 ef                	mov    edi,ebp
c0008dc7:	81 e7 ff 00 00 00    	and    edi,0xff
c0008dcd:	0f 84 66 01 00 00    	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008dd3:	8d b3 82 00 00 00    	lea    esi,[ebx+0x82]
c0008dd9:	83 ff 08             	cmp    edi,0x8
c0008ddc:	75 73                	jne    c0008e51 <VgaText::receiveKey(unsigned char)+0x9b>
c0008dde:	83 ec 0c             	sub    esp,0xc
c0008de1:	56                   	push   esi
c0008de2:	e8 89 77 ff ff       	call   c0000570 <strlen>
c0008de7:	83 c4 10             	add    esp,0x10
c0008dea:	85 c0                	test   eax,eax
c0008dec:	0f 84 02 01 00 00    	je     c0008ef4 <VgaText::receiveKey(unsigned char)+0x13e>
c0008df2:	50                   	push   eax
c0008df3:	50                   	push   eax
c0008df4:	6a 08                	push   0x8
c0008df6:	53                   	push   ebx
c0008df7:	e8 6c fb ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008dfc:	89 34 24             	mov    DWORD PTR [esp],esi
c0008dff:	e8 6c 77 ff ff       	call   c0000570 <strlen>
c0008e04:	83 c4 10             	add    esp,0x10
c0008e07:	0f be 94 03 81 00 00 00 	movsx  edx,BYTE PTR [ebx+eax*1+0x81]
c0008e0f:	83 fa 0d             	cmp    edx,0xd
c0008e12:	89 d0                	mov    eax,edx
c0008e14:	0f 95 c1             	setne  cl
c0008e17:	83 fa 1f             	cmp    edx,0x1f
c0008e1a:	0f 9e c2             	setle  dl
c0008e1d:	0f b6 d2             	movzx  edx,dl
c0008e20:	85 ca                	test   edx,ecx
c0008e22:	74 17                	je     c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e24:	83 e8 08             	sub    eax,0x8
c0008e27:	3c 02                	cmp    al,0x2
c0008e29:	76 10                	jbe    c0008e3b <VgaText::receiveKey(unsigned char)+0x85>
c0008e2b:	55                   	push   ebp
c0008e2c:	55                   	push   ebp
c0008e2d:	68 df 08 02 c0       	push   0xc00208df
c0008e32:	53                   	push   ebx
c0008e33:	e8 6e fc ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0008e38:	83 c4 10             	add    esp,0x10
c0008e3b:	83 ec 0c             	sub    esp,0xc
c0008e3e:	56                   	push   esi
c0008e3f:	e8 2c 77 ff ff       	call   c0000570 <strlen>
c0008e44:	c6 84 03 81 00 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x81],0x0
c0008e4c:	e9 a0 00 00 00       	jmp    c0008ef1 <VgaText::receiveKey(unsigned char)+0x13b>
c0008e51:	83 ec 0c             	sub    esp,0xc
c0008e54:	8d 83 02 01 00 00    	lea    eax,[ebx+0x102]
c0008e5a:	50                   	push   eax
c0008e5b:	e8 10 77 ff ff       	call   c0000570 <strlen>
c0008e60:	89 34 24             	mov    DWORD PTR [esp],esi
c0008e63:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008e67:	e8 04 77 ff ff       	call   c0000570 <strlen>
c0008e6c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008e70:	83 c4 10             	add    esp,0x10
c0008e73:	8d 44 02 03          	lea    eax,[edx+eax*1+0x3]
c0008e77:	3d 80 00 00 00       	cmp    eax,0x80
c0008e7c:	0f 87 b7 00 00 00    	ja     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008e82:	8d 45 ff             	lea    eax,[ebp-0x1]
c0008e85:	8d 55 f7             	lea    edx,[ebp-0x9]
c0008e88:	3c 1e                	cmp    al,0x1e
c0008e8a:	0f 96 c0             	setbe  al
c0008e8d:	80 fa 01             	cmp    dl,0x1
c0008e90:	0f 97 c2             	seta   dl
c0008e93:	0f b6 d2             	movzx  edx,dl
c0008e96:	85 c2                	test   edx,eax
c0008e98:	74 2e                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9a:	83 ff 0d             	cmp    edi,0xd
c0008e9d:	74 29                	je     c0008ec8 <VgaText::receiveKey(unsigned char)+0x112>
c0008e9f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008ea2:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008ea5:	68 e5 08 02 c0       	push   0xc00208e5
c0008eaa:	53                   	push   ebx
c0008eab:	e8 68 fc ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c0008eb0:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0008eb3:	8d 45 40             	lea    eax,[ebp+0x40]
c0008eb6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0008eb9:	0f b6 c0             	movzx  eax,al
c0008ebc:	50                   	push   eax
c0008ebd:	53                   	push   ebx
c0008ebe:	e8 d5 f9 ff ff       	call   c0008898 <VgaText::putchar(char, VgaColour, VgaColour)>
c0008ec3:	83 c4 20             	add    esp,0x20
c0008ec6:	eb 11                	jmp    c0008ed9 <VgaText::receiveKey(unsigned char)+0x123>
c0008ec8:	89 e8                	mov    eax,ebp
c0008eca:	51                   	push   ecx
c0008ecb:	0f be c0             	movsx  eax,al
c0008ece:	51                   	push   ecx
c0008ecf:	50                   	push   eax
c0008ed0:	53                   	push   ebx
c0008ed1:	e8 92 fa ff ff       	call   c0008968 <VgaText::putchar(char)>
c0008ed6:	83 c4 10             	add    esp,0x10
c0008ed9:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0008ede:	89 e8                	mov    eax,ebp
c0008ee0:	88 44 24 1e          	mov    BYTE PTR [esp+0x1e],al
c0008ee4:	52                   	push   edx
c0008ee5:	52                   	push   edx
c0008ee6:	8d 44 24 26          	lea    eax,[esp+0x26]
c0008eea:	50                   	push   eax
c0008eeb:	56                   	push   esi
c0008eec:	e8 4f 79 ff ff       	call   c0000840 <strcat>
c0008ef1:	83 c4 10             	add    esp,0x10
c0008ef4:	8a 93 80 00 00 00    	mov    dl,BYTE PTR [ebx+0x80]
c0008efa:	b0 01                	mov    al,0x1
c0008efc:	83 ff 1c             	cmp    edi,0x1c
c0008eff:	77 0e                	ja     c0008f0f <VgaText::receiveKey(unsigned char)+0x159>
c0008f01:	b8 08 04 00 10       	mov    eax,0x10000408
c0008f06:	89 f9                	mov    ecx,edi
c0008f08:	d3 e8                	shr    eax,cl
c0008f0a:	f7 d0                	not    eax
c0008f0c:	83 e0 01             	and    eax,0x1
c0008f0f:	84 c0                	test   al,al
c0008f11:	74 04                	je     c0008f17 <VgaText::receiveKey(unsigned char)+0x161>
c0008f13:	84 d2                	test   dl,dl
c0008f15:	74 22                	je     c0008f39 <VgaText::receiveKey(unsigned char)+0x183>
c0008f17:	81 c3 02 01 00 00    	add    ebx,0x102
c0008f1d:	50                   	push   eax
c0008f1e:	50                   	push   eax
c0008f1f:	56                   	push   esi
c0008f20:	53                   	push   ebx
c0008f21:	e8 1a 79 ff ff       	call   c0000840 <strcat>
c0008f26:	83 c4 0c             	add    esp,0xc
c0008f29:	68 80 00 00 00       	push   0x80
c0008f2e:	6a 00                	push   0x0
c0008f30:	56                   	push   esi
c0008f31:	e8 ba 75 ff ff       	call   c00004f0 <memset>
c0008f36:	83 c4 10             	add    esp,0x10
c0008f39:	83 c4 2c             	add    esp,0x2c
c0008f3c:	5b                   	pop    ebx
c0008f3d:	5e                   	pop    esi
c0008f3e:	5f                   	pop    edi
c0008f3f:	5d                   	pop    ebp
c0008f40:	c3                   	ret    
c0008f41:	90                   	nop

c0008f42 <VgaText::doUpdate()>:
c0008f42:	c3                   	ret    
c0008f43:	90                   	nop

c0008f44 <TSS::TSS()>:
c0008f44:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008f48:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0008f4f:	90                   	nop
c0008f50:	c3                   	ret    
c0008f51:	90                   	nop
c0008f52:	66 90                	xchg   ax,ax

c0008f54 <TSS::setESP(unsigned long)>:
c0008f54:	55                   	push   ebp
c0008f55:	89 e5                	mov    ebp,esp
c0008f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f5a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008f5d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008f60:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008f63:	90                   	nop
c0008f64:	5d                   	pop    ebp
c0008f65:	c3                   	ret    
c0008f66:	66 90                	xchg   ax,ax

c0008f68 <TSS::flush()>:
c0008f68:	55                   	push   ebp
c0008f69:	89 e5                	mov    ebp,esp
c0008f6b:	83 ec 10             	sub    esp,0x10
c0008f6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008f71:	8b 00                	mov    eax,DWORD PTR [eax]
c0008f73:	83 c8 03             	or     eax,0x3
c0008f76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c0008f7a:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c0008f7e:	66 89 d0             	mov    ax,dx
c0008f81:	0f 00 d8             	ltr    ax
c0008f84:	90                   	nop
c0008f85:	c9                   	leave  
c0008f86:	c3                   	ret    
c0008f87:	90                   	nop

c0008f88 <TSS::setup(unsigned long, unsigned long)>:
c0008f88:	55                   	push   ebp
c0008f89:	89 e5                	mov    ebp,esp
c0008f8b:	83 ec 18             	sub    esp,0x18
c0008f8e:	83 ec 0c             	sub    esp,0xc
c0008f91:	6a 68                	push   0x68
c0008f93:	e8 1e eb ff ff       	call   c0007ab6 <malloc>
c0008f98:	83 c4 10             	add    esp,0x10
c0008f9b:	89 c2                	mov    edx,eax
c0008f9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fa9:	83 ec 04             	sub    esp,0x4
c0008fac:	6a 68                	push   0x68
c0008fae:	6a 00                	push   0x0
c0008fb0:	50                   	push   eax
c0008fb1:	e8 3a 75 ff ff       	call   c00004f0 <memset>
c0008fb6:	83 c4 10             	add    esp,0x10
c0008fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fbf:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c0008fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fc8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fcb:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c0008fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0008fda:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0008fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fe0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fe3:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0008fe9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008fec:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008fef:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c0008ff5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0008ff8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0008ffb:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c0009001:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009004:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009007:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c000900d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009010:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009013:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0009019:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000901c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000901f:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c0009025:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009028:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000902b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c000902e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0009031:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009034:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009037:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000903a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000903d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0009040:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009043:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c000904a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000904d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009050:	0f 20 da             	mov    edx,cr3
c0009053:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0009056:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0009059:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c000905c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000905f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009062:	83 ec 08             	sub    esp,0x8
c0009065:	50                   	push   eax
c0009066:	8d 45 ec             	lea    eax,[ebp-0x14]
c0009069:	50                   	push   eax
c000906a:	e8 b3 e2 ff ff       	call   c0007322 <GDTEntry::setBase(unsigned int)>
c000906f:	83 c4 10             	add    esp,0x10
c0009072:	83 ec 08             	sub    esp,0x8
c0009075:	6a 68                	push   0x68
c0009077:	8d 45 ec             	lea    eax,[ebp-0x14]
c000907a:	50                   	push   eax
c000907b:	e8 be e2 ff ff       	call   c000733e <GDTEntry::setLimit(unsigned int)>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c0009087:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c000908a:	83 e0 0f             	and    eax,0xf
c000908d:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009090:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c0009093:	83 c8 40             	or     eax,0x40
c0009096:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c0009099:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000909e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090a4:	05 78 01 00 00       	add    eax,0x178
c00090a9:	83 ec 04             	sub    esp,0x4
c00090ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00090af:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00090b2:	50                   	push   eax
c00090b3:	e8 ba e2 ff ff       	call   c0007372 <GDT::addEntry(GDTEntry)>
c00090b8:	83 c4 10             	add    esp,0x10
c00090bb:	89 c2                	mov    edx,eax
c00090bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090c0:	89 10                	mov    DWORD PTR [eax],edx
c00090c2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00090c7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00090cd:	05 78 01 00 00       	add    eax,0x178
c00090d2:	83 ec 0c             	sub    esp,0xc
c00090d5:	50                   	push   eax
c00090d6:	e8 c1 e2 ff ff       	call   c000739c <GDT::flush()>
c00090db:	83 c4 10             	add    esp,0x10
c00090de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00090e1:	8b 00                	mov    eax,DWORD PTR [eax]
c00090e3:	c9                   	leave  
c00090e4:	c3                   	ret    
c00090e5:	90                   	nop

c00090e6 <ReservedFilename::read(unsigned long long, void*, int*)>:
c00090e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00090ea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00090ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00090f1:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00090f6:	75 08                	jne    c0009100 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c00090f8:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00090fe:	eb 38                	jmp    c0009138 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0009100:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0009105:	75 17                	jne    c000911e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0009107:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000910c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000910f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0009115:	8b 10                	mov    edx,DWORD PTR [eax]
c0009117:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000911b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c000911e:	89 c1                	mov    ecx,eax
c0009120:	83 e1 fd             	and    ecx,0xfffffffd
c0009123:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0009129:	74 cd                	je     c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c000912b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0009130:	83 e0 ef             	and    eax,0xffffffef
c0009133:	83 f8 08             	cmp    eax,0x8
c0009136:	76 c0                	jbe    c00090f8 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0009138:	31 c0                	xor    eax,eax
c000913a:	c3                   	ret    
c000913b:	90                   	nop

c000913c <ReservedFilename::isAtty()>:
c000913c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009140:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009143:	31 c0                	xor    eax,eax
c0009145:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c000914b:	74 09                	je     c0009156 <ReservedFilename::isAtty()+0x1a>
c000914d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0009153:	0f 94 c0             	sete   al
c0009156:	c3                   	ret    
c0009157:	90                   	nop

c0009158 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0009158:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000915c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009160:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0009163:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009167:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c000916c:	75 08                	jne    c0009176 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c000916e:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c0009174:	eb 3d                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c0009176:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c000917b:	75 17                	jne    c0009194 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c000917d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0009182:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009185:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c000918b:	8b 10                	mov    edx,DWORD PTR [eax]
c000918d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009191:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c0009194:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0009199:	75 04                	jne    c000919f <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c000919b:	89 0a                	mov    DWORD PTR [edx],ecx
c000919d:	eb 14                	jmp    c00091b3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c000919f:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00091a4:	74 c8                	je     c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091a6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00091ab:	83 e0 ef             	and    eax,0xffffffef
c00091ae:	83 f8 08             	cmp    eax,0x8
c00091b1:	76 bb                	jbe    c000916e <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00091b3:	31 c0                	xor    eax,eax
c00091b5:	c3                   	ret    

c00091b6 <UnixFile::getFileDescriptor()>:
c00091b6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00091ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00091bd:	c3                   	ret    

c00091be <UnixFile::UnixFile(int)>:
c00091be:	53                   	push   ebx
c00091bf:	83 ec 28             	sub    esp,0x28
c00091c2:	ba bc 09 02 c0       	mov    edx,0xc00209bc
c00091c7:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00091cb:	89 10                	mov    DWORD PTR [eax],edx
c00091cd:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c00091d5:	0f 8f 90 01 00 00    	jg     c000936b <UnixFile::UnixFile(int)+0x1ad>
c00091db:	a1 00 30 02 c0       	mov    eax,ds:0xc0023000
c00091e0:	8d 50 01             	lea    edx,[eax+0x1]
c00091e3:	89 15 00 30 02 c0    	mov    DWORD PTR ds:0xc0023000,edx
c00091e9:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00091ed:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00091f0:	83 ec 08             	sub    esp,0x8
c00091f3:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00091f7:	68 98 5f 02 c0       	push   0xc0025f98
c00091fc:	e8 97 62 01 00       	call   c001f498 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009201:	83 c4 10             	add    esp,0x10
c0009204:	a0 94 5f 02 c0       	mov    al,ds:0xc0025f94
c0009209:	83 f0 01             	xor    eax,0x1
c000920c:	0f b6 c0             	movzx  eax,al
c000920f:	85 c0                	test   eax,eax
c0009211:	0f 84 55 01 00 00    	je     c000936c <UnixFile::UnixFile(int)+0x1ae>
c0009217:	c6 05 94 5f 02 c0 01 	mov    BYTE PTR ds:0xc0025f94,0x1
c000921e:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0009226:	83 ec 0c             	sub    esp,0xc
c0009229:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000922d:	e8 84 e8 ff ff       	call   c0007ab6 <malloc>
c0009232:	83 c4 10             	add    esp,0x10
c0009235:	89 c3                	mov    ebx,eax
c0009237:	83 ec 08             	sub    esp,0x8
c000923a:	68 03 ff ff 0f       	push   0xfffff03
c000923f:	53                   	push   ebx
c0009240:	e8 2d 01 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009245:	83 c4 10             	add    esp,0x10
c0009248:	89 1d 8c 5f 02 c0    	mov    DWORD PTR ds:0xc0025f8c,ebx
c000924e:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0009256:	83 ec 0c             	sub    esp,0xc
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	e8 54 e8 ff ff       	call   c0007ab6 <malloc>
c0009262:	83 c4 10             	add    esp,0x10
c0009265:	89 c3                	mov    ebx,eax
c0009267:	83 ec 08             	sub    esp,0x8
c000926a:	68 01 ff ff 0f       	push   0xfffff01
c000926f:	53                   	push   ebx
c0009270:	e8 fd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009275:	83 c4 10             	add    esp,0x10
c0009278:	89 1d 90 5f 02 c0    	mov    DWORD PTR ds:0xc0025f90,ebx
c000927e:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c0009286:	83 ec 0c             	sub    esp,0xc
c0009289:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000928d:	e8 24 e8 ff ff       	call   c0007ab6 <malloc>
c0009292:	83 c4 10             	add    esp,0x10
c0009295:	89 c3                	mov    ebx,eax
c0009297:	83 ec 08             	sub    esp,0x8
c000929a:	68 00 ff ff 0f       	push   0xfffff00
c000929f:	53                   	push   ebx
c00092a0:	e8 cd 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092a5:	83 c4 10             	add    esp,0x10
c00092a8:	89 1d 84 5f 02 c0    	mov    DWORD PTR ds:0xc0025f84,ebx
c00092ae:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00092b6:	83 ec 0c             	sub    esp,0xc
c00092b9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092bd:	e8 f4 e7 ff ff       	call   c0007ab6 <malloc>
c00092c2:	83 c4 10             	add    esp,0x10
c00092c5:	89 c3                	mov    ebx,eax
c00092c7:	83 ec 08             	sub    esp,0x8
c00092ca:	68 02 ff ff 0f       	push   0xfffff02
c00092cf:	53                   	push   ebx
c00092d0:	e8 9d 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c00092d5:	83 c4 10             	add    esp,0x10
c00092d8:	89 1d 88 5f 02 c0    	mov    DWORD PTR ds:0xc0025f88,ebx
c00092de:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c00092e6:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c00092eb:	7f 7f                	jg     c000936c <UnixFile::UnixFile(int)+0x1ae>
c00092ed:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c00092f5:	83 ec 0c             	sub    esp,0xc
c00092f8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00092fc:	e8 b5 e7 ff ff       	call   c0007ab6 <malloc>
c0009301:	83 c4 10             	add    esp,0x10
c0009304:	89 c3                	mov    ebx,eax
c0009306:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000930a:	05 10 ff ff 0f       	add    eax,0xfffff10
c000930f:	83 ec 08             	sub    esp,0x8
c0009312:	50                   	push   eax
c0009313:	53                   	push   ebx
c0009314:	e8 59 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009319:	83 c4 10             	add    esp,0x10
c000931c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009320:	89 1c 85 60 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0a0],ebx
c0009327:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c000932f:	83 ec 0c             	sub    esp,0xc
c0009332:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009336:	e8 7b e7 ff ff       	call   c0007ab6 <malloc>
c000933b:	83 c4 10             	add    esp,0x10
c000933e:	89 c3                	mov    ebx,eax
c0009340:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0009344:	05 20 ff ff 0f       	add    eax,0xfffff20
c0009349:	83 ec 08             	sub    esp,0x8
c000934c:	50                   	push   eax
c000934d:	53                   	push   ebx
c000934e:	e8 1f 00 00 00       	call   c0009372 <ReservedFilename::ReservedFilename(int)>
c0009353:	83 c4 10             	add    esp,0x10
c0009356:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000935a:	89 1c 85 20 5f 02 c0 	mov    DWORD PTR [eax*4-0x3ffda0e0],ebx
c0009361:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009366:	e9 7b ff ff ff       	jmp    c00092e6 <UnixFile::UnixFile(int)+0x128>
c000936b:	90                   	nop
c000936c:	83 c4 28             	add    esp,0x28
c000936f:	5b                   	pop    ebx
c0009370:	c3                   	ret    
c0009371:	90                   	nop

c0009372 <ReservedFilename::ReservedFilename(int)>:
c0009372:	83 ec 0c             	sub    esp,0xc
c0009375:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009379:	83 ec 08             	sub    esp,0x8
c000937c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009380:	50                   	push   eax
c0009381:	e8 38 fe ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	ba d8 09 02 c0       	mov    edx,0xc00209d8
c000938e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009392:	89 10                	mov    DWORD PTR [eax],edx
c0009394:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009398:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000939c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000939f:	90                   	nop
c00093a0:	83 c4 0c             	add    esp,0xc
c00093a3:	c3                   	ret    

c00093a4 <UnixFile::~UnixFile()>:
c00093a4:	83 ec 1c             	sub    esp,0x1c
c00093a7:	ba bc 09 02 c0       	mov    edx,0xc00209bc
c00093ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b0:	89 10                	mov    DWORD PTR [eax],edx
c00093b2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00093b6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00093b9:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00093be:	7f 76                	jg     c0009436 <UnixFile::~UnixFile()+0x92>
c00093c0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00093c8:	83 ec 0c             	sub    esp,0xc
c00093cb:	68 98 5f 02 c0       	push   0xc0025f98
c00093d0:	e8 97 61 01 00       	call   c001f56c <LinkedList<UnixFile>::getFirstElement()>
c00093d5:	83 c4 10             	add    esp,0x10
c00093d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00093dc:	83 ec 0c             	sub    esp,0xc
c00093df:	68 98 5f 02 c0       	push   0xc0025f98
c00093e4:	e8 8b 61 01 00       	call   c001f574 <LinkedList<UnixFile>::removeFirst()>
c00093e9:	83 c4 10             	add    esp,0x10
c00093ec:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00093f0:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c00093f4:	74 43                	je     c0009439 <UnixFile::~UnixFile()+0x95>
c00093f6:	83 ec 08             	sub    esp,0x8
c00093f9:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00093fd:	68 98 5f 02 c0       	push   0xc0025f98
c0009402:	e8 91 60 01 00       	call   c001f498 <LinkedList<UnixFile>::addElement(UnixFile*)>
c0009407:	83 c4 10             	add    esp,0x10
c000940a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000940e:	8d 50 01             	lea    edx,[eax+0x1]
c0009411:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009415:	3d 20 a1 07 00       	cmp    eax,0x7a120
c000941a:	0f 94 c0             	sete   al
c000941d:	0f b6 c0             	movzx  eax,al
c0009420:	85 c0                	test   eax,eax
c0009422:	74 a4                	je     c00093c8 <UnixFile::~UnixFile()+0x24>
c0009424:	83 ec 0c             	sub    esp,0xc
c0009427:	68 94 09 02 c0       	push   0xc0020994
c000942c:	e8 48 7e 00 00       	call   c0011279 <KePanic(char const*)>
c0009431:	83 c4 10             	add    esp,0x10
c0009434:	eb 92                	jmp    c00093c8 <UnixFile::~UnixFile()+0x24>
c0009436:	90                   	nop
c0009437:	eb 01                	jmp    c000943a <UnixFile::~UnixFile()+0x96>
c0009439:	90                   	nop
c000943a:	90                   	nop
c000943b:	83 c4 1c             	add    esp,0x1c
c000943e:	c3                   	ret    
c000943f:	90                   	nop

c0009440 <UnixFile::~UnixFile()>:
c0009440:	83 ec 0c             	sub    esp,0xc
c0009443:	83 ec 0c             	sub    esp,0xc
c0009446:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000944a:	e8 55 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000944f:	83 c4 10             	add    esp,0x10
c0009452:	83 ec 08             	sub    esp,0x8
c0009455:	6a 0c                	push   0xc
c0009457:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000945b:	e8 b8 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c0009460:	83 c4 10             	add    esp,0x10
c0009463:	83 c4 0c             	add    esp,0xc
c0009466:	c3                   	ret    
c0009467:	90                   	nop

c0009468 <ReservedFilename::~ReservedFilename()>:
c0009468:	83 ec 0c             	sub    esp,0xc
c000946b:	ba d8 09 02 c0       	mov    edx,0xc00209d8
c0009470:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009474:	89 10                	mov    DWORD PTR [eax],edx
c0009476:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000947a:	83 ec 0c             	sub    esp,0xc
c000947d:	50                   	push   eax
c000947e:	e8 21 ff ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c0009483:	83 c4 10             	add    esp,0x10
c0009486:	90                   	nop
c0009487:	83 c4 0c             	add    esp,0xc
c000948a:	c3                   	ret    
c000948b:	90                   	nop

c000948c <ReservedFilename::~ReservedFilename()>:
c000948c:	83 ec 0c             	sub    esp,0xc
c000948f:	83 ec 0c             	sub    esp,0xc
c0009492:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009496:	e8 cd ff ff ff       	call   c0009468 <ReservedFilename::~ReservedFilename()>
c000949b:	83 c4 10             	add    esp,0x10
c000949e:	83 ec 08             	sub    esp,0x8
c00094a1:	6a 0c                	push   0xc
c00094a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00094a7:	e8 6c 13 00 00       	call   c000a818 <operator delete(void*, unsigned long)>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	83 c4 0c             	add    esp,0xc
c00094b2:	c3                   	ret    

c00094b3 <KeGetFileFromDescriptor(int)>:
c00094b3:	53                   	push   ebx
c00094b4:	83 ec 08             	sub    esp,0x8
c00094b7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00094bb:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00094c1:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00094c7:	7f 2c                	jg     c00094f5 <KeGetFileFromDescriptor(int)+0x42>
c00094c9:	83 ec 0c             	sub    esp,0xc
c00094cc:	68 98 5f 02 c0       	push   0xc0025f98
c00094d1:	e8 96 60 01 00       	call   c001f56c <LinkedList<UnixFile>::getFirstElement()>
c00094d6:	83 c4 10             	add    esp,0x10
c00094d9:	85 c0                	test   eax,eax
c00094db:	75 04                	jne    c00094e1 <KeGetFileFromDescriptor(int)+0x2e>
c00094dd:	31 c0                	xor    eax,eax
c00094df:	eb 6e                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e1:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c00094e4:	74 69                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c00094e6:	52                   	push   edx
c00094e7:	52                   	push   edx
c00094e8:	50                   	push   eax
c00094e9:	68 98 5f 02 c0       	push   0xc0025f98
c00094ee:	e8 23 61 01 00       	call   c001f616 <LinkedList<UnixFile>::getNext(UnixFile*)>
c00094f3:	eb e1                	jmp    c00094d6 <KeGetFileFromDescriptor(int)+0x23>
c00094f5:	a1 8c 5f 02 c0       	mov    eax,ds:0xc0025f8c
c00094fa:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0009500:	74 4d                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009502:	a1 90 5f 02 c0       	mov    eax,ds:0xc0025f90
c0009507:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c000950d:	74 40                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000950f:	a1 88 5f 02 c0       	mov    eax,ds:0xc0025f88
c0009514:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c000951a:	74 33                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000951c:	a1 84 5f 02 c0       	mov    eax,ds:0xc0025f84
c0009521:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0009527:	74 26                	je     c000954f <KeGetFileFromDescriptor(int)+0x9c>
c0009529:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c000952f:	83 f8 08             	cmp    eax,0x8
c0009532:	77 09                	ja     c000953d <KeGetFileFromDescriptor(int)+0x8a>
c0009534:	8b 04 85 60 5f 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffda0a0]
c000953b:	eb 12                	jmp    c000954f <KeGetFileFromDescriptor(int)+0x9c>
c000953d:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c0009543:	83 fb 08             	cmp    ebx,0x8
c0009546:	77 95                	ja     c00094dd <KeGetFileFromDescriptor(int)+0x2a>
c0009548:	8b 04 9d 20 5f 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffda0e0]
c000954f:	83 c4 08             	add    esp,0x8
c0009552:	5b                   	pop    ebx
c0009553:	c3                   	ret    

c0009554 <__static_initialization_and_destruction_0(int, int)>:
c0009554:	83 ec 0c             	sub    esp,0xc
c0009557:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000955c:	75 34                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c000955e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0009566:	75 2a                	jne    c0009592 <__static_initialization_and_destruction_0(int, int)+0x3e>
c0009568:	83 ec 0c             	sub    esp,0xc
c000956b:	68 98 5f 02 c0       	push   0xc0025f98
c0009570:	e8 e1 5e 01 00       	call   c001f456 <LinkedList<UnixFile>::LinkedList()>
c0009575:	83 c4 10             	add    esp,0x10
c0009578:	83 ec 04             	sub    esp,0x4
c000957b:	68 90 2f 02 c0       	push   0xc0022f90
c0009580:	68 98 5f 02 c0       	push   0xc0025f98
c0009585:	68 54 f4 01 c0       	push   0xc001f454
c000958a:	e8 39 12 00 00       	call   c000a7c8 <__cxa_atexit>
c000958f:	83 c4 10             	add    esp,0x10
c0009592:	90                   	nop
c0009593:	83 c4 0c             	add    esp,0xc
c0009596:	c3                   	ret    

c0009597 <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c0009597:	83 ec 0c             	sub    esp,0xc
c000959a:	83 ec 08             	sub    esp,0x8
c000959d:	68 ff ff 00 00       	push   0xffff
c00095a2:	6a 01                	push   0x1
c00095a4:	e8 ab ff ff ff       	call   c0009554 <__static_initialization_and_destruction_0(int, int)>
c00095a9:	83 c4 10             	add    esp,0x10
c00095ac:	83 c4 0c             	add    esp,0xc
c00095af:	c3                   	ret    

c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00095b0:	53                   	push   ebx
c00095b1:	8b 15 08 30 02 c0    	mov    edx,DWORD PTR ds:0xc0023008
c00095b7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00095bb:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00095bf:	8d 98 00 80 f3 ff    	lea    ebx,[eax-0xc8000]
c00095c5:	89 d8                	mov    eax,ebx
c00095c7:	d1 e8                	shr    eax,1
c00095c9:	01 d0                	add    eax,edx
c00095cb:	80 e3 01             	and    bl,0x1
c00095ce:	8a 10                	mov    dl,BYTE PTR [eax]
c00095d0:	75 09                	jne    c00095db <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x2b>
c00095d2:	83 e2 f0             	and    edx,0xfffffff0
c00095d5:	09 ca                	or     edx,ecx
c00095d7:	88 10                	mov    BYTE PTR [eax],dl
c00095d9:	5b                   	pop    ebx
c00095da:	c3                   	ret    
c00095db:	83 e2 0f             	and    edx,0xf
c00095de:	0f b6 c9             	movzx  ecx,cl
c00095e1:	c1 e1 04             	shl    ecx,0x4
c00095e4:	09 ca                	or     edx,ecx
c00095e6:	88 10                	mov    BYTE PTR [eax],dl
c00095e8:	5b                   	pop    ebx
c00095e9:	c3                   	ret    

c00095ea <Virt::getPageState(unsigned long)>:
c00095ea:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00095ee:	8b 0d 08 30 02 c0    	mov    ecx,DWORD PTR ds:0xc0023008
c00095f4:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c00095fa:	89 d0                	mov    eax,edx
c00095fc:	d1 e8                	shr    eax,1
c00095fe:	80 e2 01             	and    dl,0x1
c0009601:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0009604:	74 03                	je     c0009609 <Virt::getPageState(unsigned long)+0x1f>
c0009606:	c1 e8 04             	shr    eax,0x4
c0009609:	83 e0 0f             	and    eax,0xf
c000960c:	c3                   	ret    

c000960d <Virt::allocateKernelVirtualPages(int)>:
c000960d:	55                   	push   ebp
c000960e:	31 ed                	xor    ebp,ebp
c0009610:	57                   	push   edi
c0009611:	31 ff                	xor    edi,edi
c0009613:	56                   	push   esi
c0009614:	53                   	push   ebx
c0009615:	31 db                	xor    ebx,ebx
c0009617:	83 ec 0c             	sub    esp,0xc
c000961a:	8b 35 04 30 02 c0    	mov    esi,DWORD PTR ds:0xc0023004
c0009620:	56                   	push   esi
c0009621:	e8 c4 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009626:	5a                   	pop    edx
c0009627:	84 c0                	test   al,al
c0009629:	75 41                	jne    c000966c <Virt::allocateKernelVirtualPages(int)+0x5f>
c000962b:	85 db                	test   ebx,ebx
c000962d:	75 02                	jne    c0009631 <Virt::allocateKernelVirtualPages(int)+0x24>
c000962f:	89 f5                	mov    ebp,esi
c0009631:	83 c3 01             	add    ebx,0x1
c0009634:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0009638:	74 5f                	je     c0009699 <Virt::allocateKernelVirtualPages(int)+0x8c>
c000963a:	83 c6 01             	add    esi,0x1
c000963d:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009643:	76 34                	jbe    c0009679 <Virt::allocateKernelVirtualPages(int)+0x6c>
c0009645:	c7 05 04 30 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc0023004,0xc8000
c000964f:	f7 c7 01 00 00 00    	test   edi,0x1
c0009655:	75 2a                	jne    c0009681 <Virt::allocateKernelVirtualPages(int)+0x74>
c0009657:	be 00 80 0c 00       	mov    esi,0xc8000
c000965c:	bf 01 00 00 00       	mov    edi,0x1
c0009661:	56                   	push   esi
c0009662:	e8 83 ff ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009667:	5a                   	pop    edx
c0009668:	84 c0                	test   al,al
c000966a:	74 bf                	je     c000962b <Virt::allocateKernelVirtualPages(int)+0x1e>
c000966c:	31 db                	xor    ebx,ebx
c000966e:	83 c6 01             	add    esi,0x1
c0009671:	81 fe ff ff 0e 00    	cmp    esi,0xeffff
c0009677:	77 cc                	ja     c0009645 <Virt::allocateKernelVirtualPages(int)+0x38>
c0009679:	89 35 04 30 02 c0    	mov    DWORD PTR ds:0xc0023004,esi
c000967f:	eb 9f                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009681:	83 ec 0c             	sub    esp,0xc
c0009684:	68 ec 09 02 c0       	push   0xc00209ec
c0009689:	e8 eb 7b 00 00       	call   c0011279 <KePanic(char const*)>
c000968e:	8b 35 04 30 02 c0    	mov    esi,DWORD PTR ds:0xc0023004
c0009694:	83 c4 10             	add    esp,0x10
c0009697:	eb 87                	jmp    c0009620 <Virt::allocateKernelVirtualPages(int)+0x13>
c0009699:	89 2d 04 30 02 c0    	mov    DWORD PTR ds:0xc0023004,ebp
c000969f:	83 fb 01             	cmp    ebx,0x1
c00096a2:	74 6f                	je     c0009713 <Virt::allocateKernelVirtualPages(int)+0x106>
c00096a4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096a8:	85 c9                	test   ecx,ecx
c00096aa:	74 49                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096ac:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00096b0:	89 e8                	mov    eax,ebp
c00096b2:	31 db                	xor    ebx,ebx
c00096b4:	8d 79 ff             	lea    edi,[ecx-0x1]
c00096b7:	eb 18                	jmp    c00096d1 <Virt::allocateKernelVirtualPages(int)+0xc4>
c00096b9:	6a 01                	push   0x1
c00096bb:	83 c3 01             	add    ebx,0x1
c00096be:	50                   	push   eax
c00096bf:	e8 ec fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096c4:	58                   	pop    eax
c00096c5:	5a                   	pop    edx
c00096c6:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096ca:	74 29                	je     c00096f5 <Virt::allocateKernelVirtualPages(int)+0xe8>
c00096cc:	a1 04 30 02 c0       	mov    eax,ds:0xc0023004
c00096d1:	8d 50 01             	lea    edx,[eax+0x1]
c00096d4:	85 db                	test   ebx,ebx
c00096d6:	89 15 04 30 02 c0    	mov    DWORD PTR ds:0xc0023004,edx
c00096dc:	74 24                	je     c0009702 <Virt::allocateKernelVirtualPages(int)+0xf5>
c00096de:	39 df                	cmp    edi,ebx
c00096e0:	75 d7                	jne    c00096b9 <Virt::allocateKernelVirtualPages(int)+0xac>
c00096e2:	6a 03                	push   0x3
c00096e4:	83 c3 01             	add    ebx,0x1
c00096e7:	50                   	push   eax
c00096e8:	e8 c3 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00096ed:	59                   	pop    ecx
c00096ee:	5e                   	pop    esi
c00096ef:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c00096f3:	75 d7                	jne    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c00096f5:	83 c4 0c             	add    esp,0xc
c00096f8:	89 e8                	mov    eax,ebp
c00096fa:	5b                   	pop    ebx
c00096fb:	c1 e0 0c             	shl    eax,0xc
c00096fe:	5e                   	pop    esi
c00096ff:	5f                   	pop    edi
c0009700:	5d                   	pop    ebp
c0009701:	c3                   	ret    
c0009702:	6a 02                	push   0x2
c0009704:	bb 01 00 00 00       	mov    ebx,0x1
c0009709:	50                   	push   eax
c000970a:	e8 a1 fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c000970f:	58                   	pop    eax
c0009710:	5a                   	pop    edx
c0009711:	eb b9                	jmp    c00096cc <Virt::allocateKernelVirtualPages(int)+0xbf>
c0009713:	6a 04                	push   0x4
c0009715:	8d 45 01             	lea    eax,[ebp+0x1]
c0009718:	55                   	push   ebp
c0009719:	a3 04 30 02 c0       	mov    ds:0xc0023004,eax
c000971e:	e8 8d fe ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009723:	5b                   	pop    ebx
c0009724:	89 e8                	mov    eax,ebp
c0009726:	5e                   	pop    esi
c0009727:	c1 e0 0c             	shl    eax,0xc
c000972a:	83 c4 0c             	add    esp,0xc
c000972d:	5b                   	pop    ebx
c000972e:	5e                   	pop    esi
c000972f:	5f                   	pop    edi
c0009730:	5d                   	pop    ebp
c0009731:	c3                   	ret    

c0009732 <Virt::freeSwapfilePage(unsigned long)>:
c0009732:	53                   	push   ebx
c0009733:	8b 15 ac 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fac
c0009739:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000973d:	b8 01 00 00 00       	mov    eax,0x1
c0009742:	89 cb                	mov    ebx,ecx
c0009744:	d3 e0                	shl    eax,cl
c0009746:	c1 eb 05             	shr    ebx,0x5
c0009749:	f7 d0                	not    eax
c000974b:	8b 0c 9a             	mov    ecx,DWORD PTR [edx+ebx*4]
c000974e:	21 c1                	and    ecx,eax
c0009750:	89 0c 9a             	mov    DWORD PTR [edx+ebx*4],ecx
c0009753:	5b                   	pop    ebx
c0009754:	c3                   	ret    

c0009755 <Virt::swapIDToSector(unsigned long)>:
c0009755:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009759:	8b 15 0c 30 02 c0    	mov    edx,DWORD PTR ds:0xc002300c
c000975f:	8b 0d 14 30 02 c0    	mov    ecx,DWORD PTR ds:0xc0023014
c0009765:	0f af c2             	imul   eax,edx
c0009768:	01 c8                	add    eax,ecx
c000976a:	c3                   	ret    

c000976b <Virt::allocateSwapfilePage()>:
c000976b:	55                   	push   ebp
c000976c:	31 d2                	xor    edx,edx
c000976e:	57                   	push   edi
c000976f:	56                   	push   esi
c0009770:	53                   	push   ebx
c0009771:	83 ec 0c             	sub    esp,0xc
c0009774:	8b 0d 0c 30 02 c0    	mov    ecx,DWORD PTR ds:0xc002300c
c000977a:	a1 10 30 02 c0       	mov    eax,ds:0xc0023010
c000977f:	f7 f1                	div    ecx
c0009781:	39 0d 10 30 02 c0    	cmp    DWORD PTR ds:0xc0023010,ecx
c0009787:	72 2f                	jb     c00097b8 <Virt::allocateSwapfilePage()+0x4d>
c0009789:	8b 35 ac 5f 02 c0    	mov    esi,DWORD PTR ds:0xc0025fac
c000978f:	8b 16                	mov    edx,DWORD PTR [esi]
c0009791:	f6 c2 01             	test   dl,0x1
c0009794:	74 3e                	je     c00097d4 <Virt::allocateSwapfilePage()+0x69>
c0009796:	31 c9                	xor    ecx,ecx
c0009798:	bf 01 00 00 00       	mov    edi,0x1
c000979d:	eb 12                	jmp    c00097b1 <Virt::allocateSwapfilePage()+0x46>
c000979f:	89 fd                	mov    ebp,edi
c00097a1:	89 ca                	mov    edx,ecx
c00097a3:	d3 e5                	shl    ebp,cl
c00097a5:	c1 ea 05             	shr    edx,0x5
c00097a8:	8d 1c 96             	lea    ebx,[esi+edx*4]
c00097ab:	8b 13                	mov    edx,DWORD PTR [ebx]
c00097ad:	85 ea                	test   edx,ebp
c00097af:	74 2c                	je     c00097dd <Virt::allocateSwapfilePage()+0x72>
c00097b1:	83 c1 01             	add    ecx,0x1
c00097b4:	39 c8                	cmp    eax,ecx
c00097b6:	77 e7                	ja     c000979f <Virt::allocateSwapfilePage()+0x34>
c00097b8:	83 ec 0c             	sub    esp,0xc
c00097bb:	68 80 0c 02 c0       	push   0xc0020c80
c00097c0:	e8 b4 7a 00 00       	call   c0011279 <KePanic(char const*)>
c00097c5:	83 c4 10             	add    esp,0x10
c00097c8:	31 c9                	xor    ecx,ecx
c00097ca:	83 c4 0c             	add    esp,0xc
c00097cd:	89 c8                	mov    eax,ecx
c00097cf:	5b                   	pop    ebx
c00097d0:	5e                   	pop    esi
c00097d1:	5f                   	pop    edi
c00097d2:	5d                   	pop    ebp
c00097d3:	c3                   	ret    
c00097d4:	89 f3                	mov    ebx,esi
c00097d6:	bd 01 00 00 00       	mov    ebp,0x1
c00097db:	31 c9                	xor    ecx,ecx
c00097dd:	09 ea                	or     edx,ebp
c00097df:	89 c8                	mov    eax,ecx
c00097e1:	89 13                	mov    DWORD PTR [ebx],edx
c00097e3:	83 c4 0c             	add    esp,0xc
c00097e6:	5b                   	pop    ebx
c00097e7:	5e                   	pop    esi
c00097e8:	5f                   	pop    edi
c00097e9:	5d                   	pop    ebp
c00097ea:	c3                   	ret    

c00097eb <Virt::virtualMemorySetup()>:
c00097eb:	53                   	push   ebx
c00097ec:	bb 00 80 0c 00       	mov    ebx,0xc8000
c00097f1:	6a 0f                	push   0xf
c00097f3:	53                   	push   ebx
c00097f4:	83 c3 01             	add    ebx,0x1
c00097f7:	e8 b4 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c00097fc:	58                   	pop    eax
c00097fd:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0009803:	5a                   	pop    edx
c0009804:	75 eb                	jne    c00097f1 <Virt::virtualMemorySetup()+0x6>
c0009806:	bb 00 80 0c 00       	mov    ebx,0xc8000
c000980b:	6a 00                	push   0x0
c000980d:	53                   	push   ebx
c000980e:	83 c3 01             	add    ebx,0x1
c0009811:	e8 9a fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009816:	59                   	pop    ecx
c0009817:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c000981d:	58                   	pop    eax
c000981e:	75 eb                	jne    c000980b <Virt::virtualMemorySetup()+0x20>
c0009820:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0009825:	6a 0f                	push   0xf
c0009827:	53                   	push   ebx
c0009828:	83 c3 01             	add    ebx,0x1
c000982b:	e8 80 fd ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009830:	58                   	pop    eax
c0009831:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0009837:	5a                   	pop    edx
c0009838:	75 eb                	jne    c0009825 <Virt::virtualMemorySetup()+0x3a>
c000983a:	5b                   	pop    ebx
c000983b:	c3                   	ret    

c000983c <Virt::setupPageSwapping(int)>:
c000983c:	53                   	push   ebx
c000983d:	83 ec 0c             	sub    esp,0xc
c0009840:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0009844:	a1 88 88 02 c0       	mov    eax,ds:0xc0028888
c0009849:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000984f:	8b 10                	mov    edx,DWORD PTR [eax]
c0009851:	53                   	push   ebx
c0009852:	c1 e3 0b             	shl    ebx,0xb
c0009855:	68 97 0c 02 c0       	push   0xc0020c97
c000985a:	50                   	push   eax
c000985b:	ff 52 60             	call   DWORD PTR [edx+0x60]
c000985e:	89 1d 10 30 02 c0    	mov    DWORD PTR ds:0xc0023010,ebx
c0009864:	c6 05 18 30 02 c0 43 	mov    BYTE PTR ds:0xc0023018,0x43
c000986b:	c1 eb 08             	shr    ebx,0x8
c000986e:	a3 14 30 02 c0       	mov    ds:0xc0023014,eax
c0009873:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0009876:	c7 05 0c 30 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002300c,0x8
c0009880:	e8 31 e2 ff ff       	call   c0007ab6 <malloc>
c0009885:	83 c4 0c             	add    esp,0xc
c0009888:	89 c1                	mov    ecx,eax
c000988a:	a3 ac 5f 02 c0       	mov    ds:0xc0025fac,eax
c000988f:	31 d2                	xor    edx,edx
c0009891:	a1 10 30 02 c0       	mov    eax,ds:0xc0023010
c0009896:	f7 35 0c 30 02 c0    	div    DWORD PTR ds:0xc002300c
c000989c:	c1 e8 05             	shr    eax,0x5
c000989f:	50                   	push   eax
c00098a0:	6a 00                	push   0x0
c00098a2:	51                   	push   ecx
c00098a3:	e8 48 6c ff ff       	call   c00004f0 <memset>
c00098a8:	83 c4 18             	add    esp,0x18
c00098ab:	5b                   	pop    ebx
c00098ac:	c3                   	ret    
c00098ad:	90                   	nop

c00098ae <VAS::setCPUSpecific(unsigned long)>:
c00098ae:	c3                   	ret    
c00098af:	90                   	nop

c00098b0 <VAS::VAS(VAS*)>:
c00098b0:	83 ec 0c             	sub    esp,0xc
c00098b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098b7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00098be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00098c2:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00098c9:	83 ec 0c             	sub    esp,0xc
c00098cc:	68 0c 0a 02 c0       	push   0xc0020a0c
c00098d1:	e8 a3 79 00 00       	call   c0011279 <KePanic(char const*)>
c00098d6:	83 c4 10             	add    esp,0x10
c00098d9:	90                   	nop
c00098da:	83 c4 0c             	add    esp,0xc
c00098dd:	c3                   	ret    

c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c00098de:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00098e2:	0f b6 4c 24 08       	movzx  ecx,BYTE PTR [esp+0x8]
c00098e7:	89 c2                	mov    edx,eax
c00098e9:	c1 e8 0a             	shr    eax,0xa
c00098ec:	c1 ea 16             	shr    edx,0x16
c00098ef:	83 f9 01             	cmp    ecx,0x1
c00098f2:	19 c9                	sbb    ecx,ecx
c00098f4:	c1 e2 0c             	shl    edx,0xc
c00098f7:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c00098fd:	25 fc 0f 00 00       	and    eax,0xffc
c0009902:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0009909:	01 d0                	add    eax,edx
c000990b:	c3                   	ret    

c000990c <VAS::getPageTableEntry(unsigned long)>:
c000990c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009910:	89 ca                	mov    edx,ecx
c0009912:	c1 e9 0a             	shr    ecx,0xa
c0009915:	c1 ea 16             	shr    edx,0x16
c0009918:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c000991e:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0009924:	c1 e0 0c             	shl    eax,0xc
c0009927:	8d 04 08             	lea    eax,[eax+ecx*1]
c000992a:	c3                   	ret    

c000992b <Virt::freeKernelVirtualPages(unsigned long)>:
c000992b:	55                   	push   ebp
c000992c:	57                   	push   edi
c000992d:	bf 01 00 00 00       	mov    edi,0x1
c0009932:	56                   	push   esi
c0009933:	53                   	push   ebx
c0009934:	83 ec 1c             	sub    esp,0x1c
c0009937:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000993b:	c1 ee 0c             	shr    esi,0xc
c000993e:	eb 48                	jmp    c0009988 <Virt::freeKernelVirtualPages(unsigned long)+0x5d>
c0009940:	83 ec 08             	sub    esp,0x8
c0009943:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0009948:	55                   	push   ebp
c0009949:	50                   	push   eax
c000994a:	e8 bd ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000994f:	83 c4 10             	add    esp,0x10
c0009952:	8b 10                	mov    edx,DWORD PTR [eax]
c0009954:	f6 c6 04             	test   dh,0x4
c0009957:	75 70                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c0009959:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000995f:	83 fb 04             	cmp    ebx,0x4
c0009962:	0f 84 8a 00 00 00    	je     c00099f2 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0009968:	83 fb 02             	cmp    ebx,0x2
c000996b:	0f 84 9a 00 00 00    	je     c0009a0b <Virt::freeKernelVirtualPages(unsigned long)+0xe0>
c0009971:	83 fb 03             	cmp    ebx,0x3
c0009974:	0f 84 be 00 00 00    	je     c0009a38 <Virt::freeKernelVirtualPages(unsigned long)+0x10d>
c000997a:	83 fb 01             	cmp    ebx,0x1
c000997d:	0f 84 a2 00 00 00    	je     c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009983:	83 c6 01             	add    esi,0x1
c0009986:	31 ff                	xor    edi,edi
c0009988:	56                   	push   esi
c0009989:	89 f5                	mov    ebp,esi
c000998b:	e8 5a fc ff ff       	call   c00095ea <Virt::getPageState(unsigned long)>
c0009990:	c1 e5 0c             	shl    ebp,0xc
c0009993:	0f b6 d8             	movzx  ebx,al
c0009996:	5a                   	pop    edx
c0009997:	85 db                	test   ebx,ebx
c0009999:	75 a5                	jne    c0009940 <Virt::freeKernelVirtualPages(unsigned long)+0x15>
c000999b:	83 ec 0c             	sub    esp,0xc
c000999e:	68 ae 0c 02 c0       	push   0xc0020cae
c00099a3:	e8 d1 78 00 00       	call   c0011279 <KePanic(char const*)>
c00099a8:	5a                   	pop    edx
c00099a9:	59                   	pop    ecx
c00099aa:	55                   	push   ebp
c00099ab:	8b 2d b0 5f 02 c0    	mov    ebp,DWORD PTR ds:0xc0025fb0
c00099b1:	55                   	push   ebp
c00099b2:	e8 55 ff ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c00099b7:	83 c4 10             	add    esp,0x10
c00099ba:	8b 10                	mov    edx,DWORD PTR [eax]
c00099bc:	f6 c6 04             	test   dh,0x4
c00099bf:	75 08                	jne    c00099c9 <Virt::freeKernelVirtualPages(unsigned long)+0x9e>
c00099c1:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099c7:	eb ba                	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c00099c9:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00099cd:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c00099d3:	83 ec 0c             	sub    esp,0xc
c00099d6:	52                   	push   edx
c00099d7:	e8 7a e3 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00099dc:	83 c4 10             	add    esp,0x10
c00099df:	83 fb 04             	cmp    ebx,0x4
c00099e2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00099e6:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00099ec:	0f 85 76 ff ff ff    	jne    c0009968 <Virt::freeKernelVirtualPages(unsigned long)+0x3d>
c00099f2:	83 e7 01             	and    edi,0x1
c00099f5:	75 46                	jne    c0009a3d <Virt::freeKernelVirtualPages(unsigned long)+0x112>
c00099f7:	c7 44 24 30 30 0a 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020a30
c00099ff:	83 c4 1c             	add    esp,0x1c
c0009a02:	5b                   	pop    ebx
c0009a03:	5e                   	pop    esi
c0009a04:	5f                   	pop    edi
c0009a05:	5d                   	pop    ebp
c0009a06:	e9 6e 78 00 00       	jmp    c0011279 <KePanic(char const*)>
c0009a0b:	83 e7 01             	and    edi,0x1
c0009a0e:	75 15                	jne    c0009a25 <Virt::freeKernelVirtualPages(unsigned long)+0xfa>
c0009a10:	83 ec 0c             	sub    esp,0xc
c0009a13:	68 ca 0c 02 c0       	push   0xc0020cca
c0009a18:	e8 5c 78 00 00       	call   c0011279 <KePanic(char const*)>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	e9 5e ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a25:	83 ec 08             	sub    esp,0x8
c0009a28:	6a 00                	push   0x0
c0009a2a:	56                   	push   esi
c0009a2b:	e8 80 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a30:	83 c4 10             	add    esp,0x10
c0009a33:	e9 4b ff ff ff       	jmp    c0009983 <Virt::freeKernelVirtualPages(unsigned long)+0x58>
c0009a38:	83 e7 01             	and    edi,0x1
c0009a3b:	75 16                	jne    c0009a53 <Virt::freeKernelVirtualPages(unsigned long)+0x128>
c0009a3d:	83 ec 08             	sub    esp,0x8
c0009a40:	6a 00                	push   0x0
c0009a42:	56                   	push   esi
c0009a43:	e8 68 fb ff ff       	call   c00095b0 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0009a48:	83 c4 10             	add    esp,0x10
c0009a4b:	83 c4 1c             	add    esp,0x1c
c0009a4e:	5b                   	pop    ebx
c0009a4f:	5e                   	pop    esi
c0009a50:	5f                   	pop    edi
c0009a51:	5d                   	pop    ebp
c0009a52:	c3                   	ret    
c0009a53:	c7 44 24 30 e6 0c 02 c0 	mov    DWORD PTR [esp+0x30],0xc0020ce6
c0009a5b:	83 c4 1c             	add    esp,0x1c
c0009a5e:	5b                   	pop    ebx
c0009a5f:	5e                   	pop    esi
c0009a60:	5f                   	pop    edi
c0009a61:	5d                   	pop    ebp
c0009a62:	e9 12 78 00 00       	jmp    c0011279 <KePanic(char const*)>
c0009a67:	90                   	nop

c0009a68 <VAS::freeAllocatedPages(unsigned long)>:
c0009a68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009a6c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a70:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0009a74:	74 09                	je     c0009a7f <VAS::freeAllocatedPages(unsigned long)+0x17>
c0009a76:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009a7a:	e9 ac fe ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009a7f:	c7 44 24 04 54 0a 02 c0 	mov    DWORD PTR [esp+0x4],0xc0020a54
c0009a87:	e9 b9 0e 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c0009a8c <VAS::virtualToPhysical(unsigned long)>:
c0009a8c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009a90:	50                   	push   eax
c0009a91:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009a95:	52                   	push   edx
c0009a96:	e8 71 fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009a9b:	59                   	pop    ecx
c0009a9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0009a9e:	5a                   	pop    edx
c0009a9f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009aa4:	c3                   	ret    
c0009aa5:	90                   	nop

c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>:
c0009aa6:	55                   	push   ebp
c0009aa7:	57                   	push   edi
c0009aa8:	56                   	push   esi
c0009aa9:	53                   	push   ebx
c0009aaa:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0009aae:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0009ab2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0009ab6:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009aba:	85 db                	test   ebx,ebx
c0009abc:	7e 24                	jle    c0009ae2 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x3c>
c0009abe:	c1 e3 0c             	shl    ebx,0xc
c0009ac1:	01 f3                	add    ebx,esi
c0009ac3:	56                   	push   esi
c0009ac4:	81 c6 00 10 00 00    	add    esi,0x1000
c0009aca:	55                   	push   ebp
c0009acb:	e8 3c fe ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c0009ad0:	5a                   	pop    edx
c0009ad1:	59                   	pop    ecx
c0009ad2:	8b 08                	mov    ecx,DWORD PTR [eax]
c0009ad4:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009ad8:	21 f9                	and    ecx,edi
c0009ada:	09 d1                	or     ecx,edx
c0009adc:	39 f3                	cmp    ebx,esi
c0009ade:	89 08                	mov    DWORD PTR [eax],ecx
c0009ae0:	75 e1                	jne    c0009ac3 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)+0x1d>
c0009ae2:	5b                   	pop    ebx
c0009ae3:	5e                   	pop    esi
c0009ae4:	5f                   	pop    edi
c0009ae5:	5d                   	pop    ebp
c0009ae6:	c3                   	ret    
c0009ae7:	90                   	nop

c0009ae8 <VAS::VAS()>:
c0009ae8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009aec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0009af3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009af7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0009afe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b02:	a3 b0 5f 02 c0       	mov    ds:0xc0025fb0,eax
c0009b07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b0b:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0009b0f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b13:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0009b16:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b1a:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0009b21:	ba 7d 40 02 c0       	mov    edx,0xc002407d
c0009b26:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b2b:	29 c2                	sub    edx,eax
c0009b2d:	89 d0                	mov    eax,edx
c0009b2f:	05 ff 0f 00 00       	add    eax,0xfff
c0009b34:	c1 e8 0c             	shr    eax,0xc
c0009b37:	89 c2                	mov    edx,eax
c0009b39:	b8 00 40 02 c0       	mov    eax,0xc0024000
c0009b3e:	6a 04                	push   0x4
c0009b40:	6a ff                	push   0xffffffff
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	e8 59 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b4d:	83 c4 14             	add    esp,0x14
c0009b50:	90                   	nop
c0009b51:	c3                   	ret    

c0009b52 <VAS::setToWriteCombining(unsigned long, int)>:
c0009b52:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009b57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009b5d:	f6 80 8c 11 00 00 20 	test   BYTE PTR [eax+0x118c],0x20
c0009b64:	75 01                	jne    c0009b67 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c0009b66:	c3                   	ret    
c0009b67:	68 80 00 00 00       	push   0x80
c0009b6c:	6a ff                	push   0xffffffff
c0009b6e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009b72:	50                   	push   eax
c0009b73:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0009b77:	52                   	push   edx
c0009b78:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0009b7c:	51                   	push   ecx
c0009b7d:	e8 24 ff ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c0009b82:	83 c4 14             	add    esp,0x14
c0009b85:	c3                   	ret    

c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>:
c0009b86:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009b8a:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0009b8d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009b91:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c0009b94:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0009b99:	83 f8 01             	cmp    eax,0x1
c0009b9c:	19 c0                	sbb    eax,eax
c0009b9e:	83 ca 03             	or     edx,0x3
c0009ba1:	83 e0 fc             	and    eax,0xfffffffc
c0009ba4:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c0009bab:	0f 20 d8             	mov    eax,cr3
c0009bae:	0f 22 d8             	mov    cr3,eax
c0009bb1:	c3                   	ret    

c0009bb2 <VAS::~VAS()>:
c0009bb2:	83 ec 2c             	sub    esp,0x2c
c0009bb5:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0009bbd:	fa                   	cli    
c0009bbe:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009bc3:	83 c0 01             	add    eax,0x1
c0009bc6:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009bcb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009bd0:	8b 00                	mov    eax,DWORD PTR [eax]
c0009bd2:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009bd5:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009bdb:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0009bdf:	6a 01                	push   0x1
c0009be1:	50                   	push   eax
c0009be2:	e8 9f ff ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0009be7:	83 c4 0c             	add    esp,0xc
c0009bea:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0009bf2:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0009bfa:	0f 8f d8 00 00 00    	jg     c0009cd8 <VAS::~VAS()+0x126>
c0009c00:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009c04:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009c07:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0009c0b:	c1 e2 02             	shl    edx,0x2
c0009c0e:	01 d0                	add    eax,edx
c0009c10:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009c16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009c1a:	83 e0 01             	and    eax,0x1
c0009c1d:	0f 84 ab 00 00 00    	je     c0009cce <VAS::~VAS()+0x11c>
c0009c23:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009c2b:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c0009c33:	7f 74                	jg     c0009ca9 <VAS::~VAS()+0xf7>
c0009c35:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009c39:	c1 e0 0a             	shl    eax,0xa
c0009c3c:	89 c2                	mov    edx,eax
c0009c3e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0009c42:	01 d0                	add    eax,edx
c0009c44:	c1 e0 0c             	shl    eax,0xc
c0009c47:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009c4b:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0009c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c52:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0009c55:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0009c5b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009c5f:	6a 01                	push   0x1
c0009c61:	50                   	push   eax
c0009c62:	e8 77 fc ff ff       	call   c00098de <VAS::getForeignPageTableEntry(bool, unsigned long)>
c0009c67:	83 c4 0c             	add    esp,0xc
c0009c6a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009c6e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0009c72:	8b 00                	mov    eax,DWORD PTR [eax]
c0009c74:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0009c78:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c7c:	25 01 04 00 00       	and    eax,0x401
c0009c81:	3d 01 04 00 00       	cmp    eax,0x401
c0009c86:	75 1a                	jne    c0009ca2 <VAS::~VAS()+0xf0>
c0009c88:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0009c8c:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009c91:	83 ec 0c             	sub    esp,0xc
c0009c94:	50                   	push   eax
c0009c95:	e8 bc e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009c9a:	83 c4 10             	add    esp,0x10
c0009c9d:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009ca2:	83 44 24 14 01       	add    DWORD PTR [esp+0x14],0x1
c0009ca7:	eb 82                	jmp    c0009c2b <VAS::~VAS()+0x79>
c0009ca9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cad:	25 00 04 00 00       	and    eax,0x400
c0009cb2:	74 1a                	je     c0009cce <VAS::~VAS()+0x11c>
c0009cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009cb8:	25 00 f0 ff ff       	and    eax,0xfffff000
c0009cbd:	83 ec 0c             	sub    esp,0xc
c0009cc0:	50                   	push   eax
c0009cc1:	e8 90 e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cc6:	83 c4 10             	add    esp,0x10
c0009cc9:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009cce:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c0009cd3:	e9 1a ff ff ff       	jmp    c0009bf2 <VAS::~VAS()+0x40>
c0009cd8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cdc:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0009cdf:	83 ec 0c             	sub    esp,0xc
c0009ce2:	50                   	push   eax
c0009ce3:	e8 43 fc ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009ce8:	83 c4 10             	add    esp,0x10
c0009ceb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0009cef:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0009cf2:	83 ec 0c             	sub    esp,0xc
c0009cf5:	50                   	push   eax
c0009cf6:	e8 5b e0 ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c0009cfb:	83 c4 10             	add    esp,0x10
c0009cfe:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c0009d03:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009d08:	83 e8 01             	sub    eax,0x1
c0009d0b:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0009d10:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0009d15:	85 c0                	test   eax,eax
c0009d17:	75 01                	jne    c0009d1a <VAS::~VAS()+0x168>
c0009d19:	fb                   	sti    
c0009d1a:	90                   	nop
c0009d1b:	83 c4 2c             	add    esp,0x2c
c0009d1e:	c3                   	ret    
c0009d1f:	90                   	nop

c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0009d20:	55                   	push   ebp
c0009d21:	57                   	push   edi
c0009d22:	56                   	push   esi
c0009d23:	53                   	push   ebx
c0009d24:	83 ec 1c             	sub    esp,0x1c
c0009d27:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0009d2b:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0009d2f:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c0009d35:	77 08                	ja     c0009d3f <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c0009d37:	0f 20 d8             	mov    eax,cr3
c0009d3a:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0009d3d:	75 49                	jne    c0009d88 <VAS::mapPage(unsigned long, unsigned long, int)+0x68>
c0009d3f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d43:	09 d8                	or     eax,ebx
c0009d45:	a9 ff 0f 00 00       	test   eax,0xfff
c0009d4a:	75 59                	jne    c0009da5 <VAS::mapPage(unsigned long, unsigned long, int)+0x85>
c0009d4c:	89 de                	mov    esi,ebx
c0009d4e:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009d51:	c1 ee 16             	shr    esi,0x16
c0009d54:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c0009d5b:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c0009d5f:	74 56                	je     c0009db7 <VAS::mapPage(unsigned long, unsigned long, int)+0x97>
c0009d61:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0009d65:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009d69:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c0009d6f:	c1 eb 0a             	shr    ebx,0xa
c0009d72:	c1 e6 0c             	shl    esi,0xc
c0009d75:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c0009d7b:	09 d0                	or     eax,edx
c0009d7d:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c0009d80:	83 c4 1c             	add    esp,0x1c
c0009d83:	5b                   	pop    ebx
c0009d84:	5e                   	pop    esi
c0009d85:	5f                   	pop    edi
c0009d86:	5d                   	pop    ebp
c0009d87:	c3                   	ret    
c0009d88:	83 ec 0c             	sub    esp,0xc
c0009d8b:	68 78 0a 02 c0       	push   0xc0020a78
c0009d90:	e8 b0 0b 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0009d95:	83 c4 10             	add    esp,0x10
c0009d98:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0009d9c:	09 d8                	or     eax,ebx
c0009d9e:	a9 ff 0f 00 00       	test   eax,0xfff
c0009da3:	74 a7                	je     c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009da5:	83 ec 0c             	sub    esp,0xc
c0009da8:	68 e0 0a 02 c0       	push   0xc0020ae0
c0009dad:	e8 c7 74 00 00       	call   c0011279 <KePanic(char const*)>
c0009db2:	83 c4 10             	add    esp,0x10
c0009db5:	eb 95                	jmp    c0009d4c <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c0009db7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009dbb:	e8 ff df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009dc0:	83 ec 0c             	sub    esp,0xc
c0009dc3:	89 c5                	mov    ebp,eax
c0009dc5:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c0009dcb:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0009dcf:	6a 01                	push   0x1
c0009dd1:	e8 37 f8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009dd6:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0009ddd:	6a 01                	push   0x1
c0009ddf:	50                   	push   eax
c0009de0:	55                   	push   ebp
c0009de1:	81 cd 07 04 00 00    	or     ebp,0x407
c0009de7:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0009deb:	51                   	push   ecx
c0009dec:	e8 29 01 00 00       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0009df1:	83 c4 1c             	add    esp,0x1c
c0009df4:	68 00 10 00 00       	push   0x1000
c0009df9:	6a 00                	push   0x0
c0009dfb:	50                   	push   eax
c0009dfc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009e00:	e8 eb 66 ff ff       	call   c00004f0 <memset>
c0009e05:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0009e09:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009e0c:	e8 1a fb ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c0009e11:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0009e15:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0009e18:	83 c4 10             	add    esp,0x10
c0009e1b:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0009e1e:	e9 3e ff ff ff       	jmp    c0009d61 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0009e23:	90                   	nop

c0009e24 <VAS::allocatePages(int, int)>:
c0009e24:	55                   	push   ebp
c0009e25:	57                   	push   edi
c0009e26:	56                   	push   esi
c0009e27:	53                   	push   ebx
c0009e28:	83 ec 1c             	sub    esp,0x1c
c0009e2b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0009e2f:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0009e33:	80 7e 01 00          	cmp    BYTE PTR [esi+0x1],0x0
c0009e37:	75 71                	jne    c0009eaa <VAS::allocatePages(int, int)+0x86>
c0009e39:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009e3c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009e40:	85 c0                	test   eax,eax
c0009e42:	74 4d                	je     c0009e91 <VAS::allocatePages(int, int)+0x6d>
c0009e44:	89 dd                	mov    ebp,ebx
c0009e46:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e4a:	c1 e5 0c             	shl    ebp,0xc
c0009e4d:	01 c5                	add    ebp,eax
c0009e4f:	85 db                	test   ebx,ebx
c0009e51:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c0009e54:	7e 29                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009e56:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009e5a:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0009e5e:	81 cf 00 04 00 00    	or     edi,0x400
c0009e64:	e8 56 df ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009e69:	57                   	push   edi
c0009e6a:	53                   	push   ebx
c0009e6b:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009e71:	50                   	push   eax
c0009e72:	56                   	push   esi
c0009e73:	e8 a8 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009e78:	83 c4 10             	add    esp,0x10
c0009e7b:	39 dd                	cmp    ebp,ebx
c0009e7d:	75 e5                	jne    c0009e64 <VAS::allocatePages(int, int)+0x40>
c0009e7f:	0f 20 d8             	mov    eax,cr3
c0009e82:	0f 22 d8             	mov    cr3,eax
c0009e85:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009e89:	83 c4 1c             	add    esp,0x1c
c0009e8c:	5b                   	pop    ebx
c0009e8d:	5e                   	pop    esi
c0009e8e:	5f                   	pop    edi
c0009e8f:	5d                   	pop    ebp
c0009e90:	c3                   	ret    
c0009e91:	83 ec 0c             	sub    esp,0xc
c0009e94:	68 04 0b 02 c0       	push   0xc0020b04
c0009e99:	e8 db 73 00 00       	call   c0011279 <KePanic(char const*)>
c0009e9e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0009ea1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009ea5:	83 c4 10             	add    esp,0x10
c0009ea8:	eb 9a                	jmp    c0009e44 <VAS::allocatePages(int, int)+0x20>
c0009eaa:	83 ec 0c             	sub    esp,0xc
c0009ead:	53                   	push   ebx
c0009eae:	e8 5a f7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c0009eb3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009eb7:	83 c4 10             	add    esp,0x10
c0009eba:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c0009ebf:	77 37                	ja     c0009ef8 <VAS::allocatePages(int, int)+0xd4>
c0009ec1:	85 db                	test   ebx,ebx
c0009ec3:	7e ba                	jle    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ec5:	c1 e3 0c             	shl    ebx,0xc
c0009ec8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0009ecc:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c0009ed0:	8d 2c 03             	lea    ebp,[ebx+eax*1]
c0009ed3:	81 cf 00 04 00 00    	or     edi,0x400
c0009ed9:	89 c3                	mov    ebx,eax
c0009edb:	e8 df de ff ff       	call   c0007dbf <Phys::allocatePage()>
c0009ee0:	57                   	push   edi
c0009ee1:	53                   	push   ebx
c0009ee2:	81 c3 00 10 00 00    	add    ebx,0x1000
c0009ee8:	50                   	push   eax
c0009ee9:	56                   	push   esi
c0009eea:	e8 31 fe ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009eef:	83 c4 10             	add    esp,0x10
c0009ef2:	39 dd                	cmp    ebp,ebx
c0009ef4:	75 e5                	jne    c0009edb <VAS::allocatePages(int, int)+0xb7>
c0009ef6:	eb 87                	jmp    c0009e7f <VAS::allocatePages(int, int)+0x5b>
c0009ef8:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0009efd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0009f03:	f6 80 8c 11 00 00 10 	test   BYTE PTR [eax+0x118c],0x10
c0009f0a:	74 b5                	je     c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f0c:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0009f10:	80 ce 01             	or     dh,0x1
c0009f13:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0009f17:	eb a8                	jmp    c0009ec1 <VAS::allocatePages(int, int)+0x9d>
c0009f19:	90                   	nop

c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c0009f1a:	55                   	push   ebp
c0009f1b:	57                   	push   edi
c0009f1c:	56                   	push   esi
c0009f1d:	53                   	push   ebx
c0009f1e:	83 ec 0c             	sub    esp,0xc
c0009f21:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0009f25:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0009f29:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0009f2d:	85 db                	test   ebx,ebx
c0009f2f:	7e 2f                	jle    c0009f60 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x46>
c0009f31:	c1 e3 0c             	shl    ebx,0xc
c0009f34:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0009f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0009f3c:	01 d3                	add    ebx,edx
c0009f3e:	55                   	push   ebp
c0009f3f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0009f43:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f47:	29 c2                	sub    edx,eax
c0009f49:	01 f2                	add    edx,esi
c0009f4b:	52                   	push   edx
c0009f4c:	56                   	push   esi
c0009f4d:	81 c6 00 10 00 00    	add    esi,0x1000
c0009f53:	57                   	push   edi
c0009f54:	e8 c7 fd ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0009f59:	83 c4 10             	add    esp,0x10
c0009f5c:	39 de                	cmp    esi,ebx
c0009f5e:	75 de                	jne    c0009f3e <VAS::mapRange(unsigned long, unsigned long, int, int)+0x24>
c0009f60:	0f 20 d8             	mov    eax,cr3
c0009f63:	0f 22 d8             	mov    cr3,eax
c0009f66:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0009f6a:	83 c4 0c             	add    esp,0xc
c0009f6d:	5b                   	pop    ebx
c0009f6e:	5e                   	pop    esi
c0009f6f:	5f                   	pop    edi
c0009f70:	5d                   	pop    ebp
c0009f71:	c3                   	ret    

c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0009f72:	55                   	push   ebp
c0009f73:	57                   	push   edi
c0009f74:	56                   	push   esi
c0009f75:	53                   	push   ebx
c0009f76:	83 ec 1c             	sub    esp,0x1c
c0009f79:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009f7d:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0009f81:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0009f85:	09 f8                	or     eax,edi
c0009f87:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0009f8b:	a9 ff 0f 00 00       	test   eax,0xfff
c0009f90:	75 4f                	jne    c0009fe1 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x6f>
c0009f92:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0009f96:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0009f99:	c1 eb 16             	shr    ebx,0x16
c0009f9c:	8d 3c 9d 00 00 00 00 	lea    edi,[ebx*4+0x0]
c0009fa3:	f6 04 38 01          	test   BYTE PTR [eax+edi*1],0x1
c0009fa7:	74 52                	je     c0009ffb <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x89>
c0009fa9:	0f b6 f2             	movzx  esi,dl
c0009fac:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0009fb0:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0009fb4:	c1 e8 0a             	shr    eax,0xa
c0009fb7:	83 fe 01             	cmp    esi,0x1
c0009fba:	19 d2                	sbb    edx,edx
c0009fbc:	c1 e3 0c             	shl    ebx,0xc
c0009fbf:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0009fc5:	25 fc 0f 00 00       	and    eax,0xffc
c0009fca:	01 d8                	add    eax,ebx
c0009fcc:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0009fd0:	09 d9                	or     ecx,ebx
c0009fd2:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0009fd9:	83 c4 1c             	add    esp,0x1c
c0009fdc:	5b                   	pop    ebx
c0009fdd:	5e                   	pop    esi
c0009fde:	5f                   	pop    edi
c0009fdf:	5d                   	pop    ebp
c0009fe0:	c3                   	ret    
c0009fe1:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009fe5:	83 ec 0c             	sub    esp,0xc
c0009fe8:	68 30 0b 02 c0       	push   0xc0020b30
c0009fed:	e8 87 72 00 00       	call   c0011279 <KePanic(char const*)>
c0009ff2:	83 c4 10             	add    esp,0x10
c0009ff5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ff9:	eb 97                	jmp    c0009f92 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x20>
c0009ffb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009fff:	e8 bb dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a004:	83 ec 0c             	sub    esp,0xc
c000a007:	89 c5                	mov    ebp,eax
c000a009:	8b 0d b0 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fb0
c000a00f:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000a013:	6a 01                	push   0x1
c000a015:	e8 f3 f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a01a:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c000a021:	6a 01                	push   0x1
c000a023:	50                   	push   eax
c000a024:	55                   	push   ebp
c000a025:	81 cd 07 04 00 00    	or     ebp,0x407
c000a02b:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c000a02f:	51                   	push   ecx
c000a030:	e8 e5 fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a035:	83 c4 1c             	add    esp,0x1c
c000a038:	68 00 10 00 00       	push   0x1000
c000a03d:	6a 00                	push   0x0
c000a03f:	50                   	push   eax
c000a040:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a044:	e8 a7 64 ff ff       	call   c00004f0 <memset>
c000a049:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000a04d:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a050:	e8 d6 f8 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a055:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000a058:	83 c4 10             	add    esp,0x10
c000a05b:	89 2c 38             	mov    DWORD PTR [eax+edi*1],ebp
c000a05e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a062:	e9 42 ff ff ff       	jmp    c0009fa9 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x37>
c000a067:	90                   	nop

c000a068 <VAS::VAS(bool)>:
c000a068:	53                   	push   ebx
c000a069:	83 ec 28             	sub    esp,0x28
c000a06c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000a070:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c000a074:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a078:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000a07f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a083:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c000a08a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a08e:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c000a092:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c000a095:	e8 25 dd ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a09a:	89 c2                	mov    edx,eax
c000a09c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0a0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000a0a3:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000a0a9:	83 ec 0c             	sub    esp,0xc
c000a0ac:	6a 01                	push   0x1
c000a0ae:	e8 5a f5 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a0b3:	83 c4 10             	add    esp,0x10
c000a0b6:	89 c2                	mov    edx,eax
c000a0b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0bc:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000a0bf:	83 ec 0c             	sub    esp,0xc
c000a0c2:	6a 03                	push   0x3
c000a0c4:	6a 01                	push   0x1
c000a0c6:	52                   	push   edx
c000a0c7:	50                   	push   eax
c000a0c8:	53                   	push   ebx
c000a0c9:	e8 4c fe ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a0ce:	83 c4 20             	add    esp,0x20
c000a0d1:	89 c2                	mov    edx,eax
c000a0d3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0d7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000a0da:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c000a0e2:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c000a0ea:	7f 1d                	jg     c000a109 <VAS::VAS(bool)+0xa1>
c000a0ec:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a0f0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a0f3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a0f7:	c1 e2 02             	shl    edx,0x2
c000a0fa:	01 d0                	add    eax,edx
c000a0fc:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a102:	83 44 24 1c 01       	add    DWORD PTR [esp+0x1c],0x1
c000a107:	eb d9                	jmp    c000a0e2 <VAS::VAS(bool)+0x7a>
c000a109:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c000a111:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c000a119:	7f 7e                	jg     c000a199 <VAS::VAS(bool)+0x131>
c000a11b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a11f:	2d 00 02 00 00       	sub    eax,0x200
c000a124:	c1 e0 0c             	shl    eax,0xc
c000a127:	83 c8 05             	or     eax,0x5
c000a12a:	89 c2                	mov    edx,eax
c000a12c:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a131:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a137:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a13d:	83 e0 10             	and    eax,0x10
c000a140:	0f b6 c0             	movzx  eax,al
c000a143:	85 c0                	test   eax,eax
c000a145:	74 07                	je     c000a14e <VAS::VAS(bool)+0xe6>
c000a147:	b8 00 01 00 00       	mov    eax,0x100
c000a14c:	eb 05                	jmp    c000a153 <VAS::VAS(bool)+0xeb>
c000a14e:	b8 00 00 00 00       	mov    eax,0x0
c000a153:	09 d0                	or     eax,edx
c000a155:	89 c1                	mov    ecx,eax
c000a157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a15b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a15e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a162:	c1 e2 02             	shl    edx,0x2
c000a165:	01 d0                	add    eax,edx
c000a167:	89 ca                	mov    edx,ecx
c000a169:	89 10                	mov    DWORD PTR [eax],edx
c000a16b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a16f:	2d 40 03 00 00       	sub    eax,0x340
c000a174:	83 f8 7f             	cmp    eax,0x7f
c000a177:	77 16                	ja     c000a18f <VAS::VAS(bool)+0x127>
c000a179:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a17d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a180:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000a184:	c1 e2 02             	shl    edx,0x2
c000a187:	01 d0                	add    eax,edx
c000a189:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c000a18f:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000a194:	e9 78 ff ff ff       	jmp    c000a111 <VAS::VAS(bool)+0xa9>
c000a199:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a19e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1a4:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1aa:	83 e0 10             	and    eax,0x10
c000a1ad:	0f b6 c0             	movzx  eax,al
c000a1b0:	85 c0                	test   eax,eax
c000a1b2:	74 07                	je     c000a1bb <VAS::VAS(bool)+0x153>
c000a1b4:	b8 03 41 00 00       	mov    eax,0x4103
c000a1b9:	eb 05                	jmp    c000a1c0 <VAS::VAS(bool)+0x158>
c000a1bb:	b8 03 40 00 00       	mov    eax,0x4003
c000a1c0:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000a1c4:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c000a1c7:	81 c2 20 0c 00 00    	add    edx,0xc20
c000a1cd:	89 02                	mov    DWORD PTR [edx],eax
c000a1cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a1d3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000a1d6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a1db:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a1e1:	8a 80 8c 11 00 00    	mov    al,BYTE PTR [eax+0x118c]
c000a1e7:	83 e0 10             	and    eax,0x10
c000a1ea:	0f b6 c0             	movzx  eax,al
c000a1ed:	85 c0                	test   eax,eax
c000a1ef:	74 07                	je     c000a1f8 <VAS::VAS(bool)+0x190>
c000a1f1:	b8 00 01 00 00       	mov    eax,0x100
c000a1f6:	eb 05                	jmp    c000a1fd <VAS::VAS(bool)+0x195>
c000a1f8:	b8 00 00 00 00       	mov    eax,0x0
c000a1fd:	09 c2                	or     edx,eax
c000a1ff:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a203:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000a206:	05 fc 0f 00 00       	add    eax,0xffc
c000a20b:	83 ca 03             	or     edx,0x3
c000a20e:	89 10                	mov    DWORD PTR [eax],edx
c000a210:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a215:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a21b:	83 ec 0c             	sub    esp,0xc
c000a21e:	50                   	push   eax
c000a21f:	e8 ba 26 00 00       	call   c000c8de <Device::getName()>
c000a224:	83 c4 10             	add    esp,0x10
c000a227:	83 ec 08             	sub    esp,0x8
c000a22a:	68 00 0d 02 c0       	push   0xc0020d00
c000a22f:	50                   	push   eax
c000a230:	e8 1b 65 ff ff       	call   c0000750 <strcmp>
c000a235:	83 c4 10             	add    esp,0x10
c000a238:	85 c0                	test   eax,eax
c000a23a:	0f 94 c0             	sete   al
c000a23d:	0f b6 c0             	movzx  eax,al
c000a240:	85 c0                	test   eax,eax
c000a242:	74 68                	je     c000a2ac <VAS::VAS(bool)+0x244>
c000a244:	fa                   	cli    
c000a245:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a24a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a250:	05 7c 09 00 00       	add    eax,0x97c
c000a255:	83 ec 0c             	sub    esp,0xc
c000a258:	50                   	push   eax
c000a259:	e8 50 d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a25e:	83 c4 10             	add    esp,0x10
c000a261:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a266:	89 c3                	mov    ebx,eax
c000a268:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000a26d:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000a273:	05 7c 09 00 00       	add    eax,0x97c
c000a278:	83 ec 0c             	sub    esp,0xc
c000a27b:	50                   	push   eax
c000a27c:	e8 2d d3 ff ff       	call   c00075ae <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c000a281:	83 c4 10             	add    esp,0x10
c000a284:	83 ec 08             	sub    esp,0x8
c000a287:	50                   	push   eax
c000a288:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a28c:	e8 7b f6 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a291:	83 c4 10             	add    esp,0x10
c000a294:	8b 00                	mov    eax,DWORD PTR [eax]
c000a296:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a29b:	6a 11                	push   0x11
c000a29d:	53                   	push   ebx
c000a29e:	50                   	push   eax
c000a29f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a2a3:	e8 78 fa ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a2a8:	83 c4 10             	add    esp,0x10
c000a2ab:	fb                   	sti    
c000a2ac:	90                   	nop
c000a2ad:	83 c4 28             	add    esp,0x28
c000a2b0:	5b                   	pop    ebx
c000a2b1:	c3                   	ret    

c000a2b2 <VAS::evict(unsigned long)>:
c000a2b2:	55                   	push   ebp
c000a2b3:	57                   	push   edi
c000a2b4:	56                   	push   esi
c000a2b5:	53                   	push   ebx
c000a2b6:	83 ec 1c             	sub    esp,0x1c
c000a2b9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000a2bd:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a2c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a2c5:	e8 a1 f4 ff ff       	call   c000976b <Virt::allocateSwapfilePage()>
c000a2ca:	89 c7                	mov    edi,eax
c000a2cc:	a1 0c 30 02 c0       	mov    eax,ds:0xc002300c
c000a2d1:	85 c0                	test   eax,eax
c000a2d3:	7e 40                	jle    c000a315 <VAS::evict(unsigned long)+0x63>
c000a2d5:	89 ee                	mov    esi,ebp
c000a2d7:	31 db                	xor    ebx,ebx
c000a2d9:	83 ec 0c             	sub    esp,0xc
c000a2dc:	57                   	push   edi
c000a2dd:	e8 73 f4 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a2e2:	89 34 24             	mov    DWORD PTR [esp],esi
c000a2e5:	01 d8                	add    eax,ebx
c000a2e7:	6a 01                	push   0x1
c000a2e9:	31 d2                	xor    edx,edx
c000a2eb:	83 c3 01             	add    ebx,0x1
c000a2ee:	52                   	push   edx
c000a2ef:	81 c6 00 02 00 00    	add    esi,0x200
c000a2f5:	50                   	push   eax
c000a2f6:	0f be 05 18 30 02 c0 	movsx  eax,BYTE PTR ds:0xc0023018
c000a2fd:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a304:	50                   	push   eax
c000a305:	e8 8e 37 00 00       	call   c000da98 <LogicalDisk::write(unsigned long long, int, void*)>
c000a30a:	83 c4 20             	add    esp,0x20
c000a30d:	39 1d 0c 30 02 c0    	cmp    DWORD PTR ds:0xc002300c,ebx
c000a313:	7f c4                	jg     c000a2d9 <VAS::evict(unsigned long)+0x27>
c000a315:	83 ec 08             	sub    esp,0x8
c000a318:	c1 e7 0c             	shl    edi,0xc
c000a31b:	55                   	push   ebp
c000a31c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a320:	50                   	push   eax
c000a321:	e8 e6 f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a326:	8b 10                	mov    edx,DWORD PTR [eax]
c000a328:	89 d3                	mov    ebx,edx
c000a32a:	81 e2 fe 07 00 00    	and    edx,0x7fe
c000a330:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a336:	09 d7                	or     edi,edx
c000a338:	89 38                	mov    DWORD PTR [eax],edi
c000a33a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000a33d:	8b 15 a8 5f 02 c0    	mov    edx,DWORD PTR ds:0xc0025fa8
c000a343:	83 c2 01             	add    edx,0x1
c000a346:	89 15 a8 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa8,edx
c000a34c:	e8 05 da ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c000a351:	0f 20 d8             	mov    eax,cr3
c000a354:	0f 22 d8             	mov    cr3,eax
c000a357:	8b 0d a8 5f 02 c0    	mov    ecx,DWORD PTR ds:0xc0025fa8
c000a35d:	51                   	push   ecx
c000a35e:	55                   	push   ebp
c000a35f:	53                   	push   ebx
c000a360:	68 54 0b 02 c0       	push   0xc0020b54
c000a365:	e8 db 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a36a:	a1 a4 5f 02 c0       	mov    eax,ds:0xc0025fa4
c000a36f:	c7 44 24 50 0e 0d 02 c0 	mov    DWORD PTR [esp+0x50],0xc0020d0e
c000a377:	8d 50 01             	lea    edx,[eax+0x1]
c000a37a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000a37e:	89 15 a4 5f 02 c0    	mov    DWORD PTR ds:0xc0025fa4,edx
c000a384:	83 c4 3c             	add    esp,0x3c
c000a387:	5b                   	pop    ebx
c000a388:	5e                   	pop    esi
c000a389:	5f                   	pop    edi
c000a38a:	5d                   	pop    ebp
c000a38b:	e9 b5 05 00 00       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>

c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>:
c000a390:	55                   	push   ebp
c000a391:	57                   	push   edi
c000a392:	56                   	push   esi
c000a393:	53                   	push   ebx
c000a394:	81 ec 1c 10 00 00    	sub    esp,0x101c
c000a39a:	8b b4 24 34 10 00 00 	mov    esi,DWORD PTR [esp+0x1034]
c000a3a1:	89 f3                	mov    ebx,esi
c000a3a3:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000a3a9:	81 fe ff ff bf ff    	cmp    esi,0xffbfffff
c000a3af:	77 22                	ja     c000a3d3 <VAS::tryLoadBackOffDisk(unsigned long)+0x43>
c000a3b1:	83 ec 08             	sub    esp,0x8
c000a3b4:	56                   	push   esi
c000a3b5:	68 31 0d 02 c0       	push   0xc0020d31
c000a3ba:	e8 86 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3bf:	83 c4 10             	add    esp,0x10
c000a3c2:	85 db                	test   ebx,ebx
c000a3c4:	75 2a                	jne    c000a3f0 <VAS::tryLoadBackOffDisk(unsigned long)+0x60>
c000a3c6:	31 c0                	xor    eax,eax
c000a3c8:	81 c4 1c 10 00 00    	add    esp,0x101c
c000a3ce:	5b                   	pop    ebx
c000a3cf:	5e                   	pop    esi
c000a3d0:	5f                   	pop    edi
c000a3d1:	5d                   	pop    ebp
c000a3d2:	c3                   	ret    
c000a3d3:	83 ec 0c             	sub    esp,0xc
c000a3d6:	68 1f 0d 02 c0       	push   0xc0020d1f
c000a3db:	e8 99 6e 00 00       	call   c0011279 <KePanic(char const*)>
c000a3e0:	5f                   	pop    edi
c000a3e1:	5d                   	pop    ebp
c000a3e2:	56                   	push   esi
c000a3e3:	68 31 0d 02 c0       	push   0xc0020d31
c000a3e8:	e8 58 05 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a3ed:	83 c4 10             	add    esp,0x10
c000a3f0:	83 ec 08             	sub    esp,0x8
c000a3f3:	53                   	push   ebx
c000a3f4:	8b 8c 24 3c 10 00 00 	mov    ecx,DWORD PTR [esp+0x103c]
c000a3fb:	51                   	push   ecx
c000a3fc:	e8 0b f5 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a401:	83 c4 10             	add    esp,0x10
c000a404:	89 c2                	mov    edx,eax
c000a406:	85 c0                	test   eax,eax
c000a408:	74 bc                	je     c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a40a:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a40c:	f7 c5 00 02 00 00    	test   ebp,0x200
c000a412:	0f 85 c0 00 00 00    	jne    c000a4d8 <VAS::tryLoadBackOffDisk(unsigned long)+0x148>
c000a418:	89 e8                	mov    eax,ebp
c000a41a:	25 01 04 00 00       	and    eax,0x401
c000a41f:	3d 00 04 00 00       	cmp    eax,0x400
c000a424:	75 a0                	jne    c000a3c6 <VAS::tryLoadBackOffDisk(unsigned long)+0x36>
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	c1 ed 0c             	shr    ebp,0xc
c000a42d:	e8 8d d9 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a432:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000a436:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a438:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000a43e:	09 c1                	or     ecx,eax
c000a440:	81 c9 01 08 00 00    	or     ecx,0x801
c000a446:	89 0a                	mov    DWORD PTR [edx],ecx
c000a448:	8b 15 0c 30 02 c0    	mov    edx,DWORD PTR ds:0xc002300c
c000a44e:	85 d2                	test   edx,edx
c000a450:	7e 40                	jle    c000a492 <VAS::tryLoadBackOffDisk(unsigned long)+0x102>
c000a452:	89 df                	mov    edi,ebx
c000a454:	31 f6                	xor    esi,esi
c000a456:	83 ec 0c             	sub    esp,0xc
c000a459:	55                   	push   ebp
c000a45a:	e8 f6 f2 ff ff       	call   c0009755 <Virt::swapIDToSector(unsigned long)>
c000a45f:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a462:	01 f0                	add    eax,esi
c000a464:	6a 01                	push   0x1
c000a466:	31 d2                	xor    edx,edx
c000a468:	83 c6 01             	add    esi,0x1
c000a46b:	52                   	push   edx
c000a46c:	81 c7 00 02 00 00    	add    edi,0x200
c000a472:	50                   	push   eax
c000a473:	0f be 05 18 30 02 c0 	movsx  eax,BYTE PTR ds:0xc0023018
c000a47a:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c000a481:	50                   	push   eax
c000a482:	e8 a5 35 00 00       	call   c000da2c <LogicalDisk::read(unsigned long long, int, void*)>
c000a487:	83 c4 20             	add    esp,0x20
c000a48a:	39 35 0c 30 02 c0    	cmp    DWORD PTR ds:0xc002300c,esi
c000a490:	7f c4                	jg     c000a456 <VAS::tryLoadBackOffDisk(unsigned long)+0xc6>
c000a492:	83 ec 04             	sub    esp,0x4
c000a495:	a1 a8 5f 02 c0       	mov    eax,ds:0xc0025fa8
c000a49a:	83 e8 01             	sub    eax,0x1
c000a49d:	50                   	push   eax
c000a49e:	a3 a8 5f 02 c0       	mov    ds:0xc0025fa8,eax
c000a4a3:	53                   	push   ebx
c000a4a4:	68 44 0d 02 c0       	push   0xc0020d44
c000a4a9:	e8 97 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4ae:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000a4b1:	e8 7c f2 ff ff       	call   c0009732 <Virt::freeSwapfilePage(unsigned long)>
c000a4b6:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000a4bb:	83 c4 10             	add    esp,0x10
c000a4be:	83 e8 01             	sub    eax,0x1
c000a4c1:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000a4c6:	85 c0                	test   eax,eax
c000a4c8:	75 01                	jne    c000a4cb <VAS::tryLoadBackOffDisk(unsigned long)+0x13b>
c000a4ca:	fb                   	sti    
c000a4cb:	0f 20 d8             	mov    eax,cr3
c000a4ce:	0f 22 d8             	mov    cr3,eax
c000a4d1:	b0 01                	mov    al,0x1
c000a4d3:	e9 f0 fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>
c000a4d8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000a4dc:	bd 00 10 00 00       	mov    ebp,0x1000
c000a4e1:	83 ec 0c             	sub    esp,0xc
c000a4e4:	89 de                	mov    esi,ebx
c000a4e6:	68 84 0b 02 c0       	push   0xc0020b84
c000a4eb:	e8 55 04 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a4f0:	8d 7c 24 20          	lea    edi,[esp+0x20]
c000a4f4:	e8 c6 d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a4f9:	89 e9                	mov    ecx,ebp
c000a4fb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a4fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a501:	8b 0a                	mov    ecx,DWORD PTR [edx]
c000a503:	81 e1 ff 0d 00 00    	and    ecx,0xdff
c000a509:	09 c8                	or     eax,ecx
c000a50b:	83 c8 02             	or     eax,0x2
c000a50e:	89 02                	mov    DWORD PTR [edx],eax
c000a510:	0f 20 d8             	mov    eax,cr3
c000a513:	0f 22 d8             	mov    cr3,eax
c000a516:	8d 74 24 20          	lea    esi,[esp+0x20]
c000a51a:	89 df                	mov    edi,ebx
c000a51c:	89 e9                	mov    ecx,ebp
c000a51e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000a520:	b0 01                	mov    al,0x1
c000a522:	83 c4 10             	add    esp,0x10
c000a525:	e9 9e fe ff ff       	jmp    c000a3c8 <VAS::tryLoadBackOffDisk(unsigned long)+0x38>

c000a52a <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)>:
c000a52a:	55                   	push   ebp
c000a52b:	57                   	push   edi
c000a52c:	56                   	push   esi
c000a52d:	53                   	push   ebx
c000a52e:	83 ec 28             	sub    esp,0x28
c000a531:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000a535:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000a539:	50                   	push   eax
c000a53a:	e8 ce f0 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000a53f:	83 c4 0c             	add    esp,0xc
c000a542:	89 c5                	mov    ebp,eax
c000a544:	6a 07                	push   0x7
c000a546:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000a54a:	52                   	push   edx
c000a54b:	56                   	push   esi
c000a54c:	e8 d3 f8 ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c000a551:	83 c4 10             	add    esp,0x10
c000a554:	89 c7                	mov    edi,eax
c000a556:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000a55a:	85 c9                	test   ecx,ecx
c000a55c:	74 2f                	je     c000a58d <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x63>
c000a55e:	31 db                	xor    ebx,ebx
c000a560:	e8 5a d8 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a565:	83 c3 01             	add    ebx,0x1
c000a568:	6a 03                	push   0x3
c000a56a:	55                   	push   ebp
c000a56b:	50                   	push   eax
c000a56c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a570:	56                   	push   esi
c000a571:	e8 aa f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a576:	6a 07                	push   0x7
c000a578:	57                   	push   edi
c000a579:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000a57d:	50                   	push   eax
c000a57e:	56                   	push   esi
c000a57f:	e8 9c f7 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c000a584:	83 c4 20             	add    esp,0x20
c000a587:	39 5c 24 34          	cmp    DWORD PTR [esp+0x34],ebx
c000a58b:	75 d3                	jne    c000a560 <VAS::allocateSharedMemoryWithKernel(unsigned long, unsigned long*)+0x36>
c000a58d:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a591:	89 28                	mov    DWORD PTR [eax],ebp
c000a593:	83 c4 1c             	add    esp,0x1c
c000a596:	89 f8                	mov    eax,edi
c000a598:	5b                   	pop    ebx
c000a599:	5e                   	pop    esi
c000a59a:	5f                   	pop    edi
c000a59b:	5d                   	pop    ebp
c000a59c:	c3                   	ret    
c000a59d:	90                   	nop

c000a59e <VAS::freeSharedMemoryWithKernel(unsigned long, unsigned long)>:
c000a59e:	53                   	push   ebx
c000a59f:	83 ec 14             	sub    esp,0x14
c000a5a2:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000a5a6:	68 a4 0b 02 c0       	push   0xc0020ba4
c000a5ab:	e8 95 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5b0:	c7 04 24 04 0c 02 c0 	mov    DWORD PTR [esp],0xc0020c04
c000a5b7:	e8 89 03 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a5bc:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c000a5c0:	83 c4 18             	add    esp,0x18
c000a5c3:	5b                   	pop    ebx
c000a5c4:	e9 62 f3 ff ff       	jmp    c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000a5c9:	90                   	nop

c000a5ca <VAS::scanForEviction()>:
c000a5ca:	57                   	push   edi
c000a5cb:	56                   	push   esi
c000a5cc:	31 f6                	xor    esi,esi
c000a5ce:	53                   	push   ebx
c000a5cf:	83 ec 10             	sub    esp,0x10
c000a5d2:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000a5d6:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a5d9:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a5df:	75 0e                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a5e1:	89 da                	mov    edx,ebx
c000a5e3:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a5e6:	c1 ea 16             	shr    edx,0x16
c000a5e9:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a5ed:	74 57                	je     c000a646 <VAS::scanForEviction()+0x7c>
c000a5ef:	53                   	push   ebx
c000a5f0:	57                   	push   edi
c000a5f1:	e8 16 f3 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c000a5f6:	5a                   	pop    edx
c000a5f7:	8b 10                	mov    edx,DWORD PTR [eax]
c000a5f9:	59                   	pop    ecx
c000a5fa:	89 d1                	mov    ecx,edx
c000a5fc:	c1 e9 0c             	shr    ecx,0xc
c000a5ff:	74 10                	je     c000a611 <VAS::scanForEviction()+0x47>
c000a601:	89 d1                	mov    ecx,edx
c000a603:	81 e1 01 08 00 00    	and    ecx,0x801
c000a609:	81 f9 01 08 00 00    	cmp    ecx,0x801
c000a60f:	74 40                	je     c000a651 <VAS::scanForEviction()+0x87>
c000a611:	81 c3 00 10 00 00    	add    ebx,0x1000
c000a617:	81 fb ff ff ff fe    	cmp    ebx,0xfeffffff
c000a61d:	76 2d                	jbe    c000a64c <VAS::scanForEviction()+0x82>
c000a61f:	83 c6 01             	add    esi,0x1
c000a622:	c7 47 08 00 00 00 00 	mov    DWORD PTR [edi+0x8],0x0
c000a629:	83 fe 03             	cmp    esi,0x3
c000a62c:	74 32                	je     c000a660 <VAS::scanForEviction()+0x96>
c000a62e:	31 db                	xor    ebx,ebx
c000a630:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c000a636:	75 b7                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a638:	89 da                	mov    edx,ebx
c000a63a:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000a63d:	c1 ea 16             	shr    edx,0x16
c000a640:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c000a644:	75 a9                	jne    c000a5ef <VAS::scanForEviction()+0x25>
c000a646:	81 c3 00 00 40 00    	add    ebx,0x400000
c000a64c:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c000a64f:	eb 88                	jmp    c000a5d9 <VAS::scanForEviction()+0xf>
c000a651:	f6 c2 20             	test   dl,0x20
c000a654:	74 13                	je     c000a669 <VAS::scanForEviction()+0x9f>
c000a656:	83 e2 df             	and    edx,0xffffffdf
c000a659:	89 10                	mov    DWORD PTR [eax],edx
c000a65b:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000a65e:	eb b1                	jmp    c000a611 <VAS::scanForEviction()+0x47>
c000a660:	83 c4 10             	add    esp,0x10
c000a663:	31 c0                	xor    eax,eax
c000a665:	5b                   	pop    ebx
c000a666:	5e                   	pop    esi
c000a667:	5f                   	pop    edi
c000a668:	c3                   	ret    
c000a669:	83 ec 08             	sub    esp,0x8
c000a66c:	89 d0                	mov    eax,edx
c000a66e:	25 00 f0 ff ff       	and    eax,0xfffff000
c000a673:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000a677:	53                   	push   ebx
c000a678:	68 59 0d 02 c0       	push   0xc0020d59
c000a67d:	e8 c3 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a682:	58                   	pop    eax
c000a683:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a686:	5a                   	pop    edx
c000a687:	51                   	push   ecx
c000a688:	57                   	push   edi
c000a689:	e8 24 fc ff ff       	call   c000a2b2 <VAS::evict(unsigned long)>
c000a68e:	5b                   	pop    ebx
c000a68f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000a692:	5e                   	pop    esi
c000a693:	50                   	push   eax
c000a694:	68 6d 0d 02 c0       	push   0xc0020d6d
c000a699:	e8 a7 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a69e:	58                   	pop    eax
c000a69f:	5a                   	pop    edx
c000a6a0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000a6a4:	50                   	push   eax
c000a6a5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a6a9:	68 80 0d 02 c0       	push   0xc0020d80
c000a6ae:	e8 92 02 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a6b3:	8b 4f 08             	mov    ecx,DWORD PTR [edi+0x8]
c000a6b6:	83 c4 10             	add    esp,0x10
c000a6b9:	81 c1 00 10 00 00    	add    ecx,0x1000
c000a6bf:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000a6c3:	89 4f 08             	mov    DWORD PTR [edi+0x8],ecx
c000a6c6:	83 c4 10             	add    esp,0x10
c000a6c9:	5b                   	pop    ebx
c000a6ca:	5e                   	pop    esi
c000a6cb:	5f                   	pop    edi
c000a6cc:	c3                   	ret    

c000a6cd <mapVASFirstTime>:
c000a6cd:	55                   	push   ebp
c000a6ce:	57                   	push   edi
c000a6cf:	56                   	push   esi
c000a6d0:	53                   	push   ebx
c000a6d1:	83 ec 0c             	sub    esp,0xc
c000a6d4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000a6d9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000a6dc:	83 fa 01             	cmp    edx,0x1
c000a6df:	0f 84 cb 00 00 00    	je     c000a7b0 <mapVASFirstTime+0xe3>
c000a6e5:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c000a6e8:	8b 68 38             	mov    ebp,DWORD PTR [eax+0x38]
c000a6eb:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c000a6f0:	c1 e5 15             	shl    ebp,0x15
c000a6f3:	bf 00 90 e7 01       	mov    edi,0x1e79000
c000a6f8:	8b b2 12 05 00 00    	mov    esi,DWORD PTR [edx+0x512]
c000a6fe:	29 eb                	sub    ebx,ebp
c000a700:	29 ef                	sub    edi,ebp
c000a702:	e8 b8 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a707:	83 ec 0c             	sub    esp,0xc
c000a70a:	68 03 04 00 00       	push   0x403
c000a70f:	6a 01                	push   0x1
c000a711:	53                   	push   ebx
c000a712:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a718:	50                   	push   eax
c000a719:	56                   	push   esi
c000a71a:	e8 fb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a71f:	83 c4 20             	add    esp,0x20
c000a722:	39 fb                	cmp    ebx,edi
c000a724:	75 dc                	jne    c000a702 <mapVASFirstTime+0x35>
c000a726:	bb 00 f0 ff 01       	mov    ebx,0x1fff000
c000a72b:	bf 00 f0 fd 01       	mov    edi,0x1fdf000
c000a730:	29 eb                	sub    ebx,ebp
c000a732:	29 ef                	sub    edi,ebp
c000a734:	e8 86 d6 ff ff       	call   c0007dbf <Phys::allocatePage()>
c000a739:	0f b6 56 01          	movzx  edx,BYTE PTR [esi+0x1]
c000a73d:	83 fa 01             	cmp    edx,0x1
c000a740:	19 d2                	sbb    edx,edx
c000a742:	83 ec 0c             	sub    esp,0xc
c000a745:	83 e2 04             	and    edx,0x4
c000a748:	81 c2 03 04 00 00    	add    edx,0x403
c000a74e:	52                   	push   edx
c000a74f:	6a 01                	push   0x1
c000a751:	53                   	push   ebx
c000a752:	81 eb 00 10 00 00    	sub    ebx,0x1000
c000a758:	50                   	push   eax
c000a759:	56                   	push   esi
c000a75a:	e8 bb f7 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000a75f:	83 c4 20             	add    esp,0x20
c000a762:	39 df                	cmp    edi,ebx
c000a764:	75 ce                	jne    c000a734 <mapVASFirstTime+0x67>
c000a766:	83 ec 0c             	sub    esp,0xc
c000a769:	bb 7c 50 02 c0       	mov    ebx,0xc002507c
c000a76e:	6a 04                	push   0x4
c000a770:	81 eb 00 40 02 c0    	sub    ebx,0xc0024000
c000a776:	6a ff                	push   0xffffffff
c000a778:	c1 eb 0c             	shr    ebx,0xc
c000a77b:	53                   	push   ebx
c000a77c:	68 00 40 02 c0       	push   0xc0024000
c000a781:	56                   	push   esi
c000a782:	e8 1f f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a787:	83 c4 14             	add    esp,0x14
c000a78a:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c000a78f:	6a 04                	push   0x4
c000a791:	6a ff                	push   0xffffffff
c000a793:	53                   	push   ebx
c000a794:	68 00 40 02 c0       	push   0xc0024000
c000a799:	50                   	push   eax
c000a79a:	e8 07 f3 ff ff       	call   c0009aa6 <VAS::reflagRange(unsigned long, int, unsigned long, unsigned long)>
c000a79f:	0f 20 d8             	mov    eax,cr3
c000a7a2:	0f 22 d8             	mov    cr3,eax
c000a7a5:	83 c4 20             	add    esp,0x20
c000a7a8:	83 c4 0c             	add    esp,0xc
c000a7ab:	5b                   	pop    ebx
c000a7ac:	5e                   	pop    esi
c000a7ad:	5f                   	pop    edi
c000a7ae:	5d                   	pop    ebp
c000a7af:	c3                   	ret    
c000a7b0:	83 ec 0c             	sub    esp,0xc
c000a7b3:	68 8d 0d 02 c0       	push   0xc0020d8d
c000a7b8:	e8 88 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7bd:	83 c4 10             	add    esp,0x10
c000a7c0:	83 c4 0c             	add    esp,0xc
c000a7c3:	5b                   	pop    ebx
c000a7c4:	5e                   	pop    esi
c000a7c5:	5f                   	pop    edi
c000a7c6:	5d                   	pop    ebp
c000a7c7:	c3                   	ret    

c000a7c8 <__cxa_atexit>:
c000a7c8:	31 c0                	xor    eax,eax
c000a7ca:	c3                   	ret    

c000a7cb <__cxa_finalize>:
c000a7cb:	c3                   	ret    

c000a7cc <__stack_chk_fail>:
c000a7cc:	55                   	push   ebp
c000a7cd:	89 e5                	mov    ebp,esp
c000a7cf:	83 ec 10             	sub    esp,0x10
c000a7d2:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000a7d5:	68 a6 0d 02 c0       	push   0xc0020da6
c000a7da:	e8 66 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7df:	58                   	pop    eax
c000a7e0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000a7e3:	5a                   	pop    edx
c000a7e4:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000a7e7:	68 a6 0d 02 c0       	push   0xc0020da6
c000a7ec:	e8 54 01 00 00       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000a7f1:	c7 04 24 ae 0d 02 c0 	mov    DWORD PTR [esp],0xc0020dae
c000a7f8:	e8 7c 6a 00 00       	call   c0011279 <KePanic(char const*)>
c000a7fd:	83 c4 10             	add    esp,0x10
c000a800:	c9                   	leave  
c000a801:	c3                   	ret    

c000a802 <__cxa_pure_virtual>:
c000a802:	83 ec 18             	sub    esp,0x18
c000a805:	68 c6 0d 02 c0       	push   0xc0020dc6
c000a80a:	e8 6a 6a 00 00       	call   c0011279 <KePanic(char const*)>
c000a80f:	83 c4 1c             	add    esp,0x1c
c000a812:	c3                   	ret    

c000a813 <operator new[](unsigned long)>:
c000a813:	e9 9e d2 ff ff       	jmp    c0007ab6 <malloc>

c000a818 <operator delete(void*, unsigned long)>:
c000a818:	e9 b9 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a81d <operator delete[](void*)>:
c000a81d:	e9 b4 d2 ff ff       	jmp    c0007ad6 <rfree>

c000a822 <operator delete[](void*, unsigned long)>:
c000a822:	e9 af d2 ff ff       	jmp    c0007ad6 <rfree>

c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c000a827:	55                   	push   ebp
c000a828:	57                   	push   edi
c000a829:	56                   	push   esi
c000a82a:	be cf 08 02 c0       	mov    esi,0xc00208cf
c000a82f:	53                   	push   ebx
c000a830:	83 ec 20             	sub    esp,0x20
c000a833:	a0 ce 08 02 c0       	mov    al,ds:0xc00208ce
c000a838:	8d 7c 24 10          	lea    edi,[esp+0x10]
c000a83c:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000a840:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000a844:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000a848:	b8 10 00 00 00       	mov    eax,0x10
c000a84d:	f7 c7 02 00 00 00    	test   edi,0x2
c000a853:	75 60                	jne    c000a8b5 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x8e>
c000a855:	89 c1                	mov    ecx,eax
c000a857:	c1 e9 02             	shr    ecx,0x2
c000a85a:	fc                   	cld    
c000a85b:	31 d2                	xor    edx,edx
c000a85d:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000a85f:	a8 02                	test   al,0x2
c000a861:	74 0b                	je     c000a86e <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x47>
c000a863:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a866:	66 89 17             	mov    WORD PTR [edi],dx
c000a869:	ba 02 00 00 00       	mov    edx,0x2
c000a86e:	a8 01                	test   al,0x1
c000a870:	74 06                	je     c000a878 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x51>
c000a872:	8a 04 16             	mov    al,BYTE PTR [esi+edx*1]
c000a875:	88 04 17             	mov    BYTE PTR [edi+edx*1],al
c000a878:	89 ee                	mov    esi,ebp
c000a87a:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000a87e:	eb 02                	jmp    c000a882 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x5b>
c000a880:	89 c6                	mov    esi,eax
c000a882:	31 d2                	xor    edx,edx
c000a884:	83 c1 01             	add    ecx,0x1
c000a887:	89 f0                	mov    eax,esi
c000a889:	f7 f3                	div    ebx
c000a88b:	39 de                	cmp    esi,ebx
c000a88d:	73 f1                	jae    c000a880 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x59>
c000a88f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000a892:	eb 02                	jmp    c000a896 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6f>
c000a894:	89 c5                	mov    ebp,eax
c000a896:	31 d2                	xor    edx,edx
c000a898:	83 e9 01             	sub    ecx,0x1
c000a89b:	89 e8                	mov    eax,ebp
c000a89d:	f7 f3                	div    ebx
c000a89f:	39 dd                	cmp    ebp,ebx
c000a8a1:	8a 54 14 0f          	mov    dl,BYTE PTR [esp+edx*1+0xf]
c000a8a5:	88 11                	mov    BYTE PTR [ecx],dl
c000a8a7:	73 eb                	jae    c000a894 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x6d>
c000a8a9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000a8ad:	83 c4 20             	add    esp,0x20
c000a8b0:	5b                   	pop    ebx
c000a8b1:	5e                   	pop    esi
c000a8b2:	5f                   	pop    edi
c000a8b3:	5d                   	pop    ebp
c000a8b4:	c3                   	ret    
c000a8b5:	66 8b 16             	mov    dx,WORD PTR [esi]
c000a8b8:	83 c7 02             	add    edi,0x2
c000a8bb:	66 89 57 fe          	mov    WORD PTR [edi-0x2],dx
c000a8bf:	83 c6 02             	add    esi,0x2
c000a8c2:	83 e8 02             	sub    eax,0x2
c000a8c5:	eb 8e                	jmp    c000a855 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x2e>

c000a8c7 <Dbg::logc(char)>:
c000a8c7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a8cb:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a8d2:	75 12                	jne    c000a8e6 <Dbg::logc(char)+0x1f>
c000a8d4:	ba fd 03 00 00       	mov    edx,0x3fd
c000a8d9:	ec                   	in     al,dx
c000a8da:	a8 20                	test   al,0x20
c000a8dc:	74 fb                	je     c000a8d9 <Dbg::logc(char)+0x12>
c000a8de:	ba f8 03 00 00       	mov    edx,0x3f8
c000a8e3:	88 c8                	mov    al,cl
c000a8e5:	ee                   	out    dx,al
c000a8e6:	c3                   	ret    

c000a8e7 <Dbg::logs(char*)>:
c000a8e7:	53                   	push   ebx
c000a8e8:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a8ec:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a8ef:	85 c0                	test   eax,eax
c000a8f1:	74 11                	je     c000a904 <Dbg::logs(char*)+0x1d>
c000a8f3:	83 c3 01             	add    ebx,0x1
c000a8f6:	50                   	push   eax
c000a8f7:	e8 cb ff ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a8fc:	58                   	pop    eax
c000a8fd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a900:	85 c0                	test   eax,eax
c000a902:	75 ef                	jne    c000a8f3 <Dbg::logs(char*)+0xc>
c000a904:	5b                   	pop    ebx
c000a905:	c3                   	ret    

c000a906 <Dbg::logWriteInt(unsigned int)>:
c000a906:	83 ec 10             	sub    esp,0x10
c000a909:	6a 0a                	push   0xa
c000a90b:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a90f:	50                   	push   eax
c000a910:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000a914:	50                   	push   eax
c000a915:	e8 0d ff ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a91a:	50                   	push   eax
c000a91b:	e8 c7 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a920:	83 c4 20             	add    esp,0x20
c000a923:	c3                   	ret    

c000a924 <Dbg::logWriteIntBase(unsigned int, int)>:
c000a924:	83 ec 10             	sub    esp,0x10
c000a927:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000a92b:	50                   	push   eax
c000a92c:	8d 44 24 08          	lea    eax,[esp+0x8]
c000a930:	50                   	push   eax
c000a931:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000a935:	52                   	push   edx
c000a936:	e8 ec fe ff ff       	call   c000a827 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c000a93b:	50                   	push   eax
c000a93c:	e8 a6 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a941:	83 c4 20             	add    esp,0x20
c000a944:	c3                   	ret    

c000a945 <Dbg::kprintf(char const*, ...)>:
c000a945:	55                   	push   ebp
c000a946:	57                   	push   edi
c000a947:	56                   	push   esi
c000a948:	53                   	push   ebx
c000a949:	83 ec 0c             	sub    esp,0xc
c000a94c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000a950:	f6 05 d0 5e 02 c0 10 	test   BYTE PTR ds:0xc0025ed0,0x10
c000a957:	74 08                	je     c000a961 <Dbg::kprintf(char const*, ...)+0x1c>
c000a959:	83 c4 0c             	add    esp,0xc
c000a95c:	5b                   	pop    ebx
c000a95d:	5e                   	pop    esi
c000a95e:	5f                   	pop    edi
c000a95f:	5d                   	pop    ebp
c000a960:	c3                   	ret    
c000a961:	8d 44 24 24          	lea    eax,[esp+0x24]
c000a965:	31 ff                	xor    edi,edi
c000a967:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000a96b:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c000a96e:	85 c0                	test   eax,eax
c000a970:	74 e7                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a972:	8d 77 01             	lea    esi,[edi+0x1]
c000a975:	83 f8 25             	cmp    eax,0x25
c000a978:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a97b:	75 47                	jne    c000a9c4 <Dbg::kprintf(char const*, ...)+0x7f>
c000a97d:	83 c7 02             	add    edi,0x2
c000a980:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000a983:	8d 34 3b             	lea    esi,[ebx+edi*1]
c000a986:	83 e8 25             	sub    eax,0x25
c000a989:	0f b6 c0             	movzx  eax,al
c000a98c:	83 f8 53             	cmp    eax,0x53
c000a98f:	0f 87 ce 00 00 00    	ja     c000aa63 <Dbg::kprintf(char const*, ...)+0x11e>
c000a995:	ff 24 85 dc 0d 02 c0 	jmp    DWORD PTR [eax*4-0x3ffdf224]
c000a99c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9a0:	89 c8                	mov    eax,ecx
c000a9a2:	83 c1 04             	add    ecx,0x4
c000a9a5:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9a9:	8b 28                	mov    ebp,DWORD PTR [eax]
c000a9ab:	55                   	push   ebp
c000a9ac:	e8 55 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9b1:	58                   	pop    eax
c000a9b2:	0f be 06             	movsx  eax,BYTE PTR [esi]
c000a9b5:	85 c0                	test   eax,eax
c000a9b7:	74 a0                	je     c000a959 <Dbg::kprintf(char const*, ...)+0x14>
c000a9b9:	8d 77 01             	lea    esi,[edi+0x1]
c000a9bc:	83 f8 25             	cmp    eax,0x25
c000a9bf:	8d 2c 33             	lea    ebp,[ebx+esi*1]
c000a9c2:	74 b9                	je     c000a97d <Dbg::kprintf(char const*, ...)+0x38>
c000a9c4:	50                   	push   eax
c000a9c5:	89 f7                	mov    edi,esi
c000a9c7:	e8 fb fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000a9cc:	89 ee                	mov    esi,ebp
c000a9ce:	58                   	pop    eax
c000a9cf:	eb e1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9d1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000a9d5:	89 c8                	mov    eax,ecx
c000a9d7:	83 c1 04             	add    ecx,0x4
c000a9da:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9dc:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000a9e0:	50                   	push   eax
c000a9e1:	e8 01 ff ff ff       	call   c000a8e7 <Dbg::logs(char*)>
c000a9e6:	58                   	pop    eax
c000a9e7:	eb c9                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000a9e9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000a9ed:	89 d0                	mov    eax,edx
c000a9ef:	83 c2 04             	add    edx,0x4
c000a9f2:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000a9f6:	8b 00                	mov    eax,DWORD PTR [eax]
c000a9f8:	50                   	push   eax
c000a9f9:	e8 08 ff ff ff       	call   c000a906 <Dbg::logWriteInt(unsigned int)>
c000a9fe:	58                   	pop    eax
c000a9ff:	eb b1                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa01:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa05:	89 d0                	mov    eax,edx
c000aa07:	83 c2 04             	add    edx,0x4
c000aa0a:	0f be 00             	movsx  eax,BYTE PTR [eax]
c000aa0d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa11:	50                   	push   eax
c000aa12:	e8 b0 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa17:	58                   	pop    eax
c000aa18:	eb 98                	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa1a:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000aa1e:	89 c8                	mov    eax,ecx
c000aa20:	83 c1 04             	add    ecx,0x4
c000aa23:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c000aa27:	6a 10                	push   0x10
c000aa29:	8b 08                	mov    ecx,DWORD PTR [eax]
c000aa2b:	51                   	push   ecx
c000aa2c:	e8 f3 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa31:	5d                   	pop    ebp
c000aa32:	58                   	pop    eax
c000aa33:	e9 7a ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000aa3c:	89 d0                	mov    eax,edx
c000aa3e:	83 c2 08             	add    edx,0x8
c000aa41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000aa45:	6a 10                	push   0x10
c000aa47:	8b 00                	mov    eax,DWORD PTR [eax]
c000aa49:	50                   	push   eax
c000aa4a:	e8 d5 fe ff ff       	call   c000a924 <Dbg::logWriteIntBase(unsigned int, int)>
c000aa4f:	58                   	pop    eax
c000aa50:	5a                   	pop    edx
c000aa51:	e9 5c ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa56:	6a 25                	push   0x25
c000aa58:	e8 6a fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa5d:	5a                   	pop    edx
c000aa5e:	e9 4f ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa63:	6a 25                	push   0x25
c000aa65:	e8 5d fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa6a:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c000aa6e:	50                   	push   eax
c000aa6f:	e8 53 fe ff ff       	call   c000a8c7 <Dbg::logc(char)>
c000aa74:	5a                   	pop    edx
c000aa75:	59                   	pop    ecx
c000aa76:	e9 37 ff ff ff       	jmp    c000a9b2 <Dbg::kprintf(char const*, ...)+0x6d>
c000aa7b:	90                   	nop

c000aa7c <KiUbsanPrintDetails(char const*, void*)>:
c000aa7c:	83 ec 1c             	sub    esp,0x1c
c000aa7f:	83 ec 08             	sub    esp,0x8
c000aa82:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000aa86:	68 2c 0f 02 c0       	push   0xc0020f2c
c000aa8b:	e8 b5 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aa90:	83 c4 10             	add    esp,0x10
c000aa93:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000aa97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000aa9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aa9f:	8b 00                	mov    eax,DWORD PTR [eax]
c000aaa1:	83 ec 08             	sub    esp,0x8
c000aaa4:	50                   	push   eax
c000aaa5:	68 40 0f 02 c0       	push   0xc0020f40
c000aaaa:	e8 96 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aaaf:	83 c4 10             	add    esp,0x10
c000aab2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aab6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000aab9:	83 ec 08             	sub    esp,0x8
c000aabc:	50                   	push   eax
c000aabd:	68 4a 0f 02 c0       	push   0xc0020f4a
c000aac2:	e8 7e fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aac7:	83 c4 10             	add    esp,0x10
c000aaca:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000aace:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000aad1:	83 ec 08             	sub    esp,0x8
c000aad4:	50                   	push   eax
c000aad5:	68 54 0f 02 c0       	push   0xc0020f54
c000aada:	e8 66 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aadf:	83 c4 10             	add    esp,0x10
c000aae2:	90                   	nop
c000aae3:	83 c4 1c             	add    esp,0x1c
c000aae6:	c3                   	ret    
c000aae7:	90                   	nop

c000aae8 <__ubsan_handle_type_mismatch_v1>:
c000aae8:	83 ec 0c             	sub    esp,0xc
c000aaeb:	83 ec 08             	sub    esp,0x8
c000aaee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000aaf2:	68 98 10 02 c0       	push   0xc0021098
c000aaf7:	e8 80 ff ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000aafc:	83 c4 10             	add    esp,0x10
c000aaff:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c000ab04:	75 16                	jne    c000ab1c <__ubsan_handle_type_mismatch_v1+0x34>
c000ab06:	83 ec 0c             	sub    esp,0xc
c000ab09:	68 5e 0f 02 c0       	push   0xc0020f5e
c000ab0e:	e8 32 fe ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab13:	83 c4 10             	add    esp,0x10
c000ab16:	e9 91 00 00 00       	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab1b:	90                   	nop
c000ab1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab20:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab23:	85 c0                	test   eax,eax
c000ab25:	74 29                	je     c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab27:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab2b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000ab2e:	83 e8 01             	sub    eax,0x1
c000ab31:	23 44 24 14          	and    eax,DWORD PTR [esp+0x14]
c000ab35:	75 19                	jne    c000ab50 <__ubsan_handle_type_mismatch_v1+0x68>
c000ab37:	83 ec 08             	sub    esp,0x8
c000ab3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ab3e:	68 b8 10 02 c0       	push   0xc00210b8
c000ab43:	e8 fd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab48:	83 c4 10             	add    esp,0x10
c000ab4b:	eb 5f                	jmp    c000abac <__ubsan_handle_type_mismatch_v1+0xc4>
c000ab4d:	8d 76 00             	lea    esi,[esi+0x0]
c000ab50:	83 ec 0c             	sub    esp,0xc
c000ab53:	68 73 0f 02 c0       	push   0xc0020f73
c000ab58:	e8 e8 fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab5d:	83 c4 10             	add    esp,0x10
c000ab60:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab64:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab67:	0f b6 c0             	movzx  eax,al
c000ab6a:	83 ec 08             	sub    esp,0x8
c000ab6d:	50                   	push   eax
c000ab6e:	68 8d 0f 02 c0       	push   0xc0020f8d
c000ab73:	e8 cd fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ab78:	83 c4 10             	add    esp,0x10
c000ab7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab7f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c000ab82:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c000ab85:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000ab89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ab8d:	8a 40 14             	mov    al,BYTE PTR [eax+0x14]
c000ab90:	0f b6 c0             	movzx  eax,al
c000ab93:	8b 04 85 20 30 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffdcfe0]
c000ab9a:	51                   	push   ecx
c000ab9b:	52                   	push   edx
c000ab9c:	50                   	push   eax
c000ab9d:	68 e0 10 02 c0       	push   0xc00210e0
c000aba2:	e8 9e fd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000aba7:	83 c4 10             	add    esp,0x10
c000abaa:	66 90                	xchg   ax,ax
c000abac:	83 ec 0c             	sub    esp,0xc
c000abaf:	68 98 10 02 c0       	push   0xc0021098
c000abb4:	e8 c0 66 00 00       	call   c0011279 <KePanic(char const*)>
c000abb9:	83 c4 10             	add    esp,0x10
c000abbc:	90                   	nop
c000abbd:	83 c4 0c             	add    esp,0xc
c000abc0:	c3                   	ret    
c000abc1:	8d 76 00             	lea    esi,[esi+0x0]

c000abc4 <__ubsan_handle_pointer_overflow>:
c000abc4:	83 ec 0c             	sub    esp,0xc
c000abc7:	83 ec 08             	sub    esp,0x8
c000abca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abce:	68 28 11 02 c0       	push   0xc0021128
c000abd3:	e8 a4 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000abd8:	83 c4 10             	add    esp,0x10
c000abdb:	83 ec 0c             	sub    esp,0xc
c000abde:	68 28 11 02 c0       	push   0xc0021128
c000abe3:	e8 91 66 00 00       	call   c0011279 <KePanic(char const*)>
c000abe8:	83 c4 10             	add    esp,0x10
c000abeb:	90                   	nop
c000abec:	83 c4 0c             	add    esp,0xc
c000abef:	c3                   	ret    

c000abf0 <__ubsan_handle_out_of_bounds>:
c000abf0:	83 ec 0c             	sub    esp,0xc
c000abf3:	83 ec 08             	sub    esp,0x8
c000abf6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000abfa:	68 98 0f 02 c0       	push   0xc0020f98
c000abff:	e8 78 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac04:	83 c4 10             	add    esp,0x10
c000ac07:	83 ec 0c             	sub    esp,0xc
c000ac0a:	68 98 0f 02 c0       	push   0xc0020f98
c000ac0f:	e8 65 66 00 00       	call   c0011279 <KePanic(char const*)>
c000ac14:	83 c4 10             	add    esp,0x10
c000ac17:	90                   	nop
c000ac18:	83 c4 0c             	add    esp,0xc
c000ac1b:	c3                   	ret    

c000ac1c <__ubsan_handle_add_overflow>:
c000ac1c:	83 ec 0c             	sub    esp,0xc
c000ac1f:	83 ec 08             	sub    esp,0x8
c000ac22:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac26:	68 b5 0f 02 c0       	push   0xc0020fb5
c000ac2b:	e8 4c fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac30:	83 c4 10             	add    esp,0x10
c000ac33:	83 ec 0c             	sub    esp,0xc
c000ac36:	68 b5 0f 02 c0       	push   0xc0020fb5
c000ac3b:	e8 39 66 00 00       	call   c0011279 <KePanic(char const*)>
c000ac40:	83 c4 10             	add    esp,0x10
c000ac43:	90                   	nop
c000ac44:	83 c4 0c             	add    esp,0xc
c000ac47:	c3                   	ret    

c000ac48 <__ubsan_handle_load_invalid_value>:
c000ac48:	83 ec 0c             	sub    esp,0xc
c000ac4b:	83 ec 08             	sub    esp,0x8
c000ac4e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac52:	68 48 11 02 c0       	push   0xc0021148
c000ac57:	e8 20 fe ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac5c:	83 c4 10             	add    esp,0x10
c000ac5f:	83 ec 0c             	sub    esp,0xc
c000ac62:	68 48 11 02 c0       	push   0xc0021148
c000ac67:	e8 0d 66 00 00       	call   c0011279 <KePanic(char const*)>
c000ac6c:	83 c4 10             	add    esp,0x10
c000ac6f:	90                   	nop
c000ac70:	83 c4 0c             	add    esp,0xc
c000ac73:	c3                   	ret    

c000ac74 <__ubsan_handle_divrem_overflow>:
c000ac74:	83 ec 0c             	sub    esp,0xc
c000ac77:	83 ec 08             	sub    esp,0x8
c000ac7a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ac7e:	68 6c 11 02 c0       	push   0xc002116c
c000ac83:	e8 f4 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ac88:	83 c4 10             	add    esp,0x10
c000ac8b:	83 ec 0c             	sub    esp,0xc
c000ac8e:	68 6c 11 02 c0       	push   0xc002116c
c000ac93:	e8 e1 65 00 00       	call   c0011279 <KePanic(char const*)>
c000ac98:	83 c4 10             	add    esp,0x10
c000ac9b:	90                   	nop
c000ac9c:	83 c4 0c             	add    esp,0xc
c000ac9f:	c3                   	ret    

c000aca0 <__ubsan_handle_mul_overflow>:
c000aca0:	83 ec 0c             	sub    esp,0xc
c000aca3:	83 ec 08             	sub    esp,0x8
c000aca6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acaa:	68 d1 0f 02 c0       	push   0xc0020fd1
c000acaf:	e8 c8 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000acb4:	83 c4 10             	add    esp,0x10
c000acb7:	83 ec 0c             	sub    esp,0xc
c000acba:	68 d1 0f 02 c0       	push   0xc0020fd1
c000acbf:	e8 b5 65 00 00       	call   c0011279 <KePanic(char const*)>
c000acc4:	83 c4 10             	add    esp,0x10
c000acc7:	90                   	nop
c000acc8:	83 c4 0c             	add    esp,0xc
c000accb:	c3                   	ret    

c000accc <__ubsan_handle_sub_overflow>:
c000accc:	83 ec 0c             	sub    esp,0xc
c000accf:	83 ec 08             	sub    esp,0x8
c000acd2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000acd6:	68 ed 0f 02 c0       	push   0xc0020fed
c000acdb:	e8 9c fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ace0:	83 c4 10             	add    esp,0x10
c000ace3:	83 ec 0c             	sub    esp,0xc
c000ace6:	68 ed 0f 02 c0       	push   0xc0020fed
c000aceb:	e8 89 65 00 00       	call   c0011279 <KePanic(char const*)>
c000acf0:	83 c4 10             	add    esp,0x10
c000acf3:	90                   	nop
c000acf4:	83 c4 0c             	add    esp,0xc
c000acf7:	c3                   	ret    

c000acf8 <__ubsan_handle_shift_out_of_bounds>:
c000acf8:	83 ec 0c             	sub    esp,0xc
c000acfb:	83 ec 08             	sub    esp,0x8
c000acfe:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad02:	68 8c 11 02 c0       	push   0xc002118c
c000ad07:	e8 70 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad0c:	83 c4 10             	add    esp,0x10
c000ad0f:	83 ec 0c             	sub    esp,0xc
c000ad12:	68 8c 11 02 c0       	push   0xc002118c
c000ad17:	e8 5d 65 00 00       	call   c0011279 <KePanic(char const*)>
c000ad1c:	83 c4 10             	add    esp,0x10
c000ad1f:	90                   	nop
c000ad20:	83 c4 0c             	add    esp,0xc
c000ad23:	c3                   	ret    

c000ad24 <__ubsan_handle_negate_overflow>:
c000ad24:	83 ec 0c             	sub    esp,0xc
c000ad27:	83 ec 08             	sub    esp,0x8
c000ad2a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ad2e:	68 b0 11 02 c0       	push   0xc00211b0
c000ad33:	e8 44 fd ff ff       	call   c000aa7c <KiUbsanPrintDetails(char const*, void*)>
c000ad38:	83 c4 10             	add    esp,0x10
c000ad3b:	83 ec 0c             	sub    esp,0xc
c000ad3e:	68 b0 11 02 c0       	push   0xc00211b0
c000ad43:	e8 31 65 00 00       	call   c0011279 <KePanic(char const*)>
c000ad48:	83 c4 10             	add    esp,0x10
c000ad4b:	90                   	nop
c000ad4c:	83 c4 0c             	add    esp,0xc
c000ad4f:	c3                   	ret    

c000ad50 <KiCreateSymlinkID()>:
c000ad50:	55                   	push   ebp
c000ad51:	57                   	push   edi
c000ad52:	56                   	push   esi
c000ad53:	53                   	push   ebx
c000ad54:	31 db                	xor    ebx,ebx
c000ad56:	83 ec 1c             	sub    esp,0x1c
c000ad59:	e8 69 66 00 00       	call   c00113c7 <KeRand()>
c000ad5e:	43                   	inc    ebx
c000ad5f:	8b 2d 00 64 02 c0    	mov    ebp,DWORD PTR ds:0xc0026400
c000ad65:	31 d2                	xor    edx,edx
c000ad67:	8d 4d 01             	lea    ecx,[ebp+0x1]
c000ad6a:	0f a4 c2 1b          	shld   edx,eax,0x1b
c000ad6e:	89 0d 00 64 02 c0    	mov    DWORD PTR ds:0xc0026400,ecx
c000ad74:	c1 e0 1b             	shl    eax,0x1b
c000ad77:	89 d7                	mov    edi,edx
c000ad79:	89 c6                	mov    esi,eax
c000ad7b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000ad7f:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ad87:	81 fb 9a 02 00 00    	cmp    ebx,0x29a
c000ad8d:	75 10                	jne    c000ad9f <KiCreateSymlinkID()+0x4f>
c000ad8f:	83 ec 0c             	sub    esp,0xc
c000ad92:	68 cf 11 02 c0       	push   0xc00211cf
c000ad97:	e8 dd 64 00 00       	call   c0011279 <KePanic(char const*)>
c000ad9c:	83 c4 10             	add    esp,0x10
c000ad9f:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000ada3:	75 04                	jne    c000ada9 <KiCreateSymlinkID()+0x59>
c000ada5:	39 f5                	cmp    ebp,esi
c000ada7:	74 b0                	je     c000ad59 <KiCreateSymlinkID()+0x9>
c000ada9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000adad:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000adb1:	31 f0                	xor    eax,esi
c000adb3:	83 c4 1c             	add    esp,0x1c
c000adb6:	31 fa                	xor    edx,edi
c000adb8:	5b                   	pop    ebx
c000adb9:	5e                   	pop    esi
c000adba:	5f                   	pop    edi
c000adbb:	5d                   	pop    ebp
c000adbc:	c3                   	ret    

c000adbd <KiFlushSymlinkChanges()>:
c000adbd:	56                   	push   esi
c000adbe:	53                   	push   ebx
c000adbf:	83 ec 20             	sub    esp,0x20
c000adc2:	68 14 01 00 00       	push   0x114
c000adc7:	e8 ea cc ff ff       	call   c0007ab6 <malloc>
c000adcc:	83 c4 0c             	add    esp,0xc
c000adcf:	89 c3                	mov    ebx,eax
c000add1:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000add7:	68 d8 11 02 c0       	push   0xc00211d8
c000addc:	50                   	push   eax
c000addd:	e8 60 09 00 00       	call   c000b742 <File::File(char const*, Process*)>
c000ade2:	83 c4 10             	add    esp,0x10
c000ade5:	85 db                	test   ebx,ebx
c000ade7:	75 10                	jne    c000adf9 <KiFlushSymlinkChanges()+0x3c>
c000ade9:	83 ec 0c             	sub    esp,0xc
c000adec:	68 f6 11 02 c0       	push   0xc00211f6
c000adf1:	e8 83 64 00 00       	call   c0011279 <KePanic(char const*)>
c000adf6:	83 c4 10             	add    esp,0x10
c000adf9:	50                   	push   eax
c000adfa:	50                   	push   eax
c000adfb:	6a 06                	push   0x6
c000adfd:	53                   	push   ebx
c000adfe:	e8 fb 09 00 00       	call   c000b7fe <File::open(FileOpenMode)>
c000ae03:	83 c4 10             	add    esp,0x10
c000ae06:	85 c0                	test   eax,eax
c000ae08:	74 10                	je     c000ae1a <KiFlushSymlinkChanges()+0x5d>
c000ae0a:	83 ec 0c             	sub    esp,0xc
c000ae0d:	68 10 12 02 c0       	push   0xc0021210
c000ae12:	e8 62 64 00 00       	call   c0011279 <KePanic(char const*)>
c000ae17:	83 c4 10             	add    esp,0x10
c000ae1a:	31 f6                	xor    esi,esi
c000ae1c:	39 35 c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,esi
c000ae22:	7e 40                	jle    c000ae64 <KiFlushSymlinkChanges()+0xa7>
c000ae24:	83 ec 0c             	sub    esp,0xc
c000ae27:	8b 13                	mov    edx,DWORD PTR [ebx]
c000ae29:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ae2d:	50                   	push   eax
c000ae2e:	89 f0                	mov    eax,esi
c000ae30:	c1 e0 08             	shl    eax,0x8
c000ae33:	05 00 60 02 c0       	add    eax,0xc0026000
c000ae38:	50                   	push   eax
c000ae39:	6a 00                	push   0x0
c000ae3b:	68 00 01 00 00       	push   0x100
c000ae40:	53                   	push   ebx
c000ae41:	ff 52 10             	call   DWORD PTR [edx+0x10]
c000ae44:	83 c4 20             	add    esp,0x20
c000ae47:	81 7c 24 0c 00 01 00 00 	cmp    DWORD PTR [esp+0xc],0x100
c000ae4f:	74 10                	je     c000ae61 <KiFlushSymlinkChanges()+0xa4>
c000ae51:	83 ec 0c             	sub    esp,0xc
c000ae54:	68 2a 12 02 c0       	push   0xc002122a
c000ae59:	e8 1b 64 00 00       	call   c0011279 <KePanic(char const*)>
c000ae5e:	83 c4 10             	add    esp,0x10
c000ae61:	46                   	inc    esi
c000ae62:	eb b8                	jmp    c000ae1c <KiFlushSymlinkChanges()+0x5f>
c000ae64:	83 ec 0c             	sub    esp,0xc
c000ae67:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000ae71:	53                   	push   ebx
c000ae72:	e8 e5 09 00 00       	call   c000b85c <File::close()>
c000ae77:	83 c4 10             	add    esp,0x10
c000ae7a:	85 db                	test   ebx,ebx
c000ae7c:	74 0c                	je     c000ae8a <KiFlushSymlinkChanges()+0xcd>
c000ae7e:	83 ec 0c             	sub    esp,0xc
c000ae81:	8b 03                	mov    eax,DWORD PTR [ebx]
c000ae83:	53                   	push   ebx
c000ae84:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000ae87:	83 c4 10             	add    esp,0x10
c000ae8a:	83 c4 14             	add    esp,0x14
c000ae8d:	5b                   	pop    ebx
c000ae8e:	5e                   	pop    esi
c000ae8f:	c3                   	ret    

c000ae90 <KiDeinitialiseSymlinks(void*)>:
c000ae90:	e9 28 ff ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>

c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>:
c000ae95:	53                   	push   ebx
c000ae96:	83 ec 0c             	sub    esp,0xc
c000ae99:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000ae9d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000aea1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000aea5:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aeaa:	68 00 01 00 00       	push   0x100
c000aeaf:	89 14 c5 e0 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda020],edx
c000aeb6:	6a 00                	push   0x0
c000aeb8:	89 0c c5 e4 5f 02 c0 	mov    DWORD PTR [eax*8-0x3ffda01c],ecx
c000aebf:	c1 e0 08             	shl    eax,0x8
c000aec2:	05 00 60 02 c0       	add    eax,0xc0026000
c000aec7:	50                   	push   eax
c000aec8:	e8 23 56 ff ff       	call   c00004f0 <memset>
c000aecd:	58                   	pop    eax
c000aece:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aed3:	5a                   	pop    edx
c000aed4:	c1 e0 08             	shl    eax,0x8
c000aed7:	53                   	push   ebx
c000aed8:	05 00 60 02 c0       	add    eax,0xc0026000
c000aedd:	50                   	push   eax
c000aede:	e8 5d 57 ff ff       	call   c0000640 <strcpy>
c000aee3:	a1 c0 5f 02 c0       	mov    eax,ds:0xc0025fc0
c000aee8:	83 c4 10             	add    esp,0x10
c000aeeb:	40                   	inc    eax
c000aeec:	a3 c0 5f 02 c0       	mov    ds:0xc0025fc0,eax
c000aef1:	83 f8 03             	cmp    eax,0x3
c000aef4:	7e 09                	jle    c000aeff <KeRegisterSymlink(char const*, unsigned long long)+0x6a>
c000aef6:	83 c4 08             	add    esp,0x8
c000aef9:	5b                   	pop    ebx
c000aefa:	e9 be fe ff ff       	jmp    c000adbd <KiFlushSymlinkChanges()>
c000aeff:	83 c4 08             	add    esp,0x8
c000af02:	5b                   	pop    ebx
c000af03:	c3                   	ret    

c000af04 <KiIsSymlinkRegistered(char const*)>:
c000af04:	53                   	push   ebx
c000af05:	31 db                	xor    ebx,ebx
c000af07:	83 ec 08             	sub    esp,0x8
c000af0a:	39 1d c0 5f 02 c0    	cmp    DWORD PTR ds:0xc0025fc0,ebx
c000af10:	7e 30                	jle    c000af42 <KiIsSymlinkRegistered(char const*)+0x3e>
c000af12:	50                   	push   eax
c000af13:	50                   	push   eax
c000af14:	89 d8                	mov    eax,ebx
c000af16:	c1 e0 08             	shl    eax,0x8
c000af19:	05 00 60 02 c0       	add    eax,0xc0026000
c000af1e:	50                   	push   eax
c000af1f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000af23:	e8 28 58 ff ff       	call   c0000750 <strcmp>
c000af28:	83 c4 10             	add    esp,0x10
c000af2b:	85 c0                	test   eax,eax
c000af2d:	75 10                	jne    c000af3f <KiIsSymlinkRegistered(char const*)+0x3b>
c000af2f:	8b 04 dd e0 5f 02 c0 	mov    eax,DWORD PTR [ebx*8-0x3ffda020]
c000af36:	8b 14 dd e4 5f 02 c0 	mov    edx,DWORD PTR [ebx*8-0x3ffda01c]
c000af3d:	eb 07                	jmp    c000af46 <KiIsSymlinkRegistered(char const*)+0x42>
c000af3f:	43                   	inc    ebx
c000af40:	eb c8                	jmp    c000af0a <KiIsSymlinkRegistered(char const*)+0x6>
c000af42:	31 c0                	xor    eax,eax
c000af44:	31 d2                	xor    edx,edx
c000af46:	83 c4 08             	add    esp,0x8
c000af49:	5b                   	pop    ebx
c000af4a:	c3                   	ret    

c000af4b <KeDereferenceSymlink(char const*, char*)>:
c000af4b:	55                   	push   ebp
c000af4c:	57                   	push   edi
c000af4d:	56                   	push   esi
c000af4e:	53                   	push   ebx
c000af4f:	83 ec 58             	sub    esp,0x58
c000af52:	8b 6c 24 6c          	mov    ebp,DWORD PTR [esp+0x6c]
c000af56:	55                   	push   ebp
c000af57:	e8 a8 ff ff ff       	call   c000af04 <KiIsSymlinkRegistered(char const*)>
c000af5c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000af60:	83 c4 10             	add    esp,0x10
c000af63:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000af67:	09 d0                	or     eax,edx
c000af69:	75 07                	jne    c000af72 <KeDereferenceSymlink(char const*, char*)+0x27>
c000af6b:	31 ed                	xor    ebp,ebp
c000af6d:	e9 86 01 00 00       	jmp    c000b0f8 <KeDereferenceSymlink(char const*, char*)+0x1ad>
c000af72:	83 ec 0c             	sub    esp,0xc
c000af75:	89 d7                	mov    edi,edx
c000af77:	68 14 01 00 00       	push   0x114
c000af7c:	e8 35 cb ff ff       	call   c0007ab6 <malloc>
c000af81:	83 c4 0c             	add    esp,0xc
c000af84:	89 c3                	mov    ebx,eax
c000af86:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000af8c:	55                   	push   ebp
c000af8d:	50                   	push   eax
c000af8e:	e8 af 07 00 00       	call   c000b742 <File::File(char const*, Process*)>
c000af93:	83 c4 10             	add    esp,0x10
c000af96:	85 db                	test   ebx,ebx
c000af98:	0f 84 41 01 00 00    	je     c000b0df <KeDereferenceSymlink(char const*, char*)+0x194>
c000af9e:	51                   	push   ecx
c000af9f:	51                   	push   ecx
c000afa0:	6a 01                	push   0x1
c000afa2:	53                   	push   ebx
c000afa3:	e8 56 08 00 00       	call   c000b7fe <File::open(FileOpenMode)>
c000afa8:	83 c4 10             	add    esp,0x10
c000afab:	85 c0                	test   eax,eax
c000afad:	8b 03                	mov    eax,DWORD PTR [ebx]
c000afaf:	74 09                	je     c000afba <KeDereferenceSymlink(char const*, char*)+0x6f>
c000afb1:	83 ec 0c             	sub    esp,0xc
c000afb4:	53                   	push   ebx
c000afb5:	e9 1f 01 00 00       	jmp    c000b0d9 <KeDereferenceSymlink(char const*, char*)+0x18e>
c000afba:	83 ec 0c             	sub    esp,0xc
c000afbd:	8d 74 24 28          	lea    esi,[esp+0x28]
c000afc1:	56                   	push   esi
c000afc2:	8d 6c 24 47          	lea    ebp,[esp+0x47]
c000afc6:	55                   	push   ebp
c000afc7:	6a 00                	push   0x0
c000afc9:	6a 08                	push   0x8
c000afcb:	53                   	push   ebx
c000afcc:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000afcf:	83 c4 20             	add    esp,0x20
c000afd2:	85 c0                	test   eax,eax
c000afd4:	0f 85 f1 00 00 00    	jne    c000b0cb <KeDereferenceSymlink(char const*, char*)+0x180>
c000afda:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000afdf:	0f 85 e6 00 00 00    	jne    c000b0cb <KeDereferenceSymlink(char const*, char*)+0x180>
c000afe5:	52                   	push   edx
c000afe6:	52                   	push   edx
c000afe7:	68 44 12 02 c0       	push   0xc0021244
c000afec:	55                   	push   ebp
c000afed:	e8 5e 57 ff ff       	call   c0000750 <strcmp>
c000aff2:	83 c4 10             	add    esp,0x10
c000aff5:	89 c5                	mov    ebp,eax
c000aff7:	85 c0                	test   eax,eax
c000aff9:	0f 85 cc 00 00 00    	jne    c000b0cb <KeDereferenceSymlink(char const*, char*)+0x180>
c000afff:	83 ec 0c             	sub    esp,0xc
c000b002:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b004:	56                   	push   esi
c000b005:	8d 4c 24 30          	lea    ecx,[esp+0x30]
c000b009:	51                   	push   ecx
c000b00a:	6a 00                	push   0x0
c000b00c:	6a 08                	push   0x8
c000b00e:	53                   	push   ebx
c000b00f:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b012:	83 c4 20             	add    esp,0x20
c000b015:	85 c0                	test   eax,eax
c000b017:	0f 85 ae 00 00 00    	jne    c000b0cb <KeDereferenceSymlink(char const*, char*)+0x180>
c000b01d:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c000b022:	0f 85 a3 00 00 00    	jne    c000b0cb <KeDereferenceSymlink(char const*, char*)+0x180>
c000b028:	39 7c 24 24          	cmp    DWORD PTR [esp+0x24],edi
c000b02c:	0f 85 39 ff ff ff    	jne    c000af6b <KeDereferenceSymlink(char const*, char*)+0x20>
c000b032:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000b036:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c000b03a:	0f 85 2b ff ff ff    	jne    c000af6b <KeDereferenceSymlink(char const*, char*)+0x20>
c000b040:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c000b048:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000b050:	50                   	push   eax
c000b051:	8d 44 24 1f          	lea    eax,[esp+0x1f]
c000b055:	50                   	push   eax
c000b056:	8d 44 24 30          	lea    eax,[esp+0x30]
c000b05a:	50                   	push   eax
c000b05b:	53                   	push   ebx
c000b05c:	e8 9f 0a 00 00       	call   c000bb00 <File::stat(unsigned long long*, bool*)>
c000b061:	83 c4 10             	add    esp,0x10
c000b064:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c000b069:	85 c0                	test   eax,eax
c000b06b:	75 5e                	jne    c000b0cb <KeDereferenceSymlink(char const*, char*)+0x180>
c000b06d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c000b071:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c000b075:	b9 0f 00 00 00       	mov    ecx,0xf
c000b07a:	89 c2                	mov    edx,eax
c000b07c:	39 f1                	cmp    ecx,esi
c000b07e:	19 fa                	sbb    edx,edi
c000b080:	73 49                	jae    c000b0cb <KeDereferenceSymlink(char const*, char*)+0x180>
c000b082:	83 c6 f0             	add    esi,0xfffffff0
c000b085:	b9 ff 00 00 00       	mov    ecx,0xff
c000b08a:	83 d7 ff             	adc    edi,0xffffffff
c000b08d:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c000b091:	39 f1                	cmp    ecx,esi
c000b093:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c000b097:	19 f8                	sbb    eax,edi
c000b099:	72 44                	jb     c000b0df <KeDereferenceSymlink(char const*, char*)+0x194>
c000b09b:	83 ec 0c             	sub    esp,0xc
c000b09e:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0a0:	8d 4c 24 28          	lea    ecx,[esp+0x28]
c000b0a4:	51                   	push   ecx
c000b0a5:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000b0a9:	57                   	push   edi
c000b0aa:	56                   	push   esi
c000b0ab:	53                   	push   ebx
c000b0ac:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000b0af:	83 c4 20             	add    esp,0x20
c000b0b2:	85 c0                	test   eax,eax
c000b0b4:	75 15                	jne    c000b0cb <KeDereferenceSymlink(char const*, char*)+0x180>
c000b0b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000b0ba:	89 c7                	mov    edi,eax
c000b0bc:	c1 ff 1f             	sar    edi,0x1f
c000b0bf:	3b 7c 24 2c          	cmp    edi,DWORD PTR [esp+0x2c]
c000b0c3:	75 06                	jne    c000b0cb <KeDereferenceSymlink(char const*, char*)+0x180>
c000b0c5:	3b 44 24 28          	cmp    eax,DWORD PTR [esp+0x28]
c000b0c9:	74 19                	je     c000b0e4 <KeDereferenceSymlink(char const*, char*)+0x199>
c000b0cb:	83 ec 0c             	sub    esp,0xc
c000b0ce:	53                   	push   ebx
c000b0cf:	e8 88 07 00 00       	call   c000b85c <File::close()>
c000b0d4:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0d6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0d9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0dc:	83 c4 10             	add    esp,0x10
c000b0df:	83 cd ff             	or     ebp,0xffffffff
c000b0e2:	eb 14                	jmp    c000b0f8 <KeDereferenceSymlink(char const*, char*)+0x1ad>
c000b0e4:	83 ec 0c             	sub    esp,0xc
c000b0e7:	53                   	push   ebx
c000b0e8:	e8 6f 07 00 00       	call   c000b85c <File::close()>
c000b0ed:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b0ef:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b0f2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b0f5:	83 c4 10             	add    esp,0x10
c000b0f8:	83 c4 4c             	add    esp,0x4c
c000b0fb:	89 e8                	mov    eax,ebp
c000b0fd:	5b                   	pop    ebx
c000b0fe:	5e                   	pop    esi
c000b0ff:	5f                   	pop    edi
c000b100:	5d                   	pop    ebp
c000b101:	c3                   	ret    

c000b102 <KeCreateSymlink(char const*, char const*)>:
c000b102:	55                   	push   ebp
c000b103:	57                   	push   edi
c000b104:	56                   	push   esi
c000b105:	53                   	push   ebx
c000b106:	83 ec 38             	sub    esp,0x38
c000b109:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c000b10d:	68 14 01 00 00       	push   0x114
c000b112:	e8 9f c9 ff ff       	call   c0007ab6 <malloc>
c000b117:	83 c4 0c             	add    esp,0xc
c000b11a:	89 c3                	mov    ebx,eax
c000b11c:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b122:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000b126:	50                   	push   eax
c000b127:	e8 16 06 00 00       	call   c000b742 <File::File(char const*, Process*)>
c000b12c:	83 c4 10             	add    esp,0x10
c000b12f:	b8 01 00 00 00       	mov    eax,0x1
c000b134:	85 db                	test   ebx,ebx
c000b136:	0f 84 fb 00 00 00    	je     c000b237 <KeCreateSymlink(char const*, char const*)+0x135>
c000b13c:	52                   	push   edx
c000b13d:	52                   	push   edx
c000b13e:	6a 12                	push   0x12
c000b140:	53                   	push   ebx
c000b141:	e8 b8 06 00 00       	call   c000b7fe <File::open(FileOpenMode)>
c000b146:	83 c4 10             	add    esp,0x10
c000b149:	85 c0                	test   eax,eax
c000b14b:	74 0b                	je     c000b158 <KeCreateSymlink(char const*, char const*)+0x56>
c000b14d:	83 ec 0c             	sub    esp,0xc
c000b150:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b152:	53                   	push   ebx
c000b153:	e9 d4 00 00 00       	jmp    c000b22c <KeCreateSymlink(char const*, char const*)+0x12a>
c000b158:	8d 7c 24 17          	lea    edi,[esp+0x17]
c000b15c:	be b2 12 02 c0       	mov    esi,0xc00212b2
c000b161:	b9 09 00 00 00       	mov    ecx,0x9
c000b166:	fc                   	cld    
c000b167:	83 ec 0c             	sub    esp,0xc
c000b16a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000b16c:	8d 74 24 10          	lea    esi,[esp+0x10]
c000b170:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b172:	56                   	push   esi
c000b173:	8d 54 24 27          	lea    edx,[esp+0x27]
c000b177:	52                   	push   edx
c000b178:	6a 00                	push   0x0
c000b17a:	6a 08                	push   0x8
c000b17c:	53                   	push   ebx
c000b17d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b180:	83 c4 20             	add    esp,0x20
c000b183:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b188:	0f 85 90 00 00 00    	jne    c000b21e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b18e:	85 c0                	test   eax,eax
c000b190:	0f 85 88 00 00 00    	jne    c000b21e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b196:	e8 b5 fb ff ff       	call   c000ad50 <KiCreateSymlinkID()>
c000b19b:	83 ec 0c             	sub    esp,0xc
c000b19e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000b1a2:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b1a6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1a8:	56                   	push   esi
c000b1a9:	8d 54 24 18          	lea    edx,[esp+0x18]
c000b1ad:	52                   	push   edx
c000b1ae:	6a 00                	push   0x0
c000b1b0:	6a 08                	push   0x8
c000b1b2:	53                   	push   ebx
c000b1b3:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b1b6:	83 c4 20             	add    esp,0x20
c000b1b9:	83 7c 24 04 08       	cmp    DWORD PTR [esp+0x4],0x8
c000b1be:	75 5e                	jne    c000b21e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1c0:	85 c0                	test   eax,eax
c000b1c2:	75 5a                	jne    c000b21e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1c4:	83 ec 0c             	sub    esp,0xc
c000b1c7:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b1c9:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c000b1cc:	55                   	push   ebp
c000b1cd:	e8 9e 53 ff ff       	call   c0000570 <strlen>
c000b1d2:	89 34 24             	mov    DWORD PTR [esp],esi
c000b1d5:	31 d2                	xor    edx,edx
c000b1d7:	55                   	push   ebp
c000b1d8:	52                   	push   edx
c000b1d9:	50                   	push   eax
c000b1da:	53                   	push   ebx
c000b1db:	ff d7                	call   edi
c000b1dd:	83 c4 14             	add    esp,0x14
c000b1e0:	89 c6                	mov    esi,eax
c000b1e2:	55                   	push   ebp
c000b1e3:	e8 88 53 ff ff       	call   c0000570 <strlen>
c000b1e8:	83 c4 10             	add    esp,0x10
c000b1eb:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c000b1ef:	75 2d                	jne    c000b21e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1f1:	85 f6                	test   esi,esi
c000b1f3:	75 29                	jne    c000b21e <KeCreateSymlink(char const*, char const*)+0x11c>
c000b1f5:	50                   	push   eax
c000b1f6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1fa:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1fe:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c000b202:	e8 8e fc ff ff       	call   c000ae95 <KeRegisterSymlink(char const*, unsigned long long)>
c000b207:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b20a:	e8 4d 06 00 00       	call   c000b85c <File::close()>
c000b20f:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b211:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b214:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b217:	83 c4 10             	add    esp,0x10
c000b21a:	31 c0                	xor    eax,eax
c000b21c:	eb 19                	jmp    c000b237 <KeCreateSymlink(char const*, char const*)+0x135>
c000b21e:	83 ec 0c             	sub    esp,0xc
c000b221:	53                   	push   ebx
c000b222:	e8 35 06 00 00       	call   c000b85c <File::close()>
c000b227:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b229:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000b22c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b22f:	83 c4 10             	add    esp,0x10
c000b232:	b8 01 00 00 00       	mov    eax,0x1
c000b237:	83 c4 2c             	add    esp,0x2c
c000b23a:	5b                   	pop    ebx
c000b23b:	5e                   	pop    esi
c000b23c:	5f                   	pop    edi
c000b23d:	5d                   	pop    ebp
c000b23e:	c3                   	ret    

c000b23f <KeInitialiseSymlinks()>:
c000b23f:	53                   	push   ebx
c000b240:	83 ec 10             	sub    esp,0x10
c000b243:	c7 05 c0 5f 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0025fc0,0x0
c000b24d:	6a 00                	push   0x0
c000b24f:	68 90 ae 00 c0       	push   0xc000ae90
c000b254:	e8 37 58 00 00       	call   c0010a90 <KeRegisterAtexit(void (*)(void*), void*)>
c000b259:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c000b260:	e8 51 c8 ff ff       	call   c0007ab6 <malloc>
c000b265:	83 c4 0c             	add    esp,0xc
c000b268:	89 c3                	mov    ebx,eax
c000b26a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000b270:	68 d8 11 02 c0       	push   0xc00211d8
c000b275:	50                   	push   eax
c000b276:	e8 c7 04 00 00       	call   c000b742 <File::File(char const*, Process*)>
c000b27b:	83 c4 10             	add    esp,0x10
c000b27e:	85 db                	test   ebx,ebx
c000b280:	75 10                	jne    c000b292 <KeInitialiseSymlinks()+0x53>
c000b282:	83 ec 0c             	sub    esp,0xc
c000b285:	68 4c 12 02 c0       	push   0xc002124c
c000b28a:	e8 ea 5f 00 00       	call   c0011279 <KePanic(char const*)>
c000b28f:	83 c4 10             	add    esp,0x10
c000b292:	83 ec 0c             	sub    esp,0xc
c000b295:	53                   	push   ebx
c000b296:	e8 27 08 00 00       	call   c000bac2 <File::exists()>
c000b29b:	83 c4 10             	add    esp,0x10
c000b29e:	84 c0                	test   al,al
c000b2a0:	75 2d                	jne    c000b2cf <KeInitialiseSymlinks()+0x90>
c000b2a2:	52                   	push   edx
c000b2a3:	52                   	push   edx
c000b2a4:	6a 12                	push   0x12
c000b2a6:	53                   	push   ebx
c000b2a7:	e8 52 05 00 00       	call   c000b7fe <File::open(FileOpenMode)>
c000b2ac:	83 c4 10             	add    esp,0x10
c000b2af:	85 c0                	test   eax,eax
c000b2b1:	74 10                	je     c000b2c3 <KeInitialiseSymlinks()+0x84>
c000b2b3:	83 ec 0c             	sub    esp,0xc
c000b2b6:	68 69 12 02 c0       	push   0xc0021269
c000b2bb:	e8 b9 5f 00 00       	call   c0011279 <KePanic(char const*)>
c000b2c0:	83 c4 10             	add    esp,0x10
c000b2c3:	83 ec 0c             	sub    esp,0xc
c000b2c6:	53                   	push   ebx
c000b2c7:	e8 90 05 00 00       	call   c000b85c <File::close()>
c000b2cc:	83 c4 10             	add    esp,0x10
c000b2cf:	85 db                	test   ebx,ebx
c000b2d1:	74 0c                	je     c000b2df <KeInitialiseSymlinks()+0xa0>
c000b2d3:	83 ec 0c             	sub    esp,0xc
c000b2d6:	8b 03                	mov    eax,DWORD PTR [ebx]
c000b2d8:	53                   	push   ebx
c000b2d9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000b2dc:	83 c4 10             	add    esp,0x10
c000b2df:	50                   	push   eax
c000b2e0:	50                   	push   eax
c000b2e1:	68 86 12 02 c0       	push   0xc0021286
c000b2e6:	68 94 12 02 c0       	push   0xc0021294
c000b2eb:	e8 12 fe ff ff       	call   c000b102 <KeCreateSymlink(char const*, char const*)>
c000b2f0:	83 c4 18             	add    esp,0x18
c000b2f3:	5b                   	pop    ebx
c000b2f4:	c3                   	ret    
c000b2f5:	90                   	nop

c000b2f6 <File::read(unsigned long long, void*, int*)>:
c000b2f6:	53                   	push   ebx
c000b2f7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b2fb:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b2ff:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b306:	83 f8 19             	cmp    eax,0x19
c000b309:	77 35                	ja     c000b340 <File::read(unsigned long long, void*, int*)+0x4a>
c000b30b:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b312:	85 c0                	test   eax,eax
c000b314:	74 2a                	je     c000b340 <File::read(unsigned long long, void*, int*)+0x4a>
c000b316:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b31c:	85 c0                	test   eax,eax
c000b31e:	74 20                	je     c000b340 <File::read(unsigned long long, void*, int*)+0x4a>
c000b320:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b324:	74 21                	je     c000b347 <File::read(unsigned long long, void*, int*)+0x51>
c000b326:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b328:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b32c:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b332:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b336:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b33a:	5b                   	pop    ebx
c000b33b:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c000b33e:	ff e0                	jmp    eax
c000b340:	b8 0b 00 00 00       	mov    eax,0xb
c000b345:	eb 05                	jmp    c000b34c <File::read(unsigned long long, void*, int*)+0x56>
c000b347:	b8 05 00 00 00       	mov    eax,0x5
c000b34c:	5b                   	pop    ebx
c000b34d:	c3                   	ret    

c000b34e <File::write(unsigned long long, void*, int*)>:
c000b34e:	53                   	push   ebx
c000b34f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b353:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b357:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b35e:	83 f8 19             	cmp    eax,0x19
c000b361:	77 35                	ja     c000b398 <File::write(unsigned long long, void*, int*)+0x4a>
c000b363:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b36a:	85 c0                	test   eax,eax
c000b36c:	74 2a                	je     c000b398 <File::write(unsigned long long, void*, int*)+0x4a>
c000b36e:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b374:	85 c0                	test   eax,eax
c000b376:	74 20                	je     c000b398 <File::write(unsigned long long, void*, int*)+0x4a>
c000b378:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b37c:	74 21                	je     c000b39f <File::write(unsigned long long, void*, int*)+0x51>
c000b37e:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b380:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b384:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b38a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b38e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b392:	5b                   	pop    ebx
c000b393:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c000b396:	ff e0                	jmp    eax
c000b398:	b8 0b 00 00 00       	mov    eax,0xb
c000b39d:	eb 05                	jmp    c000b3a4 <File::write(unsigned long long, void*, int*)+0x56>
c000b39f:	b8 05 00 00 00       	mov    eax,0x5
c000b3a4:	5b                   	pop    ebx
c000b3a5:	c3                   	ret    

c000b3a6 <Directory::read(unsigned long long, void*, int*)>:
c000b3a6:	53                   	push   ebx
c000b3a7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b3ab:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000b3af:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c000b3b6:	83 f8 19             	cmp    eax,0x19
c000b3b9:	77 35                	ja     c000b3f0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3bb:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b3c2:	85 c0                	test   eax,eax
c000b3c4:	74 2a                	je     c000b3f0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3c6:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b3cc:	85 c0                	test   eax,eax
c000b3ce:	74 20                	je     c000b3f0 <Directory::read(unsigned long long, void*, int*)+0x4a>
c000b3d0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b3d4:	74 21                	je     c000b3f7 <Directory::read(unsigned long long, void*, int*)+0x51>
c000b3d6:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b3d8:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000b3dc:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c000b3e2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b3e6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b3ea:	5b                   	pop    ebx
c000b3eb:	8b 41 54             	mov    eax,DWORD PTR [ecx+0x54]
c000b3ee:	ff e0                	jmp    eax
c000b3f0:	b8 0b 00 00 00       	mov    eax,0xb
c000b3f5:	eb 05                	jmp    c000b3fc <Directory::read(unsigned long long, void*, int*)+0x56>
c000b3f7:	b8 05 00 00 00       	mov    eax,0x5
c000b3fc:	5b                   	pop    ebx
c000b3fd:	c3                   	ret    

c000b3fe <Directory::write(unsigned long long, void*, int*)>:
c000b3fe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b402:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c000b409:	b8 0b 00 00 00       	mov    eax,0xb
c000b40e:	83 fa 19             	cmp    edx,0x19
c000b411:	77 18                	ja     c000b42b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b413:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b41a:	85 d2                	test   edx,edx
c000b41c:	74 0d                	je     c000b42b <Directory::write(unsigned long long, void*, int*)+0x2d>
c000b41e:	83 ba 74 01 00 00 01 	cmp    DWORD PTR [edx+0x174],0x1
c000b425:	19 c0                	sbb    eax,eax
c000b427:	83 e0 0a             	and    eax,0xa
c000b42a:	40                   	inc    eax
c000b42b:	c3                   	ret    

c000b42c <File::isAtty()>:
c000b42c:	31 c0                	xor    eax,eax
c000b42e:	c3                   	ret    
c000b42f:	90                   	nop

c000b430 <Directory::isAtty()>:
c000b430:	31 c0                	xor    eax,eax
c000b432:	c3                   	ret    
c000b433:	90                   	nop

c000b434 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c000b434:	b8 0a 00 00 00       	mov    eax,0xa
c000b439:	c3                   	ret    

c000b43a <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c000b43a:	b8 0a 00 00 00       	mov    eax,0xa
c000b43f:	c3                   	ret    

c000b440 <Filesystem::allocateSwapfile(char const*, int)>:
c000b440:	31 c0                	xor    eax,eax
c000b442:	31 d2                	xor    edx,edx
c000b444:	c3                   	ret    
c000b445:	90                   	nop

c000b446 <File::~File()>:
c000b446:	83 ec 0c             	sub    esp,0xc
c000b449:	ba 30 13 02 c0       	mov    edx,0xc0021330
c000b44e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b452:	89 10                	mov    DWORD PTR [eax],edx
c000b454:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b458:	83 ec 0c             	sub    esp,0xc
c000b45b:	50                   	push   eax
c000b45c:	e8 43 df ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b461:	83 c4 10             	add    esp,0x10
c000b464:	90                   	nop
c000b465:	83 c4 0c             	add    esp,0xc
c000b468:	c3                   	ret    
c000b469:	90                   	nop

c000b46a <File::~File()>:
c000b46a:	83 ec 0c             	sub    esp,0xc
c000b46d:	83 ec 0c             	sub    esp,0xc
c000b470:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b474:	e8 cd ff ff ff       	call   c000b446 <File::~File()>
c000b479:	83 c4 10             	add    esp,0x10
c000b47c:	83 ec 08             	sub    esp,0x8
c000b47f:	68 14 01 00 00       	push   0x114
c000b484:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b488:	e8 8b f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b48d:	83 c4 10             	add    esp,0x10
c000b490:	83 c4 0c             	add    esp,0xc
c000b493:	c3                   	ret    

c000b494 <Directory::~Directory()>:
c000b494:	83 ec 0c             	sub    esp,0xc
c000b497:	ba 4c 13 02 c0       	mov    edx,0xc002134c
c000b49c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4a0:	89 10                	mov    DWORD PTR [eax],edx
c000b4a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b4a6:	83 ec 0c             	sub    esp,0xc
c000b4a9:	50                   	push   eax
c000b4aa:	e8 f5 de ff ff       	call   c00093a4 <UnixFile::~UnixFile()>
c000b4af:	83 c4 10             	add    esp,0x10
c000b4b2:	90                   	nop
c000b4b3:	83 c4 0c             	add    esp,0xc
c000b4b6:	c3                   	ret    
c000b4b7:	90                   	nop

c000b4b8 <Directory::~Directory()>:
c000b4b8:	83 ec 0c             	sub    esp,0xc
c000b4bb:	83 ec 0c             	sub    esp,0xc
c000b4be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4c2:	e8 cd ff ff ff       	call   c000b494 <Directory::~Directory()>
c000b4c7:	83 c4 10             	add    esp,0x10
c000b4ca:	83 ec 08             	sub    esp,0x8
c000b4cd:	68 14 01 00 00       	push   0x114
c000b4d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b4d6:	e8 3d f3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b4db:	83 c4 10             	add    esp,0x10
c000b4de:	83 c4 0c             	add    esp,0xc
c000b4e1:	c3                   	ret    

c000b4e2 <Filesystem::Filesystem()>:
c000b4e2:	ba c4 12 02 c0       	mov    edx,0xc00212c4
c000b4e7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4eb:	89 10                	mov    DWORD PTR [eax],edx
c000b4ed:	8b 15 04 64 02 c0    	mov    edx,DWORD PTR ds:0xc0026404
c000b4f3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4f7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c000b4fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4fe:	a3 04 64 02 c0       	mov    ds:0xc0026404,eax
c000b503:	90                   	nop
c000b504:	c3                   	ret    
c000b505:	90                   	nop

c000b506 <Filesystem::~Filesystem()>:
c000b506:	ba c4 12 02 c0       	mov    edx,0xc00212c4
c000b50b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b50f:	89 10                	mov    DWORD PTR [eax],edx
c000b511:	90                   	nop
c000b512:	c3                   	ret    
c000b513:	90                   	nop

c000b514 <Filesystem::~Filesystem()>:
c000b514:	83 ec 0c             	sub    esp,0xc
c000b517:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b51b:	e8 e6 ff ff ff       	call   c000b506 <Filesystem::~Filesystem()>
c000b520:	83 c4 04             	add    esp,0x4
c000b523:	83 ec 08             	sub    esp,0x8
c000b526:	6a 08                	push   0x8
c000b528:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b52c:	e8 e7 f2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000b531:	83 c4 10             	add    esp,0x10
c000b534:	83 c4 0c             	add    esp,0xc
c000b537:	c3                   	ret    

c000b538 <Fs::getcwd(Process*, char*, int)>:
c000b538:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000b53c:	31 c0                	xor    eax,eax
c000b53e:	8d 0c 02             	lea    ecx,[edx+eax*1]
c000b541:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000b545:	7d 15                	jge    c000b55c <Fs::getcwd(Process*, char*, int)+0x24>
c000b547:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000b54b:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c000b552:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c000b555:	84 c9                	test   cl,cl
c000b557:	74 06                	je     c000b55f <Fs::getcwd(Process*, char*, int)+0x27>
c000b559:	40                   	inc    eax
c000b55a:	eb e2                	jmp    c000b53e <Fs::getcwd(Process*, char*, int)+0x6>
c000b55c:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c000b55f:	31 c0                	xor    eax,eax
c000b561:	c3                   	ret    

c000b562 <Fs::initVFS()>:
c000b562:	83 ec 18             	sub    esp,0x18
c000b565:	6a 08                	push   0x8
c000b567:	e8 4a c5 ff ff       	call   c0007ab6 <malloc>
c000b56c:	89 04 24             	mov    DWORD PTR [esp],eax
c000b56f:	e8 30 e1 00 00       	call   c00196a4 <FAT::FAT()>
c000b574:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000b57b:	e8 36 c5 ff ff       	call   c0007ab6 <malloc>
c000b580:	89 04 24             	mov    DWORD PTR [esp],eax
c000b583:	e8 48 f0 00 00       	call   c001a5d0 <ISO9660::ISO9660()>
c000b588:	83 c4 1c             	add    esp,0x1c
c000b58b:	c3                   	ret    

c000b58c <Fs::standardiseFiles(char*, char const*, char const*)>:
c000b58c:	55                   	push   ebp
c000b58d:	57                   	push   edi
c000b58e:	56                   	push   esi
c000b58f:	53                   	push   ebx
c000b590:	81 ec 10 04 00 00    	sub    esp,0x410
c000b596:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c000b59d:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c000b5a4:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c000b5ab:	68 00 04 00 00       	push   0x400
c000b5b0:	6a 00                	push   0x0
c000b5b2:	8d 74 24 0c          	lea    esi,[esp+0xc]
c000b5b6:	56                   	push   esi
c000b5b7:	e8 34 4f ff ff       	call   c00004f0 <memset>
c000b5bc:	83 c4 10             	add    esp,0x10
c000b5bf:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c000b5c3:	75 0b                	jne    c000b5d0 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c000b5c5:	50                   	push   eax
c000b5c6:	50                   	push   eax
c000b5c7:	57                   	push   edi
c000b5c8:	56                   	push   esi
c000b5c9:	e8 72 50 ff ff       	call   c0000640 <strcpy>
c000b5ce:	eb 44                	jmp    c000b614 <Fs::standardiseFiles(char*, char const*, char const*)+0x88>
c000b5d0:	0f be 07             	movsx  eax,BYTE PTR [edi]
c000b5d3:	83 f8 5c             	cmp    eax,0x5c
c000b5d6:	74 05                	je     c000b5dd <Fs::standardiseFiles(char*, char const*, char const*)+0x51>
c000b5d8:	83 f8 2f             	cmp    eax,0x2f
c000b5db:	75 18                	jne    c000b5f5 <Fs::standardiseFiles(char*, char const*, char const*)+0x69>
c000b5dd:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c000b5e0:	3c 60                	cmp    al,0x60
c000b5e2:	7e 03                	jle    c000b5e7 <Fs::standardiseFiles(char*, char const*, char const*)+0x5b>
c000b5e4:	83 e8 20             	sub    eax,0x20
c000b5e7:	88 04 24             	mov    BYTE PTR [esp],al
c000b5ea:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b5f1:	50                   	push   eax
c000b5f2:	50                   	push   eax
c000b5f3:	eb 18                	jmp    c000b60d <Fs::standardiseFiles(char*, char const*, char const*)+0x81>
c000b5f5:	50                   	push   eax
c000b5f6:	50                   	push   eax
c000b5f7:	55                   	push   ebp
c000b5f8:	56                   	push   esi
c000b5f9:	e8 42 50 ff ff       	call   c0000640 <strcpy>
c000b5fe:	5a                   	pop    edx
c000b5ff:	59                   	pop    ecx
c000b600:	68 83 22 02 c0       	push   0xc0022283
c000b605:	56                   	push   esi
c000b606:	e8 35 52 ff ff       	call   c0000840 <strcat>
c000b60b:	5d                   	pop    ebp
c000b60c:	58                   	pop    eax
c000b60d:	57                   	push   edi
c000b60e:	56                   	push   esi
c000b60f:	e8 2c 52 ff ff       	call   c0000840 <strcat>
c000b614:	83 c4 10             	add    esp,0x10
c000b617:	8a 04 24             	mov    al,BYTE PTR [esp]
c000b61a:	3c 60                	cmp    al,0x60
c000b61c:	7e 03                	jle    c000b621 <Fs::standardiseFiles(char*, char const*, char const*)+0x95>
c000b61e:	83 e8 20             	sub    eax,0x20
c000b621:	88 04 24             	mov    BYTE PTR [esp],al
c000b624:	88 03                	mov    BYTE PTR [ebx],al
c000b626:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c000b62d:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c000b633:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c000b637:	bf 03 00 00 00       	mov    edi,0x3
c000b63c:	b8 03 00 00 00       	mov    eax,0x3
c000b641:	0f be 2c 3c          	movsx  ebp,BYTE PTR [esp+edi*1]
c000b645:	89 ea                	mov    edx,ebp
c000b647:	85 ed                	test   ebp,ebp
c000b649:	0f 84 97 00 00 00    	je     c000b6e6 <Fs::standardiseFiles(char*, char const*, char const*)+0x15a>
c000b64f:	8d 4f 01             	lea    ecx,[edi+0x1]
c000b652:	83 fd 5c             	cmp    ebp,0x5c
c000b655:	74 05                	je     c000b65c <Fs::standardiseFiles(char*, char const*, char const*)+0xd0>
c000b657:	83 fd 2f             	cmp    ebp,0x2f
c000b65a:	75 12                	jne    c000b66e <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000b65c:	89 c5                	mov    ebp,eax
c000b65e:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b663:	74 09                	je     c000b66e <Fs::standardiseFiles(char*, char const*, char const*)+0xe2>
c000b665:	40                   	inc    eax
c000b666:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c000b66a:	89 cf                	mov    edi,ecx
c000b66c:	eb d3                	jmp    c000b641 <Fs::standardiseFiles(char*, char const*, char const*)+0xb5>
c000b66e:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c000b673:	0f be ea             	movsx  ebp,dl
c000b676:	75 5e                	jne    c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b678:	83 fd 2e             	cmp    ebp,0x2e
c000b67b:	75 59                	jne    c000b6d6 <Fs::standardiseFiles(char*, char const*, char const*)+0x14a>
c000b67d:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c000b681:	0f be 6c 3c 02       	movsx  ebp,BYTE PTR [esp+edi*1+0x2]
c000b686:	74 18                	je     c000b6a0 <Fs::standardiseFiles(char*, char const*, char const*)+0x114>
c000b688:	83 fd 2e             	cmp    ebp,0x2e
c000b68b:	74 53                	je     c000b6e0 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000b68d:	89 f9                	mov    ecx,edi
c000b68f:	41                   	inc    ecx
c000b690:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000b694:	83 fa 2f             	cmp    edx,0x2f
c000b697:	74 f6                	je     c000b68f <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000b699:	83 fa 5c             	cmp    edx,0x5c
c000b69c:	74 f1                	je     c000b68f <Fs::standardiseFiles(char*, char const*, char const*)+0x103>
c000b69e:	eb ca                	jmp    c000b66a <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b6a0:	83 fd 2e             	cmp    ebp,0x2e
c000b6a3:	74 3b                	je     c000b6e0 <Fs::standardiseFiles(char*, char const*, char const*)+0x154>
c000b6a5:	83 f8 03             	cmp    eax,0x3
c000b6a8:	74 c0                	je     c000b66a <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b6aa:	41                   	inc    ecx
c000b6ab:	0f be 14 0e          	movsx  edx,BYTE PTR [esi+ecx*1]
c000b6af:	83 fa 2f             	cmp    edx,0x2f
c000b6b2:	74 f6                	je     c000b6aa <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000b6b4:	83 fa 5c             	cmp    edx,0x5c
c000b6b7:	74 f1                	je     c000b6aa <Fs::standardiseFiles(char*, char const*, char const*)+0x11e>
c000b6b9:	48                   	dec    eax
c000b6ba:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b6be:	75 06                	jne    c000b6c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000b6c0:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b6c4:	eb f3                	jmp    c000b6b9 <Fs::standardiseFiles(char*, char const*, char const*)+0x12d>
c000b6c6:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c000b6ca:	74 07                	je     c000b6d3 <Fs::standardiseFiles(char*, char const*, char const*)+0x147>
c000b6cc:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b6d0:	48                   	dec    eax
c000b6d1:	eb f3                	jmp    c000b6c6 <Fs::standardiseFiles(char*, char const*, char const*)+0x13a>
c000b6d3:	40                   	inc    eax
c000b6d4:	eb 94                	jmp    c000b66a <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b6d6:	83 fd 2f             	cmp    ebp,0x2f
c000b6d9:	74 8f                	je     c000b66a <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b6db:	83 fd 5c             	cmp    ebp,0x5c
c000b6de:	74 8a                	je     c000b66a <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b6e0:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c000b6e3:	40                   	inc    eax
c000b6e4:	eb 84                	jmp    c000b66a <Fs::standardiseFiles(char*, char const*, char const*)+0xde>
c000b6e6:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c000b6ea:	83 ec 0c             	sub    esp,0xc
c000b6ed:	53                   	push   ebx
c000b6ee:	e8 7d 4e ff ff       	call   c0000570 <strlen>
c000b6f3:	83 c4 10             	add    esp,0x10
c000b6f6:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c000b6fb:	75 26                	jne    c000b723 <Fs::standardiseFiles(char*, char const*, char const*)+0x197>
c000b6fd:	83 ec 0c             	sub    esp,0xc
c000b700:	53                   	push   ebx
c000b701:	e8 6a 4e ff ff       	call   c0000570 <strlen>
c000b706:	83 c4 10             	add    esp,0x10
c000b709:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c000b70e:	74 26                	je     c000b736 <Fs::standardiseFiles(char*, char const*, char const*)+0x1aa>
c000b710:	83 ec 0c             	sub    esp,0xc
c000b713:	53                   	push   ebx
c000b714:	e8 57 4e ff ff       	call   c0000570 <strlen>
c000b719:	83 c4 10             	add    esp,0x10
c000b71c:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c000b721:	eb c7                	jmp    c000b6ea <Fs::standardiseFiles(char*, char const*, char const*)+0x15e>
c000b723:	83 ec 0c             	sub    esp,0xc
c000b726:	53                   	push   ebx
c000b727:	e8 44 4e ff ff       	call   c0000570 <strlen>
c000b72c:	83 c4 10             	add    esp,0x10
c000b72f:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c000b734:	74 c7                	je     c000b6fd <Fs::standardiseFiles(char*, char const*, char const*)+0x171>
c000b736:	81 c4 0c 04 00 00    	add    esp,0x40c
c000b73c:	5b                   	pop    ebx
c000b73d:	5e                   	pop    esi
c000b73e:	5f                   	pop    edi
c000b73f:	5d                   	pop    ebp
c000b740:	c3                   	ret    
c000b741:	90                   	nop

c000b742 <File::File(char const*, Process*)>:
c000b742:	83 ec 0c             	sub    esp,0xc
c000b745:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b749:	83 ec 08             	sub    esp,0x8
c000b74c:	6a 00                	push   0x0
c000b74e:	50                   	push   eax
c000b74f:	e8 6a da ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000b754:	83 c4 10             	add    esp,0x10
c000b757:	ba 30 13 02 c0       	mov    edx,0xc0021330
c000b75c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b760:	89 10                	mov    DWORD PTR [eax],edx
c000b762:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000b766:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000b76c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b770:	83 c0 0d             	add    eax,0xd
c000b773:	83 ec 04             	sub    esp,0x4
c000b776:	52                   	push   edx
c000b777:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b77b:	50                   	push   eax
c000b77c:	e8 0b fe ff ff       	call   c000b58c <Fs::standardiseFiles(char*, char const*, char const*)>
c000b781:	83 c4 10             	add    esp,0x10
c000b784:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b788:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000b78b:	83 e8 41             	sub    eax,0x41
c000b78e:	88 c2                	mov    dl,al
c000b790:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b794:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000b79a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b79e:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000b7a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7a6:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b7ac:	0f b6 c0             	movzx  eax,al
c000b7af:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b7b6:	85 c0                	test   eax,eax
c000b7b8:	74 3e                	je     c000b7f8 <File::File(char const*, Process*)+0xb6>
c000b7ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7be:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b7c4:	0f b6 c0             	movzx  eax,al
c000b7c7:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b7ce:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b7d4:	85 c0                	test   eax,eax
c000b7d6:	75 20                	jne    c000b7f8 <File::File(char const*, Process*)+0xb6>
c000b7d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000b7dc:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000b7e2:	0f b6 c0             	movzx  eax,al
c000b7e5:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000b7ec:	83 ec 0c             	sub    esp,0xc
c000b7ef:	50                   	push   eax
c000b7f0:	e8 75 21 00 00       	call   c000d96a <LogicalDisk::mount()>
c000b7f5:	83 c4 10             	add    esp,0x10
c000b7f8:	90                   	nop
c000b7f9:	83 c4 0c             	add    esp,0xc
c000b7fc:	c3                   	ret    
c000b7fd:	90                   	nop

c000b7fe <File::open(FileOpenMode)>:
c000b7fe:	53                   	push   ebx
c000b7ff:	b8 0b 00 00 00       	mov    eax,0xb
c000b804:	83 ec 08             	sub    esp,0x8
c000b807:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000b80b:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000b812:	83 fa 19             	cmp    edx,0x19
c000b815:	77 40                	ja     c000b857 <File::open(FileOpenMode)+0x59>
c000b817:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b81e:	85 d2                	test   edx,edx
c000b820:	74 35                	je     c000b857 <File::open(FileOpenMode)+0x59>
c000b822:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b828:	85 d2                	test   edx,edx
c000b82a:	74 2b                	je     c000b857 <File::open(FileOpenMode)+0x59>
c000b82c:	b8 06 00 00 00       	mov    eax,0x6
c000b831:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000b835:	75 20                	jne    c000b857 <File::open(FileOpenMode)+0x59>
c000b837:	8b 02                	mov    eax,DWORD PTR [edx]
c000b839:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000b83f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b843:	51                   	push   ecx
c000b844:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000b847:	51                   	push   ecx
c000b848:	52                   	push   edx
c000b849:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000b84c:	83 c4 10             	add    esp,0x10
c000b84f:	85 c0                	test   eax,eax
c000b851:	75 04                	jne    c000b857 <File::open(FileOpenMode)+0x59>
c000b853:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000b857:	83 c4 08             	add    esp,0x8
c000b85a:	5b                   	pop    ebx
c000b85b:	c3                   	ret    

c000b85c <File::close()>:
c000b85c:	53                   	push   ebx
c000b85d:	b8 0b 00 00 00       	mov    eax,0xb
c000b862:	83 ec 08             	sub    esp,0x8
c000b865:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b869:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b870:	83 f9 19             	cmp    ecx,0x19
c000b873:	77 41                	ja     c000b8b6 <File::close()+0x5a>
c000b875:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000b87c:	85 db                	test   ebx,ebx
c000b87e:	74 36                	je     c000b8b6 <File::close()+0x5a>
c000b880:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000b887:	74 2d                	je     c000b8b6 <File::close()+0x5a>
c000b889:	b8 05 00 00 00       	mov    eax,0x5
c000b88e:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000b892:	74 22                	je     c000b8b6 <File::close()+0x5a>
c000b894:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000b898:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000b89f:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000b8a5:	53                   	push   ebx
c000b8a6:	53                   	push   ebx
c000b8a7:	8b 08                	mov    ecx,DWORD PTR [eax]
c000b8a9:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000b8af:	50                   	push   eax
c000b8b0:	ff 51 1c             	call   DWORD PTR [ecx+0x1c]
c000b8b3:	83 c4 10             	add    esp,0x10
c000b8b6:	83 c4 08             	add    esp,0x8
c000b8b9:	5b                   	pop    ebx
c000b8ba:	c3                   	ret    
c000b8bb:	90                   	nop

c000b8bc <File::seek(unsigned long long)>:
c000b8bc:	56                   	push   esi
c000b8bd:	53                   	push   ebx
c000b8be:	b8 0b 00 00 00       	mov    eax,0xb
c000b8c3:	51                   	push   ecx
c000b8c4:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b8c8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b8cc:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b8d3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b8d7:	83 fa 19             	cmp    edx,0x19
c000b8da:	77 31                	ja     c000b90d <File::seek(unsigned long long)+0x51>
c000b8dc:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b8e3:	85 d2                	test   edx,edx
c000b8e5:	74 26                	je     c000b90d <File::seek(unsigned long long)+0x51>
c000b8e7:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b8ed:	85 d2                	test   edx,edx
c000b8ef:	74 1c                	je     c000b90d <File::seek(unsigned long long)+0x51>
c000b8f1:	b8 05 00 00 00       	mov    eax,0x5
c000b8f6:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b8fa:	74 11                	je     c000b90d <File::seek(unsigned long long)+0x51>
c000b8fc:	8b 02                	mov    eax,DWORD PTR [edx]
c000b8fe:	53                   	push   ebx
c000b8ff:	51                   	push   ecx
c000b900:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b906:	52                   	push   edx
c000b907:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000b90a:	83 c4 10             	add    esp,0x10
c000b90d:	5a                   	pop    edx
c000b90e:	5b                   	pop    ebx
c000b90f:	5e                   	pop    esi
c000b910:	c3                   	ret    
c000b911:	90                   	nop

c000b912 <File::truncate(unsigned long long)>:
c000b912:	56                   	push   esi
c000b913:	53                   	push   ebx
c000b914:	b8 0b 00 00 00       	mov    eax,0xb
c000b919:	51                   	push   ecx
c000b91a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000b91e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000b922:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c000b929:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000b92d:	83 fa 19             	cmp    edx,0x19
c000b930:	77 31                	ja     c000b963 <File::truncate(unsigned long long)+0x51>
c000b932:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b939:	85 d2                	test   edx,edx
c000b93b:	74 26                	je     c000b963 <File::truncate(unsigned long long)+0x51>
c000b93d:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b943:	85 d2                	test   edx,edx
c000b945:	74 1c                	je     c000b963 <File::truncate(unsigned long long)+0x51>
c000b947:	b8 05 00 00 00       	mov    eax,0x5
c000b94c:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c000b950:	74 11                	je     c000b963 <File::truncate(unsigned long long)+0x51>
c000b952:	8b 02                	mov    eax,DWORD PTR [edx]
c000b954:	53                   	push   ebx
c000b955:	51                   	push   ecx
c000b956:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c000b95c:	52                   	push   edx
c000b95d:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c000b960:	83 c4 10             	add    esp,0x10
c000b963:	5a                   	pop    edx
c000b964:	5b                   	pop    ebx
c000b965:	5e                   	pop    esi
c000b966:	c3                   	ret    
c000b967:	90                   	nop

c000b968 <File::tell(unsigned long long*)>:
c000b968:	83 ec 0c             	sub    esp,0xc
c000b96b:	b8 0b 00 00 00       	mov    eax,0xb
c000b970:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000b974:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c000b97b:	83 fa 19             	cmp    edx,0x19
c000b97e:	77 34                	ja     c000b9b4 <File::tell(unsigned long long*)+0x4c>
c000b980:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000b987:	85 d2                	test   edx,edx
c000b989:	74 29                	je     c000b9b4 <File::tell(unsigned long long*)+0x4c>
c000b98b:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000b991:	85 d2                	test   edx,edx
c000b993:	74 1f                	je     c000b9b4 <File::tell(unsigned long long*)+0x4c>
c000b995:	b8 05 00 00 00       	mov    eax,0x5
c000b99a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c000b99e:	74 14                	je     c000b9b4 <File::tell(unsigned long long*)+0x4c>
c000b9a0:	50                   	push   eax
c000b9a1:	8b 02                	mov    eax,DWORD PTR [edx]
c000b9a3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000b9a7:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c000b9ad:	52                   	push   edx
c000b9ae:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000b9b1:	83 c4 10             	add    esp,0x10
c000b9b4:	83 c4 0c             	add    esp,0xc
c000b9b7:	c3                   	ret    

c000b9b8 <File::rewind()>:
c000b9b8:	83 ec 10             	sub    esp,0x10
c000b9bb:	6a 00                	push   0x0
c000b9bd:	6a 00                	push   0x0
c000b9bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b9c3:	e8 f4 fe ff ff       	call   c000b8bc <File::seek(unsigned long long)>
c000b9c8:	83 c4 1c             	add    esp,0x1c
c000b9cb:	c3                   	ret    

c000b9cc <File::unlink()>:
c000b9cc:	83 ec 0c             	sub    esp,0xc
c000b9cf:	b8 0b 00 00 00       	mov    eax,0xb
c000b9d4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000b9d8:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000b9df:	83 f9 19             	cmp    ecx,0x19
c000b9e2:	77 2f                	ja     c000ba13 <File::unlink()+0x47>
c000b9e4:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000b9eb:	85 c9                	test   ecx,ecx
c000b9ed:	74 24                	je     c000ba13 <File::unlink()+0x47>
c000b9ef:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000b9f5:	85 c9                	test   ecx,ecx
c000b9f7:	74 1a                	je     c000ba13 <File::unlink()+0x47>
c000b9f9:	b8 06 00 00 00       	mov    eax,0x6
c000b9fe:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba02:	75 0f                	jne    c000ba13 <File::unlink()+0x47>
c000ba04:	83 c2 0d             	add    edx,0xd
c000ba07:	50                   	push   eax
c000ba08:	50                   	push   eax
c000ba09:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ba0b:	52                   	push   edx
c000ba0c:	51                   	push   ecx
c000ba0d:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000ba10:	83 c4 10             	add    esp,0x10
c000ba13:	83 c4 0c             	add    esp,0xc
c000ba16:	c3                   	ret    
c000ba17:	90                   	nop

c000ba18 <File::rename(char const*)>:
c000ba18:	83 ec 0c             	sub    esp,0xc
c000ba1b:	b8 0b 00 00 00       	mov    eax,0xb
c000ba20:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba24:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba2b:	83 f9 19             	cmp    ecx,0x19
c000ba2e:	77 32                	ja     c000ba62 <File::rename(char const*)+0x4a>
c000ba30:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000ba37:	85 c9                	test   ecx,ecx
c000ba39:	74 27                	je     c000ba62 <File::rename(char const*)+0x4a>
c000ba3b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba41:	85 c9                	test   ecx,ecx
c000ba43:	74 1d                	je     c000ba62 <File::rename(char const*)+0x4a>
c000ba45:	b8 06 00 00 00       	mov    eax,0x6
c000ba4a:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000ba4e:	75 12                	jne    c000ba62 <File::rename(char const*)+0x4a>
c000ba50:	83 c2 0d             	add    edx,0xd
c000ba53:	50                   	push   eax
c000ba54:	8b 01                	mov    eax,DWORD PTR [ecx]
c000ba56:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ba5a:	52                   	push   edx
c000ba5b:	51                   	push   ecx
c000ba5c:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000ba5f:	83 c4 10             	add    esp,0x10
c000ba62:	83 c4 0c             	add    esp,0xc
c000ba65:	c3                   	ret    

c000ba66 <File::chfatattr(unsigned char, unsigned char)>:
c000ba66:	57                   	push   edi
c000ba67:	b8 0b 00 00 00       	mov    eax,0xb
c000ba6c:	56                   	push   esi
c000ba6d:	53                   	push   ebx
c000ba6e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ba72:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000ba76:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000ba7d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ba81:	83 f9 19             	cmp    ecx,0x19
c000ba84:	77 37                	ja     c000babd <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba86:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000ba8d:	85 c9                	test   ecx,ecx
c000ba8f:	74 2c                	je     c000babd <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba91:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000ba97:	85 c9                	test   ecx,ecx
c000ba99:	74 22                	je     c000babd <File::chfatattr(unsigned char, unsigned char)+0x57>
c000ba9b:	b8 06 00 00 00       	mov    eax,0x6
c000baa0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000baa4:	75 17                	jne    c000babd <File::chfatattr(unsigned char, unsigned char)+0x57>
c000baa6:	8b 39                	mov    edi,DWORD PTR [ecx]
c000baa8:	89 f0                	mov    eax,esi
c000baaa:	83 c2 0d             	add    edx,0xd
c000baad:	0f b6 f0             	movzx  esi,al
c000bab0:	0f b6 db             	movzx  ebx,bl
c000bab3:	56                   	push   esi
c000bab4:	53                   	push   ebx
c000bab5:	52                   	push   edx
c000bab6:	51                   	push   ecx
c000bab7:	ff 57 38             	call   DWORD PTR [edi+0x38]
c000baba:	83 c4 10             	add    esp,0x10
c000babd:	5b                   	pop    ebx
c000babe:	5e                   	pop    esi
c000babf:	5f                   	pop    edi
c000bac0:	c3                   	ret    
c000bac1:	90                   	nop

c000bac2 <File::exists()>:
c000bac2:	83 ec 0c             	sub    esp,0xc
c000bac5:	31 c0                	xor    eax,eax
c000bac7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bacb:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bad2:	83 f9 19             	cmp    ecx,0x19
c000bad5:	77 24                	ja     c000bafb <File::exists()+0x39>
c000bad7:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bade:	85 c9                	test   ecx,ecx
c000bae0:	74 19                	je     c000bafb <File::exists()+0x39>
c000bae2:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bae8:	85 c9                	test   ecx,ecx
c000baea:	74 0f                	je     c000bafb <File::exists()+0x39>
c000baec:	83 c2 0d             	add    edx,0xd
c000baef:	50                   	push   eax
c000baf0:	50                   	push   eax
c000baf1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000baf3:	52                   	push   edx
c000baf4:	51                   	push   ecx
c000baf5:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000baf8:	83 c4 10             	add    esp,0x10
c000bafb:	83 c4 0c             	add    esp,0xc
c000bafe:	c3                   	ret    
c000baff:	90                   	nop

c000bb00 <File::stat(unsigned long long*, bool*)>:
c000bb00:	56                   	push   esi
c000bb01:	53                   	push   ebx
c000bb02:	50                   	push   eax
c000bb03:	b8 0b 00 00 00       	mov    eax,0xb
c000bb08:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bb0c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000bb10:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bb17:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000bb1b:	83 f9 19             	cmp    ecx,0x19
c000bb1e:	77 3d                	ja     c000bb5d <File::stat(unsigned long long*, bool*)+0x5d>
c000bb20:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bb27:	85 c9                	test   ecx,ecx
c000bb29:	74 32                	je     c000bb5d <File::stat(unsigned long long*, bool*)+0x5d>
c000bb2b:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bb31:	85 c9                	test   ecx,ecx
c000bb33:	74 28                	je     c000bb5d <File::stat(unsigned long long*, bool*)+0x5d>
c000bb35:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bb37:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bb3b:	74 13                	je     c000bb50 <File::stat(unsigned long long*, bool*)+0x50>
c000bb3d:	83 ec 04             	sub    esp,0x4
c000bb40:	56                   	push   esi
c000bb41:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000bb47:	51                   	push   ecx
c000bb48:	ff 50 30             	call   DWORD PTR [eax+0x30]
c000bb4b:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c000bb4e:	eb 0a                	jmp    c000bb5a <File::stat(unsigned long long*, bool*)+0x5a>
c000bb50:	53                   	push   ebx
c000bb51:	83 c2 0d             	add    edx,0xd
c000bb54:	56                   	push   esi
c000bb55:	52                   	push   edx
c000bb56:	51                   	push   ecx
c000bb57:	ff 50 34             	call   DWORD PTR [eax+0x34]
c000bb5a:	83 c4 10             	add    esp,0x10
c000bb5d:	5a                   	pop    edx
c000bb5e:	5b                   	pop    ebx
c000bb5f:	5e                   	pop    esi
c000bb60:	c3                   	ret    

c000bb61 <Fs::setcwd(Process*, char*)>:
c000bb61:	55                   	push   ebp
c000bb62:	57                   	push   edi
c000bb63:	56                   	push   esi
c000bb64:	53                   	push   ebx
c000bb65:	81 ec 20 02 00 00    	sub    esp,0x220
c000bb6b:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c000bb72:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c000bb78:	57                   	push   edi
c000bb79:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c000bb80:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c000bb84:	56                   	push   esi
c000bb85:	e8 02 fa ff ff       	call   c000b58c <Fs::standardiseFiles(char*, char const*, char const*)>
c000bb8a:	89 34 24             	mov    DWORD PTR [esp],esi
c000bb8d:	e8 de 49 ff ff       	call   c0000570 <strlen>
c000bb92:	83 c4 10             	add    esp,0x10
c000bb95:	83 f8 02             	cmp    eax,0x2
c000bb98:	77 15                	ja     c000bbaf <Fs::setcwd(Process*, char*)+0x4e>
c000bb9a:	0f be 5c 24 10       	movsx  ebx,BYTE PTR [esp+0x10]
c000bb9f:	83 eb 41             	sub    ebx,0x41
c000bba2:	8b 04 9d 80 88 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd7780]
c000bba9:	85 c0                	test   eax,eax
c000bbab:	75 1c                	jne    c000bbc9 <Fs::setcwd(Process*, char*)+0x68>
c000bbad:	eb 2f                	jmp    c000bbde <Fs::setcwd(Process*, char*)+0x7d>
c000bbaf:	83 ec 0c             	sub    esp,0xc
c000bbb2:	56                   	push   esi
c000bbb3:	e8 b8 49 ff ff       	call   c0000570 <strlen>
c000bbb8:	83 c4 10             	add    esp,0x10
c000bbbb:	83 f8 03             	cmp    eax,0x3
c000bbbe:	75 57                	jne    c000bc17 <Fs::setcwd(Process*, char*)+0xb6>
c000bbc0:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c000bbc5:	75 50                	jne    c000bc17 <Fs::setcwd(Process*, char*)+0xb6>
c000bbc7:	eb d1                	jmp    c000bb9a <Fs::setcwd(Process*, char*)+0x39>
c000bbc9:	83 b8 74 01 00 00 00 	cmp    DWORD PTR [eax+0x174],0x0
c000bbd0:	75 0c                	jne    c000bbde <Fs::setcwd(Process*, char*)+0x7d>
c000bbd2:	83 ec 0c             	sub    esp,0xc
c000bbd5:	50                   	push   eax
c000bbd6:	e8 8f 1d 00 00       	call   c000d96a <LogicalDisk::mount()>
c000bbdb:	83 c4 10             	add    esp,0x10
c000bbde:	b8 03 00 00 00       	mov    eax,0x3
c000bbe3:	83 fb 19             	cmp    ebx,0x19
c000bbe6:	0f 87 c6 00 00 00    	ja     c000bcb2 <Fs::setcwd(Process*, char*)+0x151>
c000bbec:	8b 14 9d 80 88 02 c0 	mov    edx,DWORD PTR [ebx*4-0x3ffd7780]
c000bbf3:	b8 05 00 00 00       	mov    eax,0x5
c000bbf8:	85 d2                	test   edx,edx
c000bbfa:	0f 84 b2 00 00 00    	je     c000bcb2 <Fs::setcwd(Process*, char*)+0x151>
c000bc00:	b8 06 00 00 00       	mov    eax,0x6
c000bc05:	83 ba 74 01 00 00 00 	cmp    DWORD PTR [edx+0x174],0x0
c000bc0c:	0f 85 92 00 00 00    	jne    c000bca4 <Fs::setcwd(Process*, char*)+0x143>
c000bc12:	e9 9b 00 00 00       	jmp    c000bcb2 <Fs::setcwd(Process*, char*)+0x151>
c000bc17:	83 ec 0c             	sub    esp,0xc
c000bc1a:	68 14 01 00 00       	push   0x114
c000bc1f:	e8 92 be ff ff       	call   c0007ab6 <malloc>
c000bc24:	83 c4 0c             	add    esp,0xc
c000bc27:	89 c3                	mov    ebx,eax
c000bc29:	55                   	push   ebp
c000bc2a:	56                   	push   esi
c000bc2b:	50                   	push   eax
c000bc2c:	e8 11 fb ff ff       	call   c000b742 <File::File(char const*, Process*)>
c000bc31:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c000bc36:	83 c4 0c             	add    esp,0xc
c000bc39:	8d 44 24 0b          	lea    eax,[esp+0xb]
c000bc3d:	50                   	push   eax
c000bc3e:	8d 44 24 10          	lea    eax,[esp+0x10]
c000bc42:	50                   	push   eax
c000bc43:	53                   	push   ebx
c000bc44:	e8 b7 fe ff ff       	call   c000bb00 <File::stat(unsigned long long*, bool*)>
c000bc49:	83 c4 10             	add    esp,0x10
c000bc4c:	83 f8 02             	cmp    eax,0x2
c000bc4f:	74 27                	je     c000bc78 <Fs::setcwd(Process*, char*)+0x117>
c000bc51:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000bc56:	75 1c                	jne    c000bc74 <Fs::setcwd(Process*, char*)+0x113>
c000bc58:	b8 02 00 00 00       	mov    eax,0x2
c000bc5d:	85 db                	test   ebx,ebx
c000bc5f:	74 51                	je     c000bcb2 <Fs::setcwd(Process*, char*)+0x151>
c000bc61:	83 ec 0c             	sub    esp,0xc
c000bc64:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc66:	53                   	push   ebx
c000bc67:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc6a:	83 c4 10             	add    esp,0x10
c000bc6d:	b8 02 00 00 00       	mov    eax,0x2
c000bc72:	eb 3e                	jmp    c000bcb2 <Fs::setcwd(Process*, char*)+0x151>
c000bc74:	85 c0                	test   eax,eax
c000bc76:	74 1c                	je     c000bc94 <Fs::setcwd(Process*, char*)+0x133>
c000bc78:	b8 01 00 00 00       	mov    eax,0x1
c000bc7d:	85 db                	test   ebx,ebx
c000bc7f:	74 31                	je     c000bcb2 <Fs::setcwd(Process*, char*)+0x151>
c000bc81:	83 ec 0c             	sub    esp,0xc
c000bc84:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc86:	53                   	push   ebx
c000bc87:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bc8a:	83 c4 10             	add    esp,0x10
c000bc8d:	b8 01 00 00 00       	mov    eax,0x1
c000bc92:	eb 1e                	jmp    c000bcb2 <Fs::setcwd(Process*, char*)+0x151>
c000bc94:	85 db                	test   ebx,ebx
c000bc96:	74 0c                	je     c000bca4 <Fs::setcwd(Process*, char*)+0x143>
c000bc98:	83 ec 0c             	sub    esp,0xc
c000bc9b:	8b 03                	mov    eax,DWORD PTR [ebx]
c000bc9d:	53                   	push   ebx
c000bc9e:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000bca1:	83 c4 10             	add    esp,0x10
c000bca4:	50                   	push   eax
c000bca5:	50                   	push   eax
c000bca6:	56                   	push   esi
c000bca7:	57                   	push   edi
c000bca8:	e8 93 49 ff ff       	call   c0000640 <strcpy>
c000bcad:	83 c4 10             	add    esp,0x10
c000bcb0:	31 c0                	xor    eax,eax
c000bcb2:	81 c4 1c 02 00 00    	add    esp,0x21c
c000bcb8:	5b                   	pop    ebx
c000bcb9:	5e                   	pop    esi
c000bcba:	5f                   	pop    edi
c000bcbb:	5d                   	pop    ebp
c000bcbc:	c3                   	ret    
c000bcbd:	90                   	nop

c000bcbe <Directory::Directory(char const*, Process*)>:
c000bcbe:	83 ec 0c             	sub    esp,0xc
c000bcc1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcc5:	83 ec 08             	sub    esp,0x8
c000bcc8:	6a 00                	push   0x0
c000bcca:	50                   	push   eax
c000bccb:	e8 ee d4 ff ff       	call   c00091be <UnixFile::UnixFile(int)>
c000bcd0:	83 c4 10             	add    esp,0x10
c000bcd3:	ba 4c 13 02 c0       	mov    edx,0xc002134c
c000bcd8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcdc:	89 10                	mov    DWORD PTR [eax],edx
c000bcde:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bce2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c000bce8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bcec:	83 c0 0d             	add    eax,0xd
c000bcef:	83 ec 04             	sub    esp,0x4
c000bcf2:	52                   	push   edx
c000bcf3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bcf7:	50                   	push   eax
c000bcf8:	e8 8f f8 ff ff       	call   c000b58c <Fs::standardiseFiles(char*, char const*, char const*)>
c000bcfd:	83 c4 10             	add    esp,0x10
c000bd00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd04:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c000bd07:	83 e8 41             	sub    eax,0x41
c000bd0a:	88 c2                	mov    dl,al
c000bd0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd10:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c000bd16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd1a:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c000bd1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd22:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bd28:	0f b6 c0             	movzx  eax,al
c000bd2b:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bd32:	85 c0                	test   eax,eax
c000bd34:	74 3e                	je     c000bd74 <Directory::Directory(char const*, Process*)+0xb6>
c000bd36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd3a:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bd40:	0f b6 c0             	movzx  eax,al
c000bd43:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bd4a:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000bd50:	85 c0                	test   eax,eax
c000bd52:	75 20                	jne    c000bd74 <Directory::Directory(char const*, Process*)+0xb6>
c000bd54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd58:	8a 80 0d 01 00 00    	mov    al,BYTE PTR [eax+0x10d]
c000bd5e:	0f b6 c0             	movzx  eax,al
c000bd61:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c000bd68:	83 ec 0c             	sub    esp,0xc
c000bd6b:	50                   	push   eax
c000bd6c:	e8 f9 1b 00 00       	call   c000d96a <LogicalDisk::mount()>
c000bd71:	83 c4 10             	add    esp,0x10
c000bd74:	90                   	nop
c000bd75:	83 c4 0c             	add    esp,0xc
c000bd78:	c3                   	ret    
c000bd79:	90                   	nop

c000bd7a <Directory::open()>:
c000bd7a:	53                   	push   ebx
c000bd7b:	b8 0b 00 00 00       	mov    eax,0xb
c000bd80:	83 ec 08             	sub    esp,0x8
c000bd83:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000bd87:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c000bd8e:	83 fa 19             	cmp    edx,0x19
c000bd91:	77 3d                	ja     c000bdd0 <Directory::open()+0x56>
c000bd93:	8b 14 95 80 88 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd7780]
c000bd9a:	85 d2                	test   edx,edx
c000bd9c:	74 32                	je     c000bdd0 <Directory::open()+0x56>
c000bd9e:	8b 92 74 01 00 00    	mov    edx,DWORD PTR [edx+0x174]
c000bda4:	85 d2                	test   edx,edx
c000bda6:	74 28                	je     c000bdd0 <Directory::open()+0x56>
c000bda8:	b8 06 00 00 00       	mov    eax,0x6
c000bdad:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c000bdb1:	75 1d                	jne    c000bdd0 <Directory::open()+0x56>
c000bdb3:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c000bdb9:	50                   	push   eax
c000bdba:	8b 02                	mov    eax,DWORD PTR [edx]
c000bdbc:	51                   	push   ecx
c000bdbd:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c000bdc0:	51                   	push   ecx
c000bdc1:	52                   	push   edx
c000bdc2:	ff 50 50             	call   DWORD PTR [eax+0x50]
c000bdc5:	83 c4 10             	add    esp,0x10
c000bdc8:	85 c0                	test   eax,eax
c000bdca:	75 04                	jne    c000bdd0 <Directory::open()+0x56>
c000bdcc:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c000bdd0:	83 c4 08             	add    esp,0x8
c000bdd3:	5b                   	pop    ebx
c000bdd4:	c3                   	ret    
c000bdd5:	90                   	nop

c000bdd6 <Directory::close()>:
c000bdd6:	53                   	push   ebx
c000bdd7:	b8 0b 00 00 00       	mov    eax,0xb
c000bddc:	83 ec 08             	sub    esp,0x8
c000bddf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bde3:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bdea:	83 f9 19             	cmp    ecx,0x19
c000bded:	77 41                	ja     c000be30 <Directory::close()+0x5a>
c000bdef:	8b 1c 8d 80 88 02 c0 	mov    ebx,DWORD PTR [ecx*4-0x3ffd7780]
c000bdf6:	85 db                	test   ebx,ebx
c000bdf8:	74 36                	je     c000be30 <Directory::close()+0x5a>
c000bdfa:	83 bb 74 01 00 00 00 	cmp    DWORD PTR [ebx+0x174],0x0
c000be01:	74 2d                	je     c000be30 <Directory::close()+0x5a>
c000be03:	b8 05 00 00 00       	mov    eax,0x5
c000be08:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be0c:	74 22                	je     c000be30 <Directory::close()+0x5a>
c000be0e:	c6 42 0c 00          	mov    BYTE PTR [edx+0xc],0x0
c000be12:	8b 04 8d 80 88 02 c0 	mov    eax,DWORD PTR [ecx*4-0x3ffd7780]
c000be19:	8b 80 74 01 00 00    	mov    eax,DWORD PTR [eax+0x174]
c000be1f:	53                   	push   ebx
c000be20:	53                   	push   ebx
c000be21:	8b 08                	mov    ecx,DWORD PTR [eax]
c000be23:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c000be29:	50                   	push   eax
c000be2a:	ff 51 20             	call   DWORD PTR [ecx+0x20]
c000be2d:	83 c4 10             	add    esp,0x10
c000be30:	83 c4 08             	add    esp,0x8
c000be33:	5b                   	pop    ebx
c000be34:	c3                   	ret    
c000be35:	90                   	nop

c000be36 <Directory::unlink()>:
c000be36:	83 ec 0c             	sub    esp,0xc
c000be39:	b8 0b 00 00 00       	mov    eax,0xb
c000be3e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be42:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be49:	83 f9 19             	cmp    ecx,0x19
c000be4c:	77 2f                	ja     c000be7d <Directory::unlink()+0x47>
c000be4e:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000be55:	85 c9                	test   ecx,ecx
c000be57:	74 24                	je     c000be7d <Directory::unlink()+0x47>
c000be59:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000be5f:	85 c9                	test   ecx,ecx
c000be61:	74 1a                	je     c000be7d <Directory::unlink()+0x47>
c000be63:	b8 06 00 00 00       	mov    eax,0x6
c000be68:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000be6c:	75 0f                	jne    c000be7d <Directory::unlink()+0x47>
c000be6e:	83 c2 0d             	add    edx,0xd
c000be71:	50                   	push   eax
c000be72:	50                   	push   eax
c000be73:	8b 01                	mov    eax,DWORD PTR [ecx]
c000be75:	52                   	push   edx
c000be76:	51                   	push   ecx
c000be77:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c000be7a:	83 c4 10             	add    esp,0x10
c000be7d:	83 c4 0c             	add    esp,0xc
c000be80:	c3                   	ret    
c000be81:	90                   	nop

c000be82 <Directory::rename(char const*)>:
c000be82:	83 ec 0c             	sub    esp,0xc
c000be85:	b8 0b 00 00 00       	mov    eax,0xb
c000be8a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000be8e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000be95:	83 f9 19             	cmp    ecx,0x19
c000be98:	77 32                	ja     c000becc <Directory::rename(char const*)+0x4a>
c000be9a:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bea1:	85 c9                	test   ecx,ecx
c000bea3:	74 27                	je     c000becc <Directory::rename(char const*)+0x4a>
c000bea5:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000beab:	85 c9                	test   ecx,ecx
c000bead:	74 1d                	je     c000becc <Directory::rename(char const*)+0x4a>
c000beaf:	b8 06 00 00 00       	mov    eax,0x6
c000beb4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000beb8:	75 12                	jne    c000becc <Directory::rename(char const*)+0x4a>
c000beba:	83 c2 0d             	add    edx,0xd
c000bebd:	50                   	push   eax
c000bebe:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bec0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000bec4:	52                   	push   edx
c000bec5:	51                   	push   ecx
c000bec6:	ff 50 44             	call   DWORD PTR [eax+0x44]
c000bec9:	83 c4 10             	add    esp,0x10
c000becc:	83 c4 0c             	add    esp,0xc
c000becf:	c3                   	ret    

c000bed0 <Directory::exists()>:
c000bed0:	83 ec 0c             	sub    esp,0xc
c000bed3:	31 c0                	xor    eax,eax
c000bed5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bed9:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bee0:	83 f9 19             	cmp    ecx,0x19
c000bee3:	77 24                	ja     c000bf09 <Directory::exists()+0x39>
c000bee5:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000beec:	85 c9                	test   ecx,ecx
c000beee:	74 19                	je     c000bf09 <Directory::exists()+0x39>
c000bef0:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bef6:	85 c9                	test   ecx,ecx
c000bef8:	74 0f                	je     c000bf09 <Directory::exists()+0x39>
c000befa:	83 c2 0d             	add    edx,0xd
c000befd:	50                   	push   eax
c000befe:	50                   	push   eax
c000beff:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf01:	52                   	push   edx
c000bf02:	51                   	push   ecx
c000bf03:	ff 50 48             	call   DWORD PTR [eax+0x48]
c000bf06:	83 c4 10             	add    esp,0x10
c000bf09:	83 c4 0c             	add    esp,0xc
c000bf0c:	c3                   	ret    
c000bf0d:	90                   	nop

c000bf0e <Directory::read(dirent*)>:
c000bf0e:	83 ec 1c             	sub    esp,0x1c
c000bf11:	b8 0b 00 00 00       	mov    eax,0xb
c000bf16:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000bf1a:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf21:	83 f9 19             	cmp    ecx,0x19
c000bf24:	77 30                	ja     c000bf56 <Directory::read(dirent*)+0x48>
c000bf26:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf2d:	85 c9                	test   ecx,ecx
c000bf2f:	74 25                	je     c000bf56 <Directory::read(dirent*)+0x48>
c000bf31:	83 b9 74 01 00 00 00 	cmp    DWORD PTR [ecx+0x174],0x0
c000bf38:	74 1c                	je     c000bf56 <Directory::read(dirent*)+0x48>
c000bf3a:	83 ec 0c             	sub    esp,0xc
c000bf3d:	8b 02                	mov    eax,DWORD PTR [edx]
c000bf3f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c000bf43:	51                   	push   ecx
c000bf44:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf48:	6a 00                	push   0x0
c000bf4a:	68 10 01 00 00       	push   0x110
c000bf4f:	52                   	push   edx
c000bf50:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000bf53:	83 c4 20             	add    esp,0x20
c000bf56:	83 c4 1c             	add    esp,0x1c
c000bf59:	c3                   	ret    

c000bf5a <Directory::create()>:
c000bf5a:	83 ec 0c             	sub    esp,0xc
c000bf5d:	b8 0b 00 00 00       	mov    eax,0xb
c000bf62:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf66:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c000bf6d:	83 f9 19             	cmp    ecx,0x19
c000bf70:	77 2f                	ja     c000bfa1 <Directory::create()+0x47>
c000bf72:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c000bf79:	85 c9                	test   ecx,ecx
c000bf7b:	74 24                	je     c000bfa1 <Directory::create()+0x47>
c000bf7d:	8b 89 74 01 00 00    	mov    ecx,DWORD PTR [ecx+0x174]
c000bf83:	85 c9                	test   ecx,ecx
c000bf85:	74 1a                	je     c000bfa1 <Directory::create()+0x47>
c000bf87:	b8 06 00 00 00       	mov    eax,0x6
c000bf8c:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c000bf90:	75 0f                	jne    c000bfa1 <Directory::create()+0x47>
c000bf92:	83 c2 0d             	add    edx,0xd
c000bf95:	50                   	push   eax
c000bf96:	50                   	push   eax
c000bf97:	8b 01                	mov    eax,DWORD PTR [ecx]
c000bf99:	52                   	push   edx
c000bf9a:	51                   	push   ecx
c000bf9b:	ff 50 40             	call   DWORD PTR [eax+0x40]
c000bf9e:	83 c4 10             	add    esp,0x10
c000bfa1:	83 c4 0c             	add    esp,0xc
c000bfa4:	c3                   	ret    
c000bfa5:	90                   	nop

c000bfa6 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c000bfa6:	b8 0a 00 00 00       	mov    eax,0xa
c000bfab:	c3                   	ret    

c000bfac <Bus::Bus(char const*)>:
c000bfac:	83 ec 0c             	sub    esp,0xc
c000bfaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfb3:	83 ec 08             	sub    esp,0x8
c000bfb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bfba:	50                   	push   eax
c000bfbb:	e8 22 08 00 00       	call   c000c7e2 <Device::Device(char const*)>
c000bfc0:	83 c4 10             	add    esp,0x10
c000bfc3:	ba 68 13 02 c0       	mov    edx,0xc0021368
c000bfc8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfcc:	89 10                	mov    DWORD PTR [eax],edx
c000bfce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bfd2:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000bfdc:	90                   	nop
c000bfdd:	83 c4 0c             	add    esp,0xc
c000bfe0:	c3                   	ret    
c000bfe1:	90                   	nop
c000bfe2:	66 90                	xchg   ax,ax

c000bfe4 <Bus::~Bus()>:
c000bfe4:	83 ec 0c             	sub    esp,0xc
c000bfe7:	ba 68 13 02 c0       	mov    edx,0xc0021368
c000bfec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bff0:	89 10                	mov    DWORD PTR [eax],edx
c000bff2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bff6:	83 ec 0c             	sub    esp,0xc
c000bff9:	50                   	push   eax
c000bffa:	e8 4d 05 00 00       	call   c000c54c <Device::~Device()>
c000bfff:	83 c4 10             	add    esp,0x10
c000c002:	90                   	nop
c000c003:	83 c4 0c             	add    esp,0xc
c000c006:	c3                   	ret    
c000c007:	90                   	nop

c000c008 <Bus::~Bus()>:
c000c008:	83 ec 0c             	sub    esp,0xc
c000c00b:	83 ec 0c             	sub    esp,0xc
c000c00e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c012:	e8 cd ff ff ff       	call   c000bfe4 <Bus::~Bus()>
c000c017:	83 c4 10             	add    esp,0x10
c000c01a:	83 ec 08             	sub    esp,0x8
c000c01d:	68 58 01 00 00       	push   0x158
c000c022:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c026:	e8 ed e7 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c02b:	83 c4 10             	add    esp,0x10
c000c02e:	83 c4 0c             	add    esp,0xc
c000c031:	c3                   	ret    

c000c032 <beepThread(void*)>:
c000c032:	83 ec 0c             	sub    esp,0xc
c000c035:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000c03a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c03e:	48                   	dec    eax
c000c03f:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000c044:	75 01                	jne    c000c047 <beepThread(void*)+0x15>
c000c046:	fb                   	sti    
c000c047:	83 ec 0c             	sub    esp,0xc
c000c04a:	6b c2 0a             	imul   eax,edx,0xa
c000c04d:	50                   	push   eax
c000c04e:	e8 15 9e 00 00       	call   c0015e68 <milliTenthSleep(unsigned int)>
c000c053:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000c05a:	e8 64 bd 00 00       	call   c0017dc3 <HalMakeBeep(int)>
c000c05f:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c000c067:	83 c4 1c             	add    esp,0x1c
c000c06a:	e9 dd 9c 00 00       	jmp    c0015d4c <blockTask(TaskState)>

c000c06f <Krnl::beep(int, int, bool)>:
c000c06f:	56                   	push   esi
c000c070:	53                   	push   ebx
c000c071:	83 ec 10             	sub    esp,0x10
c000c074:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c000c078:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000c07c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c080:	e8 3e bd 00 00       	call   c0017dc3 <HalMakeBeep(int)>
c000c085:	83 c4 10             	add    esp,0x10
c000c088:	89 f0                	mov    eax,esi
c000c08a:	84 c0                	test   al,al
c000c08c:	74 1e                	je     c000c0ac <Krnl::beep(int, int, bool)+0x3d>
c000c08e:	83 ec 0c             	sub    esp,0xc
c000c091:	6b db 0a             	imul   ebx,ebx,0xa
c000c094:	53                   	push   ebx
c000c095:	e8 ce 9d 00 00       	call   c0015e68 <milliTenthSleep(unsigned int)>
c000c09a:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c000c0a2:	83 c4 14             	add    esp,0x14
c000c0a5:	5b                   	pop    ebx
c000c0a6:	5e                   	pop    esi
c000c0a7:	e9 17 bd 00 00       	jmp    c0017dc3 <HalMakeBeep(int)>
c000c0ac:	68 e6 00 00 00       	push   0xe6
c000c0b1:	53                   	push   ebx
c000c0b2:	68 32 c0 00 c0       	push   0xc000c032
c000c0b7:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c0bd:	e8 26 98 00 00       	call   c00158e8 <Process::createThread(void (*)(void*), void*, int)>
c000c0c2:	83 c4 14             	add    esp,0x14
c000c0c5:	5b                   	pop    ebx
c000c0c6:	5e                   	pop    esi
c000c0c7:	c3                   	ret    

c000c0c8 <User::loadClockSettings(int)>:
c000c0c8:	53                   	push   ebx
c000c0c9:	83 ec 14             	sub    esp,0x14
c000c0cc:	68 14 01 00 00       	push   0x114
c000c0d1:	e8 e0 b9 ff ff       	call   c0007ab6 <malloc>
c000c0d6:	83 c4 0c             	add    esp,0xc
c000c0d9:	89 c3                	mov    ebx,eax
c000c0db:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c000c0e1:	68 8c 13 02 c0       	push   0xc002138c
c000c0e6:	50                   	push   eax
c000c0e7:	e8 56 f6 ff ff       	call   c000b742 <File::File(char const*, Process*)>
c000c0ec:	58                   	pop    eax
c000c0ed:	5a                   	pop    edx
c000c0ee:	6a 01                	push   0x1
c000c0f0:	53                   	push   ebx
c000c0f1:	e8 08 f7 ff ff       	call   c000b7fe <File::open(FileOpenMode)>
c000c0f6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000c0f9:	e8 5e f7 ff ff       	call   c000b85c <File::close()>
c000c0fe:	83 c4 10             	add    esp,0x10
c000c101:	85 db                	test   ebx,ebx
c000c103:	74 0f                	je     c000c114 <User::loadClockSettings(int)+0x4c>
c000c105:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c107:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c000c10b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000c10e:	83 c4 08             	add    esp,0x8
c000c111:	5b                   	pop    ebx
c000c112:	ff e0                	jmp    eax
c000c114:	83 c4 08             	add    esp,0x8
c000c117:	5b                   	pop    ebx
c000c118:	c3                   	ret    
c000c119:	90                   	nop

c000c11a <Clock::Clock(char const*)>:
c000c11a:	83 ec 0c             	sub    esp,0xc
c000c11d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c121:	83 ec 08             	sub    esp,0x8
c000c124:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c128:	50                   	push   eax
c000c129:	e8 b4 06 00 00       	call   c000c7e2 <Device::Device(char const*)>
c000c12e:	83 c4 10             	add    esp,0x10
c000c131:	ba b4 13 02 c0       	mov    edx,0xc00213b4
c000c136:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c13a:	89 10                	mov    DWORD PTR [eax],edx
c000c13c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c140:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c000c14a:	90                   	nop
c000c14b:	83 c4 0c             	add    esp,0xc
c000c14e:	c3                   	ret    
c000c14f:	90                   	nop

c000c150 <Clock::~Clock()>:
c000c150:	83 ec 0c             	sub    esp,0xc
c000c153:	ba b4 13 02 c0       	mov    edx,0xc00213b4
c000c158:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c15c:	89 10                	mov    DWORD PTR [eax],edx
c000c15e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c162:	83 ec 0c             	sub    esp,0xc
c000c165:	50                   	push   eax
c000c166:	e8 e1 03 00 00       	call   c000c54c <Device::~Device()>
c000c16b:	83 c4 10             	add    esp,0x10
c000c16e:	90                   	nop
c000c16f:	83 c4 0c             	add    esp,0xc
c000c172:	c3                   	ret    
c000c173:	90                   	nop

c000c174 <Clock::~Clock()>:
c000c174:	83 ec 0c             	sub    esp,0xc
c000c177:	83 ec 0c             	sub    esp,0xc
c000c17a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c17e:	e8 cd ff ff ff       	call   c000c150 <Clock::~Clock()>
c000c183:	83 c4 10             	add    esp,0x10
c000c186:	83 ec 08             	sub    esp,0x8
c000c189:	68 58 01 00 00       	push   0x158
c000c18e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c192:	e8 81 e6 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c197:	83 c4 10             	add    esp,0x10
c000c19a:	83 c4 0c             	add    esp,0xc
c000c19d:	c3                   	ret    

c000c19e <Clock::timeInSecondsLocal()>:
c000c19e:	53                   	push   ebx
c000c19f:	83 ec 14             	sub    esp,0x14
c000c1a2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000c1a6:	8b 10                	mov    edx,DWORD PTR [eax]
c000c1a8:	50                   	push   eax
c000c1a9:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000c1ac:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c1b3:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c1b9:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c1bf:	89 cb                	mov    ebx,ecx
c000c1c1:	c1 fb 1f             	sar    ebx,0x1f
c000c1c4:	01 c8                	add    eax,ecx
c000c1c6:	11 da                	adc    edx,ebx
c000c1c8:	83 c4 10             	add    esp,0x10
c000c1cb:	31 c9                	xor    ecx,ecx
c000c1cd:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c1d4:	74 05                	je     c000c1db <Clock::timeInSecondsLocal()+0x3d>
c000c1d6:	b9 08 07 00 00       	mov    ecx,0x708
c000c1db:	31 db                	xor    ebx,ebx
c000c1dd:	01 c8                	add    eax,ecx
c000c1df:	11 da                	adc    edx,ebx
c000c1e1:	83 c4 08             	add    esp,0x8
c000c1e4:	5b                   	pop    ebx
c000c1e5:	c3                   	ret    

c000c1e6 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c000c1e6:	57                   	push   edi
c000c1e7:	56                   	push   esi
c000c1e8:	53                   	push   ebx
c000c1e9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c1ed:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c1f1:	8b 01                	mov    eax,DWORD PTR [ecx]
c000c1f3:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c1f7:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c000c1fa:	0f b6 05 08 64 02 c0 	movzx  eax,BYTE PTR ds:0xc0026408
c000c201:	03 05 0c 64 02 c0    	add    eax,DWORD PTR ds:0xc002640c
c000c207:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c000c20d:	99                   	cdq    
c000c20e:	29 c6                	sub    esi,eax
c000c210:	19 d7                	sbb    edi,edx
c000c212:	89 f0                	mov    eax,esi
c000c214:	89 fa                	mov    edx,edi
c000c216:	31 f6                	xor    esi,esi
c000c218:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c21f:	74 05                	je     c000c226 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c000c221:	be 08 07 00 00       	mov    esi,0x708
c000c226:	31 ff                	xor    edi,edi
c000c228:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c000c22c:	29 f0                	sub    eax,esi
c000c22e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c232:	19 fa                	sbb    edx,edi
c000c234:	89 d8                	mov    eax,ebx
c000c236:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c23a:	5b                   	pop    ebx
c000c23b:	5e                   	pop    esi
c000c23c:	5f                   	pop    edi
c000c23d:	ff e0                	jmp    eax

c000c23f <datetimeToSeconds(datetime_t)>:
c000c23f:	55                   	push   ebp
c000c240:	57                   	push   edi
c000c241:	56                   	push   esi
c000c242:	53                   	push   ebx
c000c243:	83 ec 0c             	sub    esp,0xc
c000c246:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c24a:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c000c24e:	89 d6                	mov    esi,edx
c000c250:	0f b6 c7             	movzx  eax,bh
c000c253:	c1 ee 10             	shr    esi,0x10
c000c256:	6b e8 3c             	imul   ebp,eax,0x3c
c000c259:	81 ee 6c 07 00 00    	sub    esi,0x76c
c000c25f:	0f b6 ce             	movzx  ecx,dh
c000c262:	89 df                	mov    edi,ebx
c000c264:	49                   	dec    ecx
c000c265:	c1 ef 10             	shr    edi,0x10
c000c268:	0f b6 db             	movzx  ebx,bl
c000c26b:	89 f8                	mov    eax,edi
c000c26d:	69 db 10 0e 00 00    	imul   ebx,ebx,0xe10
c000c273:	0f b6 f8             	movzx  edi,al
c000c276:	0f b6 d2             	movzx  edx,dl
c000c279:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c000c27d:	01 d8                	add    eax,ebx
c000c27f:	0f b7 de             	movzx  ebx,si
c000c282:	89 04 24             	mov    DWORD PTR [esp],eax
c000c285:	c1 f8 1f             	sar    eax,0x1f
c000c288:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c28c:	0f b6 c1             	movzx  eax,cl
c000c28f:	8b 0c 85 00 14 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffdec00]
c000c296:	83 f8 01             	cmp    eax,0x1
c000c299:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c000c29d:	76 27                	jbe    c000c2c6 <datetimeToSeconds(datetime_t)+0x87>
c000c29f:	83 e6 03             	and    esi,0x3
c000c2a2:	75 22                	jne    c000c2c6 <datetimeToSeconds(datetime_t)+0x87>
c000c2a4:	31 d2                	xor    edx,edx
c000c2a6:	be 64 00 00 00       	mov    esi,0x64
c000c2ab:	89 d8                	mov    eax,ebx
c000c2ad:	f7 f6                	div    esi
c000c2af:	85 d2                	test   edx,edx
c000c2b1:	75 12                	jne    c000c2c5 <datetimeToSeconds(datetime_t)+0x86>
c000c2b3:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c000c2b9:	be 90 01 00 00       	mov    esi,0x190
c000c2be:	99                   	cdq    
c000c2bf:	f7 fe                	idiv   esi
c000c2c1:	85 d2                	test   edx,edx
c000c2c3:	75 01                	jne    c000c2c6 <datetimeToSeconds(datetime_t)+0x87>
c000c2c5:	41                   	inc    ecx
c000c2c6:	83 fb 46             	cmp    ebx,0x46
c000c2c9:	76 48                	jbe    c000c313 <datetimeToSeconds(datetime_t)+0xd4>
c000c2cb:	be 46 00 00 00       	mov    esi,0x46
c000c2d0:	bf 64 00 00 00       	mov    edi,0x64
c000c2d5:	bd 90 01 00 00       	mov    ebp,0x190
c000c2da:	b8 6d 01 00 00       	mov    eax,0x16d
c000c2df:	f7 c6 03 00 00 00    	test   esi,0x3
c000c2e5:	75 23                	jne    c000c30a <datetimeToSeconds(datetime_t)+0xcb>
c000c2e7:	89 f0                	mov    eax,esi
c000c2e9:	99                   	cdq    
c000c2ea:	f7 ff                	idiv   edi
c000c2ec:	b8 6e 01 00 00       	mov    eax,0x16e
c000c2f1:	85 d2                	test   edx,edx
c000c2f3:	75 15                	jne    c000c30a <datetimeToSeconds(datetime_t)+0xcb>
c000c2f5:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c000c2fb:	99                   	cdq    
c000c2fc:	f7 fd                	idiv   ebp
c000c2fe:	83 fa 01             	cmp    edx,0x1
c000c301:	19 c0                	sbb    eax,eax
c000c303:	f7 d0                	not    eax
c000c305:	05 6e 01 00 00       	add    eax,0x16e
c000c30a:	01 c1                	add    ecx,eax
c000c30c:	46                   	inc    esi
c000c30d:	39 de                	cmp    esi,ebx
c000c30f:	7c c9                	jl     c000c2da <datetimeToSeconds(datetime_t)+0x9b>
c000c311:	eb 34                	jmp    c000c347 <datetimeToSeconds(datetime_t)+0x108>
c000c313:	74 32                	je     c000c347 <datetimeToSeconds(datetime_t)+0x108>
c000c315:	b8 45 00 00 00       	mov    eax,0x45
c000c31a:	89 c2                	mov    edx,eax
c000c31c:	83 e2 03             	and    edx,0x3
c000c31f:	39 d8                	cmp    eax,ebx
c000c321:	7e 0f                	jle    c000c332 <datetimeToSeconds(datetime_t)+0xf3>
c000c323:	83 fa 01             	cmp    edx,0x1
c000c326:	19 d2                	sbb    edx,edx
c000c328:	48                   	dec    eax
c000c329:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c000c330:	eb e8                	jmp    c000c31a <datetimeToSeconds(datetime_t)+0xdb>
c000c332:	b8 6d 01 00 00       	mov    eax,0x16d
c000c337:	85 d2                	test   edx,edx
c000c339:	75 0a                	jne    c000c345 <datetimeToSeconds(datetime_t)+0x106>
c000c33b:	83 fb 01             	cmp    ebx,0x1
c000c33e:	19 c0                	sbb    eax,eax
c000c340:	05 6e 01 00 00       	add    eax,0x16e
c000c345:	29 c1                	sub    ecx,eax
c000c347:	b8 80 51 01 00       	mov    eax,0x15180
c000c34c:	f7 e9                	imul   ecx
c000c34e:	03 04 24             	add    eax,DWORD PTR [esp]
c000c351:	13 54 24 04          	adc    edx,DWORD PTR [esp+0x4]
c000c355:	83 c4 0c             	add    esp,0xc
c000c358:	5b                   	pop    ebx
c000c359:	5e                   	pop    esi
c000c35a:	5f                   	pop    edi
c000c35b:	5d                   	pop    ebp
c000c35c:	c3                   	ret    
c000c35d:	90                   	nop

c000c35e <Clock::setTimeInDatetimeLocal(datetime_t)>:
c000c35e:	57                   	push   edi
c000c35f:	56                   	push   esi
c000c360:	53                   	push   ebx
c000c361:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c365:	8b 06                	mov    eax,DWORD PTR [esi]
c000c367:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c000c36a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c36e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c372:	e8 c8 fe ff ff       	call   c000c23f <datetimeToSeconds(datetime_t)>
c000c377:	59                   	pop    ecx
c000c378:	0f b6 0d 08 64 02 c0 	movzx  ecx,BYTE PTR ds:0xc0026408
c000c37f:	5b                   	pop    ebx
c000c380:	03 0d 0c 64 02 c0    	add    ecx,DWORD PTR ds:0xc002640c
c000c386:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c000c38c:	89 cb                	mov    ebx,ecx
c000c38e:	c1 fb 1f             	sar    ebx,0x1f
c000c391:	29 c8                	sub    eax,ecx
c000c393:	19 da                	sbb    edx,ebx
c000c395:	31 c9                	xor    ecx,ecx
c000c397:	80 3d 09 64 02 c0 00 	cmp    BYTE PTR ds:0xc0026409,0x0
c000c39e:	74 05                	je     c000c3a5 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c000c3a0:	b9 08 07 00 00       	mov    ecx,0x708
c000c3a5:	31 db                	xor    ebx,ebx
c000c3a7:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c000c3ab:	29 c8                	sub    eax,ecx
c000c3ad:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c3b1:	19 da                	sbb    edx,ebx
c000c3b3:	89 f8                	mov    eax,edi
c000c3b5:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c3b9:	5b                   	pop    ebx
c000c3ba:	5e                   	pop    esi
c000c3bb:	5f                   	pop    edi
c000c3bc:	ff e0                	jmp    eax

c000c3be <secondsToDatetime(unsigned long long)>:
c000c3be:	55                   	push   ebp
c000c3bf:	57                   	push   edi
c000c3c0:	56                   	push   esi
c000c3c1:	53                   	push   ebx
c000c3c2:	83 ec 1c             	sub    esp,0x1c
c000c3c5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000c3c9:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000c3cd:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000c3d1:	6a 00                	push   0x0
c000c3d3:	68 80 51 01 00       	push   0x15180
c000c3d8:	55                   	push   ebp
c000c3d9:	57                   	push   edi
c000c3da:	e8 d1 2d 01 00       	call   c001f1b0 <__udivdi3>
c000c3df:	83 c4 10             	add    esp,0x10
c000c3e2:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c000c3e8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c3ec:	6a 00                	push   0x0
c000c3ee:	68 80 51 01 00       	push   0x15180
c000c3f3:	55                   	push   ebp
c000c3f4:	57                   	push   edi
c000c3f5:	bf 10 0e 00 00       	mov    edi,0xe10
c000c3fa:	e8 b1 2e 01 00       	call   c001f2b0 <__umoddi3>
c000c3ff:	83 c4 10             	add    esp,0x10
c000c402:	99                   	cdq    
c000c403:	f7 ff                	idiv   edi
c000c405:	bf 3c 00 00 00       	mov    edi,0x3c
c000c40a:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c000c40d:	89 d0                	mov    eax,edx
c000c40f:	99                   	cdq    
c000c410:	f7 ff                	idiv   edi
c000c412:	85 db                	test   ebx,ebx
c000c414:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c000c417:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c000c41a:	79 11                	jns    c000c42d <secondsToDatetime(unsigned long long)+0x6f>
c000c41c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000c420:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c000c426:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c42b:	eb 07                	jmp    c000c434 <secondsToDatetime(unsigned long long)+0x76>
c000c42d:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c000c432:	89 d8                	mov    eax,ebx
c000c434:	bf b4 05 00 00       	mov    edi,0x5b4
c000c439:	99                   	cdq    
c000c43a:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c000c43f:	f7 f9                	idiv   ecx
c000c441:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c000c446:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c44a:	31 d2                	xor    edx,edx
c000c44c:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c000c454:	01 c3                	add    ebx,eax
c000c456:	89 d8                	mov    eax,ebx
c000c458:	f7 f1                	div    ecx
c000c45a:	31 d2                	xor    edx,edx
c000c45c:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c000c45f:	89 d8                	mov    eax,ebx
c000c461:	f7 f7                	div    edi
c000c463:	31 d2                	xor    edx,edx
c000c465:	29 c1                	sub    ecx,eax
c000c467:	89 d8                	mov    eax,ebx
c000c469:	f7 f5                	div    ebp
c000c46b:	bd 6d 01 00 00       	mov    ebp,0x16d
c000c470:	29 c1                	sub    ecx,eax
c000c472:	31 d2                	xor    edx,edx
c000c474:	89 c8                	mov    eax,ecx
c000c476:	f7 f5                	div    ebp
c000c478:	bd 94 8e 00 00       	mov    ebp,0x8e94
c000c47d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000c481:	31 d2                	xor    edx,edx
c000c483:	89 c8                	mov    eax,ecx
c000c485:	f7 f5                	div    ebp
c000c487:	31 d2                	xor    edx,edx
c000c489:	01 c3                	add    ebx,eax
c000c48b:	89 c8                	mov    eax,ecx
c000c48d:	f7 f7                	div    edi
c000c48f:	bf 99 00 00 00       	mov    edi,0x99
c000c494:	29 c3                	sub    ebx,eax
c000c496:	31 d2                	xor    edx,edx
c000c498:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c000c4a0:	29 c3                	sub    ebx,eax
c000c4a2:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000c4a5:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c000c4a8:	bb 05 00 00 00       	mov    ebx,0x5
c000c4ad:	83 c1 02             	add    ecx,0x2
c000c4b0:	89 c8                	mov    eax,ecx
c000c4b2:	f7 f7                	div    edi
c000c4b4:	31 d2                	xor    edx,edx
c000c4b6:	89 c7                	mov    edi,eax
c000c4b8:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c000c4be:	83 c0 02             	add    eax,0x2
c000c4c1:	f7 f3                	div    ebx
c000c4c3:	89 eb                	mov    ebx,ebp
c000c4c5:	29 c3                	sub    ebx,eax
c000c4c7:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c000c4cd:	88 1e                	mov    BYTE PTR [esi],bl
c000c4cf:	19 c0                	sbb    eax,eax
c000c4d1:	31 d2                	xor    edx,edx
c000c4d3:	83 e0 0c             	and    eax,0xc
c000c4d6:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c000c4da:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c000c4e2:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000c4e6:	83 f9 01             	cmp    ecx,0x1
c000c4e9:	0f 96 c2             	setbe  dl
c000c4ec:	41                   	inc    ecx
c000c4ed:	01 d0                	add    eax,edx
c000c4ef:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c000c4f2:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c000c4f6:	83 c4 1c             	add    esp,0x1c
c000c4f9:	89 f0                	mov    eax,esi
c000c4fb:	5b                   	pop    ebx
c000c4fc:	5e                   	pop    esi
c000c4fd:	5f                   	pop    edi
c000c4fe:	5d                   	pop    ebp
c000c4ff:	c2 04 00             	ret    0x4

c000c502 <Clock::timeInDatetimeLocal()>:
c000c502:	53                   	push   ebx
c000c503:	83 ec 14             	sub    esp,0x14
c000c506:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c50a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000c50e:	e8 8b fc ff ff       	call   c000c19e <Clock::timeInSecondsLocal()>
c000c513:	83 c4 0c             	add    esp,0xc
c000c516:	52                   	push   edx
c000c517:	50                   	push   eax
c000c518:	53                   	push   ebx
c000c519:	e8 a0 fe ff ff       	call   c000c3be <secondsToDatetime(unsigned long long)>
c000c51e:	89 d8                	mov    eax,ebx
c000c520:	83 c4 14             	add    esp,0x14
c000c523:	5b                   	pop    ebx
c000c524:	c2 04 00             	ret    0x4
c000c527:	90                   	nop

c000c528 <Device::hibernate()>:
c000c528:	c3                   	ret    
c000c529:	90                   	nop

c000c52a <Device::wake()>:
c000c52a:	c3                   	ret    
c000c52b:	90                   	nop

c000c52c <Device::detect()>:
c000c52c:	c3                   	ret    
c000c52d:	90                   	nop

c000c52e <Device::disableLegacy()>:
c000c52e:	c3                   	ret    
c000c52f:	90                   	nop

c000c530 <Device::powerSaving(PowerSavingLevel)>:
c000c530:	c3                   	ret    
c000c531:	90                   	nop

c000c532 <DriverlessDevice::close(int, int, void*)>:
c000c532:	31 c0                	xor    eax,eax
c000c534:	c3                   	ret    
c000c535:	90                   	nop

c000c536 <DriverlessDevice::detect()>:
c000c536:	c3                   	ret    
c000c537:	90                   	nop

c000c538 <DriverlessDevice::open(int, int, void*)>:
c000c538:	83 ec 18             	sub    esp,0x18
c000c53b:	68 30 14 02 c0       	push   0xc0021430
c000c540:	e8 34 4d 00 00       	call   c0011279 <KePanic(char const*)>
c000c545:	83 c8 ff             	or     eax,0xffffffff
c000c548:	83 c4 1c             	add    esp,0x1c
c000c54b:	c3                   	ret    

c000c54c <Device::~Device()>:
c000c54c:	ba 90 14 02 c0       	mov    edx,0xc0021490
c000c551:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c555:	89 10                	mov    DWORD PTR [eax],edx
c000c557:	90                   	nop
c000c558:	c3                   	ret    
c000c559:	90                   	nop

c000c55a <Device::~Device()>:
c000c55a:	83 ec 0c             	sub    esp,0xc
c000c55d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000c561:	e8 e6 ff ff ff       	call   c000c54c <Device::~Device()>
c000c566:	83 c4 04             	add    esp,0x4
c000c569:	83 ec 08             	sub    esp,0x8
c000c56c:	68 58 01 00 00       	push   0x158
c000c571:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c575:	e8 9e e2 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000c57a:	83 c4 10             	add    esp,0x10
c000c57d:	83 c4 0c             	add    esp,0xc
c000c580:	c3                   	ret    
c000c581:	90                   	nop

c000c582 <Device::findAndLoadDriver()>:
c000c582:	c7 44 24 04 4e 14 02 c0 	mov    DWORD PTR [esp+0x4],0xc002144e
c000c58a:	e9 b6 e3 ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c000c58f:	90                   	nop

c000c590 <Device::preOpenPCI(PCIDeviceInfo)>:
c000c590:	57                   	push   edi
c000c591:	b9 09 00 00 00       	mov    ecx,0x9
c000c596:	56                   	push   esi
c000c597:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000c59b:	8d 74 24 10          	lea    esi,[esp+0x10]
c000c59f:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c000c5a9:	81 c7 18 01 00 00    	add    edi,0x118
c000c5af:	fc                   	cld    
c000c5b0:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000c5b2:	5e                   	pop    esi
c000c5b3:	5f                   	pop    edi
c000c5b4:	c3                   	ret    
c000c5b5:	90                   	nop

c000c5b6 <Device::preOpenACPI(void*, char*, char*)>:
c000c5b6:	57                   	push   edi
c000c5b7:	b9 1e 00 00 00       	mov    ecx,0x1e
c000c5bc:	56                   	push   esi
c000c5bd:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000c5c1:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c5c5:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c000c5cf:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c000c5d5:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c000c5db:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c5df:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c5e1:	b9 0e 00 00 00       	mov    ecx,0xe
c000c5e6:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c000c5ec:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000c5f0:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000c5f2:	5e                   	pop    esi
c000c5f3:	5f                   	pop    edi
c000c5f4:	c3                   	ret    
c000c5f5:	90                   	nop

c000c5f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000c5f6:	53                   	push   ebx
c000c5f7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c5fb:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000c5ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c603:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c607:	0f b6 c0             	movzx  eax,al
c000c60a:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c000c60e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c612:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c616:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c61a:	5b                   	pop    ebx
c000c61b:	e9 a8 05 00 00       	jmp    c000cbc8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>

c000c620 <Device::getParent()>:
c000c620:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c624:	8b 80 c8 00 00 00    	mov    eax,DWORD PTR [eax+0xc8]
c000c62a:	c3                   	ret    
c000c62b:	90                   	nop

c000c62c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c000c62c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c630:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c634:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c000c639:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000c63d:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000c641:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000c645:	e9 e6 06 00 00       	jmp    c000cd30 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>

c000c64a <Device::addChild(Device*)>:
c000c64a:	53                   	push   ebx
c000c64b:	83 ec 08             	sub    esp,0x8
c000c64e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c652:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000c656:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c000c65c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c000c662:	8b 13                	mov    edx,DWORD PTR [ebx]
c000c664:	85 d2                	test   edx,edx
c000c666:	74 04                	je     c000c66c <Device::addChild(Device*)+0x22>
c000c668:	89 d3                	mov    ebx,edx
c000c66a:	eb f6                	jmp    c000c662 <Device::addChild(Device*)+0x18>
c000c66c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000c66f:	83 ec 0c             	sub    esp,0xc
c000c672:	6a 08                	push   0x8
c000c674:	e8 3d b4 ff ff       	call   c0007ab6 <malloc>
c000c679:	89 03                	mov    DWORD PTR [ebx],eax
c000c67b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c681:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c688:	83 c4 18             	add    esp,0x18
c000c68b:	5b                   	pop    ebx
c000c68c:	c3                   	ret    
c000c68d:	90                   	nop

c000c68e <Device::removeAllChildren()>:
c000c68e:	56                   	push   esi
c000c68f:	53                   	push   ebx
c000c690:	52                   	push   edx
c000c691:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000c695:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c000c69b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c69e:	74 17                	je     c000c6b7 <Device::removeAllChildren()+0x29>
c000c6a0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000c6a3:	85 c0                	test   eax,eax
c000c6a5:	74 0c                	je     c000c6b3 <Device::removeAllChildren()+0x25>
c000c6a7:	83 ec 0c             	sub    esp,0xc
c000c6aa:	8b 10                	mov    edx,DWORD PTR [eax]
c000c6ac:	50                   	push   eax
c000c6ad:	ff 52 04             	call   DWORD PTR [edx+0x4]
c000c6b0:	83 c4 10             	add    esp,0x10
c000c6b3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c6b5:	eb e4                	jmp    c000c69b <Device::removeAllChildren()+0xd>
c000c6b7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c6bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c6c3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c000c6c9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c6d0:	58                   	pop    eax
c000c6d1:	5b                   	pop    ebx
c000c6d2:	5e                   	pop    esi
c000c6d3:	c3                   	ret    

c000c6d4 <Device::hibernateAll()>:
c000c6d4:	53                   	push   ebx
c000c6d5:	83 ec 14             	sub    esp,0x14
c000c6d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c6dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c6de:	53                   	push   ebx
c000c6df:	ff 50 10             	call   DWORD PTR [eax+0x10]
c000c6e2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c6e8:	83 c4 10             	add    esp,0x10
c000c6eb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c6ee:	74 0f                	je     c000c6ff <Device::hibernateAll()+0x2b>
c000c6f0:	83 ec 0c             	sub    esp,0xc
c000c6f3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c6f6:	e8 d9 ff ff ff       	call   c000c6d4 <Device::hibernateAll()>
c000c6fb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c6fd:	eb e9                	jmp    c000c6e8 <Device::hibernateAll()+0x14>
c000c6ff:	83 c4 08             	add    esp,0x8
c000c702:	5b                   	pop    ebx
c000c703:	c3                   	ret    

c000c704 <Device::wakeAll()>:
c000c704:	53                   	push   ebx
c000c705:	83 ec 14             	sub    esp,0x14
c000c708:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c70c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c70e:	53                   	push   ebx
c000c70f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c000c712:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c718:	83 c4 10             	add    esp,0x10
c000c71b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c71e:	74 0f                	je     c000c72f <Device::wakeAll()+0x2b>
c000c720:	83 ec 0c             	sub    esp,0xc
c000c723:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c726:	e8 d9 ff ff ff       	call   c000c704 <Device::wakeAll()>
c000c72b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c72d:	eb e9                	jmp    c000c718 <Device::wakeAll()+0x14>
c000c72f:	83 c4 08             	add    esp,0x8
c000c732:	5b                   	pop    ebx
c000c733:	c3                   	ret    

c000c734 <Device::detectAll()>:
c000c734:	53                   	push   ebx
c000c735:	83 ec 14             	sub    esp,0x14
c000c738:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c73c:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c73e:	53                   	push   ebx
c000c73f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c000c742:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c748:	83 c4 10             	add    esp,0x10
c000c74b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c74e:	74 0f                	je     c000c75f <Device::detectAll()+0x2b>
c000c750:	83 ec 0c             	sub    esp,0xc
c000c753:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c756:	e8 d9 ff ff ff       	call   c000c734 <Device::detectAll()>
c000c75b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c75d:	eb e9                	jmp    c000c748 <Device::detectAll()+0x14>
c000c75f:	83 c4 08             	add    esp,0x8
c000c762:	5b                   	pop    ebx
c000c763:	c3                   	ret    

c000c764 <Device::disableLegacyAll()>:
c000c764:	c3                   	ret    
c000c765:	90                   	nop

c000c766 <Device::loadDriversForAll()>:
c000c766:	c3                   	ret    
c000c767:	90                   	nop

c000c768 <Device::closeAll()>:
c000c768:	53                   	push   ebx
c000c769:	83 ec 08             	sub    esp,0x8
c000c76c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c770:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c772:	6a 00                	push   0x0
c000c774:	6a 00                	push   0x0
c000c776:	6a 00                	push   0x0
c000c778:	53                   	push   ebx
c000c779:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c000c77c:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c782:	83 c4 10             	add    esp,0x10
c000c785:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c788:	74 0f                	je     c000c799 <Device::closeAll()+0x31>
c000c78a:	83 ec 0c             	sub    esp,0xc
c000c78d:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c790:	e8 d3 ff ff ff       	call   c000c768 <Device::closeAll()>
c000c795:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c797:	eb e9                	jmp    c000c782 <Device::closeAll()+0x1a>
c000c799:	83 c4 08             	add    esp,0x8
c000c79c:	5b                   	pop    ebx
c000c79d:	c3                   	ret    

c000c79e <Device::powerSavingAll(PowerSavingLevel)>:
c000c79e:	56                   	push   esi
c000c79f:	53                   	push   ebx
c000c7a0:	83 ec 0c             	sub    esp,0xc
c000c7a3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000c7a7:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c000c7ab:	8b 03                	mov    eax,DWORD PTR [ebx]
c000c7ad:	56                   	push   esi
c000c7ae:	53                   	push   ebx
c000c7af:	ff 50 20             	call   DWORD PTR [eax+0x20]
c000c7b2:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c7b8:	83 c4 10             	add    esp,0x10
c000c7bb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c7be:	74 0f                	je     c000c7cf <Device::powerSavingAll(PowerSavingLevel)+0x31>
c000c7c0:	52                   	push   edx
c000c7c1:	52                   	push   edx
c000c7c2:	56                   	push   esi
c000c7c3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c7c6:	e8 d3 ff ff ff       	call   c000c79e <Device::powerSavingAll(PowerSavingLevel)>
c000c7cb:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c7cd:	eb e9                	jmp    c000c7b8 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c000c7cf:	58                   	pop    eax
c000c7d0:	5b                   	pop    ebx
c000c7d1:	5e                   	pop    esi
c000c7d2:	c3                   	ret    
c000c7d3:	90                   	nop

c000c7d4 <Device::setName(char const*)>:
c000c7d4:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c000c7dc:	e9 5f 3e ff ff       	jmp    c0000640 <strcpy>
c000c7e1:	90                   	nop

c000c7e2 <Device::Device(char const*)>:
c000c7e2:	83 ec 1c             	sub    esp,0x1c
c000c7e5:	ba 90 14 02 c0       	mov    edx,0xc0021490
c000c7ea:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7ee:	89 10                	mov    DWORD PTR [eax],edx
c000c7f0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c7f4:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c000c7fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c802:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c80c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c810:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c81a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c81e:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c828:	83 ec 08             	sub    esp,0x8
c000c82b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c82f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c833:	e8 9c ff ff ff       	call   c000c7d4 <Device::setName(char const*)>
c000c838:	83 c4 10             	add    esp,0x10
c000c83b:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c000c843:	83 ec 0c             	sub    esp,0xc
c000c846:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c84a:	e8 67 b2 ff ff       	call   c0007ab6 <malloc>
c000c84f:	83 c4 10             	add    esp,0x10
c000c852:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c858:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c85f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000c863:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c000c869:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c86d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c873:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000c879:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c87d:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c000c883:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c000c88a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c88e:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c000c895:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c899:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c000c8a0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8a4:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c000c8ae:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8b2:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c000c8bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8c0:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c000c8ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000c8ce:	c7 80 10 01 00 00 14 00 00 00 	mov    DWORD PTR [eax+0x110],0x14
c000c8d8:	90                   	nop
c000c8d9:	83 c4 1c             	add    esp,0x1c
c000c8dc:	c3                   	ret    
c000c8dd:	90                   	nop

c000c8de <Device::getName()>:
c000c8de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000c8e2:	05 d0 00 00 00       	add    eax,0xd0
c000c8e7:	c3                   	ret    

c000c8e8 <DriverlessDevice::DriverlessDevice(char const*)>:
c000c8e8:	83 ec 0c             	sub    esp,0xc
c000c8eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c8ef:	83 ec 08             	sub    esp,0x8
c000c8f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c8f6:	50                   	push   eax
c000c8f7:	e8 e6 fe ff ff       	call   c000c7e2 <Device::Device(char const*)>
c000c8fc:	83 c4 10             	add    esp,0x10
c000c8ff:	ba bc 14 02 c0       	mov    edx,0xc00214bc
c000c904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c908:	89 10                	mov    DWORD PTR [eax],edx
c000c90a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c90e:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c000c918:	90                   	nop
c000c919:	83 c4 0c             	add    esp,0xc
c000c91c:	c3                   	ret    
c000c91d:	90                   	nop

c000c91e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c000c91e:	57                   	push   edi
c000c91f:	56                   	push   esi
c000c920:	53                   	push   ebx
c000c921:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000c925:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000c929:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000c92d:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c000c933:	75 0c                	jne    c000c941 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c000c935:	52                   	push   edx
c000c936:	52                   	push   edx
c000c937:	53                   	push   ebx
c000c938:	56                   	push   esi
c000c939:	e8 24 2d 01 00       	call   c001f662 <LinkedList<Device>::addElement(Device*)>
c000c93e:	83 c4 10             	add    esp,0x10
c000c941:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c000c947:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c000c94a:	74 12                	je     c000c95e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c000c94c:	50                   	push   eax
c000c94d:	57                   	push   edi
c000c94e:	56                   	push   esi
c000c94f:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000c952:	e8 c7 ff ff ff       	call   c000c91e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c957:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c000c959:	83 c4 10             	add    esp,0x10
c000c95c:	eb e9                	jmp    c000c947 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c000c95e:	5b                   	pop    ebx
c000c95f:	5e                   	pop    esi
c000c960:	5f                   	pop    edi
c000c961:	c3                   	ret    

c000c962 <getDevicesOfType(DeviceType)>:
c000c962:	53                   	push   ebx
c000c963:	83 ec 14             	sub    esp,0x14
c000c966:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000c96a:	53                   	push   ebx
c000c96b:	e8 ce 2d 01 00       	call   c001f73e <LinkedList<Device>::LinkedList()>
c000c970:	83 c4 0c             	add    esp,0xc
c000c973:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000c977:	53                   	push   ebx
c000c978:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000c97e:	e8 9b ff ff ff       	call   c000c91e <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c000c983:	89 d8                	mov    eax,ebx
c000c985:	83 c4 18             	add    esp,0x18
c000c988:	5b                   	pop    ebx
c000c989:	c2 04 00             	ret    0x4

c000c98c <HardDiskController::HardDiskController(char const*)>:
c000c98c:	83 ec 0c             	sub    esp,0xc
c000c98f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c993:	83 ec 08             	sub    esp,0x8
c000c996:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c99a:	50                   	push   eax
c000c99b:	e8 42 fe ff ff       	call   c000c7e2 <Device::Device(char const*)>
c000c9a0:	83 c4 10             	add    esp,0x10
c000c9a3:	ba e8 14 02 c0       	mov    edx,0xc00214e8
c000c9a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9ac:	89 10                	mov    DWORD PTR [eax],edx
c000c9ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9b2:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c000c9bc:	90                   	nop
c000c9bd:	83 c4 0c             	add    esp,0xc
c000c9c0:	c3                   	ret    
c000c9c1:	90                   	nop
c000c9c2:	66 90                	xchg   ax,ax

c000c9c4 <HardDiskController::~HardDiskController()>:
c000c9c4:	83 ec 0c             	sub    esp,0xc
c000c9c7:	ba e8 14 02 c0       	mov    edx,0xc00214e8
c000c9cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9d0:	89 10                	mov    DWORD PTR [eax],edx
c000c9d2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c9d6:	83 ec 0c             	sub    esp,0xc
c000c9d9:	50                   	push   eax
c000c9da:	e8 6d fb ff ff       	call   c000c54c <Device::~Device()>
c000c9df:	83 c4 10             	add    esp,0x10
c000c9e2:	90                   	nop
c000c9e3:	83 c4 0c             	add    esp,0xc
c000c9e6:	c3                   	ret    
c000c9e7:	90                   	nop

c000c9e8 <HardDiskController::~HardDiskController()>:
c000c9e8:	83 ec 0c             	sub    esp,0xc
c000c9eb:	83 ec 0c             	sub    esp,0xc
c000c9ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c9f2:	e8 cd ff ff ff       	call   c000c9c4 <HardDiskController::~HardDiskController()>
c000c9f7:	83 c4 10             	add    esp,0x10
c000c9fa:	83 ec 08             	sub    esp,0x8
c000c9fd:	68 58 01 00 00       	push   0x158
c000ca02:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca06:	e8 0d de ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000ca0b:	83 c4 10             	add    esp,0x10
c000ca0e:	83 c4 0c             	add    esp,0xc
c000ca11:	c3                   	ret    

c000ca12 <PhysicalDisk::eject()>:
c000ca12:	83 c8 ff             	or     eax,0xffffffff
c000ca15:	c3                   	ret    

c000ca16 <PhysicalDisk::PhysicalDisk(char const*, int)>:
c000ca16:	83 ec 0c             	sub    esp,0xc
c000ca19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca1d:	83 ec 08             	sub    esp,0x8
c000ca20:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca24:	50                   	push   eax
c000ca25:	e8 b8 fd ff ff       	call   c000c7e2 <Device::Device(char const*)>
c000ca2a:	83 c4 10             	add    esp,0x10
c000ca2d:	ba 14 15 02 c0       	mov    edx,0xc0021514
c000ca32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca36:	89 10                	mov    DWORD PTR [eax],edx
c000ca38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca3c:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000ca43:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca47:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c000ca4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca52:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c000ca5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca60:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000ca64:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c000ca6a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ca6e:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c000ca78:	90                   	nop
c000ca79:	83 c4 0c             	add    esp,0xc
c000ca7c:	c3                   	ret    
c000ca7d:	90                   	nop

c000ca7e <PhysicalDisk::startCache()>:
c000ca7e:	56                   	push   esi
c000ca7f:	53                   	push   ebx
c000ca80:	83 ec 10             	sub    esp,0x10
c000ca83:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000ca87:	6a 44                	push   0x44
c000ca89:	e8 28 b0 ff ff       	call   c0007ab6 <malloc>
c000ca8e:	89 c6                	mov    esi,eax
c000ca90:	58                   	pop    eax
c000ca91:	5a                   	pop    edx
c000ca92:	53                   	push   ebx
c000ca93:	56                   	push   esi
c000ca94:	e8 7b 17 00 00       	call   c000e214 <VCache::VCache(PhysicalDisk*)>
c000ca99:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c000ca9f:	83 c4 14             	add    esp,0x14
c000caa2:	5b                   	pop    ebx
c000caa3:	5e                   	pop    esi
c000caa4:	c3                   	ret    
c000caa5:	90                   	nop

c000caa6 <PhysicalDisk::~PhysicalDisk()>:
c000caa6:	83 ec 0c             	sub    esp,0xc
c000caa9:	ba 14 15 02 c0       	mov    edx,0xc0021514
c000caae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cab2:	89 10                	mov    DWORD PTR [eax],edx
c000cab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cab8:	83 ec 0c             	sub    esp,0xc
c000cabb:	50                   	push   eax
c000cabc:	e8 8b fa ff ff       	call   c000c54c <Device::~Device()>
c000cac1:	83 c4 10             	add    esp,0x10
c000cac4:	90                   	nop
c000cac5:	83 c4 0c             	add    esp,0xc
c000cac8:	c3                   	ret    
c000cac9:	90                   	nop

c000caca <PhysicalDisk::~PhysicalDisk()>:
c000caca:	83 ec 0c             	sub    esp,0xc
c000cacd:	83 ec 0c             	sub    esp,0xc
c000cad0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cad4:	e8 cd ff ff ff       	call   c000caa6 <PhysicalDisk::~PhysicalDisk()>
c000cad9:	83 c4 10             	add    esp,0x10
c000cadc:	83 ec 08             	sub    esp,0x8
c000cadf:	68 6c 01 00 00       	push   0x16c
c000cae4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cae8:	e8 2b dd ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000caed:	83 c4 10             	add    esp,0x10
c000caf0:	83 c4 0c             	add    esp,0xc
c000caf3:	c3                   	ret    

c000caf4 <int_handler>:
c000caf4:	55                   	push   ebp
c000caf5:	57                   	push   edi
c000caf6:	56                   	push   esi
c000caf7:	53                   	push   ebx
c000caf8:	83 ec 0c             	sub    esp,0xc
c000cafb:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c000caff:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cb06:	74 0b                	je     c000cb13 <int_handler+0x1f>
c000cb08:	fa                   	cli    
c000cb09:	f4                   	hlt    
c000cb0a:	80 3d 88 8e 02 c0 00 	cmp    BYTE PTR ds:0xc0028e88,0x0
c000cb11:	75 f5                	jne    c000cb08 <int_handler+0x14>
c000cb13:	8b 77 30             	mov    esi,DWORD PTR [edi+0x30]
c000cb16:	8d 46 e0             	lea    eax,[esi-0x20]
c000cb19:	83 f8 17             	cmp    eax,0x17
c000cb1c:	76 40                	jbe    c000cb5e <int_handler+0x6a>
c000cb1e:	c1 e6 04             	shl    esi,0x4
c000cb21:	31 db                	xor    ebx,ebx
c000cb23:	8d ae 20 74 02 c0    	lea    ebp,[esi-0x3ffd8be0]
c000cb29:	81 c6 20 64 02 c0    	add    esi,0xc0026420
c000cb2f:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c000cb33:	85 c0                	test   eax,eax
c000cb35:	74 13                	je     c000cb4a <int_handler+0x56>
c000cb37:	8b 14 9e             	mov    edx,DWORD PTR [esi+ebx*4]
c000cb3a:	83 7f 30 60          	cmp    DWORD PTR [edi+0x30],0x60
c000cb3e:	74 2c                	je     c000cb6c <int_handler+0x78>
c000cb40:	83 ec 08             	sub    esp,0x8
c000cb43:	52                   	push   edx
c000cb44:	57                   	push   edi
c000cb45:	ff d0                	call   eax
c000cb47:	83 c4 10             	add    esp,0x10
c000cb4a:	83 c3 01             	add    ebx,0x1
c000cb4d:	83 fb 04             	cmp    ebx,0x4
c000cb50:	75 dd                	jne    c000cb2f <int_handler+0x3b>
c000cb52:	83 c4 0c             	add    esp,0xc
c000cb55:	31 c0                	xor    eax,eax
c000cb57:	5b                   	pop    ebx
c000cb58:	31 d2                	xor    edx,edx
c000cb5a:	5e                   	pop    esi
c000cb5b:	5f                   	pop    edi
c000cb5c:	5d                   	pop    ebp
c000cb5d:	c3                   	ret    
c000cb5e:	83 ec 0c             	sub    esp,0xc
c000cb61:	50                   	push   eax
c000cb62:	e8 99 b2 00 00       	call   c0017e00 <HalEndOfInterrupt(int)>
c000cb67:	83 c4 10             	add    esp,0x10
c000cb6a:	eb b2                	jmp    c000cb1e <int_handler+0x2a>
c000cb6c:	83 ec 08             	sub    esp,0x8
c000cb6f:	52                   	push   edx
c000cb70:	57                   	push   edi
c000cb71:	ff d0                	call   eax
c000cb73:	83 c4 10             	add    esp,0x10
c000cb76:	83 c4 0c             	add    esp,0xc
c000cb79:	5b                   	pop    ebx
c000cb7a:	5e                   	pop    esi
c000cb7b:	5f                   	pop    edi
c000cb7c:	5d                   	pop    ebp
c000cb7d:	c3                   	ret    

c000cb7e <installISRHandler(int, void (*)(regs*, void*), void*)>:
c000cb7e:	56                   	push   esi
c000cb7f:	31 c0                	xor    eax,eax
c000cb81:	53                   	push   ebx
c000cb82:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000cb86:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000cb8a:	89 ca                	mov    edx,ecx
c000cb8c:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000cb90:	c1 e2 04             	shl    edx,0x4
c000cb93:	83 bc 82 20 74 02 c0 00 	cmp    DWORD PTR [edx+eax*4-0x3ffd8be0],0x0
c000cb9b:	74 17                	je     c000cbb4 <installISRHandler(int, void (*)(regs*, void*), void*)+0x36>
c000cb9d:	83 c0 01             	add    eax,0x1
c000cba0:	83 f8 04             	cmp    eax,0x4
c000cba3:	75 ee                	jne    c000cb93 <installISRHandler(int, void (*)(regs*, void*), void*)+0x15>
c000cba5:	c7 44 24 0c 44 15 02 c0 	mov    DWORD PTR [esp+0xc],0xc0021544
c000cbad:	5b                   	pop    ebx
c000cbae:	5e                   	pop    esi
c000cbaf:	e9 c5 46 00 00       	jmp    c0011279 <KePanic(char const*)>
c000cbb4:	8d 04 88             	lea    eax,[eax+ecx*4]
c000cbb7:	89 1c 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],ebx
c000cbbe:	89 34 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],esi
c000cbc5:	5b                   	pop    ebx
c000cbc6:	5e                   	pop    esi
c000cbc7:	c3                   	ret    

c000cbc8 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c000cbc8:	57                   	push   edi
c000cbc9:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000cbcf:	56                   	push   esi
c000cbd0:	53                   	push   ebx
c000cbd1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000cbd5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cbd9:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000cbe0:	74 54                	je     c000cc36 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x6e>
c000cbe2:	89 c7                	mov    edi,eax
c000cbe4:	84 c0                	test   al,al
c000cbe6:	74 1d                	je     c000cc05 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000cbe8:	83 fe 0f             	cmp    esi,0xf
c000cbeb:	0f 8f d5 00 00 00    	jg     c000ccc6 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xfe>
c000cbf1:	0f b6 b6 48 30 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffdcfb8]
c000cbf8:	0f b7 bc 36 c0 8b 02 c0 	movzx  edi,WORD PTR [esi+esi*1-0x3ffd7440]
c000cc00:	d1 ef                	shr    edi,1
c000cc02:	83 e7 01             	and    edi,0x1
c000cc05:	83 ec 08             	sub    esp,0x8
c000cc08:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cc0d:	31 db                	xor    ebx,ebx
c000cc0f:	50                   	push   eax
c000cc10:	68 51 15 02 c0       	push   0xc0021551
c000cc15:	e8 2b dd ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000cc1a:	83 c4 10             	add    esp,0x10
c000cc1d:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c000cc22:	85 c0                	test   eax,eax
c000cc24:	7f 55                	jg     c000cc7b <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xb3>
c000cc26:	83 ec 0c             	sub    esp,0xc
c000cc29:	68 68 15 02 c0       	push   0xc0021568
c000cc2e:	e8 46 46 00 00       	call   c0011279 <KePanic(char const*)>
c000cc33:	83 c4 10             	add    esp,0x10
c000cc36:	8d 7e 20             	lea    edi,[esi+0x20]
c000cc39:	89 f8                	mov    eax,edi
c000cc3b:	31 d2                	xor    edx,edx
c000cc3d:	c1 e0 04             	shl    eax,0x4
c000cc40:	8b 8c 90 20 74 02 c0 	mov    ecx,DWORD PTR [eax+edx*4-0x3ffd8be0]
c000cc47:	85 c9                	test   ecx,ecx
c000cc49:	0f 84 8e 00 00 00    	je     c000ccdd <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x115>
c000cc4f:	83 c2 01             	add    edx,0x1
c000cc52:	83 fa 04             	cmp    edx,0x4
c000cc55:	75 e9                	jne    c000cc40 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x78>
c000cc57:	83 ec 0c             	sub    esp,0xc
c000cc5a:	68 bc 15 02 c0       	push   0xc00215bc
c000cc5f:	e8 15 46 00 00       	call   c0011279 <KePanic(char const*)>
c000cc64:	83 c4 10             	add    esp,0x10
c000cc67:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000cc6c:	5b                   	pop    ebx
c000cc6d:	5e                   	pop    esi
c000cc6e:	5f                   	pop    edi
c000cc6f:	c3                   	ret    
c000cc70:	83 c3 01             	add    ebx,0x1
c000cc73:	39 1d c0 a0 02 c0    	cmp    DWORD PTR ds:0xc002a0c0,ebx
c000cc79:	7e ab                	jle    c000cc26 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x5e>
c000cc7b:	83 ec 08             	sub    esp,0x8
c000cc7e:	8b 04 9d e0 a0 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd5f20]
c000cc85:	56                   	push   esi
c000cc86:	50                   	push   eax
c000cc87:	e8 fe 18 01 00       	call   c001e58a <IOAPIC::handlesGSIWithNumber(unsigned int)>
c000cc8c:	83 c4 10             	add    esp,0x10
c000cc8f:	84 c0                	test   al,al
c000cc91:	74 dd                	je     c000cc70 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0xa8>
c000cc93:	83 ec 04             	sub    esp,0x4
c000cc96:	89 f8                	mov    eax,edi
c000cc98:	8b 1c 9d e0 a0 02 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffd5f20]
c000cc9f:	0f b6 f8             	movzx  edi,al
c000cca2:	57                   	push   edi
c000cca3:	8d 7e 20             	lea    edi,[esi+0x20]
c000cca6:	6a 00                	push   0x0
c000cca8:	89 f8                	mov    eax,edi
c000ccaa:	0f b6 c0             	movzx  eax,al
c000ccad:	50                   	push   eax
c000ccae:	89 f0                	mov    eax,esi
c000ccb0:	6a 00                	push   0x0
c000ccb2:	0f b6 c0             	movzx  eax,al
c000ccb5:	6a 00                	push   0x0
c000ccb7:	50                   	push   eax
c000ccb8:	53                   	push   ebx
c000ccb9:	e8 38 1a 01 00       	call   c001e6f6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c000ccbe:	83 c4 20             	add    esp,0x20
c000ccc1:	e9 73 ff ff ff       	jmp    c000cc39 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x71>
c000ccc6:	83 ec 0c             	sub    esp,0xc
c000ccc9:	31 ff                	xor    edi,edi
c000cccb:	68 84 15 02 c0       	push   0xc0021584
c000ccd0:	e8 a4 45 00 00       	call   c0011279 <KePanic(char const*)>
c000ccd5:	83 c4 10             	add    esp,0x10
c000ccd8:	e9 28 ff ff ff       	jmp    c000cc05 <installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3d>
c000ccdd:	8d 04 ba             	lea    eax,[edx+edi*4]
c000cce0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cce4:	89 14 85 20 74 02 c0 	mov    DWORD PTR [eax*4-0x3ffd8be0],edx
c000cceb:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ccef:	5b                   	pop    ebx
c000ccf0:	89 14 85 20 64 02 c0 	mov    DWORD PTR [eax*4-0x3ffd9be0],edx
c000ccf7:	89 f0                	mov    eax,esi
c000ccf9:	5e                   	pop    esi
c000ccfa:	5f                   	pop    edi
c000ccfb:	c3                   	ret    

c000ccfc <uninstallISRHandler(int, void (*)(regs*, void*))>:
c000ccfc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000cd00:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000cd04:	c1 e0 04             	shl    eax,0x4
c000cd07:	8d 50 10             	lea    edx,[eax+0x10]
c000cd0a:	39 88 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ecx
c000cd10:	74 08                	je     c000cd1a <uninstallISRHandler(int, void (*)(regs*, void*))+0x1e>
c000cd12:	83 c0 04             	add    eax,0x4
c000cd15:	39 d0                	cmp    eax,edx
c000cd17:	75 f1                	jne    c000cd0a <uninstallISRHandler(int, void (*)(regs*, void*))+0xe>
c000cd19:	c3                   	ret    
c000cd1a:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cd24:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cd2e:	eb e2                	jmp    c000cd12 <uninstallISRHandler(int, void (*)(regs*, void*))+0x16>

c000cd30 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c000cd30:	53                   	push   ebx
c000cd31:	83 ec 08             	sub    esp,0x8
c000cd34:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000cd38:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c000cd3d:	74 0e                	je     c000cd4d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000cd3f:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000cd44:	f6 80 6c 01 00 00 01 	test   BYTE PTR [eax+0x16c],0x1
c000cd4b:	75 37                	jne    c000cd84 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x54>
c000cd4d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd51:	83 c0 20             	add    eax,0x20
c000cd54:	c1 e0 04             	shl    eax,0x4
c000cd57:	8d 50 10             	lea    edx,[eax+0x10]
c000cd5a:	39 98 20 74 02 c0    	cmp    DWORD PTR [eax-0x3ffd8be0],ebx
c000cd60:	74 0c                	je     c000cd6e <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x3e>
c000cd62:	83 c0 04             	add    eax,0x4
c000cd65:	39 d0                	cmp    eax,edx
c000cd67:	75 f1                	jne    c000cd5a <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2a>
c000cd69:	83 c4 08             	add    esp,0x8
c000cd6c:	5b                   	pop    ebx
c000cd6d:	c3                   	ret    
c000cd6e:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cd78:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cd82:	eb de                	jmp    c000cd62 <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x32>
c000cd84:	83 7c 24 10 0f       	cmp    DWORD PTR [esp+0x10],0xf
c000cd89:	7f 11                	jg     c000cd9c <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x6c>
c000cd8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cd8f:	0f b6 80 48 30 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcfb8]
c000cd96:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cd9a:	eb b1                	jmp    c000cd4d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c000cd9c:	83 ec 0c             	sub    esp,0xc
c000cd9f:	68 75 15 02 c0       	push   0xc0021575
c000cda4:	e8 d0 44 00 00       	call   c0011279 <KePanic(char const*)>
c000cda9:	83 c4 10             	add    esp,0x10
c000cdac:	eb 9f                	jmp    c000cd4d <uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>

c000cdae <setupINTS()>:
c000cdae:	31 c0                	xor    eax,eax
c000cdb0:	c7 80 20 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8be0],0x0
c000cdba:	c7 80 20 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9be0],0x0
c000cdc4:	c7 80 24 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bdc],0x0
c000cdce:	c7 80 24 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bdc],0x0
c000cdd8:	c7 80 28 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bd8],0x0
c000cde2:	c7 80 28 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bd8],0x0
c000cdec:	c7 80 2c 74 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd8bd4],0x0
c000cdf6:	c7 80 2c 64 02 c0 00 00 00 00 	mov    DWORD PTR [eax-0x3ffd9bd4],0x0
c000ce00:	83 c0 10             	add    eax,0x10
c000ce03:	3d 00 10 00 00       	cmp    eax,0x1000
c000ce08:	75 a6                	jne    c000cdb0 <setupINTS()+0x2>
c000ce0a:	c3                   	ret    

c000ce0b <convertLegacyIRQNumber(int)>:
c000ce0b:	83 ec 0c             	sub    esp,0xc
c000ce0e:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c000ce14:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce18:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c000ce1f:	74 0c                	je     c000ce2d <convertLegacyIRQNumber(int)+0x22>
c000ce21:	83 f8 0f             	cmp    eax,0xf
c000ce24:	7f 0b                	jg     c000ce31 <convertLegacyIRQNumber(int)+0x26>
c000ce26:	0f b6 80 48 30 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffdcfb8]
c000ce2d:	83 c4 0c             	add    esp,0xc
c000ce30:	c3                   	ret    
c000ce31:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ce35:	83 ec 0c             	sub    esp,0xc
c000ce38:	68 84 15 02 c0       	push   0xc0021584
c000ce3d:	e8 37 44 00 00       	call   c0011279 <KePanic(char const*)>
c000ce42:	83 c4 10             	add    esp,0x10
c000ce45:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ce49:	83 c4 0c             	add    esp,0xc
c000ce4c:	c3                   	ret    
c000ce4d:	90                   	nop

c000ce4e <startGUI(void*)>:
c000ce4e:	55                   	push   ebp
c000ce4f:	89 e5                	mov    ebp,esp
c000ce51:	53                   	push   ebx
c000ce52:	83 ec 04             	sub    esp,0x4
c000ce55:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000ce5a:	83 e8 01             	sub    eax,0x1
c000ce5d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000ce62:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000ce67:	85 c0                	test   eax,eax
c000ce69:	75 01                	jne    c000ce6c <startGUI(void*)+0x1e>
c000ce6b:	fb                   	sti    
c000ce6c:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce72:	83 ec 08             	sub    esp,0x8
c000ce75:	6a 01                	push   0x1
c000ce77:	68 e1 15 02 c0       	push   0xc00215e1
c000ce7c:	e8 59 82 00 00       	call   c00150da <Thr::loadDLL(char const*, bool)>
c000ce81:	83 c4 10             	add    esp,0x10
c000ce84:	83 ec 08             	sub    esp,0x8
c000ce87:	53                   	push   ebx
c000ce88:	50                   	push   eax
c000ce89:	e8 7d 84 00 00       	call   c001530b <Thr::executeDLL(unsigned long, void*)>
c000ce8e:	83 c4 10             	add    esp,0x10
c000ce91:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000ce97:	83 ec 08             	sub    esp,0x8
c000ce9a:	6a 01                	push   0x1
c000ce9c:	68 fb 15 02 c0       	push   0xc00215fb
c000cea1:	e8 34 82 00 00       	call   c00150da <Thr::loadDLL(char const*, bool)>
c000cea6:	83 c4 10             	add    esp,0x10
c000cea9:	83 ec 08             	sub    esp,0x8
c000ceac:	53                   	push   ebx
c000cead:	50                   	push   eax
c000ceae:	e8 58 84 00 00       	call   c001530b <Thr::executeDLL(unsigned long, void*)>
c000ceb3:	83 c4 10             	add    esp,0x10
c000ceb6:	90                   	nop
c000ceb7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000ceba:	c9                   	leave  
c000cebb:	c3                   	ret    

c000cebc <startGUIVESA(void*)>:
c000cebc:	55                   	push   ebp
c000cebd:	89 e5                	mov    ebp,esp
c000cebf:	53                   	push   ebx
c000cec0:	83 ec 04             	sub    esp,0x4
c000cec3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cec8:	83 e8 01             	sub    eax,0x1
c000cecb:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000ced0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000ced5:	85 c0                	test   eax,eax
c000ced7:	75 01                	jne    c000ceda <startGUIVESA(void*)+0x1e>
c000ced9:	fb                   	sti    
c000ceda:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cee0:	83 ec 08             	sub    esp,0x8
c000cee3:	6a 01                	push   0x1
c000cee5:	68 19 16 02 c0       	push   0xc0021619
c000ceea:	e8 eb 81 00 00       	call   c00150da <Thr::loadDLL(char const*, bool)>
c000ceef:	83 c4 10             	add    esp,0x10
c000cef2:	83 ec 08             	sub    esp,0x8
c000cef5:	53                   	push   ebx
c000cef6:	50                   	push   eax
c000cef7:	e8 0f 84 00 00       	call   c001530b <Thr::executeDLL(unsigned long, void*)>
c000cefc:	83 c4 10             	add    esp,0x10
c000ceff:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000cf05:	83 ec 08             	sub    esp,0x8
c000cf08:	6a 01                	push   0x1
c000cf0a:	68 fb 15 02 c0       	push   0xc00215fb
c000cf0f:	e8 c6 81 00 00       	call   c00150da <Thr::loadDLL(char const*, bool)>
c000cf14:	83 c4 10             	add    esp,0x10
c000cf17:	83 ec 08             	sub    esp,0x8
c000cf1a:	53                   	push   ebx
c000cf1b:	50                   	push   eax
c000cf1c:	e8 ea 83 00 00       	call   c001530b <Thr::executeDLL(unsigned long, void*)>
c000cf21:	83 c4 10             	add    esp,0x10
c000cf24:	90                   	nop
c000cf25:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c000cf28:	c9                   	leave  
c000cf29:	c3                   	ret    

c000cf2a <sendKeyToTerminal(unsigned char)>:
c000cf2a:	55                   	push   ebp
c000cf2b:	89 e5                	mov    ebp,esp
c000cf2d:	83 ec 28             	sub    esp,0x28
c000cf30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000cf33:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c000cf36:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c000cf3b:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c000cf3f:	83 ec 08             	sub    esp,0x8
c000cf42:	52                   	push   edx
c000cf43:	50                   	push   eax
c000cf44:	e8 6d be ff ff       	call   c0008db6 <VgaText::receiveKey(unsigned char)>
c000cf49:	83 c4 10             	add    esp,0x10
c000cf4c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf50:	83 f8 0a             	cmp    eax,0xa
c000cf53:	74 16                	je     c000cf6b <sendKeyToTerminal(unsigned char)+0x41>
c000cf55:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf59:	83 f8 03             	cmp    eax,0x3
c000cf5c:	74 0d                	je     c000cf6b <sendKeyToTerminal(unsigned char)+0x41>
c000cf5e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c000cf62:	83 f8 1c             	cmp    eax,0x1c
c000cf65:	0f 85 97 00 00 00    	jne    c000d002 <sendKeyToTerminal(unsigned char)+0xd8>
c000cf6b:	fa                   	cli    
c000cf6c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cf71:	83 c0 01             	add    eax,0x1
c000cf74:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cf79:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000cf7e:	83 c0 01             	add    eax,0x1
c000cf81:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000cf86:	a1 20 84 02 c0       	mov    eax,ds:0xc0028420
c000cf8b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cf8e:	c7 05 20 84 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028420,0x0
c000cf98:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c000cf9c:	74 1f                	je     c000cfbd <sendKeyToTerminal(unsigned char)+0x93>
c000cf9e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000cfa1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c000cfa4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000cfa7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c000cfaa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c000cfad:	83 ec 0c             	sub    esp,0xc
c000cfb0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c000cfb3:	e8 98 90 00 00       	call   c0016050 <unblockTask(ThreadControlBlock*)>
c000cfb8:	83 c4 10             	add    esp,0x10
c000cfbb:	eb db                	jmp    c000cf98 <sendKeyToTerminal(unsigned char)+0x6e>
c000cfbd:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000cfc2:	83 e8 01             	sub    eax,0x1
c000cfc5:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000cfca:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000cfcf:	85 c0                	test   eax,eax
c000cfd1:	75 18                	jne    c000cfeb <sendKeyToTerminal(unsigned char)+0xc1>
c000cfd3:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c000cfd8:	85 c0                	test   eax,eax
c000cfda:	74 0f                	je     c000cfeb <sendKeyToTerminal(unsigned char)+0xc1>
c000cfdc:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000cfe6:	e8 4d 8b 00 00       	call   c0015b38 <schedule()>
c000cfeb:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cff0:	83 e8 01             	sub    eax,0x1
c000cff3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000cff8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000cffd:	85 c0                	test   eax,eax
c000cfff:	75 01                	jne    c000d002 <sendKeyToTerminal(unsigned char)+0xd8>
c000d001:	fb                   	sti    
c000d002:	90                   	nop
c000d003:	c9                   	leave  
c000d004:	c3                   	ret    

c000d005 <sendKeyboardToken(KeyboardToken)>:
c000d005:	55                   	push   ebp
c000d006:	89 e5                	mov    ebp,esp
c000d008:	83 ec 18             	sub    esp,0x18
c000d00b:	e8 b9 42 00 00       	call   c00112c9 <KeUserIOReceived()>
c000d010:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c000d013:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d016:	0f b7 c0             	movzx  eax,ax
c000d019:	83 f2 01             	xor    edx,0x1
c000d01c:	88 90 40 84 02 c0    	mov    BYTE PTR [eax-0x3ffd7bc0],dl
c000d022:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d027:	85 c0                	test   eax,eax
c000d029:	74 24                	je     c000d04f <sendKeyboardToken(KeyboardToken)+0x4a>
c000d02b:	8b 0d 28 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028428
c000d031:	83 ec 04             	sub    esp,0x4
c000d034:	68 40 84 02 c0       	push   0xc0028440
c000d039:	83 ec 08             	sub    esp,0x8
c000d03c:	89 e2                	mov    edx,esp
c000d03e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d041:	89 02                	mov    DWORD PTR [edx],eax
c000d043:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d046:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d04a:	ff d1                	call   ecx
c000d04c:	83 c4 10             	add    esp,0x10
c000d04f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c000d053:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c000d056:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d05b:	0f b6 d2             	movzx  edx,dl
c000d05e:	0f b6 c0             	movzx  eax,al
c000d061:	39 c2                	cmp    edx,eax
c000d063:	74 1c                	je     c000d081 <sendKeyboardToken(KeyboardToken)+0x7c>
c000d065:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c000d068:	a2 48 88 02 c0       	mov    ds:0xc0028848,al
c000d06d:	a0 48 88 02 c0       	mov    al,ds:0xc0028848
c000d072:	0f b6 c0             	movzx  eax,al
c000d075:	83 ec 0c             	sub    esp,0xc
c000d078:	50                   	push   eax
c000d079:	e8 84 b4 ff ff       	call   c0008502 <setTerminalScrollLock(bool)>
c000d07e:	83 c4 10             	add    esp,0x10
c000d081:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c000d084:	0f b6 c0             	movzx  eax,al
c000d087:	85 c0                	test   eax,eax
c000d089:	0f 84 da 00 00 00    	je     c000d169 <sendKeyboardToken(KeyboardToken)+0x164>
c000d08f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d092:	0f b7 c0             	movzx  eax,ax
c000d095:	3d 18 03 00 00       	cmp    eax,0x318
c000d09a:	75 06                	jne    c000d0a2 <sendKeyboardToken(KeyboardToken)+0x9d>
c000d09c:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c000d0a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0a5:	0f b7 c0             	movzx  eax,ax
c000d0a8:	3d 19 03 00 00       	cmp    eax,0x319
c000d0ad:	75 06                	jne    c000d0b5 <sendKeyboardToken(KeyboardToken)+0xb0>
c000d0af:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c000d0b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0b8:	0f b7 c0             	movzx  eax,ax
c000d0bb:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d0c0:	75 06                	jne    c000d0c8 <sendKeyboardToken(KeyboardToken)+0xc3>
c000d0c2:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c000d0c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0cb:	0f b7 c0             	movzx  eax,ax
c000d0ce:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d0d3:	75 06                	jne    c000d0db <sendKeyboardToken(KeyboardToken)+0xd6>
c000d0d5:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c000d0db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0de:	0f b7 c0             	movzx  eax,ax
c000d0e1:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d0e6:	75 06                	jne    c000d0ee <sendKeyboardToken(KeyboardToken)+0xe9>
c000d0e8:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c000d0ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d0f1:	0f b7 c0             	movzx  eax,ax
c000d0f4:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d0f9:	75 06                	jne    c000d101 <sendKeyboardToken(KeyboardToken)+0xfc>
c000d0fb:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d101:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d104:	0f b7 c0             	movzx  eax,ax
c000d107:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d10c:	75 06                	jne    c000d114 <sendKeyboardToken(KeyboardToken)+0x10f>
c000d10e:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c000d114:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d117:	0f b7 c0             	movzx  eax,ax
c000d11a:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d11f:	75 06                	jne    c000d127 <sendKeyboardToken(KeyboardToken)+0x122>
c000d121:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c000d127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d12a:	0f b7 c0             	movzx  eax,ax
c000d12d:	3d 20 03 00 00       	cmp    eax,0x320
c000d132:	75 06                	jne    c000d13a <sendKeyboardToken(KeyboardToken)+0x135>
c000d134:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c000d13a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d13d:	0f b7 c0             	movzx  eax,ax
c000d140:	3d 21 03 00 00       	cmp    eax,0x321
c000d145:	75 06                	jne    c000d14d <sendKeyboardToken(KeyboardToken)+0x148>
c000d147:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c000d14d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d150:	0f b7 c0             	movzx  eax,ax
c000d153:	3d 22 03 00 00       	cmp    eax,0x322
c000d158:	0f 85 f1 00 00 00    	jne    c000d24f <sendKeyboardToken(KeyboardToken)+0x24a>
c000d15e:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c000d164:	e9 e6 00 00 00       	jmp    c000d24f <sendKeyboardToken(KeyboardToken)+0x24a>
c000d169:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d16c:	0f b7 c0             	movzx  eax,ax
c000d16f:	3d 18 03 00 00       	cmp    eax,0x318
c000d174:	75 0a                	jne    c000d180 <sendKeyboardToken(KeyboardToken)+0x17b>
c000d176:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c000d17c:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d180:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d183:	0f b7 c0             	movzx  eax,ax
c000d186:	3d 19 03 00 00       	cmp    eax,0x319
c000d18b:	75 0a                	jne    c000d197 <sendKeyboardToken(KeyboardToken)+0x192>
c000d18d:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c000d193:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d197:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d19a:	0f b7 c0             	movzx  eax,ax
c000d19d:	3d 1a 03 00 00       	cmp    eax,0x31a
c000d1a2:	75 0a                	jne    c000d1ae <sendKeyboardToken(KeyboardToken)+0x1a9>
c000d1a4:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c000d1aa:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1b1:	0f b7 c0             	movzx  eax,ax
c000d1b4:	3d 1b 03 00 00       	cmp    eax,0x31b
c000d1b9:	75 0a                	jne    c000d1c5 <sendKeyboardToken(KeyboardToken)+0x1c0>
c000d1bb:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c000d1c1:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1c8:	0f b7 c0             	movzx  eax,ax
c000d1cb:	3d 1c 03 00 00       	cmp    eax,0x31c
c000d1d0:	75 0a                	jne    c000d1dc <sendKeyboardToken(KeyboardToken)+0x1d7>
c000d1d2:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c000d1d8:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1df:	0f b7 c0             	movzx  eax,ax
c000d1e2:	3d 1d 03 00 00       	cmp    eax,0x31d
c000d1e7:	75 0a                	jne    c000d1f3 <sendKeyboardToken(KeyboardToken)+0x1ee>
c000d1e9:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c000d1ef:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d1f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d1f6:	0f b7 c0             	movzx  eax,ax
c000d1f9:	3d 1e 03 00 00       	cmp    eax,0x31e
c000d1fe:	75 0a                	jne    c000d20a <sendKeyboardToken(KeyboardToken)+0x205>
c000d200:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c000d206:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d20a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d20d:	0f b7 c0             	movzx  eax,ax
c000d210:	3d 1f 03 00 00       	cmp    eax,0x31f
c000d215:	75 0a                	jne    c000d221 <sendKeyboardToken(KeyboardToken)+0x21c>
c000d217:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c000d21d:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d221:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d224:	0f b7 c0             	movzx  eax,ax
c000d227:	3d 20 03 00 00       	cmp    eax,0x320
c000d22c:	75 0a                	jne    c000d238 <sendKeyboardToken(KeyboardToken)+0x233>
c000d22e:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c000d234:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d238:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d23b:	0f b7 c0             	movzx  eax,ax
c000d23e:	3d 21 03 00 00       	cmp    eax,0x321
c000d243:	75 0a                	jne    c000d24f <sendKeyboardToken(KeyboardToken)+0x24a>
c000d245:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c000d24b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c000d24f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d252:	0f b7 c0             	movzx  eax,ax
c000d255:	3d 00 02 00 00       	cmp    eax,0x200
c000d25a:	75 2f                	jne    c000d28b <sendKeyboardToken(KeyboardToken)+0x286>
c000d25c:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d261:	83 f0 01             	xor    eax,0x1
c000d264:	0f b6 c0             	movzx  eax,al
c000d267:	85 c0                	test   eax,eax
c000d269:	74 20                	je     c000d28b <sendKeyboardToken(KeyboardToken)+0x286>
c000d26b:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d270:	6a 01                	push   0x1
c000d272:	6a 00                	push   0x0
c000d274:	68 4e ce 00 c0       	push   0xc000ce4e
c000d279:	50                   	push   eax
c000d27a:	e8 69 86 00 00       	call   c00158e8 <Process::createThread(void (*)(void*), void*, int)>
c000d27f:	83 c4 10             	add    esp,0x10
c000d282:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d289:	eb 3a                	jmp    c000d2c5 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d28b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d28e:	0f b7 c0             	movzx  eax,ax
c000d291:	3d 01 02 00 00       	cmp    eax,0x201
c000d296:	75 2d                	jne    c000d2c5 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d298:	a0 40 88 02 c0       	mov    al,ds:0xc0028840
c000d29d:	83 f0 01             	xor    eax,0x1
c000d2a0:	0f b6 c0             	movzx  eax,al
c000d2a3:	85 c0                	test   eax,eax
c000d2a5:	74 1e                	je     c000d2c5 <sendKeyboardToken(KeyboardToken)+0x2c0>
c000d2a7:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000d2ac:	6a 01                	push   0x1
c000d2ae:	6a 00                	push   0x0
c000d2b0:	68 bc ce 00 c0       	push   0xc000cebc
c000d2b5:	50                   	push   eax
c000d2b6:	e8 2d 86 00 00       	call   c00158e8 <Process::createThread(void (*)(void*), void*, int)>
c000d2bb:	83 c4 10             	add    esp,0x10
c000d2be:	c6 05 40 88 02 c0 01 	mov    BYTE PTR ds:0xc0028840,0x1
c000d2c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2c8:	0f b7 c0             	movzx  eax,ax
c000d2cb:	3d 25 03 00 00       	cmp    eax,0x325
c000d2d0:	75 06                	jne    c000d2d8 <sendKeyboardToken(KeyboardToken)+0x2d3>
c000d2d2:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c000d2d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2db:	0f b7 c0             	movzx  eax,ax
c000d2de:	3d 24 03 00 00       	cmp    eax,0x324
c000d2e3:	75 06                	jne    c000d2eb <sendKeyboardToken(KeyboardToken)+0x2e6>
c000d2e5:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c000d2eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d2ee:	0f b7 c0             	movzx  eax,ax
c000d2f1:	3d 23 03 00 00       	cmp    eax,0x323
c000d2f6:	75 06                	jne    c000d2fe <sendKeyboardToken(KeyboardToken)+0x2f9>
c000d2f8:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c000d2fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d301:	0f b7 c0             	movzx  eax,ax
c000d304:	3d 26 03 00 00       	cmp    eax,0x326
c000d309:	75 06                	jne    c000d311 <sendKeyboardToken(KeyboardToken)+0x30c>
c000d30b:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c000d311:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d314:	0f b7 c0             	movzx  eax,ax
c000d317:	3d 27 03 00 00       	cmp    eax,0x327
c000d31c:	75 06                	jne    c000d324 <sendKeyboardToken(KeyboardToken)+0x31f>
c000d31e:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c000d324:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d327:	0f b7 c0             	movzx  eax,ax
c000d32a:	3d 22 03 00 00       	cmp    eax,0x322
c000d32f:	75 06                	jne    c000d337 <sendKeyboardToken(KeyboardToken)+0x332>
c000d331:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c000d337:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c000d33b:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d33e:	83 f0 01             	xor    eax,0x1
c000d341:	0f b6 c0             	movzx  eax,al
c000d344:	85 c0                	test   eax,eax
c000d346:	74 7c                	je     c000d3c4 <sendKeyboardToken(KeyboardToken)+0x3bf>
c000d348:	a0 41 85 02 c0       	mov    al,ds:0xc0028541
c000d34d:	0f b6 c0             	movzx  eax,al
c000d350:	85 c0                	test   eax,eax
c000d352:	74 43                	je     c000d397 <sendKeyboardToken(KeyboardToken)+0x392>
c000d354:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d358:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c000d35c:	85 c0                	test   eax,eax
c000d35e:	74 2b                	je     c000d38b <sendKeyboardToken(KeyboardToken)+0x386>
c000d360:	8b 15 44 88 02 c0    	mov    edx,DWORD PTR ds:0xc0028844
c000d366:	89 d0                	mov    eax,edx
c000d368:	c1 e0 02             	shl    eax,0x2
c000d36b:	01 d0                	add    eax,edx
c000d36d:	01 c0                	add    eax,eax
c000d36f:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d374:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d377:	0f b7 c0             	movzx  eax,ax
c000d37a:	8d 50 d0             	lea    edx,[eax-0x30]
c000d37d:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d382:	01 d0                	add    eax,edx
c000d384:	a3 44 88 02 c0       	mov    ds:0xc0028844,eax
c000d389:	eb 71                	jmp    c000d3fc <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d38b:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d395:	eb 65                	jmp    c000d3fc <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d397:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d39c:	85 c0                	test   eax,eax
c000d39e:	74 18                	je     c000d3b8 <sendKeyboardToken(KeyboardToken)+0x3b3>
c000d3a0:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d3a5:	0f b6 c0             	movzx  eax,al
c000d3a8:	83 ec 0c             	sub    esp,0xc
c000d3ab:	50                   	push   eax
c000d3ac:	e8 79 fb ff ff       	call   c000cf2a <sendKeyToTerminal(unsigned char)>
c000d3b1:	83 c4 10             	add    esp,0x10
c000d3b4:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d3b8:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d3c2:	eb 38                	jmp    c000d3fc <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d3c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d3c7:	0f b7 c0             	movzx  eax,ax
c000d3ca:	3d 01 01 00 00       	cmp    eax,0x101
c000d3cf:	75 2b                	jne    c000d3fc <sendKeyboardToken(KeyboardToken)+0x3f7>
c000d3d1:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d3d6:	85 c0                	test   eax,eax
c000d3d8:	74 18                	je     c000d3f2 <sendKeyboardToken(KeyboardToken)+0x3ed>
c000d3da:	a1 44 88 02 c0       	mov    eax,ds:0xc0028844
c000d3df:	0f b6 c0             	movzx  eax,al
c000d3e2:	83 ec 0c             	sub    esp,0xc
c000d3e5:	50                   	push   eax
c000d3e6:	e8 3f fb ff ff       	call   c000cf2a <sendKeyToTerminal(unsigned char)>
c000d3eb:	83 c4 10             	add    esp,0x10
c000d3ee:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c000d3f2:	c7 05 44 88 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028844,0x0
c000d3fc:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d3ff:	83 f0 01             	xor    eax,0x1
c000d402:	0f b6 c0             	movzx  eax,al
c000d405:	85 c0                	test   eax,eax
c000d407:	74 5a                	je     c000d463 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d409:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d40c:	83 f0 01             	xor    eax,0x1
c000d40f:	0f b6 c0             	movzx  eax,al
c000d412:	85 c0                	test   eax,eax
c000d414:	74 4d                	je     c000d463 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d416:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d41b:	83 f0 01             	xor    eax,0x1
c000d41e:	0f b6 c0             	movzx  eax,al
c000d421:	85 c0                	test   eax,eax
c000d423:	74 3e                	je     c000d463 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d425:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d428:	0f b7 c0             	movzx  eax,ax
c000d42b:	83 f8 1f             	cmp    eax,0x1f
c000d42e:	76 0b                	jbe    c000d43b <sendKeyboardToken(KeyboardToken)+0x436>
c000d430:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d433:	0f b7 c0             	movzx  eax,ax
c000d436:	83 f8 7e             	cmp    eax,0x7e
c000d439:	76 16                	jbe    c000d451 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d43b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d43e:	0f b7 c0             	movzx  eax,ax
c000d441:	83 f8 0a             	cmp    eax,0xa
c000d444:	74 0b                	je     c000d451 <sendKeyboardToken(KeyboardToken)+0x44c>
c000d446:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d449:	0f b7 c0             	movzx  eax,ax
c000d44c:	83 f8 08             	cmp    eax,0x8
c000d44f:	75 12                	jne    c000d463 <sendKeyboardToken(KeyboardToken)+0x45e>
c000d451:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d454:	0f b6 c0             	movzx  eax,al
c000d457:	83 ec 0c             	sub    esp,0xc
c000d45a:	50                   	push   eax
c000d45b:	e8 ca fa ff ff       	call   c000cf2a <sendKeyToTerminal(unsigned char)>
c000d460:	83 c4 10             	add    esp,0x10
c000d463:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c000d466:	83 f0 01             	xor    eax,0x1
c000d469:	0f b6 c0             	movzx  eax,al
c000d46c:	85 c0                	test   eax,eax
c000d46e:	74 5d                	je     c000d4cd <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d470:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d473:	83 f0 01             	xor    eax,0x1
c000d476:	0f b6 c0             	movzx  eax,al
c000d479:	85 c0                	test   eax,eax
c000d47b:	74 50                	je     c000d4cd <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d47d:	a0 40 85 02 c0       	mov    al,ds:0xc0028540
c000d482:	0f b6 c0             	movzx  eax,al
c000d485:	85 c0                	test   eax,eax
c000d487:	74 44                	je     c000d4cd <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d489:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d48c:	0f b7 c0             	movzx  eax,ax
c000d48f:	83 f8 3f             	cmp    eax,0x3f
c000d492:	76 39                	jbe    c000d4cd <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d494:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d497:	0f b7 c0             	movzx  eax,ax
c000d49a:	83 f8 7f             	cmp    eax,0x7f
c000d49d:	77 2e                	ja     c000d4cd <sendKeyboardToken(KeyboardToken)+0x4c8>
c000d49f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a2:	88 c2                	mov    dl,al
c000d4a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4a7:	0f b7 c0             	movzx  eax,ax
c000d4aa:	83 f8 5f             	cmp    eax,0x5f
c000d4ad:	76 04                	jbe    c000d4b3 <sendKeyboardToken(KeyboardToken)+0x4ae>
c000d4af:	b0 20                	mov    al,0x20
c000d4b1:	eb 02                	jmp    c000d4b5 <sendKeyboardToken(KeyboardToken)+0x4b0>
c000d4b3:	b0 00                	mov    al,0x0
c000d4b5:	89 d1                	mov    ecx,edx
c000d4b7:	29 c1                	sub    ecx,eax
c000d4b9:	89 c8                	mov    eax,ecx
c000d4bb:	83 e8 40             	sub    eax,0x40
c000d4be:	0f b6 c0             	movzx  eax,al
c000d4c1:	83 ec 0c             	sub    esp,0xc
c000d4c4:	50                   	push   eax
c000d4c5:	e8 60 fa ff ff       	call   c000cf2a <sendKeyToTerminal(unsigned char)>
c000d4ca:	83 c4 10             	add    esp,0x10
c000d4cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4d0:	0f b7 c0             	movzx  eax,ax
c000d4d3:	3d 00 03 00 00       	cmp    eax,0x300
c000d4d8:	75 12                	jne    c000d4ec <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d4da:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c000d4dd:	83 f0 01             	xor    eax,0x1
c000d4e0:	0f b6 c0             	movzx  eax,al
c000d4e3:	85 c0                	test   eax,eax
c000d4e5:	74 05                	je     c000d4ec <sendKeyboardToken(KeyboardToken)+0x4e7>
c000d4e7:	e8 17 b0 ff ff       	call   c0008503 <doTerminalCycle()>
c000d4ec:	90                   	nop
c000d4ed:	c9                   	leave  
c000d4ee:	c3                   	ret    

c000d4ef <clearInternalKeybuffer(VgaText*)>:
c000d4ef:	55                   	push   ebp
c000d4f0:	89 e5                	mov    ebp,esp
c000d4f2:	83 ec 08             	sub    esp,0x8
c000d4f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d4f8:	05 02 01 00 00       	add    eax,0x102
c000d4fd:	83 ec 0c             	sub    esp,0xc
c000d500:	50                   	push   eax
c000d501:	e8 6a 30 ff ff       	call   c0000570 <strlen>
c000d506:	83 c4 10             	add    esp,0x10
c000d509:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d50c:	81 c2 02 01 00 00    	add    edx,0x102
c000d512:	83 ec 04             	sub    esp,0x4
c000d515:	50                   	push   eax
c000d516:	6a 00                	push   0x0
c000d518:	52                   	push   edx
c000d519:	e8 d2 2f ff ff       	call   c00004f0 <memset>
c000d51e:	83 c4 10             	add    esp,0x10
c000d521:	90                   	nop
c000d522:	c9                   	leave  
c000d523:	c3                   	ret    

c000d524 <readKeyboard(VgaText*, char*, unsigned long)>:
c000d524:	55                   	push   ebp
c000d525:	89 e5                	mov    ebp,esp
c000d527:	83 ec 18             	sub    esp,0x18
c000d52a:	a1 28 84 02 c0       	mov    eax,ds:0xc0028428
c000d52f:	85 c0                	test   eax,eax
c000d531:	74 2a                	je     c000d55d <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c000d533:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c000d539:	8b 0d 28 84 02 c0    	mov    ecx,DWORD PTR ds:0xc0028428
c000d53f:	83 ec 04             	sub    esp,0x4
c000d542:	68 40 84 02 c0       	push   0xc0028440
c000d547:	83 ec 08             	sub    esp,0x8
c000d54a:	89 e2                	mov    edx,esp
c000d54c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c000d54f:	89 02                	mov    DWORD PTR [edx],eax
c000d551:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c000d554:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c000d558:	ff d1                	call   ecx
c000d55a:	83 c4 10             	add    esp,0x10
c000d55d:	fb                   	sti    
c000d55e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c000d565:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c000d569:	0f 84 0d 01 00 00    	je     c000d67c <readKeyboard(VgaText*, char*, unsigned long)+0x158>
c000d56f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d572:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d578:	0f be c0             	movsx  eax,al
c000d57b:	85 c0                	test   eax,eax
c000d57d:	75 2c                	jne    c000d5ab <readKeyboard(VgaText*, char*, unsigned long)+0x87>
c000d57f:	fa                   	cli    
c000d580:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d585:	83 c0 01             	add    eax,0x1
c000d588:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d58d:	e8 a6 85 00 00       	call   c0015b38 <schedule()>
c000d592:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d597:	83 e8 01             	sub    eax,0x1
c000d59a:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000d59f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000d5a4:	85 c0                	test   eax,eax
c000d5a6:	75 c7                	jne    c000d56f <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d5a8:	fb                   	sti    
c000d5a9:	eb c4                	jmp    c000d56f <readKeyboard(VgaText*, char*, unsigned long)+0x4b>
c000d5ab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c000d5ae:	8d 50 01             	lea    edx,[eax+0x1]
c000d5b1:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d5b4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d5b7:	8a 92 02 01 00 00    	mov    dl,BYTE PTR [edx+0x102]
c000d5bd:	88 10                	mov    BYTE PTR [eax],dl
c000d5bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d5c2:	8a 80 02 01 00 00    	mov    al,BYTE PTR [eax+0x102]
c000d5c8:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c000d5cb:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d5cf:	83 f8 03             	cmp    eax,0x3
c000d5d2:	75 1e                	jne    c000d5f2 <readKeyboard(VgaText*, char*, unsigned long)+0xce>
c000d5d4:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d5d9:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5db:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d5de:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d5e4:	83 ec 08             	sub    esp,0x8
c000d5e7:	6a 02                	push   0x2
c000d5e9:	50                   	push   eax
c000d5ea:	e8 2b 41 00 00       	call   c001171a <KeRaiseSignal(SigHandlerBlock*, int)>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d5f6:	83 f8 1c             	cmp    eax,0x1c
c000d5f9:	75 1e                	jne    c000d619 <readKeyboard(VgaText*, char*, unsigned long)+0xf5>
c000d5fb:	b8 00 20 00 c2       	mov    eax,0xc2002000
c000d600:	8b 00                	mov    eax,DWORD PTR [eax]
c000d602:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c000d605:	8b 80 20 07 00 00    	mov    eax,DWORD PTR [eax+0x720]
c000d60b:	83 ec 08             	sub    esp,0x8
c000d60e:	6a 09                	push   0x9
c000d610:	50                   	push   eax
c000d611:	e8 04 41 00 00       	call   c001171a <KeRaiseSignal(SigHandlerBlock*, int)>
c000d616:	83 c4 10             	add    esp,0x10
c000d619:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d61c:	05 02 01 00 00       	add    eax,0x102
c000d621:	83 ec 0c             	sub    esp,0xc
c000d624:	50                   	push   eax
c000d625:	e8 46 2f ff ff       	call   c0000570 <strlen>
c000d62a:	83 c4 10             	add    esp,0x10
c000d62d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d630:	81 c2 02 01 00 00    	add    edx,0x102
c000d636:	8d 4a 01             	lea    ecx,[edx+0x1]
c000d639:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c000d63c:	81 c2 02 01 00 00    	add    edx,0x102
c000d642:	83 ec 04             	sub    esp,0x4
c000d645:	50                   	push   eax
c000d646:	51                   	push   ecx
c000d647:	52                   	push   edx
c000d648:	e8 83 2d ff ff       	call   c00003d0 <memmove>
c000d64d:	83 c4 10             	add    esp,0x10
c000d650:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
c000d654:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
c000d658:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d65c:	83 f8 0a             	cmp    eax,0xa
c000d65f:	74 16                	je     c000d677 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d661:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d665:	83 f8 03             	cmp    eax,0x3
c000d668:	74 0d                	je     c000d677 <readKeyboard(VgaText*, char*, unsigned long)+0x153>
c000d66a:	0f be 45 f3          	movsx  eax,BYTE PTR [ebp-0xd]
c000d66e:	83 f8 1c             	cmp    eax,0x1c
c000d671:	0f 85 ee fe ff ff    	jne    c000d565 <readKeyboard(VgaText*, char*, unsigned long)+0x41>
c000d677:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d67a:	eb 03                	jmp    c000d67f <readKeyboard(VgaText*, char*, unsigned long)+0x15b>
c000d67c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c000d67f:	c9                   	leave  
c000d680:	c3                   	ret    
c000d681:	90                   	nop

c000d682 <Keyboard::Keyboard(char const*)>:
c000d682:	83 ec 0c             	sub    esp,0xc
c000d685:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d689:	83 ec 08             	sub    esp,0x8
c000d68c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d690:	50                   	push   eax
c000d691:	e8 4c f1 ff ff       	call   c000c7e2 <Device::Device(char const*)>
c000d696:	83 c4 10             	add    esp,0x10
c000d699:	ba 3c 16 02 c0       	mov    edx,0xc002163c
c000d69e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6a2:	89 10                	mov    DWORD PTR [eax],edx
c000d6a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6a8:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c000d6b2:	c6 05 24 84 02 c0 01 	mov    BYTE PTR ds:0xc0028424,0x1
c000d6b9:	90                   	nop
c000d6ba:	83 c4 0c             	add    esp,0xc
c000d6bd:	c3                   	ret    

c000d6be <Keyboard::~Keyboard()>:
c000d6be:	83 ec 0c             	sub    esp,0xc
c000d6c1:	ba 3c 16 02 c0       	mov    edx,0xc002163c
c000d6c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6ca:	89 10                	mov    DWORD PTR [eax],edx
c000d6cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6d0:	83 ec 0c             	sub    esp,0xc
c000d6d3:	50                   	push   eax
c000d6d4:	e8 73 ee ff ff       	call   c000c54c <Device::~Device()>
c000d6d9:	83 c4 10             	add    esp,0x10
c000d6dc:	90                   	nop
c000d6dd:	83 c4 0c             	add    esp,0xc
c000d6e0:	c3                   	ret    
c000d6e1:	90                   	nop

c000d6e2 <Keyboard::~Keyboard()>:
c000d6e2:	83 ec 0c             	sub    esp,0xc
c000d6e5:	83 ec 0c             	sub    esp,0xc
c000d6e8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d6ec:	e8 cd ff ff ff       	call   c000d6be <Keyboard::~Keyboard()>
c000d6f1:	83 c4 10             	add    esp,0x10
c000d6f4:	83 ec 08             	sub    esp,0x8
c000d6f7:	68 5c 01 00 00       	push   0x15c
c000d6fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d700:	e8 13 d1 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d705:	83 c4 10             	add    esp,0x10
c000d708:	83 c4 0c             	add    esp,0xc
c000d70b:	c3                   	ret    

c000d70c <LogicalDisk::close(int, int, void*)>:
c000d70c:	83 c8 ff             	or     eax,0xffffffff
c000d70f:	c3                   	ret    

c000d710 <LogicalDisk::~LogicalDisk()>:
c000d710:	83 ec 0c             	sub    esp,0xc
c000d713:	ba b4 16 02 c0       	mov    edx,0xc00216b4
c000d718:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d71c:	89 10                	mov    DWORD PTR [eax],edx
c000d71e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d722:	83 ec 0c             	sub    esp,0xc
c000d725:	50                   	push   eax
c000d726:	e8 21 ee ff ff       	call   c000c54c <Device::~Device()>
c000d72b:	83 c4 10             	add    esp,0x10
c000d72e:	90                   	nop
c000d72f:	83 c4 0c             	add    esp,0xc
c000d732:	c3                   	ret    
c000d733:	90                   	nop

c000d734 <LogicalDisk::~LogicalDisk()>:
c000d734:	83 ec 0c             	sub    esp,0xc
c000d737:	83 ec 0c             	sub    esp,0xc
c000d73a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d73e:	e8 cd ff ff ff       	call   c000d710 <LogicalDisk::~LogicalDisk()>
c000d743:	83 c4 10             	add    esp,0x10
c000d746:	83 ec 08             	sub    esp,0x8
c000d749:	68 78 01 00 00       	push   0x178
c000d74e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d752:	e8 c1 d0 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000d757:	83 c4 10             	add    esp,0x10
c000d75a:	83 c4 0c             	add    esp,0xc
c000d75d:	c3                   	ret    

c000d75e <LogicalDisk::open(int, int, void*)>:
c000d75e:	83 ec 18             	sub    esp,0x18
c000d761:	68 68 16 02 c0       	push   0xc0021668
c000d766:	e8 0e 3b 00 00       	call   c0011279 <KePanic(char const*)>
c000d76b:	83 c8 ff             	or     eax,0xffffffff
c000d76e:	83 c4 1c             	add    esp,0x1c
c000d771:	c3                   	ret    

c000d772 <LogicalDisk::absoluteToRelative(unsigned long long)>:
c000d772:	53                   	push   ebx
c000d773:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d777:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000d77b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d77f:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c000d785:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c000d78b:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c000d791:	77 10                	ja     c000d7a3 <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c000d793:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c000d799:	89 d3                	mov    ebx,edx
c000d79b:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c000d7a1:	72 05                	jb     c000d7a8 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c000d7a3:	83 c8 ff             	or     eax,0xffffffff
c000d7a6:	89 c2                	mov    edx,eax
c000d7a8:	5b                   	pop    ebx
c000d7a9:	c3                   	ret    

c000d7aa <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c000d7aa:	56                   	push   esi
c000d7ab:	83 c8 ff             	or     eax,0xffffffff
c000d7ae:	53                   	push   ebx
c000d7af:	89 c2                	mov    edx,eax
c000d7b1:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000d7b5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000d7b9:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000d7bd:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000d7c3:	77 27                	ja     c000d7ec <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d7c5:	89 d8                	mov    eax,ebx
c000d7c7:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c000d7cd:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c000d7d3:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000d7d8:	89 c2                	mov    edx,eax
c000d7da:	73 10                	jae    c000d7ec <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c000d7dc:	89 c8                	mov    eax,ecx
c000d7de:	89 da                	mov    edx,ebx
c000d7e0:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c000d7e6:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c000d7ec:	5b                   	pop    ebx
c000d7ed:	5e                   	pop    esi
c000d7ee:	c3                   	ret    
c000d7ef:	90                   	nop

c000d7f0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c000d7f0:	83 ec 1c             	sub    esp,0x1c
c000d7f3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000d7f7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d7fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d7ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000d803:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000d807:	89 04 24             	mov    DWORD PTR [esp],eax
c000d80a:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d80e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d812:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d816:	83 ec 08             	sub    esp,0x8
c000d819:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d81d:	50                   	push   eax
c000d81e:	e8 bf ef ff ff       	call   c000c7e2 <Device::Device(char const*)>
c000d823:	83 c4 10             	add    esp,0x10
c000d826:	ba b4 16 02 c0       	mov    edx,0xc00216b4
c000d82b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d82f:	89 10                	mov    DWORD PTR [eax],edx
c000d831:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d835:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d83c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d840:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c000d847:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d84b:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c000d852:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d856:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c000d860:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d864:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d868:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d86c:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c000d872:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c000d878:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000d87c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000d87f:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d883:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c000d889:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c000d88f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d893:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000d897:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c000d89d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000d8a1:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d8ab:	90                   	nop
c000d8ac:	83 c4 1c             	add    esp,0x1c
c000d8af:	c3                   	ret    

c000d8b0 <LogicalDisk::assignDriveLetter()>:
c000d8b0:	55                   	push   ebp
c000d8b1:	57                   	push   edi
c000d8b2:	56                   	push   esi
c000d8b3:	53                   	push   ebx
c000d8b4:	83 ec 14             	sub    esp,0x14
c000d8b7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000d8bb:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c000d8c1:	b0 41                	mov    al,0x41
c000d8c3:	8a 93 69 01 00 00    	mov    dl,BYTE PTR [ebx+0x169]
c000d8c9:	84 d2                	test   dl,dl
c000d8cb:	75 02                	jne    c000d8cf <LogicalDisk::assignDriveLetter()+0x1f>
c000d8cd:	b0 43                	mov    al,0x43
c000d8cf:	8b 3d 60 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028860
c000d8d5:	0f b6 ca             	movzx  ecx,dl
c000d8d8:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c000d8dc:	0f be e8             	movsx  ebp,al
c000d8df:	8b 3d 64 88 02 c0    	mov    edi,DWORD PTR ds:0xc0028864
c000d8e5:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000d8e9:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000d8ed:	3c 43                	cmp    al,0x43
c000d8ef:	75 10                	jne    c000d901 <LogicalDisk::assignDriveLetter()+0x51>
c000d8f1:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c000d8f8:	75 5a                	jne    c000d954 <LogicalDisk::assignDriveLetter()+0xa4>
c000d8fa:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c000d8ff:	75 53                	jne    c000d954 <LogicalDisk::assignDriveLetter()+0xa4>
c000d901:	8d 75 bf             	lea    esi,[ebp-0x41]
c000d904:	ba 01 00 00 00       	mov    edx,0x1
c000d909:	89 34 24             	mov    DWORD PTR [esp],esi
c000d90c:	8a 0c 24             	mov    cl,BYTE PTR [esp]
c000d90f:	d3 e2                	shl    edx,cl
c000d911:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000d915:	89 d7                	mov    edi,edx
c000d917:	89 d6                	mov    esi,edx
c000d919:	c1 ff 1f             	sar    edi,0x1f
c000d91c:	23 54 24 04          	and    edx,DWORD PTR [esp+0x4]
c000d920:	21 f9                	and    ecx,edi
c000d922:	09 d1                	or     ecx,edx
c000d924:	75 2e                	jne    c000d954 <LogicalDisk::assignDriveLetter()+0xa4>
c000d926:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c000d92a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000d92e:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c000d934:	09 f2                	or     edx,esi
c000d936:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000d939:	89 15 60 88 02 c0    	mov    DWORD PTR ds:0xc0028860,edx
c000d93f:	89 1c b5 80 88 02 c0 	mov    DWORD PTR [esi*4-0x3ffd7780],ebx
c000d946:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000d94a:	09 fa                	or     edx,edi
c000d94c:	89 15 64 88 02 c0    	mov    DWORD PTR ds:0xc0028864,edx
c000d952:	eb 0d                	jmp    c000d961 <LogicalDisk::assignDriveLetter()+0xb1>
c000d954:	8d 50 01             	lea    edx,[eax+0x1]
c000d957:	45                   	inc    ebp
c000d958:	88 d0                	mov    al,dl
c000d95a:	80 fa 5b             	cmp    dl,0x5b
c000d95d:	75 8e                	jne    c000d8ed <LogicalDisk::assignDriveLetter()+0x3d>
c000d95f:	31 c0                	xor    eax,eax
c000d961:	83 c4 14             	add    esp,0x14
c000d964:	5b                   	pop    ebx
c000d965:	5e                   	pop    esi
c000d966:	5f                   	pop    edi
c000d967:	5d                   	pop    ebp
c000d968:	c3                   	ret    
c000d969:	90                   	nop

c000d96a <LogicalDisk::mount()>:
c000d96a:	56                   	push   esi
c000d96b:	53                   	push   ebx
c000d96c:	53                   	push   ebx
c000d96d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000d971:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c000d977:	c7 86 74 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x174],0x0
c000d981:	85 db                	test   ebx,ebx
c000d983:	74 27                	je     c000d9ac <LogicalDisk::mount()+0x42>
c000d985:	51                   	push   ecx
c000d986:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c000d98d:	8b 13                	mov    edx,DWORD PTR [ebx]
c000d98f:	83 e8 41             	sub    eax,0x41
c000d992:	50                   	push   eax
c000d993:	56                   	push   esi
c000d994:	53                   	push   ebx
c000d995:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c000d998:	83 c4 10             	add    esp,0x10
c000d99b:	84 c0                	test   al,al
c000d99d:	74 08                	je     c000d9a7 <LogicalDisk::mount()+0x3d>
c000d99f:	89 9e 74 01 00 00    	mov    DWORD PTR [esi+0x174],ebx
c000d9a5:	eb 07                	jmp    c000d9ae <LogicalDisk::mount()+0x44>
c000d9a7:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c000d9aa:	eb d5                	jmp    c000d981 <LogicalDisk::mount()+0x17>
c000d9ac:	31 c0                	xor    eax,eax
c000d9ae:	5a                   	pop    edx
c000d9af:	5b                   	pop    ebx
c000d9b0:	5e                   	pop    esi
c000d9b1:	c3                   	ret    

c000d9b2 <LogicalDisk::unmount()>:
c000d9b2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9b6:	c7 80 74 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x174],0x0
c000d9c0:	c3                   	ret    
c000d9c1:	90                   	nop

c000d9c2 <LogicalDisk::eject()>:
c000d9c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000d9c6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c000d9cc:	8b 10                	mov    edx,DWORD PTR [eax]
c000d9ce:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000d9d2:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c000d9d5:	90                   	nop

c000d9d6 <LogicalDisk::unassignDriveLetter()>:
c000d9d6:	57                   	push   edi
c000d9d7:	56                   	push   esi
c000d9d8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d9dc:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c000d9e3:	85 c9                	test   ecx,ecx
c000d9e5:	75 0f                	jne    c000d9f6 <LogicalDisk::unassignDriveLetter()+0x20>
c000d9e7:	c7 44 24 0c 8c 16 02 c0 	mov    DWORD PTR [esp+0xc],0xc002168c
c000d9ef:	5e                   	pop    esi
c000d9f0:	5f                   	pop    edi
c000d9f1:	e9 83 38 00 00       	jmp    c0011279 <KePanic(char const*)>
c000d9f6:	83 e9 41             	sub    ecx,0x41
c000d9f9:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c000da00:	b8 01 00 00 00       	mov    eax,0x1
c000da05:	c7 04 8d 80 88 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd7780],0x0
c000da10:	d3 e0                	shl    eax,cl
c000da12:	89 c7                	mov    edi,eax
c000da14:	f7 d0                	not    eax
c000da16:	c1 ff 1f             	sar    edi,0x1f
c000da19:	21 05 60 88 02 c0    	and    DWORD PTR ds:0xc0028860,eax
c000da1f:	89 fe                	mov    esi,edi
c000da21:	f7 d6                	not    esi
c000da23:	21 35 64 88 02 c0    	and    DWORD PTR ds:0xc0028864,esi
c000da29:	5e                   	pop    esi
c000da2a:	5f                   	pop    edi
c000da2b:	c3                   	ret    

c000da2c <LogicalDisk::read(unsigned long long, int, void*)>:
c000da2c:	57                   	push   edi
c000da2d:	56                   	push   esi
c000da2e:	53                   	push   ebx
c000da2f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000da37:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000da3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000da3f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000da45:	77 41                	ja     c000da88 <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c000da47:	99                   	cdq    
c000da48:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000da4e:	01 c8                	add    eax,ecx
c000da50:	11 da                	adc    edx,ebx
c000da52:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000da58:	19 d7                	sbb    edi,edx
c000da5a:	72 33                	jb     c000da8f <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c000da5c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000da62:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000da68:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000da6c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000da70:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000da76:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000da7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da80:	5b                   	pop    ebx
c000da81:	5e                   	pop    esi
c000da82:	5f                   	pop    edi
c000da83:	e9 c6 0a 00 00       	jmp    c000e54e <VCache::read(unsigned long long, int, void*)>
c000da88:	b8 05 00 00 00       	mov    eax,0x5
c000da8d:	eb 05                	jmp    c000da94 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c000da8f:	b8 07 00 00 00       	mov    eax,0x7
c000da94:	5b                   	pop    ebx
c000da95:	5e                   	pop    esi
c000da96:	5f                   	pop    edi
c000da97:	c3                   	ret    

c000da98 <LogicalDisk::write(unsigned long long, int, void*)>:
c000da98:	57                   	push   edi
c000da99:	56                   	push   esi
c000da9a:	53                   	push   ebx
c000da9b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c000da9f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000daa3:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000daa7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000daab:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c000dab1:	77 41                	ja     c000daf4 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c000dab3:	99                   	cdq    
c000dab4:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c000daba:	01 c8                	add    eax,ecx
c000dabc:	11 da                	adc    edx,ebx
c000dabe:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c000dac4:	19 d7                	sbb    edi,edx
c000dac6:	72 33                	jb     c000dafb <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c000dac8:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c000dace:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c000dad4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000dad8:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c000dadc:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c000dae2:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000dae8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000daec:	5b                   	pop    ebx
c000daed:	5e                   	pop    esi
c000daee:	5f                   	pop    edi
c000daef:	e9 6c 09 00 00       	jmp    c000e460 <VCache::write(unsigned long long, int, void*)>
c000daf4:	b8 05 00 00 00       	mov    eax,0x5
c000daf9:	eb 05                	jmp    c000db00 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c000dafb:	b8 07 00 00 00       	mov    eax,0x7
c000db00:	5b                   	pop    ebx
c000db01:	5e                   	pop    esi
c000db02:	5f                   	pop    edi
c000db03:	c3                   	ret    

c000db04 <Mouse::Mouse(char const*)>:
c000db04:	83 ec 0c             	sub    esp,0xc
c000db07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db0b:	83 ec 08             	sub    esp,0x8
c000db0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db12:	50                   	push   eax
c000db13:	e8 ca ec ff ff       	call   c000c7e2 <Device::Device(char const*)>
c000db18:	83 c4 10             	add    esp,0x10
c000db1b:	ba e0 16 02 c0       	mov    edx,0xc00216e0
c000db20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db24:	89 10                	mov    DWORD PTR [eax],edx
c000db26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db2a:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c000db34:	90                   	nop
c000db35:	83 c4 0c             	add    esp,0xc
c000db38:	c3                   	ret    
c000db39:	90                   	nop
c000db3a:	66 90                	xchg   ax,ax

c000db3c <Mouse::~Mouse()>:
c000db3c:	83 ec 0c             	sub    esp,0xc
c000db3f:	ba e0 16 02 c0       	mov    edx,0xc00216e0
c000db44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db48:	89 10                	mov    DWORD PTR [eax],edx
c000db4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db4e:	83 ec 0c             	sub    esp,0xc
c000db51:	50                   	push   eax
c000db52:	e8 f5 e9 ff ff       	call   c000c54c <Device::~Device()>
c000db57:	83 c4 10             	add    esp,0x10
c000db5a:	90                   	nop
c000db5b:	83 c4 0c             	add    esp,0xc
c000db5e:	c3                   	ret    
c000db5f:	90                   	nop

c000db60 <Mouse::~Mouse()>:
c000db60:	83 ec 0c             	sub    esp,0xc
c000db63:	83 ec 0c             	sub    esp,0xc
c000db66:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db6a:	e8 cd ff ff ff       	call   c000db3c <Mouse::~Mouse()>
c000db6f:	83 c4 10             	add    esp,0x10
c000db72:	83 ec 08             	sub    esp,0x8
c000db75:	68 58 01 00 00       	push   0x158
c000db7a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db7e:	e8 95 cc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000db83:	83 c4 10             	add    esp,0x10
c000db86:	83 c4 0c             	add    esp,0xc
c000db89:	c3                   	ret    

c000db8a <NIC::getMAC()>:
c000db8a:	31 c0                	xor    eax,eax
c000db8c:	31 d2                	xor    edx,edx
c000db8e:	c3                   	ret    
c000db8f:	90                   	nop

c000db90 <NIC::write(int, unsigned char*, int*)>:
c000db90:	b8 01 00 00 00       	mov    eax,0x1
c000db95:	c3                   	ret    

c000db96 <NIC::NIC(char const*)>:
c000db96:	83 ec 0c             	sub    esp,0xc
c000db99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000db9d:	83 ec 08             	sub    esp,0x8
c000dba0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dba4:	50                   	push   eax
c000dba5:	e8 38 ec ff ff       	call   c000c7e2 <Device::Device(char const*)>
c000dbaa:	83 c4 10             	add    esp,0x10
c000dbad:	ba 0c 17 02 c0       	mov    edx,0xc002170c
c000dbb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbb6:	89 10                	mov    DWORD PTR [eax],edx
c000dbb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbbc:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c000dbc6:	90                   	nop
c000dbc7:	83 c4 0c             	add    esp,0xc
c000dbca:	c3                   	ret    
c000dbcb:	90                   	nop

c000dbcc <NIC::~NIC()>:
c000dbcc:	83 ec 0c             	sub    esp,0xc
c000dbcf:	ba 0c 17 02 c0       	mov    edx,0xc002170c
c000dbd4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbd8:	89 10                	mov    DWORD PTR [eax],edx
c000dbda:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dbde:	83 ec 0c             	sub    esp,0xc
c000dbe1:	50                   	push   eax
c000dbe2:	e8 65 e9 ff ff       	call   c000c54c <Device::~Device()>
c000dbe7:	83 c4 10             	add    esp,0x10
c000dbea:	90                   	nop
c000dbeb:	83 c4 0c             	add    esp,0xc
c000dbee:	c3                   	ret    
c000dbef:	90                   	nop

c000dbf0 <NIC::~NIC()>:
c000dbf0:	83 ec 0c             	sub    esp,0xc
c000dbf3:	83 ec 0c             	sub    esp,0xc
c000dbf6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbfa:	e8 cd ff ff ff       	call   c000dbcc <NIC::~NIC()>
c000dbff:	83 c4 10             	add    esp,0x10
c000dc02:	83 ec 08             	sub    esp,0x8
c000dc05:	68 58 01 00 00       	push   0x158
c000dc0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0e:	e8 05 cc ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dc13:	83 c4 10             	add    esp,0x10
c000dc16:	83 c4 0c             	add    esp,0xc
c000dc19:	c3                   	ret    

c000dc1a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c000dc1a:	55                   	push   ebp
c000dc1b:	57                   	push   edi
c000dc1c:	56                   	push   esi
c000dc1d:	53                   	push   ebx
c000dc1e:	81 ec 28 01 00 00    	sub    esp,0x128
c000dc24:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c000dc2b:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c000dc32:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c000dc39:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c000dc40:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000dc44:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000dc48:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dc4f:	e8 8a ec ff ff       	call   c000c8de <Device::getName()>
c000dc54:	5a                   	pop    edx
c000dc55:	59                   	pop    ecx
c000dc56:	50                   	push   eax
c000dc57:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c000dc5b:	55                   	push   ebp
c000dc5c:	e8 df 29 ff ff       	call   c0000640 <strcpy>
c000dc61:	5b                   	pop    ebx
c000dc62:	58                   	pop    eax
c000dc63:	68 38 17 02 c0       	push   0xc0021738
c000dc68:	55                   	push   ebp
c000dc69:	e8 d2 2b ff ff       	call   c0000840 <strcat>
c000dc6e:	c7 04 24 78 01 00 00 	mov    DWORD PTR [esp],0x178
c000dc75:	e8 3c 9e ff ff       	call   c0007ab6 <malloc>
c000dc7a:	83 c4 0c             	add    esp,0xc
c000dc7d:	89 c3                	mov    ebx,eax
c000dc7f:	57                   	push   edi
c000dc80:	56                   	push   esi
c000dc81:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc85:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000dc89:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c000dc90:	55                   	push   ebp
c000dc91:	50                   	push   eax
c000dc92:	e8 59 fb ff ff       	call   c000d7f0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c000dc97:	83 c4 14             	add    esp,0x14
c000dc9a:	53                   	push   ebx
c000dc9b:	e8 10 fc ff ff       	call   c000d8b0 <LogicalDisk::assignDriveLetter()>
c000dca0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000dca3:	e8 c2 fc ff ff       	call   c000d96a <LogicalDisk::mount()>
c000dca8:	58                   	pop    eax
c000dca9:	5a                   	pop    edx
c000dcaa:	53                   	push   ebx
c000dcab:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c000dcb2:	e8 93 e9 ff ff       	call   c000c64a <Device::addChild(Device*)>
c000dcb7:	81 c4 2c 01 00 00    	add    esp,0x12c
c000dcbd:	5b                   	pop    ebx
c000dcbe:	5e                   	pop    esi
c000dcbf:	5f                   	pop    edi
c000dcc0:	5d                   	pop    ebp
c000dcc1:	c3                   	ret    

c000dcc2 <createPartitionsForDisk(PhysicalDisk*)>:
c000dcc2:	55                   	push   ebp
c000dcc3:	57                   	push   edi
c000dcc4:	56                   	push   esi
c000dcc5:	53                   	push   ebx
c000dcc6:	81 ec 5c 02 00 00    	sub    esp,0x25c
c000dccc:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c000dcd3:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c000dcd9:	3d 00 02 00 00       	cmp    eax,0x200
c000dcde:	74 27                	je     c000dd07 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c000dce0:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c000dce6:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c000dcec:	83 ec 10             	sub    esp,0x10
c000dcef:	0f a4 f7 0a          	shld   edi,esi,0xa
c000dcf3:	99                   	cdq    
c000dcf4:	c1 e6 0a             	shl    esi,0xa
c000dcf7:	52                   	push   edx
c000dcf8:	89 fd                	mov    ebp,edi
c000dcfa:	50                   	push   eax
c000dcfb:	55                   	push   ebp
c000dcfc:	56                   	push   esi
c000dcfd:	e8 ae 14 01 00       	call   c001f1b0 <__udivdi3>
c000dd02:	e9 b9 00 00 00       	jmp    c000ddc0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dd07:	83 ec 0c             	sub    esp,0xc
c000dd0a:	8b 03                	mov    eax,DWORD PTR [ebx]
c000dd0c:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c000dd10:	56                   	push   esi
c000dd11:	6a 01                	push   0x1
c000dd13:	6a 00                	push   0x0
c000dd15:	6a 00                	push   0x0
c000dd17:	53                   	push   ebx
c000dd18:	ff 50 28             	call   DWORD PTR [eax+0x28]
c000dd1b:	83 c4 20             	add    esp,0x20
c000dd1e:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c000dd26:	75 0a                	jne    c000dd32 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c000dd28:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c000dd30:	74 2c                	je     c000dd5e <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c000dd32:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dd38:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dd3e:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dd44:	83 ec 10             	sub    esp,0x10
c000dd47:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dd4b:	89 f7                	mov    edi,esi
c000dd4d:	c1 e0 0a             	shl    eax,0xa
c000dd50:	c1 ff 1f             	sar    edi,0x1f
c000dd53:	57                   	push   edi
c000dd54:	56                   	push   esi
c000dd55:	52                   	push   edx
c000dd56:	50                   	push   eax
c000dd57:	e8 54 14 01 00       	call   c001f1b0 <__udivdi3>
c000dd5c:	eb 62                	jmp    c000ddc0 <createPartitionsForDisk(PhysicalDisk*)+0xfe>
c000dd5e:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c000dd65:	8a 94 24 1e 02 00 00 	mov    dl,BYTE PTR [esp+0x21e]
c000dd6c:	89 cf                	mov    edi,ecx
c000dd6e:	83 e2 7f             	and    edx,0x7f
c000dd71:	83 e7 7f             	and    edi,0x7f
c000dd74:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c000dd7b:	8d 0c 17             	lea    ecx,[edi+edx*1]
c000dd7e:	83 e0 7f             	and    eax,0x7f
c000dd81:	8d 14 01             	lea    edx,[ecx+eax*1]
c000dd84:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c000dd8b:	83 e0 7f             	and    eax,0x7f
c000dd8e:	01 d0                	add    eax,edx
c000dd90:	89 c5                	mov    ebp,eax
c000dd92:	84 c0                	test   al,al
c000dd94:	74 41                	je     c000ddd7 <createPartitionsForDisk(PhysicalDisk*)+0x115>
c000dd96:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000dd9c:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000dda2:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000dda8:	83 ec 10             	sub    esp,0x10
c000ddab:	0f a4 c2 0a          	shld   edx,eax,0xa
c000ddaf:	89 f7                	mov    edi,esi
c000ddb1:	c1 e0 0a             	shl    eax,0xa
c000ddb4:	c1 ff 1f             	sar    edi,0x1f
c000ddb7:	57                   	push   edi
c000ddb8:	56                   	push   esi
c000ddb9:	52                   	push   edx
c000ddba:	50                   	push   eax
c000ddbb:	e8 f0 13 01 00       	call   c001f1b0 <__udivdi3>
c000ddc0:	83 c4 14             	add    esp,0x14
c000ddc3:	52                   	push   edx
c000ddc4:	50                   	push   eax
c000ddc5:	6a 00                	push   0x0
c000ddc7:	6a 00                	push   0x0
c000ddc9:	53                   	push   ebx
c000ddca:	e8 4b fe ff ff       	call   c000dc1a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000ddcf:	83 c4 20             	add    esp,0x20
c000ddd2:	e9 73 01 00 00       	jmp    c000df4a <createPartitionsForDisk(PhysicalDisk*)+0x288>
c000ddd7:	89 f0                	mov    eax,esi
c000ddd9:	31 c9                	xor    ecx,ecx
c000dddb:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c000dde2:	75 02                	jne    c000dde6 <createPartitionsForDisk(PhysicalDisk*)+0x124>
c000dde4:	89 cd                	mov    ebp,ecx
c000dde6:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c000dded:	0f b6 b0 c8 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c8]
c000ddf4:	c1 e2 08             	shl    edx,0x8
c000ddf7:	c1 e6 10             	shl    esi,0x10
c000ddfa:	c7 44 cc 14 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x14],0x0
c000de02:	09 f2                	or     edx,esi
c000de04:	c7 44 cc 34 00 00 00 00 	mov    DWORD PTR [esp+ecx*8+0x34],0x0
c000de0c:	0f b6 b0 c6 01 00 00 	movzx  esi,BYTE PTR [eax+0x1c6]
c000de13:	83 c0 10             	add    eax,0x10
c000de16:	09 f2                	or     edx,esi
c000de18:	0f b6 b0 b9 01 00 00 	movzx  esi,BYTE PTR [eax+0x1b9]
c000de1f:	c1 e6 18             	shl    esi,0x18
c000de22:	09 f2                	or     edx,esi
c000de24:	0f b6 b0 bc 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bc]
c000de2b:	89 54 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],edx
c000de2f:	c1 e6 10             	shl    esi,0x10
c000de32:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c000de39:	c1 e2 08             	shl    edx,0x8
c000de3c:	09 f2                	or     edx,esi
c000de3e:	0f b6 b0 ba 01 00 00 	movzx  esi,BYTE PTR [eax+0x1ba]
c000de45:	09 f2                	or     edx,esi
c000de47:	0f b6 b0 bd 01 00 00 	movzx  esi,BYTE PTR [eax+0x1bd]
c000de4e:	c1 e6 18             	shl    esi,0x18
c000de51:	09 f2                	or     edx,esi
c000de53:	89 54 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],edx
c000de57:	41                   	inc    ecx
c000de58:	83 f9 04             	cmp    ecx,0x4
c000de5b:	0f 85 7a ff ff ff    	jne    c000dddb <createPartitionsForDisk(PhysicalDisk*)+0x119>
c000de61:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000de65:	83 f0 01             	xor    eax,0x1
c000de68:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000de6c:	75 4f                	jne    c000debd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de6e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000de72:	83 f0 01             	xor    eax,0x1
c000de75:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c000de79:	75 42                	jne    c000debd <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c000de7b:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000de83:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000de8b:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000de91:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c000de97:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c000de9d:	0f a4 c2 0a          	shld   edx,eax,0xa
c000dea1:	89 f7                	mov    edi,esi
c000dea3:	c1 e0 0a             	shl    eax,0xa
c000dea6:	c1 ff 1f             	sar    edi,0x1f
c000dea9:	57                   	push   edi
c000deaa:	56                   	push   esi
c000deab:	52                   	push   edx
c000deac:	50                   	push   eax
c000dead:	e8 fe 12 01 00       	call   c001f1b0 <__udivdi3>
c000deb2:	83 c4 10             	add    esp,0x10
c000deb5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000deb9:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000debd:	89 e8                	mov    eax,ebp
c000debf:	0f b6 e8             	movzx  ebp,al
c000dec2:	85 ed                	test   ebp,ebp
c000dec4:	74 50                	je     c000df16 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c000dec6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000deca:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000dece:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000ded2:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000ded6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000deda:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dede:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000dee2:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000dee6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000deea:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000deee:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000def2:	89 74 ec 10          	mov    DWORD PTR [esp+ebp*8+0x10],esi
c000def6:	89 7c ec 14          	mov    DWORD PTR [esp+ebp*8+0x14],edi
c000defa:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000defe:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000df02:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000df06:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c000df0a:	89 7c 24 34          	mov    DWORD PTR [esp+0x34],edi
c000df0e:	89 44 ec 30          	mov    DWORD PTR [esp+ebp*8+0x30],eax
c000df12:	89 54 ec 34          	mov    DWORD PTR [esp+ebp*8+0x34],edx
c000df16:	31 ed                	xor    ebp,ebp
c000df18:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c000df1c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c000df20:	89 f8                	mov    eax,edi
c000df22:	09 f0                	or     eax,esi
c000df24:	74 1e                	je     c000df44 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000df26:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c000df2a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c000df2e:	89 d1                	mov    ecx,edx
c000df30:	09 c1                	or     ecx,eax
c000df32:	74 10                	je     c000df44 <createPartitionsForDisk(PhysicalDisk*)+0x282>
c000df34:	83 ec 0c             	sub    esp,0xc
c000df37:	57                   	push   edi
c000df38:	56                   	push   esi
c000df39:	52                   	push   edx
c000df3a:	50                   	push   eax
c000df3b:	53                   	push   ebx
c000df3c:	e8 d9 fc ff ff       	call   c000dc1a <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c000df41:	83 c4 20             	add    esp,0x20
c000df44:	45                   	inc    ebp
c000df45:	83 fd 04             	cmp    ebp,0x4
c000df48:	75 ce                	jne    c000df18 <createPartitionsForDisk(PhysicalDisk*)+0x256>
c000df4a:	81 c4 5c 02 00 00    	add    esp,0x25c
c000df50:	5b                   	pop    ebx
c000df51:	5e                   	pop    esi
c000df52:	5f                   	pop    edi
c000df53:	5d                   	pop    ebp
c000df54:	c3                   	ret    
c000df55:	66 90                	xchg   ax,ax
c000df57:	90                   	nop

c000df58 <Serial::Serial(char const*)>:
c000df58:	83 ec 0c             	sub    esp,0xc
c000df5b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df5f:	83 ec 08             	sub    esp,0x8
c000df62:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000df66:	50                   	push   eax
c000df67:	e8 76 e8 ff ff       	call   c000c7e2 <Device::Device(char const*)>
c000df6c:	83 c4 10             	add    esp,0x10
c000df6f:	ba 4c 17 02 c0       	mov    edx,0xc002174c
c000df74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df78:	89 10                	mov    DWORD PTR [eax],edx
c000df7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df7e:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c000df88:	90                   	nop
c000df89:	83 c4 0c             	add    esp,0xc
c000df8c:	c3                   	ret    
c000df8d:	90                   	nop
c000df8e:	66 90                	xchg   ax,ax

c000df90 <Serial::~Serial()>:
c000df90:	83 ec 0c             	sub    esp,0xc
c000df93:	ba 4c 17 02 c0       	mov    edx,0xc002174c
c000df98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000df9c:	89 10                	mov    DWORD PTR [eax],edx
c000df9e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfa2:	83 ec 0c             	sub    esp,0xc
c000dfa5:	50                   	push   eax
c000dfa6:	e8 a1 e5 ff ff       	call   c000c54c <Device::~Device()>
c000dfab:	83 c4 10             	add    esp,0x10
c000dfae:	90                   	nop
c000dfaf:	83 c4 0c             	add    esp,0xc
c000dfb2:	c3                   	ret    
c000dfb3:	90                   	nop

c000dfb4 <Serial::~Serial()>:
c000dfb4:	83 ec 0c             	sub    esp,0xc
c000dfb7:	83 ec 0c             	sub    esp,0xc
c000dfba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfbe:	e8 cd ff ff ff       	call   c000df90 <Serial::~Serial()>
c000dfc3:	83 c4 10             	add    esp,0x10
c000dfc6:	83 ec 08             	sub    esp,0x8
c000dfc9:	68 58 01 00 00       	push   0x158
c000dfce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfd2:	e8 41 c8 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000dfd7:	83 c4 10             	add    esp,0x10
c000dfda:	83 c4 0c             	add    esp,0xc
c000dfdd:	c3                   	ret    
c000dfde:	66 90                	xchg   ax,ax

c000dfe0 <Timer::Timer(char const*)>:
c000dfe0:	83 ec 0c             	sub    esp,0xc
c000dfe3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000dfe7:	83 ec 08             	sub    esp,0x8
c000dfea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfee:	50                   	push   eax
c000dfef:	e8 ee e7 ff ff       	call   c000c7e2 <Device::Device(char const*)>
c000dff4:	83 c4 10             	add    esp,0x10
c000dff7:	ba 90 17 02 c0       	mov    edx,0xc0021790
c000dffc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e000:	89 10                	mov    DWORD PTR [eax],edx
c000e002:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e006:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c000e010:	90                   	nop
c000e011:	83 c4 0c             	add    esp,0xc
c000e014:	c3                   	ret    
c000e015:	90                   	nop
c000e016:	66 90                	xchg   ax,ax

c000e018 <Timer::~Timer()>:
c000e018:	83 ec 0c             	sub    esp,0xc
c000e01b:	ba 90 17 02 c0       	mov    edx,0xc0021790
c000e020:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e024:	89 10                	mov    DWORD PTR [eax],edx
c000e026:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e02a:	83 ec 0c             	sub    esp,0xc
c000e02d:	50                   	push   eax
c000e02e:	e8 19 e5 ff ff       	call   c000c54c <Device::~Device()>
c000e033:	83 c4 10             	add    esp,0x10
c000e036:	90                   	nop
c000e037:	83 c4 0c             	add    esp,0xc
c000e03a:	c3                   	ret    
c000e03b:	90                   	nop

c000e03c <Timer::~Timer()>:
c000e03c:	83 ec 0c             	sub    esp,0xc
c000e03f:	83 ec 0c             	sub    esp,0xc
c000e042:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e046:	e8 cd ff ff ff       	call   c000e018 <Timer::~Timer()>
c000e04b:	83 c4 10             	add    esp,0x10
c000e04e:	83 ec 08             	sub    esp,0x8
c000e051:	68 5c 01 00 00       	push   0x15c
c000e056:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e05a:	e8 b9 c7 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e05f:	83 c4 10             	add    esp,0x10
c000e062:	83 c4 0c             	add    esp,0xc
c000e065:	c3                   	ret    

c000e066 <Timer::read()>:
c000e066:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e06a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e070:	c3                   	ret    

c000e071 <setupTimer(int)>:
c000e071:	53                   	push   ebx
c000e072:	83 ec 14             	sub    esp,0x14
c000e075:	68 5c 01 00 00       	push   0x15c
c000e07a:	e8 37 9a ff ff       	call   c0007ab6 <malloc>
c000e07f:	89 04 24             	mov    DWORD PTR [esp],eax
c000e082:	89 c3                	mov    ebx,eax
c000e084:	e8 8b 09 01 00       	call   c001ea14 <PIT::PIT()>
c000e089:	58                   	pop    eax
c000e08a:	5a                   	pop    edx
c000e08b:	53                   	push   ebx
c000e08c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c000e092:	e8 b3 e5 ff ff       	call   c000c64a <Device::addChild(Device*)>
c000e097:	8b 03                	mov    eax,DWORD PTR [ebx]
c000e099:	6a 00                	push   0x0
c000e09b:	6a 00                	push   0x0
c000e09d:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000e0a1:	53                   	push   ebx
c000e0a2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c000e0a5:	89 d8                	mov    eax,ebx
c000e0a7:	83 c4 28             	add    esp,0x28
c000e0aa:	5b                   	pop    ebx
c000e0ab:	c3                   	ret    

c000e0ac <timerHandler(unsigned int)>:
c000e0ac:	56                   	push   esi
c000e0ad:	53                   	push   ebx
c000e0ae:	51                   	push   ecx
c000e0af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e0b3:	01 05 ec 88 02 c0    	add    DWORD PTR ds:0xc00288ec,eax
c000e0b9:	80 3d bd 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebd,0x0
c000e0c0:	0f 84 4a 01 00 00    	je     c000e210 <timerHandler(unsigned int)+0x164>
c000e0c6:	fa                   	cli    
c000e0c7:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e0cd:	83 ec 0c             	sub    esp,0xc
c000e0d0:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c000e0d6:	68 d8 96 02 c0       	push   0xc00296d8
c000e0db:	e8 a0 16 01 00       	call   c001f780 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e0e0:	83 c4 10             	add    esp,0x10
c000e0e3:	84 c0                	test   al,al
c000e0e5:	0f 85 a1 00 00 00    	jne    c000e18c <timerHandler(unsigned int)+0xe0>
c000e0eb:	83 ec 0c             	sub    esp,0xc
c000e0ee:	68 d8 96 02 c0       	push   0xc00296d8
c000e0f3:	e8 a4 16 01 00       	call   c001f79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e0f8:	83 c4 10             	add    esp,0x10
c000e0fb:	89 c6                	mov    esi,eax
c000e0fd:	8d 76 00             	lea    esi,[esi+0x0]
c000e100:	83 ec 0c             	sub    esp,0xc
c000e103:	68 d8 96 02 c0       	push   0xc00296d8
c000e108:	e8 8f 16 01 00       	call   c001f79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e10d:	c7 04 24 d8 96 02 c0 	mov    DWORD PTR [esp],0xc00296d8
c000e114:	89 c3                	mov    ebx,eax
c000e116:	e8 89 16 01 00       	call   c001f7a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c000e11b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000e11e:	83 c4 10             	add    esp,0x10
c000e121:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c000e127:	77 23                	ja     c000e14c <timerHandler(unsigned int)+0xa0>
c000e129:	83 ec 0c             	sub    esp,0xc
c000e12c:	53                   	push   ebx
c000e12d:	e8 1e 7f 00 00       	call   c0016050 <unblockTask(ThreadControlBlock*)>
c000e132:	83 c4 10             	add    esp,0x10
c000e135:	39 de                	cmp    esi,ebx
c000e137:	75 27                	jne    c000e160 <timerHandler(unsigned int)+0xb4>
c000e139:	83 ec 0c             	sub    esp,0xc
c000e13c:	68 d8 96 02 c0       	push   0xc00296d8
c000e141:	e8 56 16 01 00       	call   c001f79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e146:	89 c6                	mov    esi,eax
c000e148:	eb 12                	jmp    c000e15c <timerHandler(unsigned int)+0xb0>
c000e14a:	66 90                	xchg   ax,ax
c000e14c:	52                   	push   edx
c000e14d:	52                   	push   edx
c000e14e:	53                   	push   ebx
c000e14f:	68 d8 96 02 c0       	push   0xc00296d8
c000e154:	e8 07 17 01 00       	call   c001f860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c000e159:	8d 76 00             	lea    esi,[esi+0x0]
c000e15c:	83 c4 10             	add    esp,0x10
c000e15f:	90                   	nop
c000e160:	83 ec 0c             	sub    esp,0xc
c000e163:	68 d8 96 02 c0       	push   0xc00296d8
c000e168:	e8 13 16 01 00       	call   c001f780 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c000e16d:	83 c4 10             	add    esp,0x10
c000e170:	84 c0                	test   al,al
c000e172:	75 18                	jne    c000e18c <timerHandler(unsigned int)+0xe0>
c000e174:	83 ec 0c             	sub    esp,0xc
c000e177:	68 d8 96 02 c0       	push   0xc00296d8
c000e17c:	e8 1b 16 01 00       	call   c001f79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c000e181:	83 c4 10             	add    esp,0x10
c000e184:	39 f0                	cmp    eax,esi
c000e186:	0f 85 74 ff ff ff    	jne    c000e100 <timerHandler(unsigned int)+0x54>
c000e18c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000e191:	83 78 34 00          	cmp    DWORD PTR [eax+0x34],0x0
c000e195:	74 41                	je     c000e1d8 <timerHandler(unsigned int)+0x12c>
c000e197:	80 3d bc 5e 02 c0 00 	cmp    BYTE PTR ds:0xc0025ebc,0x0
c000e19e:	74 38                	je     c000e1d8 <timerHandler(unsigned int)+0x12c>
c000e1a0:	fa                   	cli    
c000e1a1:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c000e1a7:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c000e1ac:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e1b2:	29 42 34             	sub    DWORD PTR [edx+0x34],eax
c000e1b5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c000e1bb:	3b 42 34             	cmp    eax,DWORD PTR [edx+0x34]
c000e1be:	72 08                	jb     c000e1c8 <timerHandler(unsigned int)+0x11c>
c000e1c0:	e8 73 79 00 00       	call   c0015b38 <schedule()>
c000e1c5:	8d 76 00             	lea    esi,[esi+0x0]
c000e1c8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e1cd:	48                   	dec    eax
c000e1ce:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e1d3:	75 03                	jne    c000e1d8 <timerHandler(unsigned int)+0x12c>
c000e1d5:	fb                   	sti    
c000e1d6:	66 90                	xchg   ax,ax
c000e1d8:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c000e1dd:	48                   	dec    eax
c000e1de:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c000e1e3:	75 1b                	jne    c000e200 <timerHandler(unsigned int)+0x154>
c000e1e5:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c000e1ec:	74 12                	je     c000e200 <timerHandler(unsigned int)+0x154>
c000e1ee:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c000e1f8:	e8 3b 79 00 00       	call   c0015b38 <schedule()>
c000e1fd:	8d 76 00             	lea    esi,[esi+0x0]
c000e200:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c000e205:	48                   	dec    eax
c000e206:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c000e20b:	75 03                	jne    c000e210 <timerHandler(unsigned int)+0x164>
c000e20d:	fb                   	sti    
c000e20e:	66 90                	xchg   ax,ax
c000e210:	58                   	pop    eax
c000e211:	5b                   	pop    ebx
c000e212:	5e                   	pop    esi
c000e213:	c3                   	ret    

c000e214 <VCache::VCache(PhysicalDisk*)>:
c000e214:	53                   	push   ebx
c000e215:	83 ec 18             	sub    esp,0x18
c000e218:	ba c0 17 02 c0       	mov    edx,0xc00217c0
c000e21d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e221:	89 10                	mov    DWORD PTR [eax],edx
c000e223:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e227:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c000e22e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e232:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c000e239:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e23d:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c000e244:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c000e24b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e24f:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c000e256:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c000e25d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e261:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c000e268:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e26c:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e270:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e274:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c000e27b:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c000e282:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e286:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e28a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e28e:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c000e292:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e296:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e29a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e29e:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e2a5:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c000e2ad:	83 ec 0c             	sub    esp,0xc
c000e2b0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e2b4:	e8 fd 97 ff ff       	call   c0007ab6 <malloc>
c000e2b9:	83 c4 10             	add    esp,0x10
c000e2bc:	89 c3                	mov    ebx,eax
c000e2be:	83 ec 0c             	sub    esp,0xc
c000e2c1:	53                   	push   ebx
c000e2c2:	e8 0d 76 00 00       	call   c00158d4 <Mutex::Mutex()>
c000e2c7:	83 c4 10             	add    esp,0x10
c000e2ca:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2ce:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c000e2d1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2d5:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000e2d9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c000e2dc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2e0:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c000e2e7:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2eb:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e2f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e2f5:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c000e2f8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e2fc:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c000e302:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e308:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000e30c:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c000e30f:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c000e312:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e316:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c000e31a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e31e:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e324:	05 00 02 00 00       	add    eax,0x200
c000e329:	c1 e0 03             	shl    eax,0x3
c000e32c:	83 ec 0c             	sub    esp,0xc
c000e32f:	50                   	push   eax
c000e330:	e8 81 97 ff ff       	call   c0007ab6 <malloc>
c000e335:	83 c4 10             	add    esp,0x10
c000e338:	89 c2                	mov    edx,eax
c000e33a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e33e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c000e341:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e345:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c000e34c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e350:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c000e354:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000e358:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c000e35e:	89 d0                	mov    eax,edx
c000e360:	c1 e0 02             	shl    eax,0x2
c000e363:	01 d0                	add    eax,edx
c000e365:	c1 e0 04             	shl    eax,0x4
c000e368:	83 ec 0c             	sub    esp,0xc
c000e36b:	50                   	push   eax
c000e36c:	e8 45 97 ff ff       	call   c0007ab6 <malloc>
c000e371:	83 c4 10             	add    esp,0x10
c000e374:	89 c2                	mov    edx,eax
c000e376:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000e37a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c000e37d:	90                   	nop
c000e37e:	83 c4 18             	add    esp,0x18
c000e381:	5b                   	pop    ebx
c000e382:	c3                   	ret    
c000e383:	90                   	nop

c000e384 <VCache::invalidateReadBuffer()>:
c000e384:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e388:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c000e38e:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c000e392:	c3                   	ret    
c000e393:	90                   	nop

c000e394 <VCache::writeWriteBuffer()>:
c000e394:	53                   	push   ebx
c000e395:	83 ec 08             	sub    esp,0x8
c000e398:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e39c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e3a0:	74 1e                	je     c000e3c0 <VCache::writeWriteBuffer()+0x2c>
c000e3a2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e3a5:	83 ec 0c             	sub    esp,0xc
c000e3a8:	8b 10                	mov    edx,DWORD PTR [eax]
c000e3aa:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c000e3ad:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c000e3b0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c000e3b3:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000e3b6:	50                   	push   eax
c000e3b7:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c000e3ba:	83 c4 20             	add    esp,0x20
c000e3bd:	8d 76 00             	lea    esi,[esi+0x0]
c000e3c0:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e3c7:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000e3ce:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c000e3d2:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c000e3d9:	83 c4 08             	add    esp,0x8
c000e3dc:	5b                   	pop    ebx
c000e3dd:	c3                   	ret    
c000e3de:	66 90                	xchg   ax,ax

c000e3e0 <VCache::~VCache()>:
c000e3e0:	83 ec 0c             	sub    esp,0xc
c000e3e3:	ba c0 17 02 c0       	mov    edx,0xc00217c0
c000e3e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3ec:	89 10                	mov    DWORD PTR [eax],edx
c000e3ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e3f2:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c000e3f5:	0f b6 c0             	movzx  eax,al
c000e3f8:	85 c0                	test   eax,eax
c000e3fa:	74 10                	je     c000e40c <VCache::~VCache()+0x2c>
c000e3fc:	83 ec 0c             	sub    esp,0xc
c000e3ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e403:	e8 8c ff ff ff       	call   c000e394 <VCache::writeWriteBuffer()>
c000e408:	83 c4 10             	add    esp,0x10
c000e40b:	90                   	nop
c000e40c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e410:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c000e413:	83 ec 0c             	sub    esp,0xc
c000e416:	50                   	push   eax
c000e417:	e8 aa 96 ff ff       	call   c0007ac6 <free>
c000e41c:	83 c4 10             	add    esp,0x10
c000e41f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e423:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c000e426:	83 ec 0c             	sub    esp,0xc
c000e429:	50                   	push   eax
c000e42a:	e8 97 96 ff ff       	call   c0007ac6 <free>
c000e42f:	83 c4 10             	add    esp,0x10
c000e432:	90                   	nop
c000e433:	83 c4 0c             	add    esp,0xc
c000e436:	c3                   	ret    
c000e437:	90                   	nop

c000e438 <VCache::~VCache()>:
c000e438:	83 ec 0c             	sub    esp,0xc
c000e43b:	83 ec 0c             	sub    esp,0xc
c000e43e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e442:	e8 99 ff ff ff       	call   c000e3e0 <VCache::~VCache()>
c000e447:	83 c4 10             	add    esp,0x10
c000e44a:	83 ec 08             	sub    esp,0x8
c000e44d:	6a 44                	push   0x44
c000e44f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e453:	e8 c0 c3 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e458:	83 c4 10             	add    esp,0x10
c000e45b:	83 c4 0c             	add    esp,0xc
c000e45e:	c3                   	ret    
c000e45f:	90                   	nop

c000e460 <VCache::write(unsigned long long, int, void*)>:
c000e460:	55                   	push   ebp
c000e461:	57                   	push   edi
c000e462:	56                   	push   esi
c000e463:	53                   	push   ebx
c000e464:	83 ec 1c             	sub    esp,0x1c
c000e467:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e46b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e46f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c000e473:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e477:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000e47b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e47f:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c000e483:	74 07                	je     c000e48c <VCache::write(unsigned long long, int, void*)+0x2c>
c000e485:	53                   	push   ebx
c000e486:	e8 f9 fe ff ff       	call   c000e384 <VCache::invalidateReadBuffer()>
c000e48b:	58                   	pop    eax
c000e48c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c000e490:	74 62                	je     c000e4f4 <VCache::write(unsigned long long, int, void*)+0x94>
c000e492:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e495:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000e499:	99                   	cdq    
c000e49a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e49e:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c000e4a1:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c000e4a4:	31 c1                	xor    ecx,eax
c000e4a6:	89 d0                	mov    eax,edx
c000e4a8:	89 ca                	mov    edx,ecx
c000e4aa:	31 e8                	xor    eax,ebp
c000e4ac:	09 c2                	or     edx,eax
c000e4ae:	75 38                	jne    c000e4e8 <VCache::write(unsigned long long, int, void*)+0x88>
c000e4b0:	83 ff 01             	cmp    edi,0x1
c000e4b3:	75 33                	jne    c000e4e8 <VCache::write(unsigned long long, int, void*)+0x88>
c000e4b5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e4b8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e4bc:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e4c2:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e4c5:	0f af c8             	imul   ecx,eax
c000e4c8:	01 cf                	add    edi,ecx
c000e4ca:	89 c1                	mov    ecx,eax
c000e4cc:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e4ce:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c000e4d1:	40                   	inc    eax
c000e4d2:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000e4d5:	83 f8 50             	cmp    eax,0x50
c000e4d8:	75 6a                	jne    c000e544 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e4da:	83 ec 0c             	sub    esp,0xc
c000e4dd:	53                   	push   ebx
c000e4de:	e8 b1 fe ff ff       	call   c000e394 <VCache::writeWriteBuffer()>
c000e4e3:	83 c4 10             	add    esp,0x10
c000e4e6:	eb 5c                	jmp    c000e544 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e4e8:	83 ec 0c             	sub    esp,0xc
c000e4eb:	53                   	push   ebx
c000e4ec:	e8 a3 fe ff ff       	call   c000e394 <VCache::writeWriteBuffer()>
c000e4f1:	83 c4 10             	add    esp,0x10
c000e4f4:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000e4f7:	83 ff 4f             	cmp    edi,0x4f
c000e4fa:	7f 20                	jg     c000e51c <VCache::write(unsigned long long, int, void*)+0xbc>
c000e4fc:	89 7b 24             	mov    DWORD PTR [ebx+0x24],edi
c000e4ff:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000e503:	89 6b 20             	mov    DWORD PTR [ebx+0x20],ebp
c000e506:	89 53 1c             	mov    DWORD PTR [ebx+0x1c],edx
c000e509:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c000e50d:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c000e510:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e516:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e518:	eb 2a                	jmp    c000e544 <VCache::write(unsigned long long, int, void*)+0xe4>
c000e51a:	66 90                	xchg   ax,ax
c000e51c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e51e:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c000e522:	89 7c 24 3c          	mov    DWORD PTR [esp+0x3c],edi
c000e526:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000e52a:	89 6c 24 38          	mov    DWORD PTR [esp+0x38],ebp
c000e52e:	89 74 24 34          	mov    DWORD PTR [esp+0x34],esi
c000e532:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000e536:	8b 42 2c             	mov    eax,DWORD PTR [edx+0x2c]
c000e539:	83 c4 1c             	add    esp,0x1c
c000e53c:	5b                   	pop    ebx
c000e53d:	5e                   	pop    esi
c000e53e:	5f                   	pop    edi
c000e53f:	5d                   	pop    ebp
c000e540:	ff e0                	jmp    eax
c000e542:	66 90                	xchg   ax,ax
c000e544:	83 c4 1c             	add    esp,0x1c
c000e547:	31 c0                	xor    eax,eax
c000e549:	5b                   	pop    ebx
c000e54a:	5e                   	pop    esi
c000e54b:	5f                   	pop    edi
c000e54c:	5d                   	pop    ebp
c000e54d:	c3                   	ret    

c000e54e <VCache::read(unsigned long long, int, void*)>:
c000e54e:	55                   	push   ebp
c000e54f:	57                   	push   edi
c000e550:	56                   	push   esi
c000e551:	53                   	push   ebx
c000e552:	83 ec 1c             	sub    esp,0x1c
c000e555:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c000e559:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e55d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000e561:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000e565:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c000e569:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000e56d:	80 7f 2c 00          	cmp    BYTE PTR [edi+0x2c],0x0
c000e571:	74 0d                	je     c000e580 <VCache::read(unsigned long long, int, void*)+0x32>
c000e573:	83 ec 0c             	sub    esp,0xc
c000e576:	57                   	push   edi
c000e577:	e8 18 fe ff ff       	call   c000e394 <VCache::writeWriteBuffer()>
c000e57c:	83 c4 10             	add    esp,0x10
c000e57f:	90                   	nop
c000e580:	83 fd 01             	cmp    ebp,0x1
c000e583:	0f 85 93 00 00 00    	jne    c000e61c <VCache::read(unsigned long long, int, void*)+0xce>
c000e589:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e58c:	89 04 24             	mov    DWORD PTR [esp],eax
c000e58f:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c000e596:	0f 85 80 00 00 00    	jne    c000e61c <VCache::read(unsigned long long, int, void*)+0xce>
c000e59c:	8b 6f 40             	mov    ebp,DWORD PTR [edi+0x40]
c000e59f:	89 e9                	mov    ecx,ebp
c000e5a1:	f7 d9                	neg    ecx
c000e5a3:	89 c8                	mov    eax,ecx
c000e5a5:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000e5a9:	c1 f8 1f             	sar    eax,0x1f
c000e5ac:	21 d9                	and    ecx,ebx
c000e5ae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e5b2:	89 c8                	mov    eax,ecx
c000e5b4:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e5b8:	21 f1                	and    ecx,esi
c000e5ba:	80 7f 3c 00          	cmp    BYTE PTR [edi+0x3c],0x0
c000e5be:	89 ca                	mov    edx,ecx
c000e5c0:	74 2e                	je     c000e5f0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e5c2:	39 4f 34             	cmp    DWORD PTR [edi+0x34],ecx
c000e5c5:	75 29                	jne    c000e5f0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e5c7:	39 47 30             	cmp    DWORD PTR [edi+0x30],eax
c000e5ca:	75 24                	jne    c000e5f0 <VCache::read(unsigned long long, int, void*)+0xa2>
c000e5cc:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e5cf:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c000e5d5:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c000e5d8:	8d 70 ff             	lea    esi,[eax-0x1]
c000e5db:	21 f3                	and    ebx,esi
c000e5dd:	0f af d9             	imul   ebx,ecx
c000e5e0:	03 5f 38             	add    ebx,DWORD PTR [edi+0x38]
c000e5e3:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c000e5e7:	89 de                	mov    esi,ebx
c000e5e9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e5eb:	31 c0                	xor    eax,eax
c000e5ed:	eb 61                	jmp    c000e650 <VCache::read(unsigned long long, int, void*)+0x102>
c000e5ef:	90                   	nop
c000e5f0:	83 ec 0c             	sub    esp,0xc
c000e5f3:	c6 47 3c 01          	mov    BYTE PTR [edi+0x3c],0x1
c000e5f7:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000e5fb:	89 47 30             	mov    DWORD PTR [edi+0x30],eax
c000e5fe:	89 57 34             	mov    DWORD PTR [edi+0x34],edx
c000e601:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e603:	ff 77 38             	push   DWORD PTR [edi+0x38]
c000e606:	55                   	push   ebp
c000e607:	52                   	push   edx
c000e608:	50                   	push   eax
c000e609:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e60d:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c000e610:	83 c4 20             	add    esp,0x20
c000e613:	85 c0                	test   eax,eax
c000e615:	75 39                	jne    c000e650 <VCache::read(unsigned long long, int, void*)+0x102>
c000e617:	eb b3                	jmp    c000e5cc <VCache::read(unsigned long long, int, void*)+0x7e>
c000e619:	8d 76 00             	lea    esi,[esi+0x0]
c000e61c:	83 ec 0c             	sub    esp,0xc
c000e61f:	57                   	push   edi
c000e620:	e8 5f fd ff ff       	call   c000e384 <VCache::invalidateReadBuffer()>
c000e625:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000e628:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e62c:	8b 10                	mov    edx,DWORD PTR [eax]
c000e62e:	89 6c 24 4c          	mov    DWORD PTR [esp+0x4c],ebp
c000e632:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c000e636:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000e63a:	89 4c 24 50          	mov    DWORD PTR [esp+0x50],ecx
c000e63e:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000e642:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c000e645:	83 c4 2c             	add    esp,0x2c
c000e648:	5b                   	pop    ebx
c000e649:	5e                   	pop    esi
c000e64a:	5f                   	pop    edi
c000e64b:	5d                   	pop    ebp
c000e64c:	ff e0                	jmp    eax
c000e64e:	66 90                	xchg   ax,ax
c000e650:	83 c4 1c             	add    esp,0x1c
c000e653:	5b                   	pop    ebx
c000e654:	5e                   	pop    esi
c000e655:	5f                   	pop    edi
c000e656:	5d                   	pop    ebp
c000e657:	c3                   	ret    

c000e658 <Video::putrect(int, int, int, int, unsigned int)>:
c000e658:	55                   	push   ebp
c000e659:	57                   	push   edi
c000e65a:	56                   	push   esi
c000e65b:	53                   	push   ebx
c000e65c:	83 ec 1c             	sub    esp,0x1c
c000e65f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000e663:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000e667:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c000e66b:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c000e66f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e673:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e677:	01 df                	add    edi,ebx
c000e679:	39 fb                	cmp    ebx,edi
c000e67b:	7d 1f                	jge    c000e69c <Video::putrect(int, int, int, int, unsigned int)+0x44>
c000e67d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e681:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c000e685:	7d 12                	jge    c000e699 <Video::putrect(int, int, int, int, unsigned int)+0x41>
c000e687:	8b 16                	mov    edx,DWORD PTR [esi]
c000e689:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000e68d:	53                   	push   ebx
c000e68e:	55                   	push   ebp
c000e68f:	45                   	inc    ebp
c000e690:	56                   	push   esi
c000e691:	ff 52 24             	call   DWORD PTR [edx+0x24]
c000e694:	83 c4 10             	add    esp,0x10
c000e697:	eb e8                	jmp    c000e681 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c000e699:	43                   	inc    ebx
c000e69a:	eb dd                	jmp    c000e679 <Video::putrect(int, int, int, int, unsigned int)+0x21>
c000e69c:	83 c4 1c             	add    esp,0x1c
c000e69f:	5b                   	pop    ebx
c000e6a0:	5e                   	pop    esi
c000e6a1:	5f                   	pop    edi
c000e6a2:	5d                   	pop    ebp
c000e6a3:	c3                   	ret    

c000e6a4 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c000e6a4:	55                   	push   ebp
c000e6a5:	57                   	push   edi
c000e6a6:	31 ff                	xor    edi,edi
c000e6a8:	56                   	push   esi
c000e6a9:	53                   	push   ebx
c000e6aa:	83 ec 1c             	sub    esp,0x1c
c000e6ad:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c000e6b1:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c000e6b5:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c000e6bc:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c000e6c1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e6c5:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c000e6c9:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e6cd:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c000e6d0:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e6d4:	01 f9                	add    ecx,edi
c000e6d6:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c000e6da:	7d 2f                	jge    c000e70b <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c000e6dc:	31 f6                	xor    esi,esi
c000e6de:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c000e6e2:	01 f2                	add    edx,esi
c000e6e4:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c000e6e8:	7d 1a                	jge    c000e704 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c000e6ea:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000e6ed:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c000e6f0:	46                   	inc    esi
c000e6f1:	51                   	push   ecx
c000e6f2:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c000e6f6:	52                   	push   edx
c000e6f7:	55                   	push   ebp
c000e6f8:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e6fb:	83 c4 10             	add    esp,0x10
c000e6fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000e702:	eb da                	jmp    c000e6de <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c000e704:	47                   	inc    edi
c000e705:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c000e709:	eb c5                	jmp    c000e6d0 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c000e70b:	83 c4 1c             	add    esp,0x1c
c000e70e:	5b                   	pop    ebx
c000e70f:	5e                   	pop    esi
c000e710:	5f                   	pop    edi
c000e711:	5d                   	pop    ebp
c000e712:	c3                   	ret    
c000e713:	90                   	nop

c000e714 <Video::blit(unsigned int*, int, int, int, int)>:
c000e714:	55                   	push   ebp
c000e715:	57                   	push   edi
c000e716:	56                   	push   esi
c000e717:	53                   	push   ebx
c000e718:	83 ec 1c             	sub    esp,0x1c
c000e71b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000e71f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c000e723:	85 c0                	test   eax,eax
c000e725:	79 02                	jns    c000e729 <Video::blit(unsigned int*, int, int, int, int)+0x15>
c000e727:	31 c0                	xor    eax,eax
c000e729:	c1 e0 02             	shl    eax,0x2
c000e72c:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c000e730:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e734:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000e738:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c000e73c:	39 d8                	cmp    eax,ebx
c000e73e:	7e 49                	jle    c000e789 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e740:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e746:	7c 41                	jl     c000e789 <Video::blit(unsigned int*, int, int, int, int)+0x75>
c000e748:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c000e74c:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000e750:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000e754:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c000e758:	39 f9                	cmp    ecx,edi
c000e75a:	7e 22                	jle    c000e77e <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c000e75c:	83 c5 04             	add    ebp,0x4
c000e75f:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e765:	7c 14                	jl     c000e77b <Video::blit(unsigned int*, int, int, int, int)+0x67>
c000e767:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e769:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c000e76c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e770:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c000e774:	56                   	push   esi
c000e775:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c000e778:	83 c4 10             	add    esp,0x10
c000e77b:	47                   	inc    edi
c000e77c:	eb d2                	jmp    c000e750 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c000e77e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e782:	43                   	inc    ebx
c000e783:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000e787:	eb ab                	jmp    c000e734 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c000e789:	83 c4 1c             	add    esp,0x1c
c000e78c:	5b                   	pop    ebx
c000e78d:	5e                   	pop    esi
c000e78e:	5f                   	pop    edi
c000e78f:	5d                   	pop    ebp
c000e790:	c3                   	ret    
c000e791:	90                   	nop

c000e792 <Video::clearScreen(unsigned int)>:
c000e792:	57                   	push   edi
c000e793:	56                   	push   esi
c000e794:	53                   	push   ebx
c000e795:	31 db                	xor    ebx,ebx
c000e797:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e79b:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c000e7a1:	7e 1f                	jle    c000e7c2 <Video::clearScreen(unsigned int)+0x30>
c000e7a3:	31 ff                	xor    edi,edi
c000e7a5:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c000e7ab:	7e 12                	jle    c000e7bf <Video::clearScreen(unsigned int)+0x2d>
c000e7ad:	8b 06                	mov    eax,DWORD PTR [esi]
c000e7af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e7b3:	53                   	push   ebx
c000e7b4:	57                   	push   edi
c000e7b5:	47                   	inc    edi
c000e7b6:	56                   	push   esi
c000e7b7:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e7ba:	83 c4 10             	add    esp,0x10
c000e7bd:	eb e6                	jmp    c000e7a5 <Video::clearScreen(unsigned int)+0x13>
c000e7bf:	43                   	inc    ebx
c000e7c0:	eb d9                	jmp    c000e79b <Video::clearScreen(unsigned int)+0x9>
c000e7c2:	5b                   	pop    ebx
c000e7c3:	5e                   	pop    esi
c000e7c4:	5f                   	pop    edi
c000e7c5:	c3                   	ret    

c000e7c6 <Video::putpixel(int, int, unsigned int)>:
c000e7c6:	c7 44 24 04 c8 17 02 c0 	mov    DWORD PTR [esp+0x4],0xc00217c8
c000e7ce:	e9 a6 2a 00 00       	jmp    c0011279 <KePanic(char const*)>
c000e7d3:	90                   	nop

c000e7d4 <Video::readPixelApprox(int, int)>:
c000e7d4:	83 ec 18             	sub    esp,0x18
c000e7d7:	68 e9 17 02 c0       	push   0xc00217e9
c000e7dc:	e8 98 2a 00 00       	call   c0011279 <KePanic(char const*)>
c000e7e1:	31 c0                	xor    eax,eax
c000e7e3:	83 c4 1c             	add    esp,0x1c
c000e7e6:	c3                   	ret    
c000e7e7:	90                   	nop

c000e7e8 <Video::Video(char const*)>:
c000e7e8:	83 ec 0c             	sub    esp,0xc
c000e7eb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7ef:	83 ec 08             	sub    esp,0x8
c000e7f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e7f6:	50                   	push   eax
c000e7f7:	e8 e6 df ff ff       	call   c000c7e2 <Device::Device(char const*)>
c000e7fc:	83 c4 10             	add    esp,0x10
c000e7ff:	ba 64 18 02 c0       	mov    edx,0xc0021864
c000e804:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e808:	89 10                	mov    DWORD PTR [eax],edx
c000e80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80e:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c000e818:	90                   	nop
c000e819:	83 c4 0c             	add    esp,0xc
c000e81c:	c3                   	ret    
c000e81d:	90                   	nop

c000e81e <Video::~Video()>:
c000e81e:	83 ec 0c             	sub    esp,0xc
c000e821:	ba 64 18 02 c0       	mov    edx,0xc0021864
c000e826:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e82a:	89 10                	mov    DWORD PTR [eax],edx
c000e82c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e830:	83 ec 0c             	sub    esp,0xc
c000e833:	50                   	push   eax
c000e834:	e8 13 dd ff ff       	call   c000c54c <Device::~Device()>
c000e839:	83 c4 10             	add    esp,0x10
c000e83c:	90                   	nop
c000e83d:	83 c4 0c             	add    esp,0xc
c000e840:	c3                   	ret    
c000e841:	90                   	nop

c000e842 <Video::~Video()>:
c000e842:	83 ec 0c             	sub    esp,0xc
c000e845:	83 ec 0c             	sub    esp,0xc
c000e848:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e84c:	e8 cd ff ff ff       	call   c000e81e <Video::~Video()>
c000e851:	83 c4 10             	add    esp,0x10
c000e854:	83 ec 08             	sub    esp,0x8
c000e857:	68 64 01 00 00       	push   0x164
c000e85c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e860:	e8 b3 bf ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c000e865:	83 c4 10             	add    esp,0x10
c000e868:	83 c4 0c             	add    esp,0xc
c000e86b:	c3                   	ret    

c000e86c <Video::isMonochrome()>:
c000e86c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e870:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c000e876:	c3                   	ret    
c000e877:	90                   	nop

c000e878 <Video::getWidth()>:
c000e878:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e87c:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c000e882:	c3                   	ret    
c000e883:	90                   	nop

c000e884 <Video::getHeight()>:
c000e884:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000e888:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c000e88e:	c3                   	ret    
c000e88f:	90                   	nop

c000e890 <Video::drawCursor(int, int, unsigned int*, int)>:
c000e890:	55                   	push   ebp
c000e891:	57                   	push   edi
c000e892:	56                   	push   esi
c000e893:	53                   	push   ebx
c000e894:	83 ec 2c             	sub    esp,0x2c
c000e897:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000e89b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c000e89f:	83 f8 01             	cmp    eax,0x1
c000e8a2:	19 c9                	sbb    ecx,ecx
c000e8a4:	31 db                	xor    ebx,ebx
c000e8a6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000e8aa:	89 cd                	mov    ebp,ecx
c000e8ac:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c000e8b4:	f7 d5                	not    ebp
c000e8b6:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c000e8bc:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000e8c0:	01 d8                	add    eax,ebx
c000e8c2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e8c6:	56                   	push   esi
c000e8c7:	e8 b8 ff ff ff       	call   c000e884 <Video::getHeight()>
c000e8cc:	59                   	pop    ecx
c000e8cd:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c000e8d1:	7e 70                	jle    c000e943 <Video::drawCursor(int, int, unsigned int*, int)+0xb3>
c000e8d3:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e8d7:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c000e8db:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c000e8de:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000e8e2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000e8e6:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c000e8ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e8f1:	89 f8                	mov    eax,edi
c000e8f3:	83 c0 20             	add    eax,0x20
c000e8f6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e8fa:	56                   	push   esi
c000e8fb:	e8 78 ff ff ff       	call   c000e878 <Video::getWidth()>
c000e900:	5a                   	pop    edx
c000e901:	39 c7                	cmp    edi,eax
c000e903:	7d 34                	jge    c000e939 <Video::drawCursor(int, int, unsigned int*, int)+0xa9>
c000e905:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c000e90a:	74 05                	je     c000e911 <Video::drawCursor(int, int, unsigned int*, int)+0x81>
c000e90c:	8b 06                	mov    eax,DWORD PTR [esi]
c000e90e:	55                   	push   ebp
c000e90f:	eb 0d                	jmp    c000e91e <Video::drawCursor(int, int, unsigned int*, int)+0x8e>
c000e911:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c000e916:	74 12                	je     c000e92a <Video::drawCursor(int, int, unsigned int*, int)+0x9a>
c000e918:	8b 06                	mov    eax,DWORD PTR [esi]
c000e91a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000e91e:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000e922:	57                   	push   edi
c000e923:	56                   	push   esi
c000e924:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000e927:	83 c4 10             	add    esp,0x10
c000e92a:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c000e92e:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c000e932:	47                   	inc    edi
c000e933:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c000e937:	75 c1                	jne    c000e8fa <Video::drawCursor(int, int, unsigned int*, int)+0x6a>
c000e939:	43                   	inc    ebx
c000e93a:	83 fb 20             	cmp    ebx,0x20
c000e93d:	0f 85 79 ff ff ff    	jne    c000e8bc <Video::drawCursor(int, int, unsigned int*, int)+0x2c>
c000e943:	83 c4 2c             	add    esp,0x2c
c000e946:	5b                   	pop    ebx
c000e947:	5e                   	pop    esi
c000e948:	5f                   	pop    edi
c000e949:	5d                   	pop    ebp
c000e94a:	c3                   	ret    
c000e94b:	90                   	nop

c000e94c <Video::tgaParse(unsigned char*, int, int*, int*)>:
c000e94c:	55                   	push   ebp
c000e94d:	57                   	push   edi
c000e94e:	56                   	push   esi
c000e94f:	53                   	push   ebx
c000e950:	83 ec 28             	sub    esp,0x28
c000e953:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000e957:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c000e95b:	0f b6 73 0d          	movzx  esi,BYTE PTR [ebx+0xd]
c000e95f:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c000e963:	c1 e6 08             	shl    esi,0x8
c000e966:	01 c6                	add    esi,eax
c000e968:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c000e96c:	c1 e0 08             	shl    eax,0x8
c000e96f:	01 d0                	add    eax,edx
c000e971:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000e975:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e979:	0f af c6             	imul   eax,esi
c000e97c:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c000e983:	50                   	push   eax
c000e984:	e8 2d 91 ff ff       	call   c0007ab6 <malloc>
c000e989:	83 c4 10             	add    esp,0x10
c000e98c:	89 c7                	mov    edi,eax
c000e98e:	85 c0                	test   eax,eax
c000e990:	75 10                	jne    c000e9a2 <Video::tgaParse(unsigned char*, int, int*, int*)+0x56>
c000e992:	83 ec 0c             	sub    esp,0xc
c000e995:	68 14 18 02 c0       	push   0xc0021814
c000e99a:	e8 da 28 00 00       	call   c0011279 <KePanic(char const*)>
c000e99f:	83 c4 10             	add    esp,0x10
c000e9a2:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c000e9a6:	ba 12 00 00 00       	mov    edx,0x12
c000e9ab:	85 c0                	test   eax,eax
c000e9ad:	74 11                	je     c000e9c0 <Video::tgaParse(unsigned char*, int, int*, int*)+0x74>
c000e9af:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c000e9b3:	0f b7 4b 05          	movzx  ecx,WORD PTR [ebx+0x5]
c000e9b7:	c1 fa 03             	sar    edx,0x3
c000e9ba:	0f af d1             	imul   edx,ecx
c000e9bd:	83 c2 12             	add    edx,0x12
c000e9c0:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c000e9c4:	74 04                	je     c000e9ca <Video::tgaParse(unsigned char*, int, int*, int*)+0x7e>
c000e9c6:	85 f6                	test   esi,esi
c000e9c8:	75 12                	jne    c000e9dc <Video::tgaParse(unsigned char*, int, int*, int*)+0x90>
c000e9ca:	83 ec 0c             	sub    esp,0xc
c000e9cd:	68 24 18 02 c0       	push   0xc0021824
c000e9d2:	e8 6e bf ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000e9d7:	e9 b8 00 00 00       	jmp    c000ea94 <Video::tgaParse(unsigned char*, int, int*, int*)+0x148>
c000e9dc:	0f b6 4b 02          	movzx  ecx,BYTE PTR [ebx+0x2]
c000e9e0:	83 f9 02             	cmp    ecx,0x2
c000e9e3:	0f 85 96 00 00 00    	jne    c000ea7f <Video::tgaParse(unsigned char*, int, int*, int*)+0x133>
c000e9e9:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c000e9ee:	75 0e                	jne    c000e9fe <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e9f0:	85 c0                	test   eax,eax
c000e9f2:	75 0a                	jne    c000e9fe <Video::tgaParse(unsigned char*, int, int*, int*)+0xb2>
c000e9f4:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c000e9f7:	83 e8 18             	sub    eax,0x18
c000e9fa:	a8 f7                	test   al,0xf7
c000e9fc:	74 0a                	je     c000ea08 <Video::tgaParse(unsigned char*, int, int*, int*)+0xbc>
c000e9fe:	83 ec 0c             	sub    esp,0xc
c000ea01:	68 39 18 02 c0       	push   0xc0021839
c000ea06:	eb 7f                	jmp    c000ea87 <Video::tgaParse(unsigned char*, int, int*, int*)+0x13b>
c000ea08:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000ea10:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c000ea18:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c000ea1c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000ea24:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c000ea28:	75 0c                	jne    c000ea36 <Video::tgaParse(unsigned char*, int, int*, int*)+0xea>
c000ea2a:	0f b6 44 13 03       	movzx  eax,BYTE PTR [ebx+edx*1+0x3]
c000ea2f:	c1 e0 18             	shl    eax,0x18
c000ea32:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ea36:	45                   	inc    ebp
c000ea37:	0f b6 4c 13 02       	movzx  ecx,BYTE PTR [ebx+edx*1+0x2]
c000ea3c:	c1 e1 10             	shl    ecx,0x10
c000ea3f:	89 c8                	mov    eax,ecx
c000ea41:	0f b6 4c 13 01       	movzx  ecx,BYTE PTR [ebx+edx*1+0x1]
c000ea46:	c1 e1 08             	shl    ecx,0x8
c000ea49:	09 c1                	or     ecx,eax
c000ea4b:	0f b6 04 13          	movzx  eax,BYTE PTR [ebx+edx*1]
c000ea4f:	09 c1                	or     ecx,eax
c000ea51:	0b 4c 24 08          	or     ecx,DWORD PTR [esp+0x8]
c000ea55:	89 4c af fc          	mov    DWORD PTR [edi+ebp*4-0x4],ecx
c000ea59:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c000ea5d:	c1 f8 03             	sar    eax,0x3
c000ea60:	01 c2                	add    edx,eax
c000ea62:	89 e8                	mov    eax,ebp
c000ea64:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c000ea68:	39 c6                	cmp    esi,eax
c000ea6a:	7f b0                	jg     c000ea1c <Video::tgaParse(unsigned char*, int, int*, int*)+0xd0>
c000ea6c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000ea70:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000ea74:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c000ea77:	7e 22                	jle    c000ea9b <Video::tgaParse(unsigned char*, int, int*, int*)+0x14f>
c000ea79:	89 6c 24 04          	mov    DWORD PTR [esp+0x4],ebp
c000ea7d:	eb 99                	jmp    c000ea18 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcc>
c000ea7f:	50                   	push   eax
c000ea80:	50                   	push   eax
c000ea81:	51                   	push   ecx
c000ea82:	68 47 18 02 c0       	push   0xc0021847
c000ea87:	e8 b9 be ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c000ea8c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000ea8f:	e8 32 90 ff ff       	call   c0007ac6 <free>
c000ea94:	83 c4 10             	add    esp,0x10
c000ea97:	31 ff                	xor    edi,edi
c000ea99:	eb 0f                	jmp    c000eaaa <Video::tgaParse(unsigned char*, int, int*, int*)+0x15e>
c000ea9b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ea9f:	89 30                	mov    DWORD PTR [eax],esi
c000eaa1:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000eaa5:	8b 34 24             	mov    esi,DWORD PTR [esp]
c000eaa8:	89 30                	mov    DWORD PTR [eax],esi
c000eaaa:	83 c4 1c             	add    esp,0x1c
c000eaad:	89 f8                	mov    eax,edi
c000eaaf:	5b                   	pop    ebx
c000eab0:	5e                   	pop    esi
c000eab1:	5f                   	pop    edi
c000eab2:	5d                   	pop    ebp
c000eab3:	c3                   	ret    

c000eab4 <Video::putTGA(int, int, unsigned char*, int)>:
c000eab4:	55                   	push   ebp
c000eab5:	57                   	push   edi
c000eab6:	56                   	push   esi
c000eab7:	53                   	push   ebx
c000eab8:	83 ec 28             	sub    esp,0x28
c000eabb:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c000eabf:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eac3:	50                   	push   eax
c000eac4:	8d 44 24 18          	lea    eax,[esp+0x18]
c000eac8:	50                   	push   eax
c000eac9:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000eacd:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000ead1:	56                   	push   esi
c000ead2:	e8 75 fe ff ff       	call   c000e94c <Video::tgaParse(unsigned char*, int, int*, int*)>
c000ead7:	83 c4 20             	add    esp,0x20
c000eada:	85 c0                	test   eax,eax
c000eadc:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c000eae0:	74 35                	je     c000eb17 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eae2:	89 c7                	mov    edi,eax
c000eae4:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000eae8:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c000eaec:	39 d8                	cmp    eax,ebx
c000eaee:	7e 27                	jle    c000eb17 <Video::putTGA(int, int, unsigned char*, int)+0x63>
c000eaf0:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c000eaf4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000eaf8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000eafc:	39 e8                	cmp    eax,ebp
c000eafe:	7e 14                	jle    c000eb14 <Video::putTGA(int, int, unsigned char*, int)+0x60>
c000eb00:	8b 06                	mov    eax,DWORD PTR [esi]
c000eb02:	83 c7 04             	add    edi,0x4
c000eb05:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c000eb08:	53                   	push   ebx
c000eb09:	55                   	push   ebp
c000eb0a:	45                   	inc    ebp
c000eb0b:	56                   	push   esi
c000eb0c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c000eb0f:	83 c4 10             	add    esp,0x10
c000eb12:	eb e0                	jmp    c000eaf4 <Video::putTGA(int, int, unsigned char*, int)+0x40>
c000eb14:	43                   	inc    ebx
c000eb15:	eb cd                	jmp    c000eae4 <Video::putTGA(int, int, unsigned char*, int)+0x30>
c000eb17:	83 c4 1c             	add    esp,0x1c
c000eb1a:	5b                   	pop    ebx
c000eb1b:	5e                   	pop    esi
c000eb1c:	5f                   	pop    edi
c000eb1d:	5d                   	pop    ebp
c000eb1e:	c3                   	ret    
c000eb1f:	90                   	nop

c000eb20 <ACPI::close(int, int, void*)>:
c000eb20:	83 ec 1c             	sub    esp,0x1c
c000eb23:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c000eb2b:	74 0b                	je     c000eb38 <ACPI::close(int, int, void*)+0x18>
c000eb2d:	b8 00 00 00 00       	mov    eax,0x0
c000eb32:	e9 99 00 00 00       	jmp    c000ebd0 <ACPI::close(int, int, void*)+0xb0>
c000eb37:	90                   	nop
c000eb38:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000eb3d:	75 29                	jne    c000eb68 <ACPI::close(int, int, void*)+0x48>
c000eb3f:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000eb44:	85 c0                	test   eax,eax
c000eb46:	74 08                	je     c000eb50 <ACPI::close(int, int, void*)+0x30>
c000eb48:	a1 08 89 02 c0       	mov    eax,ds:0xc0028908
c000eb4d:	ff d0                	call   eax
c000eb4f:	90                   	nop
c000eb50:	83 ec 0c             	sub    esp,0xc
c000eb53:	68 a8 18 02 c0       	push   0xc00218a8
c000eb58:	e8 1c 27 00 00       	call   c0011279 <KePanic(char const*)>
c000eb5d:	83 c4 10             	add    esp,0x10
c000eb60:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000eb65:	eb 69                	jmp    c000ebd0 <ACPI::close(int, int, void*)+0xb0>
c000eb67:	90                   	nop
c000eb68:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c000eb6d:	75 59                	jne    c000ebc8 <ACPI::close(int, int, void*)+0xa8>
c000eb6f:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000eb74:	85 c0                	test   eax,eax
c000eb76:	74 08                	je     c000eb80 <ACPI::close(int, int, void*)+0x60>
c000eb78:	a1 04 89 02 c0       	mov    eax,ds:0xc0028904
c000eb7d:	ff d0                	call   eax
c000eb7f:	90                   	nop
c000eb80:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c000eb85:	8d 76 00             	lea    esi,[esi+0x0]
c000eb88:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c000eb8d:	83 e0 02             	and    eax,0x2
c000eb90:	74 1e                	je     c000ebb0 <ACPI::close(int, int, void*)+0x90>
c000eb92:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c000eb99:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000eb9d:	89 c2                	mov    edx,eax
c000eb9f:	ec                   	in     al,dx
c000eba0:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000eba4:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c000eba8:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000ebac:	eb da                	jmp    c000eb88 <ACPI::close(int, int, void*)+0x68>
c000ebae:	66 90                	xchg   ax,ax
c000ebb0:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c000ebb7:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c000ebbc:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c000ebc0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000ebc4:	ee                   	out    dx,al
c000ebc5:	8d 76 00             	lea    esi,[esi+0x0]
c000ebc8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000ebcd:	8d 76 00             	lea    esi,[esi+0x0]
c000ebd0:	83 c4 1c             	add    esp,0x1c
c000ebd3:	c3                   	ret    

c000ebd4 <findRSDP()>:
c000ebd4:	83 ec 1c             	sub    esp,0x1c
c000ebd7:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ebdc:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ebe2:	83 e0 04             	and    eax,0x4
c000ebe5:	0f b6 c0             	movzx  eax,al
c000ebe8:	85 c0                	test   eax,eax
c000ebea:	75 08                	jne    c000ebf4 <findRSDP()+0x20>
c000ebec:	b8 00 00 00 00       	mov    eax,0x0
c000ebf1:	eb 75                	jmp    c000ec68 <findRSDP()+0x94>
c000ebf3:	90                   	nop
c000ebf4:	a1 e8 5e 02 c0       	mov    eax,ds:0xc0025ee8
c000ebf9:	3d ff 07 00 00       	cmp    eax,0x7ff
c000ebfe:	7f 1c                	jg     c000ec1c <findRSDP()+0x48>
c000ec00:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ec05:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000ec0b:	83 e2 fb             	and    edx,0xfffffffb
c000ec0e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000ec14:	b8 00 00 00 00       	mov    eax,0x0
c000ec19:	eb 4d                	jmp    c000ec68 <findRSDP()+0x94>
c000ec1b:	90                   	nop
c000ec1c:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c000ec24:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c000ec2c:	77 32                	ja     c000ec60 <findRSDP()+0x8c>
c000ec2e:	83 ec 04             	sub    esp,0x4
c000ec31:	6a 08                	push   0x8
c000ec33:	68 43 19 02 c0       	push   0xc0021943
c000ec38:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000ec3c:	e8 3f 17 ff ff       	call   c0000380 <memcmp>
c000ec41:	83 c4 10             	add    esp,0x10
c000ec44:	85 c0                	test   eax,eax
c000ec46:	0f 94 c0             	sete   al
c000ec49:	0f b6 c0             	movzx  eax,al
c000ec4c:	85 c0                	test   eax,eax
c000ec4e:	74 08                	je     c000ec58 <findRSDP()+0x84>
c000ec50:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000ec54:	eb 12                	jmp    c000ec68 <findRSDP()+0x94>
c000ec56:	66 90                	xchg   ax,ax
c000ec58:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c000ec5d:	eb c5                	jmp    c000ec24 <findRSDP()+0x50>
c000ec5f:	90                   	nop
c000ec60:	b8 00 00 00 00       	mov    eax,0x0
c000ec65:	8d 76 00             	lea    esi,[esi+0x0]
c000ec68:	83 c4 1c             	add    esp,0x1c
c000ec6b:	c3                   	ret    

c000ec6c <loadACPITables(unsigned char*)>:
c000ec6c:	57                   	push   edi
c000ec6d:	56                   	push   esi
c000ec6e:	53                   	push   ebx
c000ec6f:	83 ec 60             	sub    esp,0x60
c000ec72:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000ec77:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000ec7d:	83 e0 04             	and    eax,0x4
c000ec80:	0f b6 c0             	movzx  eax,al
c000ec83:	85 c0                	test   eax,eax
c000ec85:	0f 84 41 02 00 00    	je     c000eecc <loadACPITables(unsigned char*)+0x260>
c000ec8b:	a0 20 8b 02 c0       	mov    al,ds:0xc0028b20
c000ec90:	0f b6 c0             	movzx  eax,al
c000ec93:	85 c0                	test   eax,eax
c000ec95:	74 79                	je     c000ed10 <loadACPITables(unsigned char*)+0xa4>
c000ec97:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ec9b:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ec9f:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000eca3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000eca6:	83 e8 24             	sub    eax,0x24
c000eca9:	c1 e8 03             	shr    eax,0x3
c000ecac:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000ecb0:	c7 44 24 5c 00 00 00 00 	mov    DWORD PTR [esp+0x5c],0x0
c000ecb8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ecbc:	3b 44 24 4c          	cmp    eax,DWORD PTR [esp+0x4c]
c000ecc0:	0f 8d ba 00 00 00    	jge    c000ed80 <loadACPITables(unsigned char*)+0x114>
c000ecc6:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ecca:	83 c0 24             	add    eax,0x24
c000eccd:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000ecd1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000ecd5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ecd9:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000ecdd:	c1 e0 03             	shl    eax,0x3
c000ece0:	01 44 24 44          	add    DWORD PTR [esp+0x44],eax
c000ece4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ece8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000eceb:	8b 00                	mov    eax,DWORD PTR [eax]
c000eced:	89 c1                	mov    ecx,eax
c000ecef:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ecf4:	8d 50 01             	lea    edx,[eax+0x1]
c000ecf7:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ecfd:	89 ca                	mov    edx,ecx
c000ecff:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ed06:	83 44 24 5c 01       	add    DWORD PTR [esp+0x5c],0x1
c000ed0b:	eb ab                	jmp    c000ecb8 <loadACPITables(unsigned char*)+0x4c>
c000ed0d:	8d 76 00             	lea    esi,[esi+0x0]
c000ed10:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed14:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ed18:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000ed1c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ed1f:	83 e8 24             	sub    eax,0x24
c000ed22:	c1 e8 02             	shr    eax,0x2
c000ed25:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ed29:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c000ed31:	8d 76 00             	lea    esi,[esi+0x0]
c000ed34:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ed38:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c000ed3c:	7d 42                	jge    c000ed80 <loadACPITables(unsigned char*)+0x114>
c000ed3e:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000ed42:	83 c0 24             	add    eax,0x24
c000ed45:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ed49:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ed4d:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000ed51:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000ed55:	c1 e0 02             	shl    eax,0x2
c000ed58:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c000ed5c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000ed60:	8b 08                	mov    ecx,DWORD PTR [eax]
c000ed62:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ed67:	8d 50 01             	lea    edx,[eax+0x1]
c000ed6a:	89 15 0c 89 02 c0    	mov    DWORD PTR ds:0xc002890c,edx
c000ed70:	89 ca                	mov    edx,ecx
c000ed72:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000ed79:	83 44 24 58 01       	add    DWORD PTR [esp+0x58],0x1
c000ed7e:	eb b4                	jmp    c000ed34 <loadACPITables(unsigned char*)+0xc8>
c000ed80:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000ed88:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000ed8d:	39 44 24 54          	cmp    DWORD PTR [esp+0x54],eax
c000ed91:	0f 8d 39 01 00 00    	jge    c000eed0 <loadACPITables(unsigned char*)+0x264>
c000ed97:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000ed9b:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000eda2:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eda6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edaa:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000edae:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000edb2:	25 ff 0f 00 00       	and    eax,0xfff
c000edb7:	89 c6                	mov    esi,eax
c000edb9:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000edbf:	83 ec 0c             	sub    esp,0xc
c000edc2:	6a 01                	push   0x1
c000edc4:	e8 44 a8 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000edc9:	83 c4 10             	add    esp,0x10
c000edcc:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000edd0:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000edd6:	83 ec 0c             	sub    esp,0xc
c000edd9:	6a 01                	push   0x1
c000eddb:	6a 01                	push   0x1
c000eddd:	50                   	push   eax
c000edde:	52                   	push   edx
c000eddf:	53                   	push   ebx
c000ede0:	e8 35 b1 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ede5:	83 c4 20             	add    esp,0x20
c000ede8:	09 f0                	or     eax,esi
c000edea:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000edee:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000edf2:	c1 e0 03             	shl    eax,0x3
c000edf5:	05 20 89 02 c0       	add    eax,0xc0028920
c000edfa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000edfe:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee02:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ee06:	c7 44 24 14 04 00 00 00 	mov    DWORD PTR [esp+0x14],0x4
c000ee0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000ee12:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ee16:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ee1a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ee1e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee22:	89 c6                	mov    esi,eax
c000ee24:	89 d7                	mov    edi,edx
c000ee26:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ee28:	89 c8                	mov    eax,ecx
c000ee2a:	89 fa                	mov    edx,edi
c000ee2c:	89 f3                	mov    ebx,esi
c000ee2e:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000ee32:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c000ee36:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ee3a:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee3e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000ee41:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ee45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000ee49:	05 00 10 00 00       	add    eax,0x1000
c000ee4e:	c1 e8 0c             	shr    eax,0xc
c000ee51:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ee55:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee59:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ee5d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ee61:	25 ff 0f 00 00       	and    eax,0xfff
c000ee66:	89 c6                	mov    esi,eax
c000ee68:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ee6e:	83 ec 0c             	sub    esp,0xc
c000ee71:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000ee75:	e8 93 a7 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ee7a:	83 c4 10             	add    esp,0x10
c000ee7d:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000ee81:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ee87:	83 ec 0c             	sub    esp,0xc
c000ee8a:	6a 01                	push   0x1
c000ee8c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ee90:	50                   	push   eax
c000ee91:	52                   	push   edx
c000ee92:	53                   	push   ebx
c000ee93:	e8 82 b0 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ee98:	83 c4 20             	add    esp,0x20
c000ee9b:	09 f0                	or     eax,esi
c000ee9d:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000eea1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000eea5:	83 ec 0c             	sub    esp,0xc
c000eea8:	50                   	push   eax
c000eea9:	e8 7d aa ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c000eeae:	83 c4 10             	add    esp,0x10
c000eeb1:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c000eeb5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000eeb9:	89 14 c5 24 89 02 c0 	mov    DWORD PTR [eax*8-0x3ffd76dc],edx
c000eec0:	83 44 24 54 01       	add    DWORD PTR [esp+0x54],0x1
c000eec5:	e9 be fe ff ff       	jmp    c000ed88 <loadACPITables(unsigned char*)+0x11c>
c000eeca:	66 90                	xchg   ax,ax
c000eecc:	90                   	nop
c000eecd:	8d 76 00             	lea    esi,[esi+0x0]
c000eed0:	83 c4 60             	add    esp,0x60
c000eed3:	5b                   	pop    ebx
c000eed4:	5e                   	pop    esi
c000eed5:	5f                   	pop    edi
c000eed6:	c3                   	ret    
c000eed7:	90                   	nop

c000eed8 <findRSDT(unsigned char*)>:
c000eed8:	57                   	push   edi
c000eed9:	56                   	push   esi
c000eeda:	53                   	push   ebx
c000eedb:	83 ec 50             	sub    esp,0x50
c000eede:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000eee3:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000eee9:	83 e0 04             	and    eax,0x4
c000eeec:	0f b6 c0             	movzx  eax,al
c000eeef:	85 c0                	test   eax,eax
c000eef1:	75 0d                	jne    c000ef00 <findRSDT(unsigned char*)+0x28>
c000eef3:	b8 00 00 00 00       	mov    eax,0x0
c000eef8:	e9 2b 01 00 00       	jmp    c000f028 <findRSDT(unsigned char*)+0x150>
c000eefd:	8d 76 00             	lea    esi,[esi+0x0]
c000ef00:	89 e0                	mov    eax,esp
c000ef02:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000ef06:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000ef0a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ef0e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c000ef16:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000ef1a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ef1e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ef22:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c000ef26:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000ef2a:	89 c6                	mov    esi,eax
c000ef2c:	89 d7                	mov    edi,edx
c000ef2e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000ef30:	89 c8                	mov    eax,ecx
c000ef32:	89 fa                	mov    edx,edi
c000ef34:	89 f3                	mov    ebx,esi
c000ef36:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c000ef3a:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000ef3e:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000ef42:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c000ef46:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c000ef4a:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000ef52:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000ef56:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000ef5a:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000ef5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ef62:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000ef66:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000ef6a:	25 ff 0f 00 00       	and    eax,0xfff
c000ef6f:	89 c6                	mov    esi,eax
c000ef71:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000ef77:	83 ec 0c             	sub    esp,0xc
c000ef7a:	6a 02                	push   0x2
c000ef7c:	e8 8c a6 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000ef81:	83 c4 10             	add    esp,0x10
c000ef84:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c000ef88:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000ef8e:	83 ec 0c             	sub    esp,0xc
c000ef91:	6a 01                	push   0x1
c000ef93:	6a 02                	push   0x2
c000ef95:	50                   	push   eax
c000ef96:	52                   	push   edx
c000ef97:	53                   	push   ebx
c000ef98:	e8 7d af ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000ef9d:	83 c4 20             	add    esp,0x20
c000efa0:	09 f0                	or     eax,esi
c000efa2:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000efa6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000efaa:	25 ff 0f 00 00       	and    eax,0xfff
c000efaf:	89 c6                	mov    esi,eax
c000efb1:	8b 1d b0 5f 02 c0    	mov    ebx,DWORD PTR ds:0xc0025fb0
c000efb7:	83 ec 0c             	sub    esp,0xc
c000efba:	6a 02                	push   0x2
c000efbc:	e8 4c a6 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c000efc1:	83 c4 10             	add    esp,0x10
c000efc4:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000efc8:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c000efce:	83 ec 0c             	sub    esp,0xc
c000efd1:	6a 01                	push   0x1
c000efd3:	6a 02                	push   0x2
c000efd5:	50                   	push   eax
c000efd6:	52                   	push   edx
c000efd7:	53                   	push   ebx
c000efd8:	e8 3d af ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c000efdd:	83 c4 20             	add    esp,0x20
c000efe0:	09 f0                	or     eax,esi
c000efe2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000efe6:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000efeb:	85 c0                	test   eax,eax
c000efed:	75 11                	jne    c000f000 <findRSDT(unsigned char*)+0x128>
c000efef:	c6 05 20 8b 02 c0 00 	mov    BYTE PTR ds:0xc0028b20,0x0
c000eff6:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c000effa:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000effe:	eb 24                	jmp    c000f024 <findRSDT(unsigned char*)+0x14c>
c000f000:	0f b6 44 24 4b       	movzx  eax,BYTE PTR [esp+0x4b]
c000f005:	83 f8 02             	cmp    eax,0x2
c000f008:	75 12                	jne    c000f01c <findRSDT(unsigned char*)+0x144>
c000f00a:	c6 05 20 8b 02 c0 01 	mov    BYTE PTR ds:0xc0028b20,0x1
c000f011:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f015:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000f019:	eb 09                	jmp    c000f024 <findRSDT(unsigned char*)+0x14c>
c000f01b:	90                   	nop
c000f01c:	b8 00 00 00 00       	mov    eax,0x0
c000f021:	eb 05                	jmp    c000f028 <findRSDT(unsigned char*)+0x150>
c000f023:	90                   	nop
c000f024:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000f028:	83 c4 50             	add    esp,0x50
c000f02b:	5b                   	pop    ebx
c000f02c:	5e                   	pop    esi
c000f02d:	5f                   	pop    edi
c000f02e:	c3                   	ret    
c000f02f:	90                   	nop

c000f030 <findDataTable(unsigned char*, char*)>:
c000f030:	83 ec 1c             	sub    esp,0x1c
c000f033:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f038:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f03e:	83 e0 04             	and    eax,0x4
c000f041:	0f b6 c0             	movzx  eax,al
c000f044:	85 c0                	test   eax,eax
c000f046:	75 08                	jne    c000f050 <findDataTable(unsigned char*, char*)+0x20>
c000f048:	b8 00 00 00 00       	mov    eax,0x0
c000f04d:	eb 5d                	jmp    c000f0ac <findDataTable(unsigned char*, char*)+0x7c>
c000f04f:	90                   	nop
c000f050:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000f058:	a1 0c 89 02 c0       	mov    eax,ds:0xc002890c
c000f05d:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c000f061:	7d 41                	jge    c000f0a4 <findDataTable(unsigned char*, char*)+0x74>
c000f063:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f067:	c1 e0 03             	shl    eax,0x3
c000f06a:	05 20 89 02 c0       	add    eax,0xc0028920
c000f06f:	83 ec 04             	sub    esp,0x4
c000f072:	6a 04                	push   0x4
c000f074:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f078:	50                   	push   eax
c000f079:	e8 02 13 ff ff       	call   c0000380 <memcmp>
c000f07e:	83 c4 10             	add    esp,0x10
c000f081:	85 c0                	test   eax,eax
c000f083:	0f 94 c0             	sete   al
c000f086:	0f b6 c0             	movzx  eax,al
c000f089:	85 c0                	test   eax,eax
c000f08b:	74 0f                	je     c000f09c <findDataTable(unsigned char*, char*)+0x6c>
c000f08d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f091:	8b 04 c5 24 89 02 c0 	mov    eax,DWORD PTR [eax*8-0x3ffd76dc]
c000f098:	eb 12                	jmp    c000f0ac <findDataTable(unsigned char*, char*)+0x7c>
c000f09a:	66 90                	xchg   ax,ax
c000f09c:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c000f0a1:	eb b5                	jmp    c000f058 <findDataTable(unsigned char*, char*)+0x28>
c000f0a3:	90                   	nop
c000f0a4:	b8 00 00 00 00       	mov    eax,0x0
c000f0a9:	8d 76 00             	lea    esi,[esi+0x0]
c000f0ac:	83 c4 1c             	add    esp,0x1c
c000f0af:	c3                   	ret    

c000f0b0 <scanMADT()>:
c000f0b0:	53                   	push   ebx
c000f0b1:	83 ec 38             	sub    esp,0x38
c000f0b4:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c000f0b9:	25 00 04 00 00       	and    eax,0x400
c000f0be:	74 14                	je     c000f0d4 <scanMADT()+0x24>
c000f0c0:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0c5:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f0cb:	83 e2 fb             	and    edx,0xfffffffb
c000f0ce:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f0d4:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f0d9:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f0df:	83 e0 04             	and    eax,0x4
c000f0e2:	0f b6 c0             	movzx  eax,al
c000f0e5:	85 c0                	test   eax,eax
c000f0e7:	0f 84 6b 04 00 00    	je     c000f558 <scanMADT()+0x4a8>
c000f0ed:	e8 e2 fa ff ff       	call   c000ebd4 <findRSDP()>
c000f0f2:	a3 2c 8b 02 c0       	mov    ds:0xc0028b2c,eax
c000f0f7:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f0fc:	85 c0                	test   eax,eax
c000f0fe:	75 1c                	jne    c000f11c <scanMADT()+0x6c>
c000f100:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f105:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f10b:	83 e2 fb             	and    edx,0xfffffffb
c000f10e:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f114:	e9 47 04 00 00       	jmp    c000f560 <scanMADT()+0x4b0>
c000f119:	8d 76 00             	lea    esi,[esi+0x0]
c000f11c:	a1 2c 8b 02 c0       	mov    eax,ds:0xc0028b2c
c000f121:	83 ec 0c             	sub    esp,0xc
c000f124:	50                   	push   eax
c000f125:	e8 ae fd ff ff       	call   c000eed8 <findRSDT(unsigned char*)>
c000f12a:	83 c4 10             	add    esp,0x10
c000f12d:	a3 28 8b 02 c0       	mov    ds:0xc0028b28,eax
c000f132:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f137:	85 c0                	test   eax,eax
c000f139:	75 19                	jne    c000f154 <scanMADT()+0xa4>
c000f13b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f140:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f146:	83 e2 fb             	and    edx,0xfffffffb
c000f149:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f14f:	e9 0c 04 00 00       	jmp    c000f560 <scanMADT()+0x4b0>
c000f154:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f159:	83 ec 0c             	sub    esp,0xc
c000f15c:	50                   	push   eax
c000f15d:	e8 0a fb ff ff       	call   c000ec6c <loadACPITables(unsigned char*)>
c000f162:	83 c4 10             	add    esp,0x10
c000f165:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f16a:	83 ec 08             	sub    esp,0x8
c000f16d:	68 4c 19 02 c0       	push   0xc002194c
c000f172:	50                   	push   eax
c000f173:	e8 b8 fe ff ff       	call   c000f030 <findDataTable(unsigned char*, char*)>
c000f178:	83 c4 10             	add    esp,0x10
c000f17b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000f17f:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c000f184:	75 1a                	jne    c000f1a0 <scanMADT()+0xf0>
c000f186:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f18b:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c000f191:	83 e2 fe             	and    edx,0xfffffffe
c000f194:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c000f19a:	e9 c1 03 00 00       	jmp    c000f560 <scanMADT()+0x4b0>
c000f19f:	90                   	nop
c000f1a0:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c000f1a8:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f1ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f1af:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c000f1b3:	0f 87 a7 03 00 00    	ja     c000f560 <scanMADT()+0x4b0>
c000f1b9:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c000f1c1:	0f 87 99 03 00 00    	ja     c000f560 <scanMADT()+0x4b0>
c000f1c7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1cb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000f1cf:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1d3:	8d 50 01             	lea    edx,[eax+0x1]
c000f1d6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1da:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f1de:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f1e2:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c000f1e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f1ea:	8d 50 01             	lea    edx,[eax+0x1]
c000f1ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f1f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f1f5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f1f9:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c000f1fd:	0f b6 44 24 22       	movzx  eax,BYTE PTR [esp+0x22]
c000f202:	83 f8 02             	cmp    eax,0x2
c000f205:	0f 86 51 03 00 00    	jbe    c000f55c <scanMADT()+0x4ac>
c000f20b:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f210:	85 c0                	test   eax,eax
c000f212:	75 58                	jne    c000f26c <scanMADT()+0x1bc>
c000f214:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f218:	8d 50 01             	lea    edx,[eax+0x1]
c000f21b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f21f:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f225:	0f b6 d2             	movzx  edx,dl
c000f228:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f22c:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f230:	88 82 60 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72a0],al
c000f236:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f23a:	8d 50 01             	lea    edx,[eax+0x1]
c000f23d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f241:	8a 15 20 8d 02 c0    	mov    dl,BYTE PTR ds:0xc0028d20
c000f247:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f24a:	88 0d 20 8d 02 c0    	mov    BYTE PTR ds:0xc0028d20,cl
c000f250:	0f b6 d2             	movzx  edx,dl
c000f253:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f257:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f25b:	88 82 40 8d 02 c0    	mov    BYTE PTR [edx-0x3ffd72c0],al
c000f261:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f266:	e9 d9 02 00 00       	jmp    c000f544 <scanMADT()+0x494>
c000f26b:	90                   	nop
c000f26c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f271:	83 f8 01             	cmp    eax,0x1
c000f274:	0f 85 1a 01 00 00    	jne    c000f394 <scanMADT()+0x2e4>
c000f27a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f27e:	8d 50 01             	lea    edx,[eax+0x1]
c000f281:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f285:	8a 15 e0 8b 02 c0    	mov    dl,BYTE PTR ds:0xc0028be0
c000f28b:	0f b6 d2             	movzx  edx,dl
c000f28e:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f292:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c000f296:	88 82 00 8c 02 c0    	mov    BYTE PTR [edx-0x3ffd7400],al
c000f29c:	83 44 24 2c 01       	add    DWORD PTR [esp+0x2c],0x1
c000f2a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f2a5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2a9:	01 d0                	add    eax,edx
c000f2ab:	83 c0 2c             	add    eax,0x2c
c000f2ae:	8a 00                	mov    al,BYTE PTR [eax]
c000f2b0:	0f b6 d0             	movzx  edx,al
c000f2b3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2b7:	8d 48 01             	lea    ecx,[eax+0x1]
c000f2ba:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2be:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f2c2:	0f b6 c0             	movzx  eax,al
c000f2c5:	c1 e0 08             	shl    eax,0x8
c000f2c8:	89 d1                	mov    ecx,edx
c000f2ca:	09 c1                	or     ecx,eax
c000f2cc:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2d0:	8d 50 02             	lea    edx,[eax+0x2]
c000f2d3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2d7:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f2db:	0f b6 c0             	movzx  eax,al
c000f2de:	c1 e0 10             	shl    eax,0x10
c000f2e1:	09 c1                	or     ecx,eax
c000f2e3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f2e7:	8d 50 03             	lea    edx,[eax+0x3]
c000f2ea:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f2ee:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f2f2:	0f b6 c0             	movzx  eax,al
c000f2f5:	c1 e0 18             	shl    eax,0x18
c000f2f8:	09 c1                	or     ecx,eax
c000f2fa:	89 ca                	mov    edx,ecx
c000f2fc:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f301:	0f b6 c0             	movzx  eax,al
c000f304:	89 14 85 20 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd73e0],edx
c000f30b:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f310:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f314:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f318:	01 d0                	add    eax,edx
c000f31a:	83 c0 2c             	add    eax,0x2c
c000f31d:	8a 00                	mov    al,BYTE PTR [eax]
c000f31f:	0f b6 d0             	movzx  edx,al
c000f322:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f326:	8d 48 01             	lea    ecx,[eax+0x1]
c000f329:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f32d:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f331:	0f b6 c0             	movzx  eax,al
c000f334:	c1 e0 08             	shl    eax,0x8
c000f337:	89 d1                	mov    ecx,edx
c000f339:	09 c1                	or     ecx,eax
c000f33b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f33f:	8d 50 02             	lea    edx,[eax+0x2]
c000f342:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f346:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f34a:	0f b6 c0             	movzx  eax,al
c000f34d:	c1 e0 10             	shl    eax,0x10
c000f350:	09 c1                	or     ecx,eax
c000f352:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f356:	8d 50 03             	lea    edx,[eax+0x3]
c000f359:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f35d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f361:	0f b6 c0             	movzx  eax,al
c000f364:	c1 e0 18             	shl    eax,0x18
c000f367:	09 c1                	or     ecx,eax
c000f369:	89 ca                	mov    edx,ecx
c000f36b:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f370:	0f b6 c0             	movzx  eax,al
c000f373:	89 14 85 a0 8c 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7360],edx
c000f37a:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f37f:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c000f384:	83 c0 01             	add    eax,0x1
c000f387:	a2 e0 8b 02 c0       	mov    ds:0xc0028be0,al
c000f38c:	e9 b3 01 00 00       	jmp    c000f544 <scanMADT()+0x494>
c000f391:	8d 76 00             	lea    esi,[esi+0x0]
c000f394:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f399:	83 f8 02             	cmp    eax,0x2
c000f39c:	0f 85 ea 00 00 00    	jne    c000f48c <scanMADT()+0x3dc>
c000f3a2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3a6:	8d 50 01             	lea    edx,[eax+0x1]
c000f3a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f3ad:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3b1:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f3b5:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c000f3b9:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3bd:	8d 50 01             	lea    edx,[eax+0x1]
c000f3c0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f3c4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3c8:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f3cc:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c000f3d0:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f3d4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3d8:	01 d0                	add    eax,edx
c000f3da:	83 c0 2c             	add    eax,0x2c
c000f3dd:	8a 00                	mov    al,BYTE PTR [eax]
c000f3df:	0f b6 d0             	movzx  edx,al
c000f3e2:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3e6:	8d 48 01             	lea    ecx,[eax+0x1]
c000f3e9:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f3ed:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f3f1:	0f b6 c0             	movzx  eax,al
c000f3f4:	c1 e0 08             	shl    eax,0x8
c000f3f7:	89 d1                	mov    ecx,edx
c000f3f9:	09 c1                	or     ecx,eax
c000f3fb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f3ff:	8d 50 02             	lea    edx,[eax+0x2]
c000f402:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f406:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f40a:	0f b6 c0             	movzx  eax,al
c000f40d:	c1 e0 10             	shl    eax,0x10
c000f410:	09 c1                	or     ecx,eax
c000f412:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f416:	8d 50 03             	lea    edx,[eax+0x3]
c000f419:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f41d:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c000f421:	0f b6 c0             	movzx  eax,al
c000f424:	c1 e0 18             	shl    eax,0x18
c000f427:	09 c8                	or     eax,ecx
c000f429:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f42d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c000f432:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f436:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f43a:	01 d0                	add    eax,edx
c000f43c:	83 c0 2c             	add    eax,0x2c
c000f43f:	8a 00                	mov    al,BYTE PTR [eax]
c000f441:	0f b6 c0             	movzx  eax,al
c000f444:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c000f448:	8d 4a 01             	lea    ecx,[edx+0x1]
c000f44b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f44f:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c000f453:	0f b6 d2             	movzx  edx,dl
c000f456:	c1 e2 08             	shl    edx,0x8
c000f459:	09 d0                	or     eax,edx
c000f45b:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c000f460:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f465:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c000f46a:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f46e:	88 90 48 30 02 c0    	mov    BYTE PTR [eax-0x3ffdcfb8],dl
c000f474:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c000f479:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c000f47e:	66 89 84 12 c0 8b 02 c0 	mov    WORD PTR [edx+edx*1-0x3ffd7440],ax
c000f486:	e9 b9 00 00 00       	jmp    c000f544 <scanMADT()+0x494>
c000f48b:	90                   	nop
c000f48c:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f491:	83 f8 04             	cmp    eax,0x4
c000f494:	0f 85 9a 00 00 00    	jne    c000f534 <scanMADT()+0x484>
c000f49a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f49e:	8d 50 01             	lea    edx,[eax+0x1]
c000f4a1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4a5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4a9:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4ad:	0f b6 c0             	movzx  eax,al
c000f4b0:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000f4b4:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4b8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4bc:	01 d0                	add    eax,edx
c000f4be:	83 c0 2c             	add    eax,0x2c
c000f4c1:	8a 00                	mov    al,BYTE PTR [eax]
c000f4c3:	0f b6 d0             	movzx  edx,al
c000f4c6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4ca:	8d 48 01             	lea    ecx,[eax+0x1]
c000f4cd:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f4d1:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c000f4d5:	0f b6 c0             	movzx  eax,al
c000f4d8:	c1 e0 08             	shl    eax,0x8
c000f4db:	09 d0                	or     eax,edx
c000f4dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f4e1:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c000f4e6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c000f4ea:	8d 50 01             	lea    edx,[eax+0x1]
c000f4ed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000f4f1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000f4f5:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c000f4f9:	0f b6 c0             	movzx  eax,al
c000f4fc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000f500:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f504:	c1 e0 08             	shl    eax,0x8
c000f507:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c000f50b:	89 c1                	mov    ecx,eax
c000f50d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f511:	c1 e0 18             	shl    eax,0x18
c000f514:	89 c3                	mov    ebx,eax
c000f516:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c000f51b:	8d 50 01             	lea    edx,[eax+0x1]
c000f51e:	89 15 30 8b 02 c0    	mov    DWORD PTR ds:0xc0028b30,edx
c000f524:	09 d9                	or     ecx,ebx
c000f526:	89 ca                	mov    edx,ecx
c000f528:	89 14 85 40 8b 02 c0 	mov    DWORD PTR [eax*4-0x3ffd74c0],edx
c000f52f:	eb 13                	jmp    c000f544 <scanMADT()+0x494>
c000f531:	8d 76 00             	lea    esi,[esi+0x0]
c000f534:	0f b6 44 24 23       	movzx  eax,BYTE PTR [esp+0x23]
c000f539:	83 f8 05             	cmp    eax,0x5
c000f53c:	75 06                	jne    c000f544 <scanMADT()+0x494>
c000f53e:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c000f543:	90                   	nop
c000f544:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c000f549:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f54d:	01 d0                	add    eax,edx
c000f54f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000f553:	e9 50 fc ff ff       	jmp    c000f1a8 <scanMADT()+0xf8>
c000f558:	90                   	nop
c000f559:	eb 05                	jmp    c000f560 <scanMADT()+0x4b0>
c000f55b:	90                   	nop
c000f55c:	90                   	nop
c000f55d:	8d 76 00             	lea    esi,[esi+0x0]
c000f560:	83 c4 38             	add    esp,0x38
c000f563:	5b                   	pop    ebx
c000f564:	c3                   	ret    
c000f565:	90                   	nop
c000f566:	66 90                	xchg   ax,ax

c000f568 <ACPI::ACPI()>:
c000f568:	83 ec 0c             	sub    esp,0xc
c000f56b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f56f:	83 ec 08             	sub    esp,0x8
c000f572:	68 51 19 02 c0       	push   0xc0021951
c000f577:	50                   	push   eax
c000f578:	e8 65 d2 ff ff       	call   c000c7e2 <Device::Device(char const*)>
c000f57d:	83 c4 10             	add    esp,0x10
c000f580:	ba a4 1a 02 c0       	mov    edx,0xc0021aa4
c000f585:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f589:	89 10                	mov    DWORD PTR [eax],edx
c000f58b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f58f:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c000f596:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f59a:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c000f5a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f5a8:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c000f5b2:	e8 f9 fa ff ff       	call   c000f0b0 <scanMADT()>
c000f5b7:	90                   	nop
c000f5b8:	83 c4 0c             	add    esp,0xc
c000f5bb:	c3                   	ret    

c000f5bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c000f5bc:	83 ec 2c             	sub    esp,0x2c
c000f5bf:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c000f5c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f5c7:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c000f5cb:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c000f5cf:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c000f5d4:	88 d0                	mov    al,dl
c000f5d6:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f5da:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f5df:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000f5e7:	90                   	nop
c000f5e8:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f5ec:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f5f2:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c000f5f6:	0f 8d b0 00 00 00    	jge    c000f6ac <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xf0>
c000f5fc:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f600:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f604:	83 c2 2a             	add    edx,0x2a
c000f607:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c000f60b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c000f610:	0f b7 c0             	movzx  eax,ax
c000f613:	39 c2                	cmp    edx,eax
c000f615:	0f 85 85 00 00 00    	jne    c000f6a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f61b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f61f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f623:	83 c2 2a             	add    edx,0x2a
c000f626:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c000f62a:	0f b6 54 24 04       	movzx  edx,BYTE PTR [esp+0x4]
c000f62f:	0f b6 c0             	movzx  eax,al
c000f632:	39 c2                	cmp    edx,eax
c000f634:	75 6a                	jne    c000f6a0 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xe4>
c000f636:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f63b:	85 c0                	test   eax,eax
c000f63d:	74 3d                	je     c000f67c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xc0>
c000f63f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f643:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f647:	83 c2 2a             	add    edx,0x2a
c000f64a:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c000f64e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f652:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c000f655:	39 c2                	cmp    edx,eax
c000f657:	74 13                	je     c000f66c <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xb0>
c000f659:	83 ec 0c             	sub    esp,0xc
c000f65c:	68 cc 18 02 c0       	push   0xc00218cc
c000f661:	e8 13 1c 00 00       	call   c0011279 <KePanic(char const*)>
c000f666:	83 c4 10             	add    esp,0x10
c000f669:	8d 76 00             	lea    esi,[esi+0x0]
c000f66c:	83 ec 0c             	sub    esp,0xc
c000f66f:	68 56 19 02 c0       	push   0xc0021956
c000f674:	e8 00 1c 00 00       	call   c0011279 <KePanic(char const*)>
c000f679:	83 c4 10             	add    esp,0x10
c000f67c:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f680:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000f684:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000f688:	83 c2 2a             	add    edx,0x2a
c000f68b:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c000f68f:	8b 02                	mov    eax,DWORD PTR [edx]
c000f691:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c000f694:	89 01                	mov    DWORD PTR [ecx],eax
c000f696:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000f699:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f69e:	66 90                	xchg   ax,ax
c000f6a0:	83 44 24 18 01       	add    DWORD PTR [esp+0x18],0x1
c000f6a5:	e9 3e ff ff ff       	jmp    c000f5e8 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2c>
c000f6aa:	66 90                	xchg   ax,ax
c000f6ac:	90                   	nop
c000f6ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f6b1:	83 c4 2c             	add    esp,0x2c
c000f6b4:	c2 04 00             	ret    0x4
c000f6b7:	90                   	nop

c000f6b8 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c000f6b8:	83 ec 1c             	sub    esp,0x1c
c000f6bb:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000f6bf:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000f6c3:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c000f6c7:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c000f6cc:	88 c8                	mov    al,cl
c000f6ce:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c000f6d2:	88 d0                	mov    al,dl
c000f6d4:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c000f6d8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6dc:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f6e2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6e6:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f6e9:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c000f6ed:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c000f6f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f6f5:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f6fb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000f6ff:	8d 48 2a             	lea    ecx,[eax+0x2a]
c000f702:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f706:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c000f70b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f70f:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f715:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c000f719:	83 c0 01             	add    eax,0x1
c000f71c:	88 c1                	mov    cl,al
c000f71e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f722:	83 c2 2a             	add    edx,0x2a
c000f725:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c000f729:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f72d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c000f733:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f737:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c000f73a:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f73e:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c000f742:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f746:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f74c:	8d 50 01             	lea    edx,[eax+0x1]
c000f74f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f753:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c000f759:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000f75d:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c000f763:	3d 00 02 00 00       	cmp    eax,0x200
c000f768:	75 12                	jne    c000f77c <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc4>
c000f76a:	83 ec 0c             	sub    esp,0xc
c000f76d:	68 65 19 02 c0       	push   0xc0021965
c000f772:	e8 02 1b 00 00       	call   c0011279 <KePanic(char const*)>
c000f777:	83 c4 10             	add    esp,0x10
c000f77a:	66 90                	xchg   ax,ax
c000f77c:	90                   	nop
c000f77d:	83 c4 1c             	add    esp,0x1c
c000f780:	c3                   	ret    
c000f781:	90                   	nop
c000f782:	66 90                	xchg   ax,ax

c000f784 <ACPI::setScreenBrightnessLevel(void*, int)>:
c000f784:	b8 00 00 00 00       	mov    eax,0x0
c000f789:	c3                   	ret    
c000f78a:	66 90                	xchg   ax,ax

c000f78c <ACPI::detectPCI()>:
c000f78c:	53                   	push   ebx
c000f78d:	83 ec 28             	sub    esp,0x28
c000f790:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c000f795:	c6 44 24 1e 00       	mov    BYTE PTR [esp+0x1e],0x0
c000f79a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f79f:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000f7a5:	83 e0 04             	and    eax,0x4
c000f7a8:	0f b6 c0             	movzx  eax,al
c000f7ab:	85 c0                	test   eax,eax
c000f7ad:	74 2d                	je     c000f7dc <ACPI::detectPCI()+0x50>
c000f7af:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000f7b4:	83 ec 08             	sub    esp,0x8
c000f7b7:	68 82 19 02 c0       	push   0xc0021982
c000f7bc:	50                   	push   eax
c000f7bd:	e8 6e f8 ff ff       	call   c000f030 <findDataTable(unsigned char*, char*)>
c000f7c2:	83 c4 10             	add    esp,0x10
c000f7c5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000f7c9:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c000f7ce:	74 0c                	je     c000f7dc <ACPI::detectPCI()+0x50>
c000f7d0:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7d5:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f7da:	66 90                	xchg   ax,ax
c000f7dc:	c7 44 24 14 5f 0c 00 00 	mov    DWORD PTR [esp+0x14],0xc5f
c000f7e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f7e8:	8a 00                	mov    al,BYTE PTR [eax]
c000f7ea:	0f b6 c0             	movzx  eax,al
c000f7ed:	83 f8 01             	cmp    eax,0x1
c000f7f0:	75 0e                	jne    c000f800 <ACPI::detectPCI()+0x74>
c000f7f2:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f7f7:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f7fc:	eb 2e                	jmp    c000f82c <ACPI::detectPCI()+0xa0>
c000f7fe:	66 90                	xchg   ax,ax
c000f800:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000f804:	8a 00                	mov    al,BYTE PTR [eax]
c000f806:	0f b6 c0             	movzx  eax,al
c000f809:	83 f8 02             	cmp    eax,0x2
c000f80c:	75 1e                	jne    c000f82c <ACPI::detectPCI()+0xa0>
c000f80e:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f813:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f818:	85 c0                	test   eax,eax
c000f81a:	74 10                	je     c000f82c <ACPI::detectPCI()+0xa0>
c000f81c:	83 ec 0c             	sub    esp,0xc
c000f81f:	68 fc 18 02 c0       	push   0xc00218fc
c000f824:	e8 50 1a 00 00       	call   c0011279 <KePanic(char const*)>
c000f829:	83 c4 10             	add    esp,0x10
c000f82c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c000f830:	83 f0 01             	xor    eax,0x1
c000f833:	0f b6 c0             	movzx  eax,al
c000f836:	85 c0                	test   eax,eax
c000f838:	74 46                	je     c000f880 <ACPI::detectPCI()+0xf4>
c000f83a:	e8 f1 08 ff ff       	call   c0000130 <manualPCIProbe>
c000f83f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000f843:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f848:	75 0e                	jne    c000f858 <ACPI::detectPCI()+0xcc>
c000f84a:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f84f:	c6 44 24 1e 01       	mov    BYTE PTR [esp+0x1e],0x1
c000f854:	eb 2a                	jmp    c000f880 <ACPI::detectPCI()+0xf4>
c000f856:	66 90                	xchg   ax,ax
c000f858:	83 7c 24 10 02       	cmp    DWORD PTR [esp+0x10],0x2
c000f85d:	75 21                	jne    c000f880 <ACPI::detectPCI()+0xf4>
c000f85f:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c000f864:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c000f869:	85 c0                	test   eax,eax
c000f86b:	74 13                	je     c000f880 <ACPI::detectPCI()+0xf4>
c000f86d:	83 ec 0c             	sub    esp,0xc
c000f870:	68 fc 18 02 c0       	push   0xc00218fc
c000f875:	e8 ff 19 00 00       	call   c0011279 <KePanic(char const*)>
c000f87a:	83 c4 10             	add    esp,0x10
c000f87d:	8d 76 00             	lea    esi,[esi+0x0]
c000f880:	0f b6 44 24 1f       	movzx  eax,BYTE PTR [esp+0x1f]
c000f885:	85 c0                	test   eax,eax
c000f887:	0f 84 87 00 00 00    	je     c000f914 <ACPI::detectPCI()+0x188>
c000f88d:	83 ec 0c             	sub    esp,0xc
c000f890:	68 87 19 02 c0       	push   0xc0021987
c000f895:	e8 09 13 00 00       	call   c0010ba3 <KeSetBootMessage(char const*)>
c000f89a:	83 c4 10             	add    esp,0x10
c000f89d:	c7 44 24 04 5c 01 00 00 	mov    DWORD PTR [esp+0x4],0x15c
c000f8a5:	83 ec 0c             	sub    esp,0xc
c000f8a8:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f8ac:	e8 05 82 ff ff       	call   c0007ab6 <malloc>
c000f8b1:	83 c4 10             	add    esp,0x10
c000f8b4:	89 c3                	mov    ebx,eax
c000f8b6:	83 ec 0c             	sub    esp,0xc
c000f8b9:	53                   	push   ebx
c000f8ba:	e8 51 b3 00 00       	call   c001ac10 <PCI::PCI()>
c000f8bf:	83 c4 10             	add    esp,0x10
c000f8c2:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c000f8c6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f8ca:	83 ec 08             	sub    esp,0x8
c000f8cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f8d1:	50                   	push   eax
c000f8d2:	e8 73 cd ff ff       	call   c000c64a <Device::addChild(Device*)>
c000f8d7:	83 c4 10             	add    esp,0x10
c000f8da:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f8de:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8e0:	83 c0 08             	add    eax,0x8
c000f8e3:	8b 00                	mov    eax,DWORD PTR [eax]
c000f8e5:	0f b6 54 24 1e       	movzx  edx,BYTE PTR [esp+0x1e]
c000f8ea:	85 d2                	test   edx,edx
c000f8ec:	74 0a                	je     c000f8f8 <ACPI::detectPCI()+0x16c>
c000f8ee:	ba 01 00 00 00       	mov    edx,0x1
c000f8f3:	eb 0b                	jmp    c000f900 <ACPI::detectPCI()+0x174>
c000f8f5:	8d 76 00             	lea    esi,[esi+0x0]
c000f8f8:	ba 02 00 00 00       	mov    edx,0x2
c000f8fd:	8d 76 00             	lea    esi,[esi+0x0]
c000f900:	6a 00                	push   0x0
c000f902:	6a 00                	push   0x0
c000f904:	52                   	push   edx
c000f905:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f909:	ff d0                	call   eax
c000f90b:	83 c4 10             	add    esp,0x10
c000f90e:	e9 91 00 00 00       	jmp    c000f9a4 <ACPI::detectPCI()+0x218>
c000f913:	90                   	nop
c000f914:	83 ec 0c             	sub    esp,0xc
c000f917:	68 9f 19 02 c0       	push   0xc002199f
c000f91c:	e8 82 12 00 00       	call   c0010ba3 <KeSetBootMessage(char const*)>
c000f921:	83 c4 10             	add    esp,0x10
c000f924:	c7 04 24 70 02 00 00 	mov    DWORD PTR [esp],0x270
c000f92b:	83 ec 0c             	sub    esp,0xc
c000f92e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000f932:	e8 7f 81 ff ff       	call   c0007ab6 <malloc>
c000f937:	83 c4 10             	add    esp,0x10
c000f93a:	89 c3                	mov    ebx,eax
c000f93c:	83 ec 0c             	sub    esp,0xc
c000f93f:	53                   	push   ebx
c000f940:	e8 65 be 00 00       	call   c001b7aa <IDE::IDE()>
c000f945:	83 c4 10             	add    esp,0x10
c000f948:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c000f94c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f950:	83 ec 08             	sub    esp,0x8
c000f953:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000f957:	50                   	push   eax
c000f958:	e8 ed cc ff ff       	call   c000c64a <Device::addChild(Device*)>
c000f95d:	83 c4 10             	add    esp,0x10
c000f960:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f964:	c7 80 14 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x114],0x1
c000f96e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f972:	66 c7 80 18 01 00 00 f0 01 	mov    WORD PTR [eax+0x118],0x1f0
c000f97b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f97f:	66 c7 80 1a 01 00 00 70 01 	mov    WORD PTR [eax+0x11a],0x170
c000f988:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f98c:	8b 00                	mov    eax,DWORD PTR [eax]
c000f98e:	83 c0 08             	add    eax,0x8
c000f991:	8b 00                	mov    eax,DWORD PTR [eax]
c000f993:	6a 00                	push   0x0
c000f995:	6a 00                	push   0x0
c000f997:	6a 00                	push   0x0
c000f999:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000f99d:	ff d0                	call   eax
c000f99f:	83 c4 10             	add    esp,0x10
c000f9a2:	66 90                	xchg   ax,ax
c000f9a4:	90                   	nop
c000f9a5:	83 c4 28             	add    esp,0x28
c000f9a8:	5b                   	pop    ebx
c000f9a9:	c3                   	ret    
c000f9aa:	66 90                	xchg   ax,ax

c000f9ac <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c000f9ac:	83 ec 1c             	sub    esp,0x1c
c000f9af:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000f9b3:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c000f9b6:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000f9ba:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f9bf:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f9c4:	83 ec 08             	sub    esp,0x8
c000f9c7:	52                   	push   edx
c000f9c8:	50                   	push   eax
c000f9c9:	e8 aa 77 ff ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c000f9ce:	83 c4 10             	add    esp,0x10
c000f9d1:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c000f9d5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000f9da:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c000f9df:	83 ec 04             	sub    esp,0x4
c000f9e2:	6a 01                	push   0x1
c000f9e4:	52                   	push   edx
c000f9e5:	50                   	push   eax
c000f9e6:	e8 a7 78 ff ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c000f9eb:	83 c4 10             	add    esp,0x10
c000f9ee:	90                   	nop
c000f9ef:	83 c4 1c             	add    esp,0x1c
c000f9f2:	c3                   	ret    
c000f9f3:	90                   	nop

c000f9f4 <ACPI::sleep()>:
c000f9f4:	83 ec 0c             	sub    esp,0xc
c000f9f7:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000f9fc:	85 c0                	test   eax,eax
c000f9fe:	74 08                	je     c000fa08 <ACPI::sleep()+0x14>
c000fa00:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c000fa05:	ff d0                	call   eax
c000fa07:	90                   	nop
c000fa08:	90                   	nop
c000fa09:	83 c4 0c             	add    esp,0xc
c000fa0c:	c3                   	ret    
c000fa0d:	90                   	nop
c000fa0e:	66 90                	xchg   ax,ax

c000fa10 <ACPI::open(int, int, void*)>:
c000fa10:	57                   	push   edi
c000fa11:	56                   	push   esi
c000fa12:	53                   	push   ebx
c000fa13:	81 ec 70 01 00 00    	sub    esp,0x170
c000fa19:	83 ec 0c             	sub    esp,0xc
c000fa1c:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fa23:	e8 64 fd ff ff       	call   c000f78c <ACPI::detectPCI()>
c000fa28:	83 c4 10             	add    esp,0x10
c000fa2b:	83 ec 0c             	sub    esp,0xc
c000fa2e:	68 24 19 02 c0       	push   0xc0021924
c000fa33:	e8 6b 11 00 00       	call   c0010ba3 <KeSetBootMessage(char const*)>
c000fa38:	83 c4 10             	add    esp,0x10
c000fa3b:	b8 4c 05 00 00       	mov    eax,0x54c
c000fa40:	8a 00                	mov    al,BYTE PTR [eax]
c000fa42:	88 84 24 6e 01 00 00 	mov    BYTE PTR [esp+0x16e],al
c000fa49:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fa51:	83 f8 01             	cmp    eax,0x1
c000fa54:	75 12                	jne    c000fa68 <ACPI::open(int, int, void*)+0x58>
c000fa56:	83 ec 0c             	sub    esp,0xc
c000fa59:	68 94 12 02 c0       	push   0xc0021294
c000fa5e:	e8 fd 4b 00 00       	call   c0014660 <Thr::loadKernelSymbolTable(char const*)>
c000fa63:	83 c4 10             	add    esp,0x10
c000fa66:	eb 34                	jmp    c000fa9c <ACPI::open(int, int, void*)+0x8c>
c000fa68:	0f b6 84 24 6e 01 00 00 	movzx  eax,BYTE PTR [esp+0x16e]
c000fa70:	3d bb 00 00 00       	cmp    eax,0xbb
c000fa75:	75 15                	jne    c000fa8c <ACPI::open(int, int, void*)+0x7c>
c000fa77:	83 ec 0c             	sub    esp,0xc
c000fa7a:	68 b4 19 02 c0       	push   0xc00219b4
c000fa7f:	e8 dc 4b 00 00       	call   c0014660 <Thr::loadKernelSymbolTable(char const*)>
c000fa84:	83 c4 10             	add    esp,0x10
c000fa87:	eb 13                	jmp    c000fa9c <ACPI::open(int, int, void*)+0x8c>
c000fa89:	8d 76 00             	lea    esi,[esi+0x0]
c000fa8c:	83 ec 0c             	sub    esp,0xc
c000fa8f:	68 d2 19 02 c0       	push   0xc00219d2
c000fa94:	e8 e0 17 00 00       	call   c0011279 <KePanic(char const*)>
c000fa99:	83 c4 10             	add    esp,0x10
c000fa9c:	c6 84 24 6f 01 00 00 00 	mov    BYTE PTR [esp+0x16f],0x0
c000faa4:	c7 84 24 44 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x144],0x114
c000faaf:	83 ec 0c             	sub    esp,0xc
c000fab2:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fab9:	e8 f8 7f ff ff       	call   c0007ab6 <malloc>
c000fabe:	83 c4 10             	add    esp,0x10
c000fac1:	89 c3                	mov    ebx,eax
c000fac3:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fac8:	83 ec 04             	sub    esp,0x4
c000facb:	50                   	push   eax
c000facc:	68 ec 19 02 c0       	push   0xc00219ec
c000fad1:	53                   	push   ebx
c000fad2:	e8 6b bc ff ff       	call   c000b742 <File::File(char const*, Process*)>
c000fad7:	83 c4 10             	add    esp,0x10
c000fada:	89 9c 24 68 01 00 00 	mov    DWORD PTR [esp+0x168],ebx
c000fae1:	83 ec 08             	sub    esp,0x8
c000fae4:	6a 01                	push   0x1
c000fae6:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000faed:	e8 0c bd ff ff       	call   c000b7fe <File::open(FileOpenMode)>
c000faf2:	83 c4 10             	add    esp,0x10
c000faf5:	89 84 24 64 01 00 00 	mov    DWORD PTR [esp+0x164],eax
c000fafc:	83 bc 24 64 01 00 00 00 	cmp    DWORD PTR [esp+0x164],0x0
c000fb04:	75 16                	jne    c000fb1c <ACPI::open(int, int, void*)+0x10c>
c000fb06:	83 ec 0c             	sub    esp,0xc
c000fb09:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fb10:	e8 47 bd ff ff       	call   c000b85c <File::close()>
c000fb15:	83 c4 10             	add    esp,0x10
c000fb18:	eb 0a                	jmp    c000fb24 <ACPI::open(int, int, void*)+0x114>
c000fb1a:	66 90                	xchg   ax,ax
c000fb1c:	c6 84 24 6f 01 00 00 01 	mov    BYTE PTR [esp+0x16f],0x1
c000fb24:	83 bc 24 68 01 00 00 00 	cmp    DWORD PTR [esp+0x168],0x0
c000fb2c:	74 1e                	je     c000fb4c <ACPI::open(int, int, void*)+0x13c>
c000fb2e:	8b 84 24 68 01 00 00 	mov    eax,DWORD PTR [esp+0x168]
c000fb35:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb37:	83 c0 08             	add    eax,0x8
c000fb3a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fb3c:	83 ec 0c             	sub    esp,0xc
c000fb3f:	ff b4 24 74 01 00 00 	push   DWORD PTR [esp+0x174]
c000fb46:	ff d0                	call   eax
c000fb48:	83 c4 10             	add    esp,0x10
c000fb4b:	90                   	nop
c000fb4c:	8a 84 24 6f 01 00 00 	mov    al,BYTE PTR [esp+0x16f]
c000fb53:	83 f0 01             	xor    eax,0x1
c000fb56:	0f b6 c0             	movzx  eax,al
c000fb59:	85 c0                	test   eax,eax
c000fb5b:	74 43                	je     c000fba0 <ACPI::open(int, int, void*)+0x190>
c000fb5d:	83 ec 0c             	sub    esp,0xc
c000fb60:	68 0a 1a 02 c0       	push   0xc0021a0a
c000fb65:	e8 39 10 00 00       	call   c0010ba3 <KeSetBootMessage(char const*)>
c000fb6a:	83 c4 10             	add    esp,0x10
c000fb6d:	83 ec 04             	sub    esp,0x4
c000fb70:	6a 0c                	push   0xc
c000fb72:	68 25 1a 02 c0       	push   0xc0021a25
c000fb77:	68 36 1a 02 c0       	push   0xc0021a36
c000fb7c:	e8 8f 3d 00 00       	call   c0013910 <Reg::readIntWithDefault(char*, char*, int)>
c000fb81:	83 c4 10             	add    esp,0x10
c000fb84:	89 84 24 60 01 00 00 	mov    DWORD PTR [esp+0x160],eax
c000fb8b:	83 ec 0c             	sub    esp,0xc
c000fb8e:	ff b4 24 6c 01 00 00 	push   DWORD PTR [esp+0x16c]
c000fb95:	e8 a2 9c ff ff       	call   c000983c <Virt::setupPageSwapping(int)>
c000fb9a:	83 c4 10             	add    esp,0x10
c000fb9d:	8d 76 00             	lea    esi,[esi+0x0]
c000fba0:	83 ec 0c             	sub    esp,0xc
c000fba3:	68 95 05 02 c0       	push   0xc0020595
c000fba8:	e8 f6 0f 00 00       	call   c0010ba3 <KeSetBootMessage(char const*)>
c000fbad:	83 c4 10             	add    esp,0x10
c000fbb0:	8d 84 24 30 01 00 00 	lea    eax,[esp+0x130]
c000fbb7:	83 ec 08             	sub    esp,0x8
c000fbba:	6a 13                	push   0x13
c000fbbc:	50                   	push   eax
c000fbbd:	e8 a0 cd ff ff       	call   c000c962 <getDevicesOfType(DeviceType)>
c000fbc2:	83 c4 0c             	add    esp,0xc
c000fbc5:	8d 76 00             	lea    esi,[esi+0x0]
c000fbc8:	83 ec 0c             	sub    esp,0xc
c000fbcb:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fbd2:	50                   	push   eax
c000fbd3:	e8 b8 fd 00 00       	call   c001f990 <LinkedList<Device>::isEmpty()>
c000fbd8:	83 c4 10             	add    esp,0x10
c000fbdb:	83 f0 01             	xor    eax,0x1
c000fbde:	0f b6 c0             	movzx  eax,al
c000fbe1:	85 c0                	test   eax,eax
c000fbe3:	0f 84 47 01 00 00    	je     c000fd30 <ACPI::open(int, int, void*)+0x320>
c000fbe9:	83 ec 0c             	sub    esp,0xc
c000fbec:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fbf3:	50                   	push   eax
c000fbf4:	e8 b3 fd 00 00       	call   c001f9ac <LinkedList<Device>::getFirstElement()>
c000fbf9:	83 c4 10             	add    esp,0x10
c000fbfc:	89 84 24 5c 01 00 00 	mov    DWORD PTR [esp+0x15c],eax
c000fc03:	83 ec 0c             	sub    esp,0xc
c000fc06:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fc0d:	50                   	push   eax
c000fc0e:	e8 a1 fd 00 00       	call   c001f9b4 <LinkedList<Device>::removeFirst()>
c000fc13:	83 c4 10             	add    esp,0x10
c000fc16:	8b 84 24 5c 01 00 00 	mov    eax,DWORD PTR [esp+0x15c]
c000fc1d:	89 84 24 58 01 00 00 	mov    DWORD PTR [esp+0x158],eax
c000fc24:	8b 94 24 58 01 00 00 	mov    edx,DWORD PTR [esp+0x158]
c000fc2b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fc2f:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c000fc35:	ba 09 00 00 00       	mov    edx,0x9
c000fc3a:	fc                   	cld    
c000fc3b:	89 c7                	mov    edi,eax
c000fc3d:	89 de                	mov    esi,ebx
c000fc3f:	89 d1                	mov    ecx,edx
c000fc41:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fc43:	83 ec 08             	sub    esp,0x8
c000fc46:	8d 44 24 38          	lea    eax,[esp+0x38]
c000fc4a:	50                   	push   eax
c000fc4b:	83 ec 24             	sub    esp,0x24
c000fc4e:	89 e0                	mov    eax,esp
c000fc50:	89 c3                	mov    ebx,eax
c000fc52:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c000fc56:	ba 09 00 00 00       	mov    edx,0x9
c000fc5b:	89 df                	mov    edi,ebx
c000fc5d:	89 c6                	mov    esi,eax
c000fc5f:	89 d1                	mov    ecx,edx
c000fc61:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c000fc63:	e8 92 b4 00 00       	call   c001b0fa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>
c000fc68:	83 c4 30             	add    esp,0x30
c000fc6b:	89 84 24 54 01 00 00 	mov    DWORD PTR [esp+0x154],eax
c000fc72:	83 bc 24 54 01 00 00 00 	cmp    DWORD PTR [esp+0x154],0x0
c000fc7a:	0f 84 48 ff ff ff    	je     c000fbc8 <ACPI::open(int, int, void*)+0x1b8>
c000fc80:	c7 84 24 40 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x140],0x114
c000fc8b:	83 ec 0c             	sub    esp,0xc
c000fc8e:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c000fc95:	e8 1c 7e ff ff       	call   c0007ab6 <malloc>
c000fc9a:	83 c4 10             	add    esp,0x10
c000fc9d:	89 c3                	mov    ebx,eax
c000fc9f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fca4:	83 ec 04             	sub    esp,0x4
c000fca7:	50                   	push   eax
c000fca8:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fcaf:	53                   	push   ebx
c000fcb0:	e8 8d ba ff ff       	call   c000b742 <File::File(char const*, Process*)>
c000fcb5:	83 c4 10             	add    esp,0x10
c000fcb8:	89 9c 24 50 01 00 00 	mov    DWORD PTR [esp+0x150],ebx
c000fcbf:	83 ec 0c             	sub    esp,0xc
c000fcc2:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fcc9:	e8 f4 bd ff ff       	call   c000bac2 <File::exists()>
c000fcce:	83 c4 10             	add    esp,0x10
c000fcd1:	0f b6 c0             	movzx  eax,al
c000fcd4:	85 c0                	test   eax,eax
c000fcd6:	74 28                	je     c000fd00 <ACPI::open(int, int, void*)+0x2f0>
c000fcd8:	83 ec 08             	sub    esp,0x8
c000fcdb:	6a 01                	push   0x1
c000fcdd:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fce4:	e8 f1 53 00 00       	call   c00150da <Thr::loadDLL(char const*, bool)>
c000fce9:	83 c4 10             	add    esp,0x10
c000fcec:	83 ec 08             	sub    esp,0x8
c000fcef:	ff b4 24 60 01 00 00 	push   DWORD PTR [esp+0x160]
c000fcf6:	50                   	push   eax
c000fcf7:	e8 0f 56 00 00       	call   c001530b <Thr::executeDLL(unsigned long, void*)>
c000fcfc:	83 c4 10             	add    esp,0x10
c000fcff:	90                   	nop
c000fd00:	83 bc 24 50 01 00 00 00 	cmp    DWORD PTR [esp+0x150],0x0
c000fd08:	0f 84 ba fe ff ff    	je     c000fbc8 <ACPI::open(int, int, void*)+0x1b8>
c000fd0e:	8b 84 24 50 01 00 00 	mov    eax,DWORD PTR [esp+0x150]
c000fd15:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd17:	83 c0 08             	add    eax,0x8
c000fd1a:	8b 00                	mov    eax,DWORD PTR [eax]
c000fd1c:	83 ec 0c             	sub    esp,0xc
c000fd1f:	ff b4 24 5c 01 00 00 	push   DWORD PTR [esp+0x15c]
c000fd26:	ff d0                	call   eax
c000fd28:	83 c4 10             	add    esp,0x10
c000fd2b:	e9 98 fe ff ff       	jmp    c000fbc8 <ACPI::open(int, int, void*)+0x1b8>
c000fd30:	83 ec 0c             	sub    esp,0xc
c000fd33:	8d 84 24 3c 01 00 00 	lea    eax,[esp+0x13c]
c000fd3a:	50                   	push   eax
c000fd3b:	e8 4c fc 00 00       	call   c001f98c <LinkedList<Device>::~LinkedList()>
c000fd40:	83 c4 10             	add    esp,0x10
c000fd43:	8b 1d b8 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025eb8
c000fd49:	83 ec 08             	sub    esp,0x8
c000fd4c:	6a 01                	push   0x1
c000fd4e:	68 3d 1a 02 c0       	push   0xc0021a3d
c000fd53:	e8 82 53 00 00       	call   c00150da <Thr::loadDLL(char const*, bool)>
c000fd58:	83 c4 10             	add    esp,0x10
c000fd5b:	83 ec 08             	sub    esp,0x8
c000fd5e:	53                   	push   ebx
c000fd5f:	50                   	push   eax
c000fd60:	e8 a6 55 00 00       	call   c001530b <Thr::executeDLL(unsigned long, void*)>
c000fd65:	83 c4 10             	add    esp,0x10
c000fd68:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c000fd6d:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c000fd73:	83 e0 04             	and    eax,0x4
c000fd76:	0f b6 c0             	movzx  eax,al
c000fd79:	85 c0                	test   eax,eax
c000fd7b:	0f 84 1b 01 00 00    	je     c000fe9c <ACPI::open(int, int, void*)+0x48c>
c000fd81:	83 ec 0c             	sub    esp,0xc
c000fd84:	68 5a 1a 02 c0       	push   0xc0021a5a
c000fd89:	e8 15 0e 00 00       	call   c0010ba3 <KeSetBootMessage(char const*)>
c000fd8e:	83 c4 10             	add    esp,0x10
c000fd91:	c7 84 24 3c 01 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x13c],0x114
c000fd9c:	83 ec 0c             	sub    esp,0xc
c000fd9f:	ff b4 24 48 01 00 00 	push   DWORD PTR [esp+0x148]
c000fda6:	e8 0b 7d ff ff       	call   c0007ab6 <malloc>
c000fdab:	83 c4 10             	add    esp,0x10
c000fdae:	89 c3                	mov    ebx,eax
c000fdb0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c000fdb5:	83 ec 04             	sub    esp,0x4
c000fdb8:	50                   	push   eax
c000fdb9:	68 77 1a 02 c0       	push   0xc0021a77
c000fdbe:	53                   	push   ebx
c000fdbf:	e8 7e b9 ff ff       	call   c000b742 <File::File(char const*, Process*)>
c000fdc4:	83 c4 10             	add    esp,0x10
c000fdc7:	89 9c 24 4c 01 00 00 	mov    DWORD PTR [esp+0x14c],ebx
c000fdce:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fdd6:	74 20                	je     c000fdf8 <ACPI::open(int, int, void*)+0x3e8>
c000fdd8:	83 ec 0c             	sub    esp,0xc
c000fddb:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000fde2:	e8 db bc ff ff       	call   c000bac2 <File::exists()>
c000fde7:	83 c4 10             	add    esp,0x10
c000fdea:	0f b6 c0             	movzx  eax,al
c000fded:	85 c0                	test   eax,eax
c000fdef:	74 07                	je     c000fdf8 <ACPI::open(int, int, void*)+0x3e8>
c000fdf1:	b0 01                	mov    al,0x1
c000fdf3:	eb 07                	jmp    c000fdfc <ACPI::open(int, int, void*)+0x3ec>
c000fdf5:	8d 76 00             	lea    esi,[esi+0x0]
c000fdf8:	b0 00                	mov    al,0x0
c000fdfa:	66 90                	xchg   ax,ax
c000fdfc:	0f b6 c0             	movzx  eax,al
c000fdff:	85 c0                	test   eax,eax
c000fe01:	74 25                	je     c000fe28 <ACPI::open(int, int, void*)+0x418>
c000fe03:	83 ec 08             	sub    esp,0x8
c000fe06:	6a 01                	push   0x1
c000fe08:	68 77 1a 02 c0       	push   0xc0021a77
c000fe0d:	e8 c8 52 00 00       	call   c00150da <Thr::loadDLL(char const*, bool)>
c000fe12:	83 c4 10             	add    esp,0x10
c000fe15:	83 ec 08             	sub    esp,0x8
c000fe18:	ff b4 24 88 01 00 00 	push   DWORD PTR [esp+0x188]
c000fe1f:	50                   	push   eax
c000fe20:	e8 e6 54 00 00       	call   c001530b <Thr::executeDLL(unsigned long, void*)>
c000fe25:	83 c4 10             	add    esp,0x10
c000fe28:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fe30:	74 2a                	je     c000fe5c <ACPI::open(int, int, void*)+0x44c>
c000fe32:	83 bc 24 4c 01 00 00 00 	cmp    DWORD PTR [esp+0x14c],0x0
c000fe3a:	74 20                	je     c000fe5c <ACPI::open(int, int, void*)+0x44c>
c000fe3c:	8b 84 24 4c 01 00 00 	mov    eax,DWORD PTR [esp+0x14c]
c000fe43:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe45:	83 c0 08             	add    eax,0x8
c000fe48:	8b 00                	mov    eax,DWORD PTR [eax]
c000fe4a:	83 ec 0c             	sub    esp,0xc
c000fe4d:	ff b4 24 58 01 00 00 	push   DWORD PTR [esp+0x158]
c000fe54:	ff d0                	call   eax
c000fe56:	83 c4 10             	add    esp,0x10
c000fe59:	8d 76 00             	lea    esi,[esi+0x0]
c000fe5c:	a1 28 8b 02 c0       	mov    eax,ds:0xc0028b28
c000fe61:	83 ec 08             	sub    esp,0x8
c000fe64:	68 94 1a 02 c0       	push   0xc0021a94
c000fe69:	50                   	push   eax
c000fe6a:	e8 c1 f1 ff ff       	call   c000f030 <findDataTable(unsigned char*, char*)>
c000fe6f:	83 c4 10             	add    esp,0x10
c000fe72:	89 84 24 48 01 00 00 	mov    DWORD PTR [esp+0x148],eax
c000fe79:	83 bc 24 48 01 00 00 00 	cmp    DWORD PTR [esp+0x148],0x0
c000fe81:	74 19                	je     c000fe9c <ACPI::open(int, int, void*)+0x48c>
c000fe83:	83 ec 08             	sub    esp,0x8
c000fe86:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c000fe8d:	ff b4 24 8c 01 00 00 	push   DWORD PTR [esp+0x18c]
c000fe94:	e8 13 fb ff ff       	call   c000f9ac <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c000fe99:	83 c4 10             	add    esp,0x10
c000fe9c:	b8 00 00 00 00       	mov    eax,0x0
c000fea1:	81 c4 70 01 00 00    	add    esp,0x170
c000fea7:	5b                   	pop    ebx
c000fea8:	5e                   	pop    esi
c000fea9:	5f                   	pop    edi
c000feaa:	c3                   	ret    
c000feab:	90                   	nop

c000feac <CPU::close(int, int, void*)>:
c000feac:	31 c0                	xor    eax,eax
c000feae:	c3                   	ret    
c000feaf:	90                   	nop

c000feb0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c000feb0:	60                   	pusha  
c000feb1:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000feb5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000feb9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000febd:	9c                   	pushf  
c000febe:	fa                   	cli    
c000febf:	0f 09                	wbinvd 
c000fec1:	0f 30                	wrmsr  
c000fec3:	9d                   	popf   
c000fec4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000fec8:	89 02                	mov    DWORD PTR [edx],eax
c000feca:	61                   	popa   
c000fecb:	c3                   	ret    

c000fecc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c000fecc:	60                   	pusha  
c000fecd:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fed1:	9c                   	pushf  
c000fed2:	fa                   	cli    
c000fed3:	0f 09                	wbinvd 
c000fed5:	31 c0                	xor    eax,eax
c000fed7:	31 d2                	xor    edx,edx
c000fed9:	0f 32                	rdmsr  
c000fedb:	9d                   	popf   
c000fedc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000fee0:	89 02                	mov    DWORD PTR [edx],eax
c000fee2:	61                   	popa   
c000fee3:	c3                   	ret    

c000fee4 <CPU::AMD_K6_writeback(int, int, int)>:
c000fee4:	56                   	push   esi
c000fee5:	53                   	push   ebx
c000fee6:	83 ec 10             	sub    esp,0x10
c000fee9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000feed:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c000fef2:	75 5d                	jne    c000ff51 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000fef4:	83 f8 08             	cmp    eax,0x8
c000fef7:	75 09                	jne    c000ff02 <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c000fef9:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c000fefe:	7e 13                	jle    c000ff13 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ff00:	eb 30                	jmp    c000ff32 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ff02:	83 f8 06             	cmp    eax,0x6
c000ff05:	7c 4a                	jl     c000ff51 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff07:	83 f8 07             	cmp    eax,0x7
c000ff0a:	7e 07                	jle    c000ff13 <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c000ff0c:	83 f8 09             	cmp    eax,0x9
c000ff0f:	74 21                	je     c000ff32 <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c000ff11:	eb 3e                	jmp    c000ff51 <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c000ff13:	89 e6                	mov    esi,esp
c000ff15:	8b 1d dc 5e 02 c0    	mov    ebx,DWORD PTR ds:0xc0025edc
c000ff1b:	56                   	push   esi
c000ff1c:	c1 eb 15             	shr    ebx,0x15
c000ff1f:	68 82 00 00 c0       	push   0xc0000082
c000ff24:	83 e3 7e             	and    ebx,0x7e
c000ff27:	e8 a0 ff ff ff       	call   c000fecc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ff2c:	56                   	push   esi
c000ff2d:	6a 00                	push   0x0
c000ff2f:	53                   	push   ebx
c000ff30:	eb 12                	jmp    c000ff44 <CPU::AMD_K6_writeback(int, int, int)+0x60>
c000ff32:	89 e3                	mov    ebx,esp
c000ff34:	53                   	push   ebx
c000ff35:	68 82 00 00 c0       	push   0xc0000082
c000ff3a:	e8 8d ff ff ff       	call   c000fecc <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c000ff3f:	53                   	push   ebx
c000ff40:	6a 00                	push   0x0
c000ff42:	6a 00                	push   0x0
c000ff44:	68 82 00 00 c0       	push   0xc0000082
c000ff49:	e8 62 ff ff ff       	call   c000feb0 <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c000ff4e:	83 c4 18             	add    esp,0x18
c000ff51:	83 c4 10             	add    esp,0x10
c000ff54:	5b                   	pop    ebx
c000ff55:	5e                   	pop    esi
c000ff56:	c3                   	ret    
c000ff57:	90                   	nop

c000ff58 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c000ff58:	55                   	push   ebp
c000ff59:	57                   	push   edi
c000ff5a:	56                   	push   esi
c000ff5b:	53                   	push   ebx
c000ff5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff60:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ff64:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ff68:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c000ff6c:	39 05 58 30 02 c0    	cmp    DWORD PTR ds:0xc0023058,eax
c000ff72:	75 23                	jne    c000ff97 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c000ff74:	a1 8c 8d 02 c0       	mov    eax,ds:0xc0028d8c
c000ff79:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000ff7d:	89 06                	mov    DWORD PTR [esi],eax
c000ff7f:	a1 88 8d 02 c0       	mov    eax,ds:0xc0028d88
c000ff84:	89 07                	mov    DWORD PTR [edi],eax
c000ff86:	a1 84 8d 02 c0       	mov    eax,ds:0xc0028d84
c000ff8b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000ff8e:	a1 80 8d 02 c0       	mov    eax,ds:0xc0028d80
c000ff93:	89 02                	mov    DWORD PTR [edx],eax
c000ff95:	eb 3f                	jmp    c000ffd6 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c000ff97:	31 c9                	xor    ecx,ecx
c000ff99:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ff9d:	0f a2                	cpuid  
c000ff9f:	89 06                	mov    DWORD PTR [esi],eax
c000ffa1:	89 1f                	mov    DWORD PTR [edi],ebx
c000ffa3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffa7:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c000ffaa:	89 10                	mov    DWORD PTR [eax],edx
c000ffac:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000ffb0:	a3 58 30 02 c0       	mov    ds:0xc0023058,eax
c000ffb5:	8b 06                	mov    eax,DWORD PTR [esi]
c000ffb7:	a3 8c 8d 02 c0       	mov    ds:0xc0028d8c,eax
c000ffbc:	8b 07                	mov    eax,DWORD PTR [edi]
c000ffbe:	a3 88 8d 02 c0       	mov    ds:0xc0028d88,eax
c000ffc3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000ffc6:	a3 84 8d 02 c0       	mov    ds:0xc0028d84,eax
c000ffcb:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ffcf:	8b 00                	mov    eax,DWORD PTR [eax]
c000ffd1:	a3 80 8d 02 c0       	mov    ds:0xc0028d80,eax
c000ffd6:	5b                   	pop    ebx
c000ffd7:	5e                   	pop    esi
c000ffd8:	5f                   	pop    edi
c000ffd9:	5d                   	pop    ebp
c000ffda:	c3                   	ret    
c000ffdb:	90                   	nop

c000ffdc <CPU::cpuidCheckEDX(unsigned int)>:
c000ffdc:	83 ec 10             	sub    esp,0x10
c000ffdf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffe3:	50                   	push   eax
c000ffe4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffe8:	50                   	push   eax
c000ffe9:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ffed:	50                   	push   eax
c000ffee:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000fff2:	50                   	push   eax
c000fff3:	6a 01                	push   0x1
c000fff5:	e8 5e ff ff ff       	call   c000ff58 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000fffa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000fffe:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0010002:	0f 95 c0             	setne  al
c0010005:	83 c4 24             	add    esp,0x24
c0010008:	c3                   	ret    
c0010009:	90                   	nop

c001000a <CPU::cpuidCheckECX(unsigned int)>:
c001000a:	83 ec 10             	sub    esp,0x10
c001000d:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010011:	50                   	push   eax
c0010012:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010016:	50                   	push   eax
c0010017:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001001b:	50                   	push   eax
c001001c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010020:	50                   	push   eax
c0010021:	6a 01                	push   0x1
c0010023:	e8 30 ff ff ff       	call   c000ff58 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010028:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001002c:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0010030:	0f 95 c0             	setne  al
c0010033:	83 c4 24             	add    esp,0x24
c0010036:	c3                   	ret    
c0010037:	90                   	nop

c0010038 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0010038:	83 ec 10             	sub    esp,0x10
c001003b:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001003f:	50                   	push   eax
c0010040:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010044:	50                   	push   eax
c0010045:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010049:	50                   	push   eax
c001004a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001004e:	50                   	push   eax
c001004f:	6a 07                	push   0x7
c0010051:	e8 02 ff ff ff       	call   c000ff58 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010056:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001005a:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c001005e:	0f 95 c0             	setne  al
c0010061:	83 c4 24             	add    esp,0x24
c0010064:	c3                   	ret    
c0010065:	90                   	nop

c0010066 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0010066:	83 ec 10             	sub    esp,0x10
c0010069:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001006d:	50                   	push   eax
c001006e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010072:	50                   	push   eax
c0010073:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0010077:	50                   	push   eax
c0010078:	8d 44 24 0c          	lea    eax,[esp+0xc]
c001007c:	50                   	push   eax
c001007d:	6a 07                	push   0x7
c001007f:	e8 d4 fe ff ff       	call   c000ff58 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010084:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0010088:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c001008c:	0f 95 c0             	setne  al
c001008f:	83 c4 24             	add    esp,0x24
c0010092:	c3                   	ret    
c0010093:	90                   	nop

c0010094 <CPU::CPU()>:
c0010094:	83 ec 0c             	sub    esp,0xc
c0010097:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001009b:	83 ec 08             	sub    esp,0x8
c001009e:	68 b9 1b 02 c0       	push   0xc0021bb9
c00100a3:	50                   	push   eax
c00100a4:	e8 39 c7 ff ff       	call   c000c7e2 <Device::Device(char const*)>
c00100a9:	83 c4 10             	add    esp,0x10
c00100ac:	ba 4c 1c 02 c0       	mov    edx,0xc0021c4c
c00100b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100b5:	89 10                	mov    DWORD PTR [eax],edx
c00100b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100bb:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c00100c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100c9:	05 78 01 00 00       	add    eax,0x178
c00100ce:	83 ec 0c             	sub    esp,0xc
c00100d1:	50                   	push   eax
c00100d2:	e8 85 72 ff ff       	call   c000735c <GDT::GDT()>
c00100d7:	83 c4 10             	add    esp,0x10
c00100da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100de:	05 7c 09 00 00       	add    eax,0x97c
c00100e3:	83 ec 0c             	sub    esp,0xc
c00100e6:	50                   	push   eax
c00100e7:	e8 c0 74 ff ff       	call   c00075ac <IDT::IDT()>
c00100ec:	83 c4 10             	add    esp,0x10
c00100ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00100f3:	05 7c 11 00 00       	add    eax,0x117c
c00100f8:	83 ec 0c             	sub    esp,0xc
c00100fb:	50                   	push   eax
c00100fc:	e8 43 8e ff ff       	call   c0008f44 <TSS::TSS()>
c0010101:	83 c4 10             	add    esp,0x10
c0010104:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010108:	c6 80 90 11 00 00 00 	mov    BYTE PTR [eax+0x1190],0x0
c001010f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010113:	c7 80 10 01 00 00 11 00 00 00 	mov    DWORD PTR [eax+0x110],0x11
c001011d:	90                   	nop
c001011e:	83 c4 0c             	add    esp,0xc
c0010121:	c3                   	ret    

c0010122 <CPU::displayFeatures()>:
c0010122:	c3                   	ret    
c0010123:	90                   	nop

c0010124 <CPU::detectFeatures()>:
c0010124:	55                   	push   ebp
c0010125:	57                   	push   edi
c0010126:	56                   	push   esi
c0010127:	53                   	push   ebx
c0010128:	83 ec 30             	sub    esp,0x30
c001012b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001012f:	81 a3 8c 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebx+0x118c],0xfff80700
c0010139:	c6 83 90 11 00 00 01 	mov    BYTE PTR [ebx+0x1190],0x1
c0010140:	8d ab 5f 01 00 00    	lea    ebp,[ebx+0x15f]
c0010146:	6a 0d                	push   0xd
c0010148:	6a 00                	push   0x0
c001014a:	55                   	push   ebp
c001014b:	e8 a0 03 ff ff       	call   c00004f0 <memset>
c0010150:	83 c4 10             	add    esp,0x10
c0010153:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010158:	f6 80 6c 01 00 00 02 	test   BYTE PTR [eax+0x16c],0x2
c001015f:	0f 84 db 05 00 00    	je     c0010740 <CPU::detectFeatures()+0x61c>
c0010165:	83 ec 0c             	sub    esp,0xc
c0010168:	89 ef                	mov    edi,ebp
c001016a:	6a 10                	push   0x10
c001016c:	e8 6b fe ff ff       	call   c000ffdc <CPU::cpuidCheckEDX(unsigned int)>
c0010171:	83 e0 01             	and    eax,0x1
c0010174:	8d 14 00             	lea    edx,[eax+eax*1]
c0010177:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c001017d:	83 e0 fd             	and    eax,0xfffffffd
c0010180:	09 d0                	or     eax,edx
c0010182:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010188:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c001018f:	e8 48 fe ff ff       	call   c000ffdc <CPU::cpuidCheckEDX(unsigned int)>
c0010194:	83 e0 01             	and    eax,0x1
c0010197:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c001019e:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101a4:	83 e0 fb             	and    eax,0xfffffffb
c00101a7:	09 d0                	or     eax,edx
c00101a9:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101af:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00101b6:	e8 21 fe ff ff       	call   c000ffdc <CPU::cpuidCheckEDX(unsigned int)>
c00101bb:	83 e0 01             	and    eax,0x1
c00101be:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c00101c5:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101cb:	83 e0 f7             	and    eax,0xfffffff7
c00101ce:	09 d0                	or     eax,edx
c00101d0:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101d6:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00101dd:	e8 fa fd ff ff       	call   c000ffdc <CPU::cpuidCheckEDX(unsigned int)>
c00101e2:	83 e0 01             	and    eax,0x1
c00101e5:	c1 e0 04             	shl    eax,0x4
c00101e8:	89 c2                	mov    edx,eax
c00101ea:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c00101f0:	83 e0 ef             	and    eax,0xffffffef
c00101f3:	09 d0                	or     eax,edx
c00101f5:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c00101fb:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c0010202:	e8 d5 fd ff ff       	call   c000ffdc <CPU::cpuidCheckEDX(unsigned int)>
c0010207:	83 e0 01             	and    eax,0x1
c001020a:	c1 e0 05             	shl    eax,0x5
c001020d:	89 c2                	mov    edx,eax
c001020f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010215:	83 e0 df             	and    eax,0xffffffdf
c0010218:	09 d0                	or     eax,edx
c001021a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010220:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0010227:	e8 b0 fd ff ff       	call   c000ffdc <CPU::cpuidCheckEDX(unsigned int)>
c001022c:	83 e0 01             	and    eax,0x1
c001022f:	8d 14 00             	lea    edx,[eax+eax*1]
c0010232:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010238:	83 e0 fd             	and    eax,0xfffffffd
c001023b:	09 d0                	or     eax,edx
c001023d:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c0010243:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001024a:	e8 8d fd ff ff       	call   c000ffdc <CPU::cpuidCheckEDX(unsigned int)>
c001024f:	83 e0 01             	and    eax,0x1
c0010252:	c1 e0 06             	shl    eax,0x6
c0010255:	89 c2                	mov    edx,eax
c0010257:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001025d:	83 e0 bf             	and    eax,0xffffffbf
c0010260:	09 d0                	or     eax,edx
c0010262:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010268:	58                   	pop    eax
c0010269:	8d 44 24 28          	lea    eax,[esp+0x28]
c001026d:	50                   	push   eax
c001026e:	8d 44 24 28          	lea    eax,[esp+0x28]
c0010272:	50                   	push   eax
c0010273:	8d 74 24 28          	lea    esi,[esp+0x28]
c0010277:	56                   	push   esi
c0010278:	8d 44 24 28          	lea    eax,[esp+0x28]
c001027c:	50                   	push   eax
c001027d:	6a 00                	push   0x0
c001027f:	e8 d4 fc ff ff       	call   c000ff58 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010284:	b8 04 00 00 00       	mov    eax,0x4
c0010289:	89 c1                	mov    ecx,eax
c001028b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001028d:	8d bb 63 01 00 00    	lea    edi,[ebx+0x163]
c0010293:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0010297:	89 c1                	mov    ecx,eax
c0010299:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001029b:	8d bb 67 01 00 00    	lea    edi,[ebx+0x167]
c00102a1:	8d 74 24 38          	lea    esi,[esp+0x38]
c00102a5:	89 c1                	mov    ecx,eax
c00102a7:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00102a9:	83 c4 18             	add    esp,0x18
c00102ac:	68 c8 1a 02 c0       	push   0xc0021ac8
c00102b1:	55                   	push   ebp
c00102b2:	e8 99 04 ff ff       	call   c0000750 <strcmp>
c00102b7:	83 c4 10             	add    esp,0x10
c00102ba:	85 c0                	test   eax,eax
c00102bc:	75 0f                	jne    c00102cd <CPU::detectFeatures()+0x1a9>
c00102be:	c7 83 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebx+0x158],0x2
c00102c8:	e9 22 02 00 00       	jmp    c00104ef <CPU::detectFeatures()+0x3cb>
c00102cd:	50                   	push   eax
c00102ce:	50                   	push   eax
c00102cf:	68 d5 1a 02 c0       	push   0xc0021ad5
c00102d4:	55                   	push   ebp
c00102d5:	e8 76 04 ff ff       	call   c0000750 <strcmp>
c00102da:	83 c4 10             	add    esp,0x10
c00102dd:	85 c0                	test   eax,eax
c00102df:	74 dd                	je     c00102be <CPU::detectFeatures()+0x19a>
c00102e1:	50                   	push   eax
c00102e2:	50                   	push   eax
c00102e3:	68 e2 1a 02 c0       	push   0xc0021ae2
c00102e8:	55                   	push   ebp
c00102e9:	e8 62 04 ff ff       	call   c0000750 <strcmp>
c00102ee:	83 c4 10             	add    esp,0x10
c00102f1:	85 c0                	test   eax,eax
c00102f3:	74 2a                	je     c001031f <CPU::detectFeatures()+0x1fb>
c00102f5:	50                   	push   eax
c00102f6:	50                   	push   eax
c00102f7:	68 ef 1a 02 c0       	push   0xc0021aef
c00102fc:	55                   	push   ebp
c00102fd:	e8 4e 04 ff ff       	call   c0000750 <strcmp>
c0010302:	83 c4 10             	add    esp,0x10
c0010305:	85 c0                	test   eax,eax
c0010307:	74 16                	je     c001031f <CPU::detectFeatures()+0x1fb>
c0010309:	50                   	push   eax
c001030a:	50                   	push   eax
c001030b:	68 fc 1a 02 c0       	push   0xc0021afc
c0010310:	55                   	push   ebp
c0010311:	e8 3a 04 ff ff       	call   c0000750 <strcmp>
c0010316:	83 c4 10             	add    esp,0x10
c0010319:	85 c0                	test   eax,eax
c001031b:	74 48                	je     c0010365 <CPU::detectFeatures()+0x241>
c001031d:	eb 0f                	jmp    c001032e <CPU::detectFeatures()+0x20a>
c001031f:	c7 83 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebx+0x158],0x4
c0010329:	e9 c1 01 00 00       	jmp    c00104ef <CPU::detectFeatures()+0x3cb>
c001032e:	50                   	push   eax
c001032f:	50                   	push   eax
c0010330:	68 09 1b 02 c0       	push   0xc0021b09
c0010335:	55                   	push   ebp
c0010336:	e8 15 04 ff ff       	call   c0000750 <strcmp>
c001033b:	83 c4 10             	add    esp,0x10
c001033e:	85 c0                	test   eax,eax
c0010340:	74 23                	je     c0010365 <CPU::detectFeatures()+0x241>
c0010342:	57                   	push   edi
c0010343:	57                   	push   edi
c0010344:	68 16 1b 02 c0       	push   0xc0021b16
c0010349:	55                   	push   ebp
c001034a:	e8 01 04 ff ff       	call   c0000750 <strcmp>
c001034f:	83 c4 10             	add    esp,0x10
c0010352:	85 c0                	test   eax,eax
c0010354:	75 1e                	jne    c0010374 <CPU::detectFeatures()+0x250>
c0010356:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010360:	e9 8a 01 00 00       	jmp    c00104ef <CPU::detectFeatures()+0x3cb>
c0010365:	c7 83 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebx+0x158],0x5
c001036f:	e9 7b 01 00 00       	jmp    c00104ef <CPU::detectFeatures()+0x3cb>
c0010374:	56                   	push   esi
c0010375:	56                   	push   esi
c0010376:	68 23 1b 02 c0       	push   0xc0021b23
c001037b:	55                   	push   ebp
c001037c:	e8 cf 03 ff ff       	call   c0000750 <strcmp>
c0010381:	83 c4 10             	add    esp,0x10
c0010384:	85 c0                	test   eax,eax
c0010386:	75 0f                	jne    c0010397 <CPU::detectFeatures()+0x273>
c0010388:	c7 83 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebx+0x158],0x3
c0010392:	e9 58 01 00 00       	jmp    c00104ef <CPU::detectFeatures()+0x3cb>
c0010397:	51                   	push   ecx
c0010398:	51                   	push   ecx
c0010399:	68 e2 1a 02 c0       	push   0xc0021ae2
c001039e:	55                   	push   ebp
c001039f:	e8 ac 03 ff ff       	call   c0000750 <strcmp>
c00103a4:	83 c4 10             	add    esp,0x10
c00103a7:	85 c0                	test   eax,eax
c00103a9:	75 0f                	jne    c00103ba <CPU::detectFeatures()+0x296>
c00103ab:	c7 83 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebx+0x158],0x6
c00103b5:	e9 35 01 00 00       	jmp    c00104ef <CPU::detectFeatures()+0x3cb>
c00103ba:	52                   	push   edx
c00103bb:	52                   	push   edx
c00103bc:	68 30 1b 02 c0       	push   0xc0021b30
c00103c1:	55                   	push   ebp
c00103c2:	e8 89 03 ff ff       	call   c0000750 <strcmp>
c00103c7:	83 c4 10             	add    esp,0x10
c00103ca:	85 c0                	test   eax,eax
c00103cc:	75 0f                	jne    c00103dd <CPU::detectFeatures()+0x2b9>
c00103ce:	c7 83 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebx+0x158],0x7
c00103d8:	e9 12 01 00 00       	jmp    c00104ef <CPU::detectFeatures()+0x3cb>
c00103dd:	50                   	push   eax
c00103de:	50                   	push   eax
c00103df:	68 3d 1b 02 c0       	push   0xc0021b3d
c00103e4:	55                   	push   ebp
c00103e5:	e8 66 03 ff ff       	call   c0000750 <strcmp>
c00103ea:	83 c4 10             	add    esp,0x10
c00103ed:	85 c0                	test   eax,eax
c00103ef:	75 0f                	jne    c0010400 <CPU::detectFeatures()+0x2dc>
c00103f1:	c7 83 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebx+0x158],0x8
c00103fb:	e9 ef 00 00 00       	jmp    c00104ef <CPU::detectFeatures()+0x3cb>
c0010400:	50                   	push   eax
c0010401:	50                   	push   eax
c0010402:	68 4a 1b 02 c0       	push   0xc0021b4a
c0010407:	55                   	push   ebp
c0010408:	e8 43 03 ff ff       	call   c0000750 <strcmp>
c001040d:	83 c4 10             	add    esp,0x10
c0010410:	85 c0                	test   eax,eax
c0010412:	75 0f                	jne    c0010423 <CPU::detectFeatures()+0x2ff>
c0010414:	c7 83 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebx+0x158],0x9
c001041e:	e9 cc 00 00 00       	jmp    c00104ef <CPU::detectFeatures()+0x3cb>
c0010423:	50                   	push   eax
c0010424:	50                   	push   eax
c0010425:	68 57 1b 02 c0       	push   0xc0021b57
c001042a:	55                   	push   ebp
c001042b:	e8 20 03 ff ff       	call   c0000750 <strcmp>
c0010430:	83 c4 10             	add    esp,0x10
c0010433:	85 c0                	test   eax,eax
c0010435:	75 0f                	jne    c0010446 <CPU::detectFeatures()+0x322>
c0010437:	c7 83 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebx+0x158],0xa
c0010441:	e9 a9 00 00 00       	jmp    c00104ef <CPU::detectFeatures()+0x3cb>
c0010446:	50                   	push   eax
c0010447:	50                   	push   eax
c0010448:	68 64 1b 02 c0       	push   0xc0021b64
c001044d:	55                   	push   ebp
c001044e:	e8 fd 02 ff ff       	call   c0000750 <strcmp>
c0010453:	83 c4 10             	add    esp,0x10
c0010456:	85 c0                	test   eax,eax
c0010458:	75 0f                	jne    c0010469 <CPU::detectFeatures()+0x345>
c001045a:	c7 83 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebx+0x158],0xb
c0010464:	e9 86 00 00 00       	jmp    c00104ef <CPU::detectFeatures()+0x3cb>
c0010469:	50                   	push   eax
c001046a:	50                   	push   eax
c001046b:	68 71 1b 02 c0       	push   0xc0021b71
c0010470:	55                   	push   ebp
c0010471:	e8 da 02 ff ff       	call   c0000750 <strcmp>
c0010476:	83 c4 10             	add    esp,0x10
c0010479:	85 c0                	test   eax,eax
c001047b:	75 0c                	jne    c0010489 <CPU::detectFeatures()+0x365>
c001047d:	c7 83 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebx+0x158],0xc
c0010487:	eb 66                	jmp    c00104ef <CPU::detectFeatures()+0x3cb>
c0010489:	50                   	push   eax
c001048a:	50                   	push   eax
c001048b:	68 7e 1b 02 c0       	push   0xc0021b7e
c0010490:	55                   	push   ebp
c0010491:	e8 ba 02 ff ff       	call   c0000750 <strcmp>
c0010496:	83 c4 10             	add    esp,0x10
c0010499:	85 c0                	test   eax,eax
c001049b:	75 0c                	jne    c00104a9 <CPU::detectFeatures()+0x385>
c001049d:	c7 83 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebx+0x158],0xd
c00104a7:	eb 46                	jmp    c00104ef <CPU::detectFeatures()+0x3cb>
c00104a9:	57                   	push   edi
c00104aa:	57                   	push   edi
c00104ab:	68 8b 1b 02 c0       	push   0xc0021b8b
c00104b0:	55                   	push   ebp
c00104b1:	e8 9a 02 ff ff       	call   c0000750 <strcmp>
c00104b6:	83 c4 10             	add    esp,0x10
c00104b9:	85 c0                	test   eax,eax
c00104bb:	74 e0                	je     c001049d <CPU::detectFeatures()+0x379>
c00104bd:	56                   	push   esi
c00104be:	56                   	push   esi
c00104bf:	68 98 1b 02 c0       	push   0xc0021b98
c00104c4:	55                   	push   ebp
c00104c5:	e8 86 02 ff ff       	call   c0000750 <strcmp>
c00104ca:	83 c4 10             	add    esp,0x10
c00104cd:	85 c0                	test   eax,eax
c00104cf:	74 cc                	je     c001049d <CPU::detectFeatures()+0x379>
c00104d1:	51                   	push   ecx
c00104d2:	51                   	push   ecx
c00104d3:	68 a5 1b 02 c0       	push   0xc0021ba5
c00104d8:	55                   	push   ebp
c00104d9:	e8 72 02 ff ff       	call   c0000750 <strcmp>
c00104de:	83 c4 10             	add    esp,0x10
c00104e1:	85 c0                	test   eax,eax
c00104e3:	74 b8                	je     c001049d <CPU::detectFeatures()+0x379>
c00104e5:	c7 83 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x158],0x0
c00104ef:	83 7c 24 10 06       	cmp    DWORD PTR [esp+0x10],0x6
c00104f4:	0f 86 be 00 00 00    	jbe    c00105b8 <CPU::detectFeatures()+0x494>
c00104fa:	83 ec 0c             	sub    esp,0xc
c00104fd:	68 80 00 00 00       	push   0x80
c0010502:	e8 31 fb ff ff       	call   c0010038 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010507:	83 e0 01             	and    eax,0x1
c001050a:	c1 e0 06             	shl    eax,0x6
c001050d:	89 c2                	mov    edx,eax
c001050f:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010515:	83 e0 bf             	and    eax,0xffffffbf
c0010518:	09 d0                	or     eax,edx
c001051a:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010520:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c0010527:	e8 0c fb ff ff       	call   c0010038 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c001052c:	83 e0 01             	and    eax,0x1
c001052f:	c1 e0 04             	shl    eax,0x4
c0010532:	89 c2                	mov    edx,eax
c0010534:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c001053a:	83 e0 ef             	and    eax,0xffffffef
c001053d:	09 d0                	or     eax,edx
c001053f:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010545:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001054c:	e8 e7 fa ff ff       	call   c0010038 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0010551:	89 c2                	mov    edx,eax
c0010553:	8a 83 8c 11 00 00    	mov    al,BYTE PTR [ebx+0x118c]
c0010559:	c1 e2 07             	shl    edx,0x7
c001055c:	83 e0 7f             	and    eax,0x7f
c001055f:	09 d0                	or     eax,edx
c0010561:	88 83 8c 11 00 00    	mov    BYTE PTR [ebx+0x118c],al
c0010567:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001056e:	e8 f3 fa ff ff       	call   c0010066 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0010573:	83 e0 01             	and    eax,0x1
c0010576:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c001057d:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010583:	83 e0 f7             	and    eax,0xfffffff7
c0010586:	09 d0                	or     eax,edx
c0010588:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c001058e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0010595:	e8 cc fa ff ff       	call   c0010066 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001059a:	83 c4 10             	add    esp,0x10
c001059d:	83 e0 01             	and    eax,0x1
c00105a0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00105a7:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00105ad:	83 e0 fb             	and    eax,0xfffffffb
c00105b0:	09 d0                	or     eax,edx
c00105b2:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00105b8:	83 ec 0c             	sub    esp,0xc
c00105bb:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105bf:	50                   	push   eax
c00105c0:	8d 44 24 28          	lea    eax,[esp+0x28]
c00105c4:	50                   	push   eax
c00105c5:	8d 7c 24 28          	lea    edi,[esp+0x28]
c00105c9:	57                   	push   edi
c00105ca:	8d 74 24 28          	lea    esi,[esp+0x28]
c00105ce:	56                   	push   esi
c00105cf:	6a 01                	push   0x1
c00105d1:	e8 82 f9 ff ff       	call   c000ff58 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00105d6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00105da:	8a 93 5c 01 00 00    	mov    dl,BYTE PTR [ebx+0x15c]
c00105e0:	89 c1                	mov    ecx,eax
c00105e2:	83 e2 f0             	and    edx,0xfffffff0
c00105e5:	83 e1 0f             	and    ecx,0xf
c00105e8:	09 ca                	or     edx,ecx
c00105ea:	88 93 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],dl
c00105f0:	89 c2                	mov    edx,eax
c00105f2:	c1 ea 04             	shr    edx,0x4
c00105f5:	83 e2 0f             	and    edx,0xf
c00105f8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00105fc:	89 d1                	mov    ecx,edx
c00105fe:	83 c4 20             	add    esp,0x20
c0010601:	8b 93 5c 01 00 00    	mov    edx,DWORD PTR [ebx+0x15c]
c0010607:	c1 e1 06             	shl    ecx,0x6
c001060a:	81 e2 3f c0 ff ff    	and    edx,0xffffc03f
c0010610:	09 ca                	or     edx,ecx
c0010612:	66 89 93 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],dx
c0010619:	89 c2                	mov    edx,eax
c001061b:	8a 8b 5d 01 00 00    	mov    cl,BYTE PTR [ebx+0x15d]
c0010621:	c1 ea 08             	shr    edx,0x8
c0010624:	83 e1 3f             	and    ecx,0x3f
c0010627:	83 e2 0f             	and    edx,0xf
c001062a:	89 d5                	mov    ebp,edx
c001062c:	83 e5 03             	and    ebp,0x3
c001062f:	c1 e5 06             	shl    ebp,0x6
c0010632:	09 e9                	or     ecx,ebp
c0010634:	89 d5                	mov    ebp,edx
c0010636:	88 8b 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],cl
c001063c:	c1 ed 02             	shr    ebp,0x2
c001063f:	8a 8b 5e 01 00 00    	mov    cl,BYTE PTR [ebx+0x15e]
c0010645:	83 e1 c0             	and    ecx,0xffffffc0
c0010648:	09 e9                	or     ecx,ebp
c001064a:	89 c5                	mov    ebp,eax
c001064c:	88 8b 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],cl
c0010652:	c1 ed 08             	shr    ebp,0x8
c0010655:	8a 8b 5c 01 00 00    	mov    cl,BYTE PTR [ebx+0x15c]
c001065b:	83 e5 30             	and    ebp,0x30
c001065e:	83 e1 cf             	and    ecx,0xffffffcf
c0010661:	09 e9                	or     ecx,ebp
c0010663:	83 fa 06             	cmp    edx,0x6
c0010666:	88 8b 5c 01 00 00    	mov    BYTE PTR [ebx+0x15c],cl
c001066c:	74 05                	je     c0010673 <CPU::detectFeatures()+0x54f>
c001066e:	83 fa 0f             	cmp    edx,0xf
c0010671:	75 64                	jne    c00106d7 <CPU::detectFeatures()+0x5b3>
c0010673:	8b ab 5c 01 00 00    	mov    ebp,DWORD PTR [ebx+0x15c]
c0010679:	89 c1                	mov    ecx,eax
c001067b:	81 e5 3f c0 ff ff    	and    ebp,0xffffc03f
c0010681:	c1 e9 10             	shr    ecx,0x10
c0010684:	c1 e1 04             	shl    ecx,0x4
c0010687:	0b 4c 24 0c          	or     ecx,DWORD PTR [esp+0xc]
c001068b:	0f b6 c9             	movzx  ecx,cl
c001068e:	c1 e1 06             	shl    ecx,0x6
c0010691:	09 e9                	or     ecx,ebp
c0010693:	83 fa 0f             	cmp    edx,0xf
c0010696:	66 89 8b 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],cx
c001069d:	75 38                	jne    c00106d7 <CPU::detectFeatures()+0x5b3>
c001069f:	c1 e8 14             	shr    eax,0x14
c00106a2:	83 c0 0f             	add    eax,0xf
c00106a5:	0f b6 c0             	movzx  eax,al
c00106a8:	89 c2                	mov    edx,eax
c00106aa:	c1 e8 02             	shr    eax,0x2
c00106ad:	83 e2 03             	and    edx,0x3
c00106b0:	89 d1                	mov    ecx,edx
c00106b2:	8a 93 5d 01 00 00    	mov    dl,BYTE PTR [ebx+0x15d]
c00106b8:	c1 e1 06             	shl    ecx,0x6
c00106bb:	83 e2 3f             	and    edx,0x3f
c00106be:	09 ca                	or     edx,ecx
c00106c0:	88 93 5d 01 00 00    	mov    BYTE PTR [ebx+0x15d],dl
c00106c6:	8a 93 5e 01 00 00    	mov    dl,BYTE PTR [ebx+0x15e]
c00106cc:	83 e2 c0             	and    edx,0xffffffc0
c00106cf:	09 d0                	or     eax,edx
c00106d1:	88 83 5e 01 00 00    	mov    BYTE PTR [ebx+0x15e],al
c00106d7:	83 ec 0c             	sub    esp,0xc
c00106da:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c00106e0:	83 c8 07             	or     eax,0x7
c00106e3:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c00106e9:	8d 44 24 28          	lea    eax,[esp+0x28]
c00106ed:	50                   	push   eax
c00106ee:	8d 6c 24 28          	lea    ebp,[esp+0x28]
c00106f2:	55                   	push   ebp
c00106f3:	57                   	push   edi
c00106f4:	56                   	push   esi
c00106f5:	68 00 00 00 80       	push   0x80000000
c00106fa:	e8 59 f8 ff ff       	call   c000ff58 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00106ff:	83 c4 20             	add    esp,0x20
c0010702:	81 7c 24 10 00 00 00 80 	cmp    DWORD PTR [esp+0x10],0x80000000
c001070a:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001070e:	76 1e                	jbe    c001072e <CPU::detectFeatures()+0x60a>
c0010710:	83 ec 0c             	sub    esp,0xc
c0010713:	50                   	push   eax
c0010714:	55                   	push   ebp
c0010715:	57                   	push   edi
c0010716:	56                   	push   esi
c0010717:	68 01 00 00 80       	push   0x80000001
c001071c:	e8 37 f8 ff ff       	call   c000ff58 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0010721:	81 a3 8c 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebx+0x118c],0xfffe5fff
c001072b:	83 c4 20             	add    esp,0x20
c001072e:	52                   	push   edx
c001072f:	52                   	push   edx
c0010730:	68 b1 1b 02 c0       	push   0xc0021bb1
c0010735:	53                   	push   ebx
c0010736:	e8 99 c0 ff ff       	call   c000c7d4 <Device::setName(char const*)>
c001073b:	83 c4 10             	add    esp,0x10
c001073e:	eb 69                	jmp    c00107a9 <CPU::detectFeatures()+0x685>
c0010740:	50                   	push   eax
c0010741:	50                   	push   eax
c0010742:	68 16 1b 02 c0       	push   0xc0021b16
c0010747:	55                   	push   ebp
c0010748:	e8 f3 fe fe ff       	call   c0000640 <strcpy>
c001074d:	c7 83 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x158],0x1
c0010757:	e8 67 fa fe ff       	call   c00001c3 <is486>
c001075c:	83 c4 10             	add    esp,0x10
c001075f:	85 c0                	test   eax,eax
c0010761:	8a 83 8d 11 00 00    	mov    al,BYTE PTR [ebx+0x118d]
c0010767:	74 1f                	je     c0010788 <CPU::detectFeatures()+0x664>
c0010769:	83 c8 07             	or     eax,0x7
c001076c:	88 83 8d 11 00 00    	mov    BYTE PTR [ebx+0x118d],al
c0010772:	0f 20 c0             	mov    eax,cr0
c0010775:	83 e0 14             	and    eax,0x14
c0010778:	83 f8 04             	cmp    eax,0x4
c001077b:	75 10                	jne    c001078d <CPU::detectFeatures()+0x669>
c001077d:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c0010783:	83 e0 fd             	and    eax,0xfffffffd
c0010786:	eb 1b                	jmp    c00107a3 <CPU::detectFeatures()+0x67f>
c0010788:	83 e0 f8             	and    eax,0xfffffff8
c001078b:	eb df                	jmp    c001076c <CPU::detectFeatures()+0x648>
c001078d:	e8 0c fa fe ff       	call   c000019e <hasLegacyFPU>
c0010792:	83 e0 01             	and    eax,0x1
c0010795:	8d 14 00             	lea    edx,[eax+eax*1]
c0010798:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c001079e:	83 e0 fd             	and    eax,0xfffffffd
c00107a1:	09 d0                	or     eax,edx
c00107a3:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00107a9:	f6 83 8e 11 00 00 02 	test   BYTE PTR [ebx+0x118e],0x2
c00107b0:	74 17                	je     c00107c9 <CPU::detectFeatures()+0x6a5>
c00107b2:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c00107b8:	8a 82 6c 01 00 00    	mov    al,BYTE PTR [edx+0x16c]
c00107be:	83 c8 10             	or     eax,0x10
c00107c1:	88 82 6c 01 00 00    	mov    BYTE PTR [edx+0x16c],al
c00107c7:	eb 20                	jmp    c00107e9 <CPU::detectFeatures()+0x6c5>
c00107c9:	e8 d0 f9 fe ff       	call   c000019e <hasLegacyFPU>
c00107ce:	83 e0 01             	and    eax,0x1
c00107d1:	8d 14 00             	lea    edx,[eax+eax*1]
c00107d4:	8a 83 8e 11 00 00    	mov    al,BYTE PTR [ebx+0x118e]
c00107da:	83 e0 fd             	and    eax,0xfffffffd
c00107dd:	09 d0                	or     eax,edx
c00107df:	88 83 8e 11 00 00    	mov    BYTE PTR [ebx+0x118e],al
c00107e5:	a8 02                	test   al,0x2
c00107e7:	75 c9                	jne    c00107b2 <CPU::detectFeatures()+0x68e>
c00107e9:	c6 83 90 11 00 00 00 	mov    BYTE PTR [ebx+0x1190],0x0
c00107f0:	83 c4 2c             	add    esp,0x2c
c00107f3:	5b                   	pop    ebx
c00107f4:	5e                   	pop    esi
c00107f5:	5f                   	pop    edi
c00107f6:	5d                   	pop    ebp
c00107f7:	c3                   	ret    

c00107f8 <CPU::setupSMEP()>:
c00107f8:	0f 20 e0             	mov    eax,cr4
c00107fb:	0d 00 00 10 00       	or     eax,0x100000
c0010800:	0f 22 e0             	mov    cr4,eax
c0010803:	c3                   	ret    

c0010804 <CPU::setupUMIP()>:
c0010804:	0f 20 e0             	mov    eax,cr4
c0010807:	80 cc 08             	or     ah,0x8
c001080a:	0f 22 e0             	mov    cr4,eax
c001080d:	c3                   	ret    

c001080e <CPU::setupTSC()>:
c001080e:	0f 20 e0             	mov    eax,cr4
c0010811:	83 c8 04             	or     eax,0x4
c0010814:	0f 22 e0             	mov    cr4,eax
c0010817:	c3                   	ret    

c0010818 <CPU::setupLargePages()>:
c0010818:	0f 20 e0             	mov    eax,cr4
c001081b:	83 c8 10             	or     eax,0x10
c001081e:	0f 22 e0             	mov    cr4,eax
c0010821:	c3                   	ret    

c0010822 <CPU::setupPAT()>:
c0010822:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0010827:	f6 80 6c 01 00 00 08 	test   BYTE PTR [eax+0x16c],0x8
c001082e:	74 2c                	je     c001085c <CPU::setupPAT()+0x3a>
c0010830:	53                   	push   ebx
c0010831:	83 ec 10             	sub    esp,0x10
c0010834:	68 77 02 00 00       	push   0x277
c0010839:	50                   	push   eax
c001083a:	e8 81 68 ff ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001083f:	83 e2 f8             	and    edx,0xfffffff8
c0010842:	83 ca 01             	or     edx,0x1
c0010845:	52                   	push   edx
c0010846:	50                   	push   eax
c0010847:	68 77 02 00 00       	push   0x277
c001084c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0010852:	e8 95 68 ff ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0010857:	83 c4 28             	add    esp,0x28
c001085a:	5b                   	pop    ebx
c001085b:	c3                   	ret    
c001085c:	c3                   	ret    
c001085d:	90                   	nop

c001085e <CPU::setupMTRR()>:
c001085e:	c3                   	ret    
c001085f:	90                   	nop

c0010860 <CPU::setupGlobalPages()>:
c0010860:	0f 20 e0             	mov    eax,cr4
c0010863:	0c 80                	or     al,0x80
c0010865:	0f 22 e0             	mov    cr4,eax
c0010868:	c3                   	ret    
c0010869:	90                   	nop

c001086a <CPU::allowUsermodeDataAccess()>:
c001086a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001086e:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010875:	74 03                	je     c001087a <CPU::allowUsermodeDataAccess()+0x10>
c0010877:	0f 01 cb             	stac   
c001087a:	c3                   	ret    
c001087b:	90                   	nop

c001087c <CPU::prohibitUsermodeDataAccess()>:
c001087c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010880:	f6 80 8d 11 00 00 10 	test   BYTE PTR [eax+0x118d],0x10
c0010887:	74 03                	je     c001088c <CPU::prohibitUsermodeDataAccess()+0x10>
c0010889:	0f 01 ca             	clac   
c001088c:	c3                   	ret    
c001088d:	90                   	nop

c001088e <CPU::setupSMAP()>:
c001088e:	0f 20 e0             	mov    eax,cr4
c0010891:	0d 00 00 20 00       	or     eax,0x200000
c0010896:	0f 22 e0             	mov    cr4,eax
c0010899:	eb e1                	jmp    c001087c <CPU::prohibitUsermodeDataAccess()>
c001089b:	90                   	nop

c001089c <CPU::setupFeatures()>:
c001089c:	53                   	push   ebx
c001089d:	83 ec 08             	sub    esp,0x8
c00108a0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00108a4:	f6 83 8d 11 00 00 08 	test   BYTE PTR [ebx+0x118d],0x8
c00108ab:	74 18                	je     c00108c5 <CPU::setupFeatures()+0x29>
c00108ad:	83 ec 0c             	sub    esp,0xc
c00108b0:	68 bd 1b 02 c0       	push   0xc0021bbd
c00108b5:	e8 8b a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00108ba:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108bd:	e8 42 ff ff ff       	call   c0010804 <CPU::setupUMIP()>
c00108c2:	83 c4 10             	add    esp,0x10
c00108c5:	f6 83 8c 11 00 00 02 	test   BYTE PTR [ebx+0x118c],0x2
c00108cc:	74 18                	je     c00108e6 <CPU::setupFeatures()+0x4a>
c00108ce:	83 ec 0c             	sub    esp,0xc
c00108d1:	68 c7 1b 02 c0       	push   0xc0021bc7
c00108d6:	e8 6a a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00108db:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108de:	e8 2b ff ff ff       	call   c001080e <CPU::setupTSC()>
c00108e3:	83 c4 10             	add    esp,0x10
c00108e6:	f6 83 8c 11 00 00 08 	test   BYTE PTR [ebx+0x118c],0x8
c00108ed:	74 18                	je     c0010907 <CPU::setupFeatures()+0x6b>
c00108ef:	83 ec 0c             	sub    esp,0xc
c00108f2:	68 d0 1b 02 c0       	push   0xc0021bd0
c00108f7:	e8 49 a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00108fc:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00108ff:	e8 14 ff ff ff       	call   c0010818 <CPU::setupLargePages()>
c0010904:	83 c4 10             	add    esp,0x10
c0010907:	f6 83 8c 11 00 00 10 	test   BYTE PTR [ebx+0x118c],0x10
c001090e:	74 18                	je     c0010928 <CPU::setupFeatures()+0x8c>
c0010910:	83 ec 0c             	sub    esp,0xc
c0010913:	68 d9 1b 02 c0       	push   0xc0021bd9
c0010918:	e8 28 a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001091d:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010920:	e8 3b ff ff ff       	call   c0010860 <CPU::setupGlobalPages()>
c0010925:	83 c4 10             	add    esp,0x10
c0010928:	f6 83 8c 11 00 00 20 	test   BYTE PTR [ebx+0x118c],0x20
c001092f:	74 18                	je     c0010949 <CPU::setupFeatures()+0xad>
c0010931:	83 ec 0c             	sub    esp,0xc
c0010934:	68 eb 1b 02 c0       	push   0xc0021beb
c0010939:	e8 07 a0 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001093e:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010941:	e8 dc fe ff ff       	call   c0010822 <CPU::setupPAT()>
c0010946:	83 c4 10             	add    esp,0x10
c0010949:	f6 83 8e 11 00 00 01 	test   BYTE PTR [ebx+0x118e],0x1
c0010950:	74 11                	je     c0010963 <CPU::setupFeatures()+0xc7>
c0010952:	c7 44 24 10 f4 1b 02 c0 	mov    DWORD PTR [esp+0x10],0xc0021bf4
c001095a:	83 c4 08             	add    esp,0x8
c001095d:	5b                   	pop    ebx
c001095e:	e9 e2 9f ff ff       	jmp    c000a945 <Dbg::kprintf(char const*, ...)>
c0010963:	83 c4 08             	add    esp,0x8
c0010966:	5b                   	pop    ebx
c0010967:	c3                   	ret    

c0010968 <CPU::open(int, int, void*)>:
c0010968:	55                   	push   ebp
c0010969:	57                   	push   edi
c001096a:	56                   	push   esi
c001096b:	53                   	push   ebx
c001096c:	83 ec 18             	sub    esp,0x18
c001096f:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0010973:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0010977:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001097b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0010981:	89 bb 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edi
c0010987:	8d ab 7c 11 00 00    	lea    ebp,[ebx+0x117c]
c001098d:	50                   	push   eax
c001098e:	e8 2b 6a ff ff       	call   c00073be <GDT::setup()>
c0010993:	83 c4 0c             	add    esp,0xc
c0010996:	6a 00                	push   0x0
c0010998:	68 ef be ad de       	push   0xdeadbeef
c001099d:	55                   	push   ebp
c001099e:	e8 e5 85 ff ff       	call   c0008f88 <TSS::setup(unsigned long, unsigned long)>
c00109a3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00109a6:	e8 bd 85 ff ff       	call   c0008f68 <TSS::flush()>
c00109ab:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c00109b1:	89 04 24             	mov    DWORD PTR [esp],eax
c00109b4:	e8 69 6c ff ff       	call   c0007622 <IDT::setup()>
c00109b9:	b8 00 04 00 00       	mov    eax,0x400
c00109be:	0f 23 f8             	mov    db7,eax
c00109c1:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c00109cb:	e8 ef 73 ff ff       	call   c0007dbf <Phys::allocatePage()>
c00109d0:	83 c4 10             	add    esp,0x10
c00109d3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00109d9:	85 f6                	test   esi,esi
c00109db:	89 38                	mov    DWORD PTR [eax],edi
c00109dd:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00109e3:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00109e6:	74 10                	je     c00109f8 <CPU::open(int, int, void*)+0x90>
c00109e8:	50                   	push   eax
c00109e9:	50                   	push   eax
c00109ea:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00109f0:	56                   	push   esi
c00109f1:	e8 b8 8e ff ff       	call   c00098ae <VAS::setCPUSpecific(unsigned long)>
c00109f6:	eb 0d                	jmp    c0010a05 <CPU::open(int, int, void*)+0x9d>
c00109f8:	83 ec 0c             	sub    esp,0xc
c00109fb:	68 fe 1b 02 c0       	push   0xc0021bfe
c0010a00:	e8 74 08 00 00       	call   c0011279 <KePanic(char const*)>
c0010a05:	83 c4 10             	add    esp,0x10
c0010a08:	83 ec 0c             	sub    esp,0xc
c0010a0b:	68 0c 1c 02 c0       	push   0xc0021c0c
c0010a10:	e8 8e 01 00 00       	call   c0010ba3 <KeSetBootMessage(char const*)>
c0010a15:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010a18:	e8 07 f7 ff ff       	call   c0010124 <CPU::detectFeatures()>
c0010a1d:	c7 04 24 2f 1c 02 c0 	mov    DWORD PTR [esp],0xc0021c2f
c0010a24:	e8 7a 01 00 00       	call   c0010ba3 <KeSetBootMessage(char const*)>
c0010a29:	e8 df 71 00 00       	call   c0017c0d <HalInitialise()>
c0010a2e:	a1 d0 5e 02 c0       	mov    eax,ds:0xc0025ed0
c0010a33:	83 e0 10             	and    eax,0x10
c0010a36:	83 f8 01             	cmp    eax,0x1
c0010a39:	19 c0                	sbb    eax,eax
c0010a3b:	83 e0 46             	and    eax,0x46
c0010a3e:	83 c0 1e             	add    eax,0x1e
c0010a41:	89 04 24             	mov    DWORD PTR [esp],eax
c0010a44:	e8 28 d6 ff ff       	call   c000e071 <setupTimer(int)>
c0010a49:	83 c4 10             	add    esp,0x10
c0010a4c:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0010a52:	f6 05 d0 5e 02 c0 20 	test   BYTE PTR ds:0xc0025ed0,0x20
c0010a59:	74 0c                	je     c0010a67 <CPU::open(int, int, void*)+0xff>
c0010a5b:	83 ec 0c             	sub    esp,0xc
c0010a5e:	53                   	push   ebx
c0010a5f:	e8 38 fe ff ff       	call   c001089c <CPU::setupFeatures()>
c0010a64:	83 c4 10             	add    esp,0x10
c0010a67:	83 c4 0c             	add    esp,0xc
c0010a6a:	31 c0                	xor    eax,eax
c0010a6c:	5b                   	pop    ebx
c0010a6d:	5e                   	pop    esi
c0010a6e:	5f                   	pop    edi
c0010a6f:	5d                   	pop    ebp
c0010a70:	c3                   	ret    

c0010a71 <KeInitialiseAtexit()>:
c0010a71:	83 ec 10             	sub    esp,0x10
c0010a74:	c7 05 a0 8d 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028da0,0x0
c0010a7e:	6a 60                	push   0x60
c0010a80:	6a 00                	push   0x0
c0010a82:	68 20 8e 02 c0       	push   0xc0028e20
c0010a87:	e8 64 fa fe ff       	call   c00004f0 <memset>
c0010a8c:	83 c4 1c             	add    esp,0x1c
c0010a8f:	c3                   	ret    

c0010a90 <KeRegisterAtexit(void (*)(void*), void*)>:
c0010a90:	a1 a0 8d 02 c0       	mov    eax,ds:0xc0028da0
c0010a95:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010a99:	89 14 85 20 8e 02 c0 	mov    DWORD PTR [eax*4-0x3ffd71e0],edx
c0010aa0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010aa4:	89 14 85 c0 8d 02 c0 	mov    DWORD PTR [eax*4-0x3ffd7240],edx
c0010aab:	40                   	inc    eax
c0010aac:	a3 a0 8d 02 c0       	mov    ds:0xc0028da0,eax
c0010ab1:	83 f8 17             	cmp    eax,0x17
c0010ab4:	7e 0d                	jle    c0010ac3 <KeRegisterAtexit(void (*)(void*), void*)+0x33>
c0010ab6:	c7 44 24 04 70 1c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0021c70
c0010abe:	e9 b6 07 00 00       	jmp    c0011279 <KePanic(char const*)>
c0010ac3:	c3                   	ret    

c0010ac4 <KeExecuteAtexit()>:
c0010ac4:	53                   	push   ebx
c0010ac5:	31 db                	xor    ebx,ebx
c0010ac7:	83 ec 08             	sub    esp,0x8
c0010aca:	39 1d a0 8d 02 c0    	cmp    DWORD PTR ds:0xc0028da0,ebx
c0010ad0:	7e 50                	jle    c0010b22 <KeExecuteAtexit()+0x5e>
c0010ad2:	8b 04 9d 20 8e 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd71e0]
c0010ad9:	85 c0                	test   eax,eax
c0010adb:	74 42                	je     c0010b1f <KeExecuteAtexit()+0x5b>
c0010add:	51                   	push   ecx
c0010ade:	50                   	push   eax
c0010adf:	53                   	push   ebx
c0010ae0:	68 89 1c 02 c0       	push   0xc0021c89
c0010ae5:	e8 5b 9e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010aea:	58                   	pop    eax
c0010aeb:	ff 34 9d c0 8d 02 c0 	push   DWORD PTR [ebx*4-0x3ffd7240]
c0010af2:	ff 14 9d 20 8e 02 c0 	call   DWORD PTR [ebx*4-0x3ffd71e0]
c0010af9:	c7 04 24 ab 1c 02 c0 	mov    DWORD PTR [esp],0xc0021cab
c0010b00:	e8 40 9e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010b05:	c7 04 24 0b 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e0b
c0010b0c:	c7 04 9d 20 8e 02 c0 00 00 00 00 	mov    DWORD PTR [ebx*4-0x3ffd71e0],0x0
c0010b17:	e8 29 9e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0010b1c:	83 c4 10             	add    esp,0x10
c0010b1f:	43                   	inc    ebx
c0010b20:	eb a8                	jmp    c0010aca <KeExecuteAtexit()+0x6>
c0010b22:	83 c4 08             	add    esp,0x8
c0010b25:	5b                   	pop    ebx
c0010b26:	c3                   	ret    

c0010b27 <KeDisplaySplashScreen()>:
c0010b27:	55                   	push   ebp
c0010b28:	bd 05 00 00 00       	mov    ebp,0x5
c0010b2d:	57                   	push   edi
c0010b2e:	bf 0a 00 00 00       	mov    edi,0xa
c0010b33:	56                   	push   esi
c0010b34:	31 f6                	xor    esi,esi
c0010b36:	53                   	push   ebx
c0010b37:	31 db                	xor    ebx,ebx
c0010b39:	83 ec 0c             	sub    esp,0xc
c0010b3c:	0f b6 96 60 30 02 c0 	movzx  edx,BYTE PTR [esi-0x3ffdcfa0]
c0010b43:	89 d0                	mov    eax,edx
c0010b45:	85 d2                	test   edx,edx
c0010b47:	74 52                	je     c0010b9b <KeDisplaySplashScreen()+0x74>
c0010b49:	80 bb 96 30 02 c0 db 	cmp    BYTE PTR [ebx-0x3ffdcf6a],0xdb
c0010b50:	75 13                	jne    c0010b65 <KeDisplaySplashScreen()+0x3e>
c0010b52:	0f b6 8b 95 30 02 c0 	movzx  ecx,BYTE PTR [ebx-0x3ffdcf6b]
c0010b59:	83 e1 fe             	and    ecx,0xfffffffe
c0010b5c:	81 f9 ba 00 00 00    	cmp    ecx,0xba
c0010b62:	75 01                	jne    c0010b65 <KeDisplaySplashScreen()+0x3e>
c0010b64:	47                   	inc    edi
c0010b65:	83 fa 0d             	cmp    edx,0xd
c0010b68:	74 28                	je     c0010b92 <KeDisplaySplashScreen()+0x6b>
c0010b6a:	83 fa 0a             	cmp    edx,0xa
c0010b6d:	75 0a                	jne    c0010b79 <KeDisplaySplashScreen()+0x52>
c0010b6f:	45                   	inc    ebp
c0010b70:	bf 0a 00 00 00       	mov    edi,0xa
c0010b75:	31 db                	xor    ebx,ebx
c0010b77:	eb 19                	jmp    c0010b92 <KeDisplaySplashScreen()+0x6b>
c0010b79:	83 ec 0c             	sub    esp,0xc
c0010b7c:	8d 14 1f             	lea    edx,[edi+ebx*1]
c0010b7f:	55                   	push   ebp
c0010b80:	0f be c0             	movsx  eax,al
c0010b83:	52                   	push   edx
c0010b84:	43                   	inc    ebx
c0010b85:	6a 00                	push   0x0
c0010b87:	6a 0e                	push   0xe
c0010b89:	50                   	push   eax
c0010b8a:	e8 fd 7c 00 00       	call   c001888c <HalConsoleWriteCharacter(char, int, int, int, int)>
c0010b8f:	83 c4 20             	add    esp,0x20
c0010b92:	46                   	inc    esi
c0010b93:	81 fe 42 01 00 00    	cmp    esi,0x142
c0010b99:	75 a1                	jne    c0010b3c <KeDisplaySplashScreen()+0x15>
c0010b9b:	83 c4 0c             	add    esp,0xc
c0010b9e:	5b                   	pop    ebx
c0010b9f:	5e                   	pop    esi
c0010ba0:	5f                   	pop    edi
c0010ba1:	5d                   	pop    ebp
c0010ba2:	c3                   	ret    

c0010ba3 <KeSetBootMessage(char const*)>:
c0010ba3:	57                   	push   edi
c0010ba4:	56                   	push   esi
c0010ba5:	53                   	push   ebx
c0010ba6:	81 ec a4 00 00 00    	sub    esp,0xa4
c0010bac:	8b 9c 24 b4 00 00 00 	mov    ebx,DWORD PTR [esp+0xb4]
c0010bb3:	68 9e 00 00 00       	push   0x9e
c0010bb8:	6a 00                	push   0x0
c0010bba:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0010bbe:	56                   	push   esi
c0010bbf:	e8 2c f9 fe ff       	call   c00004f0 <memset>
c0010bc4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010bc7:	e8 a4 f9 fe ff       	call   c0000570 <strlen>
c0010bcc:	ba 50 00 00 00       	mov    edx,0x50
c0010bd1:	83 c4 10             	add    esp,0x10
c0010bd4:	29 c2                	sub    edx,eax
c0010bd6:	31 c9                	xor    ecx,ecx
c0010bd8:	83 e2 fe             	and    edx,0xfffffffe
c0010bdb:	01 f2                	add    edx,esi
c0010bdd:	66 0f be 04 0b       	movsx  ax,BYTE PTR [ebx+ecx*1]
c0010be2:	84 c0                	test   al,al
c0010be4:	74 0a                	je     c0010bf0 <KeSetBootMessage(char const*)+0x4d>
c0010be6:	80 cc 0f             	or     ah,0xf
c0010be9:	66 89 04 4a          	mov    WORD PTR [edx+ecx*2],ax
c0010bed:	41                   	inc    ecx
c0010bee:	eb ed                	jmp    c0010bdd <KeSetBootMessage(char const*)+0x3a>
c0010bf0:	bf 80 8c 0b c2       	mov    edi,0xc20b8c80
c0010bf5:	b9 9e 00 00 00       	mov    ecx,0x9e
c0010bfa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010bfc:	81 c4 a0 00 00 00    	add    esp,0xa0
c0010c02:	5b                   	pop    ebx
c0010c03:	5e                   	pop    esi
c0010c04:	5f                   	pop    edi
c0010c05:	c3                   	ret    
c0010c06:	66 90                	xchg   ax,ax

c0010c08 <Krnl::handlePowerButton()>:
c0010c08:	83 ec 0c             	sub    esp,0xc
c0010c0b:	e8 c4 06 00 00       	call   c00112d4 <KeHandlePowerButton()>
c0010c10:	90                   	nop
c0010c11:	83 c4 0c             	add    esp,0xc
c0010c14:	c3                   	ret    
c0010c15:	8d 76 00             	lea    esi,[esi+0x0]

c0010c18 <Krnl::handleSleepButton()>:
c0010c18:	83 ec 0c             	sub    esp,0xc
c0010c1b:	e8 e9 06 00 00       	call   c0011309 <KeHandleSleepButton()>
c0010c20:	90                   	nop
c0010c21:	83 c4 0c             	add    esp,0xc
c0010c24:	c3                   	ret    
c0010c25:	90                   	nop

c0010c26 <EnvVarContainer::getEnv(char const*)>:
c0010c26:	57                   	push   edi
c0010c27:	56                   	push   esi
c0010c28:	53                   	push   ebx
c0010c29:	31 db                	xor    ebx,ebx
c0010c2b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010c2f:	39 1e                	cmp    DWORD PTR [esi],ebx
c0010c31:	7e 2b                	jle    c0010c5e <EnvVarContainer::getEnv(char const*)+0x38>
c0010c33:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c0010c3a:	50                   	push   eax
c0010c3b:	50                   	push   eax
c0010c3c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010c3f:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c0010c42:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0010c46:	e8 05 fb fe ff       	call   c0000750 <strcmp>
c0010c4b:	83 c4 10             	add    esp,0x10
c0010c4e:	85 c0                	test   eax,eax
c0010c50:	75 09                	jne    c0010c5b <EnvVarContainer::getEnv(char const*)+0x35>
c0010c52:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c0010c55:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c0010c59:	eb 05                	jmp    c0010c60 <EnvVarContainer::getEnv(char const*)+0x3a>
c0010c5b:	43                   	inc    ebx
c0010c5c:	eb d1                	jmp    c0010c2f <EnvVarContainer::getEnv(char const*)+0x9>
c0010c5e:	31 c0                	xor    eax,eax
c0010c60:	5b                   	pop    ebx
c0010c61:	5e                   	pop    esi
c0010c62:	5f                   	pop    edi
c0010c63:	c3                   	ret    

c0010c64 <EnvVarContainer::setEnv(char const*, char const*)>:
c0010c64:	55                   	push   ebp
c0010c65:	57                   	push   edi
c0010c66:	56                   	push   esi
c0010c67:	53                   	push   ebx
c0010c68:	83 ec 28             	sub    esp,0x28
c0010c6b:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0010c6f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0010c73:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0010c77:	56                   	push   esi
c0010c78:	e8 f3 f8 fe ff       	call   c0000570 <strlen>
c0010c7d:	40                   	inc    eax
c0010c7e:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c81:	e8 30 6e ff ff       	call   c0007ab6 <malloc>
c0010c86:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010c89:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010c8d:	e8 de f8 fe ff       	call   c0000570 <strlen>
c0010c92:	40                   	inc    eax
c0010c93:	89 04 24             	mov    DWORD PTR [esp],eax
c0010c96:	e8 1b 6e ff ff       	call   c0007ab6 <malloc>
c0010c9b:	89 34 24             	mov    DWORD PTR [esp],esi
c0010c9e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0010ca2:	e8 c9 f8 fe ff       	call   c0000570 <strlen>
c0010ca7:	83 c4 0c             	add    esp,0xc
c0010caa:	40                   	inc    eax
c0010cab:	50                   	push   eax
c0010cac:	6a 00                	push   0x0
c0010cae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010cb2:	e8 39 f8 fe ff       	call   c00004f0 <memset>
c0010cb7:	89 34 24             	mov    DWORD PTR [esp],esi
c0010cba:	e8 b1 f8 fe ff       	call   c0000570 <strlen>
c0010cbf:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0010cc3:	8d 48 01             	lea    ecx,[eax+0x1]
c0010cc6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cc8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ccb:	89 de                	mov    esi,ebx
c0010ccd:	e8 9e f8 fe ff       	call   c0000570 <strlen>
c0010cd2:	83 c4 0c             	add    esp,0xc
c0010cd5:	40                   	inc    eax
c0010cd6:	50                   	push   eax
c0010cd7:	6a 00                	push   0x0
c0010cd9:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010cdd:	e8 0e f8 fe ff       	call   c00004f0 <memset>
c0010ce2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ce5:	e8 86 f8 fe ff       	call   c0000570 <strlen>
c0010cea:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0010cee:	8d 48 01             	lea    ecx,[eax+0x1]
c0010cf1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010cf3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010cf6:	40                   	inc    eax
c0010cf7:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010cfa:	c1 e0 03             	shl    eax,0x3
c0010cfd:	5a                   	pop    edx
c0010cfe:	59                   	pop    ecx
c0010cff:	50                   	push   eax
c0010d00:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0010d03:	e8 9a 6d ff ff       	call   c0007aa2 <realloc>
c0010d08:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010d0c:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010d0f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010d12:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010d16:	b9 08 00 00 00       	mov    ecx,0x8
c0010d1b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010d1d:	83 c4 2c             	add    esp,0x2c
c0010d20:	5b                   	pop    ebx
c0010d21:	5e                   	pop    esi
c0010d22:	5f                   	pop    edi
c0010d23:	5d                   	pop    ebp
c0010d24:	c3                   	ret    
c0010d25:	90                   	nop

c0010d26 <EnvVarContainer::deleteEnv(char const*)>:
c0010d26:	c3                   	ret    
c0010d27:	90                   	nop

c0010d28 <EnvVarContainer::loadFrom(char const*, char const*)>:
c0010d28:	55                   	push   ebp
c0010d29:	57                   	push   edi
c0010d2a:	56                   	push   esi
c0010d2b:	53                   	push   ebx
c0010d2c:	81 ec 38 01 00 00    	sub    esp,0x138
c0010d32:	8b ac 24 4c 01 00 00 	mov    ebp,DWORD PTR [esp+0x14c]
c0010d39:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c0010d40:	68 14 01 00 00       	push   0x114
c0010d45:	e8 6c 6d ff ff       	call   c0007ab6 <malloc>
c0010d4a:	83 c4 0c             	add    esp,0xc
c0010d4d:	89 c3                	mov    ebx,eax
c0010d4f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0010d52:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c0010d59:	50                   	push   eax
c0010d5a:	e8 e3 a9 ff ff       	call   c000b742 <File::File(char const*, Process*)>
c0010d5f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010d62:	e8 5b ad ff ff       	call   c000bac2 <File::exists()>
c0010d67:	83 c4 10             	add    esp,0x10
c0010d6a:	84 c0                	test   al,al
c0010d6c:	75 31                	jne    c0010d9f <EnvVarContainer::loadFrom(char const*, char const*)+0x77>
c0010d6e:	50                   	push   eax
c0010d6f:	50                   	push   eax
c0010d70:	6a 12                	push   0x12
c0010d72:	53                   	push   ebx
c0010d73:	e8 86 aa ff ff       	call   c000b7fe <File::open(FileOpenMode)>
c0010d78:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010d7a:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0010d7d:	89 34 24             	mov    DWORD PTR [esp],esi
c0010d80:	e8 eb f7 fe ff       	call   c0000570 <strlen>
c0010d85:	5a                   	pop    edx
c0010d86:	31 d2                	xor    edx,edx
c0010d88:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010d8c:	51                   	push   ecx
c0010d8d:	56                   	push   esi
c0010d8e:	52                   	push   edx
c0010d8f:	50                   	push   eax
c0010d90:	53                   	push   ebx
c0010d91:	ff d7                	call   edi
c0010d93:	83 c4 14             	add    esp,0x14
c0010d96:	53                   	push   ebx
c0010d97:	e8 c0 aa ff ff       	call   c000b85c <File::close()>
c0010d9c:	83 c4 10             	add    esp,0x10
c0010d9f:	56                   	push   esi
c0010da0:	31 f6                	xor    esi,esi
c0010da2:	68 00 01 00 00       	push   0x100
c0010da7:	6a 00                	push   0x0
c0010da9:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010dad:	50                   	push   eax
c0010dae:	e8 3d f7 fe ff       	call   c00004f0 <memset>
c0010db3:	5f                   	pop    edi
c0010db4:	58                   	pop    eax
c0010db5:	6a 01                	push   0x1
c0010db7:	53                   	push   ebx
c0010db8:	e8 41 aa ff ff       	call   c000b7fe <File::open(FileOpenMode)>
c0010dbd:	83 c4 10             	add    esp,0x10
c0010dc0:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010dc8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0010dd0:	83 ec 0c             	sub    esp,0xc
c0010dd3:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010dd5:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0010dd9:	51                   	push   ecx
c0010dda:	8d 54 24 23          	lea    edx,[esp+0x23]
c0010dde:	52                   	push   edx
c0010ddf:	6a 00                	push   0x0
c0010de1:	6a 01                	push   0x1
c0010de3:	53                   	push   ebx
c0010de4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0010de7:	0f be 44 24 33       	movsx  eax,BYTE PTR [esp+0x33]
c0010dec:	83 c4 20             	add    esp,0x20
c0010def:	89 c2                	mov    edx,eax
c0010df1:	85 c0                	test   eax,eax
c0010df3:	0f 84 36 01 00 00    	je     c0010f2f <EnvVarContainer::loadFrom(char const*, char const*)+0x207>
c0010df9:	83 f8 0d             	cmp    eax,0xd
c0010dfc:	0f 84 22 01 00 00    	je     c0010f24 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010e02:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0010e07:	0f 84 f0 00 00 00    	je     c0010efd <EnvVarContainer::loadFrom(char const*, char const*)+0x1d5>
c0010e0d:	83 f8 0a             	cmp    eax,0xa
c0010e10:	74 13                	je     c0010e25 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010e12:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010e17:	74 0c                	je     c0010e25 <EnvVarContainer::loadFrom(char const*, char const*)+0xfd>
c0010e19:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010e1f:	0f 8e f6 00 00 00    	jle    c0010f1b <EnvVarContainer::loadFrom(char const*, char const*)+0x1f3>
c0010e25:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010e29:	83 ec 0c             	sub    esp,0xc
c0010e2c:	8d 78 01             	lea    edi,[eax+0x1]
c0010e2f:	57                   	push   edi
c0010e30:	e8 81 6c ff ff       	call   c0007ab6 <malloc>
c0010e35:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c0010e39:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0010e3d:	8d 56 04             	lea    edx,[esi+0x4]
c0010e40:	89 14 24             	mov    DWORD PTR [esp],edx
c0010e43:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010e47:	e8 6a 6c ff ff       	call   c0007ab6 <malloc>
c0010e4c:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0010e50:	83 c4 0c             	add    esp,0xc
c0010e53:	57                   	push   edi
c0010e54:	6a 00                	push   0x0
c0010e56:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010e5a:	e8 91 f6 fe ff       	call   c00004f0 <memset>
c0010e5f:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010e63:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0010e67:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0010e6b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e6d:	83 c4 0c             	add    esp,0xc
c0010e70:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0010e74:	52                   	push   edx
c0010e75:	6a 00                	push   0x0
c0010e77:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0010e7b:	e8 70 f6 fe ff       	call   c00004f0 <memset>
c0010e80:	8d 74 24 30          	lea    esi,[esp+0x30]
c0010e84:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0010e88:	89 34 24             	mov    DWORD PTR [esp],esi
c0010e8b:	e8 e0 f6 fe ff       	call   c0000570 <strlen>
c0010e90:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c0010e94:	89 c1                	mov    ecx,eax
c0010e96:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010e98:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0010e9b:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0010e9e:	40                   	inc    eax
c0010e9f:	83 c4 10             	add    esp,0x10
c0010ea2:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0010ea5:	85 d2                	test   edx,edx
c0010ea7:	75 0c                	jne    c0010eb5 <EnvVarContainer::loadFrom(char const*, char const*)+0x18d>
c0010ea9:	83 ec 0c             	sub    esp,0xc
c0010eac:	6a 08                	push   0x8
c0010eae:	e8 03 6c ff ff       	call   c0007ab6 <malloc>
c0010eb3:	eb 0c                	jmp    c0010ec1 <EnvVarContainer::loadFrom(char const*, char const*)+0x199>
c0010eb5:	c1 e0 03             	shl    eax,0x3
c0010eb8:	51                   	push   ecx
c0010eb9:	51                   	push   ecx
c0010eba:	50                   	push   eax
c0010ebb:	52                   	push   edx
c0010ebc:	e8 e1 6b ff ff       	call   c0007aa2 <realloc>
c0010ec1:	83 c4 10             	add    esp,0x10
c0010ec4:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0010ec7:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0010eca:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
c0010ecd:	8d 74 24 18          	lea    esi,[esp+0x18]
c0010ed1:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c0010ed5:	b9 08 00 00 00       	mov    ecx,0x8
c0010eda:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010edc:	31 f6                	xor    esi,esi
c0010ede:	50                   	push   eax
c0010edf:	68 00 01 00 00       	push   0x100
c0010ee4:	6a 00                	push   0x0
c0010ee6:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0010eea:	50                   	push   eax
c0010eeb:	e8 00 f6 fe ff       	call   c00004f0 <memset>
c0010ef0:	83 c4 10             	add    esp,0x10
c0010ef3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0010efb:	eb 27                	jmp    c0010f24 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010efd:	83 f8 3d             	cmp    eax,0x3d
c0010f00:	74 1e                	je     c0010f20 <EnvVarContainer::loadFrom(char const*, char const*)+0x1f8>
c0010f02:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0010f08:	7f 07                	jg     c0010f11 <EnvVarContainer::loadFrom(char const*, char const*)+0x1e9>
c0010f0a:	88 54 34 20          	mov    BYTE PTR [esp+esi*1+0x20],dl
c0010f0e:	46                   	inc    esi
c0010f0f:	eb 13                	jmp    c0010f24 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f11:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0010f19:	eb 09                	jmp    c0010f24 <EnvVarContainer::loadFrom(char const*, char const*)+0x1fc>
c0010f1b:	83 f8 3d             	cmp    eax,0x3d
c0010f1e:	75 ea                	jne    c0010f0a <EnvVarContainer::loadFrom(char const*, char const*)+0x1e2>
c0010f20:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0010f24:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0010f29:	0f 85 99 fe ff ff    	jne    c0010dc8 <EnvVarContainer::loadFrom(char const*, char const*)+0xa0>
c0010f2f:	83 ec 0c             	sub    esp,0xc
c0010f32:	53                   	push   ebx
c0010f33:	e8 24 a9 ff ff       	call   c000b85c <File::close()>
c0010f38:	8b 03                	mov    eax,DWORD PTR [ebx]
c0010f3a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010f3d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0010f40:	81 c4 3c 01 00 00    	add    esp,0x13c
c0010f46:	5b                   	pop    ebx
c0010f47:	5e                   	pop    esi
c0010f48:	5f                   	pop    edi
c0010f49:	5d                   	pop    ebp
c0010f4a:	c3                   	ret    
c0010f4b:	90                   	nop

c0010f4c <EnvVarContainer::__loadSystem()>:
c0010f4c:	83 ec 10             	sub    esp,0x10
c0010f4f:	68 c0 31 02 c0       	push   0xc00231c0
c0010f54:	68 b0 1c 02 c0       	push   0xc0021cb0
c0010f59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010f5d:	e8 c6 fd ff ff       	call   c0010d28 <EnvVarContainer::loadFrom(char const*, char const*)>
c0010f62:	83 c4 1c             	add    esp,0x1c
c0010f65:	c3                   	ret    

c0010f66 <EnvVarContainer::__loadUser()>:
c0010f66:	c3                   	ret    
c0010f67:	90                   	nop

c0010f68 <EnvVarContainer::EnvVarContainer(Process*)>:
c0010f68:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f6c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0010f72:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f76:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010f7a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0010f7d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010f81:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0010f88:	90                   	nop
c0010f89:	c3                   	ret    

c0010f8a <EnvVarContainer::~EnvVarContainer()>:
c0010f8a:	83 ec 0c             	sub    esp,0xc
c0010f8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f91:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010f94:	85 c0                	test   eax,eax
c0010f96:	74 1d                	je     c0010fb5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010f98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010f9c:	8b 00                	mov    eax,DWORD PTR [eax]
c0010f9e:	85 c0                	test   eax,eax
c0010fa0:	74 13                	je     c0010fb5 <EnvVarContainer::~EnvVarContainer()+0x2b>
c0010fa2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fa6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0010fa9:	83 ec 0c             	sub    esp,0xc
c0010fac:	50                   	push   eax
c0010fad:	e8 14 6b ff ff       	call   c0007ac6 <free>
c0010fb2:	83 c4 10             	add    esp,0x10
c0010fb5:	90                   	nop
c0010fb6:	83 c4 0c             	add    esp,0xc
c0010fb9:	c3                   	ret    

c0010fba <KeGetEnv(Process*, char const*)>:
c0010fba:	53                   	push   ebx
c0010fbb:	83 ec 08             	sub    esp,0x8
c0010fbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010fc2:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010fc6:	39 05 f0 96 02 c0    	cmp    DWORD PTR ds:0xc00296f0,eax
c0010fcc:	74 04                	je     c0010fd2 <KeGetEnv(Process*, char const*)+0x18>
c0010fce:	85 c0                	test   eax,eax
c0010fd0:	75 0b                	jne    c0010fdd <KeGetEnv(Process*, char const*)+0x23>
c0010fd2:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c0010fd7:	85 c0                	test   eax,eax
c0010fd9:	75 19                	jne    c0010ff4 <KeGetEnv(Process*, char const*)+0x3a>
c0010fdb:	eb 27                	jmp    c0011004 <KeGetEnv(Process*, char const*)+0x4a>
c0010fdd:	52                   	push   edx
c0010fde:	52                   	push   edx
c0010fdf:	53                   	push   ebx
c0010fe0:	ff b0 1a 07 00 00    	push   DWORD PTR [eax+0x71a]
c0010fe6:	e8 3b fc ff ff       	call   c0010c26 <EnvVarContainer::getEnv(char const*)>
c0010feb:	83 c4 10             	add    esp,0x10
c0010fee:	85 c0                	test   eax,eax
c0010ff0:	75 28                	jne    c001101a <KeGetEnv(Process*, char const*)+0x60>
c0010ff2:	eb de                	jmp    c0010fd2 <KeGetEnv(Process*, char const*)+0x18>
c0010ff4:	52                   	push   edx
c0010ff5:	52                   	push   edx
c0010ff6:	53                   	push   ebx
c0010ff7:	50                   	push   eax
c0010ff8:	e8 29 fc ff ff       	call   c0010c26 <EnvVarContainer::getEnv(char const*)>
c0010ffd:	83 c4 10             	add    esp,0x10
c0011000:	85 c0                	test   eax,eax
c0011002:	75 16                	jne    c001101a <KeGetEnv(Process*, char const*)+0x60>
c0011004:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0011008:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c001100d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0011011:	83 c4 08             	add    esp,0x8
c0011014:	5b                   	pop    ebx
c0011015:	e9 0c fc ff ff       	jmp    c0010c26 <EnvVarContainer::getEnv(char const*)>
c001101a:	83 c4 08             	add    esp,0x8
c001101d:	5b                   	pop    ebx
c001101e:	c3                   	ret    

c001101f <KeSetEnvSystem(char const*, char const*)>:
c001101f:	83 ec 10             	sub    esp,0x10
c0011022:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011026:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001102a:	ff 35 84 8e 02 c0    	push   DWORD PTR ds:0xc0028e84
c0011030:	e8 2f fc ff ff       	call   c0010c64 <EnvVarContainer::setEnv(char const*, char const*)>
c0011035:	83 c4 1c             	add    esp,0x1c
c0011038:	c3                   	ret    

c0011039 <KeSetEnvUser(char const*, char const*)>:
c0011039:	a1 80 8e 02 c0       	mov    eax,ds:0xc0028e80
c001103e:	85 c0                	test   eax,eax
c0011040:	74 15                	je     c0011057 <KeSetEnvUser(char const*, char const*)+0x1e>
c0011042:	83 ec 10             	sub    esp,0x10
c0011045:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0011049:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001104d:	50                   	push   eax
c001104e:	e8 11 fc ff ff       	call   c0010c64 <EnvVarContainer::setEnv(char const*, char const*)>
c0011053:	83 c4 1c             	add    esp,0x1c
c0011056:	c3                   	ret    
c0011057:	c3                   	ret    

c0011058 <KeSetEnvProcess(Process*, char const*, char const*)>:
c0011058:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001105c:	8b 80 1a 07 00 00    	mov    eax,DWORD PTR [eax+0x71a]
c0011062:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0011066:	e9 f9 fb ff ff       	jmp    c0010c64 <EnvVarContainer::setEnv(char const*, char const*)>

c001106b <KeDeleteEnvSystem(char const*)>:
c001106b:	c3                   	ret    

c001106c <KeDeleteEnvUser(char const*)>:
c001106c:	c3                   	ret    

c001106d <KeDeleteEnvProcess(Process*, char const*)>:
c001106d:	c3                   	ret    

c001106e <KeNewProcessEnv(Process*)>:
c001106e:	83 ec 28             	sub    esp,0x28
c0011071:	6a 0c                	push   0xc
c0011073:	e8 3e 6a ff ff       	call   c0007ab6 <malloc>
c0011078:	5a                   	pop    edx
c0011079:	59                   	pop    ecx
c001107a:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001107e:	50                   	push   eax
c001107f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011083:	e8 e0 fe ff ff       	call   c0010f68 <EnvVarContainer::EnvVarContainer(Process*)>
c0011088:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001108c:	83 c4 2c             	add    esp,0x2c
c001108f:	c3                   	ret    

c0011090 <KeCopyProcessEnv(Process*, Process*)>:
c0011090:	57                   	push   edi
c0011091:	56                   	push   esi
c0011092:	53                   	push   ebx
c0011093:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011097:	83 ec 0c             	sub    esp,0xc
c001109a:	8b b8 1a 07 00 00    	mov    edi,DWORD PTR [eax+0x71a]
c00110a0:	6a 0c                	push   0xc
c00110a2:	e8 0f 6a ff ff       	call   c0007ab6 <malloc>
c00110a7:	89 c3                	mov    ebx,eax
c00110a9:	58                   	pop    eax
c00110aa:	5a                   	pop    edx
c00110ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110af:	53                   	push   ebx
c00110b0:	e8 b3 fe ff ff       	call   c0010f68 <EnvVarContainer::EnvVarContainer(Process*)>
c00110b5:	8b 07                	mov    eax,DWORD PTR [edi]
c00110b7:	89 03                	mov    DWORD PTR [ebx],eax
c00110b9:	c1 e0 03             	shl    eax,0x3
c00110bc:	89 04 24             	mov    DWORD PTR [esp],eax
c00110bf:	e8 f2 69 ff ff       	call   c0007ab6 <malloc>
c00110c4:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00110c7:	8b 0f                	mov    ecx,DWORD PTR [edi]
c00110c9:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c00110cc:	c1 e1 03             	shl    ecx,0x3
c00110cf:	89 c7                	mov    edi,eax
c00110d1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00110d3:	83 c4 10             	add    esp,0x10
c00110d6:	89 d8                	mov    eax,ebx
c00110d8:	5b                   	pop    ebx
c00110d9:	5e                   	pop    esi
c00110da:	5f                   	pop    edi
c00110db:	c3                   	ret    

c00110dc <KeLoadSystemEnv()>:
c00110dc:	53                   	push   ebx
c00110dd:	83 ec 14             	sub    esp,0x14
c00110e0:	6a 0c                	push   0xc
c00110e2:	e8 cf 69 ff ff       	call   c0007ab6 <malloc>
c00110e7:	89 c3                	mov    ebx,eax
c00110e9:	58                   	pop    eax
c00110ea:	5a                   	pop    edx
c00110eb:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c00110f1:	53                   	push   ebx
c00110f2:	e8 71 fe ff ff       	call   c0010f68 <EnvVarContainer::EnvVarContainer(Process*)>
c00110f7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00110fa:	89 1d 84 8e 02 c0    	mov    DWORD PTR ds:0xc0028e84,ebx
c0011100:	e8 47 fe ff ff       	call   c0010f4c <EnvVarContainer::__loadSystem()>
c0011105:	83 c4 18             	add    esp,0x18
c0011108:	5b                   	pop    ebx
c0011109:	c3                   	ret    

c001110a <KeLoadUserEnv()>:
c001110a:	53                   	push   ebx
c001110b:	83 ec 14             	sub    esp,0x14
c001110e:	6a 0c                	push   0xc
c0011110:	e8 a1 69 ff ff       	call   c0007ab6 <malloc>
c0011115:	89 c3                	mov    ebx,eax
c0011117:	58                   	pop    eax
c0011118:	5a                   	pop    edx
c0011119:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001111f:	53                   	push   ebx
c0011120:	e8 43 fe ff ff       	call   c0010f68 <EnvVarContainer::EnvVarContainer(Process*)>
c0011125:	89 1d 80 8e 02 c0    	mov    DWORD PTR ds:0xc0028e80,ebx
c001112b:	83 c4 18             	add    esp,0x18
c001112e:	5b                   	pop    ebx
c001112f:	c3                   	ret    

c0011130 <KeFlushEnv()>:
c0011130:	c3                   	ret    

c0011131 <KeGetProcessTotalEnvCount(Process*)>:
c0011131:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011135:	8b 15 80 8e 02 c0    	mov    edx,DWORD PTR ds:0xc0028e80
c001113b:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c0011141:	a1 84 8e 02 c0       	mov    eax,ds:0xc0028e84
c0011146:	8b 00                	mov    eax,DWORD PTR [eax]
c0011148:	03 01                	add    eax,DWORD PTR [ecx]
c001114a:	85 d2                	test   edx,edx
c001114c:	74 02                	je     c0011150 <KeGetProcessTotalEnvCount(Process*)+0x1f>
c001114e:	03 02                	add    eax,DWORD PTR [edx]
c0011150:	c3                   	ret    

c0011151 <KeGetProcessEnvPair(Process*, int)>:
c0011151:	57                   	push   edi
c0011152:	56                   	push   esi
c0011153:	8b 35 80 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e80
c0011159:	53                   	push   ebx
c001115a:	85 f6                	test   esi,esi
c001115c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011160:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011164:	8b 88 1a 07 00 00    	mov    ecx,DWORD PTR [eax+0x71a]
c001116a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001116e:	8b 01                	mov    eax,DWORD PTR [ecx]
c0011170:	75 16                	jne    c0011188 <KeGetProcessEnvPair(Process*, int)+0x37>
c0011172:	39 c2                	cmp    edx,eax
c0011174:	7c 16                	jl     c001118c <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011176:	8b 0d 84 8e 02 c0    	mov    ecx,DWORD PTR ds:0xc0028e84
c001117c:	8b 31                	mov    esi,DWORD PTR [ecx]
c001117e:	01 c6                	add    esi,eax
c0011180:	39 d6                	cmp    esi,edx
c0011182:	7e 3c                	jle    c00111c0 <KeGetProcessEnvPair(Process*, int)+0x6f>
c0011184:	29 c2                	sub    edx,eax
c0011186:	eb 04                	jmp    c001118c <KeGetProcessEnvPair(Process*, int)+0x3b>
c0011188:	39 c2                	cmp    edx,eax
c001118a:	7d 05                	jge    c0011191 <KeGetProcessEnvPair(Process*, int)+0x40>
c001118c:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001118f:	eb 20                	jmp    c00111b1 <KeGetProcessEnvPair(Process*, int)+0x60>
c0011191:	8b 3e                	mov    edi,DWORD PTR [esi]
c0011193:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0011196:	39 d1                	cmp    ecx,edx
c0011198:	7e 04                	jle    c001119e <KeGetProcessEnvPair(Process*, int)+0x4d>
c001119a:	29 c2                	sub    edx,eax
c001119c:	eb 10                	jmp    c00111ae <KeGetProcessEnvPair(Process*, int)+0x5d>
c001119e:	8b 35 84 8e 02 c0    	mov    esi,DWORD PTR ds:0xc0028e84
c00111a4:	03 0e                	add    ecx,DWORD PTR [esi]
c00111a6:	39 d1                	cmp    ecx,edx
c00111a8:	7e 16                	jle    c00111c0 <KeGetProcessEnvPair(Process*, int)+0x6f>
c00111aa:	29 c2                	sub    edx,eax
c00111ac:	29 fa                	sub    edx,edi
c00111ae:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00111b1:	8d 14 d0             	lea    edx,[eax+edx*8]
c00111b4:	8b 02                	mov    eax,DWORD PTR [edx]
c00111b6:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00111b9:	89 03                	mov    DWORD PTR [ebx],eax
c00111bb:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00111be:	eb 1d                	jmp    c00111dd <KeGetProcessEnvPair(Process*, int)+0x8c>
c00111c0:	83 ec 0c             	sub    esp,0xc
c00111c3:	68 d2 1c 02 c0       	push   0xc0021cd2
c00111c8:	e8 ac 00 00 00       	call   c0011279 <KePanic(char const*)>
c00111cd:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00111d3:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00111da:	83 c4 10             	add    esp,0x10
c00111dd:	89 d8                	mov    eax,ebx
c00111df:	5b                   	pop    ebx
c00111e0:	5e                   	pop    esi
c00111e1:	5f                   	pop    edi
c00111e2:	c2 04 00             	ret    0x4

c00111e5 <CPU::current()>:
c00111e5:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c00111ea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00111f0:	c3                   	ret    

c00111f1 <operator new(unsigned long)>:
c00111f1:	e9 c0 68 ff ff       	jmp    c0007ab6 <malloc>

c00111f6 <operator delete(void*)>:
c00111f6:	e9 db 68 ff ff       	jmp    c0007ad6 <rfree>

c00111fb <disableIRQs()>:
c00111fb:	fa                   	cli    
c00111fc:	c3                   	ret    

c00111fd <enableIRQs()>:
c00111fd:	fb                   	sti    
c00111fe:	c3                   	ret    

c00111ff <lockScheduler()>:
c00111ff:	fa                   	cli    
c0011200:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0011206:	c3                   	ret    

c0011207 <unlockScheduler()>:
c0011207:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001120c:	48                   	dec    eax
c001120d:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0011212:	75 01                	jne    c0011215 <unlockScheduler()+0xe>
c0011214:	fb                   	sti    
c0011215:	c3                   	ret    

c0011216 <lockStuff()>:
c0011216:	fa                   	cli    
c0011217:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001121d:	ff 05 c4 96 02 c0    	inc    DWORD PTR ds:0xc00296c4
c0011223:	c3                   	ret    

c0011224 <unlockStuff()>:
c0011224:	83 ec 0c             	sub    esp,0xc
c0011227:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c001122c:	48                   	dec    eax
c001122d:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0011232:	75 18                	jne    c001124c <unlockStuff()+0x28>
c0011234:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c001123b:	74 0f                	je     c001124c <unlockStuff()+0x28>
c001123d:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0011247:	e8 ec 48 00 00       	call   c0015b38 <schedule()>
c001124c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0011251:	48                   	dec    eax
c0011252:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0011257:	75 01                	jne    c001125a <unlockStuff()+0x36>
c0011259:	fb                   	sti    
c001125a:	83 c4 0c             	add    esp,0xc
c001125d:	c3                   	ret    

c001125e <Virt::getAKernelVAS()>:
c001125e:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c0011263:	c3                   	ret    

c0011264 <__not_memcpy>:
c0011264:	57                   	push   edi
c0011265:	56                   	push   esi
c0011266:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001126a:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001126e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0011272:	89 c7                	mov    edi,eax
c0011274:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011276:	5e                   	pop    esi
c0011277:	5f                   	pop    edi
c0011278:	c3                   	ret    

c0011279 <KePanic(char const*)>:
c0011279:	c6 05 88 8e 02 c0 01 	mov    BYTE PTR ds:0xc0028e88,0x1
c0011280:	e9 59 68 00 00       	jmp    c0017ade <HalPanic(char const*)>

c0011285 <KePowerThread(void*)>:
c0011285:	83 ec 0c             	sub    esp,0xc
c0011288:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001128d:	48                   	dec    eax
c001128e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0011293:	75 01                	jne    c0011296 <KePowerThread(void*)+0x11>
c0011295:	fb                   	sti    
c0011296:	83 ec 0c             	sub    esp,0xc
c0011299:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c00112a0:	6a 0a                	push   0xa
c00112a2:	e8 d5 4b 00 00       	call   c0015e7c <sleep(unsigned int)>
c00112a7:	83 05 e4 8e 02 c0 0a 	add    DWORD PTR ds:0xc0028ee4,0xa
c00112ae:	83 c4 10             	add    esp,0x10
c00112b1:	eb e3                	jmp    c0011296 <KePowerThread(void*)+0x11>

c00112b3 <KeChangePowerSettings(PowerSettings)>:
c00112b3:	57                   	push   edi
c00112b4:	b9 09 00 00 00       	mov    ecx,0x9
c00112b9:	56                   	push   esi
c00112ba:	bf c0 8e 02 c0       	mov    edi,0xc0028ec0
c00112bf:	fc                   	cld    
c00112c0:	8d 74 24 0c          	lea    esi,[esp+0xc]
c00112c4:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00112c6:	5e                   	pop    esi
c00112c7:	5f                   	pop    edi
c00112c8:	c3                   	ret    

c00112c9 <KeUserIOReceived()>:
c00112c9:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c00112d3:	c3                   	ret    

c00112d4 <KeHandlePowerButton()>:
c00112d4:	83 ec 0c             	sub    esp,0xc
c00112d7:	a1 c0 8e 02 c0       	mov    eax,ds:0xc0028ec0
c00112dc:	83 f8 02             	cmp    eax,0x2
c00112df:	75 10                	jne    c00112f1 <KeHandlePowerButton()+0x1d>
c00112e1:	83 ec 0c             	sub    esp,0xc
c00112e4:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00112ea:	e8 39 5e ff ff       	call   c0007128 <Computer::shutdown()>
c00112ef:	eb 11                	jmp    c0011302 <KeHandlePowerButton()+0x2e>
c00112f1:	48                   	dec    eax
c00112f2:	75 11                	jne    c0011305 <KeHandlePowerButton()+0x31>
c00112f4:	83 ec 0c             	sub    esp,0xc
c00112f7:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00112fd:	e8 56 5e ff ff       	call   c0007158 <Computer::sleep()>
c0011302:	83 c4 10             	add    esp,0x10
c0011305:	83 c4 0c             	add    esp,0xc
c0011308:	c3                   	ret    

c0011309 <KeHandleSleepButton()>:
c0011309:	83 ec 0c             	sub    esp,0xc
c001130c:	a1 c4 8e 02 c0       	mov    eax,ds:0xc0028ec4
c0011311:	83 f8 02             	cmp    eax,0x2
c0011314:	75 10                	jne    c0011326 <KeHandleSleepButton()+0x1d>
c0011316:	83 ec 0c             	sub    esp,0xc
c0011319:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001131f:	e8 04 5e ff ff       	call   c0007128 <Computer::shutdown()>
c0011324:	eb 11                	jmp    c0011337 <KeHandleSleepButton()+0x2e>
c0011326:	48                   	dec    eax
c0011327:	75 11                	jne    c001133a <KeHandleSleepButton()+0x31>
c0011329:	83 ec 0c             	sub    esp,0xc
c001132c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0011332:	e8 21 5e ff ff       	call   c0007158 <Computer::sleep()>
c0011337:	83 c4 10             	add    esp,0x10
c001133a:	83 c4 0c             	add    esp,0xc
c001133d:	c3                   	ret    

c001133e <KeSetupPowerManager()>:
c001133e:	83 ec 0c             	sub    esp,0xc
c0011341:	c7 05 e4 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ee4,0x0
c001134b:	68 f0 00 00 00       	push   0xf0
c0011350:	c6 05 a0 8e 02 c0 00 	mov    BYTE PTR ds:0xc0028ea0,0x0
c0011357:	6a 00                	push   0x0
c0011359:	68 85 12 01 c0       	push   0xc0011285
c001135e:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0011364:	e8 7f 45 00 00       	call   c00158e8 <Process::createThread(void (*)(void*), void*, int)>
c0011369:	c7 05 c0 8e 02 c0 02 00 00 00 	mov    DWORD PTR ds:0xc0028ec0,0x2
c0011373:	c7 05 c4 8e 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0028ec4,0x1
c001137d:	c7 05 c8 8e 02 c0 03 00 00 00 	mov    DWORD PTR ds:0xc0028ec8,0x3
c0011387:	c7 05 cc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ecc,0x0
c0011391:	c7 05 d8 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed8,0x0
c001139b:	c7 05 d0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ed0,0x0
c00113a5:	c7 05 dc 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028edc,0x0
c00113af:	c7 05 d4 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ed4,0x3c
c00113b9:	c7 05 e0 8e 02 c0 3c 00 00 00 	mov    DWORD PTR ds:0xc0028ee0,0x3c
c00113c3:	83 c4 1c             	add    esp,0x1c
c00113c6:	c3                   	ret    

c00113c7 <KeRand()>:
c00113c7:	69 05 e8 8e 02 c0 75 28 00 00 	imul   eax,DWORD PTR ds:0xc0028ee8,0x2875
c00113d1:	69 0d ec 8e 02 c0 75 b1 e7 a2 	imul   ecx,DWORD PTR ds:0xc0028eec,0xa2e7b175
c00113db:	53                   	push   ebx
c00113dc:	01 c1                	add    ecx,eax
c00113de:	b8 75 b1 e7 a2       	mov    eax,0xa2e7b175
c00113e3:	f7 25 e8 8e 02 c0    	mul    DWORD PTR ds:0xc0028ee8
c00113e9:	01 ca                	add    edx,ecx
c00113eb:	05 ef 04 b5 00       	add    eax,0xb504ef
c00113f0:	83 d2 00             	adc    edx,0x0
c00113f3:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c00113f8:	0f b7 da             	movzx  ebx,dx
c00113fb:	89 da                	mov    edx,ebx
c00113fd:	89 1d ec 8e 02 c0    	mov    DWORD PTR ds:0xc0028eec,ebx
c0011403:	0f ac d0 0e          	shrd   eax,edx,0xe
c0011407:	5b                   	pop    ebx
c0011408:	c3                   	ret    

c0011409 <KeSeedRand(unsigned int)>:
c0011409:	53                   	push   ebx
c001140a:	83 ec 08             	sub    esp,0x8
c001140d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011411:	e8 e7 69 00 00       	call   c0017dfd <HalGetRand()>
c0011416:	c7 05 ec 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028eec,0x0
c0011420:	31 d8                	xor    eax,ebx
c0011422:	a3 e8 8e 02 c0       	mov    ds:0xc0028ee8,eax
c0011427:	e8 9b ff ff ff       	call   c00113c7 <KeRand()>
c001142c:	83 c4 08             	add    esp,0x8
c001142f:	5b                   	pop    ebx
c0011430:	eb 95                	jmp    c00113c7 <KeRand()>

c0011432 <KeInitRand()>:
c0011432:	83 ec 0c             	sub    esp,0xc
c0011435:	e8 b8 67 00 00       	call   c0017bf2 <HalQueryPerformanceCounter()>
c001143a:	0f 20 da             	mov    edx,cr3
c001143d:	0f 22 da             	mov    cr3,edx
c0011440:	0f 20 da             	mov    edx,cr3
c0011443:	0f 22 da             	mov    cr3,edx
c0011446:	0f 20 da             	mov    edx,cr3
c0011449:	0f 22 da             	mov    cr3,edx
c001144c:	0f 20 da             	mov    edx,cr3
c001144f:	0f 22 da             	mov    cr3,edx
c0011452:	83 ec 0c             	sub    esp,0xc
c0011455:	35 03 8a 95 38       	xor    eax,0x38958a03
c001145a:	50                   	push   eax
c001145b:	e8 a9 ff ff ff       	call   c0011409 <KeSeedRand(unsigned int)>
c0011460:	83 c4 1c             	add    esp,0x1c
c0011463:	c3                   	ret    

c0011464 <KeResolveCompatibilitySymbol(char*)>:
c0011464:	83 ec 0c             	sub    esp,0xc
c0011467:	83 ec 08             	sub    esp,0x8
c001146a:	68 ec 1c 02 c0       	push   0xc0021cec
c001146f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011473:	e8 d8 f2 fe ff       	call   c0000750 <strcmp>
c0011478:	83 c4 10             	add    esp,0x10
c001147b:	85 c0                	test   eax,eax
c001147d:	0f 94 c0             	sete   al
c0011480:	0f b6 c0             	movzx  eax,al
c0011483:	85 c0                	test   eax,eax
c0011485:	74 0d                	je     c0011494 <KeResolveCompatibilitySymbol(char*)+0x30>
c0011487:	b8 b8 5e 02 c0       	mov    eax,0xc0025eb8
c001148c:	e9 8b 01 00 00       	jmp    c001161c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011491:	8d 76 00             	lea    esi,[esi+0x0]
c0011494:	83 ec 08             	sub    esp,0x8
c0011497:	68 f5 1c 02 c0       	push   0xc0021cf5
c001149c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114a0:	e8 ab f2 fe ff       	call   c0000750 <strcmp>
c00114a5:	83 c4 10             	add    esp,0x10
c00114a8:	85 c0                	test   eax,eax
c00114aa:	0f 94 c0             	sete   al
c00114ad:	0f b6 c0             	movzx  eax,al
c00114b0:	85 c0                	test   eax,eax
c00114b2:	74 0c                	je     c00114c0 <KeResolveCompatibilitySymbol(char*)+0x5c>
c00114b4:	b8 b0 f1 01 c0       	mov    eax,0xc001f1b0
c00114b9:	e9 5e 01 00 00       	jmp    c001161c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114be:	66 90                	xchg   ax,ax
c00114c0:	83 ec 08             	sub    esp,0x8
c00114c3:	68 ff 1c 02 c0       	push   0xc0021cff
c00114c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114cc:	e8 7f f2 fe ff       	call   c0000750 <strcmp>
c00114d1:	83 c4 10             	add    esp,0x10
c00114d4:	85 c0                	test   eax,eax
c00114d6:	0f 94 c0             	sete   al
c00114d9:	0f b6 c0             	movzx  eax,al
c00114dc:	85 c0                	test   eax,eax
c00114de:	74 0c                	je     c00114ec <KeResolveCompatibilitySymbol(char*)+0x88>
c00114e0:	b8 e4 ee 01 c0       	mov    eax,0xc001eee4
c00114e5:	e9 32 01 00 00       	jmp    c001161c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00114ea:	66 90                	xchg   ax,ax
c00114ec:	83 ec 08             	sub    esp,0x8
c00114ef:	68 08 1d 02 c0       	push   0xc0021d08
c00114f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00114f8:	e8 53 f2 fe ff       	call   c0000750 <strcmp>
c00114fd:	83 c4 10             	add    esp,0x10
c0011500:	85 c0                	test   eax,eax
c0011502:	0f 94 c0             	sete   al
c0011505:	0f b6 c0             	movzx  eax,al
c0011508:	85 c0                	test   eax,eax
c001150a:	74 0c                	je     c0011518 <KeResolveCompatibilitySymbol(char*)+0xb4>
c001150c:	b8 79 12 01 c0       	mov    eax,0xc0011279
c0011511:	e9 06 01 00 00       	jmp    c001161c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011516:	66 90                	xchg   ax,ax
c0011518:	83 ec 08             	sub    esp,0x8
c001151b:	68 1b 1d 02 c0       	push   0xc0021d1b
c0011520:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011524:	e8 27 f2 fe ff       	call   c0000750 <strcmp>
c0011529:	83 c4 10             	add    esp,0x10
c001152c:	85 c0                	test   eax,eax
c001152e:	0f 94 c0             	sete   al
c0011531:	0f b6 c0             	movzx  eax,al
c0011534:	85 c0                	test   eax,eax
c0011536:	74 0c                	je     c0011544 <KeResolveCompatibilitySymbol(char*)+0xe0>
c0011538:	b8 a3 0b 01 c0       	mov    eax,0xc0010ba3
c001153d:	e9 da 00 00 00       	jmp    c001161c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011542:	66 90                	xchg   ax,ax
c0011544:	83 ec 08             	sub    esp,0x8
c0011547:	68 38 1d 02 c0       	push   0xc0021d38
c001154c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011550:	e8 fb f1 fe ff       	call   c0000750 <strcmp>
c0011555:	83 c4 10             	add    esp,0x10
c0011558:	85 c0                	test   eax,eax
c001155a:	0f 94 c0             	sete   al
c001155d:	0f b6 c0             	movzx  eax,al
c0011560:	85 c0                	test   eax,eax
c0011562:	74 0c                	je     c0011570 <KeResolveCompatibilitySymbol(char*)+0x10c>
c0011564:	b8 b0 f2 01 c0       	mov    eax,0xc001f2b0
c0011569:	e9 ae 00 00 00       	jmp    c001161c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001156e:	66 90                	xchg   ax,ax
c0011570:	83 ec 08             	sub    esp,0x8
c0011573:	68 42 1d 02 c0       	push   0xc0021d42
c0011578:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001157c:	e8 cf f1 fe ff       	call   c0000750 <strcmp>
c0011581:	83 c4 10             	add    esp,0x10
c0011584:	85 c0                	test   eax,eax
c0011586:	0f 94 c0             	sete   al
c0011589:	0f b6 c0             	movzx  eax,al
c001158c:	85 c0                	test   eax,eax
c001158e:	74 0c                	je     c001159c <KeResolveCompatibilitySymbol(char*)+0x138>
c0011590:	b8 30 f0 01 c0       	mov    eax,0xc001f030
c0011595:	e9 82 00 00 00       	jmp    c001161c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c001159a:	66 90                	xchg   ax,ax
c001159c:	83 ec 08             	sub    esp,0x8
c001159f:	68 4b 1d 02 c0       	push   0xc0021d4b
c00115a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115a8:	e8 a3 f1 fe ff       	call   c0000750 <strcmp>
c00115ad:	83 c4 10             	add    esp,0x10
c00115b0:	85 c0                	test   eax,eax
c00115b2:	0f 94 c0             	sete   al
c00115b5:	0f b6 c0             	movzx  eax,al
c00115b8:	85 c0                	test   eax,eax
c00115ba:	74 08                	je     c00115c4 <KeResolveCompatibilitySymbol(char*)+0x160>
c00115bc:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c00115c1:	eb 59                	jmp    c001161c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115c3:	90                   	nop
c00115c4:	83 ec 08             	sub    esp,0x8
c00115c7:	68 63 1d 02 c0       	push   0xc0021d63
c00115cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115d0:	e8 7b f1 fe ff       	call   c0000750 <strcmp>
c00115d5:	83 c4 10             	add    esp,0x10
c00115d8:	85 c0                	test   eax,eax
c00115da:	0f 94 c0             	sete   al
c00115dd:	0f b6 c0             	movzx  eax,al
c00115e0:	85 c0                	test   eax,eax
c00115e2:	74 08                	je     c00115ec <KeResolveCompatibilitySymbol(char*)+0x188>
c00115e4:	b8 bc 5e 02 c0       	mov    eax,0xc0025ebc
c00115e9:	eb 31                	jmp    c001161c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c00115eb:	90                   	nop
c00115ec:	83 ec 08             	sub    esp,0x8
c00115ef:	68 70 1d 02 c0       	push   0xc0021d70
c00115f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00115f8:	e8 53 f1 fe ff       	call   c0000750 <strcmp>
c00115fd:	83 c4 10             	add    esp,0x10
c0011600:	85 c0                	test   eax,eax
c0011602:	0f 94 c0             	sete   al
c0011605:	0f b6 c0             	movzx  eax,al
c0011608:	85 c0                	test   eax,eax
c001160a:	74 08                	je     c0011614 <KeResolveCompatibilitySymbol(char*)+0x1b0>
c001160c:	b8 bd 5e 02 c0       	mov    eax,0xc0025ebd
c0011611:	eb 09                	jmp    c001161c <KeResolveCompatibilitySymbol(char*)+0x1b8>
c0011613:	90                   	nop
c0011614:	b8 00 00 00 00       	mov    eax,0x0
c0011619:	8d 76 00             	lea    esi,[esi+0x0]
c001161c:	83 c4 0c             	add    esp,0xc
c001161f:	c3                   	ret    

c0011620 <KiSigKill(int)>:
c0011620:	83 ec 0c             	sub    esp,0xc
c0011623:	6a 00                	push   0x0
c0011625:	6a 00                	push   0x0
c0011627:	6a ff                	push   0xffffffff
c0011629:	6a 01                	push   0x1
c001162b:	e8 22 2a 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011630:	83 c4 1c             	add    esp,0x1c
c0011633:	c3                   	ret    

c0011634 <KiDefaultSignalHandlerIgnore(int)>:
c0011634:	c3                   	ret    

c0011635 <KiDefaultSignalHandlerPause(int)>:
c0011635:	57                   	push   edi
c0011636:	b9 07 00 00 00       	mov    ecx,0x7
c001163b:	56                   	push   esi
c001163c:	be b9 1d 02 c0       	mov    esi,0xc0021db9
c0011641:	83 ec 24             	sub    esp,0x24
c0011644:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0011648:	fc                   	cld    
c0011649:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001164b:	8d 44 24 04          	lea    eax,[esp+0x4]
c001164f:	50                   	push   eax
c0011650:	6a 00                	push   0x0
c0011652:	6a 00                	push   0x0
c0011654:	6a 27                	push   0x27
c0011656:	e8 f7 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c001165b:	83 c4 34             	add    esp,0x34
c001165e:	5e                   	pop    esi
c001165f:	5f                   	pop    edi
c0011660:	c3                   	ret    

c0011661 <KiDefaultSignalHandlerResume(int)>:
c0011661:	57                   	push   edi
c0011662:	b9 1d 00 00 00       	mov    ecx,0x1d
c0011667:	56                   	push   esi
c0011668:	be d5 1d 02 c0       	mov    esi,0xc0021dd5
c001166d:	83 ec 24             	sub    esp,0x24
c0011670:	8d 7c 24 03          	lea    edi,[esp+0x3]
c0011674:	fc                   	cld    
c0011675:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011677:	8d 44 24 03          	lea    eax,[esp+0x3]
c001167b:	50                   	push   eax
c001167c:	6a 00                	push   0x0
c001167e:	6a 00                	push   0x0
c0011680:	6a 27                	push   0x27
c0011682:	e8 cb 29 01 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0011687:	83 c4 34             	add    esp,0x34
c001168a:	5e                   	pop    esi
c001168b:	5f                   	pop    edi
c001168c:	c3                   	ret    

c001168d <KeDeinitSignals(SigHandlerBlock*)>:
c001168d:	e9 34 64 ff ff       	jmp    c0007ac6 <free>

c0011692 <KeInitSignals()>:
c0011692:	53                   	push   ebx
c0011693:	83 ec 14             	sub    esp,0x14
c0011696:	68 c8 00 00 00       	push   0xc8
c001169b:	e8 16 64 ff ff       	call   c0007ab6 <malloc>
c00116a0:	83 c4 0c             	add    esp,0xc
c00116a3:	c7 80 bc 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xbc],0x0
c00116ad:	c7 80 c0 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc0],0x0
c00116b7:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c00116be:	89 c3                	mov    ebx,eax
c00116c0:	6a 20                	push   0x20
c00116c2:	8d 80 9c 00 00 00    	lea    eax,[eax+0x9c]
c00116c8:	6a 00                	push   0x0
c00116ca:	50                   	push   eax
c00116cb:	e8 20 ee fe ff       	call   c00004f0 <memset>
c00116d0:	83 c4 0c             	add    esp,0xc
c00116d3:	6a 44                	push   0x44
c00116d5:	6a 00                	push   0x0
c00116d7:	53                   	push   ebx
c00116d8:	e8 13 ee fe ff       	call   c00004f0 <memset>
c00116dd:	89 d8                	mov    eax,ebx
c00116df:	83 c4 18             	add    esp,0x18
c00116e2:	5b                   	pop    ebx
c00116e3:	c3                   	ret    

c00116e4 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>:
c00116e4:	53                   	push   ebx
c00116e5:	b8 01 00 00 00       	mov    eax,0x1
c00116ea:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00116ee:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00116f2:	83 f9 10             	cmp    ecx,0x10
c00116f5:	7f 21                	jg     c0011718 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)+0x34>
c00116f7:	8d 1c 8a             	lea    ebx,[edx+ecx*4]
c00116fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00116fe:	89 03                	mov    DWORD PTR [ebx],eax
c0011700:	b8 01 00 00 00       	mov    eax,0x1
c0011705:	d3 e0                	shl    eax,cl
c0011707:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c001170b:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c001170e:	c6 84 0a 88 00 00 00 00 	mov    BYTE PTR [edx+ecx*1+0x88],0x0
c0011716:	31 c0                	xor    eax,eax
c0011718:	5b                   	pop    ebx
c0011719:	c3                   	ret    

c001171a <KeRaiseSignal(SigHandlerBlock*, int)>:
c001171a:	55                   	push   ebp
c001171b:	57                   	push   edi
c001171c:	bf 08 00 00 00       	mov    edi,0x8
c0011721:	56                   	push   esi
c0011722:	53                   	push   ebx
c0011723:	83 ec 18             	sub    esp,0x18
c0011726:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001172a:	68 f2 1d 02 c0       	push   0xc0021df2
c001172f:	e8 11 92 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0011734:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001173b:	8b ab bc 00 00 00    	mov    ebp,DWORD PTR [ebx+0xbc]
c0011741:	83 c4 10             	add    esp,0x10
c0011744:	31 c9                	xor    ecx,ecx
c0011746:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c001174a:	99                   	cdq    
c001174b:	f7 ff                	idiv   edi
c001174d:	8d 42 24             	lea    eax,[edx+0x24]
c0011750:	8b 74 83 0c          	mov    esi,DWORD PTR [ebx+eax*4+0xc]
c0011754:	85 f6                	test   esi,esi
c0011756:	75 1a                	jne    c0011772 <KeRaiseSignal(SigHandlerBlock*, int)+0x58>
c0011758:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001175c:	89 4c 83 0c          	mov    DWORD PTR [ebx+eax*4+0xc],ecx
c0011760:	50                   	push   eax
c0011761:	50                   	push   eax
c0011762:	52                   	push   edx
c0011763:	68 03 1e 02 c0       	push   0xc0021e03
c0011768:	e8 d8 91 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001176d:	83 c4 10             	add    esp,0x10
c0011770:	eb 1b                	jmp    c001178d <KeRaiseSignal(SigHandlerBlock*, int)+0x73>
c0011772:	41                   	inc    ecx
c0011773:	83 f9 08             	cmp    ecx,0x8
c0011776:	75 ce                	jne    c0011746 <KeRaiseSignal(SigHandlerBlock*, int)+0x2c>
c0011778:	83 ec 0c             	sub    esp,0xc
c001177b:	be 01 00 00 00       	mov    esi,0x1
c0011780:	68 24 1e 02 c0       	push   0xc0021e24
c0011785:	e8 bb 91 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001178a:	83 c4 10             	add    esp,0x10
c001178d:	83 c4 0c             	add    esp,0xc
c0011790:	89 f0                	mov    eax,esi
c0011792:	5b                   	pop    ebx
c0011793:	5e                   	pop    esi
c0011794:	5f                   	pop    edi
c0011795:	5d                   	pop    ebp
c0011796:	c3                   	ret    

c0011797 <KeCheckSignal(SigHandlerBlock*, int*)>:
c0011797:	55                   	push   ebp
c0011798:	57                   	push   edi
c0011799:	56                   	push   esi
c001179a:	53                   	push   ebx
c001179b:	51                   	push   ecx
c001179c:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00117a0:	85 db                	test   ebx,ebx
c00117a2:	0f 84 bc 00 00 00    	je     c0011864 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00117a8:	80 bb c4 00 00 00 00 	cmp    BYTE PTR [ebx+0xc4],0x0
c00117af:	0f 84 af 00 00 00    	je     c0011864 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00117b5:	31 c9                	xor    ecx,ecx
c00117b7:	bf 08 00 00 00       	mov    edi,0x8
c00117bc:	8b b3 bc 00 00 00    	mov    esi,DWORD PTR [ebx+0xbc]
c00117c2:	8d 04 0e             	lea    eax,[esi+ecx*1]
c00117c5:	99                   	cdq    
c00117c6:	f7 ff                	idiv   edi
c00117c8:	8b ac 93 9c 00 00 00 	mov    ebp,DWORD PTR [ebx+edx*4+0x9c]
c00117cf:	85 ed                	test   ebp,ebp
c00117d1:	0f 84 9e 00 00 00    	je     c0011875 <KeCheckSignal(SigHandlerBlock*, int*)+0xde>
c00117d7:	89 e9                	mov    ecx,ebp
c00117d9:	8b 83 c0 00 00 00    	mov    eax,DWORD PTR [ebx+0xc0]
c00117df:	bf 01 00 00 00       	mov    edi,0x1
c00117e4:	89 04 24             	mov    DWORD PTR [esp],eax
c00117e7:	d3 e7                	shl    edi,cl
c00117e9:	31 c9                	xor    ecx,ecx
c00117eb:	b8 01 00 00 00       	mov    eax,0x1
c00117f0:	d3 e0                	shl    eax,cl
c00117f2:	85 04 24             	test   DWORD PTR [esp],eax
c00117f5:	74 06                	je     c00117fd <KeCheckSignal(SigHandlerBlock*, int*)+0x66>
c00117f7:	85 7c 8b 44          	test   DWORD PTR [ebx+ecx*4+0x44],edi
c00117fb:	75 67                	jne    c0011864 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c00117fd:	41                   	inc    ecx
c00117fe:	83 f9 11             	cmp    ecx,0x11
c0011801:	75 e8                	jne    c00117eb <KeCheckSignal(SigHandlerBlock*, int*)+0x54>
c0011803:	46                   	inc    esi
c0011804:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0011807:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001180d:	09 f8                	or     eax,edi
c001180f:	c7 84 93 9c 00 00 00 00 00 00 00 	mov    DWORD PTR [ebx+edx*4+0x9c],0x0
c001181a:	89 83 c0 00 00 00    	mov    DWORD PTR [ebx+0xc0],eax
c0011820:	c6 83 c4 00 00 00 00 	mov    BYTE PTR [ebx+0xc4],0x0
c0011827:	31 c0                	xor    eax,eax
c0011829:	83 bc 83 9c 00 00 00 00 	cmp    DWORD PTR [ebx+eax*4+0x9c],0x0
c0011831:	74 09                	je     c001183c <KeCheckSignal(SigHandlerBlock*, int*)+0xa5>
c0011833:	c6 83 c4 00 00 00 01 	mov    BYTE PTR [ebx+0xc4],0x1
c001183a:	eb 06                	jmp    c0011842 <KeCheckSignal(SigHandlerBlock*, int*)+0xab>
c001183c:	40                   	inc    eax
c001183d:	83 f8 08             	cmp    eax,0x8
c0011840:	75 e7                	jne    c0011829 <KeCheckSignal(SigHandlerBlock*, int*)+0x92>
c0011842:	8b 04 ab             	mov    eax,DWORD PTR [ebx+ebp*4]
c0011845:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0011849:	83 fd 09             	cmp    ebp,0x9
c001184c:	89 2a                	mov    DWORD PTR [edx],ebp
c001184e:	75 07                	jne    c0011857 <KeCheckSignal(SigHandlerBlock*, int*)+0xc0>
c0011850:	b8 20 16 01 c0       	mov    eax,0xc0011620
c0011855:	eb 31                	jmp    c0011888 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011857:	83 f8 01             	cmp    eax,0x1
c001185a:	75 0c                	jne    c0011868 <KeCheckSignal(SigHandlerBlock*, int*)+0xd1>
c001185c:	f7 d7                	not    edi
c001185e:	21 bb c0 00 00 00    	and    DWORD PTR [ebx+0xc0],edi
c0011864:	31 c0                	xor    eax,eax
c0011866:	eb 20                	jmp    c0011888 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011868:	85 c0                	test   eax,eax
c001186a:	75 1c                	jne    c0011888 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c001186c:	8b 04 ad 20 32 02 c0 	mov    eax,DWORD PTR [ebp*4-0x3ffdcde0]
c0011873:	eb 13                	jmp    c0011888 <KeCheckSignal(SigHandlerBlock*, int*)+0xf1>
c0011875:	46                   	inc    esi
c0011876:	41                   	inc    ecx
c0011877:	89 b3 bc 00 00 00    	mov    DWORD PTR [ebx+0xbc],esi
c001187d:	83 f9 08             	cmp    ecx,0x8
c0011880:	0f 85 36 ff ff ff    	jne    c00117bc <KeCheckSignal(SigHandlerBlock*, int*)+0x25>
c0011886:	eb dc                	jmp    c0011864 <KeCheckSignal(SigHandlerBlock*, int*)+0xcd>
c0011888:	5a                   	pop    edx
c0011889:	5b                   	pop    ebx
c001188a:	5e                   	pop    esi
c001188b:	5f                   	pop    edi
c001188c:	5d                   	pop    ebp
c001188d:	c3                   	ret    

c001188e <KiCheckSignalZ>:
c001188e:	83 ec 10             	sub    esp,0x10
c0011891:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0011895:	50                   	push   eax
c0011896:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001189b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001189e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c00118a4:	e8 ee fe ff ff       	call   c0011797 <KeCheckSignal(SigHandlerBlock*, int*)>
c00118a9:	5a                   	pop    edx
c00118aa:	31 d2                	xor    edx,edx
c00118ac:	59                   	pop    ecx
c00118ad:	85 c0                	test   eax,eax
c00118af:	74 19                	je     c00118ca <KiCheckSignalZ+0x3c>
c00118b1:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00118b7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00118ba:	89 02                	mov    DWORD PTR [edx],eax
c00118bc:	c7 42 04 00 00 00 00 	mov    DWORD PTR [edx+0x4],0x0
c00118c3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00118c7:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c00118ca:	89 d0                	mov    eax,edx
c00118cc:	83 c4 10             	add    esp,0x10
c00118cf:	c3                   	ret    

c00118d0 <KeCompleteSignal(SigHandlerBlock*, int)>:
c00118d0:	56                   	push   esi
c00118d1:	53                   	push   ebx
c00118d2:	bb 01 00 00 00       	mov    ebx,0x1
c00118d7:	52                   	push   edx
c00118d8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00118dc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00118e0:	d3 e3                	shl    ebx,cl
c00118e2:	83 f9 10             	cmp    ecx,0x10
c00118e5:	7f 08                	jg     c00118ef <KeCompleteSignal(SigHandlerBlock*, int)+0x1f>
c00118e7:	85 9e c0 00 00 00    	test   DWORD PTR [esi+0xc0],ebx
c00118ed:	75 10                	jne    c00118ff <KeCompleteSignal(SigHandlerBlock*, int)+0x2f>
c00118ef:	83 ec 0c             	sub    esp,0xc
c00118f2:	68 35 1e 02 c0       	push   0xc0021e35
c00118f7:	e8 7d f9 ff ff       	call   c0011279 <KePanic(char const*)>
c00118fc:	83 c4 10             	add    esp,0x10
c00118ff:	f7 d3                	not    ebx
c0011901:	21 9e c0 00 00 00    	and    DWORD PTR [esi+0xc0],ebx
c0011907:	58                   	pop    eax
c0011908:	5b                   	pop    ebx
c0011909:	5e                   	pop    esi
c001190a:	c3                   	ret    

c001190b <KiFinishSignalZ>:
c001190b:	53                   	push   ebx
c001190c:	83 ec 10             	sub    esp,0x10
c001190f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0011913:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c0011916:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001191b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001191e:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0011924:	e8 a7 ff ff ff       	call   c00118d0 <KeCompleteSignal(SigHandlerBlock*, int)>
c0011929:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001192f:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0011936:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c001193d:	83 c4 18             	add    esp,0x18
c0011940:	5b                   	pop    ebx
c0011941:	c3                   	ret    

c0011942 <SysSeekDir(regs*)>:
c0011942:	31 c0                	xor    eax,eax
c0011944:	31 d2                	xor    edx,edx
c0011946:	c3                   	ret    

c0011947 <SysTellDir(regs*)>:
c0011947:	31 c0                	xor    eax,eax
c0011949:	31 d2                	xor    edx,edx
c001194b:	c3                   	ret    

c001194c <SysVerify(regs*)>:
c001194c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011950:	31 d2                	xor    edx,edx
c0011952:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011955:	c3                   	ret    

c0011956 <SysGetArgc(regs*)>:
c0011956:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001195b:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001195e:	8b 80 16 05 00 00    	mov    eax,DWORD PTR [eax+0x516]
c0011964:	89 c2                	mov    edx,eax
c0011966:	c1 fa 1f             	sar    edx,0x1f
c0011969:	c3                   	ret    

c001196a <SysTTYName(regs*)>:
c001196a:	b8 01 00 00 00       	mov    eax,0x1
c001196f:	31 d2                	xor    edx,edx
c0011971:	c3                   	ret    

c0011972 <SysFormatDisk(regs*)>:
c0011972:	56                   	push   esi
c0011973:	53                   	push   ebx
c0011974:	83 ec 04             	sub    esp,0x4
c0011977:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001197b:	8b 1d 04 64 02 c0    	mov    ebx,DWORD PTR ds:0xc0026404
c0011981:	eb 28                	jmp    c00119ab <SysFormatDisk(regs*)+0x39>
c0011983:	83 ec 0c             	sub    esp,0xc
c0011986:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0011989:	8b 4e 28             	mov    ecx,DWORD PTR [esi+0x28]
c001198c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001198e:	51                   	push   ecx
c001198f:	8b 4e 24             	mov    ecx,DWORD PTR [esi+0x24]
c0011992:	51                   	push   ecx
c0011993:	50                   	push   eax
c0011994:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c001199b:	50                   	push   eax
c001199c:	53                   	push   ebx
c001199d:	ff 52 4c             	call   DWORD PTR [edx+0x4c]
c00119a0:	83 c4 20             	add    esp,0x20
c00119a3:	83 f8 08             	cmp    eax,0x8
c00119a6:	75 14                	jne    c00119bc <SysFormatDisk(regs*)+0x4a>
c00119a8:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c00119ab:	85 db                	test   ebx,ebx
c00119ad:	75 d4                	jne    c0011983 <SysFormatDisk(regs*)+0x11>
c00119af:	83 c4 04             	add    esp,0x4
c00119b2:	b8 03 00 00 00       	mov    eax,0x3
c00119b7:	31 d2                	xor    edx,edx
c00119b9:	5b                   	pop    ebx
c00119ba:	5e                   	pop    esi
c00119bb:	c3                   	ret    
c00119bc:	85 c0                	test   eax,eax
c00119be:	74 1f                	je     c00119df <SysFormatDisk(regs*)+0x6d>
c00119c0:	83 f8 09             	cmp    eax,0x9
c00119c3:	74 0d                	je     c00119d2 <SysFormatDisk(regs*)+0x60>
c00119c5:	83 c4 04             	add    esp,0x4
c00119c8:	b8 02 00 00 00       	mov    eax,0x2
c00119cd:	31 d2                	xor    edx,edx
c00119cf:	5b                   	pop    ebx
c00119d0:	5e                   	pop    esi
c00119d1:	c3                   	ret    
c00119d2:	83 c4 04             	add    esp,0x4
c00119d5:	b8 01 00 00 00       	mov    eax,0x1
c00119da:	31 d2                	xor    edx,edx
c00119dc:	5b                   	pop    ebx
c00119dd:	5e                   	pop    esi
c00119de:	c3                   	ret    
c00119df:	83 c4 04             	add    esp,0x4
c00119e2:	31 c0                	xor    eax,eax
c00119e4:	31 d2                	xor    edx,edx
c00119e6:	5b                   	pop    ebx
c00119e7:	5e                   	pop    esi
c00119e8:	c3                   	ret    

c00119e9 <SysSetDiskVolumeLabel(regs*)>:
c00119e9:	56                   	push   esi
c00119ea:	53                   	push   ebx
c00119eb:	83 ec 04             	sub    esp,0x4
c00119ee:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00119f2:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00119f5:	83 f8 19             	cmp    eax,0x19
c00119f8:	77 33                	ja     c0011a2d <SysSetDiskVolumeLabel(regs*)+0x44>
c00119fa:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0011a01:	85 c9                	test   ecx,ecx
c0011a03:	74 28                	je     c0011a2d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a05:	8b 5a 24             	mov    ebx,DWORD PTR [edx+0x24]
c0011a08:	85 db                	test   ebx,ebx
c0011a0a:	74 21                	je     c0011a2d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a0c:	8b 91 74 01 00 00    	mov    edx,DWORD PTR [ecx+0x174]
c0011a12:	85 d2                	test   edx,edx
c0011a14:	74 17                	je     c0011a2d <SysSetDiskVolumeLabel(regs*)+0x44>
c0011a16:	8b 32                	mov    esi,DWORD PTR [edx]
c0011a18:	53                   	push   ebx
c0011a19:	50                   	push   eax
c0011a1a:	51                   	push   ecx
c0011a1b:	52                   	push   edx
c0011a1c:	ff 56 5c             	call   DWORD PTR [esi+0x5c]
c0011a1f:	83 c4 10             	add    esp,0x10
c0011a22:	89 c2                	mov    edx,eax
c0011a24:	83 c4 04             	add    esp,0x4
c0011a27:	c1 fa 1f             	sar    edx,0x1f
c0011a2a:	5b                   	pop    ebx
c0011a2b:	5e                   	pop    esi
c0011a2c:	c3                   	ret    
c0011a2d:	83 c4 04             	add    esp,0x4
c0011a30:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011a35:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a3a:	5b                   	pop    ebx
c0011a3b:	5e                   	pop    esi
c0011a3c:	c3                   	ret    

c0011a3d <SysGetDiskVolumeLabel(regs*)>:
c0011a3d:	57                   	push   edi
c0011a3e:	56                   	push   esi
c0011a3f:	53                   	push   ebx
c0011a40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a44:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0011a47:	83 fa 19             	cmp    edx,0x19
c0011a4a:	77 3c                	ja     c0011a88 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a4c:	8b 0c 95 80 88 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd7780]
c0011a53:	85 c9                	test   ecx,ecx
c0011a55:	74 31                	je     c0011a88 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a57:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c0011a5a:	85 db                	test   ebx,ebx
c0011a5c:	74 2a                	je     c0011a88 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a5e:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c0011a61:	85 f6                	test   esi,esi
c0011a63:	74 23                	je     c0011a88 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a65:	8b 81 74 01 00 00    	mov    eax,DWORD PTR [ecx+0x174]
c0011a6b:	85 c0                	test   eax,eax
c0011a6d:	74 19                	je     c0011a88 <SysGetDiskVolumeLabel(regs*)+0x4b>
c0011a6f:	83 ec 0c             	sub    esp,0xc
c0011a72:	8b 38                	mov    edi,DWORD PTR [eax]
c0011a74:	56                   	push   esi
c0011a75:	53                   	push   ebx
c0011a76:	52                   	push   edx
c0011a77:	51                   	push   ecx
c0011a78:	50                   	push   eax
c0011a79:	ff 57 58             	call   DWORD PTR [edi+0x58]
c0011a7c:	83 c4 20             	add    esp,0x20
c0011a7f:	89 c2                	mov    edx,eax
c0011a81:	5b                   	pop    ebx
c0011a82:	c1 fa 1f             	sar    edx,0x1f
c0011a85:	5e                   	pop    esi
c0011a86:	5f                   	pop    edi
c0011a87:	c3                   	ret    
c0011a88:	5b                   	pop    ebx
c0011a89:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c0011a8e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011a93:	5e                   	pop    esi
c0011a94:	5f                   	pop    edi
c0011a95:	c3                   	ret    

c0011a96 <SysShutdown(regs*)>:
c0011a96:	83 ec 0c             	sub    esp,0xc
c0011a99:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011a9d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011aa0:	85 c0                	test   eax,eax
c0011aa2:	74 18                	je     c0011abc <SysShutdown(regs*)+0x26>
c0011aa4:	83 f8 01             	cmp    eax,0x1
c0011aa7:	74 38                	je     c0011ae1 <SysShutdown(regs*)+0x4b>
c0011aa9:	83 f8 02             	cmp    eax,0x2
c0011aac:	74 24                	je     c0011ad2 <SysShutdown(regs*)+0x3c>
c0011aae:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ab3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ab8:	83 c4 0c             	add    esp,0xc
c0011abb:	c3                   	ret    
c0011abc:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011ac1:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ac3:	6a 00                	push   0x0
c0011ac5:	6a 00                	push   0x0
c0011ac7:	6a 00                	push   0x0
c0011ac9:	50                   	push   eax
c0011aca:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011acd:	83 c4 10             	add    esp,0x10
c0011ad0:	eb dc                	jmp    c0011aae <SysShutdown(regs*)+0x18>
c0011ad2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0011ad7:	8b 10                	mov    edx,DWORD PTR [eax]
c0011ad9:	6a 00                	push   0x0
c0011adb:	6a 00                	push   0x0
c0011add:	6a 01                	push   0x1
c0011adf:	eb e8                	jmp    c0011ac9 <SysShutdown(regs*)+0x33>
c0011ae1:	a1 00 89 02 c0       	mov    eax,ds:0xc0028900
c0011ae6:	85 c0                	test   eax,eax
c0011ae8:	74 02                	je     c0011aec <SysShutdown(regs*)+0x56>
c0011aea:	ff d0                	call   eax
c0011aec:	31 c0                	xor    eax,eax
c0011aee:	31 d2                	xor    edx,edx
c0011af0:	83 c4 0c             	add    esp,0xc
c0011af3:	c3                   	ret    

c0011af4 <SysRealpath(regs*)>:
c0011af4:	83 ec 0c             	sub    esp,0xc
c0011af7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011afb:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011afe:	85 d2                	test   edx,edx
c0011b00:	74 07                	je     c0011b09 <SysRealpath(regs*)+0x15>
c0011b02:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011b05:	85 c0                	test   eax,eax
c0011b07:	75 0b                	jne    c0011b14 <SysRealpath(regs*)+0x20>
c0011b09:	b8 01 00 00 00       	mov    eax,0x1
c0011b0e:	31 d2                	xor    edx,edx
c0011b10:	83 c4 0c             	add    esp,0xc
c0011b13:	c3                   	ret    
c0011b14:	83 ec 04             	sub    esp,0x4
c0011b17:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0011b1d:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c0011b20:	81 c1 0c 01 00 00    	add    ecx,0x10c
c0011b26:	51                   	push   ecx
c0011b27:	52                   	push   edx
c0011b28:	50                   	push   eax
c0011b29:	e8 5e 9a ff ff       	call   c000b58c <Fs::standardiseFiles(char*, char const*, char const*)>
c0011b2e:	83 c4 10             	add    esp,0x10
c0011b31:	31 c0                	xor    eax,eax
c0011b33:	31 d2                	xor    edx,edx
c0011b35:	83 c4 0c             	add    esp,0xc
c0011b38:	c3                   	ret    

c0011b39 <SysReadDir(regs*)>:
c0011b39:	53                   	push   ebx
c0011b3a:	83 ec 18             	sub    esp,0x18
c0011b3d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011b41:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011b44:	83 f8 02             	cmp    eax,0x2
c0011b47:	76 61                	jbe    c0011baa <SysReadDir(regs*)+0x71>
c0011b49:	81 7b 20 00 ff ff 0f 	cmp    DWORD PTR [ebx+0x20],0xfffff00
c0011b50:	77 49                	ja     c0011b9b <SysReadDir(regs*)+0x62>
c0011b52:	83 ec 0c             	sub    esp,0xc
c0011b55:	50                   	push   eax
c0011b56:	e8 58 79 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011b5b:	83 c4 10             	add    esp,0x10
c0011b5e:	85 c0                	test   eax,eax
c0011b60:	74 39                	je     c0011b9b <SysReadDir(regs*)+0x62>
c0011b62:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011b6a:	83 ec 0c             	sub    esp,0xc
c0011b6d:	8b 10                	mov    edx,DWORD PTR [eax]
c0011b6f:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0011b73:	51                   	push   ecx
c0011b74:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c0011b77:	51                   	push   ecx
c0011b78:	6a 00                	push   0x0
c0011b7a:	68 10 01 00 00       	push   0x110
c0011b7f:	50                   	push   eax
c0011b80:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0011b83:	83 c4 20             	add    esp,0x20
c0011b86:	85 c0                	test   eax,eax
c0011b88:	74 29                	je     c0011bb3 <SysReadDir(regs*)+0x7a>
c0011b8a:	83 f8 07             	cmp    eax,0x7
c0011b8d:	74 1b                	je     c0011baa <SysReadDir(regs*)+0x71>
c0011b8f:	b8 02 00 00 00       	mov    eax,0x2
c0011b94:	31 d2                	xor    edx,edx
c0011b96:	83 c4 18             	add    esp,0x18
c0011b99:	5b                   	pop    ebx
c0011b9a:	c3                   	ret    
c0011b9b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ba0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ba5:	83 c4 18             	add    esp,0x18
c0011ba8:	5b                   	pop    ebx
c0011ba9:	c3                   	ret    
c0011baa:	b8 01 00 00 00       	mov    eax,0x1
c0011baf:	31 d2                	xor    edx,edx
c0011bb1:	eb e3                	jmp    c0011b96 <SysReadDir(regs*)+0x5d>
c0011bb3:	31 c0                	xor    eax,eax
c0011bb5:	31 d2                	xor    edx,edx
c0011bb7:	eb dd                	jmp    c0011b96 <SysReadDir(regs*)+0x5d>

c0011bb9 <SysIsATTY(regs*)>:
c0011bb9:	83 ec 0c             	sub    esp,0xc
c0011bbc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011bc0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011bc3:	83 f8 02             	cmp    eax,0x2
c0011bc6:	76 07                	jbe    c0011bcf <SysIsATTY(regs*)+0x16>
c0011bc8:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011bcd:	75 26                	jne    c0011bf5 <SysIsATTY(regs*)+0x3c>
c0011bcf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011bd4:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011bd7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0011bdd:	85 c0                	test   eax,eax
c0011bdf:	74 24                	je     c0011c05 <SysIsATTY(regs*)+0x4c>
c0011be1:	83 ec 0c             	sub    esp,0xc
c0011be4:	8b 10                	mov    edx,DWORD PTR [eax]
c0011be6:	50                   	push   eax
c0011be7:	ff 12                	call   DWORD PTR [edx]
c0011be9:	31 d2                	xor    edx,edx
c0011beb:	0f b6 c0             	movzx  eax,al
c0011bee:	83 c4 10             	add    esp,0x10
c0011bf1:	83 c4 0c             	add    esp,0xc
c0011bf4:	c3                   	ret    
c0011bf5:	83 ec 0c             	sub    esp,0xc
c0011bf8:	50                   	push   eax
c0011bf9:	e8 b5 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011bfe:	83 c4 10             	add    esp,0x10
c0011c01:	85 c0                	test   eax,eax
c0011c03:	75 dc                	jne    c0011be1 <SysIsATTY(regs*)+0x28>
c0011c05:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c0a:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c0f:	83 c4 0c             	add    esp,0xc
c0011c12:	c3                   	ret    

c0011c13 <SysSeek(regs*)>:
c0011c13:	53                   	push   ebx
c0011c14:	83 ec 08             	sub    esp,0x8
c0011c17:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c1b:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c1e:	8d 50 fd             	lea    edx,[eax-0x3]
c0011c21:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011c27:	77 32                	ja     c0011c5b <SysSeek(regs*)+0x48>
c0011c29:	83 ec 0c             	sub    esp,0xc
c0011c2c:	50                   	push   eax
c0011c2d:	e8 81 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011c32:	83 c4 0c             	add    esp,0xc
c0011c35:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0011c38:	31 db                	xor    ebx,ebx
c0011c3a:	53                   	push   ebx
c0011c3b:	51                   	push   ecx
c0011c3c:	50                   	push   eax
c0011c3d:	e8 7a 9c ff ff       	call   c000b8bc <File::seek(unsigned long long)>
c0011c42:	83 c4 10             	add    esp,0x10
c0011c45:	85 c0                	test   eax,eax
c0011c47:	0f 95 c0             	setne  al
c0011c4a:	31 d2                	xor    edx,edx
c0011c4c:	0f b6 c0             	movzx  eax,al
c0011c4f:	f7 d8                	neg    eax
c0011c51:	83 d2 00             	adc    edx,0x0
c0011c54:	83 c4 08             	add    esp,0x8
c0011c57:	f7 da                	neg    edx
c0011c59:	5b                   	pop    ebx
c0011c5a:	c3                   	ret    
c0011c5b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011c60:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011c65:	83 c4 08             	add    esp,0x8
c0011c68:	5b                   	pop    ebx
c0011c69:	c3                   	ret    

c0011c6a <SysTell(regs*)>:
c0011c6a:	53                   	push   ebx
c0011c6b:	83 ec 08             	sub    esp,0x8
c0011c6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011c72:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011c75:	83 f8 02             	cmp    eax,0x2
c0011c78:	76 4e                	jbe    c0011cc8 <SysTell(regs*)+0x5e>
c0011c7a:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011c7f:	76 19                	jbe    c0011c9a <SysTell(regs*)+0x30>
c0011c81:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011c84:	31 d2                	xor    edx,edx
c0011c86:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011c8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011c93:	31 c0                	xor    eax,eax
c0011c95:	83 c4 08             	add    esp,0x8
c0011c98:	5b                   	pop    ebx
c0011c99:	c3                   	ret    
c0011c9a:	83 ec 0c             	sub    esp,0xc
c0011c9d:	50                   	push   eax
c0011c9e:	e8 10 78 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011ca3:	5a                   	pop    edx
c0011ca4:	8b 5b 28             	mov    ebx,DWORD PTR [ebx+0x28]
c0011ca7:	59                   	pop    ecx
c0011ca8:	53                   	push   ebx
c0011ca9:	50                   	push   eax
c0011caa:	e8 b9 9c ff ff       	call   c000b968 <File::tell(unsigned long long*)>
c0011caf:	83 c4 10             	add    esp,0x10
c0011cb2:	85 c0                	test   eax,eax
c0011cb4:	0f 95 c0             	setne  al
c0011cb7:	31 d2                	xor    edx,edx
c0011cb9:	0f b6 c0             	movzx  eax,al
c0011cbc:	f7 d8                	neg    eax
c0011cbe:	83 d2 00             	adc    edx,0x0
c0011cc1:	83 c4 08             	add    esp,0x8
c0011cc4:	f7 da                	neg    edx
c0011cc6:	5b                   	pop    ebx
c0011cc7:	c3                   	ret    
c0011cc8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ccd:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011cd2:	83 c4 08             	add    esp,0x8
c0011cd5:	5b                   	pop    ebx
c0011cd6:	c3                   	ret    

c0011cd7 <SysSize(regs*)>:
c0011cd7:	53                   	push   ebx
c0011cd8:	83 ec 18             	sub    esp,0x18
c0011cdb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011cdf:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0011ce2:	83 f8 02             	cmp    eax,0x2
c0011ce5:	76 54                	jbe    c0011d3b <SysSize(regs*)+0x64>
c0011ce7:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011cec:	76 19                	jbe    c0011d07 <SysSize(regs*)+0x30>
c0011cee:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0011cf1:	31 d2                	xor    edx,edx
c0011cf3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011cf9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d00:	31 c0                	xor    eax,eax
c0011d02:	83 c4 18             	add    esp,0x18
c0011d05:	5b                   	pop    ebx
c0011d06:	c3                   	ret    
c0011d07:	83 ec 0c             	sub    esp,0xc
c0011d0a:	50                   	push   eax
c0011d0b:	e8 a3 77 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011d10:	83 c4 0c             	add    esp,0xc
c0011d13:	8d 54 24 13          	lea    edx,[esp+0x13]
c0011d17:	52                   	push   edx
c0011d18:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0011d1b:	52                   	push   edx
c0011d1c:	50                   	push   eax
c0011d1d:	e8 de 9d ff ff       	call   c000bb00 <File::stat(unsigned long long*, bool*)>
c0011d22:	83 c4 10             	add    esp,0x10
c0011d25:	85 c0                	test   eax,eax
c0011d27:	0f 95 c0             	setne  al
c0011d2a:	31 d2                	xor    edx,edx
c0011d2c:	0f b6 c0             	movzx  eax,al
c0011d2f:	f7 d8                	neg    eax
c0011d31:	83 d2 00             	adc    edx,0x0
c0011d34:	83 c4 18             	add    esp,0x18
c0011d37:	f7 da                	neg    edx
c0011d39:	5b                   	pop    ebx
c0011d3a:	c3                   	ret    
c0011d3b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011d40:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011d45:	83 c4 18             	add    esp,0x18
c0011d48:	5b                   	pop    ebx
c0011d49:	c3                   	ret    

c0011d4a <SysSizeFromFilename(regs*)>:
c0011d4a:	57                   	push   edi
c0011d4b:	56                   	push   esi
c0011d4c:	53                   	push   ebx
c0011d4d:	83 ec 20             	sub    esp,0x20
c0011d50:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011d54:	8b 5e 20             	mov    ebx,DWORD PTR [esi+0x20]
c0011d57:	83 fb 02             	cmp    ebx,0x2
c0011d5a:	0f 86 8a 00 00 00    	jbe    c0011dea <SysSizeFromFilename(regs*)+0xa0>
c0011d60:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c0011d66:	76 1b                	jbe    c0011d83 <SysSizeFromFilename(regs*)+0x39>
c0011d68:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0011d6b:	31 d2                	xor    edx,edx
c0011d6d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0011d73:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011d7a:	83 c4 20             	add    esp,0x20
c0011d7d:	31 c0                	xor    eax,eax
c0011d7f:	5b                   	pop    ebx
c0011d80:	5e                   	pop    esi
c0011d81:	5f                   	pop    edi
c0011d82:	c3                   	ret    
c0011d83:	83 ec 0c             	sub    esp,0xc
c0011d86:	68 14 01 00 00       	push   0x114
c0011d8b:	e8 26 5d ff ff       	call   c0007ab6 <malloc>
c0011d90:	83 c4 0c             	add    esp,0xc
c0011d93:	89 c7                	mov    edi,eax
c0011d95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011d9a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011d9d:	50                   	push   eax
c0011d9e:	53                   	push   ebx
c0011d9f:	57                   	push   edi
c0011da0:	e8 9d 99 ff ff       	call   c000b742 <File::File(char const*, Process*)>
c0011da5:	83 c4 0c             	add    esp,0xc
c0011da8:	8d 44 24 23          	lea    eax,[esp+0x23]
c0011dac:	50                   	push   eax
c0011dad:	8b 56 28             	mov    edx,DWORD PTR [esi+0x28]
c0011db0:	52                   	push   edx
c0011db1:	57                   	push   edi
c0011db2:	e8 49 9d ff ff       	call   c000bb00 <File::stat(unsigned long long*, bool*)>
c0011db7:	83 c4 10             	add    esp,0x10
c0011dba:	85 ff                	test   edi,edi
c0011dbc:	74 14                	je     c0011dd2 <SysSizeFromFilename(regs*)+0x88>
c0011dbe:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0011dc2:	8b 17                	mov    edx,DWORD PTR [edi]
c0011dc4:	83 ec 0c             	sub    esp,0xc
c0011dc7:	57                   	push   edi
c0011dc8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0011dcb:	83 c4 10             	add    esp,0x10
c0011dce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011dd2:	85 c0                	test   eax,eax
c0011dd4:	0f 95 c0             	setne  al
c0011dd7:	31 d2                	xor    edx,edx
c0011dd9:	0f b6 c0             	movzx  eax,al
c0011ddc:	f7 d8                	neg    eax
c0011dde:	83 d2 00             	adc    edx,0x0
c0011de1:	83 c4 20             	add    esp,0x20
c0011de4:	f7 da                	neg    edx
c0011de6:	5b                   	pop    ebx
c0011de7:	5e                   	pop    esi
c0011de8:	5f                   	pop    edi
c0011de9:	c3                   	ret    
c0011dea:	83 c4 20             	add    esp,0x20
c0011ded:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011df2:	5b                   	pop    ebx
c0011df3:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011df8:	5e                   	pop    esi
c0011df9:	5f                   	pop    edi
c0011dfa:	c3                   	ret    

c0011dfb <SysClose(regs*)>:
c0011dfb:	53                   	push   ebx
c0011dfc:	83 ec 08             	sub    esp,0x8
c0011dff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e03:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011e06:	83 f8 02             	cmp    eax,0x2
c0011e09:	76 41                	jbe    c0011e4c <SysClose(regs*)+0x51>
c0011e0b:	8d 90 00 01 00 f0    	lea    edx,[eax-0xfffff00]
c0011e11:	83 fa 01             	cmp    edx,0x1
c0011e14:	76 2d                	jbe    c0011e43 <SysClose(regs*)+0x48>
c0011e16:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c0011e1b:	77 2f                	ja     c0011e4c <SysClose(regs*)+0x51>
c0011e1d:	83 ec 0c             	sub    esp,0xc
c0011e20:	50                   	push   eax
c0011e21:	e8 8d 76 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011e26:	89 c3                	mov    ebx,eax
c0011e28:	89 04 24             	mov    DWORD PTR [esp],eax
c0011e2b:	e8 2c 9a ff ff       	call   c000b85c <File::close()>
c0011e30:	83 c4 10             	add    esp,0x10
c0011e33:	85 db                	test   ebx,ebx
c0011e35:	74 0c                	je     c0011e43 <SysClose(regs*)+0x48>
c0011e37:	83 ec 0c             	sub    esp,0xc
c0011e3a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011e3c:	53                   	push   ebx
c0011e3d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011e40:	83 c4 10             	add    esp,0x10
c0011e43:	31 c0                	xor    eax,eax
c0011e45:	31 d2                	xor    edx,edx
c0011e47:	83 c4 08             	add    esp,0x8
c0011e4a:	5b                   	pop    ebx
c0011e4b:	c3                   	ret    
c0011e4c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011e51:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011e56:	83 c4 08             	add    esp,0x8
c0011e59:	5b                   	pop    ebx
c0011e5a:	c3                   	ret    

c0011e5b <SysOpenDir(regs*)>:
c0011e5b:	56                   	push   esi
c0011e5c:	53                   	push   ebx
c0011e5d:	83 ec 04             	sub    esp,0x4
c0011e60:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0011e64:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c0011e67:	85 c9                	test   ecx,ecx
c0011e69:	74 5d                	je     c0011ec8 <SysOpenDir(regs*)+0x6d>
c0011e6b:	83 ec 0c             	sub    esp,0xc
c0011e6e:	68 14 01 00 00       	push   0x114
c0011e73:	e8 3e 5c ff ff       	call   c0007ab6 <malloc>
c0011e78:	83 c4 0c             	add    esp,0xc
c0011e7b:	89 c6                	mov    esi,eax
c0011e7d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011e82:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011e85:	50                   	push   eax
c0011e86:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0011e89:	52                   	push   edx
c0011e8a:	56                   	push   esi
c0011e8b:	e8 2e 9e ff ff       	call   c000bcbe <Directory::Directory(char const*, Process*)>
c0011e90:	83 c4 10             	add    esp,0x10
c0011e93:	85 f6                	test   esi,esi
c0011e95:	74 31                	je     c0011ec8 <SysOpenDir(regs*)+0x6d>
c0011e97:	83 ec 0c             	sub    esp,0xc
c0011e9a:	56                   	push   esi
c0011e9b:	e8 da 9e ff ff       	call   c000bd7a <Directory::open()>
c0011ea0:	83 c4 10             	add    esp,0x10
c0011ea3:	85 c0                	test   eax,eax
c0011ea5:	75 21                	jne    c0011ec8 <SysOpenDir(regs*)+0x6d>
c0011ea7:	83 ec 0c             	sub    esp,0xc
c0011eaa:	56                   	push   esi
c0011eab:	e8 06 73 ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0011eb0:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0011eb3:	83 c4 10             	add    esp,0x10
c0011eb6:	89 02                	mov    DWORD PTR [edx],eax
c0011eb8:	c1 f8 1f             	sar    eax,0x1f
c0011ebb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011ebe:	83 c4 04             	add    esp,0x4
c0011ec1:	31 c0                	xor    eax,eax
c0011ec3:	31 d2                	xor    edx,edx
c0011ec5:	5b                   	pop    ebx
c0011ec6:	5e                   	pop    esi
c0011ec7:	c3                   	ret    
c0011ec8:	83 c4 04             	add    esp,0x4
c0011ecb:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011ed0:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011ed5:	5b                   	pop    ebx
c0011ed6:	5e                   	pop    esi
c0011ed7:	c3                   	ret    

c0011ed8 <SysMakeDir(regs*)>:
c0011ed8:	56                   	push   esi
c0011ed9:	53                   	push   ebx
c0011eda:	83 ec 10             	sub    esp,0x10
c0011edd:	68 14 01 00 00       	push   0x114
c0011ee2:	e8 cf 5b ff ff       	call   c0007ab6 <malloc>
c0011ee7:	83 c4 0c             	add    esp,0xc
c0011eea:	89 c3                	mov    ebx,eax
c0011eec:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0011ef1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0011ef4:	50                   	push   eax
c0011ef5:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0011ef9:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0011efc:	52                   	push   edx
c0011efd:	53                   	push   ebx
c0011efe:	e8 bb 9d ff ff       	call   c000bcbe <Directory::Directory(char const*, Process*)>
c0011f03:	83 c4 10             	add    esp,0x10
c0011f06:	85 db                	test   ebx,ebx
c0011f08:	74 2c                	je     c0011f36 <SysMakeDir(regs*)+0x5e>
c0011f0a:	83 ec 0c             	sub    esp,0xc
c0011f0d:	53                   	push   ebx
c0011f0e:	e8 47 a0 ff ff       	call   c000bf5a <Directory::create()>
c0011f13:	89 c6                	mov    esi,eax
c0011f15:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f17:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0011f1a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f1d:	83 c4 10             	add    esp,0x10
c0011f20:	31 c0                	xor    eax,eax
c0011f22:	85 f6                	test   esi,esi
c0011f24:	0f 95 c0             	setne  al
c0011f27:	31 d2                	xor    edx,edx
c0011f29:	f7 d8                	neg    eax
c0011f2b:	83 d2 00             	adc    edx,0x0
c0011f2e:	83 c4 04             	add    esp,0x4
c0011f31:	f7 da                	neg    edx
c0011f33:	5b                   	pop    ebx
c0011f34:	5e                   	pop    esi
c0011f35:	c3                   	ret    
c0011f36:	83 c4 04             	add    esp,0x4
c0011f39:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f3e:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f43:	5b                   	pop    ebx
c0011f44:	5e                   	pop    esi
c0011f45:	c3                   	ret    

c0011f46 <SysCloseDir(regs*)>:
c0011f46:	53                   	push   ebx
c0011f47:	83 ec 08             	sub    esp,0x8
c0011f4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011f4e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011f51:	8d 50 fd             	lea    edx,[eax-0x3]
c0011f54:	81 fa fd fe ff 0f    	cmp    edx,0xffffefd
c0011f5a:	77 2f                	ja     c0011f8b <SysCloseDir(regs*)+0x45>
c0011f5c:	83 ec 0c             	sub    esp,0xc
c0011f5f:	50                   	push   eax
c0011f60:	e8 4e 75 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0011f65:	89 c3                	mov    ebx,eax
c0011f67:	89 04 24             	mov    DWORD PTR [esp],eax
c0011f6a:	e8 67 9e ff ff       	call   c000bdd6 <Directory::close()>
c0011f6f:	83 c4 10             	add    esp,0x10
c0011f72:	85 db                	test   ebx,ebx
c0011f74:	74 0c                	je     c0011f82 <SysCloseDir(regs*)+0x3c>
c0011f76:	83 ec 0c             	sub    esp,0xc
c0011f79:	8b 03                	mov    eax,DWORD PTR [ebx]
c0011f7b:	53                   	push   ebx
c0011f7c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011f7f:	83 c4 10             	add    esp,0x10
c0011f82:	31 c0                	xor    eax,eax
c0011f84:	31 d2                	xor    edx,edx
c0011f86:	83 c4 08             	add    esp,0x8
c0011f89:	5b                   	pop    ebx
c0011f8a:	c3                   	ret    
c0011f8b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011f90:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011f95:	83 c4 08             	add    esp,0x8
c0011f98:	5b                   	pop    ebx
c0011f99:	c3                   	ret    

c0011f9a <SysWait(regs*)>:
c0011f9a:	83 ec 10             	sub    esp,0x10
c0011f9d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0011fa1:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0011fa4:	52                   	push   edx
c0011fa5:	8b 48 24             	mov    ecx,DWORD PTR [eax+0x24]
c0011fa8:	51                   	push   ecx
c0011fa9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0011fac:	50                   	push   eax
c0011fad:	e8 d2 3d 00 00       	call   c0015d84 <waitTask(int, int*, int)>
c0011fb2:	83 c4 1c             	add    esp,0x1c
c0011fb5:	89 c2                	mov    edx,eax
c0011fb7:	c1 fa 1f             	sar    edx,0x1f
c0011fba:	c3                   	ret    

c0011fbb <SysNotImpl(regs*)>:
c0011fbb:	83 ec 18             	sub    esp,0x18
c0011fbe:	68 46 1e 02 c0       	push   0xc0021e46
c0011fc3:	e8 b1 f2 ff ff       	call   c0011279 <KePanic(char const*)>
c0011fc8:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0011fcd:	ba ff ff ff ff       	mov    edx,0xffffffff
c0011fd2:	83 c4 1c             	add    esp,0x1c
c0011fd5:	c3                   	ret    

c0011fd6 <SysPanic(regs*)>:
c0011fd6:	83 ec 18             	sub    esp,0x18
c0011fd9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011fdd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0011fe0:	50                   	push   eax
c0011fe1:	e8 93 f2 ff ff       	call   c0011279 <KePanic(char const*)>
c0011fe6:	b8 01 00 00 00       	mov    eax,0x1
c0011feb:	31 d2                	xor    edx,edx
c0011fed:	83 c4 1c             	add    esp,0x1c
c0011ff0:	c3                   	ret    

c0011ff1 <SysRmdir(regs*)>:
c0011ff1:	56                   	push   esi
c0011ff2:	53                   	push   ebx
c0011ff3:	83 ec 20             	sub    esp,0x20
c0011ff6:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0011ffa:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0011ffd:	68 14 01 00 00       	push   0x114
c0012002:	e8 af 5a ff ff       	call   c0007ab6 <malloc>
c0012007:	83 c4 0c             	add    esp,0xc
c001200a:	89 c3                	mov    ebx,eax
c001200c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012011:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012014:	50                   	push   eax
c0012015:	56                   	push   esi
c0012016:	53                   	push   ebx
c0012017:	e8 26 97 ff ff       	call   c000b742 <File::File(char const*, Process*)>
c001201c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001201f:	e8 a8 99 ff ff       	call   c000b9cc <File::unlink()>
c0012024:	83 c4 10             	add    esp,0x10
c0012027:	85 db                	test   ebx,ebx
c0012029:	74 14                	je     c001203f <SysRmdir(regs*)+0x4e>
c001202b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001202f:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012031:	83 ec 0c             	sub    esp,0xc
c0012034:	53                   	push   ebx
c0012035:	ff 52 08             	call   DWORD PTR [edx+0x8]
c0012038:	83 c4 10             	add    esp,0x10
c001203b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001203f:	85 c0                	test   eax,eax
c0012041:	0f 95 c0             	setne  al
c0012044:	31 d2                	xor    edx,edx
c0012046:	0f b6 c0             	movzx  eax,al
c0012049:	f7 d8                	neg    eax
c001204b:	83 d2 00             	adc    edx,0x0
c001204e:	83 c4 14             	add    esp,0x14
c0012051:	f7 da                	neg    edx
c0012053:	5b                   	pop    ebx
c0012054:	5e                   	pop    esi
c0012055:	c3                   	ret    

c0012056 <SysUnlink(regs*)>:
c0012056:	56                   	push   esi
c0012057:	53                   	push   ebx
c0012058:	83 ec 20             	sub    esp,0x20
c001205b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001205f:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c0012062:	68 14 01 00 00       	push   0x114
c0012067:	e8 4a 5a ff ff       	call   c0007ab6 <malloc>
c001206c:	83 c4 0c             	add    esp,0xc
c001206f:	89 c3                	mov    ebx,eax
c0012071:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012076:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012079:	50                   	push   eax
c001207a:	56                   	push   esi
c001207b:	53                   	push   ebx
c001207c:	e8 c1 96 ff ff       	call   c000b742 <File::File(char const*, Process*)>
c0012081:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0012084:	e8 43 99 ff ff       	call   c000b9cc <File::unlink()>
c0012089:	83 c4 10             	add    esp,0x10
c001208c:	85 db                	test   ebx,ebx
c001208e:	74 14                	je     c00120a4 <SysUnlink(regs*)+0x4e>
c0012090:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012094:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012096:	83 ec 0c             	sub    esp,0xc
c0012099:	53                   	push   ebx
c001209a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001209d:	83 c4 10             	add    esp,0x10
c00120a0:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120a4:	85 c0                	test   eax,eax
c00120a6:	0f 95 c0             	setne  al
c00120a9:	31 d2                	xor    edx,edx
c00120ab:	0f b6 c0             	movzx  eax,al
c00120ae:	f7 d8                	neg    eax
c00120b0:	83 d2 00             	adc    edx,0x0
c00120b3:	83 c4 14             	add    esp,0x14
c00120b6:	f7 da                	neg    edx
c00120b8:	5b                   	pop    ebx
c00120b9:	5e                   	pop    esi
c00120ba:	c3                   	ret    

c00120bb <SysGetArgv(regs*)>:
c00120bb:	83 ec 0c             	sub    esp,0xc
c00120be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00120c2:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c00120c5:	85 c0                	test   eax,eax
c00120c7:	78 2c                	js     c00120f5 <SysGetArgv(regs*)+0x3a>
c00120c9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c00120cf:	8b 49 3c             	mov    ecx,DWORD PTR [ecx+0x3c]
c00120d2:	3b 81 16 05 00 00    	cmp    eax,DWORD PTR [ecx+0x516]
c00120d8:	7d 1b                	jge    c00120f5 <SysGetArgv(regs*)+0x3a>
c00120da:	8b 84 81 1a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x51a]
c00120e1:	85 c0                	test   eax,eax
c00120e3:	74 18                	je     c00120fd <SysGetArgv(regs*)+0x42>
c00120e5:	83 ec 08             	sub    esp,0x8
c00120e8:	50                   	push   eax
c00120e9:	8b 42 24             	mov    eax,DWORD PTR [edx+0x24]
c00120ec:	50                   	push   eax
c00120ed:	e8 4e e5 fe ff       	call   c0000640 <strcpy>
c00120f2:	83 c4 10             	add    esp,0x10
c00120f5:	31 c0                	xor    eax,eax
c00120f7:	31 d2                	xor    edx,edx
c00120f9:	83 c4 0c             	add    esp,0xc
c00120fc:	c3                   	ret    
c00120fd:	b8 01 00 00 00       	mov    eax,0x1
c0012102:	31 d2                	xor    edx,edx
c0012104:	83 c4 0c             	add    esp,0xc
c0012107:	c3                   	ret    

c0012108 <SysUSleep(regs*)>:
c0012108:	83 ec 1c             	sub    esp,0x1c
c001210b:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c001210f:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0012112:	8b 51 28             	mov    edx,DWORD PTR [ecx+0x28]
c0012115:	6a 00                	push   0x0
c0012117:	6a 64                	push   0x64
c0012119:	52                   	push   edx
c001211a:	50                   	push   eax
c001211b:	e8 90 d0 00 00       	call   c001f1b0 <__udivdi3>
c0012120:	83 c4 14             	add    esp,0x14
c0012123:	50                   	push   eax
c0012124:	e8 3f 3d 00 00       	call   c0015e68 <milliTenthSleep(unsigned int)>
c0012129:	31 c0                	xor    eax,eax
c001212b:	31 d2                	xor    edx,edx
c001212d:	83 c4 1c             	add    esp,0x1c
c0012130:	c3                   	ret    

c0012131 <SysSpawn(regs*)>:
c0012131:	56                   	push   esi
c0012132:	53                   	push   ebx
c0012133:	83 ec 04             	sub    esp,0x4
c0012136:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001213a:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c001213d:	85 f6                	test   esi,esi
c001213f:	75 0a                	jne    c001214b <SysSpawn(regs*)+0x1a>
c0012141:	83 c4 04             	add    esp,0x4
c0012144:	31 c0                	xor    eax,eax
c0012146:	31 d2                	xor    edx,edx
c0012148:	5b                   	pop    ebx
c0012149:	5e                   	pop    esi
c001214a:	c3                   	ret    
c001214b:	83 ec 0c             	sub    esp,0xc
c001214e:	68 24 07 00 00       	push   0x724
c0012153:	e8 5e 59 ff ff       	call   c0007ab6 <malloc>
c0012158:	83 c4 10             	add    esp,0x10
c001215b:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001215e:	89 c6                	mov    esi,eax
c0012160:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0012163:	85 c9                	test   ecx,ecx
c0012165:	75 39                	jne    c00121a0 <SysSpawn(regs*)+0x6f>
c0012167:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001216c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001216f:	52                   	push   edx
c0012170:	50                   	push   eax
c0012171:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012174:	50                   	push   eax
c0012175:	56                   	push   esi
c0012176:	e8 3d 33 00 00       	call   c00154b8 <Process::Process(char const*, Process*, char**)>
c001217b:	83 c4 10             	add    esp,0x10
c001217e:	80 be 1e 07 00 00 00 	cmp    BYTE PTR [esi+0x71e],0x0
c0012185:	75 ba                	jne    c0012141 <SysSpawn(regs*)+0x10>
c0012187:	83 ec 0c             	sub    esp,0xc
c001218a:	56                   	push   esi
c001218b:	e8 64 38 00 00       	call   c00159f4 <Process::createUserThread()>
c0012190:	8b 06                	mov    eax,DWORD PTR [esi]
c0012192:	83 c4 10             	add    esp,0x10
c0012195:	89 c2                	mov    edx,eax
c0012197:	83 c4 04             	add    esp,0x4
c001219a:	c1 fa 1f             	sar    edx,0x1f
c001219d:	5b                   	pop    ebx
c001219e:	5e                   	pop    esi
c001219f:	c3                   	ret    
c00121a0:	31 c0                	xor    eax,eax
c00121a2:	eb cb                	jmp    c001216f <SysSpawn(regs*)+0x3e>

c00121a4 <SysGetEnv(regs*)>:
c00121a4:	57                   	push   edi
c00121a5:	56                   	push   esi
c00121a6:	53                   	push   ebx
c00121a7:	83 ec 1c             	sub    esp,0x1c
c00121aa:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00121ae:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00121b3:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c00121b6:	8b 73 24             	mov    esi,DWORD PTR [ebx+0x24]
c00121b9:	8b 48 3c             	mov    ecx,DWORD PTR [eax+0x3c]
c00121bc:	51                   	push   ecx
c00121bd:	e8 6f ef ff ff       	call   c0011131 <KeGetProcessTotalEnvCount(Process*)>
c00121c2:	83 c4 10             	add    esp,0x10
c00121c5:	39 c7                	cmp    edi,eax
c00121c7:	7c 14                	jl     c00121dd <SysGetEnv(regs*)+0x39>
c00121c9:	85 f6                	test   esi,esi
c00121cb:	75 0b                	jne    c00121d8 <SysGetEnv(regs*)+0x34>
c00121cd:	83 c4 10             	add    esp,0x10
c00121d0:	31 c0                	xor    eax,eax
c00121d2:	5b                   	pop    ebx
c00121d3:	31 d2                	xor    edx,edx
c00121d5:	5e                   	pop    esi
c00121d6:	5f                   	pop    edi
c00121d7:	c3                   	ret    
c00121d8:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00121db:	eb f0                	jmp    c00121cd <SysGetEnv(regs*)+0x29>
c00121dd:	8d 44 24 08          	lea    eax,[esp+0x8]
c00121e1:	83 ec 04             	sub    esp,0x4
c00121e4:	57                   	push   edi
c00121e5:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c00121eb:	8b 7a 3c             	mov    edi,DWORD PTR [edx+0x3c]
c00121ee:	57                   	push   edi
c00121ef:	50                   	push   eax
c00121f0:	e8 5c ef ff ff       	call   c0011151 <KeGetProcessEnvPair(Process*, int)>
c00121f5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00121f8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00121fc:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0012200:	83 c4 0c             	add    esp,0xc
c0012203:	85 d2                	test   edx,edx
c0012205:	75 23                	jne    c001222a <SysGetEnv(regs*)+0x86>
c0012207:	83 ec 0c             	sub    esp,0xc
c001220a:	50                   	push   eax
c001220b:	e8 60 e3 fe ff       	call   c0000570 <strlen>
c0012210:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012213:	89 c3                	mov    ebx,eax
c0012215:	e8 56 e3 fe ff       	call   c0000570 <strlen>
c001221a:	83 c4 10             	add    esp,0x10
c001221d:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0012221:	83 c4 10             	add    esp,0x10
c0012224:	31 d2                	xor    edx,edx
c0012226:	5b                   	pop    ebx
c0012227:	5e                   	pop    esi
c0012228:	5f                   	pop    edi
c0012229:	c3                   	ret    
c001222a:	83 ec 08             	sub    esp,0x8
c001222d:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012230:	50                   	push   eax
c0012231:	56                   	push   esi
c0012232:	e8 09 e4 fe ff       	call   c0000640 <strcpy>
c0012237:	58                   	pop    eax
c0012238:	5a                   	pop    edx
c0012239:	68 60 1e 02 c0       	push   0xc0021e60
c001223e:	56                   	push   esi
c001223f:	e8 fc e5 fe ff       	call   c0000840 <strcat>
c0012244:	59                   	pop    ecx
c0012245:	5b                   	pop    ebx
c0012246:	57                   	push   edi
c0012247:	56                   	push   esi
c0012248:	e8 f3 e5 fe ff       	call   c0000840 <strcat>
c001224d:	83 c4 10             	add    esp,0x10
c0012250:	e9 78 ff ff ff       	jmp    c00121cd <SysGetEnv(regs*)+0x29>

c0012255 <SysSetFatAttrib(regs*)>:
c0012255:	57                   	push   edi
c0012256:	56                   	push   esi
c0012257:	53                   	push   ebx
c0012258:	83 ec 1c             	sub    esp,0x1c
c001225b:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001225f:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0012262:	68 14 01 00 00       	push   0x114
c0012267:	e8 4a 58 ff ff       	call   c0007ab6 <malloc>
c001226c:	83 c4 0c             	add    esp,0xc
c001226f:	89 c3                	mov    ebx,eax
c0012271:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012276:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0012279:	50                   	push   eax
c001227a:	57                   	push   edi
c001227b:	53                   	push   ebx
c001227c:	e8 c1 94 ff ff       	call   c000b742 <File::File(char const*, Process*)>
c0012281:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0012284:	83 c4 0c             	add    esp,0xc
c0012287:	0f b6 d4             	movzx  edx,ah
c001228a:	0f b6 c0             	movzx  eax,al
c001228d:	52                   	push   edx
c001228e:	50                   	push   eax
c001228f:	53                   	push   ebx
c0012290:	e8 d1 97 ff ff       	call   c000ba66 <File::chfatattr(unsigned char, unsigned char)>
c0012295:	83 c4 10             	add    esp,0x10
c0012298:	85 db                	test   ebx,ebx
c001229a:	74 14                	je     c00122b0 <SysSetFatAttrib(regs*)+0x5b>
c001229c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00122a0:	8b 13                	mov    edx,DWORD PTR [ebx]
c00122a2:	83 ec 0c             	sub    esp,0xc
c00122a5:	53                   	push   ebx
c00122a6:	ff 52 08             	call   DWORD PTR [edx+0x8]
c00122a9:	83 c4 10             	add    esp,0x10
c00122ac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00122b0:	85 c0                	test   eax,eax
c00122b2:	0f 95 c0             	setne  al
c00122b5:	31 d2                	xor    edx,edx
c00122b7:	0f b6 c0             	movzx  eax,al
c00122ba:	f7 d8                	neg    eax
c00122bc:	83 d2 00             	adc    edx,0x0
c00122bf:	83 c4 10             	add    esp,0x10
c00122c2:	f7 da                	neg    edx
c00122c4:	5b                   	pop    ebx
c00122c5:	5e                   	pop    esi
c00122c6:	5f                   	pop    edi
c00122c7:	c3                   	ret    

c00122c8 <SysPipe(regs*)>:
c00122c8:	57                   	push   edi
c00122c9:	56                   	push   esi
c00122ca:	53                   	push   ebx
c00122cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00122cf:	83 ec 0c             	sub    esp,0xc
c00122d2:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c00122d5:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c00122d8:	6a 20                	push   0x20
c00122da:	e8 d7 57 ff ff       	call   c0007ab6 <malloc>
c00122df:	89 c3                	mov    ebx,eax
c00122e1:	58                   	pop    eax
c00122e2:	5a                   	pop    edx
c00122e3:	68 00 50 00 00       	push   0x5000
c00122e8:	53                   	push   ebx
c00122e9:	e8 3a 61 ff ff       	call   c0008428 <Pipe::Pipe(int)>
c00122ee:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00122f1:	e8 c0 6e ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c00122f6:	89 07                	mov    DWORD PTR [edi],eax
c00122f8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00122fb:	e8 b6 6e ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c0012300:	83 c4 10             	add    esp,0x10
c0012303:	89 06                	mov    DWORD PTR [esi],eax
c0012305:	31 d2                	xor    edx,edx
c0012307:	5b                   	pop    ebx
c0012308:	31 c0                	xor    eax,eax
c001230a:	5e                   	pop    esi
c001230b:	5f                   	pop    edi
c001230c:	c3                   	ret    

c001230d <SysGetUnixTime(regs*)>:
c001230d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0012312:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0012318:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001231c:	e9 7d 9e ff ff       	jmp    c000c19e <Clock::timeInSecondsLocal()>

c0012321 <string_ends_with(char const*, char const*)>:
c0012321:	57                   	push   edi
c0012322:	56                   	push   esi
c0012323:	53                   	push   ebx
c0012324:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012328:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001232c:	83 ec 0c             	sub    esp,0xc
c001232f:	53                   	push   ebx
c0012330:	e8 3b e2 fe ff       	call   c0000570 <strlen>
c0012335:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012338:	89 c6                	mov    esi,eax
c001233a:	e8 31 e2 fe ff       	call   c0000570 <strlen>
c001233f:	83 c4 10             	add    esp,0x10
c0012342:	39 c6                	cmp    esi,eax
c0012344:	7d 06                	jge    c001234c <string_ends_with(char const*, char const*)+0x2b>
c0012346:	5b                   	pop    ebx
c0012347:	31 c0                	xor    eax,eax
c0012349:	5e                   	pop    esi
c001234a:	5f                   	pop    edi
c001234b:	c3                   	ret    
c001234c:	83 ec 08             	sub    esp,0x8
c001234f:	29 c6                	sub    esi,eax
c0012351:	57                   	push   edi
c0012352:	01 f3                	add    ebx,esi
c0012354:	53                   	push   ebx
c0012355:	e8 f6 e3 fe ff       	call   c0000750 <strcmp>
c001235a:	83 c4 10             	add    esp,0x10
c001235d:	85 c0                	test   eax,eax
c001235f:	5b                   	pop    ebx
c0012360:	0f 94 c0             	sete   al
c0012363:	5e                   	pop    esi
c0012364:	0f b6 c0             	movzx  eax,al
c0012367:	5f                   	pop    edi
c0012368:	c3                   	ret    

c0012369 <SysOpen(regs*)>:
c0012369:	56                   	push   esi
c001236a:	53                   	push   ebx
c001236b:	81 ec 04 01 00 00    	sub    esp,0x104
c0012371:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c0012378:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001237b:	85 c0                	test   eax,eax
c001237d:	0f 84 bd 01 00 00    	je     c0012540 <SysOpen(regs*)+0x1d7>
c0012383:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012386:	85 c0                	test   eax,eax
c0012388:	0f 84 b2 01 00 00    	je     c0012540 <SysOpen(regs*)+0x1d7>
c001238e:	83 ec 04             	sub    esp,0x4
c0012391:	68 62 1e 02 c0       	push   0xc0021e62
c0012396:	50                   	push   eax
c0012397:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001239b:	56                   	push   esi
c001239c:	e8 eb 91 ff ff       	call   c000b58c <Fs::standardiseFiles(char*, char const*, char const*)>
c00123a1:	89 34 24             	mov    DWORD PTR [esp],esi
c00123a4:	e8 c7 e1 fe ff       	call   c0000570 <strlen>
c00123a9:	83 c4 10             	add    esp,0x10
c00123ac:	83 e8 01             	sub    eax,0x1
c00123af:	74 21                	je     c00123d2 <SysOpen(regs*)+0x69>
c00123b1:	0f be 14 04          	movsx  edx,BYTE PTR [esp+eax*1]
c00123b5:	eb 12                	jmp    c00123c9 <SysOpen(regs*)+0x60>
c00123b7:	83 fa 3a             	cmp    edx,0x3a
c00123ba:	74 12                	je     c00123ce <SysOpen(regs*)+0x65>
c00123bc:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c00123c0:	83 e8 01             	sub    eax,0x1
c00123c3:	74 0d                	je     c00123d2 <SysOpen(regs*)+0x69>
c00123c5:	0f be 14 06          	movsx  edx,BYTE PTR [esi+eax*1]
c00123c9:	83 fa 2e             	cmp    edx,0x2e
c00123cc:	75 e9                	jne    c00123b7 <SysOpen(regs*)+0x4e>
c00123ce:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c00123d2:	83 ec 08             	sub    esp,0x8
c00123d5:	68 66 1e 02 c0       	push   0xc0021e66
c00123da:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00123dd:	50                   	push   eax
c00123de:	e8 3e ff ff ff       	call   c0012321 <string_ends_with(char const*, char const*)>
c00123e3:	83 c4 10             	add    esp,0x10
c00123e6:	85 c0                	test   eax,eax
c00123e8:	74 1d                	je     c0012407 <SysOpen(regs*)+0x9e>
c00123ea:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c00123ed:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c00123f3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00123fa:	81 c4 04 01 00 00    	add    esp,0x104
c0012400:	31 c0                	xor    eax,eax
c0012402:	31 d2                	xor    edx,edx
c0012404:	5b                   	pop    ebx
c0012405:	5e                   	pop    esi
c0012406:	c3                   	ret    
c0012407:	83 ec 08             	sub    esp,0x8
c001240a:	68 6b 1e 02 c0       	push   0xc0021e6b
c001240f:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012412:	50                   	push   eax
c0012413:	e8 09 ff ff ff       	call   c0012321 <string_ends_with(char const*, char const*)>
c0012418:	83 c4 10             	add    esp,0x10
c001241b:	85 c0                	test   eax,eax
c001241d:	75 cb                	jne    c00123ea <SysOpen(regs*)+0x81>
c001241f:	83 ec 08             	sub    esp,0x8
c0012422:	68 67 1e 02 c0       	push   0xc0021e67
c0012427:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001242a:	50                   	push   eax
c001242b:	e8 20 e3 fe ff       	call   c0000750 <strcmp>
c0012430:	83 c4 10             	add    esp,0x10
c0012433:	85 c0                	test   eax,eax
c0012435:	74 b3                	je     c00123ea <SysOpen(regs*)+0x81>
c0012437:	83 ec 08             	sub    esp,0x8
c001243a:	68 66 1e 02 c0       	push   0xc0021e66
c001243f:	56                   	push   esi
c0012440:	e8 dc fe ff ff       	call   c0012321 <string_ends_with(char const*, char const*)>
c0012445:	83 c4 10             	add    esp,0x10
c0012448:	85 c0                	test   eax,eax
c001244a:	75 9e                	jne    c00123ea <SysOpen(regs*)+0x81>
c001244c:	83 ec 08             	sub    esp,0x8
c001244f:	68 70 1e 02 c0       	push   0xc0021e70
c0012454:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012457:	50                   	push   eax
c0012458:	e8 c4 fe ff ff       	call   c0012321 <string_ends_with(char const*, char const*)>
c001245d:	83 c4 10             	add    esp,0x10
c0012460:	85 c0                	test   eax,eax
c0012462:	0f 85 eb 00 00 00    	jne    c0012553 <SysOpen(regs*)+0x1ea>
c0012468:	83 ec 08             	sub    esp,0x8
c001246b:	68 75 1e 02 c0       	push   0xc0021e75
c0012470:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c0012473:	50                   	push   eax
c0012474:	e8 a8 fe ff ff       	call   c0012321 <string_ends_with(char const*, char const*)>
c0012479:	83 c4 10             	add    esp,0x10
c001247c:	85 c0                	test   eax,eax
c001247e:	0f 85 cf 00 00 00    	jne    c0012553 <SysOpen(regs*)+0x1ea>
c0012484:	83 ec 08             	sub    esp,0x8
c0012487:	68 71 1e 02 c0       	push   0xc0021e71
c001248c:	8b 4b 24             	mov    ecx,DWORD PTR [ebx+0x24]
c001248f:	51                   	push   ecx
c0012490:	e8 bb e2 fe ff       	call   c0000750 <strcmp>
c0012495:	83 c4 10             	add    esp,0x10
c0012498:	85 c0                	test   eax,eax
c001249a:	0f 84 b3 00 00 00    	je     c0012553 <SysOpen(regs*)+0x1ea>
c00124a0:	83 ec 08             	sub    esp,0x8
c00124a3:	68 70 1e 02 c0       	push   0xc0021e70
c00124a8:	56                   	push   esi
c00124a9:	e8 73 fe ff ff       	call   c0012321 <string_ends_with(char const*, char const*)>
c00124ae:	83 c4 10             	add    esp,0x10
c00124b1:	85 c0                	test   eax,eax
c00124b3:	0f 85 9a 00 00 00    	jne    c0012553 <SysOpen(regs*)+0x1ea>
c00124b9:	83 ec 0c             	sub    esp,0xc
c00124bc:	68 14 01 00 00       	push   0x114
c00124c1:	e8 f0 55 ff ff       	call   c0007ab6 <malloc>
c00124c6:	83 c4 0c             	add    esp,0xc
c00124c9:	89 c6                	mov    esi,eax
c00124cb:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00124d0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00124d3:	50                   	push   eax
c00124d4:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00124d7:	52                   	push   edx
c00124d8:	56                   	push   esi
c00124d9:	e8 64 92 ff ff       	call   c000b742 <File::File(char const*, Process*)>
c00124de:	83 c4 10             	add    esp,0x10
c00124e1:	85 f6                	test   esi,esi
c00124e3:	74 5b                	je     c0012540 <SysOpen(regs*)+0x1d7>
c00124e5:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00124e8:	0f b6 c2             	movzx  eax,dl
c00124eb:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c00124ee:	89 d0                	mov    eax,edx
c00124f0:	83 e0 01             	and    eax,0x1
c00124f3:	f6 c2 02             	test   dl,0x2
c00124f6:	74 03                	je     c00124fb <SysOpen(regs*)+0x192>
c00124f8:	83 c8 02             	or     eax,0x2
c00124fb:	f6 c2 04             	test   dl,0x4
c00124fe:	74 03                	je     c0012503 <SysOpen(regs*)+0x19a>
c0012500:	83 c8 04             	or     eax,0x4
c0012503:	f6 c2 08             	test   dl,0x8
c0012506:	74 03                	je     c001250b <SysOpen(regs*)+0x1a2>
c0012508:	83 c8 0a             	or     eax,0xa
c001250b:	80 e2 10             	and    dl,0x10
c001250e:	74 03                	je     c0012513 <SysOpen(regs*)+0x1aa>
c0012510:	83 c8 12             	or     eax,0x12
c0012513:	83 ec 08             	sub    esp,0x8
c0012516:	50                   	push   eax
c0012517:	56                   	push   esi
c0012518:	e8 e1 92 ff ff       	call   c000b7fe <File::open(FileOpenMode)>
c001251d:	83 c4 10             	add    esp,0x10
c0012520:	85 c0                	test   eax,eax
c0012522:	75 1c                	jne    c0012540 <SysOpen(regs*)+0x1d7>
c0012524:	83 ec 0c             	sub    esp,0xc
c0012527:	56                   	push   esi
c0012528:	e8 89 6c ff ff       	call   c00091b6 <UnixFile::getFileDescriptor()>
c001252d:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c0012530:	83 c4 10             	add    esp,0x10
c0012533:	89 02                	mov    DWORD PTR [edx],eax
c0012535:	c1 f8 1f             	sar    eax,0x1f
c0012538:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001253b:	e9 ba fe ff ff       	jmp    c00123fa <SysOpen(regs*)+0x91>
c0012540:	81 c4 04 01 00 00    	add    esp,0x104
c0012546:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001254b:	ba ff ff ff ff       	mov    edx,0xffffffff
c0012550:	5b                   	pop    ebx
c0012551:	5e                   	pop    esi
c0012552:	c3                   	ret    
c0012553:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0012556:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001255c:	e9 92 fe ff ff       	jmp    c00123f3 <SysOpen(regs*)+0x8a>

c0012561 <KeSystemCall(regs*, void*)>:
c0012561:	53                   	push   ebx
c0012562:	83 ec 08             	sub    esp,0x8
c0012565:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0012569:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001256c:	83 f8 3b             	cmp    eax,0x3b
c001256f:	77 16                	ja     c0012587 <KeSystemCall(regs*, void*)+0x26>
c0012571:	8b 14 85 80 32 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffdcd80]
c0012578:	85 d2                	test   edx,edx
c001257a:	74 0b                	je     c0012587 <KeSystemCall(regs*, void*)+0x26>
c001257c:	83 ec 0c             	sub    esp,0xc
c001257f:	53                   	push   ebx
c0012580:	ff d2                	call   edx
c0012582:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0012585:	eb 0d                	jmp    c0012594 <KeSystemCall(regs*, void*)+0x33>
c0012587:	52                   	push   edx
c0012588:	52                   	push   edx
c0012589:	50                   	push   eax
c001258a:	68 7a 1e 02 c0       	push   0xc0021e7a
c001258f:	e8 b1 83 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0012594:	83 c4 10             	add    esp,0x10
c0012597:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001259c:	31 d2                	xor    edx,edx
c001259e:	83 c4 08             	add    esp,0x8
c00125a1:	5b                   	pop    ebx
c00125a2:	c3                   	ret    
c00125a3:	90                   	nop

c00125a4 <KeSwitchEndian16(unsigned short)>:
c00125a4:	83 ec 04             	sub    esp,0x4
c00125a7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00125ab:	66 89 04 24          	mov    WORD PTR [esp],ax
c00125af:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00125b3:	c1 f8 08             	sar    eax,0x8
c00125b6:	89 c2                	mov    edx,eax
c00125b8:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c00125bc:	c1 e0 08             	shl    eax,0x8
c00125bf:	09 d0                	or     eax,edx
c00125c1:	83 c4 04             	add    esp,0x4
c00125c4:	c3                   	ret    
c00125c5:	8d 76 00             	lea    esi,[esi+0x0]

c00125c8 <KeSwitchEndian32(unsigned int)>:
c00125c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125cc:	c1 e8 18             	shr    eax,0x18
c00125cf:	89 c2                	mov    edx,eax
c00125d1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125d5:	c1 e0 08             	shl    eax,0x8
c00125d8:	25 00 00 ff 00       	and    eax,0xff0000
c00125dd:	09 c2                	or     edx,eax
c00125df:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125e3:	c1 e8 08             	shr    eax,0x8
c00125e6:	25 00 ff 00 00       	and    eax,0xff00
c00125eb:	09 c2                	or     edx,eax
c00125ed:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00125f1:	c1 e0 18             	shl    eax,0x18
c00125f4:	09 d0                	or     eax,edx
c00125f6:	c3                   	ret    
c00125f7:	90                   	nop

c00125f8 <EthernetCRC32(unsigned char*, int)>:
c00125f8:	83 ec 10             	sub    esp,0x10
c00125fb:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0012600:	75 0a                	jne    c001260c <EthernetCRC32(unsigned char*, int)+0x14>
c0012602:	b8 00 00 00 00       	mov    eax,0x0
c0012607:	e9 8c 00 00 00       	jmp    c0012698 <EthernetCRC32(unsigned char*, int)+0xa0>
c001260c:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c0012611:	7f 09                	jg     c001261c <EthernetCRC32(unsigned char*, int)+0x24>
c0012613:	b8 00 00 00 00       	mov    eax,0x0
c0012618:	eb 7e                	jmp    c0012698 <EthernetCRC32(unsigned char*, int)+0xa0>
c001261a:	66 90                	xchg   ax,ax
c001261c:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c0012624:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001262c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0012630:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c0012634:	7d 5a                	jge    c0012690 <EthernetCRC32(unsigned char*, int)+0x98>
c0012636:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001263a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001263e:	01 d0                	add    eax,edx
c0012640:	8a 00                	mov    al,BYTE PTR [eax]
c0012642:	0f b6 c0             	movzx  eax,al
c0012645:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c0012649:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0012651:	8d 76 00             	lea    esi,[esi+0x0]
c0012654:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c0012659:	7f 2d                	jg     c0012688 <EthernetCRC32(unsigned char*, int)+0x90>
c001265b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001265f:	83 e0 01             	and    eax,0x1
c0012662:	74 10                	je     c0012674 <EthernetCRC32(unsigned char*, int)+0x7c>
c0012664:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012668:	d1 e8                	shr    eax,1
c001266a:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001266f:	eb 0b                	jmp    c001267c <EthernetCRC32(unsigned char*, int)+0x84>
c0012671:	8d 76 00             	lea    esi,[esi+0x0]
c0012674:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012678:	d1 e8                	shr    eax,1
c001267a:	66 90                	xchg   ax,ax
c001267c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012680:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c0012685:	eb cd                	jmp    c0012654 <EthernetCRC32(unsigned char*, int)+0x5c>
c0012687:	90                   	nop
c0012688:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c001268d:	eb 9d                	jmp    c001262c <EthernetCRC32(unsigned char*, int)+0x34>
c001268f:	90                   	nop
c0012690:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012694:	f7 d0                	not    eax
c0012696:	66 90                	xchg   ax,ax
c0012698:	83 c4 10             	add    esp,0x10
c001269b:	c3                   	ret    

c001269c <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)>:
c001269c:	83 ec 2c             	sub    esp,0x2c
c001269f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00126a3:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00126a8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00126ac:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00126b0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00126b4:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00126b7:	0f b7 c0             	movzx  eax,ax
c00126ba:	3d 06 08 00 00       	cmp    eax,0x806
c00126bf:	75 13                	jne    c00126d4 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x38>
c00126c1:	83 ec 0c             	sub    esp,0xc
c00126c4:	68 8e 1e 02 c0       	push   0xc0021e8e
c00126c9:	e8 77 82 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00126ce:	83 c4 10             	add    esp,0x10
c00126d1:	eb 25                	jmp    c00126f8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00126d3:	90                   	nop
c00126d4:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00126d8:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00126db:	0f b7 c0             	movzx  eax,ax
c00126de:	3d 00 08 00 00       	cmp    eax,0x800
c00126e3:	75 13                	jne    c00126f8 <EthernetReceivedPacket(EthernetUnwrappedFrame*, unsigned short)+0x5c>
c00126e5:	83 ec 0c             	sub    esp,0xc
c00126e8:	68 a4 1e 02 c0       	push   0xc0021ea4
c00126ed:	e8 53 82 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00126f2:	83 c4 10             	add    esp,0x10
c00126f5:	8d 76 00             	lea    esi,[esi+0x0]
c00126f8:	90                   	nop
c00126f9:	83 c4 2c             	add    esp,0x2c
c00126fc:	c3                   	ret    

c00126fd <CmOpen(char const*)>:
c00126fd:	57                   	push   edi
c00126fe:	56                   	push   esi
c00126ff:	53                   	push   ebx
c0012700:	83 ec 1c             	sub    esp,0x1c
c0012703:	6a 30                	push   0x30
c0012705:	e8 ac 53 ff ff       	call   c0007ab6 <malloc>
c001270a:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0012711:	89 c3                	mov    ebx,eax
c0012713:	e8 9e 53 ff ff       	call   c0007ab6 <malloc>
c0012718:	83 c4 0c             	add    esp,0xc
c001271b:	89 c6                	mov    esi,eax
c001271d:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0012723:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0012727:	50                   	push   eax
c0012728:	e8 15 90 ff ff       	call   c000b742 <File::File(char const*, Process*)>
c001272d:	83 c4 0c             	add    esp,0xc
c0012730:	89 33                	mov    DWORD PTR [ebx],esi
c0012732:	8d 44 24 07          	lea    eax,[esp+0x7]
c0012736:	50                   	push   eax
c0012737:	8d 44 24 10          	lea    eax,[esp+0x10]
c001273b:	50                   	push   eax
c001273c:	56                   	push   esi
c001273d:	e8 be 93 ff ff       	call   c000bb00 <File::stat(unsigned long long*, bool*)>
c0012742:	5a                   	pop    edx
c0012743:	59                   	pop    ecx
c0012744:	6a 01                	push   0x1
c0012746:	ff 33                	push   DWORD PTR [ebx]
c0012748:	e8 b1 90 ff ff       	call   c000b7fe <File::open(FileOpenMode)>
c001274d:	5e                   	pop    esi
c001274e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012752:	e8 5f 53 ff ff       	call   c0007ab6 <malloc>
c0012757:	5a                   	pop    edx
c0012758:	89 c7                	mov    edi,eax
c001275a:	8d 74 24 10          	lea    esi,[esp+0x10]
c001275e:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012760:	8b 10                	mov    edx,DWORD PTR [eax]
c0012762:	56                   	push   esi
c0012763:	57                   	push   edi
c0012764:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012768:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001276c:	50                   	push   eax
c001276d:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012770:	83 c4 14             	add    esp,0x14
c0012773:	ff 33                	push   DWORD PTR [ebx]
c0012775:	e8 e2 90 ff ff       	call   c000b85c <File::close()>
c001277a:	59                   	pop    ecx
c001277b:	58                   	pop    eax
c001277c:	6a 13                	push   0x13
c001277e:	ff 33                	push   DWORD PTR [ebx]
c0012780:	e8 79 90 ff ff       	call   c000b7fe <File::open(FileOpenMode)>
c0012785:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012787:	8b 10                	mov    edx,DWORD PTR [eax]
c0012789:	89 34 24             	mov    DWORD PTR [esp],esi
c001278c:	57                   	push   edi
c001278d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012791:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012795:	50                   	push   eax
c0012796:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012799:	83 c4 14             	add    esp,0x14
c001279c:	57                   	push   edi
c001279d:	e8 24 53 ff ff       	call   c0007ac6 <free>
c00127a2:	83 c4 10             	add    esp,0x10
c00127a5:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00127a8:	75 10                	jne    c00127ba <CmOpen(char const*)+0xbd>
c00127aa:	83 ec 0c             	sub    esp,0xc
c00127ad:	68 b9 1e 02 c0       	push   0xc0021eb9
c00127b2:	e8 c2 ea ff ff       	call   c0011279 <KePanic(char const*)>
c00127b7:	83 c4 10             	add    esp,0x10
c00127ba:	8d 7b 05             	lea    edi,[ebx+0x5]
c00127bd:	50                   	push   eax
c00127be:	6a 00                	push   0x0
c00127c0:	6a 00                	push   0x0
c00127c2:	ff 33                	push   DWORD PTR [ebx]
c00127c4:	e8 f3 90 ff ff       	call   c000b8bc <File::seek(unsigned long long)>
c00127c9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00127cb:	8b 10                	mov    edx,DWORD PTR [eax]
c00127cd:	89 34 24             	mov    DWORD PTR [esp],esi
c00127d0:	57                   	push   edi
c00127d1:	6a 00                	push   0x0
c00127d3:	6a 2b                	push   0x2b
c00127d5:	50                   	push   eax
c00127d6:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c00127d9:	83 c4 1c             	add    esp,0x1c
c00127dc:	6a 00                	push   0x0
c00127de:	6a 00                	push   0x0
c00127e0:	ff 33                	push   DWORD PTR [ebx]
c00127e2:	e8 d5 90 ff ff       	call   c000b8bc <File::seek(unsigned long long)>
c00127e7:	83 c4 0c             	add    esp,0xc
c00127ea:	6a 08                	push   0x8
c00127ec:	68 ca 1e 02 c0       	push   0xc0021eca
c00127f1:	57                   	push   edi
c00127f2:	e8 89 db fe ff       	call   c0000380 <memcmp>
c00127f7:	83 c4 10             	add    esp,0x10
c00127fa:	85 c0                	test   eax,eax
c00127fc:	74 10                	je     c001280e <CmOpen(char const*)+0x111>
c00127fe:	83 ec 0c             	sub    esp,0xc
c0012801:	68 d3 1e 02 c0       	push   0xc0021ed3
c0012806:	e8 6e ea ff ff       	call   c0011279 <KePanic(char const*)>
c001280b:	83 c4 10             	add    esp,0x10
c001280e:	c6 43 04 01          	mov    BYTE PTR [ebx+0x4],0x1
c0012812:	89 d8                	mov    eax,ebx
c0012814:	83 c4 10             	add    esp,0x10
c0012817:	5b                   	pop    ebx
c0012818:	5e                   	pop    esi
c0012819:	5f                   	pop    edi
c001281a:	c3                   	ret    

c001281b <CmClose(Reghive_Tag*)>:
c001281b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001281f:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c0012823:	74 0b                	je     c0012830 <CmClose(Reghive_Tag*)+0x15>
c0012825:	8b 00                	mov    eax,DWORD PTR [eax]
c0012827:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001282b:	e9 2c 90 ff ff       	jmp    c000b85c <File::close()>
c0012830:	c3                   	ret    

c0012831 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>:
c0012831:	53                   	push   ebx
c0012832:	83 ec 18             	sub    esp,0x18
c0012835:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0012839:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c001283d:	74 29                	je     c0012868 <CmReadExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c001283f:	50                   	push   eax
c0012840:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012845:	99                   	cdq    
c0012846:	52                   	push   edx
c0012847:	50                   	push   eax
c0012848:	ff 33                	push   DWORD PTR [ebx]
c001284a:	e8 6d 90 ff ff       	call   c000b8bc <File::seek(unsigned long long)>
c001284f:	5a                   	pop    edx
c0012850:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012852:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012856:	8b 10                	mov    edx,DWORD PTR [eax]
c0012858:	51                   	push   ecx
c0012859:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c001285d:	6a 00                	push   0x0
c001285f:	6a 2b                	push   0x2b
c0012861:	50                   	push   eax
c0012862:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012865:	83 c4 20             	add    esp,0x20
c0012868:	83 c4 18             	add    esp,0x18
c001286b:	5b                   	pop    ebx
c001286c:	c3                   	ret    

c001286d <CmGetString(Reghive_Tag*, int, char*)>:
c001286d:	55                   	push   ebp
c001286e:	57                   	push   edi
c001286f:	56                   	push   esi
c0012870:	53                   	push   ebx
c0012871:	31 db                	xor    ebx,ebx
c0012873:	83 ec 70             	sub    esp,0x70
c0012876:	8b ac 24 84 00 00 00 	mov    ebp,DWORD PTR [esp+0x84]
c001287d:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0012881:	50                   	push   eax
c0012882:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0012889:	55                   	push   ebp
c001288a:	e8 a2 ff ff ff       	call   c0012831 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001288f:	83 c4 10             	add    esp,0x10
c0012892:	0f b6 44 1c 22       	movzx  eax,BYTE PTR [esp+ebx*1+0x22]
c0012897:	c1 e0 08             	shl    eax,0x8
c001289a:	89 c2                	mov    edx,eax
c001289c:	0f b6 44 1c 21       	movzx  eax,BYTE PTR [esp+ebx*1+0x21]
c00128a1:	09 d0                	or     eax,edx
c00128a3:	0f b6 54 1c 20       	movzx  edx,BYTE PTR [esp+ebx*1+0x20]
c00128a8:	c1 e0 08             	shl    eax,0x8
c00128ab:	09 d0                	or     eax,edx
c00128ad:	74 25                	je     c00128d4 <CmGetString(Reghive_Tag*, int, char*)+0x67>
c00128af:	6b fb 0d             	imul   edi,ebx,0xd
c00128b2:	52                   	push   edx
c00128b3:	8d 54 24 39          	lea    edx,[esp+0x39]
c00128b7:	52                   	push   edx
c00128b8:	50                   	push   eax
c00128b9:	55                   	push   ebp
c00128ba:	e8 72 ff ff ff       	call   c0012831 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00128bf:	8d 74 24 49          	lea    esi,[esp+0x49]
c00128c3:	03 bc 24 98 00 00 00 	add    edi,DWORD PTR [esp+0x98]
c00128ca:	b9 27 00 00 00       	mov    ecx,0x27
c00128cf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00128d1:	83 c4 10             	add    esp,0x10
c00128d4:	83 c3 03             	add    ebx,0x3
c00128d7:	83 fb 15             	cmp    ebx,0x15
c00128da:	75 b6                	jne    c0012892 <CmGetString(Reghive_Tag*, int, char*)+0x25>
c00128dc:	83 c4 6c             	add    esp,0x6c
c00128df:	5b                   	pop    ebx
c00128e0:	5e                   	pop    esi
c00128e1:	5f                   	pop    edi
c00128e2:	5d                   	pop    ebp
c00128e3:	c3                   	ret    

c00128e4 <CmEnterDirectory(Reghive_Tag*, int)>:
c00128e4:	83 ec 40             	sub    esp,0x40
c00128e7:	8d 44 24 09          	lea    eax,[esp+0x9]
c00128eb:	50                   	push   eax
c00128ec:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00128f0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00128f4:	e8 38 ff ff ff       	call   c0012831 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c00128f9:	83 c4 10             	add    esp,0x10
c00128fc:	83 c8 ff             	or     eax,0xffffffff
c00128ff:	80 7c 24 05 4e       	cmp    BYTE PTR [esp+0x5],0x4e
c0012904:	75 19                	jne    c001291f <CmEnterDirectory(Reghive_Tag*, int)+0x3b>
c0012906:	0f b6 54 24 1b       	movzx  edx,BYTE PTR [esp+0x1b]
c001290b:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c0012910:	c1 e0 08             	shl    eax,0x8
c0012913:	09 c2                	or     edx,eax
c0012915:	0f b6 44 24 1d       	movzx  eax,BYTE PTR [esp+0x1d]
c001291a:	c1 e0 10             	shl    eax,0x10
c001291d:	09 d0                	or     eax,edx
c001291f:	83 c4 3c             	add    esp,0x3c
c0012922:	c3                   	ret    

c0012923 <CmGetNext(Reghive_Tag*, int)>:
c0012923:	83 ec 40             	sub    esp,0x40
c0012926:	8d 44 24 09          	lea    eax,[esp+0x9]
c001292a:	50                   	push   eax
c001292b:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001292f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012933:	e8 f9 fe ff ff       	call   c0012831 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012938:	0f b6 54 24 16       	movzx  edx,BYTE PTR [esp+0x16]
c001293d:	0f b6 44 24 17       	movzx  eax,BYTE PTR [esp+0x17]
c0012942:	c1 e0 08             	shl    eax,0x8
c0012945:	09 c2                	or     edx,eax
c0012947:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c001294c:	83 c4 4c             	add    esp,0x4c
c001294f:	c1 e0 10             	shl    eax,0x10
c0012952:	09 d0                	or     eax,edx
c0012954:	c3                   	ret    

c0012955 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>:
c0012955:	53                   	push   ebx
c0012956:	83 ec 18             	sub    esp,0x18
c0012959:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001295d:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c0012961:	74 29                	je     c001298c <CmWriteExtent(Reghive_Tag*, int, unsigned char*)+0x37>
c0012963:	50                   	push   eax
c0012964:	6b 44 24 28 2b       	imul   eax,DWORD PTR [esp+0x28],0x2b
c0012969:	99                   	cdq    
c001296a:	52                   	push   edx
c001296b:	50                   	push   eax
c001296c:	ff 33                	push   DWORD PTR [ebx]
c001296e:	e8 49 8f ff ff       	call   c000b8bc <File::seek(unsigned long long)>
c0012973:	5a                   	pop    edx
c0012974:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012976:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001297a:	8b 10                	mov    edx,DWORD PTR [eax]
c001297c:	51                   	push   ecx
c001297d:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0012981:	6a 00                	push   0x0
c0012983:	6a 2b                	push   0x2b
c0012985:	50                   	push   eax
c0012986:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012989:	83 c4 20             	add    esp,0x20
c001298c:	83 c4 18             	add    esp,0x18
c001298f:	5b                   	pop    ebx
c0012990:	c3                   	ret    

c0012991 <CmFreeExtent(Reghive_Tag*, int)>:
c0012991:	53                   	push   ebx
c0012992:	83 ec 3c             	sub    esp,0x3c
c0012995:	6a 2b                	push   0x2b
c0012997:	6a 00                	push   0x0
c0012999:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001299d:	53                   	push   ebx
c001299e:	e8 4d db fe ff       	call   c00004f0 <memset>
c00129a3:	83 c4 0c             	add    esp,0xc
c00129a6:	53                   	push   ebx
c00129a7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00129ab:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00129af:	e8 a1 ff ff ff       	call   c0012955 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00129b4:	83 c4 48             	add    esp,0x48
c00129b7:	5b                   	pop    ebx
c00129b8:	c3                   	ret    

c00129b9 <CmUpdateHeader(Reghive_Tag*)>:
c00129b9:	83 ec 0c             	sub    esp,0xc
c00129bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00129c0:	80 78 04 00          	cmp    BYTE PTR [eax+0x4],0x0
c00129c4:	74 10                	je     c00129d6 <CmUpdateHeader(Reghive_Tag*)+0x1d>
c00129c6:	52                   	push   edx
c00129c7:	8d 50 05             	lea    edx,[eax+0x5]
c00129ca:	52                   	push   edx
c00129cb:	6a 00                	push   0x0
c00129cd:	50                   	push   eax
c00129ce:	e8 82 ff ff ff       	call   c0012955 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c00129d3:	83 c4 10             	add    esp,0x10
c00129d6:	83 c4 0c             	add    esp,0xc
c00129d9:	c3                   	ret    

c00129da <CmExpand(Reghive_Tag*, int)>:
c00129da:	57                   	push   edi
c00129db:	56                   	push   esi
c00129dc:	83 ce ff             	or     esi,0xffffffff
c00129df:	53                   	push   ebx
c00129e0:	83 ec 30             	sub    esp,0x30
c00129e3:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00129e7:	80 7b 04 00          	cmp    BYTE PTR [ebx+0x4],0x0
c00129eb:	74 5f                	je     c0012a4c <CmExpand(Reghive_Tag*, int)+0x72>
c00129ed:	31 d2                	xor    edx,edx
c00129ef:	31 f6                	xor    esi,esi
c00129f1:	50                   	push   eax
c00129f2:	6b 43 0d 2b          	imul   eax,DWORD PTR [ebx+0xd],0x2b
c00129f6:	52                   	push   edx
c00129f7:	50                   	push   eax
c00129f8:	ff 33                	push   DWORD PTR [ebx]
c00129fa:	e8 bd 8e ff ff       	call   c000b8bc <File::seek(unsigned long long)>
c00129ff:	83 c4 0c             	add    esp,0xc
c0012a02:	6a 2b                	push   0x2b
c0012a04:	6a 00                	push   0x0
c0012a06:	8d 7c 24 11          	lea    edi,[esp+0x11]
c0012a0a:	57                   	push   edi
c0012a0b:	e8 e0 da fe ff       	call   c00004f0 <memset>
c0012a10:	83 c4 10             	add    esp,0x10
c0012a13:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c0012a17:	7d 1b                	jge    c0012a34 <CmExpand(Reghive_Tag*, int)+0x5a>
c0012a19:	83 ec 0c             	sub    esp,0xc
c0012a1c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0012a1e:	8d 4c 24 0c          	lea    ecx,[esp+0xc]
c0012a22:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a24:	46                   	inc    esi
c0012a25:	51                   	push   ecx
c0012a26:	57                   	push   edi
c0012a27:	6a 00                	push   0x0
c0012a29:	6a 2b                	push   0x2b
c0012a2b:	50                   	push   eax
c0012a2c:	ff 52 10             	call   DWORD PTR [edx+0x10]
c0012a2f:	83 c4 20             	add    esp,0x20
c0012a32:	eb df                	jmp    c0012a13 <CmExpand(Reghive_Tag*, int)+0x39>
c0012a34:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0012a38:	8b 73 0d             	mov    esi,DWORD PTR [ebx+0xd]
c0012a3b:	83 ec 0c             	sub    esp,0xc
c0012a3e:	01 f2                	add    edx,esi
c0012a40:	89 53 0d             	mov    DWORD PTR [ebx+0xd],edx
c0012a43:	53                   	push   ebx
c0012a44:	e8 70 ff ff ff       	call   c00129b9 <CmUpdateHeader(Reghive_Tag*)>
c0012a49:	83 c4 10             	add    esp,0x10
c0012a4c:	83 c4 30             	add    esp,0x30
c0012a4f:	89 f0                	mov    eax,esi
c0012a51:	5b                   	pop    ebx
c0012a52:	5e                   	pop    esi
c0012a53:	5f                   	pop    edi
c0012a54:	c3                   	ret    

c0012a55 <CmFindUnusedExtent(Reghive_Tag*)>:
c0012a55:	55                   	push   ebp
c0012a56:	57                   	push   edi
c0012a57:	56                   	push   esi
c0012a58:	53                   	push   ebx
c0012a59:	83 cb ff             	or     ebx,0xffffffff
c0012a5c:	83 ec 1c             	sub    esp,0x1c
c0012a5f:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0012a63:	80 7d 04 00          	cmp    BYTE PTR [ebp+0x4],0x0
c0012a67:	74 68                	je     c0012ad1 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012a69:	be 2b 00 00 00       	mov    esi,0x2b
c0012a6e:	51                   	push   ecx
c0012a6f:	31 ff                	xor    edi,edi
c0012a71:	6a 00                	push   0x0
c0012a73:	31 db                	xor    ebx,ebx
c0012a75:	6a 00                	push   0x0
c0012a77:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012a7a:	e8 3d 8e ff ff       	call   c000b8bc <File::seek(unsigned long long)>
c0012a7f:	83 c4 10             	add    esp,0x10
c0012a82:	39 5d 0d             	cmp    DWORD PTR [ebp+0xd],ebx
c0012a85:	76 3b                	jbe    c0012ac2 <CmFindUnusedExtent(Reghive_Tag*)+0x6d>
c0012a87:	83 ec 0c             	sub    esp,0xc
c0012a8a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012a8d:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c0012a91:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a93:	51                   	push   ecx
c0012a94:	8d 4c 24 1b          	lea    ecx,[esp+0x1b]
c0012a98:	51                   	push   ecx
c0012a99:	6a 00                	push   0x0
c0012a9b:	6a 01                	push   0x1
c0012a9d:	50                   	push   eax
c0012a9e:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0012aa1:	83 c4 20             	add    esp,0x20
c0012aa4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012aa9:	74 26                	je     c0012ad1 <CmFindUnusedExtent(Reghive_Tag*)+0x7c>
c0012aab:	43                   	inc    ebx
c0012aac:	52                   	push   edx
c0012aad:	57                   	push   edi
c0012aae:	56                   	push   esi
c0012aaf:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0012ab2:	e8 05 8e ff ff       	call   c000b8bc <File::seek(unsigned long long)>
c0012ab7:	83 c6 2b             	add    esi,0x2b
c0012aba:	83 d7 00             	adc    edi,0x0
c0012abd:	83 c4 10             	add    esp,0x10
c0012ac0:	eb c0                	jmp    c0012a82 <CmFindUnusedExtent(Reghive_Tag*)+0x2d>
c0012ac2:	50                   	push   eax
c0012ac3:	50                   	push   eax
c0012ac4:	6a 40                	push   0x40
c0012ac6:	55                   	push   ebp
c0012ac7:	e8 0e ff ff ff       	call   c00129da <CmExpand(Reghive_Tag*, int)>
c0012acc:	83 c4 10             	add    esp,0x10
c0012acf:	89 c3                	mov    ebx,eax
c0012ad1:	83 c4 1c             	add    esp,0x1c
c0012ad4:	89 d8                	mov    eax,ebx
c0012ad6:	5b                   	pop    ebx
c0012ad7:	5e                   	pop    esi
c0012ad8:	5f                   	pop    edi
c0012ad9:	5d                   	pop    ebp
c0012ada:	c3                   	ret    

c0012adb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>:
c0012adb:	55                   	push   ebp
c0012adc:	57                   	push   edi
c0012add:	56                   	push   esi
c0012ade:	53                   	push   ebx
c0012adf:	81 ec 88 00 00 00    	sub    esp,0x88
c0012ae5:	8b 9c 24 a0 00 00 00 	mov    ebx,DWORD PTR [esp+0xa0]
c0012aec:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012af3:	e8 5d ff ff ff       	call   c0012a55 <CmFindUnusedExtent(Reghive_Tag*)>
c0012af8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012afc:	83 c4 0c             	add    esp,0xc
c0012aff:	6a 2b                	push   0x2b
c0012b01:	6a 00                	push   0x0
c0012b03:	8d 6c 24 26          	lea    ebp,[esp+0x26]
c0012b07:	55                   	push   ebp
c0012b08:	e8 e3 d9 fe ff       	call   c00004f0 <memset>
c0012b0d:	83 c4 10             	add    esp,0x10
c0012b10:	85 db                	test   ebx,ebx
c0012b12:	74 12                	je     c0012b26 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x4b>
c0012b14:	51                   	push   ecx
c0012b15:	55                   	push   ebp
c0012b16:	53                   	push   ebx
c0012b17:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012b1e:	e8 0e fd ff ff       	call   c0012831 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012b23:	83 c4 10             	add    esp,0x10
c0012b26:	8d 7c 24 45          	lea    edi,[esp+0x45]
c0012b2a:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012b31:	b9 2b 00 00 00       	mov    ecx,0x2b
c0012b36:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012b38:	85 db                	test   ebx,ebx
c0012b3a:	74 49                	je     c0012b85 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xaa>
c0012b3c:	0f b6 4c 24 1b       	movzx  ecx,BYTE PTR [esp+0x1b]
c0012b41:	0f b7 44 24 1c       	movzx  eax,WORD PTR [esp+0x1c]
c0012b46:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0012b4a:	c1 e0 08             	shl    eax,0x8
c0012b4d:	81 e2 ff ff ff 00    	and    edx,0xffffff
c0012b53:	09 c8                	or     eax,ecx
c0012b55:	74 11                	je     c0012b68 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x8d>
c0012b57:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0012b5b:	88 64 24 47          	mov    BYTE PTR [esp+0x47],ah
c0012b5f:	c1 e8 10             	shr    eax,0x10
c0012b62:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c0012b66:	eb 0f                	jmp    c0012b77 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0x9c>
c0012b68:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012b6d:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012b72:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012b77:	88 54 24 1b          	mov    BYTE PTR [esp+0x1b],dl
c0012b7b:	c1 ea 08             	shr    edx,0x8
c0012b7e:	66 89 54 24 1c       	mov    WORD PTR [esp+0x1c],dx
c0012b83:	eb 0f                	jmp    c0012b94 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xb9>
c0012b85:	c6 44 24 46 00       	mov    BYTE PTR [esp+0x46],0x0
c0012b8a:	c6 44 24 47 00       	mov    BYTE PTR [esp+0x47],0x0
c0012b8f:	c6 44 24 48 00       	mov    BYTE PTR [esp+0x48],0x0
c0012b94:	52                   	push   edx
c0012b95:	8d 44 24 49          	lea    eax,[esp+0x49]
c0012b99:	50                   	push   eax
c0012b9a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0012b9e:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012ba5:	e8 ab fd ff ff       	call   c0012955 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012baa:	83 c4 10             	add    esp,0x10
c0012bad:	85 db                	test   ebx,ebx
c0012baf:	74 12                	je     c0012bc3 <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)+0xe8>
c0012bb1:	50                   	push   eax
c0012bb2:	55                   	push   ebp
c0012bb3:	53                   	push   ebx
c0012bb4:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012bbb:	e8 95 fd ff ff       	call   c0012955 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012bc0:	83 c4 10             	add    esp,0x10
c0012bc3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012bc7:	83 c4 7c             	add    esp,0x7c
c0012bca:	5b                   	pop    ebx
c0012bcb:	5e                   	pop    esi
c0012bcc:	5f                   	pop    edi
c0012bcd:	5d                   	pop    ebp
c0012bce:	c3                   	ret    

c0012bcf <CmSetString(Reghive_Tag*, int, char const*)>:
c0012bcf:	55                   	push   ebp
c0012bd0:	57                   	push   edi
c0012bd1:	56                   	push   esi
c0012bd2:	53                   	push   ebx
c0012bd3:	bb 27 00 00 00       	mov    ebx,0x27
c0012bd8:	81 ec 88 00 00 00    	sub    esp,0x88
c0012bde:	8b b4 24 9c 00 00 00 	mov    esi,DWORD PTR [esp+0x9c]
c0012be5:	ff b4 24 a4 00 00 00 	push   DWORD PTR [esp+0xa4]
c0012bec:	e8 7f d9 fe ff       	call   c0000570 <strlen>
c0012bf1:	8d 48 26             	lea    ecx,[eax+0x26]
c0012bf4:	89 c8                	mov    eax,ecx
c0012bf6:	99                   	cdq    
c0012bf7:	f7 fb                	idiv   ebx
c0012bf9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012bfd:	83 c4 10             	add    esp,0x10
c0012c00:	81 f9 37 01 00 00    	cmp    ecx,0x137
c0012c06:	7e 10                	jle    c0012c18 <CmSetString(Reghive_Tag*, int, char const*)+0x49>
c0012c08:	83 ec 0c             	sub    esp,0xc
c0012c0b:	68 e4 1e 02 c0       	push   0xc0021ee4
c0012c10:	e8 64 e6 ff ff       	call   c0011279 <KePanic(char const*)>
c0012c15:	83 c4 10             	add    esp,0x10
c0012c18:	31 ff                	xor    edi,edi
c0012c1a:	50                   	push   eax
c0012c1b:	8d 5c 24 1e          	lea    ebx,[esp+0x1e]
c0012c1f:	53                   	push   ebx
c0012c20:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012c27:	56                   	push   esi
c0012c28:	e8 04 fc ff ff       	call   c0012831 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012c2d:	83 c4 10             	add    esp,0x10
c0012c30:	0f b6 53 18          	movzx  edx,BYTE PTR [ebx+0x18]
c0012c34:	89 d0                	mov    eax,edx
c0012c36:	0f b6 53 17          	movzx  edx,BYTE PTR [ebx+0x17]
c0012c3a:	c1 e0 08             	shl    eax,0x8
c0012c3d:	09 c2                	or     edx,eax
c0012c3f:	0f b6 43 16          	movzx  eax,BYTE PTR [ebx+0x16]
c0012c43:	c1 e2 08             	shl    edx,0x8
c0012c46:	09 c2                	or     edx,eax
c0012c48:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c0012c4c:	7e 76                	jle    c0012cc4 <CmSetString(Reghive_Tag*, int, char const*)+0xf5>
c0012c4e:	85 d2                	test   edx,edx
c0012c50:	75 25                	jne    c0012c77 <CmSetString(Reghive_Tag*, int, char const*)+0xa8>
c0012c52:	c6 44 24 45 13       	mov    BYTE PTR [esp+0x45],0x13
c0012c57:	8d 44 24 45          	lea    eax,[esp+0x45]
c0012c5b:	50                   	push   eax
c0012c5c:	6a 00                	push   0x0
c0012c5e:	6a 00                	push   0x0
c0012c60:	56                   	push   esi
c0012c61:	e8 75 fe ff ff       	call   c0012adb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c0012c66:	83 c4 10             	add    esp,0x10
c0012c69:	89 c2                	mov    edx,eax
c0012c6b:	88 43 16             	mov    BYTE PTR [ebx+0x16],al
c0012c6e:	88 63 17             	mov    BYTE PTR [ebx+0x17],ah
c0012c71:	c1 f8 10             	sar    eax,0x10
c0012c74:	88 43 18             	mov    BYTE PTR [ebx+0x18],al
c0012c77:	55                   	push   ebp
c0012c78:	8d 6c 24 49          	lea    ebp,[esp+0x49]
c0012c7c:	55                   	push   ebp
c0012c7d:	52                   	push   edx
c0012c7e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0012c82:	56                   	push   esi
c0012c83:	e8 a9 fb ff ff       	call   c0012831 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012c88:	83 c4 0c             	add    esp,0xc
c0012c8b:	6a 27                	push   0x27
c0012c8d:	6a 00                	push   0x0
c0012c8f:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012c93:	51                   	push   ecx
c0012c94:	e8 57 d8 fe ff       	call   c00004f0 <memset>
c0012c99:	83 c4 0c             	add    esp,0xc
c0012c9c:	6b c7 27             	imul   eax,edi,0x27
c0012c9f:	6a 27                	push   0x27
c0012ca1:	03 84 24 a0 00 00 00 	add    eax,DWORD PTR [esp+0xa0]
c0012ca8:	50                   	push   eax
c0012ca9:	8d 4c 24 55          	lea    ecx,[esp+0x55]
c0012cad:	51                   	push   ecx
c0012cae:	e8 cd d9 fe ff       	call   c0000680 <strncpy>
c0012cb3:	83 c4 0c             	add    esp,0xc
c0012cb6:	55                   	push   ebp
c0012cb7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0012cbb:	52                   	push   edx
c0012cbc:	56                   	push   esi
c0012cbd:	e8 93 fc ff ff       	call   c0012955 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012cc2:	eb 19                	jmp    c0012cdd <CmSetString(Reghive_Tag*, int, char const*)+0x10e>
c0012cc4:	85 d2                	test   edx,edx
c0012cc6:	74 18                	je     c0012ce0 <CmSetString(Reghive_Tag*, int, char const*)+0x111>
c0012cc8:	51                   	push   ecx
c0012cc9:	51                   	push   ecx
c0012cca:	52                   	push   edx
c0012ccb:	56                   	push   esi
c0012ccc:	e8 c0 fc ff ff       	call   c0012991 <CmFreeExtent(Reghive_Tag*, int)>
c0012cd1:	c6 43 16 00          	mov    BYTE PTR [ebx+0x16],0x0
c0012cd5:	c6 43 17 00          	mov    BYTE PTR [ebx+0x17],0x0
c0012cd9:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0012cdd:	83 c4 10             	add    esp,0x10
c0012ce0:	47                   	inc    edi
c0012ce1:	83 c3 03             	add    ebx,0x3
c0012ce4:	83 ff 07             	cmp    edi,0x7
c0012ce7:	0f 85 43 ff ff ff    	jne    c0012c30 <CmSetString(Reghive_Tag*, int, char const*)+0x61>
c0012ced:	50                   	push   eax
c0012cee:	8d 44 24 1e          	lea    eax,[esp+0x1e]
c0012cf2:	50                   	push   eax
c0012cf3:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c0012cfa:	56                   	push   esi
c0012cfb:	e8 55 fc ff ff       	call   c0012955 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012d00:	81 c4 8c 00 00 00    	add    esp,0x8c
c0012d06:	5b                   	pop    ebx
c0012d07:	5e                   	pop    esi
c0012d08:	5f                   	pop    edi
c0012d09:	5d                   	pop    ebp
c0012d0a:	c3                   	ret    

c0012d0b <CmGetMatch(char*, char*, bool, bool*)>:
c0012d0b:	56                   	push   esi
c0012d0c:	53                   	push   ebx
c0012d0d:	50                   	push   eax
c0012d0e:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012d12:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0012d17:	74 25                	je     c0012d3e <CmGetMatch(char*, char*, bool, bool*)+0x33>
c0012d19:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012d1c:	31 db                	xor    ebx,ebx
c0012d1e:	50                   	push   eax
c0012d1f:	50                   	push   eax
c0012d20:	8d 04 9d 80 33 02 c0 	lea    eax,[ebx*4-0x3ffdcc80]
c0012d27:	50                   	push   eax
c0012d28:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012d2c:	e8 1f da fe ff       	call   c0000750 <strcmp>
c0012d31:	83 c4 10             	add    esp,0x10
c0012d34:	85 c0                	test   eax,eax
c0012d36:	74 2e                	je     c0012d66 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012d38:	43                   	inc    ebx
c0012d39:	83 fb 3f             	cmp    ebx,0x3f
c0012d3c:	75 e0                	jne    c0012d1e <CmGetMatch(char*, char*, bool, bool*)+0x13>
c0012d3e:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012d41:	31 db                	xor    ebx,ebx
c0012d43:	8d 04 9d 80 33 02 c0 	lea    eax,[ebx*4-0x3ffdcc80]
c0012d4a:	51                   	push   ecx
c0012d4b:	51                   	push   ecx
c0012d4c:	50                   	push   eax
c0012d4d:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0012d51:	e8 fa d9 fe ff       	call   c0000750 <strcmp>
c0012d56:	83 c4 10             	add    esp,0x10
c0012d59:	85 c0                	test   eax,eax
c0012d5b:	74 09                	je     c0012d66 <CmGetMatch(char*, char*, bool, bool*)+0x5b>
c0012d5d:	43                   	inc    ebx
c0012d5e:	83 fb 3f             	cmp    ebx,0x3f
c0012d61:	75 e0                	jne    c0012d43 <CmGetMatch(char*, char*, bool, bool*)+0x38>
c0012d63:	83 cb ff             	or     ebx,0xffffffff
c0012d66:	89 d8                	mov    eax,ebx
c0012d68:	5a                   	pop    edx
c0012d69:	5b                   	pop    ebx
c0012d6a:	5e                   	pop    esi
c0012d6b:	c3                   	ret    

c0012d6c <CmAddShift(unsigned int*, int*, unsigned char, int)>:
c0012d6c:	55                   	push   ebp
c0012d6d:	31 c0                	xor    eax,eax
c0012d6f:	57                   	push   edi
c0012d70:	56                   	push   esi
c0012d71:	53                   	push   ebx
c0012d72:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0012d76:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012d7a:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0012d7c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0012d80:	8d 2c 31             	lea    ebp,[ecx+esi*1]
c0012d83:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0012d87:	83 fd 1f             	cmp    ebp,0x1f
c0012d8a:	7f 0b                	jg     c0012d97 <CmAddShift(unsigned int*, int*, unsigned char, int)+0x2b>
c0012d8c:	0f b6 c2             	movzx  eax,dl
c0012d8f:	d3 e0                	shl    eax,cl
c0012d91:	09 07                	or     DWORD PTR [edi],eax
c0012d93:	b0 01                	mov    al,0x1
c0012d95:	01 33                	add    DWORD PTR [ebx],esi
c0012d97:	5b                   	pop    ebx
c0012d98:	5e                   	pop    esi
c0012d99:	5f                   	pop    edi
c0012d9a:	5d                   	pop    ebp
c0012d9b:	c3                   	ret    

c0012d9c <CmGetShift(unsigned int*, int*, int, bool*)>:
c0012d9c:	57                   	push   edi
c0012d9d:	56                   	push   esi
c0012d9e:	53                   	push   ebx
c0012d9f:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0012da3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012da7:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0012dab:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0012daf:	39 0b                	cmp    DWORD PTR [ebx],ecx
c0012db1:	7c 17                	jl     c0012dca <CmGetShift(unsigned int*, int*, int, bool*)+0x2e>
c0012db3:	8b 17                	mov    edx,DWORD PTR [edi]
c0012db5:	b8 01 00 00 00       	mov    eax,0x1
c0012dba:	d3 e0                	shl    eax,cl
c0012dbc:	48                   	dec    eax
c0012dbd:	21 d0                	and    eax,edx
c0012dbf:	d3 ea                	shr    edx,cl
c0012dc1:	89 17                	mov    DWORD PTR [edi],edx
c0012dc3:	29 0b                	sub    DWORD PTR [ebx],ecx
c0012dc5:	c6 06 01             	mov    BYTE PTR [esi],0x1
c0012dc8:	eb 05                	jmp    c0012dcf <CmGetShift(unsigned int*, int*, int, bool*)+0x33>
c0012dca:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012dcd:	31 c0                	xor    eax,eax
c0012dcf:	5b                   	pop    ebx
c0012dd0:	5e                   	pop    esi
c0012dd1:	5f                   	pop    edi
c0012dd2:	c3                   	ret    

c0012dd3 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>:
c0012dd3:	83 ec 40             	sub    esp,0x40
c0012dd6:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012dda:	50                   	push   eax
c0012ddb:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ddf:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012de3:	e8 49 fa ff ff       	call   c0012831 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012de8:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0012dec:	8b 54 24 2b          	mov    edx,DWORD PTR [esp+0x2b]
c0012df0:	8b 4c 24 2f          	mov    ecx,DWORD PTR [esp+0x2f]
c0012df4:	89 10                	mov    DWORD PTR [eax],edx
c0012df6:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0012df9:	83 c4 4c             	add    esp,0x4c
c0012dfc:	c3                   	ret    

c0012dfd <CmSetInteger(Reghive_Tag*, int, unsigned long long)>:
c0012dfd:	55                   	push   ebp
c0012dfe:	57                   	push   edi
c0012dff:	56                   	push   esi
c0012e00:	53                   	push   ebx
c0012e01:	83 ec 40             	sub    esp,0x40
c0012e04:	8b 74 24 58          	mov    esi,DWORD PTR [esp+0x58]
c0012e08:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c0012e0c:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c0012e10:	8d 5c 24 09          	lea    ebx,[esp+0x9]
c0012e14:	53                   	push   ebx
c0012e15:	56                   	push   esi
c0012e16:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012e1a:	e8 12 fa ff ff       	call   c0012831 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012e1f:	89 7c 24 2b          	mov    DWORD PTR [esp+0x2b],edi
c0012e23:	89 6c 24 2f          	mov    DWORD PTR [esp+0x2f],ebp
c0012e27:	83 c4 0c             	add    esp,0xc
c0012e2a:	53                   	push   ebx
c0012e2b:	56                   	push   esi
c0012e2c:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0012e30:	e8 20 fb ff ff       	call   c0012955 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c0012e35:	83 c4 4c             	add    esp,0x4c
c0012e38:	5b                   	pop    ebx
c0012e39:	5e                   	pop    esi
c0012e3a:	5f                   	pop    edi
c0012e3b:	5d                   	pop    ebp
c0012e3c:	c3                   	ret    

c0012e3d <CmConvertFromInternalFilename(unsigned char const*, char*)>:
c0012e3d:	55                   	push   ebp
c0012e3e:	57                   	push   edi
c0012e3f:	56                   	push   esi
c0012e40:	31 f6                	xor    esi,esi
c0012e42:	53                   	push   ebx
c0012e43:	31 db                	xor    ebx,ebx
c0012e45:	83 ec 40             	sub    esp,0x40
c0012e48:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012e50:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0012e58:	6a 12                	push   0x12
c0012e5a:	68 ee 00 00 00       	push   0xee
c0012e5f:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012e63:	e8 88 d6 fe ff       	call   c00004f0 <memset>
c0012e68:	83 c4 10             	add    esp,0x10
c0012e6b:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0012e6f:	6a 08                	push   0x8
c0012e71:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012e75:	0f b6 04 18          	movzx  eax,BYTE PTR [eax+ebx*1]
c0012e79:	50                   	push   eax
c0012e7a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c0012e7e:	55                   	push   ebp
c0012e7f:	57                   	push   edi
c0012e80:	e8 e7 fe ff ff       	call   c0012d6c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0012e85:	83 c4 10             	add    esp,0x10
c0012e88:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012e8c:	50                   	push   eax
c0012e8d:	6a 06                	push   0x6
c0012e8f:	55                   	push   ebp
c0012e90:	57                   	push   edi
c0012e91:	e8 06 ff ff ff       	call   c0012d9c <CmGetShift(unsigned int*, int*, int, bool*)>
c0012e96:	83 c4 10             	add    esp,0x10
c0012e99:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0012e9e:	74 07                	je     c0012ea7 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x6a>
c0012ea0:	46                   	inc    esi
c0012ea1:	88 44 34 17          	mov    BYTE PTR [esp+esi*1+0x17],al
c0012ea5:	eb e1                	jmp    c0012e88 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x4b>
c0012ea7:	43                   	inc    ebx
c0012ea8:	83 fb 12             	cmp    ebx,0x12
c0012eab:	75 c2                	jne    c0012e6f <CmConvertFromInternalFilename(unsigned char const*, char*)+0x32>
c0012ead:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012eb1:	31 db                	xor    ebx,ebx
c0012eb3:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0012eb6:	50                   	push   eax
c0012eb7:	50                   	push   eax
c0012eb8:	0f b6 44 1c 20       	movzx  eax,BYTE PTR [esp+ebx*1+0x20]
c0012ebd:	43                   	inc    ebx
c0012ebe:	8d 04 85 80 33 02 c0 	lea    eax,[eax*4-0x3ffdcc80]
c0012ec5:	50                   	push   eax
c0012ec6:	ff 74 24 60          	push   DWORD PTR [esp+0x60]
c0012eca:	e8 71 d9 fe ff       	call   c0000840 <strcat>
c0012ecf:	83 c4 10             	add    esp,0x10
c0012ed2:	83 fb 18             	cmp    ebx,0x18
c0012ed5:	75 df                	jne    c0012eb6 <CmConvertFromInternalFilename(unsigned char const*, char*)+0x79>
c0012ed7:	83 c4 3c             	add    esp,0x3c
c0012eda:	31 c0                	xor    eax,eax
c0012edc:	5b                   	pop    ebx
c0012edd:	5e                   	pop    esi
c0012ede:	5f                   	pop    edi
c0012edf:	5d                   	pop    ebp
c0012ee0:	c3                   	ret    

c0012ee1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>:
c0012ee1:	83 ec 40             	sub    esp,0x40
c0012ee4:	8d 44 24 09          	lea    eax,[esp+0x9]
c0012ee8:	50                   	push   eax
c0012ee9:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012eed:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0012ef1:	e8 3b f9 ff ff       	call   c0012831 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0012ef6:	58                   	pop    eax
c0012ef7:	5a                   	pop    edx
c0012ef8:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0012efc:	8d 44 24 15          	lea    eax,[esp+0x15]
c0012f00:	50                   	push   eax
c0012f01:	e8 37 ff ff ff       	call   c0012e3d <CmConvertFromInternalFilename(unsigned char const*, char*)>
c0012f06:	0f b6 44 24 15       	movzx  eax,BYTE PTR [esp+0x15]
c0012f0b:	83 c4 4c             	add    esp,0x4c
c0012f0e:	c3                   	ret    

c0012f0f <CmConvertToInternalFilename(char const*, unsigned char*)>:
c0012f0f:	55                   	push   ebp
c0012f10:	57                   	push   edi
c0012f11:	56                   	push   esi
c0012f12:	53                   	push   ebx
c0012f13:	31 db                	xor    ebx,ebx
c0012f15:	83 ec 70             	sub    esp,0x70
c0012f18:	8b bc 24 84 00 00 00 	mov    edi,DWORD PTR [esp+0x84]
c0012f1f:	6a 30                	push   0x30
c0012f21:	6a 00                	push   0x0
c0012f23:	8d 74 24 3c          	lea    esi,[esp+0x3c]
c0012f27:	56                   	push   esi
c0012f28:	e8 c3 d5 fe ff       	call   c00004f0 <memset>
c0012f2d:	83 c4 10             	add    esp,0x10
c0012f30:	83 ec 0c             	sub    esp,0xc
c0012f33:	57                   	push   edi
c0012f34:	e8 37 d6 fe ff       	call   c0000570 <strlen>
c0012f39:	83 c4 10             	add    esp,0x10
c0012f3c:	39 d8                	cmp    eax,ebx
c0012f3e:	76 16                	jbe    c0012f56 <CmConvertToInternalFilename(char const*, unsigned char*)+0x47>
c0012f40:	83 ec 0c             	sub    esp,0xc
c0012f43:	0f be 04 1f          	movsx  eax,BYTE PTR [edi+ebx*1]
c0012f47:	50                   	push   eax
c0012f48:	e8 e3 d9 fe ff       	call   c0000930 <toupper>
c0012f4d:	83 c4 10             	add    esp,0x10
c0012f50:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0012f53:	43                   	inc    ebx
c0012f54:	eb da                	jmp    c0012f30 <CmConvertToInternalFilename(char const*, unsigned char*)+0x21>
c0012f56:	31 f6                	xor    esi,esi
c0012f58:	52                   	push   edx
c0012f59:	31 ff                	xor    edi,edi
c0012f5b:	6a 18                	push   0x18
c0012f5d:	6a 3f                	push   0x3f
c0012f5f:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012f63:	50                   	push   eax
c0012f64:	e8 87 d5 fe ff       	call   c00004f0 <memset>
c0012f69:	83 c4 10             	add    esp,0x10
c0012f6c:	8a 44 34 30          	mov    al,BYTE PTR [esp+esi*1+0x30]
c0012f70:	8d 5c 24 10          	lea    ebx,[esp+0x10]
c0012f74:	84 c0                	test   al,al
c0012f76:	0f 84 b0 00 00 00    	je     c001302c <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0012f7c:	88 44 24 14          	mov    BYTE PTR [esp+0x14],al
c0012f80:	c6 44 24 16 00       	mov    BYTE PTR [esp+0x16],0x0
c0012f85:	88 44 24 10          	mov    BYTE PTR [esp+0x10],al
c0012f89:	c6 44 24 11 00       	mov    BYTE PTR [esp+0x11],0x0
c0012f8e:	8d 6e 01             	lea    ebp,[esi+0x1]
c0012f91:	83 ec 0c             	sub    esp,0xc
c0012f94:	8a 54 2c 3c          	mov    dl,BYTE PTR [esp+ebp*1+0x3c]
c0012f98:	88 54 24 21          	mov    BYTE PTR [esp+0x21],dl
c0012f9c:	53                   	push   ebx
c0012f9d:	e8 ce d5 fe ff       	call   c0000570 <strlen>
c0012fa2:	83 c4 10             	add    esp,0x10
c0012fa5:	85 c0                	test   eax,eax
c0012fa7:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0012fab:	74 0b                	je     c0012fb8 <CmConvertToInternalFilename(char const*, unsigned char*)+0xa9>
c0012fad:	50                   	push   eax
c0012fae:	6a 01                	push   0x1
c0012fb0:	53                   	push   ebx
c0012fb1:	8d 44 24 20          	lea    eax,[esp+0x20]
c0012fb5:	50                   	push   eax
c0012fb6:	eb 0a                	jmp    c0012fc2 <CmConvertToInternalFilename(char const*, unsigned char*)+0xb3>
c0012fb8:	50                   	push   eax
c0012fb9:	6a 00                	push   0x0
c0012fbb:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0012fbf:	50                   	push   eax
c0012fc0:	6a 00                	push   0x0
c0012fc2:	e8 44 fd ff ff       	call   c0012d0b <CmGetMatch(char*, char*, bool, bool*)>
c0012fc7:	83 c4 10             	add    esp,0x10
c0012fca:	83 f8 ff             	cmp    eax,0xffffffff
c0012fcd:	75 1a                	jne    c0012fe9 <CmConvertToInternalFilename(char const*, unsigned char*)+0xda>
c0012fcf:	83 ec 0c             	sub    esp,0xc
c0012fd2:	68 f9 1e 02 c0       	push   0xc0021ef9
c0012fd7:	e8 9d e2 ff ff       	call   c0011279 <KePanic(char const*)>
c0012fdc:	83 c4 10             	add    esp,0x10
c0012fdf:	b8 02 00 00 00       	mov    eax,0x2
c0012fe4:	e9 bc 00 00 00       	jmp    c00130a5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0012fe9:	83 ff 18             	cmp    edi,0x18
c0012fec:	75 1a                	jne    c0013008 <CmConvertToInternalFilename(char const*, unsigned char*)+0xf9>
c0012fee:	83 ec 0c             	sub    esp,0xc
c0012ff1:	68 0e 1f 02 c0       	push   0xc0021f0e
c0012ff6:	e8 7e e2 ff ff       	call   c0011279 <KePanic(char const*)>
c0012ffb:	83 c4 10             	add    esp,0x10
c0012ffe:	b8 01 00 00 00       	mov    eax,0x1
c0013003:	e9 9d 00 00 00       	jmp    c00130a5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c0013008:	47                   	inc    edi
c0013009:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001300e:	88 44 3c 17          	mov    BYTE PTR [esp+edi*1+0x17],al
c0013012:	74 02                	je     c0013016 <CmConvertToInternalFilename(char const*, unsigned char*)+0x107>
c0013014:	89 ee                	mov    esi,ebp
c0013016:	83 ec 0c             	sub    esp,0xc
c0013019:	53                   	push   ebx
c001301a:	e8 51 d5 fe ff       	call   c0000570 <strlen>
c001301f:	83 c4 10             	add    esp,0x10
c0013022:	85 c0                	test   eax,eax
c0013024:	74 06                	je     c001302c <CmConvertToInternalFilename(char const*, unsigned char*)+0x11d>
c0013026:	46                   	inc    esi
c0013027:	e9 40 ff ff ff       	jmp    c0012f6c <CmConvertToInternalFilename(char const*, unsigned char*)+0x5d>
c001302c:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0013034:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001303c:	31 f6                	xor    esi,esi
c001303e:	50                   	push   eax
c001303f:	31 ff                	xor    edi,edi
c0013041:	6a 12                	push   0x12
c0013043:	68 ee 00 00 00       	push   0xee
c0013048:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c001304f:	e8 9c d4 fe ff       	call   c00004f0 <memset>
c0013054:	83 c4 10             	add    esp,0x10
c0013057:	83 fe 17             	cmp    esi,0x17
c001305a:	8d 6c 24 14          	lea    ebp,[esp+0x14]
c001305e:	7e 26                	jle    c0013086 <CmConvertToInternalFilename(char const*, unsigned char*)+0x177>
c0013060:	8d 44 24 0f          	lea    eax,[esp+0xf]
c0013064:	50                   	push   eax
c0013065:	6a 08                	push   0x8
c0013067:	55                   	push   ebp
c0013068:	53                   	push   ebx
c0013069:	e8 2e fd ff ff       	call   c0012d9c <CmGetShift(unsigned int*, int*, int, bool*)>
c001306e:	83 c4 10             	add    esp,0x10
c0013071:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0013076:	74 26                	je     c001309e <CmConvertToInternalFilename(char const*, unsigned char*)+0x18f>
c0013078:	8b 8c 24 84 00 00 00 	mov    ecx,DWORD PTR [esp+0x84]
c001307f:	4e                   	dec    esi
c0013080:	88 04 39             	mov    BYTE PTR [ecx+edi*1],al
c0013083:	47                   	inc    edi
c0013084:	eb 1c                	jmp    c00130a2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c0013086:	6a 06                	push   0x6
c0013088:	0f b6 44 34 1c       	movzx  eax,BYTE PTR [esp+esi*1+0x1c]
c001308d:	50                   	push   eax
c001308e:	55                   	push   ebp
c001308f:	53                   	push   ebx
c0013090:	e8 d7 fc ff ff       	call   c0012d6c <CmAddShift(unsigned int*, int*, unsigned char, int)>
c0013095:	83 c4 10             	add    esp,0x10
c0013098:	84 c0                	test   al,al
c001309a:	75 06                	jne    c00130a2 <CmConvertToInternalFilename(char const*, unsigned char*)+0x193>
c001309c:	eb c2                	jmp    c0013060 <CmConvertToInternalFilename(char const*, unsigned char*)+0x151>
c001309e:	31 c0                	xor    eax,eax
c00130a0:	eb 03                	jmp    c00130a5 <CmConvertToInternalFilename(char const*, unsigned char*)+0x196>
c00130a2:	46                   	inc    esi
c00130a3:	eb b2                	jmp    c0013057 <CmConvertToInternalFilename(char const*, unsigned char*)+0x148>
c00130a5:	83 c4 6c             	add    esp,0x6c
c00130a8:	5b                   	pop    ebx
c00130a9:	5e                   	pop    esi
c00130aa:	5f                   	pop    edi
c00130ab:	5d                   	pop    ebp
c00130ac:	c3                   	ret    

c00130ad <CmCreateString(Reghive_Tag*, int, char const*)>:
c00130ad:	53                   	push   ebx
c00130ae:	83 ec 3c             	sub    esp,0x3c
c00130b1:	6a 2b                	push   0x2b
c00130b3:	6a 00                	push   0x0
c00130b5:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c00130b9:	53                   	push   ebx
c00130ba:	e8 31 d4 fe ff       	call   c00004f0 <memset>
c00130bf:	58                   	pop    eax
c00130c0:	5a                   	pop    edx
c00130c1:	8d 44 24 11          	lea    eax,[esp+0x11]
c00130c5:	50                   	push   eax
c00130c6:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c00130ca:	e8 40 fe ff ff       	call   c0012f0f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00130cf:	c6 44 24 15 c1       	mov    BYTE PTR [esp+0x15],0xc1
c00130d4:	83 c4 0c             	add    esp,0xc
c00130d7:	6a 15                	push   0x15
c00130d9:	6a 00                	push   0x0
c00130db:	8d 44 24 27          	lea    eax,[esp+0x27]
c00130df:	50                   	push   eax
c00130e0:	e8 0b d4 fe ff       	call   c00004f0 <memset>
c00130e5:	53                   	push   ebx
c00130e6:	6a 00                	push   0x0
c00130e8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00130ec:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00130f0:	e8 e6 f9 ff ff       	call   c0012adb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00130f5:	83 c4 58             	add    esp,0x58
c00130f8:	5b                   	pop    ebx
c00130f9:	c3                   	ret    

c00130fa <CmFindInDirectory(Reghive_Tag*, int, char const*)>:
c00130fa:	56                   	push   esi
c00130fb:	53                   	push   ebx
c00130fc:	83 ec 48             	sub    esp,0x48
c00130ff:	6a 12                	push   0x12
c0013101:	68 ff 00 00 00       	push   0xff
c0013106:	8d 74 24 0f          	lea    esi,[esp+0xf]
c001310a:	56                   	push   esi
c001310b:	e8 e0 d3 fe ff       	call   c00004f0 <memset>
c0013110:	5a                   	pop    edx
c0013111:	59                   	pop    ecx
c0013112:	56                   	push   esi
c0013113:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c0013117:	e8 f3 fd ff ff       	call   c0012f0f <CmConvertToInternalFilename(char const*, unsigned char*)>
c001311c:	83 c4 10             	add    esp,0x10
c001311f:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0013123:	85 db                	test   ebx,ebx
c0013125:	74 42                	je     c0013169 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x6f>
c0013127:	50                   	push   eax
c0013128:	8d 44 24 19          	lea    eax,[esp+0x19]
c001312c:	50                   	push   eax
c001312d:	53                   	push   ebx
c001312e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0013132:	e8 fa f6 ff ff       	call   c0012831 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c0013137:	83 c4 0c             	add    esp,0xc
c001313a:	6a 12                	push   0x12
c001313c:	8d 44 24 21          	lea    eax,[esp+0x21]
c0013140:	50                   	push   eax
c0013141:	56                   	push   esi
c0013142:	e8 39 d2 fe ff       	call   c0000380 <memcmp>
c0013147:	83 c4 10             	add    esp,0x10
c001314a:	85 c0                	test   eax,eax
c001314c:	74 1e                	je     c001316c <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x72>
c001314e:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c0013153:	0f b6 5c 24 17       	movzx  ebx,BYTE PTR [esp+0x17]
c0013158:	c1 e3 08             	shl    ebx,0x8
c001315b:	09 d8                	or     eax,ebx
c001315d:	0f b6 5c 24 18       	movzx  ebx,BYTE PTR [esp+0x18]
c0013162:	c1 e3 10             	shl    ebx,0x10
c0013165:	09 c3                	or     ebx,eax
c0013167:	eb ba                	jmp    c0013123 <CmFindInDirectory(Reghive_Tag*, int, char const*)+0x29>
c0013169:	83 cb ff             	or     ebx,0xffffffff
c001316c:	89 d8                	mov    eax,ebx
c001316e:	83 c4 44             	add    esp,0x44
c0013171:	5b                   	pop    ebx
c0013172:	5e                   	pop    esi
c0013173:	c3                   	ret    

c0013174 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>:
c0013174:	57                   	push   edi
c0013175:	56                   	push   esi
c0013176:	53                   	push   ebx
c0013177:	83 ec 34             	sub    esp,0x34
c001317a:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001317e:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0013182:	6a 2b                	push   0x2b
c0013184:	6a 00                	push   0x0
c0013186:	8d 5c 24 11          	lea    ebx,[esp+0x11]
c001318a:	53                   	push   ebx
c001318b:	e8 60 d3 fe ff       	call   c00004f0 <memset>
c0013190:	58                   	pop    eax
c0013191:	5a                   	pop    edx
c0013192:	8d 44 24 11          	lea    eax,[esp+0x11]
c0013196:	50                   	push   eax
c0013197:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001319b:	e8 6f fd ff ff       	call   c0012f0f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00131a0:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c00131a4:	89 74 24 2b          	mov    DWORD PTR [esp+0x2b],esi
c00131a8:	89 7c 24 2f          	mov    DWORD PTR [esp+0x2f],edi
c00131ac:	88 44 24 15          	mov    BYTE PTR [esp+0x15],al
c00131b0:	53                   	push   ebx
c00131b1:	6a 00                	push   0x0
c00131b3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00131b7:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00131bb:	e8 1b f9 ff ff       	call   c0012adb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c00131c0:	83 c4 50             	add    esp,0x50
c00131c3:	5b                   	pop    ebx
c00131c4:	5e                   	pop    esi
c00131c5:	5f                   	pop    edi
c00131c6:	c3                   	ret    

c00131c7 <CmCreateDirectory(Reghive_Tag*, int, char const*)>:
c00131c7:	55                   	push   ebp
c00131c8:	57                   	push   edi
c00131c9:	56                   	push   esi
c00131ca:	53                   	push   ebx
c00131cb:	83 ec 40             	sub    esp,0x40
c00131ce:	8b 6c 24 58          	mov    ebp,DWORD PTR [esp+0x58]
c00131d2:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c00131d6:	6a 2b                	push   0x2b
c00131d8:	6a 00                	push   0x0
c00131da:	8d 74 24 11          	lea    esi,[esp+0x11]
c00131de:	56                   	push   esi
c00131df:	e8 0c d3 fe ff       	call   c00004f0 <memset>
c00131e4:	5f                   	pop    edi
c00131e5:	89 ef                	mov    edi,ebp
c00131e7:	58                   	pop    eax
c00131e8:	8d 44 24 11          	lea    eax,[esp+0x11]
c00131ec:	50                   	push   eax
c00131ed:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c00131f1:	e8 19 fd ff ff       	call   c0012f0f <CmConvertToInternalFilename(char const*, unsigned char*)>
c00131f6:	c6 44 24 15 4e       	mov    BYTE PTR [esp+0x15],0x4e
c00131fb:	c6 44 24 2b 00       	mov    BYTE PTR [esp+0x2b],0x0
c0013200:	c6 44 24 2c 00       	mov    BYTE PTR [esp+0x2c],0x0
c0013205:	c6 44 24 2d 00       	mov    BYTE PTR [esp+0x2d],0x0
c001320a:	83 c4 10             	add    esp,0x10
c001320d:	85 ed                	test   ebp,ebp
c001320f:	74 14                	je     c0013225 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013211:	51                   	push   ecx
c0013212:	51                   	push   ecx
c0013213:	57                   	push   edi
c0013214:	53                   	push   ebx
c0013215:	e8 09 f7 ff ff       	call   c0012923 <CmGetNext(Reghive_Tag*, int)>
c001321a:	83 c4 10             	add    esp,0x10
c001321d:	85 c0                	test   eax,eax
c001321f:	74 04                	je     c0013225 <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x5e>
c0013221:	89 c7                	mov    edi,eax
c0013223:	eb e8                	jmp    c001320d <CmCreateDirectory(Reghive_Tag*, int, char const*)+0x46>
c0013225:	56                   	push   esi
c0013226:	6a 00                	push   0x0
c0013228:	57                   	push   edi
c0013229:	53                   	push   ebx
c001322a:	e8 ac f8 ff ff       	call   c0012adb <CmCreateExtent(Reghive_Tag*, int, int, unsigned char*)>
c001322f:	83 c4 0c             	add    esp,0xc
c0013232:	89 c7                	mov    edi,eax
c0013234:	56                   	push   esi
c0013235:	50                   	push   eax
c0013236:	53                   	push   ebx
c0013237:	e8 f5 f5 ff ff       	call   c0012831 <CmReadExtent(Reghive_Tag*, int, unsigned char*)>
c001323c:	58                   	pop    eax
c001323d:	5a                   	pop    edx
c001323e:	6a 6c                	push   0x6c
c0013240:	6a 00                	push   0x0
c0013242:	6a 00                	push   0x0
c0013244:	68 1f 1f 02 c0       	push   0xc0021f1f
c0013249:	57                   	push   edi
c001324a:	53                   	push   ebx
c001324b:	e8 24 ff ff ff       	call   c0013174 <CmCreateInteger(Reghive_Tag*, int, char const*, unsigned long long, int)>
c0013250:	88 44 24 3b          	mov    BYTE PTR [esp+0x3b],al
c0013254:	88 64 24 3c          	mov    BYTE PTR [esp+0x3c],ah
c0013258:	c1 e8 10             	shr    eax,0x10
c001325b:	88 44 24 3d          	mov    BYTE PTR [esp+0x3d],al
c001325f:	83 c4 1c             	add    esp,0x1c
c0013262:	56                   	push   esi
c0013263:	57                   	push   edi
c0013264:	53                   	push   ebx
c0013265:	e8 eb f6 ff ff       	call   c0012955 <CmWriteExtent(Reghive_Tag*, int, unsigned char*)>
c001326a:	0f b6 54 24 2b       	movzx  edx,BYTE PTR [esp+0x2b]
c001326f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0013274:	c1 e0 08             	shl    eax,0x8
c0013277:	09 c2                	or     edx,eax
c0013279:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001327e:	83 c4 4c             	add    esp,0x4c
c0013281:	c1 e0 10             	shl    eax,0x10
c0013284:	5b                   	pop    ebx
c0013285:	09 d0                	or     eax,edx
c0013287:	5e                   	pop    esi
c0013288:	5f                   	pop    edi
c0013289:	5d                   	pop    ebp
c001328a:	c3                   	ret    

c001328b <zStrtok(char*, char const*)>:
c001328b:	55                   	push   ebp
c001328c:	57                   	push   edi
c001328d:	56                   	push   esi
c001328e:	53                   	push   ebx
c001328f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013293:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0013297:	85 db                	test   ebx,ebx
c0013299:	74 2f                	je     c00132ca <zStrtok(char*, char const*)+0x3f>
c001329b:	85 c0                	test   eax,eax
c001329d:	75 09                	jne    c00132a8 <zStrtok(char*, char const*)+0x1d>
c001329f:	a1 f0 8e 02 c0       	mov    eax,ds:0xc0028ef0
c00132a4:	85 c0                	test   eax,eax
c00132a6:	74 50                	je     c00132f8 <zStrtok(char*, char const*)+0x6d>
c00132a8:	31 c9                	xor    ecx,ecx
c00132aa:	80 3c 08 00          	cmp    BYTE PTR [eax+ecx*1],0x0
c00132ae:	74 03                	je     c00132b3 <zStrtok(char*, char const*)+0x28>
c00132b0:	41                   	inc    ecx
c00132b1:	eb f7                	jmp    c00132aa <zStrtok(char*, char const*)+0x1f>
c00132b3:	31 d2                	xor    edx,edx
c00132b5:	39 ca                	cmp    edx,ecx
c00132b7:	74 15                	je     c00132ce <zStrtok(char*, char const*)+0x43>
c00132b9:	0f be 34 10          	movsx  esi,BYTE PTR [eax+edx*1]
c00132bd:	0f be 2b             	movsx  ebp,BYTE PTR [ebx]
c00132c0:	8d 3c 10             	lea    edi,[eax+edx*1]
c00132c3:	39 ee                	cmp    esi,ebp
c00132c5:	74 13                	je     c00132da <zStrtok(char*, char const*)+0x4f>
c00132c7:	42                   	inc    edx
c00132c8:	eb eb                	jmp    c00132b5 <zStrtok(char*, char const*)+0x2a>
c00132ca:	31 c0                	xor    eax,eax
c00132cc:	eb 2a                	jmp    c00132f8 <zStrtok(char*, char const*)+0x6d>
c00132ce:	c7 05 f0 8e 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0028ef0,0x0
c00132d8:	eb 1e                	jmp    c00132f8 <zStrtok(char*, char const*)+0x6d>
c00132da:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c00132dd:	39 ce                	cmp    esi,ecx
c00132df:	75 0a                	jne    c00132eb <zStrtok(char*, char const*)+0x60>
c00132e1:	40                   	inc    eax
c00132e2:	a3 f0 8e 02 c0       	mov    ds:0xc0028ef0,eax
c00132e7:	89 d8                	mov    eax,ebx
c00132e9:	eb 0d                	jmp    c00132f8 <zStrtok(char*, char const*)+0x6d>
c00132eb:	8d 54 10 01          	lea    edx,[eax+edx*1+0x1]
c00132ef:	c6 07 00             	mov    BYTE PTR [edi],0x0
c00132f2:	89 15 f0 8e 02 c0    	mov    DWORD PTR ds:0xc0028ef0,edx
c00132f8:	5b                   	pop    ebx
c00132f9:	5e                   	pop    esi
c00132fa:	5f                   	pop    edi
c00132fb:	5d                   	pop    ebp
c00132fc:	c3                   	ret    

c00132fd <CmFindObjectFromPath(Reghive_Tag*, char const*)>:
c00132fd:	57                   	push   edi
c00132fe:	56                   	push   esi
c00132ff:	53                   	push   ebx
c0013300:	81 ec 08 01 00 00    	sub    esp,0x108
c0013306:	8b bc 24 18 01 00 00 	mov    edi,DWORD PTR [esp+0x118]
c001330d:	ff b4 24 1c 01 00 00 	push   DWORD PTR [esp+0x11c]
c0013314:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c0013318:	53                   	push   ebx
c0013319:	e8 22 d3 fe ff       	call   c0000640 <strcpy>
c001331e:	59                   	pop    ecx
c001331f:	5e                   	pop    esi
c0013320:	68 83 22 02 c0       	push   0xc0022283
c0013325:	53                   	push   ebx
c0013326:	bb 01 00 00 00       	mov    ebx,0x1
c001332b:	e8 5b ff ff ff       	call   c001328b <zStrtok(char*, char const*)>
c0013330:	83 c4 10             	add    esp,0x10
c0013333:	85 c0                	test   eax,eax
c0013335:	74 3b                	je     c0013372 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c0013337:	52                   	push   edx
c0013338:	50                   	push   eax
c0013339:	6a 01                	push   0x1
c001333b:	57                   	push   edi
c001333c:	e8 b9 fd ff ff       	call   c00130fa <CmFindInDirectory(Reghive_Tag*, int, char const*)>
c0013341:	59                   	pop    ecx
c0013342:	89 c3                	mov    ebx,eax
c0013344:	5e                   	pop    esi
c0013345:	68 83 22 02 c0       	push   0xc0022283
c001334a:	6a 00                	push   0x0
c001334c:	e8 3a ff ff ff       	call   c001328b <zStrtok(char*, char const*)>
c0013351:	83 c4 10             	add    esp,0x10
c0013354:	89 c6                	mov    esi,eax
c0013356:	85 c0                	test   eax,eax
c0013358:	74 18                	je     c0013372 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001335a:	52                   	push   edx
c001335b:	52                   	push   edx
c001335c:	53                   	push   ebx
c001335d:	57                   	push   edi
c001335e:	e8 81 f5 ff ff       	call   c00128e4 <CmEnterDirectory(Reghive_Tag*, int)>
c0013363:	83 c4 10             	add    esp,0x10
c0013366:	89 c3                	mov    ebx,eax
c0013368:	83 f8 ff             	cmp    eax,0xffffffff
c001336b:	74 05                	je     c0013372 <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x75>
c001336d:	50                   	push   eax
c001336e:	56                   	push   esi
c001336f:	53                   	push   ebx
c0013370:	eb c9                	jmp    c001333b <CmFindObjectFromPath(Reghive_Tag*, char const*)+0x3e>
c0013372:	81 c4 00 01 00 00    	add    esp,0x100
c0013378:	89 d8                	mov    eax,ebx
c001337a:	5b                   	pop    ebx
c001337b:	5e                   	pop    esi
c001337c:	5f                   	pop    edi
c001337d:	c3                   	ret    

c001337e <CmDisplayTree(Reghive_Tag*, int, int)>:
c001337e:	55                   	push   ebp
c001337f:	57                   	push   edi
c0013380:	56                   	push   esi
c0013381:	53                   	push   ebx
c0013382:	83 ec 5c             	sub    esp,0x5c
c0013385:	8b 74 24 70          	mov    esi,DWORD PTR [esp+0x70]
c0013389:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c001338d:	85 db                	test   ebx,ebx
c001338f:	0f 8e 84 00 00 00    	jle    c0013419 <CmDisplayTree(Reghive_Tag*, int, int)+0x9b>
c0013395:	31 ed                	xor    ebp,ebp
c0013397:	57                   	push   edi
c0013398:	6a 32                	push   0x32
c001339a:	6a 00                	push   0x0
c001339c:	8d 7c 24 2a          	lea    edi,[esp+0x2a]
c00133a0:	57                   	push   edi
c00133a1:	e8 4a d1 fe ff       	call   c00004f0 <memset>
c00133a6:	83 c4 0c             	add    esp,0xc
c00133a9:	57                   	push   edi
c00133aa:	53                   	push   ebx
c00133ab:	56                   	push   esi
c00133ac:	e8 30 fb ff ff       	call   c0012ee1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c00133b1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00133b5:	83 c4 10             	add    esp,0x10
c00133b8:	3b 6c 24 78          	cmp    ebp,DWORD PTR [esp+0x78]
c00133bc:	7d 13                	jge    c00133d1 <CmDisplayTree(Reghive_Tag*, int, int)+0x53>
c00133be:	83 ec 0c             	sub    esp,0xc
c00133c1:	45                   	inc    ebp
c00133c2:	68 27 26 02 c0       	push   0xc0022627
c00133c7:	e8 79 75 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00133cc:	83 c4 10             	add    esp,0x10
c00133cf:	eb e7                	jmp    c00133b8 <CmDisplayTree(Reghive_Tag*, int, int)+0x3a>
c00133d1:	51                   	push   ecx
c00133d2:	57                   	push   edi
c00133d3:	53                   	push   ebx
c00133d4:	68 25 1f 02 c0       	push   0xc0021f25
c00133d9:	e8 67 75 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00133de:	83 c4 10             	add    esp,0x10
c00133e1:	83 7c 24 0c 4e       	cmp    DWORD PTR [esp+0xc],0x4e
c00133e6:	75 1e                	jne    c0013406 <CmDisplayTree(Reghive_Tag*, int, int)+0x88>
c00133e8:	52                   	push   edx
c00133e9:	52                   	push   edx
c00133ea:	53                   	push   ebx
c00133eb:	56                   	push   esi
c00133ec:	e8 f3 f4 ff ff       	call   c00128e4 <CmEnterDirectory(Reghive_Tag*, int)>
c00133f1:	83 c4 0c             	add    esp,0xc
c00133f4:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c00133f8:	8d 51 04             	lea    edx,[ecx+0x4]
c00133fb:	52                   	push   edx
c00133fc:	50                   	push   eax
c00133fd:	56                   	push   esi
c00133fe:	e8 7b ff ff ff       	call   c001337e <CmDisplayTree(Reghive_Tag*, int, int)>
c0013403:	83 c4 10             	add    esp,0x10
c0013406:	50                   	push   eax
c0013407:	50                   	push   eax
c0013408:	53                   	push   ebx
c0013409:	56                   	push   esi
c001340a:	e8 14 f5 ff ff       	call   c0012923 <CmGetNext(Reghive_Tag*, int)>
c001340f:	83 c4 10             	add    esp,0x10
c0013412:	89 c3                	mov    ebx,eax
c0013414:	e9 74 ff ff ff       	jmp    c001338d <CmDisplayTree(Reghive_Tag*, int, int)+0xf>
c0013419:	83 c4 5c             	add    esp,0x5c
c001341c:	5b                   	pop    ebx
c001341d:	5e                   	pop    esi
c001341e:	5f                   	pop    edi
c001341f:	5d                   	pop    ebp
c0013420:	c3                   	ret    

c0013421 <CmSplitFinalSlashInPlace(char*)>:
c0013421:	53                   	push   ebx
c0013422:	83 ec 14             	sub    esp,0x14
c0013425:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0013429:	53                   	push   ebx
c001342a:	e8 41 d1 fe ff       	call   c0000570 <strlen>
c001342f:	83 c4 10             	add    esp,0x10
c0013432:	48                   	dec    eax
c0013433:	85 c0                	test   eax,eax
c0013435:	74 15                	je     c001344c <CmSplitFinalSlashInPlace(char*)+0x2b>
c0013437:	8d 14 03             	lea    edx,[ebx+eax*1]
c001343a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001343e:	75 09                	jne    c0013449 <CmSplitFinalSlashInPlace(char*)+0x28>
c0013440:	c6 02 00             	mov    BYTE PTR [edx],0x0
c0013443:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c0013447:	eb 05                	jmp    c001344e <CmSplitFinalSlashInPlace(char*)+0x2d>
c0013449:	48                   	dec    eax
c001344a:	eb e7                	jmp    c0013433 <CmSplitFinalSlashInPlace(char*)+0x12>
c001344c:	31 c0                	xor    eax,eax
c001344e:	83 c4 08             	add    esp,0x8
c0013451:	5b                   	pop    ebx
c0013452:	c3                   	ret    

c0013453 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c0013453:	55                   	push   ebp
c0013454:	57                   	push   edi
c0013455:	56                   	push   esi
c0013456:	53                   	push   ebx
c0013457:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001345d:	8b 9c 24 44 01 00 00 	mov    ebx,DWORD PTR [esp+0x144]
c0013464:	8a 13                	mov    dl,BYTE PTR [ebx]
c0013466:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0013469:	80 fa 40             	cmp    dl,0x40
c001346c:	75 1c                	jne    c001348a <Reg::findLineFromLoadedData(char*, char*, char*)+0x37>
c001346e:	0f be 0b             	movsx  ecx,BYTE PTR [ebx]
c0013471:	85 c9                	test   ecx,ecx
c0013473:	0f 84 09 01 00 00    	je     c0013582 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013479:	8d 43 01             	lea    eax,[ebx+0x1]
c001347c:	83 f9 3a             	cmp    ecx,0x3a
c001347f:	74 04                	je     c0013485 <Reg::findLineFromLoadedData(char*, char*, char*)+0x32>
c0013481:	89 c3                	mov    ebx,eax
c0013483:	eb e9                	jmp    c001346e <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c0013485:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013488:	89 c3                	mov    ebx,eax
c001348a:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c001348e:	50                   	push   eax
c001348f:	6a 40                	push   0x40
c0013491:	6a 00                	push   0x0
c0013493:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013497:	50                   	push   eax
c0013498:	e8 53 d0 fe ff       	call   c00004f0 <memset>
c001349d:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c00134a4:	31 c0                	xor    eax,eax
c00134a6:	83 c4 10             	add    esp,0x10
c00134a9:	0f be 74 24 0c       	movsx  esi,BYTE PTR [esp+0xc]
c00134ae:	0f be 17             	movsx  edx,BYTE PTR [edi]
c00134b1:	89 d1                	mov    ecx,edx
c00134b3:	85 d2                	test   edx,edx
c00134b5:	0f 84 c7 00 00 00    	je     c0013582 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00134bb:	3d c7 00 00 00       	cmp    eax,0xc7
c00134c0:	0f 8f bc 00 00 00    	jg     c0013582 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c00134c6:	83 fa 0a             	cmp    edx,0xa
c00134c9:	0f 85 a4 00 00 00    	jne    c0013573 <Reg::findLineFromLoadedData(char*, char*, char*)+0x120>
c00134cf:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c00134d4:	0f be 4c 24 58       	movsx  ecx,BYTE PTR [esp+0x58]
c00134d9:	89 c8                	mov    eax,ecx
c00134db:	a8 df                	test   al,0xdf
c00134dd:	0f 94 c2             	sete   dl
c00134e0:	83 f9 23             	cmp    ecx,0x23
c00134e3:	0f 94 44 24 0c       	sete   BYTE PTR [esp+0xc]
c00134e8:	0b 54 24 0c          	or     edx,DWORD PTR [esp+0xc]
c00134ec:	80 e2 01             	and    dl,0x1
c00134ef:	75 4a                	jne    c001353b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00134f1:	83 e8 09             	sub    eax,0x9
c00134f4:	3c 01                	cmp    al,0x1
c00134f6:	76 43                	jbe    c001353b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00134f8:	83 f9 5b             	cmp    ecx,0x5b
c00134fb:	75 42                	jne    c001353f <Reg::findLineFromLoadedData(char*, char*, char*)+0xec>
c00134fd:	83 fe 40             	cmp    esi,0x40
c0013500:	75 39                	jne    c001353b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c0013502:	83 ec 0c             	sub    esp,0xc
c0013505:	8d 54 24 65          	lea    edx,[esp+0x65]
c0013509:	52                   	push   edx
c001350a:	e8 61 d0 fe ff       	call   c0000570 <strlen>
c001350f:	83 c4 10             	add    esp,0x10
c0013512:	83 f8 3f             	cmp    eax,0x3f
c0013515:	77 6b                	ja     c0013582 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013517:	50                   	push   eax
c0013518:	50                   	push   eax
c0013519:	8d 54 24 61          	lea    edx,[esp+0x61]
c001351d:	52                   	push   edx
c001351e:	8d 54 24 24          	lea    edx,[esp+0x24]
c0013522:	52                   	push   edx
c0013523:	e8 18 d1 fe ff       	call   c0000640 <strcpy>
c0013528:	58                   	pop    eax
c0013529:	8d 54 24 24          	lea    edx,[esp+0x24]
c001352d:	52                   	push   edx
c001352e:	e8 3d d0 fe ff       	call   c0000570 <strlen>
c0013533:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c0013538:	83 c4 10             	add    esp,0x10
c001353b:	31 d2                	xor    edx,edx
c001353d:	eb 3b                	jmp    c001357a <Reg::findLineFromLoadedData(char*, char*, char*)+0x127>
c001353f:	83 fe 40             	cmp    esi,0x40
c0013542:	74 06                	je     c001354a <Reg::findLineFromLoadedData(char*, char*, char*)+0xf7>
c0013544:	8d 44 24 58          	lea    eax,[esp+0x58]
c0013548:	eb 20                	jmp    c001356a <Reg::findLineFromLoadedData(char*, char*, char*)+0x117>
c001354a:	50                   	push   eax
c001354b:	50                   	push   eax
c001354c:	55                   	push   ebp
c001354d:	8d 44 24 24          	lea    eax,[esp+0x24]
c0013551:	50                   	push   eax
c0013552:	e8 f9 d1 fe ff       	call   c0000750 <strcmp>
c0013557:	83 c4 10             	add    esp,0x10
c001355a:	85 c0                	test   eax,eax
c001355c:	75 dd                	jne    c001353b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c001355e:	eb e4                	jmp    c0013544 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf1>
c0013560:	8d 50 01             	lea    edx,[eax+0x1]
c0013563:	83 f9 3d             	cmp    ecx,0x3d
c0013566:	74 1e                	je     c0013586 <Reg::findLineFromLoadedData(char*, char*, char*)+0x133>
c0013568:	89 d0                	mov    eax,edx
c001356a:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c001356d:	85 c9                	test   ecx,ecx
c001356f:	75 ef                	jne    c0013560 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10d>
c0013571:	eb 0f                	jmp    c0013582 <Reg::findLineFromLoadedData(char*, char*, char*)+0x12f>
c0013573:	8d 50 01             	lea    edx,[eax+0x1]
c0013576:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001357a:	47                   	inc    edi
c001357b:	89 d0                	mov    eax,edx
c001357d:	e9 2c ff ff ff       	jmp    c00134ae <Reg::findLineFromLoadedData(char*, char*, char*)+0x5b>
c0013582:	31 c0                	xor    eax,eax
c0013584:	eb 33                	jmp    c00135b9 <Reg::findLineFromLoadedData(char*, char*, char*)+0x166>
c0013586:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001358a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001358d:	50                   	push   eax
c001358e:	50                   	push   eax
c001358f:	8d 44 24 60          	lea    eax,[esp+0x60]
c0013593:	50                   	push   eax
c0013594:	53                   	push   ebx
c0013595:	e8 b6 d1 fe ff       	call   c0000750 <strcmp>
c001359a:	83 c4 10             	add    esp,0x10
c001359d:	85 c0                	test   eax,eax
c001359f:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00135a3:	75 96                	jne    c001353b <Reg::findLineFromLoadedData(char*, char*, char*)+0xe8>
c00135a5:	51                   	push   ecx
c00135a6:	51                   	push   ecx
c00135a7:	52                   	push   edx
c00135a8:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c00135af:	e8 8c d0 fe ff       	call   c0000640 <strcpy>
c00135b4:	83 c4 10             	add    esp,0x10
c00135b7:	b0 01                	mov    al,0x1
c00135b9:	81 c4 2c 01 00 00    	add    esp,0x12c
c00135bf:	5b                   	pop    ebx
c00135c0:	5e                   	pop    esi
c00135c1:	5f                   	pop    edi
c00135c2:	5d                   	pop    ebp
c00135c3:	c3                   	ret    

c00135c4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c00135c4:	57                   	push   edi
c00135c5:	56                   	push   esi
c00135c6:	53                   	push   ebx
c00135c7:	81 ec 2c 01 00 00    	sub    esp,0x12c
c00135cd:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c00135d4:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00135db:	53                   	push   ebx
c00135dc:	e8 8f cf fe ff       	call   c0000570 <strlen>
c00135e1:	89 34 24             	mov    DWORD PTR [esp],esi
c00135e4:	89 c7                	mov    edi,eax
c00135e6:	e8 85 cf fe ff       	call   c0000570 <strlen>
c00135eb:	83 c4 10             	add    esp,0x10
c00135ee:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c00135f2:	3d ff 00 00 00       	cmp    eax,0xff
c00135f7:	0f 87 d3 00 00 00    	ja     c00136d0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c00135fd:	57                   	push   edi
c00135fe:	57                   	push   edi
c00135ff:	56                   	push   esi
c0013600:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c0013604:	56                   	push   esi
c0013605:	e8 36 d0 fe ff       	call   c0000640 <strcpy>
c001360a:	58                   	pop    eax
c001360b:	5a                   	pop    edx
c001360c:	68 83 22 02 c0       	push   0xc0022283
c0013611:	56                   	push   esi
c0013612:	e8 29 d2 fe ff       	call   c0000840 <strcat>
c0013617:	59                   	pop    ecx
c0013618:	5f                   	pop    edi
c0013619:	53                   	push   ebx
c001361a:	56                   	push   esi
c001361b:	e8 20 d2 fe ff       	call   c0000840 <strcat>
c0013620:	58                   	pop    eax
c0013621:	5a                   	pop    edx
c0013622:	68 2f 1f 02 c0       	push   0xc0021f2f
c0013627:	56                   	push   esi
c0013628:	e8 13 d2 fe ff       	call   c0000840 <strcat>
c001362d:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0013634:	e8 7d 44 ff ff       	call   c0007ab6 <malloc>
c0013639:	83 c4 0c             	add    esp,0xc
c001363c:	89 c3                	mov    ebx,eax
c001363e:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0013644:	56                   	push   esi
c0013645:	50                   	push   eax
c0013646:	e8 f7 80 ff ff       	call   c000b742 <File::File(char const*, Process*)>
c001364b:	83 c4 10             	add    esp,0x10
c001364e:	85 db                	test   ebx,ebx
c0013650:	74 7e                	je     c00136d0 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c0013652:	51                   	push   ecx
c0013653:	51                   	push   ecx
c0013654:	6a 01                	push   0x1
c0013656:	53                   	push   ebx
c0013657:	e8 a2 81 ff ff       	call   c000b7fe <File::open(FileOpenMode)>
c001365c:	83 c4 10             	add    esp,0x10
c001365f:	85 c0                	test   eax,eax
c0013661:	74 08                	je     c001366b <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c0013663:	83 ec 0c             	sub    esp,0xc
c0013666:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013668:	53                   	push   ebx
c0013669:	eb 5f                	jmp    c00136ca <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001366b:	52                   	push   edx
c001366c:	8d 44 24 17          	lea    eax,[esp+0x17]
c0013670:	50                   	push   eax
c0013671:	8d 44 24 20          	lea    eax,[esp+0x20]
c0013675:	50                   	push   eax
c0013676:	53                   	push   ebx
c0013677:	e8 84 84 ff ff       	call   c000bb00 <File::stat(unsigned long long*, bool*)>
c001367c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0013680:	83 c4 10             	add    esp,0x10
c0013683:	89 c1                	mov    ecx,eax
c0013685:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c0013689:	74 31                	je     c00136bc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001368b:	83 ec 0c             	sub    esp,0xc
c001368e:	50                   	push   eax
c001368f:	e8 22 44 ff ff       	call   c0007ab6 <malloc>
c0013694:	89 c6                	mov    esi,eax
c0013696:	58                   	pop    eax
c0013697:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013699:	8d 54 24 20          	lea    edx,[esp+0x20]
c001369d:	52                   	push   edx
c001369e:	56                   	push   esi
c001369f:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00136a3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00136a7:	53                   	push   ebx
c00136a8:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00136ab:	83 c4 20             	add    esp,0x20
c00136ae:	85 c0                	test   eax,eax
c00136b0:	75 0a                	jne    c00136bc <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c00136b2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00136b6:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c00136ba:	74 18                	je     c00136d4 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c00136bc:	83 ec 0c             	sub    esp,0xc
c00136bf:	53                   	push   ebx
c00136c0:	e8 97 81 ff ff       	call   c000b85c <File::close()>
c00136c5:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136c7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136ca:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00136cd:	83 c4 10             	add    esp,0x10
c00136d0:	31 c0                	xor    eax,eax
c00136d2:	eb 3b                	jmp    c001370f <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c00136d4:	83 ec 0c             	sub    esp,0xc
c00136d7:	53                   	push   ebx
c00136d8:	e8 7f 81 ff ff       	call   c000b85c <File::close()>
c00136dd:	8b 03                	mov    eax,DWORD PTR [ebx]
c00136df:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00136e2:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00136e5:	83 c4 0c             	add    esp,0xc
c00136e8:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00136ef:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c00136f6:	56                   	push   esi
c00136f7:	e8 57 fd ff ff       	call   c0013453 <Reg::findLineFromLoadedData(char*, char*, char*)>
c00136fc:	89 34 24             	mov    DWORD PTR [esp],esi
c00136ff:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0013703:	e8 be 43 ff ff       	call   c0007ac6 <free>
c0013708:	83 c4 10             	add    esp,0x10
c001370b:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001370f:	81 c4 20 01 00 00    	add    esp,0x120
c0013715:	5b                   	pop    ebx
c0013716:	5e                   	pop    esi
c0013717:	5f                   	pop    edi
c0013718:	c3                   	ret    

c0013719 <Reg::getLine(char*, char*, char*)>:
c0013719:	57                   	push   edi
c001371a:	56                   	push   esi
c001371b:	53                   	push   ebx
c001371c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013720:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013724:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013728:	57                   	push   edi
c0013729:	56                   	push   esi
c001372a:	53                   	push   ebx
c001372b:	68 34 1f 02 c0       	push   0xc0021f34
c0013730:	e8 8f fe ff ff       	call   c00135c4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013735:	83 c4 10             	add    esp,0x10
c0013738:	84 c0                	test   al,al
c001373a:	75 10                	jne    c001374c <Reg::getLine(char*, char*, char*)+0x33>
c001373c:	57                   	push   edi
c001373d:	56                   	push   esi
c001373e:	53                   	push   ebx
c001373f:	68 59 1f 02 c0       	push   0xc0021f59
c0013744:	e8 7b fe ff ff       	call   c00135c4 <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c0013749:	83 c4 10             	add    esp,0x10
c001374c:	5b                   	pop    ebx
c001374d:	5e                   	pop    esi
c001374e:	5f                   	pop    edi
c001374f:	c3                   	ret    

c0013750 <Reg::readInt(char*, char*, int*)>:
c0013750:	55                   	push   ebp
c0013751:	57                   	push   edi
c0013752:	56                   	push   esi
c0013753:	53                   	push   ebx
c0013754:	81 ec f0 00 00 00    	sub    esp,0xf0
c001375a:	8d 6c 24 1c          	lea    ebp,[esp+0x1c]
c001375e:	55                   	push   ebp
c001375f:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c0013766:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001376d:	e8 a7 ff ff ff       	call   c0013719 <Reg::getLine(char*, char*, char*)>
c0013772:	83 c4 10             	add    esp,0x10
c0013775:	84 c0                	test   al,al
c0013777:	0f 84 b6 00 00 00    	je     c0013833 <Reg::readInt(char*, char*, int*)+0xe3>
c001377d:	0f be 54 24 18       	movsx  edx,BYTE PTR [esp+0x18]
c0013782:	83 fa 2b             	cmp    edx,0x2b
c0013785:	74 0c                	je     c0013793 <Reg::readInt(char*, char*, int*)+0x43>
c0013787:	83 fa 2d             	cmp    edx,0x2d
c001378a:	75 0e                	jne    c001379a <Reg::readInt(char*, char*, int*)+0x4a>
c001378c:	ba 01 00 00 00       	mov    edx,0x1
c0013791:	eb 0b                	jmp    c001379e <Reg::readInt(char*, char*, int*)+0x4e>
c0013793:	ba 01 00 00 00       	mov    edx,0x1
c0013798:	eb 02                	jmp    c001379c <Reg::readInt(char*, char*, int*)+0x4c>
c001379a:	31 d2                	xor    edx,edx
c001379c:	31 c0                	xor    eax,eax
c001379e:	be 0a 00 00 00       	mov    esi,0xa
c00137a3:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c00137a8:	75 21                	jne    c00137cb <Reg::readInt(char*, char*, int*)+0x7b>
c00137aa:	0f be 4c 14 19       	movsx  ecx,BYTE PTR [esp+edx*1+0x19]
c00137af:	83 f9 78             	cmp    ecx,0x78
c00137b2:	75 0a                	jne    c00137be <Reg::readInt(char*, char*, int*)+0x6e>
c00137b4:	83 c2 02             	add    edx,0x2
c00137b7:	be 10 00 00 00       	mov    esi,0x10
c00137bc:	eb 0d                	jmp    c00137cb <Reg::readInt(char*, char*, int*)+0x7b>
c00137be:	83 f9 62             	cmp    ecx,0x62
c00137c1:	75 08                	jne    c00137cb <Reg::readInt(char*, char*, int*)+0x7b>
c00137c3:	83 c2 02             	add    edx,0x2
c00137c6:	be 02 00 00 00       	mov    esi,0x2
c00137cb:	01 d5                	add    ebp,edx
c00137cd:	31 d2                	xor    edx,edx
c00137cf:	0f be 4d 00          	movsx  ecx,BYTE PTR [ebp+0x0]
c00137d3:	83 f9 0d             	cmp    ecx,0xd
c00137d6:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c00137da:	0f 94 c3             	sete   bl
c00137dd:	85 c9                	test   ecx,ecx
c00137df:	89 df                	mov    edi,ebx
c00137e1:	0f 94 c3             	sete   bl
c00137e4:	09 df                	or     edi,ebx
c00137e6:	89 fb                	mov    ebx,edi
c00137e8:	83 e7 01             	and    edi,0x1
c00137eb:	75 35                	jne    c0013822 <Reg::readInt(char*, char*, int*)+0xd2>
c00137ed:	0f af d6             	imul   edx,esi
c00137f0:	83 fe 10             	cmp    esi,0x10
c00137f3:	75 26                	jne    c001381b <Reg::readInt(char*, char*, int*)+0xcb>
c00137f5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00137f9:	83 ef 41             	sub    edi,0x41
c00137fc:	89 fb                	mov    ebx,edi
c00137fe:	80 fb 05             	cmp    bl,0x5
c0013801:	77 06                	ja     c0013809 <Reg::readInt(char*, char*, int*)+0xb9>
c0013803:	8d 54 0a c9          	lea    edx,[edx+ecx*1-0x37]
c0013807:	eb 16                	jmp    c001381f <Reg::readInt(char*, char*, int*)+0xcf>
c0013809:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001380d:	83 eb 61             	sub    ebx,0x61
c0013810:	80 fb 05             	cmp    bl,0x5
c0013813:	77 06                	ja     c001381b <Reg::readInt(char*, char*, int*)+0xcb>
c0013815:	8d 54 0a a9          	lea    edx,[edx+ecx*1-0x57]
c0013819:	eb 04                	jmp    c001381f <Reg::readInt(char*, char*, int*)+0xcf>
c001381b:	8d 54 0a d0          	lea    edx,[edx+ecx*1-0x30]
c001381f:	45                   	inc    ebp
c0013820:	eb ad                	jmp    c00137cf <Reg::readInt(char*, char*, int*)+0x7f>
c0013822:	84 c0                	test   al,al
c0013824:	74 02                	je     c0013828 <Reg::readInt(char*, char*, int*)+0xd8>
c0013826:	f7 da                	neg    edx
c0013828:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001382f:	89 10                	mov    DWORD PTR [eax],edx
c0013831:	88 d8                	mov    al,bl
c0013833:	81 c4 ec 00 00 00    	add    esp,0xec
c0013839:	5b                   	pop    ebx
c001383a:	5e                   	pop    esi
c001383b:	5f                   	pop    edi
c001383c:	5d                   	pop    ebp
c001383d:	c3                   	ret    

c001383e <Reg::readString(char*, char*, char*, int)>:
c001383e:	57                   	push   edi
c001383f:	56                   	push   esi
c0013840:	53                   	push   ebx
c0013841:	81 ec d4 00 00 00    	sub    esp,0xd4
c0013847:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001384e:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c0013852:	57                   	push   edi
c0013853:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001385a:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c0013861:	e8 b3 fe ff ff       	call   c0013719 <Reg::getLine(char*, char*, char*)>
c0013866:	83 c4 10             	add    esp,0x10
c0013869:	89 c6                	mov    esi,eax
c001386b:	84 c0                	test   al,al
c001386d:	74 44                	je     c00138b3 <Reg::readString(char*, char*, char*, int)+0x75>
c001386f:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c0013876:	31 c0                	xor    eax,eax
c0013878:	4a                   	dec    edx
c0013879:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001387c:	84 c9                	test   cl,cl
c001387e:	74 0f                	je     c001388f <Reg::readString(char*, char*, char*, int)+0x51>
c0013880:	39 c2                	cmp    edx,eax
c0013882:	7e 0b                	jle    c001388f <Reg::readString(char*, char*, char*, int)+0x51>
c0013884:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c0013887:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001388c:	40                   	inc    eax
c001388d:	eb ea                	jmp    c0013879 <Reg::readString(char*, char*, char*, int)+0x3b>
c001388f:	83 ec 0c             	sub    esp,0xc
c0013892:	53                   	push   ebx
c0013893:	e8 d8 cc fe ff       	call   c0000570 <strlen>
c0013898:	83 c4 10             	add    esp,0x10
c001389b:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c00138a0:	75 11                	jne    c00138b3 <Reg::readString(char*, char*, char*, int)+0x75>
c00138a2:	83 ec 0c             	sub    esp,0xc
c00138a5:	53                   	push   ebx
c00138a6:	e8 c5 cc fe ff       	call   c0000570 <strlen>
c00138ab:	83 c4 10             	add    esp,0x10
c00138ae:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c00138b3:	81 c4 d0 00 00 00    	add    esp,0xd0
c00138b9:	89 f0                	mov    eax,esi
c00138bb:	5b                   	pop    ebx
c00138bc:	5e                   	pop    esi
c00138bd:	5f                   	pop    edi
c00138be:	c3                   	ret    

c00138bf <Reg::readBool(char*, char*, bool*)>:
c00138bf:	83 ec 20             	sub    esp,0x20
c00138c2:	8d 44 24 10          	lea    eax,[esp+0x10]
c00138c6:	50                   	push   eax
c00138c7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138cb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138cf:	e8 7c fe ff ff       	call   c0013750 <Reg::readInt(char*, char*, int*)>
c00138d4:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c00138d9:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00138dd:	0f 95 02             	setne  BYTE PTR [edx]
c00138e0:	83 c4 2c             	add    esp,0x2c
c00138e3:	c3                   	ret    

c00138e4 <Reg::readBoolWithDefault(char*, char*, bool)>:
c00138e4:	53                   	push   ebx
c00138e5:	83 ec 1c             	sub    esp,0x1c
c00138e8:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c00138ec:	8d 44 24 13          	lea    eax,[esp+0x13]
c00138f0:	50                   	push   eax
c00138f1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138f5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00138f9:	e8 c1 ff ff ff       	call   c00138bf <Reg::readBool(char*, char*, bool*)>
c00138fe:	83 c4 10             	add    esp,0x10
c0013901:	84 c0                	test   al,al
c0013903:	74 04                	je     c0013909 <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c0013905:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c0013909:	88 d8                	mov    al,bl
c001390b:	83 c4 18             	add    esp,0x18
c001390e:	5b                   	pop    ebx
c001390f:	c3                   	ret    

c0013910 <Reg::readIntWithDefault(char*, char*, int)>:
c0013910:	53                   	push   ebx
c0013911:	83 ec 1c             	sub    esp,0x1c
c0013914:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013918:	8d 44 24 10          	lea    eax,[esp+0x10]
c001391c:	50                   	push   eax
c001391d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013921:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0013925:	e8 26 fe ff ff       	call   c0013750 <Reg::readInt(char*, char*, int*)>
c001392a:	83 c4 10             	add    esp,0x10
c001392d:	84 c0                	test   al,al
c001392f:	74 04                	je     c0013935 <Reg::readIntWithDefault(char*, char*, int)+0x25>
c0013931:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0013935:	89 d8                	mov    eax,ebx
c0013937:	83 c4 18             	add    esp,0x18
c001393a:	5b                   	pop    ebx
c001393b:	c3                   	ret    

c001393c <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001393c:	57                   	push   edi
c001393d:	56                   	push   esi
c001393e:	56                   	push   esi
c001393f:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013943:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0013947:	56                   	push   esi
c0013948:	57                   	push   edi
c0013949:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001394d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013951:	e8 e8 fe ff ff       	call   c001383e <Reg::readString(char*, char*, char*, int)>
c0013956:	83 c4 10             	add    esp,0x10
c0013959:	84 c0                	test   al,al
c001395b:	75 1a                	jne    c0013977 <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x3b>
c001395d:	51                   	push   ecx
c001395e:	56                   	push   esi
c001395f:	6a 00                	push   0x0
c0013961:	57                   	push   edi
c0013962:	e8 89 cb fe ff       	call   c00004f0 <memset>
c0013967:	8d 4e ff             	lea    ecx,[esi-0x1]
c001396a:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001396e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013970:	83 c4 10             	add    esp,0x10
c0013973:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0013977:	89 f8                	mov    eax,edi
c0013979:	5a                   	pop    edx
c001397a:	5e                   	pop    esi
c001397b:	5f                   	pop    edi
c001397c:	c3                   	ret    

c001397d <SysEject(regs*)>:
c001397d:	83 ec 0c             	sub    esp,0xc
c0013980:	83 ca ff             	or     edx,0xffffffff
c0013983:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013987:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001398a:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001398f:	83 e9 41             	sub    ecx,0x41
c0013992:	83 f9 19             	cmp    ecx,0x19
c0013995:	77 18                	ja     c00139af <SysEject(regs*)+0x32>
c0013997:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c001399e:	85 c9                	test   ecx,ecx
c00139a0:	74 0d                	je     c00139af <SysEject(regs*)+0x32>
c00139a2:	83 ec 0c             	sub    esp,0xc
c00139a5:	51                   	push   ecx
c00139a6:	e8 17 a0 ff ff       	call   c000d9c2 <LogicalDisk::eject()>
c00139ab:	83 c4 10             	add    esp,0x10
c00139ae:	99                   	cdq    
c00139af:	83 c4 0c             	add    esp,0xc
c00139b2:	c3                   	ret    

c00139b3 <SysExit(regs*)>:
c00139b3:	83 ec 18             	sub    esp,0x18
c00139b6:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00139ba:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00139bd:	e8 16 2b 00 00       	call   c00164d8 <terminateTask(int)>
c00139c2:	83 c8 ff             	or     eax,0xffffffff
c00139c5:	83 c4 1c             	add    esp,0x1c
c00139c8:	89 c2                	mov    edx,eax
c00139ca:	c3                   	ret    

c00139cb <SysGetCwd(regs*)>:
c00139cb:	83 ec 10             	sub    esp,0x10
c00139ce:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00139d2:	ff 70 28             	push   DWORD PTR [eax+0x28]
c00139d5:	ff 70 20             	push   DWORD PTR [eax+0x20]
c00139d8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139dd:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c00139e0:	e8 53 7b ff ff       	call   c000b538 <Fs::getcwd(Process*, char*, int)>
c00139e5:	83 c4 1c             	add    esp,0x1c
c00139e8:	99                   	cdq    
c00139e9:	c3                   	ret    

c00139ea <SysGetPID(regs*)>:
c00139ea:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00139ef:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00139f2:	8b 00                	mov    eax,DWORD PTR [eax]
c00139f4:	99                   	cdq    
c00139f5:	c3                   	ret    

c00139f6 <SysGetRAMData(regs*)>:
c00139f6:	8b 0d e8 5e 02 c0    	mov    ecx,DWORD PTR ds:0xc0025ee8
c00139fc:	69 05 e4 5e 02 c0 c8 00 00 00 	imul   eax,DWORD PTR ds:0xc0025ee4,0xc8
c0013a06:	99                   	cdq    
c0013a07:	f7 f9                	idiv   ecx
c0013a09:	c1 e0 18             	shl    eax,0x18
c0013a0c:	09 c8                	or     eax,ecx
c0013a0e:	99                   	cdq    
c0013a0f:	c3                   	ret    

c0013a10 <SysGetVGAPtr(regs*)>:
c0013a10:	55                   	push   ebp
c0013a11:	57                   	push   edi
c0013a12:	56                   	push   esi
c0013a13:	53                   	push   ebx
c0013a14:	83 ec 18             	sub    esp,0x18
c0013a17:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0013a1b:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013a1e:	e8 81 25 00 00       	call   c0015fa4 <Thr::processFromPID(int)>
c0013a23:	83 c4 10             	add    esp,0x10
c0013a26:	89 c1                	mov    ecx,eax
c0013a28:	b8 01 00 00 00       	mov    eax,0x1
c0013a2d:	85 c9                	test   ecx,ecx
c0013a2f:	74 57                	je     c0013a88 <SysGetVGAPtr(regs*)+0x78>
c0013a31:	8b a9 06 05 00 00    	mov    ebp,DWORD PTR [ecx+0x506]
c0013a37:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0013a3b:	74 0c                	je     c0013a49 <SysGetVGAPtr(regs*)+0x39>
c0013a3d:	83 ec 0c             	sub    esp,0xc
c0013a40:	55                   	push   ebp
c0013a41:	e8 13 4d ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0013a46:	83 c4 10             	add    esp,0x10
c0013a49:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c0013a4c:	8b 7b 20             	mov    edi,DWORD PTR [ebx+0x20]
c0013a4f:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c0013a54:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0013a56:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0013a59:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013a5c:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c0013a62:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013a65:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0013a68:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c0013a6e:	50                   	push   eax
c0013a6f:	50                   	push   eax
c0013a70:	68 74 1f 02 c0       	push   0xc0021f74
c0013a75:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013a78:	05 a8 0f 00 00       	add    eax,0xfa8
c0013a7d:	50                   	push   eax
c0013a7e:	e8 bd cb fe ff       	call   c0000640 <strcpy>
c0013a83:	83 c4 10             	add    esp,0x10
c0013a86:	31 c0                	xor    eax,eax
c0013a88:	83 c4 0c             	add    esp,0xc
c0013a8b:	31 d2                	xor    edx,edx
c0013a8d:	5b                   	pop    ebx
c0013a8e:	5e                   	pop    esi
c0013a8f:	5f                   	pop    edi
c0013a90:	5d                   	pop    ebp
c0013a91:	c3                   	ret    
c0013a92:	66 90                	xchg   ax,ax

c0013a94 <SysKill(regs*)>:
c0013a94:	53                   	push   ebx
c0013a95:	83 ec 08             	sub    esp,0x8
c0013a98:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013a9c:	83 7b 28 ff          	cmp    DWORD PTR [ebx+0x28],0xffffffff
c0013aa0:	75 16                	jne    c0013ab8 <SysKill(regs*)+0x24>
c0013aa2:	83 ec 0c             	sub    esp,0xc
c0013aa5:	68 7e 1f 02 c0       	push   0xc0021f7e
c0013aaa:	e8 ca d7 ff ff       	call   c0011279 <KePanic(char const*)>
c0013aaf:	83 c4 10             	add    esp,0x10
c0013ab2:	e9 89 00 00 00       	jmp    c0013b40 <SysKill(regs*)+0xac>
c0013ab7:	90                   	nop
c0013ab8:	83 ec 0c             	sub    esp,0xc
c0013abb:	68 e4 96 02 c0       	push   0xc00296e4
c0013ac0:	e8 d7 bc 00 00       	call   c001f79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013ac5:	8d 76 00             	lea    esi,[esi+0x0]
c0013ac8:	83 c4 10             	add    esp,0x10
c0013acb:	85 c0                	test   eax,eax
c0013acd:	74 19                	je     c0013ae8 <SysKill(regs*)+0x54>
c0013acf:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013ad2:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013ad5:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013ad7:	74 33                	je     c0013b0c <SysKill(regs*)+0x78>
c0013ad9:	52                   	push   edx
c0013ada:	52                   	push   edx
c0013adb:	50                   	push   eax
c0013adc:	68 e4 96 02 c0       	push   0xc00296e4
c0013ae1:	e8 d6 bf 00 00       	call   c001fabc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013ae6:	eb e0                	jmp    c0013ac8 <SysKill(regs*)+0x34>
c0013ae8:	83 ec 0c             	sub    esp,0xc
c0013aeb:	68 d8 96 02 c0       	push   0xc00296d8
c0013af0:	e8 a7 bc 00 00       	call   c001f79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0013af5:	8d 76 00             	lea    esi,[esi+0x0]
c0013af8:	83 c4 10             	add    esp,0x10
c0013afb:	85 c0                	test   eax,eax
c0013afd:	74 41                	je     c0013b40 <SysKill(regs*)+0xac>
c0013aff:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0013b02:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c0013b05:	39 0a                	cmp    DWORD PTR [edx],ecx
c0013b07:	75 27                	jne    c0013b30 <SysKill(regs*)+0x9c>
c0013b09:	8d 76 00             	lea    esi,[esi+0x0]
c0013b0c:	51                   	push   ecx
c0013b0d:	51                   	push   ecx
c0013b0e:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013b11:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b16:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013b19:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013b1f:	e8 f6 db ff ff       	call   c001171a <KeRaiseSignal(SigHandlerBlock*, int)>
c0013b24:	83 c4 10             	add    esp,0x10
c0013b27:	31 c0                	xor    eax,eax
c0013b29:	31 d2                	xor    edx,edx
c0013b2b:	eb 1b                	jmp    c0013b48 <SysKill(regs*)+0xb4>
c0013b2d:	8d 76 00             	lea    esi,[esi+0x0]
c0013b30:	52                   	push   edx
c0013b31:	52                   	push   edx
c0013b32:	50                   	push   eax
c0013b33:	68 d8 96 02 c0       	push   0xc00296d8
c0013b38:	e8 7f bf 00 00       	call   c001fabc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c0013b3d:	eb b9                	jmp    c0013af8 <SysKill(regs*)+0x64>
c0013b3f:	90                   	nop
c0013b40:	83 c8 ff             	or     eax,0xffffffff
c0013b43:	89 c2                	mov    edx,eax
c0013b45:	8d 76 00             	lea    esi,[esi+0x0]
c0013b48:	83 c4 08             	add    esp,0x8
c0013b4b:	5b                   	pop    ebx
c0013b4c:	c3                   	ret    

c0013b4d <SysLoadDLL(regs*)>:
c0013b4d:	56                   	push   esi
c0013b4e:	53                   	push   ebx
c0013b4f:	31 d2                	xor    edx,edx
c0013b51:	51                   	push   ecx
c0013b52:	b8 01 00 00 00       	mov    eax,0x1
c0013b57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013b5b:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c0013b5f:	0f 84 8c 00 00 00    	je     c0013bf1 <SysLoadDLL(regs*)+0xa4>
c0013b65:	83 ec 0c             	sub    esp,0xc
c0013b68:	68 14 01 00 00       	push   0x114
c0013b6d:	e8 44 3f ff ff       	call   c0007ab6 <malloc>
c0013b72:	83 c4 0c             	add    esp,0xc
c0013b75:	89 c3                	mov    ebx,eax
c0013b77:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013b7c:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013b7f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013b82:	53                   	push   ebx
c0013b83:	e8 ba 7b ff ff       	call   c000b742 <File::File(char const*, Process*)>
c0013b88:	83 c4 10             	add    esp,0x10
c0013b8b:	31 d2                	xor    edx,edx
c0013b8d:	b8 02 00 00 00       	mov    eax,0x2
c0013b92:	85 db                	test   ebx,ebx
c0013b94:	74 5b                	je     c0013bf1 <SysLoadDLL(regs*)+0xa4>
c0013b96:	83 ec 0c             	sub    esp,0xc
c0013b99:	53                   	push   ebx
c0013b9a:	e8 23 7f ff ff       	call   c000bac2 <File::exists()>
c0013b9f:	83 c4 10             	add    esp,0x10
c0013ba2:	84 c0                	test   al,al
c0013ba4:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013ba6:	75 11                	jne    c0013bb9 <SysLoadDLL(regs*)+0x6c>
c0013ba8:	83 ec 0c             	sub    esp,0xc
c0013bab:	53                   	push   ebx
c0013bac:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013baf:	83 c4 10             	add    esp,0x10
c0013bb2:	b8 03 00 00 00       	mov    eax,0x3
c0013bb7:	eb 36                	jmp    c0013bef <SysLoadDLL(regs*)+0xa2>
c0013bb9:	83 ec 0c             	sub    esp,0xc
c0013bbc:	53                   	push   ebx
c0013bbd:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013bc0:	58                   	pop    eax
c0013bc1:	5a                   	pop    edx
c0013bc2:	6a 00                	push   0x0
c0013bc4:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013bc7:	e8 0e 15 00 00       	call   c00150da <Thr::loadDLL(char const*, bool)>
c0013bcc:	83 c4 10             	add    esp,0x10
c0013bcf:	89 c1                	mov    ecx,eax
c0013bd1:	31 d2                	xor    edx,edx
c0013bd3:	b8 04 00 00 00       	mov    eax,0x4
c0013bd8:	85 c9                	test   ecx,ecx
c0013bda:	74 15                	je     c0013bf1 <SysLoadDLL(regs*)+0xa4>
c0013bdc:	53                   	push   ebx
c0013bdd:	53                   	push   ebx
c0013bde:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0013be4:	51                   	push   ecx
c0013be5:	e8 21 17 00 00       	call   c001530b <Thr::executeDLL(unsigned long, void*)>
c0013bea:	83 c4 10             	add    esp,0x10
c0013bed:	31 c0                	xor    eax,eax
c0013bef:	31 d2                	xor    edx,edx
c0013bf1:	59                   	pop    ecx
c0013bf2:	5b                   	pop    ebx
c0013bf3:	5e                   	pop    esi
c0013bf4:	c3                   	ret    

c0013bf5 <SysRead(regs*)>:
c0013bf5:	57                   	push   edi
c0013bf6:	56                   	push   esi
c0013bf7:	53                   	push   ebx
c0013bf8:	83 ec 10             	sub    esp,0x10
c0013bfb:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0013bff:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0013c02:	83 f8 02             	cmp    eax,0x2
c0013c05:	77 10                	ja     c0013c17 <SysRead(regs*)+0x22>
c0013c07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c0c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c0f:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c0013c15:	eb 0e                	jmp    c0013c25 <SysRead(regs*)+0x30>
c0013c17:	83 ec 0c             	sub    esp,0xc
c0013c1a:	50                   	push   eax
c0013c1b:	e8 93 58 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0013c20:	83 c4 10             	add    esp,0x10
c0013c23:	89 c1                	mov    ecx,eax
c0013c25:	83 c8 ff             	or     eax,0xffffffff
c0013c28:	85 c9                	test   ecx,ecx
c0013c2a:	89 c2                	mov    edx,eax
c0013c2c:	74 28                	je     c0013c56 <SysRead(regs*)+0x61>
c0013c2e:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0013c36:	31 ff                	xor    edi,edi
c0013c38:	83 ec 0c             	sub    esp,0xc
c0013c3b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013c3d:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013c41:	52                   	push   edx
c0013c42:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c45:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c0013c48:	57                   	push   edi
c0013c49:	56                   	push   esi
c0013c4a:	51                   	push   ecx
c0013c4b:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013c4e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0013c52:	83 c4 20             	add    esp,0x20
c0013c55:	99                   	cdq    
c0013c56:	83 c4 10             	add    esp,0x10
c0013c59:	5b                   	pop    ebx
c0013c5a:	5e                   	pop    esi
c0013c5b:	5f                   	pop    edi
c0013c5c:	c3                   	ret    

c0013c5d <SysRegisterSignal(regs*)>:
c0013c5d:	83 ec 18             	sub    esp,0x18
c0013c60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013c64:	6a 00                	push   0x0
c0013c66:	6a 00                	push   0x0
c0013c68:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013c6b:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013c6e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013c73:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013c76:	ff b0 20 07 00 00    	push   DWORD PTR [eax+0x720]
c0013c7c:	e8 63 da ff ff       	call   c00116e4 <KeRegisterSignalHandler(SigHandlerBlock*, int, void (*)(int), unsigned int, int)>
c0013c81:	83 c4 2c             	add    esp,0x2c
c0013c84:	99                   	cdq    
c0013c85:	c3                   	ret    

c0013c86 <SysRegistryGetTypeFromPath(regs*)>:
c0013c86:	57                   	push   edi
c0013c87:	56                   	push   esi
c0013c88:	53                   	push   ebx
c0013c89:	81 ec 38 01 00 00    	sub    esp,0x138
c0013c8f:	8b 9c 24 48 01 00 00 	mov    ebx,DWORD PTR [esp+0x148]
c0013c96:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013c99:	68 9f 1f 02 c0       	push   0xc0021f9f
c0013c9e:	e8 a2 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013ca3:	5a                   	pop    edx
c0013ca4:	59                   	pop    ecx
c0013ca5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013ca8:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013cab:	e8 4d f6 ff ff       	call   c00132fd <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013cb0:	5f                   	pop    edi
c0013cb1:	89 c6                	mov    esi,eax
c0013cb3:	5a                   	pop    edx
c0013cb4:	50                   	push   eax
c0013cb5:	68 bf 1f 02 c0       	push   0xc0021fbf
c0013cba:	e8 86 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013cbf:	83 c4 10             	add    esp,0x10
c0013cc2:	85 f6                	test   esi,esi
c0013cc4:	74 28                	je     c0013cee <SysRegistryGetTypeFromPath(regs*)+0x68>
c0013cc6:	50                   	push   eax
c0013cc7:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013ccb:	57                   	push   edi
c0013ccc:	56                   	push   esi
c0013ccd:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013cd0:	e8 0c f2 ff ff       	call   c0012ee1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013cd5:	83 c4 0c             	add    esp,0xc
c0013cd8:	89 c3                	mov    ebx,eax
c0013cda:	57                   	push   edi
c0013cdb:	50                   	push   eax
c0013cdc:	68 c7 1f 02 c0       	push   0xc0021fc7
c0013ce1:	e8 5f 6c ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013ce6:	89 d8                	mov    eax,ebx
c0013ce8:	83 c4 10             	add    esp,0x10
c0013ceb:	99                   	cdq    
c0013cec:	eb 05                	jmp    c0013cf3 <SysRegistryGetTypeFromPath(regs*)+0x6d>
c0013cee:	83 c8 ff             	or     eax,0xffffffff
c0013cf1:	89 c2                	mov    edx,eax
c0013cf3:	81 c4 30 01 00 00    	add    esp,0x130
c0013cf9:	5b                   	pop    ebx
c0013cfa:	5e                   	pop    esi
c0013cfb:	5f                   	pop    edi
c0013cfc:	c3                   	ret    

c0013cfd <SysRegistryReadExtent(regs*)>:
c0013cfd:	83 ec 1c             	sub    esp,0x1c
c0013d00:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0013d04:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013d07:	8b 4a 20             	mov    ecx,DWORD PTR [edx+0x20]
c0013d0a:	85 c0                	test   eax,eax
c0013d0c:	79 1f                	jns    c0013d2d <SysRegistryReadExtent(regs*)+0x30>
c0013d0e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0013d13:	52                   	push   edx
c0013d14:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0013d18:	52                   	push   edx
c0013d19:	50                   	push   eax
c0013d1a:	51                   	push   ecx
c0013d1b:	e8 b3 f0 ff ff       	call   c0012dd3 <CmGetInteger(Reghive_Tag*, int, unsigned long long*)>
c0013d20:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013d24:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0013d28:	83 c4 10             	add    esp,0x10
c0013d2b:	eb 14                	jmp    c0013d41 <SysRegistryReadExtent(regs*)+0x44>
c0013d2d:	83 ec 04             	sub    esp,0x4
c0013d30:	ff 72 24             	push   DWORD PTR [edx+0x24]
c0013d33:	50                   	push   eax
c0013d34:	51                   	push   ecx
c0013d35:	e8 33 eb ff ff       	call   c001286d <CmGetString(Reghive_Tag*, int, char*)>
c0013d3a:	83 c4 10             	add    esp,0x10
c0013d3d:	31 c0                	xor    eax,eax
c0013d3f:	31 d2                	xor    edx,edx
c0013d41:	83 c4 1c             	add    esp,0x1c
c0013d44:	c3                   	ret    

c0013d45 <SysRegistryPathToExtentLookup(regs*)>:
c0013d45:	53                   	push   ebx
c0013d46:	83 ec 10             	sub    esp,0x10
c0013d49:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d4d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d50:	68 dd 1f 02 c0       	push   0xc0021fdd
c0013d55:	e8 eb 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013d5a:	58                   	pop    eax
c0013d5b:	5a                   	pop    edx
c0013d5c:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0013d5f:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d62:	e8 96 f5 ff ff       	call   c00132fd <CmFindObjectFromPath(Reghive_Tag*, char const*)>
c0013d67:	83 c4 18             	add    esp,0x18
c0013d6a:	99                   	cdq    
c0013d6b:	5b                   	pop    ebx
c0013d6c:	c3                   	ret    

c0013d6d <SysRegistryEnterDirectory(regs*)>:
c0013d6d:	53                   	push   ebx
c0013d6e:	83 ec 10             	sub    esp,0x10
c0013d71:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d75:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d78:	68 00 20 02 c0       	push   0xc0022000
c0013d7d:	e8 c3 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013d82:	58                   	pop    eax
c0013d83:	5a                   	pop    edx
c0013d84:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013d87:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013d8a:	e8 55 eb ff ff       	call   c00128e4 <CmEnterDirectory(Reghive_Tag*, int)>
c0013d8f:	83 c4 18             	add    esp,0x18
c0013d92:	99                   	cdq    
c0013d93:	5b                   	pop    ebx
c0013d94:	c3                   	ret    

c0013d95 <SysRegistryGetNext(regs*)>:
c0013d95:	53                   	push   ebx
c0013d96:	83 ec 10             	sub    esp,0x10
c0013d99:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013d9d:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013da0:	68 1e 20 02 c0       	push   0xc002201e
c0013da5:	e8 9b 6b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013daa:	58                   	pop    eax
c0013dab:	5a                   	pop    edx
c0013dac:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0013daf:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013db2:	e8 6c eb ff ff       	call   c0012923 <CmGetNext(Reghive_Tag*, int)>
c0013db7:	83 c4 18             	add    esp,0x18
c0013dba:	99                   	cdq    
c0013dbb:	5b                   	pop    ebx
c0013dbc:	c3                   	ret    

c0013dbd <SysRegistryGetNameAndTypeFromExtent(regs*)>:
c0013dbd:	57                   	push   edi
c0013dbe:	56                   	push   esi
c0013dbf:	53                   	push   ebx
c0013dc0:	81 ec 34 01 00 00    	sub    esp,0x134
c0013dc6:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c0013dcd:	8d 7c 24 08          	lea    edi,[esp+0x8]
c0013dd1:	57                   	push   edi
c0013dd2:	ff 76 28             	push   DWORD PTR [esi+0x28]
c0013dd5:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0013dd8:	e8 04 f1 ff ff       	call   c0012ee1 <CmGetNameAndTypeFromExtent(Reghive_Tag*, int, char*)>
c0013ddd:	89 c3                	mov    ebx,eax
c0013ddf:	58                   	pop    eax
c0013de0:	5a                   	pop    edx
c0013de1:	57                   	push   edi
c0013de2:	ff 76 24             	push   DWORD PTR [esi+0x24]
c0013de5:	e8 56 c8 fe ff       	call   c0000640 <strcpy>
c0013dea:	89 d8                	mov    eax,ebx
c0013dec:	81 c4 40 01 00 00    	add    esp,0x140
c0013df2:	99                   	cdq    
c0013df3:	5b                   	pop    ebx
c0013df4:	5e                   	pop    esi
c0013df5:	5f                   	pop    edi
c0013df6:	c3                   	ret    

c0013df7 <SysRegistryOpen(regs*)>:
c0013df7:	83 ec 18             	sub    esp,0x18
c0013dfa:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013dfe:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0013e01:	e8 f7 e8 ff ff       	call   c00126fd <CmOpen(char const*)>
c0013e06:	83 c4 1c             	add    esp,0x1c
c0013e09:	99                   	cdq    
c0013e0a:	c3                   	ret    

c0013e0b <SysRegistryClose(regs*)>:
c0013e0b:	83 ec 18             	sub    esp,0x18
c0013e0e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013e12:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e15:	e8 01 ea ff ff       	call   c001281b <CmClose(Reghive_Tag*)>
c0013e1a:	31 c0                	xor    eax,eax
c0013e1c:	31 d2                	xor    edx,edx
c0013e1e:	83 c4 1c             	add    esp,0x1c
c0013e21:	c3                   	ret    

c0013e22 <SysSbrk(regs*)>:
c0013e22:	56                   	push   esi
c0013e23:	53                   	push   ebx
c0013e24:	50                   	push   eax
c0013e25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e2a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013e2e:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0013e31:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c0013e34:	8b 88 12 05 00 00    	mov    ecx,DWORD PTR [eax+0x512]
c0013e3a:	85 db                	test   ebx,ebx
c0013e3c:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c0013e3f:	74 02                	je     c0013e43 <SysSbrk(regs*)+0x21>
c0013e41:	79 06                	jns    c0013e49 <SysSbrk(regs*)+0x27>
c0013e43:	89 f0                	mov    eax,esi
c0013e45:	31 d2                	xor    edx,edx
c0013e47:	eb 2a                	jmp    c0013e73 <SysSbrk(regs*)+0x51>
c0013e49:	83 c8 ff             	or     eax,0xffffffff
c0013e4c:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c0013e52:	89 c2                	mov    edx,eax
c0013e54:	77 1d                	ja     c0013e73 <SysSbrk(regs*)+0x51>
c0013e56:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c0013e5c:	50                   	push   eax
c0013e5d:	c1 ea 0c             	shr    edx,0xc
c0013e60:	68 07 0c 00 00       	push   0xc07
c0013e65:	52                   	push   edx
c0013e66:	51                   	push   ecx
c0013e67:	e8 b8 5f ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c0013e6c:	89 f0                	mov    eax,esi
c0013e6e:	31 d2                	xor    edx,edx
c0013e70:	83 c4 10             	add    esp,0x10
c0013e73:	59                   	pop    ecx
c0013e74:	5b                   	pop    ebx
c0013e75:	5e                   	pop    esi
c0013e76:	c3                   	ret    

c0013e77 <SysSetCwd(regs*)>:
c0013e77:	83 ec 14             	sub    esp,0x14
c0013e7a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013e7e:	ff 70 20             	push   DWORD PTR [eax+0x20]
c0013e81:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013e86:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013e89:	e8 d3 7c ff ff       	call   c000bb61 <Fs::setcwd(Process*, char*)>
c0013e8e:	83 c4 1c             	add    esp,0x1c
c0013e91:	99                   	cdq    
c0013e92:	c3                   	ret    

c0013e93 <SysSetTime(regs*)>:
c0013e93:	55                   	push   ebp
c0013e94:	31 c9                	xor    ecx,ecx
c0013e96:	57                   	push   edi
c0013e97:	bd 0c 00 00 00       	mov    ebp,0xc
c0013e9c:	56                   	push   esi
c0013e9d:	53                   	push   ebx
c0013e9e:	31 db                	xor    ebx,ebx
c0013ea0:	83 ec 10             	sub    esp,0x10
c0013ea3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0013ea7:	8b 72 20             	mov    esi,DWORD PTR [edx+0x20]
c0013eaa:	8b 42 28             	mov    eax,DWORD PTR [edx+0x28]
c0013ead:	8b 7a 24             	mov    edi,DWORD PTR [edx+0x24]
c0013eb0:	89 c2                	mov    edx,eax
c0013eb2:	81 ef 6c 07 00 00    	sub    edi,0x76c
c0013eb8:	83 e2 1f             	and    edx,0x1f
c0013ebb:	c1 e7 10             	shl    edi,0x10
c0013ebe:	42                   	inc    edx
c0013ebf:	c1 e8 05             	shr    eax,0x5
c0013ec2:	88 d1                	mov    cl,dl
c0013ec4:	31 d2                	xor    edx,edx
c0013ec6:	f7 f5                	div    ebp
c0013ec8:	89 dd                	mov    ebp,ebx
c0013eca:	88 d5                	mov    ch,dl
c0013ecc:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0013ed2:	0f b7 c1             	movzx  eax,cx
c0013ed5:	31 d2                	xor    edx,edx
c0013ed7:	09 f8                	or     eax,edi
c0013ed9:	bf 3c 00 00 00       	mov    edi,0x3c
c0013ede:	89 c1                	mov    ecx,eax
c0013ee0:	89 f0                	mov    eax,esi
c0013ee2:	f7 f7                	div    edi
c0013ee4:	c1 e2 10             	shl    edx,0x10
c0013ee7:	09 d5                	or     ebp,edx
c0013ee9:	31 d2                	xor    edx,edx
c0013eeb:	89 eb                	mov    ebx,ebp
c0013eed:	f7 f7                	div    edi
c0013eef:	bf 10 0e 00 00       	mov    edi,0xe10
c0013ef4:	88 d7                	mov    bh,dl
c0013ef6:	89 f0                	mov    eax,esi
c0013ef8:	31 d2                	xor    edx,edx
c0013efa:	f7 f7                	div    edi
c0013efc:	bf 18 00 00 00       	mov    edi,0x18
c0013f01:	31 d2                	xor    edx,edx
c0013f03:	f7 f7                	div    edi
c0013f05:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0013f0a:	88 d3                	mov    bl,dl
c0013f0c:	53                   	push   ebx
c0013f0d:	51                   	push   ecx
c0013f0e:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c0013f14:	e8 45 84 ff ff       	call   c000c35e <Clock::setTimeInDatetimeLocal(datetime_t)>
c0013f19:	83 c4 1c             	add    esp,0x1c
c0013f1c:	83 f0 01             	xor    eax,0x1
c0013f1f:	5b                   	pop    ebx
c0013f20:	0f b6 c0             	movzx  eax,al
c0013f23:	5e                   	pop    esi
c0013f24:	31 d2                	xor    edx,edx
c0013f26:	5f                   	pop    edi
c0013f27:	5d                   	pop    ebp
c0013f28:	c3                   	ret    

c0013f29 <SysTimezone(regs*)>:
c0013f29:	53                   	push   ebx
c0013f2a:	83 ec 08             	sub    esp,0x8
c0013f2d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013f31:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c0013f35:	75 17                	jne    c0013f4e <SysTimezone(regs*)+0x25>
c0013f37:	83 ec 0c             	sub    esp,0xc
c0013f3a:	68 35 20 02 c0       	push   0xc0022035
c0013f3f:	e8 01 6a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013f44:	83 c8 ff             	or     eax,0xffffffff
c0013f47:	83 c4 10             	add    esp,0x10
c0013f4a:	89 c2                	mov    edx,eax
c0013f4c:	eb 20                	jmp    c0013f6e <SysTimezone(regs*)+0x45>
c0013f4e:	83 ec 0c             	sub    esp,0xc
c0013f51:	68 4a 20 02 c0       	push   0xc002204a
c0013f56:	e8 ea 69 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0013f5b:	58                   	pop    eax
c0013f5c:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0013f5f:	e8 64 81 ff ff       	call   c000c0c8 <User::loadClockSettings(int)>
c0013f64:	83 c4 10             	add    esp,0x10
c0013f67:	b8 01 00 00 00       	mov    eax,0x1
c0013f6c:	31 d2                	xor    edx,edx
c0013f6e:	83 c4 08             	add    esp,0x8
c0013f71:	5b                   	pop    ebx
c0013f72:	c3                   	ret    

c0013f73 <SysTruncate(regs*)>:
c0013f73:	55                   	push   ebp
c0013f74:	57                   	push   edi
c0013f75:	31 ff                	xor    edi,edi
c0013f77:	56                   	push   esi
c0013f78:	53                   	push   ebx
c0013f79:	83 ec 0c             	sub    esp,0xc
c0013f7c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0013f80:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c0013f83:	8b 68 24             	mov    ebp,DWORD PTR [eax+0x24]
c0013f86:	89 ce                	mov    esi,ecx
c0013f88:	83 78 28 00          	cmp    DWORD PTR [eax+0x28],0x0
c0013f8c:	0f 84 9a 00 00 00    	je     c001402c <SysTruncate(regs*)+0xb9>
c0013f92:	83 ec 0c             	sub    esp,0xc
c0013f95:	68 14 01 00 00       	push   0x114
c0013f9a:	e8 17 3b ff ff       	call   c0007ab6 <malloc>
c0013f9f:	83 c4 0c             	add    esp,0xc
c0013fa2:	89 c3                	mov    ebx,eax
c0013fa4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0013fa9:	ff 70 3c             	push   DWORD PTR [eax+0x3c]
c0013fac:	55                   	push   ebp
c0013fad:	53                   	push   ebx
c0013fae:	e8 8f 77 ff ff       	call   c000b742 <File::File(char const*, Process*)>
c0013fb3:	83 c4 10             	add    esp,0x10
c0013fb6:	31 d2                	xor    edx,edx
c0013fb8:	b8 03 00 00 00       	mov    eax,0x3
c0013fbd:	85 db                	test   ebx,ebx
c0013fbf:	0f 84 a2 00 00 00    	je     c0014067 <SysTruncate(regs*)+0xf4>
c0013fc5:	51                   	push   ecx
c0013fc6:	51                   	push   ecx
c0013fc7:	6a 02                	push   0x2
c0013fc9:	53                   	push   ebx
c0013fca:	e8 2f 78 ff ff       	call   c000b7fe <File::open(FileOpenMode)>
c0013fcf:	83 c4 10             	add    esp,0x10
c0013fd2:	85 c0                	test   eax,eax
c0013fd4:	74 13                	je     c0013fe9 <SysTruncate(regs*)+0x76>
c0013fd6:	83 ec 0c             	sub    esp,0xc
c0013fd9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013fdb:	53                   	push   ebx
c0013fdc:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013fdf:	83 c4 10             	add    esp,0x10
c0013fe2:	b8 04 00 00 00       	mov    eax,0x4
c0013fe7:	eb 7c                	jmp    c0014065 <SysTruncate(regs*)+0xf2>
c0013fe9:	52                   	push   edx
c0013fea:	57                   	push   edi
c0013feb:	56                   	push   esi
c0013fec:	53                   	push   ebx
c0013fed:	e8 20 79 ff ff       	call   c000b912 <File::truncate(unsigned long long)>
c0013ff2:	83 c4 10             	add    esp,0x10
c0013ff5:	85 c0                	test   eax,eax
c0013ff7:	74 1b                	je     c0014014 <SysTruncate(regs*)+0xa1>
c0013ff9:	83 ec 0c             	sub    esp,0xc
c0013ffc:	53                   	push   ebx
c0013ffd:	e8 5a 78 ff ff       	call   c000b85c <File::close()>
c0014002:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014004:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014007:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001400a:	83 c4 10             	add    esp,0x10
c001400d:	b8 05 00 00 00       	mov    eax,0x5
c0014012:	eb 51                	jmp    c0014065 <SysTruncate(regs*)+0xf2>
c0014014:	83 ec 0c             	sub    esp,0xc
c0014017:	53                   	push   ebx
c0014018:	e8 3f 78 ff ff       	call   c000b85c <File::close()>
c001401d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001401f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014022:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014025:	83 c4 10             	add    esp,0x10
c0014028:	31 c0                	xor    eax,eax
c001402a:	eb 39                	jmp    c0014065 <SysTruncate(regs*)+0xf2>
c001402c:	31 d2                	xor    edx,edx
c001402e:	b8 01 00 00 00       	mov    eax,0x1
c0014033:	83 fd 02             	cmp    ebp,0x2
c0014036:	7e 2f                	jle    c0014067 <SysTruncate(regs*)+0xf4>
c0014038:	83 ec 0c             	sub    esp,0xc
c001403b:	51                   	push   ecx
c001403c:	e8 72 54 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c0014041:	83 c4 10             	add    esp,0x10
c0014044:	89 c1                	mov    ecx,eax
c0014046:	31 d2                	xor    edx,edx
c0014048:	b8 02 00 00 00       	mov    eax,0x2
c001404d:	85 c9                	test   ecx,ecx
c001404f:	74 16                	je     c0014067 <SysTruncate(regs*)+0xf4>
c0014051:	50                   	push   eax
c0014052:	57                   	push   edi
c0014053:	56                   	push   esi
c0014054:	51                   	push   ecx
c0014055:	e8 b8 78 ff ff       	call   c000b912 <File::truncate(unsigned long long)>
c001405a:	83 c4 10             	add    esp,0x10
c001405d:	85 c0                	test   eax,eax
c001405f:	0f 95 c0             	setne  al
c0014062:	0f b6 c0             	movzx  eax,al
c0014065:	31 d2                	xor    edx,edx
c0014067:	83 c4 0c             	add    esp,0xc
c001406a:	5b                   	pop    ebx
c001406b:	5e                   	pop    esi
c001406c:	5f                   	pop    edi
c001406d:	5d                   	pop    ebp
c001406e:	c3                   	ret    

c001406f <SysWrite(regs*)>:
c001406f:	57                   	push   edi
c0014070:	56                   	push   esi
c0014071:	53                   	push   ebx
c0014072:	83 ec 10             	sub    esp,0x10
c0014075:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0014079:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001407c:	83 f8 02             	cmp    eax,0x2
c001407f:	77 10                	ja     c0014091 <SysWrite(regs*)+0x22>
c0014081:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014086:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014089:	8b 88 06 05 00 00    	mov    ecx,DWORD PTR [eax+0x506]
c001408f:	eb 0e                	jmp    c001409f <SysWrite(regs*)+0x30>
c0014091:	83 ec 0c             	sub    esp,0xc
c0014094:	50                   	push   eax
c0014095:	e8 19 54 ff ff       	call   c00094b3 <KeGetFileFromDescriptor(int)>
c001409a:	83 c4 10             	add    esp,0x10
c001409d:	89 c1                	mov    ecx,eax
c001409f:	83 c8 ff             	or     eax,0xffffffff
c00140a2:	85 c9                	test   ecx,ecx
c00140a4:	89 c2                	mov    edx,eax
c00140a6:	74 28                	je     c00140d0 <SysWrite(regs*)+0x61>
c00140a8:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00140b0:	31 ff                	xor    edi,edi
c00140b2:	83 ec 0c             	sub    esp,0xc
c00140b5:	8b 01                	mov    eax,DWORD PTR [ecx]
c00140b7:	8d 54 24 18          	lea    edx,[esp+0x18]
c00140bb:	52                   	push   edx
c00140bc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c00140bf:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c00140c2:	57                   	push   edi
c00140c3:	56                   	push   esi
c00140c4:	51                   	push   ecx
c00140c5:	ff 50 10             	call   DWORD PTR [eax+0x10]
c00140c8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00140cc:	83 c4 20             	add    esp,0x20
c00140cf:	99                   	cdq    
c00140d0:	83 c4 10             	add    esp,0x10
c00140d3:	5b                   	pop    ebx
c00140d4:	5e                   	pop    esi
c00140d5:	5f                   	pop    edi
c00140d6:	c3                   	ret    

c00140d7 <SysWsbe(regs*)>:
c00140d7:	57                   	push   edi
c00140d8:	b9 0b 00 00 00       	mov    ecx,0xb
c00140dd:	56                   	push   esi
c00140de:	be 89 20 02 c0       	mov    esi,0xc0022089
c00140e3:	53                   	push   ebx
c00140e4:	83 ec 30             	sub    esp,0x30
c00140e7:	8d 7c 24 04          	lea    edi,[esp+0x4]
c00140eb:	fc                   	cld    
c00140ec:	83 ec 0c             	sub    esp,0xc
c00140ef:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00140f1:	8d 7c 24 10          	lea    edi,[esp+0x10]
c00140f5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00140fa:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00140fd:	8b b0 06 05 00 00    	mov    esi,DWORD PTR [eax+0x506]
c0014103:	8b 06                	mov    eax,DWORD PTR [esi]
c0014105:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c0014108:	57                   	push   edi
c0014109:	e8 62 c4 fe ff       	call   c0000570 <strlen>
c001410e:	5a                   	pop    edx
c001410f:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0014113:	52                   	push   edx
c0014114:	31 d2                	xor    edx,edx
c0014116:	57                   	push   edi
c0014117:	52                   	push   edx
c0014118:	50                   	push   eax
c0014119:	56                   	push   esi
c001411a:	ff d3                	call   ebx
c001411c:	83 c4 14             	add    esp,0x14
c001411f:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0014123:	ff 70 24             	push   DWORD PTR [eax+0x24]
c0014126:	e8 ad 23 00 00       	call   c00164d8 <terminateTask(int)>
c001412b:	83 c4 40             	add    esp,0x40
c001412e:	b8 ef be ad de       	mov    eax,0xdeadbeef
c0014133:	5b                   	pop    ebx
c0014134:	31 d2                	xor    edx,edx
c0014136:	5e                   	pop    esi
c0014137:	5f                   	pop    edi
c0014138:	c3                   	ret    

c0014139 <SysYield(regs*)>:
c0014139:	83 ec 0c             	sub    esp,0xc
c001413c:	fa                   	cli    
c001413d:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0014143:	e8 f0 19 00 00       	call   c0015b38 <schedule()>
c0014148:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001414d:	48                   	dec    eax
c001414e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0014153:	75 01                	jne    c0014156 <SysYield(regs*)+0x1d>
c0014155:	fb                   	sti    
c0014156:	31 c0                	xor    eax,eax
c0014158:	31 d2                	xor    edx,edx
c001415a:	83 c4 0c             	add    esp,0xc
c001415d:	c3                   	ret    

c001415e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001415e:	55                   	push   ebp
c001415f:	57                   	push   edi
c0014160:	56                   	push   esi
c0014161:	53                   	push   ebx
c0014162:	81 ec 2c 10 00 00    	sub    esp,0x102c
c0014168:	83 bc 24 50 10 00 00 00 	cmp    DWORD PTR [esp+0x1050],0x0
c0014170:	0f 95 c0             	setne  al
c0014173:	31 d2                	xor    edx,edx
c0014175:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001417d:	0f 94 c2             	sete   dl
c0014180:	85 c2                	test   edx,eax
c0014182:	74 34                	je     c00141b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014184:	f7 84 24 4c 10 00 00 ff 0f 00 00 	test   DWORD PTR [esp+0x104c],0xfff
c001418f:	74 27                	je     c00141b8 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x5a>
c0014191:	8b 84 24 4c 10 00 00 	mov    eax,DWORD PTR [esp+0x104c]
c0014198:	05 00 10 00 00       	add    eax,0x1000
c001419d:	89 c1                	mov    ecx,eax
c001419f:	25 00 f0 ff ff       	and    eax,0xfffff000
c00141a4:	81 c9 00 f0 ff ff    	or     ecx,0xfffff000
c00141aa:	89 84 24 4c 10 00 00 	mov    DWORD PTR [esp+0x104c],eax
c00141b1:	89 8c 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],ecx
c00141b8:	8b 84 24 48 10 00 00 	mov    eax,DWORD PTR [esp+0x1048]
c00141bf:	83 ec 0c             	sub    esp,0xc
c00141c2:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c00141c8:	6a 01                	push   0x1
c00141ca:	e8 3e 54 ff ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c00141cf:	83 c4 10             	add    esp,0x10
c00141d2:	89 c3                	mov    ebx,eax
c00141d4:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c00141da:	0f 86 25 01 00 00    	jbe    c0014305 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1a7>
c00141e0:	c1 ee 0c             	shr    esi,0xc
c00141e3:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c00141ea:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00141ee:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00141f6:	8b bc 24 48 10 00 00 	mov    edi,DWORD PTR [esp+0x1048]
c00141fd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014201:	03 bc 24 4c 10 00 00 	add    edi,DWORD PTR [esp+0x104c]
c0014208:	29 ef                	sub    edi,ebp
c001420a:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c001420e:	0f 83 f8 00 00 00    	jae    c001430c <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ae>
c0014214:	81 ff 00 10 00 00    	cmp    edi,0x1000
c001421a:	76 05                	jbe    c0014221 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xc3>
c001421c:	bf 00 10 00 00       	mov    edi,0x1000
c0014221:	83 ec 0c             	sub    esp,0xc
c0014224:	31 d2                	xor    edx,edx
c0014226:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001422d:	8b 08                	mov    ecx,DWORD PTR [eax]
c001422f:	8d 44 24 28          	lea    eax,[esp+0x28]
c0014233:	50                   	push   eax
c0014234:	8d 74 24 30          	lea    esi,[esp+0x30]
c0014238:	56                   	push   esi
c0014239:	52                   	push   edx
c001423a:	57                   	push   edi
c001423b:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c0014242:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014245:	83 c4 20             	add    esp,0x20
c0014248:	85 c0                	test   eax,eax
c001424a:	75 06                	jne    c0014252 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xf4>
c001424c:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c0014250:	74 13                	je     c0014265 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x107>
c0014252:	83 ec 0c             	sub    esp,0xc
c0014255:	53                   	push   ebx
c0014256:	e8 d0 56 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c001425b:	83 c4 10             	add    esp,0x10
c001425e:	31 c0                	xor    eax,eax
c0014260:	e9 7c 01 00 00       	jmp    c00143e1 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x283>
c0014265:	fa                   	cli    
c0014266:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001426c:	e8 4e 3b ff ff       	call   c0007dbf <Phys::allocatePage()>
c0014271:	6a 07                	push   0x7
c0014273:	89 c7                	mov    edi,eax
c0014275:	53                   	push   ebx
c0014276:	50                   	push   eax
c0014277:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001427c:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001427f:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014285:	e8 96 5a ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001428a:	83 c4 0c             	add    esp,0xc
c001428d:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014294:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001429a:	6a 00                	push   0x0
c001429c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142a1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142a4:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142aa:	e8 d7 58 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c00142af:	58                   	pop    eax
c00142b0:	5a                   	pop    edx
c00142b1:	68 07 0c 00 00       	push   0xc07
c00142b6:	55                   	push   ebp
c00142b7:	57                   	push   edi
c00142b8:	89 df                	mov    edi,ebx
c00142ba:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c00142c1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142c7:	6a 00                	push   0x0
c00142c9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00142ce:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00142d1:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00142d7:	e8 96 5c ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00142dc:	b9 00 10 00 00       	mov    ecx,0x1000
c00142e1:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00142e3:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00142e8:	83 c4 20             	add    esp,0x20
c00142eb:	48                   	dec    eax
c00142ec:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00142f1:	85 c0                	test   eax,eax
c00142f3:	75 01                	jne    c00142f6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x198>
c00142f5:	fb                   	sti    
c00142f6:	81 c5 00 10 00 00    	add    ebp,0x1000
c00142fc:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014300:	e9 f1 fe ff ff       	jmp    c00141f6 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x98>
c0014305:	8b ac 24 4c 10 00 00 	mov    ebp,DWORD PTR [esp+0x104c]
c001430c:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c0014313:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c0014319:	81 fe ff 0f 00 00    	cmp    esi,0xfff
c001431f:	0f 86 ae 00 00 00    	jbe    c00143d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c0014325:	fa                   	cli    
c0014326:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001432c:	c1 ee 0c             	shr    esi,0xc
c001432f:	51                   	push   ecx
c0014330:	31 ff                	xor    edi,edi
c0014332:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c0014339:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001433f:	6a 00                	push   0x0
c0014341:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014346:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0014349:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001434f:	e8 32 58 ff ff       	call   c0009b86 <VAS::mapOtherVASIn(bool, VAS*)>
c0014354:	83 c4 10             	add    esp,0x10
c0014357:	e8 63 3a ff ff       	call   c0007dbf <Phys::allocatePage()>
c001435c:	47                   	inc    edi
c001435d:	6a 07                	push   0x7
c001435f:	53                   	push   ebx
c0014360:	50                   	push   eax
c0014361:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014365:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001436b:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c001436e:	ff b2 12 05 00 00    	push   DWORD PTR [edx+0x512]
c0014374:	e8 a7 59 ff ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c0014379:	58                   	pop    eax
c001437a:	5a                   	pop    edx
c001437b:	68 07 0c 00 00       	push   0xc07
c0014380:	55                   	push   ebp
c0014381:	81 c5 00 10 00 00    	add    ebp,0x1000
c0014387:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001438b:	50                   	push   eax
c001438c:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c0014393:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c0014399:	6a 00                	push   0x0
c001439b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00143a0:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00143a3:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c00143a9:	e8 c4 5b ff ff       	call   c0009f72 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c00143ae:	83 c4 1c             	add    esp,0x1c
c00143b1:	68 00 10 00 00       	push   0x1000
c00143b6:	6a 00                	push   0x0
c00143b8:	53                   	push   ebx
c00143b9:	e8 32 c1 fe ff       	call   c00004f0 <memset>
c00143be:	83 c4 10             	add    esp,0x10
c00143c1:	39 fe                	cmp    esi,edi
c00143c3:	77 92                	ja     c0014357 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1f9>
c00143c5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00143ca:	48                   	dec    eax
c00143cb:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00143d0:	75 01                	jne    c00143d3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x275>
c00143d2:	fb                   	sti    
c00143d3:	83 ec 0c             	sub    esp,0xc
c00143d6:	53                   	push   ebx
c00143d7:	e8 4f 55 ff ff       	call   c000992b <Virt::freeKernelVirtualPages(unsigned long)>
c00143dc:	83 c4 10             	add    esp,0x10
c00143df:	b0 01                	mov    al,0x1
c00143e1:	81 c4 2c 10 00 00    	add    esp,0x102c
c00143e7:	5b                   	pop    ebx
c00143e8:	5e                   	pop    esi
c00143e9:	5f                   	pop    edi
c00143ea:	5d                   	pop    ebp
c00143eb:	c3                   	ret    

c00143ec <Thr::loadProgramIntoMemory(Process*, char const*)>:
c00143ec:	55                   	push   ebp
c00143ed:	57                   	push   edi
c00143ee:	56                   	push   esi
c00143ef:	53                   	push   ebx
c00143f0:	83 ec 48             	sub    esp,0x48
c00143f3:	68 14 01 00 00       	push   0x114
c00143f8:	e8 b9 36 ff ff       	call   c0007ab6 <malloc>
c00143fd:	83 c4 0c             	add    esp,0xc
c0014400:	89 c6                	mov    esi,eax
c0014402:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0014406:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001440a:	50                   	push   eax
c001440b:	e8 32 73 ff ff       	call   c000b742 <File::File(char const*, Process*)>
c0014410:	58                   	pop    eax
c0014411:	5a                   	pop    edx
c0014412:	6a 01                	push   0x1
c0014414:	56                   	push   esi
c0014415:	e8 e4 73 ff ff       	call   c000b7fe <File::open(FileOpenMode)>
c001441a:	83 c4 10             	add    esp,0x10
c001441d:	85 c0                	test   eax,eax
c001441f:	0f 85 43 01 00 00    	jne    c0014568 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014425:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001442d:	83 ec 0c             	sub    esp,0xc
c0014430:	6a 34                	push   0x34
c0014432:	e8 7f 36 ff ff       	call   c0007ab6 <malloc>
c0014437:	89 c3                	mov    ebx,eax
c0014439:	58                   	pop    eax
c001443a:	8b 06                	mov    eax,DWORD PTR [esi]
c001443c:	8d 7c 24 38          	lea    edi,[esp+0x38]
c0014440:	57                   	push   edi
c0014441:	53                   	push   ebx
c0014442:	6a 00                	push   0x0
c0014444:	6a 34                	push   0x34
c0014446:	56                   	push   esi
c0014447:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001444a:	83 c4 20             	add    esp,0x20
c001444d:	85 c0                	test   eax,eax
c001444f:	0f 85 13 01 00 00    	jne    c0014568 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014455:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001445b:	0f 85 07 01 00 00    	jne    c0014568 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014461:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c0014464:	85 c0                	test   eax,eax
c0014466:	0f 84 fc 00 00 00    	je     c0014568 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c001446c:	31 d2                	xor    edx,edx
c001446e:	55                   	push   ebp
c001446f:	52                   	push   edx
c0014470:	50                   	push   eax
c0014471:	56                   	push   esi
c0014472:	e8 45 74 ff ff       	call   c000b8bc <File::seek(unsigned long long)>
c0014477:	83 c4 10             	add    esp,0x10
c001447a:	85 c0                	test   eax,eax
c001447c:	0f 85 e6 00 00 00    	jne    c0014568 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c0014482:	83 ec 0c             	sub    esp,0xc
c0014485:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0014488:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001448c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014490:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c0014494:	0f af c2             	imul   eax,edx
c0014497:	50                   	push   eax
c0014498:	e8 19 36 ff ff       	call   c0007ab6 <malloc>
c001449d:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001449f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00144a3:	89 3c 24             	mov    DWORD PTR [esp],edi
c00144a6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00144aa:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c00144ae:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c00144b2:	0f af c2             	imul   eax,edx
c00144b5:	99                   	cdq    
c00144b6:	52                   	push   edx
c00144b7:	50                   	push   eax
c00144b8:	56                   	push   esi
c00144b9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00144bc:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00144bf:	83 c4 20             	add    esp,0x20
c00144c2:	85 c0                	test   eax,eax
c00144c4:	0f 84 9e 00 00 00    	je     c0014568 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00144ca:	31 d2                	xor    edx,edx
c00144cc:	51                   	push   ecx
c00144cd:	52                   	push   edx
c00144ce:	50                   	push   eax
c00144cf:	56                   	push   esi
c00144d0:	e8 e7 73 ff ff       	call   c000b8bc <File::seek(unsigned long long)>
c00144d5:	83 c4 10             	add    esp,0x10
c00144d8:	85 c0                	test   eax,eax
c00144da:	0f 85 88 00 00 00    	jne    c0014568 <Thr::loadProgramIntoMemory(Process*, char const*)+0x17c>
c00144e0:	83 ec 0c             	sub    esp,0xc
c00144e3:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c00144e7:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c00144eb:	31 ed                	xor    ebp,ebp
c00144ed:	0f af c2             	imul   eax,edx
c00144f0:	50                   	push   eax
c00144f1:	e8 c0 35 ff ff       	call   c0007ab6 <malloc>
c00144f6:	8b 0e                	mov    ecx,DWORD PTR [esi]
c00144f8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00144fc:	89 3c 24             	mov    DWORD PTR [esp],edi
c00144ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014503:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c0014507:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001450b:	0f af c2             	imul   eax,edx
c001450e:	99                   	cdq    
c001450f:	52                   	push   edx
c0014510:	50                   	push   eax
c0014511:	56                   	push   esi
c0014512:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014515:	83 c4 20             	add    esp,0x20
c0014518:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014520:	0f b7 fd             	movzx  edi,bp
c0014523:	66 3b 6b 2c          	cmp    bp,WORD PTR [ebx+0x2c]
c0014527:	73 7d                	jae    c00145a6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1ba>
c0014529:	c1 e7 05             	shl    edi,0x5
c001452c:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c0014530:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c0014533:	75 6b                	jne    c00145a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c0014535:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c0014538:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001453c:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001453f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014543:	52                   	push   edx
c0014544:	31 d2                	xor    edx,edx
c0014546:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0014549:	52                   	push   edx
c001454a:	50                   	push   eax
c001454b:	56                   	push   esi
c001454c:	e8 6b 73 ff ff       	call   c000b8bc <File::seek(unsigned long long)>
c0014551:	83 c4 10             	add    esp,0x10
c0014554:	85 c0                	test   eax,eax
c0014556:	74 17                	je     c001456f <Thr::loadProgramIntoMemory(Process*, char const*)+0x183>
c0014558:	83 ec 0c             	sub    esp,0xc
c001455b:	68 b5 20 02 c0       	push   0xc00220b5
c0014560:	e8 e0 63 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014565:	83 c4 10             	add    esp,0x10
c0014568:	31 c0                	xor    eax,eax
c001456a:	e9 87 00 00 00       	jmp    c00145f6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20a>
c001456f:	83 ec 0c             	sub    esp,0xc
c0014572:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c0014575:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c0014578:	50                   	push   eax
c0014579:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001457d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014581:	56                   	push   esi
c0014582:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c0014586:	e8 d3 fb ff ff       	call   c001415e <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001458b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001458f:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c0014593:	83 c4 20             	add    esp,0x20
c0014596:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001459a:	73 04                	jae    c00145a0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b4>
c001459c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00145a0:	45                   	inc    ebp
c00145a1:	e9 7a ff ff ff       	jmp    c0014520 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c00145a6:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c00145aa:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00145ae:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00145b2:	89 91 0e 05 00 00    	mov    DWORD PTR [ecx+0x50e],edx
c00145b8:	83 ec 0c             	sub    esp,0xc
c00145bb:	8b 91 12 05 00 00    	mov    edx,DWORD PTR [ecx+0x512]
c00145c1:	25 00 f0 ff ff       	and    eax,0xfffff000
c00145c6:	05 00 10 00 00       	add    eax,0x1000
c00145cb:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00145ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00145d2:	e8 ef 34 ff ff       	call   c0007ac6 <free>
c00145d7:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00145da:	e8 e7 34 ff ff       	call   c0007ac6 <free>
c00145df:	58                   	pop    eax
c00145e0:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145e4:	e8 dd 34 ff ff       	call   c0007ac6 <free>
c00145e9:	89 34 24             	mov    DWORD PTR [esp],esi
c00145ec:	e8 6b 72 ff ff       	call   c000b85c <File::close()>
c00145f1:	83 c4 10             	add    esp,0x10
c00145f4:	b0 01                	mov    al,0x1
c00145f6:	83 c4 3c             	add    esp,0x3c
c00145f9:	5b                   	pop    ebx
c00145fa:	5e                   	pop    esi
c00145fb:	5f                   	pop    edi
c00145fc:	5d                   	pop    ebp
c00145fd:	c3                   	ret    

c00145fe <Thr::runtimeReferenceHelper()>:
c00145fe:	83 ec 18             	sub    esp,0x18
c0014601:	68 bd 20 02 c0       	push   0xc00220bd
c0014606:	e8 3a 63 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001460b:	fa                   	cli    
c001460c:	83 c4 10             	add    esp,0x10
c001460f:	eb fe                	jmp    c001460f <Thr::runtimeReferenceHelper()+0x11>

c0014611 <Thr::getAddressOfKernelSymbol(char const*)>:
c0014611:	57                   	push   edi
c0014612:	56                   	push   esi
c0014613:	53                   	push   ebx
c0014614:	31 db                	xor    ebx,ebx
c0014616:	39 1d a0 96 02 c0    	cmp    DWORD PTR ds:0xc00296a0,ebx
c001461c:	7e 3c                	jle    c001465a <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001461e:	8b 34 9d 20 96 02 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffd69e0]
c0014625:	31 ff                	xor    edi,edi
c0014627:	39 3c 9d 20 95 02 c0 	cmp    DWORD PTR [ebx*4-0x3ffd6ae0],edi
c001462e:	7e 27                	jle    c0014657 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c0014630:	50                   	push   eax
c0014631:	50                   	push   eax
c0014632:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014636:	8b 06                	mov    eax,DWORD PTR [esi]
c0014638:	03 04 9d a0 95 02 c0 	add    eax,DWORD PTR [ebx*4-0x3ffd6a60]
c001463f:	50                   	push   eax
c0014640:	e8 0b c1 fe ff       	call   c0000750 <strcmp>
c0014645:	83 c4 10             	add    esp,0x10
c0014648:	85 c0                	test   eax,eax
c001464a:	75 05                	jne    c0014651 <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001464c:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001464f:	eb 0b                	jmp    c001465c <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c0014651:	83 c6 10             	add    esi,0x10
c0014654:	47                   	inc    edi
c0014655:	eb d0                	jmp    c0014627 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c0014657:	43                   	inc    ebx
c0014658:	eb bc                	jmp    c0014616 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001465a:	31 c0                	xor    eax,eax
c001465c:	5b                   	pop    ebx
c001465d:	5e                   	pop    esi
c001465e:	5f                   	pop    edi
c001465f:	c3                   	ret    

c0014660 <Thr::loadKernelSymbolTable(char const*)>:
c0014660:	55                   	push   ebp
c0014661:	57                   	push   edi
c0014662:	56                   	push   esi
c0014663:	53                   	push   ebx
c0014664:	83 ec 68             	sub    esp,0x68
c0014667:	8b 35 f0 96 02 c0    	mov    esi,DWORD PTR ds:0xc00296f0
c001466d:	68 14 01 00 00       	push   0x114
c0014672:	e8 3f 34 ff ff       	call   c0007ab6 <malloc>
c0014677:	83 c4 0c             	add    esp,0xc
c001467a:	89 c3                	mov    ebx,eax
c001467c:	56                   	push   esi
c001467d:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0014681:	50                   	push   eax
c0014682:	e8 bb 70 ff ff       	call   c000b742 <File::File(char const*, Process*)>
c0014687:	5e                   	pop    esi
c0014688:	5f                   	pop    edi
c0014689:	6a 01                	push   0x1
c001468b:	53                   	push   ebx
c001468c:	e8 6d 71 ff ff       	call   c000b7fe <File::open(FileOpenMode)>
c0014691:	83 c4 10             	add    esp,0x10
c0014694:	85 c0                	test   eax,eax
c0014696:	74 0a                	je     c00146a2 <Thr::loadKernelSymbolTable(char const*)+0x42>
c0014698:	83 ec 0c             	sub    esp,0xc
c001469b:	68 df 20 02 c0       	push   0xc00220df
c00146a0:	eb 34                	jmp    c00146d6 <Thr::loadKernelSymbolTable(char const*)+0x76>
c00146a2:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c00146aa:	83 ec 0c             	sub    esp,0xc
c00146ad:	6a 34                	push   0x34
c00146af:	e8 02 34 ff ff       	call   c0007ab6 <malloc>
c00146b4:	59                   	pop    ecx
c00146b5:	89 c7                	mov    edi,eax
c00146b7:	8d 74 24 34          	lea    esi,[esp+0x34]
c00146bb:	8b 03                	mov    eax,DWORD PTR [ebx]
c00146bd:	56                   	push   esi
c00146be:	57                   	push   edi
c00146bf:	6a 00                	push   0x0
c00146c1:	6a 34                	push   0x34
c00146c3:	53                   	push   ebx
c00146c4:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00146c7:	83 c4 20             	add    esp,0x20
c00146ca:	85 c0                	test   eax,eax
c00146cc:	74 17                	je     c00146e5 <Thr::loadKernelSymbolTable(char const*)+0x85>
c00146ce:	83 ec 0c             	sub    esp,0xc
c00146d1:	68 f6 20 02 c0       	push   0xc00220f6
c00146d6:	e8 9e cb ff ff       	call   c0011279 <KePanic(char const*)>
c00146db:	83 c4 10             	add    esp,0x10
c00146de:	31 c0                	xor    eax,eax
c00146e0:	e9 31 02 00 00       	jmp    c0014916 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c00146e5:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00146eb:	75 e1                	jne    c00146ce <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00146ed:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00146f0:	85 c0                	test   eax,eax
c00146f2:	74 da                	je     c00146ce <Thr::loadKernelSymbolTable(char const*)+0x6e>
c00146f4:	52                   	push   edx
c00146f5:	31 d2                	xor    edx,edx
c00146f7:	52                   	push   edx
c00146f8:	50                   	push   eax
c00146f9:	53                   	push   ebx
c00146fa:	e8 bd 71 ff ff       	call   c000b8bc <File::seek(unsigned long long)>
c00146ff:	83 c4 10             	add    esp,0x10
c0014702:	85 c0                	test   eax,eax
c0014704:	75 c8                	jne    c00146ce <Thr::loadKernelSymbolTable(char const*)+0x6e>
c0014706:	83 ec 0c             	sub    esp,0xc
c0014709:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001470d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014711:	31 ed                	xor    ebp,ebp
c0014713:	0f af c2             	imul   eax,edx
c0014716:	50                   	push   eax
c0014717:	e8 9a 33 ff ff       	call   c0007ab6 <malloc>
c001471c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001471e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014722:	89 34 24             	mov    DWORD PTR [esp],esi
c0014725:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014729:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001472d:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014731:	0f af c2             	imul   eax,edx
c0014734:	99                   	cdq    
c0014735:	52                   	push   edx
c0014736:	50                   	push   eax
c0014737:	53                   	push   ebx
c0014738:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001473b:	83 c4 20             	add    esp,0x20
c001473e:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014746:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001474e:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014756:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001475e:	0f b7 f5             	movzx  esi,bp
c0014761:	66 3b 6f 30          	cmp    bp,WORD PTR [edi+0x30]
c0014765:	0f 83 a7 00 00 00    	jae    c0014812 <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001476b:	6b f6 28             	imul   esi,esi,0x28
c001476e:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014772:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014775:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014779:	50                   	push   eax
c001477a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001477e:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c0014782:	8b 16                	mov    edx,DWORD PTR [esi]
c0014784:	6b c0 28             	imul   eax,eax,0x28
c0014787:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001478b:	89 d0                	mov    eax,edx
c001478d:	31 d2                	xor    edx,edx
c001478f:	52                   	push   edx
c0014790:	50                   	push   eax
c0014791:	53                   	push   ebx
c0014792:	e8 25 71 ff ff       	call   c000b8bc <File::seek(unsigned long long)>
c0014797:	83 c4 0c             	add    esp,0xc
c001479a:	6a 20                	push   0x20
c001479c:	6a 00                	push   0x0
c001479e:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00147a2:	52                   	push   edx
c00147a3:	e8 48 bd fe ff       	call   c00004f0 <memset>
c00147a8:	58                   	pop    eax
c00147a9:	8b 03                	mov    eax,DWORD PTR [ebx]
c00147ab:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c00147af:	51                   	push   ecx
c00147b0:	8d 54 24 40          	lea    edx,[esp+0x40]
c00147b4:	52                   	push   edx
c00147b5:	6a 00                	push   0x0
c00147b7:	6a 1f                	push   0x1f
c00147b9:	53                   	push   ebx
c00147ba:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00147bd:	83 c4 18             	add    esp,0x18
c00147c0:	68 0d 21 02 c0       	push   0xc002210d
c00147c5:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c00147c9:	52                   	push   edx
c00147ca:	e8 81 bf fe ff       	call   c0000750 <strcmp>
c00147cf:	83 c4 10             	add    esp,0x10
c00147d2:	85 c0                	test   eax,eax
c00147d4:	75 0f                	jne    c00147e5 <Thr::loadKernelSymbolTable(char const*)+0x185>
c00147d6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00147d9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00147dd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00147e1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00147e5:	50                   	push   eax
c00147e6:	50                   	push   eax
c00147e7:	68 15 21 02 c0       	push   0xc0022115
c00147ec:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c00147f0:	50                   	push   eax
c00147f1:	e8 5a bf fe ff       	call   c0000750 <strcmp>
c00147f6:	83 c4 10             	add    esp,0x10
c00147f9:	85 c0                	test   eax,eax
c00147fb:	75 0f                	jne    c001480c <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c00147fd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014800:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014804:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014808:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001480c:	45                   	inc    ebp
c001480d:	e9 4c ff ff ff       	jmp    c001475e <Thr::loadKernelSymbolTable(char const*)+0xfe>
c0014812:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0014817:	75 10                	jne    c0014829 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c0014819:	83 ec 0c             	sub    esp,0xc
c001481c:	68 1d 21 02 c0       	push   0xc002211d
c0014821:	e8 53 ca ff ff       	call   c0011279 <KePanic(char const*)>
c0014826:	83 c4 10             	add    esp,0x10
c0014829:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001482e:	75 10                	jne    c0014840 <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c0014830:	83 ec 0c             	sub    esp,0xc
c0014833:	68 1d 21 02 c0       	push   0xc002211d
c0014838:	e8 3c ca ff ff       	call   c0011279 <KePanic(char const*)>
c001483d:	83 c4 10             	add    esp,0x10
c0014840:	31 d2                	xor    edx,edx
c0014842:	50                   	push   eax
c0014843:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014847:	52                   	push   edx
c0014848:	50                   	push   eax
c0014849:	53                   	push   ebx
c001484a:	e8 6d 70 ff ff       	call   c000b8bc <File::seek(unsigned long long)>
c001484f:	5a                   	pop    edx
c0014850:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014854:	e8 5d 32 ff ff       	call   c0007ab6 <malloc>
c0014859:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001485d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014861:	31 c9                	xor    ecx,ecx
c0014863:	5e                   	pop    esi
c0014864:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014866:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001486a:	55                   	push   ebp
c001486b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001486f:	51                   	push   ecx
c0014870:	52                   	push   edx
c0014871:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0014875:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c0014879:	53                   	push   ebx
c001487a:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001487d:	83 c4 14             	add    esp,0x14
c0014880:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014884:	e8 2d 32 ff ff       	call   c0007ab6 <malloc>
c0014889:	89 c6                	mov    esi,eax
c001488b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001488d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014890:	56                   	push   esi
c0014891:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0014895:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0014899:	51                   	push   ecx
c001489a:	52                   	push   edx
c001489b:	53                   	push   ebx
c001489c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001489f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00148a3:	8b 15 a0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296a0
c00148a9:	83 c4 1c             	add    esp,0x1c
c00148ac:	c1 e8 04             	shr    eax,0x4
c00148af:	89 04 95 20 95 02 c0 	mov    DWORD PTR [edx*4-0x3ffd6ae0],eax
c00148b6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00148ba:	31 d2                	xor    edx,edx
c00148bc:	52                   	push   edx
c00148bd:	50                   	push   eax
c00148be:	53                   	push   ebx
c00148bf:	e8 f8 6f ff ff       	call   c000b8bc <File::seek(unsigned long long)>
c00148c4:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c00148c6:	31 d2                	xor    edx,edx
c00148c8:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00148cb:	56                   	push   esi
c00148cc:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00148d0:	52                   	push   edx
c00148d1:	50                   	push   eax
c00148d2:	53                   	push   ebx
c00148d3:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c00148d6:	83 c4 14             	add    esp,0x14
c00148d9:	53                   	push   ebx
c00148da:	e8 7d 6f ff ff       	call   c000b85c <File::close()>
c00148df:	5d                   	pop    ebp
c00148e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00148e4:	e8 dd 31 ff ff       	call   c0007ac6 <free>
c00148e9:	89 3c 24             	mov    DWORD PTR [esp],edi
c00148ec:	e8 d5 31 ff ff       	call   c0007ac6 <free>
c00148f1:	a1 a0 96 02 c0       	mov    eax,ds:0xc00296a0
c00148f6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00148fa:	8d 50 01             	lea    edx,[eax+0x1]
c00148fd:	89 0c 85 20 96 02 c0 	mov    DWORD PTR [eax*4-0x3ffd69e0],ecx
c0014904:	89 34 85 a0 95 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6a60],esi
c001490b:	89 15 a0 96 02 c0    	mov    DWORD PTR ds:0xc00296a0,edx
c0014911:	83 c4 10             	add    esp,0x10
c0014914:	b0 01                	mov    al,0x1
c0014916:	83 c4 5c             	add    esp,0x5c
c0014919:	5b                   	pop    ebx
c001491a:	5e                   	pop    esi
c001491b:	5f                   	pop    edi
c001491c:	5d                   	pop    ebp
c001491d:	c3                   	ret    

c001491e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001491e:	55                   	push   ebp
c001491f:	57                   	push   edi
c0014920:	56                   	push   esi
c0014921:	53                   	push   ebx
c0014922:	81 ec 68 03 00 00    	sub    esp,0x368
c0014928:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001492f:	8b 1d f0 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296f0
c0014935:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0014939:	68 14 01 00 00       	push   0x114
c001493e:	e8 73 31 ff ff       	call   c0007ab6 <malloc>
c0014943:	83 c4 0c             	add    esp,0xc
c0014946:	89 c5                	mov    ebp,eax
c0014948:	53                   	push   ebx
c0014949:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c0014950:	50                   	push   eax
c0014951:	e8 ec 6d ff ff       	call   c000b742 <File::File(char const*, Process*)>
c0014956:	5e                   	pop    esi
c0014957:	5f                   	pop    edi
c0014958:	6a 01                	push   0x1
c001495a:	55                   	push   ebp
c001495b:	e8 9e 6e ff ff       	call   c000b7fe <File::open(FileOpenMode)>
c0014960:	83 c4 10             	add    esp,0x10
c0014963:	85 c0                	test   eax,eax
c0014965:	0f 85 aa 06 00 00    	jne    c0015015 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001496b:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0014973:	83 ec 0c             	sub    esp,0xc
c0014976:	6a 34                	push   0x34
c0014978:	e8 39 31 ff ff       	call   c0007ab6 <malloc>
c001497d:	5b                   	pop    ebx
c001497e:	89 c7                	mov    edi,eax
c0014980:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014984:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014987:	53                   	push   ebx
c0014988:	57                   	push   edi
c0014989:	6a 00                	push   0x0
c001498b:	6a 34                	push   0x34
c001498d:	55                   	push   ebp
c001498e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014991:	83 c4 20             	add    esp,0x20
c0014994:	85 c0                	test   eax,eax
c0014996:	0f 85 79 06 00 00    	jne    c0015015 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c001499c:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c00149a2:	0f 85 6d 06 00 00    	jne    c0015015 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00149a8:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c00149ab:	85 c0                	test   eax,eax
c00149ad:	0f 84 62 06 00 00    	je     c0015015 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00149b3:	31 d2                	xor    edx,edx
c00149b5:	51                   	push   ecx
c00149b6:	52                   	push   edx
c00149b7:	50                   	push   eax
c00149b8:	55                   	push   ebp
c00149b9:	e8 fe 6e ff ff       	call   c000b8bc <File::seek(unsigned long long)>
c00149be:	83 c4 10             	add    esp,0x10
c00149c1:	85 c0                	test   eax,eax
c00149c3:	0f 85 4c 06 00 00    	jne    c0015015 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c00149c9:	83 ec 0c             	sub    esp,0xc
c00149cc:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c00149cf:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00149d3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00149d7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00149db:	0f af c2             	imul   eax,edx
c00149de:	50                   	push   eax
c00149df:	e8 d2 30 ff ff       	call   c0007ab6 <malloc>
c00149e4:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c00149e7:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00149eb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00149ee:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00149f2:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c00149f6:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c00149fa:	0f af c2             	imul   eax,edx
c00149fd:	99                   	cdq    
c00149fe:	52                   	push   edx
c00149ff:	50                   	push   eax
c0014a00:	55                   	push   ebp
c0014a01:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a04:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c0014a07:	83 c4 20             	add    esp,0x20
c0014a0a:	85 c0                	test   eax,eax
c0014a0c:	0f 84 03 06 00 00    	je     c0015015 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014a12:	52                   	push   edx
c0014a13:	31 d2                	xor    edx,edx
c0014a15:	52                   	push   edx
c0014a16:	50                   	push   eax
c0014a17:	55                   	push   ebp
c0014a18:	e8 9f 6e ff ff       	call   c000b8bc <File::seek(unsigned long long)>
c0014a1d:	83 c4 10             	add    esp,0x10
c0014a20:	85 c0                	test   eax,eax
c0014a22:	0f 85 ed 05 00 00    	jne    c0015015 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014a28:	83 ec 0c             	sub    esp,0xc
c0014a2b:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014a2f:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014a33:	31 f6                	xor    esi,esi
c0014a35:	0f af c2             	imul   eax,edx
c0014a38:	50                   	push   eax
c0014a39:	e8 78 30 ff ff       	call   c0007ab6 <malloc>
c0014a3e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014a41:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014a45:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014a48:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014a4c:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c0014a50:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c0014a54:	0f af c2             	imul   eax,edx
c0014a57:	99                   	cdq    
c0014a58:	52                   	push   edx
c0014a59:	50                   	push   eax
c0014a5a:	55                   	push   ebp
c0014a5b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014a5e:	83 c4 20             	add    esp,0x20
c0014a61:	0f b7 de             	movzx  ebx,si
c0014a64:	66 3b 77 2c          	cmp    si,WORD PTR [edi+0x2c]
c0014a68:	0f 83 87 00 00 00    	jae    c0014af5 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c0014a6e:	c1 e3 05             	shl    ebx,0x5
c0014a71:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c0014a75:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c0014a78:	75 75                	jne    c0014aef <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c0014a7a:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0014a7d:	31 d2                	xor    edx,edx
c0014a7f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014a83:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0014a86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014a8a:	50                   	push   eax
c0014a8b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c0014a8e:	52                   	push   edx
c0014a8f:	50                   	push   eax
c0014a90:	55                   	push   ebp
c0014a91:	e8 26 6e ff ff       	call   c000b8bc <File::seek(unsigned long long)>
c0014a96:	83 c4 10             	add    esp,0x10
c0014a99:	85 c0                	test   eax,eax
c0014a9b:	0f 85 74 05 00 00    	jne    c0015015 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014aa1:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0014aa8:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014aab:	2b 44 24 24          	sub    eax,DWORD PTR [esp+0x24]
c0014aaf:	31 d2                	xor    edx,edx
c0014ab1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0014ab5:	83 ec 0c             	sub    esp,0xc
c0014ab8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0014abc:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014ac3:	50                   	push   eax
c0014ac4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014ac8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014acc:	52                   	push   edx
c0014acd:	50                   	push   eax
c0014ace:	55                   	push   ebp
c0014acf:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014ad2:	83 c4 1c             	add    esp,0x1c
c0014ad5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0014ad8:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c0014adb:	50                   	push   eax
c0014adc:	6a 00                	push   0x0
c0014ade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014ae2:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0014ae6:	50                   	push   eax
c0014ae7:	e8 04 ba fe ff       	call   c00004f0 <memset>
c0014aec:	83 c4 10             	add    esp,0x10
c0014aef:	46                   	inc    esi
c0014af0:	e9 6c ff ff ff       	jmp    c0014a61 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c0014af5:	53                   	push   ebx
c0014af6:	31 db                	xor    ebx,ebx
c0014af8:	68 00 01 00 00       	push   0x100
c0014afd:	6a 00                	push   0x0
c0014aff:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0014b03:	50                   	push   eax
c0014b04:	e8 e7 b9 fe ff       	call   c00004f0 <memset>
c0014b09:	83 c4 0c             	add    esp,0xc
c0014b0c:	68 00 01 00 00       	push   0x100
c0014b11:	6a 00                	push   0x0
c0014b13:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c0014b1a:	50                   	push   eax
c0014b1b:	e8 d0 b9 fe ff       	call   c00004f0 <memset>
c0014b20:	83 c4 10             	add    esp,0x10
c0014b23:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0014b2b:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c0014b33:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014b3b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014b43:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0014b4b:	0f b7 f3             	movzx  esi,bx
c0014b4e:	66 3b 5f 30          	cmp    bx,WORD PTR [edi+0x30]
c0014b52:	0f 83 2d 01 00 00    	jae    c0014c85 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c0014b58:	6b f6 28             	imul   esi,esi,0x28
c0014b5b:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0014b5f:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0014b62:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014b66:	52                   	push   edx
c0014b67:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014b6b:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c0014b6f:	8b 06                	mov    eax,DWORD PTR [esi]
c0014b71:	6b d2 28             	imul   edx,edx,0x28
c0014b74:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c0014b78:	31 d2                	xor    edx,edx
c0014b7a:	52                   	push   edx
c0014b7b:	50                   	push   eax
c0014b7c:	55                   	push   ebp
c0014b7d:	e8 3a 6d ff ff       	call   c000b8bc <File::seek(unsigned long long)>
c0014b82:	83 c4 0c             	add    esp,0xc
c0014b85:	6a 20                	push   0x20
c0014b87:	6a 00                	push   0x0
c0014b89:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014b90:	51                   	push   ecx
c0014b91:	e8 5a b9 fe ff       	call   c00004f0 <memset>
c0014b96:	59                   	pop    ecx
c0014b97:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014b9a:	8d 54 24 58          	lea    edx,[esp+0x58]
c0014b9e:	52                   	push   edx
c0014b9f:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c0014ba6:	51                   	push   ecx
c0014ba7:	6a 00                	push   0x0
c0014ba9:	6a 1f                	push   0x1f
c0014bab:	55                   	push   ebp
c0014bac:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0014baf:	83 c4 1c             	add    esp,0x1c
c0014bb2:	6a 09                	push   0x9
c0014bb4:	68 37 21 02 c0       	push   0xc0022137
c0014bb9:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c0014bc0:	51                   	push   ecx
c0014bc1:	e8 ba b7 fe ff       	call   c0000380 <memcmp>
c0014bc6:	83 c4 10             	add    esp,0x10
c0014bc9:	85 c0                	test   eax,eax
c0014bcb:	75 21                	jne    c0014bee <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c0014bcd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014bd1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014bd5:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c0014bd9:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014bdd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014be0:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014be7:	89 d0                	mov    eax,edx
c0014be9:	40                   	inc    eax
c0014bea:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014bee:	50                   	push   eax
c0014bef:	6a 09                	push   0x9
c0014bf1:	68 41 21 02 c0       	push   0xc0022141
c0014bf6:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014bfd:	50                   	push   eax
c0014bfe:	e8 7d b7 fe ff       	call   c0000380 <memcmp>
c0014c03:	83 c4 10             	add    esp,0x10
c0014c06:	85 c0                	test   eax,eax
c0014c08:	75 21                	jne    c0014c2b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c0014c0a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014c0e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0014c12:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0014c16:	89 4c 84 50          	mov    DWORD PTR [esp+eax*4+0x50],ecx
c0014c1a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014c1d:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c0014c24:	89 d0                	mov    eax,edx
c0014c26:	40                   	inc    eax
c0014c27:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014c2b:	50                   	push   eax
c0014c2c:	50                   	push   eax
c0014c2d:	68 0d 21 02 c0       	push   0xc002210d
c0014c32:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014c39:	50                   	push   eax
c0014c3a:	e8 11 bb fe ff       	call   c0000750 <strcmp>
c0014c3f:	83 c4 10             	add    esp,0x10
c0014c42:	85 c0                	test   eax,eax
c0014c44:	75 0f                	jne    c0014c55 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c0014c46:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014c49:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014c4d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014c51:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014c55:	50                   	push   eax
c0014c56:	50                   	push   eax
c0014c57:	68 15 21 02 c0       	push   0xc0022115
c0014c5c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014c63:	50                   	push   eax
c0014c64:	e8 e7 ba fe ff       	call   c0000750 <strcmp>
c0014c69:	83 c4 10             	add    esp,0x10
c0014c6c:	85 c0                	test   eax,eax
c0014c6e:	75 0f                	jne    c0014c7f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c0014c70:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0014c73:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014c77:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014c7b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0014c7f:	43                   	inc    ebx
c0014c80:	e9 c6 fe ff ff       	jmp    c0014b4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c0014c85:	31 d2                	xor    edx,edx
c0014c87:	50                   	push   eax
c0014c88:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c8c:	52                   	push   edx
c0014c8d:	50                   	push   eax
c0014c8e:	55                   	push   ebp
c0014c8f:	e8 28 6c ff ff       	call   c000b8bc <File::seek(unsigned long long)>
c0014c94:	58                   	pop    eax
c0014c95:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014c99:	e8 18 2e ff ff       	call   c0007ab6 <malloc>
c0014c9e:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014ca1:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0014ca5:	31 d2                	xor    edx,edx
c0014ca7:	58                   	pop    eax
c0014ca8:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c0014cac:	53                   	push   ebx
c0014cad:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0014cb1:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014cb5:	52                   	push   edx
c0014cb6:	50                   	push   eax
c0014cb7:	55                   	push   ebp
c0014cb8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014cbb:	83 c4 14             	add    esp,0x14
c0014cbe:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0014cc2:	e8 ef 2d ff ff       	call   c0007ab6 <malloc>
c0014cc7:	31 d2                	xor    edx,edx
c0014cc9:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014ccd:	83 c4 0c             	add    esp,0xc
c0014cd0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014cd4:	52                   	push   edx
c0014cd5:	50                   	push   eax
c0014cd6:	55                   	push   ebp
c0014cd7:	e8 e0 6b ff ff       	call   c000b8bc <File::seek(unsigned long long)>
c0014cdc:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014cdf:	31 d2                	xor    edx,edx
c0014ce1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0014ce4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014ce8:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0014cec:	52                   	push   edx
c0014ced:	50                   	push   eax
c0014cee:	55                   	push   ebp
c0014cef:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014cf2:	83 c4 20             	add    esp,0x20
c0014cf5:	0f b6 44 24 3b       	movzx  eax,BYTE PTR [esp+0x3b]
c0014cfa:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0014d02:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0014d06:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014d0a:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c0014d0e:	0f 84 05 03 00 00    	je     c0015019 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6fb>
c0014d14:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c0014d1b:	31 d2                	xor    edx,edx
c0014d1d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014d21:	c1 e8 03             	shr    eax,0x3
c0014d24:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0014d28:	51                   	push   ecx
c0014d29:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0014d2d:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c0014d31:	52                   	push   edx
c0014d32:	50                   	push   eax
c0014d33:	55                   	push   ebp
c0014d34:	e8 83 6b ff ff       	call   c000b8bc <File::seek(unsigned long long)>
c0014d39:	5b                   	pop    ebx
c0014d3a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014d3e:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c0014d45:	e8 6c 2d ff ff       	call   c0007ab6 <malloc>
c0014d4a:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c0014d4d:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0014d51:	31 d2                	xor    edx,edx
c0014d53:	5e                   	pop    esi
c0014d54:	8d 44 24 58          	lea    eax,[esp+0x58]
c0014d58:	50                   	push   eax
c0014d59:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014d5d:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014d61:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c0014d68:	52                   	push   edx
c0014d69:	50                   	push   eax
c0014d6a:	55                   	push   ebp
c0014d6b:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c0014d6e:	83 c4 20             	add    esp,0x20
c0014d71:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0014d79:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0014d7d:	39 5c 24 20          	cmp    DWORD PTR [esp+0x20],ebx
c0014d81:	0f 8d 76 02 00 00    	jge    c0014ffd <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6df>
c0014d87:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0014d8b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014d8f:	c6 44 24 3a 00       	mov    BYTE PTR [esp+0x3a],0x0
c0014d94:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c0014d97:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0014d9b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0014d9f:	8b 44 c8 04          	mov    eax,DWORD PTR [eax+ecx*8+0x4]
c0014da3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0014da7:	c1 e8 08             	shr    eax,0x8
c0014daa:	89 c6                	mov    esi,eax
c0014dac:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0014db0:	c1 e6 04             	shl    esi,0x4
c0014db3:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c0014db7:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0014dba:	85 db                	test   ebx,ebx
c0014dbc:	0f 85 b3 00 00 00    	jne    c0014e75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014dc2:	83 ec 0c             	sub    esp,0xc
c0014dc5:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014dc9:	03 06                	add    eax,DWORD PTR [esi]
c0014dcb:	50                   	push   eax
c0014dcc:	e8 40 f8 ff ff       	call   c0014611 <Thr::getAddressOfKernelSymbol(char const*)>
c0014dd1:	83 c4 10             	add    esp,0x10
c0014dd4:	89 c3                	mov    ebx,eax
c0014dd6:	c6 44 24 3a 01       	mov    BYTE PTR [esp+0x3a],0x1
c0014ddb:	85 c0                	test   eax,eax
c0014ddd:	0f 85 92 00 00 00    	jne    c0014e75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014de3:	83 ec 0c             	sub    esp,0xc
c0014de6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0014dea:	03 06                	add    eax,DWORD PTR [esi]
c0014dec:	50                   	push   eax
c0014ded:	e8 72 c6 ff ff       	call   c0011464 <KeResolveCompatibilitySymbol(char*)>
c0014df2:	83 c4 10             	add    esp,0x10
c0014df5:	89 c3                	mov    ebx,eax
c0014df7:	85 c0                	test   eax,eax
c0014df9:	75 7a                	jne    c0014e75 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x557>
c0014dfb:	51                   	push   ecx
c0014dfc:	51                   	push   ecx
c0014dfd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e01:	03 06                	add    eax,DWORD PTR [esi]
c0014e03:	50                   	push   eax
c0014e04:	68 4b 21 02 c0       	push   0xc002214b
c0014e09:	e8 37 5b ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014e0e:	58                   	pop    eax
c0014e0f:	5a                   	pop    edx
c0014e10:	68 65 21 02 c0       	push   0xc0022165
c0014e15:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014e1c:	50                   	push   eax
c0014e1d:	e8 1e b8 fe ff       	call   c0000640 <strcpy>
c0014e22:	59                   	pop    ecx
c0014e23:	58                   	pop    eax
c0014e24:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0014e28:	03 06                	add    eax,DWORD PTR [esi]
c0014e2a:	50                   	push   eax
c0014e2b:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014e32:	50                   	push   eax
c0014e33:	e8 08 ba fe ff       	call   c0000840 <strcat>
c0014e38:	58                   	pop    eax
c0014e39:	5a                   	pop    edx
c0014e3a:	68 fb 21 02 c0       	push   0xc00221fb
c0014e3f:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014e46:	50                   	push   eax
c0014e47:	e8 f4 b9 fe ff       	call   c0000840 <strcat>
c0014e4c:	83 c4 10             	add    esp,0x10
c0014e4f:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014e54:	0f 84 5d 01 00 00    	je     c0014fb7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014e5a:	83 ec 0c             	sub    esp,0xc
c0014e5d:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c0014e64:	50                   	push   eax
c0014e65:	e8 0f c4 ff ff       	call   c0011279 <KePanic(char const*)>
c0014e6a:	83 c4 10             	add    esp,0x10
c0014e6d:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c0014e71:	88 44 24 3a          	mov    BYTE PTR [esp+0x3a],al
c0014e75:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c0014e7a:	83 f8 01             	cmp    eax,0x1
c0014e7d:	0f 85 8f 00 00 00    	jne    c0014f12 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5f4>
c0014e83:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c0014e8a:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0014e8e:	2b 4c 24 24          	sub    ecx,DWORD PTR [esp+0x24]
c0014e92:	01 ce                	add    esi,ecx
c0014e94:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014e9c:	0f 94 c0             	sete   al
c0014e9f:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014ea7:	0f 94 c2             	sete   dl
c0014eaa:	09 c2                	or     edx,eax
c0014eac:	8b 06                	mov    eax,DWORD PTR [esi]
c0014eae:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014eb3:	0f b6 d2             	movzx  edx,dl
c0014eb6:	74 41                	je     c0014ef9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5db>
c0014eb8:	8d 0c 03             	lea    ecx,[ebx+eax*1]
c0014ebb:	85 d2                	test   edx,edx
c0014ebd:	75 15                	jne    c0014ed4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b6>
c0014ebf:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014ec3:	66 83 f8 0c          	cmp    ax,0xc
c0014ec7:	76 05                	jbe    c0014ece <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5b0>
c0014ec9:	b8 0c 00 00 00       	mov    eax,0xc
c0014ece:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014ed2:	76 37                	jbe    c0014f0b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014ed4:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0014ed8:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014edd:	0f 84 d4 00 00 00    	je     c0014fb7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014ee3:	83 ec 0c             	sub    esp,0xc
c0014ee6:	68 7c 21 02 c0       	push   0xc002217c
c0014eeb:	e8 89 c3 ff ff       	call   c0011279 <KePanic(char const*)>
c0014ef0:	83 c4 10             	add    esp,0x10
c0014ef3:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0014ef7:	eb 12                	jmp    c0014f0b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014ef9:	01 c1                	add    ecx,eax
c0014efb:	85 d2                	test   edx,edx
c0014efd:	75 0c                	jne    c0014f0b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014eff:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c0014f03:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014f07:	77 02                	ja     c0014f0b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ed>
c0014f09:	01 d9                	add    ecx,ebx
c0014f0b:	89 0e                	mov    DWORD PTR [esi],ecx
c0014f0d:	e9 e2 00 00 00       	jmp    c0014ff4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014f12:	83 f8 02             	cmp    eax,0x2
c0014f15:	75 77                	jne    c0014f8e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x670>
c0014f17:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c0014f1e:	2b 74 24 24          	sub    esi,DWORD PTR [esp+0x24]
c0014f22:	03 74 24 28          	add    esi,DWORD PTR [esp+0x28]
c0014f26:	81 7c 24 18 01 04 00 00 	cmp    DWORD PTR [esp+0x18],0x401
c0014f2e:	74 21                	je     c0014f51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014f30:	81 7c 24 18 01 01 00 00 	cmp    DWORD PTR [esp+0x18],0x101
c0014f38:	74 17                	je     c0014f51 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x633>
c0014f3a:	0f b7 57 30          	movzx  edx,WORD PTR [edi+0x30]
c0014f3e:	b8 0a 00 00 00       	mov    eax,0xa
c0014f43:	83 fa 0e             	cmp    edx,0xe
c0014f46:	77 03                	ja     c0014f4b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x62d>
c0014f48:	8d 42 fc             	lea    eax,[edx-0x4]
c0014f4b:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0014f4f:	76 17                	jbe    c0014f68 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x64a>
c0014f51:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014f56:	74 5f                	je     c0014fb7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014f58:	83 ec 0c             	sub    esp,0xc
c0014f5b:	68 98 21 02 c0       	push   0xc0022198
c0014f60:	e8 14 c3 ff ff       	call   c0011279 <KePanic(char const*)>
c0014f65:	83 c4 10             	add    esp,0x10
c0014f68:	8b 06                	mov    eax,DWORD PTR [esi]
c0014f6a:	80 7c 24 3a 00       	cmp    BYTE PTR [esp+0x3a],0x0
c0014f6f:	74 13                	je     c0014f84 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x666>
c0014f71:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0014f75:	2b 94 24 74 03 00 00 	sub    edx,DWORD PTR [esp+0x374]
c0014f7c:	2b 54 24 28          	sub    edx,DWORD PTR [esp+0x28]
c0014f80:	01 d0                	add    eax,edx
c0014f82:	eb 04                	jmp    c0014f88 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c0014f84:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0014f88:	01 c3                	add    ebx,eax
c0014f8a:	89 1e                	mov    DWORD PTR [esi],ebx
c0014f8c:	eb 66                	jmp    c0014ff4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014f8e:	52                   	push   edx
c0014f8f:	52                   	push   edx
c0014f90:	50                   	push   eax
c0014f91:	68 b4 21 02 c0       	push   0xc00221b4
c0014f96:	e8 aa 59 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0014f9b:	83 c4 10             	add    esp,0x10
c0014f9e:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0014fa3:	74 12                	je     c0014fb7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x699>
c0014fa5:	83 ec 0c             	sub    esp,0xc
c0014fa8:	68 bf 21 02 c0       	push   0xc00221bf
c0014fad:	e8 c7 c2 ff ff       	call   c0011279 <KePanic(char const*)>
c0014fb2:	83 c4 10             	add    esp,0x10
c0014fb5:	eb 3d                	jmp    c0014ff4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d6>
c0014fb7:	83 ec 0c             	sub    esp,0xc
c0014fba:	55                   	push   ebp
c0014fbb:	e8 9c 68 ff ff       	call   c000b85c <File::close()>
c0014fc0:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0014fc3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0014fc6:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0014fc9:	59                   	pop    ecx
c0014fca:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0014fce:	e8 f3 2a ff ff       	call   c0007ac6 <free>
c0014fd3:	5b                   	pop    ebx
c0014fd4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0014fd8:	e8 e9 2a ff ff       	call   c0007ac6 <free>
c0014fdd:	89 3c 24             	mov    DWORD PTR [esp],edi
c0014fe0:	e8 e1 2a ff ff       	call   c0007ac6 <free>
c0014fe5:	5e                   	pop    esi
c0014fe6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014fea:	e8 d7 2a ff ff       	call   c0007ac6 <free>
c0014fef:	83 c4 10             	add    esp,0x10
c0014ff2:	eb 21                	jmp    c0015015 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f7>
c0014ff4:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c0014ff8:	e9 7c fd ff ff       	jmp    c0014d79 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x45b>
c0014ffd:	83 ec 0c             	sub    esp,0xc
c0015000:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015004:	e8 bd 2a ff ff       	call   c0007ac6 <free>
c0015009:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001500d:	83 c4 10             	add    esp,0x10
c0015010:	e9 f1 fc ff ff       	jmp    c0014d06 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3e8>
c0015015:	31 c0                	xor    eax,eax
c0015017:	eb 33                	jmp    c001504c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72e>
c0015019:	83 ec 0c             	sub    esp,0xc
c001501c:	55                   	push   ebp
c001501d:	e8 3a 68 ff ff       	call   c000b85c <File::close()>
c0015022:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0015025:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015028:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001502b:	58                   	pop    eax
c001502c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015030:	e8 91 2a ff ff       	call   c0007ac6 <free>
c0015035:	89 3c 24             	mov    DWORD PTR [esp],edi
c0015038:	e8 89 2a ff ff       	call   c0007ac6 <free>
c001503d:	5a                   	pop    edx
c001503e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015042:	e8 7f 2a ff ff       	call   c0007ac6 <free>
c0015047:	83 c4 10             	add    esp,0x10
c001504a:	b0 01                	mov    al,0x1
c001504c:	81 c4 5c 03 00 00    	add    esp,0x35c
c0015052:	5b                   	pop    ebx
c0015053:	5e                   	pop    esi
c0015054:	5f                   	pop    edi
c0015055:	5d                   	pop    ebp
c0015056:	c3                   	ret    

c0015057 <Thr::getDriverBaseFromAddress(unsigned long)>:
c0015057:	56                   	push   esi
c0015058:	31 d2                	xor    edx,edx
c001505a:	53                   	push   ebx
c001505b:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0015061:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0015065:	39 d3                	cmp    ebx,edx
c0015067:	7e 1b                	jle    c0015084 <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c0015069:	8b 04 95 20 91 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd6ee0]
c0015070:	39 c8                	cmp    eax,ecx
c0015072:	77 0d                	ja     c0015081 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c0015074:	8b 34 95 20 8f 02 c0 	mov    esi,DWORD PTR [edx*4-0x3ffd70e0]
c001507b:	01 c6                	add    esi,eax
c001507d:	39 ce                	cmp    esi,ecx
c001507f:	77 05                	ja     c0015086 <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c0015081:	42                   	inc    edx
c0015082:	eb e1                	jmp    c0015065 <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c0015084:	31 c0                	xor    eax,eax
c0015086:	5b                   	pop    ebx
c0015087:	5e                   	pop    esi
c0015088:	c3                   	ret    

c0015089 <Thr::getDriverNameFromAddress(unsigned long)>:
c0015089:	53                   	push   ebx
c001508a:	31 c0                	xor    eax,eax
c001508c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0015090:	8b 1d 00 8f 02 c0    	mov    ebx,DWORD PTR ds:0xc0028f00
c0015096:	39 c3                	cmp    ebx,eax
c0015098:	7e 22                	jle    c00150bc <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001509a:	8b 14 85 20 91 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd6ee0]
c00150a1:	39 ca                	cmp    edx,ecx
c00150a3:	77 14                	ja     c00150b9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00150a5:	03 14 85 20 8f 02 c0 	add    edx,DWORD PTR [eax*4-0x3ffd70e0]
c00150ac:	39 ca                	cmp    edx,ecx
c00150ae:	76 09                	jbe    c00150b9 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c00150b0:	8b 04 85 20 93 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6ce0]
c00150b7:	eb 05                	jmp    c00150be <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c00150b9:	40                   	inc    eax
c00150ba:	eb da                	jmp    c0015096 <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c00150bc:	31 c0                	xor    eax,eax
c00150be:	5b                   	pop    ebx
c00150bf:	c3                   	ret    

c00150c0 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c00150c0:	53                   	push   ebx
c00150c1:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c00150c5:	53                   	push   ebx
c00150c6:	e8 8c ff ff ff       	call   c0015057 <Thr::getDriverBaseFromAddress(unsigned long)>
c00150cb:	5a                   	pop    edx
c00150cc:	31 d2                	xor    edx,edx
c00150ce:	85 c0                	test   eax,eax
c00150d0:	74 04                	je     c00150d6 <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c00150d2:	89 da                	mov    edx,ebx
c00150d4:	29 c2                	sub    edx,eax
c00150d6:	89 d0                	mov    eax,edx
c00150d8:	5b                   	pop    ebx
c00150d9:	c3                   	ret    

c00150da <Thr::loadDLL(char const*, bool)>:
c00150da:	55                   	push   ebp
c00150db:	57                   	push   edi
c00150dc:	56                   	push   esi
c00150dd:	53                   	push   ebx
c00150de:	81 ec 34 01 00 00    	sub    esp,0x134
c00150e4:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c00150eb:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c00150f2:	56                   	push   esi
c00150f3:	68 d7 21 02 c0       	push   0xc00221d7
c00150f8:	e8 48 58 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00150fd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0015104:	e8 ad 29 ff ff       	call   c0007ab6 <malloc>
c0015109:	83 c4 0c             	add    esp,0xc
c001510c:	89 c3                	mov    ebx,eax
c001510e:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0015114:	56                   	push   esi
c0015115:	50                   	push   eax
c0015116:	e8 27 66 ff ff       	call   c000b742 <File::File(char const*, Process*)>
c001511b:	83 c4 10             	add    esp,0x10
c001511e:	85 db                	test   ebx,ebx
c0015120:	75 3c                	jne    c001515e <Thr::loadDLL(char const*, bool)+0x84>
c0015122:	89 f8                	mov    eax,edi
c0015124:	84 c0                	test   al,al
c0015126:	0f 84 d2 01 00 00    	je     c00152fe <Thr::loadDLL(char const*, bool)+0x224>
c001512c:	55                   	push   ebp
c001512d:	55                   	push   ebp
c001512e:	68 e8 21 02 c0       	push   0xc00221e8
c0015133:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c0015137:	55                   	push   ebp
c0015138:	e8 03 b5 fe ff       	call   c0000640 <strcpy>
c001513d:	58                   	pop    eax
c001513e:	5a                   	pop    edx
c001513f:	56                   	push   esi
c0015140:	55                   	push   ebp
c0015141:	e8 fa b6 fe ff       	call   c0000840 <strcat>
c0015146:	59                   	pop    ecx
c0015147:	58                   	pop    eax
c0015148:	68 fb 21 02 c0       	push   0xc00221fb
c001514d:	55                   	push   ebp
c001514e:	e8 ed b6 fe ff       	call   c0000840 <strcat>
c0015153:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0015156:	e8 1e c1 ff ff       	call   c0011279 <KePanic(char const*)>
c001515b:	83 c4 10             	add    esp,0x10
c001515e:	51                   	push   ecx
c001515f:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c0015163:	50                   	push   eax
c0015164:	8d 44 24 20          	lea    eax,[esp+0x20]
c0015168:	50                   	push   eax
c0015169:	53                   	push   ebx
c001516a:	e8 91 69 ff ff       	call   c000bb00 <File::stat(unsigned long long*, bool*)>
c001516f:	83 c4 10             	add    esp,0x10
c0015172:	85 db                	test   ebx,ebx
c0015174:	74 0c                	je     c0015182 <Thr::loadDLL(char const*, bool)+0xa8>
c0015176:	83 ec 0c             	sub    esp,0xc
c0015179:	8b 03                	mov    eax,DWORD PTR [ebx]
c001517b:	53                   	push   ebx
c001517c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001517f:	83 c4 10             	add    esp,0x10
c0015182:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c0015187:	75 0a                	jne    c0015193 <Thr::loadDLL(char const*, bool)+0xb9>
c0015189:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001518d:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c0015191:	75 3c                	jne    c00151cf <Thr::loadDLL(char const*, bool)+0xf5>
c0015193:	89 f8                	mov    eax,edi
c0015195:	84 c0                	test   al,al
c0015197:	0f 84 49 01 00 00    	je     c00152e6 <Thr::loadDLL(char const*, bool)+0x20c>
c001519d:	51                   	push   ecx
c001519e:	51                   	push   ecx
c001519f:	68 e8 21 02 c0       	push   0xc00221e8
c00151a4:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c00151a8:	53                   	push   ebx
c00151a9:	e8 92 b4 fe ff       	call   c0000640 <strcpy>
c00151ae:	5d                   	pop    ebp
c00151af:	58                   	pop    eax
c00151b0:	56                   	push   esi
c00151b1:	53                   	push   ebx
c00151b2:	e8 89 b6 fe ff       	call   c0000840 <strcat>
c00151b7:	58                   	pop    eax
c00151b8:	5a                   	pop    edx
c00151b9:	68 fb 21 02 c0       	push   0xc00221fb
c00151be:	53                   	push   ebx
c00151bf:	e8 7c b6 fe ff       	call   c0000840 <strcat>
c00151c4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151c7:	e8 ad c0 ff ff       	call   c0011279 <KePanic(char const*)>
c00151cc:	83 c4 10             	add    esp,0x10
c00151cf:	52                   	push   edx
c00151d0:	6a 03                	push   0x3
c00151d2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00151d6:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00151da:	05 ff 0f 00 00       	add    eax,0xfff
c00151df:	83 d2 00             	adc    edx,0x0
c00151e2:	0f ac d0 0c          	shrd   eax,edx,0xc
c00151e6:	50                   	push   eax
c00151e7:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c00151ed:	e8 32 4c ff ff       	call   c0009e24 <VAS::allocatePages(int, int)>
c00151f2:	59                   	pop    ecx
c00151f3:	89 c3                	mov    ebx,eax
c00151f5:	5d                   	pop    ebp
c00151f6:	50                   	push   eax
c00151f7:	68 32 08 02 c0       	push   0xc0020832
c00151fc:	e8 44 57 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015201:	89 34 24             	mov    DWORD PTR [esp],esi
c0015204:	e8 67 b3 fe ff       	call   c0000570 <strlen>
c0015209:	8b 2d 00 8f 02 c0    	mov    ebp,DWORD PTR ds:0xc0028f00
c001520f:	40                   	inc    eax
c0015210:	89 04 24             	mov    DWORD PTR [esp],eax
c0015213:	e8 9e 28 ff ff       	call   c0007ab6 <malloc>
c0015218:	89 04 ad 20 93 02 c0 	mov    DWORD PTR [ebp*4-0x3ffd6ce0],eax
c001521f:	58                   	pop    eax
c0015220:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c0015225:	5a                   	pop    edx
c0015226:	56                   	push   esi
c0015227:	ff 34 85 20 93 02 c0 	push   DWORD PTR [eax*4-0x3ffd6ce0]
c001522e:	e8 0d b4 fe ff       	call   c0000640 <strcpy>
c0015233:	a1 00 8f 02 c0       	mov    eax,ds:0xc0028f00
c0015238:	8d 50 01             	lea    edx,[eax+0x1]
c001523b:	89 1c 85 20 91 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6ee0],ebx
c0015242:	89 15 00 8f 02 c0    	mov    DWORD PTR ds:0xc0028f00,edx
c0015248:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001524c:	83 c4 0c             	add    esp,0xc
c001524f:	89 14 85 20 8f 02 c0 	mov    DWORD PTR [eax*4-0x3ffd70e0],edx
c0015256:	6a 01                	push   0x1
c0015258:	53                   	push   ebx
c0015259:	56                   	push   esi
c001525a:	e8 bf f6 ff ff       	call   c001491e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001525f:	83 c4 10             	add    esp,0x10
c0015262:	0f b6 c0             	movzx  eax,al
c0015265:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0015269:	85 c0                	test   eax,eax
c001526b:	0f 85 89 00 00 00    	jne    c00152fa <Thr::loadDLL(char const*, bool)+0x220>
c0015271:	89 f8                	mov    eax,edi
c0015273:	84 c0                	test   al,al
c0015275:	74 73                	je     c00152ea <Thr::loadDLL(char const*, bool)+0x210>
c0015277:	83 ec 0c             	sub    esp,0xc
c001527a:	68 fd 21 02 c0       	push   0xc00221fd
c001527f:	e8 f5 bf ff ff       	call   c0011279 <KePanic(char const*)>
c0015284:	83 c4 10             	add    esp,0x10
c0015287:	eb 61                	jmp    c00152ea <Thr::loadDLL(char const*, bool)+0x210>
c0015289:	50                   	push   eax
c001528a:	50                   	push   eax
c001528b:	89 e8                	mov    eax,ebp
c001528d:	c1 e0 0c             	shl    eax,0xc
c0015290:	01 d8                	add    eax,ebx
c0015292:	50                   	push   eax
c0015293:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c0015299:	e8 6e 46 ff ff       	call   c000990c <VAS::getPageTableEntry(unsigned long)>
c001529e:	83 c4 10             	add    esp,0x10
c00152a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00152a3:	a8 60                	test   al,0x60
c00152a5:	75 11                	jne    c00152b8 <Thr::loadDLL(char const*, bool)+0x1de>
c00152a7:	83 ec 0c             	sub    esp,0xc
c00152aa:	25 00 f0 ff ff       	and    eax,0xfffff000
c00152af:	50                   	push   eax
c00152b0:	e8 a1 2a ff ff       	call   c0007d56 <Phys::freePage(unsigned long)>
c00152b5:	83 c4 10             	add    esp,0x10
c00152b8:	45                   	inc    ebp
c00152b9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00152bd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00152c1:	05 ff 0f 00 00       	add    eax,0xfff
c00152c6:	bf 00 00 00 00       	mov    edi,0x0
c00152cb:	83 d2 00             	adc    edx,0x0
c00152ce:	0f ac d0 0c          	shrd   eax,edx,0xc
c00152d2:	c1 ea 0c             	shr    edx,0xc
c00152d5:	39 c5                	cmp    ebp,eax
c00152d7:	89 d1                	mov    ecx,edx
c00152d9:	89 f8                	mov    eax,edi
c00152db:	19 c8                	sbb    eax,ecx
c00152dd:	72 aa                	jb     c0015289 <Thr::loadDLL(char const*, bool)+0x1af>
c00152df:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00152e4:	75 18                	jne    c00152fe <Thr::loadDLL(char const*, bool)+0x224>
c00152e6:	31 db                	xor    ebx,ebx
c00152e8:	eb 14                	jmp    c00152fe <Thr::loadDLL(char const*, bool)+0x224>
c00152ea:	83 ec 0c             	sub    esp,0xc
c00152ed:	68 1c 22 02 c0       	push   0xc002221c
c00152f2:	e8 82 bf ff ff       	call   c0011279 <KePanic(char const*)>
c00152f7:	83 c4 10             	add    esp,0x10
c00152fa:	31 ed                	xor    ebp,ebp
c00152fc:	eb bb                	jmp    c00152b9 <Thr::loadDLL(char const*, bool)+0x1df>
c00152fe:	81 c4 2c 01 00 00    	add    esp,0x12c
c0015304:	89 d8                	mov    eax,ebx
c0015306:	5b                   	pop    ebx
c0015307:	5e                   	pop    esi
c0015308:	5f                   	pop    edi
c0015309:	5d                   	pop    ebp
c001530a:	c3                   	ret    

c001530b <Thr::executeDLL(unsigned long, void*)>:
c001530b:	56                   	push   esi
c001530c:	53                   	push   ebx
c001530d:	52                   	push   edx
c001530e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0015312:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0015316:	85 db                	test   ebx,ebx
c0015318:	75 10                	jne    c001532a <Thr::executeDLL(unsigned long, void*)+0x1f>
c001531a:	83 ec 0c             	sub    esp,0xc
c001531d:	68 38 22 02 c0       	push   0xc0022238
c0015322:	e8 52 bf ff ff       	call   c0011279 <KePanic(char const*)>
c0015327:	83 c4 10             	add    esp,0x10
c001532a:	50                   	push   eax
c001532b:	50                   	push   eax
c001532c:	53                   	push   ebx
c001532d:	68 62 22 02 c0       	push   0xc0022262
c0015332:	e8 0e 56 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015337:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001533b:	89 d8                	mov    eax,ebx
c001533d:	83 c4 14             	add    esp,0x14
c0015340:	5b                   	pop    ebx
c0015341:	5e                   	pop    esi
c0015342:	ff e0                	jmp    eax

c0015344 <userModeEntryPoint(void*)>:
c0015344:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015349:	83 e8 01             	sub    eax,0x1
c001534c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015351:	75 01                	jne    c0015354 <userModeEntryPoint(void*)+0x10>
c0015353:	fb                   	sti    
c0015354:	fb                   	sti    
c0015355:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001535a:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001535d:	8b 80 0e 05 00 00    	mov    eax,DWORD PTR [eax+0x50e]
c0015363:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015367:	e9 d3 ae fe ff       	jmp    c000023f <goToUsermode>

c001536c <changeTSS>:
c001536c:	83 ec 14             	sub    esp,0x14
c001536f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015374:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0015377:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001537c:	c1 e2 15             	shl    edx,0x15
c001537f:	29 d0                	sub    eax,edx
c0015381:	50                   	push   eax
c0015382:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0015387:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001538d:	05 7c 11 00 00       	add    eax,0x117c
c0015392:	50                   	push   eax
c0015393:	e8 bc 3b ff ff       	call   c0008f54 <TSS::setESP(unsigned long)>
c0015398:	83 c4 1c             	add    esp,0x1c
c001539b:	c3                   	ret    

c001539c <switchToThread(ThreadControlBlock*)>:
c001539c:	57                   	push   edi
c001539d:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c00153a3:	56                   	push   esi
c00153a4:	85 c9                	test   ecx,ecx
c00153a6:	53                   	push   ebx
c00153a7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00153ab:	0f 85 8b 00 00 00    	jne    c001543c <switchToThread(ThreadControlBlock*)+0xa0>
c00153b1:	0f b6 53 40          	movzx  edx,BYTE PTR [ebx+0x40]
c00153b5:	81 fa ff 00 00 00    	cmp    edx,0xff
c00153bb:	74 7b                	je     c0015438 <switchToThread(ThreadControlBlock*)+0x9c>
c00153bd:	b8 00 04 00 00       	mov    eax,0x400
c00153c2:	29 d0                	sub    eax,edx
c00153c4:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00153c7:	d1 f8                	sar    eax,1
c00153c9:	01 d0                	add    eax,edx
c00153cb:	90                   	nop
c00153cc:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00153cf:	e8 1e 28 00 00       	call   c0017bf2 <HalQueryPerformanceCounter()>
c00153d4:	a3 08 97 02 c0       	mov    ds:0xc0029708,eax
c00153d9:	89 15 0c 97 02 c0    	mov    DWORD PTR ds:0xc002970c,edx
c00153df:	89 c6                	mov    esi,eax
c00153e1:	89 d7                	mov    edi,edx
c00153e3:	2b 35 f8 96 02 c0    	sub    esi,DWORD PTR ds:0xc00296f8
c00153e9:	a3 f8 96 02 c0       	mov    ds:0xc00296f8,eax
c00153ee:	1b 3d fc 96 02 c0    	sbb    edi,DWORD PTR ds:0xc00296fc
c00153f4:	89 35 00 97 02 c0    	mov    DWORD PTR ds:0xc0029700,esi
c00153fa:	89 3d 04 97 02 c0    	mov    DWORD PTR ds:0xc0029704,edi
c0015400:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015406:	89 15 fc 96 02 c0    	mov    DWORD PTR ds:0xc00296fc,edx
c001540c:	8b 41 10             	mov    eax,DWORD PTR [ecx+0x10]
c001540f:	8b 51 14             	mov    edx,DWORD PTR [ecx+0x14]
c0015412:	01 c6                	add    esi,eax
c0015414:	11 d7                	adc    edi,edx
c0015416:	89 71 10             	mov    DWORD PTR [ecx+0x10],esi
c0015419:	83 ec 0c             	sub    esp,0xc
c001541c:	89 79 14             	mov    DWORD PTR [ecx+0x14],edi
c001541f:	53                   	push   ebx
c0015420:	e8 52 ae fe ff       	call   c0000277 <switchToThreadASM>
c0015425:	0f 20 c0             	mov    eax,cr0
c0015428:	83 c8 08             	or     eax,0x8
c001542b:	0f 22 c0             	mov    cr0,eax
c001542e:	83 c4 10             	add    esp,0x10
c0015431:	5b                   	pop    ebx
c0015432:	5e                   	pop    esi
c0015433:	5f                   	pop    edi
c0015434:	c3                   	ret    
c0015435:	8d 76 00             	lea    esi,[esi+0x0]
c0015438:	31 c0                	xor    eax,eax
c001543a:	eb 90                	jmp    c00153cc <switchToThread(ThreadControlBlock*)+0x30>
c001543c:	5b                   	pop    ebx
c001543d:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015447:	5e                   	pop    esi
c0015448:	5f                   	pop    edi
c0015449:	c3                   	ret    
c001544a:	66 90                	xchg   ax,ax

c001544c <Process::addArgs(char**)>:
c001544c:	57                   	push   edi
c001544d:	56                   	push   esi
c001544e:	53                   	push   ebx
c001544f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015453:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0015457:	c7 86 16 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x516],0x0
c0015461:	85 ff                	test   edi,edi
c0015463:	74 4f                	je     c00154b4 <Process::addArgs(char**)+0x68>
c0015465:	8b 07                	mov    eax,DWORD PTR [edi]
c0015467:	85 c0                	test   eax,eax
c0015469:	74 49                	je     c00154b4 <Process::addArgs(char**)+0x68>
c001546b:	31 db                	xor    ebx,ebx
c001546d:	8d 76 00             	lea    esi,[esi+0x0]
c0015470:	83 ec 0c             	sub    esp,0xc
c0015473:	50                   	push   eax
c0015474:	e8 f7 b0 fe ff       	call   c0000570 <strlen>
c0015479:	83 c0 01             	add    eax,0x1
c001547c:	89 04 24             	mov    DWORD PTR [esp],eax
c001547f:	e8 32 26 ff ff       	call   c0007ab6 <malloc>
c0015484:	89 84 9e 1a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x51a],eax
c001548b:	5a                   	pop    edx
c001548c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c001548f:	59                   	pop    ecx
c0015490:	83 c3 01             	add    ebx,0x1
c0015493:	52                   	push   edx
c0015494:	50                   	push   eax
c0015495:	e8 a6 b1 fe ff       	call   c0000640 <strcpy>
c001549a:	8b 8e 16 05 00 00    	mov    ecx,DWORD PTR [esi+0x516]
c00154a0:	83 c4 10             	add    esp,0x10
c00154a3:	83 c1 01             	add    ecx,0x1
c00154a6:	89 8e 16 05 00 00    	mov    DWORD PTR [esi+0x516],ecx
c00154ac:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c00154af:	85 c0                	test   eax,eax
c00154b1:	75 bd                	jne    c0015470 <Process::addArgs(char**)+0x24>
c00154b3:	90                   	nop
c00154b4:	5b                   	pop    ebx
c00154b5:	5e                   	pop    esi
c00154b6:	5f                   	pop    edi
c00154b7:	c3                   	ret    

c00154b8 <Process::Process(char const*, Process*, char**)>:
c00154b8:	56                   	push   esi
c00154b9:	53                   	push   ebx
c00154ba:	83 ec 14             	sub    esp,0x14
c00154bd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154c1:	05 0c 02 00 00       	add    eax,0x20c
c00154c6:	bb 07 00 00 00       	mov    ebx,0x7
c00154cb:	89 c6                	mov    esi,eax
c00154cd:	8d 76 00             	lea    esi,[esi+0x0]
c00154d0:	85 db                	test   ebx,ebx
c00154d2:	78 14                	js     c00154e8 <Process::Process(char const*, Process*, char**)+0x30>
c00154d4:	83 ec 0c             	sub    esp,0xc
c00154d7:	56                   	push   esi
c00154d8:	e8 eb a5 00 00       	call   c001fac8 <ThreadControlBlock::ThreadControlBlock()>
c00154dd:	83 c4 10             	add    esp,0x10
c00154e0:	83 c6 5f             	add    esi,0x5f
c00154e3:	83 eb 01             	sub    ebx,0x1
c00154e6:	eb e8                	jmp    c00154d0 <Process::Process(char const*, Process*, char**)+0x18>
c00154e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154ec:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c00154f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00154f7:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c00154fe:	83 ec 0c             	sub    esp,0xc
c0015501:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015505:	e8 64 bb ff ff       	call   c001106e <KeNewProcessEnv(Process*)>
c001550a:	83 c4 10             	add    esp,0x10
c001550d:	89 c2                	mov    edx,eax
c001550f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015513:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c0015519:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001551d:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c0015526:	a1 80 34 02 c0       	mov    eax,ds:0xc0023480
c001552b:	8d 50 01             	lea    edx,[eax+0x1]
c001552e:	89 15 80 34 02 c0    	mov    DWORD PTR ds:0xc0023480,edx
c0015534:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015538:	89 02                	mov    DWORD PTR [edx],eax
c001553a:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c0015542:	83 ec 0c             	sub    esp,0xc
c0015545:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0015549:	e8 68 25 ff ff       	call   c0007ab6 <malloc>
c001554e:	83 c4 10             	add    esp,0x10
c0015551:	89 c3                	mov    ebx,eax
c0015553:	83 ec 08             	sub    esp,0x8
c0015556:	6a 00                	push   0x0
c0015558:	53                   	push   ebx
c0015559:	e8 0a 4b ff ff       	call   c000a068 <VAS::VAS(bool)>
c001555e:	83 c4 10             	add    esp,0x10
c0015561:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015565:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c001556b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001556f:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015579:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001557d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0015581:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c0015587:	e8 06 c1 ff ff       	call   c0011692 <KeInitSignals()>
c001558c:	89 c2                	mov    edx,eax
c001558e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015592:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c0015598:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001559c:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00155a2:	85 c0                	test   eax,eax
c00155a4:	74 42                	je     c00155e8 <Process::Process(char const*, Process*, char**)+0x130>
c00155a6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155aa:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00155b0:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00155b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155ba:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00155c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155c4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00155ca:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00155d0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00155d4:	05 0c 01 00 00       	add    eax,0x10c
c00155d9:	83 ec 08             	sub    esp,0x8
c00155dc:	52                   	push   edx
c00155dd:	50                   	push   eax
c00155de:	e8 5d b0 fe ff       	call   c0000640 <strcpy>
c00155e3:	83 c4 10             	add    esp,0x10
c00155e6:	eb 64                	jmp    c001564c <Process::Process(char const*, Process*, char**)+0x194>
c00155e8:	c7 44 24 04 84 01 00 00 	mov    DWORD PTR [esp+0x4],0x184
c00155f0:	83 ec 0c             	sub    esp,0xc
c00155f3:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00155f7:	e8 ba 24 ff ff       	call   c0007ab6 <malloc>
c00155fc:	83 c4 10             	add    esp,0x10
c00155ff:	89 c3                	mov    ebx,eax
c0015601:	83 ec 08             	sub    esp,0x8
c0015604:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015608:	53                   	push   ebx
c0015609:	e8 58 36 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c001560e:	83 c4 10             	add    esp,0x10
c0015611:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015615:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c001561b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001561f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0015625:	83 ec 0c             	sub    esp,0xc
c0015628:	50                   	push   eax
c0015629:	e8 d6 2e ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c001562e:	83 c4 10             	add    esp,0x10
c0015631:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015635:	05 0c 01 00 00       	add    eax,0x10c
c001563a:	83 ec 08             	sub    esp,0x8
c001563d:	68 81 22 02 c0       	push   0xc0022281
c0015642:	50                   	push   eax
c0015643:	e8 f8 af fe ff       	call   c0000640 <strcpy>
c0015648:	83 c4 10             	add    esp,0x10
c001564b:	90                   	nop
c001564c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0015650:	83 c0 0c             	add    eax,0xc
c0015653:	83 ec 08             	sub    esp,0x8
c0015656:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001565a:	50                   	push   eax
c001565b:	e8 e0 af fe ff       	call   c0000640 <strcpy>
c0015660:	83 c4 10             	add    esp,0x10
c0015663:	83 ec 08             	sub    esp,0x8
c0015666:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001566a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001566e:	e8 d9 fd ff ff       	call   c001544c <Process::addArgs(char**)>
c0015673:	83 c4 10             	add    esp,0x10
c0015676:	83 ec 08             	sub    esp,0x8
c0015679:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001567d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0015681:	e8 66 ed ff ff       	call   c00143ec <Thr::loadProgramIntoMemory(Process*, char const*)>
c0015686:	83 c4 10             	add    esp,0x10
c0015689:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001568d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0015691:	83 f0 01             	xor    eax,0x1
c0015694:	88 c2                	mov    dl,al
c0015696:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001569a:	88 90 1e 07 00 00    	mov    BYTE PTR [eax+0x71e],dl
c00156a0:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00156a5:	83 ec 04             	sub    esp,0x4
c00156a8:	50                   	push   eax
c00156a9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00156ad:	68 d8 22 02 c0       	push   0xc00222d8
c00156b2:	e8 8e 52 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00156b7:	83 c4 10             	add    esp,0x10
c00156ba:	90                   	nop
c00156bb:	83 c4 14             	add    esp,0x14
c00156be:	5b                   	pop    ebx
c00156bf:	5e                   	pop    esi
c00156c0:	c3                   	ret    
c00156c1:	90                   	nop
c00156c2:	66 90                	xchg   ax,ax

c00156c4 <Process::Process(bool, char const*, Process*, char**)>:
c00156c4:	56                   	push   esi
c00156c5:	53                   	push   ebx
c00156c6:	83 ec 24             	sub    esp,0x24
c00156c9:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00156cd:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00156d1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00156d5:	05 0c 02 00 00       	add    eax,0x20c
c00156da:	bb 07 00 00 00       	mov    ebx,0x7
c00156df:	89 c6                	mov    esi,eax
c00156e1:	8d 76 00             	lea    esi,[esi+0x0]
c00156e4:	85 db                	test   ebx,ebx
c00156e6:	78 14                	js     c00156fc <Process::Process(bool, char const*, Process*, char**)+0x38>
c00156e8:	83 ec 0c             	sub    esp,0xc
c00156eb:	56                   	push   esi
c00156ec:	e8 d7 a3 00 00       	call   c001fac8 <ThreadControlBlock::ThreadControlBlock()>
c00156f1:	83 c4 10             	add    esp,0x10
c00156f4:	83 c6 5f             	add    esi,0x5f
c00156f7:	83 eb 01             	sub    ebx,0x1
c00156fa:	eb e8                	jmp    c00156e4 <Process::Process(bool, char const*, Process*, char**)+0x20>
c00156fc:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015700:	c6 80 1e 07 00 00 00 	mov    BYTE PTR [eax+0x71e],0x0
c0015707:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001570b:	c6 80 1f 07 00 00 00 	mov    BYTE PTR [eax+0x71f],0x0
c0015712:	83 ec 0c             	sub    esp,0xc
c0015715:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015719:	e8 50 b9 ff ff       	call   c001106e <KeNewProcessEnv(Process*)>
c001571e:	83 c4 10             	add    esp,0x10
c0015721:	89 c2                	mov    edx,eax
c0015723:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015727:	89 90 1a 07 00 00    	mov    DWORD PTR [eax+0x71a],edx
c001572d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015731:	66 c7 80 04 05 00 00 00 00 	mov    WORD PTR [eax+0x504],0x0
c001573a:	a1 80 34 02 c0       	mov    eax,ds:0xc0023480
c001573f:	8d 50 01             	lea    edx,[eax+0x1]
c0015742:	89 15 80 34 02 c0    	mov    DWORD PTR ds:0xc0023480,edx
c0015748:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001574c:	89 02                	mov    DWORD PTR [edx],eax
c001574e:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c0015756:	83 ec 0c             	sub    esp,0xc
c0015759:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001575d:	e8 54 23 ff ff       	call   c0007ab6 <malloc>
c0015762:	83 c4 10             	add    esp,0x10
c0015765:	89 c3                	mov    ebx,eax
c0015767:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001576c:	83 ec 08             	sub    esp,0x8
c001576f:	50                   	push   eax
c0015770:	53                   	push   ebx
c0015771:	e8 f2 48 ff ff       	call   c000a068 <VAS::VAS(bool)>
c0015776:	83 c4 10             	add    esp,0x10
c0015779:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001577d:	89 98 12 05 00 00    	mov    DWORD PTR [eax+0x512],ebx
c0015783:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015787:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0015791:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015795:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0015799:	89 90 0a 05 00 00    	mov    DWORD PTR [eax+0x50a],edx
c001579f:	e8 ee be ff ff       	call   c0011692 <KeInitSignals()>
c00157a4:	89 c2                	mov    edx,eax
c00157a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157aa:	89 90 20 07 00 00    	mov    DWORD PTR [eax+0x720],edx
c00157b0:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157b4:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00157ba:	85 c0                	test   eax,eax
c00157bc:	74 42                	je     c0015800 <Process::Process(bool, char const*, Process*, char**)+0x13c>
c00157be:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157c2:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00157c8:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00157ce:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157d2:	89 90 06 05 00 00    	mov    DWORD PTR [eax+0x506],edx
c00157d8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157dc:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c00157e2:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00157e8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00157ec:	05 0c 01 00 00       	add    eax,0x10c
c00157f1:	83 ec 08             	sub    esp,0x8
c00157f4:	52                   	push   edx
c00157f5:	50                   	push   eax
c00157f6:	e8 45 ae fe ff       	call   c0000640 <strcpy>
c00157fb:	83 c4 10             	add    esp,0x10
c00157fe:	eb 64                	jmp    c0015864 <Process::Process(bool, char const*, Process*, char**)+0x1a0>
c0015800:	c7 44 24 18 84 01 00 00 	mov    DWORD PTR [esp+0x18],0x184
c0015808:	83 ec 0c             	sub    esp,0xc
c001580b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001580f:	e8 a2 22 ff ff       	call   c0007ab6 <malloc>
c0015814:	83 c4 10             	add    esp,0x10
c0015817:	89 c3                	mov    ebx,eax
c0015819:	83 ec 08             	sub    esp,0x8
c001581c:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015820:	53                   	push   ebx
c0015821:	e8 40 34 ff ff       	call   c0008c66 <VgaText::VgaText(char const*)>
c0015826:	83 c4 10             	add    esp,0x10
c0015829:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001582d:	89 98 06 05 00 00    	mov    DWORD PTR [eax+0x506],ebx
c0015833:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015837:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001583d:	83 ec 0c             	sub    esp,0xc
c0015840:	50                   	push   eax
c0015841:	e8 be 2c ff ff       	call   c0008504 <addToTerminalCycle(VgaText*)>
c0015846:	83 c4 10             	add    esp,0x10
c0015849:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001584d:	05 0c 01 00 00       	add    eax,0x10c
c0015852:	83 ec 08             	sub    esp,0x8
c0015855:	68 81 22 02 c0       	push   0xc0022281
c001585a:	50                   	push   eax
c001585b:	e8 e0 ad fe ff       	call   c0000640 <strcpy>
c0015860:	83 c4 10             	add    esp,0x10
c0015863:	90                   	nop
c0015864:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0015868:	83 c0 0c             	add    eax,0xc
c001586b:	83 ec 08             	sub    esp,0x8
c001586e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0015872:	50                   	push   eax
c0015873:	e8 c8 ad fe ff       	call   c0000640 <strcpy>
c0015878:	83 c4 10             	add    esp,0x10
c001587b:	83 ec 08             	sub    esp,0x8
c001587e:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0015882:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0015886:	e8 c1 fb ff ff       	call   c001544c <Process::addArgs(char**)>
c001588b:	83 c4 10             	add    esp,0x10
c001588e:	90                   	nop
c001588f:	83 c4 24             	add    esp,0x24
c0015892:	5b                   	pop    ebx
c0015893:	5e                   	pop    esi
c0015894:	c3                   	ret    
c0015895:	8d 76 00             	lea    esi,[esi+0x0]

c0015898 <taskStartupFunction>:
c0015898:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001589d:	8b 40 41             	mov    eax,DWORD PTR [eax+0x41]
c00158a0:	c3                   	ret    
c00158a1:	90                   	nop
c00158a2:	66 90                	xchg   ax,ax

c00158a4 <Semaphore::Semaphore(int)>:
c00158a4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00158a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00158ac:	89 10                	mov    DWORD PTR [eax],edx
c00158ae:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00158b2:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c00158b9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00158bd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00158c4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00158c8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00158cf:	90                   	nop
c00158d0:	c3                   	ret    
c00158d1:	90                   	nop
c00158d2:	66 90                	xchg   ax,ax

c00158d4 <Mutex::Mutex()>:
c00158d4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00158d8:	6a 01                	push   0x1
c00158da:	50                   	push   eax
c00158db:	e8 c4 ff ff ff       	call   c00158a4 <Semaphore::Semaphore(int)>
c00158e0:	83 c4 08             	add    esp,0x8
c00158e3:	90                   	nop
c00158e4:	c3                   	ret    
c00158e5:	90                   	nop
c00158e6:	66 90                	xchg   ax,ax

c00158e8 <Process::createThread(void (*)(void*), void*, int)>:
c00158e8:	57                   	push   edi
c00158e9:	31 c9                	xor    ecx,ecx
c00158eb:	56                   	push   esi
c00158ec:	53                   	push   ebx
c00158ed:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00158f1:	66 8b b3 04 05 00 00 	mov    si,WORD PTR [ebx+0x504]
c00158f8:	89 f2                	mov    edx,esi
c00158fa:	66 90                	xchg   ax,ax
c00158fc:	0f b7 c2             	movzx  eax,dx
c00158ff:	80 e2 01             	and    dl,0x1
c0015902:	74 14                	je     c0015918 <Process::createThread(void (*)(void*), void*, int)+0x30>
c0015904:	d1 f8                	sar    eax,1
c0015906:	83 c1 01             	add    ecx,0x1
c0015909:	89 c2                	mov    edx,eax
c001590b:	83 f9 10             	cmp    ecx,0x10
c001590e:	75 ec                	jne    c00158fc <Process::createThread(void (*)(void*), void*, int)+0x14>
c0015910:	31 db                	xor    ebx,ebx
c0015912:	89 d8                	mov    eax,ebx
c0015914:	5b                   	pop    ebx
c0015915:	5e                   	pop    esi
c0015916:	5f                   	pop    edi
c0015917:	c3                   	ret    
c0015918:	b8 01 00 00 00       	mov    eax,0x1
c001591d:	d3 e0                	shl    eax,cl
c001591f:	09 c6                	or     esi,eax
c0015921:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015924:	66 89 b3 04 05 00 00 	mov    WORD PTR [ebx+0x504],si
c001592b:	01 c0                	add    eax,eax
c001592d:	01 c8                	add    eax,ecx
c001592f:	8d 04 80             	lea    eax,[eax+eax*4]
c0015932:	01 d8                	add    eax,ebx
c0015934:	80 b8 6a 02 00 00 00 	cmp    BYTE PTR [eax+0x26a],0x0
c001593b:	75 0b                	jne    c0015948 <Process::createThread(void (*)(void*), void*, int)+0x60>
c001593d:	c7 80 61 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
c0015947:	90                   	nop
c0015948:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c001594e:	83 ec 0c             	sub    esp,0xc
c0015951:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0015954:	8d 04 c9             	lea    eax,[ecx+ecx*8]
c0015957:	01 c0                	add    eax,eax
c0015959:	01 c8                	add    eax,ecx
c001595b:	8d 3c 80             	lea    edi,[eax+eax*4]
c001595e:	8d 04 3b             	lea    eax,[ebx+edi*1]
c0015961:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
c0015967:	8d b0 00 02 00 00    	lea    esi,[eax+0x200]
c001596d:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0015971:	89 88 44 02 00 00    	mov    DWORD PTR [eax+0x244],ecx
c0015977:	89 90 4d 02 00 00    	mov    DWORD PTR [eax+0x24d],edx
c001597d:	89 98 48 02 00 00    	mov    DWORD PTR [eax+0x248],ebx
c0015983:	89 ca                	mov    edx,ecx
c0015985:	8d 9c 3b 0c 02 00 00 	lea    ebx,[ebx+edi*1+0x20c]
c001598c:	f7 da                	neg    edx
c001598e:	c1 e2 15             	shl    edx,0x15
c0015991:	81 c2 e0 ff ff 01    	add    edx,0x1ffffe0
c0015997:	89 90 10 02 00 00    	mov    DWORD PTR [eax+0x210],edx
c001599d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00159a1:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c00159ab:	88 90 4c 02 00 00    	mov    BYTE PTR [eax+0x24c],dl
c00159b1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00159b5:	89 90 18 02 00 00    	mov    DWORD PTR [eax+0x218],edx
c00159bb:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c00159c5:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c00159cf:	68 00 01 00 00       	push   0x100
c00159d4:	e8 dd 20 ff ff       	call   c0007ab6 <malloc>
c00159d9:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00159dc:	58                   	pop    eax
c00159dd:	5a                   	pop    edx
c00159de:	53                   	push   ebx
c00159df:	68 e4 96 02 c0       	push   0xc00296e4
c00159e4:	e8 77 9e 00 00       	call   c001f860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00159e9:	83 c4 10             	add    esp,0x10
c00159ec:	89 d8                	mov    eax,ebx
c00159ee:	5b                   	pop    ebx
c00159ef:	5e                   	pop    esi
c00159f0:	5f                   	pop    edi
c00159f1:	c3                   	ret    
c00159f2:	66 90                	xchg   ax,ax

c00159f4 <Process::createUserThread()>:
c00159f4:	83 ec 0c             	sub    esp,0xc
c00159f7:	68 80 00 00 00       	push   0x80
c00159fc:	6a 00                	push   0x0
c00159fe:	68 44 53 01 c0       	push   0xc0015344
c0015a03:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0015a07:	50                   	push   eax
c0015a08:	e8 db fe ff ff       	call   c00158e8 <Process::createThread(void (*)(void*), void*, int)>
c0015a0d:	83 c4 1c             	add    esp,0x1c
c0015a10:	c3                   	ret    
c0015a11:	8d 76 00             	lea    esi,[esi+0x0]

c0015a14 <setupMultitasking(void (*)())>:
c0015a14:	56                   	push   esi
c0015a15:	53                   	push   ebx
c0015a16:	83 ec 04             	sub    esp,0x4
c0015a19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015a1d:	eb 11                	jmp    c0015a30 <setupMultitasking(void (*)())+0x1c>
c0015a1f:	90                   	nop
c0015a20:	83 ec 0c             	sub    esp,0xc
c0015a23:	68 e4 96 02 c0       	push   0xc00296e4
c0015a28:	e8 77 9d 00 00       	call   c001f7a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015a2d:	83 c4 10             	add    esp,0x10
c0015a30:	83 ec 0c             	sub    esp,0xc
c0015a33:	68 e4 96 02 c0       	push   0xc00296e4
c0015a38:	e8 43 9d 00 00       	call   c001f780 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015a3d:	83 c4 10             	add    esp,0x10
c0015a40:	84 c0                	test   al,al
c0015a42:	74 dc                	je     c0015a20 <setupMultitasking(void (*)())+0xc>
c0015a44:	83 ec 0c             	sub    esp,0xc
c0015a47:	68 24 07 00 00       	push   0x724
c0015a4c:	e8 65 20 ff ff       	call   c0007ab6 <malloc>
c0015a51:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0015a58:	89 c3                	mov    ebx,eax
c0015a5a:	6a 00                	push   0x0
c0015a5c:	68 85 22 02 c0       	push   0xc0022285
c0015a61:	6a 01                	push   0x1
c0015a63:	50                   	push   eax
c0015a64:	e8 5b fc ff ff       	call   c00156c4 <Process::Process(bool, char const*, Process*, char**)>
c0015a69:	83 c4 14             	add    esp,0x14
c0015a6c:	8b 83 06 05 00 00    	mov    eax,DWORD PTR [ebx+0x506]
c0015a72:	89 1d f0 96 02 c0    	mov    DWORD PTR ds:0xc00296f0,ebx
c0015a78:	50                   	push   eax
c0015a79:	e8 db 2c ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0015a7e:	66 8b 83 04 05 00 00 	mov    ax,WORD PTR [ebx+0x504]
c0015a85:	c7 83 61 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x261],0x0
c0015a8f:	83 c8 01             	or     eax,0x1
c0015a92:	66 89 83 04 05 00 00 	mov    WORD PTR [ebx+0x504],ax
c0015a99:	8b 83 12 05 00 00    	mov    eax,DWORD PTR [ebx+0x512]
c0015a9f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015aa2:	c7 83 44 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x244],0x0
c0015aac:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c0015ab2:	89 9b 48 02 00 00    	mov    DWORD PTR [ebx+0x248],ebx
c0015ab8:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c0015ac2:	c7 83 40 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x240],0x2faf080
c0015acc:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c0015ad6:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c0015adc:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c0015ae6:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c0015aec:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c0015af6:	c7 04 24 00 01 00 00 	mov    DWORD PTR [esp],0x100
c0015afd:	e8 b4 1f ff ff       	call   c0007ab6 <malloc>
c0015b02:	89 83 14 02 00 00    	mov    DWORD PTR [ebx+0x214],eax
c0015b08:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c0015b0e:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c0015b14:	5a                   	pop    edx
c0015b15:	59                   	pop    ecx
c0015b16:	68 81 22 02 c0       	push   0xc0022281
c0015b1b:	50                   	push   eax
c0015b1c:	e8 1f ab fe ff       	call   c0000640 <strcpy>
c0015b21:	c6 83 4c 02 00 00 80 	mov    BYTE PTR [ebx+0x24c],0x80
c0015b28:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0015b2c:	83 c4 14             	add    esp,0x14
c0015b2f:	5b                   	pop    ebx
c0015b30:	5e                   	pop    esi
c0015b31:	e9 33 a7 fe ff       	jmp    c0000269 <switchToThreadASMFirstTime>
c0015b36:	66 90                	xchg   ax,ax

c0015b38 <schedule()>:
c0015b38:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015b3e:	85 d2                	test   edx,edx
c0015b40:	74 0e                	je     c0015b50 <schedule()+0x18>
c0015b42:	c7 05 c0 96 02 c0 01 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x1
c0015b4c:	c3                   	ret    
c0015b4d:	8d 76 00             	lea    esi,[esi+0x0]
c0015b50:	53                   	push   ebx
c0015b51:	83 ec 14             	sub    esp,0x14
c0015b54:	68 e4 96 02 c0       	push   0xc00296e4
c0015b59:	e8 22 9c 00 00       	call   c001f780 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0015b5e:	83 c4 10             	add    esp,0x10
c0015b61:	84 c0                	test   al,al
c0015b63:	75 3f                	jne    c0015ba4 <schedule()+0x6c>
c0015b65:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015b6a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0015b6d:	83 fa 01             	cmp    edx,0x1
c0015b70:	74 3a                	je     c0015bac <schedule()+0x74>
c0015b72:	66 90                	xchg   ax,ax
c0015b74:	83 ec 0c             	sub    esp,0xc
c0015b77:	68 e4 96 02 c0       	push   0xc00296e4
c0015b7c:	e8 1b 9c 00 00       	call   c001f79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015b81:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015b88:	89 c3                	mov    ebx,eax
c0015b8a:	e8 15 9c 00 00       	call   c001f7a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015b8f:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c0015b96:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015b99:	e8 fe f7 ff ff       	call   c001539c <switchToThread(ThreadControlBlock*)>
c0015b9e:	83 c4 10             	add    esp,0x10
c0015ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0015ba4:	83 c4 08             	add    esp,0x8
c0015ba7:	5b                   	pop    ebx
c0015ba8:	c3                   	ret    
c0015ba9:	8d 76 00             	lea    esi,[esi+0x0]
c0015bac:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0015bb3:	83 ec 08             	sub    esp,0x8
c0015bb6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015bbb:	50                   	push   eax
c0015bbc:	68 e4 96 02 c0       	push   0xc00296e4
c0015bc1:	e8 9a 9c 00 00       	call   c001f860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015bc6:	83 c4 10             	add    esp,0x10
c0015bc9:	eb a9                	jmp    c0015b74 <schedule()+0x3c>
c0015bcb:	90                   	nop

c0015bcc <Semaphore::tryAcquire()>:
c0015bcc:	53                   	push   ebx
c0015bcd:	83 ec 08             	sub    esp,0x8
c0015bd0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0015bd4:	fa                   	cli    
c0015bd5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015bda:	8d 50 01             	lea    edx,[eax+0x1]
c0015bdd:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015be3:	8b 15 c4 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c4
c0015be9:	8d 5a 01             	lea    ebx,[edx+0x1]
c0015bec:	89 1d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ebx
c0015bf2:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c0015bf5:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c0015bf7:	7c 33                	jl     c0015c2c <Semaphore::tryAcquire()+0x60>
c0015bf9:	89 15 c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,edx
c0015bff:	85 d2                	test   edx,edx
c0015c01:	75 0d                	jne    c0015c10 <Semaphore::tryAcquire()+0x44>
c0015c03:	8b 15 c0 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c0
c0015c09:	85 d2                	test   edx,edx
c0015c0b:	75 6f                	jne    c0015c7c <Semaphore::tryAcquire()+0xb0>
c0015c0d:	8d 76 00             	lea    esi,[esi+0x0]
c0015c10:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015c15:	85 c0                	test   eax,eax
c0015c17:	74 0b                	je     c0015c24 <Semaphore::tryAcquire()+0x58>
c0015c19:	8d 76 00             	lea    esi,[esi+0x0]
c0015c1c:	31 c0                	xor    eax,eax
c0015c1e:	83 c4 08             	add    esp,0x8
c0015c21:	5b                   	pop    ebx
c0015c22:	c3                   	ret    
c0015c23:	90                   	nop
c0015c24:	fb                   	sti    
c0015c25:	83 c4 08             	add    esp,0x8
c0015c28:	5b                   	pop    ebx
c0015c29:	c3                   	ret    
c0015c2a:	66 90                	xchg   ax,ax
c0015c2c:	83 c3 01             	add    ebx,0x1
c0015c2f:	89 15 c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,edx
c0015c35:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c0015c38:	85 d2                	test   edx,edx
c0015c3a:	75 24                	jne    c0015c60 <Semaphore::tryAcquire()+0x94>
c0015c3c:	8b 0d c0 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c0
c0015c42:	85 c9                	test   ecx,ecx
c0015c44:	74 1a                	je     c0015c60 <Semaphore::tryAcquire()+0x94>
c0015c46:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015c50:	e8 e3 fe ff ff       	call   c0015b38 <schedule()>
c0015c55:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015c5a:	83 e8 01             	sub    eax,0x1
c0015c5d:	8d 76 00             	lea    esi,[esi+0x0]
c0015c60:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015c65:	85 c0                	test   eax,eax
c0015c67:	75 0b                	jne    c0015c74 <Semaphore::tryAcquire()+0xa8>
c0015c69:	fb                   	sti    
c0015c6a:	b0 01                	mov    al,0x1
c0015c6c:	83 c4 08             	add    esp,0x8
c0015c6f:	5b                   	pop    ebx
c0015c70:	c3                   	ret    
c0015c71:	8d 76 00             	lea    esi,[esi+0x0]
c0015c74:	b0 01                	mov    al,0x1
c0015c76:	83 c4 08             	add    esp,0x8
c0015c79:	5b                   	pop    ebx
c0015c7a:	c3                   	ret    
c0015c7b:	90                   	nop
c0015c7c:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015c86:	e8 ad fe ff ff       	call   c0015b38 <schedule()>
c0015c8b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015c90:	83 e8 01             	sub    eax,0x1
c0015c93:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015c98:	85 c0                	test   eax,eax
c0015c9a:	75 80                	jne    c0015c1c <Semaphore::tryAcquire()+0x50>
c0015c9c:	eb 86                	jmp    c0015c24 <Semaphore::tryAcquire()+0x58>
c0015c9e:	66 90                	xchg   ax,ax

c0015ca0 <Semaphore::assertLocked(char const*)>:
c0015ca0:	83 ec 0c             	sub    esp,0xc
c0015ca3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015ca7:	fa                   	cli    
c0015ca8:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015cae:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015cb3:	83 c1 01             	add    ecx,0x1
c0015cb6:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015cbc:	8d 48 01             	lea    ecx,[eax+0x1]
c0015cbf:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015cc5:	8b 0a                	mov    ecx,DWORD PTR [edx]
c0015cc7:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c0015cca:	7c 28                	jl     c0015cf4 <Semaphore::assertLocked(char const*)+0x54>
c0015ccc:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015cd1:	85 c0                	test   eax,eax
c0015cd3:	75 0b                	jne    c0015ce0 <Semaphore::assertLocked(char const*)+0x40>
c0015cd5:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015cda:	85 c0                	test   eax,eax
c0015cdc:	75 32                	jne    c0015d10 <Semaphore::assertLocked(char const*)+0x70>
c0015cde:	66 90                	xchg   ax,ax
c0015ce0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ce5:	83 e8 01             	sub    eax,0x1
c0015ce8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ced:	75 01                	jne    c0015cf0 <Semaphore::assertLocked(char const*)+0x50>
c0015cef:	fb                   	sti    
c0015cf0:	83 c4 0c             	add    esp,0xc
c0015cf3:	c3                   	ret    
c0015cf4:	83 ec 0c             	sub    esp,0xc
c0015cf7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015cfb:	52                   	push   edx
c0015cfc:	e8 78 b5 ff ff       	call   c0011279 <KePanic(char const*)>
c0015d01:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015d06:	83 c4 10             	add    esp,0x10
c0015d09:	83 e8 01             	sub    eax,0x1
c0015d0c:	eb be                	jmp    c0015ccc <Semaphore::assertLocked(char const*)+0x2c>
c0015d0e:	66 90                	xchg   ax,ax
c0015d10:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015d1a:	e8 19 fe ff ff       	call   c0015b38 <schedule()>
c0015d1f:	eb bf                	jmp    c0015ce0 <Semaphore::assertLocked(char const*)+0x40>
c0015d21:	8d 76 00             	lea    esi,[esi+0x0]

c0015d24 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c0015d24:	83 ec 0c             	sub    esp,0xc
c0015d27:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d2c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d30:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015d33:	e8 00 fe ff ff       	call   c0015b38 <schedule()>
c0015d38:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d3d:	83 e8 01             	sub    eax,0x1
c0015d40:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d45:	75 01                	jne    c0015d48 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x24>
c0015d47:	fb                   	sti    
c0015d48:	83 c4 0c             	add    esp,0xc
c0015d4b:	c3                   	ret    

c0015d4c <blockTask(TaskState)>:
c0015d4c:	83 ec 0c             	sub    esp,0xc
c0015d4f:	fa                   	cli    
c0015d50:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d55:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015d59:	83 c0 01             	add    eax,0x1
c0015d5c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d61:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d66:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0015d69:	e8 ca fd ff ff       	call   c0015b38 <schedule()>
c0015d6e:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015d73:	83 e8 01             	sub    eax,0x1
c0015d76:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015d7b:	75 03                	jne    c0015d80 <blockTask(TaskState)+0x34>
c0015d7d:	fb                   	sti    
c0015d7e:	66 90                	xchg   ax,ax
c0015d80:	83 c4 0c             	add    esp,0xc
c0015d83:	c3                   	ret    

c0015d84 <waitTask(int, int*, int)>:
c0015d84:	83 ec 18             	sub    esp,0x18
c0015d87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d8c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0015d90:	89 50 45             	mov    DWORD PTR [eax+0x45],edx
c0015d93:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0015d97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015d9c:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c0015d9f:	6a 07                	push   0x7
c0015da1:	e8 a6 ff ff ff       	call   c0015d4c <blockTask(TaskState)>
c0015da6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dab:	83 c4 10             	add    esp,0x10
c0015dae:	8b 50 49             	mov    edx,DWORD PTR [eax+0x49]
c0015db1:	85 d2                	test   edx,edx
c0015db3:	74 0b                	je     c0015dc0 <waitTask(int, int*, int)+0x3c>
c0015db5:	8b 40 4d             	mov    eax,DWORD PTR [eax+0x4d]
c0015db8:	89 02                	mov    DWORD PTR [edx],eax
c0015dba:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015dbf:	90                   	nop
c0015dc0:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c0015dc3:	83 c4 0c             	add    esp,0xc
c0015dc6:	c3                   	ret    
c0015dc7:	90                   	nop

c0015dc8 <milliTenthSleepUntil(unsigned int)>:
c0015dc8:	83 ec 0c             	sub    esp,0xc
c0015dcb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0015dcf:	39 05 ec 88 02 c0    	cmp    DWORD PTR ds:0xc00288ec,eax
c0015dd5:	76 05                	jbe    c0015ddc <milliTenthSleepUntil(unsigned int)+0x14>
c0015dd7:	90                   	nop
c0015dd8:	83 c4 0c             	add    esp,0xc
c0015ddb:	c3                   	ret    
c0015ddc:	fa                   	cli    
c0015ddd:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c0015de3:	83 ec 08             	sub    esp,0x8
c0015de6:	83 c2 01             	add    edx,0x1
c0015de9:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0015def:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c0015df5:	83 c1 01             	add    ecx,0x1
c0015df8:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015dfe:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0015e04:	89 42 2c             	mov    DWORD PTR [edx+0x2c],eax
c0015e07:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015e0c:	50                   	push   eax
c0015e0d:	68 d8 96 02 c0       	push   0xc00296d8
c0015e12:	e8 49 9a 00 00       	call   c001f860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0015e17:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0015e1e:	e8 29 ff ff ff       	call   c0015d4c <blockTask(TaskState)>
c0015e23:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015e28:	83 c4 10             	add    esp,0x10
c0015e2b:	83 e8 01             	sub    eax,0x1
c0015e2e:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015e33:	85 c0                	test   eax,eax
c0015e35:	75 09                	jne    c0015e40 <milliTenthSleepUntil(unsigned int)+0x78>
c0015e37:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015e3c:	85 c0                	test   eax,eax
c0015e3e:	75 14                	jne    c0015e54 <milliTenthSleepUntil(unsigned int)+0x8c>
c0015e40:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015e45:	83 e8 01             	sub    eax,0x1
c0015e48:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015e4d:	75 89                	jne    c0015dd8 <milliTenthSleepUntil(unsigned int)+0x10>
c0015e4f:	fb                   	sti    
c0015e50:	83 c4 0c             	add    esp,0xc
c0015e53:	c3                   	ret    
c0015e54:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015e5e:	e8 d5 fc ff ff       	call   c0015b38 <schedule()>
c0015e63:	eb db                	jmp    c0015e40 <milliTenthSleepUntil(unsigned int)+0x78>
c0015e65:	8d 76 00             	lea    esi,[esi+0x0]

c0015e68 <milliTenthSleep(unsigned int)>:
c0015e68:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0015e6c:	a1 ec 88 02 c0       	mov    eax,ds:0xc00288ec
c0015e71:	01 c2                	add    edx,eax
c0015e73:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0015e77:	e9 4c ff ff ff       	jmp    c0015dc8 <milliTenthSleepUntil(unsigned int)>

c0015e7c <sleep(unsigned int)>:
c0015e7c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0015e80:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e83:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e86:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e89:	8d 04 80             	lea    eax,[eax+eax*4]
c0015e8c:	c1 e0 04             	shl    eax,0x4
c0015e8f:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0015e93:	eb d3                	jmp    c0015e68 <milliTenthSleep(unsigned int)>
c0015e95:	90                   	nop
c0015e96:	66 90                	xchg   ax,ax

c0015e98 <Semaphore::acquire()>:
c0015e98:	83 ec 0c             	sub    esp,0xc
c0015e9b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0015e9f:	fa                   	cli    
c0015ea0:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ea5:	83 c0 01             	add    eax,0x1
c0015ea8:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ead:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015eb2:	8d 48 01             	lea    ecx,[eax+0x1]
c0015eb5:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0015ebb:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0015ebe:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c0015ec0:	7d 2e                	jge    c0015ef0 <Semaphore::acquire()+0x58>
c0015ec2:	83 c1 01             	add    ecx,0x1
c0015ec5:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0015ec8:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0015ecd:	85 c0                	test   eax,eax
c0015ecf:	75 0b                	jne    c0015edc <Semaphore::acquire()+0x44>
c0015ed1:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0015ed6:	85 c0                	test   eax,eax
c0015ed8:	75 66                	jne    c0015f40 <Semaphore::acquire()+0xa8>
c0015eda:	66 90                	xchg   ax,ax
c0015edc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015ee1:	83 e8 01             	sub    eax,0x1
c0015ee4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015ee9:	75 01                	jne    c0015eec <Semaphore::acquire()+0x54>
c0015eeb:	fb                   	sti    
c0015eec:	83 c4 0c             	add    esp,0xc
c0015eef:	c3                   	ret    
c0015ef0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015ef5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0015efc:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c0015eff:	85 c9                	test   ecx,ecx
c0015f01:	74 51                	je     c0015f54 <Semaphore::acquire()+0xbc>
c0015f03:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c0015f06:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0015f0c:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c0015f0f:	90                   	nop
c0015f10:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f15:	83 ec 0c             	sub    esp,0xc
c0015f18:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c0015f1b:	68 04 23 02 c0       	push   0xc0022304
c0015f20:	e8 20 4a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0015f25:	c7 04 24 05 00 00 00 	mov    DWORD PTR [esp],0x5
c0015f2c:	e8 1b fe ff ff       	call   c0015d4c <blockTask(TaskState)>
c0015f31:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0015f36:	83 c4 10             	add    esp,0x10
c0015f39:	83 e8 01             	sub    eax,0x1
c0015f3c:	eb 8a                	jmp    c0015ec8 <Semaphore::acquire()+0x30>
c0015f3e:	66 90                	xchg   ax,ax
c0015f40:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0015f4a:	e8 e9 fb ff ff       	call   c0015b38 <schedule()>
c0015f4f:	eb 8b                	jmp    c0015edc <Semaphore::acquire()+0x44>
c0015f51:	8d 76 00             	lea    esi,[esi+0x0]
c0015f54:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015f59:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0015f5c:	eb b2                	jmp    c0015f10 <Semaphore::acquire()+0x78>
c0015f5e:	66 90                	xchg   ax,ax

c0015f60 <taskReturned>:
c0015f60:	83 ec 18             	sub    esp,0x18
c0015f63:	68 24 23 02 c0       	push   0xc0022324
c0015f68:	e8 0c b3 ff ff       	call   c0011279 <KePanic(char const*)>
c0015f6d:	83 c4 10             	add    esp,0x10
c0015f70:	83 ec 0c             	sub    esp,0xc
c0015f73:	6a 02                	push   0x2
c0015f75:	e8 d2 fd ff ff       	call   c0015d4c <blockTask(TaskState)>
c0015f7a:	fa                   	cli    
c0015f7b:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f80:	83 c0 01             	add    eax,0x1
c0015f83:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f88:	e8 ab fb ff ff       	call   c0015b38 <schedule()>
c0015f8d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0015f92:	83 c4 10             	add    esp,0x10
c0015f95:	83 e8 01             	sub    eax,0x1
c0015f98:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0015f9d:	85 c0                	test   eax,eax
c0015f9f:	75 cf                	jne    c0015f70 <taskReturned+0x10>
c0015fa1:	fb                   	sti    
c0015fa2:	eb cc                	jmp    c0015f70 <taskReturned+0x10>

c0015fa4 <Thr::processFromPID(int)>:
c0015fa4:	57                   	push   edi
c0015fa5:	56                   	push   esi
c0015fa6:	53                   	push   ebx
c0015fa7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0015fab:	fa                   	cli    
c0015fac:	8b 0d c8 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c8
c0015fb2:	83 ec 0c             	sub    esp,0xc
c0015fb5:	83 c1 01             	add    ecx,0x1
c0015fb8:	68 e4 96 02 c0       	push   0xc00296e4
c0015fbd:	89 0d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ecx
c0015fc3:	e8 d4 97 00 00       	call   c001f79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015fc8:	83 c4 10             	add    esp,0x10
c0015fcb:	89 c7                	mov    edi,eax
c0015fcd:	eb 15                	jmp    c0015fe4 <Thr::processFromPID(int)+0x40>
c0015fcf:	90                   	nop
c0015fd0:	83 ec 0c             	sub    esp,0xc
c0015fd3:	68 e4 96 02 c0       	push   0xc00296e4
c0015fd8:	e8 bf 97 00 00       	call   c001f79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015fdd:	83 c4 10             	add    esp,0x10
c0015fe0:	39 f8                	cmp    eax,edi
c0015fe2:	74 50                	je     c0016034 <Thr::processFromPID(int)+0x90>
c0015fe4:	83 ec 0c             	sub    esp,0xc
c0015fe7:	68 e4 96 02 c0       	push   0xc00296e4
c0015fec:	e8 ab 97 00 00       	call   c001f79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0015ff1:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0015ff8:	89 c3                	mov    ebx,eax
c0015ffa:	e8 a5 97 00 00       	call   c001f7a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0015fff:	58                   	pop    eax
c0016000:	5a                   	pop    edx
c0016001:	53                   	push   ebx
c0016002:	68 e4 96 02 c0       	push   0xc00296e4
c0016007:	e8 54 98 00 00       	call   c001f860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001600c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001600f:	83 c4 10             	add    esp,0x10
c0016012:	39 30                	cmp    DWORD PTR [eax],esi
c0016014:	75 ba                	jne    c0015fd0 <Thr::processFromPID(int)+0x2c>
c0016016:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001601b:	83 e8 01             	sub    eax,0x1
c001601e:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016023:	74 0b                	je     c0016030 <Thr::processFromPID(int)+0x8c>
c0016025:	8d 76 00             	lea    esi,[esi+0x0]
c0016028:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001602b:	5b                   	pop    ebx
c001602c:	5e                   	pop    esi
c001602d:	5f                   	pop    edi
c001602e:	c3                   	ret    
c001602f:	90                   	nop
c0016030:	fb                   	sti    
c0016031:	eb f5                	jmp    c0016028 <Thr::processFromPID(int)+0x84>
c0016033:	90                   	nop
c0016034:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016039:	83 e8 01             	sub    eax,0x1
c001603c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016041:	75 05                	jne    c0016048 <Thr::processFromPID(int)+0xa4>
c0016043:	fb                   	sti    
c0016044:	5b                   	pop    ebx
c0016045:	5e                   	pop    esi
c0016046:	5f                   	pop    edi
c0016047:	c3                   	ret    
c0016048:	5b                   	pop    ebx
c0016049:	31 c0                	xor    eax,eax
c001604b:	5e                   	pop    esi
c001604c:	5f                   	pop    edi
c001604d:	c3                   	ret    
c001604e:	66 90                	xchg   ax,ax

c0016050 <unblockTask(ThreadControlBlock*)>:
c0016050:	53                   	push   ebx
c0016051:	83 ec 08             	sub    esp,0x8
c0016054:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016058:	fa                   	cli    
c0016059:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001605e:	83 c0 01             	add    eax,0x1
c0016061:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016066:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016069:	85 c0                	test   eax,eax
c001606b:	74 67                	je     c00160d4 <unblockTask(ThreadControlBlock*)+0x84>
c001606d:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0016070:	83 f8 01             	cmp    eax,0x1
c0016073:	74 37                	je     c00160ac <unblockTask(ThreadControlBlock*)+0x5c>
c0016075:	83 ec 0c             	sub    esp,0xc
c0016078:	68 e4 96 02 c0       	push   0xc00296e4
c001607d:	e8 1a 97 00 00       	call   c001f79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016082:	83 c4 10             	add    esp,0x10
c0016085:	85 c0                	test   eax,eax
c0016087:	75 1b                	jne    c00160a4 <unblockTask(ThreadControlBlock*)+0x54>
c0016089:	eb 5d                	jmp    c00160e8 <unblockTask(ThreadControlBlock*)+0x98>
c001608b:	90                   	nop
c001608c:	83 ec 08             	sub    esp,0x8
c001608f:	50                   	push   eax
c0016090:	68 e4 96 02 c0       	push   0xc00296e4
c0016095:	e8 22 9a 00 00       	call   c001fabc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001609a:	83 c4 10             	add    esp,0x10
c001609d:	85 c0                	test   eax,eax
c001609f:	74 47                	je     c00160e8 <unblockTask(ThreadControlBlock*)+0x98>
c00160a1:	8d 76 00             	lea    esi,[esi+0x0]
c00160a4:	39 c3                	cmp    ebx,eax
c00160a6:	75 e4                	jne    c001608c <unblockTask(ThreadControlBlock*)+0x3c>
c00160a8:	eb 12                	jmp    c00160bc <unblockTask(ThreadControlBlock*)+0x6c>
c00160aa:	66 90                	xchg   ax,ax
c00160ac:	83 ec 0c             	sub    esp,0xc
c00160af:	68 a3 22 02 c0       	push   0xc00222a3
c00160b4:	e8 8c 48 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00160b9:	83 c4 10             	add    esp,0x10
c00160bc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00160c1:	83 e8 01             	sub    eax,0x1
c00160c4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00160c9:	75 01                	jne    c00160cc <unblockTask(ThreadControlBlock*)+0x7c>
c00160cb:	fb                   	sti    
c00160cc:	83 c4 08             	add    esp,0x8
c00160cf:	5b                   	pop    ebx
c00160d0:	c3                   	ret    
c00160d1:	8d 76 00             	lea    esi,[esi+0x0]
c00160d4:	83 ec 0c             	sub    esp,0xc
c00160d7:	68 8c 22 02 c0       	push   0xc002228c
c00160dc:	e8 64 48 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00160e1:	83 c4 10             	add    esp,0x10
c00160e4:	eb d6                	jmp    c00160bc <unblockTask(ThreadControlBlock*)+0x6c>
c00160e6:	66 90                	xchg   ax,ax
c00160e8:	83 ec 08             	sub    esp,0x8
c00160eb:	53                   	push   ebx
c00160ec:	68 e4 96 02 c0       	push   0xc00296e4
c00160f1:	e8 6a 97 00 00       	call   c001f860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c00160f6:	83 c4 10             	add    esp,0x10
c00160f9:	eb c1                	jmp    c00160bc <unblockTask(ThreadControlBlock*)+0x6c>
c00160fb:	90                   	nop

c00160fc <cleanupTerminatedTask(ThreadControlBlock*)>:
c00160fc:	55                   	push   ebp
c00160fd:	57                   	push   edi
c00160fe:	56                   	push   esi
c00160ff:	53                   	push   ebx
c0016100:	83 ec 1c             	sub    esp,0x1c
c0016103:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0016107:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001610a:	8b a8 16 05 00 00    	mov    ebp,DWORD PTR [eax+0x516]
c0016110:	85 ed                	test   ebp,ebp
c0016112:	7e 28                	jle    c001613c <cleanupTerminatedTask(ThreadControlBlock*)+0x40>
c0016114:	31 f6                	xor    esi,esi
c0016116:	66 90                	xchg   ax,ax
c0016118:	83 ec 0c             	sub    esp,0xc
c001611b:	8b bc b0 1a 05 00 00 	mov    edi,DWORD PTR [eax+esi*4+0x51a]
c0016122:	83 c6 01             	add    esi,0x1
c0016125:	57                   	push   edi
c0016126:	e8 9b 19 ff ff       	call   c0007ac6 <free>
c001612b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001612e:	83 c4 10             	add    esp,0x10
c0016131:	39 b0 16 05 00 00    	cmp    DWORD PTR [eax+0x516],esi
c0016137:	7f df                	jg     c0016118 <cleanupTerminatedTask(ThreadControlBlock*)+0x1c>
c0016139:	8d 76 00             	lea    esi,[esi+0x0]
c001613c:	c7 80 16 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x516],0x0
c0016146:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001614b:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c001614e:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0016151:	d3 c0                	rol    eax,cl
c0016153:	66 8b 8a 04 05 00 00 	mov    cx,WORD PTR [edx+0x504]
c001615a:	21 c8                	and    eax,ecx
c001615c:	66 89 82 04 05 00 00 	mov    WORD PTR [edx+0x504],ax
c0016163:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016166:	89 f7                	mov    edi,esi
c0016168:	66 83 be 04 05 00 00 00 	cmp    WORD PTR [esi+0x504],0x0
c0016170:	0f 85 72 01 00 00    	jne    c00162e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c0016176:	8b ae 1a 07 00 00    	mov    ebp,DWORD PTR [esi+0x71a]
c001617c:	85 ed                	test   ebp,ebp
c001617e:	74 1c                	je     c001619c <cleanupTerminatedTask(ThreadControlBlock*)+0xa0>
c0016180:	83 ec 0c             	sub    esp,0xc
c0016183:	55                   	push   ebp
c0016184:	e8 01 ae ff ff       	call   c0010f8a <EnvVarContainer::~EnvVarContainer()>
c0016189:	59                   	pop    ecx
c001618a:	5e                   	pop    esi
c001618b:	6a 0c                	push   0xc
c001618d:	55                   	push   ebp
c001618e:	e8 85 46 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0016193:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016196:	83 c4 10             	add    esp,0x10
c0016199:	89 f7                	mov    edi,esi
c001619b:	90                   	nop
c001619c:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00161a2:	85 c0                	test   eax,eax
c00161a4:	0f 84 b2 00 00 00    	je     c001625c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00161aa:	8b 4b 51             	mov    ecx,DWORD PTR [ebx+0x51]
c00161ad:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00161b1:	31 c9                	xor    ecx,ecx
c00161b3:	eb 17                	jmp    c00161cc <cleanupTerminatedTask(ThreadControlBlock*)+0xd0>
c00161b5:	8d 76 00             	lea    esi,[esi+0x0]
c00161b8:	83 c1 01             	add    ecx,0x1
c00161bb:	83 f9 10             	cmp    ecx,0x10
c00161be:	0f 84 98 00 00 00    	je     c001625c <cleanupTerminatedTask(ThreadControlBlock*)+0x160>
c00161c4:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c00161ca:	66 90                	xchg   ax,ax
c00161cc:	0f b7 90 04 05 00 00 	movzx  edx,WORD PTR [eax+0x504]
c00161d3:	d3 fa                	sar    edx,cl
c00161d5:	80 e2 01             	and    dl,0x1
c00161d8:	74 de                	je     c00161b8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00161da:	8d 14 c9             	lea    edx,[ecx+ecx*8]
c00161dd:	01 d2                	add    edx,edx
c00161df:	01 ca                	add    edx,ecx
c00161e1:	8d 14 92             	lea    edx,[edx+edx*4]
c00161e4:	01 d0                	add    eax,edx
c00161e6:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c00161ec:	83 fd 07             	cmp    ebp,0x7
c00161ef:	75 c7                	jne    c00161b8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c00161f1:	05 40 02 00 00       	add    eax,0x240
c00161f6:	8b 68 11             	mov    ebp,DWORD PTR [eax+0x11]
c00161f9:	83 fd ff             	cmp    ebp,0xffffffff
c00161fc:	0f 8c ee 00 00 00    	jl     c00162f0 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f4>
c0016202:	0f 84 ac 01 00 00    	je     c00163b4 <cleanupTerminatedTask(ThreadControlBlock*)+0x2b8>
c0016208:	85 ed                	test   ebp,ebp
c001620a:	0f 84 90 01 00 00    	je     c00163a0 <cleanupTerminatedTask(ThreadControlBlock*)+0x2a4>
c0016210:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c0016212:	75 a4                	jne    c00161b8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016214:	8b 86 0a 05 00 00    	mov    eax,DWORD PTR [esi+0x50a]
c001621a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001621e:	01 d0                	add    eax,edx
c0016220:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0016224:	83 ec 0c             	sub    esp,0xc
c0016227:	89 b8 59 02 00 00    	mov    DWORD PTR [eax+0x259],edi
c001622d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016230:	8b 80 0a 05 00 00    	mov    eax,DWORD PTR [eax+0x50a]
c0016236:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001623d:	50                   	push   eax
c001623e:	e8 0d fe ff ff       	call   c0016050 <unblockTask(ThreadControlBlock*)>
c0016243:	83 c4 10             	add    esp,0x10
c0016246:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016249:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001624d:	89 f7                	mov    edi,esi
c001624f:	83 c1 01             	add    ecx,0x1
c0016252:	83 f9 10             	cmp    ecx,0x10
c0016255:	0f 85 69 ff ff ff    	jne    c00161c4 <cleanupTerminatedTask(ThreadControlBlock*)+0xc8>
c001625b:	90                   	nop
c001625c:	8b 86 06 05 00 00    	mov    eax,DWORD PTR [esi+0x506]
c0016262:	85 c0                	test   eax,eax
c0016264:	74 62                	je     c00162c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016266:	8b 96 0a 05 00 00    	mov    edx,DWORD PTR [esi+0x50a]
c001626c:	3b 82 06 05 00 00    	cmp    eax,DWORD PTR [edx+0x506]
c0016272:	74 54                	je     c00162c8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1cc>
c0016274:	83 ec 0c             	sub    esp,0xc
c0016277:	68 e4 96 02 c0       	push   0xc00296e4
c001627c:	e8 1b 95 00 00       	call   c001f79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016281:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016288:	89 c7                	mov    edi,eax
c001628a:	e8 f1 94 00 00       	call   c001f780 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001628f:	83 c4 10             	add    esp,0x10
c0016292:	84 c0                	test   al,al
c0016294:	0f 84 ce 00 00 00    	je     c0016368 <cleanupTerminatedTask(ThreadControlBlock*)+0x26c>
c001629a:	66 90                	xchg   ax,ax
c001629c:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c001629f:	8b 90 06 05 00 00    	mov    edx,DWORD PTR [eax+0x506]
c00162a5:	85 d2                	test   edx,edx
c00162a7:	74 0f                	je     c00162b8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1bc>
c00162a9:	83 ec 0c             	sub    esp,0xc
c00162ac:	8b 02                	mov    eax,DWORD PTR [edx]
c00162ae:	52                   	push   edx
c00162af:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00162b2:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00162b5:	83 c4 10             	add    esp,0x10
c00162b8:	c7 80 06 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x506],0x0
c00162c2:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c00162c5:	8d 76 00             	lea    esi,[esi+0x0]
c00162c8:	8b 9f 12 05 00 00    	mov    ebx,DWORD PTR [edi+0x512]
c00162ce:	85 db                	test   ebx,ebx
c00162d0:	74 16                	je     c00162e8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1ec>
c00162d2:	83 ec 0c             	sub    esp,0xc
c00162d5:	53                   	push   ebx
c00162d6:	e8 d7 38 ff ff       	call   c0009bb2 <VAS::~VAS()>
c00162db:	58                   	pop    eax
c00162dc:	5a                   	pop    edx
c00162dd:	6a 14                	push   0x14
c00162df:	53                   	push   ebx
c00162e0:	e8 33 45 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00162e5:	83 c4 10             	add    esp,0x10
c00162e8:	83 c4 1c             	add    esp,0x1c
c00162eb:	5b                   	pop    ebx
c00162ec:	5e                   	pop    esi
c00162ed:	5f                   	pop    edi
c00162ee:	5d                   	pop    ebp
c00162ef:	c3                   	ret    
c00162f0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00162f4:	83 ec 0c             	sub    esp,0xc
c00162f7:	68 58 23 02 c0       	push   0xc0022358
c00162fc:	e8 78 af ff ff       	call   c0011279 <KePanic(char const*)>
c0016301:	8b 73 3c             	mov    esi,DWORD PTR [ebx+0x3c]
c0016304:	83 c4 10             	add    esp,0x10
c0016307:	89 f7                	mov    edi,esi
c0016309:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001630d:	e9 a6 fe ff ff       	jmp    c00161b8 <cleanupTerminatedTask(ThreadControlBlock*)+0xbc>
c0016312:	66 90                	xchg   ax,ax
c0016314:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001631a:	39 82 06 05 00 00    	cmp    DWORD PTR [edx+0x506],eax
c0016320:	75 1e                	jne    c0016340 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016322:	83 ec 0c             	sub    esp,0xc
c0016325:	68 c0 23 02 c0       	push   0xc00223c0
c001632a:	e8 16 46 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001632f:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c0016336:	e8 11 fa ff ff       	call   c0015d4c <blockTask(TaskState)>
c001633b:	83 c4 10             	add    esp,0x10
c001633e:	66 90                	xchg   ax,ax
c0016340:	83 ec 08             	sub    esp,0x8
c0016343:	56                   	push   esi
c0016344:	68 e4 96 02 c0       	push   0xc00296e4
c0016349:	e8 12 95 00 00       	call   c001f860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001634e:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c0016355:	e8 42 94 00 00       	call   c001f79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001635a:	83 c4 10             	add    esp,0x10
c001635d:	39 f8                	cmp    eax,edi
c001635f:	0f 84 37 ff ff ff    	je     c001629c <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c0016365:	8d 76 00             	lea    esi,[esi+0x0]
c0016368:	83 ec 0c             	sub    esp,0xc
c001636b:	68 e4 96 02 c0       	push   0xc00296e4
c0016370:	e8 27 94 00 00       	call   c001f79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016375:	c7 04 24 e4 96 02 c0 	mov    DWORD PTR [esp],0xc00296e4
c001637c:	89 c6                	mov    esi,eax
c001637e:	e8 21 94 00 00       	call   c001f7a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016383:	83 c4 10             	add    esp,0x10
c0016386:	39 f3                	cmp    ebx,esi
c0016388:	74 b6                	je     c0016340 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c001638a:	8b 56 3c             	mov    edx,DWORD PTR [esi+0x3c]
c001638d:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016390:	39 82 0a 05 00 00    	cmp    DWORD PTR [edx+0x50a],eax
c0016396:	75 a8                	jne    c0016340 <cleanupTerminatedTask(ThreadControlBlock*)+0x244>
c0016398:	e9 77 ff ff ff       	jmp    c0016314 <cleanupTerminatedTask(ThreadControlBlock*)+0x218>
c001639d:	8d 76 00             	lea    esi,[esi+0x0]
c00163a0:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00163a4:	83 ec 0c             	sub    esp,0xc
c00163a7:	68 8c 23 02 c0       	push   0xc002238c
c00163ac:	e9 4b ff ff ff       	jmp    c00162fc <cleanupTerminatedTask(ThreadControlBlock*)+0x200>
c00163b1:	8d 76 00             	lea    esi,[esi+0x0]
c00163b4:	8b 36                	mov    esi,DWORD PTR [esi]
c00163b6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00163ba:	89 70 11             	mov    DWORD PTR [eax+0x11],esi
c00163bd:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c00163c0:	8b b8 0a 05 00 00    	mov    edi,DWORD PTR [eax+0x50a]
c00163c6:	01 d7                	add    edi,edx
c00163c8:	89 f8                	mov    eax,edi
c00163ca:	e9 51 fe ff ff       	jmp    c0016220 <cleanupTerminatedTask(ThreadControlBlock*)+0x124>
c00163cf:	90                   	nop

c00163d0 <cleanerTaskFunction(void*)>:
c00163d0:	53                   	push   ebx
c00163d1:	83 ec 08             	sub    esp,0x8
c00163d4:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00163d9:	83 e8 01             	sub    eax,0x1
c00163dc:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00163e1:	75 01                	jne    c00163e4 <cleanerTaskFunction(void*)+0x14>
c00163e3:	fb                   	sti    
c00163e4:	fa                   	cli    
c00163e5:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00163ea:	80 3d ac 96 02 c0 00 	cmp    BYTE PTR ds:0xc00296ac,0x0
c00163f1:	8d 50 01             	lea    edx,[eax+0x1]
c00163f4:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00163fa:	0f 84 c4 00 00 00    	je     c00164c4 <cleanerTaskFunction(void*)+0xf4>
c0016400:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016405:	85 c0                	test   eax,eax
c0016407:	75 03                	jne    c001640c <cleanerTaskFunction(void*)+0x3c>
c0016409:	fb                   	sti    
c001640a:	66 90                	xchg   ax,ax
c001640c:	c6 05 ac 96 02 c0 00 	mov    BYTE PTR ds:0xc00296ac,0x0
c0016413:	fa                   	cli    
c0016414:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c001641a:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c0016420:	83 c2 01             	add    edx,0x1
c0016423:	83 c1 01             	add    ecx,0x1
c0016426:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c001642c:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c0016432:	fa                   	cli    
c0016433:	8b 1d c8 96 02 c0    	mov    ebx,DWORD PTR ds:0xc00296c8
c0016439:	83 c3 01             	add    ebx,0x1
c001643c:	89 1d c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,ebx
c0016442:	eb 28                	jmp    c001646c <cleanerTaskFunction(void*)+0x9c>
c0016444:	83 ec 0c             	sub    esp,0xc
c0016447:	68 cc 96 02 c0       	push   0xc00296cc
c001644c:	e8 4b 93 00 00       	call   c001f79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016451:	c7 04 24 cc 96 02 c0 	mov    DWORD PTR [esp],0xc00296cc
c0016458:	89 c3                	mov    ebx,eax
c001645a:	e8 45 93 00 00       	call   c001f7a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001645f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0016462:	e8 95 fc ff ff       	call   c00160fc <cleanupTerminatedTask(ThreadControlBlock*)>
c0016467:	83 c4 10             	add    esp,0x10
c001646a:	66 90                	xchg   ax,ax
c001646c:	83 ec 0c             	sub    esp,0xc
c001646f:	68 cc 96 02 c0       	push   0xc00296cc
c0016474:	e8 07 93 00 00       	call   c001f780 <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016479:	83 c4 10             	add    esp,0x10
c001647c:	84 c0                	test   al,al
c001647e:	74 c4                	je     c0016444 <cleanerTaskFunction(void*)+0x74>
c0016480:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016485:	83 e8 01             	sub    eax,0x1
c0016488:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001648d:	75 01                	jne    c0016490 <cleanerTaskFunction(void*)+0xc0>
c001648f:	fb                   	sti    
c0016490:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016495:	83 e8 01             	sub    eax,0x1
c0016498:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c001649d:	0f 85 31 ff ff ff    	jne    c00163d4 <cleanerTaskFunction(void*)+0x4>
c00164a3:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c00164a8:	85 c0                	test   eax,eax
c00164aa:	0f 84 24 ff ff ff    	je     c00163d4 <cleanerTaskFunction(void*)+0x4>
c00164b0:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00164ba:	e8 79 f6 ff ff       	call   c0015b38 <schedule()>
c00164bf:	e9 10 ff ff ff       	jmp    c00163d4 <cleanerTaskFunction(void*)+0x4>
c00164c4:	83 ec 0c             	sub    esp,0xc
c00164c7:	6a 02                	push   0x2
c00164c9:	e8 56 f8 ff ff       	call   c0015d24 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00164ce:	83 c4 10             	add    esp,0x10
c00164d1:	e9 36 ff ff ff       	jmp    c001640c <cleanerTaskFunction(void*)+0x3c>
c00164d6:	66 90                	xchg   ax,ax

c00164d8 <terminateTask(int)>:
c00164d8:	83 ec 14             	sub    esp,0x14
c00164db:	fa                   	cli    
c00164dc:	8b 15 c8 96 02 c0    	mov    edx,DWORD PTR ds:0xc00296c8
c00164e2:	8b 0d c4 96 02 c0    	mov    ecx,DWORD PTR ds:0xc00296c4
c00164e8:	83 c2 01             	add    edx,0x1
c00164eb:	83 c1 01             	add    ecx,0x1
c00164ee:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c00164f4:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00164fa:	fa                   	cli    
c00164fb:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016500:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0016504:	83 c0 01             	add    eax,0x1
c0016507:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001650c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016511:	89 50 51             	mov    DWORD PTR [eax+0x51],edx
c0016514:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016519:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001651c:	50                   	push   eax
c001651d:	68 cc 96 02 c0       	push   0xc00296cc
c0016522:	e8 39 93 00 00       	call   c001f860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016527:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001652c:	83 c4 10             	add    esp,0x10
c001652f:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c0016536:	a1 a8 96 02 c0       	mov    eax,ds:0xc00296a8
c001653b:	85 c0                	test   eax,eax
c001653d:	74 65                	je     c00165a4 <terminateTask(int)+0xcc>
c001653f:	83 ec 0c             	sub    esp,0xc
c0016542:	c6 05 ac 96 02 c0 01 	mov    BYTE PTR ds:0xc00296ac,0x1
c0016549:	50                   	push   eax
c001654a:	e8 01 fb ff ff       	call   c0016050 <unblockTask(ThreadControlBlock*)>
c001654f:	83 c4 10             	add    esp,0x10
c0016552:	66 90                	xchg   ax,ax
c0016554:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016559:	83 e8 01             	sub    eax,0x1
c001655c:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016561:	75 01                	jne    c0016564 <terminateTask(int)+0x8c>
c0016563:	fb                   	sti    
c0016564:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016569:	83 e8 01             	sub    eax,0x1
c001656c:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c0016571:	75 09                	jne    c001657c <terminateTask(int)+0xa4>
c0016573:	83 3d c0 96 02 c0 00 	cmp    DWORD PTR ds:0xc00296c0,0x0
c001657a:	75 3c                	jne    c00165b8 <terminateTask(int)+0xe0>
c001657c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016581:	83 e8 01             	sub    eax,0x1
c0016584:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016589:	75 01                	jne    c001658c <terminateTask(int)+0xb4>
c001658b:	fb                   	sti    
c001658c:	fa                   	cli    
c001658d:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016592:	83 c0 01             	add    eax,0x1
c0016595:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001659a:	66 90                	xchg   ax,ax
c001659c:	e8 97 f5 ff ff       	call   c0015b38 <schedule()>
c00165a1:	eb d9                	jmp    c001657c <terminateTask(int)+0xa4>
c00165a3:	90                   	nop
c00165a4:	83 ec 0c             	sub    esp,0xc
c00165a7:	68 ba 22 02 c0       	push   0xc00222ba
c00165ac:	e8 94 43 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00165b1:	83 c4 10             	add    esp,0x10
c00165b4:	eb 9e                	jmp    c0016554 <terminateTask(int)+0x7c>
c00165b6:	66 90                	xchg   ax,ax
c00165b8:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c00165c2:	eb d8                	jmp    c001659c <terminateTask(int)+0xc4>

c00165c4 <Thr::terminateFromIRQ(int)>:
c00165c4:	83 ec 18             	sub    esp,0x18
c00165c7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00165cb:	50                   	push   eax
c00165cc:	e8 07 ff ff ff       	call   c00164d8 <terminateTask(int)>
c00165d1:	90                   	nop
c00165d2:	66 90                	xchg   ax,ax

c00165d4 <Semaphore::release()>:
c00165d4:	83 ec 0c             	sub    esp,0xc
c00165d7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00165db:	fa                   	cli    
c00165dc:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00165e1:	83 c0 01             	add    eax,0x1
c00165e4:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00165e9:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c00165ee:	8d 48 01             	lea    ecx,[eax+0x1]
c00165f1:	89 0d c4 96 02 c0    	mov    DWORD PTR ds:0xc00296c4,ecx
c00165f7:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c00165fa:	85 c9                	test   ecx,ecx
c00165fc:	74 42                	je     c0016640 <Semaphore::release()+0x6c>
c00165fe:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c0016601:	83 ec 0c             	sub    esp,0xc
c0016604:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0016607:	51                   	push   ecx
c0016608:	e8 43 fa ff ff       	call   c0016050 <unblockTask(ThreadControlBlock*)>
c001660d:	a1 c4 96 02 c0       	mov    eax,ds:0xc00296c4
c0016612:	83 c4 10             	add    esp,0x10
c0016615:	83 e8 01             	sub    eax,0x1
c0016618:	a3 c4 96 02 c0       	mov    ds:0xc00296c4,eax
c001661d:	85 c0                	test   eax,eax
c001661f:	75 0b                	jne    c001662c <Semaphore::release()+0x58>
c0016621:	a1 c0 96 02 c0       	mov    eax,ds:0xc00296c0
c0016626:	85 c0                	test   eax,eax
c0016628:	75 22                	jne    c001664c <Semaphore::release()+0x78>
c001662a:	66 90                	xchg   ax,ax
c001662c:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016631:	83 e8 01             	sub    eax,0x1
c0016634:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016639:	75 01                	jne    c001663c <Semaphore::release()+0x68>
c001663b:	fb                   	sti    
c001663c:	83 c4 0c             	add    esp,0xc
c001663f:	c3                   	ret    
c0016640:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0016643:	83 e9 01             	sub    ecx,0x1
c0016646:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c0016649:	eb cd                	jmp    c0016618 <Semaphore::release()+0x44>
c001664b:	90                   	nop
c001664c:	c7 05 c0 96 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00296c0,0x0
c0016656:	e8 dd f4 ff ff       	call   c0015b38 <schedule()>
c001665b:	eb cf                	jmp    c001662c <Semaphore::release()+0x58>
c001665d:	8d 76 00             	lea    esi,[esi+0x0]

c0016660 <__static_initialization_and_destruction_0(int, int)>:
c0016660:	83 ec 0c             	sub    esp,0xc
c0016663:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0016668:	0f 85 8e 00 00 00    	jne    c00166fc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001666e:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0016676:	0f 85 80 00 00 00    	jne    c00166fc <__static_initialization_and_destruction_0(int, int)+0x9c>
c001667c:	83 ec 0c             	sub    esp,0xc
c001667f:	68 e4 96 02 c0       	push   0xc00296e4
c0016684:	e8 8b 94 00 00       	call   c001fb14 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c0016689:	83 c4 10             	add    esp,0x10
c001668c:	83 ec 04             	sub    esp,0x4
c001668f:	68 90 2f 02 c0       	push   0xc0022f90
c0016694:	68 e4 96 02 c0       	push   0xc00296e4
c0016699:	68 c4 fa 01 c0       	push   0xc001fac4
c001669e:	e8 25 41 ff ff       	call   c000a7c8 <__cxa_atexit>
c00166a3:	83 c4 10             	add    esp,0x10
c00166a6:	83 ec 0c             	sub    esp,0xc
c00166a9:	68 d8 96 02 c0       	push   0xc00296d8
c00166ae:	e8 61 94 00 00       	call   c001fb14 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00166b3:	83 c4 10             	add    esp,0x10
c00166b6:	83 ec 04             	sub    esp,0x4
c00166b9:	68 90 2f 02 c0       	push   0xc0022f90
c00166be:	68 d8 96 02 c0       	push   0xc00296d8
c00166c3:	68 c4 fa 01 c0       	push   0xc001fac4
c00166c8:	e8 fb 40 ff ff       	call   c000a7c8 <__cxa_atexit>
c00166cd:	83 c4 10             	add    esp,0x10
c00166d0:	83 ec 0c             	sub    esp,0xc
c00166d3:	68 cc 96 02 c0       	push   0xc00296cc
c00166d8:	e8 37 94 00 00       	call   c001fb14 <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c00166dd:	83 c4 10             	add    esp,0x10
c00166e0:	83 ec 04             	sub    esp,0x4
c00166e3:	68 90 2f 02 c0       	push   0xc0022f90
c00166e8:	68 cc 96 02 c0       	push   0xc00296cc
c00166ed:	68 c4 fa 01 c0       	push   0xc001fac4
c00166f2:	e8 d1 40 ff ff       	call   c000a7c8 <__cxa_atexit>
c00166f7:	83 c4 10             	add    esp,0x10
c00166fa:	66 90                	xchg   ax,ax
c00166fc:	90                   	nop
c00166fd:	83 c4 0c             	add    esp,0xc
c0016700:	c3                   	ret    
c0016701:	8d 76 00             	lea    esi,[esi+0x0]

c0016704 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c0016704:	83 ec 0c             	sub    esp,0xc
c0016707:	83 ec 08             	sub    esp,0x8
c001670a:	68 ff ff 00 00       	push   0xffff
c001670f:	6a 01                	push   0x1
c0016711:	e8 4a ff ff ff       	call   c0016660 <__static_initialization_and_destruction_0(int, int)>
c0016716:	83 c4 10             	add    esp,0x10
c0016719:	83 c4 0c             	add    esp,0xc
c001671c:	c3                   	ret    

c001671d <Vm::inbv(unsigned short)>:
c001671d:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016721:	66 81 fa fe fe       	cmp    dx,0xfefe
c0016726:	75 06                	jne    c001672e <Vm::inbv(unsigned short)+0x11>
c0016728:	a0 2c 97 02 c0       	mov    al,ds:0xc002972c
c001672d:	c3                   	ret    
c001672e:	ec                   	in     al,dx
c001672f:	c3                   	ret    

c0016730 <Vm::outbv(unsigned short, unsigned char)>:
c0016730:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0016734:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016738:	66 81 fa fe fe       	cmp    dx,0xfefe
c001673d:	75 25                	jne    c0016764 <Vm::outbv(unsigned short, unsigned char)+0x34>
c001673f:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c0016745:	8d 51 01             	lea    edx,[ecx+0x1]
c0016748:	88 81 40 97 02 c0    	mov    BYTE PTR [ecx-0x3ffd68c0],al
c001674e:	89 15 2c 97 02 c0    	mov    DWORD PTR ds:0xc002972c,edx
c0016754:	83 fa 20             	cmp    edx,0x20
c0016757:	75 0c                	jne    c0016765 <Vm::outbv(unsigned short, unsigned char)+0x35>
c0016759:	c7 05 2c 97 02 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x1f
c0016763:	c3                   	ret    
c0016764:	ee                   	out    dx,al
c0016765:	c3                   	ret    

c0016766 <Vm::realToLinear(unsigned short, unsigned short)>:
c0016766:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001676b:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016770:	c1 e0 04             	shl    eax,0x4
c0016773:	01 d0                	add    eax,edx
c0016775:	c3                   	ret    

c0016776 <Vm::getSegment(unsigned int)>:
c0016776:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001677a:	c1 e8 10             	shr    eax,0x10
c001677d:	c3                   	ret    

c001677e <Vm::getOffset(unsigned int)>:
c001677e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016782:	c3                   	ret    

c0016783 <Vm::mainloop2()>:
c0016783:	83 ec 18             	sub    esp,0x18
c0016786:	fa                   	cli    
c0016787:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001678d:	6a 02                	push   0x2
c001678f:	c6 05 25 97 02 c0 01 	mov    BYTE PTR ds:0xc0029725,0x1
c0016796:	e8 89 f5 ff ff       	call   c0015d24 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001679b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00167a0:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c00167a4:	52                   	push   edx
c00167a5:	0f b7 50 59          	movzx  edx,WORD PTR [eax+0x59]
c00167a9:	52                   	push   edx
c00167aa:	0f b7 50 57          	movzx  edx,WORD PTR [eax+0x57]
c00167ae:	52                   	push   edx
c00167af:	0f b7 40 55          	movzx  eax,WORD PTR [eax+0x55]
c00167b3:	50                   	push   eax
c00167b4:	e8 56 9a fe ff       	call   c000020f <goToVM86>
c00167b9:	83 c4 2c             	add    esp,0x2c
c00167bc:	c3                   	ret    

c00167bd <Vm::mainVm8086Loop(void*)>:
c00167bd:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00167c2:	48                   	dec    eax
c00167c3:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00167c8:	75 01                	jne    c00167cb <Vm::mainVm8086Loop(void*)+0xe>
c00167ca:	fb                   	sti    
c00167cb:	eb b6                	jmp    c0016783 <Vm::mainloop2()>

c00167cd <Vm::mainloop3(unsigned long)>:
c00167cd:	83 ec 18             	sub    esp,0x18
c00167d0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167d4:	fa                   	cli    
c00167d5:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00167db:	6a 02                	push   0x2
c00167dd:	c6 05 24 97 02 c0 01 	mov    BYTE PTR ds:0xc0029724,0x1
c00167e4:	a3 20 97 02 c0       	mov    ds:0xc0029720,eax
c00167e9:	e8 36 f5 ff ff       	call   c0015d24 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c00167ee:	83 c4 1c             	add    esp,0x1c
c00167f1:	eb 90                	jmp    c0016783 <Vm::mainloop2()>

c00167f3 <Vm::initialise8086()>:
c00167f3:	83 ec 0c             	sub    esp,0xc
c00167f6:	68 80 00 00 00       	push   0x80
c00167fb:	6a 00                	push   0x0
c00167fd:	68 bd 67 01 c0       	push   0xc00167bd
c0016802:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016808:	e8 db f0 ff ff       	call   c00158e8 <Process::createThread(void (*)(void*), void*, int)>
c001680d:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c0016814:	a3 28 97 02 c0       	mov    ds:0xc0029728,eax
c0016819:	68 00 01 00 00       	push   0x100
c001681e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0016823:	6a 00                	push   0x0
c0016825:	6a 00                	push   0x0
c0016827:	ff b0 12 05 00 00    	push   DWORD PTR [eax+0x512]
c001682d:	e8 e8 36 ff ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0016832:	83 c4 2c             	add    esp,0x2c
c0016835:	c3                   	ret    

c0016836 <Vm::finish8086()>:
c0016836:	53                   	push   ebx
c0016837:	83 ec 08             	sub    esp,0x8
c001683a:	fa                   	cli    
c001683b:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c0016841:	80 3d 24 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029724,0x0
c0016848:	75 15                	jne    c001685f <Vm::finish8086()+0x29>
c001684a:	e8 e9 f2 ff ff       	call   c0015b38 <schedule()>
c001684f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016854:	48                   	dec    eax
c0016855:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001685a:	75 de                	jne    c001683a <Vm::finish8086()+0x4>
c001685c:	fb                   	sti    
c001685d:	eb db                	jmp    c001683a <Vm::finish8086()+0x4>
c001685f:	83 ec 0c             	sub    esp,0xc
c0016862:	8b 1d 20 97 02 c0    	mov    ebx,DWORD PTR ds:0xc0029720
c0016868:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c001686e:	c6 05 24 97 02 c0 00 	mov    BYTE PTR ds:0xc0029724,0x0
c0016875:	e8 d6 f7 ff ff       	call   c0016050 <unblockTask(ThreadControlBlock*)>
c001687a:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001687f:	83 c4 10             	add    esp,0x10
c0016882:	8d 50 ff             	lea    edx,[eax-0x1]
c0016885:	89 15 c8 96 02 c0    	mov    DWORD PTR ds:0xc00296c8,edx
c001688b:	85 d2                	test   edx,edx
c001688d:	75 01                	jne    c0016890 <Vm::finish8086()+0x5a>
c001688f:	fb                   	sti    
c0016890:	89 d8                	mov    eax,ebx
c0016892:	83 c4 08             	add    esp,0x8
c0016895:	5b                   	pop    ebx
c0016896:	c3                   	ret    

c0016897 <Vm::getOutput8086(unsigned char*)>:
c0016897:	57                   	push   edi
c0016898:	8b 0d 2c 97 02 c0    	mov    ecx,DWORD PTR ds:0xc002972c
c001689e:	56                   	push   esi
c001689f:	be 40 97 02 c0       	mov    esi,0xc0029740
c00168a4:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00168a8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00168aa:	a1 2c 97 02 c0       	mov    eax,ds:0xc002972c
c00168af:	5e                   	pop    esi
c00168b0:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c00168ba:	5f                   	pop    edi
c00168bb:	c3                   	ret    

c00168bc <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)>:
c00168bc:	55                   	push   ebp
c00168bd:	57                   	push   edi
c00168be:	56                   	push   esi
c00168bf:	53                   	push   ebx
c00168c0:	83 ec 0c             	sub    esp,0xc
c00168c3:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00168c7:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00168cb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00168cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00168d3:	fa                   	cli    
c00168d4:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00168da:	80 3d 25 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029725,0x0
c00168e1:	75 15                	jne    c00168f8 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x3c>
c00168e3:	e8 50 f2 ff ff       	call   c0015b38 <schedule()>
c00168e8:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00168ed:	48                   	dec    eax
c00168ee:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00168f3:	75 de                	jne    c00168d3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00168f5:	fb                   	sti    
c00168f6:	eb db                	jmp    c00168d3 <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c00168f8:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c00168fd:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c0016907:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c001690b:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c001690f:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c0016913:	66 89 58 5b          	mov    WORD PTR [eax+0x5b],bx
c0016917:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c001691b:	0f b7 ff             	movzx  edi,di
c001691e:	0f b7 f6             	movzx  esi,si
c0016921:	50                   	push   eax
c0016922:	6a 20                	push   0x20
c0016924:	6a 00                	push   0x0
c0016926:	68 40 97 02 c0       	push   0xc0029740
c001692b:	e8 c0 9b fe ff       	call   c00004f0 <memset>
c0016930:	5a                   	pop    edx
c0016931:	59                   	pop    ecx
c0016932:	57                   	push   edi
c0016933:	56                   	push   esi
c0016934:	e8 2d fe ff ff       	call   c0016766 <Vm::realToLinear(unsigned short, unsigned short)>
c0016939:	83 c4 10             	add    esp,0x10
c001693c:	89 c7                	mov    edi,eax
c001693e:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016942:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0016946:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0016948:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001694d:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016954:	48                   	dec    eax
c0016955:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001695a:	75 01                	jne    c001695d <Vm::start8086FromBuffer(unsigned char*, int, unsigned short, unsigned short, unsigned short, unsigned short)+0xa1>
c001695c:	fb                   	sti    
c001695d:	83 ec 0c             	sub    esp,0xc
c0016960:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016966:	e8 e5 f6 ff ff       	call   c0016050 <unblockTask(ThreadControlBlock*)>
c001696b:	83 c4 1c             	add    esp,0x1c
c001696e:	b0 01                	mov    al,0x1
c0016970:	5b                   	pop    ebx
c0016971:	5e                   	pop    esi
c0016972:	5f                   	pop    edi
c0016973:	5d                   	pop    ebp
c0016974:	c3                   	ret    

c0016975 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c0016975:	55                   	push   ebp
c0016976:	57                   	push   edi
c0016977:	56                   	push   esi
c0016978:	53                   	push   ebx
c0016979:	83 ec 34             	sub    esp,0x34
c001697c:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0016980:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c0016984:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c0016988:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c001698c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016990:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016994:	68 e8 23 02 c0       	push   0xc00223e8
c0016999:	e8 a7 3f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001699e:	83 c4 10             	add    esp,0x10
c00169a1:	fa                   	cli    
c00169a2:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c00169a8:	8a 1d 25 97 02 c0    	mov    bl,BYTE PTR ds:0xc0029725
c00169ae:	84 db                	test   bl,bl
c00169b0:	75 15                	jne    c00169c7 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x52>
c00169b2:	e8 81 f1 ff ff       	call   c0015b38 <schedule()>
c00169b7:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c00169bc:	48                   	dec    eax
c00169bd:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c00169c2:	75 dd                	jne    c00169a1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c00169c4:	fb                   	sti    
c00169c5:	eb da                	jmp    c00169a1 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x2c>
c00169c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00169cb:	a1 28 97 02 c0       	mov    eax,ds:0xc0029728
c00169d0:	c7 05 2c 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002972c,0x0
c00169da:	66 89 50 5b          	mov    WORD PTR [eax+0x5b],dx
c00169de:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c00169e2:	66 89 78 55          	mov    WORD PTR [eax+0x55],di
c00169e6:	66 89 70 57          	mov    WORD PTR [eax+0x57],si
c00169ea:	c6 40 5e 01          	mov    BYTE PTR [eax+0x5e],0x1
c00169ee:	50                   	push   eax
c00169ef:	6a 20                	push   0x20
c00169f1:	6a 00                	push   0x0
c00169f3:	68 40 97 02 c0       	push   0xc0029740
c00169f8:	e8 f3 9a fe ff       	call   c00004f0 <memset>
c00169fd:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0016a04:	e8 ad 10 ff ff       	call   c0007ab6 <malloc>
c0016a09:	83 c4 0c             	add    esp,0xc
c0016a0c:	89 c5                	mov    ebp,eax
c0016a0e:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c0016a14:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0016a18:	50                   	push   eax
c0016a19:	e8 24 4d ff ff       	call   c000b742 <File::File(char const*, Process*)>
c0016a1e:	83 c4 10             	add    esp,0x10
c0016a21:	85 ed                	test   ebp,ebp
c0016a23:	75 0a                	jne    c0016a2f <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xba>
c0016a25:	83 ec 0c             	sub    esp,0xc
c0016a28:	68 0a 24 02 c0       	push   0xc002240a
c0016a2d:	eb 2b                	jmp    c0016a5a <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xe5>
c0016a2f:	50                   	push   eax
c0016a30:	8d 44 24 17          	lea    eax,[esp+0x17]
c0016a34:	50                   	push   eax
c0016a35:	8d 44 24 20          	lea    eax,[esp+0x20]
c0016a39:	50                   	push   eax
c0016a3a:	55                   	push   ebp
c0016a3b:	e8 c0 50 ff ff       	call   c000bb00 <File::stat(unsigned long long*, bool*)>
c0016a40:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0016a44:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c0016a48:	83 c4 10             	add    esp,0x10
c0016a4b:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0016a50:	74 27                	je     c0016a79 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x104>
c0016a52:	83 ec 0c             	sub    esp,0xc
c0016a55:	68 1e 24 02 c0       	push   0xc002241e
c0016a5a:	e8 1a a8 ff ff       	call   c0011279 <KePanic(char const*)>
c0016a5f:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a64:	83 c4 10             	add    esp,0x10
c0016a67:	48                   	dec    eax
c0016a68:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016a6d:	85 c0                	test   eax,eax
c0016a6f:	75 01                	jne    c0016a72 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016a71:	fb                   	sti    
c0016a72:	31 db                	xor    ebx,ebx
c0016a74:	e9 90 00 00 00       	jmp    c0016b09 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016a79:	51                   	push   ecx
c0016a7a:	51                   	push   ecx
c0016a7b:	6a 01                	push   0x1
c0016a7d:	55                   	push   ebp
c0016a7e:	e8 7b 4d ff ff       	call   c000b7fe <File::open(FileOpenMode)>
c0016a83:	83 c4 10             	add    esp,0x10
c0016a86:	85 c0                	test   eax,eax
c0016a88:	74 26                	je     c0016ab0 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x13b>
c0016a8a:	83 ec 0c             	sub    esp,0xc
c0016a8d:	68 37 24 02 c0       	push   0xc0022437
c0016a92:	e8 e2 a7 ff ff       	call   c0011279 <KePanic(char const*)>
c0016a97:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016a9c:	83 c4 10             	add    esp,0x10
c0016a9f:	48                   	dec    eax
c0016aa0:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016aa5:	85 c0                	test   eax,eax
c0016aa7:	75 c9                	jne    c0016a72 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xfd>
c0016aa9:	fb                   	sti    
c0016aaa:	8a 5c 24 0c          	mov    bl,BYTE PTR [esp+0xc]
c0016aae:	eb 59                	jmp    c0016b09 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x194>
c0016ab0:	0f b7 ff             	movzx  edi,di
c0016ab3:	50                   	push   eax
c0016ab4:	0f b7 f6             	movzx  esi,si
c0016ab7:	50                   	push   eax
c0016ab8:	57                   	push   edi
c0016ab9:	56                   	push   esi
c0016aba:	e8 a7 fc ff ff       	call   c0016766 <Vm::realToLinear(unsigned short, unsigned short)>
c0016abf:	5a                   	pop    edx
c0016ac0:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c0016ac3:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0016ac7:	51                   	push   ecx
c0016ac8:	50                   	push   eax
c0016ac9:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016acd:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0016ad1:	55                   	push   ebp
c0016ad2:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016ad5:	83 c4 14             	add    esp,0x14
c0016ad8:	55                   	push   ebp
c0016ad9:	e8 7e 4d ff ff       	call   c000b85c <File::close()>
c0016ade:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c0016ae3:	83 c4 10             	add    esp,0x10
c0016ae6:	48                   	dec    eax
c0016ae7:	c6 05 25 97 02 c0 00 	mov    BYTE PTR ds:0xc0029725,0x0
c0016aee:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0016af3:	85 c0                	test   eax,eax
c0016af5:	75 01                	jne    c0016af8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x183>
c0016af7:	fb                   	sti    
c0016af8:	83 ec 0c             	sub    esp,0xc
c0016afb:	ff 35 28 97 02 c0    	push   DWORD PTR ds:0xc0029728
c0016b01:	e8 4a f5 ff ff       	call   c0016050 <unblockTask(ThreadControlBlock*)>
c0016b06:	83 c4 10             	add    esp,0x10
c0016b09:	83 c4 2c             	add    esp,0x2c
c0016b0c:	88 d8                	mov    al,bl
c0016b0e:	5b                   	pop    ebx
c0016b0f:	5e                   	pop    esi
c0016b10:	5f                   	pop    edi
c0016b11:	5d                   	pop    ebp
c0016b12:	c3                   	ret    

c0016b13 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c0016b13:	57                   	push   edi
c0016b14:	56                   	push   esi
c0016b15:	53                   	push   ebx
c0016b16:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0016b1a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016b1e:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0016b22:	83 e8 06             	sub    eax,0x6
c0016b25:	0f b7 c0             	movzx  eax,ax
c0016b28:	50                   	push   eax
c0016b29:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c0016b2e:	50                   	push   eax
c0016b2f:	e8 32 fc ff ff       	call   c0016766 <Vm::realToLinear(unsigned short, unsigned short)>
c0016b34:	5a                   	pop    edx
c0016b35:	8b 73 38             	mov    esi,DWORD PTR [ebx+0x38]
c0016b38:	59                   	pop    ecx
c0016b39:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0016b3c:	8d 51 fa             	lea    edx,[ecx-0x6]
c0016b3f:	81 e2 ff ff 00 00    	and    edx,0xffff
c0016b45:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c0016b48:	8d 56 02             	lea    edx,[esi+0x2]
c0016b4b:	66 89 10             	mov    WORD PTR [eax],dx
c0016b4e:	66 8b 53 3c          	mov    dx,WORD PTR [ebx+0x3c]
c0016b52:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c0016b56:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c0016b59:	66 8b 53 40          	mov    dx,WORD PTR [ebx+0x40]
c0016b5d:	0f b6 f1             	movzx  esi,cl
c0016b60:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016b64:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016b6a:	80 7a 5d 00          	cmp    BYTE PTR [edx+0x5d],0x0
c0016b6e:	0f b6 d5             	movzx  edx,ch
c0016b71:	74 0a                	je     c0016b7d <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x6a>
c0016b73:	c1 e2 08             	shl    edx,0x8
c0016b76:	09 f2                	or     edx,esi
c0016b78:	80 ce 02             	or     dh,0x2
c0016b7b:	eb 08                	jmp    c0016b85 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x72>
c0016b7d:	c1 e2 08             	shl    edx,0x8
c0016b80:	09 f2                	or     edx,esi
c0016b82:	80 e6 fd             	and    dh,0xfd
c0016b85:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c0016b89:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016b8e:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016b92:	0f b7 04 bd 02 00 00 00 	movzx  eax,WORD PTR [edi*4+0x2]
c0016b9a:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c0016b9d:	0f b7 04 bd 00 00 00 00 	movzx  eax,WORD PTR [edi*4+0x0]
c0016ba5:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0016ba8:	5b                   	pop    ebx
c0016ba9:	5e                   	pop    esi
c0016baa:	5f                   	pop    edi
c0016bab:	c3                   	ret    

c0016bac <Vm::readByteFromReal(unsigned short, unsigned short)>:
c0016bac:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016bb1:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016bb6:	c1 e0 04             	shl    eax,0x4
c0016bb9:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c0016bbc:	c3                   	ret    

c0016bbd <Vm::readWordFromReal(unsigned short, unsigned short)>:
c0016bbd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016bc2:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016bc7:	c1 e0 04             	shl    eax,0x4
c0016bca:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c0016bce:	c3                   	ret    

c0016bcf <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c0016bcf:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016bd4:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016bd9:	c1 e0 04             	shl    eax,0x4
c0016bdc:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c0016bdf:	c3                   	ret    

c0016be0 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c0016be0:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016be5:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016bea:	c1 e0 04             	shl    eax,0x4
c0016bed:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016bf1:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c0016bf4:	c3                   	ret    

c0016bf5 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c0016bf5:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016bfa:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016bff:	c1 e0 04             	shl    eax,0x4
c0016c02:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c06:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c0016c0a:	c3                   	ret    

c0016c0b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c0016c0b:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0016c10:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c0016c15:	c1 e0 04             	shl    eax,0x4
c0016c18:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016c1c:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c0016c1f:	c3                   	ret    

c0016c20 <Vm::faultHandler(regs*)>:
c0016c20:	55                   	push   ebp
c0016c21:	57                   	push   edi
c0016c22:	56                   	push   esi
c0016c23:	53                   	push   ebx
c0016c24:	83 ec 2c             	sub    esp,0x2c
c0016c27:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0016c2b:	8b 43 3c             	mov    eax,DWORD PTR [ebx+0x3c]
c0016c2e:	0f b7 53 38          	movzx  edx,WORD PTR [ebx+0x38]
c0016c32:	0f b7 f8             	movzx  edi,ax
c0016c35:	52                   	push   edx
c0016c36:	0f b7 c0             	movzx  eax,ax
c0016c39:	50                   	push   eax
c0016c3a:	e8 27 fb ff ff       	call   c0016766 <Vm::realToLinear(unsigned short, unsigned short)>
c0016c3f:	5a                   	pop    edx
c0016c40:	59                   	pop    ecx
c0016c41:	89 c1                	mov    ecx,eax
c0016c43:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016c46:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c4a:	0f b7 44 24 10       	movzx  eax,WORD PTR [esp+0x10]
c0016c4f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0016c53:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0016c56:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0016c5a:	0f b7 44 24 14       	movzx  eax,WORD PTR [esp+0x14]
c0016c5f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0016c63:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0016c67:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0016c6b:	e8 f6 fa ff ff       	call   c0016766 <Vm::realToLinear(unsigned short, unsigned short)>
c0016c70:	5e                   	pop    esi
c0016c71:	be 06 00 00 00       	mov    esi,0x6
c0016c76:	5d                   	pop    ebp
c0016c77:	31 ed                	xor    ebp,ebp
c0016c79:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0016c7e:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0016c81:	81 fa 9d 00 00 00    	cmp    edx,0x9d
c0016c87:	0f 84 74 02 00 00    	je     c0016f01 <Vm::faultHandler(regs*)+0x2e1>
c0016c8d:	0f 87 94 00 00 00    	ja     c0016d27 <Vm::faultHandler(regs*)+0x107>
c0016c93:	83 fa 66             	cmp    edx,0x66
c0016c96:	0f 84 e2 01 00 00    	je     c0016e7e <Vm::faultHandler(regs*)+0x25e>
c0016c9c:	77 47                	ja     c0016ce5 <Vm::faultHandler(regs*)+0xc5>
c0016c9e:	83 fa 36             	cmp    edx,0x36
c0016ca1:	0f 84 ca 01 00 00    	je     c0016e71 <Vm::faultHandler(regs*)+0x251>
c0016ca7:	77 1a                	ja     c0016cc3 <Vm::faultHandler(regs*)+0xa3>
c0016ca9:	83 fa 26             	cmp    edx,0x26
c0016cac:	0f 84 98 01 00 00    	je     c0016e4a <Vm::faultHandler(regs*)+0x22a>
c0016cb2:	83 fa 2e             	cmp    edx,0x2e
c0016cb5:	0f 85 21 06 00 00    	jne    c00172dc <Vm::faultHandler(regs*)+0x6bc>
c0016cbb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016cbe:	31 f6                	xor    esi,esi
c0016cc0:	41                   	inc    ecx
c0016cc1:	eb bb                	jmp    c0016c7e <Vm::faultHandler(regs*)+0x5e>
c0016cc3:	83 fa 64             	cmp    edx,0x64
c0016cc6:	0f 84 8b 01 00 00    	je     c0016e57 <Vm::faultHandler(regs*)+0x237>
c0016ccc:	0f 87 92 01 00 00    	ja     c0016e64 <Vm::faultHandler(regs*)+0x244>
c0016cd2:	83 fa 3e             	cmp    edx,0x3e
c0016cd5:	0f 85 01 06 00 00    	jne    c00172dc <Vm::faultHandler(regs*)+0x6bc>
c0016cdb:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016cde:	be 01 00 00 00       	mov    esi,0x1
c0016ce3:	eb db                	jmp    c0016cc0 <Vm::faultHandler(regs*)+0xa0>
c0016ce5:	83 fa 6d             	cmp    edx,0x6d
c0016ce8:	0f 84 34 03 00 00    	je     c0017022 <Vm::faultHandler(regs*)+0x402>
c0016cee:	77 17                	ja     c0016d07 <Vm::faultHandler(regs*)+0xe7>
c0016cf0:	83 fa 67             	cmp    edx,0x67
c0016cf3:	0f 84 92 01 00 00    	je     c0016e8b <Vm::faultHandler(regs*)+0x26b>
c0016cf9:	83 fa 6c             	cmp    edx,0x6c
c0016cfc:	0f 84 b1 02 00 00    	je     c0016fb3 <Vm::faultHandler(regs*)+0x393>
c0016d02:	e9 d5 05 00 00       	jmp    c00172dc <Vm::faultHandler(regs*)+0x6bc>
c0016d07:	83 fa 6f             	cmp    edx,0x6f
c0016d0a:	0f 84 3d 04 00 00    	je     c001714d <Vm::faultHandler(regs*)+0x52d>
c0016d10:	0f 82 9f 03 00 00    	jb     c00170b5 <Vm::faultHandler(regs*)+0x495>
c0016d16:	81 fa 9c 00 00 00    	cmp    edx,0x9c
c0016d1c:	0f 84 76 01 00 00    	je     c0016e98 <Vm::faultHandler(regs*)+0x278>
c0016d22:	e9 b5 05 00 00       	jmp    c00172dc <Vm::faultHandler(regs*)+0x6bc>
c0016d27:	81 fa ec 00 00 00    	cmp    edx,0xec
c0016d2d:	0f 84 51 05 00 00    	je     c0017284 <Vm::faultHandler(regs*)+0x664>
c0016d33:	0f 87 a9 00 00 00    	ja     c0016de2 <Vm::faultHandler(regs*)+0x1c2>
c0016d39:	81 fa e4 00 00 00    	cmp    edx,0xe4
c0016d3f:	0f 84 d0 04 00 00    	je     c0017215 <Vm::faultHandler(regs*)+0x5f5>
c0016d45:	77 78                	ja     c0016dbf <Vm::faultHandler(regs*)+0x19f>
c0016d47:	81 fa cd 00 00 00    	cmp    edx,0xcd
c0016d4d:	0f 84 0e 02 00 00    	je     c0016f61 <Vm::faultHandler(regs*)+0x341>
c0016d53:	81 fa cf 00 00 00    	cmp    edx,0xcf
c0016d59:	0f 85 7d 05 00 00    	jne    c00172dc <Vm::faultHandler(regs*)+0x6bc>
c0016d5f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0016d63:	89 d1                	mov    ecx,edx
c0016d65:	0f b6 10             	movzx  edx,BYTE PTR [eax]
c0016d68:	c1 e1 08             	shl    ecx,0x8
c0016d6b:	09 ca                	or     edx,ecx
c0016d6d:	89 53 38             	mov    DWORD PTR [ebx+0x38],edx
c0016d70:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0016d74:	89 d1                	mov    ecx,edx
c0016d76:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0016d7a:	c1 e1 08             	shl    ecx,0x8
c0016d7d:	09 ca                	or     edx,ecx
c0016d7f:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c0016d82:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
c0016d86:	89 d1                	mov    ecx,edx
c0016d88:	0f b6 50 04          	movzx  edx,BYTE PTR [eax+0x4]
c0016d8c:	c1 e1 08             	shl    ecx,0x8
c0016d8f:	09 ca                	or     edx,ecx
c0016d91:	81 ca 00 02 02 00    	or     edx,0x20200
c0016d97:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016d9a:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
c0016d9e:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016da4:	d1 e8                	shr    eax,1
c0016da6:	83 e0 01             	and    eax,0x1
c0016da9:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016dac:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016daf:	83 c0 06             	add    eax,0x6
c0016db2:	25 ff ff 00 00       	and    eax,0xffff
c0016db7:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016dba:	e9 19 05 00 00       	jmp    c00172d8 <Vm::faultHandler(regs*)+0x6b8>
c0016dbf:	81 fa e6 00 00 00    	cmp    edx,0xe6
c0016dc5:	0f 84 8f 04 00 00    	je     c001725a <Vm::faultHandler(regs*)+0x63a>
c0016dcb:	0f 82 60 04 00 00    	jb     c0017231 <Vm::faultHandler(regs*)+0x611>
c0016dd1:	81 fa e7 00 00 00    	cmp    edx,0xe7
c0016dd7:	0f 84 94 04 00 00    	je     c0017271 <Vm::faultHandler(regs*)+0x651>
c0016ddd:	e9 fa 04 00 00       	jmp    c00172dc <Vm::faultHandler(regs*)+0x6bc>
c0016de2:	81 fa ef 00 00 00    	cmp    edx,0xef
c0016de8:	0f 84 d7 04 00 00    	je     c00172c5 <Vm::faultHandler(regs*)+0x6a5>
c0016dee:	77 2e                	ja     c0016e1e <Vm::faultHandler(regs*)+0x1fe>
c0016df0:	81 fa ed 00 00 00    	cmp    edx,0xed
c0016df6:	0f 84 a4 04 00 00    	je     c00172a0 <Vm::faultHandler(regs*)+0x680>
c0016dfc:	81 fa ee 00 00 00    	cmp    edx,0xee
c0016e02:	0f 85 d4 04 00 00    	jne    c00172dc <Vm::faultHandler(regs*)+0x6bc>
c0016e08:	50                   	push   eax
c0016e09:	50                   	push   eax
c0016e0a:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0016e0e:	50                   	push   eax
c0016e0f:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016e13:	50                   	push   eax
c0016e14:	e8 17 f9 ff ff       	call   c0016730 <Vm::outbv(unsigned short, unsigned char)>
c0016e19:	e9 9f 04 00 00       	jmp    c00172bd <Vm::faultHandler(regs*)+0x69d>
c0016e1e:	81 fa fa 00 00 00    	cmp    edx,0xfa
c0016e24:	0f 84 6d 01 00 00    	je     c0016f97 <Vm::faultHandler(regs*)+0x377>
c0016e2a:	81 fa fb 00 00 00    	cmp    edx,0xfb
c0016e30:	0f 84 6f 01 00 00    	je     c0016fa5 <Vm::faultHandler(regs*)+0x385>
c0016e36:	81 fa f3 00 00 00    	cmp    edx,0xf3
c0016e3c:	0f 85 9a 04 00 00    	jne    c00172dc <Vm::faultHandler(regs*)+0x6bc>
c0016e42:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e45:	e9 76 fe ff ff       	jmp    c0016cc0 <Vm::faultHandler(regs*)+0xa0>
c0016e4a:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e4d:	be 02 00 00 00       	mov    esi,0x2
c0016e52:	e9 69 fe ff ff       	jmp    c0016cc0 <Vm::faultHandler(regs*)+0xa0>
c0016e57:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e5a:	be 03 00 00 00       	mov    esi,0x3
c0016e5f:	e9 5c fe ff ff       	jmp    c0016cc0 <Vm::faultHandler(regs*)+0xa0>
c0016e64:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e67:	be 04 00 00 00       	mov    esi,0x4
c0016e6c:	e9 4f fe ff ff       	jmp    c0016cc0 <Vm::faultHandler(regs*)+0xa0>
c0016e71:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e74:	be 05 00 00 00       	mov    esi,0x5
c0016e79:	e9 42 fe ff ff       	jmp    c0016cc0 <Vm::faultHandler(regs*)+0xa0>
c0016e7e:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e81:	bd 01 00 00 00       	mov    ebp,0x1
c0016e86:	e9 35 fe ff ff       	jmp    c0016cc0 <Vm::faultHandler(regs*)+0xa0>
c0016e8b:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c0016e8e:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0016e93:	e9 28 fe ff ff       	jmp    c0016cc0 <Vm::faultHandler(regs*)+0xa0>
c0016e98:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0016e9b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016e9f:	83 e5 01             	and    ebp,0x1
c0016ea2:	74 30                	je     c0016ed4 <Vm::faultHandler(regs*)+0x2b4>
c0016ea4:	83 e9 04             	sub    ecx,0x4
c0016ea7:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016ead:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016eb3:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016eb6:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016eb9:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016ebf:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016ec3:	0f 84 0c 04 00 00    	je     c00172d5 <Vm::faultHandler(regs*)+0x6b5>
c0016ec9:	80 ce 02             	or     dh,0x2
c0016ecc:	89 50 fc             	mov    DWORD PTR [eax-0x4],edx
c0016ecf:	e9 01 04 00 00       	jmp    c00172d5 <Vm::faultHandler(regs*)+0x6b5>
c0016ed4:	83 e9 02             	sub    ecx,0x2
c0016ed7:	81 e1 ff ff 00 00    	and    ecx,0xffff
c0016edd:	89 4b 44             	mov    DWORD PTR [ebx+0x44],ecx
c0016ee0:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016ee4:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c0016eea:	80 79 5d 00          	cmp    BYTE PTR [ecx+0x5d],0x0
c0016eee:	74 05                	je     c0016ef5 <Vm::faultHandler(regs*)+0x2d5>
c0016ef0:	80 ce 02             	or     dh,0x2
c0016ef3:	eb 03                	jmp    c0016ef8 <Vm::faultHandler(regs*)+0x2d8>
c0016ef5:	80 e6 fd             	and    dh,0xfd
c0016ef8:	66 89 50 fe          	mov    WORD PTR [eax-0x2],dx
c0016efc:	e9 d4 03 00 00       	jmp    c00172d5 <Vm::faultHandler(regs*)+0x6b5>
c0016f01:	83 e5 01             	and    ebp,0x1
c0016f04:	74 2a                	je     c0016f30 <Vm::faultHandler(regs*)+0x310>
c0016f06:	8b 10                	mov    edx,DWORD PTR [eax]
c0016f08:	81 e2 ff 0d 00 00    	and    edx,0xdff
c0016f0e:	81 ca 00 02 02 00    	or     edx,0x20200
c0016f14:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016f17:	8b 00                	mov    eax,DWORD PTR [eax]
c0016f19:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016f1f:	c1 e8 09             	shr    eax,0x9
c0016f22:	83 e0 01             	and    eax,0x1
c0016f25:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016f28:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016f2b:	83 c0 04             	add    eax,0x4
c0016f2e:	eb 24                	jmp    c0016f54 <Vm::faultHandler(regs*)+0x334>
c0016f30:	0f b7 10             	movzx  edx,WORD PTR [eax]
c0016f33:	81 ca 00 02 02 00    	or     edx,0x20200
c0016f39:	89 53 40             	mov    DWORD PTR [ebx+0x40],edx
c0016f3c:	0f b7 00             	movzx  eax,WORD PTR [eax]
c0016f3f:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c0016f45:	c1 e8 09             	shr    eax,0x9
c0016f48:	83 e0 01             	and    eax,0x1
c0016f4b:	88 42 5d             	mov    BYTE PTR [edx+0x5d],al
c0016f4e:	8b 43 44             	mov    eax,DWORD PTR [ebx+0x44]
c0016f51:	83 c0 02             	add    eax,0x2
c0016f54:	25 ff ff 00 00       	and    eax,0xffff
c0016f59:	89 43 44             	mov    DWORD PTR [ebx+0x44],eax
c0016f5c:	e9 74 03 00 00       	jmp    c00172d5 <Vm::faultHandler(regs*)+0x6b5>
c0016f61:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016f65:	3d ee 00 00 00       	cmp    eax,0xee
c0016f6a:	75 10                	jne    c0016f7c <Vm::faultHandler(regs*)+0x35c>
c0016f6c:	83 ec 0c             	sub    esp,0xc
c0016f6f:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0016f72:	e8 56 f8 ff ff       	call   c00167cd <Vm::mainloop3(unsigned long)>
c0016f77:	e9 44 03 00 00       	jmp    c00172c0 <Vm::faultHandler(regs*)+0x6a0>
c0016f7c:	83 ec 0c             	sub    esp,0xc
c0016f7f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0016f83:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016f87:	51                   	push   ecx
c0016f88:	50                   	push   eax
c0016f89:	53                   	push   ebx
c0016f8a:	e8 84 fb ff ff       	call   c0016b13 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c0016f8f:	83 c4 20             	add    esp,0x20
c0016f92:	e9 41 03 00 00       	jmp    c00172d8 <Vm::faultHandler(regs*)+0x6b8>
c0016f97:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016f9c:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c0016fa0:	e9 30 03 00 00       	jmp    c00172d5 <Vm::faultHandler(regs*)+0x6b5>
c0016fa5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016faa:	c6 40 5d 01          	mov    BYTE PTR [eax+0x5d],0x1
c0016fae:	e9 22 03 00 00       	jmp    c00172d5 <Vm::faultHandler(regs*)+0x6b5>
c0016fb3:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0016fb6:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0016fbb:	74 2b                	je     c0016fe8 <Vm::faultHandler(regs*)+0x3c8>
c0016fbd:	81 7b 10 ff ff 00 00 	cmp    DWORD PTR [ebx+0x10],0xffff
c0016fc4:	76 22                	jbe    c0016fe8 <Vm::faultHandler(regs*)+0x3c8>
c0016fc6:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c0016fca:	50                   	push   eax
c0016fcb:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0016fcf:	50                   	push   eax
c0016fd0:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0016fd4:	50                   	push   eax
c0016fd5:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0016fd9:	50                   	push   eax
c0016fda:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0016fde:	50                   	push   eax
c0016fdf:	6a 6c                	push   0x6c
c0016fe1:	6a 6c                	push   0x6c
c0016fe3:	e9 bd 01 00 00       	jmp    c00171a5 <Vm::faultHandler(regs*)+0x585>
c0016fe8:	83 ec 0c             	sub    esp,0xc
c0016feb:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0016fef:	0f b7 f6             	movzx  esi,si
c0016ff2:	50                   	push   eax
c0016ff3:	e8 25 f7 ff ff       	call   c001671d <Vm::inbv(unsigned short)>
c0016ff8:	83 c4 0c             	add    esp,0xc
c0016ffb:	0f b6 c0             	movzx  eax,al
c0016ffe:	50                   	push   eax
c0016fff:	0f b7 43 10          	movzx  eax,WORD PTR [ebx+0x10]
c0017003:	50                   	push   eax
c0017004:	56                   	push   esi
c0017005:	e8 d6 fb ff ff       	call   c0016be0 <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001700a:	83 c4 10             	add    esp,0x10
c001700d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017010:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c0017014:	74 03                	je     c0017019 <Vm::faultHandler(regs*)+0x3f9>
c0017016:	48                   	dec    eax
c0017017:	eb 01                	jmp    c001701a <Vm::faultHandler(regs*)+0x3fa>
c0017019:	40                   	inc    eax
c001701a:	0f b7 c0             	movzx  eax,ax
c001701d:	e9 8b 00 00 00       	jmp    c00170ad <Vm::faultHandler(regs*)+0x48d>
c0017022:	8b 73 08             	mov    esi,DWORD PTR [ebx+0x8]
c0017025:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017028:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001702d:	74 29                	je     c0017058 <Vm::faultHandler(regs*)+0x438>
c001702f:	3d ff ff 00 00       	cmp    eax,0xffff
c0017034:	76 22                	jbe    c0017058 <Vm::faultHandler(regs*)+0x438>
c0017036:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001703a:	50                   	push   eax
c001703b:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c001703f:	50                   	push   eax
c0017040:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017044:	50                   	push   eax
c0017045:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017049:	50                   	push   eax
c001704a:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001704e:	50                   	push   eax
c001704f:	6a 6d                	push   0x6d
c0017051:	6a 6d                	push   0x6d
c0017053:	e9 4d 01 00 00       	jmp    c00171a5 <Vm::faultHandler(regs*)+0x585>
c0017058:	0f b7 c8             	movzx  ecx,ax
c001705b:	0f b7 f6             	movzx  esi,si
c001705e:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c0017061:	83 e5 01             	and    ebp,0x1
c0017064:	74 20                	je     c0017086 <Vm::faultHandler(regs*)+0x466>
c0017066:	ed                   	in     eax,dx
c0017067:	55                   	push   ebp
c0017068:	50                   	push   eax
c0017069:	51                   	push   ecx
c001706a:	56                   	push   esi
c001706b:	e8 9b fb ff ff       	call   c0016c0b <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c0017070:	83 c4 10             	add    esp,0x10
c0017073:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0017076:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001707a:	74 05                	je     c0017081 <Vm::faultHandler(regs*)+0x461>
c001707c:	83 e8 04             	sub    eax,0x4
c001707f:	eb 27                	jmp    c00170a8 <Vm::faultHandler(regs*)+0x488>
c0017081:	83 c0 04             	add    eax,0x4
c0017084:	eb 22                	jmp    c00170a8 <Vm::faultHandler(regs*)+0x488>
c0017086:	66 ed                	in     ax,dx
c0017088:	0f b7 c0             	movzx  eax,ax
c001708b:	57                   	push   edi
c001708c:	50                   	push   eax
c001708d:	51                   	push   ecx
c001708e:	56                   	push   esi
c001708f:	e8 61 fb ff ff       	call   c0016bf5 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c0017094:	83 c4 10             	add    esp,0x10
c0017097:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001709a:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001709e:	74 05                	je     c00170a5 <Vm::faultHandler(regs*)+0x485>
c00170a0:	83 e8 02             	sub    eax,0x2
c00170a3:	eb 03                	jmp    c00170a8 <Vm::faultHandler(regs*)+0x488>
c00170a5:	83 c0 02             	add    eax,0x2
c00170a8:	25 ff ff 00 00       	and    eax,0xffff
c00170ad:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00170b0:	e9 20 02 00 00       	jmp    c00172d5 <Vm::faultHandler(regs*)+0x6b5>
c00170b5:	8d 46 ff             	lea    eax,[esi-0x1]
c00170b8:	0f b6 f0             	movzx  esi,al
c00170bb:	83 fe 05             	cmp    esi,0x5
c00170be:	77 23                	ja     c00170e3 <Vm::faultHandler(regs*)+0x4c3>
c00170c0:	ff 24 b5 ac 24 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddb54]
c00170c7:	0f b7 7c 24 14       	movzx  edi,WORD PTR [esp+0x14]
c00170cc:	eb 15                	jmp    c00170e3 <Vm::faultHandler(regs*)+0x4c3>
c00170ce:	0f b7 7b 0c          	movzx  edi,WORD PTR [ebx+0xc]
c00170d2:	eb 0f                	jmp    c00170e3 <Vm::faultHandler(regs*)+0x4c3>
c00170d4:	0f b7 7b 08          	movzx  edi,WORD PTR [ebx+0x8]
c00170d8:	eb 09                	jmp    c00170e3 <Vm::faultHandler(regs*)+0x4c3>
c00170da:	0f b7 7b 04          	movzx  edi,WORD PTR [ebx+0x4]
c00170de:	eb 03                	jmp    c00170e3 <Vm::faultHandler(regs*)+0x4c3>
c00170e0:	0f b7 3b             	movzx  edi,WORD PTR [ebx]
c00170e3:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00170e6:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c00170eb:	74 29                	je     c0017116 <Vm::faultHandler(regs*)+0x4f6>
c00170ed:	3d ff ff 00 00       	cmp    eax,0xffff
c00170f2:	76 22                	jbe    c0017116 <Vm::faultHandler(regs*)+0x4f6>
c00170f4:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00170f8:	50                   	push   eax
c00170f9:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00170fd:	50                   	push   eax
c00170fe:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017102:	50                   	push   eax
c0017103:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c0017107:	50                   	push   eax
c0017108:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c001710c:	50                   	push   eax
c001710d:	6a 6e                	push   0x6e
c001710f:	6a 6e                	push   0x6e
c0017111:	e9 8f 00 00 00       	jmp    c00171a5 <Vm::faultHandler(regs*)+0x585>
c0017116:	0f b7 c0             	movzx  eax,ax
c0017119:	52                   	push   edx
c001711a:	52                   	push   edx
c001711b:	50                   	push   eax
c001711c:	57                   	push   edi
c001711d:	e8 8a fa ff ff       	call   c0016bac <Vm::readByteFromReal(unsigned short, unsigned short)>
c0017122:	59                   	pop    ecx
c0017123:	0f b6 c0             	movzx  eax,al
c0017126:	5e                   	pop    esi
c0017127:	50                   	push   eax
c0017128:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c001712c:	50                   	push   eax
c001712d:	e8 fe f5 ff ff       	call   c0016730 <Vm::outbv(unsigned short, unsigned char)>
c0017132:	83 c4 10             	add    esp,0x10
c0017135:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0017138:	f6 43 41 04          	test   BYTE PTR [ebx+0x41],0x4
c001713c:	74 03                	je     c0017141 <Vm::faultHandler(regs*)+0x521>
c001713e:	48                   	dec    eax
c001713f:	eb 01                	jmp    c0017142 <Vm::faultHandler(regs*)+0x522>
c0017141:	40                   	inc    eax
c0017142:	0f b7 c0             	movzx  eax,ax
c0017145:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0017148:	e9 88 01 00 00       	jmp    c00172d5 <Vm::faultHandler(regs*)+0x6b5>
c001714d:	8d 46 ff             	lea    eax,[esi-0x1]
c0017150:	0f b6 f0             	movzx  esi,al
c0017153:	83 fe 05             	cmp    esi,0x5
c0017156:	77 1e                	ja     c0017176 <Vm::faultHandler(regs*)+0x556>
c0017158:	ff 24 b5 c4 24 02 c0 	jmp    DWORD PTR [esi*4-0x3ffddb3c]
c001715f:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0017163:	eb 11                	jmp    c0017176 <Vm::faultHandler(regs*)+0x556>
c0017165:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0017168:	eb 0c                	jmp    c0017176 <Vm::faultHandler(regs*)+0x556>
c001716a:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c001716d:	eb 07                	jmp    c0017176 <Vm::faultHandler(regs*)+0x556>
c001716f:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0017172:	eb 02                	jmp    c0017176 <Vm::faultHandler(regs*)+0x556>
c0017174:	8b 3b                	mov    edi,DWORD PTR [ebx]
c0017176:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c0017179:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c001717e:	74 37                	je     c00171b7 <Vm::faultHandler(regs*)+0x597>
c0017180:	81 fe ff ff 00 00    	cmp    esi,0xffff
c0017186:	76 2f                	jbe    c00171b7 <Vm::faultHandler(regs*)+0x597>
c0017188:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c001718c:	50                   	push   eax
c001718d:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c0017191:	50                   	push   eax
c0017192:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c0017196:	50                   	push   eax
c0017197:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c001719b:	50                   	push   eax
c001719c:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00171a0:	50                   	push   eax
c00171a1:	6a 6f                	push   0x6f
c00171a3:	6a 6f                	push   0x6f
c00171a5:	68 50 24 02 c0       	push   0xc0022450
c00171aa:	e8 96 37 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00171af:	83 c4 20             	add    esp,0x20
c00171b2:	e9 83 01 00 00       	jmp    c001733a <Vm::faultHandler(regs*)+0x71a>
c00171b7:	0f b7 d7             	movzx  edx,di
c00171ba:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c00171bd:	0f b7 c6             	movzx  eax,si
c00171c0:	81 e1 00 04 00 00    	and    ecx,0x400
c00171c6:	8b 7b 24             	mov    edi,DWORD PTR [ebx+0x24]
c00171c9:	83 e5 01             	and    ebp,0x1
c00171cc:	74 1d                	je     c00171eb <Vm::faultHandler(regs*)+0x5cb>
c00171ce:	55                   	push   ebp
c00171cf:	55                   	push   ebp
c00171d0:	50                   	push   eax
c00171d1:	52                   	push   edx
c00171d2:	e8 f8 f9 ff ff       	call   c0016bcf <Vm::readDwordFromReal(unsigned short, unsigned short)>
c00171d7:	83 c4 10             	add    esp,0x10
c00171da:	89 fa                	mov    edx,edi
c00171dc:	ef                   	out    dx,eax
c00171dd:	85 c9                	test   ecx,ecx
c00171df:	74 05                	je     c00171e6 <Vm::faultHandler(regs*)+0x5c6>
c00171e1:	83 ee 04             	sub    esi,0x4
c00171e4:	eb 21                	jmp    c0017207 <Vm::faultHandler(regs*)+0x5e7>
c00171e6:	83 c6 04             	add    esi,0x4
c00171e9:	eb 1c                	jmp    c0017207 <Vm::faultHandler(regs*)+0x5e7>
c00171eb:	55                   	push   ebp
c00171ec:	55                   	push   ebp
c00171ed:	50                   	push   eax
c00171ee:	52                   	push   edx
c00171ef:	e8 c9 f9 ff ff       	call   c0016bbd <Vm::readWordFromReal(unsigned short, unsigned short)>
c00171f4:	83 c4 10             	add    esp,0x10
c00171f7:	89 fa                	mov    edx,edi
c00171f9:	66 ef                	out    dx,ax
c00171fb:	85 c9                	test   ecx,ecx
c00171fd:	74 05                	je     c0017204 <Vm::faultHandler(regs*)+0x5e4>
c00171ff:	83 ee 02             	sub    esi,0x2
c0017202:	eb 03                	jmp    c0017207 <Vm::faultHandler(regs*)+0x5e7>
c0017204:	83 c6 02             	add    esi,0x2
c0017207:	81 e6 ff ff 00 00    	and    esi,0xffff
c001720d:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0017210:	e9 c0 00 00 00       	jmp    c00172d5 <Vm::faultHandler(regs*)+0x6b5>
c0017215:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001721c:	83 ec 0c             	sub    esp,0xc
c001721f:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017223:	50                   	push   eax
c0017224:	e8 f4 f4 ff ff       	call   c001671d <Vm::inbv(unsigned short)>
c0017229:	0f b6 c0             	movzx  eax,al
c001722c:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001722f:	eb 3a                	jmp    c001726b <Vm::faultHandler(regs*)+0x64b>
c0017231:	83 e5 01             	and    ebp,0x1
c0017234:	74 07                	je     c001723d <Vm::faultHandler(regs*)+0x61d>
c0017236:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001723a:	ed                   	in     eax,dx
c001723b:	eb 14                	jmp    c0017251 <Vm::faultHandler(regs*)+0x631>
c001723d:	8b 73 2c             	mov    esi,DWORD PTR [ebx+0x2c]
c0017240:	66 31 f6             	xor    si,si
c0017243:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0017246:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c001724a:	66 ed                	in     ax,dx
c001724c:	0f b7 c0             	movzx  eax,ax
c001724f:	09 f0                	or     eax,esi
c0017251:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0017254:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0017258:	eb 7e                	jmp    c00172d8 <Vm::faultHandler(regs*)+0x6b8>
c001725a:	52                   	push   edx
c001725b:	52                   	push   edx
c001725c:	0f b6 43 2c          	movzx  eax,BYTE PTR [ebx+0x2c]
c0017260:	50                   	push   eax
c0017261:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0017265:	50                   	push   eax
c0017266:	e8 c5 f4 ff ff       	call   c0016730 <Vm::outbv(unsigned short, unsigned char)>
c001726b:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c001726f:	eb 4f                	jmp    c00172c0 <Vm::faultHandler(regs*)+0x6a0>
c0017271:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0017274:	0f b6 51 01          	movzx  edx,BYTE PTR [ecx+0x1]
c0017278:	83 e5 01             	and    ebp,0x1
c001727b:	74 03                	je     c0017280 <Vm::faultHandler(regs*)+0x660>
c001727d:	ef                   	out    dx,eax
c001727e:	eb d4                	jmp    c0017254 <Vm::faultHandler(regs*)+0x634>
c0017280:	66 ef                	out    dx,ax
c0017282:	eb d0                	jmp    c0017254 <Vm::faultHandler(regs*)+0x634>
c0017284:	81 63 2c 00 ff ff ff 	and    DWORD PTR [ebx+0x2c],0xffffff00
c001728b:	83 ec 0c             	sub    esp,0xc
c001728e:	0f b7 43 24          	movzx  eax,WORD PTR [ebx+0x24]
c0017292:	50                   	push   eax
c0017293:	e8 85 f4 ff ff       	call   c001671d <Vm::inbv(unsigned short)>
c0017298:	0f b6 c0             	movzx  eax,al
c001729b:	09 43 2c             	or     DWORD PTR [ebx+0x2c],eax
c001729e:	eb 1d                	jmp    c00172bd <Vm::faultHandler(regs*)+0x69d>
c00172a0:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00172a3:	83 e5 01             	and    ebp,0x1
c00172a6:	74 03                	je     c00172ab <Vm::faultHandler(regs*)+0x68b>
c00172a8:	ed                   	in     eax,dx
c00172a9:	eb 0d                	jmp    c00172b8 <Vm::faultHandler(regs*)+0x698>
c00172ab:	66 ed                	in     ax,dx
c00172ad:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00172b0:	0f b7 c0             	movzx  eax,ax
c00172b3:	66 31 d2             	xor    dx,dx
c00172b6:	09 d0                	or     eax,edx
c00172b8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00172bb:	eb 18                	jmp    c00172d5 <Vm::faultHandler(regs*)+0x6b5>
c00172bd:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172c0:	83 c4 10             	add    esp,0x10
c00172c3:	eb 13                	jmp    c00172d8 <Vm::faultHandler(regs*)+0x6b8>
c00172c5:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00172c8:	8b 53 24             	mov    edx,DWORD PTR [ebx+0x24]
c00172cb:	83 e5 01             	and    ebp,0x1
c00172ce:	74 03                	je     c00172d3 <Vm::faultHandler(regs*)+0x6b3>
c00172d0:	ef                   	out    dx,eax
c00172d1:	eb 02                	jmp    c00172d5 <Vm::faultHandler(regs*)+0x6b5>
c00172d3:	66 ef                	out    dx,ax
c00172d5:	ff 43 38             	inc    DWORD PTR [ebx+0x38]
c00172d8:	b0 01                	mov    al,0x1
c00172da:	eb 60                	jmp    c001733c <Vm::faultHandler(regs*)+0x71c>
c00172dc:	0f b6 41 05          	movzx  eax,BYTE PTR [ecx+0x5]
c00172e0:	50                   	push   eax
c00172e1:	0f b6 41 04          	movzx  eax,BYTE PTR [ecx+0x4]
c00172e5:	50                   	push   eax
c00172e6:	0f b6 41 03          	movzx  eax,BYTE PTR [ecx+0x3]
c00172ea:	50                   	push   eax
c00172eb:	0f b6 41 02          	movzx  eax,BYTE PTR [ecx+0x2]
c00172ef:	50                   	push   eax
c00172f0:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00172f4:	50                   	push   eax
c00172f5:	52                   	push   edx
c00172f6:	52                   	push   edx
c00172f7:	68 7d 24 02 c0       	push   0xc002247d
c00172fc:	e8 44 36 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017301:	83 c4 20             	add    esp,0x20
c0017304:	83 ec 0c             	sub    esp,0xc
c0017307:	6a 60                	push   0x60
c0017309:	e8 0f f4 ff ff       	call   c001671d <Vm::inbv(unsigned short)>
c001730e:	83 c4 10             	add    esp,0x10
c0017311:	0f b6 d0             	movzx  edx,al
c0017314:	83 fa 1c             	cmp    edx,0x1c
c0017317:	74 05                	je     c001731e <Vm::faultHandler(regs*)+0x6fe>
c0017319:	83 fa 5a             	cmp    edx,0x5a
c001731c:	75 e6                	jne    c0017304 <Vm::faultHandler(regs*)+0x6e4>
c001731e:	0f b6 c0             	movzx  eax,al
c0017321:	83 f8 1c             	cmp    eax,0x1c
c0017324:	74 05                	je     c001732b <Vm::faultHandler(regs*)+0x70b>
c0017326:	83 f8 5a             	cmp    eax,0x5a
c0017329:	75 0f                	jne    c001733a <Vm::faultHandler(regs*)+0x71a>
c001732b:	83 ec 0c             	sub    esp,0xc
c001732e:	6a 60                	push   0x60
c0017330:	e8 e8 f3 ff ff       	call   c001671d <Vm::inbv(unsigned short)>
c0017335:	83 c4 10             	add    esp,0x10
c0017338:	eb e4                	jmp    c001731e <Vm::faultHandler(regs*)+0x6fe>
c001733a:	31 c0                	xor    eax,eax
c001733c:	83 c4 2c             	add    esp,0x2c
c001733f:	5b                   	pop    ebx
c0017340:	5e                   	pop    esi
c0017341:	5f                   	pop    edi
c0017342:	5d                   	pop    ebp
c0017343:	c3                   	ret    

c0017344 <noCopro(unsigned long)>:
c0017344:	c3                   	ret    

c0017345 <nmiHandler(regs*, void*)>:
c0017345:	83 ec 0c             	sub    esp,0xc
c0017348:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001734d:	83 ec 0c             	sub    esp,0xc
c0017350:	50                   	push   eax
c0017351:	e8 60 ff fe ff       	call   c00072b6 <Computer::handleNMI()>
c0017356:	83 c4 10             	add    esp,0x10
c0017359:	90                   	nop
c001735a:	83 c4 0c             	add    esp,0xc
c001735d:	c3                   	ret    

c001735e <doubleFault(regs*, void*)>:
c001735e:	55                   	push   ebp
c001735f:	89 e5                	mov    ebp,esp
c0017361:	83 ec 08             	sub    esp,0x8
c0017364:	83 ec 0c             	sub    esp,0xc
c0017367:	68 dc 24 02 c0       	push   0xc00224dc
c001736c:	e8 08 9f ff ff       	call   c0011279 <KePanic(char const*)>
c0017371:	83 c4 10             	add    esp,0x10
c0017374:	90                   	nop
c0017375:	c9                   	leave  
c0017376:	c3                   	ret    

c0017377 <displayDebugInfo(regs*)>:
c0017377:	83 ec 1c             	sub    esp,0x1c
c001737a:	0f 20 c0             	mov    eax,cr0
c001737d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017381:	0f 20 d0             	mov    eax,cr2
c0017384:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017388:	0f 20 d8             	mov    eax,cr3
c001738b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001738f:	0f 20 e0             	mov    eax,cr4
c0017392:	89 04 24             	mov    DWORD PTR [esp],eax
c0017395:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017399:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c001739c:	83 ec 08             	sub    esp,0x8
c001739f:	50                   	push   eax
c00173a0:	68 f8 24 02 c0       	push   0xc00224f8
c00173a5:	e8 9b 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00173aa:	83 c4 10             	add    esp,0x10
c00173ad:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173b1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c00173b4:	83 ec 08             	sub    esp,0x8
c00173b7:	50                   	push   eax
c00173b8:	68 e9 24 02 c0       	push   0xc00224e9
c00173bd:	e8 83 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00173c2:	83 c4 10             	add    esp,0x10
c00173c5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173c9:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00173cc:	83 ec 08             	sub    esp,0x8
c00173cf:	50                   	push   eax
c00173d0:	68 f4 24 02 c0       	push   0xc00224f4
c00173d5:	e8 6b 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00173da:	83 c4 10             	add    esp,0x10
c00173dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173e1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00173e4:	83 ec 08             	sub    esp,0x8
c00173e7:	50                   	push   eax
c00173e8:	68 03 25 02 c0       	push   0xc0022503
c00173ed:	e8 53 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c00173f2:	83 c4 10             	add    esp,0x10
c00173f5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00173f9:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
c00173fc:	83 ec 08             	sub    esp,0x8
c00173ff:	50                   	push   eax
c0017400:	68 0e 25 02 c0       	push   0xc002250e
c0017405:	e8 3b 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001740a:	83 c4 10             	add    esp,0x10
c001740d:	83 ec 08             	sub    esp,0x8
c0017410:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0017414:	68 19 25 02 c0       	push   0xc0022519
c0017419:	e8 27 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001741e:	83 c4 10             	add    esp,0x10
c0017421:	83 ec 08             	sub    esp,0x8
c0017424:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0017428:	68 24 25 02 c0       	push   0xc0022524
c001742d:	e8 13 35 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017432:	83 c4 10             	add    esp,0x10
c0017435:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017439:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001743c:	c1 e0 05             	shl    eax,0x5
c001743f:	8d 90 a0 34 02 c0    	lea    edx,[eax-0x3ffdcb60]
c0017445:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017449:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c001744c:	83 ec 04             	sub    esp,0x4
c001744f:	52                   	push   edx
c0017450:	50                   	push   eax
c0017451:	68 2f 25 02 c0       	push   0xc002252f
c0017456:	e8 ea 34 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001745b:	83 c4 10             	add    esp,0x10
c001745e:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017463:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017469:	83 ec 0c             	sub    esp,0xc
c001746c:	50                   	push   eax
c001746d:	e8 e7 12 ff ff       	call   c0008759 <setActiveTerminal(VgaText*)>
c0017472:	83 c4 10             	add    esp,0x10
c0017475:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001747a:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017480:	83 ec 08             	sub    esp,0x8
c0017483:	68 3e 25 02 c0       	push   0xc002253e
c0017488:	50                   	push   eax
c0017489:	e8 18 16 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001748e:	83 c4 10             	add    esp,0x10
c0017491:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017496:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001749c:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00174a0:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
c00174a3:	83 ec 08             	sub    esp,0x8
c00174a6:	52                   	push   edx
c00174a7:	50                   	push   eax
c00174a8:	e8 b3 15 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00174ad:	83 c4 10             	add    esp,0x10
c00174b0:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174b5:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174bb:	83 ec 08             	sub    esp,0x8
c00174be:	68 4c 25 02 c0       	push   0xc002254c
c00174c3:	50                   	push   eax
c00174c4:	e8 dd 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00174c9:	83 c4 10             	add    esp,0x10
c00174cc:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174d1:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174d7:	ba 00 20 00 c2       	mov    edx,0xc2002000
c00174dc:	8b 12                	mov    edx,DWORD PTR [edx]
c00174de:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00174e1:	83 c2 0c             	add    edx,0xc
c00174e4:	83 ec 08             	sub    esp,0x8
c00174e7:	52                   	push   edx
c00174e8:	50                   	push   eax
c00174e9:	e8 b8 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00174ee:	83 c4 10             	add    esp,0x10
c00174f1:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00174f6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00174fc:	83 ec 08             	sub    esp,0x8
c00174ff:	68 55 25 02 c0       	push   0xc0022555
c0017504:	50                   	push   eax
c0017505:	e8 9c 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001750a:	83 c4 10             	add    esp,0x10
c001750d:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017512:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017518:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001751c:	8b 52 38             	mov    edx,DWORD PTR [edx+0x38]
c001751f:	83 ec 08             	sub    esp,0x8
c0017522:	52                   	push   edx
c0017523:	50                   	push   eax
c0017524:	e8 37 15 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017529:	83 c4 10             	add    esp,0x10
c001752c:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017531:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017537:	83 ec 08             	sub    esp,0x8
c001753a:	68 5d 25 02 c0       	push   0xc002255d
c001753f:	50                   	push   eax
c0017540:	e8 61 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017545:	83 c4 10             	add    esp,0x10
c0017548:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001754d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017553:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017557:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
c001755a:	83 ec 08             	sub    esp,0x8
c001755d:	52                   	push   edx
c001755e:	50                   	push   eax
c001755f:	e8 fc 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017564:	83 c4 10             	add    esp,0x10
c0017567:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001756c:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017572:	83 ec 08             	sub    esp,0x8
c0017575:	68 65 25 02 c0       	push   0xc0022565
c001757a:	50                   	push   eax
c001757b:	e8 26 15 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017580:	83 c4 10             	add    esp,0x10
c0017583:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017588:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001758e:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017592:	8b 52 44             	mov    edx,DWORD PTR [edx+0x44]
c0017595:	83 ec 08             	sub    esp,0x8
c0017598:	52                   	push   edx
c0017599:	50                   	push   eax
c001759a:	e8 c1 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c001759f:	83 c4 10             	add    esp,0x10
c00175a2:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175a7:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175ad:	83 ec 08             	sub    esp,0x8
c00175b0:	68 6d 25 02 c0       	push   0xc002256d
c00175b5:	50                   	push   eax
c00175b6:	e8 eb 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00175bb:	83 c4 10             	add    esp,0x10
c00175be:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175c3:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175c9:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00175cd:	8b 52 3c             	mov    edx,DWORD PTR [edx+0x3c]
c00175d0:	83 ec 08             	sub    esp,0x8
c00175d3:	52                   	push   edx
c00175d4:	50                   	push   eax
c00175d5:	e8 86 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00175da:	83 c4 10             	add    esp,0x10
c00175dd:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175e2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00175e8:	83 ec 08             	sub    esp,0x8
c00175eb:	68 75 25 02 c0       	push   0xc0022575
c00175f0:	50                   	push   eax
c00175f1:	e8 b0 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00175f6:	83 c4 10             	add    esp,0x10
c00175f9:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00175fe:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017604:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017608:	8b 52 34             	mov    edx,DWORD PTR [edx+0x34]
c001760b:	83 ec 08             	sub    esp,0x8
c001760e:	52                   	push   edx
c001760f:	50                   	push   eax
c0017610:	e8 4b 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017615:	83 c4 10             	add    esp,0x10
c0017618:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001761d:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017623:	83 ec 08             	sub    esp,0x8
c0017626:	68 7d 25 02 c0       	push   0xc002257d
c001762b:	50                   	push   eax
c001762c:	e8 75 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017631:	83 c4 10             	add    esp,0x10
c0017634:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017639:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001763f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017643:	8b 52 40             	mov    edx,DWORD PTR [edx+0x40]
c0017646:	83 ec 08             	sub    esp,0x8
c0017649:	52                   	push   edx
c001764a:	50                   	push   eax
c001764b:	e8 10 14 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017650:	83 c4 10             	add    esp,0x10
c0017653:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017658:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001765e:	83 ec 08             	sub    esp,0x8
c0017661:	68 85 25 02 c0       	push   0xc0022585
c0017666:	50                   	push   eax
c0017667:	e8 3a 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001766c:	83 c4 10             	add    esp,0x10
c001766f:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0017674:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001767a:	83 ec 08             	sub    esp,0x8
c001767d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017681:	50                   	push   eax
c0017682:	e8 d9 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c0017687:	83 c4 10             	add    esp,0x10
c001768a:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001768f:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c0017695:	83 ec 08             	sub    esp,0x8
c0017698:	68 8e 25 02 c0       	push   0xc002258e
c001769d:	50                   	push   eax
c001769e:	e8 03 14 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00176a3:	83 c4 10             	add    esp,0x10
c00176a6:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176ab:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176b1:	83 ec 08             	sub    esp,0x8
c00176b4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176b8:	50                   	push   eax
c00176b9:	e8 a2 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00176be:	83 c4 10             	add    esp,0x10
c00176c1:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176c6:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176cc:	83 ec 08             	sub    esp,0x8
c00176cf:	68 96 25 02 c0       	push   0xc0022596
c00176d4:	50                   	push   eax
c00176d5:	e8 cc 13 ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c00176da:	83 c4 10             	add    esp,0x10
c00176dd:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c00176e2:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00176e8:	83 ec 08             	sub    esp,0x8
c00176eb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00176ef:	50                   	push   eax
c00176f0:	e8 6b 13 ff ff       	call   c0008a60 <VgaText::putx(unsigned int)>
c00176f5:	83 c4 10             	add    esp,0x10
c00176f8:	fa                   	cli    
c00176f9:	f4                   	hlt    
c00176fa:	eb fe                	jmp    c00176fa <displayDebugInfo(regs*)+0x383>

c00176fc <HalSystemIdle()>:
c00176fc:	56                   	push   esi
c00176fd:	53                   	push   ebx
c00176fe:	83 ec 14             	sub    esp,0x14
c0017701:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017706:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001770c:	8a 80 8e 11 00 00    	mov    al,BYTE PTR [eax+0x118e]
c0017712:	83 e0 04             	and    eax,0x4
c0017715:	0f b6 c0             	movzx  eax,al
c0017718:	85 c0                	test   eax,eax
c001771a:	0f 95 c0             	setne  al
c001771d:	0f b6 c0             	movzx  eax,al
c0017720:	85 c0                	test   eax,eax
c0017722:	74 4c                	je     c0017770 <HalSystemIdle()+0x74>
c0017724:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017729:	83 ec 08             	sub    esp,0x8
c001772c:	68 e1 00 00 00       	push   0xe1
c0017731:	50                   	push   eax
c0017732:	e8 89 f9 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017737:	83 c4 10             	add    esp,0x10
c001773a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001773e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017742:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017747:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001774b:	83 e2 02             	and    edx,0x2
c001774e:	89 d3                	mov    ebx,edx
c0017750:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017754:	83 e2 00             	and    edx,0x0
c0017757:	89 d6                	mov    esi,edx
c0017759:	56                   	push   esi
c001775a:	53                   	push   ebx
c001775b:	68 e1 00 00 00       	push   0xe1
c0017760:	50                   	push   eax
c0017761:	e8 86 f9 fe ff       	call   c00070ec <Computer::wrmsr(unsigned int, unsigned long long)>
c0017766:	83 c4 10             	add    esp,0x10
c0017769:	e8 26 8a fe ff       	call   c0000194 <doTPAUSE>
c001776e:	eb 01                	jmp    c0017771 <HalSystemIdle()+0x75>
c0017770:	f4                   	hlt    
c0017771:	90                   	nop
c0017772:	83 c4 14             	add    esp,0x14
c0017775:	5b                   	pop    ebx
c0017776:	5e                   	pop    esi
c0017777:	c3                   	ret    

c0017778 <displayProgramFault(char const*)>:
c0017778:	83 ec 0c             	sub    esp,0xc
c001777b:	83 ec 0c             	sub    esp,0xc
c001777e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017782:	e8 be 31 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017787:	83 c4 10             	add    esp,0x10
c001778a:	b8 00 20 00 c2       	mov    eax,0xc2002000
c001778f:	8b 00                	mov    eax,DWORD PTR [eax]
c0017791:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0017794:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c001779a:	85 c0                	test   eax,eax
c001779c:	74 21                	je     c00177bf <displayProgramFault(char const*)+0x47>
c001779e:	b8 00 20 00 c2       	mov    eax,0xc2002000
c00177a3:	8b 00                	mov    eax,DWORD PTR [eax]
c00177a5:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00177a8:	8b 80 06 05 00 00    	mov    eax,DWORD PTR [eax+0x506]
c00177ae:	6a 04                	push   0x4
c00177b0:	6a 0f                	push   0xf
c00177b2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00177b6:	50                   	push   eax
c00177b7:	e8 5c 13 ff ff       	call   c0008b18 <VgaText::puts(char const*, VgaColour, VgaColour)>
c00177bc:	83 c4 10             	add    esp,0x10
c00177bf:	90                   	nop
c00177c0:	83 c4 0c             	add    esp,0xc
c00177c3:	c3                   	ret    

c00177c4 <gpFault(regs*, void*)>:
c00177c4:	83 ec 1c             	sub    esp,0x1c
c00177c7:	c7 05 74 97 02 c0 20 6c 01 c0 	mov    DWORD PTR ds:0xc0029774,0xc0016c20
c00177d1:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c00177d6:	85 c0                	test   eax,eax
c00177d8:	74 1e                	je     c00177f8 <gpFault(regs*, void*)+0x34>
c00177da:	a1 74 97 02 c0       	mov    eax,ds:0xc0029774
c00177df:	83 ec 0c             	sub    esp,0xc
c00177e2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00177e6:	ff d0                	call   eax
c00177e8:	83 c4 10             	add    esp,0x10
c00177eb:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00177ef:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00177f4:	85 c0                	test   eax,eax
c00177f6:	75 2e                	jne    c0017826 <gpFault(regs*, void*)+0x62>
c00177f8:	83 ec 0c             	sub    esp,0xc
c00177fb:	68 9e 25 02 c0       	push   0xc002259e
c0017800:	e8 73 ff ff ff       	call   c0017778 <displayProgramFault(char const*)>
c0017805:	83 c4 10             	add    esp,0x10
c0017808:	83 ec 0c             	sub    esp,0xc
c001780b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001780f:	e8 63 fb ff ff       	call   c0017377 <displayDebugInfo(regs*)>
c0017814:	83 c4 10             	add    esp,0x10
c0017817:	83 ec 0c             	sub    esp,0xc
c001781a:	6a 00                	push   0x0
c001781c:	e8 a3 ed ff ff       	call   c00165c4 <Thr::terminateFromIRQ(int)>
c0017821:	83 c4 10             	add    esp,0x10
c0017824:	eb 01                	jmp    c0017827 <gpFault(regs*, void*)+0x63>
c0017826:	90                   	nop
c0017827:	83 c4 1c             	add    esp,0x1c
c001782a:	c3                   	ret    

c001782b <pgFault(regs*, void*)>:
c001782b:	83 ec 1c             	sub    esp,0x1c
c001782e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017832:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c0017835:	0f 20 d0             	mov    eax,cr2
c0017838:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001783c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017840:	83 ec 04             	sub    esp,0x4
c0017843:	52                   	push   edx
c0017844:	50                   	push   eax
c0017845:	68 7c 26 02 c0       	push   0xc002267c
c001784a:	e8 f6 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001784f:	83 c4 10             	add    esp,0x10
c0017852:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0017857:	8b 00                	mov    eax,DWORD PTR [eax]
c0017859:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c001785c:	8b 80 12 05 00 00    	mov    eax,DWORD PTR [eax+0x512]
c0017862:	0f 20 d2             	mov    edx,cr2
c0017865:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0017869:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001786d:	83 ec 08             	sub    esp,0x8
c0017870:	52                   	push   edx
c0017871:	50                   	push   eax
c0017872:	e8 19 2b ff ff       	call   c000a390 <VAS::tryLoadBackOffDisk(unsigned long)>
c0017877:	83 c4 10             	add    esp,0x10
c001787a:	0f b6 c0             	movzx  eax,al
c001787d:	85 c0                	test   eax,eax
c001787f:	75 2e                	jne    c00178af <pgFault(regs*, void*)+0x84>
c0017881:	83 ec 0c             	sub    esp,0xc
c0017884:	68 b7 25 02 c0       	push   0xc00225b7
c0017889:	e8 ea fe ff ff       	call   c0017778 <displayProgramFault(char const*)>
c001788e:	83 c4 10             	add    esp,0x10
c0017891:	83 ec 0c             	sub    esp,0xc
c0017894:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017898:	e8 da fa ff ff       	call   c0017377 <displayDebugInfo(regs*)>
c001789d:	83 c4 10             	add    esp,0x10
c00178a0:	83 ec 0c             	sub    esp,0xc
c00178a3:	6a 00                	push   0x0
c00178a5:	e8 1a ed ff ff       	call   c00165c4 <Thr::terminateFromIRQ(int)>
c00178aa:	83 c4 10             	add    esp,0x10
c00178ad:	eb 01                	jmp    c00178b0 <pgFault(regs*, void*)+0x85>
c00178af:	90                   	nop
c00178b0:	83 c4 1c             	add    esp,0x1c
c00178b3:	c3                   	ret    

c00178b4 <otherISRHandler(regs*, void*)>:
c00178b4:	83 ec 0c             	sub    esp,0xc
c00178b7:	83 ec 0c             	sub    esp,0xc
c00178ba:	68 a4 26 02 c0       	push   0xc00226a4
c00178bf:	e8 b4 fe ff ff       	call   c0017778 <displayProgramFault(char const*)>
c00178c4:	83 c4 10             	add    esp,0x10
c00178c7:	83 ec 0c             	sub    esp,0xc
c00178ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00178ce:	e8 a4 fa ff ff       	call   c0017377 <displayDebugInfo(regs*)>
c00178d3:	83 c4 10             	add    esp,0x10
c00178d6:	83 ec 0c             	sub    esp,0xc
c00178d9:	6a 00                	push   0x0
c00178db:	e8 e4 ec ff ff       	call   c00165c4 <Thr::terminateFromIRQ(int)>
c00178e0:	83 c4 10             	add    esp,0x10
c00178e3:	90                   	nop
c00178e4:	83 c4 0c             	add    esp,0xc
c00178e7:	c3                   	ret    

c00178e8 <opcodeFault(regs*, void*)>:
c00178e8:	55                   	push   ebp
c00178e9:	89 e5                	mov    ebp,esp
c00178eb:	83 ec 08             	sub    esp,0x8
c00178ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00178f1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00178f4:	83 ec 08             	sub    esp,0x8
c00178f7:	50                   	push   eax
c00178f8:	68 c2 25 02 c0       	push   0xc00225c2
c00178fd:	e8 43 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017902:	83 c4 10             	add    esp,0x10
c0017905:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001790a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0017910:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c0017916:	0f b6 c0             	movzx  eax,al
c0017919:	85 c0                	test   eax,eax
c001791b:	74 21                	je     c001793e <opcodeFault(regs*, void*)+0x56>
c001791d:	83 ec 0c             	sub    esp,0xc
c0017920:	68 cc 26 02 c0       	push   0xc00226cc
c0017925:	e8 1b 30 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001792a:	83 c4 10             	add    esp,0x10
c001792d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017930:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0017933:	8d 50 19             	lea    edx,[eax+0x19]
c0017936:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0017939:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001793c:	eb 2b                	jmp    c0017969 <opcodeFault(regs*, void*)+0x81>
c001793e:	83 ec 0c             	sub    esp,0xc
c0017941:	68 d0 25 02 c0       	push   0xc00225d0
c0017946:	e8 2d fe ff ff       	call   c0017778 <displayProgramFault(char const*)>
c001794b:	83 c4 10             	add    esp,0x10
c001794e:	83 ec 0c             	sub    esp,0xc
c0017951:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0017954:	e8 1e fa ff ff       	call   c0017377 <displayDebugInfo(regs*)>
c0017959:	83 c4 10             	add    esp,0x10
c001795c:	83 ec 0c             	sub    esp,0xc
c001795f:	6a 00                	push   0x0
c0017961:	e8 5e ec ff ff       	call   c00165c4 <Thr::terminateFromIRQ(int)>
c0017966:	83 c4 10             	add    esp,0x10
c0017969:	c9                   	leave  
c001796a:	c3                   	ret    

c001796b <i386SaveCoprocessor(void*)>:
c001796b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001796f:	83 c0 3f             	add    eax,0x3f
c0017972:	83 e0 c0             	and    eax,0xffffffc0
c0017975:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0017979:	ff 25 70 97 02 c0    	jmp    DWORD PTR ds:0xc0029770

c001797f <i386LoadCoprocessor(void*)>:
c001797f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017983:	83 c0 3f             	add    eax,0x3f
c0017986:	83 e0 c0             	and    eax,0xffffffc0
c0017989:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001798d:	ff 25 6c 97 02 c0    	jmp    DWORD PTR ds:0xc002976c

c0017993 <x87EmulHandler(regs*, void*)>:
c0017993:	53                   	push   ebx
c0017994:	83 ec 08             	sub    esp,0x8
c0017997:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001799c:	80 78 5e 00          	cmp    BYTE PTR [eax+0x5e],0x0
c00179a0:	74 10                	je     c00179b2 <x87EmulHandler(regs*, void*)+0x1f>
c00179a2:	83 ec 0c             	sub    esp,0xc
c00179a5:	68 dd 25 02 c0       	push   0xc00225dd
c00179aa:	e8 ca 98 ff ff       	call   c0011279 <KePanic(char const*)>
c00179af:	83 c4 10             	add    esp,0x10
c00179b2:	0f 20 c0             	mov    eax,cr0
c00179b5:	a8 08                	test   al,0x8
c00179b7:	74 59                	je     c0017a12 <x87EmulHandler(regs*, void*)+0x7f>
c00179b9:	0f 06                	clts   
c00179bb:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c00179c0:	85 c0                	test   eax,eax
c00179c2:	74 0e                	je     c00179d2 <x87EmulHandler(regs*, void*)+0x3f>
c00179c4:	83 ec 0c             	sub    esp,0xc
c00179c7:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00179ca:	e8 9c ff ff ff       	call   c001796b <i386SaveCoprocessor(void*)>
c00179cf:	83 c4 10             	add    esp,0x10
c00179d2:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c00179d8:	83 7b 55 00          	cmp    DWORD PTR [ebx+0x55],0x0
c00179dc:	75 12                	jne    c00179f0 <x87EmulHandler(regs*, void*)+0x5d>
c00179de:	83 ec 0c             	sub    esp,0xc
c00179e1:	68 40 02 00 00       	push   0x240
c00179e6:	e8 cb 00 ff ff       	call   c0007ab6 <malloc>
c00179eb:	89 43 55             	mov    DWORD PTR [ebx+0x55],eax
c00179ee:	eb 10                	jmp    c0017a00 <x87EmulHandler(regs*, void*)+0x6d>
c00179f0:	83 ec 0c             	sub    esp,0xc
c00179f3:	a1 68 97 02 c0       	mov    eax,ds:0xc0029768
c00179f8:	ff 70 55             	push   DWORD PTR [eax+0x55]
c00179fb:	e8 7f ff ff ff       	call   c001797f <i386LoadCoprocessor(void*)>
c0017a00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0017a05:	83 c4 10             	add    esp,0x10
c0017a08:	a3 68 97 02 c0       	mov    ds:0xc0029768,eax
c0017a0d:	83 c4 08             	add    esp,0x8
c0017a10:	5b                   	pop    ebx
c0017a11:	c3                   	ret    
c0017a12:	83 ec 0c             	sub    esp,0xc
c0017a15:	68 f1 25 02 c0       	push   0xc00225f1
c0017a1a:	e8 26 2f ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017a1f:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0017a27:	83 c4 18             	add    esp,0x18
c0017a2a:	5b                   	pop    ebx
c0017a2b:	e9 94 eb ff ff       	jmp    c00165c4 <Thr::terminateFromIRQ(int)>

c0017a30 <HalInitialiseCoprocessor()>:
c0017a30:	83 ec 10             	sub    esp,0x10
c0017a33:	c7 05 68 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029768,0x0
c0017a3d:	6a 00                	push   0x0
c0017a3f:	68 93 79 01 c0       	push   0xc0017993
c0017a44:	6a 07                	push   0x7
c0017a46:	e8 33 51 ff ff       	call   c000cb7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017a4b:	e8 50 70 00 00       	call   c001eaa0 <avxDetect>
c0017a50:	83 c4 10             	add    esp,0x10
c0017a53:	85 c0                	test   eax,eax
c0017a55:	74 1c                	je     c0017a73 <HalInitialiseCoprocessor()+0x43>
c0017a57:	c7 05 70 97 02 c0 ca ea 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001eaca
c0017a61:	c7 05 6c 97 02 c0 db ea 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001eadb
c0017a6b:	83 c4 0c             	add    esp,0xc
c0017a6e:	e9 79 70 00 00       	jmp    c001eaec <avxInit>
c0017a73:	e8 b8 73 00 00       	call   c001ee30 <absolutelyNoChanceInHell>
c0017a78:	85 c0                	test   eax,eax
c0017a7a:	74 1c                	je     c0017a98 <HalInitialiseCoprocessor()+0x68>
c0017a7c:	c7 05 70 97 02 c0 48 ee 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ee48
c0017a86:	c7 05 6c 97 02 c0 50 ee 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ee50
c0017a90:	83 c4 0c             	add    esp,0xc
c0017a93:	e9 c0 73 00 00       	jmp    c001ee58 <sseInit>
c0017a98:	e8 d9 73 00 00       	call   c001ee76 <x87Detect>
c0017a9d:	85 c0                	test   eax,eax
c0017a9f:	74 1c                	je     c0017abd <HalInitialiseCoprocessor()+0x8d>
c0017aa1:	c7 05 70 97 02 c0 91 ee 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc001ee91
c0017aab:	c7 05 6c 97 02 c0 98 ee 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc001ee98
c0017ab5:	83 c4 0c             	add    esp,0xc
c0017ab8:	e9 e2 73 00 00       	jmp    c001ee9f <x87Init>
c0017abd:	c7 05 70 97 02 c0 44 73 01 c0 	mov    DWORD PTR ds:0xc0029770,0xc0017344
c0017ac7:	c7 05 6c 97 02 c0 44 73 01 c0 	mov    DWORD PTR ds:0xc002976c,0xc0017344
c0017ad1:	0f 20 c0             	mov    eax,cr0
c0017ad4:	83 c8 04             	or     eax,0x4
c0017ad7:	0f 22 c0             	mov    cr0,eax
c0017ada:	83 c4 0c             	add    esp,0xc
c0017add:	c3                   	ret    

c0017ade <HalPanic(char const*)>:
c0017ade:	53                   	push   ebx
c0017adf:	83 ec 10             	sub    esp,0x10
c0017ae2:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0017ae6:	fa                   	cli    
c0017ae7:	53                   	push   ebx
c0017ae8:	68 07 26 02 c0       	push   0xc0022607
c0017aed:	e8 53 2e ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0017af2:	a1 64 97 02 c0       	mov    eax,ds:0xc0029764
c0017af7:	83 c4 10             	add    esp,0x10
c0017afa:	85 c0                	test   eax,eax
c0017afc:	74 09                	je     c0017b07 <HalPanic(char const*)+0x29>
c0017afe:	83 ec 0c             	sub    esp,0xc
c0017b01:	53                   	push   ebx
c0017b02:	ff d0                	call   eax
c0017b04:	83 c4 10             	add    esp,0x10
c0017b07:	a1 04 5f 02 c0       	mov    eax,ds:0xc0025f04
c0017b0c:	85 c0                	test   eax,eax
c0017b0e:	0f 84 dc 00 00 00    	je     c0017bf0 <HalPanic(char const*)+0x112>
c0017b14:	52                   	push   edx
c0017b15:	6a 01                	push   0x1
c0017b17:	6a 0f                	push   0xf
c0017b19:	50                   	push   eax
c0017b1a:	e8 95 0a ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b1f:	59                   	pop    ecx
c0017b20:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b26:	e8 79 0c ff ff       	call   c00087a4 <VgaText::clearScreen()>
c0017b2b:	58                   	pop    eax
c0017b2c:	5a                   	pop    edx
c0017b2d:	68 e4 08 02 c0       	push   0xc00208e4
c0017b32:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b38:	e8 af 0a ff ff       	call   c00085ec <VgaText::setTitle(char*)>
c0017b3d:	83 c4 0c             	add    esp,0xc
c0017b40:	6a 01                	push   0x1
c0017b42:	6a 0f                	push   0xf
c0017b44:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b4a:	e8 65 0a ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b4f:	59                   	pop    ecx
c0017b50:	58                   	pop    eax
c0017b51:	68 20 26 02 c0       	push   0xc0022620
c0017b56:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b5c:	e8 45 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b61:	83 c4 0c             	add    esp,0xc
c0017b64:	6a 0f                	push   0xf
c0017b66:	6a 01                	push   0x1
c0017b68:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b6e:	e8 41 0a ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b73:	58                   	pop    eax
c0017b74:	5a                   	pop    edx
c0017b75:	68 29 26 02 c0       	push   0xc0022629
c0017b7a:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b80:	e8 21 0f ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017b85:	83 c4 0c             	add    esp,0xc
c0017b88:	6a 01                	push   0x1
c0017b8a:	6a 0f                	push   0xf
c0017b8c:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017b92:	e8 1d 0a ff ff       	call   c00085b4 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0017b97:	59                   	pop    ecx
c0017b98:	58                   	pop    eax
c0017b99:	68 6d 26 02 c0       	push   0xc002266d
c0017b9e:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017ba4:	e8 fd 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017ba9:	58                   	pop    eax
c0017baa:	5a                   	pop    edx
c0017bab:	68 36 26 02 c0       	push   0xc0022636
c0017bb0:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bb6:	e8 eb 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bbb:	59                   	pop    ecx
c0017bbc:	58                   	pop    eax
c0017bbd:	68 70 26 02 c0       	push   0xc0022670
c0017bc2:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bc8:	e8 d9 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bcd:	58                   	pop    eax
c0017bce:	5a                   	pop    edx
c0017bcf:	53                   	push   ebx
c0017bd0:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017bd6:	e8 cb 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bdb:	59                   	pop    ecx
c0017bdc:	5b                   	pop    ebx
c0017bdd:	68 6d 26 02 c0       	push   0xc002266d
c0017be2:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c0017be8:	e8 b9 0e ff ff       	call   c0008aa6 <VgaText::puts(char const*)>
c0017bed:	83 c4 10             	add    esp,0x10
c0017bf0:	eb fe                	jmp    c0017bf0 <HalPanic(char const*)+0x112>

c0017bf2 <HalQueryPerformanceCounter()>:
c0017bf2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017bf7:	31 d2                	xor    edx,edx
c0017bf9:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0017bff:	31 c0                	xor    eax,eax
c0017c01:	f6 81 8c 11 00 00 02 	test   BYTE PTR [ecx+0x118c],0x2
c0017c08:	74 02                	je     c0017c0c <HalQueryPerformanceCounter()+0x1a>
c0017c0a:	0f 31                	rdtsc  
c0017c0c:	c3                   	ret    

c0017c0d <HalInitialise()>:
c0017c0d:	53                   	push   ebx
c0017c0e:	83 ec 08             	sub    esp,0x8
c0017c11:	e8 98 51 ff ff       	call   c000cdae <setupINTS()>
c0017c16:	80 3d e0 8b 02 c0 00 	cmp    BYTE PTR ds:0xc0028be0,0x0
c0017c1d:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017c22:	75 0f                	jne    c0017c33 <HalInitialise()+0x26>
c0017c24:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017c2a:	83 e2 fe             	and    edx,0xfffffffe
c0017c2d:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017c33:	8a 90 6c 01 00 00    	mov    dl,BYTE PTR [eax+0x16c]
c0017c39:	c6 05 60 97 02 c0 00 	mov    BYTE PTR ds:0xc0029760,0x0
c0017c40:	83 e2 fe             	and    edx,0xfffffffe
c0017c43:	88 90 6c 01 00 00    	mov    BYTE PTR [eax+0x16c],dl
c0017c49:	e8 9e 02 00 00       	call   c0017eec <picOpen()>
c0017c4e:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017c55:	74 0a                	je     c0017c61 <HalInitialise()+0x54>
c0017c57:	e8 e0 01 00 00       	call   c0017e3c <picDisable()>
c0017c5c:	e8 ad 67 00 00       	call   c001e40e <apicOpen()>
c0017c61:	bb 0f 00 00 00       	mov    ebx,0xf
c0017c66:	50                   	push   eax
c0017c67:	6a 00                	push   0x0
c0017c69:	68 b4 78 01 c0       	push   0xc00178b4
c0017c6e:	6a 00                	push   0x0
c0017c70:	e8 09 4f ff ff       	call   c000cb7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c75:	83 c4 0c             	add    esp,0xc
c0017c78:	6a 00                	push   0x0
c0017c7a:	68 b4 78 01 c0       	push   0xc00178b4
c0017c7f:	6a 01                	push   0x1
c0017c81:	e8 f8 4e ff ff       	call   c000cb7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c86:	83 c4 0c             	add    esp,0xc
c0017c89:	6a 00                	push   0x0
c0017c8b:	68 45 73 01 c0       	push   0xc0017345
c0017c90:	6a 02                	push   0x2
c0017c92:	e8 e7 4e ff ff       	call   c000cb7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017c97:	83 c4 0c             	add    esp,0xc
c0017c9a:	6a 00                	push   0x0
c0017c9c:	68 b4 78 01 c0       	push   0xc00178b4
c0017ca1:	6a 03                	push   0x3
c0017ca3:	e8 d6 4e ff ff       	call   c000cb7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017ca8:	83 c4 0c             	add    esp,0xc
c0017cab:	6a 00                	push   0x0
c0017cad:	68 b4 78 01 c0       	push   0xc00178b4
c0017cb2:	6a 04                	push   0x4
c0017cb4:	e8 c5 4e ff ff       	call   c000cb7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cb9:	83 c4 0c             	add    esp,0xc
c0017cbc:	6a 00                	push   0x0
c0017cbe:	68 b4 78 01 c0       	push   0xc00178b4
c0017cc3:	6a 05                	push   0x5
c0017cc5:	e8 b4 4e ff ff       	call   c000cb7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cca:	83 c4 0c             	add    esp,0xc
c0017ccd:	6a 00                	push   0x0
c0017ccf:	68 e8 78 01 c0       	push   0xc00178e8
c0017cd4:	6a 06                	push   0x6
c0017cd6:	e8 a3 4e ff ff       	call   c000cb7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cdb:	83 c4 0c             	add    esp,0xc
c0017cde:	6a 00                	push   0x0
c0017ce0:	68 5e 73 01 c0       	push   0xc001735e
c0017ce5:	6a 08                	push   0x8
c0017ce7:	e8 92 4e ff ff       	call   c000cb7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cec:	83 c4 0c             	add    esp,0xc
c0017cef:	6a 00                	push   0x0
c0017cf1:	68 b4 78 01 c0       	push   0xc00178b4
c0017cf6:	6a 09                	push   0x9
c0017cf8:	e8 81 4e ff ff       	call   c000cb7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017cfd:	83 c4 0c             	add    esp,0xc
c0017d00:	6a 00                	push   0x0
c0017d02:	68 b4 78 01 c0       	push   0xc00178b4
c0017d07:	6a 0a                	push   0xa
c0017d09:	e8 70 4e ff ff       	call   c000cb7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d0e:	83 c4 0c             	add    esp,0xc
c0017d11:	6a 00                	push   0x0
c0017d13:	68 b4 78 01 c0       	push   0xc00178b4
c0017d18:	6a 0b                	push   0xb
c0017d1a:	e8 5f 4e ff ff       	call   c000cb7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d1f:	83 c4 0c             	add    esp,0xc
c0017d22:	6a 00                	push   0x0
c0017d24:	68 c4 77 01 c0       	push   0xc00177c4
c0017d29:	6a 0d                	push   0xd
c0017d2b:	e8 4e 4e ff ff       	call   c000cb7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d30:	83 c4 0c             	add    esp,0xc
c0017d33:	6a 00                	push   0x0
c0017d35:	68 2b 78 01 c0       	push   0xc001782b
c0017d3a:	6a 0e                	push   0xe
c0017d3c:	e8 3d 4e ff ff       	call   c000cb7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d41:	83 c4 10             	add    esp,0x10
c0017d44:	50                   	push   eax
c0017d45:	6a 00                	push   0x0
c0017d47:	68 b4 78 01 c0       	push   0xc00178b4
c0017d4c:	53                   	push   ebx
c0017d4d:	43                   	inc    ebx
c0017d4e:	e8 2b 4e ff ff       	call   c000cb7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d53:	83 c4 10             	add    esp,0x10
c0017d56:	83 fb 1e             	cmp    ebx,0x1e
c0017d59:	75 e9                	jne    c0017d44 <HalInitialise()+0x137>
c0017d5b:	50                   	push   eax
c0017d5c:	6a 00                	push   0x0
c0017d5e:	68 61 25 01 c0       	push   0xc0012561
c0017d63:	6a 60                	push   0x60
c0017d65:	e8 14 4e ff ff       	call   c000cb7e <installISRHandler(int, void (*)(regs*, void*), void*)>
c0017d6a:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017d6f:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0017d79:	c7 04 24 60 01 00 00 	mov    DWORD PTR [esp],0x160
c0017d80:	e8 31 fd fe ff       	call   c0007ab6 <malloc>
c0017d85:	89 04 24             	mov    DWORD PTR [esp],eax
c0017d88:	89 c3                	mov    ebx,eax
c0017d8a:	e8 3b 09 00 00       	call   c00186ca <RTC::RTC()>
c0017d8f:	c7 83 14 01 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x114],0x1
c0017d99:	5a                   	pop    edx
c0017d9a:	59                   	pop    ecx
c0017d9b:	53                   	push   ebx
c0017d9c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017da2:	e8 a3 48 ff ff       	call   c000c64a <Device::addChild(Device*)>
c0017da7:	8b 03                	mov    eax,DWORD PTR [ebx]
c0017da9:	6a 00                	push   0x0
c0017dab:	6a 00                	push   0x0
c0017dad:	6a 00                	push   0x0
c0017daf:	53                   	push   ebx
c0017db0:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0017db3:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0017db8:	89 98 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],ebx
c0017dbe:	83 c4 28             	add    esp,0x28
c0017dc1:	5b                   	pop    ebx
c0017dc2:	c3                   	ret    

c0017dc3 <HalMakeBeep(int)>:
c0017dc3:	53                   	push   ebx
c0017dc4:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0017dc8:	85 db                	test   ebx,ebx
c0017dca:	75 07                	jne    c0017dd3 <HalMakeBeep(int)+0x10>
c0017dcc:	e4 61                	in     al,0x61
c0017dce:	83 e0 fc             	and    eax,0xfffffffc
c0017dd1:	eb 26                	jmp    c0017df9 <HalMakeBeep(int)+0x36>
c0017dd3:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0017dd8:	99                   	cdq    
c0017dd9:	f7 fb                	idiv   ebx
c0017ddb:	89 c1                	mov    ecx,eax
c0017ddd:	b0 b6                	mov    al,0xb6
c0017ddf:	e6 43                	out    0x43,al
c0017de1:	88 c8                	mov    al,cl
c0017de3:	e6 42                	out    0x42,al
c0017de5:	89 c8                	mov    eax,ecx
c0017de7:	c1 e8 08             	shr    eax,0x8
c0017dea:	e6 42                	out    0x42,al
c0017dec:	e4 61                	in     al,0x61
c0017dee:	89 c2                	mov    edx,eax
c0017df0:	83 ca 03             	or     edx,0x3
c0017df3:	38 d0                	cmp    al,dl
c0017df5:	74 04                	je     c0017dfb <HalMakeBeep(int)+0x38>
c0017df7:	88 d0                	mov    al,dl
c0017df9:	e6 61                	out    0x61,al
c0017dfb:	5b                   	pop    ebx
c0017dfc:	c3                   	ret    

c0017dfd <HalGetRand()>:
c0017dfd:	31 c0                	xor    eax,eax
c0017dff:	c3                   	ret    

c0017e00 <HalEndOfInterrupt(int)>:
c0017e00:	80 3d 60 97 02 c0 00 	cmp    BYTE PTR ds:0xc0029760,0x0
c0017e07:	74 23                	je     c0017e2c <HalEndOfInterrupt(int)+0x2c>
c0017e09:	83 ec 14             	sub    esp,0x14
c0017e0c:	6a 1b                	push   0x1b
c0017e0e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0017e14:	e8 a7 f2 fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c0017e19:	25 00 f0 ff ff       	and    eax,0xfffff000
c0017e1e:	c7 80 b0 00 00 00 01 00 00 00 	mov    DWORD PTR [eax+0xb0],0x1
c0017e28:	83 c4 1c             	add    esp,0x1c
c0017e2b:	c3                   	ret    
c0017e2c:	e9 3f 02 00 00       	jmp    c0018070 <picEOI(int)>

c0017e31 <HalRestart()>:
c0017e31:	c3                   	ret    

c0017e32 <HalShutdown()>:
c0017e32:	c3                   	ret    

c0017e33 <HalSleep()>:
c0017e33:	c3                   	ret    

c0017e34 <picIoWait()>:
c0017e34:	eb 00                	jmp    c0017e36 <picIoWait()+0x2>
c0017e36:	eb 00                	jmp    c0017e38 <picIoWait()+0x4>
c0017e38:	90                   	nop
c0017e39:	c3                   	ret    
c0017e3a:	66 90                	xchg   ax,ax

c0017e3c <picDisable()>:
c0017e3c:	83 ec 10             	sub    esp,0x10
c0017e3f:	66 c7 44 24 0a a1 00 	mov    WORD PTR [esp+0xa],0xa1
c0017e46:	c6 44 24 09 ff       	mov    BYTE PTR [esp+0x9],0xff
c0017e4b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017e4f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0017e54:	ee                   	out    dx,al
c0017e55:	66 c7 44 24 0e 21 00 	mov    WORD PTR [esp+0xe],0x21
c0017e5c:	c6 44 24 0d ff       	mov    BYTE PTR [esp+0xd],0xff
c0017e61:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017e65:	66 8b 54 24 0e       	mov    dx,WORD PTR [esp+0xe]
c0017e6a:	ee                   	out    dx,al
c0017e6b:	90                   	nop
c0017e6c:	83 c4 10             	add    esp,0x10
c0017e6f:	c3                   	ret    

c0017e70 <picGetIRQReg(int)>:
c0017e70:	83 ec 10             	sub    esp,0x10
c0017e73:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e77:	0f b6 c0             	movzx  eax,al
c0017e7a:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c0017e81:	88 44 24 01          	mov    BYTE PTR [esp+0x1],al
c0017e85:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0017e89:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0017e8e:	ee                   	out    dx,al
c0017e8f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0017e93:	0f b6 c0             	movzx  eax,al
c0017e96:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c0017e9d:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0017ea1:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0017ea5:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0017eaa:	ee                   	out    dx,al
c0017eab:	66 c7 44 24 0a a0 00 	mov    WORD PTR [esp+0xa],0xa0
c0017eb2:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c0017eb7:	89 c2                	mov    edx,eax
c0017eb9:	ec                   	in     al,dx
c0017eba:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0017ebe:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0017ec2:	0f b6 c0             	movzx  eax,al
c0017ec5:	c1 e0 08             	shl    eax,0x8
c0017ec8:	89 c1                	mov    ecx,eax
c0017eca:	66 c7 44 24 0e 20 00 	mov    WORD PTR [esp+0xe],0x20
c0017ed1:	66 8b 44 24 0e       	mov    ax,WORD PTR [esp+0xe]
c0017ed6:	89 c2                	mov    edx,eax
c0017ed8:	ec                   	in     al,dx
c0017ed9:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0017edd:	8a 44 24 0d          	mov    al,BYTE PTR [esp+0xd]
c0017ee1:	0f b6 c0             	movzx  eax,al
c0017ee4:	09 c8                	or     eax,ecx
c0017ee6:	83 c4 10             	add    esp,0x10
c0017ee9:	c3                   	ret    
c0017eea:	66 90                	xchg   ax,ax

c0017eec <picOpen()>:
c0017eec:	83 ec 50             	sub    esp,0x50
c0017eef:	66 c7 44 24 10 21 00 	mov    WORD PTR [esp+0x10],0x21
c0017ef6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0017efb:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0017eff:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0017f03:	ee                   	out    dx,al
c0017f04:	66 c7 44 24 14 a1 00 	mov    WORD PTR [esp+0x14],0xa1
c0017f0b:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0017f10:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c0017f14:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0017f18:	ee                   	out    dx,al
c0017f19:	c7 44 24 4c 20 00 00 00 	mov    DWORD PTR [esp+0x4c],0x20
c0017f21:	c7 44 24 48 28 00 00 00 	mov    DWORD PTR [esp+0x48],0x28
c0017f29:	66 c7 44 24 18 21 00 	mov    WORD PTR [esp+0x18],0x21
c0017f30:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017f34:	89 c2                	mov    edx,eax
c0017f36:	ec                   	in     al,dx
c0017f37:	88 44 24 17          	mov    BYTE PTR [esp+0x17],al
c0017f3b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c0017f3f:	88 44 24 47          	mov    BYTE PTR [esp+0x47],al
c0017f43:	66 c7 44 24 1c a1 00 	mov    WORD PTR [esp+0x1c],0xa1
c0017f4a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017f4e:	89 c2                	mov    edx,eax
c0017f50:	ec                   	in     al,dx
c0017f51:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c0017f55:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017f59:	88 44 24 46          	mov    BYTE PTR [esp+0x46],al
c0017f5d:	66 c7 44 24 20 20 00 	mov    WORD PTR [esp+0x20],0x20
c0017f64:	c6 44 24 1f 11       	mov    BYTE PTR [esp+0x1f],0x11
c0017f69:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0017f6d:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017f71:	ee                   	out    dx,al
c0017f72:	e8 bd fe ff ff       	call   c0017e34 <picIoWait()>
c0017f77:	66 c7 44 24 24 a0 00 	mov    WORD PTR [esp+0x24],0xa0
c0017f7e:	c6 44 24 23 11       	mov    BYTE PTR [esp+0x23],0x11
c0017f83:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0017f87:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0017f8b:	ee                   	out    dx,al
c0017f8c:	e8 a3 fe ff ff       	call   c0017e34 <picIoWait()>
c0017f91:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017f95:	0f b6 c0             	movzx  eax,al
c0017f98:	66 c7 44 24 28 21 00 	mov    WORD PTR [esp+0x28],0x21
c0017f9f:	88 44 24 27          	mov    BYTE PTR [esp+0x27],al
c0017fa3:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c0017fa7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017fab:	ee                   	out    dx,al
c0017fac:	e8 83 fe ff ff       	call   c0017e34 <picIoWait()>
c0017fb1:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017fb5:	0f b6 c0             	movzx  eax,al
c0017fb8:	66 c7 44 24 2c a1 00 	mov    WORD PTR [esp+0x2c],0xa1
c0017fbf:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c0017fc3:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c0017fc7:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0017fcb:	ee                   	out    dx,al
c0017fcc:	e8 63 fe ff ff       	call   c0017e34 <picIoWait()>
c0017fd1:	66 c7 44 24 30 21 00 	mov    WORD PTR [esp+0x30],0x21
c0017fd8:	c6 44 24 2f 04       	mov    BYTE PTR [esp+0x2f],0x4
c0017fdd:	8a 44 24 2f          	mov    al,BYTE PTR [esp+0x2f]
c0017fe1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0017fe5:	ee                   	out    dx,al
c0017fe6:	e8 49 fe ff ff       	call   c0017e34 <picIoWait()>
c0017feb:	66 c7 44 24 34 a1 00 	mov    WORD PTR [esp+0x34],0xa1
c0017ff2:	c6 44 24 33 02       	mov    BYTE PTR [esp+0x33],0x2
c0017ff7:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c0017ffb:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017fff:	ee                   	out    dx,al
c0018000:	e8 2f fe ff ff       	call   c0017e34 <picIoWait()>
c0018005:	66 c7 44 24 38 21 00 	mov    WORD PTR [esp+0x38],0x21
c001800c:	c6 44 24 37 01       	mov    BYTE PTR [esp+0x37],0x1
c0018011:	8a 44 24 37          	mov    al,BYTE PTR [esp+0x37]
c0018015:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018019:	ee                   	out    dx,al
c001801a:	e8 15 fe ff ff       	call   c0017e34 <picIoWait()>
c001801f:	66 c7 44 24 3c a1 00 	mov    WORD PTR [esp+0x3c],0xa1
c0018026:	c6 44 24 3b 01       	mov    BYTE PTR [esp+0x3b],0x1
c001802b:	8a 44 24 3b          	mov    al,BYTE PTR [esp+0x3b]
c001802f:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0018033:	ee                   	out    dx,al
c0018034:	e8 fb fd ff ff       	call   c0017e34 <picIoWait()>
c0018039:	0f b6 44 24 47       	movzx  eax,BYTE PTR [esp+0x47]
c001803e:	66 c7 44 24 40 21 00 	mov    WORD PTR [esp+0x40],0x21
c0018045:	88 44 24 3f          	mov    BYTE PTR [esp+0x3f],al
c0018049:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c001804d:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018051:	ee                   	out    dx,al
c0018052:	0f b6 44 24 46       	movzx  eax,BYTE PTR [esp+0x46]
c0018057:	66 c7 44 24 44 a1 00 	mov    WORD PTR [esp+0x44],0xa1
c001805e:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0018062:	8a 44 24 43          	mov    al,BYTE PTR [esp+0x43]
c0018066:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c001806a:	ee                   	out    dx,al
c001806b:	90                   	nop
c001806c:	83 c4 50             	add    esp,0x50
c001806f:	c3                   	ret    

c0018070 <picEOI(int)>:
c0018070:	83 ec 10             	sub    esp,0x10
c0018073:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c0018078:	75 1e                	jne    c0018098 <picEOI(int)+0x28>
c001807a:	6a 0b                	push   0xb
c001807c:	e8 ef fd ff ff       	call   c0017e70 <picGetIRQReg(int)>
c0018081:	83 c4 04             	add    esp,0x4
c0018084:	66 89 44 24 0e       	mov    WORD PTR [esp+0xe],ax
c0018089:	0f b7 44 24 0e       	movzx  eax,WORD PTR [esp+0xe]
c001808e:	25 80 00 00 00       	and    eax,0x80
c0018093:	74 73                	je     c0018108 <picEOI(int)+0x98>
c0018095:	8d 76 00             	lea    esi,[esi+0x0]
c0018098:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c001809d:	75 31                	jne    c00180d0 <picEOI(int)+0x60>
c001809f:	6a 0b                	push   0xb
c00180a1:	e8 ca fd ff ff       	call   c0017e70 <picGetIRQReg(int)>
c00180a6:	83 c4 04             	add    esp,0x4
c00180a9:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c00180ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00180b2:	98                   	cwde   
c00180b3:	85 c0                	test   eax,eax
c00180b5:	78 19                	js     c00180d0 <picEOI(int)+0x60>
c00180b7:	66 c7 44 24 0a 20 00 	mov    WORD PTR [esp+0xa],0x20
c00180be:	c6 44 24 09 20       	mov    BYTE PTR [esp+0x9],0x20
c00180c3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c00180c7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c00180cc:	ee                   	out    dx,al
c00180cd:	eb 3d                	jmp    c001810c <picEOI(int)+0x9c>
c00180cf:	90                   	nop
c00180d0:	83 7c 24 14 07       	cmp    DWORD PTR [esp+0x14],0x7
c00180d5:	7e 19                	jle    c00180f0 <picEOI(int)+0x80>
c00180d7:	66 c7 44 24 06 a0 00 	mov    WORD PTR [esp+0x6],0xa0
c00180de:	c6 44 24 05 20       	mov    BYTE PTR [esp+0x5],0x20
c00180e3:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00180e7:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c00180ec:	ee                   	out    dx,al
c00180ed:	8d 76 00             	lea    esi,[esi+0x0]
c00180f0:	66 c7 44 24 02 20 00 	mov    WORD PTR [esp+0x2],0x20
c00180f7:	c6 44 24 01 20       	mov    BYTE PTR [esp+0x1],0x20
c00180fc:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0018100:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0018105:	ee                   	out    dx,al
c0018106:	eb 04                	jmp    c001810c <picEOI(int)+0x9c>
c0018108:	90                   	nop
c0018109:	8d 76 00             	lea    esi,[esi+0x0]
c001810c:	83 c4 10             	add    esp,0x10
c001810f:	c3                   	ret    

c0018110 <RTC::open(int, int, void*)>:
c0018110:	31 c0                	xor    eax,eax
c0018112:	c3                   	ret    
c0018113:	90                   	nop

c0018114 <RTC::close(int, int, void*)>:
c0018114:	31 c0                	xor    eax,eax
c0018116:	c3                   	ret    
c0018117:	90                   	nop

c0018118 <RTC::timeInSecondsUTC()>:
c0018118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001811c:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c0018122:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0018128:	c3                   	ret    
c0018129:	90                   	nop

c001812a <RTC::timeInDatetimeUTC()>:
c001812a:	53                   	push   ebx
c001812b:	83 ec 14             	sub    esp,0x14
c001812e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0018132:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018136:	8b 10                	mov    edx,DWORD PTR [eax]
c0018138:	50                   	push   eax
c0018139:	ff 52 24             	call   DWORD PTR [edx+0x24]
c001813c:	83 c4 0c             	add    esp,0xc
c001813f:	52                   	push   edx
c0018140:	50                   	push   eax
c0018141:	53                   	push   ebx
c0018142:	e8 77 42 ff ff       	call   c000c3be <secondsToDatetime(unsigned long long)>
c0018147:	89 d8                	mov    eax,ebx
c0018149:	83 c4 14             	add    esp,0x14
c001814c:	5b                   	pop    ebx
c001814d:	c2 04 00             	ret    0x4

c0018150 <RTC::setTimeInSecondsUTC(unsigned long long)>:
c0018150:	56                   	push   esi
c0018151:	53                   	push   ebx
c0018152:	83 ec 14             	sub    esp,0x14
c0018155:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0018159:	8b 03                	mov    eax,DWORD PTR [ebx]
c001815b:	8b 70 30             	mov    esi,DWORD PTR [eax+0x30]
c001815e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018162:	52                   	push   edx
c0018163:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018167:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001816b:	50                   	push   eax
c001816c:	e8 4d 42 ff ff       	call   c000c3be <secondsToDatetime(unsigned long long)>
c0018171:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018175:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018179:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001817d:	89 5c 24 2c          	mov    DWORD PTR [esp+0x2c],ebx
c0018181:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0018185:	89 f0                	mov    eax,esi
c0018187:	83 c4 20             	add    esp,0x20
c001818a:	5b                   	pop    ebx
c001818b:	5e                   	pop    esi
c001818c:	ff e0                	jmp    eax

c001818e <RTC::~RTC()>:
c001818e:	83 ec 0c             	sub    esp,0xc
c0018191:	ba 0c 27 02 c0       	mov    edx,0xc002270c
c0018196:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001819a:	89 10                	mov    DWORD PTR [eax],edx
c001819c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00181a0:	83 ec 0c             	sub    esp,0xc
c00181a3:	50                   	push   eax
c00181a4:	e8 a7 3f ff ff       	call   c000c150 <Clock::~Clock()>
c00181a9:	83 c4 10             	add    esp,0x10
c00181ac:	90                   	nop
c00181ad:	83 c4 0c             	add    esp,0xc
c00181b0:	c3                   	ret    
c00181b1:	90                   	nop

c00181b2 <RTC::~RTC()>:
c00181b2:	83 ec 0c             	sub    esp,0xc
c00181b5:	83 ec 0c             	sub    esp,0xc
c00181b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181bc:	e8 cd ff ff ff       	call   c001818e <RTC::~RTC()>
c00181c1:	83 c4 10             	add    esp,0x10
c00181c4:	83 ec 08             	sub    esp,0x8
c00181c7:	68 60 01 00 00       	push   0x160
c00181cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00181d0:	e8 43 26 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c00181d5:	83 c4 10             	add    esp,0x10
c00181d8:	83 c4 0c             	add    esp,0xc
c00181db:	c3                   	ret    

c00181dc <RTC::get_update_in_progress_flag()>:
c00181dc:	83 ec 14             	sub    esp,0x14
c00181df:	6a 0a                	push   0xa
c00181e1:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00181e7:	e8 8c ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00181ec:	83 c4 1c             	add    esp,0x1c
c00181ef:	0f b6 c0             	movzx  eax,al
c00181f2:	c1 e8 07             	shr    eax,0x7
c00181f5:	c3                   	ret    

c00181f6 <RTC::completeRTCRefresh()>:
c00181f6:	55                   	push   ebp
c00181f7:	57                   	push   edi
c00181f8:	56                   	push   esi
c00181f9:	53                   	push   ebx
c00181fa:	83 ec 3c             	sub    esp,0x3c
c00181fd:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c0018203:	83 ec 0c             	sub    esp,0xc
c0018206:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001820a:	e8 cd ff ff ff       	call   c00181dc <RTC::get_update_in_progress_flag()>
c001820f:	83 c4 10             	add    esp,0x10
c0018212:	84 c0                	test   al,al
c0018214:	74 0e                	je     c0018224 <RTC::completeRTCRefresh()+0x2e>
c0018216:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c001821c:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c0018222:	73 df                	jae    c0018203 <RTC::completeRTCRefresh()+0xd>
c0018224:	51                   	push   ecx
c0018225:	51                   	push   ecx
c0018226:	6a 00                	push   0x0
c0018228:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001822e:	e8 45 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018233:	5b                   	pop    ebx
c0018234:	89 c7                	mov    edi,eax
c0018236:	5e                   	pop    esi
c0018237:	6a 02                	push   0x2
c0018239:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001823f:	e8 34 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018244:	88 44 24 28          	mov    BYTE PTR [esp+0x28],al
c0018248:	5d                   	pop    ebp
c0018249:	58                   	pop    eax
c001824a:	6a 04                	push   0x4
c001824c:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018252:	e8 21 ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018257:	88 44 24 2c          	mov    BYTE PTR [esp+0x2c],al
c001825b:	58                   	pop    eax
c001825c:	5a                   	pop    edx
c001825d:	6a 07                	push   0x7
c001825f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018265:	e8 0e ef fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001826a:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c001826e:	59                   	pop    ecx
c001826f:	5b                   	pop    ebx
c0018270:	6a 08                	push   0x8
c0018272:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018278:	e8 fb ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001827d:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c0018281:	5e                   	pop    esi
c0018282:	5d                   	pop    ebp
c0018283:	6a 09                	push   0x9
c0018285:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001828b:	e8 e8 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018290:	0f b6 c0             	movzx  eax,al
c0018293:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0018297:	83 c4 10             	add    esp,0x10
c001829a:	8b 1d ec 88 02 c0    	mov    ebx,DWORD PTR ds:0xc00288ec
c00182a0:	83 ec 0c             	sub    esp,0xc
c00182a3:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00182a7:	e8 30 ff ff ff       	call   c00181dc <RTC::get_update_in_progress_flag()>
c00182ac:	83 c4 10             	add    esp,0x10
c00182af:	84 c0                	test   al,al
c00182b1:	74 0e                	je     c00182c1 <RTC::completeRTCRefresh()+0xcb>
c00182b3:	8d 83 20 4e 00 00    	lea    eax,[ebx+0x4e20]
c00182b9:	3b 05 ec 88 02 c0    	cmp    eax,DWORD PTR ds:0xc00288ec
c00182bf:	73 df                	jae    c00182a0 <RTC::completeRTCRefresh()+0xaa>
c00182c1:	51                   	push   ecx
c00182c2:	51                   	push   ecx
c00182c3:	6a 00                	push   0x0
c00182c5:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182cb:	e8 a8 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00182d0:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00182d4:	5b                   	pop    ebx
c00182d5:	5e                   	pop    esi
c00182d6:	6a 02                	push   0x2
c00182d8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182de:	e8 95 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00182e3:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c00182e7:	5d                   	pop    ebp
c00182e8:	58                   	pop    eax
c00182e9:	6a 04                	push   0x4
c00182eb:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00182f1:	e8 82 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00182f6:	88 c3                	mov    bl,al
c00182f8:	58                   	pop    eax
c00182f9:	5a                   	pop    edx
c00182fa:	6a 07                	push   0x7
c00182fc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018302:	e8 71 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018307:	59                   	pop    ecx
c0018308:	89 c6                	mov    esi,eax
c001830a:	5d                   	pop    ebp
c001830b:	6a 08                	push   0x8
c001830d:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018313:	e8 60 ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018318:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001831c:	58                   	pop    eax
c001831d:	5a                   	pop    edx
c001831e:	6a 09                	push   0x9
c0018320:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018326:	e8 4d ee fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c001832b:	89 f9                	mov    ecx,edi
c001832d:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018331:	0f b6 e8             	movzx  ebp,al
c0018334:	83 c4 10             	add    esp,0x10
c0018337:	38 4c 24 08          	cmp    BYTE PTR [esp+0x8],cl
c001833b:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018340:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c0018345:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0018349:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001834d:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0018351:	0f 94 c0             	sete   al
c0018354:	0f b6 fb             	movzx  edi,bl
c0018357:	3a 4c 24 18          	cmp    cl,BYTE PTR [esp+0x18]
c001835b:	0f b6 4c 24 10       	movzx  ecx,BYTE PTR [esp+0x10]
c0018360:	0f 94 c2             	sete   dl
c0018363:	21 d0                	and    eax,edx
c0018365:	3a 5c 24 1c          	cmp    bl,BYTE PTR [esp+0x1c]
c0018369:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c001836d:	0f 94 c2             	sete   dl
c0018370:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0018374:	21 c2                	and    edx,eax
c0018376:	89 f0                	mov    eax,esi
c0018378:	0f b6 c0             	movzx  eax,al
c001837b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001837f:	89 f0                	mov    eax,esi
c0018381:	3a 44 24 22          	cmp    al,BYTE PTR [esp+0x22]
c0018385:	0f 94 c0             	sete   al
c0018388:	21 d0                	and    eax,edx
c001838a:	31 d2                	xor    edx,edx
c001838c:	3a 4c 24 23          	cmp    cl,BYTE PTR [esp+0x23]
c0018390:	0f 94 c2             	sete   dl
c0018393:	85 c2                	test   edx,eax
c0018395:	75 27                	jne    c00183be <RTC::completeRTCRefresh()+0x1c8>
c0018397:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001839b:	89 6c 24 24          	mov    DWORD PTR [esp+0x24],ebp
c001839f:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c00183a3:	88 5c 24 1c          	mov    BYTE PTR [esp+0x1c],bl
c00183a7:	89 f0                	mov    eax,esi
c00183a9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00183ad:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c00183b1:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00183b5:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c00183b9:	e9 dc fe ff ff       	jmp    c001829a <RTC::completeRTCRefresh()+0xa4>
c00183be:	39 6c 24 24          	cmp    DWORD PTR [esp+0x24],ebp
c00183c2:	75 d3                	jne    c0018397 <RTC::completeRTCRefresh()+0x1a1>
c00183c4:	52                   	push   edx
c00183c5:	52                   	push   edx
c00183c6:	6a 0b                	push   0xb
c00183c8:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00183ce:	e8 a5 ed fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c00183d3:	83 c4 10             	add    esp,0x10
c00183d6:	a8 04                	test   al,0x4
c00183d8:	75 7a                	jne    c0018454 <RTC::completeRTCRefresh()+0x25e>
c00183da:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00183de:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00183e2:	83 e1 0f             	and    ecx,0xf
c00183e5:	c1 ea 04             	shr    edx,0x4
c00183e8:	c1 ef 04             	shr    edi,0x4
c00183eb:	6b d2 0a             	imul   edx,edx,0xa
c00183ee:	83 e6 0f             	and    esi,0xf
c00183f1:	01 d1                	add    ecx,edx
c00183f3:	c1 ed 04             	shr    ebp,0x4
c00183f6:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c00183fa:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00183fe:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0018402:	c1 ea 04             	shr    edx,0x4
c0018405:	83 e1 0f             	and    ecx,0xf
c0018408:	6b d2 0a             	imul   edx,edx,0xa
c001840b:	6b ed 0a             	imul   ebp,ebp,0xa
c001840e:	01 d1                	add    ecx,edx
c0018410:	89 fa                	mov    edx,edi
c0018412:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018416:	83 e2 07             	and    edx,0x7
c0018419:	89 d9                	mov    ecx,ebx
c001841b:	6b d2 0a             	imul   edx,edx,0xa
c001841e:	83 e1 0f             	and    ecx,0xf
c0018421:	83 e3 80             	and    ebx,0xffffff80
c0018424:	01 d1                	add    ecx,edx
c0018426:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001842a:	09 cb                	or     ebx,ecx
c001842c:	c1 ea 04             	shr    edx,0x4
c001842f:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0018433:	6b d2 0a             	imul   edx,edx,0xa
c0018436:	83 e1 0f             	and    ecx,0xf
c0018439:	01 d6                	add    esi,edx
c001843b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001843f:	c1 ea 04             	shr    edx,0x4
c0018442:	6b d2 0a             	imul   edx,edx,0xa
c0018445:	01 d1                	add    ecx,edx
c0018447:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001844b:	88 4c 24 10          	mov    BYTE PTR [esp+0x10],cl
c001844f:	83 e2 0f             	and    edx,0xf
c0018452:	01 d5                	add    ebp,edx
c0018454:	a8 02                	test   al,0x2
c0018456:	75 15                	jne    c001846d <RTC::completeRTCRefresh()+0x277>
c0018458:	f6 c3 80             	test   bl,0x80
c001845b:	74 10                	je     c001846d <RTC::completeRTCRefresh()+0x277>
c001845d:	83 e3 7f             	and    ebx,0x7f
c0018460:	b9 18 00 00 00       	mov    ecx,0x18
c0018465:	8d 43 0c             	lea    eax,[ebx+0xc]
c0018468:	99                   	cdq    
c0018469:	f7 f9                	idiv   ecx
c001846b:	88 d3                	mov    bl,dl
c001846d:	8d bd d0 07 00 00    	lea    edi,[ebp+0x7d0]
c0018473:	81 ff e3 07 00 00    	cmp    edi,0x7e3
c0018479:	77 06                	ja     c0018481 <RTC::completeRTCRefresh()+0x28b>
c001847b:	8d bd 34 08 00 00    	lea    edi,[ebp+0x834]
c0018481:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0018486:	31 c9                	xor    ecx,ecx
c0018488:	c1 e0 10             	shl    eax,0x10
c001848b:	89 cd                	mov    ebp,ecx
c001848d:	c1 e7 10             	shl    edi,0x10
c0018490:	31 d2                	xor    edx,edx
c0018492:	81 e5 ff ff 00 ff    	and    ebp,0xff00ffff
c0018498:	09 c5                	or     ebp,eax
c001849a:	89 f0                	mov    eax,esi
c001849c:	89 e9                	mov    ecx,ebp
c001849e:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00184a2:	8a 6c 24 0c          	mov    ch,BYTE PTR [esp+0xc]
c00184a6:	88 c2                	mov    dl,al
c00184a8:	88 d9                	mov    cl,bl
c00184aa:	8a 74 24 10          	mov    dh,BYTE PTR [esp+0x10]
c00184ae:	0f b7 c2             	movzx  eax,dx
c00184b1:	09 f8                	or     eax,edi
c00184b3:	89 c2                	mov    edx,eax
c00184b5:	50                   	push   eax
c00184b6:	50                   	push   eax
c00184b7:	51                   	push   ecx
c00184b8:	52                   	push   edx
c00184b9:	e8 81 3d ff ff       	call   c000c23f <datetimeToSeconds(datetime_t)>
c00184be:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c00184c2:	89 86 58 01 00 00    	mov    DWORD PTR [esi+0x158],eax
c00184c8:	89 96 5c 01 00 00    	mov    DWORD PTR [esi+0x15c],edx
c00184ce:	83 c4 4c             	add    esp,0x4c
c00184d1:	5b                   	pop    ebx
c00184d2:	5e                   	pop    esi
c00184d3:	5f                   	pop    edi
c00184d4:	5d                   	pop    ebp
c00184d5:	c3                   	ret    

c00184d6 <RTC::setTimeInDatetimeUTC(datetime_t)>:
c00184d6:	55                   	push   ebp
c00184d7:	57                   	push   edi
c00184d8:	56                   	push   esi
c00184d9:	53                   	push   ebx
c00184da:	83 ec 30             	sub    esp,0x30
c00184dd:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00184e1:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c00184e5:	6a 00                	push   0x0
c00184e7:	6a 00                	push   0x0
c00184e9:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c00184ef:	e8 9e ed fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c00184f4:	83 c4 0c             	add    esp,0xc
c00184f7:	6a 00                	push   0x0
c00184f9:	6a 02                	push   0x2
c00184fb:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018501:	e8 8c ed fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018506:	31 d2                	xor    edx,edx
c0018508:	89 f9                	mov    ecx,edi
c001850a:	89 f8                	mov    eax,edi
c001850c:	c1 e9 10             	shr    ecx,0x10
c001850f:	0f b6 c4             	movzx  eax,ah
c0018512:	88 4c 24 1c          	mov    BYTE PTR [esp+0x1c],cl
c0018516:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c001851a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001851e:	b9 64 00 00 00       	mov    ecx,0x64
c0018523:	89 f0                	mov    eax,esi
c0018525:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c0018529:	89 f0                	mov    eax,esi
c001852b:	0f b6 c4             	movzx  eax,ah
c001852e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018532:	89 f0                	mov    eax,esi
c0018534:	c1 e8 10             	shr    eax,0x10
c0018537:	f7 f1                	div    ecx
c0018539:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001853d:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c0018541:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c0018545:	59                   	pop    ecx
c0018546:	5b                   	pop    ebx
c0018547:	89 fb                	mov    ebx,edi
c0018549:	6a 0b                	push   0xb
c001854b:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018551:	e8 22 ec fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018556:	83 c4 10             	add    esp,0x10
c0018559:	89 c5                	mov    ebp,eax
c001855b:	a8 04                	test   al,0x4
c001855d:	75 6e                	jne    c00185cd <RTC::setTimeInDatetimeUTC(datetime_t)+0xf7>
c001855f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0018563:	31 d2                	xor    edx,edx
c0018565:	0f b6 c1             	movzx  eax,cl
c0018568:	b9 0a 00 00 00       	mov    ecx,0xa
c001856d:	f7 f1                	div    ecx
c001856f:	c1 e0 04             	shl    eax,0x4
c0018572:	09 d0                	or     eax,edx
c0018574:	31 d2                	xor    edx,edx
c0018576:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001857a:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001857f:	f7 f1                	div    ecx
c0018581:	c1 e0 04             	shl    eax,0x4
c0018584:	09 d0                	or     eax,edx
c0018586:	31 d2                	xor    edx,edx
c0018588:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001858c:	0f b6 c3             	movzx  eax,bl
c001858f:	f7 f1                	div    ecx
c0018591:	c1 e0 04             	shl    eax,0x4
c0018594:	09 d0                	or     eax,edx
c0018596:	31 d2                	xor    edx,edx
c0018598:	89 c3                	mov    ebx,eax
c001859a:	89 f0                	mov    eax,esi
c001859c:	0f b6 c0             	movzx  eax,al
c001859f:	f7 f1                	div    ecx
c00185a1:	c1 e0 04             	shl    eax,0x4
c00185a4:	09 d0                	or     eax,edx
c00185a6:	31 d2                	xor    edx,edx
c00185a8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00185ac:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00185b1:	f7 f1                	div    ecx
c00185b3:	c1 e0 04             	shl    eax,0x4
c00185b6:	09 d0                	or     eax,edx
c00185b8:	31 d2                	xor    edx,edx
c00185ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00185be:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00185c2:	f7 f1                	div    ecx
c00185c4:	c1 e0 04             	shl    eax,0x4
c00185c7:	09 d0                	or     eax,edx
c00185c9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00185cd:	83 e5 02             	and    ebp,0x2
c00185d0:	75 1e                	jne    c00185f0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00185d2:	0f b6 c3             	movzx  eax,bl
c00185d5:	83 f8 0b             	cmp    eax,0xb
c00185d8:	76 10                	jbe    c00185ea <RTC::setTimeInDatetimeUTC(datetime_t)+0x114>
c00185da:	8d 53 f4             	lea    edx,[ebx-0xc]
c00185dd:	88 d3                	mov    bl,dl
c00185df:	84 d2                	test   dl,dl
c00185e1:	75 02                	jne    c00185e5 <RTC::setTimeInDatetimeUTC(datetime_t)+0x10f>
c00185e3:	b3 0c                	mov    bl,0xc
c00185e5:	83 cb 80             	or     ebx,0xffffff80
c00185e8:	eb 06                	jmp    c00185f0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00185ea:	85 c0                	test   eax,eax
c00185ec:	75 02                	jne    c00185f0 <RTC::setTimeInDatetimeUTC(datetime_t)+0x11a>
c00185ee:	b3 0c                	mov    bl,0xc
c00185f0:	0f b6 db             	movzx  ebx,bl
c00185f3:	50                   	push   eax
c00185f4:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00185f9:	52                   	push   edx
c00185fa:	6a 00                	push   0x0
c00185fc:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018602:	e8 8b ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018607:	83 c4 0c             	add    esp,0xc
c001860a:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001860f:	50                   	push   eax
c0018610:	6a 02                	push   0x2
c0018612:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018618:	e8 75 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001861d:	83 c4 0c             	add    esp,0xc
c0018620:	53                   	push   ebx
c0018621:	6a 04                	push   0x4
c0018623:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018629:	e8 64 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001862e:	83 c4 0c             	add    esp,0xc
c0018631:	0f b6 54 24 14       	movzx  edx,BYTE PTR [esp+0x14]
c0018636:	52                   	push   edx
c0018637:	6a 07                	push   0x7
c0018639:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001863f:	e8 4e ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018644:	83 c4 0c             	add    esp,0xc
c0018647:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001864c:	50                   	push   eax
c001864d:	6a 08                	push   0x8
c001864f:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018655:	e8 38 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c001865a:	83 c4 0c             	add    esp,0xc
c001865d:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c0018662:	55                   	push   ebp
c0018663:	6a 09                	push   0x9
c0018665:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c001866b:	e8 22 ec fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018670:	5a                   	pop    edx
c0018671:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018675:	e8 7c fb ff ff       	call   c00181f6 <RTC::completeRTCRefresh()>
c001867a:	83 c4 3c             	add    esp,0x3c
c001867d:	b0 01                	mov    al,0x1
c001867f:	5b                   	pop    ebx
c0018680:	5e                   	pop    esi
c0018681:	5f                   	pop    edi
c0018682:	5d                   	pop    ebp
c0018683:	c3                   	ret    

c0018684 <rtcIRQHandler(regs*, void*)>:
c0018684:	53                   	push   ebx
c0018685:	83 ec 10             	sub    esp,0x10
c0018688:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001868c:	6a 0c                	push   0xc
c001868e:	ff 35 b8 5e 02 c0    	push   DWORD PTR ds:0xc0025eb8
c0018694:	e8 df ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018699:	83 c4 10             	add    esp,0x10
c001869c:	a8 80                	test   al,0x80
c001869e:	74 24                	je     c00186c4 <rtcIRQHandler(regs*, void*)+0x40>
c00186a0:	83 83 58 01 00 00 01 	add    DWORD PTR [ebx+0x158],0x1
c00186a7:	83 93 5c 01 00 00 00 	adc    DWORD PTR [ebx+0x15c],0x0
c00186ae:	66 ff 05 78 97 02 c0 	inc    WORD PTR ds:0xc0029778
c00186b5:	75 0d                	jne    c00186c4 <rtcIRQHandler(regs*, void*)+0x40>
c00186b7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00186bb:	83 c4 08             	add    esp,0x8
c00186be:	5b                   	pop    ebx
c00186bf:	e9 32 fb ff ff       	jmp    c00181f6 <RTC::completeRTCRefresh()>
c00186c4:	83 c4 08             	add    esp,0x8
c00186c7:	5b                   	pop    ebx
c00186c8:	c3                   	ret    
c00186c9:	90                   	nop

c00186ca <RTC::RTC()>:
c00186ca:	83 ec 1c             	sub    esp,0x1c
c00186cd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186d1:	83 ec 08             	sub    esp,0x8
c00186d4:	68 ef 26 02 c0       	push   0xc00226ef
c00186d9:	50                   	push   eax
c00186da:	e8 3b 3a ff ff       	call   c000c11a <Clock::Clock(char const*)>
c00186df:	83 c4 10             	add    esp,0x10
c00186e2:	ba 0c 27 02 c0       	mov    edx,0xc002270c
c00186e7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186eb:	89 10                	mov    DWORD PTR [eax],edx
c00186ed:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00186f1:	83 ec 0c             	sub    esp,0xc
c00186f4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00186f8:	6a 01                	push   0x1
c00186fa:	68 84 86 01 c0       	push   0xc0018684
c00186ff:	6a 08                	push   0x8
c0018701:	50                   	push   eax
c0018702:	e8 ef 3e ff ff       	call   c000c5f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0018707:	83 c4 20             	add    esp,0x20
c001870a:	89 c2                	mov    edx,eax
c001870c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018710:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0018716:	fa                   	cli    
c0018717:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001871c:	83 c0 01             	add    eax,0x1
c001871f:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0018724:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018729:	83 ec 08             	sub    esp,0x8
c001872c:	6a 0b                	push   0xb
c001872e:	50                   	push   eax
c001872f:	e8 44 ea fe ff       	call   c0007178 <Computer::readCMOS(unsigned char)>
c0018734:	83 c4 10             	add    esp,0x10
c0018737:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001873b:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c0018740:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0018744:	83 ca 10             	or     edx,0x10
c0018747:	0f b6 d2             	movzx  edx,dl
c001874a:	83 ec 04             	sub    esp,0x4
c001874d:	52                   	push   edx
c001874e:	6a 0b                	push   0xb
c0018750:	50                   	push   eax
c0018751:	e8 3c eb fe ff       	call   c0007292 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018756:	83 c4 10             	add    esp,0x10
c0018759:	83 ec 0c             	sub    esp,0xc
c001875c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0018760:	e8 91 fa ff ff       	call   c00181f6 <RTC::completeRTCRefresh()>
c0018765:	83 c4 10             	add    esp,0x10
c0018768:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001876d:	83 e8 01             	sub    eax,0x1
c0018770:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c0018775:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001877a:	85 c0                	test   eax,eax
c001877c:	75 01                	jne    c001877f <RTC::RTC()+0xb5>
c001877e:	fb                   	sti    
c001877f:	90                   	nop
c0018780:	83 c4 1c             	add    esp,0x1c
c0018783:	c3                   	ret    

c0018784 <HalConsoleScroll(int, int)>:
c0018784:	83 ec 10             	sub    esp,0x10
c0018787:	c7 44 24 04 00 80 0b c2 	mov    DWORD PTR [esp+0x4],0xc20b8000
c001878f:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0018797:	90                   	nop
c0018798:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c001879d:	0f 8f e1 00 00 00    	jg     c0018884 <HalConsoleScroll(int, int)+0x100>
c00187a3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00187ab:	90                   	nop
c00187ac:	81 7c 24 08 9f 00 00 00 	cmp    DWORD PTR [esp+0x8],0x9f
c00187b4:	0f 8f be 00 00 00    	jg     c0018878 <HalConsoleScroll(int, int)+0xf4>
c00187ba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00187be:	89 d0                	mov    eax,edx
c00187c0:	c1 e0 02             	shl    eax,0x2
c00187c3:	01 d0                	add    eax,edx
c00187c5:	c1 e0 05             	shl    eax,0x5
c00187c8:	89 c2                	mov    edx,eax
c00187ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187ce:	01 d0                	add    eax,edx
c00187d0:	89 c2                	mov    edx,eax
c00187d2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187d6:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00187d9:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00187dd:	89 d0                	mov    eax,edx
c00187df:	c1 e0 02             	shl    eax,0x2
c00187e2:	01 d0                	add    eax,edx
c00187e4:	c1 e0 05             	shl    eax,0x5
c00187e7:	89 c2                	mov    edx,eax
c00187e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00187ed:	01 d0                	add    eax,edx
c00187ef:	8d 90 60 ff ff ff    	lea    edx,[eax-0xa0]
c00187f5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00187f9:	01 c2                	add    edx,eax
c00187fb:	8a 01                	mov    al,BYTE PTR [ecx]
c00187fd:	88 02                	mov    BYTE PTR [edx],al
c00187ff:	83 7c 24 0c 18       	cmp    DWORD PTR [esp+0xc],0x18
c0018804:	75 66                	jne    c001886c <HalConsoleScroll(int, int)+0xe8>
c0018806:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001880a:	83 e0 01             	and    eax,0x1
c001880d:	74 39                	je     c0018848 <HalConsoleScroll(int, int)+0xc4>
c001880f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018813:	83 e0 0f             	and    eax,0xf
c0018816:	88 c2                	mov    dl,al
c0018818:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001881c:	c1 e0 04             	shl    eax,0x4
c001881f:	09 d0                	or     eax,edx
c0018821:	88 c1                	mov    cl,al
c0018823:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018827:	89 d0                	mov    eax,edx
c0018829:	c1 e0 02             	shl    eax,0x2
c001882c:	01 d0                	add    eax,edx
c001882e:	c1 e0 05             	shl    eax,0x5
c0018831:	89 c2                	mov    edx,eax
c0018833:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018837:	01 d0                	add    eax,edx
c0018839:	89 c2                	mov    edx,eax
c001883b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001883f:	01 d0                	add    eax,edx
c0018841:	88 ca                	mov    dl,cl
c0018843:	88 10                	mov    BYTE PTR [eax],dl
c0018845:	eb 25                	jmp    c001886c <HalConsoleScroll(int, int)+0xe8>
c0018847:	90                   	nop
c0018848:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001884c:	89 d0                	mov    eax,edx
c001884e:	c1 e0 02             	shl    eax,0x2
c0018851:	01 d0                	add    eax,edx
c0018853:	c1 e0 05             	shl    eax,0x5
c0018856:	89 c2                	mov    edx,eax
c0018858:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001885c:	01 d0                	add    eax,edx
c001885e:	89 c2                	mov    edx,eax
c0018860:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0018864:	01 d0                	add    eax,edx
c0018866:	c6 00 20             	mov    BYTE PTR [eax],0x20
c0018869:	8d 76 00             	lea    esi,[esi+0x0]
c001886c:	83 44 24 08 01       	add    DWORD PTR [esp+0x8],0x1
c0018871:	e9 36 ff ff ff       	jmp    c00187ac <HalConsoleScroll(int, int)+0x28>
c0018876:	66 90                	xchg   ax,ax
c0018878:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001887d:	e9 16 ff ff ff       	jmp    c0018798 <HalConsoleScroll(int, int)+0x14>
c0018882:	66 90                	xchg   ax,ax
c0018884:	90                   	nop
c0018885:	83 c4 10             	add    esp,0x10
c0018888:	c3                   	ret    
c0018889:	8d 76 00             	lea    esi,[esi+0x0]

c001888c <HalConsoleWriteCharacter(char, int, int, int, int)>:
c001888c:	83 ec 14             	sub    esp,0x14
c001888f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0018893:	88 04 24             	mov    BYTE PTR [esp],al
c0018896:	8a 04 24             	mov    al,BYTE PTR [esp]
c0018899:	0f b6 c0             	movzx  eax,al
c001889c:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00188a0:	89 d1                	mov    ecx,edx
c00188a2:	83 e1 0f             	and    ecx,0xf
c00188a5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00188a9:	c1 e2 04             	shl    edx,0x4
c00188ac:	0f b6 d2             	movzx  edx,dl
c00188af:	09 ca                	or     edx,ecx
c00188b1:	c1 e2 08             	shl    edx,0x8
c00188b4:	09 d0                	or     eax,edx
c00188b6:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00188bb:	c7 44 24 0c 00 80 0b c2 	mov    DWORD PTR [esp+0xc],0xc20b8000
c00188c3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00188c7:	89 d0                	mov    eax,edx
c00188c9:	c1 e0 02             	shl    eax,0x2
c00188cc:	01 d0                	add    eax,edx
c00188ce:	c1 e0 04             	shl    eax,0x4
c00188d1:	89 c2                	mov    edx,eax
c00188d3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00188d7:	01 d0                	add    eax,edx
c00188d9:	01 c0                	add    eax,eax
c00188db:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00188df:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00188e3:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00188e8:	66 89 02             	mov    WORD PTR [edx],ax
c00188eb:	90                   	nop
c00188ec:	83 c4 14             	add    esp,0x14
c00188ef:	c3                   	ret    

c00188f0 <HalConsoleCursorUpdate(int, int)>:
c00188f0:	83 ec 20             	sub    esp,0x20
c00188f3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00188f7:	89 c2                	mov    edx,eax
c00188f9:	c1 e2 02             	shl    edx,0x2
c00188fc:	01 d0                	add    eax,edx
c00188fe:	c1 e0 04             	shl    eax,0x4
c0018901:	89 c2                	mov    edx,eax
c0018903:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018907:	01 d0                	add    eax,edx
c0018909:	66 89 44 24 1e       	mov    WORD PTR [esp+0x1e],ax
c001890e:	66 c7 44 24 10 d4 03 	mov    WORD PTR [esp+0x10],0x3d4
c0018915:	c6 44 24 0f 0f       	mov    BYTE PTR [esp+0xf],0xf
c001891a:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001891e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018922:	ee                   	out    dx,al
c0018923:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0018928:	0f b6 c0             	movzx  eax,al
c001892b:	66 c7 44 24 14 d5 03 	mov    WORD PTR [esp+0x14],0x3d5
c0018932:	88 44 24 13          	mov    BYTE PTR [esp+0x13],al
c0018936:	8a 44 24 13          	mov    al,BYTE PTR [esp+0x13]
c001893a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001893e:	ee                   	out    dx,al
c001893f:	66 c7 44 24 18 d4 03 	mov    WORD PTR [esp+0x18],0x3d4
c0018946:	c6 44 24 17 0e       	mov    BYTE PTR [esp+0x17],0xe
c001894b:	8a 44 24 17          	mov    al,BYTE PTR [esp+0x17]
c001894f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018953:	ee                   	out    dx,al
c0018954:	0f b7 44 24 1e       	movzx  eax,WORD PTR [esp+0x1e]
c0018959:	c1 e8 08             	shr    eax,0x8
c001895c:	0f b6 c0             	movzx  eax,al
c001895f:	66 c7 44 24 1c d5 03 	mov    WORD PTR [esp+0x1c],0x3d5
c0018966:	88 44 24 1b          	mov    BYTE PTR [esp+0x1b],al
c001896a:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c001896e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0018972:	ee                   	out    dx,al
c0018973:	90                   	nop
c0018974:	83 c4 20             	add    esp,0x20
c0018977:	c3                   	ret    

c0018978 <FAT::getName()>:
c0018978:	b8 40 27 02 c0       	mov    eax,0xc0022740
c001897d:	c3                   	ret    
c001897e:	66 90                	xchg   ax,ax

c0018980 <FAT::tell(void*, unsigned long long*)>:
c0018980:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0018985:	75 09                	jne    c0018990 <FAT::tell(void*, unsigned long long*)+0x10>
c0018987:	b8 04 00 00 00       	mov    eax,0x4
c001898c:	c3                   	ret    
c001898d:	8d 76 00             	lea    esi,[esi+0x0]
c0018990:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018995:	75 09                	jne    c00189a0 <FAT::tell(void*, unsigned long long*)+0x20>
c0018997:	b8 04 00 00 00       	mov    eax,0x4
c001899c:	c3                   	ret    
c001899d:	8d 76 00             	lea    esi,[esi+0x0]
c00189a0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189a4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c00189a7:	ba 00 00 00 00       	mov    edx,0x0
c00189ac:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00189b0:	89 01                	mov    DWORD PTR [ecx],eax
c00189b2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00189b5:	b8 00 00 00 00       	mov    eax,0x0
c00189ba:	c3                   	ret    
c00189bb:	90                   	nop

c00189bc <FAT::stat(void*, unsigned long long*)>:
c00189bc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00189c1:	75 09                	jne    c00189cc <FAT::stat(void*, unsigned long long*)+0x10>
c00189c3:	b8 04 00 00 00       	mov    eax,0x4
c00189c8:	c3                   	ret    
c00189c9:	8d 76 00             	lea    esi,[esi+0x0]
c00189cc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00189d1:	75 09                	jne    c00189dc <FAT::stat(void*, unsigned long long*)+0x20>
c00189d3:	b8 04 00 00 00       	mov    eax,0x4
c00189d8:	c3                   	ret    
c00189d9:	8d 76 00             	lea    esi,[esi+0x0]
c00189dc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00189e0:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00189e3:	ba 00 00 00 00       	mov    edx,0x0
c00189e8:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00189ec:	89 01                	mov    DWORD PTR [ecx],eax
c00189ee:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00189f1:	b8 00 00 00 00       	mov    eax,0x0
c00189f6:	c3                   	ret    
c00189f7:	90                   	nop

c00189f8 <FAT::~FAT()>:
c00189f8:	83 ec 0c             	sub    esp,0xc
c00189fb:	ba 8c 27 02 c0       	mov    edx,0xc002278c
c0018a00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a04:	89 10                	mov    DWORD PTR [eax],edx
c0018a06:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018a0a:	83 ec 0c             	sub    esp,0xc
c0018a0d:	50                   	push   eax
c0018a0e:	e8 f3 2a ff ff       	call   c000b506 <Filesystem::~Filesystem()>
c0018a13:	83 c4 10             	add    esp,0x10
c0018a16:	90                   	nop
c0018a17:	83 c4 0c             	add    esp,0xc
c0018a1a:	c3                   	ret    
c0018a1b:	90                   	nop

c0018a1c <FAT::~FAT()>:
c0018a1c:	83 ec 0c             	sub    esp,0xc
c0018a1f:	83 ec 0c             	sub    esp,0xc
c0018a22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018a26:	e8 cd ff ff ff       	call   c00189f8 <FAT::~FAT()>
c0018a2b:	83 c4 10             	add    esp,0x10
c0018a2e:	83 ec 08             	sub    esp,0x8
c0018a31:	6a 08                	push   0x8
c0018a33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018a37:	e8 dc 1d ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0018a3c:	83 c4 10             	add    esp,0x10
c0018a3f:	83 c4 0c             	add    esp,0xc
c0018a42:	c3                   	ret    
c0018a43:	90                   	nop

c0018a44 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0018a44:	83 ec 1c             	sub    esp,0x1c
c0018a47:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0018a4e:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0018a53:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a57:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018a5e:	83 f8 ff             	cmp    eax,0xffffffff
c0018a61:	75 35                	jne    c0018a98 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x54>
c0018a63:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018a67:	88 c2                	mov    dl,al
c0018a69:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018a6e:	01 d0                	add    eax,edx
c0018a70:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018a74:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018a7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018a7e:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018a85:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018a8a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018a8e:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018a95:	eb 19                	jmp    c0018ab0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6c>
c0018a97:	90                   	nop
c0018a98:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0018a9c:	88 c2                	mov    dl,al
c0018a9e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018aa2:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018aa9:	01 d0                	add    eax,edx
c0018aab:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0018aaf:	90                   	nop
c0018ab0:	83 ec 04             	sub    esp,0x4
c0018ab3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018ab7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0018abb:	8d 44 24 15          	lea    eax,[esp+0x15]
c0018abf:	50                   	push   eax
c0018ac0:	e8 0a c5 fe ff       	call   c0004fcf <f_getlabel>
c0018ac5:	83 c4 10             	add    esp,0x10
c0018ac8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018acc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0018ad1:	75 09                	jne    c0018adc <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x98>
c0018ad3:	b8 00 00 00 00       	mov    eax,0x0
c0018ad8:	eb 0a                	jmp    c0018ae4 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0xa0>
c0018ada:	66 90                	xchg   ax,ax
c0018adc:	b8 01 00 00 00       	mov    eax,0x1
c0018ae1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ae4:	83 c4 1c             	add    esp,0x1c
c0018ae7:	c3                   	ret    

c0018ae8 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0018ae8:	57                   	push   edi
c0018ae9:	83 ec 58             	sub    esp,0x58
c0018aec:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0018af4:	8d 54 24 10          	lea    edx,[esp+0x10]
c0018af8:	b8 00 00 00 00       	mov    eax,0x0
c0018afd:	b9 0f 00 00 00       	mov    ecx,0xf
c0018b02:	fc                   	cld    
c0018b03:	89 d7                	mov    edi,edx
c0018b05:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0018b07:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018b0b:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018b12:	83 f8 ff             	cmp    eax,0xffffffff
c0018b15:	75 35                	jne    c0018b4c <FAT::setlabel(LogicalDisk*, int, char*)+0x64>
c0018b17:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018b1b:	88 c2                	mov    dl,al
c0018b1d:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018b22:	01 d0                	add    eax,edx
c0018b24:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b28:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018b2e:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018b32:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018b39:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018b3e:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0018b42:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018b49:	eb 19                	jmp    c0018b64 <FAT::setlabel(LogicalDisk*, int, char*)+0x7c>
c0018b4b:	90                   	nop
c0018b4c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0018b50:	88 c2                	mov    dl,al
c0018b52:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0018b56:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018b5d:	01 d0                	add    eax,edx
c0018b5f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0018b63:	90                   	nop
c0018b64:	83 ec 08             	sub    esp,0x8
c0018b67:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0018b6b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b6f:	50                   	push   eax
c0018b70:	e8 cb 7c fe ff       	call   c0000840 <strcat>
c0018b75:	83 c4 10             	add    esp,0x10
c0018b78:	83 ec 0c             	sub    esp,0xc
c0018b7b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0018b7f:	50                   	push   eax
c0018b80:	e8 9b c5 fe ff       	call   c0005120 <f_setlabel>
c0018b85:	83 c4 10             	add    esp,0x10
c0018b88:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0018b8c:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0018b91:	75 09                	jne    c0018b9c <FAT::setlabel(LogicalDisk*, int, char*)+0xb4>
c0018b93:	b8 00 00 00 00       	mov    eax,0x0
c0018b98:	eb 0a                	jmp    c0018ba4 <FAT::setlabel(LogicalDisk*, int, char*)+0xbc>
c0018b9a:	66 90                	xchg   ax,ax
c0018b9c:	b8 01 00 00 00       	mov    eax,0x1
c0018ba1:	8d 76 00             	lea    esi,[esi+0x0]
c0018ba4:	83 c4 58             	add    esp,0x58
c0018ba7:	5f                   	pop    edi
c0018ba8:	c3                   	ret    
c0018ba9:	90                   	nop
c0018baa:	66 90                	xchg   ax,ax

c0018bac <FAT::format(LogicalDisk*, int, char const*, int)>:
c0018bac:	83 ec 2c             	sub    esp,0x2c
c0018baf:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0018bb7:	83 ec 08             	sub    esp,0x8
c0018bba:	68 64 27 02 c0       	push   0xc0022764
c0018bbf:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018bc3:	e8 88 7b fe ff       	call   c0000750 <strcmp>
c0018bc8:	83 c4 10             	add    esp,0x10
c0018bcb:	85 c0                	test   eax,eax
c0018bcd:	0f 94 c0             	sete   al
c0018bd0:	0f b6 c0             	movzx  eax,al
c0018bd3:	85 c0                	test   eax,eax
c0018bd5:	74 0d                	je     c0018be4 <FAT::format(LogicalDisk*, int, char const*, int)+0x38>
c0018bd7:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018bdf:	e9 c0 00 00 00       	jmp    c0018ca4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018be4:	83 ec 08             	sub    esp,0x8
c0018be7:	68 56 27 02 c0       	push   0xc0022756
c0018bec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018bf0:	e8 5b 7b fe ff       	call   c0000750 <strcmp>
c0018bf5:	83 c4 10             	add    esp,0x10
c0018bf8:	85 c0                	test   eax,eax
c0018bfa:	0f 94 c0             	sete   al
c0018bfd:	0f b6 c0             	movzx  eax,al
c0018c00:	85 c0                	test   eax,eax
c0018c02:	74 10                	je     c0018c14 <FAT::format(LogicalDisk*, int, char const*, int)+0x68>
c0018c04:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018c0c:	e9 93 00 00 00       	jmp    c0018ca4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c11:	8d 76 00             	lea    esi,[esi+0x0]
c0018c14:	83 ec 08             	sub    esp,0x8
c0018c17:	68 5c 27 02 c0       	push   0xc002275c
c0018c1c:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c20:	e8 2b 7b fe ff       	call   c0000750 <strcmp>
c0018c25:	83 c4 10             	add    esp,0x10
c0018c28:	85 c0                	test   eax,eax
c0018c2a:	0f 94 c0             	sete   al
c0018c2d:	0f b6 c0             	movzx  eax,al
c0018c30:	85 c0                	test   eax,eax
c0018c32:	74 0c                	je     c0018c40 <FAT::format(LogicalDisk*, int, char const*, int)+0x94>
c0018c34:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0018c3c:	eb 66                	jmp    c0018ca4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c3e:	66 90                	xchg   ax,ax
c0018c40:	83 ec 08             	sub    esp,0x8
c0018c43:	68 9c ff 01 c0       	push   0xc001ff9c
c0018c48:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c4c:	e8 ff 7a fe ff       	call   c0000750 <strcmp>
c0018c51:	83 c4 10             	add    esp,0x10
c0018c54:	85 c0                	test   eax,eax
c0018c56:	0f 94 c0             	sete   al
c0018c59:	0f b6 c0             	movzx  eax,al
c0018c5c:	85 c0                	test   eax,eax
c0018c5e:	74 0c                	je     c0018c6c <FAT::format(LogicalDisk*, int, char const*, int)+0xc0>
c0018c60:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0018c68:	eb 3a                	jmp    c0018ca4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c6a:	66 90                	xchg   ax,ax
c0018c6c:	83 ec 08             	sub    esp,0x8
c0018c6f:	68 62 27 02 c0       	push   0xc0022762
c0018c74:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0018c78:	e8 d3 7a fe ff       	call   c0000750 <strcmp>
c0018c7d:	83 c4 10             	add    esp,0x10
c0018c80:	85 c0                	test   eax,eax
c0018c82:	0f 94 c0             	sete   al
c0018c85:	0f b6 c0             	movzx  eax,al
c0018c88:	85 c0                	test   eax,eax
c0018c8a:	74 0c                	je     c0018c98 <FAT::format(LogicalDisk*, int, char const*, int)+0xec>
c0018c8c:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0018c94:	eb 0e                	jmp    c0018ca4 <FAT::format(LogicalDisk*, int, char const*, int)+0xf8>
c0018c96:	66 90                	xchg   ax,ax
c0018c98:	b8 08 00 00 00       	mov    eax,0x8
c0018c9d:	e9 ea 00 00 00       	jmp    c0018d8c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018ca2:	66 90                	xchg   ax,ax
c0018ca4:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0018cab:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0018cb0:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018cb4:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018cbb:	83 f8 ff             	cmp    eax,0xffffffff
c0018cbe:	75 34                	jne    c0018cf4 <FAT::format(LogicalDisk*, int, char const*, int)+0x148>
c0018cc0:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018cc4:	88 c2                	mov    dl,al
c0018cc6:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018ccb:	01 d0                	add    eax,edx
c0018ccd:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018cd1:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018cd7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018cdb:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018ce2:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018ce7:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0018ceb:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018cf2:	eb 18                	jmp    c0018d0c <FAT::format(LogicalDisk*, int, char const*, int)+0x160>
c0018cf4:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0018cf8:	88 c2                	mov    dl,al
c0018cfa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0018cfe:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018d05:	01 d0                	add    eax,edx
c0018d07:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0018d0b:	90                   	nop
c0018d0c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0018d10:	88 04 24             	mov    BYTE PTR [esp],al
c0018d13:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018d17:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018d1b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0018d23:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0018d28:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0018d30:	83 ec 0c             	sub    esp,0xc
c0018d33:	68 00 20 00 00       	push   0x2000
c0018d38:	e8 79 ed fe ff       	call   c0007ab6 <malloc>
c0018d3d:	83 c4 10             	add    esp,0x10
c0018d40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0018d44:	68 00 20 00 00       	push   0x2000
c0018d49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018d4d:	8d 44 24 08          	lea    eax,[esp+0x8]
c0018d51:	50                   	push   eax
c0018d52:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0018d56:	50                   	push   eax
c0018d57:	e8 c1 c6 fe ff       	call   c000541d <f_mkfs>
c0018d5c:	83 c4 10             	add    esp,0x10
c0018d5f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0018d63:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0018d68:	75 0a                	jne    c0018d74 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c8>
c0018d6a:	b8 00 00 00 00       	mov    eax,0x0
c0018d6f:	eb 1b                	jmp    c0018d8c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018d71:	8d 76 00             	lea    esi,[esi+0x0]
c0018d74:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0018d79:	75 09                	jne    c0018d84 <FAT::format(LogicalDisk*, int, char const*, int)+0x1d8>
c0018d7b:	b8 09 00 00 00       	mov    eax,0x9
c0018d80:	eb 0a                	jmp    c0018d8c <FAT::format(LogicalDisk*, int, char const*, int)+0x1e0>
c0018d82:	66 90                	xchg   ax,ax
c0018d84:	b8 01 00 00 00       	mov    eax,0x1
c0018d89:	8d 76 00             	lea    esi,[esi+0x0]
c0018d8c:	83 c4 2c             	add    esp,0x2c
c0018d8f:	c3                   	ret    

c0018d90 <FAT::tryMount(LogicalDisk*, int)>:
c0018d90:	81 ec 4c 03 00 00    	sub    esp,0x34c
c0018d96:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018d9b:	83 f8 14             	cmp    eax,0x14
c0018d9e:	75 18                	jne    c0018db8 <FAT::tryMount(LogicalDisk*, int)+0x28>
c0018da0:	83 ec 0c             	sub    esp,0xc
c0018da3:	68 68 27 02 c0       	push   0xc0022768
c0018da8:	e8 cc 84 ff ff       	call   c0011279 <KePanic(char const*)>
c0018dad:	83 c4 10             	add    esp,0x10
c0018db0:	b0 00                	mov    al,0x0
c0018db2:	e9 ed 01 00 00       	jmp    c0018fa4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018db7:	90                   	nop
c0018db8:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c0018dbf:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0018dc5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0018dcb:	3d 00 02 00 00       	cmp    eax,0x200
c0018dd0:	74 0a                	je     c0018ddc <FAT::tryMount(LogicalDisk*, int)+0x4c>
c0018dd2:	b0 00                	mov    al,0x0
c0018dd4:	e9 cb 01 00 00       	jmp    c0018fa4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018dd9:	8d 76 00             	lea    esi,[esi+0x0]
c0018ddc:	c6 84 24 3f 03 00 00 00 	mov    BYTE PTR [esp+0x33f],0x0
c0018de4:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018deb:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c0018df2:	83 f8 ff             	cmp    eax,0xffffffff
c0018df5:	74 09                	je     c0018e00 <FAT::tryMount(LogicalDisk*, int)+0x70>
c0018df7:	b0 01                	mov    al,0x1
c0018df9:	e9 a6 01 00 00       	jmp    c0018fa4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018dfe:	66 90                	xchg   ax,ax
c0018e00:	66 c7 84 24 31 03 00 00 30 3a 	mov    WORD PTR [esp+0x331],0x3a30
c0018e0a:	c6 84 24 33 03 00 00 00 	mov    BYTE PTR [esp+0x333],0x0
c0018e12:	8a 84 24 31 03 00 00 	mov    al,BYTE PTR [esp+0x331]
c0018e19:	88 c2                	mov    dl,al
c0018e1b:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e20:	01 d0                	add    eax,edx
c0018e22:	88 84 24 31 03 00 00 	mov    BYTE PTR [esp+0x331],al
c0018e29:	8b 15 80 97 02 c0    	mov    edx,DWORD PTR ds:0xc0029780
c0018e2f:	8b 84 24 58 03 00 00 	mov    eax,DWORD PTR [esp+0x358]
c0018e36:	89 14 85 a0 97 02 c0 	mov    DWORD PTR [eax*4-0x3ffd6860],edx
c0018e3d:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018e42:	8b 94 24 58 03 00 00 	mov    edx,DWORD PTR [esp+0x358]
c0018e49:	89 14 85 20 98 02 c0 	mov    DWORD PTR [eax*4-0x3ffd67e0],edx
c0018e50:	83 ec 0c             	sub    esp,0xc
c0018e53:	68 34 02 00 00       	push   0x234
c0018e58:	e8 59 ec fe ff       	call   c0007ab6 <malloc>
c0018e5d:	83 c4 10             	add    esp,0x10
c0018e60:	89 84 24 38 03 00 00 	mov    DWORD PTR [esp+0x338],eax
c0018e67:	83 ec 04             	sub    esp,0x4
c0018e6a:	6a 00                	push   0x0
c0018e6c:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018e73:	50                   	push   eax
c0018e74:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018e7b:	e8 78 ad fe ff       	call   c0003bf8 <f_mount>
c0018e80:	83 c4 10             	add    esp,0x10
c0018e83:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018e8a:	83 bc 24 34 03 00 00 00 	cmp    DWORD PTR [esp+0x334],0x0
c0018e92:	74 1c                	je     c0018eb0 <FAT::tryMount(LogicalDisk*, int)+0x120>
c0018e94:	83 ec 0c             	sub    esp,0xc
c0018e97:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018e9e:	e8 33 ec fe ff       	call   c0007ad6 <rfree>
c0018ea3:	83 c4 10             	add    esp,0x10
c0018ea6:	b0 00                	mov    al,0x0
c0018ea8:	e9 f7 00 00 00       	jmp    c0018fa4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018ead:	8d 76 00             	lea    esi,[esi+0x0]
c0018eb0:	83 ec 04             	sub    esp,0x4
c0018eb3:	68 00 01 00 00       	push   0x100
c0018eb8:	6a 00                	push   0x0
c0018eba:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018ec1:	50                   	push   eax
c0018ec2:	e8 29 76 fe ff       	call   c00004f0 <memset>
c0018ec7:	83 c4 10             	add    esp,0x10
c0018eca:	83 ec 08             	sub    esp,0x8
c0018ecd:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018ed4:	50                   	push   eax
c0018ed5:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018edc:	50                   	push   eax
c0018edd:	e8 5e 79 fe ff       	call   c0000840 <strcat>
c0018ee2:	83 c4 10             	add    esp,0x10
c0018ee5:	83 ec 08             	sub    esp,0x8
c0018ee8:	68 76 27 02 c0       	push   0xc0022776
c0018eed:	8d 84 24 3d 02 00 00 	lea    eax,[esp+0x23d]
c0018ef4:	50                   	push   eax
c0018ef5:	e8 46 79 fe ff       	call   c0000840 <strcat>
c0018efa:	83 c4 10             	add    esp,0x10
c0018efd:	83 ec 04             	sub    esp,0x4
c0018f00:	6a 01                	push   0x1
c0018f02:	8d 84 24 39 02 00 00 	lea    eax,[esp+0x239]
c0018f09:	50                   	push   eax
c0018f0a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018f0e:	50                   	push   eax
c0018f0f:	e8 46 ad fe ff       	call   c0003c5a <f_open>
c0018f14:	83 c4 10             	add    esp,0x10
c0018f17:	89 84 24 34 03 00 00 	mov    DWORD PTR [esp+0x334],eax
c0018f1e:	8b 84 24 34 03 00 00 	mov    eax,DWORD PTR [esp+0x334]
c0018f25:	85 c0                	test   eax,eax
c0018f27:	74 0b                	je     c0018f34 <FAT::tryMount(LogicalDisk*, int)+0x1a4>
c0018f29:	78 31                	js     c0018f5c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018f2b:	83 e8 04             	sub    eax,0x4
c0018f2e:	83 f8 01             	cmp    eax,0x1
c0018f31:	77 29                	ja     c0018f5c <FAT::tryMount(LogicalDisk*, int)+0x1cc>
c0018f33:	90                   	nop
c0018f34:	c6 84 24 3f 03 00 00 01 	mov    BYTE PTR [esp+0x33f],0x1
c0018f3c:	83 ec 0c             	sub    esp,0xc
c0018f3f:	8d 44 24 14          	lea    eax,[esp+0x14]
c0018f43:	50                   	push   eax
c0018f44:	e8 e0 b4 fe ff       	call   c0004429 <f_close>
c0018f49:	83 c4 10             	add    esp,0x10
c0018f4c:	90                   	nop
c0018f4d:	0f b6 84 24 3f 03 00 00 	movzx  eax,BYTE PTR [esp+0x33f]
c0018f55:	85 c0                	test   eax,eax
c0018f57:	74 43                	je     c0018f9c <FAT::tryMount(LogicalDisk*, int)+0x20c>
c0018f59:	eb 31                	jmp    c0018f8c <FAT::tryMount(LogicalDisk*, int)+0x1fc>
c0018f5b:	90                   	nop
c0018f5c:	83 ec 0c             	sub    esp,0xc
c0018f5f:	ff b4 24 44 03 00 00 	push   DWORD PTR [esp+0x344]
c0018f66:	e8 6b eb fe ff       	call   c0007ad6 <rfree>
c0018f6b:	83 c4 10             	add    esp,0x10
c0018f6e:	83 ec 04             	sub    esp,0x4
c0018f71:	6a 00                	push   0x0
c0018f73:	8d 84 24 39 03 00 00 	lea    eax,[esp+0x339]
c0018f7a:	50                   	push   eax
c0018f7b:	6a 00                	push   0x0
c0018f7d:	e8 76 ac fe ff       	call   c0003bf8 <f_mount>
c0018f82:	83 c4 10             	add    esp,0x10
c0018f85:	b0 00                	mov    al,0x0
c0018f87:	eb 1b                	jmp    c0018fa4 <FAT::tryMount(LogicalDisk*, int)+0x214>
c0018f89:	8d 76 00             	lea    esi,[esi+0x0]
c0018f8c:	a1 80 97 02 c0       	mov    eax,ds:0xc0029780
c0018f91:	83 c0 01             	add    eax,0x1
c0018f94:	a3 80 97 02 c0       	mov    ds:0xc0029780,eax
c0018f99:	8d 76 00             	lea    esi,[esi+0x0]
c0018f9c:	8a 84 24 3f 03 00 00 	mov    al,BYTE PTR [esp+0x33f]
c0018fa3:	90                   	nop
c0018fa4:	81 c4 4c 03 00 00    	add    esp,0x34c
c0018faa:	c3                   	ret    
c0018fab:	90                   	nop

c0018fac <FAT::allocateSwapfile(char const*, int)>:
c0018fac:	55                   	push   ebp
c0018fad:	57                   	push   edi
c0018fae:	56                   	push   esi
c0018faf:	53                   	push   ebx
c0018fb0:	81 ec 3c 04 00 00    	sub    esp,0x43c
c0018fb6:	c7 84 24 20 04 00 00 14 01 00 00 	mov    DWORD PTR [esp+0x420],0x114
c0018fc1:	83 ec 0c             	sub    esp,0xc
c0018fc4:	ff b4 24 2c 04 00 00 	push   DWORD PTR [esp+0x42c]
c0018fcb:	e8 e6 ea fe ff       	call   c0007ab6 <malloc>
c0018fd0:	83 c4 10             	add    esp,0x10
c0018fd3:	89 c7                	mov    edi,eax
c0018fd5:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c0018fda:	83 ec 04             	sub    esp,0x4
c0018fdd:	50                   	push   eax
c0018fde:	ff b4 24 5c 04 00 00 	push   DWORD PTR [esp+0x45c]
c0018fe5:	57                   	push   edi
c0018fe6:	e8 57 27 ff ff       	call   c000b742 <File::File(char const*, Process*)>
c0018feb:	83 c4 10             	add    esp,0x10
c0018fee:	89 bc 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],edi
c0018ff5:	83 ec 04             	sub    esp,0x4
c0018ff8:	8d 44 24 13          	lea    eax,[esp+0x13]
c0018ffc:	50                   	push   eax
c0018ffd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019001:	50                   	push   eax
c0019002:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c0019009:	e8 f2 2a ff ff       	call   c000bb00 <File::stat(unsigned long long*, bool*)>
c001900e:	83 c4 10             	add    esp,0x10
c0019011:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019018:	c1 e0 14             	shl    eax,0x14
c001901b:	89 c7                	mov    edi,eax
c001901d:	89 c5                	mov    ebp,eax
c001901f:	c1 fd 1f             	sar    ebp,0x1f
c0019022:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019026:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001902a:	89 f9                	mov    ecx,edi
c001902c:	31 c1                	xor    ecx,eax
c001902e:	89 cb                	mov    ebx,ecx
c0019030:	89 e9                	mov    ecx,ebp
c0019032:	31 d1                	xor    ecx,edx
c0019034:	89 ce                	mov    esi,ecx
c0019036:	89 f0                	mov    eax,esi
c0019038:	09 d8                	or     eax,ebx
c001903a:	0f 84 9c 00 00 00    	je     c00190dc <FAT::allocateSwapfile(char const*, int)+0x130>
c0019040:	83 ec 0c             	sub    esp,0xc
c0019043:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001904a:	e8 7d 29 ff ff       	call   c000b9cc <File::unlink()>
c001904f:	83 c4 10             	add    esp,0x10
c0019052:	83 ec 08             	sub    esp,0x8
c0019055:	6a 12                	push   0x12
c0019057:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001905e:	e8 9b 27 ff ff       	call   c000b7fe <File::open(FileOpenMode)>
c0019063:	83 c4 10             	add    esp,0x10
c0019066:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c001906d:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019073:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001907a:	8b 84 24 58 04 00 00 	mov    eax,DWORD PTR [esp+0x458]
c0019081:	c1 e0 14             	shl    eax,0x14
c0019084:	83 ec 04             	sub    esp,0x4
c0019087:	6a 01                	push   0x1
c0019089:	50                   	push   eax
c001908a:	ff b4 24 34 04 00 00 	push   DWORD PTR [esp+0x434]
c0019091:	e8 1a c2 fe ff       	call   c00052b0 <f_expand>
c0019096:	83 c4 10             	add    esp,0x10
c0019099:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00190a0:	8b 00                	mov    eax,DWORD PTR [eax]
c00190a2:	83 c0 10             	add    eax,0x10
c00190a5:	8b 00                	mov    eax,DWORD PTR [eax]
c00190a7:	83 ec 0c             	sub    esp,0xc
c00190aa:	8d 54 24 24          	lea    edx,[esp+0x24]
c00190ae:	52                   	push   edx
c00190af:	8d 54 24 30          	lea    edx,[esp+0x30]
c00190b3:	52                   	push   edx
c00190b4:	6a 00                	push   0x0
c00190b6:	68 00 04 00 00       	push   0x400
c00190bb:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c00190c2:	ff d0                	call   eax
c00190c4:	83 c4 20             	add    esp,0x20
c00190c7:	83 ec 0c             	sub    esp,0xc
c00190ca:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00190d1:	e8 86 27 ff ff       	call   c000b85c <File::close()>
c00190d6:	83 c4 10             	add    esp,0x10
c00190d9:	8d 76 00             	lea    esi,[esi+0x0]
c00190dc:	83 ec 08             	sub    esp,0x8
c00190df:	6a 01                	push   0x1
c00190e1:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c00190e8:	e8 11 27 ff ff       	call   c000b7fe <File::open(FileOpenMode)>
c00190ed:	83 c4 10             	add    esp,0x10
c00190f0:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c00190f7:	8b 00                	mov    eax,DWORD PTR [eax]
c00190f9:	83 c0 0c             	add    eax,0xc
c00190fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00190fe:	83 ec 0c             	sub    esp,0xc
c0019101:	8d 54 24 24          	lea    edx,[esp+0x24]
c0019105:	52                   	push   edx
c0019106:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c001910a:	52                   	push   edx
c001910b:	6a 00                	push   0x0
c001910d:	6a 04                	push   0x4
c001910f:	ff b4 24 48 04 00 00 	push   DWORD PTR [esp+0x448]
c0019116:	ff d0                	call   eax
c0019118:	83 c4 20             	add    esp,0x20
c001911b:	8b 84 24 2c 04 00 00 	mov    eax,DWORD PTR [esp+0x42c]
c0019122:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0019128:	89 84 24 28 04 00 00 	mov    DWORD PTR [esp+0x428],eax
c001912f:	8b 84 24 28 04 00 00 	mov    eax,DWORD PTR [esp+0x428]
c0019136:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0019139:	89 84 24 24 04 00 00 	mov    DWORD PTR [esp+0x424],eax
c0019140:	83 ec 0c             	sub    esp,0xc
c0019143:	ff b4 24 38 04 00 00 	push   DWORD PTR [esp+0x438]
c001914a:	e8 0d 27 ff ff       	call   c000b85c <File::close()>
c001914f:	83 c4 10             	add    esp,0x10
c0019152:	8b 84 24 24 04 00 00 	mov    eax,DWORD PTR [esp+0x424]
c0019159:	ba 00 00 00 00       	mov    edx,0x0
c001915e:	81 c4 3c 04 00 00    	add    esp,0x43c
c0019164:	5b                   	pop    ebx
c0019165:	5e                   	pop    esi
c0019166:	5f                   	pop    edi
c0019167:	5d                   	pop    ebp
c0019168:	c3                   	ret    
c0019169:	90                   	nop
c001916a:	66 90                	xchg   ax,ax

c001916c <FAT::readDir(void*, unsigned long, void*, int*)>:
c001916c:	57                   	push   edi
c001916d:	56                   	push   esi
c001916e:	53                   	push   ebx
c001916f:	81 ec 50 02 00 00    	sub    esp,0x250
c0019175:	83 bc 24 64 02 00 00 00 	cmp    DWORD PTR [esp+0x264],0x0
c001917d:	74 0d                	je     c001918c <FAT::readDir(void*, unsigned long, void*, int*)+0x20>
c001917f:	83 bc 24 70 02 00 00 00 	cmp    DWORD PTR [esp+0x270],0x0
c0019187:	75 0f                	jne    c0019198 <FAT::readDir(void*, unsigned long, void*, int*)+0x2c>
c0019189:	8d 76 00             	lea    esi,[esi+0x0]
c001918c:	b8 04 00 00 00       	mov    eax,0x4
c0019191:	e9 3a 01 00 00       	jmp    c00192d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c0019196:	66 90                	xchg   ax,ax
c0019198:	83 ec 08             	sub    esp,0x8
c001919b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c00191a2:	50                   	push   eax
c00191a3:	ff b4 24 70 02 00 00 	push   DWORD PTR [esp+0x270]
c00191aa:	e8 47 b5 fe ff       	call   c00046f6 <f_readdir>
c00191af:	83 c4 10             	add    esp,0x10
c00191b2:	89 84 24 4c 02 00 00 	mov    DWORD PTR [esp+0x24c],eax
c00191b9:	66 c7 44 24 08 00 00 	mov    WORD PTR [esp+0x8],0x0
c00191c0:	83 ec 0c             	sub    esp,0xc
c00191c3:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00191ca:	83 c0 16             	add    eax,0x16
c00191cd:	50                   	push   eax
c00191ce:	e8 9d 73 fe ff       	call   c0000570 <strlen>
c00191d3:	83 c4 10             	add    esp,0x10
c00191d6:	ba 00 00 00 00       	mov    edx,0x0
c00191db:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00191df:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00191e3:	8a 84 24 20 01 00 00 	mov    al,BYTE PTR [esp+0x120]
c00191ea:	0f b6 c0             	movzx  eax,al
c00191ed:	83 e0 10             	and    eax,0x10
c00191f0:	74 0a                	je     c00191fc <FAT::readDir(void*, unsigned long, void*, int*)+0x90>
c00191f2:	b8 02 00 00 00       	mov    eax,0x2
c00191f7:	eb 0b                	jmp    c0019204 <FAT::readDir(void*, unsigned long, void*, int*)+0x98>
c00191f9:	8d 76 00             	lea    esi,[esi+0x0]
c00191fc:	b8 01 00 00 00       	mov    eax,0x1
c0019201:	8d 76 00             	lea    esi,[esi+0x0]
c0019204:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019208:	83 ec 08             	sub    esp,0x8
c001920b:	8d 84 24 20 01 00 00 	lea    eax,[esp+0x120]
c0019212:	83 c0 16             	add    eax,0x16
c0019215:	50                   	push   eax
c0019216:	8d 44 24 14          	lea    eax,[esp+0x14]
c001921a:	83 c0 10             	add    eax,0x10
c001921d:	50                   	push   eax
c001921e:	e8 1d 74 fe ff       	call   c0000640 <strcpy>
c0019223:	83 c4 10             	add    esp,0x10
c0019226:	8b 84 24 6c 02 00 00 	mov    eax,DWORD PTR [esp+0x26c]
c001922d:	89 84 24 48 02 00 00 	mov    DWORD PTR [esp+0x248],eax
c0019234:	8d 44 24 08          	lea    eax,[esp+0x8]
c0019238:	89 84 24 44 02 00 00 	mov    DWORD PTR [esp+0x244],eax
c001923f:	8b 84 24 68 02 00 00 	mov    eax,DWORD PTR [esp+0x268]
c0019246:	89 84 24 40 02 00 00 	mov    DWORD PTR [esp+0x240],eax
c001924d:	8b 84 24 48 02 00 00 	mov    eax,DWORD PTR [esp+0x248]
c0019254:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c001925b:	8b 84 24 44 02 00 00 	mov    eax,DWORD PTR [esp+0x244]
c0019262:	8b 94 24 48 02 00 00 	mov    edx,DWORD PTR [esp+0x248]
c0019269:	8b 8c 24 40 02 00 00 	mov    ecx,DWORD PTR [esp+0x240]
c0019270:	89 c6                	mov    esi,eax
c0019272:	89 d7                	mov    edi,edx
c0019274:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019276:	89 c8                	mov    eax,ecx
c0019278:	89 fa                	mov    edx,edi
c001927a:	89 f3                	mov    ebx,esi
c001927c:	89 9c 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],ebx
c0019283:	89 94 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],edx
c001928a:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c0019291:	8b 84 24 70 02 00 00 	mov    eax,DWORD PTR [esp+0x270]
c0019298:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c001929e:	8a 84 24 2e 01 00 00 	mov    al,BYTE PTR [esp+0x12e]
c00192a5:	0f be c0             	movsx  eax,al
c00192a8:	85 c0                	test   eax,eax
c00192aa:	75 08                	jne    c00192b4 <FAT::readDir(void*, unsigned long, void*, int*)+0x148>
c00192ac:	b8 07 00 00 00       	mov    eax,0x7
c00192b1:	eb 1d                	jmp    c00192d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00192b3:	90                   	nop
c00192b4:	8b 84 24 4c 02 00 00 	mov    eax,DWORD PTR [esp+0x24c]
c00192bb:	85 c0                	test   eax,eax
c00192bd:	75 09                	jne    c00192c8 <FAT::readDir(void*, unsigned long, void*, int*)+0x15c>
c00192bf:	b8 00 00 00 00       	mov    eax,0x0
c00192c4:	eb 0a                	jmp    c00192d0 <FAT::readDir(void*, unsigned long, void*, int*)+0x164>
c00192c6:	66 90                	xchg   ax,ax
c00192c8:	b8 01 00 00 00       	mov    eax,0x1
c00192cd:	8d 76 00             	lea    esi,[esi+0x0]
c00192d0:	81 c4 50 02 00 00    	add    esp,0x250
c00192d6:	5b                   	pop    ebx
c00192d7:	5e                   	pop    esi
c00192d8:	5f                   	pop    edi
c00192d9:	c3                   	ret    
c00192da:	66 90                	xchg   ax,ax

c00192dc <FAT::read(void*, unsigned long, void*, int*)>:
c00192dc:	83 ec 1c             	sub    esp,0x1c
c00192df:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00192e4:	74 0a                	je     c00192f0 <FAT::read(void*, unsigned long, void*, int*)+0x14>
c00192e6:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00192eb:	75 0b                	jne    c00192f8 <FAT::read(void*, unsigned long, void*, int*)+0x1c>
c00192ed:	8d 76 00             	lea    esi,[esi+0x0]
c00192f0:	b8 04 00 00 00       	mov    eax,0x4
c00192f5:	eb 41                	jmp    c0019338 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c00192f7:	90                   	nop
c00192f8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00192fc:	50                   	push   eax
c00192fd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019301:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019305:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019309:	e8 0f ac fe ff       	call   c0003f1d <f_read>
c001930e:	83 c4 10             	add    esp,0x10
c0019311:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019315:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019319:	89 c2                	mov    edx,eax
c001931b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001931f:	89 10                	mov    DWORD PTR [eax],edx
c0019321:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019325:	85 c0                	test   eax,eax
c0019327:	75 07                	jne    c0019330 <FAT::read(void*, unsigned long, void*, int*)+0x54>
c0019329:	b8 00 00 00 00       	mov    eax,0x0
c001932e:	eb 08                	jmp    c0019338 <FAT::read(void*, unsigned long, void*, int*)+0x5c>
c0019330:	b8 01 00 00 00       	mov    eax,0x1
c0019335:	8d 76 00             	lea    esi,[esi+0x0]
c0019338:	83 c4 1c             	add    esp,0x1c
c001933b:	c3                   	ret    

c001933c <FAT::write(void*, unsigned long, void*, int*)>:
c001933c:	83 ec 1c             	sub    esp,0x1c
c001933f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0019344:	74 0a                	je     c0019350 <FAT::write(void*, unsigned long, void*, int*)+0x14>
c0019346:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c001934b:	75 0b                	jne    c0019358 <FAT::write(void*, unsigned long, void*, int*)+0x1c>
c001934d:	8d 76 00             	lea    esi,[esi+0x0]
c0019350:	b8 04 00 00 00       	mov    eax,0x4
c0019355:	eb 41                	jmp    c0019398 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019357:	90                   	nop
c0019358:	8d 44 24 08          	lea    eax,[esp+0x8]
c001935c:	50                   	push   eax
c001935d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0019361:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0019365:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019369:	e8 ae ad fe ff       	call   c000411c <f_write>
c001936e:	83 c4 10             	add    esp,0x10
c0019371:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019375:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019379:	89 c2                	mov    edx,eax
c001937b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001937f:	89 10                	mov    DWORD PTR [eax],edx
c0019381:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0019385:	85 c0                	test   eax,eax
c0019387:	75 07                	jne    c0019390 <FAT::write(void*, unsigned long, void*, int*)+0x54>
c0019389:	b8 00 00 00 00       	mov    eax,0x0
c001938e:	eb 08                	jmp    c0019398 <FAT::write(void*, unsigned long, void*, int*)+0x5c>
c0019390:	b8 01 00 00 00       	mov    eax,0x1
c0019395:	8d 76 00             	lea    esi,[esi+0x0]
c0019398:	83 c4 1c             	add    esp,0x1c
c001939b:	c3                   	ret    

c001939c <FAT::close(void*)>:
c001939c:	83 ec 1c             	sub    esp,0x1c
c001939f:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00193a4:	75 0a                	jne    c00193b0 <FAT::close(void*)+0x14>
c00193a6:	b8 04 00 00 00       	mov    eax,0x4
c00193ab:	eb 3f                	jmp    c00193ec <FAT::close(void*)+0x50>
c00193ad:	8d 76 00             	lea    esi,[esi+0x0]
c00193b0:	83 ec 0c             	sub    esp,0xc
c00193b3:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193b7:	e8 6d b0 fe ff       	call   c0004429 <f_close>
c00193bc:	83 c4 10             	add    esp,0x10
c00193bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00193c3:	83 ec 0c             	sub    esp,0xc
c00193c6:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00193ca:	e8 f7 e6 fe ff       	call   c0007ac6 <free>
c00193cf:	83 c4 10             	add    esp,0x10
c00193d2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00193d6:	85 c0                	test   eax,eax
c00193d8:	75 0a                	jne    c00193e4 <FAT::close(void*)+0x48>
c00193da:	b8 00 00 00 00       	mov    eax,0x0
c00193df:	eb 0b                	jmp    c00193ec <FAT::close(void*)+0x50>
c00193e1:	8d 76 00             	lea    esi,[esi+0x0]
c00193e4:	b8 01 00 00 00       	mov    eax,0x1
c00193e9:	8d 76 00             	lea    esi,[esi+0x0]
c00193ec:	83 c4 1c             	add    esp,0x1c
c00193ef:	c3                   	ret    

c00193f0 <FAT::closeDir(void*)>:
c00193f0:	83 ec 1c             	sub    esp,0x1c
c00193f3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00193f8:	75 0a                	jne    c0019404 <FAT::closeDir(void*)+0x14>
c00193fa:	b8 04 00 00 00       	mov    eax,0x4
c00193ff:	eb 3f                	jmp    c0019440 <FAT::closeDir(void*)+0x50>
c0019401:	8d 76 00             	lea    esi,[esi+0x0]
c0019404:	83 ec 0c             	sub    esp,0xc
c0019407:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001940b:	e8 c4 b2 fe ff       	call   c00046d4 <f_closedir>
c0019410:	83 c4 10             	add    esp,0x10
c0019413:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019417:	83 ec 0c             	sub    esp,0xc
c001941a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001941e:	e8 a3 e6 fe ff       	call   c0007ac6 <free>
c0019423:	83 c4 10             	add    esp,0x10
c0019426:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001942a:	85 c0                	test   eax,eax
c001942c:	75 0a                	jne    c0019438 <FAT::closeDir(void*)+0x48>
c001942e:	b8 00 00 00 00       	mov    eax,0x0
c0019433:	eb 0b                	jmp    c0019440 <FAT::closeDir(void*)+0x50>
c0019435:	8d 76 00             	lea    esi,[esi+0x0]
c0019438:	b8 01 00 00 00       	mov    eax,0x1
c001943d:	8d 76 00             	lea    esi,[esi+0x0]
c0019440:	83 c4 1c             	add    esp,0x1c
c0019443:	c3                   	ret    

c0019444 <FAT::truncate(void*, unsigned long long)>:
c0019444:	83 ec 2c             	sub    esp,0x2c
c0019447:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001944b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001944f:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019453:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0019457:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c001945c:	75 0a                	jne    c0019468 <FAT::truncate(void*, unsigned long long)+0x24>
c001945e:	b8 04 00 00 00       	mov    eax,0x4
c0019463:	eb 47                	jmp    c00194ac <FAT::truncate(void*, unsigned long long)+0x68>
c0019465:	8d 76 00             	lea    esi,[esi+0x0]
c0019468:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001946c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001946f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0019473:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001947b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001947f:	83 ec 08             	sub    esp,0x8
c0019482:	50                   	push   eax
c0019483:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0019487:	e8 cc af fe ff       	call   c0004458 <f_lseek>
c001948c:	83 c4 10             	add    esp,0x10
c001948f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0019493:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019497:	85 c0                	test   eax,eax
c0019499:	75 09                	jne    c00194a4 <FAT::truncate(void*, unsigned long long)+0x60>
c001949b:	b8 00 00 00 00       	mov    eax,0x0
c00194a0:	eb 0a                	jmp    c00194ac <FAT::truncate(void*, unsigned long long)+0x68>
c00194a2:	66 90                	xchg   ax,ax
c00194a4:	b8 01 00 00 00       	mov    eax,0x1
c00194a9:	8d 76 00             	lea    esi,[esi+0x0]
c00194ac:	83 c4 2c             	add    esp,0x2c
c00194af:	c3                   	ret    

c00194b0 <FAT::seek(void*, unsigned long long)>:
c00194b0:	83 ec 2c             	sub    esp,0x2c
c00194b3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00194b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00194bb:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00194bf:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00194c3:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00194c8:	75 0a                	jne    c00194d4 <FAT::seek(void*, unsigned long long)+0x24>
c00194ca:	b8 04 00 00 00       	mov    eax,0x4
c00194cf:	eb 33                	jmp    c0019504 <FAT::seek(void*, unsigned long long)+0x54>
c00194d1:	8d 76 00             	lea    esi,[esi+0x0]
c00194d4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00194d8:	83 ec 08             	sub    esp,0x8
c00194db:	50                   	push   eax
c00194dc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00194e0:	e8 73 af fe ff       	call   c0004458 <f_lseek>
c00194e5:	83 c4 10             	add    esp,0x10
c00194e8:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00194ec:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00194f0:	85 c0                	test   eax,eax
c00194f2:	75 08                	jne    c00194fc <FAT::seek(void*, unsigned long long)+0x4c>
c00194f4:	b8 00 00 00 00       	mov    eax,0x0
c00194f9:	eb 09                	jmp    c0019504 <FAT::seek(void*, unsigned long long)+0x54>
c00194fb:	90                   	nop
c00194fc:	b8 01 00 00 00       	mov    eax,0x1
c0019501:	8d 76 00             	lea    esi,[esi+0x0]
c0019504:	83 c4 2c             	add    esp,0x2c
c0019507:	c3                   	ret    

c0019508 <fatWrapperReadDisk>:
c0019508:	53                   	push   ebx
c0019509:	83 ec 18             	sub    esp,0x18
c001950c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019510:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019514:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019519:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019520:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019524:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019528:	ba 00 00 00 00       	mov    edx,0x0
c001952d:	83 ec 0c             	sub    esp,0xc
c0019530:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019534:	53                   	push   ebx
c0019535:	52                   	push   edx
c0019536:	50                   	push   eax
c0019537:	51                   	push   ecx
c0019538:	e8 ef 44 ff ff       	call   c000da2c <LogicalDisk::read(unsigned long long, int, void*)>
c001953d:	83 c4 20             	add    esp,0x20
c0019540:	83 c4 18             	add    esp,0x18
c0019543:	5b                   	pop    ebx
c0019544:	c3                   	ret    
c0019545:	8d 76 00             	lea    esi,[esi+0x0]

c0019548 <fatWrapperWriteDisk>:
c0019548:	53                   	push   ebx
c0019549:	83 ec 18             	sub    esp,0x18
c001954c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0019550:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019554:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019559:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019560:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0019564:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0019568:	ba 00 00 00 00       	mov    edx,0x0
c001956d:	83 ec 0c             	sub    esp,0xc
c0019570:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0019574:	53                   	push   ebx
c0019575:	52                   	push   edx
c0019576:	50                   	push   eax
c0019577:	51                   	push   ecx
c0019578:	e8 1b 45 ff ff       	call   c000da98 <LogicalDisk::write(unsigned long long, int, void*)>
c001957d:	83 c4 20             	add    esp,0x20
c0019580:	83 c4 18             	add    esp,0x18
c0019583:	5b                   	pop    ebx
c0019584:	c3                   	ret    
c0019585:	8d 76 00             	lea    esi,[esi+0x0]

c0019588 <fatWrapperIoctl>:
c0019588:	53                   	push   ebx
c0019589:	83 ec 28             	sub    esp,0x28
c001958c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0019590:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019594:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019598:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001959c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00195a1:	83 f8 02             	cmp    eax,0x2
c00195a4:	75 32                	jne    c00195d8 <fatWrapperIoctl+0x50>
c00195a6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195aa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00195ae:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00195b3:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c00195ba:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00195c0:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00195c6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00195ca:	66 89 02             	mov    WORD PTR [edx],ax
c00195cd:	b8 00 00 00 00       	mov    eax,0x0
c00195d2:	e9 c5 00 00 00       	jmp    c001969c <fatWrapperIoctl+0x114>
c00195d7:	90                   	nop
c00195d8:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00195dd:	83 f8 01             	cmp    eax,0x1
c00195e0:	75 6a                	jne    c001964c <fatWrapperIoctl+0xc4>
c00195e2:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00195e6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00195ea:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00195ef:	8b 04 85 80 88 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7780]
c00195f6:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00195fc:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0019602:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c0019608:	89 c8                	mov    eax,ecx
c001960a:	89 da                	mov    edx,ebx
c001960c:	0f a4 c2 0a          	shld   edx,eax,0xa
c0019610:	c1 e0 0a             	shl    eax,0xa
c0019613:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c0019618:	8b 0c 8d 80 88 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd7780]
c001961f:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c0019625:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c001962b:	89 cb                	mov    ebx,ecx
c001962d:	c1 fb 1f             	sar    ebx,0x1f
c0019630:	53                   	push   ebx
c0019631:	51                   	push   ecx
c0019632:	52                   	push   edx
c0019633:	50                   	push   eax
c0019634:	e8 77 5b 00 00       	call   c001f1b0 <__udivdi3>
c0019639:	83 c4 10             	add    esp,0x10
c001963c:	89 c2                	mov    edx,eax
c001963e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0019642:	89 10                	mov    DWORD PTR [eax],edx
c0019644:	b8 00 00 00 00       	mov    eax,0x0
c0019649:	eb 51                	jmp    c001969c <fatWrapperIoctl+0x114>
c001964b:	90                   	nop
c001964c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019651:	85 c0                	test   eax,eax
c0019653:	75 07                	jne    c001965c <fatWrapperIoctl+0xd4>
c0019655:	b8 00 00 00 00       	mov    eax,0x0
c001965a:	eb 40                	jmp    c001969c <fatWrapperIoctl+0x114>
c001965c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019661:	83 f8 03             	cmp    eax,0x3
c0019664:	75 1a                	jne    c0019680 <fatWrapperIoctl+0xf8>
c0019666:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001966a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001966e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0019672:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0019678:	b8 00 00 00 00       	mov    eax,0x0
c001967d:	eb 1d                	jmp    c001969c <fatWrapperIoctl+0x114>
c001967f:	90                   	nop
c0019680:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019685:	83 f8 04             	cmp    eax,0x4
c0019688:	75 0a                	jne    c0019694 <fatWrapperIoctl+0x10c>
c001968a:	b8 00 00 00 00       	mov    eax,0x0
c001968f:	eb 0b                	jmp    c001969c <fatWrapperIoctl+0x114>
c0019691:	8d 76 00             	lea    esi,[esi+0x0]
c0019694:	b8 04 00 00 00       	mov    eax,0x4
c0019699:	8d 76 00             	lea    esi,[esi+0x0]
c001969c:	83 c4 28             	add    esp,0x28
c001969f:	5b                   	pop    ebx
c00196a0:	c3                   	ret    
c00196a1:	90                   	nop
c00196a2:	66 90                	xchg   ax,ax

c00196a4 <FAT::FAT()>:
c00196a4:	83 ec 1c             	sub    esp,0x1c
c00196a7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196ab:	83 ec 0c             	sub    esp,0xc
c00196ae:	50                   	push   eax
c00196af:	e8 2e 1e ff ff       	call   c000b4e2 <Filesystem::Filesystem()>
c00196b4:	83 c4 10             	add    esp,0x10
c00196b7:	ba 8c 27 02 c0       	mov    edx,0xc002278c
c00196bc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00196c0:	89 10                	mov    DWORD PTR [eax],edx
c00196c2:	c7 05 80 97 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0029780,0x0
c00196cc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00196d4:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00196d9:	7f 19                	jg     c00196f4 <FAT::FAT()+0x50>
c00196db:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00196df:	c7 04 85 a0 97 02 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffd6860],0xffffffff
c00196ea:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c00196ef:	eb e3                	jmp    c00196d4 <FAT::FAT()+0x30>
c00196f1:	8d 76 00             	lea    esi,[esi+0x0]
c00196f4:	90                   	nop
c00196f5:	83 c4 1c             	add    esp,0x1c
c00196f8:	c3                   	ret    
c00196f9:	90                   	nop
c00196fa:	66 90                	xchg   ax,ax

c00196fc <FAT::fixFilepath(char*)>:
c00196fc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019700:	8a 00                	mov    al,BYTE PTR [eax]
c0019702:	0f be c0             	movsx  eax,al
c0019705:	83 f8 40             	cmp    eax,0x40
c0019708:	7e 2e                	jle    c0019738 <FAT::fixFilepath(char*)+0x3c>
c001970a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001970e:	8a 00                	mov    al,BYTE PTR [eax]
c0019710:	83 e8 41             	sub    eax,0x41
c0019713:	88 c2                	mov    dl,al
c0019715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019719:	88 10                	mov    BYTE PTR [eax],dl
c001971b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001971f:	8a 00                	mov    al,BYTE PTR [eax]
c0019721:	0f be c0             	movsx  eax,al
c0019724:	8b 04 85 a0 97 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6860]
c001972b:	83 c0 30             	add    eax,0x30
c001972e:	88 c2                	mov    dl,al
c0019730:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0019734:	88 10                	mov    BYTE PTR [eax],dl
c0019736:	66 90                	xchg   ax,ax
c0019738:	90                   	nop
c0019739:	c3                   	ret    
c001973a:	66 90                	xchg   ax,ax

c001973c <FAT::open(char const*, void**, FileOpenMode)>:
c001973c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019742:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c001974a:	74 0c                	je     c0019758 <FAT::open(char const*, void**, FileOpenMode)+0x1c>
c001974c:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0019754:	75 0e                	jne    c0019764 <FAT::open(char const*, void**, FileOpenMode)+0x28>
c0019756:	66 90                	xchg   ax,ax
c0019758:	b8 04 00 00 00       	mov    eax,0x4
c001975d:	e9 46 01 00 00       	jmp    c00198a8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c0019762:	66 90                	xchg   ax,ax
c0019764:	83 ec 08             	sub    esp,0x8
c0019767:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001976e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019772:	50                   	push   eax
c0019773:	e8 c8 6e fe ff       	call   c0000640 <strcpy>
c0019778:	83 c4 10             	add    esp,0x10
c001977b:	83 ec 08             	sub    esp,0x8
c001977e:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019782:	50                   	push   eax
c0019783:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c001978a:	e8 6d ff ff ff       	call   c00196fc <FAT::fixFilepath(char*)>
c001978f:	83 c4 10             	add    esp,0x10
c0019792:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c001979a:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197a1:	83 e0 01             	and    eax,0x1
c00197a4:	74 12                	je     c00197b8 <FAT::open(char const*, void**, FileOpenMode)+0x7c>
c00197a6:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197ad:	83 c8 01             	or     eax,0x1
c00197b0:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197b7:	90                   	nop
c00197b8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197bf:	83 e0 04             	and    eax,0x4
c00197c2:	74 24                	je     c00197e8 <FAT::open(char const*, void**, FileOpenMode)+0xac>
c00197c4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197cb:	83 c8 30             	or     eax,0x30
c00197ce:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197d5:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197dc:	83 c8 02             	or     eax,0x2
c00197df:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c00197e6:	66 90                	xchg   ax,ax
c00197e8:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00197ef:	83 e0 02             	and    eax,0x2
c00197f2:	74 14                	je     c0019808 <FAT::open(char const*, void**, FileOpenMode)+0xcc>
c00197f4:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c00197fb:	83 c8 02             	or     eax,0x2
c00197fe:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019805:	8d 76 00             	lea    esi,[esi+0x0]
c0019808:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001980f:	83 e0 08             	and    eax,0x8
c0019812:	74 14                	je     c0019828 <FAT::open(char const*, void**, FileOpenMode)+0xec>
c0019814:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001981b:	83 c8 04             	or     eax,0x4
c001981e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019825:	8d 76 00             	lea    esi,[esi+0x0]
c0019828:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c001982f:	83 e0 10             	and    eax,0x10
c0019832:	74 14                	je     c0019848 <FAT::open(char const*, void**, FileOpenMode)+0x10c>
c0019834:	8a 84 24 0f 01 00 00 	mov    al,BYTE PTR [esp+0x10f]
c001983b:	83 c8 08             	or     eax,0x8
c001983e:	88 84 24 0f 01 00 00 	mov    BYTE PTR [esp+0x10f],al
c0019845:	8d 76 00             	lea    esi,[esi+0x0]
c0019848:	83 ec 0c             	sub    esp,0xc
c001984b:	68 28 02 00 00       	push   0x228
c0019850:	e8 61 e2 fe ff       	call   c0007ab6 <malloc>
c0019855:	83 c4 10             	add    esp,0x10
c0019858:	89 c2                	mov    edx,eax
c001985a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019861:	89 10                	mov    DWORD PTR [eax],edx
c0019863:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c001986b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019872:	8b 00                	mov    eax,DWORD PTR [eax]
c0019874:	83 ec 04             	sub    esp,0x4
c0019877:	52                   	push   edx
c0019878:	8d 54 24 10          	lea    edx,[esp+0x10]
c001987c:	52                   	push   edx
c001987d:	50                   	push   eax
c001987e:	e8 d7 a3 fe ff       	call   c0003c5a <f_open>
c0019883:	83 c4 10             	add    esp,0x10
c0019886:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c001988d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0019895:	74 09                	je     c00198a0 <FAT::open(char const*, void**, FileOpenMode)+0x164>
c0019897:	b8 01 00 00 00       	mov    eax,0x1
c001989c:	eb 0a                	jmp    c00198a8 <FAT::open(char const*, void**, FileOpenMode)+0x16c>
c001989e:	66 90                	xchg   ax,ax
c00198a0:	b8 00 00 00 00       	mov    eax,0x0
c00198a5:	8d 76 00             	lea    esi,[esi+0x0]
c00198a8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00198ae:	c3                   	ret    
c00198af:	90                   	nop

c00198b0 <FAT::openDir(char const*, void**)>:
c00198b0:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00198b6:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00198be:	74 0c                	je     c00198cc <FAT::openDir(char const*, void**)+0x1c>
c00198c0:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c00198c8:	75 0e                	jne    c00198d8 <FAT::openDir(char const*, void**)+0x28>
c00198ca:	66 90                	xchg   ax,ax
c00198cc:	b8 04 00 00 00       	mov    eax,0x4
c00198d1:	e9 82 00 00 00       	jmp    c0019958 <FAT::openDir(char const*, void**)+0xa8>
c00198d6:	66 90                	xchg   ax,ax
c00198d8:	83 ec 08             	sub    esp,0x8
c00198db:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00198e2:	8d 44 24 18          	lea    eax,[esp+0x18]
c00198e6:	50                   	push   eax
c00198e7:	e8 54 6d fe ff       	call   c0000640 <strcpy>
c00198ec:	83 c4 10             	add    esp,0x10
c00198ef:	83 ec 08             	sub    esp,0x8
c00198f2:	8d 44 24 14          	lea    eax,[esp+0x14]
c00198f6:	50                   	push   eax
c00198f7:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00198fe:	e8 f9 fd ff ff       	call   c00196fc <FAT::fixFilepath(char*)>
c0019903:	83 c4 10             	add    esp,0x10
c0019906:	83 ec 0c             	sub    esp,0xc
c0019909:	6a 30                	push   0x30
c001990b:	e8 a6 e1 fe ff       	call   c0007ab6 <malloc>
c0019910:	83 c4 10             	add    esp,0x10
c0019913:	89 c2                	mov    edx,eax
c0019915:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c001991c:	89 10                	mov    DWORD PTR [eax],edx
c001991e:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0019925:	8b 00                	mov    eax,DWORD PTR [eax]
c0019927:	83 ec 08             	sub    esp,0x8
c001992a:	8d 54 24 14          	lea    edx,[esp+0x14]
c001992e:	52                   	push   edx
c001992f:	50                   	push   eax
c0019930:	e8 d4 ac fe ff       	call   c0004609 <f_opendir>
c0019935:	83 c4 10             	add    esp,0x10
c0019938:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c001993f:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c0019947:	74 07                	je     c0019950 <FAT::openDir(char const*, void**)+0xa0>
c0019949:	b8 01 00 00 00       	mov    eax,0x1
c001994e:	eb 08                	jmp    c0019958 <FAT::openDir(char const*, void**)+0xa8>
c0019950:	b8 00 00 00 00       	mov    eax,0x0
c0019955:	8d 76 00             	lea    esi,[esi+0x0]
c0019958:	81 c4 1c 01 00 00    	add    esp,0x11c
c001995e:	c3                   	ret    
c001995f:	90                   	nop

c0019960 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0019960:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019966:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c001996e:	75 0c                	jne    c001997c <FAT::stat(char const*, unsigned long long*, bool*)+0x1c>
c0019970:	b8 04 00 00 00       	mov    eax,0x4
c0019975:	e9 d6 00 00 00       	jmp    c0019a50 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c001997a:	66 90                	xchg   ax,ax
c001997c:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0019984:	75 0a                	jne    c0019990 <FAT::stat(char const*, unsigned long long*, bool*)+0x30>
c0019986:	b8 04 00 00 00       	mov    eax,0x4
c001998b:	e9 c0 00 00 00       	jmp    c0019a50 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019990:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0019998:	75 0a                	jne    c00199a4 <FAT::stat(char const*, unsigned long long*, bool*)+0x44>
c001999a:	b8 04 00 00 00       	mov    eax,0x4
c001999f:	e9 ac 00 00 00       	jmp    c0019a50 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c00199a4:	83 ec 08             	sub    esp,0x8
c00199a7:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00199ae:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00199b5:	50                   	push   eax
c00199b6:	e8 85 6c fe ff       	call   c0000640 <strcpy>
c00199bb:	83 c4 10             	add    esp,0x10
c00199be:	83 ec 08             	sub    esp,0x8
c00199c1:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c00199c8:	50                   	push   eax
c00199c9:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c00199d0:	e8 27 fd ff ff       	call   c00196fc <FAT::fixFilepath(char*)>
c00199d5:	83 c4 10             	add    esp,0x10
c00199d8:	83 ec 08             	sub    esp,0x8
c00199db:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00199df:	50                   	push   eax
c00199e0:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c00199e7:	50                   	push   eax
c00199e8:	e8 9b ad fe ff       	call   c0004788 <f_stat>
c00199ed:	83 c4 10             	add    esp,0x10
c00199f0:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c00199f7:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c00199fe:	85 c0                	test   eax,eax
c0019a00:	74 0a                	je     c0019a0c <FAT::stat(char const*, unsigned long long*, bool*)+0xac>
c0019a02:	83 f8 04             	cmp    eax,0x4
c0019a05:	74 39                	je     c0019a40 <FAT::stat(char const*, unsigned long long*, bool*)+0xe0>
c0019a07:	eb 3f                	jmp    c0019a48 <FAT::stat(char const*, unsigned long long*, bool*)+0xe8>
c0019a09:	8d 76 00             	lea    esi,[esi+0x0]
c0019a0c:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0019a10:	0f b6 c0             	movzx  eax,al
c0019a13:	83 e0 10             	and    eax,0x10
c0019a16:	0f 95 c2             	setne  dl
c0019a19:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c0019a20:	88 10                	mov    BYTE PTR [eax],dl
c0019a22:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019a26:	ba 00 00 00 00       	mov    edx,0x0
c0019a2b:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c0019a32:	89 01                	mov    DWORD PTR [ecx],eax
c0019a34:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0019a37:	b8 00 00 00 00       	mov    eax,0x0
c0019a3c:	eb 12                	jmp    c0019a50 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a3e:	66 90                	xchg   ax,ax
c0019a40:	b8 02 00 00 00       	mov    eax,0x2
c0019a45:	eb 09                	jmp    c0019a50 <FAT::stat(char const*, unsigned long long*, bool*)+0xf0>
c0019a47:	90                   	nop
c0019a48:	b8 01 00 00 00       	mov    eax,0x1
c0019a4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019a50:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019a56:	c3                   	ret    
c0019a57:	90                   	nop

c0019a58 <FAT::unlink(char const*)>:
c0019a58:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019a5e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019a66:	75 08                	jne    c0019a70 <FAT::unlink(char const*)+0x18>
c0019a68:	b8 04 00 00 00       	mov    eax,0x4
c0019a6d:	eb 61                	jmp    c0019ad0 <FAT::unlink(char const*)+0x78>
c0019a6f:	90                   	nop
c0019a70:	83 ec 08             	sub    esp,0x8
c0019a73:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a7a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019a7e:	50                   	push   eax
c0019a7f:	e8 bc 6b fe ff       	call   c0000640 <strcpy>
c0019a84:	83 c4 10             	add    esp,0x10
c0019a87:	83 ec 08             	sub    esp,0x8
c0019a8a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019a8e:	50                   	push   eax
c0019a8f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019a96:	e8 61 fc ff ff       	call   c00196fc <FAT::fixFilepath(char*)>
c0019a9b:	83 c4 10             	add    esp,0x10
c0019a9e:	83 ec 0c             	sub    esp,0xc
c0019aa1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019aa5:	50                   	push   eax
c0019aa6:	e8 4f af fe ff       	call   c00049fa <f_unlink>
c0019aab:	83 c4 10             	add    esp,0x10
c0019aae:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019ab5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019abc:	85 c0                	test   eax,eax
c0019abe:	75 08                	jne    c0019ac8 <FAT::unlink(char const*)+0x70>
c0019ac0:	b8 00 00 00 00       	mov    eax,0x0
c0019ac5:	eb 09                	jmp    c0019ad0 <FAT::unlink(char const*)+0x78>
c0019ac7:	90                   	nop
c0019ac8:	b8 01 00 00 00       	mov    eax,0x1
c0019acd:	8d 76 00             	lea    esi,[esi+0x0]
c0019ad0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019ad6:	c3                   	ret    
c0019ad7:	90                   	nop

c0019ad8 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0019ad8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0019ade:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0019ae5:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0019aec:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0019af0:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0019af4:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0019afc:	75 0a                	jne    c0019b08 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0019afe:	b8 04 00 00 00       	mov    eax,0x4
c0019b03:	e9 7c 01 00 00       	jmp    c0019c84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019b08:	83 ec 08             	sub    esp,0x8
c0019b0b:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019b12:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019b16:	50                   	push   eax
c0019b17:	e8 24 6b fe ff       	call   c0000640 <strcpy>
c0019b1c:	83 c4 10             	add    esp,0x10
c0019b1f:	83 ec 08             	sub    esp,0x8
c0019b22:	8d 44 24 20          	lea    eax,[esp+0x20]
c0019b26:	50                   	push   eax
c0019b27:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0019b2e:	e8 c9 fb ff ff       	call   c00196fc <FAT::fixFilepath(char*)>
c0019b33:	83 c4 10             	add    esp,0x10
c0019b36:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0019b3e:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0019b46:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b4b:	83 e0 01             	and    eax,0x1
c0019b4e:	74 14                	je     c0019b64 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x8c>
c0019b50:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b57:	83 c8 01             	or     eax,0x1
c0019b5a:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b61:	8d 76 00             	lea    esi,[esi+0x0]
c0019b64:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b69:	83 e0 02             	and    eax,0x2
c0019b6c:	74 12                	je     c0019b80 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa8>
c0019b6e:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b75:	83 c8 20             	or     eax,0x20
c0019b78:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b7f:	90                   	nop
c0019b80:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019b85:	83 e0 04             	and    eax,0x4
c0019b88:	74 12                	je     c0019b9c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc4>
c0019b8a:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019b91:	83 c8 04             	or     eax,0x4
c0019b94:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019b9b:	90                   	nop
c0019b9c:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0019ba1:	83 e0 08             	and    eax,0x8
c0019ba4:	74 12                	je     c0019bb8 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xe0>
c0019ba6:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019bad:	83 c8 02             	or     eax,0x2
c0019bb0:	88 84 24 1f 01 00 00 	mov    BYTE PTR [esp+0x11f],al
c0019bb7:	90                   	nop
c0019bb8:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bbd:	83 e0 01             	and    eax,0x1
c0019bc0:	74 12                	je     c0019bd4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfc>
c0019bc2:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019bc9:	83 c8 01             	or     eax,0x1
c0019bcc:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019bd3:	90                   	nop
c0019bd4:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bd9:	83 e0 02             	and    eax,0x2
c0019bdc:	74 12                	je     c0019bf0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x118>
c0019bde:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019be5:	83 c8 20             	or     eax,0x20
c0019be8:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019bef:	90                   	nop
c0019bf0:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019bf5:	83 e0 04             	and    eax,0x4
c0019bf8:	74 12                	je     c0019c0c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x134>
c0019bfa:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019c01:	83 c8 04             	or     eax,0x4
c0019c04:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019c0b:	90                   	nop
c0019c0c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0019c11:	83 e0 08             	and    eax,0x8
c0019c14:	74 12                	je     c0019c28 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x150>
c0019c16:	8a 84 24 1e 01 00 00 	mov    al,BYTE PTR [esp+0x11e]
c0019c1d:	83 c8 02             	or     eax,0x2
c0019c20:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019c27:	90                   	nop
c0019c28:	8a 94 24 1e 01 00 00 	mov    dl,BYTE PTR [esp+0x11e]
c0019c2f:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0019c36:	09 d0                	or     eax,edx
c0019c38:	88 84 24 1e 01 00 00 	mov    BYTE PTR [esp+0x11e],al
c0019c3f:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0019c47:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0019c4f:	83 ec 04             	sub    esp,0x4
c0019c52:	52                   	push   edx
c0019c53:	50                   	push   eax
c0019c54:	8d 44 24 24          	lea    eax,[esp+0x24]
c0019c58:	50                   	push   eax
c0019c59:	e8 11 b2 fe ff       	call   c0004e6f <f_chmod>
c0019c5e:	83 c4 10             	add    esp,0x10
c0019c61:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0019c68:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0019c6f:	85 c0                	test   eax,eax
c0019c71:	75 09                	jne    c0019c7c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1a4>
c0019c73:	b8 00 00 00 00       	mov    eax,0x0
c0019c78:	eb 0a                	jmp    c0019c84 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x1ac>
c0019c7a:	66 90                	xchg   ax,ax
c0019c7c:	b8 01 00 00 00       	mov    eax,0x1
c0019c81:	8d 76 00             	lea    esi,[esi+0x0]
c0019c84:	81 c4 2c 01 00 00    	add    esp,0x12c
c0019c8a:	c3                   	ret    
c0019c8b:	90                   	nop

c0019c8c <FAT::rename(char const*, char const*)>:
c0019c8c:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0019c92:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0019c9a:	74 0c                	je     c0019ca8 <FAT::rename(char const*, char const*)+0x1c>
c0019c9c:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0019ca4:	75 0e                	jne    c0019cb4 <FAT::rename(char const*, char const*)+0x28>
c0019ca6:	66 90                	xchg   ax,ax
c0019ca8:	b8 04 00 00 00       	mov    eax,0x4
c0019cad:	e9 9e 00 00 00       	jmp    c0019d50 <FAT::rename(char const*, char const*)+0xc4>
c0019cb2:	66 90                	xchg   ax,ax
c0019cb4:	83 ec 08             	sub    esp,0x8
c0019cb7:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019cbe:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019cc5:	50                   	push   eax
c0019cc6:	e8 75 69 fe ff       	call   c0000640 <strcpy>
c0019ccb:	83 c4 10             	add    esp,0x10
c0019cce:	83 ec 08             	sub    esp,0x8
c0019cd1:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0019cd8:	50                   	push   eax
c0019cd9:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019ce0:	e8 17 fa ff ff       	call   c00196fc <FAT::fixFilepath(char*)>
c0019ce5:	83 c4 10             	add    esp,0x10
c0019ce8:	83 ec 08             	sub    esp,0x8
c0019ceb:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0019cf2:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019cf6:	50                   	push   eax
c0019cf7:	e8 44 69 fe ff       	call   c0000640 <strcpy>
c0019cfc:	83 c4 10             	add    esp,0x10
c0019cff:	83 ec 08             	sub    esp,0x8
c0019d02:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d06:	50                   	push   eax
c0019d07:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0019d0e:	e8 e9 f9 ff ff       	call   c00196fc <FAT::fixFilepath(char*)>
c0019d13:	83 c4 10             	add    esp,0x10
c0019d16:	83 ec 08             	sub    esp,0x8
c0019d19:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d1d:	50                   	push   eax
c0019d1e:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0019d25:	50                   	push   eax
c0019d26:	e8 8c af fe ff       	call   c0004cb7 <f_rename>
c0019d2b:	83 c4 10             	add    esp,0x10
c0019d2e:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0019d35:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0019d3c:	85 c0                	test   eax,eax
c0019d3e:	75 08                	jne    c0019d48 <FAT::rename(char const*, char const*)+0xbc>
c0019d40:	b8 00 00 00 00       	mov    eax,0x0
c0019d45:	eb 09                	jmp    c0019d50 <FAT::rename(char const*, char const*)+0xc4>
c0019d47:	90                   	nop
c0019d48:	b8 01 00 00 00       	mov    eax,0x1
c0019d4d:	8d 76 00             	lea    esi,[esi+0x0]
c0019d50:	81 c4 1c 02 00 00    	add    esp,0x21c
c0019d56:	c3                   	ret    
c0019d57:	90                   	nop

c0019d58 <FAT::mkdir(char const*)>:
c0019d58:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0019d5e:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0019d66:	75 08                	jne    c0019d70 <FAT::mkdir(char const*)+0x18>
c0019d68:	b8 04 00 00 00       	mov    eax,0x4
c0019d6d:	eb 61                	jmp    c0019dd0 <FAT::mkdir(char const*)+0x78>
c0019d6f:	90                   	nop
c0019d70:	83 ec 08             	sub    esp,0x8
c0019d73:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d7a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019d7e:	50                   	push   eax
c0019d7f:	e8 bc 68 fe ff       	call   c0000640 <strcpy>
c0019d84:	83 c4 10             	add    esp,0x10
c0019d87:	83 ec 08             	sub    esp,0x8
c0019d8a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0019d8e:	50                   	push   eax
c0019d8f:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0019d96:	e8 61 f9 ff ff       	call   c00196fc <FAT::fixFilepath(char*)>
c0019d9b:	83 c4 10             	add    esp,0x10
c0019d9e:	83 ec 0c             	sub    esp,0xc
c0019da1:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019da5:	50                   	push   eax
c0019da6:	e8 71 ad fe ff       	call   c0004b1c <f_mkdir>
c0019dab:	83 c4 10             	add    esp,0x10
c0019dae:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0019db5:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0019dbc:	85 c0                	test   eax,eax
c0019dbe:	75 08                	jne    c0019dc8 <FAT::mkdir(char const*)+0x70>
c0019dc0:	b8 00 00 00 00       	mov    eax,0x0
c0019dc5:	eb 09                	jmp    c0019dd0 <FAT::mkdir(char const*)+0x78>
c0019dc7:	90                   	nop
c0019dc8:	b8 01 00 00 00       	mov    eax,0x1
c0019dcd:	8d 76 00             	lea    esi,[esi+0x0]
c0019dd0:	81 c4 1c 01 00 00    	add    esp,0x11c
c0019dd6:	c3                   	ret    
c0019dd7:	90                   	nop

c0019dd8 <FAT::exists(char const*)>:
c0019dd8:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0019dde:	83 ec 08             	sub    esp,0x8
c0019de1:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019de8:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019dec:	50                   	push   eax
c0019ded:	e8 4e 68 fe ff       	call   c0000640 <strcpy>
c0019df2:	83 c4 10             	add    esp,0x10
c0019df5:	83 ec 08             	sub    esp,0x8
c0019df8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0019dfc:	50                   	push   eax
c0019dfd:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0019e04:	e8 f3 f8 ff ff       	call   c00196fc <FAT::fixFilepath(char*)>
c0019e09:	83 c4 10             	add    esp,0x10
c0019e0c:	83 ec 08             	sub    esp,0x8
c0019e0f:	8d 84 24 0c 01 00 00 	lea    eax,[esp+0x10c]
c0019e16:	50                   	push   eax
c0019e17:	8d 44 24 10          	lea    eax,[esp+0x10]
c0019e1b:	50                   	push   eax
c0019e1c:	e8 67 a9 fe ff       	call   c0004788 <f_stat>
c0019e21:	83 c4 10             	add    esp,0x10
c0019e24:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0019e2b:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0019e32:	85 c0                	test   eax,eax
c0019e34:	75 06                	jne    c0019e3c <FAT::exists(char const*)+0x64>
c0019e36:	b0 01                	mov    al,0x1
c0019e38:	eb 06                	jmp    c0019e40 <FAT::exists(char const*)+0x68>
c0019e3a:	66 90                	xchg   ax,ax
c0019e3c:	b0 00                	mov    al,0x0
c0019e3e:	66 90                	xchg   ax,ax
c0019e40:	81 c4 2c 02 00 00    	add    esp,0x22c
c0019e46:	c3                   	ret    
c0019e47:	90                   	nop

c0019e48 <isoReadDiscSectorHelper>:
c0019e48:	83 ec 2c             	sub    esp,0x2c
c0019e4b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0019e4f:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0019e53:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c0019e58:	83 e8 41             	sub    eax,0x41
c0019e5b:	8b 0c 85 80 88 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd7780]
c0019e62:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0019e66:	ba 00 00 00 00       	mov    edx,0x0
c0019e6b:	83 ec 0c             	sub    esp,0xc
c0019e6e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0019e72:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0019e76:	52                   	push   edx
c0019e77:	50                   	push   eax
c0019e78:	51                   	push   ecx
c0019e79:	e8 ae 3b ff ff       	call   c000da2c <LogicalDisk::read(unsigned long long, int, void*)>
c0019e7e:	83 c4 20             	add    esp,0x20
c0019e81:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0019e85:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0019e8a:	74 0c                	je     c0019e98 <isoReadDiscSectorHelper+0x50>
c0019e8c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0019e90:	c1 e0 0b             	shl    eax,0xb
c0019e93:	eb 0b                	jmp    c0019ea0 <isoReadDiscSectorHelper+0x58>
c0019e95:	8d 76 00             	lea    esi,[esi+0x0]
c0019e98:	b8 00 00 00 00       	mov    eax,0x0
c0019e9d:	8d 76 00             	lea    esi,[esi+0x0]
c0019ea0:	83 c4 2c             	add    esp,0x2c
c0019ea3:	c3                   	ret    

c0019ea4 <iso_kprintf>:
c0019ea4:	83 ec 0c             	sub    esp,0xc
c0019ea7:	83 ec 08             	sub    esp,0x8
c0019eaa:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019eae:	68 3a 25 02 c0       	push   0xc002253a
c0019eb3:	e8 8d 0a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019eb8:	83 c4 10             	add    esp,0x10
c0019ebb:	90                   	nop
c0019ebc:	83 c4 0c             	add    esp,0xc
c0019ebf:	c3                   	ret    

c0019ec0 <iso_kprintfd>:
c0019ec0:	83 ec 0c             	sub    esp,0xc
c0019ec3:	83 ec 08             	sub    esp,0x8
c0019ec6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0019eca:	68 7a 0d 02 c0       	push   0xc0020d7a
c0019ecf:	e8 71 0a ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019ed4:	83 c4 10             	add    esp,0x10
c0019ed7:	90                   	nop
c0019ed8:	83 c4 0c             	add    esp,0xc
c0019edb:	c3                   	ret    

c0019edc <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0019edc:	b8 08 00 00 00       	mov    eax,0x8
c0019ee1:	c3                   	ret    

c0019ee2 <ISO9660::truncate(void*, unsigned long long)>:
c0019ee2:	b8 01 00 00 00       	mov    eax,0x1
c0019ee7:	c3                   	ret    

c0019ee8 <ISO9660::getName()>:
c0019ee8:	b8 f0 27 02 c0       	mov    eax,0xc00227f0
c0019eed:	c3                   	ret    

c0019eee <ISO9660::closeDir(void*)>:
c0019eee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019ef2:	8b 00                	mov    eax,DWORD PTR [eax]
c0019ef4:	ff 60 1c             	jmp    DWORD PTR [eax+0x1c]
c0019ef7:	90                   	nop

c0019ef8 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0019ef8:	b8 01 00 00 00       	mov    eax,0x1
c0019efd:	c3                   	ret    

c0019efe <ISO9660::unlink(char const*)>:
c0019efe:	b8 01 00 00 00       	mov    eax,0x1
c0019f03:	c3                   	ret    

c0019f04 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0019f04:	b8 03 00 00 00       	mov    eax,0x3
c0019f09:	c3                   	ret    

c0019f0a <ISO9660::rename(char const*, char const*)>:
c0019f0a:	b8 01 00 00 00       	mov    eax,0x1
c0019f0f:	c3                   	ret    

c0019f10 <ISO9660::mkdir(char const*)>:
c0019f10:	b8 01 00 00 00       	mov    eax,0x1
c0019f15:	c3                   	ret    

c0019f16 <ISO9660::~ISO9660()>:
c0019f16:	83 ec 0c             	sub    esp,0xc
c0019f19:	ba 30 29 02 c0       	mov    edx,0xc0022930
c0019f1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f22:	89 10                	mov    DWORD PTR [eax],edx
c0019f24:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019f28:	83 ec 0c             	sub    esp,0xc
c0019f2b:	50                   	push   eax
c0019f2c:	e8 d5 15 ff ff       	call   c000b506 <Filesystem::~Filesystem()>
c0019f31:	83 c4 10             	add    esp,0x10
c0019f34:	90                   	nop
c0019f35:	83 c4 0c             	add    esp,0xc
c0019f38:	c3                   	ret    
c0019f39:	90                   	nop

c0019f3a <ISO9660::~ISO9660()>:
c0019f3a:	83 ec 0c             	sub    esp,0xc
c0019f3d:	83 ec 0c             	sub    esp,0xc
c0019f40:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f44:	e8 cd ff ff ff       	call   c0019f16 <ISO9660::~ISO9660()>
c0019f49:	83 c4 10             	add    esp,0x10
c0019f4c:	83 ec 08             	sub    esp,0x8
c0019f4f:	6a 08                	push   0x8
c0019f51:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0019f55:	e8 be 08 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c0019f5a:	83 c4 10             	add    esp,0x10
c0019f5d:	83 c4 0c             	add    esp,0xc
c0019f60:	c3                   	ret    
c0019f61:	90                   	nop

c0019f62 <ISO9660::exists(char const*)>:
c0019f62:	83 ec 18             	sub    esp,0x18
c0019f65:	68 0b 28 02 c0       	push   0xc002280b
c0019f6a:	e8 0a 73 ff ff       	call   c0011279 <KePanic(char const*)>
c0019f6f:	31 c0                	xor    eax,eax
c0019f71:	83 c4 1c             	add    esp,0x1c
c0019f74:	c3                   	ret    
c0019f75:	90                   	nop

c0019f76 <ISO9660::open(char const*, void**, FileOpenMode)>:
c0019f76:	56                   	push   esi
c0019f77:	53                   	push   ebx
c0019f78:	53                   	push   ebx
c0019f79:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0019f7d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0019f81:	85 db                	test   ebx,ebx
c0019f83:	0f 84 ca 00 00 00    	je     c001a053 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019f89:	85 f6                	test   esi,esi
c0019f8b:	0f 84 c2 00 00 00    	je     c001a053 <ISO9660::open(char const*, void**, FileOpenMode)+0xdd>
c0019f91:	b8 03 00 00 00       	mov    eax,0x3
c0019f96:	83 7c 24 1c 01       	cmp    DWORD PTR [esp+0x1c],0x1
c0019f9b:	0f 85 b7 00 00 00    	jne    c001a058 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c0019fa1:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0019fa3:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c0019faa:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c0019fb0:	74 1b                	je     c0019fcd <ISO9660::open(char const*, void**, FileOpenMode)+0x57>
c0019fb2:	85 c0                	test   eax,eax
c0019fb4:	74 10                	je     c0019fc6 <ISO9660::open(char const*, void**, FileOpenMode)+0x50>
c0019fb6:	83 ec 0c             	sub    esp,0xc
c0019fb9:	68 29 28 02 c0       	push   0xc0022829
c0019fbe:	e8 b6 72 ff ff       	call   c0011279 <KePanic(char const*)>
c0019fc3:	83 c4 10             	add    esp,0x10
c0019fc6:	8a 03                	mov    al,BYTE PTR [ebx]
c0019fc8:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c0019fcd:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019fd0:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c0019fd7:	85 c0                	test   eax,eax
c0019fd9:	74 09                	je     c0019fe4 <ISO9660::open(char const*, void**, FileOpenMode)+0x6e>
c0019fdb:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c0019fe2:	74 48                	je     c001a02c <ISO9660::open(char const*, void**, FileOpenMode)+0xb6>
c0019fe4:	83 ec 0c             	sub    esp,0xc
c0019fe7:	68 39 28 02 c0       	push   0xc0022839
c0019fec:	e8 54 09 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c0019ff1:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0019ff4:	83 c4 10             	add    esp,0x10
c0019ff7:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c0019ffe:	85 c0                	test   eax,eax
c001a000:	74 17                	je     c001a019 <ISO9660::open(char const*, void**, FileOpenMode)+0xa3>
c001a002:	83 ec 0c             	sub    esp,0xc
c001a005:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a00c:	68 59 28 02 c0       	push   0xc0022859
c001a011:	e8 2f 09 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a016:	83 c4 10             	add    esp,0x10
c001a019:	83 ec 0c             	sub    esp,0xc
c001a01c:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a023:	50                   	push   eax
c001a024:	e8 1d ca fe ff       	call   c0006a46 <init_percd>
c001a029:	83 c4 10             	add    esp,0x10
c001a02c:	83 c3 03             	add    ebx,0x3
c001a02f:	51                   	push   ecx
c001a030:	51                   	push   ecx
c001a031:	6a 00                	push   0x0
c001a033:	53                   	push   ebx
c001a034:	e8 d4 c4 fe ff       	call   c000650d <iso_open>
c001a039:	83 c4 10             	add    esp,0x10
c001a03c:	89 c2                	mov    edx,eax
c001a03e:	b8 01 00 00 00       	mov    eax,0x1
c001a043:	83 fa ff             	cmp    edx,0xffffffff
c001a046:	74 10                	je     c001a058 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a048:	83 c2 32             	add    edx,0x32
c001a04b:	31 c0                	xor    eax,eax
c001a04d:	01 d2                	add    edx,edx
c001a04f:	89 16                	mov    DWORD PTR [esi],edx
c001a051:	eb 05                	jmp    c001a058 <ISO9660::open(char const*, void**, FileOpenMode)+0xe2>
c001a053:	b8 04 00 00 00       	mov    eax,0x4
c001a058:	5a                   	pop    edx
c001a059:	5b                   	pop    ebx
c001a05a:	5e                   	pop    esi
c001a05b:	c3                   	ret    

c001a05c <ISO9660::read(void*, unsigned long, void*, int*)>:
c001a05c:	53                   	push   ebx
c001a05d:	83 ec 08             	sub    esp,0x8
c001a060:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a064:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001a068:	85 c0                	test   eax,eax
c001a06a:	74 2d                	je     c001a099 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a06c:	85 db                	test   ebx,ebx
c001a06e:	74 29                	je     c001a099 <ISO9660::read(void*, unsigned long, void*, int*)+0x3d>
c001a070:	b9 02 00 00 00       	mov    ecx,0x2
c001a075:	52                   	push   edx
c001a076:	99                   	cdq    
c001a077:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a07b:	f7 f9                	idiv   ecx
c001a07d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a081:	83 e8 32             	sub    eax,0x32
c001a084:	50                   	push   eax
c001a085:	e8 2b c5 fe ff       	call   c00065b5 <iso_read>
c001a08a:	83 c4 10             	add    esp,0x10
c001a08d:	89 03                	mov    DWORD PTR [ebx],eax
c001a08f:	09 d0                	or     eax,edx
c001a091:	0f 94 c0             	sete   al
c001a094:	0f b6 c0             	movzx  eax,al
c001a097:	eb 05                	jmp    c001a09e <ISO9660::read(void*, unsigned long, void*, int*)+0x42>
c001a099:	b8 04 00 00 00       	mov    eax,0x4
c001a09e:	83 c4 08             	add    esp,0x8
c001a0a1:	5b                   	pop    ebx
c001a0a2:	c3                   	ret    
c001a0a3:	90                   	nop

c001a0a4 <ISO9660::seek(void*, unsigned long long)>:
c001a0a4:	57                   	push   edi
c001a0a5:	56                   	push   esi
c001a0a6:	b8 04 00 00 00       	mov    eax,0x4
c001a0ab:	51                   	push   ecx
c001a0ac:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a0b0:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a0b4:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a0b8:	85 d2                	test   edx,edx
c001a0ba:	74 26                	je     c001a0e2 <ISO9660::seek(void*, unsigned long long)+0x3e>
c001a0bc:	6a 00                	push   0x0
c001a0be:	b9 02 00 00 00       	mov    ecx,0x2
c001a0c3:	57                   	push   edi
c001a0c4:	89 d0                	mov    eax,edx
c001a0c6:	56                   	push   esi
c001a0c7:	99                   	cdq    
c001a0c8:	f7 f9                	idiv   ecx
c001a0ca:	83 e8 32             	sub    eax,0x32
c001a0cd:	50                   	push   eax
c001a0ce:	e8 f8 c5 fe ff       	call   c00066cb <iso_seek>
c001a0d3:	83 c4 10             	add    esp,0x10
c001a0d6:	31 f0                	xor    eax,esi
c001a0d8:	31 fa                	xor    edx,edi
c001a0da:	09 d0                	or     eax,edx
c001a0dc:	0f 95 c0             	setne  al
c001a0df:	0f b6 c0             	movzx  eax,al
c001a0e2:	5a                   	pop    edx
c001a0e3:	5e                   	pop    esi
c001a0e4:	5f                   	pop    edi
c001a0e5:	c3                   	ret    

c001a0e6 <ISO9660::tell(void*, unsigned long long*)>:
c001a0e6:	53                   	push   ebx
c001a0e7:	83 ec 08             	sub    esp,0x8
c001a0ea:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001a0ee:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a0f2:	85 c0                	test   eax,eax
c001a0f4:	74 24                	je     c001a11a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a0f6:	85 db                	test   ebx,ebx
c001a0f8:	74 20                	je     c001a11a <ISO9660::tell(void*, unsigned long long*)+0x34>
c001a0fa:	83 ec 0c             	sub    esp,0xc
c001a0fd:	b9 02 00 00 00       	mov    ecx,0x2
c001a102:	99                   	cdq    
c001a103:	f7 f9                	idiv   ecx
c001a105:	83 e8 32             	sub    eax,0x32
c001a108:	50                   	push   eax
c001a109:	e8 41 c6 fe ff       	call   c000674f <iso_tell>
c001a10e:	83 c4 10             	add    esp,0x10
c001a111:	89 03                	mov    DWORD PTR [ebx],eax
c001a113:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c001a116:	31 c0                	xor    eax,eax
c001a118:	eb 05                	jmp    c001a11f <ISO9660::tell(void*, unsigned long long*)+0x39>
c001a11a:	b8 04 00 00 00       	mov    eax,0x4
c001a11f:	83 c4 08             	add    esp,0x8
c001a122:	5b                   	pop    ebx
c001a123:	c3                   	ret    

c001a124 <ISO9660::stat(void*, unsigned long long*)>:
c001a124:	53                   	push   ebx
c001a125:	83 ec 14             	sub    esp,0x14
c001a128:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a12c:	68 7d 28 02 c0       	push   0xc002287d
c001a131:	e8 0f 08 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a136:	83 c4 10             	add    esp,0x10
c001a139:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a13e:	74 2c                	je     c001a16c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a140:	85 db                	test   ebx,ebx
c001a142:	74 28                	je     c001a16c <ISO9660::stat(void*, unsigned long long*)+0x48>
c001a144:	83 ec 0c             	sub    esp,0xc
c001a147:	b9 02 00 00 00       	mov    ecx,0x2
c001a14c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a150:	99                   	cdq    
c001a151:	f7 f9                	idiv   ecx
c001a153:	83 e8 32             	sub    eax,0x32
c001a156:	50                   	push   eax
c001a157:	e8 24 c6 fe ff       	call   c0006780 <iso_total>
c001a15c:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001a163:	89 03                	mov    DWORD PTR [ebx],eax
c001a165:	83 c4 10             	add    esp,0x10
c001a168:	31 c0                	xor    eax,eax
c001a16a:	eb 05                	jmp    c001a171 <ISO9660::stat(void*, unsigned long long*)+0x4d>
c001a16c:	b8 04 00 00 00       	mov    eax,0x4
c001a171:	83 c4 08             	add    esp,0x8
c001a174:	5b                   	pop    ebx
c001a175:	c3                   	ret    

c001a176 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c001a176:	55                   	push   ebp
c001a177:	57                   	push   edi
c001a178:	56                   	push   esi
c001a179:	53                   	push   ebx
c001a17a:	83 ec 18             	sub    esp,0x18
c001a17d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001a181:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001a185:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001a189:	68 85 28 02 c0       	push   0xc0022885
c001a18e:	e8 b2 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a193:	83 c4 10             	add    esp,0x10
c001a196:	85 ff                	test   edi,edi
c001a198:	0f 94 c0             	sete   al
c001a19b:	85 f6                	test   esi,esi
c001a19d:	0f 94 c2             	sete   dl
c001a1a0:	09 d0                	or     eax,edx
c001a1a2:	a8 01                	test   al,0x1
c001a1a4:	0f 85 dd 00 00 00    	jne    c001a287 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a1aa:	85 db                	test   ebx,ebx
c001a1ac:	0f 84 d5 00 00 00    	je     c001a287 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x111>
c001a1b2:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001a1b5:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c001a1bb:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a1c2:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a1c9:	8a 0b                	mov    cl,BYTE PTR [ebx]
c001a1cb:	38 0d 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,cl
c001a1d1:	74 1b                	je     c001a1ee <ISO9660::stat(char const*, unsigned long long*, bool*)+0x78>
c001a1d3:	85 c0                	test   eax,eax
c001a1d5:	74 10                	je     c001a1e7 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x71>
c001a1d7:	83 ec 0c             	sub    esp,0xc
c001a1da:	68 29 28 02 c0       	push   0xc0022829
c001a1df:	e8 95 70 ff ff       	call   c0011279 <KePanic(char const*)>
c001a1e4:	83 c4 10             	add    esp,0x10
c001a1e7:	8a 03                	mov    al,BYTE PTR [ebx]
c001a1e9:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a1ee:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a1f1:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a1f8:	85 c0                	test   eax,eax
c001a1fa:	74 09                	je     c001a205 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8f>
c001a1fc:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a203:	74 51                	je     c001a256 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xe0>
c001a205:	83 ec 0c             	sub    esp,0xc
c001a208:	68 8d 28 02 c0       	push   0xc002288d
c001a20d:	e8 33 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a212:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a215:	83 c4 10             	add    esp,0x10
c001a218:	83 3c 85 7c 87 02 c0 00 	cmp    DWORD PTR [eax*4-0x3ffd7884],0x0
c001a220:	74 21                	je     c001a243 <ISO9660::stat(char const*, unsigned long long*, bool*)+0xcd>
c001a222:	83 ec 0c             	sub    esp,0xc
c001a225:	68 ad 28 02 c0       	push   0xc00228ad
c001a22a:	e8 16 07 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a22f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a232:	83 c4 10             	add    esp,0x10
c001a235:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a23c:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a243:	83 ec 0c             	sub    esp,0xc
c001a246:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a24d:	50                   	push   eax
c001a24e:	e8 f3 c7 fe ff       	call   c0006a46 <init_percd>
c001a253:	83 c4 10             	add    esp,0x10
c001a256:	83 c3 03             	add    ebx,0x3
c001a259:	52                   	push   edx
c001a25a:	52                   	push   edx
c001a25b:	6a 00                	push   0x0
c001a25d:	53                   	push   ebx
c001a25e:	e8 aa c2 fe ff       	call   c000650d <iso_open>
c001a263:	83 c4 10             	add    esp,0x10
c001a266:	89 c5                	mov    ebp,eax
c001a268:	83 f8 ff             	cmp    eax,0xffffffff
c001a26b:	75 21                	jne    c001a28e <ISO9660::stat(char const*, unsigned long long*, bool*)+0x118>
c001a26d:	50                   	push   eax
c001a26e:	50                   	push   eax
c001a26f:	6a 01                	push   0x1
c001a271:	53                   	push   ebx
c001a272:	e8 96 c2 fe ff       	call   c000650d <iso_open>
c001a277:	83 c4 10             	add    esp,0x10
c001a27a:	ba 02 00 00 00       	mov    edx,0x2
c001a27f:	40                   	inc    eax
c001a280:	74 2b                	je     c001a2ad <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a282:	c6 06 01             	mov    BYTE PTR [esi],0x1
c001a285:	eb 24                	jmp    c001a2ab <ISO9660::stat(char const*, unsigned long long*, bool*)+0x135>
c001a287:	ba 04 00 00 00       	mov    edx,0x4
c001a28c:	eb 1f                	jmp    c001a2ad <ISO9660::stat(char const*, unsigned long long*, bool*)+0x137>
c001a28e:	83 ec 0c             	sub    esp,0xc
c001a291:	50                   	push   eax
c001a292:	e8 e9 c4 fe ff       	call   c0006780 <iso_total>
c001a297:	c7 47 04 00 00 00 00 	mov    DWORD PTR [edi+0x4],0x0
c001a29e:	89 07                	mov    DWORD PTR [edi],eax
c001a2a0:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a2a3:	e8 ef c2 fe ff       	call   c0006597 <iso_close>
c001a2a8:	83 c4 10             	add    esp,0x10
c001a2ab:	31 d2                	xor    edx,edx
c001a2ad:	83 c4 0c             	add    esp,0xc
c001a2b0:	89 d0                	mov    eax,edx
c001a2b2:	5b                   	pop    ebx
c001a2b3:	5e                   	pop    esi
c001a2b4:	5f                   	pop    edi
c001a2b5:	5d                   	pop    ebp
c001a2b6:	c3                   	ret    
c001a2b7:	90                   	nop

c001a2b8 <ISO9660::close(void*)>:
c001a2b8:	83 ec 0c             	sub    esp,0xc
c001a2bb:	b8 04 00 00 00       	mov    eax,0x4
c001a2c0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a2c4:	85 d2                	test   edx,edx
c001a2c6:	74 1b                	je     c001a2e3 <ISO9660::close(void*)+0x2b>
c001a2c8:	83 ec 0c             	sub    esp,0xc
c001a2cb:	b9 02 00 00 00       	mov    ecx,0x2
c001a2d0:	89 d0                	mov    eax,edx
c001a2d2:	99                   	cdq    
c001a2d3:	f7 f9                	idiv   ecx
c001a2d5:	83 e8 32             	sub    eax,0x32
c001a2d8:	50                   	push   eax
c001a2d9:	e8 b9 c2 fe ff       	call   c0006597 <iso_close>
c001a2de:	83 c4 10             	add    esp,0x10
c001a2e1:	31 c0                	xor    eax,eax
c001a2e3:	83 c4 0c             	add    esp,0xc
c001a2e6:	c3                   	ret    
c001a2e7:	90                   	nop

c001a2e8 <ISO9660::openDir(char const*, void**)>:
c001a2e8:	56                   	push   esi
c001a2e9:	53                   	push   ebx
c001a2ea:	50                   	push   eax
c001a2eb:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a2ef:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001a2f3:	85 db                	test   ebx,ebx
c001a2f5:	0f 84 bd 00 00 00    	je     c001a3b8 <ISO9660::openDir(char const*, void**)+0xd0>
c001a2fb:	85 f6                	test   esi,esi
c001a2fd:	0f 84 b5 00 00 00    	je     c001a3b8 <ISO9660::openDir(char const*, void**)+0xd0>
c001a303:	8a 13                	mov    dl,BYTE PTR [ebx]
c001a305:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a30c:	38 15 80 98 02 c0    	cmp    BYTE PTR ds:0xc0029880,dl
c001a312:	74 1b                	je     c001a32f <ISO9660::openDir(char const*, void**)+0x47>
c001a314:	85 c0                	test   eax,eax
c001a316:	74 10                	je     c001a328 <ISO9660::openDir(char const*, void**)+0x40>
c001a318:	83 ec 0c             	sub    esp,0xc
c001a31b:	68 29 28 02 c0       	push   0xc0022829
c001a320:	e8 54 6f ff ff       	call   c0011279 <KePanic(char const*)>
c001a325:	83 c4 10             	add    esp,0x10
c001a328:	8a 03                	mov    al,BYTE PTR [ebx]
c001a32a:	a2 80 98 02 c0       	mov    ds:0xc0029880,al
c001a32f:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c001a332:	8b 04 85 7c 87 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd7884]
c001a339:	85 c0                	test   eax,eax
c001a33b:	74 10                	je     c001a34d <ISO9660::openDir(char const*, void**)+0x65>
c001a33d:	80 b8 70 01 00 00 00 	cmp    BYTE PTR [eax+0x170],0x0
c001a344:	74 1a                	je     c001a360 <ISO9660::openDir(char const*, void**)+0x78>
c001a346:	c6 80 70 01 00 00 00 	mov    BYTE PTR [eax+0x170],0x0
c001a34d:	83 ec 0c             	sub    esp,0xc
c001a350:	0f be 05 80 98 02 c0 	movsx  eax,BYTE PTR ds:0xc0029880
c001a357:	50                   	push   eax
c001a358:	e8 e9 c6 fe ff       	call   c0006a46 <init_percd>
c001a35d:	83 c4 10             	add    esp,0x10
c001a360:	83 c3 03             	add    ebx,0x3
c001a363:	50                   	push   eax
c001a364:	50                   	push   eax
c001a365:	6a 01                	push   0x1
c001a367:	53                   	push   ebx
c001a368:	e8 a0 c1 fe ff       	call   c000650d <iso_open>
c001a36d:	83 c4 10             	add    esp,0x10
c001a370:	89 c3                	mov    ebx,eax
c001a372:	83 f8 ff             	cmp    eax,0xffffffff
c001a375:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a37a:	75 1c                	jne    c001a398 <ISO9660::openDir(char const*, void**)+0xb0>
c001a37c:	53                   	push   ebx
c001a37d:	53                   	push   ebx
c001a37e:	68 d1 28 02 c0       	push   0xc00228d1
c001a383:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a389:	e8 18 e7 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a38e:	83 c4 10             	add    esp,0x10
c001a391:	b8 01 00 00 00       	mov    eax,0x1
c001a396:	eb 25                	jmp    c001a3bd <ISO9660::openDir(char const*, void**)+0xd5>
c001a398:	01 db                	add    ebx,ebx
c001a39a:	51                   	push   ecx
c001a39b:	83 c3 65             	add    ebx,0x65
c001a39e:	51                   	push   ecx
c001a39f:	68 e4 28 02 c0       	push   0xc00228e4
c001a3a4:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a3aa:	e8 f7 e6 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a3af:	89 1e                	mov    DWORD PTR [esi],ebx
c001a3b1:	83 c4 10             	add    esp,0x10
c001a3b4:	31 c0                	xor    eax,eax
c001a3b6:	eb 05                	jmp    c001a3bd <ISO9660::openDir(char const*, void**)+0xd5>
c001a3b8:	b8 04 00 00 00       	mov    eax,0x4
c001a3bd:	5a                   	pop    edx
c001a3be:	5b                   	pop    ebx
c001a3bf:	5e                   	pop    esi
c001a3c0:	c3                   	ret    
c001a3c1:	90                   	nop

c001a3c2 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c001a3c2:	55                   	push   ebp
c001a3c3:	57                   	push   edi
c001a3c4:	56                   	push   esi
c001a3c5:	53                   	push   ebx
c001a3c6:	81 ec 1c 01 00 00    	sub    esp,0x11c
c001a3cc:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c001a3d3:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001a3da:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c001a3e2:	0f 84 e7 00 00 00    	je     c001a4cf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a3e8:	85 db                	test   ebx,ebx
c001a3ea:	0f 84 df 00 00 00    	je     c001a4cf <ISO9660::readDir(void*, unsigned long, void*, int*)+0x10d>
c001a3f0:	83 ec 0c             	sub    esp,0xc
c001a3f3:	68 f7 28 02 c0       	push   0xc00228f7
c001a3f8:	e8 48 05 ff ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001a3fd:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c001a404:	b9 02 00 00 00       	mov    ecx,0x2
c001a409:	99                   	cdq    
c001a40a:	f7 f9                	idiv   ecx
c001a40c:	83 e8 32             	sub    eax,0x32
c001a40f:	89 04 24             	mov    DWORD PTR [esp],eax
c001a412:	e8 bb c3 fe ff       	call   c00067d2 <iso_readdir>
c001a417:	83 c4 10             	add    esp,0x10
c001a41a:	89 c6                	mov    esi,eax
c001a41c:	85 c0                	test   eax,eax
c001a41e:	75 37                	jne    c001a457 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x95>
c001a420:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a425:	56                   	push   esi
c001a426:	56                   	push   esi
c001a427:	68 02 29 02 c0       	push   0xc0022902
c001a42c:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a432:	e8 6f e6 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a437:	83 c4 0c             	add    esp,0xc
c001a43a:	68 10 01 00 00       	push   0x110
c001a43f:	6a 00                	push   0x0
c001a441:	57                   	push   edi
c001a442:	e8 a9 60 fe ff       	call   c00004f0 <memset>
c001a447:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c001a44d:	83 c4 10             	add    esp,0x10
c001a450:	b8 01 00 00 00       	mov    eax,0x1
c001a455:	eb 7d                	jmp    c001a4d4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a457:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c001a45d:	8d 68 08             	lea    ebp,[eax+0x8]
c001a460:	83 ec 0c             	sub    esp,0xc
c001a463:	55                   	push   ebp
c001a464:	e8 07 61 fe ff       	call   c0000570 <strlen>
c001a469:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001a471:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001a475:	83 c4 10             	add    esp,0x10
c001a478:	83 7e 04 ff          	cmp    DWORD PTR [esi+0x4],0xffffffff
c001a47c:	75 0a                	jne    c001a488 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc6>
c001a47e:	b8 02 00 00 00       	mov    eax,0x2
c001a483:	83 3e ff             	cmp    DWORD PTR [esi],0xffffffff
c001a486:	74 05                	je     c001a48d <ISO9660::readDir(void*, unsigned long, void*, int*)+0xcb>
c001a488:	b8 01 00 00 00       	mov    eax,0x1
c001a48d:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001a491:	50                   	push   eax
c001a492:	50                   	push   eax
c001a493:	55                   	push   ebp
c001a494:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001a498:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001a49c:	50                   	push   eax
c001a49d:	e8 9e 61 fe ff       	call   c0000640 <strcpy>
c001a4a2:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c001a4a9:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4ab:	c7 03 10 01 00 00    	mov    DWORD PTR [ebx],0x110
c001a4b1:	5a                   	pop    edx
c001a4b2:	a1 f0 96 02 c0       	mov    eax,ds:0xc00296f0
c001a4b7:	59                   	pop    ecx
c001a4b8:	68 15 29 02 c0       	push   0xc0022915
c001a4bd:	ff b0 06 05 00 00    	push   DWORD PTR [eax+0x506]
c001a4c3:	e8 de e5 fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001a4c8:	83 c4 10             	add    esp,0x10
c001a4cb:	31 c0                	xor    eax,eax
c001a4cd:	eb 05                	jmp    c001a4d4 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x112>
c001a4cf:	b8 04 00 00 00       	mov    eax,0x4
c001a4d4:	81 c4 1c 01 00 00    	add    esp,0x11c
c001a4da:	5b                   	pop    ebx
c001a4db:	5e                   	pop    esi
c001a4dc:	5f                   	pop    edi
c001a4dd:	5d                   	pop    ebp
c001a4de:	c3                   	ret    

c001a4df <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c001a4df:	57                   	push   edi
c001a4e0:	56                   	push   esi
c001a4e1:	53                   	push   ebx
c001a4e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a4e6:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a4ea:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a4ee:	39 35 84 98 02 c0    	cmp    DWORD PTR ds:0xc0029884,esi
c001a4f4:	0f be cb             	movsx  ecx,bl
c001a4f7:	75 0b                	jne    c001a504 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x25>
c001a4f9:	0f be 05 40 37 02 c0 	movsx  eax,BYTE PTR ds:0xc0023740
c001a500:	39 c8                	cmp    eax,ecx
c001a502:	74 47                	je     c001a54b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a504:	83 ec 0c             	sub    esp,0xc
c001a507:	31 d2                	xor    edx,edx
c001a509:	68 a0 98 02 c0       	push   0xc00298a0
c001a50e:	6a 01                	push   0x1
c001a510:	52                   	push   edx
c001a511:	56                   	push   esi
c001a512:	ff 34 8d 7c 87 02 c0 	push   DWORD PTR [ecx*4-0x3ffd7884]
c001a519:	e8 0e 35 ff ff       	call   c000da2c <LogicalDisk::read(unsigned long long, int, void*)>
c001a51e:	83 c4 20             	add    esp,0x20
c001a521:	85 c0                	test   eax,eax
c001a523:	75 0e                	jne    c001a533 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x54>
c001a525:	89 35 84 98 02 c0    	mov    DWORD PTR ds:0xc0029884,esi
c001a52b:	88 1d 40 37 02 c0    	mov    BYTE PTR ds:0xc0023740,bl
c001a531:	eb 18                	jmp    c001a54b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x6c>
c001a533:	50                   	push   eax
c001a534:	68 00 08 00 00       	push   0x800
c001a539:	6a 00                	push   0x0
c001a53b:	57                   	push   edi
c001a53c:	e8 af 5f fe ff       	call   c00004f0 <memset>
c001a541:	83 c4 10             	add    esp,0x10
c001a544:	b8 01 00 00 00       	mov    eax,0x1
c001a549:	eb 0e                	jmp    c001a559 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x7a>
c001a54b:	be a0 98 02 c0       	mov    esi,0xc00298a0
c001a550:	b9 00 08 00 00       	mov    ecx,0x800
c001a555:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a557:	31 c0                	xor    eax,eax
c001a559:	5b                   	pop    ebx
c001a55a:	5e                   	pop    esi
c001a55b:	5f                   	pop    edi
c001a55c:	c3                   	ret    
c001a55d:	90                   	nop

c001a55e <ISO9660::tryMount(LogicalDisk*, int)>:
c001a55e:	53                   	push   ebx
c001a55f:	81 ec 0c 08 00 00    	sub    esp,0x80c
c001a565:	c7 05 84 98 02 c0 ef be ad de 	mov    DWORD PTR ds:0xc0029884,0xdeadbeef
c001a56f:	8b 84 24 1c 08 00 00 	mov    eax,DWORD PTR [esp+0x81c]
c001a576:	8d 58 41             	lea    ebx,[eax+0x41]
c001a579:	0f be db             	movsx  ebx,bl
c001a57c:	53                   	push   ebx
c001a57d:	8d 44 24 08          	lea    eax,[esp+0x8]
c001a581:	50                   	push   eax
c001a582:	6a 10                	push   0x10
c001a584:	e8 56 ff ff ff       	call   c001a4df <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c001a589:	83 c4 10             	add    esp,0x10
c001a58c:	31 d2                	xor    edx,edx
c001a58e:	85 c0                	test   eax,eax
c001a590:	75 33                	jne    c001a5c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a592:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c001a597:	75 2c                	jne    c001a5c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a599:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c001a59e:	75 25                	jne    c001a5c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a5a0:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c001a5a5:	75 1e                	jne    c001a5c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a5a7:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c001a5ac:	75 17                	jne    c001a5c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a5ae:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c001a5b3:	75 10                	jne    c001a5c5 <ISO9660::tryMount(LogicalDisk*, int)+0x67>
c001a5b5:	83 ec 0c             	sub    esp,0xc
c001a5b8:	53                   	push   ebx
c001a5b9:	e8 88 c4 fe ff       	call   c0006a46 <init_percd>
c001a5be:	83 c4 10             	add    esp,0x10
c001a5c1:	40                   	inc    eax
c001a5c2:	0f 95 c2             	setne  dl
c001a5c5:	88 d0                	mov    al,dl
c001a5c7:	81 c4 08 08 00 00    	add    esp,0x808
c001a5cd:	5b                   	pop    ebx
c001a5ce:	c3                   	ret    
c001a5cf:	90                   	nop

c001a5d0 <ISO9660::ISO9660()>:
c001a5d0:	83 ec 0c             	sub    esp,0xc
c001a5d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5d7:	83 ec 0c             	sub    esp,0xc
c001a5da:	50                   	push   eax
c001a5db:	e8 02 0f ff ff       	call   c000b4e2 <Filesystem::Filesystem()>
c001a5e0:	83 c4 10             	add    esp,0x10
c001a5e3:	ba 30 29 02 c0       	mov    edx,0xc0022930
c001a5e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5ec:	89 10                	mov    DWORD PTR [eax],edx
c001a5ee:	e8 65 c5 fe ff       	call   c0006b58 <fs_iso9660_init>
c001a5f3:	90                   	nop
c001a5f4:	83 c4 0c             	add    esp,0xc
c001a5f7:	c3                   	ret    

c001a5f8 <SoundCard::beginPlayback()>:
c001a5f8:	c7 44 24 04 94 29 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022994
c001a600:	e9 74 6c ff ff       	jmp    c0011279 <KePanic(char const*)>
c001a605:	90                   	nop

c001a606 <SoundCard::stopPlayback()>:
c001a606:	c7 44 24 04 94 29 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022994
c001a60e:	e9 66 6c ff ff       	jmp    c0011279 <KePanic(char const*)>
c001a613:	90                   	nop

c001a614 <SoundCard::SoundCard(char const*)>:
c001a614:	83 ec 1c             	sub    esp,0x1c
c001a617:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a61b:	83 ec 08             	sub    esp,0x8
c001a61e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a622:	50                   	push   eax
c001a623:	e8 ba 21 ff ff       	call   c000c7e2 <Device::Device(char const*)>
c001a628:	83 c4 10             	add    esp,0x10
c001a62b:	ba e0 29 02 c0       	mov    edx,0xc00229e0
c001a630:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a634:	89 10                	mov    DWORD PTR [eax],edx
c001a636:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a63a:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a641:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a645:	c7 80 dc 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1dc],0x0
c001a64f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a653:	c7 80 e0 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e0],0x0
c001a65d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a661:	c7 80 e4 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1e4],0x0
c001a66b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a66f:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c001a679:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001a681:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c001a686:	7f 1a                	jg     c001a6a2 <SoundCard::SoundCard(char const*)+0x8e>
c001a688:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a68c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001a690:	83 c2 54             	add    edx,0x54
c001a693:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c001a69b:	83 44 24 0c 01       	add    DWORD PTR [esp+0xc],0x1
c001a6a0:	eb df                	jmp    c001a681 <SoundCard::SoundCard(char const*)+0x6d>
c001a6a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a6a6:	c6 80 d8 01 00 00 00 	mov    BYTE PTR [eax+0x1d8],0x0
c001a6ad:	90                   	nop
c001a6ae:	83 c4 1c             	add    esp,0x1c
c001a6b1:	c3                   	ret    

c001a6b2 <SoundCard::~SoundCard()>:
c001a6b2:	83 ec 0c             	sub    esp,0xc
c001a6b5:	ba e0 29 02 c0       	mov    edx,0xc00229e0
c001a6ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6be:	89 10                	mov    DWORD PTR [eax],edx
c001a6c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a6c4:	83 ec 0c             	sub    esp,0xc
c001a6c7:	50                   	push   eax
c001a6c8:	e8 7f 1e ff ff       	call   c000c54c <Device::~Device()>
c001a6cd:	83 c4 10             	add    esp,0x10
c001a6d0:	90                   	nop
c001a6d1:	83 c4 0c             	add    esp,0xc
c001a6d4:	c3                   	ret    
c001a6d5:	90                   	nop

c001a6d6 <SoundCard::~SoundCard()>:
c001a6d6:	83 ec 0c             	sub    esp,0xc
c001a6d9:	83 ec 0c             	sub    esp,0xc
c001a6dc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6e0:	e8 cd ff ff ff       	call   c001a6b2 <SoundCard::~SoundCard()>
c001a6e5:	83 c4 10             	add    esp,0x10
c001a6e8:	83 ec 08             	sub    esp,0x8
c001a6eb:	68 e8 01 00 00       	push   0x1e8
c001a6f0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a6f4:	e8 1f 01 ff ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001a6f9:	83 c4 10             	add    esp,0x10
c001a6fc:	83 c4 0c             	add    esp,0xc
c001a6ff:	c3                   	ret    

c001a700 <SoundCard::configureRates(int, int, int)>:
c001a700:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001a704:	31 c0                	xor    eax,eax
c001a706:	80 ba d8 01 00 00 00 	cmp    BYTE PTR [edx+0x1d8],0x0
c001a70d:	75 20                	jne    c001a72f <SoundCard::configureRates(int, int, int)+0x2f>
c001a70f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a713:	89 82 e0 01 00 00    	mov    DWORD PTR [edx+0x1e0],eax
c001a719:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001a71d:	89 82 dc 01 00 00    	mov    DWORD PTR [edx+0x1dc],eax
c001a723:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a727:	89 82 e4 01 00 00    	mov    DWORD PTR [edx+0x1e4],eax
c001a72d:	b0 01                	mov    al,0x1
c001a72f:	c3                   	ret    

c001a730 <SoundCard::getSamples16(int, short*)>:
c001a730:	55                   	push   ebp
c001a731:	57                   	push   edi
c001a732:	31 ff                	xor    edi,edi
c001a734:	56                   	push   esi
c001a735:	53                   	push   ebx
c001a736:	31 db                	xor    ebx,ebx
c001a738:	83 ec 10             	sub    esp,0x10
c001a73b:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c001a73f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a743:	8d 04 36             	lea    eax,[esi+esi*1]
c001a746:	50                   	push   eax
c001a747:	6a 00                	push   0x0
c001a749:	55                   	push   ebp
c001a74a:	e8 a1 5d fe ff       	call   c00004f0 <memset>
c001a74f:	83 c4 10             	add    esp,0x10
c001a752:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a756:	8b 84 98 58 01 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x158]
c001a75d:	85 c0                	test   eax,eax
c001a75f:	74 1b                	je     c001a77c <SoundCard::getSamples16(int, short*)+0x4c>
c001a761:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a765:	75 15                	jne    c001a77c <SoundCard::getSamples16(int, short*)+0x4c>
c001a767:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a76b:	55                   	push   ebp
c001a76c:	56                   	push   esi
c001a76d:	50                   	push   eax
c001a76e:	e8 f1 02 00 00       	call   c001aa64 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>
c001a773:	83 c4 10             	add    esp,0x10
c001a776:	39 c7                	cmp    edi,eax
c001a778:	7d 02                	jge    c001a77c <SoundCard::getSamples16(int, short*)+0x4c>
c001a77a:	89 c7                	mov    edi,eax
c001a77c:	43                   	inc    ebx
c001a77d:	83 fb 20             	cmp    ebx,0x20
c001a780:	75 d0                	jne    c001a752 <SoundCard::getSamples16(int, short*)+0x22>
c001a782:	83 c4 0c             	add    esp,0xc
c001a785:	89 f8                	mov    eax,edi
c001a787:	5b                   	pop    ebx
c001a788:	5e                   	pop    esi
c001a789:	5f                   	pop    edi
c001a78a:	5d                   	pop    ebp
c001a78b:	c3                   	ret    

c001a78c <SoundCard::getSamples32(int, int*)>:
c001a78c:	55                   	push   ebp
c001a78d:	57                   	push   edi
c001a78e:	31 ff                	xor    edi,edi
c001a790:	56                   	push   esi
c001a791:	31 f6                	xor    esi,esi
c001a793:	53                   	push   ebx
c001a794:	83 ec 10             	sub    esp,0x10
c001a797:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001a79b:	8b 5c 24 24          	mov    ebx,DWORD PTR [esp+0x24]
c001a79f:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001a7a3:	c1 e0 02             	shl    eax,0x2
c001a7a6:	50                   	push   eax
c001a7a7:	6a 00                	push   0x0
c001a7a9:	55                   	push   ebp
c001a7aa:	e8 41 5d fe ff       	call   c00004f0 <memset>
c001a7af:	83 c4 10             	add    esp,0x10
c001a7b2:	8b 84 bb 58 01 00 00 	mov    eax,DWORD PTR [ebx+edi*4+0x158]
c001a7b9:	85 c0                	test   eax,eax
c001a7bb:	74 1b                	je     c001a7d8 <SoundCard::getSamples32(int, int*)+0x4c>
c001a7bd:	80 78 18 00          	cmp    BYTE PTR [eax+0x18],0x0
c001a7c1:	75 15                	jne    c001a7d8 <SoundCard::getSamples32(int, int*)+0x4c>
c001a7c3:	53                   	push   ebx
c001a7c4:	55                   	push   ebp
c001a7c5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001a7c9:	50                   	push   eax
c001a7ca:	e8 61 03 00 00       	call   c001ab30 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>
c001a7cf:	83 c4 10             	add    esp,0x10
c001a7d2:	39 c6                	cmp    esi,eax
c001a7d4:	7d 02                	jge    c001a7d8 <SoundCard::getSamples32(int, int*)+0x4c>
c001a7d6:	89 c6                	mov    esi,eax
c001a7d8:	47                   	inc    edi
c001a7d9:	83 ff 20             	cmp    edi,0x20
c001a7dc:	75 d4                	jne    c001a7b2 <SoundCard::getSamples32(int, int*)+0x26>
c001a7de:	85 f6                	test   esi,esi
c001a7e0:	0f b6 83 d8 01 00 00 	movzx  eax,BYTE PTR [ebx+0x1d8]
c001a7e7:	75 0f                	jne    c001a7f8 <SoundCard::getSamples32(int, int*)+0x6c>
c001a7e9:	85 c0                	test   eax,eax
c001a7eb:	74 1b                	je     c001a808 <SoundCard::getSamples32(int, int*)+0x7c>
c001a7ed:	83 ec 0c             	sub    esp,0xc
c001a7f0:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a7f2:	53                   	push   ebx
c001a7f3:	ff 50 28             	call   DWORD PTR [eax+0x28]
c001a7f6:	eb 0d                	jmp    c001a805 <SoundCard::getSamples32(int, int*)+0x79>
c001a7f8:	85 c0                	test   eax,eax
c001a7fa:	75 0c                	jne    c001a808 <SoundCard::getSamples32(int, int*)+0x7c>
c001a7fc:	83 ec 0c             	sub    esp,0xc
c001a7ff:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a801:	53                   	push   ebx
c001a802:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001a805:	83 c4 10             	add    esp,0x10
c001a808:	83 c4 0c             	add    esp,0xc
c001a80b:	89 f0                	mov    eax,esi
c001a80d:	5b                   	pop    ebx
c001a80e:	5e                   	pop    esi
c001a80f:	5f                   	pop    edi
c001a810:	5d                   	pop    ebp
c001a811:	c3                   	ret    

c001a812 <SoundCard::addChannel(SoundPort*)>:
c001a812:	83 ec 0c             	sub    esp,0xc
c001a815:	31 c0                	xor    eax,eax
c001a817:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a81b:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c001a823:	74 1b                	je     c001a840 <SoundCard::addChannel(SoundPort*)+0x2e>
c001a825:	40                   	inc    eax
c001a826:	83 f8 20             	cmp    eax,0x20
c001a829:	75 f0                	jne    c001a81b <SoundCard::addChannel(SoundPort*)+0x9>
c001a82b:	83 ec 0c             	sub    esp,0xc
c001a82e:	68 b9 29 02 c0       	push   0xc00229b9
c001a833:	e8 41 6a ff ff       	call   c0011279 <KePanic(char const*)>
c001a838:	83 c4 10             	add    esp,0x10
c001a83b:	83 c8 ff             	or     eax,0xffffffff
c001a83e:	eb 0b                	jmp    c001a84b <SoundCard::addChannel(SoundPort*)+0x39>
c001a840:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001a844:	89 8c 82 58 01 00 00 	mov    DWORD PTR [edx+eax*4+0x158],ecx
c001a84b:	83 c4 0c             	add    esp,0xc
c001a84e:	c3                   	ret    
c001a84f:	90                   	nop

c001a850 <SoundCard::removeChannel(int)>:
c001a850:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a854:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a858:	c7 84 90 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x158],0x0
c001a863:	c3                   	ret    

c001a864 <SoundPort::SoundPort(int, int, int, int)>:
c001a864:	83 ec 0c             	sub    esp,0xc
c001a867:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a86b:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a872:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a876:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a87a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a87e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a882:	89 10                	mov    DWORD PTR [eax],edx
c001a884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a888:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a88c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001a88f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a893:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001a897:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a89a:	83 7c 24 20 ff       	cmp    DWORD PTR [esp+0x20],0xffffffff
c001a89f:	75 13                	jne    c001a8b4 <SoundPort::SoundPort(int, int, int, int)+0x50>
c001a8a1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8a5:	8b 00                	mov    eax,DWORD PTR [eax]
c001a8a7:	05 a0 0f 00 00       	add    eax,0xfa0
c001a8ac:	01 c0                	add    eax,eax
c001a8ae:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001a8b2:	66 90                	xchg   ax,ax
c001a8b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8b8:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001a8bc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001a8bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8c3:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c001a8ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a8d1:	c1 e0 02             	shl    eax,0x2
c001a8d4:	83 ec 0c             	sub    esp,0xc
c001a8d7:	50                   	push   eax
c001a8d8:	e8 d9 d1 fe ff       	call   c0007ab6 <malloc>
c001a8dd:	83 c4 10             	add    esp,0x10
c001a8e0:	89 c2                	mov    edx,eax
c001a8e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8e6:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c001a8e9:	90                   	nop
c001a8ea:	83 c4 0c             	add    esp,0xc
c001a8ed:	c3                   	ret    
c001a8ee:	66 90                	xchg   ax,ax

c001a8f0 <SoundPort::~SoundPort()>:
c001a8f0:	83 ec 0c             	sub    esp,0xc
c001a8f3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a8f7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a8fa:	85 c0                	test   eax,eax
c001a8fc:	74 1e                	je     c001a91c <SoundPort::~SoundPort()+0x2c>
c001a8fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a902:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001a905:	83 ec 0c             	sub    esp,0xc
c001a908:	50                   	push   eax
c001a909:	e8 b8 d1 fe ff       	call   c0007ac6 <free>
c001a90e:	83 c4 10             	add    esp,0x10
c001a911:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a915:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001a91c:	90                   	nop
c001a91d:	83 c4 0c             	add    esp,0xc
c001a920:	c3                   	ret    
c001a921:	90                   	nop
c001a922:	66 90                	xchg   ax,ax

c001a924 <SoundPort::unpause()>:
c001a924:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a928:	c6 40 18 00          	mov    BYTE PTR [eax+0x18],0x0
c001a92c:	c3                   	ret    
c001a92d:	90                   	nop
c001a92e:	66 90                	xchg   ax,ax

c001a930 <SoundPort::pause()>:
c001a930:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a934:	c6 40 18 01          	mov    BYTE PTR [eax+0x18],0x1
c001a938:	c3                   	ret    
c001a939:	90                   	nop
c001a93a:	66 90                	xchg   ax,ax

c001a93c <SoundPort::getBufferUsed()>:
c001a93c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a940:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001a943:	c3                   	ret    

c001a944 <SoundPort::getBufferSize()>:
c001a944:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a948:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001a94b:	c3                   	ret    

c001a94c <SoundPort::buffer16(short*, int)>:
c001a94c:	55                   	push   ebp
c001a94d:	57                   	push   edi
c001a94e:	56                   	push   esi
c001a94f:	53                   	push   ebx
c001a950:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001a954:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c001a958:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c001a95b:	3b 42 10             	cmp    eax,DWORD PTR [edx+0x10]
c001a95e:	74 68                	je     c001a9c8 <SoundPort::buffer16(short*, int)+0x7c>
c001a960:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a964:	85 c9                	test   ecx,ecx
c001a966:	7e 60                	jle    c001a9c8 <SoundPort::buffer16(short*, int)+0x7c>
c001a968:	0f bf 4d 00          	movsx  ecx,WORD PTR [ebp+0x0]
c001a96c:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001a96f:	c1 e1 0f             	shl    ecx,0xf
c001a972:	8d 70 01             	lea    esi,[eax+0x1]
c001a975:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001a978:	89 0c 83             	mov    DWORD PTR [ebx+eax*4],ecx
c001a97b:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a97e:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a981:	74 4d                	je     c001a9d0 <SoundPort::buffer16(short*, int)+0x84>
c001a983:	31 f6                	xor    esi,esi
c001a985:	eb 21                	jmp    c001a9a8 <SoundPort::buffer16(short*, int)+0x5c>
c001a987:	90                   	nop
c001a988:	0f bf 5c 45 00       	movsx  ebx,WORD PTR [ebp+eax*2+0x0]
c001a98d:	8d 79 01             	lea    edi,[ecx+0x1]
c001a990:	c1 e3 0f             	shl    ebx,0xf
c001a993:	89 7a 14             	mov    DWORD PTR [edx+0x14],edi
c001a996:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c001a999:	89 1c 8f             	mov    DWORD PTR [edi+ecx*4],ebx
c001a99c:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a99f:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a9a2:	74 1c                	je     c001a9c0 <SoundPort::buffer16(short*, int)+0x74>
c001a9a4:	89 c6                	mov    esi,eax
c001a9a6:	66 90                	xchg   ax,ax
c001a9a8:	8d 46 01             	lea    eax,[esi+0x1]
c001a9ab:	39 44 24 1c          	cmp    DWORD PTR [esp+0x1c],eax
c001a9af:	75 d7                	jne    c001a988 <SoundPort::buffer16(short*, int)+0x3c>
c001a9b1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a9b5:	8d 76 00             	lea    esi,[esi+0x0]
c001a9b8:	5b                   	pop    ebx
c001a9b9:	5e                   	pop    esi
c001a9ba:	5f                   	pop    edi
c001a9bb:	5d                   	pop    ebp
c001a9bc:	c3                   	ret    
c001a9bd:	8d 76 00             	lea    esi,[esi+0x0]
c001a9c0:	5b                   	pop    ebx
c001a9c1:	8d 46 02             	lea    eax,[esi+0x2]
c001a9c4:	5e                   	pop    esi
c001a9c5:	5f                   	pop    edi
c001a9c6:	5d                   	pop    ebp
c001a9c7:	c3                   	ret    
c001a9c8:	5b                   	pop    ebx
c001a9c9:	31 c0                	xor    eax,eax
c001a9cb:	5e                   	pop    esi
c001a9cc:	5f                   	pop    edi
c001a9cd:	5d                   	pop    ebp
c001a9ce:	c3                   	ret    
c001a9cf:	90                   	nop
c001a9d0:	b8 01 00 00 00       	mov    eax,0x1
c001a9d5:	eb e1                	jmp    c001a9b8 <SoundPort::buffer16(short*, int)+0x6c>
c001a9d7:	90                   	nop

c001a9d8 <SoundPort::buffer32(int*, int)>:
c001a9d8:	55                   	push   ebp
c001a9d9:	57                   	push   edi
c001a9da:	56                   	push   esi
c001a9db:	53                   	push   ebx
c001a9dc:	83 ec 04             	sub    esp,0x4
c001a9df:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001a9e3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a9e7:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001a9ea:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a9ee:	89 04 24             	mov    DWORD PTR [esp],eax
c001a9f1:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001a9f4:	74 5a                	je     c001aa50 <SoundPort::buffer32(int*, int)+0x78>
c001a9f6:	85 c0                	test   eax,eax
c001a9f8:	7e 56                	jle    c001aa50 <SoundPort::buffer32(int*, int)+0x78>
c001a9fa:	8d 71 01             	lea    esi,[ecx+0x1]
c001a9fd:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c001aa00:	89 72 14             	mov    DWORD PTR [edx+0x14],esi
c001aa03:	8b 37                	mov    esi,DWORD PTR [edi]
c001aa05:	89 34 8b             	mov    DWORD PTR [ebx+ecx*4],esi
c001aa08:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa0b:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aa0e:	74 4c                	je     c001aa5c <SoundPort::buffer32(int*, int)+0x84>
c001aa10:	31 f6                	xor    esi,esi
c001aa12:	eb 1c                	jmp    c001aa30 <SoundPort::buffer32(int*, int)+0x58>
c001aa14:	8d 69 01             	lea    ebp,[ecx+0x1]
c001aa17:	89 6a 14             	mov    DWORD PTR [edx+0x14],ebp
c001aa1a:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c001aa1d:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001aa20:	89 44 8d 00          	mov    DWORD PTR [ebp+ecx*4+0x0],eax
c001aa24:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c001aa27:	3b 4a 10             	cmp    ecx,DWORD PTR [edx+0x10]
c001aa2a:	74 18                	je     c001aa44 <SoundPort::buffer32(int*, int)+0x6c>
c001aa2c:	89 de                	mov    esi,ebx
c001aa2e:	66 90                	xchg   ax,ax
c001aa30:	8d 5e 01             	lea    ebx,[esi+0x1]
c001aa33:	39 1c 24             	cmp    DWORD PTR [esp],ebx
c001aa36:	75 dc                	jne    c001aa14 <SoundPort::buffer32(int*, int)+0x3c>
c001aa38:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001aa3b:	90                   	nop
c001aa3c:	83 c4 04             	add    esp,0x4
c001aa3f:	5b                   	pop    ebx
c001aa40:	5e                   	pop    esi
c001aa41:	5f                   	pop    edi
c001aa42:	5d                   	pop    ebp
c001aa43:	c3                   	ret    
c001aa44:	83 c4 04             	add    esp,0x4
c001aa47:	8d 46 02             	lea    eax,[esi+0x2]
c001aa4a:	5b                   	pop    ebx
c001aa4b:	5e                   	pop    esi
c001aa4c:	5f                   	pop    edi
c001aa4d:	5d                   	pop    ebp
c001aa4e:	c3                   	ret    
c001aa4f:	90                   	nop
c001aa50:	83 c4 04             	add    esp,0x4
c001aa53:	31 c0                	xor    eax,eax
c001aa55:	5b                   	pop    ebx
c001aa56:	5e                   	pop    esi
c001aa57:	5f                   	pop    edi
c001aa58:	5d                   	pop    ebp
c001aa59:	c3                   	ret    
c001aa5a:	66 90                	xchg   ax,ax
c001aa5c:	b8 01 00 00 00       	mov    eax,0x1
c001aa61:	eb d9                	jmp    c001aa3c <SoundPort::buffer32(int*, int)+0x64>
c001aa63:	90                   	nop

c001aa64 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)>:
c001aa64:	57                   	push   edi
c001aa65:	56                   	push   esi
c001aa66:	53                   	push   ebx
c001aa67:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001aa6b:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c001aa6f:	8b 86 e0 01 00 00    	mov    eax,DWORD PTR [esi+0x1e0]
c001aa75:	39 03                	cmp    DWORD PTR [ebx],eax
c001aa77:	74 13                	je     c001aa8c <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x28>
c001aa79:	83 ec 0c             	sub    esp,0xc
c001aa7c:	68 0c 2a 02 c0       	push   0xc0022a0c
c001aa81:	e8 f3 67 ff ff       	call   c0011279 <KePanic(char const*)>
c001aa86:	83 c4 10             	add    esp,0x10
c001aa89:	8d 76 00             	lea    esi,[esi+0x0]
c001aa8c:	8b 86 dc 01 00 00    	mov    eax,DWORD PTR [esi+0x1dc]
c001aa92:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c001aa95:	74 11                	je     c001aaa8 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x44>
c001aa97:	83 ec 0c             	sub    esp,0xc
c001aa9a:	68 4b 2a 02 c0       	push   0xc0022a4b
c001aa9f:	e8 d5 67 ff ff       	call   c0011279 <KePanic(char const*)>
c001aaa4:	83 c4 10             	add    esp,0x10
c001aaa7:	90                   	nop
c001aaa8:	8b 86 e4 01 00 00    	mov    eax,DWORD PTR [esi+0x1e4]
c001aaae:	39 43 08             	cmp    DWORD PTR [ebx+0x8],eax
c001aab1:	74 11                	je     c001aac4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x60>
c001aab3:	83 ec 0c             	sub    esp,0xc
c001aab6:	68 4b 2a 02 c0       	push   0xc0022a4b
c001aabb:	e8 b9 67 ff ff       	call   c0011279 <KePanic(char const*)>
c001aac0:	83 c4 10             	add    esp,0x10
c001aac3:	90                   	nop
c001aac4:	8b 73 14             	mov    esi,DWORD PTR [ebx+0x14]
c001aac7:	3b 74 24 14          	cmp    esi,DWORD PTR [esp+0x14]
c001aacb:	7e 07                	jle    c001aad4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x70>
c001aacd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001aad1:	8d 76 00             	lea    esi,[esi+0x0]
c001aad4:	85 f6                	test   esi,esi
c001aad6:	7e 2c                	jle    c001ab04 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0xa0>
c001aad8:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001aadc:	8d 3c 36             	lea    edi,[esi+esi*1]
c001aadf:	31 c9                	xor    ecx,ecx
c001aae1:	01 d7                	add    edi,edx
c001aae3:	90                   	nop
c001aae4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c001aae7:	8b 04 08             	mov    eax,DWORD PTR [eax+ecx*1]
c001aaea:	85 c0                	test   eax,eax
c001aaec:	79 06                	jns    c001aaf4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x90>
c001aaee:	05 ff 7f 00 00       	add    eax,0x7fff
c001aaf3:	90                   	nop
c001aaf4:	c1 f8 0f             	sar    eax,0xf
c001aaf7:	83 c1 04             	add    ecx,0x4
c001aafa:	66 01 02             	add    WORD PTR [edx],ax
c001aafd:	83 c2 02             	add    edx,0x2
c001ab00:	39 d7                	cmp    edi,edx
c001ab02:	75 e0                	jne    c001aae4 <SoundPort::unbufferAndAdd16(int, short*, SoundCard*)+0x80>
c001ab04:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c001ab07:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ab0a:	83 ec 04             	sub    esp,0x4
c001ab0d:	29 f0                	sub    eax,esi
c001ab0f:	c1 e0 02             	shl    eax,0x2
c001ab12:	50                   	push   eax
c001ab13:	8d 04 b2             	lea    eax,[edx+esi*4]
c001ab16:	50                   	push   eax
c001ab17:	52                   	push   edx
c001ab18:	e8 b3 58 fe ff       	call   c00003d0 <memmove>
c001ab1d:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001ab20:	83 c4 10             	add    esp,0x10
c001ab23:	29 f0                	sub    eax,esi
c001ab25:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c001ab28:	89 f0                	mov    eax,esi
c001ab2a:	5b                   	pop    ebx
c001ab2b:	5e                   	pop    esi
c001ab2c:	5f                   	pop    edi
c001ab2d:	c3                   	ret    
c001ab2e:	66 90                	xchg   ax,ax

c001ab30 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)>:
c001ab30:	57                   	push   edi
c001ab31:	56                   	push   esi
c001ab32:	53                   	push   ebx
c001ab33:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ab37:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001ab3b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001ab3f:	8b 87 e0 01 00 00    	mov    eax,DWORD PTR [edi+0x1e0]
c001ab45:	39 06                	cmp    DWORD PTR [esi],eax
c001ab47:	74 13                	je     c001ab5c <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x2c>
c001ab49:	83 ec 0c             	sub    esp,0xc
c001ab4c:	68 2c 2a 02 c0       	push   0xc0022a2c
c001ab51:	e8 23 67 ff ff       	call   c0011279 <KePanic(char const*)>
c001ab56:	83 c4 10             	add    esp,0x10
c001ab59:	8d 76 00             	lea    esi,[esi+0x0]
c001ab5c:	8b 87 dc 01 00 00    	mov    eax,DWORD PTR [edi+0x1dc]
c001ab62:	39 46 04             	cmp    DWORD PTR [esi+0x4],eax
c001ab65:	74 11                	je     c001ab78 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x48>
c001ab67:	83 ec 0c             	sub    esp,0xc
c001ab6a:	68 67 2a 02 c0       	push   0xc0022a67
c001ab6f:	e8 05 67 ff ff       	call   c0011279 <KePanic(char const*)>
c001ab74:	83 c4 10             	add    esp,0x10
c001ab77:	90                   	nop
c001ab78:	8b 87 e4 01 00 00    	mov    eax,DWORD PTR [edi+0x1e4]
c001ab7e:	39 46 08             	cmp    DWORD PTR [esi+0x8],eax
c001ab81:	74 11                	je     c001ab94 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x64>
c001ab83:	83 ec 0c             	sub    esp,0xc
c001ab86:	68 67 2a 02 c0       	push   0xc0022a67
c001ab8b:	e8 e9 66 ff ff       	call   c0011279 <KePanic(char const*)>
c001ab90:	83 c4 10             	add    esp,0x10
c001ab93:	90                   	nop
c001ab94:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001ab97:	3b 7c 24 14          	cmp    edi,DWORD PTR [esp+0x14]
c001ab9b:	7e 07                	jle    c001aba4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x74>
c001ab9d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001aba1:	8d 76 00             	lea    esi,[esi+0x0]
c001aba4:	85 ff                	test   edi,edi
c001aba6:	7e 1c                	jle    c001abc4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x94>
c001aba8:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c001abaf:	31 c0                	xor    eax,eax
c001abb1:	8d 76 00             	lea    esi,[esi+0x0]
c001abb4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001abb7:	8b 14 02             	mov    edx,DWORD PTR [edx+eax*1]
c001abba:	01 14 03             	add    DWORD PTR [ebx+eax*1],edx
c001abbd:	83 c0 04             	add    eax,0x4
c001abc0:	39 c1                	cmp    ecx,eax
c001abc2:	75 f0                	jne    c001abb4 <SoundPort::unbufferAndAdd32(int, int*, SoundCard*)+0x84>
c001abc4:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c001abc7:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001abca:	83 ec 04             	sub    esp,0x4
c001abcd:	29 f8                	sub    eax,edi
c001abcf:	c1 e0 02             	shl    eax,0x2
c001abd2:	50                   	push   eax
c001abd3:	8d 04 ba             	lea    eax,[edx+edi*4]
c001abd6:	50                   	push   eax
c001abd7:	52                   	push   edx
c001abd8:	e8 f3 57 fe ff       	call   c00003d0 <memmove>
c001abdd:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001abe0:	83 c4 10             	add    esp,0x10
c001abe3:	29 f8                	sub    eax,edi
c001abe5:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c001abe8:	89 f8                	mov    eax,edi
c001abea:	5b                   	pop    ebx
c001abeb:	5e                   	pop    esi
c001abec:	5f                   	pop    edi
c001abed:	c3                   	ret    

c001abee <PCI::open(int, int, void*)>:
c001abee:	83 ec 18             	sub    esp,0x18
c001abf1:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001abf5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001abf9:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001abff:	8b 10                	mov    edx,DWORD PTR [eax]
c001ac01:	50                   	push   eax
c001ac02:	ff 52 18             	call   DWORD PTR [edx+0x18]
c001ac05:	31 c0                	xor    eax,eax
c001ac07:	83 c4 1c             	add    esp,0x1c
c001ac0a:	c3                   	ret    
c001ac0b:	90                   	nop

c001ac0c <PCI::close(int, int, void*)>:
c001ac0c:	31 c0                	xor    eax,eax
c001ac0e:	c3                   	ret    
c001ac0f:	90                   	nop

c001ac10 <PCI::PCI()>:
c001ac10:	83 ec 0c             	sub    esp,0xc
c001ac13:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac17:	83 ec 08             	sub    esp,0x8
c001ac1a:	68 83 2a 02 c0       	push   0xc0022a83
c001ac1f:	50                   	push   eax
c001ac20:	e8 87 13 ff ff       	call   c000bfac <Bus::Bus(char const*)>
c001ac25:	83 c4 10             	add    esp,0x10
c001ac28:	ba 2c 2b 02 c0       	mov    edx,0xc0022b2c
c001ac2d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac31:	89 10                	mov    DWORD PTR [eax],edx
c001ac33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac37:	c7 80 58 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x158],0x1
c001ac41:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac45:	a3 a0 a0 02 c0       	mov    ds:0xc002a0a0,eax
c001ac4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac4e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ac54:	0f b6 d0             	movzx  edx,al
c001ac57:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac5b:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c001ac62:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac66:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ac6c:	0f b6 d0             	movzx  edx,al
c001ac6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac73:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c001ac78:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac7c:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ac82:	8d 50 01             	lea    edx,[eax+0x1]
c001ac85:	88 d1                	mov    cl,dl
c001ac87:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ac8b:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ac91:	0f b6 d0             	movzx  edx,al
c001ac94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ac98:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ac9c:	83 c9 c0             	or     ecx,0xffffffc0
c001ac9f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001aca3:	90                   	nop
c001aca4:	83 c4 0c             	add    esp,0xc
c001aca7:	c3                   	ret    

c001aca8 <PCI::readBAR8(unsigned int, int)>:
c001aca8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acac:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acb0:	f6 c2 01             	test   dl,0x1
c001acb3:	74 07                	je     c001acbc <PCI::readBAR8(unsigned int, int)+0x14>
c001acb5:	83 e2 fc             	and    edx,0xfffffffc
c001acb8:	01 c2                	add    edx,eax
c001acba:	ec                   	in     al,dx
c001acbb:	c3                   	ret    
c001acbc:	83 e2 f0             	and    edx,0xfffffff0
c001acbf:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c001acc2:	c3                   	ret    
c001acc3:	90                   	nop

c001acc4 <PCI::readBAR16(unsigned int, int)>:
c001acc4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001acc8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001accc:	f6 c2 01             	test   dl,0x1
c001accf:	74 08                	je     c001acd9 <PCI::readBAR16(unsigned int, int)+0x15>
c001acd1:	83 e2 fc             	and    edx,0xfffffffc
c001acd4:	01 c2                	add    edx,eax
c001acd6:	66 ed                	in     ax,dx
c001acd8:	c3                   	ret    
c001acd9:	83 e2 f0             	and    edx,0xfffffff0
c001acdc:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c001ace0:	c3                   	ret    
c001ace1:	90                   	nop

c001ace2 <PCI::readBAR32(unsigned int, int)>:
c001ace2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ace6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acea:	f6 c2 01             	test   dl,0x1
c001aced:	74 07                	je     c001acf6 <PCI::readBAR32(unsigned int, int)+0x14>
c001acef:	83 e2 fc             	and    edx,0xfffffffc
c001acf2:	01 c2                	add    edx,eax
c001acf4:	ed                   	in     eax,dx
c001acf5:	c3                   	ret    
c001acf6:	83 e2 f0             	and    edx,0xfffffff0
c001acf9:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c001acfc:	c3                   	ret    
c001acfd:	90                   	nop

c001acfe <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c001acfe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad02:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad06:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad0a:	f6 c2 01             	test   dl,0x1
c001ad0d:	74 07                	je     c001ad16 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c001ad0f:	83 e2 fc             	and    edx,0xfffffffc
c001ad12:	01 ca                	add    edx,ecx
c001ad14:	ee                   	out    dx,al
c001ad15:	c3                   	ret    
c001ad16:	83 e2 f0             	and    edx,0xfffffff0
c001ad19:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c001ad1c:	c3                   	ret    
c001ad1d:	90                   	nop

c001ad1e <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c001ad1e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad22:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad26:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad2a:	f6 c2 01             	test   dl,0x1
c001ad2d:	74 08                	je     c001ad37 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c001ad2f:	83 e2 fc             	and    edx,0xfffffffc
c001ad32:	01 ca                	add    edx,ecx
c001ad34:	66 ef                	out    dx,ax
c001ad36:	c3                   	ret    
c001ad37:	83 e2 f0             	and    edx,0xfffffff0
c001ad3a:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c001ad3e:	c3                   	ret    
c001ad3f:	90                   	nop

c001ad40 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c001ad40:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ad44:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ad48:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001ad4c:	f6 c2 01             	test   dl,0x1
c001ad4f:	74 07                	je     c001ad58 <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c001ad51:	83 e2 fc             	and    edx,0xfffffffc
c001ad54:	01 ca                	add    edx,ecx
c001ad56:	ef                   	out    dx,eax
c001ad57:	c3                   	ret    
c001ad58:	83 e2 f0             	and    edx,0xfffffff0
c001ad5b:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c001ad5e:	c3                   	ret    
c001ad5f:	90                   	nop

c001ad60 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001ad60:	55                   	push   ebp
c001ad61:	57                   	push   edi
c001ad62:	56                   	push   esi
c001ad63:	53                   	push   ebx
c001ad64:	83 ec 0c             	sub    esp,0xc
c001ad67:	0f b6 74 24 2c       	movzx  esi,BYTE PTR [esp+0x2c]
c001ad6c:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c001ad70:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c001ad74:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001ad78:	83 fe 07             	cmp    esi,0x7
c001ad7b:	76 10                	jbe    c001ad8d <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x2d>
c001ad7d:	83 ec 0c             	sub    esp,0xc
c001ad80:	68 8b 2a 02 c0       	push   0xc0022a8b
c001ad85:	e8 ef 64 ff ff       	call   c0011279 <KePanic(char const*)>
c001ad8a:	83 c4 10             	add    esp,0x10
c001ad8d:	0f b6 db             	movzx  ebx,bl
c001ad90:	83 fb 0f             	cmp    ebx,0xf
c001ad93:	76 10                	jbe    c001ada5 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)+0x45>
c001ad95:	83 ec 0c             	sub    esp,0xc
c001ad98:	68 bb 2a 02 c0       	push   0xc0022abb
c001ad9d:	e8 d7 64 ff ff       	call   c0011279 <KePanic(char const*)>
c001ada2:	83 c4 10             	add    esp,0x10
c001ada5:	8d 04 36             	lea    eax,[esi+esi*1]
c001ada8:	ba f8 0c 00 00       	mov    edx,0xcf8
c001adad:	83 c8 f0             	or     eax,0xfffffff0
c001adb0:	ee                   	out    dx,al
c001adb1:	ba fa 0c 00 00       	mov    edx,0xcfa
c001adb6:	89 e8                	mov    eax,ebp
c001adb8:	ee                   	out    dx,al
c001adb9:	83 c4 0c             	add    esp,0xc
c001adbc:	89 d8                	mov    eax,ebx
c001adbe:	89 f9                	mov    ecx,edi
c001adc0:	c1 e0 08             	shl    eax,0x8
c001adc3:	0f b6 d9             	movzx  ebx,cl
c001adc6:	83 e3 fc             	and    ebx,0xfffffffc
c001adc9:	09 d8                	or     eax,ebx
c001adcb:	5b                   	pop    ebx
c001adcc:	0d 00 c0 ff ff       	or     eax,0xffffc000
c001add1:	5e                   	pop    esi
c001add2:	5f                   	pop    edi
c001add3:	5d                   	pop    ebp
c001add4:	c3                   	ret    
c001add5:	90                   	nop

c001add6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001add6:	57                   	push   edi
c001add7:	56                   	push   esi
c001add8:	53                   	push   ebx
c001add9:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001addd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ade1:	8b be 58 01 00 00    	mov    edi,DWORD PTR [esi+0x158]
c001ade7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001adeb:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001adef:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001adf3:	83 ff 01             	cmp    edi,0x1
c001adf6:	75 3f                	jne    c001ae37 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x61>
c001adf8:	89 de                	mov    esi,ebx
c001adfa:	0f b6 c0             	movzx  eax,al
c001adfd:	81 e6 fc 00 00 00    	and    esi,0xfc
c001ae03:	c1 e0 10             	shl    eax,0x10
c001ae06:	0f b6 c9             	movzx  ecx,cl
c001ae09:	09 f0                	or     eax,esi
c001ae0b:	c1 e1 08             	shl    ecx,0x8
c001ae0e:	0f b6 d2             	movzx  edx,dl
c001ae11:	09 c8                	or     eax,ecx
c001ae13:	c1 e2 0b             	shl    edx,0xb
c001ae16:	09 d0                	or     eax,edx
c001ae18:	ba f8 0c 00 00       	mov    edx,0xcf8
c001ae1d:	0d 00 00 00 80       	or     eax,0x80000000
c001ae22:	ef                   	out    dx,eax
c001ae23:	ba fc 0c 00 00       	mov    edx,0xcfc
c001ae28:	ed                   	in     eax,dx
c001ae29:	83 e3 02             	and    ebx,0x2
c001ae2c:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001ae33:	d3 e8                	shr    eax,cl
c001ae35:	eb 44                	jmp    c001ae7b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001ae37:	83 ff 02             	cmp    edi,0x2
c001ae3a:	75 2d                	jne    c001ae69 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0x93>
c001ae3c:	83 ec 0c             	sub    esp,0xc
c001ae3f:	0f b6 c9             	movzx  ecx,cl
c001ae42:	0f b6 d2             	movzx  edx,dl
c001ae45:	0f b6 fb             	movzx  edi,bl
c001ae48:	0f b6 c0             	movzx  eax,al
c001ae4b:	57                   	push   edi
c001ae4c:	51                   	push   ecx
c001ae4d:	52                   	push   edx
c001ae4e:	50                   	push   eax
c001ae4f:	56                   	push   esi
c001ae50:	e8 0b ff ff ff       	call   c001ad60 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001ae55:	89 c2                	mov    edx,eax
c001ae57:	ed                   	in     eax,dx
c001ae58:	83 e3 02             	and    ebx,0x2
c001ae5b:	83 c4 20             	add    esp,0x20
c001ae5e:	8d 0c dd 00 00 00 00 	lea    ecx,[ebx*8+0x0]
c001ae65:	d3 e8                	shr    eax,cl
c001ae67:	eb 12                	jmp    c001ae7b <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)+0xa5>
c001ae69:	83 ec 0c             	sub    esp,0xc
c001ae6c:	68 eb 2a 02 c0       	push   0xc0022aeb
c001ae71:	e8 03 64 ff ff       	call   c0011279 <KePanic(char const*)>
c001ae76:	83 c4 10             	add    esp,0x10
c001ae79:	31 c0                	xor    eax,eax
c001ae7b:	5b                   	pop    ebx
c001ae7c:	5e                   	pop    esi
c001ae7d:	5f                   	pop    edi
c001ae7e:	c3                   	ret    
c001ae7f:	90                   	nop

c001ae80 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c001ae80:	83 ec 18             	sub    esp,0x18
c001ae83:	6a 00                	push   0x0
c001ae85:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae8a:	50                   	push   eax
c001ae8b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae90:	50                   	push   eax
c001ae91:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001ae96:	50                   	push   eax
c001ae97:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001ae9b:	e8 36 ff ff ff       	call   c001add6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aea0:	83 c4 2c             	add    esp,0x2c
c001aea3:	c3                   	ret    

c001aea4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c001aea4:	83 ec 18             	sub    esp,0x18
c001aea7:	6a 0e                	push   0xe
c001aea9:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aeae:	50                   	push   eax
c001aeaf:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aeb4:	50                   	push   eax
c001aeb5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001aeba:	50                   	push   eax
c001aebb:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001aebf:	e8 12 ff ff ff       	call   c001add6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aec4:	83 c4 2c             	add    esp,0x2c
c001aec7:	0f b6 c0             	movzx  eax,al
c001aeca:	c3                   	ret    
c001aecb:	90                   	nop

c001aecc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c001aecc:	55                   	push   ebp
c001aecd:	57                   	push   edi
c001aece:	56                   	push   esi
c001aecf:	53                   	push   ebx
c001aed0:	83 ec 18             	sub    esp,0x18
c001aed3:	0f b6 74 24 38       	movzx  esi,BYTE PTR [esp+0x38]
c001aed8:	0f b6 6c 24 34       	movzx  ebp,BYTE PTR [esp+0x34]
c001aedd:	0f b6 7c 24 30       	movzx  edi,BYTE PTR [esp+0x30]
c001aee2:	6a 0a                	push   0xa
c001aee4:	56                   	push   esi
c001aee5:	55                   	push   ebp
c001aee6:	57                   	push   edi
c001aee7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001aeeb:	e8 e6 fe ff ff       	call   c001add6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001aef0:	83 c4 14             	add    esp,0x14
c001aef3:	89 c3                	mov    ebx,eax
c001aef5:	6a 0a                	push   0xa
c001aef7:	0f b6 db             	movzx  ebx,bl
c001aefa:	56                   	push   esi
c001aefb:	55                   	push   ebp
c001aefc:	57                   	push   edi
c001aefd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001af01:	e8 d0 fe ff ff       	call   c001add6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af06:	83 c4 2c             	add    esp,0x2c
c001af09:	25 00 ff 00 00       	and    eax,0xff00
c001af0e:	09 d8                	or     eax,ebx
c001af10:	5b                   	pop    ebx
c001af11:	5e                   	pop    esi
c001af12:	5f                   	pop    edi
c001af13:	5d                   	pop    ebp
c001af14:	c3                   	ret    
c001af15:	90                   	nop

c001af16 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c001af16:	83 ec 18             	sub    esp,0x18
c001af19:	6a 08                	push   0x8
c001af1b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af20:	50                   	push   eax
c001af21:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af26:	50                   	push   eax
c001af27:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af2c:	50                   	push   eax
c001af2d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af31:	e8 a0 fe ff ff       	call   c001add6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af36:	83 c4 2c             	add    esp,0x2c
c001af39:	0f b6 c4             	movzx  eax,ah
c001af3c:	c3                   	ret    
c001af3d:	90                   	nop

c001af3e <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c001af3e:	83 ec 18             	sub    esp,0x18
c001af41:	6a 08                	push   0x8
c001af43:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af48:	50                   	push   eax
c001af49:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af4e:	50                   	push   eax
c001af4f:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af54:	50                   	push   eax
c001af55:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af59:	e8 78 fe ff ff       	call   c001add6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af5e:	83 c4 2c             	add    esp,0x2c
c001af61:	c3                   	ret    

c001af62 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c001af62:	83 ec 18             	sub    esp,0x18
c001af65:	6a 3c                	push   0x3c
c001af67:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af6c:	50                   	push   eax
c001af6d:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af72:	50                   	push   eax
c001af73:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af78:	50                   	push   eax
c001af79:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001af7d:	e8 54 fe ff ff       	call   c001add6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001af82:	83 c4 2c             	add    esp,0x2c
c001af85:	c3                   	ret    

c001af86 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c001af86:	83 ec 18             	sub    esp,0x18
c001af89:	6a 18                	push   0x18
c001af8b:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af90:	50                   	push   eax
c001af91:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af96:	50                   	push   eax
c001af97:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001af9c:	50                   	push   eax
c001af9d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001afa1:	e8 30 fe ff ff       	call   c001add6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afa6:	83 c4 2c             	add    esp,0x2c
c001afa9:	0f b6 c4             	movzx  eax,ah
c001afac:	c3                   	ret    
c001afad:	90                   	nop

c001afae <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c001afae:	55                   	push   ebp
c001afaf:	57                   	push   edi
c001afb0:	56                   	push   esi
c001afb1:	53                   	push   ebx
c001afb2:	83 ec 28             	sub    esp,0x28
c001afb5:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001afb9:	0f b6 7c 24 48       	movzx  edi,BYTE PTR [esp+0x48]
c001afbe:	0f b6 6c 24 44       	movzx  ebp,BYTE PTR [esp+0x44]
c001afc3:	0f b6 4c 24 4c       	movzx  ecx,BYTE PTR [esp+0x4c]
c001afc8:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c001afcf:	8d 43 12             	lea    eax,[ebx+0x12]
c001afd2:	83 c3 10             	add    ebx,0x10
c001afd5:	0f b6 c0             	movzx  eax,al
c001afd8:	0f b6 db             	movzx  ebx,bl
c001afdb:	50                   	push   eax
c001afdc:	51                   	push   ecx
c001afdd:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c001afe1:	57                   	push   edi
c001afe2:	55                   	push   ebp
c001afe3:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001afe7:	e8 ea fd ff ff       	call   c001add6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001afec:	83 c4 14             	add    esp,0x14
c001afef:	89 c6                	mov    esi,eax
c001aff1:	53                   	push   ebx
c001aff2:	c1 e6 10             	shl    esi,0x10
c001aff5:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001aff9:	51                   	push   ecx
c001affa:	57                   	push   edi
c001affb:	55                   	push   ebp
c001affc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001b000:	e8 d1 fd ff ff       	call   c001add6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b005:	83 c4 3c             	add    esp,0x3c
c001b008:	0f b7 c0             	movzx  eax,ax
c001b00b:	5b                   	pop    ebx
c001b00c:	09 f0                	or     eax,esi
c001b00e:	5e                   	pop    esi
c001b00f:	5f                   	pop    edi
c001b010:	5d                   	pop    ebp
c001b011:	c3                   	ret    

c001b012 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c001b012:	55                   	push   ebp
c001b013:	57                   	push   edi
c001b014:	56                   	push   esi
c001b015:	53                   	push   ebx
c001b016:	83 ec 0c             	sub    esp,0xc
c001b019:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001b01d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b021:	89 f5                	mov    ebp,esi
c001b023:	8b 8f 58 01 00 00    	mov    ecx,DWORD PTR [edi+0x158]
c001b029:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b02d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b031:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b035:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001b039:	83 f9 01             	cmp    ecx,0x1
c001b03c:	75 5d                	jne    c001b09b <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x89>
c001b03e:	0f b6 c8             	movzx  ecx,al
c001b041:	0f b6 d2             	movzx  edx,dl
c001b044:	c1 e1 10             	shl    ecx,0x10
c001b047:	c1 e2 0b             	shl    edx,0xb
c001b04a:	89 f0                	mov    eax,esi
c001b04c:	25 fc 00 00 00       	and    eax,0xfc
c001b051:	09 c1                	or     ecx,eax
c001b053:	89 e8                	mov    eax,ebp
c001b055:	0f b6 c0             	movzx  eax,al
c001b058:	c1 e0 08             	shl    eax,0x8
c001b05b:	09 c1                	or     ecx,eax
c001b05d:	09 d1                	or     ecx,edx
c001b05f:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b064:	81 c9 00 00 00 80    	or     ecx,0x80000000
c001b06a:	89 c8                	mov    eax,ecx
c001b06c:	ef                   	out    dx,eax
c001b06d:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b072:	ed                   	in     eax,dx
c001b073:	0f b7 db             	movzx  ebx,bx
c001b076:	83 e6 02             	and    esi,0x2
c001b079:	74 0a                	je     c001b085 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x73>
c001b07b:	0f b7 d0             	movzx  edx,ax
c001b07e:	c1 e3 10             	shl    ebx,0x10
c001b081:	09 d3                	or     ebx,edx
c001b083:	eb 05                	jmp    c001b08a <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x78>
c001b085:	66 31 c0             	xor    ax,ax
c001b088:	09 c3                	or     ebx,eax
c001b08a:	ba f8 0c 00 00       	mov    edx,0xcf8
c001b08f:	89 c8                	mov    eax,ecx
c001b091:	ef                   	out    dx,eax
c001b092:	ba fc 0c 00 00       	mov    edx,0xcfc
c001b097:	89 d8                	mov    eax,ebx
c001b099:	eb 41                	jmp    c001b0dc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b09b:	83 f9 02             	cmp    ecx,0x2
c001b09e:	75 45                	jne    c001b0e5 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xd3>
c001b0a0:	83 ec 0c             	sub    esp,0xc
c001b0a3:	0f b6 d2             	movzx  edx,dl
c001b0a6:	89 f1                	mov    ecx,esi
c001b0a8:	0f b6 c0             	movzx  eax,al
c001b0ab:	0f b6 f1             	movzx  esi,cl
c001b0ae:	89 e9                	mov    ecx,ebp
c001b0b0:	56                   	push   esi
c001b0b1:	0f b6 c9             	movzx  ecx,cl
c001b0b4:	51                   	push   ecx
c001b0b5:	52                   	push   edx
c001b0b6:	50                   	push   eax
c001b0b7:	57                   	push   edi
c001b0b8:	e8 a3 fc ff ff       	call   c001ad60 <PCI::legacyMechanism(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b0bd:	89 c2                	mov    edx,eax
c001b0bf:	ed                   	in     eax,dx
c001b0c0:	83 c4 20             	add    esp,0x20
c001b0c3:	0f b7 db             	movzx  ebx,bx
c001b0c6:	f6 c2 02             	test   dl,0x2
c001b0c9:	74 0c                	je     c001b0d7 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xc5>
c001b0cb:	0f b7 c8             	movzx  ecx,ax
c001b0ce:	89 d8                	mov    eax,ebx
c001b0d0:	c1 e0 10             	shl    eax,0x10
c001b0d3:	09 c8                	or     eax,ecx
c001b0d5:	eb 05                	jmp    c001b0dc <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0xca>
c001b0d7:	66 31 c0             	xor    ax,ax
c001b0da:	09 d8                	or     eax,ebx
c001b0dc:	ef                   	out    dx,eax
c001b0dd:	83 c4 0c             	add    esp,0xc
c001b0e0:	5b                   	pop    ebx
c001b0e1:	5e                   	pop    esi
c001b0e2:	5f                   	pop    edi
c001b0e3:	5d                   	pop    ebp
c001b0e4:	c3                   	ret    
c001b0e5:	c7 44 24 20 eb 2a 02 c0 	mov    DWORD PTR [esp+0x20],0xc0022aeb
c001b0ed:	83 c4 0c             	add    esp,0xc
c001b0f0:	5b                   	pop    ebx
c001b0f1:	5e                   	pop    esi
c001b0f2:	5f                   	pop    edi
c001b0f3:	5d                   	pop    ebp
c001b0f4:	e9 80 61 ff ff       	jmp    c0011279 <KePanic(char const*)>
c001b0f9:	90                   	nop

c001b0fa <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)>:
c001b0fa:	55                   	push   ebp
c001b0fb:	57                   	push   edi
c001b0fc:	56                   	push   esi
c001b0fd:	53                   	push   ebx
c001b0fe:	81 ec 4c 01 00 00    	sub    esp,0x14c
c001b104:	8b ac 24 84 01 00 00 	mov    ebp,DWORD PTR [esp+0x184]
c001b10b:	80 3d ac a0 02 c0 00 	cmp    BYTE PTR ds:0xc002a0ac,0x0
c001b112:	0f 85 bd 00 00 00    	jne    c001b1d5 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0xdb>
c001b118:	83 ec 0c             	sub    esp,0xc
c001b11b:	68 14 01 00 00       	push   0x114
c001b120:	e8 91 c9 fe ff       	call   c0007ab6 <malloc>
c001b125:	83 c4 0c             	add    esp,0xc
c001b128:	89 c3                	mov    ebx,eax
c001b12a:	ff 35 f0 96 02 c0    	push   DWORD PTR ds:0xc00296f0
c001b130:	68 f1 2a 02 c0       	push   0xc0022af1
c001b135:	50                   	push   eax
c001b136:	e8 07 06 ff ff       	call   c000b742 <File::File(char const*, Process*)>
c001b13b:	83 c4 10             	add    esp,0x10
c001b13e:	85 db                	test   ebx,ebx
c001b140:	0f 84 67 02 00 00    	je     c001b3ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b146:	56                   	push   esi
c001b147:	56                   	push   esi
c001b148:	6a 01                	push   0x1
c001b14a:	53                   	push   ebx
c001b14b:	e8 ae 06 ff ff       	call   c000b7fe <File::open(FileOpenMode)>
c001b150:	83 c4 10             	add    esp,0x10
c001b153:	85 c0                	test   eax,eax
c001b155:	0f 85 52 02 00 00    	jne    c001b3ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b15b:	52                   	push   edx
c001b15c:	8d 44 24 3f          	lea    eax,[esp+0x3f]
c001b160:	50                   	push   eax
c001b161:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b165:	50                   	push   eax
c001b166:	53                   	push   ebx
c001b167:	e8 94 09 ff ff       	call   c000bb00 <File::stat(unsigned long long*, bool*)>
c001b16c:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b170:	40                   	inc    eax
c001b171:	89 04 24             	mov    DWORD PTR [esp],eax
c001b174:	e8 3d c9 fe ff       	call   c0007ab6 <malloc>
c001b179:	8b 54 24 50          	mov    edx,DWORD PTR [esp+0x50]
c001b17d:	a3 a8 a0 02 c0       	mov    ds:0xc002a0a8,eax
c001b182:	c6 04 10 00          	mov    BYTE PTR [eax+edx*1],0x0
c001b186:	59                   	pop    ecx
c001b187:	8b 13                	mov    edx,DWORD PTR [ebx]
c001b189:	8d 4c 24 48          	lea    ecx,[esp+0x48]
c001b18d:	51                   	push   ecx
c001b18e:	50                   	push   eax
c001b18f:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b193:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001b197:	53                   	push   ebx
c001b198:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001b19b:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c001b19f:	83 c4 20             	add    esp,0x20
c001b1a2:	89 c8                	mov    eax,ecx
c001b1a4:	99                   	cdq    
c001b1a5:	3b 54 24 44          	cmp    edx,DWORD PTR [esp+0x44]
c001b1a9:	0f 85 fe 01 00 00    	jne    c001b3ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b1af:	3b 4c 24 40          	cmp    ecx,DWORD PTR [esp+0x40]
c001b1b3:	0f 85 f4 01 00 00    	jne    c001b3ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b1b9:	83 ec 0c             	sub    esp,0xc
c001b1bc:	53                   	push   ebx
c001b1bd:	e8 9a 06 ff ff       	call   c000b85c <File::close()>
c001b1c2:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001b1c6:	c6 05 ac a0 02 c0 01 	mov    BYTE PTR ds:0xc002a0ac,0x1
c001b1cd:	a3 a4 a0 02 c0       	mov    ds:0xc002a0a4,eax
c001b1d2:	83 c4 10             	add    esp,0x10
c001b1d5:	a1 a4 a0 02 c0       	mov    eax,ds:0xc002a0a4
c001b1da:	8b 1d a8 a0 02 c0    	mov    ebx,DWORD PTR ds:0xc002a0a8
c001b1e0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001b1e4:	31 f6                	xor    esi,esi
c001b1e6:	66 8b 84 24 62 01 00 00 	mov    ax,WORD PTR [esp+0x162]
c001b1ee:	66 c7 44 24 0c 00 00 	mov    WORD PTR [esp+0xc],0x0
c001b1f5:	66 89 44 24 14       	mov    WORD PTR [esp+0x14],ax
c001b1fa:	31 c9                	xor    ecx,ecx
c001b1fc:	66 8b 84 24 82 01 00 00 	mov    ax,WORD PTR [esp+0x182]
c001b204:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c001b209:	0f b6 84 24 60 01 00 00 	movzx  eax,BYTE PTR [esp+0x160]
c001b211:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b215:	0f b6 84 24 61 01 00 00 	movzx  eax,BYTE PTR [esp+0x161]
c001b21d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001b221:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b225:	0f 8e 82 01 00 00    	jle    c001b3ad <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b3>
c001b22b:	8a 04 33             	mov    al,BYTE PTR [ebx+esi*1]
c001b22e:	d4 40                	aam    0x40
c001b230:	d5 39                	aad    0x39
c001b232:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c001b236:	8a 44 33 01          	mov    al,BYTE PTR [ebx+esi*1+0x1]
c001b23a:	d4 40                	aam    0x40
c001b23c:	d5 39                	aad    0x39
c001b23e:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001b242:	8a 44 33 03          	mov    al,BYTE PTR [ebx+esi*1+0x3]
c001b246:	d4 40                	aam    0x40
c001b248:	d5 39                	aad    0x39
c001b24a:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001b24e:	8a 44 33 04          	mov    al,BYTE PTR [ebx+esi*1+0x4]
c001b252:	d4 40                	aam    0x40
c001b254:	d5 39                	aad    0x39
c001b256:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001b25a:	8a 44 33 06          	mov    al,BYTE PTR [ebx+esi*1+0x6]
c001b25e:	88 44 24 0a          	mov    BYTE PTR [esp+0xa],al
c001b262:	3c 56                	cmp    al,0x56
c001b264:	74 43                	je     c001b2a9 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x1af>
c001b266:	d4 40                	aam    0x40
c001b268:	d5 39                	aad    0x39
c001b26a:	8d 48 d0             	lea    ecx,[eax-0x30]
c001b26d:	8a 44 33 07          	mov    al,BYTE PTR [ebx+esi*1+0x7]
c001b271:	0f b6 c9             	movzx  ecx,cl
c001b274:	c1 e1 04             	shl    ecx,0x4
c001b277:	d4 40                	aam    0x40
c001b279:	d5 39                	aad    0x39
c001b27b:	83 e8 30             	sub    eax,0x30
c001b27e:	0f b6 c0             	movzx  eax,al
c001b281:	09 c1                	or     ecx,eax
c001b283:	8a 44 33 08          	mov    al,BYTE PTR [ebx+esi*1+0x8]
c001b287:	c1 e1 04             	shl    ecx,0x4
c001b28a:	d4 40                	aam    0x40
c001b28c:	d5 39                	aad    0x39
c001b28e:	83 e8 30             	sub    eax,0x30
c001b291:	0f b6 c0             	movzx  eax,al
c001b294:	09 c1                	or     ecx,eax
c001b296:	8a 44 33 09          	mov    al,BYTE PTR [ebx+esi*1+0x9]
c001b29a:	c1 e1 04             	shl    ecx,0x4
c001b29d:	d4 40                	aam    0x40
c001b29f:	d5 39                	aad    0x39
c001b2a1:	83 e8 30             	sub    eax,0x30
c001b2a4:	0f b6 c0             	movzx  eax,al
c001b2a7:	09 c1                	or     ecx,eax
c001b2a9:	8a 44 33 0b          	mov    al,BYTE PTR [ebx+esi*1+0xb]
c001b2ad:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c001b2b1:	3c 58                	cmp    al,0x58
c001b2b3:	74 47                	je     c001b2fc <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x202>
c001b2b5:	d4 40                	aam    0x40
c001b2b7:	d5 39                	aad    0x39
c001b2b9:	8d 50 d0             	lea    edx,[eax-0x30]
c001b2bc:	8a 44 33 0c          	mov    al,BYTE PTR [ebx+esi*1+0xc]
c001b2c0:	0f b6 d2             	movzx  edx,dl
c001b2c3:	c1 e2 04             	shl    edx,0x4
c001b2c6:	d4 40                	aam    0x40
c001b2c8:	d5 39                	aad    0x39
c001b2ca:	83 e8 30             	sub    eax,0x30
c001b2cd:	0f b6 c0             	movzx  eax,al
c001b2d0:	09 c2                	or     edx,eax
c001b2d2:	8a 44 33 0d          	mov    al,BYTE PTR [ebx+esi*1+0xd]
c001b2d6:	c1 e2 04             	shl    edx,0x4
c001b2d9:	d4 40                	aam    0x40
c001b2db:	d5 39                	aad    0x39
c001b2dd:	83 e8 30             	sub    eax,0x30
c001b2e0:	0f b6 c0             	movzx  eax,al
c001b2e3:	09 c2                	or     edx,eax
c001b2e5:	8a 44 33 0e          	mov    al,BYTE PTR [ebx+esi*1+0xe]
c001b2e9:	c1 e2 04             	shl    edx,0x4
c001b2ec:	d4 40                	aam    0x40
c001b2ee:	d5 39                	aad    0x39
c001b2f0:	83 e8 30             	sub    eax,0x30
c001b2f3:	0f b6 c0             	movzx  eax,al
c001b2f6:	09 c2                	or     edx,eax
c001b2f8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b2fc:	83 c6 10             	add    esi,0x10
c001b2ff:	8d 7c 24 40          	lea    edi,[esp+0x40]
c001b303:	0f be 14 33          	movsx  edx,BYTE PTR [ebx+esi*1]
c001b307:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b30b:	83 fa 0a             	cmp    edx,0xa
c001b30e:	74 0b                	je     c001b31b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x221>
c001b310:	47                   	inc    edi
c001b311:	39 74 24 04          	cmp    DWORD PTR [esp+0x4],esi
c001b315:	75 19                	jne    c001b330 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x236>
c001b317:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c001b31b:	31 c0                	xor    eax,eax
c001b31d:	83 7c 24 10 0a       	cmp    DWORD PTR [esp+0x10],0xa
c001b322:	0f 94 c0             	sete   al
c001b325:	01 c6                	add    esi,eax
c001b327:	80 7c 24 0a 56       	cmp    BYTE PTR [esp+0xa],0x56
c001b32c:	75 0b                	jne    c001b339 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x23f>
c001b32e:	eb 14                	jmp    c001b344 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x24a>
c001b330:	46                   	inc    esi
c001b331:	88 57 ff             	mov    BYTE PTR [edi-0x1],dl
c001b334:	c6 07 00             	mov    BYTE PTR [edi],0x0
c001b337:	eb ca                	jmp    c001b303 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x209>
c001b339:	66 3b 4c 24 14       	cmp    cx,WORD PTR [esp+0x14]
c001b33e:	0f 85 dd fe ff ff    	jne    c001b221 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b344:	80 7c 24 0b 58       	cmp    BYTE PTR [esp+0xb],0x58
c001b349:	74 10                	je     c001b35b <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x261>
c001b34b:	66 8b 7c 24 16       	mov    di,WORD PTR [esp+0x16]
c001b350:	66 39 7c 24 0c       	cmp    WORD PTR [esp+0xc],di
c001b355:	0f 85 c6 fe ff ff    	jne    c001b221 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b35b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b35f:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001b363:	83 e8 30             	sub    eax,0x30
c001b366:	83 ef 30             	sub    edi,0x30
c001b369:	c1 e0 04             	shl    eax,0x4
c001b36c:	09 f8                	or     eax,edi
c001b36e:	0f b6 c0             	movzx  eax,al
c001b371:	39 44 24 28          	cmp    DWORD PTR [esp+0x28],eax
c001b375:	0f 85 a6 fe ff ff    	jne    c001b221 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b37b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001b37f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c001b383:	83 e8 30             	sub    eax,0x30
c001b386:	83 ef 30             	sub    edi,0x30
c001b389:	c1 e0 04             	shl    eax,0x4
c001b38c:	09 f8                	or     eax,edi
c001b38e:	0f b6 c0             	movzx  eax,al
c001b391:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c001b395:	0f 85 86 fe ff ff    	jne    c001b221 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x127>
c001b39b:	50                   	push   eax
c001b39c:	50                   	push   eax
c001b39d:	8d 44 24 48          	lea    eax,[esp+0x48]
c001b3a1:	50                   	push   eax
c001b3a2:	55                   	push   ebp
c001b3a3:	e8 98 52 fe ff       	call   c0000640 <strcpy>
c001b3a8:	83 c4 10             	add    esp,0x10
c001b3ab:	eb 06                	jmp    c001b3b3 <PCI::pciDetailsToFilepath(PCIDeviceInfo, char*)+0x2b9>
c001b3ad:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c001b3b1:	31 ed                	xor    ebp,ebp
c001b3b3:	81 c4 4c 01 00 00    	add    esp,0x14c
c001b3b9:	89 e8                	mov    eax,ebp
c001b3bb:	5b                   	pop    ebx
c001b3bc:	5e                   	pop    esi
c001b3bd:	5f                   	pop    edi
c001b3be:	5d                   	pop    ebp
c001b3bf:	c3                   	ret    

c001b3c0 <PCI::checkBus(unsigned char)>:
c001b3c0:	56                   	push   esi
c001b3c1:	53                   	push   ebx
c001b3c2:	31 db                	xor    ebx,ebx
c001b3c4:	51                   	push   ecx
c001b3c5:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001b3ca:	52                   	push   edx
c001b3cb:	53                   	push   ebx
c001b3cc:	43                   	inc    ebx
c001b3cd:	56                   	push   esi
c001b3ce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b3d2:	e8 03 03 00 00       	call   c001b6da <PCI::checkDevice(unsigned char, unsigned char)>
c001b3d7:	83 c4 10             	add    esp,0x10
c001b3da:	83 fb 20             	cmp    ebx,0x20
c001b3dd:	75 eb                	jne    c001b3ca <PCI::checkBus(unsigned char)+0xa>
c001b3df:	58                   	pop    eax
c001b3e0:	5b                   	pop    ebx
c001b3e1:	5e                   	pop    esi
c001b3e2:	c3                   	ret    
c001b3e3:	90                   	nop

c001b3e4 <PCI::foundDevice(PCIDeviceInfo)>:
c001b3e4:	55                   	push   ebp
c001b3e5:	57                   	push   edi
c001b3e6:	56                   	push   esi
c001b3e7:	53                   	push   ebx
c001b3e8:	83 ec 1c             	sub    esp,0x1c
c001b3eb:	0f b7 44 24 36       	movzx  eax,WORD PTR [esp+0x36]
c001b3f0:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001b3f4:	3d ff ff 00 00       	cmp    eax,0xffff
c001b3f9:	0f 84 57 01 00 00    	je     c001b556 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b3ff:	0f b7 44 24 34       	movzx  eax,WORD PTR [esp+0x34]
c001b404:	66 3d 06 04          	cmp    ax,0x406
c001b408:	75 2c                	jne    c001b436 <PCI::foundDevice(PCIDeviceInfo)+0x52>
c001b40a:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c001b40f:	50                   	push   eax
c001b410:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c001b415:	50                   	push   eax
c001b416:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c001b41b:	50                   	push   eax
c001b41c:	53                   	push   ebx
c001b41d:	e8 64 fb ff ff       	call   c001af86 <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c001b422:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c001b426:	0f b6 c0             	movzx  eax,al
c001b429:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001b42d:	83 c4 2c             	add    esp,0x2c
c001b430:	5b                   	pop    ebx
c001b431:	5e                   	pop    esi
c001b432:	5f                   	pop    edi
c001b433:	5d                   	pop    ebp
c001b434:	eb 8a                	jmp    c001b3c0 <PCI::checkBus(unsigned char)>
c001b436:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001b43a:	8b 93 cc 00 00 00    	mov    edx,DWORD PTR [ebx+0xcc]
c001b440:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001b444:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001b448:	0f b6 7c 24 54       	movzx  edi,BYTE PTR [esp+0x54]
c001b44d:	85 d2                	test   edx,edx
c001b44f:	74 36                	je     c001b487 <PCI::foundDevice(PCIDeviceInfo)+0xa3>
c001b451:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001b454:	85 c9                	test   ecx,ecx
c001b456:	74 2b                	je     c001b483 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b458:	8b b1 18 01 00 00    	mov    esi,DWORD PTR [ecx+0x118]
c001b45e:	31 ee                	xor    esi,ebp
c001b460:	81 e6 ff 00 ff ff    	and    esi,0xffff00ff
c001b466:	75 1b                	jne    c001b483 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b468:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c001b46c:	39 b1 20 01 00 00    	cmp    DWORD PTR [ecx+0x120],esi
c001b472:	75 0f                	jne    c001b483 <PCI::foundDevice(PCIDeviceInfo)+0x9f>
c001b474:	0f b6 89 38 01 00 00 	movzx  ecx,BYTE PTR [ecx+0x138]
c001b47b:	39 f9                	cmp    ecx,edi
c001b47d:	0f 84 d3 00 00 00    	je     c001b556 <PCI::foundDevice(PCIDeviceInfo)+0x172>
c001b483:	8b 12                	mov    edx,DWORD PTR [edx]
c001b485:	eb c6                	jmp    c001b44d <PCI::foundDevice(PCIDeviceInfo)+0x69>
c001b487:	3d 01 06 00 00       	cmp    eax,0x601
c001b48c:	75 19                	jne    c001b4a7 <PCI::foundDevice(PCIDeviceInfo)+0xc3>
c001b48e:	83 ec 0c             	sub    esp,0xc
c001b491:	68 64 01 00 00       	push   0x164
c001b496:	e8 1b c6 fe ff       	call   c0007ab6 <malloc>
c001b49b:	89 c5                	mov    ebp,eax
c001b49d:	89 04 24             	mov    DWORD PTR [esp],eax
c001b4a0:	e8 a1 0e 00 00       	call   c001c346 <SATABus::SATABus()>
c001b4a5:	eb 1e                	jmp    c001b4c5 <PCI::foundDevice(PCIDeviceInfo)+0xe1>
c001b4a7:	3d 01 01 00 00       	cmp    eax,0x101
c001b4ac:	75 62                	jne    c001b510 <PCI::foundDevice(PCIDeviceInfo)+0x12c>
c001b4ae:	83 ec 0c             	sub    esp,0xc
c001b4b1:	68 70 02 00 00       	push   0x270
c001b4b6:	e8 fb c5 fe ff       	call   c0007ab6 <malloc>
c001b4bb:	89 c5                	mov    ebp,eax
c001b4bd:	89 04 24             	mov    DWORD PTR [esp],eax
c001b4c0:	e8 e5 02 00 00       	call   c001b7aa <IDE::IDE()>
c001b4c5:	5f                   	pop    edi
c001b4c6:	58                   	pop    eax
c001b4c7:	55                   	push   ebp
c001b4c8:	53                   	push   ebx
c001b4c9:	e8 7c 11 ff ff       	call   c000c64a <Device::addChild(Device*)>
c001b4ce:	83 ec 1c             	sub    esp,0x1c
c001b4d1:	b9 09 00 00 00       	mov    ecx,0x9
c001b4d6:	fc                   	cld    
c001b4d7:	89 e7                	mov    edi,esp
c001b4d9:	8d 74 24 60          	lea    esi,[esp+0x60]
c001b4dd:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b4df:	55                   	push   ebp
c001b4e0:	e8 ab 10 ff ff       	call   c000c590 <Device::preOpenPCI(PCIDeviceInfo)>
c001b4e5:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001b4e8:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c001b4ec:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c001b4f4:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c001b4fc:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c001b504:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001b507:	83 c4 4c             	add    esp,0x4c
c001b50a:	5b                   	pop    ebx
c001b50b:	5e                   	pop    esi
c001b50c:	5f                   	pop    edi
c001b50d:	5d                   	pop    ebp
c001b50e:	ff e0                	jmp    eax
c001b510:	83 ec 0c             	sub    esp,0xc
c001b513:	68 58 01 00 00       	push   0x158
c001b518:	e8 99 c5 fe ff       	call   c0007ab6 <malloc>
c001b51d:	89 c5                	mov    ebp,eax
c001b51f:	58                   	pop    eax
c001b520:	5a                   	pop    edx
c001b521:	68 0a 2b 02 c0       	push   0xc0022b0a
c001b526:	55                   	push   ebp
c001b527:	e8 bc 13 ff ff       	call   c000c8e8 <DriverlessDevice::DriverlessDevice(char const*)>
c001b52c:	59                   	pop    ecx
c001b52d:	5e                   	pop    esi
c001b52e:	55                   	push   ebp
c001b52f:	53                   	push   ebx
c001b530:	e8 15 11 ff ff       	call   c000c64a <Device::addChild(Device*)>
c001b535:	83 c4 10             	add    esp,0x10
c001b538:	b9 09 00 00 00       	mov    ecx,0x9
c001b53d:	fc                   	cld    
c001b53e:	8d 7c 24 34          	lea    edi,[esp+0x34]
c001b542:	89 fe                	mov    esi,edi
c001b544:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b546:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c001b54a:	83 c4 1c             	add    esp,0x1c
c001b54d:	5b                   	pop    ebx
c001b54e:	5e                   	pop    esi
c001b54f:	5f                   	pop    edi
c001b550:	5d                   	pop    ebp
c001b551:	e9 3a 10 ff ff       	jmp    c000c590 <Device::preOpenPCI(PCIDeviceInfo)>
c001b556:	83 c4 1c             	add    esp,0x1c
c001b559:	5b                   	pop    ebx
c001b55a:	5e                   	pop    esi
c001b55b:	5f                   	pop    edi
c001b55c:	5d                   	pop    ebp
c001b55d:	c3                   	ret    

c001b55e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c001b55e:	55                   	push   ebp
c001b55f:	57                   	push   edi
c001b560:	56                   	push   esi
c001b561:	53                   	push   ebx
c001b562:	83 ec 68             	sub    esp,0x68
c001b565:	8b 6c 24 7c          	mov    ebp,DWORD PTR [esp+0x7c]
c001b569:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c001b570:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001b574:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c001b57b:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c001b580:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b584:	8b 84 24 88 00 00 00 	mov    eax,DWORD PTR [esp+0x88]
c001b58b:	0f b6 5c 24 24       	movzx  ebx,BYTE PTR [esp+0x24]
c001b590:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001b594:	0f b6 7c 24 28       	movzx  edi,BYTE PTR [esp+0x28]
c001b599:	6a 0c                	push   0xc
c001b59b:	57                   	push   edi
c001b59c:	53                   	push   ebx
c001b59d:	56                   	push   esi
c001b59e:	55                   	push   ebp
c001b59f:	e8 32 f8 ff ff       	call   c001add6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5a4:	83 c4 20             	add    esp,0x20
c001b5a7:	57                   	push   edi
c001b5a8:	53                   	push   ebx
c001b5a9:	56                   	push   esi
c001b5aa:	55                   	push   ebp
c001b5ab:	e8 1c f9 ff ff       	call   c001aecc <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c001b5b0:	66 89 44 24 1c       	mov    WORD PTR [esp+0x1c],ax
c001b5b5:	57                   	push   edi
c001b5b6:	53                   	push   ebx
c001b5b7:	56                   	push   esi
c001b5b8:	55                   	push   ebp
c001b5b9:	e8 a4 f9 ff ff       	call   c001af62 <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c001b5be:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001b5c2:	83 c4 14             	add    esp,0x14
c001b5c5:	6a 3c                	push   0x3c
c001b5c7:	57                   	push   edi
c001b5c8:	53                   	push   ebx
c001b5c9:	56                   	push   esi
c001b5ca:	55                   	push   ebp
c001b5cb:	e8 06 f8 ff ff       	call   c001add6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b5d0:	0f b6 c4             	movzx  eax,ah
c001b5d3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001b5d7:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c001b5db:	88 44 24 6d          	mov    BYTE PTR [esp+0x6d],al
c001b5df:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001b5e4:	8b 90 68 01 00 00    	mov    edx,DWORD PTR [eax+0x168]
c001b5ea:	8b 82 5c 11 00 00    	mov    eax,DWORD PTR [edx+0x115c]
c001b5f0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001b5f4:	83 c4 20             	add    esp,0x20
c001b5f7:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c001b5fc:	74 30                	je     c001b62e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b5fe:	31 c0                	xor    eax,eax
c001b600:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001b604:	7e 28                	jle    c001b62e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd0>
c001b606:	0f b7 8c c2 5c 01 00 00 	movzx  ecx,WORD PTR [edx+eax*8+0x15c]
c001b60e:	39 cb                	cmp    ebx,ecx
c001b610:	75 19                	jne    c001b62b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b612:	0f b6 8c c2 5e 01 00 00 	movzx  ecx,BYTE PTR [edx+eax*8+0x15e]
c001b61a:	3b 4c 24 10          	cmp    ecx,DWORD PTR [esp+0x10]
c001b61e:	75 0b                	jne    c001b62b <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xcd>
c001b620:	8a 8c c2 5f 01 00 00 	mov    cl,BYTE PTR [edx+eax*8+0x15f]
c001b627:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c001b62b:	40                   	inc    eax
c001b62c:	eb d2                	jmp    c001b600 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xa2>
c001b62e:	31 d2                	xor    edx,edx
c001b630:	83 ec 0c             	sub    esp,0xc
c001b633:	57                   	push   edi
c001b634:	53                   	push   ebx
c001b635:	56                   	push   esi
c001b636:	52                   	push   edx
c001b637:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c001b63b:	55                   	push   ebp
c001b63c:	e8 6d f9 ff ff       	call   c001afae <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b641:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001b645:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c001b649:	42                   	inc    edx
c001b64a:	83 c4 20             	add    esp,0x20
c001b64d:	83 fa 06             	cmp    edx,0x6
c001b650:	75 de                	jne    c001b630 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0xd2>
c001b652:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b656:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001b65a:	c1 e2 08             	shl    edx,0x8
c001b65d:	83 ec 0c             	sub    esp,0xc
c001b660:	0f b6 c4             	movzx  eax,ah
c001b663:	09 d0                	or     eax,edx
c001b665:	66 89 44 24 38       	mov    WORD PTR [esp+0x38],ax
c001b66a:	6a 02                	push   0x2
c001b66c:	57                   	push   edi
c001b66d:	53                   	push   ebx
c001b66e:	56                   	push   esi
c001b66f:	55                   	push   ebp
c001b670:	e8 61 f7 ff ff       	call   c001add6 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c001b675:	66 89 44 24 6e       	mov    WORD PTR [esp+0x6e],ax
c001b67a:	83 c4 20             	add    esp,0x20
c001b67d:	57                   	push   edi
c001b67e:	53                   	push   ebx
c001b67f:	56                   	push   esi
c001b680:	55                   	push   ebp
c001b681:	e8 90 f8 ff ff       	call   c001af16 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c001b686:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c001b68a:	57                   	push   edi
c001b68b:	53                   	push   ebx
c001b68c:	56                   	push   esi
c001b68d:	55                   	push   ebp
c001b68e:	e8 ed f7 ff ff       	call   c001ae80 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b693:	b9 09 00 00 00       	mov    ecx,0x9
c001b698:	66 89 44 24 4e       	mov    WORD PTR [esp+0x4e],ax
c001b69d:	8a 44 24 2b          	mov    al,BYTE PTR [esp+0x2b]
c001b6a1:	88 44 24 6c          	mov    BYTE PTR [esp+0x6c],al
c001b6a5:	8a 44 24 34          	mov    al,BYTE PTR [esp+0x34]
c001b6a9:	88 44 24 50          	mov    BYTE PTR [esp+0x50],al
c001b6ad:	8a 44 24 38          	mov    al,BYTE PTR [esp+0x38]
c001b6b1:	88 44 24 51          	mov    BYTE PTR [esp+0x51],al
c001b6b5:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c001b6b9:	88 44 24 52          	mov    BYTE PTR [esp+0x52],al
c001b6bd:	83 ec 0c             	sub    esp,0xc
c001b6c0:	fc                   	cld    
c001b6c1:	89 e7                	mov    edi,esp
c001b6c3:	8d 74 24 58          	lea    esi,[esp+0x58]
c001b6c7:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b6c9:	55                   	push   ebp
c001b6ca:	e8 15 fd ff ff       	call   c001b3e4 <PCI::foundDevice(PCIDeviceInfo)>
c001b6cf:	81 c4 8c 00 00 00    	add    esp,0x8c
c001b6d5:	5b                   	pop    ebx
c001b6d6:	5e                   	pop    esi
c001b6d7:	5f                   	pop    edi
c001b6d8:	5d                   	pop    ebp
c001b6d9:	c3                   	ret    

c001b6da <PCI::checkDevice(unsigned char, unsigned char)>:
c001b6da:	55                   	push   ebp
c001b6db:	57                   	push   edi
c001b6dc:	56                   	push   esi
c001b6dd:	53                   	push   ebx
c001b6de:	83 ec 0c             	sub    esp,0xc
c001b6e1:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c001b6e5:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c001b6ea:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c001b6ef:	6a 00                	push   0x0
c001b6f1:	56                   	push   esi
c001b6f2:	57                   	push   edi
c001b6f3:	55                   	push   ebp
c001b6f4:	e8 87 f7 ff ff       	call   c001ae80 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b6f9:	6a 00                	push   0x0
c001b6fb:	56                   	push   esi
c001b6fc:	57                   	push   edi
c001b6fd:	55                   	push   ebp
c001b6fe:	e8 5b fe ff ff       	call   c001b55e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b703:	83 c4 20             	add    esp,0x20
c001b706:	6a 00                	push   0x0
c001b708:	56                   	push   esi
c001b709:	57                   	push   edi
c001b70a:	55                   	push   ebp
c001b70b:	e8 94 f7 ff ff       	call   c001aea4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b710:	83 c4 10             	add    esp,0x10
c001b713:	a8 80                	test   al,0x80
c001b715:	74 2d                	je     c001b744 <PCI::checkDevice(unsigned char, unsigned char)+0x6a>
c001b717:	bb 01 00 00 00       	mov    ebx,0x1
c001b71c:	53                   	push   ebx
c001b71d:	56                   	push   esi
c001b71e:	57                   	push   edi
c001b71f:	55                   	push   ebp
c001b720:	e8 5b f7 ff ff       	call   c001ae80 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b725:	83 c4 10             	add    esp,0x10
c001b728:	0f b7 c0             	movzx  eax,ax
c001b72b:	3d ff ff 00 00       	cmp    eax,0xffff
c001b730:	74 0c                	je     c001b73e <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c001b732:	53                   	push   ebx
c001b733:	56                   	push   esi
c001b734:	57                   	push   edi
c001b735:	55                   	push   ebp
c001b736:	e8 23 fe ff ff       	call   c001b55e <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c001b73b:	83 c4 10             	add    esp,0x10
c001b73e:	43                   	inc    ebx
c001b73f:	83 fb 08             	cmp    ebx,0x8
c001b742:	75 d8                	jne    c001b71c <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c001b744:	83 c4 0c             	add    esp,0xc
c001b747:	5b                   	pop    ebx
c001b748:	5e                   	pop    esi
c001b749:	5f                   	pop    edi
c001b74a:	5d                   	pop    ebp
c001b74b:	c3                   	ret    

c001b74c <PCI::detect()>:
c001b74c:	56                   	push   esi
c001b74d:	53                   	push   ebx
c001b74e:	53                   	push   ebx
c001b74f:	31 db                	xor    ebx,ebx
c001b751:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b755:	6a 00                	push   0x0
c001b757:	6a 00                	push   0x0
c001b759:	6a 00                	push   0x0
c001b75b:	56                   	push   esi
c001b75c:	e8 43 f7 ff ff       	call   c001aea4 <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c001b761:	83 c4 10             	add    esp,0x10
c001b764:	a8 80                	test   al,0x80
c001b766:	75 21                	jne    c001b789 <PCI::detect()+0x3d>
c001b768:	51                   	push   ecx
c001b769:	51                   	push   ecx
c001b76a:	6a 00                	push   0x0
c001b76c:	56                   	push   esi
c001b76d:	e8 4e fc ff ff       	call   c001b3c0 <PCI::checkBus(unsigned char)>
c001b772:	83 c4 10             	add    esp,0x10
c001b775:	eb 2a                	jmp    c001b7a1 <PCI::detect()+0x55>
c001b777:	52                   	push   edx
c001b778:	52                   	push   edx
c001b779:	53                   	push   ebx
c001b77a:	43                   	inc    ebx
c001b77b:	56                   	push   esi
c001b77c:	e8 3f fc ff ff       	call   c001b3c0 <PCI::checkBus(unsigned char)>
c001b781:	83 c4 10             	add    esp,0x10
c001b784:	83 fb 08             	cmp    ebx,0x8
c001b787:	74 18                	je     c001b7a1 <PCI::detect()+0x55>
c001b789:	53                   	push   ebx
c001b78a:	6a 00                	push   0x0
c001b78c:	6a 00                	push   0x0
c001b78e:	56                   	push   esi
c001b78f:	e8 ec f6 ff ff       	call   c001ae80 <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c001b794:	83 c4 10             	add    esp,0x10
c001b797:	0f b7 c0             	movzx  eax,ax
c001b79a:	3d ff ff 00 00       	cmp    eax,0xffff
c001b79f:	74 d6                	je     c001b777 <PCI::detect()+0x2b>
c001b7a1:	58                   	pop    eax
c001b7a2:	5b                   	pop    ebx
c001b7a3:	5e                   	pop    esi
c001b7a4:	c3                   	ret    
c001b7a5:	90                   	nop

c001b7a6 <IDE::close(int, int, void*)>:
c001b7a6:	83 c8 ff             	or     eax,0xffffffff
c001b7a9:	c3                   	ret    

c001b7aa <IDE::IDE()>:
c001b7aa:	83 ec 0c             	sub    esp,0xc
c001b7ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7b1:	83 ec 08             	sub    esp,0x8
c001b7b4:	68 50 2b 02 c0       	push   0xc0022b50
c001b7b9:	50                   	push   eax
c001b7ba:	e8 cd 11 ff ff       	call   c000c98c <HardDiskController::HardDiskController(char const*)>
c001b7bf:	83 c4 10             	add    esp,0x10
c001b7c2:	ba e0 2b 02 c0       	mov    edx,0xc0022be0
c001b7c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7cb:	89 10                	mov    DWORD PTR [eax],edx
c001b7cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b7d1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c001b7d8:	90                   	nop
c001b7d9:	83 c4 0c             	add    esp,0xc
c001b7dc:	c3                   	ret    
c001b7dd:	90                   	nop

c001b7de <IDE::prepareInterrupt(unsigned char)>:
c001b7de:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001b7e3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001b7e7:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c001b7ef:	c3                   	ret    

c001b7f0 <selectDrive(unsigned char, unsigned char)>:
c001b7f0:	c3                   	ret    
c001b7f1:	90                   	nop

c001b7f2 <IDE::getBase(unsigned char)>:
c001b7f2:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c001b7f7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001b7fb:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c001b803:	c3                   	ret    

c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c001b804:	55                   	push   ebp
c001b805:	57                   	push   edi
c001b806:	56                   	push   esi
c001b807:	53                   	push   ebx
c001b808:	83 ec 1c             	sub    esp,0x1c
c001b80b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b80f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b813:	8d 4b f8             	lea    ecx,[ebx-0x8]
c001b816:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b81a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001b81e:	80 f9 03             	cmp    cl,0x3
c001b821:	77 4f                	ja     c001b872 <IDE::write(unsigned char, unsigned char, unsigned char)+0x6e>
c001b823:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001b827:	0f b6 fa             	movzx  edi,dl
c001b82a:	0f b6 db             	movzx  ebx,bl
c001b82d:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b830:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b835:	80 ca 80             	or     dl,0x80
c001b838:	52                   	push   edx
c001b839:	6a 0c                	push   0xc
c001b83b:	57                   	push   edi
c001b83c:	56                   	push   esi
c001b83d:	e8 c2 ff ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b842:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c001b847:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b84b:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c001b84f:	ee                   	out    dx,al
c001b850:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b855:	89 7c 24 44          	mov    DWORD PTR [esp+0x44],edi
c001b859:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001b85d:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001b861:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001b869:	83 c4 2c             	add    esp,0x2c
c001b86c:	5b                   	pop    ebx
c001b86d:	5e                   	pop    esi
c001b86e:	5f                   	pop    edi
c001b86f:	5d                   	pop    ebp
c001b870:	eb 92                	jmp    c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b872:	0f b6 cb             	movzx  ecx,bl
c001b875:	83 f9 07             	cmp    ecx,0x7
c001b878:	77 12                	ja     c001b88c <IDE::write(unsigned char, unsigned char, unsigned char)+0x88>
c001b87a:	0f b6 d2             	movzx  edx,dl
c001b87d:	0f b6 db             	movzx  ebx,bl
c001b880:	66 8b 94 d6 5a 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15a]
c001b888:	01 da                	add    edx,ebx
c001b88a:	eb 2f                	jmp    c001b8bb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b88c:	83 f9 0d             	cmp    ecx,0xd
c001b88f:	77 13                	ja     c001b8a4 <IDE::write(unsigned char, unsigned char, unsigned char)+0xa0>
c001b891:	0f b6 d2             	movzx  edx,dl
c001b894:	0f b6 db             	movzx  ebx,bl
c001b897:	8b 94 d6 5c 01 00 00 	mov    edx,DWORD PTR [esi+edx*8+0x15c]
c001b89e:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c001b8a2:	eb 17                	jmp    c001b8bb <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c001b8a4:	83 f9 15             	cmp    ecx,0x15
c001b8a7:	77 13                	ja     c001b8bc <IDE::write(unsigned char, unsigned char, unsigned char)+0xb8>
c001b8a9:	0f b6 d2             	movzx  edx,dl
c001b8ac:	0f b6 db             	movzx  ebx,bl
c001b8af:	66 8b 94 d6 5e 01 00 00 	mov    dx,WORD PTR [esi+edx*8+0x15e]
c001b8b7:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c001b8bb:	ee                   	out    dx,al
c001b8bc:	83 c4 1c             	add    esp,0x1c
c001b8bf:	5b                   	pop    ebx
c001b8c0:	5e                   	pop    esi
c001b8c1:	5f                   	pop    edi
c001b8c2:	5d                   	pop    ebp
c001b8c3:	c3                   	ret    

c001b8c4 <IDE::read(unsigned char, unsigned char)>:
c001b8c4:	55                   	push   ebp
c001b8c5:	57                   	push   edi
c001b8c6:	56                   	push   esi
c001b8c7:	53                   	push   ebx
c001b8c8:	83 ec 1c             	sub    esp,0x1c
c001b8cb:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001b8cf:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001b8d3:	8d 43 f8             	lea    eax,[ebx-0x8]
c001b8d6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001b8da:	3c 03                	cmp    al,0x3
c001b8dc:	77 40                	ja     c001b91e <IDE::read(unsigned char, unsigned char)+0x5a>
c001b8de:	0f b6 f9             	movzx  edi,cl
c001b8e1:	8d 6f 2a             	lea    ebp,[edi+0x2a]
c001b8e4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001b8e9:	0c 80                	or     al,0x80
c001b8eb:	50                   	push   eax
c001b8ec:	6a 0c                	push   0xc
c001b8ee:	57                   	push   edi
c001b8ef:	56                   	push   esi
c001b8f0:	e8 0f ff ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b8f5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001b8fa:	0f b6 d3             	movzx  edx,bl
c001b8fd:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001b901:	ec                   	in     al,dx
c001b902:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b906:	0f b6 54 ee 10       	movzx  edx,BYTE PTR [esi+ebp*8+0x10]
c001b90b:	52                   	push   edx
c001b90c:	6a 0c                	push   0xc
c001b90e:	57                   	push   edi
c001b90f:	56                   	push   esi
c001b910:	e8 ef fe ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001b915:	83 c4 20             	add    esp,0x20
c001b918:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b91c:	eb 4c                	jmp    c001b96a <IDE::read(unsigned char, unsigned char)+0xa6>
c001b91e:	0f b6 d3             	movzx  edx,bl
c001b921:	83 fa 07             	cmp    edx,0x7
c001b924:	77 12                	ja     c001b938 <IDE::read(unsigned char, unsigned char)+0x74>
c001b926:	0f b6 c9             	movzx  ecx,cl
c001b929:	0f b6 d3             	movzx  edx,bl
c001b92c:	66 8b 84 ce 5a 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15a]
c001b934:	01 c2                	add    edx,eax
c001b936:	eb 31                	jmp    c001b969 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b938:	83 fa 0d             	cmp    edx,0xd
c001b93b:	77 13                	ja     c001b950 <IDE::read(unsigned char, unsigned char)+0x8c>
c001b93d:	0f b6 c9             	movzx  ecx,cl
c001b940:	0f b6 d3             	movzx  edx,bl
c001b943:	8b 84 ce 5c 01 00 00 	mov    eax,DWORD PTR [esi+ecx*8+0x15c]
c001b94a:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001b94e:	eb 19                	jmp    c001b969 <IDE::read(unsigned char, unsigned char)+0xa5>
c001b950:	31 c0                	xor    eax,eax
c001b952:	83 fa 15             	cmp    edx,0x15
c001b955:	77 13                	ja     c001b96a <IDE::read(unsigned char, unsigned char)+0xa6>
c001b957:	0f b6 c9             	movzx  ecx,cl
c001b95a:	0f b6 d3             	movzx  edx,bl
c001b95d:	66 8b 84 ce 5e 01 00 00 	mov    ax,WORD PTR [esi+ecx*8+0x15e]
c001b965:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001b969:	ec                   	in     al,dx
c001b96a:	83 c4 1c             	add    esp,0x1c
c001b96d:	5b                   	pop    ebx
c001b96e:	5e                   	pop    esi
c001b96f:	5f                   	pop    edi
c001b970:	5d                   	pop    ebp
c001b971:	c3                   	ret    

c001b972 <IDE::waitInterrupt(unsigned char)>:
c001b972:	55                   	push   ebp
c001b973:	57                   	push   edi
c001b974:	56                   	push   esi
c001b975:	53                   	push   ebx
c001b976:	31 db                	xor    ebx,ebx
c001b978:	83 ec 0c             	sub    esp,0xc
c001b97b:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c001b97f:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c001b984:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c001b98c:	89 e8                	mov    eax,ebp
c001b98e:	84 c0                	test   al,al
c001b990:	75 30                	jne    c001b9c2 <IDE::waitInterrupt(unsigned char)+0x50>
c001b992:	50                   	push   eax
c001b993:	6a 0c                	push   0xc
c001b995:	56                   	push   esi
c001b996:	57                   	push   edi
c001b997:	e8 28 ff ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001b99c:	83 c4 10             	add    esp,0x10
c001b99f:	a8 01                	test   al,0x1
c001b9a1:	75 27                	jne    c001b9ca <IDE::waitInterrupt(unsigned char)+0x58>
c001b9a3:	f6 c3 04             	test   bl,0x4
c001b9a6:	75 12                	jne    c001b9ba <IDE::waitInterrupt(unsigned char)+0x48>
c001b9a8:	83 fb 32             	cmp    ebx,0x32
c001b9ab:	7e 0d                	jle    c001b9ba <IDE::waitInterrupt(unsigned char)+0x48>
c001b9ad:	83 ec 0c             	sub    esp,0xc
c001b9b0:	6a 64                	push   0x64
c001b9b2:	e8 b1 a4 ff ff       	call   c0015e68 <milliTenthSleep(unsigned int)>
c001b9b7:	83 c4 10             	add    esp,0x10
c001b9ba:	83 fb 3c             	cmp    ebx,0x3c
c001b9bd:	74 0b                	je     c001b9ca <IDE::waitInterrupt(unsigned char)+0x58>
c001b9bf:	43                   	inc    ebx
c001b9c0:	eb c2                	jmp    c001b984 <IDE::waitInterrupt(unsigned char)+0x12>
c001b9c2:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c001b9ca:	83 c4 0c             	add    esp,0xc
c001b9cd:	89 e8                	mov    eax,ebp
c001b9cf:	5b                   	pop    ebx
c001b9d0:	5e                   	pop    esi
c001b9d1:	5f                   	pop    edi
c001b9d2:	5d                   	pop    ebp
c001b9d3:	c3                   	ret    

c001b9d4 <ideChannel0IRQHandler(regs*, void*)>:
c001b9d4:	83 ec 10             	sub    esp,0x10
c001b9d7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9db:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c001b9e2:	6a 07                	push   0x7
c001b9e4:	6a 00                	push   0x0
c001b9e6:	50                   	push   eax
c001b9e7:	e8 d8 fe ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001b9ec:	83 c4 1c             	add    esp,0x1c
c001b9ef:	c3                   	ret    

c001b9f0 <ideChannel1IRQHandler(regs*, void*)>:
c001b9f0:	83 ec 10             	sub    esp,0x10
c001b9f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b9f7:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c001b9fe:	6a 07                	push   0x7
c001ba00:	6a 01                	push   0x1
c001ba02:	50                   	push   eax
c001ba03:	e8 bc fe ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001ba08:	83 c4 1c             	add    esp,0x1c
c001ba0b:	c3                   	ret    

c001ba0c <IDE::enableIRQs(unsigned char, bool)>:
c001ba0c:	57                   	push   edi
c001ba0d:	b8 02 00 00 00       	mov    eax,0x2
c001ba12:	56                   	push   esi
c001ba13:	53                   	push   ebx
c001ba14:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ba18:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ba1c:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c001ba21:	74 02                	je     c001ba25 <IDE::enableIRQs(unsigned char, bool)+0x19>
c001ba23:	31 c0                	xor    eax,eax
c001ba25:	0f b6 db             	movzx  ebx,bl
c001ba28:	bf 04 00 00 00       	mov    edi,0x4
c001ba2d:	88 84 de 60 01 00 00 	mov    BYTE PTR [esi+ebx*8+0x160],al
c001ba34:	50                   	push   eax
c001ba35:	6a 0c                	push   0xc
c001ba37:	53                   	push   ebx
c001ba38:	56                   	push   esi
c001ba39:	e8 c6 fd ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001ba3e:	83 c4 10             	add    esp,0x10
c001ba41:	50                   	push   eax
c001ba42:	6a 0c                	push   0xc
c001ba44:	53                   	push   ebx
c001ba45:	56                   	push   esi
c001ba46:	e8 79 fe ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001ba4b:	83 c4 10             	add    esp,0x10
c001ba4e:	4f                   	dec    edi
c001ba4f:	75 f0                	jne    c001ba41 <IDE::enableIRQs(unsigned char, bool)+0x35>
c001ba51:	5b                   	pop    ebx
c001ba52:	5e                   	pop    esi
c001ba53:	5f                   	pop    edi
c001ba54:	c3                   	ret    
c001ba55:	90                   	nop

c001ba56 <IDE::open(int, int, void*)>:
c001ba56:	55                   	push   ebp
c001ba57:	57                   	push   edi
c001ba58:	56                   	push   esi
c001ba59:	53                   	push   ebx
c001ba5a:	83 ec 1c             	sub    esp,0x1c
c001ba5d:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ba61:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c001ba6a:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c001ba73:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c001ba7a:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c001ba81:	0f 85 de 02 00 00    	jne    c001bd65 <IDE::open(int, int, void*)+0x30f>
c001ba87:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c001ba8d:	88 04 24             	mov    BYTE PTR [esp],al
c001ba90:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ba93:	83 e0 7f             	and    eax,0x7f
c001ba96:	83 f8 05             	cmp    eax,0x5
c001ba99:	74 05                	je     c001baa0 <IDE::open(int, int, void*)+0x4a>
c001ba9b:	83 f8 0f             	cmp    eax,0xf
c001ba9e:	75 32                	jne    c001bad2 <IDE::open(int, int, void*)+0x7c>
c001baa0:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c001baa6:	83 e0 fc             	and    eax,0xfffffffc
c001baa9:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bab0:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c001bab6:	83 e0 fc             	and    eax,0xfffffffc
c001bab9:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bac0:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c001bac6:	83 e0 fc             	and    eax,0xfffffffc
c001bac9:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bad0:	eb 14                	jmp    c001bae6 <IDE::open(int, int, void*)+0x90>
c001bad2:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c001badc:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c001bae6:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c001baed:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c001baf4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001baf8:	89 c6                	mov    esi,eax
c001bafa:	bf f8 0c 00 00       	mov    edi,0xcf8
c001baff:	c1 e6 10             	shl    esi,0x10
c001bb02:	89 e8                	mov    eax,ebp
c001bb04:	89 fa                	mov    edx,edi
c001bb06:	c1 e0 0b             	shl    eax,0xb
c001bb09:	09 f0                	or     eax,esi
c001bb0b:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c001bb12:	c1 e6 08             	shl    esi,0x8
c001bb15:	09 c6                	or     esi,eax
c001bb17:	89 f0                	mov    eax,esi
c001bb19:	0d 08 00 00 80       	or     eax,0x80000008
c001bb1e:	ef                   	out    dx,eax
c001bb1f:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c001bb24:	89 ca                	mov    edx,ecx
c001bb26:	ed                   	in     eax,dx
c001bb27:	c1 e8 10             	shr    eax,0x10
c001bb2a:	3d ff ff 00 00       	cmp    eax,0xffff
c001bb2f:	0f 84 f9 00 00 00    	je     c001bc2e <IDE::open(int, int, void*)+0x1d8>
c001bb35:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c001bb3b:	89 fa                	mov    edx,edi
c001bb3d:	89 f0                	mov    eax,esi
c001bb3f:	ef                   	out    dx,eax
c001bb40:	b0 fe                	mov    al,0xfe
c001bb42:	89 ca                	mov    edx,ecx
c001bb44:	ee                   	out    dx,al
c001bb45:	89 f0                	mov    eax,esi
c001bb47:	89 fa                	mov    edx,edi
c001bb49:	ef                   	out    dx,eax
c001bb4a:	89 ca                	mov    edx,ecx
c001bb4c:	ed                   	in     eax,dx
c001bb4d:	3c fe                	cmp    al,0xfe
c001bb4f:	0f 85 a9 00 00 00    	jne    c001bbfe <IDE::open(int, int, void*)+0x1a8>
c001bb55:	8b 15 b8 5e 02 c0    	mov    edx,DWORD PTR ds:0xc0025eb8
c001bb5b:	f6 82 6c 01 00 00 01 	test   BYTE PTR [edx+0x16c],0x1
c001bb62:	74 33                	je     c001bb97 <IDE::open(int, int, void*)+0x141>
c001bb64:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c001bb6a:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c001bb6e:	40                   	inc    eax
c001bb6f:	83 ec 0c             	sub    esp,0xc
c001bb72:	0f b6 c0             	movzx  eax,al
c001bb75:	50                   	push   eax
c001bb76:	55                   	push   ebp
c001bb77:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001bb7b:	ff b2 68 01 00 00    	push   DWORD PTR [edx+0x168]
c001bb81:	51                   	push   ecx
c001bb82:	e8 35 3a ff ff       	call   c000f5bc <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c001bb87:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c001bb8c:	83 c4 1c             	add    esp,0x1c
c001bb8f:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bb95:	eb 0a                	jmp    c001bba1 <IDE::open(int, int, void*)+0x14b>
c001bb97:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c001bba1:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c001bba8:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c001bbaf:	c1 e1 10             	shl    ecx,0x10
c001bbb2:	c1 e0 08             	shl    eax,0x8
c001bbb5:	bf f8 0c 00 00       	mov    edi,0xcf8
c001bbba:	09 c1                	or     ecx,eax
c001bbbc:	89 fa                	mov    edx,edi
c001bbbe:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c001bbc5:	c1 e0 0b             	shl    eax,0xb
c001bbc8:	09 c1                	or     ecx,eax
c001bbca:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c001bbd0:	89 c8                	mov    eax,ecx
c001bbd2:	ef                   	out    dx,eax
c001bbd3:	be fc 0c 00 00       	mov    esi,0xcfc
c001bbd8:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c001bbde:	89 f2                	mov    edx,esi
c001bbe0:	ee                   	out    dx,al
c001bbe1:	89 c8                	mov    eax,ecx
c001bbe3:	89 fa                	mov    edx,edi
c001bbe5:	ef                   	out    dx,eax
c001bbe6:	89 f2                	mov    edx,esi
c001bbe8:	ed                   	in     eax,dx
c001bbe9:	0f b6 c0             	movzx  eax,al
c001bbec:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c001bbf2:	74 4a                	je     c001bc3e <IDE::open(int, int, void*)+0x1e8>
c001bbf4:	83 ec 0c             	sub    esp,0xc
c001bbf7:	68 68 2b 02 c0       	push   0xc0022b68
c001bbfc:	eb 38                	jmp    c001bc36 <IDE::open(int, int, void*)+0x1e0>
c001bbfe:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c001bc07:	75 1b                	jne    c001bc24 <IDE::open(int, int, void*)+0x1ce>
c001bc09:	0f b6 04 24          	movzx  eax,BYTE PTR [esp]
c001bc0d:	3d 80 00 00 00       	cmp    eax,0x80
c001bc12:	74 07                	je     c001bc1b <IDE::open(int, int, void*)+0x1c5>
c001bc14:	3d 8a 00 00 00       	cmp    eax,0x8a
c001bc19:	75 09                	jne    c001bc24 <IDE::open(int, int, void*)+0x1ce>
c001bc1b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bc22:	eb 1a                	jmp    c001bc3e <IDE::open(int, int, void*)+0x1e8>
c001bc24:	83 ec 0c             	sub    esp,0xc
c001bc27:	68 70 2b 02 c0       	push   0xc0022b70
c001bc2c:	eb 08                	jmp    c001bc36 <IDE::open(int, int, void*)+0x1e0>
c001bc2e:	83 ec 0c             	sub    esp,0xc
c001bc31:	68 a1 2b 02 c0       	push   0xc0022ba1
c001bc36:	e8 3e 56 ff ff       	call   c0011279 <KePanic(char const*)>
c001bc3b:	83 c4 10             	add    esp,0x10
c001bc3e:	f6 83 1f 01 00 00 80 	test   BYTE PTR [ebx+0x11f],0x80
c001bc45:	74 1a                	je     c001bc61 <IDE::open(int, int, void*)+0x20b>
c001bc47:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c001bc4d:	83 e0 fc             	and    eax,0xfffffffc
c001bc50:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c001bc57:	83 c0 08             	add    eax,0x8
c001bc5a:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c001bc61:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c001bc67:	89 c2                	mov    edx,eax
c001bc69:	83 e2 0f             	and    edx,0xf
c001bc6c:	83 fa 08             	cmp    edx,0x8
c001bc6f:	75 0a                	jne    c001bc7b <IDE::open(int, int, void*)+0x225>
c001bc71:	83 e8 02             	sub    eax,0x2
c001bc74:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bc7b:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c001bc81:	89 c2                	mov    edx,eax
c001bc83:	83 e2 0f             	and    edx,0xf
c001bc86:	83 fa 08             	cmp    edx,0x8
c001bc89:	75 0a                	jne    c001bc95 <IDE::open(int, int, void*)+0x23f>
c001bc8b:	83 e8 02             	sub    eax,0x2
c001bc8e:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bc95:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c001bc9c:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c001bca3:	89 d0                	mov    eax,edx
c001bca5:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bca8:	8d 7a 01             	lea    edi,[edx+0x1]
c001bcab:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bcaf:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c001bcb3:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bcb7:	83 e1 3f             	and    ecx,0x3f
c001bcba:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bcbe:	89 f9                	mov    ecx,edi
c001bcc0:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c001bcc7:	0f b6 c9             	movzx  ecx,cl
c001bcca:	8d 78 02             	lea    edi,[eax+0x2]
c001bccd:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bcd0:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bcd4:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c001bcd8:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bcdc:	83 e2 3f             	and    edx,0x3f
c001bcdf:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bce3:	89 f9                	mov    ecx,edi
c001bce5:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c001bceb:	0f b6 d1             	movzx  edx,cl
c001bcee:	8d 78 03             	lea    edi,[eax+0x3]
c001bcf1:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bcf4:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bcf8:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c001bcfc:	8a 4c 93 07          	mov    cl,BYTE PTR [ebx+edx*4+0x7]
c001bd00:	83 e1 3f             	and    ecx,0x3f
c001bd03:	88 4c 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],cl
c001bd07:	89 f9                	mov    ecx,edi
c001bd09:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c001bd0f:	0f b6 c9             	movzx  ecx,cl
c001bd12:	8d 78 04             	lea    edi,[eax+0x4]
c001bd15:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c001bd18:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c001bd1c:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c001bd20:	89 fa                	mov    edx,edi
c001bd22:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c001bd28:	8a 54 8b 07          	mov    dl,BYTE PTR [ebx+ecx*4+0x7]
c001bd2c:	83 e2 3f             	and    edx,0x3f
c001bd2f:	88 54 8b 07          	mov    BYTE PTR [ebx+ecx*4+0x7],dl
c001bd33:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c001bd3a:	66 85 f6             	test   si,si
c001bd3d:	74 65                	je     c001bda4 <IDE::open(int, int, void*)+0x34e>
c001bd3f:	89 f9                	mov    ecx,edi
c001bd41:	83 c0 05             	add    eax,0x5
c001bd44:	0f b6 d1             	movzx  edx,cl
c001bd47:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c001bd4a:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c001bd4e:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c001bd52:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c001bd58:	8a 44 93 07          	mov    al,BYTE PTR [ebx+edx*4+0x7]
c001bd5c:	83 e0 3f             	and    eax,0x3f
c001bd5f:	88 44 93 07          	mov    BYTE PTR [ebx+edx*4+0x7],al
c001bd63:	eb 3f                	jmp    c001bda4 <IDE::open(int, int, void*)+0x34e>
c001bd65:	8b 83 18 01 00 00    	mov    eax,DWORD PTR [ebx+0x118]
c001bd6b:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c001bd72:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c001bd79:	05 06 02 00 00       	add    eax,0x206
c001bd7e:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c001bd85:	66 8b 83 1a 01 00 00 	mov    ax,WORD PTR [ebx+0x11a]
c001bd8c:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c001bd93:	05 06 02 00 00       	add    eax,0x206
c001bd98:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c001bd9f:	e9 bd fe ff ff       	jmp    c001bc61 <IDE::open(int, int, void*)+0x20b>
c001bda4:	50                   	push   eax
c001bda5:	50                   	push   eax
c001bda6:	6a 00                	push   0x0
c001bda8:	53                   	push   ebx
c001bda9:	e8 30 fa ff ff       	call   c001b7de <IDE::prepareInterrupt(unsigned char)>
c001bdae:	5a                   	pop    edx
c001bdaf:	59                   	pop    ecx
c001bdb0:	6a 01                	push   0x1
c001bdb2:	53                   	push   ebx
c001bdb3:	e8 26 fa ff ff       	call   c001b7de <IDE::prepareInterrupt(unsigned char)>
c001bdb8:	83 c4 0c             	add    esp,0xc
c001bdbb:	6a 00                	push   0x0
c001bdbd:	6a 00                	push   0x0
c001bdbf:	53                   	push   ebx
c001bdc0:	e8 47 fc ff ff       	call   c001ba0c <IDE::enableIRQs(unsigned char, bool)>
c001bdc5:	83 c4 0c             	add    esp,0xc
c001bdc8:	6a 00                	push   0x0
c001bdca:	6a 01                	push   0x1
c001bdcc:	53                   	push   ebx
c001bdcd:	e8 3a fc ff ff       	call   c001ba0c <IDE::enableIRQs(unsigned char, bool)>
c001bdd2:	83 c4 10             	add    esp,0x10
c001bdd5:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c001bddc:	74 34                	je     c001be12 <IDE::open(int, int, void*)+0x3bc>
c001bdde:	83 ec 0c             	sub    esp,0xc
c001bde1:	53                   	push   ebx
c001bde2:	6a 01                	push   0x1
c001bde4:	68 d4 b9 01 c0       	push   0xc001b9d4
c001bde9:	6a 0e                	push   0xe
c001bdeb:	53                   	push   ebx
c001bdec:	e8 05 08 ff ff       	call   c000c5f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001bdf1:	83 c4 14             	add    esp,0x14
c001bdf4:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c001bdfa:	53                   	push   ebx
c001bdfb:	6a 01                	push   0x1
c001bdfd:	68 f0 b9 01 c0       	push   0xc001b9f0
c001be02:	6a 0f                	push   0xf
c001be04:	53                   	push   ebx
c001be05:	e8 ec 07 ff ff       	call   c000c5f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001be0a:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c001be10:	eb 38                	jmp    c001be4a <IDE::open(int, int, void*)+0x3f4>
c001be12:	83 ec 0c             	sub    esp,0xc
c001be15:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c001be1f:	53                   	push   ebx
c001be20:	6a 00                	push   0x0
c001be22:	68 d4 b9 01 c0       	push   0xc001b9d4
c001be27:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c001be2d:	53                   	push   ebx
c001be2e:	e8 c3 07 ff ff       	call   c000c5f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001be33:	83 c4 14             	add    esp,0x14
c001be36:	53                   	push   ebx
c001be37:	6a 00                	push   0x0
c001be39:	68 f0 b9 01 c0       	push   0xc001b9f0
c001be3e:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c001be44:	53                   	push   ebx
c001be45:	e8 ac 07 ff ff       	call   c000c5f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001be4a:	8b 03                	mov    eax,DWORD PTR [ebx]
c001be4c:	83 c4 20             	add    esp,0x20
c001be4f:	83 ec 0c             	sub    esp,0xc
c001be52:	53                   	push   ebx
c001be53:	ff 50 18             	call   DWORD PTR [eax+0x18]
c001be56:	83 c4 0c             	add    esp,0xc
c001be59:	6a 07                	push   0x7
c001be5b:	6a 00                	push   0x0
c001be5d:	53                   	push   ebx
c001be5e:	e8 61 fa ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001be63:	83 c4 0c             	add    esp,0xc
c001be66:	6a 07                	push   0x7
c001be68:	6a 01                	push   0x1
c001be6a:	53                   	push   ebx
c001be6b:	e8 54 fa ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001be70:	83 c4 0c             	add    esp,0xc
c001be73:	6a 01                	push   0x1
c001be75:	6a 00                	push   0x0
c001be77:	53                   	push   ebx
c001be78:	e8 8f fb ff ff       	call   c001ba0c <IDE::enableIRQs(unsigned char, bool)>
c001be7d:	83 c4 0c             	add    esp,0xc
c001be80:	6a 01                	push   0x1
c001be82:	6a 01                	push   0x1
c001be84:	53                   	push   ebx
c001be85:	e8 82 fb ff ff       	call   c001ba0c <IDE::enableIRQs(unsigned char, bool)>
c001be8a:	83 c4 2c             	add    esp,0x2c
c001be8d:	31 c0                	xor    eax,eax
c001be8f:	5b                   	pop    ebx
c001be90:	5e                   	pop    esi
c001be91:	5f                   	pop    edi
c001be92:	5d                   	pop    ebp
c001be93:	c3                   	ret    

c001be94 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c001be94:	55                   	push   ebp
c001be95:	57                   	push   edi
c001be96:	56                   	push   esi
c001be97:	53                   	push   ebx
c001be98:	83 ec 1c             	sub    esp,0x1c
c001be9b:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001be9f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001bea3:	8d 42 f8             	lea    eax,[edx-0x8]
c001bea6:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001beaa:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c001beae:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001beb2:	3c 03                	cmp    al,0x3
c001beb4:	77 5a                	ja     c001bf10 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x7c>
c001beb6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001beba:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001bebe:	0f b6 db             	movzx  ebx,bl
c001bec1:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c001bec4:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bec9:	0c 80                	or     al,0x80
c001becb:	50                   	push   eax
c001becc:	6a 0c                	push   0xc
c001bece:	53                   	push   ebx
c001becf:	56                   	push   esi
c001bed0:	e8 2f f9 ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bed5:	66 8b 44 ee 0a       	mov    ax,WORD PTR [esi+ebp*8+0xa]
c001beda:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001bede:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001bee2:	0f b6 d2             	movzx  edx,dl
c001bee5:	8d 54 10 fa          	lea    edx,[eax+edx*1-0x6]
c001bee9:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001beeb:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c001bef0:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c001bef4:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c001bef8:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001befc:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c001bf04:	83 c4 2c             	add    esp,0x2c
c001bf07:	5b                   	pop    ebx
c001bf08:	5e                   	pop    esi
c001bf09:	5f                   	pop    edi
c001bf0a:	5d                   	pop    ebp
c001bf0b:	e9 f4 f8 ff ff       	jmp    c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bf10:	0f b6 c2             	movzx  eax,dl
c001bf13:	83 f8 07             	cmp    eax,0x7
c001bf16:	77 12                	ja     c001bf2a <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x96>
c001bf18:	0f b6 c2             	movzx  eax,dl
c001bf1b:	0f b6 db             	movzx  ebx,bl
c001bf1e:	66 8b 94 de 5a 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15a]
c001bf26:	01 c2                	add    edx,eax
c001bf28:	eb 2f                	jmp    c001bf59 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bf2a:	83 f8 0d             	cmp    eax,0xd
c001bf2d:	77 13                	ja     c001bf42 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xae>
c001bf2f:	0f b6 db             	movzx  ebx,bl
c001bf32:	0f b6 d2             	movzx  edx,dl
c001bf35:	8b 84 de 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*8+0x15c]
c001bf3c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c001bf40:	eb 17                	jmp    c001bf59 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc5>
c001bf42:	83 f8 15             	cmp    eax,0x15
c001bf45:	77 14                	ja     c001bf5b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc7>
c001bf47:	0f b6 db             	movzx  ebx,bl
c001bf4a:	0f b6 d2             	movzx  edx,dl
c001bf4d:	66 8b 84 de 5e 01 00 00 	mov    ax,WORD PTR [esi+ebx*8+0x15e]
c001bf55:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c001bf59:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c001bf5b:	83 c4 1c             	add    esp,0x1c
c001bf5e:	5b                   	pop    ebx
c001bf5f:	5e                   	pop    esi
c001bf60:	5f                   	pop    edi
c001bf61:	5d                   	pop    ebp
c001bf62:	c3                   	ret    
c001bf63:	90                   	nop

c001bf64 <IDE::detect()>:
c001bf64:	55                   	push   ebp
c001bf65:	57                   	push   edi
c001bf66:	56                   	push   esi
c001bf67:	53                   	push   ebx
c001bf68:	81 ec 1c 02 00 00    	sub    esp,0x21c
c001bf6e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c001bf75:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c001bf7c:	0f 85 a4 02 00 00    	jne    c001c226 <IDE::detect()+0x2c2>
c001bf82:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c001bf89:	31 f6                	xor    esi,esi
c001bf8b:	31 ed                	xor    ebp,ebp
c001bf8d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001bf95:	89 e8                	mov    eax,ebp
c001bf97:	c1 e0 06             	shl    eax,0x6
c001bf9a:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c001bfa2:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001bfa6:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001bfaa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001bfae:	c1 e0 04             	shl    eax,0x4
c001bfb1:	83 c8 a0             	or     eax,0xffffffa0
c001bfb4:	0f b6 c0             	movzx  eax,al
c001bfb7:	50                   	push   eax
c001bfb8:	6a 06                	push   0x6
c001bfba:	56                   	push   esi
c001bfbb:	53                   	push   ebx
c001bfbc:	e8 43 f8 ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfc1:	83 c4 0c             	add    esp,0xc
c001bfc4:	6a 0c                	push   0xc
c001bfc6:	56                   	push   esi
c001bfc7:	53                   	push   ebx
c001bfc8:	e8 f7 f8 ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001bfcd:	83 c4 0c             	add    esp,0xc
c001bfd0:	6a 0c                	push   0xc
c001bfd2:	56                   	push   esi
c001bfd3:	53                   	push   ebx
c001bfd4:	e8 eb f8 ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001bfd9:	83 c4 0c             	add    esp,0xc
c001bfdc:	6a 0c                	push   0xc
c001bfde:	56                   	push   esi
c001bfdf:	53                   	push   ebx
c001bfe0:	e8 df f8 ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001bfe5:	83 c4 0c             	add    esp,0xc
c001bfe8:	6a 0c                	push   0xc
c001bfea:	56                   	push   esi
c001bfeb:	53                   	push   ebx
c001bfec:	e8 d3 f8 ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001bff1:	68 ec 00 00 00       	push   0xec
c001bff6:	6a 07                	push   0x7
c001bff8:	56                   	push   esi
c001bff9:	53                   	push   ebx
c001bffa:	e8 05 f8 ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001bfff:	83 c4 1c             	add    esp,0x1c
c001c002:	6a 0c                	push   0xc
c001c004:	56                   	push   esi
c001c005:	53                   	push   ebx
c001c006:	e8 b9 f8 ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001c00b:	83 c4 0c             	add    esp,0xc
c001c00e:	6a 0c                	push   0xc
c001c010:	56                   	push   esi
c001c011:	53                   	push   ebx
c001c012:	e8 ad f8 ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001c017:	83 c4 0c             	add    esp,0xc
c001c01a:	6a 0c                	push   0xc
c001c01c:	56                   	push   esi
c001c01d:	53                   	push   ebx
c001c01e:	e8 a1 f8 ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001c023:	83 c4 0c             	add    esp,0xc
c001c026:	6a 0c                	push   0xc
c001c028:	56                   	push   esi
c001c029:	53                   	push   ebx
c001c02a:	e8 95 f8 ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001c02f:	83 c4 0c             	add    esp,0xc
c001c032:	6a 0c                	push   0xc
c001c034:	56                   	push   esi
c001c035:	53                   	push   ebx
c001c036:	e8 89 f8 ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001c03b:	83 c4 10             	add    esp,0x10
c001c03e:	84 c0                	test   al,al
c001c040:	0f 84 60 01 00 00    	je     c001c1a6 <IDE::detect()+0x242>
c001c046:	31 ff                	xor    edi,edi
c001c048:	50                   	push   eax
c001c049:	6a 0c                	push   0xc
c001c04b:	56                   	push   esi
c001c04c:	53                   	push   ebx
c001c04d:	e8 72 f8 ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001c052:	83 c4 10             	add    esp,0x10
c001c055:	a8 01                	test   al,0x1
c001c057:	0f 85 6a 01 00 00    	jne    c001c1c7 <IDE::detect()+0x263>
c001c05d:	a8 80                	test   al,0x80
c001c05f:	75 04                	jne    c001c065 <IDE::detect()+0x101>
c001c061:	a8 08                	test   al,0x8
c001c063:	75 23                	jne    c001c088 <IDE::detect()+0x124>
c001c065:	47                   	inc    edi
c001c066:	81 ff 17 01 00 00    	cmp    edi,0x117
c001c06c:	7e da                	jle    c001c048 <IDE::detect()+0xe4>
c001c06e:	83 ec 0c             	sub    esp,0xc
c001c071:	6a 32                	push   0x32
c001c073:	e8 f0 9d ff ff       	call   c0015e68 <milliTenthSleep(unsigned int)>
c001c078:	83 c4 10             	add    esp,0x10
c001c07b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c001c081:	75 c5                	jne    c001c048 <IDE::detect()+0xe4>
c001c083:	e9 3f 01 00 00       	jmp    c001c1c7 <IDE::detect()+0x263>
c001c088:	31 c9                	xor    ecx,ecx
c001c08a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c001c08e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001c092:	83 ec 0c             	sub    esp,0xc
c001c095:	68 80 00 00 00       	push   0x80
c001c09a:	57                   	push   edi
c001c09b:	6a 00                	push   0x0
c001c09d:	56                   	push   esi
c001c09e:	53                   	push   ebx
c001c09f:	e8 f0 fd ff ff       	call   c001be94 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c001c0a4:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c001c0a9:	89 e8                	mov    eax,ebp
c001c0ab:	89 d1                	mov    ecx,edx
c001c0ad:	c1 e0 06             	shl    eax,0x6
c001c0b0:	01 d8                	add    eax,ebx
c001c0b2:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c001c0b9:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c001c0c0:	89 f2                	mov    edx,esi
c001c0c2:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c001c0c8:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c001c0cc:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c001c0d2:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001c0d6:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c001c0dd:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c001c0e5:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c001c0ec:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c001c0f4:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c001c0fa:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c001c101:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c001c107:	8d 54 24 58          	lea    edx,[esp+0x58]
c001c10b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c001c10f:	83 c4 20             	add    esp,0x20
c001c112:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c001c115:	83 c0 02             	add    eax,0x2
c001c118:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c001c11e:	83 c7 02             	add    edi,0x2
c001c121:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c001c124:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c001c12a:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c001c12e:	75 e2                	jne    c001c112 <IDE::detect()+0x1ae>
c001c130:	89 e8                	mov    eax,ebp
c001c132:	c1 e0 06             	shl    eax,0x6
c001c135:	01 d8                	add    eax,ebx
c001c137:	0f b7 90 74 01 00 00 	movzx  edx,WORD PTR [eax+0x174]
c001c13e:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c001c145:	c1 ea 09             	shr    edx,0x9
c001c148:	83 e2 01             	and    edx,0x1
c001c14b:	80 e1 01             	and    cl,0x1
c001c14e:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c001c154:	75 22                	jne    c001c178 <IDE::detect()+0x214>
c001c156:	83 b8 7c 01 00 00 00 	cmp    DWORD PTR [eax+0x17c],0x0
c001c15d:	74 46                	je     c001c1a5 <IDE::detect()+0x241>
c001c15f:	83 ec 0c             	sub    esp,0xc
c001c162:	68 7c 01 00 00       	push   0x17c
c001c167:	e8 4a b9 fe ff       	call   c0007ab6 <malloc>
c001c16c:	89 c7                	mov    edi,eax
c001c16e:	89 04 24             	mov    DWORD PTR [esp],eax
c001c171:	e8 1a 05 00 00       	call   c001c690 <ATA::ATA()>
c001c176:	eb 17                	jmp    c001c18f <IDE::detect()+0x22b>
c001c178:	83 ec 0c             	sub    esp,0xc
c001c17b:	68 84 01 00 00       	push   0x184
c001c180:	e8 31 b9 fe ff       	call   c0007ab6 <malloc>
c001c185:	89 c7                	mov    edi,eax
c001c187:	89 04 24             	mov    DWORD PTR [esp],eax
c001c18a:	e8 45 0e 00 00       	call   c001cfd4 <ATAPI::ATAPI()>
c001c18f:	5a                   	pop    edx
c001c190:	59                   	pop    ecx
c001c191:	57                   	push   edi
c001c192:	53                   	push   ebx
c001c193:	e8 b2 04 ff ff       	call   c000c64a <Device::addChild(Device*)>
c001c198:	8b 07                	mov    eax,DWORD PTR [edi]
c001c19a:	53                   	push   ebx
c001c19b:	55                   	push   ebp
c001c19c:	6a 00                	push   0x0
c001c19e:	57                   	push   edi
c001c19f:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c1a2:	83 c4 20             	add    esp,0x20
c001c1a5:	45                   	inc    ebp
c001c1a6:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c001c1ab:	74 0d                	je     c001c1ba <IDE::detect()+0x256>
c001c1ad:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c001c1b5:	e9 db fd ff ff       	jmp    c001bf95 <IDE::detect()+0x31>
c001c1ba:	4e                   	dec    esi
c001c1bb:	74 69                	je     c001c226 <IDE::detect()+0x2c2>
c001c1bd:	be 01 00 00 00       	mov    esi,0x1
c001c1c2:	e9 c6 fd ff ff       	jmp    c001bf8d <IDE::detect()+0x29>
c001c1c7:	50                   	push   eax
c001c1c8:	6a 04                	push   0x4
c001c1ca:	56                   	push   esi
c001c1cb:	53                   	push   ebx
c001c1cc:	e8 f3 f6 ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001c1d1:	83 c4 0c             	add    esp,0xc
c001c1d4:	89 c7                	mov    edi,eax
c001c1d6:	6a 05                	push   0x5
c001c1d8:	56                   	push   esi
c001c1d9:	53                   	push   ebx
c001c1da:	e8 e5 f6 ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001c1df:	83 c4 10             	add    esp,0x10
c001c1e2:	89 f9                	mov    ecx,edi
c001c1e4:	0f b6 c0             	movzx  eax,al
c001c1e7:	0f b6 f9             	movzx  edi,cl
c001c1ea:	83 ff 14             	cmp    edi,0x14
c001c1ed:	75 07                	jne    c001c1f6 <IDE::detect()+0x292>
c001c1ef:	3d eb 00 00 00       	cmp    eax,0xeb
c001c1f4:	eb 0a                	jmp    c001c200 <IDE::detect()+0x29c>
c001c1f6:	3d 96 00 00 00       	cmp    eax,0x96
c001c1fb:	75 a9                	jne    c001c1a6 <IDE::detect()+0x242>
c001c1fd:	83 ff 69             	cmp    edi,0x69
c001c200:	75 a4                	jne    c001c1a6 <IDE::detect()+0x242>
c001c202:	68 a1 00 00 00       	push   0xa1
c001c207:	6a 07                	push   0x7
c001c209:	56                   	push   esi
c001c20a:	53                   	push   ebx
c001c20b:	e8 f4 f5 ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c210:	c7 04 24 0a 00 00 00 	mov    DWORD PTR [esp],0xa
c001c217:	e8 4c 9c ff ff       	call   c0015e68 <milliTenthSleep(unsigned int)>
c001c21c:	83 c4 10             	add    esp,0x10
c001c21f:	b1 01                	mov    cl,0x1
c001c221:	e9 64 fe ff ff       	jmp    c001c08a <IDE::detect()+0x126>
c001c226:	81 c4 1c 02 00 00    	add    esp,0x21c
c001c22c:	5b                   	pop    ebx
c001c22d:	5e                   	pop    esi
c001c22e:	5f                   	pop    edi
c001c22f:	5d                   	pop    ebp
c001c230:	c3                   	ret    
c001c231:	90                   	nop

c001c232 <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c001c232:	55                   	push   ebp
c001c233:	57                   	push   edi
c001c234:	56                   	push   esi
c001c235:	53                   	push   ebx
c001c236:	83 ec 1c             	sub    esp,0x1c
c001c239:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001c23d:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001c241:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c245:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001c249:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001c24d:	88 c3                	mov    bl,al
c001c24f:	25 ff 00 00 00       	and    eax,0xff
c001c254:	0f 84 88 00 00 00    	je     c001c2e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c25a:	83 ec 0c             	sub    esp,0xc
c001c25d:	89 c7                	mov    edi,eax
c001c25f:	68 cb 2b 02 c0       	push   0xc0022bcb
c001c264:	e8 dc e6 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001c269:	83 c4 10             	add    esp,0x10
c001c26c:	83 ff 01             	cmp    edi,0x1
c001c26f:	74 6b                	je     c001c2dc <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaa>
c001c271:	83 ff 02             	cmp    edi,0x2
c001c274:	75 58                	jne    c001c2ce <IDE::printError(unsigned char, unsigned char, unsigned char)+0x9c>
c001c276:	0f b6 7c 24 0c       	movzx  edi,BYTE PTR [esp+0xc]
c001c27b:	01 ff                	add    edi,edi
c001c27d:	50                   	push   eax
c001c27e:	09 fe                	or     esi,edi
c001c280:	6a 01                	push   0x1
c001c282:	89 f0                	mov    eax,esi
c001c284:	0f b6 f0             	movzx  esi,al
c001c287:	c1 e6 06             	shl    esi,0x6
c001c28a:	0f b6 84 35 6d 01 00 00 	movzx  eax,BYTE PTR [ebp+esi*1+0x16d]
c001c292:	50                   	push   eax
c001c293:	55                   	push   ebp
c001c294:	e8 2b f6 ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001c299:	83 c4 10             	add    esp,0x10
c001c29c:	a8 01                	test   al,0x1
c001c29e:	74 02                	je     c001c2a2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x70>
c001c2a0:	b3 07                	mov    bl,0x7
c001c2a2:	a8 02                	test   al,0x2
c001c2a4:	74 02                	je     c001c2a8 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x76>
c001c2a6:	b3 03                	mov    bl,0x3
c001c2a8:	a8 04                	test   al,0x4
c001c2aa:	74 02                	je     c001c2ae <IDE::printError(unsigned char, unsigned char, unsigned char)+0x7c>
c001c2ac:	b3 14                	mov    bl,0x14
c001c2ae:	a8 08                	test   al,0x8
c001c2b0:	74 02                	je     c001c2b4 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x82>
c001c2b2:	b3 03                	mov    bl,0x3
c001c2b4:	a8 10                	test   al,0x10
c001c2b6:	74 02                	je     c001c2ba <IDE::printError(unsigned char, unsigned char, unsigned char)+0x88>
c001c2b8:	b3 15                	mov    bl,0x15
c001c2ba:	a8 20                	test   al,0x20
c001c2bc:	74 02                	je     c001c2c0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x8e>
c001c2be:	b3 03                	mov    bl,0x3
c001c2c0:	a8 40                	test   al,0x40
c001c2c2:	74 02                	je     c001c2c6 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x94>
c001c2c4:	b3 16                	mov    bl,0x16
c001c2c6:	a8 80                	test   al,0x80
c001c2c8:	74 18                	je     c001c2e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c2ca:	b3 0d                	mov    bl,0xd
c001c2cc:	eb 14                	jmp    c001c2e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c2ce:	83 ff 03             	cmp    edi,0x3
c001c2d1:	74 0d                	je     c001c2e0 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xae>
c001c2d3:	83 ff 04             	cmp    edi,0x4
c001c2d6:	75 0a                	jne    c001c2e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c2d8:	b3 08                	mov    bl,0x8
c001c2da:	eb 06                	jmp    c001c2e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c2dc:	b3 13                	mov    bl,0x13
c001c2de:	eb 02                	jmp    c001c2e2 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xb0>
c001c2e0:	b3 17                	mov    bl,0x17
c001c2e2:	83 c4 1c             	add    esp,0x1c
c001c2e5:	88 d8                	mov    al,bl
c001c2e7:	5b                   	pop    ebx
c001c2e8:	5e                   	pop    esi
c001c2e9:	5f                   	pop    edi
c001c2ea:	5d                   	pop    ebp
c001c2eb:	c3                   	ret    

c001c2ec <IDE::polling(unsigned char, unsigned int)>:
c001c2ec:	57                   	push   edi
c001c2ed:	56                   	push   esi
c001c2ee:	53                   	push   ebx
c001c2ef:	bb 04 00 00 00       	mov    ebx,0x4
c001c2f4:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c001c2f8:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c001c2fd:	52                   	push   edx
c001c2fe:	6a 0c                	push   0xc
c001c300:	56                   	push   esi
c001c301:	57                   	push   edi
c001c302:	e8 bd f5 ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001c307:	83 c4 10             	add    esp,0x10
c001c30a:	4b                   	dec    ebx
c001c30b:	75 f0                	jne    c001c2fd <IDE::polling(unsigned char, unsigned int)+0x11>
c001c30d:	bb a0 86 01 00       	mov    ebx,0x186a0
c001c312:	50                   	push   eax
c001c313:	6a 0c                	push   0xc
c001c315:	56                   	push   esi
c001c316:	57                   	push   edi
c001c317:	e8 a8 f5 ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001c31c:	83 c4 10             	add    esp,0x10
c001c31f:	a8 01                	test   al,0x1
c001c321:	75 17                	jne    c001c33a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c323:	a8 20                	test   al,0x20
c001c325:	75 0f                	jne    c001c336 <IDE::polling(unsigned char, unsigned int)+0x4a>
c001c327:	4b                   	dec    ebx
c001c328:	74 10                	je     c001c33a <IDE::polling(unsigned char, unsigned int)+0x4e>
c001c32a:	a8 80                	test   al,0x80
c001c32c:	75 e4                	jne    c001c312 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c32e:	a8 08                	test   al,0x8
c001c330:	74 e0                	je     c001c312 <IDE::polling(unsigned char, unsigned int)+0x26>
c001c332:	31 c0                	xor    eax,eax
c001c334:	eb 06                	jmp    c001c33c <IDE::polling(unsigned char, unsigned int)+0x50>
c001c336:	b0 01                	mov    al,0x1
c001c338:	eb 02                	jmp    c001c33c <IDE::polling(unsigned char, unsigned int)+0x50>
c001c33a:	b0 02                	mov    al,0x2
c001c33c:	5b                   	pop    ebx
c001c33d:	5e                   	pop    esi
c001c33e:	5f                   	pop    edi
c001c33f:	c3                   	ret    

c001c340 <SATABus::close(int, int, void*)>:
c001c340:	31 c0                	xor    eax,eax
c001c342:	c3                   	ret    
c001c343:	90                   	nop

c001c344 <SATABus::detect()>:
c001c344:	c3                   	ret    
c001c345:	90                   	nop

c001c346 <SATABus::SATABus()>:
c001c346:	83 ec 0c             	sub    esp,0xc
c001c349:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c34d:	83 ec 08             	sub    esp,0x8
c001c350:	68 04 2c 02 c0       	push   0xc0022c04
c001c355:	50                   	push   eax
c001c356:	e8 31 06 ff ff       	call   c000c98c <HardDiskController::HardDiskController(char const*)>
c001c35b:	83 c4 10             	add    esp,0x10
c001c35e:	ba 30 2c 02 c0       	mov    edx,0xc0022c30
c001c363:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c367:	89 10                	mov    DWORD PTR [eax],edx
c001c369:	83 ec 0c             	sub    esp,0xc
c001c36c:	6a 50                	push   0x50
c001c36e:	e8 1b bb fe ff       	call   c0007e8e <Phys::allocateContiguousPages(int)>
c001c373:	83 c4 10             	add    esp,0x10
c001c376:	89 c2                	mov    edx,eax
c001c378:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c37c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001c382:	83 ec 0c             	sub    esp,0xc
c001c385:	6a 50                	push   0x50
c001c387:	e8 81 d2 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001c38c:	83 c4 10             	add    esp,0x10
c001c38f:	89 c2                	mov    edx,eax
c001c391:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c395:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001c39b:	a1 b0 5f 02 c0       	mov    eax,ds:0xc0025fb0
c001c3a0:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c3a4:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c001c3aa:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c3ae:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001c3b4:	83 ec 0c             	sub    esp,0xc
c001c3b7:	6a 03                	push   0x3
c001c3b9:	6a 50                	push   0x50
c001c3bb:	51                   	push   ecx
c001c3bc:	52                   	push   edx
c001c3bd:	50                   	push   eax
c001c3be:	e8 57 db fe ff       	call   c0009f1a <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001c3c3:	83 c4 20             	add    esp,0x20
c001c3c6:	90                   	nop
c001c3c7:	83 c4 0c             	add    esp,0xc
c001c3ca:	c3                   	ret    
c001c3cb:	90                   	nop

c001c3cc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c001c3cc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c3d0:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c001c3d3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001c3d6:	09 c2                	or     edx,eax
c001c3d8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001c3dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001c3e2:	8b 08                	mov    ecx,DWORD PTR [eax]
c001c3e4:	31 c0                	xor    eax,eax
c001c3e6:	c1 e9 08             	shr    ecx,0x8
c001c3e9:	83 e1 0f             	and    ecx,0xf
c001c3ec:	39 c8                	cmp    eax,ecx
c001c3ee:	74 0a                	je     c001c3fa <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x2e>
c001c3f0:	f6 c2 01             	test   dl,0x1
c001c3f3:	74 08                	je     c001c3fd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c001c3f5:	d1 ea                	shr    edx,1
c001c3f7:	40                   	inc    eax
c001c3f8:	eb f2                	jmp    c001c3ec <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x20>
c001c3fa:	83 c8 ff             	or     eax,0xffffffff
c001c3fd:	c3                   	ret    

c001c3fe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c001c3fe:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c402:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001c405:	89 c2                	mov    edx,eax
c001c407:	c1 ea 08             	shr    edx,0x8
c001c40a:	83 e2 0f             	and    edx,0xf
c001c40d:	4a                   	dec    edx
c001c40e:	75 32                	jne    c001c442 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c410:	83 e0 0f             	and    eax,0xf
c001c413:	83 f8 03             	cmp    eax,0x3
c001c416:	75 2a                	jne    c001c442 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c001c418:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c001c41b:	b8 02 00 00 00       	mov    eax,0x2
c001c420:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c001c426:	74 1c                	je     c001c444 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c428:	b8 04 00 00 00       	mov    eax,0x4
c001c42d:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c001c433:	74 0f                	je     c001c444 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c001c435:	31 c0                	xor    eax,eax
c001c437:	83 fa 03             	cmp    edx,0x3
c001c43a:	0f 94 c0             	sete   al
c001c43d:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c001c441:	c3                   	ret    
c001c442:	31 c0                	xor    eax,eax
c001c444:	c3                   	ret    
c001c445:	90                   	nop

c001c446 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c001c446:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c44a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c44d:	0f ba e2 0f          	bt     edx,0xf
c001c451:	72 f7                	jb     c001c44a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c001c453:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c456:	83 ca 10             	or     edx,0x10
c001c459:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c45c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c45f:	83 ca 01             	or     edx,0x1
c001c462:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c465:	c3                   	ret    

c001c466 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c001c466:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001c46a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c46d:	83 e2 fe             	and    edx,0xfffffffe
c001c470:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c473:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c476:	83 e2 ef             	and    edx,0xffffffef
c001c479:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001c47c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c47f:	0f ba e2 0e          	bt     edx,0xe
c001c483:	72 f7                	jb     c001c47c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c485:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001c488:	0f ba e2 0f          	bt     edx,0xf
c001c48c:	72 ee                	jb     c001c47c <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c001c48e:	c3                   	ret    
c001c48f:	90                   	nop

c001c490 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c001c490:	55                   	push   ebp
c001c491:	57                   	push   edi
c001c492:	56                   	push   esi
c001c493:	53                   	push   ebx
c001c494:	83 ec 1c             	sub    esp,0x1c
c001c497:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001c49b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001c49f:	53                   	push   ebx
c001c4a0:	56                   	push   esi
c001c4a1:	e8 c0 ff ff ff       	call   c001c466 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001c4a6:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c001c4aa:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c4b0:	83 ec 0c             	sub    esp,0xc
c001c4b3:	c1 e5 0a             	shl    ebp,0xa
c001c4b6:	01 e8                	add    eax,ebp
c001c4b8:	89 03                	mov    DWORD PTR [ebx],eax
c001c4ba:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c4bc:	68 00 04 00 00       	push   0x400
c001c4c1:	6a 00                	push   0x0
c001c4c3:	50                   	push   eax
c001c4c4:	e8 27 40 fe ff       	call   c00004f0 <memset>
c001c4c9:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c001c4cf:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c001c4d3:	01 e8                	add    eax,ebp
c001c4d5:	83 c4 1c             	add    esp,0x1c
c001c4d8:	89 03                	mov    DWORD PTR [ebx],eax
c001c4da:	c1 e2 08             	shl    edx,0x8
c001c4dd:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c001c4e4:	8d ba 00 80 00 00    	lea    edi,[edx+0x8000]
c001c4ea:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c001c4f0:	01 f8                	add    eax,edi
c001c4f2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c001c4f5:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001c4f8:	68 00 01 00 00       	push   0x100
c001c4fd:	6a 00                	push   0x0
c001c4ff:	50                   	push   eax
c001c500:	e8 eb 3f fe ff       	call   c00004f0 <memset>
c001c505:	8b 96 5c 01 00 00    	mov    edx,DWORD PTR [esi+0x15c]
c001c50b:	01 fa                	add    edx,edi
c001c50d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c511:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c001c514:	c1 e7 0d             	shl    edi,0xd
c001c517:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c001c51e:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c001c524:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c001c52a:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001c52e:	31 ff                	xor    edi,edi
c001c530:	83 c4 10             	add    esp,0x10
c001c533:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c001c539:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c53d:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001c543:	83 c5 20             	add    ebp,0x20
c001c546:	01 f8                	add    eax,edi
c001c548:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c54b:	52                   	push   edx
c001c54c:	68 00 01 00 00       	push   0x100
c001c551:	6a 00                	push   0x0
c001c553:	50                   	push   eax
c001c554:	e8 97 3f fe ff       	call   c00004f0 <memset>
c001c559:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c55d:	83 c4 10             	add    esp,0x10
c001c560:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c001c566:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c001c56d:	01 f8                	add    eax,edi
c001c56f:	81 c7 00 01 00 00    	add    edi,0x100
c001c575:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001c578:	81 ff 00 20 00 00    	cmp    edi,0x2000
c001c57e:	75 b3                	jne    c001c533 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa3>
c001c580:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c587:	50                   	push   eax
c001c588:	50                   	push   eax
c001c589:	53                   	push   ebx
c001c58a:	56                   	push   esi
c001c58b:	e8 b6 fe ff ff       	call   c001c446 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001c590:	c7 43 10 ff ff ff ff 	mov    DWORD PTR [ebx+0x10],0xffffffff
c001c597:	83 c4 2c             	add    esp,0x2c
c001c59a:	5b                   	pop    ebx
c001c59b:	5e                   	pop    esi
c001c59c:	5f                   	pop    edi
c001c59d:	5d                   	pop    ebp
c001c59e:	c3                   	ret    
c001c59f:	90                   	nop

c001c5a0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c001c5a0:	55                   	push   ebp
c001c5a1:	57                   	push   edi
c001c5a2:	56                   	push   esi
c001c5a3:	53                   	push   ebx
c001c5a4:	31 db                	xor    ebx,ebx
c001c5a6:	83 ec 0c             	sub    esp,0xc
c001c5a9:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001c5ad:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001c5b1:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c001c5b4:	f7 c7 01 00 00 00    	test   edi,0x1
c001c5ba:	74 7a                	je     c001c636 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c5bc:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001c5c0:	89 d8                	mov    eax,ebx
c001c5c2:	c1 e0 07             	shl    eax,0x7
c001c5c5:	8d ac 01 00 01 00 00 	lea    ebp,[ecx+eax*1+0x100]
c001c5cc:	55                   	push   ebp
c001c5cd:	56                   	push   esi
c001c5ce:	e8 2b fe ff ff       	call   c001c3fe <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c001c5d3:	5a                   	pop    edx
c001c5d4:	83 f8 01             	cmp    eax,0x1
c001c5d7:	59                   	pop    ecx
c001c5d8:	75 21                	jne    c001c5fb <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x5b>
c001c5da:	50                   	push   eax
c001c5db:	53                   	push   ebx
c001c5dc:	55                   	push   ebp
c001c5dd:	56                   	push   esi
c001c5de:	e8 ad fe ff ff       	call   c001c490 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c5e3:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c001c5ea:	e8 c7 b4 fe ff       	call   c0007ab6 <malloc>
c001c5ef:	89 c5                	mov    ebp,eax
c001c5f1:	89 04 24             	mov    DWORD PTR [esp],eax
c001c5f4:	e8 99 10 00 00       	call   c001d692 <SATA::SATA()>
c001c5f9:	eb 24                	jmp    c001c61f <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x7f>
c001c5fb:	83 f8 04             	cmp    eax,0x4
c001c5fe:	75 36                	jne    c001c636 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x96>
c001c600:	51                   	push   ecx
c001c601:	53                   	push   ebx
c001c602:	55                   	push   ebp
c001c603:	56                   	push   esi
c001c604:	e8 87 fe ff ff       	call   c001c490 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001c609:	c7 04 24 84 01 00 00 	mov    DWORD PTR [esp],0x184
c001c610:	e8 a1 b4 fe ff       	call   c0007ab6 <malloc>
c001c615:	89 c5                	mov    ebp,eax
c001c617:	89 04 24             	mov    DWORD PTR [esp],eax
c001c61a:	e8 d5 17 00 00       	call   c001ddf4 <SATAPI::SATAPI()>
c001c61f:	58                   	pop    eax
c001c620:	5a                   	pop    edx
c001c621:	55                   	push   ebp
c001c622:	56                   	push   esi
c001c623:	e8 22 00 ff ff       	call   c000c64a <Device::addChild(Device*)>
c001c628:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001c62b:	56                   	push   esi
c001c62c:	6a 00                	push   0x0
c001c62e:	53                   	push   ebx
c001c62f:	55                   	push   ebp
c001c630:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c633:	83 c4 20             	add    esp,0x20
c001c636:	d1 ef                	shr    edi,1
c001c638:	43                   	inc    ebx
c001c639:	83 fb 20             	cmp    ebx,0x20
c001c63c:	0f 85 72 ff ff ff    	jne    c001c5b4 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c001c642:	83 c4 0c             	add    esp,0xc
c001c645:	5b                   	pop    ebx
c001c646:	5e                   	pop    esi
c001c647:	5f                   	pop    edi
c001c648:	5d                   	pop    ebp
c001c649:	c3                   	ret    

c001c64a <SATABus::open(int, int, void*)>:
c001c64a:	83 ec 14             	sub    esp,0x14
c001c64d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c651:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c001c657:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001c65d:	52                   	push   edx
c001c65e:	50                   	push   eax
c001c65f:	e8 3c ff ff ff       	call   c001c5a0 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c001c664:	31 c0                	xor    eax,eax
c001c666:	83 c4 1c             	add    esp,0x1c
c001c669:	c3                   	ret    

c001c66a <ATA::close(int, int, void*)>:
c001c66a:	83 ec 0c             	sub    esp,0xc
c001c66d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c671:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001c677:	85 c0                	test   eax,eax
c001c679:	74 0c                	je     c001c687 <ATA::close(int, int, void*)+0x1d>
c001c67b:	83 ec 0c             	sub    esp,0xc
c001c67e:	8b 10                	mov    edx,DWORD PTR [eax]
c001c680:	50                   	push   eax
c001c681:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001c684:	83 c4 10             	add    esp,0x10
c001c687:	31 c0                	xor    eax,eax
c001c689:	83 c4 0c             	add    esp,0xc
c001c68c:	c3                   	ret    
c001c68d:	90                   	nop

c001c68e <ATA::powerSaving(PowerSavingLevel)>:
c001c68e:	c3                   	ret    
c001c68f:	90                   	nop

c001c690 <ATA::ATA()>:
c001c690:	83 ec 0c             	sub    esp,0xc
c001c693:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c697:	83 ec 04             	sub    esp,0x4
c001c69a:	68 00 02 00 00       	push   0x200
c001c69f:	68 fd 2c 02 c0       	push   0xc0022cfd
c001c6a4:	50                   	push   eax
c001c6a5:	e8 6c 03 ff ff       	call   c000ca16 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001c6aa:	83 c4 10             	add    esp,0x10
c001c6ad:	ba 70 2c 02 c0       	mov    edx,0xc0022c70
c001c6b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c6b6:	89 10                	mov    DWORD PTR [eax],edx
c001c6b8:	90                   	nop
c001c6b9:	83 c4 0c             	add    esp,0xc
c001c6bc:	c3                   	ret    
c001c6bd:	90                   	nop

c001c6be <ATA::flush(bool)>:
c001c6be:	53                   	push   ebx
c001c6bf:	83 ec 08             	sub    esp,0x8
c001c6c2:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c6c6:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c001c6cb:	83 f8 01             	cmp    eax,0x1
c001c6ce:	19 c0                	sbb    eax,eax
c001c6d0:	83 e0 fd             	and    eax,0xfffffffd
c001c6d3:	05 ea 00 00 00       	add    eax,0xea
c001c6d8:	50                   	push   eax
c001c6d9:	6a 07                	push   0x7
c001c6db:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6e2:	50                   	push   eax
c001c6e3:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c6e9:	e8 16 f1 ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c6ee:	83 c4 0c             	add    esp,0xc
c001c6f1:	6a 00                	push   0x0
c001c6f3:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c6fa:	50                   	push   eax
c001c6fb:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c701:	e8 e6 fb ff ff       	call   c001c2ec <IDE::polling(unsigned char, unsigned int)>
c001c706:	83 c4 18             	add    esp,0x18
c001c709:	5b                   	pop    ebx
c001c70a:	c3                   	ret    
c001c70b:	90                   	nop

c001c70c <ATA::readyForCommand()>:
c001c70c:	56                   	push   esi
c001c70d:	53                   	push   ebx
c001c70e:	53                   	push   ebx
c001c70f:	31 db                	xor    ebx,ebx
c001c711:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c715:	51                   	push   ecx
c001c716:	6a 0c                	push   0xc
c001c718:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001c71f:	50                   	push   eax
c001c720:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001c726:	e8 99 f1 ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001c72b:	83 c4 10             	add    esp,0x10
c001c72e:	a8 88                	test   al,0x88
c001c730:	74 1f                	je     c001c751 <ATA::readyForCommand()+0x45>
c001c732:	43                   	inc    ebx
c001c733:	83 fb 63             	cmp    ebx,0x63
c001c736:	7e dd                	jle    c001c715 <ATA::readyForCommand()+0x9>
c001c738:	83 ec 0c             	sub    esp,0xc
c001c73b:	6a 0a                	push   0xa
c001c73d:	e8 26 97 ff ff       	call   c0015e68 <milliTenthSleep(unsigned int)>
c001c742:	83 c4 10             	add    esp,0x10
c001c745:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c001c74b:	75 c8                	jne    c001c715 <ATA::readyForCommand()+0x9>
c001c74d:	31 c0                	xor    eax,eax
c001c74f:	eb 02                	jmp    c001c753 <ATA::readyForCommand()+0x47>
c001c751:	b0 01                	mov    al,0x1
c001c753:	5a                   	pop    edx
c001c754:	5b                   	pop    ebx
c001c755:	5e                   	pop    esi
c001c756:	c3                   	ret    
c001c757:	90                   	nop

c001c758 <ATA::access(unsigned long long, int, void*, bool)>:
c001c758:	55                   	push   ebp
c001c759:	57                   	push   edi
c001c75a:	56                   	push   esi
c001c75b:	53                   	push   ebx
c001c75c:	83 ec 2c             	sub    esp,0x2c
c001c75f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001c763:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001c767:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001c76b:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c76f:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001c773:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001c777:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001c77b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001c781:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001c785:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001c78b:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001c78f:	c1 e0 06             	shl    eax,0x6
c001c792:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c001c79a:	74 5d                	je     c001c7f9 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c001c79c:	89 fa                	mov    edx,edi
c001c79e:	89 f0                	mov    eax,esi
c001c7a0:	0f ac d0 1c          	shrd   eax,edx,0x1c
c001c7a4:	c1 ea 1c             	shr    edx,0x1c
c001c7a7:	89 d1                	mov    ecx,edx
c001c7a9:	09 c1                	or     ecx,eax
c001c7ab:	74 25                	je     c001c7d2 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c001c7ad:	31 ed                	xor    ebp,ebp
c001c7af:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c001c7b6:	89 fa                	mov    edx,edi
c001c7b8:	89 f0                	mov    eax,esi
c001c7ba:	0f ad d0             	shrd   eax,edx,cl
c001c7bd:	d3 ea                	shr    edx,cl
c001c7bf:	f6 c1 20             	test   cl,0x20
c001c7c2:	74 02                	je     c001c7c6 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c001c7c4:	89 d0                	mov    eax,edx
c001c7c6:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c001c7ca:	45                   	inc    ebp
c001c7cb:	83 fd 06             	cmp    ebp,0x6
c001c7ce:	75 df                	jne    c001c7af <ATA::access(unsigned long long, int, void*, bool)+0x57>
c001c7d0:	eb 76                	jmp    c001c848 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c001c7d2:	89 f0                	mov    eax,esi
c001c7d4:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c001c7d9:	89 fa                	mov    edx,edi
c001c7db:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c7e2:	0f ac d0 10          	shrd   eax,edx,0x10
c001c7e6:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c7eb:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c001c7ef:	c1 ee 18             	shr    esi,0x18
c001c7f2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001c7f7:	eb 56                	jmp    c001c84f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c7f9:	6a 00                	push   0x0
c001c7fb:	6a 3f                	push   0x3f
c001c7fd:	57                   	push   edi
c001c7fe:	56                   	push   esi
c001c7ff:	e8 ac 2a 00 00       	call   c001f2b0 <__umoddi3>
c001c804:	83 c4 10             	add    esp,0x10
c001c807:	40                   	inc    eax
c001c808:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c001c80c:	6a 00                	push   0x0
c001c80e:	68 f0 03 00 00       	push   0x3f0
c001c813:	57                   	push   edi
c001c814:	56                   	push   esi
c001c815:	e8 96 29 00 00       	call   c001f1b0 <__udivdi3>
c001c81a:	83 c4 10             	add    esp,0x10
c001c81d:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c001c822:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c001c829:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c001c82e:	6a 00                	push   0x0
c001c830:	6a 3f                	push   0x3f
c001c832:	57                   	push   edi
c001c833:	56                   	push   esi
c001c834:	e8 77 29 00 00       	call   c001f1b0 <__udivdi3>
c001c839:	83 c4 10             	add    esp,0x10
c001c83c:	83 e0 0f             	and    eax,0xf
c001c83f:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001c844:	89 c6                	mov    esi,eax
c001c846:	eb 07                	jmp    c001c84f <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c001c848:	31 f6                	xor    esi,esi
c001c84a:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c001c84f:	bf 01 00 00 00       	mov    edi,0x1
c001c854:	50                   	push   eax
c001c855:	6a 00                	push   0x0
c001c857:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c85e:	50                   	push   eax
c001c85f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001c863:	e8 a4 f1 ff ff       	call   c001ba0c <IDE::enableIRQs(unsigned char, bool)>
c001c868:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c86b:	e8 9c fe ff ff       	call   c001c70c <ATA::readyForCommand()>
c001c870:	83 c4 10             	add    esp,0x10
c001c873:	84 c0                	test   al,al
c001c875:	0f 84 69 02 00 00    	je     c001cae4 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001c87b:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001c881:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001c887:	c1 e0 04             	shl    eax,0x4
c001c88a:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c001c891:	09 c6                	or     esi,eax
c001c893:	f6 44 24 0e 03       	test   BYTE PTR [esp+0xe],0x3
c001c898:	75 05                	jne    c001c89f <ATA::access(unsigned long long, int, void*, bool)+0x147>
c001c89a:	83 ce a0             	or     esi,0xffffffa0
c001c89d:	eb 03                	jmp    c001c8a2 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c001c89f:	83 ce e0             	or     esi,0xffffffe0
c001c8a2:	89 f0                	mov    eax,esi
c001c8a4:	0f b6 f0             	movzx  esi,al
c001c8a7:	56                   	push   esi
c001c8a8:	6a 06                	push   0x6
c001c8aa:	51                   	push   ecx
c001c8ab:	52                   	push   edx
c001c8ac:	e8 53 ef ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8b1:	83 c4 10             	add    esp,0x10
c001c8b4:	6a 00                	push   0x0
c001c8b6:	6a 01                	push   0x1
c001c8b8:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8bf:	50                   	push   eax
c001c8c0:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8c6:	e8 39 ef ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8cb:	83 c4 10             	add    esp,0x10
c001c8ce:	0f b6 44 24 0e       	movzx  eax,BYTE PTR [esp+0xe]
c001c8d3:	83 f8 02             	cmp    eax,0x2
c001c8d6:	75 6e                	jne    c001c946 <ATA::access(unsigned long long, int, void*, bool)+0x1ee>
c001c8d8:	6a 00                	push   0x0
c001c8da:	6a 08                	push   0x8
c001c8dc:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8e3:	50                   	push   eax
c001c8e4:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c8ea:	e8 15 ef ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c8ef:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c001c8f4:	50                   	push   eax
c001c8f5:	6a 09                	push   0x9
c001c8f7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c8fe:	50                   	push   eax
c001c8ff:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c905:	e8 fa ee ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c90a:	83 c4 20             	add    esp,0x20
c001c90d:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c001c912:	50                   	push   eax
c001c913:	6a 0a                	push   0xa
c001c915:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c91c:	50                   	push   eax
c001c91d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c923:	e8 dc ee ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c928:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c001c92d:	50                   	push   eax
c001c92e:	6a 0b                	push   0xb
c001c930:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c937:	50                   	push   eax
c001c938:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c93e:	e8 c1 ee ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c943:	83 c4 20             	add    esp,0x20
c001c946:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c001c94b:	50                   	push   eax
c001c94c:	6a 02                	push   0x2
c001c94e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c955:	50                   	push   eax
c001c956:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c95c:	e8 a3 ee ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c961:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c001c966:	50                   	push   eax
c001c967:	6a 03                	push   0x3
c001c969:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c970:	50                   	push   eax
c001c971:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c977:	e8 88 ee ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c97c:	83 c4 20             	add    esp,0x20
c001c97f:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c001c984:	50                   	push   eax
c001c985:	6a 04                	push   0x4
c001c987:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c98e:	50                   	push   eax
c001c98f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c995:	e8 6a ee ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c99a:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c001c99f:	50                   	push   eax
c001c9a0:	6a 05                	push   0x5
c001c9a2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9a9:	50                   	push   eax
c001c9aa:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9b0:	e8 4f ee ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9b5:	83 c4 20             	add    esp,0x20
c001c9b8:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001c9bd:	0f b6 54 24 0e       	movzx  edx,BYTE PTR [esp+0xe]
c001c9c2:	74 11                	je     c001c9d5 <ATA::access(unsigned long long, int, void*, bool)+0x27d>
c001c9c4:	b8 30 00 00 00       	mov    eax,0x30
c001c9c9:	83 fa 02             	cmp    edx,0x2
c001c9cc:	75 16                	jne    c001c9e4 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c9ce:	b8 34 00 00 00       	mov    eax,0x34
c001c9d3:	eb 0f                	jmp    c001c9e4 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c9d5:	b8 20 00 00 00       	mov    eax,0x20
c001c9da:	83 fa 02             	cmp    edx,0x2
c001c9dd:	75 05                	jne    c001c9e4 <ATA::access(unsigned long long, int, void*, bool)+0x28c>
c001c9df:	b8 24 00 00 00       	mov    eax,0x24
c001c9e4:	50                   	push   eax
c001c9e5:	6a 07                	push   0x7
c001c9e7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001c9ee:	50                   	push   eax
c001c9ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001c9f5:	e8 0a ee ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001c9fa:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c001c9fe:	83 c4 10             	add    esp,0x10
c001ca01:	0f b6 6c 24 0f       	movzx  ebp,BYTE PTR [esp+0xf]
c001ca06:	85 f6                	test   esi,esi
c001ca08:	0f 84 b3 00 00 00    	je     c001cac1 <ATA::access(unsigned long long, int, void*, bool)+0x369>
c001ca0e:	50                   	push   eax
c001ca0f:	6a 01                	push   0x1
c001ca11:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca18:	50                   	push   eax
c001ca19:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca1f:	e8 c8 f8 ff ff       	call   c001c2ec <IDE::polling(unsigned char, unsigned int)>
c001ca24:	83 c4 10             	add    esp,0x10
c001ca27:	0f b6 f8             	movzx  edi,al
c001ca2a:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001ca30:	85 ff                	test   edi,edi
c001ca32:	74 1d                	je     c001ca51 <ATA::access(unsigned long long, int, void*, bool)+0x2f9>
c001ca34:	57                   	push   edi
c001ca35:	0f b6 d2             	movzx  edx,dl
c001ca38:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c001ca3f:	50                   	push   eax
c001ca40:	52                   	push   edx
c001ca41:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca47:	e8 e6 f7 ff ff       	call   c001c232 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001ca4c:	e9 90 00 00 00       	jmp    c001cae1 <ATA::access(unsigned long long, int, void*, bool)+0x389>
c001ca51:	85 ed                	test   ebp,ebp
c001ca53:	74 3b                	je     c001ca90 <ATA::access(unsigned long long, int, void*, bool)+0x338>
c001ca55:	31 c9                	xor    ecx,ecx
c001ca57:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ca5b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001ca5f:	66 8b 3c 48          	mov    di,WORD PTR [eax+ecx*2]
c001ca63:	50                   	push   eax
c001ca64:	50                   	push   eax
c001ca65:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001ca6c:	50                   	push   eax
c001ca6d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca73:	e8 7a ed ff ff       	call   c001b7f2 <IDE::getBase(unsigned char)>
c001ca78:	89 c2                	mov    edx,eax
c001ca7a:	89 f8                	mov    eax,edi
c001ca7c:	66 ef                	out    dx,ax
c001ca7e:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ca82:	83 c4 10             	add    esp,0x10
c001ca85:	41                   	inc    ecx
c001ca86:	81 f9 00 01 00 00    	cmp    ecx,0x100
c001ca8c:	75 c9                	jne    c001ca57 <ATA::access(unsigned long long, int, void*, bool)+0x2ff>
c001ca8e:	eb 23                	jmp    c001cab3 <ATA::access(unsigned long long, int, void*, bool)+0x35b>
c001ca90:	0f b6 d2             	movzx  edx,dl
c001ca93:	51                   	push   ecx
c001ca94:	51                   	push   ecx
c001ca95:	52                   	push   edx
c001ca96:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001ca9c:	e8 51 ed ff ff       	call   c001b7f2 <IDE::getBase(unsigned char)>
c001caa1:	b9 00 01 00 00       	mov    ecx,0x100
c001caa6:	89 c2                	mov    edx,eax
c001caa8:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c001caac:	fc                   	cld    
c001caad:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c001cab0:	83 c4 10             	add    esp,0x10
c001cab3:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c001cabb:	4e                   	dec    esi
c001cabc:	e9 45 ff ff ff       	jmp    c001ca06 <ATA::access(unsigned long long, int, void*, bool)+0x2ae>
c001cac1:	31 ff                	xor    edi,edi
c001cac3:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c001cac8:	74 1a                	je     c001cae4 <ATA::access(unsigned long long, int, void*, bool)+0x38c>
c001caca:	50                   	push   eax
c001cacb:	50                   	push   eax
c001cacc:	0f b6 44 24 16       	movzx  eax,BYTE PTR [esp+0x16]
c001cad1:	83 f8 02             	cmp    eax,0x2
c001cad4:	0f 94 c0             	sete   al
c001cad7:	0f b6 c0             	movzx  eax,al
c001cada:	50                   	push   eax
c001cadb:	53                   	push   ebx
c001cadc:	e8 dd fb ff ff       	call   c001c6be <ATA::flush(bool)>
c001cae1:	83 c4 10             	add    esp,0x10
c001cae4:	83 c4 2c             	add    esp,0x2c
c001cae7:	89 f8                	mov    eax,edi
c001cae9:	5b                   	pop    ebx
c001caea:	5e                   	pop    esi
c001caeb:	5f                   	pop    edi
c001caec:	5d                   	pop    ebp
c001caed:	c3                   	ret    

c001caee <ATA::detectCHS()>:
c001caee:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001caf2:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c001caf8:	c1 e0 06             	shl    eax,0x6
c001cafb:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c001cb01:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c001cb0b:	c7 44 24 04 54 2c 02 c0 	mov    DWORD PTR [esp+0x4],0xc0022c54
c001cb13:	e9 61 47 ff ff       	jmp    c0011279 <KePanic(char const*)>

c001cb18 <ATA::open(int, int, void*)>:
c001cb18:	53                   	push   ebx
c001cb19:	83 ec 08             	sub    esp,0x8
c001cb1c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cb20:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cb24:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001cb28:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001cb2e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001cb34:	c1 e0 06             	shl    eax,0x6
c001cb37:	01 d0                	add    eax,edx
c001cb39:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c001cb40:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c001cb46:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c001cb4d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001cb57:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c001cb5d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001cb64:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c001cb6b:	75 0c                	jne    c001cb79 <ATA::open(int, int, void*)+0x61>
c001cb6d:	83 ec 0c             	sub    esp,0xc
c001cb70:	53                   	push   ebx
c001cb71:	e8 78 ff ff ff       	call   c001caee <ATA::detectCHS()>
c001cb76:	83 c4 10             	add    esp,0x10
c001cb79:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001cb7f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c001cb85:	c1 e0 06             	shl    eax,0x6
c001cb88:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c001cb8f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001cb99:	d1 e8                	shr    eax,1
c001cb9b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c001cba1:	6a 04                	push   0x4
c001cba3:	6a 0c                	push   0xc
c001cba5:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbac:	50                   	push   eax
c001cbad:	52                   	push   edx
c001cbae:	e8 51 ec ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbb3:	90                   	nop
c001cbb4:	90                   	nop
c001cbb5:	6a 00                	push   0x0
c001cbb7:	6a 0c                	push   0xc
c001cbb9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001cbc0:	50                   	push   eax
c001cbc1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001cbc7:	e8 38 ec ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001cbcc:	83 c4 14             	add    esp,0x14
c001cbcf:	53                   	push   ebx
c001cbd0:	e8 a9 fe fe ff       	call   c000ca7e <PhysicalDisk::startCache()>
c001cbd5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbd8:	e8 e5 10 ff ff       	call   c000dcc2 <createPartitionsForDisk(PhysicalDisk*)>
c001cbdd:	31 c0                	xor    eax,eax
c001cbdf:	83 c4 18             	add    esp,0x18
c001cbe2:	5b                   	pop    ebx
c001cbe3:	c3                   	ret    

c001cbe4 <combineCharAndColour(char, unsigned char)>:
c001cbe4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cbe9:	66 0f be 54 24 04    	movsx  dx,BYTE PTR [esp+0x4]
c001cbef:	c1 e0 08             	shl    eax,0x8
c001cbf2:	09 d0                	or     eax,edx
c001cbf4:	c3                   	ret    

c001cbf5 <combineColours(unsigned char, unsigned char)>:
c001cbf5:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c001cbfa:	c1 e0 04             	shl    eax,0x4
c001cbfd:	0b 44 24 04          	or     eax,DWORD PTR [esp+0x4]
c001cc01:	c3                   	ret    

c001cc02 <ATA::read(unsigned long long, int, void*)>:
c001cc02:	55                   	push   ebp
c001cc03:	57                   	push   edi
c001cc04:	56                   	push   esi
c001cc05:	be 04 00 00 00       	mov    esi,0x4
c001cc0a:	53                   	push   ebx
c001cc0b:	83 ec 0c             	sub    esp,0xc
c001cc0e:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cc12:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cc16:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cc19:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cc1d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cc21:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cc27:	0f 87 a1 01 00 00    	ja     c001cdce <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cc2d:	be 06 00 00 00       	mov    esi,0x6
c001cc32:	85 c9                	test   ecx,ecx
c001cc34:	0f 84 94 01 00 00    	je     c001cdce <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cc3a:	55                   	push   ebp
c001cc3b:	55                   	push   ebp
c001cc3c:	6a 00                	push   0x0
c001cc3e:	51                   	push   ecx
c001cc3f:	53                   	push   ebx
c001cc40:	52                   	push   edx
c001cc41:	50                   	push   eax
c001cc42:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001cc46:	e8 0d fb ff ff       	call   c001c758 <ATA::access(unsigned long long, int, void*, bool)>
c001cc4b:	83 c4 20             	add    esp,0x20
c001cc4e:	89 c6                	mov    esi,eax
c001cc50:	85 c0                	test   eax,eax
c001cc52:	0f 85 71 01 00 00    	jne    c001cdc9 <ATA::read(unsigned long long, int, void*)+0x1c7>
c001cc58:	03 1d b4 a0 02 c0    	add    ebx,DWORD PTR ds:0xc002a0b4
c001cc5e:	89 da                	mov    edx,ebx
c001cc60:	50                   	push   eax
c001cc61:	bd 10 27 00 00       	mov    ebp,0x2710
c001cc66:	50                   	push   eax
c001cc67:	89 1d b4 a0 02 c0    	mov    DWORD PTR ds:0xc002a0b4,ebx
c001cc6d:	6a 0f                	push   0xf
c001cc6f:	6a 00                	push   0x0
c001cc71:	e8 7f ff ff ff       	call   c001cbf5 <combineColours(unsigned char, unsigned char)>
c001cc76:	59                   	pop    ecx
c001cc77:	b9 0a 00 00 00       	mov    ecx,0xa
c001cc7c:	5b                   	pop    ebx
c001cc7d:	0f b6 d8             	movzx  ebx,al
c001cc80:	89 d0                	mov    eax,edx
c001cc82:	53                   	push   ebx
c001cc83:	99                   	cdq    
c001cc84:	f7 fd                	idiv   ebp
c001cc86:	99                   	cdq    
c001cc87:	f7 f9                	idiv   ecx
c001cc89:	83 c2 30             	add    edx,0x30
c001cc8c:	0f b6 d2             	movzx  edx,dl
c001cc8f:	52                   	push   edx
c001cc90:	e8 4f ff ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001cc95:	5f                   	pop    edi
c001cc96:	bf e8 03 00 00       	mov    edi,0x3e8
c001cc9b:	5a                   	pop    edx
c001cc9c:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001cca2:	53                   	push   ebx
c001cca3:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cca8:	99                   	cdq    
c001cca9:	f7 ff                	idiv   edi
c001ccab:	99                   	cdq    
c001ccac:	f7 f9                	idiv   ecx
c001ccae:	8d 42 30             	lea    eax,[edx+0x30]
c001ccb1:	0f b6 c0             	movzx  eax,al
c001ccb4:	50                   	push   eax
c001ccb5:	e8 2a ff ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001ccba:	5f                   	pop    edi
c001ccbb:	bf 64 00 00 00       	mov    edi,0x64
c001ccc0:	5a                   	pop    edx
c001ccc1:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ccc7:	53                   	push   ebx
c001ccc8:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cccd:	99                   	cdq    
c001ccce:	f7 ff                	idiv   edi
c001ccd0:	99                   	cdq    
c001ccd1:	f7 f9                	idiv   ecx
c001ccd3:	8d 42 30             	lea    eax,[edx+0x30]
c001ccd6:	0f b6 c0             	movzx  eax,al
c001ccd9:	50                   	push   eax
c001ccda:	e8 05 ff ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001ccdf:	5a                   	pop    edx
c001cce0:	5a                   	pop    edx
c001cce1:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001cce7:	53                   	push   ebx
c001cce8:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cced:	99                   	cdq    
c001ccee:	f7 f9                	idiv   ecx
c001ccf0:	99                   	cdq    
c001ccf1:	f7 f9                	idiv   ecx
c001ccf3:	8d 42 30             	lea    eax,[edx+0x30]
c001ccf6:	0f b6 c0             	movzx  eax,al
c001ccf9:	50                   	push   eax
c001ccfa:	e8 e5 fe ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001ccff:	5a                   	pop    edx
c001cd00:	5a                   	pop    edx
c001cd01:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001cd07:	53                   	push   ebx
c001cd08:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cd0d:	99                   	cdq    
c001cd0e:	f7 f9                	idiv   ecx
c001cd10:	83 c2 30             	add    edx,0x30
c001cd13:	0f b6 d2             	movzx  edx,dl
c001cd16:	52                   	push   edx
c001cd17:	e8 c8 fe ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001cd1c:	5a                   	pop    edx
c001cd1d:	5a                   	pop    edx
c001cd1e:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cd24:	53                   	push   ebx
c001cd25:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd2a:	99                   	cdq    
c001cd2b:	f7 fd                	idiv   ebp
c001cd2d:	99                   	cdq    
c001cd2e:	f7 f9                	idiv   ecx
c001cd30:	8d 42 30             	lea    eax,[edx+0x30]
c001cd33:	0f b6 c0             	movzx  eax,al
c001cd36:	50                   	push   eax
c001cd37:	e8 a8 fe ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001cd3c:	5d                   	pop    ebp
c001cd3d:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cd42:	5a                   	pop    edx
c001cd43:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cd49:	53                   	push   ebx
c001cd4a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd4f:	99                   	cdq    
c001cd50:	f7 fd                	idiv   ebp
c001cd52:	99                   	cdq    
c001cd53:	f7 f9                	idiv   ecx
c001cd55:	8d 42 30             	lea    eax,[edx+0x30]
c001cd58:	0f b6 c0             	movzx  eax,al
c001cd5b:	50                   	push   eax
c001cd5c:	e8 83 fe ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001cd61:	5d                   	pop    ebp
c001cd62:	5a                   	pop    edx
c001cd63:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cd69:	53                   	push   ebx
c001cd6a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd6f:	99                   	cdq    
c001cd70:	f7 ff                	idiv   edi
c001cd72:	99                   	cdq    
c001cd73:	f7 f9                	idiv   ecx
c001cd75:	8d 42 30             	lea    eax,[edx+0x30]
c001cd78:	0f b6 c0             	movzx  eax,al
c001cd7b:	50                   	push   eax
c001cd7c:	e8 63 fe ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001cd81:	5f                   	pop    edi
c001cd82:	5d                   	pop    ebp
c001cd83:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cd89:	53                   	push   ebx
c001cd8a:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cd8f:	99                   	cdq    
c001cd90:	f7 f9                	idiv   ecx
c001cd92:	99                   	cdq    
c001cd93:	f7 f9                	idiv   ecx
c001cd95:	8d 42 30             	lea    eax,[edx+0x30]
c001cd98:	0f b6 c0             	movzx  eax,al
c001cd9b:	50                   	push   eax
c001cd9c:	e8 43 fe ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001cda1:	5a                   	pop    edx
c001cda2:	5f                   	pop    edi
c001cda3:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cda9:	53                   	push   ebx
c001cdaa:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cdaf:	99                   	cdq    
c001cdb0:	f7 f9                	idiv   ecx
c001cdb2:	83 c2 30             	add    edx,0x30
c001cdb5:	0f b6 d2             	movzx  edx,dl
c001cdb8:	52                   	push   edx
c001cdb9:	e8 26 fe ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001cdbe:	83 c4 10             	add    esp,0x10
c001cdc1:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cdc7:	eb 05                	jmp    c001cdce <ATA::read(unsigned long long, int, void*)+0x1cc>
c001cdc9:	be 01 00 00 00       	mov    esi,0x1
c001cdce:	83 c4 0c             	add    esp,0xc
c001cdd1:	89 f0                	mov    eax,esi
c001cdd3:	5b                   	pop    ebx
c001cdd4:	5e                   	pop    esi
c001cdd5:	5f                   	pop    edi
c001cdd6:	5d                   	pop    ebp
c001cdd7:	c3                   	ret    

c001cdd8 <ATA::write(unsigned long long, int, void*)>:
c001cdd8:	55                   	push   ebp
c001cdd9:	57                   	push   edi
c001cdda:	56                   	push   esi
c001cddb:	be 04 00 00 00       	mov    esi,0x4
c001cde0:	53                   	push   ebx
c001cde1:	83 ec 0c             	sub    esp,0xc
c001cde4:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001cde8:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001cdec:	8d 7b ff             	lea    edi,[ebx-0x1]
c001cdef:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001cdf3:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001cdf7:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001cdfd:	0f 87 9c 01 00 00    	ja     c001cf9f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001ce03:	be 06 00 00 00       	mov    esi,0x6
c001ce08:	85 c9                	test   ecx,ecx
c001ce0a:	0f 84 8f 01 00 00    	je     c001cf9f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001ce10:	55                   	push   ebp
c001ce11:	55                   	push   ebp
c001ce12:	6a 01                	push   0x1
c001ce14:	51                   	push   ecx
c001ce15:	53                   	push   ebx
c001ce16:	52                   	push   edx
c001ce17:	50                   	push   eax
c001ce18:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ce1c:	e8 37 f9 ff ff       	call   c001c758 <ATA::access(unsigned long long, int, void*, bool)>
c001ce21:	83 c4 20             	add    esp,0x20
c001ce24:	89 c6                	mov    esi,eax
c001ce26:	85 c0                	test   eax,eax
c001ce28:	0f 85 6c 01 00 00    	jne    c001cf9a <ATA::write(unsigned long long, int, void*)+0x1c2>
c001ce2e:	01 1d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebx
c001ce34:	bd 10 27 00 00       	mov    ebp,0x2710
c001ce39:	50                   	push   eax
c001ce3a:	50                   	push   eax
c001ce3b:	6a 0f                	push   0xf
c001ce3d:	6a 00                	push   0x0
c001ce3f:	e8 b1 fd ff ff       	call   c001cbf5 <combineColours(unsigned char, unsigned char)>
c001ce44:	5a                   	pop    edx
c001ce45:	0f b6 d8             	movzx  ebx,al
c001ce48:	59                   	pop    ecx
c001ce49:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce4e:	53                   	push   ebx
c001ce4f:	b9 0a 00 00 00       	mov    ecx,0xa
c001ce54:	99                   	cdq    
c001ce55:	f7 fd                	idiv   ebp
c001ce57:	99                   	cdq    
c001ce58:	f7 f9                	idiv   ecx
c001ce5a:	8d 42 30             	lea    eax,[edx+0x30]
c001ce5d:	0f b6 c0             	movzx  eax,al
c001ce60:	50                   	push   eax
c001ce61:	e8 7e fd ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001ce66:	5f                   	pop    edi
c001ce67:	bf e8 03 00 00       	mov    edi,0x3e8
c001ce6c:	5a                   	pop    edx
c001ce6d:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001ce73:	53                   	push   ebx
c001ce74:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce79:	99                   	cdq    
c001ce7a:	f7 ff                	idiv   edi
c001ce7c:	99                   	cdq    
c001ce7d:	f7 f9                	idiv   ecx
c001ce7f:	8d 42 30             	lea    eax,[edx+0x30]
c001ce82:	0f b6 c0             	movzx  eax,al
c001ce85:	50                   	push   eax
c001ce86:	e8 59 fd ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001ce8b:	5f                   	pop    edi
c001ce8c:	bf 64 00 00 00       	mov    edi,0x64
c001ce91:	5a                   	pop    edx
c001ce92:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001ce98:	53                   	push   ebx
c001ce99:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001ce9e:	99                   	cdq    
c001ce9f:	f7 ff                	idiv   edi
c001cea1:	99                   	cdq    
c001cea2:	f7 f9                	idiv   ecx
c001cea4:	8d 42 30             	lea    eax,[edx+0x30]
c001cea7:	0f b6 c0             	movzx  eax,al
c001ceaa:	50                   	push   eax
c001ceab:	e8 34 fd ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001ceb0:	5a                   	pop    edx
c001ceb1:	5a                   	pop    edx
c001ceb2:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001ceb8:	53                   	push   ebx
c001ceb9:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cebe:	99                   	cdq    
c001cebf:	f7 f9                	idiv   ecx
c001cec1:	99                   	cdq    
c001cec2:	f7 f9                	idiv   ecx
c001cec4:	8d 42 30             	lea    eax,[edx+0x30]
c001cec7:	0f b6 c0             	movzx  eax,al
c001ceca:	50                   	push   eax
c001cecb:	e8 14 fd ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001ced0:	5a                   	pop    edx
c001ced1:	5a                   	pop    edx
c001ced2:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001ced8:	53                   	push   ebx
c001ced9:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001cede:	99                   	cdq    
c001cedf:	f7 f9                	idiv   ecx
c001cee1:	8d 42 30             	lea    eax,[edx+0x30]
c001cee4:	0f b6 c0             	movzx  eax,al
c001cee7:	50                   	push   eax
c001cee8:	e8 f7 fc ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001ceed:	5a                   	pop    edx
c001ceee:	5a                   	pop    edx
c001ceef:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001cef5:	53                   	push   ebx
c001cef6:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cefb:	99                   	cdq    
c001cefc:	f7 fd                	idiv   ebp
c001cefe:	99                   	cdq    
c001ceff:	f7 f9                	idiv   ecx
c001cf01:	8d 42 30             	lea    eax,[edx+0x30]
c001cf04:	0f b6 c0             	movzx  eax,al
c001cf07:	50                   	push   eax
c001cf08:	e8 d7 fc ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001cf0d:	5d                   	pop    ebp
c001cf0e:	bd e8 03 00 00       	mov    ebp,0x3e8
c001cf13:	5a                   	pop    edx
c001cf14:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001cf1a:	53                   	push   ebx
c001cf1b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf20:	99                   	cdq    
c001cf21:	f7 fd                	idiv   ebp
c001cf23:	99                   	cdq    
c001cf24:	f7 f9                	idiv   ecx
c001cf26:	8d 42 30             	lea    eax,[edx+0x30]
c001cf29:	0f b6 c0             	movzx  eax,al
c001cf2c:	50                   	push   eax
c001cf2d:	e8 b2 fc ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001cf32:	5d                   	pop    ebp
c001cf33:	5a                   	pop    edx
c001cf34:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001cf3a:	53                   	push   ebx
c001cf3b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf40:	99                   	cdq    
c001cf41:	f7 ff                	idiv   edi
c001cf43:	99                   	cdq    
c001cf44:	f7 f9                	idiv   ecx
c001cf46:	8d 42 30             	lea    eax,[edx+0x30]
c001cf49:	0f b6 c0             	movzx  eax,al
c001cf4c:	50                   	push   eax
c001cf4d:	e8 92 fc ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001cf52:	5f                   	pop    edi
c001cf53:	5d                   	pop    ebp
c001cf54:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001cf5a:	53                   	push   ebx
c001cf5b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf60:	99                   	cdq    
c001cf61:	f7 f9                	idiv   ecx
c001cf63:	99                   	cdq    
c001cf64:	f7 f9                	idiv   ecx
c001cf66:	8d 42 30             	lea    eax,[edx+0x30]
c001cf69:	0f b6 c0             	movzx  eax,al
c001cf6c:	50                   	push   eax
c001cf6d:	e8 72 fc ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001cf72:	5a                   	pop    edx
c001cf73:	5f                   	pop    edi
c001cf74:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001cf7a:	53                   	push   ebx
c001cf7b:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001cf80:	99                   	cdq    
c001cf81:	f7 f9                	idiv   ecx
c001cf83:	83 c2 30             	add    edx,0x30
c001cf86:	0f b6 d2             	movzx  edx,dl
c001cf89:	52                   	push   edx
c001cf8a:	e8 55 fc ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001cf8f:	83 c4 10             	add    esp,0x10
c001cf92:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001cf98:	eb 05                	jmp    c001cf9f <ATA::write(unsigned long long, int, void*)+0x1c7>
c001cf9a:	be 01 00 00 00       	mov    esi,0x1
c001cf9f:	83 c4 0c             	add    esp,0xc
c001cfa2:	89 f0                	mov    eax,esi
c001cfa4:	5b                   	pop    ebx
c001cfa5:	5e                   	pop    esi
c001cfa6:	5f                   	pop    edi
c001cfa7:	5d                   	pop    ebp
c001cfa8:	c3                   	ret    
c001cfa9:	90                   	nop

c001cfaa <ATAPI::write(unsigned long long, int, void*)>:
c001cfaa:	b8 03 00 00 00       	mov    eax,0x3
c001cfaf:	c3                   	ret    

c001cfb0 <ATAPI::close(int, int, void*)>:
c001cfb0:	83 ec 0c             	sub    esp,0xc
c001cfb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfb7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001cfbd:	85 c0                	test   eax,eax
c001cfbf:	74 0c                	je     c001cfcd <ATAPI::close(int, int, void*)+0x1d>
c001cfc1:	83 ec 0c             	sub    esp,0xc
c001cfc4:	8b 10                	mov    edx,DWORD PTR [eax]
c001cfc6:	50                   	push   eax
c001cfc7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001cfca:	83 c4 10             	add    esp,0x10
c001cfcd:	31 c0                	xor    eax,eax
c001cfcf:	83 c4 0c             	add    esp,0xc
c001cfd2:	c3                   	ret    
c001cfd3:	90                   	nop

c001cfd4 <ATAPI::ATAPI()>:
c001cfd4:	83 ec 0c             	sub    esp,0xc
c001cfd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cfdb:	83 ec 04             	sub    esp,0x4
c001cfde:	68 00 08 00 00       	push   0x800
c001cfe3:	68 9d 2d 02 c0       	push   0xc0022d9d
c001cfe8:	50                   	push   eax
c001cfe9:	e8 28 fa fe ff       	call   c000ca16 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001cfee:	83 c4 10             	add    esp,0x10
c001cff1:	ba b8 2c 02 c0       	mov    edx,0xc0022cb8
c001cff6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001cffa:	89 10                	mov    DWORD PTR [eax],edx
c001cffc:	90                   	nop
c001cffd:	83 c4 0c             	add    esp,0xc
c001d000:	c3                   	ret    
c001d001:	90                   	nop

c001d002 <ATAPI::readyForCommand()>:
c001d002:	56                   	push   esi
c001d003:	53                   	push   ebx
c001d004:	53                   	push   ebx
c001d005:	31 db                	xor    ebx,ebx
c001d007:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001d00b:	51                   	push   ecx
c001d00c:	6a 0c                	push   0xc
c001d00e:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c001d015:	50                   	push   eax
c001d016:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c001d01c:	e8 a3 e8 ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001d021:	83 c4 10             	add    esp,0x10
c001d024:	a8 88                	test   al,0x88
c001d026:	74 25                	je     c001d04d <ATAPI::readyForCommand()+0x4b>
c001d028:	43                   	inc    ebx
c001d029:	81 fb 9f 05 00 00    	cmp    ebx,0x59f
c001d02f:	7e da                	jle    c001d00b <ATAPI::readyForCommand()+0x9>
c001d031:	83 ec 0c             	sub    esp,0xc
c001d034:	68 5e 01 00 00       	push   0x15e
c001d039:	e8 2a 8e ff ff       	call   c0015e68 <milliTenthSleep(unsigned int)>
c001d03e:	83 c4 10             	add    esp,0x10
c001d041:	81 fb dc 05 00 00    	cmp    ebx,0x5dc
c001d047:	75 c2                	jne    c001d00b <ATAPI::readyForCommand()+0x9>
c001d049:	31 c0                	xor    eax,eax
c001d04b:	eb 02                	jmp    c001d04f <ATAPI::readyForCommand()+0x4d>
c001d04d:	b0 01                	mov    al,0x1
c001d04f:	5a                   	pop    edx
c001d050:	5b                   	pop    ebx
c001d051:	5e                   	pop    esi
c001d052:	c3                   	ret    
c001d053:	90                   	nop

c001d054 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c001d054:	55                   	push   ebp
c001d055:	57                   	push   edi
c001d056:	56                   	push   esi
c001d057:	53                   	push   ebx
c001d058:	83 ec 20             	sub    esp,0x20
c001d05b:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c001d05f:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c001d063:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001d067:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c001d06b:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d06f:	6a 01                	push   0x1
c001d071:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d078:	50                   	push   eax
c001d079:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d07f:	e8 88 e9 ff ff       	call   c001ba0c <IDE::enableIRQs(unsigned char, bool)>
c001d084:	5e                   	pop    esi
c001d085:	58                   	pop    eax
c001d086:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d08d:	50                   	push   eax
c001d08e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d094:	e8 45 e7 ff ff       	call   c001b7de <IDE::prepareInterrupt(unsigned char)>
c001d099:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d09c:	e8 61 ff ff ff       	call   c001d002 <ATAPI::readyForCommand()>
c001d0a1:	83 c4 10             	add    esp,0x10
c001d0a4:	84 c0                	test   al,al
c001d0a6:	75 0a                	jne    c001d0b2 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c001d0a8:	bb 01 00 00 00       	mov    ebx,0x1
c001d0ad:	e9 60 02 00 00       	jmp    c001d312 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d0b2:	8b 87 74 01 00 00    	mov    eax,DWORD PTR [edi+0x174]
c001d0b8:	c1 e0 04             	shl    eax,0x4
c001d0bb:	0f b6 c0             	movzx  eax,al
c001d0be:	50                   	push   eax
c001d0bf:	6a 06                	push   0x6
c001d0c1:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0c8:	50                   	push   eax
c001d0c9:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0cf:	e8 30 e7 ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0d4:	6a 00                	push   0x0
c001d0d6:	6a 01                	push   0x1
c001d0d8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0df:	50                   	push   eax
c001d0e0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d0e6:	e8 19 e7 ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d0eb:	83 c4 20             	add    esp,0x20
c001d0ee:	0f b6 c3             	movzx  eax,bl
c001d0f1:	0f b6 df             	movzx  ebx,bh
c001d0f4:	50                   	push   eax
c001d0f5:	6a 04                	push   0x4
c001d0f7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d0fe:	50                   	push   eax
c001d0ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d105:	e8 fa e6 ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d10a:	53                   	push   ebx
c001d10b:	6a 05                	push   0x5
c001d10d:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d114:	50                   	push   eax
c001d115:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d11b:	e8 e4 e6 ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d120:	83 c4 20             	add    esp,0x20
c001d123:	68 a0 00 00 00       	push   0xa0
c001d128:	6a 07                	push   0x7
c001d12a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d131:	50                   	push   eax
c001d132:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d138:	e8 c7 e6 ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d13d:	83 c4 0c             	add    esp,0xc
c001d140:	6a 01                	push   0x1
c001d142:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d149:	50                   	push   eax
c001d14a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d150:	e8 97 f1 ff ff       	call   c001c2ec <IDE::polling(unsigned char, unsigned int)>
c001d155:	83 c4 10             	add    esp,0x10
c001d158:	0f b6 d8             	movzx  ebx,al
c001d15b:	8b 87 70 01 00 00    	mov    eax,DWORD PTR [edi+0x170]
c001d161:	85 db                	test   ebx,ebx
c001d163:	74 20                	je     c001d185 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c001d165:	53                   	push   ebx
c001d166:	0f b6 c0             	movzx  eax,al
c001d169:	0f b6 97 74 01 00 00 	movzx  edx,BYTE PTR [edi+0x174]
c001d170:	52                   	push   edx
c001d171:	50                   	push   eax
c001d172:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d178:	e8 b5 f0 ff ff       	call   c001c232 <IDE::printError(unsigned char, unsigned char, unsigned char)>
c001d17d:	83 c4 10             	add    esp,0x10
c001d180:	e9 8d 01 00 00       	jmp    c001d312 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d185:	0f b6 c0             	movzx  eax,al
c001d188:	53                   	push   ebx
c001d189:	53                   	push   ebx
c001d18a:	50                   	push   eax
c001d18b:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d191:	e8 5c e6 ff ff       	call   c001b7f2 <IDE::getBase(unsigned char)>
c001d196:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c001d19a:	b9 06 00 00 00       	mov    ecx,0x6
c001d19f:	89 c2                	mov    edx,eax
c001d1a1:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c001d1a4:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c001d1a8:	83 c4 10             	add    esp,0x10
c001d1ab:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c001d1b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d1b4:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d1ba:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d1c1:	85 db                	test   ebx,ebx
c001d1c3:	0f 84 ec 00 00 00    	je     c001d2b5 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x261>
c001d1c9:	51                   	push   ecx
c001d1ca:	51                   	push   ecx
c001d1cb:	52                   	push   edx
c001d1cc:	50                   	push   eax
c001d1cd:	e8 a0 e7 ff ff       	call   c001b972 <IDE::waitInterrupt(unsigned char)>
c001d1d2:	83 c4 10             	add    esp,0x10
c001d1d5:	84 c0                	test   al,al
c001d1d7:	0f 84 cb fe ff ff    	je     c001d0a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d1dd:	56                   	push   esi
c001d1de:	56                   	push   esi
c001d1df:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1e6:	50                   	push   eax
c001d1e7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d1ed:	e8 ec e5 ff ff       	call   c001b7de <IDE::prepareInterrupt(unsigned char)>
c001d1f2:	83 c4 0c             	add    esp,0xc
c001d1f5:	6a 04                	push   0x4
c001d1f7:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d1fe:	50                   	push   eax
c001d1ff:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d205:	e8 ba e6 ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001d20a:	83 c4 0c             	add    esp,0xc
c001d20d:	89 c6                	mov    esi,eax
c001d20f:	6a 05                	push   0x5
c001d211:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d218:	50                   	push   eax
c001d219:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d21f:	e8 a0 e6 ff ff       	call   c001b8c4 <IDE::read(unsigned char, unsigned char)>
c001d224:	89 f1                	mov    ecx,esi
c001d226:	0f b6 c0             	movzx  eax,al
c001d229:	0f b6 f1             	movzx  esi,cl
c001d22c:	c1 e0 08             	shl    eax,0x8
c001d22f:	09 c6                	or     esi,eax
c001d231:	d1 fe                	sar    esi,1
c001d233:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c001d237:	83 c4 10             	add    esp,0x10
c001d23a:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001d23f:	74 41                	je     c001d282 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x22e>
c001d241:	31 c9                	xor    ecx,ecx
c001d243:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d249:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d250:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c001d254:	75 0a                	jne    c001d260 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x20c>
c001d256:	01 c9                	add    ecx,ecx
c001d258:	01 cd                	add    ebp,ecx
c001d25a:	4b                   	dec    ebx
c001d25b:	e9 54 ff ff ff       	jmp    c001d1b4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x160>
c001d260:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c001d265:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001d269:	51                   	push   ecx
c001d26a:	51                   	push   ecx
c001d26b:	52                   	push   edx
c001d26c:	50                   	push   eax
c001d26d:	e8 80 e5 ff ff       	call   c001b7f2 <IDE::getBase(unsigned char)>
c001d272:	89 c2                	mov    edx,eax
c001d274:	89 f0                	mov    eax,esi
c001d276:	66 ef                	out    dx,ax
c001d278:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d27c:	83 c4 10             	add    esp,0x10
c001d27f:	41                   	inc    ecx
c001d280:	eb c1                	jmp    c001d243 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1ef>
c001d282:	31 f6                	xor    esi,esi
c001d284:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c001d28a:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c001d291:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c001d295:	75 06                	jne    c001d29d <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x249>
c001d297:	01 f6                	add    esi,esi
c001d299:	01 f5                	add    ebp,esi
c001d29b:	eb bd                	jmp    c001d25a <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x206>
c001d29d:	51                   	push   ecx
c001d29e:	51                   	push   ecx
c001d29f:	52                   	push   edx
c001d2a0:	50                   	push   eax
c001d2a1:	e8 4c e5 ff ff       	call   c001b7f2 <IDE::getBase(unsigned char)>
c001d2a6:	89 c2                	mov    edx,eax
c001d2a8:	66 ed                	in     ax,dx
c001d2aa:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c001d2af:	83 c4 10             	add    esp,0x10
c001d2b2:	46                   	inc    esi
c001d2b3:	eb cf                	jmp    c001d284 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x230>
c001d2b5:	51                   	push   ecx
c001d2b6:	51                   	push   ecx
c001d2b7:	52                   	push   edx
c001d2b8:	50                   	push   eax
c001d2b9:	e8 b4 e6 ff ff       	call   c001b972 <IDE::waitInterrupt(unsigned char)>
c001d2be:	83 c4 10             	add    esp,0x10
c001d2c1:	84 c0                	test   al,al
c001d2c3:	0f 84 df fd ff ff    	je     c001d0a8 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c001d2c9:	bb a0 86 01 00       	mov    ebx,0x186a0
c001d2ce:	52                   	push   edx
c001d2cf:	52                   	push   edx
c001d2d0:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2d7:	50                   	push   eax
c001d2d8:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2de:	e8 fb e4 ff ff       	call   c001b7de <IDE::prepareInterrupt(unsigned char)>
c001d2e3:	83 c4 10             	add    esp,0x10
c001d2e6:	50                   	push   eax
c001d2e7:	50                   	push   eax
c001d2e8:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c001d2ef:	50                   	push   eax
c001d2f0:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c001d2f6:	e8 f7 e4 ff ff       	call   c001b7f2 <IDE::getBase(unsigned char)>
c001d2fb:	8d 50 07             	lea    edx,[eax+0x7]
c001d2fe:	ec                   	in     al,dx
c001d2ff:	83 c4 10             	add    esp,0x10
c001d302:	a8 88                	test   al,0x88
c001d304:	74 0a                	je     c001d310 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2bc>
c001d306:	4b                   	dec    ebx
c001d307:	75 dd                	jne    c001d2e6 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x292>
c001d309:	bb 02 00 00 00       	mov    ebx,0x2
c001d30e:	eb 02                	jmp    c001d312 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2be>
c001d310:	31 db                	xor    ebx,ebx
c001d312:	83 c4 1c             	add    esp,0x1c
c001d315:	89 d8                	mov    eax,ebx
c001d317:	5b                   	pop    ebx
c001d318:	5e                   	pop    esi
c001d319:	5f                   	pop    edi
c001d31a:	5d                   	pop    ebp
c001d31b:	c3                   	ret    

c001d31c <ATAPI::diskRemoved()>:
c001d31c:	53                   	push   ebx
c001d31d:	83 ec 14             	sub    esp,0x14
c001d320:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001d324:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d32b:	ff b3 80 01 00 00    	push   DWORD PTR [ebx+0x180]
c001d331:	e8 7c 06 ff ff       	call   c000d9b2 <LogicalDisk::unmount()>
c001d336:	58                   	pop    eax
c001d337:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001d33d:	e8 52 10 ff ff       	call   c000e394 <VCache::writeWriteBuffer()>
c001d342:	8b 83 58 01 00 00    	mov    eax,DWORD PTR [ebx+0x158]
c001d348:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d34c:	83 c4 18             	add    esp,0x18
c001d34f:	5b                   	pop    ebx
c001d350:	e9 2f 10 ff ff       	jmp    c000e384 <VCache::invalidateReadBuffer()>
c001d355:	90                   	nop

c001d356 <ATAPI::eject()>:
c001d356:	57                   	push   edi
c001d357:	b9 03 00 00 00       	mov    ecx,0x3
c001d35c:	53                   	push   ebx
c001d35d:	83 ec 14             	sub    esp,0x14
c001d360:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d364:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d368:	fc                   	cld    
c001d369:	31 c0                	xor    eax,eax
c001d36b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d36d:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001d372:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001d377:	50                   	push   eax
c001d378:	50                   	push   eax
c001d379:	6a 00                	push   0x0
c001d37b:	6a 00                	push   0x0
c001d37d:	6a 00                	push   0x0
c001d37f:	6a 02                	push   0x2
c001d381:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d385:	50                   	push   eax
c001d386:	53                   	push   ebx
c001d387:	e8 c8 fc ff ff       	call   c001d054 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d38c:	83 c4 14             	add    esp,0x14
c001d38f:	53                   	push   ebx
c001d390:	e8 87 ff ff ff       	call   c001d31c <ATAPI::diskRemoved()>
c001d395:	83 c4 24             	add    esp,0x24
c001d398:	31 c0                	xor    eax,eax
c001d39a:	5b                   	pop    ebx
c001d39b:	5f                   	pop    edi
c001d39c:	c3                   	ret    
c001d39d:	90                   	nop

c001d39e <ATAPI::diskInserted()>:
c001d39e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d3a2:	c6 80 7c 01 00 00 01 	mov    BYTE PTR [eax+0x17c],0x1
c001d3a9:	c3                   	ret    

c001d3aa <ATAPI::detectMedia()>:
c001d3aa:	56                   	push   esi
c001d3ab:	53                   	push   ebx
c001d3ac:	83 ec 28             	sub    esp,0x28
c001d3af:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001d3b3:	6a 0c                	push   0xc
c001d3b5:	6a 00                	push   0x0
c001d3b7:	8d 74 24 0e          	lea    esi,[esp+0xe]
c001d3bb:	56                   	push   esi
c001d3bc:	e8 2f 31 fe ff       	call   c00004f0 <memset>
c001d3c1:	58                   	pop    eax
c001d3c2:	5a                   	pop    edx
c001d3c3:	6a 00                	push   0x0
c001d3c5:	6a 00                	push   0x0
c001d3c7:	6a 00                	push   0x0
c001d3c9:	6a 00                	push   0x0
c001d3cb:	56                   	push   esi
c001d3cc:	53                   	push   ebx
c001d3cd:	e8 82 fc ff ff       	call   c001d054 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d3d2:	83 c4 1c             	add    esp,0x1c
c001d3d5:	6a 0c                	push   0xc
c001d3d7:	6a 00                	push   0x0
c001d3d9:	56                   	push   esi
c001d3da:	e8 11 31 fe ff       	call   c00004f0 <memset>
c001d3df:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c001d3e4:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c001d3e9:	59                   	pop    ecx
c001d3ea:	58                   	pop    eax
c001d3eb:	6a 01                	push   0x1
c001d3ed:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c001d3f1:	50                   	push   eax
c001d3f2:	6a 00                	push   0x0
c001d3f4:	6a 12                	push   0x12
c001d3f6:	56                   	push   esi
c001d3f7:	53                   	push   ebx
c001d3f8:	e8 57 fc ff ff       	call   c001d054 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d3fd:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c001d401:	83 c4 20             	add    esp,0x20
c001d404:	83 e0 7f             	and    eax,0x7f
c001d407:	83 f8 70             	cmp    eax,0x70
c001d40a:	74 15                	je     c001d421 <ATAPI::detectMedia()+0x77>
c001d40c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d413:	75 0c                	jne    c001d421 <ATAPI::detectMedia()+0x77>
c001d415:	83 ec 0c             	sub    esp,0xc
c001d418:	53                   	push   ebx
c001d419:	e8 80 ff ff ff       	call   c001d39e <ATAPI::diskInserted()>
c001d41e:	83 c4 10             	add    esp,0x10
c001d421:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c001d425:	83 e0 0f             	and    eax,0xf
c001d428:	83 f8 02             	cmp    eax,0x2
c001d42b:	75 1b                	jne    c001d448 <ATAPI::detectMedia()+0x9e>
c001d42d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c001d432:	75 2d                	jne    c001d461 <ATAPI::detectMedia()+0xb7>
c001d434:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d43b:	74 24                	je     c001d461 <ATAPI::detectMedia()+0xb7>
c001d43d:	83 ec 0c             	sub    esp,0xc
c001d440:	53                   	push   ebx
c001d441:	e8 d6 fe ff ff       	call   c001d31c <ATAPI::diskRemoved()>
c001d446:	eb 16                	jmp    c001d45e <ATAPI::detectMedia()+0xb4>
c001d448:	85 c0                	test   eax,eax
c001d44a:	75 15                	jne    c001d461 <ATAPI::detectMedia()+0xb7>
c001d44c:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d453:	75 0c                	jne    c001d461 <ATAPI::detectMedia()+0xb7>
c001d455:	83 ec 0c             	sub    esp,0xc
c001d458:	53                   	push   ebx
c001d459:	e8 40 ff ff ff       	call   c001d39e <ATAPI::diskInserted()>
c001d45e:	83 c4 10             	add    esp,0x10
c001d461:	83 c4 24             	add    esp,0x24
c001d464:	5b                   	pop    ebx
c001d465:	5e                   	pop    esi
c001d466:	c3                   	ret    
c001d467:	90                   	nop

c001d468 <ATAPI::open(int, int, void*)>:
c001d468:	56                   	push   esi
c001d469:	53                   	push   ebx
c001d46a:	50                   	push   eax
c001d46b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d46f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d473:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d477:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d47d:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c001d483:	c1 e0 06             	shl    eax,0x6
c001d486:	01 d0                	add    eax,edx
c001d488:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c001d48f:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c001d495:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c001d49c:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001d4a6:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d4ac:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001d4b3:	6a 04                	push   0x4
c001d4b5:	6a 0c                	push   0xc
c001d4b7:	51                   	push   ecx
c001d4b8:	52                   	push   edx
c001d4b9:	e8 46 e3 ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4be:	90                   	nop
c001d4bf:	90                   	nop
c001d4c0:	6a 00                	push   0x0
c001d4c2:	6a 0c                	push   0xc
c001d4c4:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c001d4cb:	50                   	push   eax
c001d4cc:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c001d4d2:	e8 2d e3 ff ff       	call   c001b804 <IDE::write(unsigned char, unsigned char, unsigned char)>
c001d4d7:	83 c4 14             	add    esp,0x14
c001d4da:	68 78 01 00 00       	push   0x178
c001d4df:	e8 d2 a5 fe ff       	call   c0007ab6 <malloc>
c001d4e4:	83 c4 0c             	add    esp,0xc
c001d4e7:	89 c6                	mov    esi,eax
c001d4e9:	6a 00                	push   0x0
c001d4eb:	68 ff ff ff 7f       	push   0x7fffffff
c001d4f0:	6a 00                	push   0x0
c001d4f2:	6a 00                	push   0x0
c001d4f4:	53                   	push   ebx
c001d4f5:	68 4f 2e 02 c0       	push   0xc0022e4f
c001d4fa:	50                   	push   eax
c001d4fb:	e8 f0 02 ff ff       	call   c000d7f0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001d500:	83 c4 14             	add    esp,0x14
c001d503:	56                   	push   esi
c001d504:	e8 a7 03 ff ff       	call   c000d8b0 <LogicalDisk::assignDriveLetter()>
c001d509:	5a                   	pop    edx
c001d50a:	0f be c0             	movsx  eax,al
c001d50d:	59                   	pop    ecx
c001d50e:	50                   	push   eax
c001d50f:	68 a0 2c 02 c0       	push   0xc0022ca0
c001d514:	e8 2c d4 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d519:	58                   	pop    eax
c001d51a:	5a                   	pop    edx
c001d51b:	56                   	push   esi
c001d51c:	53                   	push   ebx
c001d51d:	e8 28 f1 fe ff       	call   c000c64a <Device::addChild(Device*)>
c001d522:	89 b3 80 01 00 00    	mov    DWORD PTR [ebx+0x180],esi
c001d528:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d52b:	e8 4e f5 fe ff       	call   c000ca7e <PhysicalDisk::startCache()>
c001d530:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c001d537:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d53a:	e8 6b fe ff ff       	call   c001d3aa <ATAPI::detectMedia()>
c001d53f:	83 c4 14             	add    esp,0x14
c001d542:	31 c0                	xor    eax,eax
c001d544:	5b                   	pop    ebx
c001d545:	5e                   	pop    esi
c001d546:	c3                   	ret    
c001d547:	90                   	nop

c001d548 <ATAPI::read(unsigned long long, int, void*)>:
c001d548:	55                   	push   ebp
c001d549:	57                   	push   edi
c001d54a:	56                   	push   esi
c001d54b:	53                   	push   ebx
c001d54c:	83 ec 1c             	sub    esp,0x1c
c001d54f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001d553:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001d557:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001d55b:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d562:	74 3c                	je     c001d5a0 <ATAPI::read(unsigned long long, int, void*)+0x58>
c001d564:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001d568:	b9 03 00 00 00       	mov    ecx,0x3
c001d56d:	fc                   	cld    
c001d56e:	31 c0                	xor    eax,eax
c001d570:	0f ce                	bswap  esi
c001d572:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001d574:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c001d579:	89 74 24 06          	mov    DWORD PTR [esp+0x6],esi
c001d57d:	89 e8                	mov    eax,ebp
c001d57f:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c001d583:	50                   	push   eax
c001d584:	50                   	push   eax
c001d585:	55                   	push   ebp
c001d586:	c1 e5 0b             	shl    ebp,0xb
c001d589:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001d58d:	6a 00                	push   0x0
c001d58f:	55                   	push   ebp
c001d590:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001d594:	50                   	push   eax
c001d595:	53                   	push   ebx
c001d596:	e8 b9 fa ff ff       	call   c001d054 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c001d59b:	83 c4 20             	add    esp,0x20
c001d59e:	eb 1a                	jmp    c001d5ba <ATAPI::read(unsigned long long, int, void*)+0x72>
c001d5a0:	83 ec 0c             	sub    esp,0xc
c001d5a3:	53                   	push   ebx
c001d5a4:	e8 01 fe ff ff       	call   c001d3aa <ATAPI::detectMedia()>
c001d5a9:	83 c4 10             	add    esp,0x10
c001d5ac:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c001d5b3:	75 af                	jne    c001d564 <ATAPI::read(unsigned long long, int, void*)+0x1c>
c001d5b5:	b8 02 00 00 00       	mov    eax,0x2
c001d5ba:	83 c4 1c             	add    esp,0x1c
c001d5bd:	5b                   	pop    ebx
c001d5be:	5e                   	pop    esi
c001d5bf:	5f                   	pop    edi
c001d5c0:	5d                   	pop    ebp
c001d5c1:	c3                   	ret    

c001d5c2 <SATA::close(int, int, void*)>:
c001d5c2:	83 ec 0c             	sub    esp,0xc
c001d5c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d5c9:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001d5cf:	85 c0                	test   eax,eax
c001d5d1:	74 0c                	je     c001d5df <SATA::close(int, int, void*)+0x1d>
c001d5d3:	83 ec 0c             	sub    esp,0xc
c001d5d6:	8b 10                	mov    edx,DWORD PTR [eax]
c001d5d8:	50                   	push   eax
c001d5d9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001d5dc:	83 c4 10             	add    esp,0x10
c001d5df:	31 c0                	xor    eax,eax
c001d5e1:	83 c4 0c             	add    esp,0xc
c001d5e4:	c3                   	ret    
c001d5e5:	90                   	nop

c001d5e6 <SATA::powerSaving(PowerSavingLevel)>:
c001d5e6:	c3                   	ret    
c001d5e7:	90                   	nop

c001d5e8 <SATA::open(int, int, void*)>:
c001d5e8:	56                   	push   esi
c001d5e9:	53                   	push   ebx
c001d5ea:	50                   	push   eax
c001d5eb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001d5ef:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d5f3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c001d5fd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001d603:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001d60d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d611:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001d61b:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001d621:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c001d628:	e8 92 a7 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d62d:	89 c6                	mov    esi,eax
c001d62f:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c001d635:	81 c6 00 10 00 00    	add    esi,0x1000
c001d63b:	e8 7f a7 fe ff       	call   c0007dbf <Phys::allocatePage()>
c001d640:	39 c6                	cmp    esi,eax
c001d642:	74 10                	je     c001d654 <SATA::open(int, int, void*)+0x6c>
c001d644:	83 ec 0c             	sub    esp,0xc
c001d647:	68 e8 2c 02 c0       	push   0xc0022ce8
c001d64c:	e8 28 3c ff ff       	call   c0011279 <KePanic(char const*)>
c001d651:	83 c4 10             	add    esp,0x10
c001d654:	83 ec 0c             	sub    esp,0xc
c001d657:	6a 02                	push   0x2
c001d659:	e8 af bf fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001d65e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c001d664:	6a 03                	push   0x3
c001d666:	50                   	push   eax
c001d667:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001d66d:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001d673:	e8 a8 c6 fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001d678:	83 c4 14             	add    esp,0x14
c001d67b:	53                   	push   ebx
c001d67c:	e8 fd f3 fe ff       	call   c000ca7e <PhysicalDisk::startCache()>
c001d681:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d684:	e8 39 06 ff ff       	call   c000dcc2 <createPartitionsForDisk(PhysicalDisk*)>
c001d689:	83 c4 14             	add    esp,0x14
c001d68c:	31 c0                	xor    eax,eax
c001d68e:	5b                   	pop    ebx
c001d68f:	5e                   	pop    esi
c001d690:	c3                   	ret    
c001d691:	90                   	nop

c001d692 <SATA::SATA()>:
c001d692:	83 ec 0c             	sub    esp,0xc
c001d695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d699:	83 ec 04             	sub    esp,0x4
c001d69c:	68 00 02 00 00       	push   0x200
c001d6a1:	68 fc 2c 02 c0       	push   0xc0022cfc
c001d6a6:	50                   	push   eax
c001d6a7:	e8 6a f3 fe ff       	call   c000ca16 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001d6ac:	83 c4 10             	add    esp,0x10
c001d6af:	ba 6c 2d 02 c0       	mov    edx,0xc0022d6c
c001d6b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d6b8:	89 10                	mov    DWORD PTR [eax],edx
c001d6ba:	90                   	nop
c001d6bb:	83 c4 0c             	add    esp,0xc
c001d6be:	c3                   	ret    
c001d6bf:	90                   	nop

c001d6c0 <SATA::access(unsigned long long, int, void*, bool)>:
c001d6c0:	55                   	push   ebp
c001d6c1:	57                   	push   edi
c001d6c2:	56                   	push   esi
c001d6c3:	53                   	push   ebx
c001d6c4:	83 ec 2c             	sub    esp,0x2c
c001d6c7:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001d6cb:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001d6cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d6d3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001d6d7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c001d6db:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c001d6e0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6e4:	7e 10                	jle    c001d6f6 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c001d6e6:	83 ec 0c             	sub    esp,0xc
c001d6e9:	68 0c 2d 02 c0       	push   0xc0022d0c
c001d6ee:	e8 86 3b ff ff       	call   c0011279 <KePanic(char const*)>
c001d6f3:	83 c4 10             	add    esp,0x10
c001d6f6:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c001d6fc:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c001d702:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001d708:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001d70c:	89 d0                	mov    eax,edx
c001d70e:	c1 e0 07             	shl    eax,0x7
c001d711:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d715:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001d71f:	51                   	push   ecx
c001d720:	8d 42 02             	lea    eax,[edx+0x2]
c001d723:	51                   	push   ecx
c001d724:	c1 e0 07             	shl    eax,0x7
c001d727:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d72b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001d72f:	50                   	push   eax
c001d730:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c001d736:	e8 91 ec ff ff       	call   c001c3cc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001d73b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d73f:	83 c4 10             	add    esp,0x10
c001d742:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001d747:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d74b:	0f 84 57 01 00 00    	je     c001d8a8 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d751:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d755:	c1 e0 09             	shl    eax,0x9
c001d758:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d75d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d761:	74 0e                	je     c001d771 <SATA::access(unsigned long long, int, void*, bool)+0xb1>
c001d763:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c001d769:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c001d76d:	89 c1                	mov    ecx,eax
c001d76f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d771:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d777:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001d77b:	8d 42 02             	lea    eax,[edx+0x2]
c001d77e:	c1 e0 07             	shl    eax,0x7
c001d781:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c001d785:	8b 00                	mov    eax,DWORD PTR [eax]
c001d787:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001d78d:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001d793:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001d797:	c1 e1 05             	shl    ecx,0x5
c001d79a:	01 c8                	add    eax,ecx
c001d79c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d7a0:	83 e1 01             	and    ecx,0x1
c001d7a3:	89 ce                	mov    esi,ecx
c001d7a5:	8a 08                	mov    cl,BYTE PTR [eax]
c001d7a7:	c1 e6 06             	shl    esi,0x6
c001d7aa:	83 e1 bf             	and    ecx,0xffffffbf
c001d7ad:	09 f1                	or     ecx,esi
c001d7af:	88 08                	mov    BYTE PTR [eax],cl
c001d7b1:	8b 08                	mov    ecx,DWORD PTR [eax]
c001d7b3:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c001d7b9:	81 c9 05 00 01 00    	or     ecx,0x10005
c001d7bf:	89 08                	mov    DWORD PTR [eax],ecx
c001d7c1:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c001d7c7:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c001d7cd:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c001d7d3:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c001d7d6:	50                   	push   eax
c001d7d7:	68 90 00 00 00       	push   0x90
c001d7dc:	6a 00                	push   0x0
c001d7de:	56                   	push   esi
c001d7df:	e8 0c 2d fe ff       	call   c00004f0 <memset>
c001d7e4:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c001d7ea:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c001d7f0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d7f4:	83 c4 10             	add    esp,0x10
c001d7f7:	48                   	dec    eax
c001d7f8:	25 ff ff 3f 00       	and    eax,0x3fffff
c001d7fd:	89 c1                	mov    ecx,eax
c001d7ff:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c001d805:	25 00 00 c0 ff       	and    eax,0xffc00000
c001d80a:	09 c8                	or     eax,ecx
c001d80c:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c001d812:	8a 86 8f 00 00 00    	mov    al,BYTE PTR [esi+0x8f]
c001d818:	83 c8 80             	or     eax,0xffffff80
c001d81b:	88 86 8f 00 00 00    	mov    BYTE PTR [esi+0x8f],al
c001d821:	66 8b 06             	mov    ax,WORD PTR [esi]
c001d824:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001d828:	25 00 7f 00 00       	and    eax,0x7f00
c001d82d:	0d 27 80 ff ff       	or     eax,0xffff8027
c001d832:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d837:	66 89 06             	mov    WORD PTR [esi],ax
c001d83a:	b0 35                	mov    al,0x35
c001d83c:	75 02                	jne    c001d840 <SATA::access(unsigned long long, int, void*, bool)+0x180>
c001d83e:	b0 25                	mov    al,0x25
c001d840:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c001d843:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c001d847:	89 e8                	mov    eax,ebp
c001d849:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c001d84d:	c1 e8 10             	shr    eax,0x10
c001d850:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c001d853:	89 e8                	mov    eax,ebp
c001d855:	c1 e8 18             	shr    eax,0x18
c001d858:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c001d85b:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c001d85f:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c001d862:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d866:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c001d869:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001d86d:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c001d871:	89 d6                	mov    esi,edx
c001d873:	31 c0                	xor    eax,eax
c001d875:	c1 e6 07             	shl    esi,0x7
c001d878:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d87c:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c001d882:	80 e1 88             	and    cl,0x88
c001d885:	74 0a                	je     c001d891 <SATA::access(unsigned long long, int, void*, bool)+0x1d1>
c001d887:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d88c:	74 0a                	je     c001d898 <SATA::access(unsigned long long, int, void*, bool)+0x1d8>
c001d88e:	40                   	inc    eax
c001d88f:	eb eb                	jmp    c001d87c <SATA::access(unsigned long long, int, void*, bool)+0x1bc>
c001d891:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001d896:	75 17                	jne    c001d8af <SATA::access(unsigned long long, int, void*, bool)+0x1ef>
c001d898:	83 ec 0c             	sub    esp,0xc
c001d89b:	68 45 2d 02 c0       	push   0xc0022d45
c001d8a0:	e8 a0 d0 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001d8a5:	83 c4 10             	add    esp,0x10
c001d8a8:	b8 01 00 00 00       	mov    eax,0x1
c001d8ad:	eb 5d                	jmp    c001d90c <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d8af:	b8 01 00 00 00       	mov    eax,0x1
c001d8b4:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001d8b8:	c1 e2 07             	shl    edx,0x7
c001d8bb:	d3 e0                	shl    eax,cl
c001d8bd:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c001d8c1:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c001d8c7:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c001d8cd:	85 c8                	test   eax,ecx
c001d8cf:	74 16                	je     c001d8e7 <SATA::access(unsigned long long, int, void*, bool)+0x227>
c001d8d1:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c001d8d7:	0f ba e1 1e          	bt     ecx,0x1e
c001d8db:	73 ea                	jae    c001d8c7 <SATA::access(unsigned long long, int, void*, bool)+0x207>
c001d8dd:	83 ec 0c             	sub    esp,0xc
c001d8e0:	68 53 2d 02 c0       	push   0xc0022d53
c001d8e5:	eb b9                	jmp    c001d8a0 <SATA::access(unsigned long long, int, void*, bool)+0x1e0>
c001d8e7:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c001d8ed:	0f ba e0 1e          	bt     eax,0x1e
c001d8f1:	72 b5                	jb     c001d8a8 <SATA::access(unsigned long long, int, void*, bool)+0x1e8>
c001d8f3:	31 c0                	xor    eax,eax
c001d8f5:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c001d8fa:	75 10                	jne    c001d90c <SATA::access(unsigned long long, int, void*, bool)+0x24c>
c001d8fc:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c001d902:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c001d906:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001d90a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001d90c:	83 c4 2c             	add    esp,0x2c
c001d90f:	5b                   	pop    ebx
c001d910:	5e                   	pop    esi
c001d911:	5f                   	pop    edi
c001d912:	5d                   	pop    ebp
c001d913:	c3                   	ret    

c001d914 <SATA::read(unsigned long long, int, void*)>:
c001d914:	55                   	push   ebp
c001d915:	57                   	push   edi
c001d916:	56                   	push   esi
c001d917:	be 04 00 00 00       	mov    esi,0x4
c001d91c:	53                   	push   ebx
c001d91d:	83 ec 0c             	sub    esp,0xc
c001d920:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001d924:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d928:	8d 7b ff             	lea    edi,[ebx-0x1]
c001d92b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001d92f:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d933:	81 ff fe 00 00 00    	cmp    edi,0xfe
c001d939:	0f 87 1a 02 00 00    	ja     c001db59 <SATA::read(unsigned long long, int, void*)+0x245>
c001d93f:	be 06 00 00 00       	mov    esi,0x6
c001d944:	85 c9                	test   ecx,ecx
c001d946:	0f 84 0d 02 00 00    	je     c001db59 <SATA::read(unsigned long long, int, void*)+0x245>
c001d94c:	56                   	push   esi
c001d94d:	56                   	push   esi
c001d94e:	6a 00                	push   0x0
c001d950:	51                   	push   ecx
c001d951:	53                   	push   ebx
c001d952:	52                   	push   edx
c001d953:	50                   	push   eax
c001d954:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001d958:	e8 63 fd ff ff       	call   c001d6c0 <SATA::access(unsigned long long, int, void*, bool)>
c001d95d:	83 c4 20             	add    esp,0x20
c001d960:	89 c6                	mov    esi,eax
c001d962:	85 c0                	test   eax,eax
c001d964:	0f 85 ea 01 00 00    	jne    c001db54 <SATA::read(unsigned long long, int, void*)+0x240>
c001d96a:	01 1d b4 a0 02 c0    	add    DWORD PTR ds:0xc002a0b4,ebx
c001d970:	bb 0a 00 00 00       	mov    ebx,0xa
c001d975:	50                   	push   eax
c001d976:	50                   	push   eax
c001d977:	6a 0f                	push   0xf
c001d979:	6a 00                	push   0x0
c001d97b:	e8 75 f2 ff ff       	call   c001cbf5 <combineColours(unsigned char, unsigned char)>
c001d980:	5a                   	pop    edx
c001d981:	0f b6 c0             	movzx  eax,al
c001d984:	59                   	pop    ecx
c001d985:	b9 10 27 00 00       	mov    ecx,0x2710
c001d98a:	50                   	push   eax
c001d98b:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d990:	99                   	cdq    
c001d991:	f7 f9                	idiv   ecx
c001d993:	99                   	cdq    
c001d994:	f7 fb                	idiv   ebx
c001d996:	8d 42 30             	lea    eax,[edx+0x30]
c001d999:	0f b6 c0             	movzx  eax,al
c001d99c:	50                   	push   eax
c001d99d:	e8 42 f2 ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001d9a2:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001d9a8:	5f                   	pop    edi
c001d9a9:	5d                   	pop    ebp
c001d9aa:	bd e8 03 00 00       	mov    ebp,0x3e8
c001d9af:	6a 0f                	push   0xf
c001d9b1:	6a 00                	push   0x0
c001d9b3:	e8 3d f2 ff ff       	call   c001cbf5 <combineColours(unsigned char, unsigned char)>
c001d9b8:	5a                   	pop    edx
c001d9b9:	0f b6 c0             	movzx  eax,al
c001d9bc:	59                   	pop    ecx
c001d9bd:	50                   	push   eax
c001d9be:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d9c3:	99                   	cdq    
c001d9c4:	f7 fd                	idiv   ebp
c001d9c6:	99                   	cdq    
c001d9c7:	f7 fb                	idiv   ebx
c001d9c9:	8d 42 30             	lea    eax,[edx+0x30]
c001d9cc:	0f b6 c0             	movzx  eax,al
c001d9cf:	50                   	push   eax
c001d9d0:	e8 0f f2 ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001d9d5:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001d9db:	5f                   	pop    edi
c001d9dc:	bf 64 00 00 00       	mov    edi,0x64
c001d9e1:	58                   	pop    eax
c001d9e2:	6a 0f                	push   0xf
c001d9e4:	6a 00                	push   0x0
c001d9e6:	e8 0a f2 ff ff       	call   c001cbf5 <combineColours(unsigned char, unsigned char)>
c001d9eb:	5a                   	pop    edx
c001d9ec:	0f b6 c0             	movzx  eax,al
c001d9ef:	59                   	pop    ecx
c001d9f0:	50                   	push   eax
c001d9f1:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001d9f6:	99                   	cdq    
c001d9f7:	f7 ff                	idiv   edi
c001d9f9:	99                   	cdq    
c001d9fa:	f7 fb                	idiv   ebx
c001d9fc:	8d 42 30             	lea    eax,[edx+0x30]
c001d9ff:	0f b6 c0             	movzx  eax,al
c001da02:	50                   	push   eax
c001da03:	e8 dc f1 ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001da08:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001da0e:	58                   	pop    eax
c001da0f:	5a                   	pop    edx
c001da10:	6a 0f                	push   0xf
c001da12:	6a 00                	push   0x0
c001da14:	e8 dc f1 ff ff       	call   c001cbf5 <combineColours(unsigned char, unsigned char)>
c001da19:	59                   	pop    ecx
c001da1a:	0f b6 c0             	movzx  eax,al
c001da1d:	5a                   	pop    edx
c001da1e:	50                   	push   eax
c001da1f:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001da24:	99                   	cdq    
c001da25:	f7 fb                	idiv   ebx
c001da27:	99                   	cdq    
c001da28:	f7 fb                	idiv   ebx
c001da2a:	8d 42 30             	lea    eax,[edx+0x30]
c001da2d:	0f b6 c0             	movzx  eax,al
c001da30:	50                   	push   eax
c001da31:	e8 ae f1 ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001da36:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001da3c:	59                   	pop    ecx
c001da3d:	58                   	pop    eax
c001da3e:	6a 0f                	push   0xf
c001da40:	6a 00                	push   0x0
c001da42:	e8 ae f1 ff ff       	call   c001cbf5 <combineColours(unsigned char, unsigned char)>
c001da47:	5a                   	pop    edx
c001da48:	0f b6 c0             	movzx  eax,al
c001da4b:	59                   	pop    ecx
c001da4c:	50                   	push   eax
c001da4d:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001da52:	99                   	cdq    
c001da53:	f7 fb                	idiv   ebx
c001da55:	8d 42 30             	lea    eax,[edx+0x30]
c001da58:	0f b6 c0             	movzx  eax,al
c001da5b:	50                   	push   eax
c001da5c:	e8 83 f1 ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001da61:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001da67:	58                   	pop    eax
c001da68:	5a                   	pop    edx
c001da69:	6a 0f                	push   0xf
c001da6b:	6a 00                	push   0x0
c001da6d:	e8 83 f1 ff ff       	call   c001cbf5 <combineColours(unsigned char, unsigned char)>
c001da72:	59                   	pop    ecx
c001da73:	0f b6 c0             	movzx  eax,al
c001da76:	5a                   	pop    edx
c001da77:	b9 10 27 00 00       	mov    ecx,0x2710
c001da7c:	50                   	push   eax
c001da7d:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001da82:	99                   	cdq    
c001da83:	f7 f9                	idiv   ecx
c001da85:	99                   	cdq    
c001da86:	f7 fb                	idiv   ebx
c001da88:	8d 42 30             	lea    eax,[edx+0x30]
c001da8b:	0f b6 c0             	movzx  eax,al
c001da8e:	50                   	push   eax
c001da8f:	e8 50 f1 ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001da94:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001da9a:	59                   	pop    ecx
c001da9b:	58                   	pop    eax
c001da9c:	6a 0f                	push   0xf
c001da9e:	6a 00                	push   0x0
c001daa0:	e8 50 f1 ff ff       	call   c001cbf5 <combineColours(unsigned char, unsigned char)>
c001daa5:	5a                   	pop    edx
c001daa6:	0f b6 c0             	movzx  eax,al
c001daa9:	59                   	pop    ecx
c001daaa:	50                   	push   eax
c001daab:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dab0:	99                   	cdq    
c001dab1:	f7 fd                	idiv   ebp
c001dab3:	99                   	cdq    
c001dab4:	f7 fb                	idiv   ebx
c001dab6:	8d 42 30             	lea    eax,[edx+0x30]
c001dab9:	0f b6 c0             	movzx  eax,al
c001dabc:	50                   	push   eax
c001dabd:	e8 22 f1 ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001dac2:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dac8:	5d                   	pop    ebp
c001dac9:	58                   	pop    eax
c001daca:	6a 0f                	push   0xf
c001dacc:	6a 00                	push   0x0
c001dace:	e8 22 f1 ff ff       	call   c001cbf5 <combineColours(unsigned char, unsigned char)>
c001dad3:	5a                   	pop    edx
c001dad4:	0f b6 c0             	movzx  eax,al
c001dad7:	59                   	pop    ecx
c001dad8:	50                   	push   eax
c001dad9:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dade:	99                   	cdq    
c001dadf:	f7 ff                	idiv   edi
c001dae1:	99                   	cdq    
c001dae2:	f7 fb                	idiv   ebx
c001dae4:	8d 42 30             	lea    eax,[edx+0x30]
c001dae7:	0f b6 c0             	movzx  eax,al
c001daea:	50                   	push   eax
c001daeb:	e8 f4 f0 ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001daf0:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001daf6:	5f                   	pop    edi
c001daf7:	5d                   	pop    ebp
c001daf8:	6a 0f                	push   0xf
c001dafa:	6a 00                	push   0x0
c001dafc:	e8 f4 f0 ff ff       	call   c001cbf5 <combineColours(unsigned char, unsigned char)>
c001db01:	5a                   	pop    edx
c001db02:	0f b6 c0             	movzx  eax,al
c001db05:	59                   	pop    ecx
c001db06:	50                   	push   eax
c001db07:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001db0c:	99                   	cdq    
c001db0d:	f7 fb                	idiv   ebx
c001db0f:	99                   	cdq    
c001db10:	f7 fb                	idiv   ebx
c001db12:	8d 42 30             	lea    eax,[edx+0x30]
c001db15:	0f b6 c0             	movzx  eax,al
c001db18:	50                   	push   eax
c001db19:	e8 c6 f0 ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001db1e:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001db24:	5f                   	pop    edi
c001db25:	5d                   	pop    ebp
c001db26:	6a 0f                	push   0xf
c001db28:	6a 00                	push   0x0
c001db2a:	e8 c6 f0 ff ff       	call   c001cbf5 <combineColours(unsigned char, unsigned char)>
c001db2f:	5a                   	pop    edx
c001db30:	0f b6 c0             	movzx  eax,al
c001db33:	59                   	pop    ecx
c001db34:	50                   	push   eax
c001db35:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001db3a:	99                   	cdq    
c001db3b:	f7 fb                	idiv   ebx
c001db3d:	83 c2 30             	add    edx,0x30
c001db40:	0f b6 d2             	movzx  edx,dl
c001db43:	52                   	push   edx
c001db44:	e8 9b f0 ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001db49:	83 c4 10             	add    esp,0x10
c001db4c:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001db52:	eb 05                	jmp    c001db59 <SATA::read(unsigned long long, int, void*)+0x245>
c001db54:	be 01 00 00 00       	mov    esi,0x1
c001db59:	83 c4 0c             	add    esp,0xc
c001db5c:	89 f0                	mov    eax,esi
c001db5e:	5b                   	pop    ebx
c001db5f:	5e                   	pop    esi
c001db60:	5f                   	pop    edi
c001db61:	5d                   	pop    ebp
c001db62:	c3                   	ret    
c001db63:	90                   	nop

c001db64 <SATA::write(unsigned long long, int, void*)>:
c001db64:	55                   	push   ebp
c001db65:	b8 04 00 00 00       	mov    eax,0x4
c001db6a:	57                   	push   edi
c001db6b:	56                   	push   esi
c001db6c:	53                   	push   ebx
c001db6d:	83 ec 1c             	sub    esp,0x1c
c001db70:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c001db74:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c001db78:	8d 75 ff             	lea    esi,[ebp-0x1]
c001db7b:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c001db7f:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001db83:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001db89:	0f 87 32 02 00 00    	ja     c001ddc1 <SATA::write(unsigned long long, int, void*)+0x25d>
c001db8f:	b8 06 00 00 00       	mov    eax,0x6
c001db94:	85 ff                	test   edi,edi
c001db96:	0f 84 25 02 00 00    	je     c001ddc1 <SATA::write(unsigned long long, int, void*)+0x25d>
c001db9c:	89 ee                	mov    esi,ebp
c001db9e:	c1 e6 09             	shl    esi,0x9
c001dba1:	01 fe                	add    esi,edi
c001dba3:	89 c8                	mov    eax,ecx
c001dba5:	89 da                	mov    edx,ebx
c001dba7:	83 c0 01             	add    eax,0x1
c001dbaa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001dbae:	83 d2 00             	adc    edx,0x0
c001dbb1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001dbb5:	50                   	push   eax
c001dbb6:	50                   	push   eax
c001dbb7:	6a 01                	push   0x1
c001dbb9:	57                   	push   edi
c001dbba:	81 c7 00 02 00 00    	add    edi,0x200
c001dbc0:	6a 01                	push   0x1
c001dbc2:	53                   	push   ebx
c001dbc3:	51                   	push   ecx
c001dbc4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001dbc8:	e8 f3 fa ff ff       	call   c001d6c0 <SATA::access(unsigned long long, int, void*, bool)>
c001dbcd:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001dbd1:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001dbd5:	83 c4 20             	add    esp,0x20
c001dbd8:	39 f7                	cmp    edi,esi
c001dbda:	75 c7                	jne    c001dba3 <SATA::write(unsigned long long, int, void*)+0x3f>
c001dbdc:	bb 0a 00 00 00       	mov    ebx,0xa
c001dbe1:	01 2d b0 a0 02 c0    	add    DWORD PTR ds:0xc002a0b0,ebp
c001dbe7:	bd 10 27 00 00       	mov    ebp,0x2710
c001dbec:	50                   	push   eax
c001dbed:	50                   	push   eax
c001dbee:	6a 0f                	push   0xf
c001dbf0:	6a 00                	push   0x0
c001dbf2:	e8 fe ef ff ff       	call   c001cbf5 <combineColours(unsigned char, unsigned char)>
c001dbf7:	5a                   	pop    edx
c001dbf8:	0f b6 c0             	movzx  eax,al
c001dbfb:	59                   	pop    ecx
c001dbfc:	50                   	push   eax
c001dbfd:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc02:	99                   	cdq    
c001dc03:	f7 fd                	idiv   ebp
c001dc05:	99                   	cdq    
c001dc06:	f7 fb                	idiv   ebx
c001dc08:	8d 42 30             	lea    eax,[edx+0x30]
c001dc0b:	0f b6 c0             	movzx  eax,al
c001dc0e:	50                   	push   eax
c001dc0f:	e8 d0 ef ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001dc14:	66 a3 7e 80 0b c2    	mov    ds:0xc20b807e,ax
c001dc1a:	5e                   	pop    esi
c001dc1b:	5f                   	pop    edi
c001dc1c:	bf e8 03 00 00       	mov    edi,0x3e8
c001dc21:	6a 0f                	push   0xf
c001dc23:	6a 00                	push   0x0
c001dc25:	e8 cb ef ff ff       	call   c001cbf5 <combineColours(unsigned char, unsigned char)>
c001dc2a:	5a                   	pop    edx
c001dc2b:	0f b6 c0             	movzx  eax,al
c001dc2e:	59                   	pop    ecx
c001dc2f:	50                   	push   eax
c001dc30:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc35:	99                   	cdq    
c001dc36:	f7 ff                	idiv   edi
c001dc38:	99                   	cdq    
c001dc39:	f7 fb                	idiv   ebx
c001dc3b:	8d 42 30             	lea    eax,[edx+0x30]
c001dc3e:	0f b6 c0             	movzx  eax,al
c001dc41:	50                   	push   eax
c001dc42:	e8 9d ef ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001dc47:	66 a3 80 80 0b c2    	mov    ds:0xc20b8080,ax
c001dc4d:	5e                   	pop    esi
c001dc4e:	be 64 00 00 00       	mov    esi,0x64
c001dc53:	58                   	pop    eax
c001dc54:	6a 0f                	push   0xf
c001dc56:	6a 00                	push   0x0
c001dc58:	e8 98 ef ff ff       	call   c001cbf5 <combineColours(unsigned char, unsigned char)>
c001dc5d:	5a                   	pop    edx
c001dc5e:	0f b6 c0             	movzx  eax,al
c001dc61:	59                   	pop    ecx
c001dc62:	50                   	push   eax
c001dc63:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc68:	99                   	cdq    
c001dc69:	f7 fe                	idiv   esi
c001dc6b:	99                   	cdq    
c001dc6c:	f7 fb                	idiv   ebx
c001dc6e:	8d 42 30             	lea    eax,[edx+0x30]
c001dc71:	0f b6 c0             	movzx  eax,al
c001dc74:	50                   	push   eax
c001dc75:	e8 6a ef ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001dc7a:	66 a3 82 80 0b c2    	mov    ds:0xc20b8082,ax
c001dc80:	58                   	pop    eax
c001dc81:	5a                   	pop    edx
c001dc82:	6a 0f                	push   0xf
c001dc84:	6a 00                	push   0x0
c001dc86:	e8 6a ef ff ff       	call   c001cbf5 <combineColours(unsigned char, unsigned char)>
c001dc8b:	59                   	pop    ecx
c001dc8c:	0f b6 c0             	movzx  eax,al
c001dc8f:	5a                   	pop    edx
c001dc90:	50                   	push   eax
c001dc91:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dc96:	99                   	cdq    
c001dc97:	f7 fb                	idiv   ebx
c001dc99:	99                   	cdq    
c001dc9a:	f7 fb                	idiv   ebx
c001dc9c:	8d 42 30             	lea    eax,[edx+0x30]
c001dc9f:	0f b6 c0             	movzx  eax,al
c001dca2:	50                   	push   eax
c001dca3:	e8 3c ef ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001dca8:	66 a3 84 80 0b c2    	mov    ds:0xc20b8084,ax
c001dcae:	59                   	pop    ecx
c001dcaf:	58                   	pop    eax
c001dcb0:	6a 0f                	push   0xf
c001dcb2:	6a 00                	push   0x0
c001dcb4:	e8 3c ef ff ff       	call   c001cbf5 <combineColours(unsigned char, unsigned char)>
c001dcb9:	5a                   	pop    edx
c001dcba:	0f b6 c0             	movzx  eax,al
c001dcbd:	59                   	pop    ecx
c001dcbe:	50                   	push   eax
c001dcbf:	a1 b4 a0 02 c0       	mov    eax,ds:0xc002a0b4
c001dcc4:	99                   	cdq    
c001dcc5:	f7 fb                	idiv   ebx
c001dcc7:	83 c2 30             	add    edx,0x30
c001dcca:	0f b6 d2             	movzx  edx,dl
c001dccd:	52                   	push   edx
c001dcce:	e8 11 ef ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001dcd3:	66 a3 86 80 0b c2    	mov    ds:0xc20b8086,ax
c001dcd9:	58                   	pop    eax
c001dcda:	5a                   	pop    edx
c001dcdb:	6a 0f                	push   0xf
c001dcdd:	6a 00                	push   0x0
c001dcdf:	e8 11 ef ff ff       	call   c001cbf5 <combineColours(unsigned char, unsigned char)>
c001dce4:	59                   	pop    ecx
c001dce5:	0f b6 c0             	movzx  eax,al
c001dce8:	5a                   	pop    edx
c001dce9:	50                   	push   eax
c001dcea:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dcef:	99                   	cdq    
c001dcf0:	f7 fd                	idiv   ebp
c001dcf2:	99                   	cdq    
c001dcf3:	f7 fb                	idiv   ebx
c001dcf5:	8d 42 30             	lea    eax,[edx+0x30]
c001dcf8:	0f b6 c0             	movzx  eax,al
c001dcfb:	50                   	push   eax
c001dcfc:	e8 e3 ee ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001dd01:	66 a3 8a 80 0b c2    	mov    ds:0xc20b808a,ax
c001dd07:	59                   	pop    ecx
c001dd08:	5d                   	pop    ebp
c001dd09:	6a 0f                	push   0xf
c001dd0b:	6a 00                	push   0x0
c001dd0d:	e8 e3 ee ff ff       	call   c001cbf5 <combineColours(unsigned char, unsigned char)>
c001dd12:	5a                   	pop    edx
c001dd13:	0f b6 c0             	movzx  eax,al
c001dd16:	59                   	pop    ecx
c001dd17:	50                   	push   eax
c001dd18:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd1d:	99                   	cdq    
c001dd1e:	f7 ff                	idiv   edi
c001dd20:	99                   	cdq    
c001dd21:	f7 fb                	idiv   ebx
c001dd23:	8d 42 30             	lea    eax,[edx+0x30]
c001dd26:	0f b6 c0             	movzx  eax,al
c001dd29:	50                   	push   eax
c001dd2a:	e8 b5 ee ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001dd2f:	66 a3 8c 80 0b c2    	mov    ds:0xc20b808c,ax
c001dd35:	5f                   	pop    edi
c001dd36:	5d                   	pop    ebp
c001dd37:	6a 0f                	push   0xf
c001dd39:	6a 00                	push   0x0
c001dd3b:	e8 b5 ee ff ff       	call   c001cbf5 <combineColours(unsigned char, unsigned char)>
c001dd40:	5a                   	pop    edx
c001dd41:	0f b6 c0             	movzx  eax,al
c001dd44:	59                   	pop    ecx
c001dd45:	50                   	push   eax
c001dd46:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd4b:	99                   	cdq    
c001dd4c:	f7 fe                	idiv   esi
c001dd4e:	99                   	cdq    
c001dd4f:	f7 fb                	idiv   ebx
c001dd51:	8d 42 30             	lea    eax,[edx+0x30]
c001dd54:	0f b6 c0             	movzx  eax,al
c001dd57:	50                   	push   eax
c001dd58:	e8 87 ee ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001dd5d:	66 a3 8e 80 0b c2    	mov    ds:0xc20b808e,ax
c001dd63:	5e                   	pop    esi
c001dd64:	5f                   	pop    edi
c001dd65:	6a 0f                	push   0xf
c001dd67:	6a 00                	push   0x0
c001dd69:	e8 87 ee ff ff       	call   c001cbf5 <combineColours(unsigned char, unsigned char)>
c001dd6e:	5d                   	pop    ebp
c001dd6f:	0f b6 c0             	movzx  eax,al
c001dd72:	5a                   	pop    edx
c001dd73:	50                   	push   eax
c001dd74:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dd79:	99                   	cdq    
c001dd7a:	f7 fb                	idiv   ebx
c001dd7c:	99                   	cdq    
c001dd7d:	f7 fb                	idiv   ebx
c001dd7f:	8d 42 30             	lea    eax,[edx+0x30]
c001dd82:	0f b6 c0             	movzx  eax,al
c001dd85:	50                   	push   eax
c001dd86:	e8 59 ee ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001dd8b:	66 a3 90 80 0b c2    	mov    ds:0xc20b8090,ax
c001dd91:	59                   	pop    ecx
c001dd92:	5e                   	pop    esi
c001dd93:	6a 0f                	push   0xf
c001dd95:	6a 00                	push   0x0
c001dd97:	e8 59 ee ff ff       	call   c001cbf5 <combineColours(unsigned char, unsigned char)>
c001dd9c:	5f                   	pop    edi
c001dd9d:	0f b6 c0             	movzx  eax,al
c001dda0:	5d                   	pop    ebp
c001dda1:	50                   	push   eax
c001dda2:	a1 b0 a0 02 c0       	mov    eax,ds:0xc002a0b0
c001dda7:	99                   	cdq    
c001dda8:	f7 fb                	idiv   ebx
c001ddaa:	83 c2 30             	add    edx,0x30
c001ddad:	0f b6 d2             	movzx  edx,dl
c001ddb0:	52                   	push   edx
c001ddb1:	e8 2e ee ff ff       	call   c001cbe4 <combineCharAndColour(char, unsigned char)>
c001ddb6:	83 c4 10             	add    esp,0x10
c001ddb9:	66 a3 92 80 0b c2    	mov    ds:0xc20b8092,ax
c001ddbf:	31 c0                	xor    eax,eax
c001ddc1:	83 c4 1c             	add    esp,0x1c
c001ddc4:	5b                   	pop    ebx
c001ddc5:	5e                   	pop    esi
c001ddc6:	5f                   	pop    edi
c001ddc7:	5d                   	pop    ebp
c001ddc8:	c3                   	ret    
c001ddc9:	90                   	nop

c001ddca <SATAPI::write(unsigned long long, int, void*)>:
c001ddca:	b8 03 00 00 00       	mov    eax,0x3
c001ddcf:	c3                   	ret    

c001ddd0 <SATAPI::close(int, int, void*)>:
c001ddd0:	83 ec 0c             	sub    esp,0xc
c001ddd3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddd7:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001dddd:	85 c0                	test   eax,eax
c001dddf:	74 0c                	je     c001dded <SATAPI::close(int, int, void*)+0x1d>
c001dde1:	83 ec 0c             	sub    esp,0xc
c001dde4:	8b 10                	mov    edx,DWORD PTR [eax]
c001dde6:	50                   	push   eax
c001dde7:	ff 52 04             	call   DWORD PTR [edx+0x4]
c001ddea:	83 c4 10             	add    esp,0x10
c001dded:	31 c0                	xor    eax,eax
c001ddef:	83 c4 0c             	add    esp,0xc
c001ddf2:	c3                   	ret    
c001ddf3:	90                   	nop

c001ddf4 <SATAPI::SATAPI()>:
c001ddf4:	83 ec 0c             	sub    esp,0xc
c001ddf7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ddfb:	83 ec 04             	sub    esp,0x4
c001ddfe:	68 00 08 00 00       	push   0x800
c001de03:	68 9c 2d 02 c0       	push   0xc0022d9c
c001de08:	50                   	push   eax
c001de09:	e8 08 ec fe ff       	call   c000ca16 <PhysicalDisk::PhysicalDisk(char const*, int)>
c001de0e:	83 c4 10             	add    esp,0x10
c001de11:	ba 90 2e 02 c0       	mov    edx,0xc0022e90
c001de16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001de1a:	89 10                	mov    DWORD PTR [eax],edx
c001de1c:	90                   	nop
c001de1d:	83 c4 0c             	add    esp,0xc
c001de20:	c3                   	ret    
c001de21:	90                   	nop

c001de22 <SATAPI::diskRemoved()>:
c001de22:	c3                   	ret    
c001de23:	90                   	nop

c001de24 <SATAPI::diskInserted()>:
c001de24:	83 ec 18             	sub    esp,0x18
c001de27:	68 a8 2d 02 c0       	push   0xc0022da8
c001de2c:	e8 14 cb fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001de31:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de35:	c6 80 74 01 00 00 01 	mov    BYTE PTR [eax+0x174],0x1
c001de3c:	83 c4 1c             	add    esp,0x1c
c001de3f:	c3                   	ret    

c001de40 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c001de40:	55                   	push   ebp
c001de41:	57                   	push   edi
c001de42:	56                   	push   esi
c001de43:	53                   	push   ebx
c001de44:	83 ec 34             	sub    esp,0x34
c001de47:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c001de4b:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001de4f:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c001de53:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001de57:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c001de5b:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c001de61:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001de67:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001de6b:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c001de71:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001de75:	83 c0 02             	add    eax,0x2
c001de78:	c1 e0 07             	shl    eax,0x7
c001de7b:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001de7f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001de83:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001de87:	c1 e0 07             	shl    eax,0x7
c001de8a:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001de8e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001de92:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c001de9c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001dea0:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001dea6:	e8 21 e5 ff ff       	call   c001c3cc <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c001deab:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001deaf:	83 c4 10             	add    esp,0x10
c001deb2:	b8 01 00 00 00       	mov    eax,0x1
c001deb7:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c001debc:	0f 84 53 02 00 00    	je     c001e115 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001dec2:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001dec8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001decc:	8b 00                	mov    eax,DWORD PTR [eax]
c001dece:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c001ded4:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c001deda:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dede:	c1 e1 05             	shl    ecx,0x5
c001dee1:	01 c8                	add    eax,ecx
c001dee3:	8b 08                	mov    ecx,DWORD PTR [eax]
c001dee5:	81 e1 80 ff 00 00    	and    ecx,0xff80
c001deeb:	81 c9 25 00 01 00    	or     ecx,0x10025
c001def1:	89 08                	mov    DWORD PTR [eax],ecx
c001def3:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c001def9:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c001deff:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c001df05:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c001df08:	8d 7b 40             	lea    edi,[ebx+0x40]
c001df0b:	50                   	push   eax
c001df0c:	68 90 00 00 00       	push   0x90
c001df11:	6a 00                	push   0x0
c001df13:	53                   	push   ebx
c001df14:	e8 d7 25 fe ff       	call   c00004f0 <memset>
c001df19:	b9 0c 00 00 00       	mov    ecx,0xc
c001df1e:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c001df22:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001df24:	8b 85 7c 01 00 00    	mov    eax,DWORD PTR [ebp+0x17c]
c001df2a:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c001df2e:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c001df34:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c001df38:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c001df3c:	48                   	dec    eax
c001df3d:	25 ff ff 3f 00       	and    eax,0x3fffff
c001df42:	89 c1                	mov    ecx,eax
c001df44:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c001df4a:	25 00 00 c0 ff       	and    eax,0xffc00000
c001df4f:	09 c8                	or     eax,ecx
c001df51:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c001df57:	8a 83 8f 00 00 00    	mov    al,BYTE PTR [ebx+0x8f]
c001df5d:	83 c8 80             	or     eax,0xffffff80
c001df60:	88 83 8f 00 00 00    	mov    BYTE PTR [ebx+0x8f],al
c001df66:	66 8b 03             	mov    ax,WORD PTR [ebx]
c001df69:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001df6d:	25 00 7f 00 00       	and    eax,0x7f00
c001df72:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c001df76:	0d 27 80 ff ff       	or     eax,0xffff8027
c001df7b:	66 89 03             	mov    WORD PTR [ebx],ax
c001df7e:	89 d0                	mov    eax,edx
c001df80:	c1 ea 18             	shr    edx,0x18
c001df83:	c1 e8 10             	shr    eax,0x10
c001df86:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c001df89:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c001df8c:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c001df90:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c001df93:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001df97:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c001df9a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001df9e:	83 c4 10             	add    esp,0x10
c001dfa1:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c001dfa5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001dfa9:	31 c0                	xor    eax,eax
c001dfab:	8b 8a 20 01 00 00    	mov    ecx,DWORD PTR [edx+0x120]
c001dfb1:	80 e1 88             	and    cl,0x88
c001dfb4:	74 0a                	je     c001dfc0 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x180>
c001dfb6:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001dfbb:	74 0a                	je     c001dfc7 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x187>
c001dfbd:	40                   	inc    eax
c001dfbe:	eb eb                	jmp    c001dfab <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c001dfc0:	3d 40 42 0f 00       	cmp    eax,0xf4240
c001dfc5:	75 43                	jne    c001e00a <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c001dfc7:	83 ec 0c             	sub    esp,0xc
c001dfca:	68 c0 2d 02 c0       	push   0xc0022dc0
c001dfcf:	e8 71 c9 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001dfd4:	58                   	pop    eax
c001dfd5:	5a                   	pop    edx
c001dfd6:	68 d5 2d 02 c0       	push   0xc0022dd5
c001dfdb:	ff 35 04 5f 02 c0    	push   DWORD PTR ds:0xc0025f04
c001dfe1:	e8 c0 aa fe ff       	call   c0008aa6 <VgaText::puts(char const*)>
c001dfe6:	59                   	pop    ecx
c001dfe7:	5b                   	pop    ebx
c001dfe8:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001dfec:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001dff2:	e8 6f e4 ff ff       	call   c001c466 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c001dff7:	5e                   	pop    esi
c001dff8:	5f                   	pop    edi
c001dff9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001dffd:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c001e003:	e8 3e e4 ff ff       	call   c001c446 <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>
c001e008:	eb 48                	jmp    c001e052 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x212>
c001e00a:	be 01 00 00 00       	mov    esi,0x1
c001e00f:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c001e013:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001e017:	d3 e6                	shl    esi,cl
c001e019:	c1 e7 07             	shl    edi,0x7
c001e01c:	89 b2 38 01 00 00    	mov    DWORD PTR [edx+0x138],esi
c001e022:	bb a8 e4 ff ff       	mov    ebx,0xffffe4a8
c001e027:	03 7c 24 08          	add    edi,DWORD PTR [esp+0x8]
c001e02b:	8b 87 38 01 00 00    	mov    eax,DWORD PTR [edi+0x138]
c001e031:	85 c6                	test   esi,eax
c001e033:	8b 87 10 01 00 00    	mov    eax,DWORD PTR [edi+0x110]
c001e039:	0f 84 a3 00 00 00    	je     c001e0e2 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2a2>
c001e03f:	0f ba e0 1e          	bt     eax,0x1e
c001e043:	73 1a                	jae    c001e05f <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x21f>
c001e045:	83 ec 0c             	sub    esp,0xc
c001e048:	68 e7 2d 02 c0       	push   0xc0022de7
c001e04d:	e8 f3 c8 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e052:	83 c4 10             	add    esp,0x10
c001e055:	b8 01 00 00 00       	mov    eax,0x1
c001e05a:	e9 b6 00 00 00       	jmp    c001e115 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d5>
c001e05f:	8d 83 70 17 00 00    	lea    eax,[ebx+0x1770]
c001e065:	83 f8 0d             	cmp    eax,0xd
c001e068:	77 0a                	ja     c001e074 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x234>
c001e06a:	83 ec 0c             	sub    esp,0xc
c001e06d:	68 c8 00 00 00       	push   0xc8
c001e072:	eb 28                	jmp    c001e09c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e074:	8d 83 88 13 00 00    	lea    eax,[ebx+0x1388]
c001e07a:	83 f8 0d             	cmp    eax,0xd
c001e07d:	77 0a                	ja     c001e089 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x249>
c001e07f:	83 ec 0c             	sub    esp,0xc
c001e082:	68 58 02 00 00       	push   0x258
c001e087:	eb 13                	jmp    c001e09c <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x25c>
c001e089:	8d 83 a0 0f 00 00    	lea    eax,[ebx+0xfa0]
c001e08f:	83 f8 06             	cmp    eax,0x6
c001e092:	77 10                	ja     c001e0a4 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x264>
c001e094:	83 ec 0c             	sub    esp,0xc
c001e097:	68 dc 05 00 00       	push   0x5dc
c001e09c:	e8 c7 7d ff ff       	call   c0015e68 <milliTenthSleep(unsigned int)>
c001e0a1:	83 c4 10             	add    esp,0x10
c001e0a4:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e0a8:	80 38 1b             	cmp    BYTE PTR [eax],0x1b
c001e0ab:	75 06                	jne    c001e0b3 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x273>
c001e0ad:	80 78 04 01          	cmp    BYTE PTR [eax+0x4],0x1
c001e0b1:	74 15                	je     c001e0c8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e0b3:	83 fb 06             	cmp    ebx,0x6
c001e0b6:	77 10                	ja     c001e0c8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x288>
c001e0b8:	83 ec 0c             	sub    esp,0xc
c001e0bb:	68 c4 09 00 00       	push   0x9c4
c001e0c0:	e8 a3 7d ff ff       	call   c0015e68 <milliTenthSleep(unsigned int)>
c001e0c5:	83 c4 10             	add    esp,0x10
c001e0c8:	43                   	inc    ebx
c001e0c9:	81 fb b9 0b 00 00    	cmp    ebx,0xbb9
c001e0cf:	0f 85 56 ff ff ff    	jne    c001e02b <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1eb>
c001e0d5:	83 ec 0c             	sub    esp,0xc
c001e0d8:	68 fa 2d 02 c0       	push   0xc0022dfa
c001e0dd:	e9 6b ff ff ff       	jmp    c001e04d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e0e2:	0f ba e0 1e          	bt     eax,0x1e
c001e0e6:	73 0d                	jae    c001e0f5 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2b5>
c001e0e8:	83 ec 0c             	sub    esp,0xc
c001e0eb:	68 0e 2e 02 c0       	push   0xc0022e0e
c001e0f0:	e9 58 ff ff ff       	jmp    c001e04d <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x20d>
c001e0f5:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c001e0fa:	74 17                	je     c001e113 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e0fc:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c001e101:	74 10                	je     c001e113 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x2d3>
c001e103:	8b b5 80 01 00 00    	mov    esi,DWORD PTR [ebp+0x180]
c001e109:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c001e10d:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c001e111:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001e113:	31 c0                	xor    eax,eax
c001e115:	83 c4 2c             	add    esp,0x2c
c001e118:	5b                   	pop    ebx
c001e119:	5e                   	pop    esi
c001e11a:	5f                   	pop    edi
c001e11b:	5d                   	pop    ebp
c001e11c:	c3                   	ret    
c001e11d:	90                   	nop

c001e11e <SATAPI::eject()>:
c001e11e:	57                   	push   edi
c001e11f:	b9 03 00 00 00       	mov    ecx,0x3
c001e124:	83 ec 18             	sub    esp,0x18
c001e127:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001e12b:	fc                   	cld    
c001e12c:	31 c0                	xor    eax,eax
c001e12e:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e130:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c001e135:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c001e13a:	50                   	push   eax
c001e13b:	6a 00                	push   0x0
c001e13d:	6a 00                	push   0x0
c001e13f:	6a 00                	push   0x0
c001e141:	6a 00                	push   0x0
c001e143:	6a 02                	push   0x2
c001e145:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c001e149:	50                   	push   eax
c001e14a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e14e:	e8 ed fc ff ff       	call   c001de40 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e153:	31 c0                	xor    eax,eax
c001e155:	83 c4 38             	add    esp,0x38
c001e158:	5f                   	pop    edi
c001e159:	c3                   	ret    

c001e15a <SATAPI::detectMedia()>:
c001e15a:	53                   	push   ebx
c001e15b:	83 ec 14             	sub    esp,0x14
c001e15e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001e162:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e168:	e8 27 02 ff ff       	call   c000e394 <VCache::writeWriteBuffer()>
c001e16d:	59                   	pop    ecx
c001e16e:	ff b3 58 01 00 00    	push   DWORD PTR [ebx+0x158]
c001e174:	e8 0b 02 ff ff       	call   c000e384 <VCache::invalidateReadBuffer()>
c001e179:	c7 04 24 23 2e 02 c0 	mov    DWORD PTR [esp],0xc0022e23
c001e180:	e8 c0 c7 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e185:	83 c4 10             	add    esp,0x10
c001e188:	31 c0                	xor    eax,eax
c001e18a:	8b 14 85 80 88 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7780]
c001e191:	85 d2                	test   edx,edx
c001e193:	74 0f                	je     c001e1a4 <SATAPI::detectMedia()+0x4a>
c001e195:	39 9a 6c 01 00 00    	cmp    DWORD PTR [edx+0x16c],ebx
c001e19b:	75 07                	jne    c001e1a4 <SATAPI::detectMedia()+0x4a>
c001e19d:	c6 82 70 01 00 00 01 	mov    BYTE PTR [edx+0x170],0x1
c001e1a4:	40                   	inc    eax
c001e1a5:	83 f8 1a             	cmp    eax,0x1a
c001e1a8:	75 e0                	jne    c001e18a <SATAPI::detectMedia()+0x30>
c001e1aa:	83 c4 08             	add    esp,0x8
c001e1ad:	5b                   	pop    ebx
c001e1ae:	c3                   	ret    
c001e1af:	90                   	nop

c001e1b0 <SATAPI::open(int, int, void*)>:
c001e1b0:	56                   	push   esi
c001e1b1:	53                   	push   ebx
c001e1b2:	51                   	push   ecx
c001e1b3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e1b7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001e1bb:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c001e1c5:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c001e1cb:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c001e1d5:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e1d9:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c001e1e3:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c001e1e9:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c001e1f0:	e8 ca 9b fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e1f5:	89 c6                	mov    esi,eax
c001e1f7:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c001e1fd:	81 c6 00 10 00 00    	add    esi,0x1000
c001e203:	e8 b7 9b fe ff       	call   c0007dbf <Phys::allocatePage()>
c001e208:	39 c6                	cmp    esi,eax
c001e20a:	74 10                	je     c001e21c <SATAPI::open(int, int, void*)+0x6c>
c001e20c:	83 ec 0c             	sub    esp,0xc
c001e20f:	68 38 2e 02 c0       	push   0xc0022e38
c001e214:	e8 60 30 ff ff       	call   c0011279 <KePanic(char const*)>
c001e219:	83 c4 10             	add    esp,0x10
c001e21c:	83 ec 0c             	sub    esp,0xc
c001e21f:	6a 02                	push   0x2
c001e221:	e8 e7 b3 fe ff       	call   c000960d <Virt::allocateKernelVirtualPages(int)>
c001e226:	89 83 80 01 00 00    	mov    DWORD PTR [ebx+0x180],eax
c001e22c:	6a 03                	push   0x3
c001e22e:	50                   	push   eax
c001e22f:	ff b3 7c 01 00 00    	push   DWORD PTR [ebx+0x17c]
c001e235:	ff 35 b0 5f 02 c0    	push   DWORD PTR ds:0xc0025fb0
c001e23b:	e8 e0 ba fe ff       	call   c0009d20 <VAS::mapPage(unsigned long, unsigned long, int)>
c001e240:	83 c4 14             	add    esp,0x14
c001e243:	68 78 01 00 00       	push   0x178
c001e248:	e8 69 98 fe ff       	call   c0007ab6 <malloc>
c001e24d:	83 c4 0c             	add    esp,0xc
c001e250:	89 c6                	mov    esi,eax
c001e252:	6a 00                	push   0x0
c001e254:	68 ff ff ff 7f       	push   0x7fffffff
c001e259:	6a 00                	push   0x0
c001e25b:	6a 00                	push   0x0
c001e25d:	53                   	push   ebx
c001e25e:	68 4e 2e 02 c0       	push   0xc0022e4e
c001e263:	50                   	push   eax
c001e264:	e8 87 f5 fe ff       	call   c000d7f0 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c001e269:	83 c4 14             	add    esp,0x14
c001e26c:	56                   	push   esi
c001e26d:	e8 3e f6 fe ff       	call   c000d8b0 <LogicalDisk::assignDriveLetter()>
c001e272:	5a                   	pop    edx
c001e273:	0f be c0             	movsx  eax,al
c001e276:	59                   	pop    ecx
c001e277:	50                   	push   eax
c001e278:	68 a0 2c 02 c0       	push   0xc0022ca0
c001e27d:	e8 c3 c6 fe ff       	call   c000a945 <Dbg::kprintf(char const*, ...)>
c001e282:	58                   	pop    eax
c001e283:	5a                   	pop    edx
c001e284:	56                   	push   esi
c001e285:	53                   	push   ebx
c001e286:	e8 bf e3 fe ff       	call   c000c64a <Device::addChild(Device*)>
c001e28b:	89 b3 78 01 00 00    	mov    DWORD PTR [ebx+0x178],esi
c001e291:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e294:	e8 e5 e7 fe ff       	call   c000ca7e <PhysicalDisk::startCache()>
c001e299:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c001e2a0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e2a3:	e8 b2 fe ff ff       	call   c001e15a <SATAPI::detectMedia()>
c001e2a8:	83 c4 14             	add    esp,0x14
c001e2ab:	31 c0                	xor    eax,eax
c001e2ad:	5b                   	pop    ebx
c001e2ae:	5e                   	pop    esi
c001e2af:	c3                   	ret    

c001e2b0 <SATAPI::read(unsigned long long, int, void*)>:
c001e2b0:	57                   	push   edi
c001e2b1:	56                   	push   esi
c001e2b2:	53                   	push   ebx
c001e2b3:	83 ec 30             	sub    esp,0x30
c001e2b6:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001e2ba:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c001e2be:	8b 74 24 4c          	mov    esi,DWORD PTR [esp+0x4c]
c001e2c2:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c001e2c6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e2ca:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001e2ce:	83 fe 04             	cmp    esi,0x4
c001e2d1:	7e 10                	jle    c001e2e3 <SATAPI::read(unsigned long long, int, void*)+0x33>
c001e2d3:	83 ec 0c             	sub    esp,0xc
c001e2d6:	68 5c 2e 02 c0       	push   0xc0022e5c
c001e2db:	e8 99 2f ff ff       	call   c0011279 <KePanic(char const*)>
c001e2e0:	83 c4 10             	add    esp,0x10
c001e2e3:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c001e2e9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c001e2ef:	51                   	push   ecx
c001e2f0:	50                   	push   eax
c001e2f1:	83 c0 02             	add    eax,0x2
c001e2f4:	c1 e0 07             	shl    eax,0x7
c001e2f7:	03 82 60 01 00 00    	add    eax,DWORD PTR [edx+0x160]
c001e2fd:	50                   	push   eax
c001e2fe:	52                   	push   edx
c001e2ff:	e8 8c e1 ff ff       	call   c001c490 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c001e304:	8d 7c 24 28          	lea    edi,[esp+0x28]
c001e308:	b9 03 00 00 00       	mov    ecx,0x3
c001e30d:	fc                   	cld    
c001e30e:	31 c0                	xor    eax,eax
c001e310:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e312:	c6 44 24 28 1b       	mov    BYTE PTR [esp+0x28],0x1b
c001e317:	c6 44 24 2c 01       	mov    BYTE PTR [esp+0x2c],0x1
c001e31c:	83 c4 0c             	add    esp,0xc
c001e31f:	6a 00                	push   0x0
c001e321:	6a 00                	push   0x0
c001e323:	6a 00                	push   0x0
c001e325:	6a 00                	push   0x0
c001e327:	6a 02                	push   0x2
c001e329:	8d 44 24 30          	lea    eax,[esp+0x30]
c001e32d:	50                   	push   eax
c001e32e:	53                   	push   ebx
c001e32f:	e8 0c fb ff ff       	call   c001de40 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e334:	83 c4 20             	add    esp,0x20
c001e337:	85 c0                	test   eax,eax
c001e339:	75 44                	jne    c001e37f <SATAPI::read(unsigned long long, int, void*)+0xcf>
c001e33b:	8d 7c 24 24          	lea    edi,[esp+0x24]
c001e33f:	b9 03 00 00 00       	mov    ecx,0x3
c001e344:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c001e346:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e34a:	c6 44 24 24 a8       	mov    BYTE PTR [esp+0x24],0xa8
c001e34f:	0f c8                	bswap  eax
c001e351:	89 44 24 26          	mov    DWORD PTR [esp+0x26],eax
c001e355:	89 f0                	mov    eax,esi
c001e357:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c001e35b:	50                   	push   eax
c001e35c:	56                   	push   esi
c001e35d:	c1 e6 0b             	shl    esi,0xb
c001e360:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001e364:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e368:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001e36c:	56                   	push   esi
c001e36d:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001e371:	50                   	push   eax
c001e372:	53                   	push   ebx
c001e373:	e8 c8 fa ff ff       	call   c001de40 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c001e378:	83 c4 20             	add    esp,0x20
c001e37b:	85 c0                	test   eax,eax
c001e37d:	74 14                	je     c001e393 <SATAPI::read(unsigned long long, int, void*)+0xe3>
c001e37f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001e383:	83 ec 0c             	sub    esp,0xc
c001e386:	53                   	push   ebx
c001e387:	e8 ce fd ff ff       	call   c001e15a <SATAPI::detectMedia()>
c001e38c:	83 c4 10             	add    esp,0x10
c001e38f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001e393:	83 c4 30             	add    esp,0x30
c001e396:	5b                   	pop    ebx
c001e397:	5e                   	pop    esi
c001e398:	5f                   	pop    edi
c001e399:	c3                   	ret    

c001e39a <IOAPIC::close(int, int, void*)>:
c001e39a:	b8 00 00 00 00       	mov    eax,0x0
c001e39f:	c3                   	ret    

c001e3a0 <apicGetBase()>:
c001e3a0:	55                   	push   ebp
c001e3a1:	89 e5                	mov    ebp,esp
c001e3a3:	83 ec 18             	sub    esp,0x18
c001e3a6:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e3ab:	8a 80 6c 01 00 00    	mov    al,BYTE PTR [eax+0x16c]
c001e3b1:	83 e0 08             	and    eax,0x8
c001e3b4:	0f b6 c0             	movzx  eax,al
c001e3b7:	85 c0                	test   eax,eax
c001e3b9:	75 07                	jne    c001e3c2 <apicGetBase()+0x22>
c001e3bb:	b8 00 00 00 00       	mov    eax,0x0
c001e3c0:	eb 21                	jmp    c001e3e3 <apicGetBase()+0x43>
c001e3c2:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e3c7:	83 ec 08             	sub    esp,0x8
c001e3ca:	6a 1b                	push   0x1b
c001e3cc:	50                   	push   eax
c001e3cd:	e8 ee 8c fe ff       	call   c00070c0 <Computer::rdmsr(unsigned int)>
c001e3d2:	83 c4 10             	add    esp,0x10
c001e3d5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e3d8:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c001e3db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e3de:	25 00 00 ff ff       	and    eax,0xffff0000
c001e3e3:	c9                   	leave  
c001e3e4:	c3                   	ret    
c001e3e5:	90                   	nop

c001e3e6 <IOAPIC::IOAPIC()>:
c001e3e6:	83 ec 0c             	sub    esp,0xc
c001e3e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e3ed:	83 ec 08             	sub    esp,0x8
c001e3f0:	68 c0 2e 02 c0       	push   0xc0022ec0
c001e3f5:	50                   	push   eax
c001e3f6:	e8 e7 e3 fe ff       	call   c000c7e2 <Device::Device(char const*)>
c001e3fb:	83 c4 10             	add    esp,0x10
c001e3fe:	ba d0 2e 02 c0       	mov    edx,0xc0022ed0
c001e403:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e407:	89 10                	mov    DWORD PTR [eax],edx
c001e409:	90                   	nop
c001e40a:	83 c4 0c             	add    esp,0xc
c001e40d:	c3                   	ret    

c001e40e <apicOpen()>:
c001e40e:	55                   	push   ebp
c001e40f:	89 e5                	mov    ebp,esp
c001e411:	53                   	push   ebx
c001e412:	83 ec 34             	sub    esp,0x34
c001e415:	a0 00 a1 02 c0       	mov    al,ds:0xc002a100
c001e41a:	83 f0 01             	xor    eax,0x1
c001e41d:	0f b6 c0             	movzx  eax,al
c001e420:	85 c0                	test   eax,eax
c001e422:	0f 84 a3 00 00 00    	je     c001e4cb <apicOpen()+0xbd>
c001e428:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c001e42c:	a0 e0 8b 02 c0       	mov    al,ds:0xc0028be0
c001e431:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e435:	0f b6 c0             	movzx  eax,al
c001e438:	39 c2                	cmp    edx,eax
c001e43a:	0f 83 84 00 00 00    	jae    c001e4c4 <apicOpen()+0xb6>
c001e440:	c7 45 d0 68 01 00 00 	mov    DWORD PTR [ebp-0x30],0x168
c001e447:	83 ec 0c             	sub    esp,0xc
c001e44a:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c001e44d:	e8 64 96 fe ff       	call   c0007ab6 <malloc>
c001e452:	83 c4 10             	add    esp,0x10
c001e455:	89 c3                	mov    ebx,eax
c001e457:	83 ec 0c             	sub    esp,0xc
c001e45a:	53                   	push   ebx
c001e45b:	e8 86 ff ff ff       	call   c001e3e6 <IOAPIC::IOAPIC()>
c001e460:	83 c4 10             	add    esp,0x10
c001e463:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c001e466:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
c001e46a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c001e46d:	89 14 85 e0 a0 02 c0 	mov    DWORD PTR [eax*4-0x3ffd5f20],edx
c001e474:	a1 c0 a0 02 c0       	mov    eax,ds:0xc002a0c0
c001e479:	83 c0 01             	add    eax,0x1
c001e47c:	a3 c0 a0 02 c0       	mov    ds:0xc002a0c0,eax
c001e481:	a1 b8 5e 02 c0       	mov    eax,ds:0xc0025eb8
c001e486:	8b 80 68 01 00 00    	mov    eax,DWORD PTR [eax+0x168]
c001e48c:	83 ec 08             	sub    esp,0x8
c001e48f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e492:	50                   	push   eax
c001e493:	e8 b2 e1 fe ff       	call   c000c64a <Device::addChild(Device*)>
c001e498:	83 c4 10             	add    esp,0x10
c001e49b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e49e:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4a0:	83 c0 08             	add    eax,0x8
c001e4a3:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4a5:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
c001e4a9:	6a 00                	push   0x0
c001e4ab:	6a 00                	push   0x0
c001e4ad:	52                   	push   edx
c001e4ae:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c001e4b1:	ff d0                	call   eax
c001e4b3:	83 c4 10             	add    esp,0x10
c001e4b6:	8a 45 f7             	mov    al,BYTE PTR [ebp-0x9]
c001e4b9:	83 c0 01             	add    eax,0x1
c001e4bc:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
c001e4bf:	e9 68 ff ff ff       	jmp    c001e42c <apicOpen()+0x1e>
c001e4c4:	c6 05 00 a1 02 c0 01 	mov    BYTE PTR ds:0xc002a100,0x1
c001e4cb:	e8 d0 fe ff ff       	call   c001e3a0 <apicGetBase()>
c001e4d0:	05 f0 00 00 00       	add    eax,0xf0
c001e4d5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e4d8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e4db:	8b 00                	mov    eax,DWORD PTR [eax]
c001e4dd:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001e4e0:	81 4d e4 00 01 00 00 	or     DWORD PTR [ebp-0x1c],0x100
c001e4e7:	81 4d e4 ff 00 00 00 	or     DWORD PTR [ebp-0x1c],0xff
c001e4ee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c001e4f1:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001e4f4:	89 10                	mov    DWORD PTR [eax],edx
c001e4f6:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
c001e4fd:	a1 30 8b 02 c0       	mov    eax,ds:0xc0028b30
c001e502:	39 45 f0             	cmp    DWORD PTR [ebp-0x10],eax
c001e505:	7d 7c                	jge    c001e583 <apicOpen()+0x175>
c001e507:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e50a:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e511:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
c001e514:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e517:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e51e:	c1 e8 08             	shr    eax,0x8
c001e521:	66 89 45 e0          	mov    WORD PTR [ebp-0x20],ax
c001e525:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e528:	8b 04 85 40 8b 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd74c0]
c001e52f:	c1 e8 18             	shr    eax,0x18
c001e532:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c001e535:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
c001e539:	3d ff 00 00 00       	cmp    eax,0xff
c001e53e:	75 3a                	jne    c001e57a <apicOpen()+0x16c>
c001e540:	e8 5b fe ff ff       	call   c001e3a0 <apicGetBase()>
c001e545:	0f b6 55 df          	movzx  edx,BYTE PTR [ebp-0x21]
c001e549:	83 fa 01             	cmp    edx,0x1
c001e54c:	75 07                	jne    c001e555 <apicOpen()+0x147>
c001e54e:	ba 60 03 00 00       	mov    edx,0x360
c001e553:	eb 05                	jmp    c001e55a <apicOpen()+0x14c>
c001e555:	ba 50 03 00 00       	mov    edx,0x350
c001e55a:	01 d0                	add    eax,edx
c001e55c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e55f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e562:	8b 00                	mov    eax,DWORD PTR [eax]
c001e564:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c001e567:	81 65 d4 00 ff ff ff 	and    DWORD PTR [ebp-0x2c],0xffffff00
c001e56e:	83 4d d4 02          	or     DWORD PTR [ebp-0x2c],0x2
c001e572:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e575:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c001e578:	89 10                	mov    DWORD PTR [eax],edx
c001e57a:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
c001e57e:	e9 7a ff ff ff       	jmp    c001e4fd <apicOpen()+0xef>
c001e583:	90                   	nop
c001e584:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e587:	c9                   	leave  
c001e588:	c3                   	ret    
c001e589:	90                   	nop

c001e58a <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c001e58a:	55                   	push   ebp
c001e58b:	89 e5                	mov    ebp,esp
c001e58d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e590:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001e596:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e599:	72 1d                	jb     c001e5b8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e59b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e59e:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c001e5a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5a7:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c001e5ad:	01 d0                	add    eax,edx
c001e5af:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c001e5b2:	73 04                	jae    c001e5b8 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c001e5b4:	b0 01                	mov    al,0x1
c001e5b6:	eb 02                	jmp    c001e5ba <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c001e5b8:	b0 00                	mov    al,0x0
c001e5ba:	5d                   	pop    ebp
c001e5bb:	c3                   	ret    

c001e5bc <IOAPIC::read(int)>:
c001e5bc:	55                   	push   ebp
c001e5bd:	89 e5                	mov    ebp,esp
c001e5bf:	83 ec 10             	sub    esp,0x10
c001e5c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5c5:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e5cb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e5ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e5d1:	0f b6 d0             	movzx  edx,al
c001e5d4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5d7:	89 10                	mov    DWORD PTR [eax],edx
c001e5d9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e5dc:	83 c0 10             	add    eax,0x10
c001e5df:	8b 00                	mov    eax,DWORD PTR [eax]
c001e5e1:	c9                   	leave  
c001e5e2:	c3                   	ret    
c001e5e3:	90                   	nop

c001e5e4 <IOAPIC::open(int, int, void*)>:
c001e5e4:	55                   	push   ebp
c001e5e5:	89 e5                	mov    ebp,esp
c001e5e7:	57                   	push   edi
c001e5e8:	56                   	push   esi
c001e5e9:	53                   	push   ebx
c001e5ea:	83 ec 04             	sub    esp,0x4
c001e5ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5f0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001e5f3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e5f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e5fc:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e602:	8b 14 85 20 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd73e0]
c001e609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e60c:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e612:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e615:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001e61b:	8b 14 85 a0 8c 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd7360]
c001e622:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e625:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c001e62b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e62e:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c001e634:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e637:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e63d:	0f b6 f0             	movzx  esi,al
c001e640:	89 d0                	mov    eax,edx
c001e642:	ba 00 00 00 00       	mov    edx,0x0
c001e647:	89 c7                	mov    edi,eax
c001e649:	83 e7 ff             	and    edi,0xffffffff
c001e64c:	89 f9                	mov    ecx,edi
c001e64e:	0f b6 da             	movzx  ebx,dl
c001e651:	89 c8                	mov    eax,ecx
c001e653:	89 da                	mov    edx,ebx
c001e655:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c001e658:	8d 5e 08             	lea    ebx,[esi+0x8]
c001e65b:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c001e65f:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c001e663:	83 e0 00             	and    eax,0x0
c001e666:	09 d0                	or     eax,edx
c001e668:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c001e66c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e66f:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c001e675:	8d 50 01             	lea    edx,[eax+0x1]
c001e678:	88 d1                	mov    cl,dl
c001e67a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c001e67d:	88 8a c5 00 00 00    	mov    BYTE PTR [edx+0xc5],cl
c001e683:	0f b6 d0             	movzx  edx,al
c001e686:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e689:	83 c2 08             	add    edx,0x8
c001e68c:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c001e690:	0f b6 c9             	movzx  ecx,cl
c001e693:	81 c9 00 ad de 00    	or     ecx,0xdead00
c001e699:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c001e69d:	6a 01                	push   0x1
c001e69f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e6a2:	e8 15 ff ff ff       	call   c001e5bc <IOAPIC::read(int)>
c001e6a7:	83 c4 08             	add    esp,0x8
c001e6aa:	c1 f8 10             	sar    eax,0x10
c001e6ad:	0f b6 c0             	movzx  eax,al
c001e6b0:	8d 50 01             	lea    edx,[eax+0x1]
c001e6b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6b6:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c001e6bc:	b8 00 00 00 00       	mov    eax,0x0
c001e6c1:	8d 65 f4             	lea    esp,[ebp-0xc]
c001e6c4:	5b                   	pop    ebx
c001e6c5:	5e                   	pop    esi
c001e6c6:	5f                   	pop    edi
c001e6c7:	5d                   	pop    ebp
c001e6c8:	c3                   	ret    
c001e6c9:	90                   	nop

c001e6ca <IOAPIC::write(int, int)>:
c001e6ca:	55                   	push   ebp
c001e6cb:	89 e5                	mov    ebp,esp
c001e6cd:	83 ec 10             	sub    esp,0x10
c001e6d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001e6d3:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001e6d9:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c001e6dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e6df:	0f b6 d0             	movzx  edx,al
c001e6e2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6e5:	89 10                	mov    DWORD PTR [eax],edx
c001e6e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c001e6ea:	8d 50 10             	lea    edx,[eax+0x10]
c001e6ed:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e6f0:	89 02                	mov    DWORD PTR [edx],eax
c001e6f2:	90                   	nop
c001e6f3:	c9                   	leave  
c001e6f4:	c3                   	ret    
c001e6f5:	90                   	nop

c001e6f6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c001e6f6:	55                   	push   ebp
c001e6f7:	89 e5                	mov    ebp,esp
c001e6f9:	53                   	push   ebx
c001e6fa:	83 ec 2c             	sub    esp,0x2c
c001e6fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001e700:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c001e703:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c001e706:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c001e709:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c001e70c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c001e70f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001e712:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c001e715:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c001e718:	88 d8                	mov    al,bl
c001e71a:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c001e71d:	88 c8                	mov    al,cl
c001e71f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c001e722:	88 d0                	mov    al,dl
c001e724:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c001e727:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e72b:	83 c0 08             	add    eax,0x8
c001e72e:	01 c0                	add    eax,eax
c001e730:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c001e733:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c001e737:	83 c0 08             	add    eax,0x8
c001e73a:	01 c0                	add    eax,eax
c001e73c:	83 c0 01             	add    eax,0x1
c001e73f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001e742:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e745:	50                   	push   eax
c001e746:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e749:	e8 6e fe ff ff       	call   c001e5bc <IOAPIC::read(int)>
c001e74e:	83 c4 08             	add    esp,0x8
c001e751:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c001e754:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c001e75b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c001e75e:	c1 e0 18             	shl    eax,0x18
c001e761:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c001e764:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c001e767:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c001e76a:	52                   	push   edx
c001e76b:	50                   	push   eax
c001e76c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e76f:	e8 56 ff ff ff       	call   c001e6ca <IOAPIC::write(int, int)>
c001e774:	83 c4 0c             	add    esp,0xc
c001e777:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e77a:	50                   	push   eax
c001e77b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e77e:	e8 39 fe ff ff       	call   c001e5bc <IOAPIC::read(int)>
c001e783:	83 c4 08             	add    esp,0x8
c001e786:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c001e789:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c001e790:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c001e797:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c001e79e:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
c001e7a2:	85 c0                	test   eax,eax
c001e7a4:	74 09                	je     c001e7af <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb9>
c001e7a6:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c001e7ad:	eb 07                	jmp    c001e7b6 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xc0>
c001e7af:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c001e7b6:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
c001e7ba:	85 c0                	test   eax,eax
c001e7bc:	74 09                	je     c001e7c7 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd1>
c001e7be:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c001e7c5:	eb 07                	jmp    c001e7ce <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd8>
c001e7c7:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c001e7ce:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c001e7d5:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c001e7d9:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c001e7dc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001e7df:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001e7e2:	52                   	push   edx
c001e7e3:	50                   	push   eax
c001e7e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001e7e7:	e8 de fe ff ff       	call   c001e6ca <IOAPIC::write(int, int)>
c001e7ec:	83 c4 0c             	add    esp,0xc
c001e7ef:	90                   	nop
c001e7f0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c001e7f3:	c9                   	leave  
c001e7f4:	c3                   	ret    
c001e7f5:	66 90                	xchg   ax,ax
c001e7f7:	90                   	nop

c001e7f8 <APICTimer::close(int, int, void*)>:
c001e7f8:	b8 00 00 00 00       	mov    eax,0x0
c001e7fd:	c3                   	ret    
c001e7fe:	66 90                	xchg   ax,ax

c001e800 <apicTimerHandler(regs*, void*)>:
c001e800:	83 ec 0c             	sub    esp,0xc
c001e803:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e807:	8b 08                	mov    ecx,DWORD PTR [eax]
c001e809:	b8 10 27 00 00       	mov    eax,0x2710
c001e80e:	ba 00 00 00 00       	mov    edx,0x0
c001e813:	f7 f1                	div    ecx
c001e815:	83 ec 0c             	sub    esp,0xc
c001e818:	50                   	push   eax
c001e819:	e8 8e f8 fe ff       	call   c000e0ac <timerHandler(unsigned int)>
c001e81e:	83 c4 10             	add    esp,0x10
c001e821:	90                   	nop
c001e822:	83 c4 0c             	add    esp,0xc
c001e825:	c3                   	ret    
c001e826:	66 90                	xchg   ax,ax

c001e828 <APICTimer::open(int, int, void*)>:
c001e828:	83 ec 0c             	sub    esp,0xc
c001e82b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e82f:	8b 00                	mov    eax,DWORD PTR [eax]
c001e831:	83 c0 24             	add    eax,0x24
c001e834:	8b 00                	mov    eax,DWORD PTR [eax]
c001e836:	83 ec 08             	sub    esp,0x8
c001e839:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e83d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e841:	ff d0                	call   eax
c001e843:	83 c4 10             	add    esp,0x10
c001e846:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e84a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e84e:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c001e854:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e858:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e85c:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c001e862:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e866:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c001e86c:	83 ec 0c             	sub    esp,0xc
c001e86f:	51                   	push   ecx
c001e870:	6a 01                	push   0x1
c001e872:	68 00 e8 01 c0       	push   0xc001e800
c001e877:	52                   	push   edx
c001e878:	50                   	push   eax
c001e879:	e8 78 dd fe ff       	call   c000c5f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e87e:	83 c4 20             	add    esp,0x20
c001e881:	89 c2                	mov    edx,eax
c001e883:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e887:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e88d:	b8 00 00 00 00       	mov    eax,0x0
c001e892:	83 c4 0c             	add    esp,0xc
c001e895:	c3                   	ret    
c001e896:	66 90                	xchg   ax,ax

c001e898 <APICTimer::write(int)>:
c001e898:	83 ec 0c             	sub    esp,0xc
c001e89b:	83 ec 0c             	sub    esp,0xc
c001e89e:	68 f4 2e 02 c0       	push   0xc0022ef4
c001e8a3:	e8 d1 29 ff ff       	call   c0011279 <KePanic(char const*)>
c001e8a8:	83 c4 10             	add    esp,0x10
c001e8ab:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8af:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e8b3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e8b9:	90                   	nop
c001e8ba:	83 c4 0c             	add    esp,0xc
c001e8bd:	c3                   	ret    
c001e8be:	66 90                	xchg   ax,ax

c001e8c0 <APICTimer::APICTimer()>:
c001e8c0:	83 ec 0c             	sub    esp,0xc
c001e8c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8c7:	83 ec 08             	sub    esp,0x8
c001e8ca:	68 04 2f 02 c0       	push   0xc0022f04
c001e8cf:	50                   	push   eax
c001e8d0:	e8 0b f7 fe ff       	call   c000dfe0 <Timer::Timer(char const*)>
c001e8d5:	83 c4 10             	add    esp,0x10
c001e8d8:	ba 18 2f 02 c0       	mov    edx,0xc0022f18
c001e8dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e8e1:	89 10                	mov    DWORD PTR [eax],edx
c001e8e3:	90                   	nop
c001e8e4:	83 c4 0c             	add    esp,0xc
c001e8e7:	c3                   	ret    

c001e8e8 <PIT::write(int)>:
c001e8e8:	83 ec 10             	sub    esp,0x10
c001e8eb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e8ef:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001e8f3:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c001e8f9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001e8fd:	a3 04 a1 02 c0       	mov    ds:0xc002a104,eax
c001e902:	b8 dc 34 12 00       	mov    eax,0x1234dc
c001e907:	89 c2                	mov    edx,eax
c001e909:	c1 fa 1f             	sar    edx,0x1f
c001e90c:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c001e910:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001e914:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c001e91b:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c001e920:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c001e924:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c001e929:	ee                   	out    dx,al
c001e92a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e92e:	0f b6 c0             	movzx  eax,al
c001e931:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c001e938:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c001e93c:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c001e940:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c001e945:	ee                   	out    dx,al
c001e946:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001e94a:	c1 f8 08             	sar    eax,0x8
c001e94d:	0f b6 c0             	movzx  eax,al
c001e950:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c001e957:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c001e95b:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c001e95f:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c001e964:	ee                   	out    dx,al
c001e965:	90                   	nop
c001e966:	83 c4 10             	add    esp,0x10
c001e969:	c3                   	ret    
c001e96a:	66 90                	xchg   ax,ax

c001e96c <pitHandler(regs*, void*)>:
c001e96c:	83 ec 0c             	sub    esp,0xc
c001e96f:	8b 0d 04 a1 02 c0    	mov    ecx,DWORD PTR ds:0xc002a104
c001e975:	b8 10 27 00 00       	mov    eax,0x2710
c001e97a:	89 c2                	mov    edx,eax
c001e97c:	c1 fa 1f             	sar    edx,0x1f
c001e97f:	f7 f9                	idiv   ecx
c001e981:	83 ec 0c             	sub    esp,0xc
c001e984:	50                   	push   eax
c001e985:	e8 22 f7 fe ff       	call   c000e0ac <timerHandler(unsigned int)>
c001e98a:	83 c4 10             	add    esp,0x10
c001e98d:	90                   	nop
c001e98e:	83 c4 0c             	add    esp,0xc
c001e991:	c3                   	ret    
c001e992:	66 90                	xchg   ax,ax

c001e994 <PIT::open(int, int, void*)>:
c001e994:	83 ec 0c             	sub    esp,0xc
c001e997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e99b:	8b 00                	mov    eax,DWORD PTR [eax]
c001e99d:	83 c0 24             	add    eax,0x24
c001e9a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001e9a2:	83 ec 08             	sub    esp,0x8
c001e9a5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9a9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e9ad:	ff d0                	call   eax
c001e9af:	83 c4 10             	add    esp,0x10
c001e9b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9b6:	83 ec 0c             	sub    esp,0xc
c001e9b9:	6a 00                	push   0x0
c001e9bb:	6a 01                	push   0x1
c001e9bd:	68 6c e9 01 c0       	push   0xc001e96c
c001e9c2:	6a 00                	push   0x0
c001e9c4:	50                   	push   eax
c001e9c5:	e8 2c dc fe ff       	call   c000c5f6 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c001e9ca:	83 c4 20             	add    esp,0x20
c001e9cd:	89 c2                	mov    edx,eax
c001e9cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9d3:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c001e9d9:	b8 00 00 00 00       	mov    eax,0x0
c001e9de:	83 c4 0c             	add    esp,0xc
c001e9e1:	c3                   	ret    
c001e9e2:	66 90                	xchg   ax,ax

c001e9e4 <PIT::close(int, int, void*)>:
c001e9e4:	83 ec 0c             	sub    esp,0xc
c001e9e7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9eb:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c001e9f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e9f9:	6a 01                	push   0x1
c001e9fb:	68 6c e9 01 c0       	push   0xc001e96c
c001ea00:	6a 00                	push   0x0
c001ea02:	50                   	push   eax
c001ea03:	e8 24 dc fe ff       	call   c000c62c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c001ea08:	83 c4 10             	add    esp,0x10
c001ea0b:	b8 00 00 00 00       	mov    eax,0x0
c001ea10:	83 c4 0c             	add    esp,0xc
c001ea13:	c3                   	ret    

c001ea14 <PIT::PIT()>:
c001ea14:	83 ec 0c             	sub    esp,0xc
c001ea17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea1b:	83 ec 08             	sub    esp,0x8
c001ea1e:	68 40 2f 02 c0       	push   0xc0022f40
c001ea23:	50                   	push   eax
c001ea24:	e8 b7 f5 fe ff       	call   c000dfe0 <Timer::Timer(char const*)>
c001ea29:	83 c4 10             	add    esp,0x10
c001ea2c:	ba 68 2f 02 c0       	mov    edx,0xc0022f68
c001ea31:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea35:	89 10                	mov    DWORD PTR [eax],edx
c001ea37:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea3b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea41:	0f b6 d0             	movzx  edx,al
c001ea44:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea48:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c001ea4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea53:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea59:	0f b6 d0             	movzx  edx,al
c001ea5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea60:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c001ea65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea69:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c001ea6f:	8d 50 01             	lea    edx,[eax+0x1]
c001ea72:	88 d1                	mov    cl,dl
c001ea74:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ea78:	88 8a c4 00 00 00    	mov    BYTE PTR [edx+0xc4],cl
c001ea7e:	0f b6 d0             	movzx  edx,al
c001ea81:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001ea85:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c001ea89:	83 e1 3f             	and    ecx,0x3f
c001ea8c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c001ea90:	90                   	nop
c001ea91:	83 c4 0c             	add    esp,0xc
c001ea94:	c3                   	ret    
c001ea95:	66 90                	xchg   ax,ax
c001ea97:	66 90                	xchg   ax,ax
c001ea99:	66 90                	xchg   ax,ax
c001ea9b:	66 90                	xchg   ax,ax
c001ea9d:	66 90                	xchg   ax,ax
c001ea9f:	90                   	nop

c001eaa0 <avxDetect>:
c001eaa0:	b8 01 00 00 00       	mov    eax,0x1
c001eaa5:	0f a2                	cpuid  
c001eaa7:	f7 c1 00 00 00 10    	test   ecx,0x10000000
c001eaad:	74 15                	je     c001eac4 <avxDetect.noAVX>
c001eaaf:	b8 01 00 00 00       	mov    eax,0x1
c001eab4:	0f a2                	cpuid  
c001eab6:	f7 c1 00 00 00 04    	test   ecx,0x4000000
c001eabc:	74 06                	je     c001eac4 <avxDetect.noAVX>
c001eabe:	b8 01 00 00 00       	mov    eax,0x1
c001eac3:	c3                   	ret    

c001eac4 <avxDetect.noAVX>:
c001eac4:	b8 00 00 00 00       	mov    eax,0x0
c001eac9:	c3                   	ret    

c001eaca <avxSave>:
c001eaca:	53                   	push   ebx
c001eacb:	52                   	push   edx
c001eacc:	31 c0                	xor    eax,eax
c001eace:	48                   	dec    eax
c001eacf:	89 c2                	mov    edx,eax
c001ead1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ead5:	0f ae 23             	xsave  [ebx]
c001ead8:	5a                   	pop    edx
c001ead9:	5b                   	pop    ebx
c001eada:	c3                   	ret    

c001eadb <avxLoad>:
c001eadb:	53                   	push   ebx
c001eadc:	52                   	push   edx
c001eadd:	31 c0                	xor    eax,eax
c001eadf:	48                   	dec    eax
c001eae0:	89 c2                	mov    edx,eax
c001eae2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001eae6:	0f ae 2b             	xrstor [ebx]
c001eae9:	5a                   	pop    edx
c001eaea:	5b                   	pop    ebx
c001eaeb:	c3                   	ret    

c001eaec <avxInit>:
c001eaec:	e8 67 03 00 00       	call   c001ee58 <sseInit>
c001eaf1:	50                   	push   eax
c001eaf2:	51                   	push   ecx
c001eaf3:	0f 20 e0             	mov    eax,cr4
c001eaf6:	0d 00 00 04 00       	or     eax,0x40000
c001eafb:	0f 22 e0             	mov    cr4,eax
c001eafe:	31 c9                	xor    ecx,ecx
c001eb00:	0f 01 d0             	xgetbv 
c001eb03:	0d 07 00 00 00       	or     eax,0x7
c001eb08:	0f 01 d1             	xsetbv 
c001eb0b:	59                   	pop    ecx
c001eb0c:	58                   	pop    eax
c001eb0d:	c3                   	ret    

c001eb0e <avxClose>:
c001eb0e:	c3                   	ret    

c001eb0f <wouldSheSayYes>:
c001eb0f:	c3                   	ret    
c001eb10:	49                   	dec    ecx
c001eb11:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c001eb15:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c001eb19:	75 20                	jne    c001eb3b <isr0+0xb>
c001eb1b:	4e                   	dec    esi
c001eb1c:	79 61                	jns    c001eb7f <isr7+0x3>
c001eb1e:	68 2e 2e 2e 00       	push   0x2e2e2e
c001eb23:	66 90                	xchg   ax,ax
c001eb25:	66 90                	xchg   ax,ax
c001eb27:	66 90                	xchg   ax,ax
c001eb29:	66 90                	xchg   ax,ax
c001eb2b:	66 90                	xchg   ax,ax
c001eb2d:	66 90                	xchg   ax,ax
c001eb2f:	90                   	nop

c001eb30 <isr0>:
c001eb30:	fa                   	cli    
c001eb31:	68 00 00 00 00       	push   0x0
c001eb36:	68 00 00 00 00       	push   0x0
c001eb3b:	e9 56 01 00 00       	jmp    c001ec96 <int_common_stub>

c001eb40 <isr1>:
c001eb40:	fa                   	cli    
c001eb41:	6a 00                	push   0x0
c001eb43:	6a 01                	push   0x1
c001eb45:	e9 4c 01 00 00       	jmp    c001ec96 <int_common_stub>

c001eb4a <isr2>:
c001eb4a:	fa                   	cli    
c001eb4b:	6a 00                	push   0x0
c001eb4d:	6a 02                	push   0x2
c001eb4f:	e9 42 01 00 00       	jmp    c001ec96 <int_common_stub>

c001eb54 <isr3>:
c001eb54:	fa                   	cli    
c001eb55:	6a 00                	push   0x0
c001eb57:	6a 03                	push   0x3
c001eb59:	e9 38 01 00 00       	jmp    c001ec96 <int_common_stub>

c001eb5e <isr4>:
c001eb5e:	fa                   	cli    
c001eb5f:	6a 00                	push   0x0
c001eb61:	6a 04                	push   0x4
c001eb63:	e9 2e 01 00 00       	jmp    c001ec96 <int_common_stub>

c001eb68 <isr5>:
c001eb68:	fa                   	cli    
c001eb69:	6a 00                	push   0x0
c001eb6b:	6a 05                	push   0x5
c001eb6d:	e9 24 01 00 00       	jmp    c001ec96 <int_common_stub>

c001eb72 <isr6>:
c001eb72:	fa                   	cli    
c001eb73:	6a 00                	push   0x0
c001eb75:	6a 06                	push   0x6
c001eb77:	e9 1a 01 00 00       	jmp    c001ec96 <int_common_stub>

c001eb7c <isr7>:
c001eb7c:	fa                   	cli    
c001eb7d:	6a 00                	push   0x0
c001eb7f:	6a 07                	push   0x7
c001eb81:	e9 10 01 00 00       	jmp    c001ec96 <int_common_stub>

c001eb86 <isr8>:
c001eb86:	fa                   	cli    
c001eb87:	6a 08                	push   0x8
c001eb89:	e9 08 01 00 00       	jmp    c001ec96 <int_common_stub>

c001eb8e <isr9>:
c001eb8e:	fa                   	cli    
c001eb8f:	6a 00                	push   0x0
c001eb91:	6a 09                	push   0x9
c001eb93:	e9 fe 00 00 00       	jmp    c001ec96 <int_common_stub>

c001eb98 <isr10>:
c001eb98:	fa                   	cli    
c001eb99:	6a 0a                	push   0xa
c001eb9b:	e9 f6 00 00 00       	jmp    c001ec96 <int_common_stub>

c001eba0 <isr11>:
c001eba0:	fa                   	cli    
c001eba1:	6a 0b                	push   0xb
c001eba3:	e9 ee 00 00 00       	jmp    c001ec96 <int_common_stub>

c001eba8 <isr12>:
c001eba8:	fa                   	cli    
c001eba9:	6a 0c                	push   0xc
c001ebab:	e9 e6 00 00 00       	jmp    c001ec96 <int_common_stub>

c001ebb0 <isr13>:
c001ebb0:	fa                   	cli    
c001ebb1:	6a 0d                	push   0xd
c001ebb3:	53                   	push   ebx
c001ebb4:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001ebb8:	81 fb 86 ed 01 c0    	cmp    ebx,0xc001ed86
c001ebbe:	5b                   	pop    ebx
c001ebbf:	0f 84 c3 01 00 00    	je     c001ed88 <finishSignal2>
c001ebc5:	e9 cc 00 00 00       	jmp    c001ec96 <int_common_stub>

c001ebca <isr14>:
c001ebca:	fa                   	cli    
c001ebcb:	6a 0e                	push   0xe
c001ebcd:	e9 c4 00 00 00       	jmp    c001ec96 <int_common_stub>

c001ebd2 <isr15>:
c001ebd2:	fa                   	cli    
c001ebd3:	6a 00                	push   0x0
c001ebd5:	6a 0f                	push   0xf
c001ebd7:	e9 ba 00 00 00       	jmp    c001ec96 <int_common_stub>

c001ebdc <isr16>:
c001ebdc:	fa                   	cli    
c001ebdd:	6a 00                	push   0x0
c001ebdf:	6a 10                	push   0x10
c001ebe1:	e9 b0 00 00 00       	jmp    c001ec96 <int_common_stub>

c001ebe6 <isr17>:
c001ebe6:	fa                   	cli    
c001ebe7:	6a 00                	push   0x0
c001ebe9:	6a 11                	push   0x11
c001ebeb:	e9 a6 00 00 00       	jmp    c001ec96 <int_common_stub>

c001ebf0 <isr18>:
c001ebf0:	fa                   	cli    
c001ebf1:	6a 00                	push   0x0
c001ebf3:	6a 12                	push   0x12
c001ebf5:	e9 9c 00 00 00       	jmp    c001ec96 <int_common_stub>

c001ebfa <irq3>:
c001ebfa:	fa                   	cli    
c001ebfb:	6a 00                	push   0x0
c001ebfd:	6a 23                	push   0x23
c001ebff:	e9 92 00 00 00       	jmp    c001ec96 <int_common_stub>

c001ec04 <irq4>:
c001ec04:	fa                   	cli    
c001ec05:	6a 00                	push   0x0
c001ec07:	6a 24                	push   0x24
c001ec09:	e9 88 00 00 00       	jmp    c001ec96 <int_common_stub>

c001ec0e <irq5>:
c001ec0e:	fa                   	cli    
c001ec0f:	6a 00                	push   0x0
c001ec11:	6a 25                	push   0x25
c001ec13:	e9 7e 00 00 00       	jmp    c001ec96 <int_common_stub>

c001ec18 <irq6>:
c001ec18:	fa                   	cli    
c001ec19:	6a 00                	push   0x0
c001ec1b:	6a 26                	push   0x26
c001ec1d:	e9 74 00 00 00       	jmp    c001ec96 <int_common_stub>

c001ec22 <irq7>:
c001ec22:	fa                   	cli    
c001ec23:	6a 00                	push   0x0
c001ec25:	6a 27                	push   0x27
c001ec27:	e9 6a 00 00 00       	jmp    c001ec96 <int_common_stub>

c001ec2c <irq8>:
c001ec2c:	fa                   	cli    
c001ec2d:	6a 00                	push   0x0
c001ec2f:	6a 28                	push   0x28
c001ec31:	e9 60 00 00 00       	jmp    c001ec96 <int_common_stub>

c001ec36 <irq9>:
c001ec36:	fa                   	cli    
c001ec37:	6a 00                	push   0x0
c001ec39:	6a 29                	push   0x29
c001ec3b:	e9 56 00 00 00       	jmp    c001ec96 <int_common_stub>

c001ec40 <irq10>:
c001ec40:	fa                   	cli    
c001ec41:	6a 00                	push   0x0
c001ec43:	6a 2a                	push   0x2a
c001ec45:	e9 4c 00 00 00       	jmp    c001ec96 <int_common_stub>

c001ec4a <irq11>:
c001ec4a:	fa                   	cli    
c001ec4b:	6a 00                	push   0x0
c001ec4d:	6a 2b                	push   0x2b
c001ec4f:	e9 42 00 00 00       	jmp    c001ec96 <int_common_stub>

c001ec54 <irq12>:
c001ec54:	fa                   	cli    
c001ec55:	6a 00                	push   0x0
c001ec57:	6a 2c                	push   0x2c
c001ec59:	e9 38 00 00 00       	jmp    c001ec96 <int_common_stub>

c001ec5e <irq13>:
c001ec5e:	fa                   	cli    
c001ec5f:	6a 00                	push   0x0
c001ec61:	6a 2d                	push   0x2d
c001ec63:	e9 2e 00 00 00       	jmp    c001ec96 <int_common_stub>

c001ec68 <irq14>:
c001ec68:	fa                   	cli    
c001ec69:	6a 00                	push   0x0
c001ec6b:	6a 2e                	push   0x2e
c001ec6d:	e9 24 00 00 00       	jmp    c001ec96 <int_common_stub>

c001ec72 <irq15>:
c001ec72:	fa                   	cli    
c001ec73:	6a 00                	push   0x0
c001ec75:	6a 2f                	push   0x2f
c001ec77:	e9 1a 00 00 00       	jmp    c001ec96 <int_common_stub>

c001ec7c <irq1>:
c001ec7c:	fa                   	cli    
c001ec7d:	6a 00                	push   0x0
c001ec7f:	6a 21                	push   0x21
c001ec81:	eb 13                	jmp    c001ec96 <int_common_stub>

c001ec83 <irq2>:
c001ec83:	fa                   	cli    
c001ec84:	6a 00                	push   0x0
c001ec86:	6a 22                	push   0x22
c001ec88:	eb 0c                	jmp    c001ec96 <int_common_stub>

c001ec8a <isr96>:
c001ec8a:	6a 00                	push   0x0
c001ec8c:	6a 60                	push   0x60
c001ec8e:	fb                   	sti    
c001ec8f:	eb 37                	jmp    c001ecc8 <syscall_common_stub>

c001ec91 <irq0>:
c001ec91:	fa                   	cli    
c001ec92:	6a 00                	push   0x0
c001ec94:	6a 20                	push   0x20

c001ec96 <int_common_stub>:
c001ec96:	60                   	pusha  
c001ec97:	1e                   	push   ds
c001ec98:	06                   	push   es
c001ec99:	0f a0                	push   fs
c001ec9b:	0f a8                	push   gs
c001ec9d:	66 b8 10 00          	mov    ax,0x10
c001eca1:	66 8e d8             	mov    ds,ax
c001eca4:	66 8e c0             	mov    es,ax
c001eca7:	66 8e e0             	mov    fs,ax
c001ecaa:	66 8e e8             	mov    gs,ax
c001ecad:	54                   	push   esp
c001ecae:	fc                   	cld    
c001ecaf:	e8 40 de fe ff       	call   c000caf4 <int_handler>
c001ecb4:	81 c4 04 00 00 00    	add    esp,0x4
c001ecba:	0f a9                	pop    gs
c001ecbc:	0f a1                	pop    fs
c001ecbe:	07                   	pop    es
c001ecbf:	1f                   	pop    ds
c001ecc0:	61                   	popa   
c001ecc1:	81 c4 08 00 00 00    	add    esp,0x8
c001ecc7:	cf                   	iret   

c001ecc8 <syscall_common_stub>:
c001ecc8:	60                   	pusha  
c001ecc9:	1e                   	push   ds
c001ecca:	06                   	push   es
c001eccb:	0f a0                	push   fs
c001eccd:	0f a8                	push   gs
c001eccf:	66 b8 10 00          	mov    ax,0x10
c001ecd3:	66 8e d8             	mov    ds,ax
c001ecd6:	66 8e c0             	mov    es,ax
c001ecd9:	66 8e e0             	mov    fs,ax
c001ecdc:	66 8e e8             	mov    gs,ax
c001ecdf:	54                   	push   esp
c001ece0:	fc                   	cld    
c001ece1:	e8 0e de fe ff       	call   c000caf4 <int_handler>
c001ece6:	81 c4 04 00 00 00    	add    esp,0x4
c001ecec:	0f a9                	pop    gs
c001ecee:	0f a1                	pop    fs
c001ecf0:	07                   	pop    es
c001ecf1:	1f                   	pop    ds
c001ecf2:	e8 97 2b ff ff       	call   c001188e <KiCheckSignalZ>
c001ecf7:	3d 00 00 00 00       	cmp    eax,0x0
c001ecfc:	0f 84 c0 00 00 00    	je     c001edc2 <skipSignals>
c001ed02:	a3 08 20 00 c2       	mov    ds:0xc2002008,eax
c001ed07:	61                   	popa   
c001ed08:	53                   	push   ebx
c001ed09:	8b 1d 08 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002008
c001ed0f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c001ed12:	5b                   	pop    ebx
c001ed13:	a1 08 20 00 c2       	mov    eax,ds:0xc2002008
c001ed18:	89 58 10             	mov    DWORD PTR [eax+0x10],ebx
c001ed1b:	89 48 14             	mov    DWORD PTR [eax+0x14],ecx
c001ed1e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001ed21:	89 70 1c             	mov    DWORD PTR [eax+0x1c],esi
c001ed24:	89 78 20             	mov    DWORD PTR [eax+0x20],edi
c001ed27:	89 68 24             	mov    DWORD PTR [eax+0x24],ebp
c001ed2a:	81 c4 08 00 00 00    	add    esp,0x8
c001ed30:	5e                   	pop    esi
c001ed31:	5b                   	pop    ebx
c001ed32:	59                   	pop    ecx
c001ed33:	5a                   	pop    edx
c001ed34:	89 70 2c             	mov    DWORD PTR [eax+0x2c],esi
c001ed37:	89 48 30             	mov    DWORD PTR [eax+0x30],ecx
c001ed3a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001ed3d:	52                   	push   edx
c001ed3e:	51                   	push   ecx
c001ed3f:	53                   	push   ebx
c001ed40:	56                   	push   esi
c001ed41:	81 ec 08 00 00 00    	sub    esp,0x8
c001ed47:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c001ed4a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001ed4d:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
c001ed50:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001ed53:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001ed56:	60                   	pusha  
c001ed57:	8b 35 08 20 00 c2    	mov    esi,DWORD PTR ds:0xc2002008
c001ed5d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c001ed60:	89 e3                	mov    ebx,esp
c001ed62:	8b 63 34             	mov    esp,DWORD PTR [ebx+0x34]
c001ed65:	52                   	push   edx
c001ed66:	68 86 ed 01 c0       	push   0xc001ed86
c001ed6b:	89 63 34             	mov    DWORD PTR [ebx+0x34],esp
c001ed6e:	89 dc                	mov    esp,ebx
c001ed70:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c001ed73:	68 23 00 00 00       	push   0x23
c001ed78:	51                   	push   ecx
c001ed79:	68 02 02 00 00       	push   0x202
c001ed7e:	68 1b 00 00 00       	push   0x1b
c001ed83:	ff 36                	push   DWORD PTR [esi]
c001ed85:	cf                   	iret   

c001ed86 <finishSignal>:
c001ed86:	cd 0f                	int    0xf

c001ed88 <finishSignal2>:
c001ed88:	ff 35 08 20 00 c2    	push   DWORD PTR ds:0xc2002008
c001ed8e:	e8 78 2b ff ff       	call   c001190b <KiFinishSignalZ>
c001ed93:	8b 2d 08 20 00 c2    	mov    ebp,DWORD PTR ds:0xc2002008
c001ed99:	68 23 00 00 00       	push   0x23
c001ed9e:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001eda1:	ff 75 30             	push   DWORD PTR [ebp+0x30]
c001eda4:	68 1b 00 00 00       	push   0x1b
c001eda9:	ff 75 2c             	push   DWORD PTR [ebp+0x2c]
c001edac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001edaf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c001edb2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c001edb5:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c001edb8:	8b 75 1c             	mov    esi,DWORD PTR [ebp+0x1c]
c001edbb:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001edbe:	8b 6d 24             	mov    ebp,DWORD PTR [ebp+0x24]
c001edc1:	cf                   	iret   

c001edc2 <skipSignals>:
c001edc2:	61                   	popa   
c001edc3:	81 c4 08 00 00 00    	add    esp,0x8
c001edc9:	cf                   	iret   
c001edca:	90                   	nop
c001edcb:	90                   	nop

c001edcc <irq16>:
c001edcc:	fa                   	cli    
c001edcd:	6a 00                	push   0x0
c001edcf:	6a 30                	push   0x30
c001edd1:	e9 c0 fe ff ff       	jmp    c001ec96 <int_common_stub>

c001edd6 <irq17>:
c001edd6:	fa                   	cli    
c001edd7:	6a 00                	push   0x0
c001edd9:	6a 31                	push   0x31
c001eddb:	e9 b6 fe ff ff       	jmp    c001ec96 <int_common_stub>

c001ede0 <irq18>:
c001ede0:	fa                   	cli    
c001ede1:	6a 00                	push   0x0
c001ede3:	6a 32                	push   0x32
c001ede5:	e9 ac fe ff ff       	jmp    c001ec96 <int_common_stub>

c001edea <irq19>:
c001edea:	fa                   	cli    
c001edeb:	6a 00                	push   0x0
c001eded:	6a 33                	push   0x33
c001edef:	e9 a2 fe ff ff       	jmp    c001ec96 <int_common_stub>

c001edf4 <irq20>:
c001edf4:	fa                   	cli    
c001edf5:	6a 00                	push   0x0
c001edf7:	6a 34                	push   0x34
c001edf9:	e9 98 fe ff ff       	jmp    c001ec96 <int_common_stub>

c001edfe <irq21>:
c001edfe:	fa                   	cli    
c001edff:	6a 00                	push   0x0
c001ee01:	6a 35                	push   0x35
c001ee03:	e9 8e fe ff ff       	jmp    c001ec96 <int_common_stub>

c001ee08 <irq22>:
c001ee08:	fa                   	cli    
c001ee09:	6a 00                	push   0x0
c001ee0b:	6a 36                	push   0x36
c001ee0d:	e9 84 fe ff ff       	jmp    c001ec96 <int_common_stub>

c001ee12 <irq23>:
c001ee12:	fa                   	cli    
c001ee13:	6a 00                	push   0x0
c001ee15:	6a 37                	push   0x37
c001ee17:	e9 7a fe ff ff       	jmp    c001ec96 <int_common_stub>
c001ee1c:	66 90                	xchg   ax,ax
c001ee1e:	66 90                	xchg   ax,ax

c001ee20 <i386GetRDRAND>:
c001ee20:	b9 64 00 00 00       	mov    ecx,0x64

c001ee25 <retry>:
c001ee25:	0f c7 f0             	rdrand eax
c001ee28:	72 05                	jb     c001ee2f <retry.done>
c001ee2a:	e2 f9                	loop   c001ee25 <retry>

c001ee2c <retry.fail>:
c001ee2c:	31 c0                	xor    eax,eax
c001ee2e:	c3                   	ret    

c001ee2f <retry.done>:
c001ee2f:	c3                   	ret    

c001ee30 <absolutelyNoChanceInHell>:
c001ee30:	b8 01 00 00 00       	mov    eax,0x1
c001ee35:	0f a2                	cpuid  
c001ee37:	f7 c2 00 00 00 02    	test   edx,0x2000000
c001ee3d:	74 06                	je     c001ee45 <sseDetect.noSSE>
c001ee3f:	b8 01 00 00 00       	mov    eax,0x1
c001ee44:	c3                   	ret    

c001ee45 <sseDetect.noSSE>:
c001ee45:	31 c0                	xor    eax,eax
c001ee47:	c3                   	ret    

c001ee48 <sseSave>:
c001ee48:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee4c:	0f ae 00             	fxsave [eax]
c001ee4f:	c3                   	ret    

c001ee50 <sseLoad>:
c001ee50:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee54:	0f ae 08             	fxrstor [eax]
c001ee57:	c3                   	ret    

c001ee58 <sseInit>:
c001ee58:	e8 42 00 00 00       	call   c001ee9f <x87Init>
c001ee5d:	0f 20 e0             	mov    eax,cr4
c001ee60:	66 0d 00 06          	or     ax,0x600
c001ee64:	0f 22 e0             	mov    cr4,eax
c001ee67:	c3                   	ret    

c001ee68 <sseClose>:
c001ee68:	c3                   	ret    
c001ee69:	66 90                	xchg   ax,ax
c001ee6b:	66 90                	xchg   ax,ax
c001ee6d:	66 90                	xchg   ax,ax
c001ee6f:	90                   	nop

c001ee70 <value_37F>:
c001ee70:	7f 03                	jg     c001ee75 <value_37A+0x1>

c001ee72 <value_37E>:
c001ee72:	7e 03                	jle    c001ee77 <x87Detect+0x1>

c001ee74 <value_37A>:
c001ee74:	7a 03                	jp     c001ee79 <x87Detect+0x3>

c001ee76 <x87Detect>:
c001ee76:	b8 01 00 00 00       	mov    eax,0x1
c001ee7b:	0f a2                	cpuid  
c001ee7d:	f7 c2 01 00 00 00    	test   edx,0x1
c001ee83:	74 06                	je     c001ee8b <x87Detect.nox87>
c001ee85:	b8 01 00 00 00       	mov    eax,0x1
c001ee8a:	c3                   	ret    

c001ee8b <x87Detect.nox87>:
c001ee8b:	b8 00 00 00 00       	mov    eax,0x0
c001ee90:	c3                   	ret    

c001ee91 <x87Save>:
c001ee91:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee95:	dd 30                	fnsave [eax]
c001ee97:	c3                   	ret    

c001ee98 <x87Load>:
c001ee98:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ee9c:	dd 20                	frstor [eax]
c001ee9e:	c3                   	ret    

c001ee9f <x87Init>:
c001ee9f:	0f 20 c0             	mov    eax,cr0
c001eea2:	66 25 fb ff          	and    ax,0xfffb
c001eea6:	66 0d 22 00          	or     ax,0x22
c001eeaa:	0f 22 c0             	mov    cr0,eax
c001eead:	db e3                	fninit 
c001eeaf:	0f 06                	clts   
c001eeb1:	d9 2d 74 ee 01 c0    	fldcw  WORD PTR ds:0xc001ee74
c001eeb7:	c3                   	ret    

c001eeb8 <x87Close>:
c001eeb8:	c3                   	ret    
c001eeb9:	66 90                	xchg   ax,ax
c001eebb:	90                   	nop

c001eebc <__do_global_ctors_aux>:
c001eebc:	a1 70 fe 01 c0       	mov    eax,ds:0xc001fe70
c001eec1:	83 f8 ff             	cmp    eax,0xffffffff
c001eec4:	74 1a                	je     c001eee0 <__do_global_ctors_aux+0x24>
c001eec6:	55                   	push   ebp
c001eec7:	89 e5                	mov    ebp,esp
c001eec9:	53                   	push   ebx
c001eeca:	52                   	push   edx
c001eecb:	bb 70 fe 01 c0       	mov    ebx,0xc001fe70
c001eed0:	ff d0                	call   eax
c001eed2:	83 eb 04             	sub    ebx,0x4
c001eed5:	8b 03                	mov    eax,DWORD PTR [ebx]
c001eed7:	83 f8 ff             	cmp    eax,0xffffffff
c001eeda:	75 f4                	jne    c001eed0 <__do_global_ctors_aux+0x14>
c001eedc:	58                   	pop    eax
c001eedd:	5b                   	pop    ebx
c001eede:	5d                   	pop    ebp
c001eedf:	c3                   	ret    
c001eee0:	c3                   	ret    
c001eee1:	66 90                	xchg   ax,ax
c001eee3:	90                   	nop

c001eee4 <__divdi3>:
c001eee4:	55                   	push   ebp
c001eee5:	57                   	push   edi
c001eee6:	56                   	push   esi
c001eee7:	53                   	push   ebx
c001eee8:	83 ec 1c             	sub    esp,0x1c
c001eeeb:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001eeef:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001eef3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001eef6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001eefa:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c001eefe:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001ef02:	85 db                	test   ebx,ebx
c001ef04:	0f 88 8e 00 00 00    	js     c001ef98 <__divdi3+0xb4>
c001ef0a:	89 dd                	mov    ebp,ebx
c001ef0c:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ef14:	89 d3                	mov    ebx,edx
c001ef16:	85 d2                	test   edx,edx
c001ef18:	79 0d                	jns    c001ef27 <__divdi3+0x43>
c001ef1a:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c001ef1e:	f7 d8                	neg    eax
c001ef20:	83 d2 00             	adc    edx,0x0
c001ef23:	f7 da                	neg    edx
c001ef25:	89 d3                	mov    ebx,edx
c001ef27:	89 c7                	mov    edi,eax
c001ef29:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ef2c:	85 db                	test   ebx,ebx
c001ef2e:	75 48                	jne    c001ef78 <__divdi3+0x94>
c001ef30:	39 ef                	cmp    edi,ebp
c001ef32:	76 24                	jbe    c001ef58 <__divdi3+0x74>
c001ef34:	89 ea                	mov    edx,ebp
c001ef36:	f7 f7                	div    edi
c001ef38:	89 c1                	mov    ecx,eax
c001ef3a:	31 f6                	xor    esi,esi
c001ef3c:	89 c8                	mov    eax,ecx
c001ef3e:	89 f2                	mov    edx,esi
c001ef40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ef44:	85 c9                	test   ecx,ecx
c001ef46:	74 07                	je     c001ef4f <__divdi3+0x6b>
c001ef48:	f7 d8                	neg    eax
c001ef4a:	83 d2 00             	adc    edx,0x0
c001ef4d:	f7 da                	neg    edx
c001ef4f:	83 c4 1c             	add    esp,0x1c
c001ef52:	5b                   	pop    ebx
c001ef53:	5e                   	pop    esi
c001ef54:	5f                   	pop    edi
c001ef55:	5d                   	pop    ebp
c001ef56:	c3                   	ret    
c001ef57:	90                   	nop
c001ef58:	85 ff                	test   edi,edi
c001ef5a:	75 0b                	jne    c001ef67 <__divdi3+0x83>
c001ef5c:	b8 01 00 00 00       	mov    eax,0x1
c001ef61:	31 d2                	xor    edx,edx
c001ef63:	f7 f3                	div    ebx
c001ef65:	89 c7                	mov    edi,eax
c001ef67:	31 d2                	xor    edx,edx
c001ef69:	89 e8                	mov    eax,ebp
c001ef6b:	f7 f7                	div    edi
c001ef6d:	89 c6                	mov    esi,eax
c001ef6f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001ef72:	f7 f7                	div    edi
c001ef74:	89 c1                	mov    ecx,eax
c001ef76:	eb c4                	jmp    c001ef3c <__divdi3+0x58>
c001ef78:	39 eb                	cmp    ebx,ebp
c001ef7a:	77 3c                	ja     c001efb8 <__divdi3+0xd4>
c001ef7c:	0f bd f3             	bsr    esi,ebx
c001ef7f:	83 f6 1f             	xor    esi,0x1f
c001ef82:	75 40                	jne    c001efc4 <__divdi3+0xe0>
c001ef84:	39 eb                	cmp    ebx,ebp
c001ef86:	72 09                	jb     c001ef91 <__divdi3+0xad>
c001ef88:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c001ef8b:	0f 87 97 00 00 00    	ja     c001f028 <__divdi3+0x144>
c001ef91:	b9 01 00 00 00       	mov    ecx,0x1
c001ef96:	eb a4                	jmp    c001ef3c <__divdi3+0x58>
c001ef98:	f7 d9                	neg    ecx
c001ef9a:	83 d3 00             	adc    ebx,0x0
c001ef9d:	f7 db                	neg    ebx
c001ef9f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001efa2:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c001efa6:	89 dd                	mov    ebp,ebx
c001efa8:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c001efb0:	e9 5f ff ff ff       	jmp    c001ef14 <__divdi3+0x30>
c001efb5:	8d 76 00             	lea    esi,[esi+0x0]
c001efb8:	31 f6                	xor    esi,esi
c001efba:	31 c9                	xor    ecx,ecx
c001efbc:	e9 7b ff ff ff       	jmp    c001ef3c <__divdi3+0x58>
c001efc1:	8d 76 00             	lea    esi,[esi+0x0]
c001efc4:	b8 20 00 00 00       	mov    eax,0x20
c001efc9:	29 f0                	sub    eax,esi
c001efcb:	89 f1                	mov    ecx,esi
c001efcd:	d3 e3                	shl    ebx,cl
c001efcf:	89 fa                	mov    edx,edi
c001efd1:	88 c1                	mov    cl,al
c001efd3:	d3 ea                	shr    edx,cl
c001efd5:	09 da                	or     edx,ebx
c001efd7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001efdb:	89 f1                	mov    ecx,esi
c001efdd:	d3 e7                	shl    edi,cl
c001efdf:	89 eb                	mov    ebx,ebp
c001efe1:	88 c1                	mov    cl,al
c001efe3:	d3 eb                	shr    ebx,cl
c001efe5:	89 f1                	mov    ecx,esi
c001efe7:	d3 e5                	shl    ebp,cl
c001efe9:	8b 14 24             	mov    edx,DWORD PTR [esp]
c001efec:	88 c1                	mov    cl,al
c001efee:	d3 ea                	shr    edx,cl
c001eff0:	09 d5                	or     ebp,edx
c001eff2:	89 e8                	mov    eax,ebp
c001eff4:	89 da                	mov    edx,ebx
c001eff6:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c001effa:	89 d3                	mov    ebx,edx
c001effc:	89 c5                	mov    ebp,eax
c001effe:	f7 e7                	mul    edi
c001f000:	39 d3                	cmp    ebx,edx
c001f002:	72 18                	jb     c001f01c <__divdi3+0x138>
c001f004:	74 0a                	je     c001f010 <__divdi3+0x12c>
c001f006:	89 e9                	mov    ecx,ebp
c001f008:	31 f6                	xor    esi,esi
c001f00a:	e9 2d ff ff ff       	jmp    c001ef3c <__divdi3+0x58>
c001f00f:	90                   	nop
c001f010:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c001f013:	89 f1                	mov    ecx,esi
c001f015:	d3 e7                	shl    edi,cl
c001f017:	39 c7                	cmp    edi,eax
c001f019:	73 eb                	jae    c001f006 <__divdi3+0x122>
c001f01b:	90                   	nop
c001f01c:	8d 4d ff             	lea    ecx,[ebp-0x1]
c001f01f:	31 f6                	xor    esi,esi
c001f021:	e9 16 ff ff ff       	jmp    c001ef3c <__divdi3+0x58>
c001f026:	66 90                	xchg   ax,ax
c001f028:	31 c9                	xor    ecx,ecx
c001f02a:	e9 0d ff ff ff       	jmp    c001ef3c <__divdi3+0x58>
c001f02f:	90                   	nop

c001f030 <__moddi3>:
c001f030:	55                   	push   ebp
c001f031:	57                   	push   edi
c001f032:	56                   	push   esi
c001f033:	53                   	push   ebx
c001f034:	83 ec 2c             	sub    esp,0x2c
c001f037:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c001f03b:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c001f03f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001f043:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f047:	85 db                	test   ebx,ebx
c001f049:	0f 88 85 00 00 00    	js     c001f0d4 <__moddi3+0xa4>
c001f04f:	89 de                	mov    esi,ebx
c001f051:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001f059:	89 d7                	mov    edi,edx
c001f05b:	85 d2                	test   edx,edx
c001f05d:	79 09                	jns    c001f068 <__moddi3+0x38>
c001f05f:	f7 d8                	neg    eax
c001f061:	83 d2 00             	adc    edx,0x0
c001f064:	f7 da                	neg    edx
c001f066:	89 d7                	mov    edi,edx
c001f068:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f06c:	89 cd                	mov    ebp,ecx
c001f06e:	85 ff                	test   edi,edi
c001f070:	75 52                	jne    c001f0c4 <__moddi3+0x94>
c001f072:	89 c3                	mov    ebx,eax
c001f074:	39 f0                	cmp    eax,esi
c001f076:	76 24                	jbe    c001f09c <__moddi3+0x6c>
c001f078:	89 c8                	mov    eax,ecx
c001f07a:	89 f2                	mov    edx,esi
c001f07c:	f7 f3                	div    ebx
c001f07e:	89 d6                	mov    esi,edx
c001f080:	89 f0                	mov    eax,esi
c001f082:	31 d2                	xor    edx,edx
c001f084:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f088:	85 c9                	test   ecx,ecx
c001f08a:	74 07                	je     c001f093 <__moddi3+0x63>
c001f08c:	f7 d8                	neg    eax
c001f08e:	83 d2 00             	adc    edx,0x0
c001f091:	f7 da                	neg    edx
c001f093:	83 c4 2c             	add    esp,0x2c
c001f096:	5b                   	pop    ebx
c001f097:	5e                   	pop    esi
c001f098:	5f                   	pop    edi
c001f099:	5d                   	pop    ebp
c001f09a:	c3                   	ret    
c001f09b:	90                   	nop
c001f09c:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001f0a0:	85 db                	test   ebx,ebx
c001f0a2:	75 0d                	jne    c001f0b1 <__moddi3+0x81>
c001f0a4:	b8 01 00 00 00       	mov    eax,0x1
c001f0a9:	31 d2                	xor    edx,edx
c001f0ab:	f7 f7                	div    edi
c001f0ad:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001f0b1:	89 f0                	mov    eax,esi
c001f0b3:	31 d2                	xor    edx,edx
c001f0b5:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f0b9:	f7 f7                	div    edi
c001f0bb:	89 e8                	mov    eax,ebp
c001f0bd:	f7 f7                	div    edi
c001f0bf:	89 d6                	mov    esi,edx
c001f0c1:	eb bd                	jmp    c001f080 <__moddi3+0x50>
c001f0c3:	90                   	nop
c001f0c4:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f0c8:	39 f7                	cmp    edi,esi
c001f0ca:	76 20                	jbe    c001f0ec <__moddi3+0xbc>
c001f0cc:	89 c8                	mov    eax,ecx
c001f0ce:	89 f2                	mov    edx,esi
c001f0d0:	eb b2                	jmp    c001f084 <__moddi3+0x54>
c001f0d2:	66 90                	xchg   ax,ax
c001f0d4:	f7 d9                	neg    ecx
c001f0d6:	83 d3 00             	adc    ebx,0x0
c001f0d9:	f7 db                	neg    ebx
c001f0db:	89 de                	mov    esi,ebx
c001f0dd:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c001f0e5:	e9 6f ff ff ff       	jmp    c001f059 <__moddi3+0x29>
c001f0ea:	66 90                	xchg   ax,ax
c001f0ec:	0f bd c7             	bsr    eax,edi
c001f0ef:	83 f0 1f             	xor    eax,0x1f
c001f0f2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001f0f6:	75 24                	jne    c001f11c <__moddi3+0xec>
c001f0f8:	39 f7                	cmp    edi,esi
c001f0fa:	72 06                	jb     c001f102 <__moddi3+0xd2>
c001f0fc:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c001f100:	77 0c                	ja     c001f10e <__moddi3+0xde>
c001f102:	89 e9                	mov    ecx,ebp
c001f104:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c001f108:	19 fe                	sbb    esi,edi
c001f10a:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001f10e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001f112:	89 f2                	mov    edx,esi
c001f114:	e9 6b ff ff ff       	jmp    c001f084 <__moddi3+0x54>
c001f119:	8d 76 00             	lea    esi,[esi+0x0]
c001f11c:	b8 20 00 00 00       	mov    eax,0x20
c001f121:	89 c2                	mov    edx,eax
c001f123:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001f127:	29 da                	sub    edx,ebx
c001f129:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001f12d:	88 d9                	mov    cl,bl
c001f12f:	d3 e7                	shl    edi,cl
c001f131:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001f135:	88 d1                	mov    cl,dl
c001f137:	d3 e8                	shr    eax,cl
c001f139:	09 c7                	or     edi,eax
c001f13b:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c001f13f:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f143:	89 d8                	mov    eax,ebx
c001f145:	88 d9                	mov    cl,bl
c001f147:	d3 e7                	shl    edi,cl
c001f149:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f14d:	89 f3                	mov    ebx,esi
c001f14f:	88 d1                	mov    cl,dl
c001f151:	d3 eb                	shr    ebx,cl
c001f153:	89 c7                	mov    edi,eax
c001f155:	88 c1                	mov    cl,al
c001f157:	d3 e6                	shl    esi,cl
c001f159:	89 e8                	mov    eax,ebp
c001f15b:	88 d1                	mov    cl,dl
c001f15d:	d3 e8                	shr    eax,cl
c001f15f:	09 f0                	or     eax,esi
c001f161:	89 f9                	mov    ecx,edi
c001f163:	d3 e5                	shl    ebp,cl
c001f165:	89 da                	mov    edx,ebx
c001f167:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c001f16b:	89 d3                	mov    ebx,edx
c001f16d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f171:	89 c6                	mov    esi,eax
c001f173:	89 d1                	mov    ecx,edx
c001f175:	39 d3                	cmp    ebx,edx
c001f177:	72 27                	jb     c001f1a0 <__moddi3+0x170>
c001f179:	74 21                	je     c001f19c <__moddi3+0x16c>
c001f17b:	29 f5                	sub    ebp,esi
c001f17d:	19 cb                	sbb    ebx,ecx
c001f17f:	89 de                	mov    esi,ebx
c001f181:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c001f185:	d3 e6                	shl    esi,cl
c001f187:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001f18b:	89 f9                	mov    ecx,edi
c001f18d:	d3 ed                	shr    ebp,cl
c001f18f:	09 ee                	or     esi,ebp
c001f191:	89 f0                	mov    eax,esi
c001f193:	d3 eb                	shr    ebx,cl
c001f195:	89 da                	mov    edx,ebx
c001f197:	e9 e8 fe ff ff       	jmp    c001f084 <__moddi3+0x54>
c001f19c:	39 c5                	cmp    ebp,eax
c001f19e:	73 db                	jae    c001f17b <__moddi3+0x14b>
c001f1a0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f1a4:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c001f1a8:	89 d1                	mov    ecx,edx
c001f1aa:	89 c6                	mov    esi,eax
c001f1ac:	eb cd                	jmp    c001f17b <__moddi3+0x14b>
c001f1ae:	66 90                	xchg   ax,ax

c001f1b0 <__udivdi3>:
c001f1b0:	55                   	push   ebp
c001f1b1:	57                   	push   edi
c001f1b2:	56                   	push   esi
c001f1b3:	53                   	push   ebx
c001f1b4:	83 ec 1c             	sub    esp,0x1c
c001f1b7:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c001f1bb:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c001f1bf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f1c3:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001f1c7:	85 d2                	test   edx,edx
c001f1c9:	75 41                	jne    c001f20c <__udivdi3+0x5c>
c001f1cb:	39 f7                	cmp    edi,esi
c001f1cd:	76 15                	jbe    c001f1e4 <__udivdi3+0x34>
c001f1cf:	89 e8                	mov    eax,ebp
c001f1d1:	89 f2                	mov    edx,esi
c001f1d3:	f7 f7                	div    edi
c001f1d5:	31 db                	xor    ebx,ebx
c001f1d7:	89 da                	mov    edx,ebx
c001f1d9:	83 c4 1c             	add    esp,0x1c
c001f1dc:	5b                   	pop    ebx
c001f1dd:	5e                   	pop    esi
c001f1de:	5f                   	pop    edi
c001f1df:	5d                   	pop    ebp
c001f1e0:	c3                   	ret    
c001f1e1:	8d 76 00             	lea    esi,[esi+0x0]
c001f1e4:	89 f9                	mov    ecx,edi
c001f1e6:	85 ff                	test   edi,edi
c001f1e8:	75 0b                	jne    c001f1f5 <__udivdi3+0x45>
c001f1ea:	b8 01 00 00 00       	mov    eax,0x1
c001f1ef:	31 d2                	xor    edx,edx
c001f1f1:	f7 f7                	div    edi
c001f1f3:	89 c1                	mov    ecx,eax
c001f1f5:	31 d2                	xor    edx,edx
c001f1f7:	89 f0                	mov    eax,esi
c001f1f9:	f7 f1                	div    ecx
c001f1fb:	89 c3                	mov    ebx,eax
c001f1fd:	89 e8                	mov    eax,ebp
c001f1ff:	f7 f1                	div    ecx
c001f201:	89 da                	mov    edx,ebx
c001f203:	83 c4 1c             	add    esp,0x1c
c001f206:	5b                   	pop    ebx
c001f207:	5e                   	pop    esi
c001f208:	5f                   	pop    edi
c001f209:	5d                   	pop    ebp
c001f20a:	c3                   	ret    
c001f20b:	90                   	nop
c001f20c:	39 f2                	cmp    edx,esi
c001f20e:	77 1c                	ja     c001f22c <__udivdi3+0x7c>
c001f210:	0f bd da             	bsr    ebx,edx
c001f213:	83 f3 1f             	xor    ebx,0x1f
c001f216:	75 24                	jne    c001f23c <__udivdi3+0x8c>
c001f218:	39 f2                	cmp    edx,esi
c001f21a:	72 08                	jb     c001f224 <__udivdi3+0x74>
c001f21c:	39 ef                	cmp    edi,ebp
c001f21e:	0f 87 84 00 00 00    	ja     c001f2a8 <__udivdi3+0xf8>
c001f224:	b8 01 00 00 00       	mov    eax,0x1
c001f229:	eb ac                	jmp    c001f1d7 <__udivdi3+0x27>
c001f22b:	90                   	nop
c001f22c:	31 db                	xor    ebx,ebx
c001f22e:	31 c0                	xor    eax,eax
c001f230:	89 da                	mov    edx,ebx
c001f232:	83 c4 1c             	add    esp,0x1c
c001f235:	5b                   	pop    ebx
c001f236:	5e                   	pop    esi
c001f237:	5f                   	pop    edi
c001f238:	5d                   	pop    ebp
c001f239:	c3                   	ret    
c001f23a:	66 90                	xchg   ax,ax
c001f23c:	b8 20 00 00 00       	mov    eax,0x20
c001f241:	29 d8                	sub    eax,ebx
c001f243:	88 d9                	mov    cl,bl
c001f245:	d3 e2                	shl    edx,cl
c001f247:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001f24b:	89 fa                	mov    edx,edi
c001f24d:	88 c1                	mov    cl,al
c001f24f:	d3 ea                	shr    edx,cl
c001f251:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f255:	09 d1                	or     ecx,edx
c001f257:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f25b:	88 d9                	mov    cl,bl
c001f25d:	d3 e7                	shl    edi,cl
c001f25f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f263:	89 f7                	mov    edi,esi
c001f265:	88 c1                	mov    cl,al
c001f267:	d3 ef                	shr    edi,cl
c001f269:	88 d9                	mov    cl,bl
c001f26b:	d3 e6                	shl    esi,cl
c001f26d:	89 ea                	mov    edx,ebp
c001f26f:	88 c1                	mov    cl,al
c001f271:	d3 ea                	shr    edx,cl
c001f273:	09 d6                	or     esi,edx
c001f275:	89 f0                	mov    eax,esi
c001f277:	89 fa                	mov    edx,edi
c001f279:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f27d:	89 d7                	mov    edi,edx
c001f27f:	89 c6                	mov    esi,eax
c001f281:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f285:	39 d7                	cmp    edi,edx
c001f287:	72 13                	jb     c001f29c <__udivdi3+0xec>
c001f289:	74 09                	je     c001f294 <__udivdi3+0xe4>
c001f28b:	89 f0                	mov    eax,esi
c001f28d:	31 db                	xor    ebx,ebx
c001f28f:	e9 43 ff ff ff       	jmp    c001f1d7 <__udivdi3+0x27>
c001f294:	88 d9                	mov    cl,bl
c001f296:	d3 e5                	shl    ebp,cl
c001f298:	39 c5                	cmp    ebp,eax
c001f29a:	73 ef                	jae    c001f28b <__udivdi3+0xdb>
c001f29c:	8d 46 ff             	lea    eax,[esi-0x1]
c001f29f:	31 db                	xor    ebx,ebx
c001f2a1:	e9 31 ff ff ff       	jmp    c001f1d7 <__udivdi3+0x27>
c001f2a6:	66 90                	xchg   ax,ax
c001f2a8:	31 c0                	xor    eax,eax
c001f2aa:	e9 28 ff ff ff       	jmp    c001f1d7 <__udivdi3+0x27>
c001f2af:	90                   	nop

c001f2b0 <__umoddi3>:
c001f2b0:	55                   	push   ebp
c001f2b1:	57                   	push   edi
c001f2b2:	56                   	push   esi
c001f2b3:	53                   	push   ebx
c001f2b4:	83 ec 1c             	sub    esp,0x1c
c001f2b7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001f2bb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001f2bf:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001f2c3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001f2c7:	89 da                	mov    edx,ebx
c001f2c9:	85 c0                	test   eax,eax
c001f2cb:	75 37                	jne    c001f304 <__umoddi3+0x54>
c001f2cd:	39 df                	cmp    edi,ebx
c001f2cf:	76 13                	jbe    c001f2e4 <__umoddi3+0x34>
c001f2d1:	89 f0                	mov    eax,esi
c001f2d3:	f7 f7                	div    edi
c001f2d5:	89 d0                	mov    eax,edx
c001f2d7:	31 d2                	xor    edx,edx
c001f2d9:	83 c4 1c             	add    esp,0x1c
c001f2dc:	5b                   	pop    ebx
c001f2dd:	5e                   	pop    esi
c001f2de:	5f                   	pop    edi
c001f2df:	5d                   	pop    ebp
c001f2e0:	c3                   	ret    
c001f2e1:	8d 76 00             	lea    esi,[esi+0x0]
c001f2e4:	89 fd                	mov    ebp,edi
c001f2e6:	85 ff                	test   edi,edi
c001f2e8:	75 0b                	jne    c001f2f5 <__umoddi3+0x45>
c001f2ea:	b8 01 00 00 00       	mov    eax,0x1
c001f2ef:	31 d2                	xor    edx,edx
c001f2f1:	f7 f7                	div    edi
c001f2f3:	89 c5                	mov    ebp,eax
c001f2f5:	89 d8                	mov    eax,ebx
c001f2f7:	31 d2                	xor    edx,edx
c001f2f9:	f7 f5                	div    ebp
c001f2fb:	89 f0                	mov    eax,esi
c001f2fd:	f7 f5                	div    ebp
c001f2ff:	89 d0                	mov    eax,edx
c001f301:	eb d4                	jmp    c001f2d7 <__umoddi3+0x27>
c001f303:	90                   	nop
c001f304:	89 f1                	mov    ecx,esi
c001f306:	39 d8                	cmp    eax,ebx
c001f308:	76 0a                	jbe    c001f314 <__umoddi3+0x64>
c001f30a:	89 f0                	mov    eax,esi
c001f30c:	83 c4 1c             	add    esp,0x1c
c001f30f:	5b                   	pop    ebx
c001f310:	5e                   	pop    esi
c001f311:	5f                   	pop    edi
c001f312:	5d                   	pop    ebp
c001f313:	c3                   	ret    
c001f314:	0f bd e8             	bsr    ebp,eax
c001f317:	83 f5 1f             	xor    ebp,0x1f
c001f31a:	75 1c                	jne    c001f338 <__umoddi3+0x88>
c001f31c:	39 d8                	cmp    eax,ebx
c001f31e:	72 04                	jb     c001f324 <__umoddi3+0x74>
c001f320:	39 f7                	cmp    edi,esi
c001f322:	77 08                	ja     c001f32c <__umoddi3+0x7c>
c001f324:	89 da                	mov    edx,ebx
c001f326:	29 fe                	sub    esi,edi
c001f328:	19 c2                	sbb    edx,eax
c001f32a:	89 f1                	mov    ecx,esi
c001f32c:	89 c8                	mov    eax,ecx
c001f32e:	83 c4 1c             	add    esp,0x1c
c001f331:	5b                   	pop    ebx
c001f332:	5e                   	pop    esi
c001f333:	5f                   	pop    edi
c001f334:	5d                   	pop    ebp
c001f335:	c3                   	ret    
c001f336:	66 90                	xchg   ax,ax
c001f338:	ba 20 00 00 00       	mov    edx,0x20
c001f33d:	29 ea                	sub    edx,ebp
c001f33f:	89 e9                	mov    ecx,ebp
c001f341:	d3 e0                	shl    eax,cl
c001f343:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001f347:	89 f8                	mov    eax,edi
c001f349:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001f34d:	88 d1                	mov    cl,dl
c001f34f:	d3 e8                	shr    eax,cl
c001f351:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001f355:	09 c1                	or     ecx,eax
c001f357:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001f35b:	89 e9                	mov    ecx,ebp
c001f35d:	d3 e7                	shl    edi,cl
c001f35f:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001f363:	89 d8                	mov    eax,ebx
c001f365:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f369:	88 d1                	mov    cl,dl
c001f36b:	d3 e8                	shr    eax,cl
c001f36d:	89 c7                	mov    edi,eax
c001f36f:	89 e9                	mov    ecx,ebp
c001f371:	d3 e3                	shl    ebx,cl
c001f373:	89 f0                	mov    eax,esi
c001f375:	88 d1                	mov    cl,dl
c001f377:	d3 e8                	shr    eax,cl
c001f379:	09 d8                	or     eax,ebx
c001f37b:	89 e9                	mov    ecx,ebp
c001f37d:	d3 e6                	shl    esi,cl
c001f37f:	89 f3                	mov    ebx,esi
c001f381:	89 fa                	mov    edx,edi
c001f383:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c001f387:	89 d1                	mov    ecx,edx
c001f389:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c001f38d:	89 c6                	mov    esi,eax
c001f38f:	89 d7                	mov    edi,edx
c001f391:	39 d1                	cmp    ecx,edx
c001f393:	72 27                	jb     c001f3bc <__umoddi3+0x10c>
c001f395:	74 21                	je     c001f3b8 <__umoddi3+0x108>
c001f397:	89 ca                	mov    edx,ecx
c001f399:	29 f3                	sub    ebx,esi
c001f39b:	19 fa                	sbb    edx,edi
c001f39d:	89 d0                	mov    eax,edx
c001f39f:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001f3a3:	d3 e0                	shl    eax,cl
c001f3a5:	89 e9                	mov    ecx,ebp
c001f3a7:	d3 eb                	shr    ebx,cl
c001f3a9:	09 d8                	or     eax,ebx
c001f3ab:	d3 ea                	shr    edx,cl
c001f3ad:	83 c4 1c             	add    esp,0x1c
c001f3b0:	5b                   	pop    ebx
c001f3b1:	5e                   	pop    esi
c001f3b2:	5f                   	pop    edi
c001f3b3:	5d                   	pop    ebp
c001f3b4:	c3                   	ret    
c001f3b5:	8d 76 00             	lea    esi,[esi+0x0]
c001f3b8:	39 c3                	cmp    ebx,eax
c001f3ba:	73 db                	jae    c001f397 <__umoddi3+0xe7>
c001f3bc:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c001f3c0:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c001f3c4:	89 d7                	mov    edi,edx
c001f3c6:	89 c6                	mov    esi,eax
c001f3c8:	eb cd                	jmp    c001f397 <__umoddi3+0xe7>

Disassembly of section .init:

c001f3ca <_init>:
c001f3ca:	55                   	push   ebp
c001f3cb:	89 e5                	mov    ebp,esp
c001f3cd:	e8 22 0d fe ff       	call   c00000f4 <frame_dummy>
c001f3d2:	e8 e5 fa ff ff       	call   c001eebc <__do_global_ctors_aux>
c001f3d7:	5d                   	pop    ebp
c001f3d8:	c3                   	ret    

Disassembly of section .fini:

c001f3d9 <_fini>:
c001f3d9:	55                   	push   ebp
c001f3da:	89 e5                	mov    ebp,esp
c001f3dc:	e8 a3 0c fe ff       	call   c0000084 <__do_global_dtors_aux>
c001f3e1:	5d                   	pop    ebp
c001f3e2:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c001f3e4 <Computer::~Computer()>:
c001f3e4:	83 ec 0c             	sub    esp,0xc
c001f3e7:	ba f4 06 02 c0       	mov    edx,0xc00206f4
c001f3ec:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3f0:	89 10                	mov    DWORD PTR [eax],edx
c001f3f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f3f6:	83 ec 0c             	sub    esp,0xc
c001f3f9:	50                   	push   eax
c001f3fa:	e8 4d d1 fe ff       	call   c000c54c <Device::~Device()>
c001f3ff:	83 c4 10             	add    esp,0x10
c001f402:	90                   	nop
c001f403:	83 c4 0c             	add    esp,0xc
c001f406:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c001f408 <Computer::~Computer()>:
c001f408:	83 ec 0c             	sub    esp,0xc
c001f40b:	83 ec 0c             	sub    esp,0xc
c001f40e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f412:	e8 cd ff ff ff       	call   c001f3e4 <Computer::~Computer()>
c001f417:	83 c4 10             	add    esp,0x10
c001f41a:	83 ec 08             	sub    esp,0x8
c001f41d:	68 70 01 00 00       	push   0x170
c001f422:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f426:	e8 ed b3 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f42b:	83 c4 10             	add    esp,0x10
c001f42e:	83 c4 0c             	add    esp,0xc
c001f431:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c001f432 <idleCommon()>:
c001f432:	83 ec 0c             	sub    esp,0xc
c001f435:	fa                   	cli    
c001f436:	ff 05 c8 96 02 c0    	inc    DWORD PTR ds:0xc00296c8
c001f43c:	e8 f7 66 ff ff       	call   c0015b38 <schedule()>
c001f441:	a1 c8 96 02 c0       	mov    eax,ds:0xc00296c8
c001f446:	48                   	dec    eax
c001f447:	a3 c8 96 02 c0       	mov    ds:0xc00296c8,eax
c001f44c:	75 01                	jne    c001f44f <idleCommon()+0x1d>
c001f44e:	fb                   	sti    
c001f44f:	83 c4 0c             	add    esp,0xc
c001f452:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c001f454 <LinkedList<UnixFile>::~LinkedList()>:
c001f454:	90                   	nop
c001f455:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c001f456 <LinkedList<UnixFile>::LinkedList()>:
c001f456:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f45a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f460:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f464:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f46b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f46f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f476:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f47a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f480:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f484:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f48b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f48f:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f496:	90                   	nop
c001f497:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c001f498 <LinkedList<UnixFile>::addElement(UnixFile*)>:
c001f498:	83 ec 0c             	sub    esp,0xc
c001f49b:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f4a0:	75 10                	jne    c001f4b2 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c001f4a2:	83 ec 0c             	sub    esp,0xc
c001f4a5:	68 08 09 02 c0       	push   0xc0020908
c001f4aa:	e8 ca 1d ff ff       	call   c0011279 <KePanic(char const*)>
c001f4af:	83 c4 10             	add    esp,0x10
c001f4b2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4b6:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4b8:	85 c0                	test   eax,eax
c001f4ba:	74 34                	je     c001f4f0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f4bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4c3:	85 c0                	test   eax,eax
c001f4c5:	74 29                	je     c001f4f0 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c001f4c7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4cb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4ce:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4d2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f4d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f4dd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f4e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4e4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f4e7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f4ee:	eb 65                	jmp    c001f555 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f4f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f4f6:	85 c0                	test   eax,eax
c001f4f8:	75 4b                	jne    c001f545 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f4fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f4fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f501:	85 c0                	test   eax,eax
c001f503:	75 40                	jne    c001f545 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c001f505:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f509:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f50d:	89 10                	mov    DWORD PTR [eax],edx
c001f50f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f513:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f517:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f51a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f51e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f521:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f528:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f52c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f52f:	85 c0                	test   eax,eax
c001f531:	74 22                	je     c001f555 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f533:	83 ec 0c             	sub    esp,0xc
c001f536:	68 2a 09 02 c0       	push   0xc002092a
c001f53b:	e8 39 1d ff ff       	call   c0011279 <KePanic(char const*)>
c001f540:	83 c4 10             	add    esp,0x10
c001f543:	eb 10                	jmp    c001f555 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c001f545:	83 ec 0c             	sub    esp,0xc
c001f548:	68 34 09 02 c0       	push   0xc0020934
c001f54d:	e8 27 1d ff ff       	call   c0011279 <KePanic(char const*)>
c001f552:	83 c4 10             	add    esp,0x10
c001f555:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f559:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f55c:	8d 50 01             	lea    edx,[eax+0x1]
c001f55f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f563:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f566:	90                   	nop
c001f567:	83 c4 0c             	add    esp,0xc
c001f56a:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c001f56c <LinkedList<UnixFile>::getFirstElement()>:
c001f56c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f570:	8b 00                	mov    eax,DWORD PTR [eax]
c001f572:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c001f574 <LinkedList<UnixFile>::removeFirst()>:
c001f574:	83 ec 0c             	sub    esp,0xc
c001f577:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f57b:	8b 00                	mov    eax,DWORD PTR [eax]
c001f57d:	85 c0                	test   eax,eax
c001f57f:	75 12                	jne    c001f593 <LinkedList<UnixFile>::removeFirst()+0x1f>
c001f581:	83 ec 0c             	sub    esp,0xc
c001f584:	68 40 09 02 c0       	push   0xc0020940
c001f589:	e8 eb 1c ff ff       	call   c0011279 <KePanic(char const*)>
c001f58e:	83 c4 10             	add    esp,0x10
c001f591:	eb 7e                	jmp    c001f611 <LinkedList<UnixFile>::removeFirst()+0x9d>
c001f593:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f597:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f59a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f59d:	85 c0                	test   eax,eax
c001f59f:	74 10                	je     c001f5b1 <LinkedList<UnixFile>::removeFirst()+0x3d>
c001f5a1:	83 ec 0c             	sub    esp,0xc
c001f5a4:	68 8b 09 02 c0       	push   0xc002098b
c001f5a9:	e8 cb 1c ff ff       	call   c0011279 <KePanic(char const*)>
c001f5ae:	83 c4 10             	add    esp,0x10
c001f5b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5b5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5b7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5ba:	85 c0                	test   eax,eax
c001f5bc:	75 33                	jne    c001f5f1 <LinkedList<UnixFile>::removeFirst()+0x7d>
c001f5be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f5c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5cc:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f5d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5d7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f5da:	83 f8 01             	cmp    eax,0x1
c001f5dd:	74 21                	je     c001f600 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f5df:	83 ec 0c             	sub    esp,0xc
c001f5e2:	68 64 09 02 c0       	push   0xc0020964
c001f5e7:	e8 8d 1c ff ff       	call   c0011279 <KePanic(char const*)>
c001f5ec:	83 c4 10             	add    esp,0x10
c001f5ef:	eb 0f                	jmp    c001f600 <LinkedList<UnixFile>::removeFirst()+0x8c>
c001f5f1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5f5:	8b 00                	mov    eax,DWORD PTR [eax]
c001f5f7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c001f5fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f5fe:	89 10                	mov    DWORD PTR [eax],edx
c001f600:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f604:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f607:	8d 50 ff             	lea    edx,[eax-0x1]
c001f60a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f60e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f611:	83 c4 0c             	add    esp,0xc
c001f614:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c001f616 <LinkedList<UnixFile>::getNext(UnixFile*)>:
c001f616:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001f61a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f61d:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c001f61e <DriverlessDevice::~DriverlessDevice()>:
c001f61e:	ba bc 14 02 c0       	mov    edx,0xc00214bc
c001f623:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f627:	89 10                	mov    DWORD PTR [eax],edx
c001f629:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f62d:	50                   	push   eax
c001f62e:	e8 19 cf fe ff       	call   c000c54c <Device::~Device()>
c001f633:	83 c4 04             	add    esp,0x4
c001f636:	90                   	nop
c001f637:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c001f638 <DriverlessDevice::~DriverlessDevice()>:
c001f638:	83 ec 0c             	sub    esp,0xc
c001f63b:	83 ec 0c             	sub    esp,0xc
c001f63e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f642:	e8 d7 ff ff ff       	call   c001f61e <DriverlessDevice::~DriverlessDevice()>
c001f647:	83 c4 10             	add    esp,0x10
c001f64a:	83 ec 08             	sub    esp,0x8
c001f64d:	68 58 01 00 00       	push   0x158
c001f652:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f656:	e8 bd b1 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f65b:	83 c4 10             	add    esp,0x10
c001f65e:	83 c4 0c             	add    esp,0xc
c001f661:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c001f662 <LinkedList<Device>::addElement(Device*)>:
c001f662:	83 ec 0c             	sub    esp,0xc
c001f665:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f66a:	75 10                	jne    c001f67c <LinkedList<Device>::addElement(Device*)+0x1a>
c001f66c:	83 ec 0c             	sub    esp,0xc
c001f66f:	68 08 09 02 c0       	push   0xc0020908
c001f674:	e8 00 1c ff ff       	call   c0011279 <KePanic(char const*)>
c001f679:	83 c4 10             	add    esp,0x10
c001f67c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f680:	8b 00                	mov    eax,DWORD PTR [eax]
c001f682:	85 c0                	test   eax,eax
c001f684:	74 3a                	je     c001f6c0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f686:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f68a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f68d:	85 c0                	test   eax,eax
c001f68f:	74 2f                	je     c001f6c0 <LinkedList<Device>::addElement(Device*)+0x5e>
c001f691:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f695:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f698:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f69c:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c001f6a2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6a6:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6aa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f6ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6b4:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f6be:	eb 68                	jmp    c001f728 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f6c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6c4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f6c6:	85 c0                	test   eax,eax
c001f6c8:	75 4e                	jne    c001f718 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f6ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ce:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6d1:	85 c0                	test   eax,eax
c001f6d3:	75 43                	jne    c001f718 <LinkedList<Device>::addElement(Device*)+0xb6>
c001f6d5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6d9:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6dd:	89 10                	mov    DWORD PTR [eax],edx
c001f6df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6e3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f6e7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f6ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f6f1:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c001f6fb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f6ff:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f702:	85 c0                	test   eax,eax
c001f704:	74 22                	je     c001f728 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f706:	83 ec 0c             	sub    esp,0xc
c001f709:	68 2a 09 02 c0       	push   0xc002092a
c001f70e:	e8 66 1b ff ff       	call   c0011279 <KePanic(char const*)>
c001f713:	83 c4 10             	add    esp,0x10
c001f716:	eb 10                	jmp    c001f728 <LinkedList<Device>::addElement(Device*)+0xc6>
c001f718:	83 ec 0c             	sub    esp,0xc
c001f71b:	68 34 09 02 c0       	push   0xc0020934
c001f720:	e8 54 1b ff ff       	call   c0011279 <KePanic(char const*)>
c001f725:	83 c4 10             	add    esp,0x10
c001f728:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f72c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f72f:	8d 50 01             	lea    edx,[eax+0x1]
c001f732:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f736:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f739:	90                   	nop
c001f73a:	83 c4 0c             	add    esp,0xc
c001f73d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c001f73e <LinkedList<Device>::LinkedList()>:
c001f73e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f742:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f748:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f74c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f753:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f757:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f75e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f762:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f768:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f76c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f773:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f777:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001f77e:	90                   	nop
c001f77f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c001f780 <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c001f780:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f784:	8b 00                	mov    eax,DWORD PTR [eax]
c001f786:	85 c0                	test   eax,eax
c001f788:	75 0e                	jne    c001f798 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f78a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f78e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f791:	85 c0                	test   eax,eax
c001f793:	75 03                	jne    c001f798 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c001f795:	b0 01                	mov    al,0x1
c001f797:	c3                   	ret    
c001f798:	b0 00                	mov    al,0x0
c001f79a:	90                   	nop
c001f79b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c001f79c <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c001f79c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f7a0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7a2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c001f7a4 <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c001f7a4:	83 ec 0c             	sub    esp,0xc
c001f7a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7ab:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7ad:	85 c0                	test   eax,eax
c001f7af:	75 17                	jne    c001f7c8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x24>
c001f7b1:	83 ec 0c             	sub    esp,0xc
c001f7b4:	68 40 09 02 c0       	push   0xc0020940
c001f7b9:	e8 bb 1a ff ff       	call   c0011279 <KePanic(char const*)>
c001f7be:	83 c4 10             	add    esp,0x10
c001f7c1:	e9 96 00 00 00       	jmp    c001f85c <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xb8>
c001f7c6:	66 90                	xchg   ax,ax
c001f7c8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7cc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f7cf:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f7d2:	85 c0                	test   eax,eax
c001f7d4:	0f 95 c0             	setne  al
c001f7d7:	0f b6 c0             	movzx  eax,al
c001f7da:	85 c0                	test   eax,eax
c001f7dc:	74 12                	je     c001f7f0 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x4c>
c001f7de:	83 ec 0c             	sub    esp,0xc
c001f7e1:	68 8b 09 02 c0       	push   0xc002098b
c001f7e6:	e8 8e 1a ff ff       	call   c0011279 <KePanic(char const*)>
c001f7eb:	83 c4 10             	add    esp,0x10
c001f7ee:	66 90                	xchg   ax,ax
c001f7f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f7f4:	8b 00                	mov    eax,DWORD PTR [eax]
c001f7f6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001f7f9:	85 c0                	test   eax,eax
c001f7fb:	0f 94 c0             	sete   al
c001f7fe:	0f b6 c0             	movzx  eax,al
c001f801:	85 c0                	test   eax,eax
c001f803:	74 33                	je     c001f838 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x94>
c001f805:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f809:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001f80f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f813:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001f81a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f81e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f821:	83 f8 01             	cmp    eax,0x1
c001f824:	74 22                	je     c001f848 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f826:	83 ec 0c             	sub    esp,0xc
c001f829:	68 64 09 02 c0       	push   0xc0020964
c001f82e:	e8 46 1a ff ff       	call   c0011279 <KePanic(char const*)>
c001f833:	83 c4 10             	add    esp,0x10
c001f836:	eb 10                	jmp    c001f848 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xa4>
c001f838:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f83c:	8b 00                	mov    eax,DWORD PTR [eax]
c001f83e:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001f841:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f845:	89 10                	mov    DWORD PTR [eax],edx
c001f847:	90                   	nop
c001f848:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f84c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f84f:	8d 50 ff             	lea    edx,[eax-0x1]
c001f852:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f856:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f859:	8d 76 00             	lea    esi,[esi+0x0]
c001f85c:	83 c4 0c             	add    esp,0xc
c001f85f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c001f860 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c001f860:	83 ec 0c             	sub    esp,0xc
c001f863:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001f868:	75 12                	jne    c001f87c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1c>
c001f86a:	83 ec 0c             	sub    esp,0xc
c001f86d:	68 08 09 02 c0       	push   0xc0020908
c001f872:	e8 02 1a ff ff       	call   c0011279 <KePanic(char const*)>
c001f877:	83 c4 10             	add    esp,0x10
c001f87a:	66 90                	xchg   ax,ax
c001f87c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f880:	8b 00                	mov    eax,DWORD PTR [eax]
c001f882:	85 c0                	test   eax,eax
c001f884:	74 36                	je     c001f8bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f886:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f88a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f88d:	85 c0                	test   eax,eax
c001f88f:	74 2b                	je     c001f8bc <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x5c>
c001f891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f895:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f898:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f89c:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001f89f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8a7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8b1:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f8b8:	eb 6a                	jmp    c001f924 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f8ba:	66 90                	xchg   ax,ax
c001f8bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8c0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f8c2:	85 c0                	test   eax,eax
c001f8c4:	75 4e                	jne    c001f914 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f8c6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ca:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8cd:	85 c0                	test   eax,eax
c001f8cf:	75 43                	jne    c001f914 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xb4>
c001f8d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8d5:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8d9:	89 10                	mov    DWORD PTR [eax],edx
c001f8db:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8df:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001f8e3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001f8e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8ea:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f8ed:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001f8f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f8f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f8fb:	85 c0                	test   eax,eax
c001f8fd:	74 25                	je     c001f924 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f8ff:	83 ec 0c             	sub    esp,0xc
c001f902:	68 2a 09 02 c0       	push   0xc002092a
c001f907:	e8 6d 19 ff ff       	call   c0011279 <KePanic(char const*)>
c001f90c:	83 c4 10             	add    esp,0x10
c001f90f:	eb 13                	jmp    c001f924 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xc4>
c001f911:	8d 76 00             	lea    esi,[esi+0x0]
c001f914:	83 ec 0c             	sub    esp,0xc
c001f917:	68 34 09 02 c0       	push   0xc0020934
c001f91c:	e8 58 19 ff ff       	call   c0011279 <KePanic(char const*)>
c001f921:	83 c4 10             	add    esp,0x10
c001f924:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f928:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001f92b:	8d 50 01             	lea    edx,[eax+0x1]
c001f92e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f932:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001f935:	90                   	nop
c001f936:	83 c4 0c             	add    esp,0xc
c001f939:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c001f93c <ACPI::~ACPI()>:
c001f93c:	83 ec 0c             	sub    esp,0xc
c001f93f:	ba a4 1a 02 c0       	mov    edx,0xc0021aa4
c001f944:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f948:	89 10                	mov    DWORD PTR [eax],edx
c001f94a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f94e:	83 ec 0c             	sub    esp,0xc
c001f951:	50                   	push   eax
c001f952:	e8 f5 cb fe ff       	call   c000c54c <Device::~Device()>
c001f957:	83 c4 10             	add    esp,0x10
c001f95a:	90                   	nop
c001f95b:	83 c4 0c             	add    esp,0xc
c001f95e:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c001f960 <ACPI::~ACPI()>:
c001f960:	83 ec 0c             	sub    esp,0xc
c001f963:	83 ec 0c             	sub    esp,0xc
c001f966:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f96a:	e8 cd ff ff ff       	call   c001f93c <ACPI::~ACPI()>
c001f96f:	83 c4 10             	add    esp,0x10
c001f972:	83 ec 08             	sub    esp,0x8
c001f975:	68 64 12 00 00       	push   0x1264
c001f97a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001f97e:	e8 95 ae fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001f983:	83 c4 10             	add    esp,0x10
c001f986:	83 c4 0c             	add    esp,0xc
c001f989:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c001f98c <LinkedList<Device>::~LinkedList()>:
c001f98c:	90                   	nop
c001f98d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c001f990 <LinkedList<Device>::isEmpty()>:
c001f990:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f994:	8b 00                	mov    eax,DWORD PTR [eax]
c001f996:	85 c0                	test   eax,eax
c001f998:	75 0e                	jne    c001f9a8 <LinkedList<Device>::isEmpty()+0x18>
c001f99a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f99e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9a1:	85 c0                	test   eax,eax
c001f9a3:	75 03                	jne    c001f9a8 <LinkedList<Device>::isEmpty()+0x18>
c001f9a5:	b0 01                	mov    al,0x1
c001f9a7:	c3                   	ret    
c001f9a8:	b0 00                	mov    al,0x0
c001f9aa:	90                   	nop
c001f9ab:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c001f9ac <LinkedList<Device>::getFirstElement()>:
c001f9ac:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f9b0:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9b2:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c001f9b4 <LinkedList<Device>::removeFirst()>:
c001f9b4:	83 ec 0c             	sub    esp,0xc
c001f9b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9bb:	8b 00                	mov    eax,DWORD PTR [eax]
c001f9bd:	85 c0                	test   eax,eax
c001f9bf:	75 17                	jne    c001f9d8 <LinkedList<Device>::removeFirst()+0x24>
c001f9c1:	83 ec 0c             	sub    esp,0xc
c001f9c4:	68 40 09 02 c0       	push   0xc0020940
c001f9c9:	e8 ab 18 ff ff       	call   c0011279 <KePanic(char const*)>
c001f9ce:	83 c4 10             	add    esp,0x10
c001f9d1:	e9 92 00 00 00       	jmp    c001fa68 <LinkedList<Device>::removeFirst()+0xb4>
c001f9d6:	66 90                	xchg   ax,ax
c001f9d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001f9dc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001f9df:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001f9e5:	85 c0                	test   eax,eax
c001f9e7:	74 13                	je     c001f9fc <LinkedList<Device>::removeFirst()+0x48>
c001f9e9:	83 ec 0c             	sub    esp,0xc
c001f9ec:	68 8b 09 02 c0       	push   0xc002098b
c001f9f1:	e8 83 18 ff ff       	call   c0011279 <KePanic(char const*)>
c001f9f6:	83 c4 10             	add    esp,0x10
c001f9f9:	8d 76 00             	lea    esi,[esi+0x0]
c001f9fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa00:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa02:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c001fa08:	85 c0                	test   eax,eax
c001fa0a:	75 34                	jne    c001fa40 <LinkedList<Device>::removeFirst()+0x8c>
c001fa0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa10:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fa16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa1a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fa21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa25:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa28:	83 f8 01             	cmp    eax,0x1
c001fa2b:	74 27                	je     c001fa54 <LinkedList<Device>::removeFirst()+0xa0>
c001fa2d:	83 ec 0c             	sub    esp,0xc
c001fa30:	68 64 09 02 c0       	push   0xc0020964
c001fa35:	e8 3f 18 ff ff       	call   c0011279 <KePanic(char const*)>
c001fa3a:	83 c4 10             	add    esp,0x10
c001fa3d:	eb 15                	jmp    c001fa54 <LinkedList<Device>::removeFirst()+0xa0>
c001fa3f:	90                   	nop
c001fa40:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa44:	8b 00                	mov    eax,DWORD PTR [eax]
c001fa46:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c001fa4c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa50:	89 10                	mov    DWORD PTR [eax],edx
c001fa52:	66 90                	xchg   ax,ax
c001fa54:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa58:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c001fa5b:	8d 50 ff             	lea    edx,[eax-0x1]
c001fa5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa62:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001fa65:	8d 76 00             	lea    esi,[esi+0x0]
c001fa68:	83 c4 0c             	add    esp,0xc
c001fa6b:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c001fa6c <CPU::~CPU()>:
c001fa6c:	83 ec 0c             	sub    esp,0xc
c001fa6f:	ba 4c 1c 02 c0       	mov    edx,0xc0021c4c
c001fa74:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa78:	89 10                	mov    DWORD PTR [eax],edx
c001fa7a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fa7e:	83 ec 0c             	sub    esp,0xc
c001fa81:	50                   	push   eax
c001fa82:	e8 c5 ca fe ff       	call   c000c54c <Device::~Device()>
c001fa87:	83 c4 10             	add    esp,0x10
c001fa8a:	90                   	nop
c001fa8b:	83 c4 0c             	add    esp,0xc
c001fa8e:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c001fa90 <CPU::~CPU()>:
c001fa90:	83 ec 0c             	sub    esp,0xc
c001fa93:	83 ec 0c             	sub    esp,0xc
c001fa96:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fa9a:	e8 cd ff ff ff       	call   c001fa6c <CPU::~CPU()>
c001fa9f:	83 c4 10             	add    esp,0x10
c001faa2:	83 ec 08             	sub    esp,0x8
c001faa5:	68 94 11 00 00       	push   0x1194
c001faaa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001faae:	e8 65 ad fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fab3:	83 c4 10             	add    esp,0x10
c001fab6:	83 c4 0c             	add    esp,0xc
c001fab9:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c001fabc <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c001fabc:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fac0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001fac3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c001fac4 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c001fac4:	90                   	nop
c001fac5:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c001fac8 <ThreadControlBlock::ThreadControlBlock()>:
c001fac8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001facc:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001fad3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fad7:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c001fade:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fae2:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c001fae9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faed:	c7 40 3c 00 00 00 00 	mov    DWORD PTR [eax+0x3c],0x0
c001faf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001faf8:	c7 40 55 00 00 00 00 	mov    DWORD PTR [eax+0x55],0x0
c001faff:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb03:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
c001fb07:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb0b:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
c001fb0f:	90                   	nop
c001fb10:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c001fb14 <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c001fb14:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb18:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb1e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb22:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb29:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb2d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb34:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb38:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001fb3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb42:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001fb49:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fb4d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001fb54:	90                   	nop
c001fb55:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c001fb56 <PCI::~PCI()>:
c001fb56:	83 ec 0c             	sub    esp,0xc
c001fb59:	ba 2c 2b 02 c0       	mov    edx,0xc0022b2c
c001fb5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb62:	89 10                	mov    DWORD PTR [eax],edx
c001fb64:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fb68:	83 ec 0c             	sub    esp,0xc
c001fb6b:	50                   	push   eax
c001fb6c:	e8 73 c4 fe ff       	call   c000bfe4 <Bus::~Bus()>
c001fb71:	83 c4 10             	add    esp,0x10
c001fb74:	90                   	nop
c001fb75:	83 c4 0c             	add    esp,0xc
c001fb78:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c001fb7a <PCI::~PCI()>:
c001fb7a:	83 ec 0c             	sub    esp,0xc
c001fb7d:	83 ec 0c             	sub    esp,0xc
c001fb80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb84:	e8 cd ff ff ff       	call   c001fb56 <PCI::~PCI()>
c001fb89:	83 c4 10             	add    esp,0x10
c001fb8c:	83 ec 08             	sub    esp,0x8
c001fb8f:	68 5c 01 00 00       	push   0x15c
c001fb94:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fb98:	e8 7b ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fb9d:	83 c4 10             	add    esp,0x10
c001fba0:	83 c4 0c             	add    esp,0xc
c001fba3:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c001fba4 <IDE::~IDE()>:
c001fba4:	83 ec 0c             	sub    esp,0xc
c001fba7:	ba e0 2b 02 c0       	mov    edx,0xc0022be0
c001fbac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb0:	89 10                	mov    DWORD PTR [eax],edx
c001fbb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbb6:	83 ec 0c             	sub    esp,0xc
c001fbb9:	50                   	push   eax
c001fbba:	e8 05 ce fe ff       	call   c000c9c4 <HardDiskController::~HardDiskController()>
c001fbbf:	83 c4 10             	add    esp,0x10
c001fbc2:	90                   	nop
c001fbc3:	83 c4 0c             	add    esp,0xc
c001fbc6:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c001fbc8 <IDE::~IDE()>:
c001fbc8:	83 ec 0c             	sub    esp,0xc
c001fbcb:	83 ec 0c             	sub    esp,0xc
c001fbce:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbd2:	e8 cd ff ff ff       	call   c001fba4 <IDE::~IDE()>
c001fbd7:	83 c4 10             	add    esp,0x10
c001fbda:	83 ec 08             	sub    esp,0x8
c001fbdd:	68 70 02 00 00       	push   0x270
c001fbe2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fbe6:	e8 2d ac fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fbeb:	83 c4 10             	add    esp,0x10
c001fbee:	83 c4 0c             	add    esp,0xc
c001fbf1:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c001fbf2 <SATABus::~SATABus()>:
c001fbf2:	83 ec 0c             	sub    esp,0xc
c001fbf5:	ba 30 2c 02 c0       	mov    edx,0xc0022c30
c001fbfa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fbfe:	89 10                	mov    DWORD PTR [eax],edx
c001fc00:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc04:	83 ec 0c             	sub    esp,0xc
c001fc07:	50                   	push   eax
c001fc08:	e8 b7 cd fe ff       	call   c000c9c4 <HardDiskController::~HardDiskController()>
c001fc0d:	83 c4 10             	add    esp,0x10
c001fc10:	90                   	nop
c001fc11:	83 c4 0c             	add    esp,0xc
c001fc14:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c001fc16 <SATABus::~SATABus()>:
c001fc16:	83 ec 0c             	sub    esp,0xc
c001fc19:	83 ec 0c             	sub    esp,0xc
c001fc1c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc20:	e8 cd ff ff ff       	call   c001fbf2 <SATABus::~SATABus()>
c001fc25:	83 c4 10             	add    esp,0x10
c001fc28:	83 ec 08             	sub    esp,0x8
c001fc2b:	68 64 01 00 00       	push   0x164
c001fc30:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc34:	e8 df ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fc39:	83 c4 10             	add    esp,0x10
c001fc3c:	83 c4 0c             	add    esp,0xc
c001fc3f:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c001fc40 <ATA::~ATA()>:
c001fc40:	83 ec 0c             	sub    esp,0xc
c001fc43:	ba 70 2c 02 c0       	mov    edx,0xc0022c70
c001fc48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc4c:	89 10                	mov    DWORD PTR [eax],edx
c001fc4e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc52:	83 ec 0c             	sub    esp,0xc
c001fc55:	50                   	push   eax
c001fc56:	e8 4b ce fe ff       	call   c000caa6 <PhysicalDisk::~PhysicalDisk()>
c001fc5b:	83 c4 10             	add    esp,0x10
c001fc5e:	90                   	nop
c001fc5f:	83 c4 0c             	add    esp,0xc
c001fc62:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c001fc64 <ATA::~ATA()>:
c001fc64:	83 ec 0c             	sub    esp,0xc
c001fc67:	83 ec 0c             	sub    esp,0xc
c001fc6a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc6e:	e8 cd ff ff ff       	call   c001fc40 <ATA::~ATA()>
c001fc73:	83 c4 10             	add    esp,0x10
c001fc76:	83 ec 08             	sub    esp,0x8
c001fc79:	68 7c 01 00 00       	push   0x17c
c001fc7e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fc82:	e8 91 ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fc87:	83 c4 10             	add    esp,0x10
c001fc8a:	83 c4 0c             	add    esp,0xc
c001fc8d:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c001fc8e <ATAPI::~ATAPI()>:
c001fc8e:	83 ec 0c             	sub    esp,0xc
c001fc91:	ba b8 2c 02 c0       	mov    edx,0xc0022cb8
c001fc96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc9a:	89 10                	mov    DWORD PTR [eax],edx
c001fc9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fca0:	83 ec 0c             	sub    esp,0xc
c001fca3:	50                   	push   eax
c001fca4:	e8 fd cd fe ff       	call   c000caa6 <PhysicalDisk::~PhysicalDisk()>
c001fca9:	83 c4 10             	add    esp,0x10
c001fcac:	90                   	nop
c001fcad:	83 c4 0c             	add    esp,0xc
c001fcb0:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c001fcb2 <ATAPI::~ATAPI()>:
c001fcb2:	83 ec 0c             	sub    esp,0xc
c001fcb5:	83 ec 0c             	sub    esp,0xc
c001fcb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcbc:	e8 cd ff ff ff       	call   c001fc8e <ATAPI::~ATAPI()>
c001fcc1:	83 c4 10             	add    esp,0x10
c001fcc4:	83 ec 08             	sub    esp,0x8
c001fcc7:	68 84 01 00 00       	push   0x184
c001fccc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fcd0:	e8 43 ab fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fcd5:	83 c4 10             	add    esp,0x10
c001fcd8:	83 c4 0c             	add    esp,0xc
c001fcdb:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c001fcdc <SATA::~SATA()>:
c001fcdc:	83 ec 0c             	sub    esp,0xc
c001fcdf:	ba 6c 2d 02 c0       	mov    edx,0xc0022d6c
c001fce4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fce8:	89 10                	mov    DWORD PTR [eax],edx
c001fcea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fcee:	83 ec 0c             	sub    esp,0xc
c001fcf1:	50                   	push   eax
c001fcf2:	e8 af cd fe ff       	call   c000caa6 <PhysicalDisk::~PhysicalDisk()>
c001fcf7:	83 c4 10             	add    esp,0x10
c001fcfa:	90                   	nop
c001fcfb:	83 c4 0c             	add    esp,0xc
c001fcfe:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c001fd00 <SATA::~SATA()>:
c001fd00:	83 ec 0c             	sub    esp,0xc
c001fd03:	83 ec 0c             	sub    esp,0xc
c001fd06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd0a:	e8 cd ff ff ff       	call   c001fcdc <SATA::~SATA()>
c001fd0f:	83 c4 10             	add    esp,0x10
c001fd12:	83 ec 08             	sub    esp,0x8
c001fd15:	68 7c 01 00 00       	push   0x17c
c001fd1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd1e:	e8 f5 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd23:	83 c4 10             	add    esp,0x10
c001fd26:	83 c4 0c             	add    esp,0xc
c001fd29:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c001fd2a <SATAPI::~SATAPI()>:
c001fd2a:	83 ec 0c             	sub    esp,0xc
c001fd2d:	ba 90 2e 02 c0       	mov    edx,0xc0022e90
c001fd32:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd36:	89 10                	mov    DWORD PTR [eax],edx
c001fd38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd3c:	83 ec 0c             	sub    esp,0xc
c001fd3f:	50                   	push   eax
c001fd40:	e8 61 cd fe ff       	call   c000caa6 <PhysicalDisk::~PhysicalDisk()>
c001fd45:	83 c4 10             	add    esp,0x10
c001fd48:	90                   	nop
c001fd49:	83 c4 0c             	add    esp,0xc
c001fd4c:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c001fd4e <SATAPI::~SATAPI()>:
c001fd4e:	83 ec 0c             	sub    esp,0xc
c001fd51:	83 ec 0c             	sub    esp,0xc
c001fd54:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd58:	e8 cd ff ff ff       	call   c001fd2a <SATAPI::~SATAPI()>
c001fd5d:	83 c4 10             	add    esp,0x10
c001fd60:	83 ec 08             	sub    esp,0x8
c001fd63:	68 84 01 00 00       	push   0x184
c001fd68:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fd6c:	e8 a7 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fd71:	83 c4 10             	add    esp,0x10
c001fd74:	83 c4 0c             	add    esp,0xc
c001fd77:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c001fd78 <IOAPIC::~IOAPIC()>:
c001fd78:	83 ec 0c             	sub    esp,0xc
c001fd7b:	ba d0 2e 02 c0       	mov    edx,0xc0022ed0
c001fd80:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd84:	89 10                	mov    DWORD PTR [eax],edx
c001fd86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fd8a:	83 ec 0c             	sub    esp,0xc
c001fd8d:	50                   	push   eax
c001fd8e:	e8 b9 c7 fe ff       	call   c000c54c <Device::~Device()>
c001fd93:	83 c4 10             	add    esp,0x10
c001fd96:	90                   	nop
c001fd97:	83 c4 0c             	add    esp,0xc
c001fd9a:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c001fd9c <IOAPIC::~IOAPIC()>:
c001fd9c:	83 ec 0c             	sub    esp,0xc
c001fd9f:	83 ec 0c             	sub    esp,0xc
c001fda2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fda6:	e8 cd ff ff ff       	call   c001fd78 <IOAPIC::~IOAPIC()>
c001fdab:	83 c4 10             	add    esp,0x10
c001fdae:	83 ec 08             	sub    esp,0x8
c001fdb1:	68 68 01 00 00       	push   0x168
c001fdb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdba:	e8 59 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fdbf:	83 c4 10             	add    esp,0x10
c001fdc2:	83 c4 0c             	add    esp,0xc
c001fdc5:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c001fdc8 <APICTimer::~APICTimer()>:
c001fdc8:	83 ec 0c             	sub    esp,0xc
c001fdcb:	ba 18 2f 02 c0       	mov    edx,0xc0022f18
c001fdd0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdd4:	89 10                	mov    DWORD PTR [eax],edx
c001fdd6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fdda:	83 ec 0c             	sub    esp,0xc
c001fddd:	50                   	push   eax
c001fdde:	e8 35 e2 fe ff       	call   c000e018 <Timer::~Timer()>
c001fde3:	83 c4 10             	add    esp,0x10
c001fde6:	90                   	nop
c001fde7:	83 c4 0c             	add    esp,0xc
c001fdea:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c001fdec <APICTimer::~APICTimer()>:
c001fdec:	83 ec 0c             	sub    esp,0xc
c001fdef:	83 ec 0c             	sub    esp,0xc
c001fdf2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fdf6:	e8 cd ff ff ff       	call   c001fdc8 <APICTimer::~APICTimer()>
c001fdfb:	83 c4 10             	add    esp,0x10
c001fdfe:	83 ec 08             	sub    esp,0x8
c001fe01:	68 60 01 00 00       	push   0x160
c001fe06:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe0a:	e8 09 aa fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fe0f:	83 c4 10             	add    esp,0x10
c001fe12:	83 c4 0c             	add    esp,0xc
c001fe15:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c001fe18 <PIT::~PIT()>:
c001fe18:	83 ec 0c             	sub    esp,0xc
c001fe1b:	ba 68 2f 02 c0       	mov    edx,0xc0022f68
c001fe20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe24:	89 10                	mov    DWORD PTR [eax],edx
c001fe26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fe2a:	83 ec 0c             	sub    esp,0xc
c001fe2d:	50                   	push   eax
c001fe2e:	e8 e5 e1 fe ff       	call   c000e018 <Timer::~Timer()>
c001fe33:	83 c4 10             	add    esp,0x10
c001fe36:	90                   	nop
c001fe37:	83 c4 0c             	add    esp,0xc
c001fe3a:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c001fe3c <PIT::~PIT()>:
c001fe3c:	83 ec 0c             	sub    esp,0xc
c001fe3f:	83 ec 0c             	sub    esp,0xc
c001fe42:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe46:	e8 cd ff ff ff       	call   c001fe18 <PIT::~PIT()>
c001fe4b:	83 c4 10             	add    esp,0x10
c001fe4e:	83 ec 08             	sub    esp,0x8
c001fe51:	68 5c 01 00 00       	push   0x15c
c001fe56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001fe5a:	e8 b9 a9 fe ff       	call   c000a818 <operator delete(void*, unsigned long)>
c001fe5f:	83 c4 10             	add    esp,0x10
c001fe62:	83 c4 0c             	add    esp,0xc
c001fe65:	c3                   	ret    

Disassembly of section userkernel:

c0024000 <KiDefaultSignalHandlerAbort(int)>:
c0024000:	57                   	push   edi
c0024001:	b9 07 00 00 00       	mov    ecx,0x7
c0024006:	56                   	push   esi
c0024007:	be 7d 1d 02 c0       	mov    esi,0xc0021d7d
c002400c:	83 ec 24             	sub    esp,0x24
c002400f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0024013:	fc                   	cld    
c0024014:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024016:	8d 44 24 04          	lea    eax,[esp+0x4]
c002401a:	50                   	push   eax
c002401b:	6a 00                	push   0x0
c002401d:	6a 38                	push   0x38
c002401f:	6a 01                	push   0x1
c0024021:	e8 2c 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c0024026:	83 c4 34             	add    esp,0x34
c0024029:	5e                   	pop    esi
c002402a:	5f                   	pop    edi
c002402b:	c3                   	ret    

c002402c <KiDefaultSignalHandlerTerminate(int)>:
c002402c:	57                   	push   edi
c002402d:	b9 08 00 00 00       	mov    ecx,0x8
c0024032:	56                   	push   esi
c0024033:	be 99 1d 02 c0       	mov    esi,0xc0021d99
c0024038:	83 ec 24             	sub    esp,0x24
c002403b:	89 e7                	mov    edi,esp
c002403d:	fc                   	cld    
c002403e:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0024040:	54                   	push   esp
c0024041:	6a 00                	push   0x0
c0024043:	6a 37                	push   0x37
c0024045:	6a 01                	push   0x1
c0024047:	e8 06 00 00 00       	call   c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>
c002404c:	83 c4 34             	add    esp,0x34
c002404f:	5e                   	pop    esi
c0024050:	5f                   	pop    edi
c0024051:	c3                   	ret    

c0024052 <KeSystemCallFromUsermode(unsigned long, unsigned long, unsigned long, unsigned long)>:
c0024052:	53                   	push   ebx
c0024053:	83 ec 10             	sub    esp,0x10
c0024056:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002405a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c002405e:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0024062:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0024066:	cd 60                	int    0x60
c0024068:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c002406c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0024070:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0024074:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0024078:	83 c4 10             	add    esp,0x10
c002407b:	5b                   	pop    ebx
c002407c:	c3                   	ret    

Disassembly of section align_previous:

c0025000 <DO_NOT_DELETE()>:
c0025000:	c3                   	ret    
