
kernel/KERNEL32.EXE:     file format elf32-i386


Disassembly of section .text:

c0000000 <_START_OF_KERNEL>:
c0000000:	e9 00 00 00 00       	jmp    c0000005 <start>

c0000005 <start>:
c0000005:	fa                   	cli    
c0000006:	66 b8 10 00          	mov    ax,0x10
c000000a:	66 8e d8             	mov    ds,ax
c000000d:	66 8e d0             	mov    ss,ax
c0000010:	66 8e c0             	mov    es,ax
c0000013:	bc 00 00 01 c2       	mov    esp,0xc2010000
c0000018:	6a 02                	push   0x2
c000001a:	9d                   	popf   
c000001b:	e8 0d fc 00 00       	call   c000fc2d <kernel_main>

c0000020 <callGlobalConstructors>:
c0000020:	e8 43 8e 02 00       	call   c0028e68 <_init>
c0000025:	c3                   	ret    
c0000026:	bb fe 9a 02 c0       	mov    ebx,0xc0029afe
c000002b:	e9 08 00 00 00       	jmp    c0000038 <callGlobalConstructors.ctors_until_end>

c0000030 <callGlobalConstructors.call_constructor>:
c0000030:	ff 13                	call   DWORD PTR [ebx]
c0000032:	81 c3 04 00 00 00    	add    ebx,0x4

c0000038 <callGlobalConstructors.ctors_until_end>:
c0000038:	81 fb 0c 9b 02 c0    	cmp    ebx,0xc0029b0c
c000003e:	72 f0                	jb     c0000030 <callGlobalConstructors.call_constructor>
c0000040:	c3                   	ret    
c0000041:	66 90                	xchg   ax,ax
c0000043:	90                   	nop

c0000044 <deregister_tm_clones>:
c0000044:	b8 d8 e3 02 c0       	mov    eax,0xc002e3d8
c0000049:	3d d8 e3 02 c0       	cmp    eax,0xc002e3d8
c000004e:	74 1c                	je     c000006c <deregister_tm_clones+0x28>
c0000050:	b8 00 00 00 00       	mov    eax,0x0
c0000055:	85 c0                	test   eax,eax
c0000057:	74 13                	je     c000006c <deregister_tm_clones+0x28>
c0000059:	55                   	push   ebp
c000005a:	89 e5                	mov    ebp,esp
c000005c:	83 ec 14             	sub    esp,0x14
c000005f:	68 d8 e3 02 c0       	push   0xc002e3d8
c0000064:	ff d0                	call   eax
c0000066:	83 c4 10             	add    esp,0x10
c0000069:	c9                   	leave  
c000006a:	c3                   	ret    
c000006b:	90                   	nop
c000006c:	c3                   	ret    
c000006d:	8d 76 00             	lea    esi,[esi+0x0]

c0000070 <register_tm_clones>:
c0000070:	b8 d8 e3 02 c0       	mov    eax,0xc002e3d8
c0000075:	2d d8 e3 02 c0       	sub    eax,0xc002e3d8
c000007a:	c1 f8 02             	sar    eax,0x2
c000007d:	89 c2                	mov    edx,eax
c000007f:	c1 ea 1f             	shr    edx,0x1f
c0000082:	01 d0                	add    eax,edx
c0000084:	d1 f8                	sar    eax,1
c0000086:	74 1c                	je     c00000a4 <register_tm_clones+0x34>
c0000088:	ba 00 00 00 00       	mov    edx,0x0
c000008d:	85 d2                	test   edx,edx
c000008f:	74 13                	je     c00000a4 <register_tm_clones+0x34>
c0000091:	55                   	push   ebp
c0000092:	89 e5                	mov    ebp,esp
c0000094:	83 ec 10             	sub    esp,0x10
c0000097:	50                   	push   eax
c0000098:	68 d8 e3 02 c0       	push   0xc002e3d8
c000009d:	ff d2                	call   edx
c000009f:	83 c4 10             	add    esp,0x10
c00000a2:	c9                   	leave  
c00000a3:	c3                   	ret    
c00000a4:	c3                   	ret    
c00000a5:	8d 76 00             	lea    esi,[esi+0x0]

c00000a8 <__do_global_dtors_aux>:
c00000a8:	80 3d 08 ea 02 c0 00 	cmp    BYTE PTR ds:0xc002ea08,0x0
c00000af:	75 63                	jne    c0000114 <__do_global_dtors_aux+0x6c>
c00000b1:	55                   	push   ebp
c00000b2:	89 e5                	mov    ebp,esp
c00000b4:	56                   	push   esi
c00000b5:	53                   	push   ebx
c00000b6:	bb 14 9b 02 c0       	mov    ebx,0xc0029b14
c00000bb:	81 eb 10 9b 02 c0    	sub    ebx,0xc0029b10
c00000c1:	c1 fb 02             	sar    ebx,0x2
c00000c4:	4b                   	dec    ebx
c00000c5:	be 10 9b 02 c0       	mov    esi,0xc0029b10
c00000ca:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c00000cf:	39 d8                	cmp    eax,ebx
c00000d1:	73 13                	jae    c00000e6 <__do_global_dtors_aux+0x3e>
c00000d3:	90                   	nop
c00000d4:	40                   	inc    eax
c00000d5:	a3 0c ea 02 c0       	mov    ds:0xc002ea0c,eax
c00000da:	ff 14 86             	call   DWORD PTR [esi+eax*4]
c00000dd:	a1 0c ea 02 c0       	mov    eax,ds:0xc002ea0c
c00000e2:	39 d8                	cmp    eax,ebx
c00000e4:	72 ee                	jb     c00000d4 <__do_global_dtors_aux+0x2c>
c00000e6:	e8 59 ff ff ff       	call   c0000044 <deregister_tm_clones>
c00000eb:	b8 00 00 00 00       	mov    eax,0x0
c00000f0:	85 c0                	test   eax,eax
c00000f2:	74 10                	je     c0000104 <__do_global_dtors_aux+0x5c>
c00000f4:	83 ec 0c             	sub    esp,0xc
c00000f7:	68 d8 e3 02 c0       	push   0xc002e3d8
c00000fc:	e8 ff fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000101:	83 c4 10             	add    esp,0x10
c0000104:	c6 05 08 ea 02 c0 01 	mov    BYTE PTR ds:0xc002ea08,0x1
c000010b:	8d 65 f8             	lea    esp,[ebp-0x8]
c000010e:	5b                   	pop    ebx
c000010f:	5e                   	pop    esi
c0000110:	5d                   	pop    ebp
c0000111:	c3                   	ret    
c0000112:	66 90                	xchg   ax,ax
c0000114:	c3                   	ret    
c0000115:	8d 76 00             	lea    esi,[esi+0x0]

c0000118 <frame_dummy>:
c0000118:	b8 00 00 00 00       	mov    eax,0x0
c000011d:	85 c0                	test   eax,eax
c000011f:	74 1f                	je     c0000140 <frame_dummy+0x28>
c0000121:	55                   	push   ebp
c0000122:	89 e5                	mov    ebp,esp
c0000124:	83 ec 10             	sub    esp,0x10
c0000127:	68 10 ea 02 c0       	push   0xc002ea10
c000012c:	68 d8 e3 02 c0       	push   0xc002e3d8
c0000131:	e8 ca fe ff 3f       	call   0 <_START_OF_KERNEL-0xc0000000>
c0000136:	83 c4 10             	add    esp,0x10
c0000139:	c9                   	leave  
c000013a:	e9 31 ff ff ff       	jmp    c0000070 <register_tm_clones>
c000013f:	90                   	nop
c0000140:	e9 2b ff ff ff       	jmp    c0000070 <register_tm_clones>
c0000145:	66 90                	xchg   ax,ax
c0000147:	66 90                	xchg   ax,ax
c0000149:	66 90                	xchg   ax,ax
c000014b:	66 90                	xchg   ax,ax
c000014d:	66 90                	xchg   ax,ax
c000014f:	90                   	nop

c0000150 <manualPCIProbe>:
c0000150:	31 c0                	xor    eax,eax
c0000152:	66 ba f8 0c          	mov    dx,0xcf8
c0000156:	ed                   	in     eax,dx
c0000157:	89 c3                	mov    ebx,eax
c0000159:	b8 00 00 00 80       	mov    eax,0x80000000
c000015e:	ef                   	out    dx,eax
c000015f:	ed                   	in     eax,dx
c0000160:	3d 00 00 00 80       	cmp    eax,0x80000000
c0000165:	75 0a                	jne    c0000171 <manualPCIProbe.noMech1>
c0000167:	b8 01 00 00 00       	mov    eax,0x1
c000016c:	e9 26 00 00 00       	jmp    c0000197 <manualPCIProbe.gotPCI>

c0000171 <manualPCIProbe.noMech1>:
c0000171:	89 d8                	mov    eax,ebx
c0000173:	ef                   	out    dx,eax
c0000174:	66 ba f8 0c          	mov    dx,0xcf8
c0000178:	ec                   	in     al,dx
c0000179:	88 c3                	mov    bl,al
c000017b:	30 c0                	xor    al,al
c000017d:	ee                   	out    dx,al
c000017e:	ec                   	in     al,dx
c000017f:	84 c0                	test   al,al
c0000181:	75 15                	jne    c0000198 <manualPCIProbe.noPCI>
c0000183:	66 ba fa 0c          	mov    dx,0xcfa
c0000187:	ec                   	in     al,dx
c0000188:	88 c7                	mov    bh,al
c000018a:	30 c0                	xor    al,al
c000018c:	ee                   	out    dx,al
c000018d:	ec                   	in     al,dx
c000018e:	84 c0                	test   al,al
c0000190:	75 06                	jne    c0000198 <manualPCIProbe.noPCI>
c0000192:	b8 02 00 00 00       	mov    eax,0x2

c0000197 <manualPCIProbe.gotPCI>:
c0000197:	c3                   	ret    

c0000198 <manualPCIProbe.noPCI>:
c0000198:	31 c0                	xor    eax,eax
c000019a:	c3                   	ret    

c000019b <prepareTramp>:
c000019b:	0f 01 05 e0 0f 00 00 	sgdtd  ds:0xfe0
c00001a2:	0f 01 0d e8 0f 00 00 	sidtd  ds:0xfe8
c00001a9:	50                   	push   eax
c00001aa:	0f 20 d8             	mov    eax,cr3
c00001ad:	a3 f0 0f 00 00       	mov    ds:0xff0,eax
c00001b2:	58                   	pop    eax
c00001b3:	c3                   	ret    

c00001b4 <voodooXADD>:
c00001b4:	55                   	push   ebp
c00001b5:	89 e5                	mov    ebp,esp
c00001b7:	60                   	pusha  
c00001b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00001bb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00001be:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c00001c1:	8b 70 44             	mov    esi,DWORD PTR [eax+0x44]
c00001c4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00001c7:	8b 78 3c             	mov    edi,DWORD PTR [eax+0x3c]
c00001ca:	0f 02 ff             	lar    edi,di
c00001cd:	c1 ef 0d             	shr    edi,0xd
c00001d0:	66 81 e7 03 00       	and    di,0x3
c00001d5:	75 09                	jne    c00001e0 <voodooXADD.usermode>
c00001d7:	8b 70 1c             	mov    esi,DWORD PTR [eax+0x1c]
c00001da:	81 c4 14 00 00 00    	add    esp,0x14

c00001e0 <voodooXADD.usermode>:
c00001e0:	89 35 7b 02 00 c0    	mov    DWORD PTR ds:0xc000027b,esi
c00001e6:	89 25 77 02 00 c0    	mov    DWORD PTR ds:0xc0000277,esp
c00001ec:	60                   	pusha  
c00001ed:	b0 90                	mov    al,0x90
c00001ef:	b9 20 00 00 00       	mov    ecx,0x20
c00001f4:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c00001f9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00001fb:	61                   	popa   
c00001fc:	60                   	pusha  
c00001fd:	89 d6                	mov    esi,edx
c00001ff:	bf 4e 02 00 c0       	mov    edi,0xc000024e
c0000204:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000206:	61                   	popa   
c0000207:	60                   	pusha  
c0000208:	89 d6                	mov    esi,edx
c000020a:	bf 5e 02 00 c0       	mov    edi,0xc000025e
c000020f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0000211:	61                   	popa   
c0000212:	b1 90                	mov    cl,0x90
c0000214:	85 db                	test   ebx,ebx
c0000216:	74 06                	je     c000021e <voodooXADD.skipChange>
c0000218:	8a 8b 4d 02 00 c0    	mov    cl,BYTE PTR [ebx-0x3ffffdb3]

c000021e <voodooXADD.skipChange>:
c000021e:	88 8b 4e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffdb2],cl
c0000224:	80 ab 4f 02 00 c0 3a 	sub    BYTE PTR [ebx-0x3ffffdb1],0x3a
c000022b:	88 8b 5e 02 00 c0    	mov    BYTE PTR [ebx-0x3ffffda2],cl
c0000231:	80 ab 5f 02 00 c0 be 	sub    BYTE PTR [ebx-0x3ffffda1],0xbe
c0000238:	89 c4                	mov    esp,eax
c000023a:	81 c4 10 00 00 00    	add    esp,0x10
c0000240:	5f                   	pop    edi
c0000241:	5e                   	pop    esi
c0000242:	5d                   	pop    ebp
c0000243:	5b                   	pop    ebx
c0000244:	5b                   	pop    ebx
c0000245:	5a                   	pop    edx
c0000246:	59                   	pop    ecx
c0000247:	58                   	pop    eax
c0000248:	8b 25 7b 02 00 c0    	mov    esp,DWORD PTR ds:0xc000027b

c000024e <voodooXADD.helper>:
c000024e:	90                   	nop
c000024f:	90                   	nop
c0000250:	90                   	nop
c0000251:	90                   	nop
c0000252:	90                   	nop
c0000253:	90                   	nop
c0000254:	90                   	nop
c0000255:	90                   	nop
c0000256:	90                   	nop
c0000257:	90                   	nop
c0000258:	90                   	nop
c0000259:	90                   	nop
c000025a:	90                   	nop
c000025b:	90                   	nop
c000025c:	90                   	nop
c000025d:	90                   	nop
c000025e:	90                   	nop
c000025f:	90                   	nop
c0000260:	90                   	nop
c0000261:	90                   	nop
c0000262:	90                   	nop
c0000263:	90                   	nop
c0000264:	90                   	nop
c0000265:	90                   	nop
c0000266:	90                   	nop
c0000267:	90                   	nop
c0000268:	90                   	nop
c0000269:	90                   	nop
c000026a:	90                   	nop
c000026b:	90                   	nop
c000026c:	90                   	nop
c000026d:	90                   	nop
c000026e:	8b 25 77 02 00 c0    	mov    esp,DWORD PTR ds:0xc0000277
c0000274:	61                   	popa   
c0000275:	c9                   	leave  
c0000276:	c3                   	ret    

c0000277 <voodooXADD.oldStack>:
c0000277:	00 00                	add    BYTE PTR [eax],al
	...

c000027b <voodooXADD.newStack>:
c000027b:	00 00                	add    BYTE PTR [eax],al
	...

c000027f <doTPAUSE>:
c000027f:	fb                   	sti    
c0000280:	31 c0                	xor    eax,eax
c0000282:	31 d2                	xor    edx,edx
c0000284:	66 0f ae f0          	tpause eax
c0000288:	c3                   	ret    

c0000289 <hasLegacyFPU>:
c0000289:	0f 20 c2             	mov    edx,cr0
c000028c:	81 e2 f3 ff ff ff    	and    edx,0xfffffff3
c0000292:	0f 22 c2             	mov    cr0,edx
c0000295:	db e3                	fninit 
c0000297:	dd 3d ac 02 00 c0    	fnstsw WORD PTR ds:0xc00002ac
c000029d:	31 c0                	xor    eax,eax
c000029f:	66 81 3d ac 02 00 c0 00 00 	cmp    WORD PTR ds:0xc00002ac,0x0
c00002a8:	75 01                	jne    c00002ab <hasLegacyFPU.nofpu>

c00002aa <hasLegacyFPU.hasfpu>:
c00002aa:	40                   	inc    eax

c00002ab <hasLegacyFPU.nofpu>:
c00002ab:	c3                   	ret    

c00002ac <testword>:
c00002ac:	aa                   	stos   BYTE PTR es:[edi],al
c00002ad:	55                   	push   ebp

c00002ae <is486>:
c00002ae:	0f 09                	wbinvd 
c00002b0:	31 c0                	xor    eax,eax
c00002b2:	40                   	inc    eax
c00002b3:	c3                   	ret    
c00002b4:	90                   	nop
c00002b5:	90                   	nop
c00002b6:	90                   	nop
c00002b7:	90                   	nop
c00002b8:	90                   	nop
c00002b9:	90                   	nop
c00002ba:	90                   	nop
c00002bb:	90                   	nop
c00002bc:	90                   	nop
c00002bd:	90                   	nop
c00002be:	90                   	nop
c00002bf:	90                   	nop
c00002c0:	90                   	nop
c00002c1:	90                   	nop
c00002c2:	90                   	nop
c00002c3:	90                   	nop
c00002c4:	90                   	nop
c00002c5:	90                   	nop
c00002c6:	90                   	nop
c00002c7:	90                   	nop
c00002c8:	90                   	nop
c00002c9:	90                   	nop
c00002ca:	90                   	nop
c00002cb:	90                   	nop
c00002cc:	90                   	nop
c00002cd:	90                   	nop
c00002ce:	90                   	nop
c00002cf:	90                   	nop
c00002d0:	90                   	nop
c00002d1:	90                   	nop
c00002d2:	90                   	nop
c00002d3:	90                   	nop
c00002d4:	90                   	nop
c00002d5:	90                   	nop
c00002d6:	90                   	nop
c00002d7:	90                   	nop
c00002d8:	90                   	nop
c00002d9:	90                   	nop
c00002da:	90                   	nop
c00002db:	90                   	nop
c00002dc:	90                   	nop
c00002dd:	90                   	nop
c00002de:	90                   	nop
c00002df:	90                   	nop
c00002e0:	90                   	nop
c00002e1:	31 c0                	xor    eax,eax
c00002e3:	c3                   	ret    

c00002e4 <detectCPUID>:
c00002e4:	9c                   	pushf  
c00002e5:	9c                   	pushf  
c00002e6:	81 34 24 00 00 20 00 	xor    DWORD PTR [esp],0x200000
c00002ed:	9d                   	popf   
c00002ee:	9c                   	pushf  
c00002ef:	58                   	pop    eax
c00002f0:	33 04 24             	xor    eax,DWORD PTR [esp]
c00002f3:	9d                   	popf   
c00002f4:	25 00 00 20 00       	and    eax,0x200000
c00002f9:	c3                   	ret    

c00002fa <goToVM86>:
c00002fa:	55                   	push   ebp
c00002fb:	89 e5                	mov    ebp,esp
c00002fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0000300:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0000303:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
c0000306:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c0000309:	25 ff ff 00 00       	and    eax,0xffff
c000030e:	81 e3 ff ff 00 00    	and    ebx,0xffff
c0000314:	81 e1 ff ff 00 00    	and    ecx,0xffff
c000031a:	81 e2 ff ff 00 00    	and    edx,0xffff
c0000320:	52                   	push   edx
c0000321:	51                   	push   ecx
c0000322:	68 02 02 02 00       	push   0x20202
c0000327:	53                   	push   ebx
c0000328:	50                   	push   eax
c0000329:	cf                   	iret   

c000032a <goToUsermode>:
c000032a:	55                   	push   ebp
c000032b:	89 e5                	mov    ebp,esp
c000032d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000330:	66 b8 23 00          	mov    ax,0x23
c0000334:	66 8e d8             	mov    ds,ax
c0000337:	66 8e c0             	mov    es,ax
c000033a:	66 8e e0             	mov    fs,ax
c000033d:	66 8e e8             	mov    gs,ax
c0000340:	89 e0                	mov    eax,esp
c0000342:	68 23 00 00 00       	push   0x23
c0000347:	50                   	push   eax
c0000348:	68 02 02 00 00       	push   0x202
c000034d:	68 1b 00 00 00       	push   0x1b
c0000352:	53                   	push   ebx
c0000353:	cf                   	iret   

c0000354 <switchToThreadASMFirstTime>:
c0000354:	9c                   	pushf  
c0000355:	fa                   	cli    
c0000356:	50                   	push   eax
c0000357:	53                   	push   ebx
c0000358:	51                   	push   ecx
c0000359:	52                   	push   edx
c000035a:	56                   	push   esi
c000035b:	57                   	push   edi
c000035c:	55                   	push   ebp
c000035d:	e9 11 00 00 00       	jmp    c0000373 <commonThreadSwitch>

c0000362 <switchToThreadASM>:
c0000362:	9c                   	pushf  
c0000363:	50                   	push   eax
c0000364:	53                   	push   ebx
c0000365:	51                   	push   ecx
c0000366:	52                   	push   edx
c0000367:	56                   	push   esi
c0000368:	57                   	push   edi
c0000369:	55                   	push   ebp
c000036a:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c0000370:	89 67 04             	mov    DWORD PTR [edi+0x4],esp

c0000373 <commonThreadSwitch>:
c0000373:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000377:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c000037d:	8b 06                	mov    eax,DWORD PTR [esi]
c000037f:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000382:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c0000385:	0f 20 d9             	mov    ecx,cr3
c0000388:	39 c8                	cmp    eax,ecx
c000038a:	74 03                	je     c000038f <commonThreadSwitch.doneVAS>
c000038c:	0f 22 d8             	mov    cr3,eax

c000038f <commonThreadSwitch.doneVAS>:
c000038f:	0f 20 c0             	mov    eax,cr0
c0000392:	0c 08                	or     al,0x8
c0000394:	0f 22 c0             	mov    cr0,eax
c0000397:	85 d2                	test   edx,edx
c0000399:	75 11                	jne    c00003ac <commonThreadSwitch.firstTime>
c000039b:	8b 66 04             	mov    esp,DWORD PTR [esi+0x4]
c000039e:	e8 99 d9 01 00       	call   c001dd3c <changeTSS>
c00003a3:	5d                   	pop    ebp
c00003a4:	5f                   	pop    edi
c00003a5:	5e                   	pop    esi
c00003a6:	5a                   	pop    edx
c00003a7:	59                   	pop    ecx
c00003a8:	5b                   	pop    ebx
c00003a9:	58                   	pop    eax
c00003aa:	9d                   	popf   
c00003ab:	c3                   	ret    

c00003ac <commonThreadSwitch.firstTime>:
c00003ac:	fa                   	cli    
c00003ad:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00003b0:	bc 00 fe 07 c2       	mov    esp,0xc207fe00
c00003b5:	60                   	pusha  
c00003b6:	e8 6a 28 01 00       	call   c0012c25 <mapVASFirstTime>
c00003bb:	61                   	popa   
c00003bc:	89 c4                	mov    esp,eax
c00003be:	56                   	push   esi
c00003bf:	52                   	push   edx
c00003c0:	e8 77 d9 01 00       	call   c001dd3c <changeTSS>
c00003c5:	5a                   	pop    edx
c00003c6:	5e                   	pop    esi
c00003c7:	c7 46 0c 00 00 00 00 	mov    DWORD PTR [esi+0xc],0x0
c00003ce:	5d                   	pop    ebp
c00003cf:	5f                   	pop    edi
c00003d0:	5e                   	pop    esi
c00003d1:	59                   	pop    ecx
c00003d2:	59                   	pop    ecx
c00003d3:	5b                   	pop    ebx
c00003d4:	58                   	pop    eax
c00003d5:	81 c4 04 00 00 00    	add    esp,0x4
c00003db:	6a 02                	push   0x2
c00003dd:	9d                   	popf   
c00003de:	52                   	push   edx
c00003df:	e8 1f de 01 00       	call   c001e203 <taskStartupFunction>
c00003e4:	5a                   	pop    edx
c00003e5:	50                   	push   eax
c00003e6:	ff d2                	call   edx
c00003e8:	e8 7d e4 01 00       	call   c001e86a <taskReturned>
c00003ed:	e9 fb ff ff ff       	jmp    c00003ed <commonThreadSwitch.firstTime+0x41>

c00003f2 <asmQuickAcquireLock>:
c00003f2:	55                   	push   ebp
c00003f3:	89 e5                	mov    ebp,esp
c00003f5:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c00003f8 <asmQuickAcquireLock.retry>:
c00003f8:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c00003fd:	72 02                	jb     c0000401 <asmQuickAcquireLock.spin_with_pause>
c00003ff:	fa                   	cli    
c0000400:	c3                   	ret    

c0000401 <asmQuickAcquireLock.spin_with_pause>:
c0000401:	f3 90                	pause  
c0000403:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000409:	75 f6                	jne    c0000401 <asmQuickAcquireLock.spin_with_pause>
c000040b:	e9 e8 ff ff ff       	jmp    c00003f8 <asmQuickAcquireLock.retry>

c0000410 <asmQuickReleaseLock>:
c0000410:	55                   	push   ebp
c0000411:	89 e5                	mov    ebp,esp
c0000413:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c000041a:	5d                   	pop    ebp
c000041b:	c3                   	ret    

c000041c <asmAcquireLock>:
c000041c:	55                   	push   ebp
c000041d:	89 e5                	mov    ebp,esp
c000041f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]

c0000422 <asmAcquireLock.retry>:
c0000422:	f0 0f ba 2b 00       	lock bts DWORD PTR [ebx],0x0
c0000427:	72 05                	jb     c000042e <asmAcquireLock.spin_with_pause>
c0000429:	9c                   	pushf  
c000042a:	58                   	pop    eax
c000042b:	fa                   	cli    
c000042c:	5d                   	pop    ebp
c000042d:	c3                   	ret    

c000042e <asmAcquireLock.spin_with_pause>:
c000042e:	f3 90                	pause  
c0000430:	81 3b 00 00 00 00    	cmp    DWORD PTR [ebx],0x0
c0000436:	75 f6                	jne    c000042e <asmAcquireLock.spin_with_pause>
c0000438:	e9 e5 ff ff ff       	jmp    c0000422 <asmAcquireLock.retry>

c000043d <asmReleaseLock>:
c000043d:	55                   	push   ebp
c000043e:	89 e5                	mov    ebp,esp
c0000440:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0000443:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0000446:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c000044c:	52                   	push   edx
c000044d:	9d                   	popf   
c000044e:	5d                   	pop    ebp
c000044f:	c3                   	ret    

c0000450 <loadGDT>:
c0000450:	0f 01 15 50 ee 02 c0 	lgdtd  ds:0xc002ee50
c0000457:	66 b8 10 00          	mov    ax,0x10
c000045b:	66 8e d8             	mov    ds,ax
c000045e:	66 8e c0             	mov    es,ax
c0000461:	66 8e e0             	mov    fs,ax
c0000464:	66 8e e8             	mov    gs,ax
c0000467:	66 8e d0             	mov    ss,ax
c000046a:	e9 00 00 00 00       	jmp    c000046f <flush2>

c000046f <flush2>:
c000046f:	c3                   	ret    

c0000470 <isr0>:
c0000470:	fa                   	cli    
c0000471:	68 00 00 00 00       	push   0x0
c0000476:	68 00 00 00 00       	push   0x0
c000047b:	e9 44 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000480 <isr1>:
c0000480:	fa                   	cli    
c0000481:	6a 00                	push   0x0
c0000483:	6a 01                	push   0x1
c0000485:	e9 3a 01 00 00       	jmp    c00005c4 <int_common_stub>

c000048a <isr2>:
c000048a:	fa                   	cli    
c000048b:	6a 00                	push   0x0
c000048d:	6a 02                	push   0x2
c000048f:	e9 30 01 00 00       	jmp    c00005c4 <int_common_stub>

c0000494 <isr3>:
c0000494:	fa                   	cli    
c0000495:	6a 00                	push   0x0
c0000497:	6a 03                	push   0x3
c0000499:	e9 26 01 00 00       	jmp    c00005c4 <int_common_stub>

c000049e <isr4>:
c000049e:	fa                   	cli    
c000049f:	6a 00                	push   0x0
c00004a1:	6a 04                	push   0x4
c00004a3:	e9 1c 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004a8 <isr5>:
c00004a8:	fa                   	cli    
c00004a9:	6a 00                	push   0x0
c00004ab:	6a 05                	push   0x5
c00004ad:	e9 12 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004b2 <isr6>:
c00004b2:	fa                   	cli    
c00004b3:	6a 00                	push   0x0
c00004b5:	6a 06                	push   0x6
c00004b7:	e9 08 01 00 00       	jmp    c00005c4 <int_common_stub>

c00004bc <isr7>:
c00004bc:	fa                   	cli    
c00004bd:	6a 00                	push   0x0
c00004bf:	6a 07                	push   0x7
c00004c1:	e9 fe 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004c6 <isr8>:
c00004c6:	fa                   	cli    
c00004c7:	6a 08                	push   0x8
c00004c9:	e9 f6 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004ce <isr9>:
c00004ce:	fa                   	cli    
c00004cf:	6a 00                	push   0x0
c00004d1:	6a 09                	push   0x9
c00004d3:	e9 ec 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004d8 <isr10>:
c00004d8:	fa                   	cli    
c00004d9:	6a 0a                	push   0xa
c00004db:	e9 e4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e0 <isr11>:
c00004e0:	fa                   	cli    
c00004e1:	6a 0b                	push   0xb
c00004e3:	e9 dc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004e8 <isr12>:
c00004e8:	fa                   	cli    
c00004e9:	6a 0c                	push   0xc
c00004eb:	e9 d4 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f0 <isr13>:
c00004f0:	fa                   	cli    
c00004f1:	6a 0d                	push   0xd
c00004f3:	e9 cc 00 00 00       	jmp    c00005c4 <int_common_stub>

c00004f8 <isr14>:
c00004f8:	fa                   	cli    
c00004f9:	6a 0e                	push   0xe
c00004fb:	e9 c4 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000500 <isr15>:
c0000500:	fa                   	cli    
c0000501:	6a 00                	push   0x0
c0000503:	6a 0f                	push   0xf
c0000505:	e9 ba 00 00 00       	jmp    c00005c4 <int_common_stub>

c000050a <isr16>:
c000050a:	fa                   	cli    
c000050b:	6a 00                	push   0x0
c000050d:	6a 10                	push   0x10
c000050f:	e9 b0 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000514 <isr17>:
c0000514:	fa                   	cli    
c0000515:	6a 00                	push   0x0
c0000517:	6a 11                	push   0x11
c0000519:	e9 a6 00 00 00       	jmp    c00005c4 <int_common_stub>

c000051e <isr18>:
c000051e:	fa                   	cli    
c000051f:	6a 00                	push   0x0
c0000521:	6a 12                	push   0x12
c0000523:	e9 9c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000528 <irq3>:
c0000528:	fa                   	cli    
c0000529:	6a 00                	push   0x0
c000052b:	6a 23                	push   0x23
c000052d:	e9 92 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000532 <irq4>:
c0000532:	fa                   	cli    
c0000533:	6a 00                	push   0x0
c0000535:	6a 24                	push   0x24
c0000537:	e9 88 00 00 00       	jmp    c00005c4 <int_common_stub>

c000053c <irq5>:
c000053c:	fa                   	cli    
c000053d:	6a 00                	push   0x0
c000053f:	6a 25                	push   0x25
c0000541:	e9 7e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000546 <irq6>:
c0000546:	fa                   	cli    
c0000547:	6a 00                	push   0x0
c0000549:	6a 26                	push   0x26
c000054b:	e9 74 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000550 <irq7>:
c0000550:	fa                   	cli    
c0000551:	6a 00                	push   0x0
c0000553:	6a 27                	push   0x27
c0000555:	e9 6a 00 00 00       	jmp    c00005c4 <int_common_stub>

c000055a <irq8>:
c000055a:	fa                   	cli    
c000055b:	6a 00                	push   0x0
c000055d:	6a 28                	push   0x28
c000055f:	e9 60 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000564 <irq9>:
c0000564:	fa                   	cli    
c0000565:	6a 00                	push   0x0
c0000567:	6a 29                	push   0x29
c0000569:	e9 56 00 00 00       	jmp    c00005c4 <int_common_stub>

c000056e <irq10>:
c000056e:	fa                   	cli    
c000056f:	6a 00                	push   0x0
c0000571:	6a 2a                	push   0x2a
c0000573:	e9 4c 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000578 <irq11>:
c0000578:	fa                   	cli    
c0000579:	6a 00                	push   0x0
c000057b:	6a 2b                	push   0x2b
c000057d:	e9 42 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000582 <irq12>:
c0000582:	fa                   	cli    
c0000583:	6a 00                	push   0x0
c0000585:	6a 2c                	push   0x2c
c0000587:	e9 38 00 00 00       	jmp    c00005c4 <int_common_stub>

c000058c <irq13>:
c000058c:	fa                   	cli    
c000058d:	6a 00                	push   0x0
c000058f:	6a 2d                	push   0x2d
c0000591:	e9 2e 00 00 00       	jmp    c00005c4 <int_common_stub>

c0000596 <irq14>:
c0000596:	fa                   	cli    
c0000597:	6a 00                	push   0x0
c0000599:	6a 2e                	push   0x2e
c000059b:	e9 24 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005a0 <irq15>:
c00005a0:	fa                   	cli    
c00005a1:	6a 00                	push   0x0
c00005a3:	6a 2f                	push   0x2f
c00005a5:	e9 1a 00 00 00       	jmp    c00005c4 <int_common_stub>

c00005aa <irq1>:
c00005aa:	fa                   	cli    
c00005ab:	6a 00                	push   0x0
c00005ad:	6a 21                	push   0x21
c00005af:	eb 13                	jmp    c00005c4 <int_common_stub>

c00005b1 <irq2>:
c00005b1:	fa                   	cli    
c00005b2:	6a 00                	push   0x0
c00005b4:	6a 22                	push   0x22
c00005b6:	eb 0c                	jmp    c00005c4 <int_common_stub>

c00005b8 <isr96>:
c00005b8:	6a 00                	push   0x0
c00005ba:	6a 60                	push   0x60
c00005bc:	fb                   	sti    
c00005bd:	eb 05                	jmp    c00005c4 <int_common_stub>

c00005bf <irq0>:
c00005bf:	fa                   	cli    
c00005c0:	6a 00                	push   0x0
c00005c2:	6a 20                	push   0x20

c00005c4 <int_common_stub>:
c00005c4:	60                   	pusha  
c00005c5:	1e                   	push   ds
c00005c6:	06                   	push   es
c00005c7:	0f a0                	push   fs
c00005c9:	0f a8                	push   gs
c00005cb:	66 b8 10 00          	mov    ax,0x10
c00005cf:	66 8e d8             	mov    ds,ax
c00005d2:	66 8e c0             	mov    es,ax
c00005d5:	66 8e e0             	mov    fs,ax
c00005d8:	66 8e e8             	mov    gs,ax
c00005db:	54                   	push   esp
c00005dc:	e8 52 45 01 00       	call   c0014b33 <int_handler>
c00005e1:	81 c4 04 00 00 00    	add    esp,0x4
c00005e7:	0f a9                	pop    gs
c00005e9:	0f a1                	pop    fs
c00005eb:	07                   	pop    es
c00005ec:	1f                   	pop    ds
c00005ed:	61                   	popa   
c00005ee:	81 c4 08 00 00 00    	add    esp,0x8
c00005f4:	cf                   	iret   

c00005f5 <irq16>:
c00005f5:	fa                   	cli    
c00005f6:	6a 00                	push   0x0
c00005f8:	6a 30                	push   0x30
c00005fa:	e9 c5 ff ff ff       	jmp    c00005c4 <int_common_stub>

c00005ff <irq17>:
c00005ff:	fa                   	cli    
c0000600:	6a 00                	push   0x0
c0000602:	6a 31                	push   0x31
c0000604:	e9 bb ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000609 <irq18>:
c0000609:	fa                   	cli    
c000060a:	6a 00                	push   0x0
c000060c:	6a 32                	push   0x32
c000060e:	e9 b1 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000613 <irq19>:
c0000613:	fa                   	cli    
c0000614:	6a 00                	push   0x0
c0000616:	6a 33                	push   0x33
c0000618:	e9 a7 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000061d <irq20>:
c000061d:	fa                   	cli    
c000061e:	6a 00                	push   0x0
c0000620:	6a 34                	push   0x34
c0000622:	e9 9d ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000627 <irq21>:
c0000627:	fa                   	cli    
c0000628:	6a 00                	push   0x0
c000062a:	6a 35                	push   0x35
c000062c:	e9 93 ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000631 <irq22>:
c0000631:	fa                   	cli    
c0000632:	6a 00                	push   0x0
c0000634:	6a 36                	push   0x36
c0000636:	e9 89 ff ff ff       	jmp    c00005c4 <int_common_stub>

c000063b <irq23>:
c000063b:	fa                   	cli    
c000063c:	6a 00                	push   0x0
c000063e:	6a 37                	push   0x37
c0000640:	e9 7f ff ff ff       	jmp    c00005c4 <int_common_stub>

c0000645 <hexStrToInt>:
c0000645:	56                   	push   esi
c0000646:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c000064a:	31 d2                	xor    edx,edx

c000064c <hexStrToInt.looping>:
c000064c:	ac                   	lods   al,BYTE PTR ds:[esi]
c000064d:	84 c0                	test   al,al
c000064f:	74 0d                	je     c000065e <hexStrToInt.end>
c0000651:	d4 40                	aam    0x40
c0000653:	d5 39                	aad    0x39
c0000655:	2c 30                	sub    al,0x30
c0000657:	c1 e2 04             	shl    edx,0x4
c000065a:	08 c2                	or     dl,al
c000065c:	eb ee                	jmp    c000064c <hexStrToInt.looping>

c000065e <hexStrToInt.end>:
c000065e:	89 d0                	mov    eax,edx
c0000660:	5e                   	pop    esi
c0000661:	c3                   	ret    

c0000662 <memcpy>:
c0000662:	e9 de de 00 00       	jmp    c000e545 <__not_memcpy>
c0000667:	90                   	nop

c0000668 <memcmp>:
c0000668:	56                   	push   esi
c0000669:	53                   	push   ebx
c000066a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000066e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000672:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000676:	85 f6                	test   esi,esi
c0000678:	74 1d                	je     c0000697 <memcmp+0x2f>
c000067a:	8a 08                	mov    cl,BYTE PTR [eax]
c000067c:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000067f:	38 cb                	cmp    bl,cl
c0000681:	75 19                	jne    c000069c <memcmp+0x34>
c0000683:	01 c6                	add    esi,eax
c0000685:	eb 0a                	jmp    c0000691 <memcmp+0x29>
c0000687:	90                   	nop
c0000688:	8a 08                	mov    cl,BYTE PTR [eax]
c000068a:	0f b6 1a             	movzx  ebx,BYTE PTR [edx]
c000068d:	38 d9                	cmp    cl,bl
c000068f:	75 0b                	jne    c000069c <memcmp+0x34>
c0000691:	40                   	inc    eax
c0000692:	42                   	inc    edx
c0000693:	39 f0                	cmp    eax,esi
c0000695:	75 f1                	jne    c0000688 <memcmp+0x20>
c0000697:	31 c0                	xor    eax,eax
c0000699:	5b                   	pop    ebx
c000069a:	5e                   	pop    esi
c000069b:	c3                   	ret    
c000069c:	0f b6 c1             	movzx  eax,cl
c000069f:	29 d8                	sub    eax,ebx
c00006a1:	5b                   	pop    ebx
c00006a2:	5e                   	pop    esi
c00006a3:	c3                   	ret    

c00006a4 <memmove>:
c00006a4:	55                   	push   ebp
c00006a5:	57                   	push   edi
c00006a6:	56                   	push   esi
c00006a7:	53                   	push   ebx
c00006a8:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c00006ac:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00006b0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00006b4:	39 dd                	cmp    ebp,ebx
c00006b6:	0f 83 80 00 00 00    	jae    c000073c <memmove+0x98>
c00006bc:	85 d2                	test   edx,edx
c00006be:	74 74                	je     c0000734 <memmove+0x90>
c00006c0:	8d 4b 04             	lea    ecx,[ebx+0x4]
c00006c3:	8d 75 04             	lea    esi,[ebp+0x4]
c00006c6:	39 cd                	cmp    ebp,ecx
c00006c8:	0f 93 c1             	setae  cl
c00006cb:	39 f3                	cmp    ebx,esi
c00006cd:	0f 93 c0             	setae  al
c00006d0:	89 c6                	mov    esi,eax
c00006d2:	09 ce                	or     esi,ecx
c00006d4:	8d 4a ff             	lea    ecx,[edx-0x1]
c00006d7:	89 f0                	mov    eax,esi
c00006d9:	83 f9 0c             	cmp    ecx,0xc
c00006dc:	0f 97 c1             	seta   cl
c00006df:	84 c8                	test   al,cl
c00006e1:	74 75                	je     c0000758 <memmove+0xb4>
c00006e3:	89 e9                	mov    ecx,ebp
c00006e5:	09 d9                	or     ecx,ebx
c00006e7:	83 e1 03             	and    ecx,0x3
c00006ea:	75 6c                	jne    c0000758 <memmove+0xb4>
c00006ec:	89 d7                	mov    edi,edx
c00006ee:	89 d9                	mov    ecx,ebx
c00006f0:	83 e7 fc             	and    edi,0xfffffffc
c00006f3:	89 ee                	mov    esi,ebp
c00006f5:	01 df                	add    edi,ebx
c00006f7:	90                   	nop
c00006f8:	8b 01                	mov    eax,DWORD PTR [ecx]
c00006fa:	83 c6 04             	add    esi,0x4
c00006fd:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c0000700:	83 c1 04             	add    ecx,0x4
c0000703:	39 f9                	cmp    ecx,edi
c0000705:	75 f1                	jne    c00006f8 <memmove+0x54>
c0000707:	89 d1                	mov    ecx,edx
c0000709:	89 d7                	mov    edi,edx
c000070b:	83 e1 fc             	and    ecx,0xfffffffc
c000070e:	29 cf                	sub    edi,ecx
c0000710:	01 cb                	add    ebx,ecx
c0000712:	8d 74 0d 00          	lea    esi,[ebp+ecx*1+0x0]
c0000716:	39 ca                	cmp    edx,ecx
c0000718:	74 1a                	je     c0000734 <memmove+0x90>
c000071a:	8a 03                	mov    al,BYTE PTR [ebx]
c000071c:	83 ff 01             	cmp    edi,0x1
c000071f:	88 06                	mov    BYTE PTR [esi],al
c0000721:	74 11                	je     c0000734 <memmove+0x90>
c0000723:	8a 43 01             	mov    al,BYTE PTR [ebx+0x1]
c0000726:	83 ff 02             	cmp    edi,0x2
c0000729:	88 46 01             	mov    BYTE PTR [esi+0x1],al
c000072c:	74 06                	je     c0000734 <memmove+0x90>
c000072e:	8a 43 02             	mov    al,BYTE PTR [ebx+0x2]
c0000731:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0000734:	5b                   	pop    ebx
c0000735:	89 e8                	mov    eax,ebp
c0000737:	5e                   	pop    esi
c0000738:	5f                   	pop    edi
c0000739:	5d                   	pop    ebp
c000073a:	c3                   	ret    
c000073b:	90                   	nop
c000073c:	76 f6                	jbe    c0000734 <memmove+0x90>
c000073e:	85 d2                	test   edx,edx
c0000740:	74 f2                	je     c0000734 <memmove+0x90>
c0000742:	4b                   	dec    ebx
c0000743:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0000746:	66 90                	xchg   ax,ax
c0000748:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c000074b:	88 04 11             	mov    BYTE PTR [ecx+edx*1],al
c000074e:	4a                   	dec    edx
c000074f:	75 f7                	jne    c0000748 <memmove+0xa4>
c0000751:	5b                   	pop    ebx
c0000752:	89 e8                	mov    eax,ebp
c0000754:	5e                   	pop    esi
c0000755:	5f                   	pop    edi
c0000756:	5d                   	pop    ebp
c0000757:	c3                   	ret    
c0000758:	01 ea                	add    edx,ebp
c000075a:	89 e9                	mov    ecx,ebp
c000075c:	8a 03                	mov    al,BYTE PTR [ebx]
c000075e:	41                   	inc    ecx
c000075f:	88 41 ff             	mov    BYTE PTR [ecx-0x1],al
c0000762:	43                   	inc    ebx
c0000763:	39 d1                	cmp    ecx,edx
c0000765:	75 f5                	jne    c000075c <memmove+0xb8>
c0000767:	eb cb                	jmp    c0000734 <memmove+0x90>
c0000769:	8d 76 00             	lea    esi,[esi+0x0]

c000076c <memset>:
c000076c:	57                   	push   edi
c000076d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0000771:	85 c9                	test   ecx,ecx
c0000773:	74 0b                	je     c0000780 <memset+0x14>
c0000775:	fc                   	cld    
c0000776:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000077a:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c000077e:	f3 aa                	rep stos BYTE PTR es:[edi],al
c0000780:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000784:	5f                   	pop    edi
c0000785:	c3                   	ret    
c0000786:	66 90                	xchg   ax,ax

c0000788 <strlen>:
c0000788:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000078c:	31 c0                	xor    eax,eax
c000078e:	80 3a 00             	cmp    BYTE PTR [edx],0x0
c0000791:	74 09                	je     c000079c <strlen+0x14>
c0000793:	90                   	nop
c0000794:	40                   	inc    eax
c0000795:	80 3c 02 00          	cmp    BYTE PTR [edx+eax*1],0x0
c0000799:	75 f9                	jne    c0000794 <strlen+0xc>
c000079b:	c3                   	ret    
c000079c:	c3                   	ret    
c000079d:	8d 76 00             	lea    esi,[esi+0x0]

c00007a0 <strpbrk>:
c00007a0:	57                   	push   edi
c00007a1:	56                   	push   esi
c00007a2:	53                   	push   ebx
c00007a3:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007a7:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00007ab:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007ad:	84 db                	test   bl,bl
c00007af:	74 21                	je     c00007d2 <strpbrk+0x32>
c00007b1:	8a 07                	mov    al,BYTE PTR [edi]
c00007b3:	84 c0                	test   al,al
c00007b5:	74 14                	je     c00007cb <strpbrk+0x2b>
c00007b7:	38 d8                	cmp    al,bl
c00007b9:	74 19                	je     c00007d4 <strpbrk+0x34>
c00007bb:	89 fa                	mov    edx,edi
c00007bd:	eb 05                	jmp    c00007c4 <strpbrk+0x24>
c00007bf:	90                   	nop
c00007c0:	38 d9                	cmp    cl,bl
c00007c2:	74 10                	je     c00007d4 <strpbrk+0x34>
c00007c4:	42                   	inc    edx
c00007c5:	8a 0a                	mov    cl,BYTE PTR [edx]
c00007c7:	84 c9                	test   cl,cl
c00007c9:	75 f5                	jne    c00007c0 <strpbrk+0x20>
c00007cb:	46                   	inc    esi
c00007cc:	8a 1e                	mov    bl,BYTE PTR [esi]
c00007ce:	84 db                	test   bl,bl
c00007d0:	75 e1                	jne    c00007b3 <strpbrk+0x13>
c00007d2:	31 f6                	xor    esi,esi
c00007d4:	89 f0                	mov    eax,esi
c00007d6:	5b                   	pop    ebx
c00007d7:	5e                   	pop    esi
c00007d8:	5f                   	pop    edi
c00007d9:	c3                   	ret    
c00007da:	66 90                	xchg   ax,ax

c00007dc <strtok>:
c00007dc:	56                   	push   esi
c00007dd:	53                   	push   ebx
c00007de:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00007e2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00007e6:	85 db                	test   ebx,ebx
c00007e8:	75 07                	jne    c00007f1 <strtok+0x15>
c00007ea:	eb 2c                	jmp    c0000818 <strtok+0x3c>
c00007ec:	43                   	inc    ebx
c00007ed:	c6 43 ff 00          	mov    BYTE PTR [ebx-0x1],0x0
c00007f1:	56                   	push   esi
c00007f2:	53                   	push   ebx
c00007f3:	e8 a8 ff ff ff       	call   c00007a0 <strpbrk>
c00007f8:	5a                   	pop    edx
c00007f9:	a3 28 ea 02 c0       	mov    ds:0xc002ea28,eax
c00007fe:	59                   	pop    ecx
c00007ff:	39 d8                	cmp    eax,ebx
c0000801:	74 e9                	je     c00007ec <strtok+0x10>
c0000803:	85 c0                	test   eax,eax
c0000805:	74 1b                	je     c0000822 <strtok+0x46>
c0000807:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000080a:	8d 50 01             	lea    edx,[eax+0x1]
c000080d:	89 d8                	mov    eax,ebx
c000080f:	89 15 28 ea 02 c0    	mov    DWORD PTR ds:0xc002ea28,edx
c0000815:	5b                   	pop    ebx
c0000816:	5e                   	pop    esi
c0000817:	c3                   	ret    
c0000818:	8b 1d 28 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea28
c000081e:	85 db                	test   ebx,ebx
c0000820:	75 cf                	jne    c00007f1 <strtok+0x15>
c0000822:	31 c0                	xor    eax,eax
c0000824:	5b                   	pop    ebx
c0000825:	5e                   	pop    esi
c0000826:	c3                   	ret    
c0000827:	90                   	nop

c0000828 <strcpy>:
c0000828:	53                   	push   ebx
c0000829:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000082d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0000831:	89 c3                	mov    ebx,eax
c0000833:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000835:	84 d2                	test   dl,dl
c0000837:	74 0d                	je     c0000846 <strcpy+0x1e>
c0000839:	8d 76 00             	lea    esi,[esi+0x0]
c000083c:	88 13                	mov    BYTE PTR [ebx],dl
c000083e:	41                   	inc    ecx
c000083f:	43                   	inc    ebx
c0000840:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000842:	84 d2                	test   dl,dl
c0000844:	75 f6                	jne    c000083c <strcpy+0x14>
c0000846:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0000849:	5b                   	pop    ebx
c000084a:	c3                   	ret    
c000084b:	90                   	nop

c000084c <strncpy>:
c000084c:	55                   	push   ebp
c000084d:	57                   	push   edi
c000084e:	56                   	push   esi
c000084f:	53                   	push   ebx
c0000850:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0000854:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0000858:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000085c:	85 c0                	test   eax,eax
c000085e:	74 39                	je     c0000899 <strncpy+0x4d>
c0000860:	8a 1e                	mov    bl,BYTE PTR [esi]
c0000862:	8d 48 ff             	lea    ecx,[eax-0x1]
c0000865:	8d 55 01             	lea    edx,[ebp+0x1]
c0000868:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c000086b:	84 db                	test   bl,bl
c000086d:	74 31                	je     c00008a0 <strncpy+0x54>
c000086f:	85 c9                	test   ecx,ecx
c0000871:	74 26                	je     c0000899 <strncpy+0x4d>
c0000873:	8a 5e 01             	mov    bl,BYTE PTR [esi+0x1]
c0000876:	8d 48 fe             	lea    ecx,[eax-0x2]
c0000879:	8d 55 02             	lea    edx,[ebp+0x2]
c000087c:	8d 46 02             	lea    eax,[esi+0x2]
c000087f:	88 5d 01             	mov    BYTE PTR [ebp+0x1],bl
c0000882:	84 db                	test   bl,bl
c0000884:	75 0f                	jne    c0000895 <strncpy+0x49>
c0000886:	eb 18                	jmp    c00008a0 <strncpy+0x54>
c0000888:	40                   	inc    eax
c0000889:	42                   	inc    edx
c000088a:	8a 58 ff             	mov    bl,BYTE PTR [eax-0x1]
c000088d:	49                   	dec    ecx
c000088e:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c0000891:	84 db                	test   bl,bl
c0000893:	74 0b                	je     c00008a0 <strncpy+0x54>
c0000895:	85 c9                	test   ecx,ecx
c0000897:	75 ef                	jne    c0000888 <strncpy+0x3c>
c0000899:	5b                   	pop    ebx
c000089a:	89 e8                	mov    eax,ebp
c000089c:	5e                   	pop    esi
c000089d:	5f                   	pop    edi
c000089e:	5d                   	pop    ebp
c000089f:	c3                   	ret    
c00008a0:	85 c9                	test   ecx,ecx
c00008a2:	74 f5                	je     c0000899 <strncpy+0x4d>
c00008a4:	fc                   	cld    
c00008a5:	31 c0                	xor    eax,eax
c00008a7:	89 d7                	mov    edi,edx
c00008a9:	f3 aa                	rep stos BYTE PTR es:[edi],al
c00008ab:	89 e8                	mov    eax,ebp
c00008ad:	5b                   	pop    ebx
c00008ae:	5e                   	pop    esi
c00008af:	5f                   	pop    edi
c00008b0:	5d                   	pop    ebp
c00008b1:	c3                   	ret    
c00008b2:	66 90                	xchg   ax,ax

c00008b4 <strcmp>:
c00008b4:	56                   	push   esi
c00008b5:	53                   	push   ebx
c00008b6:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00008ba:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00008be:	8a 16                	mov    dl,BYTE PTR [esi]
c00008c0:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c00008c3:	38 d1                	cmp    cl,dl
c00008c5:	75 1d                	jne    c00008e4 <strcmp+0x30>
c00008c7:	84 c9                	test   cl,cl
c00008c9:	74 21                	je     c00008ec <strcmp+0x38>
c00008cb:	b8 01 00 00 00       	mov    eax,0x1
c00008d0:	eb 07                	jmp    c00008d9 <strcmp+0x25>
c00008d2:	66 90                	xchg   ax,ax
c00008d4:	40                   	inc    eax
c00008d5:	84 d2                	test   dl,dl
c00008d7:	74 13                	je     c00008ec <strcmp+0x38>
c00008d9:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c00008dc:	0f b6 0c 03          	movzx  ecx,BYTE PTR [ebx+eax*1]
c00008e0:	38 ca                	cmp    dl,cl
c00008e2:	74 f0                	je     c00008d4 <strcmp+0x20>
c00008e4:	0f b6 c2             	movzx  eax,dl
c00008e7:	5b                   	pop    ebx
c00008e8:	29 c8                	sub    eax,ecx
c00008ea:	5e                   	pop    esi
c00008eb:	c3                   	ret    
c00008ec:	31 c0                	xor    eax,eax
c00008ee:	5b                   	pop    ebx
c00008ef:	5e                   	pop    esi
c00008f0:	c3                   	ret    
c00008f1:	8d 76 00             	lea    esi,[esi+0x0]

c00008f4 <strchr>:
c00008f4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00008f8:	8a 10                	mov    dl,BYTE PTR [eax]
c00008fa:	84 d2                	test   dl,dl
c00008fc:	74 15                	je     c0000913 <strchr+0x1f>
c00008fe:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0000902:	38 ca                	cmp    dl,cl
c0000904:	75 06                	jne    c000090c <strchr+0x18>
c0000906:	eb 0e                	jmp    c0000916 <strchr+0x22>
c0000908:	38 ca                	cmp    dl,cl
c000090a:	74 09                	je     c0000915 <strchr+0x21>
c000090c:	40                   	inc    eax
c000090d:	8a 10                	mov    dl,BYTE PTR [eax]
c000090f:	84 d2                	test   dl,dl
c0000911:	75 f5                	jne    c0000908 <strchr+0x14>
c0000913:	31 c0                	xor    eax,eax
c0000915:	c3                   	ret    
c0000916:	c3                   	ret    
c0000917:	90                   	nop

c0000918 <strncmp>:
c0000918:	57                   	push   edi
c0000919:	56                   	push   esi
c000091a:	53                   	push   ebx
c000091b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c000091f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000923:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0000927:	85 ff                	test   edi,edi
c0000929:	74 28                	je     c0000953 <strncmp+0x3b>
c000092b:	8a 16                	mov    dl,BYTE PTR [esi]
c000092d:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000930:	38 d1                	cmp    cl,dl
c0000932:	75 28                	jne    c000095c <strncmp+0x44>
c0000934:	8d 46 01             	lea    eax,[esi+0x1]
c0000937:	84 c9                	test   cl,cl
c0000939:	74 18                	je     c0000953 <strncmp+0x3b>
c000093b:	01 fe                	add    esi,edi
c000093d:	eb 0f                	jmp    c000094e <strncmp+0x36>
c000093f:	90                   	nop
c0000940:	8a 10                	mov    dl,BYTE PTR [eax]
c0000942:	0f b6 0b             	movzx  ecx,BYTE PTR [ebx]
c0000945:	38 ca                	cmp    dl,cl
c0000947:	75 13                	jne    c000095c <strncmp+0x44>
c0000949:	40                   	inc    eax
c000094a:	84 d2                	test   dl,dl
c000094c:	74 05                	je     c0000953 <strncmp+0x3b>
c000094e:	43                   	inc    ebx
c000094f:	39 c6                	cmp    esi,eax
c0000951:	75 ed                	jne    c0000940 <strncmp+0x28>
c0000953:	5b                   	pop    ebx
c0000954:	31 c0                	xor    eax,eax
c0000956:	5e                   	pop    esi
c0000957:	5f                   	pop    edi
c0000958:	c3                   	ret    
c0000959:	8d 76 00             	lea    esi,[esi+0x0]
c000095c:	5b                   	pop    ebx
c000095d:	0f b6 c2             	movzx  eax,dl
c0000960:	5e                   	pop    esi
c0000961:	29 c8                	sub    eax,ecx
c0000963:	5f                   	pop    edi
c0000964:	c3                   	ret    
c0000965:	8d 76 00             	lea    esi,[esi+0x0]

c0000968 <strcat>:
c0000968:	56                   	push   esi
c0000969:	53                   	push   ebx
c000096a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000096e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0000972:	89 c3                	mov    ebx,eax
c0000974:	eb 04                	jmp    c000097a <strcat+0x12>
c0000976:	66 90                	xchg   ax,ax
c0000978:	89 d3                	mov    ebx,edx
c000097a:	8d 53 01             	lea    edx,[ebx+0x1]
c000097d:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c0000981:	75 f5                	jne    c0000978 <strcat+0x10>
c0000983:	31 d2                	xor    edx,edx
c0000985:	8d 76 00             	lea    esi,[esi+0x0]
c0000988:	8a 0c 16             	mov    cl,BYTE PTR [esi+edx*1]
c000098b:	88 0c 13             	mov    BYTE PTR [ebx+edx*1],cl
c000098e:	42                   	inc    edx
c000098f:	84 c9                	test   cl,cl
c0000991:	75 f5                	jne    c0000988 <strcat+0x20>
c0000993:	5b                   	pop    ebx
c0000994:	5e                   	pop    esi
c0000995:	c3                   	ret    
c0000996:	66 90                	xchg   ax,ax

c0000998 <strncat>:
c0000998:	56                   	push   esi
c0000999:	53                   	push   ebx
c000099a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000099e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00009a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00009a6:	85 f6                	test   esi,esi
c00009a8:	74 1e                	je     c00009c8 <strncat+0x30>
c00009aa:	89 c2                	mov    edx,eax
c00009ac:	42                   	inc    edx
c00009ad:	80 7a ff 00          	cmp    BYTE PTR [edx-0x1],0x0
c00009b1:	75 f9                	jne    c00009ac <strncat+0x14>
c00009b3:	01 ce                	add    esi,ecx
c00009b5:	eb 06                	jmp    c00009bd <strncat+0x25>
c00009b7:	90                   	nop
c00009b8:	39 f1                	cmp    ecx,esi
c00009ba:	74 10                	je     c00009cc <strncat+0x34>
c00009bc:	42                   	inc    edx
c00009bd:	41                   	inc    ecx
c00009be:	8a 59 ff             	mov    bl,BYTE PTR [ecx-0x1]
c00009c1:	88 5a ff             	mov    BYTE PTR [edx-0x1],bl
c00009c4:	84 db                	test   bl,bl
c00009c6:	75 f0                	jne    c00009b8 <strncat+0x20>
c00009c8:	5b                   	pop    ebx
c00009c9:	5e                   	pop    esi
c00009ca:	c3                   	ret    
c00009cb:	90                   	nop
c00009cc:	c6 02 00             	mov    BYTE PTR [edx],0x0
c00009cf:	5b                   	pop    ebx
c00009d0:	5e                   	pop    esi
c00009d1:	c3                   	ret    
c00009d2:	66 90                	xchg   ax,ax

c00009d4 <strstr>:
c00009d4:	57                   	push   edi
c00009d5:	56                   	push   esi
c00009d6:	53                   	push   ebx
c00009d7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00009db:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c00009df:	57                   	push   edi
c00009e0:	e8 a3 fd ff ff       	call   c0000788 <strlen>
c00009e5:	59                   	pop    ecx
c00009e6:	85 c0                	test   eax,eax
c00009e8:	74 2a                	je     c0000a14 <strstr+0x40>
c00009ea:	89 c6                	mov    esi,eax
c00009ec:	eb 12                	jmp    c0000a00 <strstr+0x2c>
c00009ee:	66 90                	xchg   ax,ax
c00009f0:	56                   	push   esi
c00009f1:	57                   	push   edi
c00009f2:	53                   	push   ebx
c00009f3:	e8 70 fc ff ff       	call   c0000668 <memcmp>
c00009f8:	83 c4 0c             	add    esp,0xc
c00009fb:	85 c0                	test   eax,eax
c00009fd:	74 15                	je     c0000a14 <strstr+0x40>
c00009ff:	43                   	inc    ebx
c0000a00:	53                   	push   ebx
c0000a01:	e8 82 fd ff ff       	call   c0000788 <strlen>
c0000a06:	5a                   	pop    edx
c0000a07:	39 f0                	cmp    eax,esi
c0000a09:	73 e5                	jae    c00009f0 <strstr+0x1c>
c0000a0b:	5b                   	pop    ebx
c0000a0c:	31 c0                	xor    eax,eax
c0000a0e:	5e                   	pop    esi
c0000a0f:	5f                   	pop    edi
c0000a10:	c3                   	ret    
c0000a11:	8d 76 00             	lea    esi,[esi+0x0]
c0000a14:	89 d8                	mov    eax,ebx
c0000a16:	5b                   	pop    ebx
c0000a17:	5e                   	pop    esi
c0000a18:	5f                   	pop    edi
c0000a19:	c3                   	ret    
c0000a1a:	66 90                	xchg   ax,ax

c0000a1c <toupper>:
c0000a1c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a20:	0f b6 d0             	movzx  edx,al
c0000a23:	f6 82 20 9b 02 c0 02 	test   BYTE PTR [edx-0x3ffd64e0],0x2
c0000a2a:	74 03                	je     c0000a2f <toupper+0x13>
c0000a2c:	83 e8 20             	sub    eax,0x20
c0000a2f:	c3                   	ret    

c0000a30 <tolower>:
c0000a30:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000a34:	0f b6 d0             	movzx  edx,al
c0000a37:	f6 82 20 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd64e0],0x1
c0000a3e:	74 03                	je     c0000a43 <tolower+0x13>
c0000a40:	83 c0 20             	add    eax,0x20
c0000a43:	c3                   	ret    

c0000a44 <simple_strtoul>:
c0000a44:	55                   	push   ebp
c0000a45:	57                   	push   edi
c0000a46:	56                   	push   esi
c0000a47:	53                   	push   ebx
c0000a48:	83 ec 08             	sub    esp,0x8
c0000a4b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0000a4f:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0000a53:	90                   	nop
c0000a54:	0f b6 11             	movzx  edx,BYTE PTR [ecx]
c0000a57:	f6 82 20 9b 02 c0 08 	test   BYTE PTR [edx-0x3ffd64e0],0x8
c0000a5e:	75 05                	jne    c0000a65 <simple_strtoul+0x21>
c0000a60:	80 fa 09             	cmp    dl,0x9
c0000a63:	75 03                	jne    c0000a68 <simple_strtoul+0x24>
c0000a65:	41                   	inc    ecx
c0000a66:	eb ec                	jmp    c0000a54 <simple_strtoul+0x10>
c0000a68:	80 fa 2d             	cmp    dl,0x2d
c0000a6b:	0f 84 1b 01 00 00    	je     c0000b8c <simple_strtoul+0x148>
c0000a71:	80 fa 2b             	cmp    dl,0x2b
c0000a74:	0f 84 c2 00 00 00    	je     c0000b3c <simple_strtoul+0xf8>
c0000a7a:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000a82:	85 f6                	test   esi,esi
c0000a84:	0f 85 c3 00 00 00    	jne    c0000b4d <simple_strtoul+0x109>
c0000a8a:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000a8c:	80 fa 30             	cmp    dl,0x30
c0000a8f:	0f 84 47 01 00 00    	je     c0000bdc <simple_strtoul+0x198>
c0000a95:	be 0a 00 00 00       	mov    esi,0xa
c0000a9a:	84 d2                	test   dl,dl
c0000a9c:	0f 84 6f 01 00 00    	je     c0000c11 <simple_strtoul+0x1cd>
c0000aa2:	31 ed                	xor    ebp,ebp
c0000aa4:	31 ff                	xor    edi,edi
c0000aa6:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0000aad:	eb 2b                	jmp    c0000ada <simple_strtoul+0x96>
c0000aaf:	90                   	nop
c0000ab0:	83 eb 30             	sub    ebx,0x30
c0000ab3:	39 f3                	cmp    ebx,esi
c0000ab5:	73 4d                	jae    c0000b04 <simple_strtoul+0xc0>
c0000ab7:	31 d2                	xor    edx,edx
c0000ab9:	89 d8                	mov    eax,ebx
c0000abb:	f7 d0                	not    eax
c0000abd:	f7 f6                	div    esi
c0000abf:	39 f8                	cmp    eax,edi
c0000ac1:	0f 82 b1 00 00 00    	jb     c0000b78 <simple_strtoul+0x134>
c0000ac7:	0f af fe             	imul   edi,esi
c0000aca:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0000ad1:	01 df                	add    edi,ebx
c0000ad3:	41                   	inc    ecx
c0000ad4:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000ad6:	84 d2                	test   dl,dl
c0000ad8:	74 2a                	je     c0000b04 <simple_strtoul+0xc0>
c0000ada:	0f b6 da             	movzx  ebx,dl
c0000add:	f6 83 20 9b 02 c0 04 	test   BYTE PTR [ebx-0x3ffd64e0],0x4
c0000ae4:	75 ca                	jne    c0000ab0 <simple_strtoul+0x6c>
c0000ae6:	0f be d2             	movsx  edx,dl
c0000ae9:	52                   	push   edx
c0000aea:	e8 2d ff ff ff       	call   c0000a1c <toupper>
c0000aef:	5b                   	pop    ebx
c0000af0:	0f b6 d0             	movzx  edx,al
c0000af3:	f6 82 20 9b 02 c0 01 	test   BYTE PTR [edx-0x3ffd64e0],0x1
c0000afa:	74 08                	je     c0000b04 <simple_strtoul+0xc0>
c0000afc:	8d 58 c9             	lea    ebx,[eax-0x37]
c0000aff:	39 f3                	cmp    ebx,esi
c0000b01:	72 b4                	jb     c0000ab7 <simple_strtoul+0x73>
c0000b03:	90                   	nop
c0000b04:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b08:	85 c0                	test   eax,eax
c0000b0a:	74 14                	je     c0000b20 <simple_strtoul+0xdc>
c0000b0c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0000b0f:	09 f8                	or     eax,edi
c0000b11:	75 71                	jne    c0000b84 <simple_strtoul+0x140>
c0000b13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b17:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000b1b:	31 ff                	xor    edi,edi
c0000b1d:	89 30                	mov    DWORD PTR [eax],esi
c0000b1f:	90                   	nop
c0000b20:	4d                   	dec    ebp
c0000b21:	75 05                	jne    c0000b28 <simple_strtoul+0xe4>
c0000b23:	bf ff ff ff ff       	mov    edi,0xffffffff
c0000b28:	83 7c 24 04 01       	cmp    DWORD PTR [esp+0x4],0x1
c0000b2d:	75 02                	jne    c0000b31 <simple_strtoul+0xed>
c0000b2f:	f7 df                	neg    edi
c0000b31:	83 c4 08             	add    esp,0x8
c0000b34:	89 f8                	mov    eax,edi
c0000b36:	5b                   	pop    ebx
c0000b37:	5e                   	pop    esi
c0000b38:	5f                   	pop    edi
c0000b39:	5d                   	pop    ebp
c0000b3a:	c3                   	ret    
c0000b3b:	90                   	nop
c0000b3c:	41                   	inc    ecx
c0000b3d:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0000b45:	85 f6                	test   esi,esi
c0000b47:	0f 84 3d ff ff ff    	je     c0000a8a <simple_strtoul+0x46>
c0000b4d:	8d 46 fe             	lea    eax,[esi-0x2]
c0000b50:	83 f8 22             	cmp    eax,0x22
c0000b53:	77 6a                	ja     c0000bbf <simple_strtoul+0x17b>
c0000b55:	8a 11                	mov    dl,BYTE PTR [ecx]
c0000b57:	83 fe 08             	cmp    esi,0x8
c0000b5a:	0f 84 a2 00 00 00    	je     c0000c02 <simple_strtoul+0x1be>
c0000b60:	83 fe 10             	cmp    esi,0x10
c0000b63:	0f 85 31 ff ff ff    	jne    c0000a9a <simple_strtoul+0x56>
c0000b69:	80 fa 30             	cmp    dl,0x30
c0000b6c:	74 2c                	je     c0000b9a <simple_strtoul+0x156>
c0000b6e:	be 10 00 00 00       	mov    esi,0x10
c0000b73:	e9 22 ff ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000b78:	bd 01 00 00 00       	mov    ebp,0x1
c0000b7d:	31 ff                	xor    edi,edi
c0000b7f:	e9 4f ff ff ff       	jmp    c0000ad3 <simple_strtoul+0x8f>
c0000b84:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000b88:	89 08                	mov    DWORD PTR [eax],ecx
c0000b8a:	eb 94                	jmp    c0000b20 <simple_strtoul+0xdc>
c0000b8c:	41                   	inc    ecx
c0000b8d:	c7 44 24 04 01 00 00 00 	mov    DWORD PTR [esp+0x4],0x1
c0000b95:	e9 e8 fe ff ff       	jmp    c0000a82 <simple_strtoul+0x3e>
c0000b9a:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000b9e:	88 04 24             	mov    BYTE PTR [esp],al
c0000ba1:	50                   	push   eax
c0000ba2:	e8 89 fe ff ff       	call   c0000a30 <tolower>
c0000ba7:	5e                   	pop    esi
c0000ba8:	83 f8 78             	cmp    eax,0x78
c0000bab:	0f 84 84 00 00 00    	je     c0000c35 <simple_strtoul+0x1f1>
c0000bb1:	41                   	inc    ecx
c0000bb2:	be 10 00 00 00       	mov    esi,0x10
c0000bb7:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bba:	e9 db fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000bbf:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0000bc3:	85 ff                	test   edi,edi
c0000bc5:	74 5c                	je     c0000c23 <simple_strtoul+0x1df>
c0000bc7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000bcb:	85 c9                	test   ecx,ecx
c0000bcd:	75 4e                	jne    c0000c1d <simple_strtoul+0x1d9>
c0000bcf:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0000bd5:	31 ff                	xor    edi,edi
c0000bd7:	e9 4c ff ff ff       	jmp    c0000b28 <simple_strtoul+0xe4>
c0000bdc:	0f be 41 01          	movsx  eax,BYTE PTR [ecx+0x1]
c0000be0:	88 04 24             	mov    BYTE PTR [esp],al
c0000be3:	50                   	push   eax
c0000be4:	e8 47 fe ff ff       	call   c0000a30 <tolower>
c0000be9:	5d                   	pop    ebp
c0000bea:	83 f8 78             	cmp    eax,0x78
c0000bed:	74 3b                	je     c0000c2a <simple_strtoul+0x1e6>
c0000bef:	41                   	inc    ecx
c0000bf0:	8a 14 24             	mov    dl,BYTE PTR [esp]
c0000bf3:	80 fa 30             	cmp    dl,0x30
c0000bf6:	74 13                	je     c0000c0b <simple_strtoul+0x1c7>
c0000bf8:	be 08 00 00 00       	mov    esi,0x8
c0000bfd:	e9 98 fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>
c0000c02:	80 fa 30             	cmp    dl,0x30
c0000c05:	0f 85 8f fe ff ff    	jne    c0000a9a <simple_strtoul+0x56>
c0000c0b:	8a 51 01             	mov    dl,BYTE PTR [ecx+0x1]
c0000c0e:	41                   	inc    ecx
c0000c0f:	eb e7                	jmp    c0000bf8 <simple_strtoul+0x1b4>
c0000c11:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0000c15:	85 d2                	test   edx,edx
c0000c17:	74 0a                	je     c0000c23 <simple_strtoul+0x1df>
c0000c19:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0000c1d:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0000c21:	89 30                	mov    DWORD PTR [eax],esi
c0000c23:	31 ff                	xor    edi,edi
c0000c25:	e9 fe fe ff ff       	jmp    c0000b28 <simple_strtoul+0xe4>
c0000c2a:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c2d:	83 c1 02             	add    ecx,0x2
c0000c30:	e9 34 ff ff ff       	jmp    c0000b69 <simple_strtoul+0x125>
c0000c35:	8a 51 02             	mov    dl,BYTE PTR [ecx+0x2]
c0000c38:	be 10 00 00 00       	mov    esi,0x10
c0000c3d:	83 c1 02             	add    ecx,0x2
c0000c40:	e9 55 fe ff ff       	jmp    c0000a9a <simple_strtoul+0x56>

c0000c45 <largebin_index>:
c0000c45:	89 c2                	mov    edx,eax
c0000c47:	c1 ea 08             	shr    edx,0x8
c0000c4a:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0000c50:	77 10                	ja     c0000c62 <largebin_index+0x1d>
c0000c52:	0f bd d2             	bsr    edx,edx
c0000c55:	8d 4a 06             	lea    ecx,[edx+0x6]
c0000c58:	d3 e8                	shr    eax,cl
c0000c5a:	83 e0 03             	and    eax,0x3
c0000c5d:	8d 44 90 20          	lea    eax,[eax+edx*4+0x20]
c0000c61:	c3                   	ret    
c0000c62:	b8 5f 00 00 00       	mov    eax,0x5f
c0000c67:	c3                   	ret    

c0000c68 <malloc_init_state>:
c0000c68:	53                   	push   ebx
c0000c69:	8d 50 34             	lea    edx,[eax+0x34]
c0000c6c:	8d 98 2c 03 00 00    	lea    ebx,[eax+0x32c]
c0000c72:	89 d1                	mov    ecx,edx
c0000c74:	89 52 0c             	mov    DWORD PTR [edx+0xc],edx
c0000c77:	89 52 08             	mov    DWORD PTR [edx+0x8],edx
c0000c7a:	83 c2 08             	add    edx,0x8
c0000c7d:	39 da                	cmp    edx,ebx
c0000c7f:	75 f3                	jne    c0000c74 <malloc_init_state+0xc>
c0000c81:	8b 10                	mov    edx,DWORD PTR [eax]
c0000c83:	c7 80 48 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x348],0x0
c0000c8d:	83 e2 03             	and    edx,0x3
c0000c90:	c7 80 54 03 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x354],0x0
c0000c9a:	83 ca 48             	or     edx,0x48
c0000c9d:	c7 80 4c 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x34c],0x40000
c0000ca7:	c7 80 44 03 00 00 00 00 04 00 	mov    DWORD PTR [eax+0x344],0x40000
c0000cb1:	83 88 60 03 00 00 01 	or     DWORD PTR [eax+0x360],0x1
c0000cb8:	89 10                	mov    DWORD PTR [eax],edx
c0000cba:	89 48 2c             	mov    DWORD PTR [eax+0x2c],ecx
c0000cbd:	c7 80 5c 03 00 00 00 10 00 00 	mov    DWORD PTR [eax+0x35c],0x1000
c0000cc7:	5b                   	pop    ebx
c0000cc8:	c3                   	ret    

c0000cc9 <malloc_consolidate>:
c0000cc9:	8b 10                	mov    edx,DWORD PTR [eax]
c0000ccb:	85 d2                	test   edx,edx
c0000ccd:	0f 84 d8 00 00 00    	je     c0000dab <malloc_consolidate+0xe2>
c0000cd3:	55                   	push   ebp
c0000cd4:	83 e2 fd             	and    edx,0xfffffffd
c0000cd7:	57                   	push   edi
c0000cd8:	89 c5                	mov    ebp,eax
c0000cda:	56                   	push   esi
c0000cdb:	8d 78 34             	lea    edi,[eax+0x34]
c0000cde:	53                   	push   ebx
c0000cdf:	83 ec 10             	sub    esp,0x10
c0000ce2:	89 10                	mov    DWORD PTR [eax],edx
c0000ce4:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0000ce8:	c1 ea 03             	shr    edx,0x3
c0000ceb:	8d 7c 90 fc          	lea    edi,[eax+edx*4-0x4]
c0000cef:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0000cf3:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c0000cf6:	85 d2                	test   edx,edx
c0000cf8:	0f 84 98 00 00 00    	je     c0000d96 <malloc_consolidate+0xcd>
c0000cfe:	c7 45 04 00 00 00 00 	mov    DWORD PTR [ebp+0x4],0x0
c0000d05:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0000d08:	8b 7a 04             	mov    edi,DWORD PTR [edx+0x4]
c0000d0b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0000d0f:	89 f9                	mov    ecx,edi
c0000d11:	83 e1 fe             	and    ecx,0xfffffffe
c0000d14:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0000d17:	8b 5e 04             	mov    ebx,DWORD PTR [esi+0x4]
c0000d1a:	83 e3 fc             	and    ebx,0xfffffffc
c0000d1d:	83 e7 01             	and    edi,0x1
c0000d20:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0000d23:	75 14                	jne    c0000d39 <malloc_consolidate+0x70>
c0000d25:	8b 3a                	mov    edi,DWORD PTR [edx]
c0000d27:	29 fa                	sub    edx,edi
c0000d29:	01 f9                	add    ecx,edi
c0000d2b:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000d2e:	89 fb                	mov    ebx,edi
c0000d30:	8b 7a 0c             	mov    edi,DWORD PTR [edx+0xc]
c0000d33:	89 7b 0c             	mov    DWORD PTR [ebx+0xc],edi
c0000d36:	89 5f 08             	mov    DWORD PTR [edi+0x8],ebx
c0000d39:	39 70 2c             	cmp    DWORD PTR [eax+0x2c],esi
c0000d3c:	74 40                	je     c0000d7e <malloc_consolidate+0xb5>
c0000d3e:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0000d41:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0000d44:	8b 7c 3e 04          	mov    edi,DWORD PTR [esi+edi*1+0x4]
c0000d48:	89 5e 04             	mov    DWORD PTR [esi+0x4],ebx
c0000d4b:	83 e7 01             	and    edi,0x1
c0000d4e:	75 0e                	jne    c0000d5e <malloc_consolidate+0x95>
c0000d50:	01 d9                	add    ecx,ebx
c0000d52:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0000d55:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0000d58:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0000d5b:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0000d5e:	8b 58 3c             	mov    ebx,DWORD PTR [eax+0x3c]
c0000d61:	89 ce                	mov    esi,ecx
c0000d63:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0000d66:	83 ce 01             	or     esi,0x1
c0000d69:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0000d6c:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0000d6f:	89 5a 08             	mov    DWORD PTR [edx+0x8],ebx
c0000d72:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c0000d76:	89 72 0c             	mov    DWORD PTR [edx+0xc],esi
c0000d79:	89 0c 0a             	mov    DWORD PTR [edx+ecx*1],ecx
c0000d7c:	eb 0c                	jmp    c0000d8a <malloc_consolidate+0xc1>
c0000d7e:	03 0c 24             	add    ecx,DWORD PTR [esp]
c0000d81:	83 c9 01             	or     ecx,0x1
c0000d84:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000d87:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0000d8a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0000d8e:	85 d2                	test   edx,edx
c0000d90:	0f 85 6f ff ff ff    	jne    c0000d05 <malloc_consolidate+0x3c>
c0000d96:	83 c5 04             	add    ebp,0x4
c0000d99:	39 6c 24 08          	cmp    DWORD PTR [esp+0x8],ebp
c0000d9d:	0f 85 50 ff ff ff    	jne    c0000cf3 <malloc_consolidate+0x2a>
c0000da3:	83 c4 10             	add    esp,0x10
c0000da6:	5b                   	pop    ebx
c0000da7:	5e                   	pop    esi
c0000da8:	5f                   	pop    edi
c0000da9:	5d                   	pop    ebp
c0000daa:	c3                   	ret    
c0000dab:	e9 b8 fe ff ff       	jmp    c0000c68 <malloc_init_state>

c0000db0 <dlfree>:
c0000db0:	57                   	push   edi
c0000db1:	56                   	push   esi
c0000db2:	53                   	push   ebx
c0000db3:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0000db7:	85 db                	test   ebx,ebx
c0000db9:	0f 84 e2 00 00 00    	je     c0000ea1 <dlfree+0xf1>
c0000dbf:	8b 73 fc             	mov    esi,DWORD PTR [ebx-0x4]
c0000dc2:	8b 0d 40 ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea40
c0000dc8:	89 f0                	mov    eax,esi
c0000dca:	8d 53 f8             	lea    edx,[ebx-0x8]
c0000dcd:	83 e0 fc             	and    eax,0xfffffffc
c0000dd0:	39 c1                	cmp    ecx,eax
c0000dd2:	72 24                	jb     c0000df8 <dlfree+0x48>
c0000dd4:	83 c9 03             	or     ecx,0x3
c0000dd7:	c1 e8 03             	shr    eax,0x3
c0000dda:	89 0d 40 ea 02 c0    	mov    DWORD PTR ds:0xc002ea40,ecx
c0000de0:	83 e8 02             	sub    eax,0x2
c0000de3:	8b 0c 85 44 ea 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd15bc]
c0000dea:	89 0b                	mov    DWORD PTR [ebx],ecx
c0000dec:	89 14 85 44 ea 02 c0 	mov    DWORD PTR [eax*4-0x3ffd15bc],edx
c0000df3:	e9 a9 00 00 00       	jmp    c0000ea1 <dlfree+0xf1>
c0000df8:	83 e6 02             	and    esi,0x2
c0000dfb:	0f 85 a0 00 00 00    	jne    c0000ea1 <dlfree+0xf1>
c0000e01:	83 c9 01             	or     ecx,0x1
c0000e04:	8d 34 02             	lea    esi,[edx+eax*1]
c0000e07:	89 0d 40 ea 02 c0    	mov    DWORD PTR ds:0xc002ea40,ecx
c0000e0d:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c0000e10:	83 e1 fc             	and    ecx,0xfffffffc
c0000e13:	f6 43 fc 01          	test   BYTE PTR [ebx-0x4],0x1
c0000e17:	75 13                	jne    c0000e2c <dlfree+0x7c>
c0000e19:	8b 5b f8             	mov    ebx,DWORD PTR [ebx-0x8]
c0000e1c:	29 da                	sub    edx,ebx
c0000e1e:	01 d8                	add    eax,ebx
c0000e20:	8b 7a 08             	mov    edi,DWORD PTR [edx+0x8]
c0000e23:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
c0000e26:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e29:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e2c:	39 35 6c ea 02 c0    	cmp    DWORD PTR ds:0xc002ea6c,esi
c0000e32:	74 40                	je     c0000e74 <dlfree+0xc4>
c0000e34:	8b 5c 0e 04          	mov    ebx,DWORD PTR [esi+ecx*1+0x4]
c0000e38:	89 4e 04             	mov    DWORD PTR [esi+0x4],ecx
c0000e3b:	80 e3 01             	and    bl,0x1
c0000e3e:	75 0e                	jne    c0000e4e <dlfree+0x9e>
c0000e40:	8b 7e 08             	mov    edi,DWORD PTR [esi+0x8]
c0000e43:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c0000e46:	01 c8                	add    eax,ecx
c0000e48:	89 5f 0c             	mov    DWORD PTR [edi+0xc],ebx
c0000e4b:	89 7b 08             	mov    DWORD PTR [ebx+0x8],edi
c0000e4e:	8b 0d 7c ea 02 c0    	mov    ecx,DWORD PTR ds:0xc002ea7c
c0000e54:	c7 42 0c 74 ea 02 c0 	mov    DWORD PTR [edx+0xc],0xc002ea74
c0000e5b:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
c0000e5e:	89 15 7c ea 02 c0    	mov    DWORD PTR ds:0xc002ea7c,edx
c0000e64:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c0000e67:	89 c1                	mov    ecx,eax
c0000e69:	83 c9 01             	or     ecx,0x1
c0000e6c:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e6f:	89 04 02             	mov    DWORD PTR [edx+eax*1],eax
c0000e72:	eb 10                	jmp    c0000e84 <dlfree+0xd4>
c0000e74:	01 c8                	add    eax,ecx
c0000e76:	89 c1                	mov    ecx,eax
c0000e78:	83 c9 01             	or     ecx,0x1
c0000e7b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c0000e7e:	89 15 6c ea 02 c0    	mov    DWORD PTR ds:0xc002ea6c,edx
c0000e84:	3d ff ff 01 00       	cmp    eax,0x1ffff
c0000e89:	76 16                	jbe    c0000ea1 <dlfree+0xf1>
c0000e8b:	f6 05 40 ea 02 c0 02 	test   BYTE PTR ds:0xc002ea40,0x2
c0000e92:	74 0d                	je     c0000ea1 <dlfree+0xf1>
c0000e94:	5b                   	pop    ebx
c0000e95:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c0000e9a:	5e                   	pop    esi
c0000e9b:	5f                   	pop    edi
c0000e9c:	e9 28 fe ff ff       	jmp    c0000cc9 <malloc_consolidate>
c0000ea1:	5b                   	pop    ebx
c0000ea2:	5e                   	pop    esi
c0000ea3:	5f                   	pop    edi
c0000ea4:	c3                   	ret    

c0000ea5 <sYSMALLOc>:
c0000ea5:	55                   	push   ebp
c0000ea6:	57                   	push   edi
c0000ea7:	56                   	push   esi
c0000ea8:	53                   	push   ebx
c0000ea9:	89 d3                	mov    ebx,edx
c0000eab:	83 ec 2c             	sub    esp,0x2c
c0000eae:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0000eb2:	8b 92 5c 03 00 00    	mov    edx,DWORD PTR [edx+0x35c]
c0000eb8:	f6 03 02             	test   BYTE PTR [ebx],0x2
c0000ebb:	8d 42 ff             	lea    eax,[edx-0x1]
c0000ebe:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0000ec2:	74 1f                	je     c0000ee3 <sYSMALLOc+0x3e>
c0000ec4:	89 d8                	mov    eax,ebx
c0000ec6:	e8 fe fd ff ff       	call   c0000cc9 <malloc_consolidate>
c0000ecb:	83 ec 0c             	sub    esp,0xc
c0000ece:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0000ed2:	83 e8 07             	sub    eax,0x7
c0000ed5:	50                   	push   eax
c0000ed6:	e8 30 02 00 00       	call   c000110b <dlmalloc>
c0000edb:	83 c4 10             	add    esp,0x10
c0000ede:	e9 20 02 00 00       	jmp    c0001103 <sYSMALLOc+0x25e>
c0000ee3:	8b 7b 2c             	mov    edi,DWORD PTR [ebx+0x2c]
c0000ee6:	8b 8b 48 03 00 00    	mov    ecx,DWORD PTR [ebx+0x348]
c0000eec:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0000eef:	83 e0 fc             	and    eax,0xfffffffc
c0000ef2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0000ef6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0000efa:	83 c0 10             	add    eax,0x10
c0000efd:	01 c1                	add    ecx,eax
c0000eff:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0000f03:	f6 83 60 03 00 00 01 	test   BYTE PTR [ebx+0x360],0x1
c0000f0a:	74 04                	je     c0000f10 <sYSMALLOc+0x6b>
c0000f0c:	2b 4c 24 04          	sub    ecx,DWORD PTR [esp+0x4]
c0000f10:	f7 da                	neg    edx
c0000f12:	03 4c 24 10          	add    ecx,DWORD PTR [esp+0x10]
c0000f16:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0000f1a:	21 d1                	and    ecx,edx
c0000f1c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0000f20:	7f 07                	jg     c0000f29 <sYSMALLOc+0x84>
c0000f22:	31 c0                	xor    eax,eax
c0000f24:	e9 da 01 00 00       	jmp    c0001103 <sYSMALLOc+0x25e>
c0000f29:	83 ec 0c             	sub    esp,0xc
c0000f2c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0000f30:	e8 cf e7 00 00       	call   c000f704 <sbrk>
c0000f35:	83 c4 10             	add    esp,0x10
c0000f38:	89 c6                	mov    esi,eax
c0000f3a:	83 f8 ff             	cmp    eax,0xffffffff
c0000f3d:	74 e3                	je     c0000f22 <sYSMALLOc+0x7d>
c0000f3f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0000f43:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0000f47:	8d 0c 07             	lea    ecx,[edi+eax*1]
c0000f4a:	03 ab 68 03 00 00    	add    ebp,DWORD PTR [ebx+0x368]
c0000f50:	39 f1                	cmp    ecx,esi
c0000f52:	89 ab 68 03 00 00    	mov    DWORD PTR [ebx+0x368],ebp
c0000f58:	75 13                	jne    c0000f6d <sYSMALLOc+0xc8>
c0000f5a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0000f5e:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000f62:	83 c8 01             	or     eax,0x1
c0000f65:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c0000f68:	e9 3e 01 00 00       	jmp    c00010ab <sYSMALLOc+0x206>
c0000f6d:	8b 93 60 03 00 00    	mov    edx,DWORD PTR [ebx+0x360]
c0000f73:	88 d0                	mov    al,dl
c0000f75:	83 e0 01             	and    eax,0x1
c0000f78:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0000f7d:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c0000f81:	0f 95 c0             	setne  al
c0000f84:	22 44 24 1f          	and    al,BYTE PTR [esp+0x1f]
c0000f88:	39 f1                	cmp    ecx,esi
c0000f8a:	76 12                	jbe    c0000f9e <sYSMALLOc+0xf9>
c0000f8c:	84 c0                	test   al,al
c0000f8e:	74 0e                	je     c0000f9e <sYSMALLOc+0xf9>
c0000f90:	83 e2 fe             	and    edx,0xfffffffe
c0000f93:	89 93 60 03 00 00    	mov    DWORD PTR [ebx+0x360],edx
c0000f99:	e9 83 00 00 00       	jmp    c0001021 <sYSMALLOc+0x17c>
c0000f9e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0000fa3:	74 7c                	je     c0001021 <sYSMALLOc+0x17c>
c0000fa5:	84 c0                	test   al,al
c0000fa7:	74 0c                	je     c0000fb5 <sYSMALLOc+0x110>
c0000fa9:	89 f0                	mov    eax,esi
c0000fab:	29 c8                	sub    eax,ecx
c0000fad:	01 e8                	add    eax,ebp
c0000faf:	89 83 68 03 00 00    	mov    DWORD PTR [ebx+0x368],eax
c0000fb5:	89 f2                	mov    edx,esi
c0000fb7:	83 e2 07             	and    edx,0x7
c0000fba:	74 0c                	je     c0000fc8 <sYSMALLOc+0x123>
c0000fbc:	b8 08 00 00 00       	mov    eax,0x8
c0000fc1:	29 d0                	sub    eax,edx
c0000fc3:	8d 2c 06             	lea    ebp,[esi+eax*1]
c0000fc6:	eb 04                	jmp    c0000fcc <sYSMALLOc+0x127>
c0000fc8:	89 f5                	mov    ebp,esi
c0000fca:	31 c0                	xor    eax,eax
c0000fcc:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c0000fd0:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0000fd4:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000fd8:	01 c1                	add    ecx,eax
c0000fda:	83 ec 0c             	sub    esp,0xc
c0000fdd:	01 f1                	add    ecx,esi
c0000fdf:	01 ca                	add    edx,ecx
c0000fe1:	29 c8                	sub    eax,ecx
c0000fe3:	23 54 24 20          	and    edx,DWORD PTR [esp+0x20]
c0000fe7:	01 c2                	add    edx,eax
c0000fe9:	52                   	push   edx
c0000fea:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0000fee:	e8 11 e7 00 00       	call   c000f704 <sbrk>
c0000ff3:	83 c4 10             	add    esp,0x10
c0000ff6:	83 f8 ff             	cmp    eax,0xffffffff
c0000ff9:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0000ffd:	75 0f                	jne    c000100e <sYSMALLOc+0x169>
c0000fff:	83 ec 0c             	sub    esp,0xc
c0001002:	6a 00                	push   0x0
c0001004:	e8 fb e6 00 00       	call   c000f704 <sbrk>
c0001009:	83 c4 10             	add    esp,0x10
c000100c:	eb 30                	jmp    c000103e <sYSMALLOc+0x199>
c000100e:	39 c6                	cmp    esi,eax
c0001010:	76 33                	jbe    c0001045 <sYSMALLOc+0x1a0>
c0001012:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0001016:	83 a3 60 03 00 00 fe 	and    DWORD PTR [ebx+0x360],0xfffffffe
c000101d:	01 f0                	add    eax,esi
c000101f:	eb 1d                	jmp    c000103e <sYSMALLOc+0x199>
c0001021:	83 ec 0c             	sub    esp,0xc
c0001024:	89 f5                	mov    ebp,esi
c0001026:	6a 00                	push   0x0
c0001028:	e8 d7 e6 00 00       	call   c000f704 <sbrk>
c000102d:	89 c2                	mov    edx,eax
c000102f:	29 f2                	sub    edx,esi
c0001031:	2b 54 24 18          	sub    edx,DWORD PTR [esp+0x18]
c0001035:	83 c4 10             	add    esp,0x10
c0001038:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c000103e:	31 d2                	xor    edx,edx
c0001040:	83 f8 ff             	cmp    eax,0xffffffff
c0001043:	74 66                	je     c00010ab <sYSMALLOc+0x206>
c0001045:	29 e8                	sub    eax,ebp
c0001047:	89 6b 2c             	mov    DWORD PTR [ebx+0x2c],ebp
c000104a:	01 d0                	add    eax,edx
c000104c:	83 c8 01             	or     eax,0x1
c000104f:	89 45 04             	mov    DWORD PTR [ebp+0x4],eax
c0001052:	01 93 68 03 00 00    	add    DWORD PTR [ebx+0x368],edx
c0001058:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000105d:	74 4c                	je     c00010ab <sYSMALLOc+0x206>
c000105f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001063:	83 e8 0c             	sub    eax,0xc
c0001066:	83 e0 f8             	and    eax,0xfffffff8
c0001069:	89 c2                	mov    edx,eax
c000106b:	83 ca 01             	or     edx,0x1
c000106e:	83 f8 0f             	cmp    eax,0xf
c0001071:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c0001074:	c7 44 07 04 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x4],0x5
c000107c:	c7 44 07 08 05 00 00 00 	mov    DWORD PTR [edi+eax*1+0x8],0x5
c0001084:	76 25                	jbe    c00010ab <sYSMALLOc+0x206>
c0001086:	8b b3 44 03 00 00    	mov    esi,DWORD PTR [ebx+0x344]
c000108c:	83 ec 0c             	sub    esp,0xc
c000108f:	c7 83 44 03 00 00 ff ff ff ff 	mov    DWORD PTR [ebx+0x344],0xffffffff
c0001099:	83 c7 08             	add    edi,0x8
c000109c:	57                   	push   edi
c000109d:	e8 0e fd ff ff       	call   c0000db0 <dlfree>
c00010a2:	89 b3 44 03 00 00    	mov    DWORD PTR [ebx+0x344],esi
c00010a8:	83 c4 10             	add    esp,0x10
c00010ab:	8b 83 68 03 00 00    	mov    eax,DWORD PTR [ebx+0x368]
c00010b1:	39 83 6c 03 00 00    	cmp    DWORD PTR [ebx+0x36c],eax
c00010b7:	73 06                	jae    c00010bf <sYSMALLOc+0x21a>
c00010b9:	89 83 6c 03 00 00    	mov    DWORD PTR [ebx+0x36c],eax
c00010bf:	03 83 64 03 00 00    	add    eax,DWORD PTR [ebx+0x364]
c00010c5:	39 83 74 03 00 00    	cmp    DWORD PTR [ebx+0x374],eax
c00010cb:	73 06                	jae    c00010d3 <sYSMALLOc+0x22e>
c00010cd:	89 83 74 03 00 00    	mov    DWORD PTR [ebx+0x374],eax
c00010d3:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00010d6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00010d9:	83 e2 fc             	and    edx,0xfffffffc
c00010dc:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c00010e0:	0f 82 3c fe ff ff    	jb     c0000f22 <sYSMALLOc+0x7d>
c00010e6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00010ea:	8d 0c 38             	lea    ecx,[eax+edi*1]
c00010ed:	29 fa                	sub    edx,edi
c00010ef:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c00010f2:	83 ca 01             	or     edx,0x1
c00010f5:	89 fb                	mov    ebx,edi
c00010f7:	83 c0 08             	add    eax,0x8
c00010fa:	83 cb 01             	or     ebx,0x1
c00010fd:	89 58 fc             	mov    DWORD PTR [eax-0x4],ebx
c0001100:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001103:	83 c4 2c             	add    esp,0x2c
c0001106:	5b                   	pop    ebx
c0001107:	5e                   	pop    esi
c0001108:	5f                   	pop    edi
c0001109:	5d                   	pop    ebp
c000110a:	c3                   	ret    

c000110b <dlmalloc>:
c000110b:	55                   	push   ebp
c000110c:	57                   	push   edi
c000110d:	56                   	push   esi
c000110e:	53                   	push   ebx
c000110f:	83 ec 1c             	sub    esp,0x1c
c0001112:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0001116:	83 f8 df             	cmp    eax,0xffffffdf
c0001119:	0f 87 70 03 00 00    	ja     c000148f <dlmalloc+0x384>
c000111f:	83 c0 0b             	add    eax,0xb
c0001122:	be 10 00 00 00       	mov    esi,0x10
c0001127:	83 f8 0f             	cmp    eax,0xf
c000112a:	76 05                	jbe    c0001131 <dlmalloc+0x26>
c000112c:	83 e0 f8             	and    eax,0xfffffff8
c000112f:	89 c6                	mov    esi,eax
c0001131:	8b 3d 40 ea 02 c0    	mov    edi,DWORD PTR ds:0xc002ea40
c0001137:	f7 c7 01 00 00 00    	test   edi,0x1
c000113d:	75 17                	jne    c0001156 <dlmalloc+0x4b>
c000113f:	85 ff                	test   edi,edi
c0001141:	0f 85 05 03 00 00    	jne    c000144c <dlmalloc+0x341>
c0001147:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c000114c:	e8 78 fb ff ff       	call   c0000cc9 <malloc_consolidate>
c0001151:	e9 f6 02 00 00       	jmp    c000144c <dlmalloc+0x341>
c0001156:	39 f7                	cmp    edi,esi
c0001158:	72 1f                	jb     c0001179 <dlmalloc+0x6e>
c000115a:	89 f2                	mov    edx,esi
c000115c:	c1 ea 03             	shr    edx,0x3
c000115f:	83 ea 02             	sub    edx,0x2
c0001162:	8b 04 95 44 ea 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd15bc]
c0001169:	85 c0                	test   eax,eax
c000116b:	74 0c                	je     c0001179 <dlmalloc+0x6e>
c000116d:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
c0001170:	89 0c 95 44 ea 02 c0 	mov    DWORD PTR [edx*4-0x3ffd15bc],ecx
c0001177:	eb 30                	jmp    c00011a9 <dlmalloc+0x9e>
c0001179:	89 f0                	mov    eax,esi
c000117b:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001181:	77 2e                	ja     c00011b1 <dlmalloc+0xa6>
c0001183:	c1 e8 03             	shr    eax,0x3
c0001186:	8d 14 c5 74 ea 02 c0 	lea    edx,[eax*8-0x3ffd158c]
c000118d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001191:	8d 5a f8             	lea    ebx,[edx-0x8]
c0001194:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c0001197:	39 c3                	cmp    ebx,eax
c0001199:	74 2e                	je     c00011c9 <dlmalloc+0xbe>
c000119b:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c000119e:	83 4c 30 04 01       	or     DWORD PTR [eax+esi*1+0x4],0x1
c00011a3:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
c00011a6:	89 59 08             	mov    DWORD PTR [ecx+0x8],ebx
c00011a9:	83 c0 08             	add    eax,0x8
c00011ac:	e9 e0 02 00 00       	jmp    c0001491 <dlmalloc+0x386>
c00011b1:	e8 8f fa ff ff       	call   c0000c45 <largebin_index>
c00011b6:	83 e7 02             	and    edi,0x2
c00011b9:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00011bd:	74 0a                	je     c00011c9 <dlmalloc+0xbe>
c00011bf:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c00011c4:	e8 00 fb ff ff       	call   c0000cc9 <malloc_consolidate>
c00011c9:	8d 46 10             	lea    eax,[esi+0x10]
c00011cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00011d0:	8b 1d 80 ea 02 c0    	mov    ebx,DWORD PTR ds:0xc002ea80
c00011d6:	81 fb 74 ea 02 c0    	cmp    ebx,0xc002ea74
c00011dc:	0f 84 13 01 00 00    	je     c00012f5 <dlmalloc+0x1ea>
c00011e2:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00011e5:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00011e8:	83 e7 fc             	and    edi,0xfffffffc
c00011eb:	81 fe ff 00 00 00    	cmp    esi,0xff
c00011f1:	77 4c                	ja     c000123f <dlmalloc+0x134>
c00011f3:	3d 74 ea 02 c0       	cmp    eax,0xc002ea74
c00011f8:	75 45                	jne    c000123f <dlmalloc+0x134>
c00011fa:	39 1d 70 ea 02 c0    	cmp    DWORD PTR ds:0xc002ea70,ebx
c0001200:	75 3d                	jne    c000123f <dlmalloc+0x134>
c0001202:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c0001206:	73 37                	jae    c000123f <dlmalloc+0x134>
c0001208:	8d 04 33             	lea    eax,[ebx+esi*1]
c000120b:	89 fa                	mov    edx,edi
c000120d:	a3 7c ea 02 c0       	mov    ds:0xc002ea7c,eax
c0001212:	a3 80 ea 02 c0       	mov    ds:0xc002ea80,eax
c0001217:	a3 70 ea 02 c0       	mov    ds:0xc002ea70,eax
c000121c:	29 f2                	sub    edx,esi
c000121e:	c7 40 08 74 ea 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ea74
c0001225:	c7 40 0c 74 ea 02 c0 	mov    DWORD PTR [eax+0xc],0xc002ea74
c000122c:	83 ce 01             	or     esi,0x1
c000122f:	89 d1                	mov    ecx,edx
c0001231:	89 73 04             	mov    DWORD PTR [ebx+0x4],esi
c0001234:	83 c9 01             	or     ecx,0x1
c0001237:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c000123a:	89 14 3b             	mov    DWORD PTR [ebx+edi*1],edx
c000123d:	eb 15                	jmp    c0001254 <dlmalloc+0x149>
c000123f:	a3 80 ea 02 c0       	mov    ds:0xc002ea80,eax
c0001244:	39 fe                	cmp    esi,edi
c0001246:	c7 40 08 74 ea 02 c0 	mov    DWORD PTR [eax+0x8],0xc002ea74
c000124d:	75 0d                	jne    c000125c <dlmalloc+0x151>
c000124f:	83 4c 33 04 01       	or     DWORD PTR [ebx+esi*1+0x4],0x1
c0001254:	8d 43 08             	lea    eax,[ebx+0x8]
c0001257:	e9 35 02 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000125c:	89 f8                	mov    eax,edi
c000125e:	81 ff ff 00 00 00    	cmp    edi,0xff
c0001264:	77 19                	ja     c000127f <dlmalloc+0x174>
c0001266:	c1 e8 03             	shr    eax,0x3
c0001269:	8d 14 00             	lea    edx,[eax+eax*1]
c000126c:	83 c2 0d             	add    edx,0xd
c000126f:	8d 2c 95 38 ea 02 c0 	lea    ebp,[edx*4-0x3ffd15c8]
c0001276:	8b 14 95 40 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15c0]
c000127d:	eb 46                	jmp    c00012c5 <dlmalloc+0x1ba>
c000127f:	e8 c1 f9 ff ff       	call   c0000c45 <largebin_index>
c0001284:	8d 14 00             	lea    edx,[eax+eax*1]
c0001287:	83 c2 0d             	add    edx,0xd
c000128a:	8d 0c 95 40 ea 02 c0 	lea    ecx,[edx*4-0x3ffd15c0]
c0001291:	8b 14 95 40 ea 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd15c0]
c0001298:	8d 69 f8             	lea    ebp,[ecx-0x8]
c000129b:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c000129f:	89 d5                	mov    ebp,edx
c00012a1:	39 54 24 08          	cmp    DWORD PTR [esp+0x8],edx
c00012a5:	74 1e                	je     c00012c5 <dlmalloc+0x1ba>
c00012a7:	8b 69 04             	mov    ebp,DWORD PTR [ecx+0x4]
c00012aa:	39 7d 04             	cmp    DWORD PTR [ebp+0x4],edi
c00012ad:	77 12                	ja     c00012c1 <dlmalloc+0x1b6>
c00012af:	83 cf 01             	or     edi,0x1
c00012b2:	39 7a 04             	cmp    DWORD PTR [edx+0x4],edi
c00012b5:	76 05                	jbe    c00012bc <dlmalloc+0x1b1>
c00012b7:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c00012ba:	eb f6                	jmp    c00012b2 <dlmalloc+0x1a7>
c00012bc:	8b 6a 0c             	mov    ebp,DWORD PTR [edx+0xc]
c00012bf:	eb 04                	jmp    c00012c5 <dlmalloc+0x1ba>
c00012c1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00012c5:	89 c7                	mov    edi,eax
c00012c7:	88 c1                	mov    cl,al
c00012c9:	c1 ff 05             	sar    edi,0x5
c00012cc:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00012d0:	bf 01 00 00 00       	mov    edi,0x1
c00012d5:	d3 e7                	shl    edi,cl
c00012d7:	89 f8                	mov    eax,edi
c00012d9:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c00012dd:	09 04 bd 74 ed 02 c0 	or     DWORD PTR [edi*4-0x3ffd128c],eax
c00012e4:	89 6b 0c             	mov    DWORD PTR [ebx+0xc],ebp
c00012e7:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c00012ea:	89 5a 0c             	mov    DWORD PTR [edx+0xc],ebx
c00012ed:	89 5d 08             	mov    DWORD PTR [ebp+0x8],ebx
c00012f0:	e9 db fe ff ff       	jmp    c00011d0 <dlmalloc+0xc5>
c00012f5:	81 fe ff 00 00 00    	cmp    esi,0xff
c00012fb:	76 78                	jbe    c0001375 <dlmalloc+0x26a>
c00012fd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001301:	8d 04 c5 74 ea 02 c0 	lea    eax,[eax*8-0x3ffd158c]
c0001308:	8d 48 f8             	lea    ecx,[eax-0x8]
c000130b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000130e:	39 ca                	cmp    edx,ecx
c0001310:	74 63                	je     c0001375 <dlmalloc+0x26a>
c0001312:	8b 5a 04             	mov    ebx,DWORD PTR [edx+0x4]
c0001315:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c0001318:	83 e3 fc             	and    ebx,0xfffffffc
c000131b:	39 de                	cmp    esi,ebx
c000131d:	77 52                	ja     c0001371 <dlmalloc+0x266>
c000131f:	89 df                	mov    edi,ebx
c0001321:	8b 4a 08             	mov    ecx,DWORD PTR [edx+0x8]
c0001324:	29 f7                	sub    edi,esi
c0001326:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c0001329:	01 d3                	add    ebx,edx
c000132b:	89 48 08             	mov    DWORD PTR [eax+0x8],ecx
c000132e:	83 ff 0f             	cmp    edi,0xf
c0001331:	8d 42 08             	lea    eax,[edx+0x8]
c0001334:	77 09                	ja     c000133f <dlmalloc+0x234>
c0001336:	83 4b 04 01          	or     DWORD PTR [ebx+0x4],0x1
c000133a:	e9 52 01 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000133f:	8d 0c 32             	lea    ecx,[edx+esi*1]
c0001342:	83 ce 01             	or     esi,0x1
c0001345:	89 0d 7c ea 02 c0    	mov    DWORD PTR ds:0xc002ea7c,ecx
c000134b:	89 0d 80 ea 02 c0    	mov    DWORD PTR ds:0xc002ea80,ecx
c0001351:	c7 41 08 74 ea 02 c0 	mov    DWORD PTR [ecx+0x8],0xc002ea74
c0001358:	c7 41 0c 74 ea 02 c0 	mov    DWORD PTR [ecx+0xc],0xc002ea74
c000135f:	89 72 04             	mov    DWORD PTR [edx+0x4],esi
c0001362:	89 fa                	mov    edx,edi
c0001364:	83 ca 01             	or     edx,0x1
c0001367:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000136a:	89 3b                	mov    DWORD PTR [ebx],edi
c000136c:	e9 20 01 00 00       	jmp    c0001491 <dlmalloc+0x386>
c0001371:	89 c2                	mov    edx,eax
c0001373:	eb 99                	jmp    c000130e <dlmalloc+0x203>
c0001375:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0001379:	b8 01 00 00 00       	mov    eax,0x1
c000137e:	41                   	inc    ecx
c000137f:	89 cb                	mov    ebx,ecx
c0001381:	8d 14 cd 6c ea 02 c0 	lea    edx,[ecx*8-0x3ffd1594]
c0001388:	c1 eb 05             	shr    ebx,0x5
c000138b:	d3 e0                	shl    eax,cl
c000138d:	8b 3c 9d 74 ed 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd128c]
c0001394:	39 f8                	cmp    eax,edi
c0001396:	77 04                	ja     c000139c <dlmalloc+0x291>
c0001398:	85 c0                	test   eax,eax
c000139a:	75 26                	jne    c00013c2 <dlmalloc+0x2b7>
c000139c:	43                   	inc    ebx
c000139d:	83 fb 02             	cmp    ebx,0x2
c00013a0:	0f 87 a6 00 00 00    	ja     c000144c <dlmalloc+0x341>
c00013a6:	8b 3c 9d 74 ed 02 c0 	mov    edi,DWORD PTR [ebx*4-0x3ffd128c]
c00013ad:	85 ff                	test   edi,edi
c00013af:	74 eb                	je     c000139c <dlmalloc+0x291>
c00013b1:	89 d8                	mov    eax,ebx
c00013b3:	c1 e0 06             	shl    eax,0x6
c00013b6:	8d 14 85 6c ea 02 c0 	lea    edx,[eax*4-0x3ffd1594]
c00013bd:	b8 01 00 00 00       	mov    eax,0x1
c00013c2:	85 f8                	test   eax,edi
c00013c4:	75 07                	jne    c00013cd <dlmalloc+0x2c2>
c00013c6:	83 c2 08             	add    edx,0x8
c00013c9:	01 c0                	add    eax,eax
c00013cb:	eb f5                	jmp    c00013c2 <dlmalloc+0x2b7>
c00013cd:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c00013d0:	39 ca                	cmp    edx,ecx
c00013d2:	75 14                	jne    c00013e8 <dlmalloc+0x2dd>
c00013d4:	89 c1                	mov    ecx,eax
c00013d6:	83 c2 08             	add    edx,0x8
c00013d9:	f7 d1                	not    ecx
c00013db:	01 c0                	add    eax,eax
c00013dd:	21 cf                	and    edi,ecx
c00013df:	89 3c 9d 74 ed 02 c0 	mov    DWORD PTR [ebx*4-0x3ffd128c],edi
c00013e6:	eb ac                	jmp    c0001394 <dlmalloc+0x289>
c00013e8:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c00013eb:	8b 79 0c             	mov    edi,DWORD PTR [ecx+0xc]
c00013ee:	83 e0 fc             	and    eax,0xfffffffc
c00013f1:	89 7a 0c             	mov    DWORD PTR [edx+0xc],edi
c00013f4:	89 c3                	mov    ebx,eax
c00013f6:	89 57 08             	mov    DWORD PTR [edi+0x8],edx
c00013f9:	29 f3                	sub    ebx,esi
c00013fb:	8d 14 01             	lea    edx,[ecx+eax*1]
c00013fe:	83 fb 0f             	cmp    ebx,0xf
c0001401:	8d 41 08             	lea    eax,[ecx+0x8]
c0001404:	77 09                	ja     c000140f <dlmalloc+0x304>
c0001406:	83 4a 04 01          	or     DWORD PTR [edx+0x4],0x1
c000140a:	e9 82 00 00 00       	jmp    c0001491 <dlmalloc+0x386>
c000140f:	8d 3c 31             	lea    edi,[ecx+esi*1]
c0001412:	81 fe ff 00 00 00    	cmp    esi,0xff
c0001418:	89 3d 7c ea 02 c0    	mov    DWORD PTR ds:0xc002ea7c,edi
c000141e:	89 3d 80 ea 02 c0    	mov    DWORD PTR ds:0xc002ea80,edi
c0001424:	c7 47 08 74 ea 02 c0 	mov    DWORD PTR [edi+0x8],0xc002ea74
c000142b:	c7 47 0c 74 ea 02 c0 	mov    DWORD PTR [edi+0xc],0xc002ea74
c0001432:	77 06                	ja     c000143a <dlmalloc+0x32f>
c0001434:	89 3d 70 ea 02 c0    	mov    DWORD PTR ds:0xc002ea70,edi
c000143a:	83 ce 01             	or     esi,0x1
c000143d:	89 71 04             	mov    DWORD PTR [ecx+0x4],esi
c0001440:	89 d9                	mov    ecx,ebx
c0001442:	83 c9 01             	or     ecx,0x1
c0001445:	89 4f 04             	mov    DWORD PTR [edi+0x4],ecx
c0001448:	89 1a                	mov    DWORD PTR [edx],ebx
c000144a:	eb 45                	jmp    c0001491 <dlmalloc+0x386>
c000144c:	a1 6c ea 02 c0       	mov    eax,ds:0xc002ea6c
c0001451:	8d 4e 10             	lea    ecx,[esi+0x10]
c0001454:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0001457:	83 e2 fc             	and    edx,0xfffffffc
c000145a:	39 d1                	cmp    ecx,edx
c000145c:	77 1e                	ja     c000147c <dlmalloc+0x371>
c000145e:	8d 0c 30             	lea    ecx,[eax+esi*1]
c0001461:	89 f3                	mov    ebx,esi
c0001463:	89 0d 6c ea 02 c0    	mov    DWORD PTR ds:0xc002ea6c,ecx
c0001469:	83 cb 01             	or     ebx,0x1
c000146c:	29 f2                	sub    edx,esi
c000146e:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0001471:	83 ca 01             	or     edx,0x1
c0001474:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0001477:	e9 2d fd ff ff       	jmp    c00011a9 <dlmalloc+0x9e>
c000147c:	83 c4 1c             	add    esp,0x1c
c000147f:	89 f0                	mov    eax,esi
c0001481:	5b                   	pop    ebx
c0001482:	ba 40 ea 02 c0       	mov    edx,0xc002ea40
c0001487:	5e                   	pop    esi
c0001488:	5f                   	pop    edi
c0001489:	5d                   	pop    ebp
c000148a:	e9 16 fa ff ff       	jmp    c0000ea5 <sYSMALLOc>
c000148f:	31 c0                	xor    eax,eax
c0001491:	83 c4 1c             	add    esp,0x1c
c0001494:	5b                   	pop    ebx
c0001495:	5e                   	pop    esi
c0001496:	5f                   	pop    edi
c0001497:	5d                   	pop    ebp
c0001498:	c3                   	ret    

c0001499 <iALLOc>:
c0001499:	55                   	push   ebp
c000149a:	89 c5                	mov    ebp,eax
c000149c:	57                   	push   edi
c000149d:	56                   	push   esi
c000149e:	53                   	push   ebx
c000149f:	83 ec 2c             	sub    esp,0x2c
c00014a2:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00014a6:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00014aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00014ae:	83 3d 40 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea40,0x0
c00014b5:	75 12                	jne    c00014c9 <iALLOc+0x30>
c00014b7:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c00014bb:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c00014c0:	e8 04 f8 ff ff       	call   c0000cc9 <malloc_consolidate>
c00014c5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00014c9:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00014ce:	74 12                	je     c00014e2 <iALLOc+0x49>
c00014d0:	85 ed                	test   ebp,ebp
c00014d2:	0f 84 64 01 00 00    	je     c000163c <iALLOc+0x1a3>
c00014d8:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00014e0:	eb 33                	jmp    c0001515 <iALLOc+0x7c>
c00014e2:	85 ed                	test   ebp,ebp
c00014e4:	75 14                	jne    c00014fa <iALLOc+0x61>
c00014e6:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c00014ee:	83 c4 2c             	add    esp,0x2c
c00014f1:	5b                   	pop    ebx
c00014f2:	5e                   	pop    esi
c00014f3:	5f                   	pop    edi
c00014f4:	5d                   	pop    ebp
c00014f5:	e9 11 fc ff ff       	jmp    c000110b <dlmalloc>
c00014fa:	8d 04 ad 0b 00 00 00 	lea    eax,[ebp*4+0xb]
c0001501:	c7 44 24 14 10 00 00 00 	mov    DWORD PTR [esp+0x14],0x10
c0001509:	83 f8 0f             	cmp    eax,0xf
c000150c:	76 07                	jbe    c0001515 <iALLOc+0x7c>
c000150e:	83 e0 f8             	and    eax,0xfffffff8
c0001511:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0001515:	f6 44 24 18 01       	test   BYTE PTR [esp+0x18],0x1
c000151a:	75 09                	jne    c0001525 <iALLOc+0x8c>
c000151c:	89 d0                	mov    eax,edx
c000151e:	8d 3c aa             	lea    edi,[edx+ebp*4]
c0001521:	31 f6                	xor    esi,esi
c0001523:	eb 3b                	jmp    c0001560 <iALLOc+0xc7>
c0001525:	8b 02                	mov    eax,DWORD PTR [edx]
c0001527:	c7 44 24 10 10 00 00 00 	mov    DWORD PTR [esp+0x10],0x10
c000152f:	83 c0 0b             	add    eax,0xb
c0001532:	83 f8 0f             	cmp    eax,0xf
c0001535:	76 07                	jbe    c000153e <iALLOc+0xa5>
c0001537:	83 e0 f8             	and    eax,0xfffffff8
c000153a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000153e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0001542:	0f af f5             	imul   esi,ebp
c0001545:	eb 25                	jmp    c000156c <iALLOc+0xd3>
c0001547:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001549:	8d 4b 0b             	lea    ecx,[ebx+0xb]
c000154c:	bb 10 00 00 00       	mov    ebx,0x10
c0001551:	83 f9 0f             	cmp    ecx,0xf
c0001554:	76 05                	jbe    c000155b <iALLOc+0xc2>
c0001556:	83 e1 f8             	and    ecx,0xfffffff8
c0001559:	89 cb                	mov    ebx,ecx
c000155b:	01 de                	add    esi,ebx
c000155d:	83 c0 04             	add    eax,0x4
c0001560:	39 c7                	cmp    edi,eax
c0001562:	75 e3                	jne    c0001547 <iALLOc+0xae>
c0001564:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c000156c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0001570:	8b 1d 94 ed 02 c0    	mov    ebx,DWORD PTR ds:0xc002ed94
c0001576:	83 ec 0c             	sub    esp,0xc
c0001579:	c7 05 94 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ed94,0x0
c0001583:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001587:	8d 44 06 f9          	lea    eax,[esi+eax*1-0x7]
c000158b:	50                   	push   eax
c000158c:	e8 7a fb ff ff       	call   c000110b <dlmalloc>
c0001591:	83 c4 10             	add    esp,0x10
c0001594:	89 1d 94 ed 02 c0    	mov    DWORD PTR ds:0xc002ed94,ebx
c000159a:	85 c0                	test   eax,eax
c000159c:	0f 84 92 00 00 00    	je     c0001634 <iALLOc+0x19b>
c00015a2:	8b 58 fc             	mov    ebx,DWORD PTR [eax-0x4]
c00015a5:	8d 78 f8             	lea    edi,[eax-0x8]
c00015a8:	83 e3 fc             	and    ebx,0xfffffffc
c00015ab:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00015af:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c00015b4:	74 1e                	je     c00015d4 <iALLOc+0x13b>
c00015b6:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c00015ba:	89 d9                	mov    ecx,ebx
c00015bc:	52                   	push   edx
c00015bd:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c00015c1:	83 e9 04             	sub    ecx,0x4
c00015c4:	51                   	push   ecx
c00015c5:	6a 00                	push   0x0
c00015c7:	50                   	push   eax
c00015c8:	e8 9f f1 ff ff       	call   c000076c <memset>
c00015cd:	83 c4 10             	add    esp,0x10
c00015d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00015d4:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00015d9:	75 14                	jne    c00015ef <iALLOc+0x156>
c00015db:	8d 04 37             	lea    eax,[edi+esi*1]
c00015de:	29 f3                	sub    ebx,esi
c00015e0:	8d 48 08             	lea    ecx,[eax+0x8]
c00015e3:	83 cb 01             	or     ebx,0x1
c00015e6:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c00015ea:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00015ed:	89 f3                	mov    ebx,esi
c00015ef:	31 c0                	xor    eax,eax
c00015f1:	4d                   	dec    ebp
c00015f2:	8d 4f 08             	lea    ecx,[edi+0x8]
c00015f5:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00015f9:	39 c5                	cmp    ebp,eax
c00015fb:	89 0c 86             	mov    DWORD PTR [esi+eax*4],ecx
c00015fe:	74 2c                	je     c000162c <iALLOc+0x193>
c0001600:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0001604:	85 c9                	test   ecx,ecx
c0001606:	75 15                	jne    c000161d <iALLOc+0x184>
c0001608:	8b 0c 82             	mov    ecx,DWORD PTR [edx+eax*4]
c000160b:	8d 71 0b             	lea    esi,[ecx+0xb]
c000160e:	b9 10 00 00 00       	mov    ecx,0x10
c0001613:	83 fe 0f             	cmp    esi,0xf
c0001616:	76 05                	jbe    c000161d <iALLOc+0x184>
c0001618:	83 e6 f8             	and    esi,0xfffffff8
c000161b:	89 f1                	mov    ecx,esi
c000161d:	89 ce                	mov    esi,ecx
c000161f:	29 cb                	sub    ebx,ecx
c0001621:	83 ce 01             	or     esi,0x1
c0001624:	40                   	inc    eax
c0001625:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c0001628:	01 cf                	add    edi,ecx
c000162a:	eb c6                	jmp    c00015f2 <iALLOc+0x159>
c000162c:	83 cb 01             	or     ebx,0x1
c000162f:	89 5f 04             	mov    DWORD PTR [edi+0x4],ebx
c0001632:	eb 08                	jmp    c000163c <iALLOc+0x1a3>
c0001634:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c000163c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0001640:	83 c4 2c             	add    esp,0x2c
c0001643:	5b                   	pop    ebx
c0001644:	5e                   	pop    esi
c0001645:	5f                   	pop    edi
c0001646:	5d                   	pop    ebp
c0001647:	c3                   	ret    

c0001648 <dlrealloc>:
c0001648:	55                   	push   ebp
c0001649:	57                   	push   edi
c000164a:	56                   	push   esi
c000164b:	53                   	push   ebx
c000164c:	83 ec 1c             	sub    esp,0x1c
c000164f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0001653:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0001657:	85 f6                	test   esi,esi
c0001659:	75 10                	jne    c000166b <dlrealloc+0x23>
c000165b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000165f:	83 c4 1c             	add    esp,0x1c
c0001662:	5b                   	pop    ebx
c0001663:	5e                   	pop    esi
c0001664:	5f                   	pop    edi
c0001665:	5d                   	pop    ebp
c0001666:	e9 a0 fa ff ff       	jmp    c000110b <dlmalloc>
c000166b:	83 f8 df             	cmp    eax,0xffffffdf
c000166e:	76 07                	jbe    c0001677 <dlrealloc+0x2f>
c0001670:	31 f6                	xor    esi,esi
c0001672:	e9 69 01 00 00       	jmp    c00017e0 <dlrealloc+0x198>
c0001677:	83 c0 0b             	add    eax,0xb
c000167a:	bd 10 00 00 00       	mov    ebp,0x10
c000167f:	83 f8 0f             	cmp    eax,0xf
c0001682:	76 05                	jbe    c0001689 <dlrealloc+0x41>
c0001684:	83 e0 f8             	and    eax,0xfffffff8
c0001687:	89 c5                	mov    ebp,eax
c0001689:	8b 46 fc             	mov    eax,DWORD PTR [esi-0x4]
c000168c:	8d 56 f8             	lea    edx,[esi-0x8]
c000168f:	89 c3                	mov    ebx,eax
c0001691:	83 e3 fc             	and    ebx,0xfffffffc
c0001694:	a8 02                	test   al,0x2
c0001696:	75 d8                	jne    c0001670 <dlrealloc+0x28>
c0001698:	39 dd                	cmp    ebp,ebx
c000169a:	0f 86 03 01 00 00    	jbe    c00017a3 <dlrealloc+0x15b>
c00016a0:	8d 0c 1a             	lea    ecx,[edx+ebx*1]
c00016a3:	8b 79 04             	mov    edi,DWORD PTR [ecx+0x4]
c00016a6:	39 0d 6c ea 02 c0    	cmp    DWORD PTR ds:0xc002ea6c,ecx
c00016ac:	75 33                	jne    c00016e1 <dlrealloc+0x99>
c00016ae:	83 e7 fc             	and    edi,0xfffffffc
c00016b1:	01 df                	add    edi,ebx
c00016b3:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c00016b7:	8d 7d 10             	lea    edi,[ebp+0x10]
c00016ba:	3b 7c 24 08          	cmp    edi,DWORD PTR [esp+0x8]
c00016be:	77 49                	ja     c0001709 <dlrealloc+0xc1>
c00016c0:	01 ea                	add    edx,ebp
c00016c2:	83 e0 01             	and    eax,0x1
c00016c5:	09 e8                	or     eax,ebp
c00016c7:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c00016ca:	89 15 6c ea 02 c0    	mov    DWORD PTR ds:0xc002ea6c,edx
c00016d0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00016d4:	29 e8                	sub    eax,ebp
c00016d6:	83 c8 01             	or     eax,0x1
c00016d9:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c00016dc:	e9 ff 00 00 00       	jmp    c00017e0 <dlrealloc+0x198>
c00016e1:	89 f8                	mov    eax,edi
c00016e3:	83 e0 fe             	and    eax,0xfffffffe
c00016e6:	f6 44 01 04 01       	test   BYTE PTR [ecx+eax*1+0x4],0x1
c00016eb:	75 1c                	jne    c0001709 <dlrealloc+0xc1>
c00016ed:	83 e7 fc             	and    edi,0xfffffffc
c00016f0:	01 df                	add    edi,ebx
c00016f2:	39 fd                	cmp    ebp,edi
c00016f4:	77 13                	ja     c0001709 <dlrealloc+0xc1>
c00016f6:	8b 59 08             	mov    ebx,DWORD PTR [ecx+0x8]
c00016f9:	8b 41 0c             	mov    eax,DWORD PTR [ecx+0xc]
c00016fc:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c00016ff:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
c0001702:	89 fb                	mov    ebx,edi
c0001704:	e9 9a 00 00 00       	jmp    c00017a3 <dlrealloc+0x15b>
c0001709:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000170d:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0001711:	8d 45 f9             	lea    eax,[ebp-0x7]
c0001714:	83 ec 0c             	sub    esp,0xc
c0001717:	50                   	push   eax
c0001718:	e8 ee f9 ff ff       	call   c000110b <dlmalloc>
c000171d:	83 c4 10             	add    esp,0x10
c0001720:	89 c7                	mov    edi,eax
c0001722:	85 c0                	test   eax,eax
c0001724:	0f 84 46 ff ff ff    	je     c0001670 <dlrealloc+0x28>
c000172a:	8d 40 f8             	lea    eax,[eax-0x8]
c000172d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0001731:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0001735:	39 c1                	cmp    ecx,eax
c0001737:	75 0a                	jne    c0001743 <dlrealloc+0xfb>
c0001739:	8b 47 fc             	mov    eax,DWORD PTR [edi-0x4]
c000173c:	83 e0 fc             	and    eax,0xfffffffc
c000173f:	01 c3                	add    ebx,eax
c0001741:	eb 60                	jmp    c00017a3 <dlrealloc+0x15b>
c0001743:	8d 4b fc             	lea    ecx,[ebx-0x4]
c0001746:	83 f9 27             	cmp    ecx,0x27
c0001749:	76 05                	jbe    c0001750 <dlrealloc+0x108>
c000174b:	fc                   	cld    
c000174c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000174e:	eb 43                	jmp    c0001793 <dlrealloc+0x14b>
c0001750:	8b 06                	mov    eax,DWORD PTR [esi]
c0001752:	83 f9 13             	cmp    ecx,0x13
c0001755:	89 07                	mov    DWORD PTR [edi],eax
c0001757:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000175a:	89 47 04             	mov    DWORD PTR [edi+0x4],eax
c000175d:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c0001760:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c0001763:	76 2e                	jbe    c0001793 <dlrealloc+0x14b>
c0001765:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0001768:	83 f9 1b             	cmp    ecx,0x1b
c000176b:	89 47 0c             	mov    DWORD PTR [edi+0xc],eax
c000176e:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0001771:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c0001774:	76 1d                	jbe    c0001793 <dlrealloc+0x14b>
c0001776:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0001779:	83 f9 23             	cmp    ecx,0x23
c000177c:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000177f:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0001782:	89 47 18             	mov    DWORD PTR [edi+0x18],eax
c0001785:	76 0c                	jbe    c0001793 <dlrealloc+0x14b>
c0001787:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000178a:	89 47 1c             	mov    DWORD PTR [edi+0x1c],eax
c000178d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0001790:	89 47 20             	mov    DWORD PTR [edi+0x20],eax
c0001793:	83 ec 0c             	sub    esp,0xc
c0001796:	56                   	push   esi
c0001797:	89 fe                	mov    esi,edi
c0001799:	e8 12 f6 ff ff       	call   c0000db0 <dlfree>
c000179e:	83 c4 10             	add    esp,0x10
c00017a1:	eb 3d                	jmp    c00017e0 <dlrealloc+0x198>
c00017a3:	89 df                	mov    edi,ebx
c00017a5:	8b 4e fc             	mov    ecx,DWORD PTR [esi-0x4]
c00017a8:	29 ef                	sub    edi,ebp
c00017aa:	83 e1 01             	and    ecx,0x1
c00017ad:	8d 04 1a             	lea    eax,[edx+ebx*1]
c00017b0:	83 ff 0f             	cmp    edi,0xf
c00017b3:	77 0b                	ja     c00017c0 <dlrealloc+0x178>
c00017b5:	09 cb                	or     ebx,ecx
c00017b7:	89 5e fc             	mov    DWORD PTR [esi-0x4],ebx
c00017ba:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017be:	eb 20                	jmp    c00017e0 <dlrealloc+0x198>
c00017c0:	01 ea                	add    edx,ebp
c00017c2:	83 ec 0c             	sub    esp,0xc
c00017c5:	09 cd                	or     ebp,ecx
c00017c7:	83 c2 08             	add    edx,0x8
c00017ca:	89 6e fc             	mov    DWORD PTR [esi-0x4],ebp
c00017cd:	83 cf 01             	or     edi,0x1
c00017d0:	89 7a fc             	mov    DWORD PTR [edx-0x4],edi
c00017d3:	83 48 04 01          	or     DWORD PTR [eax+0x4],0x1
c00017d7:	52                   	push   edx
c00017d8:	e8 d3 f5 ff ff       	call   c0000db0 <dlfree>
c00017dd:	83 c4 10             	add    esp,0x10
c00017e0:	83 c4 1c             	add    esp,0x1c
c00017e3:	89 f0                	mov    eax,esi
c00017e5:	5b                   	pop    ebx
c00017e6:	5e                   	pop    esi
c00017e7:	5f                   	pop    edi
c00017e8:	5d                   	pop    ebp
c00017e9:	c3                   	ret    

c00017ea <dlmemalign>:
c00017ea:	55                   	push   ebp
c00017eb:	57                   	push   edi
c00017ec:	56                   	push   esi
c00017ed:	53                   	push   ebx
c00017ee:	83 ec 0c             	sub    esp,0xc
c00017f1:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00017f5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00017f9:	83 fa 08             	cmp    edx,0x8
c00017fc:	77 10                	ja     c000180e <dlmemalign+0x24>
c00017fe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0001802:	83 c4 0c             	add    esp,0xc
c0001805:	5b                   	pop    ebx
c0001806:	5e                   	pop    esi
c0001807:	5f                   	pop    edi
c0001808:	5d                   	pop    ebp
c0001809:	e9 fd f8 ff ff       	jmp    c000110b <dlmalloc>
c000180e:	bf 10 00 00 00       	mov    edi,0x10
c0001813:	83 fa 0f             	cmp    edx,0xf
c0001816:	76 13                	jbe    c000182b <dlmemalign+0x41>
c0001818:	8d 4a ff             	lea    ecx,[edx-0x1]
c000181b:	85 d1                	test   ecx,edx
c000181d:	75 04                	jne    c0001823 <dlmemalign+0x39>
c000181f:	89 d7                	mov    edi,edx
c0001821:	eb 08                	jmp    c000182b <dlmemalign+0x41>
c0001823:	39 d7                	cmp    edi,edx
c0001825:	73 04                	jae    c000182b <dlmemalign+0x41>
c0001827:	01 ff                	add    edi,edi
c0001829:	eb f8                	jmp    c0001823 <dlmemalign+0x39>
c000182b:	83 f8 df             	cmp    eax,0xffffffdf
c000182e:	76 07                	jbe    c0001837 <dlmemalign+0x4d>
c0001830:	31 c0                	xor    eax,eax
c0001832:	e9 ce 00 00 00       	jmp    c0001905 <dlmemalign+0x11b>
c0001837:	83 c0 0b             	add    eax,0xb
c000183a:	bd 10 00 00 00       	mov    ebp,0x10
c000183f:	83 f8 0f             	cmp    eax,0xf
c0001842:	76 05                	jbe    c0001849 <dlmemalign+0x5f>
c0001844:	83 e0 f8             	and    eax,0xfffffff8
c0001847:	89 c5                	mov    ebp,eax
c0001849:	83 ec 0c             	sub    esp,0xc
c000184c:	8d 44 2f 10          	lea    eax,[edi+ebp*1+0x10]
c0001850:	50                   	push   eax
c0001851:	e8 b5 f8 ff ff       	call   c000110b <dlmalloc>
c0001856:	83 c4 10             	add    esp,0x10
c0001859:	89 c1                	mov    ecx,eax
c000185b:	85 c0                	test   eax,eax
c000185d:	74 d1                	je     c0001830 <dlmemalign+0x46>
c000185f:	31 d2                	xor    edx,edx
c0001861:	8d 70 f8             	lea    esi,[eax-0x8]
c0001864:	f7 f7                	div    edi
c0001866:	85 d2                	test   edx,edx
c0001868:	74 62                	je     c00018cc <dlmemalign+0xe2>
c000186a:	8d 5c 39 ff          	lea    ebx,[ecx+edi*1-0x1]
c000186e:	89 f8                	mov    eax,edi
c0001870:	f7 d8                	neg    eax
c0001872:	21 c3                	and    ebx,eax
c0001874:	83 eb 08             	sub    ebx,0x8
c0001877:	89 d8                	mov    eax,ebx
c0001879:	29 f0                	sub    eax,esi
c000187b:	83 f8 0f             	cmp    eax,0xf
c000187e:	77 02                	ja     c0001882 <dlmemalign+0x98>
c0001880:	01 fb                	add    ebx,edi
c0001882:	89 d8                	mov    eax,ebx
c0001884:	29 f0                	sub    eax,esi
c0001886:	89 c6                	mov    esi,eax
c0001888:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c000188b:	89 c2                	mov    edx,eax
c000188d:	83 e2 fc             	and    edx,0xfffffffc
c0001890:	29 f2                	sub    edx,esi
c0001892:	a8 02                	test   al,0x2
c0001894:	74 10                	je     c00018a6 <dlmemalign+0xbc>
c0001896:	03 71 f8             	add    esi,DWORD PTR [ecx-0x8]
c0001899:	83 ca 02             	or     edx,0x2
c000189c:	8d 43 08             	lea    eax,[ebx+0x8]
c000189f:	89 33                	mov    DWORD PTR [ebx],esi
c00018a1:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c00018a4:	eb 5f                	jmp    c0001905 <dlmemalign+0x11b>
c00018a6:	83 ec 0c             	sub    esp,0xc
c00018a9:	89 d0                	mov    eax,edx
c00018ab:	83 c8 01             	or     eax,0x1
c00018ae:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c00018b1:	83 4c 13 04 01       	or     DWORD PTR [ebx+edx*1+0x4],0x1
c00018b6:	8b 41 fc             	mov    eax,DWORD PTR [ecx-0x4]
c00018b9:	83 e0 01             	and    eax,0x1
c00018bc:	09 f0                	or     eax,esi
c00018be:	89 de                	mov    esi,ebx
c00018c0:	89 41 fc             	mov    DWORD PTR [ecx-0x4],eax
c00018c3:	51                   	push   ecx
c00018c4:	e8 e7 f4 ff ff       	call   c0000db0 <dlfree>
c00018c9:	83 c4 10             	add    esp,0x10
c00018cc:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018cf:	a8 02                	test   al,0x2
c00018d1:	75 2f                	jne    c0001902 <dlmemalign+0x118>
c00018d3:	83 e0 fc             	and    eax,0xfffffffc
c00018d6:	8d 55 10             	lea    edx,[ebp+0x10]
c00018d9:	39 c2                	cmp    edx,eax
c00018db:	73 25                	jae    c0001902 <dlmemalign+0x118>
c00018dd:	8d 14 2e             	lea    edx,[esi+ebp*1]
c00018e0:	83 ec 0c             	sub    esp,0xc
c00018e3:	29 e8                	sub    eax,ebp
c00018e5:	83 c2 08             	add    edx,0x8
c00018e8:	83 c8 01             	or     eax,0x1
c00018eb:	89 42 fc             	mov    DWORD PTR [edx-0x4],eax
c00018ee:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00018f1:	83 e0 01             	and    eax,0x1
c00018f4:	09 c5                	or     ebp,eax
c00018f6:	89 6e 04             	mov    DWORD PTR [esi+0x4],ebp
c00018f9:	52                   	push   edx
c00018fa:	e8 b1 f4 ff ff       	call   c0000db0 <dlfree>
c00018ff:	83 c4 10             	add    esp,0x10
c0001902:	8d 46 08             	lea    eax,[esi+0x8]
c0001905:	83 c4 0c             	add    esp,0xc
c0001908:	5b                   	pop    ebx
c0001909:	5e                   	pop    esi
c000190a:	5f                   	pop    edi
c000190b:	5d                   	pop    ebp
c000190c:	c3                   	ret    

c000190d <dlcalloc>:
c000190d:	53                   	push   ebx
c000190e:	83 ec 14             	sub    esp,0x14
c0001911:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0001915:	0f af 44 24 1c       	imul   eax,DWORD PTR [esp+0x1c]
c000191a:	50                   	push   eax
c000191b:	e8 eb f7 ff ff       	call   c000110b <dlmalloc>
c0001920:	83 c4 10             	add    esp,0x10
c0001923:	89 c3                	mov    ebx,eax
c0001925:	85 c0                	test   eax,eax
c0001927:	74 77                	je     c00019a0 <dlcalloc+0x93>
c0001929:	8b 50 fc             	mov    edx,DWORD PTR [eax-0x4]
c000192c:	89 d0                	mov    eax,edx
c000192e:	83 e0 fc             	and    eax,0xfffffffc
c0001931:	80 e2 02             	and    dl,0x2
c0001934:	75 5a                	jne    c0001990 <dlcalloc+0x83>
c0001936:	83 e8 04             	sub    eax,0x4
c0001939:	83 f8 27             	cmp    eax,0x27
c000193c:	76 03                	jbe    c0001941 <dlcalloc+0x34>
c000193e:	51                   	push   ecx
c000193f:	eb 53                	jmp    c0001994 <dlcalloc+0x87>
c0001941:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0001947:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c000194e:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0001955:	83 f8 13             	cmp    eax,0x13
c0001958:	76 46                	jbe    c00019a0 <dlcalloc+0x93>
c000195a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0001961:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0001968:	83 f8 1b             	cmp    eax,0x1b
c000196b:	76 33                	jbe    c00019a0 <dlcalloc+0x93>
c000196d:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0001974:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000197b:	83 f8 23             	cmp    eax,0x23
c000197e:	76 20                	jbe    c00019a0 <dlcalloc+0x93>
c0001980:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c0001987:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c000198e:	eb 10                	jmp    c00019a0 <dlcalloc+0x93>
c0001990:	83 e8 08             	sub    eax,0x8
c0001993:	52                   	push   edx
c0001994:	50                   	push   eax
c0001995:	6a 00                	push   0x0
c0001997:	53                   	push   ebx
c0001998:	e8 cf ed ff ff       	call   c000076c <memset>
c000199d:	83 c4 10             	add    esp,0x10
c00019a0:	89 d8                	mov    eax,ebx
c00019a2:	83 c4 08             	add    esp,0x8
c00019a5:	5b                   	pop    ebx
c00019a6:	c3                   	ret    

c00019a7 <dlcfree>:
c00019a7:	e9 04 f4 ff ff       	jmp    c0000db0 <dlfree>

c00019ac <dlindependent_calloc>:
c00019ac:	83 ec 28             	sub    esp,0x28
c00019af:	b9 03 00 00 00       	mov    ecx,0x3
c00019b4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019b8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00019bc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00019c0:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00019c4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00019c8:	e8 cc fa ff ff       	call   c0001499 <iALLOc>
c00019cd:	83 c4 2c             	add    esp,0x2c
c00019d0:	c3                   	ret    

c00019d1 <dlindependent_comalloc>:
c00019d1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00019d5:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00019d9:	31 c9                	xor    ecx,ecx
c00019db:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00019df:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00019e3:	e9 b1 fa ff ff       	jmp    c0001499 <iALLOc>

c00019e8 <dlvalloc>:
c00019e8:	83 ec 0c             	sub    esp,0xc
c00019eb:	83 3d 40 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea40,0x0
c00019f2:	75 0a                	jne    c00019fe <dlvalloc+0x16>
c00019f4:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c00019f9:	e8 cb f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c00019fe:	50                   	push   eax
c00019ff:	50                   	push   eax
c0001a00:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0001a04:	ff 35 9c ed 02 c0    	push   DWORD PTR ds:0xc002ed9c
c0001a0a:	e8 db fd ff ff       	call   c00017ea <dlmemalign>
c0001a0f:	83 c4 1c             	add    esp,0x1c
c0001a12:	c3                   	ret    

c0001a13 <dlpvalloc>:
c0001a13:	83 ec 0c             	sub    esp,0xc
c0001a16:	83 3d 40 ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea40,0x0
c0001a1d:	75 0a                	jne    c0001a29 <dlpvalloc+0x16>
c0001a1f:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c0001a24:	e8 a0 f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001a29:	a1 9c ed 02 c0       	mov    eax,ds:0xc002ed9c
c0001a2e:	89 c1                	mov    ecx,eax
c0001a30:	52                   	push   edx
c0001a31:	f7 d9                	neg    ecx
c0001a33:	52                   	push   edx
c0001a34:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0001a38:	8d 54 10 ff          	lea    edx,[eax+edx*1-0x1]
c0001a3c:	21 ca                	and    edx,ecx
c0001a3e:	52                   	push   edx
c0001a3f:	50                   	push   eax
c0001a40:	e8 a5 fd ff ff       	call   c00017ea <dlmemalign>
c0001a45:	83 c4 1c             	add    esp,0x1c
c0001a48:	c3                   	ret    

c0001a49 <dlmalloc_trim>:
c0001a49:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c0001a4e:	e8 76 f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001a53:	31 c0                	xor    eax,eax
c0001a55:	c3                   	ret    

c0001a56 <dlmalloc_usable_size>:
c0001a56:	53                   	push   ebx
c0001a57:	31 c0                	xor    eax,eax
c0001a59:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0001a5d:	85 c9                	test   ecx,ecx
c0001a5f:	74 24                	je     c0001a85 <dlmalloc_usable_size+0x2f>
c0001a61:	8b 51 fc             	mov    edx,DWORD PTR [ecx-0x4]
c0001a64:	f6 c2 02             	test   dl,0x2
c0001a67:	74 08                	je     c0001a71 <dlmalloc_usable_size+0x1b>
c0001a69:	83 e2 fc             	and    edx,0xfffffffc
c0001a6c:	8d 42 f8             	lea    eax,[edx-0x8]
c0001a6f:	eb 14                	jmp    c0001a85 <dlmalloc_usable_size+0x2f>
c0001a71:	89 d3                	mov    ebx,edx
c0001a73:	31 c0                	xor    eax,eax
c0001a75:	83 e3 fe             	and    ebx,0xfffffffe
c0001a78:	f6 44 19 fc 01       	test   BYTE PTR [ecx+ebx*1-0x4],0x1
c0001a7d:	74 06                	je     c0001a85 <dlmalloc_usable_size+0x2f>
c0001a7f:	83 e2 fc             	and    edx,0xfffffffc
c0001a82:	8d 42 fc             	lea    eax,[edx-0x4]
c0001a85:	5b                   	pop    ebx
c0001a86:	c3                   	ret    

c0001a87 <dlmallinfo>:
c0001a87:	55                   	push   ebp
c0001a88:	57                   	push   edi
c0001a89:	56                   	push   esi
c0001a8a:	53                   	push   ebx
c0001a8b:	83 ec 08             	sub    esp,0x8
c0001a8e:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0001a92:	83 3d 6c ea 02 c0 00 	cmp    DWORD PTR ds:0xc002ea6c,0x0
c0001a99:	75 0a                	jne    c0001aa5 <dlmallinfo+0x1e>
c0001a9b:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c0001aa0:	e8 24 f2 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001aa5:	a1 6c ea 02 c0       	mov    eax,ds:0xc002ea6c
c0001aaa:	31 ed                	xor    ebp,ebp
c0001aac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0001aaf:	31 c9                	xor    ecx,ecx
c0001ab1:	83 e0 fc             	and    eax,0xfffffffc
c0001ab4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001ab8:	31 c0                	xor    eax,eax
c0001aba:	8b 14 85 44 ea 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd15bc]
c0001ac1:	85 d2                	test   edx,edx
c0001ac3:	74 0e                	je     c0001ad3 <dlmallinfo+0x4c>
c0001ac5:	8b 72 04             	mov    esi,DWORD PTR [edx+0x4]
c0001ac8:	45                   	inc    ebp
c0001ac9:	83 e6 fc             	and    esi,0xfffffffc
c0001acc:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0001acf:	01 f1                	add    ecx,esi
c0001ad1:	eb ee                	jmp    c0001ac1 <dlmallinfo+0x3a>
c0001ad3:	40                   	inc    eax
c0001ad4:	83 f8 0a             	cmp    eax,0xa
c0001ad7:	75 e1                	jne    c0001aba <dlmallinfo+0x33>
c0001ad9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001add:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0001ae4:	8d 14 01             	lea    edx,[ecx+eax*1]
c0001ae7:	b8 74 ea 02 c0       	mov    eax,0xc002ea74
c0001aec:	8b 70 0c             	mov    esi,DWORD PTR [eax+0xc]
c0001aef:	39 f0                	cmp    eax,esi
c0001af1:	74 10                	je     c0001b03 <dlmallinfo+0x7c>
c0001af3:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0001af6:	ff 04 24             	inc    DWORD PTR [esp]
c0001af9:	83 e7 fc             	and    edi,0xfffffffc
c0001afc:	8b 76 0c             	mov    esi,DWORD PTR [esi+0xc]
c0001aff:	01 fa                	add    edx,edi
c0001b01:	eb ec                	jmp    c0001aef <dlmallinfo+0x68>
c0001b03:	83 c0 08             	add    eax,0x8
c0001b06:	3d 6c ed 02 c0       	cmp    eax,0xc002ed6c
c0001b0b:	75 df                	jne    c0001aec <dlmallinfo+0x65>
c0001b0d:	89 6b 08             	mov    DWORD PTR [ebx+0x8],ebp
c0001b10:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0001b13:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c0001b16:	a1 a8 ed 02 c0       	mov    eax,ds:0xc002eda8
c0001b1b:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0001b1e:	89 03                	mov    DWORD PTR [ebx],eax
c0001b20:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0001b23:	8b 35 90 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002ed90
c0001b29:	29 d0                	sub    eax,edx
c0001b2b:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0001b2e:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0001b31:	8b 35 a4 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002eda4
c0001b37:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0001b3b:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c0001b3e:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0001b41:	8b 35 b4 ed 02 c0    	mov    esi,DWORD PTR ds:0xc002edb4
c0001b47:	89 d8                	mov    eax,ebx
c0001b49:	89 73 14             	mov    DWORD PTR [ebx+0x14],esi
c0001b4c:	83 c4 08             	add    esp,0x8
c0001b4f:	5b                   	pop    ebx
c0001b50:	5e                   	pop    esi
c0001b51:	5f                   	pop    edi
c0001b52:	5d                   	pop    ebp
c0001b53:	c2 04 00             	ret    0x4

c0001b56 <dlmalloc_stats>:
c0001b56:	83 ec 30             	sub    esp,0x30
c0001b59:	8d 44 24 08          	lea    eax,[esp+0x8]
c0001b5d:	50                   	push   eax
c0001b5e:	e8 24 ff ff ff       	call   c0001a87 <dlmallinfo>
c0001b63:	83 c4 30             	add    esp,0x30
c0001b66:	c3                   	ret    

c0001b67 <dlmallopt>:
c0001b67:	56                   	push   esi
c0001b68:	b8 40 ea 02 c0       	mov    eax,0xc002ea40
c0001b6d:	53                   	push   ebx
c0001b6e:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0001b72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0001b76:	e8 4e f1 ff ff       	call   c0000cc9 <malloc_consolidate>
c0001b7b:	8d 46 04             	lea    eax,[esi+0x4]
c0001b7e:	83 f8 05             	cmp    eax,0x5
c0001b81:	77 67                	ja     c0001bea <dlmallopt+0x83>
c0001b83:	ff 24 85 24 9c 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd63dc]
c0001b8a:	83 fb 50             	cmp    ebx,0x50
c0001b8d:	77 5b                	ja     c0001bea <dlmallopt+0x83>
c0001b8f:	ba 08 00 00 00       	mov    edx,0x8
c0001b94:	85 db                	test   ebx,ebx
c0001b96:	74 12                	je     c0001baa <dlmallopt+0x43>
c0001b98:	83 c3 0b             	add    ebx,0xb
c0001b9b:	ba 10 00 00 00       	mov    edx,0x10
c0001ba0:	83 fb 0f             	cmp    ebx,0xf
c0001ba3:	76 05                	jbe    c0001baa <dlmallopt+0x43>
c0001ba5:	89 da                	mov    edx,ebx
c0001ba7:	83 e2 f8             	and    edx,0xfffffff8
c0001baa:	a1 40 ea 02 c0       	mov    eax,ds:0xc002ea40
c0001baf:	83 e0 03             	and    eax,0x3
c0001bb2:	09 d0                	or     eax,edx
c0001bb4:	a3 40 ea 02 c0       	mov    ds:0xc002ea40,eax
c0001bb9:	eb 31                	jmp    c0001bec <dlmallopt+0x85>
c0001bbb:	89 1d 84 ed 02 c0    	mov    DWORD PTR ds:0xc002ed84,ebx
c0001bc1:	eb 06                	jmp    c0001bc9 <dlmallopt+0x62>
c0001bc3:	89 1d 88 ed 02 c0    	mov    DWORD PTR ds:0xc002ed88,ebx
c0001bc9:	be 01 00 00 00       	mov    esi,0x1
c0001bce:	eb 1c                	jmp    c0001bec <dlmallopt+0x85>
c0001bd0:	89 1d 8c ed 02 c0    	mov    DWORD PTR ds:0xc002ed8c,ebx
c0001bd6:	eb f1                	jmp    c0001bc9 <dlmallopt+0x62>
c0001bd8:	31 f6                	xor    esi,esi
c0001bda:	85 db                	test   ebx,ebx
c0001bdc:	75 0e                	jne    c0001bec <dlmallopt+0x85>
c0001bde:	c7 05 94 ed 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ed94,0x0
c0001be8:	eb df                	jmp    c0001bc9 <dlmallopt+0x62>
c0001bea:	31 f6                	xor    esi,esi
c0001bec:	89 f0                	mov    eax,esi
c0001bee:	5b                   	pop    ebx
c0001bef:	5e                   	pop    esi
c0001bf0:	c3                   	ret    

c0001bf1 <disk_status>:
c0001bf1:	31 c0                	xor    eax,eax
c0001bf3:	c3                   	ret    

c0001bf4 <disk_initialize>:
c0001bf4:	31 c0                	xor    eax,eax
c0001bf6:	c3                   	ret    

c0001bf7 <disk_read>:
c0001bf7:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001bfc:	0f b6 04 85 20 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdae0]
c0001c04:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c08:	e9 09 f9 01 00       	jmp    c0021516 <fatWrapperReadDisk>

c0001c0d <disk_write>:
c0001c0d:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c12:	0f b6 04 85 20 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdae0]
c0001c1a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c1e:	e9 3a f9 01 00       	jmp    c002155d <fatWrapperWriteDisk>

c0001c23 <disk_ioctl>:
c0001c23:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0001c28:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0001c2c:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c0001c31:	0f b6 04 85 20 25 03 c0 	movzx  eax,BYTE PTR [eax*4-0x3ffcdae0]
c0001c39:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0001c3d:	e9 62 f9 01 00       	jmp    c00215a4 <fatWrapperIoctl>

c0001c42 <ld_word>:
c0001c42:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c46:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c49:	c1 e2 08             	shl    edx,0x8
c0001c4c:	09 d0                	or     eax,edx
c0001c4e:	c3                   	ret    

c0001c4f <ld_dword>:
c0001c4f:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
c0001c53:	89 d1                	mov    ecx,edx
c0001c55:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c59:	c1 e1 08             	shl    ecx,0x8
c0001c5c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c5f:	09 ca                	or     edx,ecx
c0001c61:	c1 e2 08             	shl    edx,0x8
c0001c64:	09 d0                	or     eax,edx
c0001c66:	c3                   	ret    

c0001c67 <ld_qword>:
c0001c67:	57                   	push   edi
c0001c68:	56                   	push   esi
c0001c69:	53                   	push   ebx
c0001c6a:	31 db                	xor    ebx,ebx
c0001c6c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
c0001c6f:	89 df                	mov    edi,ebx
c0001c71:	89 ce                	mov    esi,ecx
c0001c73:	0f b6 50 03          	movzx  edx,BYTE PTR [eax+0x3]
c0001c77:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c7b:	c1 e6 08             	shl    esi,0x8
c0001c7e:	09 f2                	or     edx,esi
c0001c80:	89 d6                	mov    esi,edx
c0001c82:	0f b6 50 02          	movzx  edx,BYTE PTR [eax+0x2]
c0001c86:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c8a:	c1 e6 08             	shl    esi,0x8
c0001c8d:	09 f2                	or     edx,esi
c0001c8f:	89 d6                	mov    esi,edx
c0001c91:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0001c95:	0f a4 f7 08          	shld   edi,esi,0x8
c0001c99:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c0001c9c:	c1 e6 08             	shl    esi,0x8
c0001c9f:	89 fb                	mov    ebx,edi
c0001ca1:	09 f2                	or     edx,esi
c0001ca3:	89 d1                	mov    ecx,edx
c0001ca5:	0f a4 cb 08          	shld   ebx,ecx,0x8
c0001ca9:	c1 e1 08             	shl    ecx,0x8
c0001cac:	89 da                	mov    edx,ebx
c0001cae:	09 c8                	or     eax,ecx
c0001cb0:	5b                   	pop    ebx
c0001cb1:	5e                   	pop    esi
c0001cb2:	5f                   	pop    edi
c0001cb3:	c3                   	ret    

c0001cb4 <st_word>:
c0001cb4:	66 89 10             	mov    WORD PTR [eax],dx
c0001cb7:	c3                   	ret    

c0001cb8 <st_dword>:
c0001cb8:	89 10                	mov    DWORD PTR [eax],edx
c0001cba:	c3                   	ret    

c0001cbb <st_qword>:
c0001cbb:	89 10                	mov    DWORD PTR [eax],edx
c0001cbd:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0001cc0:	c3                   	ret    

c0001cc1 <mem_cpy>:
c0001cc1:	85 c9                	test   ecx,ecx
c0001cc3:	74 10                	je     c0001cd5 <mem_cpy+0x14>
c0001cc5:	57                   	push   edi
c0001cc6:	01 c1                	add    ecx,eax
c0001cc8:	56                   	push   esi
c0001cc9:	89 c7                	mov    edi,eax
c0001ccb:	89 d6                	mov    esi,edx
c0001ccd:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0001cce:	39 f9                	cmp    ecx,edi
c0001cd0:	75 fb                	jne    c0001ccd <mem_cpy+0xc>
c0001cd2:	5e                   	pop    esi
c0001cd3:	5f                   	pop    edi
c0001cd4:	c3                   	ret    
c0001cd5:	c3                   	ret    

c0001cd6 <mem_set>:
c0001cd6:	01 c1                	add    ecx,eax
c0001cd8:	40                   	inc    eax
c0001cd9:	88 50 ff             	mov    BYTE PTR [eax-0x1],dl
c0001cdc:	39 c8                	cmp    eax,ecx
c0001cde:	75 f8                	jne    c0001cd8 <mem_set+0x2>
c0001ce0:	c3                   	ret    

c0001ce1 <mem_cmp>:
c0001ce1:	57                   	push   edi
c0001ce2:	56                   	push   esi
c0001ce3:	89 c6                	mov    esi,eax
c0001ce5:	53                   	push   ebx
c0001ce6:	46                   	inc    esi
c0001ce7:	42                   	inc    edx
c0001ce8:	0f b6 5e ff          	movzx  ebx,BYTE PTR [esi-0x1]
c0001cec:	0f b6 7a ff          	movzx  edi,BYTE PTR [edx-0x1]
c0001cf0:	29 fb                	sub    ebx,edi
c0001cf2:	89 cf                	mov    edi,ecx
c0001cf4:	29 f7                	sub    edi,esi
c0001cf6:	01 c7                	add    edi,eax
c0001cf8:	74 04                	je     c0001cfe <mem_cmp+0x1d>
c0001cfa:	85 db                	test   ebx,ebx
c0001cfc:	74 e8                	je     c0001ce6 <mem_cmp+0x5>
c0001cfe:	89 d8                	mov    eax,ebx
c0001d00:	5b                   	pop    ebx
c0001d01:	5e                   	pop    esi
c0001d02:	5f                   	pop    edi
c0001d03:	c3                   	ret    

c0001d04 <chk_chr>:
c0001d04:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0001d07:	0f be 08             	movsx  ecx,BYTE PTR [eax]
c0001d0a:	74 07                	je     c0001d13 <chk_chr+0xf>
c0001d0c:	39 d1                	cmp    ecx,edx
c0001d0e:	74 03                	je     c0001d13 <chk_chr+0xf>
c0001d10:	40                   	inc    eax
c0001d11:	eb f1                	jmp    c0001d04 <chk_chr>
c0001d13:	89 c8                	mov    eax,ecx
c0001d15:	c3                   	ret    

c0001d16 <dbc_1st>:
c0001d16:	31 c0                	xor    eax,eax
c0001d18:	c3                   	ret    

c0001d19 <dbc_2nd>:
c0001d19:	31 c0                	xor    eax,eax
c0001d1b:	c3                   	ret    

c0001d1c <tchar2uni>:
c0001d1c:	57                   	push   edi
c0001d1d:	89 c7                	mov    edi,eax
c0001d1f:	56                   	push   esi
c0001d20:	53                   	push   ebx
c0001d21:	8b 18                	mov    ebx,DWORD PTR [eax]
c0001d23:	8a 0b                	mov    cl,BYTE PTR [ebx]
c0001d25:	8d 73 01             	lea    esi,[ebx+0x1]
c0001d28:	84 c9                	test   cl,cl
c0001d2a:	78 0a                	js     c0001d36 <tchar2uni+0x1a>
c0001d2c:	0f b6 d1             	movzx  edx,cl
c0001d2f:	89 f3                	mov    ebx,esi
c0001d31:	e9 9f 00 00 00       	jmp    c0001dd5 <tchar2uni+0xb9>
c0001d36:	88 ca                	mov    dl,cl
c0001d38:	83 e2 e0             	and    edx,0xffffffe0
c0001d3b:	80 fa c0             	cmp    dl,0xc0
c0001d3e:	75 0c                	jne    c0001d4c <tchar2uni+0x30>
c0001d40:	89 ca                	mov    edx,ecx
c0001d42:	b9 01 00 00 00       	mov    ecx,0x1
c0001d47:	83 e2 1f             	and    edx,0x1f
c0001d4a:	eb 2e                	jmp    c0001d7a <tchar2uni+0x5e>
c0001d4c:	88 ca                	mov    dl,cl
c0001d4e:	83 e2 f0             	and    edx,0xfffffff0
c0001d51:	80 fa e0             	cmp    dl,0xe0
c0001d54:	75 0c                	jne    c0001d62 <tchar2uni+0x46>
c0001d56:	89 ca                	mov    edx,ecx
c0001d58:	b9 02 00 00 00       	mov    ecx,0x2
c0001d5d:	83 e2 0f             	and    edx,0xf
c0001d60:	eb 18                	jmp    c0001d7a <tchar2uni+0x5e>
c0001d62:	88 ca                	mov    dl,cl
c0001d64:	83 e2 f8             	and    edx,0xfffffff8
c0001d67:	88 d0                	mov    al,dl
c0001d69:	83 ca ff             	or     edx,0xffffffff
c0001d6c:	3c f0                	cmp    al,0xf0
c0001d6e:	75 6c                	jne    c0001ddc <tchar2uni+0xc0>
c0001d70:	89 ca                	mov    edx,ecx
c0001d72:	b9 03 00 00 00       	mov    ecx,0x3
c0001d77:	83 e2 07             	and    edx,0x7
c0001d7a:	8d 5c 0b 01          	lea    ebx,[ebx+ecx*1+0x1]
c0001d7e:	46                   	inc    esi
c0001d7f:	8a 4e ff             	mov    cl,BYTE PTR [esi-0x1]
c0001d82:	88 c8                	mov    al,cl
c0001d84:	83 e0 c0             	and    eax,0xffffffc0
c0001d87:	3c 80                	cmp    al,0x80
c0001d89:	75 4e                	jne    c0001dd9 <tchar2uni+0xbd>
c0001d8b:	c1 e2 06             	shl    edx,0x6
c0001d8e:	83 e1 3f             	and    ecx,0x3f
c0001d91:	09 ca                	or     edx,ecx
c0001d93:	39 de                	cmp    esi,ebx
c0001d95:	75 e7                	jne    c0001d7e <tchar2uni+0x62>
c0001d97:	8d 4a 80             	lea    ecx,[edx-0x80]
c0001d9a:	81 f9 7f ff 10 00    	cmp    ecx,0x10ff7f
c0001da0:	77 37                	ja     c0001dd9 <tchar2uni+0xbd>
c0001da2:	8d 8a 00 28 ff ff    	lea    ecx,[edx-0xd800]
c0001da8:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001dae:	76 29                	jbe    c0001dd9 <tchar2uni+0xbd>
c0001db0:	81 fa ff ff 00 00    	cmp    edx,0xffff
c0001db6:	76 1d                	jbe    c0001dd5 <tchar2uni+0xb9>
c0001db8:	8d 8a 00 00 ff ff    	lea    ecx,[edx-0x10000]
c0001dbe:	81 e2 ff 03 00 00    	and    edx,0x3ff
c0001dc4:	c1 e1 06             	shl    ecx,0x6
c0001dc7:	81 e1 00 00 ff 03    	and    ecx,0x3ff0000
c0001dcd:	09 ca                	or     edx,ecx
c0001dcf:	81 ca 00 dc 00 d8    	or     edx,0xd800dc00
c0001dd5:	89 1f                	mov    DWORD PTR [edi],ebx
c0001dd7:	eb 03                	jmp    c0001ddc <tchar2uni+0xc0>
c0001dd9:	83 ca ff             	or     edx,0xffffffff
c0001ddc:	5b                   	pop    ebx
c0001ddd:	89 d0                	mov    eax,edx
c0001ddf:	5e                   	pop    esi
c0001de0:	5f                   	pop    edi
c0001de1:	c3                   	ret    

c0001de2 <put_utf>:
c0001de2:	53                   	push   ebx
c0001de3:	83 f8 7f             	cmp    eax,0x7f
c0001de6:	89 c3                	mov    ebx,eax
c0001de8:	b0 00                	mov    al,0x0
c0001dea:	77 11                	ja     c0001dfd <put_utf+0x1b>
c0001dec:	85 c9                	test   ecx,ecx
c0001dee:	0f 84 e5 00 00 00    	je     c0001ed9 <put_utf+0xf7>
c0001df4:	88 1a                	mov    BYTE PTR [edx],bl
c0001df6:	b0 01                	mov    al,0x1
c0001df8:	e9 dc 00 00 00       	jmp    c0001ed9 <put_utf+0xf7>
c0001dfd:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0001e03:	77 23                	ja     c0001e28 <put_utf+0x46>
c0001e05:	83 f9 01             	cmp    ecx,0x1
c0001e08:	0f 86 cb 00 00 00    	jbe    c0001ed9 <put_utf+0xf7>
c0001e0e:	89 d8                	mov    eax,ebx
c0001e10:	83 e3 3f             	and    ebx,0x3f
c0001e13:	c1 e8 06             	shr    eax,0x6
c0001e16:	83 cb 80             	or     ebx,0xffffff80
c0001e19:	83 c8 c0             	or     eax,0xffffffc0
c0001e1c:	88 5a 01             	mov    BYTE PTR [edx+0x1],bl
c0001e1f:	88 02                	mov    BYTE PTR [edx],al
c0001e21:	b0 02                	mov    al,0x2
c0001e23:	e9 b1 00 00 00       	jmp    c0001ed9 <put_utf+0xf7>
c0001e28:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c0001e2e:	77 40                	ja     c0001e70 <put_utf+0x8e>
c0001e30:	83 f9 02             	cmp    ecx,0x2
c0001e33:	0f 86 a0 00 00 00    	jbe    c0001ed9 <put_utf+0xf7>
c0001e39:	8d 8b 00 28 ff ff    	lea    ecx,[ebx-0xd800]
c0001e3f:	81 f9 ff 07 00 00    	cmp    ecx,0x7ff
c0001e45:	0f 86 8e 00 00 00    	jbe    c0001ed9 <put_utf+0xf7>
c0001e4b:	89 d8                	mov    eax,ebx
c0001e4d:	c1 e8 0c             	shr    eax,0xc
c0001e50:	83 c8 e0             	or     eax,0xffffffe0
c0001e53:	88 02                	mov    BYTE PTR [edx],al
c0001e55:	89 d8                	mov    eax,ebx
c0001e57:	83 e3 3f             	and    ebx,0x3f
c0001e5a:	c1 e8 06             	shr    eax,0x6
c0001e5d:	83 cb 80             	or     ebx,0xffffff80
c0001e60:	83 e0 3f             	and    eax,0x3f
c0001e63:	88 5a 02             	mov    BYTE PTR [edx+0x2],bl
c0001e66:	83 c8 80             	or     eax,0xffffff80
c0001e69:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001e6c:	b0 03                	mov    al,0x3
c0001e6e:	eb 69                	jmp    c0001ed9 <put_utf+0xf7>
c0001e70:	83 f9 03             	cmp    ecx,0x3
c0001e73:	76 64                	jbe    c0001ed9 <put_utf+0xf7>
c0001e75:	89 d9                	mov    ecx,ebx
c0001e77:	0f b7 c3             	movzx  eax,bx
c0001e7a:	66 31 c9             	xor    cx,cx
c0001e7d:	8d 98 00 24 ff ff    	lea    ebx,[eax-0xdc00]
c0001e83:	81 c1 00 00 00 28    	add    ecx,0x28000000
c0001e89:	c1 e9 06             	shr    ecx,0x6
c0001e8c:	81 fb ff 03 00 00    	cmp    ebx,0x3ff
c0001e92:	77 43                	ja     c0001ed7 <put_utf+0xf5>
c0001e94:	81 f9 ff ff 0f 00    	cmp    ecx,0xfffff
c0001e9a:	77 3b                	ja     c0001ed7 <put_utf+0xf5>
c0001e9c:	09 cb                	or     ebx,ecx
c0001e9e:	81 c3 00 00 01 00    	add    ebx,0x10000
c0001ea4:	89 d8                	mov    eax,ebx
c0001ea6:	c1 e8 12             	shr    eax,0x12
c0001ea9:	83 c8 f0             	or     eax,0xfffffff0
c0001eac:	88 02                	mov    BYTE PTR [edx],al
c0001eae:	89 d8                	mov    eax,ebx
c0001eb0:	c1 e8 0c             	shr    eax,0xc
c0001eb3:	83 e0 3f             	and    eax,0x3f
c0001eb6:	83 c8 80             	or     eax,0xffffff80
c0001eb9:	88 42 01             	mov    BYTE PTR [edx+0x1],al
c0001ebc:	89 d8                	mov    eax,ebx
c0001ebe:	83 e3 3f             	and    ebx,0x3f
c0001ec1:	c1 e8 06             	shr    eax,0x6
c0001ec4:	83 cb 80             	or     ebx,0xffffff80
c0001ec7:	83 e0 3f             	and    eax,0x3f
c0001eca:	88 5a 03             	mov    BYTE PTR [edx+0x3],bl
c0001ecd:	83 c8 80             	or     eax,0xffffff80
c0001ed0:	88 42 02             	mov    BYTE PTR [edx+0x2],al
c0001ed3:	b0 04                	mov    al,0x4
c0001ed5:	eb 02                	jmp    c0001ed9 <put_utf+0xf7>
c0001ed7:	31 c0                	xor    eax,eax
c0001ed9:	5b                   	pop    ebx
c0001eda:	c3                   	ret    

c0001edb <clst2sect>:
c0001edb:	89 c1                	mov    ecx,eax
c0001edd:	83 ea 02             	sub    edx,0x2
c0001ee0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0001ee3:	83 e8 02             	sub    eax,0x2
c0001ee6:	39 d0                	cmp    eax,edx
c0001ee8:	76 0d                	jbe    c0001ef7 <clst2sect+0x1c>
c0001eea:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c0001eee:	f7 e2                	mul    edx
c0001ef0:	03 41 3c             	add    eax,DWORD PTR [ecx+0x3c]
c0001ef3:	13 51 40             	adc    edx,DWORD PTR [ecx+0x40]
c0001ef6:	c3                   	ret    
c0001ef7:	31 c0                	xor    eax,eax
c0001ef9:	31 d2                	xor    edx,edx
c0001efb:	c3                   	ret    

c0001efc <clmt_clust>:
c0001efc:	57                   	push   edi
c0001efd:	89 cf                	mov    edi,ecx
c0001eff:	56                   	push   esi
c0001f00:	89 d6                	mov    esi,edx
c0001f02:	53                   	push   ebx
c0001f03:	0f ac fe 09          	shrd   esi,edi,0x9
c0001f07:	8b 48 4c             	mov    ecx,DWORD PTR [eax+0x4c]
c0001f0a:	89 f2                	mov    edx,esi
c0001f0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0001f0e:	c1 ef 09             	shr    edi,0x9
c0001f11:	0f b7 70 0a          	movzx  esi,WORD PTR [eax+0xa]
c0001f15:	8d 59 04             	lea    ebx,[ecx+0x4]
c0001f18:	89 f9                	mov    ecx,edi
c0001f1a:	31 ff                	xor    edi,edi
c0001f1c:	57                   	push   edi
c0001f1d:	56                   	push   esi
c0001f1e:	51                   	push   ecx
c0001f1f:	52                   	push   edx
c0001f20:	e8 9f 52 02 00       	call   c00271c4 <__udivdi3>
c0001f25:	83 c4 10             	add    esp,0x10
c0001f28:	8b 13                	mov    edx,DWORD PTR [ebx]
c0001f2a:	85 d2                	test   edx,edx
c0001f2c:	74 10                	je     c0001f3e <clmt_clust+0x42>
c0001f2e:	39 d0                	cmp    eax,edx
c0001f30:	72 07                	jb     c0001f39 <clmt_clust+0x3d>
c0001f32:	29 d0                	sub    eax,edx
c0001f34:	83 c3 08             	add    ebx,0x8
c0001f37:	eb ef                	jmp    c0001f28 <clmt_clust+0x2c>
c0001f39:	03 43 04             	add    eax,DWORD PTR [ebx+0x4]
c0001f3c:	89 c2                	mov    edx,eax
c0001f3e:	5b                   	pop    ebx
c0001f3f:	89 d0                	mov    eax,edx
c0001f41:	5e                   	pop    esi
c0001f42:	5f                   	pop    edi
c0001f43:	c3                   	ret    

c0001f44 <pick_lfn>:
c0001f44:	55                   	push   ebp
c0001f45:	57                   	push   edi
c0001f46:	56                   	push   esi
c0001f47:	89 d6                	mov    esi,edx
c0001f49:	53                   	push   ebx
c0001f4a:	89 c3                	mov    ebx,eax
c0001f4c:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001f4f:	e8 ee fc ff ff       	call   c0001c42 <ld_word>
c0001f54:	66 85 c0             	test   ax,ax
c0001f57:	74 04                	je     c0001f5d <pick_lfn+0x19>
c0001f59:	31 c0                	xor    eax,eax
c0001f5b:	eb 5c                	jmp    c0001fb9 <pick_lfn+0x75>
c0001f5d:	0f b6 0e             	movzx  ecx,BYTE PTR [esi]
c0001f60:	bd 01 00 00 00       	mov    ebp,0x1
c0001f65:	83 e1 bf             	and    ecx,0xffffffbf
c0001f68:	31 ff                	xor    edi,edi
c0001f6a:	49                   	dec    ecx
c0001f6b:	6b c9 0d             	imul   ecx,ecx,0xd
c0001f6e:	0f b6 87 40 9d 02 c0 	movzx  eax,BYTE PTR [edi-0x3ffd62c0]
c0001f75:	01 f0                	add    eax,esi
c0001f77:	e8 c6 fc ff ff       	call   c0001c42 <ld_word>
c0001f7c:	66 85 ed             	test   bp,bp
c0001f7f:	74 11                	je     c0001f92 <pick_lfn+0x4e>
c0001f81:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001f87:	77 d0                	ja     c0001f59 <pick_lfn+0x15>
c0001f89:	66 89 04 4b          	mov    WORD PTR [ebx+ecx*2],ax
c0001f8d:	89 c5                	mov    ebp,eax
c0001f8f:	41                   	inc    ecx
c0001f90:	eb 04                	jmp    c0001f96 <pick_lfn+0x52>
c0001f92:	66 40                	inc    ax
c0001f94:	75 c3                	jne    c0001f59 <pick_lfn+0x15>
c0001f96:	47                   	inc    edi
c0001f97:	83 ff 0d             	cmp    edi,0xd
c0001f9a:	75 d2                	jne    c0001f6e <pick_lfn+0x2a>
c0001f9c:	f6 06 40             	test   BYTE PTR [esi],0x40
c0001f9f:	74 13                	je     c0001fb4 <pick_lfn+0x70>
c0001fa1:	66 85 ed             	test   bp,bp
c0001fa4:	74 0e                	je     c0001fb4 <pick_lfn+0x70>
c0001fa6:	81 f9 ff 00 00 00    	cmp    ecx,0xff
c0001fac:	77 ab                	ja     c0001f59 <pick_lfn+0x15>
c0001fae:	66 c7 04 4b 00 00    	mov    WORD PTR [ebx+ecx*2],0x0
c0001fb4:	b8 01 00 00 00       	mov    eax,0x1
c0001fb9:	5b                   	pop    ebx
c0001fba:	5e                   	pop    esi
c0001fbb:	5f                   	pop    edi
c0001fbc:	5d                   	pop    ebp
c0001fbd:	c3                   	ret    

c0001fbe <put_lfn>:
c0001fbe:	55                   	push   ebp
c0001fbf:	31 ed                	xor    ebp,ebp
c0001fc1:	57                   	push   edi
c0001fc2:	89 d7                	mov    edi,edx
c0001fc4:	56                   	push   esi
c0001fc5:	31 f6                	xor    esi,esi
c0001fc7:	53                   	push   ebx
c0001fc8:	83 ec 08             	sub    esp,0x8
c0001fcb:	89 04 24             	mov    DWORD PTR [esp],eax
c0001fce:	88 4c 24 07          	mov    BYTE PTR [esp+0x7],cl
c0001fd2:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0001fd6:	66 c7 42 0b 0f 00    	mov    WORD PTR [edx+0xb],0xf
c0001fdc:	88 42 0d             	mov    BYTE PTR [edx+0xd],al
c0001fdf:	8d 42 1a             	lea    eax,[edx+0x1a]
c0001fe2:	31 d2                	xor    edx,edx
c0001fe4:	e8 cb fc ff ff       	call   c0001cb4 <st_word>
c0001fe9:	0f b6 d9             	movzx  ebx,cl
c0001fec:	4b                   	dec    ebx
c0001fed:	6b db 0d             	imul   ebx,ebx,0xd
c0001ff0:	66 83 fe ff          	cmp    si,0xffff
c0001ff4:	74 08                	je     c0001ffe <put_lfn+0x40>
c0001ff6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0001ff9:	66 8b 34 58          	mov    si,WORD PTR [eax+ebx*2]
c0001ffd:	43                   	inc    ebx
c0001ffe:	0f b6 85 40 9d 02 c0 	movzx  eax,BYTE PTR [ebp-0x3ffd62c0]
c0002005:	0f b7 d6             	movzx  edx,si
c0002008:	01 f8                	add    eax,edi
c000200a:	e8 a5 fc ff ff       	call   c0001cb4 <st_word>
c000200f:	66 85 f6             	test   si,si
c0002012:	75 03                	jne    c0002017 <put_lfn+0x59>
c0002014:	83 ce ff             	or     esi,0xffffffff
c0002017:	45                   	inc    ebp
c0002018:	83 fd 0d             	cmp    ebp,0xd
c000201b:	75 d3                	jne    c0001ff0 <put_lfn+0x32>
c000201d:	66 46                	inc    si
c000201f:	74 0a                	je     c000202b <put_lfn+0x6d>
c0002021:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0002024:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c0002029:	75 09                	jne    c0002034 <put_lfn+0x76>
c000202b:	88 c8                	mov    al,cl
c000202d:	83 c8 40             	or     eax,0x40
c0002030:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0002034:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0002038:	88 07                	mov    BYTE PTR [edi],al
c000203a:	83 c4 08             	add    esp,0x8
c000203d:	5b                   	pop    ebx
c000203e:	5e                   	pop    esi
c000203f:	5f                   	pop    edi
c0002040:	5d                   	pop    ebp
c0002041:	c3                   	ret    

c0002042 <gen_numname>:
c0002042:	57                   	push   edi
c0002043:	89 cf                	mov    edi,ecx
c0002045:	56                   	push   esi
c0002046:	b9 0b 00 00 00       	mov    ecx,0xb
c000204b:	53                   	push   ebx
c000204c:	89 c6                	mov    esi,eax
c000204e:	83 ec 10             	sub    esp,0x10
c0002051:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0002055:	e8 67 fc ff ff       	call   c0001cc1 <mem_cpy>
c000205a:	83 fb 05             	cmp    ebx,0x5
c000205d:	76 2d                	jbe    c000208c <gen_numname+0x4a>
c000205f:	66 8b 07             	mov    ax,WORD PTR [edi]
c0002062:	66 85 c0             	test   ax,ax
c0002065:	74 25                	je     c000208c <gen_numname+0x4a>
c0002067:	83 c7 02             	add    edi,0x2
c000206a:	ba 10 00 00 00       	mov    edx,0x10
c000206f:	01 db                	add    ebx,ebx
c0002071:	89 c1                	mov    ecx,eax
c0002073:	66 d1 e8             	shr    ax,1
c0002076:	83 e1 01             	and    ecx,0x1
c0002079:	01 cb                	add    ebx,ecx
c000207b:	0f ba e3 10          	bt     ebx,0x10
c000207f:	73 06                	jae    c0002087 <gen_numname+0x45>
c0002081:	81 f3 21 10 01 00    	xor    ebx,0x11021
c0002087:	4a                   	dec    edx
c0002088:	75 e5                	jne    c000206f <gen_numname+0x2d>
c000208a:	eb d3                	jmp    c000205f <gen_numname+0x1d>
c000208c:	b8 07 00 00 00       	mov    eax,0x7
c0002091:	88 d9                	mov    cl,bl
c0002093:	83 e1 0f             	and    ecx,0xf
c0002096:	8d 51 30             	lea    edx,[ecx+0x30]
c0002099:	80 fa 39             	cmp    dl,0x39
c000209c:	76 03                	jbe    c00020a1 <gen_numname+0x5f>
c000209e:	8d 51 37             	lea    edx,[ecx+0x37]
c00020a1:	8d 48 ff             	lea    ecx,[eax-0x1]
c00020a4:	88 54 0c 09          	mov    BYTE PTR [esp+ecx*1+0x9],dl
c00020a8:	89 da                	mov    edx,ebx
c00020aa:	c1 ea 04             	shr    edx,0x4
c00020ad:	83 fb 0f             	cmp    ebx,0xf
c00020b0:	76 06                	jbe    c00020b8 <gen_numname+0x76>
c00020b2:	89 c8                	mov    eax,ecx
c00020b4:	89 d3                	mov    ebx,edx
c00020b6:	eb d9                	jmp    c0002091 <gen_numname+0x4f>
c00020b8:	c6 44 0c 08 7e       	mov    BYTE PTR [esp+ecx*1+0x8],0x7e
c00020bd:	31 d2                	xor    edx,edx
c00020bf:	8d 58 fe             	lea    ebx,[eax-0x2]
c00020c2:	8d 04 16             	lea    eax,[esi+edx*1]
c00020c5:	39 ca                	cmp    edx,ecx
c00020c7:	73 18                	jae    c00020e1 <gen_numname+0x9f>
c00020c9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
c00020cc:	3c 20                	cmp    al,0x20
c00020ce:	74 11                	je     c00020e1 <gen_numname+0x9f>
c00020d0:	e8 41 fc ff ff       	call   c0001d16 <dbc_1st>
c00020d5:	85 c0                	test   eax,eax
c00020d7:	74 05                	je     c00020de <gen_numname+0x9c>
c00020d9:	39 d3                	cmp    ebx,edx
c00020db:	74 04                	je     c00020e1 <gen_numname+0x9f>
c00020dd:	42                   	inc    edx
c00020de:	42                   	inc    edx
c00020df:	eb e1                	jmp    c00020c2 <gen_numname+0x80>
c00020e1:	b0 20                	mov    al,0x20
c00020e3:	83 f9 07             	cmp    ecx,0x7
c00020e6:	77 05                	ja     c00020ed <gen_numname+0xab>
c00020e8:	8a 44 0c 08          	mov    al,BYTE PTR [esp+ecx*1+0x8]
c00020ec:	41                   	inc    ecx
c00020ed:	42                   	inc    edx
c00020ee:	88 44 16 ff          	mov    BYTE PTR [esi+edx*1-0x1],al
c00020f2:	83 fa 07             	cmp    edx,0x7
c00020f5:	76 ea                	jbe    c00020e1 <gen_numname+0x9f>
c00020f7:	83 c4 10             	add    esp,0x10
c00020fa:	5b                   	pop    ebx
c00020fb:	5e                   	pop    esi
c00020fc:	5f                   	pop    edi
c00020fd:	c3                   	ret    

c00020fe <sum_sfn>:
c00020fe:	31 c9                	xor    ecx,ecx
c0002100:	31 d2                	xor    edx,edx
c0002102:	d0 ca                	ror    dl,1
c0002104:	02 14 08             	add    dl,BYTE PTR [eax+ecx*1]
c0002107:	41                   	inc    ecx
c0002108:	83 f9 0b             	cmp    ecx,0xb
c000210b:	75 f5                	jne    c0002102 <sum_sfn+0x4>
c000210d:	88 d0                	mov    al,dl
c000210f:	c3                   	ret    

c0002110 <xdir_sum>:
c0002110:	56                   	push   esi
c0002111:	31 c9                	xor    ecx,ecx
c0002113:	53                   	push   ebx
c0002114:	31 d2                	xor    edx,edx
c0002116:	0f b6 58 01          	movzx  ebx,BYTE PTR [eax+0x1]
c000211a:	43                   	inc    ebx
c000211b:	c1 e3 05             	shl    ebx,0x5
c000211e:	83 fa 02             	cmp    edx,0x2
c0002121:	74 0b                	je     c000212e <xdir_sum+0x1e>
c0002123:	0f b6 34 10          	movzx  esi,BYTE PTR [eax+edx*1]
c0002127:	66 d1 c9             	ror    cx,1
c000212a:	01 f1                	add    ecx,esi
c000212c:	eb 05                	jmp    c0002133 <xdir_sum+0x23>
c000212e:	ba 03 00 00 00       	mov    edx,0x3
c0002133:	42                   	inc    edx
c0002134:	39 d3                	cmp    ebx,edx
c0002136:	77 e6                	ja     c000211e <xdir_sum+0xe>
c0002138:	89 c8                	mov    eax,ecx
c000213a:	5b                   	pop    ebx
c000213b:	5e                   	pop    esi
c000213c:	c3                   	ret    

c000213d <xsum32>:
c000213d:	d1 ca                	ror    edx,1
c000213f:	0f b6 c0             	movzx  eax,al
c0002142:	01 d0                	add    eax,edx
c0002144:	c3                   	ret    

c0002145 <get_xfileinfo>:
c0002145:	55                   	push   ebp
c0002146:	31 c9                	xor    ecx,ecx
c0002148:	57                   	push   edi
c0002149:	bd 40 00 00 00       	mov    ebp,0x40
c000214e:	56                   	push   esi
c000214f:	31 ff                	xor    edi,edi
c0002151:	53                   	push   ebx
c0002152:	89 c6                	mov    esi,eax
c0002154:	83 ec 0c             	sub    esp,0xc
c0002157:	89 d3                	mov    ebx,edx
c0002159:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0002160:	0f b6 46 23          	movzx  eax,BYTE PTR [esi+0x23]
c0002164:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0002167:	76 6d                	jbe    c00021d6 <get_xfileinfo+0x91>
c0002169:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000216f:	76 0b                	jbe    c000217c <get_xfileinfo+0x37>
c0002171:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0002175:	bf 01 00 00 00       	mov    edi,0x1
c000217a:	eb 63                	jmp    c00021df <get_xfileinfo+0x9a>
c000217c:	f7 c5 1f 00 00 00    	test   ebp,0x1f
c0002182:	75 03                	jne    c0002187 <get_xfileinfo+0x42>
c0002184:	83 c5 02             	add    ebp,0x2
c0002187:	8d 04 2e             	lea    eax,[esi+ebp*1]
c000218a:	83 c5 02             	add    ebp,0x2
c000218d:	e8 b0 fa ff ff       	call   c0001c42 <ld_word>
c0002192:	ff 04 24             	inc    DWORD PTR [esp]
c0002195:	66 85 c9             	test   cx,cx
c0002198:	75 0d                	jne    c00021a7 <get_xfileinfo+0x62>
c000219a:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c00021a0:	66 81 fa ff 07       	cmp    dx,0x7ff
c00021a5:	76 2b                	jbe    c00021d2 <get_xfileinfo+0x8d>
c00021a7:	c1 e1 10             	shl    ecx,0x10
c00021aa:	ba ff 00 00 00       	mov    edx,0xff
c00021af:	0f b7 c0             	movzx  eax,ax
c00021b2:	29 fa                	sub    edx,edi
c00021b4:	09 c8                	or     eax,ecx
c00021b6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00021ba:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c00021be:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00021c2:	e8 1b fc ff ff       	call   c0001de2 <put_utf>
c00021c7:	84 c0                	test   al,al
c00021c9:	74 a6                	je     c0002171 <get_xfileinfo+0x2c>
c00021cb:	0f b6 c0             	movzx  eax,al
c00021ce:	01 c7                	add    edi,eax
c00021d0:	31 c0                	xor    eax,eax
c00021d2:	89 c1                	mov    ecx,eax
c00021d4:	eb 8a                	jmp    c0002160 <get_xfileinfo+0x1b>
c00021d6:	85 ff                	test   edi,edi
c00021d8:	74 97                	je     c0002171 <get_xfileinfo+0x2c>
c00021da:	66 85 c9             	test   cx,cx
c00021dd:	75 92                	jne    c0002171 <get_xfileinfo+0x2c>
c00021df:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c00021e4:	31 c0                	xor    eax,eax
c00021e6:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c00021ea:	31 d2                	xor    edx,edx
c00021ec:	8a 4e 04             	mov    cl,BYTE PTR [esi+0x4]
c00021ef:	88 4b 0c             	mov    BYTE PTR [ebx+0xc],cl
c00021f2:	80 e1 10             	and    cl,0x10
c00021f5:	75 08                	jne    c00021ff <get_xfileinfo+0xba>
c00021f7:	8d 46 38             	lea    eax,[esi+0x38]
c00021fa:	e8 68 fa ff ff       	call   c0001c67 <ld_qword>
c00021ff:	89 03                	mov    DWORD PTR [ebx],eax
c0002201:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0002204:	8d 46 0c             	lea    eax,[esi+0xc]
c0002207:	e8 36 fa ff ff       	call   c0001c42 <ld_word>
c000220c:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0002210:	8d 46 0e             	lea    eax,[esi+0xe]
c0002213:	e8 2a fa ff ff       	call   c0001c42 <ld_word>
c0002218:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c000221c:	83 c4 0c             	add    esp,0xc
c000221f:	5b                   	pop    ebx
c0002220:	5e                   	pop    esi
c0002221:	5f                   	pop    edi
c0002222:	5d                   	pop    ebp
c0002223:	c3                   	ret    

c0002224 <get_ldnumber>:
c0002224:	8b 10                	mov    edx,DWORD PTR [eax]
c0002226:	85 d2                	test   edx,edx
c0002228:	74 14                	je     c000223e <get_ldnumber+0x1a>
c000222a:	56                   	push   esi
c000222b:	53                   	push   ebx
c000222c:	89 d3                	mov    ebx,edx
c000222e:	43                   	inc    ebx
c000222f:	8a 4b ff             	mov    cl,BYTE PTR [ebx-0x1]
c0002232:	80 f9 1f             	cmp    cl,0x1f
c0002235:	76 0d                	jbe    c0002244 <get_ldnumber+0x20>
c0002237:	80 f9 3a             	cmp    cl,0x3a
c000223a:	75 f2                	jne    c000222e <get_ldnumber+0xa>
c000223c:	eb 0a                	jmp    c0002248 <get_ldnumber+0x24>
c000223e:	83 c9 ff             	or     ecx,0xffffffff
c0002241:	89 c8                	mov    eax,ecx
c0002243:	c3                   	ret    
c0002244:	31 c9                	xor    ecx,ecx
c0002246:	eb 24                	jmp    c000226c <get_ldnumber+0x48>
c0002248:	0f b6 32             	movzx  esi,BYTE PTR [edx]
c000224b:	8d 4e d0             	lea    ecx,[esi-0x30]
c000224e:	80 f9 09             	cmp    cl,0x9
c0002251:	77 16                	ja     c0002269 <get_ldnumber+0x45>
c0002253:	83 c2 02             	add    edx,0x2
c0002256:	83 c9 ff             	or     ecx,0xffffffff
c0002259:	39 d3                	cmp    ebx,edx
c000225b:	75 0f                	jne    c000226c <get_ldnumber+0x48>
c000225d:	89 f2                	mov    edx,esi
c000225f:	89 18                	mov    DWORD PTR [eax],ebx
c0002261:	0f be ca             	movsx  ecx,dl
c0002264:	83 e9 30             	sub    ecx,0x30
c0002267:	eb 03                	jmp    c000226c <get_ldnumber+0x48>
c0002269:	83 c9 ff             	or     ecx,0xffffffff
c000226c:	89 c8                	mov    eax,ecx
c000226e:	5b                   	pop    ebx
c000226f:	5e                   	pop    esi
c0002270:	c3                   	ret    

c0002271 <crc32>:
c0002271:	56                   	push   esi
c0002272:	89 d6                	mov    esi,edx
c0002274:	53                   	push   ebx
c0002275:	b2 01                	mov    dl,0x1
c0002277:	bb 08 00 00 00       	mov    ebx,0x8
c000227c:	89 f1                	mov    ecx,esi
c000227e:	84 d1                	test   cl,dl
c0002280:	0f 95 c1             	setne  cl
c0002283:	0f b6 c9             	movzx  ecx,cl
c0002286:	31 c1                	xor    ecx,eax
c0002288:	89 c8                	mov    eax,ecx
c000228a:	d1 e8                	shr    eax,1
c000228c:	80 e1 01             	and    cl,0x1
c000228f:	74 05                	je     c0002296 <crc32+0x25>
c0002291:	35 20 83 b8 ed       	xor    eax,0xedb88320
c0002296:	d1 e2                	shl    edx,1
c0002298:	4b                   	dec    ebx
c0002299:	75 e1                	jne    c000227c <crc32+0xb>
c000229b:	5b                   	pop    ebx
c000229c:	5e                   	pop    esi
c000229d:	c3                   	ret    

c000229e <test_gpt_header>:
c000229e:	55                   	push   ebp
c000229f:	b9 10 00 00 00       	mov    ecx,0x10
c00022a4:	57                   	push   edi
c00022a5:	ba 40 9c 02 c0       	mov    edx,0xc0029c40
c00022aa:	56                   	push   esi
c00022ab:	31 ff                	xor    edi,edi
c00022ad:	53                   	push   ebx
c00022ae:	89 c3                	mov    ebx,eax
c00022b0:	e8 2c fa ff ff       	call   c0001ce1 <mem_cmp>
c00022b5:	85 c0                	test   eax,eax
c00022b7:	75 55                	jne    c000230e <test_gpt_header+0x70>
c00022b9:	89 c7                	mov    edi,eax
c00022bb:	bd f0 ff ff ff       	mov    ebp,0xfffffff0
c00022c0:	83 ce ff             	or     esi,0xffffffff
c00022c3:	31 d2                	xor    edx,edx
c00022c5:	83 fd 03             	cmp    ebp,0x3
c00022c8:	76 05                	jbe    c00022cf <test_gpt_header+0x31>
c00022ca:	0f b6 54 2b 10       	movzx  edx,BYTE PTR [ebx+ebp*1+0x10]
c00022cf:	89 f0                	mov    eax,esi
c00022d1:	45                   	inc    ebp
c00022d2:	e8 9a ff ff ff       	call   c0002271 <crc32>
c00022d7:	83 fd 4c             	cmp    ebp,0x4c
c00022da:	89 c6                	mov    esi,eax
c00022dc:	75 e5                	jne    c00022c3 <test_gpt_header+0x25>
c00022de:	8d 43 10             	lea    eax,[ebx+0x10]
c00022e1:	f7 d6                	not    esi
c00022e3:	e8 67 f9 ff ff       	call   c0001c4f <ld_dword>
c00022e8:	39 c6                	cmp    esi,eax
c00022ea:	75 22                	jne    c000230e <test_gpt_header+0x70>
c00022ec:	8d 43 54             	lea    eax,[ebx+0x54]
c00022ef:	e8 5b f9 ff ff       	call   c0001c4f <ld_dword>
c00022f4:	83 c0 80             	add    eax,0xffffff80
c00022f7:	75 15                	jne    c000230e <test_gpt_header+0x70>
c00022f9:	8d 43 50             	lea    eax,[ebx+0x50]
c00022fc:	e8 4e f9 ff ff       	call   c0001c4f <ld_dword>
c0002301:	3d 80 00 00 00       	cmp    eax,0x80
c0002306:	0f 96 c0             	setbe  al
c0002309:	0f b6 c0             	movzx  eax,al
c000230c:	89 c7                	mov    edi,eax
c000230e:	5b                   	pop    ebx
c000230f:	89 f8                	mov    eax,edi
c0002311:	5e                   	pop    esi
c0002312:	5f                   	pop    edi
c0002313:	5d                   	pop    ebp
c0002314:	c3                   	ret    

c0002315 <make_rand>:
c0002315:	56                   	push   esi
c0002316:	85 c0                	test   eax,eax
c0002318:	53                   	push   ebx
c0002319:	75 05                	jne    c0002320 <make_rand+0xb>
c000231b:	b8 01 00 00 00       	mov    eax,0x1
c0002320:	01 d1                	add    ecx,edx
c0002322:	bb 08 00 00 00       	mov    ebx,0x8
c0002327:	89 c6                	mov    esi,eax
c0002329:	d1 e8                	shr    eax,1
c000232b:	83 e6 01             	and    esi,0x1
c000232e:	85 f6                	test   esi,esi
c0002330:	74 05                	je     c0002337 <make_rand+0x22>
c0002332:	35 00 00 00 a3       	xor    eax,0xa3000000
c0002337:	4b                   	dec    ebx
c0002338:	75 ed                	jne    c0002327 <make_rand+0x12>
c000233a:	42                   	inc    edx
c000233b:	88 42 ff             	mov    BYTE PTR [edx-0x1],al
c000233e:	39 ca                	cmp    edx,ecx
c0002340:	75 e0                	jne    c0002322 <make_rand+0xd>
c0002342:	5b                   	pop    ebx
c0002343:	5e                   	pop    esi
c0002344:	c3                   	ret    

c0002345 <validate>:
c0002345:	56                   	push   esi
c0002346:	53                   	push   ebx
c0002347:	89 d6                	mov    esi,edx
c0002349:	51                   	push   ecx
c000234a:	85 c0                	test   eax,eax
c000234c:	75 09                	jne    c0002357 <validate+0x12>
c000234e:	b8 09 00 00 00       	mov    eax,0x9
c0002353:	31 c9                	xor    ecx,ecx
c0002355:	eb 2f                	jmp    c0002386 <validate+0x41>
c0002357:	89 c3                	mov    ebx,eax
c0002359:	8b 00                	mov    eax,DWORD PTR [eax]
c000235b:	85 c0                	test   eax,eax
c000235d:	74 ef                	je     c000234e <validate+0x9>
c000235f:	80 38 00             	cmp    BYTE PTR [eax],0x0
c0002362:	74 ea                	je     c000234e <validate+0x9>
c0002364:	66 8b 50 06          	mov    dx,WORD PTR [eax+0x6]
c0002368:	66 39 53 04          	cmp    WORD PTR [ebx+0x4],dx
c000236c:	75 e0                	jne    c000234e <validate+0x9>
c000236e:	83 ec 0c             	sub    esp,0xc
c0002371:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0002375:	50                   	push   eax
c0002376:	e8 76 f8 ff ff       	call   c0001bf1 <disk_status>
c000237b:	83 c4 10             	add    esp,0x10
c000237e:	a8 01                	test   al,0x1
c0002380:	75 cc                	jne    c000234e <validate+0x9>
c0002382:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c0002384:	31 c0                	xor    eax,eax
c0002386:	89 0e                	mov    DWORD PTR [esi],ecx
c0002388:	5a                   	pop    edx
c0002389:	5b                   	pop    ebx
c000238a:	5e                   	pop    esi
c000238b:	c3                   	ret    

c000238c <sync_window>:
c000238c:	80 78 03 00          	cmp    BYTE PTR [eax+0x3],0x0
c0002390:	0f 84 85 00 00 00    	je     c000241b <sync_window+0x8f>
c0002396:	55                   	push   ebp
c0002397:	8d 68 54             	lea    ebp,[eax+0x54]
c000239a:	57                   	push   edi
c000239b:	56                   	push   esi
c000239c:	53                   	push   ebx
c000239d:	89 c3                	mov    ebx,eax
c000239f:	83 ec 28             	sub    esp,0x28
c00023a2:	6a 01                	push   0x1
c00023a4:	ff 70 50             	push   DWORD PTR [eax+0x50]
c00023a7:	ff 70 4c             	push   DWORD PTR [eax+0x4c]
c00023aa:	55                   	push   ebp
c00023ab:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00023af:	50                   	push   eax
c00023b0:	e8 58 f8 ff ff       	call   c0001c0d <disk_write>
c00023b5:	83 c4 20             	add    esp,0x20
c00023b8:	ba 01 00 00 00       	mov    edx,0x1
c00023bd:	85 c0                	test   eax,eax
c00023bf:	75 50                	jne    c0002411 <sync_window+0x85>
c00023c1:	31 ff                	xor    edi,edi
c00023c3:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c00023c6:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c00023ca:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c00023ce:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c00023d1:	8b 53 50             	mov    edx,DWORD PTR [ebx+0x50]
c00023d4:	89 c6                	mov    esi,eax
c00023d6:	89 d7                	mov    edi,edx
c00023d8:	2b 73 2c             	sub    esi,DWORD PTR [ebx+0x2c]
c00023db:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00023df:	1b 7b 30             	sbb    edi,DWORD PTR [ebx+0x30]
c00023e2:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c00023e6:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c00023ea:	73 23                	jae    c000240f <sync_window+0x83>
c00023ec:	80 7b 02 02          	cmp    BYTE PTR [ebx+0x2],0x2
c00023f0:	75 1d                	jne    c000240f <sync_window+0x83>
c00023f2:	83 ec 0c             	sub    esp,0xc
c00023f5:	6a 01                	push   0x1
c00023f7:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c00023fb:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c00023ff:	52                   	push   edx
c0002400:	50                   	push   eax
c0002401:	55                   	push   ebp
c0002402:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002406:	50                   	push   eax
c0002407:	e8 01 f8 ff ff       	call   c0001c0d <disk_write>
c000240c:	83 c4 20             	add    esp,0x20
c000240f:	31 d2                	xor    edx,edx
c0002411:	83 c4 1c             	add    esp,0x1c
c0002414:	89 d0                	mov    eax,edx
c0002416:	5b                   	pop    ebx
c0002417:	5e                   	pop    esi
c0002418:	5f                   	pop    edi
c0002419:	5d                   	pop    ebp
c000241a:	c3                   	ret    
c000241b:	31 d2                	xor    edx,edx
c000241d:	89 d0                	mov    eax,edx
c000241f:	c3                   	ret    

c0002420 <move_window>:
c0002420:	56                   	push   esi
c0002421:	53                   	push   ebx
c0002422:	89 c3                	mov    ebx,eax
c0002424:	83 ec 14             	sub    esp,0x14
c0002427:	39 48 50             	cmp    DWORD PTR [eax+0x50],ecx
c000242a:	75 07                	jne    c0002433 <move_window+0x13>
c000242c:	31 f6                	xor    esi,esi
c000242e:	39 50 4c             	cmp    DWORD PTR [eax+0x4c],edx
c0002431:	74 59                	je     c000248c <move_window+0x6c>
c0002433:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0002437:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000243b:	89 d8                	mov    eax,ebx
c000243d:	e8 4a ff ff ff       	call   c000238c <sync_window>
c0002442:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002446:	89 c6                	mov    esi,eax
c0002448:	85 c0                	test   eax,eax
c000244a:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000244e:	75 3c                	jne    c000248c <move_window+0x6c>
c0002450:	83 ec 0c             	sub    esp,0xc
c0002453:	8d 43 54             	lea    eax,[ebx+0x54]
c0002456:	6a 01                	push   0x1
c0002458:	51                   	push   ecx
c0002459:	52                   	push   edx
c000245a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000245e:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0002462:	50                   	push   eax
c0002463:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c0002467:	50                   	push   eax
c0002468:	e8 8a f7 ff ff       	call   c0001bf7 <disk_read>
c000246d:	83 c4 20             	add    esp,0x20
c0002470:	85 c0                	test   eax,eax
c0002472:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002476:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000247a:	74 0a                	je     c0002486 <move_window+0x66>
c000247c:	83 ca ff             	or     edx,0xffffffff
c000247f:	be 01 00 00 00       	mov    esi,0x1
c0002484:	89 d1                	mov    ecx,edx
c0002486:	89 53 4c             	mov    DWORD PTR [ebx+0x4c],edx
c0002489:	89 4b 50             	mov    DWORD PTR [ebx+0x50],ecx
c000248c:	89 f0                	mov    eax,esi
c000248e:	83 c4 14             	add    esp,0x14
c0002491:	5b                   	pop    ebx
c0002492:	5e                   	pop    esi
c0002493:	c3                   	ret    

c0002494 <check_fs>:
c0002494:	53                   	push   ebx
c0002495:	89 c3                	mov    ebx,eax
c0002497:	83 ec 08             	sub    esp,0x8
c000249a:	c6 40 03 00          	mov    BYTE PTR [eax+0x3],0x0
c000249e:	c7 40 4c ff ff ff ff 	mov    DWORD PTR [eax+0x4c],0xffffffff
c00024a5:	c7 40 50 ff ff ff ff 	mov    DWORD PTR [eax+0x50],0xffffffff
c00024ac:	e8 6f ff ff ff       	call   c0002420 <move_window>
c00024b1:	ba 04 00 00 00       	mov    edx,0x4
c00024b6:	85 c0                	test   eax,eax
c00024b8:	0f 85 89 00 00 00    	jne    c0002547 <check_fs+0xb3>
c00024be:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c00024c4:	e8 79 f7 ff ff       	call   c0001c42 <ld_word>
c00024c9:	ba 03 00 00 00       	mov    edx,0x3
c00024ce:	66 3d 55 aa          	cmp    ax,0xaa55
c00024d2:	75 73                	jne    c0002547 <check_fs+0xb3>
c00024d4:	ba 60 9d 02 c0       	mov    edx,0xc0029d60
c00024d9:	8d 43 54             	lea    eax,[ebx+0x54]
c00024dc:	b9 0b 00 00 00       	mov    ecx,0xb
c00024e1:	e8 fb f7 ff ff       	call   c0001ce1 <mem_cmp>
c00024e6:	ba 01 00 00 00       	mov    edx,0x1
c00024eb:	85 c0                	test   eax,eax
c00024ed:	74 58                	je     c0002547 <check_fs+0xb3>
c00024ef:	8a 43 54             	mov    al,BYTE PTR [ebx+0x54]
c00024f2:	8d 50 18             	lea    edx,[eax+0x18]
c00024f5:	80 fa 01             	cmp    dl,0x1
c00024f8:	76 09                	jbe    c0002503 <check_fs+0x6f>
c00024fa:	ba 02 00 00 00       	mov    edx,0x2
c00024ff:	3c eb                	cmp    al,0xeb
c0002501:	75 44                	jne    c0002547 <check_fs+0xb3>
c0002503:	ba 30 d2 02 c0       	mov    edx,0xc002d230
c0002508:	8d 83 8a 00 00 00    	lea    eax,[ebx+0x8a]
c000250e:	b9 03 00 00 00       	mov    ecx,0x3
c0002513:	e8 c9 f7 ff ff       	call   c0001ce1 <mem_cmp>
c0002518:	31 d2                	xor    edx,edx
c000251a:	85 c0                	test   eax,eax
c000251c:	74 29                	je     c0002547 <check_fs+0xb3>
c000251e:	ba 6c 9d 02 c0       	mov    edx,0xc0029d6c
c0002523:	8d 83 a6 00 00 00    	lea    eax,[ebx+0xa6]
c0002529:	b9 05 00 00 00       	mov    ecx,0x5
c000252e:	e8 ae f7 ff ff       	call   c0001ce1 <mem_cmp>
c0002533:	31 d2                	xor    edx,edx
c0002535:	85 c0                	test   eax,eax
c0002537:	74 0e                	je     c0002547 <check_fs+0xb3>
c0002539:	31 d2                	xor    edx,edx
c000253b:	80 bb 96 00 00 00 28 	cmp    BYTE PTR [ebx+0x96],0x28
c0002542:	0f 95 c2             	setne  dl
c0002545:	01 d2                	add    edx,edx
c0002547:	89 d0                	mov    eax,edx
c0002549:	83 c4 08             	add    esp,0x8
c000254c:	5b                   	pop    ebx
c000254d:	c3                   	ret    

c000254e <find_volume>:
c000254e:	55                   	push   ebp
c000254f:	31 c9                	xor    ecx,ecx
c0002551:	57                   	push   edi
c0002552:	56                   	push   esi
c0002553:	89 d6                	mov    esi,edx
c0002555:	53                   	push   ebx
c0002556:	31 d2                	xor    edx,edx
c0002558:	83 ec 3c             	sub    esp,0x3c
c000255b:	89 c3                	mov    ebx,eax
c000255d:	e8 32 ff ff ff       	call   c0002494 <check_fs>
c0002562:	83 f8 02             	cmp    eax,0x2
c0002565:	74 0e                	je     c0002575 <find_volume+0x27>
c0002567:	0f 87 5d 01 00 00    	ja     c00026ca <find_volume+0x17c>
c000256d:	85 f6                	test   esi,esi
c000256f:	0f 84 55 01 00 00    	je     c00026ca <find_volume+0x17c>
c0002575:	80 bb 16 02 00 00 ee 	cmp    BYTE PTR [ebx+0x216],0xee
c000257c:	0f 85 dd 00 00 00    	jne    c000265f <find_volume+0x111>
c0002582:	31 c9                	xor    ecx,ecx
c0002584:	ba 01 00 00 00       	mov    edx,0x1
c0002589:	89 d8                	mov    eax,ebx
c000258b:	e8 90 fe ff ff       	call   c0002420 <move_window>
c0002590:	85 c0                	test   eax,eax
c0002592:	74 0a                	je     c000259e <find_volume+0x50>
c0002594:	b8 04 00 00 00       	mov    eax,0x4
c0002599:	e9 2c 01 00 00       	jmp    c00026ca <find_volume+0x17c>
c000259e:	8d 6b 54             	lea    ebp,[ebx+0x54]
c00025a1:	89 e8                	mov    eax,ebp
c00025a3:	e8 f6 fc ff ff       	call   c000229e <test_gpt_header>
c00025a8:	85 c0                	test   eax,eax
c00025aa:	75 0a                	jne    c00025b6 <find_volume+0x68>
c00025ac:	b8 03 00 00 00       	mov    eax,0x3
c00025b1:	e9 14 01 00 00       	jmp    c00026ca <find_volume+0x17c>
c00025b6:	8d 83 a4 00 00 00    	lea    eax,[ebx+0xa4]
c00025bc:	e8 8e f6 ff ff       	call   c0001c4f <ld_dword>
c00025c1:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00025c5:	8d 83 9c 00 00 00    	lea    eax,[ebx+0x9c]
c00025cb:	e8 97 f6 ff ff       	call   c0001c67 <ld_qword>
c00025d0:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00025d8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00025dc:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00025e0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00025e8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00025ec:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c00025f0:	74 ba                	je     c00025ac <find_volume+0x5e>
c00025f2:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00025f6:	31 c9                	xor    ecx,ecx
c00025f8:	c1 e7 07             	shl    edi,0x7
c00025fb:	89 d8                	mov    eax,ebx
c00025fd:	89 fa                	mov    edx,edi
c00025ff:	c1 ea 09             	shr    edx,0x9
c0002602:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0002606:	13 4c 24 1c          	adc    ecx,DWORD PTR [esp+0x1c]
c000260a:	e8 11 fe ff ff       	call   c0002420 <move_window>
c000260f:	85 c0                	test   eax,eax
c0002611:	75 81                	jne    c0002594 <find_volume+0x46>
c0002613:	81 e7 80 01 00 00    	and    edi,0x180
c0002619:	b9 10 00 00 00       	mov    ecx,0x10
c000261e:	8d 44 3d 00          	lea    eax,[ebp+edi*1+0x0]
c0002622:	ba 50 9d 02 c0       	mov    edx,0xc0029d50
c0002627:	e8 b5 f6 ff ff       	call   c0001ce1 <mem_cmp>
c000262c:	85 c0                	test   eax,eax
c000262e:	75 29                	jne    c0002659 <find_volume+0x10b>
c0002630:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0002634:	8d 44 3d 20          	lea    eax,[ebp+edi*1+0x20]
c0002638:	e8 2a f6 ff ff       	call   c0001c67 <ld_qword>
c000263d:	89 d1                	mov    ecx,edx
c000263f:	89 c2                	mov    edx,eax
c0002641:	89 d8                	mov    eax,ebx
c0002643:	e8 4c fe ff ff       	call   c0002494 <check_fs>
c0002648:	85 f6                	test   esi,esi
c000264a:	75 07                	jne    c0002653 <find_volume+0x105>
c000264c:	83 f8 01             	cmp    eax,0x1
c000264f:	77 08                	ja     c0002659 <find_volume+0x10b>
c0002651:	eb 77                	jmp    c00026ca <find_volume+0x17c>
c0002653:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002657:	74 71                	je     c00026ca <find_volume+0x17c>
c0002659:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c000265d:	eb 89                	jmp    c00025e8 <find_volume+0x9a>
c000265f:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c0002663:	8d 83 5a 02 00 00    	lea    eax,[ebx+0x25a]
c0002669:	8d bb 1a 02 00 00    	lea    edi,[ebx+0x21a]
c000266f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002673:	89 cd                	mov    ebp,ecx
c0002675:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0002679:	89 f8                	mov    eax,edi
c000267b:	83 c7 10             	add    edi,0x10
c000267e:	e8 cc f5 ff ff       	call   c0001c4f <ld_dword>
c0002683:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0002687:	89 01                	mov    DWORD PTR [ecx],eax
c0002689:	83 c1 04             	add    ecx,0x4
c000268c:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0002690:	75 e3                	jne    c0002675 <find_volume+0x127>
c0002692:	31 ff                	xor    edi,edi
c0002694:	85 f6                	test   esi,esi
c0002696:	74 03                	je     c000269b <find_volume+0x14d>
c0002698:	8d 7e ff             	lea    edi,[esi-0x1]
c000269b:	8b 54 bd 00          	mov    edx,DWORD PTR [ebp+edi*4+0x0]
c000269f:	85 d2                	test   edx,edx
c00026a1:	74 14                	je     c00026b7 <find_volume+0x169>
c00026a3:	31 c9                	xor    ecx,ecx
c00026a5:	89 d8                	mov    eax,ebx
c00026a7:	e8 e8 fd ff ff       	call   c0002494 <check_fs>
c00026ac:	83 f8 01             	cmp    eax,0x1
c00026af:	76 19                	jbe    c00026ca <find_volume+0x17c>
c00026b1:	85 f6                	test   esi,esi
c00026b3:	74 0f                	je     c00026c4 <find_volume+0x176>
c00026b5:	eb 13                	jmp    c00026ca <find_volume+0x17c>
c00026b7:	85 f6                	test   esi,esi
c00026b9:	0f 85 ed fe ff ff    	jne    c00025ac <find_volume+0x5e>
c00026bf:	b8 03 00 00 00       	mov    eax,0x3
c00026c4:	47                   	inc    edi
c00026c5:	83 ff 03             	cmp    edi,0x3
c00026c8:	76 d1                	jbe    c000269b <find_volume+0x14d>
c00026ca:	83 c4 3c             	add    esp,0x3c
c00026cd:	5b                   	pop    ebx
c00026ce:	5e                   	pop    esi
c00026cf:	5f                   	pop    edi
c00026d0:	5d                   	pop    ebp
c00026d1:	c3                   	ret    

c00026d2 <mount_volume>:
c00026d2:	55                   	push   ebp
c00026d3:	57                   	push   edi
c00026d4:	89 cf                	mov    edi,ecx
c00026d6:	56                   	push   esi
c00026d7:	53                   	push   ebx
c00026d8:	bb 0b 00 00 00       	mov    ebx,0xb
c00026dd:	83 ec 3c             	sub    esp,0x3c
c00026e0:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00026e6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00026ea:	e8 35 fb ff ff       	call   c0002224 <get_ldnumber>
c00026ef:	85 c0                	test   eax,eax
c00026f1:	0f 88 3a 05 00 00    	js     c0002c31 <mount_volume+0x55f>
c00026f7:	8b 2c 85 e0 ed 02 c0 	mov    ebp,DWORD PTR [eax*4-0x3ffd1220]
c00026fe:	89 c6                	mov    esi,eax
c0002700:	bb 0c 00 00 00       	mov    ebx,0xc
c0002705:	85 ed                	test   ebp,ebp
c0002707:	0f 84 24 05 00 00    	je     c0002c31 <mount_volume+0x55f>
c000270d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0002711:	83 e7 fe             	and    edi,0xfffffffe
c0002714:	89 2a                	mov    DWORD PTR [edx],ebp
c0002716:	80 7d 00 00          	cmp    BYTE PTR [ebp+0x0],0x0
c000271a:	74 32                	je     c000274e <mount_volume+0x7c>
c000271c:	83 ec 0c             	sub    esp,0xc
c000271f:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0002723:	50                   	push   eax
c0002724:	e8 c8 f4 ff ff       	call   c0001bf1 <disk_status>
c0002729:	83 c4 10             	add    esp,0x10
c000272c:	a8 01                	test   al,0x1
c000272e:	75 1e                	jne    c000274e <mount_volume+0x7c>
c0002730:	31 db                	xor    ebx,ebx
c0002732:	89 f9                	mov    ecx,edi
c0002734:	84 c9                	test   cl,cl
c0002736:	0f 84 f5 04 00 00    	je     c0002c31 <mount_volume+0x55f>
c000273c:	a8 04                	test   al,0x4
c000273e:	0f 84 ed 04 00 00    	je     c0002c31 <mount_volume+0x55f>
c0002744:	bb 0a 00 00 00       	mov    ebx,0xa
c0002749:	e9 e3 04 00 00       	jmp    c0002c31 <mount_volume+0x55f>
c000274e:	83 ec 0c             	sub    esp,0xc
c0002751:	89 f0                	mov    eax,esi
c0002753:	c6 45 00 00          	mov    BYTE PTR [ebp+0x0],0x0
c0002757:	88 45 01             	mov    BYTE PTR [ebp+0x1],al
c000275a:	0f b6 f0             	movzx  esi,al
c000275d:	bb 03 00 00 00       	mov    ebx,0x3
c0002762:	56                   	push   esi
c0002763:	e8 8c f4 ff ff       	call   c0001bf4 <disk_initialize>
c0002768:	83 c4 10             	add    esp,0x10
c000276b:	a8 01                	test   al,0x1
c000276d:	0f 85 be 04 00 00    	jne    c0002c31 <mount_volume+0x55f>
c0002773:	89 f9                	mov    ecx,edi
c0002775:	84 c9                	test   cl,cl
c0002777:	74 04                	je     c000277d <mount_volume+0xab>
c0002779:	a8 04                	test   al,0x4
c000277b:	75 c7                	jne    c0002744 <mount_volume+0x72>
c000277d:	31 d2                	xor    edx,edx
c000277f:	89 e8                	mov    eax,ebp
c0002781:	e8 c8 fd ff ff       	call   c000254e <find_volume>
c0002786:	83 f8 04             	cmp    eax,0x4
c0002789:	75 0a                	jne    c0002795 <mount_volume+0xc3>
c000278b:	bb 01 00 00 00       	mov    ebx,0x1
c0002790:	e9 9c 04 00 00       	jmp    c0002c31 <mount_volume+0x55f>
c0002795:	83 f8 01             	cmp    eax,0x1
c0002798:	76 0a                	jbe    c00027a4 <mount_volume+0xd2>
c000279a:	bb 0d 00 00 00       	mov    ebx,0xd
c000279f:	e9 8d 04 00 00       	jmp    c0002c31 <mount_volume+0x55f>
c00027a4:	8b 45 4c             	mov    eax,DWORD PTR [ebp+0x4c]
c00027a7:	8b 55 50             	mov    edx,DWORD PTR [ebp+0x50]
c00027aa:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00027ae:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00027b2:	75 17                	jne    c00027cb <mount_volume+0xf9>
c00027b4:	b8 0b 00 00 00       	mov    eax,0xb
c00027b9:	80 7c 05 54 00       	cmp    BYTE PTR [ebp+eax*1+0x54],0x0
c00027be:	75 da                	jne    c000279a <mount_volume+0xc8>
c00027c0:	40                   	inc    eax
c00027c1:	83 f8 40             	cmp    eax,0x40
c00027c4:	75 f3                	jne    c00027b9 <mount_volume+0xe7>
c00027c6:	e9 5a 02 00 00       	jmp    c0002a25 <mount_volume+0x353>
c00027cb:	8d 45 5f             	lea    eax,[ebp+0x5f]
c00027ce:	e8 6f f4 ff ff       	call   c0001c42 <ld_word>
c00027d3:	66 3d 00 02          	cmp    ax,0x200
c00027d7:	75 c1                	jne    c000279a <mount_volume+0xc8>
c00027d9:	8d 45 6a             	lea    eax,[ebp+0x6a]
c00027dc:	e8 61 f4 ff ff       	call   c0001c42 <ld_word>
c00027e1:	0f b7 c0             	movzx  eax,ax
c00027e4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027e8:	85 c0                	test   eax,eax
c00027ea:	75 0c                	jne    c00027f8 <mount_volume+0x126>
c00027ec:	8d 45 78             	lea    eax,[ebp+0x78]
c00027ef:	e8 5b f4 ff ff       	call   c0001c4f <ld_dword>
c00027f4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00027f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00027fc:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c00027ff:	8a 45 64             	mov    al,BYTE PTR [ebp+0x64]
c0002802:	88 44 24 18          	mov    BYTE PTR [esp+0x18],al
c0002806:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002809:	48                   	dec    eax
c000280a:	3c 01                	cmp    al,0x1
c000280c:	77 8c                	ja     c000279a <mount_volume+0xc8>
c000280e:	0f b6 45 61          	movzx  eax,BYTE PTR [ebp+0x61]
c0002812:	89 c3                	mov    ebx,eax
c0002814:	66 89 45 0a          	mov    WORD PTR [ebp+0xa],ax
c0002818:	66 85 c0             	test   ax,ax
c000281b:	0f 84 79 ff ff ff    	je     c000279a <mount_volume+0xc8>
c0002821:	8d 40 ff             	lea    eax,[eax-0x1]
c0002824:	85 d8                	test   eax,ebx
c0002826:	0f 85 6e ff ff ff    	jne    c000279a <mount_volume+0xc8>
c000282c:	8d 45 65             	lea    eax,[ebp+0x65]
c000282f:	e8 0e f4 ff ff       	call   c0001c42 <ld_word>
c0002834:	89 c7                	mov    edi,eax
c0002836:	66 89 45 08          	mov    WORD PTR [ebp+0x8],ax
c000283a:	a8 0f                	test   al,0xf
c000283c:	0f 85 58 ff ff ff    	jne    c000279a <mount_volume+0xc8>
c0002842:	8d 45 67             	lea    eax,[ebp+0x67]
c0002845:	e8 f8 f3 ff ff       	call   c0001c42 <ld_word>
c000284a:	0f b7 f0             	movzx  esi,ax
c000284d:	85 f6                	test   esi,esi
c000284f:	75 0a                	jne    c000285b <mount_volume+0x189>
c0002851:	8d 45 74             	lea    eax,[ebp+0x74]
c0002854:	e8 f6 f3 ff ff       	call   c0001c4f <ld_dword>
c0002859:	89 c6                	mov    esi,eax
c000285b:	8d 45 62             	lea    eax,[ebp+0x62]
c000285e:	e8 df f3 ff ff       	call   c0001c42 <ld_word>
c0002863:	66 85 c0             	test   ax,ax
c0002866:	0f 84 2e ff ff ff    	je     c000279a <mount_volume+0xc8>
c000286c:	0f b6 54 24 18       	movzx  edx,BYTE PTR [esp+0x18]
c0002871:	0f b7 c8             	movzx  ecx,ax
c0002874:	0f af 54 24 10       	imul   edx,DWORD PTR [esp+0x10]
c0002879:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000287d:	89 fa                	mov    edx,edi
c000287f:	66 c1 ea 04          	shr    dx,0x4
c0002883:	0f b7 d2             	movzx  edx,dx
c0002886:	03 54 24 2c          	add    edx,DWORD PTR [esp+0x2c]
c000288a:	8d 04 0a             	lea    eax,[edx+ecx*1]
c000288d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002891:	39 c6                	cmp    esi,eax
c0002893:	0f 82 01 ff ff ff    	jb     c000279a <mount_volume+0xc8>
c0002899:	29 c6                	sub    esi,eax
c000289b:	31 d2                	xor    edx,edx
c000289d:	89 f0                	mov    eax,esi
c000289f:	f7 f3                	div    ebx
c00028a1:	39 de                	cmp    esi,ebx
c00028a3:	0f 82 f1 fe ff ff    	jb     c000279a <mount_volume+0xc8>
c00028a9:	3d f5 ff ff 0f       	cmp    eax,0xffffff5
c00028ae:	0f 87 e6 fe ff ff    	ja     c000279a <mount_volume+0xc8>
c00028b4:	3d f5 ff 00 00       	cmp    eax,0xfff5
c00028b9:	0f 86 63 03 00 00    	jbe    c0002c22 <mount_volume+0x550>
c00028bf:	bb 03 00 00 00       	mov    ebx,0x3
c00028c4:	8d 70 02             	lea    esi,[eax+0x2]
c00028c7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00028cb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00028cf:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c00028d2:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c00028d5:	31 d2                	xor    edx,edx
c00028d7:	89 c8                	mov    eax,ecx
c00028d9:	89 75 1c             	mov    DWORD PTR [ebp+0x1c],esi
c00028dc:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028e0:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00028e4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00028e8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00028ec:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c00028ef:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c00028f2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00028f6:	31 d2                	xor    edx,edx
c00028f8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00028fc:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002900:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002903:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002906:	83 fb 03             	cmp    ebx,0x3
c0002909:	75 2b                	jne    c0002936 <mount_volume+0x264>
c000290b:	8d 45 7e             	lea    eax,[ebp+0x7e]
c000290e:	e8 2f f3 ff ff       	call   c0001c42 <ld_word>
c0002913:	66 09 c7             	or     di,ax
c0002916:	0f 85 7e fe ff ff    	jne    c000279a <mount_volume+0xc8>
c000291c:	8d 85 80 00 00 00    	lea    eax,[ebp+0x80]
c0002922:	c1 e6 02             	shl    esi,0x2
c0002925:	e8 25 f3 ff ff       	call   c0001c4f <ld_dword>
c000292a:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002931:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002934:	eb 30                	jmp    c0002966 <mount_volume+0x294>
c0002936:	66 85 ff             	test   di,di
c0002939:	0f 84 5b fe ff ff    	je     c000279a <mount_volume+0xc8>
c000293f:	31 d2                	xor    edx,edx
c0002941:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0002945:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0002949:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000294d:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002950:	89 55 38             	mov    DWORD PTR [ebp+0x38],edx
c0002953:	83 fb 02             	cmp    ebx,0x2
c0002956:	75 04                	jne    c000295c <mount_volume+0x28a>
c0002958:	01 f6                	add    esi,esi
c000295a:	eb 0a                	jmp    c0002966 <mount_volume+0x294>
c000295c:	8d 04 76             	lea    eax,[esi+esi*2]
c000295f:	83 e6 01             	and    esi,0x1
c0002962:	d1 e8                	shr    eax,1
c0002964:	01 c6                	add    esi,eax
c0002966:	81 c6 ff 01 00 00    	add    esi,0x1ff
c000296c:	c1 ee 09             	shr    esi,0x9
c000296f:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0002973:	0f 87 21 fe ff ff    	ja     c000279a <mount_volume+0xc8>
c0002979:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002980:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002987:	c6 45 04 80          	mov    BYTE PTR [ebp+0x4],0x80
c000298b:	83 fb 03             	cmp    ebx,0x3
c000298e:	75 7a                	jne    c0002a0a <mount_volume+0x338>
c0002990:	8d 85 84 00 00 00    	lea    eax,[ebp+0x84]
c0002996:	e8 a7 f2 ff ff       	call   c0001c42 <ld_word>
c000299b:	66 48                	dec    ax
c000299d:	75 6b                	jne    c0002a0a <mount_volume+0x338>
c000299f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00029a3:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00029a7:	83 c2 01             	add    edx,0x1
c00029aa:	89 e8                	mov    eax,ebp
c00029ac:	83 d1 00             	adc    ecx,0x0
c00029af:	e8 6c fa ff ff       	call   c0002420 <move_window>
c00029b4:	85 c0                	test   eax,eax
c00029b6:	75 52                	jne    c0002a0a <mount_volume+0x338>
c00029b8:	c6 45 04 00          	mov    BYTE PTR [ebp+0x4],0x0
c00029bc:	8d 85 52 02 00 00    	lea    eax,[ebp+0x252]
c00029c2:	e8 7b f2 ff ff       	call   c0001c42 <ld_word>
c00029c7:	66 3d 55 aa          	cmp    ax,0xaa55
c00029cb:	75 3d                	jne    c0002a0a <mount_volume+0x338>
c00029cd:	8d 45 54             	lea    eax,[ebp+0x54]
c00029d0:	e8 7a f2 ff ff       	call   c0001c4f <ld_dword>
c00029d5:	3d 52 52 61 41       	cmp    eax,0x41615252
c00029da:	75 2e                	jne    c0002a0a <mount_volume+0x338>
c00029dc:	8d 85 38 02 00 00    	lea    eax,[ebp+0x238]
c00029e2:	e8 68 f2 ff ff       	call   c0001c4f <ld_dword>
c00029e7:	3d 72 72 41 61       	cmp    eax,0x61417272
c00029ec:	75 1c                	jne    c0002a0a <mount_volume+0x338>
c00029ee:	8d 85 3c 02 00 00    	lea    eax,[ebp+0x23c]
c00029f4:	e8 56 f2 ff ff       	call   c0001c4f <ld_dword>
c00029f9:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
c00029fc:	8d 85 40 02 00 00    	lea    eax,[ebp+0x240]
c0002a02:	e8 48 f2 ff ff       	call   c0001c4f <ld_dword>
c0002a07:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
c0002a0a:	66 a1 c0 ed 02 c0    	mov    ax,ds:0xc002edc0
c0002a10:	88 5d 00             	mov    BYTE PTR [ebp+0x0],bl
c0002a13:	40                   	inc    eax
c0002a14:	31 db                	xor    ebx,ebx
c0002a16:	66 a3 c0 ed 02 c0    	mov    ds:0xc002edc0,ax
c0002a1c:	66 89 45 06          	mov    WORD PTR [ebp+0x6],ax
c0002a20:	e9 0c 02 00 00       	jmp    c0002c31 <mount_volume+0x55f>
c0002a25:	8d 85 bc 00 00 00    	lea    eax,[ebp+0xbc]
c0002a2b:	e8 12 f2 ff ff       	call   c0001c42 <ld_word>
c0002a30:	66 3d 00 01          	cmp    ax,0x100
c0002a34:	0f 85 60 fd ff ff    	jne    c000279a <mount_volume+0xc8>
c0002a3a:	80 bd c0 00 00 00 09 	cmp    BYTE PTR [ebp+0xc0],0x9
c0002a41:	0f 85 53 fd ff ff    	jne    c000279a <mount_volume+0xc8>
c0002a47:	8d 85 9c 00 00 00    	lea    eax,[ebp+0x9c]
c0002a4d:	e8 15 f2 ff ff       	call   c0001c67 <ld_qword>
c0002a52:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0002a56:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0002a5a:	8d 85 a8 00 00 00    	lea    eax,[ebp+0xa8]
c0002a60:	e8 ea f1 ff ff       	call   c0001c4f <ld_dword>
c0002a65:	89 45 20             	mov    DWORD PTR [ebp+0x20],eax
c0002a68:	8a 85 c2 00 00 00    	mov    al,BYTE PTR [ebp+0xc2]
c0002a6e:	88 45 02             	mov    BYTE PTR [ebp+0x2],al
c0002a71:	fe c8                	dec    al
c0002a73:	0f 85 21 fd ff ff    	jne    c000279a <mount_volume+0xc8>
c0002a79:	0f b6 8d c1 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc1]
c0002a80:	bb 01 00 00 00       	mov    ebx,0x1
c0002a85:	d3 e3                	shl    ebx,cl
c0002a87:	66 89 5d 0a          	mov    WORD PTR [ebp+0xa],bx
c0002a8b:	66 85 db             	test   bx,bx
c0002a8e:	0f 84 06 fd ff ff    	je     c000279a <mount_volume+0xc8>
c0002a94:	8d 85 b0 00 00 00    	lea    eax,[ebp+0xb0]
c0002a9a:	e8 b0 f1 ff ff       	call   c0001c4f <ld_dword>
c0002a9f:	89 c6                	mov    esi,eax
c0002aa1:	3d fd ff ff 7f       	cmp    eax,0x7ffffffd
c0002aa6:	0f 87 ee fc ff ff    	ja     c000279a <mount_volume+0xc8>
c0002aac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002ab0:	8d 40 02             	lea    eax,[eax+0x2]
c0002ab3:	89 55 28             	mov    DWORD PTR [ebp+0x28],edx
c0002ab6:	89 45 1c             	mov    DWORD PTR [ebp+0x1c],eax
c0002ab9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002abd:	89 45 24             	mov    DWORD PTR [ebp+0x24],eax
c0002ac0:	8d 85 ac 00 00 00    	lea    eax,[ebp+0xac]
c0002ac6:	e8 84 f1 ff ff       	call   c0001c4f <ld_dword>
c0002acb:	31 d2                	xor    edx,edx
c0002acd:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002ad1:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002ad5:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0002ad9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0002add:	89 45 3c             	mov    DWORD PTR [ebp+0x3c],eax
c0002ae0:	89 55 40             	mov    DWORD PTR [ebp+0x40],edx
c0002ae3:	8d 85 a4 00 00 00    	lea    eax,[ebp+0xa4]
c0002ae9:	e8 61 f1 ff ff       	call   c0001c4f <ld_dword>
c0002aee:	31 d2                	xor    edx,edx
c0002af0:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0002af4:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0002af8:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0002afc:	89 45 2c             	mov    DWORD PTR [ebp+0x2c],eax
c0002aff:	89 55 30             	mov    DWORD PTR [ebp+0x30],edx
c0002b02:	0f b7 c3             	movzx  eax,bx
c0002b05:	31 d2                	xor    edx,edx
c0002b07:	0f af f0             	imul   esi,eax
c0002b0a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0002b0e:	89 f0                	mov    eax,esi
c0002b10:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0002b14:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0002b18:	03 4c 24 08          	add    ecx,DWORD PTR [esp+0x8]
c0002b1c:	13 5c 24 0c          	adc    ebx,DWORD PTR [esp+0xc]
c0002b20:	39 c1                	cmp    ecx,eax
c0002b22:	89 df                	mov    edi,ebx
c0002b24:	19 d7                	sbb    edi,edx
c0002b26:	0f 82 6e fc ff ff    	jb     c000279a <mount_volume+0xc8>
c0002b2c:	8d 85 b4 00 00 00    	lea    eax,[ebp+0xb4]
c0002b32:	31 db                	xor    ebx,ebx
c0002b34:	e8 16 f1 ff ff       	call   c0001c4f <ld_dword>
c0002b39:	c7 45 38 00 00 00 00 	mov    DWORD PTR [ebp+0x38],0x0
c0002b40:	89 45 34             	mov    DWORD PTR [ebp+0x34],eax
c0002b43:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0002b4b:	85 db                	test   ebx,ebx
c0002b4d:	75 39                	jne    c0002b88 <mount_volume+0x4b6>
c0002b4f:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002b53:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c0002b57:	0f 86 3d fc ff ff    	jbe    c000279a <mount_volume+0xc8>
c0002b5d:	8b 55 34             	mov    edx,DWORD PTR [ebp+0x34]
c0002b60:	31 ff                	xor    edi,edi
c0002b62:	89 e8                	mov    eax,ebp
c0002b64:	e8 72 f3 ff ff       	call   c0001edb <clst2sect>
c0002b69:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0002b6d:	01 c6                	add    esi,eax
c0002b6f:	89 e8                	mov    eax,ebp
c0002b71:	11 d7                	adc    edi,edx
c0002b73:	89 f2                	mov    edx,esi
c0002b75:	89 f9                	mov    ecx,edi
c0002b77:	e8 a4 f8 ff ff       	call   c0002420 <move_window>
c0002b7c:	85 c0                	test   eax,eax
c0002b7e:	0f 85 07 fc ff ff    	jne    c000278b <mount_volume+0xb9>
c0002b84:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0002b88:	80 7c 1d 54 81       	cmp    BYTE PTR [ebp+ebx*1+0x54],0x81
c0002b8d:	74 0b                	je     c0002b9a <mount_volume+0x4c8>
c0002b8f:	83 c3 20             	add    ebx,0x20
c0002b92:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0002b98:	eb b1                	jmp    c0002b4b <mount_volume+0x479>
c0002b9a:	8d 75 54             	lea    esi,[ebp+0x54]
c0002b9d:	8d 44 1e 14          	lea    eax,[esi+ebx*1+0x14]
c0002ba1:	e8 a9 f0 ff ff       	call   c0001c4f <ld_dword>
c0002ba6:	89 c3                	mov    ebx,eax
c0002ba8:	83 f8 01             	cmp    eax,0x1
c0002bab:	0f 86 e9 fb ff ff    	jbe    c000279a <mount_volume+0xc8>
c0002bb1:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c0002bb4:	0f 86 e0 fb ff ff    	jbe    c000279a <mount_volume+0xc8>
c0002bba:	8d 53 fe             	lea    edx,[ebx-0x2]
c0002bbd:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0002bc1:	0f af c2             	imul   eax,edx
c0002bc4:	31 d2                	xor    edx,edx
c0002bc6:	03 45 3c             	add    eax,DWORD PTR [ebp+0x3c]
c0002bc9:	13 55 40             	adc    edx,DWORD PTR [ebp+0x40]
c0002bcc:	89 45 44             	mov    DWORD PTR [ebp+0x44],eax
c0002bcf:	89 55 48             	mov    DWORD PTR [ebp+0x48],edx
c0002bd2:	31 c9                	xor    ecx,ecx
c0002bd4:	89 da                	mov    edx,ebx
c0002bd6:	89 e8                	mov    eax,ebp
c0002bd8:	c1 ea 07             	shr    edx,0x7
c0002bdb:	03 55 2c             	add    edx,DWORD PTR [ebp+0x2c]
c0002bde:	13 4d 30             	adc    ecx,DWORD PTR [ebp+0x30]
c0002be1:	e8 3a f8 ff ff       	call   c0002420 <move_window>
c0002be6:	85 c0                	test   eax,eax
c0002be8:	0f 85 9d fb ff ff    	jne    c000278b <mount_volume+0xb9>
c0002bee:	89 d8                	mov    eax,ebx
c0002bf0:	83 e0 7f             	and    eax,0x7f
c0002bf3:	8d 04 86             	lea    eax,[esi+eax*4]
c0002bf6:	e8 54 f0 ff ff       	call   c0001c4f <ld_dword>
c0002bfb:	83 f8 ff             	cmp    eax,0xffffffff
c0002bfe:	74 0a                	je     c0002c0a <mount_volume+0x538>
c0002c00:	43                   	inc    ebx
c0002c01:	39 d8                	cmp    eax,ebx
c0002c03:	74 cd                	je     c0002bd2 <mount_volume+0x500>
c0002c05:	e9 90 fb ff ff       	jmp    c000279a <mount_volume+0xc8>
c0002c0a:	c7 45 18 ff ff ff ff 	mov    DWORD PTR [ebp+0x18],0xffffffff
c0002c11:	c7 45 14 ff ff ff ff 	mov    DWORD PTR [ebp+0x14],0xffffffff
c0002c18:	bb 04 00 00 00       	mov    ebx,0x4
c0002c1d:	e9 e8 fd ff ff       	jmp    c0002a0a <mount_volume+0x338>
c0002c22:	3d f6 0f 00 00       	cmp    eax,0xff6
c0002c27:	19 db                	sbb    ebx,ebx
c0002c29:	83 c3 02             	add    ebx,0x2
c0002c2c:	e9 93 fc ff ff       	jmp    c00028c4 <mount_volume+0x1f2>
c0002c31:	83 c4 3c             	add    esp,0x3c
c0002c34:	89 d8                	mov    eax,ebx
c0002c36:	5b                   	pop    ebx
c0002c37:	5e                   	pop    esi
c0002c38:	5f                   	pop    edi
c0002c39:	5d                   	pop    ebp
c0002c3a:	c3                   	ret    

c0002c3b <find_bitmap>:
c0002c3b:	55                   	push   ebp
c0002c3c:	57                   	push   edi
c0002c3d:	89 c7                	mov    edi,eax
c0002c3f:	56                   	push   esi
c0002c40:	8d 72 fe             	lea    esi,[edx-0x2]
c0002c43:	53                   	push   ebx
c0002c44:	83 ec 1c             	sub    esp,0x1c
c0002c47:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0002c4a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0002c4e:	83 e8 02             	sub    eax,0x2
c0002c51:	39 f0                	cmp    eax,esi
c0002c53:	77 02                	ja     c0002c57 <find_bitmap+0x1c>
c0002c55:	31 f6                	xor    esi,esi
c0002c57:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c0002c5b:	89 f3                	mov    ebx,esi
c0002c5d:	31 ed                	xor    ebp,ebp
c0002c5f:	31 c9                	xor    ecx,ecx
c0002c61:	89 da                	mov    edx,ebx
c0002c63:	89 f8                	mov    eax,edi
c0002c65:	c1 ea 0c             	shr    edx,0xc
c0002c68:	03 57 44             	add    edx,DWORD PTR [edi+0x44]
c0002c6b:	13 4f 48             	adc    ecx,DWORD PTR [edi+0x48]
c0002c6e:	e8 ad f7 ff ff       	call   c0002420 <move_window>
c0002c73:	85 c0                	test   eax,eax
c0002c75:	75 68                	jne    c0002cdf <find_bitmap+0xa4>
c0002c77:	89 da                	mov    edx,ebx
c0002c79:	89 d9                	mov    ecx,ebx
c0002c7b:	c1 ea 03             	shr    edx,0x3
c0002c7e:	83 e1 07             	and    ecx,0x7
c0002c81:	b8 01 00 00 00       	mov    eax,0x1
c0002c86:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0002c8c:	d3 e0                	shl    eax,cl
c0002c8e:	8b 4f 1c             	mov    ecx,DWORD PTR [edi+0x1c]
c0002c91:	83 e9 02             	sub    ecx,0x2
c0002c94:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002c98:	8a 4c 17 54          	mov    cl,BYTE PTR [edi+edx*1+0x54]
c0002c9c:	43                   	inc    ebx
c0002c9d:	21 c1                	and    ecx,eax
c0002c9f:	d1 e0                	shl    eax,1
c0002ca1:	39 5c 24 08          	cmp    DWORD PTR [esp+0x8],ebx
c0002ca5:	77 09                	ja     c0002cb0 <find_bitmap+0x75>
c0002ca7:	31 db                	xor    ebx,ebx
c0002ca9:	ba 00 02 00 00       	mov    edx,0x200
c0002cae:	31 c0                	xor    eax,eax
c0002cb0:	84 c9                	test   cl,cl
c0002cb2:	75 10                	jne    c0002cc4 <find_bitmap+0x89>
c0002cb4:	45                   	inc    ebp
c0002cb5:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0002cb9:	75 0f                	jne    c0002cca <find_bitmap+0x8f>
c0002cbb:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0002cbf:	83 c0 02             	add    eax,0x2
c0002cc2:	eb 22                	jmp    c0002ce6 <find_bitmap+0xab>
c0002cc4:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0002cc8:	31 ed                	xor    ebp,ebp
c0002cca:	39 de                	cmp    esi,ebx
c0002ccc:	74 16                	je     c0002ce4 <find_bitmap+0xa9>
c0002cce:	84 c0                	test   al,al
c0002cd0:	75 c6                	jne    c0002c98 <find_bitmap+0x5d>
c0002cd2:	42                   	inc    edx
c0002cd3:	81 fa ff 01 00 00    	cmp    edx,0x1ff
c0002cd9:	77 84                	ja     c0002c5f <find_bitmap+0x24>
c0002cdb:	b0 01                	mov    al,0x1
c0002cdd:	eb b9                	jmp    c0002c98 <find_bitmap+0x5d>
c0002cdf:	83 c8 ff             	or     eax,0xffffffff
c0002ce2:	eb 02                	jmp    c0002ce6 <find_bitmap+0xab>
c0002ce4:	31 c0                	xor    eax,eax
c0002ce6:	83 c4 1c             	add    esp,0x1c
c0002ce9:	5b                   	pop    ebx
c0002cea:	5e                   	pop    esi
c0002ceb:	5f                   	pop    edi
c0002cec:	5d                   	pop    ebp
c0002ced:	c3                   	ret    

c0002cee <change_bitmap>:
c0002cee:	55                   	push   ebp
c0002cef:	89 cd                	mov    ebp,ecx
c0002cf1:	57                   	push   edi
c0002cf2:	8d 4a fe             	lea    ecx,[edx-0x2]
c0002cf5:	56                   	push   esi
c0002cf6:	89 c7                	mov    edi,eax
c0002cf8:	53                   	push   ebx
c0002cf9:	89 c8                	mov    eax,ecx
c0002cfb:	83 ec 1c             	sub    esp,0x1c
c0002cfe:	31 d2                	xor    edx,edx
c0002d00:	89 ce                	mov    esi,ecx
c0002d02:	c1 e8 0c             	shr    eax,0xc
c0002d05:	bb 01 00 00 00       	mov    ebx,0x1
c0002d0a:	03 47 44             	add    eax,DWORD PTR [edi+0x44]
c0002d0d:	13 57 48             	adc    edx,DWORD PTR [edi+0x48]
c0002d10:	c1 ee 03             	shr    esi,0x3
c0002d13:	83 e1 07             	and    ecx,0x7
c0002d16:	81 e6 ff 01 00 00    	and    esi,0x1ff
c0002d1c:	d3 e3                	shl    ebx,cl
c0002d1e:	88 5c 24 07          	mov    BYTE PTR [esp+0x7],bl
c0002d22:	89 c1                	mov    ecx,eax
c0002d24:	89 d3                	mov    ebx,edx
c0002d26:	83 c1 01             	add    ecx,0x1
c0002d29:	83 d3 00             	adc    ebx,0x0
c0002d2c:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002d30:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0002d34:	89 d1                	mov    ecx,edx
c0002d36:	89 c2                	mov    edx,eax
c0002d38:	89 f8                	mov    eax,edi
c0002d3a:	e8 e1 f6 ff ff       	call   c0002420 <move_window>
c0002d3f:	89 c1                	mov    ecx,eax
c0002d41:	85 c0                	test   eax,eax
c0002d43:	75 48                	jne    c0002d8d <change_bitmap+0x9f>
c0002d45:	31 d2                	xor    edx,edx
c0002d47:	8a 44 37 54          	mov    al,BYTE PTR [edi+esi*1+0x54]
c0002d4b:	84 44 24 07          	test   BYTE PTR [esp+0x7],al
c0002d4f:	0f 95 c2             	setne  dl
c0002d52:	3b 54 24 30          	cmp    edx,DWORD PTR [esp+0x30]
c0002d56:	74 3c                	je     c0002d94 <change_bitmap+0xa6>
c0002d58:	32 44 24 07          	xor    al,BYTE PTR [esp+0x7]
c0002d5c:	4d                   	dec    ebp
c0002d5d:	88 44 37 54          	mov    BYTE PTR [edi+esi*1+0x54],al
c0002d61:	c6 47 03 01          	mov    BYTE PTR [edi+0x3],0x1
c0002d65:	74 32                	je     c0002d99 <change_bitmap+0xab>
c0002d67:	d0 64 24 07          	shl    BYTE PTR [esp+0x7],1
c0002d6b:	75 d8                	jne    c0002d45 <change_bitmap+0x57>
c0002d6d:	8d 46 01             	lea    eax,[esi+0x1]
c0002d70:	c6 44 24 07 01       	mov    BYTE PTR [esp+0x7],0x1
c0002d75:	89 c3                	mov    ebx,eax
c0002d77:	31 f6                	xor    esi,esi
c0002d79:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0002d7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002d81:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0002d87:	74 99                	je     c0002d22 <change_bitmap+0x34>
c0002d89:	89 de                	mov    esi,ebx
c0002d8b:	eb b8                	jmp    c0002d45 <change_bitmap+0x57>
c0002d8d:	b9 01 00 00 00       	mov    ecx,0x1
c0002d92:	eb 05                	jmp    c0002d99 <change_bitmap+0xab>
c0002d94:	b9 02 00 00 00       	mov    ecx,0x2
c0002d99:	83 c4 1c             	add    esp,0x1c
c0002d9c:	89 c8                	mov    eax,ecx
c0002d9e:	5b                   	pop    ebx
c0002d9f:	5e                   	pop    esi
c0002da0:	5f                   	pop    edi
c0002da1:	5d                   	pop    ebp
c0002da2:	c3                   	ret    

c0002da3 <put_fat>:
c0002da3:	83 fa 01             	cmp    edx,0x1
c0002da6:	0f 86 7b 01 00 00    	jbe    c0002f27 <put_fat+0x184>
c0002dac:	55                   	push   ebp
c0002dad:	57                   	push   edi
c0002dae:	89 cf                	mov    edi,ecx
c0002db0:	56                   	push   esi
c0002db1:	b9 02 00 00 00       	mov    ecx,0x2
c0002db6:	53                   	push   ebx
c0002db7:	89 c6                	mov    esi,eax
c0002db9:	83 ec 1c             	sub    esp,0x1c
c0002dbc:	89 d3                	mov    ebx,edx
c0002dbe:	39 50 1c             	cmp    DWORD PTR [eax+0x1c],edx
c0002dc1:	0f 86 68 01 00 00    	jbe    c0002f2f <put_fat+0x18c>
c0002dc7:	8a 00                	mov    al,BYTE PTR [eax]
c0002dc9:	3c 02                	cmp    al,0x2
c0002dcb:	0f 84 c7 00 00 00    	je     c0002e98 <put_fat+0xf5>
c0002dd1:	77 09                	ja     c0002ddc <put_fat+0x39>
c0002dd3:	fe c8                	dec    al
c0002dd5:	74 17                	je     c0002dee <put_fat+0x4b>
c0002dd7:	e9 53 01 00 00       	jmp    c0002f2f <put_fat+0x18c>
c0002ddc:	b9 02 00 00 00       	mov    ecx,0x2
c0002de1:	3c 04                	cmp    al,0x4
c0002de3:	0f 86 e1 00 00 00    	jbe    c0002eca <put_fat+0x127>
c0002de9:	e9 41 01 00 00       	jmp    c0002f2f <put_fat+0x18c>
c0002dee:	89 d5                	mov    ebp,edx
c0002df0:	31 c9                	xor    ecx,ecx
c0002df2:	d1 ed                	shr    ebp,1
c0002df4:	89 f0                	mov    eax,esi
c0002df6:	01 d5                	add    ebp,edx
c0002df8:	89 ea                	mov    edx,ebp
c0002dfa:	c1 ea 09             	shr    edx,0x9
c0002dfd:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e00:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e03:	e8 18 f6 ff ff       	call   c0002420 <move_window>
c0002e08:	89 c1                	mov    ecx,eax
c0002e0a:	85 c0                	test   eax,eax
c0002e0c:	0f 85 1d 01 00 00    	jne    c0002f2f <put_fat+0x18c>
c0002e12:	8d 46 54             	lea    eax,[esi+0x54]
c0002e15:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002e19:	8d 45 01             	lea    eax,[ebp+0x1]
c0002e1c:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e22:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0002e26:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e2a:	89 f8                	mov    eax,edi
c0002e2c:	83 e3 01             	and    ebx,0x1
c0002e2f:	74 0d                	je     c0002e3e <put_fat+0x9b>
c0002e31:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c0002e34:	89 fa                	mov    edx,edi
c0002e36:	83 e0 0f             	and    eax,0xf
c0002e39:	c1 e2 04             	shl    edx,0x4
c0002e3c:	09 d0                	or     eax,edx
c0002e3e:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0002e41:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0002e45:	31 c9                	xor    ecx,ecx
c0002e47:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e4b:	c1 ea 09             	shr    edx,0x9
c0002e4e:	89 f0                	mov    eax,esi
c0002e50:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002e53:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002e56:	e8 c5 f5 ff ff       	call   c0002420 <move_window>
c0002e5b:	89 c1                	mov    ecx,eax
c0002e5d:	85 c0                	test   eax,eax
c0002e5f:	0f 85 ca 00 00 00    	jne    c0002f2f <put_fat+0x18c>
c0002e65:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c0002e69:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0002e6f:	03 6c 24 08          	add    ebp,DWORD PTR [esp+0x8]
c0002e73:	85 db                	test   ebx,ebx
c0002e75:	74 07                	je     c0002e7e <put_fat+0xdb>
c0002e77:	c1 ef 04             	shr    edi,0x4
c0002e7a:	89 fa                	mov    edx,edi
c0002e7c:	eb 0e                	jmp    c0002e8c <put_fat+0xe9>
c0002e7e:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0002e81:	c1 ef 08             	shr    edi,0x8
c0002e84:	83 e2 f0             	and    edx,0xfffffff0
c0002e87:	83 e7 0f             	and    edi,0xf
c0002e8a:	09 fa                	or     edx,edi
c0002e8c:	88 55 00             	mov    BYTE PTR [ebp+0x0],dl
c0002e8f:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002e93:	e9 97 00 00 00       	jmp    c0002f2f <put_fat+0x18c>
c0002e98:	31 c9                	xor    ecx,ecx
c0002e9a:	c1 ea 08             	shr    edx,0x8
c0002e9d:	89 f0                	mov    eax,esi
c0002e9f:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ea2:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ea5:	e8 76 f5 ff ff       	call   c0002420 <move_window>
c0002eaa:	89 c1                	mov    ecx,eax
c0002eac:	85 c0                	test   eax,eax
c0002eae:	75 7f                	jne    c0002f2f <put_fat+0x18c>
c0002eb0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002eb4:	01 db                	add    ebx,ebx
c0002eb6:	0f b7 d7             	movzx  edx,di
c0002eb9:	81 e3 fe 01 00 00    	and    ebx,0x1fe
c0002ebf:	8d 44 1e 54          	lea    eax,[esi+ebx*1+0x54]
c0002ec3:	e8 ec ed ff ff       	call   c0001cb4 <st_word>
c0002ec8:	eb 53                	jmp    c0002f1d <put_fat+0x17a>
c0002eca:	31 c9                	xor    ecx,ecx
c0002ecc:	c1 ea 07             	shr    edx,0x7
c0002ecf:	89 f0                	mov    eax,esi
c0002ed1:	03 56 2c             	add    edx,DWORD PTR [esi+0x2c]
c0002ed4:	13 4e 30             	adc    ecx,DWORD PTR [esi+0x30]
c0002ed7:	e8 44 f5 ff ff       	call   c0002420 <move_window>
c0002edc:	89 c1                	mov    ecx,eax
c0002ede:	85 c0                	test   eax,eax
c0002ee0:	75 4d                	jne    c0002f2f <put_fat+0x18c>
c0002ee2:	c1 e3 02             	shl    ebx,0x2
c0002ee5:	81 e3 fc 01 00 00    	and    ebx,0x1fc
c0002eeb:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0002eee:	8d 5c 1e 54          	lea    ebx,[esi+ebx*1+0x54]
c0002ef2:	74 1c                	je     c0002f10 <put_fat+0x16d>
c0002ef4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0002ef8:	81 e7 ff ff ff 0f    	and    edi,0xfffffff
c0002efe:	89 d8                	mov    eax,ebx
c0002f00:	e8 4a ed ff ff       	call   c0001c4f <ld_dword>
c0002f05:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f09:	25 00 00 00 f0       	and    eax,0xf0000000
c0002f0e:	09 c7                	or     edi,eax
c0002f10:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0002f14:	89 fa                	mov    edx,edi
c0002f16:	89 d8                	mov    eax,ebx
c0002f18:	e8 9b ed ff ff       	call   c0001cb8 <st_dword>
c0002f1d:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0002f21:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0002f25:	eb 08                	jmp    c0002f2f <put_fat+0x18c>
c0002f27:	b9 02 00 00 00       	mov    ecx,0x2
c0002f2c:	89 c8                	mov    eax,ecx
c0002f2e:	c3                   	ret    
c0002f2f:	83 c4 1c             	add    esp,0x1c
c0002f32:	89 c8                	mov    eax,ecx
c0002f34:	5b                   	pop    ebx
c0002f35:	5e                   	pop    esi
c0002f36:	5f                   	pop    edi
c0002f37:	5d                   	pop    ebp
c0002f38:	c3                   	ret    

c0002f39 <fill_last_frag>:
c0002f39:	57                   	push   edi
c0002f3a:	89 cf                	mov    edi,ecx
c0002f3c:	56                   	push   esi
c0002f3d:	89 d6                	mov    esi,edx
c0002f3f:	53                   	push   ebx
c0002f40:	89 c3                	mov    ebx,eax
c0002f42:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0002f45:	85 c0                	test   eax,eax
c0002f47:	74 21                	je     c0002f6a <fill_last_frag+0x31>
c0002f49:	89 f9                	mov    ecx,edi
c0002f4b:	83 f8 01             	cmp    eax,0x1
c0002f4e:	76 05                	jbe    c0002f55 <fill_last_frag+0x1c>
c0002f50:	8d 4e 02             	lea    ecx,[esi+0x2]
c0002f53:	29 c1                	sub    ecx,eax
c0002f55:	8d 56 01             	lea    edx,[esi+0x1]
c0002f58:	29 c2                	sub    edx,eax
c0002f5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f5c:	e8 42 fe ff ff       	call   c0002da3 <put_fat>
c0002f61:	85 c0                	test   eax,eax
c0002f63:	75 05                	jne    c0002f6a <fill_last_frag+0x31>
c0002f65:	ff 4b 18             	dec    DWORD PTR [ebx+0x18]
c0002f68:	eb d8                	jmp    c0002f42 <fill_last_frag+0x9>
c0002f6a:	5b                   	pop    ebx
c0002f6b:	5e                   	pop    esi
c0002f6c:	5f                   	pop    edi
c0002f6d:	c3                   	ret    

c0002f6e <fill_first_frag>:
c0002f6e:	80 78 07 03          	cmp    BYTE PTR [eax+0x7],0x3
c0002f72:	75 2d                	jne    c0002fa1 <fill_first_frag+0x33>
c0002f74:	57                   	push   edi
c0002f75:	56                   	push   esi
c0002f76:	53                   	push   ebx
c0002f77:	89 c3                	mov    ebx,eax
c0002f79:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c0002f7c:	8b 78 14             	mov    edi,DWORD PTR [eax+0x14]
c0002f7f:	01 d7                	add    edi,edx
c0002f81:	39 fa                	cmp    edx,edi
c0002f83:	74 14                	je     c0002f99 <fill_first_frag+0x2b>
c0002f85:	8d 72 01             	lea    esi,[edx+0x1]
c0002f88:	8b 03                	mov    eax,DWORD PTR [ebx]
c0002f8a:	89 f1                	mov    ecx,esi
c0002f8c:	e8 12 fe ff ff       	call   c0002da3 <put_fat>
c0002f91:	89 f2                	mov    edx,esi
c0002f93:	85 c0                	test   eax,eax
c0002f95:	74 ea                	je     c0002f81 <fill_first_frag+0x13>
c0002f97:	eb 0b                	jmp    c0002fa4 <fill_first_frag+0x36>
c0002f99:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0002f9d:	31 c0                	xor    eax,eax
c0002f9f:	eb 03                	jmp    c0002fa4 <fill_first_frag+0x36>
c0002fa1:	31 c0                	xor    eax,eax
c0002fa3:	c3                   	ret    
c0002fa4:	5b                   	pop    ebx
c0002fa5:	5e                   	pop    esi
c0002fa6:	5f                   	pop    edi
c0002fa7:	c3                   	ret    

c0002fa8 <get_fat>:
c0002fa8:	83 fa 01             	cmp    edx,0x1
c0002fab:	0f 86 db 01 00 00    	jbe    c000318c <get_fat+0x1e4>
c0002fb1:	55                   	push   ebp
c0002fb2:	b9 01 00 00 00       	mov    ecx,0x1
c0002fb7:	57                   	push   edi
c0002fb8:	56                   	push   esi
c0002fb9:	53                   	push   ebx
c0002fba:	83 ec 1c             	sub    esp,0x1c
c0002fbd:	8b 38                	mov    edi,DWORD PTR [eax]
c0002fbf:	39 57 1c             	cmp    DWORD PTR [edi+0x1c],edx
c0002fc2:	0f 86 cc 01 00 00    	jbe    c0003194 <get_fat+0x1ec>
c0002fc8:	89 c3                	mov    ebx,eax
c0002fca:	89 d6                	mov    esi,edx
c0002fcc:	8a 07                	mov    al,BYTE PTR [edi]
c0002fce:	3c 02                	cmp    al,0x2
c0002fd0:	0f 84 99 00 00 00    	je     c000306f <get_fat+0xc7>
c0002fd6:	77 09                	ja     c0002fe1 <get_fat+0x39>
c0002fd8:	fe c8                	dec    al
c0002fda:	74 1a                	je     c0002ff6 <get_fat+0x4e>
c0002fdc:	e9 b3 01 00 00       	jmp    c0003194 <get_fat+0x1ec>
c0002fe1:	3c 03                	cmp    al,0x3
c0002fe3:	0f 84 b5 00 00 00    	je     c000309e <get_fat+0xf6>
c0002fe9:	3c 04                	cmp    al,0x4
c0002feb:	0f 84 e3 00 00 00    	je     c00030d4 <get_fat+0x12c>
c0002ff1:	e9 9e 01 00 00       	jmp    c0003194 <get_fat+0x1ec>
c0002ff6:	89 d3                	mov    ebx,edx
c0002ff8:	31 c9                	xor    ecx,ecx
c0002ffa:	d1 eb                	shr    ebx,1
c0002ffc:	89 f8                	mov    eax,edi
c0002ffe:	01 d3                	add    ebx,edx
c0003000:	89 da                	mov    edx,ebx
c0003002:	c1 ea 09             	shr    edx,0x9
c0003005:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003008:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000300b:	e8 10 f4 ff ff       	call   c0002420 <move_window>
c0003010:	85 c0                	test   eax,eax
c0003012:	74 08                	je     c000301c <get_fat+0x74>
c0003014:	83 c9 ff             	or     ecx,0xffffffff
c0003017:	e9 78 01 00 00       	jmp    c0003194 <get_fat+0x1ec>
c000301c:	8d 6b 01             	lea    ebp,[ebx+0x1]
c000301f:	31 c9                	xor    ecx,ecx
c0003021:	81 e3 ff 01 00 00    	and    ebx,0x1ff
c0003027:	89 ea                	mov    edx,ebp
c0003029:	8a 5c 1f 54          	mov    bl,BYTE PTR [edi+ebx*1+0x54]
c000302d:	c1 ea 09             	shr    edx,0x9
c0003030:	89 f8                	mov    eax,edi
c0003032:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003035:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003038:	e8 e3 f3 ff ff       	call   c0002420 <move_window>
c000303d:	85 c0                	test   eax,eax
c000303f:	75 d3                	jne    c0003014 <get_fat+0x6c>
c0003041:	0f b6 c3             	movzx  eax,bl
c0003044:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c000304a:	0f b6 5c 2f 54       	movzx  ebx,BYTE PTR [edi+ebp*1+0x54]
c000304f:	c1 e3 08             	shl    ebx,0x8
c0003052:	09 c3                	or     ebx,eax
c0003054:	89 d9                	mov    ecx,ebx
c0003056:	81 e1 ff 0f 00 00    	and    ecx,0xfff
c000305c:	83 e6 01             	and    esi,0x1
c000305f:	0f 84 2f 01 00 00    	je     c0003194 <get_fat+0x1ec>
c0003065:	89 d9                	mov    ecx,ebx
c0003067:	c1 e9 04             	shr    ecx,0x4
c000306a:	e9 25 01 00 00       	jmp    c0003194 <get_fat+0x1ec>
c000306f:	31 c9                	xor    ecx,ecx
c0003071:	c1 ea 08             	shr    edx,0x8
c0003074:	89 f8                	mov    eax,edi
c0003076:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003079:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c000307c:	e8 9f f3 ff ff       	call   c0002420 <move_window>
c0003081:	85 c0                	test   eax,eax
c0003083:	75 8f                	jne    c0003014 <get_fat+0x6c>
c0003085:	01 f6                	add    esi,esi
c0003087:	81 e6 fe 01 00 00    	and    esi,0x1fe
c000308d:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003091:	e8 ac eb ff ff       	call   c0001c42 <ld_word>
c0003096:	0f b7 c8             	movzx  ecx,ax
c0003099:	e9 f6 00 00 00       	jmp    c0003194 <get_fat+0x1ec>
c000309e:	31 c9                	xor    ecx,ecx
c00030a0:	c1 ea 07             	shr    edx,0x7
c00030a3:	89 f8                	mov    eax,edi
c00030a5:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c00030a8:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c00030ab:	e8 70 f3 ff ff       	call   c0002420 <move_window>
c00030b0:	85 c0                	test   eax,eax
c00030b2:	0f 85 5c ff ff ff    	jne    c0003014 <get_fat+0x6c>
c00030b8:	c1 e6 02             	shl    esi,0x2
c00030bb:	81 e6 fc 01 00 00    	and    esi,0x1fc
c00030c1:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c00030c5:	e8 85 eb ff ff       	call   c0001c4f <ld_dword>
c00030ca:	25 ff ff ff 0f       	and    eax,0xfffffff
c00030cf:	e9 b4 00 00 00       	jmp    c0003188 <get_fat+0x1e0>
c00030d4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00030d7:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00030da:	89 d1                	mov    ecx,edx
c00030dc:	09 c1                	or     ecx,eax
c00030de:	74 06                	je     c00030e6 <get_fat+0x13e>
c00030e0:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c00030e4:	75 0f                	jne    c00030f5 <get_fat+0x14d>
c00030e6:	b9 01 00 00 00       	mov    ecx,0x1
c00030eb:	80 7b 07 00          	cmp    BYTE PTR [ebx+0x7],0x0
c00030ef:	0f 85 9f 00 00 00    	jne    c0003194 <get_fat+0x1ec>
c00030f5:	66 8b 4f 0a          	mov    cx,WORD PTR [edi+0xa]
c00030f9:	89 f5                	mov    ebp,esi
c00030fb:	66 89 4c 24 0e       	mov    WORD PTR [esp+0xe],cx
c0003100:	2b 6b 08             	sub    ebp,DWORD PTR [ebx+0x8]
c0003103:	8a 4b 07             	mov    cl,BYTE PTR [ebx+0x7]
c0003106:	80 f9 02             	cmp    cl,0x2
c0003109:	75 35                	jne    c0003140 <get_fat+0x198>
c000310b:	83 c0 ff             	add    eax,0xffffffff
c000310e:	0f b7 4c 24 0e       	movzx  ecx,WORD PTR [esp+0xe]
c0003113:	83 d2 ff             	adc    edx,0xffffffff
c0003116:	31 db                	xor    ebx,ebx
c0003118:	0f ac d0 09          	shrd   eax,edx,0x9
c000311c:	53                   	push   ebx
c000311d:	c1 ea 09             	shr    edx,0x9
c0003120:	51                   	push   ecx
c0003121:	52                   	push   edx
c0003122:	50                   	push   eax
c0003123:	e8 9c 40 02 00       	call   c00271c4 <__udivdi3>
c0003128:	83 c4 10             	add    esp,0x10
c000312b:	b9 01 00 00 00       	mov    ecx,0x1
c0003130:	39 c5                	cmp    ebp,eax
c0003132:	77 60                	ja     c0003194 <get_fat+0x1ec>
c0003134:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c0003139:	74 59                	je     c0003194 <get_fat+0x1ec>
c000313b:	8d 4e 01             	lea    ecx,[esi+0x1]
c000313e:	eb 54                	jmp    c0003194 <get_fat+0x1ec>
c0003140:	80 f9 03             	cmp    cl,0x3
c0003143:	75 05                	jne    c000314a <get_fat+0x1a2>
c0003145:	39 6b 14             	cmp    DWORD PTR [ebx+0x14],ebp
c0003148:	77 f1                	ja     c000313b <get_fat+0x193>
c000314a:	b9 ff ff ff 7f       	mov    ecx,0x7fffffff
c000314f:	83 7b 18 00          	cmp    DWORD PTR [ebx+0x18],0x0
c0003153:	75 3f                	jne    c0003194 <get_fat+0x1ec>
c0003155:	31 c9                	xor    ecx,ecx
c0003157:	89 f2                	mov    edx,esi
c0003159:	89 f8                	mov    eax,edi
c000315b:	c1 ea 07             	shr    edx,0x7
c000315e:	03 57 2c             	add    edx,DWORD PTR [edi+0x2c]
c0003161:	13 4f 30             	adc    ecx,DWORD PTR [edi+0x30]
c0003164:	e8 b7 f2 ff ff       	call   c0002420 <move_window>
c0003169:	85 c0                	test   eax,eax
c000316b:	0f 85 a3 fe ff ff    	jne    c0003014 <get_fat+0x6c>
c0003171:	c1 e6 02             	shl    esi,0x2
c0003174:	81 e6 fc 01 00 00    	and    esi,0x1fc
c000317a:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c000317e:	e8 cc ea ff ff       	call   c0001c4f <ld_dword>
c0003183:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0003188:	89 c1                	mov    ecx,eax
c000318a:	eb 08                	jmp    c0003194 <get_fat+0x1ec>
c000318c:	b9 01 00 00 00       	mov    ecx,0x1
c0003191:	89 c8                	mov    eax,ecx
c0003193:	c3                   	ret    
c0003194:	83 c4 1c             	add    esp,0x1c
c0003197:	89 c8                	mov    eax,ecx
c0003199:	5b                   	pop    ebx
c000319a:	5e                   	pop    esi
c000319b:	5f                   	pop    edi
c000319c:	5d                   	pop    ebp
c000319d:	c3                   	ret    

c000319e <dir_sdi>:
c000319e:	55                   	push   ebp
c000319f:	57                   	push   edi
c00031a0:	56                   	push   esi
c00031a1:	53                   	push   ebx
c00031a2:	89 c3                	mov    ebx,eax
c00031a4:	83 ec 1c             	sub    esp,0x1c
c00031a7:	8b 38                	mov    edi,DWORD PTR [eax]
c00031a9:	31 c0                	xor    eax,eax
c00031ab:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00031ae:	0f 94 c0             	sete   al
c00031b1:	48                   	dec    eax
c00031b2:	25 00 00 20 f0       	and    eax,0xf0200000
c00031b7:	05 00 00 00 10       	add    eax,0x10000000
c00031bc:	39 d0                	cmp    eax,edx
c00031be:	77 0a                	ja     c00031ca <dir_sdi+0x2c>
c00031c0:	b8 02 00 00 00       	mov    eax,0x2
c00031c5:	e9 c4 00 00 00       	jmp    c000328e <dir_sdi+0xf0>
c00031ca:	89 d6                	mov    esi,edx
c00031cc:	f6 c2 1f             	test   dl,0x1f
c00031cf:	75 ef                	jne    c00031c0 <dir_sdi+0x22>
c00031d1:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c00031d4:	89 53 28             	mov    DWORD PTR [ebx+0x28],edx
c00031d7:	85 c9                	test   ecx,ecx
c00031d9:	75 2d                	jne    c0003208 <dir_sdi+0x6a>
c00031db:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c00031de:	77 1b                	ja     c00031fb <dir_sdi+0x5d>
c00031e0:	89 f2                	mov    edx,esi
c00031e2:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c00031e6:	c1 ea 05             	shr    edx,0x5
c00031e9:	39 c2                	cmp    edx,eax
c00031eb:	73 d3                	jae    c00031c0 <dir_sdi+0x22>
c00031ed:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031f0:	8b 57 38             	mov    edx,DWORD PTR [edi+0x38]
c00031f3:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c00031f6:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c00031f9:	eb 4b                	jmp    c0003246 <dir_sdi+0xa8>
c00031fb:	8b 47 34             	mov    eax,DWORD PTR [edi+0x34]
c00031fe:	c6 43 07 00          	mov    BYTE PTR [ebx+0x7],0x0
c0003202:	85 c0                	test   eax,eax
c0003204:	74 da                	je     c00031e0 <dir_sdi+0x42>
c0003206:	89 c1                	mov    ecx,eax
c0003208:	0f b7 6f 0a          	movzx  ebp,WORD PTR [edi+0xa]
c000320c:	c1 e5 09             	shl    ebp,0x9
c000320f:	89 ca                	mov    edx,ecx
c0003211:	39 ee                	cmp    esi,ebp
c0003213:	72 1c                	jb     c0003231 <dir_sdi+0x93>
c0003215:	89 d8                	mov    eax,ebx
c0003217:	e8 8c fd ff ff       	call   c0002fa8 <get_fat>
c000321c:	89 c1                	mov    ecx,eax
c000321e:	83 f8 ff             	cmp    eax,0xffffffff
c0003221:	74 66                	je     c0003289 <dir_sdi+0xeb>
c0003223:	83 f8 01             	cmp    eax,0x1
c0003226:	76 98                	jbe    c00031c0 <dir_sdi+0x22>
c0003228:	39 47 1c             	cmp    DWORD PTR [edi+0x1c],eax
c000322b:	76 93                	jbe    c00031c0 <dir_sdi+0x22>
c000322d:	29 ee                	sub    esi,ebp
c000322f:	eb de                	jmp    c000320f <dir_sdi+0x71>
c0003231:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0003235:	89 f8                	mov    eax,edi
c0003237:	e8 9f ec ff ff       	call   c0001edb <clst2sect>
c000323c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003240:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003243:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003246:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0003249:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c000324c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000324f:	89 d1                	mov    ecx,edx
c0003251:	09 c1                	or     ecx,eax
c0003253:	0f 84 67 ff ff ff    	je     c00031c0 <dir_sdi+0x22>
c0003259:	89 f1                	mov    ecx,esi
c000325b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0003263:	c1 e9 09             	shr    ecx,0x9
c0003266:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000326a:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000326e:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0003272:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0003275:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000327b:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000327e:	8d 44 37 54          	lea    eax,[edi+esi*1+0x54]
c0003282:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0003285:	31 c0                	xor    eax,eax
c0003287:	eb 05                	jmp    c000328e <dir_sdi+0xf0>
c0003289:	b8 01 00 00 00       	mov    eax,0x1
c000328e:	83 c4 1c             	add    esp,0x1c
c0003291:	5b                   	pop    ebx
c0003292:	5e                   	pop    esi
c0003293:	5f                   	pop    edi
c0003294:	5d                   	pop    ebp
c0003295:	c3                   	ret    

c0003296 <create_chain>:
c0003296:	55                   	push   ebp
c0003297:	89 c5                	mov    ebp,eax
c0003299:	57                   	push   edi
c000329a:	56                   	push   esi
c000329b:	53                   	push   ebx
c000329c:	83 ec 1c             	sub    esp,0x1c
c000329f:	85 d2                	test   edx,edx
c00032a1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00032a5:	8b 30                	mov    esi,DWORD PTR [eax]
c00032a7:	75 0e                	jne    c00032b7 <create_chain+0x21>
c00032a9:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c00032ac:	85 ff                	test   edi,edi
c00032ae:	74 39                	je     c00032e9 <create_chain+0x53>
c00032b0:	39 7e 1c             	cmp    DWORD PTR [esi+0x1c],edi
c00032b3:	77 39                	ja     c00032ee <create_chain+0x58>
c00032b5:	eb 32                	jmp    c00032e9 <create_chain+0x53>
c00032b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00032bb:	e8 e8 fc ff ff       	call   c0002fa8 <get_fat>
c00032c0:	89 c3                	mov    ebx,eax
c00032c2:	83 f8 01             	cmp    eax,0x1
c00032c5:	77 0a                	ja     c00032d1 <create_chain+0x3b>
c00032c7:	bb 01 00 00 00       	mov    ebx,0x1
c00032cc:	e9 ba 01 00 00       	jmp    c000348b <create_chain+0x1f5>
c00032d1:	83 f8 ff             	cmp    eax,0xffffffff
c00032d4:	0f 84 62 01 00 00    	je     c000343c <create_chain+0x1a6>
c00032da:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00032dd:	0f 87 a8 01 00 00    	ja     c000348b <create_chain+0x1f5>
c00032e3:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00032e7:	eb 05                	jmp    c00032ee <create_chain+0x58>
c00032e9:	bf 01 00 00 00       	mov    edi,0x1
c00032ee:	83 7e 18 00          	cmp    DWORD PTR [esi+0x18],0x0
c00032f2:	75 07                	jne    c00032fb <create_chain+0x65>
c00032f4:	31 db                	xor    ebx,ebx
c00032f6:	e9 90 01 00 00       	jmp    c000348b <create_chain+0x1f5>
c00032fb:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c00032fe:	75 74                	jne    c0003374 <create_chain+0xde>
c0003300:	b9 01 00 00 00       	mov    ecx,0x1
c0003305:	89 fa                	mov    edx,edi
c0003307:	89 f0                	mov    eax,esi
c0003309:	e8 2d f9 ff ff       	call   c0002c3b <find_bitmap>
c000330e:	89 c3                	mov    ebx,eax
c0003310:	8d 40 ff             	lea    eax,[eax-0x1]
c0003313:	83 f8 fd             	cmp    eax,0xfffffffd
c0003316:	0f 87 6f 01 00 00    	ja     c000348b <create_chain+0x1f5>
c000331c:	83 ec 0c             	sub    esp,0xc
c000331f:	b9 01 00 00 00       	mov    ecx,0x1
c0003324:	6a 01                	push   0x1
c0003326:	89 da                	mov    edx,ebx
c0003328:	89 f0                	mov    eax,esi
c000332a:	e8 bf f9 ff ff       	call   c0002cee <change_bitmap>
c000332f:	83 c4 10             	add    esp,0x10
c0003332:	83 f8 02             	cmp    eax,0x2
c0003335:	74 90                	je     c00032c7 <create_chain+0x31>
c0003337:	83 f8 01             	cmp    eax,0x1
c000333a:	0f 84 fc 00 00 00    	je     c000343c <create_chain+0x1a6>
c0003340:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003345:	75 09                	jne    c0003350 <create_chain+0xba>
c0003347:	c6 45 07 02          	mov    BYTE PTR [ebp+0x7],0x2
c000334b:	e9 0c 01 00 00       	jmp    c000345c <create_chain+0x1c6>
c0003350:	80 7d 07 02          	cmp    BYTE PTR [ebp+0x7],0x2
c0003354:	0f 85 e7 00 00 00    	jne    c0003441 <create_chain+0x1ab>
c000335a:	8d 57 01             	lea    edx,[edi+0x1]
c000335d:	39 da                	cmp    edx,ebx
c000335f:	0f 84 f7 00 00 00    	je     c000345c <create_chain+0x1c6>
c0003365:	2b 7d 08             	sub    edi,DWORD PTR [ebp+0x8]
c0003368:	c6 45 07 03          	mov    BYTE PTR [ebp+0x7],0x3
c000336c:	89 7d 14             	mov    DWORD PTR [ebp+0x14],edi
c000336f:	e9 cd 00 00 00       	jmp    c0003441 <create_chain+0x1ab>
c0003374:	3b 7c 24 0c          	cmp    edi,DWORD PTR [esp+0xc]
c0003378:	75 41                	jne    c00033bb <create_chain+0x125>
c000337a:	8d 5f 01             	lea    ebx,[edi+0x1]
c000337d:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c0003380:	77 05                	ja     c0003387 <create_chain+0xf1>
c0003382:	bb 02 00 00 00       	mov    ebx,0x2
c0003387:	89 da                	mov    edx,ebx
c0003389:	89 e8                	mov    eax,ebp
c000338b:	e8 18 fc ff ff       	call   c0002fa8 <get_fat>
c0003390:	83 f8 01             	cmp    eax,0x1
c0003393:	0f 84 2e ff ff ff    	je     c00032c7 <create_chain+0x31>
c0003399:	83 f8 ff             	cmp    eax,0xffffffff
c000339c:	0f 84 9a 00 00 00    	je     c000343c <create_chain+0x1a6>
c00033a2:	85 c0                	test   eax,eax
c00033a4:	74 11                	je     c00033b7 <create_chain+0x121>
c00033a6:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c00033a9:	83 f8 01             	cmp    eax,0x1
c00033ac:	76 0d                	jbe    c00033bb <create_chain+0x125>
c00033ae:	39 46 1c             	cmp    DWORD PTR [esi+0x1c],eax
c00033b1:	76 08                	jbe    c00033bb <create_chain+0x125>
c00033b3:	89 c7                	mov    edi,eax
c00033b5:	eb 04                	jmp    c00033bb <create_chain+0x125>
c00033b7:	85 db                	test   ebx,ebx
c00033b9:	75 38                	jne    c00033f3 <create_chain+0x15d>
c00033bb:	89 fb                	mov    ebx,edi
c00033bd:	43                   	inc    ebx
c00033be:	39 5e 1c             	cmp    DWORD PTR [esi+0x1c],ebx
c00033c1:	77 0e                	ja     c00033d1 <create_chain+0x13b>
c00033c3:	83 ff 01             	cmp    edi,0x1
c00033c6:	0f 86 28 ff ff ff    	jbe    c00032f4 <create_chain+0x5e>
c00033cc:	bb 02 00 00 00       	mov    ebx,0x2
c00033d1:	89 da                	mov    edx,ebx
c00033d3:	89 e8                	mov    eax,ebp
c00033d5:	e8 ce fb ff ff       	call   c0002fa8 <get_fat>
c00033da:	85 c0                	test   eax,eax
c00033dc:	74 15                	je     c00033f3 <create_chain+0x15d>
c00033de:	83 f8 01             	cmp    eax,0x1
c00033e1:	0f 84 e0 fe ff ff    	je     c00032c7 <create_chain+0x31>
c00033e7:	40                   	inc    eax
c00033e8:	74 52                	je     c000343c <create_chain+0x1a6>
c00033ea:	39 fb                	cmp    ebx,edi
c00033ec:	75 cf                	jne    c00033bd <create_chain+0x127>
c00033ee:	e9 01 ff ff ff       	jmp    c00032f4 <create_chain+0x5e>
c00033f3:	83 c9 ff             	or     ecx,0xffffffff
c00033f6:	89 da                	mov    edx,ebx
c00033f8:	89 f0                	mov    eax,esi
c00033fa:	e8 a4 f9 ff ff       	call   c0002da3 <put_fat>
c00033ff:	85 c0                	test   eax,eax
c0003401:	75 32                	jne    c0003435 <create_chain+0x19f>
c0003403:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003408:	74 11                	je     c000341b <create_chain+0x185>
c000340a:	89 d9                	mov    ecx,ebx
c000340c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003410:	89 f0                	mov    eax,esi
c0003412:	e8 8c f9 ff ff       	call   c0002da3 <put_fat>
c0003417:	85 c0                	test   eax,eax
c0003419:	75 1a                	jne    c0003435 <create_chain+0x19f>
c000341b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000341e:	8b 4e 1c             	mov    ecx,DWORD PTR [esi+0x1c]
c0003421:	89 5e 14             	mov    DWORD PTR [esi+0x14],ebx
c0003424:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003427:	39 d0                	cmp    eax,edx
c0003429:	77 04                	ja     c000342f <create_chain+0x199>
c000342b:	48                   	dec    eax
c000342c:	89 46 18             	mov    DWORD PTR [esi+0x18],eax
c000342f:	80 4e 04 01          	or     BYTE PTR [esi+0x4],0x1
c0003433:	eb 56                	jmp    c000348b <create_chain+0x1f5>
c0003435:	48                   	dec    eax
c0003436:	0f 85 8b fe ff ff    	jne    c00032c7 <create_chain+0x31>
c000343c:	83 cb ff             	or     ebx,0xffffffff
c000343f:	eb 4a                	jmp    c000348b <create_chain+0x1f5>
c0003441:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0003445:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0003448:	41                   	inc    ecx
c0003449:	39 d9                	cmp    ecx,ebx
c000344b:	75 19                	jne    c0003466 <create_chain+0x1d0>
c000344d:	b9 02 00 00 00       	mov    ecx,0x2
c0003452:	85 d2                	test   edx,edx
c0003454:	74 03                	je     c0003459 <create_chain+0x1c3>
c0003456:	8d 4a 01             	lea    ecx,[edx+0x1]
c0003459:	89 4d 18             	mov    DWORD PTR [ebp+0x18],ecx
c000345c:	85 c0                	test   eax,eax
c000345e:	0f 85 63 fe ff ff    	jne    c00032c7 <create_chain+0x31>
c0003464:	eb b5                	jmp    c000341b <create_chain+0x185>
c0003466:	85 d2                	test   edx,edx
c0003468:	75 07                	jne    c0003471 <create_chain+0x1db>
c000346a:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003471:	89 d9                	mov    ecx,ebx
c0003473:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0003477:	89 e8                	mov    eax,ebp
c0003479:	e8 bb fa ff ff       	call   c0002f39 <fill_last_frag>
c000347e:	85 c0                	test   eax,eax
c0003480:	75 b3                	jne    c0003435 <create_chain+0x19f>
c0003482:	c7 45 18 01 00 00 00 	mov    DWORD PTR [ebp+0x18],0x1
c0003489:	eb 90                	jmp    c000341b <create_chain+0x185>
c000348b:	83 c4 1c             	add    esp,0x1c
c000348e:	89 d8                	mov    eax,ebx
c0003490:	5b                   	pop    ebx
c0003491:	5e                   	pop    esi
c0003492:	5f                   	pop    edi
c0003493:	5d                   	pop    ebp
c0003494:	c3                   	ret    

c0003495 <remove_chain>:
c0003495:	55                   	push   ebp
c0003496:	57                   	push   edi
c0003497:	56                   	push   esi
c0003498:	53                   	push   ebx
c0003499:	83 ec 1c             	sub    esp,0x1c
c000349c:	83 fa 01             	cmp    edx,0x1
c000349f:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00034a3:	8b 18                	mov    ebx,DWORD PTR [eax]
c00034a5:	77 0a                	ja     c00034b1 <remove_chain+0x1c>
c00034a7:	b8 02 00 00 00       	mov    eax,0x2
c00034ac:	e9 24 01 00 00       	jmp    c00035d5 <remove_chain+0x140>
c00034b1:	89 d6                	mov    esi,edx
c00034b3:	39 53 1c             	cmp    DWORD PTR [ebx+0x1c],edx
c00034b6:	76 ef                	jbe    c00034a7 <remove_chain+0x12>
c00034b8:	89 c7                	mov    edi,eax
c00034ba:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00034bf:	75 06                	jne    c00034c7 <remove_chain+0x32>
c00034c1:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c00034c5:	eb 54                	jmp    c000351b <remove_chain+0x86>
c00034c7:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034ca:	75 06                	jne    c00034d2 <remove_chain+0x3d>
c00034cc:	80 78 07 02          	cmp    BYTE PTR [eax+0x7],0x2
c00034d0:	74 ef                	je     c00034c1 <remove_chain+0x2c>
c00034d2:	83 c9 ff             	or     ecx,0xffffffff
c00034d5:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00034d9:	89 d8                	mov    eax,ebx
c00034db:	e8 c3 f8 ff ff       	call   c0002da3 <put_fat>
c00034e0:	85 c0                	test   eax,eax
c00034e2:	74 dd                	je     c00034c1 <remove_chain+0x2c>
c00034e4:	e9 ec 00 00 00       	jmp    c00035d5 <remove_chain+0x140>
c00034e9:	83 f8 01             	cmp    eax,0x1
c00034ec:	74 b9                	je     c00034a7 <remove_chain+0x12>
c00034ee:	83 f8 ff             	cmp    eax,0xffffffff
c00034f1:	74 6d                	je     c0003560 <remove_chain+0xcb>
c00034f3:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c00034f6:	75 6f                	jne    c0003567 <remove_chain+0xd2>
c00034f8:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00034fb:	8b 4b 1c             	mov    ecx,DWORD PTR [ebx+0x1c]
c00034fe:	8d 51 fe             	lea    edx,[ecx-0x2]
c0003501:	39 d0                	cmp    eax,edx
c0003503:	73 08                	jae    c000350d <remove_chain+0x78>
c0003505:	40                   	inc    eax
c0003506:	80 4b 04 01          	or     BYTE PTR [ebx+0x4],0x1
c000350a:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c000350d:	8d 4e 01             	lea    ecx,[esi+0x1]
c0003510:	39 e9                	cmp    ecx,ebp
c0003512:	75 64                	jne    c0003578 <remove_chain+0xe3>
c0003514:	89 ee                	mov    esi,ebp
c0003516:	39 6b 1c             	cmp    DWORD PTR [ebx+0x1c],ebp
c0003519:	76 0f                	jbe    c000352a <remove_chain+0x95>
c000351b:	89 f2                	mov    edx,esi
c000351d:	89 f8                	mov    eax,edi
c000351f:	e8 84 fa ff ff       	call   c0002fa8 <get_fat>
c0003524:	89 c5                	mov    ebp,eax
c0003526:	85 c0                	test   eax,eax
c0003528:	75 bf                	jne    c00034e9 <remove_chain+0x54>
c000352a:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000352d:	0f 85 a0 00 00 00    	jne    c00035d3 <remove_chain+0x13e>
c0003533:	eb 6c                	jmp    c00035a1 <remove_chain+0x10c>
c0003535:	8a 47 07             	mov    al,BYTE PTR [edi+0x7]
c0003538:	84 c0                	test   al,al
c000353a:	75 7d                	jne    c00035b9 <remove_chain+0x124>
c000353c:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c000353f:	3b 5c 24 08          	cmp    ebx,DWORD PTR [esp+0x8]
c0003543:	0f 84 86 00 00 00    	je     c00035cf <remove_chain+0x13a>
c0003549:	89 da                	mov    edx,ebx
c000354b:	89 f8                	mov    eax,edi
c000354d:	e8 56 fa ff ff       	call   c0002fa8 <get_fat>
c0003552:	83 f8 01             	cmp    eax,0x1
c0003555:	0f 86 4c ff ff ff    	jbe    c00034a7 <remove_chain+0x12>
c000355b:	83 f8 ff             	cmp    eax,0xffffffff
c000355e:	75 4e                	jne    c00035ae <remove_chain+0x119>
c0003560:	b8 01 00 00 00       	mov    eax,0x1
c0003565:	eb 6e                	jmp    c00035d5 <remove_chain+0x140>
c0003567:	31 c9                	xor    ecx,ecx
c0003569:	89 f2                	mov    edx,esi
c000356b:	89 d8                	mov    eax,ebx
c000356d:	e8 31 f8 ff ff       	call   c0002da3 <put_fat>
c0003572:	85 c0                	test   eax,eax
c0003574:	74 82                	je     c00034f8 <remove_chain+0x63>
c0003576:	eb 5d                	jmp    c00035d5 <remove_chain+0x140>
c0003578:	80 3b 04             	cmp    BYTE PTR [ebx],0x4
c000357b:	75 1b                	jne    c0003598 <remove_chain+0x103>
c000357d:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c0003581:	89 d8                	mov    eax,ebx
c0003583:	83 ec 0c             	sub    esp,0xc
c0003586:	6a 00                	push   0x0
c0003588:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000358c:	e8 5d f7 ff ff       	call   c0002cee <change_bitmap>
c0003591:	83 c4 10             	add    esp,0x10
c0003594:	85 c0                	test   eax,eax
c0003596:	75 3d                	jne    c00035d5 <remove_chain+0x140>
c0003598:	89 6c 24 0c          	mov    DWORD PTR [esp+0xc],ebp
c000359c:	e9 73 ff ff ff       	jmp    c0003514 <remove_chain+0x7f>
c00035a1:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c00035a6:	75 8d                	jne    c0003535 <remove_chain+0xa0>
c00035a8:	c6 47 07 00          	mov    BYTE PTR [edi+0x7],0x0
c00035ac:	eb 25                	jmp    c00035d3 <remove_chain+0x13e>
c00035ae:	8d 53 01             	lea    edx,[ebx+0x1]
c00035b1:	89 c3                	mov    ebx,eax
c00035b3:	39 c2                	cmp    edx,eax
c00035b5:	74 88                	je     c000353f <remove_chain+0xaa>
c00035b7:	eb 1a                	jmp    c00035d3 <remove_chain+0x13e>
c00035b9:	3c 03                	cmp    al,0x3
c00035bb:	75 16                	jne    c00035d3 <remove_chain+0x13e>
c00035bd:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c00035c0:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035c4:	77 0d                	ja     c00035d3 <remove_chain+0x13e>
c00035c6:	03 47 14             	add    eax,DWORD PTR [edi+0x14]
c00035c9:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c00035cd:	72 04                	jb     c00035d3 <remove_chain+0x13e>
c00035cf:	c6 47 07 02          	mov    BYTE PTR [edi+0x7],0x2
c00035d3:	31 c0                	xor    eax,eax
c00035d5:	83 c4 1c             	add    esp,0x1c
c00035d8:	5b                   	pop    ebx
c00035d9:	5e                   	pop    esi
c00035da:	5f                   	pop    edi
c00035db:	5d                   	pop    ebp
c00035dc:	c3                   	ret    

c00035dd <dir_clear>:
c00035dd:	55                   	push   ebp
c00035de:	57                   	push   edi
c00035df:	56                   	push   esi
c00035e0:	89 c6                	mov    esi,eax
c00035e2:	53                   	push   ebx
c00035e3:	83 ec 1c             	sub    esp,0x1c
c00035e6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00035ea:	e8 9d ed ff ff       	call   c000238c <sync_window>
c00035ef:	85 c0                	test   eax,eax
c00035f1:	0f 85 de 00 00 00    	jne    c00036d5 <dir_clear+0xf8>
c00035f7:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00035fb:	89 f0                	mov    eax,esi
c00035fd:	8d 6e 54             	lea    ebp,[esi+0x54]
c0003600:	e8 d6 e8 ff ff       	call   c0001edb <clst2sect>
c0003605:	b9 00 02 00 00       	mov    ecx,0x200
c000360a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000360e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003612:	89 46 4c             	mov    DWORD PTR [esi+0x4c],eax
c0003615:	89 56 50             	mov    DWORD PTR [esi+0x50],edx
c0003618:	89 e8                	mov    eax,ebp
c000361a:	31 d2                	xor    edx,edx
c000361c:	e8 b5 e6 ff ff       	call   c0001cd6 <mem_set>
c0003621:	0f b7 5e 0a          	movzx  ebx,WORD PTR [esi+0xa]
c0003625:	c1 e3 09             	shl    ebx,0x9
c0003628:	81 fb 00 80 00 00    	cmp    ebx,0x8000
c000362e:	76 1f                	jbe    c000364f <dir_clear+0x72>
c0003630:	bb 00 80 00 00       	mov    ebx,0x8000
c0003635:	eb 18                	jmp    c000364f <dir_clear+0x72>
c0003637:	83 ec 0c             	sub    esp,0xc
c000363a:	53                   	push   ebx
c000363b:	e8 35 4e 00 00       	call   c0008475 <ff_memalloc>
c0003640:	83 c4 10             	add    esp,0x10
c0003643:	89 c7                	mov    edi,eax
c0003645:	85 c0                	test   eax,eax
c0003647:	0f 85 8f 00 00 00    	jne    c00036dc <dir_clear+0xff>
c000364d:	d1 eb                	shr    ebx,1
c000364f:	81 fb 00 02 00 00    	cmp    ebx,0x200
c0003655:	77 e0                	ja     c0003637 <dir_clear+0x5a>
c0003657:	31 db                	xor    ebx,ebx
c0003659:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c000365d:	39 d8                	cmp    eax,ebx
c000365f:	76 66                	jbe    c00036c7 <dir_clear+0xea>
c0003661:	83 ec 0c             	sub    esp,0xc
c0003664:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c0003668:	6a 01                	push   0x1
c000366a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000366e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0003672:	55                   	push   ebp
c0003673:	50                   	push   eax
c0003674:	e8 94 e5 ff ff       	call   c0001c0d <disk_write>
c0003679:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1
c000367e:	83 54 24 2c 00       	adc    DWORD PTR [esp+0x2c],0x0
c0003683:	83 c4 20             	add    esp,0x20
c0003686:	85 c0                	test   eax,eax
c0003688:	75 3d                	jne    c00036c7 <dir_clear+0xea>
c000368a:	43                   	inc    ebx
c000368b:	eb cc                	jmp    c0003659 <dir_clear+0x7c>
c000368d:	83 ec 0c             	sub    esp,0xc
c0003690:	31 d2                	xor    edx,edx
c0003692:	55                   	push   ebp
c0003693:	89 d8                	mov    eax,ebx
c0003695:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0003699:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c000369d:	52                   	push   edx
c000369e:	50                   	push   eax
c000369f:	0f b6 46 01          	movzx  eax,BYTE PTR [esi+0x1]
c00036a3:	57                   	push   edi
c00036a4:	50                   	push   eax
c00036a5:	e8 63 e5 ff ff       	call   c0001c0d <disk_write>
c00036aa:	83 c4 20             	add    esp,0x20
c00036ad:	85 c0                	test   eax,eax
c00036af:	75 0a                	jne    c00036bb <dir_clear+0xde>
c00036b1:	01 eb                	add    ebx,ebp
c00036b3:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036b7:	39 d8                	cmp    eax,ebx
c00036b9:	77 d2                	ja     c000368d <dir_clear+0xb0>
c00036bb:	83 ec 0c             	sub    esp,0xc
c00036be:	57                   	push   edi
c00036bf:	e8 c7 4d 00 00       	call   c000848b <ff_memfree>
c00036c4:	83 c4 10             	add    esp,0x10
c00036c7:	0f b7 46 0a          	movzx  eax,WORD PTR [esi+0xa]
c00036cb:	39 d8                	cmp    eax,ebx
c00036cd:	0f 95 c0             	setne  al
c00036d0:	0f b6 c0             	movzx  eax,al
c00036d3:	eb 19                	jmp    c00036ee <dir_clear+0x111>
c00036d5:	b8 01 00 00 00       	mov    eax,0x1
c00036da:	eb 12                	jmp    c00036ee <dir_clear+0x111>
c00036dc:	89 d9                	mov    ecx,ebx
c00036de:	31 d2                	xor    edx,edx
c00036e0:	c1 eb 09             	shr    ebx,0x9
c00036e3:	e8 ee e5 ff ff       	call   c0001cd6 <mem_set>
c00036e8:	89 dd                	mov    ebp,ebx
c00036ea:	31 db                	xor    ebx,ebx
c00036ec:	eb c5                	jmp    c00036b3 <dir_clear+0xd6>
c00036ee:	83 c4 1c             	add    esp,0x1c
c00036f1:	5b                   	pop    ebx
c00036f2:	5e                   	pop    esi
c00036f3:	5f                   	pop    edi
c00036f4:	5d                   	pop    ebp
c00036f5:	c3                   	ret    

c00036f6 <dir_next>:
c00036f6:	55                   	push   ebp
c00036f7:	57                   	push   edi
c00036f8:	56                   	push   esi
c00036f9:	53                   	push   ebx
c00036fa:	89 c3                	mov    ebx,eax
c00036fc:	83 ec 1c             	sub    esp,0x1c
c00036ff:	8b 28                	mov    ebp,DWORD PTR [eax]
c0003701:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0003705:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0003708:	8d 78 20             	lea    edi,[eax+0x20]
c000370b:	31 c0                	xor    eax,eax
c000370d:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c0003711:	0f 94 c0             	sete   al
c0003714:	48                   	dec    eax
c0003715:	25 00 00 20 f0       	and    eax,0xf0200000
c000371a:	05 00 00 00 10       	add    eax,0x10000000
c000371f:	39 f8                	cmp    eax,edi
c0003721:	77 0e                	ja     c0003731 <dir_next+0x3b>
c0003723:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000372a:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003731:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003734:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003737:	b8 04 00 00 00       	mov    eax,0x4
c000373c:	89 ce                	mov    esi,ecx
c000373e:	09 d6                	or     esi,edx
c0003740:	0f 84 da 00 00 00    	je     c0003820 <dir_next+0x12a>
c0003746:	89 f8                	mov    eax,edi
c0003748:	25 ff 01 00 00       	and    eax,0x1ff
c000374d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0003751:	0f 85 b9 00 00 00    	jne    c0003810 <dir_next+0x11a>
c0003757:	83 c2 01             	add    edx,0x1
c000375a:	83 d1 00             	adc    ecx,0x0
c000375d:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0003760:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0003763:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0003766:	85 d2                	test   edx,edx
c0003768:	75 29                	jne    c0003793 <dir_next+0x9d>
c000376a:	89 fa                	mov    edx,edi
c000376c:	0f b7 45 08          	movzx  eax,WORD PTR [ebp+0x8]
c0003770:	c1 ea 05             	shr    edx,0x5
c0003773:	39 c2                	cmp    edx,eax
c0003775:	0f 82 95 00 00 00    	jb     c0003810 <dir_next+0x11a>
c000377b:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003782:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003789:	b8 04 00 00 00       	mov    eax,0x4
c000378e:	e9 8d 00 00 00       	jmp    c0003820 <dir_next+0x12a>
c0003793:	0f b7 45 0a          	movzx  eax,WORD PTR [ebp+0xa]
c0003797:	89 f9                	mov    ecx,edi
c0003799:	48                   	dec    eax
c000379a:	c1 e9 09             	shr    ecx,0x9
c000379d:	85 c8                	test   eax,ecx
c000379f:	75 6f                	jne    c0003810 <dir_next+0x11a>
c00037a1:	89 d8                	mov    eax,ebx
c00037a3:	e8 00 f8 ff ff       	call   c0002fa8 <get_fat>
c00037a8:	89 c6                	mov    esi,eax
c00037aa:	83 f8 01             	cmp    eax,0x1
c00037ad:	77 07                	ja     c00037b6 <dir_next+0xc0>
c00037af:	b8 02 00 00 00       	mov    eax,0x2
c00037b4:	eb 6a                	jmp    c0003820 <dir_next+0x12a>
c00037b6:	83 f8 ff             	cmp    eax,0xffffffff
c00037b9:	75 07                	jne    c00037c2 <dir_next+0xcc>
c00037bb:	b8 01 00 00 00       	mov    eax,0x1
c00037c0:	eb 5e                	jmp    c0003820 <dir_next+0x12a>
c00037c2:	39 45 1c             	cmp    DWORD PTR [ebp+0x1c],eax
c00037c5:	77 37                	ja     c00037fe <dir_next+0x108>
c00037c7:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c00037cc:	74 ad                	je     c000377b <dir_next+0x85>
c00037ce:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c00037d1:	89 d8                	mov    eax,ebx
c00037d3:	e8 be fa ff ff       	call   c0003296 <create_chain>
c00037d8:	89 c6                	mov    esi,eax
c00037da:	b8 07 00 00 00       	mov    eax,0x7
c00037df:	85 f6                	test   esi,esi
c00037e1:	74 3d                	je     c0003820 <dir_next+0x12a>
c00037e3:	83 fe 01             	cmp    esi,0x1
c00037e6:	74 c7                	je     c00037af <dir_next+0xb9>
c00037e8:	83 fe ff             	cmp    esi,0xffffffff
c00037eb:	74 ce                	je     c00037bb <dir_next+0xc5>
c00037ed:	89 f2                	mov    edx,esi
c00037ef:	89 e8                	mov    eax,ebp
c00037f1:	e8 e7 fd ff ff       	call   c00035dd <dir_clear>
c00037f6:	85 c0                	test   eax,eax
c00037f8:	75 c1                	jne    c00037bb <dir_next+0xc5>
c00037fa:	80 4b 07 04          	or     BYTE PTR [ebx+0x7],0x4
c00037fe:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0003801:	89 f2                	mov    edx,esi
c0003803:	89 e8                	mov    eax,ebp
c0003805:	e8 d1 e6 ff ff       	call   c0001edb <clst2sect>
c000380a:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c000380d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0003810:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003814:	89 7b 28             	mov    DWORD PTR [ebx+0x28],edi
c0003817:	8d 44 05 54          	lea    eax,[ebp+eax*1+0x54]
c000381b:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c000381e:	31 c0                	xor    eax,eax
c0003820:	83 c4 1c             	add    esp,0x1c
c0003823:	5b                   	pop    ebx
c0003824:	5e                   	pop    esi
c0003825:	5f                   	pop    edi
c0003826:	5d                   	pop    ebp
c0003827:	c3                   	ret    

c0003828 <load_xdir>:
c0003828:	55                   	push   ebp
c0003829:	57                   	push   edi
c000382a:	56                   	push   esi
c000382b:	89 c6                	mov    esi,eax
c000382d:	53                   	push   ebx
c000382e:	83 ec 1c             	sub    esp,0x1c
c0003831:	8b 00                	mov    eax,DWORD PTR [eax]
c0003833:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c0003836:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c0003839:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000383c:	e8 df eb ff ff       	call   c0002420 <move_window>
c0003841:	89 c3                	mov    ebx,eax
c0003843:	85 c0                	test   eax,eax
c0003845:	0f 85 0c 01 00 00    	jne    c0003957 <load_xdir+0x12f>
c000384b:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c000384e:	80 3a 85             	cmp    BYTE PTR [edx],0x85
c0003851:	0f 85 fb 00 00 00    	jne    c0003952 <load_xdir+0x12a>
c0003857:	89 f8                	mov    eax,edi
c0003859:	b9 20 00 00 00       	mov    ecx,0x20
c000385e:	e8 5e e4 ff ff       	call   c0001cc1 <mem_cpy>
c0003863:	0f b6 47 01          	movzx  eax,BYTE PTR [edi+0x1]
c0003867:	40                   	inc    eax
c0003868:	c1 e0 05             	shl    eax,0x5
c000386b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000386f:	83 e8 60             	sub    eax,0x60
c0003872:	3d 00 02 00 00       	cmp    eax,0x200
c0003877:	0f 87 d5 00 00 00    	ja     c0003952 <load_xdir+0x12a>
c000387d:	31 d2                	xor    edx,edx
c000387f:	89 f0                	mov    eax,esi
c0003881:	e8 70 fe ff ff       	call   c00036f6 <dir_next>
c0003886:	89 c3                	mov    ebx,eax
c0003888:	83 f8 04             	cmp    eax,0x4
c000388b:	0f 84 c1 00 00 00    	je     c0003952 <load_xdir+0x12a>
c0003891:	85 c0                	test   eax,eax
c0003893:	0f 85 be 00 00 00    	jne    c0003957 <load_xdir+0x12f>
c0003899:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000389c:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000389f:	8b 06                	mov    eax,DWORD PTR [esi]
c00038a1:	e8 7a eb ff ff       	call   c0002420 <move_window>
c00038a6:	89 c3                	mov    ebx,eax
c00038a8:	85 c0                	test   eax,eax
c00038aa:	0f 85 a7 00 00 00    	jne    c0003957 <load_xdir+0x12f>
c00038b0:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c00038b3:	80 3a c0             	cmp    BYTE PTR [edx],0xc0
c00038b6:	0f 85 96 00 00 00    	jne    c0003952 <load_xdir+0x12a>
c00038bc:	8d 47 20             	lea    eax,[edi+0x20]
c00038bf:	b9 20 00 00 00       	mov    ecx,0x20
c00038c4:	e8 f8 e3 ff ff       	call   c0001cc1 <mem_cpy>
c00038c9:	31 d2                	xor    edx,edx
c00038cb:	0f b6 47 23          	movzx  eax,BYTE PTR [edi+0x23]
c00038cf:	b9 0f 00 00 00       	mov    ecx,0xf
c00038d4:	83 c0 2c             	add    eax,0x2c
c00038d7:	f7 f1                	div    ecx
c00038d9:	c1 e0 05             	shl    eax,0x5
c00038dc:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00038e0:	77 70                	ja     c0003952 <load_xdir+0x12a>
c00038e2:	bd 40 00 00 00       	mov    ebp,0x40
c00038e7:	31 d2                	xor    edx,edx
c00038e9:	89 f0                	mov    eax,esi
c00038eb:	e8 06 fe ff ff       	call   c00036f6 <dir_next>
c00038f0:	89 c3                	mov    ebx,eax
c00038f2:	83 f8 04             	cmp    eax,0x4
c00038f5:	74 5b                	je     c0003952 <load_xdir+0x12a>
c00038f7:	85 c0                	test   eax,eax
c00038f9:	75 5c                	jne    c0003957 <load_xdir+0x12f>
c00038fb:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c00038fe:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0003901:	8b 06                	mov    eax,DWORD PTR [esi]
c0003903:	e8 18 eb ff ff       	call   c0002420 <move_window>
c0003908:	89 c3                	mov    ebx,eax
c000390a:	85 c0                	test   eax,eax
c000390c:	75 49                	jne    c0003957 <load_xdir+0x12f>
c000390e:	8b 56 38             	mov    edx,DWORD PTR [esi+0x38]
c0003911:	80 3a c1             	cmp    BYTE PTR [edx],0xc1
c0003914:	75 3c                	jne    c0003952 <load_xdir+0x12a>
c0003916:	81 fd 5f 02 00 00    	cmp    ebp,0x25f
c000391c:	77 0d                	ja     c000392b <load_xdir+0x103>
c000391e:	8d 04 2f             	lea    eax,[edi+ebp*1]
c0003921:	b9 20 00 00 00       	mov    ecx,0x20
c0003926:	e8 96 e3 ff ff       	call   c0001cc1 <mem_cpy>
c000392b:	83 c5 20             	add    ebp,0x20
c000392e:	39 6c 24 0c          	cmp    DWORD PTR [esp+0xc],ebp
c0003932:	77 b3                	ja     c00038e7 <load_xdir+0xbf>
c0003934:	81 fd 60 02 00 00    	cmp    ebp,0x260
c000393a:	77 1b                	ja     c0003957 <load_xdir+0x12f>
c000393c:	89 f8                	mov    eax,edi
c000393e:	e8 cd e7 ff ff       	call   c0002110 <xdir_sum>
c0003943:	89 c1                	mov    ecx,eax
c0003945:	8d 47 02             	lea    eax,[edi+0x2]
c0003948:	e8 f5 e2 ff ff       	call   c0001c42 <ld_word>
c000394d:	66 39 c1             	cmp    cx,ax
c0003950:	74 05                	je     c0003957 <load_xdir+0x12f>
c0003952:	bb 02 00 00 00       	mov    ebx,0x2
c0003957:	83 c4 1c             	add    esp,0x1c
c000395a:	89 d8                	mov    eax,ebx
c000395c:	5b                   	pop    ebx
c000395d:	5e                   	pop    esi
c000395e:	5f                   	pop    edi
c000395f:	5d                   	pop    ebp
c0003960:	c3                   	ret    

c0003961 <load_obj_xdir>:
c0003961:	53                   	push   ebx
c0003962:	89 c3                	mov    ebx,eax
c0003964:	83 ec 08             	sub    esp,0x8
c0003967:	8b 02                	mov    eax,DWORD PTR [edx]
c0003969:	89 03                	mov    DWORD PTR [ebx],eax
c000396b:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000396e:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0003971:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c0003974:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0003977:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c000397a:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0003981:	30 c0                	xor    al,al
c0003983:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000398a:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000398d:	89 d8                	mov    eax,ebx
c000398f:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c0003992:	89 53 48             	mov    DWORD PTR [ebx+0x48],edx
c0003995:	e8 04 f8 ff ff       	call   c000319e <dir_sdi>
c000399a:	85 c0                	test   eax,eax
c000399c:	75 0b                	jne    c00039a9 <load_obj_xdir+0x48>
c000399e:	89 d8                	mov    eax,ebx
c00039a0:	83 c4 08             	add    esp,0x8
c00039a3:	5b                   	pop    ebx
c00039a4:	e9 7f fe ff ff       	jmp    c0003828 <load_xdir>
c00039a9:	83 c4 08             	add    esp,0x8
c00039ac:	5b                   	pop    ebx
c00039ad:	c3                   	ret    

c00039ae <dir_read>:
c00039ae:	55                   	push   ebp
c00039af:	bd 04 00 00 00       	mov    ebp,0x4
c00039b4:	57                   	push   edi
c00039b5:	56                   	push   esi
c00039b6:	be ff ff ff ff       	mov    esi,0xffffffff
c00039bb:	53                   	push   ebx
c00039bc:	89 c3                	mov    ebx,eax
c00039be:	83 ec 1c             	sub    esp,0x1c
c00039c1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00039c5:	8b 38                	mov    edi,DWORD PTR [eax]
c00039c7:	c6 44 24 07 ff       	mov    BYTE PTR [esp+0x7],0xff
c00039cc:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00039cf:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00039d2:	89 c8                	mov    eax,ecx
c00039d4:	09 d0                	or     eax,edx
c00039d6:	0f 84 25 01 00 00    	je     c0003b01 <dir_read+0x153>
c00039dc:	89 f8                	mov    eax,edi
c00039de:	e8 3d ea ff ff       	call   c0002420 <move_window>
c00039e3:	89 c5                	mov    ebp,eax
c00039e5:	85 c0                	test   eax,eax
c00039e7:	0f 85 23 01 00 00    	jne    c0003b10 <dir_read+0x162>
c00039ed:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00039f0:	8a 0a                	mov    cl,BYTE PTR [edx]
c00039f2:	84 c9                	test   cl,cl
c00039f4:	0f 84 11 01 00 00    	je     c0003b0b <dir_read+0x15d>
c00039fa:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c00039fd:	75 48                	jne    c0003a47 <dir_read+0x99>
c00039ff:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0003a04:	74 10                	je     c0003a16 <dir_read+0x68>
c0003a06:	80 f9 83             	cmp    cl,0x83
c0003a09:	0f 85 dd 00 00 00    	jne    c0003aec <dir_read+0x13e>
c0003a0f:	31 ed                	xor    ebp,ebp
c0003a11:	e9 08 01 00 00       	jmp    c0003b1e <dir_read+0x170>
c0003a16:	80 f9 85             	cmp    cl,0x85
c0003a19:	0f 85 cd 00 00 00    	jne    c0003aec <dir_read+0x13e>
c0003a1f:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a22:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a25:	89 d8                	mov    eax,ebx
c0003a27:	e8 fc fd ff ff       	call   c0003828 <load_xdir>
c0003a2c:	89 c5                	mov    ebp,eax
c0003a2e:	85 c0                	test   eax,eax
c0003a30:	0f 85 da 00 00 00    	jne    c0003b10 <dir_read+0x162>
c0003a36:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c0003a39:	8a 40 04             	mov    al,BYTE PTR [eax+0x4]
c0003a3c:	83 e0 3f             	and    eax,0x3f
c0003a3f:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a42:	e9 d7 00 00 00       	jmp    c0003b1e <dir_read+0x170>
c0003a47:	8a 42 0b             	mov    al,BYTE PTR [edx+0xb]
c0003a4a:	83 e0 3f             	and    eax,0x3f
c0003a4d:	80 f9 2e             	cmp    cl,0x2e
c0003a50:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0003a54:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c0003a57:	0f 84 8a 00 00 00    	je     c0003ae7 <dir_read+0x139>
c0003a5d:	80 f9 e5             	cmp    cl,0xe5
c0003a60:	0f 84 81 00 00 00    	je     c0003ae7 <dir_read+0x139>
c0003a66:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003a6a:	83 e0 1f             	and    eax,0x1f
c0003a6d:	83 f8 08             	cmp    eax,0x8
c0003a70:	0f 94 c0             	sete   al
c0003a73:	0f b6 c0             	movzx  eax,al
c0003a76:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c0003a7a:	75 6b                	jne    c0003ae7 <dir_read+0x139>
c0003a7c:	80 7c 24 08 0f       	cmp    BYTE PTR [esp+0x8],0xf
c0003a81:	75 44                	jne    c0003ac7 <dir_read+0x119>
c0003a83:	f6 c1 40             	test   cl,0x40
c0003a86:	74 12                	je     c0003a9a <dir_read+0xec>
c0003a88:	8a 42 0d             	mov    al,BYTE PTR [edx+0xd]
c0003a8b:	83 e1 bf             	and    ecx,0xffffffbf
c0003a8e:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0003a92:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0003a95:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0003a98:	eb 06                	jmp    c0003aa0 <dir_read+0xf2>
c0003a9a:	89 f0                	mov    eax,esi
c0003a9c:	38 c8                	cmp    al,cl
c0003a9e:	75 47                	jne    c0003ae7 <dir_read+0x139>
c0003aa0:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c0003aa4:	be ff ff ff ff       	mov    esi,0xffffffff
c0003aa9:	38 42 0d             	cmp    BYTE PTR [edx+0xd],al
c0003aac:	75 3e                	jne    c0003aec <dir_read+0x13e>
c0003aae:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0003ab2:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0003ab5:	e8 8a e4 ff ff       	call   c0001f44 <pick_lfn>
c0003aba:	85 c0                	test   eax,eax
c0003abc:	74 2e                	je     c0003aec <dir_read+0x13e>
c0003abe:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0003ac2:	8d 71 ff             	lea    esi,[ecx-0x1]
c0003ac5:	eb 25                	jmp    c0003aec <dir_read+0x13e>
c0003ac7:	89 f0                	mov    eax,esi
c0003ac9:	84 c0                	test   al,al
c0003acb:	75 11                	jne    c0003ade <dir_read+0x130>
c0003acd:	89 d0                	mov    eax,edx
c0003acf:	e8 2a e6 ff ff       	call   c00020fe <sum_sfn>
c0003ad4:	3a 44 24 07          	cmp    al,BYTE PTR [esp+0x7]
c0003ad8:	0f 84 31 ff ff ff    	je     c0003a0f <dir_read+0x61>
c0003ade:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c0003ae5:	eb 37                	jmp    c0003b1e <dir_read+0x170>
c0003ae7:	be ff ff ff ff       	mov    esi,0xffffffff
c0003aec:	31 d2                	xor    edx,edx
c0003aee:	89 d8                	mov    eax,ebx
c0003af0:	e8 01 fc ff ff       	call   c00036f6 <dir_next>
c0003af5:	89 c5                	mov    ebp,eax
c0003af7:	85 c0                	test   eax,eax
c0003af9:	0f 84 cd fe ff ff    	je     c00039cc <dir_read+0x1e>
c0003aff:	eb 0f                	jmp    c0003b10 <dir_read+0x162>
c0003b01:	85 ed                	test   ebp,ebp
c0003b03:	0f 84 06 ff ff ff    	je     c0003a0f <dir_read+0x61>
c0003b09:	eb 05                	jmp    c0003b10 <dir_read+0x162>
c0003b0b:	bd 04 00 00 00       	mov    ebp,0x4
c0003b10:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0003b17:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0003b1e:	83 c4 1c             	add    esp,0x1c
c0003b21:	89 e8                	mov    eax,ebp
c0003b23:	5b                   	pop    ebx
c0003b24:	5e                   	pop    esi
c0003b25:	5f                   	pop    edi
c0003b26:	5d                   	pop    ebp
c0003b27:	c3                   	ret    

c0003b28 <dir_alloc>:
c0003b28:	55                   	push   ebp
c0003b29:	89 d5                	mov    ebp,edx
c0003b2b:	57                   	push   edi
c0003b2c:	31 d2                	xor    edx,edx
c0003b2e:	56                   	push   esi
c0003b2f:	53                   	push   ebx
c0003b30:	89 c3                	mov    ebx,eax
c0003b32:	83 ec 0c             	sub    esp,0xc
c0003b35:	8b 38                	mov    edi,DWORD PTR [eax]
c0003b37:	e8 62 f6 ff ff       	call   c000319e <dir_sdi>
c0003b3c:	85 c0                	test   eax,eax
c0003b3e:	75 4e                	jne    c0003b8e <dir_alloc+0x66>
c0003b40:	31 f6                	xor    esi,esi
c0003b42:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003b45:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003b48:	89 f8                	mov    eax,edi
c0003b4a:	e8 d1 e8 ff ff       	call   c0002420 <move_window>
c0003b4f:	85 c0                	test   eax,eax
c0003b51:	75 3b                	jne    c0003b8e <dir_alloc+0x66>
c0003b53:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003b56:	80 3f 04             	cmp    BYTE PTR [edi],0x4
c0003b59:	8a 12                	mov    dl,BYTE PTR [edx]
c0003b5b:	75 07                	jne    c0003b64 <dir_alloc+0x3c>
c0003b5d:	f7 d2                	not    edx
c0003b5f:	c0 ea 07             	shr    dl,0x7
c0003b62:	eb 0d                	jmp    c0003b71 <dir_alloc+0x49>
c0003b64:	84 d2                	test   dl,dl
c0003b66:	0f 94 c1             	sete   cl
c0003b69:	80 fa e5             	cmp    dl,0xe5
c0003b6c:	0f 94 c2             	sete   dl
c0003b6f:	09 ca                	or     edx,ecx
c0003b71:	84 d2                	test   dl,dl
c0003b73:	74 07                	je     c0003b7c <dir_alloc+0x54>
c0003b75:	46                   	inc    esi
c0003b76:	39 ee                	cmp    esi,ebp
c0003b78:	75 04                	jne    c0003b7e <dir_alloc+0x56>
c0003b7a:	eb 1c                	jmp    c0003b98 <dir_alloc+0x70>
c0003b7c:	31 f6                	xor    esi,esi
c0003b7e:	ba 01 00 00 00       	mov    edx,0x1
c0003b83:	89 d8                	mov    eax,ebx
c0003b85:	e8 6c fb ff ff       	call   c00036f6 <dir_next>
c0003b8a:	85 c0                	test   eax,eax
c0003b8c:	74 b4                	je     c0003b42 <dir_alloc+0x1a>
c0003b8e:	83 f8 04             	cmp    eax,0x4
c0003b91:	75 05                	jne    c0003b98 <dir_alloc+0x70>
c0003b93:	b8 07 00 00 00       	mov    eax,0x7
c0003b98:	83 c4 0c             	add    esp,0xc
c0003b9b:	5b                   	pop    ebx
c0003b9c:	5e                   	pop    esi
c0003b9d:	5f                   	pop    edi
c0003b9e:	5d                   	pop    ebp
c0003b9f:	c3                   	ret    

c0003ba0 <store_xdir>:
c0003ba0:	55                   	push   ebp
c0003ba1:	57                   	push   edi
c0003ba2:	89 c7                	mov    edi,eax
c0003ba4:	56                   	push   esi
c0003ba5:	53                   	push   ebx
c0003ba6:	83 ec 0c             	sub    esp,0xc
c0003ba9:	8b 00                	mov    eax,DWORD PTR [eax]
c0003bab:	8b 68 10             	mov    ebp,DWORD PTR [eax+0x10]
c0003bae:	89 e8                	mov    eax,ebp
c0003bb0:	e8 5b e5 ff ff       	call   c0002110 <xdir_sum>
c0003bb5:	0f b7 d0             	movzx  edx,ax
c0003bb8:	8d 45 02             	lea    eax,[ebp+0x2]
c0003bbb:	e8 f4 e0 ff ff       	call   c0001cb4 <st_word>
c0003bc0:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0003bc4:	8b 57 48             	mov    edx,DWORD PTR [edi+0x48]
c0003bc7:	89 f8                	mov    eax,edi
c0003bc9:	e8 d0 f5 ff ff       	call   c000319e <dir_sdi>
c0003bce:	89 c6                	mov    esi,eax
c0003bd0:	85 f6                	test   esi,esi
c0003bd2:	75 3d                	jne    c0003c11 <store_xdir+0x71>
c0003bd4:	8b 57 30             	mov    edx,DWORD PTR [edi+0x30]
c0003bd7:	8b 4f 34             	mov    ecx,DWORD PTR [edi+0x34]
c0003bda:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bdc:	e8 3f e8 ff ff       	call   c0002420 <move_window>
c0003be1:	89 c6                	mov    esi,eax
c0003be3:	85 c0                	test   eax,eax
c0003be5:	75 2a                	jne    c0003c11 <store_xdir+0x71>
c0003be7:	8b 47 38             	mov    eax,DWORD PTR [edi+0x38]
c0003bea:	b9 20 00 00 00       	mov    ecx,0x20
c0003bef:	89 ea                	mov    edx,ebp
c0003bf1:	e8 cb e0 ff ff       	call   c0001cc1 <mem_cpy>
c0003bf6:	8b 07                	mov    eax,DWORD PTR [edi]
c0003bf8:	85 db                	test   ebx,ebx
c0003bfa:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0003bfe:	74 11                	je     c0003c11 <store_xdir+0x71>
c0003c00:	31 d2                	xor    edx,edx
c0003c02:	89 f8                	mov    eax,edi
c0003c04:	83 c5 20             	add    ebp,0x20
c0003c07:	e8 ea fa ff ff       	call   c00036f6 <dir_next>
c0003c0c:	4b                   	dec    ebx
c0003c0d:	89 c6                	mov    esi,eax
c0003c0f:	eb bf                	jmp    c0003bd0 <store_xdir+0x30>
c0003c11:	89 f0                	mov    eax,esi
c0003c13:	83 fe 02             	cmp    esi,0x2
c0003c16:	76 05                	jbe    c0003c1d <store_xdir+0x7d>
c0003c18:	b8 02 00 00 00       	mov    eax,0x2
c0003c1d:	83 c4 0c             	add    esp,0xc
c0003c20:	5b                   	pop    ebx
c0003c21:	5e                   	pop    esi
c0003c22:	5f                   	pop    edi
c0003c23:	5d                   	pop    ebp
c0003c24:	c3                   	ret    

c0003c25 <dir_remove>:
c0003c25:	57                   	push   edi
c0003c26:	56                   	push   esi
c0003c27:	53                   	push   ebx
c0003c28:	89 c3                	mov    ebx,eax
c0003c2a:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c0003c2d:	8b 30                	mov    esi,DWORD PTR [eax]
c0003c2f:	8b 78 28             	mov    edi,DWORD PTR [eax+0x28]
c0003c32:	83 fa ff             	cmp    edx,0xffffffff
c0003c35:	74 09                	je     c0003c40 <dir_remove+0x1b>
c0003c37:	e8 62 f5 ff ff       	call   c000319e <dir_sdi>
c0003c3c:	85 c0                	test   eax,eax
c0003c3e:	75 41                	jne    c0003c81 <dir_remove+0x5c>
c0003c40:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0003c43:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0003c46:	89 f0                	mov    eax,esi
c0003c48:	e8 d3 e7 ff ff       	call   c0002420 <move_window>
c0003c4d:	85 c0                	test   eax,eax
c0003c4f:	75 26                	jne    c0003c77 <dir_remove+0x52>
c0003c51:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0003c54:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0003c57:	75 05                	jne    c0003c5e <dir_remove+0x39>
c0003c59:	80 22 7f             	and    BYTE PTR [edx],0x7f
c0003c5c:	eb 03                	jmp    c0003c61 <dir_remove+0x3c>
c0003c5e:	c6 02 e5             	mov    BYTE PTR [edx],0xe5
c0003c61:	c6 46 03 01          	mov    BYTE PTR [esi+0x3],0x1
c0003c65:	39 7b 28             	cmp    DWORD PTR [ebx+0x28],edi
c0003c68:	73 17                	jae    c0003c81 <dir_remove+0x5c>
c0003c6a:	31 d2                	xor    edx,edx
c0003c6c:	89 d8                	mov    eax,ebx
c0003c6e:	e8 83 fa ff ff       	call   c00036f6 <dir_next>
c0003c73:	85 c0                	test   eax,eax
c0003c75:	74 c9                	je     c0003c40 <dir_remove+0x1b>
c0003c77:	83 f8 04             	cmp    eax,0x4
c0003c7a:	75 05                	jne    c0003c81 <dir_remove+0x5c>
c0003c7c:	b8 02 00 00 00       	mov    eax,0x2
c0003c81:	5b                   	pop    ebx
c0003c82:	5e                   	pop    esi
c0003c83:	5f                   	pop    edi
c0003c84:	c3                   	ret    

c0003c85 <create_name>:
c0003c85:	55                   	push   ebp
c0003c86:	89 d5                	mov    ebp,edx
c0003c88:	57                   	push   edi
c0003c89:	89 c7                	mov    edi,eax
c0003c8b:	56                   	push   esi
c0003c8c:	31 f6                	xor    esi,esi
c0003c8e:	53                   	push   ebx
c0003c8f:	83 ec 3c             	sub    esp,0x3c
c0003c92:	8b 02                	mov    eax,DWORD PTR [edx]
c0003c94:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003c98:	8b 07                	mov    eax,DWORD PTR [edi]
c0003c9a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0003c9d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0003ca1:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c0003ca5:	e8 72 e0 ff ff       	call   c0001d1c <tchar2uni>
c0003caa:	89 c3                	mov    ebx,eax
c0003cac:	83 f8 ff             	cmp    eax,0xffffffff
c0003caf:	75 0a                	jne    c0003cbb <create_name+0x36>
c0003cb1:	b8 06 00 00 00       	mov    eax,0x6
c0003cb6:	e9 9e 02 00 00       	jmp    c0003f59 <create_name+0x2d4>
c0003cbb:	3d ff ff 00 00       	cmp    eax,0xffff
c0003cc0:	76 0c                	jbe    c0003cce <create_name+0x49>
c0003cc2:	c1 e8 10             	shr    eax,0x10
c0003cc5:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0003cc9:	66 89 04 71          	mov    WORD PTR [ecx+esi*2],ax
c0003ccd:	46                   	inc    esi
c0003cce:	66 83 fb 1f          	cmp    bx,0x1f
c0003cd2:	76 4f                	jbe    c0003d23 <create_name+0x9e>
c0003cd4:	66 83 fb 5c          	cmp    bx,0x5c
c0003cd8:	74 35                	je     c0003d0f <create_name+0x8a>
c0003cda:	66 83 fb 2f          	cmp    bx,0x2f
c0003cde:	74 2f                	je     c0003d0f <create_name+0x8a>
c0003ce0:	66 83 fb 7f          	cmp    bx,0x7f
c0003ce4:	77 11                	ja     c0003cf7 <create_name+0x72>
c0003ce6:	0f b7 d3             	movzx  edx,bx
c0003ce9:	b8 72 9d 02 c0       	mov    eax,0xc0029d72
c0003cee:	e8 11 e0 ff ff       	call   c0001d04 <chk_chr>
c0003cf3:	85 c0                	test   eax,eax
c0003cf5:	75 ba                	jne    c0003cb1 <create_name+0x2c>
c0003cf7:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0003cfd:	77 b2                	ja     c0003cb1 <create_name+0x2c>
c0003cff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d03:	66 89 1c 70          	mov    WORD PTR [eax+esi*2],bx
c0003d07:	46                   	inc    esi
c0003d08:	eb 97                	jmp    c0003ca1 <create_name+0x1c>
c0003d0a:	40                   	inc    eax
c0003d0b:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0003d0f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d13:	8a 10                	mov    dl,BYTE PTR [eax]
c0003d15:	80 fa 2f             	cmp    dl,0x2f
c0003d18:	74 f0                	je     c0003d0a <create_name+0x85>
c0003d1a:	80 fa 5c             	cmp    dl,0x5c
c0003d1d:	74 eb                	je     c0003d0a <create_name+0x85>
c0003d1f:	31 db                	xor    ebx,ebx
c0003d21:	eb 02                	jmp    c0003d25 <create_name+0xa0>
c0003d23:	b3 04                	mov    bl,0x4
c0003d25:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0003d29:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0003d2c:	85 f6                	test   esi,esi
c0003d2e:	74 18                	je     c0003d48 <create_name+0xc3>
c0003d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d34:	66 8b 44 70 fe       	mov    ax,WORD PTR [eax+esi*2-0x2]
c0003d39:	66 83 f8 20          	cmp    ax,0x20
c0003d3d:	74 06                	je     c0003d45 <create_name+0xc0>
c0003d3f:	66 83 f8 2e          	cmp    ax,0x2e
c0003d43:	75 03                	jne    c0003d48 <create_name+0xc3>
c0003d45:	4e                   	dec    esi
c0003d46:	eb e4                	jmp    c0003d2c <create_name+0xa7>
c0003d48:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d4c:	31 ed                	xor    ebp,ebp
c0003d4e:	66 c7 04 70 00 00    	mov    WORD PTR [eax+esi*2],0x0
c0003d54:	85 f6                	test   esi,esi
c0003d56:	0f 84 55 ff ff ff    	je     c0003cb1 <create_name+0x2c>
c0003d5c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d60:	8d 55 01             	lea    edx,[ebp+0x1]
c0003d63:	66 8b 04 68          	mov    ax,WORD PTR [eax+ebp*2]
c0003d67:	66 83 f8 20          	cmp    ax,0x20
c0003d6b:	75 04                	jne    c0003d71 <create_name+0xec>
c0003d6d:	89 d5                	mov    ebp,edx
c0003d6f:	eb eb                	jmp    c0003d5c <create_name+0xd7>
c0003d71:	85 ed                	test   ebp,ebp
c0003d73:	75 06                	jne    c0003d7b <create_name+0xf6>
c0003d75:	66 83 f8 2e          	cmp    ax,0x2e
c0003d79:	75 08                	jne    c0003d83 <create_name+0xfe>
c0003d7b:	83 cb 03             	or     ebx,0x3
c0003d7e:	eb 03                	jmp    c0003d83 <create_name+0xfe>
c0003d80:	4e                   	dec    esi
c0003d81:	74 0c                	je     c0003d8f <create_name+0x10a>
c0003d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003d87:	66 83 7c 70 fe 2e    	cmp    WORD PTR [eax+esi*2-0x2],0x2e
c0003d8d:	75 f1                	jne    c0003d80 <create_name+0xfb>
c0003d8f:	b9 0b 00 00 00       	mov    ecx,0xb
c0003d94:	8d 47 3c             	lea    eax,[edi+0x3c]
c0003d97:	ba 20 00 00 00       	mov    edx,0x20
c0003d9c:	e8 35 df ff ff       	call   c0001cd6 <mem_set>
c0003da1:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0003da9:	31 c9                	xor    ecx,ecx
c0003dab:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0003db0:	8d 45 01             	lea    eax,[ebp+0x1]
c0003db3:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0003db7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0003dbb:	0f b7 2c 68          	movzx  ebp,WORD PTR [eax+ebp*2]
c0003dbf:	66 85 ed             	test   bp,bp
c0003dc2:	0f 84 30 01 00 00    	je     c0003ef8 <create_name+0x273>
c0003dc8:	66 83 fd 20          	cmp    bp,0x20
c0003dcc:	74 10                	je     c0003dde <create_name+0x159>
c0003dce:	66 83 fd 2e          	cmp    bp,0x2e
c0003dd2:	75 13                	jne    c0003de7 <create_name+0x162>
c0003dd4:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003dd8:	0f 84 6b 01 00 00    	je     c0003f49 <create_name+0x2c4>
c0003dde:	83 cb 03             	or     ebx,0x3
c0003de1:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0003de5:	eb c9                	jmp    c0003db0 <create_name+0x12b>
c0003de7:	3b 4c 24 08          	cmp    ecx,DWORD PTR [esp+0x8]
c0003deb:	73 0b                	jae    c0003df8 <create_name+0x173>
c0003ded:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003df1:	75 47                	jne    c0003e3a <create_name+0x1b5>
c0003df3:	e9 51 01 00 00       	jmp    c0003f49 <create_name+0x2c4>
c0003df8:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003dfd:	75 10                	jne    c0003e0f <create_name+0x18a>
c0003dff:	83 cb 03             	or     ebx,0x3
c0003e02:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e0a:	e9 e9 00 00 00       	jmp    c0003ef8 <create_name+0x273>
c0003e0f:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e13:	74 0d                	je     c0003e22 <create_name+0x19d>
c0003e15:	83 cb 03             	or     ebx,0x3
c0003e18:	39 74 24 14          	cmp    DWORD PTR [esp+0x14],esi
c0003e1c:	0f 87 d6 00 00 00    	ja     c0003ef8 <create_name+0x273>
c0003e22:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003e27:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0003e2b:	c7 44 24 08 0b 00 00 00 	mov    DWORD PTR [esp+0x8],0xb
c0003e33:	b9 08 00 00 00       	mov    ecx,0x8
c0003e38:	eb a7                	jmp    c0003de1 <create_name+0x15c>
c0003e3a:	66 83 fd 7f          	cmp    bp,0x7f
c0003e3e:	76 68                	jbe    c0003ea8 <create_name+0x223>
c0003e40:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0003e44:	88 da                	mov    dl,bl
c0003e46:	83 ca 02             	or     edx,0x2
c0003e49:	88 54 24 18          	mov    BYTE PTR [esp+0x18],dl
c0003e4d:	50                   	push   eax
c0003e4e:	50                   	push   eax
c0003e4f:	68 b5 01 00 00       	push   0x1b5
c0003e54:	55                   	push   ebp
c0003e55:	e8 48 46 00 00       	call   c00084a2 <ff_uni2oem>
c0003e5a:	83 c4 10             	add    esp,0x10
c0003e5d:	89 c5                	mov    ebp,eax
c0003e5f:	a8 80                	test   al,0x80
c0003e61:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c0003e65:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0003e69:	74 0c                	je     c0003e77 <create_name+0x1f2>
c0003e6b:	83 e5 7f             	and    ebp,0x7f
c0003e6e:	0f b6 ad c0 9c 02 c0 	movzx  ebp,BYTE PTR [ebp-0x3ffd6340]
c0003e75:	eb 2a                	jmp    c0003ea1 <create_name+0x21c>
c0003e77:	66 3d ff 00          	cmp    ax,0xff
c0003e7b:	76 24                	jbe    c0003ea1 <create_name+0x21c>
c0003e7d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0003e81:	48                   	dec    eax
c0003e82:	39 c8                	cmp    eax,ecx
c0003e84:	77 0c                	ja     c0003e92 <create_name+0x20d>
c0003e86:	83 cb 03             	or     ebx,0x3
c0003e89:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0003e8d:	e9 4f ff ff ff       	jmp    c0003de1 <create_name+0x15c>
c0003e92:	89 e8                	mov    eax,ebp
c0003e94:	88 d3                	mov    bl,dl
c0003e96:	66 c1 e8 08          	shr    ax,0x8
c0003e9a:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003e9e:	41                   	inc    ecx
c0003e9f:	eb 4b                	jmp    c0003eec <create_name+0x267>
c0003ea1:	88 d3                	mov    bl,dl
c0003ea3:	66 85 ed             	test   bp,bp
c0003ea6:	74 19                	je     c0003ec1 <create_name+0x23c>
c0003ea8:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0003eac:	0f b7 d5             	movzx  edx,bp
c0003eaf:	b8 7b 9d 02 c0       	mov    eax,0xc0029d7b
c0003eb4:	e8 4b de ff ff       	call   c0001d04 <chk_chr>
c0003eb9:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0003ebd:	85 c0                	test   eax,eax
c0003ebf:	74 0a                	je     c0003ecb <create_name+0x246>
c0003ec1:	83 cb 03             	or     ebx,0x3
c0003ec4:	bd 5f 00 00 00       	mov    ebp,0x5f
c0003ec9:	eb 21                	jmp    c0003eec <create_name+0x267>
c0003ecb:	8d 45 bf             	lea    eax,[ebp-0x41]
c0003ece:	66 83 f8 19          	cmp    ax,0x19
c0003ed2:	77 07                	ja     c0003edb <create_name+0x256>
c0003ed4:	80 4c 24 0f 02       	or     BYTE PTR [esp+0xf],0x2
c0003ed9:	eb 11                	jmp    c0003eec <create_name+0x267>
c0003edb:	8d 45 9f             	lea    eax,[ebp-0x61]
c0003ede:	66 83 f8 19          	cmp    ax,0x19
c0003ee2:	77 08                	ja     c0003eec <create_name+0x267>
c0003ee4:	80 4c 24 0f 01       	or     BYTE PTR [esp+0xf],0x1
c0003ee9:	83 ed 20             	sub    ebp,0x20
c0003eec:	89 e8                	mov    eax,ebp
c0003eee:	88 44 0f 3c          	mov    BYTE PTR [edi+ecx*1+0x3c],al
c0003ef2:	41                   	inc    ecx
c0003ef3:	e9 e9 fe ff ff       	jmp    c0003de1 <create_name+0x15c>
c0003ef8:	80 7f 3c e5          	cmp    BYTE PTR [edi+0x3c],0xe5
c0003efc:	75 04                	jne    c0003f02 <create_name+0x27d>
c0003efe:	c6 47 3c 05          	mov    BYTE PTR [edi+0x3c],0x5
c0003f02:	83 7c 24 08 08       	cmp    DWORD PTR [esp+0x8],0x8
c0003f07:	75 05                	jne    c0003f0e <create_name+0x289>
c0003f09:	c0 64 24 0f 02       	shl    BYTE PTR [esp+0xf],0x2
c0003f0e:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f12:	83 e0 0c             	and    eax,0xc
c0003f15:	3c 0c                	cmp    al,0xc
c0003f17:	74 0b                	je     c0003f24 <create_name+0x29f>
c0003f19:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0003f1d:	83 e0 03             	and    eax,0x3
c0003f20:	3c 03                	cmp    al,0x3
c0003f22:	75 05                	jne    c0003f29 <create_name+0x2a4>
c0003f24:	83 cb 02             	or     ebx,0x2
c0003f27:	eb 19                	jmp    c0003f42 <create_name+0x2bd>
c0003f29:	f6 c3 02             	test   bl,0x2
c0003f2c:	75 14                	jne    c0003f42 <create_name+0x2bd>
c0003f2e:	f6 44 24 0f 01       	test   BYTE PTR [esp+0xf],0x1
c0003f33:	74 03                	je     c0003f38 <create_name+0x2b3>
c0003f35:	83 cb 10             	or     ebx,0x10
c0003f38:	f6 44 24 0f 04       	test   BYTE PTR [esp+0xf],0x4
c0003f3d:	74 03                	je     c0003f42 <create_name+0x2bd>
c0003f3f:	83 cb 08             	or     ebx,0x8
c0003f42:	88 5f 47             	mov    BYTE PTR [edi+0x47],bl
c0003f45:	31 c0                	xor    eax,eax
c0003f47:	eb 10                	jmp    c0003f59 <create_name+0x2d4>
c0003f49:	83 7c 24 08 0b       	cmp    DWORD PTR [esp+0x8],0xb
c0003f4e:	0f 85 ce fe ff ff    	jne    c0003e22 <create_name+0x19d>
c0003f54:	e9 a6 fe ff ff       	jmp    c0003dff <create_name+0x17a>
c0003f59:	83 c4 3c             	add    esp,0x3c
c0003f5c:	5b                   	pop    ebx
c0003f5d:	5e                   	pop    esi
c0003f5e:	5f                   	pop    edi
c0003f5f:	5d                   	pop    ebp
c0003f60:	c3                   	ret    

c0003f61 <xname_sum>:
c0003f61:	56                   	push   esi
c0003f62:	53                   	push   ebx
c0003f63:	89 c6                	mov    esi,eax
c0003f65:	51                   	push   ecx
c0003f66:	31 db                	xor    ebx,ebx
c0003f68:	83 c6 02             	add    esi,0x2
c0003f6b:	0f b7 46 fe          	movzx  eax,WORD PTR [esi-0x2]
c0003f6f:	66 85 c0             	test   ax,ax
c0003f72:	74 1f                	je     c0003f93 <xname_sum+0x32>
c0003f74:	83 ec 0c             	sub    esp,0xc
c0003f77:	66 d1 cb             	ror    bx,1
c0003f7a:	50                   	push   eax
c0003f7b:	e8 1e 46 00 00       	call   c000859e <ff_wtoupper>
c0003f80:	83 c4 10             	add    esp,0x10
c0003f83:	0f b6 d0             	movzx  edx,al
c0003f86:	66 c1 e8 08          	shr    ax,0x8
c0003f8a:	01 d3                	add    ebx,edx
c0003f8c:	66 d1 cb             	ror    bx,1
c0003f8f:	01 c3                	add    ebx,eax
c0003f91:	eb d5                	jmp    c0003f68 <xname_sum+0x7>
c0003f93:	89 d8                	mov    eax,ebx
c0003f95:	5a                   	pop    edx
c0003f96:	5b                   	pop    ebx
c0003f97:	5e                   	pop    esi
c0003f98:	c3                   	ret    

c0003f99 <create_xdir>:
c0003f99:	55                   	push   ebp
c0003f9a:	b9 40 00 00 00       	mov    ecx,0x40
c0003f9f:	57                   	push   edi
c0003fa0:	bd 01 00 00 00       	mov    ebp,0x1
c0003fa5:	56                   	push   esi
c0003fa6:	31 ff                	xor    edi,edi
c0003fa8:	53                   	push   ebx
c0003fa9:	be 40 00 00 00       	mov    esi,0x40
c0003fae:	89 c3                	mov    ebx,eax
c0003fb0:	83 ec 1c             	sub    esp,0x1c
c0003fb3:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0003fb7:	31 d2                	xor    edx,edx
c0003fb9:	e8 18 dd ff ff       	call   c0001cd6 <mem_set>
c0003fbe:	c6 03 85             	mov    BYTE PTR [ebx],0x85
c0003fc1:	c6 43 20 c0          	mov    BYTE PTR [ebx+0x20],0xc0
c0003fc5:	31 c9                	xor    ecx,ecx
c0003fc7:	8d 46 01             	lea    eax,[esi+0x1]
c0003fca:	c6 04 33 c1          	mov    BYTE PTR [ebx+esi*1],0xc1
c0003fce:	83 c6 02             	add    esi,0x2
c0003fd1:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0003fd5:	66 85 ed             	test   bp,bp
c0003fd8:	74 12                	je     c0003fec <create_xdir+0x53>
c0003fda:	0f b6 c1             	movzx  eax,cl
c0003fdd:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0003fe1:	66 8b 2c 42          	mov    bp,WORD PTR [edx+eax*2]
c0003fe5:	66 83 fd 01          	cmp    bp,0x1
c0003fe9:	80 d9 ff             	sbb    cl,0xff
c0003fec:	8d 04 33             	lea    eax,[ebx+esi*1]
c0003fef:	0f b7 d5             	movzx  edx,bp
c0003ff2:	83 c6 02             	add    esi,0x2
c0003ff5:	e8 ba dc ff ff       	call   c0001cb4 <st_word>
c0003ffa:	f7 c6 1f 00 00 00    	test   esi,0x1f
c0004000:	75 d3                	jne    c0003fd5 <create_xdir+0x3c>
c0004002:	8d 47 01             	lea    eax,[edi+0x1]
c0004005:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004009:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c000400d:	0f b6 c1             	movzx  eax,cl
c0004010:	66 83 3c 42 00       	cmp    WORD PTR [edx+eax*2],0x0
c0004015:	74 07                	je     c000401e <create_xdir+0x85>
c0004017:	0f b6 7c 24 0f       	movzx  edi,BYTE PTR [esp+0xf]
c000401c:	eb a9                	jmp    c0003fc7 <create_xdir+0x2e>
c000401e:	8d 47 02             	lea    eax,[edi+0x2]
c0004021:	88 4b 23             	mov    BYTE PTR [ebx+0x23],cl
c0004024:	88 43 01             	mov    BYTE PTR [ebx+0x1],al
c0004027:	89 d0                	mov    eax,edx
c0004029:	e8 33 ff ff ff       	call   c0003f61 <xname_sum>
c000402e:	83 c4 1c             	add    esp,0x1c
c0004031:	0f b7 d0             	movzx  edx,ax
c0004034:	8d 43 24             	lea    eax,[ebx+0x24]
c0004037:	5b                   	pop    ebx
c0004038:	5e                   	pop    esi
c0004039:	5f                   	pop    edi
c000403a:	5d                   	pop    ebp
c000403b:	e9 74 dc ff ff       	jmp    c0001cb4 <st_word>

c0004040 <cmp_lfn>:
c0004040:	55                   	push   ebp
c0004041:	57                   	push   edi
c0004042:	89 d7                	mov    edi,edx
c0004044:	56                   	push   esi
c0004045:	53                   	push   ebx
c0004046:	83 ec 1c             	sub    esp,0x1c
c0004049:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000404d:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004050:	e8 ed db ff ff       	call   c0001c42 <ld_word>
c0004055:	66 85 c0             	test   ax,ax
c0004058:	74 07                	je     c0004061 <cmp_lfn+0x21>
c000405a:	31 c0                	xor    eax,eax
c000405c:	e9 9a 00 00 00       	jmp    c00040fb <cmp_lfn+0xbb>
c0004061:	8a 1f                	mov    bl,BYTE PTR [edi]
c0004063:	bd 01 00 00 00       	mov    ebp,0x1
c0004068:	83 e3 3f             	and    ebx,0x3f
c000406b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0004073:	4b                   	dec    ebx
c0004074:	6b db 0d             	imul   ebx,ebx,0xd
c0004077:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000407b:	0f b6 80 40 9d 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd62c0]
c0004082:	01 f8                	add    eax,edi
c0004084:	e8 b9 db ff ff       	call   c0001c42 <ld_word>
c0004089:	66 85 ed             	test   bp,bp
c000408c:	89 c6                	mov    esi,eax
c000408e:	74 3c                	je     c00040cc <cmp_lfn+0x8c>
c0004090:	81 fb ff 00 00 00    	cmp    ebx,0xff
c0004096:	77 c2                	ja     c000405a <cmp_lfn+0x1a>
c0004098:	83 ec 0c             	sub    esp,0xc
c000409b:	0f b7 c0             	movzx  eax,ax
c000409e:	50                   	push   eax
c000409f:	e8 fa 44 00 00       	call   c000859e <ff_wtoupper>
c00040a4:	89 c5                	mov    ebp,eax
c00040a6:	8d 43 01             	lea    eax,[ebx+0x1]
c00040a9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00040ad:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00040b1:	0f b7 04 58          	movzx  eax,WORD PTR [eax+ebx*2]
c00040b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00040b8:	e8 e1 44 00 00       	call   c000859e <ff_wtoupper>
c00040bd:	83 c4 10             	add    esp,0x10
c00040c0:	39 c5                	cmp    ebp,eax
c00040c2:	75 96                	jne    c000405a <cmp_lfn+0x1a>
c00040c4:	89 f5                	mov    ebp,esi
c00040c6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00040ca:	eb 04                	jmp    c00040d0 <cmp_lfn+0x90>
c00040cc:	66 46                	inc    si
c00040ce:	75 8a                	jne    c000405a <cmp_lfn+0x1a>
c00040d0:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c00040d4:	83 7c 24 04 0d       	cmp    DWORD PTR [esp+0x4],0xd
c00040d9:	75 9c                	jne    c0004077 <cmp_lfn+0x37>
c00040db:	f6 07 40             	test   BYTE PTR [edi],0x40
c00040de:	74 16                	je     c00040f6 <cmp_lfn+0xb6>
c00040e0:	66 85 ed             	test   bp,bp
c00040e3:	74 11                	je     c00040f6 <cmp_lfn+0xb6>
c00040e5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00040e9:	66 83 3c 58 00       	cmp    WORD PTR [eax+ebx*2],0x0
c00040ee:	0f 94 c0             	sete   al
c00040f1:	0f b6 c0             	movzx  eax,al
c00040f4:	eb 05                	jmp    c00040fb <cmp_lfn+0xbb>
c00040f6:	b8 01 00 00 00       	mov    eax,0x1
c00040fb:	83 c4 1c             	add    esp,0x1c
c00040fe:	5b                   	pop    ebx
c00040ff:	5e                   	pop    esi
c0004100:	5f                   	pop    edi
c0004101:	5d                   	pop    ebp
c0004102:	c3                   	ret    

c0004103 <dir_find>:
c0004103:	55                   	push   ebp
c0004104:	31 d2                	xor    edx,edx
c0004106:	57                   	push   edi
c0004107:	56                   	push   esi
c0004108:	53                   	push   ebx
c0004109:	89 c3                	mov    ebx,eax
c000410b:	83 ec 1c             	sub    esp,0x1c
c000410e:	8b 30                	mov    esi,DWORD PTR [eax]
c0004110:	e8 89 f0 ff ff       	call   c000319e <dir_sdi>
c0004115:	89 04 24             	mov    DWORD PTR [esp],eax
c0004118:	85 c0                	test   eax,eax
c000411a:	0f 85 9e 01 00 00    	jne    c00042be <dir_find+0x1bb>
c0004120:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004123:	0f 85 8d 00 00 00    	jne    c00041b6 <dir_find+0xb3>
c0004129:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000412c:	e8 30 fe ff ff       	call   c0003f61 <xname_sum>
c0004131:	89 c7                	mov    edi,eax
c0004133:	31 d2                	xor    edx,edx
c0004135:	89 d8                	mov    eax,ebx
c0004137:	e8 72 f8 ff ff       	call   c00039ae <dir_read>
c000413c:	85 c0                	test   eax,eax
c000413e:	0f 85 5e 01 00 00    	jne    c00042a2 <dir_find+0x19f>
c0004144:	8b 4e 10             	mov    ecx,DWORD PTR [esi+0x10]
c0004147:	8d 41 24             	lea    eax,[ecx+0x24]
c000414a:	e8 f3 da ff ff       	call   c0001c42 <ld_word>
c000414f:	66 39 f8             	cmp    ax,di
c0004152:	75 df                	jne    c0004133 <dir_find+0x30>
c0004154:	8a 41 23             	mov    al,BYTE PTR [ecx+0x23]
c0004157:	31 ed                	xor    ebp,ebp
c0004159:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c000415d:	ba 40 00 00 00       	mov    edx,0x40
c0004162:	89 e9                	mov    ecx,ebp
c0004164:	38 4c 24 0b          	cmp    BYTE PTR [esp+0xb],cl
c0004168:	0f 84 42 01 00 00    	je     c00042b0 <dir_find+0x1ad>
c000416e:	f6 c2 1f             	test   dl,0x1f
c0004171:	75 03                	jne    c0004176 <dir_find+0x73>
c0004173:	83 c2 02             	add    edx,0x2
c0004176:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000417a:	89 d0                	mov    eax,edx
c000417c:	03 46 10             	add    eax,DWORD PTR [esi+0x10]
c000417f:	e8 be da ff ff       	call   c0001c42 <ld_word>
c0004184:	83 ec 0c             	sub    esp,0xc
c0004187:	0f b7 c0             	movzx  eax,ax
c000418a:	50                   	push   eax
c000418b:	e8 0e 44 00 00       	call   c000859e <ff_wtoupper>
c0004190:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0004194:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004197:	0f b7 04 68          	movzx  eax,WORD PTR [eax+ebp*2]
c000419b:	89 04 24             	mov    DWORD PTR [esp],eax
c000419e:	e8 fb 43 00 00       	call   c000859e <ff_wtoupper>
c00041a3:	83 c4 10             	add    esp,0x10
c00041a6:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c00041aa:	75 87                	jne    c0004133 <dir_find+0x30>
c00041ac:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00041b0:	45                   	inc    ebp
c00041b1:	83 c2 02             	add    edx,0x2
c00041b4:	eb ac                	jmp    c0004162 <dir_find+0x5f>
c00041b6:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c00041bd:	c6 44 24 04 ff       	mov    BYTE PTR [esp+0x4],0xff
c00041c2:	bf ff ff ff ff       	mov    edi,0xffffffff
c00041c7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00041ca:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00041cd:	89 f0                	mov    eax,esi
c00041cf:	e8 4c e2 ff ff       	call   c0002420 <move_window>
c00041d4:	85 c0                	test   eax,eax
c00041d6:	0f 85 c6 00 00 00    	jne    c00042a2 <dir_find+0x19f>
c00041dc:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00041df:	8a 4d 00             	mov    cl,BYTE PTR [ebp+0x0]
c00041e2:	84 c9                	test   cl,cl
c00041e4:	0f 84 bd 00 00 00    	je     c00042a7 <dir_find+0x1a4>
c00041ea:	8a 55 0b             	mov    dl,BYTE PTR [ebp+0xb]
c00041ed:	88 d0                	mov    al,dl
c00041ef:	83 e0 3f             	and    eax,0x3f
c00041f2:	80 f9 e5             	cmp    cl,0xe5
c00041f5:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00041f8:	0f 84 87 00 00 00    	je     c0004285 <dir_find+0x182>
c00041fe:	80 e2 08             	and    dl,0x8
c0004201:	74 06                	je     c0004209 <dir_find+0x106>
c0004203:	3c 0f                	cmp    al,0xf
c0004205:	75 7e                	jne    c0004285 <dir_find+0x182>
c0004207:	eb 04                	jmp    c000420d <dir_find+0x10a>
c0004209:	3c 0f                	cmp    al,0xf
c000420b:	75 4c                	jne    c0004259 <dir_find+0x156>
c000420d:	f6 43 47 40          	test   BYTE PTR [ebx+0x47],0x40
c0004211:	75 7e                	jne    c0004291 <dir_find+0x18e>
c0004213:	f6 c1 40             	test   cl,0x40
c0004216:	74 12                	je     c000422a <dir_find+0x127>
c0004218:	8a 45 0d             	mov    al,BYTE PTR [ebp+0xd]
c000421b:	83 e1 bf             	and    ecx,0xffffffbf
c000421e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0004222:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004225:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004228:	eb 06                	jmp    c0004230 <dir_find+0x12d>
c000422a:	89 f8                	mov    eax,edi
c000422c:	38 c8                	cmp    al,cl
c000422e:	75 5c                	jne    c000428c <dir_find+0x189>
c0004230:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0004234:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004239:	38 45 0d             	cmp    BYTE PTR [ebp+0xd],al
c000423c:	75 53                	jne    c0004291 <dir_find+0x18e>
c000423e:	88 4c 24 0b          	mov    BYTE PTR [esp+0xb],cl
c0004242:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0004245:	89 ea                	mov    edx,ebp
c0004247:	e8 f4 fd ff ff       	call   c0004040 <cmp_lfn>
c000424c:	85 c0                	test   eax,eax
c000424e:	74 41                	je     c0004291 <dir_find+0x18e>
c0004250:	8a 4c 24 0b          	mov    cl,BYTE PTR [esp+0xb]
c0004254:	8d 79 ff             	lea    edi,[ecx-0x1]
c0004257:	eb 38                	jmp    c0004291 <dir_find+0x18e>
c0004259:	89 f8                	mov    eax,edi
c000425b:	84 c0                	test   al,al
c000425d:	75 0d                	jne    c000426c <dir_find+0x169>
c000425f:	89 e8                	mov    eax,ebp
c0004261:	e8 98 de ff ff       	call   c00020fe <sum_sfn>
c0004266:	3a 44 24 04          	cmp    al,BYTE PTR [esp+0x4]
c000426a:	74 52                	je     c00042be <dir_find+0x1bb>
c000426c:	f6 43 47 01          	test   BYTE PTR [ebx+0x47],0x1
c0004270:	75 13                	jne    c0004285 <dir_find+0x182>
c0004272:	8d 53 3c             	lea    edx,[ebx+0x3c]
c0004275:	b9 0b 00 00 00       	mov    ecx,0xb
c000427a:	89 e8                	mov    eax,ebp
c000427c:	e8 60 da ff ff       	call   c0001ce1 <mem_cmp>
c0004281:	85 c0                	test   eax,eax
c0004283:	74 39                	je     c00042be <dir_find+0x1bb>
c0004285:	c7 43 48 ff ff ff ff 	mov    DWORD PTR [ebx+0x48],0xffffffff
c000428c:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004291:	31 d2                	xor    edx,edx
c0004293:	89 d8                	mov    eax,ebx
c0004295:	e8 5c f4 ff ff       	call   c00036f6 <dir_next>
c000429a:	85 c0                	test   eax,eax
c000429c:	0f 84 25 ff ff ff    	je     c00041c7 <dir_find+0xc4>
c00042a2:	89 04 24             	mov    DWORD PTR [esp],eax
c00042a5:	eb 17                	jmp    c00042be <dir_find+0x1bb>
c00042a7:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c00042ae:	eb 0e                	jmp    c00042be <dir_find+0x1bb>
c00042b0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c00042b3:	66 83 3c 68 00       	cmp    WORD PTR [eax+ebp*2],0x0
c00042b8:	0f 85 75 fe ff ff    	jne    c0004133 <dir_find+0x30>
c00042be:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00042c1:	83 c4 1c             	add    esp,0x1c
c00042c4:	5b                   	pop    ebx
c00042c5:	5e                   	pop    esi
c00042c6:	5f                   	pop    edi
c00042c7:	5d                   	pop    ebp
c00042c8:	c3                   	ret    

c00042c9 <dir_register>:
c00042c9:	55                   	push   ebp
c00042ca:	57                   	push   edi
c00042cb:	56                   	push   esi
c00042cc:	be 06 00 00 00       	mov    esi,0x6
c00042d1:	53                   	push   ebx
c00042d2:	83 ec 6c             	sub    esp,0x6c
c00042d5:	f6 40 47 a0          	test   BYTE PTR [eax+0x47],0xa0
c00042d9:	0f 85 62 02 00 00    	jne    c0004541 <dir_register+0x278>
c00042df:	8b 28                	mov    ebp,DWORD PTR [eax]
c00042e1:	31 ff                	xor    edi,edi
c00042e3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00042e6:	66 83 3c 7a 00       	cmp    WORD PTR [edx+edi*2],0x0
c00042eb:	74 03                	je     c00042f0 <dir_register+0x27>
c00042ed:	47                   	inc    edi
c00042ee:	eb f6                	jmp    c00042e6 <dir_register+0x1d>
c00042f0:	89 c3                	mov    ebx,eax
c00042f2:	80 7d 00 04          	cmp    BYTE PTR [ebp+0x0],0x4
c00042f6:	0f 85 e1 00 00 00    	jne    c00043dd <dir_register+0x114>
c00042fc:	83 c7 0e             	add    edi,0xe
c00042ff:	b9 0f 00 00 00       	mov    ecx,0xf
c0004304:	89 f8                	mov    eax,edi
c0004306:	31 d2                	xor    edx,edx
c0004308:	f7 f1                	div    ecx
c000430a:	8d 50 02             	lea    edx,[eax+0x2]
c000430d:	89 c7                	mov    edi,eax
c000430f:	89 d8                	mov    eax,ebx
c0004311:	e8 12 f8 ff ff       	call   c0003b28 <dir_alloc>
c0004316:	89 c6                	mov    esi,eax
c0004318:	85 c0                	test   eax,eax
c000431a:	0f 85 21 02 00 00    	jne    c0004541 <dir_register+0x278>
c0004320:	81 c7 01 00 00 08    	add    edi,0x8000001
c0004326:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0004329:	c1 e7 05             	shl    edi,0x5
c000432c:	29 f8                	sub    eax,edi
c000432e:	89 43 48             	mov    DWORD PTR [ebx+0x48],eax
c0004331:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c0004334:	a8 04                	test   al,0x4
c0004336:	0f 84 91 00 00 00    	je     c00043cd <dir_register+0x104>
c000433c:	83 e0 fb             	and    eax,0xfffffffb
c000433f:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004342:	89 d8                	mov    eax,ebx
c0004344:	e8 25 ec ff ff       	call   c0002f6e <fill_first_frag>
c0004349:	85 c0                	test   eax,eax
c000434b:	0f 85 ee 01 00 00    	jne    c000453f <dir_register+0x276>
c0004351:	83 c9 ff             	or     ecx,0xffffffff
c0004354:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0004357:	89 d8                	mov    eax,ebx
c0004359:	e8 db eb ff ff       	call   c0002f39 <fill_last_frag>
c000435e:	85 c0                	test   eax,eax
c0004360:	0f 85 d9 01 00 00    	jne    c000453f <dir_register+0x276>
c0004366:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000436a:	74 61                	je     c00043cd <dir_register+0x104>
c000436c:	89 da                	mov    edx,ebx
c000436e:	8d 44 24 14          	lea    eax,[esp+0x14]
c0004372:	e8 ea f5 ff ff       	call   c0003961 <load_obj_xdir>
c0004377:	85 c0                	test   eax,eax
c0004379:	0f 85 c0 01 00 00    	jne    c000453f <dir_register+0x276>
c000437f:	0f b7 55 0a          	movzx  edx,WORD PTR [ebp+0xa]
c0004383:	31 c9                	xor    ecx,ecx
c0004385:	c1 e2 09             	shl    edx,0x9
c0004388:	03 53 0c             	add    edx,DWORD PTR [ebx+0xc]
c000438b:	13 4b 10             	adc    ecx,DWORD PTR [ebx+0x10]
c000438e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0004391:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0004394:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0004397:	83 c0 38             	add    eax,0x38
c000439a:	e8 1c d9 ff ff       	call   c0001cbb <st_qword>
c000439f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043a2:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00043a5:	83 c0 28             	add    eax,0x28
c00043a8:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00043ab:	e8 0b d9 ff ff       	call   c0001cbb <st_qword>
c00043b0:	8a 43 07             	mov    al,BYTE PTR [ebx+0x7]
c00043b3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00043b6:	83 c8 01             	or     eax,0x1
c00043b9:	88 42 21             	mov    BYTE PTR [edx+0x21],al
c00043bc:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043c0:	e8 db f7 ff ff       	call   c0003ba0 <store_xdir>
c00043c5:	85 c0                	test   eax,eax
c00043c7:	0f 85 72 01 00 00    	jne    c000453f <dir_register+0x276>
c00043cd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00043d0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00043d3:	e8 c1 fb ff ff       	call   c0003f99 <create_xdir>
c00043d8:	e9 64 01 00 00       	jmp    c0004541 <dir_register+0x278>
c00043dd:	8d 40 3c             	lea    eax,[eax+0x3c]
c00043e0:	b9 0c 00 00 00       	mov    ecx,0xc
c00043e5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00043e9:	89 c2                	mov    edx,eax
c00043eb:	8d 44 24 14          	lea    eax,[esp+0x14]
c00043ef:	e8 cd d8 ff ff       	call   c0001cc1 <mem_cpy>
c00043f4:	f6 44 24 1f 01       	test   BYTE PTR [esp+0x1f],0x1
c00043f9:	74 58                	je     c0004453 <dir_register+0x18a>
c00043fb:	c6 43 47 40          	mov    BYTE PTR [ebx+0x47],0x40
c00043ff:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0004407:	83 ec 0c             	sub    esp,0xc
c000440a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c000440d:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004411:	8d 54 24 24          	lea    edx,[esp+0x24]
c0004415:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004419:	e8 24 dc ff ff       	call   c0002042 <gen_numname>
c000441e:	89 d8                	mov    eax,ebx
c0004420:	e8 de fc ff ff       	call   c0004103 <dir_find>
c0004425:	83 c4 10             	add    esp,0x10
c0004428:	89 c6                	mov    esi,eax
c000442a:	85 c0                	test   eax,eax
c000442c:	75 15                	jne    c0004443 <dir_register+0x17a>
c000442e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0004432:	83 7c 24 0c 64       	cmp    DWORD PTR [esp+0xc],0x64
c0004437:	75 ce                	jne    c0004407 <dir_register+0x13e>
c0004439:	be 07 00 00 00       	mov    esi,0x7
c000443e:	e9 fe 00 00 00       	jmp    c0004541 <dir_register+0x278>
c0004443:	83 f8 04             	cmp    eax,0x4
c0004446:	0f 85 f5 00 00 00    	jne    c0004541 <dir_register+0x278>
c000444c:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c0004450:	88 43 47             	mov    BYTE PTR [ebx+0x47],al
c0004453:	b9 01 00 00 00       	mov    ecx,0x1
c0004458:	f6 44 24 1f 02       	test   BYTE PTR [esp+0x1f],0x2
c000445d:	74 0f                	je     c000446e <dir_register+0x1a5>
c000445f:	b9 0d 00 00 00       	mov    ecx,0xd
c0004464:	8d 47 0c             	lea    eax,[edi+0xc]
c0004467:	31 d2                	xor    edx,edx
c0004469:	f7 f1                	div    ecx
c000446b:	8d 48 01             	lea    ecx,[eax+0x1]
c000446e:	89 ca                	mov    edx,ecx
c0004470:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0004474:	89 d8                	mov    eax,ebx
c0004476:	e8 ad f6 ff ff       	call   c0003b28 <dir_alloc>
c000447b:	89 c6                	mov    esi,eax
c000447d:	85 c0                	test   eax,eax
c000447f:	0f 85 bc 00 00 00    	jne    c0004541 <dir_register+0x278>
c0004485:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004489:	49                   	dec    ecx
c000448a:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c000448e:	74 6a                	je     c00044fa <dir_register+0x231>
c0004490:	89 c8                	mov    eax,ecx
c0004492:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004495:	c1 e0 05             	shl    eax,0x5
c0004498:	29 c2                	sub    edx,eax
c000449a:	89 d8                	mov    eax,ebx
c000449c:	e8 fd ec ff ff       	call   c000319e <dir_sdi>
c00044a1:	89 c6                	mov    esi,eax
c00044a3:	85 c0                	test   eax,eax
c00044a5:	0f 85 96 00 00 00    	jne    c0004541 <dir_register+0x278>
c00044ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00044af:	e8 4a dc ff ff       	call   c00020fe <sum_sfn>
c00044b4:	0f b6 f8             	movzx  edi,al
c00044b7:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044ba:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c00044bd:	89 e8                	mov    eax,ebp
c00044bf:	e8 5c df ff ff       	call   c0002420 <move_window>
c00044c4:	89 c6                	mov    esi,eax
c00044c6:	85 c0                	test   eax,eax
c00044c8:	75 77                	jne    c0004541 <dir_register+0x278>
c00044ca:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c00044cf:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c00044d2:	83 ec 0c             	sub    esp,0xc
c00044d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00044d8:	57                   	push   edi
c00044d9:	e8 e0 da ff ff       	call   c0001fbe <put_lfn>
c00044de:	31 d2                	xor    edx,edx
c00044e0:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c00044e4:	89 d8                	mov    eax,ebx
c00044e6:	e8 0b f2 ff ff       	call   c00036f6 <dir_next>
c00044eb:	83 c4 10             	add    esp,0x10
c00044ee:	89 c6                	mov    esi,eax
c00044f0:	85 c0                	test   eax,eax
c00044f2:	75 4d                	jne    c0004541 <dir_register+0x278>
c00044f4:	ff 4c 24 0c          	dec    DWORD PTR [esp+0xc]
c00044f8:	75 bd                	jne    c00044b7 <dir_register+0x1ee>
c00044fa:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00044fd:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0004500:	89 e8                	mov    eax,ebp
c0004502:	e8 19 df ff ff       	call   c0002420 <move_window>
c0004507:	89 c6                	mov    esi,eax
c0004509:	85 c0                	test   eax,eax
c000450b:	75 34                	jne    c0004541 <dir_register+0x278>
c000450d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0004510:	b9 20 00 00 00       	mov    ecx,0x20
c0004515:	31 d2                	xor    edx,edx
c0004517:	e8 ba d7 ff ff       	call   c0001cd6 <mem_set>
c000451c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000451f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0004523:	b9 0b 00 00 00       	mov    ecx,0xb
c0004528:	e8 94 d7 ff ff       	call   c0001cc1 <mem_cpy>
c000452d:	8a 43 47             	mov    al,BYTE PTR [ebx+0x47]
c0004530:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c0004533:	83 e0 18             	and    eax,0x18
c0004536:	88 42 0c             	mov    BYTE PTR [edx+0xc],al
c0004539:	c6 45 03 01          	mov    BYTE PTR [ebp+0x3],0x1
c000453d:	eb 02                	jmp    c0004541 <dir_register+0x278>
c000453f:	89 c6                	mov    esi,eax
c0004541:	83 c4 6c             	add    esp,0x6c
c0004544:	89 f0                	mov    eax,esi
c0004546:	5b                   	pop    ebx
c0004547:	5e                   	pop    esi
c0004548:	5f                   	pop    edi
c0004549:	5d                   	pop    ebp
c000454a:	c3                   	ret    

c000454b <sync_fs>:
c000454b:	56                   	push   esi
c000454c:	53                   	push   ebx
c000454d:	53                   	push   ebx
c000454e:	89 c3                	mov    ebx,eax
c0004550:	e8 37 de ff ff       	call   c000238c <sync_window>
c0004555:	85 c0                	test   eax,eax
c0004557:	0f 85 b1 00 00 00    	jne    c000460e <sync_fs+0xc3>
c000455d:	80 3b 03             	cmp    BYTE PTR [ebx],0x3
c0004560:	0f 85 8e 00 00 00    	jne    c00045f4 <sync_fs+0xa9>
c0004566:	80 7b 04 01          	cmp    BYTE PTR [ebx+0x4],0x1
c000456a:	0f 85 84 00 00 00    	jne    c00045f4 <sync_fs+0xa9>
c0004570:	b9 00 02 00 00       	mov    ecx,0x200
c0004575:	8d 73 54             	lea    esi,[ebx+0x54]
c0004578:	31 d2                	xor    edx,edx
c000457a:	89 f0                	mov    eax,esi
c000457c:	e8 55 d7 ff ff       	call   c0001cd6 <mem_set>
c0004581:	8d 83 52 02 00 00    	lea    eax,[ebx+0x252]
c0004587:	ba 55 aa 00 00       	mov    edx,0xaa55
c000458c:	e8 23 d7 ff ff       	call   c0001cb4 <st_word>
c0004591:	ba 52 52 61 41       	mov    edx,0x41615252
c0004596:	89 f0                	mov    eax,esi
c0004598:	e8 1b d7 ff ff       	call   c0001cb8 <st_dword>
c000459d:	8d 83 38 02 00 00    	lea    eax,[ebx+0x238]
c00045a3:	ba 72 72 41 61       	mov    edx,0x61417272
c00045a8:	e8 0b d7 ff ff       	call   c0001cb8 <st_dword>
c00045ad:	8b 53 18             	mov    edx,DWORD PTR [ebx+0x18]
c00045b0:	8d 83 3c 02 00 00    	lea    eax,[ebx+0x23c]
c00045b6:	e8 fd d6 ff ff       	call   c0001cb8 <st_dword>
c00045bb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c00045be:	8d 83 40 02 00 00    	lea    eax,[ebx+0x240]
c00045c4:	e8 ef d6 ff ff       	call   c0001cb8 <st_dword>
c00045c9:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c00045cc:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c00045cf:	83 c0 01             	add    eax,0x1
c00045d2:	83 d2 00             	adc    edx,0x0
c00045d5:	89 43 4c             	mov    DWORD PTR [ebx+0x4c],eax
c00045d8:	83 ec 0c             	sub    esp,0xc
c00045db:	89 53 50             	mov    DWORD PTR [ebx+0x50],edx
c00045de:	6a 01                	push   0x1
c00045e0:	52                   	push   edx
c00045e1:	50                   	push   eax
c00045e2:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045e6:	56                   	push   esi
c00045e7:	50                   	push   eax
c00045e8:	e8 20 d6 ff ff       	call   c0001c0d <disk_write>
c00045ed:	c6 43 04 00          	mov    BYTE PTR [ebx+0x4],0x0
c00045f1:	83 c4 20             	add    esp,0x20
c00045f4:	0f b6 43 01          	movzx  eax,BYTE PTR [ebx+0x1]
c00045f8:	51                   	push   ecx
c00045f9:	6a 00                	push   0x0
c00045fb:	6a 00                	push   0x0
c00045fd:	50                   	push   eax
c00045fe:	e8 20 d6 ff ff       	call   c0001c23 <disk_ioctl>
c0004603:	83 c4 10             	add    esp,0x10
c0004606:	85 c0                	test   eax,eax
c0004608:	0f 95 c0             	setne  al
c000460b:	0f b6 c0             	movzx  eax,al
c000460e:	5a                   	pop    edx
c000460f:	5b                   	pop    ebx
c0004610:	5e                   	pop    esi
c0004611:	c3                   	ret    

c0004612 <create_partition>:
c0004612:	55                   	push   ebp
c0004613:	0f b6 c0             	movzx  eax,al
c0004616:	57                   	push   edi
c0004617:	56                   	push   esi
c0004618:	53                   	push   ebx
c0004619:	83 ec 60             	sub    esp,0x60
c000461c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0004620:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0004624:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c0004628:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c000462c:	8d 44 24 4c          	lea    eax,[esp+0x4c]
c0004630:	50                   	push   eax
c0004631:	6a 01                	push   0x1
c0004633:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0004637:	e8 e7 d5 ff ff       	call   c0001c23 <disk_ioctl>
c000463c:	83 c4 10             	add    esp,0x10
c000463f:	85 c0                	test   eax,eax
c0004641:	74 0a                	je     c000464d <create_partition+0x3b>
c0004643:	b8 01 00 00 00       	mov    eax,0x1
c0004648:	e9 67 05 00 00       	jmp    c0004bb4 <create_partition+0x5a2>
c000464d:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0004651:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0004655:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004659:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000465d:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0004662:	0f 86 ed 03 00 00    	jbe    c0004a55 <create_partition+0x443>
c0004668:	83 c0 df             	add    eax,0xffffffdf
c000466b:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0004673:	83 d2 ff             	adc    edx,0xffffffff
c0004676:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000467a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000467e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004682:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0004686:	83 c0 bd             	add    eax,0xffffffbd
c0004689:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0004690:	83 d2 ff             	adc    edx,0xffffffff
c0004693:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0004697:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000469b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00046a3:	be 22 00 00 00       	mov    esi,0x22
c00046a8:	31 ff                	xor    edi,edi
c00046aa:	c7 44 24 2c 00 00 21 50 	mov    DWORD PTR [esp+0x2c],0x50210000
c00046b2:	c7 44 24 28 ff ff ff ff 	mov    DWORD PTR [esp+0x28],0xffffffff
c00046ba:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c00046c2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00046c6:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c00046cc:	75 0e                	jne    c00046dc <create_partition+0xca>
c00046ce:	b9 00 02 00 00       	mov    ecx,0x200
c00046d3:	31 d2                	xor    edx,edx
c00046d5:	89 d8                	mov    eax,ebx
c00046d7:	e8 fa d5 ff ff       	call   c0001cd6 <mem_set>
c00046dc:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00046e0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00046e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00046e8:	0b 04 24             	or     eax,DWORD PTR [esp]
c00046eb:	0f 84 23 01 00 00    	je     c0004814 <create_partition+0x202>
c00046f1:	89 f0                	mov    eax,esi
c00046f3:	89 fa                	mov    edx,edi
c00046f5:	05 ff 07 00 00       	add    eax,0x7ff
c00046fa:	83 d2 00             	adc    edx,0x0
c00046fd:	89 c1                	mov    ecx,eax
c00046ff:	89 d7                	mov    edi,edx
c0004701:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004707:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000470b:	89 ce                	mov    esi,ecx
c000470d:	ff 44 24 38          	inc    DWORD PTR [esp+0x38]
c0004711:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0004715:	8b 54 c8 04          	mov    edx,DWORD PTR [eax+ecx*8+0x4]
c0004719:	8b 04 c8             	mov    eax,DWORD PTR [eax+ecx*8]
c000471c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0004720:	89 04 24             	mov    DWORD PTR [esp],eax
c0004723:	b8 64 00 00 00       	mov    eax,0x64
c0004728:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000472b:	b8 00 00 00 00       	mov    eax,0x0
c0004730:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0004734:	72 41                	jb     c0004777 <create_partition+0x165>
c0004736:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c000473a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000473e:	0f af 0c 24          	imul   ecx,DWORD PTR [esp]
c0004742:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0004747:	01 c1                	add    ecx,eax
c0004749:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000474d:	f7 24 24             	mul    DWORD PTR [esp]
c0004750:	6a 00                	push   0x0
c0004752:	01 ca                	add    edx,ecx
c0004754:	6a 64                	push   0x64
c0004756:	52                   	push   edx
c0004757:	50                   	push   eax
c0004758:	e8 67 2a 02 00       	call   c00271c4 <__udivdi3>
c000475d:	83 c4 10             	add    esp,0x10
c0004760:	05 ff 07 00 00       	add    eax,0x7ff
c0004765:	83 d2 00             	adc    edx,0x0
c0004768:	89 c1                	mov    ecx,eax
c000476a:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000476e:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c0004774:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0004777:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000477a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000477e:	01 f0                	add    eax,esi
c0004780:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004784:	11 fa                	adc    edx,edi
c0004786:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c000478a:	19 d1                	sbb    ecx,edx
c000478c:	73 2e                	jae    c00047bc <create_partition+0x1aa>
c000478e:	3b 74 24 10          	cmp    esi,DWORD PTR [esp+0x10]
c0004792:	89 f8                	mov    eax,edi
c0004794:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000479b:	1b 44 24 14          	sbb    eax,DWORD PTR [esp+0x14]
c000479f:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00047a7:	73 6b                	jae    c0004814 <create_partition+0x202>
c00047a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00047ad:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00047b1:	29 f0                	sub    eax,esi
c00047b3:	19 fa                	sbb    edx,edi
c00047b5:	89 04 24             	mov    DWORD PTR [esp],eax
c00047b8:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00047bc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00047c0:	0b 04 24             	or     eax,DWORD PTR [esp]
c00047c3:	74 4f                	je     c0004814 <create_partition+0x202>
c00047c5:	8d 04 2b             	lea    eax,[ebx+ebp*1]
c00047c8:	b9 10 00 00 00       	mov    ecx,0x10
c00047cd:	ba 50 9d 02 c0       	mov    edx,0xc0029d50
c00047d2:	e8 ea d4 ff ff       	call   c0001cc1 <mem_cpy>
c00047d7:	8d 54 2b 10          	lea    edx,[ebx+ebp*1+0x10]
c00047db:	b9 10 00 00 00       	mov    ecx,0x10
c00047e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00047e4:	e8 2c db ff ff       	call   c0002315 <make_rand>
c00047e9:	89 f2                	mov    edx,esi
c00047eb:	89 f9                	mov    ecx,edi
c00047ed:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00047f1:	8d 44 2b 20          	lea    eax,[ebx+ebp*1+0x20]
c00047f5:	e8 c1 d4 ff ff       	call   c0001cbb <st_qword>
c00047fa:	03 34 24             	add    esi,DWORD PTR [esp]
c00047fd:	8d 44 2b 28          	lea    eax,[ebx+ebp*1+0x28]
c0004801:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0004805:	89 f2                	mov    edx,esi
c0004807:	89 f9                	mov    ecx,edi
c0004809:	83 c2 ff             	add    edx,0xffffffff
c000480c:	83 d1 ff             	adc    ecx,0xffffffff
c000480f:	e8 a7 d4 ff ff       	call   c0001cbb <st_qword>
c0004814:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004818:	83 e8 80             	sub    eax,0xffffff80
c000481b:	89 c5                	mov    ebp,eax
c000481d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004821:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0004827:	75 6b                	jne    c0004894 <create_partition+0x282>
c0004829:	45                   	inc    ebp
c000482a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c000482e:	0f b6 54 2b ff       	movzx  edx,BYTE PTR [ebx+ebp*1-0x1]
c0004833:	e8 39 da ff ff       	call   c0002271 <crc32>
c0004838:	81 fd 00 02 00 00    	cmp    ebp,0x200
c000483e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0004842:	75 e5                	jne    c0004829 <create_partition+0x217>
c0004844:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0004848:	31 d2                	xor    edx,edx
c000484a:	83 ec 0c             	sub    esp,0xc
c000484d:	c1 ed 09             	shr    ebp,0x9
c0004850:	6a 01                	push   0x1
c0004852:	8d 45 02             	lea    eax,[ebp+0x2]
c0004855:	52                   	push   edx
c0004856:	50                   	push   eax
c0004857:	53                   	push   ebx
c0004858:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000485c:	e8 ac d3 ff ff       	call   c0001c0d <disk_write>
c0004861:	83 c4 20             	add    esp,0x20
c0004864:	85 c0                	test   eax,eax
c0004866:	0f 85 d7 fd ff ff    	jne    c0004643 <create_partition+0x31>
c000486c:	83 ec 0c             	sub    esp,0xc
c000486f:	31 d2                	xor    edx,edx
c0004871:	6a 01                	push   0x1
c0004873:	89 e8                	mov    eax,ebp
c0004875:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c0004879:	13 54 24 24          	adc    edx,DWORD PTR [esp+0x24]
c000487d:	52                   	push   edx
c000487e:	50                   	push   eax
c000487f:	53                   	push   ebx
c0004880:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004884:	e8 84 d3 ff ff       	call   c0001c0d <disk_write>
c0004889:	83 c4 20             	add    esp,0x20
c000488c:	85 c0                	test   eax,eax
c000488e:	0f 85 af fd ff ff    	jne    c0004643 <create_partition+0x31>
c0004894:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004898:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000489c:	3d 00 40 00 00       	cmp    eax,0x4000
c00048a1:	74 0d                	je     c00048b0 <create_partition+0x29e>
c00048a3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00048a7:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c00048ab:	e9 12 fe ff ff       	jmp    c00046c2 <create_partition+0xb0>
c00048b0:	31 d2                	xor    edx,edx
c00048b2:	b9 00 02 00 00       	mov    ecx,0x200
c00048b7:	89 d8                	mov    eax,ebx
c00048b9:	8d 6b 20             	lea    ebp,[ebx+0x20]
c00048bc:	e8 15 d4 ff ff       	call   c0001cd6 <mem_set>
c00048c1:	8d 7b 48             	lea    edi,[ebx+0x48]
c00048c4:	b9 10 00 00 00       	mov    ecx,0x10
c00048c9:	ba 40 9c 02 c0       	mov    edx,0xc0029c40
c00048ce:	89 d8                	mov    eax,ebx
c00048d0:	e8 ec d3 ff ff       	call   c0001cc1 <mem_cpy>
c00048d5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00048d9:	8d 43 58             	lea    eax,[ebx+0x58]
c00048dc:	f7 d2                	not    edx
c00048de:	e8 d5 d3 ff ff       	call   c0001cb8 <st_dword>
c00048e3:	8d 43 18             	lea    eax,[ebx+0x18]
c00048e6:	31 c9                	xor    ecx,ecx
c00048e8:	89 04 24             	mov    DWORD PTR [esp],eax
c00048eb:	ba 01 00 00 00       	mov    edx,0x1
c00048f0:	e8 c6 d3 ff ff       	call   c0001cbb <st_qword>
c00048f5:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00048f9:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00048fd:	83 c2 ff             	add    edx,0xffffffff
c0004900:	89 e8                	mov    eax,ebp
c0004902:	83 d1 ff             	adc    ecx,0xffffffff
c0004905:	e8 b1 d3 ff ff       	call   c0001cbb <st_qword>
c000490a:	31 c9                	xor    ecx,ecx
c000490c:	8d 43 28             	lea    eax,[ebx+0x28]
c000490f:	ba 22 00 00 00       	mov    edx,0x22
c0004914:	e8 a2 d3 ff ff       	call   c0001cbb <st_qword>
c0004919:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c000491d:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0004921:	83 c2 de             	add    edx,0xffffffde
c0004924:	8d 43 30             	lea    eax,[ebx+0x30]
c0004927:	83 d1 ff             	adc    ecx,0xffffffff
c000492a:	31 f6                	xor    esi,esi
c000492c:	e8 8a d3 ff ff       	call   c0001cbb <st_qword>
c0004931:	8d 43 54             	lea    eax,[ebx+0x54]
c0004934:	ba 80 00 00 00       	mov    edx,0x80
c0004939:	e8 7a d3 ff ff       	call   c0001cb8 <st_dword>
c000493e:	8d 43 50             	lea    eax,[ebx+0x50]
c0004941:	ba 80 00 00 00       	mov    edx,0x80
c0004946:	e8 6d d3 ff ff       	call   c0001cb8 <st_dword>
c000494b:	ba 02 00 00 00       	mov    edx,0x2
c0004950:	89 f8                	mov    eax,edi
c0004952:	e8 61 d3 ff ff       	call   c0001cb8 <st_dword>
c0004957:	8d 53 38             	lea    edx,[ebx+0x38]
c000495a:	b9 10 00 00 00       	mov    ecx,0x10
c000495f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0004963:	e8 ad d9 ff ff       	call   c0002315 <make_rand>
c0004968:	83 c8 ff             	or     eax,0xffffffff
c000496b:	46                   	inc    esi
c000496c:	0f b6 54 33 ff       	movzx  edx,BYTE PTR [ebx+esi*1-0x1]
c0004971:	e8 fb d8 ff ff       	call   c0002271 <crc32>
c0004976:	83 fe 5c             	cmp    esi,0x5c
c0004979:	75 f0                	jne    c000496b <create_partition+0x359>
c000497b:	f7 d0                	not    eax
c000497d:	8d 73 10             	lea    esi,[ebx+0x10]
c0004980:	89 c2                	mov    edx,eax
c0004982:	89 f0                	mov    eax,esi
c0004984:	e8 2f d3 ff ff       	call   c0001cb8 <st_dword>
c0004989:	83 ec 0c             	sub    esp,0xc
c000498c:	6a 01                	push   0x1
c000498e:	6a 00                	push   0x0
c0004990:	6a 01                	push   0x1
c0004992:	53                   	push   ebx
c0004993:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004997:	e8 71 d2 ff ff       	call   c0001c0d <disk_write>
c000499c:	83 c4 20             	add    esp,0x20
c000499f:	85 c0                	test   eax,eax
c00049a1:	0f 85 9c fc ff ff    	jne    c0004643 <create_partition+0x31>
c00049a7:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00049ab:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00049af:	83 c2 ff             	add    edx,0xffffffff
c00049b2:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00049b5:	83 d1 ff             	adc    ecx,0xffffffff
c00049b8:	e8 fe d2 ff ff       	call   c0001cbb <st_qword>
c00049bd:	ba 01 00 00 00       	mov    edx,0x1
c00049c2:	31 c9                	xor    ecx,ecx
c00049c4:	89 e8                	mov    eax,ebp
c00049c6:	e8 f0 d2 ff ff       	call   c0001cbb <st_qword>
c00049cb:	89 f8                	mov    eax,edi
c00049cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00049d1:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00049d5:	31 ff                	xor    edi,edi
c00049d7:	e8 df d2 ff ff       	call   c0001cbb <st_qword>
c00049dc:	89 f0                	mov    eax,esi
c00049de:	31 d2                	xor    edx,edx
c00049e0:	e8 d3 d2 ff ff       	call   c0001cb8 <st_dword>
c00049e5:	83 c8 ff             	or     eax,0xffffffff
c00049e8:	47                   	inc    edi
c00049e9:	0f b6 54 3b ff       	movzx  edx,BYTE PTR [ebx+edi*1-0x1]
c00049ee:	e8 7e d8 ff ff       	call   c0002271 <crc32>
c00049f3:	83 ff 5c             	cmp    edi,0x5c
c00049f6:	75 f0                	jne    c00049e8 <create_partition+0x3d6>
c00049f8:	f7 d0                	not    eax
c00049fa:	89 c2                	mov    edx,eax
c00049fc:	89 f0                	mov    eax,esi
c00049fe:	e8 b5 d2 ff ff       	call   c0001cb8 <st_dword>
c0004a03:	83 ec 0c             	sub    esp,0xc
c0004a06:	6a 01                	push   0x1
c0004a08:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0004a0c:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0004a10:	83 c0 ff             	add    eax,0xffffffff
c0004a13:	83 d2 ff             	adc    edx,0xffffffff
c0004a16:	52                   	push   edx
c0004a17:	50                   	push   eax
c0004a18:	53                   	push   ebx
c0004a19:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004a1d:	e8 eb d1 ff ff       	call   c0001c0d <disk_write>
c0004a22:	83 c4 20             	add    esp,0x20
c0004a25:	85 c0                	test   eax,eax
c0004a27:	0f 85 16 fc ff ff    	jne    c0004643 <create_partition+0x31>
c0004a2d:	31 d2                	xor    edx,edx
c0004a2f:	89 d8                	mov    eax,ebx
c0004a31:	b9 00 02 00 00       	mov    ecx,0x200
c0004a36:	e8 9b d2 ff ff       	call   c0001cd6 <mem_set>
c0004a3b:	8d 83 be 01 00 00    	lea    eax,[ebx+0x1be]
c0004a41:	b9 10 00 00 00       	mov    ecx,0x10
c0004a46:	ba 50 9c 02 c0       	mov    edx,0xc0029c50
c0004a4b:	e8 71 d2 ff ff       	call   c0001cc1 <mem_cpy>
c0004a50:	e9 21 01 00 00       	jmp    c0004b76 <create_partition+0x564>
c0004a55:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0004a59:	b9 05 00 00 00       	mov    ecx,0x5
c0004a5e:	89 04 24             	mov    DWORD PTR [esp],eax
c0004a61:	bf 08 00 00 00       	mov    edi,0x8
c0004a66:	89 f8                	mov    eax,edi
c0004a68:	31 d2                	xor    edx,edx
c0004a6a:	0f b6 f0             	movzx  esi,al
c0004a6d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a70:	f7 f6                	div    esi
c0004a72:	3d 3e fc 00 00       	cmp    eax,0xfc3e
c0004a77:	76 0a                	jbe    c0004a83 <create_partition+0x471>
c0004a79:	d1 e7                	shl    edi,1
c0004a7b:	49                   	dec    ecx
c0004a7c:	75 e8                	jne    c0004a66 <create_partition+0x454>
c0004a7e:	bf ff ff ff ff       	mov    edi,0xffffffff
c0004a83:	b9 00 02 00 00       	mov    ecx,0x200
c0004a88:	31 d2                	xor    edx,edx
c0004a8a:	89 d8                	mov    eax,ebx
c0004a8c:	8d b3 c6 01 00 00    	lea    esi,[ebx+0x1c6]
c0004a92:	e8 3f d2 ff ff       	call   c0001cd6 <mem_set>
c0004a97:	b9 64 00 00 00       	mov    ecx,0x64
c0004a9c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0004a9f:	31 d2                	xor    edx,edx
c0004aa1:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0004aa9:	f7 f1                	div    ecx
c0004aab:	b9 3f 00 00 00       	mov    ecx,0x3f
c0004ab0:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004ab4:	89 f8                	mov    eax,edi
c0004ab6:	0f b6 c0             	movzx  eax,al
c0004ab9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0004abd:	e9 80 00 00 00       	jmp    c0004b42 <create_partition+0x530>
c0004ac2:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004ac5:	29 cf                	sub    edi,ecx
c0004ac7:	89 ca                	mov    edx,ecx
c0004ac9:	89 f0                	mov    eax,esi
c0004acb:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004ad0:	e8 e3 d1 ff ff       	call   c0001cb8 <st_dword>
c0004ad5:	8d 46 04             	lea    eax,[esi+0x4]
c0004ad8:	89 fa                	mov    edx,edi
c0004ada:	83 c6 10             	add    esi,0x10
c0004add:	e8 d6 d1 ff ff       	call   c0001cb8 <st_dword>
c0004ae2:	8a 44 24 20          	mov    al,BYTE PTR [esp+0x20]
c0004ae6:	31 d2                	xor    edx,edx
c0004ae8:	88 46 ec             	mov    BYTE PTR [esi-0x14],al
c0004aeb:	ff 44 24 10          	inc    DWORD PTR [esp+0x10]
c0004aef:	89 c8                	mov    eax,ecx
c0004af1:	01 f9                	add    ecx,edi
c0004af3:	f7 f5                	div    ebp
c0004af5:	89 d5                	mov    ebp,edx
c0004af7:	31 d2                	xor    edx,edx
c0004af9:	45                   	inc    ebp
c0004afa:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004afe:	88 56 e9             	mov    BYTE PTR [esi-0x17],dl
c0004b01:	88 46 eb             	mov    BYTE PTR [esi-0x15],al
c0004b04:	89 c2                	mov    edx,eax
c0004b06:	8d 41 ff             	lea    eax,[ecx-0x1]
c0004b09:	c1 ea 02             	shr    edx,0x2
c0004b0c:	83 e2 c0             	and    edx,0xffffffc0
c0004b0f:	09 ea                	or     edx,ebp
c0004b11:	bd 3f 00 00 00       	mov    ebp,0x3f
c0004b16:	88 56 ea             	mov    BYTE PTR [esi-0x16],dl
c0004b19:	31 d2                	xor    edx,edx
c0004b1b:	f7 f5                	div    ebp
c0004b1d:	89 d7                	mov    edi,edx
c0004b1f:	31 d2                	xor    edx,edx
c0004b21:	47                   	inc    edi
c0004b22:	f7 74 24 18          	div    DWORD PTR [esp+0x18]
c0004b26:	88 56 ed             	mov    BYTE PTR [esi-0x13],dl
c0004b29:	88 46 ef             	mov    BYTE PTR [esi-0x11],al
c0004b2c:	89 c5                	mov    ebp,eax
c0004b2e:	c1 ed 02             	shr    ebp,0x2
c0004b31:	83 e5 c0             	and    ebp,0xffffffc0
c0004b34:	09 ef                	or     edi,ebp
c0004b36:	89 fa                	mov    edx,edi
c0004b38:	88 56 ee             	mov    BYTE PTR [esi-0x12],dl
c0004b3b:	83 7c 24 10 04       	cmp    DWORD PTR [esp+0x10],0x4
c0004b40:	74 34                	je     c0004b76 <create_partition+0x564>
c0004b42:	85 c9                	test   ecx,ecx
c0004b44:	74 30                	je     c0004b76 <create_partition+0x564>
c0004b46:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c0004b49:	76 2b                	jbe    c0004b76 <create_partition+0x564>
c0004b4b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0004b4f:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0004b53:	8b 3c f8             	mov    edi,DWORD PTR [eax+edi*8]
c0004b56:	83 ff 64             	cmp    edi,0x64
c0004b59:	76 4b                	jbe    c0004ba6 <create_partition+0x594>
c0004b5b:	89 f8                	mov    eax,edi
c0004b5d:	01 c8                	add    eax,ecx
c0004b5f:	0f 82 5d ff ff ff    	jb     c0004ac2 <create_partition+0x4b0>
c0004b65:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c0004b68:	0f 87 54 ff ff ff    	ja     c0004ac2 <create_partition+0x4b0>
c0004b6e:	85 ff                	test   edi,edi
c0004b70:	0f 85 51 ff ff ff    	jne    c0004ac7 <create_partition+0x4b5>
c0004b76:	8d 83 fe 01 00 00    	lea    eax,[ebx+0x1fe]
c0004b7c:	ba 55 aa 00 00       	mov    edx,0xaa55
c0004b81:	e8 2e d1 ff ff       	call   c0001cb4 <st_word>
c0004b86:	83 ec 0c             	sub    esp,0xc
c0004b89:	6a 01                	push   0x1
c0004b8b:	6a 00                	push   0x0
c0004b8d:	6a 00                	push   0x0
c0004b8f:	53                   	push   ebx
c0004b90:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0004b94:	e8 74 d0 ff ff       	call   c0001c0d <disk_write>
c0004b99:	83 c4 20             	add    esp,0x20
c0004b9c:	85 c0                	test   eax,eax
c0004b9e:	0f 95 c0             	setne  al
c0004ba1:	0f b6 c0             	movzx  eax,al
c0004ba4:	eb 0e                	jmp    c0004bb4 <create_partition+0x5a2>
c0004ba6:	74 07                	je     c0004baf <create_partition+0x59d>
c0004ba8:	0f af 7c 24 24       	imul   edi,DWORD PTR [esp+0x24]
c0004bad:	eb ac                	jmp    c0004b5b <create_partition+0x549>
c0004baf:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0004bb2:	eb a7                	jmp    c0004b5b <create_partition+0x549>
c0004bb4:	83 c4 5c             	add    esp,0x5c
c0004bb7:	5b                   	pop    ebx
c0004bb8:	5e                   	pop    esi
c0004bb9:	5f                   	pop    edi
c0004bba:	5d                   	pop    ebp
c0004bbb:	c3                   	ret    

c0004bbc <get_fileinfo>:
c0004bbc:	55                   	push   ebp
c0004bbd:	57                   	push   edi
c0004bbe:	56                   	push   esi
c0004bbf:	53                   	push   ebx
c0004bc0:	83 ec 1c             	sub    esp,0x1c
c0004bc3:	8b 30                	mov    esi,DWORD PTR [eax]
c0004bc5:	c6 42 1a 00          	mov    BYTE PTR [edx+0x1a],0x0
c0004bc9:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c0004bcd:	8b 48 34             	mov    ecx,DWORD PTR [eax+0x34]
c0004bd0:	0b 48 30             	or     ecx,DWORD PTR [eax+0x30]
c0004bd3:	0f 84 dc 01 00 00    	je     c0004db5 <get_fileinfo+0x1f9>
c0004bd9:	80 3e 04             	cmp    BYTE PTR [esi],0x4
c0004bdc:	75 0f                	jne    c0004bed <get_fileinfo+0x31>
c0004bde:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0004be1:	83 c4 1c             	add    esp,0x1c
c0004be4:	5b                   	pop    ebx
c0004be5:	5e                   	pop    esi
c0004be6:	5f                   	pop    edi
c0004be7:	5d                   	pop    ebp
c0004be8:	e9 58 d5 ff ff       	jmp    c0002145 <get_xfileinfo>
c0004bed:	89 d3                	mov    ebx,edx
c0004bef:	89 c6                	mov    esi,eax
c0004bf1:	83 78 48 ff          	cmp    DWORD PTR [eax+0x48],0xffffffff
c0004bf5:	74 6a                	je     c0004c61 <get_fileinfo+0xa5>
c0004bf7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0004bff:	31 ed                	xor    ebp,ebp
c0004c01:	31 ff                	xor    edi,edi
c0004c03:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0004c07:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0004c0b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0004c0e:	0f b7 14 08          	movzx  edx,WORD PTR [eax+ecx*1]
c0004c12:	66 85 d2             	test   dx,dx
c0004c15:	74 3e                	je     c0004c55 <get_fileinfo+0x99>
c0004c17:	66 85 ed             	test   bp,bp
c0004c1a:	75 0c                	jne    c0004c28 <get_fileinfo+0x6c>
c0004c1c:	8d 82 00 28 00 00    	lea    eax,[edx+0x2800]
c0004c22:	66 3d ff 07          	cmp    ax,0x7ff
c0004c26:	76 22                	jbe    c0004c4a <get_fileinfo+0x8e>
c0004c28:	b9 ff 00 00 00       	mov    ecx,0xff
c0004c2d:	89 e8                	mov    eax,ebp
c0004c2f:	29 f9                	sub    ecx,edi
c0004c31:	c1 e0 10             	shl    eax,0x10
c0004c34:	09 d0                	or     eax,edx
c0004c36:	8d 54 3b 1a          	lea    edx,[ebx+edi*1+0x1a]
c0004c3a:	e8 a3 d1 ff ff       	call   c0001de2 <put_utf>
c0004c3f:	84 c0                	test   al,al
c0004c41:	74 10                	je     c0004c53 <get_fileinfo+0x97>
c0004c43:	0f b6 c0             	movzx  eax,al
c0004c46:	31 d2                	xor    edx,edx
c0004c48:	01 c7                	add    edi,eax
c0004c4a:	83 44 24 0c 02       	add    DWORD PTR [esp+0xc],0x2
c0004c4f:	89 d5                	mov    ebp,edx
c0004c51:	eb b0                	jmp    c0004c03 <get_fileinfo+0x47>
c0004c53:	31 ff                	xor    edi,edi
c0004c55:	66 85 ed             	test   bp,bp
c0004c58:	74 02                	je     c0004c5c <get_fileinfo+0xa0>
c0004c5a:	31 ff                	xor    edi,edi
c0004c5c:	c6 44 3b 1a 00       	mov    BYTE PTR [ebx+edi*1+0x1a],0x0
c0004c61:	31 ff                	xor    edi,edi
c0004c63:	31 c9                	xor    ecx,ecx
c0004c65:	83 f9 0a             	cmp    ecx,0xa
c0004c68:	0f 87 ad 00 00 00    	ja     c0004d1b <get_fileinfo+0x15f>
c0004c6e:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004c71:	8d 69 01             	lea    ebp,[ecx+0x1]
c0004c74:	0f b6 14 08          	movzx  edx,BYTE PTR [eax+ecx*1]
c0004c78:	66 83 fa 20          	cmp    dx,0x20
c0004c7c:	0f 84 92 00 00 00    	je     c0004d14 <get_fileinfo+0x158>
c0004c82:	66 83 fa 05          	cmp    dx,0x5
c0004c86:	75 05                	jne    c0004c8d <get_fileinfo+0xd1>
c0004c88:	ba e5 00 00 00       	mov    edx,0xe5
c0004c8d:	83 ff 0b             	cmp    edi,0xb
c0004c90:	77 0b                	ja     c0004c9d <get_fileinfo+0xe1>
c0004c92:	83 fd 09             	cmp    ebp,0x9
c0004c95:	75 06                	jne    c0004c9d <get_fileinfo+0xe1>
c0004c97:	c6 44 3b 0d 2e       	mov    BYTE PTR [ebx+edi*1+0xd],0x2e
c0004c9c:	47                   	inc    edi
c0004c9d:	0f b7 c2             	movzx  eax,dx
c0004ca0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004ca4:	e8 6d d0 ff ff       	call   c0001d16 <dbc_1st>
c0004ca9:	85 c0                	test   eax,eax
c0004cab:	74 2f                	je     c0004cdc <get_fileinfo+0x120>
c0004cad:	83 fd 08             	cmp    ebp,0x8
c0004cb0:	74 2a                	je     c0004cdc <get_fileinfo+0x120>
c0004cb2:	83 fd 0b             	cmp    ebp,0xb
c0004cb5:	74 25                	je     c0004cdc <get_fileinfo+0x120>
c0004cb7:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004cba:	0f b6 04 28          	movzx  eax,BYTE PTR [eax+ebp*1]
c0004cbe:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0004cc2:	e8 52 d0 ff ff       	call   c0001d19 <dbc_2nd>
c0004cc7:	85 c0                	test   eax,eax
c0004cc9:	74 11                	je     c0004cdc <get_fileinfo+0x120>
c0004ccb:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0004ccf:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0004cd4:	c1 e2 08             	shl    edx,0x8
c0004cd7:	8d 69 02             	lea    ebp,[ecx+0x2]
c0004cda:	09 c2                	or     edx,eax
c0004cdc:	0f b7 d2             	movzx  edx,dx
c0004cdf:	50                   	push   eax
c0004ce0:	50                   	push   eax
c0004ce1:	68 b5 01 00 00       	push   0x1b5
c0004ce6:	52                   	push   edx
c0004ce7:	e8 46 38 00 00       	call   c0008532 <ff_oem2uni>
c0004cec:	83 c4 10             	add    esp,0x10
c0004cef:	66 85 c0             	test   ax,ax
c0004cf2:	75 04                	jne    c0004cf8 <get_fileinfo+0x13c>
c0004cf4:	31 ff                	xor    edi,edi
c0004cf6:	eb 23                	jmp    c0004d1b <get_fileinfo+0x15f>
c0004cf8:	b9 0c 00 00 00       	mov    ecx,0xc
c0004cfd:	8d 54 3b 0d          	lea    edx,[ebx+edi*1+0xd]
c0004d01:	29 f9                	sub    ecx,edi
c0004d03:	0f b7 c0             	movzx  eax,ax
c0004d06:	e8 d7 d0 ff ff       	call   c0001de2 <put_utf>
c0004d0b:	84 c0                	test   al,al
c0004d0d:	74 e5                	je     c0004cf4 <get_fileinfo+0x138>
c0004d0f:	0f b6 c0             	movzx  eax,al
c0004d12:	01 c7                	add    edi,eax
c0004d14:	89 e9                	mov    ecx,ebp
c0004d16:	e9 4a ff ff ff       	jmp    c0004c65 <get_fileinfo+0xa9>
c0004d1b:	c6 44 3b 0d 00       	mov    BYTE PTR [ebx+edi*1+0xd],0x0
c0004d20:	80 7b 1a 00          	cmp    BYTE PTR [ebx+0x1a],0x0
c0004d24:	75 54                	jne    c0004d7a <get_fileinfo+0x1be>
c0004d26:	85 ff                	test   edi,edi
c0004d28:	75 0b                	jne    c0004d35 <get_fileinfo+0x179>
c0004d2a:	c6 43 1a 3f          	mov    BYTE PTR [ebx+0x1a],0x3f
c0004d2e:	ba 01 00 00 00       	mov    edx,0x1
c0004d33:	eb 33                	jmp    c0004d68 <get_fileinfo+0x1ac>
c0004d35:	b1 08                	mov    cl,0x8
c0004d37:	31 d2                	xor    edx,edx
c0004d39:	66 0f be 44 13 0d    	movsx  ax,BYTE PTR [ebx+edx*1+0xd]
c0004d3f:	84 c0                	test   al,al
c0004d41:	74 25                	je     c0004d68 <get_fileinfo+0x1ac>
c0004d43:	66 83 f8 2e          	cmp    ax,0x2e
c0004d47:	74 16                	je     c0004d5f <get_fileinfo+0x1a3>
c0004d49:	8d 78 bf             	lea    edi,[eax-0x41]
c0004d4c:	66 83 ff 19          	cmp    di,0x19
c0004d50:	77 0f                	ja     c0004d61 <get_fileinfo+0x1a5>
c0004d52:	8b 7e 38             	mov    edi,DWORD PTR [esi+0x38]
c0004d55:	84 4f 0c             	test   BYTE PTR [edi+0xc],cl
c0004d58:	74 07                	je     c0004d61 <get_fileinfo+0x1a5>
c0004d5a:	83 c0 20             	add    eax,0x20
c0004d5d:	eb 02                	jmp    c0004d61 <get_fileinfo+0x1a5>
c0004d5f:	b1 10                	mov    cl,0x10
c0004d61:	88 44 13 1a          	mov    BYTE PTR [ebx+edx*1+0x1a],al
c0004d65:	42                   	inc    edx
c0004d66:	eb d1                	jmp    c0004d39 <get_fileinfo+0x17d>
c0004d68:	c6 44 13 1a 00       	mov    BYTE PTR [ebx+edx*1+0x1a],0x0
c0004d6d:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d70:	80 78 0c 00          	cmp    BYTE PTR [eax+0xc],0x0
c0004d74:	75 04                	jne    c0004d7a <get_fileinfo+0x1be>
c0004d76:	c6 43 0d 00          	mov    BYTE PTR [ebx+0xd],0x0
c0004d7a:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d7d:	8a 40 0b             	mov    al,BYTE PTR [eax+0xb]
c0004d80:	88 43 0c             	mov    BYTE PTR [ebx+0xc],al
c0004d83:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d86:	83 c0 1c             	add    eax,0x1c
c0004d89:	e8 c1 ce ff ff       	call   c0001c4f <ld_dword>
c0004d8e:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0004d95:	89 03                	mov    DWORD PTR [ebx],eax
c0004d97:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004d9a:	83 c0 16             	add    eax,0x16
c0004d9d:	e8 a0 ce ff ff       	call   c0001c42 <ld_word>
c0004da2:	66 89 43 0a          	mov    WORD PTR [ebx+0xa],ax
c0004da6:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c0004da9:	83 c0 18             	add    eax,0x18
c0004dac:	e8 91 ce ff ff       	call   c0001c42 <ld_word>
c0004db1:	66 89 43 08          	mov    WORD PTR [ebx+0x8],ax
c0004db5:	83 c4 1c             	add    esp,0x1c
c0004db8:	5b                   	pop    ebx
c0004db9:	5e                   	pop    esi
c0004dba:	5f                   	pop    edi
c0004dbb:	5d                   	pop    ebp
c0004dbc:	c3                   	ret    

c0004dbd <ld_clust.isra.0>:
c0004dbd:	56                   	push   esi
c0004dbe:	89 c6                	mov    esi,eax
c0004dc0:	53                   	push   ebx
c0004dc1:	8d 42 1a             	lea    eax,[edx+0x1a]
c0004dc4:	89 d3                	mov    ebx,edx
c0004dc6:	e8 77 ce ff ff       	call   c0001c42 <ld_word>
c0004dcb:	0f b7 c8             	movzx  ecx,ax
c0004dce:	89 f0                	mov    eax,esi
c0004dd0:	3c 03                	cmp    al,0x3
c0004dd2:	75 0d                	jne    c0004de1 <ld_clust.isra.0+0x24>
c0004dd4:	8d 43 14             	lea    eax,[ebx+0x14]
c0004dd7:	e8 66 ce ff ff       	call   c0001c42 <ld_word>
c0004ddc:	c1 e0 10             	shl    eax,0x10
c0004ddf:	09 c1                	or     ecx,eax
c0004de1:	89 c8                	mov    eax,ecx
c0004de3:	5b                   	pop    ebx
c0004de4:	5e                   	pop    esi
c0004de5:	c3                   	ret    

c0004de6 <st_clust.isra.1>:
c0004de6:	56                   	push   esi
c0004de7:	89 c6                	mov    esi,eax
c0004de9:	53                   	push   ebx
c0004dea:	89 d3                	mov    ebx,edx
c0004dec:	0f b7 d1             	movzx  edx,cx
c0004def:	8d 43 1a             	lea    eax,[ebx+0x1a]
c0004df2:	e8 bd ce ff ff       	call   c0001cb4 <st_word>
c0004df7:	80 3e 03             	cmp    BYTE PTR [esi],0x3
c0004dfa:	75 0f                	jne    c0004e0b <st_clust.isra.1+0x25>
c0004dfc:	c1 e9 10             	shr    ecx,0x10
c0004dff:	8d 43 14             	lea    eax,[ebx+0x14]
c0004e02:	89 ca                	mov    edx,ecx
c0004e04:	5b                   	pop    ebx
c0004e05:	5e                   	pop    esi
c0004e06:	e9 a9 ce ff ff       	jmp    c0001cb4 <st_word>
c0004e0b:	5b                   	pop    ebx
c0004e0c:	5e                   	pop    esi
c0004e0d:	c3                   	ret    

c0004e0e <init_alloc_info.isra.2>:
c0004e0e:	56                   	push   esi
c0004e0f:	53                   	push   ebx
c0004e10:	89 c6                	mov    esi,eax
c0004e12:	89 d3                	mov    ebx,edx
c0004e14:	51                   	push   ecx
c0004e15:	8b 00                	mov    eax,DWORD PTR [eax]
c0004e17:	83 c0 34             	add    eax,0x34
c0004e1a:	e8 30 ce ff ff       	call   c0001c4f <ld_dword>
c0004e1f:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004e22:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e24:	83 c0 38             	add    eax,0x38
c0004e27:	e8 3b ce ff ff       	call   c0001c67 <ld_qword>
c0004e2c:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0004e2f:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0004e32:	8b 06                	mov    eax,DWORD PTR [esi]
c0004e34:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0004e37:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e3e:	83 e0 02             	and    eax,0x2
c0004e41:	88 43 07             	mov    BYTE PTR [ebx+0x7],al
c0004e44:	5b                   	pop    ebx
c0004e45:	5b                   	pop    ebx
c0004e46:	5e                   	pop    esi
c0004e47:	c3                   	ret    

c0004e48 <follow_path>:
c0004e48:	56                   	push   esi
c0004e49:	53                   	push   ebx
c0004e4a:	89 c3                	mov    ebx,eax
c0004e4c:	83 ec 14             	sub    esp,0x14
c0004e4f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0004e53:	8b 30                	mov    esi,DWORD PTR [eax]
c0004e55:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0004e59:	8a 10                	mov    dl,BYTE PTR [eax]
c0004e5b:	80 fa 5c             	cmp    dl,0x5c
c0004e5e:	75 07                	jne    c0004e67 <follow_path+0x1f>
c0004e60:	40                   	inc    eax
c0004e61:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004e65:	eb ee                	jmp    c0004e55 <follow_path+0xd>
c0004e67:	80 fa 2f             	cmp    dl,0x2f
c0004e6a:	74 f4                	je     c0004e60 <follow_path+0x18>
c0004e6c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0004e73:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0004e7a:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0004e7d:	77 52                	ja     c0004ed1 <follow_path+0x89>
c0004e7f:	c6 43 47 80          	mov    BYTE PTR [ebx+0x47],0x80
c0004e83:	31 d2                	xor    edx,edx
c0004e85:	89 d8                	mov    eax,ebx
c0004e87:	e8 12 e3 ff ff       	call   c000319e <dir_sdi>
c0004e8c:	eb 7c                	jmp    c0004f0a <follow_path+0xc2>
c0004e8e:	89 d8                	mov    eax,ebx
c0004e90:	e8 6e f2 ff ff       	call   c0004103 <dir_find>
c0004e95:	8a 53 47             	mov    dl,BYTE PTR [ebx+0x47]
c0004e98:	85 c0                	test   eax,eax
c0004e9a:	75 46                	jne    c0004ee2 <follow_path+0x9a>
c0004e9c:	80 e2 04             	and    dl,0x4
c0004e9f:	75 69                	jne    c0004f0a <follow_path+0xc2>
c0004ea1:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c0004ea5:	74 5e                	je     c0004f05 <follow_path+0xbd>
c0004ea7:	8a 06                	mov    al,BYTE PTR [esi]
c0004ea9:	3c 04                	cmp    al,0x4
c0004eab:	75 41                	jne    c0004eee <follow_path+0xa6>
c0004ead:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0004eb0:	0f b6 53 07          	movzx  edx,BYTE PTR [ebx+0x7]
c0004eb4:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c0004eb7:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0004eba:	30 c0                	xor    al,al
c0004ebc:	09 d0                	or     eax,edx
c0004ebe:	89 da                	mov    edx,ebx
c0004ec0:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0004ec3:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c0004ec6:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0004ec9:	8d 46 10             	lea    eax,[esi+0x10]
c0004ecc:	e8 3d ff ff ff       	call   c0004e0e <init_alloc_info.isra.2>
c0004ed1:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0004ed5:	89 d8                	mov    eax,ebx
c0004ed7:	e8 a9 ed ff ff       	call   c0003c85 <create_name>
c0004edc:	85 c0                	test   eax,eax
c0004ede:	74 ae                	je     c0004e8e <follow_path+0x46>
c0004ee0:	eb 28                	jmp    c0004f0a <follow_path+0xc2>
c0004ee2:	83 f8 04             	cmp    eax,0x4
c0004ee5:	75 23                	jne    c0004f0a <follow_path+0xc2>
c0004ee7:	80 e2 04             	and    dl,0x4
c0004eea:	74 19                	je     c0004f05 <follow_path+0xbd>
c0004eec:	eb 1c                	jmp    c0004f0a <follow_path+0xc2>
c0004eee:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c0004ef1:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0004ef7:	8d 54 16 54          	lea    edx,[esi+edx*1+0x54]
c0004efb:	e8 bd fe ff ff       	call   c0004dbd <ld_clust.isra.0>
c0004f00:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0004f03:	eb cc                	jmp    c0004ed1 <follow_path+0x89>
c0004f05:	b8 05 00 00 00       	mov    eax,0x5
c0004f0a:	83 c4 14             	add    esp,0x14
c0004f0d:	5b                   	pop    ebx
c0004f0e:	5e                   	pop    esi
c0004f0f:	c3                   	ret    

c0004f10 <f_mount>:
c0004f10:	53                   	push   ebx
c0004f11:	83 ec 18             	sub    esp,0x18
c0004f14:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0004f18:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0004f1c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0004f20:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0004f24:	e8 fb d2 ff ff       	call   c0002224 <get_ldnumber>
c0004f29:	89 c2                	mov    edx,eax
c0004f2b:	b8 0b 00 00 00       	mov    eax,0xb
c0004f30:	85 d2                	test   edx,edx
c0004f32:	78 39                	js     c0004f6d <f_mount+0x5d>
c0004f34:	8b 04 95 e0 ed 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd1220]
c0004f3b:	85 c0                	test   eax,eax
c0004f3d:	74 03                	je     c0004f42 <f_mount+0x32>
c0004f3f:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f42:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f46:	85 c0                	test   eax,eax
c0004f48:	74 03                	je     c0004f4d <f_mount+0x3d>
c0004f4a:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0004f4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004f51:	89 04 95 e0 ed 02 c0 	mov    DWORD PTR [edx*4-0x3ffd1220],eax
c0004f58:	31 c0                	xor    eax,eax
c0004f5a:	84 db                	test   bl,bl
c0004f5c:	74 0f                	je     c0004f6d <f_mount+0x5d>
c0004f5e:	31 c9                	xor    ecx,ecx
c0004f60:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f64:	8d 44 24 24          	lea    eax,[esp+0x24]
c0004f68:	e8 65 d7 ff ff       	call   c00026d2 <mount_volume>
c0004f6d:	83 c4 18             	add    esp,0x18
c0004f70:	5b                   	pop    ebx
c0004f71:	c3                   	ret    

c0004f72 <f_open>:
c0004f72:	55                   	push   ebp
c0004f73:	bd 09 00 00 00       	mov    ebp,0x9
c0004f78:	57                   	push   edi
c0004f79:	56                   	push   esi
c0004f7a:	53                   	push   ebx
c0004f7b:	83 ec 7c             	sub    esp,0x7c
c0004f7e:	8b 9c 24 90 00 00 00 	mov    ebx,DWORD PTR [esp+0x90]
c0004f85:	8b bc 24 98 00 00 00 	mov    edi,DWORD PTR [esp+0x98]
c0004f8c:	85 db                	test   ebx,ebx
c0004f8e:	0f 84 10 04 00 00    	je     c00053a4 <f_open+0x432>
c0004f94:	89 fe                	mov    esi,edi
c0004f96:	8d 54 24 20          	lea    edx,[esp+0x20]
c0004f9a:	83 e6 3f             	and    esi,0x3f
c0004f9d:	89 f0                	mov    eax,esi
c0004f9f:	0f b6 c8             	movzx  ecx,al
c0004fa2:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c0004fa9:	e8 24 d7 ff ff       	call   c00026d2 <mount_volume>
c0004fae:	89 c5                	mov    ebp,eax
c0004fb0:	85 c0                	test   eax,eax
c0004fb2:	0f 85 e6 03 00 00    	jne    c000539e <f_open+0x42c>
c0004fb8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fbc:	bd 11 00 00 00       	mov    ebp,0x11
c0004fc1:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fc5:	83 ec 0c             	sub    esp,0xc
c0004fc8:	68 60 04 00 00       	push   0x460
c0004fcd:	e8 a3 34 00 00       	call   c0008475 <ff_memalloc>
c0004fd2:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0004fd6:	83 c4 10             	add    esp,0x10
c0004fd9:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0004fde:	0f 84 c0 03 00 00    	je     c00053a4 <f_open+0x432>
c0004fe4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0004fe8:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0004fec:	8d 91 00 02 00 00    	lea    edx,[ecx+0x200]
c0004ff2:	89 48 0c             	mov    DWORD PTR [eax+0xc],ecx
c0004ff5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0004ff8:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0004fff:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005003:	e8 40 fe ff ff       	call   c0004e48 <follow_path>
c0005008:	89 c5                	mov    ebp,eax
c000500a:	85 c0                	test   eax,eax
c000500c:	75 0c                	jne    c000501a <f_open+0xa8>
c000500e:	80 7c 24 6b 00       	cmp    BYTE PTR [esp+0x6b],0x0
c0005013:	79 05                	jns    c000501a <f_open+0xa8>
c0005015:	bd 06 00 00 00       	mov    ebp,0x6
c000501a:	f7 c7 1c 00 00 00    	test   edi,0x1c
c0005020:	0f 84 84 01 00 00    	je     c00051aa <f_open+0x238>
c0005026:	85 ed                	test   ebp,ebp
c0005028:	74 20                	je     c000504a <f_open+0xd8>
c000502a:	83 fd 04             	cmp    ebp,0x4
c000502d:	0f 85 58 03 00 00    	jne    c000538b <f_open+0x419>
c0005033:	8d 44 24 24          	lea    eax,[esp+0x24]
c0005037:	83 ce 08             	or     esi,0x8
c000503a:	e8 8a f2 ff ff       	call   c00042c9 <dir_register>
c000503f:	89 c5                	mov    ebp,eax
c0005041:	85 c0                	test   eax,eax
c0005043:	74 2f                	je     c0005074 <f_open+0x102>
c0005045:	e9 41 03 00 00       	jmp    c000538b <f_open+0x419>
c000504a:	bd 07 00 00 00       	mov    ebp,0x7
c000504f:	f6 44 24 2a 11       	test   BYTE PTR [esp+0x2a],0x11
c0005054:	0f 85 31 03 00 00    	jne    c000538b <f_open+0x419>
c000505a:	bd 08 00 00 00       	mov    ebp,0x8
c000505f:	f7 c7 04 00 00 00    	test   edi,0x4
c0005065:	0f 85 20 03 00 00    	jne    c000538b <f_open+0x419>
c000506b:	83 e7 08             	and    edi,0x8
c000506e:	0f 84 65 01 00 00    	je     c00051d9 <f_open+0x267>
c0005074:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0005078:	8a 02                	mov    al,BYTE PTR [edx]
c000507a:	3c 04                	cmp    al,0x4
c000507c:	0f 85 97 00 00 00    	jne    c0005119 <f_open+0x1a7>
c0005082:	8d 42 10             	lea    eax,[edx+0x10]
c0005085:	89 13                	mov    DWORD PTR [ebx],edx
c0005087:	89 da                	mov    edx,ebx
c0005089:	e8 80 fd ff ff       	call   c0004e0e <init_alloc_info.isra.2>
c000508e:	31 d2                	xor    edx,edx
c0005090:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005094:	b9 1e 00 00 00       	mov    ecx,0x1e
c0005099:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c000509c:	83 c0 02             	add    eax,0x2
c000509f:	e8 32 cc ff ff       	call   c0001cd6 <mem_set>
c00050a4:	b9 1a 00 00 00       	mov    ecx,0x1a
c00050a9:	31 d2                	xor    edx,edx
c00050ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050af:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050b2:	83 c0 26             	add    eax,0x26
c00050b5:	e8 1c cc ff ff       	call   c0001cd6 <mem_set>
c00050ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050be:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00050c1:	c6 42 04 20          	mov    BYTE PTR [edx+0x4],0x20
c00050c5:	ba 00 00 21 50       	mov    edx,0x50210000
c00050ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050cd:	83 c0 08             	add    eax,0x8
c00050d0:	e8 e3 cb ff ff       	call   c0001cb8 <st_dword>
c00050d5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00050d9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00050dc:	c6 40 21 01          	mov    BYTE PTR [eax+0x21],0x1
c00050e0:	8d 44 24 24          	lea    eax,[esp+0x24]
c00050e4:	e8 b7 ea ff ff       	call   c0003ba0 <store_xdir>
c00050e9:	89 c5                	mov    ebp,eax
c00050eb:	85 c0                	test   eax,eax
c00050ed:	0f 85 98 02 00 00    	jne    c000538b <f_open+0x419>
c00050f3:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00050f6:	85 d2                	test   edx,edx
c00050f8:	0f 84 db 00 00 00    	je     c00051d9 <f_open+0x267>
c00050fe:	31 c9                	xor    ecx,ecx
c0005100:	89 d8                	mov    eax,ebx
c0005102:	e8 8e e3 ff ff       	call   c0003495 <remove_chain>
c0005107:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000510b:	89 c5                	mov    ebp,eax
c000510d:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005110:	48                   	dec    eax
c0005111:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0005114:	e9 b8 00 00 00       	jmp    c00051d1 <f_open+0x25f>
c0005119:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c000511d:	89 ea                	mov    edx,ebp
c000511f:	e8 99 fc ff ff       	call   c0004dbd <ld_clust.isra.0>
c0005124:	ba 00 00 21 50       	mov    edx,0x50210000
c0005129:	89 c7                	mov    edi,eax
c000512b:	8d 45 0e             	lea    eax,[ebp+0xe]
c000512e:	e8 85 cb ff ff       	call   c0001cb8 <st_dword>
c0005133:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0005137:	31 c9                	xor    ecx,ecx
c0005139:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
c000513d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005141:	8b 54 24 5c          	mov    edx,DWORD PTR [esp+0x5c]
c0005145:	e8 9c fc ff ff       	call   c0004de6 <st_clust.isra.1>
c000514a:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c000514e:	31 d2                	xor    edx,edx
c0005150:	83 c0 1c             	add    eax,0x1c
c0005153:	e8 60 cb ff ff       	call   c0001cb8 <st_dword>
c0005158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000515c:	85 ff                	test   edi,edi
c000515e:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005162:	74 75                	je     c00051d9 <f_open+0x267>
c0005164:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005168:	31 c9                	xor    ecx,ecx
c000516a:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
c000516d:	8b 40 4c             	mov    eax,DWORD PTR [eax+0x4c]
c0005170:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005174:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005178:	89 fa                	mov    edx,edi
c000517a:	8d 44 24 24          	lea    eax,[esp+0x24]
c000517e:	e8 12 e3 ff ff       	call   c0003495 <remove_chain>
c0005183:	89 c5                	mov    ebp,eax
c0005185:	85 c0                	test   eax,eax
c0005187:	0f 85 fe 01 00 00    	jne    c000538b <f_open+0x419>
c000518d:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0005191:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0005195:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0005199:	4f                   	dec    edi
c000519a:	e8 81 d2 ff ff       	call   c0002420 <move_window>
c000519f:	89 c5                	mov    ebp,eax
c00051a1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00051a5:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c00051a8:	eb 27                	jmp    c00051d1 <f_open+0x25f>
c00051aa:	85 ed                	test   ebp,ebp
c00051ac:	0f 85 d9 01 00 00    	jne    c000538b <f_open+0x419>
c00051b2:	8a 44 24 2a          	mov    al,BYTE PTR [esp+0x2a]
c00051b6:	bd 04 00 00 00       	mov    ebp,0x4
c00051bb:	a8 10                	test   al,0x10
c00051bd:	0f 85 c8 01 00 00    	jne    c000538b <f_open+0x419>
c00051c3:	83 e7 02             	and    edi,0x2
c00051c6:	74 11                	je     c00051d9 <f_open+0x267>
c00051c8:	bd 07 00 00 00       	mov    ebp,0x7
c00051cd:	a8 01                	test   al,0x1
c00051cf:	eb 02                	jmp    c00051d3 <f_open+0x261>
c00051d1:	85 ed                	test   ebp,ebp
c00051d3:	0f 85 b2 01 00 00    	jne    c000538b <f_open+0x419>
c00051d9:	f7 c6 08 00 00 00    	test   esi,0x8
c00051df:	74 03                	je     c00051e4 <f_open+0x272>
c00051e1:	83 ce 40             	or     esi,0x40
c00051e4:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00051e8:	8b 7a 4c             	mov    edi,DWORD PTR [edx+0x4c]
c00051eb:	8b 6a 50             	mov    ebp,DWORD PTR [edx+0x50]
c00051ee:	89 7b 40             	mov    DWORD PTR [ebx+0x40],edi
c00051f1:	89 6b 44             	mov    DWORD PTR [ebx+0x44],ebp
c00051f4:	8b 7c 24 5c          	mov    edi,DWORD PTR [esp+0x5c]
c00051f8:	89 7b 48             	mov    DWORD PTR [ebx+0x48],edi
c00051fb:	8a 02                	mov    al,BYTE PTR [edx]
c00051fd:	3c 04                	cmp    al,0x4
c00051ff:	75 2a                	jne    c000522b <f_open+0x2b9>
c0005201:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005205:	0f b6 4c 24 2b       	movzx  ecx,BYTE PTR [esp+0x2b]
c000520a:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000520d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0005211:	30 c0                	xor    al,al
c0005213:	09 c8                	or     eax,ecx
c0005215:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c0005218:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c000521c:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c000521f:	8d 42 10             	lea    eax,[edx+0x10]
c0005222:	89 da                	mov    edx,ebx
c0005224:	e8 e5 fb ff ff       	call   c0004e0e <init_alloc_info.isra.2>
c0005229:	eb 1c                	jmp    c0005247 <f_open+0x2d5>
c000522b:	89 fa                	mov    edx,edi
c000522d:	e8 8b fb ff ff       	call   c0004dbd <ld_clust.isra.0>
c0005232:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005235:	8d 47 1c             	lea    eax,[edi+0x1c]
c0005238:	e8 12 ca ff ff       	call   c0001c4f <ld_dword>
c000523d:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0005244:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005247:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000524b:	c7 43 4c 00 00 00 00 	mov    DWORD PTR [ebx+0x4c],0x0
c0005252:	89 03                	mov    DWORD PTR [ebx],eax
c0005254:	31 d2                	xor    edx,edx
c0005256:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c000525a:	b9 00 02 00 00       	mov    ecx,0x200
c000525f:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0005263:	c6 43 29 00          	mov    BYTE PTR [ebx+0x29],0x0
c0005267:	89 f0                	mov    eax,esi
c0005269:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0005270:	88 43 28             	mov    BYTE PTR [ebx+0x28],al
c0005273:	c7 43 3c 00 00 00 00 	mov    DWORD PTR [ebx+0x3c],0x0
c000527a:	8d 43 50             	lea    eax,[ebx+0x50]
c000527d:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005284:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c000528b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000528f:	e8 42 ca ff ff       	call   c0001cd6 <mem_set>
c0005294:	83 e6 20             	and    esi,0x20
c0005297:	75 07                	jne    c00052a0 <f_open+0x32e>
c0005299:	31 ed                	xor    ebp,ebp
c000529b:	e9 eb 00 00 00       	jmp    c000538b <f_open+0x419>
c00052a0:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00052a3:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00052a6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00052aa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00052ae:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00052b2:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c00052b6:	74 e1                	je     c0005299 <f_open+0x327>
c00052b8:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00052bc:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00052c0:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c00052c3:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c00052c6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00052ca:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00052cd:	0f b7 68 0a          	movzx  ebp,WORD PTR [eax+0xa]
c00052d1:	31 ff                	xor    edi,edi
c00052d3:	c1 e5 09             	shl    ebp,0x9
c00052d6:	89 ee                	mov    esi,ebp
c00052d8:	3b 6c 24 08          	cmp    ebp,DWORD PTR [esp+0x8]
c00052dc:	89 f8                	mov    eax,edi
c00052de:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c00052e2:	73 22                	jae    c0005306 <f_open+0x394>
c00052e4:	89 d8                	mov    eax,ebx
c00052e6:	e8 bd dc ff ff       	call   c0002fa8 <get_fat>
c00052eb:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c00052ef:	89 c2                	mov    edx,eax
c00052f1:	19 7c 24 0c          	sbb    DWORD PTR [esp+0xc],edi
c00052f5:	83 f8 01             	cmp    eax,0x1
c00052f8:	76 10                	jbe    c000530a <f_open+0x398>
c00052fa:	83 f8 ff             	cmp    eax,0xffffffff
c00052fd:	75 d9                	jne    c00052d8 <f_open+0x366>
c00052ff:	bd 01 00 00 00       	mov    ebp,0x1
c0005304:	eb 09                	jmp    c000530f <f_open+0x39d>
c0005306:	31 ed                	xor    ebp,ebp
c0005308:	eb 05                	jmp    c000530f <f_open+0x39d>
c000530a:	bd 02 00 00 00       	mov    ebp,0x2
c000530f:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0005312:	85 ed                	test   ebp,ebp
c0005314:	75 75                	jne    c000538b <f_open+0x419>
c0005316:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000531a:	25 ff 01 00 00       	and    eax,0x1ff
c000531f:	0f 84 74 ff ff ff    	je     c0005299 <f_open+0x327>
c0005325:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0005329:	bd 02 00 00 00       	mov    ebp,0x2
c000532e:	89 c8                	mov    eax,ecx
c0005330:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0005334:	e8 a2 cb ff ff       	call   c0001edb <clst2sect>
c0005339:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000533d:	89 d7                	mov    edi,edx
c000533f:	09 c7                	or     edi,eax
c0005341:	74 48                	je     c000538b <f_open+0x419>
c0005343:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005347:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c000534b:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0005353:	0f ac fe 09          	shrd   esi,edi,0x9
c0005357:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c000535b:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c000535f:	89 43 38             	mov    DWORD PTR [ebx+0x38],eax
c0005362:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0005366:	83 ec 0c             	sub    esp,0xc
c0005369:	89 53 3c             	mov    DWORD PTR [ebx+0x3c],edx
c000536c:	6a 01                	push   0x1
c000536e:	52                   	push   edx
c000536f:	50                   	push   eax
c0005370:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0005374:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005378:	50                   	push   eax
c0005379:	e8 79 c8 ff ff       	call   c0001bf7 <disk_read>
c000537e:	83 c4 20             	add    esp,0x20
c0005381:	85 c0                	test   eax,eax
c0005383:	0f 95 c0             	setne  al
c0005386:	0f b6 c0             	movzx  eax,al
c0005389:	89 c5                	mov    ebp,eax
c000538b:	83 ec 0c             	sub    esp,0xc
c000538e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0005392:	e8 f4 30 00 00       	call   c000848b <ff_memfree>
c0005397:	83 c4 10             	add    esp,0x10
c000539a:	85 ed                	test   ebp,ebp
c000539c:	74 06                	je     c00053a4 <f_open+0x432>
c000539e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00053a4:	83 c4 7c             	add    esp,0x7c
c00053a7:	89 e8                	mov    eax,ebp
c00053a9:	5b                   	pop    ebx
c00053aa:	5e                   	pop    esi
c00053ab:	5f                   	pop    edi
c00053ac:	5d                   	pop    ebp
c00053ad:	c3                   	ret    

c00053ae <f_read>:
c00053ae:	55                   	push   ebp
c00053af:	57                   	push   edi
c00053b0:	56                   	push   esi
c00053b1:	53                   	push   ebx
c00053b2:	83 ec 2c             	sub    esp,0x2c
c00053b5:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00053b9:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00053bd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00053c3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00053c7:	89 d8                	mov    eax,ebx
c00053c9:	e8 77 cf ff ff       	call   c0002345 <validate>
c00053ce:	89 c5                	mov    ebp,eax
c00053d0:	85 c0                	test   eax,eax
c00053d2:	0f 85 4c 02 00 00    	jne    c0005624 <f_read+0x276>
c00053d8:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00053dc:	85 ed                	test   ebp,ebp
c00053de:	0f 85 40 02 00 00    	jne    c0005624 <f_read+0x276>
c00053e4:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00053e8:	0f 84 31 02 00 00    	je     c000561f <f_read+0x271>
c00053ee:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00053f1:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00053f4:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00053f7:	bf 00 00 00 00       	mov    edi,0x0
c00053fc:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00053ff:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c0005403:	89 d1                	mov    ecx,edx
c0005405:	19 f9                	sbb    ecx,edi
c0005407:	0f 83 cf 00 00 00    	jae    c00054dc <f_read+0x12e>
c000540d:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005411:	e9 c6 00 00 00       	jmp    c00054dc <f_read+0x12e>
c0005416:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005419:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000541c:	89 d0                	mov    eax,edx
c000541e:	25 ff 01 00 00       	and    eax,0x1ff
c0005423:	0f 85 c9 01 00 00    	jne    c00055f2 <f_read+0x244>
c0005429:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000542d:	89 d6                	mov    esi,edx
c000542f:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c0005433:	89 cf                	mov    edi,ecx
c0005435:	48                   	dec    eax
c0005436:	0f ac fe 09          	shrd   esi,edi,0x9
c000543a:	21 f0                	and    eax,esi
c000543c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005440:	0f 84 a6 00 00 00    	je     c00054ec <f_read+0x13e>
c0005446:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000544a:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000544d:	89 c8                	mov    eax,ecx
c000544f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0005452:	e8 84 ca ff ff       	call   c0001edb <clst2sect>
c0005457:	89 d7                	mov    edi,edx
c0005459:	09 c7                	or     edi,eax
c000545b:	0f 84 b4 00 00 00    	je     c0005515 <f_read+0x167>
c0005461:	31 ff                	xor    edi,edi
c0005463:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0005467:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000546a:	01 c6                	add    esi,eax
c000546c:	11 d7                	adc    edi,edx
c000546e:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005476:	0f 86 fd 00 00 00    	jbe    c0005579 <f_read+0x1cb>
c000547c:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005480:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005484:	c1 e8 09             	shr    eax,0x9
c0005487:	89 04 24             	mov    DWORD PTR [esp],eax
c000548a:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000548e:	03 14 24             	add    edx,DWORD PTR [esp]
c0005491:	39 c2                	cmp    edx,eax
c0005493:	76 07                	jbe    c000549c <f_read+0xee>
c0005495:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005499:	89 04 24             	mov    DWORD PTR [esp],eax
c000549c:	83 ec 0c             	sub    esp,0xc
c000549f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00054a3:	57                   	push   edi
c00054a4:	56                   	push   esi
c00054a5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00054a9:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00054ad:	50                   	push   eax
c00054ae:	e8 44 c7 ff ff       	call   c0001bf7 <disk_read>
c00054b3:	83 c4 20             	add    esp,0x20
c00054b6:	85 c0                	test   eax,eax
c00054b8:	75 6e                	jne    c0005528 <f_read+0x17a>
c00054ba:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00054be:	78 7e                	js     c000553e <f_read+0x190>
c00054c0:	8b 34 24             	mov    esi,DWORD PTR [esp]
c00054c3:	c1 e6 09             	shl    esi,0x9
c00054c6:	31 ff                	xor    edi,edi
c00054c8:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c00054cc:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c00054d0:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c00054d4:	01 30                	add    DWORD PTR [eax],esi
c00054d6:	01 73 2c             	add    DWORD PTR [ebx+0x2c],esi
c00054d9:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c00054dc:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00054e1:	0f 85 2f ff ff ff    	jne    c0005416 <f_read+0x68>
c00054e7:	e9 38 01 00 00       	jmp    c0005624 <f_read+0x276>
c00054ec:	89 c8                	mov    eax,ecx
c00054ee:	09 d0                	or     eax,edx
c00054f0:	75 05                	jne    c00054f7 <f_read+0x149>
c00054f2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00054f5:	eb 19                	jmp    c0005510 <f_read+0x162>
c00054f7:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00054fb:	74 09                	je     c0005506 <f_read+0x158>
c00054fd:	89 d8                	mov    eax,ebx
c00054ff:	e8 f8 c9 ff ff       	call   c0001efc <clmt_clust>
c0005504:	eb 0a                	jmp    c0005510 <f_read+0x162>
c0005506:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005509:	89 d8                	mov    eax,ebx
c000550b:	e8 98 da ff ff       	call   c0002fa8 <get_fat>
c0005510:	83 f8 01             	cmp    eax,0x1
c0005513:	77 0e                	ja     c0005523 <f_read+0x175>
c0005515:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005519:	bd 02 00 00 00       	mov    ebp,0x2
c000551e:	e9 01 01 00 00       	jmp    c0005624 <f_read+0x276>
c0005523:	83 f8 ff             	cmp    eax,0xffffffff
c0005526:	75 0e                	jne    c0005536 <f_read+0x188>
c0005528:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000552c:	bd 01 00 00 00       	mov    ebp,0x1
c0005531:	e9 ee 00 00 00       	jmp    c0005624 <f_read+0x276>
c0005536:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005539:	e9 08 ff ff ff       	jmp    c0005446 <f_read+0x98>
c000553e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005541:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005544:	29 f0                	sub    eax,esi
c0005546:	19 fa                	sbb    edx,edi
c0005548:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000554b:	89 d7                	mov    edi,edx
c000554d:	ba 00 00 00 00       	mov    edx,0x0
c0005552:	89 f9                	mov    ecx,edi
c0005554:	19 d1                	sbb    ecx,edx
c0005556:	0f 83 64 ff ff ff    	jae    c00054c0 <f_read+0x112>
c000555c:	89 c7                	mov    edi,eax
c000555e:	8d 53 50             	lea    edx,[ebx+0x50]
c0005561:	c1 e7 09             	shl    edi,0x9
c0005564:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005568:	b9 00 02 00 00       	mov    ecx,0x200
c000556d:	01 f8                	add    eax,edi
c000556f:	e8 4d c7 ff ff       	call   c0001cc1 <mem_cpy>
c0005574:	e9 47 ff ff ff       	jmp    c00054c0 <f_read+0x112>
c0005579:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000557c:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c000557f:	89 04 24             	mov    DWORD PTR [esp],eax
c0005582:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005586:	39 7c 24 04          	cmp    DWORD PTR [esp+0x4],edi
c000558a:	75 05                	jne    c0005591 <f_read+0x1e3>
c000558c:	39 34 24             	cmp    DWORD PTR [esp],esi
c000558f:	74 5b                	je     c00055ec <f_read+0x23e>
c0005591:	8d 43 50             	lea    eax,[ebx+0x50]
c0005594:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005598:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000559c:	79 2a                	jns    c00055c8 <f_read+0x21a>
c000559e:	83 ec 0c             	sub    esp,0xc
c00055a1:	6a 01                	push   0x1
c00055a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00055ab:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055af:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c00055b3:	50                   	push   eax
c00055b4:	e8 54 c6 ff ff       	call   c0001c0d <disk_write>
c00055b9:	83 c4 20             	add    esp,0x20
c00055bc:	85 c0                	test   eax,eax
c00055be:	0f 85 64 ff ff ff    	jne    c0005528 <f_read+0x17a>
c00055c4:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c00055c8:	83 ec 0c             	sub    esp,0xc
c00055cb:	6a 01                	push   0x1
c00055cd:	57                   	push   edi
c00055ce:	56                   	push   esi
c00055cf:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00055d3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00055d7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c00055db:	50                   	push   eax
c00055dc:	e8 16 c6 ff ff       	call   c0001bf7 <disk_read>
c00055e1:	83 c4 20             	add    esp,0x20
c00055e4:	85 c0                	test   eax,eax
c00055e6:	0f 85 3c ff ff ff    	jne    c0005528 <f_read+0x17a>
c00055ec:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00055ef:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00055f2:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00055f5:	ba 00 02 00 00       	mov    edx,0x200
c00055fa:	25 ff 01 00 00       	and    eax,0x1ff
c00055ff:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c0005603:	29 c2                	sub    edx,eax
c0005605:	39 d6                	cmp    esi,edx
c0005607:	76 02                	jbe    c000560b <f_read+0x25d>
c0005609:	89 d6                	mov    esi,edx
c000560b:	8d 54 03 50          	lea    edx,[ebx+eax*1+0x50]
c000560f:	89 f1                	mov    ecx,esi
c0005611:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0005615:	e8 a7 c6 ff ff       	call   c0001cc1 <mem_cpy>
c000561a:	e9 a7 fe ff ff       	jmp    c00054c6 <f_read+0x118>
c000561f:	bd 07 00 00 00       	mov    ebp,0x7
c0005624:	83 c4 2c             	add    esp,0x2c
c0005627:	89 e8                	mov    eax,ebp
c0005629:	5b                   	pop    ebx
c000562a:	5e                   	pop    esi
c000562b:	5f                   	pop    edi
c000562c:	5d                   	pop    ebp
c000562d:	c3                   	ret    

c000562e <f_write>:
c000562e:	55                   	push   ebp
c000562f:	57                   	push   edi
c0005630:	56                   	push   esi
c0005631:	53                   	push   ebx
c0005632:	83 ec 2c             	sub    esp,0x2c
c0005635:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0005639:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c000563d:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0005643:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005647:	89 d8                	mov    eax,ebx
c0005649:	e8 f7 cc ff ff       	call   c0002345 <validate>
c000564e:	89 c5                	mov    ebp,eax
c0005650:	85 c0                	test   eax,eax
c0005652:	0f 85 86 02 00 00    	jne    c00058de <f_write+0x2b0>
c0005658:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c000565c:	85 ed                	test   ebp,ebp
c000565e:	0f 85 7a 02 00 00    	jne    c00058de <f_write+0x2b0>
c0005664:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005668:	0f 84 6b 02 00 00    	je     c00058d9 <f_write+0x2ab>
c000566e:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005672:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005675:	0f 84 43 01 00 00    	je     c00057be <f_write+0x190>
c000567b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c000567e:	89 c1                	mov    ecx,eax
c0005680:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c0005684:	0f 83 34 01 00 00    	jae    c00057be <f_write+0x190>
c000568a:	f7 d0                	not    eax
c000568c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0005690:	e9 29 01 00 00       	jmp    c00057be <f_write+0x190>
c0005695:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005698:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000569b:	89 d0                	mov    eax,edx
c000569d:	25 ff 01 00 00       	and    eax,0x1ff
c00056a2:	0f 85 00 02 00 00    	jne    c00058a8 <f_write+0x27a>
c00056a8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00056ac:	89 d6                	mov    esi,edx
c00056ae:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
c00056b2:	89 cf                	mov    edi,ecx
c00056b4:	48                   	dec    eax
c00056b5:	0f ac fe 09          	shrd   esi,edi,0x9
c00056b9:	21 f0                	and    eax,esi
c00056bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00056bf:	0f 84 06 01 00 00    	je     c00057cb <f_write+0x19d>
c00056c5:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00056c9:	0f 88 6e 01 00 00    	js     c000583d <f_write+0x20f>
c00056cf:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00056d3:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00056d6:	89 c8                	mov    eax,ecx
c00056d8:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00056dc:	e8 fa c7 ff ff       	call   c0001edb <clst2sect>
c00056e1:	89 d1                	mov    ecx,edx
c00056e3:	09 c1                	or     ecx,eax
c00056e5:	0f 84 1c 01 00 00    	je     c0005807 <f_write+0x1d9>
c00056eb:	31 ff                	xor    edi,edi
c00056ed:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c00056f1:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00056f5:	01 c6                	add    esi,eax
c00056f7:	11 d7                	adc    edi,edx
c00056f9:	81 7c 24 48 ff 01 00 00 	cmp    DWORD PTR [esp+0x48],0x1ff
c0005701:	0f 86 63 01 00 00    	jbe    c000586a <f_write+0x23c>
c0005707:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c000570b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000570f:	c1 e8 09             	shr    eax,0x9
c0005712:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005716:	0f b7 41 0a          	movzx  eax,WORD PTR [ecx+0xa]
c000571a:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c000571e:	39 c2                	cmp    edx,eax
c0005720:	76 08                	jbe    c000572a <f_write+0xfc>
c0005722:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c0005726:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000572a:	83 ec 0c             	sub    esp,0xc
c000572d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005731:	57                   	push   edi
c0005732:	56                   	push   esi
c0005733:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0005737:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000573b:	50                   	push   eax
c000573c:	e8 cc c4 ff ff       	call   c0001c0d <disk_write>
c0005741:	83 c4 20             	add    esp,0x20
c0005744:	85 c0                	test   eax,eax
c0005746:	0f 85 ce 00 00 00    	jne    c000581a <f_write+0x1ec>
c000574c:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000574f:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005752:	29 f0                	sub    eax,esi
c0005754:	19 fa                	sbb    edx,edi
c0005756:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
c000575a:	89 d7                	mov    edi,edx
c000575c:	ba 00 00 00 00       	mov    edx,0x0
c0005761:	89 f9                	mov    ecx,edi
c0005763:	19 d1                	sbb    ecx,edx
c0005765:	73 1c                	jae    c0005783 <f_write+0x155>
c0005767:	89 c7                	mov    edi,eax
c0005769:	b9 00 02 00 00       	mov    ecx,0x200
c000576e:	c1 e7 09             	shl    edi,0x9
c0005771:	8d 43 50             	lea    eax,[ebx+0x50]
c0005774:	03 7c 24 44          	add    edi,DWORD PTR [esp+0x44]
c0005778:	89 fa                	mov    edx,edi
c000577a:	e8 42 c5 ff ff       	call   c0001cc1 <mem_cpy>
c000577f:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005783:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005787:	c1 e6 09             	shl    esi,0x9
c000578a:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000578e:	31 ff                	xor    edi,edi
c0005790:	01 30                	add    DWORD PTR [eax],esi
c0005792:	29 74 24 48          	sub    DWORD PTR [esp+0x48],esi
c0005796:	01 74 24 44          	add    DWORD PTR [esp+0x44],esi
c000579a:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000579d:	03 73 2c             	add    esi,DWORD PTR [ebx+0x2c]
c00057a0:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00057a3:	13 7b 30             	adc    edi,DWORD PTR [ebx+0x30]
c00057a6:	89 c1                	mov    ecx,eax
c00057a8:	39 f2                	cmp    edx,esi
c00057aa:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c00057ad:	89 7b 30             	mov    DWORD PTR [ebx+0x30],edi
c00057b0:	19 f9                	sbb    ecx,edi
c00057b2:	73 04                	jae    c00057b8 <f_write+0x18a>
c00057b4:	89 f2                	mov    edx,esi
c00057b6:	89 f8                	mov    eax,edi
c00057b8:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c00057bb:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00057be:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00057c3:	0f 85 cc fe ff ff    	jne    c0005695 <f_write+0x67>
c00057c9:	eb 2e                	jmp    c00057f9 <f_write+0x1cb>
c00057cb:	89 c8                	mov    eax,ecx
c00057cd:	09 d0                	or     eax,edx
c00057cf:	75 0b                	jne    c00057dc <f_write+0x1ae>
c00057d1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00057d4:	31 d2                	xor    edx,edx
c00057d6:	85 c0                	test   eax,eax
c00057d8:	75 28                	jne    c0005802 <f_write+0x1d4>
c00057da:	eb 12                	jmp    c00057ee <f_write+0x1c0>
c00057dc:	83 7b 4c 00          	cmp    DWORD PTR [ebx+0x4c],0x0
c00057e0:	74 09                	je     c00057eb <f_write+0x1bd>
c00057e2:	89 d8                	mov    eax,ebx
c00057e4:	e8 13 c7 ff ff       	call   c0001efc <clmt_clust>
c00057e9:	eb 0a                	jmp    c00057f5 <f_write+0x1c7>
c00057eb:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00057ee:	89 d8                	mov    eax,ebx
c00057f0:	e8 a1 da ff ff       	call   c0003296 <create_chain>
c00057f5:	85 c0                	test   eax,eax
c00057f7:	75 09                	jne    c0005802 <f_write+0x1d4>
c00057f9:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c00057fd:	e9 dc 00 00 00       	jmp    c00058de <f_write+0x2b0>
c0005802:	83 f8 01             	cmp    eax,0x1
c0005805:	75 0e                	jne    c0005815 <f_write+0x1e7>
c0005807:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c000580b:	bd 02 00 00 00       	mov    ebp,0x2
c0005810:	e9 c9 00 00 00       	jmp    c00058de <f_write+0x2b0>
c0005815:	83 f8 ff             	cmp    eax,0xffffffff
c0005818:	75 0e                	jne    c0005828 <f_write+0x1fa>
c000581a:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c000581e:	bd 01 00 00 00       	mov    ebp,0x1
c0005823:	e9 b6 00 00 00       	jmp    c00058de <f_write+0x2b0>
c0005828:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c000582b:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000582f:	0f 85 90 fe ff ff    	jne    c00056c5 <f_write+0x97>
c0005835:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005838:	e9 88 fe ff ff       	jmp    c00056c5 <f_write+0x97>
c000583d:	83 ec 0c             	sub    esp,0xc
c0005840:	8d 43 50             	lea    eax,[ebx+0x50]
c0005843:	6a 01                	push   0x1
c0005845:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0005848:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c000584b:	50                   	push   eax
c000584c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0005850:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005854:	50                   	push   eax
c0005855:	e8 b3 c3 ff ff       	call   c0001c0d <disk_write>
c000585a:	83 c4 20             	add    esp,0x20
c000585d:	85 c0                	test   eax,eax
c000585f:	75 b9                	jne    c000581a <f_write+0x1ec>
c0005861:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005865:	e9 65 fe ff ff       	jmp    c00056cf <f_write+0xa1>
c000586a:	39 7b 3c             	cmp    DWORD PTR [ebx+0x3c],edi
c000586d:	75 05                	jne    c0005874 <f_write+0x246>
c000586f:	39 73 38             	cmp    DWORD PTR [ebx+0x38],esi
c0005872:	74 2e                	je     c00058a2 <f_write+0x274>
c0005874:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0005877:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000587a:	39 53 2c             	cmp    DWORD PTR [ebx+0x2c],edx
c000587d:	1b 43 10             	sbb    eax,DWORD PTR [ebx+0x10]
c0005880:	73 20                	jae    c00058a2 <f_write+0x274>
c0005882:	83 ec 0c             	sub    esp,0xc
c0005885:	8d 43 50             	lea    eax,[ebx+0x50]
c0005888:	6a 01                	push   0x1
c000588a:	57                   	push   edi
c000588b:	56                   	push   esi
c000588c:	50                   	push   eax
c000588d:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005891:	50                   	push   eax
c0005892:	e8 60 c3 ff ff       	call   c0001bf7 <disk_read>
c0005897:	83 c4 20             	add    esp,0x20
c000589a:	85 c0                	test   eax,eax
c000589c:	0f 85 78 ff ff ff    	jne    c000581a <f_write+0x1ec>
c00058a2:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c00058a5:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c00058a8:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00058ab:	ba 00 02 00 00       	mov    edx,0x200
c00058b0:	25 ff 01 00 00       	and    eax,0x1ff
c00058b5:	8b 74 24 48          	mov    esi,DWORD PTR [esp+0x48]
c00058b9:	29 c2                	sub    edx,eax
c00058bb:	39 d6                	cmp    esi,edx
c00058bd:	76 02                	jbe    c00058c1 <f_write+0x293>
c00058bf:	89 d6                	mov    esi,edx
c00058c1:	8d 44 03 50          	lea    eax,[ebx+eax*1+0x50]
c00058c5:	89 f1                	mov    ecx,esi
c00058c7:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c00058cb:	e8 f1 c3 ff ff       	call   c0001cc1 <mem_cpy>
c00058d0:	80 4b 28 80          	or     BYTE PTR [ebx+0x28],0x80
c00058d4:	e9 b1 fe ff ff       	jmp    c000578a <f_write+0x15c>
c00058d9:	bd 07 00 00 00       	mov    ebp,0x7
c00058de:	83 c4 2c             	add    esp,0x2c
c00058e1:	89 e8                	mov    eax,ebp
c00058e3:	5b                   	pop    ebx
c00058e4:	5e                   	pop    esi
c00058e5:	5f                   	pop    edi
c00058e6:	5d                   	pop    ebp
c00058e7:	c3                   	ret    

c00058e8 <f_sync>:
c00058e8:	56                   	push   esi
c00058e9:	53                   	push   ebx
c00058ea:	83 ec 64             	sub    esp,0x64
c00058ed:	8b 5c 24 70          	mov    ebx,DWORD PTR [esp+0x70]
c00058f1:	8d 54 24 10          	lea    edx,[esp+0x10]
c00058f5:	89 d8                	mov    eax,ebx
c00058f7:	e8 49 ca ff ff       	call   c0002345 <validate>
c00058fc:	85 c0                	test   eax,eax
c00058fe:	0f 85 ba 01 00 00    	jne    c0005abe <f_sync+0x1d6>
c0005904:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0005907:	f6 c2 40             	test   dl,0x40
c000590a:	0f 84 ae 01 00 00    	je     c0005abe <f_sync+0x1d6>
c0005910:	84 d2                	test   dl,dl
c0005912:	79 33                	jns    c0005947 <f_sync+0x5f>
c0005914:	83 ec 0c             	sub    esp,0xc
c0005917:	8d 43 50             	lea    eax,[ebx+0x50]
c000591a:	6a 01                	push   0x1
c000591c:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c000591f:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0005922:	50                   	push   eax
c0005923:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005927:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000592b:	50                   	push   eax
c000592c:	e8 dc c2 ff ff       	call   c0001c0d <disk_write>
c0005931:	83 c4 20             	add    esp,0x20
c0005934:	89 c2                	mov    edx,eax
c0005936:	b8 01 00 00 00       	mov    eax,0x1
c000593b:	85 d2                	test   edx,edx
c000593d:	0f 85 7b 01 00 00    	jne    c0005abe <f_sync+0x1d6>
c0005943:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005947:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000594b:	80 38 04             	cmp    BYTE PTR [eax],0x4
c000594e:	0f 85 11 01 00 00    	jne    c0005a65 <f_sync+0x17d>
c0005954:	89 d8                	mov    eax,ebx
c0005956:	e8 13 d6 ff ff       	call   c0002f6e <fill_first_frag>
c000595b:	85 c0                	test   eax,eax
c000595d:	0f 85 5b 01 00 00    	jne    c0005abe <f_sync+0x1d6>
c0005963:	83 c9 ff             	or     ecx,0xffffffff
c0005966:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005969:	89 d8                	mov    eax,ebx
c000596b:	e8 c9 d5 ff ff       	call   c0002f39 <fill_last_frag>
c0005970:	85 c0                	test   eax,eax
c0005972:	0f 85 46 01 00 00    	jne    c0005abe <f_sync+0x1d6>
c0005978:	83 ec 0c             	sub    esp,0xc
c000597b:	68 60 04 00 00       	push   0x460
c0005980:	e8 f0 2a 00 00       	call   c0008475 <ff_memalloc>
c0005985:	83 c4 10             	add    esp,0x10
c0005988:	89 c6                	mov    esi,eax
c000598a:	b8 11 00 00 00       	mov    eax,0x11
c000598f:	85 f6                	test   esi,esi
c0005991:	0f 84 27 01 00 00    	je     c0005abe <f_sync+0x1d6>
c0005997:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000599b:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00059a1:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00059a4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00059a7:	89 da                	mov    edx,ebx
c00059a9:	8d 44 24 14          	lea    eax,[esp+0x14]
c00059ad:	e8 af df ff ff       	call   c0003961 <load_obj_xdir>
c00059b2:	85 c0                	test   eax,eax
c00059b4:	0f 85 95 00 00 00    	jne    c0005a4f <f_sync+0x167>
c00059ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059be:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00059c1:	80 4a 04 20          	or     BYTE PTR [edx+0x4],0x20
c00059c5:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
c00059c8:	8a 53 07             	mov    dl,BYTE PTR [ebx+0x7]
c00059cb:	83 ca 01             	or     edx,0x1
c00059ce:	88 51 21             	mov    BYTE PTR [ecx+0x21],dl
c00059d1:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c00059d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059d7:	83 c0 34             	add    eax,0x34
c00059da:	e8 d9 c2 ff ff       	call   c0001cb8 <st_dword>
c00059df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059e3:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059e6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00059e9:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059ec:	83 c0 38             	add    eax,0x38
c00059ef:	e8 c7 c2 ff ff       	call   c0001cbb <st_qword>
c00059f4:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00059f7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00059fb:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c00059fe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a01:	83 c0 28             	add    eax,0x28
c0005a04:	e8 b2 c2 ff ff       	call   c0001cbb <st_qword>
c0005a09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a0d:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a12:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a15:	83 c0 0c             	add    eax,0xc
c0005a18:	e8 9b c2 ff ff       	call   c0001cb8 <st_dword>
c0005a1d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a21:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0005a24:	c6 42 15 00          	mov    BYTE PTR [edx+0x15],0x0
c0005a28:	31 d2                	xor    edx,edx
c0005a2a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0005a2d:	83 c0 10             	add    eax,0x10
c0005a30:	e8 83 c2 ff ff       	call   c0001cb8 <st_dword>
c0005a35:	8d 44 24 14          	lea    eax,[esp+0x14]
c0005a39:	e8 62 e1 ff ff       	call   c0003ba0 <store_xdir>
c0005a3e:	85 c0                	test   eax,eax
c0005a40:	75 0d                	jne    c0005a4f <f_sync+0x167>
c0005a42:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005a46:	e8 00 eb ff ff       	call   c000454b <sync_fs>
c0005a4b:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005a4f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0005a53:	83 ec 0c             	sub    esp,0xc
c0005a56:	56                   	push   esi
c0005a57:	e8 2f 2a 00 00       	call   c000848b <ff_memfree>
c0005a5c:	83 c4 10             	add    esp,0x10
c0005a5f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005a63:	eb 59                	jmp    c0005abe <f_sync+0x1d6>
c0005a65:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c0005a68:	8b 4b 44             	mov    ecx,DWORD PTR [ebx+0x44]
c0005a6b:	e8 b0 c9 ff ff       	call   c0002420 <move_window>
c0005a70:	85 c0                	test   eax,eax
c0005a72:	75 4a                	jne    c0005abe <f_sync+0x1d6>
c0005a74:	8b 73 48             	mov    esi,DWORD PTR [ebx+0x48]
c0005a77:	80 4e 0b 20          	or     BYTE PTR [esi+0xb],0x20
c0005a7b:	89 f2                	mov    edx,esi
c0005a7d:	8b 4b 08             	mov    ecx,DWORD PTR [ebx+0x8]
c0005a80:	8b 03                	mov    eax,DWORD PTR [ebx]
c0005a82:	e8 5f f3 ff ff       	call   c0004de6 <st_clust.isra.1>
c0005a87:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005a8a:	8d 46 1c             	lea    eax,[esi+0x1c]
c0005a8d:	e8 26 c2 ff ff       	call   c0001cb8 <st_dword>
c0005a92:	8d 46 16             	lea    eax,[esi+0x16]
c0005a95:	ba 00 00 21 50       	mov    edx,0x50210000
c0005a9a:	e8 19 c2 ff ff       	call   c0001cb8 <st_dword>
c0005a9f:	8d 46 12             	lea    eax,[esi+0x12]
c0005aa2:	31 d2                	xor    edx,edx
c0005aa4:	e8 0b c2 ff ff       	call   c0001cb4 <st_word>
c0005aa9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005aad:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0005ab1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0005ab5:	e8 91 ea ff ff       	call   c000454b <sync_fs>
c0005aba:	80 63 28 bf          	and    BYTE PTR [ebx+0x28],0xbf
c0005abe:	83 c4 64             	add    esp,0x64
c0005ac1:	5b                   	pop    ebx
c0005ac2:	5e                   	pop    esi
c0005ac3:	c3                   	ret    

c0005ac4 <f_close>:
c0005ac4:	53                   	push   ebx
c0005ac5:	83 ec 24             	sub    esp,0x24
c0005ac8:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0005acc:	53                   	push   ebx
c0005acd:	e8 16 fe ff ff       	call   c00058e8 <f_sync>
c0005ad2:	83 c4 10             	add    esp,0x10
c0005ad5:	85 c0                	test   eax,eax
c0005ad7:	75 15                	jne    c0005aee <f_close+0x2a>
c0005ad9:	8d 54 24 0c          	lea    edx,[esp+0xc]
c0005add:	89 d8                	mov    eax,ebx
c0005adf:	e8 61 c8 ff ff       	call   c0002345 <validate>
c0005ae4:	85 c0                	test   eax,eax
c0005ae6:	75 06                	jne    c0005aee <f_close+0x2a>
c0005ae8:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0005aee:	83 c4 18             	add    esp,0x18
c0005af1:	5b                   	pop    ebx
c0005af2:	c3                   	ret    

c0005af3 <f_lseek>:
c0005af3:	55                   	push   ebp
c0005af4:	57                   	push   edi
c0005af5:	56                   	push   esi
c0005af6:	53                   	push   ebx
c0005af7:	83 ec 3c             	sub    esp,0x3c
c0005afa:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0005afe:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0005b02:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0005b06:	89 04 24             	mov    DWORD PTR [esp],eax
c0005b09:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0005b0d:	89 d8                	mov    eax,ebx
c0005b0f:	8d 54 24 2c          	lea    edx,[esp+0x2c]
c0005b13:	e8 2d c8 ff ff       	call   c0002345 <validate>
c0005b18:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b1c:	85 c0                	test   eax,eax
c0005b1e:	0f 85 7a 04 00 00    	jne    c0005f9e <f_lseek+0x4ab>
c0005b24:	0f b6 43 29          	movzx  eax,BYTE PTR [ebx+0x29]
c0005b28:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b2c:	85 c0                	test   eax,eax
c0005b2e:	0f 85 6a 04 00 00    	jne    c0005f9e <f_lseek+0x4ab>
c0005b34:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005b38:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0005b3b:	74 0c                	je     c0005b49 <f_lseek+0x56>
c0005b3d:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005b40:	85 c0                	test   eax,eax
c0005b42:	75 1f                	jne    c0005b63 <f_lseek+0x70>
c0005b44:	e9 b5 01 00 00       	jmp    c0005cfe <f_lseek+0x20b>
c0005b49:	83 c9 ff             	or     ecx,0xffffffff
c0005b4c:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0005b4f:	89 d8                	mov    eax,ebx
c0005b51:	e8 e3 d3 ff ff       	call   c0002f39 <fill_last_frag>
c0005b56:	85 c0                	test   eax,eax
c0005b58:	74 e3                	je     c0005b3d <f_lseek+0x4a>
c0005b5a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0005b5e:	e9 3b 04 00 00       	jmp    c0005f9e <f_lseek+0x4ab>
c0005b63:	83 7c 24 04 ff       	cmp    DWORD PTR [esp+0x4],0xffffffff
c0005b68:	0f 85 ac 00 00 00    	jne    c0005c1a <f_lseek+0x127>
c0005b6e:	83 3c 24 ff          	cmp    DWORD PTR [esp],0xffffffff
c0005b72:	0f 85 a2 00 00 00    	jne    c0005c1a <f_lseek+0x127>
c0005b78:	8d 78 04             	lea    edi,[eax+0x4]
c0005b7b:	8b 6b 08             	mov    ebp,DWORD PTR [ebx+0x8]
c0005b7e:	8b 00                	mov    eax,DWORD PTR [eax]
c0005b80:	be 02 00 00 00       	mov    esi,0x2
c0005b85:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005b89:	85 ed                	test   ebp,ebp
c0005b8b:	74 73                	je     c0005c00 <f_lseek+0x10d>
c0005b8d:	89 e9                	mov    ecx,ebp
c0005b8f:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005b96:	ff 04 24             	inc    DWORD PTR [esp]
c0005b99:	89 ca                	mov    edx,ecx
c0005b9b:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005b9f:	89 d8                	mov    eax,ebx
c0005ba1:	e8 02 d4 ff ff       	call   c0002fa8 <get_fat>
c0005ba6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005baa:	83 f8 01             	cmp    eax,0x1
c0005bad:	77 11                	ja     c0005bc0 <f_lseek+0xcd>
c0005baf:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c0005bb3:	c7 44 24 18 02 00 00 00 	mov    DWORD PTR [esp+0x18],0x2
c0005bbb:	e9 de 03 00 00       	jmp    c0005f9e <f_lseek+0x4ab>
c0005bc0:	83 f8 ff             	cmp    eax,0xffffffff
c0005bc3:	75 11                	jne    c0005bd6 <f_lseek+0xe3>
c0005bc5:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c0005bc9:	c7 44 24 18 01 00 00 00 	mov    DWORD PTR [esp+0x18],0x1
c0005bd1:	e9 c8 03 00 00       	jmp    c0005f9e <f_lseek+0x4ab>
c0005bd6:	8d 51 01             	lea    edx,[ecx+0x1]
c0005bd9:	89 c1                	mov    ecx,eax
c0005bdb:	39 c2                	cmp    edx,eax
c0005bdd:	74 b7                	je     c0005b96 <f_lseek+0xa3>
c0005bdf:	83 c6 02             	add    esi,0x2
c0005be2:	39 74 24 08          	cmp    DWORD PTR [esp+0x8],esi
c0005be6:	72 0b                	jb     c0005bf3 <f_lseek+0x100>
c0005be8:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0005beb:	89 6f 04             	mov    DWORD PTR [edi+0x4],ebp
c0005bee:	89 0f                	mov    DWORD PTR [edi],ecx
c0005bf0:	83 c7 08             	add    edi,0x8
c0005bf3:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005bf7:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005bfa:	76 04                	jbe    c0005c00 <f_lseek+0x10d>
c0005bfc:	89 c5                	mov    ebp,eax
c0005bfe:	eb 8d                	jmp    c0005b8d <f_lseek+0x9a>
c0005c00:	8b 43 4c             	mov    eax,DWORD PTR [ebx+0x4c]
c0005c03:	3b 74 24 08          	cmp    esi,DWORD PTR [esp+0x8]
c0005c07:	89 30                	mov    DWORD PTR [eax],esi
c0005c09:	0f 87 87 03 00 00    	ja     c0005f96 <f_lseek+0x4a3>
c0005c0f:	c7 07 00 00 00 00    	mov    DWORD PTR [edi],0x0
c0005c15:	e9 84 03 00 00       	jmp    c0005f9e <f_lseek+0x4ab>
c0005c1a:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0005c1d:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c0005c20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c28:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c2c:	39 04 24             	cmp    DWORD PTR [esp],eax
c0005c2f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0005c33:	1b 44 24 0c          	sbb    eax,DWORD PTR [esp+0xc]
c0005c37:	73 0f                	jae    c0005c48 <f_lseek+0x155>
c0005c39:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005c3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005c40:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005c44:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005c48:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0005c4c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005c50:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c0005c53:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005c56:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0005c5a:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c0005c5e:	0f 84 3a 03 00 00    	je     c0005f9e <f_lseek+0x4ab>
c0005c64:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005c68:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005c6c:	83 c6 ff             	add    esi,0xffffffff
c0005c6f:	89 d8                	mov    eax,ebx
c0005c71:	83 d7 ff             	adc    edi,0xffffffff
c0005c74:	89 f2                	mov    edx,esi
c0005c76:	89 f9                	mov    ecx,edi
c0005c78:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0005c7c:	89 34 24             	mov    DWORD PTR [esp],esi
c0005c7f:	e8 78 c2 ff ff       	call   c0001efc <clmt_clust>
c0005c84:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005c88:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005c8b:	89 c2                	mov    edx,eax
c0005c8d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0005c91:	89 c8                	mov    eax,ecx
c0005c93:	e8 43 c2 ff ff       	call   c0001edb <clst2sect>
c0005c98:	89 d7                	mov    edi,edx
c0005c9a:	09 c7                	or     edi,eax
c0005c9c:	0f 84 0d ff ff ff    	je     c0005baf <f_lseek+0xbc>
c0005ca2:	8b 6c 24 08          	mov    ebp,DWORD PTR [esp+0x8]
c0005ca6:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0005cac:	0f 84 ec 02 00 00    	je     c0005f9e <f_lseek+0x4ab>
c0005cb2:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005cb6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0005cba:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005cbd:	0f b7 69 0a          	movzx  ebp,WORD PTR [ecx+0xa]
c0005cc1:	0f ac fe 09          	shrd   esi,edi,0x9
c0005cc5:	4d                   	dec    ebp
c0005cc6:	31 ff                	xor    edi,edi
c0005cc8:	21 ee                	and    esi,ebp
c0005cca:	01 c6                	add    esi,eax
c0005ccc:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005ccf:	11 d7                	adc    edi,edx
c0005cd1:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005cd4:	39 fa                	cmp    edx,edi
c0005cd6:	75 08                	jne    c0005ce0 <f_lseek+0x1ed>
c0005cd8:	39 f0                	cmp    eax,esi
c0005cda:	0f 84 be 02 00 00    	je     c0005f9e <f_lseek+0x4ab>
c0005ce0:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005ce3:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005ce7:	0f 89 80 02 00 00    	jns    c0005f6d <f_lseek+0x47a>
c0005ced:	83 ec 0c             	sub    esp,0xc
c0005cf0:	6a 01                	push   0x1
c0005cf2:	52                   	push   edx
c0005cf3:	50                   	push   eax
c0005cf4:	55                   	push   ebp
c0005cf5:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c0005cf9:	e9 5a 02 00 00       	jmp    c0005f58 <f_lseek+0x465>
c0005cfe:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0005d02:	80 39 04             	cmp    BYTE PTR [ecx],0x4
c0005d05:	74 16                	je     c0005d1d <f_lseek+0x22a>
c0005d07:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c0005d0c:	76 0f                	jbe    c0005d1d <f_lseek+0x22a>
c0005d0e:	c7 04 24 ff ff ff ff 	mov    DWORD PTR [esp],0xffffffff
c0005d15:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005d1d:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0005d20:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0005d23:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0005d26:	89 c7                	mov    edi,eax
c0005d28:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005d2c:	73 0d                	jae    c0005d3b <f_lseek+0x248>
c0005d2e:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c0005d32:	75 07                	jne    c0005d3b <f_lseek+0x248>
c0005d34:	89 14 24             	mov    DWORD PTR [esp],edx
c0005d37:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0005d3b:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005d3e:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005d41:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005d45:	c7 43 2c 00 00 00 00 	mov    DWORD PTR [ebx+0x2c],0x0
c0005d4c:	c7 43 30 00 00 00 00 	mov    DWORD PTR [ebx+0x30],0x0
c0005d53:	0b 3c 24             	or     edi,DWORD PTR [esp]
c0005d56:	75 09                	jne    c0005d61 <f_lseek+0x26e>
c0005d58:	31 f6                	xor    esi,esi
c0005d5a:	31 ff                	xor    edi,edi
c0005d5c:	e9 af 01 00 00       	jmp    c0005f10 <f_lseek+0x41d>
c0005d61:	0f b7 49 0a          	movzx  ecx,WORD PTR [ecx+0xa]
c0005d65:	89 d7                	mov    edi,edx
c0005d67:	c1 e1 09             	shl    ecx,0x9
c0005d6a:	09 c7                	or     edi,eax
c0005d6c:	89 cd                	mov    ebp,ecx
c0005d6e:	74 6d                	je     c0005ddd <f_lseek+0x2ea>
c0005d70:	83 c0 ff             	add    eax,0xffffffff
c0005d73:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0005d77:	83 d2 ff             	adc    edx,0xffffffff
c0005d7a:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0005d7d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0005d81:	83 c0 ff             	add    eax,0xffffffff
c0005d84:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0005d88:	83 d2 ff             	adc    edx,0xffffffff
c0005d8b:	31 ff                	xor    edi,edi
c0005d8d:	57                   	push   edi
c0005d8e:	51                   	push   ecx
c0005d8f:	52                   	push   edx
c0005d90:	50                   	push   eax
c0005d91:	e8 2e 14 02 00       	call   c00271c4 <__udivdi3>
c0005d96:	83 c4 10             	add    esp,0x10
c0005d99:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0005d9d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0005da1:	57                   	push   edi
c0005da2:	55                   	push   ebp
c0005da3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005da7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0005dab:	e8 14 14 02 00       	call   c00271c4 <__udivdi3>
c0005db0:	83 c4 10             	add    esp,0x10
c0005db3:	39 44 24 10          	cmp    DWORD PTR [esp+0x10],eax
c0005db7:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0005dbb:	19 d1                	sbb    ecx,edx
c0005dbd:	72 1e                	jb     c0005ddd <f_lseek+0x2ea>
c0005dbf:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0005dc3:	89 e9                	mov    ecx,ebp
c0005dc5:	89 53 30             	mov    DWORD PTR [ebx+0x30],edx
c0005dc8:	f7 d9                	neg    ecx
c0005dca:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c0005dcd:	23 4c 24 08          	and    ecx,DWORD PTR [esp+0x8]
c0005dd1:	29 0c 24             	sub    DWORD PTR [esp],ecx
c0005dd4:	89 4b 2c             	mov    DWORD PTR [ebx+0x2c],ecx
c0005dd7:	19 54 24 04          	sbb    DWORD PTR [esp+0x4],edx
c0005ddb:	eb 28                	jmp    c0005e05 <f_lseek+0x312>
c0005ddd:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0005de0:	85 c0                	test   eax,eax
c0005de2:	75 1e                	jne    c0005e02 <f_lseek+0x30f>
c0005de4:	31 d2                	xor    edx,edx
c0005de6:	89 d8                	mov    eax,ebx
c0005de8:	e8 a9 d4 ff ff       	call   c0003296 <create_chain>
c0005ded:	83 f8 01             	cmp    eax,0x1
c0005df0:	0f 84 b9 fd ff ff    	je     c0005baf <f_lseek+0xbc>
c0005df6:	83 f8 ff             	cmp    eax,0xffffffff
c0005df9:	0f 84 c6 fd ff ff    	je     c0005bc5 <f_lseek+0xd2>
c0005dff:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0005e02:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005e05:	85 c0                	test   eax,eax
c0005e07:	0f 84 4b ff ff ff    	je     c0005d58 <f_lseek+0x265>
c0005e0d:	89 6c 24 10          	mov    DWORD PTR [esp+0x10],ebp
c0005e11:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0005e19:	3b 2c 24             	cmp    ebp,DWORD PTR [esp]
c0005e1c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e20:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c0005e23:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c0005e26:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c0005e2a:	0f 83 9d 00 00 00    	jae    c0005ecd <f_lseek+0x3da>
c0005e30:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0005e34:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0005e38:	29 34 24             	sub    DWORD PTR [esp],esi
c0005e3b:	19 7c 24 04          	sbb    DWORD PTR [esp+0x4],edi
c0005e3f:	01 f2                	add    edx,esi
c0005e41:	11 f9                	adc    ecx,edi
c0005e43:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0005e47:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0005e4b:	89 4b 30             	mov    DWORD PTR [ebx+0x30],ecx
c0005e4e:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c0005e51:	8a 4b 28             	mov    cl,BYTE PTR [ebx+0x28]
c0005e54:	f6 c1 02             	test   cl,0x2
c0005e57:	74 35                	je     c0005e8e <f_lseek+0x39b>
c0005e59:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0005e5d:	39 7b 0c             	cmp    DWORD PTR [ebx+0xc],edi
c0005e60:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0005e63:	1b 7c 24 0c          	sbb    edi,DWORD PTR [esp+0xc]
c0005e67:	73 16                	jae    c0005e7f <f_lseek+0x38c>
c0005e69:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0005e6d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0005e71:	88 ca                	mov    dl,cl
c0005e73:	89 73 0c             	mov    DWORD PTR [ebx+0xc],esi
c0005e76:	83 ca 40             	or     edx,0x40
c0005e79:	89 7b 10             	mov    DWORD PTR [ebx+0x10],edi
c0005e7c:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0005e7f:	89 c2                	mov    edx,eax
c0005e81:	89 d8                	mov    eax,ebx
c0005e83:	e8 0e d4 ff ff       	call   c0003296 <create_chain>
c0005e88:	85 c0                	test   eax,eax
c0005e8a:	75 0b                	jne    c0005e97 <f_lseek+0x3a4>
c0005e8c:	eb 30                	jmp    c0005ebe <f_lseek+0x3cb>
c0005e8e:	89 c2                	mov    edx,eax
c0005e90:	89 d8                	mov    eax,ebx
c0005e92:	e8 11 d1 ff ff       	call   c0002fa8 <get_fat>
c0005e97:	83 f8 ff             	cmp    eax,0xffffffff
c0005e9a:	0f 84 25 fd ff ff    	je     c0005bc5 <f_lseek+0xd2>
c0005ea0:	83 f8 01             	cmp    eax,0x1
c0005ea3:	0f 86 06 fd ff ff    	jbe    c0005baf <f_lseek+0xbc>
c0005ea9:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0005ead:	39 42 1c             	cmp    DWORD PTR [edx+0x1c],eax
c0005eb0:	0f 86 f9 fc ff ff    	jbe    c0005baf <f_lseek+0xbc>
c0005eb6:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c0005eb9:	e9 5b ff ff ff       	jmp    c0005e19 <f_lseek+0x326>
c0005ebe:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0005ec5:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0005ecd:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0005ed0:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c0005ed4:	01 7b 2c             	add    DWORD PTR [ebx+0x2c],edi
c0005ed7:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0005eda:	11 6b 30             	adc    DWORD PTR [ebx+0x30],ebp
c0005edd:	81 e2 ff 01 00 00    	and    edx,0x1ff
c0005ee3:	0f 84 6f fe ff ff    	je     c0005d58 <f_lseek+0x265>
c0005ee9:	89 c2                	mov    edx,eax
c0005eeb:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0005eef:	e8 e7 bf ff ff       	call   c0001edb <clst2sect>
c0005ef4:	89 d7                	mov    edi,edx
c0005ef6:	09 c7                	or     edi,eax
c0005ef8:	0f 84 b1 fc ff ff    	je     c0005baf <f_lseek+0xbc>
c0005efe:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0005f02:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0005f05:	0f ac fe 09          	shrd   esi,edi,0x9
c0005f09:	c1 ef 09             	shr    edi,0x9
c0005f0c:	01 c6                	add    esi,eax
c0005f0e:	11 d7                	adc    edi,edx
c0005f10:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0005f13:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c0005f16:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0005f19:	39 43 0c             	cmp    DWORD PTR [ebx+0xc],eax
c0005f1c:	19 d1                	sbb    ecx,edx
c0005f1e:	73 0a                	jae    c0005f2a <f_lseek+0x437>
c0005f20:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c0005f23:	89 53 10             	mov    DWORD PTR [ebx+0x10],edx
c0005f26:	80 4b 28 40          	or     BYTE PTR [ebx+0x28],0x40
c0005f2a:	a9 ff 01 00 00       	test   eax,0x1ff
c0005f2f:	74 6d                	je     c0005f9e <f_lseek+0x4ab>
c0005f31:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0005f34:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0005f37:	39 fa                	cmp    edx,edi
c0005f39:	75 04                	jne    c0005f3f <f_lseek+0x44c>
c0005f3b:	39 f0                	cmp    eax,esi
c0005f3d:	74 5f                	je     c0005f9e <f_lseek+0x4ab>
c0005f3f:	8d 6b 50             	lea    ebp,[ebx+0x50]
c0005f42:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c0005f46:	79 25                	jns    c0005f6d <f_lseek+0x47a>
c0005f48:	83 ec 0c             	sub    esp,0xc
c0005f4b:	6a 01                	push   0x1
c0005f4d:	52                   	push   edx
c0005f4e:	50                   	push   eax
c0005f4f:	55                   	push   ebp
c0005f50:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f54:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f58:	50                   	push   eax
c0005f59:	e8 af bc ff ff       	call   c0001c0d <disk_write>
c0005f5e:	83 c4 20             	add    esp,0x20
c0005f61:	85 c0                	test   eax,eax
c0005f63:	0f 85 5c fc ff ff    	jne    c0005bc5 <f_lseek+0xd2>
c0005f69:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c0005f6d:	83 ec 0c             	sub    esp,0xc
c0005f70:	6a 01                	push   0x1
c0005f72:	57                   	push   edi
c0005f73:	56                   	push   esi
c0005f74:	55                   	push   ebp
c0005f75:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0005f79:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0005f7d:	50                   	push   eax
c0005f7e:	e8 74 bc ff ff       	call   c0001bf7 <disk_read>
c0005f83:	83 c4 20             	add    esp,0x20
c0005f86:	85 c0                	test   eax,eax
c0005f88:	0f 85 37 fc ff ff    	jne    c0005bc5 <f_lseek+0xd2>
c0005f8e:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0005f91:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0005f94:	eb 08                	jmp    c0005f9e <f_lseek+0x4ab>
c0005f96:	c7 44 24 18 11 00 00 00 	mov    DWORD PTR [esp+0x18],0x11
c0005f9e:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0005fa2:	83 c4 3c             	add    esp,0x3c
c0005fa5:	5b                   	pop    ebx
c0005fa6:	5e                   	pop    esi
c0005fa7:	5f                   	pop    edi
c0005fa8:	5d                   	pop    ebp
c0005fa9:	c3                   	ret    

c0005faa <f_opendir>:
c0005faa:	56                   	push   esi
c0005fab:	b8 09 00 00 00       	mov    eax,0x9
c0005fb0:	53                   	push   ebx
c0005fb1:	83 ec 24             	sub    esp,0x24
c0005fb4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0005fb8:	85 db                	test   ebx,ebx
c0005fba:	0f 84 e6 00 00 00    	je     c00060a6 <f_opendir+0xfc>
c0005fc0:	31 c9                	xor    ecx,ecx
c0005fc2:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0005fc6:	8d 44 24 34          	lea    eax,[esp+0x34]
c0005fca:	e8 03 c7 ff ff       	call   c00026d2 <mount_volume>
c0005fcf:	85 c0                	test   eax,eax
c0005fd1:	0f 85 c9 00 00 00    	jne    c00060a0 <f_opendir+0xf6>
c0005fd7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0005fdb:	83 ec 0c             	sub    esp,0xc
c0005fde:	89 03                	mov    DWORD PTR [ebx],eax
c0005fe0:	68 60 04 00 00       	push   0x460
c0005fe5:	e8 8b 24 00 00       	call   c0008475 <ff_memalloc>
c0005fea:	83 c4 10             	add    esp,0x10
c0005fed:	89 c6                	mov    esi,eax
c0005fef:	b8 11 00 00 00       	mov    eax,0x11
c0005ff4:	85 f6                	test   esi,esi
c0005ff6:	0f 84 aa 00 00 00    	je     c00060a6 <f_opendir+0xfc>
c0005ffc:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006000:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006006:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006009:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000600c:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0006010:	89 d8                	mov    eax,ebx
c0006012:	e8 31 ee ff ff       	call   c0004e48 <follow_path>
c0006017:	85 c0                	test   eax,eax
c0006019:	75 61                	jne    c000607c <f_opendir+0xd2>
c000601b:	80 7b 47 00          	cmp    BYTE PTR [ebx+0x47],0x0
c000601f:	78 46                	js     c0006067 <f_opendir+0xbd>
c0006021:	b8 05 00 00 00       	mov    eax,0x5
c0006026:	f6 43 06 10          	test   BYTE PTR [ebx+0x6],0x10
c000602a:	74 50                	je     c000607c <f_opendir+0xd2>
c000602c:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006030:	8a 01                	mov    al,BYTE PTR [ecx]
c0006032:	3c 04                	cmp    al,0x4
c0006034:	75 26                	jne    c000605c <f_opendir+0xb2>
c0006036:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0006039:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c000603c:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000603f:	30 d2                	xor    dl,dl
c0006041:	0f b6 43 07          	movzx  eax,BYTE PTR [ebx+0x7]
c0006045:	09 c2                	or     edx,eax
c0006047:	8b 43 48             	mov    eax,DWORD PTR [ebx+0x48]
c000604a:	89 53 20             	mov    DWORD PTR [ebx+0x20],edx
c000604d:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0006050:	89 da                	mov    edx,ebx
c0006052:	8d 41 10             	lea    eax,[ecx+0x10]
c0006055:	e8 b4 ed ff ff       	call   c0004e0e <init_alloc_info.isra.2>
c000605a:	eb 0b                	jmp    c0006067 <f_opendir+0xbd>
c000605c:	8b 53 38             	mov    edx,DWORD PTR [ebx+0x38]
c000605f:	e8 59 ed ff ff       	call   c0004dbd <ld_clust.isra.0>
c0006064:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0006067:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000606b:	31 d2                	xor    edx,edx
c000606d:	66 8b 40 06          	mov    ax,WORD PTR [eax+0x6]
c0006071:	66 89 43 04          	mov    WORD PTR [ebx+0x4],ax
c0006075:	89 d8                	mov    eax,ebx
c0006077:	e8 22 d1 ff ff       	call   c000319e <dir_sdi>
c000607c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006080:	83 ec 0c             	sub    esp,0xc
c0006083:	56                   	push   esi
c0006084:	e8 02 24 00 00       	call   c000848b <ff_memfree>
c0006089:	83 c4 10             	add    esp,0x10
c000608c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006090:	83 f8 04             	cmp    eax,0x4
c0006093:	74 06                	je     c000609b <f_opendir+0xf1>
c0006095:	85 c0                	test   eax,eax
c0006097:	74 0d                	je     c00060a6 <f_opendir+0xfc>
c0006099:	eb 05                	jmp    c00060a0 <f_opendir+0xf6>
c000609b:	b8 05 00 00 00       	mov    eax,0x5
c00060a0:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060a6:	83 c4 24             	add    esp,0x24
c00060a9:	5b                   	pop    ebx
c00060aa:	5e                   	pop    esi
c00060ab:	c3                   	ret    

c00060ac <f_closedir>:
c00060ac:	53                   	push   ebx
c00060ad:	83 ec 18             	sub    esp,0x18
c00060b0:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00060b4:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00060b8:	89 d8                	mov    eax,ebx
c00060ba:	e8 86 c2 ff ff       	call   c0002345 <validate>
c00060bf:	85 c0                	test   eax,eax
c00060c1:	75 06                	jne    c00060c9 <f_closedir+0x1d>
c00060c3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00060c9:	83 c4 18             	add    esp,0x18
c00060cc:	5b                   	pop    ebx
c00060cd:	c3                   	ret    

c00060ce <f_readdir>:
c00060ce:	57                   	push   edi
c00060cf:	56                   	push   esi
c00060d0:	53                   	push   ebx
c00060d1:	83 ec 20             	sub    esp,0x20
c00060d4:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00060d8:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c00060dc:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00060e0:	89 d8                	mov    eax,ebx
c00060e2:	e8 5e c2 ff ff       	call   c0002345 <validate>
c00060e7:	85 c0                	test   eax,eax
c00060e9:	75 77                	jne    c0006162 <f_readdir+0x94>
c00060eb:	85 ff                	test   edi,edi
c00060ed:	75 0b                	jne    c00060fa <f_readdir+0x2c>
c00060ef:	31 d2                	xor    edx,edx
c00060f1:	89 d8                	mov    eax,ebx
c00060f3:	e8 a6 d0 ff ff       	call   c000319e <dir_sdi>
c00060f8:	eb 68                	jmp    c0006162 <f_readdir+0x94>
c00060fa:	83 ec 0c             	sub    esp,0xc
c00060fd:	68 60 04 00 00       	push   0x460
c0006102:	e8 6e 23 00 00       	call   c0008475 <ff_memalloc>
c0006107:	83 c4 10             	add    esp,0x10
c000610a:	89 c6                	mov    esi,eax
c000610c:	b8 11 00 00 00       	mov    eax,0x11
c0006111:	85 f6                	test   esi,esi
c0006113:	74 4d                	je     c0006162 <f_readdir+0x94>
c0006115:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006119:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c000611f:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006122:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006125:	31 d2                	xor    edx,edx
c0006127:	89 d8                	mov    eax,ebx
c0006129:	e8 80 d8 ff ff       	call   c00039ae <dir_read>
c000612e:	a9 fb ff ff ff       	test   eax,0xfffffffb
c0006133:	75 19                	jne    c000614e <f_readdir+0x80>
c0006135:	89 fa                	mov    edx,edi
c0006137:	89 d8                	mov    eax,ebx
c0006139:	e8 7e ea ff ff       	call   c0004bbc <get_fileinfo>
c000613e:	31 d2                	xor    edx,edx
c0006140:	89 d8                	mov    eax,ebx
c0006142:	e8 af d5 ff ff       	call   c00036f6 <dir_next>
c0006147:	83 f8 04             	cmp    eax,0x4
c000614a:	75 02                	jne    c000614e <f_readdir+0x80>
c000614c:	31 c0                	xor    eax,eax
c000614e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006152:	83 ec 0c             	sub    esp,0xc
c0006155:	56                   	push   esi
c0006156:	e8 30 23 00 00       	call   c000848b <ff_memfree>
c000615b:	83 c4 10             	add    esp,0x10
c000615e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006162:	83 c4 20             	add    esp,0x20
c0006165:	5b                   	pop    ebx
c0006166:	5e                   	pop    esi
c0006167:	5f                   	pop    edi
c0006168:	c3                   	ret    

c0006169 <f_stat>:
c0006169:	57                   	push   edi
c000616a:	31 c9                	xor    ecx,ecx
c000616c:	56                   	push   esi
c000616d:	53                   	push   ebx
c000616e:	83 ec 50             	sub    esp,0x50
c0006171:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c0006175:	8d 54 24 04          	lea    edx,[esp+0x4]
c0006179:	8d 44 24 60          	lea    eax,[esp+0x60]
c000617d:	e8 50 c5 ff ff       	call   c00026d2 <mount_volume>
c0006182:	89 c3                	mov    ebx,eax
c0006184:	85 c0                	test   eax,eax
c0006186:	75 67                	jne    c00061ef <f_stat+0x86>
c0006188:	83 ec 0c             	sub    esp,0xc
c000618b:	bb 11 00 00 00       	mov    ebx,0x11
c0006190:	68 60 04 00 00       	push   0x460
c0006195:	e8 db 22 00 00       	call   c0008475 <ff_memalloc>
c000619a:	83 c4 10             	add    esp,0x10
c000619d:	89 c6                	mov    esi,eax
c000619f:	85 c0                	test   eax,eax
c00061a1:	74 4c                	je     c00061ef <f_stat+0x86>
c00061a3:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00061a7:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c00061ad:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c00061b0:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00061b3:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c00061b7:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061bb:	e8 88 ec ff ff       	call   c0004e48 <follow_path>
c00061c0:	89 c3                	mov    ebx,eax
c00061c2:	85 c0                	test   eax,eax
c00061c4:	75 1d                	jne    c00061e3 <f_stat+0x7a>
c00061c6:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c00061cb:	78 11                	js     c00061de <f_stat+0x75>
c00061cd:	85 ff                	test   edi,edi
c00061cf:	74 12                	je     c00061e3 <f_stat+0x7a>
c00061d1:	89 fa                	mov    edx,edi
c00061d3:	8d 44 24 04          	lea    eax,[esp+0x4]
c00061d7:	e8 e0 e9 ff ff       	call   c0004bbc <get_fileinfo>
c00061dc:	eb 05                	jmp    c00061e3 <f_stat+0x7a>
c00061de:	bb 06 00 00 00       	mov    ebx,0x6
c00061e3:	83 ec 0c             	sub    esp,0xc
c00061e6:	56                   	push   esi
c00061e7:	e8 9f 22 00 00       	call   c000848b <ff_memfree>
c00061ec:	83 c4 10             	add    esp,0x10
c00061ef:	83 c4 50             	add    esp,0x50
c00061f2:	89 d8                	mov    eax,ebx
c00061f4:	5b                   	pop    ebx
c00061f5:	5e                   	pop    esi
c00061f6:	5f                   	pop    edi
c00061f7:	c3                   	ret    

c00061f8 <f_getfree>:
c00061f8:	55                   	push   ebp
c00061f9:	31 c9                	xor    ecx,ecx
c00061fb:	57                   	push   edi
c00061fc:	56                   	push   esi
c00061fd:	53                   	push   ebx
c00061fe:	83 ec 5c             	sub    esp,0x5c
c0006201:	8d 54 24 24          	lea    edx,[esp+0x24]
c0006205:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006209:	e8 c4 c4 ff ff       	call   c00026d2 <mount_volume>
c000620e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006212:	85 c0                	test   eax,eax
c0006214:	0f 85 9d 01 00 00    	jne    c00063b7 <f_getfree+0x1bf>
c000621a:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000621e:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0006222:	89 02                	mov    DWORD PTR [edx],eax
c0006224:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
c0006227:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c000622a:	8d 71 fe             	lea    esi,[ecx-0x2]
c000622d:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0006231:	39 f2                	cmp    edx,esi
c0006233:	77 0b                	ja     c0006240 <f_getfree+0x48>
c0006235:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0006239:	89 10                	mov    DWORD PTR [eax],edx
c000623b:	e9 77 01 00 00       	jmp    c00063b7 <f_getfree+0x1bf>
c0006240:	8a 10                	mov    dl,BYTE PTR [eax]
c0006242:	80 fa 01             	cmp    dl,0x1
c0006245:	75 3a                	jne    c0006281 <f_getfree+0x89>
c0006247:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000624b:	be 02 00 00 00       	mov    esi,0x2
c0006250:	31 db                	xor    ebx,ebx
c0006252:	89 f2                	mov    edx,esi
c0006254:	8d 44 24 28          	lea    eax,[esp+0x28]
c0006258:	e8 4b cd ff ff       	call   c0002fa8 <get_fat>
c000625d:	83 f8 ff             	cmp    eax,0xffffffff
c0006260:	0f 84 28 01 00 00    	je     c000638e <f_getfree+0x196>
c0006266:	83 f8 01             	cmp    eax,0x1
c0006269:	0f 84 29 01 00 00    	je     c0006398 <f_getfree+0x1a0>
c000626f:	83 d3 00             	adc    ebx,0x0
c0006272:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0006276:	46                   	inc    esi
c0006277:	39 70 1c             	cmp    DWORD PTR [eax+0x1c],esi
c000627a:	77 d6                	ja     c0006252 <f_getfree+0x5a>
c000627c:	e9 25 01 00 00       	jmp    c00063a6 <f_getfree+0x1ae>
c0006281:	80 fa 04             	cmp    dl,0x4
c0006284:	0f 85 88 00 00 00    	jne    c0006312 <f_getfree+0x11a>
c000628a:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
c000628d:	31 ed                	xor    ebp,ebp
c000628f:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c0006292:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0006296:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000629a:	31 db                	xor    ebx,ebx
c000629c:	85 ed                	test   ebp,ebp
c000629e:	75 3f                	jne    c00062df <f_getfree+0xe7>
c00062a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00062a4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00062a8:	83 c0 01             	add    eax,0x1
c00062ab:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00062af:	83 d2 00             	adc    edx,0x0
c00062b2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00062b6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00062ba:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00062c2:	e8 59 c1 ff ff       	call   c0002420 <move_window>
c00062c7:	85 c0                	test   eax,eax
c00062c9:	0f 85 d3 00 00 00    	jne    c00063a2 <f_getfree+0x1aa>
c00062cf:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00062d3:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00062d7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00062db:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00062df:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00062e3:	8d 4e f8             	lea    ecx,[esi-0x8]
c00062e6:	8a 44 28 54          	mov    al,BYTE PTR [eax+ebp*1+0x54]
c00062ea:	89 cf                	mov    edi,ecx
c00062ec:	85 f6                	test   esi,esi
c00062ee:	74 12                	je     c0006302 <f_getfree+0x10a>
c00062f0:	88 c1                	mov    cl,al
c00062f2:	83 e1 01             	and    ecx,0x1
c00062f5:	80 f9 01             	cmp    cl,0x1
c00062f8:	83 d3 00             	adc    ebx,0x0
c00062fb:	d0 e8                	shr    al,1
c00062fd:	4e                   	dec    esi
c00062fe:	39 fe                	cmp    esi,edi
c0006300:	75 ea                	jne    c00062ec <f_getfree+0xf4>
c0006302:	45                   	inc    ebp
c0006303:	81 e5 ff 01 00 00    	and    ebp,0x1ff
c0006309:	85 f6                	test   esi,esi
c000630b:	75 8f                	jne    c000629c <f_getfree+0xa4>
c000630d:	e9 94 00 00 00       	jmp    c00063a6 <f_getfree+0x1ae>
c0006312:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0006315:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0006318:	31 f6                	xor    esi,esi
c000631a:	31 db                	xor    ebx,ebx
c000631c:	85 f6                	test   esi,esi
c000631e:	75 1b                	jne    c000633b <f_getfree+0x143>
c0006320:	89 d7                	mov    edi,edx
c0006322:	89 cd                	mov    ebp,ecx
c0006324:	83 c7 01             	add    edi,0x1
c0006327:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000632b:	83 d5 00             	adc    ebp,0x0
c000632e:	e8 ed c0 ff ff       	call   c0002420 <move_window>
c0006333:	85 c0                	test   eax,eax
c0006335:	75 6b                	jne    c00063a2 <f_getfree+0x1aa>
c0006337:	89 fa                	mov    edx,edi
c0006339:	89 e9                	mov    ecx,ebp
c000633b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000633f:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0006343:	8d 44 30 54          	lea    eax,[eax+esi*1+0x54]
c0006347:	80 3f 02             	cmp    BYTE PTR [edi],0x2
c000634a:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000634e:	89 4c 24 1c          	mov    DWORD PTR [esp+0x1c],ecx
c0006352:	75 11                	jne    c0006365 <f_getfree+0x16d>
c0006354:	e8 e9 b8 ff ff       	call   c0001c42 <ld_word>
c0006359:	66 83 f8 01          	cmp    ax,0x1
c000635d:	83 d3 00             	adc    ebx,0x0
c0006360:	83 c6 02             	add    esi,0x2
c0006363:	eb 13                	jmp    c0006378 <f_getfree+0x180>
c0006365:	e8 e5 b8 ff ff       	call   c0001c4f <ld_dword>
c000636a:	25 ff ff ff 0f       	and    eax,0xfffffff
c000636f:	83 f8 01             	cmp    eax,0x1
c0006372:	83 d3 00             	adc    ebx,0x0
c0006375:	83 c6 04             	add    esi,0x4
c0006378:	81 e6 ff 01 00 00    	and    esi,0x1ff
c000637e:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0006382:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0006386:	ff 4c 24 10          	dec    DWORD PTR [esp+0x10]
c000638a:	75 90                	jne    c000631c <f_getfree+0x124>
c000638c:	eb 18                	jmp    c00063a6 <f_getfree+0x1ae>
c000638e:	c7 44 24 0c 01 00 00 00 	mov    DWORD PTR [esp+0xc],0x1
c0006396:	eb 0e                	jmp    c00063a6 <f_getfree+0x1ae>
c0006398:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00063a0:	eb 04                	jmp    c00063a6 <f_getfree+0x1ae>
c00063a2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00063a6:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c00063aa:	89 18                	mov    DWORD PTR [eax],ebx
c00063ac:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00063b0:	89 58 18             	mov    DWORD PTR [eax+0x18],ebx
c00063b3:	80 48 04 01          	or     BYTE PTR [eax+0x4],0x1
c00063b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00063bb:	83 c4 5c             	add    esp,0x5c
c00063be:	5b                   	pop    ebx
c00063bf:	5e                   	pop    esi
c00063c0:	5f                   	pop    edi
c00063c1:	5d                   	pop    ebp
c00063c2:	c3                   	ret    

c00063c3 <f_truncate>:
c00063c3:	56                   	push   esi
c00063c4:	53                   	push   ebx
c00063c5:	83 ec 14             	sub    esp,0x14
c00063c8:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00063cc:	8d 54 24 0c          	lea    edx,[esp+0xc]
c00063d0:	89 d8                	mov    eax,ebx
c00063d2:	e8 6e bf ff ff       	call   c0002345 <validate>
c00063d7:	89 c6                	mov    esi,eax
c00063d9:	85 c0                	test   eax,eax
c00063db:	0f 85 d2 00 00 00    	jne    c00064b3 <f_truncate+0xf0>
c00063e1:	0f b6 73 29          	movzx  esi,BYTE PTR [ebx+0x29]
c00063e5:	85 f6                	test   esi,esi
c00063e7:	0f 85 c6 00 00 00    	jne    c00064b3 <f_truncate+0xf0>
c00063ed:	f6 43 28 02          	test   BYTE PTR [ebx+0x28],0x2
c00063f1:	0f 84 b7 00 00 00    	je     c00064ae <f_truncate+0xeb>
c00063f7:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00063fa:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00063fd:	3b 43 0c             	cmp    eax,DWORD PTR [ebx+0xc]
c0006400:	89 d1                	mov    ecx,edx
c0006402:	1b 4b 10             	sbb    ecx,DWORD PTR [ebx+0x10]
c0006405:	0f 83 a8 00 00 00    	jae    c00064b3 <f_truncate+0xf0>
c000640b:	09 c2                	or     edx,eax
c000640d:	75 15                	jne    c0006424 <f_truncate+0x61>
c000640f:	8b 53 08             	mov    edx,DWORD PTR [ebx+0x8]
c0006412:	31 c9                	xor    ecx,ecx
c0006414:	89 d8                	mov    eax,ebx
c0006416:	e8 7a d0 ff ff       	call   c0003495 <remove_chain>
c000641b:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0006422:	eb 35                	jmp    c0006459 <f_truncate+0x96>
c0006424:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0006427:	89 d8                	mov    eax,ebx
c0006429:	e8 7a cb ff ff       	call   c0002fa8 <get_fat>
c000642e:	89 c2                	mov    edx,eax
c0006430:	b8 01 00 00 00       	mov    eax,0x1
c0006435:	83 fa ff             	cmp    edx,0xffffffff
c0006438:	74 1f                	je     c0006459 <f_truncate+0x96>
c000643a:	b8 02 00 00 00       	mov    eax,0x2
c000643f:	83 fa 01             	cmp    edx,0x1
c0006442:	74 15                	je     c0006459 <f_truncate+0x96>
c0006444:	31 c0                	xor    eax,eax
c0006446:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000644a:	39 51 1c             	cmp    DWORD PTR [ecx+0x1c],edx
c000644d:	76 0a                	jbe    c0006459 <f_truncate+0x96>
c000644f:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c0006452:	89 d8                	mov    eax,ebx
c0006454:	e8 3c d0 ff ff       	call   c0003495 <remove_chain>
c0006459:	8b 53 2c             	mov    edx,DWORD PTR [ebx+0x2c]
c000645c:	8b 4b 30             	mov    ecx,DWORD PTR [ebx+0x30]
c000645f:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0006462:	89 4b 10             	mov    DWORD PTR [ebx+0x10],ecx
c0006465:	8a 53 28             	mov    dl,BYTE PTR [ebx+0x28]
c0006468:	83 ca 40             	or     edx,0x40
c000646b:	85 c0                	test   eax,eax
c000646d:	88 53 28             	mov    BYTE PTR [ebx+0x28],dl
c0006470:	75 35                	jne    c00064a7 <f_truncate+0xe4>
c0006472:	84 d2                	test   dl,dl
c0006474:	79 3d                	jns    c00064b3 <f_truncate+0xf0>
c0006476:	83 ec 0c             	sub    esp,0xc
c0006479:	8d 43 50             	lea    eax,[ebx+0x50]
c000647c:	6a 01                	push   0x1
c000647e:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0006481:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0006484:	50                   	push   eax
c0006485:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0006489:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c000648d:	50                   	push   eax
c000648e:	e8 7a b7 ff ff       	call   c0001c0d <disk_write>
c0006493:	83 c4 20             	add    esp,0x20
c0006496:	85 c0                	test   eax,eax
c0006498:	75 08                	jne    c00064a2 <f_truncate+0xdf>
c000649a:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000649e:	31 f6                	xor    esi,esi
c00064a0:	eb 11                	jmp    c00064b3 <f_truncate+0xf0>
c00064a2:	b8 01 00 00 00       	mov    eax,0x1
c00064a7:	88 43 29             	mov    BYTE PTR [ebx+0x29],al
c00064aa:	89 c6                	mov    esi,eax
c00064ac:	eb 05                	jmp    c00064b3 <f_truncate+0xf0>
c00064ae:	be 07 00 00 00       	mov    esi,0x7
c00064b3:	89 f0                	mov    eax,esi
c00064b5:	83 c4 14             	add    esp,0x14
c00064b8:	5b                   	pop    ebx
c00064b9:	5e                   	pop    esi
c00064ba:	c3                   	ret    

c00064bb <f_unlink>:
c00064bb:	56                   	push   esi
c00064bc:	b9 02 00 00 00       	mov    ecx,0x2
c00064c1:	53                   	push   ebx
c00064c2:	81 ec e4 00 00 00    	sub    esp,0xe4
c00064c8:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00064cc:	8d 84 24 f0 00 00 00 	lea    eax,[esp+0xf0]
c00064d3:	e8 fa c1 ff ff       	call   c00026d2 <mount_volume>
c00064d8:	85 c0                	test   eax,eax
c00064da:	0f 85 55 01 00 00    	jne    c0006635 <f_unlink+0x17a>
c00064e0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00064e4:	83 ec 0c             	sub    esp,0xc
c00064e7:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c00064eb:	68 60 04 00 00       	push   0x460
c00064f0:	e8 80 1f 00 00       	call   c0008475 <ff_memalloc>
c00064f5:	83 c4 10             	add    esp,0x10
c00064f8:	89 c3                	mov    ebx,eax
c00064fa:	b8 11 00 00 00       	mov    eax,0x11
c00064ff:	85 db                	test   ebx,ebx
c0006501:	0f 84 2e 01 00 00    	je     c0006635 <f_unlink+0x17a>
c0006507:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000650b:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006511:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006514:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006517:	8b 94 24 f0 00 00 00 	mov    edx,DWORD PTR [esp+0xf0]
c000651e:	8d 44 24 48          	lea    eax,[esp+0x48]
c0006522:	e8 21 e9 ff ff       	call   c0004e48 <follow_path>
c0006527:	85 c0                	test   eax,eax
c0006529:	0f 85 f2 00 00 00    	jne    c0006621 <f_unlink+0x166>
c000652f:	b8 06 00 00 00       	mov    eax,0x6
c0006534:	80 bc 24 8f 00 00 00 00 	cmp    BYTE PTR [esp+0x8f],0x0
c000653c:	0f 88 df 00 00 00    	js     c0006621 <f_unlink+0x166>
c0006542:	f6 44 24 4e 01       	test   BYTE PTR [esp+0x4e],0x1
c0006547:	74 0a                	je     c0006553 <f_unlink+0x98>
c0006549:	b8 07 00 00 00       	mov    eax,0x7
c000654e:	e9 ce 00 00 00       	jmp    c0006621 <f_unlink+0x166>
c0006553:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0006557:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000655b:	8a 02                	mov    al,BYTE PTR [edx]
c000655d:	3c 04                	cmp    al,0x4
c000655f:	75 12                	jne    c0006573 <f_unlink+0xb8>
c0006561:	8d 42 10             	lea    eax,[edx+0x10]
c0006564:	8d 54 24 20          	lea    edx,[esp+0x20]
c0006568:	e8 a1 e8 ff ff       	call   c0004e0e <init_alloc_info.isra.2>
c000656d:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0006571:	eb 0e                	jmp    c0006581 <f_unlink+0xc6>
c0006573:	8b 94 24 80 00 00 00 	mov    edx,DWORD PTR [esp+0x80]
c000657a:	e8 3e e8 ff ff       	call   c0004dbd <ld_clust.isra.0>
c000657f:	89 c6                	mov    esi,eax
c0006581:	f6 44 24 4e 10       	test   BYTE PTR [esp+0x4e],0x10
c0006586:	75 12                	jne    c000659a <f_unlink+0xdf>
c0006588:	8d 44 24 48          	lea    eax,[esp+0x48]
c000658c:	e8 94 d6 ff ff       	call   c0003c25 <dir_remove>
c0006591:	85 c0                	test   eax,eax
c0006593:	74 6c                	je     c0006601 <f_unlink+0x146>
c0006595:	e9 87 00 00 00       	jmp    c0006621 <f_unlink+0x166>
c000659a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c000659e:	89 b4 24 9c 00 00 00 	mov    DWORD PTR [esp+0x9c],esi
c00065a5:	89 84 24 94 00 00 00 	mov    DWORD PTR [esp+0x94],eax
c00065ac:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00065af:	75 21                	jne    c00065d2 <f_unlink+0x117>
c00065b1:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00065b5:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00065b9:	89 84 24 a0 00 00 00 	mov    DWORD PTR [esp+0xa0],eax
c00065c0:	89 94 24 a4 00 00 00 	mov    DWORD PTR [esp+0xa4],edx
c00065c7:	8a 44 24 27          	mov    al,BYTE PTR [esp+0x27]
c00065cb:	88 84 24 9b 00 00 00 	mov    BYTE PTR [esp+0x9b],al
c00065d2:	31 d2                	xor    edx,edx
c00065d4:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065db:	e8 be cb ff ff       	call   c000319e <dir_sdi>
c00065e0:	85 c0                	test   eax,eax
c00065e2:	75 3d                	jne    c0006621 <f_unlink+0x166>
c00065e4:	31 d2                	xor    edx,edx
c00065e6:	8d 84 24 94 00 00 00 	lea    eax,[esp+0x94]
c00065ed:	e8 bc d3 ff ff       	call   c00039ae <dir_read>
c00065f2:	85 c0                	test   eax,eax
c00065f4:	0f 84 4f ff ff ff    	je     c0006549 <f_unlink+0x8e>
c00065fa:	83 f8 04             	cmp    eax,0x4
c00065fd:	75 22                	jne    c0006621 <f_unlink+0x166>
c00065ff:	eb 87                	jmp    c0006588 <f_unlink+0xcd>
c0006601:	85 f6                	test   esi,esi
c0006603:	75 0b                	jne    c0006610 <f_unlink+0x155>
c0006605:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0006609:	e8 3d df ff ff       	call   c000454b <sync_fs>
c000660e:	eb 11                	jmp    c0006621 <f_unlink+0x166>
c0006610:	31 c9                	xor    ecx,ecx
c0006612:	89 f2                	mov    edx,esi
c0006614:	8d 44 24 20          	lea    eax,[esp+0x20]
c0006618:	e8 78 ce ff ff       	call   c0003495 <remove_chain>
c000661d:	85 c0                	test   eax,eax
c000661f:	74 e4                	je     c0006605 <f_unlink+0x14a>
c0006621:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006625:	83 ec 0c             	sub    esp,0xc
c0006628:	53                   	push   ebx
c0006629:	e8 5d 1e 00 00       	call   c000848b <ff_memfree>
c000662e:	83 c4 10             	add    esp,0x10
c0006631:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006635:	81 c4 e4 00 00 00    	add    esp,0xe4
c000663b:	5b                   	pop    ebx
c000663c:	5e                   	pop    esi
c000663d:	c3                   	ret    

c000663e <f_mkdir>:
c000663e:	57                   	push   edi
c000663f:	b9 02 00 00 00       	mov    ecx,0x2
c0006644:	56                   	push   esi
c0006645:	53                   	push   ebx
c0006646:	83 c4 80             	add    esp,0xffffff80
c0006649:	8d 54 24 08          	lea    edx,[esp+0x8]
c000664d:	8d 84 24 90 00 00 00 	lea    eax,[esp+0x90]
c0006654:	e8 79 c0 ff ff       	call   c00026d2 <mount_volume>
c0006659:	89 c3                	mov    ebx,eax
c000665b:	85 c0                	test   eax,eax
c000665d:	0f 85 fe 01 00 00    	jne    c0006861 <f_mkdir+0x223>
c0006663:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006667:	bb 11 00 00 00       	mov    ebx,0x11
c000666c:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0006670:	83 ec 0c             	sub    esp,0xc
c0006673:	68 60 04 00 00       	push   0x460
c0006678:	e8 f8 1d 00 00       	call   c0008475 <ff_memalloc>
c000667d:	83 c4 10             	add    esp,0x10
c0006680:	89 c7                	mov    edi,eax
c0006682:	85 c0                	test   eax,eax
c0006684:	0f 84 d7 01 00 00    	je     c0006861 <f_mkdir+0x223>
c000668a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000668e:	8d 97 00 02 00 00    	lea    edx,[edi+0x200]
c0006694:	89 78 0c             	mov    DWORD PTR [eax+0xc],edi
c0006697:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000669a:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c00066a1:	8d 44 24 34          	lea    eax,[esp+0x34]
c00066a5:	e8 9e e7 ff ff       	call   c0004e48 <follow_path>
c00066aa:	89 c3                	mov    ebx,eax
c00066ac:	85 c0                	test   eax,eax
c00066ae:	74 3e                	je     c00066ee <f_mkdir+0xb0>
c00066b0:	83 f8 04             	cmp    eax,0x4
c00066b3:	75 3e                	jne    c00066f3 <f_mkdir+0xb5>
c00066b5:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00066b9:	31 d2                	xor    edx,edx
c00066bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00066bf:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066c3:	e8 ce cb ff ff       	call   c0003296 <create_chain>
c00066c8:	89 c6                	mov    esi,eax
c00066ca:	85 c0                	test   eax,eax
c00066cc:	74 0c                	je     c00066da <f_mkdir+0x9c>
c00066ce:	bb 02 00 00 00       	mov    ebx,0x2
c00066d3:	83 f8 01             	cmp    eax,0x1
c00066d6:	74 07                	je     c00066df <f_mkdir+0xa1>
c00066d8:	eb 2a                	jmp    c0006704 <f_mkdir+0xc6>
c00066da:	bb 07 00 00 00       	mov    ebx,0x7
c00066df:	31 c9                	xor    ecx,ecx
c00066e1:	89 f2                	mov    edx,esi
c00066e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00066e7:	e8 a9 cd ff ff       	call   c0003495 <remove_chain>
c00066ec:	eb 05                	jmp    c00066f3 <f_mkdir+0xb5>
c00066ee:	bb 08 00 00 00       	mov    ebx,0x8
c00066f3:	83 ec 0c             	sub    esp,0xc
c00066f6:	57                   	push   edi
c00066f7:	e8 8f 1d 00 00       	call   c000848b <ff_memfree>
c00066fc:	83 c4 10             	add    esp,0x10
c00066ff:	e9 5d 01 00 00       	jmp    c0006861 <f_mkdir+0x223>
c0006704:	bb 01 00 00 00       	mov    ebx,0x1
c0006709:	83 f8 ff             	cmp    eax,0xffffffff
c000670c:	74 d1                	je     c00066df <f_mkdir+0xa1>
c000670e:	89 f2                	mov    edx,esi
c0006710:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006714:	e8 c4 ce ff ff       	call   c00035dd <dir_clear>
c0006719:	89 c3                	mov    ebx,eax
c000671b:	85 c0                	test   eax,eax
c000671d:	75 c0                	jne    c00066df <f_mkdir+0xa1>
c000671f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006723:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006726:	74 69                	je     c0006791 <f_mkdir+0x153>
c0006728:	b9 0b 00 00 00       	mov    ecx,0xb
c000672d:	83 c0 54             	add    eax,0x54
c0006730:	ba 20 00 00 00       	mov    edx,0x20
c0006735:	e8 9c b5 ff ff       	call   c0001cd6 <mem_set>
c000673a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000673e:	ba 00 00 21 50       	mov    edx,0x50210000
c0006743:	c6 40 54 2e          	mov    BYTE PTR [eax+0x54],0x2e
c0006747:	c6 40 5f 10          	mov    BYTE PTR [eax+0x5f],0x10
c000674b:	83 c0 6a             	add    eax,0x6a
c000674e:	e8 65 b5 ff ff       	call   c0001cb8 <st_dword>
c0006753:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006757:	89 f1                	mov    ecx,esi
c0006759:	8d 50 54             	lea    edx,[eax+0x54]
c000675c:	e8 85 e6 ff ff       	call   c0004de6 <st_clust.isra.1>
c0006761:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006765:	b9 20 00 00 00       	mov    ecx,0x20
c000676a:	8d 50 54             	lea    edx,[eax+0x54]
c000676d:	83 c0 74             	add    eax,0x74
c0006770:	e8 4c b5 ff ff       	call   c0001cc1 <mem_cpy>
c0006775:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006779:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c000677d:	c6 40 75 2e          	mov    BYTE PTR [eax+0x75],0x2e
c0006781:	8d 50 74             	lea    edx,[eax+0x74]
c0006784:	e8 5d e6 ff ff       	call   c0004de6 <st_clust.isra.1>
c0006789:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000678d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006791:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006795:	e8 2f db ff ff       	call   c00042c9 <dir_register>
c000679a:	89 c3                	mov    ebx,eax
c000679c:	85 c0                	test   eax,eax
c000679e:	0f 85 3b ff ff ff    	jne    c00066df <f_mkdir+0xa1>
c00067a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067a8:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00067ab:	75 74                	jne    c0006821 <f_mkdir+0x1e3>
c00067ad:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067b0:	ba 00 00 21 50       	mov    edx,0x50210000
c00067b5:	83 c0 0c             	add    eax,0xc
c00067b8:	e8 fb b4 ff ff       	call   c0001cb8 <st_dword>
c00067bd:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067c1:	89 f2                	mov    edx,esi
c00067c3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067c6:	83 c0 34             	add    eax,0x34
c00067c9:	e8 ea b4 ff ff       	call   c0001cb8 <st_dword>
c00067ce:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067d2:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067d6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067d9:	c1 e2 09             	shl    edx,0x9
c00067dc:	83 c0 38             	add    eax,0x38
c00067df:	e8 d4 b4 ff ff       	call   c0001cb8 <st_dword>
c00067e4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067e8:	0f b7 50 0a          	movzx  edx,WORD PTR [eax+0xa]
c00067ec:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00067ef:	c1 e2 09             	shl    edx,0x9
c00067f2:	83 c0 28             	add    eax,0x28
c00067f5:	e8 be b4 ff ff       	call   c0001cb8 <st_dword>
c00067fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00067fe:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0006801:	c6 42 21 03          	mov    BYTE PTR [edx+0x21],0x3
c0006805:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006808:	c6 40 04 10          	mov    BYTE PTR [eax+0x4],0x10
c000680c:	8d 44 24 34          	lea    eax,[esp+0x34]
c0006810:	e8 8b d3 ff ff       	call   c0003ba0 <store_xdir>
c0006815:	89 c3                	mov    ebx,eax
c0006817:	85 c0                	test   eax,eax
c0006819:	0f 85 d4 fe ff ff    	jne    c00066f3 <f_mkdir+0xb5>
c000681f:	eb 30                	jmp    c0006851 <f_mkdir+0x213>
c0006821:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006825:	ba 00 00 21 50       	mov    edx,0x50210000
c000682a:	83 c0 16             	add    eax,0x16
c000682d:	e8 86 b4 ff ff       	call   c0001cb8 <st_dword>
c0006832:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006836:	89 f1                	mov    ecx,esi
c0006838:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000683c:	e8 a5 e5 ff ff       	call   c0004de6 <st_clust.isra.1>
c0006841:	8b 44 24 6c          	mov    eax,DWORD PTR [esp+0x6c]
c0006845:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
c0006849:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000684d:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006851:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006855:	e8 f1 dc ff ff       	call   c000454b <sync_fs>
c000685a:	89 c3                	mov    ebx,eax
c000685c:	e9 92 fe ff ff       	jmp    c00066f3 <f_mkdir+0xb5>
c0006861:	83 ec 80             	sub    esp,0xffffff80
c0006864:	89 d8                	mov    eax,ebx
c0006866:	5b                   	pop    ebx
c0006867:	5e                   	pop    esi
c0006868:	5f                   	pop    edi
c0006869:	c3                   	ret    

c000686a <f_rename>:
c000686a:	55                   	push   ebp
c000686b:	57                   	push   edi
c000686c:	56                   	push   esi
c000686d:	53                   	push   ebx
c000686e:	81 ec fc 00 00 00    	sub    esp,0xfc
c0006874:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c000687b:	e8 a4 b9 ff ff       	call   c0002224 <get_ldnumber>
c0006880:	b9 02 00 00 00       	mov    ecx,0x2
c0006885:	8d 54 24 14          	lea    edx,[esp+0x14]
c0006889:	8d 84 24 10 01 00 00 	lea    eax,[esp+0x110]
c0006890:	e8 3d be ff ff       	call   c00026d2 <mount_volume>
c0006895:	85 c0                	test   eax,eax
c0006897:	0f 85 b5 02 00 00    	jne    c0006b52 <f_rename+0x2e8>
c000689d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068a1:	83 ec 0c             	sub    esp,0xc
c00068a4:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c00068a8:	68 60 04 00 00       	push   0x460
c00068ad:	e8 c3 1b 00 00       	call   c0008475 <ff_memalloc>
c00068b2:	83 c4 10             	add    esp,0x10
c00068b5:	89 c3                	mov    ebx,eax
c00068b7:	b8 11 00 00 00       	mov    eax,0x11
c00068bc:	85 db                	test   ebx,ebx
c00068be:	0f 84 8e 02 00 00    	je     c0006b52 <f_rename+0x2e8>
c00068c4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00068c8:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c00068ce:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c00068d1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00068d4:	8b 94 24 10 01 00 00 	mov    edx,DWORD PTR [esp+0x110]
c00068db:	8d 44 24 58          	lea    eax,[esp+0x58]
c00068df:	e8 64 e5 ff ff       	call   c0004e48 <follow_path>
c00068e4:	85 c0                	test   eax,eax
c00068e6:	0f 85 52 02 00 00    	jne    c0006b3e <f_rename+0x2d4>
c00068ec:	b8 06 00 00 00       	mov    eax,0x6
c00068f1:	f6 84 24 9f 00 00 00 a0 	test   BYTE PTR [esp+0x9f],0xa0
c00068f9:	0f 85 3f 02 00 00    	jne    c0006b3e <f_rename+0x2d4>
c00068ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006903:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006906:	0f 85 05 01 00 00    	jne    c0006a11 <f_rename+0x1a7>
c000690c:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c000690f:	b9 40 00 00 00       	mov    ecx,0x40
c0006914:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006918:	e8 a4 b3 ff ff       	call   c0001cc1 <mem_cpy>
c000691d:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006922:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006926:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c000692d:	e8 8f b3 ff ff       	call   c0001cc1 <mem_cpy>
c0006932:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006939:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006940:	e8 03 e5 ff ff       	call   c0004e48 <follow_path>
c0006945:	85 c0                	test   eax,eax
c0006947:	75 29                	jne    c0006972 <f_rename+0x108>
c0006949:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000694d:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006954:	74 0a                	je     c0006960 <f_rename+0xf6>
c0006956:	b8 08 00 00 00       	mov    eax,0x8
c000695b:	e9 de 01 00 00       	jmp    c0006b3e <f_rename+0x2d4>
c0006960:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006967:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c000696e:	75 e6                	jne    c0006956 <f_rename+0xec>
c0006970:	eb 09                	jmp    c000697b <f_rename+0x111>
c0006972:	83 f8 04             	cmp    eax,0x4
c0006975:	0f 85 c3 01 00 00    	jne    c0006b3e <f_rename+0x2d4>
c000697b:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006982:	e8 42 d9 ff ff       	call   c00042c9 <dir_register>
c0006987:	85 c0                	test   eax,eax
c0006989:	0f 85 af 01 00 00    	jne    c0006b3e <f_rename+0x2d4>
c000698f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006993:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
c0006996:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c0006999:	89 c5                	mov    ebp,eax
c000699b:	8a 46 23             	mov    al,BYTE PTR [esi+0x23]
c000699e:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c00069a2:	8d 46 24             	lea    eax,[esi+0x24]
c00069a5:	e8 98 b2 ff ff       	call   c0001c42 <ld_word>
c00069aa:	b9 40 00 00 00       	mov    ecx,0x40
c00069af:	89 c7                	mov    edi,eax
c00069b1:	8d 54 24 18          	lea    edx,[esp+0x18]
c00069b5:	89 f0                	mov    eax,esi
c00069b7:	e8 05 b3 ff ff       	call   c0001cc1 <mem_cpy>
c00069bc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069c0:	89 e9                	mov    ecx,ebp
c00069c2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069c5:	88 48 01             	mov    BYTE PTR [eax+0x1],cl
c00069c8:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c00069cc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069d0:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069d3:	88 4a 23             	mov    BYTE PTR [edx+0x23],cl
c00069d6:	0f b7 d7             	movzx  edx,di
c00069d9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c00069dc:	83 c0 24             	add    eax,0x24
c00069df:	e8 d0 b2 ff ff       	call   c0001cb4 <st_word>
c00069e4:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00069e8:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00069eb:	8a 42 04             	mov    al,BYTE PTR [edx+0x4]
c00069ee:	a8 10                	test   al,0x10
c00069f0:	75 06                	jne    c00069f8 <f_rename+0x18e>
c00069f2:	83 c8 20             	or     eax,0x20
c00069f5:	88 42 04             	mov    BYTE PTR [edx+0x4],al
c00069f8:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c00069ff:	e8 9c d1 ff ff       	call   c0003ba0 <store_xdir>
c0006a04:	85 c0                	test   eax,eax
c0006a06:	0f 84 1c 01 00 00    	je     c0006b28 <f_rename+0x2be>
c0006a0c:	e9 2d 01 00 00       	jmp    c0006b3e <f_rename+0x2d4>
c0006a11:	b9 20 00 00 00       	mov    ecx,0x20
c0006a16:	8b 94 24 90 00 00 00 	mov    edx,DWORD PTR [esp+0x90]
c0006a1d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0006a21:	e8 9b b2 ff ff       	call   c0001cc1 <mem_cpy>
c0006a26:	b9 4c 00 00 00       	mov    ecx,0x4c
c0006a2b:	8d 54 24 58          	lea    edx,[esp+0x58]
c0006a2f:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a36:	e8 86 b2 ff ff       	call   c0001cc1 <mem_cpy>
c0006a3b:	8b 94 24 14 01 00 00 	mov    edx,DWORD PTR [esp+0x114]
c0006a42:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a49:	e8 fa e3 ff ff       	call   c0004e48 <follow_path>
c0006a4e:	85 c0                	test   eax,eax
c0006a50:	75 27                	jne    c0006a79 <f_rename+0x20f>
c0006a52:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0006a56:	39 84 24 ac 00 00 00 	cmp    DWORD PTR [esp+0xac],eax
c0006a5d:	0f 85 f3 fe ff ff    	jne    c0006956 <f_rename+0xec>
c0006a63:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006a6a:	39 84 24 cc 00 00 00 	cmp    DWORD PTR [esp+0xcc],eax
c0006a71:	0f 85 df fe ff ff    	jne    c0006956 <f_rename+0xec>
c0006a77:	eb 09                	jmp    c0006a82 <f_rename+0x218>
c0006a79:	83 f8 04             	cmp    eax,0x4
c0006a7c:	0f 85 bc 00 00 00    	jne    c0006b3e <f_rename+0x2d4>
c0006a82:	8d 84 24 a4 00 00 00 	lea    eax,[esp+0xa4]
c0006a89:	e8 3b d8 ff ff       	call   c00042c9 <dir_register>
c0006a8e:	85 c0                	test   eax,eax
c0006a90:	0f 85 a8 00 00 00    	jne    c0006b3e <f_rename+0x2d4>
c0006a96:	8b b4 24 dc 00 00 00 	mov    esi,DWORD PTR [esp+0xdc]
c0006a9d:	b9 13 00 00 00       	mov    ecx,0x13
c0006aa2:	8d 46 0d             	lea    eax,[esi+0xd]
c0006aa5:	8d 54 24 25          	lea    edx,[esp+0x25]
c0006aa9:	e8 13 b2 ff ff       	call   c0001cc1 <mem_cpy>
c0006aae:	8a 44 24 23          	mov    al,BYTE PTR [esp+0x23]
c0006ab2:	a8 10                	test   al,0x10
c0006ab4:	75 03                	jne    c0006ab9 <f_rename+0x24f>
c0006ab6:	83 c8 20             	or     eax,0x20
c0006ab9:	88 46 0b             	mov    BYTE PTR [esi+0xb],al
c0006abc:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006ac0:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006ac4:	f6 46 0b 10          	test   BYTE PTR [esi+0xb],0x10
c0006ac8:	74 5e                	je     c0006b28 <f_rename+0x2be>
c0006aca:	8b 84 24 ac 00 00 00 	mov    eax,DWORD PTR [esp+0xac]
c0006ad1:	39 44 24 60          	cmp    DWORD PTR [esp+0x60],eax
c0006ad5:	74 51                	je     c0006b28 <f_rename+0x2be>
c0006ad7:	89 f2                	mov    edx,esi
c0006ad9:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0006add:	8a 07                	mov    al,BYTE PTR [edi]
c0006adf:	e8 d9 e2 ff ff       	call   c0004dbd <ld_clust.isra.0>
c0006ae4:	89 c2                	mov    edx,eax
c0006ae6:	89 f8                	mov    eax,edi
c0006ae8:	e8 ee b3 ff ff       	call   c0001edb <clst2sect>
c0006aed:	89 c6                	mov    esi,eax
c0006aef:	89 d1                	mov    ecx,edx
c0006af1:	b8 02 00 00 00       	mov    eax,0x2
c0006af6:	09 f2                	or     edx,esi
c0006af8:	74 44                	je     c0006b3e <f_rename+0x2d4>
c0006afa:	89 f2                	mov    edx,esi
c0006afc:	89 f8                	mov    eax,edi
c0006afe:	e8 1d b9 ff ff       	call   c0002420 <move_window>
c0006b03:	85 c0                	test   eax,eax
c0006b05:	75 37                	jne    c0006b3e <f_rename+0x2d4>
c0006b07:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b0b:	80 78 75 2e          	cmp    BYTE PTR [eax+0x75],0x2e
c0006b0f:	75 17                	jne    c0006b28 <f_rename+0x2be>
c0006b11:	8d 50 74             	lea    edx,[eax+0x74]
c0006b14:	8b 8c 24 ac 00 00 00 	mov    ecx,DWORD PTR [esp+0xac]
c0006b1b:	e8 c6 e2 ff ff       	call   c0004de6 <st_clust.isra.1>
c0006b20:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b24:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006b28:	8d 44 24 58          	lea    eax,[esp+0x58]
c0006b2c:	e8 f4 d0 ff ff       	call   c0003c25 <dir_remove>
c0006b31:	85 c0                	test   eax,eax
c0006b33:	75 09                	jne    c0006b3e <f_rename+0x2d4>
c0006b35:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0006b39:	e8 0d da ff ff       	call   c000454b <sync_fs>
c0006b3e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006b42:	83 ec 0c             	sub    esp,0xc
c0006b45:	53                   	push   ebx
c0006b46:	e8 40 19 00 00       	call   c000848b <ff_memfree>
c0006b4b:	83 c4 10             	add    esp,0x10
c0006b4e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006b52:	81 c4 fc 00 00 00    	add    esp,0xfc
c0006b58:	5b                   	pop    ebx
c0006b59:	5e                   	pop    esi
c0006b5a:	5f                   	pop    edi
c0006b5b:	5d                   	pop    ebp
c0006b5c:	c3                   	ret    

c0006b5d <f_chmod>:
c0006b5d:	57                   	push   edi
c0006b5e:	b9 02 00 00 00       	mov    ecx,0x2
c0006b63:	56                   	push   esi
c0006b64:	53                   	push   ebx
c0006b65:	83 ec 60             	sub    esp,0x60
c0006b68:	8b 5c 24 74          	mov    ebx,DWORD PTR [esp+0x74]
c0006b6c:	8b 7c 24 78          	mov    edi,DWORD PTR [esp+0x78]
c0006b70:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006b74:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006b78:	e8 55 bb ff ff       	call   c00026d2 <mount_volume>
c0006b7d:	85 c0                	test   eax,eax
c0006b7f:	0f 85 af 00 00 00    	jne    c0006c34 <f_chmod+0xd7>
c0006b85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006b89:	83 ec 0c             	sub    esp,0xc
c0006b8c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006b90:	68 60 04 00 00       	push   0x460
c0006b95:	e8 db 18 00 00       	call   c0008475 <ff_memalloc>
c0006b9a:	83 c4 10             	add    esp,0x10
c0006b9d:	89 c6                	mov    esi,eax
c0006b9f:	b8 11 00 00 00       	mov    eax,0x11
c0006ba4:	85 f6                	test   esi,esi
c0006ba6:	0f 84 88 00 00 00    	je     c0006c34 <f_chmod+0xd7>
c0006bac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bb0:	8d 96 00 02 00 00    	lea    edx,[esi+0x200]
c0006bb6:	89 70 0c             	mov    DWORD PTR [eax+0xc],esi
c0006bb9:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006bbc:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006bc0:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bc4:	e8 7f e2 ff ff       	call   c0004e48 <follow_path>
c0006bc9:	85 c0                	test   eax,eax
c0006bcb:	75 53                	jne    c0006c20 <f_chmod+0xc3>
c0006bcd:	b8 06 00 00 00       	mov    eax,0x6
c0006bd2:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006bd7:	75 47                	jne    c0006c20 <f_chmod+0xc3>
c0006bd9:	89 f9                	mov    ecx,edi
c0006bdb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006bdf:	83 e1 27             	and    ecx,0x27
c0006be2:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006be5:	75 1d                	jne    c0006c04 <f_chmod+0xa7>
c0006be7:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006bea:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bed:	21 cb                	and    ebx,ecx
c0006bef:	32 58 04             	xor    bl,BYTE PTR [eax+0x4]
c0006bf2:	88 58 04             	mov    BYTE PTR [eax+0x4],bl
c0006bf5:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006bf9:	e8 a2 cf ff ff       	call   c0003ba0 <store_xdir>
c0006bfe:	85 c0                	test   eax,eax
c0006c00:	75 1e                	jne    c0006c20 <f_chmod+0xc3>
c0006c02:	eb 13                	jmp    c0006c17 <f_chmod+0xba>
c0006c04:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c0006c08:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c0b:	21 cb                	and    ebx,ecx
c0006c0d:	32 5a 0b             	xor    bl,BYTE PTR [edx+0xb]
c0006c10:	88 5a 0b             	mov    BYTE PTR [edx+0xb],bl
c0006c13:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006c17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c1b:	e8 2b d9 ff ff       	call   c000454b <sync_fs>
c0006c20:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006c24:	83 ec 0c             	sub    esp,0xc
c0006c27:	56                   	push   esi
c0006c28:	e8 5e 18 00 00       	call   c000848b <ff_memfree>
c0006c2d:	83 c4 10             	add    esp,0x10
c0006c30:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006c34:	83 c4 60             	add    esp,0x60
c0006c37:	5b                   	pop    ebx
c0006c38:	5e                   	pop    esi
c0006c39:	5f                   	pop    edi
c0006c3a:	c3                   	ret    

c0006c3b <f_utime>:
c0006c3b:	56                   	push   esi
c0006c3c:	b9 02 00 00 00       	mov    ecx,0x2
c0006c41:	53                   	push   ebx
c0006c42:	83 ec 64             	sub    esp,0x64
c0006c45:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0006c49:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006c4d:	8d 44 24 70          	lea    eax,[esp+0x70]
c0006c51:	e8 7c ba ff ff       	call   c00026d2 <mount_volume>
c0006c56:	85 c0                	test   eax,eax
c0006c58:	0f 85 b5 00 00 00    	jne    c0006d13 <f_utime+0xd8>
c0006c5e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c62:	83 ec 0c             	sub    esp,0xc
c0006c65:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0006c69:	68 60 04 00 00       	push   0x460
c0006c6e:	e8 02 18 00 00       	call   c0008475 <ff_memalloc>
c0006c73:	83 c4 10             	add    esp,0x10
c0006c76:	89 c3                	mov    ebx,eax
c0006c78:	b8 11 00 00 00       	mov    eax,0x11
c0006c7d:	85 db                	test   ebx,ebx
c0006c7f:	0f 84 8e 00 00 00    	je     c0006d13 <f_utime+0xd8>
c0006c85:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006c89:	8d 93 00 02 00 00    	lea    edx,[ebx+0x200]
c0006c8f:	89 58 0c             	mov    DWORD PTR [eax+0xc],ebx
c0006c92:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0006c95:	8b 54 24 70          	mov    edx,DWORD PTR [esp+0x70]
c0006c99:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006c9d:	e8 a6 e1 ff ff       	call   c0004e48 <follow_path>
c0006ca2:	85 c0                	test   eax,eax
c0006ca4:	75 59                	jne    c0006cff <f_utime+0xc4>
c0006ca6:	b8 06 00 00 00       	mov    eax,0x6
c0006cab:	f6 44 24 5b a0       	test   BYTE PTR [esp+0x5b],0xa0
c0006cb0:	75 4d                	jne    c0006cff <f_utime+0xc4>
c0006cb2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cb6:	0f b7 56 08          	movzx  edx,WORD PTR [esi+0x8]
c0006cba:	0f b7 4e 0a          	movzx  ecx,WORD PTR [esi+0xa]
c0006cbe:	c1 e2 10             	shl    edx,0x10
c0006cc1:	09 ca                	or     edx,ecx
c0006cc3:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006cc6:	75 1a                	jne    c0006ce2 <f_utime+0xa7>
c0006cc8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0006ccb:	83 c0 0c             	add    eax,0xc
c0006cce:	e8 e5 af ff ff       	call   c0001cb8 <st_dword>
c0006cd3:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006cd7:	e8 c4 ce ff ff       	call   c0003ba0 <store_xdir>
c0006cdc:	85 c0                	test   eax,eax
c0006cde:	75 1f                	jne    c0006cff <f_utime+0xc4>
c0006ce0:	eb 14                	jmp    c0006cf6 <f_utime+0xbb>
c0006ce2:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006ce6:	83 c0 16             	add    eax,0x16
c0006ce9:	e8 ca af ff ff       	call   c0001cb8 <st_dword>
c0006cee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cf2:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0006cf6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006cfa:	e8 4c d8 ff ff       	call   c000454b <sync_fs>
c0006cff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006d03:	83 ec 0c             	sub    esp,0xc
c0006d06:	53                   	push   ebx
c0006d07:	e8 7f 17 00 00       	call   c000848b <ff_memfree>
c0006d0c:	83 c4 10             	add    esp,0x10
c0006d0f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006d13:	83 c4 64             	add    esp,0x64
c0006d16:	5b                   	pop    ebx
c0006d17:	5e                   	pop    esi
c0006d18:	c3                   	ret    

c0006d19 <f_getlabel>:
c0006d19:	55                   	push   ebp
c0006d1a:	31 c9                	xor    ecx,ecx
c0006d1c:	57                   	push   edi
c0006d1d:	56                   	push   esi
c0006d1e:	53                   	push   ebx
c0006d1f:	83 ec 6c             	sub    esp,0x6c
c0006d22:	8d 54 24 10          	lea    edx,[esp+0x10]
c0006d26:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006d2d:	e8 a0 b9 ff ff       	call   c00026d2 <mount_volume>
c0006d32:	89 c6                	mov    esi,eax
c0006d34:	85 c0                	test   eax,eax
c0006d36:	0f 85 c1 01 00 00    	jne    c0006efd <f_getlabel+0x1e4>
c0006d3c:	83 bc 24 84 00 00 00 00 	cmp    DWORD PTR [esp+0x84],0x0
c0006d44:	0f 84 5f 01 00 00    	je     c0006ea9 <f_getlabel+0x190>
c0006d4a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d4e:	31 d2                	xor    edx,edx
c0006d50:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0006d54:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0006d5c:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d60:	e8 39 c4 ff ff       	call   c000319e <dir_sdi>
c0006d65:	85 c0                	test   eax,eax
c0006d67:	0f 85 2d 01 00 00    	jne    c0006e9a <f_getlabel+0x181>
c0006d6d:	ba 01 00 00 00       	mov    edx,0x1
c0006d72:	8d 44 24 14          	lea    eax,[esp+0x14]
c0006d76:	e8 33 cc ff ff       	call   c00039ae <dir_read>
c0006d7b:	85 c0                	test   eax,eax
c0006d7d:	0f 85 17 01 00 00    	jne    c0006e9a <f_getlabel+0x181>
c0006d83:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006d87:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006d8a:	74 09                	je     c0006d95 <f_getlabel+0x7c>
c0006d8c:	31 db                	xor    ebx,ebx
c0006d8e:	31 c9                	xor    ecx,ecx
c0006d90:	e9 c8 00 00 00       	jmp    c0006e5d <f_getlabel+0x144>
c0006d95:	31 ed                	xor    ebp,ebp
c0006d97:	31 db                	xor    ebx,ebx
c0006d99:	31 ff                	xor    edi,edi
c0006d9b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0006d9f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
c0006da3:	39 fa                	cmp    edx,edi
c0006da5:	76 4b                	jbe    c0006df2 <f_getlabel+0xd9>
c0006da7:	47                   	inc    edi
c0006da8:	8d 14 3f             	lea    edx,[edi+edi*1]
c0006dab:	01 d0                	add    eax,edx
c0006dad:	e8 90 ae ff ff       	call   c0001c42 <ld_word>
c0006db2:	66 85 ed             	test   bp,bp
c0006db5:	75 0d                	jne    c0006dc4 <f_getlabel+0xab>
c0006db7:	8d 90 00 28 00 00    	lea    edx,[eax+0x2800]
c0006dbd:	66 81 fa ff 07       	cmp    dx,0x7ff
c0006dc2:	76 28                	jbe    c0006dec <f_getlabel+0xd3>
c0006dc4:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006dcb:	89 e9                	mov    ecx,ebp
c0006dcd:	01 da                	add    edx,ebx
c0006dcf:	c1 e1 10             	shl    ecx,0x10
c0006dd2:	0f b7 c0             	movzx  eax,ax
c0006dd5:	09 c8                	or     eax,ecx
c0006dd7:	b9 04 00 00 00       	mov    ecx,0x4
c0006ddc:	e8 01 b0 ff ff       	call   c0001de2 <put_utf>
c0006de1:	84 c0                	test   al,al
c0006de3:	74 0b                	je     c0006df0 <f_getlabel+0xd7>
c0006de5:	0f b6 c0             	movzx  eax,al
c0006de8:	01 c3                	add    ebx,eax
c0006dea:	31 c0                	xor    eax,eax
c0006dec:	89 c5                	mov    ebp,eax
c0006dee:	eb ab                	jmp    c0006d9b <f_getlabel+0x82>
c0006df0:	31 db                	xor    ebx,ebx
c0006df2:	66 85 ed             	test   bp,bp
c0006df5:	74 02                	je     c0006df9 <f_getlabel+0xe0>
c0006df7:	31 db                	xor    ebx,ebx
c0006df9:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006e00:	c6 04 18 00          	mov    BYTE PTR [eax+ebx*1],0x0
c0006e04:	e9 a0 00 00 00       	jmp    c0006ea9 <f_getlabel+0x190>
c0006e09:	83 ff 0b             	cmp    edi,0xb
c0006e0c:	74 11                	je     c0006e1f <f_getlabel+0x106>
c0006e0e:	0f b6 54 3d 00       	movzx  edx,BYTE PTR [ebp+edi*1+0x0]
c0006e13:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0006e17:	8d 79 02             	lea    edi,[ecx+0x2]
c0006e1a:	c1 e0 08             	shl    eax,0x8
c0006e1d:	09 c2                	or     edx,eax
c0006e1f:	0f b7 d2             	movzx  edx,dx
c0006e22:	50                   	push   eax
c0006e23:	50                   	push   eax
c0006e24:	68 b5 01 00 00       	push   0x1b5
c0006e29:	52                   	push   edx
c0006e2a:	e8 03 17 00 00       	call   c0008532 <ff_oem2uni>
c0006e2f:	83 c4 10             	add    esp,0x10
c0006e32:	66 85 c0             	test   ax,ax
c0006e35:	74 46                	je     c0006e7d <f_getlabel+0x164>
c0006e37:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0006e3e:	0f b7 c0             	movzx  eax,ax
c0006e41:	01 da                	add    edx,ebx
c0006e43:	b9 04 00 00 00       	mov    ecx,0x4
c0006e48:	e8 95 af ff ff       	call   c0001de2 <put_utf>
c0006e4d:	84 c0                	test   al,al
c0006e4f:	74 2c                	je     c0006e7d <f_getlabel+0x164>
c0006e51:	0f b6 c0             	movzx  eax,al
c0006e54:	01 c3                	add    ebx,eax
c0006e56:	83 ff 0b             	cmp    edi,0xb
c0006e59:	74 24                	je     c0006e7f <f_getlabel+0x166>
c0006e5b:	89 f9                	mov    ecx,edi
c0006e5d:	8b 6c 24 4c          	mov    ebp,DWORD PTR [esp+0x4c]
c0006e61:	8d 79 01             	lea    edi,[ecx+0x1]
c0006e64:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0006e69:	0f b6 54 0d 00       	movzx  edx,BYTE PTR [ebp+ecx*1+0x0]
c0006e6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0006e72:	e8 9f ae ff ff       	call   c0001d16 <dbc_1st>
c0006e77:	85 c0                	test   eax,eax
c0006e79:	74 a4                	je     c0006e1f <f_getlabel+0x106>
c0006e7b:	eb 8c                	jmp    c0006e09 <f_getlabel+0xf0>
c0006e7d:	31 db                	xor    ebx,ebx
c0006e7f:	03 9c 24 84 00 00 00 	add    ebx,DWORD PTR [esp+0x84]
c0006e86:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0006e89:	39 9c 24 84 00 00 00 	cmp    DWORD PTR [esp+0x84],ebx
c0006e90:	74 17                	je     c0006ea9 <f_getlabel+0x190>
c0006e92:	4b                   	dec    ebx
c0006e93:	80 3b 20             	cmp    BYTE PTR [ebx],0x20
c0006e96:	74 ee                	je     c0006e86 <f_getlabel+0x16d>
c0006e98:	eb 0f                	jmp    c0006ea9 <f_getlabel+0x190>
c0006e9a:	83 f8 04             	cmp    eax,0x4
c0006e9d:	75 5c                	jne    c0006efb <f_getlabel+0x1e2>
c0006e9f:	8b 84 24 84 00 00 00 	mov    eax,DWORD PTR [esp+0x84]
c0006ea6:	c6 00 00             	mov    BYTE PTR [eax],0x0
c0006ea9:	83 bc 24 88 00 00 00 00 	cmp    DWORD PTR [esp+0x88],0x0
c0006eb1:	74 4a                	je     c0006efd <f_getlabel+0x1e4>
c0006eb3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0006eb7:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
c0006eba:	8b 48 28             	mov    ecx,DWORD PTR [eax+0x28]
c0006ebd:	e8 5e b5 ff ff       	call   c0002420 <move_window>
c0006ec2:	89 c6                	mov    esi,eax
c0006ec4:	85 c0                	test   eax,eax
c0006ec6:	75 35                	jne    c0006efd <f_getlabel+0x1e4>
c0006ec8:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0006ecc:	b8 43 00 00 00       	mov    eax,0x43
c0006ed1:	8a 0a                	mov    cl,BYTE PTR [edx]
c0006ed3:	80 f9 03             	cmp    cl,0x3
c0006ed6:	74 0f                	je     c0006ee7 <f_getlabel+0x1ce>
c0006ed8:	31 c0                	xor    eax,eax
c0006eda:	80 f9 04             	cmp    cl,0x4
c0006edd:	0f 94 c0             	sete   al
c0006ee0:	48                   	dec    eax
c0006ee1:	83 e0 c3             	and    eax,0xffffffc3
c0006ee4:	83 c0 64             	add    eax,0x64
c0006ee7:	8d 44 02 54          	lea    eax,[edx+eax*1+0x54]
c0006eeb:	e8 5f ad ff ff       	call   c0001c4f <ld_dword>
c0006ef0:	8b bc 24 88 00 00 00 	mov    edi,DWORD PTR [esp+0x88]
c0006ef7:	89 07                	mov    DWORD PTR [edi],eax
c0006ef9:	eb 02                	jmp    c0006efd <f_getlabel+0x1e4>
c0006efb:	89 c6                	mov    esi,eax
c0006efd:	83 c4 6c             	add    esp,0x6c
c0006f00:	89 f0                	mov    eax,esi
c0006f02:	5b                   	pop    ebx
c0006f03:	5e                   	pop    esi
c0006f04:	5f                   	pop    edi
c0006f05:	5d                   	pop    ebp
c0006f06:	c3                   	ret    

c0006f07 <f_setlabel>:
c0006f07:	56                   	push   esi
c0006f08:	b9 02 00 00 00       	mov    ecx,0x2
c0006f0d:	53                   	push   ebx
c0006f0e:	83 ec 74             	sub    esp,0x74
c0006f11:	8d 54 24 08          	lea    edx,[esp+0x8]
c0006f15:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f1c:	e8 b1 b7 ff ff       	call   c00026d2 <mount_volume>
c0006f21:	89 c6                	mov    esi,eax
c0006f23:	85 c0                	test   eax,eax
c0006f25:	0f 85 41 02 00 00    	jne    c000716c <f_setlabel+0x265>
c0006f2b:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0006f2f:	80 38 04             	cmp    BYTE PTR [eax],0x4
c0006f32:	0f 85 8e 00 00 00    	jne    c0006fc6 <f_setlabel+0xbf>
c0006f38:	b9 16 00 00 00       	mov    ecx,0x16
c0006f3d:	31 d2                	xor    edx,edx
c0006f3f:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006f43:	31 db                	xor    ebx,ebx
c0006f45:	e8 8c ad ff ff       	call   c0001cd6 <mem_set>
c0006f4a:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006f51:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006f54:	0f 86 0a 01 00 00    	jbe    c0007064 <f_setlabel+0x15d>
c0006f5a:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006f61:	e8 b6 ad ff ff       	call   c0001d1c <tchar2uni>
c0006f66:	89 c6                	mov    esi,eax
c0006f68:	3d ff ff 00 00       	cmp    eax,0xffff
c0006f6d:	76 2a                	jbe    c0006f99 <f_setlabel+0x92>
c0006f6f:	83 f8 ff             	cmp    eax,0xffffffff
c0006f72:	74 05                	je     c0006f79 <f_setlabel+0x72>
c0006f74:	83 fb 09             	cmp    ebx,0x9
c0006f77:	76 0a                	jbe    c0006f83 <f_setlabel+0x7c>
c0006f79:	be 06 00 00 00       	mov    esi,0x6
c0006f7e:	e9 e9 01 00 00       	jmp    c000716c <f_setlabel+0x265>
c0006f83:	89 c2                	mov    edx,eax
c0006f85:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006f89:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006f8c:	c1 ea 10             	shr    edx,0x10
c0006f8f:	01 c8                	add    eax,ecx
c0006f91:	43                   	inc    ebx
c0006f92:	e8 1d ad ff ff       	call   c0001cb4 <st_word>
c0006f97:	eb 04                	jmp    c0006f9d <f_setlabel+0x96>
c0006f99:	85 c0                	test   eax,eax
c0006f9b:	74 dc                	je     c0006f79 <f_setlabel+0x72>
c0006f9d:	89 f2                	mov    edx,esi
c0006f9f:	b8 97 9c 02 c0       	mov    eax,0xc0029c97
c0006fa4:	e8 5b ad ff ff       	call   c0001d04 <chk_chr>
c0006fa9:	85 c0                	test   eax,eax
c0006fab:	75 cc                	jne    c0006f79 <f_setlabel+0x72>
c0006fad:	83 fb 0a             	cmp    ebx,0xa
c0006fb0:	77 c7                	ja     c0006f79 <f_setlabel+0x72>
c0006fb2:	8d 04 1b             	lea    eax,[ebx+ebx*1]
c0006fb5:	8d 4c 24 0e          	lea    ecx,[esp+0xe]
c0006fb9:	0f b7 d6             	movzx  edx,si
c0006fbc:	01 c8                	add    eax,ecx
c0006fbe:	43                   	inc    ebx
c0006fbf:	e8 f0 ac ff ff       	call   c0001cb4 <st_word>
c0006fc4:	eb 84                	jmp    c0006f4a <f_setlabel+0x43>
c0006fc6:	b9 0b 00 00 00       	mov    ecx,0xb
c0006fcb:	ba 20 00 00 00       	mov    edx,0x20
c0006fd0:	8d 44 24 0e          	lea    eax,[esp+0xe]
c0006fd4:	31 db                	xor    ebx,ebx
c0006fd6:	e8 fb ac ff ff       	call   c0001cd6 <mem_set>
c0006fdb:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0006fe2:	80 38 1f             	cmp    BYTE PTR [eax],0x1f
c0006fe5:	76 60                	jbe    c0007047 <f_setlabel+0x140>
c0006fe7:	8d 84 24 80 00 00 00 	lea    eax,[esp+0x80]
c0006fee:	e8 29 ad ff ff       	call   c0001d1c <tchar2uni>
c0006ff3:	3d ff ff 00 00       	cmp    eax,0xffff
c0006ff8:	0f 87 7b ff ff ff    	ja     c0006f79 <f_setlabel+0x72>
c0006ffe:	83 ec 0c             	sub    esp,0xc
c0007001:	50                   	push   eax
c0007002:	e8 97 15 00 00       	call   c000859e <ff_wtoupper>
c0007007:	5a                   	pop    edx
c0007008:	59                   	pop    ecx
c0007009:	68 b5 01 00 00       	push   0x1b5
c000700e:	50                   	push   eax
c000700f:	e8 8e 14 00 00       	call   c00084a2 <ff_uni2oem>
c0007014:	83 c4 10             	add    esp,0x10
c0007017:	89 c6                	mov    esi,eax
c0007019:	66 85 c0             	test   ax,ax
c000701c:	0f 84 57 ff ff ff    	je     c0006f79 <f_setlabel+0x72>
c0007022:	0f b7 d0             	movzx  edx,ax
c0007025:	b8 90 9c 02 c0       	mov    eax,0xc0029c90
c000702a:	e8 d5 ac ff ff       	call   c0001d04 <chk_chr>
c000702f:	85 c0                	test   eax,eax
c0007031:	0f 85 42 ff ff ff    	jne    c0006f79 <f_setlabel+0x72>
c0007037:	66 81 fe ff 00       	cmp    si,0xff
c000703c:	0f 87 14 01 00 00    	ja     c0007156 <f_setlabel+0x24f>
c0007042:	e9 fa 00 00 00       	jmp    c0007141 <f_setlabel+0x23a>
c0007047:	80 7c 24 0e e5       	cmp    BYTE PTR [esp+0xe],0xe5
c000704c:	0f 84 27 ff ff ff    	je     c0006f79 <f_setlabel+0x72>
c0007052:	85 db                	test   ebx,ebx
c0007054:	74 0e                	je     c0007064 <f_setlabel+0x15d>
c0007056:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007059:	80 7c 1c 0d 20       	cmp    BYTE PTR [esp+ebx*1+0xd],0x20
c000705e:	75 04                	jne    c0007064 <f_setlabel+0x15d>
c0007060:	89 c3                	mov    ebx,eax
c0007062:	eb ee                	jmp    c0007052 <f_setlabel+0x14b>
c0007064:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007068:	31 d2                	xor    edx,edx
c000706a:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000706e:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0007076:	8d 44 24 24          	lea    eax,[esp+0x24]
c000707a:	e8 1f c1 ff ff       	call   c000319e <dir_sdi>
c000707f:	89 c6                	mov    esi,eax
c0007081:	85 c0                	test   eax,eax
c0007083:	0f 85 e3 00 00 00    	jne    c000716c <f_setlabel+0x265>
c0007089:	ba 01 00 00 00       	mov    edx,0x1
c000708e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0007092:	e8 17 c9 ff ff       	call   c00039ae <dir_read>
c0007097:	85 c0                	test   eax,eax
c0007099:	75 21                	jne    c00070bc <f_setlabel+0x1b5>
c000709b:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000709f:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070a3:	80 3a 04             	cmp    BYTE PTR [edx],0x4
c00070a6:	74 5d                	je     c0007105 <f_setlabel+0x1fe>
c00070a8:	85 db                	test   ebx,ebx
c00070aa:	74 0b                	je     c00070b7 <f_setlabel+0x1b0>
c00070ac:	b9 0b 00 00 00       	mov    ecx,0xb
c00070b1:	8d 54 24 0e          	lea    edx,[esp+0xe]
c00070b5:	eb 70                	jmp    c0007127 <f_setlabel+0x220>
c00070b7:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
c00070ba:	eb 70                	jmp    c000712c <f_setlabel+0x225>
c00070bc:	83 f8 04             	cmp    eax,0x4
c00070bf:	75 7c                	jne    c000713d <f_setlabel+0x236>
c00070c1:	85 db                	test   ebx,ebx
c00070c3:	0f 84 a3 00 00 00    	je     c000716c <f_setlabel+0x265>
c00070c9:	ba 01 00 00 00       	mov    edx,0x1
c00070ce:	8d 44 24 24          	lea    eax,[esp+0x24]
c00070d2:	e8 51 ca ff ff       	call   c0003b28 <dir_alloc>
c00070d7:	89 c6                	mov    esi,eax
c00070d9:	85 c0                	test   eax,eax
c00070db:	0f 85 8b 00 00 00    	jne    c000716c <f_setlabel+0x265>
c00070e1:	31 d2                	xor    edx,edx
c00070e3:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070e7:	b9 20 00 00 00       	mov    ecx,0x20
c00070ec:	e8 e5 ab ff ff       	call   c0001cd6 <mem_set>
c00070f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00070f5:	80 38 04             	cmp    BYTE PTR [eax],0x4
c00070f8:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c00070fc:	75 18                	jne    c0007116 <f_setlabel+0x20f>
c00070fe:	c6 00 83             	mov    BYTE PTR [eax],0x83
c0007101:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007105:	88 58 01             	mov    BYTE PTR [eax+0x1],bl
c0007108:	b9 16 00 00 00       	mov    ecx,0x16
c000710d:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007111:	83 c0 02             	add    eax,0x2
c0007114:	eb 9b                	jmp    c00070b1 <f_setlabel+0x1aa>
c0007116:	c6 40 0b 08          	mov    BYTE PTR [eax+0xb],0x8
c000711a:	b9 0b 00 00 00       	mov    ecx,0xb
c000711f:	8d 54 24 0e          	lea    edx,[esp+0xe]
c0007123:	8b 44 24 5c          	mov    eax,DWORD PTR [esp+0x5c]
c0007127:	e8 95 ab ff ff       	call   c0001cc1 <mem_cpy>
c000712c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007130:	c6 40 03 01          	mov    BYTE PTR [eax+0x3],0x1
c0007134:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007138:	e8 0e d4 ff ff       	call   c000454b <sync_fs>
c000713d:	89 c6                	mov    esi,eax
c000713f:	eb 2b                	jmp    c000716c <f_setlabel+0x265>
c0007141:	83 fb 0a             	cmp    ebx,0xa
c0007144:	0f 87 2f fe ff ff    	ja     c0006f79 <f_setlabel+0x72>
c000714a:	89 f0                	mov    eax,esi
c000714c:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007150:	43                   	inc    ebx
c0007151:	e9 85 fe ff ff       	jmp    c0006fdb <f_setlabel+0xd4>
c0007156:	83 fb 09             	cmp    ebx,0x9
c0007159:	0f 87 1a fe ff ff    	ja     c0006f79 <f_setlabel+0x72>
c000715f:	89 f0                	mov    eax,esi
c0007161:	66 c1 e8 08          	shr    ax,0x8
c0007165:	88 44 1c 0e          	mov    BYTE PTR [esp+ebx*1+0xe],al
c0007169:	43                   	inc    ebx
c000716a:	eb de                	jmp    c000714a <f_setlabel+0x243>
c000716c:	89 f0                	mov    eax,esi
c000716e:	83 c4 74             	add    esp,0x74
c0007171:	5b                   	pop    ebx
c0007172:	5e                   	pop    esi
c0007173:	c3                   	ret    

c0007174 <f_forward>:
c0007174:	55                   	push   ebp
c0007175:	57                   	push   edi
c0007176:	56                   	push   esi
c0007177:	53                   	push   ebx
c0007178:	83 ec 2c             	sub    esp,0x2c
c000717b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c000717f:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0007183:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0007189:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c000718d:	89 d8                	mov    eax,ebx
c000718f:	e8 b1 b1 ff ff       	call   c0002345 <validate>
c0007194:	89 c5                	mov    ebp,eax
c0007196:	85 c0                	test   eax,eax
c0007198:	0f 85 aa 01 00 00    	jne    c0007348 <f_forward+0x1d4>
c000719e:	0f b6 6b 29          	movzx  ebp,BYTE PTR [ebx+0x29]
c00071a2:	85 ed                	test   ebp,ebp
c00071a4:	0f 85 9e 01 00 00    	jne    c0007348 <f_forward+0x1d4>
c00071aa:	f6 43 28 01          	test   BYTE PTR [ebx+0x28],0x1
c00071ae:	0f 84 8f 01 00 00    	je     c0007343 <f_forward+0x1cf>
c00071b4:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c00071b7:	8b 53 10             	mov    edx,DWORD PTR [ebx+0x10]
c00071ba:	2b 43 2c             	sub    eax,DWORD PTR [ebx+0x2c]
c00071bd:	bf 00 00 00 00       	mov    edi,0x0
c00071c2:	1b 53 30             	sbb    edx,DWORD PTR [ebx+0x30]
c00071c5:	3b 44 24 48          	cmp    eax,DWORD PTR [esp+0x48]
c00071c9:	89 d1                	mov    ecx,edx
c00071cb:	19 f9                	sbb    ecx,edi
c00071cd:	0f 83 cf 00 00 00    	jae    c00072a2 <f_forward+0x12e>
c00071d3:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00071d7:	e9 c6 00 00 00       	jmp    c00072a2 <f_forward+0x12e>
c00071dc:	50                   	push   eax
c00071dd:	50                   	push   eax
c00071de:	6a 00                	push   0x0
c00071e0:	6a 00                	push   0x0
c00071e2:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c00071e6:	83 c4 10             	add    esp,0x10
c00071e9:	85 c0                	test   eax,eax
c00071eb:	0f 84 57 01 00 00    	je     c0007348 <f_forward+0x1d4>
c00071f1:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c00071f4:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c00071f8:	8b 53 30             	mov    edx,DWORD PTR [ebx+0x30]
c00071fb:	0f b7 71 0a          	movzx  esi,WORD PTR [ecx+0xa]
c00071ff:	89 d7                	mov    edi,edx
c0007201:	8d 4e ff             	lea    ecx,[esi-0x1]
c0007204:	89 c6                	mov    esi,eax
c0007206:	0f ac fe 09          	shrd   esi,edi,0x9
c000720a:	21 ce                	and    esi,ecx
c000720c:	89 c1                	mov    ecx,eax
c000720e:	81 e1 ff 01 00 00    	and    ecx,0x1ff
c0007214:	0f 84 98 00 00 00    	je     c00072b2 <f_forward+0x13e>
c000721a:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c000721e:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c0007221:	89 c8                	mov    eax,ecx
c0007223:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0007227:	e8 af ac ff ff       	call   c0001edb <clst2sect>
c000722c:	89 d7                	mov    edi,edx
c000722e:	09 c7                	or     edi,eax
c0007230:	0f 84 9e 00 00 00    	je     c00072d4 <f_forward+0x160>
c0007236:	31 ff                	xor    edi,edi
c0007238:	8d 4b 50             	lea    ecx,[ebx+0x50]
c000723b:	01 c6                	add    esi,eax
c000723d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0007241:	11 d7                	adc    edi,edx
c0007243:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c0007246:	8b 53 3c             	mov    edx,DWORD PTR [ebx+0x3c]
c0007249:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000724d:	39 fa                	cmp    edx,edi
c000724f:	0f 85 a2 00 00 00    	jne    c00072f7 <f_forward+0x183>
c0007255:	39 f0                	cmp    eax,esi
c0007257:	0f 85 9a 00 00 00    	jne    c00072f7 <f_forward+0x183>
c000725d:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c0007260:	ba 00 02 00 00       	mov    edx,0x200
c0007265:	25 ff 01 00 00       	and    eax,0x1ff
c000726a:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c000726e:	29 c2                	sub    edx,eax
c0007270:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c0007273:	89 7b 3c             	mov    DWORD PTR [ebx+0x3c],edi
c0007276:	39 d1                	cmp    ecx,edx
c0007278:	76 02                	jbe    c000727c <f_forward+0x108>
c000727a:	89 d1                	mov    ecx,edx
c000727c:	8d 73 50             	lea    esi,[ebx+0x50]
c000727f:	52                   	push   edx
c0007280:	01 c6                	add    esi,eax
c0007282:	52                   	push   edx
c0007283:	51                   	push   ecx
c0007284:	56                   	push   esi
c0007285:	ff 54 24 54          	call   DWORD PTR [esp+0x54]
c0007289:	83 c4 10             	add    esp,0x10
c000728c:	85 c0                	test   eax,eax
c000728e:	74 44                	je     c00072d4 <f_forward+0x160>
c0007290:	31 ff                	xor    edi,edi
c0007292:	01 43 2c             	add    DWORD PTR [ebx+0x2c],eax
c0007295:	11 7b 30             	adc    DWORD PTR [ebx+0x30],edi
c0007298:	8b 7c 24 4c          	mov    edi,DWORD PTR [esp+0x4c]
c000729c:	29 44 24 48          	sub    DWORD PTR [esp+0x48],eax
c00072a0:	01 07                	add    DWORD PTR [edi],eax
c00072a2:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c00072a7:	0f 85 2f ff ff ff    	jne    c00071dc <f_forward+0x68>
c00072ad:	e9 96 00 00 00       	jmp    c0007348 <f_forward+0x1d4>
c00072b2:	85 f6                	test   esi,esi
c00072b4:	0f 85 60 ff ff ff    	jne    c000721a <f_forward+0xa6>
c00072ba:	89 d7                	mov    edi,edx
c00072bc:	09 c7                	or     edi,eax
c00072be:	75 05                	jne    c00072c5 <f_forward+0x151>
c00072c0:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00072c3:	eb 0a                	jmp    c00072cf <f_forward+0x15b>
c00072c5:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c00072c8:	89 d8                	mov    eax,ebx
c00072ca:	e8 d9 bc ff ff       	call   c0002fa8 <get_fat>
c00072cf:	83 f8 01             	cmp    eax,0x1
c00072d2:	77 0b                	ja     c00072df <f_forward+0x16b>
c00072d4:	c6 43 29 02          	mov    BYTE PTR [ebx+0x29],0x2
c00072d8:	bd 02 00 00 00       	mov    ebp,0x2
c00072dd:	eb 69                	jmp    c0007348 <f_forward+0x1d4>
c00072df:	83 f8 ff             	cmp    eax,0xffffffff
c00072e2:	75 0b                	jne    c00072ef <f_forward+0x17b>
c00072e4:	c6 43 29 01          	mov    BYTE PTR [ebx+0x29],0x1
c00072e8:	bd 01 00 00 00       	mov    ebp,0x1
c00072ed:	eb 59                	jmp    c0007348 <f_forward+0x1d4>
c00072ef:	89 43 34             	mov    DWORD PTR [ebx+0x34],eax
c00072f2:	e9 23 ff ff ff       	jmp    c000721a <f_forward+0xa6>
c00072f7:	80 7b 28 00          	cmp    BYTE PTR [ebx+0x28],0x0
c00072fb:	79 20                	jns    c000731d <f_forward+0x1a9>
c00072fd:	83 ec 0c             	sub    esp,0xc
c0007300:	6a 01                	push   0x1
c0007302:	52                   	push   edx
c0007303:	50                   	push   eax
c0007304:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007308:	0f b6 41 01          	movzx  eax,BYTE PTR [ecx+0x1]
c000730c:	50                   	push   eax
c000730d:	e8 fb a8 ff ff       	call   c0001c0d <disk_write>
c0007312:	83 c4 20             	add    esp,0x20
c0007315:	85 c0                	test   eax,eax
c0007317:	75 cb                	jne    c00072e4 <f_forward+0x170>
c0007319:	80 63 28 7f          	and    BYTE PTR [ebx+0x28],0x7f
c000731d:	83 ec 0c             	sub    esp,0xc
c0007320:	6a 01                	push   0x1
c0007322:	57                   	push   edi
c0007323:	56                   	push   esi
c0007324:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0007328:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000732c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
c0007330:	50                   	push   eax
c0007331:	e8 c1 a8 ff ff       	call   c0001bf7 <disk_read>
c0007336:	83 c4 20             	add    esp,0x20
c0007339:	85 c0                	test   eax,eax
c000733b:	0f 84 1c ff ff ff    	je     c000725d <f_forward+0xe9>
c0007341:	eb a1                	jmp    c00072e4 <f_forward+0x170>
c0007343:	bd 07 00 00 00       	mov    ebp,0x7
c0007348:	83 c4 2c             	add    esp,0x2c
c000734b:	89 e8                	mov    eax,ebp
c000734d:	5b                   	pop    ebx
c000734e:	5e                   	pop    esi
c000734f:	5f                   	pop    edi
c0007350:	5d                   	pop    ebp
c0007351:	c3                   	ret    

c0007352 <f_mkfs>:
c0007352:	55                   	push   ebp
c0007353:	57                   	push   edi
c0007354:	56                   	push   esi
c0007355:	53                   	push   ebx
c0007356:	bb 0b 00 00 00       	mov    ebx,0xb
c000735b:	81 ec 9c 00 00 00    	sub    esp,0x9c
c0007361:	8b b4 24 b4 00 00 00 	mov    esi,DWORD PTR [esp+0xb4]
c0007368:	8d 84 24 b0 00 00 00 	lea    eax,[esp+0xb0]
c000736f:	e8 b0 ae ff ff       	call   c0002224 <get_ldnumber>
c0007374:	85 c0                	test   eax,eax
c0007376:	0f 88 ec 10 00 00    	js     c0008468 <f_mkfs+0x1116>
c000737c:	8b 14 85 e0 ed 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd1220]
c0007383:	85 d2                	test   edx,edx
c0007385:	74 03                	je     c000738a <f_mkfs+0x38>
c0007387:	c6 02 00             	mov    BYTE PTR [edx],0x0
c000738a:	85 f6                	test   esi,esi
c000738c:	75 05                	jne    c0007393 <f_mkfs+0x41>
c000738e:	be 80 9c 02 c0       	mov    esi,0xc0029c80
c0007393:	83 ec 0c             	sub    esp,0xc
c0007396:	0f b6 c0             	movzx  eax,al
c0007399:	bb 03 00 00 00       	mov    ebx,0x3
c000739e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00073a2:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073a6:	e8 49 a8 ff ff       	call   c0001bf4 <disk_initialize>
c00073ab:	83 c4 10             	add    esp,0x10
c00073ae:	a8 01                	test   al,0x1
c00073b0:	0f 85 b2 10 00 00    	jne    c0008468 <f_mkfs+0x1116>
c00073b6:	bb 0a 00 00 00       	mov    ebx,0xa
c00073bb:	a8 04                	test   al,0x4
c00073bd:	0f 85 a5 10 00 00    	jne    c0008468 <f_mkfs+0x1116>
c00073c3:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c00073c6:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c00073ca:	85 c0                	test   eax,eax
c00073cc:	75 20                	jne    c00073ee <f_mkfs+0x9c>
c00073ce:	51                   	push   ecx
c00073cf:	8d 44 24 78          	lea    eax,[esp+0x78]
c00073d3:	50                   	push   eax
c00073d4:	6a 03                	push   0x3
c00073d6:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00073da:	e8 44 a8 ff ff       	call   c0001c23 <disk_ioctl>
c00073df:	83 c4 10             	add    esp,0x10
c00073e2:	85 c0                	test   eax,eax
c00073e4:	74 08                	je     c00073ee <f_mkfs+0x9c>
c00073e6:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c00073ee:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c00073f2:	8d 42 ff             	lea    eax,[edx-0x1]
c00073f5:	3d ff 7f 00 00       	cmp    eax,0x7fff
c00073fa:	77 04                	ja     c0007400 <f_mkfs+0xae>
c00073fc:	85 c2                	test   edx,eax
c00073fe:	74 08                	je     c0007408 <f_mkfs+0xb6>
c0007400:	c7 44 24 74 01 00 00 00 	mov    DWORD PTR [esp+0x74],0x1
c0007408:	8a 46 01             	mov    al,BYTE PTR [esi+0x1]
c000740b:	88 44 24 48          	mov    BYTE PTR [esp+0x48],al
c000740f:	48                   	dec    eax
c0007410:	3c 01                	cmp    al,0x1
c0007412:	76 05                	jbe    c0007419 <f_mkfs+0xc7>
c0007414:	c6 44 24 48 01       	mov    BYTE PTR [esp+0x48],0x1
c0007419:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000741c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007420:	48                   	dec    eax
c0007421:	3d ff 7f 00 00       	cmp    eax,0x7fff
c0007426:	77 07                	ja     c000742f <f_mkfs+0xdd>
c0007428:	f6 44 24 28 0f       	test   BYTE PTR [esp+0x28],0xf
c000742d:	74 08                	je     c0007437 <f_mkfs+0xe5>
c000742f:	c7 44 24 28 00 02 00 00 	mov    DWORD PTR [esp+0x28],0x200
c0007437:	8b 5e 0c             	mov    ebx,DWORD PTR [esi+0xc]
c000743a:	81 fb 00 00 00 01    	cmp    ebx,0x1000000
c0007440:	77 07                	ja     c0007449 <f_mkfs+0xf7>
c0007442:	8d 43 ff             	lea    eax,[ebx-0x1]
c0007445:	85 d8                	test   eax,ebx
c0007447:	74 02                	je     c000744b <f_mkfs+0xf9>
c0007449:	31 db                	xor    ebx,ebx
c000744b:	81 bc 24 bc 00 00 00 ff 01 00 00 	cmp    DWORD PTR [esp+0xbc],0x1ff
c0007456:	77 0a                	ja     c0007462 <f_mkfs+0x110>
c0007458:	bb 11 00 00 00       	mov    ebx,0x11
c000745d:	e9 06 10 00 00       	jmp    c0008468 <f_mkfs+0x1116>
c0007462:	8b ac 24 b8 00 00 00 	mov    ebp,DWORD PTR [esp+0xb8]
c0007469:	8b 36                	mov    esi,DWORD PTR [esi]
c000746b:	85 ed                	test   ebp,ebp
c000746d:	75 1e                	jne    c000748d <f_mkfs+0x13b>
c000746f:	83 ec 0c             	sub    esp,0xc
c0007472:	8b 84 24 c8 00 00 00 	mov    eax,DWORD PTR [esp+0xc8]
c0007479:	25 00 fe ff ff       	and    eax,0xfffffe00
c000747e:	50                   	push   eax
c000747f:	e8 f1 0f 00 00       	call   c0008475 <ff_memalloc>
c0007484:	83 c4 10             	add    esp,0x10
c0007487:	89 c5                	mov    ebp,eax
c0007489:	85 c0                	test   eax,eax
c000748b:	74 cb                	je     c0007458 <f_mkfs+0x106>
c000748d:	c7 44 24 78 00 00 00 00 	mov    DWORD PTR [esp+0x78],0x0
c0007495:	c7 44 24 7c 00 00 00 00 	mov    DWORD PTR [esp+0x7c],0x0
c000749d:	52                   	push   edx
c000749e:	8d 44 24 7c          	lea    eax,[esp+0x7c]
c00074a2:	50                   	push   eax
c00074a3:	6a 01                	push   0x1
c00074a5:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00074a9:	e8 75 a7 ff ff       	call   c0001c23 <disk_ioctl>
c00074ae:	83 c4 10             	add    esp,0x10
c00074b1:	85 c0                	test   eax,eax
c00074b3:	0f 85 4a 0f 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c00074b9:	89 f1                	mov    ecx,esi
c00074bb:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c00074c3:	83 e1 0f             	and    ecx,0xf
c00074c6:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00074ce:	88 4c 24 3f          	mov    BYTE PTR [esp+0x3f],cl
c00074d2:	83 e6 08             	and    esi,0x8
c00074d5:	75 56                	jne    c000752d <f_mkfs+0x1db>
c00074d7:	8b 7c 24 7c          	mov    edi,DWORD PTR [esp+0x7c]
c00074db:	8b 74 24 78          	mov    esi,DWORD PTR [esp+0x78]
c00074df:	83 ff 00             	cmp    edi,0x0
c00074e2:	76 20                	jbe    c0007504 <f_mkfs+0x1b2>
c00074e4:	80 4c 24 3f 80       	or     BYTE PTR [esp+0x3f],0x80
c00074e9:	c7 44 24 10 00 08 00 00 	mov    DWORD PTR [esp+0x10],0x800
c00074f1:	81 c6 df f7 ff ff    	add    esi,0xfffff7df
c00074f7:	83 d7 ff             	adc    edi,0xffffffff
c00074fa:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c00074fe:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007502:	eb 21                	jmp    c0007525 <f_mkfs+0x1d3>
c0007504:	ba 3f 00 00 00       	mov    edx,0x3f
c0007509:	39 f2                	cmp    edx,esi
c000750b:	19 f8                	sbb    eax,edi
c000750d:	73 1e                	jae    c000752d <f_mkfs+0x1db>
c000750f:	83 c6 c1             	add    esi,0xffffffc1
c0007512:	c7 44 24 10 3f 00 00 00 	mov    DWORD PTR [esp+0x10],0x3f
c000751a:	83 d7 ff             	adc    edi,0xffffffff
c000751d:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c0007521:	89 7c 24 7c          	mov    DWORD PTR [esp+0x7c],edi
c0007525:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c000752d:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c0007531:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c0007535:	89 04 24             	mov    DWORD PTR [esp],eax
c0007538:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000753c:	31 c0                	xor    eax,eax
c000753e:	ba 7f 00 00 00       	mov    edx,0x7f
c0007543:	89 c7                	mov    edi,eax
c0007545:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007548:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c000754c:	0f 83 c5 0a 00 00    	jae    c0008017 <f_mkfs+0xcc5>
c0007552:	89 df                	mov    edi,ebx
c0007554:	c1 ef 09             	shr    edi,0x9
c0007557:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c000755b:	8b bc 24 bc 00 00 00 	mov    edi,DWORD PTR [esp+0xbc]
c0007562:	c1 ef 09             	shr    edi,0x9
c0007565:	f6 44 24 3f 04       	test   BYTE PTR [esp+0x3f],0x4
c000756a:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000756e:	74 29                	je     c0007599 <f_mkfs+0x247>
c0007570:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c0007576:	b9 ff ff ff 03       	mov    ecx,0x3ffffff
c000757b:	0f 97 c2             	seta   dl
c000757e:	3b 0c 24             	cmp    ecx,DWORD PTR [esp]
c0007581:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007585:	0f 92 c0             	setb   al
c0007588:	08 c2                	or     dl,al
c000758a:	75 5b                	jne    c00075e7 <f_mkfs+0x295>
c000758c:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c0007590:	83 e0 07             	and    eax,0x7
c0007593:	3c 04                	cmp    al,0x4
c0007595:	74 50                	je     c00075e7 <f_mkfs+0x295>
c0007597:	eb 1b                	jmp    c00075b4 <f_mkfs+0x262>
c0007599:	83 7c 24 04 00       	cmp    DWORD PTR [esp+0x4],0x0
c000759e:	0f 87 73 0a 00 00    	ja     c0008017 <f_mkfs+0xcc5>
c00075a4:	81 fb ff 01 01 00    	cmp    ebx,0x101ff
c00075aa:	76 08                	jbe    c00075b4 <f_mkfs+0x262>
c00075ac:	c7 44 24 08 80 00 00 00 	mov    DWORD PTR [esp+0x8],0x80
c00075b4:	8a 44 24 3f          	mov    al,BYTE PTR [esp+0x3f]
c00075b8:	8a 4c 24 3f          	mov    cl,BYTE PTR [esp+0x3f]
c00075bc:	83 e0 01             	and    eax,0x1
c00075bf:	80 e1 02             	and    cl,0x2
c00075c2:	88 4c 24 54          	mov    BYTE PTR [esp+0x54],cl
c00075c6:	74 0d                	je     c00075d5 <f_mkfs+0x283>
c00075c8:	84 c0                	test   al,al
c00075ca:	0f 84 53 09 00 00    	je     c0007f23 <f_mkfs+0xbd1>
c00075d0:	e9 12 08 00 00       	jmp    c0007de7 <f_mkfs+0xa95>
c00075d5:	bb 13 00 00 00       	mov    ebx,0x13
c00075da:	84 c0                	test   al,al
c00075dc:	0f 85 05 08 00 00    	jne    c0007de7 <f_mkfs+0xa95>
c00075e2:	e9 39 0e 00 00       	jmp    c0008420 <f_mkfs+0x10ce>
c00075e7:	31 c0                	xor    eax,eax
c00075e9:	ba ff 0f 00 00       	mov    edx,0xfff
c00075ee:	89 c7                	mov    edi,eax
c00075f0:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c00075f3:	1b 7c 24 04          	sbb    edi,DWORD PTR [esp+0x4]
c00075f7:	0f 83 1a 0a 00 00    	jae    c0008017 <f_mkfs+0xcc5>
c00075fd:	81 fb ff 01 00 00    	cmp    ebx,0x1ff
c0007603:	77 39                	ja     c000763e <f_mkfs+0x2ec>
c0007605:	ba ff ff 07 00       	mov    edx,0x7ffff
c000760a:	c7 44 24 08 08 00 00 00 	mov    DWORD PTR [esp+0x8],0x8
c0007612:	3b 14 24             	cmp    edx,DWORD PTR [esp]
c0007615:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007619:	73 08                	jae    c0007623 <f_mkfs+0x2d1>
c000761b:	c7 44 24 08 40 00 00 00 	mov    DWORD PTR [esp+0x8],0x40
c0007623:	b8 ff ff ff 03       	mov    eax,0x3ffffff
c0007628:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c000762b:	b8 00 00 00 00       	mov    eax,0x0
c0007630:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c0007634:	73 08                	jae    c000763e <f_mkfs+0x2ec>
c0007636:	c7 44 24 08 00 01 00 00 	mov    DWORD PTR [esp+0x8],0x100
c000763e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0007642:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0007646:	83 c0 20             	add    eax,0x20
c0007649:	83 d2 00             	adc    edx,0x0
c000764c:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007650:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0007654:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007658:	31 d2                	xor    edx,edx
c000765a:	31 ff                	xor    edi,edi
c000765c:	52                   	push   edx
c000765d:	89 fb                	mov    ebx,edi
c000765f:	50                   	push   eax
c0007660:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007664:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0007668:	e8 57 fb 01 00       	call   c00271c4 <__udivdi3>
c000766d:	83 c4 10             	add    esp,0x10
c0007670:	c1 e0 02             	shl    eax,0x2
c0007673:	8b 74 24 74          	mov    esi,DWORD PTR [esp+0x74]
c0007677:	05 07 02 00 00       	add    eax,0x207
c000767c:	89 f1                	mov    ecx,esi
c000767e:	c1 e8 09             	shr    eax,0x9
c0007681:	83 c1 ff             	add    ecx,0xffffffff
c0007684:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0007688:	83 d3 ff             	adc    ebx,0xffffffff
c000768b:	03 4c 24 48          	add    ecx,DWORD PTR [esp+0x48]
c000768f:	13 5c 24 4c          	adc    ebx,DWORD PTR [esp+0x4c]
c0007693:	31 d2                	xor    edx,edx
c0007695:	01 c8                	add    eax,ecx
c0007697:	11 da                	adc    edx,ebx
c0007699:	89 c1                	mov    ecx,eax
c000769b:	f7 de                	neg    esi
c000769d:	89 d0                	mov    eax,edx
c000769f:	83 d7 00             	adc    edi,0x0
c00076a2:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00076a6:	f7 df                	neg    edi
c00076a8:	21 f1                	and    ecx,esi
c00076aa:	21 f8                	and    eax,edi
c00076ac:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c00076b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00076b4:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00076b8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00076bc:	2b 4c 24 10          	sub    ecx,DWORD PTR [esp+0x10]
c00076c0:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076c3:	1b 5c 24 14          	sbb    ebx,DWORD PTR [esp+0x14]
c00076c7:	0f ac d0 01          	shrd   eax,edx,0x1
c00076cb:	89 df                	mov    edi,ebx
c00076cd:	d1 ea                	shr    edx,1
c00076cf:	39 c1                	cmp    ecx,eax
c00076d1:	19 d7                	sbb    edi,edx
c00076d3:	0f 83 3e 09 00 00    	jae    c0008017 <f_mkfs+0xcc5>
c00076d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00076dd:	31 d2                	xor    edx,edx
c00076df:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c00076e3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00076e7:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c00076eb:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00076ee:	03 44 24 68          	add    eax,DWORD PTR [esp+0x68]
c00076f2:	2b 44 24 6c          	sub    eax,DWORD PTR [esp+0x6c]
c00076f6:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c00076fa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00076fe:	83 f8 0f             	cmp    eax,0xf
c0007701:	0f 86 10 09 00 00    	jbe    c0008017 <f_mkfs+0xcc5>
c0007707:	81 7c 24 38 fd ff ff 7f 	cmp    DWORD PTR [esp+0x38],0x7ffffffd
c000770f:	0f 87 02 09 00 00    	ja     c0008017 <f_mkfs+0xcc5>
c0007715:	31 d2                	xor    edx,edx
c0007717:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000771b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0007723:	83 c0 07             	add    eax,0x7
c0007726:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000772e:	c1 e8 03             	shr    eax,0x3
c0007731:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0007738:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000773c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007740:	c1 e0 09             	shl    eax,0x9
c0007743:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007747:	48                   	dec    eax
c0007748:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000774c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c0007750:	03 44 24 50          	add    eax,DWORD PTR [esp+0x50]
c0007754:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c0007758:	31 d2                	xor    edx,edx
c000775a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000775e:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c0007765:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007769:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c000776e:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c0007772:	13 54 24 1c          	adc    edx,DWORD PTR [esp+0x1c]
c0007776:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000777a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000777e:	31 ff                	xor    edi,edi
c0007780:	31 f6                	xor    esi,esi
c0007782:	31 db                	xor    ebx,ebx
c0007784:	85 ff                	test   edi,edi
c0007786:	74 05                	je     c000778d <f_mkfs+0x43b>
c0007788:	4f                   	dec    edi
c0007789:	74 44                	je     c00077cf <f_mkfs+0x47d>
c000778b:	eb 4f                	jmp    c00077dc <f_mkfs+0x48a>
c000778d:	83 ec 0c             	sub    esp,0xc
c0007790:	0f b7 c3             	movzx  eax,bx
c0007793:	50                   	push   eax
c0007794:	e8 05 0e 00 00       	call   c000859e <ff_wtoupper>
c0007799:	83 c4 10             	add    esp,0x10
c000779c:	89 c1                	mov    ecx,eax
c000779e:	8d 53 01             	lea    edx,[ebx+0x1]
c00077a1:	66 39 c3             	cmp    bx,ax
c00077a4:	75 3e                	jne    c00077e4 <f_mkfs+0x492>
c00077a6:	be 01 00 00 00       	mov    esi,0x1
c00077ab:	89 df                	mov    edi,ebx
c00077ad:	66 01 f7             	add    di,si
c00077b0:	75 07                	jne    c00077b9 <f_mkfs+0x467>
c00077b2:	83 fe 7f             	cmp    esi,0x7f
c00077b5:	77 31                	ja     c00077e8 <f_mkfs+0x496>
c00077b7:	eb 16                	jmp    c00077cf <f_mkfs+0x47d>
c00077b9:	83 ec 0c             	sub    esp,0xc
c00077bc:	0f b7 ff             	movzx  edi,di
c00077bf:	57                   	push   edi
c00077c0:	e8 d9 0d 00 00       	call   c000859e <ff_wtoupper>
c00077c5:	83 c4 10             	add    esp,0x10
c00077c8:	39 c7                	cmp    edi,eax
c00077ca:	75 e6                	jne    c00077b2 <f_mkfs+0x460>
c00077cc:	46                   	inc    esi
c00077cd:	eb dc                	jmp    c00077ab <f_mkfs+0x459>
c00077cf:	31 c0                	xor    eax,eax
c00077d1:	89 d9                	mov    ecx,ebx
c00077d3:	4e                   	dec    esi
c00077d4:	0f 95 c0             	setne  al
c00077d7:	43                   	inc    ebx
c00077d8:	89 c7                	mov    edi,eax
c00077da:	eb 14                	jmp    c00077f0 <f_mkfs+0x49e>
c00077dc:	89 f1                	mov    ecx,esi
c00077de:	01 f3                	add    ebx,esi
c00077e0:	31 ff                	xor    edi,edi
c00077e2:	eb 0c                	jmp    c00077f0 <f_mkfs+0x49e>
c00077e4:	89 d3                	mov    ebx,edx
c00077e6:	eb 08                	jmp    c00077f0 <f_mkfs+0x49e>
c00077e8:	bf 02 00 00 00       	mov    edi,0x2
c00077ed:	83 c9 ff             	or     ecx,0xffffffff
c00077f0:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c00077f4:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00077f7:	88 4c 05 00          	mov    BYTE PTR [ebp+eax*1+0x0],cl
c00077fb:	0f b6 c1             	movzx  eax,cl
c00077fe:	e8 3a a9 ff ff       	call   c000213d <xsum32>
c0007803:	66 c1 e9 08          	shr    cx,0x8
c0007807:	89 c2                	mov    edx,eax
c0007809:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000780c:	88 4c 05 01          	mov    BYTE PTR [ebp+eax*1+0x1],cl
c0007810:	0f b7 c1             	movzx  eax,cx
c0007813:	e8 25 a9 ff ff       	call   c000213d <xsum32>
c0007818:	83 44 24 54 02       	add    DWORD PTR [esp+0x54],0x2
c000781d:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007821:	66 85 db             	test   bx,bx
c0007824:	74 1f                	je     c0007845 <f_mkfs+0x4f3>
c0007826:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007829:	8b 94 24 bc 00 00 00 	mov    edx,DWORD PTR [esp+0xbc]
c0007830:	83 c0 02             	add    eax,0x2
c0007833:	81 e2 00 fe ff ff    	and    edx,0xfffffe00
c0007839:	39 c2                	cmp    edx,eax
c000783b:	74 08                	je     c0007845 <f_mkfs+0x4f3>
c000783d:	89 04 24             	mov    DWORD PTR [esp],eax
c0007840:	e9 3f ff ff ff       	jmp    c0007784 <f_mkfs+0x432>
c0007845:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007848:	83 ec 0c             	sub    esp,0xc
c000784b:	05 01 02 00 00       	add    eax,0x201
c0007850:	c1 e8 09             	shr    eax,0x9
c0007853:	50                   	push   eax
c0007854:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0007858:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000785c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0007860:	55                   	push   ebp
c0007861:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007865:	e8 a3 a3 ff ff       	call   c0001c0d <disk_write>
c000786a:	83 c4 20             	add    esp,0x20
c000786d:	85 c0                	test   eax,eax
c000786f:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0007872:	0f 85 8b 0b 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c0007878:	89 d0                	mov    eax,edx
c000787a:	31 d2                	xor    edx,edx
c000787c:	01 44 24 40          	add    DWORD PTR [esp+0x40],eax
c0007880:	11 54 24 44          	adc    DWORD PTR [esp+0x44],edx
c0007884:	66 85 db             	test   bx,bx
c0007887:	74 04                	je     c000788d <f_mkfs+0x53b>
c0007889:	31 c0                	xor    eax,eax
c000788b:	eb b0                	jmp    c000783d <f_mkfs+0x4eb>
c000788d:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007891:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c0007895:	03 44 24 54          	add    eax,DWORD PTR [esp+0x54]
c0007899:	8d 9e ff 01 00 00    	lea    ebx,[esi+0x1ff]
c000789f:	31 d2                	xor    edx,edx
c00078a1:	c7 84 24 88 00 00 00 01 00 00 00 	mov    DWORD PTR [esp+0x88],0x1
c00078ac:	f7 74 24 28          	div    DWORD PTR [esp+0x28]
c00078b0:	c1 eb 09             	shr    ebx,0x9
c00078b3:	89 84 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],eax
c00078ba:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00078be:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c00078c2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00078c6:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c00078ca:	8d 70 01             	lea    esi,[eax+0x1]
c00078cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00078d1:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00078d5:	8b 84 24 bc 00 00 00 	mov    eax,DWORD PTR [esp+0xbc]
c00078dc:	31 d2                	xor    edx,edx
c00078de:	25 00 fe ff ff       	and    eax,0xfffffe00
c00078e3:	89 04 24             	mov    DWORD PTR [esp],eax
c00078e6:	89 c1                	mov    ecx,eax
c00078e8:	89 e8                	mov    eax,ebp
c00078ea:	e8 e7 a3 ff ff       	call   c0001cd6 <mem_set>
c00078ef:	31 c0                	xor    eax,eax
c00078f1:	39 04 24             	cmp    DWORD PTR [esp],eax
c00078f4:	76 10                	jbe    c0007906 <f_mkfs+0x5b4>
c00078f6:	83 fe 07             	cmp    esi,0x7
c00078f9:	76 0b                	jbe    c0007906 <f_mkfs+0x5b4>
c00078fb:	40                   	inc    eax
c00078fc:	83 ee 08             	sub    esi,0x8
c00078ff:	c6 44 05 ff ff       	mov    BYTE PTR [ebp+eax*1-0x1],0xff
c0007904:	eb eb                	jmp    c00078f1 <f_mkfs+0x59f>
c0007906:	b2 01                	mov    dl,0x1
c0007908:	8d 4c 05 00          	lea    ecx,[ebp+eax*1+0x0]
c000790c:	85 f6                	test   esi,esi
c000790e:	74 0c                	je     c000791c <f_mkfs+0x5ca>
c0007910:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007913:	76 07                	jbe    c000791c <f_mkfs+0x5ca>
c0007915:	08 11                	or     BYTE PTR [ecx],dl
c0007917:	4e                   	dec    esi
c0007918:	d1 e2                	shl    edx,1
c000791a:	eb f0                	jmp    c000790c <f_mkfs+0x5ba>
c000791c:	89 df                	mov    edi,ebx
c000791e:	3b 5c 24 20          	cmp    ebx,DWORD PTR [esp+0x20]
c0007922:	76 04                	jbe    c0007928 <f_mkfs+0x5d6>
c0007924:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0007928:	83 ec 0c             	sub    esp,0xc
c000792b:	57                   	push   edi
c000792c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007930:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007934:	55                   	push   ebp
c0007935:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007939:	e8 cf a2 ff ff       	call   c0001c0d <disk_write>
c000793e:	83 c4 20             	add    esp,0x20
c0007941:	85 c0                	test   eax,eax
c0007943:	0f 85 ba 0a 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c0007949:	31 d2                	xor    edx,edx
c000794b:	01 7c 24 28          	add    DWORD PTR [esp+0x28],edi
c000794f:	11 54 24 2c          	adc    DWORD PTR [esp+0x2c],edx
c0007953:	29 fb                	sub    ebx,edi
c0007955:	0f 85 7a ff ff ff    	jne    c00078d5 <f_mkfs+0x583>
c000795b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000795f:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0007967:	31 f6                	xor    esi,esi
c0007969:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000796d:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007970:	31 d2                	xor    edx,edx
c0007972:	89 e8                	mov    eax,ebp
c0007974:	e8 5d a3 ff ff       	call   c0001cd6 <mem_set>
c0007979:	31 c9                	xor    ecx,ecx
c000797b:	85 db                	test   ebx,ebx
c000797d:	75 40                	jne    c00079bf <f_mkfs+0x66d>
c000797f:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c0007984:	89 e8                	mov    eax,ebp
c0007986:	bb 02 00 00 00       	mov    ebx,0x2
c000798b:	e8 28 a3 ff ff       	call   c0001cb8 <st_dword>
c0007990:	8d 45 04             	lea    eax,[ebp+0x4]
c0007993:	83 ca ff             	or     edx,0xffffffff
c0007996:	e8 1d a3 ff ff       	call   c0001cb8 <st_dword>
c000799b:	b9 08 00 00 00       	mov    ecx,0x8
c00079a0:	eb 1d                	jmp    c00079bf <f_mkfs+0x66d>
c00079a2:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079a5:	76 3b                	jbe    c00079e2 <f_mkfs+0x690>
c00079a7:	43                   	inc    ebx
c00079a8:	83 fe 01             	cmp    esi,0x1
c00079ab:	89 da                	mov    edx,ebx
c00079ad:	77 03                	ja     c00079b2 <f_mkfs+0x660>
c00079af:	83 ca ff             	or     edx,0xffffffff
c00079b2:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c00079b6:	4e                   	dec    esi
c00079b7:	e8 fc a2 ff ff       	call   c0001cb8 <st_dword>
c00079bc:	83 c1 04             	add    ecx,0x4
c00079bf:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00079c3:	85 f6                	test   esi,esi
c00079c5:	75 db                	jne    c00079a2 <f_mkfs+0x650>
c00079c7:	83 7c 24 28 02       	cmp    DWORD PTR [esp+0x28],0x2
c00079cc:	77 14                	ja     c00079e2 <f_mkfs+0x690>
c00079ce:	ff 44 24 28          	inc    DWORD PTR [esp+0x28]
c00079d2:	8b b4 84 80 00 00 00 	mov    esi,DWORD PTR [esp+eax*4+0x80]
c00079d9:	85 f6                	test   esi,esi
c00079db:	74 05                	je     c00079e2 <f_mkfs+0x690>
c00079dd:	39 0c 24             	cmp    DWORD PTR [esp],ecx
c00079e0:	77 dd                	ja     c00079bf <f_mkfs+0x66d>
c00079e2:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00079e6:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00079ea:	39 cf                	cmp    edi,ecx
c00079ec:	76 02                	jbe    c00079f0 <f_mkfs+0x69e>
c00079ee:	89 cf                	mov    edi,ecx
c00079f0:	83 ec 0c             	sub    esp,0xc
c00079f3:	57                   	push   edi
c00079f4:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079f8:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c00079fc:	55                   	push   ebp
c00079fd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007a01:	e8 07 a2 ff ff       	call   c0001c0d <disk_write>
c0007a06:	83 c4 20             	add    esp,0x20
c0007a09:	85 c0                	test   eax,eax
c0007a0b:	0f 85 f2 09 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c0007a11:	31 d2                	xor    edx,edx
c0007a13:	01 7c 24 48          	add    DWORD PTR [esp+0x48],edi
c0007a17:	11 54 24 4c          	adc    DWORD PTR [esp+0x4c],edx
c0007a1b:	29 7c 24 40          	sub    DWORD PTR [esp+0x40],edi
c0007a1f:	0f 85 48 ff ff ff    	jne    c000796d <f_mkfs+0x61b>
c0007a25:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007a28:	31 d2                	xor    edx,edx
c0007a2a:	89 e8                	mov    eax,ebp
c0007a2c:	31 ff                	xor    edi,edi
c0007a2e:	e8 a3 a2 ff ff       	call   c0001cd6 <mem_set>
c0007a33:	8d 45 34             	lea    eax,[ebp+0x34]
c0007a36:	ba 02 00 00 00       	mov    edx,0x2
c0007a3b:	c6 45 00 83          	mov    BYTE PTR [ebp+0x0],0x83
c0007a3f:	c6 45 20 81          	mov    BYTE PTR [ebp+0x20],0x81
c0007a43:	e8 70 a2 ff ff       	call   c0001cb8 <st_dword>
c0007a48:	8d 45 38             	lea    eax,[ebp+0x38]
c0007a4b:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c0007a4f:	e8 64 a2 ff ff       	call   c0001cb8 <st_dword>
c0007a54:	8d 45 44             	lea    eax,[ebp+0x44]
c0007a57:	8b 54 24 58          	mov    edx,DWORD PTR [esp+0x58]
c0007a5b:	c6 45 40 82          	mov    BYTE PTR [ebp+0x40],0x82
c0007a5f:	e8 54 a2 ff ff       	call   c0001cb8 <st_dword>
c0007a64:	8d 45 54             	lea    eax,[ebp+0x54]
c0007a67:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0007a6b:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007a6f:	83 c2 02             	add    edx,0x2
c0007a72:	e8 41 a2 ff ff       	call   c0001cb8 <st_dword>
c0007a77:	8d 45 58             	lea    eax,[ebp+0x58]
c0007a7a:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0007a7e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0007a82:	e8 31 a2 ff ff       	call   c0001cb8 <st_dword>
c0007a87:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a8b:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c0007a90:	89 c6                	mov    esi,eax
c0007a92:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007a96:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c0007a9a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007a9d:	13 7c 24 1c          	adc    edi,DWORD PTR [esp+0x1c]
c0007aa1:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c0007aa4:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0007aa8:	39 cb                	cmp    ebx,ecx
c0007aaa:	76 02                	jbe    c0007aae <f_mkfs+0x75c>
c0007aac:	89 cb                	mov    ebx,ecx
c0007aae:	83 ec 0c             	sub    esp,0xc
c0007ab1:	53                   	push   ebx
c0007ab2:	57                   	push   edi
c0007ab3:	56                   	push   esi
c0007ab4:	55                   	push   ebp
c0007ab5:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ab9:	e8 4f a1 ff ff       	call   c0001c0d <disk_write>
c0007abe:	83 c4 20             	add    esp,0x20
c0007ac1:	85 c0                	test   eax,eax
c0007ac3:	0f 85 3a 09 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c0007ac9:	31 d2                	xor    edx,edx
c0007acb:	b9 00 02 00 00       	mov    ecx,0x200
c0007ad0:	89 e8                	mov    eax,ebp
c0007ad2:	e8 ff a1 ff ff       	call   c0001cd6 <mem_set>
c0007ad7:	31 d2                	xor    edx,edx
c0007ad9:	01 de                	add    esi,ebx
c0007adb:	11 d7                	adc    edi,edx
c0007add:	29 1c 24             	sub    DWORD PTR [esp],ebx
c0007ae0:	75 bf                	jne    c0007aa1 <f_mkfs+0x74f>
c0007ae2:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0007ae6:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0007aea:	c7 44 24 30 02 00 00 00 	mov    DWORD PTR [esp+0x30],0x2
c0007af2:	b9 00 02 00 00       	mov    ecx,0x200
c0007af7:	31 d2                	xor    edx,edx
c0007af9:	89 e8                	mov    eax,ebp
c0007afb:	e8 d6 a1 ff ff       	call   c0001cd6 <mem_set>
c0007b00:	b9 0b 00 00 00       	mov    ecx,0xb
c0007b05:	ba 60 9d 02 c0       	mov    edx,0xc0029d60
c0007b0a:	89 e8                	mov    eax,ebp
c0007b0c:	e8 b0 a1 ff ff       	call   c0001cc1 <mem_cpy>
c0007b11:	8d 45 40             	lea    eax,[ebp+0x40]
c0007b14:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0007b18:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0007b1c:	e8 9a a1 ff ff       	call   c0001cbb <st_qword>
c0007b21:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c0007b25:	8d 45 48             	lea    eax,[ebp+0x48]
c0007b28:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c0007b2c:	e8 8a a1 ff ff       	call   c0001cbb <st_qword>
c0007b31:	8d 45 50             	lea    eax,[ebp+0x50]
c0007b34:	ba 20 00 00 00       	mov    edx,0x20
c0007b39:	e8 7a a1 ff ff       	call   c0001cb8 <st_dword>
c0007b3e:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0007b42:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0007b46:	e8 6d a1 ff ff       	call   c0001cb8 <st_dword>
c0007b4b:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c0007b4f:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0007b53:	2b 54 24 68          	sub    edx,DWORD PTR [esp+0x68]
c0007b57:	e8 5c a1 ff ff       	call   c0001cb8 <st_dword>
c0007b5c:	8d 45 5c             	lea    eax,[ebp+0x5c]
c0007b5f:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007b63:	e8 50 a1 ff ff       	call   c0001cb8 <st_dword>
c0007b68:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0007b6c:	8d 50 02             	lea    edx,[eax+0x2]
c0007b6f:	8d 45 60             	lea    eax,[ebp+0x60]
c0007b72:	e8 41 a1 ff ff       	call   c0001cb8 <st_dword>
c0007b77:	8d 45 64             	lea    eax,[ebp+0x64]
c0007b7a:	ba 00 00 21 50       	mov    edx,0x50210000
c0007b7f:	e8 34 a1 ff ff       	call   c0001cb8 <st_dword>
c0007b84:	8d 45 68             	lea    eax,[ebp+0x68]
c0007b87:	ba 00 01 00 00       	mov    edx,0x100
c0007b8c:	e8 23 a1 ff ff       	call   c0001cb4 <st_word>
c0007b91:	c6 45 6c 00          	mov    BYTE PTR [ebp+0x6c],0x0
c0007b95:	b8 0a 00 00 00       	mov    eax,0xa
c0007b9a:	48                   	dec    eax
c0007b9b:	74 05                	je     c0007ba2 <f_mkfs+0x850>
c0007b9d:	fe 45 6c             	inc    BYTE PTR [ebp+0x6c]
c0007ba0:	eb f8                	jmp    c0007b9a <f_mkfs+0x848>
c0007ba2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0007ba6:	c6 45 6d 00          	mov    BYTE PTR [ebp+0x6d],0x0
c0007baa:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0007bae:	d1 6c 24 18          	shr    DWORD PTR [esp+0x18],1
c0007bb2:	74 05                	je     c0007bb9 <f_mkfs+0x867>
c0007bb4:	fe 45 6d             	inc    BYTE PTR [ebp+0x6d]
c0007bb7:	eb f5                	jmp    c0007bae <f_mkfs+0x85c>
c0007bb9:	8d 45 78             	lea    eax,[ebp+0x78]
c0007bbc:	ba eb fe 00 00       	mov    edx,0xfeeb
c0007bc1:	66 c7 45 6e 01 80    	mov    WORD PTR [ebp+0x6e],0x8001
c0007bc7:	31 db                	xor    ebx,ebx
c0007bc9:	e8 e6 a0 ff ff       	call   c0001cb4 <st_word>
c0007bce:	8d 85 fe 01 00 00    	lea    eax,[ebp+0x1fe]
c0007bd4:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007bd9:	89 04 24             	mov    DWORD PTR [esp],eax
c0007bdc:	e8 d3 a0 ff ff       	call   c0001cb4 <st_word>
c0007be1:	31 c9                	xor    ecx,ecx
c0007be3:	8d 41 96             	lea    eax,[ecx-0x6a]
c0007be6:	83 f8 01             	cmp    eax,0x1
c0007be9:	76 13                	jbe    c0007bfe <f_mkfs+0x8ac>
c0007beb:	83 f9 70             	cmp    ecx,0x70
c0007bee:	74 0e                	je     c0007bfe <f_mkfs+0x8ac>
c0007bf0:	89 da                	mov    edx,ebx
c0007bf2:	0f b6 44 0d 00       	movzx  eax,BYTE PTR [ebp+ecx*1+0x0]
c0007bf7:	e8 41 a5 ff ff       	call   c000213d <xsum32>
c0007bfc:	89 c3                	mov    ebx,eax
c0007bfe:	41                   	inc    ecx
c0007bff:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c05:	75 dc                	jne    c0007be3 <f_mkfs+0x891>
c0007c07:	89 f0                	mov    eax,esi
c0007c09:	89 fa                	mov    edx,edi
c0007c0b:	83 c0 01             	add    eax,0x1
c0007c0e:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007c12:	83 d2 00             	adc    edx,0x0
c0007c15:	83 ec 0c             	sub    esp,0xc
c0007c18:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007c1c:	6a 01                	push   0x1
c0007c1e:	57                   	push   edi
c0007c1f:	56                   	push   esi
c0007c20:	55                   	push   ebp
c0007c21:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007c25:	e8 e3 9f ff ff       	call   c0001c0d <disk_write>
c0007c2a:	83 c4 20             	add    esp,0x20
c0007c2d:	85 c0                	test   eax,eax
c0007c2f:	0f 85 ce 07 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c0007c35:	31 d2                	xor    edx,edx
c0007c37:	b9 00 02 00 00       	mov    ecx,0x200
c0007c3c:	89 e8                	mov    eax,ebp
c0007c3e:	e8 93 a0 ff ff       	call   c0001cd6 <mem_set>
c0007c43:	ba 55 aa 00 00       	mov    edx,0xaa55
c0007c48:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007c4b:	e8 64 a0 ff ff       	call   c0001cb4 <st_word>
c0007c50:	89 f0                	mov    eax,esi
c0007c52:	89 fa                	mov    edx,edi
c0007c54:	83 c0 09             	add    eax,0x9
c0007c57:	83 d2 00             	adc    edx,0x0
c0007c5a:	89 04 24             	mov    DWORD PTR [esp],eax
c0007c5d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0007c61:	31 c9                	xor    ecx,ecx
c0007c63:	41                   	inc    ecx
c0007c64:	89 da                	mov    edx,ebx
c0007c66:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007c6b:	e8 cd a4 ff ff       	call   c000213d <xsum32>
c0007c70:	89 c3                	mov    ebx,eax
c0007c72:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007c78:	75 e9                	jne    c0007c63 <f_mkfs+0x911>
c0007c7a:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007c7e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0007c82:	83 c0 01             	add    eax,0x1
c0007c85:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0007c89:	83 d2 00             	adc    edx,0x0
c0007c8c:	83 ec 0c             	sub    esp,0xc
c0007c8f:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c0007c93:	6a 01                	push   0x1
c0007c95:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c99:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0007c9d:	55                   	push   ebp
c0007c9e:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007ca2:	e8 66 9f ff ff       	call   c0001c0d <disk_write>
c0007ca7:	83 c4 20             	add    esp,0x20
c0007caa:	85 c0                	test   eax,eax
c0007cac:	0f 85 51 07 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c0007cb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0007cb6:	39 44 24 24          	cmp    DWORD PTR [esp+0x24],eax
c0007cba:	75 09                	jne    c0007cc5 <f_mkfs+0x973>
c0007cbc:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007cbf:	39 44 24 20          	cmp    DWORD PTR [esp+0x20],eax
c0007cc3:	74 12                	je     c0007cd7 <f_mkfs+0x985>
c0007cc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0007cc9:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0007ccd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0007cd1:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0007cd5:	eb 8a                	jmp    c0007c61 <f_mkfs+0x90f>
c0007cd7:	31 d2                	xor    edx,edx
c0007cd9:	b9 00 02 00 00       	mov    ecx,0x200
c0007cde:	89 e8                	mov    eax,ebp
c0007ce0:	e8 f1 9f ff ff       	call   c0001cd6 <mem_set>
c0007ce5:	83 c6 0b             	add    esi,0xb
c0007ce8:	83 d7 00             	adc    edi,0x0
c0007ceb:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c0007cef:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c0007cf3:	31 c9                	xor    ecx,ecx
c0007cf5:	41                   	inc    ecx
c0007cf6:	89 da                	mov    edx,ebx
c0007cf8:	0f b6 44 0d ff       	movzx  eax,BYTE PTR [ebp+ecx*1-0x1]
c0007cfd:	e8 3b a4 ff ff       	call   c000213d <xsum32>
c0007d02:	89 c3                	mov    ebx,eax
c0007d04:	81 f9 00 02 00 00    	cmp    ecx,0x200
c0007d0a:	75 e9                	jne    c0007cf5 <f_mkfs+0x9a3>
c0007d0c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d0f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d13:	83 c6 01             	add    esi,0x1
c0007d16:	83 d7 00             	adc    edi,0x0
c0007d19:	83 ec 0c             	sub    esp,0xc
c0007d1c:	6a 01                	push   0x1
c0007d1e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d22:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0007d26:	55                   	push   ebp
c0007d27:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d2b:	e8 dd 9e ff ff       	call   c0001c0d <disk_write>
c0007d30:	83 c4 20             	add    esp,0x20
c0007d33:	85 c0                	test   eax,eax
c0007d35:	0f 85 c8 06 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c0007d3b:	3b 7c 24 24          	cmp    edi,DWORD PTR [esp+0x24]
c0007d3f:	75 06                	jne    c0007d47 <f_mkfs+0x9f5>
c0007d41:	3b 74 24 20          	cmp    esi,DWORD PTR [esp+0x20]
c0007d45:	74 09                	je     c0007d50 <f_mkfs+0x9fe>
c0007d47:	89 34 24             	mov    DWORD PTR [esp],esi
c0007d4a:	89 7c 24 04          	mov    DWORD PTR [esp+0x4],edi
c0007d4e:	eb a3                	jmp    c0007cf3 <f_mkfs+0x9a1>
c0007d50:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0007d54:	89 da                	mov    edx,ebx
c0007d56:	01 e8                	add    eax,ebp
c0007d58:	e8 5b 9f ff ff       	call   c0001cb8 <st_dword>
c0007d5d:	83 44 24 18 04       	add    DWORD PTR [esp+0x18],0x4
c0007d62:	81 7c 24 18 00 02 00 00 	cmp    DWORD PTR [esp+0x18],0x200
c0007d6a:	75 e4                	jne    c0007d50 <f_mkfs+0x9fe>
c0007d6c:	8b 34 24             	mov    esi,DWORD PTR [esp]
c0007d6f:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c0007d73:	83 c6 02             	add    esi,0x2
c0007d76:	83 d7 00             	adc    edi,0x0
c0007d79:	83 ec 0c             	sub    esp,0xc
c0007d7c:	6a 01                	push   0x1
c0007d7e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d82:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0007d86:	55                   	push   ebp
c0007d87:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0007d8b:	e8 7d 9e ff ff       	call   c0001c0d <disk_write>
c0007d90:	83 c4 20             	add    esp,0x20
c0007d93:	85 c0                	test   eax,eax
c0007d95:	0f 85 68 06 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c0007d9b:	83 7c 24 30 01       	cmp    DWORD PTR [esp+0x30],0x1
c0007da0:	74 0d                	je     c0007daf <f_mkfs+0xa5d>
c0007da2:	c7 44 24 30 01 00 00 00 	mov    DWORD PTR [esp+0x30],0x1
c0007daa:	e9 43 fd ff ff       	jmp    c0007af2 <f_mkfs+0x7a0>
c0007daf:	b1 07                	mov    cl,0x7
c0007db1:	e9 e3 05 00 00       	jmp    c0008399 <f_mkfs+0x1047>
c0007db6:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0007dbb:	0f 85 4f 02 00 00    	jne    c0008010 <f_mkfs+0xcbe>
c0007dc1:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007dc6:	0f 86 22 02 00 00    	jbe    c0007fee <f_mkfs+0xc9c>
c0007dcc:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007dd1:	0f 85 81 06 00 00    	jne    c0008458 <f_mkfs+0x1106>
c0007dd7:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007dda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0007dde:	83 f8 40             	cmp    eax,0x40
c0007de1:	0f 87 51 06 00 00    	ja     c0008438 <f_mkfs+0x10e6>
c0007de7:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007deb:	85 ff                	test   edi,edi
c0007ded:	75 1c                	jne    c0007e0b <f_mkfs+0xab9>
c0007def:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007df2:	ba 60 9c 02 c0       	mov    edx,0xc0029c60
c0007df7:	c1 e9 0c             	shr    ecx,0xc
c0007dfa:	bf 01 00 00 00       	mov    edi,0x1
c0007dff:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007e02:	66 85 c0             	test   ax,ax
c0007e05:	0f 85 95 01 00 00    	jne    c0007fa0 <f_mkfs+0xc4e>
c0007e0b:	31 d2                	xor    edx,edx
c0007e0d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0007e10:	f7 f7                	div    edi
c0007e12:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007e17:	0f 86 95 01 00 00    	jbe    c0007fb2 <f_mkfs+0xc60>
c0007e1d:	83 c0 02             	add    eax,0x2
c0007e20:	c6 44 24 18 02       	mov    BYTE PTR [esp+0x18],0x2
c0007e25:	01 c0                	add    eax,eax
c0007e27:	05 ff 01 00 00       	add    eax,0x1ff
c0007e2c:	be 01 00 00 00       	mov    esi,0x1
c0007e31:	c1 e8 09             	shr    eax,0x9
c0007e34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0007e38:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0007e3c:	c1 e0 05             	shl    eax,0x5
c0007e3f:	c1 e8 09             	shr    eax,0x9
c0007e42:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0007e46:	0f b6 44 24 48       	movzx  eax,BYTE PTR [esp+0x48]
c0007e4b:	31 d2                	xor    edx,edx
c0007e4d:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0007e51:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0007e55:	89 f0                	mov    eax,esi
c0007e57:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c0007e5b:	13 54 24 14          	adc    edx,DWORD PTR [esp+0x14]
c0007e5f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0007e63:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0007e67:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0007e6b:	31 d2                	xor    edx,edx
c0007e6d:	0f af 44 24 40       	imul   eax,DWORD PTR [esp+0x40]
c0007e72:	03 44 24 30          	add    eax,DWORD PTR [esp+0x30]
c0007e76:	13 54 24 34          	adc    edx,DWORD PTR [esp+0x34]
c0007e7a:	31 db                	xor    ebx,ebx
c0007e7c:	01 c8                	add    eax,ecx
c0007e7e:	11 da                	adc    edx,ebx
c0007e80:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0007e84:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0007e88:	8b 5c 24 58          	mov    ebx,DWORD PTR [esp+0x58]
c0007e8c:	8b 54 24 74          	mov    edx,DWORD PTR [esp+0x74]
c0007e90:	8d 4c 13 ff          	lea    ecx,[ebx+edx*1-0x1]
c0007e94:	f7 da                	neg    edx
c0007e96:	21 d1                	and    ecx,edx
c0007e98:	29 d9                	sub    ecx,ebx
c0007e9a:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007e9f:	0f 85 20 01 00 00    	jne    c0007fc5 <f_mkfs+0xc73>
c0007ea5:	31 db                	xor    ebx,ebx
c0007ea7:	01 ce                	add    esi,ecx
c0007ea9:	01 4c 24 30          	add    DWORD PTR [esp+0x30],ecx
c0007ead:	11 5c 24 34          	adc    DWORD PTR [esp+0x34],ebx
c0007eb1:	31 d2                	xor    edx,edx
c0007eb3:	89 f8                	mov    eax,edi
c0007eb5:	8b 5c 24 04          	mov    ebx,DWORD PTR [esp+0x4]
c0007eb9:	c1 e0 04             	shl    eax,0x4
c0007ebc:	2b 44 24 10          	sub    eax,DWORD PTR [esp+0x10]
c0007ec0:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c0007ec4:	03 44 24 58          	add    eax,DWORD PTR [esp+0x58]
c0007ec8:	13 54 24 5c          	adc    edx,DWORD PTR [esp+0x5c]
c0007ecc:	39 04 24             	cmp    DWORD PTR [esp],eax
c0007ecf:	19 d3                	sbb    ebx,edx
c0007ed1:	0f 82 40 01 00 00    	jb     c0008017 <f_mkfs+0xcc5>
c0007ed7:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007eda:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0007ede:	89 c8                	mov    eax,ecx
c0007ee0:	0f af 54 24 40       	imul   edx,DWORD PTR [esp+0x40]
c0007ee5:	2b 44 24 50          	sub    eax,DWORD PTR [esp+0x50]
c0007ee9:	29 f0                	sub    eax,esi
c0007eeb:	29 d0                	sub    eax,edx
c0007eed:	31 d2                	xor    edx,edx
c0007eef:	f7 f7                	div    edi
c0007ef1:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0007ef6:	89 c3                	mov    ebx,eax
c0007ef8:	0f 85 b8 fe ff ff    	jne    c0007db6 <f_mkfs+0xa64>
c0007efe:	3d f5 ff 00 00       	cmp    eax,0xfff5
c0007f03:	0f 87 1d 01 00 00    	ja     c0008026 <f_mkfs+0xcd4>
c0007f09:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007f0e:	0f 85 03 01 00 00    	jne    c0008017 <f_mkfs+0xcc5>
c0007f14:	83 ff 01             	cmp    edi,0x1
c0007f17:	0f 86 fa 00 00 00    	jbe    c0008017 <f_mkfs+0xcc5>
c0007f1d:	d1 ef                	shr    edi,1
c0007f1f:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0007f23:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0007f27:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0007f2a:	85 db                	test   ebx,ebx
c0007f2c:	75 2d                	jne    c0007f5b <f_mkfs+0xc09>
c0007f2e:	89 cb                	mov    ebx,ecx
c0007f30:	ba 70 9c 02 c0       	mov    edx,0xc0029c70
c0007f35:	c1 eb 11             	shr    ebx,0x11
c0007f38:	c7 44 24 08 01 00 00 00 	mov    DWORD PTR [esp+0x8],0x1
c0007f40:	0f b7 02             	movzx  eax,WORD PTR [edx]
c0007f43:	66 85 c0             	test   ax,ax
c0007f46:	74 11                	je     c0007f59 <f_mkfs+0xc07>
c0007f48:	83 c2 02             	add    edx,0x2
c0007f4b:	39 d8                	cmp    eax,ebx
c0007f4d:	77 0a                	ja     c0007f59 <f_mkfs+0xc07>
c0007f4f:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c0007f53:	01 74 24 08          	add    DWORD PTR [esp+0x8],esi
c0007f57:	eb e7                	jmp    c0007f40 <f_mkfs+0xbee>
c0007f59:	31 db                	xor    ebx,ebx
c0007f5b:	31 d2                	xor    edx,edx
c0007f5d:	89 c8                	mov    eax,ecx
c0007f5f:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0007f63:	8d 14 85 07 02 00 00 	lea    edx,[eax*4+0x207]
c0007f6a:	2d f6 ff 00 00       	sub    eax,0xfff6
c0007f6f:	c1 ea 09             	shr    edx,0x9
c0007f72:	3d ff ff fe 0f       	cmp    eax,0xffeffff
c0007f77:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c0007f7b:	0f 87 96 00 00 00    	ja     c0008017 <f_mkfs+0xcc5>
c0007f81:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0007f85:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c0007f8d:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c0007f91:	be 20 00 00 00       	mov    esi,0x20
c0007f96:	c6 44 24 18 03       	mov    BYTE PTR [esp+0x18],0x3
c0007f9b:	e9 a6 fe ff ff       	jmp    c0007e46 <f_mkfs+0xaf4>
c0007fa0:	83 c2 02             	add    edx,0x2
c0007fa3:	39 c8                	cmp    eax,ecx
c0007fa5:	0f 87 60 fe ff ff    	ja     c0007e0b <f_mkfs+0xab9>
c0007fab:	01 ff                	add    edi,edi
c0007fad:	e9 4d fe ff ff       	jmp    c0007dff <f_mkfs+0xaad>
c0007fb2:	8d 04 40             	lea    eax,[eax+eax*2]
c0007fb5:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0007fba:	40                   	inc    eax
c0007fbb:	d1 e8                	shr    eax,1
c0007fbd:	83 c0 03             	add    eax,0x3
c0007fc0:	e9 62 fe ff ff       	jmp    c0007e27 <f_mkfs+0xad5>
c0007fc5:	31 d2                	xor    edx,edx
c0007fc7:	89 c8                	mov    eax,ecx
c0007fc9:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fcd:	85 d2                	test   edx,edx
c0007fcf:	74 0c                	je     c0007fdd <f_mkfs+0xc8b>
c0007fd1:	49                   	dec    ecx
c0007fd2:	46                   	inc    esi
c0007fd3:	83 44 24 30 01       	add    DWORD PTR [esp+0x30],0x1
c0007fd8:	83 54 24 34 00       	adc    DWORD PTR [esp+0x34],0x0
c0007fdd:	89 c8                	mov    eax,ecx
c0007fdf:	31 d2                	xor    edx,edx
c0007fe1:	f7 74 24 40          	div    DWORD PTR [esp+0x40]
c0007fe5:	01 44 24 38          	add    DWORD PTR [esp+0x38],eax
c0007fe9:	e9 c3 fe ff ff       	jmp    c0007eb1 <f_mkfs+0xb5f>
c0007fee:	3d f5 0f 00 00       	cmp    eax,0xff5
c0007ff3:	77 31                	ja     c0008026 <f_mkfs+0xcd4>
c0007ff5:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0007ffa:	75 1b                	jne    c0008017 <f_mkfs+0xcc5>
c0007ffc:	8d 04 3f             	lea    eax,[edi+edi*1]
c0007fff:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008003:	3d 80 00 00 00       	cmp    eax,0x80
c0008008:	0f 86 d9 fd ff ff    	jbe    c0007de7 <f_mkfs+0xa95>
c000800e:	eb 07                	jmp    c0008017 <f_mkfs+0xcc5>
c0008010:	3d f5 0f 00 00       	cmp    eax,0xff5
c0008015:	76 0a                	jbe    c0008021 <f_mkfs+0xccf>
c0008017:	bb 0e 00 00 00       	mov    ebx,0xe
c000801c:	e9 ff 03 00 00       	jmp    c0008420 <f_mkfs+0x10ce>
c0008021:	c6 44 24 18 01       	mov    BYTE PTR [esp+0x18],0x1
c0008026:	31 d2                	xor    edx,edx
c0008028:	b9 00 02 00 00       	mov    ecx,0x200
c000802d:	89 e8                	mov    eax,ebp
c000802f:	e8 a2 9c ff ff       	call   c0001cd6 <mem_set>
c0008034:	b9 0b 00 00 00       	mov    ecx,0xb
c0008039:	ba 82 9d 02 c0       	mov    edx,0xc0029d82
c000803e:	89 e8                	mov    eax,ebp
c0008040:	e8 7c 9c ff ff       	call   c0001cc1 <mem_cpy>
c0008045:	8d 45 0b             	lea    eax,[ebp+0xb]
c0008048:	ba 00 02 00 00       	mov    edx,0x200
c000804d:	e8 62 9c ff ff       	call   c0001cb4 <st_word>
c0008052:	89 f8                	mov    eax,edi
c0008054:	0f b7 d6             	movzx  edx,si
c0008057:	88 45 0d             	mov    BYTE PTR [ebp+0xd],al
c000805a:	8d 45 0e             	lea    eax,[ebp+0xe]
c000805d:	e8 52 9c ff ff       	call   c0001cb4 <st_word>
c0008062:	8a 44 24 48          	mov    al,BYTE PTR [esp+0x48]
c0008066:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000806b:	88 45 10             	mov    BYTE PTR [ebp+0x10],al
c000806e:	75 08                	jne    c0008078 <f_mkfs+0xd26>
c0008070:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0008078:	8d 45 11             	lea    eax,[ebp+0x11]
c000807b:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c000807f:	e8 30 9c ff ff       	call   c0001cb4 <st_word>
c0008084:	b8 ff ff 00 00       	mov    eax,0xffff
c0008089:	8b 54 24 78          	mov    edx,DWORD PTR [esp+0x78]
c000808d:	39 d0                	cmp    eax,edx
c000808f:	b8 00 00 00 00       	mov    eax,0x0
c0008094:	1b 44 24 7c          	sbb    eax,DWORD PTR [esp+0x7c]
c0008098:	72 0a                	jb     c00080a4 <f_mkfs+0xd52>
c000809a:	8d 45 13             	lea    eax,[ebp+0x13]
c000809d:	e8 12 9c ff ff       	call   c0001cb4 <st_word>
c00080a2:	eb 08                	jmp    c00080ac <f_mkfs+0xd5a>
c00080a4:	8d 45 20             	lea    eax,[ebp+0x20]
c00080a7:	e8 0c 9c ff ff       	call   c0001cb8 <st_dword>
c00080ac:	8d 45 18             	lea    eax,[ebp+0x18]
c00080af:	ba 3f 00 00 00       	mov    edx,0x3f
c00080b4:	c6 45 15 f8          	mov    BYTE PTR [ebp+0x15],0xf8
c00080b8:	e8 f7 9b ff ff       	call   c0001cb4 <st_word>
c00080bd:	8d 45 1a             	lea    eax,[ebp+0x1a]
c00080c0:	ba ff 00 00 00       	mov    edx,0xff
c00080c5:	e8 ea 9b ff ff       	call   c0001cb4 <st_word>
c00080ca:	8d 45 1c             	lea    eax,[ebp+0x1c]
c00080cd:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00080d1:	e8 e2 9b ff ff       	call   c0001cb8 <st_dword>
c00080d6:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00080db:	75 57                	jne    c0008134 <f_mkfs+0xde2>
c00080dd:	8d 45 43             	lea    eax,[ebp+0x43]
c00080e0:	ba 00 00 21 50       	mov    edx,0x50210000
c00080e5:	e8 ce 9b ff ff       	call   c0001cb8 <st_dword>
c00080ea:	8d 45 24             	lea    eax,[ebp+0x24]
c00080ed:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c00080f1:	e8 c2 9b ff ff       	call   c0001cb8 <st_dword>
c00080f6:	8d 45 2c             	lea    eax,[ebp+0x2c]
c00080f9:	ba 02 00 00 00       	mov    edx,0x2
c00080fe:	e8 b5 9b ff ff       	call   c0001cb8 <st_dword>
c0008103:	8d 45 30             	lea    eax,[ebp+0x30]
c0008106:	ba 01 00 00 00       	mov    edx,0x1
c000810b:	e8 a4 9b ff ff       	call   c0001cb4 <st_word>
c0008110:	8d 45 32             	lea    eax,[ebp+0x32]
c0008113:	ba 06 00 00 00       	mov    edx,0x6
c0008118:	e8 97 9b ff ff       	call   c0001cb4 <st_word>
c000811d:	c6 45 40 80          	mov    BYTE PTR [ebp+0x40],0x80
c0008121:	c6 45 42 29          	mov    BYTE PTR [ebp+0x42],0x29
c0008125:	8d 45 47             	lea    eax,[ebp+0x47]
c0008128:	b9 13 00 00 00       	mov    ecx,0x13
c000812d:	ba 8e 9d 02 c0       	mov    edx,0xc0029d8e
c0008132:	eb 2f                	jmp    c0008163 <f_mkfs+0xe11>
c0008134:	8d 45 27             	lea    eax,[ebp+0x27]
c0008137:	ba 00 00 21 50       	mov    edx,0x50210000
c000813c:	e8 77 9b ff ff       	call   c0001cb8 <st_dword>
c0008141:	0f b7 54 24 38       	movzx  edx,WORD PTR [esp+0x38]
c0008146:	8d 45 16             	lea    eax,[ebp+0x16]
c0008149:	e8 66 9b ff ff       	call   c0001cb4 <st_word>
c000814e:	c6 45 24 80          	mov    BYTE PTR [ebp+0x24],0x80
c0008152:	c6 45 26 29          	mov    BYTE PTR [ebp+0x26],0x29
c0008156:	8d 45 2b             	lea    eax,[ebp+0x2b]
c0008159:	b9 13 00 00 00       	mov    ecx,0x13
c000815e:	ba a2 9d 02 c0       	mov    edx,0xc0029da2
c0008163:	e8 59 9b ff ff       	call   c0001cc1 <mem_cpy>
c0008168:	8d b5 fe 01 00 00    	lea    esi,[ebp+0x1fe]
c000816e:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008173:	89 f0                	mov    eax,esi
c0008175:	e8 3a 9b ff ff       	call   c0001cb4 <st_word>
c000817a:	83 ec 0c             	sub    esp,0xc
c000817d:	6a 01                	push   0x1
c000817f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008183:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0008187:	55                   	push   ebp
c0008188:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000818c:	e8 7c 9a ff ff       	call   c0001c0d <disk_write>
c0008191:	83 c4 20             	add    esp,0x20
c0008194:	85 c0                	test   eax,eax
c0008196:	0f 85 67 02 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c000819c:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c00081a1:	0f 85 b7 00 00 00    	jne    c000825e <f_mkfs+0xf0c>
c00081a7:	83 ec 0c             	sub    esp,0xc
c00081aa:	6a 01                	push   0x1
c00081ac:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00081b0:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00081b4:	83 c0 06             	add    eax,0x6
c00081b7:	83 d2 00             	adc    edx,0x0
c00081ba:	52                   	push   edx
c00081bb:	50                   	push   eax
c00081bc:	55                   	push   ebp
c00081bd:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00081c1:	e8 47 9a ff ff       	call   c0001c0d <disk_write>
c00081c6:	83 c4 20             	add    esp,0x20
c00081c9:	b9 00 02 00 00       	mov    ecx,0x200
c00081ce:	31 d2                	xor    edx,edx
c00081d0:	89 e8                	mov    eax,ebp
c00081d2:	e8 ff 9a ff ff       	call   c0001cd6 <mem_set>
c00081d7:	ba 52 52 61 41       	mov    edx,0x41615252
c00081dc:	89 e8                	mov    eax,ebp
c00081de:	e8 d5 9a ff ff       	call   c0001cb8 <st_dword>
c00081e3:	8d 85 e4 01 00 00    	lea    eax,[ebp+0x1e4]
c00081e9:	ba 72 72 41 61       	mov    edx,0x61417272
c00081ee:	e8 c5 9a ff ff       	call   c0001cb8 <st_dword>
c00081f3:	8d 53 ff             	lea    edx,[ebx-0x1]
c00081f6:	8d 85 e8 01 00 00    	lea    eax,[ebp+0x1e8]
c00081fc:	e8 b7 9a ff ff       	call   c0001cb8 <st_dword>
c0008201:	8d 85 ec 01 00 00    	lea    eax,[ebp+0x1ec]
c0008207:	ba 02 00 00 00       	mov    edx,0x2
c000820c:	e8 a7 9a ff ff       	call   c0001cb8 <st_dword>
c0008211:	ba 55 aa 00 00       	mov    edx,0xaa55
c0008216:	89 f0                	mov    eax,esi
c0008218:	e8 97 9a ff ff       	call   c0001cb4 <st_word>
c000821d:	83 ec 0c             	sub    esp,0xc
c0008220:	6a 01                	push   0x1
c0008222:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008226:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000822a:	83 c0 07             	add    eax,0x7
c000822d:	83 d2 00             	adc    edx,0x0
c0008230:	52                   	push   edx
c0008231:	50                   	push   eax
c0008232:	55                   	push   ebp
c0008233:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008237:	e8 d1 99 ff ff       	call   c0001c0d <disk_write>
c000823c:	83 c4 14             	add    esp,0x14
c000823f:	6a 01                	push   0x1
c0008241:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008245:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008249:	83 c0 01             	add    eax,0x1
c000824c:	83 d2 00             	adc    edx,0x0
c000824f:	52                   	push   edx
c0008250:	50                   	push   eax
c0008251:	55                   	push   ebp
c0008252:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008256:	e8 b2 99 ff ff       	call   c0001c0d <disk_write>
c000825b:	83 c4 20             	add    esp,0x20
c000825e:	8b 8c 24 bc 00 00 00 	mov    ecx,DWORD PTR [esp+0xbc]
c0008265:	31 d2                	xor    edx,edx
c0008267:	81 e1 00 fe ff ff    	and    ecx,0xfffffe00
c000826d:	31 db                	xor    ebx,ebx
c000826f:	89 e8                	mov    eax,ebp
c0008271:	e8 60 9a ff ff       	call   c0001cd6 <mem_set>
c0008276:	80 7c 24 18 01       	cmp    BYTE PTR [esp+0x18],0x1
c000827b:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0008282:	0f 94 c3             	sete   bl
c0008285:	4b                   	dec    ebx
c0008286:	81 e3 00 00 00 ff    	and    ebx,0xff000000
c000828c:	81 c3 f8 ff ff 00    	add    ebx,0xfffff8
c0008292:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008297:	75 21                	jne    c00082ba <f_mkfs+0xf68>
c0008299:	ba f8 ff ff ff       	mov    edx,0xfffffff8
c000829e:	89 e8                	mov    eax,ebp
c00082a0:	e8 13 9a ff ff       	call   c0001cb8 <st_dword>
c00082a5:	8d 45 04             	lea    eax,[ebp+0x4]
c00082a8:	83 ca ff             	or     edx,0xffffffff
c00082ab:	e8 08 9a ff ff       	call   c0001cb8 <st_dword>
c00082b0:	8d 45 08             	lea    eax,[ebp+0x8]
c00082b3:	ba ff ff ff 0f       	mov    edx,0xfffffff
c00082b8:	eb 04                	jmp    c00082be <f_mkfs+0xf6c>
c00082ba:	89 da                	mov    edx,ebx
c00082bc:	89 e8                	mov    eax,ebp
c00082be:	e8 f5 99 ff ff       	call   c0001cb8 <st_dword>
c00082c3:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00082c7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00082cb:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
c00082cf:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00082d3:	39 ce                	cmp    esi,ecx
c00082d5:	76 02                	jbe    c00082d9 <f_mkfs+0xf87>
c00082d7:	89 ce                	mov    esi,ecx
c00082d9:	83 ec 0c             	sub    esp,0xc
c00082dc:	56                   	push   esi
c00082dd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082e1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00082e5:	55                   	push   ebp
c00082e6:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00082ea:	e8 1e 99 ff ff       	call   c0001c0d <disk_write>
c00082ef:	83 c4 20             	add    esp,0x20
c00082f2:	85 c0                	test   eax,eax
c00082f4:	0f 85 09 01 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c00082fa:	31 d2                	xor    edx,edx
c00082fc:	b9 00 02 00 00       	mov    ecx,0x200
c0008301:	89 e8                	mov    eax,ebp
c0008303:	e8 ce 99 ff ff       	call   c0001cd6 <mem_set>
c0008308:	31 d2                	xor    edx,edx
c000830a:	01 74 24 30          	add    DWORD PTR [esp+0x30],esi
c000830e:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c0008312:	29 74 24 08          	sub    DWORD PTR [esp+0x8],esi
c0008316:	75 b3                	jne    c00082cb <f_mkfs+0xf79>
c0008318:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000831b:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c0008322:	40                   	inc    eax
c0008323:	39 44 24 40          	cmp    DWORD PTR [esp+0x40],eax
c0008327:	0f 87 65 ff ff ff    	ja     c0008292 <f_mkfs+0xf40>
c000832d:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c0008332:	74 04                	je     c0008338 <f_mkfs+0xfe6>
c0008334:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c0008338:	89 fb                	mov    ebx,edi
c000833a:	3b 7c 24 20          	cmp    edi,DWORD PTR [esp+0x20]
c000833e:	76 04                	jbe    c0008344 <f_mkfs+0xff2>
c0008340:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0008344:	83 ec 0c             	sub    esp,0xc
c0008347:	53                   	push   ebx
c0008348:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000834c:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0008350:	55                   	push   ebp
c0008351:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0008355:	e8 b3 98 ff ff       	call   c0001c0d <disk_write>
c000835a:	83 c4 20             	add    esp,0x20
c000835d:	85 c0                	test   eax,eax
c000835f:	0f 85 9e 00 00 00    	jne    c0008403 <f_mkfs+0x10b1>
c0008365:	31 d2                	xor    edx,edx
c0008367:	01 5c 24 30          	add    DWORD PTR [esp+0x30],ebx
c000836b:	11 54 24 34          	adc    DWORD PTR [esp+0x34],edx
c000836f:	29 df                	sub    edi,ebx
c0008371:	75 c5                	jne    c0008338 <f_mkfs+0xfe6>
c0008373:	b1 0c                	mov    cl,0xc
c0008375:	80 7c 24 18 03       	cmp    BYTE PTR [esp+0x18],0x3
c000837a:	74 1d                	je     c0008399 <f_mkfs+0x1047>
c000837c:	b8 ff ff 00 00       	mov    eax,0xffff
c0008381:	b1 06                	mov    cl,0x6
c0008383:	3b 44 24 78          	cmp    eax,DWORD PTR [esp+0x78]
c0008387:	1b 7c 24 7c          	sbb    edi,DWORD PTR [esp+0x7c]
c000838b:	72 0c                	jb     c0008399 <f_mkfs+0x1047>
c000838d:	80 7c 24 18 02       	cmp    BYTE PTR [esp+0x18],0x2
c0008392:	0f 94 c1             	sete   cl
c0008395:	8d 4c 49 01          	lea    ecx,[ecx+ecx*2+0x1]
c0008399:	f6 44 24 3f 08       	test   BYTE PTR [esp+0x3f],0x8
c000839e:	75 4c                	jne    c00083ec <f_mkfs+0x109a>
c00083a0:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c00083a4:	8b 54 24 7c          	mov    edx,DWORD PTR [esp+0x7c]
c00083a8:	89 84 24 80 00 00 00 	mov    DWORD PTR [esp+0x80],eax
c00083af:	89 94 24 84 00 00 00 	mov    DWORD PTR [esp+0x84],edx
c00083b6:	c7 84 24 88 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x88],0x0
c00083c1:	c7 84 24 8c 00 00 00 00 00 00 00 	mov    DWORD PTR [esp+0x8c],0x0
c00083cc:	0f b6 c9             	movzx  ecx,cl
c00083cf:	83 ec 0c             	sub    esp,0xc
c00083d2:	55                   	push   ebp
c00083d3:	8d 94 24 90 00 00 00 	lea    edx,[esp+0x90]
c00083da:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00083de:	e8 2f c2 ff ff       	call   c0004612 <create_partition>
c00083e3:	83 c4 10             	add    esp,0x10
c00083e6:	89 c3                	mov    ebx,eax
c00083e8:	85 c0                	test   eax,eax
c00083ea:	75 34                	jne    c0008420 <f_mkfs+0x10ce>
c00083ec:	31 db                	xor    ebx,ebx
c00083ee:	50                   	push   eax
c00083ef:	6a 00                	push   0x0
c00083f1:	6a 00                	push   0x0
c00083f3:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00083f7:	e8 27 98 ff ff       	call   c0001c23 <disk_ioctl>
c00083fc:	83 c4 10             	add    esp,0x10
c00083ff:	85 c0                	test   eax,eax
c0008401:	74 1d                	je     c0008420 <f_mkfs+0x10ce>
c0008403:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c000840b:	75 0c                	jne    c0008419 <f_mkfs+0x10c7>
c000840d:	83 ec 0c             	sub    esp,0xc
c0008410:	55                   	push   ebp
c0008411:	e8 75 00 00 00       	call   c000848b <ff_memfree>
c0008416:	83 c4 10             	add    esp,0x10
c0008419:	bb 01 00 00 00       	mov    ebx,0x1
c000841e:	eb 48                	jmp    c0008468 <f_mkfs+0x1116>
c0008420:	83 bc 24 b8 00 00 00 00 	cmp    DWORD PTR [esp+0xb8],0x0
c0008428:	75 3e                	jne    c0008468 <f_mkfs+0x1116>
c000842a:	83 ec 0c             	sub    esp,0xc
c000842d:	55                   	push   ebp
c000842e:	e8 58 00 00 00       	call   c000848b <ff_memfree>
c0008433:	83 c4 10             	add    esp,0x10
c0008436:	eb 30                	jmp    c0008468 <f_mkfs+0x1116>
c0008438:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000843d:	0f 85 eb fa ff ff    	jne    c0007f2e <f_mkfs+0xbdc>
c0008443:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0008447:	81 ff 80 00 00 00    	cmp    edi,0x80
c000844d:	0f 86 b8 f9 ff ff    	jbe    c0007e0b <f_mkfs+0xab9>
c0008453:	e9 bf fb ff ff       	jmp    c0008017 <f_mkfs+0xcc5>
c0008458:	80 7c 24 54 00       	cmp    BYTE PTR [esp+0x54],0x0
c000845d:	0f 85 c0 fa ff ff    	jne    c0007f23 <f_mkfs+0xbd1>
c0008463:	e9 af fb ff ff       	jmp    c0008017 <f_mkfs+0xcc5>
c0008468:	81 c4 9c 00 00 00    	add    esp,0x9c
c000846e:	89 d8                	mov    eax,ebx
c0008470:	5b                   	pop    ebx
c0008471:	5e                   	pop    esi
c0008472:	5f                   	pop    edi
c0008473:	5d                   	pop    ebp
c0008474:	c3                   	ret    

c0008475 <ff_memalloc>:
c0008475:	83 ec 0c             	sub    esp,0xc
c0008478:	83 ec 0c             	sub    esp,0xc
c000847b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000847f:	e8 24 74 00 00       	call   c000f8a8 <malloc>
c0008484:	83 c4 10             	add    esp,0x10
c0008487:	83 c4 0c             	add    esp,0xc
c000848a:	c3                   	ret    

c000848b <ff_memfree>:
c000848b:	83 ec 0c             	sub    esp,0xc
c000848e:	83 ec 0c             	sub    esp,0xc
c0008491:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0008495:	e8 1e 74 00 00       	call   c000f8b8 <free>
c000849a:	83 c4 10             	add    esp,0x10
c000849d:	90                   	nop
c000849e:	83 c4 0c             	add    esp,0xc
c00084a1:	c3                   	ret    

c00084a2 <ff_uni2oem>:
c00084a2:	83 ec 14             	sub    esp,0x14
c00084a5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00084a9:	66 89 04 24          	mov    WORD PTR [esp],ax
c00084ad:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084b4:	c7 44 24 0c c0 a0 02 c0 	mov    DWORD PTR [esp+0xc],0xc002a0c0
c00084bc:	83 7c 24 18 7f       	cmp    DWORD PTR [esp+0x18],0x7f
c00084c1:	77 0b                	ja     c00084ce <ff_uni2oem+0x2c>
c00084c3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00084c7:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084cc:	eb 5b                	jmp    c0008529 <ff_uni2oem+0x87>
c00084ce:	81 7c 24 18 ff ff 00 00 	cmp    DWORD PTR [esp+0x18],0xffff
c00084d6:	77 51                	ja     c0008529 <ff_uni2oem+0x87>
c00084d8:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c00084de:	75 49                	jne    c0008529 <ff_uni2oem+0x87>
c00084e0:	66 c7 44 24 12 00 00 	mov    WORD PTR [esp+0x12],0x0
c00084e7:	eb 0b                	jmp    c00084f4 <ff_uni2oem+0x52>
c00084e9:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c00084ee:	40                   	inc    eax
c00084ef:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c00084f4:	66 83 7c 24 12 7f    	cmp    WORD PTR [esp+0x12],0x7f
c00084fa:	77 1b                	ja     c0008517 <ff_uni2oem+0x75>
c00084fc:	0f b7 44 24 12       	movzx  eax,WORD PTR [esp+0x12]
c0008501:	01 c0                	add    eax,eax
c0008503:	89 c2                	mov    edx,eax
c0008505:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008509:	01 d0                	add    eax,edx
c000850b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000850e:	0f b7 c0             	movzx  eax,ax
c0008511:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c0008515:	75 d2                	jne    c00084e9 <ff_uni2oem+0x47>
c0008517:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000851c:	83 e8 80             	sub    eax,0xffffff80
c000851f:	25 ff 00 00 00       	and    eax,0xff
c0008524:	66 89 44 24 12       	mov    WORD PTR [esp+0x12],ax
c0008529:	66 8b 44 24 12       	mov    ax,WORD PTR [esp+0x12]
c000852e:	83 c4 14             	add    esp,0x14
c0008531:	c3                   	ret    

c0008532 <ff_oem2uni>:
c0008532:	83 ec 18             	sub    esp,0x18
c0008535:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0008539:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c000853d:	66 89 54 24 04       	mov    WORD PTR [esp+0x4],dx
c0008542:	66 89 04 24          	mov    WORD PTR [esp],ax
c0008546:	66 c7 44 24 16 00 00 	mov    WORD PTR [esp+0x16],0x0
c000854d:	c7 44 24 10 c0 a0 02 c0 	mov    DWORD PTR [esp+0x10],0xc002a0c0
c0008555:	66 83 7c 24 04 7f    	cmp    WORD PTR [esp+0x4],0x7f
c000855b:	77 0b                	ja     c0008568 <ff_oem2uni+0x36>
c000855d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0008561:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008566:	eb 2d                	jmp    c0008595 <ff_oem2uni+0x63>
c0008568:	66 81 3c 24 b5 01    	cmp    WORD PTR [esp],0x1b5
c000856e:	75 25                	jne    c0008595 <ff_oem2uni+0x63>
c0008570:	66 81 7c 24 04 ff 00 	cmp    WORD PTR [esp+0x4],0xff
c0008577:	77 1c                	ja     c0008595 <ff_oem2uni+0x63>
c0008579:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c000857e:	05 80 ff ff 7f       	add    eax,0x7fffff80
c0008583:	01 c0                	add    eax,eax
c0008585:	89 c2                	mov    edx,eax
c0008587:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000858b:	01 d0                	add    eax,edx
c000858d:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008590:	66 89 44 24 16       	mov    WORD PTR [esp+0x16],ax
c0008595:	66 8b 44 24 16       	mov    ax,WORD PTR [esp+0x16]
c000859a:	83 c4 18             	add    esp,0x18
c000859d:	c3                   	ret    

c000859e <ff_wtoupper>:
c000859e:	83 ec 10             	sub    esp,0x10
c00085a1:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c00085a9:	0f 87 3e 01 00 00    	ja     c00086ed <ff_wtoupper+0x14f>
c00085af:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00085b3:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c00085b8:	66 81 7c 24 0a ff 0f 	cmp    WORD PTR [esp+0xa],0xfff
c00085bf:	77 07                	ja     c00085c8 <ff_wtoupper+0x2a>
c00085c1:	b8 c0 9e 02 c0       	mov    eax,0xc0029ec0
c00085c6:	eb 05                	jmp    c00085cd <ff_wtoupper+0x2f>
c00085c8:	b8 00 9e 02 c0       	mov    eax,0xc0029e00
c00085cd:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00085d1:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00085d5:	8d 50 02             	lea    edx,[eax+0x2]
c00085d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00085dc:	66 8b 00             	mov    ax,WORD PTR [eax]
c00085df:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c00085e4:	66 83 7c 24 08 00    	cmp    WORD PTR [esp+0x8],0x0
c00085ea:	0f 84 f4 00 00 00    	je     c00086e4 <ff_wtoupper+0x146>
c00085f0:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c00085f5:	66 3b 44 24 08       	cmp    ax,WORD PTR [esp+0x8]
c00085fa:	0f 82 e4 00 00 00    	jb     c00086e4 <ff_wtoupper+0x146>
c0008600:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008604:	8d 50 02             	lea    edx,[eax+0x2]
c0008607:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000860b:	66 8b 00             	mov    ax,WORD PTR [eax]
c000860e:	66 89 44 24 06       	mov    WORD PTR [esp+0x6],ax
c0008613:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0008618:	66 c1 e8 08          	shr    ax,0x8
c000861c:	66 89 44 24 04       	mov    WORD PTR [esp+0x4],ax
c0008621:	66 81 64 24 06 ff 00 	and    WORD PTR [esp+0x6],0xff
c0008628:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c000862d:	0f b7 4c 24 08       	movzx  ecx,WORD PTR [esp+0x8]
c0008632:	0f b7 54 24 06       	movzx  edx,WORD PTR [esp+0x6]
c0008637:	01 ca                	add    edx,ecx
c0008639:	39 d0                	cmp    eax,edx
c000863b:	0f 8d 86 00 00 00    	jge    c00086c7 <ff_wtoupper+0x129>
c0008641:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c0008646:	83 f8 08             	cmp    eax,0x8
c0008649:	0f 87 94 00 00 00    	ja     c00086e3 <ff_wtoupper+0x145>
c000864f:	8b 04 85 c0 9d 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd6240]
c0008656:	ff e0                	jmp    eax
c0008658:	0f b7 54 24 0a       	movzx  edx,WORD PTR [esp+0xa]
c000865d:	0f b7 44 24 08       	movzx  eax,WORD PTR [esp+0x8]
c0008662:	29 c2                	sub    edx,eax
c0008664:	89 d0                	mov    eax,edx
c0008666:	01 c0                	add    eax,eax
c0008668:	89 c2                	mov    edx,eax
c000866a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000866e:	01 d0                	add    eax,edx
c0008670:	66 8b 00             	mov    ax,WORD PTR [eax]
c0008673:	66 89 44 24 0a       	mov    WORD PTR [esp+0xa],ax
c0008678:	eb 4b                	jmp    c00086c5 <ff_wtoupper+0x127>
c000867a:	66 8b 44 24 0a       	mov    ax,WORD PTR [esp+0xa]
c000867f:	2b 44 24 08          	sub    eax,DWORD PTR [esp+0x8]
c0008683:	83 e0 01             	and    eax,0x1
c0008686:	66 29 44 24 0a       	sub    WORD PTR [esp+0xa],ax
c000868b:	eb 38                	jmp    c00086c5 <ff_wtoupper+0x127>
c000868d:	66 83 6c 24 0a 10    	sub    WORD PTR [esp+0xa],0x10
c0008693:	eb 30                	jmp    c00086c5 <ff_wtoupper+0x127>
c0008695:	66 83 6c 24 0a 20    	sub    WORD PTR [esp+0xa],0x20
c000869b:	eb 28                	jmp    c00086c5 <ff_wtoupper+0x127>
c000869d:	66 83 6c 24 0a 30    	sub    WORD PTR [esp+0xa],0x30
c00086a3:	eb 20                	jmp    c00086c5 <ff_wtoupper+0x127>
c00086a5:	66 83 6c 24 0a 1a    	sub    WORD PTR [esp+0xa],0x1a
c00086ab:	eb 18                	jmp    c00086c5 <ff_wtoupper+0x127>
c00086ad:	66 83 44 24 0a 08    	add    WORD PTR [esp+0xa],0x8
c00086b3:	eb 10                	jmp    c00086c5 <ff_wtoupper+0x127>
c00086b5:	66 83 6c 24 0a 50    	sub    WORD PTR [esp+0xa],0x50
c00086bb:	eb 08                	jmp    c00086c5 <ff_wtoupper+0x127>
c00086bd:	66 81 6c 24 0a 60 1c 	sub    WORD PTR [esp+0xa],0x1c60
c00086c4:	90                   	nop
c00086c5:	eb 1c                	jmp    c00086e3 <ff_wtoupper+0x145>
c00086c7:	66 83 7c 24 04 00    	cmp    WORD PTR [esp+0x4],0x0
c00086cd:	0f 85 fe fe ff ff    	jne    c00085d1 <ff_wtoupper+0x33>
c00086d3:	0f b7 44 24 06       	movzx  eax,WORD PTR [esp+0x6]
c00086d8:	01 c0                	add    eax,eax
c00086da:	01 44 24 0c          	add    DWORD PTR [esp+0xc],eax
c00086de:	e9 ee fe ff ff       	jmp    c00085d1 <ff_wtoupper+0x33>
c00086e3:	90                   	nop
c00086e4:	0f b7 44 24 0a       	movzx  eax,WORD PTR [esp+0xa]
c00086e9:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00086ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00086f1:	83 c4 10             	add    esp,0x10
c00086f4:	c3                   	ret    

c00086f5 <psrc_set_converter>:
c00086f5:	56                   	push   esi
c00086f6:	89 d6                	mov    esi,edx
c00086f8:	53                   	push   ebx
c00086f9:	89 c3                	mov    ebx,eax
c00086fb:	83 ec 0c             	sub    esp,0xc
c00086fe:	52                   	push   edx
c00086ff:	50                   	push   eax
c0008700:	e8 6f 55 00 00       	call   c000dc74 <sinc_set_converter>
c0008705:	83 c4 10             	add    esp,0x10
c0008708:	85 c0                	test   eax,eax
c000870a:	74 25                	je     c0008731 <psrc_set_converter+0x3c>
c000870c:	50                   	push   eax
c000870d:	50                   	push   eax
c000870e:	56                   	push   esi
c000870f:	53                   	push   ebx
c0008710:	e8 17 5d 00 00       	call   c000e42c <zoh_set_converter>
c0008715:	83 c4 10             	add    esp,0x10
c0008718:	85 c0                	test   eax,eax
c000871a:	74 15                	je     c0008731 <psrc_set_converter+0x3c>
c000871c:	51                   	push   ecx
c000871d:	51                   	push   ecx
c000871e:	56                   	push   esi
c000871f:	53                   	push   ebx
c0008720:	e8 0f 11 00 00       	call   c0009834 <linear_set_converter>
c0008725:	83 c4 10             	add    esp,0x10
c0008728:	ba 0a 00 00 00       	mov    edx,0xa
c000872d:	85 c0                	test   eax,eax
c000872f:	75 02                	jne    c0008733 <psrc_set_converter+0x3e>
c0008731:	31 d2                	xor    edx,edx
c0008733:	89 d0                	mov    eax,edx
c0008735:	5a                   	pop    edx
c0008736:	5b                   	pop    ebx
c0008737:	5e                   	pop    esi
c0008738:	c3                   	ret    

c0008739 <src_delete>:
c0008739:	53                   	push   ebx
c000873a:	83 ec 08             	sub    esp,0x8
c000873d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008741:	85 db                	test   ebx,ebx
c0008743:	74 29                	je     c000876e <src_delete+0x35>
c0008745:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0008748:	85 c0                	test   eax,eax
c000874a:	74 0c                	je     c0008758 <src_delete+0x1f>
c000874c:	83 ec 0c             	sub    esp,0xc
c000874f:	50                   	push   eax
c0008750:	e8 63 71 00 00       	call   c000f8b8 <free>
c0008755:	83 c4 10             	add    esp,0x10
c0008758:	50                   	push   eax
c0008759:	6a 3c                	push   0x3c
c000875b:	6a 00                	push   0x0
c000875d:	53                   	push   ebx
c000875e:	e8 09 80 ff ff       	call   c000076c <memset>
c0008763:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008766:	e8 4d 71 00 00       	call   c000f8b8 <free>
c000876b:	83 c4 10             	add    esp,0x10
c000876e:	31 c0                	xor    eax,eax
c0008770:	83 c4 08             	add    esp,0x8
c0008773:	5b                   	pop    ebx
c0008774:	c3                   	ret    

c0008775 <src_process>:
c0008775:	55                   	push   ebp
c0008776:	57                   	push   edi
c0008777:	56                   	push   esi
c0008778:	53                   	push   ebx
c0008779:	83 ec 1c             	sub    esp,0x1c
c000877c:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0008780:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0008784:	85 ed                	test   ebp,ebp
c0008786:	0f 84 6f 01 00 00    	je     c00088fb <src_process+0x186>
c000878c:	83 7d 20 00          	cmp    DWORD PTR [ebp+0x20],0x0
c0008790:	0f 84 6c 01 00 00    	je     c0008902 <src_process+0x18d>
c0008796:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c000879a:	0f 84 62 01 00 00    	je     c0008902 <src_process+0x18d>
c00087a0:	81 7d 18 2b 02 00 00 	cmp    DWORD PTR [ebp+0x18],0x22b
c00087a7:	0f 85 5c 01 00 00    	jne    c0008909 <src_process+0x194>
c00087ad:	85 db                	test   ebx,ebx
c00087af:	0f 84 5b 01 00 00    	je     c0008910 <src_process+0x19b>
c00087b5:	8b 33                	mov    esi,DWORD PTR [ebx]
c00087b7:	85 f6                	test   esi,esi
c00087b9:	0f 84 58 01 00 00    	je     c0008917 <src_process+0x1a2>
c00087bf:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00087c2:	85 ff                	test   edi,edi
c00087c4:	0f 84 4d 01 00 00    	je     c0008917 <src_process+0x1a2>
c00087ca:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c00087cd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c00087d0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00087d4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00087d8:	68 00 00 70 3f       	push   0x3f700000
c00087dd:	6a 00                	push   0x0
c00087df:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00087e7:	e8 ab 04 02 00       	call   c0028c97 <__ltdf2>
c00087ec:	83 c4 10             	add    esp,0x10
c00087ef:	85 c0                	test   eax,eax
c00087f1:	0f 88 27 01 00 00    	js     c000891e <src_process+0x1a9>
c00087f7:	68 00 00 70 40       	push   0x40700000
c00087fc:	6a 00                	push   0x0
c00087fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008802:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008806:	e8 6e 04 02 00       	call   c0028c79 <__gtdf2>
c000880b:	83 c4 10             	add    esp,0x10
c000880e:	85 c0                	test   eax,eax
c0008810:	0f 8f 08 01 00 00    	jg     c000891e <src_process+0x1a9>
c0008816:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000881a:	79 07                	jns    c0008823 <src_process+0xae>
c000881c:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c0008823:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0008826:	85 c0                	test   eax,eax
c0008828:	79 50                	jns    c000887a <src_process+0x105>
c000882a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0008831:	39 fe                	cmp    esi,edi
c0008833:	72 37                	jb     c000886c <src_process+0xf7>
c0008835:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000883c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0008843:	68 00 00 70 3f       	push   0x3f700000
c0008848:	6a 00                	push   0x0
c000884a:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000884d:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c0008850:	e8 42 04 02 00       	call   c0028c97 <__ltdf2>
c0008855:	83 c4 10             	add    esp,0x10
c0008858:	85 c0                	test   eax,eax
c000885a:	79 37                	jns    c0008893 <src_process+0x11e>
c000885c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0008860:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0008864:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0008867:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000886a:	eb 27                	jmp    c0008893 <src_process+0x11e>
c000886c:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c000886f:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008873:	8d 04 86             	lea    eax,[esi+eax*4]
c0008876:	39 c7                	cmp    edi,eax
c0008878:	eb 0d                	jmp    c0008887 <src_process+0x112>
c000887a:	39 fe                	cmp    esi,edi
c000887c:	72 ee                	jb     c000886c <src_process+0xf7>
c000887e:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
c0008882:	8d 04 87             	lea    eax,[edi+eax*4]
c0008885:	39 c6                	cmp    esi,eax
c0008887:	73 ac                	jae    c0008835 <src_process+0xc0>
c0008889:	b8 10 00 00 00       	mov    eax,0x10
c000888e:	e9 90 00 00 00       	jmp    c0008923 <src_process+0x1ae>
c0008893:	83 ec 10             	sub    esp,0x10
c0008896:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0008899:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000889c:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000889f:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c00088a2:	e8 f5 fa 01 00       	call   c002839c <__subdf3>
c00088a7:	83 c4 18             	add    esp,0x18
c00088aa:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00088ae:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00088b2:	52                   	push   edx
c00088b3:	50                   	push   eax
c00088b4:	e8 77 05 02 00       	call   c0028e30 <fabs>
c00088b9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00088bd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00088c1:	83 c4 10             	add    esp,0x10
c00088c4:	68 af 03 d2 3c       	push   0x3cd203af
c00088c9:	68 16 56 e7 9e       	push   0x9ee75616
c00088ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00088d6:	e8 bc 03 02 00       	call   c0028c97 <__ltdf2>
c00088db:	83 c4 10             	add    esp,0x10
c00088de:	85 c0                	test   eax,eax
c00088e0:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c00088e4:	89 6c 24 30          	mov    DWORD PTR [esp+0x30],ebp
c00088e8:	79 05                	jns    c00088ef <src_process+0x17a>
c00088ea:	8b 45 24             	mov    eax,DWORD PTR [ebp+0x24]
c00088ed:	eb 03                	jmp    c00088f2 <src_process+0x17d>
c00088ef:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c00088f2:	83 c4 1c             	add    esp,0x1c
c00088f5:	5b                   	pop    ebx
c00088f6:	5e                   	pop    esi
c00088f7:	5f                   	pop    edi
c00088f8:	5d                   	pop    ebp
c00088f9:	ff e0                	jmp    eax
c00088fb:	b8 02 00 00 00       	mov    eax,0x2
c0008900:	eb 21                	jmp    c0008923 <src_process+0x1ae>
c0008902:	b8 07 00 00 00       	mov    eax,0x7
c0008907:	eb 1a                	jmp    c0008923 <src_process+0x1ae>
c0008909:	b8 12 00 00 00       	mov    eax,0x12
c000890e:	eb 13                	jmp    c0008923 <src_process+0x1ae>
c0008910:	b8 03 00 00 00       	mov    eax,0x3
c0008915:	eb 0c                	jmp    c0008923 <src_process+0x1ae>
c0008917:	b8 04 00 00 00       	mov    eax,0x4
c000891c:	eb 05                	jmp    c0008923 <src_process+0x1ae>
c000891e:	b8 06 00 00 00       	mov    eax,0x6
c0008923:	83 c4 1c             	add    esp,0x1c
c0008926:	5b                   	pop    ebx
c0008927:	5e                   	pop    esi
c0008928:	5f                   	pop    edi
c0008929:	5d                   	pop    ebp
c000892a:	c3                   	ret    

c000892b <src_callback_read>:
c000892b:	55                   	push   ebp
c000892c:	57                   	push   edi
c000892d:	56                   	push   esi
c000892e:	53                   	push   ebx
c000892f:	83 ec 3c             	sub    esp,0x3c
c0008932:	8b 6c 24 5c          	mov    ebp,DWORD PTR [esp+0x5c]
c0008936:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c000893a:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000893e:	8b 7c 24 58          	mov    edi,DWORD PTR [esp+0x58]
c0008942:	85 ed                	test   ebp,ebp
c0008944:	0f 8e 52 01 00 00    	jle    c0008a9c <src_callback_read+0x171>
c000894a:	85 db                	test   ebx,ebx
c000894c:	0f 84 4a 01 00 00    	je     c0008a9c <src_callback_read+0x171>
c0008952:	81 7b 18 2c 02 00 00 	cmp    DWORD PTR [ebx+0x18],0x22c
c0008959:	74 0c                	je     c0008967 <src_callback_read+0x3c>
c000895b:	c7 43 10 12 00 00 00 	mov    DWORD PTR [ebx+0x10],0x12
c0008962:	e9 35 01 00 00       	jmp    c0008a9c <src_callback_read+0x171>
c0008967:	83 7b 2c 00          	cmp    DWORD PTR [ebx+0x2c],0x0
c000896b:	75 0c                	jne    c0008979 <src_callback_read+0x4e>
c000896d:	c7 43 10 13 00 00 00 	mov    DWORD PTR [ebx+0x10],0x13
c0008974:	e9 23 01 00 00       	jmp    c0008a9c <src_callback_read+0x171>
c0008979:	51                   	push   ecx
c000897a:	6a 24                	push   0x24
c000897c:	6a 00                	push   0x0
c000897e:	8d 44 24 18          	lea    eax,[esp+0x18]
c0008982:	50                   	push   eax
c0008983:	e8 e4 7d ff ff       	call   c000076c <memset>
c0008988:	83 c4 10             	add    esp,0x10
c000898b:	68 00 00 70 3f       	push   0x3f700000
c0008990:	6a 00                	push   0x0
c0008992:	57                   	push   edi
c0008993:	56                   	push   esi
c0008994:	e8 fe 02 02 00       	call   c0028c97 <__ltdf2>
c0008999:	83 c4 10             	add    esp,0x10
c000899c:	85 c0                	test   eax,eax
c000899e:	78 3e                	js     c00089de <src_callback_read+0xb3>
c00089a0:	68 00 00 70 40       	push   0x40700000
c00089a5:	6a 00                	push   0x0
c00089a7:	57                   	push   edi
c00089a8:	56                   	push   esi
c00089a9:	e8 cb 02 02 00       	call   c0028c79 <__gtdf2>
c00089ae:	83 c4 10             	add    esp,0x10
c00089b1:	85 c0                	test   eax,eax
c00089b3:	7f 29                	jg     c00089de <src_callback_read+0xb3>
c00089b5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00089b9:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c00089bd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00089c1:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c00089c5:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c00089c8:	89 6c 24 18          	mov    DWORD PTR [esp+0x18],ebp
c00089cc:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00089d0:	31 f6                	xor    esi,esi
c00089d2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c00089d5:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00089d9:	e9 97 00 00 00       	jmp    c0008a75 <src_callback_read+0x14a>
c00089de:	c7 43 10 06 00 00 00 	mov    DWORD PTR [ebx+0x10],0x6
c00089e5:	e9 b2 00 00 00       	jmp    c0008a9c <src_callback_read+0x171>
c00089ea:	8d 44 24 04          	lea    eax,[esp+0x4]
c00089ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00089f2:	52                   	push   edx
c00089f3:	52                   	push   edx
c00089f4:	8d 44 24 10          	lea    eax,[esp+0x10]
c00089f8:	50                   	push   eax
c00089f9:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c00089fc:	ff 53 2c             	call   DWORD PTR [ebx+0x2c]
c00089ff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0008a03:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0008a07:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0008a0b:	83 c4 10             	add    esp,0x10
c0008a0e:	85 c0                	test   eax,eax
c0008a10:	75 08                	jne    c0008a1a <src_callback_read+0xef>
c0008a12:	c7 44 24 24 01 00 00 00 	mov    DWORD PTR [esp+0x24],0x1
c0008a1a:	c7 43 18 2b 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22b
c0008a21:	50                   	push   eax
c0008a22:	50                   	push   eax
c0008a23:	8d 44 24 14          	lea    eax,[esp+0x14]
c0008a27:	50                   	push   eax
c0008a28:	53                   	push   ebx
c0008a29:	e8 47 fd ff ff       	call   c0008775 <src_process>
c0008a2e:	83 c4 10             	add    esp,0x10
c0008a31:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008a38:	85 c0                	test   eax,eax
c0008a3a:	75 49                	jne    c0008a85 <src_callback_read+0x15a>
c0008a3c:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0008a40:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0008a43:	89 f9                	mov    ecx,edi
c0008a45:	29 7c 24 14          	sub    DWORD PTR [esp+0x14],edi
c0008a49:	0f af ca             	imul   ecx,edx
c0008a4c:	c1 e1 02             	shl    ecx,0x2
c0008a4f:	01 4c 24 0c          	add    DWORD PTR [esp+0xc],ecx
c0008a53:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0008a57:	0f af d1             	imul   edx,ecx
c0008a5a:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0008a5e:	c1 e2 02             	shl    edx,0x2
c0008a61:	01 54 24 10          	add    DWORD PTR [esp+0x10],edx
c0008a65:	8d 14 31             	lea    edx,[ecx+esi*1]
c0008a68:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0008a6d:	74 12                	je     c0008a81 <src_callback_read+0x156>
c0008a6f:	39 d5                	cmp    ebp,edx
c0008a71:	7e 14                	jle    c0008a87 <src_callback_read+0x15c>
c0008a73:	89 d6                	mov    esi,edx
c0008a75:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0008a7a:	75 9e                	jne    c0008a1a <src_callback_read+0xef>
c0008a7c:	e9 69 ff ff ff       	jmp    c00089ea <src_callback_read+0xbf>
c0008a81:	85 c9                	test   ecx,ecx
c0008a83:	75 ea                	jne    c0008a6f <src_callback_read+0x144>
c0008a85:	89 f2                	mov    edx,esi
c0008a87:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0008a8b:	85 c0                	test   eax,eax
c0008a8d:	89 4b 38             	mov    DWORD PTR [ebx+0x38],ecx
c0008a90:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0008a94:	89 4b 34             	mov    DWORD PTR [ebx+0x34],ecx
c0008a97:	74 05                	je     c0008a9e <src_callback_read+0x173>
c0008a99:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c0008a9c:	31 d2                	xor    edx,edx
c0008a9e:	83 c4 3c             	add    esp,0x3c
c0008aa1:	89 d0                	mov    eax,edx
c0008aa3:	5b                   	pop    ebx
c0008aa4:	5e                   	pop    esi
c0008aa5:	5f                   	pop    edi
c0008aa6:	5d                   	pop    ebp
c0008aa7:	c3                   	ret    

c0008aa8 <src_set_ratio>:
c0008aa8:	57                   	push   edi
c0008aa9:	ba 02 00 00 00       	mov    edx,0x2
c0008aae:	56                   	push   esi
c0008aaf:	53                   	push   ebx
c0008ab0:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008ab4:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0008ab8:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0008abc:	85 db                	test   ebx,ebx
c0008abe:	74 4c                	je     c0008b0c <src_set_ratio+0x64>
c0008ac0:	ba 07 00 00 00       	mov    edx,0x7
c0008ac5:	83 7b 20 00          	cmp    DWORD PTR [ebx+0x20],0x0
c0008ac9:	74 41                	je     c0008b0c <src_set_ratio+0x64>
c0008acb:	83 7b 24 00          	cmp    DWORD PTR [ebx+0x24],0x0
c0008acf:	74 3b                	je     c0008b0c <src_set_ratio+0x64>
c0008ad1:	68 00 00 70 3f       	push   0x3f700000
c0008ad6:	6a 00                	push   0x0
c0008ad8:	57                   	push   edi
c0008ad9:	56                   	push   esi
c0008ada:	e8 b8 01 02 00       	call   c0028c97 <__ltdf2>
c0008adf:	83 c4 10             	add    esp,0x10
c0008ae2:	ba 06 00 00 00       	mov    edx,0x6
c0008ae7:	85 c0                	test   eax,eax
c0008ae9:	78 21                	js     c0008b0c <src_set_ratio+0x64>
c0008aeb:	68 00 00 70 40       	push   0x40700000
c0008af0:	6a 00                	push   0x0
c0008af2:	57                   	push   edi
c0008af3:	56                   	push   esi
c0008af4:	e8 80 01 02 00       	call   c0028c79 <__gtdf2>
c0008af9:	83 c4 10             	add    esp,0x10
c0008afc:	ba 06 00 00 00       	mov    edx,0x6
c0008b01:	85 c0                	test   eax,eax
c0008b03:	7f 07                	jg     c0008b0c <src_set_ratio+0x64>
c0008b05:	89 33                	mov    DWORD PTR [ebx],esi
c0008b07:	89 7b 04             	mov    DWORD PTR [ebx+0x4],edi
c0008b0a:	31 d2                	xor    edx,edx
c0008b0c:	5b                   	pop    ebx
c0008b0d:	89 d0                	mov    eax,edx
c0008b0f:	5e                   	pop    esi
c0008b10:	5f                   	pop    edi
c0008b11:	c3                   	ret    

c0008b12 <src_get_channels>:
c0008b12:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008b16:	b8 02 00 00 00       	mov    eax,0x2
c0008b1b:	85 d2                	test   edx,edx
c0008b1d:	74 14                	je     c0008b33 <src_get_channels+0x21>
c0008b1f:	b8 07 00 00 00       	mov    eax,0x7
c0008b24:	83 7a 20 00          	cmp    DWORD PTR [edx+0x20],0x0
c0008b28:	74 09                	je     c0008b33 <src_get_channels+0x21>
c0008b2a:	83 7a 24 00          	cmp    DWORD PTR [edx+0x24],0x0
c0008b2e:	74 03                	je     c0008b33 <src_get_channels+0x21>
c0008b30:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0008b33:	c3                   	ret    

c0008b34 <src_reset>:
c0008b34:	53                   	push   ebx
c0008b35:	b8 02 00 00 00       	mov    eax,0x2
c0008b3a:	83 ec 08             	sub    esp,0x8
c0008b3d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0008b41:	85 db                	test   ebx,ebx
c0008b43:	74 36                	je     c0008b7b <src_reset+0x47>
c0008b45:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c0008b48:	85 c0                	test   eax,eax
c0008b4a:	74 09                	je     c0008b55 <src_reset+0x21>
c0008b4c:	83 ec 0c             	sub    esp,0xc
c0008b4f:	53                   	push   ebx
c0008b50:	ff d0                	call   eax
c0008b52:	83 c4 10             	add    esp,0x10
c0008b55:	31 c0                	xor    eax,eax
c0008b57:	31 d2                	xor    edx,edx
c0008b59:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0008b5c:	89 03                	mov    DWORD PTR [ebx],eax
c0008b5e:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0008b61:	89 53 04             	mov    DWORD PTR [ebx+0x4],edx
c0008b64:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c0008b6b:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c0008b72:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0008b79:	31 c0                	xor    eax,eax
c0008b7b:	83 c4 08             	add    esp,0x8
c0008b7e:	5b                   	pop    ebx
c0008b7f:	c3                   	ret    

c0008b80 <src_new>:
c0008b80:	57                   	push   edi
c0008b81:	56                   	push   esi
c0008b82:	53                   	push   ebx
c0008b83:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0008b87:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0008b8b:	85 f6                	test   esi,esi
c0008b8d:	74 73                	je     c0008c02 <src_new+0x82>
c0008b8f:	85 ff                	test   edi,edi
c0008b91:	7f 08                	jg     c0008b9b <src_new+0x1b>
c0008b93:	c7 06 0b 00 00 00    	mov    DWORD PTR [esi],0xb
c0008b99:	eb 1e                	jmp    c0008bb9 <src_new+0x39>
c0008b9b:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c0008ba1:	50                   	push   eax
c0008ba2:	50                   	push   eax
c0008ba3:	6a 3c                	push   0x3c
c0008ba5:	6a 01                	push   0x1
c0008ba7:	e8 2c 6d 00 00       	call   c000f8d8 <calloc>
c0008bac:	83 c4 10             	add    esp,0x10
c0008baf:	89 c3                	mov    ebx,eax
c0008bb1:	85 c0                	test   eax,eax
c0008bb3:	75 10                	jne    c0008bc5 <src_new+0x45>
c0008bb5:	85 f6                	test   esi,esi
c0008bb7:	75 04                	jne    c0008bbd <src_new+0x3d>
c0008bb9:	31 db                	xor    ebx,ebx
c0008bbb:	eb 4b                	jmp    c0008c08 <src_new+0x88>
c0008bbd:	c7 06 01 00 00 00    	mov    DWORD PTR [esi],0x1
c0008bc3:	eb 43                	jmp    c0008c08 <src_new+0x88>
c0008bc5:	89 78 14             	mov    DWORD PTR [eax+0x14],edi
c0008bc8:	c7 40 18 2b 02 00 00 	mov    DWORD PTR [eax+0x18],0x22b
c0008bcf:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0008bd3:	e8 1d fb ff ff       	call   c00086f5 <psrc_set_converter>
c0008bd8:	85 c0                	test   eax,eax
c0008bda:	74 18                	je     c0008bf4 <src_new+0x74>
c0008bdc:	85 f6                	test   esi,esi
c0008bde:	74 06                	je     c0008be6 <src_new+0x66>
c0008be0:	c7 06 0a 00 00 00    	mov    DWORD PTR [esi],0xa
c0008be6:	83 ec 0c             	sub    esp,0xc
c0008be9:	53                   	push   ebx
c0008bea:	31 db                	xor    ebx,ebx
c0008bec:	e8 c7 6c 00 00       	call   c000f8b8 <free>
c0008bf1:	83 c4 10             	add    esp,0x10
c0008bf4:	83 ec 0c             	sub    esp,0xc
c0008bf7:	53                   	push   ebx
c0008bf8:	e8 37 ff ff ff       	call   c0008b34 <src_reset>
c0008bfd:	83 c4 10             	add    esp,0x10
c0008c00:	eb 06                	jmp    c0008c08 <src_new+0x88>
c0008c02:	85 ff                	test   edi,edi
c0008c04:	7f 9b                	jg     c0008ba1 <src_new+0x21>
c0008c06:	eb b1                	jmp    c0008bb9 <src_new+0x39>
c0008c08:	89 d8                	mov    eax,ebx
c0008c0a:	5b                   	pop    ebx
c0008c0b:	5e                   	pop    esi
c0008c0c:	5f                   	pop    edi
c0008c0d:	c3                   	ret    

c0008c0e <src_callback_new>:
c0008c0e:	56                   	push   esi
c0008c0f:	53                   	push   ebx
c0008c10:	53                   	push   ebx
c0008c11:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0008c15:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008c19:	85 f6                	test   esi,esi
c0008c1b:	75 0e                	jne    c0008c2b <src_callback_new+0x1d>
c0008c1d:	31 db                	xor    ebx,ebx
c0008c1f:	85 c0                	test   eax,eax
c0008c21:	74 47                	je     c0008c6a <src_callback_new+0x5c>
c0008c23:	c7 00 11 00 00 00    	mov    DWORD PTR [eax],0x11
c0008c29:	eb 3f                	jmp    c0008c6a <src_callback_new+0x5c>
c0008c2b:	85 c0                	test   eax,eax
c0008c2d:	74 06                	je     c0008c35 <src_callback_new+0x27>
c0008c2f:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0008c35:	51                   	push   ecx
c0008c36:	50                   	push   eax
c0008c37:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c3b:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0008c3f:	e8 3c ff ff ff       	call   c0008b80 <src_new>
c0008c44:	83 c4 10             	add    esp,0x10
c0008c47:	89 c3                	mov    ebx,eax
c0008c49:	85 c0                	test   eax,eax
c0008c4b:	74 1d                	je     c0008c6a <src_callback_new+0x5c>
c0008c4d:	83 ec 0c             	sub    esp,0xc
c0008c50:	50                   	push   eax
c0008c51:	e8 de fe ff ff       	call   c0008b34 <src_reset>
c0008c56:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0008c5a:	c7 43 18 2c 02 00 00 	mov    DWORD PTR [ebx+0x18],0x22c
c0008c61:	89 73 2c             	mov    DWORD PTR [ebx+0x2c],esi
c0008c64:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0008c67:	83 c4 10             	add    esp,0x10
c0008c6a:	89 d8                	mov    eax,ebx
c0008c6c:	5a                   	pop    edx
c0008c6d:	5b                   	pop    ebx
c0008c6e:	5e                   	pop    esi
c0008c6f:	c3                   	ret    

c0008c70 <src_get_name>:
c0008c70:	53                   	push   ebx
c0008c71:	83 ec 14             	sub    esp,0x14
c0008c74:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008c78:	53                   	push   ebx
c0008c79:	e8 d0 4f 00 00       	call   c000dc4e <sinc_get_name>
c0008c7e:	83 c4 10             	add    esp,0x10
c0008c81:	85 c0                	test   eax,eax
c0008c83:	75 1d                	jne    c0008ca2 <src_get_name+0x32>
c0008c85:	83 ec 0c             	sub    esp,0xc
c0008c88:	53                   	push   ebx
c0008c89:	e8 80 57 00 00       	call   c000e40e <zoh_get_name>
c0008c8e:	83 c4 10             	add    esp,0x10
c0008c91:	85 c0                	test   eax,eax
c0008c93:	75 0d                	jne    c0008ca2 <src_get_name+0x32>
c0008c95:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008c99:	83 c4 08             	add    esp,0x8
c0008c9c:	5b                   	pop    ebx
c0008c9d:	e9 74 0b 00 00       	jmp    c0009816 <linear_get_name>
c0008ca2:	83 c4 08             	add    esp,0x8
c0008ca5:	5b                   	pop    ebx
c0008ca6:	c3                   	ret    

c0008ca7 <src_get_description>:
c0008ca7:	53                   	push   ebx
c0008ca8:	83 ec 14             	sub    esp,0x14
c0008cab:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0008caf:	53                   	push   ebx
c0008cb0:	e8 ac 4f 00 00       	call   c000dc61 <sinc_get_description>
c0008cb5:	83 c4 10             	add    esp,0x10
c0008cb8:	85 c0                	test   eax,eax
c0008cba:	75 1d                	jne    c0008cd9 <src_get_description+0x32>
c0008cbc:	83 ec 0c             	sub    esp,0xc
c0008cbf:	53                   	push   ebx
c0008cc0:	e8 58 57 00 00       	call   c000e41d <zoh_get_description>
c0008cc5:	83 c4 10             	add    esp,0x10
c0008cc8:	85 c0                	test   eax,eax
c0008cca:	75 0d                	jne    c0008cd9 <src_get_description+0x32>
c0008ccc:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0008cd0:	83 c4 08             	add    esp,0x8
c0008cd3:	5b                   	pop    ebx
c0008cd4:	e9 4c 0b 00 00       	jmp    c0009825 <linear_get_description>
c0008cd9:	83 c4 08             	add    esp,0x8
c0008cdc:	5b                   	pop    ebx
c0008cdd:	c3                   	ret    

c0008cde <src_get_version>:
c0008cde:	b8 c0 a1 02 c0       	mov    eax,0xc002a1c0
c0008ce3:	c3                   	ret    

c0008ce4 <src_is_valid_ratio>:
c0008ce4:	83 ec 1c             	sub    esp,0x1c
c0008ce7:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008ceb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008cef:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008cf3:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008cf7:	68 00 00 70 3f       	push   0x3f700000
c0008cfc:	6a 00                	push   0x0
c0008cfe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d06:	e8 8c ff 01 00       	call   c0028c97 <__ltdf2>
c0008d0b:	83 c4 10             	add    esp,0x10
c0008d0e:	31 d2                	xor    edx,edx
c0008d10:	85 c0                	test   eax,eax
c0008d12:	78 1e                	js     c0008d32 <src_is_valid_ratio+0x4e>
c0008d14:	68 00 00 70 40       	push   0x40700000
c0008d19:	6a 00                	push   0x0
c0008d1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d1f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008d23:	e8 51 ff 01 00       	call   c0028c79 <__gtdf2>
c0008d28:	31 d2                	xor    edx,edx
c0008d2a:	83 c4 10             	add    esp,0x10
c0008d2d:	85 c0                	test   eax,eax
c0008d2f:	0f 9e c2             	setle  dl
c0008d32:	89 d0                	mov    eax,edx
c0008d34:	83 c4 1c             	add    esp,0x1c
c0008d37:	c3                   	ret    

c0008d38 <src_error>:
c0008d38:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d3c:	31 c0                	xor    eax,eax
c0008d3e:	85 d2                	test   edx,edx
c0008d40:	74 03                	je     c0008d45 <src_error+0xd>
c0008d42:	8b 42 10             	mov    eax,DWORD PTR [edx+0x10]
c0008d45:	c3                   	ret    

c0008d46 <src_strerror>:
c0008d46:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0008d4a:	31 c0                	xor    eax,eax
c0008d4c:	83 fa 17             	cmp    edx,0x17
c0008d4f:	77 07                	ja     c0008d58 <src_strerror+0x12>
c0008d51:	8b 04 95 20 a6 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd59e0]
c0008d58:	c3                   	ret    

c0008d59 <src_simple>:
c0008d59:	56                   	push   esi
c0008d5a:	53                   	push   ebx
c0008d5b:	83 ec 18             	sub    esp,0x18
c0008d5e:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008d62:	8d 44 24 10          	lea    eax,[esp+0x10]
c0008d66:	50                   	push   eax
c0008d67:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d6b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0008d6f:	e8 0c fe ff ff       	call   c0008b80 <src_new>
c0008d74:	83 c4 10             	add    esp,0x10
c0008d77:	85 c0                	test   eax,eax
c0008d79:	75 06                	jne    c0008d81 <src_simple+0x28>
c0008d7b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0008d7f:	eb 25                	jmp    c0008da6 <src_simple+0x4d>
c0008d81:	c7 46 18 01 00 00 00 	mov    DWORD PTR [esi+0x18],0x1
c0008d88:	89 c3                	mov    ebx,eax
c0008d8a:	50                   	push   eax
c0008d8b:	50                   	push   eax
c0008d8c:	56                   	push   esi
c0008d8d:	53                   	push   ebx
c0008d8e:	e8 e2 f9 ff ff       	call   c0008775 <src_process>
c0008d93:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0008d96:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0008d9a:	e8 9a f9 ff ff       	call   c0008739 <src_delete>
c0008d9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0008da3:	83 c4 10             	add    esp,0x10
c0008da6:	83 c4 14             	add    esp,0x14
c0008da9:	5b                   	pop    ebx
c0008daa:	5e                   	pop    esi
c0008dab:	c3                   	ret    

c0008dac <src_short_to_float_array>:
c0008dac:	53                   	push   ebx
c0008dad:	83 ec 18             	sub    esp,0x18
c0008db0:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008db4:	85 db                	test   ebx,ebx
c0008db6:	74 54                	je     c0008e0c <src_short_to_float_array+0x60>
c0008db8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0008dbc:	4b                   	dec    ebx
c0008dbd:	83 ec 0c             	sub    esp,0xc
c0008dc0:	0f bf 04 58          	movsx  eax,WORD PTR [eax+ebx*2]
c0008dc4:	50                   	push   eax
c0008dc5:	e8 61 fc 01 00       	call   c0028a2b <__floatsidf>
c0008dca:	83 c4 10             	add    esp,0x10
c0008dcd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008dd1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008dd5:	68 00 00 00 3f       	push   0x3f000000
c0008dda:	6a 00                	push   0x0
c0008ddc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008de4:	e8 df f5 01 00       	call   c00283c8 <__muldf3>
c0008de9:	59                   	pop    ecx
c0008dea:	59                   	pop    ecx
c0008deb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008def:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008df3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008df7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008dfb:	e8 9b fe 01 00       	call   c0028c9b <__truncdfsf2>
c0008e00:	83 c4 10             	add    esp,0x10
c0008e03:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008e07:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008e0a:	eb a8                	jmp    c0008db4 <src_short_to_float_array+0x8>
c0008e0c:	83 c4 18             	add    esp,0x18
c0008e0f:	5b                   	pop    ebx
c0008e10:	c3                   	ret    

c0008e11 <src_float_to_short_array>:
c0008e11:	56                   	push   esi
c0008e12:	53                   	push   ebx
c0008e13:	83 ec 14             	sub    esp,0x14
c0008e16:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008e1a:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008e1e:	85 db                	test   ebx,ebx
c0008e20:	0f 84 a4 00 00 00    	je     c0008eca <src_float_to_short_array+0xb9>
c0008e26:	83 ec 0c             	sub    esp,0xc
c0008e29:	4b                   	dec    ebx
c0008e2a:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008e2e:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008e31:	e8 89 ff 01 00       	call   c0028dbf <__extendsfdf2>
c0008e36:	83 c4 10             	add    esp,0x10
c0008e39:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e3d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e41:	68 00 00 e0 41       	push   0x41e00000
c0008e46:	6a 00                	push   0x0
c0008e48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e50:	e8 73 f5 01 00       	call   c00283c8 <__muldf3>
c0008e55:	83 c4 10             	add    esp,0x10
c0008e58:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008e5c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008e60:	68 ff ff df 41       	push   0x41dfffff
c0008e65:	68 00 00 c0 ff       	push   0xffc00000
c0008e6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e72:	e8 1e fe 01 00       	call   c0028c95 <__gedf2>
c0008e77:	83 c4 10             	add    esp,0x10
c0008e7a:	85 c0                	test   eax,eax
c0008e7c:	78 08                	js     c0008e86 <src_float_to_short_array+0x75>
c0008e7e:	66 c7 04 5e ff 7f    	mov    WORD PTR [esi+ebx*2],0x7fff
c0008e84:	eb 98                	jmp    c0008e1e <src_float_to_short_array+0xd>
c0008e86:	68 00 00 e0 c1       	push   0xc1e00000
c0008e8b:	6a 00                	push   0x0
c0008e8d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e91:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008e95:	e8 ff fd 01 00       	call   c0028c99 <__ledf2>
c0008e9a:	83 c4 10             	add    esp,0x10
c0008e9d:	85 c0                	test   eax,eax
c0008e9f:	7f 0b                	jg     c0008eac <src_float_to_short_array+0x9b>
c0008ea1:	66 c7 04 5e 00 80    	mov    WORD PTR [esi+ebx*2],0x8000
c0008ea7:	e9 72 ff ff ff       	jmp    c0008e1e <src_float_to_short_array+0xd>
c0008eac:	50                   	push   eax
c0008ead:	50                   	push   eax
c0008eae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008eb6:	e8 95 ff 01 00       	call   c0028e50 <lrint>
c0008ebb:	83 c4 10             	add    esp,0x10
c0008ebe:	c1 f8 10             	sar    eax,0x10
c0008ec1:	66 89 04 5e          	mov    WORD PTR [esi+ebx*2],ax
c0008ec5:	e9 54 ff ff ff       	jmp    c0008e1e <src_float_to_short_array+0xd>
c0008eca:	83 c4 14             	add    esp,0x14
c0008ecd:	5b                   	pop    ebx
c0008ece:	5e                   	pop    esi
c0008ecf:	c3                   	ret    

c0008ed0 <src_int_to_float_array>:
c0008ed0:	53                   	push   ebx
c0008ed1:	83 ec 18             	sub    esp,0x18
c0008ed4:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008ed8:	85 db                	test   ebx,ebx
c0008eda:	74 52                	je     c0008f2e <src_int_to_float_array+0x5e>
c0008edc:	83 ec 0c             	sub    esp,0xc
c0008edf:	4b                   	dec    ebx
c0008ee0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008ee4:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008ee7:	e8 3f fb 01 00       	call   c0028a2b <__floatsidf>
c0008eec:	83 c4 10             	add    esp,0x10
c0008eef:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008ef3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008ef7:	68 00 00 00 3e       	push   0x3e000000
c0008efc:	6a 00                	push   0x0
c0008efe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f02:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f06:	e8 bd f4 01 00       	call   c00283c8 <__muldf3>
c0008f0b:	59                   	pop    ecx
c0008f0c:	59                   	pop    ecx
c0008f0d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0008f11:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0008f15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f1d:	e8 79 fd 01 00       	call   c0028c9b <__truncdfsf2>
c0008f22:	83 c4 10             	add    esp,0x10
c0008f25:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0008f29:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c0008f2c:	eb aa                	jmp    c0008ed8 <src_int_to_float_array+0x8>
c0008f2e:	83 c4 18             	add    esp,0x18
c0008f31:	5b                   	pop    ebx
c0008f32:	c3                   	ret    

c0008f33 <src_float_to_int_array>:
c0008f33:	56                   	push   esi
c0008f34:	53                   	push   ebx
c0008f35:	83 ec 14             	sub    esp,0x14
c0008f38:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0008f3c:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0008f40:	85 db                	test   ebx,ebx
c0008f42:	0f 84 a2 00 00 00    	je     c0008fea <src_float_to_int_array+0xb7>
c0008f48:	83 ec 0c             	sub    esp,0xc
c0008f4b:	4b                   	dec    ebx
c0008f4c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0008f50:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0008f53:	e8 67 fe 01 00       	call   c0028dbf <__extendsfdf2>
c0008f58:	83 c4 10             	add    esp,0x10
c0008f5b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f5f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f63:	68 00 00 e0 41       	push   0x41e00000
c0008f68:	6a 00                	push   0x0
c0008f6a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f6e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f72:	e8 51 f4 01 00       	call   c00283c8 <__muldf3>
c0008f77:	83 c4 10             	add    esp,0x10
c0008f7a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0008f7e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0008f82:	68 ff ff df 41       	push   0x41dfffff
c0008f87:	68 00 00 c0 ff       	push   0xffc00000
c0008f8c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f90:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008f94:	e8 fc fc 01 00       	call   c0028c95 <__gedf2>
c0008f99:	83 c4 10             	add    esp,0x10
c0008f9c:	85 c0                	test   eax,eax
c0008f9e:	78 09                	js     c0008fa9 <src_float_to_int_array+0x76>
c0008fa0:	c7 04 9e ff ff ff 7f 	mov    DWORD PTR [esi+ebx*4],0x7fffffff
c0008fa7:	eb 97                	jmp    c0008f40 <src_float_to_int_array+0xd>
c0008fa9:	68 00 00 e0 c1       	push   0xc1e00000
c0008fae:	6a 00                	push   0x0
c0008fb0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fb8:	e8 dc fc 01 00       	call   c0028c99 <__ledf2>
c0008fbd:	83 c4 10             	add    esp,0x10
c0008fc0:	85 c0                	test   eax,eax
c0008fc2:	7f 0c                	jg     c0008fd0 <src_float_to_int_array+0x9d>
c0008fc4:	c7 04 9e 00 00 00 80 	mov    DWORD PTR [esi+ebx*4],0x80000000
c0008fcb:	e9 70 ff ff ff       	jmp    c0008f40 <src_float_to_int_array+0xd>
c0008fd0:	50                   	push   eax
c0008fd1:	50                   	push   eax
c0008fd2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fd6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0008fda:	e8 71 fe 01 00       	call   c0028e50 <lrint>
c0008fdf:	83 c4 10             	add    esp,0x10
c0008fe2:	89 04 9e             	mov    DWORD PTR [esi+ebx*4],eax
c0008fe5:	e9 56 ff ff ff       	jmp    c0008f40 <src_float_to_int_array+0xd>
c0008fea:	83 c4 14             	add    esp,0x14
c0008fed:	5b                   	pop    ebx
c0008fee:	5e                   	pop    esi
c0008fef:	c3                   	ret    

c0008ff0 <linear_vari_process>:
c0008ff0:	55                   	push   ebp
c0008ff1:	31 d2                	xor    edx,edx
c0008ff3:	57                   	push   edi
c0008ff4:	56                   	push   esi
c0008ff5:	53                   	push   ebx
c0008ff6:	83 ec 3c             	sub    esp,0x3c
c0008ff9:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0008ffd:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c0009001:	0f 8e d3 07 00 00    	jle    c00097da <linear_vari_process+0x7ea>
c0009007:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000900b:	ba 05 00 00 00       	mov    edx,0x5
c0009010:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c0009013:	85 db                	test   ebx,ebx
c0009015:	0f 84 bf 07 00 00    	je     c00097da <linear_vari_process+0x7ea>
c000901b:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000901e:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c0009022:	74 19                	je     c000903d <linear_vari_process+0x4d>
c0009024:	31 d2                	xor    edx,edx
c0009026:	39 c2                	cmp    edx,eax
c0009028:	7d 0c                	jge    c0009036 <linear_vari_process+0x46>
c000902a:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000902c:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000902f:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c0009033:	42                   	inc    edx
c0009034:	eb f0                	jmp    c0009026 <linear_vari_process+0x36>
c0009036:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000903d:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c0009040:	0f af d0             	imul   edx,eax
c0009043:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c0009046:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000904a:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c0009051:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c0009054:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000905b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000905f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009062:	8b 00                	mov    eax,DWORD PTR [eax]
c0009064:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009068:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000906c:	68 00 00 70 3f       	push   0x3f700000
c0009071:	6a 00                	push   0x0
c0009073:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009077:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000907b:	e8 17 fc 01 00       	call   c0028c97 <__ltdf2>
c0009080:	83 c4 10             	add    esp,0x10
c0009083:	ba 16 00 00 00       	mov    edx,0x16
c0009088:	85 c0                	test   eax,eax
c000908a:	0f 88 4a 07 00 00    	js     c00097da <linear_vari_process+0x7ea>
c0009090:	68 00 00 70 40       	push   0x40700000
c0009095:	6a 00                	push   0x0
c0009097:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000909f:	e8 d5 fb 01 00       	call   c0028c79 <__gtdf2>
c00090a4:	83 c4 10             	add    esp,0x10
c00090a7:	ba 16 00 00 00       	mov    edx,0x16
c00090ac:	85 c0                	test   eax,eax
c00090ae:	0f 8f 26 07 00 00    	jg     c00097da <linear_vari_process+0x7ea>
c00090b4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00090b8:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c00090bb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00090be:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00090c2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00090c6:	68 00 00 f0 3f       	push   0x3ff00000
c00090cb:	6a 00                	push   0x0
c00090cd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00090d5:	e8 bd fb 01 00       	call   c0028c97 <__ltdf2>
c00090da:	83 c4 10             	add    esp,0x10
c00090dd:	85 c0                	test   eax,eax
c00090df:	0f 89 89 02 00 00    	jns    c000936e <linear_vari_process+0x37e>
c00090e5:	8b 7b 14             	mov    edi,DWORD PTR [ebx+0x14]
c00090e8:	39 7b 18             	cmp    DWORD PTR [ebx+0x18],edi
c00090eb:	0f 8d 7d 02 00 00    	jge    c000936e <linear_vari_process+0x37e>
c00090f1:	83 ec 0c             	sub    esp,0xc
c00090f4:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00090f7:	e8 2f f9 01 00       	call   c0028a2b <__floatsidf>
c00090fc:	83 c4 10             	add    esp,0x10
c00090ff:	89 04 24             	mov    DWORD PTR [esp],eax
c0009102:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009106:	68 00 00 f0 3f       	push   0x3ff00000
c000910b:	6a 00                	push   0x0
c000910d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009111:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009115:	e8 31 ec 01 00       	call   c0027d4b <__adddf3>
c000911a:	83 c4 10             	add    esp,0x10
c000911d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009121:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009125:	52                   	push   edx
c0009126:	50                   	push   eax
c0009127:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000912b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000912f:	e8 94 f2 01 00       	call   c00283c8 <__muldf3>
c0009134:	5d                   	pop    ebp
c0009135:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009139:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000913d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0009140:	e8 e6 f8 01 00       	call   c0028a2b <__floatsidf>
c0009145:	83 c4 10             	add    esp,0x10
c0009148:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000914c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009150:	52                   	push   edx
c0009151:	50                   	push   eax
c0009152:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009156:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000915a:	e8 ec eb 01 00       	call   c0027d4b <__adddf3>
c000915f:	59                   	pop    ecx
c0009160:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0009164:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009168:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000916b:	e8 bb f8 01 00       	call   c0028a2b <__floatsidf>
c0009170:	83 c4 10             	add    esp,0x10
c0009173:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009177:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000917b:	52                   	push   edx
c000917c:	50                   	push   eax
c000917d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009181:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009185:	e8 0b fb 01 00       	call   c0028c95 <__gedf2>
c000918a:	83 c4 10             	add    esp,0x10
c000918d:	85 c0                	test   eax,eax
c000918f:	0f 89 d9 01 00 00    	jns    c000936e <linear_vari_process+0x37e>
c0009195:	85 ff                	test   edi,edi
c0009197:	0f 8e f4 00 00 00    	jle    c0009291 <linear_vari_process+0x2a1>
c000919d:	83 ec 10             	sub    esp,0x10
c00091a0:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00091a3:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00091a6:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00091aa:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00091ad:	ff 30                	push   DWORD PTR [eax]
c00091af:	e8 e8 f1 01 00       	call   c002839c <__subdf3>
c00091b4:	83 c4 18             	add    esp,0x18
c00091b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00091bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00091bf:	52                   	push   edx
c00091c0:	50                   	push   eax
c00091c1:	e8 6a fc 01 00       	call   c0028e30 <fabs>
c00091c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00091ca:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00091ce:	83 c4 10             	add    esp,0x10
c00091d1:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00091d6:	68 23 42 92 0c       	push   0xc924223
c00091db:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091df:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00091e3:	e8 91 fa 01 00       	call   c0028c79 <__gtdf2>
c00091e8:	83 c4 10             	add    esp,0x10
c00091eb:	85 c0                	test   eax,eax
c00091ed:	0f 8e 9e 00 00 00    	jle    c0009291 <linear_vari_process+0x2a1>
c00091f3:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c00091f7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00091fa:	8b 00                	mov    eax,DWORD PTR [eax]
c00091fc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009200:	89 04 24             	mov    DWORD PTR [esp],eax
c0009203:	52                   	push   edx
c0009204:	50                   	push   eax
c0009205:	ff 76 20             	push   DWORD PTR [esi+0x20]
c0009208:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000920b:	e8 8c f1 01 00       	call   c002839c <__subdf3>
c0009210:	59                   	pop    ecx
c0009211:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009215:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009219:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000921c:	e8 0a f8 01 00       	call   c0028a2b <__floatsidf>
c0009221:	83 c4 10             	add    esp,0x10
c0009224:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009228:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000922c:	52                   	push   edx
c000922d:	50                   	push   eax
c000922e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009236:	e8 8d f1 01 00       	call   c00283c8 <__muldf3>
c000923b:	5f                   	pop    edi
c000923c:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009240:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009244:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0009247:	e8 df f7 01 00       	call   c0028a2b <__floatsidf>
c000924c:	83 c4 10             	add    esp,0x10
c000924f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009253:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009257:	52                   	push   edx
c0009258:	50                   	push   eax
c0009259:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000925d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009261:	e8 46 f4 01 00       	call   c00286ac <__divdf3>
c0009266:	83 c4 10             	add    esp,0x10
c0009269:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000926d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009271:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009275:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009279:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000927d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009281:	e8 c5 ea 01 00       	call   c0027d4b <__adddf3>
c0009286:	83 c4 10             	add    esp,0x10
c0009289:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000928d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009291:	31 ff                	xor    edi,edi
c0009293:	39 7b 04             	cmp    DWORD PTR [ebx+0x4],edi
c0009296:	0f 8e 9d 00 00 00    	jle    c0009339 <linear_vari_process+0x349>
c000929c:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c000929f:	8b 6c bb 1c          	mov    ebp,DWORD PTR [ebx+edi*4+0x1c]
c00092a3:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00092a6:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00092aa:	89 04 24             	mov    DWORD PTR [esp],eax
c00092ad:	8b 06                	mov    eax,DWORD PTR [esi]
c00092af:	52                   	push   edx
c00092b0:	52                   	push   edx
c00092b1:	55                   	push   ebp
c00092b2:	ff 34 b8             	push   DWORD PTR [eax+edi*4]
c00092b5:	47                   	inc    edi
c00092b6:	e8 25 e4 01 00       	call   c00276e0 <__subsf3>
c00092bb:	89 04 24             	mov    DWORD PTR [esp],eax
c00092be:	e8 fc fa 01 00       	call   c0028dbf <__extendsfdf2>
c00092c3:	83 c4 10             	add    esp,0x10
c00092c6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00092ca:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00092ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092d2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00092d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092da:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00092de:	e8 e5 f0 01 00       	call   c00283c8 <__muldf3>
c00092e3:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00092e6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00092ea:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00092ee:	e8 cc fa 01 00       	call   c0028dbf <__extendsfdf2>
c00092f3:	83 c4 10             	add    esp,0x10
c00092f6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00092fa:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00092fe:	52                   	push   edx
c00092ff:	50                   	push   eax
c0009300:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009304:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009308:	e8 3e ea 01 00       	call   c0027d4b <__adddf3>
c000930d:	59                   	pop    ecx
c000930e:	5d                   	pop    ebp
c000930f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009313:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009317:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000931b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000931f:	e8 77 f9 01 00       	call   c0028c9b <__truncdfsf2>
c0009324:	83 c4 10             	add    esp,0x10
c0009327:	8b 14 24             	mov    edx,DWORD PTR [esp]
c000932a:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000932e:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009331:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c0009334:	e9 5a ff ff ff       	jmp    c0009293 <linear_vari_process+0x2a3>
c0009339:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000933d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009341:	68 00 00 f0 3f       	push   0x3ff00000
c0009346:	6a 00                	push   0x0
c0009348:	e8 5f f3 01 00       	call   c00286ac <__divdf3>
c000934d:	83 c4 10             	add    esp,0x10
c0009350:	89 04 24             	mov    DWORD PTR [esp],eax
c0009353:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009357:	52                   	push   edx
c0009358:	50                   	push   eax
c0009359:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000935d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009361:	e8 e5 e9 01 00       	call   c0027d4b <__adddf3>
c0009366:	83 c4 10             	add    esp,0x10
c0009369:	e9 50 fd ff ff       	jmp    c00090be <linear_vari_process+0xce>
c000936e:	50                   	push   eax
c000936f:	50                   	push   eax
c0009370:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009374:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009378:	e8 d3 fa 01 00       	call   c0028e50 <lrint>
c000937d:	83 ec 0c             	sub    esp,0xc
c0009380:	50                   	push   eax
c0009381:	e8 a5 f6 01 00       	call   c0028a2b <__floatsidf>
c0009386:	83 c4 10             	add    esp,0x10
c0009389:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000938d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009391:	52                   	push   edx
c0009392:	50                   	push   eax
c0009393:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009397:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000939b:	e8 fc ef 01 00       	call   c002839c <__subdf3>
c00093a0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00093a4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00093a8:	83 c4 20             	add    esp,0x20
c00093ab:	6a 00                	push   0x0
c00093ad:	6a 00                	push   0x0
c00093af:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093b7:	e8 db f8 01 00       	call   c0028c97 <__ltdf2>
c00093bc:	83 c4 10             	add    esp,0x10
c00093bf:	85 c0                	test   eax,eax
c00093c1:	79 1e                	jns    c00093e1 <linear_vari_process+0x3f1>
c00093c3:	68 00 00 f0 3f       	push   0x3ff00000
c00093c8:	6a 00                	push   0x0
c00093ca:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093ce:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00093d2:	e8 74 e9 01 00       	call   c0027d4b <__adddf3>
c00093d7:	83 c4 10             	add    esp,0x10
c00093da:	89 04 24             	mov    DWORD PTR [esp],eax
c00093dd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c00093e1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c00093e4:	83 ec 10             	sub    esp,0x10
c00093e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00093ef:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00093f7:	e8 a0 ef 01 00       	call   c002839c <__subdf3>
c00093fc:	83 c4 18             	add    esp,0x18
c00093ff:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009403:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009407:	52                   	push   edx
c0009408:	50                   	push   eax
c0009409:	e8 42 fa 01 00       	call   c0028e50 <lrint>
c000940e:	83 c4 10             	add    esp,0x10
c0009411:	0f af f8             	imul   edi,eax
c0009414:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0009417:	01 7b 10             	add    DWORD PTR [ebx+0x10],edi
c000941a:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000941d:	8b 7b 10             	mov    edi,DWORD PTR [ebx+0x10]
c0009420:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c0009423:	89 4c 24 20          	mov    DWORD PTR [esp+0x20],ecx
c0009427:	0f 8d 13 03 00 00    	jge    c0009740 <linear_vari_process+0x750>
c000942d:	83 ec 0c             	sub    esp,0xc
c0009430:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0009433:	e8 f3 f5 01 00       	call   c0028a2b <__floatsidf>
c0009438:	83 c4 10             	add    esp,0x10
c000943b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000943f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009443:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009447:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000944b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000944f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009453:	e8 70 ef 01 00       	call   c00283c8 <__muldf3>
c0009458:	89 3c 24             	mov    DWORD PTR [esp],edi
c000945b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000945f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009463:	e8 c3 f5 01 00       	call   c0028a2b <__floatsidf>
c0009468:	83 c4 10             	add    esp,0x10
c000946b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000946f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009473:	52                   	push   edx
c0009474:	50                   	push   eax
c0009475:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009479:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000947d:	e8 c9 e8 01 00       	call   c0027d4b <__adddf3>
c0009482:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009485:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009489:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000948d:	e8 99 f5 01 00       	call   c0028a2b <__floatsidf>
c0009492:	83 c4 10             	add    esp,0x10
c0009495:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009499:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000949d:	52                   	push   edx
c000949e:	50                   	push   eax
c000949f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00094a7:	e8 eb f7 01 00       	call   c0028c97 <__ltdf2>
c00094ac:	83 c4 10             	add    esp,0x10
c00094af:	85 c0                	test   eax,eax
c00094b1:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00094b5:	0f 89 85 02 00 00    	jns    c0009740 <linear_vari_process+0x750>
c00094bb:	85 c9                	test   ecx,ecx
c00094bd:	0f 8e f5 00 00 00    	jle    c00095b8 <linear_vari_process+0x5c8>
c00094c3:	83 ec 10             	sub    esp,0x10
c00094c6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c00094c9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c00094cc:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00094d0:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00094d3:	ff 30                	push   DWORD PTR [eax]
c00094d5:	e8 c2 ee 01 00       	call   c002839c <__subdf3>
c00094da:	83 c4 18             	add    esp,0x18
c00094dd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00094e1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00094e5:	52                   	push   edx
c00094e6:	50                   	push   eax
c00094e7:	e8 44 f9 01 00       	call   c0028e30 <fabs>
c00094ec:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00094f0:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c00094f4:	83 c4 10             	add    esp,0x10
c00094f7:	68 a1 9c c7 3b       	push   0x3bc79ca1
c00094fc:	68 23 42 92 0c       	push   0xc924223
c0009501:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009505:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009509:	e8 6b f7 01 00       	call   c0028c79 <__gtdf2>
c000950e:	83 c4 10             	add    esp,0x10
c0009511:	85 c0                	test   eax,eax
c0009513:	0f 8e 9f 00 00 00    	jle    c00095b8 <linear_vari_process+0x5c8>
c0009519:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c000951d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0009520:	8b 00                	mov    eax,DWORD PTR [eax]
c0009522:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009526:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000952a:	52                   	push   edx
c000952b:	50                   	push   eax
c000952c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000952f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c0009532:	e8 65 ee 01 00       	call   c002839c <__subdf3>
c0009537:	5f                   	pop    edi
c0009538:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000953c:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009540:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0009543:	e8 e3 f4 01 00       	call   c0028a2b <__floatsidf>
c0009548:	83 c4 10             	add    esp,0x10
c000954b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000954f:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009553:	52                   	push   edx
c0009554:	50                   	push   eax
c0009555:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009559:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000955d:	e8 66 ee 01 00       	call   c00283c8 <__muldf3>
c0009562:	5d                   	pop    ebp
c0009563:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009567:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000956b:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000956e:	e8 b8 f4 01 00       	call   c0028a2b <__floatsidf>
c0009573:	83 c4 10             	add    esp,0x10
c0009576:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000957a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000957e:	52                   	push   edx
c000957f:	50                   	push   eax
c0009580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009584:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009588:	e8 1f f1 01 00       	call   c00286ac <__divdf3>
c000958d:	83 c4 10             	add    esp,0x10
c0009590:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009594:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009598:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000959c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00095a0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00095a8:	e8 9e e7 01 00       	call   c0027d4b <__adddf3>
c00095ad:	83 c4 10             	add    esp,0x10
c00095b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00095b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00095b8:	31 ff                	xor    edi,edi
c00095ba:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00095bd:	39 f8                	cmp    eax,edi
c00095bf:	0f 8e ac 00 00 00    	jle    c0009671 <linear_vari_process+0x681>
c00095c5:	8b 16                	mov    edx,DWORD PTR [esi]
c00095c7:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c00095ca:	29 c1                	sub    ecx,eax
c00095cc:	89 c8                	mov    eax,ecx
c00095ce:	8b 4e 04             	mov    ecx,DWORD PTR [esi+0x4]
c00095d1:	01 f8                	add    eax,edi
c00095d3:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c00095d7:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c00095da:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00095dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00095e1:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00095e4:	51                   	push   ecx
c00095e5:	01 f8                	add    eax,edi
c00095e7:	51                   	push   ecx
c00095e8:	47                   	inc    edi
c00095e9:	55                   	push   ebp
c00095ea:	ff 34 82             	push   DWORD PTR [edx+eax*4]
c00095ed:	e8 ee e0 01 00       	call   c00276e0 <__subsf3>
c00095f2:	89 04 24             	mov    DWORD PTR [esp],eax
c00095f5:	e8 c5 f7 01 00       	call   c0028dbf <__extendsfdf2>
c00095fa:	83 c4 10             	add    esp,0x10
c00095fd:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009601:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009605:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009609:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000960d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009611:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009615:	e8 ae ed 01 00       	call   c00283c8 <__muldf3>
c000961a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000961d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009621:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009625:	e8 95 f7 01 00       	call   c0028dbf <__extendsfdf2>
c000962a:	83 c4 10             	add    esp,0x10
c000962d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009631:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009635:	52                   	push   edx
c0009636:	50                   	push   eax
c0009637:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000963f:	e8 07 e7 01 00       	call   c0027d4b <__adddf3>
c0009644:	5d                   	pop    ebp
c0009645:	59                   	pop    ecx
c0009646:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000964a:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000964e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009652:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009656:	e8 40 f6 01 00       	call   c0028c9b <__truncdfsf2>
c000965b:	83 c4 10             	add    esp,0x10
c000965e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009662:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0009666:	89 04 91             	mov    DWORD PTR [ecx+edx*4],eax
c0009669:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000966c:	e9 49 ff ff ff       	jmp    c00095ba <linear_vari_process+0x5ca>
c0009671:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009675:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009679:	68 00 00 f0 3f       	push   0x3ff00000
c000967e:	6a 00                	push   0x0
c0009680:	e8 27 f0 01 00       	call   c00286ac <__divdf3>
c0009685:	83 c4 10             	add    esp,0x10
c0009688:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000968c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009690:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009694:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c0009698:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000969c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096a0:	e8 a6 e6 01 00       	call   c0027d4b <__adddf3>
c00096a5:	59                   	pop    ecx
c00096a6:	5f                   	pop    edi
c00096a7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096ab:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096af:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00096b7:	e8 94 f7 01 00       	call   c0028e50 <lrint>
c00096bc:	83 ec 0c             	sub    esp,0xc
c00096bf:	50                   	push   eax
c00096c0:	e8 66 f3 01 00       	call   c0028a2b <__floatsidf>
c00096c5:	83 c4 10             	add    esp,0x10
c00096c8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00096cc:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c00096d0:	52                   	push   edx
c00096d1:	50                   	push   eax
c00096d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00096da:	e8 bd ec 01 00       	call   c002839c <__subdf3>
c00096df:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00096e3:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00096e7:	83 c4 20             	add    esp,0x20
c00096ea:	6a 00                	push   0x0
c00096ec:	6a 00                	push   0x0
c00096ee:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00096f6:	e8 9c f5 01 00       	call   c0028c97 <__ltdf2>
c00096fb:	83 c4 10             	add    esp,0x10
c00096fe:	85 c0                	test   eax,eax
c0009700:	79 1e                	jns    c0009720 <linear_vari_process+0x730>
c0009702:	68 00 00 f0 3f       	push   0x3ff00000
c0009707:	6a 00                	push   0x0
c0009709:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000970d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009711:	e8 35 e6 01 00       	call   c0027d4b <__adddf3>
c0009716:	83 c4 10             	add    esp,0x10
c0009719:	89 04 24             	mov    DWORD PTR [esp],eax
c000971c:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0009720:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c0009723:	83 ec 10             	sub    esp,0x10
c0009726:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000972a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000972e:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009732:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009736:	e8 61 ec 01 00       	call   c002839c <__subdf3>
c000973b:	e9 bc fc ff ff       	jmp    c00093fc <linear_vari_process+0x40c>
c0009740:	39 fd                	cmp    ebp,edi
c0009742:	7d 38                	jge    c000977c <linear_vari_process+0x78c>
c0009744:	83 ec 0c             	sub    esp,0xc
c0009747:	89 f8                	mov    eax,edi
c0009749:	29 e8                	sub    eax,ebp
c000974b:	99                   	cdq    
c000974c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000974f:	50                   	push   eax
c0009750:	e8 d6 f2 01 00       	call   c0028a2b <__floatsidf>
c0009755:	83 c4 10             	add    esp,0x10
c0009758:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000975c:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009760:	52                   	push   edx
c0009761:	50                   	push   eax
c0009762:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0009766:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000976a:	e8 dc e5 01 00       	call   c0027d4b <__adddf3>
c000976f:	83 c4 10             	add    esp,0x10
c0009772:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c0009775:	89 04 24             	mov    DWORD PTR [esp],eax
c0009778:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000977c:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009780:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0009783:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0009787:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000978a:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000978d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0009790:	85 c0                	test   eax,eax
c0009792:	7f 29                	jg     c00097bd <linear_vari_process+0x7cd>
c0009794:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c0009798:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000979c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00097a0:	89 01                	mov    DWORD PTR [ecx],eax
c00097a2:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00097a5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00097a8:	99                   	cdq    
c00097a9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097ac:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c00097af:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00097b2:	99                   	cdq    
c00097b3:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c00097b6:	31 d2                	xor    edx,edx
c00097b8:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c00097bb:	eb 1d                	jmp    c00097da <linear_vari_process+0x7ea>
c00097bd:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c00097c0:	31 d2                	xor    edx,edx
c00097c2:	29 c8                	sub    eax,ecx
c00097c4:	c1 e0 02             	shl    eax,0x2
c00097c7:	39 d1                	cmp    ecx,edx
c00097c9:	7e c9                	jle    c0009794 <linear_vari_process+0x7a4>
c00097cb:	8b 3e                	mov    edi,DWORD PTR [esi]
c00097cd:	8b 3c 07             	mov    edi,DWORD PTR [edi+eax*1]
c00097d0:	83 c0 04             	add    eax,0x4
c00097d3:	89 7c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],edi
c00097d7:	42                   	inc    edx
c00097d8:	eb ed                	jmp    c00097c7 <linear_vari_process+0x7d7>
c00097da:	83 c4 3c             	add    esp,0x3c
c00097dd:	89 d0                	mov    eax,edx
c00097df:	5b                   	pop    ebx
c00097e0:	5e                   	pop    esi
c00097e1:	5f                   	pop    edi
c00097e2:	5d                   	pop    ebp
c00097e3:	c3                   	ret    

c00097e4 <linear_reset>:
c00097e4:	83 ec 0c             	sub    esp,0xc
c00097e7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00097eb:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c00097ee:	85 c0                	test   eax,eax
c00097f0:	74 20                	je     c0009812 <linear_reset+0x2e>
c00097f2:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c00097f5:	83 c0 1c             	add    eax,0x1c
c00097f8:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c00097fb:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c0009802:	c1 e2 02             	shl    edx,0x2
c0009805:	51                   	push   ecx
c0009806:	52                   	push   edx
c0009807:	6a 00                	push   0x0
c0009809:	50                   	push   eax
c000980a:	e8 5d 6f ff ff       	call   c000076c <memset>
c000980f:	83 c4 10             	add    esp,0x10
c0009812:	83 c4 0c             	add    esp,0xc
c0009815:	c3                   	ret    

c0009816 <linear_get_name>:
c0009816:	31 c0                	xor    eax,eax
c0009818:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000981d:	75 05                	jne    c0009824 <linear_get_name+0xe>
c000981f:	b8 80 a6 02 c0       	mov    eax,0xc002a680
c0009824:	c3                   	ret    

c0009825 <linear_get_description>:
c0009825:	31 c0                	xor    eax,eax
c0009827:	83 7c 24 04 04       	cmp    DWORD PTR [esp+0x4],0x4
c000982c:	75 05                	jne    c0009833 <linear_get_description+0xe>
c000982e:	b8 94 a6 02 c0       	mov    eax,0xc002a694
c0009833:	c3                   	ret    

c0009834 <linear_set_converter>:
c0009834:	53                   	push   ebx
c0009835:	b8 0a 00 00 00       	mov    eax,0xa
c000983a:	83 ec 08             	sub    esp,0x8
c000983d:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0009841:	83 7c 24 14 04       	cmp    DWORD PTR [esp+0x14],0x4
c0009846:	75 6e                	jne    c00098b6 <linear_set_converter+0x82>
c0009848:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000984b:	85 c0                	test   eax,eax
c000984d:	74 13                	je     c0009862 <linear_set_converter+0x2e>
c000984f:	83 ec 0c             	sub    esp,0xc
c0009852:	50                   	push   eax
c0009853:	e8 60 60 00 00       	call   c000f8b8 <free>
c0009858:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000985f:	83 c4 10             	add    esp,0x10
c0009862:	50                   	push   eax
c0009863:	50                   	push   eax
c0009864:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0009867:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000986e:	50                   	push   eax
c000986f:	6a 01                	push   0x1
c0009871:	e8 62 60 00 00       	call   c000f8d8 <calloc>
c0009876:	83 c4 10             	add    esp,0x10
c0009879:	89 c2                	mov    edx,eax
c000987b:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000987e:	85 d2                	test   edx,edx
c0009880:	b8 01 00 00 00       	mov    eax,0x1
c0009885:	74 2f                	je     c00098b6 <linear_set_converter+0x82>
c0009887:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000988a:	83 ec 0c             	sub    esp,0xc
c000988d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0009890:	c7 02 fc c4 87 07    	mov    DWORD PTR [edx],0x787c4fc
c0009896:	c7 43 24 f0 8f 00 c0 	mov    DWORD PTR [ebx+0x24],0xc0008ff0
c000989d:	c7 43 20 f0 8f 00 c0 	mov    DWORD PTR [ebx+0x20],0xc0008ff0
c00098a4:	c7 43 28 e4 97 00 c0 	mov    DWORD PTR [ebx+0x28],0xc00097e4
c00098ab:	53                   	push   ebx
c00098ac:	e8 33 ff ff ff       	call   c00097e4 <linear_reset>
c00098b1:	83 c4 10             	add    esp,0x10
c00098b4:	31 c0                	xor    eax,eax
c00098b6:	83 c4 08             	add    esp,0x8
c00098b9:	5b                   	pop    ebx
c00098ba:	c3                   	ret    

c00098bb <int_to_fp>:
c00098bb:	c1 e0 0c             	shl    eax,0xc
c00098be:	c3                   	ret    

c00098bf <fp_to_int>:
c00098bf:	c1 f8 0c             	sar    eax,0xc
c00098c2:	c3                   	ret    

c00098c3 <fp_fraction_part>:
c00098c3:	25 ff 0f 00 00       	and    eax,0xfff
c00098c8:	c3                   	ret    

c00098c9 <fp_to_double>:
c00098c9:	83 ec 1c             	sub    esp,0x1c
c00098cc:	e8 f2 ff ff ff       	call   c00098c3 <fp_fraction_part>
c00098d1:	83 ec 0c             	sub    esp,0xc
c00098d4:	50                   	push   eax
c00098d5:	e8 51 f1 01 00       	call   c0028a2b <__floatsidf>
c00098da:	83 c4 10             	add    esp,0x10
c00098dd:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00098e1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00098e5:	68 00 00 30 3f       	push   0x3f300000
c00098ea:	6a 00                	push   0x0
c00098ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00098f4:	e8 cf ea 01 00       	call   c00283c8 <__muldf3>
c00098f9:	83 c4 2c             	add    esp,0x2c
c00098fc:	c3                   	ret    

c00098fd <calc_output_single>:
c00098fd:	55                   	push   ebp
c00098fe:	57                   	push   edi
c00098ff:	56                   	push   esi
c0009900:	89 c6                	mov    esi,eax
c0009902:	53                   	push   ebx
c0009903:	89 d3                	mov    ebx,edx
c0009905:	83 ec 4c             	sub    esp,0x4c
c0009908:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000990c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c000990f:	e8 a7 ff ff ff       	call   c00098bb <int_to_fp>
c0009914:	8b 7e 34             	mov    edi,DWORD PTR [esi+0x34]
c0009917:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000991b:	89 7c 24 20          	mov    DWORD PTR [esp+0x20],edi
c000991f:	2b 44 24 18          	sub    eax,DWORD PTR [esp+0x18]
c0009923:	8b 7e 30             	mov    edi,DWORD PTR [esi+0x30]
c0009926:	99                   	cdq    
c0009927:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c000992f:	f7 fb                	idiv   ebx
c0009931:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0009939:	89 da                	mov    edx,ebx
c000993b:	0f af d0             	imul   edx,eax
c000993e:	03 54 24 18          	add    edx,DWORD PTR [esp+0x18]
c0009942:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0009946:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000994a:	29 c2                	sub    edx,eax
c000994c:	8d 2c 96             	lea    ebp,[esi+edx*4]
c000994f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009953:	83 c5 04             	add    ebp,0x4
c0009956:	e8 6e ff ff ff       	call   c00098c9 <fp_to_double>
c000995b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000995f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009963:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0009967:	e8 53 ff ff ff       	call   c00098bf <fp_to_int>
c000996c:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c000996f:	52                   	push   edx
c0009970:	52                   	push   edx
c0009971:	51                   	push   ecx
c0009972:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009976:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c000997a:	e8 61 dd 01 00       	call   c00276e0 <__subsf3>
c000997f:	89 04 24             	mov    DWORD PTR [esp],eax
c0009982:	e8 38 f4 01 00       	call   c0028dbf <__extendsfdf2>
c0009987:	83 c4 10             	add    esp,0x10
c000998a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000998e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009992:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009996:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000999a:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000999e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00099a2:	e8 21 ea 01 00       	call   c00283c8 <__muldf3>
c00099a7:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c00099ab:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c00099af:	89 0c 24             	mov    DWORD PTR [esp],ecx
c00099b2:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c00099b6:	e8 04 f4 01 00       	call   c0028dbf <__extendsfdf2>
c00099bb:	83 c4 10             	add    esp,0x10
c00099be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099c2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099c6:	52                   	push   edx
c00099c7:	50                   	push   eax
c00099c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099d0:	e8 76 e3 01 00       	call   c0027d4b <__adddf3>
c00099d5:	59                   	pop    ecx
c00099d6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00099da:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c00099de:	ff b5 40 08 00 00    	push   DWORD PTR [ebp+0x840]
c00099e4:	e8 d6 f3 01 00       	call   c0028dbf <__extendsfdf2>
c00099e9:	83 c4 10             	add    esp,0x10
c00099ec:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00099f0:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c00099f4:	52                   	push   edx
c00099f5:	50                   	push   eax
c00099f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00099fe:	e8 c5 e9 01 00       	call   c00283c8 <__muldf3>
c0009a03:	83 c4 10             	add    esp,0x10
c0009a06:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009a0a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009a0e:	52                   	push   edx
c0009a0f:	50                   	push   eax
c0009a10:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a14:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009a18:	e8 2e e3 01 00       	call   c0027d4b <__adddf3>
c0009a1d:	83 c4 10             	add    esp,0x10
c0009a20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009a24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009a28:	29 5c 24 10          	sub    DWORD PTR [esp+0x10],ebx
c0009a2c:	0f 89 1d ff ff ff    	jns    c000994f <calc_output_single+0x52>
c0009a32:	89 d9                	mov    ecx,ebx
c0009a34:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009a38:	2b 4c 24 18          	sub    ecx,DWORD PTR [esp+0x18]
c0009a3c:	89 dd                	mov    ebp,ebx
c0009a3e:	29 c8                	sub    eax,ecx
c0009a40:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0009a48:	99                   	cdq    
c0009a49:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0009a51:	f7 fb                	idiv   ebx
c0009a53:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0009a57:	0f af e8             	imul   ebp,eax
c0009a5a:	8d 44 02 01          	lea    eax,[edx+eax*1+0x1]
c0009a5e:	01 cd                	add    ebp,ecx
c0009a60:	8d 34 86             	lea    esi,[esi+eax*4]
c0009a63:	89 e8                	mov    eax,ebp
c0009a65:	83 ee 04             	sub    esi,0x4
c0009a68:	e8 5c fe ff ff       	call   c00098c9 <fp_to_double>
c0009a6d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009a71:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009a75:	89 e8                	mov    eax,ebp
c0009a77:	29 dd                	sub    ebp,ebx
c0009a79:	e8 41 fe ff ff       	call   c00098bf <fp_to_int>
c0009a7e:	8b 0c 87             	mov    ecx,DWORD PTR [edi+eax*4]
c0009a81:	52                   	push   edx
c0009a82:	52                   	push   edx
c0009a83:	51                   	push   ecx
c0009a84:	89 4c 24 44          	mov    DWORD PTR [esp+0x44],ecx
c0009a88:	ff 74 87 04          	push   DWORD PTR [edi+eax*4+0x4]
c0009a8c:	e8 4f dc 01 00       	call   c00276e0 <__subsf3>
c0009a91:	89 04 24             	mov    DWORD PTR [esp],eax
c0009a94:	e8 26 f3 01 00       	call   c0028dbf <__extendsfdf2>
c0009a99:	83 c4 10             	add    esp,0x10
c0009a9c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009aa0:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009aa4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009aac:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ab4:	e8 0f e9 01 00       	call   c00283c8 <__muldf3>
c0009ab9:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0009abd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009ac1:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009ac4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009ac8:	e8 f2 f2 01 00       	call   c0028dbf <__extendsfdf2>
c0009acd:	83 c4 10             	add    esp,0x10
c0009ad0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009ad4:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009ad8:	52                   	push   edx
c0009ad9:	50                   	push   eax
c0009ada:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ade:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009ae2:	e8 64 e2 01 00       	call   c0027d4b <__adddf3>
c0009ae7:	59                   	pop    ecx
c0009ae8:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009aec:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009af0:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c0009af6:	e8 c4 f2 01 00       	call   c0028dbf <__extendsfdf2>
c0009afb:	83 c4 10             	add    esp,0x10
c0009afe:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009b02:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009b06:	52                   	push   edx
c0009b07:	50                   	push   eax
c0009b08:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b0c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009b10:	e8 b3 e8 01 00       	call   c00283c8 <__muldf3>
c0009b15:	83 c4 10             	add    esp,0x10
c0009b18:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009b1c:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009b20:	52                   	push   edx
c0009b21:	50                   	push   eax
c0009b22:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b26:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009b2a:	e8 1c e2 01 00       	call   c0027d4b <__adddf3>
c0009b2f:	83 c4 10             	add    esp,0x10
c0009b32:	85 ed                	test   ebp,ebp
c0009b34:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009b38:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009b3c:	0f 8f 21 ff ff ff    	jg     c0009a63 <calc_output_single+0x166>
c0009b42:	52                   	push   edx
c0009b43:	50                   	push   eax
c0009b44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b48:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009b4c:	e8 fa e1 01 00       	call   c0027d4b <__adddf3>
c0009b51:	83 c4 5c             	add    esp,0x5c
c0009b54:	5b                   	pop    ebx
c0009b55:	5e                   	pop    esi
c0009b56:	5f                   	pop    edi
c0009b57:	5d                   	pop    ebp
c0009b58:	c3                   	ret    

c0009b59 <calc_output_stereo>:
c0009b59:	55                   	push   ebp
c0009b5a:	89 cd                	mov    ebp,ecx
c0009b5c:	57                   	push   edi
c0009b5d:	56                   	push   esi
c0009b5e:	53                   	push   ebx
c0009b5f:	89 c3                	mov    ebx,eax
c0009b61:	83 ec 6c             	sub    esp,0x6c
c0009b64:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009b68:	8b 84 24 80 00 00 00 	mov    eax,DWORD PTR [esp+0x80]
c0009b6f:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c0009b76:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009b7a:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009b7e:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0009b81:	e8 35 fd ff ff       	call   c00098bb <int_to_fp>
c0009b86:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c0009b8e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009b92:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c0009b9a:	29 c8                	sub    eax,ecx
c0009b9c:	99                   	cdq    
c0009b9d:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009ba1:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0009ba5:	0f af d0             	imul   edx,eax
c0009ba8:	8d 34 0a             	lea    esi,[edx+ecx*1]
c0009bab:	31 d2                	xor    edx,edx
c0009bad:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0009bb1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009bb5:	8b 73 34             	mov    esi,DWORD PTR [ebx+0x34]
c0009bb8:	89 74 24 28          	mov    DWORD PTR [esp+0x28],esi
c0009bbc:	8b 73 04             	mov    esi,DWORD PTR [ebx+0x4]
c0009bbf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0009bc3:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c0009bc7:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c0009bca:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009bcf:	29 c1                	sub    ecx,eax
c0009bd1:	31 c0                	xor    eax,eax
c0009bd3:	8d 3c 8b             	lea    edi,[ebx+ecx*4]
c0009bd6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009bda:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bde:	83 c7 08             	add    edi,0x8
c0009be1:	e8 e3 fc ff ff       	call   c00098c9 <fp_to_double>
c0009be6:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009bea:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009bee:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0009bf2:	e8 c8 fc ff ff       	call   c00098bf <fp_to_int>
c0009bf7:	8b 0c 86             	mov    ecx,DWORD PTR [esi+eax*4]
c0009bfa:	52                   	push   edx
c0009bfb:	52                   	push   edx
c0009bfc:	51                   	push   ecx
c0009bfd:	89 4c 24 68          	mov    DWORD PTR [esp+0x68],ecx
c0009c01:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009c05:	e8 d6 da 01 00       	call   c00276e0 <__subsf3>
c0009c0a:	89 04 24             	mov    DWORD PTR [esp],eax
c0009c0d:	e8 ad f1 01 00       	call   c0028dbf <__extendsfdf2>
c0009c12:	83 c4 10             	add    esp,0x10
c0009c15:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c19:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c1d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c21:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c25:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c29:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c2d:	e8 96 e7 01 00       	call   c00283c8 <__muldf3>
c0009c32:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c0009c36:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009c3a:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0009c3d:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c0009c41:	e8 79 f1 01 00       	call   c0028dbf <__extendsfdf2>
c0009c46:	83 c4 10             	add    esp,0x10
c0009c49:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c4d:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c51:	52                   	push   edx
c0009c52:	50                   	push   eax
c0009c53:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c57:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0009c5b:	e8 eb e0 01 00       	call   c0027d4b <__adddf3>
c0009c60:	59                   	pop    ecx
c0009c61:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0009c65:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c0009c69:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c0009c6f:	e8 4b f1 01 00       	call   c0028dbf <__extendsfdf2>
c0009c74:	83 c4 10             	add    esp,0x10
c0009c77:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c7b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c7f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c83:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009c87:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c8b:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009c8f:	e8 34 e7 01 00       	call   c00283c8 <__muldf3>
c0009c94:	83 c4 10             	add    esp,0x10
c0009c97:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009c9b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009c9f:	52                   	push   edx
c0009ca0:	50                   	push   eax
c0009ca1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ca5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009ca9:	e8 9d e0 01 00       	call   c0027d4b <__adddf3>
c0009cae:	59                   	pop    ecx
c0009caf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0009cb3:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c0009cb7:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c0009cbd:	e8 fd f0 01 00       	call   c0028dbf <__extendsfdf2>
c0009cc2:	83 c4 10             	add    esp,0x10
c0009cc5:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c0009cc9:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c0009ccd:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cd1:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0009cd5:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cd9:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0009cdd:	e8 e6 e6 01 00       	call   c00283c8 <__muldf3>
c0009ce2:	83 c4 10             	add    esp,0x10
c0009ce5:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c0009ce9:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c0009ced:	52                   	push   edx
c0009cee:	50                   	push   eax
c0009cef:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cf3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009cf7:	e8 4f e0 01 00       	call   c0027d4b <__adddf3>
c0009cfc:	83 c4 10             	add    esp,0x10
c0009cff:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0009d03:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009d07:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009d0b:	29 4c 24 18          	sub    DWORD PTR [esp+0x18],ecx
c0009d0f:	0f 89 c5 fe ff ff    	jns    c0009bda <calc_output_stereo+0x81>
c0009d15:	29 e9                	sub    ecx,ebp
c0009d17:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0009d1b:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0009d1f:	29 c8                	sub    eax,ecx
c0009d21:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0009d29:	99                   	cdq    
c0009d2a:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009d2e:	31 d2                	xor    edx,edx
c0009d30:	0f af f8             	imul   edi,eax
c0009d33:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009d37:	40                   	inc    eax
c0009d38:	01 cf                	add    edi,ecx
c0009d3a:	0f af 44 24 30       	imul   eax,DWORD PTR [esp+0x30]
c0009d3f:	03 44 24 28          	add    eax,DWORD PTR [esp+0x28]
c0009d43:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c0009d4b:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c0009d4e:	31 c0                	xor    eax,eax
c0009d50:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009d54:	89 f8                	mov    eax,edi
c0009d56:	83 eb 08             	sub    ebx,0x8
c0009d59:	e8 6b fb ff ff       	call   c00098c9 <fp_to_double>
c0009d5e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009d62:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009d66:	89 f8                	mov    eax,edi
c0009d68:	e8 52 fb ff ff       	call   c00098bf <fp_to_int>
c0009d6d:	8b 2c 86             	mov    ebp,DWORD PTR [esi+eax*4]
c0009d70:	52                   	push   edx
c0009d71:	52                   	push   edx
c0009d72:	55                   	push   ebp
c0009d73:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c0009d77:	e8 64 d9 01 00       	call   c00276e0 <__subsf3>
c0009d7c:	89 04 24             	mov    DWORD PTR [esp],eax
c0009d7f:	e8 3b f0 01 00       	call   c0028dbf <__extendsfdf2>
c0009d84:	83 c4 10             	add    esp,0x10
c0009d87:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009d8b:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009d8f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d93:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009d97:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d9b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009d9f:	e8 24 e6 01 00       	call   c00283c8 <__muldf3>
c0009da4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0009da7:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0009dab:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c0009daf:	e8 0b f0 01 00       	call   c0028dbf <__extendsfdf2>
c0009db4:	83 c4 10             	add    esp,0x10
c0009db7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009dbb:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009dbf:	52                   	push   edx
c0009dc0:	50                   	push   eax
c0009dc1:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dc5:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0009dc9:	e8 7d df 01 00       	call   c0027d4b <__adddf3>
c0009dce:	59                   	pop    ecx
c0009dcf:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0009dd3:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c0009dd7:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c0009ddd:	e8 dd ef 01 00       	call   c0028dbf <__extendsfdf2>
c0009de2:	83 c4 10             	add    esp,0x10
c0009de5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009de9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009ded:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009df1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009df5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009df9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009dfd:	e8 c6 e5 01 00       	call   c00283c8 <__muldf3>
c0009e02:	83 c4 10             	add    esp,0x10
c0009e05:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e09:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e0d:	52                   	push   edx
c0009e0e:	50                   	push   eax
c0009e0f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e13:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0009e17:	e8 2f df 01 00       	call   c0027d4b <__adddf3>
c0009e1c:	5d                   	pop    ebp
c0009e1d:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0009e21:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0009e25:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c0009e2b:	e8 8f ef 01 00       	call   c0028dbf <__extendsfdf2>
c0009e30:	83 c4 10             	add    esp,0x10
c0009e33:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009e37:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009e3b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e3f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e43:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e47:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009e4b:	e8 78 e5 01 00       	call   c00283c8 <__muldf3>
c0009e50:	83 c4 10             	add    esp,0x10
c0009e53:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009e57:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009e5b:	52                   	push   edx
c0009e5c:	50                   	push   eax
c0009e5d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e61:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0009e65:	e8 e1 de 01 00       	call   c0027d4b <__adddf3>
c0009e6a:	83 c4 10             	add    esp,0x10
c0009e6d:	2b 7c 24 08          	sub    edi,DWORD PTR [esp+0x8]
c0009e71:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0009e75:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0009e79:	85 ff                	test   edi,edi
c0009e7b:	0f 8f d3 fe ff ff    	jg     c0009d54 <calc_output_stereo+0x1fb>
c0009e81:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e85:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e89:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e8d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0009e91:	e8 b5 de 01 00       	call   c0027d4b <__adddf3>
c0009e96:	83 c4 10             	add    esp,0x10
c0009e99:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009e9d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ea1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009ea9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ead:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009eb1:	e8 12 e5 01 00       	call   c00283c8 <__muldf3>
c0009eb6:	59                   	pop    ecx
c0009eb7:	5b                   	pop    ebx
c0009eb8:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009ebc:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009ec0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ec4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009ec8:	e8 ce ed 01 00       	call   c0028c9b <__truncdfsf2>
c0009ecd:	83 c4 10             	add    esp,0x10
c0009ed0:	8b 9c 24 88 00 00 00 	mov    ebx,DWORD PTR [esp+0x88]
c0009ed7:	89 03                	mov    DWORD PTR [ebx],eax
c0009ed9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009edd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0009ee9:	e8 5d de 01 00       	call   c0027d4b <__adddf3>
c0009eee:	83 c4 10             	add    esp,0x10
c0009ef1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0009ef5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0009ef9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009efd:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0009f01:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f09:	e8 ba e4 01 00       	call   c00283c8 <__muldf3>
c0009f0e:	5e                   	pop    esi
c0009f0f:	5f                   	pop    edi
c0009f10:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f14:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f18:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0009f20:	e8 76 ed 01 00       	call   c0028c9b <__truncdfsf2>
c0009f25:	8b 9c 24 98 00 00 00 	mov    ebx,DWORD PTR [esp+0x98]
c0009f2c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c0009f2f:	83 c4 7c             	add    esp,0x7c
c0009f32:	5b                   	pop    ebx
c0009f33:	5e                   	pop    esi
c0009f34:	5f                   	pop    edi
c0009f35:	5d                   	pop    ebp
c0009f36:	c3                   	ret    

c0009f37 <calc_output_quad>:
c0009f37:	55                   	push   ebp
c0009f38:	57                   	push   edi
c0009f39:	56                   	push   esi
c0009f3a:	89 c6                	mov    esi,eax
c0009f3c:	53                   	push   ebx
c0009f3d:	83 ec 7c             	sub    esp,0x7c
c0009f40:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c0009f44:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c0009f48:	8b 94 24 94 00 00 00 	mov    edx,DWORD PTR [esp+0x94]
c0009f4f:	8b 84 24 90 00 00 00 	mov    eax,DWORD PTR [esp+0x90]
c0009f56:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0009f5a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0009f5e:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0009f61:	e8 55 f9 ff ff       	call   c00098bb <int_to_fp>
c0009f66:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c0009f69:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c0009f6c:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c0009f70:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0009f74:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0009f78:	89 4c 24 48          	mov    DWORD PTR [esp+0x48],ecx
c0009f7c:	99                   	cdq    
c0009f7d:	89 7c 24 50          	mov    DWORD PTR [esp+0x50],edi
c0009f81:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c0009f85:	8b 6e 30             	mov    ebp,DWORD PTR [esi+0x30]
c0009f88:	31 d2                	xor    edx,edx
c0009f8a:	0f af d8             	imul   ebx,eax
c0009f8d:	c7 44 24 40 00 00 00 00 	mov    DWORD PTR [esp+0x40],0x0
c0009f95:	0f af c7             	imul   eax,edi
c0009f98:	03 5c 24 28          	add    ebx,DWORD PTR [esp+0x28]
c0009f9c:	29 c1                	sub    ecx,eax
c0009f9e:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0009fa6:	31 c0                	xor    eax,eax
c0009fa8:	8d 3c 8e             	lea    edi,[esi+ecx*4]
c0009fab:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0009faf:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0009fb3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0009fb7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c0009fbb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0009fbf:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c0009fc3:	89 d8                	mov    eax,ebx
c0009fc5:	83 c7 10             	add    edi,0x10
c0009fc8:	e8 fc f8 ff ff       	call   c00098c9 <fp_to_double>
c0009fcd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0009fd1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0009fd5:	89 d8                	mov    eax,ebx
c0009fd7:	e8 e3 f8 ff ff       	call   c00098bf <fp_to_int>
c0009fdc:	8b 4c 85 00          	mov    ecx,DWORD PTR [ebp+eax*4+0x0]
c0009fe0:	52                   	push   edx
c0009fe1:	52                   	push   edx
c0009fe2:	51                   	push   ecx
c0009fe3:	89 4c 24 78          	mov    DWORD PTR [esp+0x78],ecx
c0009fe7:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c0009feb:	e8 f0 d6 01 00       	call   c00276e0 <__subsf3>
c0009ff0:	89 04 24             	mov    DWORD PTR [esp],eax
c0009ff3:	e8 c7 ed 01 00       	call   c0028dbf <__extendsfdf2>
c0009ff8:	83 c4 10             	add    esp,0x10
c0009ffb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c0009fff:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a003:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a007:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a00b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a00f:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a013:	e8 b0 e3 01 00       	call   c00283c8 <__muldf3>
c000a018:	8b 4c 24 7c          	mov    ecx,DWORD PTR [esp+0x7c]
c000a01c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a020:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a023:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a027:	e8 93 ed 01 00       	call   c0028dbf <__extendsfdf2>
c000a02c:	83 c4 10             	add    esp,0x10
c000a02f:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a033:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a037:	52                   	push   edx
c000a038:	50                   	push   eax
c000a039:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a03d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a041:	e8 05 dd 01 00       	call   c0027d4b <__adddf3>
c000a046:	59                   	pop    ecx
c000a047:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a04b:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a04f:	ff b7 34 08 00 00    	push   DWORD PTR [edi+0x834]
c000a055:	e8 65 ed 01 00       	call   c0028dbf <__extendsfdf2>
c000a05a:	83 c4 10             	add    esp,0x10
c000a05d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a061:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a065:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a069:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a06d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a071:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a075:	e8 4e e3 01 00       	call   c00283c8 <__muldf3>
c000a07a:	83 c4 10             	add    esp,0x10
c000a07d:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a081:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a085:	52                   	push   edx
c000a086:	50                   	push   eax
c000a087:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a08b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a08f:	e8 b7 dc 01 00       	call   c0027d4b <__adddf3>
c000a094:	59                   	pop    ecx
c000a095:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a099:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a09d:	ff b7 38 08 00 00    	push   DWORD PTR [edi+0x838]
c000a0a3:	e8 17 ed 01 00       	call   c0028dbf <__extendsfdf2>
c000a0a8:	83 c4 10             	add    esp,0x10
c000a0ab:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0af:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0b3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0b7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a0bb:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0bf:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a0c3:	e8 00 e3 01 00       	call   c00283c8 <__muldf3>
c000a0c8:	83 c4 10             	add    esp,0x10
c000a0cb:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0cf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a0d3:	52                   	push   edx
c000a0d4:	50                   	push   eax
c000a0d5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0d9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a0dd:	e8 69 dc 01 00       	call   c0027d4b <__adddf3>
c000a0e2:	59                   	pop    ecx
c000a0e3:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a0e7:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a0eb:	ff b7 3c 08 00 00    	push   DWORD PTR [edi+0x83c]
c000a0f1:	e8 c9 ec 01 00       	call   c0028dbf <__extendsfdf2>
c000a0f6:	83 c4 10             	add    esp,0x10
c000a0f9:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a0fd:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a101:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a105:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a109:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a10d:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a111:	e8 b2 e2 01 00       	call   c00283c8 <__muldf3>
c000a116:	83 c4 10             	add    esp,0x10
c000a119:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a11d:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a121:	52                   	push   edx
c000a122:	50                   	push   eax
c000a123:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a127:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a12b:	e8 1b dc 01 00       	call   c0027d4b <__adddf3>
c000a130:	59                   	pop    ecx
c000a131:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a135:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a139:	ff b7 40 08 00 00    	push   DWORD PTR [edi+0x840]
c000a13f:	e8 7b ec 01 00       	call   c0028dbf <__extendsfdf2>
c000a144:	83 c4 10             	add    esp,0x10
c000a147:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a14b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a14f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a153:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a157:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a15b:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a15f:	e8 64 e2 01 00       	call   c00283c8 <__muldf3>
c000a164:	83 c4 10             	add    esp,0x10
c000a167:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a16b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a16f:	52                   	push   edx
c000a170:	50                   	push   eax
c000a171:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a175:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a179:	e8 cd db 01 00       	call   c0027d4b <__adddf3>
c000a17e:	83 c4 10             	add    esp,0x10
c000a181:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a185:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a189:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a18d:	0f 89 30 fe ff ff    	jns    c0009fc3 <calc_output_quad+0x8c>
c000a193:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a197:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000a19b:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c000a19f:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000a1a3:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c000a1ab:	29 c8                	sub    eax,ecx
c000a1ad:	99                   	cdq    
c000a1ae:	f7 7c 24 08          	idiv   DWORD PTR [esp+0x8]
c000a1b2:	31 d2                	xor    edx,edx
c000a1b4:	0f af d8             	imul   ebx,eax
c000a1b7:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a1bb:	40                   	inc    eax
c000a1bc:	01 cb                	add    ebx,ecx
c000a1be:	0f af 44 24 50       	imul   eax,DWORD PTR [esp+0x50]
c000a1c3:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000a1c7:	03 44 24 48          	add    eax,DWORD PTR [esp+0x48]
c000a1cb:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a1cf:	8d 34 86             	lea    esi,[esi+eax*4]
c000a1d2:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c000a1da:	31 c0                	xor    eax,eax
c000a1dc:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a1e0:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a1e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a1e8:	89 d8                	mov    eax,ebx
c000a1ea:	83 ee 10             	sub    esi,0x10
c000a1ed:	e8 d7 f6 ff ff       	call   c00098c9 <fp_to_double>
c000a1f2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a1f6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a1fa:	89 d8                	mov    eax,ebx
c000a1fc:	e8 be f6 ff ff       	call   c00098bf <fp_to_int>
c000a201:	8b 7c 85 00          	mov    edi,DWORD PTR [ebp+eax*4+0x0]
c000a205:	52                   	push   edx
c000a206:	52                   	push   edx
c000a207:	57                   	push   edi
c000a208:	ff 74 85 04          	push   DWORD PTR [ebp+eax*4+0x4]
c000a20c:	e8 cf d4 01 00       	call   c00276e0 <__subsf3>
c000a211:	89 04 24             	mov    DWORD PTR [esp],eax
c000a214:	e8 a6 eb 01 00       	call   c0028dbf <__extendsfdf2>
c000a219:	83 c4 10             	add    esp,0x10
c000a21c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a220:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a224:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a228:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a22c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a230:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a234:	e8 8f e1 01 00       	call   c00283c8 <__muldf3>
c000a239:	89 3c 24             	mov    DWORD PTR [esp],edi
c000a23c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a240:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a244:	e8 76 eb 01 00       	call   c0028dbf <__extendsfdf2>
c000a249:	83 c4 10             	add    esp,0x10
c000a24c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a250:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a254:	52                   	push   edx
c000a255:	50                   	push   eax
c000a256:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a25a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a25e:	e8 e8 da 01 00       	call   c0027d4b <__adddf3>
c000a263:	59                   	pop    ecx
c000a264:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a268:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a26c:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a272:	e8 48 eb 01 00       	call   c0028dbf <__extendsfdf2>
c000a277:	83 c4 10             	add    esp,0x10
c000a27a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a27e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a282:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a286:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a28a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a28e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a292:	e8 31 e1 01 00       	call   c00283c8 <__muldf3>
c000a297:	83 c4 10             	add    esp,0x10
c000a29a:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a29e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2a2:	52                   	push   edx
c000a2a3:	50                   	push   eax
c000a2a4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2a8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a2ac:	e8 9a da 01 00       	call   c0027d4b <__adddf3>
c000a2b1:	5f                   	pop    edi
c000a2b2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a2b6:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a2ba:	ff b6 58 08 00 00    	push   DWORD PTR [esi+0x858]
c000a2c0:	e8 fa ea 01 00       	call   c0028dbf <__extendsfdf2>
c000a2c5:	83 c4 10             	add    esp,0x10
c000a2c8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2cc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a2d8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2dc:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a2e0:	e8 e3 e0 01 00       	call   c00283c8 <__muldf3>
c000a2e5:	83 c4 10             	add    esp,0x10
c000a2e8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a2ec:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a2f0:	52                   	push   edx
c000a2f1:	50                   	push   eax
c000a2f2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2f6:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000a2fa:	e8 4c da 01 00       	call   c0027d4b <__adddf3>
c000a2ff:	59                   	pop    ecx
c000a300:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000a304:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000a308:	ff b6 5c 08 00 00    	push   DWORD PTR [esi+0x85c]
c000a30e:	e8 ac ea 01 00       	call   c0028dbf <__extendsfdf2>
c000a313:	83 c4 10             	add    esp,0x10
c000a316:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a31a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a31e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a322:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a326:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a32a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a32e:	e8 95 e0 01 00       	call   c00283c8 <__muldf3>
c000a333:	83 c4 10             	add    esp,0x10
c000a336:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a33a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a33e:	52                   	push   edx
c000a33f:	50                   	push   eax
c000a340:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a344:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a348:	e8 fe d9 01 00       	call   c0027d4b <__adddf3>
c000a34d:	5f                   	pop    edi
c000a34e:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c000a352:	89 54 24 60          	mov    DWORD PTR [esp+0x60],edx
c000a356:	ff b6 60 08 00 00    	push   DWORD PTR [esi+0x860]
c000a35c:	e8 5e ea 01 00       	call   c0028dbf <__extendsfdf2>
c000a361:	83 c4 10             	add    esp,0x10
c000a364:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a368:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a36c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a370:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a374:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a378:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a37c:	e8 47 e0 01 00       	call   c00283c8 <__muldf3>
c000a381:	83 c4 10             	add    esp,0x10
c000a384:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a388:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a38c:	52                   	push   edx
c000a38d:	50                   	push   eax
c000a38e:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a392:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a396:	e8 b0 d9 01 00       	call   c0027d4b <__adddf3>
c000a39b:	83 c4 10             	add    esp,0x10
c000a39e:	2b 5c 24 08          	sub    ebx,DWORD PTR [esp+0x8]
c000a3a2:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000a3a6:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000a3aa:	85 db                	test   ebx,ebx
c000a3ac:	0f 8f 36 fe ff ff    	jg     c000a1e8 <calc_output_quad+0x2b1>
c000a3b2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3b6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3ba:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3be:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a3c2:	e8 84 d9 01 00       	call   c0027d4b <__adddf3>
c000a3c7:	83 c4 10             	add    esp,0x10
c000a3ca:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a3ce:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a3d2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3d6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3e2:	e8 e1 df 01 00       	call   c00283c8 <__muldf3>
c000a3e7:	59                   	pop    ecx
c000a3e8:	5b                   	pop    ebx
c000a3e9:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a3ed:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a3f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a3f9:	e8 9d e8 01 00       	call   c0028c9b <__truncdfsf2>
c000a3fe:	83 c4 10             	add    esp,0x10
c000a401:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a408:	89 06                	mov    DWORD PTR [esi],eax
c000a40a:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a40e:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a412:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a416:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a41a:	e8 2c d9 01 00       	call   c0027d4b <__adddf3>
c000a41f:	83 c4 10             	add    esp,0x10
c000a422:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a426:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a42a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a42e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a432:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a436:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a43a:	e8 89 df 01 00       	call   c00283c8 <__muldf3>
c000a43f:	5e                   	pop    esi
c000a440:	5f                   	pop    edi
c000a441:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a445:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a449:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a44d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a451:	e8 45 e8 01 00       	call   c0028c9b <__truncdfsf2>
c000a456:	83 c4 10             	add    esp,0x10
c000a459:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a460:	89 46 04             	mov    DWORD PTR [esi+0x4],eax
c000a463:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a467:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000a46b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a46f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a473:	e8 d3 d8 01 00       	call   c0027d4b <__adddf3>
c000a478:	83 c4 10             	add    esp,0x10
c000a47b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a47f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a483:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a487:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a48f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a493:	e8 30 df 01 00       	call   c00283c8 <__muldf3>
c000a498:	5d                   	pop    ebp
c000a499:	59                   	pop    ecx
c000a49a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a49e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4a2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4a6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4aa:	e8 ec e7 01 00       	call   c0028c9b <__truncdfsf2>
c000a4af:	83 c4 10             	add    esp,0x10
c000a4b2:	8b b4 24 98 00 00 00 	mov    esi,DWORD PTR [esp+0x98]
c000a4b9:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000a4bc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4c0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4c4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4c8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a4cc:	e8 7a d8 01 00       	call   c0027d4b <__adddf3>
c000a4d1:	83 c4 10             	add    esp,0x10
c000a4d4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a4d8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a4dc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ec:	e8 d7 de 01 00       	call   c00283c8 <__muldf3>
c000a4f1:	5b                   	pop    ebx
c000a4f2:	5e                   	pop    esi
c000a4f3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a4f7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a4fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a4ff:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a503:	e8 93 e7 01 00       	call   c0028c9b <__truncdfsf2>
c000a508:	8b 8c 24 a8 00 00 00 	mov    ecx,DWORD PTR [esp+0xa8]
c000a50f:	89 41 0c             	mov    DWORD PTR [ecx+0xc],eax
c000a512:	81 c4 8c 00 00 00    	add    esp,0x8c
c000a518:	5b                   	pop    ebx
c000a519:	5e                   	pop    esi
c000a51a:	5f                   	pop    edi
c000a51b:	5d                   	pop    ebp
c000a51c:	c3                   	ret    

c000a51d <calc_output_hex>:
c000a51d:	55                   	push   ebp
c000a51e:	89 cd                	mov    ebp,ecx
c000a520:	57                   	push   edi
c000a521:	56                   	push   esi
c000a522:	53                   	push   ebx
c000a523:	89 c3                	mov    ebx,eax
c000a525:	81 ec 8c 00 00 00    	sub    esp,0x8c
c000a52b:	89 14 24             	mov    DWORD PTR [esp],edx
c000a52e:	8b 84 24 a0 00 00 00 	mov    eax,DWORD PTR [esp+0xa0]
c000a535:	8b 94 24 a4 00 00 00 	mov    edx,DWORD PTR [esp+0xa4]
c000a53c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000a540:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000a544:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000a547:	e8 6f f3 ff ff       	call   c00098bb <int_to_fp>
c000a54c:	8b 73 30             	mov    esi,DWORD PTR [ebx+0x30]
c000a54f:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000a553:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c000a556:	29 c8                	sub    eax,ecx
c000a558:	89 74 24 78          	mov    DWORD PTR [esp+0x78],esi
c000a55c:	99                   	cdq    
c000a55d:	c7 44 24 50 00 00 00 00 	mov    DWORD PTR [esp+0x50],0x0
c000a565:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a568:	c7 44 24 54 00 00 00 00 	mov    DWORD PTR [esp+0x54],0x0
c000a570:	0f af f8             	imul   edi,eax
c000a573:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000a576:	01 cf                	add    edi,ecx
c000a578:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a57c:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c000a57f:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000a583:	0f af c2             	imul   eax,edx
c000a586:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a58a:	29 c1                	sub    ecx,eax
c000a58c:	31 d2                	xor    edx,edx
c000a58e:	31 c0                	xor    eax,eax
c000a590:	8d 34 8b             	lea    esi,[ebx+ecx*4]
c000a593:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000a597:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000a59b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000a59f:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000a5a3:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000a5a7:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000a5ab:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000a5af:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000a5b3:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000a5b7:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000a5bb:	89 f8                	mov    eax,edi
c000a5bd:	e8 07 f3 ff ff       	call   c00098c9 <fp_to_double>
c000a5c2:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a5c6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a5ca:	89 f8                	mov    eax,edi
c000a5cc:	e8 ee f2 ff ff       	call   c00098bf <fp_to_int>
c000a5d1:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a5d5:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a5d8:	52                   	push   edx
c000a5d9:	52                   	push   edx
c000a5da:	51                   	push   ecx
c000a5db:	89 4c 24 74          	mov    DWORD PTR [esp+0x74],ecx
c000a5df:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a5e6:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a5ea:	e8 f1 d0 01 00       	call   c00276e0 <__subsf3>
c000a5ef:	89 04 24             	mov    DWORD PTR [esp],eax
c000a5f2:	e8 c8 e7 01 00       	call   c0028dbf <__extendsfdf2>
c000a5f7:	83 c4 10             	add    esp,0x10
c000a5fa:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a5fe:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a602:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a606:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a60a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a60e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a612:	e8 b1 dd 01 00       	call   c00283c8 <__muldf3>
c000a617:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a61b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a61f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a622:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a626:	e8 94 e7 01 00       	call   c0028dbf <__extendsfdf2>
c000a62b:	83 c4 10             	add    esp,0x10
c000a62e:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a632:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a636:	52                   	push   edx
c000a637:	50                   	push   eax
c000a638:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a63c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a640:	e8 06 d7 01 00       	call   c0027d4b <__adddf3>
c000a645:	59                   	pop    ecx
c000a646:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a64a:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a64e:	ff b6 44 08 00 00    	push   DWORD PTR [esi+0x844]
c000a654:	e8 66 e7 01 00       	call   c0028dbf <__extendsfdf2>
c000a659:	83 c4 10             	add    esp,0x10
c000a65c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a660:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a664:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a668:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a66c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a670:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a674:	e8 4f dd 01 00       	call   c00283c8 <__muldf3>
c000a679:	83 c4 10             	add    esp,0x10
c000a67c:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a680:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a684:	52                   	push   edx
c000a685:	50                   	push   eax
c000a686:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a68a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000a68e:	e8 b8 d6 01 00       	call   c0027d4b <__adddf3>
c000a693:	59                   	pop    ecx
c000a694:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000a698:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000a69c:	ff b6 48 08 00 00    	push   DWORD PTR [esi+0x848]
c000a6a2:	e8 18 e7 01 00       	call   c0028dbf <__extendsfdf2>
c000a6a7:	83 c4 10             	add    esp,0x10
c000a6aa:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ae:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6b2:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6b6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a6ba:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6be:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a6c2:	e8 01 dd 01 00       	call   c00283c8 <__muldf3>
c000a6c7:	83 c4 10             	add    esp,0x10
c000a6ca:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6ce:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a6d2:	52                   	push   edx
c000a6d3:	50                   	push   eax
c000a6d4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6d8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000a6dc:	e8 6a d6 01 00       	call   c0027d4b <__adddf3>
c000a6e1:	59                   	pop    ecx
c000a6e2:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000a6e6:	89 54 24 50          	mov    DWORD PTR [esp+0x50],edx
c000a6ea:	ff b6 4c 08 00 00    	push   DWORD PTR [esi+0x84c]
c000a6f0:	e8 ca e6 01 00       	call   c0028dbf <__extendsfdf2>
c000a6f5:	83 c4 10             	add    esp,0x10
c000a6f8:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a6fc:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a700:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a704:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a708:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a70c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a710:	e8 b3 dc 01 00       	call   c00283c8 <__muldf3>
c000a715:	83 c4 10             	add    esp,0x10
c000a718:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a71c:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a720:	52                   	push   edx
c000a721:	50                   	push   eax
c000a722:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a726:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000a72a:	e8 1c d6 01 00       	call   c0027d4b <__adddf3>
c000a72f:	59                   	pop    ecx
c000a730:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000a734:	89 54 24 48          	mov    DWORD PTR [esp+0x48],edx
c000a738:	ff b6 50 08 00 00    	push   DWORD PTR [esi+0x850]
c000a73e:	e8 7c e6 01 00       	call   c0028dbf <__extendsfdf2>
c000a743:	83 c4 10             	add    esp,0x10
c000a746:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a74a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a74e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a752:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a756:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a75a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a75e:	e8 65 dc 01 00       	call   c00283c8 <__muldf3>
c000a763:	83 c4 10             	add    esp,0x10
c000a766:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a76a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a76e:	52                   	push   edx
c000a76f:	50                   	push   eax
c000a770:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a774:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000a778:	e8 ce d5 01 00       	call   c0027d4b <__adddf3>
c000a77d:	59                   	pop    ecx
c000a77e:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000a782:	89 54 24 40          	mov    DWORD PTR [esp+0x40],edx
c000a786:	ff b6 54 08 00 00    	push   DWORD PTR [esi+0x854]
c000a78c:	e8 2e e6 01 00       	call   c0028dbf <__extendsfdf2>
c000a791:	83 c4 10             	add    esp,0x10
c000a794:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a798:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a79c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7a4:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7a8:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7ac:	e8 17 dc 01 00       	call   c00283c8 <__muldf3>
c000a7b1:	83 c4 10             	add    esp,0x10
c000a7b4:	83 c6 18             	add    esi,0x18
c000a7b7:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7bb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7bf:	52                   	push   edx
c000a7c0:	50                   	push   eax
c000a7c1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7c5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000a7c9:	e8 7d d5 01 00       	call   c0027d4b <__adddf3>
c000a7ce:	59                   	pop    ecx
c000a7cf:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000a7d3:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000a7d7:	ff b6 40 08 00 00    	push   DWORD PTR [esi+0x840]
c000a7dd:	e8 dd e5 01 00       	call   c0028dbf <__extendsfdf2>
c000a7e2:	83 c4 10             	add    esp,0x10
c000a7e5:	89 44 24 60          	mov    DWORD PTR [esp+0x60],eax
c000a7e9:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c000a7ed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a7f5:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7f9:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a7fd:	e8 c6 db 01 00       	call   c00283c8 <__muldf3>
c000a802:	83 c4 10             	add    esp,0x10
c000a805:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a809:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a80d:	52                   	push   edx
c000a80e:	50                   	push   eax
c000a80f:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a813:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000a817:	e8 2f d5 01 00       	call   c0027d4b <__adddf3>
c000a81c:	83 c4 10             	add    esp,0x10
c000a81f:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000a823:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000a827:	2b 3c 24             	sub    edi,DWORD PTR [esp]
c000a82a:	0f 89 8b fd ff ff    	jns    c000a5bb <calc_output_hex+0x9e>
c000a830:	31 f6                	xor    esi,esi
c000a832:	31 ff                	xor    edi,edi
c000a834:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c000a838:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c000a83b:	89 7c 24 4c          	mov    DWORD PTR [esp+0x4c],edi
c000a83f:	29 e9                	sub    ecx,ebp
c000a841:	89 74 24 58          	mov    DWORD PTR [esp+0x58],esi
c000a845:	29 c8                	sub    eax,ecx
c000a847:	8b 2c 24             	mov    ebp,DWORD PTR [esp]
c000a84a:	99                   	cdq    
c000a84b:	89 7c 24 5c          	mov    DWORD PTR [esp+0x5c],edi
c000a84f:	f7 3c 24             	idiv   DWORD PTR [esp]
c000a852:	89 74 24 60          	mov    DWORD PTR [esp+0x60],esi
c000a856:	0f af e8             	imul   ebp,eax
c000a859:	89 7c 24 64          	mov    DWORD PTR [esp+0x64],edi
c000a85d:	40                   	inc    eax
c000a85e:	01 cd                	add    ebp,ecx
c000a860:	0f af 44 24 48       	imul   eax,DWORD PTR [esp+0x48]
c000a865:	89 74 24 68          	mov    DWORD PTR [esp+0x68],esi
c000a869:	03 44 24 20          	add    eax,DWORD PTR [esp+0x20]
c000a86d:	89 74 24 48          	mov    DWORD PTR [esp+0x48],esi
c000a871:	8d 1c 83             	lea    ebx,[ebx+eax*4]
c000a874:	89 7c 24 6c          	mov    DWORD PTR [esp+0x6c],edi
c000a878:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c000a87c:	89 7c 24 24          	mov    DWORD PTR [esp+0x24],edi
c000a880:	89 e8                	mov    eax,ebp
c000a882:	e8 42 f0 ff ff       	call   c00098c9 <fp_to_double>
c000a887:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000a88b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000a88f:	89 e8                	mov    eax,ebp
c000a891:	e8 29 f0 ff ff       	call   c00098bf <fp_to_int>
c000a896:	8b 4c 24 78          	mov    ecx,DWORD PTR [esp+0x78]
c000a89a:	8b 0c 81             	mov    ecx,DWORD PTR [ecx+eax*4]
c000a89d:	52                   	push   edx
c000a89e:	52                   	push   edx
c000a89f:	51                   	push   ecx
c000a8a0:	89 8c 24 88 00 00 00 	mov    DWORD PTR [esp+0x88],ecx
c000a8a7:	8b 94 24 84 00 00 00 	mov    edx,DWORD PTR [esp+0x84]
c000a8ae:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000a8b2:	e8 29 ce 01 00       	call   c00276e0 <__subsf3>
c000a8b7:	89 04 24             	mov    DWORD PTR [esp],eax
c000a8ba:	e8 00 e5 01 00       	call   c0028dbf <__extendsfdf2>
c000a8bf:	83 c4 10             	add    esp,0x10
c000a8c2:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8c6:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a8ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a8d2:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8d6:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a8da:	e8 e9 da 01 00       	call   c00283c8 <__muldf3>
c000a8df:	8b 8c 24 8c 00 00 00 	mov    ecx,DWORD PTR [esp+0x8c]
c000a8e6:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000a8ea:	89 0c 24             	mov    DWORD PTR [esp],ecx
c000a8ed:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000a8f1:	e8 c9 e4 01 00       	call   c0028dbf <__extendsfdf2>
c000a8f6:	83 c4 10             	add    esp,0x10
c000a8f9:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a8fd:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a901:	52                   	push   edx
c000a902:	50                   	push   eax
c000a903:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a907:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000a90b:	e8 3b d4 01 00       	call   c0027d4b <__adddf3>
c000a910:	59                   	pop    ecx
c000a911:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000a915:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000a919:	ff b3 44 08 00 00    	push   DWORD PTR [ebx+0x844]
c000a91f:	e8 9b e4 01 00       	call   c0028dbf <__extendsfdf2>
c000a924:	83 c4 10             	add    esp,0x10
c000a927:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a92b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a92f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a933:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a937:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a93b:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a93f:	e8 84 da 01 00       	call   c00283c8 <__muldf3>
c000a944:	83 c4 10             	add    esp,0x10
c000a947:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a94b:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a94f:	52                   	push   edx
c000a950:	50                   	push   eax
c000a951:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a955:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000a959:	e8 ed d3 01 00       	call   c0027d4b <__adddf3>
c000a95e:	59                   	pop    ecx
c000a95f:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000a963:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000a967:	ff b3 48 08 00 00    	push   DWORD PTR [ebx+0x848]
c000a96d:	e8 4d e4 01 00       	call   c0028dbf <__extendsfdf2>
c000a972:	83 c4 10             	add    esp,0x10
c000a975:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a979:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a97d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a981:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a985:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a989:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a98d:	e8 36 da 01 00       	call   c00283c8 <__muldf3>
c000a992:	83 c4 10             	add    esp,0x10
c000a995:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a999:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a99d:	52                   	push   edx
c000a99e:	50                   	push   eax
c000a99f:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9a3:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c000a9a7:	e8 9f d3 01 00       	call   c0027d4b <__adddf3>
c000a9ac:	59                   	pop    ecx
c000a9ad:	89 44 24 74          	mov    DWORD PTR [esp+0x74],eax
c000a9b1:	89 54 24 78          	mov    DWORD PTR [esp+0x78],edx
c000a9b5:	ff b3 4c 08 00 00    	push   DWORD PTR [ebx+0x84c]
c000a9bb:	e8 ff e3 01 00       	call   c0028dbf <__extendsfdf2>
c000a9c0:	83 c4 10             	add    esp,0x10
c000a9c3:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9c7:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9cb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000a9d3:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9d7:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000a9db:	e8 e8 d9 01 00       	call   c00283c8 <__muldf3>
c000a9e0:	83 c4 10             	add    esp,0x10
c000a9e3:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000a9e7:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000a9eb:	52                   	push   edx
c000a9ec:	50                   	push   eax
c000a9ed:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9f1:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000a9f5:	e8 51 d3 01 00       	call   c0027d4b <__adddf3>
c000a9fa:	59                   	pop    ecx
c000a9fb:	89 44 24 6c          	mov    DWORD PTR [esp+0x6c],eax
c000a9ff:	89 54 24 70          	mov    DWORD PTR [esp+0x70],edx
c000aa03:	ff b3 50 08 00 00    	push   DWORD PTR [ebx+0x850]
c000aa09:	e8 b1 e3 01 00       	call   c0028dbf <__extendsfdf2>
c000aa0e:	83 c4 10             	add    esp,0x10
c000aa11:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa15:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa1d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa21:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa25:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa29:	e8 9a d9 01 00       	call   c00283c8 <__muldf3>
c000aa2e:	83 c4 10             	add    esp,0x10
c000aa31:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa35:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa39:	52                   	push   edx
c000aa3a:	50                   	push   eax
c000aa3b:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa3f:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aa43:	e8 03 d3 01 00       	call   c0027d4b <__adddf3>
c000aa48:	59                   	pop    ecx
c000aa49:	89 44 24 64          	mov    DWORD PTR [esp+0x64],eax
c000aa4d:	89 54 24 68          	mov    DWORD PTR [esp+0x68],edx
c000aa51:	ff b3 54 08 00 00    	push   DWORD PTR [ebx+0x854]
c000aa57:	e8 63 e3 01 00       	call   c0028dbf <__extendsfdf2>
c000aa5c:	83 c4 10             	add    esp,0x10
c000aa5f:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa63:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa67:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa6b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aa6f:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa73:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aa77:	e8 4c d9 01 00       	call   c00283c8 <__muldf3>
c000aa7c:	83 c4 10             	add    esp,0x10
c000aa7f:	83 eb 18             	sub    ebx,0x18
c000aa82:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aa86:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aa8a:	52                   	push   edx
c000aa8b:	50                   	push   eax
c000aa8c:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa90:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c000aa94:	e8 b2 d2 01 00       	call   c0027d4b <__adddf3>
c000aa99:	59                   	pop    ecx
c000aa9a:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c000aa9e:	89 54 24 58          	mov    DWORD PTR [esp+0x58],edx
c000aaa2:	ff b3 70 08 00 00    	push   DWORD PTR [ebx+0x870]
c000aaa8:	e8 12 e3 01 00       	call   c0028dbf <__extendsfdf2>
c000aaad:	83 c4 10             	add    esp,0x10
c000aab0:	89 44 24 70          	mov    DWORD PTR [esp+0x70],eax
c000aab4:	89 54 24 74          	mov    DWORD PTR [esp+0x74],edx
c000aab8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aabc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aac0:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aac4:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c000aac8:	e8 fb d8 01 00       	call   c00283c8 <__muldf3>
c000aacd:	83 c4 10             	add    esp,0x10
c000aad0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000aad4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000aad8:	52                   	push   edx
c000aad9:	50                   	push   eax
c000aada:	57                   	push   edi
c000aadb:	56                   	push   esi
c000aadc:	e8 6a d2 01 00       	call   c0027d4b <__adddf3>
c000aae1:	83 c4 10             	add    esp,0x10
c000aae4:	89 c6                	mov    esi,eax
c000aae6:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c000aae9:	89 d7                	mov    edi,edx
c000aaeb:	85 ed                	test   ebp,ebp
c000aaed:	0f 8f 8d fd ff ff    	jg     c000a880 <calc_output_hex+0x363>
c000aaf3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aaf7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aafb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000aaff:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ab03:	e8 43 d2 01 00       	call   c0027d4b <__adddf3>
c000ab08:	83 c4 10             	add    esp,0x10
c000ab0b:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab0e:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab12:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab16:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab1e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab22:	e8 a1 d8 01 00       	call   c00283c8 <__muldf3>
c000ab27:	59                   	pop    ecx
c000ab28:	5b                   	pop    ebx
c000ab29:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab2d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab31:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab35:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab39:	e8 5d e1 01 00       	call   c0028c9b <__truncdfsf2>
c000ab3e:	83 c4 10             	add    esp,0x10
c000ab41:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab48:	89 03                	mov    DWORD PTR [ebx],eax
c000ab4a:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab4e:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c000ab52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab56:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ab5a:	e8 ec d1 01 00       	call   c0027d4b <__adddf3>
c000ab5f:	83 c4 10             	add    esp,0x10
c000ab62:	89 04 24             	mov    DWORD PTR [esp],eax
c000ab65:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ab69:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab6d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab79:	e8 4a d8 01 00       	call   c00283c8 <__muldf3>
c000ab7e:	5d                   	pop    ebp
c000ab7f:	59                   	pop    ecx
c000ab80:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ab84:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ab88:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab8c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ab90:	e8 06 e1 01 00       	call   c0028c9b <__truncdfsf2>
c000ab95:	83 c4 10             	add    esp,0x10
c000ab98:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ab9f:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c000aba2:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000aba6:	ff 74 24 64          	push   DWORD PTR [esp+0x64]
c000abaa:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abae:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000abb2:	e8 94 d1 01 00       	call   c0027d4b <__adddf3>
c000abb7:	83 c4 10             	add    esp,0x10
c000abba:	89 04 24             	mov    DWORD PTR [esp],eax
c000abbd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000abc1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abcd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abd1:	e8 f2 d7 01 00       	call   c00283c8 <__muldf3>
c000abd6:	5b                   	pop    ebx
c000abd7:	5d                   	pop    ebp
c000abd8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000abdc:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000abe0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe4:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000abe8:	e8 ae e0 01 00       	call   c0028c9b <__truncdfsf2>
c000abed:	83 c4 10             	add    esp,0x10
c000abf0:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000abf7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000abfa:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000abfe:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000ac02:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac06:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ac0a:	e8 3c d1 01 00       	call   c0027d4b <__adddf3>
c000ac0f:	83 c4 10             	add    esp,0x10
c000ac12:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac15:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac19:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac1d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac21:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac25:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac29:	e8 9a d7 01 00       	call   c00283c8 <__muldf3>
c000ac2e:	59                   	pop    ecx
c000ac2f:	5b                   	pop    ebx
c000ac30:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac34:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac38:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac3c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac40:	e8 56 e0 01 00       	call   c0028c9b <__truncdfsf2>
c000ac45:	83 c4 10             	add    esp,0x10
c000ac48:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000ac4f:	89 43 0c             	mov    DWORD PTR [ebx+0xc],eax
c000ac52:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac56:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000ac5a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac5e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ac62:	e8 e4 d0 01 00       	call   c0027d4b <__adddf3>
c000ac67:	83 c4 10             	add    esp,0x10
c000ac6a:	89 04 24             	mov    DWORD PTR [esp],eax
c000ac6d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000ac71:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac75:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac79:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac7d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac81:	e8 42 d7 01 00       	call   c00283c8 <__muldf3>
c000ac86:	5d                   	pop    ebp
c000ac87:	59                   	pop    ecx
c000ac88:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ac8c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ac90:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac94:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ac98:	e8 fe df 01 00       	call   c0028c9b <__truncdfsf2>
c000ac9d:	83 c4 10             	add    esp,0x10
c000aca0:	8b 9c 24 a8 00 00 00 	mov    ebx,DWORD PTR [esp+0xa8]
c000aca7:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000acaa:	57                   	push   edi
c000acab:	56                   	push   esi
c000acac:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acb0:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c000acb4:	e8 92 d0 01 00       	call   c0027d4b <__adddf3>
c000acb9:	83 c4 10             	add    esp,0x10
c000acbc:	89 04 24             	mov    DWORD PTR [esp],eax
c000acbf:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000acc3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acc7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accb:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000accf:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acd3:	e8 f0 d6 01 00       	call   c00283c8 <__muldf3>
c000acd8:	5b                   	pop    ebx
c000acd9:	5e                   	pop    esi
c000acda:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000acde:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ace2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000ace6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000acea:	e8 ac df 01 00       	call   c0028c9b <__truncdfsf2>
c000acef:	8b bc 24 b8 00 00 00 	mov    edi,DWORD PTR [esp+0xb8]
c000acf6:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000acf9:	81 c4 9c 00 00 00    	add    esp,0x9c
c000acff:	5b                   	pop    ebx
c000ad00:	5e                   	pop    esi
c000ad01:	5f                   	pop    edi
c000ad02:	5d                   	pop    ebp
c000ad03:	c3                   	ret    

c000ad04 <sinc_reset>:
c000ad04:	56                   	push   esi
c000ad05:	53                   	push   ebx
c000ad06:	51                   	push   ecx
c000ad07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ad0b:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000ad0e:	85 db                	test   ebx,ebx
c000ad10:	74 59                	je     c000ad6b <sinc_reset+0x67>
c000ad12:	31 d2                	xor    edx,edx
c000ad14:	c7 43 38 00 00 00 00 	mov    DWORD PTR [ebx+0x38],0x0
c000ad1b:	89 53 2c             	mov    DWORD PTR [ebx+0x2c],edx
c000ad1e:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c000ad21:	c7 43 34 00 00 00 00 	mov    DWORD PTR [ebx+0x34],0x0
c000ad28:	c7 43 3c ff ff ff ff 	mov    DWORD PTR [ebx+0x3c],0xffffffff
c000ad2f:	31 c0                	xor    eax,eax
c000ad31:	8d b3 44 08 00 00    	lea    esi,[ebx+0x844]
c000ad37:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c000ad3a:	89 43 20             	mov    DWORD PTR [ebx+0x20],eax
c000ad3d:	52                   	push   edx
c000ad3e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad41:	c1 e0 02             	shl    eax,0x2
c000ad44:	50                   	push   eax
c000ad45:	6a 00                	push   0x0
c000ad47:	56                   	push   esi
c000ad48:	e8 1f 5a ff ff       	call   c000076c <memset>
c000ad4d:	83 c4 0c             	add    esp,0xc
c000ad50:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000ad53:	c1 e0 02             	shl    eax,0x2
c000ad56:	50                   	push   eax
c000ad57:	68 aa 00 00 00       	push   0xaa
c000ad5c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000ad5f:	8d 04 86             	lea    eax,[esi+eax*4]
c000ad62:	50                   	push   eax
c000ad63:	e8 04 5a ff ff       	call   c000076c <memset>
c000ad68:	83 c4 10             	add    esp,0x10
c000ad6b:	58                   	pop    eax
c000ad6c:	5b                   	pop    ebx
c000ad6d:	5e                   	pop    esi
c000ad6e:	c3                   	ret    

c000ad6f <calc_output_multi>:
c000ad6f:	55                   	push   ebp
c000ad70:	57                   	push   edi
c000ad71:	56                   	push   esi
c000ad72:	89 c6                	mov    esi,eax
c000ad74:	53                   	push   ebx
c000ad75:	83 ec 4c             	sub    esp,0x4c
c000ad78:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c000ad7c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c000ad80:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ad84:	89 4c 24 28          	mov    DWORD PTR [esp+0x28],ecx
c000ad88:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c000ad8c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000ad90:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ad94:	8d 46 44             	lea    eax,[esi+0x44]
c000ad97:	89 04 24             	mov    DWORD PTR [esp],eax
c000ad9a:	8d 86 44 04 00 00    	lea    eax,[esi+0x444]
c000ada0:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c000ada4:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c000ada7:	e8 0f eb ff ff       	call   c00098bb <int_to_fp>
c000adac:	8b 4e 34             	mov    ecx,DWORD PTR [esi+0x34]
c000adaf:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000adb3:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c000adb7:	99                   	cdq    
c000adb8:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000adbc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000adc0:	0f af d0             	imul   edx,eax
c000adc3:	0f af c3             	imul   eax,ebx
c000adc6:	03 54 24 28          	add    edx,DWORD PTR [esp+0x28]
c000adca:	29 c1                	sub    ecx,eax
c000adcc:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000add0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000add4:	8d 04 dd 00 00 00 00 	lea    eax,[ebx*8+0x0]
c000addb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000addf:	57                   	push   edi
c000ade0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ade4:	6a 00                	push   0x0
c000ade6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000adea:	e8 7d 59 ff ff       	call   c000076c <memset>
c000adef:	83 c4 10             	add    esp,0x10
c000adf2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000adf6:	89 df                	mov    edi,ebx
c000adf8:	e8 cc ea ff ff       	call   c00098c9 <fp_to_double>
c000adfd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae01:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae05:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000ae09:	e8 b1 ea ff ff       	call   c00098bf <fp_to_int>
c000ae0e:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000ae11:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000ae14:	51                   	push   ecx
c000ae15:	51                   	push   ecx
c000ae16:	55                   	push   ebp
c000ae17:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000ae1b:	e8 c0 c8 01 00       	call   c00276e0 <__subsf3>
c000ae20:	89 04 24             	mov    DWORD PTR [esp],eax
c000ae23:	e8 97 df 01 00       	call   c0028dbf <__extendsfdf2>
c000ae28:	83 c4 10             	add    esp,0x10
c000ae2b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae2f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae37:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ae3b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae3f:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000ae43:	e8 80 d5 01 00       	call   c00283c8 <__muldf3>
c000ae48:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000ae4b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ae4f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ae53:	e8 67 df 01 00       	call   c0028dbf <__extendsfdf2>
c000ae58:	83 c4 10             	add    esp,0x10
c000ae5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ae5f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000ae63:	52                   	push   edx
c000ae64:	50                   	push   eax
c000ae65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ae6d:	e8 d9 ce 01 00       	call   c0027d4b <__adddf3>
c000ae72:	83 c4 10             	add    esp,0x10
c000ae75:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ae79:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ae7d:	89 f8                	mov    eax,edi
c000ae7f:	b9 08 00 00 00       	mov    ecx,0x8
c000ae84:	99                   	cdq    
c000ae85:	f7 f9                	idiv   ecx
c000ae87:	4a                   	dec    edx
c000ae88:	83 fa 06             	cmp    edx,0x6
c000ae8b:	77 07                	ja     c000ae94 <calc_output_multi+0x125>
c000ae8d:	ff 24 95 c4 a6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd593c]
c000ae94:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000ae97:	4f                   	dec    edi
c000ae98:	83 ec 0c             	sub    esp,0xc
c000ae9b:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000ae9e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000aea2:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000aea9:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000aead:	e8 0d df 01 00       	call   c0028dbf <__extendsfdf2>
c000aeb2:	83 c4 10             	add    esp,0x10
c000aeb5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aeb9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aebd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aec1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000aec5:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aec9:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000aecd:	e8 f6 d4 01 00       	call   c00283c8 <__muldf3>
c000aed2:	83 c4 10             	add    esp,0x10
c000aed5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aed9:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000aedd:	52                   	push   edx
c000aede:	50                   	push   eax
c000aedf:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000aee2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000aee5:	e8 61 ce 01 00       	call   c0027d4b <__adddf3>
c000aeea:	83 c4 10             	add    esp,0x10
c000aeed:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000aef0:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000aef3:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000aef6:	4f                   	dec    edi
c000aef7:	83 ec 0c             	sub    esp,0xc
c000aefa:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000aefd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af01:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af08:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af0c:	e8 ae de 01 00       	call   c0028dbf <__extendsfdf2>
c000af11:	83 c4 10             	add    esp,0x10
c000af14:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af18:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af1c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af20:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af24:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af28:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af2c:	e8 97 d4 01 00       	call   c00283c8 <__muldf3>
c000af31:	83 c4 10             	add    esp,0x10
c000af34:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af38:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af3c:	52                   	push   edx
c000af3d:	50                   	push   eax
c000af3e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000af41:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000af44:	e8 02 ce 01 00       	call   c0027d4b <__adddf3>
c000af49:	83 c4 10             	add    esp,0x10
c000af4c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000af4f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000af52:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000af55:	4f                   	dec    edi
c000af56:	83 ec 0c             	sub    esp,0xc
c000af59:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000af5c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000af60:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000af67:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000af6b:	e8 4f de 01 00       	call   c0028dbf <__extendsfdf2>
c000af70:	83 c4 10             	add    esp,0x10
c000af73:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af77:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000af83:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af87:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000af8b:	e8 38 d4 01 00       	call   c00283c8 <__muldf3>
c000af90:	83 c4 10             	add    esp,0x10
c000af93:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000af97:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000af9b:	52                   	push   edx
c000af9c:	50                   	push   eax
c000af9d:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afa0:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000afa3:	e8 a3 cd 01 00       	call   c0027d4b <__adddf3>
c000afa8:	83 c4 10             	add    esp,0x10
c000afab:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000afae:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000afb1:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000afb4:	4f                   	dec    edi
c000afb5:	83 ec 0c             	sub    esp,0xc
c000afb8:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000afbb:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000afbf:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000afc6:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000afca:	e8 f0 dd 01 00       	call   c0028dbf <__extendsfdf2>
c000afcf:	83 c4 10             	add    esp,0x10
c000afd2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000afd6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000afda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000afe2:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afe6:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000afea:	e8 d9 d3 01 00       	call   c00283c8 <__muldf3>
c000afef:	83 c4 10             	add    esp,0x10
c000aff2:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000aff6:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000affa:	52                   	push   edx
c000affb:	50                   	push   eax
c000affc:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000afff:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b002:	e8 44 cd 01 00       	call   c0027d4b <__adddf3>
c000b007:	83 c4 10             	add    esp,0x10
c000b00a:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b00d:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b010:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b013:	4f                   	dec    edi
c000b014:	83 ec 0c             	sub    esp,0xc
c000b017:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b01a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b01e:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b025:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b029:	e8 91 dd 01 00       	call   c0028dbf <__extendsfdf2>
c000b02e:	83 c4 10             	add    esp,0x10
c000b031:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b035:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b039:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b03d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b041:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b045:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b049:	e8 7a d3 01 00       	call   c00283c8 <__muldf3>
c000b04e:	83 c4 10             	add    esp,0x10
c000b051:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b055:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b059:	52                   	push   edx
c000b05a:	50                   	push   eax
c000b05b:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b05e:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b061:	e8 e5 cc 01 00       	call   c0027d4b <__adddf3>
c000b066:	83 c4 10             	add    esp,0x10
c000b069:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b06c:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b06f:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b072:	4f                   	dec    edi
c000b073:	83 ec 0c             	sub    esp,0xc
c000b076:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b079:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b07d:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b084:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b088:	e8 32 dd 01 00       	call   c0028dbf <__extendsfdf2>
c000b08d:	83 c4 10             	add    esp,0x10
c000b090:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b094:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b098:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b09c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0a0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0a4:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b0a8:	e8 1b d3 01 00       	call   c00283c8 <__muldf3>
c000b0ad:	83 c4 10             	add    esp,0x10
c000b0b0:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0b4:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0b8:	52                   	push   edx
c000b0b9:	50                   	push   eax
c000b0ba:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b0bd:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b0c0:	e8 86 cc 01 00       	call   c0027d4b <__adddf3>
c000b0c5:	83 c4 10             	add    esp,0x10
c000b0c8:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b0cb:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b0ce:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b0d1:	4f                   	dec    edi
c000b0d2:	83 ec 0c             	sub    esp,0xc
c000b0d5:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b0d8:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b0dc:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b0e3:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b0e7:	e8 d3 dc 01 00       	call   c0028dbf <__extendsfdf2>
c000b0ec:	83 c4 10             	add    esp,0x10
c000b0ef:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b0f3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b0f7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0fb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b0ff:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b103:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b107:	e8 bc d2 01 00       	call   c00283c8 <__muldf3>
c000b10c:	83 c4 10             	add    esp,0x10
c000b10f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b113:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b117:	52                   	push   edx
c000b118:	50                   	push   eax
c000b119:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b11c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b11f:	e8 27 cc 01 00       	call   c0027d4b <__adddf3>
c000b124:	83 c4 10             	add    esp,0x10
c000b127:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b12a:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b12d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000b130:	4f                   	dec    edi
c000b131:	83 ec 0c             	sub    esp,0xc
c000b134:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b137:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b13b:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b142:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b146:	e8 74 dc 01 00       	call   c0028dbf <__extendsfdf2>
c000b14b:	83 c4 10             	add    esp,0x10
c000b14e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b152:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b156:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b15a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b15e:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b162:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000b166:	e8 5d d2 01 00       	call   c00283c8 <__muldf3>
c000b16b:	83 c4 10             	add    esp,0x10
c000b16e:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000b172:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000b176:	52                   	push   edx
c000b177:	50                   	push   eax
c000b178:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b17b:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b17e:	e8 c8 cb 01 00       	call   c0027d4b <__adddf3>
c000b183:	83 c4 10             	add    esp,0x10
c000b186:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b189:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b18c:	85 ff                	test   edi,edi
c000b18e:	0f 8f e9 fc ff ff    	jg     c000ae7d <calc_output_multi+0x10e>
c000b194:	01 5c 24 08          	add    DWORD PTR [esp+0x8],ebx
c000b198:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b19c:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b1a0:	0f 89 4c fc ff ff    	jns    c000adf2 <calc_output_multi+0x83>
c000b1a6:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c000b1aa:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c000b1ae:	29 c8                	sub    eax,ecx
c000b1b0:	99                   	cdq    
c000b1b1:	f7 7c 24 20          	idiv   DWORD PTR [esp+0x20]
c000b1b5:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c000b1b9:	0f af d0             	imul   edx,eax
c000b1bc:	40                   	inc    eax
c000b1bd:	01 d1                	add    ecx,edx
c000b1bf:	0f af c3             	imul   eax,ebx
c000b1c2:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000b1c6:	03 46 34             	add    eax,DWORD PTR [esi+0x34]
c000b1c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b1cd:	55                   	push   ebp
c000b1ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b1d2:	6a 00                	push   0x0
c000b1d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c000b1d8:	e8 8f 55 ff ff       	call   c000076c <memset>
c000b1dd:	83 c4 10             	add    esp,0x10
c000b1e0:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1e4:	e8 e0 e6 ff ff       	call   c00098c9 <fp_to_double>
c000b1e9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b1ed:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b1f1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c000b1f5:	e8 c5 e6 ff ff       	call   c00098bf <fp_to_int>
c000b1fa:	8b 56 30             	mov    edx,DWORD PTR [esi+0x30]
c000b1fd:	8b 2c 82             	mov    ebp,DWORD PTR [edx+eax*4]
c000b200:	57                   	push   edi
c000b201:	57                   	push   edi
c000b202:	89 df                	mov    edi,ebx
c000b204:	55                   	push   ebp
c000b205:	ff 74 82 04          	push   DWORD PTR [edx+eax*4+0x4]
c000b209:	e8 d2 c4 01 00       	call   c00276e0 <__subsf3>
c000b20e:	89 04 24             	mov    DWORD PTR [esp],eax
c000b211:	e8 a9 db 01 00       	call   c0028dbf <__extendsfdf2>
c000b216:	83 c4 10             	add    esp,0x10
c000b219:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b21d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b221:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b225:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b229:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b22d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b231:	e8 92 d1 01 00       	call   c00283c8 <__muldf3>
c000b236:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000b239:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b23d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b241:	e8 79 db 01 00       	call   c0028dbf <__extendsfdf2>
c000b246:	83 c4 10             	add    esp,0x10
c000b249:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b24d:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b251:	52                   	push   edx
c000b252:	50                   	push   eax
c000b253:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b257:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b25b:	e8 eb ca 01 00       	call   c0027d4b <__adddf3>
c000b260:	83 c4 10             	add    esp,0x10
c000b263:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b267:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b26b:	89 f8                	mov    eax,edi
c000b26d:	b9 08 00 00 00       	mov    ecx,0x8
c000b272:	99                   	cdq    
c000b273:	f7 f9                	idiv   ecx
c000b275:	4a                   	dec    edx
c000b276:	83 fa 06             	cmp    edx,0x6
c000b279:	77 07                	ja     c000b282 <calc_output_multi+0x513>
c000b27b:	ff 24 95 e0 a6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5920]
c000b282:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b286:	4f                   	dec    edi
c000b287:	83 ec 0c             	sub    esp,0xc
c000b28a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b28d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b291:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b298:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b29c:	e8 1e db 01 00       	call   c0028dbf <__extendsfdf2>
c000b2a1:	83 c4 10             	add    esp,0x10
c000b2a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2a8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2ac:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b2b4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2b8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b2bc:	e8 07 d1 01 00       	call   c00283c8 <__muldf3>
c000b2c1:	83 c4 10             	add    esp,0x10
c000b2c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b2c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b2cc:	52                   	push   edx
c000b2cd:	50                   	push   eax
c000b2ce:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b2d1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b2d4:	e8 72 ca 01 00       	call   c0027d4b <__adddf3>
c000b2d9:	83 c4 10             	add    esp,0x10
c000b2dc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b2df:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b2e2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b2e6:	4f                   	dec    edi
c000b2e7:	83 ec 0c             	sub    esp,0xc
c000b2ea:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b2ed:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b2f1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b2f8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b2fc:	e8 be da 01 00       	call   c0028dbf <__extendsfdf2>
c000b301:	83 c4 10             	add    esp,0x10
c000b304:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b308:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b30c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b310:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b314:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b318:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b31c:	e8 a7 d0 01 00       	call   c00283c8 <__muldf3>
c000b321:	83 c4 10             	add    esp,0x10
c000b324:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b328:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b32c:	52                   	push   edx
c000b32d:	50                   	push   eax
c000b32e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b331:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b334:	e8 12 ca 01 00       	call   c0027d4b <__adddf3>
c000b339:	83 c4 10             	add    esp,0x10
c000b33c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b33f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b342:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b346:	4f                   	dec    edi
c000b347:	83 ec 0c             	sub    esp,0xc
c000b34a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b34d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b351:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b358:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b35c:	e8 5e da 01 00       	call   c0028dbf <__extendsfdf2>
c000b361:	83 c4 10             	add    esp,0x10
c000b364:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b368:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b36c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b370:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b374:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b378:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b37c:	e8 47 d0 01 00       	call   c00283c8 <__muldf3>
c000b381:	83 c4 10             	add    esp,0x10
c000b384:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b388:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b38c:	52                   	push   edx
c000b38d:	50                   	push   eax
c000b38e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b391:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b394:	e8 b2 c9 01 00       	call   c0027d4b <__adddf3>
c000b399:	83 c4 10             	add    esp,0x10
c000b39c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b39f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b3a2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b3a6:	4f                   	dec    edi
c000b3a7:	83 ec 0c             	sub    esp,0xc
c000b3aa:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b3ad:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b3b1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b3b8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b3bc:	e8 fe d9 01 00       	call   c0028dbf <__extendsfdf2>
c000b3c1:	83 c4 10             	add    esp,0x10
c000b3c4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3cc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b3d4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3d8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b3dc:	e8 e7 cf 01 00       	call   c00283c8 <__muldf3>
c000b3e1:	83 c4 10             	add    esp,0x10
c000b3e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b3e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b3ec:	52                   	push   edx
c000b3ed:	50                   	push   eax
c000b3ee:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b3f1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b3f4:	e8 52 c9 01 00       	call   c0027d4b <__adddf3>
c000b3f9:	83 c4 10             	add    esp,0x10
c000b3fc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b3ff:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b402:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b406:	4f                   	dec    edi
c000b407:	83 ec 0c             	sub    esp,0xc
c000b40a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b40d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b411:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b418:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b41c:	e8 9e d9 01 00       	call   c0028dbf <__extendsfdf2>
c000b421:	83 c4 10             	add    esp,0x10
c000b424:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b428:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b42c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b430:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b434:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b438:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b43c:	e8 87 cf 01 00       	call   c00283c8 <__muldf3>
c000b441:	83 c4 10             	add    esp,0x10
c000b444:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b448:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b44c:	52                   	push   edx
c000b44d:	50                   	push   eax
c000b44e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b451:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b454:	e8 f2 c8 01 00       	call   c0027d4b <__adddf3>
c000b459:	83 c4 10             	add    esp,0x10
c000b45c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b45f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b462:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b466:	4f                   	dec    edi
c000b467:	83 ec 0c             	sub    esp,0xc
c000b46a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b46d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b471:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b478:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b47c:	e8 3e d9 01 00       	call   c0028dbf <__extendsfdf2>
c000b481:	83 c4 10             	add    esp,0x10
c000b484:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b488:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b48c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b490:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b494:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b498:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b49c:	e8 27 cf 01 00       	call   c00283c8 <__muldf3>
c000b4a1:	83 c4 10             	add    esp,0x10
c000b4a4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4a8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ac:	52                   	push   edx
c000b4ad:	50                   	push   eax
c000b4ae:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b4b1:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b4b4:	e8 92 c8 01 00       	call   c0027d4b <__adddf3>
c000b4b9:	83 c4 10             	add    esp,0x10
c000b4bc:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b4bf:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b4c2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b4c6:	4f                   	dec    edi
c000b4c7:	83 ec 0c             	sub    esp,0xc
c000b4ca:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b4cd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b4d1:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b4d8:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b4dc:	e8 de d8 01 00       	call   c0028dbf <__extendsfdf2>
c000b4e1:	83 c4 10             	add    esp,0x10
c000b4e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b4e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b4ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b4f4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4f8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b4fc:	e8 c7 ce 01 00       	call   c00283c8 <__muldf3>
c000b501:	83 c4 10             	add    esp,0x10
c000b504:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b508:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b50c:	52                   	push   edx
c000b50d:	50                   	push   eax
c000b50e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b511:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b514:	e8 32 c8 01 00       	call   c0027d4b <__adddf3>
c000b519:	83 c4 10             	add    esp,0x10
c000b51c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b51f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b522:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b526:	4f                   	dec    edi
c000b527:	83 ec 0c             	sub    esp,0xc
c000b52a:	8d 2c f8             	lea    ebp,[eax+edi*8]
c000b52d:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000b531:	8d 84 38 10 02 00 00 	lea    eax,[eax+edi*1+0x210]
c000b538:	ff 74 86 04          	push   DWORD PTR [esi+eax*4+0x4]
c000b53c:	e8 7e d8 01 00       	call   c0028dbf <__extendsfdf2>
c000b541:	83 c4 10             	add    esp,0x10
c000b544:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b548:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b54c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b550:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b554:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b558:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000b55c:	e8 67 ce 01 00       	call   c00283c8 <__muldf3>
c000b561:	83 c4 10             	add    esp,0x10
c000b564:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000b568:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000b56c:	52                   	push   edx
c000b56d:	50                   	push   eax
c000b56e:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000b571:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000b574:	e8 d2 c7 01 00       	call   c0027d4b <__adddf3>
c000b579:	83 c4 10             	add    esp,0x10
c000b57c:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000b57f:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000b582:	85 ff                	test   edi,edi
c000b584:	0f 8f e1 fc ff ff    	jg     c000b26b <calc_output_multi+0x4fc>
c000b58a:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c000b58e:	29 5c 24 08          	sub    DWORD PTR [esp+0x8],ebx
c000b592:	29 4c 24 24          	sub    DWORD PTR [esp+0x24],ecx
c000b596:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c000b59b:	0f 8f 3f fc ff ff    	jg     c000b1e0 <calc_output_multi+0x471>
c000b5a1:	be 08 00 00 00       	mov    esi,0x8
c000b5a6:	89 d8                	mov    eax,ebx
c000b5a8:	99                   	cdq    
c000b5a9:	f7 fe                	idiv   esi
c000b5ab:	4a                   	dec    edx
c000b5ac:	83 fa 06             	cmp    edx,0x6
c000b5af:	77 07                	ja     c000b5b8 <calc_output_multi+0x849>
c000b5b1:	ff 24 95 fc a6 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd5904]
c000b5b8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b5bc:	4b                   	dec    ebx
c000b5bd:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5c1:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5c4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b5c8:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b5cc:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b5cf:	e8 77 c7 01 00       	call   c0027d4b <__adddf3>
c000b5d4:	83 c4 10             	add    esp,0x10
c000b5d7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b5db:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b5df:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b5e7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5eb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b5ef:	e8 d4 cd 01 00       	call   c00283c8 <__muldf3>
c000b5f4:	5d                   	pop    ebp
c000b5f5:	59                   	pop    ecx
c000b5f6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b5fa:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b5fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b602:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b606:	e8 90 d6 01 00       	call   c0028c9b <__truncdfsf2>
c000b60b:	83 c4 10             	add    esp,0x10
c000b60e:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b612:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b615:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b619:	4b                   	dec    ebx
c000b61a:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b61e:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b621:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b625:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b629:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b62c:	e8 1a c7 01 00       	call   c0027d4b <__adddf3>
c000b631:	83 c4 10             	add    esp,0x10
c000b634:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b638:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b63c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b640:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b644:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b648:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b64c:	e8 77 cd 01 00       	call   c00283c8 <__muldf3>
c000b651:	59                   	pop    ecx
c000b652:	5f                   	pop    edi
c000b653:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b657:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b65b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b65f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b663:	e8 33 d6 01 00       	call   c0028c9b <__truncdfsf2>
c000b668:	83 c4 10             	add    esp,0x10
c000b66b:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b66f:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b672:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b676:	4b                   	dec    ebx
c000b677:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b67b:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b67e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b682:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b686:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b689:	e8 bd c6 01 00       	call   c0027d4b <__adddf3>
c000b68e:	83 c4 10             	add    esp,0x10
c000b691:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b695:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b699:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b69d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6a1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6a9:	e8 1a cd 01 00       	call   c00283c8 <__muldf3>
c000b6ae:	5f                   	pop    edi
c000b6af:	5d                   	pop    ebp
c000b6b0:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b6b4:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b6b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b6c0:	e8 d6 d5 01 00       	call   c0028c9b <__truncdfsf2>
c000b6c5:	83 c4 10             	add    esp,0x10
c000b6c8:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b6cc:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b6cf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b6d3:	4b                   	dec    ebx
c000b6d4:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6d8:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6db:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b6df:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b6e3:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b6e6:	e8 60 c6 01 00       	call   c0027d4b <__adddf3>
c000b6eb:	83 c4 10             	add    esp,0x10
c000b6ee:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b6f2:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b6f6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b6fe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b702:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b706:	e8 bd cc 01 00       	call   c00283c8 <__muldf3>
c000b70b:	5d                   	pop    ebp
c000b70c:	59                   	pop    ecx
c000b70d:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b711:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b715:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b719:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b71d:	e8 79 d5 01 00       	call   c0028c9b <__truncdfsf2>
c000b722:	83 c4 10             	add    esp,0x10
c000b725:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b729:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b72c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b730:	4b                   	dec    ebx
c000b731:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b735:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b738:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b73c:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b740:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b743:	e8 03 c6 01 00       	call   c0027d4b <__adddf3>
c000b748:	83 c4 10             	add    esp,0x10
c000b74b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b74f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b753:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b757:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b763:	e8 60 cc 01 00       	call   c00283c8 <__muldf3>
c000b768:	59                   	pop    ecx
c000b769:	5f                   	pop    edi
c000b76a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b76e:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b772:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b776:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b77a:	e8 1c d5 01 00       	call   c0028c9b <__truncdfsf2>
c000b77f:	83 c4 10             	add    esp,0x10
c000b782:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b786:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b789:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b78d:	4b                   	dec    ebx
c000b78e:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b792:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b795:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b799:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b79d:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7a0:	e8 a6 c5 01 00       	call   c0027d4b <__adddf3>
c000b7a5:	83 c4 10             	add    esp,0x10
c000b7a8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b7ac:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b7b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b7b8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7c0:	e8 03 cc 01 00       	call   c00283c8 <__muldf3>
c000b7c5:	5f                   	pop    edi
c000b7c6:	5d                   	pop    ebp
c000b7c7:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b7cb:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b7cf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7d3:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b7d7:	e8 bf d4 01 00       	call   c0028c9b <__truncdfsf2>
c000b7dc:	83 c4 10             	add    esp,0x10
c000b7df:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b7e3:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b7e6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b7ea:	4b                   	dec    ebx
c000b7eb:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7ef:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7f2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b7f6:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b7fa:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b7fd:	e8 49 c5 01 00       	call   c0027d4b <__adddf3>
c000b802:	83 c4 10             	add    esp,0x10
c000b805:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b809:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b80d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b811:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b815:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b819:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b81d:	e8 a6 cb 01 00       	call   c00283c8 <__muldf3>
c000b822:	5d                   	pop    ebp
c000b823:	59                   	pop    ecx
c000b824:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b828:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b82c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b830:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b834:	e8 62 d4 01 00       	call   c0028c9b <__truncdfsf2>
c000b839:	83 c4 10             	add    esp,0x10
c000b83c:	8b 4c 24 6c          	mov    ecx,DWORD PTR [esp+0x6c]
c000b840:	89 04 99             	mov    DWORD PTR [ecx+ebx*4],eax
c000b843:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000b847:	4b                   	dec    ebx
c000b848:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b84c:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b84f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000b853:	ff 74 d8 04          	push   DWORD PTR [eax+ebx*8+0x4]
c000b857:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c000b85a:	e8 ec c4 01 00       	call   c0027d4b <__adddf3>
c000b85f:	83 c4 10             	add    esp,0x10
c000b862:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000b866:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000b86a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b86e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b872:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b876:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b87a:	e8 49 cb 01 00       	call   c00283c8 <__muldf3>
c000b87f:	59                   	pop    ecx
c000b880:	5f                   	pop    edi
c000b881:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000b885:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000b889:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b88d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000b891:	e8 05 d4 01 00       	call   c0028c9b <__truncdfsf2>
c000b896:	83 c4 10             	add    esp,0x10
c000b899:	85 db                	test   ebx,ebx
c000b89b:	8b 54 24 6c          	mov    edx,DWORD PTR [esp+0x6c]
c000b89f:	89 04 9a             	mov    DWORD PTR [edx+ebx*4],eax
c000b8a2:	0f 8f fe fc ff ff    	jg     c000b5a6 <calc_output_multi+0x837>
c000b8a8:	83 c4 4c             	add    esp,0x4c
c000b8ab:	5b                   	pop    ebx
c000b8ac:	5e                   	pop    esi
c000b8ad:	5f                   	pop    edi
c000b8ae:	5d                   	pop    ebp
c000b8af:	c3                   	ret    

c000b8b0 <double_to_fp>:
c000b8b0:	83 ec 0c             	sub    esp,0xc
c000b8b3:	68 00 00 b0 40       	push   0x40b00000
c000b8b8:	6a 00                	push   0x0
c000b8ba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000b8c2:	e8 01 cb 01 00       	call   c00283c8 <__muldf3>
c000b8c7:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000b8cb:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000b8cf:	83 c4 1c             	add    esp,0x1c
c000b8d2:	e9 79 d5 01 00       	jmp    c0028e50 <lrint>

c000b8d7 <prepare_data>:
c000b8d7:	55                   	push   ebp
c000b8d8:	57                   	push   edi
c000b8d9:	56                   	push   esi
c000b8da:	53                   	push   ebx
c000b8db:	83 ec 1c             	sub    esp,0x1c
c000b8de:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000b8e2:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000b8e6:	83 7b 3c 00          	cmp    DWORD PTR [ebx+0x3c],0x0
c000b8ea:	0f 89 57 01 00 00    	jns    c000ba47 <prepare_data+0x170>
c000b8f0:	8b 53 34             	mov    edx,DWORD PTR [ebx+0x34]
c000b8f3:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b8f6:	85 d2                	test   edx,edx
c000b8f8:	75 0d                	jne    c000b907 <prepare_data+0x30>
c000b8fa:	8d 14 36             	lea    edx,[esi+esi*1]
c000b8fd:	89 73 38             	mov    DWORD PTR [ebx+0x38],esi
c000b900:	29 d0                	sub    eax,edx
c000b902:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b905:	eb 44                	jmp    c000b94b <prepare_data+0x74>
c000b907:	8b 7b 38             	mov    edi,DWORD PTR [ebx+0x38]
c000b90a:	8d 0c 37             	lea    ecx,[edi+esi*1]
c000b90d:	03 4b 04             	add    ecx,DWORD PTR [ebx+0x4]
c000b910:	39 c1                	cmp    ecx,eax
c000b912:	7d 04                	jge    c000b918 <prepare_data+0x41>
c000b914:	29 d0                	sub    eax,edx
c000b916:	eb 2d                	jmp    c000b945 <prepare_data+0x6e>
c000b918:	8d 83 44 08 00 00    	lea    eax,[ebx+0x844]
c000b91e:	29 d7                	sub    edi,edx
c000b920:	01 f7                	add    edi,esi
c000b922:	51                   	push   ecx
c000b923:	29 f2                	sub    edx,esi
c000b925:	8d 0c bd 00 00 00 00 	lea    ecx,[edi*4+0x0]
c000b92c:	8d 14 90             	lea    edx,[eax+edx*4]
c000b92f:	51                   	push   ecx
c000b930:	52                   	push   edx
c000b931:	50                   	push   eax
c000b932:	e8 6d 4d ff ff       	call   c00006a4 <memmove>
c000b937:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c000b93a:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000b93d:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000b940:	29 f0                	sub    eax,esi
c000b942:	83 c4 10             	add    esp,0x10
c000b945:	29 f0                	sub    eax,esi
c000b947:	79 02                	jns    c000b94b <prepare_data+0x74>
c000b949:	31 c0                	xor    eax,eax
c000b94b:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000b94e:	8b 7b 08             	mov    edi,DWORD PTR [ebx+0x8]
c000b951:	29 ef                	sub    edi,ebp
c000b953:	39 c7                	cmp    edi,eax
c000b955:	7e 02                	jle    c000b959 <prepare_data+0x82>
c000b957:	89 c7                	mov    edi,eax
c000b959:	89 f8                	mov    eax,edi
c000b95b:	99                   	cdq    
c000b95c:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000b95f:	b8 15 00 00 00       	mov    eax,0x15
c000b964:	29 d7                	sub    edi,edx
c000b966:	0f 88 dd 00 00 00    	js     c000ba49 <prepare_data+0x172>
c000b96c:	8b 4b 38             	mov    ecx,DWORD PTR [ebx+0x38]
c000b96f:	8d 14 39             	lea    edx,[ecx+edi*1]
c000b972:	3b 53 40             	cmp    edx,DWORD PTR [ebx+0x40]
c000b975:	0f 8f ce 00 00 00    	jg     c000ba49 <prepare_data+0x172>
c000b97b:	8d 93 44 08 00 00    	lea    edx,[ebx+0x844]
c000b981:	50                   	push   eax
c000b982:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b989:	50                   	push   eax
c000b98a:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000b98e:	8b 00                	mov    eax,DWORD PTR [eax]
c000b990:	8d 04 a8             	lea    eax,[eax+ebp*4]
c000b993:	50                   	push   eax
c000b994:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b997:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000b99b:	50                   	push   eax
c000b99c:	e8 c1 4c ff ff       	call   c0000662 <memcpy>
c000b9a1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c000b9a4:	8b 4b 0c             	mov    ecx,DWORD PTR [ebx+0xc]
c000b9a7:	01 fd                	add    ebp,edi
c000b9a9:	01 f9                	add    ecx,edi
c000b9ab:	83 c4 10             	add    esp,0x10
c000b9ae:	89 6b 38             	mov    DWORD PTR [ebx+0x38],ebp
c000b9b1:	89 4b 0c             	mov    DWORD PTR [ebx+0xc],ecx
c000b9b4:	3b 4b 08             	cmp    ecx,DWORD PTR [ebx+0x8]
c000b9b7:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000b9bb:	0f 85 86 00 00 00    	jne    c000ba47 <prepare_data+0x170>
c000b9c1:	8b 4b 34             	mov    ecx,DWORD PTR [ebx+0x34]
c000b9c4:	89 e8                	mov    eax,ebp
c000b9c6:	8d 3c 36             	lea    edi,[esi+esi*1]
c000b9c9:	29 c8                	sub    eax,ecx
c000b9cb:	39 f8                	cmp    eax,edi
c000b9cd:	7d 78                	jge    c000ba47 <prepare_data+0x170>
c000b9cf:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c000b9d3:	83 7f 18 00          	cmp    DWORD PTR [edi+0x18],0x0
c000b9d7:	74 6e                	je     c000ba47 <prepare_data+0x170>
c000b9d9:	8d 7e 04             	lea    edi,[esi+0x4]
c000b9dc:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c000b9e0:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c000b9e3:	29 ef                	sub    edi,ebp
c000b9e5:	39 7c 24 0c          	cmp    DWORD PTR [esp+0xc],edi
c000b9e9:	7c 29                	jl     c000ba14 <prepare_data+0x13d>
c000b9eb:	8d 3c 30             	lea    edi,[eax+esi*1]
c000b9ee:	29 f1                	sub    ecx,esi
c000b9f0:	8d 04 bd 00 00 00 00 	lea    eax,[edi*4+0x0]
c000b9f7:	55                   	push   ebp
c000b9f8:	50                   	push   eax
c000b9f9:	8d 04 8a             	lea    eax,[edx+ecx*4]
c000b9fc:	50                   	push   eax
c000b9fd:	52                   	push   edx
c000b9fe:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000ba02:	e8 9d 4c ff ff       	call   c00006a4 <memmove>
c000ba07:	83 c4 10             	add    esp,0x10
c000ba0a:	89 73 34             	mov    DWORD PTR [ebx+0x34],esi
c000ba0d:	89 7b 38             	mov    DWORD PTR [ebx+0x38],edi
c000ba10:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000ba14:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000ba17:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ba1a:	89 43 3c             	mov    DWORD PTR [ebx+0x3c],eax
c000ba1d:	83 c6 05             	add    esi,0x5
c000ba20:	78 07                	js     c000ba29 <prepare_data+0x152>
c000ba22:	8d 3c 30             	lea    edi,[eax+esi*1]
c000ba25:	39 cf                	cmp    edi,ecx
c000ba27:	7e 04                	jle    c000ba2d <prepare_data+0x156>
c000ba29:	89 ce                	mov    esi,ecx
c000ba2b:	29 c6                	sub    esi,eax
c000ba2d:	8d 04 82             	lea    eax,[edx+eax*4]
c000ba30:	51                   	push   ecx
c000ba31:	8d 0c b5 00 00 00 00 	lea    ecx,[esi*4+0x0]
c000ba38:	51                   	push   ecx
c000ba39:	6a 00                	push   0x0
c000ba3b:	50                   	push   eax
c000ba3c:	e8 2b 4d ff ff       	call   c000076c <memset>
c000ba41:	01 73 38             	add    DWORD PTR [ebx+0x38],esi
c000ba44:	83 c4 10             	add    esp,0x10
c000ba47:	31 c0                	xor    eax,eax
c000ba49:	83 c4 1c             	add    esp,0x1c
c000ba4c:	5b                   	pop    ebx
c000ba4d:	5e                   	pop    esi
c000ba4e:	5f                   	pop    edi
c000ba4f:	5d                   	pop    ebp
c000ba50:	c3                   	ret    

c000ba51 <sinc_multichan_vari_process>:
c000ba51:	55                   	push   ebp
c000ba52:	ba 05 00 00 00       	mov    edx,0x5
c000ba57:	57                   	push   edi
c000ba58:	56                   	push   esi
c000ba59:	53                   	push   ebx
c000ba5a:	83 ec 4c             	sub    esp,0x4c
c000ba5d:	8b 74 24 60          	mov    esi,DWORD PTR [esp+0x60]
c000ba61:	8b 7c 24 64          	mov    edi,DWORD PTR [esp+0x64]
c000ba65:	8b 5e 1c             	mov    ebx,DWORD PTR [esi+0x1c]
c000ba68:	85 db                	test   ebx,ebx
c000ba6a:	0f 84 9b 06 00 00    	je     c000c10b <sinc_multichan_vari_process+0x6ba>
c000ba70:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ba73:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000ba76:	0f af c5             	imul   eax,ebp
c000ba79:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ba7c:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c000ba7f:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ba86:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000ba8d:	0f af c5             	imul   eax,ebp
c000ba90:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000ba93:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000ba96:	8b 06                	mov    eax,DWORD PTR [esi]
c000ba98:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ba9c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000baa0:	68 00 00 70 3f       	push   0x3f700000
c000baa5:	6a 00                	push   0x0
c000baa7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000baaf:	e8 e3 d1 01 00       	call   c0028c97 <__ltdf2>
c000bab4:	83 c4 10             	add    esp,0x10
c000bab7:	ba 16 00 00 00       	mov    edx,0x16
c000babc:	85 c0                	test   eax,eax
c000babe:	0f 88 47 06 00 00    	js     c000c10b <sinc_multichan_vari_process+0x6ba>
c000bac4:	68 00 00 70 40       	push   0x40700000
c000bac9:	6a 00                	push   0x0
c000bacb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bacf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bad3:	e8 a1 d1 01 00       	call   c0028c79 <__gtdf2>
c000bad8:	83 c4 10             	add    esp,0x10
c000badb:	ba 16 00 00 00       	mov    edx,0x16
c000bae0:	85 c0                	test   eax,eax
c000bae2:	0f 8f 23 06 00 00    	jg     c000c10b <sinc_multichan_vari_process+0x6ba>
c000bae8:	83 ec 0c             	sub    esp,0xc
c000baeb:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000baee:	e8 38 cf 01 00       	call   c0028a2b <__floatsidf>
c000baf3:	83 c4 10             	add    esp,0x10
c000baf6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bafa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bafe:	68 00 00 00 40       	push   0x40000000
c000bb03:	6a 00                	push   0x0
c000bb05:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb09:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb0d:	e8 39 c2 01 00       	call   c0027d4b <__adddf3>
c000bb12:	59                   	pop    ecx
c000bb13:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000bb17:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000bb1b:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bb1e:	e8 08 cf 01 00       	call   c0028a2b <__floatsidf>
c000bb23:	83 c4 10             	add    esp,0x10
c000bb26:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb2a:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb2e:	52                   	push   edx
c000bb2f:	50                   	push   eax
c000bb30:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb34:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb38:	e8 6f cb 01 00       	call   c00286ac <__divdf3>
c000bb3d:	83 c4 10             	add    esp,0x10
c000bb40:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bb44:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bb48:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c000bb4b:	8b 57 20             	mov    edx,DWORD PTR [edi+0x20]
c000bb4e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb52:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb56:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb5e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb62:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bb66:	e8 0e d1 01 00       	call   c0028c79 <__gtdf2>
c000bb6b:	83 c4 10             	add    esp,0x10
c000bb6e:	85 c0                	test   eax,eax
c000bb70:	7e 2d                	jle    c000bb9f <sinc_multichan_vari_process+0x14e>
c000bb72:	68 00 00 f0 3f       	push   0x3ff00000
c000bb77:	6a 00                	push   0x0
c000bb79:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb7d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bb81:	e8 11 d1 01 00       	call   c0028c97 <__ltdf2>
c000bb86:	83 c4 10             	add    esp,0x10
c000bb89:	85 c0                	test   eax,eax
c000bb8b:	79 4d                	jns    c000bbda <sinc_multichan_vari_process+0x189>
c000bb8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bb91:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bb95:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bb99:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bb9d:	eb 1b                	jmp    c000bbba <sinc_multichan_vari_process+0x169>
c000bb9f:	68 00 00 f0 3f       	push   0x3ff00000
c000bba4:	6a 00                	push   0x0
c000bba6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbaa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bbae:	e8 e4 d0 01 00       	call   c0028c97 <__ltdf2>
c000bbb3:	83 c4 10             	add    esp,0x10
c000bbb6:	85 c0                	test   eax,eax
c000bbb8:	79 20                	jns    c000bbda <sinc_multichan_vari_process+0x189>
c000bbba:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbbe:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bbc2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbc6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbca:	e8 dd ca 01 00       	call   c00286ac <__divdf3>
c000bbcf:	83 c4 10             	add    esp,0x10
c000bbd2:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bbd6:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bbda:	50                   	push   eax
c000bbdb:	50                   	push   eax
c000bbdc:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bbe4:	e8 67 d2 01 00       	call   c0028e50 <lrint>
c000bbe9:	8b 56 0c             	mov    edx,DWORD PTR [esi+0xc]
c000bbec:	40                   	inc    eax
c000bbed:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bbf1:	0f af c5             	imul   eax,ebp
c000bbf4:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bbf8:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000bbfb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bbff:	58                   	pop    eax
c000bc00:	5a                   	pop    edx
c000bc01:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc05:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bc09:	e8 42 d2 01 00       	call   c0028e50 <lrint>
c000bc0e:	83 ec 0c             	sub    esp,0xc
c000bc11:	50                   	push   eax
c000bc12:	e8 14 ce 01 00       	call   c0028a2b <__floatsidf>
c000bc17:	83 c4 10             	add    esp,0x10
c000bc1a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000bc1e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000bc22:	52                   	push   edx
c000bc23:	50                   	push   eax
c000bc24:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc28:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc2c:	e8 6b c7 01 00       	call   c002839c <__subdf3>
c000bc31:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bc35:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bc39:	83 c4 20             	add    esp,0x20
c000bc3c:	6a 00                	push   0x0
c000bc3e:	6a 00                	push   0x0
c000bc40:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc44:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc48:	e8 4a d0 01 00       	call   c0028c97 <__ltdf2>
c000bc4d:	83 c4 10             	add    esp,0x10
c000bc50:	85 c0                	test   eax,eax
c000bc52:	79 1f                	jns    c000bc73 <sinc_multichan_vari_process+0x222>
c000bc54:	68 00 00 f0 3f       	push   0x3ff00000
c000bc59:	6a 00                	push   0x0
c000bc5b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc5f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bc63:	e8 e3 c0 01 00       	call   c0027d4b <__adddf3>
c000bc68:	83 c4 10             	add    esp,0x10
c000bc6b:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000bc6f:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000bc73:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000bc76:	83 ec 10             	sub    esp,0x10
c000bc79:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bc7d:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000bc80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc84:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bc88:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc8c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bc90:	e8 07 c7 01 00       	call   c002839c <__subdf3>
c000bc95:	83 c4 18             	add    esp,0x18
c000bc98:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bc9c:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bca0:	52                   	push   edx
c000bca1:	50                   	push   eax
c000bca2:	e8 a9 d1 01 00       	call   c0028e50 <lrint>
c000bca7:	0f af e8             	imul   ebp,eax
c000bcaa:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000bcae:	01 e8                	add    eax,ebp
c000bcb0:	99                   	cdq    
c000bcb1:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000bcb4:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000bcb7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcbb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bcbf:	68 00 00 f0 3f       	push   0x3ff00000
c000bcc4:	6a 00                	push   0x0
c000bcc6:	e8 e1 c9 01 00       	call   c00286ac <__divdf3>
c000bccb:	83 c4 10             	add    esp,0x10
c000bcce:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bcd2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bcd6:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000bcdb:	68 23 42 92 0c       	push   0xc924223
c000bce0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bce4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bce8:	e8 5e c0 01 00       	call   c0027d4b <__adddf3>
c000bced:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000bcf1:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000bcf5:	83 c4 20             	add    esp,0x20
c000bcf8:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000bd00:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000bd08:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000bd0b:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000bd0e:	7d 50                	jge    c000bd60 <sinc_multichan_vari_process+0x30f>
c000bd10:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd13:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd16:	01 c8                	add    eax,ecx
c000bd18:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd1b:	99                   	cdq    
c000bd1c:	f7 f9                	idiv   ecx
c000bd1e:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd22:	7d 0c                	jge    c000bd30 <sinc_multichan_vari_process+0x2df>
c000bd24:	8b 6b 3c             	mov    ebp,DWORD PTR [ebx+0x3c]
c000bd27:	85 ed                	test   ebp,ebp
c000bd29:	79 6b                	jns    c000bd96 <sinc_multichan_vari_process+0x345>
c000bd2b:	e9 e6 00 00 00       	jmp    c000be16 <sinc_multichan_vari_process+0x3c5>
c000bd30:	50                   	push   eax
c000bd31:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000bd35:	57                   	push   edi
c000bd36:	53                   	push   ebx
c000bd37:	e8 9b fb ff ff       	call   c000b8d7 <prepare_data>
c000bd3c:	83 c4 10             	add    esp,0x10
c000bd3f:	89 c2                	mov    edx,eax
c000bd41:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000bd44:	85 c0                	test   eax,eax
c000bd46:	0f 85 bf 03 00 00    	jne    c000c10b <sinc_multichan_vari_process+0x6ba>
c000bd4c:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000bd4f:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000bd52:	01 c8                	add    eax,ecx
c000bd54:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000bd57:	99                   	cdq    
c000bd58:	f7 f9                	idiv   ecx
c000bd5a:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000bd5e:	7c c4                	jl     c000bd24 <sinc_multichan_vari_process+0x2d3>
c000bd60:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000bd64:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000bd68:	89 46 08             	mov    DWORD PTR [esi+0x8],eax
c000bd6b:	89 56 0c             	mov    DWORD PTR [esi+0xc],edx
c000bd6e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000bd72:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000bd76:	89 06                	mov    DWORD PTR [esi],eax
c000bd78:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c000bd7b:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000bd7e:	99                   	cdq    
c000bd7f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd82:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c000bd85:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000bd88:	99                   	cdq    
c000bd89:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000bd8c:	31 d2                	xor    edx,edx
c000bd8e:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c000bd91:	e9 75 03 00 00       	jmp    c000c10b <sinc_multichan_vari_process+0x6ba>
c000bd96:	83 ec 0c             	sub    esp,0xc
c000bd99:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000bd9c:	e8 8a cc 01 00       	call   c0028a2b <__floatsidf>
c000bda1:	83 c4 10             	add    esp,0x10
c000bda4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bda8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdac:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdb0:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000bdb4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdb8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdbc:	e8 8a bf 01 00       	call   c0027d4b <__adddf3>
c000bdc1:	83 c4 10             	add    esp,0x10
c000bdc4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bdc8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bdcc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bdd4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bdd8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bddc:	e8 6a bf 01 00       	call   c0027d4b <__adddf3>
c000bde1:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000bde4:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bde8:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bdec:	e8 3a cc 01 00       	call   c0028a2b <__floatsidf>
c000bdf1:	83 c4 10             	add    esp,0x10
c000bdf4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bdf8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bdfc:	52                   	push   edx
c000bdfd:	50                   	push   eax
c000bdfe:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be02:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be06:	e8 8a ce 01 00       	call   c0028c95 <__gedf2>
c000be0b:	83 c4 10             	add    esp,0x10
c000be0e:	85 c0                	test   eax,eax
c000be10:	0f 89 4a ff ff ff    	jns    c000bd60 <sinc_multichan_vari_process+0x30f>
c000be16:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000be1a:	0f 8e ed 00 00 00    	jle    c000bf0d <sinc_multichan_vari_process+0x4bc>
c000be20:	83 ec 10             	sub    esp,0x10
c000be23:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be26:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be29:	ff 76 04             	push   DWORD PTR [esi+0x4]
c000be2c:	ff 36                	push   DWORD PTR [esi]
c000be2e:	e8 69 c5 01 00       	call   c002839c <__subdf3>
c000be33:	83 c4 18             	add    esp,0x18
c000be36:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000be3a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000be3e:	52                   	push   edx
c000be3f:	50                   	push   eax
c000be40:	e8 eb cf 01 00       	call   c0028e30 <fabs>
c000be45:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000be49:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000be4d:	83 c4 10             	add    esp,0x10
c000be50:	68 df 7c db 3d       	push   0x3ddb7cdf
c000be55:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000be5a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be5e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000be62:	e8 12 ce 01 00       	call   c0028c79 <__gtdf2>
c000be67:	83 c4 10             	add    esp,0x10
c000be6a:	85 c0                	test   eax,eax
c000be6c:	0f 8e 9b 00 00 00    	jle    c000bf0d <sinc_multichan_vari_process+0x4bc>
c000be72:	8b 06                	mov    eax,DWORD PTR [esi]
c000be74:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000be77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000be7b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000be7f:	52                   	push   edx
c000be80:	50                   	push   eax
c000be81:	ff 77 20             	push   DWORD PTR [edi+0x20]
c000be84:	ff 77 1c             	push   DWORD PTR [edi+0x1c]
c000be87:	e8 10 c5 01 00       	call   c002839c <__subdf3>
c000be8c:	59                   	pop    ecx
c000be8d:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000be91:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000be95:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000be98:	e8 8e cb 01 00       	call   c0028a2b <__floatsidf>
c000be9d:	83 c4 10             	add    esp,0x10
c000bea0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bea4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bea8:	52                   	push   edx
c000bea9:	50                   	push   eax
c000beaa:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000beae:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000beb2:	e8 11 c5 01 00       	call   c00283c8 <__muldf3>
c000beb7:	5d                   	pop    ebp
c000beb8:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000bebc:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000bec0:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000bec3:	e8 63 cb 01 00       	call   c0028a2b <__floatsidf>
c000bec8:	83 c4 10             	add    esp,0x10
c000becb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000becf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bed3:	52                   	push   edx
c000bed4:	50                   	push   eax
c000bed5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bed9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bedd:	e8 ca c7 01 00       	call   c00286ac <__divdf3>
c000bee2:	83 c4 10             	add    esp,0x10
c000bee5:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bee9:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000beed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bef1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000bef5:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bef9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000befd:	e8 49 be 01 00       	call   c0027d4b <__adddf3>
c000bf02:	83 c4 10             	add    esp,0x10
c000bf05:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000bf09:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000bf0d:	83 ec 0c             	sub    esp,0xc
c000bf10:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bf13:	e8 13 cb 01 00       	call   c0028a2b <__floatsidf>
c000bf18:	83 c4 10             	add    esp,0x10
c000bf1b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf1f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf23:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf27:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf2b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000bf33:	e8 5f cd 01 00       	call   c0028c97 <__ltdf2>
c000bf38:	83 c4 10             	add    esp,0x10
c000bf3b:	85 c0                	test   eax,eax
c000bf3d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000bf41:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000bf45:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000bf49:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000bf4d:	78 10                	js     c000bf5f <sinc_multichan_vari_process+0x50e>
c000bf4f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000bf53:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000bf57:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000bf5b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000bf5f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf63:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf67:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf6b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf6f:	e8 54 c4 01 00       	call   c00283c8 <__muldf3>
c000bf74:	59                   	pop    ecx
c000bf75:	5d                   	pop    ebp
c000bf76:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000bf7a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000bf7e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000bf86:	e8 25 f9 ff ff       	call   c000b8b0 <double_to_fp>
c000bf8b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf8f:	89 c5                	mov    ebp,eax
c000bf91:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000bf95:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf99:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000bf9d:	e8 26 c4 01 00       	call   c00283c8 <__muldf3>
c000bfa2:	83 c4 18             	add    esp,0x18
c000bfa5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000bfa9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000bfad:	52                   	push   edx
c000bfae:	50                   	push   eax
c000bfaf:	e8 fc f8 ff ff       	call   c000b8b0 <double_to_fp>
c000bfb4:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000bfb7:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000bfbb:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c000bfbe:	8d 04 90             	lea    eax,[eax+edx*4]
c000bfc1:	50                   	push   eax
c000bfc2:	50                   	push   eax
c000bfc3:	50                   	push   eax
c000bfc4:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000bfc7:	e8 5f ca 01 00       	call   c0028a2b <__floatsidf>
c000bfcc:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000bfd0:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000bfd4:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfd8:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfdc:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfe0:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000bfe4:	e8 c3 c6 01 00       	call   c00286ac <__divdf3>
c000bfe9:	83 c4 1c             	add    esp,0x1c
c000bfec:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000bff0:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000bff4:	52                   	push   edx
c000bff5:	89 ea                	mov    edx,ebp
c000bff7:	50                   	push   eax
c000bff8:	89 d8                	mov    eax,ebx
c000bffa:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000bffd:	8b 4c 24 5c          	mov    ecx,DWORD PTR [esp+0x5c]
c000c001:	e8 69 ed ff ff       	call   c000ad6f <calc_output_multi>
c000c006:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c000c009:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c000c00c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c010:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c014:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c018:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000c01c:	e8 8b c6 01 00       	call   c00286ac <__divdf3>
c000c021:	83 c4 10             	add    esp,0x10
c000c024:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c028:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c02c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c030:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c034:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c038:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000c03c:	e8 0a bd 01 00       	call   c0027d4b <__adddf3>
c000c041:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c045:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c049:	83 c4 28             	add    esp,0x28
c000c04c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c050:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c054:	e8 f7 cd 01 00       	call   c0028e50 <lrint>
c000c059:	83 ec 0c             	sub    esp,0xc
c000c05c:	50                   	push   eax
c000c05d:	e8 c9 c9 01 00       	call   c0028a2b <__floatsidf>
c000c062:	83 c4 10             	add    esp,0x10
c000c065:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c069:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c06d:	52                   	push   edx
c000c06e:	50                   	push   eax
c000c06f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c073:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c077:	e8 20 c3 01 00       	call   c002839c <__subdf3>
c000c07c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c080:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c084:	83 c4 20             	add    esp,0x20
c000c087:	6a 00                	push   0x0
c000c089:	6a 00                	push   0x0
c000c08b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c093:	e8 ff cb 01 00       	call   c0028c97 <__ltdf2>
c000c098:	83 c4 10             	add    esp,0x10
c000c09b:	85 c0                	test   eax,eax
c000c09d:	79 20                	jns    c000c0bf <sinc_multichan_vari_process+0x66e>
c000c09f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0a3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0a7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c0af:	e8 97 bc 01 00       	call   c0027d4b <__adddf3>
c000c0b4:	83 c4 10             	add    esp,0x10
c000c0b7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c0bb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c0bf:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c0c2:	83 ec 10             	sub    esp,0x10
c000c0c5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c0c9:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000c0cc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c0d4:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0d8:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c0dc:	e8 bb c2 01 00       	call   c002839c <__subdf3>
c000c0e1:	83 c4 18             	add    esp,0x18
c000c0e4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c0e8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c0ec:	52                   	push   edx
c000c0ed:	50                   	push   eax
c000c0ee:	e8 5d cd 01 00       	call   c0028e50 <lrint>
c000c0f3:	0f af e8             	imul   ebp,eax
c000c0f6:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c0fa:	83 c4 10             	add    esp,0x10
c000c0fd:	01 e8                	add    eax,ebp
c000c0ff:	99                   	cdq    
c000c100:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c103:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c106:	e9 fd fb ff ff       	jmp    c000bd08 <sinc_multichan_vari_process+0x2b7>
c000c10b:	83 c4 4c             	add    esp,0x4c
c000c10e:	89 d0                	mov    eax,edx
c000c110:	5b                   	pop    ebx
c000c111:	5e                   	pop    esi
c000c112:	5f                   	pop    edi
c000c113:	5d                   	pop    ebp
c000c114:	c3                   	ret    

c000c115 <sinc_hex_vari_process>:
c000c115:	55                   	push   ebp
c000c116:	ba 05 00 00 00       	mov    edx,0x5
c000c11b:	57                   	push   edi
c000c11c:	56                   	push   esi
c000c11d:	53                   	push   ebx
c000c11e:	83 ec 4c             	sub    esp,0x4c
c000c121:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c125:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c129:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c12c:	85 db                	test   ebx,ebx
c000c12e:	0f 84 9c 06 00 00    	je     c000c7d0 <sinc_hex_vari_process+0x6bb>
c000c134:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c137:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c13a:	0f af c7             	imul   eax,edi
c000c13d:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c140:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c143:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c14a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c151:	0f af c7             	imul   eax,edi
c000c154:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c157:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c15a:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c15d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c161:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c165:	68 00 00 70 3f       	push   0x3f700000
c000c16a:	6a 00                	push   0x0
c000c16c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c170:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c174:	e8 1e cb 01 00       	call   c0028c97 <__ltdf2>
c000c179:	83 c4 10             	add    esp,0x10
c000c17c:	ba 16 00 00 00       	mov    edx,0x16
c000c181:	85 c0                	test   eax,eax
c000c183:	0f 88 47 06 00 00    	js     c000c7d0 <sinc_hex_vari_process+0x6bb>
c000c189:	68 00 00 70 40       	push   0x40700000
c000c18e:	6a 00                	push   0x0
c000c190:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c194:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c198:	e8 dc ca 01 00       	call   c0028c79 <__gtdf2>
c000c19d:	83 c4 10             	add    esp,0x10
c000c1a0:	ba 16 00 00 00       	mov    edx,0x16
c000c1a5:	85 c0                	test   eax,eax
c000c1a7:	0f 8f 23 06 00 00    	jg     c000c7d0 <sinc_hex_vari_process+0x6bb>
c000c1ad:	83 ec 0c             	sub    esp,0xc
c000c1b0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c1b3:	e8 73 c8 01 00       	call   c0028a2b <__floatsidf>
c000c1b8:	83 c4 10             	add    esp,0x10
c000c1bb:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c1bf:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c1c3:	68 00 00 00 40       	push   0x40000000
c000c1c8:	6a 00                	push   0x0
c000c1ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1d2:	e8 74 bb 01 00       	call   c0027d4b <__adddf3>
c000c1d7:	59                   	pop    ecx
c000c1d8:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c1dc:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c1e0:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c1e3:	e8 43 c8 01 00       	call   c0028a2b <__floatsidf>
c000c1e8:	83 c4 10             	add    esp,0x10
c000c1eb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c1ef:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c1f3:	52                   	push   edx
c000c1f4:	50                   	push   eax
c000c1f5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1f9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c1fd:	e8 aa c4 01 00       	call   c00286ac <__divdf3>
c000c202:	83 c4 10             	add    esp,0x10
c000c205:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c209:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c20d:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c210:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c213:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c217:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c21b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c21f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c223:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c227:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c22b:	e8 49 ca 01 00       	call   c0028c79 <__gtdf2>
c000c230:	83 c4 10             	add    esp,0x10
c000c233:	85 c0                	test   eax,eax
c000c235:	7e 2d                	jle    c000c264 <sinc_hex_vari_process+0x14f>
c000c237:	68 00 00 f0 3f       	push   0x3ff00000
c000c23c:	6a 00                	push   0x0
c000c23e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c242:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c246:	e8 4c ca 01 00       	call   c0028c97 <__ltdf2>
c000c24b:	83 c4 10             	add    esp,0x10
c000c24e:	85 c0                	test   eax,eax
c000c250:	79 4d                	jns    c000c29f <sinc_hex_vari_process+0x18a>
c000c252:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c256:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c25a:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c25e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c262:	eb 1b                	jmp    c000c27f <sinc_hex_vari_process+0x16a>
c000c264:	68 00 00 f0 3f       	push   0x3ff00000
c000c269:	6a 00                	push   0x0
c000c26b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c26f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c273:	e8 1f ca 01 00       	call   c0028c97 <__ltdf2>
c000c278:	83 c4 10             	add    esp,0x10
c000c27b:	85 c0                	test   eax,eax
c000c27d:	79 20                	jns    c000c29f <sinc_hex_vari_process+0x18a>
c000c27f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c283:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c287:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c28f:	e8 18 c4 01 00       	call   c00286ac <__divdf3>
c000c294:	83 c4 10             	add    esp,0x10
c000c297:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c29b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c29f:	50                   	push   eax
c000c2a0:	50                   	push   eax
c000c2a1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2a5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2a9:	e8 a2 cb 01 00       	call   c0028e50 <lrint>
c000c2ae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c2b1:	40                   	inc    eax
c000c2b2:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2b6:	0f af c7             	imul   eax,edi
c000c2b9:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c2bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c2c0:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2c4:	58                   	pop    eax
c000c2c5:	5a                   	pop    edx
c000c2c6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ca:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c2ce:	e8 7d cb 01 00       	call   c0028e50 <lrint>
c000c2d3:	83 ec 0c             	sub    esp,0xc
c000c2d6:	50                   	push   eax
c000c2d7:	e8 4f c7 01 00       	call   c0028a2b <__floatsidf>
c000c2dc:	83 c4 10             	add    esp,0x10
c000c2df:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c2e3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c2e7:	52                   	push   edx
c000c2e8:	50                   	push   eax
c000c2e9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2ed:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c2f1:	e8 a6 c0 01 00       	call   c002839c <__subdf3>
c000c2f6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c2fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c2fe:	83 c4 20             	add    esp,0x20
c000c301:	6a 00                	push   0x0
c000c303:	6a 00                	push   0x0
c000c305:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c309:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c30d:	e8 85 c9 01 00       	call   c0028c97 <__ltdf2>
c000c312:	83 c4 10             	add    esp,0x10
c000c315:	85 c0                	test   eax,eax
c000c317:	79 1f                	jns    c000c338 <sinc_hex_vari_process+0x223>
c000c319:	68 00 00 f0 3f       	push   0x3ff00000
c000c31e:	6a 00                	push   0x0
c000c320:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c324:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c328:	e8 1e ba 01 00       	call   c0027d4b <__adddf3>
c000c32d:	83 c4 10             	add    esp,0x10
c000c330:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c334:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c338:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c33b:	83 ec 10             	sub    esp,0x10
c000c33e:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c342:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c345:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c349:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c34d:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c351:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c355:	e8 42 c0 01 00       	call   c002839c <__subdf3>
c000c35a:	83 c4 18             	add    esp,0x18
c000c35d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c361:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c365:	52                   	push   edx
c000c366:	50                   	push   eax
c000c367:	e8 e4 ca 01 00       	call   c0028e50 <lrint>
c000c36c:	0f af f8             	imul   edi,eax
c000c36f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000c373:	01 f8                	add    eax,edi
c000c375:	99                   	cdq    
c000c376:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c379:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c37c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c380:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c384:	68 00 00 f0 3f       	push   0x3ff00000
c000c389:	6a 00                	push   0x0
c000c38b:	e8 1c c3 01 00       	call   c00286ac <__divdf3>
c000c390:	83 c4 10             	add    esp,0x10
c000c393:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c397:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c39b:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000c3a0:	68 23 42 92 0c       	push   0xc924223
c000c3a5:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3a9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c3ad:	e8 99 b9 01 00       	call   c0027d4b <__adddf3>
c000c3b2:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000c3b6:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000c3ba:	83 c4 20             	add    esp,0x20
c000c3bd:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000c3c5:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000c3cd:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000c3d0:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000c3d3:	7d 50                	jge    c000c425 <sinc_hex_vari_process+0x310>
c000c3d5:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c3d8:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c3db:	01 c8                	add    eax,ecx
c000c3dd:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c3e0:	99                   	cdq    
c000c3e1:	f7 f9                	idiv   ecx
c000c3e3:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c3e7:	7d 0c                	jge    c000c3f5 <sinc_hex_vari_process+0x2e0>
c000c3e9:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000c3ec:	85 ff                	test   edi,edi
c000c3ee:	79 6c                	jns    c000c45c <sinc_hex_vari_process+0x347>
c000c3f0:	e9 e7 00 00 00       	jmp    c000c4dc <sinc_hex_vari_process+0x3c7>
c000c3f5:	50                   	push   eax
c000c3f6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c3fa:	56                   	push   esi
c000c3fb:	53                   	push   ebx
c000c3fc:	e8 d6 f4 ff ff       	call   c000b8d7 <prepare_data>
c000c401:	83 c4 10             	add    esp,0x10
c000c404:	89 c2                	mov    edx,eax
c000c406:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000c409:	85 c0                	test   eax,eax
c000c40b:	0f 85 bf 03 00 00    	jne    c000c7d0 <sinc_hex_vari_process+0x6bb>
c000c411:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000c414:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000c417:	01 c8                	add    eax,ecx
c000c419:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000c41c:	99                   	cdq    
c000c41d:	f7 f9                	idiv   ecx
c000c41f:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000c423:	7c c4                	jl     c000c3e9 <sinc_hex_vari_process+0x2d4>
c000c425:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000c429:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000c42d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000c430:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000c433:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c437:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c43b:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000c43e:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000c441:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000c444:	99                   	cdq    
c000c445:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c448:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000c44b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000c44e:	99                   	cdq    
c000c44f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000c452:	31 d2                	xor    edx,edx
c000c454:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000c457:	e9 74 03 00 00       	jmp    c000c7d0 <sinc_hex_vari_process+0x6bb>
c000c45c:	83 ec 0c             	sub    esp,0xc
c000c45f:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000c462:	e8 c4 c5 01 00       	call   c0028a2b <__floatsidf>
c000c467:	83 c4 10             	add    esp,0x10
c000c46a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c46e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c472:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c476:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c47a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c47e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c482:	e8 c4 b8 01 00       	call   c0027d4b <__adddf3>
c000c487:	83 c4 10             	add    esp,0x10
c000c48a:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c48e:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c492:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c496:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c49a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c49e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4a2:	e8 a4 b8 01 00       	call   c0027d4b <__adddf3>
c000c4a7:	89 3c 24             	mov    DWORD PTR [esp],edi
c000c4aa:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c4ae:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c4b2:	e8 74 c5 01 00       	call   c0028a2b <__floatsidf>
c000c4b7:	83 c4 10             	add    esp,0x10
c000c4ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c4be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c4c2:	52                   	push   edx
c000c4c3:	50                   	push   eax
c000c4c4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4c8:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c4cc:	e8 c4 c7 01 00       	call   c0028c95 <__gedf2>
c000c4d1:	83 c4 10             	add    esp,0x10
c000c4d4:	85 c0                	test   eax,eax
c000c4d6:	0f 89 49 ff ff ff    	jns    c000c425 <sinc_hex_vari_process+0x310>
c000c4dc:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000c4e0:	0f 8e ef 00 00 00    	jle    c000c5d5 <sinc_hex_vari_process+0x4c0>
c000c4e6:	83 ec 10             	sub    esp,0x10
c000c4e9:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c4ec:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c4ef:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000c4f2:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000c4f5:	e8 a2 be 01 00       	call   c002839c <__subdf3>
c000c4fa:	83 c4 18             	add    esp,0x18
c000c4fd:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c501:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c505:	52                   	push   edx
c000c506:	50                   	push   eax
c000c507:	e8 24 c9 01 00       	call   c0028e30 <fabs>
c000c50c:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c510:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c514:	83 c4 10             	add    esp,0x10
c000c517:	68 df 7c db 3d       	push   0x3ddb7cdf
c000c51c:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000c521:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c525:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c529:	e8 4b c7 01 00       	call   c0028c79 <__gtdf2>
c000c52e:	83 c4 10             	add    esp,0x10
c000c531:	85 c0                	test   eax,eax
c000c533:	0f 8e 9c 00 00 00    	jle    c000c5d5 <sinc_hex_vari_process+0x4c0>
c000c539:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c53c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c53f:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c543:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c547:	52                   	push   edx
c000c548:	50                   	push   eax
c000c549:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000c54c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000c54f:	e8 48 be 01 00       	call   c002839c <__subdf3>
c000c554:	59                   	pop    ecx
c000c555:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c559:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c55d:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000c560:	e8 c6 c4 01 00       	call   c0028a2b <__floatsidf>
c000c565:	83 c4 10             	add    esp,0x10
c000c568:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c56c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c570:	52                   	push   edx
c000c571:	50                   	push   eax
c000c572:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c576:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c57a:	e8 49 be 01 00       	call   c00283c8 <__muldf3>
c000c57f:	5f                   	pop    edi
c000c580:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000c584:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000c588:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000c58b:	e8 9b c4 01 00       	call   c0028a2b <__floatsidf>
c000c590:	83 c4 10             	add    esp,0x10
c000c593:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c597:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c59b:	52                   	push   edx
c000c59c:	50                   	push   eax
c000c59d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5a5:	e8 02 c1 01 00       	call   c00286ac <__divdf3>
c000c5aa:	83 c4 10             	add    esp,0x10
c000c5ad:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c5b1:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c5b5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5b9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c5bd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c5c5:	e8 81 b7 01 00       	call   c0027d4b <__adddf3>
c000c5ca:	83 c4 10             	add    esp,0x10
c000c5cd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c5d1:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c5d5:	83 ec 0c             	sub    esp,0xc
c000c5d8:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c5db:	e8 4b c4 01 00       	call   c0028a2b <__floatsidf>
c000c5e0:	83 c4 10             	add    esp,0x10
c000c5e3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c5e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c5eb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5ef:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5f7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c5fb:	e8 97 c6 01 00       	call   c0028c97 <__ltdf2>
c000c600:	83 c4 10             	add    esp,0x10
c000c603:	85 c0                	test   eax,eax
c000c605:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000c609:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000c60d:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000c611:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000c615:	78 10                	js     c000c627 <sinc_hex_vari_process+0x512>
c000c617:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000c61b:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000c61f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000c623:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000c627:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c62b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c62f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c633:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c637:	e8 8c bd 01 00       	call   c00283c8 <__muldf3>
c000c63c:	59                   	pop    ecx
c000c63d:	5f                   	pop    edi
c000c63e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c642:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c646:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c64a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c64e:	e8 5d f2 ff ff       	call   c000b8b0 <double_to_fp>
c000c653:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c657:	89 c7                	mov    edi,eax
c000c659:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c65d:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c661:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c665:	e8 5e bd 01 00       	call   c00283c8 <__muldf3>
c000c66a:	83 c4 18             	add    esp,0x18
c000c66d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c671:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c675:	52                   	push   edx
c000c676:	50                   	push   eax
c000c677:	e8 34 f2 ff ff       	call   c000b8b0 <double_to_fp>
c000c67c:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000c67f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000c683:	83 c4 0c             	add    esp,0xc
c000c686:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000c689:	8d 04 90             	lea    eax,[eax+edx*4]
c000c68c:	50                   	push   eax
c000c68d:	50                   	push   eax
c000c68e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c691:	e8 95 c3 01 00       	call   c0028a2b <__floatsidf>
c000c696:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c69a:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000c69e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6a2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6a6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6aa:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6ae:	e8 f9 bf 01 00       	call   c00286ac <__divdf3>
c000c6b3:	83 c4 18             	add    esp,0x18
c000c6b6:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c6ba:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c6be:	52                   	push   edx
c000c6bf:	89 fa                	mov    edx,edi
c000c6c1:	50                   	push   eax
c000c6c2:	89 d8                	mov    eax,ebx
c000c6c4:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000c6c8:	e8 50 de ff ff       	call   c000a51d <calc_output_hex>
c000c6cd:	83 43 14 06          	add    DWORD PTR [ebx+0x14],0x6
c000c6d1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6d5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c6d9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c6e1:	e8 c6 bf 01 00       	call   c00286ac <__divdf3>
c000c6e6:	83 c4 10             	add    esp,0x10
c000c6e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000c6ed:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000c6f1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c6f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c6fd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c701:	e8 45 b6 01 00       	call   c0027d4b <__adddf3>
c000c706:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000c70a:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000c70e:	83 c4 18             	add    esp,0x18
c000c711:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c715:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000c719:	e8 32 c7 01 00       	call   c0028e50 <lrint>
c000c71e:	83 ec 0c             	sub    esp,0xc
c000c721:	50                   	push   eax
c000c722:	e8 04 c3 01 00       	call   c0028a2b <__floatsidf>
c000c727:	83 c4 10             	add    esp,0x10
c000c72a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c72e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c732:	52                   	push   edx
c000c733:	50                   	push   eax
c000c734:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c738:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c73c:	e8 5b bc 01 00       	call   c002839c <__subdf3>
c000c741:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c745:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c749:	83 c4 20             	add    esp,0x20
c000c74c:	6a 00                	push   0x0
c000c74e:	6a 00                	push   0x0
c000c750:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c754:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c758:	e8 3a c5 01 00       	call   c0028c97 <__ltdf2>
c000c75d:	83 c4 10             	add    esp,0x10
c000c760:	85 c0                	test   eax,eax
c000c762:	79 20                	jns    c000c784 <sinc_hex_vari_process+0x66f>
c000c764:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c768:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c76c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c770:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c774:	e8 d2 b5 01 00       	call   c0027d4b <__adddf3>
c000c779:	83 c4 10             	add    esp,0x10
c000c77c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c780:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c784:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000c787:	83 ec 10             	sub    esp,0x10
c000c78a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000c78e:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c791:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c795:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c799:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c79d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000c7a1:	e8 f6 bb 01 00       	call   c002839c <__subdf3>
c000c7a6:	83 c4 18             	add    esp,0x18
c000c7a9:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c7ad:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c7b1:	52                   	push   edx
c000c7b2:	50                   	push   eax
c000c7b3:	e8 98 c6 01 00       	call   c0028e50 <lrint>
c000c7b8:	0f af f8             	imul   edi,eax
c000c7bb:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000c7bf:	83 c4 10             	add    esp,0x10
c000c7c2:	01 f8                	add    eax,edi
c000c7c4:	99                   	cdq    
c000c7c5:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000c7c8:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000c7cb:	e9 fd fb ff ff       	jmp    c000c3cd <sinc_hex_vari_process+0x2b8>
c000c7d0:	83 c4 4c             	add    esp,0x4c
c000c7d3:	89 d0                	mov    eax,edx
c000c7d5:	5b                   	pop    ebx
c000c7d6:	5e                   	pop    esi
c000c7d7:	5f                   	pop    edi
c000c7d8:	5d                   	pop    ebp
c000c7d9:	c3                   	ret    

c000c7da <sinc_quad_vari_process>:
c000c7da:	55                   	push   ebp
c000c7db:	ba 05 00 00 00       	mov    edx,0x5
c000c7e0:	57                   	push   edi
c000c7e1:	56                   	push   esi
c000c7e2:	53                   	push   ebx
c000c7e3:	83 ec 4c             	sub    esp,0x4c
c000c7e6:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000c7ea:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000c7ee:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000c7f1:	85 db                	test   ebx,ebx
c000c7f3:	0f 84 9c 06 00 00    	je     c000ce95 <sinc_quad_vari_process+0x6bb>
c000c7f9:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000c7fc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000c7ff:	0f af c7             	imul   eax,edi
c000c802:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000c805:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000c808:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000c80f:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000c816:	0f af c7             	imul   eax,edi
c000c819:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000c81c:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000c81f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000c822:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000c826:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000c82a:	68 00 00 70 3f       	push   0x3f700000
c000c82f:	6a 00                	push   0x0
c000c831:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c835:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c839:	e8 59 c4 01 00       	call   c0028c97 <__ltdf2>
c000c83e:	83 c4 10             	add    esp,0x10
c000c841:	ba 16 00 00 00       	mov    edx,0x16
c000c846:	85 c0                	test   eax,eax
c000c848:	0f 88 47 06 00 00    	js     c000ce95 <sinc_quad_vari_process+0x6bb>
c000c84e:	68 00 00 70 40       	push   0x40700000
c000c853:	6a 00                	push   0x0
c000c855:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c859:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c85d:	e8 17 c4 01 00       	call   c0028c79 <__gtdf2>
c000c862:	83 c4 10             	add    esp,0x10
c000c865:	ba 16 00 00 00       	mov    edx,0x16
c000c86a:	85 c0                	test   eax,eax
c000c86c:	0f 8f 23 06 00 00    	jg     c000ce95 <sinc_quad_vari_process+0x6bb>
c000c872:	83 ec 0c             	sub    esp,0xc
c000c875:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000c878:	e8 ae c1 01 00       	call   c0028a2b <__floatsidf>
c000c87d:	83 c4 10             	add    esp,0x10
c000c880:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c884:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c888:	68 00 00 00 40       	push   0x40000000
c000c88d:	6a 00                	push   0x0
c000c88f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c893:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c897:	e8 af b4 01 00       	call   c0027d4b <__adddf3>
c000c89c:	59                   	pop    ecx
c000c89d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000c8a1:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000c8a5:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000c8a8:	e8 7e c1 01 00       	call   c0028a2b <__floatsidf>
c000c8ad:	83 c4 10             	add    esp,0x10
c000c8b0:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8b4:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8b8:	52                   	push   edx
c000c8b9:	50                   	push   eax
c000c8ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8be:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8c2:	e8 e5 bd 01 00       	call   c00286ac <__divdf3>
c000c8c7:	83 c4 10             	add    esp,0x10
c000c8ca:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c8ce:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c8d2:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000c8d5:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000c8d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c8dc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c8e0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8e8:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8ec:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c8f0:	e8 84 c3 01 00       	call   c0028c79 <__gtdf2>
c000c8f5:	83 c4 10             	add    esp,0x10
c000c8f8:	85 c0                	test   eax,eax
c000c8fa:	7e 2d                	jle    c000c929 <sinc_quad_vari_process+0x14f>
c000c8fc:	68 00 00 f0 3f       	push   0x3ff00000
c000c901:	6a 00                	push   0x0
c000c903:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c907:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000c90b:	e8 87 c3 01 00       	call   c0028c97 <__ltdf2>
c000c910:	83 c4 10             	add    esp,0x10
c000c913:	85 c0                	test   eax,eax
c000c915:	79 4d                	jns    c000c964 <sinc_quad_vari_process+0x18a>
c000c917:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000c91b:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000c91f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c923:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c927:	eb 1b                	jmp    c000c944 <sinc_quad_vari_process+0x16a>
c000c929:	68 00 00 f0 3f       	push   0x3ff00000
c000c92e:	6a 00                	push   0x0
c000c930:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c934:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c938:	e8 5a c3 01 00       	call   c0028c97 <__ltdf2>
c000c93d:	83 c4 10             	add    esp,0x10
c000c940:	85 c0                	test   eax,eax
c000c942:	79 20                	jns    c000c964 <sinc_quad_vari_process+0x18a>
c000c944:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c948:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000c94c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c950:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c954:	e8 53 bd 01 00       	call   c00286ac <__divdf3>
c000c959:	83 c4 10             	add    esp,0x10
c000c95c:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c960:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c964:	50                   	push   eax
c000c965:	50                   	push   eax
c000c966:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c96e:	e8 dd c4 01 00       	call   c0028e50 <lrint>
c000c973:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000c976:	40                   	inc    eax
c000c977:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c97b:	0f af c7             	imul   eax,edi
c000c97e:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000c982:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000c985:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c989:	58                   	pop    eax
c000c98a:	5a                   	pop    edx
c000c98b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c98f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000c993:	e8 b8 c4 01 00       	call   c0028e50 <lrint>
c000c998:	83 ec 0c             	sub    esp,0xc
c000c99b:	50                   	push   eax
c000c99c:	e8 8a c0 01 00       	call   c0028a2b <__floatsidf>
c000c9a1:	83 c4 10             	add    esp,0x10
c000c9a4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000c9a8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000c9ac:	52                   	push   edx
c000c9ad:	50                   	push   eax
c000c9ae:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9b2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000c9b6:	e8 e1 b9 01 00       	call   c002839c <__subdf3>
c000c9bb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000c9bf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000c9c3:	83 c4 20             	add    esp,0x20
c000c9c6:	6a 00                	push   0x0
c000c9c8:	6a 00                	push   0x0
c000c9ca:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ce:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9d2:	e8 c0 c2 01 00       	call   c0028c97 <__ltdf2>
c000c9d7:	83 c4 10             	add    esp,0x10
c000c9da:	85 c0                	test   eax,eax
c000c9dc:	79 1f                	jns    c000c9fd <sinc_quad_vari_process+0x223>
c000c9de:	68 00 00 f0 3f       	push   0x3ff00000
c000c9e3:	6a 00                	push   0x0
c000c9e5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9e9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000c9ed:	e8 59 b3 01 00       	call   c0027d4b <__adddf3>
c000c9f2:	83 c4 10             	add    esp,0x10
c000c9f5:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000c9f9:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000c9fd:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ca00:	83 ec 10             	sub    esp,0x10
c000ca03:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000ca07:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ca0a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca0e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ca12:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca16:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca1a:	e8 7d b9 01 00       	call   c002839c <__subdf3>
c000ca1f:	83 c4 18             	add    esp,0x18
c000ca22:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ca26:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000ca2a:	52                   	push   edx
c000ca2b:	50                   	push   eax
c000ca2c:	e8 1f c4 01 00       	call   c0028e50 <lrint>
c000ca31:	0f af f8             	imul   edi,eax
c000ca34:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000ca38:	01 f8                	add    eax,edi
c000ca3a:	99                   	cdq    
c000ca3b:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ca3e:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ca41:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca45:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ca49:	68 00 00 f0 3f       	push   0x3ff00000
c000ca4e:	6a 00                	push   0x0
c000ca50:	e8 57 bc 01 00       	call   c00286ac <__divdf3>
c000ca55:	83 c4 10             	add    esp,0x10
c000ca58:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ca5c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ca60:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000ca65:	68 23 42 92 0c       	push   0xc924223
c000ca6a:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca6e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ca72:	e8 d4 b2 01 00       	call   c0027d4b <__adddf3>
c000ca77:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000ca7b:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000ca7f:	83 c4 20             	add    esp,0x20
c000ca82:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000ca8a:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000ca92:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000ca95:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000ca98:	7d 50                	jge    c000caea <sinc_quad_vari_process+0x310>
c000ca9a:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000ca9d:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000caa0:	01 c8                	add    eax,ecx
c000caa2:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000caa5:	99                   	cdq    
c000caa6:	f7 f9                	idiv   ecx
c000caa8:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000caac:	7d 0c                	jge    c000caba <sinc_quad_vari_process+0x2e0>
c000caae:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000cab1:	85 ff                	test   edi,edi
c000cab3:	79 6c                	jns    c000cb21 <sinc_quad_vari_process+0x347>
c000cab5:	e9 e7 00 00 00       	jmp    c000cba1 <sinc_quad_vari_process+0x3c7>
c000caba:	50                   	push   eax
c000cabb:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cabf:	56                   	push   esi
c000cac0:	53                   	push   ebx
c000cac1:	e8 11 ee ff ff       	call   c000b8d7 <prepare_data>
c000cac6:	83 c4 10             	add    esp,0x10
c000cac9:	89 c2                	mov    edx,eax
c000cacb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000cace:	85 c0                	test   eax,eax
c000cad0:	0f 85 bf 03 00 00    	jne    c000ce95 <sinc_quad_vari_process+0x6bb>
c000cad6:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000cad9:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000cadc:	01 c8                	add    eax,ecx
c000cade:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000cae1:	99                   	cdq    
c000cae2:	f7 f9                	idiv   ecx
c000cae4:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000cae8:	7c c4                	jl     c000caae <sinc_quad_vari_process+0x2d4>
c000caea:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000caee:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000caf2:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000caf5:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000caf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cafc:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cb00:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000cb03:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000cb06:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000cb09:	99                   	cdq    
c000cb0a:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb0d:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000cb10:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000cb13:	99                   	cdq    
c000cb14:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000cb17:	31 d2                	xor    edx,edx
c000cb19:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000cb1c:	e9 74 03 00 00       	jmp    c000ce95 <sinc_quad_vari_process+0x6bb>
c000cb21:	83 ec 0c             	sub    esp,0xc
c000cb24:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000cb27:	e8 ff be 01 00       	call   c0028a2b <__floatsidf>
c000cb2c:	83 c4 10             	add    esp,0x10
c000cb2f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb33:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb37:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb3b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000cb3f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb43:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb47:	e8 ff b1 01 00       	call   c0027d4b <__adddf3>
c000cb4c:	83 c4 10             	add    esp,0x10
c000cb4f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cb53:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cb57:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb5b:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cb5f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb63:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb67:	e8 df b1 01 00       	call   c0027d4b <__adddf3>
c000cb6c:	89 3c 24             	mov    DWORD PTR [esp],edi
c000cb6f:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cb73:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cb77:	e8 af be 01 00       	call   c0028a2b <__floatsidf>
c000cb7c:	83 c4 10             	add    esp,0x10
c000cb7f:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cb83:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cb87:	52                   	push   edx
c000cb88:	50                   	push   eax
c000cb89:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb8d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cb91:	e8 ff c0 01 00       	call   c0028c95 <__gedf2>
c000cb96:	83 c4 10             	add    esp,0x10
c000cb99:	85 c0                	test   eax,eax
c000cb9b:	0f 89 49 ff ff ff    	jns    c000caea <sinc_quad_vari_process+0x310>
c000cba1:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000cba5:	0f 8e ef 00 00 00    	jle    c000cc9a <sinc_quad_vari_process+0x4c0>
c000cbab:	83 ec 10             	sub    esp,0x10
c000cbae:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cbb1:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cbb4:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000cbb7:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000cbba:	e8 dd b7 01 00       	call   c002839c <__subdf3>
c000cbbf:	83 c4 18             	add    esp,0x18
c000cbc2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cbc6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cbca:	52                   	push   edx
c000cbcb:	50                   	push   eax
c000cbcc:	e8 5f c2 01 00       	call   c0028e30 <fabs>
c000cbd1:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cbd5:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cbd9:	83 c4 10             	add    esp,0x10
c000cbdc:	68 df 7c db 3d       	push   0x3ddb7cdf
c000cbe1:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000cbe6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbea:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cbee:	e8 86 c0 01 00       	call   c0028c79 <__gtdf2>
c000cbf3:	83 c4 10             	add    esp,0x10
c000cbf6:	85 c0                	test   eax,eax
c000cbf8:	0f 8e 9c 00 00 00    	jle    c000cc9a <sinc_quad_vari_process+0x4c0>
c000cbfe:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cc01:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cc04:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc08:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc0c:	52                   	push   edx
c000cc0d:	50                   	push   eax
c000cc0e:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000cc11:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000cc14:	e8 83 b7 01 00       	call   c002839c <__subdf3>
c000cc19:	59                   	pop    ecx
c000cc1a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc1e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc22:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000cc25:	e8 01 be 01 00       	call   c0028a2b <__floatsidf>
c000cc2a:	83 c4 10             	add    esp,0x10
c000cc2d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc31:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc35:	52                   	push   edx
c000cc36:	50                   	push   eax
c000cc37:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc3b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc3f:	e8 84 b7 01 00       	call   c00283c8 <__muldf3>
c000cc44:	5f                   	pop    edi
c000cc45:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000cc49:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000cc4d:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000cc50:	e8 d6 bd 01 00       	call   c0028a2b <__floatsidf>
c000cc55:	83 c4 10             	add    esp,0x10
c000cc58:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cc5c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cc60:	52                   	push   edx
c000cc61:	50                   	push   eax
c000cc62:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc66:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc6a:	e8 3d ba 01 00       	call   c00286ac <__divdf3>
c000cc6f:	83 c4 10             	add    esp,0x10
c000cc72:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cc76:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000cc7a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc7e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cc82:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc86:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cc8a:	e8 bc b0 01 00       	call   c0027d4b <__adddf3>
c000cc8f:	83 c4 10             	add    esp,0x10
c000cc92:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000cc96:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000cc9a:	83 ec 0c             	sub    esp,0xc
c000cc9d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cca0:	e8 86 bd 01 00       	call   c0028a2b <__floatsidf>
c000cca5:	83 c4 10             	add    esp,0x10
c000cca8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ccac:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ccb0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccb4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccbc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ccc0:	e8 d2 bf 01 00       	call   c0028c97 <__ltdf2>
c000ccc5:	83 c4 10             	add    esp,0x10
c000ccc8:	85 c0                	test   eax,eax
c000ccca:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000ccce:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ccd2:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000ccd6:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000ccda:	78 10                	js     c000ccec <sinc_quad_vari_process+0x512>
c000ccdc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000cce0:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000cce4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000cce8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000ccec:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccf0:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000ccf4:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccf8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000ccfc:	e8 c7 b6 01 00       	call   c00283c8 <__muldf3>
c000cd01:	59                   	pop    ecx
c000cd02:	5f                   	pop    edi
c000cd03:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd07:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd0b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd0f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cd13:	e8 98 eb ff ff       	call   c000b8b0 <double_to_fp>
c000cd18:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd1c:	89 c7                	mov    edi,eax
c000cd1e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cd22:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd26:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd2a:	e8 99 b6 01 00       	call   c00283c8 <__muldf3>
c000cd2f:	83 c4 18             	add    esp,0x18
c000cd32:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cd36:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cd3a:	52                   	push   edx
c000cd3b:	50                   	push   eax
c000cd3c:	e8 6f eb ff ff       	call   c000b8b0 <double_to_fp>
c000cd41:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000cd44:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000cd48:	83 c4 0c             	add    esp,0xc
c000cd4b:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000cd4e:	8d 04 90             	lea    eax,[eax+edx*4]
c000cd51:	50                   	push   eax
c000cd52:	50                   	push   eax
c000cd53:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cd56:	e8 d0 bc 01 00       	call   c0028a2b <__floatsidf>
c000cd5b:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000cd5f:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000cd63:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd67:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd6b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd6f:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cd73:	e8 34 b9 01 00       	call   c00286ac <__divdf3>
c000cd78:	83 c4 18             	add    esp,0x18
c000cd7b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000cd7f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000cd83:	52                   	push   edx
c000cd84:	89 fa                	mov    edx,edi
c000cd86:	50                   	push   eax
c000cd87:	89 d8                	mov    eax,ebx
c000cd89:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000cd8d:	e8 a5 d1 ff ff       	call   c0009f37 <calc_output_quad>
c000cd92:	83 43 14 04          	add    DWORD PTR [ebx+0x14],0x4
c000cd96:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd9a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000cd9e:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cda2:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000cda6:	e8 01 b9 01 00       	call   c00286ac <__divdf3>
c000cdab:	83 c4 10             	add    esp,0x10
c000cdae:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000cdb2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000cdb6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdba:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cdbe:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdc2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdc6:	e8 80 af 01 00       	call   c0027d4b <__adddf3>
c000cdcb:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000cdcf:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000cdd3:	83 c4 18             	add    esp,0x18
c000cdd6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdda:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000cdde:	e8 6d c0 01 00       	call   c0028e50 <lrint>
c000cde3:	83 ec 0c             	sub    esp,0xc
c000cde6:	50                   	push   eax
c000cde7:	e8 3f bc 01 00       	call   c0028a2b <__floatsidf>
c000cdec:	83 c4 10             	add    esp,0x10
c000cdef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cdf3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cdf7:	52                   	push   edx
c000cdf8:	50                   	push   eax
c000cdf9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000cdfd:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce01:	e8 96 b5 01 00       	call   c002839c <__subdf3>
c000ce06:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce0a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce0e:	83 c4 20             	add    esp,0x20
c000ce11:	6a 00                	push   0x0
c000ce13:	6a 00                	push   0x0
c000ce15:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce19:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce1d:	e8 75 be 01 00       	call   c0028c97 <__ltdf2>
c000ce22:	83 c4 10             	add    esp,0x10
c000ce25:	85 c0                	test   eax,eax
c000ce27:	79 20                	jns    c000ce49 <sinc_quad_vari_process+0x66f>
c000ce29:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce2d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce31:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce35:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ce39:	e8 0d af 01 00       	call   c0027d4b <__adddf3>
c000ce3e:	83 c4 10             	add    esp,0x10
c000ce41:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ce45:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ce49:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000ce4c:	83 ec 10             	sub    esp,0x10
c000ce4f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000ce53:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000ce56:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000ce5e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce62:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000ce66:	e8 31 b5 01 00       	call   c002839c <__subdf3>
c000ce6b:	83 c4 18             	add    esp,0x18
c000ce6e:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000ce72:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000ce76:	52                   	push   edx
c000ce77:	50                   	push   eax
c000ce78:	e8 d3 bf 01 00       	call   c0028e50 <lrint>
c000ce7d:	0f af f8             	imul   edi,eax
c000ce80:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000ce84:	83 c4 10             	add    esp,0x10
c000ce87:	01 f8                	add    eax,edi
c000ce89:	99                   	cdq    
c000ce8a:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000ce8d:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000ce90:	e9 fd fb ff ff       	jmp    c000ca92 <sinc_quad_vari_process+0x2b8>
c000ce95:	83 c4 4c             	add    esp,0x4c
c000ce98:	89 d0                	mov    eax,edx
c000ce9a:	5b                   	pop    ebx
c000ce9b:	5e                   	pop    esi
c000ce9c:	5f                   	pop    edi
c000ce9d:	5d                   	pop    ebp
c000ce9e:	c3                   	ret    

c000ce9f <sinc_stereo_vari_process>:
c000ce9f:	55                   	push   ebp
c000cea0:	ba 05 00 00 00       	mov    edx,0x5
c000cea5:	57                   	push   edi
c000cea6:	56                   	push   esi
c000cea7:	53                   	push   ebx
c000cea8:	83 ec 4c             	sub    esp,0x4c
c000ceab:	8b 6c 24 60          	mov    ebp,DWORD PTR [esp+0x60]
c000ceaf:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000ceb3:	8b 5d 1c             	mov    ebx,DWORD PTR [ebp+0x1c]
c000ceb6:	85 db                	test   ebx,ebx
c000ceb8:	0f 84 9c 06 00 00    	je     c000d55a <sinc_stereo_vari_process+0x6bb>
c000cebe:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000cec1:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000cec4:	0f af c7             	imul   eax,edi
c000cec7:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000ceca:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000cecd:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000ced4:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000cedb:	0f af c7             	imul   eax,edi
c000cede:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000cee1:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000cee4:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000cee7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000ceeb:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000ceef:	68 00 00 70 3f       	push   0x3f700000
c000cef4:	6a 00                	push   0x0
c000cef6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cefa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cefe:	e8 94 bd 01 00       	call   c0028c97 <__ltdf2>
c000cf03:	83 c4 10             	add    esp,0x10
c000cf06:	ba 16 00 00 00       	mov    edx,0x16
c000cf0b:	85 c0                	test   eax,eax
c000cf0d:	0f 88 47 06 00 00    	js     c000d55a <sinc_stereo_vari_process+0x6bb>
c000cf13:	68 00 00 70 40       	push   0x40700000
c000cf18:	6a 00                	push   0x0
c000cf1a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cf22:	e8 52 bd 01 00       	call   c0028c79 <__gtdf2>
c000cf27:	83 c4 10             	add    esp,0x10
c000cf2a:	ba 16 00 00 00       	mov    edx,0x16
c000cf2f:	85 c0                	test   eax,eax
c000cf31:	0f 8f 23 06 00 00    	jg     c000d55a <sinc_stereo_vari_process+0x6bb>
c000cf37:	83 ec 0c             	sub    esp,0xc
c000cf3a:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000cf3d:	e8 e9 ba 01 00       	call   c0028a2b <__floatsidf>
c000cf42:	83 c4 10             	add    esp,0x10
c000cf45:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cf49:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cf4d:	68 00 00 00 40       	push   0x40000000
c000cf52:	6a 00                	push   0x0
c000cf54:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf58:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf5c:	e8 ea ad 01 00       	call   c0027d4b <__adddf3>
c000cf61:	59                   	pop    ecx
c000cf62:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000cf66:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000cf6a:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000cf6d:	e8 b9 ba 01 00       	call   c0028a2b <__floatsidf>
c000cf72:	83 c4 10             	add    esp,0x10
c000cf75:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf79:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf7d:	52                   	push   edx
c000cf7e:	50                   	push   eax
c000cf7f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf83:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cf87:	e8 20 b7 01 00       	call   c00286ac <__divdf3>
c000cf8c:	83 c4 10             	add    esp,0x10
c000cf8f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000cf93:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000cf97:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000cf9a:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000cf9d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfa1:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfa5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfa9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfad:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfb1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cfb5:	e8 bf bc 01 00       	call   c0028c79 <__gtdf2>
c000cfba:	83 c4 10             	add    esp,0x10
c000cfbd:	85 c0                	test   eax,eax
c000cfbf:	7e 2d                	jle    c000cfee <sinc_stereo_vari_process+0x14f>
c000cfc1:	68 00 00 f0 3f       	push   0x3ff00000
c000cfc6:	6a 00                	push   0x0
c000cfc8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfcc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000cfd0:	e8 c2 bc 01 00       	call   c0028c97 <__ltdf2>
c000cfd5:	83 c4 10             	add    esp,0x10
c000cfd8:	85 c0                	test   eax,eax
c000cfda:	79 4d                	jns    c000d029 <sinc_stereo_vari_process+0x18a>
c000cfdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000cfe0:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000cfe4:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000cfe8:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000cfec:	eb 1b                	jmp    c000d009 <sinc_stereo_vari_process+0x16a>
c000cfee:	68 00 00 f0 3f       	push   0x3ff00000
c000cff3:	6a 00                	push   0x0
c000cff5:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cff9:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000cffd:	e8 95 bc 01 00       	call   c0028c97 <__ltdf2>
c000d002:	83 c4 10             	add    esp,0x10
c000d005:	85 c0                	test   eax,eax
c000d007:	79 20                	jns    c000d029 <sinc_stereo_vari_process+0x18a>
c000d009:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d00d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d011:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d015:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d019:	e8 8e b6 01 00       	call   c00286ac <__divdf3>
c000d01e:	83 c4 10             	add    esp,0x10
c000d021:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d025:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d029:	50                   	push   eax
c000d02a:	50                   	push   eax
c000d02b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d02f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d033:	e8 18 be 01 00       	call   c0028e50 <lrint>
c000d038:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c000d03b:	40                   	inc    eax
c000d03c:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d040:	0f af c7             	imul   eax,edi
c000d043:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000d047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c000d04a:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d04e:	58                   	pop    eax
c000d04f:	5a                   	pop    edx
c000d050:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d054:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d058:	e8 f3 bd 01 00       	call   c0028e50 <lrint>
c000d05d:	83 ec 0c             	sub    esp,0xc
c000d060:	50                   	push   eax
c000d061:	e8 c5 b9 01 00       	call   c0028a2b <__floatsidf>
c000d066:	83 c4 10             	add    esp,0x10
c000d069:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d06d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d071:	52                   	push   edx
c000d072:	50                   	push   eax
c000d073:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d077:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d07b:	e8 1c b3 01 00       	call   c002839c <__subdf3>
c000d080:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d084:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d088:	83 c4 20             	add    esp,0x20
c000d08b:	6a 00                	push   0x0
c000d08d:	6a 00                	push   0x0
c000d08f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d093:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d097:	e8 fb bb 01 00       	call   c0028c97 <__ltdf2>
c000d09c:	83 c4 10             	add    esp,0x10
c000d09f:	85 c0                	test   eax,eax
c000d0a1:	79 1f                	jns    c000d0c2 <sinc_stereo_vari_process+0x223>
c000d0a3:	68 00 00 f0 3f       	push   0x3ff00000
c000d0a8:	6a 00                	push   0x0
c000d0aa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d0b2:	e8 94 ac 01 00       	call   c0027d4b <__adddf3>
c000d0b7:	83 c4 10             	add    esp,0x10
c000d0ba:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d0be:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d0c2:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d0c5:	83 ec 10             	sub    esp,0x10
c000d0c8:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d0cc:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d0cf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0d3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d0d7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0db:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d0df:	e8 b8 b2 01 00       	call   c002839c <__subdf3>
c000d0e4:	83 c4 18             	add    esp,0x18
c000d0e7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d0eb:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d0ef:	52                   	push   edx
c000d0f0:	50                   	push   eax
c000d0f1:	e8 5a bd 01 00       	call   c0028e50 <lrint>
c000d0f6:	0f af f8             	imul   edi,eax
c000d0f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000d0fd:	01 f8                	add    eax,edi
c000d0ff:	99                   	cdq    
c000d100:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d103:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d106:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d10a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d10e:	68 00 00 f0 3f       	push   0x3ff00000
c000d113:	6a 00                	push   0x0
c000d115:	e8 92 b5 01 00       	call   c00286ac <__divdf3>
c000d11a:	83 c4 10             	add    esp,0x10
c000d11d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d121:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d125:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d12a:	68 23 42 92 0c       	push   0xc924223
c000d12f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d133:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d137:	e8 0f ac 01 00       	call   c0027d4b <__adddf3>
c000d13c:	89 44 24 50          	mov    DWORD PTR [esp+0x50],eax
c000d140:	89 54 24 54          	mov    DWORD PTR [esp+0x54],edx
c000d144:	83 c4 20             	add    esp,0x20
c000d147:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c000d14f:	c7 44 24 1c 00 00 f0 3f 	mov    DWORD PTR [esp+0x1c],0x3ff00000
c000d157:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d15a:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d15d:	7d 50                	jge    c000d1af <sinc_stereo_vari_process+0x310>
c000d15f:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d162:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d165:	01 c8                	add    eax,ecx
c000d167:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d16a:	99                   	cdq    
c000d16b:	f7 f9                	idiv   ecx
c000d16d:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d171:	7d 0c                	jge    c000d17f <sinc_stereo_vari_process+0x2e0>
c000d173:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d176:	85 ff                	test   edi,edi
c000d178:	79 6c                	jns    c000d1e6 <sinc_stereo_vari_process+0x347>
c000d17a:	e9 e7 00 00 00       	jmp    c000d266 <sinc_stereo_vari_process+0x3c7>
c000d17f:	50                   	push   eax
c000d180:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d184:	56                   	push   esi
c000d185:	53                   	push   ebx
c000d186:	e8 4c e7 ff ff       	call   c000b8d7 <prepare_data>
c000d18b:	83 c4 10             	add    esp,0x10
c000d18e:	89 c2                	mov    edx,eax
c000d190:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c000d193:	85 c0                	test   eax,eax
c000d195:	0f 85 bf 03 00 00    	jne    c000d55a <sinc_stereo_vari_process+0x6bb>
c000d19b:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d19e:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d1a1:	01 c8                	add    eax,ecx
c000d1a3:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d1a6:	99                   	cdq    
c000d1a7:	f7 f9                	idiv   ecx
c000d1a9:	39 54 24 38          	cmp    DWORD PTR [esp+0x38],edx
c000d1ad:	7c c4                	jl     c000d173 <sinc_stereo_vari_process+0x2d4>
c000d1af:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d1b3:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d1b7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c000d1ba:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c000d1bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d1c1:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d1c5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c000d1c8:	89 55 04             	mov    DWORD PTR [ebp+0x4],edx
c000d1cb:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d1ce:	99                   	cdq    
c000d1cf:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1d2:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d1d5:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d1d8:	99                   	cdq    
c000d1d9:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d1dc:	31 d2                	xor    edx,edx
c000d1de:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d1e1:	e9 74 03 00 00       	jmp    c000d55a <sinc_stereo_vari_process+0x6bb>
c000d1e6:	83 ec 0c             	sub    esp,0xc
c000d1e9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d1ec:	e8 3a b8 01 00       	call   c0028a2b <__floatsidf>
c000d1f1:	83 c4 10             	add    esp,0x10
c000d1f4:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d1f8:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d1fc:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d200:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d204:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d208:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d20c:	e8 3a ab 01 00       	call   c0027d4b <__adddf3>
c000d211:	83 c4 10             	add    esp,0x10
c000d214:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d218:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d21c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d220:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d224:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d228:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d22c:	e8 1a ab 01 00       	call   c0027d4b <__adddf3>
c000d231:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d234:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d238:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d23c:	e8 ea b7 01 00       	call   c0028a2b <__floatsidf>
c000d241:	83 c4 10             	add    esp,0x10
c000d244:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d248:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d24c:	52                   	push   edx
c000d24d:	50                   	push   eax
c000d24e:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d252:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d256:	e8 3a ba 01 00       	call   c0028c95 <__gedf2>
c000d25b:	83 c4 10             	add    esp,0x10
c000d25e:	85 c0                	test   eax,eax
c000d260:	0f 89 49 ff ff ff    	jns    c000d1af <sinc_stereo_vari_process+0x310>
c000d266:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d26a:	0f 8e ef 00 00 00    	jle    c000d35f <sinc_stereo_vari_process+0x4c0>
c000d270:	83 ec 10             	sub    esp,0x10
c000d273:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d276:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d279:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c000d27c:	ff 75 00             	push   DWORD PTR [ebp+0x0]
c000d27f:	e8 18 b1 01 00       	call   c002839c <__subdf3>
c000d284:	83 c4 18             	add    esp,0x18
c000d287:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d28b:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d28f:	52                   	push   edx
c000d290:	50                   	push   eax
c000d291:	e8 9a bb 01 00       	call   c0028e30 <fabs>
c000d296:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d29a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d29e:	83 c4 10             	add    esp,0x10
c000d2a1:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d2a6:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d2ab:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2af:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d2b3:	e8 c1 b9 01 00       	call   c0028c79 <__gtdf2>
c000d2b8:	83 c4 10             	add    esp,0x10
c000d2bb:	85 c0                	test   eax,eax
c000d2bd:	0f 8e 9c 00 00 00    	jle    c000d35f <sinc_stereo_vari_process+0x4c0>
c000d2c3:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c000d2c6:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c000d2c9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d2cd:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d2d1:	52                   	push   edx
c000d2d2:	50                   	push   eax
c000d2d3:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d2d6:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d2d9:	e8 be b0 01 00       	call   c002839c <__subdf3>
c000d2de:	59                   	pop    ecx
c000d2df:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d2e3:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d2e7:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d2ea:	e8 3c b7 01 00       	call   c0028a2b <__floatsidf>
c000d2ef:	83 c4 10             	add    esp,0x10
c000d2f2:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d2f6:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d2fa:	52                   	push   edx
c000d2fb:	50                   	push   eax
c000d2fc:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d300:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d304:	e8 bf b0 01 00       	call   c00283c8 <__muldf3>
c000d309:	5f                   	pop    edi
c000d30a:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c000d30e:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c000d312:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d315:	e8 11 b7 01 00       	call   c0028a2b <__floatsidf>
c000d31a:	83 c4 10             	add    esp,0x10
c000d31d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d321:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d325:	52                   	push   edx
c000d326:	50                   	push   eax
c000d327:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d32b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d32f:	e8 78 b3 01 00       	call   c00286ac <__divdf3>
c000d334:	83 c4 10             	add    esp,0x10
c000d337:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d33b:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d33f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d343:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d347:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d34f:	e8 f7 a9 01 00       	call   c0027d4b <__adddf3>
c000d354:	83 c4 10             	add    esp,0x10
c000d357:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d35b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d35f:	83 ec 0c             	sub    esp,0xc
c000d362:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d365:	e8 c1 b6 01 00       	call   c0028a2b <__floatsidf>
c000d36a:	83 c4 10             	add    esp,0x10
c000d36d:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d371:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d375:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d379:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d37d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d381:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d385:	e8 0d b9 01 00       	call   c0028c97 <__ltdf2>
c000d38a:	83 c4 10             	add    esp,0x10
c000d38d:	85 c0                	test   eax,eax
c000d38f:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000d393:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000d397:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000d39b:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c000d39f:	78 10                	js     c000d3b1 <sinc_stereo_vari_process+0x512>
c000d3a1:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000d3a5:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000d3a9:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d3ad:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d3b1:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3b5:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3b9:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3bd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3c1:	e8 02 b0 01 00       	call   c00283c8 <__muldf3>
c000d3c6:	59                   	pop    ecx
c000d3c7:	5f                   	pop    edi
c000d3c8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d3cc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d3d0:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3d4:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d3d8:	e8 d3 e4 ff ff       	call   c000b8b0 <double_to_fp>
c000d3dd:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e1:	89 c7                	mov    edi,eax
c000d3e3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d3e7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3eb:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d3ef:	e8 d4 af 01 00       	call   c00283c8 <__muldf3>
c000d3f4:	83 c4 18             	add    esp,0x18
c000d3f7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d3fb:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d3ff:	52                   	push   edx
c000d400:	50                   	push   eax
c000d401:	e8 aa e4 ff ff       	call   c000b8b0 <double_to_fp>
c000d406:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000d409:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c000d40d:	83 c4 0c             	add    esp,0xc
c000d410:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000d413:	8d 04 90             	lea    eax,[eax+edx*4]
c000d416:	50                   	push   eax
c000d417:	50                   	push   eax
c000d418:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d41b:	e8 0b b6 01 00       	call   c0028a2b <__floatsidf>
c000d420:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d424:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d428:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d42c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d430:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d434:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d438:	e8 6f b2 01 00       	call   c00286ac <__divdf3>
c000d43d:	83 c4 18             	add    esp,0x18
c000d440:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d444:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d448:	52                   	push   edx
c000d449:	89 fa                	mov    edx,edi
c000d44b:	50                   	push   eax
c000d44c:	89 d8                	mov    eax,ebx
c000d44e:	8b 4c 24 4c          	mov    ecx,DWORD PTR [esp+0x4c]
c000d452:	e8 02 c7 ff ff       	call   c0009b59 <calc_output_stereo>
c000d457:	83 43 14 02          	add    DWORD PTR [ebx+0x14],0x2
c000d45b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d45f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d463:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d467:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d46b:	e8 3c b2 01 00       	call   c00286ac <__divdf3>
c000d470:	83 c4 10             	add    esp,0x10
c000d473:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d477:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d47b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d47f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d483:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d487:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d48b:	e8 bb a8 01 00       	call   c0027d4b <__adddf3>
c000d490:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000d494:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000d498:	83 c4 18             	add    esp,0x18
c000d49b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d49f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000d4a3:	e8 a8 b9 01 00       	call   c0028e50 <lrint>
c000d4a8:	83 ec 0c             	sub    esp,0xc
c000d4ab:	50                   	push   eax
c000d4ac:	e8 7a b5 01 00       	call   c0028a2b <__floatsidf>
c000d4b1:	83 c4 10             	add    esp,0x10
c000d4b4:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d4b8:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d4bc:	52                   	push   edx
c000d4bd:	50                   	push   eax
c000d4be:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4c2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d4c6:	e8 d1 ae 01 00       	call   c002839c <__subdf3>
c000d4cb:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d4cf:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d4d3:	83 c4 20             	add    esp,0x20
c000d4d6:	6a 00                	push   0x0
c000d4d8:	6a 00                	push   0x0
c000d4da:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4de:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4e2:	e8 b0 b7 01 00       	call   c0028c97 <__ltdf2>
c000d4e7:	83 c4 10             	add    esp,0x10
c000d4ea:	85 c0                	test   eax,eax
c000d4ec:	79 20                	jns    c000d50e <sinc_stereo_vari_process+0x66f>
c000d4ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d4f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fa:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d4fe:	e8 48 a8 01 00       	call   c0027d4b <__adddf3>
c000d503:	83 c4 10             	add    esp,0x10
c000d506:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d50a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d50e:	8b 43 34             	mov    eax,DWORD PTR [ebx+0x34]
c000d511:	83 ec 10             	sub    esp,0x10
c000d514:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d518:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d51b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d51f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d523:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d527:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d52b:	e8 6c ae 01 00       	call   c002839c <__subdf3>
c000d530:	83 c4 18             	add    esp,0x18
c000d533:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d537:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d53b:	52                   	push   edx
c000d53c:	50                   	push   eax
c000d53d:	e8 0e b9 01 00       	call   c0028e50 <lrint>
c000d542:	0f af f8             	imul   edi,eax
c000d545:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c000d549:	83 c4 10             	add    esp,0x10
c000d54c:	01 f8                	add    eax,edi
c000d54e:	99                   	cdq    
c000d54f:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d552:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d555:	e9 fd fb ff ff       	jmp    c000d157 <sinc_stereo_vari_process+0x2b8>
c000d55a:	83 c4 4c             	add    esp,0x4c
c000d55d:	89 d0                	mov    eax,edx
c000d55f:	5b                   	pop    ebx
c000d560:	5e                   	pop    esi
c000d561:	5f                   	pop    edi
c000d562:	5d                   	pop    ebp
c000d563:	c3                   	ret    

c000d564 <sinc_mono_vari_process>:
c000d564:	55                   	push   ebp
c000d565:	ba 05 00 00 00       	mov    edx,0x5
c000d56a:	57                   	push   edi
c000d56b:	56                   	push   esi
c000d56c:	53                   	push   ebx
c000d56d:	83 ec 4c             	sub    esp,0x4c
c000d570:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d574:	8b 74 24 64          	mov    esi,DWORD PTR [esp+0x64]
c000d578:	8b 58 1c             	mov    ebx,DWORD PTR [eax+0x1c]
c000d57b:	85 db                	test   ebx,ebx
c000d57d:	0f 84 c1 06 00 00    	je     c000dc44 <sinc_mono_vari_process+0x6e0>
c000d583:	8b 46 08             	mov    eax,DWORD PTR [esi+0x8]
c000d586:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d589:	0f af c7             	imul   eax,edi
c000d58c:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c000d58f:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c000d592:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c000d599:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c000d5a0:	0f af c7             	imul   eax,edi
c000d5a3:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c000d5a6:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d5aa:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d5ad:	8b 00                	mov    eax,DWORD PTR [eax]
c000d5af:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d5b3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d5b7:	68 00 00 70 3f       	push   0x3f700000
c000d5bc:	6a 00                	push   0x0
c000d5be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5c2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5c6:	e8 cc b6 01 00       	call   c0028c97 <__ltdf2>
c000d5cb:	83 c4 10             	add    esp,0x10
c000d5ce:	ba 16 00 00 00       	mov    edx,0x16
c000d5d3:	85 c0                	test   eax,eax
c000d5d5:	0f 88 69 06 00 00    	js     c000dc44 <sinc_mono_vari_process+0x6e0>
c000d5db:	68 00 00 70 40       	push   0x40700000
c000d5e0:	6a 00                	push   0x0
c000d5e2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5e6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d5ea:	e8 8a b6 01 00       	call   c0028c79 <__gtdf2>
c000d5ef:	83 c4 10             	add    esp,0x10
c000d5f2:	ba 16 00 00 00       	mov    edx,0x16
c000d5f7:	85 c0                	test   eax,eax
c000d5f9:	0f 8f 45 06 00 00    	jg     c000dc44 <sinc_mono_vari_process+0x6e0>
c000d5ff:	83 ec 0c             	sub    esp,0xc
c000d602:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000d605:	e8 21 b4 01 00       	call   c0028a2b <__floatsidf>
c000d60a:	83 c4 10             	add    esp,0x10
c000d60d:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d611:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d615:	68 00 00 00 40       	push   0x40000000
c000d61a:	6a 00                	push   0x0
c000d61c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d620:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d624:	e8 22 a7 01 00       	call   c0027d4b <__adddf3>
c000d629:	59                   	pop    ecx
c000d62a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000d62e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000d632:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000d635:	e8 f1 b3 01 00       	call   c0028a2b <__floatsidf>
c000d63a:	83 c4 10             	add    esp,0x10
c000d63d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d641:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d645:	52                   	push   edx
c000d646:	50                   	push   eax
c000d647:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d64f:	e8 58 b0 01 00       	call   c00286ac <__divdf3>
c000d654:	83 c4 10             	add    esp,0x10
c000d657:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d65b:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d65f:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c000d662:	8b 56 20             	mov    edx,DWORD PTR [esi+0x20]
c000d665:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d669:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d66d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d671:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d675:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d679:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d67d:	e8 f7 b5 01 00       	call   c0028c79 <__gtdf2>
c000d682:	83 c4 10             	add    esp,0x10
c000d685:	85 c0                	test   eax,eax
c000d687:	7e 2d                	jle    c000d6b6 <sinc_mono_vari_process+0x152>
c000d689:	68 00 00 f0 3f       	push   0x3ff00000
c000d68e:	6a 00                	push   0x0
c000d690:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d694:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d698:	e8 fa b5 01 00       	call   c0028c97 <__ltdf2>
c000d69d:	83 c4 10             	add    esp,0x10
c000d6a0:	85 c0                	test   eax,eax
c000d6a2:	79 4d                	jns    c000d6f1 <sinc_mono_vari_process+0x18d>
c000d6a4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d6a8:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d6ac:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d6b0:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d6b4:	eb 1b                	jmp    c000d6d1 <sinc_mono_vari_process+0x16d>
c000d6b6:	68 00 00 f0 3f       	push   0x3ff00000
c000d6bb:	6a 00                	push   0x0
c000d6bd:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6c1:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d6c5:	e8 cd b5 01 00       	call   c0028c97 <__ltdf2>
c000d6ca:	83 c4 10             	add    esp,0x10
c000d6cd:	85 c0                	test   eax,eax
c000d6cf:	79 20                	jns    c000d6f1 <sinc_mono_vari_process+0x18d>
c000d6d1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6d5:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d6d9:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6dd:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6e1:	e8 c6 af 01 00       	call   c00286ac <__divdf3>
c000d6e6:	83 c4 10             	add    esp,0x10
c000d6e9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d6ed:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d6f1:	50                   	push   eax
c000d6f2:	50                   	push   eax
c000d6f3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6f7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d6fb:	e8 50 b7 01 00       	call   c0028e50 <lrint>
c000d700:	40                   	inc    eax
c000d701:	0f af c7             	imul   eax,edi
c000d704:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d708:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d70c:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c000d70f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c000d712:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d716:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d71a:	58                   	pop    eax
c000d71b:	5a                   	pop    edx
c000d71c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d720:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d724:	e8 27 b7 01 00       	call   c0028e50 <lrint>
c000d729:	83 ec 0c             	sub    esp,0xc
c000d72c:	50                   	push   eax
c000d72d:	e8 f9 b2 01 00       	call   c0028a2b <__floatsidf>
c000d732:	83 c4 10             	add    esp,0x10
c000d735:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000d739:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000d73d:	52                   	push   edx
c000d73e:	50                   	push   eax
c000d73f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d743:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d747:	e8 50 ac 01 00       	call   c002839c <__subdf3>
c000d74c:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d750:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d754:	83 c4 20             	add    esp,0x20
c000d757:	6a 00                	push   0x0
c000d759:	6a 00                	push   0x0
c000d75b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d75f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d763:	e8 2f b5 01 00       	call   c0028c97 <__ltdf2>
c000d768:	83 c4 10             	add    esp,0x10
c000d76b:	85 c0                	test   eax,eax
c000d76d:	79 1f                	jns    c000d78e <sinc_mono_vari_process+0x22a>
c000d76f:	68 00 00 f0 3f       	push   0x3ff00000
c000d774:	6a 00                	push   0x0
c000d776:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77a:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000d77e:	e8 c8 a5 01 00       	call   c0027d4b <__adddf3>
c000d783:	83 c4 10             	add    esp,0x10
c000d786:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000d78a:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000d78e:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000d791:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000d794:	83 ec 10             	sub    esp,0x10
c000d797:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d79b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000d79f:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7a3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7a7:	e8 f0 ab 01 00       	call   c002839c <__subdf3>
c000d7ac:	83 c4 18             	add    esp,0x18
c000d7af:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000d7b3:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000d7b7:	52                   	push   edx
c000d7b8:	50                   	push   eax
c000d7b9:	e8 92 b6 01 00       	call   c0028e50 <lrint>
c000d7be:	0f af f8             	imul   edi,eax
c000d7c1:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000d7c4:	31 ff                	xor    edi,edi
c000d7c6:	bd 00 00 f0 3f       	mov    ebp,0x3ff00000
c000d7cb:	99                   	cdq    
c000d7cc:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000d7cf:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000d7d2:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7d6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000d7da:	55                   	push   ebp
c000d7db:	57                   	push   edi
c000d7dc:	e8 cb ae 01 00       	call   c00286ac <__divdf3>
c000d7e1:	83 c4 10             	add    esp,0x10
c000d7e4:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d7e8:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d7ec:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000d7f1:	68 23 42 92 0c       	push   0xc924223
c000d7f6:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7fa:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d7fe:	e8 48 a5 01 00       	call   c0027d4b <__adddf3>
c000d803:	89 44 24 58          	mov    DWORD PTR [esp+0x58],eax
c000d807:	89 54 24 5c          	mov    DWORD PTR [esp+0x5c],edx
c000d80b:	83 c4 20             	add    esp,0x20
c000d80e:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c000d812:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c000d816:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000d819:	39 43 14             	cmp    DWORD PTR [ebx+0x14],eax
c000d81c:	7d 54                	jge    c000d872 <sinc_mono_vari_process+0x30e>
c000d81e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d821:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d824:	01 c8                	add    eax,ecx
c000d826:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d829:	99                   	cdq    
c000d82a:	f7 f9                	idiv   ecx
c000d82c:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d830:	7d 0c                	jge    c000d83e <sinc_mono_vari_process+0x2da>
c000d832:	8b 7b 3c             	mov    edi,DWORD PTR [ebx+0x3c]
c000d835:	85 ff                	test   edi,edi
c000d837:	79 73                	jns    c000d8ac <sinc_mono_vari_process+0x348>
c000d839:	e9 ee 00 00 00       	jmp    c000d92c <sinc_mono_vari_process+0x3c8>
c000d83e:	50                   	push   eax
c000d83f:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000d843:	56                   	push   esi
c000d844:	53                   	push   ebx
c000d845:	e8 8d e0 ff ff       	call   c000b8d7 <prepare_data>
c000d84a:	89 c2                	mov    edx,eax
c000d84c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c000d850:	83 c4 10             	add    esp,0x10
c000d853:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c000d856:	85 d2                	test   edx,edx
c000d858:	0f 85 e6 03 00 00    	jne    c000dc44 <sinc_mono_vari_process+0x6e0>
c000d85e:	8b 4b 40             	mov    ecx,DWORD PTR [ebx+0x40]
c000d861:	8b 43 38             	mov    eax,DWORD PTR [ebx+0x38]
c000d864:	01 c8                	add    eax,ecx
c000d866:	2b 43 34             	sub    eax,DWORD PTR [ebx+0x34]
c000d869:	99                   	cdq    
c000d86a:	f7 f9                	idiv   ecx
c000d86c:	39 54 24 24          	cmp    DWORD PTR [esp+0x24],edx
c000d870:	7c c0                	jl     c000d832 <sinc_mono_vari_process+0x2ce>
c000d872:	8b 4c 24 60          	mov    ecx,DWORD PTR [esp+0x60]
c000d876:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000d87a:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000d87e:	89 41 08             	mov    DWORD PTR [ecx+0x8],eax
c000d881:	89 51 0c             	mov    DWORD PTR [ecx+0xc],edx
c000d884:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000d888:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000d88c:	89 01                	mov    DWORD PTR [ecx],eax
c000d88e:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c000d891:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c000d894:	99                   	cdq    
c000d895:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d898:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000d89b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000d89e:	99                   	cdq    
c000d89f:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000d8a2:	31 d2                	xor    edx,edx
c000d8a4:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000d8a7:	e9 98 03 00 00       	jmp    c000dc44 <sinc_mono_vari_process+0x6e0>
c000d8ac:	83 ec 0c             	sub    esp,0xc
c000d8af:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c000d8b2:	e8 74 b1 01 00       	call   c0028a2b <__floatsidf>
c000d8b7:	83 c4 10             	add    esp,0x10
c000d8ba:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8be:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8c2:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8c6:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000d8ca:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ce:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8d2:	e8 74 a4 01 00       	call   c0027d4b <__adddf3>
c000d8d7:	83 c4 10             	add    esp,0x10
c000d8da:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000d8de:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000d8e2:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8e6:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000d8ea:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8ee:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d8f2:	e8 54 a4 01 00       	call   c0027d4b <__adddf3>
c000d8f7:	89 3c 24             	mov    DWORD PTR [esp],edi
c000d8fa:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d8fe:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d902:	e8 24 b1 01 00       	call   c0028a2b <__floatsidf>
c000d907:	83 c4 10             	add    esp,0x10
c000d90a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d90e:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d912:	52                   	push   edx
c000d913:	50                   	push   eax
c000d914:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d918:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d91c:	e8 58 b3 01 00       	call   c0028c79 <__gtdf2>
c000d921:	83 c4 10             	add    esp,0x10
c000d924:	85 c0                	test   eax,eax
c000d926:	0f 8f 46 ff ff ff    	jg     c000d872 <sinc_mono_vari_process+0x30e>
c000d92c:	83 7b 10 00          	cmp    DWORD PTR [ebx+0x10],0x0
c000d930:	0f 8e f5 00 00 00    	jle    c000da2b <sinc_mono_vari_process+0x4c7>
c000d936:	83 ec 10             	sub    esp,0x10
c000d939:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d93c:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d93f:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c000d943:	ff 70 04             	push   DWORD PTR [eax+0x4]
c000d946:	ff 30                	push   DWORD PTR [eax]
c000d948:	e8 4f aa 01 00       	call   c002839c <__subdf3>
c000d94d:	83 c4 18             	add    esp,0x18
c000d950:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d954:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d958:	52                   	push   edx
c000d959:	50                   	push   eax
c000d95a:	e8 d1 b4 01 00       	call   c0028e30 <fabs>
c000d95f:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000d963:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000d967:	83 c4 10             	add    esp,0x10
c000d96a:	68 df 7c db 3d       	push   0x3ddb7cdf
c000d96f:	68 bb bd d7 d9       	push   0xd9d7bdbb
c000d974:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d978:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d97c:	e8 f8 b2 01 00       	call   c0028c79 <__gtdf2>
c000d981:	83 c4 10             	add    esp,0x10
c000d984:	85 c0                	test   eax,eax
c000d986:	0f 8e 9f 00 00 00    	jle    c000da2b <sinc_mono_vari_process+0x4c7>
c000d98c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c000d990:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c000d993:	8b 00                	mov    eax,DWORD PTR [eax]
c000d995:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000d999:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000d99d:	52                   	push   edx
c000d99e:	50                   	push   eax
c000d99f:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000d9a2:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000d9a5:	e8 f2 a9 01 00       	call   c002839c <__subdf3>
c000d9aa:	5f                   	pop    edi
c000d9ab:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9af:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9b3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000d9b6:	e8 70 b0 01 00       	call   c0028a2b <__floatsidf>
c000d9bb:	83 c4 10             	add    esp,0x10
c000d9be:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9c2:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9c6:	52                   	push   edx
c000d9c7:	50                   	push   eax
c000d9c8:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9cc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9d0:	e8 f3 a9 01 00       	call   c00283c8 <__muldf3>
c000d9d5:	5d                   	pop    ebp
c000d9d6:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c000d9da:	89 54 24 38          	mov    DWORD PTR [esp+0x38],edx
c000d9de:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000d9e1:	e8 45 b0 01 00       	call   c0028a2b <__floatsidf>
c000d9e6:	83 c4 10             	add    esp,0x10
c000d9e9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000d9ed:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000d9f1:	52                   	push   edx
c000d9f2:	50                   	push   eax
c000d9f3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9f7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000d9fb:	e8 ac ac 01 00       	call   c00286ac <__divdf3>
c000da00:	83 c4 10             	add    esp,0x10
c000da03:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da07:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da0b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da0f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000da13:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da17:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000da1b:	e8 2b a3 01 00       	call   c0027d4b <__adddf3>
c000da20:	83 c4 10             	add    esp,0x10
c000da23:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000da27:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000da2b:	83 ec 0c             	sub    esp,0xc
c000da2e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000da31:	e8 f5 af 01 00       	call   c0028a2b <__floatsidf>
c000da36:	83 c4 10             	add    esp,0x10
c000da39:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da3d:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da41:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da45:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da49:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da4d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000da51:	e8 41 b2 01 00       	call   c0028c97 <__ltdf2>
c000da56:	83 c4 10             	add    esp,0x10
c000da59:	85 c0                	test   eax,eax
c000da5b:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c000da5f:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c000da63:	89 7c 24 28          	mov    DWORD PTR [esp+0x28],edi
c000da67:	89 6c 24 2c          	mov    DWORD PTR [esp+0x2c],ebp
c000da6b:	78 10                	js     c000da7d <sinc_mono_vari_process+0x519>
c000da6d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000da71:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000da75:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000da79:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000da7d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da81:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000da85:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da89:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000da8d:	e8 36 a9 01 00       	call   c00283c8 <__muldf3>
c000da92:	59                   	pop    ecx
c000da93:	5f                   	pop    edi
c000da94:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000da98:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000da9c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daa0:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000daa4:	e8 07 de ff ff       	call   c000b8b0 <double_to_fp>
c000daa9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000daad:	89 c7                	mov    edi,eax
c000daaf:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c000dab3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dab7:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000dabb:	e8 08 a9 01 00       	call   c00283c8 <__muldf3>
c000dac0:	83 c4 18             	add    esp,0x18
c000dac3:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000dac7:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000dacb:	52                   	push   edx
c000dacc:	50                   	push   eax
c000dacd:	e8 de dd ff ff       	call   c000b8b0 <double_to_fp>
c000dad2:	83 ec 0c             	sub    esp,0xc
c000dad5:	89 c5                	mov    ebp,eax
c000dad7:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c000dada:	e8 4c af 01 00       	call   c0028a2b <__floatsidf>
c000dadf:	83 c4 10             	add    esp,0x10
c000dae2:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000dae6:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000daea:	52                   	push   edx
c000daeb:	50                   	push   eax
c000daec:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000daf0:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000daf4:	e8 b3 ab 01 00       	call   c00286ac <__divdf3>
c000daf9:	83 c4 10             	add    esp,0x10
c000dafc:	89 e9                	mov    ecx,ebp
c000dafe:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db02:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db06:	89 d8                	mov    eax,ebx
c000db08:	89 fa                	mov    edx,edi
c000db0a:	e8 ee bd ff ff       	call   c00098fd <calc_output_single>
c000db0f:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000db12:	8b 7e 04             	mov    edi,DWORD PTR [esi+0x4]
c000db15:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db19:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db1d:	52                   	push   edx
c000db1e:	50                   	push   eax
c000db1f:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db23:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c000db27:	e8 9c a8 01 00       	call   c00283c8 <__muldf3>
c000db2c:	59                   	pop    ecx
c000db2d:	59                   	pop    ecx
c000db2e:	89 54 24 44          	mov    DWORD PTR [esp+0x44],edx
c000db32:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c000db36:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db3a:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db3e:	e8 58 b1 01 00       	call   c0028c9b <__truncdfsf2>
c000db43:	83 c4 10             	add    esp,0x10
c000db46:	89 04 af             	mov    DWORD PTR [edi+ebp*4],eax
c000db49:	ff 43 14             	inc    DWORD PTR [ebx+0x14]
c000db4c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db50:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000db54:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db58:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db5c:	e8 4b ab 01 00       	call   c00286ac <__divdf3>
c000db61:	83 c4 10             	add    esp,0x10
c000db64:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c000db68:	89 54 24 3c          	mov    DWORD PTR [esp+0x3c],edx
c000db6c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db70:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000db74:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db78:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000db7c:	e8 ca a1 01 00       	call   c0027d4b <__adddf3>
c000db81:	89 54 24 4c          	mov    DWORD PTR [esp+0x4c],edx
c000db85:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c000db89:	83 c4 18             	add    esp,0x18
c000db8c:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db90:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000db94:	e8 b7 b2 01 00       	call   c0028e50 <lrint>
c000db99:	83 ec 0c             	sub    esp,0xc
c000db9c:	50                   	push   eax
c000db9d:	e8 89 ae 01 00       	call   c0028a2b <__floatsidf>
c000dba2:	83 c4 10             	add    esp,0x10
c000dba5:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000dba9:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dbad:	52                   	push   edx
c000dbae:	50                   	push   eax
c000dbaf:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbb3:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dbb7:	e8 e0 a7 01 00       	call   c002839c <__subdf3>
c000dbbc:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000dbc0:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000dbc4:	83 c4 20             	add    esp,0x20
c000dbc7:	6a 00                	push   0x0
c000dbc9:	6a 00                	push   0x0
c000dbcb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbcf:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbd3:	e8 bf b0 01 00       	call   c0028c97 <__ltdf2>
c000dbd8:	83 c4 10             	add    esp,0x10
c000dbdb:	85 c0                	test   eax,eax
c000dbdd:	79 20                	jns    c000dbff <sinc_mono_vari_process+0x69b>
c000dbdf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dbe7:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbeb:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dbef:	e8 57 a1 01 00       	call   c0027d4b <__adddf3>
c000dbf4:	83 c4 10             	add    esp,0x10
c000dbf7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dbfb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dbff:	8b 6b 34             	mov    ebp,DWORD PTR [ebx+0x34]
c000dc02:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c000dc05:	83 ec 10             	sub    esp,0x10
c000dc08:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dc10:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc14:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c000dc18:	e8 7f a7 01 00       	call   c002839c <__subdf3>
c000dc1d:	83 c4 18             	add    esp,0x18
c000dc20:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c000dc24:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c000dc28:	52                   	push   edx
c000dc29:	50                   	push   eax
c000dc2a:	e8 21 b2 01 00       	call   c0028e50 <lrint>
c000dc2f:	83 c4 10             	add    esp,0x10
c000dc32:	0f af f8             	imul   edi,eax
c000dc35:	8d 04 2f             	lea    eax,[edi+ebp*1]
c000dc38:	99                   	cdq    
c000dc39:	f7 7b 40             	idiv   DWORD PTR [ebx+0x40]
c000dc3c:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c000dc3f:	e9 d2 fb ff ff       	jmp    c000d816 <sinc_mono_vari_process+0x2b2>
c000dc44:	83 c4 4c             	add    esp,0x4c
c000dc47:	89 d0                	mov    eax,edx
c000dc49:	5b                   	pop    ebx
c000dc4a:	5e                   	pop    esi
c000dc4b:	5f                   	pop    edi
c000dc4c:	5d                   	pop    ebp
c000dc4d:	c3                   	ret    

c000dc4e <sinc_get_name>:
c000dc4e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc52:	31 c0                	xor    eax,eax
c000dc54:	83 fa 02             	cmp    edx,0x2
c000dc57:	77 07                	ja     c000dc60 <sinc_get_name+0x12>
c000dc59:	8b 04 95 24 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd58dc]
c000dc60:	c3                   	ret    

c000dc61 <sinc_get_description>:
c000dc61:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000dc65:	31 c0                	xor    eax,eax
c000dc67:	83 fa 02             	cmp    edx,0x2
c000dc6a:	77 07                	ja     c000dc73 <sinc_get_description+0x12>
c000dc6c:	8b 04 95 18 a7 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd58e8]
c000dc73:	c3                   	ret    

c000dc74 <sinc_set_converter>:
c000dc74:	53                   	push   ebx
c000dc75:	81 ec 58 08 00 00    	sub    esp,0x858
c000dc7b:	8b 9c 24 60 08 00 00 	mov    ebx,DWORD PTR [esp+0x860]
c000dc82:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000dc85:	85 c0                	test   eax,eax
c000dc87:	74 13                	je     c000dc9c <sinc_set_converter+0x28>
c000dc89:	83 ec 0c             	sub    esp,0xc
c000dc8c:	50                   	push   eax
c000dc8d:	e8 26 1c 00 00       	call   c000f8b8 <free>
c000dc92:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000dc99:	83 c4 10             	add    esp,0x10
c000dc9c:	50                   	push   eax
c000dc9d:	68 44 08 00 00       	push   0x844
c000dca2:	6a 00                	push   0x0
c000dca4:	8d 44 24 18          	lea    eax,[esp+0x18]
c000dca8:	50                   	push   eax
c000dca9:	e8 be 2a ff ff       	call   c000076c <memset>
c000dcae:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c000dcb1:	83 c4 10             	add    esp,0x10
c000dcb4:	b8 0b 00 00 00       	mov    eax,0xb
c000dcb9:	81 fa 80 00 00 00    	cmp    edx,0x80
c000dcbf:	7f 6e                	jg     c000dd2f <sinc_set_converter+0xbb>
c000dcc1:	83 fa 01             	cmp    edx,0x1
c000dcc4:	75 10                	jne    c000dcd6 <sinc_set_converter+0x62>
c000dcc6:	c7 43 24 64 d5 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000d564
c000dccd:	c7 43 20 64 d5 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000d564
c000dcd4:	eb 4d                	jmp    c000dd23 <sinc_set_converter+0xaf>
c000dcd6:	83 fa 02             	cmp    edx,0x2
c000dcd9:	75 10                	jne    c000dceb <sinc_set_converter+0x77>
c000dcdb:	c7 43 24 9f ce 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ce9f
c000dce2:	c7 43 20 9f ce 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ce9f
c000dce9:	eb 38                	jmp    c000dd23 <sinc_set_converter+0xaf>
c000dceb:	83 fa 04             	cmp    edx,0x4
c000dcee:	75 10                	jne    c000dd00 <sinc_set_converter+0x8c>
c000dcf0:	c7 43 24 da c7 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c7da
c000dcf7:	c7 43 20 da c7 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c7da
c000dcfe:	eb 23                	jmp    c000dd23 <sinc_set_converter+0xaf>
c000dd00:	83 fa 06             	cmp    edx,0x6
c000dd03:	75 10                	jne    c000dd15 <sinc_set_converter+0xa1>
c000dd05:	c7 43 24 15 c1 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000c115
c000dd0c:	c7 43 20 15 c1 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000c115
c000dd13:	eb 0e                	jmp    c000dd23 <sinc_set_converter+0xaf>
c000dd15:	c7 43 24 51 ba 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000ba51
c000dd1c:	c7 43 20 51 ba 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000ba51
c000dd23:	c7 43 28 04 ad 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000ad04
c000dd2a:	b8 0a 00 00 00       	mov    eax,0xa
c000dd2f:	81 c4 58 08 00 00    	add    esp,0x858
c000dd35:	5b                   	pop    ebx
c000dd36:	c3                   	ret    

c000dd37 <zoh_vari_process>:
c000dd37:	55                   	push   ebp
c000dd38:	31 d2                	xor    edx,edx
c000dd3a:	57                   	push   edi
c000dd3b:	56                   	push   esi
c000dd3c:	53                   	push   ebx
c000dd3d:	83 ec 3c             	sub    esp,0x3c
c000dd40:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c000dd44:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c000dd48:	83 7e 08 00          	cmp    DWORD PTR [esi+0x8],0x0
c000dd4c:	0f 8e 80 06 00 00    	jle    c000e3d2 <zoh_vari_process+0x69b>
c000dd52:	8b 5f 1c             	mov    ebx,DWORD PTR [edi+0x1c]
c000dd55:	ba 05 00 00 00       	mov    edx,0x5
c000dd5a:	85 db                	test   ebx,ebx
c000dd5c:	0f 84 70 06 00 00    	je     c000e3d2 <zoh_vari_process+0x69b>
c000dd62:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000dd65:	83 7b 08 00          	cmp    DWORD PTR [ebx+0x8],0x0
c000dd69:	74 19                	je     c000dd84 <zoh_vari_process+0x4d>
c000dd6b:	31 d2                	xor    edx,edx
c000dd6d:	39 c2                	cmp    edx,eax
c000dd6f:	7d 0c                	jge    c000dd7d <zoh_vari_process+0x46>
c000dd71:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000dd73:	8b 0c 91             	mov    ecx,DWORD PTR [ecx+edx*4]
c000dd76:	89 4c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ecx
c000dd7a:	42                   	inc    edx
c000dd7b:	eb f0                	jmp    c000dd6d <zoh_vari_process+0x36>
c000dd7d:	c7 43 08 00 00 00 00 	mov    DWORD PTR [ebx+0x8],0x0
c000dd84:	8b 56 08             	mov    edx,DWORD PTR [esi+0x8]
c000dd87:	0f af d0             	imul   edx,eax
c000dd8a:	89 53 0c             	mov    DWORD PTR [ebx+0xc],edx
c000dd8d:	0f af 46 0c          	imul   eax,DWORD PTR [esi+0xc]
c000dd91:	c7 43 18 00 00 00 00 	mov    DWORD PTR [ebx+0x18],0x0
c000dd98:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c000dd9b:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c000dda2:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000dda5:	8b 07                	mov    eax,DWORD PTR [edi]
c000dda7:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000ddab:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000ddaf:	68 00 00 70 3f       	push   0x3f700000
c000ddb4:	6a 00                	push   0x0
c000ddb6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddbe:	e8 d4 ae 01 00       	call   c0028c97 <__ltdf2>
c000ddc3:	83 c4 10             	add    esp,0x10
c000ddc6:	ba 16 00 00 00       	mov    edx,0x16
c000ddcb:	85 c0                	test   eax,eax
c000ddcd:	0f 88 ff 05 00 00    	js     c000e3d2 <zoh_vari_process+0x69b>
c000ddd3:	68 00 00 70 40       	push   0x40700000
c000ddd8:	6a 00                	push   0x0
c000ddda:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000ddde:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000dde2:	e8 92 ae 01 00       	call   c0028c79 <__gtdf2>
c000dde7:	83 c4 10             	add    esp,0x10
c000ddea:	ba 16 00 00 00       	mov    edx,0x16
c000ddef:	85 c0                	test   eax,eax
c000ddf1:	0f 8f db 05 00 00    	jg     c000e3d2 <zoh_vari_process+0x69b>
c000ddf7:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c000ddfa:	8b 57 0c             	mov    edx,DWORD PTR [edi+0xc]
c000ddfd:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000de01:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000de05:	68 00 00 f0 3f       	push   0x3ff00000
c000de0a:	6a 00                	push   0x0
c000de0c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de10:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000de14:	e8 7e ae 01 00       	call   c0028c97 <__ltdf2>
c000de19:	83 c4 10             	add    esp,0x10
c000de1c:	85 c0                	test   eax,eax
c000de1e:	0f 89 da 01 00 00    	jns    c000dffe <zoh_vari_process+0x2c7>
c000de24:	8b 6b 14             	mov    ebp,DWORD PTR [ebx+0x14]
c000de27:	39 6b 18             	cmp    DWORD PTR [ebx+0x18],ebp
c000de2a:	0f 8d ce 01 00 00    	jge    c000dffe <zoh_vari_process+0x2c7>
c000de30:	83 ec 0c             	sub    esp,0xc
c000de33:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000de36:	e8 f0 ab 01 00       	call   c0028a2b <__floatsidf>
c000de3b:	83 c4 10             	add    esp,0x10
c000de3e:	89 04 24             	mov    DWORD PTR [esp],eax
c000de41:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000de45:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de49:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000de4d:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de51:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de55:	e8 6e a5 01 00       	call   c00283c8 <__muldf3>
c000de5a:	59                   	pop    ecx
c000de5b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de5f:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de63:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c000de66:	e8 c0 ab 01 00       	call   c0028a2b <__floatsidf>
c000de6b:	83 c4 10             	add    esp,0x10
c000de6e:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de72:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000de76:	52                   	push   edx
c000de77:	50                   	push   eax
c000de78:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de7c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000de80:	e8 c6 9e 01 00       	call   c0027d4b <__adddf3>
c000de85:	59                   	pop    ecx
c000de86:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000de8a:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c000de8e:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c000de91:	e8 95 ab 01 00       	call   c0028a2b <__floatsidf>
c000de96:	83 c4 10             	add    esp,0x10
c000de99:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000de9d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000dea1:	52                   	push   edx
c000dea2:	50                   	push   eax
c000dea3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dea7:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000deab:	e8 e5 ad 01 00       	call   c0028c95 <__gedf2>
c000deb0:	83 c4 10             	add    esp,0x10
c000deb3:	85 c0                	test   eax,eax
c000deb5:	0f 89 43 01 00 00    	jns    c000dffe <zoh_vari_process+0x2c7>
c000debb:	85 ed                	test   ebp,ebp
c000debd:	0f 8e ec 00 00 00    	jle    c000dfaf <zoh_vari_process+0x278>
c000dec3:	83 ec 10             	sub    esp,0x10
c000dec6:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000dec9:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000decc:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000decf:	ff 37                	push   DWORD PTR [edi]
c000ded1:	e8 c6 a4 01 00       	call   c002839c <__subdf3>
c000ded6:	83 c4 18             	add    esp,0x18
c000ded9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dedd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dee1:	52                   	push   edx
c000dee2:	50                   	push   eax
c000dee3:	e8 48 af 01 00       	call   c0028e30 <fabs>
c000dee8:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000deec:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000def0:	83 c4 10             	add    esp,0x10
c000def3:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000def8:	68 23 42 92 0c       	push   0xc924223
c000defd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df01:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000df05:	e8 6f ad 01 00       	call   c0028c79 <__gtdf2>
c000df0a:	83 c4 10             	add    esp,0x10
c000df0d:	85 c0                	test   eax,eax
c000df0f:	0f 8e 9a 00 00 00    	jle    c000dfaf <zoh_vari_process+0x278>
c000df15:	8b 07                	mov    eax,DWORD PTR [edi]
c000df17:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000df1a:	89 04 24             	mov    DWORD PTR [esp],eax
c000df1d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000df21:	52                   	push   edx
c000df22:	50                   	push   eax
c000df23:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000df26:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000df29:	e8 6e a4 01 00       	call   c002839c <__subdf3>
c000df2e:	59                   	pop    ecx
c000df2f:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df33:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df37:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000df3a:	e8 ec aa 01 00       	call   c0028a2b <__floatsidf>
c000df3f:	83 c4 10             	add    esp,0x10
c000df42:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df46:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df4a:	52                   	push   edx
c000df4b:	50                   	push   eax
c000df4c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df50:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df54:	e8 6f a4 01 00       	call   c00283c8 <__muldf3>
c000df59:	5d                   	pop    ebp
c000df5a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c000df5e:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c000df62:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000df65:	e8 c1 aa 01 00       	call   c0028a2b <__floatsidf>
c000df6a:	83 c4 10             	add    esp,0x10
c000df6d:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000df71:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000df75:	52                   	push   edx
c000df76:	50                   	push   eax
c000df77:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df7b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df7f:	e8 28 a7 01 00       	call   c00286ac <__divdf3>
c000df84:	83 c4 10             	add    esp,0x10
c000df87:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000df8b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000df8f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df93:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000df97:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000df9f:	e8 a7 9d 01 00       	call   c0027d4b <__adddf3>
c000dfa4:	83 c4 10             	add    esp,0x10
c000dfa7:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000dfab:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000dfaf:	31 c0                	xor    eax,eax
c000dfb1:	39 43 04             	cmp    DWORD PTR [ebx+0x4],eax
c000dfb4:	7e 13                	jle    c000dfc9 <zoh_vari_process+0x292>
c000dfb6:	8b 6c 83 1c          	mov    ebp,DWORD PTR [ebx+eax*4+0x1c]
c000dfba:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000dfbd:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c000dfc0:	40                   	inc    eax
c000dfc1:	89 2c 8a             	mov    DWORD PTR [edx+ecx*4],ebp
c000dfc4:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000dfc7:	eb e8                	jmp    c000dfb1 <zoh_vari_process+0x27a>
c000dfc9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfcd:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000dfd1:	68 00 00 f0 3f       	push   0x3ff00000
c000dfd6:	6a 00                	push   0x0
c000dfd8:	e8 cf a6 01 00       	call   c00286ac <__divdf3>
c000dfdd:	83 c4 10             	add    esp,0x10
c000dfe0:	89 04 24             	mov    DWORD PTR [esp],eax
c000dfe3:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000dfe7:	52                   	push   edx
c000dfe8:	50                   	push   eax
c000dfe9:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dfed:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000dff1:	e8 55 9d 01 00       	call   c0027d4b <__adddf3>
c000dff6:	83 c4 10             	add    esp,0x10
c000dff9:	e9 ff fd ff ff       	jmp    c000ddfd <zoh_vari_process+0xc6>
c000dffe:	55                   	push   ebp
c000dfff:	55                   	push   ebp
c000e000:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e004:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e008:	e8 43 ae 01 00       	call   c0028e50 <lrint>
c000e00d:	83 ec 0c             	sub    esp,0xc
c000e010:	50                   	push   eax
c000e011:	e8 15 aa 01 00       	call   c0028a2b <__floatsidf>
c000e016:	83 c4 10             	add    esp,0x10
c000e019:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e01d:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e021:	52                   	push   edx
c000e022:	50                   	push   eax
c000e023:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e027:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e02b:	e8 6c a3 01 00       	call   c002839c <__subdf3>
c000e030:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e034:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e038:	83 c4 20             	add    esp,0x20
c000e03b:	6a 00                	push   0x0
c000e03d:	6a 00                	push   0x0
c000e03f:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e043:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e047:	e8 4b ac 01 00       	call   c0028c97 <__ltdf2>
c000e04c:	83 c4 10             	add    esp,0x10
c000e04f:	85 c0                	test   eax,eax
c000e051:	79 1e                	jns    c000e071 <zoh_vari_process+0x33a>
c000e053:	68 00 00 f0 3f       	push   0x3ff00000
c000e058:	6a 00                	push   0x0
c000e05a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e05e:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e062:	e8 e4 9c 01 00       	call   c0027d4b <__adddf3>
c000e067:	83 c4 10             	add    esp,0x10
c000e06a:	89 04 24             	mov    DWORD PTR [esp],eax
c000e06d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e071:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e074:	83 ec 10             	sub    esp,0x10
c000e077:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e07b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e07f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e083:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e087:	e8 10 a3 01 00       	call   c002839c <__subdf3>
c000e08c:	83 c4 18             	add    esp,0x18
c000e08f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e093:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e097:	52                   	push   edx
c000e098:	50                   	push   eax
c000e099:	e8 b2 ad 01 00       	call   c0028e50 <lrint>
c000e09e:	83 c4 10             	add    esp,0x10
c000e0a1:	0f af e8             	imul   ebp,eax
c000e0a4:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c000e0a7:	01 6b 10             	add    DWORD PTR [ebx+0x10],ebp
c000e0aa:	89 4c 24 2c          	mov    DWORD PTR [esp+0x2c],ecx
c000e0ae:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e0b1:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c000e0b4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e0b8:	39 4b 18             	cmp    DWORD PTR [ebx+0x18],ecx
c000e0bb:	0f 8d 7a 02 00 00    	jge    c000e33b <zoh_vari_process+0x604>
c000e0c1:	83 ec 0c             	sub    esp,0xc
c000e0c4:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c000e0c7:	e8 5f a9 01 00       	call   c0028a2b <__floatsidf>
c000e0cc:	83 c4 10             	add    esp,0x10
c000e0cf:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e0d3:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e0d7:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0db:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e0df:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0e3:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e0e7:	e8 dc a2 01 00       	call   c00283c8 <__muldf3>
c000e0ec:	59                   	pop    ecx
c000e0ed:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c000e0f1:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c000e0f5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e0f9:	e8 2d a9 01 00       	call   c0028a2b <__floatsidf>
c000e0fe:	83 c4 10             	add    esp,0x10
c000e101:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e105:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e109:	52                   	push   edx
c000e10a:	50                   	push   eax
c000e10b:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e10f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e113:	e8 33 9c 01 00       	call   c0027d4b <__adddf3>
c000e118:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000e11b:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c000e11f:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c000e123:	e8 03 a9 01 00       	call   c0028a2b <__floatsidf>
c000e128:	83 c4 10             	add    esp,0x10
c000e12b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e12f:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e133:	52                   	push   edx
c000e134:	50                   	push   eax
c000e135:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e139:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c000e13d:	e8 57 ab 01 00       	call   c0028c99 <__ledf2>
c000e142:	83 c4 10             	add    esp,0x10
c000e145:	85 c0                	test   eax,eax
c000e147:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c000e14b:	0f 8f ea 01 00 00    	jg     c000e33b <zoh_vari_process+0x604>
c000e151:	85 c9                	test   ecx,ecx
c000e153:	0f 8e ed 00 00 00    	jle    c000e246 <zoh_vari_process+0x50f>
c000e159:	83 ec 10             	sub    esp,0x10
c000e15c:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e15f:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e162:	ff 77 04             	push   DWORD PTR [edi+0x4]
c000e165:	ff 37                	push   DWORD PTR [edi]
c000e167:	e8 30 a2 01 00       	call   c002839c <__subdf3>
c000e16c:	83 c4 18             	add    esp,0x18
c000e16f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e173:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e177:	52                   	push   edx
c000e178:	50                   	push   eax
c000e179:	e8 b2 ac 01 00       	call   c0028e30 <fabs>
c000e17e:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e182:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e186:	83 c4 10             	add    esp,0x10
c000e189:	68 a1 9c c7 3b       	push   0x3bc79ca1
c000e18e:	68 23 42 92 0c       	push   0xc924223
c000e193:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e197:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e19b:	e8 d9 aa 01 00       	call   c0028c79 <__gtdf2>
c000e1a0:	83 c4 10             	add    esp,0x10
c000e1a3:	85 c0                	test   eax,eax
c000e1a5:	0f 8e 9b 00 00 00    	jle    c000e246 <zoh_vari_process+0x50f>
c000e1ab:	8b 07                	mov    eax,DWORD PTR [edi]
c000e1ad:	8b 57 04             	mov    edx,DWORD PTR [edi+0x4]
c000e1b0:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e1b4:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e1b8:	52                   	push   edx
c000e1b9:	50                   	push   eax
c000e1ba:	ff 76 20             	push   DWORD PTR [esi+0x20]
c000e1bd:	ff 76 1c             	push   DWORD PTR [esi+0x1c]
c000e1c0:	e8 d7 a1 01 00       	call   c002839c <__subdf3>
c000e1c5:	5d                   	pop    ebp
c000e1c6:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1ca:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1ce:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c000e1d1:	e8 55 a8 01 00       	call   c0028a2b <__floatsidf>
c000e1d6:	83 c4 10             	add    esp,0x10
c000e1d9:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e1dd:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e1e1:	52                   	push   edx
c000e1e2:	50                   	push   eax
c000e1e3:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1e7:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e1eb:	e8 d8 a1 01 00       	call   c00283c8 <__muldf3>
c000e1f0:	59                   	pop    ecx
c000e1f1:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000e1f5:	89 54 24 20          	mov    DWORD PTR [esp+0x20],edx
c000e1f9:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c000e1fc:	e8 2a a8 01 00       	call   c0028a2b <__floatsidf>
c000e201:	83 c4 10             	add    esp,0x10
c000e204:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e208:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e20c:	52                   	push   edx
c000e20d:	50                   	push   eax
c000e20e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e212:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e216:	e8 91 a4 01 00       	call   c00286ac <__divdf3>
c000e21b:	83 c4 10             	add    esp,0x10
c000e21e:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e222:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e226:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e22a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e22e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e232:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e236:	e8 10 9b 01 00       	call   c0027d4b <__adddf3>
c000e23b:	83 c4 10             	add    esp,0x10
c000e23e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c000e242:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000e246:	31 d2                	xor    edx,edx
c000e248:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c000e24b:	39 d0                	cmp    eax,edx
c000e24d:	7e 1d                	jle    c000e26c <zoh_vari_process+0x535>
c000e24f:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c000e252:	29 c1                	sub    ecx,eax
c000e254:	89 c8                	mov    eax,ecx
c000e256:	8b 0e                	mov    ecx,DWORD PTR [esi]
c000e258:	01 d0                	add    eax,edx
c000e25a:	42                   	inc    edx
c000e25b:	8b 2c 81             	mov    ebp,DWORD PTR [ecx+eax*4]
c000e25e:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c000e261:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c000e264:	89 2c 88             	mov    DWORD PTR [eax+ecx*4],ebp
c000e267:	ff 43 18             	inc    DWORD PTR [ebx+0x18]
c000e26a:	eb dc                	jmp    c000e248 <zoh_vari_process+0x511>
c000e26c:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e270:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e274:	68 00 00 f0 3f       	push   0x3ff00000
c000e279:	6a 00                	push   0x0
c000e27b:	e8 2c a4 01 00       	call   c00286ac <__divdf3>
c000e280:	83 c4 10             	add    esp,0x10
c000e283:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e287:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e28b:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e28f:	ff 74 24 04          	push   DWORD PTR [esp+0x4]
c000e293:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e297:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e29b:	e8 ab 9a 01 00       	call   c0027d4b <__adddf3>
c000e2a0:	5d                   	pop    ebp
c000e2a1:	59                   	pop    ecx
c000e2a2:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000e2a6:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c000e2aa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2ae:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e2b2:	e8 99 ab 01 00       	call   c0028e50 <lrint>
c000e2b7:	83 ec 0c             	sub    esp,0xc
c000e2ba:	50                   	push   eax
c000e2bb:	e8 6b a7 01 00       	call   c0028a2b <__floatsidf>
c000e2c0:	83 c4 10             	add    esp,0x10
c000e2c3:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e2c7:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e2cb:	52                   	push   edx
c000e2cc:	50                   	push   eax
c000e2cd:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2d1:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e2d5:	e8 c2 a0 01 00       	call   c002839c <__subdf3>
c000e2da:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c000e2de:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c000e2e2:	83 c4 20             	add    esp,0x20
c000e2e5:	6a 00                	push   0x0
c000e2e7:	6a 00                	push   0x0
c000e2e9:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2ed:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e2f1:	e8 a1 a9 01 00       	call   c0028c97 <__ltdf2>
c000e2f6:	83 c4 10             	add    esp,0x10
c000e2f9:	85 c0                	test   eax,eax
c000e2fb:	79 1e                	jns    c000e31b <zoh_vari_process+0x5e4>
c000e2fd:	68 00 00 f0 3f       	push   0x3ff00000
c000e302:	6a 00                	push   0x0
c000e304:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e308:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e30c:	e8 3a 9a 01 00       	call   c0027d4b <__adddf3>
c000e311:	83 c4 10             	add    esp,0x10
c000e314:	89 04 24             	mov    DWORD PTR [esp],eax
c000e317:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e31b:	8b 6b 04             	mov    ebp,DWORD PTR [ebx+0x4]
c000e31e:	83 ec 10             	sub    esp,0x10
c000e321:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e325:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c000e329:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e32d:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000e331:	e8 66 a0 01 00       	call   c002839c <__subdf3>
c000e336:	e9 51 fd ff ff       	jmp    c000e08c <zoh_vari_process+0x355>
c000e33b:	3b 6c 24 10          	cmp    ebp,DWORD PTR [esp+0x10]
c000e33f:	7d 3a                	jge    c000e37b <zoh_vari_process+0x644>
c000e341:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e345:	83 ec 0c             	sub    esp,0xc
c000e348:	29 e8                	sub    eax,ebp
c000e34a:	99                   	cdq    
c000e34b:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e34e:	50                   	push   eax
c000e34f:	e8 d7 a6 01 00       	call   c0028a2b <__floatsidf>
c000e354:	83 c4 10             	add    esp,0x10
c000e357:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e35b:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c000e35f:	52                   	push   edx
c000e360:	50                   	push   eax
c000e361:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e365:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c000e369:	e8 dd 99 01 00       	call   c0027d4b <__adddf3>
c000e36e:	83 c4 10             	add    esp,0x10
c000e371:	89 6b 10             	mov    DWORD PTR [ebx+0x10],ebp
c000e374:	89 04 24             	mov    DWORD PTR [esp],eax
c000e377:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c000e37b:	8b 04 24             	mov    eax,DWORD PTR [esp]
c000e37e:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000e382:	89 47 08             	mov    DWORD PTR [edi+0x8],eax
c000e385:	89 57 0c             	mov    DWORD PTR [edi+0xc],edx
c000e388:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e38b:	85 c0                	test   eax,eax
c000e38d:	7f 25                	jg     c000e3b4 <zoh_vari_process+0x67d>
c000e38f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000e393:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c000e397:	89 07                	mov    DWORD PTR [edi],eax
c000e399:	89 57 04             	mov    DWORD PTR [edi+0x4],edx
c000e39c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c000e39f:	99                   	cdq    
c000e3a0:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3a3:	89 46 10             	mov    DWORD PTR [esi+0x10],eax
c000e3a6:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c000e3a9:	99                   	cdq    
c000e3aa:	f7 7b 04             	idiv   DWORD PTR [ebx+0x4]
c000e3ad:	31 d2                	xor    edx,edx
c000e3af:	89 46 14             	mov    DWORD PTR [esi+0x14],eax
c000e3b2:	eb 1e                	jmp    c000e3d2 <zoh_vari_process+0x69b>
c000e3b4:	8b 4b 04             	mov    ecx,DWORD PTR [ebx+0x4]
c000e3b7:	31 d2                	xor    edx,edx
c000e3b9:	29 c8                	sub    eax,ecx
c000e3bb:	c1 e0 02             	shl    eax,0x2
c000e3be:	39 d1                	cmp    ecx,edx
c000e3c0:	7e cd                	jle    c000e38f <zoh_vari_process+0x658>
c000e3c2:	8b 2e                	mov    ebp,DWORD PTR [esi]
c000e3c4:	8b 6c 05 00          	mov    ebp,DWORD PTR [ebp+eax*1+0x0]
c000e3c8:	83 c0 04             	add    eax,0x4
c000e3cb:	89 6c 93 1c          	mov    DWORD PTR [ebx+edx*4+0x1c],ebp
c000e3cf:	42                   	inc    edx
c000e3d0:	eb ec                	jmp    c000e3be <zoh_vari_process+0x687>
c000e3d2:	83 c4 3c             	add    esp,0x3c
c000e3d5:	89 d0                	mov    eax,edx
c000e3d7:	5b                   	pop    ebx
c000e3d8:	5e                   	pop    esi
c000e3d9:	5f                   	pop    edi
c000e3da:	5d                   	pop    ebp
c000e3db:	c3                   	ret    

c000e3dc <zoh_reset>:
c000e3dc:	83 ec 0c             	sub    esp,0xc
c000e3df:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c000e3e3:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c000e3e6:	85 c0                	test   eax,eax
c000e3e8:	74 20                	je     c000e40a <zoh_reset+0x2e>
c000e3ea:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
c000e3ed:	83 c0 1c             	add    eax,0x1c
c000e3f0:	89 50 e8             	mov    DWORD PTR [eax-0x18],edx
c000e3f3:	c7 40 ec 01 00 00 00 	mov    DWORD PTR [eax-0x14],0x1
c000e3fa:	c1 e2 02             	shl    edx,0x2
c000e3fd:	51                   	push   ecx
c000e3fe:	52                   	push   edx
c000e3ff:	6a 00                	push   0x0
c000e401:	50                   	push   eax
c000e402:	e8 65 23 ff ff       	call   c000076c <memset>
c000e407:	83 c4 10             	add    esp,0x10
c000e40a:	83 c4 0c             	add    esp,0xc
c000e40d:	c3                   	ret    

c000e40e <zoh_get_name>:
c000e40e:	31 c0                	xor    eax,eax
c000e410:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e415:	75 05                	jne    c000e41c <zoh_get_name+0xe>
c000e417:	b8 3e a8 02 c0       	mov    eax,0xc002a83e
c000e41c:	c3                   	ret    

c000e41d <zoh_get_description>:
c000e41d:	31 c0                	xor    eax,eax
c000e41f:	83 7c 24 04 03       	cmp    DWORD PTR [esp+0x4],0x3
c000e424:	75 05                	jne    c000e42b <zoh_get_description+0xe>
c000e426:	b8 4f a8 02 c0       	mov    eax,0xc002a84f
c000e42b:	c3                   	ret    

c000e42c <zoh_set_converter>:
c000e42c:	53                   	push   ebx
c000e42d:	b8 0a 00 00 00       	mov    eax,0xa
c000e432:	83 ec 08             	sub    esp,0x8
c000e435:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e439:	83 7c 24 14 03       	cmp    DWORD PTR [esp+0x14],0x3
c000e43e:	75 6e                	jne    c000e4ae <zoh_set_converter+0x82>
c000e440:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c000e443:	85 c0                	test   eax,eax
c000e445:	74 13                	je     c000e45a <zoh_set_converter+0x2e>
c000e447:	83 ec 0c             	sub    esp,0xc
c000e44a:	50                   	push   eax
c000e44b:	e8 68 14 00 00       	call   c000f8b8 <free>
c000e450:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c000e457:	83 c4 10             	add    esp,0x10
c000e45a:	50                   	push   eax
c000e45b:	50                   	push   eax
c000e45c:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e45f:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c000e466:	50                   	push   eax
c000e467:	6a 01                	push   0x1
c000e469:	e8 6a 14 00 00       	call   c000f8d8 <calloc>
c000e46e:	83 c4 10             	add    esp,0x10
c000e471:	89 c2                	mov    edx,eax
c000e473:	89 43 1c             	mov    DWORD PTR [ebx+0x1c],eax
c000e476:	85 d2                	test   edx,edx
c000e478:	b8 01 00 00 00       	mov    eax,0x1
c000e47d:	74 2f                	je     c000e4ae <zoh_set_converter+0x82>
c000e47f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c000e482:	83 ec 0c             	sub    esp,0xc
c000e485:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c000e488:	c7 02 93 0a f7 06    	mov    DWORD PTR [edx],0x6f70a93
c000e48e:	c7 43 24 37 dd 00 c0 	mov    DWORD PTR [ebx+0x24],0xc000dd37
c000e495:	c7 43 20 37 dd 00 c0 	mov    DWORD PTR [ebx+0x20],0xc000dd37
c000e49c:	c7 43 28 dc e3 00 c0 	mov    DWORD PTR [ebx+0x28],0xc000e3dc
c000e4a3:	53                   	push   ebx
c000e4a4:	e8 33 ff ff ff       	call   c000e3dc <zoh_reset>
c000e4a9:	83 c4 10             	add    esp,0x10
c000e4ac:	31 c0                	xor    eax,eax
c000e4ae:	83 c4 08             	add    esp,0x8
c000e4b1:	5b                   	pop    ebx
c000e4b2:	c3                   	ret    

c000e4b3 <CPU::current()>:
c000e4b3:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c000e4b8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c000e4be:	c3                   	ret    

c000e4bf <operator new(unsigned long)>:
c000e4bf:	e9 e4 13 00 00       	jmp    c000f8a8 <malloc>

c000e4c4 <operator delete(void*)>:
c000e4c4:	e9 ff 13 00 00       	jmp    c000f8c8 <rfree>

c000e4c9 <disableIRQs()>:
c000e4c9:	fa                   	cli    
c000e4ca:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c000e4d0:	c3                   	ret    

c000e4d1 <enableIRQs()>:
c000e4d1:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c000e4d6:	48                   	dec    eax
c000e4d7:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c000e4dc:	75 01                	jne    c000e4df <enableIRQs()+0xe>
c000e4de:	fb                   	sti    
c000e4df:	c3                   	ret    

c000e4e0 <lockScheduler()>:
c000e4e0:	fa                   	cli    
c000e4e1:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c000e4e7:	c3                   	ret    

c000e4e8 <unlockScheduler()>:
c000e4e8:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c000e4ed:	48                   	dec    eax
c000e4ee:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c000e4f3:	75 01                	jne    c000e4f6 <unlockScheduler()+0xe>
c000e4f5:	fb                   	sti    
c000e4f6:	c3                   	ret    

c000e4f7 <lockStuff()>:
c000e4f7:	fa                   	cli    
c000e4f8:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c000e4fe:	ff 05 84 23 03 c0    	inc    DWORD PTR ds:0xc0032384
c000e504:	c3                   	ret    

c000e505 <unlockStuff()>:
c000e505:	83 ec 0c             	sub    esp,0xc
c000e508:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c000e50d:	48                   	dec    eax
c000e50e:	a3 84 23 03 c0       	mov    ds:0xc0032384,eax
c000e513:	75 18                	jne    c000e52d <unlockStuff()+0x28>
c000e515:	83 3d 80 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032380,0x0
c000e51c:	74 0f                	je     c000e52d <unlockStuff()+0x28>
c000e51e:	c7 05 80 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x0
c000e528:	e8 63 ff 00 00       	call   c001e490 <schedule()>
c000e52d:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c000e532:	48                   	dec    eax
c000e533:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c000e538:	75 01                	jne    c000e53b <unlockStuff()+0x36>
c000e53a:	fb                   	sti    
c000e53b:	83 c4 0c             	add    esp,0xc
c000e53e:	c3                   	ret    

c000e53f <Virt::getAKernelVAS()>:
c000e53f:	a1 d0 ef 02 c0       	mov    eax,ds:0xc002efd0
c000e544:	c3                   	ret    

c000e545 <__not_memcpy>:
c000e545:	57                   	push   edi
c000e546:	56                   	push   esi
c000e547:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000e54b:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000e54f:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c000e553:	89 c7                	mov    edi,eax
c000e555:	fc                   	cld    
c000e556:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c000e558:	5e                   	pop    esi
c000e559:	5f                   	pop    edi
c000e55a:	c3                   	ret    

c000e55b <Krnl::resolveCompatibilitySymbol(char*)>:
c000e55b:	83 ec 0c             	sub    esp,0xc
c000e55e:	83 ec 08             	sub    esp,0x8
c000e561:	68 86 a8 02 c0       	push   0xc002a886
c000e566:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e56a:	e8 45 23 ff ff       	call   c00008b4 <strcmp>
c000e56f:	83 c4 10             	add    esp,0x10
c000e572:	85 c0                	test   eax,eax
c000e574:	0f 94 c0             	sete   al
c000e577:	84 c0                	test   al,al
c000e579:	74 0a                	je     c000e585 <Krnl::resolveCompatibilitySymbol(char*)+0x2a>
c000e57b:	b8 48 ee 02 c0       	mov    eax,0xc002ee48
c000e580:	e9 e3 00 00 00       	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e585:	83 ec 08             	sub    esp,0x8
c000e588:	68 8f a8 02 c0       	push   0xc002a88f
c000e58d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e591:	e8 1e 23 ff ff       	call   c00008b4 <strcmp>
c000e596:	83 c4 10             	add    esp,0x10
c000e599:	85 c0                	test   eax,eax
c000e59b:	0f 94 c0             	sete   al
c000e59e:	84 c0                	test   al,al
c000e5a0:	74 0a                	je     c000e5ac <Krnl::resolveCompatibilitySymbol(char*)+0x51>
c000e5a2:	b8 c4 71 02 c0       	mov    eax,0xc00271c4
c000e5a7:	e9 bc 00 00 00       	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5ac:	83 ec 08             	sub    esp,0x8
c000e5af:	68 99 a8 02 c0       	push   0xc002a899
c000e5b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5b8:	e8 f7 22 ff ff       	call   c00008b4 <strcmp>
c000e5bd:	83 c4 10             	add    esp,0x10
c000e5c0:	85 c0                	test   eax,eax
c000e5c2:	0f 94 c0             	sete   al
c000e5c5:	84 c0                	test   al,al
c000e5c7:	74 0a                	je     c000e5d3 <Krnl::resolveCompatibilitySymbol(char*)+0x78>
c000e5c9:	b8 f8 6e 02 c0       	mov    eax,0xc0026ef8
c000e5ce:	e9 95 00 00 00       	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5d3:	83 ec 08             	sub    esp,0x8
c000e5d6:	68 a2 a8 02 c0       	push   0xc002a8a2
c000e5db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e5df:	e8 d0 22 ff ff       	call   c00008b4 <strcmp>
c000e5e4:	83 c4 10             	add    esp,0x10
c000e5e7:	85 c0                	test   eax,eax
c000e5e9:	0f 94 c0             	sete   al
c000e5ec:	84 c0                	test   al,al
c000e5ee:	74 07                	je     c000e5f7 <Krnl::resolveCompatibilitySymbol(char*)+0x9c>
c000e5f0:	b8 c4 72 02 c0       	mov    eax,0xc00272c4
c000e5f5:	eb 71                	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e5f7:	83 ec 08             	sub    esp,0x8
c000e5fa:	68 ac a8 02 c0       	push   0xc002a8ac
c000e5ff:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e603:	e8 ac 22 ff ff       	call   c00008b4 <strcmp>
c000e608:	83 c4 10             	add    esp,0x10
c000e60b:	85 c0                	test   eax,eax
c000e60d:	0f 94 c0             	sete   al
c000e610:	84 c0                	test   al,al
c000e612:	74 07                	je     c000e61b <Krnl::resolveCompatibilitySymbol(char*)+0xc0>
c000e614:	b8 44 70 02 c0       	mov    eax,0xc0027044
c000e619:	eb 4d                	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e61b:	83 ec 08             	sub    esp,0x8
c000e61e:	68 b5 a8 02 c0       	push   0xc002a8b5
c000e623:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e627:	e8 88 22 ff ff       	call   c00008b4 <strcmp>
c000e62c:	83 c4 10             	add    esp,0x10
c000e62f:	85 c0                	test   eax,eax
c000e631:	0f 94 c0             	sete   al
c000e634:	84 c0                	test   al,al
c000e636:	74 07                	je     c000e63f <Krnl::resolveCompatibilitySymbol(char*)+0xe4>
c000e638:	b8 4c ee 02 c0       	mov    eax,0xc002ee4c
c000e63d:	eb 29                	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e63f:	83 ec 08             	sub    esp,0x8
c000e642:	68 c2 a8 02 c0       	push   0xc002a8c2
c000e647:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000e64b:	e8 64 22 ff ff       	call   c00008b4 <strcmp>
c000e650:	83 c4 10             	add    esp,0x10
c000e653:	85 c0                	test   eax,eax
c000e655:	0f 94 c0             	sete   al
c000e658:	84 c0                	test   al,al
c000e65a:	74 07                	je     c000e663 <Krnl::resolveCompatibilitySymbol(char*)+0x108>
c000e65c:	b8 4d ee 02 c0       	mov    eax,0xc002ee4d
c000e661:	eb 05                	jmp    c000e668 <Krnl::resolveCompatibilitySymbol(char*)+0x10d>
c000e663:	b8 00 00 00 00       	mov    eax,0x0
c000e668:	83 c4 0c             	add    esp,0xc
c000e66b:	c3                   	ret    

c000e66c <Computer::close(int, int, void*)>:
c000e66c:	57                   	push   edi
c000e66d:	56                   	push   esi
c000e66e:	53                   	push   ebx
c000e66f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000e673:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000e677:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000e67b:	83 ec 0c             	sub    esp,0xc
c000e67e:	ff b3 e4 01 00 00    	push   DWORD PTR [ebx+0x1e4]
c000e684:	e8 57 5d 00 00       	call   c00143e0 <Device::closeAll()>
c000e689:	8b 83 e4 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e4]
c000e68f:	83 c4 10             	add    esp,0x10
c000e692:	8b 10                	mov    edx,DWORD PTR [eax]
c000e694:	89 7c 24 1c          	mov    DWORD PTR [esp+0x1c],edi
c000e698:	c7 44 24 18 0f 27 00 00 	mov    DWORD PTR [esp+0x18],0x270f
c000e6a0:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c000e6a4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c000e6a8:	5b                   	pop    ebx
c000e6a9:	8b 42 0c             	mov    eax,DWORD PTR [edx+0xc]
c000e6ac:	5e                   	pop    esi
c000e6ad:	5f                   	pop    edi
c000e6ae:	ff e0                	jmp    eax

c000e6b0 <Krnl::firstTask()>:
c000e6b0:	53                   	push   ebx
c000e6b1:	83 ec 14             	sub    esp,0x14
c000e6b4:	fb                   	sti    
c000e6b5:	68 3f 07 00 00       	push   0x73f
c000e6ba:	e8 e9 11 00 00       	call   c000f8a8 <malloc>
c000e6bf:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c000e6c6:	89 c3                	mov    ebx,eax
c000e6c8:	ff 35 b0 23 03 c0    	push   DWORD PTR ds:0xc00323b0
c000e6ce:	68 cf a8 02 c0       	push   0xc002a8cf
c000e6d3:	6a 01                	push   0x1
c000e6d5:	50                   	push   eax
c000e6d6:	e8 79 f9 00 00       	call   c001e054 <Process::Process(bool, char const*, Process*, char**)>
c000e6db:	83 c4 20             	add    esp,0x20
c000e6de:	68 ff 00 00 00       	push   0xff
c000e6e3:	6a 00                	push   0x0
c000e6e5:	68 3b f2 00 c0       	push   0xc000f23b
c000e6ea:	53                   	push   ebx
c000e6eb:	e8 5c fb 00 00       	call   c001e24c <Process::createThread(void (*)(void*), void*, int)>
c000e6f0:	6a 7a                	push   0x7a
c000e6f2:	6a 00                	push   0x0
c000e6f4:	68 ca ec 01 c0       	push   0xc001ecca
c000e6f9:	ff 35 b0 23 03 c0    	push   DWORD PTR ds:0xc00323b0
c000e6ff:	e8 48 fb 00 00       	call   c001e24c <Process::createThread(void (*)(void*), void*, int)>
c000e704:	83 c4 20             	add    esp,0x20
c000e707:	a3 68 23 03 c0       	mov    ds:0xc0032368,eax
c000e70c:	c6 05 4d ee 02 c0 01 	mov    BYTE PTR ds:0xc002ee4d,0x1
c000e713:	e8 06 0a 01 00       	call   c001f11e <Vm::initialise8086()>
c000e718:	e8 b5 4a 00 00       	call   c00131d2 <Fs::initVFS()>
c000e71d:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c000e722:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c000e728:	8b 10                	mov    edx,DWORD PTR [eax]
c000e72a:	6a 00                	push   0x0
c000e72c:	6a 00                	push   0x0
c000e72e:	6a 00                	push   0x0
c000e730:	50                   	push   eax
c000e731:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000e734:	e8 a9 e1 00 00       	call   c001c8e2 <Sys::loadSyscalls()>
c000e739:	e8 8a bf 00 00       	call   c001a6c8 <Krnl::loadSystemEnv()>
c000e73e:	83 c4 0c             	add    esp,0xc
c000e741:	6a 3a                	push   0x3a
c000e743:	68 dc a8 02 c0       	push   0xc002a8dc
c000e748:	68 e5 a8 02 c0       	push   0xc002a8e5
c000e74d:	e8 43 cd 00 00       	call   c001b495 <Reg::readIntWithDefault(char*, char*, int)>
c000e752:	89 04 24             	mov    DWORD PTR [esp],eax
c000e755:	e8 68 55 00 00       	call   c0013cc2 <User::loadClockSettings(int)>
c000e75a:	58                   	pop    eax
c000e75b:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c000e760:	ff b0 e4 01 00 00    	push   DWORD PTR [eax+0x1e4]
c000e766:	e8 49 5c 00 00       	call   c00143b4 <Device::loadDriversForAll()>
c000e76b:	e8 a8 ba 00 00       	call   c001a218 <Krnl::startCPUs()>
c000e770:	5a                   	pop    edx
c000e771:	8b 1d 48 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee48
c000e777:	59                   	pop    ecx
c000e778:	6a 01                	push   0x1
c000e77a:	68 ed a8 02 c0       	push   0xc002a8ed
c000e77f:	e8 2d f3 00 00       	call   c001dab1 <Thr::loadDLL(char const*, bool)>
c000e784:	5a                   	pop    edx
c000e785:	59                   	pop    ecx
c000e786:	53                   	push   ebx
c000e787:	50                   	push   eax
c000e788:	e8 4f f5 00 00       	call   c001dcdc <Thr::executeDLL(unsigned long, void*)>
c000e78d:	83 c4 10             	add    esp,0x10
c000e790:	83 ec 0c             	sub    esp,0xc
c000e793:	6a 02                	push   0x2
c000e795:	e8 f5 fe 00 00       	call   c001e68f <blockTask(TaskState)>
c000e79a:	83 c4 10             	add    esp,0x10
c000e79d:	eb f1                	jmp    c000e790 <Krnl::firstTask()+0xe0>
c000e79f:	90                   	nop

c000e7a0 <Computer::Computer()>:
c000e7a0:	83 ec 0c             	sub    esp,0xc
c000e7a3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7a7:	83 ec 08             	sub    esp,0x8
c000e7aa:	68 09 a9 02 c0       	push   0xc002a909
c000e7af:	50                   	push   eax
c000e7b0:	e8 a5 5c 00 00       	call   c001445a <Device::Device(char const*)>
c000e7b5:	83 c4 10             	add    esp,0x10
c000e7b8:	ba a8 aa 02 c0       	mov    edx,0xc002aaa8
c000e7bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c1:	89 10                	mov    DWORD PTR [eax],edx
c000e7c3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7c7:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c000e7d1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7d5:	c7 80 c8 00 00 00 00 00 00 00 	mov    DWORD PTR [eax+0xc8],0x0
c000e7df:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7e3:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c000e7e9:	83 ca 04             	or     edx,0x4
c000e7ec:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c000e7f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e7f6:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e7fc:	0f b6 d0             	movzx  edx,al
c000e7ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e803:	66 c7 44 90 04 70 00 	mov    WORD PTR [eax+edx*4+0x4],0x70
c000e80a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e80e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e814:	0f b6 d0             	movzx  edx,al
c000e817:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e81b:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c000e820:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e824:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e82a:	8d 50 01             	lea    edx,[eax+0x1]
c000e82d:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e831:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e837:	0f b6 d0             	movzx  edx,al
c000e83a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e83e:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e842:	83 e1 3f             	and    ecx,0x3f
c000e845:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e849:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e84d:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e853:	0f b6 d0             	movzx  edx,al
c000e856:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e85a:	66 c7 44 90 04 92 00 	mov    WORD PTR [eax+edx*4+0x4],0x92
c000e861:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e865:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e86b:	0f b6 d0             	movzx  edx,al
c000e86e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e872:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e877:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e87b:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e881:	8d 50 01             	lea    edx,[eax+0x1]
c000e884:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e888:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e88e:	0f b6 d0             	movzx  edx,al
c000e891:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e895:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e899:	83 e1 3f             	and    ecx,0x3f
c000e89c:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8a4:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8aa:	0f b6 d0             	movzx  edx,al
c000e8ad:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8b1:	66 c7 44 90 04 61 00 	mov    WORD PTR [eax+edx*4+0x4],0x61
c000e8b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8bc:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8c2:	0f b6 d0             	movzx  edx,al
c000e8c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8c9:	c6 44 90 06 01       	mov    BYTE PTR [eax+edx*4+0x6],0x1
c000e8ce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8d2:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c000e8d8:	8d 50 01             	lea    edx,[eax+0x1]
c000e8db:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000e8df:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c000e8e5:	0f b6 d0             	movzx  edx,al
c000e8e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000e8ec:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c000e8f0:	83 e1 3f             	and    ecx,0x3f
c000e8f3:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c000e8f7:	90                   	nop
c000e8f8:	83 c4 0c             	add    esp,0xc
c000e8fb:	c3                   	ret    

c000e8fc <Computer::setBootMessage(char const*)>:
c000e8fc:	c3                   	ret    
c000e8fd:	90                   	nop

c000e8fe <Computer::detectFeatures()>:
c000e8fe:	55                   	push   ebp
c000e8ff:	57                   	push   edi
c000e900:	56                   	push   esi
c000e901:	53                   	push   ebx
c000e902:	83 ec 1c             	sub    esp,0x1c
c000e905:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c000e909:	81 a3 e8 01 00 00 04 00 fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffc0004
c000e913:	e8 cc 19 ff ff       	call   c00002e4 <detectCPUID>
c000e918:	85 c0                	test   eax,eax
c000e91a:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e920:	0f 95 c2             	setne  dl
c000e923:	83 e0 fd             	and    eax,0xfffffffd
c000e926:	d1 e2                	shl    edx,1
c000e928:	09 d0                	or     eax,edx
c000e92a:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e930:	a8 02                	test   al,0x2
c000e932:	75 46                	jne    c000e97a <Computer::detectFeatures()+0x7c>
c000e934:	f6 05 61 ee 02 c0 04 	test   BYTE PTR ds:0xc002ee61,0x4
c000e93b:	74 07                	je     c000e944 <Computer::detectFeatures()+0x46>
c000e93d:	80 a3 e8 01 00 00 fb 	and    BYTE PTR [ebx+0x1e8],0xfb
c000e944:	e8 3d 85 01 00       	call   c0026e86 <x87Detect>
c000e949:	83 e0 01             	and    eax,0x1
c000e94c:	c1 e0 04             	shl    eax,0x4
c000e94f:	88 c2                	mov    dl,al
c000e951:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e957:	83 e0 ef             	and    eax,0xffffffef
c000e95a:	09 d0                	or     eax,edx
c000e95c:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e962:	a8 10                	test   al,0x10
c000e964:	0f 85 2a 01 00 00    	jne    c000ea94 <Computer::detectFeatures()+0x196>
c000e96a:	84 c0                	test   al,al
c000e96c:	0f 88 45 01 00 00    	js     c000eab7 <Computer::detectFeatures()+0x1b9>
c000e972:	83 c4 1c             	add    esp,0x1c
c000e975:	5b                   	pop    ebx
c000e976:	5e                   	pop    esi
c000e977:	5f                   	pop    edi
c000e978:	5d                   	pop    ebp
c000e979:	c3                   	ret    
c000e97a:	83 ec 0c             	sub    esp,0xc
c000e97d:	6a 20                	push   0x20
c000e97f:	e8 b2 a5 00 00       	call   c0018f36 <CPU::cpuidCheckEDX(unsigned int)>
c000e984:	83 e0 01             	and    eax,0x1
c000e987:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000e98e:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000e994:	83 e0 f7             	and    eax,0xfffffff7
c000e997:	09 d0                	or     eax,edx
c000e999:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000e99f:	c7 04 24 00 00 00 04 	mov    DWORD PTR [esp],0x4000000
c000e9a6:	e8 8b a5 00 00       	call   c0018f36 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ab:	83 e0 01             	and    eax,0x1
c000e9ae:	88 c2                	mov    dl,al
c000e9b0:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9b6:	83 e0 fe             	and    eax,0xfffffffe
c000e9b9:	09 d0                	or     eax,edx
c000e9bb:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9c1:	c7 04 24 80 00 00 00 	mov    DWORD PTR [esp],0x80
c000e9c8:	e8 69 a5 00 00       	call   c0018f36 <CPU::cpuidCheckEDX(unsigned int)>
c000e9cd:	c1 e0 07             	shl    eax,0x7
c000e9d0:	88 c2                	mov    dl,al
c000e9d2:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000e9d8:	83 e0 7f             	and    eax,0x7f
c000e9db:	09 d0                	or     eax,edx
c000e9dd:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000e9e3:	c7 04 24 00 00 80 00 	mov    DWORD PTR [esp],0x800000
c000e9ea:	e8 47 a5 00 00       	call   c0018f36 <CPU::cpuidCheckEDX(unsigned int)>
c000e9ef:	83 c4 10             	add    esp,0x10
c000e9f2:	83 e0 01             	and    eax,0x1
c000e9f5:	c1 e0 05             	shl    eax,0x5
c000e9f8:	88 c2                	mov    dl,al
c000e9fa:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea00:	83 e0 df             	and    eax,0xffffffdf
c000ea03:	09 d0                	or     eax,edx
c000ea05:	f7 05 60 ee 02 c0 01 04 00 00 	test   DWORD PTR ds:0xc002ee60,0x401
c000ea0f:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea15:	0f 84 c2 00 00 00    	je     c000eadd <Computer::detectFeatures()+0x1df>
c000ea1b:	83 e0 fe             	and    eax,0xfffffffe
c000ea1e:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea24:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000ea2a:	88 c2                	mov    dl,al
c000ea2c:	83 e2 09             	and    edx,0x9
c000ea2f:	fe ca                	dec    dl
c000ea31:	75 09                	jne    c000ea3c <Computer::detectFeatures()+0x13e>
c000ea33:	83 e0 fe             	and    eax,0xfffffffe
c000ea36:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000ea3c:	83 ec 0c             	sub    esp,0xc
c000ea3f:	8d 44 24 18          	lea    eax,[esp+0x18]
c000ea43:	50                   	push   eax
c000ea44:	8d 6c 24 18          	lea    ebp,[esp+0x18]
c000ea48:	55                   	push   ebp
c000ea49:	8d 7c 24 18          	lea    edi,[esp+0x18]
c000ea4d:	57                   	push   edi
c000ea4e:	8d 74 24 18          	lea    esi,[esp+0x18]
c000ea52:	56                   	push   esi
c000ea53:	68 00 00 00 80       	push   0x80000000
c000ea58:	e8 55 a4 00 00       	call   c0018eb2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea5d:	83 c4 20             	add    esp,0x20
c000ea60:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c000ea67:	8d 44 24 0c          	lea    eax,[esp+0xc]
c000ea6b:	0f 86 c3 fe ff ff    	jbe    c000e934 <Computer::detectFeatures()+0x36>
c000ea71:	83 ec 0c             	sub    esp,0xc
c000ea74:	50                   	push   eax
c000ea75:	55                   	push   ebp
c000ea76:	57                   	push   edi
c000ea77:	56                   	push   esi
c000ea78:	68 01 00 00 80       	push   0x80000001
c000ea7d:	e8 30 a4 00 00       	call   c0018eb2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c000ea82:	81 a3 e8 01 00 00 bf ff fc ff 	and    DWORD PTR [ebx+0x1e8],0xfffcffbf
c000ea8c:	83 c4 20             	add    esp,0x20
c000ea8f:	e9 a0 fe ff ff       	jmp    c000e934 <Computer::detectFeatures()+0x36>
c000ea94:	e8 a7 83 01 00       	call   c0026e40 <absolutelyNoChanceInHell>
c000ea99:	88 c2                	mov    dl,al
c000ea9b:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eaa1:	c1 e2 07             	shl    edx,0x7
c000eaa4:	83 e0 7f             	and    eax,0x7f
c000eaa7:	09 d0                	or     eax,edx
c000eaa9:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eaaf:	84 c0                	test   al,al
c000eab1:	0f 89 bb fe ff ff    	jns    c000e972 <Computer::detectFeatures()+0x74>
c000eab7:	e8 64 83 01 00       	call   c0026e20 <avxDetect>
c000eabc:	83 e0 01             	and    eax,0x1
c000eabf:	c1 e0 05             	shl    eax,0x5
c000eac2:	88 c2                	mov    dl,al
c000eac4:	8a 83 e9 01 00 00    	mov    al,BYTE PTR [ebx+0x1e9]
c000eaca:	83 e0 df             	and    eax,0xffffffdf
c000eacd:	09 d0                	or     eax,edx
c000eacf:	88 83 e9 01 00 00    	mov    BYTE PTR [ebx+0x1e9],al
c000ead5:	83 c4 1c             	add    esp,0x1c
c000ead8:	5b                   	pop    ebx
c000ead9:	5e                   	pop    esi
c000eada:	5f                   	pop    edi
c000eadb:	5d                   	pop    ebp
c000eadc:	c3                   	ret    
c000eadd:	83 ec 0c             	sub    esp,0xc
c000eae0:	68 00 02 00 00       	push   0x200
c000eae5:	e8 4c a4 00 00       	call   c0018f36 <CPU::cpuidCheckEDX(unsigned int)>
c000eaea:	83 c4 10             	add    esp,0x10
c000eaed:	83 e0 01             	and    eax,0x1
c000eaf0:	88 c2                	mov    dl,al
c000eaf2:	8a 83 e8 01 00 00    	mov    al,BYTE PTR [ebx+0x1e8]
c000eaf8:	83 e0 fe             	and    eax,0xfffffffe
c000eafb:	09 d0                	or     eax,edx
c000eafd:	88 83 e8 01 00 00    	mov    BYTE PTR [ebx+0x1e8],al
c000eb03:	e9 1c ff ff ff       	jmp    c000ea24 <Computer::detectFeatures()+0x126>

c000eb08 <Computer::displayFeatures()>:
c000eb08:	53                   	push   ebx
c000eb09:	83 ec 14             	sub    esp,0x14
c000eb0c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eb10:	68 19 a9 02 c0       	push   0xc002a919
c000eb15:	e8 2d 43 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000eb1a:	83 c4 10             	add    esp,0x10
c000eb1d:	f6 83 e8 01 00 00 01 	test   BYTE PTR [ebx+0x1e8],0x1
c000eb24:	0f 85 73 02 00 00    	jne    c000ed9d <Computer::displayFeatures()+0x295>
c000eb2a:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000eb2f:	83 ec 08             	sub    esp,0x8
c000eb32:	50                   	push   eax
c000eb33:	68 2c a9 02 c0       	push   0xc002a92c
c000eb38:	e8 0a 43 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000eb3d:	83 c4 10             	add    esp,0x10
c000eb40:	f6 83 e8 01 00 00 04 	test   BYTE PTR [ebx+0x1e8],0x4
c000eb47:	0f 85 8c 02 00 00    	jne    c000edd9 <Computer::displayFeatures()+0x2d1>
c000eb4d:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000eb52:	83 ec 08             	sub    esp,0x8
c000eb55:	50                   	push   eax
c000eb56:	68 3d a9 02 c0       	push   0xc002a93d
c000eb5b:	e8 e7 42 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000eb60:	83 c4 10             	add    esp,0x10
c000eb63:	f6 83 e8 01 00 00 02 	test   BYTE PTR [ebx+0x1e8],0x2
c000eb6a:	0f 85 5f 02 00 00    	jne    c000edcf <Computer::displayFeatures()+0x2c7>
c000eb70:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000eb75:	83 ec 08             	sub    esp,0x8
c000eb78:	50                   	push   eax
c000eb79:	68 4e a9 02 c0       	push   0xc002a94e
c000eb7e:	e8 c4 42 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000eb83:	83 c4 10             	add    esp,0x10
c000eb86:	f6 83 e8 01 00 00 08 	test   BYTE PTR [ebx+0x1e8],0x8
c000eb8d:	0f 85 32 02 00 00    	jne    c000edc5 <Computer::displayFeatures()+0x2bd>
c000eb93:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000eb98:	83 ec 08             	sub    esp,0x8
c000eb9b:	50                   	push   eax
c000eb9c:	68 5f a9 02 c0       	push   0xc002a95f
c000eba1:	e8 a1 42 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000eba6:	83 c4 10             	add    esp,0x10
c000eba9:	f6 83 e8 01 00 00 10 	test   BYTE PTR [ebx+0x1e8],0x10
c000ebb0:	0f 85 05 02 00 00    	jne    c000edbb <Computer::displayFeatures()+0x2b3>
c000ebb6:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ebbb:	83 ec 08             	sub    esp,0x8
c000ebbe:	50                   	push   eax
c000ebbf:	68 70 a9 02 c0       	push   0xc002a970
c000ebc4:	e8 7e 42 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000ebc9:	83 c4 10             	add    esp,0x10
c000ebcc:	f6 83 e8 01 00 00 20 	test   BYTE PTR [ebx+0x1e8],0x20
c000ebd3:	0f 85 d8 01 00 00    	jne    c000edb1 <Computer::displayFeatures()+0x2a9>
c000ebd9:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ebde:	83 ec 08             	sub    esp,0x8
c000ebe1:	50                   	push   eax
c000ebe2:	68 81 a9 02 c0       	push   0xc002a981
c000ebe7:	e8 5b 42 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000ebec:	83 c4 10             	add    esp,0x10
c000ebef:	f6 83 e8 01 00 00 40 	test   BYTE PTR [ebx+0x1e8],0x40
c000ebf6:	0f 85 ab 01 00 00    	jne    c000eda7 <Computer::displayFeatures()+0x29f>
c000ebfc:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ec01:	83 ec 08             	sub    esp,0x8
c000ec04:	50                   	push   eax
c000ec05:	68 92 a9 02 c0       	push   0xc002a992
c000ec0a:	e8 38 42 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000ec0f:	83 c4 10             	add    esp,0x10
c000ec12:	80 bb e8 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e8],0x0
c000ec19:	0f 88 1b 02 00 00    	js     c000ee3a <Computer::displayFeatures()+0x332>
c000ec1f:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ec24:	83 ec 08             	sub    esp,0x8
c000ec27:	50                   	push   eax
c000ec28:	68 a3 a9 02 c0       	push   0xc002a9a3
c000ec2d:	e8 15 42 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000ec32:	83 c4 10             	add    esp,0x10
c000ec35:	f6 83 e9 01 00 00 01 	test   BYTE PTR [ebx+0x1e9],0x1
c000ec3c:	0f 85 a1 01 00 00    	jne    c000ede3 <Computer::displayFeatures()+0x2db>
c000ec42:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ec47:	83 ec 08             	sub    esp,0x8
c000ec4a:	50                   	push   eax
c000ec4b:	68 b4 a9 02 c0       	push   0xc002a9b4
c000ec50:	e8 f2 41 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000ec55:	83 c4 10             	add    esp,0x10
c000ec58:	f6 83 e9 01 00 00 02 	test   BYTE PTR [ebx+0x1e9],0x2
c000ec5f:	0f 85 cb 01 00 00    	jne    c000ee30 <Computer::displayFeatures()+0x328>
c000ec65:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ec6a:	83 ec 08             	sub    esp,0x8
c000ec6d:	50                   	push   eax
c000ec6e:	68 c5 a9 02 c0       	push   0xc002a9c5
c000ec73:	e8 cf 41 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000ec78:	83 c4 10             	add    esp,0x10
c000ec7b:	f6 83 e9 01 00 00 10 	test   BYTE PTR [ebx+0x1e9],0x10
c000ec82:	0f 85 9e 01 00 00    	jne    c000ee26 <Computer::displayFeatures()+0x31e>
c000ec88:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ec8d:	83 ec 08             	sub    esp,0x8
c000ec90:	50                   	push   eax
c000ec91:	68 d6 a9 02 c0       	push   0xc002a9d6
c000ec96:	e8 ac 41 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000ec9b:	83 c4 10             	add    esp,0x10
c000ec9e:	f6 83 e9 01 00 00 04 	test   BYTE PTR [ebx+0x1e9],0x4
c000eca5:	0f 85 71 01 00 00    	jne    c000ee1c <Computer::displayFeatures()+0x314>
c000ecab:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ecb0:	83 ec 08             	sub    esp,0x8
c000ecb3:	50                   	push   eax
c000ecb4:	68 e7 a9 02 c0       	push   0xc002a9e7
c000ecb9:	e8 89 41 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000ecbe:	83 c4 10             	add    esp,0x10
c000ecc1:	f6 83 e9 01 00 00 08 	test   BYTE PTR [ebx+0x1e9],0x8
c000ecc8:	0f 85 44 01 00 00    	jne    c000ee12 <Computer::displayFeatures()+0x30a>
c000ecce:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ecd3:	83 ec 08             	sub    esp,0x8
c000ecd6:	50                   	push   eax
c000ecd7:	68 f8 a9 02 c0       	push   0xc002a9f8
c000ecdc:	e8 66 41 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000ece1:	83 c4 10             	add    esp,0x10
c000ece4:	f6 83 e9 01 00 00 20 	test   BYTE PTR [ebx+0x1e9],0x20
c000eceb:	0f 85 17 01 00 00    	jne    c000ee08 <Computer::displayFeatures()+0x300>
c000ecf1:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ecf6:	83 ec 08             	sub    esp,0x8
c000ecf9:	50                   	push   eax
c000ecfa:	68 09 aa 02 c0       	push   0xc002aa09
c000ecff:	e8 43 41 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000ed04:	83 c4 10             	add    esp,0x10
c000ed07:	f6 83 e9 01 00 00 40 	test   BYTE PTR [ebx+0x1e9],0x40
c000ed0e:	0f 85 ea 00 00 00    	jne    c000edfe <Computer::displayFeatures()+0x2f6>
c000ed14:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ed19:	83 ec 08             	sub    esp,0x8
c000ed1c:	50                   	push   eax
c000ed1d:	68 1a aa 02 c0       	push   0xc002aa1a
c000ed22:	e8 20 41 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000ed27:	83 c4 10             	add    esp,0x10
c000ed2a:	80 bb e9 01 00 00 00 	cmp    BYTE PTR [ebx+0x1e9],0x0
c000ed31:	0f 88 0d 01 00 00    	js     c000ee44 <Computer::displayFeatures()+0x33c>
c000ed37:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ed3c:	83 ec 08             	sub    esp,0x8
c000ed3f:	50                   	push   eax
c000ed40:	68 2b aa 02 c0       	push   0xc002aa2b
c000ed45:	e8 fd 40 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000ed4a:	83 c4 10             	add    esp,0x10
c000ed4d:	f6 83 ea 01 00 00 02 	test   BYTE PTR [ebx+0x1ea],0x2
c000ed54:	0f 85 9a 00 00 00    	jne    c000edf4 <Computer::displayFeatures()+0x2ec>
c000ed5a:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ed5f:	83 ec 08             	sub    esp,0x8
c000ed62:	50                   	push   eax
c000ed63:	68 3c aa 02 c0       	push   0xc002aa3c
c000ed68:	e8 da 40 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000ed6d:	83 c4 10             	add    esp,0x10
c000ed70:	f6 83 ea 01 00 00 01 	test   BYTE PTR [ebx+0x1ea],0x1
c000ed77:	75 74                	jne    c000eded <Computer::displayFeatures()+0x2e5>
c000ed79:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c000ed7e:	83 ec 08             	sub    esp,0x8
c000ed81:	50                   	push   eax
c000ed82:	68 4d aa 02 c0       	push   0xc002aa4d
c000ed87:	e8 bb 40 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000ed8c:	c7 44 24 20 b4 c4 02 c0 	mov    DWORD PTR [esp+0x20],0xc002c4b4
c000ed94:	83 c4 18             	add    esp,0x18
c000ed97:	5b                   	pop    ebx
c000ed98:	e9 aa 40 00 00       	jmp    c0012e47 <Dbg::kprintf(char const*, ...)>
c000ed9d:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000eda2:	e9 88 fd ff ff       	jmp    c000eb2f <Computer::displayFeatures()+0x27>
c000eda7:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000edac:	e9 50 fe ff ff       	jmp    c000ec01 <Computer::displayFeatures()+0xf9>
c000edb1:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000edb6:	e9 23 fe ff ff       	jmp    c000ebde <Computer::displayFeatures()+0xd6>
c000edbb:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000edc0:	e9 f6 fd ff ff       	jmp    c000ebbb <Computer::displayFeatures()+0xb3>
c000edc5:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000edca:	e9 c9 fd ff ff       	jmp    c000eb98 <Computer::displayFeatures()+0x90>
c000edcf:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000edd4:	e9 9c fd ff ff       	jmp    c000eb75 <Computer::displayFeatures()+0x6d>
c000edd9:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000edde:	e9 6f fd ff ff       	jmp    c000eb52 <Computer::displayFeatures()+0x4a>
c000ede3:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000ede8:	e9 5a fe ff ff       	jmp    c000ec47 <Computer::displayFeatures()+0x13f>
c000eded:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000edf2:	eb 8a                	jmp    c000ed7e <Computer::displayFeatures()+0x276>
c000edf4:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000edf9:	e9 61 ff ff ff       	jmp    c000ed5f <Computer::displayFeatures()+0x257>
c000edfe:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000ee03:	e9 11 ff ff ff       	jmp    c000ed19 <Computer::displayFeatures()+0x211>
c000ee08:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000ee0d:	e9 e4 fe ff ff       	jmp    c000ecf6 <Computer::displayFeatures()+0x1ee>
c000ee12:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000ee17:	e9 b7 fe ff ff       	jmp    c000ecd3 <Computer::displayFeatures()+0x1cb>
c000ee1c:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000ee21:	e9 8a fe ff ff       	jmp    c000ecb0 <Computer::displayFeatures()+0x1a8>
c000ee26:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000ee2b:	e9 5d fe ff ff       	jmp    c000ec8d <Computer::displayFeatures()+0x185>
c000ee30:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000ee35:	e9 30 fe ff ff       	jmp    c000ec6a <Computer::displayFeatures()+0x162>
c000ee3a:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000ee3f:	e9 e0 fd ff ff       	jmp    c000ec24 <Computer::displayFeatures()+0x11c>
c000ee44:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c000ee49:	e9 ee fe ff ff       	jmp    c000ed3c <Computer::displayFeatures()+0x234>

c000ee4e <Computer::rdmsr(unsigned int)>:
c000ee4e:	83 ec 0c             	sub    esp,0xc
c000ee51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee55:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee5c:	74 0a                	je     c000ee68 <Computer::rdmsr(unsigned int)+0x1a>
c000ee5e:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee62:	0f 32                	rdmsr  
c000ee64:	83 c4 0c             	add    esp,0xc
c000ee67:	c3                   	ret    
c000ee68:	83 ec 0c             	sub    esp,0xc
c000ee6b:	68 5e aa 02 c0       	push   0xc002aa5e
c000ee70:	e8 8c b9 00 00       	call   c001a801 <Krnl::panic(char const*)>
c000ee75:	83 c4 10             	add    esp,0x10
c000ee78:	eb e4                	jmp    c000ee5e <Computer::rdmsr(unsigned int)+0x10>

c000ee7a <Computer::wrmsr(unsigned int, unsigned long long)>:
c000ee7a:	57                   	push   edi
c000ee7b:	56                   	push   esi
c000ee7c:	52                   	push   edx
c000ee7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000ee81:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c000ee85:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c000ee89:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000ee90:	74 0e                	je     c000eea0 <Computer::wrmsr(unsigned int, unsigned long long)+0x26>
c000ee92:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c000ee96:	89 f0                	mov    eax,esi
c000ee98:	89 fa                	mov    edx,edi
c000ee9a:	0f 30                	wrmsr  
c000ee9c:	58                   	pop    eax
c000ee9d:	5e                   	pop    esi
c000ee9e:	5f                   	pop    edi
c000ee9f:	c3                   	ret    
c000eea0:	83 ec 0c             	sub    esp,0xc
c000eea3:	68 64 aa 02 c0       	push   0xc002aa64
c000eea8:	e8 54 b9 00 00       	call   c001a801 <Krnl::panic(char const*)>
c000eead:	83 c4 10             	add    esp,0x10
c000eeb0:	eb e0                	jmp    c000ee92 <Computer::wrmsr(unsigned int, unsigned long long)+0x18>

c000eeb2 <Computer::nmiEnabled()>:
c000eeb2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eeb6:	8a 80 58 01 00 00    	mov    al,BYTE PTR [eax+0x158]
c000eebc:	c3                   	ret    
c000eebd:	90                   	nop

c000eebe <Computer::readCMOS(unsigned char)>:
c000eebe:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eec2:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000eec9:	19 c0                	sbb    eax,eax
c000eecb:	83 e0 80             	and    eax,0xffffff80
c000eece:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000eed2:	e6 70                	out    0x70,al
c000eed4:	e4 71                	in     al,0x71
c000eed6:	c3                   	ret    
c000eed7:	90                   	nop

c000eed8 <Computer::enableNMI(bool)>:
c000eed8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c000eedc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000eee0:	88 90 58 01 00 00    	mov    BYTE PTR [eax+0x158],dl
c000eee6:	c7 44 24 08 10 00 00 00 	mov    DWORD PTR [esp+0x8],0x10
c000eeee:	eb ce                	jmp    c000eebe <Computer::readCMOS(unsigned char)>

c000eef0 <Computer::open(int, int, void*)>:
c000eef0:	56                   	push   esi
c000eef1:	53                   	push   ebx
c000eef2:	83 ec 10             	sub    esp,0x10
c000eef5:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c000eef9:	f6 05 60 ee 02 c0 04 	test   BYTE PTR ds:0xc002ee60,0x4
c000ef00:	68 68 12 00 00       	push   0x1268
c000ef05:	0f 94 05 84 dd 02 c0 	sete   BYTE PTR ds:0xc002dd84
c000ef0c:	e8 97 09 00 00       	call   c000f8a8 <malloc>
c000ef11:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef14:	89 c6                	mov    esi,eax
c000ef16:	e8 9f 93 00 00       	call   c00182ba <ACPI::ACPI()>
c000ef1b:	89 b3 e4 01 00 00    	mov    DWORD PTR [ebx+0x1e4],esi
c000ef21:	58                   	pop    eax
c000ef22:	5a                   	pop    edx
c000ef23:	56                   	push   esi
c000ef24:	53                   	push   ebx
c000ef25:	e8 40 53 00 00       	call   c001426a <Device::addChild(Device*)>
c000ef2a:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef2d:	e8 cc f9 ff ff       	call   c000e8fe <Computer::detectFeatures()>
c000ef32:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000ef35:	e8 ce fb ff ff       	call   c000eb08 <Computer::displayFeatures()>
c000ef3a:	59                   	pop    ecx
c000ef3b:	5e                   	pop    esi
c000ef3c:	6a 01                	push   0x1
c000ef3e:	53                   	push   ebx
c000ef3f:	e8 94 ff ff ff       	call   c000eed8 <Computer::enableNMI(bool)>
c000ef44:	c7 04 24 98 11 00 00 	mov    DWORD PTR [esp],0x1198
c000ef4b:	e8 58 09 00 00       	call   c000f8a8 <malloc>
c000ef50:	89 04 24             	mov    DWORD PTR [esp],eax
c000ef53:	89 c6                	mov    esi,eax
c000ef55:	e8 94 a0 00 00       	call   c0018fee <CPU::CPU()>
c000ef5a:	89 b3 60 01 00 00    	mov    DWORD PTR [ebx+0x160],esi
c000ef60:	58                   	pop    eax
c000ef61:	5a                   	pop    edx
c000ef62:	56                   	push   esi
c000ef63:	53                   	push   ebx
c000ef64:	e8 01 53 00 00       	call   c001426a <Device::addChild(Device*)>
c000ef69:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c000ef6f:	8b 10                	mov    edx,DWORD PTR [eax]
c000ef71:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000ef75:	6a 00                	push   0x0
c000ef77:	6a 00                	push   0x0
c000ef79:	50                   	push   eax
c000ef7a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000ef7d:	83 c4 20             	add    esp,0x20
c000ef80:	e8 79 58 00 00       	call   c00147fe <setupFPU()>
c000ef85:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c000ef8b:	85 c0                	test   eax,eax
c000ef8d:	74 1f                	je     c000efae <Computer::open(int, int, void*)+0xbe>
c000ef8f:	83 ec 08             	sub    esp,0x8
c000ef92:	50                   	push   eax
c000ef93:	53                   	push   ebx
c000ef94:	e8 d1 52 00 00       	call   c001426a <Device::addChild(Device*)>
c000ef99:	8b 83 e0 01 00 00    	mov    eax,DWORD PTR [ebx+0x1e0]
c000ef9f:	8b 10                	mov    edx,DWORD PTR [eax]
c000efa1:	6a 00                	push   0x0
c000efa3:	6a 00                	push   0x0
c000efa5:	6a 00                	push   0x0
c000efa7:	50                   	push   eax
c000efa8:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000efab:	83 c4 20             	add    esp,0x20
c000efae:	83 ec 0c             	sub    esp,0xc
c000efb1:	68 b0 e6 00 c0       	push   0xc000e6b0
c000efb6:	e8 b3 f3 00 00       	call   c001e36e <setupMultitasking(void (*)())>
c000efbb:	83 c4 14             	add    esp,0x14
c000efbe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000efc3:	5b                   	pop    ebx
c000efc4:	5e                   	pop    esi
c000efc5:	c3                   	ret    

c000efc6 <Computer::disableNMI()>:
c000efc6:	6a 00                	push   0x0
c000efc8:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c000efcc:	e8 07 ff ff ff       	call   c000eed8 <Computer::enableNMI(bool)>
c000efd1:	58                   	pop    eax
c000efd2:	5a                   	pop    edx
c000efd3:	c3                   	ret    

c000efd4 <Computer::writeCMOS(unsigned char, unsigned char)>:
c000efd4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000efd8:	80 b8 58 01 00 00 01 	cmp    BYTE PTR [eax+0x158],0x1
c000efdf:	19 c0                	sbb    eax,eax
c000efe1:	83 e0 80             	and    eax,0xffffff80
c000efe4:	0b 44 24 08          	or     eax,DWORD PTR [esp+0x8]
c000efe8:	e6 70                	out    0x70,al
c000efea:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000efee:	e6 71                	out    0x71,al
c000eff0:	c3                   	ret    
c000eff1:	90                   	nop

c000eff2 <Computer::handleNMI()>:
c000eff2:	56                   	push   esi
c000eff3:	53                   	push   ebx
c000eff4:	83 ec 10             	sub    esp,0x10
c000eff7:	e4 92                	in     al,0x92
c000eff9:	89 c6                	mov    esi,eax
c000effb:	e4 61                	in     al,0x61
c000effd:	68 6a aa 02 c0       	push   0xc002aa6a
c000f002:	88 c3                	mov    bl,al
c000f004:	e8 3e 3e 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000f009:	83 c4 10             	add    esp,0x10
c000f00c:	83 e6 10             	and    esi,0x10
c000f00f:	75 0d                	jne    c000f01e <Computer::handleNMI()+0x2c>
c000f011:	f6 c3 40             	test   bl,0x40
c000f014:	75 1d                	jne    c000f033 <Computer::handleNMI()+0x41>
c000f016:	84 db                	test   bl,bl
c000f018:	78 2d                	js     c000f047 <Computer::handleNMI()+0x55>
c000f01a:	58                   	pop    eax
c000f01b:	5b                   	pop    ebx
c000f01c:	5e                   	pop    esi
c000f01d:	c3                   	ret    
c000f01e:	83 ec 0c             	sub    esp,0xc
c000f021:	68 7b aa 02 c0       	push   0xc002aa7b
c000f026:	e8 d6 b7 00 00       	call   c001a801 <Krnl::panic(char const*)>
c000f02b:	83 c4 10             	add    esp,0x10
c000f02e:	f6 c3 40             	test   bl,0x40
c000f031:	74 e3                	je     c000f016 <Computer::handleNMI()+0x24>
c000f033:	83 ec 0c             	sub    esp,0xc
c000f036:	68 88 aa 02 c0       	push   0xc002aa88
c000f03b:	e8 c1 b7 00 00       	call   c001a801 <Krnl::panic(char const*)>
c000f040:	83 c4 10             	add    esp,0x10
c000f043:	84 db                	test   bl,bl
c000f045:	79 d3                	jns    c000f01a <Computer::handleNMI()+0x28>
c000f047:	c7 44 24 10 92 aa 02 c0 	mov    DWORD PTR [esp+0x10],0xc002aa92
c000f04f:	5a                   	pop    edx
c000f050:	5b                   	pop    ebx
c000f051:	5e                   	pop    esi
c000f052:	e9 aa b7 00 00       	jmp    c001a801 <Krnl::panic(char const*)>
c000f057:	90                   	nop

c000f058 <Computer::setDiskActivityLight(int, bool)>:
c000f058:	56                   	push   esi
c000f059:	53                   	push   ebx
c000f05a:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f05e:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c000f063:	77 1b                	ja     c000f080 <Computer::setDiskActivityLight(int, bool)+0x28>
c000f065:	e4 92                	in     al,0x92
c000f067:	bb 40 00 00 00       	mov    ebx,0x40
c000f06c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c000f070:	89 da                	mov    edx,ebx
c000f072:	d3 e2                	shl    edx,cl
c000f074:	89 f1                	mov    ecx,esi
c000f076:	f7 d2                	not    edx
c000f078:	d3 e3                	shl    ebx,cl
c000f07a:	21 d0                	and    eax,edx
c000f07c:	09 d8                	or     eax,ebx
c000f07e:	e6 92                	out    0x92,al
c000f080:	5b                   	pop    ebx
c000f081:	5e                   	pop    esi
c000f082:	c3                   	ret    
c000f083:	90                   	nop

c000f084 <GDTEntry::setBase(unsigned int)>:
c000f084:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f088:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f08c:	89 c1                	mov    ecx,eax
c000f08e:	66 89 42 02          	mov    WORD PTR [edx+0x2],ax
c000f092:	c1 e9 10             	shr    ecx,0x10
c000f095:	c1 e8 18             	shr    eax,0x18
c000f098:	88 4a 04             	mov    BYTE PTR [edx+0x4],cl
c000f09b:	88 42 07             	mov    BYTE PTR [edx+0x7],al
c000f09e:	c3                   	ret    
c000f09f:	90                   	nop

c000f0a0 <GDTEntry::setLimit(unsigned int)>:
c000f0a0:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000f0a4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f0a8:	8a 51 06             	mov    dl,BYTE PTR [ecx+0x6]
c000f0ab:	66 89 01             	mov    WORD PTR [ecx],ax
c000f0ae:	83 e2 f0             	and    edx,0xfffffff0
c000f0b1:	c1 e8 10             	shr    eax,0x10
c000f0b4:	83 e0 0f             	and    eax,0xf
c000f0b7:	09 d0                	or     eax,edx
c000f0b9:	88 41 06             	mov    BYTE PTR [ecx+0x6],al
c000f0bc:	c3                   	ret    
c000f0bd:	90                   	nop

c000f0be <GDT::GDT()>:
c000f0be:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0c2:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0c8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f0cc:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c000f0d2:	90                   	nop
c000f0d3:	c3                   	ret    

c000f0d4 <GDT::addEntry(GDTEntry)>:
c000f0d4:	53                   	push   ebx
c000f0d5:	83 ec 0c             	sub    esp,0xc
c000f0d8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000f0dc:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0de:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
c000f0e5:	52                   	push   edx
c000f0e6:	50                   	push   eax
c000f0e7:	68 cc aa 02 c0       	push   0xc002aacc
c000f0ec:	e8 56 3d 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000f0f1:	8b 03                	mov    eax,DWORD PTR [ebx]
c000f0f3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c000f0f7:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c000f0fb:	89 54 c3 04          	mov    DWORD PTR [ebx+eax*8+0x4],edx
c000f0ff:	89 4c c3 08          	mov    DWORD PTR [ebx+eax*8+0x8],ecx
c000f103:	8d 50 01             	lea    edx,[eax+0x1]
c000f106:	c1 e0 03             	shl    eax,0x3
c000f109:	89 13                	mov    DWORD PTR [ebx],edx
c000f10b:	83 c4 18             	add    esp,0x18
c000f10e:	5b                   	pop    ebx
c000f10f:	c3                   	ret    

c000f110 <GDT::getNumberOfEntries()>:
c000f110:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f114:	8b 00                	mov    eax,DWORD PTR [eax]
c000f116:	c3                   	ret    
c000f117:	90                   	nop

c000f118 <GDT::flush()>:
c000f118:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f11c:	8b 10                	mov    edx,DWORD PTR [eax]
c000f11e:	83 c0 04             	add    eax,0x4
c000f121:	8d 14 d5 ff ff ff ff 	lea    edx,[edx*8-0x1]
c000f128:	a3 52 ee 02 c0       	mov    ds:0xc002ee52,eax
c000f12d:	66 89 15 50 ee 02 c0 	mov    WORD PTR ds:0xc002ee50,dx
c000f134:	e9 17 13 ff ff       	jmp    c0000450 <loadGDT>
c000f139:	90                   	nop

c000f13a <GDT::setup()>:
c000f13a:	55                   	push   ebp
c000f13b:	57                   	push   edi
c000f13c:	56                   	push   esi
c000f13d:	53                   	push   ebx
c000f13e:	83 ec 3c             	sub    esp,0x3c
c000f141:	8b 6c 24 50          	mov    ebp,DWORD PTR [esp+0x50]
c000f145:	6a 00                	push   0x0
c000f147:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c000f14b:	53                   	push   ebx
c000f14c:	e8 33 ff ff ff       	call   c000f084 <GDTEntry::setBase(unsigned int)>
c000f151:	6a 00                	push   0x0
c000f153:	53                   	push   ebx
c000f154:	e8 47 ff ff ff       	call   c000f0a0 <GDTEntry::setLimit(unsigned int)>
c000f159:	81 64 24 2c ff 00 0f ff 	and    DWORD PTR [esp+0x2c],0xff0f00ff
c000f161:	6a 00                	push   0x0
c000f163:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c000f167:	53                   	push   ebx
c000f168:	e8 17 ff ff ff       	call   c000f084 <GDTEntry::setBase(unsigned int)>
c000f16d:	68 ff ff ff 00       	push   0xffffff
c000f172:	53                   	push   ebx
c000f173:	e8 28 ff ff ff       	call   c000f0a0 <GDTEntry::setLimit(unsigned int)>
c000f178:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c000f17c:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f181:	0d 00 9a c0 00       	or     eax,0xc09a00
c000f186:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c000f18a:	83 c4 20             	add    esp,0x20
c000f18d:	6a 00                	push   0x0
c000f18f:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c000f193:	53                   	push   ebx
c000f194:	e8 eb fe ff ff       	call   c000f084 <GDTEntry::setBase(unsigned int)>
c000f199:	68 ff ff ff 00       	push   0xffffff
c000f19e:	53                   	push   ebx
c000f19f:	e8 fc fe ff ff       	call   c000f0a0 <GDTEntry::setLimit(unsigned int)>
c000f1a4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000f1a8:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c000f1ac:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c000f1b0:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c000f1b4:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c000f1b8:	25 ff 01 1f ff       	and    eax,0xff1f01ff
c000f1bd:	0d 00 92 c0 00       	or     eax,0xc09200
c000f1c2:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c000f1c6:	89 d8                	mov    eax,ebx
c000f1c8:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c000f1cc:	80 cc 60             	or     ah,0x60
c000f1cf:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c000f1d3:	83 c4 0c             	add    esp,0xc
c000f1d6:	89 f8                	mov    eax,edi
c000f1d8:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1dc:	80 cc 60             	or     ah,0x60
c000f1df:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f1e3:	89 c7                	mov    edi,eax
c000f1e5:	55                   	push   ebp
c000f1e6:	e8 e9 fe ff ff       	call   c000f0d4 <GDT::addEntry(GDTEntry)>
c000f1eb:	83 c4 0c             	add    esp,0xc
c000f1ee:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1f2:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f1f6:	55                   	push   ebp
c000f1f7:	e8 d8 fe ff ff       	call   c000f0d4 <GDT::addEntry(GDTEntry)>
c000f1fc:	83 c4 0c             	add    esp,0xc
c000f1ff:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f203:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c000f207:	55                   	push   ebp
c000f208:	e8 c7 fe ff ff       	call   c000f0d4 <GDT::addEntry(GDTEntry)>
c000f20d:	83 c4 0c             	add    esp,0xc
c000f210:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f214:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f218:	53                   	push   ebx
c000f219:	51                   	push   ecx
c000f21a:	55                   	push   ebp
c000f21b:	e8 b4 fe ff ff       	call   c000f0d4 <GDT::addEntry(GDTEntry)>
c000f220:	83 c4 0c             	add    esp,0xc
c000f223:	57                   	push   edi
c000f224:	56                   	push   esi
c000f225:	55                   	push   ebp
c000f226:	e8 a9 fe ff ff       	call   c000f0d4 <GDT::addEntry(GDTEntry)>
c000f22b:	89 2c 24             	mov    DWORD PTR [esp],ebp
c000f22e:	e8 e5 fe ff ff       	call   c000f118 <GDT::flush()>
c000f233:	83 c4 4c             	add    esp,0x4c
c000f236:	5b                   	pop    ebx
c000f237:	5e                   	pop    esi
c000f238:	5f                   	pop    edi
c000f239:	5d                   	pop    ebp
c000f23a:	c3                   	ret    

c000f23b <idleFunction(void*)>:
c000f23b:	53                   	push   ebx
c000f23c:	83 ec 08             	sub    esp,0x8
c000f23f:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c000f244:	48                   	dec    eax
c000f245:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c000f24a:	75 01                	jne    c000f24d <idleFunction(void*)+0x12>
c000f24c:	fb                   	sti    
c000f24d:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c000f252:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c000f258:	f6 82 92 11 00 00 04 	test   BYTE PTR [edx+0x1192],0x4
c000f25f:	74 3c                	je     c000f29d <idleFunction(void*)+0x62>
c000f261:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c000f268:	74 33                	je     c000f29d <idleFunction(void*)+0x62>
c000f26a:	31 db                	xor    ebx,ebx
c000f26c:	52                   	push   edx
c000f26d:	52                   	push   edx
c000f26e:	68 e1 00 00 00       	push   0xe1
c000f273:	50                   	push   eax
c000f274:	e8 d5 fb ff ff       	call   c000ee4e <Computer::rdmsr(unsigned int)>
c000f279:	53                   	push   ebx
c000f27a:	83 e0 02             	and    eax,0x2
c000f27d:	50                   	push   eax
c000f27e:	68 e1 00 00 00       	push   0xe1
c000f283:	ff 35 48 ee 02 c0    	push   DWORD PTR ds:0xc002ee48
c000f289:	e8 ec fb ff ff       	call   c000ee7a <Computer::wrmsr(unsigned int, unsigned long long)>
c000f28e:	83 c4 20             	add    esp,0x20
c000f291:	e8 e9 0f ff ff       	call   c000027f <doTPAUSE>
c000f296:	e8 35 9c 01 00       	call   c0028ed0 <idleCommon()>
c000f29b:	eb f4                	jmp    c000f291 <idleFunction(void*)+0x56>
c000f29d:	fb                   	sti    
c000f29e:	f4                   	hlt    
c000f29f:	e8 2c 9c 01 00       	call   c0028ed0 <idleCommon()>
c000f2a4:	eb f7                	jmp    c000f29d <idleFunction(void*)+0x62>

c000f2a6 <IDTEntry::IDTEntry(bool)>:
c000f2a6:	83 ec 04             	sub    esp,0x4
c000f2a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f2ad:	88 04 24             	mov    BYTE PTR [esp],al
c000f2b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2b4:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
c000f2ba:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2be:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
c000f2c2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2c6:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2c9:	83 e2 f0             	and    edx,0xfffffff0
c000f2cc:	83 ca 0e             	or     edx,0xe
c000f2cf:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2d2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2d6:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2d9:	83 e2 ef             	and    edx,0xffffffef
c000f2dc:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f2df:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c000f2e3:	74 04                	je     c000f2e9 <IDTEntry::IDTEntry(bool)+0x43>
c000f2e5:	b2 03                	mov    dl,0x3
c000f2e7:	eb 02                	jmp    c000f2eb <IDTEntry::IDTEntry(bool)+0x45>
c000f2e9:	b2 00                	mov    dl,0x0
c000f2eb:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f2ef:	83 e2 03             	and    edx,0x3
c000f2f2:	88 d1                	mov    cl,dl
c000f2f4:	c1 e1 05             	shl    ecx,0x5
c000f2f7:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f2fa:	83 e2 9f             	and    edx,0xffffff9f
c000f2fd:	09 ca                	or     edx,ecx
c000f2ff:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f302:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f306:	8a 50 05             	mov    dl,BYTE PTR [eax+0x5]
c000f309:	83 ca 80             	or     edx,0xffffff80
c000f30c:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
c000f30f:	90                   	nop
c000f310:	83 c4 04             	add    esp,0x4
c000f313:	c3                   	ret    

c000f314 <IDTEntry::setOffset(unsigned int)>:
c000f314:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c000f318:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f31c:	66 89 02             	mov    WORD PTR [edx],ax
c000f31f:	c1 e8 10             	shr    eax,0x10
c000f322:	66 89 42 06          	mov    WORD PTR [edx+0x6],ax
c000f326:	c3                   	ret    
c000f327:	90                   	nop

c000f328 <IDT::IDT()>:
c000f328:	90                   	nop
c000f329:	c3                   	ret    

c000f32a <IDT::getPointerToInvalidOpcodeEntryForF00F()>:
c000f32a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f32e:	83 c0 30             	add    eax,0x30
c000f331:	c3                   	ret    

c000f332 <IDT::addEntry(IDTEntry, int)>:
c000f332:	53                   	push   ebx
c000f333:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f337:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c000f33b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000f33f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000f343:	89 0c d0             	mov    DWORD PTR [eax+edx*8],ecx
c000f346:	89 5c d0 04          	mov    DWORD PTR [eax+edx*8+0x4],ebx
c000f34a:	5b                   	pop    ebx
c000f34b:	c3                   	ret    

c000f34c <IDT::addEntry(int, void (*)(), bool)>:
c000f34c:	53                   	push   ebx
c000f34d:	83 ec 10             	sub    esp,0x10
c000f350:	0f b6 44 24 24       	movzx  eax,BYTE PTR [esp+0x24]
c000f355:	50                   	push   eax
c000f356:	8d 5c 24 0c          	lea    ebx,[esp+0xc]
c000f35a:	53                   	push   ebx
c000f35b:	e8 46 ff ff ff       	call   c000f2a6 <IDTEntry::IDTEntry(bool)>
c000f360:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c000f364:	53                   	push   ebx
c000f365:	e8 aa ff ff ff       	call   c000f314 <IDTEntry::setOffset(unsigned int)>
c000f36a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c000f36e:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f372:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c000f376:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c000f37a:	e8 b3 ff ff ff       	call   c000f332 <IDT::addEntry(IDTEntry, int)>
c000f37f:	83 c4 30             	add    esp,0x30
c000f382:	5b                   	pop    ebx
c000f383:	c3                   	ret    

c000f384 <IDT::flush()>:
c000f384:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000f388:	66 c7 05 58 ee 02 c0 ff 07 	mov    WORD PTR ds:0xc002ee58,0x7ff
c000f391:	a3 5a ee 02 c0       	mov    ds:0xc002ee5a,eax
c000f396:	0f 01 1d 58 ee 02 c0 	lidtd  ds:0xc002ee58
c000f39d:	c3                   	ret    

c000f39e <IDT::setup()>:
c000f39e:	57                   	push   edi
c000f39f:	56                   	push   esi
c000f3a0:	53                   	push   ebx
c000f3a1:	83 ec 10             	sub    esp,0x10
c000f3a4:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f3a8:	6a 00                	push   0x0
c000f3aa:	68 70 04 00 c0       	push   0xc0000470
c000f3af:	6a 00                	push   0x0
c000f3b1:	53                   	push   ebx
c000f3b2:	e8 95 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f3b7:	6a 00                	push   0x0
c000f3b9:	68 80 04 00 c0       	push   0xc0000480
c000f3be:	6a 01                	push   0x1
c000f3c0:	53                   	push   ebx
c000f3c1:	e8 86 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f3c6:	83 c4 20             	add    esp,0x20
c000f3c9:	6a 00                	push   0x0
c000f3cb:	68 8a 04 00 c0       	push   0xc000048a
c000f3d0:	6a 02                	push   0x2
c000f3d2:	53                   	push   ebx
c000f3d3:	e8 74 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f3d8:	6a 00                	push   0x0
c000f3da:	68 94 04 00 c0       	push   0xc0000494
c000f3df:	6a 03                	push   0x3
c000f3e1:	53                   	push   ebx
c000f3e2:	e8 65 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f3e7:	83 c4 20             	add    esp,0x20
c000f3ea:	6a 00                	push   0x0
c000f3ec:	68 9e 04 00 c0       	push   0xc000049e
c000f3f1:	6a 04                	push   0x4
c000f3f3:	53                   	push   ebx
c000f3f4:	e8 53 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f3f9:	6a 00                	push   0x0
c000f3fb:	68 a8 04 00 c0       	push   0xc00004a8
c000f400:	6a 05                	push   0x5
c000f402:	53                   	push   ebx
c000f403:	e8 44 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f408:	83 c4 20             	add    esp,0x20
c000f40b:	6a 00                	push   0x0
c000f40d:	68 b2 04 00 c0       	push   0xc00004b2
c000f412:	6a 06                	push   0x6
c000f414:	53                   	push   ebx
c000f415:	e8 32 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f41a:	6a 00                	push   0x0
c000f41c:	68 bc 04 00 c0       	push   0xc00004bc
c000f421:	6a 07                	push   0x7
c000f423:	53                   	push   ebx
c000f424:	e8 23 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f429:	83 c4 20             	add    esp,0x20
c000f42c:	6a 00                	push   0x0
c000f42e:	68 c6 04 00 c0       	push   0xc00004c6
c000f433:	6a 08                	push   0x8
c000f435:	53                   	push   ebx
c000f436:	e8 11 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f43b:	6a 00                	push   0x0
c000f43d:	68 ce 04 00 c0       	push   0xc00004ce
c000f442:	6a 09                	push   0x9
c000f444:	53                   	push   ebx
c000f445:	e8 02 ff ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f44a:	83 c4 20             	add    esp,0x20
c000f44d:	6a 00                	push   0x0
c000f44f:	68 d8 04 00 c0       	push   0xc00004d8
c000f454:	6a 0a                	push   0xa
c000f456:	53                   	push   ebx
c000f457:	e8 f0 fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f45c:	6a 00                	push   0x0
c000f45e:	68 e0 04 00 c0       	push   0xc00004e0
c000f463:	6a 0b                	push   0xb
c000f465:	53                   	push   ebx
c000f466:	e8 e1 fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f46b:	83 c4 20             	add    esp,0x20
c000f46e:	6a 00                	push   0x0
c000f470:	68 e8 04 00 c0       	push   0xc00004e8
c000f475:	6a 0c                	push   0xc
c000f477:	53                   	push   ebx
c000f478:	e8 cf fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f47d:	6a 00                	push   0x0
c000f47f:	68 f0 04 00 c0       	push   0xc00004f0
c000f484:	6a 0d                	push   0xd
c000f486:	53                   	push   ebx
c000f487:	e8 c0 fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f48c:	83 c4 20             	add    esp,0x20
c000f48f:	6a 00                	push   0x0
c000f491:	68 f8 04 00 c0       	push   0xc00004f8
c000f496:	6a 0e                	push   0xe
c000f498:	53                   	push   ebx
c000f499:	e8 ae fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f49e:	6a 00                	push   0x0
c000f4a0:	68 00 05 00 c0       	push   0xc0000500
c000f4a5:	6a 0f                	push   0xf
c000f4a7:	53                   	push   ebx
c000f4a8:	e8 9f fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f4ad:	83 c4 20             	add    esp,0x20
c000f4b0:	6a 00                	push   0x0
c000f4b2:	68 0a 05 00 c0       	push   0xc000050a
c000f4b7:	6a 10                	push   0x10
c000f4b9:	53                   	push   ebx
c000f4ba:	e8 8d fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f4bf:	6a 00                	push   0x0
c000f4c1:	68 14 05 00 c0       	push   0xc0000514
c000f4c6:	6a 11                	push   0x11
c000f4c8:	53                   	push   ebx
c000f4c9:	e8 7e fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f4ce:	83 c4 20             	add    esp,0x20
c000f4d1:	6a 00                	push   0x0
c000f4d3:	68 1e 05 00 c0       	push   0xc000051e
c000f4d8:	6a 12                	push   0x12
c000f4da:	53                   	push   ebx
c000f4db:	e8 6c fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f4e0:	6a 01                	push   0x1
c000f4e2:	68 b8 05 00 c0       	push   0xc00005b8
c000f4e7:	6a 60                	push   0x60
c000f4e9:	53                   	push   ebx
c000f4ea:	e8 5d fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f4ef:	83 c4 20             	add    esp,0x20
c000f4f2:	6a 00                	push   0x0
c000f4f4:	68 bf 05 00 c0       	push   0xc00005bf
c000f4f9:	6a 20                	push   0x20
c000f4fb:	53                   	push   ebx
c000f4fc:	e8 4b fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f501:	6a 00                	push   0x0
c000f503:	68 aa 05 00 c0       	push   0xc00005aa
c000f508:	6a 21                	push   0x21
c000f50a:	53                   	push   ebx
c000f50b:	e8 3c fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f510:	83 c4 20             	add    esp,0x20
c000f513:	6a 00                	push   0x0
c000f515:	68 b1 05 00 c0       	push   0xc00005b1
c000f51a:	6a 22                	push   0x22
c000f51c:	53                   	push   ebx
c000f51d:	e8 2a fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f522:	6a 00                	push   0x0
c000f524:	68 28 05 00 c0       	push   0xc0000528
c000f529:	6a 23                	push   0x23
c000f52b:	53                   	push   ebx
c000f52c:	e8 1b fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f531:	83 c4 20             	add    esp,0x20
c000f534:	6a 00                	push   0x0
c000f536:	68 32 05 00 c0       	push   0xc0000532
c000f53b:	6a 24                	push   0x24
c000f53d:	53                   	push   ebx
c000f53e:	e8 09 fe ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f543:	6a 00                	push   0x0
c000f545:	68 3c 05 00 c0       	push   0xc000053c
c000f54a:	6a 25                	push   0x25
c000f54c:	53                   	push   ebx
c000f54d:	e8 fa fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f552:	83 c4 20             	add    esp,0x20
c000f555:	6a 00                	push   0x0
c000f557:	68 46 05 00 c0       	push   0xc0000546
c000f55c:	6a 26                	push   0x26
c000f55e:	53                   	push   ebx
c000f55f:	e8 e8 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f564:	6a 00                	push   0x0
c000f566:	68 50 05 00 c0       	push   0xc0000550
c000f56b:	6a 27                	push   0x27
c000f56d:	53                   	push   ebx
c000f56e:	e8 d9 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f573:	83 c4 20             	add    esp,0x20
c000f576:	6a 00                	push   0x0
c000f578:	68 5a 05 00 c0       	push   0xc000055a
c000f57d:	6a 28                	push   0x28
c000f57f:	53                   	push   ebx
c000f580:	e8 c7 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f585:	6a 00                	push   0x0
c000f587:	68 64 05 00 c0       	push   0xc0000564
c000f58c:	6a 29                	push   0x29
c000f58e:	53                   	push   ebx
c000f58f:	e8 b8 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f594:	83 c4 20             	add    esp,0x20
c000f597:	6a 00                	push   0x0
c000f599:	68 6e 05 00 c0       	push   0xc000056e
c000f59e:	6a 2a                	push   0x2a
c000f5a0:	53                   	push   ebx
c000f5a1:	e8 a6 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f5a6:	6a 00                	push   0x0
c000f5a8:	68 78 05 00 c0       	push   0xc0000578
c000f5ad:	6a 2b                	push   0x2b
c000f5af:	53                   	push   ebx
c000f5b0:	e8 97 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f5b5:	83 c4 20             	add    esp,0x20
c000f5b8:	6a 00                	push   0x0
c000f5ba:	68 82 05 00 c0       	push   0xc0000582
c000f5bf:	6a 2c                	push   0x2c
c000f5c1:	53                   	push   ebx
c000f5c2:	e8 85 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f5c7:	6a 00                	push   0x0
c000f5c9:	68 8c 05 00 c0       	push   0xc000058c
c000f5ce:	6a 2d                	push   0x2d
c000f5d0:	53                   	push   ebx
c000f5d1:	e8 76 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f5d6:	83 c4 20             	add    esp,0x20
c000f5d9:	6a 00                	push   0x0
c000f5db:	68 96 05 00 c0       	push   0xc0000596
c000f5e0:	6a 2e                	push   0x2e
c000f5e2:	53                   	push   ebx
c000f5e3:	e8 64 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f5e8:	6a 00                	push   0x0
c000f5ea:	68 a0 05 00 c0       	push   0xc00005a0
c000f5ef:	6a 2f                	push   0x2f
c000f5f1:	53                   	push   ebx
c000f5f2:	e8 55 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f5f7:	83 c4 20             	add    esp,0x20
c000f5fa:	6a 00                	push   0x0
c000f5fc:	68 f5 05 00 c0       	push   0xc00005f5
c000f601:	6a 30                	push   0x30
c000f603:	53                   	push   ebx
c000f604:	e8 43 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f609:	6a 00                	push   0x0
c000f60b:	68 ff 05 00 c0       	push   0xc00005ff
c000f610:	6a 31                	push   0x31
c000f612:	53                   	push   ebx
c000f613:	e8 34 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f618:	83 c4 20             	add    esp,0x20
c000f61b:	6a 00                	push   0x0
c000f61d:	68 09 06 00 c0       	push   0xc0000609
c000f622:	6a 32                	push   0x32
c000f624:	53                   	push   ebx
c000f625:	e8 22 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f62a:	6a 00                	push   0x0
c000f62c:	68 13 06 00 c0       	push   0xc0000613
c000f631:	6a 33                	push   0x33
c000f633:	53                   	push   ebx
c000f634:	e8 13 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f639:	83 c4 20             	add    esp,0x20
c000f63c:	6a 00                	push   0x0
c000f63e:	68 1d 06 00 c0       	push   0xc000061d
c000f643:	6a 34                	push   0x34
c000f645:	53                   	push   ebx
c000f646:	e8 01 fd ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f64b:	6a 00                	push   0x0
c000f64d:	68 27 06 00 c0       	push   0xc0000627
c000f652:	6a 35                	push   0x35
c000f654:	53                   	push   ebx
c000f655:	e8 f2 fc ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f65a:	83 c4 20             	add    esp,0x20
c000f65d:	6a 00                	push   0x0
c000f65f:	68 31 06 00 c0       	push   0xc0000631
c000f664:	6a 36                	push   0x36
c000f666:	53                   	push   ebx
c000f667:	e8 e0 fc ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f66c:	6a 00                	push   0x0
c000f66e:	68 3b 06 00 c0       	push   0xc000063b
c000f673:	6a 37                	push   0x37
c000f675:	53                   	push   ebx
c000f676:	e8 d1 fc ff ff       	call   c000f34c <IDT::addEntry(int, void (*)(), bool)>
c000f67b:	83 c4 1c             	add    esp,0x1c
c000f67e:	6a 03                	push   0x3
c000f680:	6a 02                	push   0x2
c000f682:	ff 35 d0 ef 02 c0    	push   DWORD PTR ds:0xc002efd0
c000f688:	e8 ed 2c 00 00       	call   c001237a <VAS::allocatePages(int, int)>
c000f68d:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c000f694:	89 c6                	mov    esi,eax
c000f696:	e8 0d 02 00 00       	call   c000f8a8 <malloc>
c000f69b:	81 c6 00 20 00 00    	add    esi,0x2000
c000f6a1:	89 04 24             	mov    DWORD PTR [esp],eax
c000f6a4:	89 c7                	mov    edi,eax
c000f6a6:	e8 c7 1c 00 00       	call   c0011372 <TSS::TSS()>
c000f6ab:	83 c4 0c             	add    esp,0xc
c000f6ae:	68 c6 04 00 c0       	push   0xc00004c6
c000f6b3:	56                   	push   esi
c000f6b4:	57                   	push   edi
c000f6b5:	e8 f8 1c 00 00       	call   c00113b2 <TSS::setup(unsigned long, unsigned long)>
c000f6ba:	89 c6                	mov    esi,eax
c000f6bc:	58                   	pop    eax
c000f6bd:	5a                   	pop    edx
c000f6be:	6a 00                	push   0x0
c000f6c0:	8d 44 24 14          	lea    eax,[esp+0x14]
c000f6c4:	50                   	push   eax
c000f6c5:	e8 dc fb ff ff       	call   c000f2a6 <IDTEntry::IDTEntry(bool)>
c000f6ca:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6ce:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c000f6d3:	66 c7 44 24 18 00 00 	mov    WORD PTR [esp+0x18],0x0
c000f6da:	81 e2 ff e0 00 00    	and    edx,0xe0ff
c000f6e0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c000f6e4:	80 ce 05             	or     dh,0x5
c000f6e7:	89 43 40             	mov    DWORD PTR [ebx+0x40],eax
c000f6ea:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c000f6ee:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c000f6f2:	89 53 44             	mov    DWORD PTR [ebx+0x44],edx
c000f6f5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c000f6f8:	e8 87 fc ff ff       	call   c000f384 <IDT::flush()>
c000f6fd:	83 c4 20             	add    esp,0x20
c000f700:	5b                   	pop    ebx
c000f701:	5e                   	pop    esi
c000f702:	5f                   	pop    edi
c000f703:	c3                   	ret    

c000f704 <sbrk>:
c000f704:	55                   	push   ebp
c000f705:	57                   	push   edi
c000f706:	56                   	push   esi
c000f707:	53                   	push   ebx
c000f708:	83 ec 1c             	sub    esp,0x1c
c000f70b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c000f70f:	85 c0                	test   eax,eax
c000f711:	74 3e                	je     c000f751 <sbrk+0x4d>
c000f713:	78 43                	js     c000f758 <sbrk+0x54>
c000f715:	8b 15 48 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee48
c000f71b:	8b 92 60 01 00 00    	mov    edx,DWORD PTR [edx+0x160]
c000f721:	8a 92 91 11 00 00    	mov    dl,BYTE PTR [edx+0x1191]
c000f727:	83 e2 01             	and    edx,0x1
c000f72a:	88 54 24 07          	mov    BYTE PTR [esp+0x7],dl
c000f72e:	8b 0d 74 dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002dd74
c000f734:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c000f738:	05 ff 0f 00 00       	add    eax,0xfff
c000f73d:	89 c2                	mov    edx,eax
c000f73f:	78 2f                	js     c000f770 <sbrk+0x6c>
c000f741:	c1 fa 0c             	sar    edx,0xc
c000f744:	89 d7                	mov    edi,edx
c000f746:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c000f74a:	be 00 00 00 00       	mov    esi,0x0
c000f74f:	eb 36                	jmp    c000f787 <sbrk+0x83>
c000f751:	a1 74 dd 02 c0       	mov    eax,ds:0xc002dd74
c000f756:	eb 73                	jmp    c000f7cb <sbrk+0xc7>
c000f758:	83 ec 08             	sub    esp,0x8
c000f75b:	50                   	push   eax
c000f75c:	68 e8 aa 02 c0       	push   0xc002aae8
c000f761:	e8 e1 36 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000f766:	83 c4 10             	add    esp,0x10
c000f769:	b8 ff ff ff ff       	mov    eax,0xffffffff
c000f76e:	eb 5b                	jmp    c000f7cb <sbrk+0xc7>
c000f770:	8d 90 ff 0f 00 00    	lea    edx,[eax+0xfff]
c000f776:	eb c9                	jmp    c000f741 <sbrk+0x3d>
c000f778:	81 05 74 dd 02 c0 00 10 00 00 	add    DWORD PTR ds:0xc002dd74,0x1000
c000f782:	46                   	inc    esi
c000f783:	39 f7                	cmp    edi,esi
c000f785:	74 33                	je     c000f7ba <sbrk+0xb6>
c000f787:	8b 1d d0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efd0
c000f78d:	8b 2d 74 dd 02 c0    	mov    ebp,DWORD PTR ds:0xc002dd74
c000f793:	e8 7c 07 00 00       	call   c000ff14 <Phys::allocatePage()>
c000f798:	68 01 0c 00 00       	push   0xc01
c000f79d:	55                   	push   ebp
c000f79e:	50                   	push   eax
c000f79f:	53                   	push   ebx
c000f7a0:	e8 d3 2a 00 00       	call   c0012278 <VAS::mapPage(unsigned long, unsigned long, int)>
c000f7a5:	83 c4 10             	add    esp,0x10
c000f7a8:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7ad:	74 c9                	je     c000f778 <sbrk+0x74>
c000f7af:	8b 1d 74 dd 02 c0    	mov    ebx,DWORD PTR ds:0xc002dd74
c000f7b5:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f7b8:	eb be                	jmp    c000f778 <sbrk+0x74>
c000f7ba:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c000f7bf:	75 12                	jne    c000f7d3 <sbrk+0xcf>
c000f7c1:	0f 20 d8             	mov    eax,cr3
c000f7c4:	0f 22 d8             	mov    cr3,eax
c000f7c7:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000f7cb:	83 c4 1c             	add    esp,0x1c
c000f7ce:	5b                   	pop    ebx
c000f7cf:	5e                   	pop    esi
c000f7d0:	5f                   	pop    edi
c000f7d1:	5d                   	pop    ebp
c000f7d2:	c3                   	ret    
c000f7d3:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000f7d7:	89 cb                	mov    ebx,ecx
c000f7d9:	c1 eb 0a             	shr    ebx,0xa
c000f7dc:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c000f7e2:	81 eb 00 00 40 00    	sub    ebx,0x400000
c000f7e8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000f7ec:	c1 e0 0c             	shl    eax,0xc
c000f7ef:	01 c8                	add    eax,ecx
c000f7f1:	c1 e8 0a             	shr    eax,0xa
c000f7f4:	25 00 f0 ff ff       	and    eax,0xfffff000
c000f7f9:	2d 00 00 40 00       	sub    eax,0x400000
c000f7fe:	39 c3                	cmp    ebx,eax
c000f800:	77 c5                	ja     c000f7c7 <sbrk+0xc3>
c000f802:	0f 01 3b             	invlpg BYTE PTR [ebx]
c000f805:	81 c3 00 10 00 00    	add    ebx,0x1000
c000f80b:	39 d8                	cmp    eax,ebx
c000f80d:	73 f3                	jae    c000f802 <sbrk+0xfe>
c000f80f:	eb b6                	jmp    c000f7c7 <sbrk+0xc3>

c000f811 <mmap>:
c000f811:	83 ec 18             	sub    esp,0x18
c000f814:	68 18 ab 02 c0       	push   0xc002ab18
c000f819:	e8 e3 af 00 00       	call   c001a801 <Krnl::panic(char const*)>
c000f81e:	b8 00 00 00 00       	mov    eax,0x0
c000f823:	83 c4 1c             	add    esp,0x1c
c000f826:	c3                   	ret    

c000f827 <munmap>:
c000f827:	83 ec 18             	sub    esp,0x18
c000f82a:	68 1d ab 02 c0       	push   0xc002ab1d
c000f82f:	e8 cd af 00 00       	call   c001a801 <Krnl::panic(char const*)>
c000f834:	b8 00 00 00 00       	mov    eax,0x0
c000f839:	83 c4 1c             	add    esp,0x1c
c000f83c:	c3                   	ret    

c000f83d <liballoc_lock()>:
c000f83d:	fa                   	cli    
c000f83e:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c000f844:	b8 00 00 00 00       	mov    eax,0x0
c000f849:	c3                   	ret    

c000f84a <liballoc_unlock()>:
c000f84a:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c000f84f:	48                   	dec    eax
c000f850:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c000f855:	75 01                	jne    c000f858 <liballoc_unlock()+0xe>
c000f857:	fb                   	sti    
c000f858:	b8 00 00 00 00       	mov    eax,0x0
c000f85d:	c3                   	ret    

c000f85e <liballoc_alloc(int)>:
c000f85e:	83 ec 10             	sub    esp,0x10
c000f861:	68 01 08 00 00       	push   0x801
c000f866:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f86a:	ff 35 d0 ef 02 c0    	push   DWORD PTR ds:0xc002efd0
c000f870:	e8 05 2b 00 00       	call   c001237a <VAS::allocatePages(int, int)>
c000f875:	83 c4 1c             	add    esp,0x1c
c000f878:	c3                   	ret    

c000f879 <liballoc_free(void*, int)>:
c000f879:	83 ec 14             	sub    esp,0x14
c000f87c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c000f880:	ff 35 d0 ef 02 c0    	push   DWORD PTR ds:0xc002efd0
c000f886:	e8 99 27 00 00       	call   c0012024 <VAS::freeAllocatedPages(unsigned long)>
c000f88b:	b8 00 00 00 00       	mov    eax,0x0
c000f890:	83 c4 1c             	add    esp,0x1c
c000f893:	c3                   	ret    

c000f894 <realloc>:
c000f894:	83 ec 14             	sub    esp,0x14
c000f897:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f89b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f89f:	e8 a4 1d ff ff       	call   c0001648 <dlrealloc>
c000f8a4:	83 c4 1c             	add    esp,0x1c
c000f8a7:	c3                   	ret    

c000f8a8 <malloc>:
c000f8a8:	83 ec 18             	sub    esp,0x18
c000f8ab:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8af:	e8 57 18 ff ff       	call   c000110b <dlmalloc>
c000f8b4:	83 c4 1c             	add    esp,0x1c
c000f8b7:	c3                   	ret    

c000f8b8 <free>:
c000f8b8:	83 ec 18             	sub    esp,0x18
c000f8bb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8bf:	e8 ec 14 ff ff       	call   c0000db0 <dlfree>
c000f8c4:	83 c4 1c             	add    esp,0x1c
c000f8c7:	c3                   	ret    

c000f8c8 <rfree>:
c000f8c8:	83 ec 18             	sub    esp,0x18
c000f8cb:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c000f8cf:	e8 dc 14 ff ff       	call   c0000db0 <dlfree>
c000f8d4:	83 c4 1c             	add    esp,0x1c
c000f8d7:	c3                   	ret    

c000f8d8 <calloc>:
c000f8d8:	56                   	push   esi
c000f8d9:	53                   	push   ebx
c000f8da:	83 ec 10             	sub    esp,0x10
c000f8dd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c000f8e1:	0f af 5c 24 1c       	imul   ebx,DWORD PTR [esp+0x1c]
c000f8e6:	53                   	push   ebx
c000f8e7:	e8 bc ff ff ff       	call   c000f8a8 <malloc>
c000f8ec:	89 c6                	mov    esi,eax
c000f8ee:	83 c4 0c             	add    esp,0xc
c000f8f1:	53                   	push   ebx
c000f8f2:	6a 00                	push   0x0
c000f8f4:	50                   	push   eax
c000f8f5:	e8 72 0e ff ff       	call   c000076c <memset>
c000f8fa:	89 f0                	mov    eax,esi
c000f8fc:	83 c4 14             	add    esp,0x14
c000f8ff:	5b                   	pop    ebx
c000f900:	5e                   	pop    esi
c000f901:	c3                   	ret    

c000f902 <hwTextMode_loadInData(VgaText*)>:
c000f902:	55                   	push   ebp
c000f903:	a1 80 dd 02 c0       	mov    eax,ds:0xc002dd80
c000f908:	57                   	push   edi
c000f909:	56                   	push   esi
c000f90a:	53                   	push   ebx
c000f90b:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c000f90f:	8b 57 10             	mov    edx,DWORD PTR [edi+0x10]
c000f912:	8b 4f 0c             	mov    ecx,DWORD PTR [edi+0xc]
c000f915:	85 d2                	test   edx,edx
c000f917:	7e 29                	jle    c000f942 <hwTextMode_loadInData(VgaText*)+0x40>
c000f919:	8d a8 a0 00 00 00    	lea    ebp,[eax+0xa0]
c000f91f:	31 f6                	xor    esi,esi
c000f921:	29 cd                	sub    ebp,ecx
c000f923:	8d 1c 29             	lea    ebx,[ecx+ebp*1]
c000f926:	31 c0                	xor    eax,eax
c000f928:	66 8b 14 41          	mov    dx,WORD PTR [ecx+eax*2]
c000f92c:	66 89 14 43          	mov    WORD PTR [ebx+eax*2],dx
c000f930:	40                   	inc    eax
c000f931:	83 f8 50             	cmp    eax,0x50
c000f934:	75 f2                	jne    c000f928 <hwTextMode_loadInData(VgaText*)+0x26>
c000f936:	81 c1 a0 00 00 00    	add    ecx,0xa0
c000f93c:	46                   	inc    esi
c000f93d:	39 77 10             	cmp    DWORD PTR [edi+0x10],esi
c000f940:	7f e1                	jg     c000f923 <hwTextMode_loadInData(VgaText*)+0x21>
c000f942:	5b                   	pop    ebx
c000f943:	5e                   	pop    esi
c000f944:	5f                   	pop    edi
c000f945:	5d                   	pop    ebp
c000f946:	c3                   	ret    

c000f947 <hwTextMode_loadInTitle(VgaText*, char*)>:
c000f947:	55                   	push   ebp
c000f948:	80 3d e0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eee0,0x0
c000f94f:	57                   	push   edi
c000f950:	56                   	push   esi
c000f951:	53                   	push   ebx
c000f952:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c000f956:	75 44                	jne    c000f99c <hwTextMode_loadInTitle(VgaText*, char*)+0x55>
c000f958:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f95b:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f95e:	8b 15 80 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd80
c000f964:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c000f968:	8d ba a0 00 00 00    	lea    edi,[edx+0xa0]
c000f96e:	eb 08                	jmp    c000f978 <hwTextMode_loadInTitle(VgaText*, char*)+0x31>
c000f970:	8b 6e 3c             	mov    ebp,DWORD PTR [esi+0x3c]
c000f973:	8b 46 38             	mov    eax,DWORD PTR [esi+0x38]
c000f976:	89 da                	mov    edx,ebx
c000f978:	83 e5 0f             	and    ebp,0xf
c000f97b:	c1 e0 04             	shl    eax,0x4
c000f97e:	8d 5a 02             	lea    ebx,[edx+0x2]
c000f981:	0f b6 c0             	movzx  eax,al
c000f984:	41                   	inc    ecx
c000f985:	09 e8                	or     eax,ebp
c000f987:	0f b6 69 ff          	movzx  ebp,BYTE PTR [ecx-0x1]
c000f98b:	c1 e0 08             	shl    eax,0x8
c000f98e:	09 e8                	or     eax,ebp
c000f990:	39 fb                	cmp    ebx,edi
c000f992:	66 89 02             	mov    WORD PTR [edx],ax
c000f995:	75 d9                	jne    c000f970 <hwTextMode_loadInTitle(VgaText*, char*)+0x29>
c000f997:	5b                   	pop    ebx
c000f998:	5e                   	pop    esi
c000f999:	5f                   	pop    edi
c000f99a:	5d                   	pop    ebp
c000f99b:	c3                   	ret    
c000f99c:	c7 46 3c 02 00 00 00 	mov    DWORD PTR [esi+0x3c],0x2
c000f9a3:	c7 46 38 00 00 00 00 	mov    DWORD PTR [esi+0x38],0x0
c000f9aa:	31 c0                	xor    eax,eax
c000f9ac:	bd 02 00 00 00       	mov    ebp,0x2
c000f9b1:	eb ab                	jmp    c000f95e <hwTextMode_loadInTitle(VgaText*, char*)+0x17>

c000f9b3 <hwTextMode_showCursor(VgaText*, bool)>:
c000f9b3:	56                   	push   esi
c000f9b4:	80 3d e0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eee0,0x0
c000f9bb:	53                   	push   ebx
c000f9bc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c000f9c0:	75 36                	jne    c000f9f8 <hwTextMode_showCursor(VgaText*, bool)+0x45>
c000f9c2:	84 c0                	test   al,al
c000f9c4:	74 35                	je     c000f9fb <hwTextMode_showCursor(VgaText*, bool)+0x48>
c000f9c6:	bb d4 03 00 00       	mov    ebx,0x3d4
c000f9cb:	b0 0a                	mov    al,0xa
c000f9cd:	89 da                	mov    edx,ebx
c000f9cf:	ee                   	out    dx,al
c000f9d0:	b9 d5 03 00 00       	mov    ecx,0x3d5
c000f9d5:	89 ca                	mov    edx,ecx
c000f9d7:	ec                   	in     al,dx
c000f9d8:	b2 0f                	mov    dl,0xf
c000f9da:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c000f9de:	83 e0 c0             	and    eax,0xffffffc0
c000f9e1:	2b 56 1c             	sub    edx,DWORD PTR [esi+0x1c]
c000f9e4:	09 d0                	or     eax,edx
c000f9e6:	89 ca                	mov    edx,ecx
c000f9e8:	ee                   	out    dx,al
c000f9e9:	b0 0b                	mov    al,0xb
c000f9eb:	89 da                	mov    edx,ebx
c000f9ed:	ee                   	out    dx,al
c000f9ee:	89 ca                	mov    edx,ecx
c000f9f0:	ec                   	in     al,dx
c000f9f1:	83 e0 e0             	and    eax,0xffffffe0
c000f9f4:	83 c8 0f             	or     eax,0xf
c000f9f7:	ee                   	out    dx,al
c000f9f8:	5b                   	pop    ebx
c000f9f9:	5e                   	pop    esi
c000f9fa:	c3                   	ret    
c000f9fb:	b0 0a                	mov    al,0xa
c000f9fd:	ba d4 03 00 00       	mov    edx,0x3d4
c000fa02:	ee                   	out    dx,al
c000fa03:	b0 20                	mov    al,0x20
c000fa05:	ba d5 03 00 00       	mov    edx,0x3d5
c000fa0a:	ee                   	out    dx,al
c000fa0b:	5b                   	pop    ebx
c000fa0c:	5e                   	pop    esi
c000fa0d:	c3                   	ret    

c000fa0e <hwTextMode_update(VgaText*)>:
c000fa0e:	c3                   	ret    

c000fa0f <hwTextMode_updateCursor(VgaText*)>:
c000fa0f:	56                   	push   esi
c000fa10:	80 3d e0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eee0,0x0
c000fa17:	53                   	push   ebx
c000fa18:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c000fa1c:	75 36                	jne    c000fa54 <hwTextMode_updateCursor(VgaText*)+0x45>
c000fa1e:	be d4 03 00 00       	mov    esi,0x3d4
c000fa23:	b9 19 00 00 00       	mov    ecx,0x19
c000fa28:	89 f2                	mov    edx,esi
c000fa2a:	2b 48 10             	sub    ecx,DWORD PTR [eax+0x10]
c000fa2d:	03 48 18             	add    ecx,DWORD PTR [eax+0x18]
c000fa30:	8d 0c 89             	lea    ecx,[ecx+ecx*4]
c000fa33:	c1 e1 04             	shl    ecx,0x4
c000fa36:	03 48 14             	add    ecx,DWORD PTR [eax+0x14]
c000fa39:	b0 0f                	mov    al,0xf
c000fa3b:	ee                   	out    dx,al
c000fa3c:	bb d5 03 00 00       	mov    ebx,0x3d5
c000fa41:	88 c8                	mov    al,cl
c000fa43:	89 da                	mov    edx,ebx
c000fa45:	ee                   	out    dx,al
c000fa46:	b0 0e                	mov    al,0xe
c000fa48:	89 f2                	mov    edx,esi
c000fa4a:	ee                   	out    dx,al
c000fa4b:	89 c8                	mov    eax,ecx
c000fa4d:	89 da                	mov    edx,ebx
c000fa4f:	66 c1 e8 08          	shr    ax,0x8
c000fa53:	ee                   	out    dx,al
c000fa54:	5b                   	pop    ebx
c000fa55:	5e                   	pop    esi
c000fa56:	c3                   	ret    

c000fa57 <hwTextMode_disableBlink(VgaText*, bool)>:
c000fa57:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c000fa5b:	80 3d e0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eee0,0x0
c000fa62:	75 38                	jne    c000fa9c <hwTextMode_disableBlink(VgaText*, bool)+0x45>
c000fa64:	ba da 03 00 00       	mov    edx,0x3da
c000fa69:	84 c0                	test   al,al
c000fa6b:	75 18                	jne    c000fa85 <hwTextMode_disableBlink(VgaText*, bool)+0x2e>
c000fa6d:	ec                   	in     al,dx
c000fa6e:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa73:	b0 30                	mov    al,0x30
c000fa75:	89 ca                	mov    edx,ecx
c000fa77:	ee                   	out    dx,al
c000fa78:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa7d:	ec                   	in     al,dx
c000fa7e:	83 c8 08             	or     eax,0x8
c000fa81:	89 ca                	mov    edx,ecx
c000fa83:	ee                   	out    dx,al
c000fa84:	c3                   	ret    
c000fa85:	ec                   	in     al,dx
c000fa86:	b9 c0 03 00 00       	mov    ecx,0x3c0
c000fa8b:	b0 30                	mov    al,0x30
c000fa8d:	89 ca                	mov    edx,ecx
c000fa8f:	ee                   	out    dx,al
c000fa90:	ba c1 03 00 00       	mov    edx,0x3c1
c000fa95:	ec                   	in     al,dx
c000fa96:	83 e0 f7             	and    eax,0xfffffff7
c000fa99:	89 ca                	mov    edx,ecx
c000fa9b:	ee                   	out    dx,al
c000fa9c:	c3                   	ret    

c000fa9d <hwTextMode_scrollScreen(VgaText*)>:
c000fa9d:	55                   	push   ebp
c000fa9e:	57                   	push   edi
c000fa9f:	56                   	push   esi
c000faa0:	53                   	push   ebx
c000faa1:	83 ec 1c             	sub    esp,0x1c
c000faa4:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000faa8:	80 3d e0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eee0,0x0
c000faaf:	74 0e                	je     c000fabf <hwTextMode_scrollScreen(VgaText*)+0x22>
c000fab1:	c7 41 34 02 00 00 00 	mov    DWORD PTR [ecx+0x34],0x2
c000fab8:	c7 41 30 00 00 00 00 	mov    DWORD PTR [ecx+0x30],0x0
c000fabf:	a1 80 dd 02 c0       	mov    eax,ds:0xc002dd80
c000fac4:	bd 02 00 00 00       	mov    ebp,0x2
c000fac9:	05 a0 00 00 00       	add    eax,0xa0
c000face:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c000fad2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c000fad6:	31 c0                	xor    eax,eax
c000fad8:	eb 0b                	jmp    c000fae5 <hwTextMode_scrollScreen(VgaText*)+0x48>
c000fada:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fae0:	74 51                	je     c000fb33 <hwTextMode_scrollScreen(VgaText*)+0x96>
c000fae2:	43                   	inc    ebx
c000fae3:	89 f0                	mov    eax,esi
c000fae5:	8a 93 a0 00 00 00    	mov    dl,BYTE PTR [ebx+0xa0]
c000faeb:	8d bb a0 00 00 00    	lea    edi,[ebx+0xa0]
c000faf1:	88 13                	mov    BYTE PTR [ebx],dl
c000faf3:	8d 70 01             	lea    esi,[eax+0x1]
c000faf6:	83 fd 18             	cmp    ebp,0x18
c000faf9:	75 df                	jne    c000fada <hwTextMode_scrollScreen(VgaText*)+0x3d>
c000fafb:	a8 01                	test   al,0x1
c000fafd:	75 13                	jne    c000fb12 <hwTextMode_scrollScreen(VgaText*)+0x75>
c000faff:	c6 07 20             	mov    BYTE PTR [edi],0x20
c000fb02:	81 fe a0 00 00 00    	cmp    esi,0xa0
c000fb08:	75 d8                	jne    c000fae2 <hwTextMode_scrollScreen(VgaText*)+0x45>
c000fb0a:	83 c4 1c             	add    esp,0x1c
c000fb0d:	5b                   	pop    ebx
c000fb0e:	5e                   	pop    esi
c000fb0f:	5f                   	pop    edi
c000fb10:	5d                   	pop    ebp
c000fb11:	c3                   	ret    
c000fb12:	83 ec 08             	sub    esp,0x8
c000fb15:	0f b6 41 30          	movzx  eax,BYTE PTR [ecx+0x30]
c000fb19:	50                   	push   eax
c000fb1a:	89 4c 24 3c          	mov    DWORD PTR [esp+0x3c],ecx
c000fb1e:	0f b6 41 34          	movzx  eax,BYTE PTR [ecx+0x34]
c000fb22:	50                   	push   eax
c000fb23:	e8 00 0c 00 00       	call   c0010728 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb28:	83 c4 10             	add    esp,0x10
c000fb2b:	88 07                	mov    BYTE PTR [edi],al
c000fb2d:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c000fb31:	eb cf                	jmp    c000fb02 <hwTextMode_scrollScreen(VgaText*)+0x65>
c000fb33:	45                   	inc    ebp
c000fb34:	81 44 24 0c a0 00 00 00 	add    DWORD PTR [esp+0xc],0xa0
c000fb3c:	eb 94                	jmp    c000fad2 <hwTextMode_scrollScreen(VgaText*)+0x35>

c000fb3e <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)>:
c000fb3e:	57                   	push   edi
c000fb3f:	80 3d e0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eee0,0x0
c000fb46:	56                   	push   esi
c000fb47:	53                   	push   ebx
c000fb48:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c000fb4c:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c000fb50:	75 62                	jne    c000fbb4 <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x76>
c000fb52:	0f b6 54 24 1c       	movzx  edx,BYTE PTR [esp+0x1c]
c000fb57:	0f b6 44 24 18       	movzx  eax,BYTE PTR [esp+0x18]
c000fb5c:	83 ec 08             	sub    esp,0x8
c000fb5f:	52                   	push   edx
c000fb60:	50                   	push   eax
c000fb61:	e8 c2 0b 00 00       	call   c0010728 <VgaText::combineColours(unsigned char, unsigned char)>
c000fb66:	5a                   	pop    edx
c000fb67:	0f b6 c0             	movzx  eax,al
c000fb6a:	59                   	pop    ecx
c000fb6b:	50                   	push   eax
c000fb6c:	0f be c3             	movsx  eax,bl
c000fb6f:	50                   	push   eax
c000fb70:	e8 59 0c 00 00       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c000fb75:	83 c4 10             	add    esp,0x10
c000fb78:	8b 35 80 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd80
c000fb7e:	80 3d e0 ee 02 c0 00 	cmp    BYTE PTR ds:0xc002eee0,0x0
c000fb85:	74 07                	je     c000fb8e <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x50>
c000fb87:	66 0f be c3          	movsx  ax,bl
c000fb8b:	80 cc 02             	or     ah,0x2
c000fb8e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c000fb92:	ba 19 00 00 00       	mov    edx,0x19
c000fb97:	2b 51 10             	sub    edx,DWORD PTR [ecx+0x10]
c000fb9a:	8d 0c bf             	lea    ecx,[edi+edi*4]
c000fb9d:	8d 14 92             	lea    edx,[edx+edx*4]
c000fba0:	c1 e1 04             	shl    ecx,0x4
c000fba3:	c1 e2 04             	shl    edx,0x4
c000fba6:	03 4c 24 20          	add    ecx,DWORD PTR [esp+0x20]
c000fbaa:	01 ca                	add    edx,ecx
c000fbac:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c000fbb0:	5b                   	pop    ebx
c000fbb1:	5e                   	pop    esi
c000fbb2:	5f                   	pop    edi
c000fbb3:	c3                   	ret    
c000fbb4:	b8 02 00 00 00       	mov    eax,0x2
c000fbb9:	31 d2                	xor    edx,edx
c000fbbb:	eb 9f                	jmp    c000fb5c <hwTextMode_writeCharacter(VgaText*, char, VgaColour, VgaColour, int, int)+0x1e>

c000fbbd <setupTextMode()>:
c000fbbd:	a1 10 04 00 00       	mov    eax,ds:0x410
c000fbc2:	83 e0 30             	and    eax,0x30
c000fbc5:	66 83 f8 30          	cmp    ax,0x30
c000fbc9:	75 11                	jne    c000fbdc <setupTextMode()+0x1f>
c000fbcb:	81 2d 80 dd 02 c0 00 80 00 00 	sub    DWORD PTR ds:0xc002dd80,0x8000
c000fbd5:	c6 05 e0 ee 02 c0 01 	mov    BYTE PTR ds:0xc002eee0,0x1
c000fbdc:	c7 05 18 ef 02 c0 57 fa 00 c0 	mov    DWORD PTR ds:0xc002ef18,0xc000fa57
c000fbe6:	c7 05 04 ef 02 c0 02 f9 00 c0 	mov    DWORD PTR ds:0xc002ef04,0xc000f902
c000fbf0:	c7 05 00 ef 02 c0 47 f9 00 c0 	mov    DWORD PTR ds:0xc002ef00,0xc000f947
c000fbfa:	c7 05 0c ef 02 c0 9d fa 00 c0 	mov    DWORD PTR ds:0xc002ef0c,0xc000fa9d
c000fc04:	c7 05 14 ef 02 c0 b3 f9 00 c0 	mov    DWORD PTR ds:0xc002ef14,0xc000f9b3
c000fc0e:	c7 05 08 ef 02 c0 0e fa 00 c0 	mov    DWORD PTR ds:0xc002ef08,0xc000fa0e
c000fc18:	c7 05 10 ef 02 c0 0f fa 00 c0 	mov    DWORD PTR ds:0xc002ef10,0xc000fa0f
c000fc22:	c7 05 1c ef 02 c0 3e fb 00 c0 	mov    DWORD PTR ds:0xc002ef1c,0xc000fb3e
c000fc2c:	c3                   	ret    

c000fc2d <kernel_main>:
c000fc2d:	57                   	push   edi
c000fc2e:	bf f9 03 00 00       	mov    edi,0x3f9
c000fc33:	56                   	push   esi
c000fc34:	89 fa                	mov    edx,edi
c000fc36:	53                   	push   ebx
c000fc37:	31 f6                	xor    esi,esi
c000fc39:	83 ec 2c             	sub    esp,0x2c
c000fc3c:	89 f0                	mov    eax,esi
c000fc3e:	ee                   	out    dx,al
c000fc3f:	bb fb 03 00 00       	mov    ebx,0x3fb
c000fc44:	b0 80                	mov    al,0x80
c000fc46:	89 da                	mov    edx,ebx
c000fc48:	ee                   	out    dx,al
c000fc49:	b1 03                	mov    cl,0x3
c000fc4b:	ba f8 03 00 00       	mov    edx,0x3f8
c000fc50:	88 c8                	mov    al,cl
c000fc52:	ee                   	out    dx,al
c000fc53:	89 f0                	mov    eax,esi
c000fc55:	89 fa                	mov    edx,edi
c000fc57:	ee                   	out    dx,al
c000fc58:	88 c8                	mov    al,cl
c000fc5a:	89 da                	mov    edx,ebx
c000fc5c:	ee                   	out    dx,al
c000fc5d:	b0 c7                	mov    al,0xc7
c000fc5f:	ba fa 03 00 00       	mov    edx,0x3fa
c000fc64:	ee                   	out    dx,al
c000fc65:	b0 0b                	mov    al,0xb
c000fc67:	ba fc 03 00 00       	mov    edx,0x3fc
c000fc6c:	ee                   	out    dx,al
c000fc6d:	68 24 ab 02 c0       	push   0xc002ab24
c000fc72:	e8 d0 31 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000fc77:	e8 3e 09 00 00       	call   c00105ba <installVgaTextImplementation()>
c000fc7c:	e8 3c ff ff ff       	call   c000fbbd <setupTextMode()>
c000fc81:	a1 24 05 00 00       	mov    eax,ds:0x524
c000fc86:	05 ff 0f 00 00       	add    eax,0xfff
c000fc8b:	25 00 f0 ff ff       	and    eax,0xfffff000
c000fc90:	89 04 24             	mov    DWORD PTR [esp],eax
c000fc93:	e8 f5 03 00 00       	call   c001008d <Phys::physicalMemorySetup(unsigned int)>
c000fc98:	e8 63 1f 00 00       	call   c0011c00 <Virt::virtualMemorySetup()>
c000fc9d:	8b 1d 00 05 00 00    	mov    ebx,DWORD PTR ds:0x500
c000fca3:	83 c4 10             	add    esp,0x10
c000fca6:	3b 1d 04 05 00 00    	cmp    ebx,DWORD PTR ds:0x504
c000fcac:	75 0e                	jne    c000fcbc <kernel_main+0x8f>
c000fcae:	89 d8                	mov    eax,ebx
c000fcb0:	25 48 03 00 00       	and    eax,0x348
c000fcb5:	3d 00 03 00 00       	cmp    eax,0x300
c000fcba:	74 10                	je     c000fccc <kernel_main+0x9f>
c000fcbc:	83 ec 0c             	sub    esp,0xc
c000fcbf:	68 b5 c4 02 c0       	push   0xc002c4b5
c000fcc4:	e8 38 ab 00 00       	call   c001a801 <Krnl::panic(char const*)>
c000fcc9:	83 c4 10             	add    esp,0x10
c000fccc:	83 ec 0c             	sub    esp,0xc
c000fccf:	89 1d 60 ee 02 c0    	mov    DWORD PTR ds:0xc002ee60,ebx
c000fcd5:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c000fcd9:	53                   	push   ebx
c000fcda:	e8 6d 21 00 00       	call   c0011e4c <VAS::VAS()>
c000fcdf:	89 1d d0 ef 02 c0    	mov    DWORD PTR ds:0xc002efd0,ebx
c000fce5:	e8 36 03 ff ff       	call   c0000020 <callGlobalConstructors>
c000fcea:	c7 04 24 3b ab 02 c0 	mov    DWORD PTR [esp],0xc002ab3b
c000fcf1:	e8 51 31 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000fcf6:	e8 84 1f 00 00       	call   c0011c7f <Virt::swappingSetup()>
c000fcfb:	c7 04 24 ec 01 00 00 	mov    DWORD PTR [esp],0x1ec
c000fd02:	e8 a1 fb ff ff       	call   c000f8a8 <malloc>
c000fd07:	89 04 24             	mov    DWORD PTR [esp],eax
c000fd0a:	89 c6                	mov    esi,eax
c000fd0c:	e8 8f ea ff ff       	call   c000e7a0 <Computer::Computer()>
c000fd11:	58                   	pop    eax
c000fd12:	89 35 48 ee 02 c0    	mov    DWORD PTR ds:0xc002ee48,esi
c000fd18:	5a                   	pop    edx
c000fd19:	56                   	push   esi
c000fd1a:	68 58 ab 02 c0       	push   0xc002ab58
c000fd1f:	e8 23 31 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000fd24:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c000fd29:	8b 10                	mov    edx,DWORD PTR [eax]
c000fd2b:	6a 00                	push   0x0
c000fd2d:	6a 00                	push   0x0
c000fd2f:	6a 00                	push   0x0
c000fd31:	50                   	push   eax
c000fd32:	ff 52 08             	call   DWORD PTR [edx+0x8]
c000fd35:	83 c4 14             	add    esp,0x14
c000fd38:	53                   	push   ebx
c000fd39:	e8 be 23 00 00       	call   c00120fc <VAS::~VAS()>
c000fd3e:	c7 04 24 6b ab 02 c0 	mov    DWORD PTR [esp],0xc002ab6b
c000fd45:	e8 b7 aa 00 00       	call   c001a801 <Krnl::panic(char const*)>
c000fd4a:	83 c4 30             	add    esp,0x30
c000fd4d:	5b                   	pop    ebx
c000fd4e:	5e                   	pop    esi
c000fd4f:	5f                   	pop    edi
c000fd50:	c3                   	ret    

c000fd51 <Phys::allocateDMA(unsigned long)>:
c000fd51:	55                   	push   ebp
c000fd52:	31 d2                	xor    edx,edx
c000fd54:	57                   	push   edi
c000fd55:	31 ed                	xor    ebp,ebp
c000fd57:	56                   	push   esi
c000fd58:	31 c9                	xor    ecx,ecx
c000fd5a:	53                   	push   ebx
c000fd5b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c000fd5f:	8d b0 ff 0f 00 00    	lea    esi,[eax+0xfff]
c000fd65:	31 c0                	xor    eax,eax
c000fd67:	c1 ee 0c             	shr    esi,0xc
c000fd6a:	eb 17                	jmp    c000fd83 <Phys::allocateDMA(unsigned long)+0x32>
c000fd6c:	85 c9                	test   ecx,ecx
c000fd6e:	75 04                	jne    c000fd74 <Phys::allocateDMA(unsigned long)+0x23>
c000fd70:	89 d5                	mov    ebp,edx
c000fd72:	89 d0                	mov    eax,edx
c000fd74:	8d 59 01             	lea    ebx,[ecx+0x1]
c000fd77:	39 de                	cmp    esi,ebx
c000fd79:	74 20                	je     c000fd9b <Phys::allocateDMA(unsigned long)+0x4a>
c000fd7b:	42                   	inc    edx
c000fd7c:	89 d9                	mov    ecx,ebx
c000fd7e:	83 fa 2f             	cmp    edx,0x2f
c000fd81:	7f 11                	jg     c000fd94 <Phys::allocateDMA(unsigned long)+0x43>
c000fd83:	80 ba a0 ee 02 c0 00 	cmp    BYTE PTR [edx-0x3ffd1160],0x0
c000fd8a:	74 e0                	je     c000fd6c <Phys::allocateDMA(unsigned long)+0x1b>
c000fd8c:	31 c9                	xor    ecx,ecx
c000fd8e:	42                   	inc    edx
c000fd8f:	83 fa 2f             	cmp    edx,0x2f
c000fd92:	7e ef                	jle    c000fd83 <Phys::allocateDMA(unsigned long)+0x32>
c000fd94:	5b                   	pop    ebx
c000fd95:	31 c0                	xor    eax,eax
c000fd97:	5e                   	pop    esi
c000fd98:	5f                   	pop    edi
c000fd99:	5d                   	pop    ebp
c000fd9a:	c3                   	ret    
c000fd9b:	8d 14 30             	lea    edx,[eax+esi*1]
c000fd9e:	89 d7                	mov    edi,edx
c000fda0:	4f                   	dec    edi
c000fda1:	79 03                	jns    c000fda6 <Phys::allocateDMA(unsigned long)+0x55>
c000fda3:	8d 7a 0e             	lea    edi,[edx+0xe]
c000fda6:	c1 ff 04             	sar    edi,0x4
c000fda9:	89 c2                	mov    edx,eax
c000fdab:	c1 fa 04             	sar    edx,0x4
c000fdae:	39 fa                	cmp    edx,edi
c000fdb0:	75 2f                	jne    c000fde1 <Phys::allocateDMA(unsigned long)+0x90>
c000fdb2:	85 db                	test   ebx,ebx
c000fdb4:	74 1a                	je     c000fdd0 <Phys::allocateDMA(unsigned long)+0x7f>
c000fdb6:	be a0 ee 02 c0       	mov    esi,0xc002eea0
c000fdbb:	8d 90 a0 ee 02 c0    	lea    edx,[eax-0x3ffd1160]
c000fdc1:	f7 d6                	not    esi
c000fdc3:	29 c6                	sub    esi,eax
c000fdc5:	c6 02 01             	mov    BYTE PTR [edx],0x1
c000fdc8:	42                   	inc    edx
c000fdc9:	8d 1c 16             	lea    ebx,[esi+edx*1]
c000fdcc:	39 d9                	cmp    ecx,ebx
c000fdce:	7f f5                	jg     c000fdc5 <Phys::allocateDMA(unsigned long)+0x74>
c000fdd0:	85 ff                	test   edi,edi
c000fdd2:	74 13                	je     c000fde7 <Phys::allocateDMA(unsigned long)+0x96>
c000fdd4:	5b                   	pop    ebx
c000fdd5:	05 50 20 0c 00       	add    eax,0xc2050
c000fdda:	5e                   	pop    esi
c000fddb:	c1 e0 0c             	shl    eax,0xc
c000fdde:	5f                   	pop    edi
c000fddf:	5d                   	pop    ebp
c000fde0:	c3                   	ret    
c000fde1:	89 ea                	mov    edx,ebp
c000fde3:	31 c9                	xor    ecx,ecx
c000fde5:	eb a7                	jmp    c000fd8e <Phys::allocateDMA(unsigned long)+0x3d>
c000fde7:	5b                   	pop    ebx
c000fde8:	c1 e0 0c             	shl    eax,0xc
c000fdeb:	5e                   	pop    esi
c000fdec:	2d 00 00 ff 3d       	sub    eax,0x3dff0000
c000fdf1:	5f                   	pop    edi
c000fdf2:	5d                   	pop    ebp
c000fdf3:	c3                   	ret    

c000fdf4 <Phys::freeDMA(unsigned long, unsigned long)>:
c000fdf4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c000fdf8:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c000fdfc:	81 c1 ff 0f 00 00    	add    ecx,0xfff
c000fe02:	c1 e9 0c             	shr    ecx,0xc
c000fe05:	3d ff ff 05 c2       	cmp    eax,0xc205ffff
c000fe0a:	76 25                	jbe    c000fe31 <Phys::freeDMA(unsigned long, unsigned long)+0x3d>
c000fe0c:	05 00 00 fa 3d       	add    eax,0x3dfa0000
c000fe11:	c1 e8 0c             	shr    eax,0xc
c000fe14:	8d 50 10             	lea    edx,[eax+0x10]
c000fe17:	85 c9                	test   ecx,ecx
c000fe19:	74 15                	je     c000fe30 <Phys::freeDMA(unsigned long, unsigned long)+0x3c>
c000fe1b:	8d 82 a0 ee 02 c0    	lea    eax,[edx-0x3ffd1160]
c000fe21:	8d 94 11 a0 ee 02 c0 	lea    edx,[ecx+edx*1-0x3ffd1160]
c000fe28:	c6 00 00             	mov    BYTE PTR [eax],0x0
c000fe2b:	40                   	inc    eax
c000fe2c:	39 d0                	cmp    eax,edx
c000fe2e:	75 f8                	jne    c000fe28 <Phys::freeDMA(unsigned long, unsigned long)+0x34>
c000fe30:	c3                   	ret    
c000fe31:	8d 90 00 00 ff 3d    	lea    edx,[eax+0x3dff0000]
c000fe37:	c1 ea 0c             	shr    edx,0xc
c000fe3a:	eb db                	jmp    c000fe17 <Phys::freeDMA(unsigned long, unsigned long)+0x23>

c000fe3c <Phys::setPageState(unsigned long, bool)>:
c000fe3c:	56                   	push   esi
c000fe3d:	ba 01 00 00 00       	mov    edx,0x1
c000fe42:	53                   	push   ebx
c000fe43:	8b 35 78 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd78
c000fe49:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe4d:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c000fe51:	89 c8                	mov    eax,ecx
c000fe53:	83 e1 07             	and    ecx,0x7
c000fe56:	c1 e8 03             	shr    eax,0x3
c000fe59:	d3 e3                	shl    ebx,cl
c000fe5b:	01 c6                	add    esi,eax
c000fe5d:	d3 e2                	shl    edx,cl
c000fe5f:	f7 d2                	not    edx
c000fe61:	20 16                	and    BYTE PTR [esi],dl
c000fe63:	03 05 78 dd 02 c0    	add    eax,DWORD PTR ds:0xc002dd78
c000fe69:	08 18                	or     BYTE PTR [eax],bl
c000fe6b:	5b                   	pop    ebx
c000fe6c:	5e                   	pop    esi
c000fe6d:	c3                   	ret    

c000fe6e <Phys::getPageState(unsigned long)>:
c000fe6e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c000fe72:	8b 15 78 dd 02 c0    	mov    edx,DWORD PTR ds:0xc002dd78
c000fe78:	89 c8                	mov    eax,ecx
c000fe7a:	83 e1 07             	and    ecx,0x7
c000fe7d:	c1 e8 03             	shr    eax,0x3
c000fe80:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
c000fe84:	d3 f8                	sar    eax,cl
c000fe86:	83 e0 01             	and    eax,0x1
c000fe89:	c3                   	ret    

c000fe8a <Phys::freePage(unsigned long)>:
c000fe8a:	53                   	push   ebx
c000fe8b:	83 ec 08             	sub    esp,0x8
c000fe8e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c000fe92:	81 fb ff ff 07 00    	cmp    ebx,0x7ffff
c000fe98:	76 57                	jbe    c000fef1 <Phys::freePage(unsigned long)+0x67>
c000fe9a:	c1 eb 0c             	shr    ebx,0xc
c000fe9d:	53                   	push   ebx
c000fe9e:	e8 cb ff ff ff       	call   c000fe6e <Phys::getPageState(unsigned long)>
c000fea3:	5a                   	pop    edx
c000fea4:	84 c0                	test   al,al
c000fea6:	74 5b                	je     c000ff03 <Phys::freePage(unsigned long)+0x79>
c000fea8:	a1 90 ee 02 c0       	mov    eax,ds:0xc002ee90
c000fead:	48                   	dec    eax
c000feae:	a3 90 ee 02 c0       	mov    ds:0xc002ee90,eax
c000feb3:	8d 04 80             	lea    eax,[eax+eax*4]
c000feb6:	8d 04 80             	lea    eax,[eax+eax*4]
c000feb9:	c1 e0 02             	shl    eax,0x2
c000febc:	99                   	cdq    
c000febd:	f7 3d 94 ee 02 c0    	idiv   DWORD PTR ds:0xc002ee94
c000fec3:	39 05 8c ee 02 c0    	cmp    DWORD PTR ds:0xc002ee8c,eax
c000fec9:	75 13                	jne    c000fede <Phys::freePage(unsigned long)+0x54>
c000fecb:	83 ec 08             	sub    esp,0x8
c000fece:	6a 00                	push   0x0
c000fed0:	53                   	push   ebx
c000fed1:	e8 66 ff ff ff       	call   c000fe3c <Phys::setPageState(unsigned long, bool)>
c000fed6:	83 c4 10             	add    esp,0x10
c000fed9:	83 c4 08             	add    esp,0x8
c000fedc:	5b                   	pop    ebx
c000fedd:	c3                   	ret    
c000fede:	83 ec 0c             	sub    esp,0xc
c000fee1:	a3 8c ee 02 c0       	mov    ds:0xc002ee8c,eax
c000fee6:	50                   	push   eax
c000fee7:	e8 fc 09 00 00       	call   c00108e8 <VgaText::updateRAMUsageDisplay(int)>
c000feec:	83 c4 10             	add    esp,0x10
c000feef:	eb da                	jmp    c000fecb <Phys::freePage(unsigned long)+0x41>
c000fef1:	68 00 10 00 00       	push   0x1000
c000fef6:	53                   	push   ebx
c000fef7:	e8 f8 fe ff ff       	call   c000fdf4 <Phys::freeDMA(unsigned long, unsigned long)>
c000fefc:	59                   	pop    ecx
c000fefd:	5b                   	pop    ebx
c000fefe:	83 c4 08             	add    esp,0x8
c000ff01:	5b                   	pop    ebx
c000ff02:	c3                   	ret    
c000ff03:	c7 44 24 10 86 ab 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ab86
c000ff0b:	83 c4 08             	add    esp,0x8
c000ff0e:	5b                   	pop    ebx
c000ff0f:	e9 ed a8 00 00       	jmp    c001a801 <Krnl::panic(char const*)>

c000ff14 <Phys::allocatePage()>:
c000ff14:	56                   	push   esi
c000ff15:	53                   	push   ebx
c000ff16:	51                   	push   ecx
c000ff17:	8b 35 84 ee 02 c0    	mov    esi,DWORD PTR ds:0xc002ee84
c000ff1d:	89 f3                	mov    ebx,esi
c000ff1f:	eb 0a                	jmp    c000ff2b <Phys::allocatePage()+0x17>
c000ff21:	89 1d 84 ee 02 c0    	mov    DWORD PTR ds:0xc002ee84,ebx
c000ff27:	39 de                	cmp    esi,ebx
c000ff29:	74 24                	je     c000ff4f <Phys::allocatePage()+0x3b>
c000ff2b:	53                   	push   ebx
c000ff2c:	e8 3d ff ff ff       	call   c000fe6e <Phys::getPageState(unsigned long)>
c000ff31:	5a                   	pop    edx
c000ff32:	84 c0                	test   al,al
c000ff34:	74 77                	je     c000ffad <Phys::allocatePage()+0x99>
c000ff36:	43                   	inc    ebx
c000ff37:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c000ff3d:	75 e2                	jne    c000ff21 <Phys::allocatePage()+0xd>
c000ff3f:	31 db                	xor    ebx,ebx
c000ff41:	c7 05 84 ee 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002ee84,0x0
c000ff4b:	39 de                	cmp    esi,ebx
c000ff4d:	75 dc                	jne    c000ff2b <Phys::allocatePage()+0x17>
c000ff4f:	83 ec 0c             	sub    esp,0xc
c000ff52:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c000ff57:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c000ff5a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c000ff60:	e8 0f 2c 00 00       	call   c0012b74 <VAS::scanForEviction()>
c000ff65:	83 c4 10             	add    esp,0x10
c000ff68:	85 c0                	test   eax,eax
c000ff6a:	75 76                	jne    c000ffe2 <Phys::allocatePage()+0xce>
c000ff6c:	83 ec 0c             	sub    esp,0xc
c000ff6f:	68 9c ab 02 c0       	push   0xc002ab9c
c000ff74:	e8 ce 2e 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c000ff79:	c7 04 24 00 10 00 00 	mov    DWORD PTR [esp],0x1000
c000ff80:	e8 cc fd ff ff       	call   c000fd51 <Phys::allocateDMA(unsigned long)>
c000ff85:	83 c4 10             	add    esp,0x10
c000ff88:	85 c0                	test   eax,eax
c000ff8a:	75 56                	jne    c000ffe2 <Phys::allocatePage()+0xce>
c000ff8c:	83 ec 0c             	sub    esp,0xc
c000ff8f:	68 ad ab 02 c0       	push   0xc002abad
c000ff94:	e8 68 a8 00 00       	call   c001a801 <Krnl::panic(char const*)>
c000ff99:	83 c4 10             	add    esp,0x10
c000ff9c:	8b 1d 84 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee84
c000ffa2:	53                   	push   ebx
c000ffa3:	e8 c6 fe ff ff       	call   c000fe6e <Phys::getPageState(unsigned long)>
c000ffa8:	5a                   	pop    edx
c000ffa9:	84 c0                	test   al,al
c000ffab:	75 89                	jne    c000ff36 <Phys::allocatePage()+0x22>
c000ffad:	6a 01                	push   0x1
c000ffaf:	53                   	push   ebx
c000ffb0:	e8 87 fe ff ff       	call   c000fe3c <Phys::setPageState(unsigned long, bool)>
c000ffb5:	a1 90 ee 02 c0       	mov    eax,ds:0xc002ee90
c000ffba:	59                   	pop    ecx
c000ffbb:	40                   	inc    eax
c000ffbc:	5b                   	pop    ebx
c000ffbd:	a3 90 ee 02 c0       	mov    ds:0xc002ee90,eax
c000ffc2:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffc5:	8d 04 80             	lea    eax,[eax+eax*4]
c000ffc8:	c1 e0 02             	shl    eax,0x2
c000ffcb:	99                   	cdq    
c000ffcc:	f7 3d 94 ee 02 c0    	idiv   DWORD PTR ds:0xc002ee94
c000ffd2:	39 05 8c ee 02 c0    	cmp    DWORD PTR ds:0xc002ee8c,eax
c000ffd8:	75 0c                	jne    c000ffe6 <Phys::allocatePage()+0xd2>
c000ffda:	a1 84 ee 02 c0       	mov    eax,ds:0xc002ee84
c000ffdf:	c1 e0 0c             	shl    eax,0xc
c000ffe2:	5a                   	pop    edx
c000ffe3:	5b                   	pop    ebx
c000ffe4:	5e                   	pop    esi
c000ffe5:	c3                   	ret    
c000ffe6:	83 ec 0c             	sub    esp,0xc
c000ffe9:	a3 8c ee 02 c0       	mov    ds:0xc002ee8c,eax
c000ffee:	50                   	push   eax
c000ffef:	e8 f4 08 00 00       	call   c00108e8 <VgaText::updateRAMUsageDisplay(int)>
c000fff4:	83 c4 10             	add    esp,0x10
c000fff7:	eb e1                	jmp    c000ffda <Phys::allocatePage()+0xc6>

c000fff9 <Phys::allocateContiguousPages(int)>:
c000fff9:	57                   	push   edi
c000fffa:	56                   	push   esi
c000fffb:	53                   	push   ebx
c000fffc:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0010000:	fa                   	cli    
c0010001:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c0010007:	31 db                	xor    ebx,ebx
c0010009:	85 db                	test   ebx,ebx
c001000b:	75 11                	jne    c001001e <Phys::allocateContiguousPages(int)+0x25>
c001000d:	e8 02 ff ff ff       	call   c000ff14 <Phys::allocatePage()>
c0010012:	83 fe 01             	cmp    esi,0x1
c0010015:	89 c7                	mov    edi,eax
c0010017:	74 21                	je     c001003a <Phys::allocateContiguousPages(int)+0x41>
c0010019:	bb 01 00 00 00       	mov    ebx,0x1
c001001e:	e8 f1 fe ff ff       	call   c000ff14 <Phys::allocatePage()>
c0010023:	89 da                	mov    edx,ebx
c0010025:	c1 e2 0c             	shl    edx,0xc
c0010028:	01 fa                	add    edx,edi
c001002a:	39 c2                	cmp    edx,eax
c001002c:	74 20                	je     c001004e <Phys::allocateContiguousPages(int)+0x55>
c001002e:	bb 01 00 00 00       	mov    ebx,0x1
c0010033:	89 c7                	mov    edi,eax
c0010035:	83 fe 01             	cmp    esi,0x1
c0010038:	75 e4                	jne    c001001e <Phys::allocateContiguousPages(int)+0x25>
c001003a:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001003f:	48                   	dec    eax
c0010040:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0010045:	75 01                	jne    c0010048 <Phys::allocateContiguousPages(int)+0x4f>
c0010047:	fb                   	sti    
c0010048:	89 f8                	mov    eax,edi
c001004a:	5b                   	pop    ebx
c001004b:	5e                   	pop    esi
c001004c:	5f                   	pop    edi
c001004d:	c3                   	ret    
c001004e:	43                   	inc    ebx
c001004f:	39 f3                	cmp    ebx,esi
c0010051:	75 b6                	jne    c0010009 <Phys::allocateContiguousPages(int)+0x10>
c0010053:	eb e5                	jmp    c001003a <Phys::allocateContiguousPages(int)+0x41>

c0010055 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>:
c0010055:	56                   	push   esi
c0010056:	53                   	push   ebx
c0010057:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001005b:	39 1d 88 ee 02 c0    	cmp    DWORD PTR ds:0xc002ee88,ebx
c0010061:	73 06                	jae    c0010069 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x14>
c0010063:	89 1d 88 ee 02 c0    	mov    DWORD PTR ds:0xc002ee88,ebx
c0010069:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001006d:	c1 eb 0c             	shr    ebx,0xc
c0010070:	c1 e8 0c             	shr    eax,0xc
c0010073:	39 d8                	cmp    eax,ebx
c0010075:	73 13                	jae    c001008a <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x35>
c0010077:	6a 00                	push   0x0
c0010079:	8d 70 01             	lea    esi,[eax+0x1]
c001007c:	50                   	push   eax
c001007d:	e8 ba fd ff ff       	call   c000fe3c <Phys::setPageState(unsigned long, bool)>
c0010082:	5a                   	pop    edx
c0010083:	89 f0                	mov    eax,esi
c0010085:	59                   	pop    ecx
c0010086:	39 f3                	cmp    ebx,esi
c0010088:	75 ed                	jne    c0010077 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)+0x22>
c001008a:	5b                   	pop    ebx
c001008b:	5e                   	pop    esi
c001008c:	c3                   	ret    

c001008d <Phys::physicalMemorySetup(unsigned int)>:
c001008d:	55                   	push   ebp
c001008e:	57                   	push   edi
c001008f:	56                   	push   esi
c0010090:	53                   	push   ebx
c0010091:	31 db                	xor    ebx,ebx
c0010093:	83 ec 40             	sub    esp,0x40
c0010096:	6a 30                	push   0x30
c0010098:	6a 00                	push   0x0
c001009a:	68 a0 ee 02 c0       	push   0xc002eea0
c001009f:	e8 c8 06 ff ff       	call   c000076c <memset>
c00100a4:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c00100a8:	25 00 f0 ff ff       	and    eax,0xfffff000
c00100ad:	05 00 10 00 00       	add    eax,0x1000
c00100b2:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c00100b6:	83 c4 10             	add    esp,0x10
c00100b9:	83 ec 08             	sub    esp,0x8
c00100bc:	6a 01                	push   0x1
c00100be:	53                   	push   ebx
c00100bf:	43                   	inc    ebx
c00100c0:	e8 77 fd ff ff       	call   c000fe3c <Phys::setPageState(unsigned long, bool)>
c00100c5:	83 c4 10             	add    esp,0x10
c00100c8:	81 fb 00 00 10 00    	cmp    ebx,0x100000
c00100ce:	75 e9                	jne    c00100b9 <Phys::physicalMemorySetup(unsigned int)+0x2c>
c00100d0:	0f b7 05 13 05 00 c2 	movzx  eax,WORD PTR ds:0xc2000513
c00100d7:	66 85 c0             	test   ax,ax
c00100da:	0f 84 8e 01 00 00    	je     c001026e <Phys::physicalMemorySetup(unsigned int)+0x1e1>
c00100e0:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00100e4:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c00100ec:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00100f0:	bb 00 06 00 c2       	mov    ebx,0xc2000600
c00100f5:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c00100f9:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0010101:	eb 15                	jmp    c0010118 <Phys::physicalMemorySetup(unsigned int)+0x8b>
c0010103:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c0010107:	83 c3 18             	add    ebx,0x18
c001010a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001010e:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0010112:	0f 84 66 01 00 00    	je     c001027e <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010118:	8b 7b 04             	mov    edi,DWORD PTR [ebx+0x4]
c001011b:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001011e:	8b 53 0c             	mov    edx,DWORD PTR [ebx+0xc]
c0010121:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010125:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010129:	8b 33                	mov    esi,DWORD PTR [ebx]
c001012b:	8b 6b 10             	mov    ebp,DWORD PTR [ebx+0x10]
c001012e:	01 f0                	add    eax,esi
c0010130:	55                   	push   ebp
c0010131:	11 fa                	adc    edx,edi
c0010133:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010137:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001013b:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001013f:	56                   	push   esi
c0010140:	68 e8 ab 02 c0       	push   0xc002abe8
c0010145:	e8 fd 2c 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001014a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001014e:	83 c4 10             	add    esp,0x10
c0010151:	09 f8                	or     eax,edi
c0010153:	0f 85 25 01 00 00    	jne    c001027e <Phys::physicalMemorySetup(unsigned int)+0x1f1>
c0010159:	4d                   	dec    ebp
c001015a:	75 a7                	jne    c0010103 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001015c:	ba 00 00 08 00       	mov    edx,0x80000
c0010161:	89 c1                	mov    ecx,eax
c0010163:	39 f2                	cmp    edx,esi
c0010165:	19 f9                	sbb    ecx,edi
c0010167:	0f 82 a7 00 00 00    	jb     c0010214 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001016d:	3b 54 24 08          	cmp    edx,DWORD PTR [esp+0x8]
c0010171:	89 c1                	mov    ecx,eax
c0010173:	1b 4c 24 0c          	sbb    ecx,DWORD PTR [esp+0xc]
c0010177:	0f 83 97 00 00 00    	jae    c0010214 <Phys::physicalMemorySetup(unsigned int)+0x187>
c001017d:	ba 00 00 0a 00       	mov    edx,0xa0000
c0010182:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010186:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001018a:	39 fa                	cmp    edx,edi
c001018c:	19 e8                	sbb    eax,ebp
c001018e:	0f 82 14 01 00 00    	jb     c00102a8 <Phys::physicalMemorySetup(unsigned int)+0x21b>
c0010194:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c0010198:	8b 6c 24 0c          	mov    ebp,DWORD PTR [esp+0xc]
c001019c:	81 c7 00 00 f8 ff    	add    edi,0xfff80000
c00101a2:	ba ff 1f 00 00       	mov    edx,0x1fff
c00101a7:	83 d5 ff             	adc    ebp,0xffffffff
c00101aa:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00101ae:	31 c0                	xor    eax,eax
c00101b0:	89 6c 24 1c          	mov    DWORD PTR [esp+0x1c],ebp
c00101b4:	39 fa                	cmp    edx,edi
c00101b6:	89 c1                	mov    ecx,eax
c00101b8:	19 e9                	sbb    ecx,ebp
c00101ba:	0f 83 43 ff ff ff    	jae    c0010103 <Phys::physicalMemorySetup(unsigned int)+0x76>
c00101c0:	be 00 00 08 00       	mov    esi,0x80000
c00101c5:	50                   	push   eax
c00101c6:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00101ca:	57                   	push   edi
c00101cb:	56                   	push   esi
c00101cc:	68 0c ac 02 c0       	push   0xc002ac0c
c00101d1:	e8 71 2c 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00101d6:	5a                   	pop    edx
c00101d7:	59                   	pop    ecx
c00101d8:	57                   	push   edi
c00101d9:	56                   	push   esi
c00101da:	e8 76 fe ff ff       	call   c0010055 <Phys::allowSegmentToBeUsed(unsigned long, unsigned long)>
c00101df:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00101e3:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00101e7:	83 c4 0c             	add    esp,0xc
c00101ea:	0f ac d0 0c          	shrd   eax,edx,0xc
c00101ee:	03 05 94 ee 02 c0    	add    eax,DWORD PTR ds:0xc002ee94
c00101f4:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
c00101fb:	a3 94 ee 02 c0       	mov    ds:0xc002ee94,eax
c0010200:	52                   	push   edx
c0010201:	50                   	push   eax
c0010202:	68 c9 ab 02 c0       	push   0xc002abc9
c0010207:	e8 3b 2c 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001020c:	83 c4 10             	add    esp,0x10
c001020f:	e9 ef fe ff ff       	jmp    c0010103 <Phys::physicalMemorySetup(unsigned int)+0x76>
c0010214:	8b 6c 24 24          	mov    ebp,DWORD PTR [esp+0x24]
c0010218:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001021c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0010220:	39 ea                	cmp    edx,ebp
c0010222:	1b 4c 24 2c          	sbb    ecx,DWORD PTR [esp+0x2c]
c0010226:	0f 82 d7 fe ff ff    	jb     c0010103 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001022c:	ba ff 1f 00 00       	mov    edx,0x1fff
c0010231:	3b 54 24 18          	cmp    edx,DWORD PTR [esp+0x18]
c0010235:	1b 44 24 1c          	sbb    eax,DWORD PTR [esp+0x1c]
c0010239:	0f 83 c4 fe ff ff    	jae    c0010103 <Phys::physicalMemorySetup(unsigned int)+0x76>
c001023f:	39 ee                	cmp    esi,ebp
c0010241:	89 f8                	mov    eax,edi
c0010243:	1b 44 24 2c          	sbb    eax,DWORD PTR [esp+0x2c]
c0010247:	0f 83 78 ff ff ff    	jae    c00101c5 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001024d:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0010251:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010255:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c0010259:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c001025d:	1b 54 24 2c          	sbb    edx,DWORD PTR [esp+0x2c]
c0010261:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0010265:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0010269:	e9 57 ff ff ff       	jmp    c00101c5 <Phys::physicalMemorySetup(unsigned int)+0x138>
c001026e:	83 ec 0c             	sub    esp,0xc
c0010271:	68 bb ab 02 c0       	push   0xc002abbb
c0010276:	e8 86 a5 00 00       	call   c001a801 <Krnl::panic(char const*)>
c001027b:	83 c4 10             	add    esp,0x10
c001027e:	bb 40 01 00 00       	mov    ebx,0x140
c0010283:	83 ec 08             	sub    esp,0x8
c0010286:	6a 00                	push   0x0
c0010288:	53                   	push   ebx
c0010289:	43                   	inc    ebx
c001028a:	e8 ad fb ff ff       	call   c000fe3c <Phys::setPageState(unsigned long, bool)>
c001028f:	ff 05 94 ee 02 c0    	inc    DWORD PTR ds:0xc002ee94
c0010295:	83 c4 10             	add    esp,0x10
c0010298:	81 fb 80 01 00 00    	cmp    ebx,0x180
c001029e:	75 e3                	jne    c0010283 <Phys::physicalMemorySetup(unsigned int)+0x1f6>
c00102a0:	83 c4 3c             	add    esp,0x3c
c00102a3:	5b                   	pop    ebx
c00102a4:	5e                   	pop    esi
c00102a5:	5f                   	pop    edi
c00102a6:	5d                   	pop    ebp
c00102a7:	c3                   	ret    
c00102a8:	c7 44 24 08 00 00 0a 00 	mov    DWORD PTR [esp+0x8],0xa0000
c00102b0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00102b8:	e9 d7 fe ff ff       	jmp    c0010194 <Phys::physicalMemorySetup(unsigned int)+0x107>
c00102bd:	90                   	nop

c00102be <Pipe::isAtty()>:
c00102be:	31 c0                	xor    eax,eax
c00102c0:	c3                   	ret    
c00102c1:	90                   	nop

c00102c2 <Pipe::~Pipe()>:
c00102c2:	83 ec 0c             	sub    esp,0xc
c00102c5:	ba 78 ac 02 c0       	mov    edx,0xc002ac78
c00102ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102ce:	89 10                	mov    DWORD PTR [eax],edx
c00102d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00102d4:	83 ec 0c             	sub    esp,0xc
c00102d7:	50                   	push   eax
c00102d8:	e8 03 15 00 00       	call   c00117e0 <UnixFile::~UnixFile()>
c00102dd:	83 c4 10             	add    esp,0x10
c00102e0:	90                   	nop
c00102e1:	83 c4 0c             	add    esp,0xc
c00102e4:	c3                   	ret    
c00102e5:	90                   	nop

c00102e6 <Pipe::~Pipe()>:
c00102e6:	83 ec 0c             	sub    esp,0xc
c00102e9:	83 ec 0c             	sub    esp,0xc
c00102ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00102f0:	e8 cd ff ff ff       	call   c00102c2 <Pipe::~Pipe()>
c00102f5:	83 c4 10             	add    esp,0x10
c00102f8:	83 ec 08             	sub    esp,0x8
c00102fb:	6a 20                	push   0x20
c00102fd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010301:	e8 61 2a 00 00       	call   c0012d67 <operator delete(void*, unsigned long)>
c0010306:	83 c4 10             	add    esp,0x10
c0010309:	83 c4 0c             	add    esp,0xc
c001030c:	c3                   	ret    
c001030d:	90                   	nop

c001030e <Pipe::read(unsigned long long, void*, int*)>:
c001030e:	55                   	push   ebp
c001030f:	57                   	push   edi
c0010310:	56                   	push   esi
c0010311:	53                   	push   ebx
c0010312:	83 ec 1c             	sub    esp,0x1c
c0010315:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010319:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001031d:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0010321:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0010325:	8b 4b 14             	mov    ecx,DWORD PTR [ebx+0x14]
c0010328:	89 c8                	mov    eax,ecx
c001032a:	99                   	cdq    
c001032b:	80 7b 1c 00          	cmp    BYTE PTR [ebx+0x1c],0x0
c001032f:	74 24                	je     c0010355 <Pipe::read(unsigned long long, void*, int*)+0x47>
c0010331:	39 e9                	cmp    ecx,ebp
c0010333:	89 d1                	mov    ecx,edx
c0010335:	19 f1                	sbb    ecx,esi
c0010337:	73 1c                	jae    c0010355 <Pipe::read(unsigned long long, void*, int*)+0x47>
c0010339:	fa                   	cli    
c001033a:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c0010340:	e8 4b e1 00 00       	call   c001e490 <schedule()>
c0010345:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001034a:	48                   	dec    eax
c001034b:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0010350:	75 d3                	jne    c0010325 <Pipe::read(unsigned long long, void*, int*)+0x17>
c0010352:	fb                   	sti    
c0010353:	eb d0                	jmp    c0010325 <Pipe::read(unsigned long long, void*, int*)+0x17>
c0010355:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c0010359:	39 e8                	cmp    eax,ebp
c001035b:	89 d6                	mov    esi,edx
c001035d:	89 6c 24 08          	mov    DWORD PTR [esp+0x8],ebp
c0010361:	1b 74 24 0c          	sbb    esi,DWORD PTR [esp+0xc]
c0010365:	73 08                	jae    c001036f <Pipe::read(unsigned long long, void*, int*)+0x61>
c0010367:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001036b:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001036f:	8b 73 10             	mov    esi,DWORD PTR [ebx+0x10]
c0010372:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0010375:	29 f1                	sub    ecx,esi
c0010377:	89 c8                	mov    eax,ecx
c0010379:	99                   	cdq    
c001037a:	39 4c 24 08          	cmp    DWORD PTR [esp+0x8],ecx
c001037e:	89 d0                	mov    eax,edx
c0010380:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0010384:	19 c2                	sbb    edx,eax
c0010386:	73 04                	jae    c001038c <Pipe::read(unsigned long long, void*, int*)+0x7e>
c0010388:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001038c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010390:	89 d0                	mov    eax,edx
c0010392:	29 c8                	sub    eax,ecx
c0010394:	85 c9                	test   ecx,ecx
c0010396:	74 06                	je     c001039e <Pipe::read(unsigned long long, void*, int*)+0x90>
c0010398:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c001039b:	fc                   	cld    
c001039c:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001039e:	85 c0                	test   eax,eax
c00103a0:	74 0a                	je     c00103ac <Pipe::read(unsigned long long, void*, int*)+0x9e>
c00103a2:	01 cf                	add    edi,ecx
c00103a4:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c00103a7:	89 c1                	mov    ecx,eax
c00103a9:	fc                   	cld    
c00103aa:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00103ac:	29 53 14             	sub    DWORD PTR [ebx+0x14],edx
c00103af:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c00103b2:	8b 73 18             	mov    esi,DWORD PTR [ebx+0x18]
c00103b5:	99                   	cdq    
c00103b6:	89 f7                	mov    edi,esi
c00103b8:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00103bc:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c00103c0:	c1 ff 1f             	sar    edi,0x1f
c00103c3:	57                   	push   edi
c00103c4:	56                   	push   esi
c00103c5:	52                   	push   edx
c00103c6:	50                   	push   eax
c00103c7:	e8 f8 6e 01 00       	call   c00272c4 <__umoddi3>
c00103cc:	83 c4 10             	add    esp,0x10
c00103cf:	89 43 10             	mov    DWORD PTR [ebx+0x10],eax
c00103d2:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c00103d7:	75 10                	jne    c00103e9 <Pipe::read(unsigned long long, void*, int*)+0xdb>
c00103d9:	83 ec 0c             	sub    esp,0xc
c00103dc:	68 35 ac 02 c0       	push   0xc002ac35
c00103e1:	e8 1b a4 00 00       	call   c001a801 <Krnl::panic(char const*)>
c00103e6:	83 c4 10             	add    esp,0x10
c00103e9:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00103ed:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00103f1:	89 10                	mov    DWORD PTR [eax],edx
c00103f3:	83 c4 1c             	add    esp,0x1c
c00103f6:	31 c0                	xor    eax,eax
c00103f8:	5b                   	pop    ebx
c00103f9:	5e                   	pop    esi
c00103fa:	5f                   	pop    edi
c00103fb:	5d                   	pop    ebp
c00103fc:	c3                   	ret    
c00103fd:	90                   	nop

c00103fe <Pipe::write(unsigned long long, void*, int*)>:
c00103fe:	55                   	push   ebp
c00103ff:	57                   	push   edi
c0010400:	56                   	push   esi
c0010401:	53                   	push   ebx
c0010402:	83 ec 1c             	sub    esp,0x1c
c0010405:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010409:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001040d:	8b 4b 18             	mov    ecx,DWORD PTR [ebx+0x18]
c0010410:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0010414:	89 04 24             	mov    DWORD PTR [esp],eax
c0010417:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001041b:	89 c8                	mov    eax,ecx
c001041d:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c0010420:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010424:	89 d6                	mov    esi,edx
c0010426:	89 d7                	mov    edi,edx
c0010428:	c1 ff 1f             	sar    edi,0x1f
c001042b:	03 34 24             	add    esi,DWORD PTR [esp]
c001042e:	13 7c 24 04          	adc    edi,DWORD PTR [esp+0x4]
c0010432:	c1 f8 1f             	sar    eax,0x1f
c0010435:	39 f1                	cmp    ecx,esi
c0010437:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001043b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001043f:	19 f8                	sbb    eax,edi
c0010441:	b8 01 00 00 00       	mov    eax,0x1
c0010446:	72 6e                	jb     c00104b6 <Pipe::write(unsigned long long, void*, int*)+0xb8>
c0010448:	8b 6c 24 04          	mov    ebp,DWORD PTR [esp+0x4]
c001044c:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001044f:	01 d0                	add    eax,edx
c0010451:	99                   	cdq    
c0010452:	f7 f9                	idiv   ecx
c0010454:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0010457:	29 d1                	sub    ecx,edx
c0010459:	89 cf                	mov    edi,ecx
c001045b:	c1 ff 1f             	sar    edi,0x1f
c001045e:	39 c8                	cmp    eax,ecx
c0010460:	19 fd                	sbb    ebp,edi
c0010462:	bd 00 00 00 00       	mov    ebp,0x0
c0010467:	72 04                	jb     c001046d <Pipe::write(unsigned long long, void*, int*)+0x6f>
c0010469:	89 c5                	mov    ebp,eax
c001046b:	29 cd                	sub    ebp,ecx
c001046d:	89 c1                	mov    ecx,eax
c001046f:	29 e9                	sub    ecx,ebp
c0010471:	74 0c                	je     c001047f <Pipe::write(unsigned long long, void*, int*)+0x81>
c0010473:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c0010476:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001047a:	01 d7                	add    edi,edx
c001047c:	fc                   	cld    
c001047d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001047f:	85 ed                	test   ebp,ebp
c0010481:	74 0e                	je     c0010491 <Pipe::write(unsigned long long, void*, int*)+0x93>
c0010483:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0010487:	8b 7b 0c             	mov    edi,DWORD PTR [ebx+0xc]
c001048a:	01 ce                	add    esi,ecx
c001048c:	89 e9                	mov    ecx,ebp
c001048e:	fc                   	cld    
c001048f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0010491:	01 43 14             	add    DWORD PTR [ebx+0x14],eax
c0010494:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0010499:	75 10                	jne    c00104ab <Pipe::write(unsigned long long, void*, int*)+0xad>
c001049b:	83 ec 0c             	sub    esp,0xc
c001049e:	68 51 ac 02 c0       	push   0xc002ac51
c00104a3:	e8 59 a3 00 00       	call   c001a801 <Krnl::panic(char const*)>
c00104a8:	83 c4 10             	add    esp,0x10
c00104ab:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00104af:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00104b2:	89 18                	mov    DWORD PTR [eax],ebx
c00104b4:	31 c0                	xor    eax,eax
c00104b6:	83 c4 1c             	add    esp,0x1c
c00104b9:	5b                   	pop    ebx
c00104ba:	5e                   	pop    esi
c00104bb:	5f                   	pop    edi
c00104bc:	5d                   	pop    ebp
c00104bd:	c3                   	ret    

c00104be <Pipe::Pipe(int)>:
c00104be:	83 ec 0c             	sub    esp,0xc
c00104c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104c5:	83 ec 08             	sub    esp,0x8
c00104c8:	6a 00                	push   0x0
c00104ca:	50                   	push   eax
c00104cb:	e8 2e 11 00 00       	call   c00115fe <UnixFile::UnixFile(int)>
c00104d0:	83 c4 10             	add    esp,0x10
c00104d3:	ba 78 ac 02 c0       	mov    edx,0xc002ac78
c00104d8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104dc:	89 10                	mov    DWORD PTR [eax],edx
c00104de:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104e2:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00104e6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00104e9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104ed:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
c00104f4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00104f8:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
c00104ff:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010503:	83 ec 0c             	sub    esp,0xc
c0010506:	50                   	push   eax
c0010507:	e8 9c f3 ff ff       	call   c000f8a8 <malloc>
c001050c:	83 c4 10             	add    esp,0x10
c001050f:	89 c2                	mov    edx,eax
c0010511:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010515:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0010518:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001051c:	c6 40 1c 00          	mov    BYTE PTR [eax+0x1c],0x0
c0010520:	90                   	nop
c0010521:	83 c4 0c             	add    esp,0xc
c0010524:	c3                   	ret    
c0010525:	90                   	nop

c0010526 <VgaText::isAtty()>:
c0010526:	b0 01                	mov    al,0x1
c0010528:	c3                   	ret    
c0010529:	90                   	nop

c001052a <VgaText::~VgaText()>:
c001052a:	83 ec 0c             	sub    esp,0xc
c001052d:	ba 34 ad 02 c0       	mov    edx,0xc002ad34
c0010532:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010536:	89 10                	mov    DWORD PTR [eax],edx
c0010538:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001053c:	83 ec 0c             	sub    esp,0xc
c001053f:	50                   	push   eax
c0010540:	e8 9b 12 00 00       	call   c00117e0 <UnixFile::~UnixFile()>
c0010545:	83 c4 10             	add    esp,0x10
c0010548:	90                   	nop
c0010549:	83 c4 0c             	add    esp,0xc
c001054c:	c3                   	ret    
c001054d:	90                   	nop

c001054e <VgaText::~VgaText()>:
c001054e:	83 ec 0c             	sub    esp,0xc
c0010551:	83 ec 0c             	sub    esp,0xc
c0010554:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010558:	e8 cd ff ff ff       	call   c001052a <VgaText::~VgaText()>
c001055d:	83 c4 10             	add    esp,0x10
c0010560:	83 ec 08             	sub    esp,0x8
c0010563:	68 c4 02 00 00       	push   0x2c4
c0010568:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001056c:	e8 f6 27 00 00       	call   c0012d67 <operator delete(void*, unsigned long)>
c0010571:	83 c4 10             	add    esp,0x10
c0010574:	83 c4 0c             	add    esp,0xc
c0010577:	c3                   	ret    

c0010578 <VgaText::read(unsigned long long, void*, int*)>:
c0010578:	83 ec 10             	sub    esp,0x10
c001057b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001057f:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0010583:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010587:	e8 6c 5d 00 00       	call   c00162f8 <readKeyboard(VgaText*, char*, unsigned long)>
c001058c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0010590:	89 02                	mov    DWORD PTR [edx],eax
c0010592:	31 c0                	xor    eax,eax
c0010594:	83 c4 1c             	add    esp,0x1c
c0010597:	c3                   	ret    

c0010598 <setTerminalScrollLock(bool)>:
c0010598:	c3                   	ret    

c0010599 <addToTerminalCycle(VgaText*)>:
c0010599:	8b 15 20 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002ef20
c001059f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00105a3:	85 d2                	test   edx,edx
c00105a5:	75 09                	jne    c00105b0 <addToTerminalCycle(VgaText*)+0x17>
c00105a7:	89 40 24             	mov    DWORD PTR [eax+0x24],eax
c00105aa:	a3 20 ef 02 c0       	mov    ds:0xc002ef20,eax
c00105af:	c3                   	ret    
c00105b0:	8b 4a 24             	mov    ecx,DWORD PTR [edx+0x24]
c00105b3:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c00105b6:	89 48 24             	mov    DWORD PTR [eax+0x24],ecx
c00105b9:	c3                   	ret    

c00105ba <installVgaTextImplementation()>:
c00105ba:	83 ec 10             	sub    esp,0x10
c00105bd:	6a 20                	push   0x20
c00105bf:	6a 00                	push   0x0
c00105c1:	68 00 ef 02 c0       	push   0xc002ef00
c00105c6:	e8 a1 01 ff ff       	call   c000076c <memset>
c00105cb:	83 c4 1c             	add    esp,0x1c
c00105ce:	c3                   	ret    

c00105cf <scrollTerminalScrollLock(int)>:
c00105cf:	c3                   	ret    

c00105d0 <VgaText::load()>:
c00105d0:	53                   	push   ebx
c00105d1:	31 c0                	xor    eax,eax
c00105d3:	83 ec 58             	sub    esp,0x58
c00105d6:	8b 5c 24 60          	mov    ebx,DWORD PTR [esp+0x60]
c00105da:	89 e2                	mov    edx,esp
c00105dc:	c6 04 10 20          	mov    BYTE PTR [eax+edx*1],0x20
c00105e0:	40                   	inc    eax
c00105e1:	83 f8 50             	cmp    eax,0x50
c00105e4:	75 f6                	jne    c00105dc <VgaText::load()+0xc>
c00105e6:	31 c0                	xor    eax,eax
c00105e8:	8a 8c 03 82 00 00 00 	mov    cl,BYTE PTR [ebx+eax*1+0x82]
c00105ef:	84 c9                	test   cl,cl
c00105f1:	74 06                	je     c00105f9 <VgaText::load()+0x29>
c00105f3:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00105f6:	40                   	inc    eax
c00105f7:	eb ef                	jmp    c00105e8 <VgaText::load()+0x18>
c00105f9:	8b 43 60             	mov    eax,DWORD PTR [ebx+0x60]
c00105fc:	85 c0                	test   eax,eax
c00105fe:	74 09                	je     c0010609 <VgaText::load()+0x39>
c0010600:	51                   	push   ecx
c0010601:	51                   	push   ecx
c0010602:	52                   	push   edx
c0010603:	53                   	push   ebx
c0010604:	ff d0                	call   eax
c0010606:	83 c4 10             	add    esp,0x10
c0010609:	8b 43 64             	mov    eax,DWORD PTR [ebx+0x64]
c001060c:	85 c0                	test   eax,eax
c001060e:	74 09                	je     c0010619 <VgaText::load()+0x49>
c0010610:	83 ec 0c             	sub    esp,0xc
c0010613:	53                   	push   ebx
c0010614:	ff d0                	call   eax
c0010616:	83 c4 10             	add    esp,0x10
c0010619:	83 c4 58             	add    esp,0x58
c001061c:	5b                   	pop    ebx
c001061d:	c3                   	ret    

c001061e <VgaText::updateCursor()>:
c001061e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010622:	39 05 24 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef24,eax
c0010628:	75 09                	jne    c0010633 <VgaText::updateCursor()+0x15>
c001062a:	8b 40 70             	mov    eax,DWORD PTR [eax+0x70]
c001062d:	85 c0                	test   eax,eax
c001062f:	74 02                	je     c0010633 <VgaText::updateCursor()+0x15>
c0010631:	ff e0                	jmp    eax
c0010633:	c3                   	ret    

c0010634 <VgaText::showCursor(bool)>:
c0010634:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010638:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001063c:	88 50 20             	mov    BYTE PTR [eax+0x20],dl
c001063f:	c3                   	ret    

c0010640 <VgaText::disableBlink(bool)>:
c0010640:	56                   	push   esi
c0010641:	53                   	push   ebx
c0010642:	51                   	push   ecx
c0010643:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010647:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001064b:	39 1d 24 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef24,ebx
c0010651:	75 15                	jne    c0010668 <VgaText::disableBlink(bool)+0x28>
c0010653:	8b 43 78             	mov    eax,DWORD PTR [ebx+0x78]
c0010656:	85 c0                	test   eax,eax
c0010658:	74 0e                	je     c0010668 <VgaText::disableBlink(bool)+0x28>
c001065a:	89 f1                	mov    ecx,esi
c001065c:	52                   	push   edx
c001065d:	52                   	push   edx
c001065e:	0f b6 d1             	movzx  edx,cl
c0010661:	52                   	push   edx
c0010662:	53                   	push   ebx
c0010663:	ff d0                	call   eax
c0010665:	83 c4 10             	add    esp,0x10
c0010668:	89 f0                	mov    eax,esi
c001066a:	83 f0 01             	xor    eax,0x1
c001066d:	88 43 21             	mov    BYTE PTR [ebx+0x21],al
c0010670:	58                   	pop    eax
c0010671:	5b                   	pop    ebx
c0010672:	5e                   	pop    esi
c0010673:	c3                   	ret    

c0010674 <VgaText::doANSI_SGR(int)>:
c0010674:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010678:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001067c:	85 d2                	test   edx,edx
c001067e:	75 0b                	jne    c001068b <VgaText::doANSI_SGR(int)+0x17>
c0010680:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
c0010683:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010686:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c0010689:	eb 59                	jmp    c00106e4 <VgaText::doANSI_SGR(int)+0x70>
c001068b:	83 fa 07             	cmp    edx,0x7
c001068e:	75 0b                	jne    c001069b <VgaText::doANSI_SGR(int)+0x27>
c0010690:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c0010693:	8b 48 30             	mov    ecx,DWORD PTR [eax+0x30]
c0010696:	89 48 34             	mov    DWORD PTR [eax+0x34],ecx
c0010699:	eb 49                	jmp    c00106e4 <VgaText::doANSI_SGR(int)+0x70>
c001069b:	83 fa 1b             	cmp    edx,0x1b
c001069e:	74 e0                	je     c0010680 <VgaText::doANSI_SGR(int)+0xc>
c00106a0:	8d 4a e2             	lea    ecx,[edx-0x1e]
c00106a3:	83 f9 07             	cmp    ecx,0x7
c00106a6:	77 09                	ja     c00106b1 <VgaText::doANSI_SGR(int)+0x3d>
c00106a8:	8b 14 8d a0 dd 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2260]
c00106af:	eb 20                	jmp    c00106d1 <VgaText::doANSI_SGR(int)+0x5d>
c00106b1:	8d 4a d8             	lea    ecx,[edx-0x28]
c00106b4:	83 f9 07             	cmp    ecx,0x7
c00106b7:	77 09                	ja     c00106c2 <VgaText::doANSI_SGR(int)+0x4e>
c00106b9:	8b 14 8d a0 dd 02 c0 	mov    edx,DWORD PTR [ecx*4-0x3ffd2260]
c00106c0:	eb 22                	jmp    c00106e4 <VgaText::doANSI_SGR(int)+0x70>
c00106c2:	8d 4a a6             	lea    ecx,[edx-0x5a]
c00106c5:	83 f9 07             	cmp    ecx,0x7
c00106c8:	77 0b                	ja     c00106d5 <VgaText::doANSI_SGR(int)+0x61>
c00106ca:	8b 14 95 58 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd23a8]
c00106d1:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c00106d4:	c3                   	ret    
c00106d5:	8d 4a 9c             	lea    ecx,[edx-0x64]
c00106d8:	83 f9 07             	cmp    ecx,0x7
c00106db:	77 0a                	ja     c00106e7 <VgaText::doANSI_SGR(int)+0x73>
c00106dd:	8b 14 95 30 dc 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd23d0]
c00106e4:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00106e7:	c3                   	ret    

c00106e8 <VgaText::setDefaultBgColour(VgaColour)>:
c00106e8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106ec:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00106f0:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c00106f3:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
c00106f6:	c3                   	ret    
c00106f7:	90                   	nop

c00106f8 <VgaText::setDefaultFgColour(VgaColour)>:
c00106f8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00106fc:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010700:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c0010703:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
c0010706:	c3                   	ret    
c0010707:	90                   	nop

c0010708 <VgaText::setDefaultColours(VgaColour, VgaColour)>:
c0010708:	53                   	push   ebx
c0010709:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001070d:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0010711:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0010715:	51                   	push   ecx
c0010716:	e8 cd ff ff ff       	call   c00106e8 <VgaText::setDefaultBgColour(VgaColour)>
c001071b:	58                   	pop    eax
c001071c:	5a                   	pop    edx
c001071d:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0010721:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0010725:	5b                   	pop    ebx
c0010726:	eb d0                	jmp    c00106f8 <VgaText::setDefaultFgColour(VgaColour)>

c0010728 <VgaText::combineColours(unsigned char, unsigned char)>:
c0010728:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c001072c:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c0010731:	83 e0 0f             	and    eax,0xf
c0010734:	c1 e2 04             	shl    edx,0x4
c0010737:	09 d0                	or     eax,edx
c0010739:	c3                   	ret    

c001073a <VgaText::scrollScreen()>:
c001073a:	55                   	push   ebp
c001073b:	b9 01 00 00 00       	mov    ecx,0x1
c0010740:	57                   	push   edi
c0010741:	56                   	push   esi
c0010742:	53                   	push   ebx
c0010743:	83 ec 0c             	sub    esp,0xc
c0010746:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001074a:	69 f1 a0 00 00 00    	imul   esi,ecx,0xa0
c0010750:	31 ff                	xor    edi,edi
c0010752:	8b 43 0c             	mov    eax,DWORD PTR [ebx+0xc]
c0010755:	83 f9 17             	cmp    ecx,0x17
c0010758:	8a 14 30             	mov    dl,BYTE PTR [eax+esi*1]
c001075b:	88 94 30 60 ff ff ff 	mov    BYTE PTR [eax+esi*1-0xa0],dl
c0010762:	75 27                	jne    c001078b <VgaText::scrollScreen()+0x51>
c0010764:	8b 6b 0c             	mov    ebp,DWORD PTR [ebx+0xc]
c0010767:	01 f5                	add    ebp,esi
c0010769:	f7 c7 01 00 00 00    	test   edi,0x1
c001076f:	74 16                	je     c0010787 <VgaText::scrollScreen()+0x4d>
c0010771:	0f b6 43 30          	movzx  eax,BYTE PTR [ebx+0x30]
c0010775:	50                   	push   eax
c0010776:	0f b6 43 34          	movzx  eax,BYTE PTR [ebx+0x34]
c001077a:	50                   	push   eax
c001077b:	e8 a8 ff ff ff       	call   c0010728 <VgaText::combineColours(unsigned char, unsigned char)>
c0010780:	5a                   	pop    edx
c0010781:	5a                   	pop    edx
c0010782:	88 45 00             	mov    BYTE PTR [ebp+0x0],al
c0010785:	eb 04                	jmp    c001078b <VgaText::scrollScreen()+0x51>
c0010787:	c6 45 00 20          	mov    BYTE PTR [ebp+0x0],0x20
c001078b:	47                   	inc    edi
c001078c:	46                   	inc    esi
c001078d:	81 ff a0 00 00 00    	cmp    edi,0xa0
c0010793:	75 bd                	jne    c0010752 <VgaText::scrollScreen()+0x18>
c0010795:	41                   	inc    ecx
c0010796:	83 f9 18             	cmp    ecx,0x18
c0010799:	75 af                	jne    c001074a <VgaText::scrollScreen()+0x10>
c001079b:	39 1d 24 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef24,ebx
c00107a1:	75 1b                	jne    c00107be <VgaText::scrollScreen()+0x84>
c00107a3:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c00107a7:	74 05                	je     c00107ae <VgaText::scrollScreen()+0x74>
c00107a9:	ff 4b 5c             	dec    DWORD PTR [ebx+0x5c]
c00107ac:	eb 10                	jmp    c00107be <VgaText::scrollScreen()+0x84>
c00107ae:	8b 43 6c             	mov    eax,DWORD PTR [ebx+0x6c]
c00107b1:	85 c0                	test   eax,eax
c00107b3:	74 09                	je     c00107be <VgaText::scrollScreen()+0x84>
c00107b5:	83 ec 0c             	sub    esp,0xc
c00107b8:	53                   	push   ebx
c00107b9:	ff d0                	call   eax
c00107bb:	83 c4 10             	add    esp,0x10
c00107be:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00107c2:	83 c4 0c             	add    esp,0xc
c00107c5:	5b                   	pop    ebx
c00107c6:	5e                   	pop    esi
c00107c7:	5f                   	pop    edi
c00107c8:	5d                   	pop    ebp
c00107c9:	e9 50 fe ff ff       	jmp    c001061e <VgaText::updateCursor()>

c00107ce <VgaText::combineCharAndColour(char, unsigned char)>:
c00107ce:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00107d3:	c1 e0 08             	shl    eax,0x8
c00107d6:	89 c2                	mov    edx,eax
c00107d8:	0f b6 44 24 04       	movzx  eax,BYTE PTR [esp+0x4]
c00107dd:	09 d0                	or     eax,edx
c00107df:	c3                   	ret    

c00107e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>:
c00107e0:	56                   	push   esi
c00107e1:	53                   	push   ebx
c00107e2:	51                   	push   ecx
c00107e3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00107e7:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107ec:	50                   	push   eax
c00107ed:	0f b6 44 24 1c       	movzx  eax,BYTE PTR [esp+0x1c]
c00107f2:	50                   	push   eax
c00107f3:	e8 30 ff ff ff       	call   c0010728 <VgaText::combineColours(unsigned char, unsigned char)>
c00107f8:	5b                   	pop    ebx
c00107f9:	0f b6 c0             	movzx  eax,al
c00107fc:	5e                   	pop    esi
c00107fd:	0f be 5c 24 14       	movsx  ebx,BYTE PTR [esp+0x14]
c0010802:	50                   	push   eax
c0010803:	53                   	push   ebx
c0010804:	e8 c5 ff ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010809:	5a                   	pop    edx
c001080a:	5e                   	pop    esi
c001080b:	8b 71 0c             	mov    esi,DWORD PTR [ecx+0xc]
c001080e:	66 6b 54 24 24 50    	imul   dx,WORD PTR [esp+0x24],0x50
c0010814:	03 54 24 20          	add    edx,DWORD PTR [esp+0x20]
c0010818:	0f b7 d2             	movzx  edx,dx
c001081b:	66 89 04 56          	mov    WORD PTR [esi+edx*2],ax
c001081f:	39 0d 24 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef24,ecx
c0010825:	75 10                	jne    c0010837 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c0010827:	8b 41 7c             	mov    eax,DWORD PTR [ecx+0x7c]
c001082a:	85 c0                	test   eax,eax
c001082c:	74 09                	je     c0010837 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)+0x57>
c001082e:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c0010832:	5a                   	pop    edx
c0010833:	5b                   	pop    ebx
c0010834:	5e                   	pop    esi
c0010835:	ff e0                	jmp    eax
c0010837:	58                   	pop    eax
c0010838:	5b                   	pop    ebx
c0010839:	5e                   	pop    esi
c001083a:	c3                   	ret    
c001083b:	90                   	nop

c001083c <VgaText::getCursorX()>:
c001083c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010840:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0010843:	c3                   	ret    

c0010844 <VgaText::getCursorY()>:
c0010844:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010848:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c001084b:	c3                   	ret    

c001084c <VgaText::setCursor(int, int)>:
c001084c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010850:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010854:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c0010857:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001085b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001085e:	e9 bb fd ff ff       	jmp    c001061e <VgaText::updateCursor()>
c0010863:	90                   	nop

c0010864 <VgaText::setCursorX(int)>:
c0010864:	83 ec 10             	sub    esp,0x10
c0010867:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001086b:	ff 70 18             	push   DWORD PTR [eax+0x18]
c001086e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010872:	50                   	push   eax
c0010873:	e8 d4 ff ff ff       	call   c001084c <VgaText::setCursor(int, int)>
c0010878:	83 c4 1c             	add    esp,0x1c
c001087b:	c3                   	ret    

c001087c <VgaText::setCursorY(int)>:
c001087c:	83 ec 10             	sub    esp,0x10
c001087f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010883:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0010887:	ff 70 14             	push   DWORD PTR [eax+0x14]
c001088a:	50                   	push   eax
c001088b:	e8 bc ff ff ff       	call   c001084c <VgaText::setCursor(int, int)>
c0010890:	83 c4 1c             	add    esp,0x1c
c0010893:	c3                   	ret    

c0010894 <VgaText::incrementCursor(bool)>:
c0010894:	56                   	push   esi
c0010895:	53                   	push   ebx
c0010896:	51                   	push   ecx
c0010897:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001089b:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001089f:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c00108a2:	40                   	inc    eax
c00108a3:	83 f8 50             	cmp    eax,0x50
c00108a6:	74 05                	je     c00108ad <VgaText::incrementCursor(bool)+0x19>
c00108a8:	89 43 14             	mov    DWORD PTR [ebx+0x14],eax
c00108ab:	eb 24                	jmp    c00108d1 <VgaText::incrementCursor(bool)+0x3d>
c00108ad:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c00108b0:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00108b7:	8d 50 01             	lea    edx,[eax+0x1]
c00108ba:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c00108bd:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c00108c0:	75 0f                	jne    c00108d1 <VgaText::incrementCursor(bool)+0x3d>
c00108c2:	83 ec 0c             	sub    esp,0xc
c00108c5:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c00108c8:	53                   	push   ebx
c00108c9:	e8 6c fe ff ff       	call   c001073a <VgaText::scrollScreen()>
c00108ce:	83 c4 10             	add    esp,0x10
c00108d1:	89 f0                	mov    eax,esi
c00108d3:	84 c0                	test   al,al
c00108d5:	74 0c                	je     c00108e3 <VgaText::incrementCursor(bool)+0x4f>
c00108d7:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c00108db:	5a                   	pop    edx
c00108dc:	5b                   	pop    ebx
c00108dd:	5e                   	pop    esi
c00108de:	e9 3b fd ff ff       	jmp    c001061e <VgaText::updateCursor()>
c00108e3:	58                   	pop    eax
c00108e4:	5b                   	pop    ebx
c00108e5:	5e                   	pop    esi
c00108e6:	c3                   	ret    
c00108e7:	90                   	nop

c00108e8 <VgaText::updateRAMUsageDisplay(int)>:
c00108e8:	56                   	push   esi
c00108e9:	8b 35 80 dd 02 c0    	mov    esi,DWORD PTR ds:0xc002dd80
c00108ef:	53                   	push   ebx
c00108f0:	bb 0a 00 00 00       	mov    ebx,0xa
c00108f5:	6a 0f                	push   0xf
c00108f7:	6a 00                	push   0x0
c00108f9:	e8 2a fe ff ff       	call   c0010728 <VgaText::combineColours(unsigned char, unsigned char)>
c00108fe:	5a                   	pop    edx
c00108ff:	59                   	pop    ecx
c0010900:	0f b6 c8             	movzx  ecx,al
c0010903:	51                   	push   ecx
c0010904:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0010908:	99                   	cdq    
c0010909:	f7 fb                	idiv   ebx
c001090b:	89 d3                	mov    ebx,edx
c001090d:	83 c0 30             	add    eax,0x30
c0010910:	83 c3 30             	add    ebx,0x30
c0010913:	0f be c0             	movsx  eax,al
c0010916:	0f b6 db             	movzx  ebx,bl
c0010919:	50                   	push   eax
c001091a:	e8 af fe ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c001091f:	5a                   	pop    edx
c0010920:	5a                   	pop    edx
c0010921:	66 89 86 96 00 00 00 	mov    WORD PTR [esi+0x96],ax
c0010928:	51                   	push   ecx
c0010929:	53                   	push   ebx
c001092a:	e8 9f fe ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c001092f:	5b                   	pop    ebx
c0010930:	5a                   	pop    edx
c0010931:	66 89 86 98 00 00 00 	mov    WORD PTR [esi+0x98],ax
c0010938:	51                   	push   ecx
c0010939:	6a 25                	push   0x25
c001093b:	e8 8e fe ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010940:	59                   	pop    ecx
c0010941:	5b                   	pop    ebx
c0010942:	66 89 86 9a 00 00 00 	mov    WORD PTR [esi+0x9a],ax
c0010949:	5b                   	pop    ebx
c001094a:	5e                   	pop    esi
c001094b:	c3                   	ret    

c001094c <VgaText::updateDiskUsage()>:
c001094c:	55                   	push   ebp
c001094d:	bd 10 27 00 00       	mov    ebp,0x2710
c0010952:	57                   	push   edi
c0010953:	8b 3d 80 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002dd80
c0010959:	56                   	push   esi
c001095a:	53                   	push   ebx
c001095b:	6a 0f                	push   0xf
c001095d:	6a 00                	push   0x0
c001095f:	e8 c4 fd ff ff       	call   c0010728 <VgaText::combineColours(unsigned char, unsigned char)>
c0010964:	5a                   	pop    edx
c0010965:	0f b6 d8             	movzx  ebx,al
c0010968:	59                   	pop    ecx
c0010969:	8b 35 a8 31 03 c0    	mov    esi,DWORD PTR ds:0xc00331a8
c001096f:	53                   	push   ebx
c0010970:	b9 0a 00 00 00       	mov    ecx,0xa
c0010975:	89 f0                	mov    eax,esi
c0010977:	99                   	cdq    
c0010978:	f7 fd                	idiv   ebp
c001097a:	99                   	cdq    
c001097b:	f7 f9                	idiv   ecx
c001097d:	8d 42 30             	lea    eax,[edx+0x30]
c0010980:	0f b6 c0             	movzx  eax,al
c0010983:	50                   	push   eax
c0010984:	e8 45 fe ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010989:	5d                   	pop    ebp
c001098a:	bd e8 03 00 00       	mov    ebp,0x3e8
c001098f:	5a                   	pop    edx
c0010990:	66 89 47 7e          	mov    WORD PTR [edi+0x7e],ax
c0010994:	53                   	push   ebx
c0010995:	89 f0                	mov    eax,esi
c0010997:	99                   	cdq    
c0010998:	f7 fd                	idiv   ebp
c001099a:	99                   	cdq    
c001099b:	f7 f9                	idiv   ecx
c001099d:	8d 42 30             	lea    eax,[edx+0x30]
c00109a0:	0f b6 c0             	movzx  eax,al
c00109a3:	50                   	push   eax
c00109a4:	e8 25 fe ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c00109a9:	5d                   	pop    ebp
c00109aa:	bd 64 00 00 00       	mov    ebp,0x64
c00109af:	5a                   	pop    edx
c00109b0:	66 89 87 80 00 00 00 	mov    WORD PTR [edi+0x80],ax
c00109b7:	53                   	push   ebx
c00109b8:	89 f0                	mov    eax,esi
c00109ba:	99                   	cdq    
c00109bb:	f7 fd                	idiv   ebp
c00109bd:	99                   	cdq    
c00109be:	f7 f9                	idiv   ecx
c00109c0:	8d 42 30             	lea    eax,[edx+0x30]
c00109c3:	0f b6 c0             	movzx  eax,al
c00109c6:	50                   	push   eax
c00109c7:	e8 02 fe ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c00109cc:	5d                   	pop    ebp
c00109cd:	5a                   	pop    edx
c00109ce:	66 89 87 82 00 00 00 	mov    WORD PTR [edi+0x82],ax
c00109d5:	53                   	push   ebx
c00109d6:	89 f0                	mov    eax,esi
c00109d8:	99                   	cdq    
c00109d9:	f7 f9                	idiv   ecx
c00109db:	89 d6                	mov    esi,edx
c00109dd:	99                   	cdq    
c00109de:	f7 f9                	idiv   ecx
c00109e0:	8d 42 30             	lea    eax,[edx+0x30]
c00109e3:	0f b6 c0             	movzx  eax,al
c00109e6:	50                   	push   eax
c00109e7:	e8 e2 fd ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c00109ec:	5d                   	pop    ebp
c00109ed:	5a                   	pop    edx
c00109ee:	66 89 87 84 00 00 00 	mov    WORD PTR [edi+0x84],ax
c00109f5:	53                   	push   ebx
c00109f6:	8d 46 30             	lea    eax,[esi+0x30]
c00109f9:	0f b6 f0             	movzx  esi,al
c00109fc:	56                   	push   esi
c00109fd:	e8 cc fd ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010a02:	5e                   	pop    esi
c0010a03:	8b 35 a4 31 03 c0    	mov    esi,DWORD PTR ds:0xc00331a4
c0010a09:	5d                   	pop    ebp
c0010a0a:	66 89 87 86 00 00 00 	mov    WORD PTR [edi+0x86],ax
c0010a11:	bd 10 27 00 00       	mov    ebp,0x2710
c0010a16:	53                   	push   ebx
c0010a17:	89 f0                	mov    eax,esi
c0010a19:	99                   	cdq    
c0010a1a:	f7 fd                	idiv   ebp
c0010a1c:	99                   	cdq    
c0010a1d:	f7 f9                	idiv   ecx
c0010a1f:	8d 42 30             	lea    eax,[edx+0x30]
c0010a22:	0f b6 c0             	movzx  eax,al
c0010a25:	50                   	push   eax
c0010a26:	e8 a3 fd ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010a2b:	5a                   	pop    edx
c0010a2c:	5d                   	pop    ebp
c0010a2d:	66 89 87 8a 00 00 00 	mov    WORD PTR [edi+0x8a],ax
c0010a34:	bd e8 03 00 00       	mov    ebp,0x3e8
c0010a39:	53                   	push   ebx
c0010a3a:	89 f0                	mov    eax,esi
c0010a3c:	99                   	cdq    
c0010a3d:	f7 fd                	idiv   ebp
c0010a3f:	99                   	cdq    
c0010a40:	f7 f9                	idiv   ecx
c0010a42:	8d 42 30             	lea    eax,[edx+0x30]
c0010a45:	0f b6 c0             	movzx  eax,al
c0010a48:	50                   	push   eax
c0010a49:	e8 80 fd ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010a4e:	5a                   	pop    edx
c0010a4f:	5d                   	pop    ebp
c0010a50:	66 89 87 8c 00 00 00 	mov    WORD PTR [edi+0x8c],ax
c0010a57:	bd 64 00 00 00       	mov    ebp,0x64
c0010a5c:	53                   	push   ebx
c0010a5d:	89 f0                	mov    eax,esi
c0010a5f:	99                   	cdq    
c0010a60:	f7 fd                	idiv   ebp
c0010a62:	99                   	cdq    
c0010a63:	f7 f9                	idiv   ecx
c0010a65:	83 c2 30             	add    edx,0x30
c0010a68:	0f b6 d2             	movzx  edx,dl
c0010a6b:	52                   	push   edx
c0010a6c:	e8 5d fd ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010a71:	5a                   	pop    edx
c0010a72:	5d                   	pop    ebp
c0010a73:	66 89 87 8e 00 00 00 	mov    WORD PTR [edi+0x8e],ax
c0010a7a:	53                   	push   ebx
c0010a7b:	89 f0                	mov    eax,esi
c0010a7d:	99                   	cdq    
c0010a7e:	f7 f9                	idiv   ecx
c0010a80:	89 d6                	mov    esi,edx
c0010a82:	99                   	cdq    
c0010a83:	f7 f9                	idiv   ecx
c0010a85:	8d 42 30             	lea    eax,[edx+0x30]
c0010a88:	0f b6 c0             	movzx  eax,al
c0010a8b:	50                   	push   eax
c0010a8c:	e8 3d fd ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010a91:	5a                   	pop    edx
c0010a92:	59                   	pop    ecx
c0010a93:	66 89 87 90 00 00 00 	mov    WORD PTR [edi+0x90],ax
c0010a9a:	53                   	push   ebx
c0010a9b:	8d 46 30             	lea    eax,[esi+0x30]
c0010a9e:	0f b6 f0             	movzx  esi,al
c0010aa1:	56                   	push   esi
c0010aa2:	e8 27 fd ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010aa7:	5b                   	pop    ebx
c0010aa8:	5e                   	pop    esi
c0010aa9:	66 89 87 92 00 00 00 	mov    WORD PTR [edi+0x92],ax
c0010ab0:	5b                   	pop    ebx
c0010ab1:	5e                   	pop    esi
c0010ab2:	5f                   	pop    edi
c0010ab3:	5d                   	pop    ebp
c0010ab4:	c3                   	ret    
c0010ab5:	90                   	nop

c0010ab6 <VgaText::updateTitle()>:
c0010ab6:	53                   	push   ebx
c0010ab7:	31 c0                	xor    eax,eax
c0010ab9:	83 ec 58             	sub    esp,0x58
c0010abc:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c0010ac0:	89 e1                	mov    ecx,esp
c0010ac2:	c6 04 08 20          	mov    BYTE PTR [eax+ecx*1],0x20
c0010ac6:	40                   	inc    eax
c0010ac7:	83 f8 50             	cmp    eax,0x50
c0010aca:	75 f6                	jne    c0010ac2 <VgaText::updateTitle()+0xc>
c0010acc:	31 c0                	xor    eax,eax
c0010ace:	8a 9c 02 82 00 00 00 	mov    bl,BYTE PTR [edx+eax*1+0x82]
c0010ad5:	84 db                	test   bl,bl
c0010ad7:	74 06                	je     c0010adf <VgaText::updateTitle()+0x29>
c0010ad9:	88 1c 01             	mov    BYTE PTR [ecx+eax*1],bl
c0010adc:	40                   	inc    eax
c0010add:	eb ef                	jmp    c0010ace <VgaText::updateTitle()+0x18>
c0010adf:	8b 42 60             	mov    eax,DWORD PTR [edx+0x60]
c0010ae2:	85 c0                	test   eax,eax
c0010ae4:	74 09                	je     c0010aef <VgaText::updateTitle()+0x39>
c0010ae6:	53                   	push   ebx
c0010ae7:	53                   	push   ebx
c0010ae8:	51                   	push   ecx
c0010ae9:	52                   	push   edx
c0010aea:	ff d0                	call   eax
c0010aec:	83 c4 10             	add    esp,0x10
c0010aef:	e8 58 fe ff ff       	call   c001094c <VgaText::updateDiskUsage()>
c0010af4:	83 c4 58             	add    esp,0x58
c0010af7:	5b                   	pop    ebx
c0010af8:	c3                   	ret    
c0010af9:	90                   	nop

c0010afa <VgaText::setTitleTextColour(VgaColour)>:
c0010afa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010afe:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b02:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
c0010b05:	eb af                	jmp    c0010ab6 <VgaText::updateTitle()>
c0010b07:	90                   	nop

c0010b08 <VgaText::setTitleColour(VgaColour)>:
c0010b08:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010b0c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010b10:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0010b13:	eb a1                	jmp    c0010ab6 <VgaText::updateTitle()>
c0010b15:	90                   	nop

c0010b16 <VgaText::setTitle(char*)>:
c0010b16:	53                   	push   ebx
c0010b17:	83 ec 10             	sub    esp,0x10
c0010b1a:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0010b1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0010b22:	8d 83 82 00 00 00    	lea    eax,[ebx+0x82]
c0010b28:	50                   	push   eax
c0010b29:	e8 fa fc fe ff       	call   c0000828 <strcpy>
c0010b2e:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c0010b32:	83 c4 18             	add    esp,0x18
c0010b35:	5b                   	pop    ebx
c0010b36:	e9 7b ff ff ff       	jmp    c0010ab6 <VgaText::updateTitle()>
c0010b3b:	90                   	nop

c0010b3c <VgaText::decrementCursor(bool)>:
c0010b3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0010b40:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0010b44:	8b 42 14             	mov    eax,DWORD PTR [edx+0x14]
c0010b47:	85 c0                	test   eax,eax
c0010b49:	74 04                	je     c0010b4f <VgaText::decrementCursor(bool)+0x13>
c0010b4b:	48                   	dec    eax
c0010b4c:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
c0010b4f:	84 c9                	test   cl,cl
c0010b51:	74 09                	je     c0010b5c <VgaText::decrementCursor(bool)+0x20>
c0010b53:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0010b57:	e9 c2 fa ff ff       	jmp    c001061e <VgaText::updateCursor()>
c0010b5c:	c3                   	ret    
c0010b5d:	90                   	nop

c0010b5e <VgaText::putchar(char, VgaColour, VgaColour)>:
c0010b5e:	53                   	push   ebx
c0010b5f:	83 ec 08             	sub    esp,0x8
c0010b62:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0010b66:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010b6a:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0010b6e:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0010b72:	3c 07                	cmp    al,0x7
c0010b74:	75 2a                	jne    c0010ba0 <VgaText::putchar(char, VgaColour, VgaColour)+0x42>
c0010b76:	a1 d8 ef 02 c0       	mov    eax,ds:0xc002efd8
c0010b7b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0010b83:	c7 44 24 18 f4 01 00 00 	mov    DWORD PTR [esp+0x18],0x1f4
c0010b8b:	c7 44 24 14 b8 01 00 00 	mov    DWORD PTR [esp+0x14],0x1b8
c0010b93:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0010b97:	83 c4 08             	add    esp,0x8
c0010b9a:	5b                   	pop    ebx
c0010b9b:	e9 b4 30 00 00       	jmp    c0013c54 <Buzzer::beep(int, int, bool)>
c0010ba0:	3c 0d                	cmp    al,0xd
c0010ba2:	75 09                	jne    c0010bad <VgaText::putchar(char, VgaColour, VgaColour)+0x4f>
c0010ba4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010bab:	eb 2c                	jmp    c0010bd9 <VgaText::putchar(char, VgaColour, VgaColour)+0x7b>
c0010bad:	3c 0a                	cmp    al,0xa
c0010baf:	75 31                	jne    c0010be2 <VgaText::putchar(char, VgaColour, VgaColour)+0x84>
c0010bb1:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010bb4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010bbb:	8d 50 01             	lea    edx,[eax+0x1]
c0010bbe:	89 53 18             	mov    DWORD PTR [ebx+0x18],edx
c0010bc1:	3b 53 10             	cmp    edx,DWORD PTR [ebx+0x10]
c0010bc4:	75 0f                	jne    c0010bd5 <VgaText::putchar(char, VgaColour, VgaColour)+0x77>
c0010bc6:	83 ec 0c             	sub    esp,0xc
c0010bc9:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010bcc:	53                   	push   ebx
c0010bcd:	e8 68 fb ff ff       	call   c001073a <VgaText::scrollScreen()>
c0010bd2:	83 c4 10             	add    esp,0x10
c0010bd5:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010bd9:	83 c4 08             	add    esp,0x8
c0010bdc:	5b                   	pop    ebx
c0010bdd:	e9 3c fa ff ff       	jmp    c001061e <VgaText::updateCursor()>
c0010be2:	3c 08                	cmp    al,0x8
c0010be4:	75 25                	jne    c0010c0b <VgaText::putchar(char, VgaColour, VgaColour)+0xad>
c0010be6:	50                   	push   eax
c0010be7:	50                   	push   eax
c0010be8:	6a 01                	push   0x1
c0010bea:	53                   	push   ebx
c0010beb:	e8 4c ff ff ff       	call   c0010b3c <VgaText::decrementCursor(bool)>
c0010bf0:	5a                   	pop    edx
c0010bf1:	59                   	pop    ecx
c0010bf2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010bf5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010bf8:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010bfb:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010bfe:	6a 20                	push   0x20
c0010c00:	53                   	push   ebx
c0010c01:	e8 da fb ff ff       	call   c00107e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c06:	83 c4 28             	add    esp,0x28
c0010c09:	5b                   	pop    ebx
c0010c0a:	c3                   	ret    
c0010c0b:	83 ec 08             	sub    esp,0x8
c0010c0e:	0f be c0             	movsx  eax,al
c0010c11:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010c14:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010c17:	51                   	push   ecx
c0010c18:	52                   	push   edx
c0010c19:	50                   	push   eax
c0010c1a:	53                   	push   ebx
c0010c1b:	e8 c0 fb ff ff       	call   c00107e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010c20:	89 5c 24 30          	mov    DWORD PTR [esp+0x30],ebx
c0010c24:	c7 44 24 34 01 00 00 00 	mov    DWORD PTR [esp+0x34],0x1
c0010c2c:	83 c4 28             	add    esp,0x28
c0010c2f:	5b                   	pop    ebx
c0010c30:	e9 5f fc ff ff       	jmp    c0010894 <VgaText::incrementCursor(bool)>
c0010c35:	90                   	nop

c0010c36 <VgaText::isShowingCursor()>:
c0010c36:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c3a:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0010c3d:	c3                   	ret    

c0010c3e <VgaText::isBlinkDisabled()>:
c0010c3e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c42:	8a 40 21             	mov    al,BYTE PTR [eax+0x21]
c0010c45:	83 f0 01             	xor    eax,0x1
c0010c48:	c3                   	ret    
c0010c49:	90                   	nop

c0010c4a <VgaText::setCursorHeight(int)>:
c0010c4a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c4e:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0010c52:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0010c55:	0f b6 40 20          	movzx  eax,BYTE PTR [eax+0x20]
c0010c59:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0010c5d:	e9 d2 f9 ff ff       	jmp    c0010634 <VgaText::showCursor(bool)>

c0010c62 <VgaText::getCursorHeight()>:
c0010c62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010c66:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0010c69:	c3                   	ret    

c0010c6a <setActiveTerminal(VgaText*)>:
c0010c6a:	53                   	push   ebx
c0010c6b:	83 ec 08             	sub    esp,0x8
c0010c6e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010c72:	85 db                	test   ebx,ebx
c0010c74:	75 11                	jne    c0010c87 <setActiveTerminal(VgaText*)+0x1d>
c0010c76:	c7 44 24 10 8c ac 02 c0 	mov    DWORD PTR [esp+0x10],0xc002ac8c
c0010c7e:	83 c4 08             	add    esp,0x8
c0010c81:	5b                   	pop    ebx
c0010c82:	e9 7a 9b 00 00       	jmp    c001a801 <Krnl::panic(char const*)>
c0010c87:	50                   	push   eax
c0010c88:	50                   	push   eax
c0010c89:	53                   	push   ebx
c0010c8a:	68 9a ac 02 c0       	push   0xc002ac9a
c0010c8f:	e8 b3 21 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0010c94:	a1 24 ef 02 c0       	mov    eax,ds:0xc002ef24
c0010c99:	83 c4 10             	add    esp,0x10
c0010c9c:	85 c0                	test   eax,eax
c0010c9e:	74 0c                	je     c0010cac <setActiveTerminal(VgaText*)+0x42>
c0010ca0:	83 ec 0c             	sub    esp,0xc
c0010ca3:	50                   	push   eax
c0010ca4:	e8 75 f9 ff ff       	call   c001061e <VgaText::updateCursor()>
c0010ca9:	83 c4 10             	add    esp,0x10
c0010cac:	89 1d 24 ef 02 c0    	mov    DWORD PTR ds:0xc002ef24,ebx
c0010cb2:	51                   	push   ecx
c0010cb3:	51                   	push   ecx
c0010cb4:	53                   	push   ebx
c0010cb5:	68 b2 ac 02 c0       	push   0xc002acb2
c0010cba:	e8 88 21 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0010cbf:	83 c4 0c             	add    esp,0xc
c0010cc2:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010cc5:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010cc8:	53                   	push   ebx
c0010cc9:	e8 7e fb ff ff       	call   c001084c <VgaText::setCursor(int, int)>
c0010cce:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010cd1:	e8 68 ff ff ff       	call   c0010c3e <VgaText::isBlinkDisabled()>
c0010cd6:	5a                   	pop    edx
c0010cd7:	0f b6 c0             	movzx  eax,al
c0010cda:	59                   	pop    ecx
c0010cdb:	50                   	push   eax
c0010cdc:	53                   	push   ebx
c0010cdd:	e8 5e f9 ff ff       	call   c0010640 <VgaText::disableBlink(bool)>
c0010ce2:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0010ce5:	e8 78 ff ff ff       	call   c0010c62 <VgaText::getCursorHeight()>
c0010cea:	5a                   	pop    edx
c0010ceb:	59                   	pop    ecx
c0010cec:	50                   	push   eax
c0010ced:	53                   	push   ebx
c0010cee:	e8 57 ff ff ff       	call   c0010c4a <VgaText::setCursorHeight(int)>
c0010cf3:	83 c4 10             	add    esp,0x10
c0010cf6:	80 7b 58 00          	cmp    BYTE PTR [ebx+0x58],0x0
c0010cfa:	75 07                	jne    c0010d03 <setActiveTerminal(VgaText*)+0x99>
c0010cfc:	c7 43 5c 00 00 00 00 	mov    DWORD PTR [ebx+0x5c],0x0
c0010d03:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0010d07:	83 c4 08             	add    esp,0x8
c0010d0a:	5b                   	pop    ebx
c0010d0b:	e9 c0 f8 ff ff       	jmp    c00105d0 <VgaText::load()>

c0010d10 <doTerminalCycle()>:
c0010d10:	83 ec 18             	sub    esp,0x18
c0010d13:	a1 20 ef 02 c0       	mov    eax,ds:0xc002ef20
c0010d18:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0010d1b:	50                   	push   eax
c0010d1c:	a3 20 ef 02 c0       	mov    ds:0xc002ef20,eax
c0010d21:	e8 44 ff ff ff       	call   c0010c6a <setActiveTerminal(VgaText*)>
c0010d26:	83 c4 1c             	add    esp,0x1c
c0010d29:	c3                   	ret    

c0010d2a <VgaText::doUpdate()>:
c0010d2a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0010d2e:	8b 40 68             	mov    eax,DWORD PTR [eax+0x68]
c0010d31:	85 c0                	test   eax,eax
c0010d33:	74 02                	je     c0010d37 <VgaText::doUpdate()+0xd>
c0010d35:	ff e0                	jmp    eax
c0010d37:	c3                   	ret    

c0010d38 <VgaText::puts(char const*, VgaColour, VgaColour)>:
c0010d38:	55                   	push   ebp
c0010d39:	31 ed                	xor    ebp,ebp
c0010d3b:	57                   	push   edi
c0010d3c:	56                   	push   esi
c0010d3d:	53                   	push   ebx
c0010d3e:	83 ec 1c             	sub    esp,0x1c
c0010d41:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0010d45:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d4a:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010d51:	50                   	push   eax
c0010d52:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c0010d57:	50                   	push   eax
c0010d58:	e8 cb f9 ff ff       	call   c0010728 <VgaText::combineColours(unsigned char, unsigned char)>
c0010d5d:	59                   	pop    ecx
c0010d5e:	0f b6 c0             	movzx  eax,al
c0010d61:	5e                   	pop    esi
c0010d62:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010d67:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0010d6b:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010d6e:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0010d72:	0f b7 f6             	movzx  esi,si
c0010d75:	01 f6                	add    esi,esi
c0010d77:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010d7a:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0010d7d:	84 c0                	test   al,al
c0010d7f:	0f 84 fd 00 00 00    	je     c0010e82 <VgaText::puts(char const*, VgaColour, VgaColour)+0x14a>
c0010d85:	3c 0d                	cmp    al,0xd
c0010d87:	75 0c                	jne    c0010d95 <VgaText::puts(char const*, VgaColour, VgaColour)+0x5d>
c0010d89:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010d90:	e9 e7 00 00 00       	jmp    c0010e7c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010d95:	3c 0a                	cmp    al,0xa
c0010d97:	75 47                	jne    c0010de0 <VgaText::puts(char const*, VgaColour, VgaColour)+0xa8>
c0010d99:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c0010d9c:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c0010da3:	8d 48 01             	lea    ecx,[eax+0x1]
c0010da6:	89 4b 18             	mov    DWORD PTR [ebx+0x18],ecx
c0010da9:	3b 4b 10             	cmp    ecx,DWORD PTR [ebx+0x10]
c0010dac:	75 0f                	jne    c0010dbd <VgaText::puts(char const*, VgaColour, VgaColour)+0x85>
c0010dae:	83 ec 0c             	sub    esp,0xc
c0010db1:	89 43 18             	mov    DWORD PTR [ebx+0x18],eax
c0010db4:	53                   	push   ebx
c0010db5:	e8 80 f9 ff ff       	call   c001073a <VgaText::scrollScreen()>
c0010dba:	83 c4 10             	add    esp,0x10
c0010dbd:	83 ec 0c             	sub    esp,0xc
c0010dc0:	31 ed                	xor    ebp,ebp
c0010dc2:	53                   	push   ebx
c0010dc3:	e8 56 f8 ff ff       	call   c001061e <VgaText::updateCursor()>
c0010dc8:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010dcd:	83 c4 10             	add    esp,0x10
c0010dd0:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010dd3:	0f b7 f6             	movzx  esi,si
c0010dd6:	01 f6                	add    esi,esi
c0010dd8:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010ddb:	e9 9c 00 00 00       	jmp    c0010e7c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010de0:	3c 08                	cmp    al,0x8
c0010de2:	75 35                	jne    c0010e19 <VgaText::puts(char const*, VgaColour, VgaColour)+0xe1>
c0010de4:	56                   	push   esi
c0010de5:	56                   	push   esi
c0010de6:	6a 01                	push   0x1
c0010de8:	53                   	push   ebx
c0010de9:	e8 4e fd ff ff       	call   c0010b3c <VgaText::decrementCursor(bool)>
c0010dee:	58                   	pop    eax
c0010def:	5a                   	pop    edx
c0010df0:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010df3:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010df6:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010df9:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010dfc:	6a 20                	push   0x20
c0010dfe:	53                   	push   ebx
c0010dff:	e8 dc f9 ff ff       	call   c00107e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010e04:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e09:	83 c4 20             	add    esp,0x20
c0010e0c:	03 73 14             	add    esi,DWORD PTR [ebx+0x14]
c0010e0f:	0f b7 f6             	movzx  esi,si
c0010e12:	01 f6                	add    esi,esi
c0010e14:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e17:	eb 63                	jmp    c0010e7c <VgaText::puts(char const*, VgaColour, VgaColour)+0x144>
c0010e19:	51                   	push   ecx
c0010e1a:	51                   	push   ecx
c0010e1b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0010e1f:	50                   	push   eax
c0010e20:	e8 a9 f9 ff ff       	call   c00107ce <VgaText::combineCharAndColour(char, unsigned char)>
c0010e25:	83 c4 10             	add    esp,0x10
c0010e28:	66 89 06             	mov    WORD PTR [esi],ax
c0010e2b:	39 1d 24 ef 02 c0    	cmp    DWORD PTR ds:0xc002ef24,ebx
c0010e31:	75 21                	jne    c0010e54 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e33:	8b 43 7c             	mov    eax,DWORD PTR [ebx+0x7c]
c0010e36:	85 c0                	test   eax,eax
c0010e38:	74 1a                	je     c0010e54 <VgaText::puts(char const*, VgaColour, VgaColour)+0x11c>
c0010e3a:	52                   	push   edx
c0010e3b:	52                   	push   edx
c0010e3c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0010e3f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0010e42:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e46:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0010e4a:	0f be 0f             	movsx  ecx,BYTE PTR [edi]
c0010e4d:	51                   	push   ecx
c0010e4e:	53                   	push   ebx
c0010e4f:	ff d0                	call   eax
c0010e51:	83 c4 20             	add    esp,0x20
c0010e54:	83 c6 02             	add    esi,0x2
c0010e57:	50                   	push   eax
c0010e58:	50                   	push   eax
c0010e59:	6a 00                	push   0x0
c0010e5b:	53                   	push   ebx
c0010e5c:	e8 33 fa ff ff       	call   c0010894 <VgaText::incrementCursor(bool)>
c0010e61:	83 c4 10             	add    esp,0x10
c0010e64:	83 7b 14 00          	cmp    DWORD PTR [ebx+0x14],0x0
c0010e68:	75 0d                	jne    c0010e77 <VgaText::puts(char const*, VgaColour, VgaColour)+0x13f>
c0010e6a:	66 6b 73 18 50       	imul   si,WORD PTR [ebx+0x18],0x50
c0010e6f:	0f b7 f6             	movzx  esi,si
c0010e72:	01 f6                	add    esi,esi
c0010e74:	03 73 0c             	add    esi,DWORD PTR [ebx+0xc]
c0010e77:	bd 01 00 00 00       	mov    ebp,0x1
c0010e7c:	47                   	inc    edi
c0010e7d:	e9 f8 fe ff ff       	jmp    c0010d7a <VgaText::puts(char const*, VgaColour, VgaColour)+0x42>
c0010e82:	83 ec 0c             	sub    esp,0xc
c0010e85:	53                   	push   ebx
c0010e86:	e8 93 f7 ff ff       	call   c001061e <VgaText::updateCursor()>
c0010e8b:	83 c4 10             	add    esp,0x10
c0010e8e:	89 e8                	mov    eax,ebp
c0010e90:	84 c0                	test   al,al
c0010e92:	74 0c                	je     c0010ea0 <VgaText::puts(char const*, VgaColour, VgaColour)+0x168>
c0010e94:	83 ec 0c             	sub    esp,0xc
c0010e97:	53                   	push   ebx
c0010e98:	e8 8d fe ff ff       	call   c0010d2a <VgaText::doUpdate()>
c0010e9d:	83 c4 10             	add    esp,0x10
c0010ea0:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010ea7:	83 c4 1c             	add    esp,0x1c
c0010eaa:	5b                   	pop    ebx
c0010eab:	5e                   	pop    esi
c0010eac:	5f                   	pop    edi
c0010ead:	5d                   	pop    ebp
c0010eae:	c3                   	ret    
c0010eaf:	90                   	nop

c0010eb0 <VgaText::clearScreen()>:
c0010eb0:	57                   	push   edi
c0010eb1:	56                   	push   esi
c0010eb2:	31 f6                	xor    esi,esi
c0010eb4:	53                   	push   ebx
c0010eb5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0010eb9:	52                   	push   edx
c0010eba:	6a 00                	push   0x0
c0010ebc:	6a 00                	push   0x0
c0010ebe:	53                   	push   ebx
c0010ebf:	e8 88 f9 ff ff       	call   c001084c <VgaText::setCursor(int, int)>
c0010ec4:	c6 83 81 00 00 00 01 	mov    BYTE PTR [ebx+0x81],0x1
c0010ecb:	83 c4 10             	add    esp,0x10
c0010ece:	39 73 10             	cmp    DWORD PTR [ebx+0x10],esi
c0010ed1:	7e 20                	jle    c0010ef3 <VgaText::clearScreen()+0x43>
c0010ed3:	31 ff                	xor    edi,edi
c0010ed5:	50                   	push   eax
c0010ed6:	50                   	push   eax
c0010ed7:	56                   	push   esi
c0010ed8:	57                   	push   edi
c0010ed9:	47                   	inc    edi
c0010eda:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010edd:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010ee0:	6a 20                	push   0x20
c0010ee2:	53                   	push   ebx
c0010ee3:	e8 f8 f8 ff ff       	call   c00107e0 <VgaText::writeCharacter(char, VgaColour, VgaColour, int, int)>
c0010ee8:	83 c4 20             	add    esp,0x20
c0010eeb:	83 ff 50             	cmp    edi,0x50
c0010eee:	75 e5                	jne    c0010ed5 <VgaText::clearScreen()+0x25>
c0010ef0:	46                   	inc    esi
c0010ef1:	eb db                	jmp    c0010ece <VgaText::clearScreen()+0x1e>
c0010ef3:	83 ec 0c             	sub    esp,0xc
c0010ef6:	53                   	push   ebx
c0010ef7:	e8 2e fe ff ff       	call   c0010d2a <VgaText::doUpdate()>
c0010efc:	c6 83 81 00 00 00 00 	mov    BYTE PTR [ebx+0x81],0x0
c0010f03:	83 c4 10             	add    esp,0x10
c0010f06:	5b                   	pop    ebx
c0010f07:	5e                   	pop    esi
c0010f08:	5f                   	pop    edi
c0010f09:	c3                   	ret    

c0010f0a <VgaText::putchar(char)>:
c0010f0a:	56                   	push   esi
c0010f0b:	53                   	push   ebx
c0010f0c:	83 ec 14             	sub    esp,0x14
c0010f0f:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0010f13:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0010f17:	3c 5b                	cmp    al,0x5b
c0010f19:	75 18                	jne    c0010f33 <VgaText::putchar(char)+0x29>
c0010f1b:	80 7b 40 00          	cmp    BYTE PTR [ebx+0x40],0x0
c0010f1f:	74 1f                	je     c0010f40 <VgaText::putchar(char)+0x36>
c0010f21:	66 c7 43 40 00 01    	mov    WORD PTR [ebx+0x40],0x100
c0010f27:	c7 43 54 00 00 00 00 	mov    DWORD PTR [ebx+0x54],0x0
c0010f2e:	e9 bd 00 00 00       	jmp    c0010ff0 <VgaText::putchar(char)+0xe6>
c0010f33:	3c 1b                	cmp    al,0x1b
c0010f35:	75 09                	jne    c0010f40 <VgaText::putchar(char)+0x36>
c0010f37:	c6 43 40 01          	mov    BYTE PTR [ebx+0x40],0x1
c0010f3b:	e9 b0 00 00 00       	jmp    c0010ff0 <VgaText::putchar(char)+0xe6>
c0010f40:	8a 4b 41             	mov    cl,BYTE PTR [ebx+0x41]
c0010f43:	84 c9                	test   cl,cl
c0010f45:	0f 84 92 00 00 00    	je     c0010fdd <VgaText::putchar(char)+0xd3>
c0010f4b:	8d 50 c0             	lea    edx,[eax-0x40]
c0010f4e:	80 fa 3e             	cmp    dl,0x3e
c0010f51:	77 76                	ja     c0010fc9 <VgaText::putchar(char)+0xbf>
c0010f53:	3c 6d                	cmp    al,0x6d
c0010f55:	75 47                	jne    c0010f9e <VgaText::putchar(char)+0x94>
c0010f57:	31 f6                	xor    esi,esi
c0010f59:	31 d2                	xor    edx,edx
c0010f5b:	31 c0                	xor    eax,eax
c0010f5d:	39 73 54             	cmp    DWORD PTR [ebx+0x54],esi
c0010f60:	7e 2d                	jle    c0010f8f <VgaText::putchar(char)+0x85>
c0010f62:	0f be 54 33 42       	movsx  edx,BYTE PTR [ebx+esi*1+0x42]
c0010f67:	80 fa 3b             	cmp    dl,0x3b
c0010f6a:	75 17                	jne    c0010f83 <VgaText::putchar(char)+0x79>
c0010f6c:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c0010f70:	50                   	push   eax
c0010f71:	53                   	push   ebx
c0010f72:	e8 fd f6 ff ff       	call   c0010674 <VgaText::doANSI_SGR(int)>
c0010f77:	59                   	pop    ecx
c0010f78:	31 d2                	xor    edx,edx
c0010f7a:	58                   	pop    eax
c0010f7b:	31 c0                	xor    eax,eax
c0010f7d:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c0010f81:	eb 09                	jmp    c0010f8c <VgaText::putchar(char)+0x82>
c0010f83:	6b c0 0a             	imul   eax,eax,0xa
c0010f86:	8d 44 10 d0          	lea    eax,[eax+edx*1-0x30]
c0010f8a:	88 ca                	mov    dl,cl
c0010f8c:	46                   	inc    esi
c0010f8d:	eb ce                	jmp    c0010f5d <VgaText::putchar(char)+0x53>
c0010f8f:	84 d2                	test   dl,dl
c0010f91:	74 2e                	je     c0010fc1 <VgaText::putchar(char)+0xb7>
c0010f93:	50                   	push   eax
c0010f94:	53                   	push   ebx
c0010f95:	e8 da f6 ff ff       	call   c0010674 <VgaText::doANSI_SGR(int)>
c0010f9a:	58                   	pop    eax
c0010f9b:	5a                   	pop    edx
c0010f9c:	eb 23                	jmp    c0010fc1 <VgaText::putchar(char)+0xb7>
c0010f9e:	3c 4a                	cmp    al,0x4a
c0010fa0:	75 1f                	jne    c0010fc1 <VgaText::putchar(char)+0xb7>
c0010fa2:	80 7b 42 32          	cmp    BYTE PTR [ebx+0x42],0x32
c0010fa6:	75 19                	jne    c0010fc1 <VgaText::putchar(char)+0xb7>
c0010fa8:	83 ec 0c             	sub    esp,0xc
c0010fab:	53                   	push   ebx
c0010fac:	e8 ff fe ff ff       	call   c0010eb0 <VgaText::clearScreen()>
c0010fb1:	83 c4 0c             	add    esp,0xc
c0010fb4:	6a 00                	push   0x0
c0010fb6:	6a 00                	push   0x0
c0010fb8:	53                   	push   ebx
c0010fb9:	e8 8e f8 ff ff       	call   c001084c <VgaText::setCursor(int, int)>
c0010fbe:	83 c4 10             	add    esp,0x10
c0010fc1:	66 c7 43 40 00 00    	mov    WORD PTR [ebx+0x40],0x0
c0010fc7:	eb 27                	jmp    c0010ff0 <VgaText::putchar(char)+0xe6>
c0010fc9:	8b 53 54             	mov    edx,DWORD PTR [ebx+0x54]
c0010fcc:	83 fa 0e             	cmp    edx,0xe
c0010fcf:	7f 1f                	jg     c0010ff0 <VgaText::putchar(char)+0xe6>
c0010fd1:	8d 4a 01             	lea    ecx,[edx+0x1]
c0010fd4:	89 4b 54             	mov    DWORD PTR [ebx+0x54],ecx
c0010fd7:	88 44 13 42          	mov    BYTE PTR [ebx+edx*1+0x42],al
c0010fdb:	eb 13                	jmp    c0010ff0 <VgaText::putchar(char)+0xe6>
c0010fdd:	ff 73 30             	push   DWORD PTR [ebx+0x30]
c0010fe0:	0f be c0             	movsx  eax,al
c0010fe3:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0010fe6:	50                   	push   eax
c0010fe7:	53                   	push   ebx
c0010fe8:	e8 71 fb ff ff       	call   c0010b5e <VgaText::putchar(char, VgaColour, VgaColour)>
c0010fed:	83 c4 10             	add    esp,0x10
c0010ff0:	83 c4 14             	add    esp,0x14
c0010ff3:	5b                   	pop    ebx
c0010ff4:	5e                   	pop    esi
c0010ff5:	c3                   	ret    

c0010ff6 <VgaText::puts(char const*)>:
c0010ff6:	53                   	push   ebx
c0010ff7:	83 ec 08             	sub    esp,0x8
c0010ffa:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0010ffe:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0011001:	84 c0                	test   al,al
c0011003:	74 12                	je     c0011017 <VgaText::puts(char const*)+0x21>
c0011005:	43                   	inc    ebx
c0011006:	51                   	push   ecx
c0011007:	51                   	push   ecx
c0011008:	50                   	push   eax
c0011009:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001100d:	e8 f8 fe ff ff       	call   c0010f0a <VgaText::putchar(char)>
c0011012:	83 c4 10             	add    esp,0x10
c0011015:	eb e7                	jmp    c0010ffe <VgaText::puts(char const*)+0x8>
c0011017:	83 c4 08             	add    esp,0x8
c001101a:	5b                   	pop    ebx
c001101b:	c3                   	ret    

c001101c <VgaText::putx(unsigned int)>:
c001101c:	57                   	push   edi
c001101d:	b9 11 00 00 00       	mov    ecx,0x11
c0011022:	56                   	push   esi
c0011023:	be ce ac 02 c0       	mov    esi,0xc002acce
c0011028:	53                   	push   ebx
c0011029:	83 ec 20             	sub    esp,0x20
c001102c:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0011030:	8d 7c 24 0f          	lea    edi,[esp+0xf]
c0011034:	fc                   	cld    
c0011035:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0011037:	be 08 00 00 00       	mov    esi,0x8
c001103c:	50                   	push   eax
c001103d:	50                   	push   eax
c001103e:	89 d8                	mov    eax,ebx
c0011040:	c1 e3 04             	shl    ebx,0x4
c0011043:	c1 e8 1c             	shr    eax,0x1c
c0011046:	0f be 44 04 17       	movsx  eax,BYTE PTR [esp+eax*1+0x17]
c001104b:	50                   	push   eax
c001104c:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0011050:	e8 b5 fe ff ff       	call   c0010f0a <VgaText::putchar(char)>
c0011055:	83 c4 10             	add    esp,0x10
c0011058:	4e                   	dec    esi
c0011059:	75 e1                	jne    c001103c <VgaText::putx(unsigned int)+0x20>
c001105b:	83 c4 20             	add    esp,0x20
c001105e:	5b                   	pop    ebx
c001105f:	5e                   	pop    esi
c0011060:	5f                   	pop    edi
c0011061:	c3                   	ret    

c0011062 <VgaText::VgaText(char const*)>:
c0011062:	57                   	push   edi
c0011063:	56                   	push   esi
c0011064:	53                   	push   ebx
c0011065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011069:	83 ec 08             	sub    esp,0x8
c001106c:	6a 00                	push   0x0
c001106e:	50                   	push   eax
c001106f:	e8 8a 05 00 00       	call   c00115fe <UnixFile::UnixFile(int)>
c0011074:	83 c4 10             	add    esp,0x10
c0011077:	ba 34 ad 02 c0       	mov    edx,0xc002ad34
c001107c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011080:	89 10                	mov    DWORD PTR [eax],edx
c0011082:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011086:	c7 40 38 01 00 00 00 	mov    DWORD PTR [eax+0x38],0x1
c001108d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011091:	c7 40 3c 0f 00 00 00 	mov    DWORD PTR [eax+0x3c],0xf
c0011098:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001109c:	c6 40 40 00          	mov    BYTE PTR [eax+0x40],0x0
c00110a0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110a4:	c6 40 41 00          	mov    BYTE PTR [eax+0x41],0x0
c00110a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110ac:	c7 40 54 00 00 00 00 	mov    DWORD PTR [eax+0x54],0x0
c00110b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110b7:	c7 40 5c 00 00 00 00 	mov    DWORD PTR [eax+0x5c],0x0
c00110be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110c2:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
c00110c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110cd:	c6 80 81 00 00 00 00 	mov    BYTE PTR [eax+0x81],0x0
c00110d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110d8:	8d 50 60             	lea    edx,[eax+0x60]
c00110db:	bb 00 ef 02 c0       	mov    ebx,0xc002ef00
c00110e0:	b8 08 00 00 00       	mov    eax,0x8
c00110e5:	fc                   	cld    
c00110e6:	89 d7                	mov    edi,edx
c00110e8:	89 de                	mov    esi,ebx
c00110ea:	89 c1                	mov    ecx,eax
c00110ec:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00110ee:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00110f2:	05 82 00 00 00       	add    eax,0x82
c00110f7:	83 ec 08             	sub    esp,0x8
c00110fa:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00110fe:	50                   	push   eax
c00110ff:	e8 24 f7 fe ff       	call   c0000828 <strcpy>
c0011104:	83 c4 10             	add    esp,0x10
c0011107:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001110b:	c7 40 10 18 00 00 00 	mov    DWORD PTR [eax+0x10],0x18
c0011112:	83 ec 0c             	sub    esp,0xc
c0011115:	6a 01                	push   0x1
c0011117:	e8 25 09 00 00       	call   c0011a41 <Virt::allocateKernelVirtualPages(int)>
c001111c:	83 c4 10             	add    esp,0x10
c001111f:	89 c2                	mov    edx,eax
c0011121:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011125:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0011128:	8b 1d d0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efd0
c001112e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011132:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011135:	89 c6                	mov    esi,eax
c0011137:	e8 d8 ed ff ff       	call   c000ff14 <Phys::allocatePage()>
c001113c:	6a 05                	push   0x5
c001113e:	56                   	push   esi
c001113f:	50                   	push   eax
c0011140:	53                   	push   ebx
c0011141:	e8 32 11 00 00       	call   c0012278 <VAS::mapPage(unsigned long, unsigned long, int)>
c0011146:	83 c4 10             	add    esp,0x10
c0011149:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001114d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0011150:	83 ec 04             	sub    esp,0x4
c0011153:	68 00 0f 00 00       	push   0xf00
c0011158:	6a 00                	push   0x0
c001115a:	50                   	push   eax
c001115b:	e8 0c f6 fe ff       	call   c000076c <memset>
c0011160:	83 c4 10             	add    esp,0x10
c0011163:	83 ec 04             	sub    esp,0x4
c0011166:	6a 00                	push   0x0
c0011168:	6a 07                	push   0x7
c001116a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001116e:	e8 95 f5 ff ff       	call   c0010708 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c0011173:	83 c4 10             	add    esp,0x10
c0011176:	83 ec 08             	sub    esp,0x8
c0011179:	6a 02                	push   0x2
c001117b:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001117f:	e8 c6 fa ff ff       	call   c0010c4a <VgaText::setCursorHeight(int)>
c0011184:	83 c4 10             	add    esp,0x10
c0011187:	83 ec 04             	sub    esp,0x4
c001118a:	6a 00                	push   0x0
c001118c:	6a 00                	push   0x0
c001118e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011192:	e8 b5 f6 ff ff       	call   c001084c <VgaText::setCursor(int, int)>
c0011197:	83 c4 10             	add    esp,0x10
c001119a:	83 ec 08             	sub    esp,0x8
c001119d:	6a 01                	push   0x1
c001119f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111a3:	e8 8c f4 ff ff       	call   c0010634 <VgaText::showCursor(bool)>
c00111a8:	83 c4 10             	add    esp,0x10
c00111ab:	83 ec 08             	sub    esp,0x8
c00111ae:	6a 01                	push   0x1
c00111b0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111b4:	e8 87 f4 ff ff       	call   c0010640 <VgaText::disableBlink(bool)>
c00111b9:	83 c4 10             	add    esp,0x10
c00111bc:	83 ec 0c             	sub    esp,0xc
c00111bf:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00111c3:	e8 e8 fc ff ff       	call   c0010eb0 <VgaText::clearScreen()>
c00111c8:	83 c4 10             	add    esp,0x10
c00111cb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111cf:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
c00111d3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111d7:	05 02 01 00 00       	add    eax,0x102
c00111dc:	83 ec 04             	sub    esp,0x4
c00111df:	68 96 00 00 00       	push   0x96
c00111e4:	6a 00                	push   0x0
c00111e6:	50                   	push   eax
c00111e7:	e8 80 f5 fe ff       	call   c000076c <memset>
c00111ec:	83 c4 10             	add    esp,0x10
c00111ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00111f3:	05 98 01 00 00       	add    eax,0x198
c00111f8:	83 ec 04             	sub    esp,0x4
c00111fb:	68 2c 01 00 00       	push   0x12c
c0011200:	6a 00                	push   0x0
c0011202:	50                   	push   eax
c0011203:	e8 64 f5 fe ff       	call   c000076c <memset>
c0011208:	83 c4 10             	add    esp,0x10
c001120b:	90                   	nop
c001120c:	5b                   	pop    ebx
c001120d:	5e                   	pop    esi
c001120e:	5f                   	pop    edi
c001120f:	c3                   	ret    

c0011210 <VgaText::receiveKey(unsigned char)>:
c0011210:	55                   	push   ebp
c0011211:	57                   	push   edi
c0011212:	56                   	push   esi
c0011213:	53                   	push   ebx
c0011214:	83 ec 1c             	sub    esp,0x1c
c0011217:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c001121b:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001121f:	84 db                	test   bl,bl
c0011221:	0f 84 c9 00 00 00    	je     c00112f0 <VgaText::receiveKey(unsigned char)+0xe0>
c0011227:	8d be 02 01 00 00    	lea    edi,[esi+0x102]
c001122d:	80 fb 08             	cmp    bl,0x8
c0011230:	75 2c                	jne    c001125e <VgaText::receiveKey(unsigned char)+0x4e>
c0011232:	83 ec 0c             	sub    esp,0xc
c0011235:	57                   	push   edi
c0011236:	e8 4d f5 fe ff       	call   c0000788 <strlen>
c001123b:	83 c4 10             	add    esp,0x10
c001123e:	85 c0                	test   eax,eax
c0011240:	74 41                	je     c0011283 <VgaText::receiveKey(unsigned char)+0x73>
c0011242:	50                   	push   eax
c0011243:	50                   	push   eax
c0011244:	6a 08                	push   0x8
c0011246:	56                   	push   esi
c0011247:	e8 be fc ff ff       	call   c0010f0a <VgaText::putchar(char)>
c001124c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001124f:	e8 34 f5 fe ff       	call   c0000788 <strlen>
c0011254:	c6 84 06 01 01 00 00 00 	mov    BYTE PTR [esi+eax*1+0x101],0x0
c001125c:	eb 22                	jmp    c0011280 <VgaText::receiveKey(unsigned char)+0x70>
c001125e:	0f be c3             	movsx  eax,bl
c0011261:	52                   	push   edx
c0011262:	52                   	push   edx
c0011263:	50                   	push   eax
c0011264:	56                   	push   esi
c0011265:	e8 a0 fc ff ff       	call   c0010f0a <VgaText::putchar(char)>
c001126a:	88 5c 24 1e          	mov    BYTE PTR [esp+0x1e],bl
c001126e:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0011273:	59                   	pop    ecx
c0011274:	5d                   	pop    ebp
c0011275:	8d 44 24 16          	lea    eax,[esp+0x16]
c0011279:	50                   	push   eax
c001127a:	57                   	push   edi
c001127b:	e8 e8 f6 fe ff       	call   c0000968 <strcat>
c0011280:	83 c4 10             	add    esp,0x10
c0011283:	80 be 80 00 00 00 00 	cmp    BYTE PTR [esi+0x80],0x0
c001128a:	75 05                	jne    c0011291 <VgaText::receiveKey(unsigned char)+0x81>
c001128c:	80 fb 0a             	cmp    bl,0xa
c001128f:	75 53                	jne    c00112e4 <VgaText::receiveKey(unsigned char)+0xd4>
c0011291:	83 ec 0c             	sub    esp,0xc
c0011294:	8d 9e 98 01 00 00    	lea    ebx,[esi+0x198]
c001129a:	53                   	push   ebx
c001129b:	e8 e8 f4 fe ff       	call   c0000788 <strlen>
c00112a0:	89 3c 24             	mov    DWORD PTR [esp],edi
c00112a3:	89 c5                	mov    ebp,eax
c00112a5:	e8 de f4 fe ff       	call   c0000788 <strlen>
c00112aa:	83 c4 10             	add    esp,0x10
c00112ad:	8d 44 05 04          	lea    eax,[ebp+eax*1+0x4]
c00112b1:	3d 2c 01 00 00       	cmp    eax,0x12c
c00112b6:	76 10                	jbe    c00112c8 <VgaText::receiveKey(unsigned char)+0xb8>
c00112b8:	83 ec 0c             	sub    esp,0xc
c00112bb:	68 df ac 02 c0       	push   0xc002acdf
c00112c0:	e8 3c 95 00 00       	call   c001a801 <Krnl::panic(char const*)>
c00112c5:	83 c4 10             	add    esp,0x10
c00112c8:	50                   	push   eax
c00112c9:	50                   	push   eax
c00112ca:	57                   	push   edi
c00112cb:	53                   	push   ebx
c00112cc:	e8 97 f6 fe ff       	call   c0000968 <strcat>
c00112d1:	83 c4 0c             	add    esp,0xc
c00112d4:	68 96 00 00 00       	push   0x96
c00112d9:	6a 00                	push   0x0
c00112db:	57                   	push   edi
c00112dc:	e8 8b f4 fe ff       	call   c000076c <memset>
c00112e1:	83 c4 10             	add    esp,0x10
c00112e4:	83 ec 0c             	sub    esp,0xc
c00112e7:	56                   	push   esi
c00112e8:	e8 3d fa ff ff       	call   c0010d2a <VgaText::doUpdate()>
c00112ed:	83 c4 10             	add    esp,0x10
c00112f0:	83 c4 1c             	add    esp,0x1c
c00112f3:	5b                   	pop    ebx
c00112f4:	5e                   	pop    esi
c00112f5:	5f                   	pop    edi
c00112f6:	5d                   	pop    ebp
c00112f7:	c3                   	ret    

c00112f8 <VgaText::write(unsigned long long, void*, int*)>:
c00112f8:	55                   	push   ebp
c00112f9:	57                   	push   edi
c00112fa:	56                   	push   esi
c00112fb:	53                   	push   ebx
c00112fc:	83 ec 0c             	sub    esp,0xc
c00112ff:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0011303:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0011307:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001130b:	c6 86 81 00 00 00 01 	mov    BYTE PTR [esi+0x81],0x1
c0011312:	8d 2c 3b             	lea    ebp,[ebx+edi*1]
c0011315:	39 eb                	cmp    ebx,ebp
c0011317:	74 13                	je     c001132c <VgaText::write(unsigned long long, void*, int*)+0x34>
c0011319:	43                   	inc    ebx
c001131a:	50                   	push   eax
c001131b:	50                   	push   eax
c001131c:	0f be 43 ff          	movsx  eax,BYTE PTR [ebx-0x1]
c0011320:	50                   	push   eax
c0011321:	56                   	push   esi
c0011322:	e8 e3 fb ff ff       	call   c0010f0a <VgaText::putchar(char)>
c0011327:	83 c4 10             	add    esp,0x10
c001132a:	eb e9                	jmp    c0011315 <VgaText::write(unsigned long long, void*, int*)+0x1d>
c001132c:	83 ec 0c             	sub    esp,0xc
c001132f:	c6 86 81 00 00 00 00 	mov    BYTE PTR [esi+0x81],0x0
c0011336:	56                   	push   esi
c0011337:	e8 ee f9 ff ff       	call   c0010d2a <VgaText::doUpdate()>
c001133c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0011340:	89 38                	mov    DWORD PTR [eax],edi
c0011342:	83 c4 1c             	add    esp,0x1c
c0011345:	31 c0                	xor    eax,eax
c0011347:	5b                   	pop    ebx
c0011348:	5e                   	pop    esi
c0011349:	5f                   	pop    edi
c001134a:	5d                   	pop    ebp
c001134b:	c3                   	ret    

c001134c <newTerminal(char*)>:
c001134c:	83 ec 28             	sub    esp,0x28
c001134f:	68 c4 02 00 00       	push   0x2c4
c0011354:	e8 4f e5 ff ff       	call   c000f8a8 <malloc>
c0011359:	5a                   	pop    edx
c001135a:	59                   	pop    ecx
c001135b:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001135f:	50                   	push   eax
c0011360:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0011364:	e8 f9 fc ff ff       	call   c0011062 <VgaText::VgaText(char const*)>
c0011369:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001136d:	83 c4 2c             	add    esp,0x2c
c0011370:	c3                   	ret    
c0011371:	90                   	nop

c0011372 <TSS::TSS()>:
c0011372:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011376:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001137d:	90                   	nop
c001137e:	c3                   	ret    
c001137f:	90                   	nop

c0011380 <TSS::setESP(unsigned long)>:
c0011380:	55                   	push   ebp
c0011381:	89 e5                	mov    ebp,esp
c0011383:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011386:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011389:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c001138c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001138f:	90                   	nop
c0011390:	5d                   	pop    ebp
c0011391:	c3                   	ret    

c0011392 <TSS::flush()>:
c0011392:	55                   	push   ebp
c0011393:	89 e5                	mov    ebp,esp
c0011395:	83 ec 10             	sub    esp,0x10
c0011398:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001139b:	8b 00                	mov    eax,DWORD PTR [eax]
c001139d:	83 c8 03             	or     eax,0x3
c00113a0:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00113a4:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c00113a8:	66 89 d0             	mov    ax,dx
c00113ab:	0f 00 d8             	ltr    ax
c00113ae:	90                   	nop
c00113af:	c9                   	leave  
c00113b0:	c3                   	ret    
c00113b1:	90                   	nop

c00113b2 <TSS::setup(unsigned long, unsigned long)>:
c00113b2:	55                   	push   ebp
c00113b3:	89 e5                	mov    ebp,esp
c00113b5:	83 ec 18             	sub    esp,0x18
c00113b8:	83 ec 0c             	sub    esp,0xc
c00113bb:	6a 68                	push   0x68
c00113bd:	e8 e6 e4 ff ff       	call   c000f8a8 <malloc>
c00113c2:	83 c4 10             	add    esp,0x10
c00113c5:	89 c2                	mov    edx,eax
c00113c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113ca:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00113cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113d0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113d3:	83 ec 04             	sub    esp,0x4
c00113d6:	6a 68                	push   0x68
c00113d8:	6a 00                	push   0x0
c00113da:	50                   	push   eax
c00113db:	e8 8c f3 fe ff       	call   c000076c <memset>
c00113e0:	83 c4 10             	add    esp,0x10
c00113e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113e6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113e9:	66 c7 40 66 68 00    	mov    WORD PTR [eax+0x66],0x68
c00113ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00113f5:	66 c7 40 08 10 00    	mov    WORD PTR [eax+0x8],0x10
c00113fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00113fe:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011401:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011404:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0011407:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001140a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001140d:	66 c7 40 4c 08 00    	mov    WORD PTR [eax+0x4c],0x8
c0011413:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011416:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011419:	66 c7 40 54 10 00    	mov    WORD PTR [eax+0x54],0x10
c001141f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011422:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011425:	66 c7 40 48 10 00    	mov    WORD PTR [eax+0x48],0x10
c001142b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001142e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011431:	66 c7 40 58 10 00    	mov    WORD PTR [eax+0x58],0x10
c0011437:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001143a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001143d:	66 c7 40 5c 10 00    	mov    WORD PTR [eax+0x5c],0x10
c0011443:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011446:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011449:	66 c7 40 50 10 00    	mov    WORD PTR [eax+0x50],0x10
c001144f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011452:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011455:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0011458:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c001145b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001145e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011461:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0011464:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0011467:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001146a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001146d:	c7 40 24 02 00 00 00 	mov    DWORD PTR [eax+0x24],0x2
c0011474:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011477:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001147a:	0f 20 da             	mov    edx,cr3
c001147d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0011480:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0011483:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
c0011486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011489:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001148c:	83 ec 08             	sub    esp,0x8
c001148f:	50                   	push   eax
c0011490:	8d 45 ec             	lea    eax,[ebp-0x14]
c0011493:	50                   	push   eax
c0011494:	e8 eb db ff ff       	call   c000f084 <GDTEntry::setBase(unsigned int)>
c0011499:	83 c4 10             	add    esp,0x10
c001149c:	83 ec 08             	sub    esp,0x8
c001149f:	6a 68                	push   0x68
c00114a1:	8d 45 ec             	lea    eax,[ebp-0x14]
c00114a4:	50                   	push   eax
c00114a5:	e8 f6 db ff ff       	call   c000f0a0 <GDTEntry::setLimit(unsigned int)>
c00114aa:	83 c4 10             	add    esp,0x10
c00114ad:	c6 45 f1 89          	mov    BYTE PTR [ebp-0xf],0x89
c00114b1:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00114b4:	83 e0 0f             	and    eax,0xf
c00114b7:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00114ba:	8a 45 f2             	mov    al,BYTE PTR [ebp-0xe]
c00114bd:	83 c8 40             	or     eax,0x40
c00114c0:	88 45 f2             	mov    BYTE PTR [ebp-0xe],al
c00114c3:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00114c8:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00114ce:	05 78 01 00 00       	add    eax,0x178
c00114d3:	83 ec 04             	sub    esp,0x4
c00114d6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c00114d9:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
c00114dc:	50                   	push   eax
c00114dd:	e8 f2 db ff ff       	call   c000f0d4 <GDT::addEntry(GDTEntry)>
c00114e2:	83 c4 10             	add    esp,0x10
c00114e5:	89 c2                	mov    edx,eax
c00114e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00114ea:	89 10                	mov    DWORD PTR [eax],edx
c00114ec:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00114f1:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00114f7:	05 78 01 00 00       	add    eax,0x178
c00114fc:	83 ec 0c             	sub    esp,0xc
c00114ff:	50                   	push   eax
c0011500:	e8 13 dc ff ff       	call   c000f118 <GDT::flush()>
c0011505:	83 c4 10             	add    esp,0x10
c0011508:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001150b:	8b 00                	mov    eax,DWORD PTR [eax]
c001150d:	83 ec 08             	sub    esp,0x8
c0011510:	50                   	push   eax
c0011511:	68 48 ad 02 c0       	push   0xc002ad48
c0011516:	e8 2c 19 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001151b:	83 c4 10             	add    esp,0x10
c001151e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0011521:	8b 00                	mov    eax,DWORD PTR [eax]
c0011523:	c9                   	leave  
c0011524:	c3                   	ret    
c0011525:	90                   	nop

c0011526 <ReservedFilename::read(unsigned long long, void*, int*)>:
c0011526:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001152a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001152e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0011531:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c0011536:	75 08                	jne    c0011540 <ReservedFilename::read(unsigned long long, void*, int*)+0x1a>
c0011538:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c001153e:	eb 38                	jmp    c0011578 <ReservedFilename::read(unsigned long long, void*, int*)+0x52>
c0011540:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c0011545:	75 17                	jne    c001155e <ReservedFilename::read(unsigned long long, void*, int*)+0x38>
c0011547:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001154c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001154f:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0011555:	8b 10                	mov    edx,DWORD PTR [eax]
c0011557:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001155b:	ff 62 0c             	jmp    DWORD PTR [edx+0xc]
c001155e:	89 c1                	mov    ecx,eax
c0011560:	83 e1 fd             	and    ecx,0xfffffffd
c0011563:	81 f9 00 ff ff 0f    	cmp    ecx,0xfffff00
c0011569:	74 cd                	je     c0011538 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c001156b:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c0011570:	83 e0 ef             	and    eax,0xffffffef
c0011573:	83 f8 08             	cmp    eax,0x8
c0011576:	76 c0                	jbe    c0011538 <ReservedFilename::read(unsigned long long, void*, int*)+0x12>
c0011578:	31 c0                	xor    eax,eax
c001157a:	c3                   	ret    
c001157b:	90                   	nop

c001157c <ReservedFilename::isAtty()>:
c001157c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011580:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0011583:	31 c0                	xor    eax,eax
c0011585:	81 fa 03 ff ff 0f    	cmp    edx,0xfffff03
c001158b:	74 09                	je     c0011596 <ReservedFilename::isAtty()+0x1a>
c001158d:	81 fa 01 ff ff 0f    	cmp    edx,0xfffff01
c0011593:	0f 94 c0             	sete   al
c0011596:	c3                   	ret    
c0011597:	90                   	nop

c0011598 <ReservedFilename::write(unsigned long long, void*, int*)>:
c0011598:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001159c:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00115a0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115a3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00115a7:	3d 03 ff ff 0f       	cmp    eax,0xfffff03
c00115ac:	75 08                	jne    c00115b6 <ReservedFilename::write(unsigned long long, void*, int*)+0x1e>
c00115ae:	c7 02 00 00 00 00    	mov    DWORD PTR [edx],0x0
c00115b4:	eb 3d                	jmp    c00115f3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00115b6:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c00115bb:	75 17                	jne    c00115d4 <ReservedFilename::write(unsigned long long, void*, int*)+0x3c>
c00115bd:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00115c2:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c00115c5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c00115cb:	8b 10                	mov    edx,DWORD PTR [eax]
c00115cd:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00115d1:	ff 62 10             	jmp    DWORD PTR [edx+0x10]
c00115d4:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c00115d9:	75 04                	jne    c00115df <ReservedFilename::write(unsigned long long, void*, int*)+0x47>
c00115db:	89 0a                	mov    DWORD PTR [edx],ecx
c00115dd:	eb 14                	jmp    c00115f3 <ReservedFilename::write(unsigned long long, void*, int*)+0x5b>
c00115df:	3d 02 ff ff 0f       	cmp    eax,0xfffff02
c00115e4:	74 c8                	je     c00115ae <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00115e6:	2d 10 ff ff 0f       	sub    eax,0xfffff10
c00115eb:	83 e0 ef             	and    eax,0xffffffef
c00115ee:	83 f8 08             	cmp    eax,0x8
c00115f1:	76 bb                	jbe    c00115ae <ReservedFilename::write(unsigned long long, void*, int*)+0x16>
c00115f3:	31 c0                	xor    eax,eax
c00115f5:	c3                   	ret    

c00115f6 <UnixFile::getFileDescriptor()>:
c00115f6:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00115fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00115fd:	c3                   	ret    

c00115fe <UnixFile::UnixFile(int)>:
c00115fe:	53                   	push   ebx
c00115ff:	83 ec 28             	sub    esp,0x28
c0011602:	ba 34 ae 02 c0       	mov    edx,0xc002ae34
c0011607:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001160b:	89 10                	mov    DWORD PTR [eax],edx
c001160d:	81 7c 24 34 ff fe ff 0f 	cmp    DWORD PTR [esp+0x34],0xffffeff
c0011615:	0f 8f 8c 01 00 00    	jg     c00117a7 <UnixFile::UnixFile(int)+0x1a9>
c001161b:	a1 e0 dd 02 c0       	mov    eax,ds:0xc002dde0
c0011620:	8d 50 01             	lea    edx,[eax+0x1]
c0011623:	89 15 e0 dd 02 c0    	mov    DWORD PTR ds:0xc002dde0,edx
c0011629:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001162d:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c0011630:	83 ec 08             	sub    esp,0x8
c0011633:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c0011637:	68 b8 ef 02 c0       	push   0xc002efb8
c001163c:	e8 0b 79 01 00       	call   c0028f4c <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011641:	83 c4 10             	add    esp,0x10
c0011644:	a0 b4 ef 02 c0       	mov    al,ds:0xc002efb4
c0011649:	83 f0 01             	xor    eax,0x1
c001164c:	84 c0                	test   al,al
c001164e:	0f 84 54 01 00 00    	je     c00117a8 <UnixFile::UnixFile(int)+0x1aa>
c0011654:	c6 05 b4 ef 02 c0 01 	mov    BYTE PTR ds:0xc002efb4,0x1
c001165b:	c7 44 24 0c 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0xc
c0011663:	83 ec 0c             	sub    esp,0xc
c0011666:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001166a:	e8 39 e2 ff ff       	call   c000f8a8 <malloc>
c001166f:	83 c4 10             	add    esp,0x10
c0011672:	89 c3                	mov    ebx,eax
c0011674:	83 ec 08             	sub    esp,0x8
c0011677:	68 03 ff ff 0f       	push   0xfffff03
c001167c:	53                   	push   ebx
c001167d:	e8 2c 01 00 00       	call   c00117ae <ReservedFilename::ReservedFilename(int)>
c0011682:	83 c4 10             	add    esp,0x10
c0011685:	89 1d ac ef 02 c0    	mov    DWORD PTR ds:0xc002efac,ebx
c001168b:	c7 44 24 10 0c 00 00 00 	mov    DWORD PTR [esp+0x10],0xc
c0011693:	83 ec 0c             	sub    esp,0xc
c0011696:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001169a:	e8 09 e2 ff ff       	call   c000f8a8 <malloc>
c001169f:	83 c4 10             	add    esp,0x10
c00116a2:	89 c3                	mov    ebx,eax
c00116a4:	83 ec 08             	sub    esp,0x8
c00116a7:	68 01 ff ff 0f       	push   0xfffff01
c00116ac:	53                   	push   ebx
c00116ad:	e8 fc 00 00 00       	call   c00117ae <ReservedFilename::ReservedFilename(int)>
c00116b2:	83 c4 10             	add    esp,0x10
c00116b5:	89 1d b0 ef 02 c0    	mov    DWORD PTR ds:0xc002efb0,ebx
c00116bb:	c7 44 24 14 0c 00 00 00 	mov    DWORD PTR [esp+0x14],0xc
c00116c3:	83 ec 0c             	sub    esp,0xc
c00116c6:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00116ca:	e8 d9 e1 ff ff       	call   c000f8a8 <malloc>
c00116cf:	83 c4 10             	add    esp,0x10
c00116d2:	89 c3                	mov    ebx,eax
c00116d4:	83 ec 08             	sub    esp,0x8
c00116d7:	68 00 ff ff 0f       	push   0xfffff00
c00116dc:	53                   	push   ebx
c00116dd:	e8 cc 00 00 00       	call   c00117ae <ReservedFilename::ReservedFilename(int)>
c00116e2:	83 c4 10             	add    esp,0x10
c00116e5:	89 1d a4 ef 02 c0    	mov    DWORD PTR ds:0xc002efa4,ebx
c00116eb:	c7 44 24 18 0c 00 00 00 	mov    DWORD PTR [esp+0x18],0xc
c00116f3:	83 ec 0c             	sub    esp,0xc
c00116f6:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00116fa:	e8 a9 e1 ff ff       	call   c000f8a8 <malloc>
c00116ff:	83 c4 10             	add    esp,0x10
c0011702:	89 c3                	mov    ebx,eax
c0011704:	83 ec 08             	sub    esp,0x8
c0011707:	68 02 ff ff 0f       	push   0xfffff02
c001170c:	53                   	push   ebx
c001170d:	e8 9c 00 00 00       	call   c00117ae <ReservedFilename::ReservedFilename(int)>
c0011712:	83 c4 10             	add    esp,0x10
c0011715:	89 1d a8 ef 02 c0    	mov    DWORD PTR ds:0xc002efa8,ebx
c001171b:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0011723:	83 7c 24 1c 08       	cmp    DWORD PTR [esp+0x1c],0x8
c0011728:	7f 7e                	jg     c00117a8 <UnixFile::UnixFile(int)+0x1aa>
c001172a:	c7 44 24 04 0c 00 00 00 	mov    DWORD PTR [esp+0x4],0xc
c0011732:	83 ec 0c             	sub    esp,0xc
c0011735:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011739:	e8 6a e1 ff ff       	call   c000f8a8 <malloc>
c001173e:	83 c4 10             	add    esp,0x10
c0011741:	89 c3                	mov    ebx,eax
c0011743:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011747:	05 10 ff ff 0f       	add    eax,0xfffff10
c001174c:	83 ec 08             	sub    esp,0x8
c001174f:	50                   	push   eax
c0011750:	53                   	push   ebx
c0011751:	e8 58 00 00 00       	call   c00117ae <ReservedFilename::ReservedFilename(int)>
c0011756:	83 c4 10             	add    esp,0x10
c0011759:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001175d:	89 1c 85 80 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd1080],ebx
c0011764:	c7 44 24 08 0c 00 00 00 	mov    DWORD PTR [esp+0x8],0xc
c001176c:	83 ec 0c             	sub    esp,0xc
c001176f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0011773:	e8 30 e1 ff ff       	call   c000f8a8 <malloc>
c0011778:	83 c4 10             	add    esp,0x10
c001177b:	89 c3                	mov    ebx,eax
c001177d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011781:	05 20 ff ff 0f       	add    eax,0xfffff20
c0011786:	83 ec 08             	sub    esp,0x8
c0011789:	50                   	push   eax
c001178a:	53                   	push   ebx
c001178b:	e8 1e 00 00 00       	call   c00117ae <ReservedFilename::ReservedFilename(int)>
c0011790:	83 c4 10             	add    esp,0x10
c0011793:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0011797:	89 1c 85 40 ef 02 c0 	mov    DWORD PTR [eax*4-0x3ffd10c0],ebx
c001179e:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00117a2:	e9 7c ff ff ff       	jmp    c0011723 <UnixFile::UnixFile(int)+0x125>
c00117a7:	90                   	nop
c00117a8:	83 c4 28             	add    esp,0x28
c00117ab:	5b                   	pop    ebx
c00117ac:	c3                   	ret    
c00117ad:	90                   	nop

c00117ae <ReservedFilename::ReservedFilename(int)>:
c00117ae:	83 ec 0c             	sub    esp,0xc
c00117b1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117b5:	83 ec 08             	sub    esp,0x8
c00117b8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00117bc:	50                   	push   eax
c00117bd:	e8 3c fe ff ff       	call   c00115fe <UnixFile::UnixFile(int)>
c00117c2:	83 c4 10             	add    esp,0x10
c00117c5:	ba 50 ae 02 c0       	mov    edx,0xc002ae50
c00117ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117ce:	89 10                	mov    DWORD PTR [eax],edx
c00117d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00117d4:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c00117d8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00117db:	90                   	nop
c00117dc:	83 c4 0c             	add    esp,0xc
c00117df:	c3                   	ret    

c00117e0 <UnixFile::~UnixFile()>:
c00117e0:	83 ec 1c             	sub    esp,0x1c
c00117e3:	ba 34 ae 02 c0       	mov    edx,0xc002ae34
c00117e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117ec:	89 10                	mov    DWORD PTR [eax],edx
c00117ee:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00117f2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00117f5:	3d ff fe ff 0f       	cmp    eax,0xffffeff
c00117fa:	7f 73                	jg     c001186f <UnixFile::~UnixFile()+0x8f>
c00117fc:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011804:	83 ec 0c             	sub    esp,0xc
c0011807:	68 b8 ef 02 c0       	push   0xc002efb8
c001180c:	e8 0f 78 01 00       	call   c0029020 <LinkedList<UnixFile>::getFirstElement()>
c0011811:	83 c4 10             	add    esp,0x10
c0011814:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0011818:	83 ec 0c             	sub    esp,0xc
c001181b:	68 b8 ef 02 c0       	push   0xc002efb8
c0011820:	e8 03 78 01 00       	call   c0029028 <LinkedList<UnixFile>::removeFirst()>
c0011825:	83 c4 10             	add    esp,0x10
c0011828:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001182c:	3b 44 24 20          	cmp    eax,DWORD PTR [esp+0x20]
c0011830:	74 40                	je     c0011872 <UnixFile::~UnixFile()+0x92>
c0011832:	83 ec 08             	sub    esp,0x8
c0011835:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0011839:	68 b8 ef 02 c0       	push   0xc002efb8
c001183e:	e8 09 77 01 00       	call   c0028f4c <LinkedList<UnixFile>::addElement(UnixFile*)>
c0011843:	83 c4 10             	add    esp,0x10
c0011846:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001184a:	8d 50 01             	lea    edx,[eax+0x1]
c001184d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0011851:	3d 88 13 00 00       	cmp    eax,0x1388
c0011856:	0f 94 c0             	sete   al
c0011859:	84 c0                	test   al,al
c001185b:	74 a7                	je     c0011804 <UnixFile::~UnixFile()+0x24>
c001185d:	83 ec 0c             	sub    esp,0xc
c0011860:	68 0c ae 02 c0       	push   0xc002ae0c
c0011865:	e8 97 8f 00 00       	call   c001a801 <Krnl::panic(char const*)>
c001186a:	83 c4 10             	add    esp,0x10
c001186d:	eb 95                	jmp    c0011804 <UnixFile::~UnixFile()+0x24>
c001186f:	90                   	nop
c0011870:	eb 01                	jmp    c0011873 <UnixFile::~UnixFile()+0x93>
c0011872:	90                   	nop
c0011873:	90                   	nop
c0011874:	83 c4 1c             	add    esp,0x1c
c0011877:	c3                   	ret    

c0011878 <UnixFile::~UnixFile()>:
c0011878:	83 ec 0c             	sub    esp,0xc
c001187b:	83 ec 0c             	sub    esp,0xc
c001187e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011882:	e8 59 ff ff ff       	call   c00117e0 <UnixFile::~UnixFile()>
c0011887:	83 c4 10             	add    esp,0x10
c001188a:	83 ec 08             	sub    esp,0x8
c001188d:	6a 0c                	push   0xc
c001188f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0011893:	e8 cf 14 00 00       	call   c0012d67 <operator delete(void*, unsigned long)>
c0011898:	83 c4 10             	add    esp,0x10
c001189b:	83 c4 0c             	add    esp,0xc
c001189e:	c3                   	ret    
c001189f:	90                   	nop

c00118a0 <ReservedFilename::~ReservedFilename()>:
c00118a0:	83 ec 0c             	sub    esp,0xc
c00118a3:	ba 50 ae 02 c0       	mov    edx,0xc002ae50
c00118a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118ac:	89 10                	mov    DWORD PTR [eax],edx
c00118ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00118b2:	83 ec 0c             	sub    esp,0xc
c00118b5:	50                   	push   eax
c00118b6:	e8 25 ff ff ff       	call   c00117e0 <UnixFile::~UnixFile()>
c00118bb:	83 c4 10             	add    esp,0x10
c00118be:	90                   	nop
c00118bf:	83 c4 0c             	add    esp,0xc
c00118c2:	c3                   	ret    
c00118c3:	90                   	nop

c00118c4 <ReservedFilename::~ReservedFilename()>:
c00118c4:	83 ec 0c             	sub    esp,0xc
c00118c7:	83 ec 0c             	sub    esp,0xc
c00118ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118ce:	e8 cd ff ff ff       	call   c00118a0 <ReservedFilename::~ReservedFilename()>
c00118d3:	83 c4 10             	add    esp,0x10
c00118d6:	83 ec 08             	sub    esp,0x8
c00118d9:	6a 0c                	push   0xc
c00118db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00118df:	e8 83 14 00 00       	call   c0012d67 <operator delete(void*, unsigned long)>
c00118e4:	83 c4 10             	add    esp,0x10
c00118e7:	83 c4 0c             	add    esp,0xc
c00118ea:	c3                   	ret    

c00118eb <getFromFileDescriptor(int)>:
c00118eb:	53                   	push   ebx
c00118ec:	83 ec 08             	sub    esp,0x8
c00118ef:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00118f3:	81 e3 ff ff ff 0f    	and    ebx,0xfffffff
c00118f9:	81 fb ff fe ff 0f    	cmp    ebx,0xffffeff
c00118ff:	7f 2c                	jg     c001192d <getFromFileDescriptor(int)+0x42>
c0011901:	83 ec 0c             	sub    esp,0xc
c0011904:	68 b8 ef 02 c0       	push   0xc002efb8
c0011909:	e8 12 77 01 00       	call   c0029020 <LinkedList<UnixFile>::getFirstElement()>
c001190e:	83 c4 10             	add    esp,0x10
c0011911:	85 c0                	test   eax,eax
c0011913:	75 04                	jne    c0011919 <getFromFileDescriptor(int)+0x2e>
c0011915:	31 c0                	xor    eax,eax
c0011917:	eb 6e                	jmp    c0011987 <getFromFileDescriptor(int)+0x9c>
c0011919:	39 58 04             	cmp    DWORD PTR [eax+0x4],ebx
c001191c:	74 69                	je     c0011987 <getFromFileDescriptor(int)+0x9c>
c001191e:	52                   	push   edx
c001191f:	52                   	push   edx
c0011920:	50                   	push   eax
c0011921:	68 b8 ef 02 c0       	push   0xc002efb8
c0011926:	e8 9f 77 01 00       	call   c00290ca <LinkedList<UnixFile>::getNext(UnixFile*)>
c001192b:	eb e1                	jmp    c001190e <getFromFileDescriptor(int)+0x23>
c001192d:	a1 ac ef 02 c0       	mov    eax,ds:0xc002efac
c0011932:	81 fb 03 ff ff 0f    	cmp    ebx,0xfffff03
c0011938:	74 4d                	je     c0011987 <getFromFileDescriptor(int)+0x9c>
c001193a:	a1 b0 ef 02 c0       	mov    eax,ds:0xc002efb0
c001193f:	81 fb 01 ff ff 0f    	cmp    ebx,0xfffff01
c0011945:	74 40                	je     c0011987 <getFromFileDescriptor(int)+0x9c>
c0011947:	a1 a8 ef 02 c0       	mov    eax,ds:0xc002efa8
c001194c:	81 fb 02 ff ff 0f    	cmp    ebx,0xfffff02
c0011952:	74 33                	je     c0011987 <getFromFileDescriptor(int)+0x9c>
c0011954:	a1 a4 ef 02 c0       	mov    eax,ds:0xc002efa4
c0011959:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001195f:	74 26                	je     c0011987 <getFromFileDescriptor(int)+0x9c>
c0011961:	8d 83 f0 00 00 f0    	lea    eax,[ebx-0xfffff10]
c0011967:	83 f8 08             	cmp    eax,0x8
c001196a:	77 09                	ja     c0011975 <getFromFileDescriptor(int)+0x8a>
c001196c:	8b 04 85 80 ef 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd1080]
c0011973:	eb 12                	jmp    c0011987 <getFromFileDescriptor(int)+0x9c>
c0011975:	81 eb 20 ff ff 0f    	sub    ebx,0xfffff20
c001197b:	83 fb 08             	cmp    ebx,0x8
c001197e:	77 95                	ja     c0011915 <getFromFileDescriptor(int)+0x2a>
c0011980:	8b 04 9d 40 ef 02 c0 	mov    eax,DWORD PTR [ebx*4-0x3ffd10c0]
c0011987:	83 c4 08             	add    esp,0x8
c001198a:	5b                   	pop    ebx
c001198b:	c3                   	ret    

c001198c <__static_initialization_and_destruction_0(int, int)>:
c001198c:	83 ec 0c             	sub    esp,0xc
c001198f:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0011994:	75 34                	jne    c00119ca <__static_initialization_and_destruction_0(int, int)+0x3e>
c0011996:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001199e:	75 2a                	jne    c00119ca <__static_initialization_and_destruction_0(int, int)+0x3e>
c00119a0:	83 ec 0c             	sub    esp,0xc
c00119a3:	68 b8 ef 02 c0       	push   0xc002efb8
c00119a8:	e8 47 75 01 00       	call   c0028ef4 <LinkedList<UnixFile>::LinkedList()>
c00119ad:	83 c4 10             	add    esp,0x10
c00119b0:	83 ec 04             	sub    esp,0x4
c00119b3:	68 70 dd 02 c0       	push   0xc002dd70
c00119b8:	68 b8 ef 02 c0       	push   0xc002efb8
c00119bd:	68 f2 8e 02 c0       	push   0xc0028ef2
c00119c2:	e8 1a 13 00 00       	call   c0012ce1 <__cxa_atexit>
c00119c7:	83 c4 10             	add    esp,0x10
c00119ca:	90                   	nop
c00119cb:	83 c4 0c             	add    esp,0xc
c00119ce:	c3                   	ret    

c00119cf <_GLOBAL__sub_I__ZN8UnixFile6nextFdE>:
c00119cf:	83 ec 0c             	sub    esp,0xc
c00119d2:	83 ec 08             	sub    esp,0x8
c00119d5:	68 ff ff 00 00       	push   0xffff
c00119da:	6a 01                	push   0x1
c00119dc:	e8 ab ff ff ff       	call   c001198c <__static_initialization_and_destruction_0(int, int)>
c00119e1:	83 c4 10             	add    esp,0x10
c00119e4:	83 c4 0c             	add    esp,0xc
c00119e7:	c3                   	ret    

c00119e8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>:
c00119e8:	53                   	push   ebx
c00119e9:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00119ed:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00119f1:	8d 88 00 80 f3 ff    	lea    ecx,[eax-0xc8000]
c00119f7:	89 c8                	mov    eax,ecx
c00119f9:	d1 e8                	shr    eax,1
c00119fb:	03 05 e8 dd 02 c0    	add    eax,DWORD PTR ds:0xc002dde8
c0011a01:	83 e1 01             	and    ecx,0x1
c0011a04:	8a 10                	mov    dl,BYTE PTR [eax]
c0011a06:	75 09                	jne    c0011a11 <Virt::setPageState(unsigned long, Virt::VirtPageState)+0x29>
c0011a08:	83 e2 f0             	and    edx,0xfffffff0
c0011a0b:	09 da                	or     edx,ebx
c0011a0d:	88 10                	mov    BYTE PTR [eax],dl
c0011a0f:	5b                   	pop    ebx
c0011a10:	c3                   	ret    
c0011a11:	c1 e3 04             	shl    ebx,0x4
c0011a14:	83 e2 0f             	and    edx,0xf
c0011a17:	09 da                	or     edx,ebx
c0011a19:	88 10                	mov    BYTE PTR [eax],dl
c0011a1b:	5b                   	pop    ebx
c0011a1c:	c3                   	ret    

c0011a1d <Virt::getPageState(unsigned long)>:
c0011a1d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011a21:	8b 0d e8 dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002dde8
c0011a27:	8d 90 00 80 f3 ff    	lea    edx,[eax-0xc8000]
c0011a2d:	89 d0                	mov    eax,edx
c0011a2f:	d1 e8                	shr    eax,1
c0011a31:	83 e2 01             	and    edx,0x1
c0011a34:	8a 04 01             	mov    al,BYTE PTR [ecx+eax*1]
c0011a37:	75 04                	jne    c0011a3d <Virt::getPageState(unsigned long)+0x20>
c0011a39:	83 e0 0f             	and    eax,0xf
c0011a3c:	c3                   	ret    
c0011a3d:	c0 e8 04             	shr    al,0x4
c0011a40:	c3                   	ret    

c0011a41 <Virt::allocateKernelVirtualPages(int)>:
c0011a41:	55                   	push   ebp
c0011a42:	31 ed                	xor    ebp,ebp
c0011a44:	57                   	push   edi
c0011a45:	56                   	push   esi
c0011a46:	53                   	push   ebx
c0011a47:	31 db                	xor    ebx,ebx
c0011a49:	83 ec 1c             	sub    esp,0x1c
c0011a4c:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0011a50:	8b 3d e4 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002dde4
c0011a56:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0011a5b:	57                   	push   edi
c0011a5c:	e8 bc ff ff ff       	call   c0011a1d <Virt::getPageState(unsigned long)>
c0011a61:	5a                   	pop    edx
c0011a62:	84 c0                	test   al,al
c0011a64:	75 3a                	jne    c0011aa0 <Virt::allocateKernelVirtualPages(int)+0x5f>
c0011a66:	85 db                	test   ebx,ebx
c0011a68:	75 02                	jne    c0011a6c <Virt::allocateKernelVirtualPages(int)+0x2b>
c0011a6a:	89 fd                	mov    ebp,edi
c0011a6c:	43                   	inc    ebx
c0011a6d:	39 f3                	cmp    ebx,esi
c0011a6f:	74 5a                	je     c0011acb <Virt::allocateKernelVirtualPages(int)+0x8a>
c0011a71:	47                   	inc    edi
c0011a72:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011a78:	76 31                	jbe    c0011aab <Virt::allocateKernelVirtualPages(int)+0x6a>
c0011a7a:	c7 05 e4 dd 02 c0 00 80 0c 00 	mov    DWORD PTR ds:0xc002dde4,0xc8000
c0011a84:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0011a89:	75 28                	jne    c0011ab3 <Virt::allocateKernelVirtualPages(int)+0x72>
c0011a8b:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c0011a90:	bf 00 80 0c 00       	mov    edi,0xc8000
c0011a95:	57                   	push   edi
c0011a96:	e8 82 ff ff ff       	call   c0011a1d <Virt::getPageState(unsigned long)>
c0011a9b:	5a                   	pop    edx
c0011a9c:	84 c0                	test   al,al
c0011a9e:	74 c6                	je     c0011a66 <Virt::allocateKernelVirtualPages(int)+0x25>
c0011aa0:	31 db                	xor    ebx,ebx
c0011aa2:	47                   	inc    edi
c0011aa3:	81 ff ff ff 0e 00    	cmp    edi,0xeffff
c0011aa9:	77 cf                	ja     c0011a7a <Virt::allocateKernelVirtualPages(int)+0x39>
c0011aab:	89 3d e4 dd 02 c0    	mov    DWORD PTR ds:0xc002dde4,edi
c0011ab1:	eb a8                	jmp    c0011a5b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011ab3:	83 ec 0c             	sub    esp,0xc
c0011ab6:	68 64 ae 02 c0       	push   0xc002ae64
c0011abb:	e8 41 8d 00 00       	call   c001a801 <Krnl::panic(char const*)>
c0011ac0:	8b 3d e4 dd 02 c0    	mov    edi,DWORD PTR ds:0xc002dde4
c0011ac6:	83 c4 10             	add    esp,0x10
c0011ac9:	eb 90                	jmp    c0011a5b <Virt::allocateKernelVirtualPages(int)+0x1a>
c0011acb:	89 2d e4 dd 02 c0    	mov    DWORD PTR ds:0xc002dde4,ebp
c0011ad1:	4b                   	dec    ebx
c0011ad2:	74 5f                	je     c0011b33 <Virt::allocateKernelVirtualPages(int)+0xf2>
c0011ad4:	85 f6                	test   esi,esi
c0011ad6:	74 3d                	je     c0011b15 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011ad8:	89 e8                	mov    eax,ebp
c0011ada:	31 db                	xor    ebx,ebx
c0011adc:	8d 7e ff             	lea    edi,[esi-0x1]
c0011adf:	eb 14                	jmp    c0011af5 <Virt::allocateKernelVirtualPages(int)+0xb4>
c0011ae1:	6a 01                	push   0x1
c0011ae3:	43                   	inc    ebx
c0011ae4:	50                   	push   eax
c0011ae5:	e8 fe fe ff ff       	call   c00119e8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011aea:	58                   	pop    eax
c0011aeb:	39 f3                	cmp    ebx,esi
c0011aed:	5a                   	pop    edx
c0011aee:	74 25                	je     c0011b15 <Virt::allocateKernelVirtualPages(int)+0xd4>
c0011af0:	a1 e4 dd 02 c0       	mov    eax,ds:0xc002dde4
c0011af5:	8d 50 01             	lea    edx,[eax+0x1]
c0011af8:	85 db                	test   ebx,ebx
c0011afa:	89 15 e4 dd 02 c0    	mov    DWORD PTR ds:0xc002dde4,edx
c0011b00:	74 20                	je     c0011b22 <Virt::allocateKernelVirtualPages(int)+0xe1>
c0011b02:	39 df                	cmp    edi,ebx
c0011b04:	75 db                	jne    c0011ae1 <Virt::allocateKernelVirtualPages(int)+0xa0>
c0011b06:	6a 03                	push   0x3
c0011b08:	43                   	inc    ebx
c0011b09:	50                   	push   eax
c0011b0a:	e8 d9 fe ff ff       	call   c00119e8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b0f:	59                   	pop    ecx
c0011b10:	39 f3                	cmp    ebx,esi
c0011b12:	58                   	pop    eax
c0011b13:	75 db                	jne    c0011af0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b15:	83 c4 1c             	add    esp,0x1c
c0011b18:	89 e8                	mov    eax,ebp
c0011b1a:	5b                   	pop    ebx
c0011b1b:	c1 e0 0c             	shl    eax,0xc
c0011b1e:	5e                   	pop    esi
c0011b1f:	5f                   	pop    edi
c0011b20:	5d                   	pop    ebp
c0011b21:	c3                   	ret    
c0011b22:	6a 02                	push   0x2
c0011b24:	bb 01 00 00 00       	mov    ebx,0x1
c0011b29:	50                   	push   eax
c0011b2a:	e8 b9 fe ff ff       	call   c00119e8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b2f:	58                   	pop    eax
c0011b30:	5a                   	pop    edx
c0011b31:	eb bd                	jmp    c0011af0 <Virt::allocateKernelVirtualPages(int)+0xaf>
c0011b33:	6a 04                	push   0x4
c0011b35:	8d 45 01             	lea    eax,[ebp+0x1]
c0011b38:	55                   	push   ebp
c0011b39:	a3 e4 dd 02 c0       	mov    ds:0xc002dde4,eax
c0011b3e:	e8 a5 fe ff ff       	call   c00119e8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011b43:	59                   	pop    ecx
c0011b44:	89 e8                	mov    eax,ebp
c0011b46:	5b                   	pop    ebx
c0011b47:	c1 e0 0c             	shl    eax,0xc
c0011b4a:	83 c4 1c             	add    esp,0x1c
c0011b4d:	5b                   	pop    ebx
c0011b4e:	5e                   	pop    esi
c0011b4f:	5f                   	pop    edi
c0011b50:	5d                   	pop    ebp
c0011b51:	c3                   	ret    

c0011b52 <Virt::freeSwapfilePage(unsigned long)>:
c0011b52:	53                   	push   ebx
c0011b53:	8b 15 cc ef 02 c0    	mov    edx,DWORD PTR ds:0xc002efcc
c0011b59:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011b5d:	b8 01 00 00 00       	mov    eax,0x1
c0011b62:	89 cb                	mov    ebx,ecx
c0011b64:	d3 e0                	shl    eax,cl
c0011b66:	c1 eb 05             	shr    ebx,0x5
c0011b69:	f7 d0                	not    eax
c0011b6b:	21 04 9a             	and    DWORD PTR [edx+ebx*4],eax
c0011b6e:	5b                   	pop    ebx
c0011b6f:	c3                   	ret    

c0011b70 <Virt::swapIDToSector(unsigned long)>:
c0011b70:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011b74:	0f af 05 ec dd 02 c0 	imul   eax,DWORD PTR ds:0xc002ddec
c0011b7b:	03 05 f4 dd 02 c0    	add    eax,DWORD PTR ds:0xc002ddf4
c0011b81:	c3                   	ret    

c0011b82 <Virt::allocateSwapfilePage()>:
c0011b82:	55                   	push   ebp
c0011b83:	31 d2                	xor    edx,edx
c0011b85:	57                   	push   edi
c0011b86:	56                   	push   esi
c0011b87:	53                   	push   ebx
c0011b88:	83 ec 0c             	sub    esp,0xc
c0011b8b:	8b 0d ec dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002ddec
c0011b91:	a1 f0 dd 02 c0       	mov    eax,ds:0xc002ddf0
c0011b96:	f7 f1                	div    ecx
c0011b98:	39 0d f0 dd 02 c0    	cmp    DWORD PTR ds:0xc002ddf0,ecx
c0011b9e:	72 2d                	jb     c0011bcd <Virt::allocateSwapfilePage()+0x4b>
c0011ba0:	8b 35 cc ef 02 c0    	mov    esi,DWORD PTR ds:0xc002efcc
c0011ba6:	8b 16                	mov    edx,DWORD PTR [esi]
c0011ba8:	f6 c2 01             	test   dl,0x1
c0011bab:	74 3c                	je     c0011be9 <Virt::allocateSwapfilePage()+0x67>
c0011bad:	31 c9                	xor    ecx,ecx
c0011baf:	bf 01 00 00 00       	mov    edi,0x1
c0011bb4:	eb 12                	jmp    c0011bc8 <Virt::allocateSwapfilePage()+0x46>
c0011bb6:	89 fd                	mov    ebp,edi
c0011bb8:	89 ca                	mov    edx,ecx
c0011bba:	d3 e5                	shl    ebp,cl
c0011bbc:	c1 ea 05             	shr    edx,0x5
c0011bbf:	8d 1c 96             	lea    ebx,[esi+edx*4]
c0011bc2:	8b 13                	mov    edx,DWORD PTR [ebx]
c0011bc4:	85 ea                	test   edx,ebp
c0011bc6:	74 2a                	je     c0011bf2 <Virt::allocateSwapfilePage()+0x70>
c0011bc8:	41                   	inc    ecx
c0011bc9:	39 c8                	cmp    eax,ecx
c0011bcb:	77 e9                	ja     c0011bb6 <Virt::allocateSwapfilePage()+0x34>
c0011bcd:	83 ec 0c             	sub    esp,0xc
c0011bd0:	68 eb af 02 c0       	push   0xc002afeb
c0011bd5:	e8 27 8c 00 00       	call   c001a801 <Krnl::panic(char const*)>
c0011bda:	83 c4 10             	add    esp,0x10
c0011bdd:	31 c9                	xor    ecx,ecx
c0011bdf:	83 c4 0c             	add    esp,0xc
c0011be2:	89 c8                	mov    eax,ecx
c0011be4:	5b                   	pop    ebx
c0011be5:	5e                   	pop    esi
c0011be6:	5f                   	pop    edi
c0011be7:	5d                   	pop    ebp
c0011be8:	c3                   	ret    
c0011be9:	89 f3                	mov    ebx,esi
c0011beb:	bd 01 00 00 00       	mov    ebp,0x1
c0011bf0:	31 c9                	xor    ecx,ecx
c0011bf2:	09 ea                	or     edx,ebp
c0011bf4:	89 c8                	mov    eax,ecx
c0011bf6:	89 13                	mov    DWORD PTR [ebx],edx
c0011bf8:	83 c4 0c             	add    esp,0xc
c0011bfb:	5b                   	pop    ebx
c0011bfc:	5e                   	pop    esi
c0011bfd:	5f                   	pop    edi
c0011bfe:	5d                   	pop    ebp
c0011bff:	c3                   	ret    

c0011c00 <Virt::virtualMemorySetup()>:
c0011c00:	53                   	push   ebx
c0011c01:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c06:	83 ec 08             	sub    esp,0x8
c0011c09:	6a 0f                	push   0xf
c0011c0b:	53                   	push   ebx
c0011c0c:	43                   	inc    ebx
c0011c0d:	e8 d6 fd ff ff       	call   c00119e8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c12:	59                   	pop    ecx
c0011c13:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c19:	58                   	pop    eax
c0011c1a:	75 ed                	jne    c0011c09 <Virt::virtualMemorySetup()+0x9>
c0011c1c:	83 ec 08             	sub    esp,0x8
c0011c1f:	bb 00 80 0c 00       	mov    ebx,0xc8000
c0011c24:	68 00 00 00 c8       	push   0xc8000000
c0011c29:	68 02 b0 02 c0       	push   0xc002b002
c0011c2e:	e8 14 12 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0011c33:	58                   	pop    eax
c0011c34:	5a                   	pop    edx
c0011c35:	68 00 f0 ff ef       	push   0xeffff000
c0011c3a:	68 16 b0 02 c0       	push   0xc002b016
c0011c3f:	e8 03 12 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0011c44:	83 c4 10             	add    esp,0x10
c0011c47:	83 ec 08             	sub    esp,0x8
c0011c4a:	6a 00                	push   0x0
c0011c4c:	53                   	push   ebx
c0011c4d:	43                   	inc    ebx
c0011c4e:	e8 95 fd ff ff       	call   c00119e8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c53:	83 c4 10             	add    esp,0x10
c0011c56:	81 fb ff ff 0e 00    	cmp    ebx,0xeffff
c0011c5c:	75 e9                	jne    c0011c47 <Virt::virtualMemorySetup()+0x47>
c0011c5e:	bb 00 00 0d 00       	mov    ebx,0xd0000
c0011c63:	83 ec 08             	sub    esp,0x8
c0011c66:	6a 0f                	push   0xf
c0011c68:	53                   	push   ebx
c0011c69:	43                   	inc    ebx
c0011c6a:	e8 79 fd ff ff       	call   c00119e8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011c6f:	83 c4 10             	add    esp,0x10
c0011c72:	81 fb 00 00 0e 00    	cmp    ebx,0xe0000
c0011c78:	75 e9                	jne    c0011c63 <Virt::virtualMemorySetup()+0x63>
c0011c7a:	83 c4 08             	add    esp,0x8
c0011c7d:	5b                   	pop    ebx
c0011c7e:	c3                   	ret    

c0011c7f <Virt::swappingSetup()>:
c0011c7f:	c3                   	ret    

c0011c80 <Virt::setupPageSwapping(int)>:
c0011c80:	57                   	push   edi
c0011c81:	56                   	push   esi
c0011c82:	53                   	push   ebx
c0011c83:	83 ec 1c             	sub    esp,0x1c
c0011c86:	68 2a b0 02 c0       	push   0xc002b02a
c0011c8b:	e8 b7 11 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0011c90:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c0011c97:	e8 0c dc ff ff       	call   c000f8a8 <malloc>
c0011c9c:	83 c4 0c             	add    esp,0xc
c0011c9f:	89 c6                	mov    esi,eax
c0011ca1:	ff 35 b0 23 03 c0    	push   DWORD PTR ds:0xc00323b0
c0011ca7:	68 3e b0 02 c0       	push   0xc002b03e
c0011cac:	50                   	push   eax
c0011cad:	e8 f4 16 00 00       	call   c00133a6 <File::File(char const*, Process*)>
c0011cb2:	89 34 24             	mov    DWORD PTR [esp],esi
c0011cb5:	e8 c8 18 00 00       	call   c0013582 <File::unlink()>
c0011cba:	59                   	pop    ecx
c0011cbb:	5b                   	pop    ebx
c0011cbc:	6a 12                	push   0x12
c0011cbe:	56                   	push   esi
c0011cbf:	e8 46 17 00 00       	call   c001340a <File::open(FileOpenMode)>
c0011cc4:	83 c4 10             	add    esp,0x10
c0011cc7:	85 c0                	test   eax,eax
c0011cc9:	0f 85 5b 01 00 00    	jne    c0011e2a <Virt::setupPageSwapping(int)+0x1aa>
c0011ccf:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011cd3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0011cdb:	c1 e3 08             	shl    ebx,0x8
c0011cde:	83 ec 0c             	sub    esp,0xc
c0011ce1:	68 00 00 01 00       	push   0x10000
c0011ce6:	e8 bd db ff ff       	call   c000f8a8 <malloc>
c0011ceb:	83 c4 0c             	add    esp,0xc
c0011cee:	89 c7                	mov    edi,eax
c0011cf0:	68 00 00 01 00       	push   0x10000
c0011cf5:	68 ee 00 00 00       	push   0xee
c0011cfa:	50                   	push   eax
c0011cfb:	e8 6c ea fe ff       	call   c000076c <memset>
c0011d00:	83 c4 10             	add    esp,0x10
c0011d03:	85 db                	test   ebx,ebx
c0011d05:	79 03                	jns    c0011d0a <Virt::setupPageSwapping(int)+0x8a>
c0011d07:	83 c3 0f             	add    ebx,0xf
c0011d0a:	c1 fb 04             	sar    ebx,0x4
c0011d0d:	4b                   	dec    ebx
c0011d0e:	83 fb ff             	cmp    ebx,0xffffffff
c0011d11:	74 4f                	je     c0011d62 <Virt::setupPageSwapping(int)+0xe2>
c0011d13:	83 ec 0c             	sub    esp,0xc
c0011d16:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d18:	8d 54 24 18          	lea    edx,[esp+0x18]
c0011d1c:	52                   	push   edx
c0011d1d:	57                   	push   edi
c0011d1e:	6a 00                	push   0x0
c0011d20:	68 00 00 01 00       	push   0x10000
c0011d25:	56                   	push   esi
c0011d26:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0011d29:	83 c4 20             	add    esp,0x20
c0011d2c:	85 c0                	test   eax,eax
c0011d2e:	0f 85 e0 00 00 00    	jne    c0011e14 <Virt::setupPageSwapping(int)+0x194>
c0011d34:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011d38:	3d 00 00 01 00       	cmp    eax,0x10000
c0011d3d:	74 ce                	je     c0011d0d <Virt::setupPageSwapping(int)+0x8d>
c0011d3f:	83 ec 08             	sub    esp,0x8
c0011d42:	4b                   	dec    ebx
c0011d43:	50                   	push   eax
c0011d44:	68 91 b0 02 c0       	push   0xc002b091
c0011d49:	e8 f9 10 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0011d4e:	c7 04 24 9a b0 02 c0 	mov    DWORD PTR [esp],0xc002b09a
c0011d55:	e8 a7 8a 00 00       	call   c001a801 <Krnl::panic(char const*)>
c0011d5a:	83 c4 10             	add    esp,0x10
c0011d5d:	83 fb ff             	cmp    ebx,0xffffffff
c0011d60:	75 b1                	jne    c0011d13 <Virt::setupPageSwapping(int)+0x93>
c0011d62:	83 ec 0c             	sub    esp,0xc
c0011d65:	56                   	push   esi
c0011d66:	e8 fd 16 00 00       	call   c0013468 <File::close()>
c0011d6b:	89 3c 24             	mov    DWORD PTR [esp],edi
c0011d6e:	e8 55 db ff ff       	call   c000f8c8 <rfree>
c0011d73:	83 c4 10             	add    esp,0x10
c0011d76:	85 f6                	test   esi,esi
c0011d78:	74 0c                	je     c0011d86 <Virt::setupPageSwapping(int)+0x106>
c0011d7a:	83 ec 0c             	sub    esp,0xc
c0011d7d:	8b 06                	mov    eax,DWORD PTR [esi]
c0011d7f:	56                   	push   esi
c0011d80:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0011d83:	83 c4 10             	add    esp,0x10
c0011d86:	83 ec 08             	sub    esp,0x8
c0011d89:	a1 68 f4 02 c0       	mov    eax,ds:0xc002f468
c0011d8e:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0011d94:	8b 10                	mov    edx,DWORD PTR [eax]
c0011d96:	68 3e b0 02 c0       	push   0xc002b03e
c0011d9b:	50                   	push   eax
c0011d9c:	ff 52 5c             	call   DWORD PTR [edx+0x5c]
c0011d9f:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0011da3:	c6 05 f8 dd 02 c0 43 	mov    BYTE PTR ds:0xc002ddf8,0x43
c0011daa:	c1 e2 0b             	shl    edx,0xb
c0011dad:	a3 f4 dd 02 c0       	mov    ds:0xc002ddf4,eax
c0011db2:	89 15 f0 dd 02 c0    	mov    DWORD PTR ds:0xc002ddf0,edx
c0011db8:	c7 05 ec dd 02 c0 08 00 00 00 	mov    DWORD PTR ds:0xc002ddec,0x8
c0011dc2:	c1 ea 08             	shr    edx,0x8
c0011dc5:	89 14 24             	mov    DWORD PTR [esp],edx
c0011dc8:	e8 db da ff ff       	call   c000f8a8 <malloc>
c0011dcd:	83 c4 0c             	add    esp,0xc
c0011dd0:	89 c1                	mov    ecx,eax
c0011dd2:	a3 cc ef 02 c0       	mov    ds:0xc002efcc,eax
c0011dd7:	31 d2                	xor    edx,edx
c0011dd9:	a1 f0 dd 02 c0       	mov    eax,ds:0xc002ddf0
c0011dde:	f7 35 ec dd 02 c0    	div    DWORD PTR ds:0xc002ddec
c0011de4:	c1 e8 05             	shr    eax,0x5
c0011de7:	50                   	push   eax
c0011de8:	6a 00                	push   0x0
c0011dea:	51                   	push   ecx
c0011deb:	e8 7c e9 fe ff       	call   c000076c <memset>
c0011df0:	58                   	pop    eax
c0011df1:	a1 f0 dd 02 c0       	mov    eax,ds:0xc002ddf0
c0011df6:	5a                   	pop    edx
c0011df7:	31 d2                	xor    edx,edx
c0011df9:	f7 35 ec dd 02 c0    	div    DWORD PTR ds:0xc002ddec
c0011dff:	c1 e8 05             	shr    eax,0x5
c0011e02:	50                   	push   eax
c0011e03:	68 a0 b0 02 c0       	push   0xc002b0a0
c0011e08:	e8 3a 10 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0011e0d:	83 c4 20             	add    esp,0x20
c0011e10:	5b                   	pop    ebx
c0011e11:	5e                   	pop    esi
c0011e12:	5f                   	pop    edi
c0011e13:	c3                   	ret    
c0011e14:	83 ec 08             	sub    esp,0x8
c0011e17:	50                   	push   eax
c0011e18:	68 79 b0 02 c0       	push   0xc002b079
c0011e1d:	e8 25 10 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0011e22:	83 c4 10             	add    esp,0x10
c0011e25:	e9 0a ff ff ff       	jmp    c0011d34 <Virt::setupPageSwapping(int)+0xb4>
c0011e2a:	83 ec 08             	sub    esp,0x8
c0011e2d:	50                   	push   eax
c0011e2e:	68 55 b0 02 c0       	push   0xc002b055
c0011e33:	e8 0f 10 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0011e38:	c7 04 24 5e b0 02 c0 	mov    DWORD PTR [esp],0xc002b05e
c0011e3f:	e8 bd 89 00 00       	call   c001a801 <Krnl::panic(char const*)>
c0011e44:	83 c4 10             	add    esp,0x10
c0011e47:	e9 83 fe ff ff       	jmp    c0011ccf <Virt::setupPageSwapping(int)+0x4f>

c0011e4c <VAS::VAS()>:
c0011e4c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e50:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e57:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e5b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011e62:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e66:	a3 d0 ef 02 c0       	mov    ds:0xc002efd0,eax
c0011e6b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e6f:	c6 40 01 01          	mov    BYTE PTR [eax+0x1],0x1
c0011e73:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e77:	c6 00 01             	mov    BYTE PTR [eax],0x1
c0011e7a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0011e7e:	c7 40 0c 00 10 00 c2 	mov    DWORD PTR [eax+0xc],0xc2001000
c0011e85:	90                   	nop
c0011e86:	c3                   	ret    
c0011e87:	90                   	nop

c0011e88 <VAS::VAS(VAS*)>:
c0011e88:	83 ec 0c             	sub    esp,0xc
c0011e8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e8f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0011e96:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0011e9a:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0011ea1:	83 ec 0c             	sub    esp,0xc
c0011ea4:	68 84 ae 02 c0       	push   0xc002ae84
c0011ea9:	e8 53 89 00 00       	call   c001a801 <Krnl::panic(char const*)>
c0011eae:	83 c4 10             	add    esp,0x10
c0011eb1:	90                   	nop
c0011eb2:	83 c4 0c             	add    esp,0xc
c0011eb5:	c3                   	ret    

c0011eb6 <VAS::getForeignPageTableEntry(bool, unsigned long)>:
c0011eb6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0011eba:	89 c2                	mov    edx,eax
c0011ebc:	c1 e8 0a             	shr    eax,0xa
c0011ebf:	c1 ea 16             	shr    edx,0x16
c0011ec2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c0011ec7:	19 c9                	sbb    ecx,ecx
c0011ec9:	c1 e2 0c             	shl    edx,0xc
c0011ecc:	81 e1 00 00 c0 ff    	and    ecx,0xffc00000
c0011ed2:	25 fc 0f 00 00       	and    eax,0xffc
c0011ed7:	8d 94 11 00 00 c0 c2 	lea    edx,[ecx+edx*1-0x3d400000]
c0011ede:	01 d0                	add    eax,edx
c0011ee0:	c3                   	ret    
c0011ee1:	90                   	nop

c0011ee2 <VAS::getPageTableEntry(unsigned long)>:
c0011ee2:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0011ee6:	89 ca                	mov    edx,ecx
c0011ee8:	c1 e9 0a             	shr    ecx,0xa
c0011eeb:	c1 ea 16             	shr    edx,0x16
c0011eee:	81 e1 fc 0f 00 00    	and    ecx,0xffc
c0011ef4:	8d 82 00 fc 0f 00    	lea    eax,[edx+0xffc00]
c0011efa:	c1 e0 0c             	shl    eax,0xc
c0011efd:	8d 04 08             	lea    eax,[eax+ecx*1]
c0011f00:	c3                   	ret    

c0011f01 <Virt::freeKernelVirtualPages(unsigned long)>:
c0011f01:	57                   	push   edi
c0011f02:	56                   	push   esi
c0011f03:	be 01 00 00 00       	mov    esi,0x1
c0011f08:	53                   	push   ebx
c0011f09:	83 ec 10             	sub    esp,0x10
c0011f0c:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0011f10:	c1 eb 0c             	shr    ebx,0xc
c0011f13:	eb 3f                	jmp    c0011f54 <Virt::freeKernelVirtualPages(unsigned long)+0x53>
c0011f15:	83 ec 08             	sub    esp,0x8
c0011f18:	57                   	push   edi
c0011f19:	ff 35 d0 ef 02 c0    	push   DWORD PTR ds:0xc002efd0
c0011f1f:	e8 be ff ff ff       	call   c0011ee2 <VAS::getPageTableEntry(unsigned long)>
c0011f24:	83 c4 10             	add    esp,0x10
c0011f27:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f29:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f2d:	f6 c4 04             	test   ah,0x4
c0011f30:	75 5f                	jne    c0011f91 <Virt::freeKernelVirtualPages(unsigned long)+0x90>
c0011f32:	80 fa 04             	cmp    dl,0x4
c0011f35:	74 78                	je     c0011faf <Virt::freeKernelVirtualPages(unsigned long)+0xae>
c0011f37:	80 fa 02             	cmp    dl,0x2
c0011f3a:	0f 84 88 00 00 00    	je     c0011fc8 <Virt::freeKernelVirtualPages(unsigned long)+0xc7>
c0011f40:	80 fa 03             	cmp    dl,0x3
c0011f43:	0f 84 ad 00 00 00    	je     c0011ff6 <Virt::freeKernelVirtualPages(unsigned long)+0xf5>
c0011f49:	fe ca                	dec    dl
c0011f4b:	0f 84 92 00 00 00    	je     c0011fe3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011f51:	43                   	inc    ebx
c0011f52:	31 f6                	xor    esi,esi
c0011f54:	53                   	push   ebx
c0011f55:	89 df                	mov    edi,ebx
c0011f57:	e8 c1 fa ff ff       	call   c0011a1d <Virt::getPageState(unsigned long)>
c0011f5c:	c1 e7 0c             	shl    edi,0xc
c0011f5f:	59                   	pop    ecx
c0011f60:	84 c0                	test   al,al
c0011f62:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0011f66:	75 ad                	jne    c0011f15 <Virt::freeKernelVirtualPages(unsigned long)+0x14>
c0011f68:	83 ec 0c             	sub    esp,0xc
c0011f6b:	68 bb b0 02 c0       	push   0xc002b0bb
c0011f70:	e8 8c 88 00 00       	call   c001a801 <Krnl::panic(char const*)>
c0011f75:	58                   	pop    eax
c0011f76:	5a                   	pop    edx
c0011f77:	57                   	push   edi
c0011f78:	ff 35 d0 ef 02 c0    	push   DWORD PTR ds:0xc002efd0
c0011f7e:	e8 5f ff ff ff       	call   c0011ee2 <VAS::getPageTableEntry(unsigned long)>
c0011f83:	83 c4 10             	add    esp,0x10
c0011f86:	8b 00                	mov    eax,DWORD PTR [eax]
c0011f88:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011f8c:	f6 c4 04             	test   ah,0x4
c0011f8f:	74 c0                	je     c0011f51 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011f91:	88 54 24 0f          	mov    BYTE PTR [esp+0xf],dl
c0011f95:	25 00 f0 ff ff       	and    eax,0xfffff000
c0011f9a:	83 ec 0c             	sub    esp,0xc
c0011f9d:	50                   	push   eax
c0011f9e:	e8 e7 de ff ff       	call   c000fe8a <Phys::freePage(unsigned long)>
c0011fa3:	83 c4 10             	add    esp,0x10
c0011fa6:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c0011faa:	80 fa 04             	cmp    dl,0x4
c0011fad:	75 88                	jne    c0011f37 <Virt::freeKernelVirtualPages(unsigned long)+0x36>
c0011faf:	89 f0                	mov    eax,esi
c0011fb1:	84 c0                	test   al,al
c0011fb3:	75 47                	jne    c0011ffc <Virt::freeKernelVirtualPages(unsigned long)+0xfb>
c0011fb5:	c7 44 24 20 a8 ae 02 c0 	mov    DWORD PTR [esp+0x20],0xc002aea8
c0011fbd:	83 c4 10             	add    esp,0x10
c0011fc0:	5b                   	pop    ebx
c0011fc1:	5e                   	pop    esi
c0011fc2:	5f                   	pop    edi
c0011fc3:	e9 39 88 00 00       	jmp    c001a801 <Krnl::panic(char const*)>
c0011fc8:	89 f0                	mov    eax,esi
c0011fca:	84 c0                	test   al,al
c0011fcc:	75 15                	jne    c0011fe3 <Virt::freeKernelVirtualPages(unsigned long)+0xe2>
c0011fce:	83 ec 0c             	sub    esp,0xc
c0011fd1:	68 d7 b0 02 c0       	push   0xc002b0d7
c0011fd6:	e8 26 88 00 00       	call   c001a801 <Krnl::panic(char const*)>
c0011fdb:	83 c4 10             	add    esp,0x10
c0011fde:	e9 6e ff ff ff       	jmp    c0011f51 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011fe3:	83 ec 08             	sub    esp,0x8
c0011fe6:	6a 00                	push   0x0
c0011fe8:	53                   	push   ebx
c0011fe9:	e8 fa f9 ff ff       	call   c00119e8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0011fee:	83 c4 10             	add    esp,0x10
c0011ff1:	e9 5b ff ff ff       	jmp    c0011f51 <Virt::freeKernelVirtualPages(unsigned long)+0x50>
c0011ff6:	89 f0                	mov    eax,esi
c0011ff8:	84 c0                	test   al,al
c0011ffa:	75 15                	jne    c0012011 <Virt::freeKernelVirtualPages(unsigned long)+0x110>
c0011ffc:	83 ec 08             	sub    esp,0x8
c0011fff:	6a 00                	push   0x0
c0012001:	53                   	push   ebx
c0012002:	e8 e1 f9 ff ff       	call   c00119e8 <Virt::setPageState(unsigned long, Virt::VirtPageState)>
c0012007:	83 c4 10             	add    esp,0x10
c001200a:	83 c4 10             	add    esp,0x10
c001200d:	5b                   	pop    ebx
c001200e:	5e                   	pop    esi
c001200f:	5f                   	pop    edi
c0012010:	c3                   	ret    
c0012011:	c7 44 24 20 f3 b0 02 c0 	mov    DWORD PTR [esp+0x20],0xc002b0f3
c0012019:	83 c4 10             	add    esp,0x10
c001201c:	5b                   	pop    ebx
c001201d:	5e                   	pop    esi
c001201e:	5f                   	pop    edi
c001201f:	e9 dd 87 00 00       	jmp    c001a801 <Krnl::panic(char const*)>

c0012024 <VAS::freeAllocatedPages(unsigned long)>:
c0012024:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0012028:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001202c:	80 78 01 00          	cmp    BYTE PTR [eax+0x1],0x0
c0012030:	74 09                	je     c001203b <VAS::freeAllocatedPages(unsigned long)+0x17>
c0012032:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012036:	e9 c6 fe ff ff       	jmp    c0011f01 <Virt::freeKernelVirtualPages(unsigned long)>
c001203b:	c7 44 24 04 cc ae 02 c0 	mov    DWORD PTR [esp+0x4],0xc002aecc
c0012043:	e9 ff 0d 00 00       	jmp    c0012e47 <Dbg::kprintf(char const*, ...)>

c0012048 <VAS::virtualToPhysical(unsigned long)>:
c0012048:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001204c:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c0012050:	e8 8d fe ff ff       	call   c0011ee2 <VAS::getPageTableEntry(unsigned long)>
c0012055:	5a                   	pop    edx
c0012056:	8b 00                	mov    eax,DWORD PTR [eax]
c0012058:	59                   	pop    ecx
c0012059:	25 00 f0 ff ff       	and    eax,0xfffff000
c001205e:	c3                   	ret    
c001205f:	90                   	nop

c0012060 <VAS::reflagRange(unsigned long, int, int, int)>:
c0012060:	55                   	push   ebp
c0012061:	57                   	push   edi
c0012062:	56                   	push   esi
c0012063:	53                   	push   ebx
c0012064:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0012068:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001206c:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0012070:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0012074:	85 db                	test   ebx,ebx
c0012076:	7e 22                	jle    c001209a <VAS::reflagRange(unsigned long, int, int, int)+0x3a>
c0012078:	c1 e3 0c             	shl    ebx,0xc
c001207b:	01 f3                	add    ebx,esi
c001207d:	56                   	push   esi
c001207e:	81 c6 00 10 00 00    	add    esi,0x1000
c0012084:	55                   	push   ebp
c0012085:	e8 58 fe ff ff       	call   c0011ee2 <VAS::getPageTableEntry(unsigned long)>
c001208a:	5a                   	pop    edx
c001208b:	59                   	pop    ecx
c001208c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001208e:	21 f9                	and    ecx,edi
c0012090:	0b 4c 24 24          	or     ecx,DWORD PTR [esp+0x24]
c0012094:	39 f3                	cmp    ebx,esi
c0012096:	89 08                	mov    DWORD PTR [eax],ecx
c0012098:	75 e3                	jne    c001207d <VAS::reflagRange(unsigned long, int, int, int)+0x1d>
c001209a:	5b                   	pop    ebx
c001209b:	5e                   	pop    esi
c001209c:	5f                   	pop    edi
c001209d:	5d                   	pop    ebp
c001209e:	c3                   	ret    
c001209f:	90                   	nop

c00120a0 <VAS::setToWriteCombining(unsigned long, int)>:
c00120a0:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00120a5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00120ab:	f6 80 90 11 00 00 20 	test   BYTE PTR [eax+0x1190],0x20
c00120b2:	75 01                	jne    c00120b5 <VAS::setToWriteCombining(unsigned long, int)+0x15>
c00120b4:	c3                   	ret    
c00120b5:	68 80 00 00 00       	push   0x80
c00120ba:	6a ff                	push   0xffffffff
c00120bc:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120c4:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00120c8:	e8 93 ff ff ff       	call   c0012060 <VAS::reflagRange(unsigned long, int, int, int)>
c00120cd:	83 c4 14             	add    esp,0x14
c00120d0:	c3                   	ret    
c00120d1:	90                   	nop

c00120d2 <VAS::mapOtherVASIn(bool, VAS*)>:
c00120d2:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00120d7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00120db:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00120de:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00120e2:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
c00120e5:	19 c0                	sbb    eax,eax
c00120e7:	83 ca 03             	or     edx,0x3
c00120ea:	83 e0 fc             	and    eax,0xfffffffc
c00120ed:	89 94 01 2c 0c 00 00 	mov    DWORD PTR [ecx+eax*1+0xc2c],edx
c00120f4:	0f 20 d8             	mov    eax,cr3
c00120f7:	0f 22 d8             	mov    cr3,eax
c00120fa:	c3                   	ret    
c00120fb:	90                   	nop

c00120fc <VAS::~VAS()>:
c00120fc:	83 ec 2c             	sub    esp,0x2c
c00120ff:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0012107:	fa                   	cli    
c0012108:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001210d:	40                   	inc    eax
c001210e:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0012113:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012118:	8b 00                	mov    eax,DWORD PTR [eax]
c001211a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001211d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c0012123:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0012127:	6a 01                	push   0x1
c0012129:	50                   	push   eax
c001212a:	e8 a3 ff ff ff       	call   c00120d2 <VAS::mapOtherVASIn(bool, VAS*)>
c001212f:	83 c4 0c             	add    esp,0xc
c0012132:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001213a:	81 7c 24 18 ff 02 00 00 	cmp    DWORD PTR [esp+0x18],0x2ff
c0012142:	0f 8f d4 00 00 00    	jg     c001221c <VAS::~VAS()+0x120>
c0012148:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001214c:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c001214f:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012153:	c1 e2 02             	shl    edx,0x2
c0012156:	01 d0                	add    eax,edx
c0012158:	8b 00                	mov    eax,DWORD PTR [eax]
c001215a:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001215e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0012162:	83 e0 01             	and    eax,0x1
c0012165:	0f 84 a8 00 00 00    	je     c0012213 <VAS::~VAS()+0x117>
c001216b:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0012173:	81 7c 24 14 ff 03 00 00 	cmp    DWORD PTR [esp+0x14],0x3ff
c001217b:	7f 72                	jg     c00121ef <VAS::~VAS()+0xf3>
c001217d:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012181:	c1 e0 0a             	shl    eax,0xa
c0012184:	89 c2                	mov    edx,eax
c0012186:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001218a:	01 d0                	add    eax,edx
c001218c:	c1 e0 0c             	shl    eax,0xc
c001218f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0012193:	b8 00 20 00 c2       	mov    eax,0xc2002000
c0012198:	8b 00                	mov    eax,DWORD PTR [eax]
c001219a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001219d:	8b 80 32 05 00 00    	mov    eax,DWORD PTR [eax+0x532]
c00121a3:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c00121a7:	6a 01                	push   0x1
c00121a9:	50                   	push   eax
c00121aa:	e8 07 fd ff ff       	call   c0011eb6 <VAS::getForeignPageTableEntry(bool, unsigned long)>
c00121af:	83 c4 0c             	add    esp,0xc
c00121b2:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00121b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00121ba:	8b 00                	mov    eax,DWORD PTR [eax]
c00121bc:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00121c0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121c4:	25 01 04 00 00       	and    eax,0x401
c00121c9:	3d 01 04 00 00       	cmp    eax,0x401
c00121ce:	75 19                	jne    c00121e9 <VAS::~VAS()+0xed>
c00121d0:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00121d4:	25 00 f0 ff ff       	and    eax,0xfffff000
c00121d9:	83 ec 0c             	sub    esp,0xc
c00121dc:	50                   	push   eax
c00121dd:	e8 a8 dc ff ff       	call   c000fe8a <Phys::freePage(unsigned long)>
c00121e2:	83 c4 10             	add    esp,0x10
c00121e5:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00121e9:	ff 44 24 14          	inc    DWORD PTR [esp+0x14]
c00121ed:	eb 84                	jmp    c0012173 <VAS::~VAS()+0x77>
c00121ef:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121f3:	25 00 04 00 00       	and    eax,0x400
c00121f8:	74 19                	je     c0012213 <VAS::~VAS()+0x117>
c00121fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00121fe:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012203:	83 ec 0c             	sub    esp,0xc
c0012206:	50                   	push   eax
c0012207:	e8 7e dc ff ff       	call   c000fe8a <Phys::freePage(unsigned long)>
c001220c:	83 c4 10             	add    esp,0x10
c001220f:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012213:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012217:	e9 1e ff ff ff       	jmp    c001213a <VAS::~VAS()+0x3e>
c001221c:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012220:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012223:	83 ec 0c             	sub    esp,0xc
c0012226:	50                   	push   eax
c0012227:	e8 d5 fc ff ff       	call   c0011f01 <Virt::freeKernelVirtualPages(unsigned long)>
c001222c:	83 c4 10             	add    esp,0x10
c001222f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012233:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012236:	83 ec 0c             	sub    esp,0xc
c0012239:	50                   	push   eax
c001223a:	e8 4b dc ff ff       	call   c000fe8a <Phys::freePage(unsigned long)>
c001223f:	83 c4 10             	add    esp,0x10
c0012242:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c0012246:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001224a:	c1 e0 02             	shl    eax,0x2
c001224d:	83 ec 08             	sub    esp,0x8
c0012250:	50                   	push   eax
c0012251:	68 f0 ae 02 c0       	push   0xc002aef0
c0012256:	e8 ec 0b 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001225b:	83 c4 10             	add    esp,0x10
c001225e:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0012263:	48                   	dec    eax
c0012264:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0012269:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001226e:	85 c0                	test   eax,eax
c0012270:	75 01                	jne    c0012273 <VAS::~VAS()+0x177>
c0012272:	fb                   	sti    
c0012273:	90                   	nop
c0012274:	83 c4 2c             	add    esp,0x2c
c0012277:	c3                   	ret    

c0012278 <VAS::mapPage(unsigned long, unsigned long, int)>:
c0012278:	55                   	push   ebp
c0012279:	57                   	push   edi
c001227a:	56                   	push   esi
c001227b:	53                   	push   ebx
c001227c:	83 ec 1c             	sub    esp,0x1c
c001227f:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0012283:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012287:	81 fb ff ff ff bf    	cmp    ebx,0xbfffffff
c001228d:	77 08                	ja     c0012297 <VAS::mapPage(unsigned long, unsigned long, int)+0x1f>
c001228f:	0f 20 d8             	mov    eax,cr3
c0012292:	39 47 10             	cmp    DWORD PTR [edi+0x10],eax
c0012295:	75 47                	jne    c00122de <VAS::mapPage(unsigned long, unsigned long, int)+0x66>
c0012297:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001229b:	09 d8                	or     eax,ebx
c001229d:	a9 ff 0f 00 00       	test   eax,0xfff
c00122a2:	75 57                	jne    c00122fb <VAS::mapPage(unsigned long, unsigned long, int)+0x83>
c00122a4:	89 de                	mov    esi,ebx
c00122a6:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c00122a9:	c1 ee 16             	shr    esi,0x16
c00122ac:	8d 14 b5 00 00 00 00 	lea    edx,[esi*4+0x0]
c00122b3:	f6 04 10 01          	test   BYTE PTR [eax+edx*1],0x1
c00122b7:	74 54                	je     c001230d <VAS::mapPage(unsigned long, unsigned long, int)+0x95>
c00122b9:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00122bd:	81 c6 00 fc 0f 00    	add    esi,0xffc00
c00122c3:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c00122c7:	c1 e6 0c             	shl    esi,0xc
c00122ca:	c1 eb 0a             	shr    ebx,0xa
c00122cd:	81 e3 fc 0f 00 00    	and    ebx,0xffc
c00122d3:	89 04 33             	mov    DWORD PTR [ebx+esi*1],eax
c00122d6:	83 c4 1c             	add    esp,0x1c
c00122d9:	5b                   	pop    ebx
c00122da:	5e                   	pop    esi
c00122db:	5f                   	pop    edi
c00122dc:	5d                   	pop    ebp
c00122dd:	c3                   	ret    
c00122de:	83 ec 0c             	sub    esp,0xc
c00122e1:	68 10 af 02 c0       	push   0xc002af10
c00122e6:	e8 5c 0b 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00122eb:	83 c4 10             	add    esp,0x10
c00122ee:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00122f2:	09 d8                	or     eax,ebx
c00122f4:	a9 ff 0f 00 00       	test   eax,0xfff
c00122f9:	74 a9                	je     c00122a4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c00122fb:	83 ec 0c             	sub    esp,0xc
c00122fe:	68 78 af 02 c0       	push   0xc002af78
c0012303:	e8 f9 84 00 00       	call   c001a801 <Krnl::panic(char const*)>
c0012308:	83 c4 10             	add    esp,0x10
c001230b:	eb 97                	jmp    c00122a4 <VAS::mapPage(unsigned long, unsigned long, int)+0x2c>
c001230d:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012311:	e8 fe db ff ff       	call   c000ff14 <Phys::allocatePage()>
c0012316:	83 ec 0c             	sub    esp,0xc
c0012319:	89 c5                	mov    ebp,eax
c001231b:	8b 0d d0 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002efd0
c0012321:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0012325:	6a 01                	push   0x1
c0012327:	e8 15 f7 ff ff       	call   c0011a41 <Virt::allocateKernelVirtualPages(int)>
c001232c:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c0012333:	6a 01                	push   0x1
c0012335:	50                   	push   eax
c0012336:	55                   	push   ebp
c0012337:	81 cd 07 04 00 00    	or     ebp,0x407
c001233d:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c0012341:	51                   	push   ecx
c0012342:	e8 27 02 00 00       	call   c001256e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012347:	83 c4 1c             	add    esp,0x1c
c001234a:	68 00 10 00 00       	push   0x1000
c001234f:	6a 00                	push   0x0
c0012351:	50                   	push   eax
c0012352:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0012356:	e8 11 e4 fe ff       	call   c000076c <memset>
c001235b:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001235f:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0012362:	e8 9a fb ff ff       	call   c0011f01 <Virt::freeKernelVirtualPages(unsigned long)>
c0012367:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001236b:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c001236e:	83 c4 10             	add    esp,0x10
c0012371:	89 2c 10             	mov    DWORD PTR [eax+edx*1],ebp
c0012374:	e9 40 ff ff ff       	jmp    c00122b9 <VAS::mapPage(unsigned long, unsigned long, int)+0x41>
c0012379:	90                   	nop

c001237a <VAS::allocatePages(int, int)>:
c001237a:	55                   	push   ebp
c001237b:	57                   	push   edi
c001237c:	56                   	push   esi
c001237d:	53                   	push   ebx
c001237e:	83 ec 1c             	sub    esp,0x1c
c0012381:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0012385:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001238a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012390:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c0012396:	83 e0 01             	and    eax,0x1
c0012399:	80 7f 01 00          	cmp    BYTE PTR [edi+0x1],0x0
c001239d:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c00123a1:	0f 85 cc 00 00 00    	jne    c0012473 <VAS::allocatePages(int, int)+0xf9>
c00123a7:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c00123aa:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00123ae:	85 c0                	test   eax,eax
c00123b0:	0f 84 a1 00 00 00    	je     c0012457 <VAS::allocatePages(int, int)+0xdd>
c00123b6:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00123ba:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00123be:	c1 e6 0c             	shl    esi,0xc
c00123c1:	03 74 24 0c          	add    esi,DWORD PTR [esp+0xc]
c00123c5:	85 c0                	test   eax,eax
c00123c7:	89 77 04             	mov    DWORD PTR [edi+0x4],esi
c00123ca:	7e 33                	jle    c00123ff <VAS::allocatePages(int, int)+0x85>
c00123cc:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c00123d0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00123d4:	81 cd 00 04 00 00    	or     ebp,0x400
c00123da:	e8 35 db ff ff       	call   c000ff14 <Phys::allocatePage()>
c00123df:	55                   	push   ebp
c00123e0:	53                   	push   ebx
c00123e1:	50                   	push   eax
c00123e2:	57                   	push   edi
c00123e3:	e8 90 fe ff ff       	call   c0012278 <VAS::mapPage(unsigned long, unsigned long, int)>
c00123e8:	83 c4 10             	add    esp,0x10
c00123eb:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00123f0:	74 03                	je     c00123f5 <VAS::allocatePages(int, int)+0x7b>
c00123f2:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00123f5:	81 c3 00 10 00 00    	add    ebx,0x1000
c00123fb:	39 de                	cmp    esi,ebx
c00123fd:	75 db                	jne    c00123da <VAS::allocatePages(int, int)+0x60>
c00123ff:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c0012404:	75 12                	jne    c0012418 <VAS::allocatePages(int, int)+0x9e>
c0012406:	0f 20 d8             	mov    eax,cr3
c0012409:	0f 22 d8             	mov    cr3,eax
c001240c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012410:	83 c4 1c             	add    esp,0x1c
c0012413:	5b                   	pop    ebx
c0012414:	5e                   	pop    esi
c0012415:	5f                   	pop    edi
c0012416:	5d                   	pop    ebp
c0012417:	c3                   	ret    
c0012418:	c1 ee 0a             	shr    esi,0xa
c001241b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001241f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012425:	c1 eb 0a             	shr    ebx,0xa
c0012428:	8d 86 00 00 c0 ff    	lea    eax,[esi-0x400000]
c001242e:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012434:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001243a:	39 c3                	cmp    ebx,eax
c001243c:	77 ce                	ja     c001240c <VAS::allocatePages(int, int)+0x92>
c001243e:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012441:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012447:	39 d8                	cmp    eax,ebx
c0012449:	73 f3                	jae    c001243e <VAS::allocatePages(int, int)+0xc4>
c001244b:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001244f:	83 c4 1c             	add    esp,0x1c
c0012452:	5b                   	pop    ebx
c0012453:	5e                   	pop    esi
c0012454:	5f                   	pop    edi
c0012455:	5d                   	pop    ebp
c0012456:	c3                   	ret    
c0012457:	83 ec 0c             	sub    esp,0xc
c001245a:	68 9c af 02 c0       	push   0xc002af9c
c001245f:	e8 9d 83 00 00       	call   c001a801 <Krnl::panic(char const*)>
c0012464:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c0012467:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001246b:	83 c4 10             	add    esp,0x10
c001246e:	e9 43 ff ff ff       	jmp    c00123b6 <VAS::allocatePages(int, int)+0x3c>
c0012473:	83 ec 0c             	sub    esp,0xc
c0012476:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001247a:	e8 c2 f5 ff ff       	call   c0011a41 <Virt::allocateKernelVirtualPages(int)>
c001247f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0012483:	83 c4 10             	add    esp,0x10
c0012486:	3d ff ff ff bf       	cmp    eax,0xbfffffff
c001248b:	0f 87 9b 00 00 00    	ja     c001252c <VAS::allocatePages(int, int)+0x1b2>
c0012491:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012495:	85 d2                	test   edx,edx
c0012497:	7e 3c                	jle    c00124d5 <VAS::allocatePages(int, int)+0x15b>
c0012499:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001249d:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00124a1:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00124a5:	c1 e5 0c             	shl    ebp,0xc
c00124a8:	81 ce 00 04 00 00    	or     esi,0x400
c00124ae:	01 dd                	add    ebp,ebx
c00124b0:	e8 5f da ff ff       	call   c000ff14 <Phys::allocatePage()>
c00124b5:	56                   	push   esi
c00124b6:	53                   	push   ebx
c00124b7:	50                   	push   eax
c00124b8:	57                   	push   edi
c00124b9:	e8 ba fd ff ff       	call   c0012278 <VAS::mapPage(unsigned long, unsigned long, int)>
c00124be:	83 c4 10             	add    esp,0x10
c00124c1:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124c6:	74 03                	je     c00124cb <VAS::allocatePages(int, int)+0x151>
c00124c8:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00124cb:	81 c3 00 10 00 00    	add    ebx,0x1000
c00124d1:	39 dd                	cmp    ebp,ebx
c00124d3:	75 db                	jne    c00124b0 <VAS::allocatePages(int, int)+0x136>
c00124d5:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00124da:	0f 84 26 ff ff ff    	je     c0012406 <VAS::allocatePages(int, int)+0x8c>
c00124e0:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00124e4:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00124e8:	89 d3                	mov    ebx,edx
c00124ea:	c1 e0 0c             	shl    eax,0xc
c00124ed:	c1 eb 0a             	shr    ebx,0xa
c00124f0:	01 d0                	add    eax,edx
c00124f2:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c00124f8:	c1 e8 0a             	shr    eax,0xa
c00124fb:	81 eb 00 00 40 00    	sub    ebx,0x400000
c0012501:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012506:	2d 00 00 40 00       	sub    eax,0x400000
c001250b:	39 c3                	cmp    ebx,eax
c001250d:	0f 87 f9 fe ff ff    	ja     c001240c <VAS::allocatePages(int, int)+0x92>
c0012513:	0f 01 3b             	invlpg BYTE PTR [ebx]
c0012516:	81 c3 00 10 00 00    	add    ebx,0x1000
c001251c:	39 d8                	cmp    eax,ebx
c001251e:	73 f3                	jae    c0012513 <VAS::allocatePages(int, int)+0x199>
c0012520:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0012524:	83 c4 1c             	add    esp,0x1c
c0012527:	5b                   	pop    ebx
c0012528:	5e                   	pop    esi
c0012529:	5f                   	pop    edi
c001252a:	5d                   	pop    ebp
c001252b:	c3                   	ret    
c001252c:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0012531:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012537:	f6 80 90 11 00 00 10 	test   BYTE PTR [eax+0x1190],0x10
c001253e:	0f 84 4d ff ff ff    	je     c0012491 <VAS::allocatePages(int, int)+0x117>
c0012544:	81 4c 24 38 00 01 00 00 	or     DWORD PTR [esp+0x38],0x100
c001254c:	e9 40 ff ff ff       	jmp    c0012491 <VAS::allocatePages(int, int)+0x117>
c0012551:	90                   	nop

c0012552 <VAS::setCPUSpecific(unsigned long)>:
c0012552:	83 ec 0c             	sub    esp,0xc
c0012555:	6a 05                	push   0x5
c0012557:	68 00 00 40 c2       	push   0xc2400000
c001255c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012560:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012564:	e8 0f fd ff ff       	call   c0012278 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012569:	83 c4 1c             	add    esp,0x1c
c001256c:	c3                   	ret    
c001256d:	90                   	nop

c001256e <VAS::mapRange(unsigned long, unsigned long, int, int)>:
c001256e:	55                   	push   ebp
c001256f:	57                   	push   edi
c0012570:	56                   	push   esi
c0012571:	53                   	push   ebx
c0012572:	83 ec 1c             	sub    esp,0x1c
c0012575:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001257a:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001257e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012584:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0012588:	8a 80 91 11 00 00    	mov    al,BYTE PTR [eax+0x1191]
c001258e:	8b 6c 24 40          	mov    ebp,DWORD PTR [esp+0x40]
c0012592:	83 e0 01             	and    eax,0x1
c0012595:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0012599:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001259d:	85 c0                	test   eax,eax
c001259f:	7e 39                	jle    c00125da <VAS::mapRange(unsigned long, unsigned long, int, int)+0x6c>
c00125a1:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125a5:	89 f3                	mov    ebx,esi
c00125a7:	c1 e0 0c             	shl    eax,0xc
c00125aa:	01 f0                	add    eax,esi
c00125ac:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00125b0:	55                   	push   ebp
c00125b1:	53                   	push   ebx
c00125b2:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125b6:	29 f0                	sub    eax,esi
c00125b8:	01 d8                	add    eax,ebx
c00125ba:	50                   	push   eax
c00125bb:	57                   	push   edi
c00125bc:	e8 b7 fc ff ff       	call   c0012278 <VAS::mapPage(unsigned long, unsigned long, int)>
c00125c1:	83 c4 10             	add    esp,0x10
c00125c4:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125c9:	74 03                	je     c00125ce <VAS::mapRange(unsigned long, unsigned long, int, int)+0x60>
c00125cb:	0f 01 3b             	invlpg BYTE PTR [ebx]
c00125ce:	81 c3 00 10 00 00    	add    ebx,0x1000
c00125d4:	39 5c 24 0c          	cmp    DWORD PTR [esp+0xc],ebx
c00125d8:	75 d6                	jne    c00125b0 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x42>
c00125da:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c00125df:	75 10                	jne    c00125f1 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x83>
c00125e1:	0f 20 d8             	mov    eax,cr3
c00125e4:	0f 22 d8             	mov    cr3,eax
c00125e7:	83 c4 1c             	add    esp,0x1c
c00125ea:	89 f0                	mov    eax,esi
c00125ec:	5b                   	pop    ebx
c00125ed:	5e                   	pop    esi
c00125ee:	5f                   	pop    edi
c00125ef:	5d                   	pop    ebp
c00125f0:	c3                   	ret    
c00125f1:	89 f3                	mov    ebx,esi
c00125f3:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00125f7:	c1 eb 0a             	shr    ebx,0xa
c00125fa:	c1 e0 0c             	shl    eax,0xc
c00125fd:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c0012603:	01 f0                	add    eax,esi
c0012605:	81 eb 00 00 40 00    	sub    ebx,0x400000
c001260b:	c1 e8 0a             	shr    eax,0xa
c001260e:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012613:	2d 00 00 40 00       	sub    eax,0x400000
c0012618:	39 c3                	cmp    ebx,eax
c001261a:	77 cb                	ja     c00125e7 <VAS::mapRange(unsigned long, unsigned long, int, int)+0x79>
c001261c:	0f 01 3b             	invlpg BYTE PTR [ebx]
c001261f:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012625:	39 d8                	cmp    eax,ebx
c0012627:	73 f3                	jae    c001261c <VAS::mapRange(unsigned long, unsigned long, int, int)+0xae>
c0012629:	83 c4 1c             	add    esp,0x1c
c001262c:	89 f0                	mov    eax,esi
c001262e:	5b                   	pop    ebx
c001262f:	5e                   	pop    esi
c0012630:	5f                   	pop    edi
c0012631:	5d                   	pop    ebp
c0012632:	c3                   	ret    
c0012633:	90                   	nop

c0012634 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>:
c0012634:	55                   	push   ebp
c0012635:	57                   	push   edi
c0012636:	56                   	push   esi
c0012637:	53                   	push   ebx
c0012638:	83 ec 1c             	sub    esp,0x1c
c001263b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001263f:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0012643:	0b 44 24 3c          	or     eax,DWORD PTR [esp+0x3c]
c0012647:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c001264b:	a9 ff 0f 00 00       	test   eax,0xfff
c0012650:	75 4a                	jne    c001269c <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x68>
c0012652:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0012656:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012659:	c1 eb 16             	shr    ebx,0x16
c001265c:	8d 34 9d 00 00 00 00 	lea    esi,[ebx*4+0x0]
c0012663:	f6 04 30 01          	test   BYTE PTR [eax+esi*1],0x1
c0012667:	74 4d                	je     c00126b6 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x82>
c0012669:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001266d:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c0012671:	c1 e8 0a             	shr    eax,0xa
c0012674:	80 fa 01             	cmp    dl,0x1
c0012677:	19 d2                	sbb    edx,edx
c0012679:	c1 e3 0c             	shl    ebx,0xc
c001267c:	0b 4c 24 3c          	or     ecx,DWORD PTR [esp+0x3c]
c0012680:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
c0012686:	25 fc 0f 00 00       	and    eax,0xffc
c001268b:	01 d8                	add    eax,ebx
c001268d:	89 8c 02 00 00 c0 c2 	mov    DWORD PTR [edx+eax*1-0x3d400000],ecx
c0012694:	83 c4 1c             	add    esp,0x1c
c0012697:	5b                   	pop    ebx
c0012698:	5e                   	pop    esi
c0012699:	5f                   	pop    edi
c001269a:	5d                   	pop    ebp
c001269b:	c3                   	ret    
c001269c:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00126a0:	83 ec 0c             	sub    esp,0xc
c00126a3:	68 c8 af 02 c0       	push   0xc002afc8
c00126a8:	e8 54 81 00 00       	call   c001a801 <Krnl::panic(char const*)>
c00126ad:	83 c4 10             	add    esp,0x10
c00126b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00126b4:	eb 9c                	jmp    c0012652 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x1e>
c00126b6:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00126ba:	e8 55 d8 ff ff       	call   c000ff14 <Phys::allocatePage()>
c00126bf:	83 ec 0c             	sub    esp,0xc
c00126c2:	89 c5                	mov    ebp,eax
c00126c4:	8b 0d d0 ef 02 c0    	mov    ecx,DWORD PTR ds:0xc002efd0
c00126ca:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00126ce:	6a 01                	push   0x1
c00126d0:	e8 6c f3 ff ff       	call   c0011a41 <Virt::allocateKernelVirtualPages(int)>
c00126d5:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c00126dc:	6a 01                	push   0x1
c00126de:	50                   	push   eax
c00126df:	55                   	push   ebp
c00126e0:	81 cd 07 04 00 00    	or     ebp,0x407
c00126e6:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00126ea:	51                   	push   ecx
c00126eb:	e8 7e fe ff ff       	call   c001256e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c00126f0:	83 c4 1c             	add    esp,0x1c
c00126f3:	68 00 10 00 00       	push   0x1000
c00126f8:	6a 00                	push   0x0
c00126fa:	50                   	push   eax
c00126fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00126ff:	e8 68 e0 fe ff       	call   c000076c <memset>
c0012704:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0012708:	89 0c 24             	mov    DWORD PTR [esp],ecx
c001270b:	e8 f1 f7 ff ff       	call   c0011f01 <Virt::freeKernelVirtualPages(unsigned long)>
c0012710:	8b 47 0c             	mov    eax,DWORD PTR [edi+0xc]
c0012713:	83 c4 10             	add    esp,0x10
c0012716:	89 2c 30             	mov    DWORD PTR [eax+esi*1],ebp
c0012719:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001271d:	e9 47 ff ff ff       	jmp    c0012669 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)+0x35>

c0012722 <VAS::VAS(bool)>:
c0012722:	53                   	push   ebx
c0012723:	83 ec 28             	sub    esp,0x28
c0012726:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001272a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001272e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012732:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0012739:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001273d:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0012744:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012748:	8a 54 24 0c          	mov    dl,BYTE PTR [esp+0xc]
c001274c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
c001274f:	e8 c0 d7 ff ff       	call   c000ff14 <Phys::allocatePage()>
c0012754:	89 c2                	mov    edx,eax
c0012756:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001275a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c001275d:	8b 1d d0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efd0
c0012763:	83 ec 0c             	sub    esp,0xc
c0012766:	6a 01                	push   0x1
c0012768:	e8 d4 f2 ff ff       	call   c0011a41 <Virt::allocateKernelVirtualPages(int)>
c001276d:	83 c4 10             	add    esp,0x10
c0012770:	89 c2                	mov    edx,eax
c0012772:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012776:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0012779:	83 ec 0c             	sub    esp,0xc
c001277c:	6a 03                	push   0x3
c001277e:	6a 01                	push   0x1
c0012780:	52                   	push   edx
c0012781:	50                   	push   eax
c0012782:	53                   	push   ebx
c0012783:	e8 e6 fd ff ff       	call   c001256e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012788:	83 c4 20             	add    esp,0x20
c001278b:	89 c2                	mov    edx,eax
c001278d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012791:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0012794:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c001279c:	81 7c 24 1c ff 03 00 00 	cmp    DWORD PTR [esp+0x1c],0x3ff
c00127a4:	7f 1c                	jg     c00127c2 <VAS::VAS(bool)+0xa0>
c00127a6:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00127aa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00127ad:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00127b1:	c1 e2 02             	shl    edx,0x2
c00127b4:	01 d0                	add    eax,edx
c00127b6:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c00127bc:	ff 44 24 1c          	inc    DWORD PTR [esp+0x1c]
c00127c0:	eb da                	jmp    c001279c <VAS::VAS(bool)+0x7a>
c00127c2:	c7 44 24 18 00 03 00 00 	mov    DWORD PTR [esp+0x18],0x300
c00127ca:	81 7c 24 18 ff 03 00 00 	cmp    DWORD PTR [esp+0x18],0x3ff
c00127d2:	7f 7a                	jg     c001284e <VAS::VAS(bool)+0x12c>
c00127d4:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00127d8:	2d 00 02 00 00       	sub    eax,0x200
c00127dd:	c1 e0 0c             	shl    eax,0xc
c00127e0:	83 c8 03             	or     eax,0x3
c00127e3:	89 c2                	mov    edx,eax
c00127e5:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00127ea:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00127f0:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00127f6:	83 e0 10             	and    eax,0x10
c00127f9:	84 c0                	test   al,al
c00127fb:	74 07                	je     c0012804 <VAS::VAS(bool)+0xe2>
c00127fd:	b8 00 01 00 00       	mov    eax,0x100
c0012802:	eb 05                	jmp    c0012809 <VAS::VAS(bool)+0xe7>
c0012804:	b8 00 00 00 00       	mov    eax,0x0
c0012809:	09 d0                	or     eax,edx
c001280b:	89 c1                	mov    ecx,eax
c001280d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012811:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012814:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0012818:	c1 e2 02             	shl    edx,0x2
c001281b:	01 d0                	add    eax,edx
c001281d:	89 ca                	mov    edx,ecx
c001281f:	89 10                	mov    DWORD PTR [eax],edx
c0012821:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0012825:	2d 40 03 00 00       	sub    eax,0x340
c001282a:	83 f8 7f             	cmp    eax,0x7f
c001282d:	77 16                	ja     c0012845 <VAS::VAS(bool)+0x123>
c001282f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0012833:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0012836:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001283a:	c1 e2 02             	shl    edx,0x2
c001283d:	01 d0                	add    eax,edx
c001283f:	c7 00 02 00 00 00    	mov    DWORD PTR [eax],0x2
c0012845:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c0012849:	e9 7c ff ff ff       	jmp    c00127ca <VAS::VAS(bool)+0xa8>
c001284e:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0012853:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0012859:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c001285f:	83 e0 10             	and    eax,0x10
c0012862:	84 c0                	test   al,al
c0012864:	74 07                	je     c001286d <VAS::VAS(bool)+0x14b>
c0012866:	b8 03 41 00 00       	mov    eax,0x4103
c001286b:	eb 05                	jmp    c0012872 <VAS::VAS(bool)+0x150>
c001286d:	b8 03 40 00 00       	mov    eax,0x4003
c0012872:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0012876:	8b 52 0c             	mov    edx,DWORD PTR [edx+0xc]
c0012879:	81 c2 20 0c 00 00    	add    edx,0xc20
c001287f:	89 02                	mov    DWORD PTR [edx],eax
c0012881:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0012886:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001288c:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0012892:	83 ec 08             	sub    esp,0x8
c0012895:	50                   	push   eax
c0012896:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001289a:	e8 b3 fc ff ff       	call   c0012552 <VAS::setCPUSpecific(unsigned long)>
c001289f:	83 c4 10             	add    esp,0x10
c00128a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128a6:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c00128a9:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00128ae:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128b4:	8a 80 90 11 00 00    	mov    al,BYTE PTR [eax+0x1190]
c00128ba:	83 e0 10             	and    eax,0x10
c00128bd:	84 c0                	test   al,al
c00128bf:	74 07                	je     c00128c8 <VAS::VAS(bool)+0x1a6>
c00128c1:	b8 00 01 00 00       	mov    eax,0x100
c00128c6:	eb 05                	jmp    c00128cd <VAS::VAS(bool)+0x1ab>
c00128c8:	b8 00 00 00 00       	mov    eax,0x0
c00128cd:	09 c2                	or     edx,eax
c00128cf:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00128d3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c00128d6:	05 fc 0f 00 00       	add    eax,0xffc
c00128db:	83 ca 03             	or     edx,0x3
c00128de:	89 10                	mov    DWORD PTR [eax],edx
c00128e0:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00128e5:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00128eb:	83 ec 0c             	sub    esp,0xc
c00128ee:	50                   	push   eax
c00128ef:	e8 62 1c 00 00       	call   c0014556 <Device::getName()>
c00128f4:	83 c4 10             	add    esp,0x10
c00128f7:	83 ec 08             	sub    esp,0x8
c00128fa:	68 0d b1 02 c0       	push   0xc002b10d
c00128ff:	50                   	push   eax
c0012900:	e8 af df fe ff       	call   c00008b4 <strcmp>
c0012905:	83 c4 10             	add    esp,0x10
c0012908:	85 c0                	test   eax,eax
c001290a:	0f 94 c0             	sete   al
c001290d:	84 c0                	test   al,al
c001290f:	0f 84 87 00 00 00    	je     c001299c <VAS::VAS(bool)+0x27a>
c0012915:	fa                   	cli    
c0012916:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001291b:	40                   	inc    eax
c001291c:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0012921:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0012926:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001292c:	05 7c 09 00 00       	add    eax,0x97c
c0012931:	83 ec 0c             	sub    esp,0xc
c0012934:	50                   	push   eax
c0012935:	e8 f0 c9 ff ff       	call   c000f32a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001293a:	83 c4 10             	add    esp,0x10
c001293d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012942:	89 c3                	mov    ebx,eax
c0012944:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0012949:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001294f:	05 7c 09 00 00       	add    eax,0x97c
c0012954:	83 ec 0c             	sub    esp,0xc
c0012957:	50                   	push   eax
c0012958:	e8 cd c9 ff ff       	call   c000f32a <IDT::getPointerToInvalidOpcodeEntryForF00F()>
c001295d:	83 c4 10             	add    esp,0x10
c0012960:	83 ec 08             	sub    esp,0x8
c0012963:	50                   	push   eax
c0012964:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0012968:	e8 75 f5 ff ff       	call   c0011ee2 <VAS::getPageTableEntry(unsigned long)>
c001296d:	83 c4 10             	add    esp,0x10
c0012970:	8b 00                	mov    eax,DWORD PTR [eax]
c0012972:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012977:	6a 11                	push   0x11
c0012979:	53                   	push   ebx
c001297a:	50                   	push   eax
c001297b:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001297f:	e8 f4 f8 ff ff       	call   c0012278 <VAS::mapPage(unsigned long, unsigned long, int)>
c0012984:	83 c4 10             	add    esp,0x10
c0012987:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001298c:	48                   	dec    eax
c001298d:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0012992:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0012997:	85 c0                	test   eax,eax
c0012999:	75 01                	jne    c001299c <VAS::VAS(bool)+0x27a>
c001299b:	fb                   	sti    
c001299c:	90                   	nop
c001299d:	83 c4 28             	add    esp,0x28
c00129a0:	5b                   	pop    ebx
c00129a1:	c3                   	ret    

c00129a2 <VAS::evict(unsigned long)>:
c00129a2:	55                   	push   ebp
c00129a3:	57                   	push   edi
c00129a4:	56                   	push   esi
c00129a5:	53                   	push   ebx
c00129a6:	83 ec 1c             	sub    esp,0x1c
c00129a9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00129ad:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00129b1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00129b5:	e8 c8 f1 ff ff       	call   c0011b82 <Virt::allocateSwapfilePage()>
c00129ba:	89 c7                	mov    edi,eax
c00129bc:	a1 ec dd 02 c0       	mov    eax,ds:0xc002ddec
c00129c1:	85 c0                	test   eax,eax
c00129c3:	7e 3d                	jle    c0012a02 <VAS::evict(unsigned long)+0x60>
c00129c5:	89 ee                	mov    esi,ebp
c00129c7:	31 db                	xor    ebx,ebx
c00129c9:	83 ec 0c             	sub    esp,0xc
c00129cc:	57                   	push   edi
c00129cd:	e8 9e f1 ff ff       	call   c0011b70 <Virt::swapIDToSector(unsigned long)>
c00129d2:	89 34 24             	mov    DWORD PTR [esp],esi
c00129d5:	01 d8                	add    eax,ebx
c00129d7:	6a 01                	push   0x1
c00129d9:	31 d2                	xor    edx,edx
c00129db:	43                   	inc    ebx
c00129dc:	52                   	push   edx
c00129dd:	81 c6 00 02 00 00    	add    esi,0x200
c00129e3:	50                   	push   eax
c00129e4:	0f be 05 f8 dd 02 c0 	movsx  eax,BYTE PTR ds:0xc002ddf8
c00129eb:	ff 34 85 5c f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0ca4]
c00129f2:	e8 35 3e 00 00       	call   c001682c <LogicalDisk::write(unsigned long long, int, void*)>
c00129f7:	83 c4 20             	add    esp,0x20
c00129fa:	39 1d ec dd 02 c0    	cmp    DWORD PTR ds:0xc002ddec,ebx
c0012a00:	7f c7                	jg     c00129c9 <VAS::evict(unsigned long)+0x27>
c0012a02:	83 ec 08             	sub    esp,0x8
c0012a05:	c1 e7 0b             	shl    edi,0xb
c0012a08:	55                   	push   ebp
c0012a09:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012a0d:	e8 d0 f4 ff ff       	call   c0011ee2 <VAS::getPageTableEntry(unsigned long)>
c0012a12:	83 c4 0c             	add    esp,0xc
c0012a15:	8b 10                	mov    edx,DWORD PTR [eax]
c0012a17:	81 e2 fe 07 00 00    	and    edx,0x7fe
c0012a1d:	09 d7                	or     edi,edx
c0012a1f:	89 38                	mov    DWORD PTR [eax],edi
c0012a21:	a1 c8 ef 02 c0       	mov    eax,ds:0xc002efc8
c0012a26:	40                   	inc    eax
c0012a27:	a3 c8 ef 02 c0       	mov    ds:0xc002efc8,eax
c0012a2c:	0f 20 da             	mov    edx,cr3
c0012a2f:	0f 22 da             	mov    cr3,edx
c0012a32:	50                   	push   eax
c0012a33:	55                   	push   ebp
c0012a34:	68 1b b1 02 c0       	push   0xc002b11b
c0012a39:	e8 09 04 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0012a3e:	a1 c4 ef 02 c0       	mov    eax,ds:0xc002efc4
c0012a43:	c7 44 24 40 30 b1 02 c0 	mov    DWORD PTR [esp+0x40],0xc002b130
c0012a4b:	8d 50 01             	lea    edx,[eax+0x1]
c0012a4e:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0012a52:	89 15 c4 ef 02 c0    	mov    DWORD PTR ds:0xc002efc4,edx
c0012a58:	83 c4 2c             	add    esp,0x2c
c0012a5b:	5b                   	pop    ebx
c0012a5c:	5e                   	pop    esi
c0012a5d:	5f                   	pop    edi
c0012a5e:	5d                   	pop    ebp
c0012a5f:	e9 e3 03 00 00       	jmp    c0012e47 <Dbg::kprintf(char const*, ...)>

c0012a64 <VAS::tryLoadBackOffDisk(unsigned long)>:
c0012a64:	55                   	push   ebp
c0012a65:	57                   	push   edi
c0012a66:	56                   	push   esi
c0012a67:	53                   	push   ebx
c0012a68:	83 ec 0c             	sub    esp,0xc
c0012a6b:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0012a6f:	81 e6 00 f0 ff ff    	and    esi,0xfffff000
c0012a75:	0f 84 dc 00 00 00    	je     c0012b57 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012a7b:	56                   	push   esi
c0012a7c:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0012a80:	e8 5d f4 ff ff       	call   c0011ee2 <VAS::getPageTableEntry(unsigned long)>
c0012a85:	5b                   	pop    ebx
c0012a86:	85 c0                	test   eax,eax
c0012a88:	5f                   	pop    edi
c0012a89:	89 c3                	mov    ebx,eax
c0012a8b:	0f 84 c6 00 00 00    	je     c0012b57 <VAS::tryLoadBackOffDisk(unsigned long)+0xf3>
c0012a91:	8b 38                	mov    edi,DWORD PTR [eax]
c0012a93:	31 c0                	xor    eax,eax
c0012a95:	89 fa                	mov    edx,edi
c0012a97:	81 e2 01 04 00 00    	and    edx,0x401
c0012a9d:	81 fa 00 04 00 00    	cmp    edx,0x400
c0012aa3:	0f 85 b0 00 00 00    	jne    c0012b59 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012aa9:	e8 66 d4 ff ff       	call   c000ff14 <Phys::allocatePage()>
c0012aae:	c1 ef 0b             	shr    edi,0xb
c0012ab1:	8b 13                	mov    edx,DWORD PTR [ebx]
c0012ab3:	81 e2 ff 0f 00 00    	and    edx,0xfff
c0012ab9:	09 c2                	or     edx,eax
c0012abb:	81 ca 01 08 00 00    	or     edx,0x801
c0012ac1:	89 13                	mov    DWORD PTR [ebx],edx
c0012ac3:	8b 0d ec dd 02 c0    	mov    ecx,DWORD PTR ds:0xc002ddec
c0012ac9:	85 c9                	test   ecx,ecx
c0012acb:	7e 3d                	jle    c0012b0a <VAS::tryLoadBackOffDisk(unsigned long)+0xa6>
c0012acd:	89 f5                	mov    ebp,esi
c0012acf:	31 db                	xor    ebx,ebx
c0012ad1:	83 ec 0c             	sub    esp,0xc
c0012ad4:	57                   	push   edi
c0012ad5:	e8 96 f0 ff ff       	call   c0011b70 <Virt::swapIDToSector(unsigned long)>
c0012ada:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0012add:	01 d8                	add    eax,ebx
c0012adf:	6a 01                	push   0x1
c0012ae1:	31 d2                	xor    edx,edx
c0012ae3:	43                   	inc    ebx
c0012ae4:	52                   	push   edx
c0012ae5:	81 c5 00 02 00 00    	add    ebp,0x200
c0012aeb:	50                   	push   eax
c0012aec:	0f be 05 f8 dd 02 c0 	movsx  eax,BYTE PTR ds:0xc002ddf8
c0012af3:	ff 34 85 5c f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0ca4]
c0012afa:	e8 c1 3c 00 00       	call   c00167c0 <LogicalDisk::read(unsigned long long, int, void*)>
c0012aff:	83 c4 20             	add    esp,0x20
c0012b02:	39 1d ec dd 02 c0    	cmp    DWORD PTR ds:0xc002ddec,ebx
c0012b08:	7f c7                	jg     c0012ad1 <VAS::tryLoadBackOffDisk(unsigned long)+0x6d>
c0012b0a:	a1 c8 ef 02 c0       	mov    eax,ds:0xc002efc8
c0012b0f:	48                   	dec    eax
c0012b10:	52                   	push   edx
c0012b11:	a3 c8 ef 02 c0       	mov    ds:0xc002efc8,eax
c0012b16:	50                   	push   eax
c0012b17:	56                   	push   esi
c0012b18:	68 41 b1 02 c0       	push   0xc002b141
c0012b1d:	e8 25 03 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0012b22:	89 3c 24             	mov    DWORD PTR [esp],edi
c0012b25:	e8 28 f0 ff ff       	call   c0011b52 <Virt::freeSwapfilePage(unsigned long)>
c0012b2a:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0012b2f:	83 c4 10             	add    esp,0x10
c0012b32:	48                   	dec    eax
c0012b33:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0012b38:	85 c0                	test   eax,eax
c0012b3a:	75 01                	jne    c0012b3d <VAS::tryLoadBackOffDisk(unsigned long)+0xd9>
c0012b3c:	fb                   	sti    
c0012b3d:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0012b41:	25 ff 0f 00 00       	and    eax,0xfff
c0012b46:	3d e0 0f 00 00       	cmp    eax,0xfe0
c0012b4b:	77 14                	ja     c0012b61 <VAS::tryLoadBackOffDisk(unsigned long)+0xfd>
c0012b4d:	0f 20 d8             	mov    eax,cr3
c0012b50:	0f 22 d8             	mov    cr3,eax
c0012b53:	b0 01                	mov    al,0x1
c0012b55:	eb 02                	jmp    c0012b59 <VAS::tryLoadBackOffDisk(unsigned long)+0xf5>
c0012b57:	31 c0                	xor    eax,eax
c0012b59:	83 c4 0c             	add    esp,0xc
c0012b5c:	5b                   	pop    ebx
c0012b5d:	5e                   	pop    esi
c0012b5e:	5f                   	pop    edi
c0012b5f:	5d                   	pop    ebp
c0012b60:	c3                   	ret    
c0012b61:	83 ec 0c             	sub    esp,0xc
c0012b64:	68 56 b1 02 c0       	push   0xc002b156
c0012b69:	e8 d9 02 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0012b6e:	83 c4 10             	add    esp,0x10
c0012b71:	eb da                	jmp    c0012b4d <VAS::tryLoadBackOffDisk(unsigned long)+0xe9>
c0012b73:	90                   	nop

c0012b74 <VAS::scanForEviction()>:
c0012b74:	57                   	push   edi
c0012b75:	56                   	push   esi
c0012b76:	53                   	push   ebx
c0012b77:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0012b7b:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012b7e:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012b84:	75 0e                	jne    c0012b94 <VAS::scanForEviction()+0x20>
c0012b86:	89 da                	mov    edx,ebx
c0012b88:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012b8b:	c1 ea 16             	shr    edx,0x16
c0012b8e:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012b92:	74 48                	je     c0012bdc <VAS::scanForEviction()+0x68>
c0012b94:	53                   	push   ebx
c0012b95:	56                   	push   esi
c0012b96:	e8 47 f3 ff ff       	call   c0011ee2 <VAS::getPageTableEntry(unsigned long)>
c0012b9b:	5a                   	pop    edx
c0012b9c:	8b 38                	mov    edi,DWORD PTR [eax]
c0012b9e:	59                   	pop    ecx
c0012b9f:	89 fa                	mov    edx,edi
c0012ba1:	81 e2 00 0c 00 00    	and    edx,0xc00
c0012ba7:	81 fa 00 0c 00 00    	cmp    edx,0xc00
c0012bad:	74 3d                	je     c0012bec <VAS::scanForEviction()+0x78>
c0012baf:	81 c3 00 10 00 00    	add    ebx,0x1000
c0012bb5:	81 fb ff ff bf ff    	cmp    ebx,0xffbfffff
c0012bbb:	76 2a                	jbe    c0012be7 <VAS::scanForEviction()+0x73>
c0012bbd:	31 db                	xor    ebx,ebx
c0012bbf:	c7 46 08 00 00 00 00 	mov    DWORD PTR [esi+0x8],0x0
c0012bc6:	f7 c3 ff ff 3f 00    	test   ebx,0x3fffff
c0012bcc:	75 c6                	jne    c0012b94 <VAS::scanForEviction()+0x20>
c0012bce:	89 da                	mov    edx,ebx
c0012bd0:	8b 46 0c             	mov    eax,DWORD PTR [esi+0xc]
c0012bd3:	c1 ea 16             	shr    edx,0x16
c0012bd6:	f6 04 90 01          	test   BYTE PTR [eax+edx*4],0x1
c0012bda:	75 b8                	jne    c0012b94 <VAS::scanForEviction()+0x20>
c0012bdc:	81 c3 00 00 40 00    	add    ebx,0x400000
c0012be2:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012be5:	eb 97                	jmp    c0012b7e <VAS::scanForEviction()+0xa>
c0012be7:	89 5e 08             	mov    DWORD PTR [esi+0x8],ebx
c0012bea:	eb 92                	jmp    c0012b7e <VAS::scanForEviction()+0xa>
c0012bec:	f7 c7 01 00 00 00    	test   edi,0x1
c0012bf2:	74 bb                	je     c0012baf <VAS::scanForEviction()+0x3b>
c0012bf4:	f7 c7 20 00 00 00    	test   edi,0x20
c0012bfa:	74 0a                	je     c0012c06 <VAS::scanForEviction()+0x92>
c0012bfc:	83 e7 df             	and    edi,0xffffffdf
c0012bff:	89 38                	mov    DWORD PTR [eax],edi
c0012c01:	8b 5e 08             	mov    ebx,DWORD PTR [esi+0x8]
c0012c04:	eb a9                	jmp    c0012baf <VAS::scanForEviction()+0x3b>
c0012c06:	83 ec 08             	sub    esp,0x8
c0012c09:	53                   	push   ebx
c0012c0a:	56                   	push   esi
c0012c0b:	e8 92 fd ff ff       	call   c00129a2 <VAS::evict(unsigned long)>
c0012c10:	81 46 08 00 10 00 00 	add    DWORD PTR [esi+0x8],0x1000
c0012c17:	83 c4 10             	add    esp,0x10
c0012c1a:	89 f8                	mov    eax,edi
c0012c1c:	5b                   	pop    ebx
c0012c1d:	25 00 f0 ff ff       	and    eax,0xfffff000
c0012c22:	5e                   	pop    esi
c0012c23:	5f                   	pop    edi
c0012c24:	c3                   	ret    

c0012c25 <mapVASFirstTime>:
c0012c25:	55                   	push   ebp
c0012c26:	57                   	push   edi
c0012c27:	56                   	push   esi
c0012c28:	53                   	push   ebx
c0012c29:	83 ec 0c             	sub    esp,0xc
c0012c2c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0012c31:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
c0012c34:	4a                   	dec    edx
c0012c35:	0f 84 8e 00 00 00    	je     c0012cc9 <mapVASFirstTime+0xa4>
c0012c3b:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
c0012c3e:	8b 68 3c             	mov    ebp,DWORD PTR [eax+0x3c]
c0012c41:	bb 00 f0 e7 01       	mov    ebx,0x1e7f000
c0012c46:	c1 e5 15             	shl    ebp,0x15
c0012c49:	be 00 90 e7 01       	mov    esi,0x1e79000
c0012c4e:	8b ba 32 05 00 00    	mov    edi,DWORD PTR [edx+0x532]
c0012c54:	29 eb                	sub    ebx,ebp
c0012c56:	29 ee                	sub    esi,ebp
c0012c58:	e8 b7 d2 ff ff       	call   c000ff14 <Phys::allocatePage()>
c0012c5d:	83 ec 0c             	sub    esp,0xc
c0012c60:	68 03 04 00 00       	push   0x403
c0012c65:	6a 01                	push   0x1
c0012c67:	53                   	push   ebx
c0012c68:	81 eb 00 10 00 00    	sub    ebx,0x1000
c0012c6e:	50                   	push   eax
c0012c6f:	57                   	push   edi
c0012c70:	e8 f9 f8 ff ff       	call   c001256e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012c75:	83 c4 20             	add    esp,0x20
c0012c78:	39 f3                	cmp    ebx,esi
c0012c7a:	75 dc                	jne    c0012c58 <mapVASFirstTime+0x33>
c0012c7c:	be 00 f0 ff 01       	mov    esi,0x1fff000
c0012c81:	b8 00 f0 fd 01       	mov    eax,0x1fdf000
c0012c86:	29 ee                	sub    esi,ebp
c0012c88:	29 e8                	sub    eax,ebp
c0012c8a:	89 c5                	mov    ebp,eax
c0012c8c:	80 7f 01 01          	cmp    BYTE PTR [edi+0x1],0x1
c0012c90:	19 db                	sbb    ebx,ebx
c0012c92:	e8 7d d2 ff ff       	call   c000ff14 <Phys::allocatePage()>
c0012c97:	83 e3 04             	and    ebx,0x4
c0012c9a:	83 ec 0c             	sub    esp,0xc
c0012c9d:	81 c3 03 04 00 00    	add    ebx,0x403
c0012ca3:	53                   	push   ebx
c0012ca4:	6a 01                	push   0x1
c0012ca6:	56                   	push   esi
c0012ca7:	81 ee 00 10 00 00    	sub    esi,0x1000
c0012cad:	50                   	push   eax
c0012cae:	57                   	push   edi
c0012caf:	e8 ba f8 ff ff       	call   c001256e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0012cb4:	83 c4 20             	add    esp,0x20
c0012cb7:	39 f5                	cmp    ebp,esi
c0012cb9:	75 d1                	jne    c0012c8c <mapVASFirstTime+0x67>
c0012cbb:	0f 20 d8             	mov    eax,cr3
c0012cbe:	0f 22 d8             	mov    cr3,eax
c0012cc1:	83 c4 0c             	add    esp,0xc
c0012cc4:	5b                   	pop    ebx
c0012cc5:	5e                   	pop    esi
c0012cc6:	5f                   	pop    edi
c0012cc7:	5d                   	pop    ebp
c0012cc8:	c3                   	ret    
c0012cc9:	83 ec 0c             	sub    esp,0xc
c0012ccc:	68 66 b1 02 c0       	push   0xc002b166
c0012cd1:	e8 71 01 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0012cd6:	83 c4 10             	add    esp,0x10
c0012cd9:	83 c4 0c             	add    esp,0xc
c0012cdc:	5b                   	pop    ebx
c0012cdd:	5e                   	pop    esi
c0012cde:	5f                   	pop    edi
c0012cdf:	5d                   	pop    ebp
c0012ce0:	c3                   	ret    

c0012ce1 <__cxa_atexit>:
c0012ce1:	31 c0                	xor    eax,eax
c0012ce3:	c3                   	ret    

c0012ce4 <__cxa_finalize>:
c0012ce4:	c3                   	ret    

c0012ce5 <__stack_chk_fail>:
c0012ce5:	55                   	push   ebp
c0012ce6:	89 e5                	mov    ebp,esp
c0012ce8:	83 ec 14             	sub    esp,0x14
c0012ceb:	68 7f b1 02 c0       	push   0xc002b17f
c0012cf0:	e8 52 01 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0012cf5:	58                   	pop    eax
c0012cf6:	5a                   	pop    edx
c0012cf7:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c0012cfa:	68 cf b1 02 c0       	push   0xc002b1cf
c0012cff:	e8 43 01 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0012d04:	59                   	pop    ecx
c0012d05:	58                   	pop    eax
c0012d06:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d09:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d0c:	68 cf b1 02 c0       	push   0xc002b1cf
c0012d11:	e8 31 01 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0012d16:	5a                   	pop    edx
c0012d17:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d1a:	59                   	pop    ecx
c0012d1b:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d1d:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d20:	68 cf b1 02 c0       	push   0xc002b1cf
c0012d25:	e8 1d 01 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0012d2a:	5a                   	pop    edx
c0012d2b:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0012d2e:	59                   	pop    ecx
c0012d2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d31:	8b 00                	mov    eax,DWORD PTR [eax]
c0012d33:	ff 70 04             	push   DWORD PTR [eax+0x4]
c0012d36:	68 cf b1 02 c0       	push   0xc002b1cf
c0012d3b:	e8 07 01 00 00       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0012d40:	c7 04 24 d7 b1 02 c0 	mov    DWORD PTR [esp],0xc002b1d7
c0012d47:	e8 b5 7a 00 00       	call   c001a801 <Krnl::panic(char const*)>
c0012d4c:	83 c4 10             	add    esp,0x10
c0012d4f:	c9                   	leave  
c0012d50:	c3                   	ret    

c0012d51 <__cxa_pure_virtual>:
c0012d51:	83 ec 18             	sub    esp,0x18
c0012d54:	68 ef b1 02 c0       	push   0xc002b1ef
c0012d59:	e8 a3 7a 00 00       	call   c001a801 <Krnl::panic(char const*)>
c0012d5e:	83 c4 1c             	add    esp,0x1c
c0012d61:	c3                   	ret    

c0012d62 <operator new[](unsigned long)>:
c0012d62:	e9 41 cb ff ff       	jmp    c000f8a8 <malloc>

c0012d67 <operator delete(void*, unsigned long)>:
c0012d67:	e9 5c cb ff ff       	jmp    c000f8c8 <rfree>

c0012d6c <operator delete[](void*)>:
c0012d6c:	e9 57 cb ff ff       	jmp    c000f8c8 <rfree>

c0012d71 <operator delete[](void*, unsigned long)>:
c0012d71:	e9 52 cb ff ff       	jmp    c000f8c8 <rfree>

c0012d76 <Dbg::stringifyxWithBase(unsigned int, char*, int)>:
c0012d76:	57                   	push   edi
c0012d77:	b9 3f 00 00 00       	mov    ecx,0x3f
c0012d7c:	56                   	push   esi
c0012d7d:	be 04 b2 02 c0       	mov    esi,0xc002b204
c0012d82:	53                   	push   ebx
c0012d83:	83 ec 40             	sub    esp,0x40
c0012d86:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c0012d8a:	8d 7c 24 01          	lea    edi,[esp+0x1]
c0012d8e:	fc                   	cld    
c0012d8f:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0012d91:	8b 4c 24 58          	mov    ecx,DWORD PTR [esp+0x58]
c0012d95:	83 f9 3e             	cmp    ecx,0x3e
c0012d98:	7e 05                	jle    c0012d9f <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x29>
c0012d9a:	b9 3e 00 00 00       	mov    ecx,0x3e
c0012d9f:	89 df                	mov    edi,ebx
c0012da1:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0012da5:	eb 02                	jmp    c0012da9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x33>
c0012da7:	89 c7                	mov    edi,eax
c0012da9:	31 d2                	xor    edx,edx
c0012dab:	46                   	inc    esi
c0012dac:	89 f8                	mov    eax,edi
c0012dae:	f7 f1                	div    ecx
c0012db0:	39 cf                	cmp    edi,ecx
c0012db2:	73 f3                	jae    c0012da7 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x31>
c0012db4:	c6 06 00             	mov    BYTE PTR [esi],0x0
c0012db7:	eb 02                	jmp    c0012dbb <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x45>
c0012db9:	89 c3                	mov    ebx,eax
c0012dbb:	31 d2                	xor    edx,edx
c0012dbd:	4e                   	dec    esi
c0012dbe:	89 d8                	mov    eax,ebx
c0012dc0:	f7 f1                	div    ecx
c0012dc2:	39 cb                	cmp    ebx,ecx
c0012dc4:	8a 54 14 01          	mov    dl,BYTE PTR [esp+edx*1+0x1]
c0012dc8:	88 16                	mov    BYTE PTR [esi],dl
c0012dca:	73 ed                	jae    c0012db9 <Dbg::stringifyxWithBase(unsigned int, char*, int)+0x43>
c0012dcc:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0012dd0:	83 c4 40             	add    esp,0x40
c0012dd3:	5b                   	pop    ebx
c0012dd4:	5e                   	pop    esi
c0012dd5:	5f                   	pop    edi
c0012dd6:	c3                   	ret    

c0012dd7 <Dbg::logc(char)>:
c0012dd7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ddb:	ba fd 03 00 00       	mov    edx,0x3fd
c0012de0:	ec                   	in     al,dx
c0012de1:	a8 20                	test   al,0x20
c0012de3:	74 fb                	je     c0012de0 <Dbg::logc(char)+0x9>
c0012de5:	ba f8 03 00 00       	mov    edx,0x3f8
c0012dea:	88 c8                	mov    al,cl
c0012dec:	ee                   	out    dx,al
c0012ded:	c3                   	ret    

c0012dee <Dbg::logs(char*)>:
c0012dee:	53                   	push   ebx
c0012def:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c0012df3:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012df6:	84 c0                	test   al,al
c0012df8:	74 0f                	je     c0012e09 <Dbg::logs(char*)+0x1b>
c0012dfa:	50                   	push   eax
c0012dfb:	43                   	inc    ebx
c0012dfc:	e8 d6 ff ff ff       	call   c0012dd7 <Dbg::logc(char)>
c0012e01:	0f be 03             	movsx  eax,BYTE PTR [ebx]
c0012e04:	5a                   	pop    edx
c0012e05:	84 c0                	test   al,al
c0012e07:	75 f1                	jne    c0012dfa <Dbg::logs(char*)+0xc>
c0012e09:	5b                   	pop    ebx
c0012e0a:	c3                   	ret    

c0012e0b <Dbg::logWriteInt(unsigned int)>:
c0012e0b:	83 ec 10             	sub    esp,0x10
c0012e0e:	6a 0a                	push   0xa
c0012e10:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e14:	50                   	push   eax
c0012e15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e19:	e8 58 ff ff ff       	call   c0012d76 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e1e:	50                   	push   eax
c0012e1f:	e8 ca ff ff ff       	call   c0012dee <Dbg::logs(char*)>
c0012e24:	83 c4 20             	add    esp,0x20
c0012e27:	c3                   	ret    

c0012e28 <Dbg::logWriteIntBase(unsigned int, int)>:
c0012e28:	83 ec 10             	sub    esp,0x10
c0012e2b:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0012e2f:	8d 44 24 08          	lea    eax,[esp+0x8]
c0012e33:	50                   	push   eax
c0012e34:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0012e38:	e8 39 ff ff ff       	call   c0012d76 <Dbg::stringifyxWithBase(unsigned int, char*, int)>
c0012e3d:	50                   	push   eax
c0012e3e:	e8 ab ff ff ff       	call   c0012dee <Dbg::logs(char*)>
c0012e43:	83 c4 20             	add    esp,0x20
c0012e46:	c3                   	ret    

c0012e47 <Dbg::kprintf(char const*, ...)>:
c0012e47:	55                   	push   ebp
c0012e48:	57                   	push   edi
c0012e49:	56                   	push   esi
c0012e4a:	53                   	push   ebx
c0012e4b:	83 ec 0c             	sub    esp,0xc
c0012e4e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0012e52:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0012e56:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0012e5a:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0012e5d:	84 c0                	test   al,al
c0012e5f:	74 4a                	je     c0012eab <Dbg::kprintf(char const*, ...)+0x64>
c0012e61:	31 db                	xor    ebx,ebx
c0012e63:	8d 6b 01             	lea    ebp,[ebx+0x1]
c0012e66:	3c 25                	cmp    al,0x25
c0012e68:	8d 3c 2e             	lea    edi,[esi+ebp*1]
c0012e6b:	0f 85 e4 00 00 00    	jne    c0012f55 <Dbg::kprintf(char const*, ...)+0x10e>
c0012e71:	83 c3 02             	add    ebx,0x2
c0012e74:	8a 07                	mov    al,BYTE PTR [edi]
c0012e76:	8d 2c 1e             	lea    ebp,[esi+ebx*1]
c0012e79:	83 e8 25             	sub    eax,0x25
c0012e7c:	3c 53                	cmp    al,0x53
c0012e7e:	0f 87 ba 00 00 00    	ja     c0012f3e <Dbg::kprintf(char const*, ...)+0xf7>
c0012e84:	0f b6 c0             	movzx  eax,al
c0012e87:	ff 24 85 44 b2 02 c0 	jmp    DWORD PTR [eax*4-0x3ffd4dbc]
c0012e8e:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012e92:	89 c8                	mov    eax,ecx
c0012e94:	83 c1 04             	add    ecx,0x4
c0012e97:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012e9b:	ff 30                	push   DWORD PTR [eax]
c0012e9d:	e8 4c ff ff ff       	call   c0012dee <Dbg::logs(char*)>
c0012ea2:	58                   	pop    eax
c0012ea3:	0f be 45 00          	movsx  eax,BYTE PTR [ebp+0x0]
c0012ea7:	84 c0                	test   al,al
c0012ea9:	75 b8                	jne    c0012e63 <Dbg::kprintf(char const*, ...)+0x1c>
c0012eab:	83 c4 0c             	add    esp,0xc
c0012eae:	5b                   	pop    ebx
c0012eaf:	5e                   	pop    esi
c0012eb0:	5f                   	pop    edi
c0012eb1:	5d                   	pop    ebp
c0012eb2:	c3                   	ret    
c0012eb3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012eb7:	89 d0                	mov    eax,edx
c0012eb9:	83 c2 04             	add    edx,0x4
c0012ebc:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012ec0:	ff 30                	push   DWORD PTR [eax]
c0012ec2:	e8 44 ff ff ff       	call   c0012e0b <Dbg::logWriteInt(unsigned int)>
c0012ec7:	58                   	pop    eax
c0012ec8:	eb d9                	jmp    c0012ea3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012eca:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012ece:	89 d0                	mov    eax,edx
c0012ed0:	83 c2 04             	add    edx,0x4
c0012ed3:	0f be 00             	movsx  eax,BYTE PTR [eax]
c0012ed6:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012eda:	50                   	push   eax
c0012edb:	e8 f7 fe ff ff       	call   c0012dd7 <Dbg::logc(char)>
c0012ee0:	58                   	pop    eax
c0012ee1:	eb c0                	jmp    c0012ea3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012ee3:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012ee7:	89 c8                	mov    eax,ecx
c0012ee9:	83 c1 04             	add    ecx,0x4
c0012eec:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012ef0:	ff 30                	push   DWORD PTR [eax]
c0012ef2:	e8 14 ff ff ff       	call   c0012e0b <Dbg::logWriteInt(unsigned int)>
c0012ef7:	5f                   	pop    edi
c0012ef8:	eb a9                	jmp    c0012ea3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012efa:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0012efe:	89 c8                	mov    eax,ecx
c0012f00:	83 c1 04             	add    ecx,0x4
c0012f03:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0012f07:	6a 10                	push   0x10
c0012f09:	ff 30                	push   DWORD PTR [eax]
c0012f0b:	e8 18 ff ff ff       	call   c0012e28 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f10:	59                   	pop    ecx
c0012f11:	5f                   	pop    edi
c0012f12:	eb 8f                	jmp    c0012ea3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f14:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0012f18:	89 d0                	mov    eax,edx
c0012f1a:	83 c2 08             	add    edx,0x8
c0012f1d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0012f21:	6a 10                	push   0x10
c0012f23:	ff 30                	push   DWORD PTR [eax]
c0012f25:	e8 fe fe ff ff       	call   c0012e28 <Dbg::logWriteIntBase(unsigned int, int)>
c0012f2a:	58                   	pop    eax
c0012f2b:	5a                   	pop    edx
c0012f2c:	e9 72 ff ff ff       	jmp    c0012ea3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f31:	6a 25                	push   0x25
c0012f33:	e8 9f fe ff ff       	call   c0012dd7 <Dbg::logc(char)>
c0012f38:	58                   	pop    eax
c0012f39:	e9 65 ff ff ff       	jmp    c0012ea3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f3e:	6a 25                	push   0x25
c0012f40:	e8 92 fe ff ff       	call   c0012dd7 <Dbg::logc(char)>
c0012f45:	0f be 07             	movsx  eax,BYTE PTR [edi]
c0012f48:	50                   	push   eax
c0012f49:	e8 89 fe ff ff       	call   c0012dd7 <Dbg::logc(char)>
c0012f4e:	5a                   	pop    edx
c0012f4f:	59                   	pop    ecx
c0012f50:	e9 4e ff ff ff       	jmp    c0012ea3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f55:	50                   	push   eax
c0012f56:	89 eb                	mov    ebx,ebp
c0012f58:	e8 7a fe ff ff       	call   c0012dd7 <Dbg::logc(char)>
c0012f5d:	89 fd                	mov    ebp,edi
c0012f5f:	58                   	pop    eax
c0012f60:	e9 3e ff ff ff       	jmp    c0012ea3 <Dbg::kprintf(char const*, ...)+0x5c>
c0012f65:	90                   	nop

c0012f66 <File::read(unsigned long long, void*, int*)>:
c0012f66:	53                   	push   ebx
c0012f67:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012f6b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012f6f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012f76:	3c 19                	cmp    al,0x19
c0012f78:	77 35                	ja     c0012faf <File::read(unsigned long long, void*, int*)+0x49>
c0012f7a:	8b 04 85 60 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ba0]
c0012f81:	85 c0                	test   eax,eax
c0012f83:	74 2a                	je     c0012faf <File::read(unsigned long long, void*, int*)+0x49>
c0012f85:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012f8b:	85 c0                	test   eax,eax
c0012f8d:	74 20                	je     c0012faf <File::read(unsigned long long, void*, int*)+0x49>
c0012f8f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012f93:	74 21                	je     c0012fb6 <File::read(unsigned long long, void*, int*)+0x50>
c0012f95:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012f97:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012f9b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012fa1:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012fa5:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0012fa9:	5b                   	pop    ebx
c0012faa:	8b 41 14             	mov    eax,DWORD PTR [ecx+0x14]
c0012fad:	ff e0                	jmp    eax
c0012faf:	b8 0b 00 00 00       	mov    eax,0xb
c0012fb4:	eb 05                	jmp    c0012fbb <File::read(unsigned long long, void*, int*)+0x55>
c0012fb6:	b8 05 00 00 00       	mov    eax,0x5
c0012fbb:	5b                   	pop    ebx
c0012fbc:	c3                   	ret    
c0012fbd:	90                   	nop

c0012fbe <File::write(unsigned long long, void*, int*)>:
c0012fbe:	53                   	push   ebx
c0012fbf:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0012fc3:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0012fc7:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0012fce:	3c 19                	cmp    al,0x19
c0012fd0:	77 35                	ja     c0013007 <File::write(unsigned long long, void*, int*)+0x49>
c0012fd2:	8b 04 85 60 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ba0]
c0012fd9:	85 c0                	test   eax,eax
c0012fdb:	74 2a                	je     c0013007 <File::write(unsigned long long, void*, int*)+0x49>
c0012fdd:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c0012fe3:	85 c0                	test   eax,eax
c0012fe5:	74 20                	je     c0013007 <File::write(unsigned long long, void*, int*)+0x49>
c0012fe7:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0012feb:	74 21                	je     c001300e <File::write(unsigned long long, void*, int*)+0x50>
c0012fed:	8b 08                	mov    ecx,DWORD PTR [eax]
c0012fef:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0012ff3:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0012ff9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0012ffd:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013001:	5b                   	pop    ebx
c0013002:	8b 41 18             	mov    eax,DWORD PTR [ecx+0x18]
c0013005:	ff e0                	jmp    eax
c0013007:	b8 0b 00 00 00       	mov    eax,0xb
c001300c:	eb 05                	jmp    c0013013 <File::write(unsigned long long, void*, int*)+0x55>
c001300e:	b8 05 00 00 00       	mov    eax,0x5
c0013013:	5b                   	pop    ebx
c0013014:	c3                   	ret    
c0013015:	90                   	nop

c0013016 <Directory::read(unsigned long long, void*, int*)>:
c0013016:	53                   	push   ebx
c0013017:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001301b:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001301f:	0f b6 82 0d 01 00 00 	movzx  eax,BYTE PTR [edx+0x10d]
c0013026:	3c 19                	cmp    al,0x19
c0013028:	77 35                	ja     c001305f <Directory::read(unsigned long long, void*, int*)+0x49>
c001302a:	8b 04 85 60 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ba0]
c0013031:	85 c0                	test   eax,eax
c0013033:	74 2a                	je     c001305f <Directory::read(unsigned long long, void*, int*)+0x49>
c0013035:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001303b:	85 c0                	test   eax,eax
c001303d:	74 20                	je     c001305f <Directory::read(unsigned long long, void*, int*)+0x49>
c001303f:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013043:	74 21                	je     c0013066 <Directory::read(unsigned long long, void*, int*)+0x50>
c0013045:	8b 08                	mov    ecx,DWORD PTR [eax]
c0013047:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c001304b:	8b 92 10 01 00 00    	mov    edx,DWORD PTR [edx+0x110]
c0013051:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013055:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0013059:	5b                   	pop    ebx
c001305a:	8b 41 50             	mov    eax,DWORD PTR [ecx+0x50]
c001305d:	ff e0                	jmp    eax
c001305f:	b8 0b 00 00 00       	mov    eax,0xb
c0013064:	eb 05                	jmp    c001306b <Directory::read(unsigned long long, void*, int*)+0x55>
c0013066:	b8 05 00 00 00       	mov    eax,0x5
c001306b:	5b                   	pop    ebx
c001306c:	c3                   	ret    
c001306d:	90                   	nop

c001306e <Directory::write(unsigned long long, void*, int*)>:
c001306e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013072:	0f b6 90 0d 01 00 00 	movzx  edx,BYTE PTR [eax+0x10d]
c0013079:	b8 0b 00 00 00       	mov    eax,0xb
c001307e:	80 fa 19             	cmp    dl,0x19
c0013081:	77 18                	ja     c001309b <Directory::write(unsigned long long, void*, int*)+0x2d>
c0013083:	8b 14 95 60 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0ba0]
c001308a:	85 d2                	test   edx,edx
c001308c:	74 0d                	je     c001309b <Directory::write(unsigned long long, void*, int*)+0x2d>
c001308e:	83 ba 70 01 00 00 01 	cmp    DWORD PTR [edx+0x170],0x1
c0013095:	19 c0                	sbb    eax,eax
c0013097:	83 e0 0a             	and    eax,0xa
c001309a:	40                   	inc    eax
c001309b:	c3                   	ret    

c001309c <File::isAtty()>:
c001309c:	31 c0                	xor    eax,eax
c001309e:	c3                   	ret    
c001309f:	90                   	nop

c00130a0 <Directory::isAtty()>:
c00130a0:	31 c0                	xor    eax,eax
c00130a2:	c3                   	ret    
c00130a3:	90                   	nop

c00130a4 <Filesystem::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c00130a4:	b8 0a 00 00 00       	mov    eax,0xa
c00130a9:	c3                   	ret    

c00130aa <Filesystem::setlabel(LogicalDisk*, int, char*)>:
c00130aa:	b8 0a 00 00 00       	mov    eax,0xa
c00130af:	c3                   	ret    

c00130b0 <Filesystem::getFileFirstSector(char const*)>:
c00130b0:	31 c0                	xor    eax,eax
c00130b2:	31 d2                	xor    edx,edx
c00130b4:	c3                   	ret    
c00130b5:	90                   	nop

c00130b6 <File::~File()>:
c00130b6:	83 ec 0c             	sub    esp,0xc
c00130b9:	ba 04 b4 02 c0       	mov    edx,0xc002b404
c00130be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c2:	89 10                	mov    DWORD PTR [eax],edx
c00130c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00130c8:	83 ec 0c             	sub    esp,0xc
c00130cb:	50                   	push   eax
c00130cc:	e8 0f e7 ff ff       	call   c00117e0 <UnixFile::~UnixFile()>
c00130d1:	83 c4 10             	add    esp,0x10
c00130d4:	90                   	nop
c00130d5:	83 c4 0c             	add    esp,0xc
c00130d8:	c3                   	ret    
c00130d9:	90                   	nop

c00130da <File::~File()>:
c00130da:	83 ec 0c             	sub    esp,0xc
c00130dd:	83 ec 0c             	sub    esp,0xc
c00130e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130e4:	e8 cd ff ff ff       	call   c00130b6 <File::~File()>
c00130e9:	83 c4 10             	add    esp,0x10
c00130ec:	83 ec 08             	sub    esp,0x8
c00130ef:	68 14 01 00 00       	push   0x114
c00130f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00130f8:	e8 6a fc ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c00130fd:	83 c4 10             	add    esp,0x10
c0013100:	83 c4 0c             	add    esp,0xc
c0013103:	c3                   	ret    

c0013104 <Directory::~Directory()>:
c0013104:	83 ec 0c             	sub    esp,0xc
c0013107:	ba 20 b4 02 c0       	mov    edx,0xc002b420
c001310c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013110:	89 10                	mov    DWORD PTR [eax],edx
c0013112:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013116:	83 ec 0c             	sub    esp,0xc
c0013119:	50                   	push   eax
c001311a:	e8 c1 e6 ff ff       	call   c00117e0 <UnixFile::~UnixFile()>
c001311f:	83 c4 10             	add    esp,0x10
c0013122:	90                   	nop
c0013123:	83 c4 0c             	add    esp,0xc
c0013126:	c3                   	ret    
c0013127:	90                   	nop

c0013128 <Directory::~Directory()>:
c0013128:	83 ec 0c             	sub    esp,0xc
c001312b:	83 ec 0c             	sub    esp,0xc
c001312e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013132:	e8 cd ff ff ff       	call   c0013104 <Directory::~Directory()>
c0013137:	83 c4 10             	add    esp,0x10
c001313a:	83 ec 08             	sub    esp,0x8
c001313d:	68 14 01 00 00       	push   0x114
c0013142:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013146:	e8 1c fc ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c001314b:	83 c4 10             	add    esp,0x10
c001314e:	83 c4 0c             	add    esp,0xc
c0013151:	c3                   	ret    

c0013152 <Filesystem::Filesystem()>:
c0013152:	ba 9c b3 02 c0       	mov    edx,0xc002b39c
c0013157:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001315b:	89 10                	mov    DWORD PTR [eax],edx
c001315d:	8b 15 d4 ef 02 c0    	mov    edx,DWORD PTR ds:0xc002efd4
c0013163:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0013167:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c001316a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001316e:	a3 d4 ef 02 c0       	mov    ds:0xc002efd4,eax
c0013173:	90                   	nop
c0013174:	c3                   	ret    
c0013175:	90                   	nop

c0013176 <Filesystem::~Filesystem()>:
c0013176:	ba 9c b3 02 c0       	mov    edx,0xc002b39c
c001317b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001317f:	89 10                	mov    DWORD PTR [eax],edx
c0013181:	90                   	nop
c0013182:	c3                   	ret    
c0013183:	90                   	nop

c0013184 <Filesystem::~Filesystem()>:
c0013184:	83 ec 0c             	sub    esp,0xc
c0013187:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001318b:	e8 e6 ff ff ff       	call   c0013176 <Filesystem::~Filesystem()>
c0013190:	83 c4 04             	add    esp,0x4
c0013193:	83 ec 08             	sub    esp,0x8
c0013196:	6a 08                	push   0x8
c0013198:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001319c:	e8 c6 fb ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c00131a1:	83 c4 10             	add    esp,0x10
c00131a4:	83 c4 0c             	add    esp,0xc
c00131a7:	c3                   	ret    

c00131a8 <Fs::getcwd(Process*, char*, int)>:
c00131a8:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00131ac:	31 c0                	xor    eax,eax
c00131ae:	8d 0c 02             	lea    ecx,[edx+eax*1]
c00131b1:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c00131b5:	7d 15                	jge    c00131cc <Fs::getcwd(Process*, char*, int)+0x24>
c00131b7:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00131bb:	8a 8c 01 0c 01 00 00 	mov    cl,BYTE PTR [ecx+eax*1+0x10c]
c00131c2:	88 0c 02             	mov    BYTE PTR [edx+eax*1],cl
c00131c5:	84 c9                	test   cl,cl
c00131c7:	74 06                	je     c00131cf <Fs::getcwd(Process*, char*, int)+0x27>
c00131c9:	40                   	inc    eax
c00131ca:	eb e2                	jmp    c00131ae <Fs::getcwd(Process*, char*, int)+0x6>
c00131cc:	c6 01 00             	mov    BYTE PTR [ecx],0x0
c00131cf:	31 c0                	xor    eax,eax
c00131d1:	c3                   	ret    

c00131d2 <Fs::initVFS()>:
c00131d2:	83 ec 18             	sub    esp,0x18
c00131d5:	6a 08                	push   0x8
c00131d7:	e8 cc c6 ff ff       	call   c000f8a8 <malloc>
c00131dc:	89 04 24             	mov    DWORD PTR [esp],eax
c00131df:	e8 c4 e4 00 00       	call   c00216a8 <FAT::FAT()>
c00131e4:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c00131eb:	e8 b8 c6 ff ff       	call   c000f8a8 <malloc>
c00131f0:	89 04 24             	mov    DWORD PTR [esp],eax
c00131f3:	e8 ea f6 00 00       	call   c00228e2 <ISO9660::ISO9660()>
c00131f8:	83 c4 1c             	add    esp,0x1c
c00131fb:	c3                   	ret    

c00131fc <Fs::standardiseFiles(char*, char const*, char const*)>:
c00131fc:	55                   	push   ebp
c00131fd:	57                   	push   edi
c00131fe:	56                   	push   esi
c00131ff:	53                   	push   ebx
c0013200:	81 ec 10 04 00 00    	sub    esp,0x410
c0013206:	8b bc 24 28 04 00 00 	mov    edi,DWORD PTR [esp+0x428]
c001320d:	8b 9c 24 24 04 00 00 	mov    ebx,DWORD PTR [esp+0x424]
c0013214:	8b ac 24 2c 04 00 00 	mov    ebp,DWORD PTR [esp+0x42c]
c001321b:	68 00 04 00 00       	push   0x400
c0013220:	6a 00                	push   0x0
c0013222:	8d 74 24 0c          	lea    esi,[esp+0xc]
c0013226:	56                   	push   esi
c0013227:	e8 40 d5 fe ff       	call   c000076c <memset>
c001322c:	83 c4 10             	add    esp,0x10
c001322f:	80 7f 01 3a          	cmp    BYTE PTR [edi+0x1],0x3a
c0013233:	75 0b                	jne    c0013240 <Fs::standardiseFiles(char*, char const*, char const*)+0x44>
c0013235:	50                   	push   eax
c0013236:	50                   	push   eax
c0013237:	57                   	push   edi
c0013238:	56                   	push   esi
c0013239:	e8 ea d5 fe ff       	call   c0000828 <strcpy>
c001323e:	eb 41                	jmp    c0013281 <Fs::standardiseFiles(char*, char const*, char const*)+0x85>
c0013240:	8a 07                	mov    al,BYTE PTR [edi]
c0013242:	3c 5c                	cmp    al,0x5c
c0013244:	74 04                	je     c001324a <Fs::standardiseFiles(char*, char const*, char const*)+0x4e>
c0013246:	3c 2f                	cmp    al,0x2f
c0013248:	75 18                	jne    c0013262 <Fs::standardiseFiles(char*, char const*, char const*)+0x66>
c001324a:	8a 45 00             	mov    al,BYTE PTR [ebp+0x0]
c001324d:	3c 60                	cmp    al,0x60
c001324f:	7e 03                	jle    c0013254 <Fs::standardiseFiles(char*, char const*, char const*)+0x58>
c0013251:	83 e8 20             	sub    eax,0x20
c0013254:	88 04 24             	mov    BYTE PTR [esp],al
c0013257:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001325e:	50                   	push   eax
c001325f:	50                   	push   eax
c0013260:	eb 18                	jmp    c001327a <Fs::standardiseFiles(char*, char const*, char const*)+0x7e>
c0013262:	50                   	push   eax
c0013263:	50                   	push   eax
c0013264:	55                   	push   ebp
c0013265:	56                   	push   esi
c0013266:	e8 bd d5 fe ff       	call   c0000828 <strcpy>
c001326b:	5a                   	pop    edx
c001326c:	59                   	pop    ecx
c001326d:	68 b1 cb 02 c0       	push   0xc002cbb1
c0013272:	56                   	push   esi
c0013273:	e8 f0 d6 fe ff       	call   c0000968 <strcat>
c0013278:	5d                   	pop    ebp
c0013279:	58                   	pop    eax
c001327a:	57                   	push   edi
c001327b:	56                   	push   esi
c001327c:	e8 e7 d6 fe ff       	call   c0000968 <strcat>
c0013281:	83 c4 10             	add    esp,0x10
c0013284:	8a 04 24             	mov    al,BYTE PTR [esp]
c0013287:	3c 60                	cmp    al,0x60
c0013289:	7e 03                	jle    c001328e <Fs::standardiseFiles(char*, char const*, char const*)+0x92>
c001328b:	83 e8 20             	sub    eax,0x20
c001328e:	88 04 24             	mov    BYTE PTR [esp],al
c0013291:	88 03                	mov    BYTE PTR [ebx],al
c0013293:	66 c7 44 24 01 3a 2f 	mov    WORD PTR [esp+0x1],0x2f3a
c001329a:	66 c7 43 01 3a 2f    	mov    WORD PTR [ebx+0x1],0x2f3a
c00132a0:	c6 43 03 00          	mov    BYTE PTR [ebx+0x3],0x0
c00132a4:	bf 03 00 00 00       	mov    edi,0x3
c00132a9:	b8 03 00 00 00       	mov    eax,0x3
c00132ae:	8a 14 3c             	mov    dl,BYTE PTR [esp+edi*1]
c00132b1:	84 d2                	test   dl,dl
c00132b3:	0f 84 91 00 00 00    	je     c001334a <Fs::standardiseFiles(char*, char const*, char const*)+0x14e>
c00132b9:	8d 4f 01             	lea    ecx,[edi+0x1]
c00132bc:	80 fa 5c             	cmp    dl,0x5c
c00132bf:	74 05                	je     c00132c6 <Fs::standardiseFiles(char*, char const*, char const*)+0xca>
c00132c1:	80 fa 2f             	cmp    dl,0x2f
c00132c4:	75 12                	jne    c00132d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00132c6:	89 c5                	mov    ebp,eax
c00132c8:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c00132cd:	74 09                	je     c00132d8 <Fs::standardiseFiles(char*, char const*, char const*)+0xdc>
c00132cf:	40                   	inc    eax
c00132d0:	c6 04 2b 2f          	mov    BYTE PTR [ebx+ebp*1],0x2f
c00132d4:	89 cf                	mov    edi,ecx
c00132d6:	eb d6                	jmp    c00132ae <Fs::standardiseFiles(char*, char const*, char const*)+0xb2>
c00132d8:	80 7c 3c ff 2f       	cmp    BYTE PTR [esp+edi*1-0x1],0x2f
c00132dd:	75 5b                	jne    c001333a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00132df:	80 fa 2e             	cmp    dl,0x2e
c00132e2:	75 56                	jne    c001333a <Fs::standardiseFiles(char*, char const*, char const*)+0x13e>
c00132e4:	80 3c 0c 2e          	cmp    BYTE PTR [esp+ecx*1],0x2e
c00132e8:	74 19                	je     c0013303 <Fs::standardiseFiles(char*, char const*, char const*)+0x107>
c00132ea:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c00132ef:	74 53                	je     c0013344 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c00132f1:	89 f9                	mov    ecx,edi
c00132f3:	41                   	inc    ecx
c00132f4:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c00132f7:	80 fa 2f             	cmp    dl,0x2f
c00132fa:	74 f7                	je     c00132f3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c00132fc:	80 fa 5c             	cmp    dl,0x5c
c00132ff:	74 f2                	je     c00132f3 <Fs::standardiseFiles(char*, char const*, char const*)+0xf7>
c0013301:	eb d1                	jmp    c00132d4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013303:	80 7c 3c 02 2e       	cmp    BYTE PTR [esp+edi*1+0x2],0x2e
c0013308:	74 3a                	je     c0013344 <Fs::standardiseFiles(char*, char const*, char const*)+0x148>
c001330a:	83 f8 03             	cmp    eax,0x3
c001330d:	74 c5                	je     c00132d4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001330f:	41                   	inc    ecx
c0013310:	8a 14 0e             	mov    dl,BYTE PTR [esi+ecx*1]
c0013313:	80 fa 2f             	cmp    dl,0x2f
c0013316:	74 f7                	je     c001330f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c0013318:	80 fa 5c             	cmp    dl,0x5c
c001331b:	74 f2                	je     c001330f <Fs::standardiseFiles(char*, char const*, char const*)+0x113>
c001331d:	48                   	dec    eax
c001331e:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c0013322:	75 06                	jne    c001332a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013324:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013328:	eb f3                	jmp    c001331d <Fs::standardiseFiles(char*, char const*, char const*)+0x121>
c001332a:	80 3c 03 2f          	cmp    BYTE PTR [ebx+eax*1],0x2f
c001332e:	74 07                	je     c0013337 <Fs::standardiseFiles(char*, char const*, char const*)+0x13b>
c0013330:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c0013334:	48                   	dec    eax
c0013335:	eb f3                	jmp    c001332a <Fs::standardiseFiles(char*, char const*, char const*)+0x12e>
c0013337:	40                   	inc    eax
c0013338:	eb 9a                	jmp    c00132d4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001333a:	80 fa 2f             	cmp    dl,0x2f
c001333d:	74 95                	je     c00132d4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001333f:	80 fa 5c             	cmp    dl,0x5c
c0013342:	74 90                	je     c00132d4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c0013344:	88 14 03             	mov    BYTE PTR [ebx+eax*1],dl
c0013347:	40                   	inc    eax
c0013348:	eb 8a                	jmp    c00132d4 <Fs::standardiseFiles(char*, char const*, char const*)+0xd8>
c001334a:	c6 04 03 00          	mov    BYTE PTR [ebx+eax*1],0x0
c001334e:	83 ec 0c             	sub    esp,0xc
c0013351:	53                   	push   ebx
c0013352:	e8 31 d4 fe ff       	call   c0000788 <strlen>
c0013357:	83 c4 10             	add    esp,0x10
c001335a:	80 7c 03 ff 2e       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2e
c001335f:	75 26                	jne    c0013387 <Fs::standardiseFiles(char*, char const*, char const*)+0x18b>
c0013361:	83 ec 0c             	sub    esp,0xc
c0013364:	53                   	push   ebx
c0013365:	e8 1e d4 fe ff       	call   c0000788 <strlen>
c001336a:	83 c4 10             	add    esp,0x10
c001336d:	80 7c 03 fe 3a       	cmp    BYTE PTR [ebx+eax*1-0x2],0x3a
c0013372:	74 26                	je     c001339a <Fs::standardiseFiles(char*, char const*, char const*)+0x19e>
c0013374:	83 ec 0c             	sub    esp,0xc
c0013377:	53                   	push   ebx
c0013378:	e8 0b d4 fe ff       	call   c0000788 <strlen>
c001337d:	83 c4 10             	add    esp,0x10
c0013380:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c0013385:	eb c7                	jmp    c001334e <Fs::standardiseFiles(char*, char const*, char const*)+0x152>
c0013387:	83 ec 0c             	sub    esp,0xc
c001338a:	53                   	push   ebx
c001338b:	e8 f8 d3 fe ff       	call   c0000788 <strlen>
c0013390:	83 c4 10             	add    esp,0x10
c0013393:	80 7c 03 ff 2f       	cmp    BYTE PTR [ebx+eax*1-0x1],0x2f
c0013398:	74 c7                	je     c0013361 <Fs::standardiseFiles(char*, char const*, char const*)+0x165>
c001339a:	81 c4 0c 04 00 00    	add    esp,0x40c
c00133a0:	5b                   	pop    ebx
c00133a1:	5e                   	pop    esi
c00133a2:	5f                   	pop    edi
c00133a3:	5d                   	pop    ebp
c00133a4:	c3                   	ret    
c00133a5:	90                   	nop

c00133a6 <File::File(char const*, Process*)>:
c00133a6:	83 ec 0c             	sub    esp,0xc
c00133a9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ad:	83 ec 08             	sub    esp,0x8
c00133b0:	6a 00                	push   0x0
c00133b2:	50                   	push   eax
c00133b3:	e8 46 e2 ff ff       	call   c00115fe <UnixFile::UnixFile(int)>
c00133b8:	83 c4 10             	add    esp,0x10
c00133bb:	ba 04 b4 02 c0       	mov    edx,0xc002b404
c00133c0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133c4:	89 10                	mov    DWORD PTR [eax],edx
c00133c6:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00133ca:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c00133d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133d4:	83 c0 0d             	add    eax,0xd
c00133d7:	83 ec 04             	sub    esp,0x4
c00133da:	52                   	push   edx
c00133db:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00133df:	50                   	push   eax
c00133e0:	e8 17 fe ff ff       	call   c00131fc <Fs::standardiseFiles(char*, char const*, char const*)>
c00133e5:	83 c4 10             	add    esp,0x10
c00133e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133ec:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c00133ef:	8d 50 bf             	lea    edx,[eax-0x41]
c00133f2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00133f6:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00133fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013400:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c0013404:	90                   	nop
c0013405:	83 c4 0c             	add    esp,0xc
c0013408:	c3                   	ret    
c0013409:	90                   	nop

c001340a <File::open(FileOpenMode)>:
c001340a:	53                   	push   ebx
c001340b:	b8 0b 00 00 00       	mov    eax,0xb
c0013410:	83 ec 08             	sub    esp,0x8
c0013413:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013417:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c001341e:	80 fa 19             	cmp    dl,0x19
c0013421:	77 40                	ja     c0013463 <File::open(FileOpenMode)+0x59>
c0013423:	8b 14 95 60 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0ba0]
c001342a:	85 d2                	test   edx,edx
c001342c:	74 35                	je     c0013463 <File::open(FileOpenMode)+0x59>
c001342e:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013434:	85 d2                	test   edx,edx
c0013436:	74 2b                	je     c0013463 <File::open(FileOpenMode)+0x59>
c0013438:	b8 06 00 00 00       	mov    eax,0x6
c001343d:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c0013441:	75 20                	jne    c0013463 <File::open(FileOpenMode)+0x59>
c0013443:	8b 02                	mov    eax,DWORD PTR [edx]
c0013445:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c001344b:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001344f:	51                   	push   ecx
c0013450:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c0013453:	51                   	push   ecx
c0013454:	52                   	push   edx
c0013455:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0013458:	83 c4 10             	add    esp,0x10
c001345b:	85 c0                	test   eax,eax
c001345d:	75 04                	jne    c0013463 <File::open(FileOpenMode)+0x59>
c001345f:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c0013463:	83 c4 08             	add    esp,0x8
c0013466:	5b                   	pop    ebx
c0013467:	c3                   	ret    

c0013468 <File::close()>:
c0013468:	53                   	push   ebx
c0013469:	b8 0b 00 00 00       	mov    eax,0xb
c001346e:	83 ec 08             	sub    esp,0x8
c0013471:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013475:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c001347c:	80 fa 19             	cmp    dl,0x19
c001347f:	77 41                	ja     c00134c2 <File::close()+0x5a>
c0013481:	8b 1c 95 60 f4 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0ba0]
c0013488:	85 db                	test   ebx,ebx
c001348a:	74 36                	je     c00134c2 <File::close()+0x5a>
c001348c:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c0013493:	74 2d                	je     c00134c2 <File::close()+0x5a>
c0013495:	b8 05 00 00 00       	mov    eax,0x5
c001349a:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c001349e:	74 22                	je     c00134c2 <File::close()+0x5a>
c00134a0:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c00134a4:	8b 04 95 60 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0ba0]
c00134ab:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c00134b1:	53                   	push   ebx
c00134b2:	53                   	push   ebx
c00134b3:	8b 10                	mov    edx,DWORD PTR [eax]
c00134b5:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c00134bb:	50                   	push   eax
c00134bc:	ff 52 1c             	call   DWORD PTR [edx+0x1c]
c00134bf:	83 c4 10             	add    esp,0x10
c00134c2:	83 c4 08             	add    esp,0x8
c00134c5:	5b                   	pop    ebx
c00134c6:	c3                   	ret    
c00134c7:	90                   	nop

c00134c8 <File::seek(unsigned long long)>:
c00134c8:	56                   	push   esi
c00134c9:	53                   	push   ebx
c00134ca:	b8 0b 00 00 00       	mov    eax,0xb
c00134cf:	51                   	push   ecx
c00134d0:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00134d4:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00134d8:	0f b6 96 0d 01 00 00 	movzx  edx,BYTE PTR [esi+0x10d]
c00134df:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00134e3:	80 fa 19             	cmp    dl,0x19
c00134e6:	77 31                	ja     c0013519 <File::seek(unsigned long long)+0x51>
c00134e8:	8b 14 95 60 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0ba0]
c00134ef:	85 d2                	test   edx,edx
c00134f1:	74 26                	je     c0013519 <File::seek(unsigned long long)+0x51>
c00134f3:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00134f9:	85 d2                	test   edx,edx
c00134fb:	74 1c                	je     c0013519 <File::seek(unsigned long long)+0x51>
c00134fd:	b8 05 00 00 00       	mov    eax,0x5
c0013502:	80 7e 0c 00          	cmp    BYTE PTR [esi+0xc],0x0
c0013506:	74 11                	je     c0013519 <File::seek(unsigned long long)+0x51>
c0013508:	8b 02                	mov    eax,DWORD PTR [edx]
c001350a:	53                   	push   ebx
c001350b:	51                   	push   ecx
c001350c:	ff b6 10 01 00 00    	push   DWORD PTR [esi+0x110]
c0013512:	52                   	push   edx
c0013513:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013516:	83 c4 10             	add    esp,0x10
c0013519:	5a                   	pop    edx
c001351a:	5b                   	pop    ebx
c001351b:	5e                   	pop    esi
c001351c:	c3                   	ret    
c001351d:	90                   	nop

c001351e <File::tell(unsigned long long*)>:
c001351e:	83 ec 0c             	sub    esp,0xc
c0013521:	b8 0b 00 00 00       	mov    eax,0xb
c0013526:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001352a:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013531:	80 fa 19             	cmp    dl,0x19
c0013534:	77 34                	ja     c001356a <File::tell(unsigned long long*)+0x4c>
c0013536:	8b 14 95 60 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0ba0]
c001353d:	85 d2                	test   edx,edx
c001353f:	74 29                	je     c001356a <File::tell(unsigned long long*)+0x4c>
c0013541:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c0013547:	85 d2                	test   edx,edx
c0013549:	74 1f                	je     c001356a <File::tell(unsigned long long*)+0x4c>
c001354b:	b8 05 00 00 00       	mov    eax,0x5
c0013550:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013554:	74 14                	je     c001356a <File::tell(unsigned long long*)+0x4c>
c0013556:	50                   	push   eax
c0013557:	8b 02                	mov    eax,DWORD PTR [edx]
c0013559:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001355d:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013563:	52                   	push   edx
c0013564:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0013567:	83 c4 10             	add    esp,0x10
c001356a:	83 c4 0c             	add    esp,0xc
c001356d:	c3                   	ret    

c001356e <File::rewind()>:
c001356e:	83 ec 10             	sub    esp,0x10
c0013571:	6a 00                	push   0x0
c0013573:	6a 00                	push   0x0
c0013575:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013579:	e8 4a ff ff ff       	call   c00134c8 <File::seek(unsigned long long)>
c001357e:	83 c4 1c             	add    esp,0x1c
c0013581:	c3                   	ret    

c0013582 <File::unlink()>:
c0013582:	83 ec 0c             	sub    esp,0xc
c0013585:	b8 0b 00 00 00       	mov    eax,0xb
c001358a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001358e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013595:	80 f9 19             	cmp    cl,0x19
c0013598:	77 2f                	ja     c00135c9 <File::unlink()+0x47>
c001359a:	8b 0c 8d 60 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0ba0]
c00135a1:	85 c9                	test   ecx,ecx
c00135a3:	74 24                	je     c00135c9 <File::unlink()+0x47>
c00135a5:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135ab:	85 c9                	test   ecx,ecx
c00135ad:	74 1a                	je     c00135c9 <File::unlink()+0x47>
c00135af:	b8 06 00 00 00       	mov    eax,0x6
c00135b4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00135b8:	75 0f                	jne    c00135c9 <File::unlink()+0x47>
c00135ba:	83 c2 0d             	add    edx,0xd
c00135bd:	50                   	push   eax
c00135be:	50                   	push   eax
c00135bf:	8b 01                	mov    eax,DWORD PTR [ecx]
c00135c1:	52                   	push   edx
c00135c2:	51                   	push   ecx
c00135c3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00135c6:	83 c4 10             	add    esp,0x10
c00135c9:	83 c4 0c             	add    esp,0xc
c00135cc:	c3                   	ret    
c00135cd:	90                   	nop

c00135ce <File::rename(char const*)>:
c00135ce:	83 ec 0c             	sub    esp,0xc
c00135d1:	b8 0b 00 00 00       	mov    eax,0xb
c00135d6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00135da:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00135e1:	80 f9 19             	cmp    cl,0x19
c00135e4:	77 32                	ja     c0013618 <File::rename(char const*)+0x4a>
c00135e6:	8b 0c 8d 60 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0ba0]
c00135ed:	85 c9                	test   ecx,ecx
c00135ef:	74 27                	je     c0013618 <File::rename(char const*)+0x4a>
c00135f1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00135f7:	85 c9                	test   ecx,ecx
c00135f9:	74 1d                	je     c0013618 <File::rename(char const*)+0x4a>
c00135fb:	b8 06 00 00 00       	mov    eax,0x6
c0013600:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013604:	75 12                	jne    c0013618 <File::rename(char const*)+0x4a>
c0013606:	83 c2 0d             	add    edx,0xd
c0013609:	50                   	push   eax
c001360a:	8b 01                	mov    eax,DWORD PTR [ecx]
c001360c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013610:	52                   	push   edx
c0013611:	51                   	push   ecx
c0013612:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013615:	83 c4 10             	add    esp,0x10
c0013618:	83 c4 0c             	add    esp,0xc
c001361b:	c3                   	ret    

c001361c <File::chfatattr(unsigned char, unsigned char)>:
c001361c:	57                   	push   edi
c001361d:	b8 0b 00 00 00       	mov    eax,0xb
c0013622:	56                   	push   esi
c0013623:	53                   	push   ebx
c0013624:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013628:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001362c:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013633:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0013637:	80 f9 19             	cmp    cl,0x19
c001363a:	77 37                	ja     c0013673 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001363c:	8b 0c 8d 60 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0ba0]
c0013643:	85 c9                	test   ecx,ecx
c0013645:	74 2c                	je     c0013673 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013647:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001364d:	85 c9                	test   ecx,ecx
c001364f:	74 22                	je     c0013673 <File::chfatattr(unsigned char, unsigned char)+0x57>
c0013651:	b8 06 00 00 00       	mov    eax,0x6
c0013656:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c001365a:	75 17                	jne    c0013673 <File::chfatattr(unsigned char, unsigned char)+0x57>
c001365c:	8b 39                	mov    edi,DWORD PTR [ecx]
c001365e:	89 f0                	mov    eax,esi
c0013660:	83 c2 0d             	add    edx,0xd
c0013663:	0f b6 f0             	movzx  esi,al
c0013666:	0f b6 db             	movzx  ebx,bl
c0013669:	56                   	push   esi
c001366a:	53                   	push   ebx
c001366b:	52                   	push   edx
c001366c:	51                   	push   ecx
c001366d:	ff 57 34             	call   DWORD PTR [edi+0x34]
c0013670:	83 c4 10             	add    esp,0x10
c0013673:	5b                   	pop    ebx
c0013674:	5e                   	pop    esi
c0013675:	5f                   	pop    edi
c0013676:	c3                   	ret    
c0013677:	90                   	nop

c0013678 <File::exists()>:
c0013678:	83 ec 0c             	sub    esp,0xc
c001367b:	31 c0                	xor    eax,eax
c001367d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013681:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013688:	80 f9 19             	cmp    cl,0x19
c001368b:	77 24                	ja     c00136b1 <File::exists()+0x39>
c001368d:	8b 0c 8d 60 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0ba0]
c0013694:	85 c9                	test   ecx,ecx
c0013696:	74 19                	je     c00136b1 <File::exists()+0x39>
c0013698:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001369e:	85 c9                	test   ecx,ecx
c00136a0:	74 0f                	je     c00136b1 <File::exists()+0x39>
c00136a2:	83 c2 0d             	add    edx,0xd
c00136a5:	50                   	push   eax
c00136a6:	50                   	push   eax
c00136a7:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136a9:	52                   	push   edx
c00136aa:	51                   	push   ecx
c00136ab:	ff 50 44             	call   DWORD PTR [eax+0x44]
c00136ae:	83 c4 10             	add    esp,0x10
c00136b1:	83 c4 0c             	add    esp,0xc
c00136b4:	c3                   	ret    
c00136b5:	90                   	nop

c00136b6 <File::stat(unsigned long long*, bool*)>:
c00136b6:	56                   	push   esi
c00136b7:	53                   	push   ebx
c00136b8:	50                   	push   eax
c00136b9:	b8 0b 00 00 00       	mov    eax,0xb
c00136be:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00136c2:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00136c6:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00136cd:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00136d1:	80 f9 19             	cmp    cl,0x19
c00136d4:	77 3d                	ja     c0013713 <File::stat(unsigned long long*, bool*)+0x5d>
c00136d6:	8b 0c 8d 60 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0ba0]
c00136dd:	85 c9                	test   ecx,ecx
c00136df:	74 32                	je     c0013713 <File::stat(unsigned long long*, bool*)+0x5d>
c00136e1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00136e7:	85 c9                	test   ecx,ecx
c00136e9:	74 28                	je     c0013713 <File::stat(unsigned long long*, bool*)+0x5d>
c00136eb:	8b 01                	mov    eax,DWORD PTR [ecx]
c00136ed:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00136f1:	74 13                	je     c0013706 <File::stat(unsigned long long*, bool*)+0x50>
c00136f3:	83 ec 04             	sub    esp,0x4
c00136f6:	56                   	push   esi
c00136f7:	ff b2 10 01 00 00    	push   DWORD PTR [edx+0x110]
c00136fd:	51                   	push   ecx
c00136fe:	ff 50 2c             	call   DWORD PTR [eax+0x2c]
c0013701:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c0013704:	eb 0a                	jmp    c0013710 <File::stat(unsigned long long*, bool*)+0x5a>
c0013706:	53                   	push   ebx
c0013707:	83 c2 0d             	add    edx,0xd
c001370a:	56                   	push   esi
c001370b:	52                   	push   edx
c001370c:	51                   	push   ecx
c001370d:	ff 50 30             	call   DWORD PTR [eax+0x30]
c0013710:	83 c4 10             	add    esp,0x10
c0013713:	5a                   	pop    edx
c0013714:	5b                   	pop    ebx
c0013715:	5e                   	pop    esi
c0013716:	c3                   	ret    

c0013717 <Fs::setcwd(Process*, char*)>:
c0013717:	55                   	push   ebp
c0013718:	57                   	push   edi
c0013719:	56                   	push   esi
c001371a:	53                   	push   ebx
c001371b:	81 ec 20 02 00 00    	sub    esp,0x220
c0013721:	8b ac 24 34 02 00 00 	mov    ebp,DWORD PTR [esp+0x234]
c0013728:	8d bd 0c 01 00 00    	lea    edi,[ebp+0x10c]
c001372e:	57                   	push   edi
c001372f:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0013736:	8d 74 24 1c          	lea    esi,[esp+0x1c]
c001373a:	56                   	push   esi
c001373b:	e8 bc fa ff ff       	call   c00131fc <Fs::standardiseFiles(char*, char const*, char const*)>
c0013740:	89 34 24             	mov    DWORD PTR [esp],esi
c0013743:	e8 40 d0 fe ff       	call   c0000788 <strlen>
c0013748:	83 c4 10             	add    esp,0x10
c001374b:	83 f8 02             	cmp    eax,0x2
c001374e:	77 17                	ja     c0013767 <Fs::setcwd(Process*, char*)+0x50>
c0013750:	0f be 44 24 10       	movsx  eax,BYTE PTR [esp+0x10]
c0013755:	83 e8 41             	sub    eax,0x41
c0013758:	83 f8 19             	cmp    eax,0x19
c001375b:	76 24                	jbe    c0013781 <Fs::setcwd(Process*, char*)+0x6a>
c001375d:	b8 03 00 00 00       	mov    eax,0x3
c0013762:	e9 e0 00 00 00       	jmp    c0013847 <Fs::setcwd(Process*, char*)+0x130>
c0013767:	83 ec 0c             	sub    esp,0xc
c001376a:	56                   	push   esi
c001376b:	e8 18 d0 fe ff       	call   c0000788 <strlen>
c0013770:	83 c4 10             	add    esp,0x10
c0013773:	83 f8 03             	cmp    eax,0x3
c0013776:	75 34                	jne    c00137ac <Fs::setcwd(Process*, char*)+0x95>
c0013778:	80 7c 24 12 2f       	cmp    BYTE PTR [esp+0x12],0x2f
c001377d:	75 2d                	jne    c00137ac <Fs::setcwd(Process*, char*)+0x95>
c001377f:	eb cf                	jmp    c0013750 <Fs::setcwd(Process*, char*)+0x39>
c0013781:	8b 14 85 60 f4 02 c0 	mov    edx,DWORD PTR [eax*4-0x3ffd0ba0]
c0013788:	b8 05 00 00 00       	mov    eax,0x5
c001378d:	85 d2                	test   edx,edx
c001378f:	0f 84 b2 00 00 00    	je     c0013847 <Fs::setcwd(Process*, char*)+0x130>
c0013795:	b8 06 00 00 00       	mov    eax,0x6
c001379a:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c00137a1:	0f 85 92 00 00 00    	jne    c0013839 <Fs::setcwd(Process*, char*)+0x122>
c00137a7:	e9 9b 00 00 00       	jmp    c0013847 <Fs::setcwd(Process*, char*)+0x130>
c00137ac:	83 ec 0c             	sub    esp,0xc
c00137af:	68 14 01 00 00       	push   0x114
c00137b4:	e8 ef c0 ff ff       	call   c000f8a8 <malloc>
c00137b9:	83 c4 0c             	add    esp,0xc
c00137bc:	89 c3                	mov    ebx,eax
c00137be:	55                   	push   ebp
c00137bf:	56                   	push   esi
c00137c0:	50                   	push   eax
c00137c1:	e8 e0 fb ff ff       	call   c00133a6 <File::File(char const*, Process*)>
c00137c6:	c6 44 24 17 00       	mov    BYTE PTR [esp+0x17],0x0
c00137cb:	83 c4 0c             	add    esp,0xc
c00137ce:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00137d2:	50                   	push   eax
c00137d3:	8d 44 24 10          	lea    eax,[esp+0x10]
c00137d7:	50                   	push   eax
c00137d8:	53                   	push   ebx
c00137d9:	e8 d8 fe ff ff       	call   c00136b6 <File::stat(unsigned long long*, bool*)>
c00137de:	83 c4 10             	add    esp,0x10
c00137e1:	83 f8 02             	cmp    eax,0x2
c00137e4:	74 04                	je     c00137ea <Fs::setcwd(Process*, char*)+0xd3>
c00137e6:	85 c0                	test   eax,eax
c00137e8:	74 1c                	je     c0013806 <Fs::setcwd(Process*, char*)+0xef>
c00137ea:	b8 01 00 00 00       	mov    eax,0x1
c00137ef:	85 db                	test   ebx,ebx
c00137f1:	74 54                	je     c0013847 <Fs::setcwd(Process*, char*)+0x130>
c00137f3:	83 ec 0c             	sub    esp,0xc
c00137f6:	8b 03                	mov    eax,DWORD PTR [ebx]
c00137f8:	53                   	push   ebx
c00137f9:	ff 50 08             	call   DWORD PTR [eax+0x8]
c00137fc:	83 c4 10             	add    esp,0x10
c00137ff:	b8 01 00 00 00       	mov    eax,0x1
c0013804:	eb 41                	jmp    c0013847 <Fs::setcwd(Process*, char*)+0x130>
c0013806:	80 7c 24 07 00       	cmp    BYTE PTR [esp+0x7],0x0
c001380b:	75 1c                	jne    c0013829 <Fs::setcwd(Process*, char*)+0x112>
c001380d:	b8 02 00 00 00       	mov    eax,0x2
c0013812:	85 db                	test   ebx,ebx
c0013814:	74 31                	je     c0013847 <Fs::setcwd(Process*, char*)+0x130>
c0013816:	83 ec 0c             	sub    esp,0xc
c0013819:	8b 03                	mov    eax,DWORD PTR [ebx]
c001381b:	53                   	push   ebx
c001381c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001381f:	83 c4 10             	add    esp,0x10
c0013822:	b8 02 00 00 00       	mov    eax,0x2
c0013827:	eb 1e                	jmp    c0013847 <Fs::setcwd(Process*, char*)+0x130>
c0013829:	85 db                	test   ebx,ebx
c001382b:	74 0c                	je     c0013839 <Fs::setcwd(Process*, char*)+0x122>
c001382d:	83 ec 0c             	sub    esp,0xc
c0013830:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013832:	53                   	push   ebx
c0013833:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0013836:	83 c4 10             	add    esp,0x10
c0013839:	50                   	push   eax
c001383a:	50                   	push   eax
c001383b:	56                   	push   esi
c001383c:	57                   	push   edi
c001383d:	e8 e6 cf fe ff       	call   c0000828 <strcpy>
c0013842:	83 c4 10             	add    esp,0x10
c0013845:	31 c0                	xor    eax,eax
c0013847:	81 c4 1c 02 00 00    	add    esp,0x21c
c001384d:	5b                   	pop    ebx
c001384e:	5e                   	pop    esi
c001384f:	5f                   	pop    edi
c0013850:	5d                   	pop    ebp
c0013851:	c3                   	ret    

c0013852 <Directory::Directory(char const*, Process*)>:
c0013852:	83 ec 0c             	sub    esp,0xc
c0013855:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013859:	83 ec 08             	sub    esp,0x8
c001385c:	6a 00                	push   0x0
c001385e:	50                   	push   eax
c001385f:	e8 9a dd ff ff       	call   c00115fe <UnixFile::UnixFile(int)>
c0013864:	83 c4 10             	add    esp,0x10
c0013867:	ba 20 b4 02 c0       	mov    edx,0xc002b420
c001386c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013870:	89 10                	mov    DWORD PTR [eax],edx
c0013872:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013876:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001387c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013880:	83 c0 0d             	add    eax,0xd
c0013883:	83 ec 04             	sub    esp,0x4
c0013886:	52                   	push   edx
c0013887:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001388b:	50                   	push   eax
c001388c:	e8 6b f9 ff ff       	call   c00131fc <Fs::standardiseFiles(char*, char const*, char const*)>
c0013891:	83 c4 10             	add    esp,0x10
c0013894:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013898:	8a 40 0d             	mov    al,BYTE PTR [eax+0xd]
c001389b:	8d 50 bf             	lea    edx,[eax-0x41]
c001389e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138a2:	88 90 0d 01 00 00    	mov    BYTE PTR [eax+0x10d],dl
c00138a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00138ac:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
c00138b0:	90                   	nop
c00138b1:	83 c4 0c             	add    esp,0xc
c00138b4:	c3                   	ret    
c00138b5:	90                   	nop

c00138b6 <Directory::open()>:
c00138b6:	53                   	push   ebx
c00138b7:	b8 0b 00 00 00       	mov    eax,0xb
c00138bc:	83 ec 08             	sub    esp,0x8
c00138bf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00138c3:	0f b6 93 0d 01 00 00 	movzx  edx,BYTE PTR [ebx+0x10d]
c00138ca:	80 fa 19             	cmp    dl,0x19
c00138cd:	77 3d                	ja     c001390c <Directory::open()+0x56>
c00138cf:	8b 14 95 60 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0ba0]
c00138d6:	85 d2                	test   edx,edx
c00138d8:	74 32                	je     c001390c <Directory::open()+0x56>
c00138da:	8b 92 70 01 00 00    	mov    edx,DWORD PTR [edx+0x170]
c00138e0:	85 d2                	test   edx,edx
c00138e2:	74 28                	je     c001390c <Directory::open()+0x56>
c00138e4:	b8 06 00 00 00       	mov    eax,0x6
c00138e9:	80 7b 0c 00          	cmp    BYTE PTR [ebx+0xc],0x0
c00138ed:	75 1d                	jne    c001390c <Directory::open()+0x56>
c00138ef:	8d 8b 10 01 00 00    	lea    ecx,[ebx+0x110]
c00138f5:	50                   	push   eax
c00138f6:	8b 02                	mov    eax,DWORD PTR [edx]
c00138f8:	51                   	push   ecx
c00138f9:	8d 4b 0d             	lea    ecx,[ebx+0xd]
c00138fc:	51                   	push   ecx
c00138fd:	52                   	push   edx
c00138fe:	ff 50 4c             	call   DWORD PTR [eax+0x4c]
c0013901:	83 c4 10             	add    esp,0x10
c0013904:	85 c0                	test   eax,eax
c0013906:	75 04                	jne    c001390c <Directory::open()+0x56>
c0013908:	c6 43 0c 01          	mov    BYTE PTR [ebx+0xc],0x1
c001390c:	83 c4 08             	add    esp,0x8
c001390f:	5b                   	pop    ebx
c0013910:	c3                   	ret    
c0013911:	90                   	nop

c0013912 <Directory::close()>:
c0013912:	53                   	push   ebx
c0013913:	b8 0b 00 00 00       	mov    eax,0xb
c0013918:	83 ec 08             	sub    esp,0x8
c001391b:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001391f:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013926:	80 fa 19             	cmp    dl,0x19
c0013929:	77 41                	ja     c001396c <Directory::close()+0x5a>
c001392b:	8b 1c 95 60 f4 02 c0 	mov    ebx,DWORD PTR [edx*4-0x3ffd0ba0]
c0013932:	85 db                	test   ebx,ebx
c0013934:	74 36                	je     c001396c <Directory::close()+0x5a>
c0013936:	83 bb 70 01 00 00 00 	cmp    DWORD PTR [ebx+0x170],0x0
c001393d:	74 2d                	je     c001396c <Directory::close()+0x5a>
c001393f:	b8 05 00 00 00       	mov    eax,0x5
c0013944:	80 79 0c 00          	cmp    BYTE PTR [ecx+0xc],0x0
c0013948:	74 22                	je     c001396c <Directory::close()+0x5a>
c001394a:	c6 41 0c 00          	mov    BYTE PTR [ecx+0xc],0x0
c001394e:	8b 04 95 60 f4 02 c0 	mov    eax,DWORD PTR [edx*4-0x3ffd0ba0]
c0013955:	8b 80 70 01 00 00    	mov    eax,DWORD PTR [eax+0x170]
c001395b:	53                   	push   ebx
c001395c:	53                   	push   ebx
c001395d:	8b 10                	mov    edx,DWORD PTR [eax]
c001395f:	ff b1 10 01 00 00    	push   DWORD PTR [ecx+0x110]
c0013965:	50                   	push   eax
c0013966:	ff 52 20             	call   DWORD PTR [edx+0x20]
c0013969:	83 c4 10             	add    esp,0x10
c001396c:	83 c4 08             	add    esp,0x8
c001396f:	5b                   	pop    ebx
c0013970:	c3                   	ret    
c0013971:	90                   	nop

c0013972 <Directory::unlink()>:
c0013972:	83 ec 0c             	sub    esp,0xc
c0013975:	b8 0b 00 00 00       	mov    eax,0xb
c001397a:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001397e:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013985:	80 f9 19             	cmp    cl,0x19
c0013988:	77 2f                	ja     c00139b9 <Directory::unlink()+0x47>
c001398a:	8b 0c 8d 60 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0ba0]
c0013991:	85 c9                	test   ecx,ecx
c0013993:	74 24                	je     c00139b9 <Directory::unlink()+0x47>
c0013995:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c001399b:	85 c9                	test   ecx,ecx
c001399d:	74 1a                	je     c00139b9 <Directory::unlink()+0x47>
c001399f:	b8 06 00 00 00       	mov    eax,0x6
c00139a4:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00139a8:	75 0f                	jne    c00139b9 <Directory::unlink()+0x47>
c00139aa:	83 c2 0d             	add    edx,0xd
c00139ad:	50                   	push   eax
c00139ae:	50                   	push   eax
c00139af:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139b1:	52                   	push   edx
c00139b2:	51                   	push   ecx
c00139b3:	ff 50 38             	call   DWORD PTR [eax+0x38]
c00139b6:	83 c4 10             	add    esp,0x10
c00139b9:	83 c4 0c             	add    esp,0xc
c00139bc:	c3                   	ret    
c00139bd:	90                   	nop

c00139be <Directory::rename(char const*)>:
c00139be:	83 ec 0c             	sub    esp,0xc
c00139c1:	b8 0b 00 00 00       	mov    eax,0xb
c00139c6:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00139ca:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c00139d1:	80 f9 19             	cmp    cl,0x19
c00139d4:	77 32                	ja     c0013a08 <Directory::rename(char const*)+0x4a>
c00139d6:	8b 0c 8d 60 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0ba0]
c00139dd:	85 c9                	test   ecx,ecx
c00139df:	74 27                	je     c0013a08 <Directory::rename(char const*)+0x4a>
c00139e1:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c00139e7:	85 c9                	test   ecx,ecx
c00139e9:	74 1d                	je     c0013a08 <Directory::rename(char const*)+0x4a>
c00139eb:	b8 06 00 00 00       	mov    eax,0x6
c00139f0:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c00139f4:	75 12                	jne    c0013a08 <Directory::rename(char const*)+0x4a>
c00139f6:	83 c2 0d             	add    edx,0xd
c00139f9:	50                   	push   eax
c00139fa:	8b 01                	mov    eax,DWORD PTR [ecx]
c00139fc:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013a00:	52                   	push   edx
c0013a01:	51                   	push   ecx
c0013a02:	ff 50 40             	call   DWORD PTR [eax+0x40]
c0013a05:	83 c4 10             	add    esp,0x10
c0013a08:	83 c4 0c             	add    esp,0xc
c0013a0b:	c3                   	ret    

c0013a0c <Directory::exists()>:
c0013a0c:	83 ec 0c             	sub    esp,0xc
c0013a0f:	31 c0                	xor    eax,eax
c0013a11:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013a15:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013a1c:	80 f9 19             	cmp    cl,0x19
c0013a1f:	77 24                	ja     c0013a45 <Directory::exists()+0x39>
c0013a21:	8b 0c 8d 60 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0ba0]
c0013a28:	85 c9                	test   ecx,ecx
c0013a2a:	74 19                	je     c0013a45 <Directory::exists()+0x39>
c0013a2c:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013a32:	85 c9                	test   ecx,ecx
c0013a34:	74 0f                	je     c0013a45 <Directory::exists()+0x39>
c0013a36:	83 c2 0d             	add    edx,0xd
c0013a39:	50                   	push   eax
c0013a3a:	50                   	push   eax
c0013a3b:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a3d:	52                   	push   edx
c0013a3e:	51                   	push   ecx
c0013a3f:	ff 50 44             	call   DWORD PTR [eax+0x44]
c0013a42:	83 c4 10             	add    esp,0x10
c0013a45:	83 c4 0c             	add    esp,0xc
c0013a48:	c3                   	ret    
c0013a49:	90                   	nop

c0013a4a <Directory::read(dirent*)>:
c0013a4a:	83 ec 1c             	sub    esp,0x1c
c0013a4d:	b8 0b 00 00 00       	mov    eax,0xb
c0013a52:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c0013a56:	0f b6 91 0d 01 00 00 	movzx  edx,BYTE PTR [ecx+0x10d]
c0013a5d:	80 fa 19             	cmp    dl,0x19
c0013a60:	77 30                	ja     c0013a92 <Directory::read(dirent*)+0x48>
c0013a62:	8b 14 95 60 f4 02 c0 	mov    edx,DWORD PTR [edx*4-0x3ffd0ba0]
c0013a69:	85 d2                	test   edx,edx
c0013a6b:	74 25                	je     c0013a92 <Directory::read(dirent*)+0x48>
c0013a6d:	83 ba 70 01 00 00 00 	cmp    DWORD PTR [edx+0x170],0x0
c0013a74:	74 1c                	je     c0013a92 <Directory::read(dirent*)+0x48>
c0013a76:	83 ec 0c             	sub    esp,0xc
c0013a79:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013a7b:	8d 54 24 18          	lea    edx,[esp+0x18]
c0013a7f:	52                   	push   edx
c0013a80:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0013a84:	6a 00                	push   0x0
c0013a86:	68 10 01 00 00       	push   0x110
c0013a8b:	51                   	push   ecx
c0013a8c:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0013a8f:	83 c4 20             	add    esp,0x20
c0013a92:	83 c4 1c             	add    esp,0x1c
c0013a95:	c3                   	ret    

c0013a96 <Directory::create()>:
c0013a96:	83 ec 0c             	sub    esp,0xc
c0013a99:	b8 0b 00 00 00       	mov    eax,0xb
c0013a9e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0013aa2:	0f b6 8a 0d 01 00 00 	movzx  ecx,BYTE PTR [edx+0x10d]
c0013aa9:	80 f9 19             	cmp    cl,0x19
c0013aac:	77 2f                	ja     c0013add <Directory::create()+0x47>
c0013aae:	8b 0c 8d 60 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0ba0]
c0013ab5:	85 c9                	test   ecx,ecx
c0013ab7:	74 24                	je     c0013add <Directory::create()+0x47>
c0013ab9:	8b 89 70 01 00 00    	mov    ecx,DWORD PTR [ecx+0x170]
c0013abf:	85 c9                	test   ecx,ecx
c0013ac1:	74 1a                	je     c0013add <Directory::create()+0x47>
c0013ac3:	b8 06 00 00 00       	mov    eax,0x6
c0013ac8:	80 7a 0c 00          	cmp    BYTE PTR [edx+0xc],0x0
c0013acc:	75 0f                	jne    c0013add <Directory::create()+0x47>
c0013ace:	83 c2 0d             	add    edx,0xd
c0013ad1:	50                   	push   eax
c0013ad2:	50                   	push   eax
c0013ad3:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ad5:	52                   	push   edx
c0013ad6:	51                   	push   ecx
c0013ad7:	ff 50 3c             	call   DWORD PTR [eax+0x3c]
c0013ada:	83 c4 10             	add    esp,0x10
c0013add:	83 c4 0c             	add    esp,0xc
c0013ae0:	c3                   	ret    
c0013ae1:	90                   	nop

c0013ae2 <Filesystem::chfatattr(char const*, unsigned char, unsigned char)>:
c0013ae2:	b8 0a 00 00 00       	mov    eax,0xa
c0013ae7:	c3                   	ret    

c0013ae8 <Bus::Bus(char const*)>:
c0013ae8:	83 ec 0c             	sub    esp,0xc
c0013aeb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013aef:	83 ec 08             	sub    esp,0x8
c0013af2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013af6:	50                   	push   eax
c0013af7:	e8 5e 09 00 00       	call   c001445a <Device::Device(char const*)>
c0013afc:	83 c4 10             	add    esp,0x10
c0013aff:	ba 3c b4 02 c0       	mov    edx,0xc002b43c
c0013b04:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b08:	89 10                	mov    DWORD PTR [eax],edx
c0013b0a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b0e:	c7 80 10 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x110],0x0
c0013b18:	90                   	nop
c0013b19:	83 c4 0c             	add    esp,0xc
c0013b1c:	c3                   	ret    
c0013b1d:	90                   	nop

c0013b1e <Bus::~Bus()>:
c0013b1e:	83 ec 0c             	sub    esp,0xc
c0013b21:	ba 3c b4 02 c0       	mov    edx,0xc002b43c
c0013b26:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b2a:	89 10                	mov    DWORD PTR [eax],edx
c0013b2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b30:	83 ec 0c             	sub    esp,0xc
c0013b33:	50                   	push   eax
c0013b34:	e8 15 06 00 00       	call   c001414e <Device::~Device()>
c0013b39:	83 c4 10             	add    esp,0x10
c0013b3c:	90                   	nop
c0013b3d:	83 c4 0c             	add    esp,0xc
c0013b40:	c3                   	ret    
c0013b41:	90                   	nop

c0013b42 <Bus::~Bus()>:
c0013b42:	83 ec 0c             	sub    esp,0xc
c0013b45:	83 ec 0c             	sub    esp,0xc
c0013b48:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b4c:	e8 cd ff ff ff       	call   c0013b1e <Bus::~Bus()>
c0013b51:	83 c4 10             	add    esp,0x10
c0013b54:	83 ec 08             	sub    esp,0x8
c0013b57:	68 58 01 00 00       	push   0x158
c0013b5c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b60:	e8 02 f2 ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0013b65:	83 c4 10             	add    esp,0x10
c0013b68:	83 c4 0c             	add    esp,0xc
c0013b6b:	c3                   	ret    

c0013b6c <Buzzer::Buzzer(char const*)>:
c0013b6c:	83 ec 0c             	sub    esp,0xc
c0013b6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b73:	83 ec 08             	sub    esp,0x8
c0013b76:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013b7a:	50                   	push   eax
c0013b7b:	e8 da 08 00 00       	call   c001445a <Device::Device(char const*)>
c0013b80:	83 c4 10             	add    esp,0x10
c0013b83:	ba 68 b4 02 c0       	mov    edx,0xc002b468
c0013b88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b8c:	89 10                	mov    DWORD PTR [eax],edx
c0013b8e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013b92:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0013b9c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013ba0:	c7 80 10 01 00 00 0c 00 00 00 	mov    DWORD PTR [eax+0x110],0xc
c0013baa:	90                   	nop
c0013bab:	83 c4 0c             	add    esp,0xc
c0013bae:	c3                   	ret    
c0013baf:	90                   	nop

c0013bb0 <Buzzer::~Buzzer()>:
c0013bb0:	83 ec 0c             	sub    esp,0xc
c0013bb3:	ba 68 b4 02 c0       	mov    edx,0xc002b468
c0013bb8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bbc:	89 10                	mov    DWORD PTR [eax],edx
c0013bbe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013bc2:	83 ec 0c             	sub    esp,0xc
c0013bc5:	50                   	push   eax
c0013bc6:	e8 83 05 00 00       	call   c001414e <Device::~Device()>
c0013bcb:	83 c4 10             	add    esp,0x10
c0013bce:	90                   	nop
c0013bcf:	83 c4 0c             	add    esp,0xc
c0013bd2:	c3                   	ret    
c0013bd3:	90                   	nop

c0013bd4 <Buzzer::~Buzzer()>:
c0013bd4:	83 ec 0c             	sub    esp,0xc
c0013bd7:	83 ec 0c             	sub    esp,0xc
c0013bda:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bde:	e8 cd ff ff ff       	call   c0013bb0 <Buzzer::~Buzzer()>
c0013be3:	83 c4 10             	add    esp,0x10
c0013be6:	83 ec 08             	sub    esp,0x8
c0013be9:	68 5c 01 00 00       	push   0x15c
c0013bee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013bf2:	e8 70 f1 ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0013bf7:	83 c4 10             	add    esp,0x10
c0013bfa:	83 c4 0c             	add    esp,0xc
c0013bfd:	c3                   	ret    

c0013bfe <Buzzer::stop()>:
c0013bfe:	83 ec 14             	sub    esp,0x14
c0013c01:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0013c05:	8b 10                	mov    edx,DWORD PTR [eax]
c0013c07:	6a 00                	push   0x0
c0013c09:	50                   	push   eax
c0013c0a:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013c0d:	83 c4 1c             	add    esp,0x1c
c0013c10:	c3                   	ret    

c0013c11 <beepThread(void*)>:
c0013c11:	53                   	push   ebx
c0013c12:	83 ec 08             	sub    esp,0x8
c0013c15:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0013c1a:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0013c1e:	48                   	dec    eax
c0013c1f:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0013c24:	75 01                	jne    c0013c27 <beepThread(void*)+0x16>
c0013c26:	fb                   	sti    
c0013c27:	50                   	push   eax
c0013c28:	50                   	push   eax
c0013c29:	b8 40 42 0f 00       	mov    eax,0xf4240
c0013c2e:	f7 ab 58 01 00 00    	imul   DWORD PTR [ebx+0x158]
c0013c34:	52                   	push   edx
c0013c35:	50                   	push   eax
c0013c36:	e8 58 ab 00 00       	call   c001e793 <nanoSleep(unsigned long long)>
c0013c3b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013c3e:	e8 bb ff ff ff       	call   c0013bfe <Buzzer::stop()>
c0013c43:	c7 44 24 20 04 00 00 00 	mov    DWORD PTR [esp+0x20],0x4
c0013c4b:	83 c4 18             	add    esp,0x18
c0013c4e:	5b                   	pop    ebx
c0013c4f:	e9 3b aa 00 00       	jmp    c001e68f <blockTask(TaskState)>

c0013c54 <Buzzer::beep(int, int, bool)>:
c0013c54:	57                   	push   edi
c0013c55:	56                   	push   esi
c0013c56:	53                   	push   ebx
c0013c57:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013c5b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0013c5f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0013c63:	52                   	push   edx
c0013c64:	52                   	push   edx
c0013c65:	8b 06                	mov    eax,DWORD PTR [esi]
c0013c67:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013c6b:	56                   	push   esi
c0013c6c:	ff 50 24             	call   DWORD PTR [eax+0x24]
c0013c6f:	83 c4 10             	add    esp,0x10
c0013c72:	89 f8                	mov    eax,edi
c0013c74:	84 c0                	test   al,al
c0013c76:	74 1f                	je     c0013c97 <Buzzer::beep(int, int, bool)+0x43>
c0013c78:	50                   	push   eax
c0013c79:	50                   	push   eax
c0013c7a:	69 c3 40 42 0f 00    	imul   eax,ebx,0xf4240
c0013c80:	99                   	cdq    
c0013c81:	52                   	push   edx
c0013c82:	50                   	push   eax
c0013c83:	e8 0b ab 00 00       	call   c001e793 <nanoSleep(unsigned long long)>
c0013c88:	83 c4 10             	add    esp,0x10
c0013c8b:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013c8f:	5b                   	pop    ebx
c0013c90:	5e                   	pop    esi
c0013c91:	5f                   	pop    edi
c0013c92:	e9 67 ff ff ff       	jmp    c0013bfe <Buzzer::stop()>
c0013c97:	89 9e 58 01 00 00    	mov    DWORD PTR [esi+0x158],ebx
c0013c9d:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0013ca2:	c7 44 24 1c e6 00 00 00 	mov    DWORD PTR [esp+0x1c],0xe6
c0013caa:	89 74 24 18          	mov    DWORD PTR [esp+0x18],esi
c0013cae:	c7 44 24 14 11 3c 01 c0 	mov    DWORD PTR [esp+0x14],0xc0013c11
c0013cb6:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0013cba:	5b                   	pop    ebx
c0013cbb:	5e                   	pop    esi
c0013cbc:	5f                   	pop    edi
c0013cbd:	e9 8a a5 00 00       	jmp    c001e24c <Process::createThread(void (*)(void*), void*, int)>

c0013cc2 <User::loadClockSettings(int)>:
c0013cc2:	53                   	push   ebx
c0013cc3:	83 ec 14             	sub    esp,0x14
c0013cc6:	68 14 01 00 00       	push   0x114
c0013ccb:	e8 d8 bb ff ff       	call   c000f8a8 <malloc>
c0013cd0:	83 c4 0c             	add    esp,0xc
c0013cd3:	89 c3                	mov    ebx,eax
c0013cd5:	ff 35 b0 23 03 c0    	push   DWORD PTR ds:0xc00323b0
c0013cdb:	68 90 b4 02 c0       	push   0xc002b490
c0013ce0:	50                   	push   eax
c0013ce1:	e8 c0 f6 ff ff       	call   c00133a6 <File::File(char const*, Process*)>
c0013ce6:	58                   	pop    eax
c0013ce7:	5a                   	pop    edx
c0013ce8:	6a 01                	push   0x1
c0013cea:	53                   	push   ebx
c0013ceb:	e8 1a f7 ff ff       	call   c001340a <File::open(FileOpenMode)>
c0013cf0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0013cf3:	e8 70 f7 ff ff       	call   c0013468 <File::close()>
c0013cf8:	83 c4 10             	add    esp,0x10
c0013cfb:	85 db                	test   ebx,ebx
c0013cfd:	74 0f                	je     c0013d0e <User::loadClockSettings(int)+0x4c>
c0013cff:	8b 03                	mov    eax,DWORD PTR [ebx]
c0013d01:	89 5c 24 10          	mov    DWORD PTR [esp+0x10],ebx
c0013d05:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0013d08:	83 c4 08             	add    esp,0x8
c0013d0b:	5b                   	pop    ebx
c0013d0c:	ff e0                	jmp    eax
c0013d0e:	83 c4 08             	add    esp,0x8
c0013d11:	5b                   	pop    ebx
c0013d12:	c3                   	ret    
c0013d13:	90                   	nop

c0013d14 <Clock::Clock(char const*)>:
c0013d14:	83 ec 0c             	sub    esp,0xc
c0013d17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d1b:	83 ec 08             	sub    esp,0x8
c0013d1e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d22:	50                   	push   eax
c0013d23:	e8 32 07 00 00       	call   c001445a <Device::Device(char const*)>
c0013d28:	83 c4 10             	add    esp,0x10
c0013d2b:	ba b8 b4 02 c0       	mov    edx,0xc002b4b8
c0013d30:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d34:	89 10                	mov    DWORD PTR [eax],edx
c0013d36:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d3a:	c7 80 10 01 00 00 01 00 00 00 	mov    DWORD PTR [eax+0x110],0x1
c0013d44:	90                   	nop
c0013d45:	83 c4 0c             	add    esp,0xc
c0013d48:	c3                   	ret    
c0013d49:	90                   	nop

c0013d4a <Clock::~Clock()>:
c0013d4a:	83 ec 0c             	sub    esp,0xc
c0013d4d:	ba b8 b4 02 c0       	mov    edx,0xc002b4b8
c0013d52:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d56:	89 10                	mov    DWORD PTR [eax],edx
c0013d58:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0013d5c:	83 ec 0c             	sub    esp,0xc
c0013d5f:	50                   	push   eax
c0013d60:	e8 e9 03 00 00       	call   c001414e <Device::~Device()>
c0013d65:	83 c4 10             	add    esp,0x10
c0013d68:	90                   	nop
c0013d69:	83 c4 0c             	add    esp,0xc
c0013d6c:	c3                   	ret    
c0013d6d:	90                   	nop

c0013d6e <Clock::~Clock()>:
c0013d6e:	83 ec 0c             	sub    esp,0xc
c0013d71:	83 ec 0c             	sub    esp,0xc
c0013d74:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d78:	e8 cd ff ff ff       	call   c0013d4a <Clock::~Clock()>
c0013d7d:	83 c4 10             	add    esp,0x10
c0013d80:	83 ec 08             	sub    esp,0x8
c0013d83:	68 58 01 00 00       	push   0x158
c0013d88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0013d8c:	e8 d6 ef ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0013d91:	83 c4 10             	add    esp,0x10
c0013d94:	83 c4 0c             	add    esp,0xc
c0013d97:	c3                   	ret    

c0013d98 <Clock::timeInSecondsLocal()>:
c0013d98:	53                   	push   ebx
c0013d99:	83 ec 14             	sub    esp,0x14
c0013d9c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0013da0:	8b 10                	mov    edx,DWORD PTR [eax]
c0013da2:	50                   	push   eax
c0013da3:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0013da6:	0f b6 0d dc ef 02 c0 	movzx  ecx,BYTE PTR ds:0xc002efdc
c0013dad:	03 0d e0 ef 02 c0    	add    ecx,DWORD PTR ds:0xc002efe0
c0013db3:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013db9:	89 cb                	mov    ebx,ecx
c0013dbb:	c1 fb 1f             	sar    ebx,0x1f
c0013dbe:	01 c8                	add    eax,ecx
c0013dc0:	11 da                	adc    edx,ebx
c0013dc2:	83 c4 10             	add    esp,0x10
c0013dc5:	31 c9                	xor    ecx,ecx
c0013dc7:	80 3d dd ef 02 c0 00 	cmp    BYTE PTR ds:0xc002efdd,0x0
c0013dce:	74 05                	je     c0013dd5 <Clock::timeInSecondsLocal()+0x3d>
c0013dd0:	b9 08 07 00 00       	mov    ecx,0x708
c0013dd5:	31 db                	xor    ebx,ebx
c0013dd7:	01 c8                	add    eax,ecx
c0013dd9:	11 da                	adc    edx,ebx
c0013ddb:	83 c4 08             	add    esp,0x8
c0013dde:	5b                   	pop    ebx
c0013ddf:	c3                   	ret    

c0013de0 <Clock::setTimeInSecondsLocal(unsigned long long)>:
c0013de0:	57                   	push   edi
c0013de1:	56                   	push   esi
c0013de2:	53                   	push   ebx
c0013de3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0013de7:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0013deb:	8b 01                	mov    eax,DWORD PTR [ecx]
c0013ded:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c0013df1:	8b 58 2c             	mov    ebx,DWORD PTR [eax+0x2c]
c0013df4:	0f b6 05 dc ef 02 c0 	movzx  eax,BYTE PTR ds:0xc002efdc
c0013dfb:	03 05 e0 ef 02 c0    	add    eax,DWORD PTR ds:0xc002efe0
c0013e01:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
c0013e07:	99                   	cdq    
c0013e08:	29 c6                	sub    esi,eax
c0013e0a:	19 d7                	sbb    edi,edx
c0013e0c:	89 f0                	mov    eax,esi
c0013e0e:	89 fa                	mov    edx,edi
c0013e10:	31 f6                	xor    esi,esi
c0013e12:	80 3d dd ef 02 c0 00 	cmp    BYTE PTR ds:0xc002efdd,0x0
c0013e19:	74 05                	je     c0013e20 <Clock::setTimeInSecondsLocal(unsigned long long)+0x40>
c0013e1b:	be 08 07 00 00       	mov    esi,0x708
c0013e20:	31 ff                	xor    edi,edi
c0013e22:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c0013e26:	29 f0                	sub    eax,esi
c0013e28:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013e2c:	19 fa                	sbb    edx,edi
c0013e2e:	89 d8                	mov    eax,ebx
c0013e30:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013e34:	5b                   	pop    ebx
c0013e35:	5e                   	pop    esi
c0013e36:	5f                   	pop    edi
c0013e37:	ff e0                	jmp    eax

c0013e39 <datetimeToSeconds(datetime_t)>:
c0013e39:	55                   	push   ebp
c0013e3a:	57                   	push   edi
c0013e3b:	56                   	push   esi
c0013e3c:	53                   	push   ebx
c0013e3d:	83 ec 14             	sub    esp,0x14
c0013e40:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0013e44:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0013e48:	89 d3                	mov    ebx,edx
c0013e4a:	0f b6 c6             	movzx  eax,dh
c0013e4d:	c1 eb 10             	shr    ebx,0x10
c0013e50:	48                   	dec    eax
c0013e51:	66 81 eb 6c 07       	sub    bx,0x76c
c0013e56:	88 44 24 07          	mov    BYTE PTR [esp+0x7],al
c0013e5a:	0f b6 f5             	movzx  esi,ch
c0013e5d:	89 cf                	mov    edi,ecx
c0013e5f:	6b f6 3c             	imul   esi,esi,0x3c
c0013e62:	c1 ef 10             	shr    edi,0x10
c0013e65:	0f b6 c9             	movzx  ecx,cl
c0013e68:	89 f8                	mov    eax,edi
c0013e6a:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013e70:	0f b6 f8             	movzx  edi,al
c0013e73:	0f b6 d2             	movzx  edx,dl
c0013e76:	01 fe                	add    esi,edi
c0013e78:	01 f1                	add    ecx,esi
c0013e7a:	0f b7 f3             	movzx  esi,bx
c0013e7d:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0013e81:	c1 f9 1f             	sar    ecx,0x1f
c0013e84:	80 7c 24 07 01       	cmp    BYTE PTR [esp+0x7],0x1
c0013e89:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0013e8d:	0f b6 4c 24 07       	movzx  ecx,BYTE PTR [esp+0x7]
c0013e92:	8b 0c 8d 00 b5 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd4b00]
c0013e99:	8d 4c 0a ff          	lea    ecx,[edx+ecx*1-0x1]
c0013e9d:	76 29                	jbe    c0013ec8 <datetimeToSeconds(datetime_t)+0x8f>
c0013e9f:	f6 c3 03             	test   bl,0x3
c0013ea2:	75 24                	jne    c0013ec8 <datetimeToSeconds(datetime_t)+0x8f>
c0013ea4:	31 d2                	xor    edx,edx
c0013ea6:	bf 64 00 00 00       	mov    edi,0x64
c0013eab:	89 d8                	mov    eax,ebx
c0013ead:	66 f7 f7             	div    di
c0013eb0:	66 85 d2             	test   dx,dx
c0013eb3:	75 12                	jne    c0013ec7 <datetimeToSeconds(datetime_t)+0x8e>
c0013eb5:	8d 86 6c 07 00 00    	lea    eax,[esi+0x76c]
c0013ebb:	bf 90 01 00 00       	mov    edi,0x190
c0013ec0:	99                   	cdq    
c0013ec1:	f7 ff                	idiv   edi
c0013ec3:	85 d2                	test   edx,edx
c0013ec5:	75 01                	jne    c0013ec8 <datetimeToSeconds(datetime_t)+0x8f>
c0013ec7:	41                   	inc    ecx
c0013ec8:	66 83 fb 46          	cmp    bx,0x46
c0013ecc:	76 45                	jbe    c0013f13 <datetimeToSeconds(datetime_t)+0xda>
c0013ece:	bb 46 00 00 00       	mov    ebx,0x46
c0013ed3:	bf 64 00 00 00       	mov    edi,0x64
c0013ed8:	bd 90 01 00 00       	mov    ebp,0x190
c0013edd:	b8 6d 01 00 00       	mov    eax,0x16d
c0013ee2:	f6 c3 03             	test   bl,0x3
c0013ee5:	75 23                	jne    c0013f0a <datetimeToSeconds(datetime_t)+0xd1>
c0013ee7:	89 d8                	mov    eax,ebx
c0013ee9:	99                   	cdq    
c0013eea:	f7 ff                	idiv   edi
c0013eec:	b8 6e 01 00 00       	mov    eax,0x16e
c0013ef1:	85 d2                	test   edx,edx
c0013ef3:	75 15                	jne    c0013f0a <datetimeToSeconds(datetime_t)+0xd1>
c0013ef5:	8d 83 6c 07 00 00    	lea    eax,[ebx+0x76c]
c0013efb:	99                   	cdq    
c0013efc:	f7 fd                	idiv   ebp
c0013efe:	83 fa 01             	cmp    edx,0x1
c0013f01:	19 c0                	sbb    eax,eax
c0013f03:	f7 d0                	not    eax
c0013f05:	05 6e 01 00 00       	add    eax,0x16e
c0013f0a:	01 c1                	add    ecx,eax
c0013f0c:	43                   	inc    ebx
c0013f0d:	39 f3                	cmp    ebx,esi
c0013f0f:	7c cc                	jl     c0013edd <datetimeToSeconds(datetime_t)+0xa4>
c0013f11:	eb 35                	jmp    c0013f48 <datetimeToSeconds(datetime_t)+0x10f>
c0013f13:	74 33                	je     c0013f48 <datetimeToSeconds(datetime_t)+0x10f>
c0013f15:	b8 45 00 00 00       	mov    eax,0x45
c0013f1a:	89 c2                	mov    edx,eax
c0013f1c:	83 e2 03             	and    edx,0x3
c0013f1f:	39 f0                	cmp    eax,esi
c0013f21:	7e 0f                	jle    c0013f32 <datetimeToSeconds(datetime_t)+0xf9>
c0013f23:	83 fa 01             	cmp    edx,0x1
c0013f26:	19 d2                	sbb    edx,edx
c0013f28:	48                   	dec    eax
c0013f29:	8d 8c 11 93 fe ff ff 	lea    ecx,[ecx+edx*1-0x16d]
c0013f30:	eb e8                	jmp    c0013f1a <datetimeToSeconds(datetime_t)+0xe1>
c0013f32:	b8 6d 01 00 00       	mov    eax,0x16d
c0013f37:	85 d2                	test   edx,edx
c0013f39:	75 0b                	jne    c0013f46 <datetimeToSeconds(datetime_t)+0x10d>
c0013f3b:	66 83 fb 01          	cmp    bx,0x1
c0013f3f:	19 c0                	sbb    eax,eax
c0013f41:	05 6e 01 00 00       	add    eax,0x16e
c0013f46:	29 c1                	sub    ecx,eax
c0013f48:	b8 80 51 01 00       	mov    eax,0x15180
c0013f4d:	f7 e9                	imul   ecx
c0013f4f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0013f53:	13 54 24 0c          	adc    edx,DWORD PTR [esp+0xc]
c0013f57:	83 c4 14             	add    esp,0x14
c0013f5a:	5b                   	pop    ebx
c0013f5b:	5e                   	pop    esi
c0013f5c:	5f                   	pop    edi
c0013f5d:	5d                   	pop    ebp
c0013f5e:	c3                   	ret    
c0013f5f:	90                   	nop

c0013f60 <Clock::setTimeInDatetimeLocal(datetime_t)>:
c0013f60:	57                   	push   edi
c0013f61:	56                   	push   esi
c0013f62:	53                   	push   ebx
c0013f63:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0013f67:	8b 06                	mov    eax,DWORD PTR [esi]
c0013f69:	8b 78 2c             	mov    edi,DWORD PTR [eax+0x2c]
c0013f6c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f70:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0013f74:	e8 c0 fe ff ff       	call   c0013e39 <datetimeToSeconds(datetime_t)>
c0013f79:	59                   	pop    ecx
c0013f7a:	0f b6 0d dc ef 02 c0 	movzx  ecx,BYTE PTR ds:0xc002efdc
c0013f81:	5b                   	pop    ebx
c0013f82:	03 0d e0 ef 02 c0    	add    ecx,DWORD PTR ds:0xc002efe0
c0013f88:	69 c9 10 0e 00 00    	imul   ecx,ecx,0xe10
c0013f8e:	89 cb                	mov    ebx,ecx
c0013f90:	c1 fb 1f             	sar    ebx,0x1f
c0013f93:	29 c8                	sub    eax,ecx
c0013f95:	19 da                	sbb    edx,ebx
c0013f97:	31 c9                	xor    ecx,ecx
c0013f99:	80 3d dd ef 02 c0 00 	cmp    BYTE PTR ds:0xc002efdd,0x0
c0013fa0:	74 05                	je     c0013fa7 <Clock::setTimeInDatetimeLocal(datetime_t)+0x47>
c0013fa2:	b9 08 07 00 00       	mov    ecx,0x708
c0013fa7:	31 db                	xor    ebx,ebx
c0013fa9:	89 74 24 10          	mov    DWORD PTR [esp+0x10],esi
c0013fad:	29 c8                	sub    eax,ecx
c0013faf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0013fb3:	19 da                	sbb    edx,ebx
c0013fb5:	89 f8                	mov    eax,edi
c0013fb7:	89 54 24 18          	mov    DWORD PTR [esp+0x18],edx
c0013fbb:	5b                   	pop    ebx
c0013fbc:	5e                   	pop    esi
c0013fbd:	5f                   	pop    edi
c0013fbe:	ff e0                	jmp    eax

c0013fc0 <secondsToDatetime(unsigned long long)>:
c0013fc0:	55                   	push   ebp
c0013fc1:	57                   	push   edi
c0013fc2:	56                   	push   esi
c0013fc3:	53                   	push   ebx
c0013fc4:	83 ec 1c             	sub    esp,0x1c
c0013fc7:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0013fcb:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0013fcf:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0013fd3:	6a 00                	push   0x0
c0013fd5:	68 80 51 01 00       	push   0x15180
c0013fda:	55                   	push   ebp
c0013fdb:	57                   	push   edi
c0013fdc:	e8 e3 31 01 00       	call   c00271c4 <__udivdi3>
c0013fe1:	83 c4 10             	add    esp,0x10
c0013fe4:	8d 98 6c fa 0a 00    	lea    ebx,[eax+0xafa6c]
c0013fea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0013fee:	6a 00                	push   0x0
c0013ff0:	68 80 51 01 00       	push   0x15180
c0013ff5:	55                   	push   ebp
c0013ff6:	57                   	push   edi
c0013ff7:	bf 10 0e 00 00       	mov    edi,0xe10
c0013ffc:	e8 c3 32 01 00       	call   c00272c4 <__umoddi3>
c0014001:	83 c4 10             	add    esp,0x10
c0014004:	99                   	cdq    
c0014005:	f7 ff                	idiv   edi
c0014007:	bf 3c 00 00 00       	mov    edi,0x3c
c001400c:	88 46 04             	mov    BYTE PTR [esi+0x4],al
c001400f:	89 d0                	mov    eax,edx
c0014011:	99                   	cdq    
c0014012:	f7 ff                	idiv   edi
c0014014:	85 db                	test   ebx,ebx
c0014016:	88 46 05             	mov    BYTE PTR [esi+0x5],al
c0014019:	88 56 06             	mov    BYTE PTR [esi+0x6],dl
c001401c:	79 11                	jns    c001402f <secondsToDatetime(unsigned long long)+0x6f>
c001401e:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0014022:	8d 81 bc bf 08 00    	lea    eax,[ecx+0x8bfbc]
c0014028:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c001402d:	eb 07                	jmp    c0014036 <secondsToDatetime(unsigned long long)+0x76>
c001402f:	b9 b1 3a 02 00       	mov    ecx,0x23ab1
c0014034:	89 d8                	mov    eax,ebx
c0014036:	bf b4 05 00 00       	mov    edi,0x5b4
c001403b:	99                   	cdq    
c001403c:	bd b0 3a 02 00       	mov    ebp,0x23ab0
c0014041:	f7 f9                	idiv   ecx
c0014043:	b9 ac 8e 00 00       	mov    ecx,0x8eac
c0014048:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001404c:	31 d2                	xor    edx,edx
c001404e:	69 44 24 08 4f c5 fd ff 	imul   eax,DWORD PTR [esp+0x8],0xfffdc54f
c0014056:	01 c3                	add    ebx,eax
c0014058:	89 d8                	mov    eax,ebx
c001405a:	f7 f1                	div    ecx
c001405c:	31 d2                	xor    edx,edx
c001405e:	8d 0c 18             	lea    ecx,[eax+ebx*1]
c0014061:	89 d8                	mov    eax,ebx
c0014063:	f7 f7                	div    edi
c0014065:	31 d2                	xor    edx,edx
c0014067:	29 c1                	sub    ecx,eax
c0014069:	89 d8                	mov    eax,ebx
c001406b:	f7 f5                	div    ebp
c001406d:	bd 6d 01 00 00       	mov    ebp,0x16d
c0014072:	29 c1                	sub    ecx,eax
c0014074:	31 d2                	xor    edx,edx
c0014076:	89 c8                	mov    eax,ecx
c0014078:	f7 f5                	div    ebp
c001407a:	bd 94 8e 00 00       	mov    ebp,0x8e94
c001407f:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0014083:	31 d2                	xor    edx,edx
c0014085:	89 c8                	mov    eax,ecx
c0014087:	f7 f5                	div    ebp
c0014089:	31 d2                	xor    edx,edx
c001408b:	01 c3                	add    ebx,eax
c001408d:	89 c8                	mov    eax,ecx
c001408f:	f7 f7                	div    edi
c0014091:	bf 99 00 00 00       	mov    edi,0x99
c0014096:	29 c3                	sub    ebx,eax
c0014098:	31 d2                	xor    edx,edx
c001409a:	69 44 24 0c 6d 01 00 00 	imul   eax,DWORD PTR [esp+0xc],0x16d
c00140a2:	29 c3                	sub    ebx,eax
c00140a4:	8d 6b 01             	lea    ebp,[ebx+0x1]
c00140a7:	8d 0c 9b             	lea    ecx,[ebx+ebx*4]
c00140aa:	bb 05 00 00 00       	mov    ebx,0x5
c00140af:	83 c1 02             	add    ecx,0x2
c00140b2:	89 c8                	mov    eax,ecx
c00140b4:	f7 f7                	div    edi
c00140b6:	31 d2                	xor    edx,edx
c00140b8:	89 c7                	mov    edi,eax
c00140ba:	69 c0 99 00 00 00    	imul   eax,eax,0x99
c00140c0:	83 c0 02             	add    eax,0x2
c00140c3:	f7 f3                	div    ebx
c00140c5:	89 eb                	mov    ebx,ebp
c00140c7:	29 c3                	sub    ebx,eax
c00140c9:	81 f9 fa 05 00 00    	cmp    ecx,0x5fa
c00140cf:	88 1e                	mov    BYTE PTR [esi],bl
c00140d1:	19 c0                	sbb    eax,eax
c00140d3:	31 d2                	xor    edx,edx
c00140d5:	83 e0 0c             	and    eax,0xc
c00140d8:	8d 4c 38 f6          	lea    ecx,[eax+edi*1-0xa]
c00140dc:	69 44 24 08 90 01 00 00 	imul   eax,DWORD PTR [esp+0x8],0x190
c00140e4:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c00140e8:	83 f9 01             	cmp    ecx,0x1
c00140eb:	0f 96 c2             	setbe  dl
c00140ee:	41                   	inc    ecx
c00140ef:	01 d0                	add    eax,edx
c00140f1:	88 4e 01             	mov    BYTE PTR [esi+0x1],cl
c00140f4:	66 89 46 02          	mov    WORD PTR [esi+0x2],ax
c00140f8:	83 c4 1c             	add    esp,0x1c
c00140fb:	89 f0                	mov    eax,esi
c00140fd:	5b                   	pop    ebx
c00140fe:	5e                   	pop    esi
c00140ff:	5f                   	pop    edi
c0014100:	5d                   	pop    ebp
c0014101:	c2 04 00             	ret    0x4

c0014104 <Clock::timeInDatetimeLocal()>:
c0014104:	53                   	push   ebx
c0014105:	83 ec 14             	sub    esp,0x14
c0014108:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001410c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0014110:	e8 83 fc ff ff       	call   c0013d98 <Clock::timeInSecondsLocal()>
c0014115:	83 c4 0c             	add    esp,0xc
c0014118:	52                   	push   edx
c0014119:	50                   	push   eax
c001411a:	53                   	push   ebx
c001411b:	e8 a0 fe ff ff       	call   c0013fc0 <secondsToDatetime(unsigned long long)>
c0014120:	89 d8                	mov    eax,ebx
c0014122:	83 c4 14             	add    esp,0x14
c0014125:	5b                   	pop    ebx
c0014126:	c2 04 00             	ret    0x4
c0014129:	90                   	nop

c001412a <Device::hibernate()>:
c001412a:	c3                   	ret    
c001412b:	90                   	nop

c001412c <Device::wake()>:
c001412c:	c3                   	ret    
c001412d:	90                   	nop

c001412e <Device::detect()>:
c001412e:	c3                   	ret    
c001412f:	90                   	nop

c0014130 <Device::disableLegacy()>:
c0014130:	c3                   	ret    
c0014131:	90                   	nop

c0014132 <Device::powerSaving(PowerSavingLevel)>:
c0014132:	c3                   	ret    
c0014133:	90                   	nop

c0014134 <DriverlessDevice::close(int, int, void*)>:
c0014134:	31 c0                	xor    eax,eax
c0014136:	c3                   	ret    
c0014137:	90                   	nop

c0014138 <DriverlessDevice::detect()>:
c0014138:	c3                   	ret    
c0014139:	90                   	nop

c001413a <DriverlessDevice::open(int, int, void*)>:
c001413a:	83 ec 18             	sub    esp,0x18
c001413d:	68 30 b5 02 c0       	push   0xc002b530
c0014142:	e8 ba 66 00 00       	call   c001a801 <Krnl::panic(char const*)>
c0014147:	83 c8 ff             	or     eax,0xffffffff
c001414a:	83 c4 1c             	add    esp,0x1c
c001414d:	c3                   	ret    

c001414e <Device::~Device()>:
c001414e:	ba 58 b5 02 c0       	mov    edx,0xc002b558
c0014153:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014157:	89 10                	mov    DWORD PTR [eax],edx
c0014159:	90                   	nop
c001415a:	c3                   	ret    
c001415b:	90                   	nop

c001415c <Device::~Device()>:
c001415c:	83 ec 0c             	sub    esp,0xc
c001415f:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0014163:	e8 e6 ff ff ff       	call   c001414e <Device::~Device()>
c0014168:	83 c4 04             	add    esp,0x4
c001416b:	83 ec 08             	sub    esp,0x8
c001416e:	68 58 01 00 00       	push   0x158
c0014173:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014177:	e8 eb eb ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c001417c:	83 c4 10             	add    esp,0x10
c001417f:	83 c4 0c             	add    esp,0xc
c0014182:	c3                   	ret    
c0014183:	90                   	nop

c0014184 <Device::findAndLoadDriver()>:
c0014184:	c3                   	ret    
c0014185:	90                   	nop

c0014186 <Device::preOpenPCI(PCIDeviceInfo)>:
c0014186:	57                   	push   edi
c0014187:	b9 09 00 00 00       	mov    ecx,0x9
c001418c:	56                   	push   esi
c001418d:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0014191:	8d 74 24 10          	lea    esi,[esp+0x10]
c0014195:	c7 87 14 01 00 00 02 00 00 00 	mov    DWORD PTR [edi+0x114],0x2
c001419f:	81 c7 18 01 00 00    	add    edi,0x118
c00141a5:	fc                   	cld    
c00141a6:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00141a8:	5e                   	pop    esi
c00141a9:	5f                   	pop    edi
c00141aa:	c3                   	ret    
c00141ab:	90                   	nop

c00141ac <Device::preOpenACPI(void*, char*, char*)>:
c00141ac:	57                   	push   edi
c00141ad:	b9 1e 00 00 00       	mov    ecx,0x1e
c00141b2:	56                   	push   esi
c00141b3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00141b7:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00141bb:	c7 80 14 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x114],0x3
c00141c5:	89 90 18 01 00 00    	mov    DWORD PTR [eax+0x118],edx
c00141cb:	8d b8 1c 01 00 00    	lea    edi,[eax+0x11c]
c00141d1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00141d5:	fc                   	cld    
c00141d6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141d8:	b9 0e 00 00 00       	mov    ecx,0xe
c00141dd:	8d b8 3a 01 00 00    	lea    edi,[eax+0x13a]
c00141e3:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00141e7:	fc                   	cld    
c00141e8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00141ea:	5e                   	pop    esi
c00141eb:	5f                   	pop    edi
c00141ec:	c3                   	ret    
c00141ed:	90                   	nop

c00141ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c00141ee:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00141f2:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c00141f7:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c00141fe:	75 0b                	jne    c001420b <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1d>
c0014200:	8b 00                	mov    eax,DWORD PTR [eax]
c0014202:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014206:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0014209:	eb 1e                	jmp    c0014229 <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x3b>
c001420b:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0014210:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014216:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001421c:	8b 08                	mov    ecx,DWORD PTR [eax]
c001421e:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014222:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014226:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0014229:	ff e0                	jmp    eax
c001422b:	90                   	nop

c001422c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>:
c001422c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0014230:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c0014235:	83 b8 10 01 00 00 0d 	cmp    DWORD PTR [eax+0x110],0xd
c001423c:	75 0b                	jne    c0014249 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x1d>
c001423e:	8b 00                	mov    eax,DWORD PTR [eax]
c0014240:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014244:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
c0014247:	eb 1e                	jmp    c0014267 <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)+0x3b>
c0014249:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001424e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014254:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c001425a:	8b 08                	mov    ecx,DWORD PTR [eax]
c001425c:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0014260:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014264:	8b 41 30             	mov    eax,DWORD PTR [ecx+0x30]
c0014267:	ff e0                	jmp    eax
c0014269:	90                   	nop

c001426a <Device::addChild(Device*)>:
c001426a:	53                   	push   ebx
c001426b:	83 ec 08             	sub    esp,0x8
c001426e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0014272:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014276:	89 90 c8 00 00 00    	mov    DWORD PTR [eax+0xc8],edx
c001427c:	8b 9a cc 00 00 00    	mov    ebx,DWORD PTR [edx+0xcc]
c0014282:	8b 13                	mov    edx,DWORD PTR [ebx]
c0014284:	85 d2                	test   edx,edx
c0014286:	74 04                	je     c001428c <Device::addChild(Device*)+0x22>
c0014288:	89 d3                	mov    ebx,edx
c001428a:	eb f6                	jmp    c0014282 <Device::addChild(Device*)+0x18>
c001428c:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001428f:	83 ec 0c             	sub    esp,0xc
c0014292:	6a 08                	push   0x8
c0014294:	e8 0f b6 ff ff       	call   c000f8a8 <malloc>
c0014299:	89 03                	mov    DWORD PTR [ebx],eax
c001429b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00142a1:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142a8:	83 c4 18             	add    esp,0x18
c00142ab:	5b                   	pop    ebx
c00142ac:	c3                   	ret    
c00142ad:	90                   	nop

c00142ae <Device::removeAllChildren()>:
c00142ae:	56                   	push   esi
c00142af:	53                   	push   ebx
c00142b0:	52                   	push   edx
c00142b1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00142b5:	8b 9e cc 00 00 00    	mov    ebx,DWORD PTR [esi+0xcc]
c00142bb:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00142be:	74 17                	je     c00142d7 <Device::removeAllChildren()+0x29>
c00142c0:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c00142c3:	85 c0                	test   eax,eax
c00142c5:	74 0c                	je     c00142d3 <Device::removeAllChildren()+0x25>
c00142c7:	83 ec 0c             	sub    esp,0xc
c00142ca:	8b 10                	mov    edx,DWORD PTR [eax]
c00142cc:	50                   	push   eax
c00142cd:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00142d0:	83 c4 10             	add    esp,0x10
c00142d3:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00142d5:	eb e4                	jmp    c00142bb <Device::removeAllChildren()+0xd>
c00142d7:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00142dd:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00142e3:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00142e9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00142f0:	58                   	pop    eax
c00142f1:	5b                   	pop    ebx
c00142f2:	5e                   	pop    esi
c00142f3:	c3                   	ret    

c00142f4 <Device::hibernateAll()>:
c00142f4:	53                   	push   ebx
c00142f5:	83 ec 14             	sub    esp,0x14
c00142f8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00142fc:	8b 03                	mov    eax,DWORD PTR [ebx]
c00142fe:	53                   	push   ebx
c00142ff:	ff 50 10             	call   DWORD PTR [eax+0x10]
c0014302:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014308:	83 c4 10             	add    esp,0x10
c001430b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001430e:	74 0f                	je     c001431f <Device::hibernateAll()+0x2b>
c0014310:	83 ec 0c             	sub    esp,0xc
c0014313:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014316:	e8 d9 ff ff ff       	call   c00142f4 <Device::hibernateAll()>
c001431b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001431d:	eb e9                	jmp    c0014308 <Device::hibernateAll()+0x14>
c001431f:	83 c4 08             	add    esp,0x8
c0014322:	5b                   	pop    ebx
c0014323:	c3                   	ret    

c0014324 <Device::wakeAll()>:
c0014324:	53                   	push   ebx
c0014325:	83 ec 14             	sub    esp,0x14
c0014328:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001432c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001432e:	53                   	push   ebx
c001432f:	ff 50 14             	call   DWORD PTR [eax+0x14]
c0014332:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014338:	83 c4 10             	add    esp,0x10
c001433b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001433e:	74 0f                	je     c001434f <Device::wakeAll()+0x2b>
c0014340:	83 ec 0c             	sub    esp,0xc
c0014343:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014346:	e8 d9 ff ff ff       	call   c0014324 <Device::wakeAll()>
c001434b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001434d:	eb e9                	jmp    c0014338 <Device::wakeAll()+0x14>
c001434f:	83 c4 08             	add    esp,0x8
c0014352:	5b                   	pop    ebx
c0014353:	c3                   	ret    

c0014354 <Device::detectAll()>:
c0014354:	53                   	push   ebx
c0014355:	83 ec 14             	sub    esp,0x14
c0014358:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001435c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001435e:	53                   	push   ebx
c001435f:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0014362:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014368:	83 c4 10             	add    esp,0x10
c001436b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001436e:	74 0f                	je     c001437f <Device::detectAll()+0x2b>
c0014370:	83 ec 0c             	sub    esp,0xc
c0014373:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014376:	e8 d9 ff ff ff       	call   c0014354 <Device::detectAll()>
c001437b:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001437d:	eb e9                	jmp    c0014368 <Device::detectAll()+0x14>
c001437f:	83 c4 08             	add    esp,0x8
c0014382:	5b                   	pop    ebx
c0014383:	c3                   	ret    

c0014384 <Device::disableLegacyAll()>:
c0014384:	53                   	push   ebx
c0014385:	83 ec 14             	sub    esp,0x14
c0014388:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001438c:	8b 03                	mov    eax,DWORD PTR [ebx]
c001438e:	53                   	push   ebx
c001438f:	ff 50 1c             	call   DWORD PTR [eax+0x1c]
c0014392:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014398:	83 c4 10             	add    esp,0x10
c001439b:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c001439e:	74 0f                	je     c00143af <Device::disableLegacyAll()+0x2b>
c00143a0:	83 ec 0c             	sub    esp,0xc
c00143a3:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00143a6:	e8 d9 ff ff ff       	call   c0014384 <Device::disableLegacyAll()>
c00143ab:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00143ad:	eb e9                	jmp    c0014398 <Device::disableLegacyAll()+0x14>
c00143af:	83 c4 08             	add    esp,0x8
c00143b2:	5b                   	pop    ebx
c00143b3:	c3                   	ret    

c00143b4 <Device::loadDriversForAll()>:
c00143b4:	53                   	push   ebx
c00143b5:	83 ec 08             	sub    esp,0x8
c00143b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00143bc:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00143c2:	8b 18                	mov    ebx,DWORD PTR [eax]
c00143c4:	85 db                	test   ebx,ebx
c00143c6:	74 12                	je     c00143da <Device::loadDriversForAll()+0x26>
c00143c8:	83 ec 0c             	sub    esp,0xc
c00143cb:	ff 70 04             	push   DWORD PTR [eax+0x4]
c00143ce:	e8 e1 ff ff ff       	call   c00143b4 <Device::loadDriversForAll()>
c00143d3:	83 c4 10             	add    esp,0x10
c00143d6:	89 d8                	mov    eax,ebx
c00143d8:	eb e8                	jmp    c00143c2 <Device::loadDriversForAll()+0xe>
c00143da:	83 c4 08             	add    esp,0x8
c00143dd:	5b                   	pop    ebx
c00143de:	c3                   	ret    
c00143df:	90                   	nop

c00143e0 <Device::closeAll()>:
c00143e0:	53                   	push   ebx
c00143e1:	83 ec 08             	sub    esp,0x8
c00143e4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00143e8:	8b 03                	mov    eax,DWORD PTR [ebx]
c00143ea:	6a 00                	push   0x0
c00143ec:	6a 00                	push   0x0
c00143ee:	6a 00                	push   0x0
c00143f0:	53                   	push   ebx
c00143f1:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c00143f4:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00143fa:	83 c4 10             	add    esp,0x10
c00143fd:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014400:	74 0f                	je     c0014411 <Device::closeAll()+0x31>
c0014402:	83 ec 0c             	sub    esp,0xc
c0014405:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0014408:	e8 d3 ff ff ff       	call   c00143e0 <Device::closeAll()>
c001440d:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c001440f:	eb e9                	jmp    c00143fa <Device::closeAll()+0x1a>
c0014411:	83 c4 08             	add    esp,0x8
c0014414:	5b                   	pop    ebx
c0014415:	c3                   	ret    

c0014416 <Device::powerSavingAll(PowerSavingLevel)>:
c0014416:	56                   	push   esi
c0014417:	53                   	push   ebx
c0014418:	83 ec 0c             	sub    esp,0xc
c001441b:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001441f:	8b 74 24 1c          	mov    esi,DWORD PTR [esp+0x1c]
c0014423:	8b 03                	mov    eax,DWORD PTR [ebx]
c0014425:	56                   	push   esi
c0014426:	53                   	push   ebx
c0014427:	ff 50 20             	call   DWORD PTR [eax+0x20]
c001442a:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c0014430:	83 c4 10             	add    esp,0x10
c0014433:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c0014436:	74 0f                	je     c0014447 <Device::powerSavingAll(PowerSavingLevel)+0x31>
c0014438:	52                   	push   edx
c0014439:	52                   	push   edx
c001443a:	56                   	push   esi
c001443b:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001443e:	e8 d3 ff ff ff       	call   c0014416 <Device::powerSavingAll(PowerSavingLevel)>
c0014443:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c0014445:	eb e9                	jmp    c0014430 <Device::powerSavingAll(PowerSavingLevel)+0x1a>
c0014447:	58                   	pop    eax
c0014448:	5b                   	pop    ebx
c0014449:	5e                   	pop    esi
c001444a:	c3                   	ret    
c001444b:	90                   	nop

c001444c <Device::setName(char const*)>:
c001444c:	81 44 24 04 d0 00 00 00 	add    DWORD PTR [esp+0x4],0xd0
c0014454:	e9 cf c3 fe ff       	jmp    c0000828 <strcpy>
c0014459:	90                   	nop

c001445a <Device::Device(char const*)>:
c001445a:	83 ec 1c             	sub    esp,0x1c
c001445d:	ba 58 b5 02 c0       	mov    edx,0xc002b558
c0014462:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014466:	89 10                	mov    DWORD PTR [eax],edx
c0014468:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001446c:	c7 80 14 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x114],0x0
c0014476:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001447a:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014484:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014488:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014492:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014496:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c00144a0:	83 ec 08             	sub    esp,0x8
c00144a3:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144a7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00144ab:	e8 9c ff ff ff       	call   c001444c <Device::setName(char const*)>
c00144b0:	83 c4 10             	add    esp,0x10
c00144b3:	c7 44 24 0c 08 00 00 00 	mov    DWORD PTR [esp+0xc],0x8
c00144bb:	83 ec 0c             	sub    esp,0xc
c00144be:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00144c2:	e8 e1 b3 ff ff       	call   c000f8a8 <malloc>
c00144c7:	83 c4 10             	add    esp,0x10
c00144ca:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00144d0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00144d7:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00144db:	89 82 cc 00 00 00    	mov    DWORD PTR [edx+0xcc],eax
c00144e1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144e5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144eb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00144f1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00144f5:	8b 80 cc 00 00 00    	mov    eax,DWORD PTR [eax+0xcc]
c00144fb:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0014502:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014506:	c6 80 c4 00 00 00 00 	mov    BYTE PTR [eax+0xc4],0x0
c001450d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014511:	c6 80 c5 00 00 00 00 	mov    BYTE PTR [eax+0xc5],0x0
c0014518:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001451c:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0014526:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001452a:	c7 80 54 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x154],0xffffffff
c0014534:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014538:	c7 80 4c 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x14c],0xffffffff
c0014542:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014546:	c7 80 10 01 00 00 13 00 00 00 	mov    DWORD PTR [eax+0x110],0x13
c0014550:	90                   	nop
c0014551:	83 c4 1c             	add    esp,0x1c
c0014554:	c3                   	ret    
c0014555:	90                   	nop

c0014556 <Device::getName()>:
c0014556:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001455a:	05 d0 00 00 00       	add    eax,0xd0
c001455f:	c3                   	ret    

c0014560 <DriverlessDevice::DriverlessDevice(char const*)>:
c0014560:	83 ec 0c             	sub    esp,0xc
c0014563:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014567:	83 ec 08             	sub    esp,0x8
c001456a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001456e:	50                   	push   eax
c001456f:	e8 e6 fe ff ff       	call   c001445a <Device::Device(char const*)>
c0014574:	83 c4 10             	add    esp,0x10
c0014577:	ba 84 b5 02 c0       	mov    edx,0xc002b584
c001457c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014580:	89 10                	mov    DWORD PTR [eax],edx
c0014582:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014586:	c7 80 10 01 00 00 12 00 00 00 	mov    DWORD PTR [eax+0x110],0x12
c0014590:	90                   	nop
c0014591:	83 c4 0c             	add    esp,0xc
c0014594:	c3                   	ret    
c0014595:	90                   	nop

c0014596 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>:
c0014596:	57                   	push   edi
c0014597:	56                   	push   esi
c0014598:	53                   	push   ebx
c0014599:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001459d:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c00145a1:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c00145a5:	39 bb 10 01 00 00    	cmp    DWORD PTR [ebx+0x110],edi
c00145ab:	75 0c                	jne    c00145b9 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x23>
c00145ad:	52                   	push   edx
c00145ae:	52                   	push   edx
c00145af:	53                   	push   ebx
c00145b0:	56                   	push   esi
c00145b1:	e8 60 4b 01 00       	call   c0029116 <LinkedList<Device>::addElement(Device*)>
c00145b6:	83 c4 10             	add    esp,0x10
c00145b9:	8b 9b cc 00 00 00    	mov    ebx,DWORD PTR [ebx+0xcc]
c00145bf:	83 3b 00             	cmp    DWORD PTR [ebx],0x0
c00145c2:	74 12                	je     c00145d6 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x40>
c00145c4:	50                   	push   eax
c00145c5:	57                   	push   edi
c00145c6:	56                   	push   esi
c00145c7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00145ca:	e8 c7 ff ff ff       	call   c0014596 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00145cf:	8b 1b                	mov    ebx,DWORD PTR [ebx]
c00145d1:	83 c4 10             	add    esp,0x10
c00145d4:	eb e9                	jmp    c00145bf <Device::addToLinkedList(LinkedList<Device>&, DeviceType)+0x29>
c00145d6:	5b                   	pop    ebx
c00145d7:	5e                   	pop    esi
c00145d8:	5f                   	pop    edi
c00145d9:	c3                   	ret    

c00145da <getDevicesOfType(DeviceType)>:
c00145da:	53                   	push   ebx
c00145db:	83 ec 14             	sub    esp,0x14
c00145de:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00145e2:	53                   	push   ebx
c00145e3:	e8 0a 4c 01 00       	call   c00291f2 <LinkedList<Device>::LinkedList()>
c00145e8:	83 c4 0c             	add    esp,0xc
c00145eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00145ef:	53                   	push   ebx
c00145f0:	ff 35 48 ee 02 c0    	push   DWORD PTR ds:0xc002ee48
c00145f6:	e8 9b ff ff ff       	call   c0014596 <Device::addToLinkedList(LinkedList<Device>&, DeviceType)>
c00145fb:	89 d8                	mov    eax,ebx
c00145fd:	83 c4 18             	add    esp,0x18
c0014600:	5b                   	pop    ebx
c0014601:	c2 04 00             	ret    0x4

c0014604 <HardDiskController::HardDiskController(char const*)>:
c0014604:	83 ec 0c             	sub    esp,0xc
c0014607:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001460b:	83 ec 08             	sub    esp,0x8
c001460e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014612:	50                   	push   eax
c0014613:	e8 42 fe ff ff       	call   c001445a <Device::Device(char const*)>
c0014618:	83 c4 10             	add    esp,0x10
c001461b:	ba b0 b5 02 c0       	mov    edx,0xc002b5b0
c0014620:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014624:	89 10                	mov    DWORD PTR [eax],edx
c0014626:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001462a:	c7 80 10 01 00 00 04 00 00 00 	mov    DWORD PTR [eax+0x110],0x4
c0014634:	90                   	nop
c0014635:	83 c4 0c             	add    esp,0xc
c0014638:	c3                   	ret    
c0014639:	90                   	nop

c001463a <HardDiskController::~HardDiskController()>:
c001463a:	83 ec 0c             	sub    esp,0xc
c001463d:	ba b0 b5 02 c0       	mov    edx,0xc002b5b0
c0014642:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014646:	89 10                	mov    DWORD PTR [eax],edx
c0014648:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001464c:	83 ec 0c             	sub    esp,0xc
c001464f:	50                   	push   eax
c0014650:	e8 f9 fa ff ff       	call   c001414e <Device::~Device()>
c0014655:	83 c4 10             	add    esp,0x10
c0014658:	90                   	nop
c0014659:	83 c4 0c             	add    esp,0xc
c001465c:	c3                   	ret    
c001465d:	90                   	nop

c001465e <HardDiskController::~HardDiskController()>:
c001465e:	83 ec 0c             	sub    esp,0xc
c0014661:	83 ec 0c             	sub    esp,0xc
c0014664:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014668:	e8 cd ff ff ff       	call   c001463a <HardDiskController::~HardDiskController()>
c001466d:	83 c4 10             	add    esp,0x10
c0014670:	83 ec 08             	sub    esp,0x8
c0014673:	68 58 01 00 00       	push   0x158
c0014678:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001467c:	e8 e6 e6 ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0014681:	83 c4 10             	add    esp,0x10
c0014684:	83 c4 0c             	add    esp,0xc
c0014687:	c3                   	ret    

c0014688 <PhysicalDisk::eject()>:
c0014688:	83 ec 18             	sub    esp,0x18
c001468b:	68 d4 b5 02 c0       	push   0xc002b5d4
c0014690:	e8 b2 e7 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0014695:	83 c8 ff             	or     eax,0xffffffff
c0014698:	83 c4 1c             	add    esp,0x1c
c001469b:	c3                   	ret    

c001469c <PhysicalDisk::PhysicalDisk(char const*, int)>:
c001469c:	83 ec 0c             	sub    esp,0xc
c001469f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146a3:	83 ec 08             	sub    esp,0x8
c00146a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00146aa:	50                   	push   eax
c00146ab:	e8 aa fd ff ff       	call   c001445a <Device::Device(char const*)>
c00146b0:	83 c4 10             	add    esp,0x10
c00146b3:	ba 04 b6 02 c0       	mov    edx,0xc002b604
c00146b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146bc:	89 10                	mov    DWORD PTR [eax],edx
c00146be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146c2:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00146c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146cd:	c6 80 69 01 00 00 00 	mov    BYTE PTR [eax+0x169],0x0
c00146d4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146d8:	c7 80 10 01 00 00 02 00 00 00 	mov    DWORD PTR [eax+0x110],0x2
c00146e2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146e6:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00146ea:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00146f0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00146f4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00146fe:	90                   	nop
c00146ff:	83 c4 0c             	add    esp,0xc
c0014702:	c3                   	ret    
c0014703:	90                   	nop

c0014704 <PhysicalDisk::startCache()>:
c0014704:	56                   	push   esi
c0014705:	53                   	push   ebx
c0014706:	83 ec 10             	sub    esp,0x10
c0014709:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001470d:	6a 44                	push   0x44
c001470f:	e8 94 b1 ff ff       	call   c000f8a8 <malloc>
c0014714:	89 c6                	mov    esi,eax
c0014716:	58                   	pop    eax
c0014717:	5a                   	pop    edx
c0014718:	53                   	push   ebx
c0014719:	56                   	push   esi
c001471a:	e8 cf 28 00 00       	call   c0016fee <VCache::VCache(PhysicalDisk*)>
c001471f:	89 b3 58 01 00 00    	mov    DWORD PTR [ebx+0x158],esi
c0014725:	83 c4 14             	add    esp,0x14
c0014728:	5b                   	pop    ebx
c0014729:	5e                   	pop    esi
c001472a:	c3                   	ret    
c001472b:	90                   	nop

c001472c <PhysicalDisk::~PhysicalDisk()>:
c001472c:	83 ec 0c             	sub    esp,0xc
c001472f:	ba 04 b6 02 c0       	mov    edx,0xc002b604
c0014734:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014738:	89 10                	mov    DWORD PTR [eax],edx
c001473a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001473e:	83 ec 0c             	sub    esp,0xc
c0014741:	50                   	push   eax
c0014742:	e8 07 fa ff ff       	call   c001414e <Device::~Device()>
c0014747:	83 c4 10             	add    esp,0x10
c001474a:	90                   	nop
c001474b:	83 c4 0c             	add    esp,0xc
c001474e:	c3                   	ret    
c001474f:	90                   	nop

c0014750 <PhysicalDisk::~PhysicalDisk()>:
c0014750:	83 ec 0c             	sub    esp,0xc
c0014753:	83 ec 0c             	sub    esp,0xc
c0014756:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001475a:	e8 cd ff ff ff       	call   c001472c <PhysicalDisk::~PhysicalDisk()>
c001475f:	83 c4 10             	add    esp,0x10
c0014762:	83 ec 08             	sub    esp,0x8
c0014765:	68 6c 01 00 00       	push   0x16c
c001476a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001476e:	e8 f4 e5 ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0014773:	83 c4 10             	add    esp,0x10
c0014776:	83 c4 0c             	add    esp,0xc
c0014779:	c3                   	ret    

c001477a <FPU::FPU(char const*)>:
c001477a:	83 ec 0c             	sub    esp,0xc
c001477d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014781:	83 ec 08             	sub    esp,0x8
c0014784:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014788:	50                   	push   eax
c0014789:	e8 cc fc ff ff       	call   c001445a <Device::Device(char const*)>
c001478e:	83 c4 10             	add    esp,0x10
c0014791:	ba 48 b6 02 c0       	mov    edx,0xc002b648
c0014796:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001479a:	89 10                	mov    DWORD PTR [eax],edx
c001479c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147a0:	c7 80 10 01 00 00 0f 00 00 00 	mov    DWORD PTR [eax+0x110],0xf
c00147aa:	90                   	nop
c00147ab:	83 c4 0c             	add    esp,0xc
c00147ae:	c3                   	ret    
c00147af:	90                   	nop

c00147b0 <FPU::~FPU()>:
c00147b0:	83 ec 0c             	sub    esp,0xc
c00147b3:	ba 48 b6 02 c0       	mov    edx,0xc002b648
c00147b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147bc:	89 10                	mov    DWORD PTR [eax],edx
c00147be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00147c2:	83 ec 0c             	sub    esp,0xc
c00147c5:	50                   	push   eax
c00147c6:	e8 83 f9 ff ff       	call   c001414e <Device::~Device()>
c00147cb:	83 c4 10             	add    esp,0x10
c00147ce:	90                   	nop
c00147cf:	83 c4 0c             	add    esp,0xc
c00147d2:	c3                   	ret    
c00147d3:	90                   	nop

c00147d4 <FPU::~FPU()>:
c00147d4:	83 ec 0c             	sub    esp,0xc
c00147d7:	83 ec 0c             	sub    esp,0xc
c00147da:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147de:	e8 cd ff ff ff       	call   c00147b0 <FPU::~FPU()>
c00147e3:	83 c4 10             	add    esp,0x10
c00147e6:	83 ec 08             	sub    esp,0x8
c00147e9:	68 58 01 00 00       	push   0x158
c00147ee:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00147f2:	e8 70 e5 ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c00147f7:	83 c4 10             	add    esp,0x10
c00147fa:	83 c4 0c             	add    esp,0xc
c00147fd:	c3                   	ret    

c00147fe <setupFPU()>:
c00147fe:	53                   	push   ebx
c00147ff:	83 ec 08             	sub    esp,0x8
c0014802:	8b 15 48 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee48
c0014808:	f6 82 e9 01 00 00 20 	test   BYTE PTR [edx+0x1e9],0x20
c001480f:	74 19                	je     c001482a <setupFPU()+0x2c>
c0014811:	83 ec 0c             	sub    esp,0xc
c0014814:	68 58 01 00 00       	push   0x158
c0014819:	e8 8a b0 ff ff       	call   c000f8a8 <malloc>
c001481e:	89 c3                	mov    ebx,eax
c0014820:	89 04 24             	mov    DWORD PTR [esp],eax
c0014823:	e8 20 15 01 00       	call   c0025d48 <AVX::AVX()>
c0014828:	eb 5b                	jmp    c0014885 <setupFPU()+0x87>
c001482a:	8a 82 e8 01 00 00    	mov    al,BYTE PTR [edx+0x1e8]
c0014830:	84 c0                	test   al,al
c0014832:	79 19                	jns    c001484d <setupFPU()+0x4f>
c0014834:	83 ec 0c             	sub    esp,0xc
c0014837:	68 58 01 00 00       	push   0x158
c001483c:	e8 67 b0 ff ff       	call   c000f8a8 <malloc>
c0014841:	89 c3                	mov    ebx,eax
c0014843:	89 04 24             	mov    DWORD PTR [esp],eax
c0014846:	e8 23 16 01 00       	call   c0025e6e <SSE::SSE()>
c001484b:	eb 38                	jmp    c0014885 <setupFPU()+0x87>
c001484d:	a8 20                	test   al,0x20
c001484f:	74 19                	je     c001486a <setupFPU()+0x6c>
c0014851:	83 ec 0c             	sub    esp,0xc
c0014854:	68 58 01 00 00       	push   0x158
c0014859:	e8 4a b0 ff ff       	call   c000f8a8 <malloc>
c001485e:	89 c3                	mov    ebx,eax
c0014860:	89 04 24             	mov    DWORD PTR [esp],eax
c0014863:	e8 70 15 01 00       	call   c0025dd8 <MMX::MMX()>
c0014868:	eb 1b                	jmp    c0014885 <setupFPU()+0x87>
c001486a:	a8 10                	test   al,0x10
c001486c:	74 1c                	je     c001488a <setupFPU()+0x8c>
c001486e:	83 ec 0c             	sub    esp,0xc
c0014871:	68 58 01 00 00       	push   0x158
c0014876:	e8 2d b0 ff ff       	call   c000f8a8 <malloc>
c001487b:	89 c3                	mov    ebx,eax
c001487d:	89 04 24             	mov    DWORD PTR [esp],eax
c0014880:	e8 77 16 01 00       	call   c0025efc <x87::x87()>
c0014885:	83 c4 10             	add    esp,0x10
c0014888:	eb 24                	jmp    c00148ae <setupFPU()+0xb0>
c001488a:	83 e0 ef             	and    eax,0xffffffef
c001488d:	83 ec 0c             	sub    esp,0xc
c0014890:	88 82 e8 01 00 00    	mov    BYTE PTR [edx+0x1e8],al
c0014896:	68 34 b6 02 c0       	push   0xc002b634
c001489b:	e8 a7 e5 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00148a0:	0f 20 c0             	mov    eax,cr0
c00148a3:	83 c8 04             	or     eax,0x4
c00148a6:	0f 22 c0             	mov    cr0,eax
c00148a9:	31 db                	xor    ebx,ebx
c00148ab:	83 c4 10             	add    esp,0x10
c00148ae:	89 d8                	mov    eax,ebx
c00148b0:	83 c4 08             	add    esp,0x8
c00148b3:	5b                   	pop    ebx
c00148b4:	c3                   	ret    
c00148b5:	90                   	nop

c00148b6 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))>:
c00148b6:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00148ba:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00148be:	c1 e0 04             	shl    eax,0x4
c00148c1:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c00148c5:	8d 50 10             	lea    edx,[eax+0x10]
c00148c8:	39 88 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ecx
c00148ce:	74 08                	je     c00148d8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x22>
c00148d0:	83 c0 04             	add    eax,0x4
c00148d3:	39 d0                	cmp    eax,edx
c00148d5:	75 f1                	jne    c00148c8 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x12>
c00148d7:	c3                   	ret    
c00148d8:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c00148e2:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c00148ec:	eb e2                	jmp    c00148d0 <InterruptController::uninstallISRHandler(int, void (*)(regs*, void*))+0x1a>

c00148ee <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)>:
c00148ee:	57                   	push   edi
c00148ef:	31 c0                	xor    eax,eax
c00148f1:	56                   	push   esi
c00148f2:	53                   	push   ebx
c00148f3:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00148f7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00148fb:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c00148ff:	89 da                	mov    edx,ebx
c0014901:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0014905:	c1 e2 04             	shl    edx,0x4
c0014908:	01 ca                	add    edx,ecx
c001490a:	83 bc 82 58 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x158],0x0
c0014912:	74 16                	je     c001492a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x3c>
c0014914:	40                   	inc    eax
c0014915:	83 f8 04             	cmp    eax,0x4
c0014918:	75 f0                	jne    c001490a <InterruptController::installISRHandler(int, void (*)(regs*, void*), void*)+0x1c>
c001491a:	c7 44 24 10 78 b6 02 c0 	mov    DWORD PTR [esp+0x10],0xc002b678
c0014922:	5b                   	pop    ebx
c0014923:	5e                   	pop    esi
c0014924:	5f                   	pop    edi
c0014925:	e9 d7 5e 00 00       	jmp    c001a801 <Krnl::panic(char const*)>
c001492a:	8d 04 98             	lea    eax,[eax+ebx*4]
c001492d:	8d 04 81             	lea    eax,[ecx+eax*4]
c0014930:	89 b0 58 01 00 00    	mov    DWORD PTR [eax+0x158],esi
c0014936:	89 b8 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edi
c001493c:	5b                   	pop    ebx
c001493d:	5e                   	pop    esi
c001493e:	5f                   	pop    edi
c001493f:	c3                   	ret    

c0014940 <doubleFault(regs*, void*)>:
c0014940:	55                   	push   ebp
c0014941:	89 e5                	mov    ebp,esp
c0014943:	83 ec 08             	sub    esp,0x8
c0014946:	83 ec 0c             	sub    esp,0xc
c0014949:	68 b3 b6 02 c0       	push   0xc002b6b3
c001494e:	e8 ae 5e 00 00       	call   c001a801 <Krnl::panic(char const*)>
c0014953:	83 c4 10             	add    esp,0x10
c0014956:	90                   	nop
c0014957:	c9                   	leave  
c0014958:	c3                   	ret    
c0014959:	90                   	nop

c001495a <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c001495a:	56                   	push   esi
c001495b:	53                   	push   ebx
c001495c:	50                   	push   eax
c001495d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014961:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0014965:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c001496a:	75 35                	jne    c00149a1 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x47>
c001496c:	8d 43 20             	lea    eax,[ebx+0x20]
c001496f:	31 d2                	xor    edx,edx
c0014971:	89 c1                	mov    ecx,eax
c0014973:	c1 e1 04             	shl    ecx,0x4
c0014976:	01 f1                	add    ecx,esi
c0014978:	83 bc 91 58 01 00 00 00 	cmp    DWORD PTR [ecx+edx*4+0x158],0x0
c0014980:	74 3e                	je     c00149c0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x66>
c0014982:	42                   	inc    edx
c0014983:	83 fa 04             	cmp    edx,0x4
c0014986:	75 f0                	jne    c0014978 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1e>
c0014988:	83 ec 0c             	sub    esp,0xc
c001498b:	68 f8 b6 02 c0       	push   0xc002b6f8
c0014990:	e8 6c 5e 00 00       	call   c001a801 <Krnl::panic(char const*)>
c0014995:	83 c4 10             	add    esp,0x10
c0014998:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001499d:	5a                   	pop    edx
c001499e:	5b                   	pop    ebx
c001499f:	5e                   	pop    esi
c00149a0:	c3                   	ret    
c00149a1:	83 ec 0c             	sub    esp,0xc
c00149a4:	56                   	push   esi
c00149a5:	e8 ac fb ff ff       	call   c0014556 <Device::getName()>
c00149aa:	83 c4 10             	add    esp,0x10
c00149ad:	80 38 41             	cmp    BYTE PTR [eax],0x41
c00149b0:	75 ba                	jne    c001496c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149b2:	83 fb 0f             	cmp    ebx,0xf
c00149b5:	7f 29                	jg     c00149e0 <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x86>
c00149b7:	0f b6 9b a0 e0 02 c0 	movzx  ebx,BYTE PTR [ebx-0x3ffd1f60]
c00149be:	eb ac                	jmp    c001496c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149c0:	8d 04 82             	lea    eax,[edx+eax*4]
c00149c3:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00149c7:	8d 04 86             	lea    eax,[esi+eax*4]
c00149ca:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c00149d0:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00149d4:	89 90 58 11 00 00    	mov    DWORD PTR [eax+0x1158],edx
c00149da:	89 d8                	mov    eax,ebx
c00149dc:	5a                   	pop    edx
c00149dd:	5b                   	pop    ebx
c00149de:	5e                   	pop    esi
c00149df:	c3                   	ret    
c00149e0:	83 ec 0c             	sub    esp,0xc
c00149e3:	68 c0 b6 02 c0       	push   0xc002b6c0
c00149e8:	e8 14 5e 00 00       	call   c001a801 <Krnl::panic(char const*)>
c00149ed:	83 c4 10             	add    esp,0x10
c00149f0:	e9 77 ff ff ff       	jmp    c001496c <InterruptController::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12>
c00149f5:	90                   	nop

c00149f6 <InterruptController::clearAllHandlers(int, bool)>:
c00149f6:	56                   	push   esi
c00149f7:	53                   	push   ebx
c00149f8:	52                   	push   edx
c00149f9:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00149fd:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0014a01:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0014a06:	75 61                	jne    c0014a69 <InterruptController::clearAllHandlers(int, bool)+0x73>
c0014a08:	8d 46 20             	lea    eax,[esi+0x20]
c0014a0b:	c1 e6 04             	shl    esi,0x4
c0014a0e:	c1 e0 04             	shl    eax,0x4
c0014a11:	01 de                	add    esi,ebx
c0014a13:	01 d8                	add    eax,ebx
c0014a15:	c7 86 58 03 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x358],0x0
c0014a1f:	c7 86 58 13 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x1358],0x0
c0014a29:	c7 80 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x15c],0x0
c0014a33:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c0014a3d:	c7 80 60 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x160],0x0
c0014a47:	c7 80 60 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1160],0x0
c0014a51:	c7 80 64 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x164],0x0
c0014a5b:	c7 80 64 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1164],0x0
c0014a65:	58                   	pop    eax
c0014a66:	5b                   	pop    ebx
c0014a67:	5e                   	pop    esi
c0014a68:	c3                   	ret    
c0014a69:	83 ec 0c             	sub    esp,0xc
c0014a6c:	53                   	push   ebx
c0014a6d:	e8 e4 fa ff ff       	call   c0014556 <Device::getName()>
c0014a72:	83 c4 10             	add    esp,0x10
c0014a75:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014a78:	75 8e                	jne    c0014a08 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a7a:	83 fe 0f             	cmp    esi,0xf
c0014a7d:	7f 09                	jg     c0014a88 <InterruptController::clearAllHandlers(int, bool)+0x92>
c0014a7f:	0f b6 b6 a0 e0 02 c0 	movzx  esi,BYTE PTR [esi-0x3ffd1f60]
c0014a86:	eb 80                	jmp    c0014a08 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a88:	83 ec 0c             	sub    esp,0xc
c0014a8b:	68 34 b7 02 c0       	push   0xc002b734
c0014a90:	e8 6c 5d 00 00       	call   c001a801 <Krnl::panic(char const*)>
c0014a95:	83 c4 10             	add    esp,0x10
c0014a98:	e9 6b ff ff ff       	jmp    c0014a08 <InterruptController::clearAllHandlers(int, bool)+0x12>
c0014a9d:	90                   	nop

c0014a9e <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)>:
c0014a9e:	56                   	push   esi
c0014a9f:	53                   	push   ebx
c0014aa0:	52                   	push   edx
c0014aa1:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0014aa5:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0014aa9:	80 7c 24 1c 00       	cmp    BYTE PTR [esp+0x1c],0x0
c0014aae:	75 3a                	jne    c0014aea <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x4c>
c0014ab0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014ab4:	8d 50 20             	lea    edx,[eax+0x20]
c0014ab7:	c1 e2 04             	shl    edx,0x4
c0014aba:	8d 04 16             	lea    eax,[esi+edx*1]
c0014abd:	8d 54 16 10          	lea    edx,[esi+edx*1+0x10]
c0014ac1:	39 98 58 01 00 00    	cmp    DWORD PTR [eax+0x158],ebx
c0014ac7:	74 0b                	je     c0014ad4 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x36>
c0014ac9:	83 c0 04             	add    eax,0x4
c0014acc:	39 d0                	cmp    eax,edx
c0014ace:	75 f1                	jne    c0014ac1 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x23>
c0014ad0:	58                   	pop    eax
c0014ad1:	5b                   	pop    ebx
c0014ad2:	5e                   	pop    esi
c0014ad3:	c3                   	ret    
c0014ad4:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0014ade:	c7 80 58 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1158],0x0
c0014ae8:	eb df                	jmp    c0014ac9 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x2b>
c0014aea:	83 ec 0c             	sub    esp,0xc
c0014aed:	56                   	push   esi
c0014aee:	e8 63 fa ff ff       	call   c0014556 <Device::getName()>
c0014af3:	83 c4 10             	add    esp,0x10
c0014af6:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0014af9:	75 b5                	jne    c0014ab0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014afb:	83 7c 24 14 0f       	cmp    DWORD PTR [esp+0x14],0xf
c0014b00:	7f 11                	jg     c0014b13 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x75>
c0014b02:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0014b06:	0f b6 80 a0 e0 02 c0 	movzx  eax,BYTE PTR [eax-0x3ffd1f60]
c0014b0d:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0014b11:	eb 9d                	jmp    c0014ab0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>
c0014b13:	83 ec 0c             	sub    esp,0xc
c0014b16:	68 34 b7 02 c0       	push   0xc002b734
c0014b1b:	e8 e1 5c 00 00       	call   c001a801 <Krnl::panic(char const*)>
c0014b20:	83 c4 10             	add    esp,0x10
c0014b23:	eb 8b                	jmp    c0014ab0 <InterruptController::uninstallIRQHandler(int, void (*)(regs*, void*), bool)+0x12>

c0014b25 <nmiHandler(regs*, void*)>:
c0014b25:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0014b2a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0014b2e:	e9 bf a4 ff ff       	jmp    c000eff2 <Computer::handleNMI()>

c0014b33 <int_handler>:
c0014b33:	55                   	push   ebp
c0014b34:	57                   	push   edi
c0014b35:	56                   	push   esi
c0014b36:	53                   	push   ebx
c0014b37:	83 ec 0c             	sub    esp,0xc
c0014b3a:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0014b3e:	80 3d a4 19 03 c0 00 	cmp    BYTE PTR ds:0xc00319a4,0x0
c0014b45:	74 0b                	je     c0014b52 <int_handler+0x1f>
c0014b47:	fa                   	cli    
c0014b48:	f4                   	hlt    
c0014b49:	80 3d a4 19 03 c0 00 	cmp    BYTE PTR ds:0xc00319a4,0x0
c0014b50:	75 f5                	jne    c0014b47 <int_handler+0x14>
c0014b52:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0014b57:	8b 5e 30             	mov    ebx,DWORD PTR [esi+0x30]
c0014b5a:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0014b60:	8b b8 88 11 00 00    	mov    edi,DWORD PTR [eax+0x1188]
c0014b66:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014b69:	83 f8 17             	cmp    eax,0x17
c0014b6c:	77 13                	ja     c0014b81 <int_handler+0x4e>
c0014b6e:	83 ec 08             	sub    esp,0x8
c0014b71:	8b 17                	mov    edx,DWORD PTR [edi]
c0014b73:	8d 43 e0             	lea    eax,[ebx-0x20]
c0014b76:	0f b6 c0             	movzx  eax,al
c0014b79:	50                   	push   eax
c0014b7a:	57                   	push   edi
c0014b7b:	ff 52 38             	call   DWORD PTR [edx+0x38]
c0014b7e:	83 c4 10             	add    esp,0x10
c0014b81:	83 c3 15             	add    ebx,0x15
c0014b84:	c1 e3 04             	shl    ebx,0x4
c0014b87:	8d 6c 1f 08          	lea    ebp,[edi+ebx*1+0x8]
c0014b8b:	8d bc 1f 08 10 00 00 	lea    edi,[edi+ebx*1+0x1008]
c0014b92:	31 db                	xor    ebx,ebx
c0014b94:	8b 44 9d 00          	mov    eax,DWORD PTR [ebp+ebx*4+0x0]
c0014b98:	85 c0                	test   eax,eax
c0014b9a:	74 13                	je     c0014baf <int_handler+0x7c>
c0014b9c:	8b 14 9f             	mov    edx,DWORD PTR [edi+ebx*4]
c0014b9f:	83 7e 30 60          	cmp    DWORD PTR [esi+0x30],0x60
c0014ba3:	74 1c                	je     c0014bc1 <int_handler+0x8e>
c0014ba5:	83 ec 08             	sub    esp,0x8
c0014ba8:	52                   	push   edx
c0014ba9:	56                   	push   esi
c0014baa:	ff d0                	call   eax
c0014bac:	83 c4 10             	add    esp,0x10
c0014baf:	43                   	inc    ebx
c0014bb0:	83 fb 04             	cmp    ebx,0x4
c0014bb3:	75 df                	jne    c0014b94 <int_handler+0x61>
c0014bb5:	83 c4 0c             	add    esp,0xc
c0014bb8:	31 c0                	xor    eax,eax
c0014bba:	5b                   	pop    ebx
c0014bbb:	31 d2                	xor    edx,edx
c0014bbd:	5e                   	pop    esi
c0014bbe:	5f                   	pop    edi
c0014bbf:	5d                   	pop    ebp
c0014bc0:	c3                   	ret    
c0014bc1:	83 ec 08             	sub    esp,0x8
c0014bc4:	52                   	push   edx
c0014bc5:	56                   	push   esi
c0014bc6:	ff d0                	call   eax
c0014bc8:	83 c4 10             	add    esp,0x10
c0014bcb:	83 c4 0c             	add    esp,0xc
c0014bce:	5b                   	pop    ebx
c0014bcf:	5e                   	pop    esi
c0014bd0:	5f                   	pop    edi
c0014bd1:	5d                   	pop    ebp
c0014bd2:	c3                   	ret    
c0014bd3:	90                   	nop

c0014bd4 <InterruptController::InterruptController(char const*)>:
c0014bd4:	83 ec 1c             	sub    esp,0x1c
c0014bd7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bdb:	83 ec 08             	sub    esp,0x8
c0014bde:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0014be2:	50                   	push   eax
c0014be3:	e8 72 f8 ff ff       	call   c001445a <Device::Device(char const*)>
c0014be8:	83 c4 10             	add    esp,0x10
c0014beb:	ba f4 b9 02 c0       	mov    edx,0xc002b9f4
c0014bf0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bf4:	89 10                	mov    DWORD PTR [eax],edx
c0014bf6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014bfa:	c7 80 10 01 00 00 0d 00 00 00 	mov    DWORD PTR [eax+0x110],0xd
c0014c04:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0014c0c:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0014c14:	7f 5e                	jg     c0014c74 <InterruptController::InterruptController(char const*)+0xa0>
c0014c16:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0014c1e:	83 7c 24 08 03       	cmp    DWORD PTR [esp+0x8],0x3
c0014c23:	7f 49                	jg     c0014c6e <InterruptController::InterruptController(char const*)+0x9a>
c0014c25:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c29:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c2d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c34:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c38:	01 ca                	add    edx,ecx
c0014c3a:	83 c2 54             	add    edx,0x54
c0014c3d:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c45:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0014c49:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0014c4d:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0014c54:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0014c58:	01 ca                	add    edx,ecx
c0014c5a:	81 c2 54 04 00 00    	add    edx,0x454
c0014c60:	c7 44 90 08 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0x8],0x0
c0014c68:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c0014c6c:	eb b0                	jmp    c0014c1e <InterruptController::InterruptController(char const*)+0x4a>
c0014c6e:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0014c72:	eb 98                	jmp    c0014c0c <InterruptController::InterruptController(char const*)+0x38>
c0014c74:	90                   	nop
c0014c75:	83 c4 1c             	add    esp,0x1c
c0014c78:	c3                   	ret    
c0014c79:	90                   	nop

c0014c7a <InterruptController::~InterruptController()>:
c0014c7a:	83 ec 0c             	sub    esp,0xc
c0014c7d:	ba f4 b9 02 c0       	mov    edx,0xc002b9f4
c0014c82:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c86:	89 10                	mov    DWORD PTR [eax],edx
c0014c88:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0014c8c:	83 ec 0c             	sub    esp,0xc
c0014c8f:	50                   	push   eax
c0014c90:	e8 b9 f4 ff ff       	call   c001414e <Device::~Device()>
c0014c95:	83 c4 10             	add    esp,0x10
c0014c98:	90                   	nop
c0014c99:	83 c4 0c             	add    esp,0xc
c0014c9c:	c3                   	ret    
c0014c9d:	90                   	nop

c0014c9e <InterruptController::~InterruptController()>:
c0014c9e:	83 ec 0c             	sub    esp,0xc
c0014ca1:	83 ec 0c             	sub    esp,0xc
c0014ca4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014ca8:	e8 cd ff ff ff       	call   c0014c7a <InterruptController::~InterruptController()>
c0014cad:	83 c4 10             	add    esp,0x10
c0014cb0:	83 ec 08             	sub    esp,0x8
c0014cb3:	68 58 21 00 00       	push   0x2158
c0014cb8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0014cbc:	e8 a6 e0 ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0014cc1:	83 c4 10             	add    esp,0x10
c0014cc4:	83 c4 0c             	add    esp,0xc
c0014cc7:	c3                   	ret    

c0014cc8 <displayDebugInfo(regs*)>:
c0014cc8:	55                   	push   ebp
c0014cc9:	57                   	push   edi
c0014cca:	56                   	push   esi
c0014ccb:	53                   	push   ebx
c0014ccc:	83 ec 24             	sub    esp,0x24
c0014ccf:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0014cd3:	0f 20 c2             	mov    edx,cr0
c0014cd6:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0014cda:	0f 20 d7             	mov    edi,cr2
c0014cdd:	0f 20 de             	mov    esi,cr3
c0014ce0:	0f 20 e5             	mov    ebp,cr4
c0014ce3:	ff 73 2c             	push   DWORD PTR [ebx+0x2c]
c0014ce6:	68 6e b7 02 c0       	push   0xc002b76e
c0014ceb:	e8 57 e1 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0014cf0:	59                   	pop    ecx
c0014cf1:	58                   	pop    eax
c0014cf2:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c0014cf5:	68 79 b7 02 c0       	push   0xc002b779
c0014cfa:	e8 48 e1 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0014cff:	58                   	pop    eax
c0014d00:	5a                   	pop    edx
c0014d01:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0014d04:	68 84 b7 02 c0       	push   0xc002b784
c0014d09:	e8 39 e1 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0014d0e:	59                   	pop    ecx
c0014d0f:	58                   	pop    eax
c0014d10:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0014d13:	68 8f b7 02 c0       	push   0xc002b78f
c0014d18:	e8 2a e1 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0014d1d:	58                   	pop    eax
c0014d1e:	5a                   	pop    edx
c0014d1f:	ff 73 14             	push   DWORD PTR [ebx+0x14]
c0014d22:	68 9a b7 02 c0       	push   0xc002b79a
c0014d27:	e8 1b e1 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0014d2c:	59                   	pop    ecx
c0014d2d:	58                   	pop    eax
c0014d2e:	ff 73 10             	push   DWORD PTR [ebx+0x10]
c0014d31:	68 a5 b7 02 c0       	push   0xc002b7a5
c0014d36:	e8 0c e1 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0014d3b:	58                   	pop    eax
c0014d3c:	5a                   	pop    edx
c0014d3d:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014d40:	68 b0 b7 02 c0       	push   0xc002b7b0
c0014d45:	e8 fd e0 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0014d4a:	59                   	pop    ecx
c0014d4b:	58                   	pop    eax
c0014d4c:	ff 73 18             	push   DWORD PTR [ebx+0x18]
c0014d4f:	68 bb b7 02 c0       	push   0xc002b7bb
c0014d54:	e8 ee e0 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0014d59:	58                   	pop    eax
c0014d5a:	5a                   	pop    edx
c0014d5b:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014d5e:	68 c6 b7 02 c0       	push   0xc002b7c6
c0014d63:	e8 df e0 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0014d68:	59                   	pop    ecx
c0014d69:	58                   	pop    eax
c0014d6a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014d6d:	68 d5 b7 02 c0       	push   0xc002b7d5
c0014d72:	e8 d0 e0 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0014d77:	58                   	pop    eax
c0014d78:	5a                   	pop    edx
c0014d79:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014d7c:	68 e0 b7 02 c0       	push   0xc002b7e0
c0014d81:	e8 c1 e0 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0014d86:	59                   	pop    ecx
c0014d87:	58                   	pop    eax
c0014d88:	57                   	push   edi
c0014d89:	68 eb b7 02 c0       	push   0xc002b7eb
c0014d8e:	e8 b4 e0 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0014d93:	58                   	pop    eax
c0014d94:	5a                   	pop    edx
c0014d95:	56                   	push   esi
c0014d96:	68 f6 b7 02 c0       	push   0xc002b7f6
c0014d9b:	e8 a7 e0 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0014da0:	59                   	pop    ecx
c0014da1:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014da6:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dac:	e8 b9 be ff ff       	call   c0010c6a <setActiveTerminal(VgaText*)>
c0014db1:	58                   	pop    eax
c0014db2:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c0014db5:	5a                   	pop    edx
c0014db6:	c1 e0 05             	shl    eax,0x5
c0014db9:	05 00 de 02 c0       	add    eax,0xc002de00
c0014dbe:	50                   	push   eax
c0014dbf:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014dc4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dca:	e8 27 c2 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c0014dcf:	59                   	pop    ecx
c0014dd0:	58                   	pop    eax
c0014dd1:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014dd6:	68 01 b8 02 c0       	push   0xc002b801
c0014ddb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014de1:	e8 10 c2 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c0014de6:	58                   	pop    eax
c0014de7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0014dec:	5a                   	pop    edx
c0014ded:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0014df0:	83 c0 0c             	add    eax,0xc
c0014df3:	50                   	push   eax
c0014df4:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014df9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014dff:	e8 f2 c1 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c0014e04:	59                   	pop    ecx
c0014e05:	58                   	pop    eax
c0014e06:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014e0b:	68 0a b8 02 c0       	push   0xc002b80a
c0014e10:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e16:	e8 db c1 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c0014e1b:	58                   	pop    eax
c0014e1c:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014e21:	5a                   	pop    edx
c0014e22:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0014e25:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e2b:	e8 ec c1 ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c0014e30:	59                   	pop    ecx
c0014e31:	58                   	pop    eax
c0014e32:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014e37:	68 12 b8 02 c0       	push   0xc002b812
c0014e3c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e42:	e8 af c1 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c0014e47:	58                   	pop    eax
c0014e48:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014e4d:	5a                   	pop    edx
c0014e4e:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c0014e51:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e57:	e8 c0 c1 ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c0014e5c:	59                   	pop    ecx
c0014e5d:	58                   	pop    eax
c0014e5e:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014e63:	68 1a b8 02 c0       	push   0xc002b81a
c0014e68:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e6e:	e8 83 c1 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c0014e73:	58                   	pop    eax
c0014e74:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014e79:	5a                   	pop    edx
c0014e7a:	ff 73 44             	push   DWORD PTR [ebx+0x44]
c0014e7d:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e83:	e8 94 c1 ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c0014e88:	59                   	pop    ecx
c0014e89:	58                   	pop    eax
c0014e8a:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014e8f:	68 22 b8 02 c0       	push   0xc002b822
c0014e94:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014e9a:	e8 57 c1 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c0014e9f:	58                   	pop    eax
c0014ea0:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014ea5:	5a                   	pop    edx
c0014ea6:	ff 73 3c             	push   DWORD PTR [ebx+0x3c]
c0014ea9:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014eaf:	e8 68 c1 ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c0014eb4:	59                   	pop    ecx
c0014eb5:	58                   	pop    eax
c0014eb6:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014ebb:	68 2a b8 02 c0       	push   0xc002b82a
c0014ec0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ec6:	e8 2b c1 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c0014ecb:	58                   	pop    eax
c0014ecc:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014ed1:	5a                   	pop    edx
c0014ed2:	ff 73 34             	push   DWORD PTR [ebx+0x34]
c0014ed5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014edb:	e8 3c c1 ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c0014ee0:	59                   	pop    ecx
c0014ee1:	58                   	pop    eax
c0014ee2:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014ee7:	68 32 b8 02 c0       	push   0xc002b832
c0014eec:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ef2:	e8 ff c0 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c0014ef7:	58                   	pop    eax
c0014ef8:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014efd:	5a                   	pop    edx
c0014efe:	ff 73 40             	push   DWORD PTR [ebx+0x40]
c0014f01:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f07:	e8 10 c1 ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c0014f0c:	59                   	pop    ecx
c0014f0d:	58                   	pop    eax
c0014f0e:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014f13:	68 3a b8 02 c0       	push   0xc002b83a
c0014f18:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f1e:	e8 d3 c0 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c0014f23:	58                   	pop    eax
c0014f24:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014f29:	5a                   	pop    edx
c0014f2a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0014f2e:	52                   	push   edx
c0014f2f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f35:	e8 e2 c0 ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c0014f3a:	59                   	pop    ecx
c0014f3b:	58                   	pop    eax
c0014f3c:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014f41:	68 43 b8 02 c0       	push   0xc002b843
c0014f46:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f4c:	e8 a5 c0 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c0014f51:	58                   	pop    eax
c0014f52:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014f57:	5a                   	pop    edx
c0014f58:	57                   	push   edi
c0014f59:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f5f:	e8 b8 c0 ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c0014f64:	59                   	pop    ecx
c0014f65:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014f6a:	5f                   	pop    edi
c0014f6b:	68 4b b8 02 c0       	push   0xc002b84b
c0014f70:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f76:	e8 7b c0 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c0014f7b:	58                   	pop    eax
c0014f7c:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014f81:	5a                   	pop    edx
c0014f82:	56                   	push   esi
c0014f83:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014f89:	e8 8e c0 ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c0014f8e:	59                   	pop    ecx
c0014f8f:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014f94:	5e                   	pop    esi
c0014f95:	68 53 b8 02 c0       	push   0xc002b853
c0014f9a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fa0:	e8 51 c0 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c0014fa5:	5f                   	pop    edi
c0014fa6:	58                   	pop    eax
c0014fa7:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014fac:	55                   	push   ebp
c0014fad:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fb3:	e8 64 c0 ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c0014fb8:	58                   	pop    eax
c0014fb9:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014fbe:	5a                   	pop    edx
c0014fbf:	68 5b b8 02 c0       	push   0xc002b85b
c0014fc4:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fca:	e8 27 c0 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c0014fcf:	0f 21 c0             	mov    eax,db0
c0014fd2:	59                   	pop    ecx
c0014fd3:	5e                   	pop    esi
c0014fd4:	50                   	push   eax
c0014fd5:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014fda:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014fe0:	e8 37 c0 ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c0014fe5:	5f                   	pop    edi
c0014fe6:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0014feb:	5d                   	pop    ebp
c0014fec:	68 64 b8 02 c0       	push   0xc002b864
c0014ff1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0014ff7:	e8 fa bf ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c0014ffc:	0f 21 c8             	mov    eax,db1
c0014fff:	5a                   	pop    edx
c0015000:	59                   	pop    ecx
c0015001:	50                   	push   eax
c0015002:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0015007:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001500d:	e8 0a c0 ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c0015012:	5e                   	pop    esi
c0015013:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0015018:	5f                   	pop    edi
c0015019:	68 6c b8 02 c0       	push   0xc002b86c
c001501e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015024:	e8 cd bf ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c0015029:	0f 21 d0             	mov    eax,db2
c001502c:	5d                   	pop    ebp
c001502d:	5a                   	pop    edx
c001502e:	50                   	push   eax
c001502f:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0015034:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001503a:	e8 dd bf ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c001503f:	59                   	pop    ecx
c0015040:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0015045:	5e                   	pop    esi
c0015046:	68 74 b8 02 c0       	push   0xc002b874
c001504b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015051:	e8 a0 bf ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c0015056:	0f 21 d8             	mov    eax,db3
c0015059:	5f                   	pop    edi
c001505a:	5d                   	pop    ebp
c001505b:	50                   	push   eax
c001505c:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0015061:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015067:	e8 b0 bf ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c001506c:	58                   	pop    eax
c001506d:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0015072:	5a                   	pop    edx
c0015073:	68 7c b8 02 c0       	push   0xc002b87c
c0015078:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001507e:	e8 73 bf ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c0015083:	0f 21 f0             	mov    eax,db6
c0015086:	59                   	pop    ecx
c0015087:	5e                   	pop    esi
c0015088:	50                   	push   eax
c0015089:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001508e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015094:	e8 83 bf ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c0015099:	5f                   	pop    edi
c001509a:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001509f:	5d                   	pop    ebp
c00150a0:	68 84 b8 02 c0       	push   0xc002b884
c00150a5:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150ab:	e8 46 bf ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c00150b0:	0f 21 f8             	mov    eax,db7
c00150b3:	5a                   	pop    edx
c00150b4:	59                   	pop    ecx
c00150b5:	50                   	push   eax
c00150b6:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c00150bb:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150c1:	e8 56 bf ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c00150c6:	5e                   	pop    esi
c00150c7:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c00150ca:	e8 91 89 00 00       	call   c001da60 <Thr::getDriverNameFromAddress(unsigned long)>
c00150cf:	83 c4 10             	add    esp,0x10
c00150d2:	85 c0                	test   eax,eax
c00150d4:	74 7d                	je     c0015153 <displayDebugInfo(regs*)+0x48b>
c00150d6:	89 c6                	mov    esi,eax
c00150d8:	50                   	push   eax
c00150d9:	50                   	push   eax
c00150da:	56                   	push   esi
c00150db:	68 8c b8 02 c0       	push   0xc002b88c
c00150e0:	e8 62 dd ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00150e5:	5a                   	pop    edx
c00150e6:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c00150eb:	59                   	pop    ecx
c00150ec:	68 9a b8 02 c0       	push   0xc002b89a
c00150f1:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c00150f7:	e8 fa be ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c00150fc:	5f                   	pop    edi
c00150fd:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0015102:	5d                   	pop    ebp
c0015103:	56                   	push   esi
c0015104:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001510a:	e8 e7 be ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001510f:	58                   	pop    eax
c0015110:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0015115:	5a                   	pop    edx
c0015116:	68 a6 b8 02 c0       	push   0xc002b8a6
c001511b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c0015121:	e8 d0 be ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c0015126:	59                   	pop    ecx
c0015127:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001512c:	8b b8 26 05 00 00    	mov    edi,DWORD PTR [eax+0x526]
c0015132:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c0015135:	e8 5d 89 00 00       	call   c001da97 <Thr::getDriverOffsetFromAddress(unsigned long)>
c001513a:	5b                   	pop    ebx
c001513b:	5d                   	pop    ebp
c001513c:	50                   	push   eax
c001513d:	57                   	push   edi
c001513e:	e8 d9 be ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c0015143:	58                   	pop    eax
c0015144:	5a                   	pop    edx
c0015145:	56                   	push   esi
c0015146:	68 b2 b8 02 c0       	push   0xc002b8b2
c001514b:	e8 f7 dc ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0015150:	83 c4 10             	add    esp,0x10
c0015153:	fa                   	cli    
c0015154:	f4                   	hlt    
c0015155:	eb fe                	jmp    c0015155 <displayDebugInfo(regs*)+0x48d>

c0015157 <x87EmulHandler(regs*, void*)>:
c0015157:	83 ec 0c             	sub    esp,0xc
c001515a:	0f 20 c2             	mov    edx,cr0
c001515d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015162:	80 78 62 00          	cmp    BYTE PTR [eax+0x62],0x0
c0015166:	75 4b                	jne    c00151b3 <x87EmulHandler(regs*, void*)+0x5c>
c0015168:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001516d:	8b 80 e0 01 00 00    	mov    eax,DWORD PTR [eax+0x1e0]
c0015173:	85 c0                	test   eax,eax
c0015175:	74 05                	je     c001517c <x87EmulHandler(regs*, void*)+0x25>
c0015177:	83 e2 08             	and    edx,0x8
c001517a:	75 17                	jne    c0015193 <x87EmulHandler(regs*, void*)+0x3c>
c001517c:	83 ec 0c             	sub    esp,0xc
c001517f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0015183:	e8 49 af 00 00       	call   c00200d1 <Vm::x87Handler(regs*)>
c0015188:	83 c4 10             	add    esp,0x10
c001518b:	84 c0                	test   al,al
c001518d:	74 24                	je     c00151b3 <x87EmulHandler(regs*, void*)+0x5c>
c001518f:	83 c4 0c             	add    esp,0xc
c0015192:	c3                   	ret    
c0015193:	83 ec 0c             	sub    esp,0xc
c0015196:	68 d8 b8 02 c0       	push   0xc002b8d8
c001519b:	e8 a7 dc ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00151a0:	0f 06                	clts   
c00151a2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c00151a7:	83 c4 10             	add    esp,0x10
c00151aa:	a3 e8 ef 02 c0       	mov    ds:0xc002efe8,eax
c00151af:	83 c4 0c             	add    esp,0xc
c00151b2:	c3                   	ret    
c00151b3:	83 ec 0c             	sub    esp,0xc
c00151b6:	68 c2 b8 02 c0       	push   0xc002b8c2
c00151bb:	e8 87 dc ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00151c0:	5a                   	pop    edx
c00151c1:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00151c5:	e8 fe fa ff ff       	call   c0014cc8 <displayDebugInfo(regs*)>

c00151ca <gpFault(regs*, void*)>:
c00151ca:	53                   	push   ebx
c00151cb:	83 ec 14             	sub    esp,0x14
c00151ce:	c7 05 e4 ef 02 c0 4e f4 01 c0 	mov    DWORD PTR ds:0xc002efe4,0xc001f44e
c00151d8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00151dc:	53                   	push   ebx
c00151dd:	e8 6c a2 00 00       	call   c001f44e <Vm::faultHandler(regs*)>
c00151e2:	83 c4 10             	add    esp,0x10
c00151e5:	84 c0                	test   al,al
c00151e7:	74 05                	je     c00151ee <gpFault(regs*, void*)+0x24>
c00151e9:	83 c4 08             	add    esp,0x8
c00151ec:	5b                   	pop    ebx
c00151ed:	c3                   	ret    
c00151ee:	83 ec 0c             	sub    esp,0xc
c00151f1:	68 e5 b8 02 c0       	push   0xc002b8e5
c00151f6:	e8 4c dc ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00151fb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00151fe:	e8 c5 fa ff ff       	call   c0014cc8 <displayDebugInfo(regs*)>

c0015203 <pgFault(regs*, void*)>:
c0015203:	83 ec 14             	sub    esp,0x14
c0015206:	0f 20 d0             	mov    eax,cr2
c0015209:	50                   	push   eax
c001520a:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001520f:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015212:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c0015218:	e8 47 d8 ff ff       	call   c0012a64 <VAS::tryLoadBackOffDisk(unsigned long)>
c001521d:	83 c4 10             	add    esp,0x10
c0015220:	84 c0                	test   al,al
c0015222:	74 04                	je     c0015228 <pgFault(regs*, void*)+0x25>
c0015224:	83 c4 0c             	add    esp,0xc
c0015227:	c3                   	ret    
c0015228:	83 ec 0c             	sub    esp,0xc
c001522b:	68 00 b9 02 c0       	push   0xc002b900
c0015230:	e8 12 dc ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0015235:	58                   	pop    eax
c0015236:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001523a:	e8 89 fa ff ff       	call   c0014cc8 <displayDebugInfo(regs*)>

c001523f <otherISRHandler(regs*, void*)>:
c001523f:	53                   	push   ebx
c0015240:	83 ec 0c             	sub    esp,0xc
c0015243:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c0015247:	8b 43 30             	mov    eax,DWORD PTR [ebx+0x30]
c001524a:	50                   	push   eax
c001524b:	50                   	push   eax
c001524c:	68 0d b9 02 c0       	push   0xc002b90d
c0015251:	e8 f1 db ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0015256:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0015259:	e8 6a fa ff ff       	call   c0014cc8 <displayDebugInfo(regs*)>

c001525e <opcodeFault(regs*, void*)>:
c001525e:	55                   	push   ebp
c001525f:	89 e5                	mov    ebp,esp
c0015261:	56                   	push   esi
c0015262:	53                   	push   ebx
c0015263:	83 ec 40             	sub    esp,0x40
c0015266:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001526b:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0015271:	8a 80 94 11 00 00    	mov    al,BYTE PTR [eax+0x1194]
c0015277:	84 c0                	test   al,al
c0015279:	74 24                	je     c001529f <opcodeFault(regs*, void*)+0x41>
c001527b:	83 ec 0c             	sub    esp,0xc
c001527e:	68 2c b9 02 c0       	push   0xc002b92c
c0015283:	e8 bf db ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0015288:	83 c4 10             	add    esp,0x10
c001528b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001528e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015291:	8d 50 19             	lea    edx,[eax+0x19]
c0015294:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015297:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001529a:	e9 d5 05 00 00       	jmp    c0015874 <opcodeFault(regs*, void*)+0x616>
c001529f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152a2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152a5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c00152a8:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
c00152ac:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
c00152b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152b3:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152b6:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00152b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152bc:	8a 00                	mov    al,BYTE PTR [eax]
c00152be:	3c f0                	cmp    al,0xf0
c00152c0:	75 17                	jne    c00152d9 <opcodeFault(regs*, void*)+0x7b>
c00152c2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152c8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152cb:	8d 50 01             	lea    edx,[eax+0x1]
c00152ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152d1:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00152d4:	e9 da 00 00 00       	jmp    c00153b3 <opcodeFault(regs*, void*)+0x155>
c00152d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152dc:	8a 00                	mov    al,BYTE PTR [eax]
c00152de:	3c f2                	cmp    al,0xf2
c00152e0:	74 09                	je     c00152eb <opcodeFault(regs*, void*)+0x8d>
c00152e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00152e5:	8a 00                	mov    al,BYTE PTR [eax]
c00152e7:	3c f3                	cmp    al,0xf3
c00152e9:	75 1b                	jne    c0015306 <opcodeFault(regs*, void*)+0xa8>
c00152eb:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00152ef:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00152f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152f5:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00152f8:	8d 50 01             	lea    edx,[eax+0x1]
c00152fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00152fe:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015301:	e9 ad 00 00 00       	jmp    c00153b3 <opcodeFault(regs*, void*)+0x155>
c0015306:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015309:	8a 00                	mov    al,BYTE PTR [eax]
c001530b:	3c 66                	cmp    al,0x66
c001530d:	75 1f                	jne    c001532e <opcodeFault(regs*, void*)+0xd0>
c001530f:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015313:	c6 45 f2 01          	mov    BYTE PTR [ebp-0xe],0x1
c0015317:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001531a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001531d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015320:	8d 50 01             	lea    edx,[eax+0x1]
c0015323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015326:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015329:	e9 85 00 00 00       	jmp    c00153b3 <opcodeFault(regs*, void*)+0x155>
c001532e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015331:	8a 00                	mov    al,BYTE PTR [eax]
c0015333:	3c 67                	cmp    al,0x67
c0015335:	75 18                	jne    c001534f <opcodeFault(regs*, void*)+0xf1>
c0015337:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c001533b:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c001533e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015341:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015344:	8d 50 01             	lea    edx,[eax+0x1]
c0015347:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001534a:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001534d:	eb 64                	jmp    c00153b3 <opcodeFault(regs*, void*)+0x155>
c001534f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015352:	8a 00                	mov    al,BYTE PTR [eax]
c0015354:	3c 2e                	cmp    al,0x2e
c0015356:	74 09                	je     c0015361 <opcodeFault(regs*, void*)+0x103>
c0015358:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001535b:	8a 00                	mov    al,BYTE PTR [eax]
c001535d:	3c 3e                	cmp    al,0x3e
c001535f:	75 18                	jne    c0015379 <opcodeFault(regs*, void*)+0x11b>
c0015361:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c0015365:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015368:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001536b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001536e:	8d 50 01             	lea    edx,[eax+0x1]
c0015371:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015374:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015377:	eb 3a                	jmp    c00153b3 <opcodeFault(regs*, void*)+0x155>
c0015379:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001537c:	8a 00                	mov    al,BYTE PTR [eax]
c001537e:	3c 36                	cmp    al,0x36
c0015380:	74 1b                	je     c001539d <opcodeFault(regs*, void*)+0x13f>
c0015382:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015385:	8a 00                	mov    al,BYTE PTR [eax]
c0015387:	3c 26                	cmp    al,0x26
c0015389:	74 12                	je     c001539d <opcodeFault(regs*, void*)+0x13f>
c001538b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001538e:	8a 00                	mov    al,BYTE PTR [eax]
c0015390:	3c 64                	cmp    al,0x64
c0015392:	74 09                	je     c001539d <opcodeFault(regs*, void*)+0x13f>
c0015394:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015397:	8a 00                	mov    al,BYTE PTR [eax]
c0015399:	3c 65                	cmp    al,0x65
c001539b:	75 16                	jne    c00153b3 <opcodeFault(regs*, void*)+0x155>
c001539d:	c6 45 f3 01          	mov    BYTE PTR [ebp-0xd],0x1
c00153a1:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153a7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153aa:	8d 50 01             	lea    edx,[eax+0x1]
c00153ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153b0:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153b3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153b6:	8a 00                	mov    al,BYTE PTR [eax]
c00153b8:	3c 0f                	cmp    al,0xf
c00153ba:	0f 85 ad 00 00 00    	jne    c001546d <opcodeFault(regs*, void*)+0x20f>
c00153c0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153c3:	40                   	inc    eax
c00153c4:	8a 00                	mov    al,BYTE PTR [eax]
c00153c6:	3c c2                	cmp    al,0xc2
c00153c8:	74 0e                	je     c00153d8 <opcodeFault(regs*, void*)+0x17a>
c00153ca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153cd:	40                   	inc    eax
c00153ce:	8a 00                	mov    al,BYTE PTR [eax]
c00153d0:	3c c3                	cmp    al,0xc3
c00153d2:	0f 85 95 00 00 00    	jne    c001546d <opcodeFault(regs*, void*)+0x20f>
c00153d8:	83 ec 0c             	sub    esp,0xc
c00153db:	68 4f b9 02 c0       	push   0xc002b94f
c00153e0:	e8 62 da ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00153e5:	83 c4 10             	add    esp,0x10
c00153e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153eb:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00153ee:	8d 50 01             	lea    edx,[eax+0x1]
c00153f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00153f4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c00153f7:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00153fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00153fd:	8a 00                	mov    al,BYTE PTR [eax]
c00153ff:	8d 50 fe             	lea    edx,[eax-0x2]
c0015402:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015405:	88 10                	mov    BYTE PTR [eax],dl
c0015407:	8d 45 c2             	lea    eax,[ebp-0x3e]
c001540a:	50                   	push   eax
c001540b:	8d 45 c3             	lea    eax,[ebp-0x3d]
c001540e:	50                   	push   eax
c001540f:	8d 45 c4             	lea    eax,[ebp-0x3c]
c0015412:	50                   	push   eax
c0015413:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015416:	e8 b7 4a 00 00       	call   c0019ed2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c001541b:	83 c4 10             	add    esp,0x10
c001541e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015421:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015424:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015427:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
c001542a:	01 d0                	add    eax,edx
c001542c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c001542f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015432:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015435:	2b 45 e8             	sub    eax,DWORD PTR [ebp-0x18]
c0015438:	48                   	dec    eax
c0015439:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c001543c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001543f:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0015442:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015445:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015448:	83 ec 04             	sub    esp,0x4
c001544b:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c001544e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015451:	50                   	push   eax
c0015452:	e8 5d ad fe ff       	call   c00001b4 <voodooXADD>
c0015457:	83 c4 10             	add    esp,0x10
c001545a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c001545d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0015460:	01 c2                	add    edx,eax
c0015462:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015465:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015468:	e9 07 04 00 00       	jmp    c0015874 <opcodeFault(regs*, void*)+0x616>
c001546d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015470:	8a 00                	mov    al,BYTE PTR [eax]
c0015472:	3c 0f                	cmp    al,0xf
c0015474:	0f 85 8b 01 00 00    	jne    c0015605 <opcodeFault(regs*, void*)+0x3a7>
c001547a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001547d:	40                   	inc    eax
c001547e:	8a 00                	mov    al,BYTE PTR [eax]
c0015480:	3c c7                	cmp    al,0xc7
c0015482:	0f 86 7d 01 00 00    	jbe    c0015605 <opcodeFault(regs*, void*)+0x3a7>
c0015488:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c001548b:	40                   	inc    eax
c001548c:	8a 00                	mov    al,BYTE PTR [eax]
c001548e:	3c cf                	cmp    al,0xcf
c0015490:	0f 87 6f 01 00 00    	ja     c0015605 <opcodeFault(regs*, void*)+0x3a7>
c0015496:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015499:	40                   	inc    eax
c001549a:	8a 00                	mov    al,BYTE PTR [eax]
c001549c:	83 c0 38             	add    eax,0x38
c001549f:	88 45 df             	mov    BYTE PTR [ebp-0x21],al
c00154a2:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c00154a6:	75 0b                	jne    c00154b3 <opcodeFault(regs*, void*)+0x255>
c00154a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ab:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c00154ae:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154b1:	eb 75                	jmp    c0015528 <opcodeFault(regs*, void*)+0x2ca>
c00154b3:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c00154b7:	75 0b                	jne    c00154c4 <opcodeFault(regs*, void*)+0x266>
c00154b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154bc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00154bf:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154c2:	eb 64                	jmp    c0015528 <opcodeFault(regs*, void*)+0x2ca>
c00154c4:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c00154c8:	75 0b                	jne    c00154d5 <opcodeFault(regs*, void*)+0x277>
c00154ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154cd:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c00154d0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154d3:	eb 53                	jmp    c0015528 <opcodeFault(regs*, void*)+0x2ca>
c00154d5:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00154d9:	75 0b                	jne    c00154e6 <opcodeFault(regs*, void*)+0x288>
c00154db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154de:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00154e1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154e4:	eb 42                	jmp    c0015528 <opcodeFault(regs*, void*)+0x2ca>
c00154e6:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00154ea:	75 0b                	jne    c00154f7 <opcodeFault(regs*, void*)+0x299>
c00154ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00154ef:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
c00154f2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00154f5:	eb 31                	jmp    c0015528 <opcodeFault(regs*, void*)+0x2ca>
c00154f7:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00154fb:	75 0b                	jne    c0015508 <opcodeFault(regs*, void*)+0x2aa>
c00154fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015500:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
c0015503:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015506:	eb 20                	jmp    c0015528 <opcodeFault(regs*, void*)+0x2ca>
c0015508:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c001550c:	75 0b                	jne    c0015519 <opcodeFault(regs*, void*)+0x2bb>
c001550e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015511:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0015514:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015517:	eb 0f                	jmp    c0015528 <opcodeFault(regs*, void*)+0x2ca>
c0015519:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c001551d:	75 09                	jne    c0015528 <opcodeFault(regs*, void*)+0x2ca>
c001551f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015522:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0015525:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0015528:	80 7d f2 00          	cmp    BYTE PTR [ebp-0xe],0x0
c001552c:	74 10                	je     c001553e <opcodeFault(regs*, void*)+0x2e0>
c001552e:	81 65 ec 00 00 ff ff 	and    DWORD PTR [ebp-0x14],0xffff0000
c0015535:	81 4d ec ad de 00 00 	or     DWORD PTR [ebp-0x14],0xdead
c001553c:	eb 2d                	jmp    c001556b <opcodeFault(regs*, void*)+0x30d>
c001553e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015541:	c1 e0 18             	shl    eax,0x18
c0015544:	89 c2                	mov    edx,eax
c0015546:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015549:	c1 e0 08             	shl    eax,0x8
c001554c:	25 00 00 ff 00       	and    eax,0xff0000
c0015551:	09 c2                	or     edx,eax
c0015553:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015556:	c1 e8 08             	shr    eax,0x8
c0015559:	25 00 ff 00 00       	and    eax,0xff00
c001555e:	09 c2                	or     edx,eax
c0015560:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0015563:	c1 e8 18             	shr    eax,0x18
c0015566:	09 d0                	or     eax,edx
c0015568:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c001556b:	80 7d df 00          	cmp    BYTE PTR [ebp-0x21],0x0
c001556f:	75 0b                	jne    c001557c <opcodeFault(regs*, void*)+0x31e>
c0015571:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015574:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015577:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001557a:	eb 75                	jmp    c00155f1 <opcodeFault(regs*, void*)+0x393>
c001557c:	80 7d df 01          	cmp    BYTE PTR [ebp-0x21],0x1
c0015580:	75 0b                	jne    c001558d <opcodeFault(regs*, void*)+0x32f>
c0015582:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015585:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015588:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c001558b:	eb 64                	jmp    c00155f1 <opcodeFault(regs*, void*)+0x393>
c001558d:	80 7d df 02          	cmp    BYTE PTR [ebp-0x21],0x2
c0015591:	75 0b                	jne    c001559e <opcodeFault(regs*, void*)+0x340>
c0015593:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015596:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0015599:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c001559c:	eb 53                	jmp    c00155f1 <opcodeFault(regs*, void*)+0x393>
c001559e:	80 7d df 03          	cmp    BYTE PTR [ebp-0x21],0x3
c00155a2:	75 0b                	jne    c00155af <opcodeFault(regs*, void*)+0x351>
c00155a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155a7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155aa:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c00155ad:	eb 42                	jmp    c00155f1 <opcodeFault(regs*, void*)+0x393>
c00155af:	80 7d df 04          	cmp    BYTE PTR [ebp-0x21],0x4
c00155b3:	75 0b                	jne    c00155c0 <opcodeFault(regs*, void*)+0x362>
c00155b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155b8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155bb:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
c00155be:	eb 31                	jmp    c00155f1 <opcodeFault(regs*, void*)+0x393>
c00155c0:	80 7d df 05          	cmp    BYTE PTR [ebp-0x21],0x5
c00155c4:	75 0b                	jne    c00155d1 <opcodeFault(regs*, void*)+0x373>
c00155c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155c9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155cc:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c00155cf:	eb 20                	jmp    c00155f1 <opcodeFault(regs*, void*)+0x393>
c00155d1:	80 7d df 06          	cmp    BYTE PTR [ebp-0x21],0x6
c00155d5:	75 0b                	jne    c00155e2 <opcodeFault(regs*, void*)+0x384>
c00155d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155da:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155dd:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00155e0:	eb 0f                	jmp    c00155f1 <opcodeFault(regs*, void*)+0x393>
c00155e2:	80 7d df 07          	cmp    BYTE PTR [ebp-0x21],0x7
c00155e6:	75 09                	jne    c00155f1 <opcodeFault(regs*, void*)+0x393>
c00155e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155eb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00155ee:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c00155f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155f4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00155f7:	8d 50 02             	lea    edx,[eax+0x2]
c00155fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00155fd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015600:	e9 6f 02 00 00       	jmp    c0015874 <opcodeFault(regs*, void*)+0x616>
c0015605:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015608:	8a 00                	mov    al,BYTE PTR [eax]
c001560a:	3c 0f                	cmp    al,0xf
c001560c:	0f 85 8d 01 00 00    	jne    c001579f <opcodeFault(regs*, void*)+0x541>
c0015612:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015615:	40                   	inc    eax
c0015616:	8a 00                	mov    al,BYTE PTR [eax]
c0015618:	3c c7                	cmp    al,0xc7
c001561a:	0f 85 7f 01 00 00    	jne    c001579f <opcodeFault(regs*, void*)+0x541>
c0015620:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c0015623:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015626:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015629:	8d 50 01             	lea    edx,[eax+0x1]
c001562c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001562f:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c0015632:	8d 45 ba             	lea    eax,[ebp-0x46]
c0015635:	50                   	push   eax
c0015636:	8d 45 bb             	lea    eax,[ebp-0x45]
c0015639:	50                   	push   eax
c001563a:	8d 45 bc             	lea    eax,[ebp-0x44]
c001563d:	50                   	push   eax
c001563e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0015641:	e8 8c 48 00 00       	call   c0019ed2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0015646:	83 c4 10             	add    esp,0x10
c0015649:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c001564c:	8a 45 bb             	mov    al,BYTE PTR [ebp-0x45]
c001564f:	83 f0 01             	xor    eax,0x1
c0015652:	84 c0                	test   al,al
c0015654:	0f 84 45 01 00 00    	je     c001579f <opcodeFault(regs*, void*)+0x541>
c001565a:	8a 45 ba             	mov    al,BYTE PTR [ebp-0x46]
c001565d:	3c 01                	cmp    al,0x1
c001565f:	0f 85 3a 01 00 00    	jne    c001579f <opcodeFault(regs*, void*)+0x541>
c0015665:	8a 45 f3             	mov    al,BYTE PTR [ebp-0xd]
c0015668:	83 f0 01             	xor    eax,0x1
c001566b:	84 c0                	test   al,al
c001566d:	0f 84 2c 01 00 00    	je     c001579f <opcodeFault(regs*, void*)+0x541>
c0015673:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015676:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0015679:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c001567c:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
c0015683:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015686:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015689:	89 c2                	mov    edx,eax
c001568b:	b8 00 00 00 00       	mov    eax,0x0
c0015690:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015693:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015696:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015699:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c001569c:	ba 00 00 00 00       	mov    edx,0x0
c00156a1:	09 45 d0             	or     DWORD PTR [ebp-0x30],eax
c00156a4:	09 55 d4             	or     DWORD PTR [ebp-0x2c],edx
c00156a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156aa:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00156ad:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156b0:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
c00156b7:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c00156ba:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00156bd:	89 c2                	mov    edx,eax
c00156bf:	b8 00 00 00 00       	mov    eax,0x0
c00156c4:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
c00156c7:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
c00156ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00156cd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00156d0:	ba 00 00 00 00       	mov    edx,0x0
c00156d5:	09 45 c8             	or     DWORD PTR [ebp-0x38],eax
c00156d8:	09 55 cc             	or     DWORD PTR [ebp-0x34],edx
c00156db:	fa                   	cli    
c00156dc:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c00156e1:	40                   	inc    eax
c00156e2:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c00156e7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00156ea:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c00156ed:	8b 00                	mov    eax,DWORD PTR [eax]
c00156ef:	89 c1                	mov    ecx,eax
c00156f1:	33 4d d0             	xor    ecx,DWORD PTR [ebp-0x30]
c00156f4:	89 cb                	mov    ebx,ecx
c00156f6:	89 d0                	mov    eax,edx
c00156f8:	33 45 d4             	xor    eax,DWORD PTR [ebp-0x2c]
c00156fb:	89 c6                	mov    esi,eax
c00156fd:	89 f0                	mov    eax,esi
c00156ff:	09 d8                	or     eax,ebx
c0015701:	85 c0                	test   eax,eax
c0015703:	75 21                	jne    c0015726 <opcodeFault(regs*, void*)+0x4c8>
c0015705:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0015708:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
c001570b:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c001570e:	89 01                	mov    DWORD PTR [ecx],eax
c0015710:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0015713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015716:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015719:	83 c8 40             	or     eax,0x40
c001571c:	89 c2                	mov    edx,eax
c001571e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015721:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015724:	eb 3e                	jmp    c0015764 <opcodeFault(regs*, void*)+0x506>
c0015726:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0015729:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c001572c:	8b 00                	mov    eax,DWORD PTR [eax]
c001572e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0015731:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0015734:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c0015737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001573a:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
c001573d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0015740:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c0015743:	89 d0                	mov    eax,edx
c0015745:	31 d2                	xor    edx,edx
c0015747:	89 c3                	mov    ebx,eax
c0015749:	89 d6                	mov    esi,edx
c001574b:	89 da                	mov    edx,ebx
c001574d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015750:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
c0015753:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015756:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015759:	83 e0 bf             	and    eax,0xffffffbf
c001575c:	89 c2                	mov    edx,eax
c001575e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015761:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
c0015764:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0015769:	48                   	dec    eax
c001576a:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001576f:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0015774:	85 c0                	test   eax,eax
c0015776:	75 01                	jne    c0015779 <opcodeFault(regs*, void*)+0x51b>
c0015778:	fb                   	sti    
c0015779:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001577c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c001577f:	8b 55 bc             	mov    edx,DWORD PTR [ebp-0x44]
c0015782:	01 c2                	add    edx,eax
c0015784:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015787:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001578a:	83 ec 0c             	sub    esp,0xc
c001578d:	68 5e b9 02 c0       	push   0xc002b95e
c0015792:	e8 b0 d6 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0015797:	83 c4 10             	add    esp,0x10
c001579a:	e9 d5 00 00 00       	jmp    c0015874 <opcodeFault(regs*, void*)+0x616>
c001579f:	83 ec 0c             	sub    esp,0xc
c00157a2:	68 71 b9 02 c0       	push   0xc002b971
c00157a7:	e8 9b d6 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00157ac:	83 c4 10             	add    esp,0x10
c00157af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b2:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157b8:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157bb:	c1 e0 04             	shl    eax,0x4
c00157be:	01 d0                	add    eax,edx
c00157c0:	83 c0 03             	add    eax,0x3
c00157c3:	8a 00                	mov    al,BYTE PTR [eax]
c00157c5:	0f b6 d8             	movzx  ebx,al
c00157c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157cb:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157d1:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157d4:	c1 e0 04             	shl    eax,0x4
c00157d7:	01 d0                	add    eax,edx
c00157d9:	83 c0 02             	add    eax,0x2
c00157dc:	8a 00                	mov    al,BYTE PTR [eax]
c00157de:	0f b6 c8             	movzx  ecx,al
c00157e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157e4:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
c00157e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157ea:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c00157ed:	c1 e0 04             	shl    eax,0x4
c00157f0:	01 d0                	add    eax,edx
c00157f2:	40                   	inc    eax
c00157f3:	8a 00                	mov    al,BYTE PTR [eax]
c00157f5:	0f b6 d0             	movzx  edx,al
c00157f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00157fb:	8b 70 38             	mov    esi,DWORD PTR [eax+0x38]
c00157fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015801:	8b 40 3c             	mov    eax,DWORD PTR [eax+0x3c]
c0015804:	c1 e0 04             	shl    eax,0x4
c0015807:	01 f0                	add    eax,esi
c0015809:	8a 00                	mov    al,BYTE PTR [eax]
c001580b:	0f b6 c0             	movzx  eax,al
c001580e:	83 ec 0c             	sub    esp,0xc
c0015811:	53                   	push   ebx
c0015812:	51                   	push   ecx
c0015813:	52                   	push   edx
c0015814:	50                   	push   eax
c0015815:	68 84 b9 02 c0       	push   0xc002b984
c001581a:	e8 28 d6 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001581f:	83 c4 20             	add    esp,0x20
c0015822:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015825:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015828:	83 c0 03             	add    eax,0x3
c001582b:	8a 00                	mov    al,BYTE PTR [eax]
c001582d:	0f b6 d8             	movzx  ebx,al
c0015830:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015833:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015836:	83 c0 02             	add    eax,0x2
c0015839:	8a 00                	mov    al,BYTE PTR [eax]
c001583b:	0f b6 c8             	movzx  ecx,al
c001583e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015841:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015844:	40                   	inc    eax
c0015845:	8a 00                	mov    al,BYTE PTR [eax]
c0015847:	0f b6 d0             	movzx  edx,al
c001584a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001584d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0015850:	8a 00                	mov    al,BYTE PTR [eax]
c0015852:	0f b6 c0             	movzx  eax,al
c0015855:	83 ec 0c             	sub    esp,0xc
c0015858:	53                   	push   ebx
c0015859:	51                   	push   ecx
c001585a:	52                   	push   edx
c001585b:	50                   	push   eax
c001585c:	68 ac b9 02 c0       	push   0xc002b9ac
c0015861:	e8 e1 d5 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0015866:	83 c4 20             	add    esp,0x20
c0015869:	83 ec 0c             	sub    esp,0xc
c001586c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c001586f:	e8 54 f4 ff ff       	call   c0014cc8 <displayDebugInfo(regs*)>
c0015874:	8d 65 f8             	lea    esp,[ebp-0x8]
c0015877:	5b                   	pop    ebx
c0015878:	5e                   	pop    esi
c0015879:	5d                   	pop    ebp
c001587a:	c3                   	ret    

c001587b <displayProgramFault(char const*)>:
c001587b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0015880:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c0015883:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c0015889:	85 c0                	test   eax,eax
c001588b:	74 15                	je     c00158a2 <displayProgramFault(char const*)+0x27>
c001588d:	83 ec 0c             	sub    esp,0xc
c0015890:	6a 04                	push   0x4
c0015892:	6a 0f                	push   0xf
c0015894:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0015898:	50                   	push   eax
c0015899:	e8 9a b4 ff ff       	call   c0010d38 <VgaText::puts(char const*, VgaColour, VgaColour)>
c001589e:	83 c4 1c             	add    esp,0x1c
c00158a1:	c3                   	ret    
c00158a2:	c3                   	ret    

c00158a3 <setupInterruptController()>:
c00158a3:	55                   	push   ebp
c00158a4:	89 e5                	mov    ebp,esp
c00158a6:	53                   	push   ebx
c00158a7:	83 ec 24             	sub    esp,0x24
c00158aa:	b8 00 00 00 00       	mov    eax,0x0
c00158af:	85 c0                	test   eax,eax
c00158b1:	0f 95 c0             	setne  al
c00158b4:	84 c0                	test   al,al
c00158b6:	74 5b                	je     c0015913 <setupInterruptController()+0x70>
c00158b8:	c7 45 e8 58 21 00 00 	mov    DWORD PTR [ebp-0x18],0x2158
c00158bf:	83 ec 0c             	sub    esp,0xc
c00158c2:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
c00158c5:	e8 de 9f ff ff       	call   c000f8a8 <malloc>
c00158ca:	83 c4 10             	add    esp,0x10
c00158cd:	89 c3                	mov    ebx,eax
c00158cf:	83 ec 0c             	sub    esp,0xc
c00158d2:	53                   	push   ebx
c00158d3:	e8 62 08 01 00       	call   c002613a <APIC::APIC()>
c00158d8:	83 c4 10             	add    esp,0x10
c00158db:	89 5d f0             	mov    DWORD PTR [ebp-0x10],ebx
c00158de:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
c00158e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00158e4:	8b 00                	mov    eax,DWORD PTR [eax]
c00158e6:	83 c0 08             	add    eax,0x8
c00158e9:	8b 00                	mov    eax,DWORD PTR [eax]
c00158eb:	6a 00                	push   0x0
c00158ed:	6a 00                	push   0x0
c00158ef:	6a 00                	push   0x0
c00158f1:	52                   	push   edx
c00158f2:	ff d0                	call   eax
c00158f4:	83 c4 10             	add    esp,0x10
c00158f7:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00158fc:	83 ec 08             	sub    esp,0x8
c00158ff:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015902:	50                   	push   eax
c0015903:	e8 62 e9 ff ff       	call   c001426a <Device::addChild(Device*)>
c0015908:	83 c4 10             	add    esp,0x10
c001590b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c001590e:	e9 89 03 00 00       	jmp    c0015c9c <setupInterruptController()+0x3f9>
c0015913:	a0 e0 17 03 c0       	mov    al,ds:0xc00317e0
c0015918:	84 c0                	test   al,al
c001591a:	75 24                	jne    c0015940 <setupInterruptController()+0x9d>
c001591c:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0015921:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0015927:	83 e2 fe             	and    edx,0xfffffffe
c001592a:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0015930:	83 ec 0c             	sub    esp,0xc
c0015933:	68 d1 b9 02 c0       	push   0xc002b9d1
c0015938:	e8 0a d5 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001593d:	83 c4 10             	add    esp,0x10
c0015940:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0015945:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001594b:	83 e0 01             	and    eax,0x1
c001594e:	84 c0                	test   al,al
c0015950:	0f 95 c0             	setne  al
c0015953:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0015956:	c7 45 e4 58 21 00 00 	mov    DWORD PTR [ebp-0x1c],0x2158
c001595d:	83 ec 0c             	sub    esp,0xc
c0015960:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
c0015963:	e8 40 9f ff ff       	call   c000f8a8 <malloc>
c0015968:	83 c4 10             	add    esp,0x10
c001596b:	89 c3                	mov    ebx,eax
c001596d:	83 ec 0c             	sub    esp,0xc
c0015970:	53                   	push   ebx
c0015971:	e8 1c 0d 01 00       	call   c0026692 <PIC::PIC()>
c0015976:	83 c4 10             	add    esp,0x10
c0015979:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c001597c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001597f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015982:	8b 00                	mov    eax,DWORD PTR [eax]
c0015984:	83 c0 08             	add    eax,0x8
c0015987:	8b 00                	mov    eax,DWORD PTR [eax]
c0015989:	6a 00                	push   0x0
c001598b:	6a 00                	push   0x0
c001598d:	6a 00                	push   0x0
c001598f:	52                   	push   edx
c0015990:	ff d0                	call   eax
c0015992:	83 c4 10             	add    esp,0x10
c0015995:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
c0015999:	74 73                	je     c0015a0e <setupInterruptController()+0x16b>
c001599b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c001599e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159a1:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a3:	83 c0 0c             	add    eax,0xc
c00159a6:	8b 00                	mov    eax,DWORD PTR [eax]
c00159a8:	6a 00                	push   0x0
c00159aa:	6a 00                	push   0x0
c00159ac:	6a 00                	push   0x0
c00159ae:	52                   	push   edx
c00159af:	ff d0                	call   eax
c00159b1:	83 c4 10             	add    esp,0x10
c00159b4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c00159b8:	74 15                	je     c00159cf <setupInterruptController()+0x12c>
c00159ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159bd:	8b 00                	mov    eax,DWORD PTR [eax]
c00159bf:	83 c0 04             	add    eax,0x4
c00159c2:	8b 00                	mov    eax,DWORD PTR [eax]
c00159c4:	83 ec 0c             	sub    esp,0xc
c00159c7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c00159ca:	ff d0                	call   eax
c00159cc:	83 c4 10             	add    esp,0x10
c00159cf:	c7 45 e0 58 21 00 00 	mov    DWORD PTR [ebp-0x20],0x2158
c00159d6:	83 ec 0c             	sub    esp,0xc
c00159d9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
c00159dc:	e8 c7 9e ff ff       	call   c000f8a8 <malloc>
c00159e1:	83 c4 10             	add    esp,0x10
c00159e4:	89 c3                	mov    ebx,eax
c00159e6:	83 ec 0c             	sub    esp,0xc
c00159e9:	53                   	push   ebx
c00159ea:	e8 4b 07 01 00       	call   c002613a <APIC::APIC()>
c00159ef:	83 c4 10             	add    esp,0x10
c00159f2:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
c00159f5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c00159f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00159fb:	8b 00                	mov    eax,DWORD PTR [eax]
c00159fd:	83 c0 08             	add    eax,0x8
c0015a00:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a02:	6a 00                	push   0x0
c0015a04:	6a 00                	push   0x0
c0015a06:	6a 00                	push   0x0
c0015a08:	52                   	push   edx
c0015a09:	ff d0                	call   eax
c0015a0b:	83 c4 10             	add    esp,0x10
c0015a0e:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0015a13:	83 ec 08             	sub    esp,0x8
c0015a16:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a19:	50                   	push   eax
c0015a1a:	e8 4b e8 ff ff       	call   c001426a <Device::addChild(Device*)>
c0015a1f:	83 c4 10             	add    esp,0x10
c0015a22:	c7 05 e8 ef 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002efe8,0x0
c0015a2c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a31:	83 c0 24             	add    eax,0x24
c0015a34:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a36:	6a 00                	push   0x0
c0015a38:	68 3f 52 01 c0       	push   0xc001523f
c0015a3d:	6a 00                	push   0x0
c0015a3f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a42:	ff d0                	call   eax
c0015a44:	83 c4 10             	add    esp,0x10
c0015a47:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a4a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a4c:	83 c0 24             	add    eax,0x24
c0015a4f:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a51:	6a 00                	push   0x0
c0015a53:	68 3f 52 01 c0       	push   0xc001523f
c0015a58:	6a 01                	push   0x1
c0015a5a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a5d:	ff d0                	call   eax
c0015a5f:	83 c4 10             	add    esp,0x10
c0015a62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a65:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a67:	83 c0 24             	add    eax,0x24
c0015a6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a6c:	6a 00                	push   0x0
c0015a6e:	68 25 4b 01 c0       	push   0xc0014b25
c0015a73:	6a 02                	push   0x2
c0015a75:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a78:	ff d0                	call   eax
c0015a7a:	83 c4 10             	add    esp,0x10
c0015a7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a80:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a82:	83 c0 24             	add    eax,0x24
c0015a85:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a87:	6a 00                	push   0x0
c0015a89:	68 3f 52 01 c0       	push   0xc001523f
c0015a8e:	6a 03                	push   0x3
c0015a90:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015a93:	ff d0                	call   eax
c0015a95:	83 c4 10             	add    esp,0x10
c0015a98:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015a9b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015a9d:	83 c0 24             	add    eax,0x24
c0015aa0:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aa2:	6a 00                	push   0x0
c0015aa4:	68 3f 52 01 c0       	push   0xc001523f
c0015aa9:	6a 04                	push   0x4
c0015aab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aae:	ff d0                	call   eax
c0015ab0:	83 c4 10             	add    esp,0x10
c0015ab3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ab6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ab8:	83 c0 24             	add    eax,0x24
c0015abb:	8b 00                	mov    eax,DWORD PTR [eax]
c0015abd:	6a 00                	push   0x0
c0015abf:	68 3f 52 01 c0       	push   0xc001523f
c0015ac4:	6a 05                	push   0x5
c0015ac6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ac9:	ff d0                	call   eax
c0015acb:	83 c4 10             	add    esp,0x10
c0015ace:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ad1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad3:	83 c0 24             	add    eax,0x24
c0015ad6:	8b 00                	mov    eax,DWORD PTR [eax]
c0015ad8:	6a 00                	push   0x0
c0015ada:	68 5e 52 01 c0       	push   0xc001525e
c0015adf:	6a 06                	push   0x6
c0015ae1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ae4:	ff d0                	call   eax
c0015ae6:	83 c4 10             	add    esp,0x10
c0015ae9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015aec:	8b 00                	mov    eax,DWORD PTR [eax]
c0015aee:	83 c0 24             	add    eax,0x24
c0015af1:	8b 00                	mov    eax,DWORD PTR [eax]
c0015af3:	6a 00                	push   0x0
c0015af5:	68 57 51 01 c0       	push   0xc0015157
c0015afa:	6a 07                	push   0x7
c0015afc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015aff:	ff d0                	call   eax
c0015b01:	83 c4 10             	add    esp,0x10
c0015b04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b07:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b09:	83 c0 24             	add    eax,0x24
c0015b0c:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b0e:	6a 00                	push   0x0
c0015b10:	68 40 49 01 c0       	push   0xc0014940
c0015b15:	6a 08                	push   0x8
c0015b17:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b1a:	ff d0                	call   eax
c0015b1c:	83 c4 10             	add    esp,0x10
c0015b1f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b22:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b24:	83 c0 24             	add    eax,0x24
c0015b27:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b29:	6a 00                	push   0x0
c0015b2b:	68 3f 52 01 c0       	push   0xc001523f
c0015b30:	6a 09                	push   0x9
c0015b32:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b35:	ff d0                	call   eax
c0015b37:	83 c4 10             	add    esp,0x10
c0015b3a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b3d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b3f:	83 c0 24             	add    eax,0x24
c0015b42:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b44:	6a 00                	push   0x0
c0015b46:	68 3f 52 01 c0       	push   0xc001523f
c0015b4b:	6a 0a                	push   0xa
c0015b4d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b50:	ff d0                	call   eax
c0015b52:	83 c4 10             	add    esp,0x10
c0015b55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b58:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5a:	83 c0 24             	add    eax,0x24
c0015b5d:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b5f:	6a 00                	push   0x0
c0015b61:	68 3f 52 01 c0       	push   0xc001523f
c0015b66:	6a 0b                	push   0xb
c0015b68:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b6b:	ff d0                	call   eax
c0015b6d:	83 c4 10             	add    esp,0x10
c0015b70:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b73:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b75:	83 c0 24             	add    eax,0x24
c0015b78:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b7a:	6a 00                	push   0x0
c0015b7c:	68 3f 52 01 c0       	push   0xc001523f
c0015b81:	6a 0c                	push   0xc
c0015b83:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015b86:	ff d0                	call   eax
c0015b88:	83 c4 10             	add    esp,0x10
c0015b8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015b8e:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b90:	83 c0 24             	add    eax,0x24
c0015b93:	8b 00                	mov    eax,DWORD PTR [eax]
c0015b95:	6a 00                	push   0x0
c0015b97:	68 ca 51 01 c0       	push   0xc00151ca
c0015b9c:	6a 0d                	push   0xd
c0015b9e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015ba1:	ff d0                	call   eax
c0015ba3:	83 c4 10             	add    esp,0x10
c0015ba6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015ba9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bab:	83 c0 24             	add    eax,0x24
c0015bae:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bb0:	6a 00                	push   0x0
c0015bb2:	68 03 52 01 c0       	push   0xc0015203
c0015bb7:	6a 0e                	push   0xe
c0015bb9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bbc:	ff d0                	call   eax
c0015bbe:	83 c4 10             	add    esp,0x10
c0015bc1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bc4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bc6:	83 c0 24             	add    eax,0x24
c0015bc9:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bcb:	6a 00                	push   0x0
c0015bcd:	68 3f 52 01 c0       	push   0xc001523f
c0015bd2:	6a 0f                	push   0xf
c0015bd4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bd7:	ff d0                	call   eax
c0015bd9:	83 c4 10             	add    esp,0x10
c0015bdc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bdf:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be1:	83 c0 24             	add    eax,0x24
c0015be4:	8b 00                	mov    eax,DWORD PTR [eax]
c0015be6:	6a 00                	push   0x0
c0015be8:	68 3f 52 01 c0       	push   0xc001523f
c0015bed:	6a 10                	push   0x10
c0015bef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015bf2:	ff d0                	call   eax
c0015bf4:	83 c4 10             	add    esp,0x10
c0015bf7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015bfa:	8b 00                	mov    eax,DWORD PTR [eax]
c0015bfc:	83 c0 24             	add    eax,0x24
c0015bff:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c01:	6a 00                	push   0x0
c0015c03:	68 3f 52 01 c0       	push   0xc001523f
c0015c08:	6a 11                	push   0x11
c0015c0a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c0d:	ff d0                	call   eax
c0015c0f:	83 c4 10             	add    esp,0x10
c0015c12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c15:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c17:	83 c0 24             	add    eax,0x24
c0015c1a:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c1c:	6a 00                	push   0x0
c0015c1e:	68 3f 52 01 c0       	push   0xc001523f
c0015c23:	6a 12                	push   0x12
c0015c25:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c28:	ff d0                	call   eax
c0015c2a:	83 c4 10             	add    esp,0x10
c0015c2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c30:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c32:	83 c0 24             	add    eax,0x24
c0015c35:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c37:	6a 00                	push   0x0
c0015c39:	68 3f 52 01 c0       	push   0xc001523f
c0015c3e:	6a 13                	push   0x13
c0015c40:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c43:	ff d0                	call   eax
c0015c45:	83 c4 10             	add    esp,0x10
c0015c48:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c4b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c4d:	83 c0 24             	add    eax,0x24
c0015c50:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c52:	6a 00                	push   0x0
c0015c54:	68 3f 52 01 c0       	push   0xc001523f
c0015c59:	6a 14                	push   0x14
c0015c5b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c5e:	ff d0                	call   eax
c0015c60:	83 c4 10             	add    esp,0x10
c0015c63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c66:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c68:	83 c0 24             	add    eax,0x24
c0015c6b:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c6d:	6a 00                	push   0x0
c0015c6f:	68 3f 52 01 c0       	push   0xc001523f
c0015c74:	6a 1e                	push   0x1e
c0015c76:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c79:	ff d0                	call   eax
c0015c7b:	83 c4 10             	add    esp,0x10
c0015c7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c81:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c83:	83 c0 24             	add    eax,0x24
c0015c86:	8b 00                	mov    eax,DWORD PTR [eax]
c0015c88:	6a 00                	push   0x0
c0015c8a:	68 d7 ca 01 c0       	push   0xc001cad7
c0015c8f:	6a 60                	push   0x60
c0015c91:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
c0015c94:	ff d0                	call   eax
c0015c96:	83 c4 10             	add    esp,0x10
c0015c99:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015c9c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015c9f:	c9                   	leave  
c0015ca0:	c3                   	ret    
c0015ca1:	90                   	nop

c0015ca2 <InterruptController::convertLegacyIRQNumber(int)>:
c0015ca2:	55                   	push   ebp
c0015ca3:	89 e5                	mov    ebp,esp
c0015ca5:	83 ec 08             	sub    esp,0x8
c0015ca8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015cab:	83 ec 0c             	sub    esp,0xc
c0015cae:	50                   	push   eax
c0015caf:	e8 a2 e8 ff ff       	call   c0014556 <Device::getName()>
c0015cb4:	83 c4 10             	add    esp,0x10
c0015cb7:	8a 00                	mov    al,BYTE PTR [eax]
c0015cb9:	3c 41                	cmp    al,0x41
c0015cbb:	0f 94 c0             	sete   al
c0015cbe:	84 c0                	test   al,al
c0015cc0:	74 28                	je     c0015cea <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cc2:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c0015cc6:	7f 12                	jg     c0015cda <InterruptController::convertLegacyIRQNumber(int)+0x38>
c0015cc8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ccb:	05 a0 e0 02 c0       	add    eax,0xc002e0a0
c0015cd0:	8a 00                	mov    al,BYTE PTR [eax]
c0015cd2:	0f b6 c0             	movzx  eax,al
c0015cd5:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c0015cd8:	eb 10                	jmp    c0015cea <InterruptController::convertLegacyIRQNumber(int)+0x48>
c0015cda:	83 ec 0c             	sub    esp,0xc
c0015cdd:	68 c0 b6 02 c0       	push   0xc002b6c0
c0015ce2:	e8 1a 4b 00 00       	call   c001a801 <Krnl::panic(char const*)>
c0015ce7:	83 c4 10             	add    esp,0x10
c0015cea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ced:	c9                   	leave  
c0015cee:	c3                   	ret    
c0015cef:	90                   	nop

c0015cf0 <startGUI(void*)>:
c0015cf0:	55                   	push   ebp
c0015cf1:	89 e5                	mov    ebp,esp
c0015cf3:	53                   	push   ebx
c0015cf4:	83 ec 04             	sub    esp,0x4
c0015cf7:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0015cfc:	48                   	dec    eax
c0015cfd:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0015d02:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0015d07:	85 c0                	test   eax,eax
c0015d09:	75 01                	jne    c0015d0c <startGUI(void*)+0x1c>
c0015d0b:	fb                   	sti    
c0015d0c:	8b 1d 48 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee48
c0015d12:	83 ec 08             	sub    esp,0x8
c0015d15:	6a 01                	push   0x1
c0015d17:	68 34 ba 02 c0       	push   0xc002ba34
c0015d1c:	e8 90 7d 00 00       	call   c001dab1 <Thr::loadDLL(char const*, bool)>
c0015d21:	83 c4 10             	add    esp,0x10
c0015d24:	83 ec 08             	sub    esp,0x8
c0015d27:	53                   	push   ebx
c0015d28:	50                   	push   eax
c0015d29:	e8 ae 7f 00 00       	call   c001dcdc <Thr::executeDLL(unsigned long, void*)>
c0015d2e:	83 c4 10             	add    esp,0x10
c0015d31:	8b 1d 48 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee48
c0015d37:	83 ec 08             	sub    esp,0x8
c0015d3a:	6a 01                	push   0x1
c0015d3c:	68 4e ba 02 c0       	push   0xc002ba4e
c0015d41:	e8 6b 7d 00 00       	call   c001dab1 <Thr::loadDLL(char const*, bool)>
c0015d46:	83 c4 10             	add    esp,0x10
c0015d49:	83 ec 08             	sub    esp,0x8
c0015d4c:	53                   	push   ebx
c0015d4d:	50                   	push   eax
c0015d4e:	e8 89 7f 00 00       	call   c001dcdc <Thr::executeDLL(unsigned long, void*)>
c0015d53:	83 c4 10             	add    esp,0x10
c0015d56:	90                   	nop
c0015d57:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015d5a:	c9                   	leave  
c0015d5b:	c3                   	ret    

c0015d5c <startGUIVESA(void*)>:
c0015d5c:	55                   	push   ebp
c0015d5d:	89 e5                	mov    ebp,esp
c0015d5f:	53                   	push   ebx
c0015d60:	83 ec 04             	sub    esp,0x4
c0015d63:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0015d68:	48                   	dec    eax
c0015d69:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0015d6e:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0015d73:	85 c0                	test   eax,eax
c0015d75:	75 01                	jne    c0015d78 <startGUIVESA(void*)+0x1c>
c0015d77:	fb                   	sti    
c0015d78:	8b 1d 48 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee48
c0015d7e:	83 ec 08             	sub    esp,0x8
c0015d81:	6a 01                	push   0x1
c0015d83:	68 68 ba 02 c0       	push   0xc002ba68
c0015d88:	e8 24 7d 00 00       	call   c001dab1 <Thr::loadDLL(char const*, bool)>
c0015d8d:	83 c4 10             	add    esp,0x10
c0015d90:	83 ec 08             	sub    esp,0x8
c0015d93:	53                   	push   ebx
c0015d94:	50                   	push   eax
c0015d95:	e8 42 7f 00 00       	call   c001dcdc <Thr::executeDLL(unsigned long, void*)>
c0015d9a:	83 c4 10             	add    esp,0x10
c0015d9d:	8b 1d 48 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee48
c0015da3:	83 ec 08             	sub    esp,0x8
c0015da6:	6a 01                	push   0x1
c0015da8:	68 4e ba 02 c0       	push   0xc002ba4e
c0015dad:	e8 ff 7c 00 00       	call   c001dab1 <Thr::loadDLL(char const*, bool)>
c0015db2:	83 c4 10             	add    esp,0x10
c0015db5:	83 ec 08             	sub    esp,0x8
c0015db8:	53                   	push   ebx
c0015db9:	50                   	push   eax
c0015dba:	e8 1d 7f 00 00       	call   c001dcdc <Thr::executeDLL(unsigned long, void*)>
c0015dbf:	83 c4 10             	add    esp,0x10
c0015dc2:	90                   	nop
c0015dc3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0015dc6:	c9                   	leave  
c0015dc7:	c3                   	ret    

c0015dc8 <sendKeyToTerminal(unsigned char)>:
c0015dc8:	55                   	push   ebp
c0015dc9:	89 e5                	mov    ebp,esp
c0015dcb:	83 ec 28             	sub    esp,0x28
c0015dce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015dd1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0015dd4:	a1 24 ef 02 c0       	mov    eax,ds:0xc002ef24
c0015dd9:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
c0015ddd:	83 ec 08             	sub    esp,0x8
c0015de0:	52                   	push   edx
c0015de1:	50                   	push   eax
c0015de2:	e8 29 b4 ff ff       	call   c0011210 <VgaText::receiveKey(unsigned char)>
c0015de7:	83 c4 10             	add    esp,0x10
c0015dea:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
c0015dee:	0f 85 8f 00 00 00    	jne    c0015e83 <sendKeyToTerminal(unsigned char)+0xbb>
c0015df4:	fa                   	cli    
c0015df5:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0015dfa:	40                   	inc    eax
c0015dfb:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0015e00:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c0015e05:	40                   	inc    eax
c0015e06:	a3 84 23 03 c0       	mov    ds:0xc0032384,eax
c0015e0b:	a1 00 f0 02 c0       	mov    eax,ds:0xc002f000
c0015e10:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e13:	c7 05 00 f0 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f000,0x0
c0015e1d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
c0015e21:	74 1f                	je     c0015e42 <sendKeyToTerminal(unsigned char)+0x7a>
c0015e23:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0015e26:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0015e29:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0015e2c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c0015e2f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0015e32:	83 ec 0c             	sub    esp,0xc
c0015e35:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
c0015e38:	e8 17 8b 00 00       	call   c001e954 <unblockTask(ThreadControlBlock*)>
c0015e3d:	83 c4 10             	add    esp,0x10
c0015e40:	eb db                	jmp    c0015e1d <sendKeyToTerminal(unsigned char)+0x55>
c0015e42:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c0015e47:	48                   	dec    eax
c0015e48:	a3 84 23 03 c0       	mov    ds:0xc0032384,eax
c0015e4d:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c0015e52:	85 c0                	test   eax,eax
c0015e54:	75 18                	jne    c0015e6e <sendKeyToTerminal(unsigned char)+0xa6>
c0015e56:	a1 80 23 03 c0       	mov    eax,ds:0xc0032380
c0015e5b:	85 c0                	test   eax,eax
c0015e5d:	74 0f                	je     c0015e6e <sendKeyToTerminal(unsigned char)+0xa6>
c0015e5f:	c7 05 80 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x0
c0015e69:	e8 22 86 00 00       	call   c001e490 <schedule()>
c0015e6e:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0015e73:	48                   	dec    eax
c0015e74:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0015e79:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0015e7e:	85 c0                	test   eax,eax
c0015e80:	75 01                	jne    c0015e83 <sendKeyToTerminal(unsigned char)+0xbb>
c0015e82:	fb                   	sti    
c0015e83:	90                   	nop
c0015e84:	c9                   	leave  
c0015e85:	c3                   	ret    

c0015e86 <sendKeyboardToken(KeyboardToken)>:
c0015e86:	55                   	push   ebp
c0015e87:	89 e5                	mov    ebp,esp
c0015e89:	83 ec 18             	sub    esp,0x18
c0015e8c:	8a 55 0a             	mov    dl,BYTE PTR [ebp+0xa]
c0015e8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015e92:	0f b7 c0             	movzx  eax,ax
c0015e95:	83 f2 01             	xor    edx,0x1
c0015e98:	88 90 20 f0 02 c0    	mov    BYTE PTR [eax-0x3ffd0fe0],dl
c0015e9e:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0015ea3:	85 c0                	test   eax,eax
c0015ea5:	74 24                	je     c0015ecb <sendKeyboardToken(KeyboardToken)+0x45>
c0015ea7:	8b 0d 08 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f008
c0015ead:	83 ec 04             	sub    esp,0x4
c0015eb0:	68 20 f0 02 c0       	push   0xc002f020
c0015eb5:	83 ec 08             	sub    esp,0x8
c0015eb8:	89 e2                	mov    edx,esp
c0015eba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ebd:	89 02                	mov    DWORD PTR [edx],eax
c0015ebf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0015ec2:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c0015ec6:	ff d1                	call   ecx
c0015ec8:	83 c4 10             	add    esp,0x10
c0015ecb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ece:	66 3d 03 02          	cmp    ax,0x203
c0015ed2:	75 07                	jne    c0015edb <sendKeyboardToken(KeyboardToken)+0x55>
c0015ed4:	a0 20 f1 02 c0       	mov    al,ds:0xc002f120
c0015ed9:	84 c0                	test   al,al
c0015edb:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
c0015edf:	8a 55 0c             	mov    dl,BYTE PTR [ebp+0xc]
c0015ee2:	a0 28 f4 02 c0       	mov    al,ds:0xc002f428
c0015ee7:	38 c2                	cmp    dl,al
c0015ee9:	74 1c                	je     c0015f07 <sendKeyboardToken(KeyboardToken)+0x81>
c0015eeb:	8a 45 0c             	mov    al,BYTE PTR [ebp+0xc]
c0015eee:	a2 28 f4 02 c0       	mov    ds:0xc002f428,al
c0015ef3:	a0 28 f4 02 c0       	mov    al,ds:0xc002f428
c0015ef8:	0f b6 c0             	movzx  eax,al
c0015efb:	83 ec 0c             	sub    esp,0xc
c0015efe:	50                   	push   eax
c0015eff:	e8 94 a6 ff ff       	call   c0010598 <setTerminalScrollLock(bool)>
c0015f04:	83 c4 10             	add    esp,0x10
c0015f07:	8a 45 0b             	mov    al,BYTE PTR [ebp+0xb]
c0015f0a:	84 c0                	test   al,al
c0015f0c:	0f 84 ae 00 00 00    	je     c0015fc0 <sendKeyboardToken(KeyboardToken)+0x13a>
c0015f12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f15:	66 3d 10 03          	cmp    ax,0x310
c0015f19:	75 06                	jne    c0015f21 <sendKeyboardToken(KeyboardToken)+0x9b>
c0015f1b:	66 c7 45 08 02 02    	mov    WORD PTR [ebp+0x8],0x202
c0015f21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f24:	66 3d 11 03          	cmp    ax,0x311
c0015f28:	75 06                	jne    c0015f30 <sendKeyboardToken(KeyboardToken)+0xaa>
c0015f2a:	66 c7 45 08 01 02    	mov    WORD PTR [ebp+0x8],0x201
c0015f30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f33:	66 3d 12 03          	cmp    ax,0x312
c0015f37:	75 06                	jne    c0015f3f <sendKeyboardToken(KeyboardToken)+0xb9>
c0015f39:	66 c7 45 08 0c 02    	mov    WORD PTR [ebp+0x8],0x20c
c0015f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f42:	66 3d 13 03          	cmp    ax,0x313
c0015f46:	75 06                	jne    c0015f4e <sendKeyboardToken(KeyboardToken)+0xc8>
c0015f48:	66 c7 45 08 05 02    	mov    WORD PTR [ebp+0x8],0x205
c0015f4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f51:	66 3d 14 03          	cmp    ax,0x314
c0015f55:	75 06                	jne    c0015f5d <sendKeyboardToken(KeyboardToken)+0xd7>
c0015f57:	66 c7 45 08 0d 02    	mov    WORD PTR [ebp+0x8],0x20d
c0015f5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f60:	66 3d 15 03          	cmp    ax,0x315
c0015f64:	75 06                	jne    c0015f6c <sendKeyboardToken(KeyboardToken)+0xe6>
c0015f66:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c0015f6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f6f:	66 3d 16 03          	cmp    ax,0x316
c0015f73:	75 06                	jne    c0015f7b <sendKeyboardToken(KeyboardToken)+0xf5>
c0015f75:	66 c7 45 08 0e 02    	mov    WORD PTR [ebp+0x8],0x20e
c0015f7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f7e:	66 3d 17 03          	cmp    ax,0x317
c0015f82:	75 06                	jne    c0015f8a <sendKeyboardToken(KeyboardToken)+0x104>
c0015f84:	66 c7 45 08 00 02    	mov    WORD PTR [ebp+0x8],0x200
c0015f8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f8d:	66 3d 18 03          	cmp    ax,0x318
c0015f91:	75 06                	jne    c0015f99 <sendKeyboardToken(KeyboardToken)+0x113>
c0015f93:	66 c7 45 08 0b 02    	mov    WORD PTR [ebp+0x8],0x20b
c0015f99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015f9c:	66 3d 19 03          	cmp    ax,0x319
c0015fa0:	75 06                	jne    c0015fa8 <sendKeyboardToken(KeyboardToken)+0x122>
c0015fa2:	66 c7 45 08 04 02    	mov    WORD PTR [ebp+0x8],0x204
c0015fa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fab:	66 3d 1a 03          	cmp    ax,0x31a
c0015faf:	0f 85 c9 00 00 00    	jne    c001607e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fb5:	66 c7 45 08 03 02    	mov    WORD PTR [ebp+0x8],0x203
c0015fbb:	e9 be 00 00 00       	jmp    c001607e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0015fc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fc3:	66 3d 10 03          	cmp    ax,0x310
c0015fc7:	75 0a                	jne    c0015fd3 <sendKeyboardToken(KeyboardToken)+0x14d>
c0015fc9:	66 c7 45 08 30 00    	mov    WORD PTR [ebp+0x8],0x30
c0015fcf:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fd6:	66 3d 11 03          	cmp    ax,0x311
c0015fda:	75 0a                	jne    c0015fe6 <sendKeyboardToken(KeyboardToken)+0x160>
c0015fdc:	66 c7 45 08 31 00    	mov    WORD PTR [ebp+0x8],0x31
c0015fe2:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015fe6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015fe9:	66 3d 12 03          	cmp    ax,0x312
c0015fed:	75 0a                	jne    c0015ff9 <sendKeyboardToken(KeyboardToken)+0x173>
c0015fef:	66 c7 45 08 32 00    	mov    WORD PTR [ebp+0x8],0x32
c0015ff5:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0015ff9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0015ffc:	66 3d 13 03          	cmp    ax,0x313
c0016000:	75 0a                	jne    c001600c <sendKeyboardToken(KeyboardToken)+0x186>
c0016002:	66 c7 45 08 33 00    	mov    WORD PTR [ebp+0x8],0x33
c0016008:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001600c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001600f:	66 3d 14 03          	cmp    ax,0x314
c0016013:	75 0a                	jne    c001601f <sendKeyboardToken(KeyboardToken)+0x199>
c0016015:	66 c7 45 08 34 00    	mov    WORD PTR [ebp+0x8],0x34
c001601b:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001601f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016022:	66 3d 15 03          	cmp    ax,0x315
c0016026:	75 0a                	jne    c0016032 <sendKeyboardToken(KeyboardToken)+0x1ac>
c0016028:	66 c7 45 08 35 00    	mov    WORD PTR [ebp+0x8],0x35
c001602e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016035:	66 3d 16 03          	cmp    ax,0x316
c0016039:	75 0a                	jne    c0016045 <sendKeyboardToken(KeyboardToken)+0x1bf>
c001603b:	66 c7 45 08 36 00    	mov    WORD PTR [ebp+0x8],0x36
c0016041:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016045:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016048:	66 3d 17 03          	cmp    ax,0x317
c001604c:	75 0a                	jne    c0016058 <sendKeyboardToken(KeyboardToken)+0x1d2>
c001604e:	66 c7 45 08 37 00    	mov    WORD PTR [ebp+0x8],0x37
c0016054:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c0016058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001605b:	66 3d 18 03          	cmp    ax,0x318
c001605f:	75 0a                	jne    c001606b <sendKeyboardToken(KeyboardToken)+0x1e5>
c0016061:	66 c7 45 08 38 00    	mov    WORD PTR [ebp+0x8],0x38
c0016067:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001606b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001606e:	66 3d 19 03          	cmp    ax,0x319
c0016072:	75 0a                	jne    c001607e <sendKeyboardToken(KeyboardToken)+0x1f8>
c0016074:	66 c7 45 08 39 00    	mov    WORD PTR [ebp+0x8],0x39
c001607a:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
c001607e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016081:	66 3d 00 02          	cmp    ax,0x200
c0016085:	75 2c                	jne    c00160b3 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016087:	a0 20 f4 02 c0       	mov    al,ds:0xc002f420
c001608c:	83 f0 01             	xor    eax,0x1
c001608f:	84 c0                	test   al,al
c0016091:	74 20                	je     c00160b3 <sendKeyboardToken(KeyboardToken)+0x22d>
c0016093:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0016098:	6a 01                	push   0x1
c001609a:	6a 00                	push   0x0
c001609c:	68 f0 5c 01 c0       	push   0xc0015cf0
c00160a1:	50                   	push   eax
c00160a2:	e8 a5 81 00 00       	call   c001e24c <Process::createThread(void (*)(void*), void*, int)>
c00160a7:	83 c4 10             	add    esp,0x10
c00160aa:	c6 05 20 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f420,0x1
c00160b1:	eb 33                	jmp    c00160e6 <sendKeyboardToken(KeyboardToken)+0x260>
c00160b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160b6:	66 3d 01 02          	cmp    ax,0x201
c00160ba:	75 2a                	jne    c00160e6 <sendKeyboardToken(KeyboardToken)+0x260>
c00160bc:	a0 20 f4 02 c0       	mov    al,ds:0xc002f420
c00160c1:	83 f0 01             	xor    eax,0x1
c00160c4:	84 c0                	test   al,al
c00160c6:	74 1e                	je     c00160e6 <sendKeyboardToken(KeyboardToken)+0x260>
c00160c8:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c00160cd:	6a 01                	push   0x1
c00160cf:	6a 00                	push   0x0
c00160d1:	68 5c 5d 01 c0       	push   0xc0015d5c
c00160d6:	50                   	push   eax
c00160d7:	e8 70 81 00 00       	call   c001e24c <Process::createThread(void (*)(void*), void*, int)>
c00160dc:	83 c4 10             	add    esp,0x10
c00160df:	c6 05 20 f4 02 c0 01 	mov    BYTE PTR ds:0xc002f420,0x1
c00160e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160e9:	66 3d 1d 03          	cmp    ax,0x31d
c00160ed:	75 06                	jne    c00160f5 <sendKeyboardToken(KeyboardToken)+0x26f>
c00160ef:	66 c7 45 08 0a 00    	mov    WORD PTR [ebp+0x8],0xa
c00160f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00160f8:	66 3d 1c 03          	cmp    ax,0x31c
c00160fc:	75 06                	jne    c0016104 <sendKeyboardToken(KeyboardToken)+0x27e>
c00160fe:	66 c7 45 08 2d 00    	mov    WORD PTR [ebp+0x8],0x2d
c0016104:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016107:	66 3d 1b 03          	cmp    ax,0x31b
c001610b:	75 06                	jne    c0016113 <sendKeyboardToken(KeyboardToken)+0x28d>
c001610d:	66 c7 45 08 2b 00    	mov    WORD PTR [ebp+0x8],0x2b
c0016113:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016116:	66 3d 1e 03          	cmp    ax,0x31e
c001611a:	75 06                	jne    c0016122 <sendKeyboardToken(KeyboardToken)+0x29c>
c001611c:	66 c7 45 08 2a 00    	mov    WORD PTR [ebp+0x8],0x2a
c0016122:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016125:	66 3d 1f 03          	cmp    ax,0x31f
c0016129:	75 06                	jne    c0016131 <sendKeyboardToken(KeyboardToken)+0x2ab>
c001612b:	66 c7 45 08 2f 00    	mov    WORD PTR [ebp+0x8],0x2f
c0016131:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016134:	66 3d 1a 03          	cmp    ax,0x31a
c0016138:	75 06                	jne    c0016140 <sendKeyboardToken(KeyboardToken)+0x2ba>
c001613a:	66 c7 45 08 2e 00    	mov    WORD PTR [ebp+0x8],0x2e
c0016140:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
c0016144:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016147:	83 f0 01             	xor    eax,0x1
c001614a:	84 c0                	test   al,al
c001614c:	74 77                	je     c00161c5 <sendKeyboardToken(KeyboardToken)+0x33f>
c001614e:	a0 21 f1 02 c0       	mov    al,ds:0xc002f121
c0016153:	84 c0                	test   al,al
c0016155:	74 41                	je     c0016198 <sendKeyboardToken(KeyboardToken)+0x312>
c0016157:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c001615b:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
c001615f:	74 2b                	je     c001618c <sendKeyboardToken(KeyboardToken)+0x306>
c0016161:	8b 15 24 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f424
c0016167:	89 d0                	mov    eax,edx
c0016169:	c1 e0 02             	shl    eax,0x2
c001616c:	01 d0                	add    eax,edx
c001616e:	01 c0                	add    eax,eax
c0016170:	a3 24 f4 02 c0       	mov    ds:0xc002f424,eax
c0016175:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016178:	0f b7 c0             	movzx  eax,ax
c001617b:	8d 50 d0             	lea    edx,[eax-0x30]
c001617e:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c0016183:	01 d0                	add    eax,edx
c0016185:	a3 24 f4 02 c0       	mov    ds:0xc002f424,eax
c001618a:	eb 6d                	jmp    c00161f9 <sendKeyboardToken(KeyboardToken)+0x373>
c001618c:	c7 05 24 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f424,0x0
c0016196:	eb 61                	jmp    c00161f9 <sendKeyboardToken(KeyboardToken)+0x373>
c0016198:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c001619d:	85 c0                	test   eax,eax
c001619f:	74 18                	je     c00161b9 <sendKeyboardToken(KeyboardToken)+0x333>
c00161a1:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c00161a6:	0f b6 c0             	movzx  eax,al
c00161a9:	83 ec 0c             	sub    esp,0xc
c00161ac:	50                   	push   eax
c00161ad:	e8 16 fc ff ff       	call   c0015dc8 <sendKeyToTerminal(unsigned char)>
c00161b2:	83 c4 10             	add    esp,0x10
c00161b5:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161b9:	c7 05 24 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f424,0x0
c00161c3:	eb 34                	jmp    c00161f9 <sendKeyboardToken(KeyboardToken)+0x373>
c00161c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00161c8:	66 3d 01 01          	cmp    ax,0x101
c00161cc:	75 2b                	jne    c00161f9 <sendKeyboardToken(KeyboardToken)+0x373>
c00161ce:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c00161d3:	85 c0                	test   eax,eax
c00161d5:	74 18                	je     c00161ef <sendKeyboardToken(KeyboardToken)+0x369>
c00161d7:	a1 24 f4 02 c0       	mov    eax,ds:0xc002f424
c00161dc:	0f b6 c0             	movzx  eax,al
c00161df:	83 ec 0c             	sub    esp,0xc
c00161e2:	50                   	push   eax
c00161e3:	e8 e0 fb ff ff       	call   c0015dc8 <sendKeyToTerminal(unsigned char)>
c00161e8:	83 c4 10             	add    esp,0x10
c00161eb:	c6 45 f6 01          	mov    BYTE PTR [ebp-0xa],0x1
c00161ef:	c7 05 24 f4 02 c0 00 00 00 00 	mov    DWORD PTR ds:0xc002f424,0x0
c00161f9:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c00161fc:	83 f0 01             	xor    eax,0x1
c00161ff:	84 c0                	test   al,al
c0016201:	74 4c                	je     c001624f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016203:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c0016206:	83 f0 01             	xor    eax,0x1
c0016209:	84 c0                	test   al,al
c001620b:	74 42                	je     c001624f <sendKeyboardToken(KeyboardToken)+0x3c9>
c001620d:	a0 20 f1 02 c0       	mov    al,ds:0xc002f120
c0016212:	83 f0 01             	xor    eax,0x1
c0016215:	84 c0                	test   al,al
c0016217:	74 36                	je     c001624f <sendKeyboardToken(KeyboardToken)+0x3c9>
c0016219:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001621c:	66 83 f8 1f          	cmp    ax,0x1f
c0016220:	76 09                	jbe    c001622b <sendKeyboardToken(KeyboardToken)+0x3a5>
c0016222:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016225:	66 83 f8 7e          	cmp    ax,0x7e
c0016229:	76 12                	jbe    c001623d <sendKeyboardToken(KeyboardToken)+0x3b7>
c001622b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001622e:	66 83 f8 0a          	cmp    ax,0xa
c0016232:	74 09                	je     c001623d <sendKeyboardToken(KeyboardToken)+0x3b7>
c0016234:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016237:	66 83 f8 08          	cmp    ax,0x8
c001623b:	75 12                	jne    c001624f <sendKeyboardToken(KeyboardToken)+0x3c9>
c001623d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016240:	0f b6 c0             	movzx  eax,al
c0016243:	83 ec 0c             	sub    esp,0xc
c0016246:	50                   	push   eax
c0016247:	e8 7c fb ff ff       	call   c0015dc8 <sendKeyToTerminal(unsigned char)>
c001624c:	83 c4 10             	add    esp,0x10
c001624f:	8a 45 f6             	mov    al,BYTE PTR [ebp-0xa]
c0016252:	83 f0 01             	xor    eax,0x1
c0016255:	84 c0                	test   al,al
c0016257:	74 4f                	je     c00162a8 <sendKeyboardToken(KeyboardToken)+0x422>
c0016259:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c001625c:	83 f0 01             	xor    eax,0x1
c001625f:	84 c0                	test   al,al
c0016261:	74 45                	je     c00162a8 <sendKeyboardToken(KeyboardToken)+0x422>
c0016263:	a0 20 f1 02 c0       	mov    al,ds:0xc002f120
c0016268:	84 c0                	test   al,al
c001626a:	74 3c                	je     c00162a8 <sendKeyboardToken(KeyboardToken)+0x422>
c001626c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001626f:	66 83 f8 3f          	cmp    ax,0x3f
c0016273:	76 33                	jbe    c00162a8 <sendKeyboardToken(KeyboardToken)+0x422>
c0016275:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016278:	66 83 f8 7f          	cmp    ax,0x7f
c001627c:	77 2a                	ja     c00162a8 <sendKeyboardToken(KeyboardToken)+0x422>
c001627e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016281:	88 c2                	mov    dl,al
c0016283:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016286:	66 83 f8 5f          	cmp    ax,0x5f
c001628a:	76 04                	jbe    c0016290 <sendKeyboardToken(KeyboardToken)+0x40a>
c001628c:	b0 20                	mov    al,0x20
c001628e:	eb 02                	jmp    c0016292 <sendKeyboardToken(KeyboardToken)+0x40c>
c0016290:	b0 00                	mov    al,0x0
c0016292:	29 c2                	sub    edx,eax
c0016294:	88 d0                	mov    al,dl
c0016296:	83 e8 40             	sub    eax,0x40
c0016299:	0f b6 c0             	movzx  eax,al
c001629c:	83 ec 0c             	sub    esp,0xc
c001629f:	50                   	push   eax
c00162a0:	e8 23 fb ff ff       	call   c0015dc8 <sendKeyToTerminal(unsigned char)>
c00162a5:	83 c4 10             	add    esp,0x10
c00162a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162ab:	66 3d 00 03          	cmp    ax,0x300
c00162af:	75 0f                	jne    c00162c0 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162b1:	8a 45 0a             	mov    al,BYTE PTR [ebp+0xa]
c00162b4:	83 f0 01             	xor    eax,0x1
c00162b7:	84 c0                	test   al,al
c00162b9:	74 05                	je     c00162c0 <sendKeyboardToken(KeyboardToken)+0x43a>
c00162bb:	e8 50 aa ff ff       	call   c0010d10 <doTerminalCycle()>
c00162c0:	90                   	nop
c00162c1:	c9                   	leave  
c00162c2:	c3                   	ret    

c00162c3 <clearInternalKeybuffer(VgaText*)>:
c00162c3:	55                   	push   ebp
c00162c4:	89 e5                	mov    ebp,esp
c00162c6:	83 ec 08             	sub    esp,0x8
c00162c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00162cc:	05 98 01 00 00       	add    eax,0x198
c00162d1:	83 ec 0c             	sub    esp,0xc
c00162d4:	50                   	push   eax
c00162d5:	e8 ae a4 fe ff       	call   c0000788 <strlen>
c00162da:	83 c4 10             	add    esp,0x10
c00162dd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00162e0:	81 c2 98 01 00 00    	add    edx,0x198
c00162e6:	83 ec 04             	sub    esp,0x4
c00162e9:	50                   	push   eax
c00162ea:	6a 00                	push   0x0
c00162ec:	52                   	push   edx
c00162ed:	e8 7a a4 fe ff       	call   c000076c <memset>
c00162f2:	83 c4 10             	add    esp,0x10
c00162f5:	90                   	nop
c00162f6:	c9                   	leave  
c00162f7:	c3                   	ret    

c00162f8 <readKeyboard(VgaText*, char*, unsigned long)>:
c00162f8:	55                   	push   ebp
c00162f9:	89 e5                	mov    ebp,esp
c00162fb:	83 ec 18             	sub    esp,0x18
c00162fe:	a1 08 f0 02 c0       	mov    eax,ds:0xc002f008
c0016303:	85 c0                	test   eax,eax
c0016305:	74 2a                	je     c0016331 <readKeyboard(VgaText*, char*, unsigned long)+0x39>
c0016307:	66 c7 45 ec 00 00    	mov    WORD PTR [ebp-0x14],0x0
c001630d:	8b 0d 08 f0 02 c0    	mov    ecx,DWORD PTR ds:0xc002f008
c0016313:	83 ec 04             	sub    esp,0x4
c0016316:	68 20 f0 02 c0       	push   0xc002f020
c001631b:	83 ec 08             	sub    esp,0x8
c001631e:	89 e2                	mov    edx,esp
c0016320:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0016323:	89 02                	mov    DWORD PTR [edx],eax
c0016325:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0016328:	66 89 42 04          	mov    WORD PTR [edx+0x4],ax
c001632c:	ff d1                	call   ecx
c001632e:	83 c4 10             	add    esp,0x10
c0016331:	83 ec 0c             	sub    esp,0xc
c0016334:	68 83 ba 02 c0       	push   0xc002ba83
c0016339:	e8 09 cb ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001633e:	83 c4 10             	add    esp,0x10
c0016341:	fb                   	sti    
c0016342:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
c0016349:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
c001634d:	0f 84 a1 00 00 00    	je     c00163f4 <readKeyboard(VgaText*, char*, unsigned long)+0xfc>
c0016353:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0016356:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c001635c:	84 c0                	test   al,al
c001635e:	75 28                	jne    c0016388 <readKeyboard(VgaText*, char*, unsigned long)+0x90>
c0016360:	fa                   	cli    
c0016361:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0016366:	40                   	inc    eax
c0016367:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001636c:	e8 1f 81 00 00       	call   c001e490 <schedule()>
c0016371:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0016376:	48                   	dec    eax
c0016377:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001637c:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0016381:	85 c0                	test   eax,eax
c0016383:	75 ce                	jne    c0016353 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0016385:	fb                   	sti    
c0016386:	eb cb                	jmp    c0016353 <readKeyboard(VgaText*, char*, unsigned long)+0x5b>
c0016388:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c001638b:	8d 50 01             	lea    edx,[eax+0x1]
c001638e:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0016391:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0016394:	8a 92 98 01 00 00    	mov    dl,BYTE PTR [edx+0x198]
c001639a:	88 10                	mov    BYTE PTR [eax],dl
c001639c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c001639f:	8a 80 98 01 00 00    	mov    al,BYTE PTR [eax+0x198]
c00163a5:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
c00163a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00163ab:	05 98 01 00 00       	add    eax,0x198
c00163b0:	83 ec 0c             	sub    esp,0xc
c00163b3:	50                   	push   eax
c00163b4:	e8 cf a3 fe ff       	call   c0000788 <strlen>
c00163b9:	83 c4 10             	add    esp,0x10
c00163bc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163bf:	81 c2 98 01 00 00    	add    edx,0x198
c00163c5:	8d 4a 01             	lea    ecx,[edx+0x1]
c00163c8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c00163cb:	81 c2 98 01 00 00    	add    edx,0x198
c00163d1:	83 ec 04             	sub    esp,0x4
c00163d4:	50                   	push   eax
c00163d5:	51                   	push   ecx
c00163d6:	52                   	push   edx
c00163d7:	e8 c8 a2 fe ff       	call   c00006a4 <memmove>
c00163dc:	83 c4 10             	add    esp,0x10
c00163df:	ff 4d 10             	dec    DWORD PTR [ebp+0x10]
c00163e2:	ff 45 f4             	inc    DWORD PTR [ebp-0xc]
c00163e5:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
c00163e9:	0f 85 5a ff ff ff    	jne    c0016349 <readKeyboard(VgaText*, char*, unsigned long)+0x51>
c00163ef:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163f2:	eb 03                	jmp    c00163f7 <readKeyboard(VgaText*, char*, unsigned long)+0xff>
c00163f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00163f7:	c9                   	leave  
c00163f8:	c3                   	ret    
c00163f9:	90                   	nop

c00163fa <Keyboard::Keyboard(char const*)>:
c00163fa:	83 ec 0c             	sub    esp,0xc
c00163fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016401:	83 ec 08             	sub    esp,0x8
c0016404:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016408:	50                   	push   eax
c0016409:	e8 4c e0 ff ff       	call   c001445a <Device::Device(char const*)>
c001640e:	83 c4 10             	add    esp,0x10
c0016411:	ba a4 ba 02 c0       	mov    edx,0xc002baa4
c0016416:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001641a:	89 10                	mov    DWORD PTR [eax],edx
c001641c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016420:	c7 80 10 01 00 00 06 00 00 00 	mov    DWORD PTR [eax+0x110],0x6
c001642a:	c6 05 04 f0 02 c0 01 	mov    BYTE PTR ds:0xc002f004,0x1
c0016431:	90                   	nop
c0016432:	83 c4 0c             	add    esp,0xc
c0016435:	c3                   	ret    

c0016436 <Keyboard::~Keyboard()>:
c0016436:	83 ec 0c             	sub    esp,0xc
c0016439:	ba a4 ba 02 c0       	mov    edx,0xc002baa4
c001643e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016442:	89 10                	mov    DWORD PTR [eax],edx
c0016444:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016448:	83 ec 0c             	sub    esp,0xc
c001644b:	50                   	push   eax
c001644c:	e8 fd dc ff ff       	call   c001414e <Device::~Device()>
c0016451:	83 c4 10             	add    esp,0x10
c0016454:	90                   	nop
c0016455:	83 c4 0c             	add    esp,0xc
c0016458:	c3                   	ret    
c0016459:	90                   	nop

c001645a <Keyboard::~Keyboard()>:
c001645a:	83 ec 0c             	sub    esp,0xc
c001645d:	83 ec 0c             	sub    esp,0xc
c0016460:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016464:	e8 cd ff ff ff       	call   c0016436 <Keyboard::~Keyboard()>
c0016469:	83 c4 10             	add    esp,0x10
c001646c:	83 ec 08             	sub    esp,0x8
c001646f:	68 5c 01 00 00       	push   0x15c
c0016474:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016478:	e8 ea c8 ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c001647d:	83 c4 10             	add    esp,0x10
c0016480:	83 c4 0c             	add    esp,0xc
c0016483:	c3                   	ret    

c0016484 <LogicalDisk::close(int, int, void*)>:
c0016484:	83 c8 ff             	or     eax,0xffffffff
c0016487:	c3                   	ret    

c0016488 <LogicalDisk::~LogicalDisk()>:
c0016488:	83 ec 0c             	sub    esp,0xc
c001648b:	ba 54 bb 02 c0       	mov    edx,0xc002bb54
c0016490:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016494:	89 10                	mov    DWORD PTR [eax],edx
c0016496:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001649a:	83 ec 0c             	sub    esp,0xc
c001649d:	50                   	push   eax
c001649e:	e8 ab dc ff ff       	call   c001414e <Device::~Device()>
c00164a3:	83 c4 10             	add    esp,0x10
c00164a6:	90                   	nop
c00164a7:	83 c4 0c             	add    esp,0xc
c00164aa:	c3                   	ret    
c00164ab:	90                   	nop

c00164ac <LogicalDisk::~LogicalDisk()>:
c00164ac:	83 ec 0c             	sub    esp,0xc
c00164af:	83 ec 0c             	sub    esp,0xc
c00164b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164b6:	e8 cd ff ff ff       	call   c0016488 <LogicalDisk::~LogicalDisk()>
c00164bb:	83 c4 10             	add    esp,0x10
c00164be:	83 ec 08             	sub    esp,0x8
c00164c1:	68 74 01 00 00       	push   0x174
c00164c6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00164ca:	e8 98 c8 ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c00164cf:	83 c4 10             	add    esp,0x10
c00164d2:	83 c4 0c             	add    esp,0xc
c00164d5:	c3                   	ret    

c00164d6 <LogicalDisk::open(int, int, void*)>:
c00164d6:	83 ec 18             	sub    esp,0x18
c00164d9:	68 d0 ba 02 c0       	push   0xc002bad0
c00164de:	e8 1e 43 00 00       	call   c001a801 <Krnl::panic(char const*)>
c00164e3:	83 c8 ff             	or     eax,0xffffffff
c00164e6:	83 c4 1c             	add    esp,0x1c
c00164e9:	c3                   	ret    

c00164ea <LogicalDisk::absoluteToRelative(unsigned long long)>:
c00164ea:	53                   	push   ebx
c00164eb:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00164ef:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00164f3:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c00164f7:	2b 81 58 01 00 00    	sub    eax,DWORD PTR [ecx+0x158]
c00164fd:	1b 91 5c 01 00 00    	sbb    edx,DWORD PTR [ecx+0x15c]
c0016503:	81 fa ff ff ff 0f    	cmp    edx,0xfffffff
c0016509:	77 10                	ja     c001651b <LogicalDisk::absoluteToRelative(unsigned long long)+0x31>
c001650b:	3b 81 60 01 00 00    	cmp    eax,DWORD PTR [ecx+0x160]
c0016511:	89 d3                	mov    ebx,edx
c0016513:	1b 99 64 01 00 00    	sbb    ebx,DWORD PTR [ecx+0x164]
c0016519:	72 05                	jb     c0016520 <LogicalDisk::absoluteToRelative(unsigned long long)+0x36>
c001651b:	83 c8 ff             	or     eax,0xffffffff
c001651e:	89 c2                	mov    edx,eax
c0016520:	5b                   	pop    ebx
c0016521:	c3                   	ret    

c0016522 <LogicalDisk::relativeToAbsolute(unsigned long long)>:
c0016522:	56                   	push   esi
c0016523:	83 c8 ff             	or     eax,0xffffffff
c0016526:	53                   	push   ebx
c0016527:	89 c2                	mov    edx,eax
c0016529:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001652d:	8b 74 24 0c          	mov    esi,DWORD PTR [esp+0xc]
c0016531:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0016535:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c001653b:	77 27                	ja     c0016564 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c001653d:	89 d8                	mov    eax,ebx
c001653f:	3b 8e 60 01 00 00    	cmp    ecx,DWORD PTR [esi+0x160]
c0016545:	1b 86 64 01 00 00    	sbb    eax,DWORD PTR [esi+0x164]
c001654b:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0016550:	89 c2                	mov    edx,eax
c0016552:	73 10                	jae    c0016564 <LogicalDisk::relativeToAbsolute(unsigned long long)+0x42>
c0016554:	89 c8                	mov    eax,ecx
c0016556:	89 da                	mov    edx,ebx
c0016558:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c001655e:	13 96 5c 01 00 00    	adc    edx,DWORD PTR [esi+0x15c]
c0016564:	5b                   	pop    ebx
c0016565:	5e                   	pop    esi
c0016566:	c3                   	ret    
c0016567:	90                   	nop

c0016568 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>:
c0016568:	83 ec 1c             	sub    esp,0x1c
c001656b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001656f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016573:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016577:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001657b:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001657f:	89 04 24             	mov    DWORD PTR [esp],eax
c0016582:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0016586:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001658a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001658e:	83 ec 08             	sub    esp,0x8
c0016591:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0016595:	50                   	push   eax
c0016596:	e8 bf de ff ff       	call   c001445a <Device::Device(char const*)>
c001659b:	83 c4 10             	add    esp,0x10
c001659e:	ba 54 bb 02 c0       	mov    edx,0xc002bb54
c00165a3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165a7:	89 10                	mov    DWORD PTR [eax],edx
c00165a9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165ad:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165b4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165b8:	c6 80 68 01 00 00 00 	mov    BYTE PTR [eax+0x168],0x0
c00165bf:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00165c3:	c7 80 10 01 00 00 03 00 00 00 	mov    DWORD PTR [eax+0x110],0x3
c00165cd:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165d1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00165d5:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00165d9:	89 81 58 01 00 00    	mov    DWORD PTR [ecx+0x158],eax
c00165df:	89 91 5c 01 00 00    	mov    DWORD PTR [ecx+0x15c],edx
c00165e5:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00165e9:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00165ec:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00165f0:	89 81 60 01 00 00    	mov    DWORD PTR [ecx+0x160],eax
c00165f6:	89 91 64 01 00 00    	mov    DWORD PTR [ecx+0x164],edx
c00165fc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016600:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0016604:	89 90 6c 01 00 00    	mov    DWORD PTR [eax+0x16c],edx
c001660a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001660e:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016618:	90                   	nop
c0016619:	83 c4 1c             	add    esp,0x1c
c001661c:	c3                   	ret    
c001661d:	90                   	nop

c001661e <LogicalDisk::assignDriveLetter()>:
c001661e:	55                   	push   ebp
c001661f:	57                   	push   edi
c0016620:	56                   	push   esi
c0016621:	53                   	push   ebx
c0016622:	83 ec 14             	sub    esp,0x14
c0016625:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0016629:	8b 3d 40 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f440
c001662f:	8b 98 6c 01 00 00    	mov    ebx,DWORD PTR [eax+0x16c]
c0016635:	89 7c 24 08          	mov    DWORD PTR [esp+0x8],edi
c0016639:	8a 83 69 01 00 00    	mov    al,BYTE PTR [ebx+0x169]
c001663f:	8b 3d 44 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f444
c0016645:	3c 01                	cmp    al,0x1
c0016647:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c001664b:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c001664f:	19 c0                	sbb    eax,eax
c0016651:	83 e0 02             	and    eax,0x2
c0016654:	83 c0 41             	add    eax,0x41
c0016657:	0f be e8             	movsx  ebp,al
c001665a:	3c 43                	cmp    al,0x43
c001665c:	75 10                	jne    c001666e <LogicalDisk::assignDriveLetter()+0x50>
c001665e:	80 bb 68 01 00 00 00 	cmp    BYTE PTR [ebx+0x168],0x0
c0016665:	75 5d                	jne    c00166c4 <LogicalDisk::assignDriveLetter()+0xa6>
c0016667:	80 7c 24 03 00       	cmp    BYTE PTR [esp+0x3],0x0
c001666c:	75 56                	jne    c00166c4 <LogicalDisk::assignDriveLetter()+0xa6>
c001666e:	8d 75 bf             	lea    esi,[ebp-0x41]
c0016671:	ba 01 00 00 00       	mov    edx,0x1
c0016676:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c001667a:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c001667e:	d3 e2                	shl    edx,cl
c0016680:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0016684:	89 d7                	mov    edi,edx
c0016686:	89 d6                	mov    esi,edx
c0016688:	c1 ff 1f             	sar    edi,0x1f
c001668b:	23 54 24 08          	and    edx,DWORD PTR [esp+0x8]
c001668f:	21 f9                	and    ecx,edi
c0016691:	09 d1                	or     ecx,edx
c0016693:	75 2f                	jne    c00166c4 <LogicalDisk::assignDriveLetter()+0xa6>
c0016695:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c0016699:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001669d:	88 83 68 01 00 00    	mov    BYTE PTR [ebx+0x168],al
c00166a3:	09 f2                	or     edx,esi
c00166a5:	89 15 40 f4 02 c0    	mov    DWORD PTR ds:0xc002f440,edx
c00166ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c00166af:	09 fa                	or     edx,edi
c00166b1:	8b 7c 24 04          	mov    edi,DWORD PTR [esp+0x4]
c00166b5:	89 15 44 f4 02 c0    	mov    DWORD PTR ds:0xc002f444,edx
c00166bb:	89 1c bd 60 f4 02 c0 	mov    DWORD PTR [edi*4-0x3ffd0ba0],ebx
c00166c2:	eb 08                	jmp    c00166cc <LogicalDisk::assignDriveLetter()+0xae>
c00166c4:	45                   	inc    ebp
c00166c5:	40                   	inc    eax
c00166c6:	3c 5b                	cmp    al,0x5b
c00166c8:	75 90                	jne    c001665a <LogicalDisk::assignDriveLetter()+0x3c>
c00166ca:	31 c0                	xor    eax,eax
c00166cc:	83 c4 14             	add    esp,0x14
c00166cf:	5b                   	pop    ebx
c00166d0:	5e                   	pop    esi
c00166d1:	5f                   	pop    edi
c00166d2:	5d                   	pop    ebp
c00166d3:	c3                   	ret    

c00166d4 <LogicalDisk::mount()>:
c00166d4:	56                   	push   esi
c00166d5:	53                   	push   ebx
c00166d6:	50                   	push   eax
c00166d7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00166db:	8b 1d d4 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efd4
c00166e1:	c7 86 70 01 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x170],0x0
c00166eb:	85 db                	test   ebx,ebx
c00166ed:	74 50                	je     c001673f <LogicalDisk::mount()+0x6b>
c00166ef:	50                   	push   eax
c00166f0:	50                   	push   eax
c00166f1:	ff 35 88 23 03 c0    	push   DWORD PTR ds:0xc0032388
c00166f7:	68 f4 ba 02 c0       	push   0xc002baf4
c00166fc:	e8 46 c7 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0016701:	83 c4 0c             	add    esp,0xc
c0016704:	0f be 86 68 01 00 00 	movsx  eax,BYTE PTR [esi+0x168]
c001670b:	8b 13                	mov    edx,DWORD PTR [ebx]
c001670d:	83 e8 41             	sub    eax,0x41
c0016710:	50                   	push   eax
c0016711:	56                   	push   esi
c0016712:	53                   	push   ebx
c0016713:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c0016716:	83 c4 10             	add    esp,0x10
c0016719:	84 c0                	test   al,al
c001671b:	74 08                	je     c0016725 <LogicalDisk::mount()+0x51>
c001671d:	89 9e 70 01 00 00    	mov    DWORD PTR [esi+0x170],ebx
c0016723:	eb 1c                	jmp    c0016741 <LogicalDisk::mount()+0x6d>
c0016725:	51                   	push   ecx
c0016726:	51                   	push   ecx
c0016727:	ff 35 88 23 03 c0    	push   DWORD PTR ds:0xc0032388
c001672d:	68 0f bb 02 c0       	push   0xc002bb0f
c0016732:	e8 10 c7 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0016737:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001673a:	83 c4 10             	add    esp,0x10
c001673d:	eb ac                	jmp    c00166eb <LogicalDisk::mount()+0x17>
c001673f:	31 c0                	xor    eax,eax
c0016741:	5a                   	pop    edx
c0016742:	5b                   	pop    ebx
c0016743:	5e                   	pop    esi
c0016744:	c3                   	ret    
c0016745:	90                   	nop

c0016746 <LogicalDisk::unmount()>:
c0016746:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001674a:	c7 80 70 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x170],0x0
c0016754:	c3                   	ret    
c0016755:	90                   	nop

c0016756 <LogicalDisk::eject()>:
c0016756:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001675a:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0016760:	8b 10                	mov    edx,DWORD PTR [eax]
c0016762:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0016766:	ff 62 24             	jmp    DWORD PTR [edx+0x24]
c0016769:	90                   	nop

c001676a <LogicalDisk::unassignDriveLetter()>:
c001676a:	57                   	push   edi
c001676b:	56                   	push   esi
c001676c:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016770:	0f be 8a 68 01 00 00 	movsx  ecx,BYTE PTR [edx+0x168]
c0016777:	84 c9                	test   cl,cl
c0016779:	75 0f                	jne    c001678a <LogicalDisk::unassignDriveLetter()+0x20>
c001677b:	c7 44 24 0c 2a bb 02 c0 	mov    DWORD PTR [esp+0xc],0xc002bb2a
c0016783:	5e                   	pop    esi
c0016784:	5f                   	pop    edi
c0016785:	e9 77 40 00 00       	jmp    c001a801 <Krnl::panic(char const*)>
c001678a:	83 e9 41             	sub    ecx,0x41
c001678d:	c6 82 68 01 00 00 00 	mov    BYTE PTR [edx+0x168],0x0
c0016794:	b8 01 00 00 00       	mov    eax,0x1
c0016799:	c7 04 8d 60 f4 02 c0 00 00 00 00 	mov    DWORD PTR [ecx*4-0x3ffd0ba0],0x0
c00167a4:	d3 e0                	shl    eax,cl
c00167a6:	89 c7                	mov    edi,eax
c00167a8:	f7 d0                	not    eax
c00167aa:	c1 ff 1f             	sar    edi,0x1f
c00167ad:	21 05 40 f4 02 c0    	and    DWORD PTR ds:0xc002f440,eax
c00167b3:	89 fe                	mov    esi,edi
c00167b5:	f7 d6                	not    esi
c00167b7:	21 35 44 f4 02 c0    	and    DWORD PTR ds:0xc002f444,esi
c00167bd:	5e                   	pop    esi
c00167be:	5f                   	pop    edi
c00167bf:	c3                   	ret    

c00167c0 <LogicalDisk::read(unsigned long long, int, void*)>:
c00167c0:	57                   	push   edi
c00167c1:	56                   	push   esi
c00167c2:	53                   	push   ebx
c00167c3:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c00167c7:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c00167cb:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00167cf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00167d3:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c00167d9:	77 41                	ja     c001681c <LogicalDisk::read(unsigned long long, int, void*)+0x5c>
c00167db:	99                   	cdq    
c00167dc:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c00167e2:	01 c8                	add    eax,ecx
c00167e4:	11 da                	adc    edx,ebx
c00167e6:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c00167ec:	19 d7                	sbb    edi,edx
c00167ee:	72 33                	jb     c0016823 <LogicalDisk::read(unsigned long long, int, void*)+0x63>
c00167f0:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c00167f6:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c00167fc:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0016800:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016804:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c001680a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016810:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016814:	5b                   	pop    ebx
c0016815:	5e                   	pop    esi
c0016816:	5f                   	pop    edi
c0016817:	e9 ee 0a 00 00       	jmp    c001730a <VCache::read(unsigned long long, int, void*)>
c001681c:	b8 05 00 00 00       	mov    eax,0x5
c0016821:	eb 05                	jmp    c0016828 <LogicalDisk::read(unsigned long long, int, void*)+0x68>
c0016823:	b8 07 00 00 00       	mov    eax,0x7
c0016828:	5b                   	pop    ebx
c0016829:	5e                   	pop    esi
c001682a:	5f                   	pop    edi
c001682b:	c3                   	ret    

c001682c <LogicalDisk::write(unsigned long long, int, void*)>:
c001682c:	57                   	push   edi
c001682d:	56                   	push   esi
c001682e:	53                   	push   ebx
c001682f:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0016833:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016837:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c001683b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001683f:	81 fb ff ff ff 0f    	cmp    ebx,0xfffffff
c0016845:	77 41                	ja     c0016888 <LogicalDisk::write(unsigned long long, int, void*)+0x5c>
c0016847:	99                   	cdq    
c0016848:	8b be 64 01 00 00    	mov    edi,DWORD PTR [esi+0x164]
c001684e:	01 c8                	add    eax,ecx
c0016850:	11 da                	adc    edx,ebx
c0016852:	39 86 60 01 00 00    	cmp    DWORD PTR [esi+0x160],eax
c0016858:	19 d7                	sbb    edi,edx
c001685a:	72 33                	jb     c001688f <LogicalDisk::write(unsigned long long, int, void*)+0x63>
c001685c:	03 8e 58 01 00 00    	add    ecx,DWORD PTR [esi+0x158]
c0016862:	13 9e 5c 01 00 00    	adc    ebx,DWORD PTR [esi+0x15c]
c0016868:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c001686c:	89 5c 24 18          	mov    DWORD PTR [esp+0x18],ebx
c0016870:	8b 86 6c 01 00 00    	mov    eax,DWORD PTR [esi+0x16c]
c0016876:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c001687c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016880:	5b                   	pop    ebx
c0016881:	5e                   	pop    esi
c0016882:	5f                   	pop    edi
c0016883:	e9 96 09 00 00       	jmp    c001721e <VCache::write(unsigned long long, int, void*)>
c0016888:	b8 05 00 00 00       	mov    eax,0x5
c001688d:	eb 05                	jmp    c0016894 <LogicalDisk::write(unsigned long long, int, void*)+0x68>
c001688f:	b8 07 00 00 00       	mov    eax,0x7
c0016894:	5b                   	pop    ebx
c0016895:	5e                   	pop    esi
c0016896:	5f                   	pop    edi
c0016897:	c3                   	ret    

c0016898 <Mouse::Mouse(char const*)>:
c0016898:	83 ec 0c             	sub    esp,0xc
c001689b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001689f:	83 ec 08             	sub    esp,0x8
c00168a2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168a6:	50                   	push   eax
c00168a7:	e8 ae db ff ff       	call   c001445a <Device::Device(char const*)>
c00168ac:	83 c4 10             	add    esp,0x10
c00168af:	ba 80 bb 02 c0       	mov    edx,0xc002bb80
c00168b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168b8:	89 10                	mov    DWORD PTR [eax],edx
c00168ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168be:	c7 80 10 01 00 00 0b 00 00 00 	mov    DWORD PTR [eax+0x110],0xb
c00168c8:	90                   	nop
c00168c9:	83 c4 0c             	add    esp,0xc
c00168cc:	c3                   	ret    
c00168cd:	90                   	nop

c00168ce <Mouse::~Mouse()>:
c00168ce:	83 ec 0c             	sub    esp,0xc
c00168d1:	ba 80 bb 02 c0       	mov    edx,0xc002bb80
c00168d6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168da:	89 10                	mov    DWORD PTR [eax],edx
c00168dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00168e0:	83 ec 0c             	sub    esp,0xc
c00168e3:	50                   	push   eax
c00168e4:	e8 65 d8 ff ff       	call   c001414e <Device::~Device()>
c00168e9:	83 c4 10             	add    esp,0x10
c00168ec:	90                   	nop
c00168ed:	83 c4 0c             	add    esp,0xc
c00168f0:	c3                   	ret    
c00168f1:	90                   	nop

c00168f2 <Mouse::~Mouse()>:
c00168f2:	83 ec 0c             	sub    esp,0xc
c00168f5:	83 ec 0c             	sub    esp,0xc
c00168f8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00168fc:	e8 cd ff ff ff       	call   c00168ce <Mouse::~Mouse()>
c0016901:	83 c4 10             	add    esp,0x10
c0016904:	83 ec 08             	sub    esp,0x8
c0016907:	68 58 01 00 00       	push   0x158
c001690c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016910:	e8 52 c4 ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0016915:	83 c4 10             	add    esp,0x10
c0016918:	83 c4 0c             	add    esp,0xc
c001691b:	c3                   	ret    

c001691c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>:
c001691c:	55                   	push   ebp
c001691d:	57                   	push   edi
c001691e:	56                   	push   esi
c001691f:	53                   	push   ebx
c0016920:	81 ec 20 01 00 00    	sub    esp,0x120
c0016926:	8b b4 24 38 01 00 00 	mov    esi,DWORD PTR [esp+0x138]
c001692d:	8b bc 24 3c 01 00 00 	mov    edi,DWORD PTR [esp+0x13c]
c0016934:	8b 94 24 44 01 00 00 	mov    edx,DWORD PTR [esp+0x144]
c001693b:	8b 84 24 40 01 00 00 	mov    eax,DWORD PTR [esp+0x140]
c0016942:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0016946:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001694a:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001694e:	56                   	push   esi
c001694f:	68 a4 bb 02 c0       	push   0xc002bba4
c0016954:	e8 ee c4 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0016959:	58                   	pop    eax
c001695a:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0016961:	e8 f0 db ff ff       	call   c0014556 <Device::getName()>
c0016966:	5a                   	pop    edx
c0016967:	59                   	pop    ecx
c0016968:	50                   	push   eax
c0016969:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c001696d:	53                   	push   ebx
c001696e:	e8 b5 9e fe ff       	call   c0000828 <strcpy>
c0016973:	5d                   	pop    ebp
c0016974:	58                   	pop    eax
c0016975:	68 d5 bb 02 c0       	push   0xc002bbd5
c001697a:	53                   	push   ebx
c001697b:	e8 e8 9f fe ff       	call   c0000968 <strcat>
c0016980:	c7 04 24 74 01 00 00 	mov    DWORD PTR [esp],0x174
c0016987:	e8 1c 8f ff ff       	call   c000f8a8 <malloc>
c001698c:	83 c4 0c             	add    esp,0xc
c001698f:	89 c5                	mov    ebp,eax
c0016991:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016995:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0016999:	57                   	push   edi
c001699a:	56                   	push   esi
c001699b:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00169a2:	53                   	push   ebx
c00169a3:	50                   	push   eax
c00169a4:	e8 bf fb ff ff       	call   c0016568 <LogicalDisk::LogicalDisk(char const*, PhysicalDisk*, unsigned long long, unsigned long long)>
c00169a9:	83 c4 14             	add    esp,0x14
c00169ac:	55                   	push   ebp
c00169ad:	e8 6c fc ff ff       	call   c001661e <LogicalDisk::assignDriveLetter()>
c00169b2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c00169b5:	0f be d8             	movsx  ebx,al
c00169b8:	e8 17 fd ff ff       	call   c00166d4 <LogicalDisk::mount()>
c00169bd:	58                   	pop    eax
c00169be:	5a                   	pop    edx
c00169bf:	55                   	push   ebp
c00169c0:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c00169c7:	e8 9e d8 ff ff       	call   c001426a <Device::addChild(Device*)>
c00169cc:	59                   	pop    ecx
c00169cd:	5e                   	pop    esi
c00169ce:	53                   	push   ebx
c00169cf:	68 e0 bb 02 c0       	push   0xc002bbe0
c00169d4:	e8 6e c4 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00169d9:	81 c4 2c 01 00 00    	add    esp,0x12c
c00169df:	5b                   	pop    ebx
c00169e0:	5e                   	pop    esi
c00169e1:	5f                   	pop    edi
c00169e2:	5d                   	pop    ebp
c00169e3:	c3                   	ret    

c00169e4 <createPartitionsForDisk(PhysicalDisk*)>:
c00169e4:	55                   	push   ebp
c00169e5:	57                   	push   edi
c00169e6:	56                   	push   esi
c00169e7:	53                   	push   ebx
c00169e8:	81 ec 5c 02 00 00    	sub    esp,0x25c
c00169ee:	8b 9c 24 70 02 00 00 	mov    ebx,DWORD PTR [esp+0x270]
c00169f5:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00169fb:	3d 00 02 00 00       	cmp    eax,0x200
c0016a00:	74 27                	je     c0016a29 <createPartitionsForDisk(PhysicalDisk*)+0x45>
c0016a02:	8b b3 60 01 00 00    	mov    esi,DWORD PTR [ebx+0x160]
c0016a08:	8b bb 64 01 00 00    	mov    edi,DWORD PTR [ebx+0x164]
c0016a0e:	83 ec 10             	sub    esp,0x10
c0016a11:	0f a4 f7 0a          	shld   edi,esi,0xa
c0016a15:	99                   	cdq    
c0016a16:	c1 e6 0a             	shl    esi,0xa
c0016a19:	52                   	push   edx
c0016a1a:	89 fd                	mov    ebp,edi
c0016a1c:	50                   	push   eax
c0016a1d:	55                   	push   ebp
c0016a1e:	56                   	push   esi
c0016a1f:	e8 a0 07 01 00       	call   c00271c4 <__udivdi3>
c0016a24:	e9 b1 00 00 00       	jmp    c0016ada <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a29:	83 ec 0c             	sub    esp,0xc
c0016a2c:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016a2e:	8d 74 24 5c          	lea    esi,[esp+0x5c]
c0016a32:	56                   	push   esi
c0016a33:	6a 01                	push   0x1
c0016a35:	6a 00                	push   0x0
c0016a37:	6a 00                	push   0x0
c0016a39:	53                   	push   ebx
c0016a3a:	ff 50 28             	call   DWORD PTR [eax+0x28]
c0016a3d:	83 c4 20             	add    esp,0x20
c0016a40:	80 bc 24 4e 02 00 00 55 	cmp    BYTE PTR [esp+0x24e],0x55
c0016a48:	75 0a                	jne    c0016a54 <createPartitionsForDisk(PhysicalDisk*)+0x70>
c0016a4a:	80 bc 24 4f 02 00 00 aa 	cmp    BYTE PTR [esp+0x24f],0xaa
c0016a52:	74 2c                	je     c0016a80 <createPartitionsForDisk(PhysicalDisk*)+0x9c>
c0016a54:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016a5a:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016a60:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016a66:	83 ec 10             	sub    esp,0x10
c0016a69:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016a6d:	89 f7                	mov    edi,esi
c0016a6f:	c1 e0 0a             	shl    eax,0xa
c0016a72:	c1 ff 1f             	sar    edi,0x1f
c0016a75:	57                   	push   edi
c0016a76:	56                   	push   esi
c0016a77:	52                   	push   edx
c0016a78:	50                   	push   eax
c0016a79:	e8 46 07 01 00       	call   c00271c4 <__udivdi3>
c0016a7e:	eb 5a                	jmp    c0016ada <createPartitionsForDisk(PhysicalDisk*)+0xf6>
c0016a80:	8a 8c 24 0e 02 00 00 	mov    cl,BYTE PTR [esp+0x20e]
c0016a87:	8a 84 24 1e 02 00 00 	mov    al,BYTE PTR [esp+0x21e]
c0016a8e:	83 e1 7f             	and    ecx,0x7f
c0016a91:	83 e0 7f             	and    eax,0x7f
c0016a94:	01 c1                	add    ecx,eax
c0016a96:	8a 84 24 2e 02 00 00 	mov    al,BYTE PTR [esp+0x22e]
c0016a9d:	83 e0 7f             	and    eax,0x7f
c0016aa0:	01 c1                	add    ecx,eax
c0016aa2:	8a 84 24 3e 02 00 00 	mov    al,BYTE PTR [esp+0x23e]
c0016aa9:	83 e0 7f             	and    eax,0x7f
c0016aac:	00 c1                	add    cl,al
c0016aae:	74 41                	je     c0016af1 <createPartitionsForDisk(PhysicalDisk*)+0x10d>
c0016ab0:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016ab6:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016abc:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016ac2:	83 ec 10             	sub    esp,0x10
c0016ac5:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016ac9:	89 f7                	mov    edi,esi
c0016acb:	c1 e0 0a             	shl    eax,0xa
c0016ace:	c1 ff 1f             	sar    edi,0x1f
c0016ad1:	57                   	push   edi
c0016ad2:	56                   	push   esi
c0016ad3:	52                   	push   edx
c0016ad4:	50                   	push   eax
c0016ad5:	e8 ea 06 01 00       	call   c00271c4 <__udivdi3>
c0016ada:	83 c4 14             	add    esp,0x14
c0016add:	52                   	push   edx
c0016ade:	50                   	push   eax
c0016adf:	6a 00                	push   0x0
c0016ae1:	6a 00                	push   0x0
c0016ae3:	53                   	push   ebx
c0016ae4:	e8 33 fe ff ff       	call   c001691c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016ae9:	83 c4 20             	add    esp,0x20
c0016aec:	e9 79 01 00 00       	jmp    c0016c6a <createPartitionsForDisk(PhysicalDisk*)+0x286>
c0016af1:	89 f0                	mov    eax,esi
c0016af3:	31 f6                	xor    esi,esi
c0016af5:	80 b8 be 01 00 00 80 	cmp    BYTE PTR [eax+0x1be],0x80
c0016afc:	75 02                	jne    c0016b00 <createPartitionsForDisk(PhysicalDisk*)+0x11c>
c0016afe:	89 f1                	mov    ecx,esi
c0016b00:	0f b6 90 c7 01 00 00 	movzx  edx,BYTE PTR [eax+0x1c7]
c0016b07:	0f b6 b8 c8 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c8]
c0016b0e:	c1 e2 08             	shl    edx,0x8
c0016b11:	c1 e7 10             	shl    edi,0x10
c0016b14:	c7 44 f4 14 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x14],0x0
c0016b1c:	09 fa                	or     edx,edi
c0016b1e:	c7 44 f4 34 00 00 00 00 	mov    DWORD PTR [esp+esi*8+0x34],0x0
c0016b26:	0f b6 b8 c6 01 00 00 	movzx  edi,BYTE PTR [eax+0x1c6]
c0016b2d:	83 c0 10             	add    eax,0x10
c0016b30:	09 fa                	or     edx,edi
c0016b32:	0f b6 b8 b9 01 00 00 	movzx  edi,BYTE PTR [eax+0x1b9]
c0016b39:	c1 e7 18             	shl    edi,0x18
c0016b3c:	09 fa                	or     edx,edi
c0016b3e:	0f b6 b8 bc 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bc]
c0016b45:	89 54 f4 10          	mov    DWORD PTR [esp+esi*8+0x10],edx
c0016b49:	c1 e7 10             	shl    edi,0x10
c0016b4c:	0f b6 90 bb 01 00 00 	movzx  edx,BYTE PTR [eax+0x1bb]
c0016b53:	c1 e2 08             	shl    edx,0x8
c0016b56:	09 fa                	or     edx,edi
c0016b58:	0f b6 b8 ba 01 00 00 	movzx  edi,BYTE PTR [eax+0x1ba]
c0016b5f:	09 fa                	or     edx,edi
c0016b61:	0f b6 b8 bd 01 00 00 	movzx  edi,BYTE PTR [eax+0x1bd]
c0016b68:	c1 e7 18             	shl    edi,0x18
c0016b6b:	09 fa                	or     edx,edi
c0016b6d:	89 54 f4 30          	mov    DWORD PTR [esp+esi*8+0x30],edx
c0016b71:	46                   	inc    esi
c0016b72:	83 fe 04             	cmp    esi,0x4
c0016b75:	0f 85 7a ff ff ff    	jne    c0016af5 <createPartitionsForDisk(PhysicalDisk*)+0x111>
c0016b7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016b7f:	83 f0 01             	xor    eax,0x1
c0016b82:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0016b86:	75 57                	jne    c0016bdf <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b88:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0016b8c:	83 f0 01             	xor    eax,0x1
c0016b8f:	0b 44 24 34          	or     eax,DWORD PTR [esp+0x34]
c0016b93:	75 4a                	jne    c0016bdf <createPartitionsForDisk(PhysicalDisk*)+0x1fb>
c0016b95:	88 4c 24 08          	mov    BYTE PTR [esp+0x8],cl
c0016b99:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0016ba1:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c0016ba9:	8b 83 60 01 00 00    	mov    eax,DWORD PTR [ebx+0x160]
c0016baf:	8b 93 64 01 00 00    	mov    edx,DWORD PTR [ebx+0x164]
c0016bb5:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0016bbb:	0f a4 c2 0a          	shld   edx,eax,0xa
c0016bbf:	89 f7                	mov    edi,esi
c0016bc1:	c1 e0 0a             	shl    eax,0xa
c0016bc4:	c1 ff 1f             	sar    edi,0x1f
c0016bc7:	57                   	push   edi
c0016bc8:	56                   	push   esi
c0016bc9:	52                   	push   edx
c0016bca:	50                   	push   eax
c0016bcb:	e8 f4 05 01 00       	call   c00271c4 <__udivdi3>
c0016bd0:	83 c4 10             	add    esp,0x10
c0016bd3:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016bd7:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016bdb:	8a 4c 24 08          	mov    cl,BYTE PTR [esp+0x8]
c0016bdf:	84 c9                	test   cl,cl
c0016be1:	74 53                	je     c0016c36 <createPartitionsForDisk(PhysicalDisk*)+0x252>
c0016be3:	0f b6 c9             	movzx  ecx,cl
c0016be6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016bea:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0016bee:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0016bf2:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0016bf6:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0016bfa:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0016bfe:	8b 44 cc 10          	mov    eax,DWORD PTR [esp+ecx*8+0x10]
c0016c02:	8b 54 cc 14          	mov    edx,DWORD PTR [esp+ecx*8+0x14]
c0016c06:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0016c0a:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0016c0e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0016c12:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0016c16:	89 44 cc 10          	mov    DWORD PTR [esp+ecx*8+0x10],eax
c0016c1a:	89 54 cc 14          	mov    DWORD PTR [esp+ecx*8+0x14],edx
c0016c1e:	8b 44 cc 30          	mov    eax,DWORD PTR [esp+ecx*8+0x30]
c0016c22:	8b 54 cc 34          	mov    edx,DWORD PTR [esp+ecx*8+0x34]
c0016c26:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0016c2a:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0016c2e:	89 74 cc 30          	mov    DWORD PTR [esp+ecx*8+0x30],esi
c0016c32:	89 7c cc 34          	mov    DWORD PTR [esp+ecx*8+0x34],edi
c0016c36:	31 ed                	xor    ebp,ebp
c0016c38:	8b 74 ec 30          	mov    esi,DWORD PTR [esp+ebp*8+0x30]
c0016c3c:	8b 7c ec 34          	mov    edi,DWORD PTR [esp+ebp*8+0x34]
c0016c40:	89 f8                	mov    eax,edi
c0016c42:	09 f0                	or     eax,esi
c0016c44:	74 1e                	je     c0016c64 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c46:	8b 44 ec 10          	mov    eax,DWORD PTR [esp+ebp*8+0x10]
c0016c4a:	8b 54 ec 14          	mov    edx,DWORD PTR [esp+ebp*8+0x14]
c0016c4e:	89 d1                	mov    ecx,edx
c0016c50:	09 c1                	or     ecx,eax
c0016c52:	74 10                	je     c0016c64 <createPartitionsForDisk(PhysicalDisk*)+0x280>
c0016c54:	83 ec 0c             	sub    esp,0xc
c0016c57:	57                   	push   edi
c0016c58:	56                   	push   esi
c0016c59:	52                   	push   edx
c0016c5a:	50                   	push   eax
c0016c5b:	53                   	push   ebx
c0016c5c:	e8 bb fc ff ff       	call   c001691c <makePartition(PhysicalDisk*, unsigned long long, unsigned long long)>
c0016c61:	83 c4 20             	add    esp,0x20
c0016c64:	45                   	inc    ebp
c0016c65:	83 fd 04             	cmp    ebp,0x4
c0016c68:	75 ce                	jne    c0016c38 <createPartitionsForDisk(PhysicalDisk*)+0x254>
c0016c6a:	81 c4 5c 02 00 00    	add    esp,0x25c
c0016c70:	5b                   	pop    ebx
c0016c71:	5e                   	pop    esi
c0016c72:	5f                   	pop    edi
c0016c73:	5d                   	pop    ebp
c0016c74:	c3                   	ret    
c0016c75:	90                   	nop

c0016c76 <Serial::Serial(char const*)>:
c0016c76:	83 ec 0c             	sub    esp,0xc
c0016c79:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c7d:	83 ec 08             	sub    esp,0x8
c0016c80:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016c84:	50                   	push   eax
c0016c85:	e8 d0 d7 ff ff       	call   c001445a <Device::Device(char const*)>
c0016c8a:	83 c4 10             	add    esp,0x10
c0016c8d:	ba 0c bc 02 c0       	mov    edx,0xc002bc0c
c0016c92:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c96:	89 10                	mov    DWORD PTR [eax],edx
c0016c98:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016c9c:	c7 80 10 01 00 00 08 00 00 00 	mov    DWORD PTR [eax+0x110],0x8
c0016ca6:	90                   	nop
c0016ca7:	83 c4 0c             	add    esp,0xc
c0016caa:	c3                   	ret    
c0016cab:	90                   	nop

c0016cac <Serial::~Serial()>:
c0016cac:	83 ec 0c             	sub    esp,0xc
c0016caf:	ba 0c bc 02 c0       	mov    edx,0xc002bc0c
c0016cb4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cb8:	89 10                	mov    DWORD PTR [eax],edx
c0016cba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016cbe:	83 ec 0c             	sub    esp,0xc
c0016cc1:	50                   	push   eax
c0016cc2:	e8 87 d4 ff ff       	call   c001414e <Device::~Device()>
c0016cc7:	83 c4 10             	add    esp,0x10
c0016cca:	90                   	nop
c0016ccb:	83 c4 0c             	add    esp,0xc
c0016cce:	c3                   	ret    
c0016ccf:	90                   	nop

c0016cd0 <Serial::~Serial()>:
c0016cd0:	83 ec 0c             	sub    esp,0xc
c0016cd3:	83 ec 0c             	sub    esp,0xc
c0016cd6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cda:	e8 cd ff ff ff       	call   c0016cac <Serial::~Serial()>
c0016cdf:	83 c4 10             	add    esp,0x10
c0016ce2:	83 ec 08             	sub    esp,0x8
c0016ce5:	68 58 01 00 00       	push   0x158
c0016cea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016cee:	e8 74 c0 ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0016cf3:	83 c4 10             	add    esp,0x10
c0016cf6:	83 c4 0c             	add    esp,0xc
c0016cf9:	c3                   	ret    

c0016cfa <Timer::Timer(char const*)>:
c0016cfa:	83 ec 0c             	sub    esp,0xc
c0016cfd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d01:	83 ec 08             	sub    esp,0x8
c0016d04:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d08:	50                   	push   eax
c0016d09:	e8 4c d7 ff ff       	call   c001445a <Device::Device(char const*)>
c0016d0e:	83 c4 10             	add    esp,0x10
c0016d11:	ba 50 bc 02 c0       	mov    edx,0xc002bc50
c0016d16:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d1a:	89 10                	mov    DWORD PTR [eax],edx
c0016d1c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d20:	c7 80 10 01 00 00 0e 00 00 00 	mov    DWORD PTR [eax+0x110],0xe
c0016d2a:	90                   	nop
c0016d2b:	83 c4 0c             	add    esp,0xc
c0016d2e:	c3                   	ret    
c0016d2f:	90                   	nop

c0016d30 <Timer::~Timer()>:
c0016d30:	83 ec 0c             	sub    esp,0xc
c0016d33:	ba 50 bc 02 c0       	mov    edx,0xc002bc50
c0016d38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d3c:	89 10                	mov    DWORD PTR [eax],edx
c0016d3e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0016d42:	83 ec 0c             	sub    esp,0xc
c0016d45:	50                   	push   eax
c0016d46:	e8 03 d4 ff ff       	call   c001414e <Device::~Device()>
c0016d4b:	83 c4 10             	add    esp,0x10
c0016d4e:	90                   	nop
c0016d4f:	83 c4 0c             	add    esp,0xc
c0016d52:	c3                   	ret    
c0016d53:	90                   	nop

c0016d54 <Timer::~Timer()>:
c0016d54:	83 ec 0c             	sub    esp,0xc
c0016d57:	83 ec 0c             	sub    esp,0xc
c0016d5a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d5e:	e8 cd ff ff ff       	call   c0016d30 <Timer::~Timer()>
c0016d63:	83 c4 10             	add    esp,0x10
c0016d66:	83 ec 08             	sub    esp,0x8
c0016d69:	68 5c 01 00 00       	push   0x15c
c0016d6e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0016d72:	e8 f0 bf ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0016d77:	83 c4 10             	add    esp,0x10
c0016d7a:	83 c4 0c             	add    esp,0xc
c0016d7d:	c3                   	ret    

c0016d7e <Timer::read()>:
c0016d7e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0016d82:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0016d88:	c3                   	ret    

c0016d89 <timerHandler(unsigned long long)>:
c0016d89:	55                   	push   ebp
c0016d8a:	57                   	push   edi
c0016d8b:	56                   	push   esi
c0016d8c:	53                   	push   ebx
c0016d8d:	83 ec 0c             	sub    esp,0xc
c0016d90:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c0016d94:	8b 7c 24 24          	mov    edi,DWORD PTR [esp+0x24]
c0016d98:	01 35 d0 f4 02 c0    	add    DWORD PTR ds:0xc002f4d0,esi
c0016d9e:	11 3d d4 f4 02 c0    	adc    DWORD PTR ds:0xc002f4d4,edi
c0016da4:	80 3d 4d ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee4d,0x0
c0016dab:	0f 84 42 01 00 00    	je     c0016ef3 <timerHandler(unsigned long long)+0x16a>
c0016db1:	fa                   	cli    
c0016db2:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c0016db8:	83 ec 0c             	sub    esp,0xc
c0016dbb:	ff 05 84 23 03 c0    	inc    DWORD PTR ds:0xc0032384
c0016dc1:	68 98 23 03 c0       	push   0xc0032398
c0016dc6:	e8 7f 24 01 00       	call   c002924a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016dcb:	83 c4 10             	add    esp,0x10
c0016dce:	84 c0                	test   al,al
c0016dd0:	0f 85 a2 00 00 00    	jne    c0016e78 <timerHandler(unsigned long long)+0xef>
c0016dd6:	83 ec 0c             	sub    esp,0xc
c0016dd9:	68 98 23 03 c0       	push   0xc0032398
c0016dde:	e8 83 24 01 00       	call   c0029266 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016de3:	83 c4 10             	add    esp,0x10
c0016de6:	89 c3                	mov    ebx,eax
c0016de8:	83 ec 0c             	sub    esp,0xc
c0016deb:	68 98 23 03 c0       	push   0xc0032398
c0016df0:	e8 71 24 01 00       	call   c0029266 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016df5:	c7 04 24 98 23 03 c0 	mov    DWORD PTR [esp],0xc0032398
c0016dfc:	89 c5                	mov    ebp,eax
c0016dfe:	e8 6b 24 01 00       	call   c002926e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c0016e03:	8b 55 2c             	mov    edx,DWORD PTR [ebp+0x2c]
c0016e06:	83 c4 10             	add    esp,0x10
c0016e09:	8b 4d 30             	mov    ecx,DWORD PTR [ebp+0x30]
c0016e0c:	39 15 d0 f4 02 c0    	cmp    DWORD PTR ds:0xc002f4d0,edx
c0016e12:	a1 d4 f4 02 c0       	mov    eax,ds:0xc002f4d4
c0016e17:	19 c8                	sbb    eax,ecx
c0016e19:	72 21                	jb     c0016e3c <timerHandler(unsigned long long)+0xb3>
c0016e1b:	83 ec 0c             	sub    esp,0xc
c0016e1e:	55                   	push   ebp
c0016e1f:	e8 30 7b 00 00       	call   c001e954 <unblockTask(ThreadControlBlock*)>
c0016e24:	83 c4 10             	add    esp,0x10
c0016e27:	39 eb                	cmp    ebx,ebp
c0016e29:	75 21                	jne    c0016e4c <timerHandler(unsigned long long)+0xc3>
c0016e2b:	83 ec 0c             	sub    esp,0xc
c0016e2e:	68 98 23 03 c0       	push   0xc0032398
c0016e33:	e8 2e 24 01 00       	call   c0029266 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e38:	89 c3                	mov    ebx,eax
c0016e3a:	eb 0d                	jmp    c0016e49 <timerHandler(unsigned long long)+0xc0>
c0016e3c:	50                   	push   eax
c0016e3d:	50                   	push   eax
c0016e3e:	55                   	push   ebp
c0016e3f:	68 98 23 03 c0       	push   0xc0032398
c0016e44:	e8 d3 24 01 00       	call   c002931c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c0016e49:	83 c4 10             	add    esp,0x10
c0016e4c:	83 ec 0c             	sub    esp,0xc
c0016e4f:	68 98 23 03 c0       	push   0xc0032398
c0016e54:	e8 f1 23 01 00       	call   c002924a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c0016e59:	83 c4 10             	add    esp,0x10
c0016e5c:	84 c0                	test   al,al
c0016e5e:	75 18                	jne    c0016e78 <timerHandler(unsigned long long)+0xef>
c0016e60:	83 ec 0c             	sub    esp,0xc
c0016e63:	68 98 23 03 c0       	push   0xc0032398
c0016e68:	e8 f9 23 01 00       	call   c0029266 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c0016e6d:	83 c4 10             	add    esp,0x10
c0016e70:	39 d8                	cmp    eax,ebx
c0016e72:	0f 85 70 ff ff ff    	jne    c0016de8 <timerHandler(unsigned long long)+0x5f>
c0016e78:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e7d:	83 78 38 00          	cmp    DWORD PTR [eax+0x38],0x0
c0016e81:	74 3d                	je     c0016ec0 <timerHandler(unsigned long long)+0x137>
c0016e83:	80 3d 4c ee 02 c0 00 	cmp    BYTE PTR ds:0xc002ee4c,0x0
c0016e8a:	74 34                	je     c0016ec0 <timerHandler(unsigned long long)+0x137>
c0016e8c:	fa                   	cli    
c0016e8d:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c0016e93:	31 d2                	xor    edx,edx
c0016e95:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016e9a:	89 f9                	mov    ecx,edi
c0016e9c:	29 70 38             	sub    DWORD PTR [eax+0x38],esi
c0016e9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c0016ea4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0016ea7:	39 c6                	cmp    esi,eax
c0016ea9:	19 d1                	sbb    ecx,edx
c0016eab:	72 05                	jb     c0016eb2 <timerHandler(unsigned long long)+0x129>
c0016ead:	e8 de 75 00 00       	call   c001e490 <schedule()>
c0016eb2:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0016eb7:	48                   	dec    eax
c0016eb8:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0016ebd:	75 01                	jne    c0016ec0 <timerHandler(unsigned long long)+0x137>
c0016ebf:	fb                   	sti    
c0016ec0:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c0016ec5:	48                   	dec    eax
c0016ec6:	a3 84 23 03 c0       	mov    ds:0xc0032384,eax
c0016ecb:	75 18                	jne    c0016ee5 <timerHandler(unsigned long long)+0x15c>
c0016ecd:	83 3d 80 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032380,0x0
c0016ed4:	74 0f                	je     c0016ee5 <timerHandler(unsigned long long)+0x15c>
c0016ed6:	c7 05 80 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x0
c0016ee0:	e8 ab 75 00 00       	call   c001e490 <schedule()>
c0016ee5:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0016eea:	48                   	dec    eax
c0016eeb:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0016ef0:	75 01                	jne    c0016ef3 <timerHandler(unsigned long long)+0x16a>
c0016ef2:	fb                   	sti    
c0016ef3:	83 c4 0c             	add    esp,0xc
c0016ef6:	5b                   	pop    ebx
c0016ef7:	5e                   	pop    esi
c0016ef8:	5f                   	pop    edi
c0016ef9:	5d                   	pop    ebp
c0016efa:	c3                   	ret    

c0016efb <setupTimer(int)>:
c0016efb:	57                   	push   edi
c0016efc:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0016f01:	56                   	push   esi
c0016f02:	53                   	push   ebx
c0016f03:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0016f07:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016f0d:	83 ec 0c             	sub    esp,0xc
c0016f10:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016f16:	e8 3b d6 ff ff       	call   c0014556 <Device::getName()>
c0016f1b:	83 c4 10             	add    esp,0x10
c0016f1e:	80 38 41             	cmp    BYTE PTR [eax],0x41
c0016f21:	0f 85 8d 00 00 00    	jne    c0016fb4 <setupTimer(int)+0xb9>
c0016f27:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0016f2c:	f6 80 e8 01 00 00 01 	test   BYTE PTR [eax+0x1e8],0x1
c0016f33:	74 7f                	je     c0016fb4 <setupTimer(int)+0xb9>
c0016f35:	83 ec 0c             	sub    esp,0xc
c0016f38:	68 5c 01 00 00       	push   0x15c
c0016f3d:	e8 66 89 ff ff       	call   c000f8a8 <malloc>
c0016f42:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f45:	89 c3                	mov    ebx,eax
c0016f47:	e8 50 fe 00 00       	call   c0026d9c <PIT::PIT()>
c0016f4c:	59                   	pop    ecx
c0016f4d:	5f                   	pop    edi
c0016f4e:	53                   	push   ebx
c0016f4f:	ff 35 48 ee 02 c0    	push   DWORD PTR ds:0xc002ee48
c0016f55:	e8 10 d3 ff ff       	call   c001426a <Device::addChild(Device*)>
c0016f5a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f5c:	6a 00                	push   0x0
c0016f5e:	6a 00                	push   0x0
c0016f60:	56                   	push   esi
c0016f61:	53                   	push   ebx
c0016f62:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016f65:	83 c4 14             	add    esp,0x14
c0016f68:	68 60 01 00 00       	push   0x160
c0016f6d:	e8 36 89 ff ff       	call   c000f8a8 <malloc>
c0016f72:	89 04 24             	mov    DWORD PTR [esp],eax
c0016f75:	89 c7                	mov    edi,eax
c0016f77:	e8 d0 fc 00 00       	call   c0026c4c <APICTimer::APICTimer()>
c0016f7c:	6a 00                	push   0x0
c0016f7e:	6a 00                	push   0x0
c0016f80:	56                   	push   esi
c0016f81:	57                   	push   edi
c0016f82:	e8 c7 fb 00 00       	call   c0026b4e <APICTimer::open(int, int, void*)>
c0016f87:	83 c4 20             	add    esp,0x20
c0016f8a:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016f8c:	6a 00                	push   0x0
c0016f8e:	6a 00                	push   0x0
c0016f90:	6a 00                	push   0x0
c0016f92:	53                   	push   ebx
c0016f93:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c0016f96:	58                   	pop    eax
c0016f97:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0016f9c:	5a                   	pop    edx
c0016f9d:	57                   	push   edi
c0016f9e:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0016fa4:	ff b0 88 11 00 00    	push   DWORD PTR [eax+0x1188]
c0016faa:	e8 bb d2 ff ff       	call   c001426a <Device::addChild(Device*)>
c0016faf:	83 c4 10             	add    esp,0x10
c0016fb2:	eb 33                	jmp    c0016fe7 <setupTimer(int)+0xec>
c0016fb4:	83 ec 0c             	sub    esp,0xc
c0016fb7:	68 5c 01 00 00       	push   0x15c
c0016fbc:	e8 e7 88 ff ff       	call   c000f8a8 <malloc>
c0016fc1:	89 04 24             	mov    DWORD PTR [esp],eax
c0016fc4:	89 c3                	mov    ebx,eax
c0016fc6:	e8 d1 fd 00 00       	call   c0026d9c <PIT::PIT()>
c0016fcb:	58                   	pop    eax
c0016fcc:	5a                   	pop    edx
c0016fcd:	53                   	push   ebx
c0016fce:	ff 35 48 ee 02 c0    	push   DWORD PTR ds:0xc002ee48
c0016fd4:	e8 91 d2 ff ff       	call   c001426a <Device::addChild(Device*)>
c0016fd9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0016fdb:	6a 00                	push   0x0
c0016fdd:	6a 00                	push   0x0
c0016fdf:	56                   	push   esi
c0016fe0:	53                   	push   ebx
c0016fe1:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0016fe4:	83 c4 20             	add    esp,0x20
c0016fe7:	89 d8                	mov    eax,ebx
c0016fe9:	5b                   	pop    ebx
c0016fea:	5e                   	pop    esi
c0016feb:	5f                   	pop    edi
c0016fec:	c3                   	ret    
c0016fed:	90                   	nop

c0016fee <VCache::VCache(PhysicalDisk*)>:
c0016fee:	53                   	push   ebx
c0016fef:	83 ec 18             	sub    esp,0x18
c0016ff2:	ba 80 bc 02 c0       	mov    edx,0xc002bc80
c0016ff7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0016ffb:	89 10                	mov    DWORD PTR [eax],edx
c0016ffd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017001:	c7 40 0c 00 02 00 00 	mov    DWORD PTR [eax+0xc],0x200
c0017008:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001700c:	c7 40 10 04 00 00 00 	mov    DWORD PTR [eax+0x10],0x4
c0017013:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017017:	c7 40 14 40 00 00 00 	mov    DWORD PTR [eax+0x14],0x40
c001701e:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c0017025:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017029:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c0017030:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0017037:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001703b:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0017042:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017046:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001704a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001704e:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
c0017055:	c7 40 34 00 00 00 00 	mov    DWORD PTR [eax+0x34],0x0
c001705c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017060:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c0017064:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017068:	c6 40 3d 00          	mov    BYTE PTR [eax+0x3d],0x0
c001706c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017070:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017074:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017078:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c001707f:	c7 44 24 0c 10 00 00 00 	mov    DWORD PTR [esp+0xc],0x10
c0017087:	83 ec 0c             	sub    esp,0xc
c001708a:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001708e:	e8 15 88 ff ff       	call   c000f8a8 <malloc>
c0017093:	83 c4 10             	add    esp,0x10
c0017096:	89 c3                	mov    ebx,eax
c0017098:	83 ec 0c             	sub    esp,0xc
c001709b:	53                   	push   ebx
c001709c:	e8 99 71 00 00       	call   c001e23a <Mutex::Mutex()>
c00170a1:	83 c4 10             	add    esp,0x10
c00170a4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170a8:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c00170ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170af:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00170b3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00170b6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170ba:	c7 40 10 02 00 00 00 	mov    DWORD PTR [eax+0x10],0x2
c00170c1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170c5:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00170cb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170cf:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c00170d2:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170d6:	8b 90 64 01 00 00    	mov    edx,DWORD PTR [eax+0x164]
c00170dc:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00170e2:	8b 4c 24 20          	mov    ecx,DWORD PTR [esp+0x20]
c00170e6:	89 41 14             	mov    DWORD PTR [ecx+0x14],eax
c00170e9:	89 51 18             	mov    DWORD PTR [ecx+0x18],edx
c00170ec:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00170f0:	c6 40 3c 00          	mov    BYTE PTR [eax+0x3c],0x0
c00170f4:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00170f8:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00170fe:	05 00 01 00 00       	add    eax,0x100
c0017103:	c1 e0 04             	shl    eax,0x4
c0017106:	83 ec 0c             	sub    esp,0xc
c0017109:	50                   	push   eax
c001710a:	e8 99 87 ff ff       	call   c000f8a8 <malloc>
c001710f:	83 c4 10             	add    esp,0x10
c0017112:	89 c2                	mov    edx,eax
c0017114:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017118:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
c001711b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001711f:	c7 40 40 04 00 00 00 	mov    DWORD PTR [eax+0x40],0x4
c0017126:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001712a:	c6 40 2c 00          	mov    BYTE PTR [eax+0x2c],0x0
c001712e:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017132:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0017138:	c1 e0 07             	shl    eax,0x7
c001713b:	83 ec 0c             	sub    esp,0xc
c001713e:	50                   	push   eax
c001713f:	e8 64 87 ff ff       	call   c000f8a8 <malloc>
c0017144:	83 c4 10             	add    esp,0x10
c0017147:	89 c2                	mov    edx,eax
c0017149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001714d:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c0017150:	90                   	nop
c0017151:	83 c4 18             	add    esp,0x18
c0017154:	5b                   	pop    ebx
c0017155:	c3                   	ret    

c0017156 <VCache::invalidateReadBuffer()>:
c0017156:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001715a:	66 c7 40 3c 00 00    	mov    WORD PTR [eax+0x3c],0x0
c0017160:	c6 40 3e 00          	mov    BYTE PTR [eax+0x3e],0x0
c0017164:	c3                   	ret    
c0017165:	90                   	nop

c0017166 <VCache::writeWriteBuffer()>:
c0017166:	53                   	push   ebx
c0017167:	83 ec 14             	sub    esp,0x14
c001716a:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001716e:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017171:	8b 10                	mov    edx,DWORD PTR [eax]
c0017173:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0017176:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c0017179:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001717c:	ff 73 1c             	push   DWORD PTR [ebx+0x1c]
c001717f:	50                   	push   eax
c0017180:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c0017183:	c7 43 1c 00 00 00 00 	mov    DWORD PTR [ebx+0x1c],0x0
c001718a:	c7 43 20 00 00 00 00 	mov    DWORD PTR [ebx+0x20],0x0
c0017191:	c6 43 2c 00          	mov    BYTE PTR [ebx+0x2c],0x0
c0017195:	c7 43 24 00 00 00 00 	mov    DWORD PTR [ebx+0x24],0x0
c001719c:	83 c4 28             	add    esp,0x28
c001719f:	5b                   	pop    ebx
c00171a0:	c3                   	ret    
c00171a1:	90                   	nop

c00171a2 <VCache::~VCache()>:
c00171a2:	83 ec 0c             	sub    esp,0xc
c00171a5:	ba 80 bc 02 c0       	mov    edx,0xc002bc80
c00171aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171ae:	89 10                	mov    DWORD PTR [eax],edx
c00171b0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171b4:	8a 40 2c             	mov    al,BYTE PTR [eax+0x2c]
c00171b7:	84 c0                	test   al,al
c00171b9:	74 0f                	je     c00171ca <VCache::~VCache()+0x28>
c00171bb:	83 ec 0c             	sub    esp,0xc
c00171be:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00171c2:	e8 9f ff ff ff       	call   c0017166 <VCache::writeWriteBuffer()>
c00171c7:	83 c4 10             	add    esp,0x10
c00171ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171ce:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c00171d1:	83 ec 0c             	sub    esp,0xc
c00171d4:	50                   	push   eax
c00171d5:	e8 de 86 ff ff       	call   c000f8b8 <free>
c00171da:	83 c4 10             	add    esp,0x10
c00171dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00171e1:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00171e4:	83 ec 0c             	sub    esp,0xc
c00171e7:	50                   	push   eax
c00171e8:	e8 cb 86 ff ff       	call   c000f8b8 <free>
c00171ed:	83 c4 10             	add    esp,0x10
c00171f0:	90                   	nop
c00171f1:	83 c4 0c             	add    esp,0xc
c00171f4:	c3                   	ret    
c00171f5:	90                   	nop

c00171f6 <VCache::~VCache()>:
c00171f6:	83 ec 0c             	sub    esp,0xc
c00171f9:	83 ec 0c             	sub    esp,0xc
c00171fc:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017200:	e8 9d ff ff ff       	call   c00171a2 <VCache::~VCache()>
c0017205:	83 c4 10             	add    esp,0x10
c0017208:	83 ec 08             	sub    esp,0x8
c001720b:	6a 44                	push   0x44
c001720d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017211:	e8 51 bb ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0017216:	83 c4 10             	add    esp,0x10
c0017219:	83 c4 0c             	add    esp,0xc
c001721c:	c3                   	ret    
c001721d:	90                   	nop

c001721e <VCache::write(unsigned long long, int, void*)>:
c001721e:	55                   	push   ebp
c001721f:	57                   	push   edi
c0017220:	56                   	push   esi
c0017221:	53                   	push   ebx
c0017222:	83 ec 18             	sub    esp,0x18
c0017225:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0017229:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c001722d:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0017231:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017234:	e8 8f 75 00 00       	call   c001e7c8 <Semaphore::acquire()>
c0017239:	83 c4 10             	add    esp,0x10
c001723c:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017240:	74 0c                	je     c001724e <VCache::write(unsigned long long, int, void*)+0x30>
c0017242:	83 ec 0c             	sub    esp,0xc
c0017245:	53                   	push   ebx
c0017246:	e8 0b ff ff ff       	call   c0017156 <VCache::invalidateReadBuffer()>
c001724b:	83 c4 10             	add    esp,0x10
c001724e:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017252:	74 5d                	je     c00172b1 <VCache::write(unsigned long long, int, void*)+0x93>
c0017254:	8b 6b 24             	mov    ebp,DWORD PTR [ebx+0x24]
c0017257:	89 e8                	mov    eax,ebp
c0017259:	99                   	cdq    
c001725a:	03 43 1c             	add    eax,DWORD PTR [ebx+0x1c]
c001725d:	13 53 20             	adc    edx,DWORD PTR [ebx+0x20]
c0017260:	89 c1                	mov    ecx,eax
c0017262:	89 d0                	mov    eax,edx
c0017264:	31 f1                	xor    ecx,esi
c0017266:	31 f8                	xor    eax,edi
c0017268:	09 c1                	or     ecx,eax
c001726a:	75 39                	jne    c00172a5 <VCache::write(unsigned long long, int, void*)+0x87>
c001726c:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c0017271:	75 32                	jne    c00172a5 <VCache::write(unsigned long long, int, void*)+0x87>
c0017273:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0017276:	89 ef                	mov    edi,ebp
c0017278:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c001727e:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017282:	0f af f9             	imul   edi,ecx
c0017285:	03 7b 28             	add    edi,DWORD PTR [ebx+0x28]
c0017288:	fc                   	cld    
c0017289:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001728b:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001728e:	40                   	inc    eax
c001728f:	89 43 24             	mov    DWORD PTR [ebx+0x24],eax
c0017292:	83 c0 80             	add    eax,0xffffff80
c0017295:	75 5d                	jne    c00172f4 <VCache::write(unsigned long long, int, void*)+0xd6>
c0017297:	83 ec 0c             	sub    esp,0xc
c001729a:	53                   	push   ebx
c001729b:	e8 c6 fe ff ff       	call   c0017166 <VCache::writeWriteBuffer()>
c00172a0:	83 c4 10             	add    esp,0x10
c00172a3:	eb 4f                	jmp    c00172f4 <VCache::write(unsigned long long, int, void*)+0xd6>
c00172a5:	83 ec 0c             	sub    esp,0xc
c00172a8:	53                   	push   ebx
c00172a9:	e8 b8 fe ff ff       	call   c0017166 <VCache::writeWriteBuffer()>
c00172ae:	83 c4 10             	add    esp,0x10
c00172b1:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00172b4:	83 7c 24 2c 7f       	cmp    DWORD PTR [esp+0x2c],0x7f
c00172b9:	7f 23                	jg     c00172de <VCache::write(unsigned long long, int, void*)+0xc0>
c00172bb:	89 73 1c             	mov    DWORD PTR [ebx+0x1c],esi
c00172be:	89 7b 20             	mov    DWORD PTR [ebx+0x20],edi
c00172c1:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00172c5:	c6 43 2c 01          	mov    BYTE PTR [ebx+0x2c],0x1
c00172c9:	89 53 24             	mov    DWORD PTR [ebx+0x24],edx
c00172cc:	8b 7b 28             	mov    edi,DWORD PTR [ebx+0x28]
c00172cf:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00172d5:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00172d9:	fc                   	cld    
c00172da:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00172dc:	eb 16                	jmp    c00172f4 <VCache::write(unsigned long long, int, void*)+0xd6>
c00172de:	83 ec 0c             	sub    esp,0xc
c00172e1:	8b 10                	mov    edx,DWORD PTR [eax]
c00172e3:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00172e7:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00172eb:	57                   	push   edi
c00172ec:	56                   	push   esi
c00172ed:	50                   	push   eax
c00172ee:	ff 52 2c             	call   DWORD PTR [edx+0x2c]
c00172f1:	83 c4 20             	add    esp,0x20
c00172f4:	83 ec 0c             	sub    esp,0xc
c00172f7:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00172fa:	e8 03 7c 00 00       	call   c001ef02 <Semaphore::release()>
c00172ff:	83 c4 1c             	add    esp,0x1c
c0017302:	31 c0                	xor    eax,eax
c0017304:	5b                   	pop    ebx
c0017305:	5e                   	pop    esi
c0017306:	5f                   	pop    edi
c0017307:	5d                   	pop    ebp
c0017308:	c3                   	ret    
c0017309:	90                   	nop

c001730a <VCache::read(unsigned long long, int, void*)>:
c001730a:	55                   	push   ebp
c001730b:	57                   	push   edi
c001730c:	56                   	push   esi
c001730d:	53                   	push   ebx
c001730e:	83 ec 28             	sub    esp,0x28
c0017311:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0017315:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c0017319:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c001731d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0017321:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c0017324:	e8 9f 74 00 00       	call   c001e7c8 <Semaphore::acquire()>
c0017329:	83 c4 10             	add    esp,0x10
c001732c:	80 7b 2c 00          	cmp    BYTE PTR [ebx+0x2c],0x0
c0017330:	74 0c                	je     c001733e <VCache::read(unsigned long long, int, void*)+0x34>
c0017332:	83 ec 0c             	sub    esp,0xc
c0017335:	53                   	push   ebx
c0017336:	e8 2b fe ff ff       	call   c0017166 <VCache::writeWriteBuffer()>
c001733b:	83 c4 10             	add    esp,0x10
c001733e:	83 fd 01             	cmp    ebp,0x1
c0017341:	0f 85 81 00 00 00    	jne    c00173c8 <VCache::read(unsigned long long, int, void*)+0xbe>
c0017347:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001734a:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001734e:	80 b8 68 01 00 00 00 	cmp    BYTE PTR [eax+0x168],0x0
c0017355:	75 71                	jne    c00173c8 <VCache::read(unsigned long long, int, void*)+0xbe>
c0017357:	8b 6b 40             	mov    ebp,DWORD PTR [ebx+0x40]
c001735a:	89 e9                	mov    ecx,ebp
c001735c:	f7 d9                	neg    ecx
c001735e:	89 c8                	mov    eax,ecx
c0017360:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0017364:	c1 f8 1f             	sar    eax,0x1f
c0017367:	21 f1                	and    ecx,esi
c0017369:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001736d:	89 c8                	mov    eax,ecx
c001736f:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0017373:	21 f9                	and    ecx,edi
c0017375:	80 7b 3c 00          	cmp    BYTE PTR [ebx+0x3c],0x0
c0017379:	89 ca                	mov    edx,ecx
c001737b:	74 0a                	je     c0017387 <VCache::read(unsigned long long, int, void*)+0x7d>
c001737d:	39 4b 34             	cmp    DWORD PTR [ebx+0x34],ecx
c0017380:	75 05                	jne    c0017387 <VCache::read(unsigned long long, int, void*)+0x7d>
c0017382:	39 43 30             	cmp    DWORD PTR [ebx+0x30],eax
c0017385:	74 23                	je     c00173aa <VCache::read(unsigned long long, int, void*)+0xa0>
c0017387:	83 ec 0c             	sub    esp,0xc
c001738a:	c6 43 3c 01          	mov    BYTE PTR [ebx+0x3c],0x1
c001738e:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0017392:	89 43 30             	mov    DWORD PTR [ebx+0x30],eax
c0017395:	89 53 34             	mov    DWORD PTR [ebx+0x34],edx
c0017398:	8b 09                	mov    ecx,DWORD PTR [ecx]
c001739a:	ff 73 38             	push   DWORD PTR [ebx+0x38]
c001739d:	55                   	push   ebp
c001739e:	52                   	push   edx
c001739f:	50                   	push   eax
c00173a0:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c00173a4:	ff 51 28             	call   DWORD PTR [ecx+0x28]
c00173a7:	83 c4 20             	add    esp,0x20
c00173aa:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173ad:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c00173b1:	8b 88 5c 01 00 00    	mov    ecx,DWORD PTR [eax+0x15c]
c00173b7:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c00173ba:	48                   	dec    eax
c00173bb:	21 c6                	and    esi,eax
c00173bd:	0f af f1             	imul   esi,ecx
c00173c0:	03 73 38             	add    esi,DWORD PTR [ebx+0x38]
c00173c3:	fc                   	cld    
c00173c4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00173c6:	eb 1d                	jmp    c00173e5 <VCache::read(unsigned long long, int, void*)+0xdb>
c00173c8:	83 ec 0c             	sub    esp,0xc
c00173cb:	53                   	push   ebx
c00173cc:	e8 85 fd ff ff       	call   c0017156 <VCache::invalidateReadBuffer()>
c00173d1:	5a                   	pop    edx
c00173d2:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c00173d5:	8b 10                	mov    edx,DWORD PTR [eax]
c00173d7:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00173db:	55                   	push   ebp
c00173dc:	57                   	push   edi
c00173dd:	56                   	push   esi
c00173de:	50                   	push   eax
c00173df:	ff 52 28             	call   DWORD PTR [edx+0x28]
c00173e2:	83 c4 20             	add    esp,0x20
c00173e5:	83 ec 0c             	sub    esp,0xc
c00173e8:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c00173eb:	e8 12 7b 00 00       	call   c001ef02 <Semaphore::release()>
c00173f0:	83 c4 2c             	add    esp,0x2c
c00173f3:	31 c0                	xor    eax,eax
c00173f5:	5b                   	pop    ebx
c00173f6:	5e                   	pop    esi
c00173f7:	5f                   	pop    edi
c00173f8:	5d                   	pop    ebp
c00173f9:	c3                   	ret    

c00173fa <Video::putrect(int, int, int, int, unsigned int)>:
c00173fa:	55                   	push   ebp
c00173fb:	57                   	push   edi
c00173fc:	56                   	push   esi
c00173fd:	53                   	push   ebx
c00173fe:	83 ec 1c             	sub    esp,0x1c
c0017401:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017405:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017409:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c001740d:	03 44 24 3c          	add    eax,DWORD PTR [esp+0x3c]
c0017411:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0017415:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017419:	01 df                	add    edi,ebx
c001741b:	39 fb                	cmp    ebx,edi
c001741d:	7d 1f                	jge    c001743e <Video::putrect(int, int, int, int, unsigned int)+0x44>
c001741f:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0017423:	3b 6c 24 0c          	cmp    ebp,DWORD PTR [esp+0xc]
c0017427:	7d 12                	jge    c001743b <Video::putrect(int, int, int, int, unsigned int)+0x41>
c0017429:	8b 16                	mov    edx,DWORD PTR [esi]
c001742b:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001742f:	53                   	push   ebx
c0017430:	55                   	push   ebp
c0017431:	45                   	inc    ebp
c0017432:	56                   	push   esi
c0017433:	ff 52 24             	call   DWORD PTR [edx+0x24]
c0017436:	83 c4 10             	add    esp,0x10
c0017439:	eb e8                	jmp    c0017423 <Video::putrect(int, int, int, int, unsigned int)+0x29>
c001743b:	43                   	inc    ebx
c001743c:	eb dd                	jmp    c001741b <Video::putrect(int, int, int, int, unsigned int)+0x21>
c001743e:	83 c4 1c             	add    esp,0x1c
c0017441:	5b                   	pop    ebx
c0017442:	5e                   	pop    esi
c0017443:	5f                   	pop    edi
c0017444:	5d                   	pop    ebp
c0017445:	c3                   	ret    

c0017446 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)>:
c0017446:	55                   	push   ebp
c0017447:	57                   	push   edi
c0017448:	31 ff                	xor    edi,edi
c001744a:	56                   	push   esi
c001744b:	53                   	push   ebx
c001744c:	83 ec 1c             	sub    esp,0x1c
c001744f:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0017453:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0017457:	8d 04 9d 00 00 00 00 	lea    eax,[ebx*4+0x0]
c001745e:	0f af 5c 24 40       	imul   ebx,DWORD PTR [esp+0x40]
c0017463:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017467:	03 5c 24 3c          	add    ebx,DWORD PTR [esp+0x3c]
c001746b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001746f:	8d 1c 98             	lea    ebx,[eax+ebx*4]
c0017472:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c0017476:	01 f9                	add    ecx,edi
c0017478:	3b 7c 24 48          	cmp    edi,DWORD PTR [esp+0x48]
c001747c:	7d 2f                	jge    c00174ad <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x67>
c001747e:	31 f6                	xor    esi,esi
c0017480:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0017484:	01 f2                	add    edx,esi
c0017486:	3b 74 24 44          	cmp    esi,DWORD PTR [esp+0x44]
c001748a:	7d 1a                	jge    c00174a6 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x60>
c001748c:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001748f:	ff 34 b3             	push   DWORD PTR [ebx+esi*4]
c0017492:	46                   	inc    esi
c0017493:	51                   	push   ecx
c0017494:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0017498:	52                   	push   edx
c0017499:	55                   	push   ebp
c001749a:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001749d:	83 c4 10             	add    esp,0x10
c00174a0:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c00174a4:	eb da                	jmp    c0017480 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x3a>
c00174a6:	47                   	inc    edi
c00174a7:	03 5c 24 08          	add    ebx,DWORD PTR [esp+0x8]
c00174ab:	eb c5                	jmp    c0017472 <Video::bitblit(int, int, int, int, int, int, int, unsigned int*)+0x2c>
c00174ad:	83 c4 1c             	add    esp,0x1c
c00174b0:	5b                   	pop    ebx
c00174b1:	5e                   	pop    esi
c00174b2:	5f                   	pop    edi
c00174b3:	5d                   	pop    ebp
c00174b4:	c3                   	ret    
c00174b5:	90                   	nop

c00174b6 <Video::blit(unsigned int*, int, int, int, int)>:
c00174b6:	55                   	push   ebp
c00174b7:	57                   	push   edi
c00174b8:	56                   	push   esi
c00174b9:	53                   	push   ebx
c00174ba:	83 ec 1c             	sub    esp,0x1c
c00174bd:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c00174c1:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00174c5:	85 c0                	test   eax,eax
c00174c7:	79 02                	jns    c00174cb <Video::blit(unsigned int*, int, int, int, int)+0x15>
c00174c9:	31 c0                	xor    eax,eax
c00174cb:	c1 e0 02             	shl    eax,0x2
c00174ce:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c00174d2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00174d6:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00174da:	03 44 24 44          	add    eax,DWORD PTR [esp+0x44]
c00174de:	39 d8                	cmp    eax,ebx
c00174e0:	7e 49                	jle    c001752b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174e2:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c00174e8:	7c 41                	jl     c001752b <Video::blit(unsigned int*, int, int, int, int)+0x75>
c00174ea:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00174ee:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c00174f2:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c00174f6:	03 4c 24 40          	add    ecx,DWORD PTR [esp+0x40]
c00174fa:	39 f9                	cmp    ecx,edi
c00174fc:	7e 22                	jle    c0017520 <Video::blit(unsigned int*, int, int, int, int)+0x6a>
c00174fe:	83 c5 04             	add    ebp,0x4
c0017501:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c0017507:	7c 14                	jl     c001751d <Video::blit(unsigned int*, int, int, int, int)+0x67>
c0017509:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001750b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
c001750e:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017512:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0017516:	56                   	push   esi
c0017517:	ff 51 24             	call   DWORD PTR [ecx+0x24]
c001751a:	83 c4 10             	add    esp,0x10
c001751d:	47                   	inc    edi
c001751e:	eb d2                	jmp    c00174f2 <Video::blit(unsigned int*, int, int, int, int)+0x3c>
c0017520:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017524:	43                   	inc    ebx
c0017525:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017529:	eb ab                	jmp    c00174d6 <Video::blit(unsigned int*, int, int, int, int)+0x20>
c001752b:	83 c4 1c             	add    esp,0x1c
c001752e:	5b                   	pop    ebx
c001752f:	5e                   	pop    esi
c0017530:	5f                   	pop    edi
c0017531:	5d                   	pop    ebp
c0017532:	c3                   	ret    
c0017533:	90                   	nop

c0017534 <Video::clearScreen(unsigned int)>:
c0017534:	57                   	push   edi
c0017535:	56                   	push   esi
c0017536:	53                   	push   ebx
c0017537:	31 db                	xor    ebx,ebx
c0017539:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001753d:	39 9e 5c 01 00 00    	cmp    DWORD PTR [esi+0x15c],ebx
c0017543:	7e 1f                	jle    c0017564 <Video::clearScreen(unsigned int)+0x30>
c0017545:	31 ff                	xor    edi,edi
c0017547:	39 be 58 01 00 00    	cmp    DWORD PTR [esi+0x158],edi
c001754d:	7e 12                	jle    c0017561 <Video::clearScreen(unsigned int)+0x2d>
c001754f:	8b 06                	mov    eax,DWORD PTR [esi]
c0017551:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0017555:	53                   	push   ebx
c0017556:	57                   	push   edi
c0017557:	47                   	inc    edi
c0017558:	56                   	push   esi
c0017559:	ff 50 24             	call   DWORD PTR [eax+0x24]
c001755c:	83 c4 10             	add    esp,0x10
c001755f:	eb e6                	jmp    c0017547 <Video::clearScreen(unsigned int)+0x13>
c0017561:	43                   	inc    ebx
c0017562:	eb d9                	jmp    c001753d <Video::clearScreen(unsigned int)+0x9>
c0017564:	5b                   	pop    ebx
c0017565:	5e                   	pop    esi
c0017566:	5f                   	pop    edi
c0017567:	c3                   	ret    

c0017568 <Video::putpixel(int, int, unsigned int)>:
c0017568:	c7 44 24 04 88 bc 02 c0 	mov    DWORD PTR [esp+0x4],0xc002bc88
c0017570:	e9 8c 32 00 00       	jmp    c001a801 <Krnl::panic(char const*)>
c0017575:	90                   	nop

c0017576 <Video::Video(char const*)>:
c0017576:	83 ec 0c             	sub    esp,0xc
c0017579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001757d:	83 ec 08             	sub    esp,0x8
c0017580:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0017584:	50                   	push   eax
c0017585:	e8 d0 ce ff ff       	call   c001445a <Device::Device(char const*)>
c001758a:	83 c4 10             	add    esp,0x10
c001758d:	ba 0c bd 02 c0       	mov    edx,0xc002bd0c
c0017592:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017596:	89 10                	mov    DWORD PTR [eax],edx
c0017598:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001759c:	c7 80 10 01 00 00 0a 00 00 00 	mov    DWORD PTR [eax+0x110],0xa
c00175a6:	90                   	nop
c00175a7:	83 c4 0c             	add    esp,0xc
c00175aa:	c3                   	ret    
c00175ab:	90                   	nop

c00175ac <Video::~Video()>:
c00175ac:	83 ec 0c             	sub    esp,0xc
c00175af:	ba 0c bd 02 c0       	mov    edx,0xc002bd0c
c00175b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175b8:	89 10                	mov    DWORD PTR [eax],edx
c00175ba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00175be:	83 ec 0c             	sub    esp,0xc
c00175c1:	50                   	push   eax
c00175c2:	e8 87 cb ff ff       	call   c001414e <Device::~Device()>
c00175c7:	83 c4 10             	add    esp,0x10
c00175ca:	90                   	nop
c00175cb:	83 c4 0c             	add    esp,0xc
c00175ce:	c3                   	ret    
c00175cf:	90                   	nop

c00175d0 <Video::~Video()>:
c00175d0:	83 ec 0c             	sub    esp,0xc
c00175d3:	83 ec 0c             	sub    esp,0xc
c00175d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175da:	e8 cd ff ff ff       	call   c00175ac <Video::~Video()>
c00175df:	83 c4 10             	add    esp,0x10
c00175e2:	83 ec 08             	sub    esp,0x8
c00175e5:	68 64 01 00 00       	push   0x164
c00175ea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00175ee:	e8 74 b7 ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c00175f3:	83 c4 10             	add    esp,0x10
c00175f6:	83 c4 0c             	add    esp,0xc
c00175f9:	c3                   	ret    

c00175fa <Video::isMonochrome()>:
c00175fa:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00175fe:	8a 80 60 01 00 00    	mov    al,BYTE PTR [eax+0x160]
c0017604:	c3                   	ret    
c0017605:	90                   	nop

c0017606 <Video::getWidth()>:
c0017606:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001760a:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0017610:	c3                   	ret    
c0017611:	90                   	nop

c0017612 <Video::getHeight()>:
c0017612:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0017616:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001761c:	c3                   	ret    
c001761d:	90                   	nop

c001761e <Video::drawCursor(int, int, unsigned char*, int)>:
c001761e:	55                   	push   ebp
c001761f:	57                   	push   edi
c0017620:	56                   	push   esi
c0017621:	53                   	push   ebx
c0017622:	83 ec 2c             	sub    esp,0x2c
c0017625:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0017629:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001762d:	83 f8 01             	cmp    eax,0x1
c0017630:	19 c9                	sbb    ecx,ecx
c0017632:	31 db                	xor    ebx,ebx
c0017634:	89 4c 24 18          	mov    DWORD PTR [esp+0x18],ecx
c0017638:	89 cd                	mov    ebp,ecx
c001763a:	81 64 24 18 ff ff ff 00 	and    DWORD PTR [esp+0x18],0xffffff
c0017642:	f7 d5                	not    ebp
c0017644:	81 e5 ff ff ff 00    	and    ebp,0xffffff
c001764a:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001764e:	01 d8                	add    eax,ebx
c0017650:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017654:	56                   	push   esi
c0017655:	e8 b8 ff ff ff       	call   c0017612 <Video::getHeight()>
c001765a:	59                   	pop    ecx
c001765b:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001765f:	7e 70                	jle    c00176d1 <Video::drawCursor(int, int, unsigned char*, int)+0xb3>
c0017661:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017665:	8b 7c 24 44          	mov    edi,DWORD PTR [esp+0x44]
c0017669:	8b 04 98             	mov    eax,DWORD PTR [eax+ebx*4]
c001766c:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017670:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017674:	8b 84 98 80 00 00 00 	mov    eax,DWORD PTR [eax+ebx*4+0x80]
c001767b:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001767f:	89 f8                	mov    eax,edi
c0017681:	83 c0 20             	add    eax,0x20
c0017684:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017688:	56                   	push   esi
c0017689:	e8 78 ff ff ff       	call   c0017606 <Video::getWidth()>
c001768e:	5a                   	pop    edx
c001768f:	39 c7                	cmp    edi,eax
c0017691:	7d 34                	jge    c00176c7 <Video::drawCursor(int, int, unsigned char*, int)+0xa9>
c0017693:	f6 44 24 10 01       	test   BYTE PTR [esp+0x10],0x1
c0017698:	74 05                	je     c001769f <Video::drawCursor(int, int, unsigned char*, int)+0x81>
c001769a:	8b 06                	mov    eax,DWORD PTR [esi]
c001769c:	55                   	push   ebp
c001769d:	eb 0d                	jmp    c00176ac <Video::drawCursor(int, int, unsigned char*, int)+0x8e>
c001769f:	f6 44 24 14 01       	test   BYTE PTR [esp+0x14],0x1
c00176a4:	74 12                	je     c00176b8 <Video::drawCursor(int, int, unsigned char*, int)+0x9a>
c00176a6:	8b 06                	mov    eax,DWORD PTR [esi]
c00176a8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00176ac:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00176b0:	57                   	push   edi
c00176b1:	56                   	push   esi
c00176b2:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00176b5:	83 c4 10             	add    esp,0x10
c00176b8:	d1 6c 24 10          	shr    DWORD PTR [esp+0x10],1
c00176bc:	d1 6c 24 14          	shr    DWORD PTR [esp+0x14],1
c00176c0:	47                   	inc    edi
c00176c1:	3b 7c 24 1c          	cmp    edi,DWORD PTR [esp+0x1c]
c00176c5:	75 c1                	jne    c0017688 <Video::drawCursor(int, int, unsigned char*, int)+0x6a>
c00176c7:	43                   	inc    ebx
c00176c8:	83 fb 20             	cmp    ebx,0x20
c00176cb:	0f 85 79 ff ff ff    	jne    c001764a <Video::drawCursor(int, int, unsigned char*, int)+0x2c>
c00176d1:	83 c4 2c             	add    esp,0x2c
c00176d4:	5b                   	pop    ebx
c00176d5:	5e                   	pop    esi
c00176d6:	5f                   	pop    edi
c00176d7:	5d                   	pop    ebp
c00176d8:	c3                   	ret    
c00176d9:	90                   	nop

c00176da <Video::tgaParse(unsigned char*, int, int*, int*)>:
c00176da:	55                   	push   ebp
c00176db:	57                   	push   edi
c00176dc:	56                   	push   esi
c00176dd:	53                   	push   ebx
c00176de:	83 ec 28             	sub    esp,0x28
c00176e1:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c00176e5:	0f b6 43 0c          	movzx  eax,BYTE PTR [ebx+0xc]
c00176e9:	0f b6 7b 0d          	movzx  edi,BYTE PTR [ebx+0xd]
c00176ed:	0f b6 53 0e          	movzx  edx,BYTE PTR [ebx+0xe]
c00176f1:	c1 e7 08             	shl    edi,0x8
c00176f4:	01 c7                	add    edi,eax
c00176f6:	0f b6 43 0f          	movzx  eax,BYTE PTR [ebx+0xf]
c00176fa:	c1 e0 08             	shl    eax,0x8
c00176fd:	01 d0                	add    eax,edx
c00176ff:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017703:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017707:	0f af c7             	imul   eax,edi
c001770a:	8d 04 85 08 00 00 00 	lea    eax,[eax*4+0x8]
c0017711:	50                   	push   eax
c0017712:	e8 91 81 ff ff       	call   c000f8a8 <malloc>
c0017717:	83 c4 10             	add    esp,0x10
c001771a:	89 c5                	mov    ebp,eax
c001771c:	85 c0                	test   eax,eax
c001771e:	75 15                	jne    c0017735 <Video::tgaParse(unsigned char*, int, int*, int*)+0x5b>
c0017720:	83 ec 0c             	sub    esp,0xc
c0017723:	68 a9 bc 02 c0       	push   0xc002bca9
c0017728:	e8 1a b7 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001772d:	83 c4 10             	add    esp,0x10
c0017730:	e9 1c 01 00 00       	jmp    c0017851 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017735:	be 12 00 00 00       	mov    esi,0x12
c001773a:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c001773e:	74 11                	je     c0017751 <Video::tgaParse(unsigned char*, int, int*, int*)+0x77>
c0017740:	0f b6 73 07          	movzx  esi,BYTE PTR [ebx+0x7]
c0017744:	0f b7 43 05          	movzx  eax,WORD PTR [ebx+0x5]
c0017748:	c1 fe 03             	sar    esi,0x3
c001774b:	0f af f0             	imul   esi,eax
c001774e:	83 c6 12             	add    esi,0x12
c0017751:	83 3c 24 00          	cmp    DWORD PTR [esp],0x0
c0017755:	74 04                	je     c001775b <Video::tgaParse(unsigned char*, int, int*, int*)+0x81>
c0017757:	85 ff                	test   edi,edi
c0017759:	75 12                	jne    c001776d <Video::tgaParse(unsigned char*, int, int*, int*)+0x93>
c001775b:	83 ec 0c             	sub    esp,0xc
c001775e:	68 c0 bc 02 c0       	push   0xc002bcc0
c0017763:	e8 df b6 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0017768:	e9 ce 00 00 00       	jmp    c001783b <Video::tgaParse(unsigned char*, int, int*, int*)+0x161>
c001776d:	52                   	push   edx
c001776e:	52                   	push   edx
c001776f:	0f b6 43 02          	movzx  eax,BYTE PTR [ebx+0x2]
c0017773:	50                   	push   eax
c0017774:	68 d5 bc 02 c0       	push   0xc002bcd5
c0017779:	e8 c9 b6 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001777e:	0f b6 53 02          	movzx  edx,BYTE PTR [ebx+0x2]
c0017782:	83 c4 10             	add    esp,0x10
c0017785:	80 fa 02             	cmp    dl,0x2
c0017788:	0f 85 98 00 00 00    	jne    c0017826 <Video::tgaParse(unsigned char*, int, int*, int*)+0x14c>
c001778e:	66 83 7b 05 00       	cmp    WORD PTR [ebx+0x5],0x0
c0017793:	75 10                	jne    c00177a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c0017795:	80 7b 01 00          	cmp    BYTE PTR [ebx+0x1],0x0
c0017799:	75 0a                	jne    c00177a5 <Video::tgaParse(unsigned char*, int, int*, int*)+0xcb>
c001779b:	8a 43 10             	mov    al,BYTE PTR [ebx+0x10]
c001779e:	83 e8 18             	sub    eax,0x18
c00177a1:	a8 f7                	test   al,0xf7
c00177a3:	74 0a                	je     c00177af <Video::tgaParse(unsigned char*, int, int*, int*)+0xd5>
c00177a5:	83 ec 0c             	sub    esp,0xc
c00177a8:	68 e2 bc 02 c0       	push   0xc002bce2
c00177ad:	eb 7f                	jmp    c001782e <Video::tgaParse(unsigned char*, int, int*, int*)+0x154>
c00177af:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00177b7:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c00177bf:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c00177c3:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c00177cb:	80 7b 10 20          	cmp    BYTE PTR [ebx+0x10],0x20
c00177cf:	75 0c                	jne    c00177dd <Video::tgaParse(unsigned char*, int, int*, int*)+0x103>
c00177d1:	0f b6 44 33 03       	movzx  eax,BYTE PTR [ebx+esi*1+0x3]
c00177d6:	c1 e0 18             	shl    eax,0x18
c00177d9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00177dd:	41                   	inc    ecx
c00177de:	0f b6 54 33 02       	movzx  edx,BYTE PTR [ebx+esi*1+0x2]
c00177e3:	c1 e2 10             	shl    edx,0x10
c00177e6:	89 d0                	mov    eax,edx
c00177e8:	0f b6 54 33 01       	movzx  edx,BYTE PTR [ebx+esi*1+0x1]
c00177ed:	c1 e2 08             	shl    edx,0x8
c00177f0:	09 c2                	or     edx,eax
c00177f2:	0f b6 04 33          	movzx  eax,BYTE PTR [ebx+esi*1]
c00177f6:	09 c2                	or     edx,eax
c00177f8:	0b 54 24 08          	or     edx,DWORD PTR [esp+0x8]
c00177fc:	89 54 8d fc          	mov    DWORD PTR [ebp+ecx*4-0x4],edx
c0017800:	0f b6 43 10          	movzx  eax,BYTE PTR [ebx+0x10]
c0017804:	c1 f8 03             	sar    eax,0x3
c0017807:	01 c6                	add    esi,eax
c0017809:	89 c8                	mov    eax,ecx
c001780b:	2b 44 24 04          	sub    eax,DWORD PTR [esp+0x4]
c001780f:	39 c7                	cmp    edi,eax
c0017811:	7f b0                	jg     c00177c3 <Video::tgaParse(unsigned char*, int, int*, int*)+0xe9>
c0017813:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017817:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001781b:	39 14 24             	cmp    DWORD PTR [esp],edx
c001781e:	7e 22                	jle    c0017842 <Video::tgaParse(unsigned char*, int, int*, int*)+0x168>
c0017820:	89 4c 24 04          	mov    DWORD PTR [esp+0x4],ecx
c0017824:	eb 99                	jmp    c00177bf <Video::tgaParse(unsigned char*, int, int*, int*)+0xe5>
c0017826:	50                   	push   eax
c0017827:	50                   	push   eax
c0017828:	52                   	push   edx
c0017829:	68 f0 bc 02 c0       	push   0xc002bcf0
c001782e:	e8 14 b6 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0017833:	89 2c 24             	mov    DWORD PTR [esp],ebp
c0017836:	e8 7d 80 ff ff       	call   c000f8b8 <free>
c001783b:	83 c4 10             	add    esp,0x10
c001783e:	31 ed                	xor    ebp,ebp
c0017840:	eb 0f                	jmp    c0017851 <Video::tgaParse(unsigned char*, int, int*, int*)+0x177>
c0017842:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017846:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
c0017849:	89 38                	mov    DWORD PTR [eax],edi
c001784b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001784f:	89 08                	mov    DWORD PTR [eax],ecx
c0017851:	83 c4 1c             	add    esp,0x1c
c0017854:	89 e8                	mov    eax,ebp
c0017856:	5b                   	pop    ebx
c0017857:	5e                   	pop    esi
c0017858:	5f                   	pop    edi
c0017859:	5d                   	pop    ebp
c001785a:	c3                   	ret    
c001785b:	90                   	nop

c001785c <Video::putTGA(int, int, unsigned char*, int)>:
c001785c:	55                   	push   ebp
c001785d:	57                   	push   edi
c001785e:	56                   	push   esi
c001785f:	53                   	push   ebx
c0017860:	83 ec 28             	sub    esp,0x28
c0017863:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0017867:	8d 44 24 18          	lea    eax,[esp+0x18]
c001786b:	50                   	push   eax
c001786c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0017870:	50                   	push   eax
c0017871:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017875:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0017879:	56                   	push   esi
c001787a:	e8 5b fe ff ff       	call   c00176da <Video::tgaParse(unsigned char*, int, int*, int*)>
c001787f:	83 c4 20             	add    esp,0x20
c0017882:	85 c0                	test   eax,eax
c0017884:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0017888:	74 35                	je     c00178bf <Video::putTGA(int, int, unsigned char*, int)+0x63>
c001788a:	89 c7                	mov    edi,eax
c001788c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017890:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0017894:	39 d8                	cmp    eax,ebx
c0017896:	7e 27                	jle    c00178bf <Video::putTGA(int, int, unsigned char*, int)+0x63>
c0017898:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c001789c:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00178a0:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00178a4:	39 e8                	cmp    eax,ebp
c00178a6:	7e 14                	jle    c00178bc <Video::putTGA(int, int, unsigned char*, int)+0x60>
c00178a8:	8b 06                	mov    eax,DWORD PTR [esi]
c00178aa:	83 c7 04             	add    edi,0x4
c00178ad:	ff 77 fc             	push   DWORD PTR [edi-0x4]
c00178b0:	53                   	push   ebx
c00178b1:	55                   	push   ebp
c00178b2:	45                   	inc    ebp
c00178b3:	56                   	push   esi
c00178b4:	ff 50 24             	call   DWORD PTR [eax+0x24]
c00178b7:	83 c4 10             	add    esp,0x10
c00178ba:	eb e0                	jmp    c001789c <Video::putTGA(int, int, unsigned char*, int)+0x40>
c00178bc:	43                   	inc    ebx
c00178bd:	eb cd                	jmp    c001788c <Video::putTGA(int, int, unsigned char*, int)+0x30>
c00178bf:	83 c4 1c             	add    esp,0x1c
c00178c2:	5b                   	pop    ebx
c00178c3:	5e                   	pop    esi
c00178c4:	5f                   	pop    edi
c00178c5:	5d                   	pop    ebp
c00178c6:	c3                   	ret    
c00178c7:	90                   	nop

c00178c8 <ACPI::close(int, int, void*)>:
c00178c8:	83 ec 1c             	sub    esp,0x1c
c00178cb:	81 7c 24 28 0f 27 00 00 	cmp    DWORD PTR [esp+0x28],0x270f
c00178d3:	74 0a                	je     c00178df <ACPI::close(int, int, void*)+0x17>
c00178d5:	b8 00 00 00 00       	mov    eax,0x0
c00178da:	e9 9a 00 00 00       	jmp    c0017979 <ACPI::close(int, int, void*)+0xb1>
c00178df:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00178e4:	75 37                	jne    c001791d <ACPI::close(int, int, void*)+0x55>
c00178e6:	83 ec 0c             	sub    esp,0xc
c00178e9:	68 4c bd 02 c0       	push   0xc002bd4c
c00178ee:	e8 54 b5 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00178f3:	83 c4 10             	add    esp,0x10
c00178f6:	a1 08 15 03 c0       	mov    eax,ds:0xc0031508
c00178fb:	85 c0                	test   eax,eax
c00178fd:	74 07                	je     c0017906 <ACPI::close(int, int, void*)+0x3e>
c00178ff:	a1 08 15 03 c0       	mov    eax,ds:0xc0031508
c0017904:	ff d0                	call   eax
c0017906:	83 ec 0c             	sub    esp,0xc
c0017909:	68 c0 be 02 c0       	push   0xc002bec0
c001790e:	e8 ee 2e 00 00       	call   c001a801 <Krnl::panic(char const*)>
c0017913:	83 c4 10             	add    esp,0x10
c0017916:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001791b:	eb 5c                	jmp    c0017979 <ACPI::close(int, int, void*)+0xb1>
c001791d:	83 7c 24 24 01       	cmp    DWORD PTR [esp+0x24],0x1
c0017922:	75 50                	jne    c0017974 <ACPI::close(int, int, void*)+0xac>
c0017924:	a1 04 15 03 c0       	mov    eax,ds:0xc0031504
c0017929:	85 c0                	test   eax,eax
c001792b:	74 07                	je     c0017934 <ACPI::close(int, int, void*)+0x6c>
c001792d:	a1 04 15 03 c0       	mov    eax,ds:0xc0031504
c0017932:	ff d0                	call   eax
c0017934:	c6 44 24 0f 02       	mov    BYTE PTR [esp+0xf],0x2
c0017939:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001793e:	83 e0 02             	and    eax,0x2
c0017941:	74 1c                	je     c001795f <ACPI::close(int, int, void*)+0x97>
c0017943:	66 c7 44 24 0c 64 00 	mov    WORD PTR [esp+0xc],0x64
c001794a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001794e:	89 c2                	mov    edx,eax
c0017950:	ec                   	in     al,dx
c0017951:	88 44 24 0b          	mov    BYTE PTR [esp+0xb],al
c0017955:	8a 44 24 0b          	mov    al,BYTE PTR [esp+0xb]
c0017959:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001795d:	eb da                	jmp    c0017939 <ACPI::close(int, int, void*)+0x71>
c001795f:	66 c7 44 24 08 64 00 	mov    WORD PTR [esp+0x8],0x64
c0017966:	c6 44 24 07 fe       	mov    BYTE PTR [esp+0x7],0xfe
c001796b:	8a 44 24 07          	mov    al,BYTE PTR [esp+0x7]
c001796f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0017973:	ee                   	out    dx,al
c0017974:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0017979:	83 c4 1c             	add    esp,0x1c
c001797c:	c3                   	ret    

c001797d <findRSDP()>:
c001797d:	83 ec 1c             	sub    esp,0x1c
c0017980:	83 ec 0c             	sub    esp,0xc
c0017983:	68 59 bd 02 c0       	push   0xc002bd59
c0017988:	e8 ba b4 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001798d:	83 c4 10             	add    esp,0x10
c0017990:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0017995:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001799b:	83 e0 04             	and    eax,0x4
c001799e:	84 c0                	test   al,al
c00179a0:	75 07                	jne    c00179a9 <findRSDP()+0x2c>
c00179a2:	b8 00 00 00 00       	mov    eax,0x0
c00179a7:	eb 6a                	jmp    c0017a13 <findRSDP()+0x96>
c00179a9:	a1 94 ee 02 c0       	mov    eax,ds:0xc002ee94
c00179ae:	3d ff 07 00 00       	cmp    eax,0x7ff
c00179b3:	7f 1b                	jg     c00179d0 <findRSDP()+0x53>
c00179b5:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00179ba:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c00179c0:	83 e2 fb             	and    edx,0xfffffffb
c00179c3:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c00179c9:	b8 00 00 00 00       	mov    eax,0x0
c00179ce:	eb 43                	jmp    c0017a13 <findRSDP()+0x96>
c00179d0:	c7 44 24 0c 00 00 00 c2 	mov    DWORD PTR [esp+0xc],0xc2000000
c00179d8:	81 7c 24 0c fe ff 0f c2 	cmp    DWORD PTR [esp+0xc],0xc20ffffe
c00179e0:	77 2c                	ja     c0017a0e <findRSDP()+0x91>
c00179e2:	83 ec 04             	sub    esp,0x4
c00179e5:	6a 08                	push   0x8
c00179e7:	68 67 bd 02 c0       	push   0xc002bd67
c00179ec:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c00179f0:	e8 73 8c fe ff       	call   c0000668 <memcmp>
c00179f5:	83 c4 10             	add    esp,0x10
c00179f8:	85 c0                	test   eax,eax
c00179fa:	0f 94 c0             	sete   al
c00179fd:	84 c0                	test   al,al
c00179ff:	74 06                	je     c0017a07 <findRSDP()+0x8a>
c0017a01:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017a05:	eb 0c                	jmp    c0017a13 <findRSDP()+0x96>
c0017a07:	83 44 24 0c 10       	add    DWORD PTR [esp+0xc],0x10
c0017a0c:	eb ca                	jmp    c00179d8 <findRSDP()+0x5b>
c0017a0e:	b8 00 00 00 00       	mov    eax,0x0
c0017a13:	83 c4 1c             	add    esp,0x1c
c0017a16:	c3                   	ret    

c0017a17 <loadACPITables(unsigned char*)>:
c0017a17:	57                   	push   edi
c0017a18:	56                   	push   esi
c0017a19:	53                   	push   ebx
c0017a1a:	83 ec 50             	sub    esp,0x50
c0017a1d:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0017a22:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017a28:	83 e0 04             	and    eax,0x4
c0017a2b:	84 c0                	test   al,al
c0017a2d:	0f 84 21 02 00 00    	je     c0017c54 <loadACPITables(unsigned char*)+0x23d>
c0017a33:	a0 20 17 03 c0       	mov    al,ds:0xc0031720
c0017a38:	84 c0                	test   al,al
c0017a3a:	74 75                	je     c0017ab1 <loadACPITables(unsigned char*)+0x9a>
c0017a3c:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017a40:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017a44:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017a48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017a4b:	83 e8 24             	sub    eax,0x24
c0017a4e:	c1 e8 03             	shr    eax,0x3
c0017a51:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017a55:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017a5d:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017a61:	3b 44 24 3c          	cmp    eax,DWORD PTR [esp+0x3c]
c0017a65:	0f 8d b2 00 00 00    	jge    c0017b1d <loadACPITables(unsigned char*)+0x106>
c0017a6b:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017a6f:	83 c0 24             	add    eax,0x24
c0017a72:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017a76:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017a7a:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c0017a7e:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017a82:	c1 e0 03             	shl    eax,0x3
c0017a85:	01 44 24 34          	add    DWORD PTR [esp+0x34],eax
c0017a89:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0017a8d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0017a90:	8b 00                	mov    eax,DWORD PTR [eax]
c0017a92:	89 c1                	mov    ecx,eax
c0017a94:	a1 0c 15 03 c0       	mov    eax,ds:0xc003150c
c0017a99:	8d 50 01             	lea    edx,[eax+0x1]
c0017a9c:	89 15 0c 15 03 c0    	mov    DWORD PTR ds:0xc003150c,edx
c0017aa2:	89 ca                	mov    edx,ecx
c0017aa4:	89 14 c5 24 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffceadc],edx
c0017aab:	ff 44 24 4c          	inc    DWORD PTR [esp+0x4c]
c0017aaf:	eb ac                	jmp    c0017a5d <loadACPITables(unsigned char*)+0x46>
c0017ab1:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017ab5:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017ab9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0017abd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017ac0:	83 e8 24             	sub    eax,0x24
c0017ac3:	c1 e8 02             	shr    eax,0x2
c0017ac6:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c0017aca:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0017ad2:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017ad6:	3b 44 24 2c          	cmp    eax,DWORD PTR [esp+0x2c]
c0017ada:	7d 41                	jge    c0017b1d <loadACPITables(unsigned char*)+0x106>
c0017adc:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017ae0:	83 c0 24             	add    eax,0x24
c0017ae3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017ae7:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017aeb:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017aef:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0017af3:	c1 e0 02             	shl    eax,0x2
c0017af6:	01 44 24 24          	add    DWORD PTR [esp+0x24],eax
c0017afa:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017afe:	8b 08                	mov    ecx,DWORD PTR [eax]
c0017b00:	a1 0c 15 03 c0       	mov    eax,ds:0xc003150c
c0017b05:	8d 50 01             	lea    edx,[eax+0x1]
c0017b08:	89 15 0c 15 03 c0    	mov    DWORD PTR ds:0xc003150c,edx
c0017b0e:	89 ca                	mov    edx,ecx
c0017b10:	89 14 c5 24 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffceadc],edx
c0017b17:	ff 44 24 48          	inc    DWORD PTR [esp+0x48]
c0017b1b:	eb b5                	jmp    c0017ad2 <loadACPITables(unsigned char*)+0xbb>
c0017b1d:	c7 44 24 44 00 00 00 00 	mov    DWORD PTR [esp+0x44],0x0
c0017b25:	a1 0c 15 03 c0       	mov    eax,ds:0xc003150c
c0017b2a:	39 44 24 44          	cmp    DWORD PTR [esp+0x44],eax
c0017b2e:	0f 8d 21 01 00 00    	jge    c0017c55 <loadACPITables(unsigned char*)+0x23e>
c0017b34:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017b38:	8b 04 c5 24 15 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffceadc]
c0017b3f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017b43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b47:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0017b4b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b4f:	25 ff 0f 00 00       	and    eax,0xfff
c0017b54:	89 c6                	mov    esi,eax
c0017b56:	8b 1d d0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efd0
c0017b5c:	83 ec 0c             	sub    esp,0xc
c0017b5f:	6a 01                	push   0x1
c0017b61:	e8 db 9e ff ff       	call   c0011a41 <Virt::allocateKernelVirtualPages(int)>
c0017b66:	83 c4 10             	add    esp,0x10
c0017b69:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017b6d:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017b73:	83 ec 0c             	sub    esp,0xc
c0017b76:	6a 01                	push   0x1
c0017b78:	6a 01                	push   0x1
c0017b7a:	50                   	push   eax
c0017b7b:	52                   	push   edx
c0017b7c:	53                   	push   ebx
c0017b7d:	e8 ec a9 ff ff       	call   c001256e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017b82:	83 c4 20             	add    esp,0x20
c0017b85:	09 f0                	or     eax,esi
c0017b87:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017b8b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017b8f:	c1 e0 03             	shl    eax,0x3
c0017b92:	05 20 15 03 c0       	add    eax,0xc0031520
c0017b97:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0017b9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017b9f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0017ba3:	c7 44 24 04 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x4
c0017bab:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017baf:	89 04 24             	mov    DWORD PTR [esp],eax
c0017bb2:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0017bb6:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0017bba:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0017bbe:	89 c6                	mov    esi,eax
c0017bc0:	89 d7                	mov    edi,edx
c0017bc2:	fc                   	cld    
c0017bc3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017bc5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bc9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017bcc:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0017bd0:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0017bd4:	05 00 10 00 00       	add    eax,0x1000
c0017bd9:	c1 e8 0c             	shr    eax,0xc
c0017bdc:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0017be0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017be4:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0017be8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0017bec:	25 ff 0f 00 00       	and    eax,0xfff
c0017bf1:	89 c6                	mov    esi,eax
c0017bf3:	8b 1d d0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efd0
c0017bf9:	83 ec 0c             	sub    esp,0xc
c0017bfc:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0017c00:	e8 3c 9e ff ff       	call   c0011a41 <Virt::allocateKernelVirtualPages(int)>
c0017c05:	83 c4 10             	add    esp,0x10
c0017c08:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0017c0c:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017c12:	83 ec 0c             	sub    esp,0xc
c0017c15:	6a 01                	push   0x1
c0017c17:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0017c1b:	50                   	push   eax
c0017c1c:	52                   	push   edx
c0017c1d:	53                   	push   ebx
c0017c1e:	e8 4b a9 ff ff       	call   c001256e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017c23:	83 c4 20             	add    esp,0x20
c0017c26:	09 f0                	or     eax,esi
c0017c28:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0017c2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0017c30:	83 ec 0c             	sub    esp,0xc
c0017c33:	50                   	push   eax
c0017c34:	e8 c8 a2 ff ff       	call   c0011f01 <Virt::freeKernelVirtualPages(unsigned long)>
c0017c39:	83 c4 10             	add    esp,0x10
c0017c3c:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017c40:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0017c44:	89 14 c5 24 15 03 c0 	mov    DWORD PTR [eax*8-0x3ffceadc],edx
c0017c4b:	ff 44 24 44          	inc    DWORD PTR [esp+0x44]
c0017c4f:	e9 d1 fe ff ff       	jmp    c0017b25 <loadACPITables(unsigned char*)+0x10e>
c0017c54:	90                   	nop
c0017c55:	83 c4 50             	add    esp,0x50
c0017c58:	5b                   	pop    ebx
c0017c59:	5e                   	pop    esi
c0017c5a:	5f                   	pop    edi
c0017c5b:	c3                   	ret    

c0017c5c <findRSDT(unsigned char*)>:
c0017c5c:	57                   	push   edi
c0017c5d:	56                   	push   esi
c0017c5e:	53                   	push   ebx
c0017c5f:	83 ec 50             	sub    esp,0x50
c0017c62:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0017c67:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017c6d:	83 e0 04             	and    eax,0x4
c0017c70:	84 c0                	test   al,al
c0017c72:	75 0a                	jne    c0017c7e <findRSDT(unsigned char*)+0x22>
c0017c74:	b8 00 00 00 00       	mov    eax,0x0
c0017c79:	e9 12 01 00 00       	jmp    c0017d90 <findRSDT(unsigned char*)+0x134>
c0017c7e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0017c82:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c0017c86:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c0017c8a:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c0017c8e:	c7 44 24 34 24 00 00 00 	mov    DWORD PTR [esp+0x34],0x24
c0017c96:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0017c9a:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0017c9e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0017ca2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0017ca6:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0017caa:	89 c6                	mov    esi,eax
c0017cac:	89 d7                	mov    edi,edx
c0017cae:	fc                   	cld    
c0017caf:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0017cb1:	8a 44 24 1b          	mov    al,BYTE PTR [esp+0x1b]
c0017cb5:	88 44 24 4b          	mov    BYTE PTR [esp+0x4b],al
c0017cb9:	c7 44 24 4c 00 00 00 00 	mov    DWORD PTR [esp+0x4c],0x0
c0017cc1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0017cc5:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017cc9:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017ccd:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0017cd1:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017cd5:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017cd9:	25 ff 0f 00 00       	and    eax,0xfff
c0017cde:	89 c6                	mov    esi,eax
c0017ce0:	8b 1d d0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efd0
c0017ce6:	83 ec 0c             	sub    esp,0xc
c0017ce9:	6a 02                	push   0x2
c0017ceb:	e8 51 9d ff ff       	call   c0011a41 <Virt::allocateKernelVirtualPages(int)>
c0017cf0:	83 c4 10             	add    esp,0x10
c0017cf3:	8b 54 24 44          	mov    edx,DWORD PTR [esp+0x44]
c0017cf7:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017cfd:	83 ec 0c             	sub    esp,0xc
c0017d00:	6a 01                	push   0x1
c0017d02:	6a 02                	push   0x2
c0017d04:	50                   	push   eax
c0017d05:	52                   	push   edx
c0017d06:	53                   	push   ebx
c0017d07:	e8 62 a8 ff ff       	call   c001256e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d0c:	83 c4 20             	add    esp,0x20
c0017d0f:	09 f0                	or     eax,esi
c0017d11:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0017d15:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017d19:	25 ff 0f 00 00       	and    eax,0xfff
c0017d1e:	89 c6                	mov    esi,eax
c0017d20:	8b 1d d0 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efd0
c0017d26:	83 ec 0c             	sub    esp,0xc
c0017d29:	6a 02                	push   0x2
c0017d2b:	e8 11 9d ff ff       	call   c0011a41 <Virt::allocateKernelVirtualPages(int)>
c0017d30:	83 c4 10             	add    esp,0x10
c0017d33:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0017d37:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
c0017d3d:	83 ec 0c             	sub    esp,0xc
c0017d40:	6a 01                	push   0x1
c0017d42:	6a 02                	push   0x2
c0017d44:	50                   	push   eax
c0017d45:	52                   	push   edx
c0017d46:	53                   	push   ebx
c0017d47:	e8 22 a8 ff ff       	call   c001256e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c0017d4c:	83 c4 20             	add    esp,0x20
c0017d4f:	09 f0                	or     eax,esi
c0017d51:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c0017d55:	80 7c 24 4b 00       	cmp    BYTE PTR [esp+0x4b],0x0
c0017d5a:	75 11                	jne    c0017d6d <findRSDT(unsigned char*)+0x111>
c0017d5c:	c6 05 20 17 03 c0 00 	mov    BYTE PTR ds:0xc0031720,0x0
c0017d63:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0017d67:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017d6b:	eb 1f                	jmp    c0017d8c <findRSDT(unsigned char*)+0x130>
c0017d6d:	80 7c 24 4b 02       	cmp    BYTE PTR [esp+0x4b],0x2
c0017d72:	75 11                	jne    c0017d85 <findRSDT(unsigned char*)+0x129>
c0017d74:	c6 05 20 17 03 c0 01 	mov    BYTE PTR ds:0xc0031720,0x1
c0017d7b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c0017d7f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0017d83:	eb 07                	jmp    c0017d8c <findRSDT(unsigned char*)+0x130>
c0017d85:	b8 00 00 00 00       	mov    eax,0x0
c0017d8a:	eb 04                	jmp    c0017d90 <findRSDT(unsigned char*)+0x134>
c0017d8c:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0017d90:	83 c4 50             	add    esp,0x50
c0017d93:	5b                   	pop    ebx
c0017d94:	5e                   	pop    esi
c0017d95:	5f                   	pop    edi
c0017d96:	c3                   	ret    

c0017d97 <findDataTable(unsigned char*, char*)>:
c0017d97:	83 ec 1c             	sub    esp,0x1c
c0017d9a:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0017d9f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017da5:	83 e0 04             	and    eax,0x4
c0017da8:	84 c0                	test   al,al
c0017daa:	75 07                	jne    c0017db3 <findDataTable(unsigned char*, char*)+0x1c>
c0017dac:	b8 00 00 00 00       	mov    eax,0x0
c0017db1:	eb 7c                	jmp    c0017e2f <findDataTable(unsigned char*, char*)+0x98>
c0017db3:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0017dbb:	a1 0c 15 03 c0       	mov    eax,ds:0xc003150c
c0017dc0:	39 44 24 0c          	cmp    DWORD PTR [esp+0xc],eax
c0017dc4:	7d 3a                	jge    c0017e00 <findDataTable(unsigned char*, char*)+0x69>
c0017dc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017dca:	c1 e0 03             	shl    eax,0x3
c0017dcd:	05 20 15 03 c0       	add    eax,0xc0031520
c0017dd2:	83 ec 04             	sub    esp,0x4
c0017dd5:	6a 04                	push   0x4
c0017dd7:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017ddb:	50                   	push   eax
c0017ddc:	e8 87 88 fe ff       	call   c0000668 <memcmp>
c0017de1:	83 c4 10             	add    esp,0x10
c0017de4:	85 c0                	test   eax,eax
c0017de6:	0f 94 c0             	sete   al
c0017de9:	84 c0                	test   al,al
c0017deb:	74 0d                	je     c0017dfa <findDataTable(unsigned char*, char*)+0x63>
c0017ded:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0017df1:	8b 04 c5 24 15 03 c0 	mov    eax,DWORD PTR [eax*8-0x3ffceadc]
c0017df8:	eb 35                	jmp    c0017e2f <findDataTable(unsigned char*, char*)+0x98>
c0017dfa:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0017dfe:	eb bb                	jmp    c0017dbb <findDataTable(unsigned char*, char*)+0x24>
c0017e00:	a0 20 17 03 c0       	mov    al,ds:0xc0031720
c0017e05:	84 c0                	test   al,al
c0017e07:	74 07                	je     c0017e10 <findDataTable(unsigned char*, char*)+0x79>
c0017e09:	b8 58 00 00 00       	mov    eax,0x58
c0017e0e:	eb 05                	jmp    c0017e15 <findDataTable(unsigned char*, char*)+0x7e>
c0017e10:	b8 52 00 00 00       	mov    eax,0x52
c0017e15:	83 ec 04             	sub    esp,0x4
c0017e18:	50                   	push   eax
c0017e19:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0017e1d:	68 e4 be 02 c0       	push   0xc002bee4
c0017e22:	e8 20 b0 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0017e27:	83 c4 10             	add    esp,0x10
c0017e2a:	b8 00 00 00 00       	mov    eax,0x0
c0017e2f:	83 c4 1c             	add    esp,0x1c
c0017e32:	c3                   	ret    

c0017e33 <scanMADT()>:
c0017e33:	53                   	push   ebx
c0017e34:	83 ec 38             	sub    esp,0x38
c0017e37:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0017e3c:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0017e42:	83 e0 04             	and    eax,0x4
c0017e45:	84 c0                	test   al,al
c0017e47:	0f 84 63 04 00 00    	je     c00182b0 <scanMADT()+0x47d>
c0017e4d:	e8 2b fb ff ff       	call   c001797d <findRSDP()>
c0017e52:	a3 2c 17 03 c0       	mov    ds:0xc003172c,eax
c0017e57:	a1 2c 17 03 c0       	mov    eax,ds:0xc003172c
c0017e5c:	85 c0                	test   eax,eax
c0017e5e:	75 19                	jne    c0017e79 <scanMADT()+0x46>
c0017e60:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0017e65:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017e6b:	83 e2 fb             	and    edx,0xfffffffb
c0017e6e:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017e74:	e9 3b 04 00 00       	jmp    c00182b4 <scanMADT()+0x481>
c0017e79:	a1 2c 17 03 c0       	mov    eax,ds:0xc003172c
c0017e7e:	83 ec 0c             	sub    esp,0xc
c0017e81:	50                   	push   eax
c0017e82:	e8 d5 fd ff ff       	call   c0017c5c <findRSDT(unsigned char*)>
c0017e87:	83 c4 10             	add    esp,0x10
c0017e8a:	a3 28 17 03 c0       	mov    ds:0xc0031728,eax
c0017e8f:	a1 28 17 03 c0       	mov    eax,ds:0xc0031728
c0017e94:	85 c0                	test   eax,eax
c0017e96:	75 19                	jne    c0017eb1 <scanMADT()+0x7e>
c0017e98:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0017e9d:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017ea3:	83 e2 fb             	and    edx,0xfffffffb
c0017ea6:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017eac:	e9 03 04 00 00       	jmp    c00182b4 <scanMADT()+0x481>
c0017eb1:	a1 28 17 03 c0       	mov    eax,ds:0xc0031728
c0017eb6:	83 ec 0c             	sub    esp,0xc
c0017eb9:	50                   	push   eax
c0017eba:	e8 58 fb ff ff       	call   c0017a17 <loadACPITables(unsigned char*)>
c0017ebf:	83 c4 10             	add    esp,0x10
c0017ec2:	a1 28 17 03 c0       	mov    eax,ds:0xc0031728
c0017ec7:	83 ec 08             	sub    esp,0x8
c0017eca:	68 70 bd 02 c0       	push   0xc002bd70
c0017ecf:	50                   	push   eax
c0017ed0:	e8 c2 fe ff ff       	call   c0017d97 <findDataTable(unsigned char*, char*)>
c0017ed5:	83 c4 10             	add    esp,0x10
c0017ed8:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c0017edc:	83 7c 24 28 00       	cmp    DWORD PTR [esp+0x28],0x0
c0017ee1:	75 19                	jne    c0017efc <scanMADT()+0xc9>
c0017ee3:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0017ee8:	8a 90 e8 01 00 00    	mov    dl,BYTE PTR [eax+0x1e8]
c0017eee:	83 e2 fe             	and    edx,0xfffffffe
c0017ef1:	88 90 e8 01 00 00    	mov    BYTE PTR [eax+0x1e8],dl
c0017ef7:	e9 b8 03 00 00       	jmp    c00182b4 <scanMADT()+0x481>
c0017efc:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0017f04:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0017f08:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0017f0b:	39 44 24 2c          	cmp    DWORD PTR [esp+0x2c],eax
c0017f0f:	0f 87 9f 03 00 00    	ja     c00182b4 <scanMADT()+0x481>
c0017f15:	81 7c 24 2c f3 01 00 00 	cmp    DWORD PTR [esp+0x2c],0x1f3
c0017f1d:	0f 87 91 03 00 00    	ja     c00182b4 <scanMADT()+0x481>
c0017f23:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f27:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0017f2b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f2f:	8d 50 01             	lea    edx,[eax+0x1]
c0017f32:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f36:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f3a:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f3e:	88 44 24 23          	mov    BYTE PTR [esp+0x23],al
c0017f42:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f46:	8d 50 01             	lea    edx,[eax+0x1]
c0017f49:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f4d:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017f51:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0017f55:	88 44 24 22          	mov    BYTE PTR [esp+0x22],al
c0017f59:	80 7c 24 22 02       	cmp    BYTE PTR [esp+0x22],0x2
c0017f5e:	0f 86 4f 03 00 00    	jbe    c00182b3 <scanMADT()+0x480>
c0017f64:	80 7c 24 23 00       	cmp    BYTE PTR [esp+0x23],0x0
c0017f69:	75 57                	jne    c0017fc2 <scanMADT()+0x18f>
c0017f6b:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f6f:	8d 50 01             	lea    edx,[eax+0x1]
c0017f72:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f76:	8a 15 20 19 03 c0    	mov    dl,BYTE PTR ds:0xc0031920
c0017f7c:	0f b6 d2             	movzx  edx,dl
c0017f7f:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017f83:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017f87:	88 82 60 19 03 c0    	mov    BYTE PTR [edx-0x3ffce6a0],al
c0017f8d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017f91:	8d 50 01             	lea    edx,[eax+0x1]
c0017f94:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017f98:	8a 15 20 19 03 c0    	mov    dl,BYTE PTR ds:0xc0031920
c0017f9e:	8d 4a 01             	lea    ecx,[edx+0x1]
c0017fa1:	88 0d 20 19 03 c0    	mov    BYTE PTR ds:0xc0031920,cl
c0017fa7:	0f b6 d2             	movzx  edx,dl
c0017faa:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fae:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fb2:	88 82 40 19 03 c0    	mov    BYTE PTR [edx-0x3ffce6c0],al
c0017fb8:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0017fbd:	e9 da 02 00 00       	jmp    c001829c <scanMADT()+0x469>
c0017fc2:	80 7c 24 23 01       	cmp    BYTE PTR [esp+0x23],0x1
c0017fc7:	0f 85 14 01 00 00    	jne    c00180e1 <scanMADT()+0x2ae>
c0017fcd:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017fd1:	8d 50 01             	lea    edx,[eax+0x1]
c0017fd4:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0017fd8:	8a 15 e0 17 03 c0    	mov    dl,BYTE PTR ds:0xc00317e0
c0017fde:	0f b6 d2             	movzx  edx,dl
c0017fe1:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c0017fe5:	8a 44 01 2c          	mov    al,BYTE PTR [ecx+eax*1+0x2c]
c0017fe9:	88 82 00 18 03 c0    	mov    BYTE PTR [edx-0x3ffce800],al
c0017fef:	ff 44 24 2c          	inc    DWORD PTR [esp+0x2c]
c0017ff3:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0017ff7:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0017ffb:	01 d0                	add    eax,edx
c0017ffd:	83 c0 2c             	add    eax,0x2c
c0018000:	8a 00                	mov    al,BYTE PTR [eax]
c0018002:	0f b6 d0             	movzx  edx,al
c0018005:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018009:	8d 48 01             	lea    ecx,[eax+0x1]
c001800c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018010:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018014:	0f b6 c0             	movzx  eax,al
c0018017:	c1 e0 08             	shl    eax,0x8
c001801a:	89 d1                	mov    ecx,edx
c001801c:	09 c1                	or     ecx,eax
c001801e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018022:	8d 50 02             	lea    edx,[eax+0x2]
c0018025:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018029:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001802d:	0f b6 c0             	movzx  eax,al
c0018030:	c1 e0 10             	shl    eax,0x10
c0018033:	09 c1                	or     ecx,eax
c0018035:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018039:	8d 50 03             	lea    edx,[eax+0x3]
c001803c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018040:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018044:	0f b6 c0             	movzx  eax,al
c0018047:	c1 e0 18             	shl    eax,0x18
c001804a:	09 c1                	or     ecx,eax
c001804c:	89 ca                	mov    edx,ecx
c001804e:	a0 e0 17 03 c0       	mov    al,ds:0xc00317e0
c0018053:	0f b6 c0             	movzx  eax,al
c0018056:	89 14 85 20 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce7e0],edx
c001805d:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c0018062:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018066:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001806a:	01 d0                	add    eax,edx
c001806c:	83 c0 2c             	add    eax,0x2c
c001806f:	8a 00                	mov    al,BYTE PTR [eax]
c0018071:	0f b6 d0             	movzx  edx,al
c0018074:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018078:	8d 48 01             	lea    ecx,[eax+0x1]
c001807b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001807f:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c0018083:	0f b6 c0             	movzx  eax,al
c0018086:	c1 e0 08             	shl    eax,0x8
c0018089:	89 d1                	mov    ecx,edx
c001808b:	09 c1                	or     ecx,eax
c001808d:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018091:	8d 50 02             	lea    edx,[eax+0x2]
c0018094:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018098:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001809c:	0f b6 c0             	movzx  eax,al
c001809f:	c1 e0 10             	shl    eax,0x10
c00180a2:	09 c1                	or     ecx,eax
c00180a4:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180a8:	8d 50 03             	lea    edx,[eax+0x3]
c00180ab:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00180af:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c00180b3:	0f b6 c0             	movzx  eax,al
c00180b6:	c1 e0 18             	shl    eax,0x18
c00180b9:	09 c1                	or     ecx,eax
c00180bb:	89 ca                	mov    edx,ecx
c00180bd:	a0 e0 17 03 c0       	mov    al,ds:0xc00317e0
c00180c2:	0f b6 c0             	movzx  eax,al
c00180c5:	89 14 85 a0 18 03 c0 	mov    DWORD PTR [eax*4-0x3ffce760],edx
c00180cc:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c00180d1:	a0 e0 17 03 c0       	mov    al,ds:0xc00317e0
c00180d6:	40                   	inc    eax
c00180d7:	a2 e0 17 03 c0       	mov    ds:0xc00317e0,al
c00180dc:	e9 bb 01 00 00       	jmp    c001829c <scanMADT()+0x469>
c00180e1:	80 7c 24 23 02       	cmp    BYTE PTR [esp+0x23],0x2
c00180e6:	0f 85 e9 00 00 00    	jne    c00181d5 <scanMADT()+0x3a2>
c00180ec:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00180f0:	8d 50 01             	lea    edx,[eax+0x1]
c00180f3:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00180f7:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00180fb:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00180ff:	88 44 24 21          	mov    BYTE PTR [esp+0x21],al
c0018103:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018107:	8d 50 01             	lea    edx,[eax+0x1]
c001810a:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001810e:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018112:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c0018116:	88 44 24 20          	mov    BYTE PTR [esp+0x20],al
c001811a:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001811e:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018122:	01 d0                	add    eax,edx
c0018124:	83 c0 2c             	add    eax,0x2c
c0018127:	8a 00                	mov    al,BYTE PTR [eax]
c0018129:	0f b6 d0             	movzx  edx,al
c001812c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018130:	8d 48 01             	lea    ecx,[eax+0x1]
c0018133:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018137:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001813b:	0f b6 c0             	movzx  eax,al
c001813e:	c1 e0 08             	shl    eax,0x8
c0018141:	89 d1                	mov    ecx,edx
c0018143:	09 c1                	or     ecx,eax
c0018145:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018149:	8d 50 02             	lea    edx,[eax+0x2]
c001814c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018150:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c0018154:	0f b6 c0             	movzx  eax,al
c0018157:	c1 e0 10             	shl    eax,0x10
c001815a:	09 c1                	or     ecx,eax
c001815c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018160:	8d 50 03             	lea    edx,[eax+0x3]
c0018163:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018167:	8a 44 10 2c          	mov    al,BYTE PTR [eax+edx*1+0x2c]
c001816b:	0f b6 c0             	movzx  eax,al
c001816e:	c1 e0 18             	shl    eax,0x18
c0018171:	09 c8                	or     eax,ecx
c0018173:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0018177:	83 44 24 2c 04       	add    DWORD PTR [esp+0x2c],0x4
c001817c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018180:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018184:	01 d0                	add    eax,edx
c0018186:	83 c0 2c             	add    eax,0x2c
c0018189:	8a 00                	mov    al,BYTE PTR [eax]
c001818b:	0f b6 c0             	movzx  eax,al
c001818e:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0018192:	8d 4a 01             	lea    ecx,[edx+0x1]
c0018195:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0018199:	8a 54 0a 2c          	mov    dl,BYTE PTR [edx+ecx*1+0x2c]
c001819d:	0f b6 d2             	movzx  edx,dl
c00181a0:	c1 e2 08             	shl    edx,0x8
c00181a3:	09 d0                	or     eax,edx
c00181a5:	66 89 44 24 1a       	mov    WORD PTR [esp+0x1a],ax
c00181aa:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c00181af:	0f b6 44 24 20       	movzx  eax,BYTE PTR [esp+0x20]
c00181b4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00181b8:	88 90 a0 e0 02 c0    	mov    BYTE PTR [eax-0x3ffd1f60],dl
c00181be:	0f b6 54 24 20       	movzx  edx,BYTE PTR [esp+0x20]
c00181c3:	66 8b 44 24 1a       	mov    ax,WORD PTR [esp+0x1a]
c00181c8:	66 89 84 12 c0 17 03 c0 	mov    WORD PTR [edx+edx*1-0x3ffce840],ax
c00181d0:	e9 c7 00 00 00       	jmp    c001829c <scanMADT()+0x469>
c00181d5:	80 7c 24 23 04       	cmp    BYTE PTR [esp+0x23],0x4
c00181da:	0f 85 b0 00 00 00    	jne    c0018290 <scanMADT()+0x45d>
c00181e0:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00181e4:	8d 50 01             	lea    edx,[eax+0x1]
c00181e7:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00181eb:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181ef:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c00181f3:	0f b6 c0             	movzx  eax,al
c00181f6:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00181fa:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00181fe:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018202:	01 d0                	add    eax,edx
c0018204:	83 c0 2c             	add    eax,0x2c
c0018207:	8a 00                	mov    al,BYTE PTR [eax]
c0018209:	0f b6 d0             	movzx  edx,al
c001820c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018210:	8d 48 01             	lea    ecx,[eax+0x1]
c0018213:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018217:	8a 44 08 2c          	mov    al,BYTE PTR [eax+ecx*1+0x2c]
c001821b:	0f b6 c0             	movzx  eax,al
c001821e:	c1 e0 08             	shl    eax,0x8
c0018221:	09 d0                	or     eax,edx
c0018223:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0018227:	83 44 24 2c 02       	add    DWORD PTR [esp+0x2c],0x2
c001822c:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0018230:	8d 50 01             	lea    edx,[eax+0x1]
c0018233:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c0018237:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001823b:	8a 44 02 2c          	mov    al,BYTE PTR [edx+eax*1+0x2c]
c001823f:	0f b6 c0             	movzx  eax,al
c0018242:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0018246:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001824a:	c1 e0 08             	shl    eax,0x8
c001824d:	0b 44 24 14          	or     eax,DWORD PTR [esp+0x14]
c0018251:	89 c1                	mov    ecx,eax
c0018253:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018257:	c1 e0 18             	shl    eax,0x18
c001825a:	89 c3                	mov    ebx,eax
c001825c:	a1 30 17 03 c0       	mov    eax,ds:0xc0031730
c0018261:	8d 50 01             	lea    edx,[eax+0x1]
c0018264:	89 15 30 17 03 c0    	mov    DWORD PTR ds:0xc0031730,edx
c001826a:	09 d9                	or     ecx,ebx
c001826c:	89 ca                	mov    edx,ecx
c001826e:	89 14 85 40 17 03 c0 	mov    DWORD PTR [eax*4-0x3ffce8c0],edx
c0018275:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c0018279:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001827d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0018281:	68 14 bf 02 c0       	push   0xc002bf14
c0018286:	e8 bc ab ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001828b:	83 c4 10             	add    esp,0x10
c001828e:	eb 0c                	jmp    c001829c <scanMADT()+0x469>
c0018290:	80 7c 24 23 05       	cmp    BYTE PTR [esp+0x23],0x5
c0018295:	75 05                	jne    c001829c <scanMADT()+0x469>
c0018297:	83 44 24 2c 0a       	add    DWORD PTR [esp+0x2c],0xa
c001829c:	0f b6 54 24 22       	movzx  edx,BYTE PTR [esp+0x22]
c00182a1:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00182a5:	01 d0                	add    eax,edx
c00182a7:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c00182ab:	e9 54 fc ff ff       	jmp    c0017f04 <scanMADT()+0xd1>
c00182b0:	90                   	nop
c00182b1:	eb 01                	jmp    c00182b4 <scanMADT()+0x481>
c00182b3:	90                   	nop
c00182b4:	83 c4 38             	add    esp,0x38
c00182b7:	5b                   	pop    ebx
c00182b8:	c3                   	ret    
c00182b9:	90                   	nop

c00182ba <ACPI::ACPI()>:
c00182ba:	83 ec 0c             	sub    esp,0xc
c00182bd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182c1:	83 ec 08             	sub    esp,0x8
c00182c4:	68 75 bd 02 c0       	push   0xc002bd75
c00182c9:	50                   	push   eax
c00182ca:	e8 8b c1 ff ff       	call   c001445a <Device::Device(char const*)>
c00182cf:	83 c4 10             	add    esp,0x10
c00182d2:	ba b0 bf 02 c0       	mov    edx,0xc002bfb0
c00182d7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182db:	89 10                	mov    DWORD PTR [eax],edx
c00182dd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182e1:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00182e8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182ec:	c7 80 5c 11 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x115c],0x0
c00182f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00182fa:	c7 80 60 12 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x1260],0x0
c0018304:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018308:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c001830f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018313:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001831a:	e8 14 fb ff ff       	call   c0017e33 <scanMADT()>
c001831f:	90                   	nop
c0018320:	83 c4 0c             	add    esp,0xc
c0018323:	c3                   	ret    

c0018324 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>:
c0018324:	83 ec 2c             	sub    esp,0x2c
c0018327:	8b 4c 24 38          	mov    ecx,DWORD PTR [esp+0x38]
c001832b:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001832f:	8b 54 24 40          	mov    edx,DWORD PTR [esp+0x40]
c0018333:	88 4c 24 0c          	mov    BYTE PTR [esp+0xc],cl
c0018337:	66 89 44 24 08       	mov    WORD PTR [esp+0x8],ax
c001833c:	88 d0                	mov    al,dl
c001833e:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018342:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0018347:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001834f:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018353:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018359:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001835d:	0f 8d 97 00 00 00    	jge    c00183fa <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xd6>
c0018363:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018367:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001836b:	83 c2 2a             	add    edx,0x2a
c001836e:	8b 44 d0 0c          	mov    eax,DWORD PTR [eax+edx*8+0xc]
c0018372:	66 39 44 24 08       	cmp    WORD PTR [esp+0x8],ax
c0018377:	75 78                	jne    c00183f1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c0018379:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001837d:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0018381:	83 c2 2a             	add    edx,0x2a
c0018384:	8a 44 d0 0e          	mov    al,BYTE PTR [eax+edx*8+0xe]
c0018388:	38 44 24 04          	cmp    BYTE PTR [esp+0x4],al
c001838c:	75 63                	jne    c00183f1 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xcd>
c001838e:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c0018393:	74 3a                	je     c00183cf <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0xab>
c0018395:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c0018399:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001839d:	83 c2 2a             	add    edx,0x2a
c00183a0:	8b 54 d0 10          	mov    edx,DWORD PTR [eax+edx*8+0x10]
c00183a4:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183a8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00183ab:	39 c2                	cmp    edx,eax
c00183ad:	74 10                	je     c00183bf <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x9b>
c00183af:	83 ec 0c             	sub    esp,0xc
c00183b2:	68 50 bf 02 c0       	push   0xc002bf50
c00183b7:	e8 45 24 00 00       	call   c001a801 <Krnl::panic(char const*)>
c00183bc:	83 c4 10             	add    esp,0x10
c00183bf:	83 ec 0c             	sub    esp,0xc
c00183c2:	68 7a bd 02 c0       	push   0xc002bd7a
c00183c7:	e8 35 24 00 00       	call   c001a801 <Krnl::panic(char const*)>
c00183cc:	83 c4 10             	add    esp,0x10
c00183cf:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c00183d3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00183d7:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00183db:	83 c2 2a             	add    edx,0x2a
c00183de:	8d 54 d0 0c          	lea    edx,[eax+edx*8+0xc]
c00183e2:	8b 02                	mov    eax,DWORD PTR [edx]
c00183e4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
c00183e7:	89 01                	mov    DWORD PTR [ecx],eax
c00183e9:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00183ec:	c6 44 24 1f 01       	mov    BYTE PTR [esp+0x1f],0x1
c00183f1:	ff 44 24 18          	inc    DWORD PTR [esp+0x18]
c00183f5:	e9 55 ff ff ff       	jmp    c001834f <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)+0x2b>
c00183fa:	90                   	nop
c00183fb:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00183ff:	83 c4 2c             	add    esp,0x2c
c0018402:	c2 04 00             	ret    0x4
c0018405:	90                   	nop

c0018406 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)>:
c0018406:	83 ec 1c             	sub    esp,0x1c
c0018409:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001840d:	8b 4c 24 2c          	mov    ecx,DWORD PTR [esp+0x2c]
c0018411:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0018415:	66 89 44 24 0c       	mov    WORD PTR [esp+0xc],ax
c001841a:	88 c8                	mov    al,cl
c001841c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0018420:	88 d0                	mov    al,dl
c0018422:	88 44 24 04          	mov    BYTE PTR [esp+0x4],al
c0018426:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001842a:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018430:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018434:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018437:	8a 54 24 04          	mov    dl,BYTE PTR [esp+0x4]
c001843b:	88 54 c8 0f          	mov    BYTE PTR [eax+ecx*8+0xf],dl
c001843f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018443:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018449:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001844d:	8d 48 2a             	lea    ecx,[eax+0x2a]
c0018450:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0018454:	66 89 44 ca 0c       	mov    WORD PTR [edx+ecx*8+0xc],ax
c0018459:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001845d:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c0018463:	8a 44 24 08          	mov    al,BYTE PTR [esp+0x8]
c0018467:	8d 48 01             	lea    ecx,[eax+0x1]
c001846a:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001846e:	83 c2 2a             	add    edx,0x2a
c0018471:	88 4c d0 0e          	mov    BYTE PTR [eax+edx*8+0xe],cl
c0018475:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018479:	8b 90 5c 11 00 00    	mov    edx,DWORD PTR [eax+0x115c]
c001847f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018483:	8d 4a 2a             	lea    ecx,[edx+0x2a]
c0018486:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001848a:	89 54 c8 10          	mov    DWORD PTR [eax+ecx*8+0x10],edx
c001848e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018492:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c0018498:	8d 50 01             	lea    edx,[eax+0x1]
c001849b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001849f:	89 90 5c 11 00 00    	mov    DWORD PTR [eax+0x115c],edx
c00184a5:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00184a9:	8b 80 5c 11 00 00    	mov    eax,DWORD PTR [eax+0x115c]
c00184af:	3d 00 02 00 00       	cmp    eax,0x200
c00184b4:	75 10                	jne    c00184c6 <ACPI::registerPCIIRQAssignment(void*, unsigned short, unsigned char, unsigned char)+0xc0>
c00184b6:	83 ec 0c             	sub    esp,0xc
c00184b9:	68 89 bd 02 c0       	push   0xc002bd89
c00184be:	e8 3e 23 00 00       	call   c001a801 <Krnl::panic(char const*)>
c00184c3:	83 c4 10             	add    esp,0x10
c00184c6:	90                   	nop
c00184c7:	83 c4 1c             	add    esp,0x1c
c00184ca:	c3                   	ret    
c00184cb:	90                   	nop

c00184cc <ACPI::setScreenBrightnessLevel(void*, int)>:
c00184cc:	b8 00 00 00 00       	mov    eax,0x0
c00184d1:	c3                   	ret    

c00184d2 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>:
c00184d2:	83 ec 1c             	sub    esp,0x1c
c00184d5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00184d9:	8a 40 24             	mov    al,BYTE PTR [eax+0x24]
c00184dc:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00184e0:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00184e5:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00184ea:	83 ec 08             	sub    esp,0x8
c00184ed:	52                   	push   edx
c00184ee:	50                   	push   eax
c00184ef:	e8 ca 69 ff ff       	call   c000eebe <Computer::readCMOS(unsigned char)>
c00184f4:	83 c4 10             	add    esp,0x10
c00184f7:	88 44 24 0e          	mov    BYTE PTR [esp+0xe],al
c00184fb:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0018500:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c0018505:	83 ec 04             	sub    esp,0x4
c0018508:	6a 01                	push   0x1
c001850a:	52                   	push   edx
c001850b:	50                   	push   eax
c001850c:	e8 c3 6a ff ff       	call   c000efd4 <Computer::writeCMOS(unsigned char, unsigned char)>
c0018511:	83 c4 10             	add    esp,0x10
c0018514:	90                   	nop
c0018515:	83 c4 1c             	add    esp,0x1c
c0018518:	c3                   	ret    
c0018519:	90                   	nop

c001851a <ACPI::sleep()>:
c001851a:	83 ec 0c             	sub    esp,0xc
c001851d:	a1 00 15 03 c0       	mov    eax,ds:0xc0031500
c0018522:	85 c0                	test   eax,eax
c0018524:	74 07                	je     c001852d <ACPI::sleep()+0x13>
c0018526:	a1 00 15 03 c0       	mov    eax,ds:0xc0031500
c001852b:	ff d0                	call   eax
c001852d:	90                   	nop
c001852e:	83 c4 0c             	add    esp,0xc
c0018531:	c3                   	ret    

c0018532 <ACPI::open(int, int, void*)>:
c0018532:	57                   	push   edi
c0018533:	56                   	push   esi
c0018534:	53                   	push   ebx
c0018535:	83 ec 60             	sub    esp,0x60
c0018538:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001853c:	c6 80 64 12 00 00 00 	mov    BYTE PTR [eax+0x1264],0x0
c0018543:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018547:	c6 80 65 12 00 00 00 	mov    BYTE PTR [eax+0x1265],0x0
c001854e:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0018553:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0018559:	83 e0 04             	and    eax,0x4
c001855c:	84 c0                	test   al,al
c001855e:	74 47                	je     c00185a7 <ACPI::open(int, int, void*)+0x75>
c0018560:	a1 28 17 03 c0       	mov    eax,ds:0xc0031728
c0018565:	83 ec 08             	sub    esp,0x8
c0018568:	68 a6 bd 02 c0       	push   0xc002bda6
c001856d:	50                   	push   eax
c001856e:	e8 24 f8 ff ff       	call   c0017d97 <findDataTable(unsigned char*, char*)>
c0018573:	83 c4 10             	add    esp,0x10
c0018576:	89 44 24 5c          	mov    DWORD PTR [esp+0x5c],eax
c001857a:	83 7c 24 5c 00       	cmp    DWORD PTR [esp+0x5c],0x0
c001857f:	74 26                	je     c00185a7 <ACPI::open(int, int, void*)+0x75>
c0018581:	83 ec 0c             	sub    esp,0xc
c0018584:	68 ab bd 02 c0       	push   0xc002bdab
c0018589:	e8 b9 a8 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001858e:	83 c4 10             	add    esp,0x10
c0018591:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018595:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c001859c:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185a0:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185a7:	c7 44 24 58 5f 0c 00 00 	mov    DWORD PTR [esp+0x58],0xc5f
c00185af:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00185b3:	8a 00                	mov    al,BYTE PTR [eax]
c00185b5:	3c 01                	cmp    al,0x1
c00185b7:	75 28                	jne    c00185e1 <ACPI::open(int, int, void*)+0xaf>
c00185b9:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185bd:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185c4:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185c8:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c00185cf:	83 ec 0c             	sub    esp,0xc
c00185d2:	68 bc bd 02 c0       	push   0xc002bdbc
c00185d7:	e8 6b a8 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00185dc:	83 c4 10             	add    esp,0x10
c00185df:	eb 25                	jmp    c0018606 <ACPI::open(int, int, void*)+0xd4>
c00185e1:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c00185e5:	8a 00                	mov    al,BYTE PTR [eax]
c00185e7:	3c 02                	cmp    al,0x2
c00185e9:	75 1b                	jne    c0018606 <ACPI::open(int, int, void*)+0xd4>
c00185eb:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00185ef:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c00185f6:	83 ec 0c             	sub    esp,0xc
c00185f9:	68 c4 bd 02 c0       	push   0xc002bdc4
c00185fe:	e8 44 a8 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0018603:	83 c4 10             	add    esp,0x10
c0018606:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001860a:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c0018610:	83 f0 01             	xor    eax,0x1
c0018613:	84 c0                	test   al,al
c0018615:	74 6a                	je     c0018681 <ACPI::open(int, int, void*)+0x14f>
c0018617:	83 ec 0c             	sub    esp,0xc
c001861a:	68 cc bd 02 c0       	push   0xc002bdcc
c001861f:	e8 23 a8 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0018624:	83 c4 10             	add    esp,0x10
c0018627:	e8 24 7b fe ff       	call   c0000150 <manualPCIProbe>
c001862c:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0018630:	83 7c 24 54 01       	cmp    DWORD PTR [esp+0x54],0x1
c0018635:	75 28                	jne    c001865f <ACPI::open(int, int, void*)+0x12d>
c0018637:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001863b:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018642:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018646:	c6 80 65 12 00 00 01 	mov    BYTE PTR [eax+0x1265],0x1
c001864d:	83 ec 0c             	sub    esp,0xc
c0018650:	68 da bd 02 c0       	push   0xc002bdda
c0018655:	e8 ed a7 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001865a:	83 c4 10             	add    esp,0x10
c001865d:	eb 22                	jmp    c0018681 <ACPI::open(int, int, void*)+0x14f>
c001865f:	83 7c 24 54 02       	cmp    DWORD PTR [esp+0x54],0x2
c0018664:	75 1b                	jne    c0018681 <ACPI::open(int, int, void*)+0x14f>
c0018666:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c001866a:	c6 80 64 12 00 00 01 	mov    BYTE PTR [eax+0x1264],0x1
c0018671:	83 ec 0c             	sub    esp,0xc
c0018674:	68 e4 bd 02 c0       	push   0xc002bde4
c0018679:	e8 c9 a7 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001867e:	83 c4 10             	add    esp,0x10
c0018681:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018685:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c001868b:	84 c0                	test   al,al
c001868d:	74 13                	je     c00186a2 <ACPI::open(int, int, void*)+0x170>
c001868f:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c0018693:	8a 80 65 12 00 00    	mov    al,BYTE PTR [eax+0x1265]
c0018699:	83 f0 01             	xor    eax,0x1
c001869c:	0f b6 c0             	movzx  eax,al
c001869f:	40                   	inc    eax
c00186a0:	eb 05                	jmp    c00186a7 <ACPI::open(int, int, void*)+0x175>
c00186a2:	b8 00 00 00 00       	mov    eax,0x0
c00186a7:	83 ec 08             	sub    esp,0x8
c00186aa:	50                   	push   eax
c00186ab:	68 ee bd 02 c0       	push   0xc002bdee
c00186b0:	e8 92 a7 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00186b5:	83 c4 10             	add    esp,0x10
c00186b8:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186bc:	8a 80 64 12 00 00    	mov    al,BYTE PTR [eax+0x1264]
c00186c2:	84 c0                	test   al,al
c00186c4:	74 67                	je     c001872d <ACPI::open(int, int, void*)+0x1fb>
c00186c6:	c7 44 24 38 58 01 00 00 	mov    DWORD PTR [esp+0x38],0x158
c00186ce:	83 ec 0c             	sub    esp,0xc
c00186d1:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00186d5:	e8 ce 71 ff ff       	call   c000f8a8 <malloc>
c00186da:	83 c4 10             	add    esp,0x10
c00186dd:	89 c3                	mov    ebx,eax
c00186df:	83 ec 0c             	sub    esp,0xc
c00186e2:	53                   	push   ebx
c00186e3:	e8 32 a9 00 00       	call   c002301a <PCI::PCI()>
c00186e8:	83 c4 10             	add    esp,0x10
c00186eb:	89 5c 24 50          	mov    DWORD PTR [esp+0x50],ebx
c00186ef:	8b 44 24 70          	mov    eax,DWORD PTR [esp+0x70]
c00186f3:	83 ec 08             	sub    esp,0x8
c00186f6:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c00186fa:	50                   	push   eax
c00186fb:	e8 6a bb ff ff       	call   c001426a <Device::addChild(Device*)>
c0018700:	83 c4 10             	add    esp,0x10
c0018703:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0018707:	8b 00                	mov    eax,DWORD PTR [eax]
c0018709:	83 c0 08             	add    eax,0x8
c001870c:	8b 00                	mov    eax,DWORD PTR [eax]
c001870e:	6a 00                	push   0x0
c0018710:	6a 00                	push   0x0
c0018712:	6a 00                	push   0x0
c0018714:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c0018718:	ff d0                	call   eax
c001871a:	83 c4 10             	add    esp,0x10
c001871d:	83 ec 0c             	sub    esp,0xc
c0018720:	68 f7 bd 02 c0       	push   0xc002bdf7
c0018725:	e8 1d a7 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001872a:	83 c4 10             	add    esp,0x10
c001872d:	83 ec 0c             	sub    esp,0xc
c0018730:	68 02 be 02 c0       	push   0xc002be02
c0018735:	e8 00 49 00 00       	call   c001d03a <Thr::loadKernelSymbolTable(char const*)>
c001873a:	83 c4 10             	add    esp,0x10
c001873d:	83 ec 0c             	sub    esp,0xc
c0018740:	6a 0c                	push   0xc
c0018742:	e8 39 95 ff ff       	call   c0011c80 <Virt::setupPageSwapping(int)>
c0018747:	83 c4 10             	add    esp,0x10
c001874a:	8d 44 24 28          	lea    eax,[esp+0x28]
c001874e:	83 ec 08             	sub    esp,0x8
c0018751:	6a 12                	push   0x12
c0018753:	50                   	push   eax
c0018754:	e8 81 be ff ff       	call   c00145da <getDevicesOfType(DeviceType)>
c0018759:	83 c4 0c             	add    esp,0xc
c001875c:	83 ec 0c             	sub    esp,0xc
c001875f:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018763:	50                   	push   eax
c0018764:	e8 d7 0c 01 00       	call   c0029440 <LinkedList<Device>::isEmpty()>
c0018769:	83 c4 10             	add    esp,0x10
c001876c:	83 f0 01             	xor    eax,0x1
c001876f:	84 c0                	test   al,al
c0018771:	0f 84 fd 00 00 00    	je     c0018874 <ACPI::open(int, int, void*)+0x342>
c0018777:	83 ec 0c             	sub    esp,0xc
c001877a:	8d 44 24 34          	lea    eax,[esp+0x34]
c001877e:	50                   	push   eax
c001877f:	e8 d8 0c 01 00       	call   c002945c <LinkedList<Device>::getFirstElement()>
c0018784:	83 c4 10             	add    esp,0x10
c0018787:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001878b:	83 ec 0c             	sub    esp,0xc
c001878e:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018792:	50                   	push   eax
c0018793:	e8 cc 0c 01 00       	call   c0029464 <LinkedList<Device>::removeFirst()>
c0018798:	83 c4 10             	add    esp,0x10
c001879b:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001879f:	89 44 24 48          	mov    DWORD PTR [esp+0x48],eax
c00187a3:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c00187a7:	83 ec 0c             	sub    esp,0xc
c00187aa:	50                   	push   eax
c00187ab:	e8 a6 bd ff ff       	call   c0014556 <Device::getName()>
c00187b0:	83 c4 10             	add    esp,0x10
c00187b3:	83 ec 08             	sub    esp,0x8
c00187b6:	50                   	push   eax
c00187b7:	68 80 bf 02 c0       	push   0xc002bf80
c00187bc:	e8 86 a6 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00187c1:	83 c4 10             	add    esp,0x10
c00187c4:	8b 54 24 48          	mov    edx,DWORD PTR [esp+0x48]
c00187c8:	8d 44 24 04          	lea    eax,[esp+0x4]
c00187cc:	8d 9a 18 01 00 00    	lea    ebx,[edx+0x118]
c00187d2:	ba 09 00 00 00       	mov    edx,0x9
c00187d7:	fc                   	cld    
c00187d8:	89 c7                	mov    edi,eax
c00187da:	89 de                	mov    esi,ebx
c00187dc:	89 d1                	mov    ecx,edx
c00187de:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00187e0:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00187e4:	0f b6 c0             	movzx  eax,al
c00187e7:	83 ec 08             	sub    esp,0x8
c00187ea:	50                   	push   eax
c00187eb:	68 20 be 02 c0       	push   0xc002be20
c00187f0:	e8 52 a6 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00187f5:	83 c4 10             	add    esp,0x10
c00187f8:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c00187fc:	0f b6 c0             	movzx  eax,al
c00187ff:	83 ec 08             	sub    esp,0x8
c0018802:	50                   	push   eax
c0018803:	68 32 be 02 c0       	push   0xc002be32
c0018808:	e8 3a a6 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001880d:	83 c4 10             	add    esp,0x10
c0018810:	66 8b 44 24 06       	mov    ax,WORD PTR [esp+0x6]
c0018815:	0f b7 c0             	movzx  eax,ax
c0018818:	83 ec 08             	sub    esp,0x8
c001881b:	50                   	push   eax
c001881c:	68 44 be 02 c0       	push   0xc002be44
c0018821:	e8 21 a6 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0018826:	83 c4 10             	add    esp,0x10
c0018829:	83 ec 0c             	sub    esp,0xc
c001882c:	83 ec 24             	sub    esp,0x24
c001882f:	89 e0                	mov    eax,esp
c0018831:	89 c3                	mov    ebx,eax
c0018833:	8d 44 24 34          	lea    eax,[esp+0x34]
c0018837:	ba 09 00 00 00       	mov    edx,0x9
c001883c:	89 df                	mov    edi,ebx
c001883e:	89 c6                	mov    esi,eax
c0018840:	89 d1                	mov    ecx,edx
c0018842:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0018844:	e8 33 ab 00 00       	call   c002337c <PCI::pciDetailsToFilepath(PCIDeviceInfo)>
c0018849:	83 c4 30             	add    esp,0x30
c001884c:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c0018850:	83 7c 24 44 00       	cmp    DWORD PTR [esp+0x44],0x0
c0018855:	0f 84 01 ff ff ff    	je     c001875c <ACPI::open(int, int, void*)+0x22a>
c001885b:	83 ec 08             	sub    esp,0x8
c001885e:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018862:	68 56 be 02 c0       	push   0xc002be56
c0018867:	e8 db a5 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001886c:	83 c4 10             	add    esp,0x10
c001886f:	e9 e8 fe ff ff       	jmp    c001875c <ACPI::open(int, int, void*)+0x22a>
c0018874:	83 ec 0c             	sub    esp,0xc
c0018877:	8d 44 24 34          	lea    eax,[esp+0x34]
c001887b:	50                   	push   eax
c001887c:	e8 bd 0b 01 00       	call   c002943e <LinkedList<Device>::~LinkedList()>
c0018881:	83 c4 10             	add    esp,0x10
c0018884:	8b 1d 48 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee48
c001888a:	83 ec 08             	sub    esp,0x8
c001888d:	6a 01                	push   0x1
c001888f:	68 62 be 02 c0       	push   0xc002be62
c0018894:	e8 18 52 00 00       	call   c001dab1 <Thr::loadDLL(char const*, bool)>
c0018899:	83 c4 10             	add    esp,0x10
c001889c:	83 ec 08             	sub    esp,0x8
c001889f:	53                   	push   ebx
c00188a0:	50                   	push   eax
c00188a1:	e8 36 54 00 00       	call   c001dcdc <Thr::executeDLL(unsigned long, void*)>
c00188a6:	83 c4 10             	add    esp,0x10
c00188a9:	8b 1d 48 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee48
c00188af:	83 ec 08             	sub    esp,0x8
c00188b2:	6a 01                	push   0x1
c00188b4:	68 7f be 02 c0       	push   0xc002be7f
c00188b9:	e8 f3 51 00 00       	call   c001dab1 <Thr::loadDLL(char const*, bool)>
c00188be:	83 c4 10             	add    esp,0x10
c00188c1:	83 ec 08             	sub    esp,0x8
c00188c4:	53                   	push   ebx
c00188c5:	50                   	push   eax
c00188c6:	e8 11 54 00 00       	call   c001dcdc <Thr::executeDLL(unsigned long, void*)>
c00188cb:	83 c4 10             	add    esp,0x10
c00188ce:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00188d3:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c00188d9:	83 e0 04             	and    eax,0x4
c00188dc:	84 c0                	test   al,al
c00188de:	0f 84 d3 00 00 00    	je     c00189b7 <ACPI::open(int, int, void*)+0x485>
c00188e4:	c7 44 24 34 14 01 00 00 	mov    DWORD PTR [esp+0x34],0x114
c00188ec:	83 ec 0c             	sub    esp,0xc
c00188ef:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00188f3:	e8 b0 6f ff ff       	call   c000f8a8 <malloc>
c00188f8:	83 c4 10             	add    esp,0x10
c00188fb:	89 c3                	mov    ebx,eax
c00188fd:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c0018902:	83 ec 04             	sub    esp,0x4
c0018905:	50                   	push   eax
c0018906:	68 9c be 02 c0       	push   0xc002be9c
c001890b:	53                   	push   ebx
c001890c:	e8 95 aa ff ff       	call   c00133a6 <File::File(char const*, Process*)>
c0018911:	83 c4 10             	add    esp,0x10
c0018914:	89 5c 24 40          	mov    DWORD PTR [esp+0x40],ebx
c0018918:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001891d:	74 17                	je     c0018936 <ACPI::open(int, int, void*)+0x404>
c001891f:	83 ec 0c             	sub    esp,0xc
c0018922:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c0018926:	e8 4d ad ff ff       	call   c0013678 <File::exists()>
c001892b:	83 c4 10             	add    esp,0x10
c001892e:	84 c0                	test   al,al
c0018930:	74 04                	je     c0018936 <ACPI::open(int, int, void*)+0x404>
c0018932:	b0 01                	mov    al,0x1
c0018934:	eb 02                	jmp    c0018938 <ACPI::open(int, int, void*)+0x406>
c0018936:	b0 00                	mov    al,0x0
c0018938:	84 c0                	test   al,al
c001893a:	74 22                	je     c001895e <ACPI::open(int, int, void*)+0x42c>
c001893c:	83 ec 08             	sub    esp,0x8
c001893f:	6a 01                	push   0x1
c0018941:	68 9c be 02 c0       	push   0xc002be9c
c0018946:	e8 66 51 00 00       	call   c001dab1 <Thr::loadDLL(char const*, bool)>
c001894b:	83 c4 10             	add    esp,0x10
c001894e:	83 ec 08             	sub    esp,0x8
c0018951:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c0018955:	50                   	push   eax
c0018956:	e8 81 53 00 00       	call   c001dcdc <Thr::executeDLL(unsigned long, void*)>
c001895b:	83 c4 10             	add    esp,0x10
c001895e:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c0018963:	74 1e                	je     c0018983 <ACPI::open(int, int, void*)+0x451>
c0018965:	83 7c 24 40 00       	cmp    DWORD PTR [esp+0x40],0x0
c001896a:	74 17                	je     c0018983 <ACPI::open(int, int, void*)+0x451>
c001896c:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0018970:	8b 00                	mov    eax,DWORD PTR [eax]
c0018972:	83 c0 08             	add    eax,0x8
c0018975:	8b 00                	mov    eax,DWORD PTR [eax]
c0018977:	83 ec 0c             	sub    esp,0xc
c001897a:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c001897e:	ff d0                	call   eax
c0018980:	83 c4 10             	add    esp,0x10
c0018983:	a1 28 17 03 c0       	mov    eax,ds:0xc0031728
c0018988:	83 ec 08             	sub    esp,0x8
c001898b:	68 b9 be 02 c0       	push   0xc002beb9
c0018990:	50                   	push   eax
c0018991:	e8 01 f4 ff ff       	call   c0017d97 <findDataTable(unsigned char*, char*)>
c0018996:	83 c4 10             	add    esp,0x10
c0018999:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001899d:	83 7c 24 3c 00       	cmp    DWORD PTR [esp+0x3c],0x0
c00189a2:	74 13                	je     c00189b7 <ACPI::open(int, int, void*)+0x485>
c00189a4:	83 ec 08             	sub    esp,0x8
c00189a7:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c00189ab:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c00189af:	e8 1e fb ff ff       	call   c00184d2 <ACPI::writeSimpleBootFlag(SimpleBootFlagTable*)>
c00189b4:	83 c4 10             	add    esp,0x10
c00189b7:	b8 00 00 00 00       	mov    eax,0x0
c00189bc:	83 c4 60             	add    esp,0x60
c00189bf:	5b                   	pop    ebx
c00189c0:	5e                   	pop    esi
c00189c1:	5f                   	pop    edi
c00189c2:	c3                   	ret    
c00189c3:	90                   	nop

c00189c4 <CPU::close(int, int, void*)>:
c00189c4:	31 c0                	xor    eax,eax
c00189c6:	c3                   	ret    
c00189c7:	90                   	nop

c00189c8 <CPU::lookupAMDName(unsigned char, unsigned char)>:
c00189c8:	55                   	push   ebp
c00189c9:	57                   	push   edi
c00189ca:	56                   	push   esi
c00189cb:	53                   	push   ebx
c00189cc:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00189d0:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c00189d4:	89 ce                	mov    esi,ecx
c00189d6:	89 d5                	mov    ebp,edx
c00189d8:	80 f9 04             	cmp    cl,0x4
c00189db:	75 28                	jne    c0018a05 <CPU::lookupAMDName(unsigned char, unsigned char)+0x3d>
c00189dd:	8d 42 f9             	lea    eax,[edx-0x7]
c00189e0:	3c 03                	cmp    al,0x3
c00189e2:	0f 86 63 01 00 00    	jbe    c0018b4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00189e8:	80 fa 03             	cmp    dl,0x3
c00189eb:	0f 84 5a 01 00 00    	je     c0018b4b <CPU::lookupAMDName(unsigned char, unsigned char)+0x183>
c00189f1:	8d 7a f2             	lea    edi,[edx-0xe]
c00189f4:	b8 70 e2 02 c0       	mov    eax,0xc002e270
c00189f9:	89 fb                	mov    ebx,edi
c00189fb:	80 fb 01             	cmp    bl,0x1
c00189fe:	77 4e                	ja     c0018a4e <CPU::lookupAMDName(unsigned char, unsigned char)+0x86>
c0018a00:	e9 52 01 00 00       	jmp    c0018b57 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a05:	80 f9 05             	cmp    cl,0x5
c0018a08:	75 4d                	jne    c0018a57 <CPU::lookupAMDName(unsigned char, unsigned char)+0x8f>
c0018a0a:	b8 80 e2 02 c0       	mov    eax,0xc002e280
c0018a0f:	80 fa 03             	cmp    dl,0x3
c0018a12:	0f 86 3f 01 00 00    	jbe    c0018b57 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a18:	8d 7a fa             	lea    edi,[edx-0x6]
c0018a1b:	b8 90 e2 02 c0       	mov    eax,0xc002e290
c0018a20:	89 fb                	mov    ebx,edi
c0018a22:	80 fb 01             	cmp    bl,0x1
c0018a25:	0f 86 2c 01 00 00    	jbe    c0018b57 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a2b:	b8 a0 e2 02 c0       	mov    eax,0xc002e2a0
c0018a30:	80 fa 08             	cmp    dl,0x8
c0018a33:	0f 84 1e 01 00 00    	je     c0018b57 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a39:	89 d7                	mov    edi,edx
c0018a3b:	b8 b0 e2 02 c0       	mov    eax,0xc002e2b0
c0018a40:	83 e7 fb             	and    edi,0xfffffffb
c0018a43:	89 fb                	mov    ebx,edi
c0018a45:	80 fb 09             	cmp    bl,0x9
c0018a48:	0f 84 09 01 00 00    	je     c0018b57 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a4e:	31 c0                	xor    eax,eax
c0018a50:	89 eb                	mov    ebx,ebp
c0018a52:	0f b6 fb             	movzx  edi,bl
c0018a55:	eb 30                	jmp    c0018a87 <CPU::lookupAMDName(unsigned char, unsigned char)+0xbf>
c0018a57:	31 c0                	xor    eax,eax
c0018a59:	80 f9 06             	cmp    cl,0x6
c0018a5c:	75 f2                	jne    c0018a50 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018a5e:	80 fa 0a             	cmp    dl,0xa
c0018a61:	77 ed                	ja     c0018a50 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018a63:	bf de 05 00 00       	mov    edi,0x5de
c0018a68:	0f a3 d7             	bt     edi,edx
c0018a6b:	73 e3                	jae    c0018a50 <CPU::lookupAMDName(unsigned char, unsigned char)+0x88>
c0018a6d:	b8 c0 e2 02 c0       	mov    eax,0xc002e2c0
c0018a72:	e9 e0 00 00 00       	jmp    c0018b57 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018a77:	39 c7                	cmp    edi,eax
c0018a79:	0f 84 d3 00 00 00    	je     c0018b52 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018a7f:	40                   	inc    eax
c0018a80:	3d d0 00 00 00       	cmp    eax,0xd0
c0018a85:	74 09                	je     c0018a90 <CPU::lookupAMDName(unsigned char, unsigned char)+0xc8>
c0018a87:	89 f3                	mov    ebx,esi
c0018a89:	80 fb 0f             	cmp    bl,0xf
c0018a8c:	75 f1                	jne    c0018a7f <CPU::lookupAMDName(unsigned char, unsigned char)+0xb7>
c0018a8e:	eb e7                	jmp    c0018a77 <CPU::lookupAMDName(unsigned char, unsigned char)+0xaf>
c0018a90:	80 f9 10             	cmp    cl,0x10
c0018a93:	75 14                	jne    c0018aa9 <CPU::lookupAMDName(unsigned char, unsigned char)+0xe1>
c0018a95:	8d 42 fc             	lea    eax,[edx-0x4]
c0018a98:	83 e0 fb             	and    eax,0xfffffffb
c0018a9b:	3c 02                	cmp    al,0x2
c0018a9d:	76 34                	jbe    c0018ad3 <CPU::lookupAMDName(unsigned char, unsigned char)+0x10b>
c0018a9f:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018aa4:	80 fa 02             	cmp    dl,0x2
c0018aa7:	eb 24                	jmp    c0018acd <CPU::lookupAMDName(unsigned char, unsigned char)+0x105>
c0018aa9:	80 f9 11             	cmp    cl,0x11
c0018aac:	75 13                	jne    c0018ac1 <CPU::lookupAMDName(unsigned char, unsigned char)+0xf9>
c0018aae:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018ab3:	80 fa 03             	cmp    dl,0x3
c0018ab6:	0f 85 9b 00 00 00    	jne    c0018b57 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018abc:	e9 91 00 00 00       	jmp    c0018b52 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18a>
c0018ac1:	80 f9 12             	cmp    cl,0x12
c0018ac4:	75 14                	jne    c0018ada <CPU::lookupAMDName(unsigned char, unsigned char)+0x112>
c0018ac6:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018acb:	fe ca                	dec    dl
c0018acd:	0f 85 84 00 00 00    	jne    c0018b57 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ad3:	b8 e0 e2 02 c0       	mov    eax,0xc002e2e0
c0018ad8:	eb 7d                	jmp    c0018b57 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018ada:	80 f9 14             	cmp    cl,0x14
c0018add:	75 12                	jne    c0018af1 <CPU::lookupAMDName(unsigned char, unsigned char)+0x129>
c0018adf:	4a                   	dec    edx
c0018ae0:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018ae5:	80 fa 01             	cmp    dl,0x1
c0018ae8:	77 6d                	ja     c0018b57 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018aea:	b8 f0 e2 02 c0       	mov    eax,0xc002e2f0
c0018aef:	eb 66                	jmp    c0018b57 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018af1:	80 f9 15             	cmp    cl,0x15
c0018af4:	75 31                	jne    c0018b27 <CPU::lookupAMDName(unsigned char, unsigned char)+0x15f>
c0018af6:	b8 00 e3 02 c0       	mov    eax,0xc002e300
c0018afb:	80 fa 01             	cmp    dl,0x1
c0018afe:	74 57                	je     c0018b57 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b00:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018b05:	80 fa 13             	cmp    dl,0x13
c0018b08:	76 0c                	jbe    c0018b16 <CPU::lookupAMDName(unsigned char, unsigned char)+0x14e>
c0018b0a:	80 fa 30             	cmp    dl,0x30
c0018b0d:	75 48                	jne    c0018b57 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b0f:	b8 20 e3 02 c0       	mov    eax,0xc002e320
c0018b14:	eb 41                	jmp    c0018b57 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b16:	b9 04 00 09 00       	mov    ecx,0x90004
c0018b1b:	0f a3 d1             	bt     ecx,edx
c0018b1e:	73 37                	jae    c0018b57 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b20:	b8 10 e3 02 c0       	mov    eax,0xc002e310
c0018b25:	eb 30                	jmp    c0018b57 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b27:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018b2c:	80 f9 16             	cmp    cl,0x16
c0018b2f:	75 26                	jne    c0018b57 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b31:	b8 30 e3 02 c0       	mov    eax,0xc002e330
c0018b36:	84 d2                	test   dl,dl
c0018b38:	74 1d                	je     c0018b57 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b3a:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018b3f:	80 fa 30             	cmp    dl,0x30
c0018b42:	75 13                	jne    c0018b57 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b44:	b8 40 e3 02 c0       	mov    eax,0xc002e340
c0018b49:	eb 0c                	jmp    c0018b57 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b4b:	b8 60 e2 02 c0       	mov    eax,0xc002e260
c0018b50:	eb 05                	jmp    c0018b57 <CPU::lookupAMDName(unsigned char, unsigned char)+0x18f>
c0018b52:	b8 d0 e2 02 c0       	mov    eax,0xc002e2d0
c0018b57:	5b                   	pop    ebx
c0018b58:	5e                   	pop    esi
c0018b59:	5f                   	pop    edi
c0018b5a:	5d                   	pop    ebp
c0018b5b:	c3                   	ret    

c0018b5c <CPU::lookupIntelName(unsigned char, unsigned char)>:
c0018b5c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018b60:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018b64:	80 f9 04             	cmp    cl,0x4
c0018b67:	75 6b                	jne    c0018bd4 <CPU::lookupIntelName(unsigned char, unsigned char)+0x78>
c0018b69:	b8 c0 e0 02 c0       	mov    eax,0xc002e0c0
c0018b6e:	80 fa 01             	cmp    dl,0x1
c0018b71:	0f 86 92 02 00 00    	jbe    c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b77:	b8 d0 e0 02 c0       	mov    eax,0xc002e0d0
c0018b7c:	80 fa 02             	cmp    dl,0x2
c0018b7f:	0f 84 84 02 00 00    	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b85:	b8 e0 e0 02 c0       	mov    eax,0xc002e0e0
c0018b8a:	80 fa 03             	cmp    dl,0x3
c0018b8d:	0f 84 76 02 00 00    	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018b93:	b8 f0 e0 02 c0       	mov    eax,0xc002e0f0
c0018b98:	80 fa 04             	cmp    dl,0x4
c0018b9b:	0f 84 68 02 00 00    	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ba1:	b8 00 e1 02 c0       	mov    eax,0xc002e100
c0018ba6:	80 fa 05             	cmp    dl,0x5
c0018ba9:	0f 84 5a 02 00 00    	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018baf:	b8 e0 e0 02 c0       	mov    eax,0xc002e0e0
c0018bb4:	80 fa 07             	cmp    dl,0x7
c0018bb7:	0f 84 4c 02 00 00    	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bbd:	83 ea 08             	sub    edx,0x8
c0018bc0:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018bc5:	80 fa 01             	cmp    dl,0x1
c0018bc8:	0f 87 3b 02 00 00    	ja     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bce:	b8 10 e1 02 c0       	mov    eax,0xc002e110
c0018bd3:	c3                   	ret    
c0018bd4:	80 f9 05             	cmp    cl,0x5
c0018bd7:	75 45                	jne    c0018c1e <CPU::lookupIntelName(unsigned char, unsigned char)+0xc2>
c0018bd9:	8d 4a ff             	lea    ecx,[edx-0x1]
c0018bdc:	b8 20 e1 02 c0       	mov    eax,0xc002e120
c0018be1:	80 f9 02             	cmp    cl,0x2
c0018be4:	0f 86 1f 02 00 00    	jbe    c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bea:	80 fa 04             	cmp    dl,0x4
c0018bed:	0f 84 f3 01 00 00    	je     c0018de6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x28a>
c0018bf3:	80 fa 07             	cmp    dl,0x7
c0018bf6:	0f 84 0d 02 00 00    	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018bfc:	b8 30 e1 02 c0       	mov    eax,0xc002e130
c0018c01:	80 fa 08             	cmp    dl,0x8
c0018c04:	0f 84 ff 01 00 00    	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c0a:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018c0f:	80 fa 09             	cmp    dl,0x9
c0018c12:	0f 85 f1 01 00 00    	jne    c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c18:	b8 40 e1 02 c0       	mov    eax,0xc002e140
c0018c1d:	c3                   	ret    
c0018c1e:	80 f9 06             	cmp    cl,0x6
c0018c21:	0f 85 85 01 00 00    	jne    c0018dac <CPU::lookupIntelName(unsigned char, unsigned char)+0x250>
c0018c27:	b8 50 e1 02 c0       	mov    eax,0xc002e150
c0018c2c:	80 fa 01             	cmp    dl,0x1
c0018c2f:	0f 84 d4 01 00 00    	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c35:	8d 42 fb             	lea    eax,[edx-0x5]
c0018c38:	3c 01                	cmp    al,0x1
c0018c3a:	0f 86 ac 01 00 00    	jbe    c0018dec <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018c40:	80 fa 03             	cmp    dl,0x3
c0018c43:	0f 84 a3 01 00 00    	je     c0018dec <CPU::lookupIntelName(unsigned char, unsigned char)+0x290>
c0018c49:	8d 4a f9             	lea    ecx,[edx-0x7]
c0018c4c:	b8 70 e1 02 c0       	mov    eax,0xc002e170
c0018c51:	80 f9 01             	cmp    cl,0x1
c0018c54:	0f 86 af 01 00 00    	jbe    c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c5a:	80 fa 09             	cmp    dl,0x9
c0018c5d:	0f 84 8f 01 00 00    	je     c0018df2 <CPU::lookupIntelName(unsigned char, unsigned char)+0x296>
c0018c63:	8d 4a f6             	lea    ecx,[edx-0xa]
c0018c66:	80 f9 01             	cmp    cl,0x1
c0018c69:	0f 86 9a 01 00 00    	jbe    c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c6f:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0018c74:	80 fa 0d             	cmp    dl,0xd
c0018c77:	0f 84 8c 01 00 00    	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c7d:	b8 90 e1 02 c0       	mov    eax,0xc002e190
c0018c82:	80 fa 0e             	cmp    dl,0xe
c0018c85:	0f 84 7e 01 00 00    	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c8b:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0018c90:	80 fa 0f             	cmp    dl,0xf
c0018c93:	0f 84 70 01 00 00    	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018c99:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0018c9e:	80 fa 15             	cmp    dl,0x15
c0018ca1:	0f 84 62 01 00 00    	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ca7:	8d 4a ea             	lea    ecx,[edx-0x16]
c0018caa:	b8 a0 e1 02 c0       	mov    eax,0xc002e1a0
c0018caf:	80 f9 01             	cmp    cl,0x1
c0018cb2:	0f 86 51 01 00 00    	jbe    c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cb8:	80 fa 1a             	cmp    dl,0x1a
c0018cbb:	0f 84 37 01 00 00    	je     c0018df8 <CPU::lookupIntelName(unsigned char, unsigned char)+0x29c>
c0018cc1:	80 fa 1c             	cmp    dl,0x1c
c0018cc4:	0f 84 34 01 00 00    	je     c0018dfe <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a2>
c0018cca:	80 fa 1d             	cmp    dl,0x1d
c0018ccd:	0f 84 36 01 00 00    	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cd3:	b8 d0 e1 02 c0       	mov    eax,0xc002e1d0
c0018cd8:	80 fa 25             	cmp    dl,0x25
c0018cdb:	0f 84 28 01 00 00    	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018ce1:	8d 4a da             	lea    ecx,[edx-0x26]
c0018ce4:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0018ce9:	80 f9 01             	cmp    cl,0x1
c0018cec:	0f 86 17 01 00 00    	jbe    c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018cf2:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0018cf7:	80 fa 2a             	cmp    dl,0x2a
c0018cfa:	0f 84 09 01 00 00    	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d00:	b8 d0 e1 02 c0       	mov    eax,0xc002e1d0
c0018d05:	80 fa 2c             	cmp    dl,0x2c
c0018d08:	0f 84 fb 00 00 00    	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d0e:	b8 e0 e1 02 c0       	mov    eax,0xc002e1e0
c0018d13:	80 fa 2d             	cmp    dl,0x2d
c0018d16:	0f 84 ed 00 00 00    	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d1c:	b8 b0 e1 02 c0       	mov    eax,0xc002e1b0
c0018d21:	80 fa 2e             	cmp    dl,0x2e
c0018d24:	0f 84 df 00 00 00    	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d2a:	b8 d0 e1 02 c0       	mov    eax,0xc002e1d0
c0018d2f:	80 fa 2f             	cmp    dl,0x2f
c0018d32:	0f 84 d1 00 00 00    	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d38:	8d 4a cb             	lea    ecx,[edx-0x35]
c0018d3b:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0018d40:	80 f9 01             	cmp    cl,0x1
c0018d43:	0f 86 c0 00 00 00    	jbe    c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d49:	b8 f0 e1 02 c0       	mov    eax,0xc002e1f0
c0018d4e:	80 fa 37             	cmp    dl,0x37
c0018d51:	0f 84 b2 00 00 00    	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d57:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0018d5c:	80 fa 3a             	cmp    dl,0x3a
c0018d5f:	0f 84 a4 00 00 00    	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d65:	b8 10 e2 02 c0       	mov    eax,0xc002e210
c0018d6a:	80 fa 3c             	cmp    dl,0x3c
c0018d6d:	0f 84 96 00 00 00    	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d73:	b8 20 e2 02 c0       	mov    eax,0xc002e220
c0018d78:	80 fa 3d             	cmp    dl,0x3d
c0018d7b:	0f 84 88 00 00 00    	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d81:	b8 00 e2 02 c0       	mov    eax,0xc002e200
c0018d86:	80 fa 3e             	cmp    dl,0x3e
c0018d89:	74 7e                	je     c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018d8b:	8d 42 bb             	lea    eax,[edx-0x45]
c0018d8e:	3c 01                	cmp    al,0x1
c0018d90:	76 72                	jbe    c0018e04 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018d92:	80 fa 3f             	cmp    dl,0x3f
c0018d95:	74 6d                	je     c0018e04 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2a8>
c0018d97:	80 fa 4a             	cmp    dl,0x4a
c0018d9a:	74 0a                	je     c0018da6 <CPU::lookupIntelName(unsigned char, unsigned char)+0x24a>
c0018d9c:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018da1:	80 fa 4d             	cmp    dl,0x4d
c0018da4:	75 63                	jne    c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018da6:	b8 f0 e1 02 c0       	mov    eax,0xc002e1f0
c0018dab:	c3                   	ret    
c0018dac:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018db1:	80 f9 0b             	cmp    cl,0xb
c0018db4:	75 0a                	jne    c0018dc0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x264>
c0018db6:	fe ca                	dec    dl
c0018db8:	75 4f                	jne    c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dba:	b8 30 e2 02 c0       	mov    eax,0xc002e230
c0018dbf:	c3                   	ret    
c0018dc0:	80 f9 0f             	cmp    cl,0xf
c0018dc3:	75 44                	jne    c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dc5:	b8 40 e2 02 c0       	mov    eax,0xc002e240
c0018dca:	80 fa 02             	cmp    dl,0x2
c0018dcd:	76 3a                	jbe    c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018dcf:	8d 42 fd             	lea    eax,[edx-0x3]
c0018dd2:	3c 01                	cmp    al,0x1
c0018dd4:	76 0a                	jbe    c0018de0 <CPU::lookupIntelName(unsigned char, unsigned char)+0x284>
c0018dd6:	b8 c6 c2 02 c0       	mov    eax,0xc002c2c6
c0018ddb:	80 fa 06             	cmp    dl,0x6
c0018dde:	75 29                	jne    c0018e09 <CPU::lookupIntelName(unsigned char, unsigned char)+0x2ad>
c0018de0:	b8 50 e2 02 c0       	mov    eax,0xc002e250
c0018de5:	c3                   	ret    
c0018de6:	b8 30 e1 02 c0       	mov    eax,0xc002e130
c0018deb:	c3                   	ret    
c0018dec:	b8 60 e1 02 c0       	mov    eax,0xc002e160
c0018df1:	c3                   	ret    
c0018df2:	b8 80 e1 02 c0       	mov    eax,0xc002e180
c0018df7:	c3                   	ret    
c0018df8:	b8 b0 e1 02 c0       	mov    eax,0xc002e1b0
c0018dfd:	c3                   	ret    
c0018dfe:	b8 c0 e1 02 c0       	mov    eax,0xc002e1c0
c0018e03:	c3                   	ret    
c0018e04:	b8 10 e2 02 c0       	mov    eax,0xc002e210
c0018e09:	c3                   	ret    

c0018e0a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>:
c0018e0a:	60                   	pusha  
c0018e0b:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e0f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0018e13:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0018e17:	9c                   	pushf  
c0018e18:	fa                   	cli    
c0018e19:	0f 09                	wbinvd 
c0018e1b:	0f 30                	wrmsr  
c0018e1d:	9d                   	popf   
c0018e1e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0018e22:	89 02                	mov    DWORD PTR [edx],eax
c0018e24:	61                   	popa   
c0018e25:	c3                   	ret    

c0018e26 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>:
c0018e26:	60                   	pusha  
c0018e27:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c0018e2b:	9c                   	pushf  
c0018e2c:	fa                   	cli    
c0018e2d:	0f 09                	wbinvd 
c0018e2f:	31 c0                	xor    eax,eax
c0018e31:	31 d2                	xor    edx,edx
c0018e33:	0f 32                	rdmsr  
c0018e35:	9d                   	popf   
c0018e36:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0018e3a:	89 02                	mov    DWORD PTR [edx],eax
c0018e3c:	61                   	popa   
c0018e3d:	c3                   	ret    

c0018e3e <CPU::AMD_K6_writeback(int, int, int)>:
c0018e3e:	56                   	push   esi
c0018e3f:	53                   	push   ebx
c0018e40:	83 ec 10             	sub    esp,0x10
c0018e43:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0018e47:	83 7c 24 1c 05       	cmp    DWORD PTR [esp+0x1c],0x5
c0018e4c:	75 5d                	jne    c0018eab <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018e4e:	83 f8 08             	cmp    eax,0x8
c0018e51:	75 09                	jne    c0018e5c <CPU::AMD_K6_writeback(int, int, int)+0x1e>
c0018e53:	83 7c 24 24 07       	cmp    DWORD PTR [esp+0x24],0x7
c0018e58:	7e 13                	jle    c0018e6d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018e5a:	eb 30                	jmp    c0018e8c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018e5c:	83 f8 06             	cmp    eax,0x6
c0018e5f:	7c 4a                	jl     c0018eab <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018e61:	83 f8 07             	cmp    eax,0x7
c0018e64:	7e 07                	jle    c0018e6d <CPU::AMD_K6_writeback(int, int, int)+0x2f>
c0018e66:	83 f8 09             	cmp    eax,0x9
c0018e69:	74 21                	je     c0018e8c <CPU::AMD_K6_writeback(int, int, int)+0x4e>
c0018e6b:	eb 3e                	jmp    c0018eab <CPU::AMD_K6_writeback(int, int, int)+0x6d>
c0018e6d:	89 e6                	mov    esi,esp
c0018e6f:	8b 1d 88 ee 02 c0    	mov    ebx,DWORD PTR ds:0xc002ee88
c0018e75:	56                   	push   esi
c0018e76:	c1 eb 15             	shr    ebx,0x15
c0018e79:	68 82 00 00 c0       	push   0xc0000082
c0018e7e:	83 e3 7e             	and    ebx,0x7e
c0018e81:	e8 a0 ff ff ff       	call   c0018e26 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018e86:	56                   	push   esi
c0018e87:	6a 00                	push   0x0
c0018e89:	53                   	push   ebx
c0018e8a:	eb 12                	jmp    c0018e9e <CPU::AMD_K6_writeback(int, int, int)+0x60>
c0018e8c:	89 e3                	mov    ebx,esp
c0018e8e:	53                   	push   ebx
c0018e8f:	68 82 00 00 c0       	push   0xc0000082
c0018e94:	e8 8d ff ff ff       	call   c0018e26 <CPU::AMD_K6_read_msr(unsigned int, CPU::REGS*)>
c0018e99:	53                   	push   ebx
c0018e9a:	6a 00                	push   0x0
c0018e9c:	6a 00                	push   0x0
c0018e9e:	68 82 00 00 c0       	push   0xc0000082
c0018ea3:	e8 62 ff ff ff       	call   c0018e0a <CPU::AMD_K6_write_msr(unsigned int, unsigned int, unsigned int, CPU::REGS*)>
c0018ea8:	83 c4 18             	add    esp,0x18
c0018eab:	83 c4 10             	add    esp,0x10
c0018eae:	5b                   	pop    ebx
c0018eaf:	5e                   	pop    esi
c0018eb0:	c3                   	ret    
c0018eb1:	90                   	nop

c0018eb2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>:
c0018eb2:	55                   	push   ebp
c0018eb3:	57                   	push   edi
c0018eb4:	56                   	push   esi
c0018eb5:	53                   	push   ebx
c0018eb6:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018eba:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0018ebe:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0018ec2:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c0018ec6:	39 05 60 e3 02 c0    	cmp    DWORD PTR ds:0xc002e360,eax
c0018ecc:	75 23                	jne    c0018ef1 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x3f>
c0018ece:	a1 8c 19 03 c0       	mov    eax,ds:0xc003198c
c0018ed3:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c0018ed7:	89 06                	mov    DWORD PTR [esi],eax
c0018ed9:	a1 88 19 03 c0       	mov    eax,ds:0xc0031988
c0018ede:	89 07                	mov    DWORD PTR [edi],eax
c0018ee0:	a1 84 19 03 c0       	mov    eax,ds:0xc0031984
c0018ee5:	89 45 00             	mov    DWORD PTR [ebp+0x0],eax
c0018ee8:	a1 80 19 03 c0       	mov    eax,ds:0xc0031980
c0018eed:	89 02                	mov    DWORD PTR [edx],eax
c0018eef:	eb 3f                	jmp    c0018f30 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)+0x7e>
c0018ef1:	31 c9                	xor    ecx,ecx
c0018ef3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018ef7:	0f a2                	cpuid  
c0018ef9:	89 06                	mov    DWORD PTR [esi],eax
c0018efb:	89 1f                	mov    DWORD PTR [edi],ebx
c0018efd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f01:	89 4d 00             	mov    DWORD PTR [ebp+0x0],ecx
c0018f04:	89 10                	mov    DWORD PTR [eax],edx
c0018f06:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0018f0a:	a3 60 e3 02 c0       	mov    ds:0xc002e360,eax
c0018f0f:	8b 06                	mov    eax,DWORD PTR [esi]
c0018f11:	a3 8c 19 03 c0       	mov    ds:0xc003198c,eax
c0018f16:	8b 07                	mov    eax,DWORD PTR [edi]
c0018f18:	a3 88 19 03 c0       	mov    ds:0xc0031988,eax
c0018f1d:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0018f20:	a3 84 19 03 c0       	mov    ds:0xc0031984,eax
c0018f25:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c0018f29:	8b 00                	mov    eax,DWORD PTR [eax]
c0018f2b:	a3 80 19 03 c0       	mov    ds:0xc0031980,eax
c0018f30:	5b                   	pop    ebx
c0018f31:	5e                   	pop    esi
c0018f32:	5f                   	pop    edi
c0018f33:	5d                   	pop    ebp
c0018f34:	c3                   	ret    
c0018f35:	90                   	nop

c0018f36 <CPU::cpuidCheckEDX(unsigned int)>:
c0018f36:	83 ec 10             	sub    esp,0x10
c0018f39:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f3d:	50                   	push   eax
c0018f3e:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f42:	50                   	push   eax
c0018f43:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f47:	50                   	push   eax
c0018f48:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f4c:	50                   	push   eax
c0018f4d:	6a 01                	push   0x1
c0018f4f:	e8 5e ff ff ff       	call   c0018eb2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f54:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f58:	85 44 24 20          	test   DWORD PTR [esp+0x20],eax
c0018f5c:	0f 95 c0             	setne  al
c0018f5f:	83 c4 24             	add    esp,0x24
c0018f62:	c3                   	ret    
c0018f63:	90                   	nop

c0018f64 <CPU::cpuidCheckECX(unsigned int)>:
c0018f64:	83 ec 10             	sub    esp,0x10
c0018f67:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f6b:	50                   	push   eax
c0018f6c:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f70:	50                   	push   eax
c0018f71:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f75:	50                   	push   eax
c0018f76:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f7a:	50                   	push   eax
c0018f7b:	6a 01                	push   0x1
c0018f7d:	e8 30 ff ff ff       	call   c0018eb2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018f82:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018f86:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018f8a:	0f 95 c0             	setne  al
c0018f8d:	83 c4 24             	add    esp,0x24
c0018f90:	c3                   	ret    
c0018f91:	90                   	nop

c0018f92 <CPU::cpuidCheckExtendedEBX(unsigned int)>:
c0018f92:	83 ec 10             	sub    esp,0x10
c0018f95:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f99:	50                   	push   eax
c0018f9a:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018f9e:	50                   	push   eax
c0018f9f:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fa3:	50                   	push   eax
c0018fa4:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fa8:	50                   	push   eax
c0018fa9:	6a 07                	push   0x7
c0018fab:	e8 02 ff ff ff       	call   c0018eb2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fb0:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fb4:	85 44 24 18          	test   DWORD PTR [esp+0x18],eax
c0018fb8:	0f 95 c0             	setne  al
c0018fbb:	83 c4 24             	add    esp,0x24
c0018fbe:	c3                   	ret    
c0018fbf:	90                   	nop

c0018fc0 <CPU::cpuidCheckExtendedECX(unsigned int)>:
c0018fc0:	83 ec 10             	sub    esp,0x10
c0018fc3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fc7:	50                   	push   eax
c0018fc8:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fcc:	50                   	push   eax
c0018fcd:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fd1:	50                   	push   eax
c0018fd2:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0018fd6:	50                   	push   eax
c0018fd7:	6a 07                	push   0x7
c0018fd9:	e8 d4 fe ff ff       	call   c0018eb2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0018fde:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0018fe2:	85 44 24 1c          	test   DWORD PTR [esp+0x1c],eax
c0018fe6:	0f 95 c0             	setne  al
c0018fe9:	83 c4 24             	add    esp,0x24
c0018fec:	c3                   	ret    
c0018fed:	90                   	nop

c0018fee <CPU::CPU()>:
c0018fee:	83 ec 0c             	sub    esp,0xc
c0018ff1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0018ff5:	83 ec 08             	sub    esp,0x8
c0018ff8:	68 c6 c2 02 c0       	push   0xc002c2c6
c0018ffd:	50                   	push   eax
c0018ffe:	e8 57 b4 ff ff       	call   c001445a <Device::Device(char const*)>
c0019003:	83 c4 10             	add    esp,0x10
c0019006:	ba a0 c3 02 c0       	mov    edx,0xc002c3a0
c001900b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001900f:	89 10                	mov    DWORD PTR [eax],edx
c0019011:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019015:	c7 80 6c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x16c],0x0
c001901f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019023:	05 78 01 00 00       	add    eax,0x178
c0019028:	83 ec 0c             	sub    esp,0xc
c001902b:	50                   	push   eax
c001902c:	e8 8d 60 ff ff       	call   c000f0be <GDT::GDT()>
c0019031:	83 c4 10             	add    esp,0x10
c0019034:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019038:	05 7c 09 00 00       	add    eax,0x97c
c001903d:	83 ec 0c             	sub    esp,0xc
c0019040:	50                   	push   eax
c0019041:	e8 e2 62 ff ff       	call   c000f328 <IDT::IDT()>
c0019046:	83 c4 10             	add    esp,0x10
c0019049:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001904d:	05 7c 11 00 00       	add    eax,0x117c
c0019052:	83 ec 0c             	sub    esp,0xc
c0019055:	50                   	push   eax
c0019056:	e8 17 83 ff ff       	call   c0011372 <TSS::TSS()>
c001905b:	83 c4 10             	add    esp,0x10
c001905e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0019062:	c6 80 94 11 00 00 00 	mov    BYTE PTR [eax+0x1194],0x0
c0019069:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001906d:	c7 80 10 01 00 00 10 00 00 00 	mov    DWORD PTR [eax+0x110],0x10
c0019077:	90                   	nop
c0019078:	83 c4 0c             	add    esp,0xc
c001907b:	c3                   	ret    

c001907c <CPU::displayFeatures()>:
c001907c:	53                   	push   ebx
c001907d:	83 ec 10             	sub    esp,0x10
c0019080:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c0019084:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c001908a:	68 d4 bf 02 c0       	push   0xc002bfd4
c001908f:	e8 b3 9d ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0019094:	59                   	pop    ecx
c0019095:	58                   	pop    eax
c0019096:	8d 83 5f 01 00 00    	lea    eax,[ebx+0x15f]
c001909c:	50                   	push   eax
c001909d:	68 e5 bf 02 c0       	push   0xc002bfe5
c00190a2:	e8 a0 9d ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00190a7:	58                   	pop    eax
c00190a8:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190ae:	5a                   	pop    edx
c00190af:	c1 e8 0e             	shr    eax,0xe
c00190b2:	0f b6 c0             	movzx  eax,al
c00190b5:	50                   	push   eax
c00190b6:	68 f6 bf 02 c0       	push   0xc002bff6
c00190bb:	e8 87 9d ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00190c0:	59                   	pop    ecx
c00190c1:	58                   	pop    eax
c00190c2:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c00190c8:	66 c1 e8 06          	shr    ax,0x6
c00190cc:	0f b6 c0             	movzx  eax,al
c00190cf:	50                   	push   eax
c00190d0:	68 07 c0 02 c0       	push   0xc002c007
c00190d5:	e8 6d 9d ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00190da:	c7 04 24 b4 c4 02 c0 	mov    DWORD PTR [esp],0xc002c4b4
c00190e1:	e8 61 9d ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00190e6:	83 c4 10             	add    esp,0x10
c00190e9:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c00190ee:	f6 83 90 11 00 00 01 	test   BYTE PTR [ebx+0x1190],0x1
c00190f5:	74 05                	je     c00190fc <CPU::displayFeatures()+0x80>
c00190f7:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c00190fc:	52                   	push   edx
c00190fd:	52                   	push   edx
c00190fe:	50                   	push   eax
c00190ff:	68 18 c0 02 c0       	push   0xc002c018
c0019104:	e8 3e 9d ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0019109:	83 c4 10             	add    esp,0x10
c001910c:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c0019111:	80 bb 90 11 00 00 00 	cmp    BYTE PTR [ebx+0x1190],0x0
c0019118:	78 05                	js     c001911f <CPU::displayFeatures()+0xa3>
c001911a:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c001911f:	51                   	push   ecx
c0019120:	51                   	push   ecx
c0019121:	50                   	push   eax
c0019122:	68 2f c0 02 c0       	push   0xc002c02f
c0019127:	e8 1b 9d ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001912c:	83 c4 10             	add    esp,0x10
c001912f:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c0019134:	f6 83 90 11 00 00 02 	test   BYTE PTR [ebx+0x1190],0x2
c001913b:	75 05                	jne    c0019142 <CPU::displayFeatures()+0xc6>
c001913d:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c0019142:	52                   	push   edx
c0019143:	52                   	push   edx
c0019144:	50                   	push   eax
c0019145:	68 46 c0 02 c0       	push   0xc002c046
c001914a:	e8 f8 9c ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001914f:	83 c4 10             	add    esp,0x10
c0019152:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c0019157:	f6 83 90 11 00 00 04 	test   BYTE PTR [ebx+0x1190],0x4
c001915e:	75 05                	jne    c0019165 <CPU::displayFeatures()+0xe9>
c0019160:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c0019165:	51                   	push   ecx
c0019166:	51                   	push   ecx
c0019167:	50                   	push   eax
c0019168:	68 5d c0 02 c0       	push   0xc002c05d
c001916d:	e8 d5 9c ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0019172:	83 c4 10             	add    esp,0x10
c0019175:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c001917a:	f6 83 90 11 00 00 08 	test   BYTE PTR [ebx+0x1190],0x8
c0019181:	75 05                	jne    c0019188 <CPU::displayFeatures()+0x10c>
c0019183:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c0019188:	52                   	push   edx
c0019189:	52                   	push   edx
c001918a:	50                   	push   eax
c001918b:	68 74 c0 02 c0       	push   0xc002c074
c0019190:	e8 b2 9c ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0019195:	83 c4 10             	add    esp,0x10
c0019198:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c001919d:	f6 83 90 11 00 00 10 	test   BYTE PTR [ebx+0x1190],0x10
c00191a4:	75 05                	jne    c00191ab <CPU::displayFeatures()+0x12f>
c00191a6:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c00191ab:	51                   	push   ecx
c00191ac:	51                   	push   ecx
c00191ad:	50                   	push   eax
c00191ae:	68 8b c0 02 c0       	push   0xc002c08b
c00191b3:	e8 8f 9c ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00191b8:	83 c4 10             	add    esp,0x10
c00191bb:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c00191c0:	f6 83 90 11 00 00 20 	test   BYTE PTR [ebx+0x1190],0x20
c00191c7:	75 05                	jne    c00191ce <CPU::displayFeatures()+0x152>
c00191c9:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c00191ce:	52                   	push   edx
c00191cf:	52                   	push   edx
c00191d0:	50                   	push   eax
c00191d1:	68 a2 c0 02 c0       	push   0xc002c0a2
c00191d6:	e8 6c 9c ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00191db:	83 c4 10             	add    esp,0x10
c00191de:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c00191e3:	f6 83 90 11 00 00 40 	test   BYTE PTR [ebx+0x1190],0x40
c00191ea:	75 05                	jne    c00191f1 <CPU::displayFeatures()+0x175>
c00191ec:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c00191f1:	51                   	push   ecx
c00191f2:	51                   	push   ecx
c00191f3:	50                   	push   eax
c00191f4:	68 b9 c0 02 c0       	push   0xc002c0b9
c00191f9:	e8 49 9c ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00191fe:	83 c4 10             	add    esp,0x10
c0019201:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c0019206:	f6 83 91 11 00 00 10 	test   BYTE PTR [ebx+0x1191],0x10
c001920d:	75 05                	jne    c0019214 <CPU::displayFeatures()+0x198>
c001920f:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c0019214:	52                   	push   edx
c0019215:	52                   	push   edx
c0019216:	50                   	push   eax
c0019217:	68 d0 c0 02 c0       	push   0xc002c0d0
c001921c:	e8 26 9c ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0019221:	83 c4 10             	add    esp,0x10
c0019224:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c0019229:	f6 83 92 11 00 00 01 	test   BYTE PTR [ebx+0x1192],0x1
c0019230:	75 05                	jne    c0019237 <CPU::displayFeatures()+0x1bb>
c0019232:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c0019237:	51                   	push   ecx
c0019238:	51                   	push   ecx
c0019239:	50                   	push   eax
c001923a:	68 e7 c0 02 c0       	push   0xc002c0e7
c001923f:	e8 03 9c ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0019244:	83 c4 10             	add    esp,0x10
c0019247:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c001924c:	f6 83 91 11 00 00 08 	test   BYTE PTR [ebx+0x1191],0x8
c0019253:	75 05                	jne    c001925a <CPU::displayFeatures()+0x1de>
c0019255:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c001925a:	52                   	push   edx
c001925b:	52                   	push   edx
c001925c:	50                   	push   eax
c001925d:	68 fe c0 02 c0       	push   0xc002c0fe
c0019262:	e8 e0 9b ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0019267:	83 c4 10             	add    esp,0x10
c001926a:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c001926f:	f6 83 91 11 00 00 20 	test   BYTE PTR [ebx+0x1191],0x20
c0019276:	75 05                	jne    c001927d <CPU::displayFeatures()+0x201>
c0019278:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c001927d:	51                   	push   ecx
c001927e:	51                   	push   ecx
c001927f:	50                   	push   eax
c0019280:	68 15 c1 02 c0       	push   0xc002c115
c0019285:	e8 bd 9b ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001928a:	83 c4 10             	add    esp,0x10
c001928d:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c0019292:	f6 83 91 11 00 00 40 	test   BYTE PTR [ebx+0x1191],0x40
c0019299:	75 05                	jne    c00192a0 <CPU::displayFeatures()+0x224>
c001929b:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c00192a0:	52                   	push   edx
c00192a1:	52                   	push   edx
c00192a2:	50                   	push   eax
c00192a3:	68 2c c1 02 c0       	push   0xc002c12c
c00192a8:	e8 9a 9b ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00192ad:	83 c4 10             	add    esp,0x10
c00192b0:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c00192b5:	80 bb 91 11 00 00 00 	cmp    BYTE PTR [ebx+0x1191],0x0
c00192bc:	78 05                	js     c00192c3 <CPU::displayFeatures()+0x247>
c00192be:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c00192c3:	51                   	push   ecx
c00192c4:	51                   	push   ecx
c00192c5:	50                   	push   eax
c00192c6:	68 43 c1 02 c0       	push   0xc002c143
c00192cb:	e8 77 9b ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00192d0:	83 c4 10             	add    esp,0x10
c00192d3:	b8 12 a9 02 c0       	mov    eax,0xc002a912
c00192d8:	f6 83 92 11 00 00 04 	test   BYTE PTR [ebx+0x1192],0x4
c00192df:	75 05                	jne    c00192e6 <CPU::displayFeatures()+0x26a>
c00192e1:	b8 16 a9 02 c0       	mov    eax,0xc002a916
c00192e6:	52                   	push   edx
c00192e7:	52                   	push   edx
c00192e8:	50                   	push   eax
c00192e9:	68 5a c1 02 c0       	push   0xc002c15a
c00192ee:	e8 54 9b ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00192f3:	83 c4 18             	add    esp,0x18
c00192f6:	5b                   	pop    ebx
c00192f7:	c3                   	ret    

c00192f8 <CPU::detectFeatures()>:
c00192f8:	55                   	push   ebp
c00192f9:	57                   	push   edi
c00192fa:	56                   	push   esi
c00192fb:	53                   	push   ebx
c00192fc:	83 ec 40             	sub    esp,0x40
c00192ff:	8b 6c 24 54          	mov    ebp,DWORD PTR [esp+0x54]
c0019303:	81 a5 90 11 00 00 00 07 f8 ff 	and    DWORD PTR [ebp+0x1190],0xfff80700
c001930d:	c6 85 94 11 00 00 01 	mov    BYTE PTR [ebp+0x1194],0x1
c0019314:	8d 9d 5f 01 00 00    	lea    ebx,[ebp+0x15f]
c001931a:	6a 0d                	push   0xd
c001931c:	6a 00                	push   0x0
c001931e:	53                   	push   ebx
c001931f:	e8 48 74 fe ff       	call   c000076c <memset>
c0019324:	83 c4 10             	add    esp,0x10
c0019327:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001932c:	f6 80 e8 01 00 00 02 	test   BYTE PTR [eax+0x1e8],0x2
c0019333:	0f 84 14 09 00 00    	je     c0019c4d <CPU::detectFeatures()+0x955>
c0019339:	83 ec 0c             	sub    esp,0xc
c001933c:	89 df                	mov    edi,ebx
c001933e:	6a 10                	push   0x10
c0019340:	e8 f1 fb ff ff       	call   c0018f36 <CPU::cpuidCheckEDX(unsigned int)>
c0019345:	83 e0 01             	and    eax,0x1
c0019348:	8d 0c 00             	lea    ecx,[eax+eax*1]
c001934b:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c0019351:	83 e0 fd             	and    eax,0xfffffffd
c0019354:	09 c8                	or     eax,ecx
c0019356:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c001935c:	c7 04 24 40 00 00 00 	mov    DWORD PTR [esp],0x40
c0019363:	e8 ce fb ff ff       	call   c0018f36 <CPU::cpuidCheckEDX(unsigned int)>
c0019368:	83 e0 01             	and    eax,0x1
c001936b:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019372:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c0019378:	83 e0 fb             	and    eax,0xfffffffb
c001937b:	09 c8                	or     eax,ecx
c001937d:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c0019383:	c7 04 24 08 00 00 00 	mov    DWORD PTR [esp],0x8
c001938a:	e8 a7 fb ff ff       	call   c0018f36 <CPU::cpuidCheckEDX(unsigned int)>
c001938f:	83 e0 01             	and    eax,0x1
c0019392:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c0019399:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c001939f:	83 e0 f7             	and    eax,0xfffffff7
c00193a2:	09 c8                	or     eax,ecx
c00193a4:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c00193aa:	c7 04 24 00 20 00 00 	mov    DWORD PTR [esp],0x2000
c00193b1:	e8 80 fb ff ff       	call   c0018f36 <CPU::cpuidCheckEDX(unsigned int)>
c00193b6:	83 e0 01             	and    eax,0x1
c00193b9:	c1 e0 04             	shl    eax,0x4
c00193bc:	88 c1                	mov    cl,al
c00193be:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c00193c4:	83 e0 ef             	and    eax,0xffffffef
c00193c7:	09 c8                	or     eax,ecx
c00193c9:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c00193cf:	c7 04 24 00 00 01 00 	mov    DWORD PTR [esp],0x10000
c00193d6:	e8 5b fb ff ff       	call   c0018f36 <CPU::cpuidCheckEDX(unsigned int)>
c00193db:	83 e0 01             	and    eax,0x1
c00193de:	c1 e0 05             	shl    eax,0x5
c00193e1:	88 c1                	mov    cl,al
c00193e3:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c00193e9:	83 e0 df             	and    eax,0xffffffdf
c00193ec:	09 c8                	or     eax,ecx
c00193ee:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c00193f4:	c7 04 24 01 00 00 00 	mov    DWORD PTR [esp],0x1
c00193fb:	e8 36 fb ff ff       	call   c0018f36 <CPU::cpuidCheckEDX(unsigned int)>
c0019400:	83 e0 01             	and    eax,0x1
c0019403:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019406:	8a 85 92 11 00 00    	mov    al,BYTE PTR [ebp+0x1192]
c001940c:	83 e0 fd             	and    eax,0xfffffffd
c001940f:	09 c8                	or     eax,ecx
c0019411:	88 85 92 11 00 00    	mov    BYTE PTR [ebp+0x1192],al
c0019417:	c7 04 24 00 08 00 00 	mov    DWORD PTR [esp],0x800
c001941e:	e8 13 fb ff ff       	call   c0018f36 <CPU::cpuidCheckEDX(unsigned int)>
c0019423:	83 e0 01             	and    eax,0x1
c0019426:	c1 e0 06             	shl    eax,0x6
c0019429:	88 c1                	mov    cl,al
c001942b:	8a 85 91 11 00 00    	mov    al,BYTE PTR [ebp+0x1191]
c0019431:	83 e0 bf             	and    eax,0xffffffbf
c0019434:	09 c8                	or     eax,ecx
c0019436:	88 85 91 11 00 00    	mov    BYTE PTR [ebp+0x1191],al
c001943c:	58                   	pop    eax
c001943d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019441:	50                   	push   eax
c0019442:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019446:	50                   	push   eax
c0019447:	8d 74 24 18          	lea    esi,[esp+0x18]
c001944b:	56                   	push   esi
c001944c:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019450:	50                   	push   eax
c0019451:	6a 00                	push   0x0
c0019453:	e8 5a fa ff ff       	call   c0018eb2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c0019458:	b9 04 00 00 00       	mov    ecx,0x4
c001945d:	fc                   	cld    
c001945e:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0019460:	8d bd 63 01 00 00    	lea    edi,[ebp+0x163]
c0019466:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001946a:	fc                   	cld    
c001946b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001946d:	8d bd 67 01 00 00    	lea    edi,[ebp+0x167]
c0019473:	8d 74 24 28          	lea    esi,[esp+0x28]
c0019477:	fc                   	cld    
c0019478:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001947a:	83 c4 18             	add    esp,0x18
c001947d:	68 71 c1 02 c0       	push   0xc002c171
c0019482:	53                   	push   ebx
c0019483:	e8 2c 74 fe ff       	call   c00008b4 <strcmp>
c0019488:	83 c4 10             	add    esp,0x10
c001948b:	85 c0                	test   eax,eax
c001948d:	75 0f                	jne    c001949e <CPU::detectFeatures()+0x1a6>
c001948f:	c7 85 58 01 00 00 02 00 00 00 	mov    DWORD PTR [ebp+0x158],0x2
c0019499:	e9 22 02 00 00       	jmp    c00196c0 <CPU::detectFeatures()+0x3c8>
c001949e:	50                   	push   eax
c001949f:	50                   	push   eax
c00194a0:	68 7e c1 02 c0       	push   0xc002c17e
c00194a5:	53                   	push   ebx
c00194a6:	e8 09 74 fe ff       	call   c00008b4 <strcmp>
c00194ab:	83 c4 10             	add    esp,0x10
c00194ae:	85 c0                	test   eax,eax
c00194b0:	74 dd                	je     c001948f <CPU::detectFeatures()+0x197>
c00194b2:	50                   	push   eax
c00194b3:	50                   	push   eax
c00194b4:	68 8b c1 02 c0       	push   0xc002c18b
c00194b9:	53                   	push   ebx
c00194ba:	e8 f5 73 fe ff       	call   c00008b4 <strcmp>
c00194bf:	83 c4 10             	add    esp,0x10
c00194c2:	85 c0                	test   eax,eax
c00194c4:	74 2a                	je     c00194f0 <CPU::detectFeatures()+0x1f8>
c00194c6:	50                   	push   eax
c00194c7:	50                   	push   eax
c00194c8:	68 98 c1 02 c0       	push   0xc002c198
c00194cd:	53                   	push   ebx
c00194ce:	e8 e1 73 fe ff       	call   c00008b4 <strcmp>
c00194d3:	83 c4 10             	add    esp,0x10
c00194d6:	85 c0                	test   eax,eax
c00194d8:	74 16                	je     c00194f0 <CPU::detectFeatures()+0x1f8>
c00194da:	50                   	push   eax
c00194db:	50                   	push   eax
c00194dc:	68 a5 c1 02 c0       	push   0xc002c1a5
c00194e1:	53                   	push   ebx
c00194e2:	e8 cd 73 fe ff       	call   c00008b4 <strcmp>
c00194e7:	83 c4 10             	add    esp,0x10
c00194ea:	85 c0                	test   eax,eax
c00194ec:	74 48                	je     c0019536 <CPU::detectFeatures()+0x23e>
c00194ee:	eb 0f                	jmp    c00194ff <CPU::detectFeatures()+0x207>
c00194f0:	c7 85 58 01 00 00 04 00 00 00 	mov    DWORD PTR [ebp+0x158],0x4
c00194fa:	e9 c1 01 00 00       	jmp    c00196c0 <CPU::detectFeatures()+0x3c8>
c00194ff:	50                   	push   eax
c0019500:	50                   	push   eax
c0019501:	68 b2 c1 02 c0       	push   0xc002c1b2
c0019506:	53                   	push   ebx
c0019507:	e8 a8 73 fe ff       	call   c00008b4 <strcmp>
c001950c:	83 c4 10             	add    esp,0x10
c001950f:	85 c0                	test   eax,eax
c0019511:	74 23                	je     c0019536 <CPU::detectFeatures()+0x23e>
c0019513:	57                   	push   edi
c0019514:	57                   	push   edi
c0019515:	68 bf c1 02 c0       	push   0xc002c1bf
c001951a:	53                   	push   ebx
c001951b:	e8 94 73 fe ff       	call   c00008b4 <strcmp>
c0019520:	83 c4 10             	add    esp,0x10
c0019523:	85 c0                	test   eax,eax
c0019525:	75 1e                	jne    c0019545 <CPU::detectFeatures()+0x24d>
c0019527:	c7 85 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebp+0x158],0x1
c0019531:	e9 8a 01 00 00       	jmp    c00196c0 <CPU::detectFeatures()+0x3c8>
c0019536:	c7 85 58 01 00 00 05 00 00 00 	mov    DWORD PTR [ebp+0x158],0x5
c0019540:	e9 7b 01 00 00       	jmp    c00196c0 <CPU::detectFeatures()+0x3c8>
c0019545:	56                   	push   esi
c0019546:	56                   	push   esi
c0019547:	68 cc c1 02 c0       	push   0xc002c1cc
c001954c:	53                   	push   ebx
c001954d:	e8 62 73 fe ff       	call   c00008b4 <strcmp>
c0019552:	83 c4 10             	add    esp,0x10
c0019555:	85 c0                	test   eax,eax
c0019557:	75 0f                	jne    c0019568 <CPU::detectFeatures()+0x270>
c0019559:	c7 85 58 01 00 00 03 00 00 00 	mov    DWORD PTR [ebp+0x158],0x3
c0019563:	e9 58 01 00 00       	jmp    c00196c0 <CPU::detectFeatures()+0x3c8>
c0019568:	51                   	push   ecx
c0019569:	51                   	push   ecx
c001956a:	68 8b c1 02 c0       	push   0xc002c18b
c001956f:	53                   	push   ebx
c0019570:	e8 3f 73 fe ff       	call   c00008b4 <strcmp>
c0019575:	83 c4 10             	add    esp,0x10
c0019578:	85 c0                	test   eax,eax
c001957a:	75 0f                	jne    c001958b <CPU::detectFeatures()+0x293>
c001957c:	c7 85 58 01 00 00 06 00 00 00 	mov    DWORD PTR [ebp+0x158],0x6
c0019586:	e9 35 01 00 00       	jmp    c00196c0 <CPU::detectFeatures()+0x3c8>
c001958b:	52                   	push   edx
c001958c:	52                   	push   edx
c001958d:	68 d9 c1 02 c0       	push   0xc002c1d9
c0019592:	53                   	push   ebx
c0019593:	e8 1c 73 fe ff       	call   c00008b4 <strcmp>
c0019598:	83 c4 10             	add    esp,0x10
c001959b:	85 c0                	test   eax,eax
c001959d:	75 0f                	jne    c00195ae <CPU::detectFeatures()+0x2b6>
c001959f:	c7 85 58 01 00 00 07 00 00 00 	mov    DWORD PTR [ebp+0x158],0x7
c00195a9:	e9 12 01 00 00       	jmp    c00196c0 <CPU::detectFeatures()+0x3c8>
c00195ae:	50                   	push   eax
c00195af:	50                   	push   eax
c00195b0:	68 e6 c1 02 c0       	push   0xc002c1e6
c00195b5:	53                   	push   ebx
c00195b6:	e8 f9 72 fe ff       	call   c00008b4 <strcmp>
c00195bb:	83 c4 10             	add    esp,0x10
c00195be:	85 c0                	test   eax,eax
c00195c0:	75 0f                	jne    c00195d1 <CPU::detectFeatures()+0x2d9>
c00195c2:	c7 85 58 01 00 00 08 00 00 00 	mov    DWORD PTR [ebp+0x158],0x8
c00195cc:	e9 ef 00 00 00       	jmp    c00196c0 <CPU::detectFeatures()+0x3c8>
c00195d1:	50                   	push   eax
c00195d2:	50                   	push   eax
c00195d3:	68 f3 c1 02 c0       	push   0xc002c1f3
c00195d8:	53                   	push   ebx
c00195d9:	e8 d6 72 fe ff       	call   c00008b4 <strcmp>
c00195de:	83 c4 10             	add    esp,0x10
c00195e1:	85 c0                	test   eax,eax
c00195e3:	75 0f                	jne    c00195f4 <CPU::detectFeatures()+0x2fc>
c00195e5:	c7 85 58 01 00 00 09 00 00 00 	mov    DWORD PTR [ebp+0x158],0x9
c00195ef:	e9 cc 00 00 00       	jmp    c00196c0 <CPU::detectFeatures()+0x3c8>
c00195f4:	50                   	push   eax
c00195f5:	50                   	push   eax
c00195f6:	68 00 c2 02 c0       	push   0xc002c200
c00195fb:	53                   	push   ebx
c00195fc:	e8 b3 72 fe ff       	call   c00008b4 <strcmp>
c0019601:	83 c4 10             	add    esp,0x10
c0019604:	85 c0                	test   eax,eax
c0019606:	75 0f                	jne    c0019617 <CPU::detectFeatures()+0x31f>
c0019608:	c7 85 58 01 00 00 0a 00 00 00 	mov    DWORD PTR [ebp+0x158],0xa
c0019612:	e9 a9 00 00 00       	jmp    c00196c0 <CPU::detectFeatures()+0x3c8>
c0019617:	50                   	push   eax
c0019618:	50                   	push   eax
c0019619:	68 0d c2 02 c0       	push   0xc002c20d
c001961e:	53                   	push   ebx
c001961f:	e8 90 72 fe ff       	call   c00008b4 <strcmp>
c0019624:	83 c4 10             	add    esp,0x10
c0019627:	85 c0                	test   eax,eax
c0019629:	75 0f                	jne    c001963a <CPU::detectFeatures()+0x342>
c001962b:	c7 85 58 01 00 00 0b 00 00 00 	mov    DWORD PTR [ebp+0x158],0xb
c0019635:	e9 86 00 00 00       	jmp    c00196c0 <CPU::detectFeatures()+0x3c8>
c001963a:	50                   	push   eax
c001963b:	50                   	push   eax
c001963c:	68 1a c2 02 c0       	push   0xc002c21a
c0019641:	53                   	push   ebx
c0019642:	e8 6d 72 fe ff       	call   c00008b4 <strcmp>
c0019647:	83 c4 10             	add    esp,0x10
c001964a:	85 c0                	test   eax,eax
c001964c:	75 0c                	jne    c001965a <CPU::detectFeatures()+0x362>
c001964e:	c7 85 58 01 00 00 0c 00 00 00 	mov    DWORD PTR [ebp+0x158],0xc
c0019658:	eb 66                	jmp    c00196c0 <CPU::detectFeatures()+0x3c8>
c001965a:	50                   	push   eax
c001965b:	50                   	push   eax
c001965c:	68 27 c2 02 c0       	push   0xc002c227
c0019661:	53                   	push   ebx
c0019662:	e8 4d 72 fe ff       	call   c00008b4 <strcmp>
c0019667:	83 c4 10             	add    esp,0x10
c001966a:	85 c0                	test   eax,eax
c001966c:	75 0c                	jne    c001967a <CPU::detectFeatures()+0x382>
c001966e:	c7 85 58 01 00 00 0d 00 00 00 	mov    DWORD PTR [ebp+0x158],0xd
c0019678:	eb 46                	jmp    c00196c0 <CPU::detectFeatures()+0x3c8>
c001967a:	57                   	push   edi
c001967b:	57                   	push   edi
c001967c:	68 34 c2 02 c0       	push   0xc002c234
c0019681:	53                   	push   ebx
c0019682:	e8 2d 72 fe ff       	call   c00008b4 <strcmp>
c0019687:	83 c4 10             	add    esp,0x10
c001968a:	85 c0                	test   eax,eax
c001968c:	74 e0                	je     c001966e <CPU::detectFeatures()+0x376>
c001968e:	56                   	push   esi
c001968f:	56                   	push   esi
c0019690:	68 41 c2 02 c0       	push   0xc002c241
c0019695:	53                   	push   ebx
c0019696:	e8 19 72 fe ff       	call   c00008b4 <strcmp>
c001969b:	83 c4 10             	add    esp,0x10
c001969e:	85 c0                	test   eax,eax
c00196a0:	74 cc                	je     c001966e <CPU::detectFeatures()+0x376>
c00196a2:	51                   	push   ecx
c00196a3:	51                   	push   ecx
c00196a4:	68 4e c2 02 c0       	push   0xc002c24e
c00196a9:	53                   	push   ebx
c00196aa:	e8 05 72 fe ff       	call   c00008b4 <strcmp>
c00196af:	83 c4 10             	add    esp,0x10
c00196b2:	85 c0                	test   eax,eax
c00196b4:	74 b8                	je     c001966e <CPU::detectFeatures()+0x376>
c00196b6:	c7 85 58 01 00 00 00 00 00 00 	mov    DWORD PTR [ebp+0x158],0x0
c00196c0:	83 3c 24 06          	cmp    DWORD PTR [esp],0x6
c00196c4:	0f 86 be 00 00 00    	jbe    c0019788 <CPU::detectFeatures()+0x490>
c00196ca:	83 ec 0c             	sub    esp,0xc
c00196cd:	68 80 00 00 00       	push   0x80
c00196d2:	e8 bb f8 ff ff       	call   c0018f92 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00196d7:	83 e0 01             	and    eax,0x1
c00196da:	c1 e0 06             	shl    eax,0x6
c00196dd:	88 c1                	mov    cl,al
c00196df:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c00196e5:	83 e0 bf             	and    eax,0xffffffbf
c00196e8:	09 c8                	or     eax,ecx
c00196ea:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c00196f0:	c7 04 24 00 00 10 00 	mov    DWORD PTR [esp],0x100000
c00196f7:	e8 96 f8 ff ff       	call   c0018f92 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c00196fc:	83 e0 01             	and    eax,0x1
c00196ff:	c1 e0 04             	shl    eax,0x4
c0019702:	88 c1                	mov    cl,al
c0019704:	8a 85 91 11 00 00    	mov    al,BYTE PTR [ebp+0x1191]
c001970a:	83 e0 ef             	and    eax,0xffffffef
c001970d:	09 c8                	or     eax,ecx
c001970f:	88 85 91 11 00 00    	mov    BYTE PTR [ebp+0x1191],al
c0019715:	c7 04 24 00 00 04 00 	mov    DWORD PTR [esp],0x40000
c001971c:	e8 71 f8 ff ff       	call   c0018f92 <CPU::cpuidCheckExtendedEBX(unsigned int)>
c0019721:	c1 e0 07             	shl    eax,0x7
c0019724:	88 c1                	mov    cl,al
c0019726:	8a 85 90 11 00 00    	mov    al,BYTE PTR [ebp+0x1190]
c001972c:	83 e0 7f             	and    eax,0x7f
c001972f:	09 c8                	or     eax,ecx
c0019731:	88 85 90 11 00 00    	mov    BYTE PTR [ebp+0x1190],al
c0019737:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001973e:	e8 7d f8 ff ff       	call   c0018fc0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c0019743:	83 e0 01             	and    eax,0x1
c0019746:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
c001974d:	8a 85 91 11 00 00    	mov    al,BYTE PTR [ebp+0x1191]
c0019753:	83 e0 f7             	and    eax,0xfffffff7
c0019756:	09 c8                	or     eax,ecx
c0019758:	88 85 91 11 00 00    	mov    BYTE PTR [ebp+0x1191],al
c001975e:	c7 04 24 20 00 00 00 	mov    DWORD PTR [esp],0x20
c0019765:	e8 56 f8 ff ff       	call   c0018fc0 <CPU::cpuidCheckExtendedECX(unsigned int)>
c001976a:	83 c4 10             	add    esp,0x10
c001976d:	83 e0 01             	and    eax,0x1
c0019770:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
c0019777:	8a 85 92 11 00 00    	mov    al,BYTE PTR [ebp+0x1192]
c001977d:	83 e0 fb             	and    eax,0xfffffffb
c0019780:	09 c8                	or     eax,ecx
c0019782:	88 85 92 11 00 00    	mov    BYTE PTR [ebp+0x1192],al
c0019788:	83 ec 0c             	sub    esp,0xc
c001978b:	8d 44 24 18          	lea    eax,[esp+0x18]
c001978f:	50                   	push   eax
c0019790:	8d 44 24 18          	lea    eax,[esp+0x18]
c0019794:	50                   	push   eax
c0019795:	8d 7c 24 18          	lea    edi,[esp+0x18]
c0019799:	57                   	push   edi
c001979a:	8d 44 24 18          	lea    eax,[esp+0x18]
c001979e:	50                   	push   eax
c001979f:	6a 01                	push   0x1
c00197a1:	e8 0c f7 ff ff       	call   c0018eb2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00197a6:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c00197aa:	8a 85 5c 01 00 00    	mov    al,BYTE PTR [ebp+0x15c]
c00197b0:	88 d9                	mov    cl,bl
c00197b2:	83 e0 f0             	and    eax,0xfffffff0
c00197b5:	83 e1 0f             	and    ecx,0xf
c00197b8:	83 c4 20             	add    esp,0x20
c00197bb:	09 c8                	or     eax,ecx
c00197bd:	88 d9                	mov    cl,bl
c00197bf:	88 85 5c 01 00 00    	mov    BYTE PTR [ebp+0x15c],al
c00197c5:	c0 e9 04             	shr    cl,0x4
c00197c8:	0f b6 c1             	movzx  eax,cl
c00197cb:	c1 e0 06             	shl    eax,0x6
c00197ce:	89 c6                	mov    esi,eax
c00197d0:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c00197d6:	66 25 3f c0          	and    ax,0xc03f
c00197da:	09 f0                	or     eax,esi
c00197dc:	66 89 85 5c 01 00 00 	mov    WORD PTR [ebp+0x15c],ax
c00197e3:	89 d8                	mov    eax,ebx
c00197e5:	8a 95 5d 01 00 00    	mov    dl,BYTE PTR [ebp+0x15d]
c00197eb:	c1 e8 08             	shr    eax,0x8
c00197ee:	83 e2 3f             	and    edx,0x3f
c00197f1:	83 e0 0f             	and    eax,0xf
c00197f4:	89 c6                	mov    esi,eax
c00197f6:	c1 e6 06             	shl    esi,0x6
c00197f9:	09 d6                	or     esi,edx
c00197fb:	89 f2                	mov    edx,esi
c00197fd:	88 95 5d 01 00 00    	mov    BYTE PTR [ebp+0x15d],dl
c0019803:	88 c2                	mov    dl,al
c0019805:	c0 ea 02             	shr    dl,0x2
c0019808:	89 d6                	mov    esi,edx
c001980a:	8a 95 5e 01 00 00    	mov    dl,BYTE PTR [ebp+0x15e]
c0019810:	83 e2 c0             	and    edx,0xffffffc0
c0019813:	09 d6                	or     esi,edx
c0019815:	89 f2                	mov    edx,esi
c0019817:	89 de                	mov    esi,ebx
c0019819:	88 95 5e 01 00 00    	mov    BYTE PTR [ebp+0x15e],dl
c001981f:	c1 ee 0c             	shr    esi,0xc
c0019822:	8a 95 5c 01 00 00    	mov    dl,BYTE PTR [ebp+0x15c]
c0019828:	83 e6 03             	and    esi,0x3
c001982b:	83 e2 cf             	and    edx,0xffffffcf
c001982e:	c1 e6 04             	shl    esi,0x4
c0019831:	09 d6                	or     esi,edx
c0019833:	3c 06                	cmp    al,0x6
c0019835:	89 f2                	mov    edx,esi
c0019837:	88 95 5c 01 00 00    	mov    BYTE PTR [ebp+0x15c],dl
c001983d:	74 04                	je     c0019843 <CPU::detectFeatures()+0x54b>
c001983f:	3c 0f                	cmp    al,0xf
c0019841:	75 58                	jne    c001989b <CPU::detectFeatures()+0x5a3>
c0019843:	89 de                	mov    esi,ebx
c0019845:	c1 ee 10             	shr    esi,0x10
c0019848:	c1 e6 04             	shl    esi,0x4
c001984b:	09 f1                	or     ecx,esi
c001984d:	8b b5 5c 01 00 00    	mov    esi,DWORD PTR [ebp+0x15c]
c0019853:	0f b6 c9             	movzx  ecx,cl
c0019856:	66 81 e6 3f c0       	and    si,0xc03f
c001985b:	c1 e1 06             	shl    ecx,0x6
c001985e:	09 f1                	or     ecx,esi
c0019860:	3c 0f                	cmp    al,0xf
c0019862:	66 89 8d 5c 01 00 00 	mov    WORD PTR [ebp+0x15c],cx
c0019869:	75 30                	jne    c001989b <CPU::detectFeatures()+0x5a3>
c001986b:	8a 85 5d 01 00 00    	mov    al,BYTE PTR [ebp+0x15d]
c0019871:	c1 eb 14             	shr    ebx,0x14
c0019874:	83 e0 3f             	and    eax,0x3f
c0019877:	83 c3 0f             	add    ebx,0xf
c001987a:	88 d9                	mov    cl,bl
c001987c:	c0 eb 02             	shr    bl,0x2
c001987f:	c1 e1 06             	shl    ecx,0x6
c0019882:	09 c8                	or     eax,ecx
c0019884:	88 85 5d 01 00 00    	mov    BYTE PTR [ebp+0x15d],al
c001988a:	8a 85 5e 01 00 00    	mov    al,BYTE PTR [ebp+0x15e]
c0019890:	83 e0 c0             	and    eax,0xffffffc0
c0019893:	09 c3                	or     ebx,eax
c0019895:	88 9d 5e 01 00 00    	mov    BYTE PTR [ebp+0x15e],bl
c001989b:	83 ec 0c             	sub    esp,0xc
c001989e:	80 8d 91 11 00 00 07 	or     BYTE PTR [ebp+0x1191],0x7
c00198a5:	8d 44 24 18          	lea    eax,[esp+0x18]
c00198a9:	50                   	push   eax
c00198aa:	8d 74 24 18          	lea    esi,[esp+0x18]
c00198ae:	56                   	push   esi
c00198af:	57                   	push   edi
c00198b0:	8d 5c 24 18          	lea    ebx,[esp+0x18]
c00198b4:	53                   	push   ebx
c00198b5:	68 00 00 00 80       	push   0x80000000
c00198ba:	e8 f3 f5 ff ff       	call   c0018eb2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00198bf:	83 c4 20             	add    esp,0x20
c00198c2:	81 3c 24 00 00 00 80 	cmp    DWORD PTR [esp],0x80000000
c00198c9:	76 22                	jbe    c00198ed <CPU::detectFeatures()+0x5f5>
c00198cb:	83 ec 0c             	sub    esp,0xc
c00198ce:	8d 44 24 18          	lea    eax,[esp+0x18]
c00198d2:	50                   	push   eax
c00198d3:	56                   	push   esi
c00198d4:	57                   	push   edi
c00198d5:	53                   	push   ebx
c00198d6:	68 01 00 00 80       	push   0x80000001
c00198db:	e8 d2 f5 ff ff       	call   c0018eb2 <CPU::cpuid(int, unsigned long*, unsigned long*, unsigned long*, unsigned long*)>
c00198e0:	81 a5 90 11 00 00 ff 5f fe ff 	and    DWORD PTR [ebp+0x1190],0xfffe5fff
c00198ea:	83 c4 20             	add    esp,0x20
c00198ed:	8b 85 58 01 00 00    	mov    eax,DWORD PTR [ebp+0x158]
c00198f3:	83 f8 01             	cmp    eax,0x1
c00198f6:	75 6f                	jne    c0019967 <CPU::detectFeatures()+0x66f>
c00198f8:	51                   	push   ecx
c00198f9:	51                   	push   ecx
c00198fa:	68 5a c2 02 c0       	push   0xc002c25a
c00198ff:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c0019903:	53                   	push   ebx
c0019904:	e8 1f 6f fe ff       	call   c0000828 <strcpy>
c0019909:	5e                   	pop    esi
c001990a:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c0019910:	5f                   	pop    edi
c0019911:	66 c1 e8 06          	shr    ax,0x6
c0019915:	0f b6 c0             	movzx  eax,al
c0019918:	50                   	push   eax
c0019919:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c001991f:	c1 e8 0e             	shr    eax,0xe
c0019922:	0f b6 c0             	movzx  eax,al
c0019925:	50                   	push   eax
c0019926:	e8 31 f2 ff ff       	call   c0018b5c <CPU::lookupIntelName(unsigned char, unsigned char)>
c001992b:	5a                   	pop    edx
c001992c:	59                   	pop    ecx
c001992d:	50                   	push   eax
c001992e:	53                   	push   ebx
c001992f:	e8 34 70 fe ff       	call   c0000968 <strcat>
c0019934:	5e                   	pop    esi
c0019935:	5f                   	pop    edi
c0019936:	53                   	push   ebx
c0019937:	55                   	push   ebp
c0019938:	e8 0f ab ff ff       	call   c001444c <Device::setName(char const*)>
c001993d:	58                   	pop    eax
c001993e:	8d 85 d0 00 00 00    	lea    eax,[ebp+0xd0]
c0019944:	5a                   	pop    edx
c0019945:	68 61 c2 02 c0       	push   0xc002c261
c001994a:	50                   	push   eax
c001994b:	e8 64 6f fe ff       	call   c00008b4 <strcmp>
c0019950:	83 c4 10             	add    esp,0x10
c0019953:	85 c0                	test   eax,eax
c0019955:	0f 85 72 03 00 00    	jne    c0019ccd <CPU::detectFeatures()+0x9d5>
c001995b:	80 a5 91 11 00 00 3f 	and    BYTE PTR [ebp+0x1191],0x3f
c0019962:	e9 66 03 00 00       	jmp    c0019ccd <CPU::detectFeatures()+0x9d5>
c0019967:	83 f8 02             	cmp    eax,0x2
c001996a:	0f 85 b5 00 00 00    	jne    c0019a25 <CPU::detectFeatures()+0x72d>
c0019970:	56                   	push   esi
c0019971:	56                   	push   esi
c0019972:	68 73 c2 02 c0       	push   0xc002c273
c0019977:	8d 5c 24 1c          	lea    ebx,[esp+0x1c]
c001997b:	53                   	push   ebx
c001997c:	e8 a7 6e fe ff       	call   c0000828 <strcpy>
c0019981:	5f                   	pop    edi
c0019982:	58                   	pop    eax
c0019983:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c0019989:	66 c1 e8 06          	shr    ax,0x6
c001998d:	0f b6 c0             	movzx  eax,al
c0019990:	50                   	push   eax
c0019991:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c0019997:	c1 e8 0e             	shr    eax,0xe
c001999a:	0f b6 c0             	movzx  eax,al
c001999d:	50                   	push   eax
c001999e:	e8 25 f0 ff ff       	call   c00189c8 <CPU::lookupAMDName(unsigned char, unsigned char)>
c00199a3:	5a                   	pop    edx
c00199a4:	59                   	pop    ecx
c00199a5:	50                   	push   eax
c00199a6:	53                   	push   ebx
c00199a7:	e8 bc 6f fe ff       	call   c0000968 <strcat>
c00199ac:	5e                   	pop    esi
c00199ad:	5f                   	pop    edi
c00199ae:	53                   	push   ebx
c00199af:	55                   	push   ebp
c00199b0:	e8 97 aa ff ff       	call   c001444c <Device::setName(char const*)>
c00199b5:	58                   	pop    eax
c00199b6:	8d 85 d0 00 00 00    	lea    eax,[ebp+0xd0]
c00199bc:	5a                   	pop    edx
c00199bd:	68 78 c2 02 c0       	push   0xc002c278
c00199c2:	50                   	push   eax
c00199c3:	e8 ec 6e fe ff       	call   c00008b4 <strcmp>
c00199c8:	83 c4 10             	add    esp,0x10
c00199cb:	85 c0                	test   eax,eax
c00199cd:	75 20                	jne    c00199ef <CPU::detectFeatures()+0x6f7>
c00199cf:	8b 0d 48 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002ee48
c00199d5:	8a 81 e8 01 00 00    	mov    al,BYTE PTR [ecx+0x1e8]
c00199db:	a8 01                	test   al,0x1
c00199dd:	74 10                	je     c00199ef <CPU::detectFeatures()+0x6f7>
c00199df:	83 e0 fe             	and    eax,0xfffffffe
c00199e2:	88 81 e8 01 00 00    	mov    BYTE PTR [ecx+0x1e8],al
c00199e8:	80 8d 90 11 00 00 10 	or     BYTE PTR [ebp+0x1190],0x10
c00199ef:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c00199f5:	c1 e8 0e             	shr    eax,0xe
c00199f8:	3c 05                	cmp    al,0x5
c00199fa:	0f 85 cd 02 00 00    	jne    c0019ccd <CPU::detectFeatures()+0x9d5>
c0019a00:	53                   	push   ebx
c0019a01:	8a 85 5c 01 00 00    	mov    al,BYTE PTR [ebp+0x15c]
c0019a07:	83 e0 0f             	and    eax,0xf
c0019a0a:	50                   	push   eax
c0019a0b:	8b 85 5c 01 00 00    	mov    eax,DWORD PTR [ebp+0x15c]
c0019a11:	66 c1 e8 06          	shr    ax,0x6
c0019a15:	0f b6 c0             	movzx  eax,al
c0019a18:	50                   	push   eax
c0019a19:	6a 05                	push   0x5
c0019a1b:	e8 1e f4 ff ff       	call   c0018e3e <CPU::AMD_K6_writeback(int, int, int)>
c0019a20:	e9 20 02 00 00       	jmp    c0019c45 <CPU::detectFeatures()+0x94d>
c0019a25:	8d 48 fd             	lea    ecx,[eax-0x3]
c0019a28:	83 f9 01             	cmp    ecx,0x1
c0019a2b:	76 09                	jbe    c0019a36 <CPU::detectFeatures()+0x73e>
c0019a2d:	83 f8 06             	cmp    eax,0x6
c0019a30:	0f 85 92 01 00 00    	jne    c0019bc8 <CPU::detectFeatures()+0x8d0>
c0019a36:	8b 8d 5c 01 00 00    	mov    ecx,DWORD PTR [ebp+0x15c]
c0019a3c:	c1 e9 0e             	shr    ecx,0xe
c0019a3f:	80 f9 05             	cmp    cl,0x5
c0019a42:	75 7b                	jne    c0019abf <CPU::detectFeatures()+0x7c7>
c0019a44:	8b 8d 5c 01 00 00    	mov    ecx,DWORD PTR [ebp+0x15c]
c0019a4a:	66 81 e1 c0 3f       	and    cx,0x3fc0
c0019a4f:	66 81 f9 00 01       	cmp    cx,0x100
c0019a54:	75 0c                	jne    c0019a62 <CPU::detectFeatures()+0x76a>
c0019a56:	51                   	push   ecx
c0019a57:	51                   	push   ecx
c0019a58:	68 7f c2 02 c0       	push   0xc002c27f
c0019a5d:	e9 dd 01 00 00       	jmp    c0019c3f <CPU::detectFeatures()+0x947>
c0019a62:	66 81 f9 00 02       	cmp    cx,0x200
c0019a67:	75 0c                	jne    c0019a75 <CPU::detectFeatures()+0x77d>
c0019a69:	52                   	push   edx
c0019a6a:	52                   	push   edx
c0019a6b:	68 92 c2 02 c0       	push   0xc002c292
c0019a70:	e9 ca 01 00 00       	jmp    c0019c3f <CPU::detectFeatures()+0x947>
c0019a75:	66 81 f9 40 02       	cmp    cx,0x240
c0019a7a:	75 0c                	jne    c0019a88 <CPU::detectFeatures()+0x790>
c0019a7c:	50                   	push   eax
c0019a7d:	50                   	push   eax
c0019a7e:	68 a4 c2 02 c0       	push   0xc002c2a4
c0019a83:	e9 b7 01 00 00       	jmp    c0019c3f <CPU::detectFeatures()+0x947>
c0019a88:	83 f8 06             	cmp    eax,0x6
c0019a8b:	75 0c                	jne    c0019a99 <CPU::detectFeatures()+0x7a1>
c0019a8d:	50                   	push   eax
c0019a8e:	50                   	push   eax
c0019a8f:	68 b6 c2 02 c0       	push   0xc002c2b6
c0019a94:	e9 a6 01 00 00       	jmp    c0019c3f <CPU::detectFeatures()+0x947>
c0019a99:	83 f8 04             	cmp    eax,0x4
c0019a9c:	75 0c                	jne    c0019aaa <CPU::detectFeatures()+0x7b2>
c0019a9e:	50                   	push   eax
c0019a9f:	50                   	push   eax
c0019aa0:	68 c2 c2 02 c0       	push   0xc002c2c2
c0019aa5:	e9 95 01 00 00       	jmp    c0019c3f <CPU::detectFeatures()+0x947>
c0019aaa:	83 f8 03             	cmp    eax,0x3
c0019aad:	0f 85 1a 02 00 00    	jne    c0019ccd <CPU::detectFeatures()+0x9d5>
c0019ab3:	50                   	push   eax
c0019ab4:	50                   	push   eax
c0019ab5:	68 ca c2 02 c0       	push   0xc002c2ca
c0019aba:	e9 80 01 00 00       	jmp    c0019c3f <CPU::detectFeatures()+0x947>
c0019abf:	80 f9 06             	cmp    cl,0x6
c0019ac2:	0f 85 dc 00 00 00    	jne    c0019ba4 <CPU::detectFeatures()+0x8ac>
c0019ac8:	8b 8d 5c 01 00 00    	mov    ecx,DWORD PTR [ebp+0x15c]
c0019ace:	66 81 e1 c0 3f       	and    cx,0x3fc0
c0019ad3:	66 81 f9 80 01       	cmp    cx,0x180
c0019ad8:	75 0c                	jne    c0019ae6 <CPU::detectFeatures()+0x7ee>
c0019ada:	50                   	push   eax
c0019adb:	50                   	push   eax
c0019adc:	68 d5 c2 02 c0       	push   0xc002c2d5
c0019ae1:	e9 59 01 00 00       	jmp    c0019c3f <CPU::detectFeatures()+0x947>
c0019ae6:	8d 99 40 fe ff ff    	lea    ebx,[ecx-0x1c0]
c0019aec:	66 f7 c3 80 ff       	test   bx,0xff80
c0019af1:	75 0c                	jne    c0019aff <CPU::detectFeatures()+0x807>
c0019af3:	50                   	push   eax
c0019af4:	50                   	push   eax
c0019af5:	68 e5 c2 02 c0       	push   0xc002c2e5
c0019afa:	e9 40 01 00 00       	jmp    c0019c3f <CPU::detectFeatures()+0x947>
c0019aff:	66 81 f9 40 02       	cmp    cx,0x240
c0019b04:	75 0c                	jne    c0019b12 <CPU::detectFeatures()+0x81a>
c0019b06:	57                   	push   edi
c0019b07:	57                   	push   edi
c0019b08:	68 ec c2 02 c0       	push   0xc002c2ec
c0019b0d:	e9 2d 01 00 00       	jmp    c0019c3f <CPU::detectFeatures()+0x947>
c0019b12:	66 81 f9 80 02       	cmp    cx,0x280
c0019b17:	75 0c                	jne    c0019b25 <CPU::detectFeatures()+0x82d>
c0019b19:	56                   	push   esi
c0019b1a:	56                   	push   esi
c0019b1b:	68 f5 c2 02 c0       	push   0xc002c2f5
c0019b20:	e9 1a 01 00 00       	jmp    c0019c3f <CPU::detectFeatures()+0x947>
c0019b25:	66 81 f9 40 03       	cmp    cx,0x340
c0019b2a:	74 ed                	je     c0019b19 <CPU::detectFeatures()+0x821>
c0019b2c:	66 81 f9 c0 03       	cmp    cx,0x3c0
c0019b31:	75 0c                	jne    c0019b3f <CPU::detectFeatures()+0x847>
c0019b33:	53                   	push   ebx
c0019b34:	53                   	push   ebx
c0019b35:	68 fc c2 02 c0       	push   0xc002c2fc
c0019b3a:	e9 00 01 00 00       	jmp    c0019c3f <CPU::detectFeatures()+0x947>
c0019b3f:	83 f8 06             	cmp    eax,0x6
c0019b42:	0f 84 45 ff ff ff    	je     c0019a8d <CPU::detectFeatures()+0x795>
c0019b48:	83 f8 04             	cmp    eax,0x4
c0019b4b:	0f 84 4d ff ff ff    	je     c0019a9e <CPU::detectFeatures()+0x7a6>
c0019b51:	83 f8 03             	cmp    eax,0x3
c0019b54:	0f 85 73 01 00 00    	jne    c0019ccd <CPU::detectFeatures()+0x9d5>
c0019b5a:	b3 c1                	mov    bl,0xc1
c0019b5c:	51                   	push   ecx
c0019b5d:	51                   	push   ecx
c0019b5e:	68 05 c3 02 c0       	push   0xc002c305
c0019b63:	55                   	push   ebp
c0019b64:	e8 e3 a8 ff ff       	call   c001444c <Device::setName(char const*)>
c0019b69:	88 d8                	mov    al,bl
c0019b6b:	e6 22                	out    0x22,al
c0019b6d:	e4 23                	in     al,0x23
c0019b6f:	88 c1                	mov    cl,al
c0019b71:	88 d8                	mov    al,bl
c0019b73:	e6 22                	out    0x22,al
c0019b75:	88 c8                	mov    al,cl
c0019b77:	83 c8 10             	or     eax,0x10
c0019b7a:	e6 23                	out    0x23,al
c0019b7c:	0f b6 8d c4 00 00 00 	movzx  ecx,BYTE PTR [ebp+0xc4]
c0019b83:	8d 5c 8d 00          	lea    ebx,[ebp+ecx*4+0x0]
c0019b87:	89 c8                	mov    eax,ecx
c0019b89:	66 c7 43 04 22 00    	mov    WORD PTR [ebx+0x4],0x22
c0019b8f:	c6 43 06 02          	mov    BYTE PTR [ebx+0x6],0x2
c0019b93:	40                   	inc    eax
c0019b94:	88 85 c4 00 00 00    	mov    BYTE PTR [ebp+0xc4],al
c0019b9a:	80 64 8d 07 3f       	and    BYTE PTR [ebp+ecx*4+0x7],0x3f
c0019b9f:	e9 a1 00 00 00       	jmp    c0019c45 <CPU::detectFeatures()+0x94d>
c0019ba4:	83 f8 06             	cmp    eax,0x6
c0019ba7:	0f 84 e0 fe ff ff    	je     c0019a8d <CPU::detectFeatures()+0x795>
c0019bad:	83 f8 04             	cmp    eax,0x4
c0019bb0:	0f 84 e8 fe ff ff    	je     c0019a9e <CPU::detectFeatures()+0x7a6>
c0019bb6:	83 f8 03             	cmp    eax,0x3
c0019bb9:	0f 85 0e 01 00 00    	jne    c0019ccd <CPU::detectFeatures()+0x9d5>
c0019bbf:	52                   	push   edx
c0019bc0:	52                   	push   edx
c0019bc1:	68 10 c3 02 c0       	push   0xc002c310
c0019bc6:	eb 77                	jmp    c0019c3f <CPU::detectFeatures()+0x947>
c0019bc8:	83 f8 07             	cmp    eax,0x7
c0019bcb:	75 09                	jne    c0019bd6 <CPU::detectFeatures()+0x8de>
c0019bcd:	50                   	push   eax
c0019bce:	50                   	push   eax
c0019bcf:	68 1a c3 02 c0       	push   0xc002c31a
c0019bd4:	eb 69                	jmp    c0019c3f <CPU::detectFeatures()+0x947>
c0019bd6:	83 f8 0a             	cmp    eax,0xa
c0019bd9:	75 09                	jne    c0019be4 <CPU::detectFeatures()+0x8ec>
c0019bdb:	50                   	push   eax
c0019bdc:	50                   	push   eax
c0019bdd:	68 25 c3 02 c0       	push   0xc002c325
c0019be2:	eb 5b                	jmp    c0019c3f <CPU::detectFeatures()+0x947>
c0019be4:	83 f8 0b             	cmp    eax,0xb
c0019be7:	75 09                	jne    c0019bf2 <CPU::detectFeatures()+0x8fa>
c0019be9:	50                   	push   eax
c0019bea:	50                   	push   eax
c0019beb:	68 2d c3 02 c0       	push   0xc002c32d
c0019bf0:	eb 4d                	jmp    c0019c3f <CPU::detectFeatures()+0x947>
c0019bf2:	83 f8 08             	cmp    eax,0x8
c0019bf5:	75 09                	jne    c0019c00 <CPU::detectFeatures()+0x908>
c0019bf7:	50                   	push   eax
c0019bf8:	50                   	push   eax
c0019bf9:	68 36 c3 02 c0       	push   0xc002c336
c0019bfe:	eb 3f                	jmp    c0019c3f <CPU::detectFeatures()+0x947>
c0019c00:	83 f8 09             	cmp    eax,0x9
c0019c03:	75 09                	jne    c0019c0e <CPU::detectFeatures()+0x916>
c0019c05:	50                   	push   eax
c0019c06:	50                   	push   eax
c0019c07:	68 3e c3 02 c0       	push   0xc002c33e
c0019c0c:	eb 31                	jmp    c0019c3f <CPU::detectFeatures()+0x947>
c0019c0e:	83 f8 05             	cmp    eax,0x5
c0019c11:	75 09                	jne    c0019c1c <CPU::detectFeatures()+0x924>
c0019c13:	50                   	push   eax
c0019c14:	50                   	push   eax
c0019c15:	68 46 c3 02 c0       	push   0xc002c346
c0019c1a:	eb 23                	jmp    c0019c3f <CPU::detectFeatures()+0x947>
c0019c1c:	83 f8 0c             	cmp    eax,0xc
c0019c1f:	75 09                	jne    c0019c2a <CPU::detectFeatures()+0x932>
c0019c21:	57                   	push   edi
c0019c22:	57                   	push   edi
c0019c23:	68 54 c3 02 c0       	push   0xc002c354
c0019c28:	eb 15                	jmp    c0019c3f <CPU::detectFeatures()+0x947>
c0019c2a:	83 f8 0d             	cmp    eax,0xd
c0019c2d:	75 09                	jne    c0019c38 <CPU::detectFeatures()+0x940>
c0019c2f:	56                   	push   esi
c0019c30:	56                   	push   esi
c0019c31:	68 5f c3 02 c0       	push   0xc002c35f
c0019c36:	eb 07                	jmp    c0019c3f <CPU::detectFeatures()+0x947>
c0019c38:	53                   	push   ebx
c0019c39:	53                   	push   ebx
c0019c3a:	68 73 c3 02 c0       	push   0xc002c373
c0019c3f:	55                   	push   ebp
c0019c40:	e8 07 a8 ff ff       	call   c001444c <Device::setName(char const*)>
c0019c45:	83 c4 10             	add    esp,0x10
c0019c48:	e9 80 00 00 00       	jmp    c0019ccd <CPU::detectFeatures()+0x9d5>
c0019c4d:	51                   	push   ecx
c0019c4e:	51                   	push   ecx
c0019c4f:	68 bf c1 02 c0       	push   0xc002c1bf
c0019c54:	53                   	push   ebx
c0019c55:	e8 ce 6b fe ff       	call   c0000828 <strcpy>
c0019c5a:	c7 85 58 01 00 00 01 00 00 00 	mov    DWORD PTR [ebp+0x158],0x1
c0019c64:	e8 45 66 fe ff       	call   c00002ae <is486>
c0019c69:	83 c4 10             	add    esp,0x10
c0019c6c:	85 c0                	test   eax,eax
c0019c6e:	74 2b                	je     c0019c9b <CPU::detectFeatures()+0x9a3>
c0019c70:	52                   	push   edx
c0019c71:	52                   	push   edx
c0019c72:	68 7f c3 02 c0       	push   0xc002c37f
c0019c77:	55                   	push   ebp
c0019c78:	e8 cf a7 ff ff       	call   c001444c <Device::setName(char const*)>
c0019c7d:	80 8d 91 11 00 00 07 	or     BYTE PTR [ebp+0x1191],0x7
c0019c84:	0f 20 c0             	mov    eax,cr0
c0019c87:	83 e0 14             	and    eax,0x14
c0019c8a:	83 c4 10             	add    esp,0x10
c0019c8d:	83 f8 04             	cmp    eax,0x4
c0019c90:	75 1f                	jne    c0019cb1 <CPU::detectFeatures()+0x9b9>
c0019c92:	80 a5 92 11 00 00 fd 	and    BYTE PTR [ebp+0x1192],0xfd
c0019c99:	eb 32                	jmp    c0019ccd <CPU::detectFeatures()+0x9d5>
c0019c9b:	50                   	push   eax
c0019c9c:	50                   	push   eax
c0019c9d:	68 8a c3 02 c0       	push   0xc002c38a
c0019ca2:	55                   	push   ebp
c0019ca3:	e8 a4 a7 ff ff       	call   c001444c <Device::setName(char const*)>
c0019ca8:	80 a5 91 11 00 00 f8 	and    BYTE PTR [ebp+0x1191],0xf8
c0019caf:	eb d3                	jmp    c0019c84 <CPU::detectFeatures()+0x98c>
c0019cb1:	e8 d3 65 fe ff       	call   c0000289 <hasLegacyFPU>
c0019cb6:	83 e0 01             	and    eax,0x1
c0019cb9:	8d 0c 00             	lea    ecx,[eax+eax*1]
c0019cbc:	8a 85 92 11 00 00    	mov    al,BYTE PTR [ebp+0x1192]
c0019cc2:	83 e0 fd             	and    eax,0xfffffffd
c0019cc5:	09 c8                	or     eax,ecx
c0019cc7:	88 85 92 11 00 00    	mov    BYTE PTR [ebp+0x1192],al
c0019ccd:	c6 85 94 11 00 00 00 	mov    BYTE PTR [ebp+0x1194],0x0
c0019cd4:	83 c4 3c             	add    esp,0x3c
c0019cd7:	5b                   	pop    ebx
c0019cd8:	5e                   	pop    esi
c0019cd9:	5f                   	pop    edi
c0019cda:	5d                   	pop    ebp
c0019cdb:	c3                   	ret    

c0019cdc <CPU::setupSMEP()>:
c0019cdc:	0f 20 e0             	mov    eax,cr4
c0019cdf:	0d 00 00 10 00       	or     eax,0x100000
c0019ce4:	0f 22 e0             	mov    cr4,eax
c0019ce7:	c3                   	ret    

c0019ce8 <CPU::setupUMIP()>:
c0019ce8:	0f 20 e0             	mov    eax,cr4
c0019ceb:	80 cc 08             	or     ah,0x8
c0019cee:	0f 22 e0             	mov    cr4,eax
c0019cf1:	c3                   	ret    

c0019cf2 <CPU::setupTSC()>:
c0019cf2:	0f 20 e0             	mov    eax,cr4
c0019cf5:	83 c8 04             	or     eax,0x4
c0019cf8:	0f 22 e0             	mov    cr4,eax
c0019cfb:	c3                   	ret    

c0019cfc <CPU::setupLargePages()>:
c0019cfc:	0f 20 e0             	mov    eax,cr4
c0019cff:	83 c8 10             	or     eax,0x10
c0019d02:	0f 22 e0             	mov    cr4,eax
c0019d05:	c3                   	ret    

c0019d06 <CPU::setupPAT()>:
c0019d06:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0019d0b:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c0019d12:	74 2c                	je     c0019d40 <CPU::setupPAT()+0x3a>
c0019d14:	53                   	push   ebx
c0019d15:	83 ec 10             	sub    esp,0x10
c0019d18:	68 77 02 00 00       	push   0x277
c0019d1d:	50                   	push   eax
c0019d1e:	e8 2b 51 ff ff       	call   c000ee4e <Computer::rdmsr(unsigned int)>
c0019d23:	83 e2 f8             	and    edx,0xfffffff8
c0019d26:	83 ca 01             	or     edx,0x1
c0019d29:	52                   	push   edx
c0019d2a:	50                   	push   eax
c0019d2b:	68 77 02 00 00       	push   0x277
c0019d30:	ff 35 48 ee 02 c0    	push   DWORD PTR ds:0xc002ee48
c0019d36:	e8 3f 51 ff ff       	call   c000ee7a <Computer::wrmsr(unsigned int, unsigned long long)>
c0019d3b:	83 c4 28             	add    esp,0x28
c0019d3e:	5b                   	pop    ebx
c0019d3f:	c3                   	ret    
c0019d40:	c3                   	ret    
c0019d41:	90                   	nop

c0019d42 <CPU::setupMTRR()>:
c0019d42:	c3                   	ret    
c0019d43:	90                   	nop

c0019d44 <CPU::setupGlobalPages()>:
c0019d44:	0f 20 e0             	mov    eax,cr4
c0019d47:	0c 80                	or     al,0x80
c0019d49:	0f 22 e0             	mov    cr4,eax
c0019d4c:	c3                   	ret    
c0019d4d:	90                   	nop

c0019d4e <CPU::allowUsermodeDataAccess()>:
c0019d4e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d52:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019d59:	74 03                	je     c0019d5e <CPU::allowUsermodeDataAccess()+0x10>
c0019d5b:	0f 01 cb             	stac   
c0019d5e:	c3                   	ret    
c0019d5f:	90                   	nop

c0019d60 <CPU::prohibitUsermodeDataAccess()>:
c0019d60:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0019d64:	f6 80 91 11 00 00 10 	test   BYTE PTR [eax+0x1191],0x10
c0019d6b:	74 03                	je     c0019d70 <CPU::prohibitUsermodeDataAccess()+0x10>
c0019d6d:	0f 01 ca             	clac   
c0019d70:	c3                   	ret    
c0019d71:	90                   	nop

c0019d72 <CPU::setupSMAP()>:
c0019d72:	0f 20 e0             	mov    eax,cr4
c0019d75:	0d 00 00 20 00       	or     eax,0x200000
c0019d7a:	0f 22 e0             	mov    cr4,eax
c0019d7d:	eb e1                	jmp    c0019d60 <CPU::prohibitUsermodeDataAccess()>
c0019d7f:	90                   	nop

c0019d80 <CPU::setupFeatures()>:
c0019d80:	83 ec 0c             	sub    esp,0xc
c0019d83:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0019d87:	f6 82 90 11 00 00 40 	test   BYTE PTR [edx+0x1190],0x40
c0019d8e:	74 07                	je     c0019d97 <CPU::setupFeatures()+0x17>
c0019d90:	52                   	push   edx
c0019d91:	e8 46 ff ff ff       	call   c0019cdc <CPU::setupSMEP()>
c0019d96:	58                   	pop    eax
c0019d97:	f6 82 91 11 00 00 10 	test   BYTE PTR [edx+0x1191],0x10
c0019d9e:	74 07                	je     c0019da7 <CPU::setupFeatures()+0x27>
c0019da0:	52                   	push   edx
c0019da1:	e8 cc ff ff ff       	call   c0019d72 <CPU::setupSMAP()>
c0019da6:	58                   	pop    eax
c0019da7:	f6 82 91 11 00 00 08 	test   BYTE PTR [edx+0x1191],0x8
c0019dae:	74 07                	je     c0019db7 <CPU::setupFeatures()+0x37>
c0019db0:	52                   	push   edx
c0019db1:	e8 32 ff ff ff       	call   c0019ce8 <CPU::setupUMIP()>
c0019db6:	58                   	pop    eax
c0019db7:	f6 82 90 11 00 00 02 	test   BYTE PTR [edx+0x1190],0x2
c0019dbe:	74 07                	je     c0019dc7 <CPU::setupFeatures()+0x47>
c0019dc0:	52                   	push   edx
c0019dc1:	e8 2c ff ff ff       	call   c0019cf2 <CPU::setupTSC()>
c0019dc6:	58                   	pop    eax
c0019dc7:	f6 82 90 11 00 00 08 	test   BYTE PTR [edx+0x1190],0x8
c0019dce:	74 07                	je     c0019dd7 <CPU::setupFeatures()+0x57>
c0019dd0:	52                   	push   edx
c0019dd1:	e8 26 ff ff ff       	call   c0019cfc <CPU::setupLargePages()>
c0019dd6:	59                   	pop    ecx
c0019dd7:	f6 82 90 11 00 00 10 	test   BYTE PTR [edx+0x1190],0x10
c0019dde:	74 07                	je     c0019de7 <CPU::setupFeatures()+0x67>
c0019de0:	52                   	push   edx
c0019de1:	e8 5e ff ff ff       	call   c0019d44 <CPU::setupGlobalPages()>
c0019de6:	58                   	pop    eax
c0019de7:	f6 82 90 11 00 00 20 	test   BYTE PTR [edx+0x1190],0x20
c0019dee:	74 0c                	je     c0019dfc <CPU::setupFeatures()+0x7c>
c0019df0:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c0019df4:	83 c4 0c             	add    esp,0xc
c0019df7:	e9 0a ff ff ff       	jmp    c0019d06 <CPU::setupPAT()>
c0019dfc:	83 c4 0c             	add    esp,0xc
c0019dff:	c3                   	ret    

c0019e00 <CPU::open(int, int, void*)>:
c0019e00:	57                   	push   edi
c0019e01:	56                   	push   esi
c0019e02:	53                   	push   ebx
c0019e03:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0019e07:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019e0b:	8d 83 78 01 00 00    	lea    eax,[ebx+0x178]
c0019e11:	83 ec 0c             	sub    esp,0xc
c0019e14:	89 b3 74 01 00 00    	mov    DWORD PTR [ebx+0x174],esi
c0019e1a:	8d bb 7c 11 00 00    	lea    edi,[ebx+0x117c]
c0019e20:	50                   	push   eax
c0019e21:	e8 14 53 ff ff       	call   c000f13a <GDT::setup()>
c0019e26:	83 c4 0c             	add    esp,0xc
c0019e29:	6a 00                	push   0x0
c0019e2b:	68 ef be ad de       	push   0xdeadbeef
c0019e30:	57                   	push   edi
c0019e31:	e8 7c 75 ff ff       	call   c00113b2 <TSS::setup(unsigned long, unsigned long)>
c0019e36:	89 3c 24             	mov    DWORD PTR [esp],edi
c0019e39:	e8 54 75 ff ff       	call   c0011392 <TSS::flush()>
c0019e3e:	8d 83 7c 09 00 00    	lea    eax,[ebx+0x97c]
c0019e44:	89 04 24             	mov    DWORD PTR [esp],eax
c0019e47:	e8 52 55 ff ff       	call   c000f39e <IDT::setup()>
c0019e4c:	b8 00 04 00 00       	mov    eax,0x400
c0019e51:	0f 23 f8             	mov    db7,eax
c0019e54:	c7 83 70 01 00 00 00 00 40 c2 	mov    DWORD PTR [ebx+0x170],0xc2400000
c0019e5e:	e8 b1 60 ff ff       	call   c000ff14 <Phys::allocatePage()>
c0019e63:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0019e69:	89 30                	mov    DWORD PTR [eax],esi
c0019e6b:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c0019e71:	89 58 04             	mov    DWORD PTR [eax+0x4],ebx
c0019e74:	58                   	pop    eax
c0019e75:	5a                   	pop    edx
c0019e76:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0019e7c:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0019e80:	e8 cd 86 ff ff       	call   c0012552 <VAS::setCPUSpecific(unsigned long)>
c0019e85:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019e88:	e8 6b f4 ff ff       	call   c00192f8 <CPU::detectFeatures()>
c0019e8d:	e8 11 ba ff ff       	call   c00158a3 <setupInterruptController()>
c0019e92:	89 83 88 11 00 00    	mov    DWORD PTR [ebx+0x1188],eax
c0019e98:	a1 60 ee 02 c0       	mov    eax,ds:0xc002ee60
c0019e9d:	83 e0 10             	and    eax,0x10
c0019ea0:	83 f8 01             	cmp    eax,0x1
c0019ea3:	19 c0                	sbb    eax,eax
c0019ea5:	83 e0 46             	and    eax,0x46
c0019ea8:	83 c0 1e             	add    eax,0x1e
c0019eab:	89 04 24             	mov    DWORD PTR [esp],eax
c0019eae:	e8 48 d0 ff ff       	call   c0016efb <setupTimer(int)>
c0019eb3:	89 83 8c 11 00 00    	mov    DWORD PTR [ebx+0x118c],eax
c0019eb9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ebc:	e8 bf fe ff ff       	call   c0019d80 <CPU::setupFeatures()>
c0019ec1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0019ec4:	e8 b3 f1 ff ff       	call   c001907c <CPU::displayFeatures()>
c0019ec9:	83 c4 10             	add    esp,0x10
c0019ecc:	31 c0                	xor    eax,eax
c0019ece:	5b                   	pop    ebx
c0019ecf:	5e                   	pop    esi
c0019ed0:	5f                   	pop    edi
c0019ed1:	c3                   	ret    

c0019ed2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>:
c0019ed2:	57                   	push   edi
c0019ed3:	56                   	push   esi
c0019ed4:	53                   	push   ebx
c0019ed5:	51                   	push   ecx
c0019ed6:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0019eda:	8b 46 3c             	mov    eax,DWORD PTR [esi+0x3c]
c0019edd:	0f 02 c0             	lar    eax,ax
c0019ee0:	8b 5e 38             	mov    ebx,DWORD PTR [esi+0x38]
c0019ee3:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0019ee7:	8a 4b 01             	mov    cl,BYTE PTR [ebx+0x1]
c0019eea:	88 ca                	mov    dl,cl
c0019eec:	c0 ea 06             	shr    dl,0x6
c0019eef:	88 54 24 01          	mov    BYTE PTR [esp+0x1],dl
c0019ef3:	89 ca                	mov    edx,ecx
c0019ef5:	66 c1 ea 03          	shr    dx,0x3
c0019ef9:	83 e2 07             	and    edx,0x7
c0019efc:	80 7c 24 01 03       	cmp    BYTE PTR [esp+0x1],0x3
c0019f01:	88 17                	mov    BYTE PTR [edi],dl
c0019f03:	0f 84 a6 01 00 00    	je     c001a0af <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1dd>
c0019f09:	83 e1 07             	and    ecx,0x7
c0019f0c:	80 f9 04             	cmp    cl,0x4
c0019f0f:	0f 84 98 00 00 00    	je     c0019fad <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xdb>
c0019f15:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c0019f1a:	0f 95 c0             	setne  al
c0019f1d:	80 f9 05             	cmp    cl,0x5
c0019f20:	0f 95 c2             	setne  dl
c0019f23:	08 c2                	or     dl,al
c0019f25:	74 79                	je     c0019fa0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xce>
c0019f27:	84 c9                	test   cl,cl
c0019f29:	75 05                	jne    c0019f30 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x5e>
c0019f2b:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c0019f2e:	eb 3c                	jmp    c0019f6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f30:	80 f9 01             	cmp    cl,0x1
c0019f33:	75 05                	jne    c0019f3a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x68>
c0019f35:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c0019f38:	eb 32                	jmp    c0019f6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f3a:	80 f9 02             	cmp    cl,0x2
c0019f3d:	75 05                	jne    c0019f44 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x72>
c0019f3f:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c0019f42:	eb 28                	jmp    c0019f6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f44:	31 c0                	xor    eax,eax
c0019f46:	80 f9 03             	cmp    cl,0x3
c0019f49:	75 05                	jne    c0019f50 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x7e>
c0019f4b:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c0019f4e:	eb 1c                	jmp    c0019f6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f50:	80 f9 05             	cmp    cl,0x5
c0019f53:	75 05                	jne    c0019f5a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x88>
c0019f55:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c0019f58:	eb 12                	jmp    c0019f6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f5a:	80 f9 06             	cmp    cl,0x6
c0019f5d:	75 05                	jne    c0019f64 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x92>
c0019f5f:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c0019f62:	eb 08                	jmp    c0019f6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f64:	80 f9 07             	cmp    cl,0x7
c0019f67:	75 03                	jne    c0019f6c <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x9a>
c0019f69:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c0019f6c:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c0019f71:	75 10                	jne    c0019f83 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xb1>
c0019f73:	0f be 53 02          	movsx  edx,BYTE PTR [ebx+0x2]
c0019f77:	b9 03 00 00 00       	mov    ecx,0x3
c0019f7c:	01 d0                	add    eax,edx
c0019f7e:	e9 37 01 00 00       	jmp    c001a0ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019f83:	b9 02 00 00 00       	mov    ecx,0x2
c0019f88:	80 7c 24 01 02       	cmp    BYTE PTR [esp+0x1],0x2
c0019f8d:	0f 85 27 01 00 00    	jne    c001a0ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019f93:	03 43 02             	add    eax,DWORD PTR [ebx+0x2]
c0019f96:	b9 06 00 00 00       	mov    ecx,0x6
c0019f9b:	e9 1a 01 00 00       	jmp    c001a0ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c0019fa0:	8b 43 02             	mov    eax,DWORD PTR [ebx+0x2]
c0019fa3:	b9 06 00 00 00       	mov    ecx,0x6
c0019fa8:	e9 0f 01 00 00       	jmp    c001a0bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c0019fad:	8a 4b 02             	mov    cl,BYTE PTR [ebx+0x2]
c0019fb0:	88 ca                	mov    dl,cl
c0019fb2:	c0 ea 06             	shr    dl,0x6
c0019fb5:	88 54 24 02          	mov    BYTE PTR [esp+0x2],dl
c0019fb9:	89 ca                	mov    edx,ecx
c0019fbb:	66 c1 ea 03          	shr    dx,0x3
c0019fbf:	83 e2 07             	and    edx,0x7
c0019fc2:	80 e1 07             	and    cl,0x7
c0019fc5:	75 05                	jne    c0019fcc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0xfa>
c0019fc7:	8b 7e 2c             	mov    edi,DWORD PTR [esi+0x2c]
c0019fca:	eb 4c                	jmp    c001a018 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019fcc:	80 f9 01             	cmp    cl,0x1
c0019fcf:	75 05                	jne    c0019fd6 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x104>
c0019fd1:	8b 7e 28             	mov    edi,DWORD PTR [esi+0x28]
c0019fd4:	eb 42                	jmp    c001a018 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019fd6:	80 f9 02             	cmp    cl,0x2
c0019fd9:	75 05                	jne    c0019fe0 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x10e>
c0019fdb:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c0019fde:	eb 38                	jmp    c001a018 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019fe0:	80 f9 03             	cmp    cl,0x3
c0019fe3:	75 05                	jne    c0019fea <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x118>
c0019fe5:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c0019fe8:	eb 2e                	jmp    c001a018 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019fea:	80 f9 04             	cmp    cl,0x4
c0019fed:	75 12                	jne    c001a001 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12f>
c0019fef:	f6 c4 60             	test   ah,0x60
c0019ff2:	75 08                	jne    c0019ffc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x12a>
c0019ff4:	8b 46 1c             	mov    eax,DWORD PTR [esi+0x1c]
c0019ff7:	8d 78 14             	lea    edi,[eax+0x14]
c0019ffa:	eb 1c                	jmp    c001a018 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c0019ffc:	8b 7e 44             	mov    edi,DWORD PTR [esi+0x44]
c0019fff:	eb 17                	jmp    c001a018 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a001:	80 f9 05             	cmp    cl,0x5
c001a004:	75 05                	jne    c001a00b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x139>
c001a006:	8b 7e 18             	mov    edi,DWORD PTR [esi+0x18]
c001a009:	eb 0d                	jmp    c001a018 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a00b:	80 f9 06             	cmp    cl,0x6
c001a00e:	75 05                	jne    c001a015 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x143>
c001a010:	8b 7e 14             	mov    edi,DWORD PTR [esi+0x14]
c001a013:	eb 03                	jmp    c001a018 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x146>
c001a015:	8b 7e 10             	mov    edi,DWORD PTR [esi+0x10]
c001a018:	84 d2                	test   dl,dl
c001a01a:	75 05                	jne    c001a021 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x14f>
c001a01c:	8b 46 2c             	mov    eax,DWORD PTR [esi+0x2c]
c001a01f:	eb 3c                	jmp    c001a05d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a021:	80 fa 01             	cmp    dl,0x1
c001a024:	75 05                	jne    c001a02b <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x159>
c001a026:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001a029:	eb 32                	jmp    c001a05d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a02b:	80 fa 02             	cmp    dl,0x2
c001a02e:	75 05                	jne    c001a035 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x163>
c001a030:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001a033:	eb 28                	jmp    c001a05d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a035:	80 fa 03             	cmp    dl,0x3
c001a038:	75 05                	jne    c001a03f <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x16d>
c001a03a:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001a03d:	eb 1e                	jmp    c001a05d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a03f:	31 c0                	xor    eax,eax
c001a041:	80 fa 04             	cmp    dl,0x4
c001a044:	74 17                	je     c001a05d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a046:	80 fa 05             	cmp    dl,0x5
c001a049:	75 05                	jne    c001a050 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x17e>
c001a04b:	8b 46 18             	mov    eax,DWORD PTR [esi+0x18]
c001a04e:	eb 0d                	jmp    c001a05d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a050:	80 fa 06             	cmp    dl,0x6
c001a053:	75 05                	jne    c001a05a <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x188>
c001a055:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001a058:	eb 03                	jmp    c001a05d <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x18b>
c001a05a:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001a05d:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a062:	0f 94 c2             	sete   dl
c001a065:	80 f9 05             	cmp    cl,0x5
c001a068:	8a 4c 24 02          	mov    cl,BYTE PTR [esp+0x2]
c001a06c:	0f 94 44 24 03       	sete   BYTE PTR [esp+0x3]
c001a071:	d3 e0                	shl    eax,cl
c001a073:	22 54 24 03          	and    dl,BYTE PTR [esp+0x3]
c001a077:	74 0a                	je     c001a083 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1b1>
c001a079:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a07c:	b9 07 00 00 00       	mov    ecx,0x7
c001a081:	eb 37                	jmp    c001a0ba <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1e8>
c001a083:	01 f8                	add    eax,edi
c001a085:	b9 03 00 00 00       	mov    ecx,0x3
c001a08a:	80 7c 24 01 00       	cmp    BYTE PTR [esp+0x1],0x0
c001a08f:	74 2b                	je     c001a0bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a091:	80 7c 24 01 01       	cmp    BYTE PTR [esp+0x1],0x1
c001a096:	75 0d                	jne    c001a0a5 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1d3>
c001a098:	0f be 4b 03          	movsx  ecx,BYTE PTR [ebx+0x3]
c001a09c:	01 c8                	add    eax,ecx
c001a09e:	b9 04 00 00 00       	mov    ecx,0x4
c001a0a3:	eb 17                	jmp    c001a0bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a0a5:	03 43 03             	add    eax,DWORD PTR [ebx+0x3]
c001a0a8:	b9 07 00 00 00       	mov    ecx,0x7
c001a0ad:	eb 0d                	jmp    c001a0bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a0af:	b9 02 00 00 00       	mov    ecx,0x2
c001a0b4:	b2 01                	mov    dl,0x1
c001a0b6:	31 c0                	xor    eax,eax
c001a0b8:	eb 02                	jmp    c001a0bc <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)+0x1ea>
c001a0ba:	31 d2                	xor    edx,edx
c001a0bc:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a0c0:	89 0b                	mov    DWORD PTR [ebx],ecx
c001a0c2:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001a0c6:	88 11                	mov    BYTE PTR [ecx],dl
c001a0c8:	5a                   	pop    edx
c001a0c9:	5b                   	pop    ebx
c001a0ca:	5e                   	pop    esi
c001a0cb:	5f                   	pop    edi
c001a0cc:	c3                   	ret    

c001a0cd <Krnl::smpEntry()>:
c001a0cd:	eb fe                	jmp    c001a0cd <Krnl::smpEntry()>

c001a0cf <Krnl::startCPU(int)>:
c001a0cf:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001a0d4:	f6 80 e8 01 00 00 08 	test   BYTE PTR [eax+0x1e8],0x8
c001a0db:	0f 84 36 01 00 00    	je     c001a217 <Krnl::startCPU(int)+0x148>
c001a0e1:	53                   	push   ebx
c001a0e2:	83 ec 10             	sub    esp,0x10
c001a0e5:	fa                   	cli    
c001a0e6:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001a0ec:	6a 1b                	push   0x1b
c001a0ee:	ff 35 48 ee 02 c0    	push   DWORD PTR ds:0xc002ee48
c001a0f4:	e8 55 4d ff ff       	call   c000ee4e <Computer::rdmsr(unsigned int)>
c001a0f9:	25 00 f0 ff ff       	and    eax,0xfffff000
c001a0fe:	89 c3                	mov    ebx,eax
c001a100:	58                   	pop    eax
c001a101:	5a                   	pop    edx
c001a102:	53                   	push   ebx
c001a103:	68 c4 c3 02 c0       	push   0xc002c3c4
c001a108:	e8 3a 8d ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001a10d:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a117:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001a11b:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a125:	c1 e0 18             	shl    eax,0x18
c001a128:	8b 93 10 03 00 00    	mov    edx,DWORD PTR [ebx+0x310]
c001a12e:	83 c4 10             	add    esp,0x10
c001a131:	81 e2 ff ff ff 00    	and    edx,0xffffff
c001a137:	09 c2                	or     edx,eax
c001a139:	89 93 10 03 00 00    	mov    DWORD PTR [ebx+0x310],edx
c001a13f:	8d 93 00 03 00 00    	lea    edx,[ebx+0x300]
c001a145:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a14b:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a151:	80 cd c5             	or     ch,0xc5
c001a154:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a15a:	f3 90                	pause  
c001a15c:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a15e:	0f ba e1 0c          	bt     ecx,0xc
c001a162:	72 f6                	jb     c001a15a <Krnl::startCPU(int)+0x8b>
c001a164:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a16a:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a170:	09 c1                	or     ecx,eax
c001a172:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a178:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a17e:	81 e1 00 00 f0 ff    	and    ecx,0xfff00000
c001a184:	80 cd 85             	or     ch,0x85
c001a187:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a18d:	f3 90                	pause  
c001a18f:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a191:	0f ba e1 0c          	bt     ecx,0xc
c001a195:	72 f6                	jb     c001a18d <Krnl::startCPU(int)+0xbe>
c001a197:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a1a1:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a1a7:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a1ad:	09 c1                	or     ecx,eax
c001a1af:	89 8b 10 03 00 00    	mov    DWORD PTR [ebx+0x310],ecx
c001a1b5:	8b 8b 00 03 00 00    	mov    ecx,DWORD PTR [ebx+0x300]
c001a1bb:	81 e1 00 f8 f0 ff    	and    ecx,0xfff0f800
c001a1c1:	81 c9 02 06 00 00    	or     ecx,0x602
c001a1c7:	89 8b 00 03 00 00    	mov    DWORD PTR [ebx+0x300],ecx
c001a1cd:	f3 90                	pause  
c001a1cf:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a1d1:	0f ba e1 0c          	bt     ecx,0xc
c001a1d5:	72 f6                	jb     c001a1cd <Krnl::startCPU(int)+0xfe>
c001a1d7:	c7 83 80 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x280],0x0
c001a1e1:	8b 8b 10 03 00 00    	mov    ecx,DWORD PTR [ebx+0x310]
c001a1e7:	81 e1 ff ff ff 00    	and    ecx,0xffffff
c001a1ed:	09 c8                	or     eax,ecx
c001a1ef:	89 83 10 03 00 00    	mov    DWORD PTR [ebx+0x310],eax
c001a1f5:	8b 83 00 03 00 00    	mov    eax,DWORD PTR [ebx+0x300]
c001a1fb:	25 00 f8 f0 ff       	and    eax,0xfff0f800
c001a200:	0d 02 06 00 00       	or     eax,0x602
c001a205:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax
c001a20b:	f3 90                	pause  
c001a20d:	8b 02                	mov    eax,DWORD PTR [edx]
c001a20f:	0f ba e0 0c          	bt     eax,0xc
c001a213:	72 f6                	jb     c001a20b <Krnl::startCPU(int)+0x13c>
c001a215:	eb fe                	jmp    c001a215 <Krnl::startCPU(int)+0x146>
c001a217:	c3                   	ret    

c001a218 <Krnl::startCPUs()>:
c001a218:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001a21d:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c001a223:	88 c2                	mov    dl,al
c001a225:	83 e2 0a             	and    edx,0xa
c001a228:	80 fa 0a             	cmp    dl,0xa
c001a22b:	75 09                	jne    c001a236 <Krnl::startCPUs()+0x1e>
c001a22d:	a8 01                	test   al,0x1
c001a22f:	74 05                	je     c001a236 <Krnl::startCPUs()+0x1e>
c001a231:	e9 65 5f fe ff       	jmp    c000019b <prepareTramp>
c001a236:	c3                   	ret    
c001a237:	90                   	nop

c001a238 <EnvVarContainer::getEnv(char const*)>:
c001a238:	57                   	push   edi
c001a239:	56                   	push   esi
c001a23a:	53                   	push   ebx
c001a23b:	31 db                	xor    ebx,ebx
c001a23d:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a241:	39 1e                	cmp    DWORD PTR [esi],ebx
c001a243:	7e 2b                	jle    c001a270 <EnvVarContainer::getEnv(char const*)+0x38>
c001a245:	8d 3c dd 00 00 00 00 	lea    edi,[ebx*8+0x0]
c001a24c:	50                   	push   eax
c001a24d:	50                   	push   eax
c001a24e:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a251:	ff 34 d8             	push   DWORD PTR [eax+ebx*8]
c001a254:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001a258:	e8 57 66 fe ff       	call   c00008b4 <strcmp>
c001a25d:	83 c4 10             	add    esp,0x10
c001a260:	85 c0                	test   eax,eax
c001a262:	75 09                	jne    c001a26d <EnvVarContainer::getEnv(char const*)+0x35>
c001a264:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001a267:	8b 44 38 04          	mov    eax,DWORD PTR [eax+edi*1+0x4]
c001a26b:	eb 05                	jmp    c001a272 <EnvVarContainer::getEnv(char const*)+0x3a>
c001a26d:	43                   	inc    ebx
c001a26e:	eb d1                	jmp    c001a241 <EnvVarContainer::getEnv(char const*)+0x9>
c001a270:	31 c0                	xor    eax,eax
c001a272:	5b                   	pop    ebx
c001a273:	5e                   	pop    esi
c001a274:	5f                   	pop    edi
c001a275:	c3                   	ret    

c001a276 <EnvVarContainer::setEnv(char const*, char const*)>:
c001a276:	55                   	push   ebp
c001a277:	57                   	push   edi
c001a278:	56                   	push   esi
c001a279:	53                   	push   ebx
c001a27a:	83 ec 28             	sub    esp,0x28
c001a27d:	8b 74 24 40          	mov    esi,DWORD PTR [esp+0x40]
c001a281:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001a285:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c001a289:	56                   	push   esi
c001a28a:	e8 f9 64 fe ff       	call   c0000788 <strlen>
c001a28f:	40                   	inc    eax
c001a290:	89 04 24             	mov    DWORD PTR [esp],eax
c001a293:	e8 10 56 ff ff       	call   c000f8a8 <malloc>
c001a298:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a29b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001a29f:	e8 e4 64 fe ff       	call   c0000788 <strlen>
c001a2a4:	40                   	inc    eax
c001a2a5:	89 04 24             	mov    DWORD PTR [esp],eax
c001a2a8:	e8 fb 55 ff ff       	call   c000f8a8 <malloc>
c001a2ad:	89 34 24             	mov    DWORD PTR [esp],esi
c001a2b0:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a2b4:	e8 cf 64 fe ff       	call   c0000788 <strlen>
c001a2b9:	83 c4 0c             	add    esp,0xc
c001a2bc:	40                   	inc    eax
c001a2bd:	50                   	push   eax
c001a2be:	6a 00                	push   0x0
c001a2c0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001a2c4:	e8 a3 64 fe ff       	call   c000076c <memset>
c001a2c9:	89 34 24             	mov    DWORD PTR [esp],esi
c001a2cc:	e8 b7 64 fe ff       	call   c0000788 <strlen>
c001a2d1:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001a2d5:	8d 48 01             	lea    ecx,[eax+0x1]
c001a2d8:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a2da:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a2dd:	89 ee                	mov    esi,ebp
c001a2df:	e8 a4 64 fe ff       	call   c0000788 <strlen>
c001a2e4:	83 c4 0c             	add    esp,0xc
c001a2e7:	40                   	inc    eax
c001a2e8:	50                   	push   eax
c001a2e9:	6a 00                	push   0x0
c001a2eb:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a2ef:	e8 78 64 fe ff       	call   c000076c <memset>
c001a2f4:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a2f7:	e8 8c 64 fe ff       	call   c0000788 <strlen>
c001a2fc:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001a300:	8d 48 01             	lea    ecx,[eax+0x1]
c001a303:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a305:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a307:	40                   	inc    eax
c001a308:	89 03                	mov    DWORD PTR [ebx],eax
c001a30a:	c1 e0 03             	shl    eax,0x3
c001a30d:	5a                   	pop    edx
c001a30e:	59                   	pop    ecx
c001a30f:	50                   	push   eax
c001a310:	ff 73 04             	push   DWORD PTR [ebx+0x4]
c001a313:	e8 7c 55 ff ff       	call   c000f894 <realloc>
c001a318:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a31c:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a31e:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a321:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a325:	b9 08 00 00 00       	mov    ecx,0x8
c001a32a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a32c:	83 c4 2c             	add    esp,0x2c
c001a32f:	5b                   	pop    ebx
c001a330:	5e                   	pop    esi
c001a331:	5f                   	pop    edi
c001a332:	5d                   	pop    ebp
c001a333:	c3                   	ret    

c001a334 <EnvVarContainer::deleteEnv(char const*)>:
c001a334:	c3                   	ret    
c001a335:	90                   	nop

c001a336 <EnvVarContainer::loadFrom(char const*, char const*)>:
c001a336:	55                   	push   ebp
c001a337:	57                   	push   edi
c001a338:	56                   	push   esi
c001a339:	53                   	push   ebx
c001a33a:	81 ec 38 01 00 00    	sub    esp,0x138
c001a340:	8b 9c 24 4c 01 00 00 	mov    ebx,DWORD PTR [esp+0x14c]
c001a347:	8b b4 24 54 01 00 00 	mov    esi,DWORD PTR [esp+0x154]
c001a34e:	68 14 01 00 00       	push   0x114
c001a353:	e8 50 55 ff ff       	call   c000f8a8 <malloc>
c001a358:	83 c4 0c             	add    esp,0xc
c001a35b:	89 c5                	mov    ebp,eax
c001a35d:	ff 73 08             	push   DWORD PTR [ebx+0x8]
c001a360:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c001a367:	50                   	push   eax
c001a368:	e8 39 90 ff ff       	call   c00133a6 <File::File(char const*, Process*)>
c001a36d:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001a370:	e8 03 93 ff ff       	call   c0013678 <File::exists()>
c001a375:	83 c4 10             	add    esp,0x10
c001a378:	84 c0                	test   al,al
c001a37a:	75 32                	jne    c001a3ae <EnvVarContainer::loadFrom(char const*, char const*)+0x78>
c001a37c:	51                   	push   ecx
c001a37d:	51                   	push   ecx
c001a37e:	6a 12                	push   0x12
c001a380:	55                   	push   ebp
c001a381:	e8 84 90 ff ff       	call   c001340a <File::open(FileOpenMode)>
c001a386:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a389:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001a38c:	89 34 24             	mov    DWORD PTR [esp],esi
c001a38f:	e8 f4 63 fe ff       	call   c0000788 <strlen>
c001a394:	5a                   	pop    edx
c001a395:	31 d2                	xor    edx,edx
c001a397:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a39b:	51                   	push   ecx
c001a39c:	56                   	push   esi
c001a39d:	52                   	push   edx
c001a39e:	50                   	push   eax
c001a39f:	55                   	push   ebp
c001a3a0:	ff d7                	call   edi
c001a3a2:	83 c4 14             	add    esp,0x14
c001a3a5:	55                   	push   ebp
c001a3a6:	e8 bd 90 ff ff       	call   c0013468 <File::close()>
c001a3ab:	83 c4 10             	add    esp,0x10
c001a3ae:	31 f6                	xor    esi,esi
c001a3b0:	50                   	push   eax
c001a3b1:	68 00 01 00 00       	push   0x100
c001a3b6:	6a 00                	push   0x0
c001a3b8:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a3bc:	50                   	push   eax
c001a3bd:	e8 aa 63 fe ff       	call   c000076c <memset>
c001a3c2:	58                   	pop    eax
c001a3c3:	5a                   	pop    edx
c001a3c4:	6a 01                	push   0x1
c001a3c6:	55                   	push   ebp
c001a3c7:	e8 3e 90 ff ff       	call   c001340a <File::open(FileOpenMode)>
c001a3cc:	83 c4 10             	add    esp,0x10
c001a3cf:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a3d7:	83 ec 0c             	sub    esp,0xc
c001a3da:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a3dd:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001a3e1:	51                   	push   ecx
c001a3e2:	8d 54 24 23          	lea    edx,[esp+0x23]
c001a3e6:	52                   	push   edx
c001a3e7:	6a 00                	push   0x0
c001a3e9:	6a 01                	push   0x1
c001a3eb:	55                   	push   ebp
c001a3ec:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001a3ef:	8a 44 24 33          	mov    al,BYTE PTR [esp+0x33]
c001a3f3:	83 c4 20             	add    esp,0x20
c001a3f6:	3c 0d                	cmp    al,0xd
c001a3f8:	0f 84 16 01 00 00    	je     c001a514 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a3fe:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c001a403:	0f 84 fc 00 00 00    	je     c001a505 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a409:	3c 0a                	cmp    al,0xa
c001a40b:	74 13                	je     c001a420 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a40d:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a412:	74 0c                	je     c001a420 <EnvVarContainer::loadFrom(char const*, char const*)+0xea>
c001a414:	81 fe fe 00 00 00    	cmp    esi,0xfe
c001a41a:	0f 8e e5 00 00 00    	jle    c001a505 <EnvVarContainer::loadFrom(char const*, char const*)+0x1cf>
c001a420:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001a424:	83 ec 0c             	sub    esp,0xc
c001a427:	8d 78 01             	lea    edi,[eax+0x1]
c001a42a:	57                   	push   edi
c001a42b:	e8 78 54 ff ff       	call   c000f8a8 <malloc>
c001a430:	2b 74 24 18          	sub    esi,DWORD PTR [esp+0x18]
c001a434:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001a438:	8d 56 04             	lea    edx,[esi+0x4]
c001a43b:	89 14 24             	mov    DWORD PTR [esp],edx
c001a43e:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c001a442:	e8 61 54 ff ff       	call   c000f8a8 <malloc>
c001a447:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001a44b:	83 c4 0c             	add    esp,0xc
c001a44e:	57                   	push   edi
c001a44f:	6a 00                	push   0x0
c001a451:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a455:	e8 12 63 fe ff       	call   c000076c <memset>
c001a45a:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a45e:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c001a462:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001a466:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a468:	83 c4 0c             	add    esp,0xc
c001a46b:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001a46f:	52                   	push   edx
c001a470:	6a 00                	push   0x0
c001a472:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a476:	e8 f1 62 fe ff       	call   c000076c <memset>
c001a47b:	8d 74 24 30          	lea    esi,[esp+0x30]
c001a47f:	03 74 24 18          	add    esi,DWORD PTR [esp+0x18]
c001a483:	89 34 24             	mov    DWORD PTR [esp],esi
c001a486:	e8 fd 62 fe ff       	call   c0000788 <strlen>
c001a48b:	8b 7c 24 2c          	mov    edi,DWORD PTR [esp+0x2c]
c001a48f:	89 c1                	mov    ecx,eax
c001a491:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a493:	5e                   	pop    esi
c001a494:	5f                   	pop    edi
c001a495:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001a499:	68 d5 c3 02 c0       	push   0xc002c3d5
c001a49e:	e8 a4 89 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001a4a3:	8b 03                	mov    eax,DWORD PTR [ebx]
c001a4a5:	8b 53 04             	mov    edx,DWORD PTR [ebx+0x4]
c001a4a8:	40                   	inc    eax
c001a4a9:	83 c4 10             	add    esp,0x10
c001a4ac:	89 03                	mov    DWORD PTR [ebx],eax
c001a4ae:	85 d2                	test   edx,edx
c001a4b0:	75 0c                	jne    c001a4be <EnvVarContainer::loadFrom(char const*, char const*)+0x188>
c001a4b2:	83 ec 0c             	sub    esp,0xc
c001a4b5:	6a 08                	push   0x8
c001a4b7:	e8 ec 53 ff ff       	call   c000f8a8 <malloc>
c001a4bc:	eb 0c                	jmp    c001a4ca <EnvVarContainer::loadFrom(char const*, char const*)+0x194>
c001a4be:	c1 e0 03             	shl    eax,0x3
c001a4c1:	51                   	push   ecx
c001a4c2:	51                   	push   ecx
c001a4c3:	50                   	push   eax
c001a4c4:	52                   	push   edx
c001a4c5:	e8 ca 53 ff ff       	call   c000f894 <realloc>
c001a4ca:	83 c4 10             	add    esp,0x10
c001a4cd:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a4d0:	8b 13                	mov    edx,DWORD PTR [ebx]
c001a4d2:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001a4d5:	8d 74 24 18          	lea    esi,[esp+0x18]
c001a4d9:	8d 7c d0 f8          	lea    edi,[eax+edx*8-0x8]
c001a4dd:	b9 08 00 00 00       	mov    ecx,0x8
c001a4e2:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a4e4:	31 f6                	xor    esi,esi
c001a4e6:	52                   	push   edx
c001a4e7:	68 00 01 00 00       	push   0x100
c001a4ec:	6a 00                	push   0x0
c001a4ee:	8d 44 24 2c          	lea    eax,[esp+0x2c]
c001a4f2:	50                   	push   eax
c001a4f3:	e8 74 62 fe ff       	call   c000076c <memset>
c001a4f8:	83 c4 10             	add    esp,0x10
c001a4fb:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001a503:	eb 0f                	jmp    c001a514 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a505:	3c 3d                	cmp    al,0x3d
c001a507:	74 07                	je     c001a510 <EnvVarContainer::loadFrom(char const*, char const*)+0x1da>
c001a509:	88 44 34 20          	mov    BYTE PTR [esp+esi*1+0x20],al
c001a50d:	46                   	inc    esi
c001a50e:	eb 04                	jmp    c001a514 <EnvVarContainer::loadFrom(char const*, char const*)+0x1de>
c001a510:	89 74 24 08          	mov    DWORD PTR [esp+0x8],esi
c001a514:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001a519:	0f 85 b8 fe ff ff    	jne    c001a3d7 <EnvVarContainer::loadFrom(char const*, char const*)+0xa1>
c001a51f:	50                   	push   eax
c001a520:	50                   	push   eax
c001a521:	ff 33                	push   DWORD PTR [ebx]
c001a523:	68 e3 c3 02 c0       	push   0xc002c3e3
c001a528:	e8 1a 89 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001a52d:	81 c4 3c 01 00 00    	add    esp,0x13c
c001a533:	5b                   	pop    ebx
c001a534:	5e                   	pop    esi
c001a535:	5f                   	pop    edi
c001a536:	5d                   	pop    ebp
c001a537:	c3                   	ret    

c001a538 <EnvVarContainer::__loadSystem()>:
c001a538:	83 ec 10             	sub    esp,0x10
c001a53b:	68 80 e3 02 c0       	push   0xc002e380
c001a540:	68 0e c4 02 c0       	push   0xc002c40e
c001a545:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a549:	e8 e8 fd ff ff       	call   c001a336 <EnvVarContainer::loadFrom(char const*, char const*)>
c001a54e:	83 c4 1c             	add    esp,0x1c
c001a551:	c3                   	ret    

c001a552 <EnvVarContainer::__loadUser()>:
c001a552:	c3                   	ret    
c001a553:	90                   	nop

c001a554 <EnvVarContainer::EnvVarContainer(Process*)>:
c001a554:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a558:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001a55e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a562:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001a566:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c001a569:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a56d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001a574:	90                   	nop
c001a575:	c3                   	ret    

c001a576 <EnvVarContainer::~EnvVarContainer()>:
c001a576:	83 ec 0c             	sub    esp,0xc
c001a579:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a57d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a580:	85 c0                	test   eax,eax
c001a582:	74 1d                	je     c001a5a1 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a584:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a588:	8b 00                	mov    eax,DWORD PTR [eax]
c001a58a:	85 c0                	test   eax,eax
c001a58c:	74 13                	je     c001a5a1 <EnvVarContainer::~EnvVarContainer()+0x2b>
c001a58e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a592:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a595:	83 ec 0c             	sub    esp,0xc
c001a598:	50                   	push   eax
c001a599:	e8 1a 53 ff ff       	call   c000f8b8 <free>
c001a59e:	83 c4 10             	add    esp,0x10
c001a5a1:	90                   	nop
c001a5a2:	83 c4 0c             	add    esp,0xc
c001a5a5:	c3                   	ret    

c001a5a6 <Krnl::getEnv(Process*, char const*)>:
c001a5a6:	53                   	push   ebx
c001a5a7:	83 ec 08             	sub    esp,0x8
c001a5aa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a5ae:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001a5b2:	39 05 b0 23 03 c0    	cmp    DWORD PTR ds:0xc00323b0,eax
c001a5b8:	74 04                	je     c001a5be <Krnl::getEnv(Process*, char const*)+0x18>
c001a5ba:	85 c0                	test   eax,eax
c001a5bc:	75 0b                	jne    c001a5c9 <Krnl::getEnv(Process*, char const*)+0x23>
c001a5be:	a1 94 19 03 c0       	mov    eax,ds:0xc0031994
c001a5c3:	85 c0                	test   eax,eax
c001a5c5:	75 19                	jne    c001a5e0 <Krnl::getEnv(Process*, char const*)+0x3a>
c001a5c7:	eb 27                	jmp    c001a5f0 <Krnl::getEnv(Process*, char const*)+0x4a>
c001a5c9:	52                   	push   edx
c001a5ca:	52                   	push   edx
c001a5cb:	53                   	push   ebx
c001a5cc:	ff b0 3a 07 00 00    	push   DWORD PTR [eax+0x73a]
c001a5d2:	e8 61 fc ff ff       	call   c001a238 <EnvVarContainer::getEnv(char const*)>
c001a5d7:	83 c4 10             	add    esp,0x10
c001a5da:	85 c0                	test   eax,eax
c001a5dc:	75 28                	jne    c001a606 <Krnl::getEnv(Process*, char const*)+0x60>
c001a5de:	eb de                	jmp    c001a5be <Krnl::getEnv(Process*, char const*)+0x18>
c001a5e0:	52                   	push   edx
c001a5e1:	52                   	push   edx
c001a5e2:	53                   	push   ebx
c001a5e3:	50                   	push   eax
c001a5e4:	e8 4f fc ff ff       	call   c001a238 <EnvVarContainer::getEnv(char const*)>
c001a5e9:	83 c4 10             	add    esp,0x10
c001a5ec:	85 c0                	test   eax,eax
c001a5ee:	75 16                	jne    c001a606 <Krnl::getEnv(Process*, char const*)+0x60>
c001a5f0:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001a5f4:	a1 98 19 03 c0       	mov    eax,ds:0xc0031998
c001a5f9:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001a5fd:	83 c4 08             	add    esp,0x8
c001a600:	5b                   	pop    ebx
c001a601:	e9 32 fc ff ff       	jmp    c001a238 <EnvVarContainer::getEnv(char const*)>
c001a606:	83 c4 08             	add    esp,0x8
c001a609:	5b                   	pop    ebx
c001a60a:	c3                   	ret    

c001a60b <Krnl::setEnvSystem(char const*, char const*)>:
c001a60b:	83 ec 10             	sub    esp,0x10
c001a60e:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a612:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a616:	ff 35 98 19 03 c0    	push   DWORD PTR ds:0xc0031998
c001a61c:	e8 55 fc ff ff       	call   c001a276 <EnvVarContainer::setEnv(char const*, char const*)>
c001a621:	83 c4 1c             	add    esp,0x1c
c001a624:	c3                   	ret    

c001a625 <Krnl::setEnvUser(char const*, char const*)>:
c001a625:	a1 94 19 03 c0       	mov    eax,ds:0xc0031994
c001a62a:	85 c0                	test   eax,eax
c001a62c:	74 15                	je     c001a643 <Krnl::setEnvUser(char const*, char const*)+0x1e>
c001a62e:	83 ec 10             	sub    esp,0x10
c001a631:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a635:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001a639:	50                   	push   eax
c001a63a:	e8 37 fc ff ff       	call   c001a276 <EnvVarContainer::setEnv(char const*, char const*)>
c001a63f:	83 c4 1c             	add    esp,0x1c
c001a642:	c3                   	ret    
c001a643:	c3                   	ret    

c001a644 <Krnl::setEnvProcess(Process*, char const*, char const*)>:
c001a644:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a648:	8b 80 3a 07 00 00    	mov    eax,DWORD PTR [eax+0x73a]
c001a64e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001a652:	e9 1f fc ff ff       	jmp    c001a276 <EnvVarContainer::setEnv(char const*, char const*)>

c001a657 <Krnl::deleteEnvSystem(char const*)>:
c001a657:	c3                   	ret    

c001a658 <Krnl::deleteEnvUser(char const*)>:
c001a658:	c3                   	ret    

c001a659 <Krnl::deleteEnvProcess(Process*, char const*)>:
c001a659:	c3                   	ret    

c001a65a <Krnl::newProcessEnv(Process*)>:
c001a65a:	83 ec 28             	sub    esp,0x28
c001a65d:	6a 0c                	push   0xc
c001a65f:	e8 44 52 ff ff       	call   c000f8a8 <malloc>
c001a664:	5a                   	pop    edx
c001a665:	59                   	pop    ecx
c001a666:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001a66a:	50                   	push   eax
c001a66b:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001a66f:	e8 e0 fe ff ff       	call   c001a554 <EnvVarContainer::EnvVarContainer(Process*)>
c001a674:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001a678:	83 c4 2c             	add    esp,0x2c
c001a67b:	c3                   	ret    

c001a67c <Krnl::copyProcessEnv(Process*, Process*)>:
c001a67c:	57                   	push   edi
c001a67d:	56                   	push   esi
c001a67e:	53                   	push   ebx
c001a67f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001a683:	83 ec 0c             	sub    esp,0xc
c001a686:	8b b8 3a 07 00 00    	mov    edi,DWORD PTR [eax+0x73a]
c001a68c:	6a 0c                	push   0xc
c001a68e:	e8 15 52 ff ff       	call   c000f8a8 <malloc>
c001a693:	89 c3                	mov    ebx,eax
c001a695:	58                   	pop    eax
c001a696:	5a                   	pop    edx
c001a697:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001a69b:	53                   	push   ebx
c001a69c:	e8 b3 fe ff ff       	call   c001a554 <EnvVarContainer::EnvVarContainer(Process*)>
c001a6a1:	8b 07                	mov    eax,DWORD PTR [edi]
c001a6a3:	89 03                	mov    DWORD PTR [ebx],eax
c001a6a5:	c1 e0 03             	shl    eax,0x3
c001a6a8:	89 04 24             	mov    DWORD PTR [esp],eax
c001a6ab:	e8 f8 51 ff ff       	call   c000f8a8 <malloc>
c001a6b0:	89 43 04             	mov    DWORD PTR [ebx+0x4],eax
c001a6b3:	8b 0f                	mov    ecx,DWORD PTR [edi]
c001a6b5:	8b 77 04             	mov    esi,DWORD PTR [edi+0x4]
c001a6b8:	c1 e1 03             	shl    ecx,0x3
c001a6bb:	89 c7                	mov    edi,eax
c001a6bd:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001a6bf:	83 c4 10             	add    esp,0x10
c001a6c2:	89 d8                	mov    eax,ebx
c001a6c4:	5b                   	pop    ebx
c001a6c5:	5e                   	pop    esi
c001a6c6:	5f                   	pop    edi
c001a6c7:	c3                   	ret    

c001a6c8 <Krnl::loadSystemEnv()>:
c001a6c8:	53                   	push   ebx
c001a6c9:	83 ec 14             	sub    esp,0x14
c001a6cc:	6a 0c                	push   0xc
c001a6ce:	e8 d5 51 ff ff       	call   c000f8a8 <malloc>
c001a6d3:	89 c3                	mov    ebx,eax
c001a6d5:	58                   	pop    eax
c001a6d6:	5a                   	pop    edx
c001a6d7:	ff 35 b0 23 03 c0    	push   DWORD PTR ds:0xc00323b0
c001a6dd:	53                   	push   ebx
c001a6de:	e8 71 fe ff ff       	call   c001a554 <EnvVarContainer::EnvVarContainer(Process*)>
c001a6e3:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001a6e6:	89 1d 98 19 03 c0    	mov    DWORD PTR ds:0xc0031998,ebx
c001a6ec:	e8 47 fe ff ff       	call   c001a538 <EnvVarContainer::__loadSystem()>
c001a6f1:	83 c4 18             	add    esp,0x18
c001a6f4:	5b                   	pop    ebx
c001a6f5:	c3                   	ret    

c001a6f6 <Krnl::loadUserEnv()>:
c001a6f6:	53                   	push   ebx
c001a6f7:	83 ec 14             	sub    esp,0x14
c001a6fa:	6a 0c                	push   0xc
c001a6fc:	e8 a7 51 ff ff       	call   c000f8a8 <malloc>
c001a701:	89 c3                	mov    ebx,eax
c001a703:	58                   	pop    eax
c001a704:	5a                   	pop    edx
c001a705:	ff 35 b0 23 03 c0    	push   DWORD PTR ds:0xc00323b0
c001a70b:	53                   	push   ebx
c001a70c:	e8 43 fe ff ff       	call   c001a554 <EnvVarContainer::EnvVarContainer(Process*)>
c001a711:	89 1d 94 19 03 c0    	mov    DWORD PTR ds:0xc0031994,ebx
c001a717:	83 c4 18             	add    esp,0x18
c001a71a:	5b                   	pop    ebx
c001a71b:	c3                   	ret    

c001a71c <Krnl::flushEnv()>:
c001a71c:	c3                   	ret    

c001a71d <Krnl::getProcessTotalEnvCount(Process*)>:
c001a71d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001a721:	8b 15 94 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031994
c001a727:	8b 88 3a 07 00 00    	mov    ecx,DWORD PTR [eax+0x73a]
c001a72d:	a1 98 19 03 c0       	mov    eax,ds:0xc0031998
c001a732:	8b 00                	mov    eax,DWORD PTR [eax]
c001a734:	03 01                	add    eax,DWORD PTR [ecx]
c001a736:	85 d2                	test   edx,edx
c001a738:	74 02                	je     c001a73c <Krnl::getProcessTotalEnvCount(Process*)+0x1f>
c001a73a:	03 02                	add    eax,DWORD PTR [edx]
c001a73c:	c3                   	ret    

c001a73d <Krnl::getProcessEnvPair(Process*, int)>:
c001a73d:	57                   	push   edi
c001a73e:	8b 0d 94 19 03 c0    	mov    ecx,DWORD PTR ds:0xc0031994
c001a744:	56                   	push   esi
c001a745:	85 c9                	test   ecx,ecx
c001a747:	53                   	push   ebx
c001a748:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001a74c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001a750:	8b 97 3a 07 00 00    	mov    edx,DWORD PTR [edi+0x73a]
c001a756:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c001a75a:	8b 02                	mov    eax,DWORD PTR [edx]
c001a75c:	75 47                	jne    c001a7a5 <Krnl::getProcessEnvPair(Process*, int)+0x68>
c001a75e:	39 c3                	cmp    ebx,eax
c001a760:	7c 47                	jl     c001a7a9 <Krnl::getProcessEnvPair(Process*, int)+0x6c>
c001a762:	8b 15 98 19 03 c0    	mov    edx,DWORD PTR ds:0xc0031998
c001a768:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001a76a:	01 c1                	add    ecx,eax
c001a76c:	39 d9                	cmp    ecx,ebx
c001a76e:	7e 6c                	jle    c001a7dc <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a770:	51                   	push   ecx
c001a771:	89 d9                	mov    ecx,ebx
c001a773:	29 c1                	sub    ecx,eax
c001a775:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a778:	ff 74 c8 04          	push   DWORD PTR [eax+ecx*8+0x4]
c001a77c:	53                   	push   ebx
c001a77d:	68 30 c4 02 c0       	push   0xc002c430
c001a782:	e8 c0 86 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001a787:	8b 87 3a 07 00 00    	mov    eax,DWORD PTR [edi+0x73a]
c001a78d:	2b 18                	sub    ebx,DWORD PTR [eax]
c001a78f:	a1 98 19 03 c0       	mov    eax,ds:0xc0031998
c001a794:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c001a797:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a79b:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a79e:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a7a1:	89 06                	mov    DWORD PTR [esi],eax
c001a7a3:	eb 51                	jmp    c001a7f6 <Krnl::getProcessEnvPair(Process*, int)+0xb9>
c001a7a5:	39 c3                	cmp    ebx,eax
c001a7a7:	7d 05                	jge    c001a7ae <Krnl::getProcessEnvPair(Process*, int)+0x71>
c001a7a9:	8b 42 04             	mov    eax,DWORD PTR [edx+0x4]
c001a7ac:	eb 20                	jmp    c001a7ce <Krnl::getProcessEnvPair(Process*, int)+0x91>
c001a7ae:	8b 39                	mov    edi,DWORD PTR [ecx]
c001a7b0:	8d 14 07             	lea    edx,[edi+eax*1]
c001a7b3:	39 da                	cmp    edx,ebx
c001a7b5:	7e 04                	jle    c001a7bb <Krnl::getProcessEnvPair(Process*, int)+0x7e>
c001a7b7:	29 c3                	sub    ebx,eax
c001a7b9:	eb 10                	jmp    c001a7cb <Krnl::getProcessEnvPair(Process*, int)+0x8e>
c001a7bb:	8b 0d 98 19 03 c0    	mov    ecx,DWORD PTR ds:0xc0031998
c001a7c1:	03 11                	add    edx,DWORD PTR [ecx]
c001a7c3:	39 da                	cmp    edx,ebx
c001a7c5:	7e 15                	jle    c001a7dc <Krnl::getProcessEnvPair(Process*, int)+0x9f>
c001a7c7:	29 c3                	sub    ebx,eax
c001a7c9:	29 fb                	sub    ebx,edi
c001a7cb:	8b 41 04             	mov    eax,DWORD PTR [ecx+0x4]
c001a7ce:	8b 54 d8 04          	mov    edx,DWORD PTR [eax+ebx*8+0x4]
c001a7d2:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001a7d5:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c001a7d8:	89 06                	mov    DWORD PTR [esi],eax
c001a7da:	eb 1d                	jmp    c001a7f9 <Krnl::getProcessEnvPair(Process*, int)+0xbc>
c001a7dc:	83 ec 0c             	sub    esp,0xc
c001a7df:	68 44 c4 02 c0       	push   0xc002c444
c001a7e4:	e8 18 00 00 00       	call   c001a801 <Krnl::panic(char const*)>
c001a7e9:	c7 06 00 00 00 00    	mov    DWORD PTR [esi],0x0
c001a7ef:	c7 46 04 00 00 00 00 	mov    DWORD PTR [esi+0x4],0x0
c001a7f6:	83 c4 10             	add    esp,0x10
c001a7f9:	89 f0                	mov    eax,esi
c001a7fb:	5b                   	pop    ebx
c001a7fc:	5e                   	pop    esi
c001a7fd:	5f                   	pop    edi
c001a7fe:	c2 04 00             	ret    0x4

c001a801 <Krnl::panic(char const*)>:
c001a801:	55                   	push   ebp
c001a802:	89 e5                	mov    ebp,esp
c001a804:	53                   	push   ebx
c001a805:	83 ec 0c             	sub    esp,0xc
c001a808:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c001a80b:	fa                   	cli    
c001a80c:	c6 05 a4 19 03 c0 01 	mov    BYTE PTR ds:0xc00319a4,0x1
c001a813:	53                   	push   ebx
c001a814:	c6 05 84 dd 02 c0 00 	mov    BYTE PTR ds:0xc002dd84,0x0
c001a81b:	68 5e c4 02 c0       	push   0xc002c45e
c001a820:	e8 22 86 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001a825:	58                   	pop    eax
c001a826:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a82b:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a831:	e8 34 64 ff ff       	call   c0010c6a <setActiveTerminal(VgaText*)>
c001a836:	83 c4 0c             	add    esp,0xc
c001a839:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a83e:	6a 01                	push   0x1
c001a840:	6a 0f                	push   0xf
c001a842:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a848:	e8 bb 5e ff ff       	call   c0010708 <VgaText::setDefaultColours(VgaColour, VgaColour)>
c001a84d:	58                   	pop    eax
c001a84e:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a853:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a859:	e8 52 66 ff ff       	call   c0010eb0 <VgaText::clearScreen()>
c001a85e:	58                   	pop    eax
c001a85f:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a864:	5a                   	pop    edx
c001a865:	68 77 c4 02 c0       	push   0xc002c477
c001a86a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a870:	e8 81 67 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001a875:	59                   	pop    ecx
c001a876:	58                   	pop    eax
c001a877:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a87c:	68 1c c5 02 c0       	push   0xc002c51c
c001a881:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a887:	e8 6a 67 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001a88c:	58                   	pop    eax
c001a88d:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a892:	5a                   	pop    edx
c001a893:	68 93 c4 02 c0       	push   0xc002c493
c001a898:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a89e:	e8 53 67 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001a8a3:	59                   	pop    ecx
c001a8a4:	58                   	pop    eax
c001a8a5:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a8aa:	53                   	push   ebx
c001a8ab:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8b1:	e8 40 67 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001a8b6:	58                   	pop    eax
c001a8b7:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a8bc:	5a                   	pop    edx
c001a8bd:	68 b3 c4 02 c0       	push   0xc002c4b3
c001a8c2:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a8c8:	e8 29 67 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001a8cd:	a1 a0 19 03 c0       	mov    eax,ds:0xc00319a0
c001a8d2:	83 c4 10             	add    esp,0x10
c001a8d5:	85 c0                	test   eax,eax
c001a8d7:	74 02                	je     c001a8db <Krnl::panic(char const*)+0xda>
c001a8d9:	ff d0                	call   eax
c001a8db:	83 ec 0c             	sub    esp,0xc
c001a8de:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a8e1:	e8 7a 31 00 00       	call   c001da60 <Thr::getDriverNameFromAddress(unsigned long)>
c001a8e6:	83 c4 10             	add    esp,0x10
c001a8e9:	89 c3                	mov    ebx,eax
c001a8eb:	85 c0                	test   eax,eax
c001a8ed:	0f 84 50 02 00 00    	je     c001ab43 <Krnl::panic(char const*)+0x342>
c001a8f3:	83 ec 08             	sub    esp,0x8
c001a8f6:	8b 15 b0 23 03 c0    	mov    edx,DWORD PTR ds:0xc00323b0
c001a8fc:	68 58 c5 02 c0       	push   0xc002c558
c001a901:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a907:	e8 ea 66 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001a90c:	58                   	pop    eax
c001a90d:	5a                   	pop    edx
c001a90e:	8b 15 b0 23 03 c0    	mov    edx,DWORD PTR ds:0xc00323b0
c001a914:	68 93 c4 02 c0       	push   0xc002c493
c001a919:	ff b2 26 05 00 00    	push   DWORD PTR [edx+0x526]
c001a91f:	e8 d2 66 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001a924:	59                   	pop    ecx
c001a925:	58                   	pop    eax
c001a926:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a92b:	53                   	push   ebx
c001a92c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a932:	e8 bf 66 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001a937:	83 c4 10             	add    esp,0x10
c001a93a:	83 ec 08             	sub    esp,0x8
c001a93d:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a942:	68 b2 c4 02 c0       	push   0xc002c4b2
c001a947:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a94d:	e8 a4 66 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001a952:	58                   	pop    eax
c001a953:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a958:	5a                   	pop    edx
c001a959:	68 b0 c5 02 c0       	push   0xc002c5b0
c001a95e:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a964:	e8 8d 66 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001a969:	59                   	pop    ecx
c001a96a:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a96f:	5b                   	pop    ebx
c001a970:	68 f0 c5 02 c0       	push   0xc002c5f0
c001a975:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a97b:	e8 76 66 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001a980:	58                   	pop    eax
c001a981:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a986:	5a                   	pop    edx
c001a987:	68 9e c4 02 c0       	push   0xc002c49e
c001a98c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a992:	e8 5f 66 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001a997:	59                   	pop    ecx
c001a998:	5b                   	pop    ebx
c001a999:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001a99c:	68 b6 c4 02 c0       	push   0xc002c4b6
c001a9a1:	e8 a1 84 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001a9a6:	58                   	pop    eax
c001a9a7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a9aa:	5a                   	pop    edx
c001a9ab:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a9ae:	68 bf c4 02 c0       	push   0xc002c4bf
c001a9b3:	e8 8f 84 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001a9b8:	59                   	pop    ecx
c001a9b9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001a9bc:	5b                   	pop    ebx
c001a9bd:	8b 00                	mov    eax,DWORD PTR [eax]
c001a9bf:	ff 70 04             	push   DWORD PTR [eax+0x4]
c001a9c2:	68 c8 c4 02 c0       	push   0xc002c4c8
c001a9c7:	e8 7b 84 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001a9cc:	58                   	pop    eax
c001a9cd:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a9d2:	5a                   	pop    edx
c001a9d3:	68 34 c6 02 c0       	push   0xc002c634
c001a9d8:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9de:	e8 13 66 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001a9e3:	59                   	pop    ecx
c001a9e4:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001a9e9:	5b                   	pop    ebx
c001a9ea:	68 d1 c4 02 c0       	push   0xc002c4d1
c001a9ef:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001a9f5:	e8 fc 65 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001a9fa:	0f 20 c0             	mov    eax,cr0
c001a9fd:	5a                   	pop    edx
c001a9fe:	59                   	pop    ecx
c001a9ff:	50                   	push   eax
c001aa00:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001aa05:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa0b:	e8 0c 66 ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c001aa10:	5b                   	pop    ebx
c001aa11:	58                   	pop    eax
c001aa12:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001aa17:	68 db c4 02 c0       	push   0xc002c4db
c001aa1c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa22:	e8 cf 65 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001aa27:	0f 20 d0             	mov    eax,cr2
c001aa2a:	5a                   	pop    edx
c001aa2b:	59                   	pop    ecx
c001aa2c:	50                   	push   eax
c001aa2d:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001aa32:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa38:	e8 df 65 ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c001aa3d:	5b                   	pop    ebx
c001aa3e:	58                   	pop    eax
c001aa3f:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001aa44:	68 e5 c4 02 c0       	push   0xc002c4e5
c001aa49:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa4f:	e8 a2 65 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001aa54:	0f 20 d8             	mov    eax,cr3
c001aa57:	5a                   	pop    edx
c001aa58:	59                   	pop    ecx
c001aa59:	50                   	push   eax
c001aa5a:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001aa5f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa65:	e8 b2 65 ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c001aa6a:	5b                   	pop    ebx
c001aa6b:	58                   	pop    eax
c001aa6c:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001aa71:	68 f8 c4 02 c0       	push   0xc002c4f8
c001aa76:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa7c:	e8 75 65 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001aa81:	0f 20 e0             	mov    eax,cr4
c001aa84:	5a                   	pop    edx
c001aa85:	59                   	pop    ecx
c001aa86:	50                   	push   eax
c001aa87:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001aa8c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aa92:	e8 85 65 ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c001aa97:	5b                   	pop    ebx
c001aa98:	58                   	pop    eax
c001aa99:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001aa9e:	68 02 c5 02 c0       	push   0xc002c502
c001aaa3:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aaa9:	e8 48 65 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001aaae:	5a                   	pop    edx
c001aaaf:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001aab4:	59                   	pop    ecx
c001aab5:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001aabb:	ff 75 04             	push   DWORD PTR [ebp+0x4]
c001aabe:	50                   	push   eax
c001aabf:	e8 58 65 ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c001aac4:	5b                   	pop    ebx
c001aac5:	58                   	pop    eax
c001aac6:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001aacb:	68 19 c5 02 c0       	push   0xc002c519
c001aad0:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001aad6:	e8 1b 65 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001aadb:	5a                   	pop    edx
c001aadc:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001aae1:	59                   	pop    ecx
c001aae2:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001aae8:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001aaeb:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001aaee:	50                   	push   eax
c001aaef:	e8 28 65 ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c001aaf4:	5b                   	pop    ebx
c001aaf5:	58                   	pop    eax
c001aaf6:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001aafb:	68 19 c5 02 c0       	push   0xc002c519
c001ab00:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab06:	e8 eb 64 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001ab0b:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001ab10:	8b 55 00             	mov    edx,DWORD PTR [ebp+0x0]
c001ab13:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ab19:	8b 12                	mov    edx,DWORD PTR [edx]
c001ab1b:	59                   	pop    ecx
c001ab1c:	5b                   	pop    ebx
c001ab1d:	ff 72 04             	push   DWORD PTR [edx+0x4]
c001ab20:	50                   	push   eax
c001ab21:	e8 f6 64 ff ff       	call   c001101c <VgaText::putx(unsigned int)>
c001ab26:	83 c4 10             	add    esp,0x10
c001ab29:	b2 fe                	mov    dl,0xfe
c001ab2b:	e4 60                	in     al,0x60
c001ab2d:	3c 1c                	cmp    al,0x1c
c001ab2f:	74 04                	je     c001ab35 <Krnl::panic(char const*)+0x334>
c001ab31:	3c 5a                	cmp    al,0x5a
c001ab33:	75 f6                	jne    c001ab2b <Krnl::panic(char const*)+0x32a>
c001ab35:	e4 64                	in     al,0x64
c001ab37:	a8 02                	test   al,0x2
c001ab39:	75 fa                	jne    c001ab35 <Krnl::panic(char const*)+0x334>
c001ab3b:	88 d0                	mov    al,dl
c001ab3d:	e6 64                	out    0x64,al
c001ab3f:	fa                   	cli    
c001ab40:	f4                   	hlt    
c001ab41:	eb e8                	jmp    c001ab2b <Krnl::panic(char const*)+0x32a>
c001ab43:	50                   	push   eax
c001ab44:	50                   	push   eax
c001ab45:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001ab4a:	68 84 c5 02 c0       	push   0xc002c584
c001ab4f:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab55:	e8 9c 64 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001ab5a:	58                   	pop    eax
c001ab5b:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001ab60:	5a                   	pop    edx
c001ab61:	68 93 c4 02 c0       	push   0xc002c493
c001ab66:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab6c:	e8 85 64 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001ab71:	59                   	pop    ecx
c001ab72:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ab77:	5b                   	pop    ebx
c001ab78:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ab7b:	83 c0 0c             	add    eax,0xc
c001ab7e:	50                   	push   eax
c001ab7f:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001ab84:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001ab8a:	e8 67 64 ff ff       	call   c0010ff6 <VgaText::puts(char const*)>
c001ab8f:	83 c4 10             	add    esp,0x10
c001ab92:	e9 a3 fd ff ff       	jmp    c001a93a <Krnl::panic(char const*)+0x139>

c001ab97 <Net::switchEndian16(unsigned short)>:
c001ab97:	83 ec 04             	sub    esp,0x4
c001ab9a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ab9e:	66 89 04 24          	mov    WORD PTR [esp],ax
c001aba2:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001aba6:	c1 f8 08             	sar    eax,0x8
c001aba9:	89 c2                	mov    edx,eax
c001abab:	0f b7 04 24          	movzx  eax,WORD PTR [esp]
c001abaf:	c1 e0 08             	shl    eax,0x8
c001abb2:	09 d0                	or     eax,edx
c001abb4:	83 c4 04             	add    esp,0x4
c001abb7:	c3                   	ret    

c001abb8 <Net::switchEndian32(unsigned int)>:
c001abb8:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abbc:	c1 e8 18             	shr    eax,0x18
c001abbf:	89 c2                	mov    edx,eax
c001abc1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abc5:	c1 e0 08             	shl    eax,0x8
c001abc8:	25 00 00 ff 00       	and    eax,0xff0000
c001abcd:	09 c2                	or     edx,eax
c001abcf:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abd3:	c1 e8 08             	shr    eax,0x8
c001abd6:	25 00 ff 00 00       	and    eax,0xff00
c001abdb:	09 c2                	or     edx,eax
c001abdd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001abe1:	c1 e0 18             	shl    eax,0x18
c001abe4:	09 d0                	or     eax,edx
c001abe6:	c3                   	ret    

c001abe7 <Net::crc32Calc(unsigned char*, int)>:
c001abe7:	83 ec 10             	sub    esp,0x10
c001abea:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c001abef:	75 07                	jne    c001abf8 <Net::crc32Calc(unsigned char*, int)+0x11>
c001abf1:	b8 00 00 00 00       	mov    eax,0x0
c001abf6:	eb 7c                	jmp    c001ac74 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001abf8:	83 7c 24 18 00       	cmp    DWORD PTR [esp+0x18],0x0
c001abfd:	7f 07                	jg     c001ac06 <Net::crc32Calc(unsigned char*, int)+0x1f>
c001abff:	b8 00 00 00 00       	mov    eax,0x0
c001ac04:	eb 6e                	jmp    c001ac74 <Net::crc32Calc(unsigned char*, int)+0x8d>
c001ac06:	c7 44 24 04 ff ff ff ff 	mov    DWORD PTR [esp+0x4],0xffffffff
c001ac0e:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001ac16:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ac1a:	3b 44 24 18          	cmp    eax,DWORD PTR [esp+0x18]
c001ac1e:	7d 4e                	jge    c001ac6e <Net::crc32Calc(unsigned char*, int)+0x87>
c001ac20:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ac24:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001ac28:	01 d0                	add    eax,edx
c001ac2a:	8a 00                	mov    al,BYTE PTR [eax]
c001ac2c:	0f b6 c0             	movzx  eax,al
c001ac2f:	31 44 24 04          	xor    DWORD PTR [esp+0x4],eax
c001ac33:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001ac3b:	83 7c 24 0c 07       	cmp    DWORD PTR [esp+0xc],0x7
c001ac40:	7f 26                	jg     c001ac68 <Net::crc32Calc(unsigned char*, int)+0x81>
c001ac42:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac46:	83 e0 01             	and    eax,0x1
c001ac49:	74 0d                	je     c001ac58 <Net::crc32Calc(unsigned char*, int)+0x71>
c001ac4b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac4f:	d1 e8                	shr    eax,1
c001ac51:	35 20 83 b8 ed       	xor    eax,0xedb88320
c001ac56:	eb 06                	jmp    c001ac5e <Net::crc32Calc(unsigned char*, int)+0x77>
c001ac58:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac5c:	d1 e8                	shr    eax,1
c001ac5e:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001ac62:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c001ac66:	eb d3                	jmp    c001ac3b <Net::crc32Calc(unsigned char*, int)+0x54>
c001ac68:	ff 44 24 08          	inc    DWORD PTR [esp+0x8]
c001ac6c:	eb a8                	jmp    c001ac16 <Net::crc32Calc(unsigned char*, int)+0x2f>
c001ac6e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ac72:	f7 d0                	not    eax
c001ac74:	83 c4 10             	add    esp,0x10
c001ac77:	c3                   	ret    

c001ac78 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)>:
c001ac78:	57                   	push   edi
c001ac79:	56                   	push   esi
c001ac7a:	83 ec 40             	sub    esp,0x40
c001ac7d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ac81:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001ac85:	c7 44 24 3c 00 00 00 00 	mov    DWORD PTR [esp+0x3c],0x0
c001ac8d:	83 7c 24 3c 06       	cmp    DWORD PTR [esp+0x3c],0x6
c001ac92:	7f 14                	jg     c001aca8 <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x30>
c001ac94:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ac98:	8d 50 01             	lea    edx,[eax+0x1]
c001ac9b:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001ac9f:	c6 00 aa             	mov    BYTE PTR [eax],0xaa
c001aca2:	ff 44 24 3c          	inc    DWORD PTR [esp+0x3c]
c001aca6:	eb e5                	jmp    c001ac8d <Net::wrapEthernetFrame(Net::UnwrappedEthernetFrame, unsigned char*)+0x15>
c001aca8:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001acac:	8d 50 01             	lea    edx,[eax+0x1]
c001acaf:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001acb3:	c6 00 ab             	mov    BYTE PTR [eax],0xab
c001acb6:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001acba:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001acbe:	8d 44 24 5a          	lea    eax,[esp+0x5a]
c001acc2:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001acc6:	c7 44 24 08 06 00 00 00 	mov    DWORD PTR [esp+0x8],0x6
c001acce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001acd2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001acd6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001acda:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001acde:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001ace2:	89 c6                	mov    esi,eax
c001ace4:	89 d7                	mov    edi,edx
c001ace6:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ace8:	83 44 24 64 06       	add    DWORD PTR [esp+0x64],0x6
c001aced:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001acf1:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001acf5:	8d 44 24 54          	lea    eax,[esp+0x54]
c001acf9:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001acfd:	c7 44 24 18 06 00 00 00 	mov    DWORD PTR [esp+0x18],0x6
c001ad05:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ad09:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ad0d:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ad11:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ad15:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ad19:	89 c6                	mov    esi,eax
c001ad1b:	89 d7                	mov    edi,edx
c001ad1d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad1f:	83 44 24 64 06       	add    DWORD PTR [esp+0x64],0x6
c001ad24:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001ad28:	0f b7 c0             	movzx  eax,ax
c001ad2b:	c1 f8 08             	sar    eax,0x8
c001ad2e:	89 c1                	mov    ecx,eax
c001ad30:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ad34:	8d 50 01             	lea    edx,[eax+0x1]
c001ad37:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001ad3b:	88 ca                	mov    dl,cl
c001ad3d:	88 10                	mov    BYTE PTR [eax],dl
c001ad3f:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001ad43:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ad47:	8d 48 01             	lea    ecx,[eax+0x1]
c001ad4a:	89 4c 24 64          	mov    DWORD PTR [esp+0x64],ecx
c001ad4e:	88 10                	mov    BYTE PTR [eax],dl
c001ad50:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ad54:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001ad58:	8b 4c 24 64          	mov    ecx,DWORD PTR [esp+0x64]
c001ad5c:	89 4c 24 30          	mov    DWORD PTR [esp+0x30],ecx
c001ad60:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001ad64:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ad68:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ad6c:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ad70:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ad74:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ad78:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ad7c:	89 c6                	mov    esi,eax
c001ad7e:	89 d7                	mov    edi,edx
c001ad80:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ad82:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ad86:	01 44 24 64          	add    DWORD PTR [esp+0x64],eax
c001ad8a:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ad8e:	2b 44 24 38          	sub    eax,DWORD PTR [esp+0x38]
c001ad92:	50                   	push   eax
c001ad93:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001ad97:	e8 4b fe ff ff       	call   c001abe7 <Net::crc32Calc(unsigned char*, int)>
c001ad9c:	83 c4 08             	add    esp,0x8
c001ad9f:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001ada3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001ada7:	c1 e8 18             	shr    eax,0x18
c001adaa:	89 c1                	mov    ecx,eax
c001adac:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001adb0:	8d 50 01             	lea    edx,[eax+0x1]
c001adb3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001adb7:	88 ca                	mov    dl,cl
c001adb9:	88 10                	mov    BYTE PTR [eax],dl
c001adbb:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001adbf:	c1 e8 10             	shr    eax,0x10
c001adc2:	89 c1                	mov    ecx,eax
c001adc4:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001adc8:	8d 50 01             	lea    edx,[eax+0x1]
c001adcb:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001adcf:	88 ca                	mov    dl,cl
c001add1:	88 10                	mov    BYTE PTR [eax],dl
c001add3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001add7:	c1 e8 08             	shr    eax,0x8
c001adda:	89 c1                	mov    ecx,eax
c001addc:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ade0:	8d 50 01             	lea    edx,[eax+0x1]
c001ade3:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001ade7:	88 ca                	mov    dl,cl
c001ade9:	88 10                	mov    BYTE PTR [eax],dl
c001adeb:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001adef:	8d 50 01             	lea    edx,[eax+0x1]
c001adf2:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001adf6:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001adfa:	88 10                	mov    BYTE PTR [eax],dl
c001adfc:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c001ae00:	83 c4 40             	add    esp,0x40
c001ae03:	5e                   	pop    esi
c001ae04:	5f                   	pop    edi
c001ae05:	c3                   	ret    

c001ae06 <Net::unwrapEthernetFrame(unsigned char*, int)>:
c001ae06:	57                   	push   edi
c001ae07:	56                   	push   esi
c001ae08:	83 ec 54             	sub    esp,0x54
c001ae0b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ae0f:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c001ae13:	83 44 24 64 08       	add    DWORD PTR [esp+0x64],0x8
c001ae18:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001ae1c:	83 c0 0e             	add    eax,0xe
c001ae1f:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ae23:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ae27:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ae2b:	c7 44 24 18 06 00 00 00 	mov    DWORD PTR [esp+0x18],0x6
c001ae33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001ae37:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001ae3b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001ae3f:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ae43:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c001ae47:	89 c6                	mov    esi,eax
c001ae49:	89 d7                	mov    edi,edx
c001ae4b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae4d:	83 44 24 64 06       	add    DWORD PTR [esp+0x64],0x6
c001ae52:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001ae56:	83 c0 08             	add    eax,0x8
c001ae59:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001ae5d:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ae61:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001ae65:	c7 44 24 28 06 00 00 00 	mov    DWORD PTR [esp+0x28],0x6
c001ae6d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001ae71:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001ae75:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001ae79:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001ae7d:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001ae81:	89 c6                	mov    esi,eax
c001ae83:	89 d7                	mov    edi,edx
c001ae85:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ae87:	83 44 24 64 06       	add    DWORD PTR [esp+0x64],0x6
c001ae8c:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001ae90:	8d 50 01             	lea    edx,[eax+0x1]
c001ae93:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001ae97:	8a 00                	mov    al,BYTE PTR [eax]
c001ae99:	0f b6 c0             	movzx  eax,al
c001ae9c:	66 89 44 24 4a       	mov    WORD PTR [esp+0x4a],ax
c001aea1:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001aea5:	8d 50 01             	lea    edx,[eax+0x1]
c001aea8:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001aeac:	8a 00                	mov    al,BYTE PTR [eax]
c001aeae:	0f b6 c0             	movzx  eax,al
c001aeb1:	66 89 44 24 48       	mov    WORD PTR [esp+0x48],ax
c001aeb6:	0f b7 44 24 4a       	movzx  eax,WORD PTR [esp+0x4a]
c001aebb:	c1 e0 08             	shl    eax,0x8
c001aebe:	89 c2                	mov    edx,eax
c001aec0:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c001aec4:	09 d0                	or     eax,edx
c001aec6:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001aeca:	66 89 42 14          	mov    WORD PTR [edx+0x14],ax
c001aece:	83 7c 24 68 ff       	cmp    DWORD PTR [esp+0x68],0xffffffff
c001aed3:	75 3a                	jne    c001af0f <Net::unwrapEthernetFrame(unsigned char*, int)+0x109>
c001aed5:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001aed9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aedc:	66 3d dc 05          	cmp    ax,0x5dc
c001aee0:	77 10                	ja     c001aef2 <Net::unwrapEthernetFrame(unsigned char*, int)+0xec>
c001aee2:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001aee6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c001aee9:	0f b7 c0             	movzx  eax,ax
c001aeec:	89 44 24 68          	mov    DWORD PTR [esp+0x68],eax
c001aef0:	eb 1d                	jmp    c001af0f <Net::unwrapEthernetFrame(unsigned char*, int)+0x109>
c001aef2:	83 ec 0c             	sub    esp,0xc
c001aef5:	68 5c c6 02 c0       	push   0xc002c65c
c001aefa:	e8 48 7f ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001aeff:	83 c4 10             	add    esp,0x10
c001af02:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001af06:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
c001af0a:	e9 d9 00 00 00       	jmp    c001afe8 <Net::unwrapEthernetFrame(unsigned char*, int)+0x1e2>
c001af0f:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001af13:	8b 54 24 60          	mov    edx,DWORD PTR [esp+0x60]
c001af17:	8b 12                	mov    edx,DWORD PTR [edx]
c001af19:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001af1d:	8b 54 24 64          	mov    edx,DWORD PTR [esp+0x64]
c001af21:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001af25:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001af29:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001af2d:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001af31:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001af35:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001af39:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001af3d:	89 c6                	mov    esi,eax
c001af3f:	89 d7                	mov    edi,edx
c001af41:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001af43:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c001af47:	01 44 24 64          	add    DWORD PTR [esp+0x64],eax
c001af4b:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001af4f:	8d 50 01             	lea    edx,[eax+0x1]
c001af52:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001af56:	8a 00                	mov    al,BYTE PTR [eax]
c001af58:	0f b6 c0             	movzx  eax,al
c001af5b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001af5f:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001af63:	8d 50 01             	lea    edx,[eax+0x1]
c001af66:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001af6a:	8a 00                	mov    al,BYTE PTR [eax]
c001af6c:	0f b6 c0             	movzx  eax,al
c001af6f:	89 44 24 40          	mov    DWORD PTR [esp+0x40],eax
c001af73:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001af77:	8d 50 01             	lea    edx,[eax+0x1]
c001af7a:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001af7e:	8a 00                	mov    al,BYTE PTR [eax]
c001af80:	0f b6 c0             	movzx  eax,al
c001af83:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001af87:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001af8b:	8d 50 01             	lea    edx,[eax+0x1]
c001af8e:	89 54 24 64          	mov    DWORD PTR [esp+0x64],edx
c001af92:	8a 00                	mov    al,BYTE PTR [eax]
c001af94:	0f b6 c0             	movzx  eax,al
c001af97:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001af9b:	8b 44 24 44          	mov    eax,DWORD PTR [esp+0x44]
c001af9f:	c1 e0 18             	shl    eax,0x18
c001afa2:	89 c2                	mov    edx,eax
c001afa4:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c001afa8:	c1 e0 10             	shl    eax,0x10
c001afab:	09 c2                	or     edx,eax
c001afad:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c001afb1:	c1 e0 08             	shl    eax,0x8
c001afb4:	09 d0                	or     eax,edx
c001afb6:	0b 44 24 38          	or     eax,DWORD PTR [esp+0x38]
c001afba:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001afbe:	8b 44 24 64          	mov    eax,DWORD PTR [esp+0x64]
c001afc2:	2b 44 24 4c          	sub    eax,DWORD PTR [esp+0x4c]
c001afc6:	83 e8 04             	sub    eax,0x4
c001afc9:	83 ec 08             	sub    esp,0x8
c001afcc:	50                   	push   eax
c001afcd:	ff 74 24 58          	push   DWORD PTR [esp+0x58]
c001afd1:	e8 11 fc ff ff       	call   c001abe7 <Net::crc32Calc(unsigned char*, int)>
c001afd6:	83 c4 10             	add    esp,0x10
c001afd9:	39 44 24 34          	cmp    DWORD PTR [esp+0x34],eax
c001afdd:	0f 94 c2             	sete   dl
c001afe0:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001afe4:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
c001afe7:	90                   	nop
c001afe8:	8b 44 24 60          	mov    eax,DWORD PTR [esp+0x60]
c001afec:	83 c4 54             	add    esp,0x54
c001afef:	5e                   	pop    esi
c001aff0:	5f                   	pop    edi
c001aff1:	c2 04 00             	ret    0x4

c001aff4 <Reg::findLineFromLoadedData(char*, char*, char*)>:
c001aff4:	55                   	push   ebp
c001aff5:	57                   	push   edi
c001aff6:	56                   	push   esi
c001aff7:	53                   	push   ebx
c001aff8:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001affe:	8b b4 24 44 01 00 00 	mov    esi,DWORD PTR [esp+0x144]
c001b005:	8a 1e                	mov    bl,BYTE PTR [esi]
c001b007:	8d 6e 01             	lea    ebp,[esi+0x1]
c001b00a:	80 fb 40             	cmp    bl,0x40
c001b00d:	75 1b                	jne    c001b02a <Reg::findLineFromLoadedData(char*, char*, char*)+0x36>
c001b00f:	8a 16                	mov    dl,BYTE PTR [esi]
c001b011:	84 d2                	test   dl,dl
c001b013:	0f 84 f1 00 00 00    	je     c001b10a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b019:	8d 46 01             	lea    eax,[esi+0x1]
c001b01c:	80 fa 3a             	cmp    dl,0x3a
c001b01f:	74 04                	je     c001b025 <Reg::findLineFromLoadedData(char*, char*, char*)+0x31>
c001b021:	89 c6                	mov    esi,eax
c001b023:	eb ea                	jmp    c001b00f <Reg::findLineFromLoadedData(char*, char*, char*)+0x1b>
c001b025:	c6 06 00             	mov    BYTE PTR [esi],0x0
c001b028:	89 c6                	mov    esi,eax
c001b02a:	50                   	push   eax
c001b02b:	6a 40                	push   0x40
c001b02d:	6a 00                	push   0x0
c001b02f:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b033:	50                   	push   eax
c001b034:	e8 33 57 fe ff       	call   c000076c <memset>
c001b039:	8b bc 24 50 01 00 00 	mov    edi,DWORD PTR [esp+0x150]
c001b040:	31 c0                	xor    eax,eax
c001b042:	83 c4 10             	add    esp,0x10
c001b045:	8a 0f                	mov    cl,BYTE PTR [edi]
c001b047:	84 c9                	test   cl,cl
c001b049:	0f 84 bb 00 00 00    	je     c001b10a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b04f:	3d c7 00 00 00       	cmp    eax,0xc7
c001b054:	0f 8f b0 00 00 00    	jg     c001b10a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b05a:	80 f9 0a             	cmp    cl,0xa
c001b05d:	0f 85 98 00 00 00    	jne    c001b0fb <Reg::findLineFromLoadedData(char*, char*, char*)+0x107>
c001b063:	c6 44 04 58 00       	mov    BYTE PTR [esp+eax*1+0x58],0x0
c001b068:	8a 44 24 58          	mov    al,BYTE PTR [esp+0x58]
c001b06c:	a8 df                	test   al,0xdf
c001b06e:	0f 94 c1             	sete   cl
c001b071:	3c 23                	cmp    al,0x23
c001b073:	0f 94 c2             	sete   dl
c001b076:	08 d1                	or     cl,dl
c001b078:	75 4a                	jne    c001b0c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b07a:	8d 50 f7             	lea    edx,[eax-0x9]
c001b07d:	80 fa 01             	cmp    dl,0x1
c001b080:	76 42                	jbe    c001b0c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b082:	3c 5b                	cmp    al,0x5b
c001b084:	75 42                	jne    c001b0c8 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd4>
c001b086:	80 fb 40             	cmp    bl,0x40
c001b089:	75 39                	jne    c001b0c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b08b:	83 ec 0c             	sub    esp,0xc
c001b08e:	8d 54 24 65          	lea    edx,[esp+0x65]
c001b092:	52                   	push   edx
c001b093:	e8 f0 56 fe ff       	call   c0000788 <strlen>
c001b098:	83 c4 10             	add    esp,0x10
c001b09b:	83 f8 3f             	cmp    eax,0x3f
c001b09e:	77 6a                	ja     c001b10a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b0a0:	50                   	push   eax
c001b0a1:	50                   	push   eax
c001b0a2:	8d 54 24 61          	lea    edx,[esp+0x61]
c001b0a6:	52                   	push   edx
c001b0a7:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b0ab:	52                   	push   edx
c001b0ac:	e8 77 57 fe ff       	call   c0000828 <strcpy>
c001b0b1:	58                   	pop    eax
c001b0b2:	8d 54 24 24          	lea    edx,[esp+0x24]
c001b0b6:	52                   	push   edx
c001b0b7:	e8 cc 56 fe ff       	call   c0000788 <strlen>
c001b0bc:	c6 44 04 26 00       	mov    BYTE PTR [esp+eax*1+0x26],0x0
c001b0c1:	83 c4 10             	add    esp,0x10
c001b0c4:	31 d2                	xor    edx,edx
c001b0c6:	eb 3a                	jmp    c001b102 <Reg::findLineFromLoadedData(char*, char*, char*)+0x10e>
c001b0c8:	80 fb 40             	cmp    bl,0x40
c001b0cb:	74 06                	je     c001b0d3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xdf>
c001b0cd:	8d 44 24 58          	lea    eax,[esp+0x58]
c001b0d1:	eb 20                	jmp    c001b0f3 <Reg::findLineFromLoadedData(char*, char*, char*)+0xff>
c001b0d3:	50                   	push   eax
c001b0d4:	50                   	push   eax
c001b0d5:	55                   	push   ebp
c001b0d6:	8d 44 24 24          	lea    eax,[esp+0x24]
c001b0da:	50                   	push   eax
c001b0db:	e8 d4 57 fe ff       	call   c00008b4 <strcmp>
c001b0e0:	83 c4 10             	add    esp,0x10
c001b0e3:	85 c0                	test   eax,eax
c001b0e5:	75 dd                	jne    c001b0c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b0e7:	eb e4                	jmp    c001b0cd <Reg::findLineFromLoadedData(char*, char*, char*)+0xd9>
c001b0e9:	8d 50 01             	lea    edx,[eax+0x1]
c001b0ec:	80 f9 3d             	cmp    cl,0x3d
c001b0ef:	74 1d                	je     c001b10e <Reg::findLineFromLoadedData(char*, char*, char*)+0x11a>
c001b0f1:	89 d0                	mov    eax,edx
c001b0f3:	8a 08                	mov    cl,BYTE PTR [eax]
c001b0f5:	84 c9                	test   cl,cl
c001b0f7:	75 f0                	jne    c001b0e9 <Reg::findLineFromLoadedData(char*, char*, char*)+0xf5>
c001b0f9:	eb 0f                	jmp    c001b10a <Reg::findLineFromLoadedData(char*, char*, char*)+0x116>
c001b0fb:	8d 50 01             	lea    edx,[eax+0x1]
c001b0fe:	88 4c 04 58          	mov    BYTE PTR [esp+eax*1+0x58],cl
c001b102:	47                   	inc    edi
c001b103:	89 d0                	mov    eax,edx
c001b105:	e9 3b ff ff ff       	jmp    c001b045 <Reg::findLineFromLoadedData(char*, char*, char*)+0x51>
c001b10a:	31 c0                	xor    eax,eax
c001b10c:	eb 33                	jmp    c001b141 <Reg::findLineFromLoadedData(char*, char*, char*)+0x14d>
c001b10e:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001b112:	c6 00 00             	mov    BYTE PTR [eax],0x0
c001b115:	50                   	push   eax
c001b116:	50                   	push   eax
c001b117:	8d 44 24 60          	lea    eax,[esp+0x60]
c001b11b:	50                   	push   eax
c001b11c:	56                   	push   esi
c001b11d:	e8 92 57 fe ff       	call   c00008b4 <strcmp>
c001b122:	83 c4 10             	add    esp,0x10
c001b125:	85 c0                	test   eax,eax
c001b127:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001b12b:	75 97                	jne    c001b0c4 <Reg::findLineFromLoadedData(char*, char*, char*)+0xd0>
c001b12d:	51                   	push   ecx
c001b12e:	51                   	push   ecx
c001b12f:	52                   	push   edx
c001b130:	ff b4 24 54 01 00 00 	push   DWORD PTR [esp+0x154]
c001b137:	e8 ec 56 fe ff       	call   c0000828 <strcpy>
c001b13c:	83 c4 10             	add    esp,0x10
c001b13f:	b0 01                	mov    al,0x1
c001b141:	81 c4 2c 01 00 00    	add    esp,0x12c
c001b147:	5b                   	pop    ebx
c001b148:	5e                   	pop    esi
c001b149:	5f                   	pop    edi
c001b14a:	5d                   	pop    ebp
c001b14b:	c3                   	ret    

c001b14c <Reg::getLineFromRegistry(char*, char*, char*, char*)>:
c001b14c:	57                   	push   edi
c001b14d:	56                   	push   esi
c001b14e:	53                   	push   ebx
c001b14f:	81 ec 2c 01 00 00    	sub    esp,0x12c
c001b155:	8b b4 24 3c 01 00 00 	mov    esi,DWORD PTR [esp+0x13c]
c001b15c:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c001b163:	53                   	push   ebx
c001b164:	e8 1f 56 fe ff       	call   c0000788 <strlen>
c001b169:	89 34 24             	mov    DWORD PTR [esp],esi
c001b16c:	89 c7                	mov    edi,eax
c001b16e:	e8 15 56 fe ff       	call   c0000788 <strlen>
c001b173:	83 c4 10             	add    esp,0x10
c001b176:	8d 44 07 05          	lea    eax,[edi+eax*1+0x5]
c001b17a:	3d ff 00 00 00       	cmp    eax,0xff
c001b17f:	0f 87 d3 00 00 00    	ja     c001b258 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b185:	57                   	push   edi
c001b186:	57                   	push   edi
c001b187:	56                   	push   esi
c001b188:	8d 74 24 2c          	lea    esi,[esp+0x2c]
c001b18c:	56                   	push   esi
c001b18d:	e8 96 56 fe ff       	call   c0000828 <strcpy>
c001b192:	58                   	pop    eax
c001b193:	5a                   	pop    edx
c001b194:	68 b1 cb 02 c0       	push   0xc002cbb1
c001b199:	56                   	push   esi
c001b19a:	e8 c9 57 fe ff       	call   c0000968 <strcat>
c001b19f:	59                   	pop    ecx
c001b1a0:	5f                   	pop    edi
c001b1a1:	53                   	push   ebx
c001b1a2:	56                   	push   esi
c001b1a3:	e8 c0 57 fe ff       	call   c0000968 <strcat>
c001b1a8:	58                   	pop    eax
c001b1a9:	5a                   	pop    edx
c001b1aa:	68 a8 c6 02 c0       	push   0xc002c6a8
c001b1af:	56                   	push   esi
c001b1b0:	e8 b3 57 fe ff       	call   c0000968 <strcat>
c001b1b5:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001b1bc:	e8 e7 46 ff ff       	call   c000f8a8 <malloc>
c001b1c1:	83 c4 0c             	add    esp,0xc
c001b1c4:	89 c3                	mov    ebx,eax
c001b1c6:	ff 35 b0 23 03 c0    	push   DWORD PTR ds:0xc00323b0
c001b1cc:	56                   	push   esi
c001b1cd:	50                   	push   eax
c001b1ce:	e8 d3 81 ff ff       	call   c00133a6 <File::File(char const*, Process*)>
c001b1d3:	83 c4 10             	add    esp,0x10
c001b1d6:	85 db                	test   ebx,ebx
c001b1d8:	74 7e                	je     c001b258 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x10c>
c001b1da:	51                   	push   ecx
c001b1db:	51                   	push   ecx
c001b1dc:	6a 01                	push   0x1
c001b1de:	53                   	push   ebx
c001b1df:	e8 26 82 ff ff       	call   c001340a <File::open(FileOpenMode)>
c001b1e4:	83 c4 10             	add    esp,0x10
c001b1e7:	85 c0                	test   eax,eax
c001b1e9:	74 08                	je     c001b1f3 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xa7>
c001b1eb:	83 ec 0c             	sub    esp,0xc
c001b1ee:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b1f0:	53                   	push   ebx
c001b1f1:	eb 5f                	jmp    c001b252 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x106>
c001b1f3:	52                   	push   edx
c001b1f4:	8d 44 24 17          	lea    eax,[esp+0x17]
c001b1f8:	50                   	push   eax
c001b1f9:	8d 44 24 20          	lea    eax,[esp+0x20]
c001b1fd:	50                   	push   eax
c001b1fe:	53                   	push   ebx
c001b1ff:	e8 b2 84 ff ff       	call   c00136b6 <File::stat(unsigned long long*, bool*)>
c001b204:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001b208:	83 c4 10             	add    esp,0x10
c001b20b:	89 c1                	mov    ecx,eax
c001b20d:	0b 4c 24 1c          	or     ecx,DWORD PTR [esp+0x1c]
c001b211:	74 31                	je     c001b244 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b213:	83 ec 0c             	sub    esp,0xc
c001b216:	50                   	push   eax
c001b217:	e8 8c 46 ff ff       	call   c000f8a8 <malloc>
c001b21c:	89 c6                	mov    esi,eax
c001b21e:	58                   	pop    eax
c001b21f:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b221:	8d 54 24 20          	lea    edx,[esp+0x20]
c001b225:	52                   	push   edx
c001b226:	56                   	push   esi
c001b227:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b22b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001b22f:	53                   	push   ebx
c001b230:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b233:	83 c4 20             	add    esp,0x20
c001b236:	85 c0                	test   eax,eax
c001b238:	75 0a                	jne    c001b244 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0xf8>
c001b23a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b23e:	39 44 24 18          	cmp    DWORD PTR [esp+0x18],eax
c001b242:	74 18                	je     c001b25c <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x110>
c001b244:	83 ec 0c             	sub    esp,0xc
c001b247:	53                   	push   ebx
c001b248:	e8 1b 82 ff ff       	call   c0013468 <File::close()>
c001b24d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b24f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b252:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b255:	83 c4 10             	add    esp,0x10
c001b258:	31 c0                	xor    eax,eax
c001b25a:	eb 3b                	jmp    c001b297 <Reg::getLineFromRegistry(char*, char*, char*, char*)+0x14b>
c001b25c:	83 ec 0c             	sub    esp,0xc
c001b25f:	53                   	push   ebx
c001b260:	e8 03 82 ff ff       	call   c0013468 <File::close()>
c001b265:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b267:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001b26a:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b26d:	83 c4 0c             	add    esp,0xc
c001b270:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b277:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c001b27e:	56                   	push   esi
c001b27f:	e8 70 fd ff ff       	call   c001aff4 <Reg::findLineFromLoadedData(char*, char*, char*)>
c001b284:	89 34 24             	mov    DWORD PTR [esp],esi
c001b287:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001b28b:	e8 28 46 ff ff       	call   c000f8b8 <free>
c001b290:	83 c4 10             	add    esp,0x10
c001b293:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001b297:	81 c4 20 01 00 00    	add    esp,0x120
c001b29d:	5b                   	pop    ebx
c001b29e:	5e                   	pop    esi
c001b29f:	5f                   	pop    edi
c001b2a0:	c3                   	ret    

c001b2a1 <Reg::getLine(char*, char*, char*)>:
c001b2a1:	57                   	push   edi
c001b2a2:	56                   	push   esi
c001b2a3:	53                   	push   ebx
c001b2a4:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b2a8:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001b2ac:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b2b0:	57                   	push   edi
c001b2b1:	56                   	push   esi
c001b2b2:	53                   	push   ebx
c001b2b3:	68 ad c6 02 c0       	push   0xc002c6ad
c001b2b8:	e8 8f fe ff ff       	call   c001b14c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b2bd:	83 c4 10             	add    esp,0x10
c001b2c0:	84 c0                	test   al,al
c001b2c2:	75 10                	jne    c001b2d4 <Reg::getLine(char*, char*, char*)+0x33>
c001b2c4:	57                   	push   edi
c001b2c5:	56                   	push   esi
c001b2c6:	53                   	push   ebx
c001b2c7:	68 d2 c6 02 c0       	push   0xc002c6d2
c001b2cc:	e8 7b fe ff ff       	call   c001b14c <Reg::getLineFromRegistry(char*, char*, char*, char*)>
c001b2d1:	83 c4 10             	add    esp,0x10
c001b2d4:	5b                   	pop    ebx
c001b2d5:	5e                   	pop    esi
c001b2d6:	5f                   	pop    edi
c001b2d7:	c3                   	ret    

c001b2d8 <Reg::readInt(char*, char*, int*)>:
c001b2d8:	55                   	push   ebp
c001b2d9:	57                   	push   edi
c001b2da:	56                   	push   esi
c001b2db:	53                   	push   ebx
c001b2dc:	81 ec f0 00 00 00    	sub    esp,0xf0
c001b2e2:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c001b2e6:	57                   	push   edi
c001b2e7:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b2ee:	ff b4 24 0c 01 00 00 	push   DWORD PTR [esp+0x10c]
c001b2f5:	e8 a7 ff ff ff       	call   c001b2a1 <Reg::getLine(char*, char*, char*)>
c001b2fa:	83 c4 10             	add    esp,0x10
c001b2fd:	84 c0                	test   al,al
c001b2ff:	0f 84 b3 00 00 00    	je     c001b3b8 <Reg::readInt(char*, char*, int*)+0xe0>
c001b305:	8a 54 24 18          	mov    dl,BYTE PTR [esp+0x18]
c001b309:	80 fa 2b             	cmp    dl,0x2b
c001b30c:	74 0c                	je     c001b31a <Reg::readInt(char*, char*, int*)+0x42>
c001b30e:	80 fa 2d             	cmp    dl,0x2d
c001b311:	75 0e                	jne    c001b321 <Reg::readInt(char*, char*, int*)+0x49>
c001b313:	ba 01 00 00 00       	mov    edx,0x1
c001b318:	eb 0b                	jmp    c001b325 <Reg::readInt(char*, char*, int*)+0x4d>
c001b31a:	ba 01 00 00 00       	mov    edx,0x1
c001b31f:	eb 02                	jmp    c001b323 <Reg::readInt(char*, char*, int*)+0x4b>
c001b321:	31 d2                	xor    edx,edx
c001b323:	31 c0                	xor    eax,eax
c001b325:	be 0a 00 00 00       	mov    esi,0xa
c001b32a:	80 7c 14 18 30       	cmp    BYTE PTR [esp+edx*1+0x18],0x30
c001b32f:	75 20                	jne    c001b351 <Reg::readInt(char*, char*, int*)+0x79>
c001b331:	8a 4c 14 19          	mov    cl,BYTE PTR [esp+edx*1+0x19]
c001b335:	80 f9 78             	cmp    cl,0x78
c001b338:	75 0a                	jne    c001b344 <Reg::readInt(char*, char*, int*)+0x6c>
c001b33a:	83 c2 02             	add    edx,0x2
c001b33d:	be 10 00 00 00       	mov    esi,0x10
c001b342:	eb 0d                	jmp    c001b351 <Reg::readInt(char*, char*, int*)+0x79>
c001b344:	80 f9 62             	cmp    cl,0x62
c001b347:	75 08                	jne    c001b351 <Reg::readInt(char*, char*, int*)+0x79>
c001b349:	83 c2 02             	add    edx,0x2
c001b34c:	be 02 00 00 00       	mov    esi,0x2
c001b351:	01 d7                	add    edi,edx
c001b353:	31 d2                	xor    edx,edx
c001b355:	8a 1f                	mov    bl,BYTE PTR [edi]
c001b357:	88 5c 24 0f          	mov    BYTE PTR [esp+0xf],bl
c001b35b:	80 fb 0d             	cmp    bl,0xd
c001b35e:	0f 94 c3             	sete   bl
c001b361:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001b366:	0f 94 c1             	sete   cl
c001b369:	08 cb                	or     bl,cl
c001b36b:	75 3a                	jne    c001b3a7 <Reg::readInt(char*, char*, int*)+0xcf>
c001b36d:	0f af d6             	imul   edx,esi
c001b370:	0f be 5c 24 0f       	movsx  ebx,BYTE PTR [esp+0xf]
c001b375:	83 fe 10             	cmp    esi,0x10
c001b378:	75 26                	jne    c001b3a0 <Reg::readInt(char*, char*, int*)+0xc8>
c001b37a:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b37e:	8d 69 bf             	lea    ebp,[ecx-0x41]
c001b381:	89 e9                	mov    ecx,ebp
c001b383:	80 f9 05             	cmp    cl,0x5
c001b386:	77 06                	ja     c001b38e <Reg::readInt(char*, char*, int*)+0xb6>
c001b388:	8d 54 1a c9          	lea    edx,[edx+ebx*1-0x37]
c001b38c:	eb 16                	jmp    c001b3a4 <Reg::readInt(char*, char*, int*)+0xcc>
c001b38e:	8a 4c 24 0f          	mov    cl,BYTE PTR [esp+0xf]
c001b392:	83 e9 61             	sub    ecx,0x61
c001b395:	80 f9 05             	cmp    cl,0x5
c001b398:	77 06                	ja     c001b3a0 <Reg::readInt(char*, char*, int*)+0xc8>
c001b39a:	8d 54 1a a9          	lea    edx,[edx+ebx*1-0x57]
c001b39e:	eb 04                	jmp    c001b3a4 <Reg::readInt(char*, char*, int*)+0xcc>
c001b3a0:	8d 54 1a d0          	lea    edx,[edx+ebx*1-0x30]
c001b3a4:	47                   	inc    edi
c001b3a5:	eb ae                	jmp    c001b355 <Reg::readInt(char*, char*, int*)+0x7d>
c001b3a7:	84 c0                	test   al,al
c001b3a9:	74 02                	je     c001b3ad <Reg::readInt(char*, char*, int*)+0xd5>
c001b3ab:	f7 da                	neg    edx
c001b3ad:	8b 84 24 08 01 00 00 	mov    eax,DWORD PTR [esp+0x108]
c001b3b4:	89 10                	mov    DWORD PTR [eax],edx
c001b3b6:	88 d8                	mov    al,bl
c001b3b8:	81 c4 ec 00 00 00    	add    esp,0xec
c001b3be:	5b                   	pop    ebx
c001b3bf:	5e                   	pop    esi
c001b3c0:	5f                   	pop    edi
c001b3c1:	5d                   	pop    ebp
c001b3c2:	c3                   	ret    

c001b3c3 <Reg::readString(char*, char*, char*, int)>:
c001b3c3:	57                   	push   edi
c001b3c4:	56                   	push   esi
c001b3c5:	53                   	push   ebx
c001b3c6:	81 ec d4 00 00 00    	sub    esp,0xd4
c001b3cc:	8b 9c 24 ec 00 00 00 	mov    ebx,DWORD PTR [esp+0xec]
c001b3d3:	8d 7c 24 0c          	lea    edi,[esp+0xc]
c001b3d7:	57                   	push   edi
c001b3d8:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b3df:	ff b4 24 ec 00 00 00 	push   DWORD PTR [esp+0xec]
c001b3e6:	e8 b6 fe ff ff       	call   c001b2a1 <Reg::getLine(char*, char*, char*)>
c001b3eb:	83 c4 10             	add    esp,0x10
c001b3ee:	89 c6                	mov    esi,eax
c001b3f0:	84 c0                	test   al,al
c001b3f2:	74 44                	je     c001b438 <Reg::readString(char*, char*, char*, int)+0x75>
c001b3f4:	8b 94 24 ec 00 00 00 	mov    edx,DWORD PTR [esp+0xec]
c001b3fb:	31 c0                	xor    eax,eax
c001b3fd:	4a                   	dec    edx
c001b3fe:	8a 0c 07             	mov    cl,BYTE PTR [edi+eax*1]
c001b401:	84 c9                	test   cl,cl
c001b403:	74 0f                	je     c001b414 <Reg::readString(char*, char*, char*, int)+0x51>
c001b405:	39 c2                	cmp    edx,eax
c001b407:	7e 0b                	jle    c001b414 <Reg::readString(char*, char*, char*, int)+0x51>
c001b409:	88 0c 03             	mov    BYTE PTR [ebx+eax*1],cl
c001b40c:	c6 44 03 01 00       	mov    BYTE PTR [ebx+eax*1+0x1],0x0
c001b411:	40                   	inc    eax
c001b412:	eb ea                	jmp    c001b3fe <Reg::readString(char*, char*, char*, int)+0x3b>
c001b414:	83 ec 0c             	sub    esp,0xc
c001b417:	53                   	push   ebx
c001b418:	e8 6b 53 fe ff       	call   c0000788 <strlen>
c001b41d:	83 c4 10             	add    esp,0x10
c001b420:	80 7c 03 ff 0d       	cmp    BYTE PTR [ebx+eax*1-0x1],0xd
c001b425:	75 11                	jne    c001b438 <Reg::readString(char*, char*, char*, int)+0x75>
c001b427:	83 ec 0c             	sub    esp,0xc
c001b42a:	53                   	push   ebx
c001b42b:	e8 58 53 fe ff       	call   c0000788 <strlen>
c001b430:	83 c4 10             	add    esp,0x10
c001b433:	c6 44 03 ff 00       	mov    BYTE PTR [ebx+eax*1-0x1],0x0
c001b438:	81 c4 d0 00 00 00    	add    esp,0xd0
c001b43e:	89 f0                	mov    eax,esi
c001b440:	5b                   	pop    ebx
c001b441:	5e                   	pop    esi
c001b442:	5f                   	pop    edi
c001b443:	c3                   	ret    

c001b444 <Reg::readBool(char*, char*, bool*)>:
c001b444:	83 ec 20             	sub    esp,0x20
c001b447:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b44b:	50                   	push   eax
c001b44c:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b450:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b454:	e8 7f fe ff ff       	call   c001b2d8 <Reg::readInt(char*, char*, int*)>
c001b459:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c001b45e:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c001b462:	0f 95 02             	setne  BYTE PTR [edx]
c001b465:	83 c4 2c             	add    esp,0x2c
c001b468:	c3                   	ret    

c001b469 <Reg::readBoolWithDefault(char*, char*, bool)>:
c001b469:	53                   	push   ebx
c001b46a:	83 ec 1c             	sub    esp,0x1c
c001b46d:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b471:	8d 44 24 13          	lea    eax,[esp+0x13]
c001b475:	50                   	push   eax
c001b476:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b47a:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b47e:	e8 c1 ff ff ff       	call   c001b444 <Reg::readBool(char*, char*, bool*)>
c001b483:	83 c4 10             	add    esp,0x10
c001b486:	84 c0                	test   al,al
c001b488:	74 04                	je     c001b48e <Reg::readBoolWithDefault(char*, char*, bool)+0x25>
c001b48a:	8a 5c 24 0f          	mov    bl,BYTE PTR [esp+0xf]
c001b48e:	88 d8                	mov    al,bl
c001b490:	83 c4 18             	add    esp,0x18
c001b493:	5b                   	pop    ebx
c001b494:	c3                   	ret    

c001b495 <Reg::readIntWithDefault(char*, char*, int)>:
c001b495:	53                   	push   ebx
c001b496:	83 ec 1c             	sub    esp,0x1c
c001b499:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c001b49d:	8d 44 24 10          	lea    eax,[esp+0x10]
c001b4a1:	50                   	push   eax
c001b4a2:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4a6:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001b4aa:	e8 29 fe ff ff       	call   c001b2d8 <Reg::readInt(char*, char*, int*)>
c001b4af:	83 c4 10             	add    esp,0x10
c001b4b2:	84 c0                	test   al,al
c001b4b4:	74 04                	je     c001b4ba <Reg::readIntWithDefault(char*, char*, int)+0x25>
c001b4b6:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c001b4ba:	89 d8                	mov    eax,ebx
c001b4bc:	83 c4 18             	add    esp,0x18
c001b4bf:	5b                   	pop    ebx
c001b4c0:	c3                   	ret    

c001b4c1 <Reg::readStringWithDefault(char*, char*, char*, int, char*)>:
c001b4c1:	57                   	push   edi
c001b4c2:	56                   	push   esi
c001b4c3:	53                   	push   ebx
c001b4c4:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001b4c8:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c001b4cc:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c001b4d0:	53                   	push   ebx
c001b4d1:	57                   	push   edi
c001b4d2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4d6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001b4da:	e8 e4 fe ff ff       	call   c001b3c3 <Reg::readString(char*, char*, char*, int)>
c001b4df:	83 c4 10             	add    esp,0x10
c001b4e2:	84 c0                	test   al,al
c001b4e4:	75 14                	jne    c001b4fa <Reg::readStringWithDefault(char*, char*, char*, int, char*)+0x39>
c001b4e6:	50                   	push   eax
c001b4e7:	53                   	push   ebx
c001b4e8:	6a 00                	push   0x0
c001b4ea:	57                   	push   edi
c001b4eb:	e8 7c 52 fe ff       	call   c000076c <memset>
c001b4f0:	8d 4b ff             	lea    ecx,[ebx-0x1]
c001b4f3:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b4f5:	83 c4 10             	add    esp,0x10
c001b4f8:	89 f7                	mov    edi,esi
c001b4fa:	89 f8                	mov    eax,edi
c001b4fc:	5b                   	pop    ebx
c001b4fd:	5e                   	pop    esi
c001b4fe:	5f                   	pop    edi
c001b4ff:	c3                   	ret    

c001b500 <Sys::eject(regs*)>:
c001b500:	83 ec 0c             	sub    esp,0xc
c001b503:	83 ca ff             	or     edx,0xffffffff
c001b506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001b50a:	8b 48 20             	mov    ecx,DWORD PTR [eax+0x20]
c001b50d:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001b512:	83 e9 41             	sub    ecx,0x41
c001b515:	83 f9 19             	cmp    ecx,0x19
c001b518:	77 18                	ja     c001b532 <Sys::eject(regs*)+0x32>
c001b51a:	8b 0c 8d 60 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0ba0]
c001b521:	85 c9                	test   ecx,ecx
c001b523:	74 0d                	je     c001b532 <Sys::eject(regs*)+0x32>
c001b525:	83 ec 0c             	sub    esp,0xc
c001b528:	51                   	push   ecx
c001b529:	e8 28 b2 ff ff       	call   c0016756 <LogicalDisk::eject()>
c001b52e:	83 c4 10             	add    esp,0x10
c001b531:	99                   	cdq    
c001b532:	83 c4 0c             	add    esp,0xc
c001b535:	c3                   	ret    

c001b536 <Sys::exit(regs*)>:
c001b536:	83 ec 18             	sub    esp,0x18
c001b539:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001b53d:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b540:	e8 7e 38 00 00       	call   c001edc3 <terminateTask(int)>
c001b545:	83 c8 ff             	or     eax,0xffffffff
c001b548:	83 c4 1c             	add    esp,0x1c
c001b54b:	89 c2                	mov    edx,eax
c001b54d:	c3                   	ret    

c001b54e <Sys::getCwd(regs*)>:
c001b54e:	83 ec 10             	sub    esp,0x10
c001b551:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001b555:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001b558:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b55b:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b560:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b563:	e8 40 7c ff ff       	call   c00131a8 <Fs::getcwd(Process*, char*, int)>
c001b568:	83 c4 1c             	add    esp,0x1c
c001b56b:	99                   	cdq    
c001b56c:	c3                   	ret    

c001b56d <Sys::getPID(regs*)>:
c001b56d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b572:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b575:	8b 00                	mov    eax,DWORD PTR [eax]
c001b577:	99                   	cdq    
c001b578:	c3                   	ret    

c001b579 <Sys::getRAMData(regs*)>:
c001b579:	8b 0d 94 ee 02 c0    	mov    ecx,DWORD PTR ds:0xc002ee94
c001b57f:	6b 05 90 ee 02 c0 64 	imul   eax,DWORD PTR ds:0xc002ee90,0x64
c001b586:	99                   	cdq    
c001b587:	f7 f9                	idiv   ecx
c001b589:	c1 e0 18             	shl    eax,0x18
c001b58c:	09 c8                	or     eax,ecx
c001b58e:	99                   	cdq    
c001b58f:	c3                   	ret    

c001b590 <Sys::getVGAPtr(regs*)>:
c001b590:	55                   	push   ebp
c001b591:	57                   	push   edi
c001b592:	56                   	push   esi
c001b593:	53                   	push   ebx
c001b594:	83 ec 18             	sub    esp,0x18
c001b597:	8b 6c 24 2c          	mov    ebp,DWORD PTR [esp+0x2c]
c001b59b:	ff 75 28             	push   DWORD PTR [ebp+0x28]
c001b59e:	e8 02 33 00 00       	call   c001e8a5 <Thr::processFromPID(int)>
c001b5a3:	83 c4 10             	add    esp,0x10
c001b5a6:	89 c1                	mov    ecx,eax
c001b5a8:	b8 01 00 00 00       	mov    eax,0x1
c001b5ad:	85 c9                	test   ecx,ecx
c001b5af:	74 59                	je     c001b60a <Sys::getVGAPtr(regs*)+0x7a>
c001b5b1:	8b 99 26 05 00 00    	mov    ebx,DWORD PTR [ecx+0x526]
c001b5b7:	83 7d 24 00          	cmp    DWORD PTR [ebp+0x24],0x0
c001b5bb:	74 0c                	je     c001b5c9 <Sys::getVGAPtr(regs*)+0x39>
c001b5bd:	83 ec 0c             	sub    esp,0xc
c001b5c0:	53                   	push   ebx
c001b5c1:	e8 a4 56 ff ff       	call   c0010c6a <setActiveTerminal(VgaText*)>
c001b5c6:	83 c4 10             	add    esp,0x10
c001b5c9:	b9 a0 0f 00 00       	mov    ecx,0xfa0
c001b5ce:	8b 73 0c             	mov    esi,DWORD PTR [ebx+0xc]
c001b5d1:	8b 7d 20             	mov    edi,DWORD PTR [ebp+0x20]
c001b5d4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001b5d6:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001b5d9:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b5dc:	81 c3 82 00 00 00    	add    ebx,0x82
c001b5e2:	89 90 a0 0f 00 00    	mov    DWORD PTR [eax+0xfa0],edx
c001b5e8:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b5eb:	8b 53 96             	mov    edx,DWORD PTR [ebx-0x6a]
c001b5ee:	89 90 a4 0f 00 00    	mov    DWORD PTR [eax+0xfa4],edx
c001b5f4:	50                   	push   eax
c001b5f5:	50                   	push   eax
c001b5f6:	53                   	push   ebx
c001b5f7:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
c001b5fa:	05 a8 0f 00 00       	add    eax,0xfa8
c001b5ff:	50                   	push   eax
c001b600:	e8 23 52 fe ff       	call   c0000828 <strcpy>
c001b605:	83 c4 10             	add    esp,0x10
c001b608:	31 c0                	xor    eax,eax
c001b60a:	83 c4 0c             	add    esp,0xc
c001b60d:	31 d2                	xor    edx,edx
c001b60f:	5b                   	pop    ebx
c001b610:	5e                   	pop    esi
c001b611:	5f                   	pop    edi
c001b612:	5d                   	pop    ebp
c001b613:	c3                   	ret    

c001b614 <Sys::loadDLL(regs*)>:
c001b614:	56                   	push   esi
c001b615:	53                   	push   ebx
c001b616:	31 d2                	xor    edx,edx
c001b618:	51                   	push   ecx
c001b619:	b8 01 00 00 00       	mov    eax,0x1
c001b61e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001b622:	83 7e 20 00          	cmp    DWORD PTR [esi+0x20],0x0
c001b626:	0f 84 8c 00 00 00    	je     c001b6b8 <Sys::loadDLL(regs*)+0xa4>
c001b62c:	83 ec 0c             	sub    esp,0xc
c001b62f:	68 14 01 00 00       	push   0x114
c001b634:	e8 6f 42 ff ff       	call   c000f8a8 <malloc>
c001b639:	83 c4 0c             	add    esp,0xc
c001b63c:	89 c3                	mov    ebx,eax
c001b63e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b643:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b646:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b649:	53                   	push   ebx
c001b64a:	e8 57 7d ff ff       	call   c00133a6 <File::File(char const*, Process*)>
c001b64f:	83 c4 10             	add    esp,0x10
c001b652:	31 d2                	xor    edx,edx
c001b654:	b8 02 00 00 00       	mov    eax,0x2
c001b659:	85 db                	test   ebx,ebx
c001b65b:	74 5b                	je     c001b6b8 <Sys::loadDLL(regs*)+0xa4>
c001b65d:	83 ec 0c             	sub    esp,0xc
c001b660:	53                   	push   ebx
c001b661:	e8 12 80 ff ff       	call   c0013678 <File::exists()>
c001b666:	83 c4 10             	add    esp,0x10
c001b669:	84 c0                	test   al,al
c001b66b:	8b 03                	mov    eax,DWORD PTR [ebx]
c001b66d:	75 11                	jne    c001b680 <Sys::loadDLL(regs*)+0x6c>
c001b66f:	83 ec 0c             	sub    esp,0xc
c001b672:	53                   	push   ebx
c001b673:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b676:	83 c4 10             	add    esp,0x10
c001b679:	b8 03 00 00 00       	mov    eax,0x3
c001b67e:	eb 36                	jmp    c001b6b6 <Sys::loadDLL(regs*)+0xa2>
c001b680:	83 ec 0c             	sub    esp,0xc
c001b683:	53                   	push   ebx
c001b684:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001b687:	58                   	pop    eax
c001b688:	5a                   	pop    edx
c001b689:	6a 00                	push   0x0
c001b68b:	ff 76 20             	push   DWORD PTR [esi+0x20]
c001b68e:	e8 1e 24 00 00       	call   c001dab1 <Thr::loadDLL(char const*, bool)>
c001b693:	83 c4 10             	add    esp,0x10
c001b696:	89 c1                	mov    ecx,eax
c001b698:	31 d2                	xor    edx,edx
c001b69a:	b8 04 00 00 00       	mov    eax,0x4
c001b69f:	85 c9                	test   ecx,ecx
c001b6a1:	74 15                	je     c001b6b8 <Sys::loadDLL(regs*)+0xa4>
c001b6a3:	53                   	push   ebx
c001b6a4:	53                   	push   ebx
c001b6a5:	ff 35 48 ee 02 c0    	push   DWORD PTR ds:0xc002ee48
c001b6ab:	51                   	push   ecx
c001b6ac:	e8 2b 26 00 00       	call   c001dcdc <Thr::executeDLL(unsigned long, void*)>
c001b6b1:	83 c4 10             	add    esp,0x10
c001b6b4:	31 c0                	xor    eax,eax
c001b6b6:	31 d2                	xor    edx,edx
c001b6b8:	59                   	pop    ecx
c001b6b9:	5b                   	pop    ebx
c001b6ba:	5e                   	pop    esi
c001b6bb:	c3                   	ret    

c001b6bc <Sys::read(regs*)>:
c001b6bc:	57                   	push   edi
c001b6bd:	56                   	push   esi
c001b6be:	53                   	push   ebx
c001b6bf:	83 ec 10             	sub    esp,0x10
c001b6c2:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b6c6:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b6c9:	83 f8 02             	cmp    eax,0x2
c001b6cc:	77 10                	ja     c001b6de <Sys::read(regs*)+0x22>
c001b6ce:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b6d3:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b6d6:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b6dc:	eb 0e                	jmp    c001b6ec <Sys::read(regs*)+0x30>
c001b6de:	83 ec 0c             	sub    esp,0xc
c001b6e1:	50                   	push   eax
c001b6e2:	e8 04 62 ff ff       	call   c00118eb <getFromFileDescriptor(int)>
c001b6e7:	83 c4 10             	add    esp,0x10
c001b6ea:	89 c1                	mov    ecx,eax
c001b6ec:	83 c8 ff             	or     eax,0xffffffff
c001b6ef:	85 c9                	test   ecx,ecx
c001b6f1:	89 c2                	mov    edx,eax
c001b6f3:	74 28                	je     c001b71d <Sys::read(regs*)+0x61>
c001b6f5:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b6fd:	31 ff                	xor    edi,edi
c001b6ff:	83 ec 0c             	sub    esp,0xc
c001b702:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b704:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b708:	52                   	push   edx
c001b709:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b70c:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b70f:	57                   	push   edi
c001b710:	56                   	push   esi
c001b711:	51                   	push   ecx
c001b712:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001b715:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b719:	83 c4 20             	add    esp,0x20
c001b71c:	99                   	cdq    
c001b71d:	83 c4 10             	add    esp,0x10
c001b720:	5b                   	pop    ebx
c001b721:	5e                   	pop    esi
c001b722:	5f                   	pop    edi
c001b723:	c3                   	ret    

c001b724 <Sys::sbrk(regs*)>:
c001b724:	56                   	push   esi
c001b725:	53                   	push   ebx
c001b726:	50                   	push   eax
c001b727:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b72c:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001b730:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b733:	8b 5a 20             	mov    ebx,DWORD PTR [edx+0x20]
c001b736:	8b 88 32 05 00 00    	mov    ecx,DWORD PTR [eax+0x532]
c001b73c:	85 db                	test   ebx,ebx
c001b73e:	8b 71 04             	mov    esi,DWORD PTR [ecx+0x4]
c001b741:	74 02                	je     c001b745 <Sys::sbrk(regs*)+0x21>
c001b743:	79 06                	jns    c001b74b <Sys::sbrk(regs*)+0x27>
c001b745:	89 f0                	mov    eax,esi
c001b747:	31 d2                	xor    edx,edx
c001b749:	eb 2a                	jmp    c001b775 <Sys::sbrk(regs*)+0x51>
c001b74b:	83 c8 ff             	or     eax,0xffffffff
c001b74e:	81 fb 00 00 00 04    	cmp    ebx,0x4000000
c001b754:	89 c2                	mov    edx,eax
c001b756:	77 1d                	ja     c001b775 <Sys::sbrk(regs*)+0x51>
c001b758:	8d 93 ff 0f 00 00    	lea    edx,[ebx+0xfff]
c001b75e:	50                   	push   eax
c001b75f:	c1 ea 0c             	shr    edx,0xc
c001b762:	68 07 0c 00 00       	push   0xc07
c001b767:	52                   	push   edx
c001b768:	51                   	push   ecx
c001b769:	e8 0c 6c ff ff       	call   c001237a <VAS::allocatePages(int, int)>
c001b76e:	89 f0                	mov    eax,esi
c001b770:	31 d2                	xor    edx,edx
c001b772:	83 c4 10             	add    esp,0x10
c001b775:	59                   	pop    ecx
c001b776:	5b                   	pop    ebx
c001b777:	5e                   	pop    esi
c001b778:	c3                   	ret    

c001b779 <Sys::setCwd(regs*)>:
c001b779:	83 ec 14             	sub    esp,0x14
c001b77c:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001b780:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001b783:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b788:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001b78b:	e8 87 7f ff ff       	call   c0013717 <Fs::setcwd(Process*, char*)>
c001b790:	83 c4 1c             	add    esp,0x1c
c001b793:	99                   	cdq    
c001b794:	c3                   	ret    

c001b795 <Sys::setTime(regs*)>:
c001b795:	55                   	push   ebp
c001b796:	31 d2                	xor    edx,edx
c001b798:	57                   	push   edi
c001b799:	bf 18 00 00 00       	mov    edi,0x18
c001b79e:	56                   	push   esi
c001b79f:	53                   	push   ebx
c001b7a0:	bb 3c 00 00 00       	mov    ebx,0x3c
c001b7a5:	83 ec 30             	sub    esp,0x30
c001b7a8:	8b 4c 24 44          	mov    ecx,DWORD PTR [esp+0x44]
c001b7ac:	8b 69 24             	mov    ebp,DWORD PTR [ecx+0x24]
c001b7af:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b7b2:	f7 f3                	div    ebx
c001b7b4:	89 d6                	mov    esi,edx
c001b7b6:	31 d2                	xor    edx,edx
c001b7b8:	f7 f3                	div    ebx
c001b7ba:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001b7bd:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c001b7c1:	bb 10 0e 00 00       	mov    ebx,0xe10
c001b7c6:	31 d2                	xor    edx,edx
c001b7c8:	f7 f3                	div    ebx
c001b7ca:	31 d2                	xor    edx,edx
c001b7cc:	bb 0c 00 00 00       	mov    ebx,0xc
c001b7d1:	f7 f7                	div    edi
c001b7d3:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c001b7d6:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b7da:	0f b7 cd             	movzx  ecx,bp
c001b7dd:	56                   	push   esi
c001b7de:	89 c7                	mov    edi,eax
c001b7e0:	ff 74 24 08          	push   DWORD PTR [esp+0x8]
c001b7e4:	c1 e6 10             	shl    esi,0x10
c001b7e7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001b7eb:	83 e7 1f             	and    edi,0x1f
c001b7ee:	51                   	push   ecx
c001b7ef:	47                   	inc    edi
c001b7f0:	c1 e8 05             	shr    eax,0x5
c001b7f3:	31 d2                	xor    edx,edx
c001b7f5:	f7 f3                	div    ebx
c001b7f7:	31 db                	xor    ebx,ebx
c001b7f9:	52                   	push   edx
c001b7fa:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c001b7fe:	57                   	push   edi
c001b7ff:	68 ed c6 02 c0       	push   0xc002c6ed
c001b804:	e8 3e 76 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001b809:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c001b80d:	89 f8                	mov    eax,edi
c001b80f:	31 c9                	xor    ecx,ecx
c001b811:	88 44 24 33          	mov    BYTE PTR [esp+0x33],al
c001b815:	88 c1                	mov    cl,al
c001b817:	8d 85 94 f8 ff ff    	lea    eax,[ebp-0x76c]
c001b81d:	88 d5                	mov    ch,dl
c001b81f:	c1 e0 10             	shl    eax,0x10
c001b822:	0f b7 d1             	movzx  edx,cx
c001b825:	09 c2                	or     edx,eax
c001b827:	89 d8                	mov    eax,ebx
c001b829:	25 ff ff 00 ff       	and    eax,0xff00ffff
c001b82e:	09 f0                	or     eax,esi
c001b830:	89 c3                	mov    ebx,eax
c001b832:	8a 7c 24 20          	mov    bh,BYTE PTR [esp+0x20]
c001b836:	8a 5c 24 2c          	mov    bl,BYTE PTR [esp+0x2c]
c001b83a:	83 c4 18             	add    esp,0x18
c001b83d:	53                   	push   ebx
c001b83e:	52                   	push   edx
c001b83f:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c001b843:	8d 74 24 28          	lea    esi,[esp+0x28]
c001b847:	89 54 24 10          	mov    DWORD PTR [esp+0x10],edx
c001b84b:	e8 e9 85 ff ff       	call   c0013e39 <datetimeToSeconds(datetime_t)>
c001b850:	83 c4 0c             	add    esp,0xc
c001b853:	52                   	push   edx
c001b854:	50                   	push   eax
c001b855:	56                   	push   esi
c001b856:	e8 65 87 ff ff       	call   c0013fc0 <secondsToDatetime(unsigned long long)>
c001b85b:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001b85f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001b863:	51                   	push   ecx
c001b864:	89 d6                	mov    esi,edx
c001b866:	51                   	push   ecx
c001b867:	c1 ee 10             	shr    esi,0x10
c001b86a:	89 f3                	mov    ebx,esi
c001b86c:	0f b6 f3             	movzx  esi,bl
c001b86f:	56                   	push   esi
c001b870:	0f b6 f6             	movzx  esi,dh
c001b873:	0f b6 d2             	movzx  edx,dl
c001b876:	56                   	push   esi
c001b877:	52                   	push   edx
c001b878:	89 c2                	mov    edx,eax
c001b87a:	c1 ea 10             	shr    edx,0x10
c001b87d:	52                   	push   edx
c001b87e:	0f b6 d4             	movzx  edx,ah
c001b881:	0f b6 c0             	movzx  eax,al
c001b884:	52                   	push   edx
c001b885:	50                   	push   eax
c001b886:	68 09 c7 02 c0       	push   0xc002c709
c001b88b:	e8 b7 75 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001b890:	83 c4 2c             	add    esp,0x2c
c001b893:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001b898:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001b89c:	8b 4c 24 04          	mov    ecx,DWORD PTR [esp+0x4]
c001b8a0:	53                   	push   ebx
c001b8a1:	51                   	push   ecx
c001b8a2:	ff b0 5c 01 00 00    	push   DWORD PTR [eax+0x15c]
c001b8a8:	e8 b3 86 ff ff       	call   c0013f60 <Clock::setTimeInDatetimeLocal(datetime_t)>
c001b8ad:	83 f0 01             	xor    eax,0x1
c001b8b0:	31 d2                	xor    edx,edx
c001b8b2:	0f b6 c0             	movzx  eax,al
c001b8b5:	83 c4 3c             	add    esp,0x3c
c001b8b8:	5b                   	pop    ebx
c001b8b9:	5e                   	pop    esi
c001b8ba:	5f                   	pop    edi
c001b8bb:	5d                   	pop    ebp
c001b8bc:	c3                   	ret    

c001b8bd <Sys::timezone(regs*)>:
c001b8bd:	53                   	push   ebx
c001b8be:	83 ec 08             	sub    esp,0x8
c001b8c1:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001b8c5:	83 7b 28 00          	cmp    DWORD PTR [ebx+0x28],0x0
c001b8c9:	75 17                	jne    c001b8e2 <Sys::timezone(regs*)+0x25>
c001b8cb:	83 ec 0c             	sub    esp,0xc
c001b8ce:	68 25 c7 02 c0       	push   0xc002c725
c001b8d3:	e8 6f 75 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001b8d8:	83 c8 ff             	or     eax,0xffffffff
c001b8db:	83 c4 10             	add    esp,0x10
c001b8de:	89 c2                	mov    edx,eax
c001b8e0:	eb 20                	jmp    c001b902 <Sys::timezone(regs*)+0x45>
c001b8e2:	83 ec 0c             	sub    esp,0xc
c001b8e5:	68 5d c7 02 c0       	push   0xc002c75d
c001b8ea:	e8 58 75 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001b8ef:	58                   	pop    eax
c001b8f0:	ff 73 20             	push   DWORD PTR [ebx+0x20]
c001b8f3:	e8 ca 83 ff ff       	call   c0013cc2 <User::loadClockSettings(int)>
c001b8f8:	83 c4 10             	add    esp,0x10
c001b8fb:	b8 01 00 00 00       	mov    eax,0x1
c001b900:	31 d2                	xor    edx,edx
c001b902:	83 c4 08             	add    esp,0x8
c001b905:	5b                   	pop    ebx
c001b906:	c3                   	ret    

c001b907 <Sys::write(regs*)>:
c001b907:	57                   	push   edi
c001b908:	56                   	push   esi
c001b909:	53                   	push   ebx
c001b90a:	83 ec 10             	sub    esp,0x10
c001b90d:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001b911:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001b914:	83 f8 02             	cmp    eax,0x2
c001b917:	77 10                	ja     c001b929 <Sys::write(regs*)+0x22>
c001b919:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b91e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b921:	8b 88 26 05 00 00    	mov    ecx,DWORD PTR [eax+0x526]
c001b927:	eb 0e                	jmp    c001b937 <Sys::write(regs*)+0x30>
c001b929:	83 ec 0c             	sub    esp,0xc
c001b92c:	50                   	push   eax
c001b92d:	e8 b9 5f ff ff       	call   c00118eb <getFromFileDescriptor(int)>
c001b932:	83 c4 10             	add    esp,0x10
c001b935:	89 c1                	mov    ecx,eax
c001b937:	83 c8 ff             	or     eax,0xffffffff
c001b93a:	85 c9                	test   ecx,ecx
c001b93c:	89 c2                	mov    edx,eax
c001b93e:	74 28                	je     c001b968 <Sys::write(regs*)+0x61>
c001b940:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001b948:	31 ff                	xor    edi,edi
c001b94a:	83 ec 0c             	sub    esp,0xc
c001b94d:	8b 01                	mov    eax,DWORD PTR [ecx]
c001b94f:	8d 54 24 18          	lea    edx,[esp+0x18]
c001b953:	52                   	push   edx
c001b954:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001b957:	8b 73 28             	mov    esi,DWORD PTR [ebx+0x28]
c001b95a:	57                   	push   edi
c001b95b:	56                   	push   esi
c001b95c:	51                   	push   ecx
c001b95d:	ff 50 10             	call   DWORD PTR [eax+0x10]
c001b960:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001b964:	83 c4 20             	add    esp,0x20
c001b967:	99                   	cdq    
c001b968:	83 c4 10             	add    esp,0x10
c001b96b:	5b                   	pop    ebx
c001b96c:	5e                   	pop    esi
c001b96d:	5f                   	pop    edi
c001b96e:	c3                   	ret    

c001b96f <Sys::wsbe(regs*)>:
c001b96f:	57                   	push   edi
c001b970:	b9 0b 00 00 00       	mov    ecx,0xb
c001b975:	56                   	push   esi
c001b976:	be 9c c7 02 c0       	mov    esi,0xc002c79c
c001b97b:	53                   	push   ebx
c001b97c:	83 ec 30             	sub    esp,0x30
c001b97f:	8d 7c 24 04          	lea    edi,[esp+0x4]
c001b983:	fc                   	cld    
c001b984:	83 ec 0c             	sub    esp,0xc
c001b987:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c001b989:	8d 7c 24 10          	lea    edi,[esp+0x10]
c001b98d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001b992:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001b995:	8b b0 26 05 00 00    	mov    esi,DWORD PTR [eax+0x526]
c001b99b:	8b 06                	mov    eax,DWORD PTR [esi]
c001b99d:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
c001b9a0:	57                   	push   edi
c001b9a1:	e8 e2 4d fe ff       	call   c0000788 <strlen>
c001b9a6:	5a                   	pop    edx
c001b9a7:	8d 54 24 0c          	lea    edx,[esp+0xc]
c001b9ab:	52                   	push   edx
c001b9ac:	31 d2                	xor    edx,edx
c001b9ae:	57                   	push   edi
c001b9af:	52                   	push   edx
c001b9b0:	50                   	push   eax
c001b9b1:	56                   	push   esi
c001b9b2:	ff d3                	call   ebx
c001b9b4:	83 c4 14             	add    esp,0x14
c001b9b7:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c001b9bb:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001b9be:	e8 00 34 00 00       	call   c001edc3 <terminateTask(int)>
c001b9c3:	83 c4 40             	add    esp,0x40
c001b9c6:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001b9cb:	5b                   	pop    ebx
c001b9cc:	31 d2                	xor    edx,edx
c001b9ce:	5e                   	pop    esi
c001b9cf:	5f                   	pop    edi
c001b9d0:	c3                   	ret    

c001b9d1 <Sys::yield(regs*)>:
c001b9d1:	57                   	push   edi
c001b9d2:	56                   	push   esi
c001b9d3:	53                   	push   ebx
c001b9d4:	fa                   	cli    
c001b9d5:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001b9db:	e8 b0 2a 00 00       	call   c001e490 <schedule()>
c001b9e0:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001b9e5:	48                   	dec    eax
c001b9e6:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001b9eb:	75 01                	jne    c001b9ee <Sys::yield(regs*)+0x1d>
c001b9ed:	fb                   	sti    
c001b9ee:	8b 35 d0 f4 02 c0    	mov    esi,DWORD PTR ds:0xc002f4d0
c001b9f4:	8b 3d d4 f4 02 c0    	mov    edi,DWORD PTR ds:0xc002f4d4
c001b9fa:	89 f0                	mov    eax,esi
c001b9fc:	89 fb                	mov    ebx,edi
c001b9fe:	89 f1                	mov    ecx,esi
c001ba00:	c1 e0 07             	shl    eax,0x7
c001ba03:	0f ac d9 17          	shrd   ecx,ebx,0x17
c001ba07:	25 80 30 0f 00       	and    eax,0xf3080
c001ba0c:	c1 eb 17             	shr    ebx,0x17
c001ba0f:	31 c8                	xor    eax,ecx
c001ba11:	89 da                	mov    edx,ebx
c001ba13:	5b                   	pop    ebx
c001ba14:	5e                   	pop    esi
c001ba15:	5f                   	pop    edi
c001ba16:	c3                   	ret    

c001ba17 <sysCallSeekDir(regs*)>:
c001ba17:	31 c0                	xor    eax,eax
c001ba19:	31 d2                	xor    edx,edx
c001ba1b:	c3                   	ret    

c001ba1c <sysCallTellDir(regs*)>:
c001ba1c:	31 c0                	xor    eax,eax
c001ba1e:	31 d2                	xor    edx,edx
c001ba20:	c3                   	ret    

c001ba21 <sysCallVerify(regs*)>:
c001ba21:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ba25:	31 d2                	xor    edx,edx
c001ba27:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001ba2a:	c3                   	ret    

c001ba2b <sysFormatDisk(regs*)>:
c001ba2b:	56                   	push   esi
c001ba2c:	53                   	push   ebx
c001ba2d:	53                   	push   ebx
c001ba2e:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001ba32:	8b 1d d4 ef 02 c0    	mov    ebx,DWORD PTR ds:0xc002efd4
c001ba38:	eb 25                	jmp    c001ba5f <sysFormatDisk(regs*)+0x34>
c001ba3a:	83 ec 0c             	sub    esp,0xc
c001ba3d:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001ba40:	8b 13                	mov    edx,DWORD PTR [ebx]
c001ba42:	ff 76 28             	push   DWORD PTR [esi+0x28]
c001ba45:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001ba48:	50                   	push   eax
c001ba49:	ff 34 85 60 f4 02 c0 	push   DWORD PTR [eax*4-0x3ffd0ba0]
c001ba50:	53                   	push   ebx
c001ba51:	ff 52 48             	call   DWORD PTR [edx+0x48]
c001ba54:	83 c4 20             	add    esp,0x20
c001ba57:	83 f8 08             	cmp    eax,0x8
c001ba5a:	75 12                	jne    c001ba6e <sysFormatDisk(regs*)+0x43>
c001ba5c:	8b 5b 04             	mov    ebx,DWORD PTR [ebx+0x4]
c001ba5f:	85 db                	test   ebx,ebx
c001ba61:	75 d7                	jne    c001ba3a <sysFormatDisk(regs*)+0xf>
c001ba63:	59                   	pop    ecx
c001ba64:	b8 03 00 00 00       	mov    eax,0x3
c001ba69:	31 d2                	xor    edx,edx
c001ba6b:	5b                   	pop    ebx
c001ba6c:	5e                   	pop    esi
c001ba6d:	c3                   	ret    
c001ba6e:	85 c0                	test   eax,eax
c001ba70:	74 1b                	je     c001ba8d <sysFormatDisk(regs*)+0x62>
c001ba72:	83 f8 09             	cmp    eax,0x9
c001ba75:	74 0b                	je     c001ba82 <sysFormatDisk(regs*)+0x57>
c001ba77:	59                   	pop    ecx
c001ba78:	b8 02 00 00 00       	mov    eax,0x2
c001ba7d:	31 d2                	xor    edx,edx
c001ba7f:	5b                   	pop    ebx
c001ba80:	5e                   	pop    esi
c001ba81:	c3                   	ret    
c001ba82:	59                   	pop    ecx
c001ba83:	b8 01 00 00 00       	mov    eax,0x1
c001ba88:	31 d2                	xor    edx,edx
c001ba8a:	5b                   	pop    ebx
c001ba8b:	5e                   	pop    esi
c001ba8c:	c3                   	ret    
c001ba8d:	59                   	pop    ecx
c001ba8e:	31 c0                	xor    eax,eax
c001ba90:	31 d2                	xor    edx,edx
c001ba92:	5b                   	pop    ebx
c001ba93:	5e                   	pop    esi
c001ba94:	c3                   	ret    

c001ba95 <sysSetDiskVolumeLabel(regs*)>:
c001ba95:	56                   	push   esi
c001ba96:	53                   	push   ebx
c001ba97:	53                   	push   ebx
c001ba98:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ba9c:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001ba9f:	83 f8 19             	cmp    eax,0x19
c001baa2:	77 29                	ja     c001bacd <sysSetDiskVolumeLabel(regs*)+0x38>
c001baa4:	8b 0c 85 60 f4 02 c0 	mov    ecx,DWORD PTR [eax*4-0x3ffd0ba0]
c001baab:	85 c9                	test   ecx,ecx
c001baad:	74 1e                	je     c001bacd <sysSetDiskVolumeLabel(regs*)+0x38>
c001baaf:	8b 52 24             	mov    edx,DWORD PTR [edx+0x24]
c001bab2:	85 d2                	test   edx,edx
c001bab4:	74 17                	je     c001bacd <sysSetDiskVolumeLabel(regs*)+0x38>
c001bab6:	8b 99 70 01 00 00    	mov    ebx,DWORD PTR [ecx+0x170]
c001babc:	8b 33                	mov    esi,DWORD PTR [ebx]
c001babe:	52                   	push   edx
c001babf:	50                   	push   eax
c001bac0:	51                   	push   ecx
c001bac1:	53                   	push   ebx
c001bac2:	ff 56 58             	call   DWORD PTR [esi+0x58]
c001bac5:	83 c4 10             	add    esp,0x10
c001bac8:	99                   	cdq    
c001bac9:	59                   	pop    ecx
c001baca:	5b                   	pop    ebx
c001bacb:	5e                   	pop    esi
c001bacc:	c3                   	ret    
c001bacd:	59                   	pop    ecx
c001bace:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bad3:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bad8:	5b                   	pop    ebx
c001bad9:	5e                   	pop    esi
c001bada:	c3                   	ret    

c001badb <sysGetDiskVolumeLabel(regs*)>:
c001badb:	57                   	push   edi
c001badc:	56                   	push   esi
c001badd:	53                   	push   ebx
c001bade:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bae2:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001bae5:	83 fa 19             	cmp    edx,0x19
c001bae8:	77 34                	ja     c001bb1e <sysGetDiskVolumeLabel(regs*)+0x43>
c001baea:	8b 0c 95 60 f4 02 c0 	mov    ecx,DWORD PTR [edx*4-0x3ffd0ba0]
c001baf1:	85 c9                	test   ecx,ecx
c001baf3:	74 29                	je     c001bb1e <sysGetDiskVolumeLabel(regs*)+0x43>
c001baf5:	8b 58 24             	mov    ebx,DWORD PTR [eax+0x24]
c001baf8:	85 db                	test   ebx,ebx
c001bafa:	74 22                	je     c001bb1e <sysGetDiskVolumeLabel(regs*)+0x43>
c001bafc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c001baff:	85 c0                	test   eax,eax
c001bb01:	74 1b                	je     c001bb1e <sysGetDiskVolumeLabel(regs*)+0x43>
c001bb03:	8b b1 70 01 00 00    	mov    esi,DWORD PTR [ecx+0x170]
c001bb09:	83 ec 0c             	sub    esp,0xc
c001bb0c:	8b 3e                	mov    edi,DWORD PTR [esi]
c001bb0e:	50                   	push   eax
c001bb0f:	53                   	push   ebx
c001bb10:	52                   	push   edx
c001bb11:	51                   	push   ecx
c001bb12:	56                   	push   esi
c001bb13:	ff 57 54             	call   DWORD PTR [edi+0x54]
c001bb16:	83 c4 20             	add    esp,0x20
c001bb19:	99                   	cdq    
c001bb1a:	5b                   	pop    ebx
c001bb1b:	5e                   	pop    esi
c001bb1c:	5f                   	pop    edi
c001bb1d:	c3                   	ret    
c001bb1e:	5b                   	pop    ebx
c001bb1f:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001bb24:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb29:	5e                   	pop    esi
c001bb2a:	5f                   	pop    edi
c001bb2b:	c3                   	ret    

c001bb2c <sysShutdown(regs*)>:
c001bb2c:	83 ec 0c             	sub    esp,0xc
c001bb2f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb33:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bb36:	85 c0                	test   eax,eax
c001bb38:	74 18                	je     c001bb52 <sysShutdown(regs*)+0x26>
c001bb3a:	83 f8 01             	cmp    eax,0x1
c001bb3d:	74 38                	je     c001bb77 <sysShutdown(regs*)+0x4b>
c001bb3f:	83 f8 02             	cmp    eax,0x2
c001bb42:	74 24                	je     c001bb68 <sysShutdown(regs*)+0x3c>
c001bb44:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bb49:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bb4e:	83 c4 0c             	add    esp,0xc
c001bb51:	c3                   	ret    
c001bb52:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001bb57:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb59:	6a 00                	push   0x0
c001bb5b:	6a 00                	push   0x0
c001bb5d:	6a 00                	push   0x0
c001bb5f:	50                   	push   eax
c001bb60:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bb63:	83 c4 10             	add    esp,0x10
c001bb66:	eb dc                	jmp    c001bb44 <sysShutdown(regs*)+0x18>
c001bb68:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001bb6d:	8b 10                	mov    edx,DWORD PTR [eax]
c001bb6f:	6a 00                	push   0x0
c001bb71:	6a 00                	push   0x0
c001bb73:	6a 01                	push   0x1
c001bb75:	eb e8                	jmp    c001bb5f <sysShutdown(regs*)+0x33>
c001bb77:	a1 00 15 03 c0       	mov    eax,ds:0xc0031500
c001bb7c:	85 c0                	test   eax,eax
c001bb7e:	74 02                	je     c001bb82 <sysShutdown(regs*)+0x56>
c001bb80:	ff d0                	call   eax
c001bb82:	31 c0                	xor    eax,eax
c001bb84:	31 d2                	xor    edx,edx
c001bb86:	83 c4 0c             	add    esp,0xc
c001bb89:	c3                   	ret    

c001bb8a <sysCallRealpath(regs*)>:
c001bb8a:	83 ec 0c             	sub    esp,0xc
c001bb8d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bb91:	8b 50 28             	mov    edx,DWORD PTR [eax+0x28]
c001bb94:	85 d2                	test   edx,edx
c001bb96:	74 07                	je     c001bb9f <sysCallRealpath(regs*)+0x15>
c001bb98:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c001bb9b:	85 c0                	test   eax,eax
c001bb9d:	75 0b                	jne    c001bbaa <sysCallRealpath(regs*)+0x20>
c001bb9f:	b8 01 00 00 00       	mov    eax,0x1
c001bba4:	31 d2                	xor    edx,edx
c001bba6:	83 c4 0c             	add    esp,0xc
c001bba9:	c3                   	ret    
c001bbaa:	51                   	push   ecx
c001bbab:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001bbb1:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001bbb4:	81 c1 0c 01 00 00    	add    ecx,0x10c
c001bbba:	51                   	push   ecx
c001bbbb:	52                   	push   edx
c001bbbc:	50                   	push   eax
c001bbbd:	e8 3a 76 ff ff       	call   c00131fc <Fs::standardiseFiles(char*, char const*, char const*)>
c001bbc2:	83 c4 10             	add    esp,0x10
c001bbc5:	31 c0                	xor    eax,eax
c001bbc7:	31 d2                	xor    edx,edx
c001bbc9:	83 c4 0c             	add    esp,0xc
c001bbcc:	c3                   	ret    

c001bbcd <sysCallGetArgc(regs*)>:
c001bbcd:	83 ec 14             	sub    esp,0x14
c001bbd0:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbd5:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbd8:	ff b0 36 05 00 00    	push   DWORD PTR [eax+0x536]
c001bbde:	68 c8 c7 02 c0       	push   0xc002c7c8
c001bbe3:	e8 5f 72 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001bbe8:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bbed:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bbf0:	8b 80 36 05 00 00    	mov    eax,DWORD PTR [eax+0x536]
c001bbf6:	83 c4 1c             	add    esp,0x1c
c001bbf9:	99                   	cdq    
c001bbfa:	c3                   	ret    

c001bbfb <sysCallReadDir(regs*)>:
c001bbfb:	53                   	push   ebx
c001bbfc:	83 ec 18             	sub    esp,0x18
c001bbff:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bc03:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bc06:	83 f8 02             	cmp    eax,0x2
c001bc09:	76 53                	jbe    c001bc5e <sysCallReadDir(regs*)+0x63>
c001bc0b:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bc0e:	81 fa 00 ff ff 0f    	cmp    edx,0xfffff00
c001bc14:	77 4f                	ja     c001bc65 <sysCallReadDir(regs*)+0x6a>
c001bc16:	83 ec 0c             	sub    esp,0xc
c001bc19:	50                   	push   eax
c001bc1a:	e8 cc 5c ff ff       	call   c00118eb <getFromFileDescriptor(int)>
c001bc1f:	83 c4 10             	add    esp,0x10
c001bc22:	85 c0                	test   eax,eax
c001bc24:	74 50                	je     c001bc76 <sysCallReadDir(regs*)+0x7b>
c001bc26:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001bc2e:	83 ec 0c             	sub    esp,0xc
c001bc31:	8b 10                	mov    edx,DWORD PTR [eax]
c001bc33:	8d 4c 24 18          	lea    ecx,[esp+0x18]
c001bc37:	51                   	push   ecx
c001bc38:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bc3b:	6a 00                	push   0x0
c001bc3d:	68 10 01 00 00       	push   0x110
c001bc42:	50                   	push   eax
c001bc43:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001bc46:	83 c4 20             	add    esp,0x20
c001bc49:	85 c0                	test   eax,eax
c001bc4b:	74 38                	je     c001bc85 <sysCallReadDir(regs*)+0x8a>
c001bc4d:	83 f8 07             	cmp    eax,0x7
c001bc50:	74 0c                	je     c001bc5e <sysCallReadDir(regs*)+0x63>
c001bc52:	b8 02 00 00 00       	mov    eax,0x2
c001bc57:	31 d2                	xor    edx,edx
c001bc59:	83 c4 18             	add    esp,0x18
c001bc5c:	5b                   	pop    ebx
c001bc5d:	c3                   	ret    
c001bc5e:	b8 01 00 00 00       	mov    eax,0x1
c001bc63:	eb f2                	jmp    c001bc57 <sysCallReadDir(regs*)+0x5c>
c001bc65:	83 ec 08             	sub    esp,0x8
c001bc68:	52                   	push   edx
c001bc69:	68 ec c8 02 c0       	push   0xc002c8ec
c001bc6e:	e8 d4 71 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001bc73:	83 c4 10             	add    esp,0x10
c001bc76:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bc7b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bc80:	83 c4 18             	add    esp,0x18
c001bc83:	5b                   	pop    ebx
c001bc84:	c3                   	ret    
c001bc85:	31 c0                	xor    eax,eax
c001bc87:	eb ce                	jmp    c001bc57 <sysCallReadDir(regs*)+0x5c>

c001bc89 <sysCallIsATTY(regs*)>:
c001bc89:	83 ec 0c             	sub    esp,0xc
c001bc8c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bc90:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bc93:	83 f8 02             	cmp    eax,0x2
c001bc96:	76 07                	jbe    c001bc9f <sysCallIsATTY(regs*)+0x16>
c001bc98:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bc9d:	75 26                	jne    c001bcc5 <sysCallIsATTY(regs*)+0x3c>
c001bc9f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bca4:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001bca7:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001bcad:	85 c0                	test   eax,eax
c001bcaf:	74 24                	je     c001bcd5 <sysCallIsATTY(regs*)+0x4c>
c001bcb1:	83 ec 0c             	sub    esp,0xc
c001bcb4:	8b 10                	mov    edx,DWORD PTR [eax]
c001bcb6:	50                   	push   eax
c001bcb7:	ff 12                	call   DWORD PTR [edx]
c001bcb9:	31 d2                	xor    edx,edx
c001bcbb:	0f b6 c0             	movzx  eax,al
c001bcbe:	83 c4 10             	add    esp,0x10
c001bcc1:	83 c4 0c             	add    esp,0xc
c001bcc4:	c3                   	ret    
c001bcc5:	83 ec 0c             	sub    esp,0xc
c001bcc8:	50                   	push   eax
c001bcc9:	e8 1d 5c ff ff       	call   c00118eb <getFromFileDescriptor(int)>
c001bcce:	83 c4 10             	add    esp,0x10
c001bcd1:	85 c0                	test   eax,eax
c001bcd3:	75 dc                	jne    c001bcb1 <sysCallIsATTY(regs*)+0x28>
c001bcd5:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bcda:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bcdf:	83 c4 0c             	add    esp,0xc
c001bce2:	c3                   	ret    

c001bce3 <sysCallSeek(regs*)>:
c001bce3:	53                   	push   ebx
c001bce4:	83 ec 08             	sub    esp,0x8
c001bce7:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bceb:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bcee:	83 f8 02             	cmp    eax,0x2
c001bcf1:	76 4a                	jbe    c001bd3d <sysCallSeek(regs*)+0x5a>
c001bcf3:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bcf8:	77 32                	ja     c001bd2c <sysCallSeek(regs*)+0x49>
c001bcfa:	83 ec 0c             	sub    esp,0xc
c001bcfd:	50                   	push   eax
c001bcfe:	e8 e8 5b ff ff       	call   c00118eb <getFromFileDescriptor(int)>
c001bd03:	83 c4 0c             	add    esp,0xc
c001bd06:	8b 4b 28             	mov    ecx,DWORD PTR [ebx+0x28]
c001bd09:	31 db                	xor    ebx,ebx
c001bd0b:	53                   	push   ebx
c001bd0c:	51                   	push   ecx
c001bd0d:	50                   	push   eax
c001bd0e:	e8 b5 77 ff ff       	call   c00134c8 <File::seek(unsigned long long)>
c001bd13:	83 c4 10             	add    esp,0x10
c001bd16:	85 c0                	test   eax,eax
c001bd18:	0f 95 c0             	setne  al
c001bd1b:	31 d2                	xor    edx,edx
c001bd1d:	0f b6 c0             	movzx  eax,al
c001bd20:	f7 d8                	neg    eax
c001bd22:	83 d2 00             	adc    edx,0x0
c001bd25:	83 c4 08             	add    esp,0x8
c001bd28:	f7 da                	neg    edx
c001bd2a:	5b                   	pop    ebx
c001bd2b:	c3                   	ret    
c001bd2c:	83 ec 08             	sub    esp,0x8
c001bd2f:	50                   	push   eax
c001bd30:	68 d3 c7 02 c0       	push   0xc002c7d3
c001bd35:	e8 0d 71 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001bd3a:	83 c4 10             	add    esp,0x10
c001bd3d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bd42:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bd47:	83 c4 08             	add    esp,0x8
c001bd4a:	5b                   	pop    ebx
c001bd4b:	c3                   	ret    

c001bd4c <sysCallTell(regs*)>:
c001bd4c:	53                   	push   ebx
c001bd4d:	83 ec 08             	sub    esp,0x8
c001bd50:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bd54:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bd57:	83 f8 02             	cmp    eax,0x2
c001bd5a:	76 5e                	jbe    c001bdba <sysCallTell(regs*)+0x6e>
c001bd5c:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bd61:	77 2d                	ja     c001bd90 <sysCallTell(regs*)+0x44>
c001bd63:	83 ec 0c             	sub    esp,0xc
c001bd66:	50                   	push   eax
c001bd67:	e8 7f 5b ff ff       	call   c00118eb <getFromFileDescriptor(int)>
c001bd6c:	5a                   	pop    edx
c001bd6d:	59                   	pop    ecx
c001bd6e:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bd71:	50                   	push   eax
c001bd72:	e8 a7 77 ff ff       	call   c001351e <File::tell(unsigned long long*)>
c001bd77:	83 c4 10             	add    esp,0x10
c001bd7a:	85 c0                	test   eax,eax
c001bd7c:	0f 95 c0             	setne  al
c001bd7f:	31 d2                	xor    edx,edx
c001bd81:	0f b6 c0             	movzx  eax,al
c001bd84:	f7 d8                	neg    eax
c001bd86:	83 d2 00             	adc    edx,0x0
c001bd89:	83 c4 08             	add    esp,0x8
c001bd8c:	f7 da                	neg    edx
c001bd8e:	5b                   	pop    ebx
c001bd8f:	c3                   	ret    
c001bd90:	83 ec 08             	sub    esp,0x8
c001bd93:	50                   	push   eax
c001bd94:	68 ed c7 02 c0       	push   0xc002c7ed
c001bd99:	e8 a9 70 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001bd9e:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001bda1:	83 c4 10             	add    esp,0x10
c001bda4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bdaa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bdb1:	31 d2                	xor    edx,edx
c001bdb3:	31 c0                	xor    eax,eax
c001bdb5:	83 c4 08             	add    esp,0x8
c001bdb8:	5b                   	pop    ebx
c001bdb9:	c3                   	ret    
c001bdba:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bdbf:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bdc4:	83 c4 08             	add    esp,0x8
c001bdc7:	5b                   	pop    ebx
c001bdc8:	c3                   	ret    

c001bdc9 <sysCallSize(regs*)>:
c001bdc9:	53                   	push   ebx
c001bdca:	83 ec 18             	sub    esp,0x18
c001bdcd:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001bdd1:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001bdd4:	83 f8 02             	cmp    eax,0x2
c001bdd7:	76 64                	jbe    c001be3d <sysCallSize(regs*)+0x74>
c001bdd9:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bdde:	77 33                	ja     c001be13 <sysCallSize(regs*)+0x4a>
c001bde0:	83 ec 0c             	sub    esp,0xc
c001bde3:	50                   	push   eax
c001bde4:	e8 02 5b ff ff       	call   c00118eb <getFromFileDescriptor(int)>
c001bde9:	83 c4 0c             	add    esp,0xc
c001bdec:	8d 54 24 13          	lea    edx,[esp+0x13]
c001bdf0:	52                   	push   edx
c001bdf1:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c001bdf4:	50                   	push   eax
c001bdf5:	e8 bc 78 ff ff       	call   c00136b6 <File::stat(unsigned long long*, bool*)>
c001bdfa:	83 c4 10             	add    esp,0x10
c001bdfd:	85 c0                	test   eax,eax
c001bdff:	0f 95 c0             	setne  al
c001be02:	31 d2                	xor    edx,edx
c001be04:	0f b6 c0             	movzx  eax,al
c001be07:	f7 d8                	neg    eax
c001be09:	83 d2 00             	adc    edx,0x0
c001be0c:	83 c4 18             	add    esp,0x18
c001be0f:	f7 da                	neg    edx
c001be11:	5b                   	pop    ebx
c001be12:	c3                   	ret    
c001be13:	83 ec 08             	sub    esp,0x8
c001be16:	50                   	push   eax
c001be17:	68 07 c8 02 c0       	push   0xc002c807
c001be1c:	e8 26 70 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001be21:	8b 43 28             	mov    eax,DWORD PTR [ebx+0x28]
c001be24:	83 c4 10             	add    esp,0x10
c001be27:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001be2d:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001be34:	31 d2                	xor    edx,edx
c001be36:	31 c0                	xor    eax,eax
c001be38:	83 c4 18             	add    esp,0x18
c001be3b:	5b                   	pop    ebx
c001be3c:	c3                   	ret    
c001be3d:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001be42:	ba ff ff ff ff       	mov    edx,0xffffffff
c001be47:	83 c4 18             	add    esp,0x18
c001be4a:	5b                   	pop    ebx
c001be4b:	c3                   	ret    

c001be4c <sysCallSizeFromFilename(regs*)>:
c001be4c:	57                   	push   edi
c001be4d:	56                   	push   esi
c001be4e:	53                   	push   ebx
c001be4f:	83 ec 20             	sub    esp,0x20
c001be52:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001be56:	8b 5f 20             	mov    ebx,DWORD PTR [edi+0x20]
c001be59:	83 fb 02             	cmp    ebx,0x2
c001be5c:	0f 86 99 00 00 00    	jbe    c001befb <sysCallSizeFromFilename(regs*)+0xaf>
c001be62:	81 fb 00 ff ff 0f    	cmp    ebx,0xfffff00
c001be68:	77 65                	ja     c001becf <sysCallSizeFromFilename(regs*)+0x83>
c001be6a:	83 ec 0c             	sub    esp,0xc
c001be6d:	68 14 01 00 00       	push   0x114
c001be72:	e8 31 3a ff ff       	call   c000f8a8 <malloc>
c001be77:	83 c4 0c             	add    esp,0xc
c001be7a:	89 c6                	mov    esi,eax
c001be7c:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001be81:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001be84:	53                   	push   ebx
c001be85:	56                   	push   esi
c001be86:	e8 1b 75 ff ff       	call   c00133a6 <File::File(char const*, Process*)>
c001be8b:	83 c4 0c             	add    esp,0xc
c001be8e:	8d 44 24 23          	lea    eax,[esp+0x23]
c001be92:	50                   	push   eax
c001be93:	ff 77 28             	push   DWORD PTR [edi+0x28]
c001be96:	56                   	push   esi
c001be97:	e8 1a 78 ff ff       	call   c00136b6 <File::stat(unsigned long long*, bool*)>
c001be9c:	83 c4 10             	add    esp,0x10
c001be9f:	85 f6                	test   esi,esi
c001bea1:	74 14                	je     c001beb7 <sysCallSizeFromFilename(regs*)+0x6b>
c001bea3:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001bea7:	8b 16                	mov    edx,DWORD PTR [esi]
c001bea9:	83 ec 0c             	sub    esp,0xc
c001beac:	56                   	push   esi
c001bead:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001beb0:	83 c4 10             	add    esp,0x10
c001beb3:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001beb7:	85 c0                	test   eax,eax
c001beb9:	0f 95 c0             	setne  al
c001bebc:	31 d2                	xor    edx,edx
c001bebe:	0f b6 c0             	movzx  eax,al
c001bec1:	f7 d8                	neg    eax
c001bec3:	83 d2 00             	adc    edx,0x0
c001bec6:	83 c4 20             	add    esp,0x20
c001bec9:	f7 da                	neg    edx
c001becb:	5b                   	pop    ebx
c001becc:	5e                   	pop    esi
c001becd:	5f                   	pop    edi
c001bece:	c3                   	ret    
c001becf:	83 ec 08             	sub    esp,0x8
c001bed2:	53                   	push   ebx
c001bed3:	68 07 c8 02 c0       	push   0xc002c807
c001bed8:	e8 6a 6f ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001bedd:	8b 47 28             	mov    eax,DWORD PTR [edi+0x28]
c001bee0:	83 c4 10             	add    esp,0x10
c001bee3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c001bee9:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001bef0:	31 d2                	xor    edx,edx
c001bef2:	83 c4 20             	add    esp,0x20
c001bef5:	31 c0                	xor    eax,eax
c001bef7:	5b                   	pop    ebx
c001bef8:	5e                   	pop    esi
c001bef9:	5f                   	pop    edi
c001befa:	c3                   	ret    
c001befb:	83 c4 20             	add    esp,0x20
c001befe:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf03:	5b                   	pop    ebx
c001bf04:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf09:	5e                   	pop    esi
c001bf0a:	5f                   	pop    edi
c001bf0b:	c3                   	ret    

c001bf0c <sysCallClose(regs*)>:
c001bf0c:	53                   	push   ebx
c001bf0d:	83 ec 08             	sub    esp,0x8
c001bf10:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001bf14:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001bf17:	83 f8 02             	cmp    eax,0x2
c001bf1a:	76 50                	jbe    c001bf6c <sysCallClose(regs*)+0x60>
c001bf1c:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001bf21:	74 58                	je     c001bf7b <sysCallClose(regs*)+0x6f>
c001bf23:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001bf28:	74 60                	je     c001bf8a <sysCallClose(regs*)+0x7e>
c001bf2a:	77 2f                	ja     c001bf5b <sysCallClose(regs*)+0x4f>
c001bf2c:	83 ec 0c             	sub    esp,0xc
c001bf2f:	50                   	push   eax
c001bf30:	e8 b6 59 ff ff       	call   c00118eb <getFromFileDescriptor(int)>
c001bf35:	89 c3                	mov    ebx,eax
c001bf37:	89 04 24             	mov    DWORD PTR [esp],eax
c001bf3a:	e8 29 75 ff ff       	call   c0013468 <File::close()>
c001bf3f:	83 c4 10             	add    esp,0x10
c001bf42:	85 db                	test   ebx,ebx
c001bf44:	74 0c                	je     c001bf52 <sysCallClose(regs*)+0x46>
c001bf46:	83 ec 0c             	sub    esp,0xc
c001bf49:	8b 03                	mov    eax,DWORD PTR [ebx]
c001bf4b:	53                   	push   ebx
c001bf4c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001bf4f:	83 c4 10             	add    esp,0x10
c001bf52:	31 c0                	xor    eax,eax
c001bf54:	31 d2                	xor    edx,edx
c001bf56:	83 c4 08             	add    esp,0x8
c001bf59:	5b                   	pop    ebx
c001bf5a:	c3                   	ret    
c001bf5b:	83 ec 08             	sub    esp,0x8
c001bf5e:	50                   	push   eax
c001bf5f:	68 10 c9 02 c0       	push   0xc002c910
c001bf64:	e8 de 6e ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001bf69:	83 c4 10             	add    esp,0x10
c001bf6c:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001bf71:	ba ff ff ff ff       	mov    edx,0xffffffff
c001bf76:	83 c4 08             	add    esp,0x8
c001bf79:	5b                   	pop    ebx
c001bf7a:	c3                   	ret    
c001bf7b:	83 ec 0c             	sub    esp,0xc
c001bf7e:	68 22 c8 02 c0       	push   0xc002c822
c001bf83:	e8 bf 6e ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001bf88:	eb c5                	jmp    c001bf4f <sysCallClose(regs*)+0x43>
c001bf8a:	83 ec 0c             	sub    esp,0xc
c001bf8d:	68 30 c8 02 c0       	push   0xc002c830
c001bf92:	eb ef                	jmp    c001bf83 <sysCallClose(regs*)+0x77>

c001bf94 <sysCallOpenDir(regs*)>:
c001bf94:	56                   	push   esi
c001bf95:	53                   	push   ebx
c001bf96:	53                   	push   ebx
c001bf97:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001bf9b:	8b 73 20             	mov    esi,DWORD PTR [ebx+0x20]
c001bf9e:	85 f6                	test   esi,esi
c001bfa0:	74 59                	je     c001bffb <sysCallOpenDir(regs*)+0x67>
c001bfa2:	83 ec 0c             	sub    esp,0xc
c001bfa5:	68 14 01 00 00       	push   0x114
c001bfaa:	e8 f9 38 ff ff       	call   c000f8a8 <malloc>
c001bfaf:	83 c4 0c             	add    esp,0xc
c001bfb2:	89 c6                	mov    esi,eax
c001bfb4:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001bfb9:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001bfbc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001bfbf:	56                   	push   esi
c001bfc0:	e8 8d 78 ff ff       	call   c0013852 <Directory::Directory(char const*, Process*)>
c001bfc5:	83 c4 10             	add    esp,0x10
c001bfc8:	85 f6                	test   esi,esi
c001bfca:	74 2f                	je     c001bffb <sysCallOpenDir(regs*)+0x67>
c001bfcc:	83 ec 0c             	sub    esp,0xc
c001bfcf:	56                   	push   esi
c001bfd0:	e8 e1 78 ff ff       	call   c00138b6 <Directory::open()>
c001bfd5:	83 c4 10             	add    esp,0x10
c001bfd8:	85 c0                	test   eax,eax
c001bfda:	75 1f                	jne    c001bffb <sysCallOpenDir(regs*)+0x67>
c001bfdc:	83 ec 0c             	sub    esp,0xc
c001bfdf:	56                   	push   esi
c001bfe0:	e8 11 56 ff ff       	call   c00115f6 <UnixFile::getFileDescriptor()>
c001bfe5:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001bfe8:	83 c4 10             	add    esp,0x10
c001bfeb:	89 02                	mov    DWORD PTR [edx],eax
c001bfed:	c1 f8 1f             	sar    eax,0x1f
c001bff0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001bff3:	31 c0                	xor    eax,eax
c001bff5:	59                   	pop    ecx
c001bff6:	31 d2                	xor    edx,edx
c001bff8:	5b                   	pop    ebx
c001bff9:	5e                   	pop    esi
c001bffa:	c3                   	ret    
c001bffb:	59                   	pop    ecx
c001bffc:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c001:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c006:	5b                   	pop    ebx
c001c007:	5e                   	pop    esi
c001c008:	c3                   	ret    

c001c009 <sysCallCloseDir(regs*)>:
c001c009:	53                   	push   ebx
c001c00a:	83 ec 08             	sub    esp,0x8
c001c00d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c011:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c001c014:	83 f8 02             	cmp    eax,0x2
c001c017:	76 47                	jbe    c001c060 <sysCallCloseDir(regs*)+0x57>
c001c019:	3d 00 ff ff 0f       	cmp    eax,0xfffff00
c001c01e:	77 2f                	ja     c001c04f <sysCallCloseDir(regs*)+0x46>
c001c020:	83 ec 0c             	sub    esp,0xc
c001c023:	50                   	push   eax
c001c024:	e8 c2 58 ff ff       	call   c00118eb <getFromFileDescriptor(int)>
c001c029:	89 c3                	mov    ebx,eax
c001c02b:	89 04 24             	mov    DWORD PTR [esp],eax
c001c02e:	e8 df 78 ff ff       	call   c0013912 <Directory::close()>
c001c033:	83 c4 10             	add    esp,0x10
c001c036:	85 db                	test   ebx,ebx
c001c038:	74 0c                	je     c001c046 <sysCallCloseDir(regs*)+0x3d>
c001c03a:	83 ec 0c             	sub    esp,0xc
c001c03d:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c03f:	53                   	push   ebx
c001c040:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c043:	83 c4 10             	add    esp,0x10
c001c046:	31 c0                	xor    eax,eax
c001c048:	31 d2                	xor    edx,edx
c001c04a:	83 c4 08             	add    esp,0x8
c001c04d:	5b                   	pop    ebx
c001c04e:	c3                   	ret    
c001c04f:	83 ec 08             	sub    esp,0x8
c001c052:	50                   	push   eax
c001c053:	68 38 c9 02 c0       	push   0xc002c938
c001c058:	e8 ea 6d ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001c05d:	83 c4 10             	add    esp,0x10
c001c060:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c065:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c06a:	83 c4 08             	add    esp,0x8
c001c06d:	5b                   	pop    ebx
c001c06e:	c3                   	ret    

c001c06f <sysCallMakeDir(regs*)>:
c001c06f:	56                   	push   esi
c001c070:	53                   	push   ebx
c001c071:	83 ec 10             	sub    esp,0x10
c001c074:	68 14 01 00 00       	push   0x114
c001c079:	e8 2a 38 ff ff       	call   c000f8a8 <malloc>
c001c07e:	83 c4 0c             	add    esp,0xc
c001c081:	89 c3                	mov    ebx,eax
c001c083:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c088:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c08b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001c08f:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c092:	53                   	push   ebx
c001c093:	e8 ba 77 ff ff       	call   c0013852 <Directory::Directory(char const*, Process*)>
c001c098:	83 c4 10             	add    esp,0x10
c001c09b:	85 db                	test   ebx,ebx
c001c09d:	74 32                	je     c001c0d1 <sysCallMakeDir(regs*)+0x62>
c001c09f:	83 ec 0c             	sub    esp,0xc
c001c0a2:	53                   	push   ebx
c001c0a3:	e8 ee 79 ff ff       	call   c0013a96 <Directory::create()>
c001c0a8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0ab:	89 c6                	mov    esi,eax
c001c0ad:	e8 60 78 ff ff       	call   c0013912 <Directory::close()>
c001c0b2:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c0b4:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c0b7:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001c0ba:	83 c4 10             	add    esp,0x10
c001c0bd:	31 c0                	xor    eax,eax
c001c0bf:	59                   	pop    ecx
c001c0c0:	85 f6                	test   esi,esi
c001c0c2:	5b                   	pop    ebx
c001c0c3:	0f 95 c0             	setne  al
c001c0c6:	5e                   	pop    esi
c001c0c7:	31 d2                	xor    edx,edx
c001c0c9:	f7 d8                	neg    eax
c001c0cb:	83 d2 00             	adc    edx,0x0
c001c0ce:	f7 da                	neg    edx
c001c0d0:	c3                   	ret    
c001c0d1:	59                   	pop    ecx
c001c0d2:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c0d7:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c0dc:	5b                   	pop    ebx
c001c0dd:	5e                   	pop    esi
c001c0de:	c3                   	ret    

c001c0df <sysCallWait(regs*)>:
c001c0df:	83 ec 10             	sub    esp,0x10
c001c0e2:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001c0e6:	ff 70 28             	push   DWORD PTR [eax+0x28]
c001c0e9:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c0ec:	ff 70 20             	push   DWORD PTR [eax+0x20]
c001c0ef:	e8 c8 25 00 00       	call   c001e6bc <waitTask(int, int*, int)>
c001c0f4:	83 c4 1c             	add    esp,0x1c
c001c0f7:	99                   	cdq    
c001c0f8:	c3                   	ret    

c001c0f9 <sysCallNotImpl(regs*)>:
c001c0f9:	83 ec 18             	sub    esp,0x18
c001c0fc:	68 3e c8 02 c0       	push   0xc002c83e
c001c101:	e8 fb e6 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001c106:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c10b:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c110:	83 c4 1c             	add    esp,0x1c
c001c113:	c3                   	ret    

c001c114 <sysPanic(regs*)>:
c001c114:	83 ec 18             	sub    esp,0x18
c001c117:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001c11b:	ff 70 24             	push   DWORD PTR [eax+0x24]
c001c11e:	e8 de e6 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001c123:	c7 04 24 58 c8 02 c0 	mov    DWORD PTR [esp],0xc002c858
c001c12a:	e8 d2 e6 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001c12f:	b8 01 00 00 00       	mov    eax,0x1
c001c134:	31 d2                	xor    edx,edx
c001c136:	83 c4 1c             	add    esp,0x1c
c001c139:	c3                   	ret    

c001c13a <sysCallRmdir(regs*)>:
c001c13a:	56                   	push   esi
c001c13b:	53                   	push   ebx
c001c13c:	83 ec 20             	sub    esp,0x20
c001c13f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c143:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c146:	68 14 01 00 00       	push   0x114
c001c14b:	e8 58 37 ff ff       	call   c000f8a8 <malloc>
c001c150:	83 c4 0c             	add    esp,0xc
c001c153:	89 c3                	mov    ebx,eax
c001c155:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c15a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c15d:	56                   	push   esi
c001c15e:	53                   	push   ebx
c001c15f:	e8 42 72 ff ff       	call   c00133a6 <File::File(char const*, Process*)>
c001c164:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c167:	e8 16 74 ff ff       	call   c0013582 <File::unlink()>
c001c16c:	83 c4 10             	add    esp,0x10
c001c16f:	85 db                	test   ebx,ebx
c001c171:	74 14                	je     c001c187 <sysCallRmdir(regs*)+0x4d>
c001c173:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c177:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c179:	83 ec 0c             	sub    esp,0xc
c001c17c:	53                   	push   ebx
c001c17d:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c180:	83 c4 10             	add    esp,0x10
c001c183:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c187:	85 c0                	test   eax,eax
c001c189:	0f 95 c0             	setne  al
c001c18c:	31 d2                	xor    edx,edx
c001c18e:	0f b6 c0             	movzx  eax,al
c001c191:	f7 d8                	neg    eax
c001c193:	83 d2 00             	adc    edx,0x0
c001c196:	83 c4 14             	add    esp,0x14
c001c199:	f7 da                	neg    edx
c001c19b:	5b                   	pop    ebx
c001c19c:	5e                   	pop    esi
c001c19d:	c3                   	ret    

c001c19e <sysCallUnlink(regs*)>:
c001c19e:	56                   	push   esi
c001c19f:	53                   	push   ebx
c001c1a0:	83 ec 20             	sub    esp,0x20
c001c1a3:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c001c1a7:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c1aa:	68 14 01 00 00       	push   0x114
c001c1af:	e8 f4 36 ff ff       	call   c000f8a8 <malloc>
c001c1b4:	83 c4 0c             	add    esp,0xc
c001c1b7:	89 c3                	mov    ebx,eax
c001c1b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c1be:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c1c1:	56                   	push   esi
c001c1c2:	53                   	push   ebx
c001c1c3:	e8 de 71 ff ff       	call   c00133a6 <File::File(char const*, Process*)>
c001c1c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c1cb:	e8 b2 73 ff ff       	call   c0013582 <File::unlink()>
c001c1d0:	83 c4 10             	add    esp,0x10
c001c1d3:	85 db                	test   ebx,ebx
c001c1d5:	74 14                	je     c001c1eb <sysCallUnlink(regs*)+0x4d>
c001c1d7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c1db:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c1dd:	83 ec 0c             	sub    esp,0xc
c001c1e0:	53                   	push   ebx
c001c1e1:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c1e4:	83 c4 10             	add    esp,0x10
c001c1e7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c1eb:	85 c0                	test   eax,eax
c001c1ed:	0f 95 c0             	setne  al
c001c1f0:	31 d2                	xor    edx,edx
c001c1f2:	0f b6 c0             	movzx  eax,al
c001c1f5:	f7 d8                	neg    eax
c001c1f7:	83 d2 00             	adc    edx,0x0
c001c1fa:	83 c4 14             	add    esp,0x14
c001c1fd:	f7 da                	neg    edx
c001c1ff:	5b                   	pop    ebx
c001c200:	5e                   	pop    esi
c001c201:	c3                   	ret    

c001c202 <sysCallGetArgv(regs*)>:
c001c202:	83 ec 0c             	sub    esp,0xc
c001c205:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001c209:	8b 42 20             	mov    eax,DWORD PTR [edx+0x20]
c001c20c:	85 c0                	test   eax,eax
c001c20e:	78 2b                	js     c001c23b <sysCallGetArgv(regs*)+0x39>
c001c210:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001c216:	8b 49 40             	mov    ecx,DWORD PTR [ecx+0x40]
c001c219:	3b 81 36 05 00 00    	cmp    eax,DWORD PTR [ecx+0x536]
c001c21f:	7d 1a                	jge    c001c23b <sysCallGetArgv(regs*)+0x39>
c001c221:	8b 84 81 3a 05 00 00 	mov    eax,DWORD PTR [ecx+eax*4+0x53a]
c001c228:	85 c0                	test   eax,eax
c001c22a:	74 17                	je     c001c243 <sysCallGetArgv(regs*)+0x41>
c001c22c:	83 ec 08             	sub    esp,0x8
c001c22f:	50                   	push   eax
c001c230:	ff 72 24             	push   DWORD PTR [edx+0x24]
c001c233:	e8 f0 45 fe ff       	call   c0000828 <strcpy>
c001c238:	83 c4 10             	add    esp,0x10
c001c23b:	31 c0                	xor    eax,eax
c001c23d:	31 d2                	xor    edx,edx
c001c23f:	83 c4 0c             	add    esp,0xc
c001c242:	c3                   	ret    
c001c243:	b8 01 00 00 00       	mov    eax,0x1
c001c248:	31 d2                	xor    edx,edx
c001c24a:	83 c4 0c             	add    esp,0xc
c001c24d:	c3                   	ret    

c001c24e <sysCallTTYName(regs*)>:
c001c24e:	56                   	push   esi
c001c24f:	53                   	push   ebx
c001c250:	53                   	push   ebx
c001c251:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001c255:	8b 46 24             	mov    eax,DWORD PTR [esi+0x24]
c001c258:	85 c0                	test   eax,eax
c001c25a:	74 5f                	je     c001c2bb <sysCallTTYName(regs*)+0x6d>
c001c25c:	8b 46 20             	mov    eax,DWORD PTR [esi+0x20]
c001c25f:	83 f8 02             	cmp    eax,0x2
c001c262:	77 3e                	ja     c001c2a2 <sysCallTTYName(regs*)+0x54>
c001c264:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c269:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c26c:	8b 98 26 05 00 00    	mov    ebx,DWORD PTR [eax+0x526]
c001c272:	85 db                	test   ebx,ebx
c001c274:	74 45                	je     c001c2bb <sysCallTTYName(regs*)+0x6d>
c001c276:	83 ec 0c             	sub    esp,0xc
c001c279:	8b 03                	mov    eax,DWORD PTR [ebx]
c001c27b:	53                   	push   ebx
c001c27c:	ff 10                	call   DWORD PTR [eax]
c001c27e:	83 c4 10             	add    esp,0x10
c001c281:	84 c0                	test   al,al
c001c283:	74 41                	je     c001c2c6 <sysCallTTYName(regs*)+0x78>
c001c285:	83 ec 08             	sub    esp,0x8
c001c288:	81 c3 82 00 00 00    	add    ebx,0x82
c001c28e:	53                   	push   ebx
c001c28f:	ff 76 24             	push   DWORD PTR [esi+0x24]
c001c292:	e8 91 45 fe ff       	call   c0000828 <strcpy>
c001c297:	83 c4 10             	add    esp,0x10
c001c29a:	31 c0                	xor    eax,eax
c001c29c:	59                   	pop    ecx
c001c29d:	31 d2                	xor    edx,edx
c001c29f:	5b                   	pop    ebx
c001c2a0:	5e                   	pop    esi
c001c2a1:	c3                   	ret    
c001c2a2:	3d 01 ff ff 0f       	cmp    eax,0xfffff01
c001c2a7:	74 bb                	je     c001c264 <sysCallTTYName(regs*)+0x16>
c001c2a9:	83 ec 0c             	sub    esp,0xc
c001c2ac:	50                   	push   eax
c001c2ad:	e8 39 56 ff ff       	call   c00118eb <getFromFileDescriptor(int)>
c001c2b2:	83 c4 10             	add    esp,0x10
c001c2b5:	89 c3                	mov    ebx,eax
c001c2b7:	85 db                	test   ebx,ebx
c001c2b9:	75 bb                	jne    c001c276 <sysCallTTYName(regs*)+0x28>
c001c2bb:	59                   	pop    ecx
c001c2bc:	b8 01 00 00 00       	mov    eax,0x1
c001c2c1:	31 d2                	xor    edx,edx
c001c2c3:	5b                   	pop    ebx
c001c2c4:	5e                   	pop    esi
c001c2c5:	c3                   	ret    
c001c2c6:	59                   	pop    ecx
c001c2c7:	b8 02 00 00 00       	mov    eax,0x2
c001c2cc:	31 d2                	xor    edx,edx
c001c2ce:	5b                   	pop    ebx
c001c2cf:	5e                   	pop    esi
c001c2d0:	c3                   	ret    

c001c2d1 <sysCallUSleep(regs*)>:
c001c2d1:	83 ec 14             	sub    esp,0x14
c001c2d4:	b8 e8 03 00 00       	mov    eax,0x3e8
c001c2d9:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c001c2dd:	69 4a 28 e8 03 00 00 	imul   ecx,DWORD PTR [edx+0x28],0x3e8
c001c2e4:	f7 62 20             	mul    DWORD PTR [edx+0x20]
c001c2e7:	01 ca                	add    edx,ecx
c001c2e9:	52                   	push   edx
c001c2ea:	50                   	push   eax
c001c2eb:	e8 a3 24 00 00       	call   c001e793 <nanoSleep(unsigned long long)>
c001c2f0:	31 c0                	xor    eax,eax
c001c2f2:	31 d2                	xor    edx,edx
c001c2f4:	83 c4 1c             	add    esp,0x1c
c001c2f7:	c3                   	ret    

c001c2f8 <sysCallSpawn(regs*)>:
c001c2f8:	56                   	push   esi
c001c2f9:	53                   	push   ebx
c001c2fa:	50                   	push   eax
c001c2fb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c2ff:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c302:	85 c0                	test   eax,eax
c001c304:	75 08                	jne    c001c30e <sysCallSpawn(regs*)+0x16>
c001c306:	59                   	pop    ecx
c001c307:	31 c0                	xor    eax,eax
c001c309:	31 d2                	xor    edx,edx
c001c30b:	5b                   	pop    ebx
c001c30c:	5e                   	pop    esi
c001c30d:	c3                   	ret    
c001c30e:	83 ec 08             	sub    esp,0x8
c001c311:	50                   	push   eax
c001c312:	68 67 c8 02 c0       	push   0xc002c867
c001c317:	e8 2b 6b ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001c31c:	c7 04 24 3f 07 00 00 	mov    DWORD PTR [esp],0x73f
c001c323:	e8 80 35 ff ff       	call   c000f8a8 <malloc>
c001c328:	83 c4 10             	add    esp,0x10
c001c32b:	89 c6                	mov    esi,eax
c001c32d:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c330:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c333:	85 c0                	test   eax,eax
c001c335:	75 32                	jne    c001c369 <sysCallSpawn(regs*)+0x71>
c001c337:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c33c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c33f:	52                   	push   edx
c001c340:	50                   	push   eax
c001c341:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c344:	56                   	push   esi
c001c345:	e8 26 1b 00 00       	call   c001de70 <Process::Process(char const*, Process*, char**)>
c001c34a:	83 c4 10             	add    esp,0x10
c001c34d:	80 be 3e 07 00 00 00 	cmp    BYTE PTR [esi+0x73e],0x0
c001c354:	75 b0                	jne    c001c306 <sysCallSpawn(regs*)+0xe>
c001c356:	83 ec 0c             	sub    esp,0xc
c001c359:	56                   	push   esi
c001c35a:	e8 f3 1f 00 00       	call   c001e352 <Process::createUserThread()>
c001c35f:	8b 06                	mov    eax,DWORD PTR [esi]
c001c361:	83 c4 10             	add    esp,0x10
c001c364:	99                   	cdq    
c001c365:	59                   	pop    ecx
c001c366:	5b                   	pop    ebx
c001c367:	5e                   	pop    esi
c001c368:	c3                   	ret    
c001c369:	31 c0                	xor    eax,eax
c001c36b:	eb d2                	jmp    c001c33f <sysCallSpawn(regs*)+0x47>

c001c36d <sysCallGetEnv(regs*)>:
c001c36d:	55                   	push   ebp
c001c36e:	57                   	push   edi
c001c36f:	56                   	push   esi
c001c370:	53                   	push   ebx
c001c371:	83 ec 28             	sub    esp,0x28
c001c374:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c001c378:	68 75 c8 02 c0       	push   0xc002c875
c001c37d:	e8 c5 6a ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001c382:	5f                   	pop    edi
c001c383:	8b 5e 24             	mov    ebx,DWORD PTR [esi+0x24]
c001c386:	5d                   	pop    ebp
c001c387:	53                   	push   ebx
c001c388:	68 a2 cb 02 c0       	push   0xc002cba2
c001c38d:	e8 b5 6a ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001c392:	58                   	pop    eax
c001c393:	8b 7e 20             	mov    edi,DWORD PTR [esi+0x20]
c001c396:	5a                   	pop    edx
c001c397:	57                   	push   edi
c001c398:	68 7e c8 02 c0       	push   0xc002c87e
c001c39d:	e8 a5 6a ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001c3a2:	59                   	pop    ecx
c001c3a3:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c3a8:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c3ab:	e8 6d e3 ff ff       	call   c001a71d <Krnl::getProcessTotalEnvCount(Process*)>
c001c3b0:	5a                   	pop    edx
c001c3b1:	89 c5                	mov    ebp,eax
c001c3b3:	59                   	pop    ecx
c001c3b4:	50                   	push   eax
c001c3b5:	68 88 c8 02 c0       	push   0xc002c888
c001c3ba:	e8 88 6a ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001c3bf:	83 c4 10             	add    esp,0x10
c001c3c2:	39 ef                	cmp    edi,ebp
c001c3c4:	7c 15                	jl     c001c3db <sysCallGetEnv(regs*)+0x6e>
c001c3c6:	85 db                	test   ebx,ebx
c001c3c8:	75 0c                	jne    c001c3d6 <sysCallGetEnv(regs*)+0x69>
c001c3ca:	83 c4 1c             	add    esp,0x1c
c001c3cd:	31 c0                	xor    eax,eax
c001c3cf:	5b                   	pop    ebx
c001c3d0:	31 d2                	xor    edx,edx
c001c3d2:	5e                   	pop    esi
c001c3d3:	5f                   	pop    edi
c001c3d4:	5d                   	pop    ebp
c001c3d5:	c3                   	ret    
c001c3d6:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c3d9:	eb ef                	jmp    c001c3ca <sysCallGetEnv(regs*)+0x5d>
c001c3db:	83 ec 0c             	sub    esp,0xc
c001c3de:	68 94 c8 02 c0       	push   0xc002c894
c001c3e3:	e8 5f 6a ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001c3e8:	8d 44 24 18          	lea    eax,[esp+0x18]
c001c3ec:	83 c4 0c             	add    esp,0xc
c001c3ef:	57                   	push   edi
c001c3f0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001c3f6:	ff 72 40             	push   DWORD PTR [edx+0x40]
c001c3f9:	50                   	push   eax
c001c3fa:	e8 3e e3 ff ff       	call   c001a73d <Krnl::getProcessEnvPair(Process*, int)>
c001c3ff:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c001c403:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001c407:	68 53 cc 02 c0       	push   0xc002cc53
c001c40c:	e8 36 6a ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001c411:	83 c4 10             	add    esp,0x10
c001c414:	8b 76 28             	mov    esi,DWORD PTR [esi+0x28]
c001c417:	85 f6                	test   esi,esi
c001c419:	75 47                	jne    c001c462 <sysCallGetEnv(regs*)+0xf5>
c001c41b:	83 ec 0c             	sub    esp,0xc
c001c41e:	55                   	push   ebp
c001c41f:	e8 64 43 fe ff       	call   c0000788 <strlen>
c001c424:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c427:	89 c3                	mov    ebx,eax
c001c429:	e8 5a 43 fe ff       	call   c0000788 <strlen>
c001c42e:	5a                   	pop    edx
c001c42f:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c433:	59                   	pop    ecx
c001c434:	50                   	push   eax
c001c435:	68 97 c8 02 c0       	push   0xc002c897
c001c43a:	e8 08 6a ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001c43f:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001c442:	e8 41 43 fe ff       	call   c0000788 <strlen>
c001c447:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c44a:	89 c3                	mov    ebx,eax
c001c44c:	e8 37 43 fe ff       	call   c0000788 <strlen>
c001c451:	83 c4 10             	add    esp,0x10
c001c454:	8d 44 03 01          	lea    eax,[ebx+eax*1+0x1]
c001c458:	83 c4 1c             	add    esp,0x1c
c001c45b:	31 d2                	xor    edx,edx
c001c45d:	5b                   	pop    ebx
c001c45e:	5e                   	pop    esi
c001c45f:	5f                   	pop    edi
c001c460:	5d                   	pop    ebp
c001c461:	c3                   	ret    
c001c462:	83 ec 0c             	sub    esp,0xc
c001c465:	68 6d cc 02 c0       	push   0xc002cc6d
c001c46a:	e8 d8 69 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001c46f:	c6 03 00             	mov    BYTE PTR [ebx],0x0
c001c472:	58                   	pop    eax
c001c473:	5a                   	pop    edx
c001c474:	55                   	push   ebp
c001c475:	53                   	push   ebx
c001c476:	e8 ad 43 fe ff       	call   c0000828 <strcpy>
c001c47b:	59                   	pop    ecx
c001c47c:	5e                   	pop    esi
c001c47d:	68 a1 c8 02 c0       	push   0xc002c8a1
c001c482:	53                   	push   ebx
c001c483:	e8 e0 44 fe ff       	call   c0000968 <strcat>
c001c488:	5d                   	pop    ebp
c001c489:	58                   	pop    eax
c001c48a:	57                   	push   edi
c001c48b:	53                   	push   ebx
c001c48c:	e8 d7 44 fe ff       	call   c0000968 <strcat>
c001c491:	c7 04 24 87 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc87
c001c498:	e8 aa 69 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001c49d:	83 c4 10             	add    esp,0x10
c001c4a0:	e9 25 ff ff ff       	jmp    c001c3ca <sysCallGetEnv(regs*)+0x5d>

c001c4a5 <sysAppSettings(regs*)>:
c001c4a5:	57                   	push   edi
c001c4a6:	56                   	push   esi
c001c4a7:	56                   	push   esi
c001c4a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c4ac:	8b 70 24             	mov    esi,DWORD PTR [eax+0x24]
c001c4af:	8b 86 00 01 00 00    	mov    eax,DWORD PTR [esi+0x100]
c001c4b5:	25 e0 1f 00 00       	and    eax,0x1fe0
c001c4ba:	66 3d c0 09          	cmp    ax,0x9c0
c001c4be:	75 2e                	jne    c001c4ee <sysAppSettings(regs*)+0x49>
c001c4c0:	8a 86 00 01 00 00    	mov    al,BYTE PTR [esi+0x100]
c001c4c6:	83 e0 1f             	and    eax,0x1f
c001c4c9:	3c 01                	cmp    al,0x1
c001c4cb:	74 2c                	je     c001c4f9 <sysAppSettings(regs*)+0x54>
c001c4cd:	3c 07                	cmp    al,0x7
c001c4cf:	0f 84 b4 00 00 00    	je     c001c589 <sysAppSettings(regs*)+0xe4>
c001c4d5:	84 c0                	test   al,al
c001c4d7:	0f 84 d3 00 00 00    	je     c001c5b0 <sysAppSettings(regs*)+0x10b>
c001c4dd:	3c 08                	cmp    al,0x8
c001c4df:	74 64                	je     c001c545 <sysAppSettings(regs*)+0xa0>
c001c4e1:	59                   	pop    ecx
c001c4e2:	0f b6 c0             	movzx  eax,al
c001c4e5:	5e                   	pop    esi
c001c4e6:	05 e8 03 00 00       	add    eax,0x3e8
c001c4eb:	5f                   	pop    edi
c001c4ec:	99                   	cdq    
c001c4ed:	c3                   	ret    
c001c4ee:	b8 01 00 00 00       	mov    eax,0x1
c001c4f3:	59                   	pop    ecx
c001c4f4:	31 d2                	xor    edx,edx
c001c4f6:	5e                   	pop    esi
c001c4f7:	5f                   	pop    edi
c001c4f8:	c3                   	ret    
c001c4f9:	50                   	push   eax
c001c4fa:	68 00 01 00 00       	push   0x100
c001c4ff:	6a 00                	push   0x0
c001c501:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c506:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c509:	83 c0 0c             	add    eax,0xc
c001c50c:	50                   	push   eax
c001c50d:	e8 5a 42 fe ff       	call   c000076c <memset>
c001c512:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c517:	b9 ff 00 00 00       	mov    ecx,0xff
c001c51c:	8b 78 40             	mov    edi,DWORD PTR [eax+0x40]
c001c51f:	83 c7 0c             	add    edi,0xc
c001c522:	fc                   	cld    
c001c523:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001c525:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c52a:	5a                   	pop    edx
c001c52b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c52e:	59                   	pop    ecx
c001c52f:	8d 50 0c             	lea    edx,[eax+0xc]
c001c532:	52                   	push   edx
c001c533:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c539:	e8 d8 45 ff ff       	call   c0010b16 <VgaText::setTitle(char*)>
c001c53e:	83 c4 10             	add    esp,0x10
c001c541:	31 c0                	xor    eax,eax
c001c543:	eb ae                	jmp    c001c4f3 <sysAppSettings(regs*)+0x4e>
c001c545:	83 ec 08             	sub    esp,0x8
c001c548:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c54e:	83 e0 0f             	and    eax,0xf
c001c551:	50                   	push   eax
c001c552:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c557:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c55a:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c560:	e8 a3 45 ff ff       	call   c0010b08 <VgaText::setTitleColour(VgaColour)>
c001c565:	5f                   	pop    edi
c001c566:	58                   	pop    eax
c001c567:	8b 86 04 01 00 00    	mov    eax,DWORD PTR [esi+0x104]
c001c56d:	c1 e8 04             	shr    eax,0x4
c001c570:	83 e0 0f             	and    eax,0xf
c001c573:	50                   	push   eax
c001c574:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c579:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c57c:	ff b0 26 05 00 00    	push   DWORD PTR [eax+0x526]
c001c582:	e8 73 45 ff ff       	call   c0010afa <VgaText::setTitleTextColour(VgaColour)>
c001c587:	eb b5                	jmp    c001c53e <sysAppSettings(regs*)+0x99>
c001c589:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c58e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001c591:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001c597:	8a 86 01 01 00 00    	mov    al,BYTE PTR [esi+0x101]
c001c59d:	c0 e8 06             	shr    al,0x6
c001c5a0:	83 e0 01             	and    eax,0x1
c001c5a3:	88 82 80 00 00 00    	mov    BYTE PTR [edx+0x80],al
c001c5a9:	31 c0                	xor    eax,eax
c001c5ab:	e9 43 ff ff ff       	jmp    c001c4f3 <sysAppSettings(regs*)+0x4e>
c001c5b0:	b8 02 00 00 00       	mov    eax,0x2
c001c5b5:	e9 39 ff ff ff       	jmp    c001c4f3 <sysAppSettings(regs*)+0x4e>

c001c5ba <sysSetFatAttrib(regs*)>:
c001c5ba:	57                   	push   edi
c001c5bb:	56                   	push   esi
c001c5bc:	53                   	push   ebx
c001c5bd:	83 ec 1c             	sub    esp,0x1c
c001c5c0:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001c5c4:	8b 7e 24             	mov    edi,DWORD PTR [esi+0x24]
c001c5c7:	68 14 01 00 00       	push   0x114
c001c5cc:	e8 d7 32 ff ff       	call   c000f8a8 <malloc>
c001c5d1:	83 c4 0c             	add    esp,0xc
c001c5d4:	89 c3                	mov    ebx,eax
c001c5d6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c5db:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c5de:	57                   	push   edi
c001c5df:	53                   	push   ebx
c001c5e0:	e8 c1 6d ff ff       	call   c00133a6 <File::File(char const*, Process*)>
c001c5e5:	8b 46 28             	mov    eax,DWORD PTR [esi+0x28]
c001c5e8:	83 c4 0c             	add    esp,0xc
c001c5eb:	0f b6 d4             	movzx  edx,ah
c001c5ee:	0f b6 c0             	movzx  eax,al
c001c5f1:	52                   	push   edx
c001c5f2:	50                   	push   eax
c001c5f3:	53                   	push   ebx
c001c5f4:	e8 23 70 ff ff       	call   c001361c <File::chfatattr(unsigned char, unsigned char)>
c001c5f9:	83 c4 10             	add    esp,0x10
c001c5fc:	85 db                	test   ebx,ebx
c001c5fe:	74 14                	je     c001c614 <sysSetFatAttrib(regs*)+0x5a>
c001c600:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001c604:	8b 13                	mov    edx,DWORD PTR [ebx]
c001c606:	83 ec 0c             	sub    esp,0xc
c001c609:	53                   	push   ebx
c001c60a:	ff 52 08             	call   DWORD PTR [edx+0x8]
c001c60d:	83 c4 10             	add    esp,0x10
c001c610:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001c614:	85 c0                	test   eax,eax
c001c616:	0f 95 c0             	setne  al
c001c619:	31 d2                	xor    edx,edx
c001c61b:	0f b6 c0             	movzx  eax,al
c001c61e:	f7 d8                	neg    eax
c001c620:	83 d2 00             	adc    edx,0x0
c001c623:	83 c4 10             	add    esp,0x10
c001c626:	f7 da                	neg    edx
c001c628:	5b                   	pop    ebx
c001c629:	5e                   	pop    esi
c001c62a:	5f                   	pop    edi
c001c62b:	c3                   	ret    

c001c62c <sysPipe(regs*)>:
c001c62c:	57                   	push   edi
c001c62d:	56                   	push   esi
c001c62e:	53                   	push   ebx
c001c62f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001c633:	83 ec 0c             	sub    esp,0xc
c001c636:	8b 78 20             	mov    edi,DWORD PTR [eax+0x20]
c001c639:	8b 70 28             	mov    esi,DWORD PTR [eax+0x28]
c001c63c:	6a 20                	push   0x20
c001c63e:	e8 65 32 ff ff       	call   c000f8a8 <malloc>
c001c643:	89 c3                	mov    ebx,eax
c001c645:	58                   	pop    eax
c001c646:	5a                   	pop    edx
c001c647:	68 00 50 00 00       	push   0x5000
c001c64c:	53                   	push   ebx
c001c64d:	e8 6c 3e ff ff       	call   c00104be <Pipe::Pipe(int)>
c001c652:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c655:	e8 9c 4f ff ff       	call   c00115f6 <UnixFile::getFileDescriptor()>
c001c65a:	89 07                	mov    DWORD PTR [edi],eax
c001c65c:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001c65f:	e8 92 4f ff ff       	call   c00115f6 <UnixFile::getFileDescriptor()>
c001c664:	83 c4 10             	add    esp,0x10
c001c667:	89 06                	mov    DWORD PTR [esi],eax
c001c669:	31 d2                	xor    edx,edx
c001c66b:	5b                   	pop    ebx
c001c66c:	31 c0                	xor    eax,eax
c001c66e:	5e                   	pop    esi
c001c66f:	5f                   	pop    edi
c001c670:	c3                   	ret    

c001c671 <sysGetUnixTime(regs*)>:
c001c671:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001c676:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c001c67c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001c680:	e9 13 77 ff ff       	jmp    c0013d98 <Clock::timeInSecondsLocal()>

c001c685 <string_ends_with(char const*, char const*)>:
c001c685:	57                   	push   edi
c001c686:	56                   	push   esi
c001c687:	53                   	push   ebx
c001c688:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001c68c:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001c690:	83 ec 0c             	sub    esp,0xc
c001c693:	53                   	push   ebx
c001c694:	e8 ef 40 fe ff       	call   c0000788 <strlen>
c001c699:	89 3c 24             	mov    DWORD PTR [esp],edi
c001c69c:	89 c6                	mov    esi,eax
c001c69e:	e8 e5 40 fe ff       	call   c0000788 <strlen>
c001c6a3:	83 c4 10             	add    esp,0x10
c001c6a6:	39 c6                	cmp    esi,eax
c001c6a8:	7d 06                	jge    c001c6b0 <string_ends_with(char const*, char const*)+0x2b>
c001c6aa:	5b                   	pop    ebx
c001c6ab:	31 c0                	xor    eax,eax
c001c6ad:	5e                   	pop    esi
c001c6ae:	5f                   	pop    edi
c001c6af:	c3                   	ret    
c001c6b0:	83 ec 08             	sub    esp,0x8
c001c6b3:	29 c6                	sub    esi,eax
c001c6b5:	57                   	push   edi
c001c6b6:	01 f3                	add    ebx,esi
c001c6b8:	53                   	push   ebx
c001c6b9:	e8 f6 41 fe ff       	call   c00008b4 <strcmp>
c001c6be:	83 c4 10             	add    esp,0x10
c001c6c1:	85 c0                	test   eax,eax
c001c6c3:	5b                   	pop    ebx
c001c6c4:	0f 94 c0             	sete   al
c001c6c7:	5e                   	pop    esi
c001c6c8:	0f b6 c0             	movzx  eax,al
c001c6cb:	5f                   	pop    edi
c001c6cc:	c3                   	ret    

c001c6cd <sysCallOpen(regs*)>:
c001c6cd:	56                   	push   esi
c001c6ce:	53                   	push   ebx
c001c6cf:	81 ec 04 01 00 00    	sub    esp,0x104
c001c6d5:	8b 9c 24 10 01 00 00 	mov    ebx,DWORD PTR [esp+0x110]
c001c6dc:	8b 4b 20             	mov    ecx,DWORD PTR [ebx+0x20]
c001c6df:	85 c9                	test   ecx,ecx
c001c6e1:	0f 84 b3 00 00 00    	je     c001c79a <sysCallOpen(regs*)+0xcd>
c001c6e7:	8b 43 24             	mov    eax,DWORD PTR [ebx+0x24]
c001c6ea:	85 c0                	test   eax,eax
c001c6ec:	0f 84 a8 00 00 00    	je     c001c79a <sysCallOpen(regs*)+0xcd>
c001c6f2:	52                   	push   edx
c001c6f3:	68 a3 c8 02 c0       	push   0xc002c8a3
c001c6f8:	50                   	push   eax
c001c6f9:	8d 74 24 0c          	lea    esi,[esp+0xc]
c001c6fd:	56                   	push   esi
c001c6fe:	e8 f9 6a ff ff       	call   c00131fc <Fs::standardiseFiles(char*, char const*, char const*)>
c001c703:	89 34 24             	mov    DWORD PTR [esp],esi
c001c706:	e8 7d 40 fe ff       	call   c0000788 <strlen>
c001c70b:	83 c4 10             	add    esp,0x10
c001c70e:	48                   	dec    eax
c001c70f:	74 1d                	je     c001c72e <sysCallOpen(regs*)+0x61>
c001c711:	8a 14 04             	mov    dl,BYTE PTR [esp+eax*1]
c001c714:	eb 0f                	jmp    c001c725 <sysCallOpen(regs*)+0x58>
c001c716:	80 fa 3a             	cmp    dl,0x3a
c001c719:	74 0f                	je     c001c72a <sysCallOpen(regs*)+0x5d>
c001c71b:	c6 04 06 00          	mov    BYTE PTR [esi+eax*1],0x0
c001c71f:	48                   	dec    eax
c001c720:	74 0c                	je     c001c72e <sysCallOpen(regs*)+0x61>
c001c722:	8a 14 06             	mov    dl,BYTE PTR [esi+eax*1]
c001c725:	80 fa 2e             	cmp    dl,0x2e
c001c728:	75 ec                	jne    c001c716 <sysCallOpen(regs*)+0x49>
c001c72a:	c6 04 04 00          	mov    BYTE PTR [esp+eax*1],0x0
c001c72e:	83 ec 08             	sub    esp,0x8
c001c731:	68 a7 c8 02 c0       	push   0xc002c8a7
c001c736:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c739:	e8 47 ff ff ff       	call   c001c685 <string_ends_with(char const*, char const*)>
c001c73e:	83 c4 10             	add    esp,0x10
c001c741:	85 c0                	test   eax,eax
c001c743:	75 17                	jne    c001c75c <sysCallOpen(regs*)+0x8f>
c001c745:	83 ec 08             	sub    esp,0x8
c001c748:	68 c8 c8 02 c0       	push   0xc002c8c8
c001c74d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c750:	e8 30 ff ff ff       	call   c001c685 <string_ends_with(char const*, char const*)>
c001c755:	83 c4 10             	add    esp,0x10
c001c758:	85 c0                	test   eax,eax
c001c75a:	74 51                	je     c001c7ad <sysCallOpen(regs*)+0xe0>
c001c75c:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c75f:	83 ec 08             	sub    esp,0x8
c001c762:	c7 00 01 ff ff 0f    	mov    DWORD PTR [eax],0xfffff01
c001c768:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c76f:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c772:	ff 30                	push   DWORD PTR [eax]
c001c774:	68 ac c8 02 c0       	push   0xc002c8ac
c001c779:	e8 c9 66 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001c77e:	c7 04 24 bb c8 02 c0 	mov    DWORD PTR [esp],0xc002c8bb
c001c785:	e8 bd 66 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001c78a:	83 c4 10             	add    esp,0x10
c001c78d:	81 c4 04 01 00 00    	add    esp,0x104
c001c793:	31 c0                	xor    eax,eax
c001c795:	31 d2                	xor    edx,edx
c001c797:	5b                   	pop    ebx
c001c798:	5e                   	pop    esi
c001c799:	c3                   	ret    
c001c79a:	81 c4 04 01 00 00    	add    esp,0x104
c001c7a0:	b8 ff ff ff ff       	mov    eax,0xffffffff
c001c7a5:	ba ff ff ff ff       	mov    edx,0xffffffff
c001c7aa:	5b                   	pop    ebx
c001c7ab:	5e                   	pop    esi
c001c7ac:	c3                   	ret    
c001c7ad:	83 ec 08             	sub    esp,0x8
c001c7b0:	68 a8 c8 02 c0       	push   0xc002c8a8
c001c7b5:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c7b8:	e8 f7 40 fe ff       	call   c00008b4 <strcmp>
c001c7bd:	83 c4 10             	add    esp,0x10
c001c7c0:	85 c0                	test   eax,eax
c001c7c2:	74 98                	je     c001c75c <sysCallOpen(regs*)+0x8f>
c001c7c4:	83 ec 08             	sub    esp,0x8
c001c7c7:	68 a7 c8 02 c0       	push   0xc002c8a7
c001c7cc:	56                   	push   esi
c001c7cd:	e8 b3 fe ff ff       	call   c001c685 <string_ends_with(char const*, char const*)>
c001c7d2:	83 c4 10             	add    esp,0x10
c001c7d5:	85 c0                	test   eax,eax
c001c7d7:	75 83                	jne    c001c75c <sysCallOpen(regs*)+0x8f>
c001c7d9:	83 ec 08             	sub    esp,0x8
c001c7dc:	68 cd c8 02 c0       	push   0xc002c8cd
c001c7e1:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c7e4:	e8 9c fe ff ff       	call   c001c685 <string_ends_with(char const*, char const*)>
c001c7e9:	83 c4 10             	add    esp,0x10
c001c7ec:	85 c0                	test   eax,eax
c001c7ee:	0f 85 d9 00 00 00    	jne    c001c8cd <sysCallOpen(regs*)+0x200>
c001c7f4:	83 ec 08             	sub    esp,0x8
c001c7f7:	68 d2 c8 02 c0       	push   0xc002c8d2
c001c7fc:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c7ff:	e8 81 fe ff ff       	call   c001c685 <string_ends_with(char const*, char const*)>
c001c804:	83 c4 10             	add    esp,0x10
c001c807:	85 c0                	test   eax,eax
c001c809:	0f 85 be 00 00 00    	jne    c001c8cd <sysCallOpen(regs*)+0x200>
c001c80f:	83 ec 08             	sub    esp,0x8
c001c812:	68 ce c8 02 c0       	push   0xc002c8ce
c001c817:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c81a:	e8 95 40 fe ff       	call   c00008b4 <strcmp>
c001c81f:	83 c4 10             	add    esp,0x10
c001c822:	85 c0                	test   eax,eax
c001c824:	0f 84 a3 00 00 00    	je     c001c8cd <sysCallOpen(regs*)+0x200>
c001c82a:	83 ec 08             	sub    esp,0x8
c001c82d:	68 cd c8 02 c0       	push   0xc002c8cd
c001c832:	56                   	push   esi
c001c833:	e8 4d fe ff ff       	call   c001c685 <string_ends_with(char const*, char const*)>
c001c838:	83 c4 10             	add    esp,0x10
c001c83b:	85 c0                	test   eax,eax
c001c83d:	0f 85 8a 00 00 00    	jne    c001c8cd <sysCallOpen(regs*)+0x200>
c001c843:	83 ec 0c             	sub    esp,0xc
c001c846:	68 14 01 00 00       	push   0x114
c001c84b:	e8 58 30 ff ff       	call   c000f8a8 <malloc>
c001c850:	83 c4 0c             	add    esp,0xc
c001c853:	89 c6                	mov    esi,eax
c001c855:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001c85a:	ff 70 40             	push   DWORD PTR [eax+0x40]
c001c85d:	ff 73 24             	push   DWORD PTR [ebx+0x24]
c001c860:	56                   	push   esi
c001c861:	e8 40 6b ff ff       	call   c00133a6 <File::File(char const*, Process*)>
c001c866:	83 c4 10             	add    esp,0x10
c001c869:	85 f6                	test   esi,esi
c001c86b:	0f 84 29 ff ff ff    	je     c001c79a <sysCallOpen(regs*)+0xcd>
c001c871:	8b 53 28             	mov    edx,DWORD PTR [ebx+0x28]
c001c874:	0f b6 c2             	movzx  eax,dl
c001c877:	89 43 28             	mov    DWORD PTR [ebx+0x28],eax
c001c87a:	89 d0                	mov    eax,edx
c001c87c:	83 e0 01             	and    eax,0x1
c001c87f:	f6 c2 02             	test   dl,0x2
c001c882:	74 03                	je     c001c887 <sysCallOpen(regs*)+0x1ba>
c001c884:	83 c8 02             	or     eax,0x2
c001c887:	f6 c2 04             	test   dl,0x4
c001c88a:	74 03                	je     c001c88f <sysCallOpen(regs*)+0x1c2>
c001c88c:	83 c8 04             	or     eax,0x4
c001c88f:	f6 c2 08             	test   dl,0x8
c001c892:	74 03                	je     c001c897 <sysCallOpen(regs*)+0x1ca>
c001c894:	83 c8 0a             	or     eax,0xa
c001c897:	83 e2 10             	and    edx,0x10
c001c89a:	74 03                	je     c001c89f <sysCallOpen(regs*)+0x1d2>
c001c89c:	83 c8 12             	or     eax,0x12
c001c89f:	83 ec 08             	sub    esp,0x8
c001c8a2:	50                   	push   eax
c001c8a3:	56                   	push   esi
c001c8a4:	e8 61 6b ff ff       	call   c001340a <File::open(FileOpenMode)>
c001c8a9:	83 c4 10             	add    esp,0x10
c001c8ac:	85 c0                	test   eax,eax
c001c8ae:	0f 85 e6 fe ff ff    	jne    c001c79a <sysCallOpen(regs*)+0xcd>
c001c8b4:	83 ec 0c             	sub    esp,0xc
c001c8b7:	56                   	push   esi
c001c8b8:	e8 39 4d ff ff       	call   c00115f6 <UnixFile::getFileDescriptor()>
c001c8bd:	8b 53 20             	mov    edx,DWORD PTR [ebx+0x20]
c001c8c0:	89 02                	mov    DWORD PTR [edx],eax
c001c8c2:	c1 f8 1f             	sar    eax,0x1f
c001c8c5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001c8c8:	e9 bd fe ff ff       	jmp    c001c78a <sysCallOpen(regs*)+0xbd>
c001c8cd:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001c8d0:	c7 00 00 ff ff 0f    	mov    DWORD PTR [eax],0xfffff00
c001c8d6:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001c8dd:	e9 ab fe ff ff       	jmp    c001c78d <sysCallOpen(regs*)+0xc0>

c001c8e2 <Sys::loadSyscalls()>:
c001c8e2:	c7 05 c0 19 03 c0 d1 b9 01 c0 	mov    DWORD PTR ds:0xc00319c0,0xc001b9d1
c001c8ec:	c7 05 c4 19 03 c0 36 b5 01 c0 	mov    DWORD PTR ds:0xc00319c4,0xc001b536
c001c8f6:	c7 05 c8 19 03 c0 24 b7 01 c0 	mov    DWORD PTR ds:0xc00319c8,0xc001b724
c001c900:	c7 05 cc 19 03 c0 07 b9 01 c0 	mov    DWORD PTR ds:0xc00319cc,0xc001b907
c001c90a:	c7 05 d0 19 03 c0 bc b6 01 c0 	mov    DWORD PTR ds:0xc00319d0,0xc001b6bc
c001c914:	c7 05 d4 19 03 c0 6d b5 01 c0 	mov    DWORD PTR ds:0xc00319d4,0xc001b56d
c001c91e:	c7 05 d8 19 03 c0 4e b5 01 c0 	mov    DWORD PTR ds:0xc00319d8,0xc001b54e
c001c928:	c7 05 dc 19 03 c0 79 b7 01 c0 	mov    DWORD PTR ds:0xc00319dc,0xc001b779
c001c932:	c7 05 e4 19 03 c0 0c bf 01 c0 	mov    DWORD PTR ds:0xc00319e4,0xc001bf0c
c001c93c:	c7 05 e0 19 03 c0 cd c6 01 c0 	mov    DWORD PTR ds:0xc00319e0,0xc001c6cd
c001c946:	c7 05 e8 19 03 c0 94 bf 01 c0 	mov    DWORD PTR ds:0xc00319e8,0xc001bf94
c001c950:	c7 05 ec 19 03 c0 fb bb 01 c0 	mov    DWORD PTR ds:0xc00319ec,0xc001bbfb
c001c95a:	c7 05 f0 19 03 c0 17 ba 01 c0 	mov    DWORD PTR ds:0xc00319f0,0xc001ba17
c001c964:	c7 05 f4 19 03 c0 1c ba 01 c0 	mov    DWORD PTR ds:0xc00319f4,0xc001ba1c
c001c96e:	c7 05 f8 19 03 c0 6f c0 01 c0 	mov    DWORD PTR ds:0xc00319f8,0xc001c06f
c001c978:	c7 05 fc 19 03 c0 09 c0 01 c0 	mov    DWORD PTR ds:0xc00319fc,0xc001c009
c001c982:	c7 05 00 1a 03 c0 e3 bc 01 c0 	mov    DWORD PTR ds:0xc0031a00,0xc001bce3
c001c98c:	c7 05 04 1a 03 c0 4c bd 01 c0 	mov    DWORD PTR ds:0xc0031a04,0xc001bd4c
c001c996:	c7 05 08 1a 03 c0 c9 bd 01 c0 	mov    DWORD PTR ds:0xc0031a08,0xc001bdc9
c001c9a0:	c7 05 0c 1a 03 c0 21 ba 01 c0 	mov    DWORD PTR ds:0xc0031a0c,0xc001ba21
c001c9aa:	c7 05 10 1a 03 c0 df c0 01 c0 	mov    DWORD PTR ds:0xc0031a10,0xc001c0df
c001c9b4:	c7 05 14 1a 03 c0 f9 c0 01 c0 	mov    DWORD PTR ds:0xc0031a14,0xc001c0f9
c001c9be:	c7 05 18 1a 03 c0 f9 c0 01 c0 	mov    DWORD PTR ds:0xc0031a18,0xc001c0f9
c001c9c8:	c7 05 1c 1a 03 c0 3a c1 01 c0 	mov    DWORD PTR ds:0xc0031a1c,0xc001c13a
c001c9d2:	c7 05 20 1a 03 c0 9e c1 01 c0 	mov    DWORD PTR ds:0xc0031a20,0xc001c19e
c001c9dc:	c7 05 24 1a 03 c0 cd bb 01 c0 	mov    DWORD PTR ds:0xc0031a24,0xc001bbcd
c001c9e6:	c7 05 28 1a 03 c0 02 c2 01 c0 	mov    DWORD PTR ds:0xc0031a28,0xc001c202
c001c9f0:	c7 05 2c 1a 03 c0 8a bb 01 c0 	mov    DWORD PTR ds:0xc0031a2c,0xc001bb8a
c001c9fa:	c7 05 30 1a 03 c0 4e c2 01 c0 	mov    DWORD PTR ds:0xc0031a30,0xc001c24e
c001ca04:	c7 05 34 1a 03 c0 89 bc 01 c0 	mov    DWORD PTR ds:0xc0031a34,0xc001bc89
c001ca0e:	c7 05 38 1a 03 c0 d1 c2 01 c0 	mov    DWORD PTR ds:0xc0031a38,0xc001c2d1
c001ca18:	c7 05 3c 1a 03 c0 4c be 01 c0 	mov    DWORD PTR ds:0xc0031a3c,0xc001be4c
c001ca22:	c7 05 40 1a 03 c0 f8 c2 01 c0 	mov    DWORD PTR ds:0xc0031a40,0xc001c2f8
c001ca2c:	c7 05 44 1a 03 c0 6d c3 01 c0 	mov    DWORD PTR ds:0xc0031a44,0xc001c36d
c001ca36:	c7 05 48 1a 03 c0 a5 c4 01 c0 	mov    DWORD PTR ds:0xc0031a48,0xc001c4a5
c001ca40:	c7 05 4c 1a 03 c0 2b ba 01 c0 	mov    DWORD PTR ds:0xc0031a4c,0xc001ba2b
c001ca4a:	c7 05 50 1a 03 c0 95 ba 01 c0 	mov    DWORD PTR ds:0xc0031a50,0xc001ba95
c001ca54:	c7 05 54 1a 03 c0 db ba 01 c0 	mov    DWORD PTR ds:0xc0031a54,0xc001badb
c001ca5e:	c7 05 58 1a 03 c0 ba c5 01 c0 	mov    DWORD PTR ds:0xc0031a58,0xc001c5ba
c001ca68:	c7 05 5c 1a 03 c0 14 c1 01 c0 	mov    DWORD PTR ds:0xc0031a5c,0xc001c114
c001ca72:	c7 05 60 1a 03 c0 2c bb 01 c0 	mov    DWORD PTR ds:0xc0031a60,0xc001bb2c
c001ca7c:	c7 05 64 1a 03 c0 2c c6 01 c0 	mov    DWORD PTR ds:0xc0031a64,0xc001c62c
c001ca86:	c7 05 68 1a 03 c0 71 c6 01 c0 	mov    DWORD PTR ds:0xc0031a68,0xc001c671
c001ca90:	c7 05 6c 1a 03 c0 14 b6 01 c0 	mov    DWORD PTR ds:0xc0031a6c,0xc001b614
c001ca9a:	c7 05 70 1a 03 c0 95 b7 01 c0 	mov    DWORD PTR ds:0xc0031a70,0xc001b795
c001caa4:	c7 05 74 1a 03 c0 bd b8 01 c0 	mov    DWORD PTR ds:0xc0031a74,0xc001b8bd
c001caae:	c7 05 78 1a 03 c0 00 b5 01 c0 	mov    DWORD PTR ds:0xc0031a78,0xc001b500
c001cab8:	c7 05 7c 1a 03 c0 6f b9 01 c0 	mov    DWORD PTR ds:0xc0031a7c,0xc001b96f
c001cac2:	c7 05 80 1a 03 c0 79 b5 01 c0 	mov    DWORD PTR ds:0xc0031a80,0xc001b579
c001cacc:	c7 05 84 1a 03 c0 90 b5 01 c0 	mov    DWORD PTR ds:0xc0031a84,0xc001b590
c001cad6:	c3                   	ret    

c001cad7 <Sys::systemCall(regs*, void*)>:
c001cad7:	53                   	push   ebx
c001cad8:	83 ec 08             	sub    esp,0x8
c001cadb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001cadf:	8b 43 2c             	mov    eax,DWORD PTR [ebx+0x2c]
c001cae2:	83 f8 7f             	cmp    eax,0x7f
c001cae5:	77 16                	ja     c001cafd <Sys::systemCall(regs*, void*)+0x26>
c001cae7:	8b 14 85 c0 19 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce640]
c001caee:	85 d2                	test   edx,edx
c001caf0:	74 0b                	je     c001cafd <Sys::systemCall(regs*, void*)+0x26>
c001caf2:	83 ec 0c             	sub    esp,0xc
c001caf5:	53                   	push   ebx
c001caf6:	ff d2                	call   edx
c001caf8:	89 43 2c             	mov    DWORD PTR [ebx+0x2c],eax
c001cafb:	eb 0d                	jmp    c001cb0a <Sys::systemCall(regs*, void*)+0x33>
c001cafd:	52                   	push   edx
c001cafe:	52                   	push   edx
c001caff:	50                   	push   eax
c001cb00:	68 d7 c8 02 c0       	push   0xc002c8d7
c001cb05:	e8 3d 63 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001cb0a:	83 c4 10             	add    esp,0x10
c001cb0d:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001cb12:	31 d2                	xor    edx,edx
c001cb14:	83 c4 08             	add    esp,0x8
c001cb17:	5b                   	pop    ebx
c001cb18:	c3                   	ret    

c001cb19 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>:
c001cb19:	55                   	push   ebp
c001cb1a:	57                   	push   edi
c001cb1b:	56                   	push   esi
c001cb1c:	53                   	push   ebx
c001cb1d:	81 ec 2c 10 00 00    	sub    esp,0x102c
c001cb23:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cb2a:	8b 9c 24 4c 10 00 00 	mov    ebx,DWORD PTR [esp+0x104c]
c001cb31:	85 c0                	test   eax,eax
c001cb33:	0f 95 c1             	setne  cl
c001cb36:	83 bc 24 48 10 00 00 00 	cmp    DWORD PTR [esp+0x1048],0x0
c001cb3e:	0f 94 c2             	sete   dl
c001cb41:	84 d1                	test   cl,dl
c001cb43:	74 23                	je     c001cb68 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cb45:	f7 c3 ff 0f 00 00    	test   ebx,0xfff
c001cb4b:	74 1b                	je     c001cb68 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x4f>
c001cb4d:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cb53:	89 da                	mov    edx,ebx
c001cb55:	81 e3 00 f0 ff ff    	and    ebx,0xfffff000
c001cb5b:	81 ca 00 f0 ff ff    	or     edx,0xfffff000
c001cb61:	89 94 24 48 10 00 00 	mov    DWORD PTR [esp+0x1048],edx
c001cb68:	8b 94 24 48 10 00 00 	mov    edx,DWORD PTR [esp+0x1048]
c001cb6f:	05 ff 0f 00 00       	add    eax,0xfff
c001cb74:	83 ec 0c             	sub    esp,0xc
c001cb77:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001cb7b:	8d aa ff 0f 00 00    	lea    ebp,[edx+0xfff]
c001cb81:	c1 e8 0c             	shr    eax,0xc
c001cb84:	89 ee                	mov    esi,ebp
c001cb86:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cb8a:	c1 ee 0c             	shr    esi,0xc
c001cb8d:	6a 01                	push   0x1
c001cb8f:	e8 ad 4e ff ff       	call   c0011a41 <Virt::allocateKernelVirtualPages(int)>
c001cb94:	89 c7                	mov    edi,eax
c001cb96:	58                   	pop    eax
c001cb97:	5a                   	pop    edx
c001cb98:	56                   	push   esi
c001cb99:	68 5b c9 02 c0       	push   0xc002c95b
c001cb9e:	e8 a4 62 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001cba3:	59                   	pop    ecx
c001cba4:	58                   	pop    eax
c001cba5:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001cba9:	68 6d c9 02 c0       	push   0xc002c96d
c001cbae:	e8 94 62 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001cbb3:	83 c4 10             	add    esp,0x10
c001cbb6:	81 fd ff 0f 00 00    	cmp    ebp,0xfff
c001cbbc:	0f 86 30 01 00 00    	jbe    c001ccf2 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d9>
c001cbc2:	c1 e6 0c             	shl    esi,0xc
c001cbc5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cbc8:	8d 04 1e             	lea    eax,[esi+ebx*1]
c001cbcb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001cbcf:	8b ac 24 48 10 00 00 	mov    ebp,DWORD PTR [esp+0x1048]
c001cbd6:	8b 04 24             	mov    eax,DWORD PTR [esp]
c001cbd9:	01 dd                	add    ebp,ebx
c001cbdb:	2b 2c 24             	sub    ebp,DWORD PTR [esp]
c001cbde:	3b 44 24 0c          	cmp    eax,DWORD PTR [esp+0xc]
c001cbe2:	0f 84 07 01 00 00    	je     c001ccef <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1d6>
c001cbe8:	81 fd 00 10 00 00    	cmp    ebp,0x1000
c001cbee:	76 05                	jbe    c001cbf5 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xdc>
c001cbf0:	bd 00 10 00 00       	mov    ebp,0x1000
c001cbf5:	83 ec 0c             	sub    esp,0xc
c001cbf8:	31 d2                	xor    edx,edx
c001cbfa:	8b 84 24 50 10 00 00 	mov    eax,DWORD PTR [esp+0x1050]
c001cc01:	8b 08                	mov    ecx,DWORD PTR [eax]
c001cc03:	8d 44 24 28          	lea    eax,[esp+0x28]
c001cc07:	50                   	push   eax
c001cc08:	8d 74 24 30          	lea    esi,[esp+0x30]
c001cc0c:	56                   	push   esi
c001cc0d:	52                   	push   edx
c001cc0e:	55                   	push   ebp
c001cc0f:	ff b4 24 60 10 00 00 	push   DWORD PTR [esp+0x1060]
c001cc16:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001cc19:	83 c4 20             	add    esp,0x20
c001cc1c:	85 c0                	test   eax,eax
c001cc1e:	74 0a                	je     c001cc2a <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x111>
c001cc20:	53                   	push   ebx
c001cc21:	53                   	push   ebx
c001cc22:	50                   	push   eax
c001cc23:	68 7f c9 02 c0       	push   0xc002c97f
c001cc28:	eb 0f                	jmp    c001cc39 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x120>
c001cc2a:	3b 6c 24 1c          	cmp    ebp,DWORD PTR [esp+0x1c]
c001cc2e:	74 20                	je     c001cc50 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x137>
c001cc30:	51                   	push   ecx
c001cc31:	51                   	push   ecx
c001cc32:	6a 00                	push   0x0
c001cc34:	68 aa c9 02 c0       	push   0xc002c9aa
c001cc39:	e8 09 62 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001cc3e:	89 3c 24             	mov    DWORD PTR [esp],edi
c001cc41:	e8 bb 52 ff ff       	call   c0011f01 <Virt::freeKernelVirtualPages(unsigned long)>
c001cc46:	83 c4 10             	add    esp,0x10
c001cc49:	31 c0                	xor    eax,eax
c001cc4b:	e9 67 01 00 00       	jmp    c001cdb7 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x29e>
c001cc50:	fa                   	cli    
c001cc51:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001cc57:	e8 b8 32 ff ff       	call   c000ff14 <Phys::allocatePage()>
c001cc5c:	6a 07                	push   0x7
c001cc5e:	89 c5                	mov    ebp,eax
c001cc60:	57                   	push   edi
c001cc61:	50                   	push   eax
c001cc62:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc67:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cc6a:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc70:	e8 03 56 ff ff       	call   c0012278 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cc75:	83 c4 0c             	add    esp,0xc
c001cc78:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cc7f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc85:	6a 00                	push   0x0
c001cc87:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cc8c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cc8f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cc95:	e8 38 54 ff ff       	call   c00120d2 <VAS::mapOtherVASIn(bool, VAS*)>
c001cc9a:	58                   	pop    eax
c001cc9b:	5a                   	pop    edx
c001cc9c:	68 07 0c 00 00       	push   0xc07
c001cca1:	ff 74 24 0c          	push   DWORD PTR [esp+0xc]
c001cca5:	55                   	push   ebp
c001cca6:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001ccad:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ccb3:	6a 00                	push   0x0
c001ccb5:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ccba:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001ccbd:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001ccc3:	e8 6c 59 ff ff       	call   c0012634 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001ccc8:	b9 00 10 00 00       	mov    ecx,0x1000
c001cccd:	fc                   	cld    
c001ccce:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001ccd0:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001ccd5:	83 c4 20             	add    esp,0x20
c001ccd8:	48                   	dec    eax
c001ccd9:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001ccde:	85 c0                	test   eax,eax
c001cce0:	75 01                	jne    c001cce3 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x1ca>
c001cce2:	fb                   	sti    
c001cce3:	81 04 24 00 10 00 00 	add    DWORD PTR [esp],0x1000
c001ccea:	e9 e0 fe ff ff       	jmp    c001cbcf <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0xb6>
c001ccef:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c001ccf2:	81 7c 24 04 ff 0f 00 00 	cmp    DWORD PTR [esp+0x4],0xfff
c001ccfa:	0f 86 a9 00 00 00    	jbe    c001cda9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x290>
c001cd00:	fa                   	cli    
c001cd01:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001cd07:	51                   	push   ecx
c001cd08:	8b 84 24 44 10 00 00 	mov    eax,DWORD PTR [esp+0x1044]
c001cd0f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd15:	6a 00                	push   0x0
c001cd17:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd1c:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd1f:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd25:	e8 a8 53 ff ff       	call   c00120d2 <VAS::mapOtherVASIn(bool, VAS*)>
c001cd2a:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001cd2e:	c1 e6 0c             	shl    esi,0xc
c001cd31:	01 de                	add    esi,ebx
c001cd33:	83 c4 10             	add    esp,0x10
c001cd36:	39 de                	cmp    esi,ebx
c001cd38:	74 61                	je     c001cd9b <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x282>
c001cd3a:	e8 d5 31 ff ff       	call   c000ff14 <Phys::allocatePage()>
c001cd3f:	6a 07                	push   0x7
c001cd41:	89 c5                	mov    ebp,eax
c001cd43:	57                   	push   edi
c001cd44:	50                   	push   eax
c001cd45:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd4a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd4d:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd53:	e8 20 55 ff ff       	call   c0012278 <VAS::mapPage(unsigned long, unsigned long, int)>
c001cd58:	58                   	pop    eax
c001cd59:	5a                   	pop    edx
c001cd5a:	68 07 0c 00 00       	push   0xc07
c001cd5f:	53                   	push   ebx
c001cd60:	81 c3 00 10 00 00    	add    ebx,0x1000
c001cd66:	55                   	push   ebp
c001cd67:	8b 84 24 54 10 00 00 	mov    eax,DWORD PTR [esp+0x1054]
c001cd6e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd74:	6a 00                	push   0x0
c001cd76:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001cd7b:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001cd7e:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001cd84:	e8 ab 58 ff ff       	call   c0012634 <VAS::mapForeignPage(bool, VAS*, unsigned long, unsigned long, int)>
c001cd89:	83 c4 1c             	add    esp,0x1c
c001cd8c:	68 00 10 00 00       	push   0x1000
c001cd91:	6a 00                	push   0x0
c001cd93:	57                   	push   edi
c001cd94:	e8 d3 39 fe ff       	call   c000076c <memset>
c001cd99:	eb 98                	jmp    c001cd33 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x21a>
c001cd9b:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001cda0:	48                   	dec    eax
c001cda1:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001cda6:	75 01                	jne    c001cda9 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)+0x290>
c001cda8:	fb                   	sti    
c001cda9:	83 ec 0c             	sub    esp,0xc
c001cdac:	57                   	push   edi
c001cdad:	e8 4f 51 ff ff       	call   c0011f01 <Virt::freeKernelVirtualPages(unsigned long)>
c001cdb2:	83 c4 10             	add    esp,0x10
c001cdb5:	b0 01                	mov    al,0x1
c001cdb7:	81 c4 2c 10 00 00    	add    esp,0x102c
c001cdbd:	5b                   	pop    ebx
c001cdbe:	5e                   	pop    esi
c001cdbf:	5f                   	pop    edi
c001cdc0:	5d                   	pop    ebp
c001cdc1:	c3                   	ret    

c001cdc2 <Thr::loadProgramIntoMemory(Process*, char const*)>:
c001cdc2:	55                   	push   ebp
c001cdc3:	57                   	push   edi
c001cdc4:	56                   	push   esi
c001cdc5:	53                   	push   ebx
c001cdc6:	83 ec 48             	sub    esp,0x48
c001cdc9:	68 14 01 00 00       	push   0x114
c001cdce:	e8 d5 2a ff ff       	call   c000f8a8 <malloc>
c001cdd3:	83 c4 0c             	add    esp,0xc
c001cdd6:	89 c6                	mov    esi,eax
c001cdd8:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c001cddc:	ff 74 24 5c          	push   DWORD PTR [esp+0x5c]
c001cde0:	50                   	push   eax
c001cde1:	e8 c0 65 ff ff       	call   c00133a6 <File::File(char const*, Process*)>
c001cde6:	58                   	pop    eax
c001cde7:	5a                   	pop    edx
c001cde8:	6a 01                	push   0x1
c001cdea:	56                   	push   esi
c001cdeb:	e8 1a 66 ff ff       	call   c001340a <File::open(FileOpenMode)>
c001cdf0:	83 c4 10             	add    esp,0x10
c001cdf3:	85 c0                	test   eax,eax
c001cdf5:	0f 85 47 01 00 00    	jne    c001cf42 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cdfb:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c001ce03:	83 ec 0c             	sub    esp,0xc
c001ce06:	6a 34                	push   0x34
c001ce08:	e8 9b 2a ff ff       	call   c000f8a8 <malloc>
c001ce0d:	89 c3                	mov    ebx,eax
c001ce0f:	58                   	pop    eax
c001ce10:	8b 06                	mov    eax,DWORD PTR [esi]
c001ce12:	8d 7c 24 38          	lea    edi,[esp+0x38]
c001ce16:	57                   	push   edi
c001ce17:	53                   	push   ebx
c001ce18:	6a 00                	push   0x0
c001ce1a:	6a 34                	push   0x34
c001ce1c:	56                   	push   esi
c001ce1d:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001ce20:	83 c4 20             	add    esp,0x20
c001ce23:	85 c0                	test   eax,eax
c001ce25:	0f 85 17 01 00 00    	jne    c001cf42 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce2b:	81 3b 7f 45 4c 46    	cmp    DWORD PTR [ebx],0x464c457f
c001ce31:	0f 85 0b 01 00 00    	jne    c001cf42 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce37:	8b 43 20             	mov    eax,DWORD PTR [ebx+0x20]
c001ce3a:	85 c0                	test   eax,eax
c001ce3c:	0f 84 00 01 00 00    	je     c001cf42 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce42:	31 d2                	xor    edx,edx
c001ce44:	55                   	push   ebp
c001ce45:	52                   	push   edx
c001ce46:	50                   	push   eax
c001ce47:	56                   	push   esi
c001ce48:	e8 7b 66 ff ff       	call   c00134c8 <File::seek(unsigned long long)>
c001ce4d:	83 c4 10             	add    esp,0x10
c001ce50:	85 c0                	test   eax,eax
c001ce52:	0f 85 ea 00 00 00    	jne    c001cf42 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ce58:	83 ec 0c             	sub    esp,0xc
c001ce5b:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001ce5e:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ce62:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001ce66:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ce6a:	0f af c2             	imul   eax,edx
c001ce6d:	50                   	push   eax
c001ce6e:	e8 35 2a ff ff       	call   c000f8a8 <malloc>
c001ce73:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001ce75:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001ce79:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ce7c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001ce80:	0f b7 53 2e          	movzx  edx,WORD PTR [ebx+0x2e]
c001ce84:	0f b7 43 30          	movzx  eax,WORD PTR [ebx+0x30]
c001ce88:	0f af c2             	imul   eax,edx
c001ce8b:	99                   	cdq    
c001ce8c:	52                   	push   edx
c001ce8d:	50                   	push   eax
c001ce8e:	56                   	push   esi
c001ce8f:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ce92:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c001ce95:	83 c4 20             	add    esp,0x20
c001ce98:	85 c0                	test   eax,eax
c001ce9a:	0f 84 a2 00 00 00    	je     c001cf42 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001cea0:	31 d2                	xor    edx,edx
c001cea2:	51                   	push   ecx
c001cea3:	52                   	push   edx
c001cea4:	50                   	push   eax
c001cea5:	56                   	push   esi
c001cea6:	e8 1d 66 ff ff       	call   c00134c8 <File::seek(unsigned long long)>
c001ceab:	83 c4 10             	add    esp,0x10
c001ceae:	85 c0                	test   eax,eax
c001ceb0:	0f 85 8c 00 00 00    	jne    c001cf42 <Thr::loadProgramIntoMemory(Process*, char const*)+0x180>
c001ceb6:	83 ec 0c             	sub    esp,0xc
c001ceb9:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cebd:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cec1:	31 ed                	xor    ebp,ebp
c001cec3:	0f af c2             	imul   eax,edx
c001cec6:	50                   	push   eax
c001cec7:	e8 dc 29 ff ff       	call   c000f8a8 <malloc>
c001cecc:	8b 0e                	mov    ecx,DWORD PTR [esi]
c001cece:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001ced2:	89 3c 24             	mov    DWORD PTR [esp],edi
c001ced5:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ced9:	0f b7 53 2a          	movzx  edx,WORD PTR [ebx+0x2a]
c001cedd:	0f b7 43 2c          	movzx  eax,WORD PTR [ebx+0x2c]
c001cee1:	0f af c2             	imul   eax,edx
c001cee4:	99                   	cdq    
c001cee5:	52                   	push   edx
c001cee6:	50                   	push   eax
c001cee7:	56                   	push   esi
c001cee8:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001ceeb:	83 c4 20             	add    esp,0x20
c001ceee:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c001cef6:	66 39 6b 2c          	cmp    WORD PTR [ebx+0x2c],bp
c001cefa:	0f 86 80 00 00 00    	jbe    c001cf80 <Thr::loadProgramIntoMemory(Process*, char const*)+0x1be>
c001cf00:	0f b7 fd             	movzx  edi,bp
c001cf03:	c1 e7 05             	shl    edi,0x5
c001cf06:	03 7c 24 0c          	add    edi,DWORD PTR [esp+0xc]
c001cf0a:	83 3f 01             	cmp    DWORD PTR [edi],0x1
c001cf0d:	75 6b                	jne    c001cf7a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cf0f:	8b 47 08             	mov    eax,DWORD PTR [edi+0x8]
c001cf12:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001cf16:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001cf19:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001cf1d:	52                   	push   edx
c001cf1e:	31 d2                	xor    edx,edx
c001cf20:	8b 47 04             	mov    eax,DWORD PTR [edi+0x4]
c001cf23:	52                   	push   edx
c001cf24:	50                   	push   eax
c001cf25:	56                   	push   esi
c001cf26:	e8 9d 65 ff ff       	call   c00134c8 <File::seek(unsigned long long)>
c001cf2b:	83 c4 10             	add    esp,0x10
c001cf2e:	85 c0                	test   eax,eax
c001cf30:	74 17                	je     c001cf49 <Thr::loadProgramIntoMemory(Process*, char const*)+0x187>
c001cf32:	83 ec 0c             	sub    esp,0xc
c001cf35:	68 d6 c9 02 c0       	push   0xc002c9d6
c001cf3a:	e8 08 5f ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001cf3f:	83 c4 10             	add    esp,0x10
c001cf42:	31 c0                	xor    eax,eax
c001cf44:	e9 87 00 00 00       	jmp    c001cfd0 <Thr::loadProgramIntoMemory(Process*, char const*)+0x20e>
c001cf49:	83 ec 0c             	sub    esp,0xc
c001cf4c:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001cf4f:	2b 47 10             	sub    eax,DWORD PTR [edi+0x10]
c001cf52:	50                   	push   eax
c001cf53:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001cf57:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001cf5b:	56                   	push   esi
c001cf5c:	ff 74 24 6c          	push   DWORD PTR [esp+0x6c]
c001cf60:	e8 b4 fb ff ff       	call   c001cb19 <Thr::allocateMemoryForTask(Process*, File*, unsigned long, unsigned long, unsigned long)>
c001cf65:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001cf69:	03 44 24 38          	add    eax,DWORD PTR [esp+0x38]
c001cf6d:	83 c4 20             	add    esp,0x20
c001cf70:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c001cf74:	73 04                	jae    c001cf7a <Thr::loadProgramIntoMemory(Process*, char const*)+0x1b8>
c001cf76:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c001cf7a:	45                   	inc    ebp
c001cf7b:	e9 76 ff ff ff       	jmp    c001cef6 <Thr::loadProgramIntoMemory(Process*, char const*)+0x134>
c001cf80:	8b 4c 24 50          	mov    ecx,DWORD PTR [esp+0x50]
c001cf84:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001cf88:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001cf8c:	89 91 2e 05 00 00    	mov    DWORD PTR [ecx+0x52e],edx
c001cf92:	83 ec 0c             	sub    esp,0xc
c001cf95:	8b 91 32 05 00 00    	mov    edx,DWORD PTR [ecx+0x532]
c001cf9b:	25 00 f0 ff ff       	and    eax,0xfffff000
c001cfa0:	05 00 10 00 00       	add    eax,0x1000
c001cfa5:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001cfa8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001cfac:	e8 07 29 ff ff       	call   c000f8b8 <free>
c001cfb1:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001cfb4:	e8 ff 28 ff ff       	call   c000f8b8 <free>
c001cfb9:	58                   	pop    eax
c001cfba:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001cfbe:	e8 f5 28 ff ff       	call   c000f8b8 <free>
c001cfc3:	89 34 24             	mov    DWORD PTR [esp],esi
c001cfc6:	e8 9d 64 ff ff       	call   c0013468 <File::close()>
c001cfcb:	83 c4 10             	add    esp,0x10
c001cfce:	b0 01                	mov    al,0x1
c001cfd0:	83 c4 3c             	add    esp,0x3c
c001cfd3:	5b                   	pop    ebx
c001cfd4:	5e                   	pop    esi
c001cfd5:	5f                   	pop    edi
c001cfd6:	5d                   	pop    ebp
c001cfd7:	c3                   	ret    

c001cfd8 <Thr::runtimeReferenceHelper()>:
c001cfd8:	83 ec 18             	sub    esp,0x18
c001cfdb:	68 de c9 02 c0       	push   0xc002c9de
c001cfe0:	e8 62 5e ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001cfe5:	fa                   	cli    
c001cfe6:	83 c4 10             	add    esp,0x10
c001cfe9:	eb fe                	jmp    c001cfe9 <Thr::runtimeReferenceHelper()+0x11>

c001cfeb <Thr::getAddressOfKernelSymbol(char const*)>:
c001cfeb:	57                   	push   edi
c001cfec:	56                   	push   esi
c001cfed:	53                   	push   ebx
c001cfee:	31 db                	xor    ebx,ebx
c001cff0:	39 1d 60 23 03 c0    	cmp    DWORD PTR ds:0xc0032360,ebx
c001cff6:	7e 3c                	jle    c001d034 <Thr::getAddressOfKernelSymbol(char const*)+0x49>
c001cff8:	8b 34 9d e0 22 03 c0 	mov    esi,DWORD PTR [ebx*4-0x3ffcdd20]
c001cfff:	31 ff                	xor    edi,edi
c001d001:	39 3c 9d e0 21 03 c0 	cmp    DWORD PTR [ebx*4-0x3ffcde20],edi
c001d008:	7e 27                	jle    c001d031 <Thr::getAddressOfKernelSymbol(char const*)+0x46>
c001d00a:	50                   	push   eax
c001d00b:	50                   	push   eax
c001d00c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d010:	8b 06                	mov    eax,DWORD PTR [esi]
c001d012:	03 04 9d 60 22 03 c0 	add    eax,DWORD PTR [ebx*4-0x3ffcdda0]
c001d019:	50                   	push   eax
c001d01a:	e8 95 38 fe ff       	call   c00008b4 <strcmp>
c001d01f:	83 c4 10             	add    esp,0x10
c001d022:	85 c0                	test   eax,eax
c001d024:	75 05                	jne    c001d02b <Thr::getAddressOfKernelSymbol(char const*)+0x40>
c001d026:	8b 46 04             	mov    eax,DWORD PTR [esi+0x4]
c001d029:	eb 0b                	jmp    c001d036 <Thr::getAddressOfKernelSymbol(char const*)+0x4b>
c001d02b:	83 c6 10             	add    esi,0x10
c001d02e:	47                   	inc    edi
c001d02f:	eb d0                	jmp    c001d001 <Thr::getAddressOfKernelSymbol(char const*)+0x16>
c001d031:	43                   	inc    ebx
c001d032:	eb bc                	jmp    c001cff0 <Thr::getAddressOfKernelSymbol(char const*)+0x5>
c001d034:	31 c0                	xor    eax,eax
c001d036:	5b                   	pop    ebx
c001d037:	5e                   	pop    esi
c001d038:	5f                   	pop    edi
c001d039:	c3                   	ret    

c001d03a <Thr::loadKernelSymbolTable(char const*)>:
c001d03a:	55                   	push   ebp
c001d03b:	57                   	push   edi
c001d03c:	56                   	push   esi
c001d03d:	53                   	push   ebx
c001d03e:	83 ec 68             	sub    esp,0x68
c001d041:	8b 35 b0 23 03 c0    	mov    esi,DWORD PTR ds:0xc00323b0
c001d047:	68 14 01 00 00       	push   0x114
c001d04c:	e8 57 28 ff ff       	call   c000f8a8 <malloc>
c001d051:	83 c4 0c             	add    esp,0xc
c001d054:	89 c3                	mov    ebx,eax
c001d056:	56                   	push   esi
c001d057:	ff 74 24 78          	push   DWORD PTR [esp+0x78]
c001d05b:	50                   	push   eax
c001d05c:	e8 45 63 ff ff       	call   c00133a6 <File::File(char const*, Process*)>
c001d061:	5e                   	pop    esi
c001d062:	5f                   	pop    edi
c001d063:	6a 01                	push   0x1
c001d065:	53                   	push   ebx
c001d066:	e8 9f 63 ff ff       	call   c001340a <File::open(FileOpenMode)>
c001d06b:	83 c4 10             	add    esp,0x10
c001d06e:	85 c0                	test   eax,eax
c001d070:	74 0a                	je     c001d07c <Thr::loadKernelSymbolTable(char const*)+0x42>
c001d072:	83 ec 0c             	sub    esp,0xc
c001d075:	68 00 ca 02 c0       	push   0xc002ca00
c001d07a:	eb 34                	jmp    c001d0b0 <Thr::loadKernelSymbolTable(char const*)+0x76>
c001d07c:	c7 44 24 28 00 00 00 00 	mov    DWORD PTR [esp+0x28],0x0
c001d084:	83 ec 0c             	sub    esp,0xc
c001d087:	6a 34                	push   0x34
c001d089:	e8 1a 28 ff ff       	call   c000f8a8 <malloc>
c001d08e:	59                   	pop    ecx
c001d08f:	89 c7                	mov    edi,eax
c001d091:	8d 74 24 34          	lea    esi,[esp+0x34]
c001d095:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d097:	56                   	push   esi
c001d098:	57                   	push   edi
c001d099:	6a 00                	push   0x0
c001d09b:	6a 34                	push   0x34
c001d09d:	53                   	push   ebx
c001d09e:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d0a1:	83 c4 20             	add    esp,0x20
c001d0a4:	85 c0                	test   eax,eax
c001d0a6:	74 17                	je     c001d0bf <Thr::loadKernelSymbolTable(char const*)+0x85>
c001d0a8:	83 ec 0c             	sub    esp,0xc
c001d0ab:	68 17 ca 02 c0       	push   0xc002ca17
c001d0b0:	e8 4c d7 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001d0b5:	83 c4 10             	add    esp,0x10
c001d0b8:	31 c0                	xor    eax,eax
c001d0ba:	e9 31 02 00 00       	jmp    c001d2f0 <Thr::loadKernelSymbolTable(char const*)+0x2b6>
c001d0bf:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d0c5:	75 e1                	jne    c001d0a8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d0c7:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d0ca:	85 c0                	test   eax,eax
c001d0cc:	74 da                	je     c001d0a8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d0ce:	52                   	push   edx
c001d0cf:	31 d2                	xor    edx,edx
c001d0d1:	52                   	push   edx
c001d0d2:	50                   	push   eax
c001d0d3:	53                   	push   ebx
c001d0d4:	e8 ef 63 ff ff       	call   c00134c8 <File::seek(unsigned long long)>
c001d0d9:	83 c4 10             	add    esp,0x10
c001d0dc:	85 c0                	test   eax,eax
c001d0de:	75 c8                	jne    c001d0a8 <Thr::loadKernelSymbolTable(char const*)+0x6e>
c001d0e0:	83 ec 0c             	sub    esp,0xc
c001d0e3:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d0e7:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d0eb:	31 ed                	xor    ebp,ebp
c001d0ed:	0f af c2             	imul   eax,edx
c001d0f0:	50                   	push   eax
c001d0f1:	e8 b2 27 ff ff       	call   c000f8a8 <malloc>
c001d0f6:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d0f8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d0fc:	89 34 24             	mov    DWORD PTR [esp],esi
c001d0ff:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d103:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d107:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d10b:	0f af c2             	imul   eax,edx
c001d10e:	99                   	cdq    
c001d10f:	52                   	push   edx
c001d110:	50                   	push   eax
c001d111:	53                   	push   ebx
c001d112:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d115:	83 c4 20             	add    esp,0x20
c001d118:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d120:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c001d128:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d130:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c001d138:	66 39 6f 30          	cmp    WORD PTR [edi+0x30],bp
c001d13c:	0f 86 aa 00 00 00    	jbe    c001d1ec <Thr::loadKernelSymbolTable(char const*)+0x1b2>
c001d142:	0f b7 f5             	movzx  esi,bp
c001d145:	6b f6 28             	imul   esi,esi,0x28
c001d148:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d14c:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d14f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d153:	50                   	push   eax
c001d154:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d158:	0f b7 47 32          	movzx  eax,WORD PTR [edi+0x32]
c001d15c:	8b 16                	mov    edx,DWORD PTR [esi]
c001d15e:	6b c0 28             	imul   eax,eax,0x28
c001d161:	03 54 01 10          	add    edx,DWORD PTR [ecx+eax*1+0x10]
c001d165:	89 d0                	mov    eax,edx
c001d167:	31 d2                	xor    edx,edx
c001d169:	52                   	push   edx
c001d16a:	50                   	push   eax
c001d16b:	53                   	push   ebx
c001d16c:	e8 57 63 ff ff       	call   c00134c8 <File::seek(unsigned long long)>
c001d171:	83 c4 0c             	add    esp,0xc
c001d174:	6a 20                	push   0x20
c001d176:	6a 00                	push   0x0
c001d178:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d17c:	52                   	push   edx
c001d17d:	e8 ea 35 fe ff       	call   c000076c <memset>
c001d182:	58                   	pop    eax
c001d183:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d185:	8d 4c 24 38          	lea    ecx,[esp+0x38]
c001d189:	51                   	push   ecx
c001d18a:	8d 54 24 40          	lea    edx,[esp+0x40]
c001d18e:	52                   	push   edx
c001d18f:	6a 00                	push   0x0
c001d191:	6a 1f                	push   0x1f
c001d193:	53                   	push   ebx
c001d194:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d197:	83 c4 18             	add    esp,0x18
c001d19a:	68 2e ca 02 c0       	push   0xc002ca2e
c001d19f:	8d 54 24 3c          	lea    edx,[esp+0x3c]
c001d1a3:	52                   	push   edx
c001d1a4:	e8 0b 37 fe ff       	call   c00008b4 <strcmp>
c001d1a9:	83 c4 10             	add    esp,0x10
c001d1ac:	85 c0                	test   eax,eax
c001d1ae:	75 0f                	jne    c001d1bf <Thr::loadKernelSymbolTable(char const*)+0x185>
c001d1b0:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1b3:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d1b7:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1bb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d1bf:	50                   	push   eax
c001d1c0:	50                   	push   eax
c001d1c1:	68 36 ca 02 c0       	push   0xc002ca36
c001d1c6:	8d 44 24 3c          	lea    eax,[esp+0x3c]
c001d1ca:	50                   	push   eax
c001d1cb:	e8 e4 36 fe ff       	call   c00008b4 <strcmp>
c001d1d0:	83 c4 10             	add    esp,0x10
c001d1d3:	85 c0                	test   eax,eax
c001d1d5:	75 0f                	jne    c001d1e6 <Thr::loadKernelSymbolTable(char const*)+0x1ac>
c001d1d7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d1da:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d1de:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d1e2:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d1e6:	45                   	inc    ebp
c001d1e7:	e9 4c ff ff ff       	jmp    c001d138 <Thr::loadKernelSymbolTable(char const*)+0xfe>
c001d1ec:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c001d1f1:	75 10                	jne    c001d203 <Thr::loadKernelSymbolTable(char const*)+0x1c9>
c001d1f3:	83 ec 0c             	sub    esp,0xc
c001d1f6:	68 3e ca 02 c0       	push   0xc002ca3e
c001d1fb:	e8 01 d6 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001d200:	83 c4 10             	add    esp,0x10
c001d203:	83 7c 24 10 00       	cmp    DWORD PTR [esp+0x10],0x0
c001d208:	75 10                	jne    c001d21a <Thr::loadKernelSymbolTable(char const*)+0x1e0>
c001d20a:	83 ec 0c             	sub    esp,0xc
c001d20d:	68 3e ca 02 c0       	push   0xc002ca3e
c001d212:	e8 ea d5 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001d217:	83 c4 10             	add    esp,0x10
c001d21a:	31 d2                	xor    edx,edx
c001d21c:	50                   	push   eax
c001d21d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d221:	52                   	push   edx
c001d222:	50                   	push   eax
c001d223:	53                   	push   ebx
c001d224:	e8 9f 62 ff ff       	call   c00134c8 <File::seek(unsigned long long)>
c001d229:	5a                   	pop    edx
c001d22a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001d22e:	e8 75 26 ff ff       	call   c000f8a8 <malloc>
c001d233:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001d237:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d23b:	31 c9                	xor    ecx,ecx
c001d23d:	5e                   	pop    esi
c001d23e:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d240:	8d 6c 24 34          	lea    ebp,[esp+0x34]
c001d244:	55                   	push   ebp
c001d245:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d249:	51                   	push   ecx
c001d24a:	52                   	push   edx
c001d24b:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c001d24f:	89 4c 24 38          	mov    DWORD PTR [esp+0x38],ecx
c001d253:	53                   	push   ebx
c001d254:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d257:	83 c4 14             	add    esp,0x14
c001d25a:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d25e:	e8 45 26 ff ff       	call   c000f8a8 <malloc>
c001d263:	89 c6                	mov    esi,eax
c001d265:	8b 03                	mov    eax,DWORD PTR [ebx]
c001d267:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d26a:	56                   	push   esi
c001d26b:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c001d26f:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c001d273:	51                   	push   ecx
c001d274:	52                   	push   edx
c001d275:	53                   	push   ebx
c001d276:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d279:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d27d:	8b 15 60 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032360
c001d283:	83 c4 1c             	add    esp,0x1c
c001d286:	c1 e8 04             	shr    eax,0x4
c001d289:	89 04 95 e0 21 03 c0 	mov    DWORD PTR [edx*4-0x3ffcde20],eax
c001d290:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001d294:	31 d2                	xor    edx,edx
c001d296:	52                   	push   edx
c001d297:	50                   	push   eax
c001d298:	53                   	push   ebx
c001d299:	e8 2a 62 ff ff       	call   c00134c8 <File::seek(unsigned long long)>
c001d29e:	8b 0b                	mov    ecx,DWORD PTR [ebx]
c001d2a0:	31 d2                	xor    edx,edx
c001d2a2:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d2a5:	56                   	push   esi
c001d2a6:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d2aa:	52                   	push   edx
c001d2ab:	50                   	push   eax
c001d2ac:	53                   	push   ebx
c001d2ad:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d2b0:	83 c4 14             	add    esp,0x14
c001d2b3:	53                   	push   ebx
c001d2b4:	e8 af 61 ff ff       	call   c0013468 <File::close()>
c001d2b9:	5d                   	pop    ebp
c001d2ba:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d2be:	e8 f5 25 ff ff       	call   c000f8b8 <free>
c001d2c3:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d2c6:	e8 ed 25 ff ff       	call   c000f8b8 <free>
c001d2cb:	a1 60 23 03 c0       	mov    eax,ds:0xc0032360
c001d2d0:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c001d2d4:	8d 50 01             	lea    edx,[eax+0x1]
c001d2d7:	89 0c 85 e0 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdd20],ecx
c001d2de:	89 34 85 60 22 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdda0],esi
c001d2e5:	89 15 60 23 03 c0    	mov    DWORD PTR ds:0xc0032360,edx
c001d2eb:	83 c4 10             	add    esp,0x10
c001d2ee:	b0 01                	mov    al,0x1
c001d2f0:	83 c4 5c             	add    esp,0x5c
c001d2f3:	5b                   	pop    ebx
c001d2f4:	5e                   	pop    esi
c001d2f5:	5f                   	pop    edi
c001d2f6:	5d                   	pop    ebp
c001d2f7:	c3                   	ret    

c001d2f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>:
c001d2f8:	55                   	push   ebp
c001d2f9:	57                   	push   edi
c001d2fa:	56                   	push   esi
c001d2fb:	53                   	push   ebx
c001d2fc:	81 ec 68 03 00 00    	sub    esp,0x368
c001d302:	8a 84 24 84 03 00 00 	mov    al,BYTE PTR [esp+0x384]
c001d309:	8b 1d b0 23 03 c0    	mov    ebx,DWORD PTR ds:0xc00323b0
c001d30f:	88 44 24 2b          	mov    BYTE PTR [esp+0x2b],al
c001d313:	68 14 01 00 00       	push   0x114
c001d318:	e8 8b 25 ff ff       	call   c000f8a8 <malloc>
c001d31d:	83 c4 0c             	add    esp,0xc
c001d320:	89 c5                	mov    ebp,eax
c001d322:	53                   	push   ebx
c001d323:	ff b4 24 78 03 00 00 	push   DWORD PTR [esp+0x378]
c001d32a:	50                   	push   eax
c001d32b:	e8 76 60 ff ff       	call   c00133a6 <File::File(char const*, Process*)>
c001d330:	5e                   	pop    esi
c001d331:	5f                   	pop    edi
c001d332:	6a 01                	push   0x1
c001d334:	55                   	push   ebp
c001d335:	e8 d0 60 ff ff       	call   c001340a <File::open(FileOpenMode)>
c001d33a:	83 c4 10             	add    esp,0x10
c001d33d:	85 c0                	test   eax,eax
c001d33f:	0f 85 a7 06 00 00    	jne    c001d9ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d345:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c001d34d:	83 ec 0c             	sub    esp,0xc
c001d350:	6a 34                	push   0x34
c001d352:	e8 51 25 ff ff       	call   c000f8a8 <malloc>
c001d357:	5b                   	pop    ebx
c001d358:	89 c7                	mov    edi,eax
c001d35a:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d35e:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d361:	53                   	push   ebx
c001d362:	57                   	push   edi
c001d363:	6a 00                	push   0x0
c001d365:	6a 34                	push   0x34
c001d367:	55                   	push   ebp
c001d368:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d36b:	83 c4 20             	add    esp,0x20
c001d36e:	85 c0                	test   eax,eax
c001d370:	0f 85 76 06 00 00    	jne    c001d9ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d376:	81 3f 7f 45 4c 46    	cmp    DWORD PTR [edi],0x464c457f
c001d37c:	0f 85 6a 06 00 00    	jne    c001d9ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d382:	8b 47 20             	mov    eax,DWORD PTR [edi+0x20]
c001d385:	85 c0                	test   eax,eax
c001d387:	0f 84 5f 06 00 00    	je     c001d9ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d38d:	31 d2                	xor    edx,edx
c001d38f:	51                   	push   ecx
c001d390:	52                   	push   edx
c001d391:	50                   	push   eax
c001d392:	55                   	push   ebp
c001d393:	e8 30 61 ff ff       	call   c00134c8 <File::seek(unsigned long long)>
c001d398:	83 c4 10             	add    esp,0x10
c001d39b:	85 c0                	test   eax,eax
c001d39d:	0f 85 49 06 00 00    	jne    c001d9ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d3a3:	83 ec 0c             	sub    esp,0xc
c001d3a6:	8b 47 18             	mov    eax,DWORD PTR [edi+0x18]
c001d3a9:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d3ad:	89 44 24 34          	mov    DWORD PTR [esp+0x34],eax
c001d3b1:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3b5:	0f af c2             	imul   eax,edx
c001d3b8:	50                   	push   eax
c001d3b9:	e8 ea 24 ff ff       	call   c000f8a8 <malloc>
c001d3be:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d3c1:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d3c5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d3c8:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d3cc:	0f b7 57 2e          	movzx  edx,WORD PTR [edi+0x2e]
c001d3d0:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d3d4:	0f af c2             	imul   eax,edx
c001d3d7:	99                   	cdq    
c001d3d8:	52                   	push   edx
c001d3d9:	50                   	push   eax
c001d3da:	55                   	push   ebp
c001d3db:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d3de:	8b 47 1c             	mov    eax,DWORD PTR [edi+0x1c]
c001d3e1:	83 c4 20             	add    esp,0x20
c001d3e4:	85 c0                	test   eax,eax
c001d3e6:	0f 84 00 06 00 00    	je     c001d9ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d3ec:	52                   	push   edx
c001d3ed:	31 d2                	xor    edx,edx
c001d3ef:	52                   	push   edx
c001d3f0:	50                   	push   eax
c001d3f1:	55                   	push   ebp
c001d3f2:	e8 d1 60 ff ff       	call   c00134c8 <File::seek(unsigned long long)>
c001d3f7:	83 c4 10             	add    esp,0x10
c001d3fa:	85 c0                	test   eax,eax
c001d3fc:	0f 85 ea 05 00 00    	jne    c001d9ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d402:	83 ec 0c             	sub    esp,0xc
c001d405:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d409:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d40d:	31 f6                	xor    esi,esi
c001d40f:	0f af c2             	imul   eax,edx
c001d412:	50                   	push   eax
c001d413:	e8 90 24 ff ff       	call   c000f8a8 <malloc>
c001d418:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d41b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d41f:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d422:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d426:	0f b7 57 2a          	movzx  edx,WORD PTR [edi+0x2a]
c001d42a:	0f b7 47 2c          	movzx  eax,WORD PTR [edi+0x2c]
c001d42e:	0f af c2             	imul   eax,edx
c001d431:	99                   	cdq    
c001d432:	52                   	push   edx
c001d433:	50                   	push   eax
c001d434:	55                   	push   ebp
c001d435:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d438:	83 c4 20             	add    esp,0x20
c001d43b:	66 39 77 2c          	cmp    WORD PTR [edi+0x2c],si
c001d43f:	0f 86 8a 00 00 00    	jbe    c001d4cf <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d7>
c001d445:	0f b7 de             	movzx  ebx,si
c001d448:	c1 e3 05             	shl    ebx,0x5
c001d44b:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c001d44f:	83 3b 01             	cmp    DWORD PTR [ebx],0x1
c001d452:	75 75                	jne    c001d4c9 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x1d1>
c001d454:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c001d457:	31 d2                	xor    edx,edx
c001d459:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d45d:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001d460:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d464:	50                   	push   eax
c001d465:	8b 43 04             	mov    eax,DWORD PTR [ebx+0x4]
c001d468:	52                   	push   edx
c001d469:	50                   	push   eax
c001d46a:	55                   	push   ebp
c001d46b:	e8 58 60 ff ff       	call   c00134c8 <File::seek(unsigned long long)>
c001d470:	83 c4 10             	add    esp,0x10
c001d473:	85 c0                	test   eax,eax
c001d475:	0f 85 71 05 00 00    	jne    c001d9ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d47b:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c001d482:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d485:	2b 44 24 28          	sub    eax,DWORD PTR [esp+0x28]
c001d489:	31 d2                	xor    edx,edx
c001d48b:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001d48f:	83 ec 0c             	sub    esp,0xc
c001d492:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c001d496:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d49d:	50                   	push   eax
c001d49e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d4a2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d4a6:	52                   	push   edx
c001d4a7:	50                   	push   eax
c001d4a8:	55                   	push   ebp
c001d4a9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d4ac:	83 c4 1c             	add    esp,0x1c
c001d4af:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c001d4b2:	2b 43 10             	sub    eax,DWORD PTR [ebx+0x10]
c001d4b5:	50                   	push   eax
c001d4b6:	6a 00                	push   0x0
c001d4b8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001d4bc:	03 44 24 18          	add    eax,DWORD PTR [esp+0x18]
c001d4c0:	50                   	push   eax
c001d4c1:	e8 a6 32 fe ff       	call   c000076c <memset>
c001d4c6:	83 c4 10             	add    esp,0x10
c001d4c9:	46                   	inc    esi
c001d4ca:	e9 6c ff ff ff       	jmp    c001d43b <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x143>
c001d4cf:	53                   	push   ebx
c001d4d0:	31 db                	xor    ebx,ebx
c001d4d2:	68 00 01 00 00       	push   0x100
c001d4d7:	6a 00                	push   0x0
c001d4d9:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c001d4dd:	50                   	push   eax
c001d4de:	e8 89 32 fe ff       	call   c000076c <memset>
c001d4e3:	83 c4 0c             	add    esp,0xc
c001d4e6:	68 00 01 00 00       	push   0x100
c001d4eb:	6a 00                	push   0x0
c001d4ed:	8d 84 24 5c 01 00 00 	lea    eax,[esp+0x15c]
c001d4f4:	50                   	push   eax
c001d4f5:	e8 72 32 fe ff       	call   c000076c <memset>
c001d4fa:	83 c4 10             	add    esp,0x10
c001d4fd:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c001d505:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d50d:	c7 44 24 24 00 00 00 00 	mov    DWORD PTR [esp+0x24],0x0
c001d515:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d51d:	c7 44 24 18 00 00 00 00 	mov    DWORD PTR [esp+0x18],0x0
c001d525:	66 39 5f 30          	cmp    WORD PTR [edi+0x30],bx
c001d529:	0f 86 30 01 00 00    	jbe    c001d65f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x367>
c001d52f:	0f b7 f3             	movzx  esi,bx
c001d532:	6b f6 28             	imul   esi,esi,0x28
c001d535:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c001d539:	8b 46 10             	mov    eax,DWORD PTR [esi+0x10]
c001d53c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d540:	52                   	push   edx
c001d541:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001d545:	0f b7 57 32          	movzx  edx,WORD PTR [edi+0x32]
c001d549:	8b 06                	mov    eax,DWORD PTR [esi]
c001d54b:	6b d2 28             	imul   edx,edx,0x28
c001d54e:	03 44 11 10          	add    eax,DWORD PTR [ecx+edx*1+0x10]
c001d552:	31 d2                	xor    edx,edx
c001d554:	52                   	push   edx
c001d555:	50                   	push   eax
c001d556:	55                   	push   ebp
c001d557:	e8 6c 5f ff ff       	call   c00134c8 <File::seek(unsigned long long)>
c001d55c:	83 c4 0c             	add    esp,0xc
c001d55f:	6a 20                	push   0x20
c001d561:	6a 00                	push   0x0
c001d563:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d56a:	51                   	push   ecx
c001d56b:	e8 fc 31 fe ff       	call   c000076c <memset>
c001d570:	59                   	pop    ecx
c001d571:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d574:	8d 54 24 58          	lea    edx,[esp+0x58]
c001d578:	52                   	push   edx
c001d579:	8d 8c 24 60 02 00 00 	lea    ecx,[esp+0x260]
c001d580:	51                   	push   ecx
c001d581:	6a 00                	push   0x0
c001d583:	6a 1f                	push   0x1f
c001d585:	55                   	push   ebp
c001d586:	ff 50 0c             	call   DWORD PTR [eax+0xc]
c001d589:	83 c4 1c             	add    esp,0x1c
c001d58c:	6a 09                	push   0x9
c001d58e:	68 58 ca 02 c0       	push   0xc002ca58
c001d593:	8d 8c 24 5c 02 00 00 	lea    ecx,[esp+0x25c]
c001d59a:	51                   	push   ecx
c001d59b:	e8 c8 30 fe ff       	call   c0000668 <memcmp>
c001d5a0:	83 c4 10             	add    esp,0x10
c001d5a3:	85 c0                	test   eax,eax
c001d5a5:	75 21                	jne    c001d5c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x2d0>
c001d5a7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5ab:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d5af:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d5b3:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d5b7:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d5ba:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d5c1:	89 d0                	mov    eax,edx
c001d5c3:	40                   	inc    eax
c001d5c4:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d5c8:	50                   	push   eax
c001d5c9:	6a 09                	push   0x9
c001d5cb:	68 62 ca 02 c0       	push   0xc002ca62
c001d5d0:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d5d7:	50                   	push   eax
c001d5d8:	e8 8b 30 fe ff       	call   c0000668 <memcmp>
c001d5dd:	83 c4 10             	add    esp,0x10
c001d5e0:	85 c0                	test   eax,eax
c001d5e2:	75 21                	jne    c001d605 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x30d>
c001d5e4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001d5e8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001d5ec:	89 54 84 50          	mov    DWORD PTR [esp+eax*4+0x50],edx
c001d5f0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001d5f4:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d5f7:	89 84 94 50 01 00 00 	mov    DWORD PTR [esp+edx*4+0x150],eax
c001d5fe:	89 d0                	mov    eax,edx
c001d600:	40                   	inc    eax
c001d601:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001d605:	50                   	push   eax
c001d606:	50                   	push   eax
c001d607:	68 2e ca 02 c0       	push   0xc002ca2e
c001d60c:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d613:	50                   	push   eax
c001d614:	e8 9b 32 fe ff       	call   c00008b4 <strcmp>
c001d619:	83 c4 10             	add    esp,0x10
c001d61c:	85 c0                	test   eax,eax
c001d61e:	75 0f                	jne    c001d62f <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x337>
c001d620:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d623:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001d627:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d62b:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c001d62f:	50                   	push   eax
c001d630:	50                   	push   eax
c001d631:	68 36 ca 02 c0       	push   0xc002ca36
c001d636:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d63d:	50                   	push   eax
c001d63e:	e8 71 32 fe ff       	call   c00008b4 <strcmp>
c001d643:	83 c4 10             	add    esp,0x10
c001d646:	85 c0                	test   eax,eax
c001d648:	75 0f                	jne    c001d659 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x361>
c001d64a:	8b 46 14             	mov    eax,DWORD PTR [esi+0x14]
c001d64d:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c001d651:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d655:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c001d659:	43                   	inc    ebx
c001d65a:	e9 c6 fe ff ff       	jmp    c001d525 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x22d>
c001d65f:	31 d2                	xor    edx,edx
c001d661:	50                   	push   eax
c001d662:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001d666:	52                   	push   edx
c001d667:	50                   	push   eax
c001d668:	55                   	push   ebp
c001d669:	e8 5a 5e ff ff       	call   c00134c8 <File::seek(unsigned long long)>
c001d66e:	58                   	pop    eax
c001d66f:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001d673:	e8 30 22 ff ff       	call   c000f8a8 <malloc>
c001d678:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d67b:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c001d67f:	31 d2                	xor    edx,edx
c001d681:	58                   	pop    eax
c001d682:	8d 5c 24 54          	lea    ebx,[esp+0x54]
c001d686:	53                   	push   ebx
c001d687:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c001d68b:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d68f:	52                   	push   edx
c001d690:	50                   	push   eax
c001d691:	55                   	push   ebp
c001d692:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d695:	83 c4 14             	add    esp,0x14
c001d698:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001d69c:	e8 07 22 ff ff       	call   c000f8a8 <malloc>
c001d6a1:	31 d2                	xor    edx,edx
c001d6a3:	89 44 24 28          	mov    DWORD PTR [esp+0x28],eax
c001d6a7:	83 c4 0c             	add    esp,0xc
c001d6aa:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d6ae:	52                   	push   edx
c001d6af:	50                   	push   eax
c001d6b0:	55                   	push   ebp
c001d6b1:	e8 12 5e ff ff       	call   c00134c8 <File::seek(unsigned long long)>
c001d6b6:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d6b9:	31 d2                	xor    edx,edx
c001d6bb:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001d6be:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001d6c2:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001d6c6:	52                   	push   edx
c001d6c7:	50                   	push   eax
c001d6c8:	55                   	push   ebp
c001d6c9:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d6cc:	83 c4 20             	add    esp,0x20
c001d6cf:	c7 44 24 14 00 00 00 00 	mov    DWORD PTR [esp+0x14],0x0
c001d6d7:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001d6db:	39 5c 24 04          	cmp    DWORD PTR [esp+0x4],ebx
c001d6df:	0f 84 0b 03 00 00    	je     c001d9f0 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f8>
c001d6e5:	8b 84 9c 50 01 00 00 	mov    eax,DWORD PTR [esp+ebx*4+0x150]
c001d6ec:	31 d2                	xor    edx,edx
c001d6ee:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c001d6f2:	c1 e8 03             	shr    eax,0x3
c001d6f5:	89 44 24 38          	mov    DWORD PTR [esp+0x38],eax
c001d6f9:	51                   	push   ecx
c001d6fa:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001d6fe:	8b 44 84 54          	mov    eax,DWORD PTR [esp+eax*4+0x54]
c001d702:	52                   	push   edx
c001d703:	50                   	push   eax
c001d704:	55                   	push   ebp
c001d705:	e8 be 5d ff ff       	call   c00134c8 <File::seek(unsigned long long)>
c001d70a:	5b                   	pop    ebx
c001d70b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d70f:	ff b4 84 5c 01 00 00 	push   DWORD PTR [esp+eax*4+0x15c]
c001d716:	e8 8d 21 ff ff       	call   c000f8a8 <malloc>
c001d71b:	8b 4d 00             	mov    ecx,DWORD PTR [ebp+0x0]
c001d71e:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c001d722:	31 d2                	xor    edx,edx
c001d724:	5e                   	pop    esi
c001d725:	8d 44 24 58          	lea    eax,[esp+0x58]
c001d729:	50                   	push   eax
c001d72a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d72e:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c001d732:	8b 84 84 64 01 00 00 	mov    eax,DWORD PTR [esp+eax*4+0x164]
c001d739:	52                   	push   edx
c001d73a:	50                   	push   eax
c001d73b:	55                   	push   ebp
c001d73c:	ff 51 0c             	call   DWORD PTR [ecx+0xc]
c001d73f:	83 c4 20             	add    esp,0x20
c001d742:	c7 44 24 20 00 00 00 00 	mov    DWORD PTR [esp+0x20],0x0
c001d74a:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c001d74e:	39 74 24 20          	cmp    DWORD PTR [esp+0x20],esi
c001d752:	0f 8d 7c 02 00 00    	jge    c001d9d4 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6dc>
c001d758:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c001d75c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d760:	c6 44 24 24 00       	mov    BYTE PTR [esp+0x24],0x0
c001d765:	8b 04 d8             	mov    eax,DWORD PTR [eax+ebx*8]
c001d768:	89 44 24 2c          	mov    DWORD PTR [esp+0x2c],eax
c001d76c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001d770:	8b 5c d8 04          	mov    ebx,DWORD PTR [eax+ebx*8+0x4]
c001d774:	89 d8                	mov    eax,ebx
c001d776:	c1 e8 08             	shr    eax,0x8
c001d779:	89 c6                	mov    esi,eax
c001d77b:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c001d77f:	c1 e6 04             	shl    esi,0x4
c001d782:	03 74 24 34          	add    esi,DWORD PTR [esp+0x34]
c001d786:	8b 56 04             	mov    edx,DWORD PTR [esi+0x4]
c001d789:	85 d2                	test   edx,edx
c001d78b:	0f 85 bf 00 00 00    	jne    c001d850 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d791:	83 ec 0c             	sub    esp,0xc
c001d794:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d798:	03 06                	add    eax,DWORD PTR [esi]
c001d79a:	50                   	push   eax
c001d79b:	e8 4b f8 ff ff       	call   c001cfeb <Thr::getAddressOfKernelSymbol(char const*)>
c001d7a0:	83 c4 10             	add    esp,0x10
c001d7a3:	89 c2                	mov    edx,eax
c001d7a5:	c6 44 24 24 01       	mov    BYTE PTR [esp+0x24],0x1
c001d7aa:	85 c0                	test   eax,eax
c001d7ac:	0f 85 9e 00 00 00    	jne    c001d850 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d7b2:	83 ec 0c             	sub    esp,0xc
c001d7b5:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c001d7b9:	03 06                	add    eax,DWORD PTR [esi]
c001d7bb:	50                   	push   eax
c001d7bc:	e8 9a 0d ff ff       	call   c000e55b <Krnl::resolveCompatibilitySymbol(char*)>
c001d7c1:	83 c4 10             	add    esp,0x10
c001d7c4:	89 c2                	mov    edx,eax
c001d7c6:	85 c0                	test   eax,eax
c001d7c8:	0f 85 82 00 00 00    	jne    c001d850 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x558>
c001d7ce:	89 44 24 3c          	mov    DWORD PTR [esp+0x3c],eax
c001d7d2:	50                   	push   eax
c001d7d3:	50                   	push   eax
c001d7d4:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7d8:	03 06                	add    eax,DWORD PTR [esi]
c001d7da:	50                   	push   eax
c001d7db:	68 6c ca 02 c0       	push   0xc002ca6c
c001d7e0:	e8 62 56 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001d7e5:	58                   	pop    eax
c001d7e6:	5a                   	pop    edx
c001d7e7:	68 86 ca 02 c0       	push   0xc002ca86
c001d7ec:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d7f3:	50                   	push   eax
c001d7f4:	e8 2f 30 fe ff       	call   c0000828 <strcpy>
c001d7f9:	59                   	pop    ecx
c001d7fa:	58                   	pop    eax
c001d7fb:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001d7ff:	03 06                	add    eax,DWORD PTR [esi]
c001d801:	50                   	push   eax
c001d802:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d809:	50                   	push   eax
c001d80a:	e8 59 31 fe ff       	call   c0000968 <strcat>
c001d80f:	58                   	pop    eax
c001d810:	5a                   	pop    edx
c001d811:	68 1c cb 02 c0       	push   0xc002cb1c
c001d816:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d81d:	50                   	push   eax
c001d81e:	e8 45 31 fe ff       	call   c0000968 <strcat>
c001d823:	83 c4 10             	add    esp,0x10
c001d826:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d82b:	0f 84 5d 01 00 00    	je     c001d98e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d831:	83 ec 0c             	sub    esp,0xc
c001d834:	8d 84 24 5c 02 00 00 	lea    eax,[esp+0x25c]
c001d83b:	50                   	push   eax
c001d83c:	e8 c0 cf ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001d841:	83 c4 10             	add    esp,0x10
c001d844:	8a 44 24 1f          	mov    al,BYTE PTR [esp+0x1f]
c001d848:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001d84c:	88 44 24 24          	mov    BYTE PTR [esp+0x24],al
c001d850:	80 fb 01             	cmp    bl,0x1
c001d853:	0f 85 88 00 00 00    	jne    c001d8e1 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e9>
c001d859:	8b 8c 24 74 03 00 00 	mov    ecx,DWORD PTR [esp+0x374]
c001d860:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c001d864:	2b 4c 24 28          	sub    ecx,DWORD PTR [esp+0x28]
c001d868:	01 ce                	add    esi,ecx
c001d86a:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d870:	0f 94 c0             	sete   al
c001d873:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d879:	0f 94 c3             	sete   bl
c001d87c:	09 c3                	or     ebx,eax
c001d87e:	8b 06                	mov    eax,DWORD PTR [esi]
c001d880:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d885:	74 41                	je     c001d8c8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5d0>
c001d887:	8d 0c 02             	lea    ecx,[edx+eax*1]
c001d88a:	84 db                	test   bl,bl
c001d88c:	75 15                	jne    c001d8a3 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5ab>
c001d88e:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d892:	66 83 f8 0c          	cmp    ax,0xc
c001d896:	76 05                	jbe    c001d89d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5a5>
c001d898:	b8 0c 00 00 00       	mov    eax,0xc
c001d89d:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d8a1:	76 37                	jbe    c001d8da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d8a3:	89 4c 24 24          	mov    DWORD PTR [esp+0x24],ecx
c001d8a7:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d8ac:	0f 84 dc 00 00 00    	je     c001d98e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d8b2:	83 ec 0c             	sub    esp,0xc
c001d8b5:	68 9d ca 02 c0       	push   0xc002ca9d
c001d8ba:	e8 42 cf ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001d8bf:	83 c4 10             	add    esp,0x10
c001d8c2:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c001d8c6:	eb 12                	jmp    c001d8da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d8c8:	01 c1                	add    ecx,eax
c001d8ca:	84 db                	test   bl,bl
c001d8cc:	75 0c                	jne    c001d8da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d8ce:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d8d2:	3b 44 24 30          	cmp    eax,DWORD PTR [esp+0x30]
c001d8d6:	77 02                	ja     c001d8da <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x5e2>
c001d8d8:	01 d1                	add    ecx,edx
c001d8da:	89 0e                	mov    DWORD PTR [esi],ecx
c001d8dc:	e9 ea 00 00 00       	jmp    c001d9cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d8e1:	80 fb 02             	cmp    bl,0x2
c001d8e4:	75 7c                	jne    c001d962 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x66a>
c001d8e6:	8b b4 24 74 03 00 00 	mov    esi,DWORD PTR [esp+0x374]
c001d8ed:	2b 74 24 28          	sub    esi,DWORD PTR [esp+0x28]
c001d8f1:	03 74 24 2c          	add    esi,DWORD PTR [esp+0x2c]
c001d8f5:	81 fb 01 04 00 00    	cmp    ebx,0x401
c001d8fb:	74 20                	je     c001d91d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d8fd:	81 fb 01 01 00 00    	cmp    ebx,0x101
c001d903:	74 18                	je     c001d91d <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x625>
c001d905:	0f b7 47 30          	movzx  eax,WORD PTR [edi+0x30]
c001d909:	b9 0a 00 00 00       	mov    ecx,0xa
c001d90e:	66 83 f8 0e          	cmp    ax,0xe
c001d912:	77 03                	ja     c001d917 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x61f>
c001d914:	8d 48 fc             	lea    ecx,[eax-0x4]
c001d917:	3b 4c 24 30          	cmp    ecx,DWORD PTR [esp+0x30]
c001d91b:	76 1f                	jbe    c001d93c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x644>
c001d91d:	89 54 24 30          	mov    DWORD PTR [esp+0x30],edx
c001d921:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d926:	74 66                	je     c001d98e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d928:	83 ec 0c             	sub    esp,0xc
c001d92b:	68 b9 ca 02 c0       	push   0xc002cab9
c001d930:	e8 cc ce ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001d935:	83 c4 10             	add    esp,0x10
c001d938:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001d93c:	8b 06                	mov    eax,DWORD PTR [esi]
c001d93e:	80 7c 24 24 00       	cmp    BYTE PTR [esp+0x24],0x0
c001d943:	74 13                	je     c001d958 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x660>
c001d945:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c001d949:	2b 8c 24 74 03 00 00 	sub    ecx,DWORD PTR [esp+0x374]
c001d950:	2b 4c 24 2c          	sub    ecx,DWORD PTR [esp+0x2c]
c001d954:	01 c8                	add    eax,ecx
c001d956:	eb 04                	jmp    c001d95c <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x664>
c001d958:	2b 44 24 2c          	sub    eax,DWORD PTR [esp+0x2c]
c001d95c:	01 c2                	add    edx,eax
c001d95e:	89 16                	mov    DWORD PTR [esi],edx
c001d960:	eb 69                	jmp    c001d9cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d962:	0f b6 db             	movzx  ebx,bl
c001d965:	50                   	push   eax
c001d966:	50                   	push   eax
c001d967:	53                   	push   ebx
c001d968:	68 d5 ca 02 c0       	push   0xc002cad5
c001d96d:	e8 d5 54 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001d972:	83 c4 10             	add    esp,0x10
c001d975:	80 7c 24 1f 00       	cmp    BYTE PTR [esp+0x1f],0x0
c001d97a:	74 12                	je     c001d98e <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x696>
c001d97c:	83 ec 0c             	sub    esp,0xc
c001d97f:	68 e0 ca 02 c0       	push   0xc002cae0
c001d984:	e8 78 ce ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001d989:	83 c4 10             	add    esp,0x10
c001d98c:	eb 3d                	jmp    c001d9cb <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6d3>
c001d98e:	83 ec 0c             	sub    esp,0xc
c001d991:	55                   	push   ebp
c001d992:	e8 d1 5a ff ff       	call   c0013468 <File::close()>
c001d997:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d99a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d99d:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001d9a0:	59                   	pop    ecx
c001d9a1:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d9a5:	e8 0e 1f ff ff       	call   c000f8b8 <free>
c001d9aa:	5b                   	pop    ebx
c001d9ab:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001d9af:	e8 04 1f ff ff       	call   c000f8b8 <free>
c001d9b4:	89 3c 24             	mov    DWORD PTR [esp],edi
c001d9b7:	e8 fc 1e ff ff       	call   c000f8b8 <free>
c001d9bc:	5e                   	pop    esi
c001d9bd:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001d9c1:	e8 f2 1e ff ff       	call   c000f8b8 <free>
c001d9c6:	83 c4 10             	add    esp,0x10
c001d9c9:	eb 21                	jmp    c001d9ec <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x6f4>
c001d9cb:	ff 44 24 20          	inc    DWORD PTR [esp+0x20]
c001d9cf:	e9 76 fd ff ff       	jmp    c001d74a <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x452>
c001d9d4:	83 ec 0c             	sub    esp,0xc
c001d9d7:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c001d9db:	e8 d8 1e ff ff       	call   c000f8b8 <free>
c001d9e0:	ff 44 24 24          	inc    DWORD PTR [esp+0x24]
c001d9e4:	83 c4 10             	add    esp,0x10
c001d9e7:	e9 eb fc ff ff       	jmp    c001d6d7 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x3df>
c001d9ec:	31 c0                	xor    eax,eax
c001d9ee:	eb 33                	jmp    c001da23 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)+0x72b>
c001d9f0:	83 ec 0c             	sub    esp,0xc
c001d9f3:	55                   	push   ebp
c001d9f4:	e8 6f 5a ff ff       	call   c0013468 <File::close()>
c001d9f9:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c001d9fc:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001d9ff:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001da02:	58                   	pop    eax
c001da03:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001da07:	e8 ac 1e ff ff       	call   c000f8b8 <free>
c001da0c:	89 3c 24             	mov    DWORD PTR [esp],edi
c001da0f:	e8 a4 1e ff ff       	call   c000f8b8 <free>
c001da14:	5a                   	pop    edx
c001da15:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001da19:	e8 9a 1e ff ff       	call   c000f8b8 <free>
c001da1e:	83 c4 10             	add    esp,0x10
c001da21:	b0 01                	mov    al,0x1
c001da23:	81 c4 5c 03 00 00    	add    esp,0x35c
c001da29:	5b                   	pop    ebx
c001da2a:	5e                   	pop    esi
c001da2b:	5f                   	pop    edi
c001da2c:	5d                   	pop    ebp
c001da2d:	c3                   	ret    

c001da2e <Thr::getDriverBaseFromAddress(unsigned long)>:
c001da2e:	56                   	push   esi
c001da2f:	31 d2                	xor    edx,edx
c001da31:	53                   	push   ebx
c001da32:	8b 1d c0 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031bc0
c001da38:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001da3c:	39 d3                	cmp    ebx,edx
c001da3e:	7e 1b                	jle    c001da5b <Thr::getDriverBaseFromAddress(unsigned long)+0x2d>
c001da40:	8b 04 95 e0 1d 03 c0 	mov    eax,DWORD PTR [edx*4-0x3ffce220]
c001da47:	39 c8                	cmp    eax,ecx
c001da49:	77 0d                	ja     c001da58 <Thr::getDriverBaseFromAddress(unsigned long)+0x2a>
c001da4b:	8b 34 95 e0 1b 03 c0 	mov    esi,DWORD PTR [edx*4-0x3ffce420]
c001da52:	01 c6                	add    esi,eax
c001da54:	39 ce                	cmp    esi,ecx
c001da56:	77 05                	ja     c001da5d <Thr::getDriverBaseFromAddress(unsigned long)+0x2f>
c001da58:	42                   	inc    edx
c001da59:	eb e1                	jmp    c001da3c <Thr::getDriverBaseFromAddress(unsigned long)+0xe>
c001da5b:	31 c0                	xor    eax,eax
c001da5d:	5b                   	pop    ebx
c001da5e:	5e                   	pop    esi
c001da5f:	c3                   	ret    

c001da60 <Thr::getDriverNameFromAddress(unsigned long)>:
c001da60:	53                   	push   ebx
c001da61:	31 c0                	xor    eax,eax
c001da63:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c001da67:	8b 1d c0 1b 03 c0    	mov    ebx,DWORD PTR ds:0xc0031bc0
c001da6d:	39 c3                	cmp    ebx,eax
c001da6f:	7e 22                	jle    c001da93 <Thr::getDriverNameFromAddress(unsigned long)+0x33>
c001da71:	8b 14 85 e0 1d 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce220]
c001da78:	39 ca                	cmp    edx,ecx
c001da7a:	77 14                	ja     c001da90 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001da7c:	03 14 85 e0 1b 03 c0 	add    edx,DWORD PTR [eax*4-0x3ffce420]
c001da83:	39 ca                	cmp    edx,ecx
c001da85:	76 09                	jbe    c001da90 <Thr::getDriverNameFromAddress(unsigned long)+0x30>
c001da87:	8b 04 85 e0 1f 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce020]
c001da8e:	eb 05                	jmp    c001da95 <Thr::getDriverNameFromAddress(unsigned long)+0x35>
c001da90:	40                   	inc    eax
c001da91:	eb da                	jmp    c001da6d <Thr::getDriverNameFromAddress(unsigned long)+0xd>
c001da93:	31 c0                	xor    eax,eax
c001da95:	5b                   	pop    ebx
c001da96:	c3                   	ret    

c001da97 <Thr::getDriverOffsetFromAddress(unsigned long)>:
c001da97:	53                   	push   ebx
c001da98:	8b 5c 24 08          	mov    ebx,DWORD PTR [esp+0x8]
c001da9c:	53                   	push   ebx
c001da9d:	e8 8c ff ff ff       	call   c001da2e <Thr::getDriverBaseFromAddress(unsigned long)>
c001daa2:	5a                   	pop    edx
c001daa3:	31 d2                	xor    edx,edx
c001daa5:	85 c0                	test   eax,eax
c001daa7:	74 04                	je     c001daad <Thr::getDriverOffsetFromAddress(unsigned long)+0x16>
c001daa9:	89 da                	mov    edx,ebx
c001daab:	29 c2                	sub    edx,eax
c001daad:	89 d0                	mov    eax,edx
c001daaf:	5b                   	pop    ebx
c001dab0:	c3                   	ret    

c001dab1 <Thr::loadDLL(char const*, bool)>:
c001dab1:	55                   	push   ebp
c001dab2:	57                   	push   edi
c001dab3:	56                   	push   esi
c001dab4:	53                   	push   ebx
c001dab5:	81 ec 34 01 00 00    	sub    esp,0x134
c001dabb:	8b b4 24 48 01 00 00 	mov    esi,DWORD PTR [esp+0x148]
c001dac2:	8b bc 24 4c 01 00 00 	mov    edi,DWORD PTR [esp+0x14c]
c001dac9:	56                   	push   esi
c001daca:	68 f8 ca 02 c0       	push   0xc002caf8
c001dacf:	e8 73 53 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001dad4:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001dadb:	e8 c8 1d ff ff       	call   c000f8a8 <malloc>
c001dae0:	83 c4 0c             	add    esp,0xc
c001dae3:	89 c3                	mov    ebx,eax
c001dae5:	ff 35 b0 23 03 c0    	push   DWORD PTR ds:0xc00323b0
c001daeb:	56                   	push   esi
c001daec:	50                   	push   eax
c001daed:	e8 b4 58 ff ff       	call   c00133a6 <File::File(char const*, Process*)>
c001daf2:	83 c4 10             	add    esp,0x10
c001daf5:	85 db                	test   ebx,ebx
c001daf7:	75 3c                	jne    c001db35 <Thr::loadDLL(char const*, bool)+0x84>
c001daf9:	89 f8                	mov    eax,edi
c001dafb:	84 c0                	test   al,al
c001dafd:	0f 84 cc 01 00 00    	je     c001dccf <Thr::loadDLL(char const*, bool)+0x21e>
c001db03:	55                   	push   ebp
c001db04:	55                   	push   ebp
c001db05:	68 09 cb 02 c0       	push   0xc002cb09
c001db0a:	8d 6c 24 2c          	lea    ebp,[esp+0x2c]
c001db0e:	55                   	push   ebp
c001db0f:	e8 14 2d fe ff       	call   c0000828 <strcpy>
c001db14:	58                   	pop    eax
c001db15:	5a                   	pop    edx
c001db16:	56                   	push   esi
c001db17:	55                   	push   ebp
c001db18:	e8 4b 2e fe ff       	call   c0000968 <strcat>
c001db1d:	59                   	pop    ecx
c001db1e:	58                   	pop    eax
c001db1f:	68 1c cb 02 c0       	push   0xc002cb1c
c001db24:	55                   	push   ebp
c001db25:	e8 3e 2e fe ff       	call   c0000968 <strcat>
c001db2a:	89 2c 24             	mov    DWORD PTR [esp],ebp
c001db2d:	e8 cf cc ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001db32:	83 c4 10             	add    esp,0x10
c001db35:	51                   	push   ecx
c001db36:	8d 44 24 1b          	lea    eax,[esp+0x1b]
c001db3a:	50                   	push   eax
c001db3b:	8d 44 24 20          	lea    eax,[esp+0x20]
c001db3f:	50                   	push   eax
c001db40:	53                   	push   ebx
c001db41:	e8 70 5b ff ff       	call   c00136b6 <File::stat(unsigned long long*, bool*)>
c001db46:	83 c4 10             	add    esp,0x10
c001db49:	85 db                	test   ebx,ebx
c001db4b:	74 0c                	je     c001db59 <Thr::loadDLL(char const*, bool)+0xa8>
c001db4d:	83 ec 0c             	sub    esp,0xc
c001db50:	8b 03                	mov    eax,DWORD PTR [ebx]
c001db52:	53                   	push   ebx
c001db53:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001db56:	83 c4 10             	add    esp,0x10
c001db59:	80 7c 24 17 00       	cmp    BYTE PTR [esp+0x17],0x0
c001db5e:	75 0a                	jne    c001db6a <Thr::loadDLL(char const*, bool)+0xb9>
c001db60:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001db64:	0b 44 24 18          	or     eax,DWORD PTR [esp+0x18]
c001db68:	75 3c                	jne    c001dba6 <Thr::loadDLL(char const*, bool)+0xf5>
c001db6a:	89 f8                	mov    eax,edi
c001db6c:	84 c0                	test   al,al
c001db6e:	0f 84 43 01 00 00    	je     c001dcb7 <Thr::loadDLL(char const*, bool)+0x206>
c001db74:	51                   	push   ecx
c001db75:	51                   	push   ecx
c001db76:	68 09 cb 02 c0       	push   0xc002cb09
c001db7b:	8d 5c 24 2c          	lea    ebx,[esp+0x2c]
c001db7f:	53                   	push   ebx
c001db80:	e8 a3 2c fe ff       	call   c0000828 <strcpy>
c001db85:	5d                   	pop    ebp
c001db86:	58                   	pop    eax
c001db87:	56                   	push   esi
c001db88:	53                   	push   ebx
c001db89:	e8 da 2d fe ff       	call   c0000968 <strcat>
c001db8e:	58                   	pop    eax
c001db8f:	5a                   	pop    edx
c001db90:	68 1c cb 02 c0       	push   0xc002cb1c
c001db95:	53                   	push   ebx
c001db96:	e8 cd 2d fe ff       	call   c0000968 <strcat>
c001db9b:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001db9e:	e8 5e cc ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001dba3:	83 c4 10             	add    esp,0x10
c001dba6:	52                   	push   edx
c001dba7:	6a 03                	push   0x3
c001dba9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dbad:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c001dbb1:	05 ff 0f 00 00       	add    eax,0xfff
c001dbb6:	83 d2 00             	adc    edx,0x0
c001dbb9:	0f ac d0 0c          	shrd   eax,edx,0xc
c001dbbd:	50                   	push   eax
c001dbbe:	ff 35 d0 ef 02 c0    	push   DWORD PTR ds:0xc002efd0
c001dbc4:	e8 b1 47 ff ff       	call   c001237a <VAS::allocatePages(int, int)>
c001dbc9:	59                   	pop    ecx
c001dbca:	89 c3                	mov    ebx,eax
c001dbcc:	5d                   	pop    ebp
c001dbcd:	50                   	push   eax
c001dbce:	68 1e cb 02 c0       	push   0xc002cb1e
c001dbd3:	e8 6f 52 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001dbd8:	89 34 24             	mov    DWORD PTR [esp],esi
c001dbdb:	e8 a8 2b fe ff       	call   c0000788 <strlen>
c001dbe0:	8b 2d c0 1b 03 c0    	mov    ebp,DWORD PTR ds:0xc0031bc0
c001dbe6:	40                   	inc    eax
c001dbe7:	89 04 24             	mov    DWORD PTR [esp],eax
c001dbea:	e8 b9 1c ff ff       	call   c000f8a8 <malloc>
c001dbef:	89 04 ad e0 1f 03 c0 	mov    DWORD PTR [ebp*4-0x3ffce020],eax
c001dbf6:	58                   	pop    eax
c001dbf7:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c001dbfc:	5a                   	pop    edx
c001dbfd:	56                   	push   esi
c001dbfe:	ff 34 85 e0 1f 03 c0 	push   DWORD PTR [eax*4-0x3ffce020]
c001dc05:	e8 1e 2c fe ff       	call   c0000828 <strcpy>
c001dc0a:	a1 c0 1b 03 c0       	mov    eax,ds:0xc0031bc0
c001dc0f:	8d 50 01             	lea    edx,[eax+0x1]
c001dc12:	89 1c 85 e0 1d 03 c0 	mov    DWORD PTR [eax*4-0x3ffce220],ebx
c001dc19:	89 15 c0 1b 03 c0    	mov    DWORD PTR ds:0xc0031bc0,edx
c001dc1f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001dc23:	83 c4 0c             	add    esp,0xc
c001dc26:	89 14 85 e0 1b 03 c0 	mov    DWORD PTR [eax*4-0x3ffce420],edx
c001dc2d:	6a 01                	push   0x1
c001dc2f:	53                   	push   ebx
c001dc30:	56                   	push   esi
c001dc31:	e8 c2 f6 ff ff       	call   c001d2f8 <Thr::loadDriverIntoMemory(char const*, unsigned long, bool)>
c001dc36:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c001dc3a:	83 c4 10             	add    esp,0x10
c001dc3d:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dc42:	0f 85 83 00 00 00    	jne    c001dccb <Thr::loadDLL(char const*, bool)+0x21a>
c001dc48:	89 f8                	mov    eax,edi
c001dc4a:	84 c0                	test   al,al
c001dc4c:	74 6d                	je     c001dcbb <Thr::loadDLL(char const*, bool)+0x20a>
c001dc4e:	83 ec 0c             	sub    esp,0xc
c001dc51:	68 2b cb 02 c0       	push   0xc002cb2b
c001dc56:	e8 a6 cb ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001dc5b:	83 c4 10             	add    esp,0x10
c001dc5e:	eb 5b                	jmp    c001dcbb <Thr::loadDLL(char const*, bool)+0x20a>
c001dc60:	89 ee                	mov    esi,ebp
c001dc62:	50                   	push   eax
c001dc63:	c1 e6 0c             	shl    esi,0xc
c001dc66:	50                   	push   eax
c001dc67:	01 de                	add    esi,ebx
c001dc69:	56                   	push   esi
c001dc6a:	ff 35 d0 ef 02 c0    	push   DWORD PTR ds:0xc002efd0
c001dc70:	e8 6d 42 ff ff       	call   c0011ee2 <VAS::getPageTableEntry(unsigned long)>
c001dc75:	83 c4 10             	add    esp,0x10
c001dc78:	f6 00 60             	test   BYTE PTR [eax],0x60
c001dc7b:	75 0c                	jne    c001dc89 <Thr::loadDLL(char const*, bool)+0x1d8>
c001dc7d:	83 ec 0c             	sub    esp,0xc
c001dc80:	56                   	push   esi
c001dc81:	e8 04 22 ff ff       	call   c000fe8a <Phys::freePage(unsigned long)>
c001dc86:	83 c4 10             	add    esp,0x10
c001dc89:	45                   	inc    ebp
c001dc8a:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c001dc8e:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001dc92:	05 ff 0f 00 00       	add    eax,0xfff
c001dc97:	bf 00 00 00 00       	mov    edi,0x0
c001dc9c:	83 d2 00             	adc    edx,0x0
c001dc9f:	0f ac d0 0c          	shrd   eax,edx,0xc
c001dca3:	c1 ea 0c             	shr    edx,0xc
c001dca6:	39 c5                	cmp    ebp,eax
c001dca8:	89 d1                	mov    ecx,edx
c001dcaa:	89 f8                	mov    eax,edi
c001dcac:	19 c8                	sbb    eax,ecx
c001dcae:	72 b0                	jb     c001dc60 <Thr::loadDLL(char const*, bool)+0x1af>
c001dcb0:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001dcb5:	75 18                	jne    c001dccf <Thr::loadDLL(char const*, bool)+0x21e>
c001dcb7:	31 db                	xor    ebx,ebx
c001dcb9:	eb 14                	jmp    c001dccf <Thr::loadDLL(char const*, bool)+0x21e>
c001dcbb:	83 ec 0c             	sub    esp,0xc
c001dcbe:	68 4a cb 02 c0       	push   0xc002cb4a
c001dcc3:	e8 39 cb ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001dcc8:	83 c4 10             	add    esp,0x10
c001dccb:	31 ed                	xor    ebp,ebp
c001dccd:	eb bb                	jmp    c001dc8a <Thr::loadDLL(char const*, bool)+0x1d9>
c001dccf:	81 c4 2c 01 00 00    	add    esp,0x12c
c001dcd5:	89 d8                	mov    eax,ebx
c001dcd7:	5b                   	pop    ebx
c001dcd8:	5e                   	pop    esi
c001dcd9:	5f                   	pop    edi
c001dcda:	5d                   	pop    ebp
c001dcdb:	c3                   	ret    

c001dcdc <Thr::executeDLL(unsigned long, void*)>:
c001dcdc:	56                   	push   esi
c001dcdd:	53                   	push   ebx
c001dcde:	52                   	push   edx
c001dcdf:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001dce3:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001dce7:	85 db                	test   ebx,ebx
c001dce9:	75 10                	jne    c001dcfb <Thr::executeDLL(unsigned long, void*)+0x1f>
c001dceb:	83 ec 0c             	sub    esp,0xc
c001dcee:	68 66 cb 02 c0       	push   0xc002cb66
c001dcf3:	e8 09 cb ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001dcf8:	83 c4 10             	add    esp,0x10
c001dcfb:	50                   	push   eax
c001dcfc:	50                   	push   eax
c001dcfd:	53                   	push   ebx
c001dcfe:	68 90 cb 02 c0       	push   0xc002cb90
c001dd03:	e8 3f 51 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001dd08:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001dd0c:	89 d8                	mov    eax,ebx
c001dd0e:	83 c4 14             	add    esp,0x14
c001dd11:	5b                   	pop    ebx
c001dd12:	5e                   	pop    esi
c001dd13:	ff e0                	jmp    eax
c001dd15:	90                   	nop

c001dd16 <userModeEntryPoint(void*)>:
c001dd16:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001dd1b:	48                   	dec    eax
c001dd1c:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001dd21:	75 01                	jne    c001dd24 <userModeEntryPoint(void*)+0xe>
c001dd23:	fb                   	sti    
c001dd24:	fb                   	sti    
c001dd25:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd2a:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001dd2d:	8b 80 2e 05 00 00    	mov    eax,DWORD PTR [eax+0x52e]
c001dd33:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001dd37:	e9 ee 25 fe ff       	jmp    c000032a <goToUsermode>

c001dd3c <changeTSS>:
c001dd3c:	83 ec 14             	sub    esp,0x14
c001dd3f:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001dd44:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c001dd47:	b8 00 00 e8 01       	mov    eax,0x1e80000
c001dd4c:	c1 e2 15             	shl    edx,0x15
c001dd4f:	29 d0                	sub    eax,edx
c001dd51:	50                   	push   eax
c001dd52:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001dd57:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dd5d:	05 7c 11 00 00       	add    eax,0x117c
c001dd62:	50                   	push   eax
c001dd63:	e8 18 36 ff ff       	call   c0011380 <TSS::setESP(unsigned long)>
c001dd68:	83 c4 1c             	add    esp,0x1c
c001dd6b:	c3                   	ret    

c001dd6c <switchToThread(ThreadControlBlock*)>:
c001dd6c:	57                   	push   edi
c001dd6d:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c001dd72:	56                   	push   esi
c001dd73:	85 c0                	test   eax,eax
c001dd75:	53                   	push   ebx
c001dd76:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001dd7a:	0f 85 88 00 00 00    	jne    c001de08 <switchToThread(ThreadControlBlock*)+0x9c>
c001dd80:	8a 41 44             	mov    al,BYTE PTR [ecx+0x44]
c001dd83:	3c ff                	cmp    al,0xff
c001dd85:	74 7d                	je     c001de04 <switchToThread(ThreadControlBlock*)+0x98>
c001dd87:	0f b6 d0             	movzx  edx,al
c001dd8a:	b8 84 03 00 00       	mov    eax,0x384
c001dd8f:	29 d0                	sub    eax,edx
c001dd91:	c1 e0 10             	shl    eax,0x10
c001dd94:	03 41 38             	add    eax,DWORD PTR [ecx+0x38]
c001dd97:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001dd9a:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c001dd9f:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c001dda5:	f6 80 90 11 00 00 02 	test   BYTE PTR [eax+0x1190],0x2
c001ddac:	74 4a                	je     c001ddf8 <switchToThread(ThreadControlBlock*)+0x8c>
c001ddae:	0f 31                	rdtsc  
c001ddb0:	a3 c8 23 03 c0       	mov    ds:0xc00323c8,eax
c001ddb5:	89 c6                	mov    esi,eax
c001ddb7:	89 d7                	mov    edi,edx
c001ddb9:	2b 35 b8 23 03 c0    	sub    esi,DWORD PTR ds:0xc00323b8
c001ddbf:	89 15 cc 23 03 c0    	mov    DWORD PTR ds:0xc00323cc,edx
c001ddc5:	1b 3d bc 23 03 c0    	sbb    edi,DWORD PTR ds:0xc00323bc
c001ddcb:	89 35 c0 23 03 c0    	mov    DWORD PTR ds:0xc00323c0,esi
c001ddd1:	a3 b8 23 03 c0       	mov    ds:0xc00323b8,eax
c001ddd6:	89 3d c4 23 03 c0    	mov    DWORD PTR ds:0xc00323c4,edi
c001dddc:	8b 1d 00 20 00 c2    	mov    ebx,DWORD PTR ds:0xc2002000
c001dde2:	89 15 bc 23 03 c0    	mov    DWORD PTR ds:0xc00323bc,edx
c001dde8:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c001ddeb:	8b 53 14             	mov    edx,DWORD PTR [ebx+0x14]
c001ddee:	01 c6                	add    esi,eax
c001ddf0:	11 d7                	adc    edi,edx
c001ddf2:	89 73 10             	mov    DWORD PTR [ebx+0x10],esi
c001ddf5:	89 7b 14             	mov    DWORD PTR [ebx+0x14],edi
c001ddf8:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c001ddfc:	5b                   	pop    ebx
c001ddfd:	5e                   	pop    esi
c001ddfe:	5f                   	pop    edi
c001ddff:	e9 5e 25 fe ff       	jmp    c0000362 <switchToThreadASM>
c001de04:	31 c0                	xor    eax,eax
c001de06:	eb 8f                	jmp    c001dd97 <switchToThread(ThreadControlBlock*)+0x2b>
c001de08:	5b                   	pop    ebx
c001de09:	c7 05 80 23 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x1
c001de13:	5e                   	pop    esi
c001de14:	5f                   	pop    edi
c001de15:	c3                   	ret    

c001de16 <Process::addArgs(char**)>:
c001de16:	57                   	push   edi
c001de17:	56                   	push   esi
c001de18:	53                   	push   ebx
c001de19:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001de1d:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001de21:	c7 86 36 05 00 00 00 00 00 00 	mov    DWORD PTR [esi+0x536],0x0
c001de2b:	85 ff                	test   edi,edi
c001de2d:	74 3d                	je     c001de6c <Process::addArgs(char**)+0x56>
c001de2f:	8b 07                	mov    eax,DWORD PTR [edi]
c001de31:	85 c0                	test   eax,eax
c001de33:	74 37                	je     c001de6c <Process::addArgs(char**)+0x56>
c001de35:	31 db                	xor    ebx,ebx
c001de37:	83 ec 0c             	sub    esp,0xc
c001de3a:	50                   	push   eax
c001de3b:	e8 48 29 fe ff       	call   c0000788 <strlen>
c001de40:	40                   	inc    eax
c001de41:	89 04 24             	mov    DWORD PTR [esp],eax
c001de44:	e8 5f 1a ff ff       	call   c000f8a8 <malloc>
c001de49:	89 84 9e 3a 05 00 00 	mov    DWORD PTR [esi+ebx*4+0x53a],eax
c001de50:	5a                   	pop    edx
c001de51:	59                   	pop    ecx
c001de52:	ff 34 9f             	push   DWORD PTR [edi+ebx*4]
c001de55:	43                   	inc    ebx
c001de56:	50                   	push   eax
c001de57:	e8 cc 29 fe ff       	call   c0000828 <strcpy>
c001de5c:	ff 86 36 05 00 00    	inc    DWORD PTR [esi+0x536]
c001de62:	83 c4 10             	add    esp,0x10
c001de65:	8b 04 9f             	mov    eax,DWORD PTR [edi+ebx*4]
c001de68:	85 c0                	test   eax,eax
c001de6a:	75 cb                	jne    c001de37 <Process::addArgs(char**)+0x21>
c001de6c:	5b                   	pop    ebx
c001de6d:	5e                   	pop    esi
c001de6e:	5f                   	pop    edi
c001de6f:	c3                   	ret    

c001de70 <Process::Process(char const*, Process*, char**)>:
c001de70:	56                   	push   esi
c001de71:	53                   	push   ebx
c001de72:	83 ec 14             	sub    esp,0x14
c001de75:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de79:	05 0c 02 00 00       	add    eax,0x20c
c001de7e:	bb 07 00 00 00       	mov    ebx,0x7
c001de83:	89 c6                	mov    esi,eax
c001de85:	85 db                	test   ebx,ebx
c001de87:	78 12                	js     c001de9b <Process::Process(char const*, Process*, char**)+0x2b>
c001de89:	83 ec 0c             	sub    esp,0xc
c001de8c:	56                   	push   esi
c001de8d:	e8 d0 b6 00 00       	call   c0029562 <ThreadControlBlock::ThreadControlBlock()>
c001de92:	83 c4 10             	add    esp,0x10
c001de95:	83 c6 63             	add    esi,0x63
c001de98:	4b                   	dec    ebx
c001de99:	eb ea                	jmp    c001de85 <Process::Process(char const*, Process*, char**)+0x15>
c001de9b:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001de9f:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001dea6:	83 ec 0c             	sub    esp,0xc
c001dea9:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dead:	e8 a8 c7 ff ff       	call   c001a65a <Krnl::newProcessEnv(Process*)>
c001deb2:	83 c4 10             	add    esp,0x10
c001deb5:	89 c2                	mov    edx,eax
c001deb7:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001debb:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001dec1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dec5:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001dece:	a1 d0 e3 02 c0       	mov    eax,ds:0xc002e3d0
c001ded3:	8d 50 01             	lea    edx,[eax+0x1]
c001ded6:	89 15 d0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3d0,edx
c001dedc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001dee0:	89 02                	mov    DWORD PTR [edx],eax
c001dee2:	c7 44 24 08 14 00 00 00 	mov    DWORD PTR [esp+0x8],0x14
c001deea:	83 ec 0c             	sub    esp,0xc
c001deed:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c001def1:	e8 b2 19 ff ff       	call   c000f8a8 <malloc>
c001def6:	83 c4 10             	add    esp,0x10
c001def9:	89 c3                	mov    ebx,eax
c001defb:	83 ec 08             	sub    esp,0x8
c001defe:	6a 00                	push   0x0
c001df00:	53                   	push   ebx
c001df01:	e8 1c 48 ff ff       	call   c0012722 <VAS::VAS(bool)>
c001df06:	83 c4 10             	add    esp,0x10
c001df09:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df0d:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001df13:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df17:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001df21:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df25:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c001df29:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001df2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df33:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df39:	85 c0                	test   eax,eax
c001df3b:	74 42                	je     c001df7f <Process::Process(char const*, Process*, char**)+0x10f>
c001df3d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df41:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df47:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001df4d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df51:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001df57:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df5b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001df61:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001df67:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001df6b:	05 0c 01 00 00       	add    eax,0x10c
c001df70:	83 ec 08             	sub    esp,0x8
c001df73:	52                   	push   edx
c001df74:	50                   	push   eax
c001df75:	e8 ae 28 fe ff       	call   c0000828 <strcpy>
c001df7a:	83 c4 10             	add    esp,0x10
c001df7d:	eb 63                	jmp    c001dfe2 <Process::Process(char const*, Process*, char**)+0x172>
c001df7f:	c7 44 24 04 c4 02 00 00 	mov    DWORD PTR [esp+0x4],0x2c4
c001df87:	83 ec 0c             	sub    esp,0xc
c001df8a:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c001df8e:	e8 15 19 ff ff       	call   c000f8a8 <malloc>
c001df93:	83 c4 10             	add    esp,0x10
c001df96:	89 c3                	mov    ebx,eax
c001df98:	83 ec 08             	sub    esp,0x8
c001df9b:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001df9f:	53                   	push   ebx
c001dfa0:	e8 bd 30 ff ff       	call   c0011062 <VgaText::VgaText(char const*)>
c001dfa5:	83 c4 10             	add    esp,0x10
c001dfa8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfac:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001dfb2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfb6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001dfbc:	83 ec 0c             	sub    esp,0xc
c001dfbf:	50                   	push   eax
c001dfc0:	e8 d4 25 ff ff       	call   c0010599 <addToTerminalCycle(VgaText*)>
c001dfc5:	83 c4 10             	add    esp,0x10
c001dfc8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfcc:	05 0c 01 00 00       	add    eax,0x10c
c001dfd1:	83 ec 08             	sub    esp,0x8
c001dfd4:	68 af cb 02 c0       	push   0xc002cbaf
c001dfd9:	50                   	push   eax
c001dfda:	e8 49 28 fe ff       	call   c0000828 <strcpy>
c001dfdf:	83 c4 10             	add    esp,0x10
c001dfe2:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001dfe6:	83 c0 0c             	add    eax,0xc
c001dfe9:	83 ec 08             	sub    esp,0x8
c001dfec:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001dff0:	50                   	push   eax
c001dff1:	e8 32 28 fe ff       	call   c0000828 <strcpy>
c001dff6:	83 c4 10             	add    esp,0x10
c001dff9:	83 ec 08             	sub    esp,0x8
c001dffc:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c001e000:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e004:	e8 0d fe ff ff       	call   c001de16 <Process::addArgs(char**)>
c001e009:	83 c4 10             	add    esp,0x10
c001e00c:	83 ec 08             	sub    esp,0x8
c001e00f:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e013:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c001e017:	e8 a6 ed ff ff       	call   c001cdc2 <Thr::loadProgramIntoMemory(Process*, char const*)>
c001e01c:	83 c4 10             	add    esp,0x10
c001e01f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c001e023:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c001e027:	83 f0 01             	xor    eax,0x1
c001e02a:	88 c2                	mov    dl,al
c001e02c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001e030:	88 90 3e 07 00 00    	mov    BYTE PTR [eax+0x73e],dl
c001e036:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c001e03b:	83 ec 08             	sub    esp,0x8
c001e03e:	50                   	push   eax
c001e03f:	68 dc cc 02 c0       	push   0xc002ccdc
c001e044:	e8 fe 4d ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001e049:	83 c4 10             	add    esp,0x10
c001e04c:	90                   	nop
c001e04d:	83 c4 14             	add    esp,0x14
c001e050:	5b                   	pop    ebx
c001e051:	5e                   	pop    esi
c001e052:	c3                   	ret    
c001e053:	90                   	nop

c001e054 <Process::Process(bool, char const*, Process*, char**)>:
c001e054:	56                   	push   esi
c001e055:	53                   	push   ebx
c001e056:	83 ec 24             	sub    esp,0x24
c001e059:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c001e05d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c001e061:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e065:	05 0c 02 00 00       	add    eax,0x20c
c001e06a:	bb 07 00 00 00       	mov    ebx,0x7
c001e06f:	89 c6                	mov    esi,eax
c001e071:	85 db                	test   ebx,ebx
c001e073:	78 12                	js     c001e087 <Process::Process(bool, char const*, Process*, char**)+0x33>
c001e075:	83 ec 0c             	sub    esp,0xc
c001e078:	56                   	push   esi
c001e079:	e8 e4 b4 00 00       	call   c0029562 <ThreadControlBlock::ThreadControlBlock()>
c001e07e:	83 c4 10             	add    esp,0x10
c001e081:	83 c6 63             	add    esi,0x63
c001e084:	4b                   	dec    ebx
c001e085:	eb ea                	jmp    c001e071 <Process::Process(bool, char const*, Process*, char**)+0x1d>
c001e087:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e08b:	c6 80 3e 07 00 00 00 	mov    BYTE PTR [eax+0x73e],0x0
c001e092:	83 ec 0c             	sub    esp,0xc
c001e095:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e099:	e8 bc c5 ff ff       	call   c001a65a <Krnl::newProcessEnv(Process*)>
c001e09e:	83 c4 10             	add    esp,0x10
c001e0a1:	89 c2                	mov    edx,eax
c001e0a3:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0a7:	89 90 3a 07 00 00    	mov    DWORD PTR [eax+0x73a],edx
c001e0ad:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0b1:	66 c7 80 24 05 00 00 00 00 	mov    WORD PTR [eax+0x524],0x0
c001e0ba:	a1 d0 e3 02 c0       	mov    eax,ds:0xc002e3d0
c001e0bf:	8d 50 01             	lea    edx,[eax+0x1]
c001e0c2:	89 15 d0 e3 02 c0    	mov    DWORD PTR ds:0xc002e3d0,edx
c001e0c8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c001e0cc:	89 02                	mov    DWORD PTR [edx],eax
c001e0ce:	c7 44 24 1c 14 00 00 00 	mov    DWORD PTR [esp+0x1c],0x14
c001e0d6:	83 ec 0c             	sub    esp,0xc
c001e0d9:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c001e0dd:	e8 c6 17 ff ff       	call   c000f8a8 <malloc>
c001e0e2:	83 c4 10             	add    esp,0x10
c001e0e5:	89 c3                	mov    ebx,eax
c001e0e7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c001e0ec:	83 ec 08             	sub    esp,0x8
c001e0ef:	50                   	push   eax
c001e0f0:	53                   	push   ebx
c001e0f1:	e8 2c 46 ff ff       	call   c0012722 <VAS::VAS(bool)>
c001e0f6:	83 c4 10             	add    esp,0x10
c001e0f9:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e0fd:	89 98 32 05 00 00    	mov    DWORD PTR [eax+0x532],ebx
c001e103:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e107:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001e111:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e115:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c001e119:	89 90 2a 05 00 00    	mov    DWORD PTR [eax+0x52a],edx
c001e11f:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e123:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e129:	85 c0                	test   eax,eax
c001e12b:	74 42                	je     c001e16f <Process::Process(bool, char const*, Process*, char**)+0x11b>
c001e12d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e131:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e137:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001e13d:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e141:	89 90 26 05 00 00    	mov    DWORD PTR [eax+0x526],edx
c001e147:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e14b:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001e151:	8d 90 0c 01 00 00    	lea    edx,[eax+0x10c]
c001e157:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e15b:	05 0c 01 00 00       	add    eax,0x10c
c001e160:	83 ec 08             	sub    esp,0x8
c001e163:	52                   	push   edx
c001e164:	50                   	push   eax
c001e165:	e8 be 26 fe ff       	call   c0000828 <strcpy>
c001e16a:	83 c4 10             	add    esp,0x10
c001e16d:	eb 63                	jmp    c001e1d2 <Process::Process(bool, char const*, Process*, char**)+0x17e>
c001e16f:	c7 44 24 18 c4 02 00 00 	mov    DWORD PTR [esp+0x18],0x2c4
c001e177:	83 ec 0c             	sub    esp,0xc
c001e17a:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c001e17e:	e8 25 17 ff ff       	call   c000f8a8 <malloc>
c001e183:	83 c4 10             	add    esp,0x10
c001e186:	89 c3                	mov    ebx,eax
c001e188:	83 ec 08             	sub    esp,0x8
c001e18b:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e18f:	53                   	push   ebx
c001e190:	e8 cd 2e ff ff       	call   c0011062 <VgaText::VgaText(char const*)>
c001e195:	83 c4 10             	add    esp,0x10
c001e198:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e19c:	89 98 26 05 00 00    	mov    DWORD PTR [eax+0x526],ebx
c001e1a2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1a6:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001e1ac:	83 ec 0c             	sub    esp,0xc
c001e1af:	50                   	push   eax
c001e1b0:	e8 e4 23 ff ff       	call   c0010599 <addToTerminalCycle(VgaText*)>
c001e1b5:	83 c4 10             	add    esp,0x10
c001e1b8:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1bc:	05 0c 01 00 00       	add    eax,0x10c
c001e1c1:	83 ec 08             	sub    esp,0x8
c001e1c4:	68 af cb 02 c0       	push   0xc002cbaf
c001e1c9:	50                   	push   eax
c001e1ca:	e8 59 26 fe ff       	call   c0000828 <strcpy>
c001e1cf:	83 c4 10             	add    esp,0x10
c001e1d2:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c001e1d6:	83 c0 0c             	add    eax,0xc
c001e1d9:	83 ec 08             	sub    esp,0x8
c001e1dc:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c001e1e0:	50                   	push   eax
c001e1e1:	e8 42 26 fe ff       	call   c0000828 <strcpy>
c001e1e6:	83 c4 10             	add    esp,0x10
c001e1e9:	83 ec 08             	sub    esp,0x8
c001e1ec:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001e1f0:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c001e1f4:	e8 1d fc ff ff       	call   c001de16 <Process::addArgs(char**)>
c001e1f9:	83 c4 10             	add    esp,0x10
c001e1fc:	90                   	nop
c001e1fd:	83 c4 24             	add    esp,0x24
c001e200:	5b                   	pop    ebx
c001e201:	5e                   	pop    esi
c001e202:	c3                   	ret    

c001e203 <taskStartupFunction>:
c001e203:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e208:	8b 40 45             	mov    eax,DWORD PTR [eax+0x45]
c001e20b:	c3                   	ret    

c001e20c <Semaphore::Semaphore(int)>:
c001e20c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e210:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001e214:	89 10                	mov    DWORD PTR [eax],edx
c001e216:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e21a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
c001e221:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e225:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c001e22c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e230:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c001e237:	90                   	nop
c001e238:	c3                   	ret    
c001e239:	90                   	nop

c001e23a <Mutex::Mutex()>:
c001e23a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001e23e:	6a 01                	push   0x1
c001e240:	50                   	push   eax
c001e241:	e8 c6 ff ff ff       	call   c001e20c <Semaphore::Semaphore(int)>
c001e246:	83 c4 08             	add    esp,0x8
c001e249:	90                   	nop
c001e24a:	c3                   	ret    
c001e24b:	90                   	nop

c001e24c <Process::createThread(void (*)(void*), void*, int)>:
c001e24c:	55                   	push   ebp
c001e24d:	31 c9                	xor    ecx,ecx
c001e24f:	57                   	push   edi
c001e250:	56                   	push   esi
c001e251:	53                   	push   ebx
c001e252:	83 ec 1c             	sub    esp,0x1c
c001e255:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001e259:	66 8b b3 24 05 00 00 	mov    si,WORD PTR [ebx+0x524]
c001e260:	89 f2                	mov    edx,esi
c001e262:	0f b7 c2             	movzx  eax,dx
c001e265:	83 e2 01             	and    edx,0x1
c001e268:	74 16                	je     c001e280 <Process::createThread(void (*)(void*), void*, int)+0x34>
c001e26a:	d1 f8                	sar    eax,1
c001e26c:	41                   	inc    ecx
c001e26d:	89 c2                	mov    edx,eax
c001e26f:	83 f9 10             	cmp    ecx,0x10
c001e272:	75 ee                	jne    c001e262 <Process::createThread(void (*)(void*), void*, int)+0x16>
c001e274:	83 c4 1c             	add    esp,0x1c
c001e277:	31 db                	xor    ebx,ebx
c001e279:	89 d8                	mov    eax,ebx
c001e27b:	5b                   	pop    ebx
c001e27c:	5e                   	pop    esi
c001e27d:	5f                   	pop    edi
c001e27e:	5d                   	pop    ebp
c001e27f:	c3                   	ret    
c001e280:	b8 01 00 00 00       	mov    eax,0x1
c001e285:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001e288:	d3 e0                	shl    eax,cl
c001e28a:	09 c6                	or     esi,eax
c001e28c:	8d 04 0a             	lea    eax,[edx+ecx*1]
c001e28f:	66 89 b3 24 05 00 00 	mov    WORD PTR [ebx+0x524],si
c001e296:	89 c6                	mov    esi,eax
c001e298:	c1 e6 05             	shl    esi,0x5
c001e29b:	01 f0                	add    eax,esi
c001e29d:	01 d8                	add    eax,ebx
c001e29f:	80 b8 6e 02 00 00 00 	cmp    BYTE PTR [eax+0x26e],0x0
c001e2a6:	75 0a                	jne    c001e2b2 <Process::createThread(void (*)(void*), void*, int)+0x66>
c001e2a8:	c7 80 65 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
c001e2b2:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e2b8:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c001e2bc:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
c001e2bf:	01 ca                	add    edx,ecx
c001e2c1:	83 ec 08             	sub    esp,0x8
c001e2c4:	89 d0                	mov    eax,edx
c001e2c6:	c1 e0 05             	shl    eax,0x5
c001e2c9:	01 d0                	add    eax,edx
c001e2cb:	8a 54 24 44          	mov    dl,BYTE PTR [esp+0x44]
c001e2cf:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c001e2d3:	01 d8                	add    eax,ebx
c001e2d5:	89 b8 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edi
c001e2db:	89 a8 51 02 00 00    	mov    DWORD PTR [eax+0x251],ebp
c001e2e1:	89 88 48 02 00 00    	mov    DWORD PTR [eax+0x248],ecx
c001e2e7:	89 98 4c 02 00 00    	mov    DWORD PTR [eax+0x24c],ebx
c001e2ed:	88 90 50 02 00 00    	mov    BYTE PTR [eax+0x250],dl
c001e2f3:	89 cd                	mov    ebp,ecx
c001e2f5:	8b 4c 24 3c          	mov    ecx,DWORD PTR [esp+0x3c]
c001e2f9:	f7 dd                	neg    ebp
c001e2fb:	c1 e5 15             	shl    ebp,0x15
c001e2fe:	81 c5 e0 ff ff 01    	add    ebp,0x1ffffe0
c001e304:	89 a8 10 02 00 00    	mov    DWORD PTR [eax+0x210],ebp
c001e30a:	c7 80 24 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x224],0x0
c001e314:	89 88 18 02 00 00    	mov    DWORD PTR [eax+0x218],ecx
c001e31a:	c7 80 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x21c],0x0
c001e324:	c7 80 20 02 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x220],0x0
c001e32e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c001e332:	8d 9c 03 0c 02 00 00 	lea    ebx,[ebx+eax*1+0x20c]
c001e339:	53                   	push   ebx
c001e33a:	68 a4 23 03 c0       	push   0xc00323a4
c001e33f:	e8 d8 af 00 00       	call   c002931c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e344:	89 d8                	mov    eax,ebx
c001e346:	83 c4 10             	add    esp,0x10
c001e349:	83 c4 1c             	add    esp,0x1c
c001e34c:	5b                   	pop    ebx
c001e34d:	5e                   	pop    esi
c001e34e:	5f                   	pop    edi
c001e34f:	5d                   	pop    ebp
c001e350:	c3                   	ret    
c001e351:	90                   	nop

c001e352 <Process::createUserThread()>:
c001e352:	83 ec 0c             	sub    esp,0xc
c001e355:	68 80 00 00 00       	push   0x80
c001e35a:	6a 00                	push   0x0
c001e35c:	68 16 dd 01 c0       	push   0xc001dd16
c001e361:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001e365:	e8 e2 fe ff ff       	call   c001e24c <Process::createThread(void (*)(void*), void*, int)>
c001e36a:	83 c4 1c             	add    esp,0x1c
c001e36d:	c3                   	ret    

c001e36e <setupMultitasking(void (*)())>:
c001e36e:	56                   	push   esi
c001e36f:	53                   	push   ebx
c001e370:	51                   	push   ecx
c001e371:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e375:	eb 10                	jmp    c001e387 <setupMultitasking(void (*)())+0x19>
c001e377:	83 ec 0c             	sub    esp,0xc
c001e37a:	68 a4 23 03 c0       	push   0xc00323a4
c001e37f:	e8 ea ae 00 00       	call   c002926e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e384:	83 c4 10             	add    esp,0x10
c001e387:	83 ec 0c             	sub    esp,0xc
c001e38a:	68 a4 23 03 c0       	push   0xc00323a4
c001e38f:	e8 b6 ae 00 00       	call   c002924a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e394:	83 c4 10             	add    esp,0x10
c001e397:	84 c0                	test   al,al
c001e399:	74 dc                	je     c001e377 <setupMultitasking(void (*)())+0x9>
c001e39b:	83 ec 0c             	sub    esp,0xc
c001e39e:	68 3f 07 00 00       	push   0x73f
c001e3a3:	e8 00 15 ff ff       	call   c000f8a8 <malloc>
c001e3a8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c001e3af:	89 c3                	mov    ebx,eax
c001e3b1:	6a 00                	push   0x0
c001e3b3:	68 b3 cb 02 c0       	push   0xc002cbb3
c001e3b8:	6a 01                	push   0x1
c001e3ba:	50                   	push   eax
c001e3bb:	e8 94 fc ff ff       	call   c001e054 <Process::Process(bool, char const*, Process*, char**)>
c001e3c0:	83 c4 18             	add    esp,0x18
c001e3c3:	89 1d b0 23 03 c0    	mov    DWORD PTR ds:0xc00323b0,ebx
c001e3c9:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e3cf:	68 04 cd 02 c0       	push   0xc002cd04
c001e3d4:	e8 6e 4a ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001e3d9:	58                   	pop    eax
c001e3da:	5a                   	pop    edx
c001e3db:	6a 63                	push   0x63
c001e3dd:	68 38 cd 02 c0       	push   0xc002cd38
c001e3e2:	e8 60 4a ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001e3e7:	59                   	pop    ecx
c001e3e8:	ff b3 26 05 00 00    	push   DWORD PTR [ebx+0x526]
c001e3ee:	e8 77 28 ff ff       	call   c0010c6a <setActiveTerminal(VgaText*)>
c001e3f3:	66 83 8b 24 05 00 00 01 	or     WORD PTR [ebx+0x524],0x1
c001e3fb:	c7 83 65 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x265],0x0
c001e405:	8b 83 32 05 00 00    	mov    eax,DWORD PTR [ebx+0x532]
c001e40b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c001e40e:	c7 83 48 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x248],0x0
c001e418:	89 83 0c 02 00 00    	mov    DWORD PTR [ebx+0x20c],eax
c001e41e:	89 9b 4c 02 00 00    	mov    DWORD PTR [ebx+0x24c],ebx
c001e424:	c7 83 10 02 00 00 e0 ff ff 01 	mov    DWORD PTR [ebx+0x210],0x1ffffe0
c001e42e:	c7 83 44 02 00 00 80 f0 fa 02 	mov    DWORD PTR [ebx+0x244],0x2faf080
c001e438:	c7 83 24 02 00 00 01 00 00 00 	mov    DWORD PTR [ebx+0x224],0x1
c001e442:	89 b3 18 02 00 00    	mov    DWORD PTR [ebx+0x218],esi
c001e448:	c7 83 1c 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x21c],0x0
c001e452:	8d b3 0c 02 00 00    	lea    esi,[ebx+0x20c]
c001e458:	c7 83 20 02 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x220],0x0
c001e462:	89 35 00 20 00 c2    	mov    DWORD PTR ds:0xc2002000,esi
c001e468:	58                   	pop    eax
c001e469:	8d 83 0c 01 00 00    	lea    eax,[ebx+0x10c]
c001e46f:	5a                   	pop    edx
c001e470:	68 af cb 02 c0       	push   0xc002cbaf
c001e475:	50                   	push   eax
c001e476:	e8 ad 23 fe ff       	call   c0000828 <strcpy>
c001e47b:	c6 83 50 02 00 00 80 	mov    BYTE PTR [ebx+0x250],0x80
c001e482:	89 74 24 20          	mov    DWORD PTR [esp+0x20],esi
c001e486:	83 c4 14             	add    esp,0x14
c001e489:	5b                   	pop    ebx
c001e48a:	5e                   	pop    esi
c001e48b:	e9 c4 1e fe ff       	jmp    c0000354 <switchToThreadASMFirstTime>

c001e490 <schedule()>:
c001e490:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c001e495:	85 c0                	test   eax,eax
c001e497:	74 0b                	je     c001e4a4 <schedule()+0x14>
c001e499:	c7 05 80 23 03 c0 01 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x1
c001e4a3:	c3                   	ret    
c001e4a4:	53                   	push   ebx
c001e4a5:	83 ec 14             	sub    esp,0x14
c001e4a8:	68 a4 23 03 c0       	push   0xc00323a4
c001e4ad:	e8 98 ad 00 00       	call   c002924a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001e4b2:	83 c4 10             	add    esp,0x10
c001e4b5:	84 c0                	test   al,al
c001e4b7:	75 38                	jne    c001e4f1 <schedule()+0x61>
c001e4b9:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e4be:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c001e4c1:	4a                   	dec    edx
c001e4c2:	74 32                	je     c001e4f6 <schedule()+0x66>
c001e4c4:	83 ec 0c             	sub    esp,0xc
c001e4c7:	68 a4 23 03 c0       	push   0xc00323a4
c001e4cc:	e8 95 ad 00 00       	call   c0029266 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e4d1:	c7 04 24 a4 23 03 c0 	mov    DWORD PTR [esp],0xc00323a4
c001e4d8:	89 c3                	mov    ebx,eax
c001e4da:	e8 8f ad 00 00       	call   c002926e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e4df:	c7 43 18 01 00 00 00 	mov    DWORD PTR [ebx+0x18],0x1
c001e4e6:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001e4e9:	e8 7e f8 ff ff       	call   c001dd6c <switchToThread(ThreadControlBlock*)>
c001e4ee:	83 c4 10             	add    esp,0x10
c001e4f1:	83 c4 08             	add    esp,0x8
c001e4f4:	5b                   	pop    ebx
c001e4f5:	c3                   	ret    
c001e4f6:	83 ec 08             	sub    esp,0x8
c001e4f9:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c001e500:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e506:	68 a4 23 03 c0       	push   0xc00323a4
c001e50b:	e8 0c ae 00 00       	call   c002931c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e510:	83 c4 10             	add    esp,0x10
c001e513:	eb af                	jmp    c001e4c4 <schedule()+0x34>
c001e515:	90                   	nop

c001e516 <Semaphore::tryAcquire()>:
c001e516:	53                   	push   ebx
c001e517:	83 ec 08             	sub    esp,0x8
c001e51a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001e51e:	fa                   	cli    
c001e51f:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e524:	8d 50 01             	lea    edx,[eax+0x1]
c001e527:	89 15 88 23 03 c0    	mov    DWORD PTR ds:0xc0032388,edx
c001e52d:	8b 15 84 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032384
c001e533:	8d 5a 01             	lea    ebx,[edx+0x1]
c001e536:	89 1d 84 23 03 c0    	mov    DWORD PTR ds:0xc0032384,ebx
c001e53c:	8b 59 0c             	mov    ebx,DWORD PTR [ecx+0xc]
c001e53f:	3b 19                	cmp    ebx,DWORD PTR [ecx]
c001e541:	7c 2a                	jl     c001e56d <Semaphore::tryAcquire()+0x57>
c001e543:	89 15 84 23 03 c0    	mov    DWORD PTR ds:0xc0032384,edx
c001e549:	85 d2                	test   edx,edx
c001e54b:	75 0a                	jne    c001e557 <Semaphore::tryAcquire()+0x41>
c001e54d:	8b 15 80 23 03 c0    	mov    edx,DWORD PTR ds:0xc0032380
c001e553:	85 d2                	test   edx,edx
c001e555:	75 5b                	jne    c001e5b2 <Semaphore::tryAcquire()+0x9c>
c001e557:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e55c:	85 c0                	test   eax,eax
c001e55e:	74 07                	je     c001e567 <Semaphore::tryAcquire()+0x51>
c001e560:	31 c0                	xor    eax,eax
c001e562:	83 c4 08             	add    esp,0x8
c001e565:	5b                   	pop    ebx
c001e566:	c3                   	ret    
c001e567:	fb                   	sti    
c001e568:	83 c4 08             	add    esp,0x8
c001e56b:	5b                   	pop    ebx
c001e56c:	c3                   	ret    
c001e56d:	43                   	inc    ebx
c001e56e:	89 15 84 23 03 c0    	mov    DWORD PTR ds:0xc0032384,edx
c001e574:	89 59 0c             	mov    DWORD PTR [ecx+0xc],ebx
c001e577:	85 d2                	test   edx,edx
c001e579:	75 1f                	jne    c001e59a <Semaphore::tryAcquire()+0x84>
c001e57b:	8b 0d 80 23 03 c0    	mov    ecx,DWORD PTR ds:0xc0032380
c001e581:	85 c9                	test   ecx,ecx
c001e583:	74 15                	je     c001e59a <Semaphore::tryAcquire()+0x84>
c001e585:	c7 05 80 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x0
c001e58f:	e8 fc fe ff ff       	call   c001e490 <schedule()>
c001e594:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e599:	48                   	dec    eax
c001e59a:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e59f:	85 c0                	test   eax,eax
c001e5a1:	75 08                	jne    c001e5ab <Semaphore::tryAcquire()+0x95>
c001e5a3:	fb                   	sti    
c001e5a4:	b0 01                	mov    al,0x1
c001e5a6:	83 c4 08             	add    esp,0x8
c001e5a9:	5b                   	pop    ebx
c001e5aa:	c3                   	ret    
c001e5ab:	b0 01                	mov    al,0x1
c001e5ad:	83 c4 08             	add    esp,0x8
c001e5b0:	5b                   	pop    ebx
c001e5b1:	c3                   	ret    
c001e5b2:	c7 05 80 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x0
c001e5bc:	e8 cf fe ff ff       	call   c001e490 <schedule()>
c001e5c1:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e5c6:	48                   	dec    eax
c001e5c7:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e5cc:	85 c0                	test   eax,eax
c001e5ce:	75 90                	jne    c001e560 <Semaphore::tryAcquire()+0x4a>
c001e5d0:	eb 95                	jmp    c001e567 <Semaphore::tryAcquire()+0x51>

c001e5d2 <Semaphore::assertLocked(char const*)>:
c001e5d2:	83 ec 0c             	sub    esp,0xc
c001e5d5:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e5d9:	fa                   	cli    
c001e5da:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001e5e0:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c001e5e5:	8d 48 01             	lea    ecx,[eax+0x1]
c001e5e8:	89 0d 84 23 03 c0    	mov    DWORD PTR ds:0xc0032384,ecx
c001e5ee:	8b 0a                	mov    ecx,DWORD PTR [edx]
c001e5f0:	39 4a 0c             	cmp    DWORD PTR [edx+0xc],ecx
c001e5f3:	7c 24                	jl     c001e619 <Semaphore::assertLocked(char const*)+0x47>
c001e5f5:	a3 84 23 03 c0       	mov    ds:0xc0032384,eax
c001e5fa:	85 c0                	test   eax,eax
c001e5fc:	75 09                	jne    c001e607 <Semaphore::assertLocked(char const*)+0x35>
c001e5fe:	a1 80 23 03 c0       	mov    eax,ds:0xc0032380
c001e603:	85 c0                	test   eax,eax
c001e605:	75 29                	jne    c001e630 <Semaphore::assertLocked(char const*)+0x5e>
c001e607:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e60c:	48                   	dec    eax
c001e60d:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e612:	75 01                	jne    c001e615 <Semaphore::assertLocked(char const*)+0x43>
c001e614:	fb                   	sti    
c001e615:	83 c4 0c             	add    esp,0xc
c001e618:	c3                   	ret    
c001e619:	83 ec 0c             	sub    esp,0xc
c001e61c:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c001e620:	e8 dc c1 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001e625:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c001e62a:	83 c4 10             	add    esp,0x10
c001e62d:	48                   	dec    eax
c001e62e:	eb c5                	jmp    c001e5f5 <Semaphore::assertLocked(char const*)+0x23>
c001e630:	c7 05 80 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x0
c001e63a:	e8 51 fe ff ff       	call   c001e490 <schedule()>
c001e63f:	eb c6                	jmp    c001e607 <Semaphore::assertLocked(char const*)+0x35>

c001e641 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>:
c001e641:	83 ec 14             	sub    esp,0x14
c001e644:	ff 35 88 23 03 c0    	push   DWORD PTR ds:0xc0032388
c001e64a:	68 5c cd 02 c0       	push   0xc002cd5c
c001e64f:	e8 f3 47 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001e654:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e659:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e65d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e660:	e8 2b fe ff ff       	call   c001e490 <schedule()>
c001e665:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e66a:	83 c4 10             	add    esp,0x10
c001e66d:	48                   	dec    eax
c001e66e:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e673:	85 c0                	test   eax,eax
c001e675:	75 06                	jne    c001e67d <blockTaskWithSchedulerLockAlreadyHeld(TaskState)+0x3c>
c001e677:	fb                   	sti    
c001e678:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e67d:	83 ec 08             	sub    esp,0x8
c001e680:	50                   	push   eax
c001e681:	68 90 cd 02 c0       	push   0xc002cd90
c001e686:	e8 bc 47 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001e68b:	83 c4 1c             	add    esp,0x1c
c001e68e:	c3                   	ret    

c001e68f <blockTask(TaskState)>:
c001e68f:	83 ec 0c             	sub    esp,0xc
c001e692:	fa                   	cli    
c001e693:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001e699:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e69d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6a2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c001e6a5:	e8 e6 fd ff ff       	call   c001e490 <schedule()>
c001e6aa:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e6af:	48                   	dec    eax
c001e6b0:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e6b5:	75 01                	jne    c001e6b8 <blockTask(TaskState)+0x29>
c001e6b7:	fb                   	sti    
c001e6b8:	83 c4 0c             	add    esp,0xc
c001e6bb:	c3                   	ret    

c001e6bc <waitTask(int, int*, int)>:
c001e6bc:	83 ec 18             	sub    esp,0x18
c001e6bf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6c4:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c001e6c8:	89 50 49             	mov    DWORD PTR [eax+0x49],edx
c001e6cb:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001e6cf:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6d4:	89 50 4d             	mov    DWORD PTR [eax+0x4d],edx
c001e6d7:	6a 07                	push   0x7
c001e6d9:	e8 b1 ff ff ff       	call   c001e68f <blockTask(TaskState)>
c001e6de:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6e3:	83 c4 10             	add    esp,0x10
c001e6e6:	8b 50 4d             	mov    edx,DWORD PTR [eax+0x4d]
c001e6e9:	85 d2                	test   edx,edx
c001e6eb:	74 0a                	je     c001e6f7 <waitTask(int, int*, int)+0x3b>
c001e6ed:	8b 40 51             	mov    eax,DWORD PTR [eax+0x51]
c001e6f0:	89 02                	mov    DWORD PTR [edx],eax
c001e6f2:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e6f7:	8b 40 49             	mov    eax,DWORD PTR [eax+0x49]
c001e6fa:	83 c4 0c             	add    esp,0xc
c001e6fd:	c3                   	ret    

c001e6fe <nanoSleepUntil(unsigned long long)>:
c001e6fe:	83 ec 0c             	sub    esp,0xc
c001e701:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001e705:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001e709:	3b 05 d0 f4 02 c0    	cmp    eax,DWORD PTR ds:0xc002f4d0
c001e70f:	89 d1                	mov    ecx,edx
c001e711:	1b 0d d4 f4 02 c0    	sbb    ecx,DWORD PTR ds:0xc002f4d4
c001e717:	73 04                	jae    c001e71d <nanoSleepUntil(unsigned long long)+0x1f>
c001e719:	83 c4 0c             	add    esp,0xc
c001e71c:	c3                   	ret    
c001e71d:	fa                   	cli    
c001e71e:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001e724:	83 ec 08             	sub    esp,0x8
c001e727:	ff 05 84 23 03 c0    	inc    DWORD PTR ds:0xc0032384
c001e72d:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e733:	89 41 2c             	mov    DWORD PTR [ecx+0x2c],eax
c001e736:	89 51 30             	mov    DWORD PTR [ecx+0x30],edx
c001e739:	ff 35 00 20 00 c2    	push   DWORD PTR ds:0xc2002000
c001e73f:	68 98 23 03 c0       	push   0xc0032398
c001e744:	e8 d3 ab 00 00       	call   c002931c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e749:	c7 04 24 03 00 00 00 	mov    DWORD PTR [esp],0x3
c001e750:	e8 3a ff ff ff       	call   c001e68f <blockTask(TaskState)>
c001e755:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c001e75a:	83 c4 10             	add    esp,0x10
c001e75d:	48                   	dec    eax
c001e75e:	a3 84 23 03 c0       	mov    ds:0xc0032384,eax
c001e763:	85 c0                	test   eax,eax
c001e765:	75 09                	jne    c001e770 <nanoSleepUntil(unsigned long long)+0x72>
c001e767:	a1 80 23 03 c0       	mov    eax,ds:0xc0032380
c001e76c:	85 c0                	test   eax,eax
c001e76e:	75 12                	jne    c001e782 <nanoSleepUntil(unsigned long long)+0x84>
c001e770:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e775:	48                   	dec    eax
c001e776:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e77b:	75 9c                	jne    c001e719 <nanoSleepUntil(unsigned long long)+0x1b>
c001e77d:	fb                   	sti    
c001e77e:	83 c4 0c             	add    esp,0xc
c001e781:	c3                   	ret    
c001e782:	c7 05 80 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x0
c001e78c:	e8 ff fc ff ff       	call   c001e490 <schedule()>
c001e791:	eb dd                	jmp    c001e770 <nanoSleepUntil(unsigned long long)+0x72>

c001e793 <nanoSleep(unsigned long long)>:
c001e793:	a1 d0 f4 02 c0       	mov    eax,ds:0xc002f4d0
c001e798:	8b 15 d4 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4d4
c001e79e:	01 44 24 04          	add    DWORD PTR [esp+0x4],eax
c001e7a2:	11 54 24 08          	adc    DWORD PTR [esp+0x8],edx
c001e7a6:	e9 53 ff ff ff       	jmp    c001e6fe <nanoSleepUntil(unsigned long long)>

c001e7ab <sleep(unsigned long long)>:
c001e7ab:	69 4c 24 08 00 ca 9a 3b 	imul   ecx,DWORD PTR [esp+0x8],0x3b9aca00
c001e7b3:	b8 00 ca 9a 3b       	mov    eax,0x3b9aca00
c001e7b8:	f7 64 24 04          	mul    DWORD PTR [esp+0x4]
c001e7bc:	01 ca                	add    edx,ecx
c001e7be:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c001e7c2:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c001e7c6:	eb cb                	jmp    c001e793 <nanoSleep(unsigned long long)>

c001e7c8 <Semaphore::acquire()>:
c001e7c8:	83 ec 0c             	sub    esp,0xc
c001e7cb:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001e7cf:	fa                   	cli    
c001e7d0:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c001e7d5:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001e7db:	8d 48 01             	lea    ecx,[eax+0x1]
c001e7de:	89 0d 84 23 03 c0    	mov    DWORD PTR ds:0xc0032384,ecx
c001e7e4:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c001e7e7:	3b 0a                	cmp    ecx,DWORD PTR [edx]
c001e7e9:	7d 28                	jge    c001e813 <Semaphore::acquire()+0x4b>
c001e7eb:	41                   	inc    ecx
c001e7ec:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
c001e7ef:	a3 84 23 03 c0       	mov    ds:0xc0032384,eax
c001e7f4:	85 c0                	test   eax,eax
c001e7f6:	75 09                	jne    c001e801 <Semaphore::acquire()+0x39>
c001e7f8:	a1 80 23 03 c0       	mov    eax,ds:0xc0032380
c001e7fd:	85 c0                	test   eax,eax
c001e7ff:	75 4e                	jne    c001e84f <Semaphore::acquire()+0x87>
c001e801:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e806:	48                   	dec    eax
c001e807:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e80c:	75 01                	jne    c001e80f <Semaphore::acquire()+0x47>
c001e80e:	fb                   	sti    
c001e80f:	83 c4 0c             	add    esp,0xc
c001e812:	c3                   	ret    
c001e813:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e818:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c001e81f:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001e822:	85 c9                	test   ecx,ecx
c001e824:	74 3a                	je     c001e860 <Semaphore::acquire()+0x98>
c001e826:	8b 42 08             	mov    eax,DWORD PTR [edx+0x8]
c001e829:	8b 0d 00 20 00 c2    	mov    ecx,DWORD PTR ds:0xc2002000
c001e82f:	89 48 20             	mov    DWORD PTR [eax+0x20],ecx
c001e832:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e837:	83 ec 0c             	sub    esp,0xc
c001e83a:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
c001e83d:	6a 05                	push   0x5
c001e83f:	e8 4b fe ff ff       	call   c001e68f <blockTask(TaskState)>
c001e844:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c001e849:	83 c4 10             	add    esp,0x10
c001e84c:	48                   	dec    eax
c001e84d:	eb a0                	jmp    c001e7ef <Semaphore::acquire()+0x27>
c001e84f:	c7 05 80 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x0
c001e859:	e8 32 fc ff ff       	call   c001e490 <schedule()>
c001e85e:	eb a1                	jmp    c001e801 <Semaphore::acquire()+0x39>
c001e860:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001e865:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001e868:	eb c8                	jmp    c001e832 <Semaphore::acquire()+0x6a>

c001e86a <taskReturned>:
c001e86a:	83 ec 18             	sub    esp,0x18
c001e86d:	68 c4 cd 02 c0       	push   0xc002cdc4
c001e872:	e8 8a bf ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001e877:	83 c4 10             	add    esp,0x10
c001e87a:	83 ec 0c             	sub    esp,0xc
c001e87d:	6a 02                	push   0x2
c001e87f:	e8 0b fe ff ff       	call   c001e68f <blockTask(TaskState)>
c001e884:	fa                   	cli    
c001e885:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001e88b:	e8 00 fc ff ff       	call   c001e490 <schedule()>
c001e890:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e895:	83 c4 10             	add    esp,0x10
c001e898:	48                   	dec    eax
c001e899:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e89e:	85 c0                	test   eax,eax
c001e8a0:	75 d8                	jne    c001e87a <taskReturned+0x10>
c001e8a2:	fb                   	sti    
c001e8a3:	eb d5                	jmp    c001e87a <taskReturned+0x10>

c001e8a5 <Thr::processFromPID(int)>:
c001e8a5:	57                   	push   edi
c001e8a6:	56                   	push   esi
c001e8a7:	53                   	push   ebx
c001e8a8:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001e8ac:	83 ec 0c             	sub    esp,0xc
c001e8af:	68 ba cb 02 c0       	push   0xc002cbba
c001e8b4:	e8 8e 45 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001e8b9:	fa                   	cli    
c001e8ba:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001e8c0:	c7 04 24 a4 23 03 c0 	mov    DWORD PTR [esp],0xc00323a4
c001e8c7:	e8 9a a9 00 00       	call   c0029266 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8cc:	83 c4 10             	add    esp,0x10
c001e8cf:	89 c7                	mov    edi,eax
c001e8d1:	eb 14                	jmp    c001e8e7 <Thr::processFromPID(int)+0x42>
c001e8d3:	83 ec 0c             	sub    esp,0xc
c001e8d6:	68 a4 23 03 c0       	push   0xc00323a4
c001e8db:	e8 86 a9 00 00       	call   c0029266 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8e0:	83 c4 10             	add    esp,0x10
c001e8e3:	39 f8                	cmp    eax,edi
c001e8e5:	74 49                	je     c001e930 <Thr::processFromPID(int)+0x8b>
c001e8e7:	83 ec 0c             	sub    esp,0xc
c001e8ea:	68 a4 23 03 c0       	push   0xc00323a4
c001e8ef:	e8 72 a9 00 00       	call   c0029266 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e8f4:	c7 04 24 a4 23 03 c0 	mov    DWORD PTR [esp],0xc00323a4
c001e8fb:	89 c3                	mov    ebx,eax
c001e8fd:	e8 6c a9 00 00       	call   c002926e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001e902:	58                   	pop    eax
c001e903:	5a                   	pop    edx
c001e904:	53                   	push   ebx
c001e905:	68 a4 23 03 c0       	push   0xc00323a4
c001e90a:	e8 0d aa 00 00       	call   c002931c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e90f:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e912:	83 c4 10             	add    esp,0x10
c001e915:	39 30                	cmp    DWORD PTR [eax],esi
c001e917:	75 ba                	jne    c001e8d3 <Thr::processFromPID(int)+0x2e>
c001e919:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e91e:	48                   	dec    eax
c001e91f:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e924:	74 07                	je     c001e92d <Thr::processFromPID(int)+0x88>
c001e926:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001e929:	5b                   	pop    ebx
c001e92a:	5e                   	pop    esi
c001e92b:	5f                   	pop    edi
c001e92c:	c3                   	ret    
c001e92d:	fb                   	sti    
c001e92e:	eb f6                	jmp    c001e926 <Thr::processFromPID(int)+0x81>
c001e930:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e935:	48                   	dec    eax
c001e936:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e93b:	75 01                	jne    c001e93e <Thr::processFromPID(int)+0x99>
c001e93d:	fb                   	sti    
c001e93e:	83 ec 0c             	sub    esp,0xc
c001e941:	68 d5 cb 02 c0       	push   0xc002cbd5
c001e946:	e8 fc 44 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001e94b:	83 c4 10             	add    esp,0x10
c001e94e:	31 c0                	xor    eax,eax
c001e950:	5b                   	pop    ebx
c001e951:	5e                   	pop    esi
c001e952:	5f                   	pop    edi
c001e953:	c3                   	ret    

c001e954 <unblockTask(ThreadControlBlock*)>:
c001e954:	53                   	push   ebx
c001e955:	83 ec 08             	sub    esp,0x8
c001e958:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001e95c:	fa                   	cli    
c001e95d:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001e963:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e966:	85 c0                	test   eax,eax
c001e968:	74 66                	je     c001e9d0 <unblockTask(ThreadControlBlock*)+0x7c>
c001e96a:	8b 43 18             	mov    eax,DWORD PTR [ebx+0x18]
c001e96d:	48                   	dec    eax
c001e96e:	74 31                	je     c001e9a1 <unblockTask(ThreadControlBlock*)+0x4d>
c001e970:	83 ec 0c             	sub    esp,0xc
c001e973:	68 a4 23 03 c0       	push   0xc00323a4
c001e978:	e8 e9 a8 00 00       	call   c0029266 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001e97d:	83 c4 10             	add    esp,0x10
c001e980:	85 c0                	test   eax,eax
c001e982:	75 17                	jne    c001e99b <unblockTask(ThreadControlBlock*)+0x47>
c001e984:	eb 68                	jmp    c001e9ee <unblockTask(ThreadControlBlock*)+0x9a>
c001e986:	83 ec 08             	sub    esp,0x8
c001e989:	50                   	push   eax
c001e98a:	68 a4 23 03 c0       	push   0xc00323a4
c001e98f:	e8 70 ac 00 00       	call   c0029604 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>
c001e994:	83 c4 10             	add    esp,0x10
c001e997:	85 c0                	test   eax,eax
c001e999:	74 53                	je     c001e9ee <unblockTask(ThreadControlBlock*)+0x9a>
c001e99b:	39 c3                	cmp    ebx,eax
c001e99d:	75 e7                	jne    c001e986 <unblockTask(ThreadControlBlock*)+0x32>
c001e99f:	eb 1c                	jmp    c001e9bd <unblockTask(ThreadControlBlock*)+0x69>
c001e9a1:	83 ec 0c             	sub    esp,0xc
c001e9a4:	68 b4 ce 02 c0       	push   0xc002ceb4
c001e9a9:	e8 99 44 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001e9ae:	c7 04 24 40 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce40
c001e9b5:	e8 8d 44 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001e9ba:	83 c4 10             	add    esp,0x10
c001e9bd:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001e9c2:	48                   	dec    eax
c001e9c3:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001e9c8:	75 01                	jne    c001e9cb <unblockTask(ThreadControlBlock*)+0x77>
c001e9ca:	fb                   	sti    
c001e9cb:	83 c4 08             	add    esp,0x8
c001e9ce:	5b                   	pop    ebx
c001e9cf:	c3                   	ret    
c001e9d0:	83 ec 0c             	sub    esp,0xc
c001e9d3:	68 f8 cd 02 c0       	push   0xc002cdf8
c001e9d8:	e8 6a 44 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001e9dd:	c7 04 24 40 ce 02 c0 	mov    DWORD PTR [esp],0xc002ce40
c001e9e4:	e8 5e 44 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001e9e9:	83 c4 10             	add    esp,0x10
c001e9ec:	eb cf                	jmp    c001e9bd <unblockTask(ThreadControlBlock*)+0x69>
c001e9ee:	83 ec 08             	sub    esp,0x8
c001e9f1:	53                   	push   ebx
c001e9f2:	68 a4 23 03 c0       	push   0xc00323a4
c001e9f7:	e8 20 a9 00 00       	call   c002931c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001e9fc:	83 c4 10             	add    esp,0x10
c001e9ff:	eb bc                	jmp    c001e9bd <unblockTask(ThreadControlBlock*)+0x69>

c001ea01 <cleanupTerminatedTask(ThreadControlBlock*)>:
c001ea01:	55                   	push   ebp
c001ea02:	57                   	push   edi
c001ea03:	56                   	push   esi
c001ea04:	53                   	push   ebx
c001ea05:	83 ec 1c             	sub    esp,0x1c
c001ea08:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c001ea0c:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ea0f:	8b b8 36 05 00 00    	mov    edi,DWORD PTR [eax+0x536]
c001ea15:	85 ff                	test   edi,edi
c001ea17:	7e 20                	jle    c001ea39 <cleanupTerminatedTask(ThreadControlBlock*)+0x38>
c001ea19:	31 f6                	xor    esi,esi
c001ea1b:	83 ec 0c             	sub    esp,0xc
c001ea1e:	ff b4 b0 3a 05 00 00 	push   DWORD PTR [eax+esi*4+0x53a]
c001ea25:	46                   	inc    esi
c001ea26:	e8 8d 0e ff ff       	call   c000f8b8 <free>
c001ea2b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ea2e:	83 c4 10             	add    esp,0x10
c001ea31:	39 b0 36 05 00 00    	cmp    DWORD PTR [eax+0x536],esi
c001ea37:	7f e2                	jg     c001ea1b <cleanupTerminatedTask(ThreadControlBlock*)+0x1a>
c001ea39:	c7 80 36 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x536],0x0
c001ea43:	b8 fe ff ff ff       	mov    eax,0xfffffffe
c001ea48:	8b 4b 3c             	mov    ecx,DWORD PTR [ebx+0x3c]
c001ea4b:	8b 53 40             	mov    edx,DWORD PTR [ebx+0x40]
c001ea4e:	d3 c0                	rol    eax,cl
c001ea50:	66 21 82 24 05 00 00 	and    WORD PTR [edx+0x524],ax
c001ea57:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ea5a:	89 f7                	mov    edi,esi
c001ea5c:	66 83 be 24 05 00 00 00 	cmp    WORD PTR [esi+0x524],0x0
c001ea64:	0f 85 74 01 00 00    	jne    c001ebde <cleanupTerminatedTask(ThreadControlBlock*)+0x1dd>
c001ea6a:	8b ae 3a 07 00 00    	mov    ebp,DWORD PTR [esi+0x73a]
c001ea70:	85 ed                	test   ebp,ebp
c001ea72:	74 1b                	je     c001ea8f <cleanupTerminatedTask(ThreadControlBlock*)+0x8e>
c001ea74:	83 ec 0c             	sub    esp,0xc
c001ea77:	55                   	push   ebp
c001ea78:	e8 f9 ba ff ff       	call   c001a576 <EnvVarContainer::~EnvVarContainer()>
c001ea7d:	59                   	pop    ecx
c001ea7e:	5e                   	pop    esi
c001ea7f:	6a 0c                	push   0xc
c001ea81:	55                   	push   ebp
c001ea82:	e8 e0 42 ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c001ea87:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ea8a:	83 c4 10             	add    esp,0x10
c001ea8d:	89 f7                	mov    edi,esi
c001ea8f:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001ea95:	85 c0                	test   eax,eax
c001ea97:	0f 84 aa 00 00 00    	je     c001eb47 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001ea9d:	8b 4b 55             	mov    ecx,DWORD PTR [ebx+0x55]
c001eaa0:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c001eaa4:	31 c9                	xor    ecx,ecx
c001eaa6:	eb 10                	jmp    c001eab8 <cleanupTerminatedTask(ThreadControlBlock*)+0xb7>
c001eaa8:	41                   	inc    ecx
c001eaa9:	83 f9 10             	cmp    ecx,0x10
c001eaac:	0f 84 95 00 00 00    	je     c001eb47 <cleanupTerminatedTask(ThreadControlBlock*)+0x146>
c001eab2:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eab8:	0f b7 90 24 05 00 00 	movzx  edx,WORD PTR [eax+0x524]
c001eabf:	d3 fa                	sar    edx,cl
c001eac1:	83 e2 01             	and    edx,0x1
c001eac4:	74 e2                	je     c001eaa8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eac6:	8d 14 09             	lea    edx,[ecx+ecx*1]
c001eac9:	01 ca                	add    edx,ecx
c001eacb:	89 d5                	mov    ebp,edx
c001eacd:	c1 e5 05             	shl    ebp,0x5
c001ead0:	01 ea                	add    edx,ebp
c001ead2:	01 d0                	add    eax,edx
c001ead4:	8b a8 24 02 00 00    	mov    ebp,DWORD PTR [eax+0x224]
c001eada:	83 fd 07             	cmp    ebp,0x7
c001eadd:	75 c9                	jne    c001eaa8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eadf:	05 40 02 00 00       	add    eax,0x240
c001eae4:	8b 68 15             	mov    ebp,DWORD PTR [eax+0x15]
c001eae7:	83 fd ff             	cmp    ebp,0xffffffff
c001eaea:	0f 8c 08 01 00 00    	jl     c001ebf8 <cleanupTerminatedTask(ThreadControlBlock*)+0x1f7>
c001eaf0:	0f 84 b9 01 00 00    	je     c001ecaf <cleanupTerminatedTask(ThreadControlBlock*)+0x2ae>
c001eaf6:	85 ed                	test   ebp,ebp
c001eaf8:	0f 84 a0 01 00 00    	je     c001ec9e <cleanupTerminatedTask(ThreadControlBlock*)+0x29d>
c001eafe:	3b 2e                	cmp    ebp,DWORD PTR [esi]
c001eb00:	75 a6                	jne    c001eaa8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001eb02:	8b 86 2a 05 00 00    	mov    eax,DWORD PTR [esi+0x52a]
c001eb08:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eb0c:	01 d0                	add    eax,edx
c001eb0e:	8b 7c 24 08          	mov    edi,DWORD PTR [esp+0x8]
c001eb12:	83 ec 0c             	sub    esp,0xc
c001eb15:	89 b8 5d 02 00 00    	mov    DWORD PTR [eax+0x25d],edi
c001eb1b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb1e:	8b 80 2a 05 00 00    	mov    eax,DWORD PTR [eax+0x52a]
c001eb24:	8d 84 10 0c 02 00 00 	lea    eax,[eax+edx*1+0x20c]
c001eb2b:	50                   	push   eax
c001eb2c:	e8 23 fe ff ff       	call   c001e954 <unblockTask(ThreadControlBlock*)>
c001eb31:	83 c4 10             	add    esp,0x10
c001eb34:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001eb37:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001eb3b:	89 f7                	mov    edi,esi
c001eb3d:	41                   	inc    ecx
c001eb3e:	83 f9 10             	cmp    ecx,0x10
c001eb41:	0f 85 6b ff ff ff    	jne    c001eab2 <cleanupTerminatedTask(ThreadControlBlock*)+0xb1>
c001eb47:	8b 86 26 05 00 00    	mov    eax,DWORD PTR [esi+0x526]
c001eb4d:	85 c0                	test   eax,eax
c001eb4f:	74 5d                	je     c001ebae <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001eb51:	8b 96 2a 05 00 00    	mov    edx,DWORD PTR [esi+0x52a]
c001eb57:	3b 82 26 05 00 00    	cmp    eax,DWORD PTR [edx+0x526]
c001eb5d:	74 4f                	je     c001ebae <cleanupTerminatedTask(ThreadControlBlock*)+0x1ad>
c001eb5f:	83 ec 0c             	sub    esp,0xc
c001eb62:	68 a4 23 03 c0       	push   0xc00323a4
c001eb67:	e8 fa a6 00 00       	call   c0029266 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001eb6c:	c7 04 24 a4 23 03 c0 	mov    DWORD PTR [esp],0xc00323a4
c001eb73:	89 c7                	mov    edi,eax
c001eb75:	e8 d0 a6 00 00       	call   c002924a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001eb7a:	83 c4 10             	add    esp,0x10
c001eb7d:	84 c0                	test   al,al
c001eb7f:	0f 84 e4 00 00 00    	je     c001ec69 <cleanupTerminatedTask(ThreadControlBlock*)+0x268>
c001eb85:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb88:	8b 90 26 05 00 00    	mov    edx,DWORD PTR [eax+0x526]
c001eb8e:	85 d2                	test   edx,edx
c001eb90:	74 0f                	je     c001eba1 <cleanupTerminatedTask(ThreadControlBlock*)+0x1a0>
c001eb92:	83 ec 0c             	sub    esp,0xc
c001eb95:	8b 02                	mov    eax,DWORD PTR [edx]
c001eb97:	52                   	push   edx
c001eb98:	ff 50 08             	call   DWORD PTR [eax+0x8]
c001eb9b:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001eb9e:	83 c4 10             	add    esp,0x10
c001eba1:	c7 80 26 05 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x526],0x0
c001ebab:	8b 7b 40             	mov    edi,DWORD PTR [ebx+0x40]
c001ebae:	8b 9f 32 05 00 00    	mov    ebx,DWORD PTR [edi+0x532]
c001ebb4:	85 db                	test   ebx,ebx
c001ebb6:	74 16                	je     c001ebce <cleanupTerminatedTask(ThreadControlBlock*)+0x1cd>
c001ebb8:	83 ec 0c             	sub    esp,0xc
c001ebbb:	53                   	push   ebx
c001ebbc:	e8 3b 35 ff ff       	call   c00120fc <VAS::~VAS()>
c001ebc1:	58                   	pop    eax
c001ebc2:	5a                   	pop    edx
c001ebc3:	6a 14                	push   0x14
c001ebc5:	53                   	push   ebx
c001ebc6:	e8 9c 41 ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c001ebcb:	83 c4 10             	add    esp,0x10
c001ebce:	83 ec 0c             	sub    esp,0xc
c001ebd1:	68 ec cb 02 c0       	push   0xc002cbec
c001ebd6:	e8 6c 42 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001ebdb:	83 c4 10             	add    esp,0x10
c001ebde:	83 ec 08             	sub    esp,0x8
c001ebe1:	68 3f 07 00 00       	push   0x73f
c001ebe6:	68 fa cb 02 c0       	push   0xc002cbfa
c001ebeb:	e8 57 42 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001ebf0:	83 c4 2c             	add    esp,0x2c
c001ebf3:	5b                   	pop    ebx
c001ebf4:	5e                   	pop    esi
c001ebf5:	5f                   	pop    edi
c001ebf6:	5d                   	pop    ebp
c001ebf7:	c3                   	ret    
c001ebf8:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ebfc:	83 ec 0c             	sub    esp,0xc
c001ebff:	68 f8 ce 02 c0       	push   0xc002cef8
c001ec04:	e8 f8 bb ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001ec09:	8b 73 40             	mov    esi,DWORD PTR [ebx+0x40]
c001ec0c:	83 c4 10             	add    esp,0x10
c001ec0f:	89 f7                	mov    edi,esi
c001ec11:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ec15:	e9 8e fe ff ff       	jmp    c001eaa8 <cleanupTerminatedTask(ThreadControlBlock*)+0xa7>
c001ec1a:	8b 80 26 05 00 00    	mov    eax,DWORD PTR [eax+0x526]
c001ec20:	39 82 26 05 00 00    	cmp    DWORD PTR [edx+0x526],eax
c001ec26:	75 1c                	jne    c001ec44 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ec28:	83 ec 0c             	sub    esp,0xc
c001ec2b:	68 60 cf 02 c0       	push   0xc002cf60
c001ec30:	e8 12 42 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001ec35:	c7 04 24 04 00 00 00 	mov    DWORD PTR [esp],0x4
c001ec3c:	e8 4e fa ff ff       	call   c001e68f <blockTask(TaskState)>
c001ec41:	83 c4 10             	add    esp,0x10
c001ec44:	83 ec 08             	sub    esp,0x8
c001ec47:	56                   	push   esi
c001ec48:	68 a4 23 03 c0       	push   0xc00323a4
c001ec4d:	e8 ca a6 00 00       	call   c002931c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ec52:	c7 04 24 a4 23 03 c0 	mov    DWORD PTR [esp],0xc00323a4
c001ec59:	e8 08 a6 00 00       	call   c0029266 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ec5e:	83 c4 10             	add    esp,0x10
c001ec61:	39 f8                	cmp    eax,edi
c001ec63:	0f 84 1c ff ff ff    	je     c001eb85 <cleanupTerminatedTask(ThreadControlBlock*)+0x184>
c001ec69:	83 ec 0c             	sub    esp,0xc
c001ec6c:	68 a4 23 03 c0       	push   0xc00323a4
c001ec71:	e8 f0 a5 00 00       	call   c0029266 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ec76:	c7 04 24 a4 23 03 c0 	mov    DWORD PTR [esp],0xc00323a4
c001ec7d:	89 c6                	mov    esi,eax
c001ec7f:	e8 ea a5 00 00       	call   c002926e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ec84:	83 c4 10             	add    esp,0x10
c001ec87:	39 f3                	cmp    ebx,esi
c001ec89:	74 b9                	je     c001ec44 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ec8b:	8b 56 40             	mov    edx,DWORD PTR [esi+0x40]
c001ec8e:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ec91:	39 82 2a 05 00 00    	cmp    DWORD PTR [edx+0x52a],eax
c001ec97:	75 ab                	jne    c001ec44 <cleanupTerminatedTask(ThreadControlBlock*)+0x243>
c001ec99:	e9 7c ff ff ff       	jmp    c001ec1a <cleanupTerminatedTask(ThreadControlBlock*)+0x219>
c001ec9e:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001eca2:	83 ec 0c             	sub    esp,0xc
c001eca5:	68 2c cf 02 c0       	push   0xc002cf2c
c001ecaa:	e9 55 ff ff ff       	jmp    c001ec04 <cleanupTerminatedTask(ThreadControlBlock*)+0x203>
c001ecaf:	8b 36                	mov    esi,DWORD PTR [esi]
c001ecb1:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c001ecb5:	89 70 15             	mov    DWORD PTR [eax+0x15],esi
c001ecb8:	8b 43 40             	mov    eax,DWORD PTR [ebx+0x40]
c001ecbb:	8b b8 2a 05 00 00    	mov    edi,DWORD PTR [eax+0x52a]
c001ecc1:	01 d7                	add    edi,edx
c001ecc3:	89 f8                	mov    eax,edi
c001ecc5:	e9 44 fe ff ff       	jmp    c001eb0e <cleanupTerminatedTask(ThreadControlBlock*)+0x10d>

c001ecca <cleanerTaskFunction(void*)>:
c001ecca:	53                   	push   ebx
c001eccb:	83 ec 08             	sub    esp,0x8
c001ecce:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001ecd3:	48                   	dec    eax
c001ecd4:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001ecd9:	75 01                	jne    c001ecdc <cleanerTaskFunction(void*)+0x12>
c001ecdb:	fb                   	sti    
c001ecdc:	fa                   	cli    
c001ecdd:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001ece2:	80 3d 6c 23 03 c0 00 	cmp    BYTE PTR ds:0xc003236c,0x0
c001ece9:	8d 50 01             	lea    edx,[eax+0x1]
c001ecec:	89 15 88 23 03 c0    	mov    DWORD PTR ds:0xc0032388,edx
c001ecf2:	0f 84 b9 00 00 00    	je     c001edb1 <cleanerTaskFunction(void*)+0xe7>
c001ecf8:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001ecfd:	85 c0                	test   eax,eax
c001ecff:	75 01                	jne    c001ed02 <cleanerTaskFunction(void*)+0x38>
c001ed01:	fb                   	sti    
c001ed02:	c6 05 6c 23 03 c0 00 	mov    BYTE PTR ds:0xc003236c,0x0
c001ed09:	fa                   	cli    
c001ed0a:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001ed10:	ff 05 84 23 03 c0    	inc    DWORD PTR ds:0xc0032384
c001ed16:	fa                   	cli    
c001ed17:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001ed1d:	eb 3e                	jmp    c001ed5d <cleanerTaskFunction(void*)+0x93>
c001ed1f:	83 ec 0c             	sub    esp,0xc
c001ed22:	68 8c 23 03 c0       	push   0xc003238c
c001ed27:	e8 3a a5 00 00       	call   c0029266 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>
c001ed2c:	c7 04 24 8c 23 03 c0 	mov    DWORD PTR [esp],0xc003238c
c001ed33:	89 c3                	mov    ebx,eax
c001ed35:	e8 34 a5 00 00       	call   c002926e <LinkedList<ThreadControlBlock volatile>::removeFirst()>
c001ed3a:	c7 04 24 10 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc10
c001ed41:	e8 01 41 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001ed46:	89 1c 24             	mov    DWORD PTR [esp],ebx
c001ed49:	e8 b3 fc ff ff       	call   c001ea01 <cleanupTerminatedTask(ThreadControlBlock*)>
c001ed4e:	c7 04 24 29 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc29
c001ed55:	e8 ed 40 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001ed5a:	83 c4 10             	add    esp,0x10
c001ed5d:	83 ec 0c             	sub    esp,0xc
c001ed60:	68 8c 23 03 c0       	push   0xc003238c
c001ed65:	e8 e0 a4 00 00       	call   c002924a <LinkedList<ThreadControlBlock volatile>::isEmpty()>
c001ed6a:	83 c4 10             	add    esp,0x10
c001ed6d:	84 c0                	test   al,al
c001ed6f:	74 ae                	je     c001ed1f <cleanerTaskFunction(void*)+0x55>
c001ed71:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001ed76:	48                   	dec    eax
c001ed77:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001ed7c:	75 01                	jne    c001ed7f <cleanerTaskFunction(void*)+0xb5>
c001ed7e:	fb                   	sti    
c001ed7f:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c001ed84:	48                   	dec    eax
c001ed85:	a3 84 23 03 c0       	mov    ds:0xc0032384,eax
c001ed8a:	0f 85 3e ff ff ff    	jne    c001ecce <cleanerTaskFunction(void*)+0x4>
c001ed90:	a1 80 23 03 c0       	mov    eax,ds:0xc0032380
c001ed95:	85 c0                	test   eax,eax
c001ed97:	0f 84 31 ff ff ff    	je     c001ecce <cleanerTaskFunction(void*)+0x4>
c001ed9d:	c7 05 80 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x0
c001eda7:	e8 e4 f6 ff ff       	call   c001e490 <schedule()>
c001edac:	e9 1d ff ff ff       	jmp    c001ecce <cleanerTaskFunction(void*)+0x4>
c001edb1:	83 ec 0c             	sub    esp,0xc
c001edb4:	6a 02                	push   0x2
c001edb6:	e8 86 f8 ff ff       	call   c001e641 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001edbb:	83 c4 10             	add    esp,0x10
c001edbe:	e9 3f ff ff ff       	jmp    c001ed02 <cleanerTaskFunction(void*)+0x38>

c001edc3 <terminateTask(int)>:
c001edc3:	83 ec 14             	sub    esp,0x14
c001edc6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001edcb:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
c001edce:	83 c0 0c             	add    eax,0xc
c001edd1:	50                   	push   eax
c001edd2:	68 88 cf 02 c0       	push   0xc002cf88
c001edd7:	e8 6b 40 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001eddc:	fa                   	cli    
c001eddd:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001ede3:	ff 05 84 23 03 c0    	inc    DWORD PTR ds:0xc0032384
c001ede9:	fa                   	cli    
c001edea:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001edf0:	c7 04 24 3c cc 02 c0 	mov    DWORD PTR [esp],0xc002cc3c
c001edf7:	e8 4b 40 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001edfc:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c001ee00:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee05:	89 50 55             	mov    DWORD PTR [eax+0x55],edx
c001ee08:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee0d:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c001ee10:	5a                   	pop    edx
c001ee11:	59                   	pop    ecx
c001ee12:	50                   	push   eax
c001ee13:	68 8c 23 03 c0       	push   0xc003238c
c001ee18:	e8 ff a4 00 00       	call   c002931c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>
c001ee1d:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001ee22:	c7 40 18 04 00 00 00 	mov    DWORD PTR [eax+0x18],0x4
c001ee29:	c7 04 24 56 cc 02 c0 	mov    DWORD PTR [esp],0xc002cc56
c001ee30:	e8 12 40 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001ee35:	83 c4 10             	add    esp,0x10
c001ee38:	a1 68 23 03 c0       	mov    eax,ds:0xc0032368
c001ee3d:	85 c0                	test   eax,eax
c001ee3f:	0f 84 8d 00 00 00    	je     c001eed2 <terminateTask(int)+0x10f>
c001ee45:	83 ec 0c             	sub    esp,0xc
c001ee48:	68 70 cc 02 c0       	push   0xc002cc70
c001ee4d:	e8 f5 3f ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001ee52:	58                   	pop    eax
c001ee53:	c6 05 6c 23 03 c0 01 	mov    BYTE PTR ds:0xc003236c,0x1
c001ee5a:	ff 35 68 23 03 c0    	push   DWORD PTR ds:0xc0032368
c001ee60:	e8 ef fa ff ff       	call   c001e954 <unblockTask(ThreadControlBlock*)>
c001ee65:	c7 04 24 8a cc 02 c0 	mov    DWORD PTR [esp],0xc002cc8a
c001ee6c:	e8 d6 3f ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001ee71:	83 c4 10             	add    esp,0x10
c001ee74:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001ee79:	48                   	dec    eax
c001ee7a:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001ee7f:	75 01                	jne    c001ee82 <terminateTask(int)+0xbf>
c001ee81:	fb                   	sti    
c001ee82:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c001ee87:	48                   	dec    eax
c001ee88:	a3 84 23 03 c0       	mov    ds:0xc0032384,eax
c001ee8d:	75 09                	jne    c001ee98 <terminateTask(int)+0xd5>
c001ee8f:	83 3d 80 23 03 c0 00 	cmp    DWORD PTR ds:0xc0032380,0x0
c001ee96:	75 4c                	jne    c001eee4 <terminateTask(int)+0x121>
c001ee98:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001ee9d:	48                   	dec    eax
c001ee9e:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001eea3:	75 01                	jne    c001eea6 <terminateTask(int)+0xe3>
c001eea5:	fb                   	sti    
c001eea6:	83 ec 0c             	sub    esp,0xc
c001eea9:	68 c2 cc 02 c0       	push   0xc002ccc2
c001eeae:	e8 94 3f ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001eeb3:	83 c4 10             	add    esp,0x10
c001eeb6:	fa                   	cli    
c001eeb7:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001eebd:	e8 ce f5 ff ff       	call   c001e490 <schedule()>
c001eec2:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001eec7:	48                   	dec    eax
c001eec8:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001eecd:	75 e7                	jne    c001eeb6 <terminateTask(int)+0xf3>
c001eecf:	fb                   	sti    
c001eed0:	eb e4                	jmp    c001eeb6 <terminateTask(int)+0xf3>
c001eed2:	83 ec 0c             	sub    esp,0xc
c001eed5:	68 a4 cc 02 c0       	push   0xc002cca4
c001eeda:	e8 68 3f ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001eedf:	83 c4 10             	add    esp,0x10
c001eee2:	eb 90                	jmp    c001ee74 <terminateTask(int)+0xb1>
c001eee4:	c7 05 80 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x0
c001eeee:	e8 9d f5 ff ff       	call   c001e490 <schedule()>
c001eef3:	eb a3                	jmp    c001ee98 <terminateTask(int)+0xd5>

c001eef5 <Thr::terminateFromIRQ(int)>:
c001eef5:	83 ec 18             	sub    esp,0x18
c001eef8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001eefc:	e8 c2 fe ff ff       	call   c001edc3 <terminateTask(int)>
c001ef01:	90                   	nop

c001ef02 <Semaphore::release()>:
c001ef02:	83 ec 0c             	sub    esp,0xc
c001ef05:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ef09:	fa                   	cli    
c001ef0a:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c001ef0f:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001ef15:	8d 48 01             	lea    ecx,[eax+0x1]
c001ef18:	89 0d 84 23 03 c0    	mov    DWORD PTR ds:0xc0032384,ecx
c001ef1e:	8b 4a 04             	mov    ecx,DWORD PTR [edx+0x4]
c001ef21:	85 c9                	test   ecx,ecx
c001ef23:	74 3c                	je     c001ef61 <Semaphore::release()+0x5f>
c001ef25:	8b 41 20             	mov    eax,DWORD PTR [ecx+0x20]
c001ef28:	83 ec 0c             	sub    esp,0xc
c001ef2b:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
c001ef2e:	51                   	push   ecx
c001ef2f:	e8 20 fa ff ff       	call   c001e954 <unblockTask(ThreadControlBlock*)>
c001ef34:	a1 84 23 03 c0       	mov    eax,ds:0xc0032384
c001ef39:	83 c4 10             	add    esp,0x10
c001ef3c:	48                   	dec    eax
c001ef3d:	a3 84 23 03 c0       	mov    ds:0xc0032384,eax
c001ef42:	85 c0                	test   eax,eax
c001ef44:	75 09                	jne    c001ef4f <Semaphore::release()+0x4d>
c001ef46:	a1 80 23 03 c0       	mov    eax,ds:0xc0032380
c001ef4b:	85 c0                	test   eax,eax
c001ef4d:	75 17                	jne    c001ef66 <Semaphore::release()+0x64>
c001ef4f:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001ef54:	48                   	dec    eax
c001ef55:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001ef5a:	75 01                	jne    c001ef5d <Semaphore::release()+0x5b>
c001ef5c:	fb                   	sti    
c001ef5d:	83 c4 0c             	add    esp,0xc
c001ef60:	c3                   	ret    
c001ef61:	ff 4a 0c             	dec    DWORD PTR [edx+0xc]
c001ef64:	eb d7                	jmp    c001ef3d <Semaphore::release()+0x3b>
c001ef66:	c7 05 80 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032380,0x0
c001ef70:	e8 1b f5 ff ff       	call   c001e490 <schedule()>
c001ef75:	eb d8                	jmp    c001ef4f <Semaphore::release()+0x4d>

c001ef77 <__static_initialization_and_destruction_0(int, int)>:
c001ef77:	83 ec 0c             	sub    esp,0xc
c001ef7a:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c001ef7f:	0f 85 88 00 00 00    	jne    c001f00d <__static_initialization_and_destruction_0(int, int)+0x96>
c001ef85:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c001ef8d:	75 7e                	jne    c001f00d <__static_initialization_and_destruction_0(int, int)+0x96>
c001ef8f:	83 ec 0c             	sub    esp,0xc
c001ef92:	68 a4 23 03 c0       	push   0xc00323a4
c001ef97:	e8 10 a6 00 00       	call   c00295ac <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001ef9c:	83 c4 10             	add    esp,0x10
c001ef9f:	83 ec 04             	sub    esp,0x4
c001efa2:	68 70 dd 02 c0       	push   0xc002dd70
c001efa7:	68 a4 23 03 c0       	push   0xc00323a4
c001efac:	68 60 95 02 c0       	push   0xc0029560
c001efb1:	e8 2b 3d ff ff       	call   c0012ce1 <__cxa_atexit>
c001efb6:	83 c4 10             	add    esp,0x10
c001efb9:	83 ec 0c             	sub    esp,0xc
c001efbc:	68 98 23 03 c0       	push   0xc0032398
c001efc1:	e8 e6 a5 00 00       	call   c00295ac <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001efc6:	83 c4 10             	add    esp,0x10
c001efc9:	83 ec 04             	sub    esp,0x4
c001efcc:	68 70 dd 02 c0       	push   0xc002dd70
c001efd1:	68 98 23 03 c0       	push   0xc0032398
c001efd6:	68 60 95 02 c0       	push   0xc0029560
c001efdb:	e8 01 3d ff ff       	call   c0012ce1 <__cxa_atexit>
c001efe0:	83 c4 10             	add    esp,0x10
c001efe3:	83 ec 0c             	sub    esp,0xc
c001efe6:	68 8c 23 03 c0       	push   0xc003238c
c001efeb:	e8 bc a5 00 00       	call   c00295ac <LinkedList<ThreadControlBlock volatile>::LinkedList()>
c001eff0:	83 c4 10             	add    esp,0x10
c001eff3:	83 ec 04             	sub    esp,0x4
c001eff6:	68 70 dd 02 c0       	push   0xc002dd70
c001effb:	68 8c 23 03 c0       	push   0xc003238c
c001f000:	68 60 95 02 c0       	push   0xc0029560
c001f005:	e8 d7 3c ff ff       	call   c0012ce1 <__cxa_atexit>
c001f00a:	83 c4 10             	add    esp,0x10
c001f00d:	90                   	nop
c001f00e:	83 c4 0c             	add    esp,0xc
c001f011:	c3                   	ret    

c001f012 <_GLOBAL__sub_I__ZN3Thr7nextPIDE>:
c001f012:	83 ec 0c             	sub    esp,0xc
c001f015:	83 ec 08             	sub    esp,0x8
c001f018:	68 ff ff 00 00       	push   0xffff
c001f01d:	6a 01                	push   0x1
c001f01f:	e8 53 ff ff ff       	call   c001ef77 <__static_initialization_and_destruction_0(int, int)>
c001f024:	83 c4 10             	add    esp,0x10
c001f027:	83 c4 0c             	add    esp,0xc
c001f02a:	c3                   	ret    

c001f02b <Vm::inbv(unsigned short)>:
c001f02b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c001f02f:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f034:	75 06                	jne    c001f03c <Vm::inbv(unsigned short)+0x11>
c001f036:	a0 ec 23 03 c0       	mov    al,ds:0xc00323ec
c001f03b:	c3                   	ret    
c001f03c:	ec                   	in     al,dx
c001f03d:	c3                   	ret    

c001f03e <Vm::outbv(unsigned short, unsigned char)>:
c001f03e:	53                   	push   ebx
c001f03f:	83 ec 08             	sub    esp,0x8
c001f042:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001f046:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f04a:	66 81 fa fe fe       	cmp    dx,0xfefe
c001f04f:	75 38                	jne    c001f089 <Vm::outbv(unsigned short, unsigned char)+0x4b>
c001f051:	0f b6 c3             	movzx  eax,bl
c001f054:	51                   	push   ecx
c001f055:	51                   	push   ecx
c001f056:	50                   	push   eax
c001f057:	68 a7 cf 02 c0       	push   0xc002cfa7
c001f05c:	e8 e6 3d ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001f061:	8b 15 ec 23 03 c0    	mov    edx,DWORD PTR ds:0xc00323ec
c001f067:	83 c4 10             	add    esp,0x10
c001f06a:	8d 42 01             	lea    eax,[edx+0x1]
c001f06d:	88 9a 00 24 03 c0    	mov    BYTE PTR [edx-0x3ffcdc00],bl
c001f073:	a3 ec 23 03 c0       	mov    ds:0xc00323ec,eax
c001f078:	83 f8 20             	cmp    eax,0x20
c001f07b:	75 0f                	jne    c001f08c <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f07d:	c7 05 ec 23 03 c0 1f 00 00 00 	mov    DWORD PTR ds:0xc00323ec,0x1f
c001f087:	eb 03                	jmp    c001f08c <Vm::outbv(unsigned short, unsigned char)+0x4e>
c001f089:	88 d8                	mov    al,bl
c001f08b:	ee                   	out    dx,al
c001f08c:	83 c4 08             	add    esp,0x8
c001f08f:	5b                   	pop    ebx
c001f090:	c3                   	ret    

c001f091 <Vm::realToLinear(unsigned short, unsigned short)>:
c001f091:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f096:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f09b:	c1 e0 04             	shl    eax,0x4
c001f09e:	01 d0                	add    eax,edx
c001f0a0:	c3                   	ret    

c001f0a1 <Vm::getSegment(unsigned int)>:
c001f0a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0a5:	c1 e8 10             	shr    eax,0x10
c001f0a8:	c3                   	ret    

c001f0a9 <Vm::getOffset(unsigned int)>:
c001f0a9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001f0ad:	c3                   	ret    

c001f0ae <Vm::mainloop2()>:
c001f0ae:	83 ec 18             	sub    esp,0x18
c001f0b1:	fa                   	cli    
c001f0b2:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001f0b8:	6a 02                	push   0x2
c001f0ba:	c6 05 e5 23 03 c0 01 	mov    BYTE PTR ds:0xc00323e5,0x1
c001f0c1:	e8 7b f5 ff ff       	call   c001e641 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f0c6:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f0cb:	0f b7 50 5f          	movzx  edx,WORD PTR [eax+0x5f]
c001f0cf:	52                   	push   edx
c001f0d0:	0f b7 50 5d          	movzx  edx,WORD PTR [eax+0x5d]
c001f0d4:	52                   	push   edx
c001f0d5:	0f b7 50 5b          	movzx  edx,WORD PTR [eax+0x5b]
c001f0d9:	52                   	push   edx
c001f0da:	0f b7 40 59          	movzx  eax,WORD PTR [eax+0x59]
c001f0de:	50                   	push   eax
c001f0df:	e8 16 12 fe ff       	call   c00002fa <goToVM86>
c001f0e4:	83 c4 2c             	add    esp,0x2c
c001f0e7:	c3                   	ret    

c001f0e8 <Vm::mainVm8086Loop(void*)>:
c001f0e8:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001f0ed:	48                   	dec    eax
c001f0ee:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001f0f3:	75 01                	jne    c001f0f6 <Vm::mainVm8086Loop(void*)+0xe>
c001f0f5:	fb                   	sti    
c001f0f6:	eb b6                	jmp    c001f0ae <Vm::mainloop2()>

c001f0f8 <Vm::mainloop3(unsigned long)>:
c001f0f8:	83 ec 18             	sub    esp,0x18
c001f0fb:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c001f0ff:	fa                   	cli    
c001f100:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001f106:	6a 02                	push   0x2
c001f108:	c6 05 e4 23 03 c0 01 	mov    BYTE PTR ds:0xc00323e4,0x1
c001f10f:	a3 e0 23 03 c0       	mov    ds:0xc00323e0,eax
c001f114:	e8 28 f5 ff ff       	call   c001e641 <blockTaskWithSchedulerLockAlreadyHeld(TaskState)>
c001f119:	83 c4 1c             	add    esp,0x1c
c001f11c:	eb 90                	jmp    c001f0ae <Vm::mainloop2()>

c001f11e <Vm::initialise8086()>:
c001f11e:	83 ec 0c             	sub    esp,0xc
c001f121:	68 80 00 00 00       	push   0x80
c001f126:	6a 00                	push   0x0
c001f128:	68 e8 f0 01 c0       	push   0xc001f0e8
c001f12d:	ff 35 b0 23 03 c0    	push   DWORD PTR ds:0xc00323b0
c001f133:	e8 14 f1 ff ff       	call   c001e24c <Process::createThread(void (*)(void*), void*, int)>
c001f138:	c7 04 24 07 00 00 00 	mov    DWORD PTR [esp],0x7
c001f13f:	a3 e8 23 03 c0       	mov    ds:0xc00323e8,eax
c001f144:	68 00 01 00 00       	push   0x100
c001f149:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c001f14e:	6a 00                	push   0x0
c001f150:	6a 00                	push   0x0
c001f152:	ff b0 32 05 00 00    	push   DWORD PTR [eax+0x532]
c001f158:	e8 11 34 ff ff       	call   c001256e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c001f15d:	83 c4 2c             	add    esp,0x2c
c001f160:	c3                   	ret    

c001f161 <Vm::finish8086()>:
c001f161:	53                   	push   ebx
c001f162:	83 ec 08             	sub    esp,0x8
c001f165:	fa                   	cli    
c001f166:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001f16c:	80 3d e4 23 03 c0 00 	cmp    BYTE PTR ds:0xc00323e4,0x0
c001f173:	75 15                	jne    c001f18a <Vm::finish8086()+0x29>
c001f175:	e8 16 f3 ff ff       	call   c001e490 <schedule()>
c001f17a:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001f17f:	48                   	dec    eax
c001f180:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001f185:	75 de                	jne    c001f165 <Vm::finish8086()+0x4>
c001f187:	fb                   	sti    
c001f188:	eb db                	jmp    c001f165 <Vm::finish8086()+0x4>
c001f18a:	83 ec 0c             	sub    esp,0xc
c001f18d:	8b 1d e0 23 03 c0    	mov    ebx,DWORD PTR ds:0xc00323e0
c001f193:	ff 35 e8 23 03 c0    	push   DWORD PTR ds:0xc00323e8
c001f199:	c6 05 e4 23 03 c0 00 	mov    BYTE PTR ds:0xc00323e4,0x0
c001f1a0:	e8 af f7 ff ff       	call   c001e954 <unblockTask(ThreadControlBlock*)>
c001f1a5:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001f1aa:	83 c4 10             	add    esp,0x10
c001f1ad:	8d 50 ff             	lea    edx,[eax-0x1]
c001f1b0:	89 15 88 23 03 c0    	mov    DWORD PTR ds:0xc0032388,edx
c001f1b6:	85 d2                	test   edx,edx
c001f1b8:	75 01                	jne    c001f1bb <Vm::finish8086()+0x5a>
c001f1ba:	fb                   	sti    
c001f1bb:	89 d8                	mov    eax,ebx
c001f1bd:	83 c4 08             	add    esp,0x8
c001f1c0:	5b                   	pop    ebx
c001f1c1:	c3                   	ret    

c001f1c2 <Vm::getOutput8086(unsigned char*)>:
c001f1c2:	57                   	push   edi
c001f1c3:	8b 0d ec 23 03 c0    	mov    ecx,DWORD PTR ds:0xc00323ec
c001f1c9:	56                   	push   esi
c001f1ca:	be 00 24 03 c0       	mov    esi,0xc0032400
c001f1cf:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c001f1d3:	fc                   	cld    
c001f1d4:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c001f1d6:	a1 ec 23 03 c0       	mov    eax,ds:0xc00323ec
c001f1db:	5e                   	pop    esi
c001f1dc:	c7 05 ec 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323ec,0x0
c001f1e6:	5f                   	pop    edi
c001f1e7:	c3                   	ret    

c001f1e8 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)>:
c001f1e8:	55                   	push   ebp
c001f1e9:	57                   	push   edi
c001f1ea:	56                   	push   esi
c001f1eb:	53                   	push   ebx
c001f1ec:	83 ec 2c             	sub    esp,0x2c
c001f1ef:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c001f1f3:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c001f1f7:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c001f1fb:	8b 5c 24 50          	mov    ebx,DWORD PTR [esp+0x50]
c001f1ff:	fa                   	cli    
c001f200:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c001f206:	0f b6 35 e5 23 03 c0 	movzx  esi,BYTE PTR ds:0xc00323e5
c001f20d:	89 f0                	mov    eax,esi
c001f20f:	84 c0                	test   al,al
c001f211:	75 1d                	jne    c001f230 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x48>
c001f213:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c001f217:	e8 74 f2 ff ff       	call   c001e490 <schedule()>
c001f21c:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001f221:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001f225:	48                   	dec    eax
c001f226:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001f22b:	75 d2                	jne    c001f1ff <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f22d:	fb                   	sti    
c001f22e:	eb cf                	jmp    c001f1ff <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x17>
c001f230:	a1 e8 23 03 c0       	mov    eax,ds:0xc00323e8
c001f235:	c7 05 ec 23 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc00323ec,0x0
c001f23f:	66 89 50 5d          	mov    WORD PTR [eax+0x5d],dx
c001f243:	66 89 58 5f          	mov    WORD PTR [eax+0x5f],bx
c001f247:	66 89 68 59          	mov    WORD PTR [eax+0x59],bp
c001f24b:	66 89 78 5b          	mov    WORD PTR [eax+0x5b],di
c001f24f:	c6 40 62 01          	mov    BYTE PTR [eax+0x62],0x1
c001f253:	50                   	push   eax
c001f254:	6a 20                	push   0x20
c001f256:	6a 00                	push   0x0
c001f258:	68 00 24 03 c0       	push   0xc0032400
c001f25d:	e8 0a 15 fe ff       	call   c000076c <memset>
c001f262:	c7 04 24 14 01 00 00 	mov    DWORD PTR [esp],0x114
c001f269:	e8 3a 06 ff ff       	call   c000f8a8 <malloc>
c001f26e:	83 c4 0c             	add    esp,0xc
c001f271:	89 c3                	mov    ebx,eax
c001f273:	ff 35 b0 23 03 c0    	push   DWORD PTR ds:0xc00323b0
c001f279:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c001f27d:	50                   	push   eax
c001f27e:	e8 23 41 ff ff       	call   c00133a6 <File::File(char const*, Process*)>
c001f283:	83 c4 10             	add    esp,0x10
c001f286:	85 db                	test   ebx,ebx
c001f288:	75 0a                	jne    c001f294 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xac>
c001f28a:	83 ec 0c             	sub    esp,0xc
c001f28d:	68 c3 cf 02 c0       	push   0xc002cfc3
c001f292:	eb 3e                	jmp    c001f2d2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f294:	50                   	push   eax
c001f295:	8d 44 24 17          	lea    eax,[esp+0x17]
c001f299:	50                   	push   eax
c001f29a:	8d 44 24 20          	lea    eax,[esp+0x20]
c001f29e:	50                   	push   eax
c001f29f:	53                   	push   ebx
c001f2a0:	e8 11 44 ff ff       	call   c00136b6 <File::stat(unsigned long long*, bool*)>
c001f2a5:	83 c4 10             	add    esp,0x10
c001f2a8:	80 7c 24 13 00       	cmp    BYTE PTR [esp+0x13],0x0
c001f2ad:	74 0a                	je     c001f2b9 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xd1>
c001f2af:	83 ec 0c             	sub    esp,0xc
c001f2b2:	68 d7 cf 02 c0       	push   0xc002cfd7
c001f2b7:	eb 19                	jmp    c001f2d2 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0xea>
c001f2b9:	51                   	push   ecx
c001f2ba:	51                   	push   ecx
c001f2bb:	6a 01                	push   0x1
c001f2bd:	53                   	push   ebx
c001f2be:	e8 47 41 ff ff       	call   c001340a <File::open(FileOpenMode)>
c001f2c3:	83 c4 10             	add    esp,0x10
c001f2c6:	85 c0                	test   eax,eax
c001f2c8:	74 24                	je     c001f2ee <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x106>
c001f2ca:	83 ec 0c             	sub    esp,0xc
c001f2cd:	68 f0 cf 02 c0       	push   0xc002cff0
c001f2d2:	e8 2a b5 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001f2d7:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001f2dc:	83 c4 10             	add    esp,0x10
c001f2df:	48                   	dec    eax
c001f2e0:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001f2e5:	85 c0                	test   eax,eax
c001f2e7:	75 01                	jne    c001f2ea <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x102>
c001f2e9:	fb                   	sti    
c001f2ea:	31 f6                	xor    esi,esi
c001f2ec:	eb 58                	jmp    c001f346 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x15e>
c001f2ee:	0f b7 ed             	movzx  ebp,bp
c001f2f1:	50                   	push   eax
c001f2f2:	0f b7 ff             	movzx  edi,di
c001f2f5:	50                   	push   eax
c001f2f6:	55                   	push   ebp
c001f2f7:	57                   	push   edi
c001f2f8:	e8 94 fd ff ff       	call   c001f091 <Vm::realToLinear(unsigned short, unsigned short)>
c001f2fd:	5a                   	pop    edx
c001f2fe:	8b 13                	mov    edx,DWORD PTR [ebx]
c001f300:	8d 4c 24 20          	lea    ecx,[esp+0x20]
c001f304:	51                   	push   ecx
c001f305:	50                   	push   eax
c001f306:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f30a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c001f30e:	53                   	push   ebx
c001f30f:	ff 52 0c             	call   DWORD PTR [edx+0xc]
c001f312:	83 c4 14             	add    esp,0x14
c001f315:	53                   	push   ebx
c001f316:	e8 4d 41 ff ff       	call   c0013468 <File::close()>
c001f31b:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c001f320:	83 c4 10             	add    esp,0x10
c001f323:	48                   	dec    eax
c001f324:	c6 05 e5 23 03 c0 00 	mov    BYTE PTR ds:0xc00323e5,0x0
c001f32b:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c001f330:	85 c0                	test   eax,eax
c001f332:	75 01                	jne    c001f335 <Vm::start8086(char const*, unsigned short, unsigned short, unsigned short, unsigned short)+0x14d>
c001f334:	fb                   	sti    
c001f335:	83 ec 0c             	sub    esp,0xc
c001f338:	ff 35 e8 23 03 c0    	push   DWORD PTR ds:0xc00323e8
c001f33e:	e8 11 f6 ff ff       	call   c001e954 <unblockTask(ThreadControlBlock*)>
c001f343:	83 c4 10             	add    esp,0x10
c001f346:	83 c4 2c             	add    esp,0x2c
c001f349:	89 f0                	mov    eax,esi
c001f34b:	5b                   	pop    ebx
c001f34c:	5e                   	pop    esi
c001f34d:	5f                   	pop    edi
c001f34e:	5d                   	pop    ebp
c001f34f:	c3                   	ret    

c001f350 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>:
c001f350:	57                   	push   edi
c001f351:	56                   	push   esi
c001f352:	53                   	push   ebx
c001f353:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001f357:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c001f35b:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001f35f:	83 e8 06             	sub    eax,0x6
c001f362:	0f b7 c0             	movzx  eax,ax
c001f365:	50                   	push   eax
c001f366:	0f b7 44 24 20       	movzx  eax,WORD PTR [esp+0x20]
c001f36b:	50                   	push   eax
c001f36c:	e8 20 fd ff ff       	call   c001f091 <Vm::realToLinear(unsigned short, unsigned short)>
c001f371:	5a                   	pop    edx
c001f372:	5e                   	pop    esi
c001f373:	8b 71 44             	mov    esi,DWORD PTR [ecx+0x44]
c001f376:	8d 56 fa             	lea    edx,[esi-0x6]
c001f379:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f37f:	89 51 44             	mov    DWORD PTR [ecx+0x44],edx
c001f382:	8b 51 38             	mov    edx,DWORD PTR [ecx+0x38]
c001f385:	83 c2 02             	add    edx,0x2
c001f388:	66 89 10             	mov    WORD PTR [eax],dx
c001f38b:	8b 51 3c             	mov    edx,DWORD PTR [ecx+0x3c]
c001f38e:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
c001f392:	8b 51 40             	mov    edx,DWORD PTR [ecx+0x40]
c001f395:	66 89 50 04          	mov    WORD PTR [eax+0x4],dx
c001f399:	89 d6                	mov    esi,edx
c001f39b:	8b 3d 00 20 00 c2    	mov    edi,DWORD PTR ds:0xc2002000
c001f3a1:	66 81 e6 ff fd       	and    si,0xfdff
c001f3a6:	80 7f 61 00          	cmp    BYTE PTR [edi+0x61],0x0
c001f3aa:	74 07                	je     c001f3b3 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)+0x63>
c001f3ac:	89 d6                	mov    esi,edx
c001f3ae:	66 81 ce 00 02       	or     si,0x200
c001f3b3:	66 89 70 04          	mov    WORD PTR [eax+0x4],si
c001f3b7:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f3bc:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f3c0:	0f b7 04 9d 02 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x2]
c001f3c8:	89 41 3c             	mov    DWORD PTR [ecx+0x3c],eax
c001f3cb:	0f b7 04 9d 00 00 00 00 	movzx  eax,WORD PTR [ebx*4+0x0]
c001f3d3:	89 41 38             	mov    DWORD PTR [ecx+0x38],eax
c001f3d6:	5b                   	pop    ebx
c001f3d7:	5e                   	pop    esi
c001f3d8:	5f                   	pop    edi
c001f3d9:	c3                   	ret    

c001f3da <Vm::readByteFromReal(unsigned short, unsigned short)>:
c001f3da:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f3df:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f3e4:	c1 e0 04             	shl    eax,0x4
c001f3e7:	8a 04 10             	mov    al,BYTE PTR [eax+edx*1]
c001f3ea:	c3                   	ret    

c001f3eb <Vm::readWordFromReal(unsigned short, unsigned short)>:
c001f3eb:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f3f0:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f3f5:	c1 e0 04             	shl    eax,0x4
c001f3f8:	66 8b 04 10          	mov    ax,WORD PTR [eax+edx*1]
c001f3fc:	c3                   	ret    

c001f3fd <Vm::readDwordFromReal(unsigned short, unsigned short)>:
c001f3fd:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f402:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f407:	c1 e0 04             	shl    eax,0x4
c001f40a:	8b 04 10             	mov    eax,DWORD PTR [eax+edx*1]
c001f40d:	c3                   	ret    

c001f40e <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>:
c001f40e:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f413:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f418:	c1 e0 04             	shl    eax,0x4
c001f41b:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f41f:	88 0c 10             	mov    BYTE PTR [eax+edx*1],cl
c001f422:	c3                   	ret    

c001f423 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>:
c001f423:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f428:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f42d:	c1 e0 04             	shl    eax,0x4
c001f430:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f434:	66 89 0c 10          	mov    WORD PTR [eax+edx*1],cx
c001f438:	c3                   	ret    

c001f439 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>:
c001f439:	0f b7 44 24 04       	movzx  eax,WORD PTR [esp+0x4]
c001f43e:	0f b7 54 24 08       	movzx  edx,WORD PTR [esp+0x8]
c001f443:	c1 e0 04             	shl    eax,0x4
c001f446:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001f44a:	89 0c 10             	mov    DWORD PTR [eax+edx*1],ecx
c001f44d:	c3                   	ret    

c001f44e <Vm::faultHandler(regs*)>:
c001f44e:	55                   	push   ebp
c001f44f:	57                   	push   edi
c001f450:	56                   	push   esi
c001f451:	53                   	push   ebx
c001f452:	83 ec 1c             	sub    esp,0x1c
c001f455:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c001f459:	8b 4f 38             	mov    ecx,DWORD PTR [edi+0x38]
c001f45c:	8b 5f 3c             	mov    ebx,DWORD PTR [edi+0x3c]
c001f45f:	0f b7 c1             	movzx  eax,cx
c001f462:	50                   	push   eax
c001f463:	0f b7 c3             	movzx  eax,bx
c001f466:	c1 e3 04             	shl    ebx,0x4
c001f469:	50                   	push   eax
c001f46a:	e8 22 fc ff ff       	call   c001f091 <Vm::realToLinear(unsigned short, unsigned short)>
c001f46f:	5a                   	pop    edx
c001f470:	89 c5                	mov    ebp,eax
c001f472:	5e                   	pop    esi
c001f473:	0f b7 47 44          	movzx  eax,WORD PTR [edi+0x44]
c001f477:	50                   	push   eax
c001f478:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f47c:	50                   	push   eax
c001f47d:	e8 0f fc ff ff       	call   c001f091 <Vm::realToLinear(unsigned short, unsigned short)>
c001f482:	01 cb                	add    ebx,ecx
c001f484:	89 c6                	mov    esi,eax
c001f486:	0f b6 45 02          	movzx  eax,BYTE PTR [ebp+0x2]
c001f48a:	50                   	push   eax
c001f48b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f48f:	50                   	push   eax
c001f490:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f494:	50                   	push   eax
c001f495:	55                   	push   ebp
c001f496:	53                   	push   ebx
c001f497:	b3 06                	mov    bl,0x6
c001f499:	68 09 d0 02 c0       	push   0xc002d009
c001f49e:	e8 a4 39 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001f4a3:	83 c4 20             	add    esp,0x20
c001f4a6:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c001f4ab:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c001f4b0:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001f4b4:	3c 9d                	cmp    al,0x9d
c001f4b6:	0f 84 d7 02 00 00    	je     c001f793 <Vm::faultHandler(regs*)+0x345>
c001f4bc:	0f 87 a3 00 00 00    	ja     c001f565 <Vm::faultHandler(regs*)+0x117>
c001f4c2:	3c 66                	cmp    al,0x66
c001f4c4:	0f 84 15 02 00 00    	je     c001f6df <Vm::faultHandler(regs*)+0x291>
c001f4ca:	77 5f                	ja     c001f52b <Vm::faultHandler(regs*)+0xdd>
c001f4cc:	3c 36                	cmp    al,0x36
c001f4ce:	0f 84 f1 01 00 00    	je     c001f6c5 <Vm::faultHandler(regs*)+0x277>
c001f4d4:	77 28                	ja     c001f4fe <Vm::faultHandler(regs*)+0xb0>
c001f4d6:	3c 26                	cmp    al,0x26
c001f4d8:	0f 84 99 01 00 00    	je     c001f677 <Vm::faultHandler(regs*)+0x229>
c001f4de:	3c 2e                	cmp    al,0x2e
c001f4e0:	0f 85 3b 07 00 00    	jne    c001fc21 <Vm::faultHandler(regs*)+0x7d3>
c001f4e6:	83 ec 0c             	sub    esp,0xc
c001f4e9:	31 db                	xor    ebx,ebx
c001f4eb:	68 1e d0 02 c0       	push   0xc002d01e
c001f4f0:	e8 52 39 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001f4f5:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f4f8:	83 c4 10             	add    esp,0x10
c001f4fb:	45                   	inc    ebp
c001f4fc:	eb b2                	jmp    c001f4b0 <Vm::faultHandler(regs*)+0x62>
c001f4fe:	3c 64                	cmp    al,0x64
c001f500:	0f 84 8b 01 00 00    	je     c001f691 <Vm::faultHandler(regs*)+0x243>
c001f506:	0f 87 9f 01 00 00    	ja     c001f6ab <Vm::faultHandler(regs*)+0x25d>
c001f50c:	3c 3e                	cmp    al,0x3e
c001f50e:	0f 85 0d 07 00 00    	jne    c001fc21 <Vm::faultHandler(regs*)+0x7d3>
c001f514:	83 ec 0c             	sub    esp,0xc
c001f517:	b3 01                	mov    bl,0x1
c001f519:	68 22 d0 02 c0       	push   0xc002d022
c001f51e:	e8 24 39 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001f523:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f526:	83 c4 10             	add    esp,0x10
c001f529:	eb d0                	jmp    c001f4fb <Vm::faultHandler(regs*)+0xad>
c001f52b:	3c 6d                	cmp    al,0x6d
c001f52d:	0f 84 af 03 00 00    	je     c001f8e2 <Vm::faultHandler(regs*)+0x494>
c001f533:	77 15                	ja     c001f54a <Vm::faultHandler(regs*)+0xfc>
c001f535:	3c 67                	cmp    al,0x67
c001f537:	0f 84 bf 01 00 00    	je     c001f6fc <Vm::faultHandler(regs*)+0x2ae>
c001f53d:	3c 6c                	cmp    al,0x6c
c001f53f:	0f 84 3f 03 00 00    	je     c001f884 <Vm::faultHandler(regs*)+0x436>
c001f545:	e9 d7 06 00 00       	jmp    c001fc21 <Vm::faultHandler(regs*)+0x7d3>
c001f54a:	3c 6f                	cmp    al,0x6f
c001f54c:	0f 84 a4 04 00 00    	je     c001f9f6 <Vm::faultHandler(regs*)+0x5a8>
c001f552:	0f 82 11 04 00 00    	jb     c001f969 <Vm::faultHandler(regs*)+0x51b>
c001f558:	3c 9c                	cmp    al,0x9c
c001f55a:	0f 84 ba 01 00 00    	je     c001f71a <Vm::faultHandler(regs*)+0x2cc>
c001f560:	e9 bc 06 00 00       	jmp    c001fc21 <Vm::faultHandler(regs*)+0x7d3>
c001f565:	3c ec                	cmp    al,0xec
c001f567:	0f 84 24 06 00 00    	je     c001fb91 <Vm::faultHandler(regs*)+0x743>
c001f56d:	0f 87 93 00 00 00    	ja     c001f606 <Vm::faultHandler(regs*)+0x1b8>
c001f573:	3c e4                	cmp    al,0xe4
c001f575:	0f 84 5c 05 00 00    	je     c001fad7 <Vm::faultHandler(regs*)+0x689>
c001f57b:	77 6a                	ja     c001f5e7 <Vm::faultHandler(regs*)+0x199>
c001f57d:	3c cd                	cmp    al,0xcd
c001f57f:	0f 84 7e 02 00 00    	je     c001f803 <Vm::faultHandler(regs*)+0x3b5>
c001f585:	3c cf                	cmp    al,0xcf
c001f587:	0f 85 94 06 00 00    	jne    c001fc21 <Vm::faultHandler(regs*)+0x7d3>
c001f58d:	83 ec 0c             	sub    esp,0xc
c001f590:	68 66 d0 02 c0       	push   0xc002d066
c001f595:	e8 ad 38 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001f59a:	0f b7 16             	movzx  edx,WORD PTR [esi]
c001f59d:	89 57 38             	mov    DWORD PTR [edi+0x38],edx
c001f5a0:	0f b7 5e 02          	movzx  ebx,WORD PTR [esi+0x2]
c001f5a4:	89 5f 3c             	mov    DWORD PTR [edi+0x3c],ebx
c001f5a7:	0f b7 46 04          	movzx  eax,WORD PTR [esi+0x4]
c001f5ab:	0d 00 02 02 00       	or     eax,0x20200
c001f5b0:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f5b3:	56                   	push   esi
c001f5b4:	53                   	push   ebx
c001f5b5:	52                   	push   edx
c001f5b6:	68 6c d0 02 c0       	push   0xc002d06c
c001f5bb:	e8 87 38 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001f5c0:	66 8b 46 04          	mov    ax,WORD PTR [esi+0x4]
c001f5c4:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f5ca:	66 c1 e8 09          	shr    ax,0x9
c001f5ce:	83 e0 01             	and    eax,0x1
c001f5d1:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f5d4:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f5d7:	83 c0 06             	add    eax,0x6
c001f5da:	25 ff ff 00 00       	and    eax,0xffff
c001f5df:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f5e2:	e9 95 02 00 00       	jmp    c001f87c <Vm::faultHandler(regs*)+0x42e>
c001f5e7:	3c e6                	cmp    al,0xe6
c001f5e9:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c001f5ed:	0f 84 4e 05 00 00    	je     c001fb41 <Vm::faultHandler(regs*)+0x6f3>
c001f5f3:	0f 82 0a 05 00 00    	jb     c001fb03 <Vm::faultHandler(regs*)+0x6b5>
c001f5f9:	3c e7                	cmp    al,0xe7
c001f5fb:	0f 84 69 05 00 00    	je     c001fb6a <Vm::faultHandler(regs*)+0x71c>
c001f601:	e9 1b 06 00 00       	jmp    c001fc21 <Vm::faultHandler(regs*)+0x7d3>
c001f606:	3c ef                	cmp    al,0xef
c001f608:	0f 84 e6 05 00 00    	je     c001fbf4 <Vm::faultHandler(regs*)+0x7a6>
c001f60e:	77 37                	ja     c001f647 <Vm::faultHandler(regs*)+0x1f9>
c001f610:	3c ed                	cmp    al,0xed
c001f612:	0f 84 a3 05 00 00    	je     c001fbbb <Vm::faultHandler(regs*)+0x76d>
c001f618:	3c ee                	cmp    al,0xee
c001f61a:	0f 85 01 06 00 00    	jne    c001fc21 <Vm::faultHandler(regs*)+0x7d3>
c001f620:	52                   	push   edx
c001f621:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f624:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001f627:	68 07 d1 02 c0       	push   0xc002d107
c001f62c:	e8 16 38 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001f631:	59                   	pop    ecx
c001f632:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001f636:	5b                   	pop    ebx
c001f637:	50                   	push   eax
c001f638:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f63c:	50                   	push   eax
c001f63d:	e8 fc f9 ff ff       	call   c001f03e <Vm::outbv(unsigned short, unsigned char)>
c001f642:	e9 a5 05 00 00       	jmp    c001fbec <Vm::faultHandler(regs*)+0x79e>
c001f647:	3c fa                	cmp    al,0xfa
c001f649:	0f 84 f7 01 00 00    	je     c001f846 <Vm::faultHandler(regs*)+0x3f8>
c001f64f:	3c fb                	cmp    al,0xfb
c001f651:	0f 84 0a 02 00 00    	je     c001f861 <Vm::faultHandler(regs*)+0x413>
c001f657:	3c f3                	cmp    al,0xf3
c001f659:	0f 85 c2 05 00 00    	jne    c001fc21 <Vm::faultHandler(regs*)+0x7d3>
c001f65f:	83 ec 0c             	sub    esp,0xc
c001f662:	68 3f d0 02 c0       	push   0xc002d03f
c001f667:	e8 db 37 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001f66c:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f66f:	83 c4 10             	add    esp,0x10
c001f672:	e9 84 fe ff ff       	jmp    c001f4fb <Vm::faultHandler(regs*)+0xad>
c001f677:	83 ec 0c             	sub    esp,0xc
c001f67a:	b3 02                	mov    bl,0x2
c001f67c:	68 1a d0 02 c0       	push   0xc002d01a
c001f681:	e8 c1 37 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001f686:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f689:	83 c4 10             	add    esp,0x10
c001f68c:	e9 6a fe ff ff       	jmp    c001f4fb <Vm::faultHandler(regs*)+0xad>
c001f691:	83 ec 0c             	sub    esp,0xc
c001f694:	b3 03                	mov    bl,0x3
c001f696:	68 26 d0 02 c0       	push   0xc002d026
c001f69b:	e8 a7 37 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001f6a0:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6a3:	83 c4 10             	add    esp,0x10
c001f6a6:	e9 50 fe ff ff       	jmp    c001f4fb <Vm::faultHandler(regs*)+0xad>
c001f6ab:	83 ec 0c             	sub    esp,0xc
c001f6ae:	b3 04                	mov    bl,0x4
c001f6b0:	68 2a d0 02 c0       	push   0xc002d02a
c001f6b5:	e8 8d 37 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001f6ba:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6bd:	83 c4 10             	add    esp,0x10
c001f6c0:	e9 36 fe ff ff       	jmp    c001f4fb <Vm::faultHandler(regs*)+0xad>
c001f6c5:	83 ec 0c             	sub    esp,0xc
c001f6c8:	b3 05                	mov    bl,0x5
c001f6ca:	68 2e d0 02 c0       	push   0xc002d02e
c001f6cf:	e8 73 37 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001f6d4:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6d7:	83 c4 10             	add    esp,0x10
c001f6da:	e9 1c fe ff ff       	jmp    c001f4fb <Vm::faultHandler(regs*)+0xad>
c001f6df:	83 ec 0c             	sub    esp,0xc
c001f6e2:	68 32 d0 02 c0       	push   0xc002d032
c001f6e7:	e8 5b 37 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001f6ec:	83 c4 10             	add    esp,0x10
c001f6ef:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f6f2:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c001f6f7:	e9 ff fd ff ff       	jmp    c001f4fb <Vm::faultHandler(regs*)+0xad>
c001f6fc:	50                   	push   eax
c001f6fd:	50                   	push   eax
c001f6fe:	6a 01                	push   0x1
c001f700:	68 37 d0 02 c0       	push   0xc002d037
c001f705:	e8 3d 37 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001f70a:	83 c4 10             	add    esp,0x10
c001f70d:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001f710:	c6 44 24 0f 01       	mov    BYTE PTR [esp+0xf],0x1
c001f715:	e9 e1 fd ff ff       	jmp    c001f4fb <Vm::faultHandler(regs*)+0xad>
c001f71a:	83 ec 0c             	sub    esp,0xc
c001f71d:	68 45 d0 02 c0       	push   0xc002d045
c001f722:	e8 20 37 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001f727:	83 c4 10             	add    esp,0x10
c001f72a:	8b 57 44             	mov    edx,DWORD PTR [edi+0x44]
c001f72d:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f732:	8b 47 40             	mov    eax,DWORD PTR [edi+0x40]
c001f735:	74 2f                	je     c001f766 <Vm::faultHandler(regs*)+0x318>
c001f737:	83 ea 04             	sub    edx,0x4
c001f73a:	25 ff 0d 00 00       	and    eax,0xdff
c001f73f:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f745:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f748:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f74b:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f751:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f755:	0f 84 bf 04 00 00    	je     c001fc1a <Vm::faultHandler(regs*)+0x7cc>
c001f75b:	80 cc 02             	or     ah,0x2
c001f75e:	89 46 fc             	mov    DWORD PTR [esi-0x4],eax
c001f761:	e9 b4 04 00 00       	jmp    c001fc1a <Vm::faultHandler(regs*)+0x7cc>
c001f766:	83 ea 02             	sub    edx,0x2
c001f769:	81 e2 ff ff 00 00    	and    edx,0xffff
c001f76f:	89 57 44             	mov    DWORD PTR [edi+0x44],edx
c001f772:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f776:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f77c:	80 7a 61 00          	cmp    BYTE PTR [edx+0x61],0x0
c001f780:	74 05                	je     c001f787 <Vm::faultHandler(regs*)+0x339>
c001f782:	80 cc 02             	or     ah,0x2
c001f785:	eb 03                	jmp    c001f78a <Vm::faultHandler(regs*)+0x33c>
c001f787:	80 e4 fd             	and    ah,0xfd
c001f78a:	66 89 46 fe          	mov    WORD PTR [esi-0x2],ax
c001f78e:	e9 87 04 00 00       	jmp    c001fc1a <Vm::faultHandler(regs*)+0x7cc>
c001f793:	83 ec 0c             	sub    esp,0xc
c001f796:	68 4c d0 02 c0       	push   0xc002d04c
c001f79b:	e8 a7 36 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001f7a0:	83 c4 10             	add    esp,0x10
c001f7a3:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f7a8:	74 28                	je     c001f7d2 <Vm::faultHandler(regs*)+0x384>
c001f7aa:	8b 06                	mov    eax,DWORD PTR [esi]
c001f7ac:	25 ff 0d 00 00       	and    eax,0xdff
c001f7b1:	0d 00 02 02 00       	or     eax,0x20200
c001f7b6:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f7b9:	8b 06                	mov    eax,DWORD PTR [esi]
c001f7bb:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f7c1:	c1 e8 09             	shr    eax,0x9
c001f7c4:	83 e0 01             	and    eax,0x1
c001f7c7:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f7ca:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f7cd:	83 c0 04             	add    eax,0x4
c001f7d0:	eb 24                	jmp    c001f7f6 <Vm::faultHandler(regs*)+0x3a8>
c001f7d2:	0f b7 06             	movzx  eax,WORD PTR [esi]
c001f7d5:	0d 00 02 02 00       	or     eax,0x20200
c001f7da:	89 47 40             	mov    DWORD PTR [edi+0x40],eax
c001f7dd:	66 8b 06             	mov    ax,WORD PTR [esi]
c001f7e0:	8b 15 00 20 00 c2    	mov    edx,DWORD PTR ds:0xc2002000
c001f7e6:	66 c1 e8 09          	shr    ax,0x9
c001f7ea:	83 e0 01             	and    eax,0x1
c001f7ed:	88 42 61             	mov    BYTE PTR [edx+0x61],al
c001f7f0:	8b 47 44             	mov    eax,DWORD PTR [edi+0x44]
c001f7f3:	83 c0 02             	add    eax,0x2
c001f7f6:	25 ff ff 00 00       	and    eax,0xffff
c001f7fb:	89 47 44             	mov    DWORD PTR [edi+0x44],eax
c001f7fe:	e9 17 04 00 00       	jmp    c001fc1a <Vm::faultHandler(regs*)+0x7cc>
c001f803:	53                   	push   ebx
c001f804:	53                   	push   ebx
c001f805:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f809:	50                   	push   eax
c001f80a:	68 52 d0 02 c0       	push   0xc002d052
c001f80f:	e8 33 36 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001f814:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001f818:	83 c4 10             	add    esp,0x10
c001f81b:	3c ee                	cmp    al,0xee
c001f81d:	75 10                	jne    c001f82f <Vm::faultHandler(regs*)+0x3e1>
c001f81f:	83 ec 0c             	sub    esp,0xc
c001f822:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001f825:	e8 ce f8 ff ff       	call   c001f0f8 <Vm::mainloop3(unsigned long)>
c001f82a:	e9 c0 03 00 00       	jmp    c001fbef <Vm::faultHandler(regs*)+0x7a1>
c001f82f:	0f b7 5f 44          	movzx  ebx,WORD PTR [edi+0x44]
c001f833:	83 ec 0c             	sub    esp,0xc
c001f836:	53                   	push   ebx
c001f837:	0f b7 5f 48          	movzx  ebx,WORD PTR [edi+0x48]
c001f83b:	53                   	push   ebx
c001f83c:	55                   	push   ebp
c001f83d:	50                   	push   eax
c001f83e:	57                   	push   edi
c001f83f:	e8 0c fb ff ff       	call   c001f350 <Vm::doISR(regs*, int, unsigned char*, unsigned short, unsigned short)>
c001f844:	eb 36                	jmp    c001f87c <Vm::faultHandler(regs*)+0x42e>
c001f846:	83 ec 0c             	sub    esp,0xc
c001f849:	68 5c d0 02 c0       	push   0xc002d05c
c001f84e:	e8 f4 35 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001f853:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f858:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c001f85c:	e9 8b 03 00 00       	jmp    c001fbec <Vm::faultHandler(regs*)+0x79e>
c001f861:	83 ec 0c             	sub    esp,0xc
c001f864:	68 61 d0 02 c0       	push   0xc002d061
c001f869:	e8 d9 35 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001f86e:	a1 00 20 00 c2       	mov    eax,ds:0xc2002000
c001f873:	c6 40 61 01          	mov    BYTE PTR [eax+0x61],0x1
c001f877:	e9 70 03 00 00       	jmp    c001fbec <Vm::faultHandler(regs*)+0x79e>
c001f87c:	83 c4 20             	add    esp,0x20
c001f87f:	e9 99 03 00 00       	jmp    c001fc1d <Vm::faultHandler(regs*)+0x7cf>
c001f884:	83 ec 0c             	sub    esp,0xc
c001f887:	68 9f d0 02 c0       	push   0xc002d09f
c001f88c:	e8 b6 35 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001f891:	83 c4 10             	add    esp,0x10
c001f894:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f897:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f89c:	74 0d                	je     c001f8ab <Vm::faultHandler(regs*)+0x45d>
c001f89e:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f8a5:	0f 87 9e 01 00 00    	ja     c001fa49 <Vm::faultHandler(regs*)+0x5fb>
c001f8ab:	83 ec 0c             	sub    esp,0xc
c001f8ae:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f8b2:	0f b7 db             	movzx  ebx,bx
c001f8b5:	50                   	push   eax
c001f8b6:	e8 70 f7 ff ff       	call   c001f02b <Vm::inbv(unsigned short)>
c001f8bb:	83 c4 0c             	add    esp,0xc
c001f8be:	0f b6 c0             	movzx  eax,al
c001f8c1:	50                   	push   eax
c001f8c2:	0f b7 47 10          	movzx  eax,WORD PTR [edi+0x10]
c001f8c6:	50                   	push   eax
c001f8c7:	53                   	push   ebx
c001f8c8:	e8 41 fb ff ff       	call   c001f40e <Vm::writeByteFromReal(unsigned short, unsigned short, unsigned char)>
c001f8cd:	83 c4 10             	add    esp,0x10
c001f8d0:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f8d3:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f8d7:	74 03                	je     c001f8dc <Vm::faultHandler(regs*)+0x48e>
c001f8d9:	48                   	dec    eax
c001f8da:	eb 01                	jmp    c001f8dd <Vm::faultHandler(regs*)+0x48f>
c001f8dc:	40                   	inc    eax
c001f8dd:	0f b7 c0             	movzx  eax,ax
c001f8e0:	eb 7f                	jmp    c001f961 <Vm::faultHandler(regs*)+0x513>
c001f8e2:	83 ec 0c             	sub    esp,0xc
c001f8e5:	68 d1 d0 02 c0       	push   0xc002d0d1
c001f8ea:	e8 58 35 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001f8ef:	83 c4 10             	add    esp,0x10
c001f8f2:	8b 5f 08             	mov    ebx,DWORD PTR [edi+0x8]
c001f8f5:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f8fa:	74 0d                	je     c001f909 <Vm::faultHandler(regs*)+0x4bb>
c001f8fc:	81 7f 10 ff ff 00 00 	cmp    DWORD PTR [edi+0x10],0xffff
c001f903:	0f 87 40 01 00 00    	ja     c001fa49 <Vm::faultHandler(regs*)+0x5fb>
c001f909:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001f90c:	0f b7 77 10          	movzx  esi,WORD PTR [edi+0x10]
c001f910:	0f b7 db             	movzx  ebx,bx
c001f913:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001f918:	74 20                	je     c001f93a <Vm::faultHandler(regs*)+0x4ec>
c001f91a:	ed                   	in     eax,dx
c001f91b:	51                   	push   ecx
c001f91c:	50                   	push   eax
c001f91d:	56                   	push   esi
c001f91e:	53                   	push   ebx
c001f91f:	e8 15 fb ff ff       	call   c001f439 <Vm::writeDwordFromReal(unsigned short, unsigned short, unsigned int)>
c001f924:	83 c4 10             	add    esp,0x10
c001f927:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f92a:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f92e:	74 05                	je     c001f935 <Vm::faultHandler(regs*)+0x4e7>
c001f930:	83 e8 04             	sub    eax,0x4
c001f933:	eb 27                	jmp    c001f95c <Vm::faultHandler(regs*)+0x50e>
c001f935:	83 c0 04             	add    eax,0x4
c001f938:	eb 22                	jmp    c001f95c <Vm::faultHandler(regs*)+0x50e>
c001f93a:	66 ed                	in     ax,dx
c001f93c:	0f b7 c0             	movzx  eax,ax
c001f93f:	52                   	push   edx
c001f940:	50                   	push   eax
c001f941:	56                   	push   esi
c001f942:	53                   	push   ebx
c001f943:	e8 db fa ff ff       	call   c001f423 <Vm::writeWordFromReal(unsigned short, unsigned short, unsigned short)>
c001f948:	83 c4 10             	add    esp,0x10
c001f94b:	8b 47 10             	mov    eax,DWORD PTR [edi+0x10]
c001f94e:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f952:	74 05                	je     c001f959 <Vm::faultHandler(regs*)+0x50b>
c001f954:	83 e8 02             	sub    eax,0x2
c001f957:	eb 03                	jmp    c001f95c <Vm::faultHandler(regs*)+0x50e>
c001f959:	83 c0 02             	add    eax,0x2
c001f95c:	25 ff ff 00 00       	and    eax,0xffff
c001f961:	89 47 10             	mov    DWORD PTR [edi+0x10],eax
c001f964:	e9 b1 02 00 00       	jmp    c001fc1a <Vm::faultHandler(regs*)+0x7cc>
c001f969:	83 ec 0c             	sub    esp,0xc
c001f96c:	4b                   	dec    ebx
c001f96d:	68 d7 d0 02 c0       	push   0xc002d0d7
c001f972:	e8 d0 34 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001f977:	83 c4 10             	add    esp,0x10
c001f97a:	80 fb 05             	cmp    bl,0x5
c001f97d:	77 0a                	ja     c001f989 <Vm::faultHandler(regs*)+0x53b>
c001f97f:	0f b6 db             	movzx  ebx,bl
c001f982:	ff 24 9d 48 d1 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2eb8]
c001f989:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001f98d:	eb 1b                	jmp    c001f9aa <Vm::faultHandler(regs*)+0x55c>
c001f98f:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001f993:	eb 15                	jmp    c001f9aa <Vm::faultHandler(regs*)+0x55c>
c001f995:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001f999:	eb 0f                	jmp    c001f9aa <Vm::faultHandler(regs*)+0x55c>
c001f99b:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001f99f:	eb 09                	jmp    c001f9aa <Vm::faultHandler(regs*)+0x55c>
c001f9a1:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001f9a4:	eb 04                	jmp    c001f9aa <Vm::faultHandler(regs*)+0x55c>
c001f9a6:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001f9aa:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001f9af:	74 0d                	je     c001f9be <Vm::faultHandler(regs*)+0x570>
c001f9b1:	81 7f 14 ff ff 00 00 	cmp    DWORD PTR [edi+0x14],0xffff
c001f9b8:	0f 87 8b 00 00 00    	ja     c001fa49 <Vm::faultHandler(regs*)+0x5fb>
c001f9be:	53                   	push   ebx
c001f9bf:	53                   	push   ebx
c001f9c0:	0f b7 57 14          	movzx  edx,WORD PTR [edi+0x14]
c001f9c4:	52                   	push   edx
c001f9c5:	50                   	push   eax
c001f9c6:	e8 0f fa ff ff       	call   c001f3da <Vm::readByteFromReal(unsigned short, unsigned short)>
c001f9cb:	5e                   	pop    esi
c001f9cc:	0f b6 c0             	movzx  eax,al
c001f9cf:	5d                   	pop    ebp
c001f9d0:	50                   	push   eax
c001f9d1:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001f9d5:	50                   	push   eax
c001f9d6:	e8 63 f6 ff ff       	call   c001f03e <Vm::outbv(unsigned short, unsigned char)>
c001f9db:	83 c4 10             	add    esp,0x10
c001f9de:	8b 47 14             	mov    eax,DWORD PTR [edi+0x14]
c001f9e1:	f6 47 41 04          	test   BYTE PTR [edi+0x41],0x4
c001f9e5:	74 03                	je     c001f9ea <Vm::faultHandler(regs*)+0x59c>
c001f9e7:	48                   	dec    eax
c001f9e8:	eb 01                	jmp    c001f9eb <Vm::faultHandler(regs*)+0x59d>
c001f9ea:	40                   	inc    eax
c001f9eb:	0f b7 c0             	movzx  eax,ax
c001f9ee:	89 47 14             	mov    DWORD PTR [edi+0x14],eax
c001f9f1:	e9 24 02 00 00       	jmp    c001fc1a <Vm::faultHandler(regs*)+0x7cc>
c001f9f6:	83 ec 0c             	sub    esp,0xc
c001f9f9:	4b                   	dec    ebx
c001f9fa:	68 d7 d0 02 c0       	push   0xc002d0d7
c001f9ff:	e8 43 34 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001fa04:	83 c4 10             	add    esp,0x10
c001fa07:	80 fb 05             	cmp    bl,0x5
c001fa0a:	77 0a                	ja     c001fa16 <Vm::faultHandler(regs*)+0x5c8>
c001fa0c:	0f b6 db             	movzx  ebx,bl
c001fa0f:	ff 24 9d 60 d1 02 c0 	jmp    DWORD PTR [ebx*4-0x3ffd2ea0]
c001fa16:	0f b7 47 3c          	movzx  eax,WORD PTR [edi+0x3c]
c001fa1a:	eb 1b                	jmp    c001fa37 <Vm::faultHandler(regs*)+0x5e9>
c001fa1c:	0f b7 47 0c          	movzx  eax,WORD PTR [edi+0xc]
c001fa20:	eb 15                	jmp    c001fa37 <Vm::faultHandler(regs*)+0x5e9>
c001fa22:	0f b7 47 08          	movzx  eax,WORD PTR [edi+0x8]
c001fa26:	eb 0f                	jmp    c001fa37 <Vm::faultHandler(regs*)+0x5e9>
c001fa28:	0f b7 47 04          	movzx  eax,WORD PTR [edi+0x4]
c001fa2c:	eb 09                	jmp    c001fa37 <Vm::faultHandler(regs*)+0x5e9>
c001fa2e:	0f b7 07             	movzx  eax,WORD PTR [edi]
c001fa31:	eb 04                	jmp    c001fa37 <Vm::faultHandler(regs*)+0x5e9>
c001fa33:	0f b7 47 48          	movzx  eax,WORD PTR [edi+0x48]
c001fa37:	8b 5f 14             	mov    ebx,DWORD PTR [edi+0x14]
c001fa3a:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c001fa3f:	74 39                	je     c001fa7a <Vm::faultHandler(regs*)+0x62c>
c001fa41:	81 fb ff ff 00 00    	cmp    ebx,0xffff
c001fa47:	76 31                	jbe    c001fa7a <Vm::faultHandler(regs*)+0x62c>
c001fa49:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fa4d:	0f b6 45 00          	movzx  eax,BYTE PTR [ebp+0x0]
c001fa51:	51                   	push   ecx
c001fa52:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fa56:	51                   	push   ecx
c001fa57:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fa5b:	51                   	push   ecx
c001fa5c:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fa60:	51                   	push   ecx
c001fa61:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fa65:	52                   	push   edx
c001fa66:	50                   	push   eax
c001fa67:	50                   	push   eax
c001fa68:	68 a4 d0 02 c0       	push   0xc002d0a4
c001fa6d:	e8 d5 33 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001fa72:	83 c4 20             	add    esp,0x20
c001fa75:	e9 fb 01 00 00       	jmp    c001fc75 <Vm::faultHandler(regs*)+0x827>
c001fa7a:	8b 77 40             	mov    esi,DWORD PTR [edi+0x40]
c001fa7d:	0f b7 d3             	movzx  edx,bx
c001fa80:	81 e6 00 04 00 00    	and    esi,0x400
c001fa86:	8b 6f 24             	mov    ebp,DWORD PTR [edi+0x24]
c001fa89:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fa8e:	74 1d                	je     c001faad <Vm::faultHandler(regs*)+0x65f>
c001fa90:	51                   	push   ecx
c001fa91:	51                   	push   ecx
c001fa92:	52                   	push   edx
c001fa93:	50                   	push   eax
c001fa94:	e8 64 f9 ff ff       	call   c001f3fd <Vm::readDwordFromReal(unsigned short, unsigned short)>
c001fa99:	83 c4 10             	add    esp,0x10
c001fa9c:	89 ea                	mov    edx,ebp
c001fa9e:	ef                   	out    dx,eax
c001fa9f:	85 f6                	test   esi,esi
c001faa1:	74 05                	je     c001faa8 <Vm::faultHandler(regs*)+0x65a>
c001faa3:	83 eb 04             	sub    ebx,0x4
c001faa6:	eb 21                	jmp    c001fac9 <Vm::faultHandler(regs*)+0x67b>
c001faa8:	83 c3 04             	add    ebx,0x4
c001faab:	eb 1c                	jmp    c001fac9 <Vm::faultHandler(regs*)+0x67b>
c001faad:	51                   	push   ecx
c001faae:	51                   	push   ecx
c001faaf:	52                   	push   edx
c001fab0:	50                   	push   eax
c001fab1:	e8 35 f9 ff ff       	call   c001f3eb <Vm::readWordFromReal(unsigned short, unsigned short)>
c001fab6:	83 c4 10             	add    esp,0x10
c001fab9:	89 ea                	mov    edx,ebp
c001fabb:	66 ef                	out    dx,ax
c001fabd:	85 f6                	test   esi,esi
c001fabf:	74 05                	je     c001fac6 <Vm::faultHandler(regs*)+0x678>
c001fac1:	83 eb 02             	sub    ebx,0x2
c001fac4:	eb 03                	jmp    c001fac9 <Vm::faultHandler(regs*)+0x67b>
c001fac6:	83 c3 02             	add    ebx,0x2
c001fac9:	81 e3 ff ff 00 00    	and    ebx,0xffff
c001facf:	89 5f 14             	mov    DWORD PTR [edi+0x14],ebx
c001fad2:	e9 43 01 00 00       	jmp    c001fc1a <Vm::faultHandler(regs*)+0x7cc>
c001fad7:	53                   	push   ebx
c001fad8:	53                   	push   ebx
c001fad9:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fadd:	50                   	push   eax
c001fade:	68 dd d0 02 c0       	push   0xc002d0dd
c001fae3:	e8 5f 33 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001fae8:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001faef:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001faf3:	89 04 24             	mov    DWORD PTR [esp],eax
c001faf6:	e8 30 f5 ff ff       	call   c001f02b <Vm::inbv(unsigned short)>
c001fafb:	0f b6 c0             	movzx  eax,al
c001fafe:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fb01:	eb 5e                	jmp    c001fb61 <Vm::faultHandler(regs*)+0x713>
c001fb03:	51                   	push   ecx
c001fb04:	51                   	push   ecx
c001fb05:	53                   	push   ebx
c001fb06:	68 e3 d0 02 c0       	push   0xc002d0e3
c001fb0b:	e8 37 33 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001fb10:	83 c4 10             	add    esp,0x10
c001fb13:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fb18:	74 07                	je     c001fb21 <Vm::faultHandler(regs*)+0x6d3>
c001fb1a:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fb1e:	ed                   	in     eax,dx
c001fb1f:	eb 14                	jmp    c001fb35 <Vm::faultHandler(regs*)+0x6e7>
c001fb21:	8b 5f 2c             	mov    ebx,DWORD PTR [edi+0x2c]
c001fb24:	66 31 db             	xor    bx,bx
c001fb27:	89 5f 2c             	mov    DWORD PTR [edi+0x2c],ebx
c001fb2a:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fb2e:	66 ed                	in     ax,dx
c001fb30:	0f b7 c0             	movzx  eax,ax
c001fb33:	09 d8                	or     eax,ebx
c001fb35:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fb38:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fb3c:	e9 dc 00 00 00       	jmp    c001fc1d <Vm::faultHandler(regs*)+0x7cf>
c001fb41:	50                   	push   eax
c001fb42:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fb45:	53                   	push   ebx
c001fb46:	68 e9 d0 02 c0       	push   0xc002d0e9
c001fb4b:	e8 f7 32 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001fb50:	58                   	pop    eax
c001fb51:	0f b6 47 2c          	movzx  eax,BYTE PTR [edi+0x2c]
c001fb55:	5a                   	pop    edx
c001fb56:	50                   	push   eax
c001fb57:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c001fb5b:	50                   	push   eax
c001fb5c:	e8 dd f4 ff ff       	call   c001f03e <Vm::outbv(unsigned short, unsigned char)>
c001fb61:	83 47 38 02          	add    DWORD PTR [edi+0x38],0x2
c001fb65:	e9 85 00 00 00       	jmp    c001fbef <Vm::faultHandler(regs*)+0x7a1>
c001fb6a:	50                   	push   eax
c001fb6b:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fb6e:	53                   	push   ebx
c001fb6f:	68 f2 d0 02 c0       	push   0xc002d0f2
c001fb74:	e8 ce 32 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001fb79:	83 c4 10             	add    esp,0x10
c001fb7c:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fb80:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fb85:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fb88:	74 03                	je     c001fb8d <Vm::faultHandler(regs*)+0x73f>
c001fb8a:	ef                   	out    dx,eax
c001fb8b:	eb ab                	jmp    c001fb38 <Vm::faultHandler(regs*)+0x6ea>
c001fb8d:	66 ef                	out    dx,ax
c001fb8f:	eb a7                	jmp    c001fb38 <Vm::faultHandler(regs*)+0x6ea>
c001fb91:	55                   	push   ebp
c001fb92:	55                   	push   ebp
c001fb93:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fb96:	68 fb d0 02 c0       	push   0xc002d0fb
c001fb9b:	e8 a7 32 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001fba0:	81 67 2c 00 ff ff ff 	and    DWORD PTR [edi+0x2c],0xffffff00
c001fba7:	0f b7 47 24          	movzx  eax,WORD PTR [edi+0x24]
c001fbab:	89 04 24             	mov    DWORD PTR [esp],eax
c001fbae:	e8 78 f4 ff ff       	call   c001f02b <Vm::inbv(unsigned short)>
c001fbb3:	0f b6 c0             	movzx  eax,al
c001fbb6:	09 47 2c             	or     DWORD PTR [edi+0x2c],eax
c001fbb9:	eb 31                	jmp    c001fbec <Vm::faultHandler(regs*)+0x79e>
c001fbbb:	56                   	push   esi
c001fbbc:	56                   	push   esi
c001fbbd:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fbc0:	68 01 d1 02 c0       	push   0xc002d101
c001fbc5:	e8 7d 32 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001fbca:	83 c4 10             	add    esp,0x10
c001fbcd:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fbd0:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fbd5:	74 03                	je     c001fbda <Vm::faultHandler(regs*)+0x78c>
c001fbd7:	ed                   	in     eax,dx
c001fbd8:	eb 0d                	jmp    c001fbe7 <Vm::faultHandler(regs*)+0x799>
c001fbda:	66 ed                	in     ax,dx
c001fbdc:	8b 57 2c             	mov    edx,DWORD PTR [edi+0x2c]
c001fbdf:	0f b7 c0             	movzx  eax,ax
c001fbe2:	66 31 d2             	xor    dx,dx
c001fbe5:	09 d0                	or     eax,edx
c001fbe7:	89 47 2c             	mov    DWORD PTR [edi+0x2c],eax
c001fbea:	eb 2e                	jmp    c001fc1a <Vm::faultHandler(regs*)+0x7cc>
c001fbec:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fbef:	83 c4 10             	add    esp,0x10
c001fbf2:	eb 29                	jmp    c001fc1d <Vm::faultHandler(regs*)+0x7cf>
c001fbf4:	50                   	push   eax
c001fbf5:	ff 77 2c             	push   DWORD PTR [edi+0x2c]
c001fbf8:	ff 77 24             	push   DWORD PTR [edi+0x24]
c001fbfb:	68 10 d1 02 c0       	push   0xc002d110
c001fc00:	e8 42 32 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001fc05:	83 c4 10             	add    esp,0x10
c001fc08:	8b 57 24             	mov    edx,DWORD PTR [edi+0x24]
c001fc0b:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c001fc10:	8b 47 2c             	mov    eax,DWORD PTR [edi+0x2c]
c001fc13:	74 03                	je     c001fc18 <Vm::faultHandler(regs*)+0x7ca>
c001fc15:	ef                   	out    dx,eax
c001fc16:	eb 02                	jmp    c001fc1a <Vm::faultHandler(regs*)+0x7cc>
c001fc18:	66 ef                	out    dx,ax
c001fc1a:	ff 47 38             	inc    DWORD PTR [edi+0x38]
c001fc1d:	b0 01                	mov    al,0x1
c001fc1f:	eb 56                	jmp    c001fc77 <Vm::faultHandler(regs*)+0x829>
c001fc21:	0f b6 4d 05          	movzx  ecx,BYTE PTR [ebp+0x5]
c001fc25:	51                   	push   ecx
c001fc26:	0f b6 4d 04          	movzx  ecx,BYTE PTR [ebp+0x4]
c001fc2a:	51                   	push   ecx
c001fc2b:	0f b6 4d 03          	movzx  ecx,BYTE PTR [ebp+0x3]
c001fc2f:	51                   	push   ecx
c001fc30:	0f b6 4d 02          	movzx  ecx,BYTE PTR [ebp+0x2]
c001fc34:	51                   	push   ecx
c001fc35:	0f b6 55 01          	movzx  edx,BYTE PTR [ebp+0x1]
c001fc39:	52                   	push   edx
c001fc3a:	50                   	push   eax
c001fc3b:	50                   	push   eax
c001fc3c:	68 19 d1 02 c0       	push   0xc002d119
c001fc41:	e8 01 32 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c001fc46:	83 c4 20             	add    esp,0x20
c001fc49:	83 ec 0c             	sub    esp,0xc
c001fc4c:	6a 60                	push   0x60
c001fc4e:	e8 d8 f3 ff ff       	call   c001f02b <Vm::inbv(unsigned short)>
c001fc53:	83 c4 10             	add    esp,0x10
c001fc56:	3c 1c                	cmp    al,0x1c
c001fc58:	74 04                	je     c001fc5e <Vm::faultHandler(regs*)+0x810>
c001fc5a:	3c 5a                	cmp    al,0x5a
c001fc5c:	75 eb                	jne    c001fc49 <Vm::faultHandler(regs*)+0x7fb>
c001fc5e:	3c 1c                	cmp    al,0x1c
c001fc60:	74 04                	je     c001fc66 <Vm::faultHandler(regs*)+0x818>
c001fc62:	3c 5a                	cmp    al,0x5a
c001fc64:	75 0f                	jne    c001fc75 <Vm::faultHandler(regs*)+0x827>
c001fc66:	83 ec 0c             	sub    esp,0xc
c001fc69:	6a 60                	push   0x60
c001fc6b:	e8 bb f3 ff ff       	call   c001f02b <Vm::inbv(unsigned short)>
c001fc70:	83 c4 10             	add    esp,0x10
c001fc73:	eb e9                	jmp    c001fc5e <Vm::faultHandler(regs*)+0x810>
c001fc75:	31 c0                	xor    eax,eax
c001fc77:	83 c4 1c             	add    esp,0x1c
c001fc7a:	5b                   	pop    ebx
c001fc7b:	5e                   	pop    esi
c001fc7c:	5f                   	pop    edi
c001fc7d:	5d                   	pop    ebp
c001fc7e:	c3                   	ret    

c001fc7f <Vm::fpuInternalTo32(unsigned long long)>:
c001fc7f:	57                   	push   edi
c001fc80:	56                   	push   esi
c001fc81:	53                   	push   ebx
c001fc82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c001fc86:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fc8a:	89 d6                	mov    esi,edx
c001fc8c:	89 d7                	mov    edi,edx
c001fc8e:	89 c1                	mov    ecx,eax
c001fc90:	c1 ef 14             	shr    edi,0x14
c001fc93:	89 d3                	mov    ebx,edx
c001fc95:	81 e7 ff 07 00 00    	and    edi,0x7ff
c001fc9b:	31 d2                	xor    edx,edx
c001fc9d:	89 f8                	mov    eax,edi
c001fc9f:	81 e6 00 00 00 80    	and    esi,0x80000000
c001fca5:	bf ff 00 00 00       	mov    edi,0xff
c001fcaa:	05 80 fc ff ff       	add    eax,0xfffffc80
c001fcaf:	83 d2 ff             	adc    edx,0xffffffff
c001fcb2:	39 c7                	cmp    edi,eax
c001fcb4:	bf 00 00 00 00       	mov    edi,0x0
c001fcb9:	19 d7                	sbb    edi,edx
c001fcbb:	72 15                	jb     c001fcd2 <Vm::fpuInternalTo32(unsigned long long)+0x53>
c001fcbd:	0f ac d9 1d          	shrd   ecx,ebx,0x1d
c001fcc1:	c1 e0 17             	shl    eax,0x17
c001fcc4:	81 e1 ff ff 7f 00    	and    ecx,0x7fffff
c001fcca:	09 f1                	or     ecx,esi
c001fccc:	09 c1                	or     ecx,eax
c001fcce:	89 cf                	mov    edi,ecx
c001fcd0:	eb 02                	jmp    c001fcd4 <Vm::fpuInternalTo32(unsigned long long)+0x55>
c001fcd2:	31 ff                	xor    edi,edi
c001fcd4:	89 f8                	mov    eax,edi
c001fcd6:	5b                   	pop    ebx
c001fcd7:	5e                   	pop    esi
c001fcd8:	5f                   	pop    edi
c001fcd9:	c3                   	ret    

c001fcda <Vm::fpuInternalTo64(unsigned long long)>:
c001fcda:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fcde:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fce2:	c3                   	ret    

c001fce3 <Vm::fpu32ToInternal(unsigned int)>:
c001fce3:	57                   	push   edi
c001fce4:	31 ff                	xor    edi,edi
c001fce6:	56                   	push   esi
c001fce7:	53                   	push   ebx
c001fce8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001fcec:	89 cb                	mov    ebx,ecx
c001fcee:	89 ce                	mov    esi,ecx
c001fcf0:	81 e3 00 00 00 80    	and    ebx,0x80000000
c001fcf6:	81 e6 ff ff 7f 00    	and    esi,0x7fffff
c001fcfc:	c1 e9 17             	shr    ecx,0x17
c001fcff:	89 f0                	mov    eax,esi
c001fd01:	0f b6 d1             	movzx  edx,cl
c001fd04:	81 c2 80 03 00 00    	add    edx,0x380
c001fd0a:	89 d1                	mov    ecx,edx
c001fd0c:	89 fa                	mov    edx,edi
c001fd0e:	c1 e1 14             	shl    ecx,0x14
c001fd11:	0f a4 c2 1d          	shld   edx,eax,0x1d
c001fd15:	c1 e0 1d             	shl    eax,0x1d
c001fd18:	89 d7                	mov    edi,edx
c001fd1a:	89 c6                	mov    esi,eax
c001fd1c:	89 ca                	mov    edx,ecx
c001fd1e:	89 f0                	mov    eax,esi
c001fd20:	09 fa                	or     edx,edi
c001fd22:	09 da                	or     edx,ebx
c001fd24:	5b                   	pop    ebx
c001fd25:	5e                   	pop    esi
c001fd26:	5f                   	pop    edi
c001fd27:	c3                   	ret    

c001fd28 <Vm::fpu64ToInternal(unsigned long long)>:
c001fd28:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001fd2c:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001fd30:	c3                   	ret    

c001fd31 <Vm::fpuFloatToLong(unsigned long long)>:
c001fd31:	57                   	push   edi
c001fd32:	31 c0                	xor    eax,eax
c001fd34:	56                   	push   esi
c001fd35:	31 d2                	xor    edx,edx
c001fd37:	53                   	push   ebx
c001fd38:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fd3c:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fd40:	89 d9                	mov    ecx,ebx
c001fd42:	c1 e9 14             	shr    ecx,0x14
c001fd45:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c001fd4b:	89 cf                	mov    edi,ecx
c001fd4d:	81 ef ff 03 00 00    	sub    edi,0x3ff
c001fd53:	78 33                	js     c001fd88 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fd55:	89 d9                	mov    ecx,ebx
c001fd57:	89 f0                	mov    eax,esi
c001fd59:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fd5f:	81 c9 00 00 10 00    	or     ecx,0x100000
c001fd65:	89 ca                	mov    edx,ecx
c001fd67:	b9 34 00 00 00       	mov    ecx,0x34
c001fd6c:	29 f9                	sub    ecx,edi
c001fd6e:	0f ad d0             	shrd   eax,edx,cl
c001fd71:	d3 fa                	sar    edx,cl
c001fd73:	f6 c1 20             	test   cl,0x20
c001fd76:	74 05                	je     c001fd7d <Vm::fpuFloatToLong(unsigned long long)+0x4c>
c001fd78:	89 d0                	mov    eax,edx
c001fd7a:	c1 fa 1f             	sar    edx,0x1f
c001fd7d:	85 db                	test   ebx,ebx
c001fd7f:	79 07                	jns    c001fd88 <Vm::fpuFloatToLong(unsigned long long)+0x57>
c001fd81:	f7 d8                	neg    eax
c001fd83:	83 d2 00             	adc    edx,0x0
c001fd86:	f7 da                	neg    edx
c001fd88:	5b                   	pop    ebx
c001fd89:	5e                   	pop    esi
c001fd8a:	5f                   	pop    edi
c001fd8b:	c3                   	ret    

c001fd8c <Vm::fpuULongToFloat(unsigned long long)>:
c001fd8c:	57                   	push   edi
c001fd8d:	31 c9                	xor    ecx,ecx
c001fd8f:	56                   	push   esi
c001fd90:	53                   	push   ebx
c001fd91:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c001fd95:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c001fd99:	0f ba e7 14          	bt     edi,0x14
c001fd9d:	72 07                	jb     c001fda6 <Vm::fpuULongToFloat(unsigned long long)+0x1a>
c001fd9f:	01 f6                	add    esi,esi
c001fda1:	11 ff                	adc    edi,edi
c001fda3:	41                   	inc    ecx
c001fda4:	eb f3                	jmp    c001fd99 <Vm::fpuULongToFloat(unsigned long long)+0xd>
c001fda6:	89 fa                	mov    edx,edi
c001fda8:	89 f0                	mov    eax,esi
c001fdaa:	bb 33 04 00 00       	mov    ebx,0x433
c001fdaf:	81 e2 ff ff 0f 00    	and    edx,0xfffff
c001fdb5:	29 cb                	sub    ebx,ecx
c001fdb7:	89 d9                	mov    ecx,ebx
c001fdb9:	5b                   	pop    ebx
c001fdba:	c1 e1 14             	shl    ecx,0x14
c001fdbd:	5e                   	pop    esi
c001fdbe:	09 ca                	or     edx,ecx
c001fdc0:	5f                   	pop    edi
c001fdc1:	c3                   	ret    

c001fdc2 <Vm::fpuLongToFloat(long long)>:
c001fdc2:	56                   	push   esi
c001fdc3:	31 c0                	xor    eax,eax
c001fdc5:	53                   	push   ebx
c001fdc6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001fdca:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c001fdce:	39 c8                	cmp    eax,ecx
c001fdd0:	19 d8                	sbb    eax,ebx
c001fdd2:	7d 04                	jge    c001fdd8 <Vm::fpuLongToFloat(long long)+0x16>
c001fdd4:	31 f6                	xor    esi,esi
c001fdd6:	eb 0c                	jmp    c001fde4 <Vm::fpuLongToFloat(long long)+0x22>
c001fdd8:	f7 d9                	neg    ecx
c001fdda:	be 01 00 00 00       	mov    esi,0x1
c001fddf:	83 d3 00             	adc    ebx,0x0
c001fde2:	f7 db                	neg    ebx
c001fde4:	31 c0                	xor    eax,eax
c001fde6:	0f ba e3 14          	bt     ebx,0x14
c001fdea:	72 07                	jb     c001fdf3 <Vm::fpuLongToFloat(long long)+0x31>
c001fdec:	01 c9                	add    ecx,ecx
c001fdee:	11 db                	adc    ebx,ebx
c001fdf0:	40                   	inc    eax
c001fdf1:	eb f3                	jmp    c001fde6 <Vm::fpuLongToFloat(long long)+0x24>
c001fdf3:	ba 33 04 00 00       	mov    edx,0x433
c001fdf8:	29 c2                	sub    edx,eax
c001fdfa:	89 c8                	mov    eax,ecx
c001fdfc:	c1 e2 14             	shl    edx,0x14
c001fdff:	89 d9                	mov    ecx,ebx
c001fe01:	89 f3                	mov    ebx,esi
c001fe03:	81 e1 ff ff 0f 00    	and    ecx,0xfffff
c001fe09:	09 ca                	or     edx,ecx
c001fe0b:	84 db                	test   bl,bl
c001fe0d:	74 06                	je     c001fe15 <Vm::fpuLongToFloat(long long)+0x53>
c001fe0f:	81 ca 00 00 00 80    	or     edx,0x80000000
c001fe15:	5b                   	pop    ebx
c001fe16:	5e                   	pop    esi
c001fe17:	c3                   	ret    

c001fe18 <Vm::fpuGet0()>:
c001fe18:	31 c0                	xor    eax,eax
c001fe1a:	31 d2                	xor    edx,edx
c001fe1c:	c3                   	ret    

c001fe1d <Vm::fpuGet1()>:
c001fe1d:	b8 01 00 00 00       	mov    eax,0x1
c001fe22:	31 d2                	xor    edx,edx
c001fe24:	c3                   	ret    

c001fe25 <Vm::fpuGetPi()>:
c001fe25:	b8 03 00 00 00       	mov    eax,0x3
c001fe2a:	31 d2                	xor    edx,edx
c001fe2c:	c3                   	ret    

c001fe2d <Vm::fpuGetLog2E()>:
c001fe2d:	83 ec 18             	sub    esp,0x18
c001fe30:	68 78 d1 02 c0       	push   0xc002d178
c001fe35:	e8 c7 a9 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001fe3a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe3f:	31 d2                	xor    edx,edx
c001fe41:	83 c4 1c             	add    esp,0x1c
c001fe44:	c3                   	ret    

c001fe45 <Vm::fpuGetLogE2()>:
c001fe45:	83 ec 18             	sub    esp,0x18
c001fe48:	68 84 d1 02 c0       	push   0xc002d184
c001fe4d:	e8 af a9 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001fe52:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe57:	31 d2                	xor    edx,edx
c001fe59:	83 c4 1c             	add    esp,0x1c
c001fe5c:	c3                   	ret    

c001fe5d <Vm::fpuGetLog210()>:
c001fe5d:	83 ec 18             	sub    esp,0x18
c001fe60:	68 90 d1 02 c0       	push   0xc002d190
c001fe65:	e8 97 a9 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001fe6a:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe6f:	31 d2                	xor    edx,edx
c001fe71:	83 c4 1c             	add    esp,0x1c
c001fe74:	c3                   	ret    

c001fe75 <Vm::fpuGetLog102()>:
c001fe75:	83 ec 18             	sub    esp,0x18
c001fe78:	68 9d d1 02 c0       	push   0xc002d19d
c001fe7d:	e8 7f a9 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001fe82:	b8 ef be ad de       	mov    eax,0xdeadbeef
c001fe87:	31 d2                	xor    edx,edx
c001fe89:	83 c4 1c             	add    esp,0x1c
c001fe8c:	c3                   	ret    

c001fe8d <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>:
c001fe8d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001fe91:	39 44 24 04          	cmp    DWORD PTR [esp+0x4],eax
c001fe95:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001fe99:	1b 44 24 10          	sbb    eax,DWORD PTR [esp+0x10]
c001fe9d:	0f 92 c0             	setb   al
c001fea0:	c3                   	ret    

c001fea1 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>:
c001fea1:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001fea5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c001fea9:	33 54 24 04          	xor    edx,DWORD PTR [esp+0x4]
c001fead:	33 44 24 08          	xor    eax,DWORD PTR [esp+0x8]
c001feb1:	09 c2                	or     edx,eax
c001feb3:	0f 94 c0             	sete   al
c001feb6:	c3                   	ret    

c001feb7 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>:
c001feb7:	57                   	push   edi
c001feb8:	56                   	push   esi
c001feb9:	53                   	push   ebx
c001feba:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c001febe:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001fec2:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c001fec6:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c001feca:	57                   	push   edi
c001fecb:	56                   	push   esi
c001fecc:	53                   	push   ebx
c001fecd:	51                   	push   ecx
c001fece:	e8 ce ff ff ff       	call   c001fea1 <Vm::fpuAreEqual(unsigned long long, unsigned long long)>
c001fed3:	83 c4 10             	add    esp,0x10
c001fed6:	88 c2                	mov    dl,al
c001fed8:	31 c0                	xor    eax,eax
c001feda:	84 d2                	test   dl,dl
c001fedc:	75 0c                	jne    c001feea <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)+0x33>
c001fede:	57                   	push   edi
c001fedf:	56                   	push   esi
c001fee0:	53                   	push   ebx
c001fee1:	51                   	push   ecx
c001fee2:	e8 a6 ff ff ff       	call   c001fe8d <Vm::fpuIsSecondLarger(unsigned long long, unsigned long long)>
c001fee7:	83 c4 10             	add    esp,0x10
c001feea:	83 e0 01             	and    eax,0x1
c001feed:	5b                   	pop    ebx
c001feee:	88 c1                	mov    cl,al
c001fef0:	83 e2 01             	and    edx,0x1
c001fef3:	a0 21 24 03 c0       	mov    al,ds:0xc0032421
c001fef8:	c1 e2 06             	shl    edx,0x6
c001fefb:	83 e0 ba             	and    eax,0xffffffba
c001fefe:	5e                   	pop    esi
c001feff:	09 c8                	or     eax,ecx
c001ff01:	5f                   	pop    edi
c001ff02:	09 d0                	or     eax,edx
c001ff04:	a2 21 24 03 c0       	mov    ds:0xc0032421,al
c001ff09:	c3                   	ret    

c001ff0a <Vm::fpuAdd(unsigned long long, unsigned long long)>:
c001ff0a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c001ff0e:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ff12:	03 44 24 04          	add    eax,DWORD PTR [esp+0x4]
c001ff16:	13 54 24 08          	adc    edx,DWORD PTR [esp+0x8]
c001ff1a:	c3                   	ret    

c001ff1b <Vm::fpuAbs(unsigned long long)>:
c001ff1b:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff1f:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff23:	c3                   	ret    

c001ff24 <Vm::fpuChs(unsigned long long)>:
c001ff24:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c001ff28:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c001ff2c:	f7 d8                	neg    eax
c001ff2e:	83 d2 00             	adc    edx,0x0
c001ff31:	f7 da                	neg    edx
c001ff33:	c3                   	ret    

c001ff34 <Vm::fpuSub(unsigned long long, unsigned long long)>:
c001ff34:	f7 5c 24 0c          	neg    DWORD PTR [esp+0xc]
c001ff38:	83 54 24 10 00       	adc    DWORD PTR [esp+0x10],0x0
c001ff3d:	f7 5c 24 10          	neg    DWORD PTR [esp+0x10]
c001ff41:	eb c7                	jmp    c001ff0a <Vm::fpuAdd(unsigned long long, unsigned long long)>

c001ff43 <Vm::fpuMultiply(unsigned long long, unsigned long long)>:
c001ff43:	53                   	push   ebx
c001ff44:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff48:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c001ff4c:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c001ff50:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c001ff54:	0f af ca             	imul   ecx,edx
c001ff57:	0f af d8             	imul   ebx,eax
c001ff5a:	f7 e2                	mul    edx
c001ff5c:	01 d9                	add    ecx,ebx
c001ff5e:	5b                   	pop    ebx
c001ff5f:	01 ca                	add    edx,ecx
c001ff61:	c3                   	ret    

c001ff62 <Vm::fpuDivide(unsigned long long, unsigned long long)>:
c001ff62:	83 ec 0c             	sub    esp,0xc
c001ff65:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff69:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff6d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff71:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c001ff75:	e8 4a 72 00 00       	call   c00271c4 <__udivdi3>
c001ff7a:	83 c4 1c             	add    esp,0x1c
c001ff7d:	c3                   	ret    

c001ff7e <Vm::fpuSquare(unsigned long long)>:
c001ff7e:	50                   	push   eax
c001ff7f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c001ff83:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c001ff87:	52                   	push   edx
c001ff88:	50                   	push   eax
c001ff89:	52                   	push   edx
c001ff8a:	50                   	push   eax
c001ff8b:	e8 b3 ff ff ff       	call   c001ff43 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c001ff90:	83 c4 14             	add    esp,0x14
c001ff93:	c3                   	ret    

c001ff94 <Vm::fpuGetReg(int)>:
c001ff94:	83 ec 0c             	sub    esp,0xc
c001ff97:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ff9c:	76 10                	jbe    c001ffae <Vm::fpuGetReg(int)+0x1a>
c001ff9e:	83 ec 0c             	sub    esp,0xc
c001ffa1:	68 aa d1 02 c0       	push   0xc002d1aa
c001ffa6:	e8 56 a8 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001ffab:	83 c4 10             	add    esp,0x10
c001ffae:	a0 21 24 03 c0       	mov    al,ds:0xc0032421
c001ffb3:	b9 08 00 00 00       	mov    ecx,0x8
c001ffb8:	c0 e8 03             	shr    al,0x3
c001ffbb:	83 e0 07             	and    eax,0x7
c001ffbe:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c001ffc2:	99                   	cdq    
c001ffc3:	f7 f9                	idiv   ecx
c001ffc5:	8b 04 d5 24 24 03 c0 	mov    eax,DWORD PTR [edx*8-0x3ffcdbdc]
c001ffcc:	8b 14 d5 28 24 03 c0 	mov    edx,DWORD PTR [edx*8-0x3ffcdbd8]
c001ffd3:	83 c4 0c             	add    esp,0xc
c001ffd6:	c3                   	ret    

c001ffd7 <Vm::fpuSetReg(int, unsigned long long)>:
c001ffd7:	57                   	push   edi
c001ffd8:	56                   	push   esi
c001ffd9:	52                   	push   edx
c001ffda:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c001ffde:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c001ffe2:	83 7c 24 10 07       	cmp    DWORD PTR [esp+0x10],0x7
c001ffe7:	76 10                	jbe    c001fff9 <Vm::fpuSetReg(int, unsigned long long)+0x22>
c001ffe9:	83 ec 0c             	sub    esp,0xc
c001ffec:	68 bd d1 02 c0       	push   0xc002d1bd
c001fff1:	e8 0b a8 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c001fff6:	83 c4 10             	add    esp,0x10
c001fff9:	a0 21 24 03 c0       	mov    al,ds:0xc0032421
c001fffe:	b9 08 00 00 00       	mov    ecx,0x8
c0020003:	c0 e8 03             	shr    al,0x3
c0020006:	83 e0 07             	and    eax,0x7
c0020009:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c002000d:	99                   	cdq    
c002000e:	f7 f9                	idiv   ecx
c0020010:	89 34 d5 24 24 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdbdc],esi
c0020017:	89 3c d5 28 24 03 c0 	mov    DWORD PTR [edx*8-0x3ffcdbd8],edi
c002001e:	58                   	pop    eax
c002001f:	5e                   	pop    esi
c0020020:	5f                   	pop    edi
c0020021:	c3                   	ret    

c0020022 <Vm::fpuPush(unsigned long long)>:
c0020022:	a0 21 24 03 c0       	mov    al,ds:0xc0032421
c0020027:	c0 e8 03             	shr    al,0x3
c002002a:	83 e0 07             	and    eax,0x7
c002002d:	83 c0 07             	add    eax,0x7
c0020030:	88 c2                	mov    dl,al
c0020032:	83 e0 07             	and    eax,0x7
c0020035:	83 e2 07             	and    edx,0x7
c0020038:	8d 0c d5 00 00 00 00 	lea    ecx,[edx*8+0x0]
c002003f:	8a 15 21 24 03 c0    	mov    dl,BYTE PTR ds:0xc0032421
c0020045:	83 e2 c7             	and    edx,0xffffffc7
c0020048:	09 ca                	or     edx,ecx
c002004a:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c002004e:	88 15 21 24 03 c0    	mov    BYTE PTR ds:0xc0032421,dl
c0020054:	89 0c c5 28 24 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdbd8],ecx
c002005b:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002005f:	89 14 c5 24 24 03 c0 	mov    DWORD PTR [eax*8-0x3ffcdbdc],edx
c0020066:	a1 64 24 03 c0       	mov    eax,ds:0xc0032464
c002006b:	83 f8 08             	cmp    eax,0x8
c002006e:	75 08                	jne    c0020078 <Vm::fpuPush(unsigned long long)+0x56>
c0020070:	80 0d 20 24 03 c0 40 	or     BYTE PTR ds:0xc0032420,0x40
c0020077:	c3                   	ret    
c0020078:	40                   	inc    eax
c0020079:	a3 64 24 03 c0       	mov    ds:0xc0032464,eax
c002007e:	c3                   	ret    

c002007f <Vm::fpuPop()>:
c002007f:	8a 0d 21 24 03 c0    	mov    cl,BYTE PTR ds:0xc0032421
c0020085:	53                   	push   ebx
c0020086:	c0 e9 03             	shr    cl,0x3
c0020089:	8a 1d 21 24 03 c0    	mov    bl,BYTE PTR ds:0xc0032421
c002008f:	83 e1 07             	and    ecx,0x7
c0020092:	83 e3 c7             	and    ebx,0xffffffc7
c0020095:	8b 04 cd 24 24 03 c0 	mov    eax,DWORD PTR [ecx*8-0x3ffcdbdc]
c002009c:	8b 14 cd 28 24 03 c0 	mov    edx,DWORD PTR [ecx*8-0x3ffcdbd8]
c00200a3:	8d 0c cd 08 00 00 00 	lea    ecx,[ecx*8+0x8]
c00200aa:	83 e1 38             	and    ecx,0x38
c00200ad:	09 d9                	or     ecx,ebx
c00200af:	88 0d 21 24 03 c0    	mov    BYTE PTR ds:0xc0032421,cl
c00200b5:	8b 0d 64 24 03 c0    	mov    ecx,DWORD PTR ds:0xc0032464
c00200bb:	85 c9                	test   ecx,ecx
c00200bd:	74 09                	je     c00200c8 <Vm::fpuPop()+0x49>
c00200bf:	49                   	dec    ecx
c00200c0:	89 0d 64 24 03 c0    	mov    DWORD PTR ds:0xc0032464,ecx
c00200c6:	eb 07                	jmp    c00200cf <Vm::fpuPop()+0x50>
c00200c8:	80 0d 20 24 03 c0 40 	or     BYTE PTR ds:0xc0032420,0x40
c00200cf:	5b                   	pop    ebx
c00200d0:	c3                   	ret    

c00200d1 <Vm::x87Handler(regs*)>:
c00200d1:	55                   	push   ebp
c00200d2:	57                   	push   edi
c00200d3:	56                   	push   esi
c00200d4:	53                   	push   ebx
c00200d5:	83 ec 1c             	sub    esp,0x1c
c00200d8:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c00200dc:	c6 44 24 0a 00       	mov    BYTE PTR [esp+0xa],0x0
c00200e1:	8b 6b 38             	mov    ebp,DWORD PTR [ebx+0x38]
c00200e4:	c7 44 24 0c 02 00 00 00 	mov    DWORD PTR [esp+0xc],0x2
c00200ec:	8d 44 24 0b          	lea    eax,[esp+0xb]
c00200f0:	50                   	push   eax
c00200f1:	8d 44 24 0e          	lea    eax,[esp+0xe]
c00200f5:	50                   	push   eax
c00200f6:	8d 44 24 14          	lea    eax,[esp+0x14]
c00200fa:	50                   	push   eax
c00200fb:	53                   	push   ebx
c00200fc:	e8 d1 9d ff ff       	call   c0019ed2 <CPU::decodeAddress(regs*, int*, bool*, unsigned char*)>
c0020101:	8a 55 00             	mov    dl,BYTE PTR [ebp+0x0]
c0020104:	83 c4 10             	add    esp,0x10
c0020107:	89 c6                	mov    esi,eax
c0020109:	80 fa d9             	cmp    dl,0xd9
c002010c:	0f 85 52 01 00 00    	jne    c0020264 <Vm::x87Handler(regs*)+0x193>
c0020112:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020116:	8d 50 20             	lea    edx,[eax+0x20]
c0020119:	80 fa 0e             	cmp    dl,0xe
c002011c:	0f 87 86 00 00 00    	ja     c00201a8 <Vm::x87Handler(regs*)+0xd7>
c0020122:	0f b6 d2             	movzx  edx,dl
c0020125:	ff 24 95 d0 d1 02 c0 	jmp    DWORD PTR [edx*4-0x3ffd2e30]
c002012c:	e8 e7 fc ff ff       	call   c001fe18 <Vm::fpuGet0()>
c0020131:	eb 05                	jmp    c0020138 <Vm::x87Handler(regs*)+0x67>
c0020133:	e8 e5 fc ff ff       	call   c001fe1d <Vm::fpuGet1()>
c0020138:	57                   	push   edi
c0020139:	57                   	push   edi
c002013a:	52                   	push   edx
c002013b:	50                   	push   eax
c002013c:	e8 e1 fe ff ff       	call   c0020022 <Vm::fpuPush(unsigned long long)>
c0020141:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020145:	83 c4 10             	add    esp,0x10
c0020148:	b0 01                	mov    al,0x1
c002014a:	e9 e3 09 00 00       	jmp    c0020b32 <Vm::x87Handler(regs*)+0xa61>
c002014f:	83 ec 0c             	sub    esp,0xc
c0020152:	6a 00                	push   0x0
c0020154:	e8 3b fe ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020159:	59                   	pop    ecx
c002015a:	5e                   	pop    esi
c002015b:	52                   	push   edx
c002015c:	50                   	push   eax
c002015d:	e8 c2 fd ff ff       	call   c001ff24 <Vm::fpuChs(unsigned long long)>
c0020162:	eb 13                	jmp    c0020177 <Vm::x87Handler(regs*)+0xa6>
c0020164:	83 ec 0c             	sub    esp,0xc
c0020167:	6a 00                	push   0x0
c0020169:	e8 26 fe ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c002016e:	5f                   	pop    edi
c002016f:	5d                   	pop    ebp
c0020170:	52                   	push   edx
c0020171:	50                   	push   eax
c0020172:	e8 a4 fd ff ff       	call   c001ff1b <Vm::fpuAbs(unsigned long long)>
c0020177:	83 c4 0c             	add    esp,0xc
c002017a:	52                   	push   edx
c002017b:	50                   	push   eax
c002017c:	6a 00                	push   0x0
c002017e:	e8 54 fe ff ff       	call   c001ffd7 <Vm::fpuSetReg(int, unsigned long long)>
c0020183:	eb bc                	jmp    c0020141 <Vm::x87Handler(regs*)+0x70>
c0020185:	e8 d3 fc ff ff       	call   c001fe5d <Vm::fpuGetLog210()>
c002018a:	eb ac                	jmp    c0020138 <Vm::x87Handler(regs*)+0x67>
c002018c:	e8 9c fc ff ff       	call   c001fe2d <Vm::fpuGetLog2E()>
c0020191:	eb a5                	jmp    c0020138 <Vm::x87Handler(regs*)+0x67>
c0020193:	e8 8d fc ff ff       	call   c001fe25 <Vm::fpuGetPi()>
c0020198:	eb 9e                	jmp    c0020138 <Vm::x87Handler(regs*)+0x67>
c002019a:	e8 d6 fc ff ff       	call   c001fe75 <Vm::fpuGetLog102()>
c002019f:	eb 97                	jmp    c0020138 <Vm::x87Handler(regs*)+0x67>
c00201a1:	e8 9f fc ff ff       	call   c001fe45 <Vm::fpuGetLogE2()>
c00201a6:	eb 90                	jmp    c0020138 <Vm::x87Handler(regs*)+0x67>
c00201a8:	8d 50 40             	lea    edx,[eax+0x40]
c00201ab:	80 fa 07             	cmp    dl,0x7
c00201ae:	77 15                	ja     c00201c5 <Vm::x87Handler(regs*)+0xf4>
c00201b0:	83 ec 0c             	sub    esp,0xc
c00201b3:	2d c0 00 00 00       	sub    eax,0xc0
c00201b8:	50                   	push   eax
c00201b9:	e8 d6 fd ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c00201be:	59                   	pop    ecx
c00201bf:	5e                   	pop    esi
c00201c0:	e9 75 ff ff ff       	jmp    c002013a <Vm::x87Handler(regs*)+0x69>
c00201c5:	8d 50 38             	lea    edx,[eax+0x38]
c00201c8:	80 fa 07             	cmp    dl,0x7
c00201cb:	77 3c                	ja     c0020209 <Vm::x87Handler(regs*)+0x138>
c00201cd:	83 ec 0c             	sub    esp,0xc
c00201d0:	2d c8 00 00 00       	sub    eax,0xc8
c00201d5:	50                   	push   eax
c00201d6:	e8 b9 fd ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c00201db:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00201e2:	89 c6                	mov    esi,eax
c00201e4:	89 d7                	mov    edi,edx
c00201e6:	e8 a9 fd ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c00201eb:	83 c4 0c             	add    esp,0xc
c00201ee:	52                   	push   edx
c00201ef:	50                   	push   eax
c00201f0:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00201f4:	2d c8 00 00 00       	sub    eax,0xc8
c00201f9:	50                   	push   eax
c00201fa:	e8 d8 fd ff ff       	call   c001ffd7 <Vm::fpuSetReg(int, unsigned long long)>
c00201ff:	83 c4 0c             	add    esp,0xc
c0020202:	57                   	push   edi
c0020203:	56                   	push   esi
c0020204:	e9 73 ff ff ff       	jmp    c002017c <Vm::x87Handler(regs*)+0xab>
c0020209:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c002020d:	84 d2                	test   dl,dl
c002020f:	75 0f                	jne    c0020220 <Vm::x87Handler(regs*)+0x14f>
c0020211:	83 ec 0c             	sub    esp,0xc
c0020214:	ff 36                	push   DWORD PTR [esi]
c0020216:	e8 c8 fa ff ff       	call   c001fce3 <Vm::fpu32ToInternal(unsigned int)>
c002021b:	e9 bf 00 00 00       	jmp    c00202df <Vm::x87Handler(regs*)+0x20e>
c0020220:	80 fa 03             	cmp    dl,0x3
c0020223:	75 13                	jne    c0020238 <Vm::x87Handler(regs*)+0x167>
c0020225:	e8 55 fe ff ff       	call   c002007f <Vm::fpuPop()>
c002022a:	55                   	push   ebp
c002022b:	55                   	push   ebp
c002022c:	52                   	push   edx
c002022d:	50                   	push   eax
c002022e:	e8 4c fa ff ff       	call   c001fc7f <Vm::fpuInternalTo32(unsigned long long)>
c0020233:	e9 88 00 00 00       	jmp    c00202c0 <Vm::x87Handler(regs*)+0x1ef>
c0020238:	80 fa 05             	cmp    dl,0x5
c002023b:	75 0e                	jne    c002024b <Vm::x87Handler(regs*)+0x17a>
c002023d:	66 8b 06             	mov    ax,WORD PTR [esi]
c0020240:	66 a3 22 24 03 c0    	mov    ds:0xc0032422,ax
c0020246:	e9 df 00 00 00       	jmp    c002032a <Vm::x87Handler(regs*)+0x259>
c002024b:	31 c0                	xor    eax,eax
c002024d:	80 fa 07             	cmp    dl,0x7
c0020250:	0f 85 dc 08 00 00    	jne    c0020b32 <Vm::x87Handler(regs*)+0xa61>
c0020256:	66 a1 22 24 03 c0    	mov    ax,ds:0xc0032422
c002025c:	66 89 06             	mov    WORD PTR [esi],ax
c002025f:	e9 c6 00 00 00       	jmp    c002032a <Vm::x87Handler(regs*)+0x259>
c0020264:	80 fa d8             	cmp    dl,0xd8
c0020267:	0f 84 c9 00 00 00    	je     c0020336 <Vm::x87Handler(regs*)+0x265>
c002026d:	80 fa dc             	cmp    dl,0xdc
c0020270:	0f 84 0d 02 00 00    	je     c0020483 <Vm::x87Handler(regs*)+0x3b2>
c0020276:	80 fa de             	cmp    dl,0xde
c0020279:	0f 84 cd 02 00 00    	je     c002054c <Vm::x87Handler(regs*)+0x47b>
c002027f:	80 fa dd             	cmp    dl,0xdd
c0020282:	0f 84 5f 04 00 00    	je     c00206e7 <Vm::x87Handler(regs*)+0x616>
c0020288:	80 fa da             	cmp    dl,0xda
c002028b:	0f 84 24 05 00 00    	je     c00207b5 <Vm::x87Handler(regs*)+0x6e4>
c0020291:	80 fa df             	cmp    dl,0xdf
c0020294:	0f 84 68 05 00 00    	je     c0020802 <Vm::x87Handler(regs*)+0x731>
c002029a:	31 c0                	xor    eax,eax
c002029c:	80 fa db             	cmp    dl,0xdb
c002029f:	0f 85 8d 08 00 00    	jne    c0020b32 <Vm::x87Handler(regs*)+0xa61>
c00202a5:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202a9:	80 fa 03             	cmp    dl,0x3
c00202ac:	0f 85 70 06 00 00    	jne    c0020922 <Vm::x87Handler(regs*)+0x851>
c00202b2:	e8 c8 fd ff ff       	call   c002007f <Vm::fpuPop()>
c00202b7:	55                   	push   ebp
c00202b8:	55                   	push   ebp
c00202b9:	52                   	push   edx
c00202ba:	50                   	push   eax
c00202bb:	e8 71 fa ff ff       	call   c001fd31 <Vm::fpuFloatToLong(unsigned long long)>
c00202c0:	83 c4 10             	add    esp,0x10
c00202c3:	89 06                	mov    DWORD PTR [esi],eax
c00202c5:	eb 63                	jmp    c002032a <Vm::x87Handler(regs*)+0x259>
c00202c7:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00202cb:	84 d2                	test   dl,dl
c00202cd:	0f 85 e6 05 00 00    	jne    c00208b9 <Vm::x87Handler(regs*)+0x7e8>
c00202d3:	57                   	push   edi
c00202d4:	57                   	push   edi
c00202d5:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00202d8:	ff 36                	push   DWORD PTR [esi]
c00202da:	e8 49 fa ff ff       	call   c001fd28 <Vm::fpu64ToInternal(unsigned long long)>
c00202df:	5e                   	pop    esi
c00202e0:	5f                   	pop    edi
c00202e1:	52                   	push   edx
c00202e2:	50                   	push   eax
c00202e3:	e8 3a fd ff ff       	call   c0020022 <Vm::fpuPush(unsigned long long)>
c00202e8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00202ec:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00202ef:	e9 51 fe ff ff       	jmp    c0020145 <Vm::x87Handler(regs*)+0x74>
c00202f4:	80 fa 03             	cmp    dl,0x3
c00202f7:	0f 85 d7 06 00 00    	jne    c00209d4 <Vm::x87Handler(regs*)+0x903>
c00202fd:	57                   	push   edi
c00202fe:	57                   	push   edi
c00202ff:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020302:	ff 36                	push   DWORD PTR [esi]
c0020304:	e8 1f fa ff ff       	call   c001fd28 <Vm::fpu64ToInternal(unsigned long long)>
c0020309:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020310:	89 c6                	mov    esi,eax
c0020312:	89 d7                	mov    edi,edx
c0020314:	e8 7b fc ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020319:	57                   	push   edi
c002031a:	56                   	push   esi
c002031b:	52                   	push   edx
c002031c:	50                   	push   eax
c002031d:	e8 95 fb ff ff       	call   c001feb7 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c0020322:	83 c4 20             	add    esp,0x20
c0020325:	e8 55 fd ff ff       	call   c002007f <Vm::fpuPop()>
c002032a:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002032e:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c0020331:	e9 12 fe ff ff       	jmp    c0020148 <Vm::x87Handler(regs*)+0x77>
c0020336:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002033a:	8d 50 40             	lea    edx,[eax+0x40]
c002033d:	80 fa 07             	cmp    dl,0x7
c0020340:	77 29                	ja     c002036b <Vm::x87Handler(regs*)+0x29a>
c0020342:	83 ec 0c             	sub    esp,0xc
c0020345:	2d c0 00 00 00       	sub    eax,0xc0
c002034a:	50                   	push   eax
c002034b:	e8 44 fc ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020350:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020357:	89 c6                	mov    esi,eax
c0020359:	89 d7                	mov    edi,edx
c002035b:	e8 34 fc ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020360:	57                   	push   edi
c0020361:	56                   	push   esi
c0020362:	52                   	push   edx
c0020363:	50                   	push   eax
c0020364:	e8 a1 fb ff ff       	call   c001ff0a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c0020369:	eb 2f                	jmp    c002039a <Vm::x87Handler(regs*)+0x2c9>
c002036b:	8d 50 38             	lea    edx,[eax+0x38]
c002036e:	80 fa 07             	cmp    dl,0x7
c0020371:	77 2f                	ja     c00203a2 <Vm::x87Handler(regs*)+0x2d1>
c0020373:	83 ec 0c             	sub    esp,0xc
c0020376:	2d c8 00 00 00       	sub    eax,0xc8
c002037b:	50                   	push   eax
c002037c:	e8 13 fc ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020381:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020388:	89 c6                	mov    esi,eax
c002038a:	89 d7                	mov    edi,edx
c002038c:	e8 03 fc ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020391:	57                   	push   edi
c0020392:	56                   	push   esi
c0020393:	52                   	push   edx
c0020394:	50                   	push   eax
c0020395:	e8 a9 fb ff ff       	call   c001ff43 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c002039a:	83 c4 1c             	add    esp,0x1c
c002039d:	e9 d8 fd ff ff       	jmp    c002017a <Vm::x87Handler(regs*)+0xa9>
c00203a2:	8d 50 30             	lea    edx,[eax+0x30]
c00203a5:	80 fa 07             	cmp    dl,0x7
c00203a8:	77 0d                	ja     c00203b7 <Vm::x87Handler(regs*)+0x2e6>
c00203aa:	83 ec 0c             	sub    esp,0xc
c00203ad:	2d d0 00 00 00       	sub    eax,0xd0
c00203b2:	e9 99 03 00 00       	jmp    c0020750 <Vm::x87Handler(regs*)+0x67f>
c00203b7:	8d 50 28             	lea    edx,[eax+0x28]
c00203ba:	80 fa 07             	cmp    dl,0x7
c00203bd:	77 0d                	ja     c00203cc <Vm::x87Handler(regs*)+0x2fb>
c00203bf:	83 ec 0c             	sub    esp,0xc
c00203c2:	2d d8 00 00 00       	sub    eax,0xd8
c00203c7:	e9 c0 03 00 00       	jmp    c002078c <Vm::x87Handler(regs*)+0x6bb>
c00203cc:	8d 50 20             	lea    edx,[eax+0x20]
c00203cf:	80 fa 07             	cmp    dl,0x7
c00203d2:	77 1b                	ja     c00203ef <Vm::x87Handler(regs*)+0x31e>
c00203d4:	83 ec 0c             	sub    esp,0xc
c00203d7:	2d e0 00 00 00       	sub    eax,0xe0
c00203dc:	50                   	push   eax
c00203dd:	e8 b2 fb ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c00203e2:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00203e9:	89 c6                	mov    esi,eax
c00203eb:	89 d7                	mov    edi,edx
c00203ed:	eb 22                	jmp    c0020411 <Vm::x87Handler(regs*)+0x340>
c00203ef:	8d 50 18             	lea    edx,[eax+0x18]
c00203f2:	80 fa 07             	cmp    dl,0x7
c00203f5:	77 2d                	ja     c0020424 <Vm::x87Handler(regs*)+0x353>
c00203f7:	83 ec 0c             	sub    esp,0xc
c00203fa:	6a 00                	push   0x0
c00203fc:	e8 93 fb ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020401:	89 c6                	mov    esi,eax
c0020403:	89 d7                	mov    edi,edx
c0020405:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020409:	2d e8 00 00 00       	sub    eax,0xe8
c002040e:	89 04 24             	mov    DWORD PTR [esp],eax
c0020411:	e8 7e fb ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020416:	57                   	push   edi
c0020417:	56                   	push   esi
c0020418:	52                   	push   edx
c0020419:	50                   	push   eax
c002041a:	e8 15 fb ff ff       	call   c001ff34 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002041f:	e9 76 ff ff ff       	jmp    c002039a <Vm::x87Handler(regs*)+0x2c9>
c0020424:	8d 50 10             	lea    edx,[eax+0x10]
c0020427:	80 fa 07             	cmp    dl,0x7
c002042a:	77 1b                	ja     c0020447 <Vm::x87Handler(regs*)+0x376>
c002042c:	83 ec 0c             	sub    esp,0xc
c002042f:	2d f0 00 00 00       	sub    eax,0xf0
c0020434:	50                   	push   eax
c0020435:	e8 5a fb ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c002043a:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020441:	89 c6                	mov    esi,eax
c0020443:	89 d7                	mov    edi,edx
c0020445:	eb 22                	jmp    c0020469 <Vm::x87Handler(regs*)+0x398>
c0020447:	3c f7                	cmp    al,0xf7
c0020449:	0f 86 d1 03 00 00    	jbe    c0020820 <Vm::x87Handler(regs*)+0x74f>
c002044f:	83 ec 0c             	sub    esp,0xc
c0020452:	6a 00                	push   0x0
c0020454:	e8 3b fb ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020459:	89 c6                	mov    esi,eax
c002045b:	89 d7                	mov    edi,edx
c002045d:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020461:	2d f8 00 00 00       	sub    eax,0xf8
c0020466:	89 04 24             	mov    DWORD PTR [esp],eax
c0020469:	e8 26 fb ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c002046e:	57                   	push   edi
c002046f:	56                   	push   esi
c0020470:	52                   	push   edx
c0020471:	50                   	push   eax
c0020472:	e8 eb fa ff ff       	call   c001ff62 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020477:	83 c4 1c             	add    esp,0x1c
c002047a:	52                   	push   edx
c002047b:	50                   	push   eax
c002047c:	6a 00                	push   0x0
c002047e:	e9 51 02 00 00       	jmp    c00206d4 <Vm::x87Handler(regs*)+0x603>
c0020483:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020487:	8d 50 40             	lea    edx,[eax+0x40]
c002048a:	80 fa 07             	cmp    dl,0x7
c002048d:	77 37                	ja     c00204c6 <Vm::x87Handler(regs*)+0x3f5>
c002048f:	83 ec 0c             	sub    esp,0xc
c0020492:	2d c0 00 00 00       	sub    eax,0xc0
c0020497:	50                   	push   eax
c0020498:	e8 f7 fa ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c002049d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204a4:	89 c6                	mov    esi,eax
c00204a6:	89 d7                	mov    edi,edx
c00204a8:	e8 e7 fa ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c00204ad:	57                   	push   edi
c00204ae:	56                   	push   esi
c00204af:	52                   	push   edx
c00204b0:	50                   	push   eax
c00204b1:	e8 54 fa ff ff       	call   c001ff0a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c00204b6:	83 c4 1c             	add    esp,0x1c
c00204b9:	52                   	push   edx
c00204ba:	50                   	push   eax
c00204bb:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204bf:	2d c0 00 00 00       	sub    eax,0xc0
c00204c4:	eb 3d                	jmp    c0020503 <Vm::x87Handler(regs*)+0x432>
c00204c6:	8d 50 38             	lea    edx,[eax+0x38]
c00204c9:	80 fa 07             	cmp    dl,0x7
c00204cc:	77 3b                	ja     c0020509 <Vm::x87Handler(regs*)+0x438>
c00204ce:	83 ec 0c             	sub    esp,0xc
c00204d1:	2d c8 00 00 00       	sub    eax,0xc8
c00204d6:	50                   	push   eax
c00204d7:	e8 b8 fa ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c00204dc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00204e3:	89 c6                	mov    esi,eax
c00204e5:	89 d7                	mov    edi,edx
c00204e7:	e8 a8 fa ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c00204ec:	57                   	push   edi
c00204ed:	56                   	push   esi
c00204ee:	52                   	push   edx
c00204ef:	50                   	push   eax
c00204f0:	e8 4e fa ff ff       	call   c001ff43 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c00204f5:	83 c4 1c             	add    esp,0x1c
c00204f8:	52                   	push   edx
c00204f9:	50                   	push   eax
c00204fa:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00204fe:	2d c8 00 00 00       	sub    eax,0xc8
c0020503:	50                   	push   eax
c0020504:	e9 75 fc ff ff       	jmp    c002017e <Vm::x87Handler(regs*)+0xad>
c0020509:	83 c0 18             	add    eax,0x18
c002050c:	3c 07                	cmp    al,0x7
c002050e:	0f 87 3b 04 00 00    	ja     c002094f <Vm::x87Handler(regs*)+0x87e>
c0020514:	83 ec 0c             	sub    esp,0xc
c0020517:	6a 00                	push   0x0
c0020519:	e8 76 fa ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c002051e:	89 c6                	mov    esi,eax
c0020520:	89 d7                	mov    edi,edx
c0020522:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020526:	2d e8 00 00 00       	sub    eax,0xe8
c002052b:	89 04 24             	mov    DWORD PTR [esp],eax
c002052e:	e8 61 fa ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020533:	57                   	push   edi
c0020534:	56                   	push   esi
c0020535:	52                   	push   edx
c0020536:	50                   	push   eax
c0020537:	e8 f8 f9 ff ff       	call   c001ff34 <Vm::fpuSub(unsigned long long, unsigned long long)>
c002053c:	83 c4 1c             	add    esp,0x1c
c002053f:	52                   	push   edx
c0020540:	50                   	push   eax
c0020541:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020545:	2d e8 00 00 00       	sub    eax,0xe8
c002054a:	eb b7                	jmp    c0020503 <Vm::x87Handler(regs*)+0x432>
c002054c:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020550:	8d 50 40             	lea    edx,[eax+0x40]
c0020553:	80 fa 07             	cmp    dl,0x7
c0020556:	77 3a                	ja     c0020592 <Vm::x87Handler(regs*)+0x4c1>
c0020558:	83 ec 0c             	sub    esp,0xc
c002055b:	2d c0 00 00 00       	sub    eax,0xc0
c0020560:	50                   	push   eax
c0020561:	e8 2e fa ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020566:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002056d:	89 c6                	mov    esi,eax
c002056f:	89 d7                	mov    edi,edx
c0020571:	e8 1e fa ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020576:	57                   	push   edi
c0020577:	56                   	push   esi
c0020578:	52                   	push   edx
c0020579:	50                   	push   eax
c002057a:	e8 8b f9 ff ff       	call   c001ff0a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002057f:	83 c4 1c             	add    esp,0x1c
c0020582:	52                   	push   edx
c0020583:	50                   	push   eax
c0020584:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020588:	2d c0 00 00 00       	sub    eax,0xc0
c002058d:	e9 9e 01 00 00       	jmp    c0020730 <Vm::x87Handler(regs*)+0x65f>
c0020592:	8d 50 20             	lea    edx,[eax+0x20]
c0020595:	80 fa 07             	cmp    dl,0x7
c0020598:	77 3a                	ja     c00205d4 <Vm::x87Handler(regs*)+0x503>
c002059a:	83 ec 0c             	sub    esp,0xc
c002059d:	2d e0 00 00 00       	sub    eax,0xe0
c00205a2:	50                   	push   eax
c00205a3:	e8 ec f9 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c00205a8:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00205af:	89 c6                	mov    esi,eax
c00205b1:	89 d7                	mov    edi,edx
c00205b3:	e8 dc f9 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c00205b8:	57                   	push   edi
c00205b9:	56                   	push   esi
c00205ba:	52                   	push   edx
c00205bb:	50                   	push   eax
c00205bc:	e8 73 f9 ff ff       	call   c001ff34 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00205c1:	83 c4 1c             	add    esp,0x1c
c00205c4:	52                   	push   edx
c00205c5:	50                   	push   eax
c00205c6:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205ca:	2d e0 00 00 00       	sub    eax,0xe0
c00205cf:	e9 5c 01 00 00       	jmp    c0020730 <Vm::x87Handler(regs*)+0x65f>
c00205d4:	8d 50 18             	lea    edx,[eax+0x18]
c00205d7:	80 fa 07             	cmp    dl,0x7
c00205da:	77 3b                	ja     c0020617 <Vm::x87Handler(regs*)+0x546>
c00205dc:	83 ec 0c             	sub    esp,0xc
c00205df:	6a 00                	push   0x0
c00205e1:	e8 ae f9 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c00205e6:	89 c6                	mov    esi,eax
c00205e8:	89 d7                	mov    edi,edx
c00205ea:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00205ee:	2d e8 00 00 00       	sub    eax,0xe8
c00205f3:	89 04 24             	mov    DWORD PTR [esp],eax
c00205f6:	e8 99 f9 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c00205fb:	57                   	push   edi
c00205fc:	56                   	push   esi
c00205fd:	52                   	push   edx
c00205fe:	50                   	push   eax
c00205ff:	e8 30 f9 ff ff       	call   c001ff34 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020604:	83 c4 1c             	add    esp,0x1c
c0020607:	52                   	push   edx
c0020608:	50                   	push   eax
c0020609:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002060d:	2d e8 00 00 00       	sub    eax,0xe8
c0020612:	e9 19 01 00 00       	jmp    c0020730 <Vm::x87Handler(regs*)+0x65f>
c0020617:	8d 50 38             	lea    edx,[eax+0x38]
c002061a:	80 fa 07             	cmp    dl,0x7
c002061d:	77 37                	ja     c0020656 <Vm::x87Handler(regs*)+0x585>
c002061f:	83 ec 0c             	sub    esp,0xc
c0020622:	2d c8 00 00 00       	sub    eax,0xc8
c0020627:	50                   	push   eax
c0020628:	e8 67 f9 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c002062d:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020634:	89 c6                	mov    esi,eax
c0020636:	89 d7                	mov    edi,edx
c0020638:	e8 57 f9 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c002063d:	57                   	push   edi
c002063e:	56                   	push   esi
c002063f:	52                   	push   edx
c0020640:	50                   	push   eax
c0020641:	e8 fd f8 ff ff       	call   c001ff43 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020646:	83 c4 1c             	add    esp,0x1c
c0020649:	52                   	push   edx
c002064a:	50                   	push   eax
c002064b:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002064f:	2d c8 00 00 00       	sub    eax,0xc8
c0020654:	eb 7d                	jmp    c00206d3 <Vm::x87Handler(regs*)+0x602>
c0020656:	3c f7                	cmp    al,0xf7
c0020658:	76 38                	jbe    c0020692 <Vm::x87Handler(regs*)+0x5c1>
c002065a:	83 ec 0c             	sub    esp,0xc
c002065d:	6a 00                	push   0x0
c002065f:	e8 30 f9 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020664:	89 c6                	mov    esi,eax
c0020666:	89 d7                	mov    edi,edx
c0020668:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002066c:	2d f8 00 00 00       	sub    eax,0xf8
c0020671:	89 04 24             	mov    DWORD PTR [esp],eax
c0020674:	e8 1b f9 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020679:	57                   	push   edi
c002067a:	56                   	push   esi
c002067b:	52                   	push   edx
c002067c:	50                   	push   eax
c002067d:	e8 e0 f8 ff ff       	call   c001ff62 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020682:	83 c4 1c             	add    esp,0x1c
c0020685:	52                   	push   edx
c0020686:	50                   	push   eax
c0020687:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002068b:	2d f8 00 00 00       	sub    eax,0xf8
c0020690:	eb 41                	jmp    c00206d3 <Vm::x87Handler(regs*)+0x602>
c0020692:	8d 50 10             	lea    edx,[eax+0x10]
c0020695:	80 fa 07             	cmp    dl,0x7
c0020698:	0f 87 5a 01 00 00    	ja     c00207f8 <Vm::x87Handler(regs*)+0x727>
c002069e:	83 ec 0c             	sub    esp,0xc
c00206a1:	2d f0 00 00 00       	sub    eax,0xf0
c00206a6:	50                   	push   eax
c00206a7:	e8 e8 f8 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c00206ac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00206b3:	89 c6                	mov    esi,eax
c00206b5:	89 d7                	mov    edi,edx
c00206b7:	e8 d8 f8 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c00206bc:	57                   	push   edi
c00206bd:	56                   	push   esi
c00206be:	52                   	push   edx
c00206bf:	50                   	push   eax
c00206c0:	e8 9d f8 ff ff       	call   c001ff62 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c00206c5:	83 c4 1c             	add    esp,0x1c
c00206c8:	52                   	push   edx
c00206c9:	50                   	push   eax
c00206ca:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206ce:	2d f0 00 00 00       	sub    eax,0xf0
c00206d3:	50                   	push   eax
c00206d4:	e8 fe f8 ff ff       	call   c001ffd7 <Vm::fpuSetReg(int, unsigned long long)>
c00206d9:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00206dd:	e8 9d f9 ff ff       	call   c002007f <Vm::fpuPop()>
c00206e2:	e9 5e fa ff ff       	jmp    c0020145 <Vm::x87Handler(regs*)+0x74>
c00206e7:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c00206eb:	8d 50 30             	lea    edx,[eax+0x30]
c00206ee:	80 fa 07             	cmp    dl,0x7
c00206f1:	77 1d                	ja     c0020710 <Vm::x87Handler(regs*)+0x63f>
c00206f3:	83 ec 0c             	sub    esp,0xc
c00206f6:	6a 00                	push   0x0
c00206f8:	e8 97 f8 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c00206fd:	83 c4 0c             	add    esp,0xc
c0020700:	52                   	push   edx
c0020701:	50                   	push   eax
c0020702:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c0020706:	2d d0 00 00 00       	sub    eax,0xd0
c002070b:	e9 f3 fd ff ff       	jmp    c0020503 <Vm::x87Handler(regs*)+0x432>
c0020710:	8d 50 28             	lea    edx,[eax+0x28]
c0020713:	80 fa 07             	cmp    dl,0x7
c0020716:	77 28                	ja     c0020740 <Vm::x87Handler(regs*)+0x66f>
c0020718:	83 ec 0c             	sub    esp,0xc
c002071b:	6a 00                	push   0x0
c002071d:	e8 72 f8 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020722:	83 c4 0c             	add    esp,0xc
c0020725:	52                   	push   edx
c0020726:	50                   	push   eax
c0020727:	0f b6 45 01          	movzx  eax,BYTE PTR [ebp+0x1]
c002072b:	2d d8 00 00 00       	sub    eax,0xd8
c0020730:	50                   	push   eax
c0020731:	e8 a1 f8 ff ff       	call   c001ffd7 <Vm::fpuSetReg(int, unsigned long long)>
c0020736:	e8 44 f9 ff ff       	call   c002007f <Vm::fpuPop()>
c002073b:	e9 01 fa ff ff       	jmp    c0020141 <Vm::x87Handler(regs*)+0x70>
c0020740:	8d 50 20             	lea    edx,[eax+0x20]
c0020743:	80 fa 07             	cmp    dl,0x7
c0020746:	77 30                	ja     c0020778 <Vm::x87Handler(regs*)+0x6a7>
c0020748:	83 ec 0c             	sub    esp,0xc
c002074b:	2d e0 00 00 00       	sub    eax,0xe0
c0020750:	50                   	push   eax
c0020751:	e8 3e f8 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020756:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002075d:	89 c6                	mov    esi,eax
c002075f:	89 d7                	mov    edi,edx
c0020761:	e8 2e f8 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020766:	57                   	push   edi
c0020767:	56                   	push   esi
c0020768:	52                   	push   edx
c0020769:	50                   	push   eax
c002076a:	e8 48 f7 ff ff       	call   c001feb7 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c002076f:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c0020773:	e9 54 02 00 00       	jmp    c00209cc <Vm::x87Handler(regs*)+0x8fb>
c0020778:	8d 50 18             	lea    edx,[eax+0x18]
c002077b:	80 fa 07             	cmp    dl,0x7
c002077e:	0f 87 43 fb ff ff    	ja     c00202c7 <Vm::x87Handler(regs*)+0x1f6>
c0020784:	83 ec 0c             	sub    esp,0xc
c0020787:	2d e8 00 00 00       	sub    eax,0xe8
c002078c:	50                   	push   eax
c002078d:	e8 02 f8 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020792:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020799:	89 c6                	mov    esi,eax
c002079b:	89 d7                	mov    edi,edx
c002079d:	e8 f2 f7 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c00207a2:	57                   	push   edi
c00207a3:	56                   	push   esi
c00207a4:	52                   	push   edx
c00207a5:	50                   	push   eax
c00207a6:	e8 0c f7 ff ff       	call   c001feb7 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00207ab:	83 c4 20             	add    esp,0x20
c00207ae:	e8 cc f8 ff ff       	call   c002007f <Vm::fpuPop()>
c00207b3:	eb 62                	jmp    c0020817 <Vm::x87Handler(regs*)+0x746>
c00207b5:	80 7d 01 e9          	cmp    BYTE PTR [ebp+0x1],0xe9
c00207b9:	0f 85 0f 01 00 00    	jne    c00208ce <Vm::x87Handler(regs*)+0x7fd>
c00207bf:	83 ec 0c             	sub    esp,0xc
c00207c2:	6a 01                	push   0x1
c00207c4:	e8 cb f7 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c00207c9:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00207d0:	89 c6                	mov    esi,eax
c00207d2:	89 d7                	mov    edi,edx
c00207d4:	e8 bb f7 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c00207d9:	57                   	push   edi
c00207da:	56                   	push   esi
c00207db:	52                   	push   edx
c00207dc:	50                   	push   eax
c00207dd:	e8 d5 f6 ff ff       	call   c001feb7 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00207e2:	83 c4 20             	add    esp,0x20
c00207e5:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c00207e9:	e8 91 f8 ff ff       	call   c002007f <Vm::fpuPop()>
c00207ee:	e8 8c f8 ff ff       	call   c002007f <Vm::fpuPop()>
c00207f3:	e9 50 f9 ff ff       	jmp    c0020148 <Vm::x87Handler(regs*)+0x77>
c00207f8:	3c d9                	cmp    al,0xd9
c00207fa:	0f 85 b5 02 00 00    	jne    c0020ab5 <Vm::x87Handler(regs*)+0x9e4>
c0020800:	eb bd                	jmp    c00207bf <Vm::x87Handler(regs*)+0x6ee>
c0020802:	80 7d 01 e0          	cmp    BYTE PTR [ebp+0x1],0xe0
c0020806:	0f 85 ea 02 00 00    	jne    c0020af6 <Vm::x87Handler(regs*)+0xa25>
c002080c:	0f b7 05 20 24 03 c0 	movzx  eax,WORD PTR ds:0xc0032420
c0020813:	66 89 43 2c          	mov    WORD PTR [ebx+0x2c],ax
c0020817:	83 43 38 02          	add    DWORD PTR [ebx+0x38],0x2
c002081b:	e9 28 f9 ff ff       	jmp    c0020148 <Vm::x87Handler(regs*)+0x77>
c0020820:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020824:	84 d2                	test   dl,dl
c0020826:	75 0f                	jne    c0020837 <Vm::x87Handler(regs*)+0x766>
c0020828:	83 ec 0c             	sub    esp,0xc
c002082b:	ff 36                	push   DWORD PTR [esi]
c002082d:	e8 b1 f4 ff ff       	call   c001fce3 <Vm::fpu32ToInternal(unsigned int)>
c0020832:	e9 2c 01 00 00       	jmp    c0020963 <Vm::x87Handler(regs*)+0x892>
c0020837:	80 fa 01             	cmp    dl,0x1
c002083a:	75 0f                	jne    c002084b <Vm::x87Handler(regs*)+0x77a>
c002083c:	83 ec 0c             	sub    esp,0xc
c002083f:	ff 36                	push   DWORD PTR [esi]
c0020841:	e8 9d f4 ff ff       	call   c001fce3 <Vm::fpu32ToInternal(unsigned int)>
c0020846:	e9 81 02 00 00       	jmp    c0020acc <Vm::x87Handler(regs*)+0x9fb>
c002084b:	80 fa 04             	cmp    dl,0x4
c002084e:	75 0f                	jne    c002085f <Vm::x87Handler(regs*)+0x78e>
c0020850:	83 ec 0c             	sub    esp,0xc
c0020853:	ff 36                	push   DWORD PTR [esi]
c0020855:	e8 89 f4 ff ff       	call   c001fce3 <Vm::fpu32ToInternal(unsigned int)>
c002085a:	e9 86 01 00 00       	jmp    c00209e5 <Vm::x87Handler(regs*)+0x914>
c002085f:	80 fa 05             	cmp    dl,0x5
c0020862:	75 1b                	jne    c002087f <Vm::x87Handler(regs*)+0x7ae>
c0020864:	83 ec 0c             	sub    esp,0xc
c0020867:	6a 00                	push   0x0
c0020869:	e8 26 f7 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c002086e:	89 c7                	mov    edi,eax
c0020870:	89 d5                	mov    ebp,edx
c0020872:	58                   	pop    eax
c0020873:	ff 36                	push   DWORD PTR [esi]
c0020875:	e8 69 f4 ff ff       	call   c001fce3 <Vm::fpu32ToInternal(unsigned int)>
c002087a:	e9 a3 01 00 00       	jmp    c0020a22 <Vm::x87Handler(regs*)+0x951>
c002087f:	80 fa 06             	cmp    dl,0x6
c0020882:	75 0f                	jne    c0020893 <Vm::x87Handler(regs*)+0x7c2>
c0020884:	83 ec 0c             	sub    esp,0xc
c0020887:	ff 36                	push   DWORD PTR [esi]
c0020889:	e8 55 f4 ff ff       	call   c001fce3 <Vm::fpu32ToInternal(unsigned int)>
c002088e:	e9 ae 01 00 00       	jmp    c0020a41 <Vm::x87Handler(regs*)+0x970>
c0020893:	31 c0                	xor    eax,eax
c0020895:	80 fa 07             	cmp    dl,0x7
c0020898:	0f 85 94 02 00 00    	jne    c0020b32 <Vm::x87Handler(regs*)+0xa61>
c002089e:	83 ec 0c             	sub    esp,0xc
c00208a1:	6a 00                	push   0x0
c00208a3:	e8 ec f6 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c00208a8:	89 c7                	mov    edi,eax
c00208aa:	89 d5                	mov    ebp,edx
c00208ac:	58                   	pop    eax
c00208ad:	ff 36                	push   DWORD PTR [esi]
c00208af:	e8 2f f4 ff ff       	call   c001fce3 <Vm::fpu32ToInternal(unsigned int)>
c00208b4:	e9 cb 01 00 00       	jmp    c0020a84 <Vm::x87Handler(regs*)+0x9b3>
c00208b9:	80 fa 03             	cmp    dl,0x3
c00208bc:	0f 85 d3 01 00 00    	jne    c0020a95 <Vm::x87Handler(regs*)+0x9c4>
c00208c2:	e8 b8 f7 ff ff       	call   c002007f <Vm::fpuPop()>
c00208c7:	51                   	push   ecx
c00208c8:	51                   	push   ecx
c00208c9:	e9 de 01 00 00       	jmp    c0020aac <Vm::x87Handler(regs*)+0x9db>
c00208ce:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c00208d2:	80 fa 01             	cmp    dl,0x1
c00208d5:	75 09                	jne    c00208e0 <Vm::x87Handler(regs*)+0x80f>
c00208d7:	57                   	push   edi
c00208d8:	57                   	push   edi
c00208d9:	8b 06                	mov    eax,DWORD PTR [esi]
c00208db:	e9 e3 01 00 00       	jmp    c0020ac3 <Vm::x87Handler(regs*)+0x9f2>
c00208e0:	80 fa 04             	cmp    dl,0x4
c00208e3:	75 12                	jne    c00208f7 <Vm::x87Handler(regs*)+0x826>
c00208e5:	31 d2                	xor    edx,edx
c00208e7:	51                   	push   ecx
c00208e8:	51                   	push   ecx
c00208e9:	8b 06                	mov    eax,DWORD PTR [esi]
c00208eb:	52                   	push   edx
c00208ec:	50                   	push   eax
c00208ed:	e8 d0 f4 ff ff       	call   c001fdc2 <Vm::fpuLongToFloat(long long)>
c00208f2:	e9 ee 00 00 00       	jmp    c00209e5 <Vm::x87Handler(regs*)+0x914>
c00208f7:	31 c0                	xor    eax,eax
c00208f9:	80 fa 07             	cmp    dl,0x7
c00208fc:	0f 85 30 02 00 00    	jne    c0020b32 <Vm::x87Handler(regs*)+0xa61>
c0020902:	83 ec 0c             	sub    esp,0xc
c0020905:	6a 00                	push   0x0
c0020907:	e8 88 f6 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c002090c:	89 c7                	mov    edi,eax
c002090e:	89 d5                	mov    ebp,edx
c0020910:	58                   	pop    eax
c0020911:	8b 06                	mov    eax,DWORD PTR [esi]
c0020913:	5a                   	pop    edx
c0020914:	31 d2                	xor    edx,edx
c0020916:	52                   	push   edx
c0020917:	50                   	push   eax
c0020918:	e8 a5 f4 ff ff       	call   c001fdc2 <Vm::fpuLongToFloat(long long)>
c002091d:	e9 62 01 00 00       	jmp    c0020a84 <Vm::x87Handler(regs*)+0x9b3>
c0020922:	84 d2                	test   dl,dl
c0020924:	75 0d                	jne    c0020933 <Vm::x87Handler(regs*)+0x862>
c0020926:	31 d2                	xor    edx,edx
c0020928:	55                   	push   ebp
c0020929:	55                   	push   ebp
c002092a:	8b 06                	mov    eax,DWORD PTR [esi]
c002092c:	52                   	push   edx
c002092d:	50                   	push   eax
c002092e:	e9 d3 01 00 00       	jmp    c0020b06 <Vm::x87Handler(regs*)+0xa35>
c0020933:	31 c0                	xor    eax,eax
c0020935:	80 fa 02             	cmp    dl,0x2
c0020938:	0f 85 f4 01 00 00    	jne    c0020b32 <Vm::x87Handler(regs*)+0xa61>
c002093e:	83 ec 0c             	sub    esp,0xc
c0020941:	6a 00                	push   0x0
c0020943:	e8 4c f6 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020948:	59                   	pop    ecx
c0020949:	5f                   	pop    edi
c002094a:	e9 6a f9 ff ff       	jmp    c00202b9 <Vm::x87Handler(regs*)+0x1e8>
c002094f:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020953:	84 d2                	test   dl,dl
c0020955:	75 2a                	jne    c0020981 <Vm::x87Handler(regs*)+0x8b0>
c0020957:	50                   	push   eax
c0020958:	50                   	push   eax
c0020959:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002095c:	ff 36                	push   DWORD PTR [esi]
c002095e:	e8 c5 f3 ff ff       	call   c001fd28 <Vm::fpu64ToInternal(unsigned long long)>
c0020963:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c002096a:	89 c6                	mov    esi,eax
c002096c:	89 d7                	mov    edi,edx
c002096e:	e8 21 f6 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020973:	57                   	push   edi
c0020974:	56                   	push   esi
c0020975:	52                   	push   edx
c0020976:	50                   	push   eax
c0020977:	e8 8e f5 ff ff       	call   c001ff0a <Vm::fpuAdd(unsigned long long, unsigned long long)>
c002097c:	e9 64 01 00 00       	jmp    c0020ae5 <Vm::x87Handler(regs*)+0xa14>
c0020981:	80 fa 01             	cmp    dl,0x1
c0020984:	75 11                	jne    c0020997 <Vm::x87Handler(regs*)+0x8c6>
c0020986:	50                   	push   eax
c0020987:	50                   	push   eax
c0020988:	ff 76 04             	push   DWORD PTR [esi+0x4]
c002098b:	ff 36                	push   DWORD PTR [esi]
c002098d:	e8 96 f3 ff ff       	call   c001fd28 <Vm::fpu64ToInternal(unsigned long long)>
c0020992:	e9 35 01 00 00       	jmp    c0020acc <Vm::x87Handler(regs*)+0x9fb>
c0020997:	80 fa 02             	cmp    dl,0x2
c002099a:	0f 85 54 f9 ff ff    	jne    c00202f4 <Vm::x87Handler(regs*)+0x223>
c00209a0:	55                   	push   ebp
c00209a1:	55                   	push   ebp
c00209a2:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00209a5:	ff 36                	push   DWORD PTR [esi]
c00209a7:	e8 7c f3 ff ff       	call   c001fd28 <Vm::fpu64ToInternal(unsigned long long)>
c00209ac:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00209b3:	89 c6                	mov    esi,eax
c00209b5:	89 d7                	mov    edi,edx
c00209b7:	e8 d8 f5 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c00209bc:	57                   	push   edi
c00209bd:	56                   	push   esi
c00209be:	52                   	push   edx
c00209bf:	50                   	push   eax
c00209c0:	e8 f2 f4 ff ff       	call   c001feb7 <Vm::fpuUnorderedCompare(unsigned long long, unsigned long long)>
c00209c5:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c00209c9:	01 43 38             	add    DWORD PTR [ebx+0x38],eax
c00209cc:	83 c4 20             	add    esp,0x20
c00209cf:	e9 74 f7 ff ff       	jmp    c0020148 <Vm::x87Handler(regs*)+0x77>
c00209d4:	80 fa 04             	cmp    dl,0x4
c00209d7:	75 2a                	jne    c0020a03 <Vm::x87Handler(regs*)+0x932>
c00209d9:	51                   	push   ecx
c00209da:	51                   	push   ecx
c00209db:	ff 76 04             	push   DWORD PTR [esi+0x4]
c00209de:	ff 36                	push   DWORD PTR [esi]
c00209e0:	e8 43 f3 ff ff       	call   c001fd28 <Vm::fpu64ToInternal(unsigned long long)>
c00209e5:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c00209ec:	89 c6                	mov    esi,eax
c00209ee:	89 d7                	mov    edi,edx
c00209f0:	e8 9f f5 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c00209f5:	57                   	push   edi
c00209f6:	56                   	push   esi
c00209f7:	52                   	push   edx
c00209f8:	50                   	push   eax
c00209f9:	e8 36 f5 ff ff       	call   c001ff34 <Vm::fpuSub(unsigned long long, unsigned long long)>
c00209fe:	e9 e2 00 00 00       	jmp    c0020ae5 <Vm::x87Handler(regs*)+0xa14>
c0020a03:	80 fa 05             	cmp    dl,0x5
c0020a06:	75 28                	jne    c0020a30 <Vm::x87Handler(regs*)+0x95f>
c0020a08:	83 ec 0c             	sub    esp,0xc
c0020a0b:	6a 00                	push   0x0
c0020a0d:	e8 82 f5 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020a12:	89 c7                	mov    edi,eax
c0020a14:	89 d5                	mov    ebp,edx
c0020a16:	58                   	pop    eax
c0020a17:	5a                   	pop    edx
c0020a18:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a1b:	ff 36                	push   DWORD PTR [esi]
c0020a1d:	e8 06 f3 ff ff       	call   c001fd28 <Vm::fpu64ToInternal(unsigned long long)>
c0020a22:	83 c4 10             	add    esp,0x10
c0020a25:	55                   	push   ebp
c0020a26:	57                   	push   edi
c0020a27:	52                   	push   edx
c0020a28:	50                   	push   eax
c0020a29:	e8 06 f5 ff ff       	call   c001ff34 <Vm::fpuSub(unsigned long long, unsigned long long)>
c0020a2e:	eb 60                	jmp    c0020a90 <Vm::x87Handler(regs*)+0x9bf>
c0020a30:	80 fa 06             	cmp    dl,0x6
c0020a33:	75 2a                	jne    c0020a5f <Vm::x87Handler(regs*)+0x98e>
c0020a35:	51                   	push   ecx
c0020a36:	51                   	push   ecx
c0020a37:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a3a:	ff 36                	push   DWORD PTR [esi]
c0020a3c:	e8 e7 f2 ff ff       	call   c001fd28 <Vm::fpu64ToInternal(unsigned long long)>
c0020a41:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020a48:	89 c6                	mov    esi,eax
c0020a4a:	89 d7                	mov    edi,edx
c0020a4c:	e8 43 f5 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020a51:	57                   	push   edi
c0020a52:	56                   	push   esi
c0020a53:	52                   	push   edx
c0020a54:	50                   	push   eax
c0020a55:	e8 08 f5 ff ff       	call   c001ff62 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020a5a:	e9 86 00 00 00       	jmp    c0020ae5 <Vm::x87Handler(regs*)+0xa14>
c0020a5f:	31 c0                	xor    eax,eax
c0020a61:	80 fa 07             	cmp    dl,0x7
c0020a64:	0f 85 c8 00 00 00    	jne    c0020b32 <Vm::x87Handler(regs*)+0xa61>
c0020a6a:	83 ec 0c             	sub    esp,0xc
c0020a6d:	6a 00                	push   0x0
c0020a6f:	e8 20 f5 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020a74:	89 c7                	mov    edi,eax
c0020a76:	89 d5                	mov    ebp,edx
c0020a78:	58                   	pop    eax
c0020a79:	5a                   	pop    edx
c0020a7a:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020a7d:	ff 36                	push   DWORD PTR [esi]
c0020a7f:	e8 a4 f2 ff ff       	call   c001fd28 <Vm::fpu64ToInternal(unsigned long long)>
c0020a84:	83 c4 10             	add    esp,0x10
c0020a87:	55                   	push   ebp
c0020a88:	57                   	push   edi
c0020a89:	52                   	push   edx
c0020a8a:	50                   	push   eax
c0020a8b:	e8 d2 f4 ff ff       	call   c001ff62 <Vm::fpuDivide(unsigned long long, unsigned long long)>
c0020a90:	83 c4 0c             	add    esp,0xc
c0020a93:	eb 53                	jmp    c0020ae8 <Vm::x87Handler(regs*)+0xa17>
c0020a95:	31 c0                	xor    eax,eax
c0020a97:	80 fa 02             	cmp    dl,0x2
c0020a9a:	0f 85 92 00 00 00    	jne    c0020b32 <Vm::x87Handler(regs*)+0xa61>
c0020aa0:	83 ec 0c             	sub    esp,0xc
c0020aa3:	6a 00                	push   0x0
c0020aa5:	e8 ea f4 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020aaa:	59                   	pop    ecx
c0020aab:	5f                   	pop    edi
c0020aac:	52                   	push   edx
c0020aad:	50                   	push   eax
c0020aae:	e8 27 f2 ff ff       	call   c001fcda <Vm::fpuInternalTo64(unsigned long long)>
c0020ab3:	eb 70                	jmp    c0020b25 <Vm::x87Handler(regs*)+0xa54>
c0020ab5:	31 c0                	xor    eax,eax
c0020ab7:	80 7c 24 0b 01       	cmp    BYTE PTR [esp+0xb],0x1
c0020abc:	75 74                	jne    c0020b32 <Vm::x87Handler(regs*)+0xa61>
c0020abe:	50                   	push   eax
c0020abf:	50                   	push   eax
c0020ac0:	0f b7 06             	movzx  eax,WORD PTR [esi]
c0020ac3:	31 d2                	xor    edx,edx
c0020ac5:	52                   	push   edx
c0020ac6:	50                   	push   eax
c0020ac7:	e8 f6 f2 ff ff       	call   c001fdc2 <Vm::fpuLongToFloat(long long)>
c0020acc:	c7 04 24 00 00 00 00 	mov    DWORD PTR [esp],0x0
c0020ad3:	89 c6                	mov    esi,eax
c0020ad5:	89 d7                	mov    edi,edx
c0020ad7:	e8 b8 f4 ff ff       	call   c001ff94 <Vm::fpuGetReg(int)>
c0020adc:	57                   	push   edi
c0020add:	56                   	push   esi
c0020ade:	52                   	push   edx
c0020adf:	50                   	push   eax
c0020ae0:	e8 5e f4 ff ff       	call   c001ff43 <Vm::fpuMultiply(unsigned long long, unsigned long long)>
c0020ae5:	83 c4 1c             	add    esp,0x1c
c0020ae8:	52                   	push   edx
c0020ae9:	50                   	push   eax
c0020aea:	6a 00                	push   0x0
c0020aec:	e8 e6 f4 ff ff       	call   c001ffd7 <Vm::fpuSetReg(int, unsigned long long)>
c0020af1:	e9 f2 f7 ff ff       	jmp    c00202e8 <Vm::x87Handler(regs*)+0x217>
c0020af6:	8a 54 24 0b          	mov    dl,BYTE PTR [esp+0xb]
c0020afa:	80 fa 05             	cmp    dl,0x5
c0020afd:	75 11                	jne    c0020b10 <Vm::x87Handler(regs*)+0xa3f>
c0020aff:	55                   	push   ebp
c0020b00:	55                   	push   ebp
c0020b01:	ff 76 04             	push   DWORD PTR [esi+0x4]
c0020b04:	ff 36                	push   DWORD PTR [esi]
c0020b06:	e8 81 f2 ff ff       	call   c001fd8c <Vm::fpuULongToFloat(unsigned long long)>
c0020b0b:	e9 cf f7 ff ff       	jmp    c00202df <Vm::x87Handler(regs*)+0x20e>
c0020b10:	31 c0                	xor    eax,eax
c0020b12:	80 fa 07             	cmp    dl,0x7
c0020b15:	75 1b                	jne    c0020b32 <Vm::x87Handler(regs*)+0xa61>
c0020b17:	e8 63 f5 ff ff       	call   c002007f <Vm::fpuPop()>
c0020b1c:	51                   	push   ecx
c0020b1d:	51                   	push   ecx
c0020b1e:	52                   	push   edx
c0020b1f:	50                   	push   eax
c0020b20:	e8 0c f2 ff ff       	call   c001fd31 <Vm::fpuFloatToLong(unsigned long long)>
c0020b25:	83 c4 10             	add    esp,0x10
c0020b28:	89 06                	mov    DWORD PTR [esi],eax
c0020b2a:	89 56 04             	mov    DWORD PTR [esi+0x4],edx
c0020b2d:	e9 f8 f7 ff ff       	jmp    c002032a <Vm::x87Handler(regs*)+0x259>
c0020b32:	83 c4 1c             	add    esp,0x1c
c0020b35:	5b                   	pop    ebx
c0020b36:	5e                   	pop    esi
c0020b37:	5f                   	pop    edi
c0020b38:	5d                   	pop    ebp
c0020b39:	c3                   	ret    

c0020b3a <__static_initialization_and_destruction_0(int, int)>:
c0020b3a:	83 ec 0c             	sub    esp,0xc
c0020b3d:	83 7c 24 10 01       	cmp    DWORD PTR [esp+0x10],0x1
c0020b42:	75 1a                	jne    c0020b5e <__static_initialization_and_destruction_0(int, int)+0x24>
c0020b44:	81 7c 24 14 ff ff 00 00 	cmp    DWORD PTR [esp+0x14],0xffff
c0020b4c:	75 10                	jne    c0020b5e <__static_initialization_and_destruction_0(int, int)+0x24>
c0020b4e:	83 ec 0c             	sub    esp,0xc
c0020b51:	68 20 24 03 c0       	push   0xc0032420
c0020b56:	e8 b1 8a 00 00       	call   c002960c <Vm::_FPUState::_FPUState()>
c0020b5b:	83 c4 10             	add    esp,0x10
c0020b5e:	90                   	nop
c0020b5f:	83 c4 0c             	add    esp,0xc
c0020b62:	c3                   	ret    

c0020b63 <_GLOBAL__sub_I__ZN2Vm8fpuStateE>:
c0020b63:	83 ec 0c             	sub    esp,0xc
c0020b66:	83 ec 08             	sub    esp,0x8
c0020b69:	68 ff ff 00 00       	push   0xffff
c0020b6e:	6a 01                	push   0x1
c0020b70:	e8 c5 ff ff ff       	call   c0020b3a <__static_initialization_and_destruction_0(int, int)>
c0020b75:	83 c4 10             	add    esp,0x10
c0020b78:	83 c4 0c             	add    esp,0xc
c0020b7b:	c3                   	ret    

c0020b7c <FAT::getName()>:
c0020b7c:	b8 0c d2 02 c0       	mov    eax,0xc002d20c
c0020b81:	c3                   	ret    

c0020b82 <FAT::tell(void*, unsigned long long*)>:
c0020b82:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020b87:	75 06                	jne    c0020b8f <FAT::tell(void*, unsigned long long*)+0xd>
c0020b89:	b8 04 00 00 00       	mov    eax,0x4
c0020b8e:	c3                   	ret    
c0020b8f:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020b94:	75 06                	jne    c0020b9c <FAT::tell(void*, unsigned long long*)+0x1a>
c0020b96:	b8 04 00 00 00       	mov    eax,0x4
c0020b9b:	c3                   	ret    
c0020b9c:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020ba0:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
c0020ba3:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
c0020ba6:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020baa:	89 01                	mov    DWORD PTR [ecx],eax
c0020bac:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020baf:	b8 00 00 00 00       	mov    eax,0x0
c0020bb4:	c3                   	ret    
c0020bb5:	90                   	nop

c0020bb6 <FAT::stat(void*, unsigned long long*)>:
c0020bb6:	83 7c 24 08 00       	cmp    DWORD PTR [esp+0x8],0x0
c0020bbb:	75 06                	jne    c0020bc3 <FAT::stat(void*, unsigned long long*)+0xd>
c0020bbd:	b8 04 00 00 00       	mov    eax,0x4
c0020bc2:	c3                   	ret    
c0020bc3:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020bc8:	75 06                	jne    c0020bd0 <FAT::stat(void*, unsigned long long*)+0x1a>
c0020bca:	b8 04 00 00 00       	mov    eax,0x4
c0020bcf:	c3                   	ret    
c0020bd0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0020bd4:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
c0020bd7:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
c0020bda:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0020bde:	89 01                	mov    DWORD PTR [ecx],eax
c0020be0:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c0020be3:	b8 00 00 00 00       	mov    eax,0x0
c0020be8:	c3                   	ret    
c0020be9:	90                   	nop

c0020bea <FAT::~FAT()>:
c0020bea:	83 ec 0c             	sub    esp,0xc
c0020bed:	ba 9c d2 02 c0       	mov    edx,0xc002d29c
c0020bf2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bf6:	89 10                	mov    DWORD PTR [eax],edx
c0020bf8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0020bfc:	83 ec 0c             	sub    esp,0xc
c0020bff:	50                   	push   eax
c0020c00:	e8 71 25 ff ff       	call   c0013176 <Filesystem::~Filesystem()>
c0020c05:	83 c4 10             	add    esp,0x10
c0020c08:	90                   	nop
c0020c09:	83 c4 0c             	add    esp,0xc
c0020c0c:	c3                   	ret    
c0020c0d:	90                   	nop

c0020c0e <FAT::~FAT()>:
c0020c0e:	83 ec 0c             	sub    esp,0xc
c0020c11:	83 ec 0c             	sub    esp,0xc
c0020c14:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c18:	e8 cd ff ff ff       	call   c0020bea <FAT::~FAT()>
c0020c1d:	83 c4 10             	add    esp,0x10
c0020c20:	83 ec 08             	sub    esp,0x8
c0020c23:	6a 08                	push   0x8
c0020c25:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020c29:	e8 39 21 ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0020c2e:	83 c4 10             	add    esp,0x10
c0020c31:	83 c4 0c             	add    esp,0xc
c0020c34:	c3                   	ret    
c0020c35:	90                   	nop

c0020c36 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)>:
c0020c36:	83 ec 1c             	sub    esp,0x1c
c0020c39:	66 c7 44 24 09 30 3a 	mov    WORD PTR [esp+0x9],0x3a30
c0020c40:	c6 44 24 0b 00       	mov    BYTE PTR [esp+0xb],0x0
c0020c45:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c49:	8b 04 85 a0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb60]
c0020c50:	83 f8 ff             	cmp    eax,0xffffffff
c0020c53:	75 34                	jne    c0020c89 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x53>
c0020c55:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020c59:	88 c2                	mov    dl,al
c0020c5b:	a1 80 24 03 c0       	mov    eax,ds:0xc0032480
c0020c60:	01 d0                	add    eax,edx
c0020c62:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020c66:	8b 15 80 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032480
c0020c6c:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c70:	89 14 85 a0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb60],edx
c0020c77:	a1 80 24 03 c0       	mov    eax,ds:0xc0032480
c0020c7c:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0020c80:	89 14 85 20 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdae0],edx
c0020c87:	eb 17                	jmp    c0020ca0 <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x6a>
c0020c89:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0020c8d:	88 c2                	mov    dl,al
c0020c8f:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0020c93:	8b 04 85 a0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb60]
c0020c9a:	01 d0                	add    eax,edx
c0020c9c:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0020ca0:	83 ec 04             	sub    esp,0x4
c0020ca3:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020ca7:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c0020cab:	8d 44 24 15          	lea    eax,[esp+0x15]
c0020caf:	50                   	push   eax
c0020cb0:	e8 64 60 fe ff       	call   c0006d19 <f_getlabel>
c0020cb5:	83 c4 10             	add    esp,0x10
c0020cb8:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020cbc:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0020cc1:	75 07                	jne    c0020cca <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x94>
c0020cc3:	b8 00 00 00 00       	mov    eax,0x0
c0020cc8:	eb 05                	jmp    c0020ccf <FAT::getlabel(LogicalDisk*, int, char*, unsigned int*)+0x99>
c0020cca:	b8 01 00 00 00       	mov    eax,0x1
c0020ccf:	83 c4 1c             	add    esp,0x1c
c0020cd2:	c3                   	ret    
c0020cd3:	90                   	nop

c0020cd4 <FAT::setlabel(LogicalDisk*, int, char*)>:
c0020cd4:	57                   	push   edi
c0020cd5:	83 ec 58             	sub    esp,0x58
c0020cd8:	c7 44 24 0c 30 3a 00 00 	mov    DWORD PTR [esp+0xc],0x3a30
c0020ce0:	8d 54 24 10          	lea    edx,[esp+0x10]
c0020ce4:	b9 0f 00 00 00       	mov    ecx,0xf
c0020ce9:	b8 00 00 00 00       	mov    eax,0x0
c0020cee:	fc                   	cld    
c0020cef:	89 d7                	mov    edi,edx
c0020cf1:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0020cf3:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020cf7:	8b 04 85 a0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb60]
c0020cfe:	83 f8 ff             	cmp    eax,0xffffffff
c0020d01:	75 34                	jne    c0020d37 <FAT::setlabel(LogicalDisk*, int, char*)+0x63>
c0020d03:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020d07:	88 c2                	mov    dl,al
c0020d09:	a1 80 24 03 c0       	mov    eax,ds:0xc0032480
c0020d0e:	01 d0                	add    eax,edx
c0020d10:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d14:	8b 15 80 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032480
c0020d1a:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020d1e:	89 14 85 a0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb60],edx
c0020d25:	a1 80 24 03 c0       	mov    eax,ds:0xc0032480
c0020d2a:	8b 54 24 68          	mov    edx,DWORD PTR [esp+0x68]
c0020d2e:	89 14 85 20 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdae0],edx
c0020d35:	eb 17                	jmp    c0020d4e <FAT::setlabel(LogicalDisk*, int, char*)+0x7a>
c0020d37:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c0020d3b:	88 c2                	mov    dl,al
c0020d3d:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c0020d41:	8b 04 85 a0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb60]
c0020d48:	01 d0                	add    eax,edx
c0020d4a:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0020d4e:	83 ec 08             	sub    esp,0x8
c0020d51:	ff 74 24 74          	push   DWORD PTR [esp+0x74]
c0020d55:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d59:	50                   	push   eax
c0020d5a:	e8 09 fc fd ff       	call   c0000968 <strcat>
c0020d5f:	83 c4 10             	add    esp,0x10
c0020d62:	83 ec 0c             	sub    esp,0xc
c0020d65:	8d 44 24 18          	lea    eax,[esp+0x18]
c0020d69:	50                   	push   eax
c0020d6a:	e8 98 61 fe ff       	call   c0006f07 <f_setlabel>
c0020d6f:	83 c4 10             	add    esp,0x10
c0020d72:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0020d76:	83 7c 24 4c 00       	cmp    DWORD PTR [esp+0x4c],0x0
c0020d7b:	75 07                	jne    c0020d84 <FAT::setlabel(LogicalDisk*, int, char*)+0xb0>
c0020d7d:	b8 00 00 00 00       	mov    eax,0x0
c0020d82:	eb 05                	jmp    c0020d89 <FAT::setlabel(LogicalDisk*, int, char*)+0xb5>
c0020d84:	b8 01 00 00 00       	mov    eax,0x1
c0020d89:	83 c4 58             	add    esp,0x58
c0020d8c:	5f                   	pop    edi
c0020d8d:	c3                   	ret    

c0020d8e <FAT::format(LogicalDisk*, int, char const*, int)>:
c0020d8e:	83 ec 2c             	sub    esp,0x2c
c0020d91:	c7 44 24 1c 00 00 00 00 	mov    DWORD PTR [esp+0x1c],0x0
c0020d99:	83 ec 08             	sub    esp,0x8
c0020d9c:	68 30 d2 02 c0       	push   0xc002d230
c0020da1:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020da5:	e8 0a fb fd ff       	call   c00008b4 <strcmp>
c0020daa:	83 c4 10             	add    esp,0x10
c0020dad:	85 c0                	test   eax,eax
c0020daf:	0f 94 c0             	sete   al
c0020db2:	84 c0                	test   al,al
c0020db4:	74 0d                	je     c0020dc3 <FAT::format(LogicalDisk*, int, char const*, int)+0x35>
c0020db6:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020dbe:	e9 a6 00 00 00       	jmp    c0020e69 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020dc3:	83 ec 08             	sub    esp,0x8
c0020dc6:	68 22 d2 02 c0       	push   0xc002d222
c0020dcb:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020dcf:	e8 e0 fa fd ff       	call   c00008b4 <strcmp>
c0020dd4:	83 c4 10             	add    esp,0x10
c0020dd7:	85 c0                	test   eax,eax
c0020dd9:	0f 94 c0             	sete   al
c0020ddc:	84 c0                	test   al,al
c0020dde:	74 0a                	je     c0020dea <FAT::format(LogicalDisk*, int, char const*, int)+0x5c>
c0020de0:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020de8:	eb 7f                	jmp    c0020e69 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020dea:	83 ec 08             	sub    esp,0x8
c0020ded:	68 28 d2 02 c0       	push   0xc002d228
c0020df2:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020df6:	e8 b9 fa fd ff       	call   c00008b4 <strcmp>
c0020dfb:	83 c4 10             	add    esp,0x10
c0020dfe:	85 c0                	test   eax,eax
c0020e00:	0f 94 c0             	sete   al
c0020e03:	84 c0                	test   al,al
c0020e05:	74 0a                	je     c0020e11 <FAT::format(LogicalDisk*, int, char const*, int)+0x83>
c0020e07:	c7 44 24 1c 01 00 00 00 	mov    DWORD PTR [esp+0x1c],0x1
c0020e0f:	eb 58                	jmp    c0020e69 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e11:	83 ec 08             	sub    esp,0x8
c0020e14:	68 6c 9d 02 c0       	push   0xc0029d6c
c0020e19:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020e1d:	e8 92 fa fd ff       	call   c00008b4 <strcmp>
c0020e22:	83 c4 10             	add    esp,0x10
c0020e25:	85 c0                	test   eax,eax
c0020e27:	0f 94 c0             	sete   al
c0020e2a:	84 c0                	test   al,al
c0020e2c:	74 0a                	je     c0020e38 <FAT::format(LogicalDisk*, int, char const*, int)+0xaa>
c0020e2e:	c7 44 24 1c 02 00 00 00 	mov    DWORD PTR [esp+0x1c],0x2
c0020e36:	eb 31                	jmp    c0020e69 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e38:	83 ec 08             	sub    esp,0x8
c0020e3b:	68 2e d2 02 c0       	push   0xc002d22e
c0020e40:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0020e44:	e8 6b fa fd ff       	call   c00008b4 <strcmp>
c0020e49:	83 c4 10             	add    esp,0x10
c0020e4c:	85 c0                	test   eax,eax
c0020e4e:	0f 94 c0             	sete   al
c0020e51:	84 c0                	test   al,al
c0020e53:	74 0a                	je     c0020e5f <FAT::format(LogicalDisk*, int, char const*, int)+0xd1>
c0020e55:	c7 44 24 1c 04 00 00 00 	mov    DWORD PTR [esp+0x1c],0x4
c0020e5d:	eb 0a                	jmp    c0020e69 <FAT::format(LogicalDisk*, int, char const*, int)+0xdb>
c0020e5f:	b8 08 00 00 00       	mov    eax,0x8
c0020e64:	e9 04 01 00 00       	jmp    c0020f6d <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020e69:	66 c7 44 24 11 30 3a 	mov    WORD PTR [esp+0x11],0x3a30
c0020e70:	c6 44 24 13 00       	mov    BYTE PTR [esp+0x13],0x0
c0020e75:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020e79:	8b 04 85 a0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb60]
c0020e80:	83 f8 ff             	cmp    eax,0xffffffff
c0020e83:	75 34                	jne    c0020eb9 <FAT::format(LogicalDisk*, int, char const*, int)+0x12b>
c0020e85:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020e89:	88 c2                	mov    dl,al
c0020e8b:	a1 80 24 03 c0       	mov    eax,ds:0xc0032480
c0020e90:	01 d0                	add    eax,edx
c0020e92:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020e96:	8b 15 80 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032480
c0020e9c:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ea0:	89 14 85 a0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb60],edx
c0020ea7:	a1 80 24 03 c0       	mov    eax,ds:0xc0032480
c0020eac:	8b 54 24 38          	mov    edx,DWORD PTR [esp+0x38]
c0020eb0:	89 14 85 20 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdae0],edx
c0020eb7:	eb 17                	jmp    c0020ed0 <FAT::format(LogicalDisk*, int, char const*, int)+0x142>
c0020eb9:	8a 44 24 11          	mov    al,BYTE PTR [esp+0x11]
c0020ebd:	88 c2                	mov    dl,al
c0020ebf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0020ec3:	8b 04 85 a0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb60]
c0020eca:	01 d0                	add    eax,edx
c0020ecc:	88 44 24 11          	mov    BYTE PTR [esp+0x11],al
c0020ed0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0020ed4:	88 04 24             	mov    BYTE PTR [esp],al
c0020ed7:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0020edb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0020edf:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0020ee7:	c6 44 24 01 02       	mov    BYTE PTR [esp+0x1],0x2
c0020eec:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0020ef4:	83 ec 0c             	sub    esp,0xc
c0020ef7:	68 00 20 00 00       	push   0x2000
c0020efc:	e8 a7 e9 fe ff       	call   c000f8a8 <malloc>
c0020f01:	83 c4 10             	add    esp,0x10
c0020f04:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0020f08:	68 00 20 00 00       	push   0x2000
c0020f0d:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0020f11:	8d 44 24 08          	lea    eax,[esp+0x8]
c0020f15:	50                   	push   eax
c0020f16:	8d 44 24 1d          	lea    eax,[esp+0x1d]
c0020f1a:	50                   	push   eax
c0020f1b:	e8 32 64 fe ff       	call   c0007352 <f_mkfs>
c0020f20:	83 c4 10             	add    esp,0x10
c0020f23:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0020f27:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0020f2c:	75 07                	jne    c0020f35 <FAT::format(LogicalDisk*, int, char const*, int)+0x1a7>
c0020f2e:	b8 00 00 00 00       	mov    eax,0x0
c0020f33:	eb 38                	jmp    c0020f6d <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020f35:	83 7c 24 14 0e       	cmp    DWORD PTR [esp+0x14],0xe
c0020f3a:	75 17                	jne    c0020f53 <FAT::format(LogicalDisk*, int, char const*, int)+0x1c5>
c0020f3c:	83 ec 0c             	sub    esp,0xc
c0020f3f:	68 6c d2 02 c0       	push   0xc002d26c
c0020f44:	e8 fe 1e ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0020f49:	83 c4 10             	add    esp,0x10
c0020f4c:	b8 09 00 00 00       	mov    eax,0x9
c0020f51:	eb 1a                	jmp    c0020f6d <FAT::format(LogicalDisk*, int, char const*, int)+0x1df>
c0020f53:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0020f57:	83 ec 08             	sub    esp,0x8
c0020f5a:	50                   	push   eax
c0020f5b:	68 34 d2 02 c0       	push   0xc002d234
c0020f60:	e8 e2 1e ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0020f65:	83 c4 10             	add    esp,0x10
c0020f68:	b8 01 00 00 00       	mov    eax,0x1
c0020f6d:	83 c4 2c             	add    esp,0x2c
c0020f70:	c3                   	ret    
c0020f71:	90                   	nop

c0020f72 <FAT::tryMount(LogicalDisk*, int)>:
c0020f72:	81 ec 6c 03 00 00    	sub    esp,0x36c
c0020f78:	a1 80 24 03 c0       	mov    eax,ds:0xc0032480
c0020f7d:	83 f8 14             	cmp    eax,0x14
c0020f80:	75 17                	jne    c0020f99 <FAT::tryMount(LogicalDisk*, int)+0x27>
c0020f82:	83 ec 0c             	sub    esp,0xc
c0020f85:	68 46 d2 02 c0       	push   0xc002d246
c0020f8a:	e8 72 98 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c0020f8f:	83 c4 10             	add    esp,0x10
c0020f92:	b0 00                	mov    al,0x0
c0020f94:	e9 d7 01 00 00       	jmp    c0021170 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020f99:	8b 84 24 74 03 00 00 	mov    eax,DWORD PTR [esp+0x374]
c0020fa0:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0020fa6:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0020fac:	3d 00 02 00 00       	cmp    eax,0x200
c0020fb1:	74 07                	je     c0020fba <FAT::tryMount(LogicalDisk*, int)+0x48>
c0020fb3:	b0 00                	mov    al,0x0
c0020fb5:	e9 b6 01 00 00       	jmp    c0021170 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020fba:	c6 84 24 5f 03 00 00 00 	mov    BYTE PTR [esp+0x35f],0x0
c0020fc2:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0020fc9:	8b 04 85 a0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb60]
c0020fd0:	83 f8 ff             	cmp    eax,0xffffffff
c0020fd3:	74 07                	je     c0020fdc <FAT::tryMount(LogicalDisk*, int)+0x6a>
c0020fd5:	b0 01                	mov    al,0x1
c0020fd7:	e9 94 01 00 00       	jmp    c0021170 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0020fdc:	66 c7 84 24 51 03 00 00 30 3a 	mov    WORD PTR [esp+0x351],0x3a30
c0020fe6:	c6 84 24 53 03 00 00 00 	mov    BYTE PTR [esp+0x353],0x0
c0020fee:	8a 84 24 51 03 00 00 	mov    al,BYTE PTR [esp+0x351]
c0020ff5:	88 c2                	mov    dl,al
c0020ff7:	a1 80 24 03 c0       	mov    eax,ds:0xc0032480
c0020ffc:	01 d0                	add    eax,edx
c0020ffe:	88 84 24 51 03 00 00 	mov    BYTE PTR [esp+0x351],al
c0021005:	8b 15 80 24 03 c0    	mov    edx,DWORD PTR ds:0xc0032480
c002100b:	8b 84 24 78 03 00 00 	mov    eax,DWORD PTR [esp+0x378]
c0021012:	89 14 85 a0 24 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdb60],edx
c0021019:	a1 80 24 03 c0       	mov    eax,ds:0xc0032480
c002101e:	8b 94 24 78 03 00 00 	mov    edx,DWORD PTR [esp+0x378]
c0021025:	89 14 85 20 25 03 c0 	mov    DWORD PTR [eax*4-0x3ffcdae0],edx
c002102c:	83 ec 0c             	sub    esp,0xc
c002102f:	68 54 02 00 00       	push   0x254
c0021034:	e8 6f e8 fe ff       	call   c000f8a8 <malloc>
c0021039:	83 c4 10             	add    esp,0x10
c002103c:	89 84 24 58 03 00 00 	mov    DWORD PTR [esp+0x358],eax
c0021043:	83 ec 04             	sub    esp,0x4
c0021046:	6a 00                	push   0x0
c0021048:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002104f:	50                   	push   eax
c0021050:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c0021057:	e8 b4 3e fe ff       	call   c0004f10 <f_mount>
c002105c:	83 c4 10             	add    esp,0x10
c002105f:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c0021066:	83 bc 24 54 03 00 00 00 	cmp    DWORD PTR [esp+0x354],0x0
c002106e:	74 19                	je     c0021089 <FAT::tryMount(LogicalDisk*, int)+0x117>
c0021070:	83 ec 0c             	sub    esp,0xc
c0021073:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002107a:	e8 49 e8 fe ff       	call   c000f8c8 <rfree>
c002107f:	83 c4 10             	add    esp,0x10
c0021082:	b0 00                	mov    al,0x0
c0021084:	e9 e7 00 00 00       	jmp    c0021170 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c0021089:	83 ec 04             	sub    esp,0x4
c002108c:	68 00 01 00 00       	push   0x100
c0021091:	6a 00                	push   0x0
c0021093:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c002109a:	50                   	push   eax
c002109b:	e8 cc f6 fd ff       	call   c000076c <memset>
c00210a0:	83 c4 10             	add    esp,0x10
c00210a3:	83 ec 08             	sub    esp,0x8
c00210a6:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c00210ad:	50                   	push   eax
c00210ae:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00210b5:	50                   	push   eax
c00210b6:	e8 ad f8 fd ff       	call   c0000968 <strcat>
c00210bb:	83 c4 10             	add    esp,0x10
c00210be:	83 ec 08             	sub    esp,0x8
c00210c1:	68 54 d2 02 c0       	push   0xc002d254
c00210c6:	8d 84 24 5d 02 00 00 	lea    eax,[esp+0x25d]
c00210cd:	50                   	push   eax
c00210ce:	e8 95 f8 fd ff       	call   c0000968 <strcat>
c00210d3:	83 c4 10             	add    esp,0x10
c00210d6:	83 ec 04             	sub    esp,0x4
c00210d9:	6a 01                	push   0x1
c00210db:	8d 84 24 59 02 00 00 	lea    eax,[esp+0x259]
c00210e2:	50                   	push   eax
c00210e3:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00210e7:	50                   	push   eax
c00210e8:	e8 85 3e fe ff       	call   c0004f72 <f_open>
c00210ed:	83 c4 10             	add    esp,0x10
c00210f0:	89 84 24 54 03 00 00 	mov    DWORD PTR [esp+0x354],eax
c00210f7:	8b 84 24 54 03 00 00 	mov    eax,DWORD PTR [esp+0x354]
c00210fe:	85 c0                	test   eax,eax
c0021100:	74 0a                	je     c002110c <FAT::tryMount(LogicalDisk*, int)+0x19a>
c0021102:	78 2d                	js     c0021131 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c0021104:	83 e8 04             	sub    eax,0x4
c0021107:	83 f8 01             	cmp    eax,0x1
c002110a:	77 25                	ja     c0021131 <FAT::tryMount(LogicalDisk*, int)+0x1bf>
c002110c:	c6 84 24 5f 03 00 00 01 	mov    BYTE PTR [esp+0x35f],0x1
c0021114:	83 ec 0c             	sub    esp,0xc
c0021117:	8d 44 24 0c          	lea    eax,[esp+0xc]
c002111b:	50                   	push   eax
c002111c:	e8 a3 49 fe ff       	call   c0005ac4 <f_close>
c0021121:	83 c4 10             	add    esp,0x10
c0021124:	90                   	nop
c0021125:	80 bc 24 5f 03 00 00 00 	cmp    BYTE PTR [esp+0x35f],0x0
c002112d:	74 3a                	je     c0021169 <FAT::tryMount(LogicalDisk*, int)+0x1f7>
c002112f:	eb 2d                	jmp    c002115e <FAT::tryMount(LogicalDisk*, int)+0x1ec>
c0021131:	83 ec 0c             	sub    esp,0xc
c0021134:	ff b4 24 64 03 00 00 	push   DWORD PTR [esp+0x364]
c002113b:	e8 88 e7 fe ff       	call   c000f8c8 <rfree>
c0021140:	83 c4 10             	add    esp,0x10
c0021143:	83 ec 04             	sub    esp,0x4
c0021146:	6a 00                	push   0x0
c0021148:	8d 84 24 59 03 00 00 	lea    eax,[esp+0x359]
c002114f:	50                   	push   eax
c0021150:	6a 00                	push   0x0
c0021152:	e8 b9 3d fe ff       	call   c0004f10 <f_mount>
c0021157:	83 c4 10             	add    esp,0x10
c002115a:	b0 00                	mov    al,0x0
c002115c:	eb 12                	jmp    c0021170 <FAT::tryMount(LogicalDisk*, int)+0x1fe>
c002115e:	a1 80 24 03 c0       	mov    eax,ds:0xc0032480
c0021163:	40                   	inc    eax
c0021164:	a3 80 24 03 c0       	mov    ds:0xc0032480,eax
c0021169:	8a 84 24 5f 03 00 00 	mov    al,BYTE PTR [esp+0x35f]
c0021170:	81 c4 6c 03 00 00    	add    esp,0x36c
c0021176:	c3                   	ret    
c0021177:	90                   	nop

c0021178 <FAT::getFileFirstSector(char const*)>:
c0021178:	53                   	push   ebx
c0021179:	83 ec 28             	sub    esp,0x28
c002117c:	c7 44 24 10 14 01 00 00 	mov    DWORD PTR [esp+0x10],0x114
c0021184:	83 ec 0c             	sub    esp,0xc
c0021187:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002118b:	e8 18 e7 fe ff       	call   c000f8a8 <malloc>
c0021190:	83 c4 10             	add    esp,0x10
c0021193:	89 c3                	mov    ebx,eax
c0021195:	a1 b0 23 03 c0       	mov    eax,ds:0xc00323b0
c002119a:	83 ec 04             	sub    esp,0x4
c002119d:	50                   	push   eax
c002119e:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00211a2:	53                   	push   ebx
c00211a3:	e8 fe 21 ff ff       	call   c00133a6 <File::File(char const*, Process*)>
c00211a8:	83 c4 10             	add    esp,0x10
c00211ab:	89 5c 24 1c          	mov    DWORD PTR [esp+0x1c],ebx
c00211af:	83 ec 08             	sub    esp,0x8
c00211b2:	6a 01                	push   0x1
c00211b4:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00211b8:	e8 4d 22 ff ff       	call   c001340a <File::open(FileOpenMode)>
c00211bd:	83 c4 10             	add    esp,0x10
c00211c0:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00211c4:	8b 00                	mov    eax,DWORD PTR [eax]
c00211c6:	83 c0 0c             	add    eax,0xc
c00211c9:	8b 00                	mov    eax,DWORD PTR [eax]
c00211cb:	83 ec 0c             	sub    esp,0xc
c00211ce:	8d 54 24 14          	lea    edx,[esp+0x14]
c00211d2:	52                   	push   edx
c00211d3:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c00211d7:	52                   	push   edx
c00211d8:	6a 00                	push   0x0
c00211da:	6a 04                	push   0x4
c00211dc:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c00211e0:	ff d0                	call   eax
c00211e2:	83 c4 20             	add    esp,0x20
c00211e5:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00211e9:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c00211ef:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00211f3:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00211f7:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c00211fa:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00211fd:	83 ec 04             	sub    esp,0x4
c0021200:	52                   	push   edx
c0021201:	50                   	push   eax
c0021202:	68 5f d2 02 c0       	push   0xc002d25f
c0021207:	e8 3b 1c ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c002120c:	83 c4 10             	add    esp,0x10
c002120f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021213:	8b 50 3c             	mov    edx,DWORD PTR [eax+0x3c]
c0021216:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c0021219:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002121d:	83 ec 0c             	sub    esp,0xc
c0021220:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c0021224:	e8 3f 22 ff ff       	call   c0013468 <File::close()>
c0021229:	83 c4 10             	add    esp,0x10
c002122c:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021230:	ba 00 00 00 00       	mov    edx,0x0
c0021235:	83 c4 28             	add    esp,0x28
c0021238:	5b                   	pop    ebx
c0021239:	c3                   	ret    

c002123a <FAT::readDir(void*, unsigned long, void*, int*)>:
c002123a:	57                   	push   edi
c002123b:	56                   	push   esi
c002123c:	81 ec 44 02 00 00    	sub    esp,0x244
c0021242:	83 bc 24 54 02 00 00 00 	cmp    DWORD PTR [esp+0x254],0x0
c002124a:	74 0a                	je     c0021256 <FAT::readDir(void*, unsigned long, void*, int*)+0x1c>
c002124c:	83 bc 24 60 02 00 00 00 	cmp    DWORD PTR [esp+0x260],0x0
c0021254:	75 0a                	jne    c0021260 <FAT::readDir(void*, unsigned long, void*, int*)+0x26>
c0021256:	b8 04 00 00 00       	mov    eax,0x4
c002125b:	e9 0c 01 00 00       	jmp    c002136c <FAT::readDir(void*, unsigned long, void*, int*)+0x132>
c0021260:	83 ec 08             	sub    esp,0x8
c0021263:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c002126a:	50                   	push   eax
c002126b:	ff b4 24 60 02 00 00 	push   DWORD PTR [esp+0x260]
c0021272:	e8 57 4e fe ff       	call   c00060ce <f_readdir>
c0021277:	83 c4 10             	add    esp,0x10
c002127a:	89 84 24 3c 02 00 00 	mov    DWORD PTR [esp+0x23c],eax
c0021281:	66 c7 04 24 00 00    	mov    WORD PTR [esp],0x0
c0021287:	83 ec 0c             	sub    esp,0xc
c002128a:	8d 84 24 1c 01 00 00 	lea    eax,[esp+0x11c]
c0021291:	83 c0 1a             	add    eax,0x1a
c0021294:	50                   	push   eax
c0021295:	e8 ee f4 fd ff       	call   c0000788 <strlen>
c002129a:	83 c4 10             	add    esp,0x10
c002129d:	ba 00 00 00 00       	mov    edx,0x0
c00212a2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c00212a6:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00212aa:	8a 84 24 1c 01 00 00 	mov    al,BYTE PTR [esp+0x11c]
c00212b1:	0f b6 c0             	movzx  eax,al
c00212b4:	83 e0 10             	and    eax,0x10
c00212b7:	74 07                	je     c00212c0 <FAT::readDir(void*, unsigned long, void*, int*)+0x86>
c00212b9:	b8 02 00 00 00       	mov    eax,0x2
c00212be:	eb 05                	jmp    c00212c5 <FAT::readDir(void*, unsigned long, void*, int*)+0x8b>
c00212c0:	b8 01 00 00 00       	mov    eax,0x1
c00212c5:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00212c9:	83 ec 08             	sub    esp,0x8
c00212cc:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c00212d3:	83 c0 1a             	add    eax,0x1a
c00212d6:	50                   	push   eax
c00212d7:	8d 44 24 0c          	lea    eax,[esp+0xc]
c00212db:	83 c0 10             	add    eax,0x10
c00212de:	50                   	push   eax
c00212df:	e8 44 f5 fd ff       	call   c0000828 <strcpy>
c00212e4:	83 c4 10             	add    esp,0x10
c00212e7:	8b 84 24 5c 02 00 00 	mov    eax,DWORD PTR [esp+0x25c]
c00212ee:	89 84 24 38 02 00 00 	mov    DWORD PTR [esp+0x238],eax
c00212f5:	89 e0                	mov    eax,esp
c00212f7:	89 84 24 34 02 00 00 	mov    DWORD PTR [esp+0x234],eax
c00212fe:	8b 84 24 58 02 00 00 	mov    eax,DWORD PTR [esp+0x258]
c0021305:	89 84 24 30 02 00 00 	mov    DWORD PTR [esp+0x230],eax
c002130c:	8b 84 24 38 02 00 00 	mov    eax,DWORD PTR [esp+0x238]
c0021313:	89 84 24 2c 02 00 00 	mov    DWORD PTR [esp+0x22c],eax
c002131a:	8b 84 24 34 02 00 00 	mov    eax,DWORD PTR [esp+0x234]
c0021321:	8b 94 24 38 02 00 00 	mov    edx,DWORD PTR [esp+0x238]
c0021328:	8b 8c 24 30 02 00 00 	mov    ecx,DWORD PTR [esp+0x230]
c002132f:	89 c6                	mov    esi,eax
c0021331:	89 d7                	mov    edi,edx
c0021333:	fc                   	cld    
c0021334:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021336:	8b 84 24 60 02 00 00 	mov    eax,DWORD PTR [esp+0x260]
c002133d:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c0021343:	8a 84 24 2a 01 00 00 	mov    al,BYTE PTR [esp+0x12a]
c002134a:	84 c0                	test   al,al
c002134c:	75 07                	jne    c0021355 <FAT::readDir(void*, unsigned long, void*, int*)+0x11b>
c002134e:	b8 07 00 00 00       	mov    eax,0x7
c0021353:	eb 17                	jmp    c002136c <FAT::readDir(void*, unsigned long, void*, int*)+0x132>
c0021355:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c002135c:	85 c0                	test   eax,eax
c002135e:	75 07                	jne    c0021367 <FAT::readDir(void*, unsigned long, void*, int*)+0x12d>
c0021360:	b8 00 00 00 00       	mov    eax,0x0
c0021365:	eb 05                	jmp    c002136c <FAT::readDir(void*, unsigned long, void*, int*)+0x132>
c0021367:	b8 01 00 00 00       	mov    eax,0x1
c002136c:	81 c4 44 02 00 00    	add    esp,0x244
c0021372:	5e                   	pop    esi
c0021373:	5f                   	pop    edi
c0021374:	c3                   	ret    
c0021375:	90                   	nop

c0021376 <FAT::read(void*, unsigned long, void*, int*)>:
c0021376:	83 ec 1c             	sub    esp,0x1c
c0021379:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002137e:	74 07                	je     c0021387 <FAT::read(void*, unsigned long, void*, int*)+0x11>
c0021380:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c0021385:	75 07                	jne    c002138e <FAT::read(void*, unsigned long, void*, int*)+0x18>
c0021387:	b8 04 00 00 00       	mov    eax,0x4
c002138c:	eb 3d                	jmp    c00213cb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c002138e:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021392:	50                   	push   eax
c0021393:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0021397:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c002139b:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002139f:	e8 0a 40 fe ff       	call   c00053ae <f_read>
c00213a4:	83 c4 10             	add    esp,0x10
c00213a7:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00213ab:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00213af:	89 c2                	mov    edx,eax
c00213b1:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c00213b5:	89 10                	mov    DWORD PTR [eax],edx
c00213b7:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00213bb:	85 c0                	test   eax,eax
c00213bd:	75 07                	jne    c00213c6 <FAT::read(void*, unsigned long, void*, int*)+0x50>
c00213bf:	b8 00 00 00 00       	mov    eax,0x0
c00213c4:	eb 05                	jmp    c00213cb <FAT::read(void*, unsigned long, void*, int*)+0x55>
c00213c6:	b8 01 00 00 00       	mov    eax,0x1
c00213cb:	83 c4 1c             	add    esp,0x1c
c00213ce:	c3                   	ret    
c00213cf:	90                   	nop

c00213d0 <FAT::write(void*, unsigned long, void*, int*)>:
c00213d0:	83 ec 1c             	sub    esp,0x1c
c00213d3:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c00213d8:	74 07                	je     c00213e1 <FAT::write(void*, unsigned long, void*, int*)+0x11>
c00213da:	83 7c 24 30 00       	cmp    DWORD PTR [esp+0x30],0x0
c00213df:	75 07                	jne    c00213e8 <FAT::write(void*, unsigned long, void*, int*)+0x18>
c00213e1:	b8 04 00 00 00       	mov    eax,0x4
c00213e6:	eb 3d                	jmp    c0021425 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c00213e8:	8d 44 24 08          	lea    eax,[esp+0x8]
c00213ec:	50                   	push   eax
c00213ed:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c00213f1:	ff 74 24 34          	push   DWORD PTR [esp+0x34]
c00213f5:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00213f9:	e8 30 42 fe ff       	call   c000562e <f_write>
c00213fe:	83 c4 10             	add    esp,0x10
c0021401:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0021405:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021409:	89 c2                	mov    edx,eax
c002140b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c002140f:	89 10                	mov    DWORD PTR [eax],edx
c0021411:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021415:	85 c0                	test   eax,eax
c0021417:	75 07                	jne    c0021420 <FAT::write(void*, unsigned long, void*, int*)+0x50>
c0021419:	b8 00 00 00 00       	mov    eax,0x0
c002141e:	eb 05                	jmp    c0021425 <FAT::write(void*, unsigned long, void*, int*)+0x55>
c0021420:	b8 01 00 00 00       	mov    eax,0x1
c0021425:	83 c4 1c             	add    esp,0x1c
c0021428:	c3                   	ret    
c0021429:	90                   	nop

c002142a <FAT::close(void*)>:
c002142a:	83 ec 1c             	sub    esp,0x1c
c002142d:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c0021432:	75 07                	jne    c002143b <FAT::close(void*)+0x11>
c0021434:	b8 04 00 00 00       	mov    eax,0x4
c0021439:	eb 36                	jmp    c0021471 <FAT::close(void*)+0x47>
c002143b:	83 ec 0c             	sub    esp,0xc
c002143e:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021442:	e8 7d 46 fe ff       	call   c0005ac4 <f_close>
c0021447:	83 c4 10             	add    esp,0x10
c002144a:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002144e:	83 ec 0c             	sub    esp,0xc
c0021451:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021455:	e8 5e e4 fe ff       	call   c000f8b8 <free>
c002145a:	83 c4 10             	add    esp,0x10
c002145d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021461:	85 c0                	test   eax,eax
c0021463:	75 07                	jne    c002146c <FAT::close(void*)+0x42>
c0021465:	b8 00 00 00 00       	mov    eax,0x0
c002146a:	eb 05                	jmp    c0021471 <FAT::close(void*)+0x47>
c002146c:	b8 01 00 00 00       	mov    eax,0x1
c0021471:	83 c4 1c             	add    esp,0x1c
c0021474:	c3                   	ret    
c0021475:	90                   	nop

c0021476 <FAT::closeDir(void*)>:
c0021476:	83 ec 1c             	sub    esp,0x1c
c0021479:	83 7c 24 24 00       	cmp    DWORD PTR [esp+0x24],0x0
c002147e:	75 07                	jne    c0021487 <FAT::closeDir(void*)+0x11>
c0021480:	b8 04 00 00 00       	mov    eax,0x4
c0021485:	eb 36                	jmp    c00214bd <FAT::closeDir(void*)+0x47>
c0021487:	83 ec 0c             	sub    esp,0xc
c002148a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002148e:	e8 19 4c fe ff       	call   c00060ac <f_closedir>
c0021493:	83 c4 10             	add    esp,0x10
c0021496:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002149a:	83 ec 0c             	sub    esp,0xc
c002149d:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c00214a1:	e8 12 e4 fe ff       	call   c000f8b8 <free>
c00214a6:	83 c4 10             	add    esp,0x10
c00214a9:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00214ad:	85 c0                	test   eax,eax
c00214af:	75 07                	jne    c00214b8 <FAT::closeDir(void*)+0x42>
c00214b1:	b8 00 00 00 00       	mov    eax,0x0
c00214b6:	eb 05                	jmp    c00214bd <FAT::closeDir(void*)+0x47>
c00214b8:	b8 01 00 00 00       	mov    eax,0x1
c00214bd:	83 c4 1c             	add    esp,0x1c
c00214c0:	c3                   	ret    
c00214c1:	90                   	nop

c00214c2 <FAT::seek(void*, unsigned long long)>:
c00214c2:	83 ec 2c             	sub    esp,0x2c
c00214c5:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00214c9:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00214cd:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00214d1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00214d5:	83 7c 24 34 00       	cmp    DWORD PTR [esp+0x34],0x0
c00214da:	75 07                	jne    c00214e3 <FAT::seek(void*, unsigned long long)+0x21>
c00214dc:	b8 04 00 00 00       	mov    eax,0x4
c00214e1:	eb 2f                	jmp    c0021512 <FAT::seek(void*, unsigned long long)+0x50>
c00214e3:	83 ec 04             	sub    esp,0x4
c00214e6:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00214ea:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00214ee:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c00214f2:	e8 fc 45 fe ff       	call   c0005af3 <f_lseek>
c00214f7:	83 c4 10             	add    esp,0x10
c00214fa:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00214fe:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0021502:	85 c0                	test   eax,eax
c0021504:	75 07                	jne    c002150d <FAT::seek(void*, unsigned long long)+0x4b>
c0021506:	b8 00 00 00 00       	mov    eax,0x0
c002150b:	eb 05                	jmp    c0021512 <FAT::seek(void*, unsigned long long)+0x50>
c002150d:	b8 01 00 00 00       	mov    eax,0x1
c0021512:	83 c4 2c             	add    esp,0x2c
c0021515:	c3                   	ret    

c0021516 <fatWrapperReadDisk>:
c0021516:	83 ec 1c             	sub    esp,0x1c
c0021519:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002151d:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021521:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c0021525:	89 04 24             	mov    DWORD PTR [esp],eax
c0021528:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c002152c:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021530:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021535:	8b 04 85 60 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ba0]
c002153c:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021540:	83 ec 0c             	sub    esp,0xc
c0021543:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c0021547:	52                   	push   edx
c0021548:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c002154c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021550:	50                   	push   eax
c0021551:	e8 6a 52 ff ff       	call   c00167c0 <LogicalDisk::read(unsigned long long, int, void*)>
c0021556:	83 c4 20             	add    esp,0x20
c0021559:	83 c4 1c             	add    esp,0x1c
c002155c:	c3                   	ret    

c002155d <fatWrapperWriteDisk>:
c002155d:	83 ec 1c             	sub    esp,0x1c
c0021560:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0021564:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0021568:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c002156c:	89 04 24             	mov    DWORD PTR [esp],eax
c002156f:	8b 44 24 2c          	mov    eax,DWORD PTR [esp+0x2c]
c0021573:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0021577:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c002157c:	8b 04 85 60 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ba0]
c0021583:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0021587:	83 ec 0c             	sub    esp,0xc
c002158a:	ff 74 24 30          	push   DWORD PTR [esp+0x30]
c002158e:	52                   	push   edx
c002158f:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021593:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0021597:	50                   	push   eax
c0021598:	e8 8f 52 ff ff       	call   c001682c <LogicalDisk::write(unsigned long long, int, void*)>
c002159d:	83 c4 20             	add    esp,0x20
c00215a0:	83 c4 1c             	add    esp,0x1c
c00215a3:	c3                   	ret    

c00215a4 <fatWrapperIoctl>:
c00215a4:	53                   	push   ebx
c00215a5:	83 ec 28             	sub    esp,0x28
c00215a8:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00215ac:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
c00215b0:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c00215b4:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c00215b8:	80 7c 24 08 02       	cmp    BYTE PTR [esp+0x8],0x2
c00215bd:	75 31                	jne    c00215f0 <fatWrapperIoctl+0x4c>
c00215bf:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00215c3:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00215c7:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c00215cc:	8b 04 85 60 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ba0]
c00215d3:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c00215d9:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00215df:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00215e3:	66 89 02             	mov    WORD PTR [edx],ax
c00215e6:	b8 00 00 00 00       	mov    eax,0x0
c00215eb:	e9 b2 00 00 00       	jmp    c00216a2 <fatWrapperIoctl+0xfe>
c00215f0:	80 7c 24 08 01       	cmp    BYTE PTR [esp+0x8],0x1
c00215f5:	75 6a                	jne    c0021661 <fatWrapperIoctl+0xbd>
c00215f7:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c00215fb:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00215ff:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021604:	8b 04 85 60 f4 02 c0 	mov    eax,DWORD PTR [eax*4-0x3ffd0ba0]
c002160b:	8b 80 6c 01 00 00    	mov    eax,DWORD PTR [eax+0x16c]
c0021611:	8b 88 60 01 00 00    	mov    ecx,DWORD PTR [eax+0x160]
c0021617:	8b 98 64 01 00 00    	mov    ebx,DWORD PTR [eax+0x164]
c002161d:	89 c8                	mov    eax,ecx
c002161f:	89 da                	mov    edx,ebx
c0021621:	0f a4 c2 0a          	shld   edx,eax,0xa
c0021625:	c1 e0 0a             	shl    eax,0xa
c0021628:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002162d:	8b 0c 8d 60 f4 02 c0 	mov    ecx,DWORD PTR [ecx*4-0x3ffd0ba0]
c0021634:	8b 89 6c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x16c]
c002163a:	8b 89 5c 01 00 00    	mov    ecx,DWORD PTR [ecx+0x15c]
c0021640:	89 cb                	mov    ebx,ecx
c0021642:	c1 fb 1f             	sar    ebx,0x1f
c0021645:	53                   	push   ebx
c0021646:	51                   	push   ecx
c0021647:	52                   	push   edx
c0021648:	50                   	push   eax
c0021649:	e8 76 5b 00 00       	call   c00271c4 <__udivdi3>
c002164e:	83 c4 10             	add    esp,0x10
c0021651:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c0021655:	89 01                	mov    DWORD PTR [ecx],eax
c0021657:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c002165a:	b8 00 00 00 00       	mov    eax,0x0
c002165f:	eb 41                	jmp    c00216a2 <fatWrapperIoctl+0xfe>
c0021661:	80 7c 24 08 00       	cmp    BYTE PTR [esp+0x8],0x0
c0021666:	75 07                	jne    c002166f <fatWrapperIoctl+0xcb>
c0021668:	b8 00 00 00 00       	mov    eax,0x0
c002166d:	eb 33                	jmp    c00216a2 <fatWrapperIoctl+0xfe>
c002166f:	80 7c 24 08 03       	cmp    BYTE PTR [esp+0x8],0x3
c0021674:	75 19                	jne    c002168f <fatWrapperIoctl+0xeb>
c0021676:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c002167a:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c002167e:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0021682:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0021688:	b8 00 00 00 00       	mov    eax,0x0
c002168d:	eb 13                	jmp    c00216a2 <fatWrapperIoctl+0xfe>
c002168f:	80 7c 24 08 04       	cmp    BYTE PTR [esp+0x8],0x4
c0021694:	75 07                	jne    c002169d <fatWrapperIoctl+0xf9>
c0021696:	b8 00 00 00 00       	mov    eax,0x0
c002169b:	eb 05                	jmp    c00216a2 <fatWrapperIoctl+0xfe>
c002169d:	b8 04 00 00 00       	mov    eax,0x4
c00216a2:	83 c4 28             	add    esp,0x28
c00216a5:	5b                   	pop    ebx
c00216a6:	c3                   	ret    
c00216a7:	90                   	nop

c00216a8 <FAT::FAT()>:
c00216a8:	83 ec 1c             	sub    esp,0x1c
c00216ab:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216af:	83 ec 0c             	sub    esp,0xc
c00216b2:	50                   	push   eax
c00216b3:	e8 9a 1a ff ff       	call   c0013152 <Filesystem::Filesystem()>
c00216b8:	83 c4 10             	add    esp,0x10
c00216bb:	ba 9c d2 02 c0       	mov    edx,0xc002d29c
c00216c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00216c4:	89 10                	mov    DWORD PTR [eax],edx
c00216c6:	c7 05 80 24 03 c0 00 00 00 00 	mov    DWORD PTR ds:0xc0032480,0x0
c00216d0:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c00216d8:	83 7c 24 0c 19       	cmp    DWORD PTR [esp+0xc],0x19
c00216dd:	7f 15                	jg     c00216f4 <FAT::FAT()+0x4c>
c00216df:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00216e3:	c7 04 85 a0 24 03 c0 ff ff ff ff 	mov    DWORD PTR [eax*4-0x3ffcdb60],0xffffffff
c00216ee:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c00216f2:	eb e4                	jmp    c00216d8 <FAT::FAT()+0x30>
c00216f4:	90                   	nop
c00216f5:	83 c4 1c             	add    esp,0x1c
c00216f8:	c3                   	ret    
c00216f9:	90                   	nop

c00216fa <FAT::fixFilepath(char*)>:
c00216fa:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00216fe:	8a 00                	mov    al,BYTE PTR [eax]
c0021700:	3c 40                	cmp    al,0x40
c0021702:	7e 2c                	jle    c0021730 <FAT::fixFilepath(char*)+0x36>
c0021704:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021708:	8a 00                	mov    al,BYTE PTR [eax]
c002170a:	83 e8 41             	sub    eax,0x41
c002170d:	88 c2                	mov    dl,al
c002170f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021713:	88 10                	mov    BYTE PTR [eax],dl
c0021715:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021719:	8a 00                	mov    al,BYTE PTR [eax]
c002171b:	0f be c0             	movsx  eax,al
c002171e:	8b 04 85 a0 24 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcdb60]
c0021725:	83 c0 30             	add    eax,0x30
c0021728:	88 c2                	mov    dl,al
c002172a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002172e:	88 10                	mov    BYTE PTR [eax],dl
c0021730:	90                   	nop
c0021731:	c3                   	ret    

c0021732 <FAT::open(char const*, void**, FileOpenMode)>:
c0021732:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021738:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021740:	74 0a                	je     c002174c <FAT::open(char const*, void**, FileOpenMode)+0x1a>
c0021742:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c002174a:	75 0a                	jne    c0021756 <FAT::open(char const*, void**, FileOpenMode)+0x24>
c002174c:	b8 04 00 00 00       	mov    eax,0x4
c0021751:	e9 fd 00 00 00       	jmp    c0021853 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c0021756:	83 ec 08             	sub    esp,0x8
c0021759:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021760:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021764:	50                   	push   eax
c0021765:	e8 be f0 fd ff       	call   c0000828 <strcpy>
c002176a:	83 c4 10             	add    esp,0x10
c002176d:	83 ec 08             	sub    esp,0x8
c0021770:	8d 44 24 10          	lea    eax,[esp+0x10]
c0021774:	50                   	push   eax
c0021775:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c002177c:	e8 79 ff ff ff       	call   c00216fa <FAT::fixFilepath(char*)>
c0021781:	83 c4 10             	add    esp,0x10
c0021784:	c6 84 24 0f 01 00 00 00 	mov    BYTE PTR [esp+0x10f],0x0
c002178c:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c0021793:	83 e0 01             	and    eax,0x1
c0021796:	74 08                	je     c00217a0 <FAT::open(char const*, void**, FileOpenMode)+0x6e>
c0021798:	80 8c 24 0f 01 00 00 01 	or     BYTE PTR [esp+0x10f],0x1
c00217a0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00217a7:	83 e0 04             	and    eax,0x4
c00217aa:	74 10                	je     c00217bc <FAT::open(char const*, void**, FileOpenMode)+0x8a>
c00217ac:	80 8c 24 0f 01 00 00 30 	or     BYTE PTR [esp+0x10f],0x30
c00217b4:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00217bc:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00217c3:	83 e0 02             	and    eax,0x2
c00217c6:	74 08                	je     c00217d0 <FAT::open(char const*, void**, FileOpenMode)+0x9e>
c00217c8:	80 8c 24 0f 01 00 00 02 	or     BYTE PTR [esp+0x10f],0x2
c00217d0:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00217d7:	83 e0 08             	and    eax,0x8
c00217da:	74 08                	je     c00217e4 <FAT::open(char const*, void**, FileOpenMode)+0xb2>
c00217dc:	80 8c 24 0f 01 00 00 04 	or     BYTE PTR [esp+0x10f],0x4
c00217e4:	8b 84 24 2c 01 00 00 	mov    eax,DWORD PTR [esp+0x12c]
c00217eb:	83 e0 10             	and    eax,0x10
c00217ee:	74 08                	je     c00217f8 <FAT::open(char const*, void**, FileOpenMode)+0xc6>
c00217f0:	80 8c 24 0f 01 00 00 08 	or     BYTE PTR [esp+0x10f],0x8
c00217f8:	83 ec 0c             	sub    esp,0xc
c00217fb:	68 50 02 00 00       	push   0x250
c0021800:	e8 a3 e0 fe ff       	call   c000f8a8 <malloc>
c0021805:	83 c4 10             	add    esp,0x10
c0021808:	89 c2                	mov    edx,eax
c002180a:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021811:	89 10                	mov    DWORD PTR [eax],edx
c0021813:	0f b6 94 24 0f 01 00 00 	movzx  edx,BYTE PTR [esp+0x10f]
c002181b:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c0021822:	8b 00                	mov    eax,DWORD PTR [eax]
c0021824:	83 ec 04             	sub    esp,0x4
c0021827:	52                   	push   edx
c0021828:	8d 54 24 10          	lea    edx,[esp+0x10]
c002182c:	52                   	push   edx
c002182d:	50                   	push   eax
c002182e:	e8 3f 37 fe ff       	call   c0004f72 <f_open>
c0021833:	83 c4 10             	add    esp,0x10
c0021836:	89 84 24 08 01 00 00 	mov    DWORD PTR [esp+0x108],eax
c002183d:	83 bc 24 08 01 00 00 00 	cmp    DWORD PTR [esp+0x108],0x0
c0021845:	74 07                	je     c002184e <FAT::open(char const*, void**, FileOpenMode)+0x11c>
c0021847:	b8 01 00 00 00       	mov    eax,0x1
c002184c:	eb 05                	jmp    c0021853 <FAT::open(char const*, void**, FileOpenMode)+0x121>
c002184e:	b8 00 00 00 00       	mov    eax,0x0
c0021853:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021859:	c3                   	ret    

c002185a <FAT::openDir(char const*, void**)>:
c002185a:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021860:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021868:	74 0a                	je     c0021874 <FAT::openDir(char const*, void**)+0x1a>
c002186a:	83 bc 24 28 01 00 00 00 	cmp    DWORD PTR [esp+0x128],0x0
c0021872:	75 07                	jne    c002187b <FAT::openDir(char const*, void**)+0x21>
c0021874:	b8 04 00 00 00       	mov    eax,0x4
c0021879:	eb 7d                	jmp    c00218f8 <FAT::openDir(char const*, void**)+0x9e>
c002187b:	83 ec 08             	sub    esp,0x8
c002187e:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021885:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021889:	50                   	push   eax
c002188a:	e8 99 ef fd ff       	call   c0000828 <strcpy>
c002188f:	83 c4 10             	add    esp,0x10
c0021892:	83 ec 08             	sub    esp,0x8
c0021895:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021899:	50                   	push   eax
c002189a:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c00218a1:	e8 54 fe ff ff       	call   c00216fa <FAT::fixFilepath(char*)>
c00218a6:	83 c4 10             	add    esp,0x10
c00218a9:	83 ec 0c             	sub    esp,0xc
c00218ac:	6a 4c                	push   0x4c
c00218ae:	e8 f5 df fe ff       	call   c000f8a8 <malloc>
c00218b3:	83 c4 10             	add    esp,0x10
c00218b6:	89 c2                	mov    edx,eax
c00218b8:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00218bf:	89 10                	mov    DWORD PTR [eax],edx
c00218c1:	8b 84 24 28 01 00 00 	mov    eax,DWORD PTR [esp+0x128]
c00218c8:	8b 00                	mov    eax,DWORD PTR [eax]
c00218ca:	83 ec 08             	sub    esp,0x8
c00218cd:	8d 54 24 14          	lea    edx,[esp+0x14]
c00218d1:	52                   	push   edx
c00218d2:	50                   	push   eax
c00218d3:	e8 d2 46 fe ff       	call   c0005faa <f_opendir>
c00218d8:	83 c4 10             	add    esp,0x10
c00218db:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c00218e2:	83 bc 24 0c 01 00 00 00 	cmp    DWORD PTR [esp+0x10c],0x0
c00218ea:	74 07                	je     c00218f3 <FAT::openDir(char const*, void**)+0x99>
c00218ec:	b8 01 00 00 00       	mov    eax,0x1
c00218f1:	eb 05                	jmp    c00218f8 <FAT::openDir(char const*, void**)+0x9e>
c00218f3:	b8 00 00 00 00       	mov    eax,0x0
c00218f8:	81 c4 1c 01 00 00    	add    esp,0x11c
c00218fe:	c3                   	ret    
c00218ff:	90                   	nop

c0021900 <FAT::stat(char const*, unsigned long long*, bool*)>:
c0021900:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021906:	83 bc 24 34 02 00 00 00 	cmp    DWORD PTR [esp+0x234],0x0
c002190e:	75 0a                	jne    c002191a <FAT::stat(char const*, unsigned long long*, bool*)+0x1a>
c0021910:	b8 04 00 00 00       	mov    eax,0x4
c0021915:	e9 c9 00 00 00       	jmp    c00219e3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002191a:	83 bc 24 38 02 00 00 00 	cmp    DWORD PTR [esp+0x238],0x0
c0021922:	75 0a                	jne    c002192e <FAT::stat(char const*, unsigned long long*, bool*)+0x2e>
c0021924:	b8 04 00 00 00       	mov    eax,0x4
c0021929:	e9 b5 00 00 00       	jmp    c00219e3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c002192e:	83 bc 24 3c 02 00 00 00 	cmp    DWORD PTR [esp+0x23c],0x0
c0021936:	75 0a                	jne    c0021942 <FAT::stat(char const*, unsigned long long*, bool*)+0x42>
c0021938:	b8 04 00 00 00       	mov    eax,0x4
c002193d:	e9 a1 00 00 00       	jmp    c00219e3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c0021942:	83 ec 08             	sub    esp,0x8
c0021945:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002194c:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021953:	50                   	push   eax
c0021954:	e8 cf ee fd ff       	call   c0000828 <strcpy>
c0021959:	83 c4 10             	add    esp,0x10
c002195c:	83 ec 08             	sub    esp,0x8
c002195f:	8d 84 24 24 01 00 00 	lea    eax,[esp+0x124]
c0021966:	50                   	push   eax
c0021967:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c002196e:	e8 87 fd ff ff       	call   c00216fa <FAT::fixFilepath(char*)>
c0021973:	83 c4 10             	add    esp,0x10
c0021976:	83 ec 08             	sub    esp,0x8
c0021979:	8d 44 24 08          	lea    eax,[esp+0x8]
c002197d:	50                   	push   eax
c002197e:	8d 84 24 28 01 00 00 	lea    eax,[esp+0x128]
c0021985:	50                   	push   eax
c0021986:	e8 de 47 fe ff       	call   c0006169 <f_stat>
c002198b:	83 c4 10             	add    esp,0x10
c002198e:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021995:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c002199c:	85 c0                	test   eax,eax
c002199e:	74 07                	je     c00219a7 <FAT::stat(char const*, unsigned long long*, bool*)+0xa7>
c00219a0:	83 f8 04             	cmp    eax,0x4
c00219a3:	74 32                	je     c00219d7 <FAT::stat(char const*, unsigned long long*, bool*)+0xd7>
c00219a5:	eb 37                	jmp    c00219de <FAT::stat(char const*, unsigned long long*, bool*)+0xde>
c00219a7:	8a 44 24 0c          	mov    al,BYTE PTR [esp+0xc]
c00219ab:	0f b6 c0             	movzx  eax,al
c00219ae:	83 e0 10             	and    eax,0x10
c00219b1:	0f 95 c2             	setne  dl
c00219b4:	8b 84 24 3c 02 00 00 	mov    eax,DWORD PTR [esp+0x23c]
c00219bb:	88 10                	mov    BYTE PTR [eax],dl
c00219bd:	8b 04 24             	mov    eax,DWORD PTR [esp]
c00219c0:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00219c4:	8b 8c 24 38 02 00 00 	mov    ecx,DWORD PTR [esp+0x238]
c00219cb:	89 01                	mov    DWORD PTR [ecx],eax
c00219cd:	89 51 04             	mov    DWORD PTR [ecx+0x4],edx
c00219d0:	b8 00 00 00 00       	mov    eax,0x0
c00219d5:	eb 0c                	jmp    c00219e3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00219d7:	b8 02 00 00 00       	mov    eax,0x2
c00219dc:	eb 05                	jmp    c00219e3 <FAT::stat(char const*, unsigned long long*, bool*)+0xe3>
c00219de:	b8 01 00 00 00       	mov    eax,0x1
c00219e3:	81 c4 2c 02 00 00    	add    esp,0x22c
c00219e9:	c3                   	ret    

c00219ea <FAT::unlink(char const*)>:
c00219ea:	81 ec 1c 01 00 00    	sub    esp,0x11c
c00219f0:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c00219f8:	75 07                	jne    c0021a01 <FAT::unlink(char const*)+0x17>
c00219fa:	b8 04 00 00 00       	mov    eax,0x4
c00219ff:	eb 5c                	jmp    c0021a5d <FAT::unlink(char const*)+0x73>
c0021a01:	83 ec 08             	sub    esp,0x8
c0021a04:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021a0b:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a0f:	50                   	push   eax
c0021a10:	e8 13 ee fd ff       	call   c0000828 <strcpy>
c0021a15:	83 c4 10             	add    esp,0x10
c0021a18:	83 ec 08             	sub    esp,0x8
c0021a1b:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021a1f:	50                   	push   eax
c0021a20:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021a27:	e8 ce fc ff ff       	call   c00216fa <FAT::fixFilepath(char*)>
c0021a2c:	83 c4 10             	add    esp,0x10
c0021a2f:	83 ec 0c             	sub    esp,0xc
c0021a32:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021a36:	50                   	push   eax
c0021a37:	e8 7f 4a fe ff       	call   c00064bb <f_unlink>
c0021a3c:	83 c4 10             	add    esp,0x10
c0021a3f:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021a46:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021a4d:	85 c0                	test   eax,eax
c0021a4f:	75 07                	jne    c0021a58 <FAT::unlink(char const*)+0x6e>
c0021a51:	b8 00 00 00 00       	mov    eax,0x0
c0021a56:	eb 05                	jmp    c0021a5d <FAT::unlink(char const*)+0x73>
c0021a58:	b8 01 00 00 00       	mov    eax,0x1
c0021a5d:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021a63:	c3                   	ret    

c0021a64 <FAT::chfatattr(char const*, unsigned char, unsigned char)>:
c0021a64:	81 ec 2c 01 00 00    	sub    esp,0x12c
c0021a6a:	8b 94 24 38 01 00 00 	mov    edx,DWORD PTR [esp+0x138]
c0021a71:	8b 84 24 3c 01 00 00 	mov    eax,DWORD PTR [esp+0x13c]
c0021a78:	88 54 24 0c          	mov    BYTE PTR [esp+0xc],dl
c0021a7c:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0021a80:	83 bc 24 34 01 00 00 00 	cmp    DWORD PTR [esp+0x134],0x0
c0021a88:	75 0a                	jne    c0021a94 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x30>
c0021a8a:	b8 04 00 00 00       	mov    eax,0x4
c0021a8f:	e9 1c 01 00 00       	jmp    c0021bb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021a94:	83 ec 08             	sub    esp,0x8
c0021a97:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021a9e:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021aa2:	50                   	push   eax
c0021aa3:	e8 80 ed fd ff       	call   c0000828 <strcpy>
c0021aa8:	83 c4 10             	add    esp,0x10
c0021aab:	83 ec 08             	sub    esp,0x8
c0021aae:	8d 44 24 20          	lea    eax,[esp+0x20]
c0021ab2:	50                   	push   eax
c0021ab3:	ff b4 24 3c 01 00 00 	push   DWORD PTR [esp+0x13c]
c0021aba:	e8 3b fc ff ff       	call   c00216fa <FAT::fixFilepath(char*)>
c0021abf:	83 c4 10             	add    esp,0x10
c0021ac2:	c6 84 24 1f 01 00 00 00 	mov    BYTE PTR [esp+0x11f],0x0
c0021aca:	c6 84 24 1e 01 00 00 00 	mov    BYTE PTR [esp+0x11e],0x0
c0021ad2:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021ad7:	83 e0 01             	and    eax,0x1
c0021ada:	74 08                	je     c0021ae4 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x80>
c0021adc:	80 8c 24 1f 01 00 00 01 	or     BYTE PTR [esp+0x11f],0x1
c0021ae4:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021ae9:	83 e0 02             	and    eax,0x2
c0021aec:	74 08                	je     c0021af6 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x92>
c0021aee:	80 8c 24 1f 01 00 00 20 	or     BYTE PTR [esp+0x11f],0x20
c0021af6:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021afb:	83 e0 04             	and    eax,0x4
c0021afe:	74 08                	je     c0021b08 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xa4>
c0021b00:	80 8c 24 1f 01 00 00 04 	or     BYTE PTR [esp+0x11f],0x4
c0021b08:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c0021b0d:	83 e0 08             	and    eax,0x8
c0021b10:	74 08                	je     c0021b1a <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xb6>
c0021b12:	80 8c 24 1f 01 00 00 02 	or     BYTE PTR [esp+0x11f],0x2
c0021b1a:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021b1f:	83 e0 01             	and    eax,0x1
c0021b22:	74 08                	je     c0021b2c <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xc8>
c0021b24:	80 8c 24 1e 01 00 00 01 	or     BYTE PTR [esp+0x11e],0x1
c0021b2c:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021b31:	83 e0 02             	and    eax,0x2
c0021b34:	74 08                	je     c0021b3e <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xda>
c0021b36:	80 8c 24 1e 01 00 00 20 	or     BYTE PTR [esp+0x11e],0x20
c0021b3e:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021b43:	83 e0 04             	and    eax,0x4
c0021b46:	74 08                	je     c0021b50 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xec>
c0021b48:	80 8c 24 1e 01 00 00 04 	or     BYTE PTR [esp+0x11e],0x4
c0021b50:	0f b6 44 24 0c       	movzx  eax,BYTE PTR [esp+0xc]
c0021b55:	83 e0 08             	and    eax,0x8
c0021b58:	74 08                	je     c0021b62 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0xfe>
c0021b5a:	80 8c 24 1e 01 00 00 02 	or     BYTE PTR [esp+0x11e],0x2
c0021b62:	8a 84 24 1f 01 00 00 	mov    al,BYTE PTR [esp+0x11f]
c0021b69:	08 84 24 1e 01 00 00 	or     BYTE PTR [esp+0x11e],al
c0021b70:	0f b6 94 24 1e 01 00 00 	movzx  edx,BYTE PTR [esp+0x11e]
c0021b78:	0f b6 84 24 1f 01 00 00 	movzx  eax,BYTE PTR [esp+0x11f]
c0021b80:	83 ec 04             	sub    esp,0x4
c0021b83:	52                   	push   edx
c0021b84:	50                   	push   eax
c0021b85:	8d 44 24 24          	lea    eax,[esp+0x24]
c0021b89:	50                   	push   eax
c0021b8a:	e8 ce 4f fe ff       	call   c0006b5d <f_chmod>
c0021b8f:	83 c4 10             	add    esp,0x10
c0021b92:	89 84 24 18 01 00 00 	mov    DWORD PTR [esp+0x118],eax
c0021b99:	8b 84 24 18 01 00 00 	mov    eax,DWORD PTR [esp+0x118]
c0021ba0:	85 c0                	test   eax,eax
c0021ba2:	75 07                	jne    c0021bab <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x147>
c0021ba4:	b8 00 00 00 00       	mov    eax,0x0
c0021ba9:	eb 05                	jmp    c0021bb0 <FAT::chfatattr(char const*, unsigned char, unsigned char)+0x14c>
c0021bab:	b8 01 00 00 00       	mov    eax,0x1
c0021bb0:	81 c4 2c 01 00 00    	add    esp,0x12c
c0021bb6:	c3                   	ret    
c0021bb7:	90                   	nop

c0021bb8 <FAT::rename(char const*, char const*)>:
c0021bb8:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0021bbe:	83 bc 24 24 02 00 00 00 	cmp    DWORD PTR [esp+0x224],0x0
c0021bc6:	74 0a                	je     c0021bd2 <FAT::rename(char const*, char const*)+0x1a>
c0021bc8:	83 bc 24 28 02 00 00 00 	cmp    DWORD PTR [esp+0x228],0x0
c0021bd0:	75 0a                	jne    c0021bdc <FAT::rename(char const*, char const*)+0x24>
c0021bd2:	b8 04 00 00 00       	mov    eax,0x4
c0021bd7:	e9 98 00 00 00       	jmp    c0021c74 <FAT::rename(char const*, char const*)+0xbc>
c0021bdc:	83 ec 08             	sub    esp,0x8
c0021bdf:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021be6:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021bed:	50                   	push   eax
c0021bee:	e8 35 ec fd ff       	call   c0000828 <strcpy>
c0021bf3:	83 c4 10             	add    esp,0x10
c0021bf6:	83 ec 08             	sub    esp,0x8
c0021bf9:	8d 84 24 14 01 00 00 	lea    eax,[esp+0x114]
c0021c00:	50                   	push   eax
c0021c01:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021c08:	e8 ed fa ff ff       	call   c00216fa <FAT::fixFilepath(char*)>
c0021c0d:	83 c4 10             	add    esp,0x10
c0021c10:	83 ec 08             	sub    esp,0x8
c0021c13:	ff b4 24 30 02 00 00 	push   DWORD PTR [esp+0x230]
c0021c1a:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021c1e:	50                   	push   eax
c0021c1f:	e8 04 ec fd ff       	call   c0000828 <strcpy>
c0021c24:	83 c4 10             	add    esp,0x10
c0021c27:	83 ec 08             	sub    esp,0x8
c0021c2a:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c2e:	50                   	push   eax
c0021c2f:	ff b4 24 2c 02 00 00 	push   DWORD PTR [esp+0x22c]
c0021c36:	e8 bf fa ff ff       	call   c00216fa <FAT::fixFilepath(char*)>
c0021c3b:	83 c4 10             	add    esp,0x10
c0021c3e:	83 ec 08             	sub    esp,0x8
c0021c41:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021c45:	50                   	push   eax
c0021c46:	8d 84 24 18 01 00 00 	lea    eax,[esp+0x118]
c0021c4d:	50                   	push   eax
c0021c4e:	e8 17 4c fe ff       	call   c000686a <f_rename>
c0021c53:	83 c4 10             	add    esp,0x10
c0021c56:	89 84 24 0c 02 00 00 	mov    DWORD PTR [esp+0x20c],eax
c0021c5d:	8b 84 24 0c 02 00 00 	mov    eax,DWORD PTR [esp+0x20c]
c0021c64:	85 c0                	test   eax,eax
c0021c66:	75 07                	jne    c0021c6f <FAT::rename(char const*, char const*)+0xb7>
c0021c68:	b8 00 00 00 00       	mov    eax,0x0
c0021c6d:	eb 05                	jmp    c0021c74 <FAT::rename(char const*, char const*)+0xbc>
c0021c6f:	b8 01 00 00 00       	mov    eax,0x1
c0021c74:	81 c4 1c 02 00 00    	add    esp,0x21c
c0021c7a:	c3                   	ret    
c0021c7b:	90                   	nop

c0021c7c <FAT::mkdir(char const*)>:
c0021c7c:	81 ec 1c 01 00 00    	sub    esp,0x11c
c0021c82:	83 bc 24 24 01 00 00 00 	cmp    DWORD PTR [esp+0x124],0x0
c0021c8a:	75 07                	jne    c0021c93 <FAT::mkdir(char const*)+0x17>
c0021c8c:	b8 04 00 00 00       	mov    eax,0x4
c0021c91:	eb 5c                	jmp    c0021cef <FAT::mkdir(char const*)+0x73>
c0021c93:	83 ec 08             	sub    esp,0x8
c0021c96:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021c9d:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021ca1:	50                   	push   eax
c0021ca2:	e8 81 eb fd ff       	call   c0000828 <strcpy>
c0021ca7:	83 c4 10             	add    esp,0x10
c0021caa:	83 ec 08             	sub    esp,0x8
c0021cad:	8d 44 24 14          	lea    eax,[esp+0x14]
c0021cb1:	50                   	push   eax
c0021cb2:	ff b4 24 2c 01 00 00 	push   DWORD PTR [esp+0x12c]
c0021cb9:	e8 3c fa ff ff       	call   c00216fa <FAT::fixFilepath(char*)>
c0021cbe:	83 c4 10             	add    esp,0x10
c0021cc1:	83 ec 0c             	sub    esp,0xc
c0021cc4:	8d 44 24 18          	lea    eax,[esp+0x18]
c0021cc8:	50                   	push   eax
c0021cc9:	e8 70 49 fe ff       	call   c000663e <f_mkdir>
c0021cce:	83 c4 10             	add    esp,0x10
c0021cd1:	89 84 24 0c 01 00 00 	mov    DWORD PTR [esp+0x10c],eax
c0021cd8:	8b 84 24 0c 01 00 00 	mov    eax,DWORD PTR [esp+0x10c]
c0021cdf:	85 c0                	test   eax,eax
c0021ce1:	75 07                	jne    c0021cea <FAT::mkdir(char const*)+0x6e>
c0021ce3:	b8 00 00 00 00       	mov    eax,0x0
c0021ce8:	eb 05                	jmp    c0021cef <FAT::mkdir(char const*)+0x73>
c0021cea:	b8 01 00 00 00       	mov    eax,0x1
c0021cef:	81 c4 1c 01 00 00    	add    esp,0x11c
c0021cf5:	c3                   	ret    

c0021cf6 <FAT::exists(char const*)>:
c0021cf6:	81 ec 2c 02 00 00    	sub    esp,0x22c
c0021cfc:	83 ec 08             	sub    esp,0x8
c0021cff:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021d06:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021d0a:	50                   	push   eax
c0021d0b:	e8 18 eb fd ff       	call   c0000828 <strcpy>
c0021d10:	83 c4 10             	add    esp,0x10
c0021d13:	83 ec 08             	sub    esp,0x8
c0021d16:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021d1a:	50                   	push   eax
c0021d1b:	ff b4 24 3c 02 00 00 	push   DWORD PTR [esp+0x23c]
c0021d22:	e8 d3 f9 ff ff       	call   c00216fa <FAT::fixFilepath(char*)>
c0021d27:	83 c4 10             	add    esp,0x10
c0021d2a:	83 ec 08             	sub    esp,0x8
c0021d2d:	8d 84 24 08 01 00 00 	lea    eax,[esp+0x108]
c0021d34:	50                   	push   eax
c0021d35:	8d 44 24 0c          	lea    eax,[esp+0xc]
c0021d39:	50                   	push   eax
c0021d3a:	e8 2a 44 fe ff       	call   c0006169 <f_stat>
c0021d3f:	83 c4 10             	add    esp,0x10
c0021d42:	89 84 24 1c 02 00 00 	mov    DWORD PTR [esp+0x21c],eax
c0021d49:	8b 84 24 1c 02 00 00 	mov    eax,DWORD PTR [esp+0x21c]
c0021d50:	85 c0                	test   eax,eax
c0021d52:	75 04                	jne    c0021d58 <FAT::exists(char const*)+0x62>
c0021d54:	b0 01                	mov    al,0x1
c0021d56:	eb 02                	jmp    c0021d5a <FAT::exists(char const*)+0x64>
c0021d58:	b0 00                	mov    al,0x0
c0021d5a:	81 c4 2c 02 00 00    	add    esp,0x22c
c0021d60:	c3                   	ret    
c0021d61:	90                   	nop

c0021d62 <ISO9660::format(LogicalDisk*, int, char const*, int)>:
c0021d62:	b8 08 00 00 00       	mov    eax,0x8
c0021d67:	c3                   	ret    

c0021d68 <ISO9660::seek(void*, unsigned long long)>:
c0021d68:	53                   	push   ebx
c0021d69:	b8 04 00 00 00       	mov    eax,0x4
c0021d6e:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021d72:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0021d76:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0021d7a:	85 d2                	test   edx,edx
c0021d7c:	74 17                	je     c0021d95 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021d7e:	89 c8                	mov    eax,ecx
c0021d80:	3b 5a 08             	cmp    ebx,DWORD PTR [edx+0x8]
c0021d83:	1b 42 0c             	sbb    eax,DWORD PTR [edx+0xc]
c0021d86:	b8 01 00 00 00       	mov    eax,0x1
c0021d8b:	73 08                	jae    c0021d95 <ISO9660::seek(void*, unsigned long long)+0x2d>
c0021d8d:	89 5a 10             	mov    DWORD PTR [edx+0x10],ebx
c0021d90:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
c0021d93:	31 c0                	xor    eax,eax
c0021d95:	5b                   	pop    ebx
c0021d96:	c3                   	ret    
c0021d97:	90                   	nop

c0021d98 <ISO9660::tell(void*, unsigned long long*)>:
c0021d98:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021d9c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021da0:	85 d2                	test   edx,edx
c0021da2:	74 12                	je     c0021db6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021da4:	85 c0                	test   eax,eax
c0021da6:	74 0e                	je     c0021db6 <ISO9660::tell(void*, unsigned long long*)+0x1e>
c0021da8:	8b 4a 14             	mov    ecx,DWORD PTR [edx+0x14]
c0021dab:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
c0021dae:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021db1:	89 10                	mov    DWORD PTR [eax],edx
c0021db3:	31 c0                	xor    eax,eax
c0021db5:	c3                   	ret    
c0021db6:	b8 04 00 00 00       	mov    eax,0x4
c0021dbb:	c3                   	ret    

c0021dbc <ISO9660::getName()>:
c0021dbc:	b8 fc d2 02 c0       	mov    eax,0xc002d2fc
c0021dc1:	c3                   	ret    

c0021dc2 <ISO9660::stat(void*, unsigned long long*)>:
c0021dc2:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0021dc6:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0021dca:	85 d2                	test   edx,edx
c0021dcc:	74 12                	je     c0021de0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021dce:	85 c0                	test   eax,eax
c0021dd0:	74 0e                	je     c0021de0 <ISO9660::stat(void*, unsigned long long*)+0x1e>
c0021dd2:	8b 4a 0c             	mov    ecx,DWORD PTR [edx+0xc]
c0021dd5:	8b 52 08             	mov    edx,DWORD PTR [edx+0x8]
c0021dd8:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
c0021ddb:	89 10                	mov    DWORD PTR [eax],edx
c0021ddd:	31 c0                	xor    eax,eax
c0021ddf:	c3                   	ret    
c0021de0:	b8 04 00 00 00       	mov    eax,0x4
c0021de5:	c3                   	ret    

c0021de6 <ISO9660::chfatattr(char const*, unsigned char, unsigned char)>:
c0021de6:	b8 01 00 00 00       	mov    eax,0x1
c0021deb:	c3                   	ret    

c0021dec <ISO9660::unlink(char const*)>:
c0021dec:	b8 01 00 00 00       	mov    eax,0x1
c0021df1:	c3                   	ret    

c0021df2 <ISO9660::write(void*, unsigned long, void*, int*)>:
c0021df2:	b8 01 00 00 00       	mov    eax,0x1
c0021df7:	c3                   	ret    

c0021df8 <ISO9660::rename(char const*, char const*)>:
c0021df8:	b8 01 00 00 00       	mov    eax,0x1
c0021dfd:	c3                   	ret    

c0021dfe <ISO9660::mkdir(char const*)>:
c0021dfe:	b8 01 00 00 00       	mov    eax,0x1
c0021e03:	c3                   	ret    

c0021e04 <ISO9660::close(void*)>:
c0021e04:	83 ec 0c             	sub    esp,0xc
c0021e07:	b8 04 00 00 00       	mov    eax,0x4
c0021e0c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e10:	85 d2                	test   edx,edx
c0021e12:	74 0e                	je     c0021e22 <ISO9660::close(void*)+0x1e>
c0021e14:	83 ec 0c             	sub    esp,0xc
c0021e17:	52                   	push   edx
c0021e18:	e8 9b da fe ff       	call   c000f8b8 <free>
c0021e1d:	83 c4 10             	add    esp,0x10
c0021e20:	31 c0                	xor    eax,eax
c0021e22:	83 c4 0c             	add    esp,0xc
c0021e25:	c3                   	ret    

c0021e26 <ISO9660::closeDir(void*)>:
c0021e26:	83 ec 0c             	sub    esp,0xc
c0021e29:	b8 04 00 00 00       	mov    eax,0x4
c0021e2e:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0021e32:	85 d2                	test   edx,edx
c0021e34:	74 0e                	je     c0021e44 <ISO9660::closeDir(void*)+0x1e>
c0021e36:	83 ec 0c             	sub    esp,0xc
c0021e39:	52                   	push   edx
c0021e3a:	e8 79 da fe ff       	call   c000f8b8 <free>
c0021e3f:	83 c4 10             	add    esp,0x10
c0021e42:	31 c0                	xor    eax,eax
c0021e44:	83 c4 0c             	add    esp,0xc
c0021e47:	c3                   	ret    

c0021e48 <ISO9660::~ISO9660()>:
c0021e48:	83 ec 0c             	sub    esp,0xc
c0021e4b:	ba 60 d3 02 c0       	mov    edx,0xc002d360
c0021e50:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e54:	89 10                	mov    DWORD PTR [eax],edx
c0021e56:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0021e5a:	83 ec 0c             	sub    esp,0xc
c0021e5d:	50                   	push   eax
c0021e5e:	e8 13 13 ff ff       	call   c0013176 <Filesystem::~Filesystem()>
c0021e63:	83 c4 10             	add    esp,0x10
c0021e66:	90                   	nop
c0021e67:	83 c4 0c             	add    esp,0xc
c0021e6a:	c3                   	ret    
c0021e6b:	90                   	nop

c0021e6c <ISO9660::~ISO9660()>:
c0021e6c:	83 ec 0c             	sub    esp,0xc
c0021e6f:	83 ec 0c             	sub    esp,0xc
c0021e72:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e76:	e8 cd ff ff ff       	call   c0021e48 <ISO9660::~ISO9660()>
c0021e7b:	83 c4 10             	add    esp,0x10
c0021e7e:	83 ec 08             	sub    esp,0x8
c0021e81:	6a 08                	push   0x8
c0021e83:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0021e87:	e8 db 0e ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0021e8c:	83 c4 10             	add    esp,0x10
c0021e8f:	83 c4 0c             	add    esp,0xc
c0021e92:	c3                   	ret    

c0021e93 <__memmem(unsigned char*, int, unsigned char*, int)>:
c0021e93:	55                   	push   ebp
c0021e94:	31 c9                	xor    ecx,ecx
c0021e96:	57                   	push   edi
c0021e97:	56                   	push   esi
c0021e98:	53                   	push   ebx
c0021e99:	8b 6c 24 14          	mov    ebp,DWORD PTR [esp+0x14]
c0021e9d:	8b 74 24 18          	mov    esi,DWORD PTR [esp+0x18]
c0021ea1:	89 eb                	mov    ebx,ebp
c0021ea3:	2b 74 24 20          	sub    esi,DWORD PTR [esp+0x20]
c0021ea7:	39 ce                	cmp    esi,ecx
c0021ea9:	7e 17                	jle    c0021ec2 <__memmem(unsigned char*, int, unsigned char*, int)+0x2f>
c0021eab:	31 d2                	xor    edx,edx
c0021ead:	3b 54 24 20          	cmp    edx,DWORD PTR [esp+0x20]
c0021eb1:	7d 13                	jge    c0021ec6 <__memmem(unsigned char*, int, unsigned char*, int)+0x33>
c0021eb3:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0021eb7:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c0021eba:	38 04 17             	cmp    BYTE PTR [edi+edx*1],al
c0021ebd:	75 0d                	jne    c0021ecc <__memmem(unsigned char*, int, unsigned char*, int)+0x39>
c0021ebf:	42                   	inc    edx
c0021ec0:	eb eb                	jmp    c0021ead <__memmem(unsigned char*, int, unsigned char*, int)+0x1a>
c0021ec2:	31 c0                	xor    eax,eax
c0021ec4:	eb 0a                	jmp    c0021ed0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021ec6:	8d 44 0d 00          	lea    eax,[ebp+ecx*1+0x0]
c0021eca:	eb 04                	jmp    c0021ed0 <__memmem(unsigned char*, int, unsigned char*, int)+0x3d>
c0021ecc:	41                   	inc    ecx
c0021ecd:	43                   	inc    ebx
c0021ece:	eb d7                	jmp    c0021ea7 <__memmem(unsigned char*, int, unsigned char*, int)+0x14>
c0021ed0:	5b                   	pop    ebx
c0021ed1:	5e                   	pop    esi
c0021ed2:	5f                   	pop    edi
c0021ed3:	5d                   	pop    ebp
c0021ed4:	c3                   	ret    

c0021ed5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>:
c0021ed5:	57                   	push   edi
c0021ed6:	56                   	push   esi
c0021ed7:	53                   	push   ebx
c0021ed8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0021edc:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0021ee0:	39 0d 80 25 03 c0    	cmp    DWORD PTR ds:0xc0032580,ecx
c0021ee6:	75 08                	jne    c0021ef0 <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x1b>
c0021ee8:	38 05 d4 e3 02 c0    	cmp    BYTE PTR ds:0xc002e3d4,al
c0021eee:	74 2b                	je     c0021f1b <readSectorFromCDROM(unsigned int, unsigned char*, char)+0x46>
c0021ef0:	83 ec 0c             	sub    esp,0xc
c0021ef3:	a2 d4 e3 02 c0       	mov    ds:0xc002e3d4,al
c0021ef8:	68 a0 25 03 c0       	push   0xc00325a0
c0021efd:	0f be c0             	movsx  eax,al
c0021f00:	6a 01                	push   0x1
c0021f02:	89 0d 80 25 03 c0    	mov    DWORD PTR ds:0xc0032580,ecx
c0021f08:	31 db                	xor    ebx,ebx
c0021f0a:	53                   	push   ebx
c0021f0b:	51                   	push   ecx
c0021f0c:	ff 34 85 5c f3 02 c0 	push   DWORD PTR [eax*4-0x3ffd0ca4]
c0021f13:	e8 a8 48 ff ff       	call   c00167c0 <LogicalDisk::read(unsigned long long, int, void*)>
c0021f18:	83 c4 20             	add    esp,0x20
c0021f1b:	be a0 25 03 c0       	mov    esi,0xc00325a0
c0021f20:	b9 00 08 00 00       	mov    ecx,0x800
c0021f25:	8b 7c 24 14          	mov    edi,DWORD PTR [esp+0x14]
c0021f29:	fc                   	cld    
c0021f2a:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0021f2c:	5b                   	pop    ebx
c0021f2d:	5e                   	pop    esi
c0021f2e:	5f                   	pop    edi
c0021f2f:	c3                   	ret    

c0021f30 <ISO9660::tryMount(LogicalDisk*, int)>:
c0021f30:	81 ec 10 08 00 00    	sub    esp,0x810
c0021f36:	8a 84 24 1c 08 00 00 	mov    al,BYTE PTR [esp+0x81c]
c0021f3d:	83 c0 41             	add    eax,0x41
c0021f40:	0f be c0             	movsx  eax,al
c0021f43:	50                   	push   eax
c0021f44:	8d 44 24 08          	lea    eax,[esp+0x8]
c0021f48:	50                   	push   eax
c0021f49:	6a 10                	push   0x10
c0021f4b:	e8 85 ff ff ff       	call   c0021ed5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0021f50:	83 c4 10             	add    esp,0x10
c0021f53:	31 c0                	xor    eax,eax
c0021f55:	80 7c 24 01 43       	cmp    BYTE PTR [esp+0x1],0x43
c0021f5a:	75 1d                	jne    c0021f79 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f5c:	80 7c 24 02 44       	cmp    BYTE PTR [esp+0x2],0x44
c0021f61:	75 16                	jne    c0021f79 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f63:	80 7c 24 03 30       	cmp    BYTE PTR [esp+0x3],0x30
c0021f68:	75 0f                	jne    c0021f79 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f6a:	80 7c 24 04 30       	cmp    BYTE PTR [esp+0x4],0x30
c0021f6f:	75 08                	jne    c0021f79 <ISO9660::tryMount(LogicalDisk*, int)+0x49>
c0021f71:	80 7c 24 05 31       	cmp    BYTE PTR [esp+0x5],0x31
c0021f76:	0f 94 c0             	sete   al
c0021f79:	81 c4 0c 08 00 00    	add    esp,0x80c
c0021f7f:	c3                   	ret    

c0021f80 <ISO9660::read(void*, unsigned long, void*, int*)>:
c0021f80:	55                   	push   ebp
c0021f81:	57                   	push   edi
c0021f82:	56                   	push   esi
c0021f83:	53                   	push   ebx
c0021f84:	81 ec 2c 08 00 00    	sub    esp,0x82c
c0021f8a:	8b ac 24 44 08 00 00 	mov    ebp,DWORD PTR [esp+0x844]
c0021f91:	85 ed                	test   ebp,ebp
c0021f93:	0f 84 d6 01 00 00    	je     c002216f <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021f99:	83 bc 24 50 08 00 00 00 	cmp    DWORD PTR [esp+0x850],0x0
c0021fa1:	0f 84 c8 01 00 00    	je     c002216f <ISO9660::read(void*, unsigned long, void*, int*)+0x1ef>
c0021fa7:	b8 01 00 00 00       	mov    eax,0x1
c0021fac:	80 7d 18 00          	cmp    BYTE PTR [ebp+0x18],0x0
c0021fb0:	0f 85 be 01 00 00    	jne    c0022174 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c0021fb6:	31 d2                	xor    edx,edx
c0021fb8:	8b 84 24 48 08 00 00 	mov    eax,DWORD PTR [esp+0x848]
c0021fbf:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0021fc2:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
c0021fc5:	8b 7d 14             	mov    edi,DWORD PTR [ebp+0x14]
c0021fc8:	89 04 24             	mov    DWORD PTR [esp],eax
c0021fcb:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0021fcf:	01 f0                	add    eax,esi
c0021fd1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0021fd4:	11 fa                	adc    edx,edi
c0021fd6:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c0021fda:	89 5c 24 0c          	mov    DWORD PTR [esp+0xc],ebx
c0021fde:	39 44 24 08          	cmp    DWORD PTR [esp+0x8],eax
c0021fe2:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c0021fe6:	19 d3                	sbb    ebx,edx
c0021fe8:	72 0a                	jb     c0021ff4 <ISO9660::read(void*, unsigned long, void*, int*)+0x74>
c0021fea:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0021fee:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0021ff2:	eb 13                	jmp    c0022007 <ISO9660::read(void*, unsigned long, void*, int*)+0x87>
c0021ff4:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0021ff8:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0021ffc:	29 f0                	sub    eax,esi
c0021ffe:	19 fa                	sbb    edx,edi
c0022000:	89 04 24             	mov    DWORD PTR [esp],eax
c0022003:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0022007:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c002200a:	8b 55 04             	mov    edx,DWORD PTR [ebp+0x4]
c002200d:	0f a4 c2 0b          	shld   edx,eax,0xb
c0022011:	c1 e0 0b             	shl    eax,0xb
c0022014:	01 f0                	add    eax,esi
c0022016:	11 fa                	adc    edx,edi
c0022018:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002201c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022020:	51                   	push   ecx
c0022021:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022025:	50                   	push   eax
c0022026:	8d 5c 24 28          	lea    ebx,[esp+0x28]
c002202a:	53                   	push   ebx
c002202b:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c002202f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0022033:	0f ac d0 0b          	shrd   eax,edx,0xb
c0022037:	50                   	push   eax
c0022038:	e8 98 fe ff ff       	call   c0021ed5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002203d:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c0022041:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c0022044:	89 7c 24 2c          	mov    DWORD PTR [esp+0x2c],edi
c0022048:	81 e2 ff 07 00 00    	and    edx,0x7ff
c002204e:	83 c4 10             	add    esp,0x10
c0022051:	b8 00 08 00 00       	mov    eax,0x800
c0022056:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c002205a:	29 d0                	sub    eax,edx
c002205c:	39 c7                	cmp    edi,eax
c002205e:	83 de 00             	sbb    esi,0x0
c0022061:	7d 1c                	jge    c002207f <ISO9660::read(void*, unsigned long, void*, int*)+0xff>
c0022063:	83 7c 24 1c 00       	cmp    DWORD PTR [esp+0x1c],0x0
c0022068:	75 12                	jne    c002207c <ISO9660::read(void*, unsigned long, void*, int*)+0xfc>
c002206a:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022071:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0022077:	e9 ef 00 00 00       	jmp    c002216b <ISO9660::read(void*, unsigned long, void*, int*)+0x1eb>
c002207c:	8b 04 24             	mov    eax,DWORD PTR [esp]
c002207f:	01 d3                	add    ebx,edx
c0022081:	31 d2                	xor    edx,edx
c0022083:	39 c2                	cmp    edx,eax
c0022085:	7d 10                	jge    c0022097 <ISO9660::read(void*, unsigned long, void*, int*)+0x117>
c0022087:	8a 0c 13             	mov    cl,BYTE PTR [ebx+edx*1]
c002208a:	8b bc 24 4c 08 00 00 	mov    edi,DWORD PTR [esp+0x84c]
c0022091:	88 0c 17             	mov    BYTE PTR [edi+edx*1],cl
c0022094:	42                   	inc    edx
c0022095:	eb ec                	jmp    c0022083 <ISO9660::read(void*, unsigned long, void*, int*)+0x103>
c0022097:	89 c7                	mov    edi,eax
c0022099:	85 c0                	test   eax,eax
c002209b:	79 02                	jns    c002209f <ISO9660::read(void*, unsigned long, void*, int*)+0x11f>
c002209d:	31 ff                	xor    edi,edi
c002209f:	99                   	cdq    
c00220a0:	01 c7                	add    edi,eax
c00220a2:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00220a6:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00220aa:	8b 74 24 04          	mov    esi,DWORD PTR [esp+0x4]
c00220ae:	03 bc 24 4c 08 00 00 	add    edi,DWORD PTR [esp+0x84c]
c00220b5:	01 c1                	add    ecx,eax
c00220b7:	11 d3                	adc    ebx,edx
c00220b9:	89 4c 24 10          	mov    DWORD PTR [esp+0x10],ecx
c00220bd:	89 5c 24 14          	mov    DWORD PTR [esp+0x14],ebx
c00220c1:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
c00220c4:	29 c3                	sub    ebx,eax
c00220c6:	19 d6                	sbb    esi,edx
c00220c8:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00220cb:	89 74 24 04          	mov    DWORD PTR [esp+0x4],esi
c00220cf:	b8 ff 07 00 00       	mov    eax,0x7ff
c00220d4:	3b 04 24             	cmp    eax,DWORD PTR [esp]
c00220d7:	b8 00 00 00 00       	mov    eax,0x0
c00220dc:	1b 44 24 04          	sbb    eax,DWORD PTR [esp+0x4]
c00220e0:	7d 3e                	jge    c0022120 <ISO9660::read(void*, unsigned long, void*, int*)+0x1a0>
c00220e2:	52                   	push   edx
c00220e3:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00220e7:	50                   	push   eax
c00220e8:	57                   	push   edi
c00220e9:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00220ed:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c00220f1:	0f ac d0 0b          	shrd   eax,edx,0xb
c00220f5:	50                   	push   eax
c00220f6:	e8 da fd ff ff       	call   c0021ed5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00220fb:	81 44 24 20 00 08 00 00 	add    DWORD PTR [esp+0x20],0x800
c0022103:	83 54 24 24 00       	adc    DWORD PTR [esp+0x24],0x0
c0022108:	81 c7 00 08 00 00    	add    edi,0x800
c002210e:	81 44 24 10 00 f8 ff ff 	add    DWORD PTR [esp+0x10],0xfffff800
c0022116:	83 54 24 14 ff       	adc    DWORD PTR [esp+0x14],0xffffffff
c002211b:	83 c4 10             	add    esp,0x10
c002211e:	eb af                	jmp    c00220cf <ISO9660::read(void*, unsigned long, void*, int*)+0x14f>
c0022120:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022124:	0b 04 24             	or     eax,DWORD PTR [esp]
c0022127:	74 27                	je     c0022150 <ISO9660::read(void*, unsigned long, void*, int*)+0x1d0>
c0022129:	50                   	push   eax
c002212a:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c002212e:	50                   	push   eax
c002212f:	8d 74 24 28          	lea    esi,[esp+0x28]
c0022133:	56                   	push   esi
c0022134:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0022138:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c002213c:	0f ac d9 0b          	shrd   ecx,ebx,0xb
c0022140:	51                   	push   ecx
c0022141:	e8 8f fd ff ff       	call   c0021ed5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022146:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002214a:	fc                   	cld    
c002214b:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002214d:	83 c4 10             	add    esp,0x10
c0022150:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022157:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c002215b:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c002215f:	89 18                	mov    DWORD PTR [eax],ebx
c0022161:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022165:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0022168:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c002216b:	31 c0                	xor    eax,eax
c002216d:	eb 05                	jmp    c0022174 <ISO9660::read(void*, unsigned long, void*, int*)+0x1f4>
c002216f:	b8 04 00 00 00       	mov    eax,0x4
c0022174:	81 c4 2c 08 00 00    	add    esp,0x82c
c002217a:	5b                   	pop    ebx
c002217b:	5e                   	pop    esi
c002217c:	5f                   	pop    edi
c002217d:	5d                   	pop    ebp
c002217e:	c3                   	ret    
c002217f:	90                   	nop

c0022180 <ISO9660::readDir(void*, unsigned long, void*, int*)>:
c0022180:	55                   	push   ebp
c0022181:	57                   	push   edi
c0022182:	56                   	push   esi
c0022183:	53                   	push   ebx
c0022184:	81 ec 5c 09 00 00    	sub    esp,0x95c
c002218a:	8b ac 24 74 09 00 00 	mov    ebp,DWORD PTR [esp+0x974]
c0022191:	85 ed                	test   ebp,ebp
c0022193:	0f 84 52 02 00 00    	je     c00223eb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26b>
c0022199:	83 bc 24 80 09 00 00 00 	cmp    DWORD PTR [esp+0x980],0x0
c00221a1:	0f 84 44 02 00 00    	je     c00223eb <ISO9660::readDir(void*, unsigned long, void*, int*)+0x26b>
c00221a7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00221aa:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
c00221ad:	75 0a                	jne    c00221b9 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x39>
c00221af:	b8 07 00 00 00       	mov    eax,0x7
c00221b4:	e9 37 02 00 00       	jmp    c00223f0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x270>
c00221b9:	50                   	push   eax
c00221ba:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c00221be:	50                   	push   eax
c00221bf:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c00221c6:	53                   	push   ebx
c00221c7:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00221ca:	c1 e0 0b             	shl    eax,0xb
c00221cd:	03 45 10             	add    eax,DWORD PTR [ebp+0x10]
c00221d0:	c1 e8 0b             	shr    eax,0xb
c00221d3:	50                   	push   eax
c00221d4:	e8 fc fc ff ff       	call   c0021ed5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c00221d9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00221dc:	83 c4 10             	add    esp,0x10
c00221df:	89 c1                	mov    ecx,eax
c00221e1:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00221e4:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c00221ea:	8a 1c 0b             	mov    bl,BYTE PTR [ebx+ecx*1]
c00221ed:	84 db                	test   bl,bl
c00221ef:	0f 85 8b 00 00 00    	jne    c0022280 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x100>
c00221f5:	8d b0 ff 07 00 00    	lea    esi,[eax+0x7ff]
c00221fb:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00221fe:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0022204:	29 c6                	sub    esi,eax
c0022206:	89 74 24 0c          	mov    DWORD PTR [esp+0xc],esi
c002220a:	89 f3                	mov    ebx,esi
c002220c:	89 f1                	mov    ecx,esi
c002220e:	c1 fb 1f             	sar    ebx,0x1f
c0022211:	01 f0                	add    eax,esi
c0022213:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c0022216:	11 da                	adc    edx,ebx
c0022218:	89 04 24             	mov    DWORD PTR [esp],eax
c002221b:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c002221f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c0022222:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c0022225:	89 d8                	mov    eax,ebx
c0022227:	39 74 24 0c          	cmp    DWORD PTR [esp+0xc],esi
c002222b:	ba 00 00 00 00       	mov    edx,0x0
c0022230:	19 f8                	sbb    eax,edi
c0022232:	b8 00 00 00 00       	mov    eax,0x0
c0022237:	73 08                	jae    c0022241 <ISO9660::readDir(void*, unsigned long, void*, int*)+0xc1>
c0022239:	89 f0                	mov    eax,esi
c002223b:	89 fa                	mov    edx,edi
c002223d:	29 c8                	sub    eax,ecx
c002223f:	19 da                	sbb    edx,ebx
c0022241:	89 d7                	mov    edi,edx
c0022243:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c0022246:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c0022249:	09 c7                	or     edi,eax
c002224b:	0f 84 5e ff ff ff    	je     c00221af <ISO9660::readDir(void*, unsigned long, void*, int*)+0x2f>
c0022251:	57                   	push   edi
c0022252:	0f be 45 19          	movsx  eax,BYTE PTR [ebp+0x19]
c0022256:	50                   	push   eax
c0022257:	8d 9c 24 58 01 00 00 	lea    ebx,[esp+0x158]
c002225e:	53                   	push   ebx
c002225f:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0022262:	c1 e0 0b             	shl    eax,0xb
c0022265:	03 44 24 0c          	add    eax,DWORD PTR [esp+0xc]
c0022269:	c1 e8 0b             	shr    eax,0xb
c002226c:	50                   	push   eax
c002226d:	e8 63 fc ff ff       	call   c0021ed5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022272:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022275:	83 c4 10             	add    esp,0x10
c0022278:	25 ff 07 00 00       	and    eax,0x7ff
c002227d:	8a 1c 03             	mov    bl,BYTE PTR [ebx+eax*1]
c0022280:	31 ff                	xor    edi,edi
c0022282:	56                   	push   esi
c0022283:	6a 28                	push   0x28
c0022285:	6a 00                	push   0x0
c0022287:	8d 44 24 24          	lea    eax,[esp+0x24]
c002228b:	50                   	push   eax
c002228c:	e8 db e4 fd ff       	call   c000076c <memset>
c0022291:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022294:	25 ff 07 00 00       	and    eax,0x7ff
c0022299:	89 c6                	mov    esi,eax
c002229b:	83 c6 21             	add    esi,0x21
c002229e:	83 d7 00             	adc    edi,0x0
c00222a1:	83 c4 10             	add    esp,0x10
c00222a4:	31 c9                	xor    ecx,ecx
c00222a6:	8a 84 34 50 01 00 00 	mov    al,BYTE PTR [esp+esi*1+0x150]
c00222ad:	83 f9 28             	cmp    ecx,0x28
c00222b0:	88 04 24             	mov    BYTE PTR [esp],al
c00222b3:	0f 94 c2             	sete   dl
c00222b6:	88 d0                	mov    al,dl
c00222b8:	ba ff 07 00 00       	mov    edx,0x7ff
c00222bd:	39 f2                	cmp    edx,esi
c00222bf:	ba 00 00 00 00       	mov    edx,0x0
c00222c4:	19 fa                	sbb    edx,edi
c00222c6:	0f 92 c2             	setb   dl
c00222c9:	09 c2                	or     edx,eax
c00222cb:	80 3c 24 00          	cmp    BYTE PTR [esp],0x0
c00222cf:	0f 94 c0             	sete   al
c00222d2:	08 d0                	or     al,dl
c00222d4:	75 16                	jne    c00222ec <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00222d6:	80 3c 24 3b          	cmp    BYTE PTR [esp],0x3b
c00222da:	74 10                	je     c00222ec <ISO9660::readDir(void*, unsigned long, void*, int*)+0x16c>
c00222dc:	8a 04 24             	mov    al,BYTE PTR [esp]
c00222df:	88 44 0c 18          	mov    BYTE PTR [esp+ecx*1+0x18],al
c00222e3:	41                   	inc    ecx
c00222e4:	83 c6 01             	add    esi,0x1
c00222e7:	83 d7 00             	adc    edi,0x0
c00222ea:	eb ba                	jmp    c00222a6 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x126>
c00222ec:	66 c7 44 24 40 00 00 	mov    WORD PTR [esp+0x40],0x0
c00222f3:	83 ec 0c             	sub    esp,0xc
c00222f6:	8d 74 24 24          	lea    esi,[esp+0x24]
c00222fa:	56                   	push   esi
c00222fb:	e8 88 e4 fd ff       	call   c0000788 <strlen>
c0022300:	8d bc 24 60 09 00 00 	lea    edi,[esp+0x960]
c0022307:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c002230b:	c7 44 24 58 00 00 00 00 	mov    DWORD PTR [esp+0x58],0x0
c0022313:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0022316:	5a                   	pop    edx
c0022317:	25 ff 07 00 00       	and    eax,0x7ff
c002231c:	59                   	pop    ecx
c002231d:	01 f8                	add    eax,edi
c002231f:	8a 80 19 f8 ff ff    	mov    al,BYTE PTR [eax-0x7e7]
c0022325:	83 e0 02             	and    eax,0x2
c0022328:	3c 01                	cmp    al,0x1
c002232a:	19 c0                	sbb    eax,eax
c002232c:	83 c0 02             	add    eax,0x2
c002232f:	89 44 24 54          	mov    DWORD PTR [esp+0x54],eax
c0022333:	56                   	push   esi
c0022334:	8d 44 24 5c          	lea    eax,[esp+0x5c]
c0022338:	50                   	push   eax
c0022339:	e8 ea e4 fd ff       	call   c0000828 <strcpy>
c002233e:	8a 44 24 60          	mov    al,BYTE PTR [esp+0x60]
c0022342:	83 c4 10             	add    esp,0x10
c0022345:	84 c0                	test   al,al
c0022347:	75 21                	jne    c002236a <ISO9660::readDir(void*, unsigned long, void*, int*)+0x1ea>
c0022349:	c7 44 24 44 01 00 00 00 	mov    DWORD PTR [esp+0x44],0x1
c0022351:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c0022359:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0022361:	66 c7 44 24 50 2e 00 	mov    WORD PTR [esp+0x50],0x2e
c0022368:	eb 28                	jmp    c0022392 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c002236a:	fe c8                	dec    al
c002236c:	75 24                	jne    c0022392 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x212>
c002236e:	c7 44 24 44 02 00 00 00 	mov    DWORD PTR [esp+0x44],0x2
c0022376:	c7 44 24 48 00 00 00 00 	mov    DWORD PTR [esp+0x48],0x0
c002237e:	c7 44 24 4c 02 00 00 00 	mov    DWORD PTR [esp+0x4c],0x2
c0022386:	66 c7 44 24 50 2e 2e 	mov    WORD PTR [esp+0x50],0x2e2e
c002238d:	c6 44 24 52 00       	mov    BYTE PTR [esp+0x52],0x0
c0022392:	8d 74 24 40          	lea    esi,[esp+0x40]
c0022396:	8b 8c 24 78 09 00 00 	mov    ecx,DWORD PTR [esp+0x978]
c002239d:	8b bc 24 7c 09 00 00 	mov    edi,DWORD PTR [esp+0x97c]
c00223a4:	fc                   	cld    
c00223a5:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00223a7:	0f b6 f3             	movzx  esi,bl
c00223aa:	8b 84 24 80 09 00 00 	mov    eax,DWORD PTR [esp+0x980]
c00223b1:	31 db                	xor    ebx,ebx
c00223b3:	c7 00 10 01 00 00    	mov    DWORD PTR [eax],0x110
c00223b9:	89 df                	mov    edi,ebx
c00223bb:	01 75 10             	add    DWORD PTR [ebp+0x10],esi
c00223be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00223c1:	11 5d 14             	adc    DWORD PTR [ebp+0x14],ebx
c00223c4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00223c7:	39 c6                	cmp    esi,eax
c00223c9:	19 d7                	sbb    edi,edx
c00223cb:	72 10                	jb     c00223dd <ISO9660::readDir(void*, unsigned long, void*, int*)+0x25d>
c00223cd:	c7 45 08 00 00 00 00 	mov    DWORD PTR [ebp+0x8],0x0
c00223d4:	c7 45 0c 00 00 00 00 	mov    DWORD PTR [ebp+0xc],0x0
c00223db:	eb 0a                	jmp    c00223e7 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x267>
c00223dd:	29 f0                	sub    eax,esi
c00223df:	19 da                	sbb    edx,ebx
c00223e1:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
c00223e4:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
c00223e7:	31 c0                	xor    eax,eax
c00223e9:	eb 05                	jmp    c00223f0 <ISO9660::readDir(void*, unsigned long, void*, int*)+0x270>
c00223eb:	b8 04 00 00 00       	mov    eax,0x4
c00223f0:	81 c4 5c 09 00 00    	add    esp,0x95c
c00223f6:	5b                   	pop    ebx
c00223f7:	5e                   	pop    esi
c00223f8:	5f                   	pop    edi
c00223f9:	5d                   	pop    ebp
c00223fa:	c3                   	ret    

c00223fb <readRoot(unsigned int*, unsigned int*, char)>:
c00223fb:	57                   	push   edi
c00223fc:	56                   	push   esi
c00223fd:	81 ec 38 08 00 00    	sub    esp,0x838
c0022403:	0f be 84 24 4c 08 00 00 	movsx  eax,BYTE PTR [esp+0x84c]
c002240b:	50                   	push   eax
c002240c:	8d 44 24 38          	lea    eax,[esp+0x38]
c0022410:	50                   	push   eax
c0022411:	6a 10                	push   0x10
c0022413:	e8 bd fa ff ff       	call   c0021ed5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c0022418:	8d b4 24 dc 00 00 00 	lea    esi,[esp+0xdc]
c002241f:	8d 7c 24 1e          	lea    edi,[esp+0x1e]
c0022423:	b9 22 00 00 00       	mov    ecx,0x22
c0022428:	fc                   	cld    
c0022429:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002242b:	8b 84 24 50 08 00 00 	mov    eax,DWORD PTR [esp+0x850]
c0022432:	8b 54 24 20          	mov    edx,DWORD PTR [esp+0x20]
c0022436:	89 10                	mov    DWORD PTR [eax],edx
c0022438:	8b 84 24 54 08 00 00 	mov    eax,DWORD PTR [esp+0x854]
c002243f:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c0022443:	89 10                	mov    DWORD PTR [eax],edx
c0022445:	81 c4 44 08 00 00    	add    esp,0x844
c002244b:	b0 01                	mov    al,0x1
c002244d:	5e                   	pop    esi
c002244e:	5f                   	pop    edi
c002244f:	c3                   	ret    

c0022450 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>:
c0022450:	55                   	push   ebp
c0022451:	57                   	push   edi
c0022452:	56                   	push   esi
c0022453:	53                   	push   ebx
c0022454:	81 ec 1c 01 00 00    	sub    esp,0x11c
c002245a:	8b 84 24 44 01 00 00 	mov    eax,DWORD PTR [esp+0x144]
c0022461:	8b 9c 24 30 01 00 00 	mov    ebx,DWORD PTR [esp+0x130]
c0022468:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002246c:	80 7b 01 3a          	cmp    BYTE PTR [ebx+0x1],0x3a
c0022470:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c0022474:	88 44 24 0c          	mov    BYTE PTR [esp+0xc],al
c0022478:	75 03                	jne    c002247d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c002247a:	83 c3 02             	add    ebx,0x2
c002247d:	80 3b 2f             	cmp    BYTE PTR [ebx],0x2f
c0022480:	75 03                	jne    c0022485 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x35>
c0022482:	43                   	inc    ebx
c0022483:	eb f8                	jmp    c002247d <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x2d>
c0022485:	51                   	push   ecx
c0022486:	68 00 01 00 00       	push   0x100
c002248b:	6a 00                	push   0x0
c002248d:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022491:	50                   	push   eax
c0022492:	e8 d5 e2 fd ff       	call   c000076c <memset>
c0022497:	83 c4 10             	add    esp,0x10
c002249a:	31 d2                	xor    edx,edx
c002249c:	8a 04 13             	mov    al,BYTE PTR [ebx+edx*1]
c002249f:	84 c0                	test   al,al
c00224a1:	74 21                	je     c00224c4 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x74>
c00224a3:	3c 2f                	cmp    al,0x2f
c00224a5:	75 0b                	jne    c00224b2 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x62>
c00224a7:	8d 5c 13 01          	lea    ebx,[ebx+edx*1+0x1]
c00224ab:	bd 01 00 00 00       	mov    ebp,0x1
c00224b0:	eb 14                	jmp    c00224c6 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x76>
c00224b2:	8d 48 9f             	lea    ecx,[eax-0x61]
c00224b5:	80 f9 19             	cmp    cl,0x19
c00224b8:	77 03                	ja     c00224bd <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x6d>
c00224ba:	83 e8 20             	sub    eax,0x20
c00224bd:	88 44 14 10          	mov    BYTE PTR [esp+edx*1+0x10],al
c00224c1:	42                   	inc    edx
c00224c2:	eb d8                	jmp    c002249c <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x4c>
c00224c4:	31 ed                	xor    ebp,ebp
c00224c6:	83 ec 0c             	sub    esp,0xc
c00224c9:	ff b4 24 44 01 00 00 	push   DWORD PTR [esp+0x144]
c00224d0:	e8 d3 d3 fe ff       	call   c000f8a8 <malloc>
c00224d5:	8b 8c 24 48 01 00 00 	mov    ecx,DWORD PTR [esp+0x148]
c00224dc:	89 c6                	mov    esi,eax
c00224de:	8d b9 ff 07 00 00    	lea    edi,[ecx+0x7ff]
c00224e4:	c1 ef 0b             	shr    edi,0xb
c00224e7:	03 bc 24 44 01 00 00 	add    edi,DWORD PTR [esp+0x144]
c00224ee:	89 7c 24 18          	mov    DWORD PTR [esp+0x18],edi
c00224f2:	83 c4 10             	add    esp,0x10
c00224f5:	0f be 7c 24 0c       	movsx  edi,BYTE PTR [esp+0xc]
c00224fa:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00224fe:	3b 8c 24 34 01 00 00 	cmp    ecx,DWORD PTR [esp+0x134]
c0022505:	74 28                	je     c002252f <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xdf>
c0022507:	52                   	push   edx
c0022508:	57                   	push   edi
c0022509:	50                   	push   eax
c002250a:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002250e:	ff b4 24 40 01 00 00 	push   DWORD PTR [esp+0x140]
c0022515:	e8 bb f9 ff ff       	call   c0021ed5 <readSectorFromCDROM(unsigned int, unsigned char*, char)>
c002251a:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002251e:	ff 84 24 44 01 00 00 	inc    DWORD PTR [esp+0x144]
c0022525:	05 00 08 00 00       	add    eax,0x800
c002252a:	83 c4 10             	add    esp,0x10
c002252d:	eb cb                	jmp    c00224fa <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0xaa>
c002252f:	83 ec 0c             	sub    esp,0xc
c0022532:	8d 7c 24 1c          	lea    edi,[esp+0x1c]
c0022536:	57                   	push   edi
c0022537:	e8 4c e2 fd ff       	call   c0000788 <strlen>
c002253c:	50                   	push   eax
c002253d:	57                   	push   edi
c002253e:	ff b4 24 50 01 00 00 	push   DWORD PTR [esp+0x150]
c0022545:	56                   	push   esi
c0022546:	e8 48 f9 ff ff       	call   c0021e93 <__memmem(unsigned char*, int, unsigned char*, int)>
c002254b:	83 c4 20             	add    esp,0x20
c002254e:	85 c0                	test   eax,eax
c0022550:	75 13                	jne    c0022565 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x115>
c0022552:	83 ec 0c             	sub    esp,0xc
c0022555:	56                   	push   esi
c0022556:	e8 5d d3 fe ff       	call   c000f8b8 <free>
c002255b:	83 c4 10             	add    esp,0x10
c002255e:	31 c0                	xor    eax,eax
c0022560:	e9 b3 00 00 00       	jmp    c0022618 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c0022565:	0f b6 78 e2          	movzx  edi,BYTE PTR [eax-0x1e]
c0022569:	0f b6 50 e3          	movzx  edx,BYTE PTR [eax-0x1d]
c002256d:	c1 e7 08             	shl    edi,0x8
c0022570:	c1 e2 10             	shl    edx,0x10
c0022573:	09 d7                	or     edi,edx
c0022575:	0f b6 50 e1          	movzx  edx,BYTE PTR [eax-0x1f]
c0022579:	09 d7                	or     edi,edx
c002257b:	0f b6 50 e4          	movzx  edx,BYTE PTR [eax-0x1c]
c002257f:	c1 e2 18             	shl    edx,0x18
c0022582:	09 d7                	or     edi,edx
c0022584:	0f b6 50 ea          	movzx  edx,BYTE PTR [eax-0x16]
c0022588:	89 d1                	mov    ecx,edx
c002258a:	0f b6 50 eb          	movzx  edx,BYTE PTR [eax-0x15]
c002258e:	c1 e1 08             	shl    ecx,0x8
c0022591:	c1 e2 10             	shl    edx,0x10
c0022594:	09 ca                	or     edx,ecx
c0022596:	0f b6 48 e9          	movzx  ecx,BYTE PTR [eax-0x17]
c002259a:	09 ca                	or     edx,ecx
c002259c:	0f b6 48 ec          	movzx  ecx,BYTE PTR [eax-0x14]
c00225a0:	c1 e1 18             	shl    ecx,0x18
c00225a3:	09 ca                	or     edx,ecx
c00225a5:	89 e9                	mov    ecx,ebp
c00225a7:	84 c9                	test   cl,cl
c00225a9:	74 3c                	je     c00225e7 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x197>
c00225ab:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c00225af:	83 ec 0c             	sub    esp,0xc
c00225b2:	56                   	push   esi
c00225b3:	e8 00 d3 fe ff       	call   c000f8b8 <free>
c00225b8:	83 c4 0c             	add    esp,0xc
c00225bb:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00225c2:	0f be 44 24 0c       	movsx  eax,BYTE PTR [esp+0xc]
c00225c7:	50                   	push   eax
c00225c8:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00225cf:	ff b4 24 4c 01 00 00 	push   DWORD PTR [esp+0x14c]
c00225d6:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c00225da:	52                   	push   edx
c00225db:	57                   	push   edi
c00225dc:	53                   	push   ebx
c00225dd:	e8 6e fe ff ff       	call   c0022450 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00225e2:	83 c4 20             	add    esp,0x20
c00225e5:	eb 31                	jmp    c0022618 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)+0x1c8>
c00225e7:	8a 40 f8             	mov    al,BYTE PTR [eax-0x8]
c00225ea:	8b 9c 24 3c 01 00 00 	mov    ebx,DWORD PTR [esp+0x13c]
c00225f1:	d0 e8                	shr    al,1
c00225f3:	89 3b                	mov    DWORD PTR [ebx],edi
c00225f5:	83 e0 01             	and    eax,0x1
c00225f8:	8b 9c 24 40 01 00 00 	mov    ebx,DWORD PTR [esp+0x140]
c00225ff:	83 ec 0c             	sub    esp,0xc
c0022602:	89 13                	mov    DWORD PTR [ebx],edx
c0022604:	8b 9c 24 54 01 00 00 	mov    ebx,DWORD PTR [esp+0x154]
c002260b:	89 03                	mov    DWORD PTR [ebx],eax
c002260d:	56                   	push   esi
c002260e:	e8 a5 d2 fe ff       	call   c000f8b8 <free>
c0022613:	83 c4 10             	add    esp,0x10
c0022616:	b0 01                	mov    al,0x1
c0022618:	81 c4 1c 01 00 00    	add    esp,0x11c
c002261e:	5b                   	pop    ebx
c002261f:	5e                   	pop    esi
c0022620:	5f                   	pop    edi
c0022621:	5d                   	pop    ebp
c0022622:	c3                   	ret    

c0022623 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>:
c0022623:	55                   	push   ebp
c0022624:	57                   	push   edi
c0022625:	56                   	push   esi
c0022626:	53                   	push   ebx
c0022627:	83 ec 20             	sub    esp,0x20
c002262a:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c002262e:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
c0022632:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0022636:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c002263e:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c0022646:	0f be 7c 24 40       	movsx  edi,BYTE PTR [esp+0x40]
c002264b:	c7 03 ff ff ff ff    	mov    DWORD PTR [ebx],0xffffffff
c0022651:	c7 06 ff ff ff ff    	mov    DWORD PTR [esi],0xffffffff
c0022657:	57                   	push   edi
c0022658:	8d 44 24 14          	lea    eax,[esp+0x14]
c002265c:	50                   	push   eax
c002265d:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022661:	50                   	push   eax
c0022662:	e8 94 fd ff ff       	call   c00223fb <readRoot(unsigned int*, unsigned int*, char)>
c0022667:	5a                   	pop    edx
c0022668:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c002266c:	e8 17 e1 fd ff       	call   c0000788 <strlen>
c0022671:	83 c4 10             	add    esp,0x10
c0022674:	83 f8 03             	cmp    eax,0x3
c0022677:	77 17                	ja     c0022690 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x6d>
c0022679:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002267d:	89 03                	mov    DWORD PTR [ebx],eax
c002267f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022683:	89 06                	mov    DWORD PTR [esi],eax
c0022685:	c7 45 00 01 00 00 00 	mov    DWORD PTR [ebp+0x0],0x1
c002268c:	b0 01                	mov    al,0x1
c002268e:	eb 19                	jmp    c00226a9 <getFileData(char*, unsigned int*, unsigned int*, char, int*)+0x86>
c0022690:	50                   	push   eax
c0022691:	55                   	push   ebp
c0022692:	57                   	push   edi
c0022693:	56                   	push   esi
c0022694:	53                   	push   ebx
c0022695:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0022699:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002269d:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00226a1:	e8 aa fd ff ff       	call   c0022450 <readRecursively(char*, unsigned int, unsigned int, unsigned int*, unsigned int*, char, int*)>
c00226a6:	83 c4 20             	add    esp,0x20
c00226a9:	83 c4 1c             	add    esp,0x1c
c00226ac:	5b                   	pop    ebx
c00226ad:	5e                   	pop    esi
c00226ae:	5f                   	pop    edi
c00226af:	5d                   	pop    ebp
c00226b0:	c3                   	ret    
c00226b1:	90                   	nop

c00226b2 <ISO9660::open(char const*, void**, FileOpenMode)>:
c00226b2:	57                   	push   edi
c00226b3:	56                   	push   esi
c00226b4:	53                   	push   ebx
c00226b5:	83 ec 10             	sub    esp,0x10
c00226b8:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c00226bc:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c00226c0:	85 ff                	test   edi,edi
c00226c2:	0f 84 9d 00 00 00    	je     c0022765 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00226c8:	85 f6                	test   esi,esi
c00226ca:	0f 84 95 00 00 00    	je     c0022765 <ISO9660::open(char const*, void**, FileOpenMode)+0xb3>
c00226d0:	83 7c 24 2c 01       	cmp    DWORD PTR [esp+0x2c],0x1
c00226d5:	74 17                	je     c00226ee <ISO9660::open(char const*, void**, FileOpenMode)+0x3c>
c00226d7:	83 ec 0c             	sub    esp,0xc
c00226da:	68 17 d3 02 c0       	push   0xc002d317
c00226df:	e8 63 07 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00226e4:	83 c4 10             	add    esp,0x10
c00226e7:	b8 03 00 00 00       	mov    eax,0x3
c00226ec:	eb 7c                	jmp    c002276a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c00226ee:	83 ec 0c             	sub    esp,0xc
c00226f1:	6a 1c                	push   0x1c
c00226f3:	e8 b0 d1 fe ff       	call   c000f8a8 <malloc>
c00226f8:	89 07                	mov    DWORD PTR [edi],eax
c00226fa:	89 c3                	mov    ebx,eax
c00226fc:	58                   	pop    eax
c00226fd:	8d 44 24 18          	lea    eax,[esp+0x18]
c0022701:	50                   	push   eax
c0022702:	0f be 06             	movsx  eax,BYTE PTR [esi]
c0022705:	50                   	push   eax
c0022706:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002270a:	50                   	push   eax
c002270b:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c002270f:	50                   	push   eax
c0022710:	56                   	push   esi
c0022711:	e8 0d ff ff ff       	call   c0022623 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022716:	83 c4 20             	add    esp,0x20
c0022719:	84 c0                	test   al,al
c002271b:	74 07                	je     c0022724 <ISO9660::open(char const*, void**, FileOpenMode)+0x72>
c002271d:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c0022722:	74 0b                	je     c002272f <ISO9660::open(char const*, void**, FileOpenMode)+0x7d>
c0022724:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022728:	b8 01 00 00 00       	mov    eax,0x1
c002272d:	eb 3b                	jmp    c002276a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c002272f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022733:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c0022737:	89 03                	mov    DWORD PTR [ebx],eax
c0022739:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c0022740:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0022744:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c002274b:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c0022752:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0022755:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c002275c:	8a 06                	mov    al,BYTE PTR [esi]
c002275e:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c0022761:	31 c0                	xor    eax,eax
c0022763:	eb 05                	jmp    c002276a <ISO9660::open(char const*, void**, FileOpenMode)+0xb8>
c0022765:	b8 04 00 00 00       	mov    eax,0x4
c002276a:	83 c4 10             	add    esp,0x10
c002276d:	5b                   	pop    ebx
c002276e:	5e                   	pop    esi
c002276f:	5f                   	pop    edi
c0022770:	c3                   	ret    
c0022771:	90                   	nop

c0022772 <ISO9660::exists(char const*)>:
c0022772:	83 ec 28             	sub    esp,0x28
c0022775:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022779:	8d 54 24 18          	lea    edx,[esp+0x18]
c002277d:	52                   	push   edx
c002277e:	0f be 10             	movsx  edx,BYTE PTR [eax]
c0022781:	52                   	push   edx
c0022782:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c0022786:	52                   	push   edx
c0022787:	8d 54 24 1c          	lea    edx,[esp+0x1c]
c002278b:	52                   	push   edx
c002278c:	50                   	push   eax
c002278d:	e8 91 fe ff ff       	call   c0022623 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022792:	83 c4 3c             	add    esp,0x3c
c0022795:	c3                   	ret    

c0022796 <ISO9660::stat(char const*, unsigned long long*, bool*)>:
c0022796:	56                   	push   esi
c0022797:	53                   	push   ebx
c0022798:	83 ec 14             	sub    esp,0x14
c002279b:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]
c002279f:	8b 74 24 2c          	mov    esi,DWORD PTR [esp+0x2c]
c00227a3:	85 db                	test   ebx,ebx
c00227a5:	8b 4c 24 24          	mov    ecx,DWORD PTR [esp+0x24]
c00227a9:	0f 94 c2             	sete   dl
c00227ac:	85 f6                	test   esi,esi
c00227ae:	0f 94 c0             	sete   al
c00227b1:	08 c2                	or     dl,al
c00227b3:	75 68                	jne    c002281d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00227b5:	85 c9                	test   ecx,ecx
c00227b7:	74 64                	je     c002281d <ISO9660::stat(char const*, unsigned long long*, bool*)+0x87>
c00227b9:	83 ec 0c             	sub    esp,0xc
c00227bc:	c6 06 00             	mov    BYTE PTR [esi],0x0
c00227bf:	8d 44 24 18          	lea    eax,[esp+0x18]
c00227c3:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c00227c9:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00227d0:	50                   	push   eax
c00227d1:	0f be 01             	movsx  eax,BYTE PTR [ecx]
c00227d4:	50                   	push   eax
c00227d5:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00227d9:	50                   	push   eax
c00227da:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c00227de:	50                   	push   eax
c00227df:	51                   	push   ecx
c00227e0:	e8 3e fe ff ff       	call   c0022623 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c00227e5:	83 c4 20             	add    esp,0x20
c00227e8:	ba 01 00 00 00       	mov    edx,0x1
c00227ed:	84 c0                	test   al,al
c00227ef:	74 31                	je     c0022822 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c00227f1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00227f5:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00227fc:	89 03                	mov    DWORD PTR [ebx],eax
c00227fe:	ba 00 00 00 00       	mov    edx,0x0
c0022803:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022807:	85 c0                	test   eax,eax
c0022809:	0f 95 06             	setne  BYTE PTR [esi]
c002280c:	74 14                	je     c0022822 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002280e:	c7 03 00 00 00 00    	mov    DWORD PTR [ebx],0x0
c0022814:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c002281b:	eb 05                	jmp    c0022822 <ISO9660::stat(char const*, unsigned long long*, bool*)+0x8c>
c002281d:	ba 04 00 00 00       	mov    edx,0x4
c0022822:	83 c4 14             	add    esp,0x14
c0022825:	89 d0                	mov    eax,edx
c0022827:	5b                   	pop    ebx
c0022828:	5e                   	pop    esi
c0022829:	c3                   	ret    

c002282a <ISO9660::openDir(char const*, void**)>:
c002282a:	57                   	push   edi
c002282b:	56                   	push   esi
c002282c:	53                   	push   ebx
c002282d:	83 ec 10             	sub    esp,0x10
c0022830:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0022834:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0022838:	85 ff                	test   edi,edi
c002283a:	0f 84 95 00 00 00    	je     c00228d5 <ISO9660::openDir(char const*, void**)+0xab>
c0022840:	85 f6                	test   esi,esi
c0022842:	0f 84 8d 00 00 00    	je     c00228d5 <ISO9660::openDir(char const*, void**)+0xab>
c0022848:	83 ec 0c             	sub    esp,0xc
c002284b:	6a 1c                	push   0x1c
c002284d:	e8 56 d0 fe ff       	call   c000f8a8 <malloc>
c0022852:	89 07                	mov    DWORD PTR [edi],eax
c0022854:	89 c3                	mov    ebx,eax
c0022856:	59                   	pop    ecx
c0022857:	8d 44 24 18          	lea    eax,[esp+0x18]
c002285b:	50                   	push   eax
c002285c:	0f be 06             	movsx  eax,BYTE PTR [esi]
c002285f:	50                   	push   eax
c0022860:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022864:	50                   	push   eax
c0022865:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0022869:	50                   	push   eax
c002286a:	56                   	push   esi
c002286b:	e8 b3 fd ff ff       	call   c0022623 <getFileData(char*, unsigned int*, unsigned int*, char, int*)>
c0022870:	83 c4 20             	add    esp,0x20
c0022873:	84 c0                	test   al,al
c0022875:	74 07                	je     c002287e <ISO9660::openDir(char const*, void**)+0x54>
c0022877:	83 7c 24 0c 00       	cmp    DWORD PTR [esp+0xc],0x0
c002287c:	75 21                	jne    c002289f <ISO9660::openDir(char const*, void**)+0x75>
c002287e:	0f b6 c0             	movzx  eax,al
c0022881:	52                   	push   edx
c0022882:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022886:	50                   	push   eax
c0022887:	68 3d d3 02 c0       	push   0xc002d33d
c002288c:	e8 b6 05 ff ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0022891:	c6 43 18 01          	mov    BYTE PTR [ebx+0x18],0x1
c0022895:	83 c4 10             	add    esp,0x10
c0022898:	b8 01 00 00 00       	mov    eax,0x1
c002289d:	eb 3b                	jmp    c00228da <ISO9660::openDir(char const*, void**)+0xb0>
c002289f:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00228a3:	c6 43 18 00          	mov    BYTE PTR [ebx+0x18],0x0
c00228a7:	89 03                	mov    DWORD PTR [ebx],eax
c00228a9:	c7 43 10 00 00 00 00 	mov    DWORD PTR [ebx+0x10],0x0
c00228b0:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00228b4:	c7 43 14 00 00 00 00 	mov    DWORD PTR [ebx+0x14],0x0
c00228bb:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00228c2:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c00228c5:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c00228cc:	8a 06                	mov    al,BYTE PTR [esi]
c00228ce:	88 43 19             	mov    BYTE PTR [ebx+0x19],al
c00228d1:	31 c0                	xor    eax,eax
c00228d3:	eb 05                	jmp    c00228da <ISO9660::openDir(char const*, void**)+0xb0>
c00228d5:	b8 04 00 00 00       	mov    eax,0x4
c00228da:	83 c4 10             	add    esp,0x10
c00228dd:	5b                   	pop    ebx
c00228de:	5e                   	pop    esi
c00228df:	5f                   	pop    edi
c00228e0:	c3                   	ret    
c00228e1:	90                   	nop

c00228e2 <ISO9660::ISO9660()>:
c00228e2:	83 ec 0c             	sub    esp,0xc
c00228e5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228e9:	83 ec 0c             	sub    esp,0xc
c00228ec:	50                   	push   eax
c00228ed:	e8 60 08 ff ff       	call   c0013152 <Filesystem::Filesystem()>
c00228f2:	83 c4 10             	add    esp,0x10
c00228f5:	ba 60 d3 02 c0       	mov    edx,0xc002d360
c00228fa:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00228fe:	89 10                	mov    DWORD PTR [eax],edx
c0022900:	90                   	nop
c0022901:	83 c4 0c             	add    esp,0xc
c0022904:	c3                   	ret    
c0022905:	90                   	nop

c0022906 <SoundChannel::~SoundChannel()>:
c0022906:	83 ec 0c             	sub    esp,0xc
c0022909:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002290d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
c0022910:	83 ec 0c             	sub    esp,0xc
c0022913:	50                   	push   eax
c0022914:	e8 9f cf fe ff       	call   c000f8b8 <free>
c0022919:	83 c4 10             	add    esp,0x10
c002291c:	90                   	nop
c002291d:	83 c4 0c             	add    esp,0xc
c0022920:	c3                   	ret    
c0022921:	90                   	nop

c0022922 <SoundChannel::setSpeed(float)>:
c0022922:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022926:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002292a:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
c002292d:	c3                   	ret    

c002292e <SoundChannel::getSpeed()>:
c002292e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022932:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
c0022935:	c3                   	ret    

c0022936 <SoundChannel::setVolume(int)>:
c0022936:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002293a:	83 f8 64             	cmp    eax,0x64
c002293d:	7e 05                	jle    c0022944 <SoundChannel::setVolume(int)+0xe>
c002293f:	b8 64 00 00 00       	mov    eax,0x64
c0022944:	85 c0                	test   eax,eax
c0022946:	79 02                	jns    c002294a <SoundChannel::setVolume(int)+0x14>
c0022948:	31 c0                	xor    eax,eax
c002294a:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002294e:	89 42 24             	mov    DWORD PTR [edx+0x24],eax
c0022951:	c3                   	ret    

c0022952 <SoundChannel::getVolume()>:
c0022952:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022956:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
c0022959:	c3                   	ret    

c002295a <SoundChannel::pause()>:
c002295a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002295e:	c6 40 20 01          	mov    BYTE PTR [eax+0x20],0x1
c0022962:	c3                   	ret    
c0022963:	90                   	nop

c0022964 <SoundChannel::SoundChannel(int, int, int, int)>:
c0022964:	83 ec 1c             	sub    esp,0x1c
c0022967:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c002296b:	e8 ea ff ff ff       	call   c002295a <SoundChannel::pause()>
c0022970:	83 c4 04             	add    esp,0x4
c0022973:	6a 50                	push   0x50
c0022975:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c0022979:	e8 b8 ff ff ff       	call   c0022936 <SoundChannel::setVolume(int)>
c002297e:	83 c4 08             	add    esp,0x8
c0022981:	a1 dc d3 02 c0       	mov    eax,ds:0xc002d3dc
c0022986:	50                   	push   eax
c0022987:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c002298b:	e8 92 ff ff ff       	call   c0022922 <SoundChannel::setSpeed(float)>
c0022990:	83 c4 08             	add    esp,0x8
c0022993:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022997:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c002299b:	89 10                	mov    DWORD PTR [eax],edx
c002299d:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229a1:	8b 54 24 28          	mov    edx,DWORD PTR [esp+0x28]
c00229a5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c00229a8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229ac:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00229b0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00229b3:	83 7c 24 30 ff       	cmp    DWORD PTR [esp+0x30],0xffffffff
c00229b8:	75 23                	jne    c00229dd <SoundChannel::SoundChannel(int, int, int, int)+0x79>
c00229ba:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229be:	8b 10                	mov    edx,DWORD PTR [eax]
c00229c0:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229c4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00229c7:	0f af c2             	imul   eax,edx
c00229ca:	85 c0                	test   eax,eax
c00229cc:	79 03                	jns    c00229d1 <SoundChannel::SoundChannel(int, int, int, int)+0x6d>
c00229ce:	83 c0 03             	add    eax,0x3
c00229d1:	c1 f8 02             	sar    eax,0x2
c00229d4:	05 a0 0f 00 00       	add    eax,0xfa0
c00229d9:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00229dd:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229e1:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c00229e5:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
c00229e8:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229ec:	c7 40 18 00 00 00 00 	mov    DWORD PTR [eax+0x18],0x0
c00229f3:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c00229f7:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
c00229fe:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a02:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022a05:	c1 e0 02             	shl    eax,0x2
c0022a08:	83 ec 0c             	sub    esp,0xc
c0022a0b:	50                   	push   eax
c0022a0c:	e8 97 ce fe ff       	call   c000f8a8 <malloc>
c0022a11:	83 c4 10             	add    esp,0x10
c0022a14:	89 c2                	mov    edx,eax
c0022a16:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a1a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
c0022a1d:	83 ec 04             	sub    esp,0x4
c0022a20:	8d 44 24 08          	lea    eax,[esp+0x8]
c0022a24:	50                   	push   eax
c0022a25:	6a 01                	push   0x1
c0022a27:	6a 04                	push   0x4
c0022a29:	e8 52 61 fe ff       	call   c0008b80 <src_new>
c0022a2e:	83 c4 10             	add    esp,0x10
c0022a31:	89 c2                	mov    edx,eax
c0022a33:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022a37:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
c0022a3a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022a3e:	85 c0                	test   eax,eax
c0022a40:	74 10                	je     c0022a52 <SoundChannel::SoundChannel(int, int, int, int)+0xee>
c0022a42:	83 ec 0c             	sub    esp,0xc
c0022a45:	68 c0 d3 02 c0       	push   0xc002d3c0
c0022a4a:	e8 b2 7d ff ff       	call   c001a801 <Krnl::panic(char const*)>
c0022a4f:	83 c4 10             	add    esp,0x10
c0022a52:	a0 a0 31 03 c0       	mov    al,ds:0xc00331a0
c0022a57:	83 f0 01             	xor    eax,0x1
c0022a5a:	84 c0                	test   al,al
c0022a5c:	74 57                	je     c0022ab5 <SoundChannel::SoundChannel(int, int, int, int)+0x151>
c0022a5e:	a1 e0 d3 02 c0       	mov    eax,ds:0xc002d3e0
c0022a63:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022a67:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022a6f:	81 7c 24 0c ff 00 00 00 	cmp    DWORD PTR [esp+0xc],0xff
c0022a77:	7f 35                	jg     c0022aae <SoundChannel::SoundChannel(int, int, int, int)+0x14a>
c0022a79:	83 ec 0c             	sub    esp,0xc
c0022a7c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0022a80:	e8 6a 50 00 00       	call   c0027aef <__floatsisf>
c0022a85:	83 c4 10             	add    esp,0x10
c0022a88:	8b 15 e0 d3 02 c0    	mov    edx,DWORD PTR ds:0xc002d3e0
c0022a8e:	83 ec 08             	sub    esp,0x8
c0022a91:	52                   	push   edx
c0022a92:	50                   	push   eax
c0022a93:	e8 69 4c 00 00       	call   c0027701 <__mulsf3>
c0022a98:	83 c4 10             	add    esp,0x10
c0022a9b:	89 c2                	mov    edx,eax
c0022a9d:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0022aa1:	89 14 85 a0 2d 03 c0 	mov    DWORD PTR [eax*4-0x3ffcd260],edx
c0022aa8:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022aac:	eb c1                	jmp    c0022a6f <SoundChannel::SoundChannel(int, int, int, int)+0x10b>
c0022aae:	c6 05 a0 31 03 c0 01 	mov    BYTE PTR ds:0xc00331a0,0x1
c0022ab5:	90                   	nop
c0022ab6:	83 c4 1c             	add    esp,0x1c
c0022ab9:	c3                   	ret    

c0022aba <SoundChannel::play()>:
c0022aba:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022abe:	c6 40 20 00          	mov    BYTE PTR [eax+0x20],0x0
c0022ac2:	c3                   	ret    
c0022ac3:	90                   	nop

c0022ac4 <SoundChannel::paused()>:
c0022ac4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ac8:	8a 40 20             	mov    al,BYTE PTR [eax+0x20]
c0022acb:	c3                   	ret    

c0022acc <SoundChannel::getSampleRate()>:
c0022acc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ad0:	8b 00                	mov    eax,DWORD PTR [eax]
c0022ad2:	c3                   	ret    
c0022ad3:	90                   	nop

c0022ad4 <SoundChannel::getBits()>:
c0022ad4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ad8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0022adb:	c3                   	ret    

c0022adc <SoundChannel::getBufferUsed()>:
c0022adc:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ae0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
c0022ae3:	c3                   	ret    

c0022ae4 <SoundChannel::getBufferSize()>:
c0022ae4:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022ae8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
c0022aeb:	c3                   	ret    

c0022aec <SoundChannel::unbuffer(float*, int, int)>:
c0022aec:	56                   	push   esi
c0022aed:	53                   	push   ebx
c0022aee:	83 ec 40             	sub    esp,0x40
c0022af1:	8b 5c 24 4c          	mov    ebx,DWORD PTR [esp+0x4c]
c0022af5:	8b 43 10             	mov    eax,DWORD PTR [ebx+0x10]
c0022af8:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0022afc:	8b 43 1c             	mov    eax,DWORD PTR [ebx+0x1c]
c0022aff:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c0022b03:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0022b07:	89 44 24 24          	mov    DWORD PTR [esp+0x24],eax
c0022b0b:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0022b0f:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0022b13:	ff 74 24 54          	push   DWORD PTR [esp+0x54]
c0022b17:	e8 d3 4f 00 00       	call   c0027aef <__floatsisf>
c0022b1c:	5a                   	pop    edx
c0022b1d:	89 c6                	mov    esi,eax
c0022b1f:	ff 33                	push   DWORD PTR [ebx]
c0022b21:	e8 c9 4f 00 00       	call   c0027aef <__floatsisf>
c0022b26:	59                   	pop    ecx
c0022b27:	5a                   	pop    edx
c0022b28:	ff 73 28             	push   DWORD PTR [ebx+0x28]
c0022b2b:	50                   	push   eax
c0022b2c:	e8 d0 4b 00 00       	call   c0027701 <__mulsf3>
c0022b31:	59                   	pop    ecx
c0022b32:	5a                   	pop    edx
c0022b33:	50                   	push   eax
c0022b34:	56                   	push   esi
c0022b35:	e8 8a 4d 00 00       	call   c00278c4 <__divsf3>
c0022b3a:	89 04 24             	mov    DWORD PTR [esp],eax
c0022b3d:	e8 7d 62 00 00       	call   c0028dbf <__extendsfdf2>
c0022b42:	59                   	pop    ecx
c0022b43:	5e                   	pop    esi
c0022b44:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c0022b48:	89 54 24 34          	mov    DWORD PTR [esp+0x34],edx
c0022b4c:	c7 44 24 2c 00 00 00 00 	mov    DWORD PTR [esp+0x2c],0x0
c0022b54:	8d 44 24 14          	lea    eax,[esp+0x14]
c0022b58:	50                   	push   eax
c0022b59:	ff 73 0c             	push   DWORD PTR [ebx+0xc]
c0022b5c:	e8 14 5c fe ff       	call   c0008775 <src_process>
c0022b61:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0022b65:	8b 4b 10             	mov    ecx,DWORD PTR [ebx+0x10]
c0022b68:	83 c4 0c             	add    esp,0xc
c0022b6b:	8b 43 14             	mov    eax,DWORD PTR [ebx+0x14]
c0022b6e:	29 53 1c             	sub    DWORD PTR [ebx+0x1c],edx
c0022b71:	29 d0                	sub    eax,edx
c0022b73:	c1 e0 02             	shl    eax,0x2
c0022b76:	50                   	push   eax
c0022b77:	8d 04 91             	lea    eax,[ecx+edx*4]
c0022b7a:	50                   	push   eax
c0022b7b:	51                   	push   ecx
c0022b7c:	e8 23 db fd ff       	call   c00006a4 <memmove>
c0022b81:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022b85:	83 c4 44             	add    esp,0x44
c0022b88:	5b                   	pop    ebx
c0022b89:	5e                   	pop    esi
c0022b8a:	c3                   	ret    
c0022b8b:	90                   	nop

c0022b8c <SoundChannel::buffer8(unsigned char*, int)>:
c0022b8c:	55                   	push   ebp
c0022b8d:	57                   	push   edi
c0022b8e:	56                   	push   esi
c0022b8f:	53                   	push   ebx
c0022b90:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0022b94:	8b 6c 24 18          	mov    ebp,DWORD PTR [esp+0x18]
c0022b98:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022b9b:	8b 7c 24 1c          	mov    edi,DWORD PTR [esp+0x1c]
c0022b9f:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022ba2:	74 7a                	je     c0022c1e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022ba4:	85 ff                	test   edi,edi
c0022ba6:	7e 76                	jle    c0022c1e <SoundChannel::buffer8(unsigned char*, int)+0x92>
c0022ba8:	0f b6 5d 00          	movzx  ebx,BYTE PTR [ebp+0x0]
c0022bac:	8d 70 01             	lea    esi,[eax+0x1]
c0022baf:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022bb2:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022bb5:	8b 1c 9d a0 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd260]
c0022bbc:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022bbf:	8b 42 1c             	mov    eax,DWORD PTR [edx+0x1c]
c0022bc2:	3b 42 14             	cmp    eax,DWORD PTR [edx+0x14]
c0022bc5:	74 5e                	je     c0022c25 <SoundChannel::buffer8(unsigned char*, int)+0x99>
c0022bc7:	83 ff 01             	cmp    edi,0x1
c0022bca:	74 4b                	je     c0022c17 <SoundChannel::buffer8(unsigned char*, int)+0x8b>
c0022bcc:	0f b6 5d 01          	movzx  ebx,BYTE PTR [ebp+0x1]
c0022bd0:	8b 4a 10             	mov    ecx,DWORD PTR [edx+0x10]
c0022bd3:	8d 70 01             	lea    esi,[eax+0x1]
c0022bd6:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022bd9:	8b 1c 9d a0 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd260]
c0022be0:	89 1c 81             	mov    DWORD PTR [ecx+eax*4],ebx
c0022be3:	b8 02 00 00 00       	mov    eax,0x2
c0022be8:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022beb:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022bee:	75 23                	jne    c0022c13 <SoundChannel::buffer8(unsigned char*, int)+0x87>
c0022bf0:	eb 27                	jmp    c0022c19 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022bf2:	0f b6 5c 05 00       	movzx  ebx,BYTE PTR [ebp+eax*1+0x0]
c0022bf7:	8d 71 01             	lea    esi,[ecx+0x1]
c0022bfa:	40                   	inc    eax
c0022bfb:	89 72 1c             	mov    DWORD PTR [edx+0x1c],esi
c0022bfe:	8b 72 10             	mov    esi,DWORD PTR [edx+0x10]
c0022c01:	8b 1c 9d a0 2d 03 c0 	mov    ebx,DWORD PTR [ebx*4-0x3ffcd260]
c0022c08:	89 1c 8e             	mov    DWORD PTR [esi+ecx*4],ebx
c0022c0b:	8b 4a 1c             	mov    ecx,DWORD PTR [edx+0x1c]
c0022c0e:	3b 4a 14             	cmp    ecx,DWORD PTR [edx+0x14]
c0022c11:	74 06                	je     c0022c19 <SoundChannel::buffer8(unsigned char*, int)+0x8d>
c0022c13:	39 c7                	cmp    edi,eax
c0022c15:	75 db                	jne    c0022bf2 <SoundChannel::buffer8(unsigned char*, int)+0x66>
c0022c17:	89 f8                	mov    eax,edi
c0022c19:	5b                   	pop    ebx
c0022c1a:	5e                   	pop    esi
c0022c1b:	5f                   	pop    edi
c0022c1c:	5d                   	pop    ebp
c0022c1d:	c3                   	ret    
c0022c1e:	5b                   	pop    ebx
c0022c1f:	31 c0                	xor    eax,eax
c0022c21:	5e                   	pop    esi
c0022c22:	5f                   	pop    edi
c0022c23:	5d                   	pop    ebp
c0022c24:	c3                   	ret    
c0022c25:	b8 01 00 00 00       	mov    eax,0x1
c0022c2a:	eb ed                	jmp    c0022c19 <SoundChannel::buffer8(unsigned char*, int)+0x8d>

c0022c2c <SoundDevice::SoundDevice(char const*)>:
c0022c2c:	83 ec 1c             	sub    esp,0x1c
c0022c2f:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c33:	83 ec 08             	sub    esp,0x8
c0022c36:	ff 74 24 2c          	push   DWORD PTR [esp+0x2c]
c0022c3a:	50                   	push   eax
c0022c3b:	e8 1a 18 ff ff       	call   c001445a <Device::Device(char const*)>
c0022c40:	83 c4 10             	add    esp,0x10
c0022c43:	ba ec d3 02 c0       	mov    edx,0xc002d3ec
c0022c48:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c4c:	89 10                	mov    DWORD PTR [eax],edx
c0022c4e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c52:	c7 80 10 01 00 00 09 00 00 00 	mov    DWORD PTR [eax+0x110],0x9
c0022c5c:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c60:	c7 80 58 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x158],0x0
c0022c6a:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022c72:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022c77:	7f 19                	jg     c0022c92 <SoundDevice::SoundDevice(char const*)+0x66>
c0022c79:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022c7d:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022c81:	83 c2 54             	add    edx,0x54
c0022c84:	c7 44 90 0c 00 00 00 00 	mov    DWORD PTR [eax+edx*4+0xc],0x0
c0022c8c:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022c90:	eb e0                	jmp    c0022c72 <SoundDevice::SoundDevice(char const*)+0x46>
c0022c92:	90                   	nop
c0022c93:	83 c4 1c             	add    esp,0x1c
c0022c96:	c3                   	ret    
c0022c97:	90                   	nop

c0022c98 <SoundDevice::~SoundDevice()>:
c0022c98:	53                   	push   ebx
c0022c99:	83 ec 18             	sub    esp,0x18
c0022c9c:	ba ec d3 02 c0       	mov    edx,0xc002d3ec
c0022ca1:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ca5:	89 10                	mov    DWORD PTR [eax],edx
c0022ca7:	c7 44 24 0c 00 00 00 00 	mov    DWORD PTR [esp+0xc],0x0
c0022caf:	83 7c 24 0c 1f       	cmp    DWORD PTR [esp+0xc],0x1f
c0022cb4:	7f 46                	jg     c0022cfc <SoundDevice::~SoundDevice()+0x64>
c0022cb6:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022cba:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022cbe:	83 c2 54             	add    edx,0x54
c0022cc1:	8b 44 90 0c          	mov    eax,DWORD PTR [eax+edx*4+0xc]
c0022cc5:	85 c0                	test   eax,eax
c0022cc7:	74 2d                	je     c0022cf6 <SoundDevice::~SoundDevice()+0x5e>
c0022cc9:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022ccd:	8b 54 24 0c          	mov    edx,DWORD PTR [esp+0xc]
c0022cd1:	83 c2 54             	add    edx,0x54
c0022cd4:	8b 5c 90 0c          	mov    ebx,DWORD PTR [eax+edx*4+0xc]
c0022cd8:	85 db                	test   ebx,ebx
c0022cda:	74 1a                	je     c0022cf6 <SoundDevice::~SoundDevice()+0x5e>
c0022cdc:	83 ec 0c             	sub    esp,0xc
c0022cdf:	53                   	push   ebx
c0022ce0:	e8 21 fc ff ff       	call   c0022906 <SoundChannel::~SoundChannel()>
c0022ce5:	83 c4 10             	add    esp,0x10
c0022ce8:	83 ec 08             	sub    esp,0x8
c0022ceb:	6a 2c                	push   0x2c
c0022ced:	53                   	push   ebx
c0022cee:	e8 74 00 ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0022cf3:	83 c4 10             	add    esp,0x10
c0022cf6:	ff 44 24 0c          	inc    DWORD PTR [esp+0xc]
c0022cfa:	eb b3                	jmp    c0022caf <SoundDevice::~SoundDevice()+0x17>
c0022cfc:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0022d00:	83 ec 0c             	sub    esp,0xc
c0022d03:	50                   	push   eax
c0022d04:	e8 45 14 ff ff       	call   c001414e <Device::~Device()>
c0022d09:	83 c4 10             	add    esp,0x10
c0022d0c:	90                   	nop
c0022d0d:	83 c4 18             	add    esp,0x18
c0022d10:	5b                   	pop    ebx
c0022d11:	c3                   	ret    

c0022d12 <SoundDevice::~SoundDevice()>:
c0022d12:	83 ec 0c             	sub    esp,0xc
c0022d15:	83 ec 0c             	sub    esp,0xc
c0022d18:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d1c:	e8 77 ff ff ff       	call   c0022c98 <SoundDevice::~SoundDevice()>
c0022d21:	83 c4 10             	add    esp,0x10
c0022d24:	83 ec 08             	sub    esp,0x8
c0022d27:	68 e4 01 00 00       	push   0x1e4
c0022d2c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0022d30:	e8 32 00 ff ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0022d35:	83 c4 10             	add    esp,0x10
c0022d38:	83 c4 0c             	add    esp,0xc
c0022d3b:	c3                   	ret    

c0022d3c <SoundDevice::getFreeChannelNum()>:
c0022d3c:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0022d40:	31 c0                	xor    eax,eax
c0022d42:	83 bc 82 5c 01 00 00 00 	cmp    DWORD PTR [edx+eax*4+0x15c],0x0
c0022d4a:	74 09                	je     c0022d55 <SoundDevice::getFreeChannelNum()+0x19>
c0022d4c:	40                   	inc    eax
c0022d4d:	83 f8 20             	cmp    eax,0x20
c0022d50:	75 f0                	jne    c0022d42 <SoundDevice::getFreeChannelNum()+0x6>
c0022d52:	83 c8 ff             	or     eax,0xffffffff
c0022d55:	c3                   	ret    

c0022d56 <SoundDevice::addChannel(SoundChannel*)>:
c0022d56:	56                   	push   esi
c0022d57:	53                   	push   ebx
c0022d58:	51                   	push   ecx
c0022d59:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0022d5d:	8b 74 24 14          	mov    esi,DWORD PTR [esp+0x14]
c0022d61:	53                   	push   ebx
c0022d62:	e8 d5 ff ff ff       	call   c0022d3c <SoundDevice::getFreeChannelNum()>
c0022d67:	5a                   	pop    edx
c0022d68:	83 f8 ff             	cmp    eax,0xffffffff
c0022d6b:	74 51                	je     c0022dbe <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022d6d:	85 f6                	test   esi,esi
c0022d6f:	74 4d                	je     c0022dbe <SoundDevice::addChannel(SoundChannel*)+0x68>
c0022d71:	89 b4 83 5c 01 00 00 	mov    DWORD PTR [ebx+eax*4+0x15c],esi
c0022d78:	83 bb 58 01 00 00 00 	cmp    DWORD PTR [ebx+0x158],0x0
c0022d7f:	75 30                	jne    c0022db1 <SoundDevice::addChannel(SoundChannel*)+0x5b>
c0022d81:	83 ec 0c             	sub    esp,0xc
c0022d84:	56                   	push   esi
c0022d85:	e8 42 fd ff ff       	call   c0022acc <SoundChannel::getSampleRate()>
c0022d8a:	89 83 dc 01 00 00    	mov    DWORD PTR [ebx+0x1dc],eax
c0022d90:	89 34 24             	mov    DWORD PTR [esp],esi
c0022d93:	e8 3c fd ff ff       	call   c0022ad4 <SoundChannel::getBits()>
c0022d98:	83 c4 0c             	add    esp,0xc
c0022d9b:	89 83 e0 01 00 00    	mov    DWORD PTR [ebx+0x1e0],eax
c0022da1:	8b 13                	mov    edx,DWORD PTR [ebx]
c0022da3:	50                   	push   eax
c0022da4:	ff b3 dc 01 00 00    	push   DWORD PTR [ebx+0x1dc]
c0022daa:	53                   	push   ebx
c0022dab:	ff 52 28             	call   DWORD PTR [edx+0x28]
c0022dae:	83 c4 10             	add    esp,0x10
c0022db1:	ff 83 58 01 00 00    	inc    DWORD PTR [ebx+0x158]
c0022db7:	b8 01 00 00 00       	mov    eax,0x1
c0022dbc:	eb 03                	jmp    c0022dc1 <SoundDevice::addChannel(SoundChannel*)+0x6b>
c0022dbe:	83 c8 ff             	or     eax,0xffffffff
c0022dc1:	5a                   	pop    edx
c0022dc2:	5b                   	pop    ebx
c0022dc3:	5e                   	pop    esi
c0022dc4:	c3                   	ret    
c0022dc5:	90                   	nop

c0022dc6 <SoundDevice::removeChannel(int)>:
c0022dc6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0022dca:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0022dce:	83 fa 1f             	cmp    edx,0x1f
c0022dd1:	77 23                	ja     c0022df6 <SoundDevice::removeChannel(int)+0x30>
c0022dd3:	8d 14 90             	lea    edx,[eax+edx*4]
c0022dd6:	83 ba 5c 01 00 00 00 	cmp    DWORD PTR [edx+0x15c],0x0
c0022ddd:	74 17                	je     c0022df6 <SoundDevice::removeChannel(int)+0x30>
c0022ddf:	c7 82 5c 01 00 00 00 00 00 00 	mov    DWORD PTR [edx+0x15c],0x0
c0022de9:	ff 88 58 01 00 00    	dec    DWORD PTR [eax+0x158]
c0022def:	75 05                	jne    c0022df6 <SoundDevice::removeChannel(int)+0x30>
c0022df1:	8b 00                	mov    eax,DWORD PTR [eax]
c0022df3:	ff 60 2c             	jmp    DWORD PTR [eax+0x2c]
c0022df6:	c3                   	ret    
c0022df7:	90                   	nop

c0022df8 <SoundDevice::floatTo8(float*, unsigned char*, int)>:
c0022df8:	57                   	push   edi
c0022df9:	56                   	push   esi
c0022dfa:	53                   	push   ebx
c0022dfb:	31 db                	xor    ebx,ebx
c0022dfd:	83 ec 10             	sub    esp,0x10
c0022e00:	8b 74 24 28          	mov    esi,DWORD PTR [esp+0x28]
c0022e04:	3b 5c 24 2c          	cmp    ebx,DWORD PTR [esp+0x2c]
c0022e08:	0f 8d cb 00 00 00    	jge    c0022ed9 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xe1>
c0022e0e:	83 ec 0c             	sub    esp,0xc
c0022e11:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0022e15:	ff 34 98             	push   DWORD PTR [eax+ebx*4]
c0022e18:	e8 a2 5f 00 00       	call   c0028dbf <__extendsfdf2>
c0022e1d:	83 c4 10             	add    esp,0x10
c0022e20:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e24:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e28:	68 00 00 f0 3f       	push   0x3ff00000
c0022e2d:	6a 00                	push   0x0
c0022e2f:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e33:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e37:	e8 0f 4f 00 00       	call   c0027d4b <__adddf3>
c0022e3c:	83 c4 10             	add    esp,0x10
c0022e3f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e43:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e47:	68 00 00 e0 3f       	push   0x3fe00000
c0022e4c:	6a 00                	push   0x0
c0022e4e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e52:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e56:	e8 6d 55 00 00       	call   c00283c8 <__muldf3>
c0022e5b:	83 c4 10             	add    esp,0x10
c0022e5e:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0022e62:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0022e66:	68 00 00 60 40       	push   0x40600000
c0022e6b:	6a 00                	push   0x0
c0022e6d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e71:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e75:	e8 4e 55 00 00       	call   c00283c8 <__muldf3>
c0022e7a:	59                   	pop    ecx
c0022e7b:	5f                   	pop    edi
c0022e7c:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0022e80:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0022e84:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e88:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022e8c:	e8 0a 5e 00 00       	call   c0028c9b <__truncdfsf2>
c0022e91:	5a                   	pop    edx
c0022e92:	89 c7                	mov    edi,eax
c0022e94:	59                   	pop    ecx
c0022e95:	68 00 00 fe 42       	push   0x42fe0000
c0022e9a:	50                   	push   eax
c0022e9b:	e8 a5 4e 00 00       	call   c0027d45 <__gesf2>
c0022ea0:	83 c4 10             	add    esp,0x10
c0022ea3:	85 c0                	test   eax,eax
c0022ea5:	78 06                	js     c0022ead <SoundDevice::floatTo8(float*, unsigned char*, int)+0xb5>
c0022ea7:	c6 04 1e 7f          	mov    BYTE PTR [esi+ebx*1],0x7f
c0022eab:	eb 26                	jmp    c0022ed3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022ead:	50                   	push   eax
c0022eae:	50                   	push   eax
c0022eaf:	6a 00                	push   0x0
c0022eb1:	57                   	push   edi
c0022eb2:	e8 92 4e 00 00       	call   c0027d49 <__lesf2>
c0022eb7:	83 c4 10             	add    esp,0x10
c0022eba:	85 c0                	test   eax,eax
c0022ebc:	7f 06                	jg     c0022ec4 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xcc>
c0022ebe:	c6 04 1e 00          	mov    BYTE PTR [esi+ebx*1],0x0
c0022ec2:	eb 0f                	jmp    c0022ed3 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xdb>
c0022ec4:	83 ec 0c             	sub    esp,0xc
c0022ec7:	57                   	push   edi
c0022ec8:	e8 8f 5f 00 00       	call   c0028e5c <lrintf>
c0022ecd:	83 c4 10             	add    esp,0x10
c0022ed0:	88 04 1e             	mov    BYTE PTR [esi+ebx*1],al
c0022ed3:	43                   	inc    ebx
c0022ed4:	e9 2b ff ff ff       	jmp    c0022e04 <SoundDevice::floatTo8(float*, unsigned char*, int)+0xc>
c0022ed9:	83 c4 10             	add    esp,0x10
c0022edc:	5b                   	pop    ebx
c0022edd:	5e                   	pop    esi
c0022ede:	5f                   	pop    edi
c0022edf:	c3                   	ret    

c0022ee0 <SoundDevice::getAudio(int, float*, float*)>:
c0022ee0:	55                   	push   ebp
c0022ee1:	57                   	push   edi
c0022ee2:	56                   	push   esi
c0022ee3:	53                   	push   ebx
c0022ee4:	31 db                	xor    ebx,ebx
c0022ee6:	83 ec 20             	sub    esp,0x20
c0022ee9:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0022eed:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c0022ef1:	c1 e0 02             	shl    eax,0x2
c0022ef4:	50                   	push   eax
c0022ef5:	6a 00                	push   0x0
c0022ef7:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0022efb:	e8 6c d8 fd ff       	call   c000076c <memset>
c0022f00:	83 c4 10             	add    esp,0x10
c0022f03:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0022f07:	8b 84 9e 5c 01 00 00 	mov    eax,DWORD PTR [esi+ebx*4+0x15c]
c0022f0e:	85 c0                	test   eax,eax
c0022f10:	0f 84 d7 00 00 00    	je     c0022fed <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022f16:	83 ec 0c             	sub    esp,0xc
c0022f19:	50                   	push   eax
c0022f1a:	e8 a5 fb ff ff       	call   c0022ac4 <SoundChannel::paused()>
c0022f1f:	83 c4 10             	add    esp,0x10
c0022f22:	84 c0                	test   al,al
c0022f24:	0f 85 c3 00 00 00    	jne    c0022fed <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022f2a:	83 ec 0c             	sub    esp,0xc
c0022f2d:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022f34:	e8 19 fa ff ff       	call   c0022952 <SoundChannel::getVolume()>
c0022f39:	83 c4 10             	add    esp,0x10
c0022f3c:	85 c0                	test   eax,eax
c0022f3e:	0f 84 a9 00 00 00    	je     c0022fed <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022f44:	83 ec 0c             	sub    esp,0xc
c0022f47:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022f4e:	e8 ff f9 ff ff       	call   c0022952 <SoundChannel::getVolume()>
c0022f53:	83 ec 0c             	sub    esp,0xc
c0022f56:	50                   	push   eax
c0022f57:	e8 93 4b 00 00       	call   c0027aef <__floatsisf>
c0022f5c:	59                   	pop    ecx
c0022f5d:	5d                   	pop    ebp
c0022f5e:	31 ed                	xor    ebp,ebp
c0022f60:	68 00 00 c8 42       	push   0x42c80000
c0022f65:	50                   	push   eax
c0022f66:	e8 59 49 00 00       	call   c00278c4 <__divsf3>
c0022f6b:	83 c4 10             	add    esp,0x10
c0022f6e:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022f72:	ff 74 24 44          	push   DWORD PTR [esp+0x44]
c0022f76:	ff b6 dc 01 00 00    	push   DWORD PTR [esi+0x1dc]
c0022f7c:	ff 74 24 50          	push   DWORD PTR [esp+0x50]
c0022f80:	ff b4 9e 5c 01 00 00 	push   DWORD PTR [esi+ebx*4+0x15c]
c0022f87:	e8 60 fb ff ff       	call   c0022aec <SoundChannel::unbuffer(float*, int, int)>
c0022f8c:	83 c4 20             	add    esp,0x20
c0022f8f:	89 c1                	mov    ecx,eax
c0022f91:	39 cd                	cmp    ebp,ecx
c0022f93:	7d 52                	jge    c0022fe7 <SoundDevice::getAudio(int, float*, float*)+0x107>
c0022f95:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0022f99:	50                   	push   eax
c0022f9a:	50                   	push   eax
c0022f9b:	8b 44 24 40          	mov    eax,DWORD PTR [esp+0x40]
c0022f9f:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022fa2:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0022fa6:	e8 56 47 00 00       	call   c0027701 <__mulsf3>
c0022fab:	5a                   	pop    edx
c0022fac:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0022fb0:	ff b6 58 01 00 00    	push   DWORD PTR [esi+0x158]
c0022fb6:	e8 34 4b 00 00       	call   c0027aef <__floatsisf>
c0022fbb:	59                   	pop    ecx
c0022fbc:	5a                   	pop    edx
c0022fbd:	50                   	push   eax
c0022fbe:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0022fc2:	e8 fd 48 00 00       	call   c00278c4 <__divsf3>
c0022fc7:	59                   	pop    ecx
c0022fc8:	5a                   	pop    edx
c0022fc9:	50                   	push   eax
c0022fca:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0022fce:	ff 34 a8             	push   DWORD PTR [eax+ebp*4]
c0022fd1:	e8 08 44 00 00       	call   c00273de <__addsf3>
c0022fd6:	83 c4 10             	add    esp,0x10
c0022fd9:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0022fdd:	8b 4c 24 0c          	mov    ecx,DWORD PTR [esp+0xc]
c0022fe1:	89 04 aa             	mov    DWORD PTR [edx+ebp*4],eax
c0022fe4:	45                   	inc    ebp
c0022fe5:	eb aa                	jmp    c0022f91 <SoundDevice::getAudio(int, float*, float*)+0xb1>
c0022fe7:	39 cf                	cmp    edi,ecx
c0022fe9:	7e 02                	jle    c0022fed <SoundDevice::getAudio(int, float*, float*)+0x10d>
c0022feb:	89 cf                	mov    edi,ecx
c0022fed:	43                   	inc    ebx
c0022fee:	83 fb 20             	cmp    ebx,0x20
c0022ff1:	0f 85 10 ff ff ff    	jne    c0022f07 <SoundDevice::getAudio(int, float*, float*)+0x27>
c0022ff7:	83 c4 1c             	add    esp,0x1c
c0022ffa:	89 f8                	mov    eax,edi
c0022ffc:	5b                   	pop    ebx
c0022ffd:	5e                   	pop    esi
c0022ffe:	5f                   	pop    edi
c0022fff:	5d                   	pop    ebp
c0023000:	c3                   	ret    
c0023001:	90                   	nop

c0023002 <PCI::open(int, int, void*)>:
c0023002:	83 ec 18             	sub    esp,0x18
c0023005:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0023009:	8b 10                	mov    edx,DWORD PTR [eax]
c002300b:	50                   	push   eax
c002300c:	ff 52 18             	call   DWORD PTR [edx+0x18]
c002300f:	31 c0                	xor    eax,eax
c0023011:	83 c4 1c             	add    esp,0x1c
c0023014:	c3                   	ret    
c0023015:	90                   	nop

c0023016 <PCI::close(int, int, void*)>:
c0023016:	31 c0                	xor    eax,eax
c0023018:	c3                   	ret    
c0023019:	90                   	nop

c002301a <PCI::PCI()>:
c002301a:	83 ec 0c             	sub    esp,0xc
c002301d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023021:	83 ec 08             	sub    esp,0x8
c0023024:	68 1c d4 02 c0       	push   0xc002d41c
c0023029:	50                   	push   eax
c002302a:	e8 b9 0a ff ff       	call   c0013ae8 <Bus::Bus(char const*)>
c002302f:	83 c4 10             	add    esp,0x10
c0023032:	ba a4 d4 02 c0       	mov    edx,0xc002d4a4
c0023037:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002303b:	89 10                	mov    DWORD PTR [eax],edx
c002303d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023041:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023047:	0f b6 d0             	movzx  edx,al
c002304a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002304e:	66 c7 44 90 04 f8 0c 	mov    WORD PTR [eax+edx*4+0x4],0xcf8
c0023055:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023059:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002305f:	0f b6 d0             	movzx  edx,al
c0023062:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023066:	c6 44 90 06 08       	mov    BYTE PTR [eax+edx*4+0x6],0x8
c002306b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002306f:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0023075:	8d 50 01             	lea    edx,[eax+0x1]
c0023078:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002307c:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0023082:	0f b6 d0             	movzx  edx,al
c0023085:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0023089:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002308d:	83 c9 c0             	or     ecx,0xffffffc0
c0023090:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0023094:	90                   	nop
c0023095:	83 c4 0c             	add    esp,0xc
c0023098:	c3                   	ret    
c0023099:	90                   	nop

c002309a <PCI::readBAR8(unsigned int, int)>:
c002309a:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c002309e:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230a2:	f6 c2 01             	test   dl,0x1
c00230a5:	74 07                	je     c00230ae <PCI::readBAR8(unsigned int, int)+0x14>
c00230a7:	83 e2 fc             	and    edx,0xfffffffc
c00230aa:	01 c2                	add    edx,eax
c00230ac:	ec                   	in     al,dx
c00230ad:	c3                   	ret    
c00230ae:	83 e2 f0             	and    edx,0xfffffff0
c00230b1:	8a 04 02             	mov    al,BYTE PTR [edx+eax*1]
c00230b4:	c3                   	ret    
c00230b5:	90                   	nop

c00230b6 <PCI::readBAR16(unsigned int, int)>:
c00230b6:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230ba:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230be:	f6 c2 01             	test   dl,0x1
c00230c1:	74 08                	je     c00230cb <PCI::readBAR16(unsigned int, int)+0x15>
c00230c3:	83 e2 fc             	and    edx,0xfffffffc
c00230c6:	01 c2                	add    edx,eax
c00230c8:	66 ed                	in     ax,dx
c00230ca:	c3                   	ret    
c00230cb:	83 e2 f0             	and    edx,0xfffffff0
c00230ce:	66 8b 04 02          	mov    ax,WORD PTR [edx+eax*1]
c00230d2:	c3                   	ret    
c00230d3:	90                   	nop

c00230d4 <PCI::readBAR32(unsigned int, int)>:
c00230d4:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230d8:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230dc:	f6 c2 01             	test   dl,0x1
c00230df:	74 07                	je     c00230e8 <PCI::readBAR32(unsigned int, int)+0x14>
c00230e1:	83 e2 fc             	and    edx,0xfffffffc
c00230e4:	01 c2                	add    edx,eax
c00230e6:	ed                   	in     eax,dx
c00230e7:	c3                   	ret    
c00230e8:	83 e2 f0             	and    edx,0xfffffff0
c00230eb:	8b 04 02             	mov    eax,DWORD PTR [edx+eax*1]
c00230ee:	c3                   	ret    
c00230ef:	90                   	nop

c00230f0 <PCI::writeBAR8(unsigned int, unsigned char, int)>:
c00230f0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00230f4:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c00230f8:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00230fc:	f6 c2 01             	test   dl,0x1
c00230ff:	74 07                	je     c0023108 <PCI::writeBAR8(unsigned int, unsigned char, int)+0x18>
c0023101:	83 e2 fc             	and    edx,0xfffffffc
c0023104:	01 ca                	add    edx,ecx
c0023106:	ee                   	out    dx,al
c0023107:	c3                   	ret    
c0023108:	83 e2 f0             	and    edx,0xfffffff0
c002310b:	88 04 0a             	mov    BYTE PTR [edx+ecx*1],al
c002310e:	c3                   	ret    
c002310f:	90                   	nop

c0023110 <PCI::writeBAR16(unsigned int, unsigned short, int)>:
c0023110:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023114:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0023118:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002311c:	f6 c2 01             	test   dl,0x1
c002311f:	74 08                	je     c0023129 <PCI::writeBAR16(unsigned int, unsigned short, int)+0x19>
c0023121:	83 e2 fc             	and    edx,0xfffffffc
c0023124:	01 ca                	add    edx,ecx
c0023126:	66 ef                	out    dx,ax
c0023128:	c3                   	ret    
c0023129:	83 e2 f0             	and    edx,0xfffffff0
c002312c:	66 89 04 0a          	mov    WORD PTR [edx+ecx*1],ax
c0023130:	c3                   	ret    
c0023131:	90                   	nop

c0023132 <PCI::writeBAR32(unsigned int, unsigned int, int)>:
c0023132:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c0023136:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c002313a:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002313e:	f6 c2 01             	test   dl,0x1
c0023141:	74 07                	je     c002314a <PCI::writeBAR32(unsigned int, unsigned int, int)+0x18>
c0023143:	83 e2 fc             	and    edx,0xfffffffc
c0023146:	01 ca                	add    edx,ecx
c0023148:	ef                   	out    dx,eax
c0023149:	c3                   	ret    
c002314a:	83 e2 f0             	and    edx,0xfffffff0
c002314d:	89 04 0a             	mov    DWORD PTR [edx+ecx*1],eax
c0023150:	c3                   	ret    
c0023151:	90                   	nop

c0023152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>:
c0023152:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c0023156:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c002315b:	89 ca                	mov    edx,ecx
c002315d:	c1 e0 10             	shl    eax,0x10
c0023160:	81 e2 fc 00 00 00    	and    edx,0xfc
c0023166:	09 d0                	or     eax,edx
c0023168:	0f b6 54 24 10       	movzx  edx,BYTE PTR [esp+0x10]
c002316d:	c1 e2 08             	shl    edx,0x8
c0023170:	09 d0                	or     eax,edx
c0023172:	0f b6 54 24 0c       	movzx  edx,BYTE PTR [esp+0xc]
c0023177:	c1 e2 0b             	shl    edx,0xb
c002317a:	09 d0                	or     eax,edx
c002317c:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023181:	0d 00 00 00 80       	or     eax,0x80000000
c0023186:	ef                   	out    dx,eax
c0023187:	ba fc 0c 00 00       	mov    edx,0xcfc
c002318c:	ed                   	in     eax,dx
c002318d:	83 e1 02             	and    ecx,0x2
c0023190:	0f b6 c9             	movzx  ecx,cl
c0023193:	c1 e1 03             	shl    ecx,0x3
c0023196:	d3 e8                	shr    eax,cl
c0023198:	c3                   	ret    
c0023199:	90                   	nop

c002319a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>:
c002319a:	6a 00                	push   0x0
c002319c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231a1:	50                   	push   eax
c00231a2:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231a7:	50                   	push   eax
c00231a8:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231ad:	50                   	push   eax
c00231ae:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00231b2:	e8 9b ff ff ff       	call   c0023152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231b7:	83 c4 14             	add    esp,0x14
c00231ba:	c3                   	ret    
c00231bb:	90                   	nop

c00231bc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>:
c00231bc:	6a 0e                	push   0xe
c00231be:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231c3:	50                   	push   eax
c00231c4:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231c9:	50                   	push   eax
c00231ca:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c00231cf:	50                   	push   eax
c00231d0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00231d4:	e8 79 ff ff ff       	call   c0023152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00231d9:	83 c4 14             	add    esp,0x14
c00231dc:	0f b6 c0             	movzx  eax,al
c00231df:	c3                   	ret    

c00231e0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>:
c00231e0:	55                   	push   ebp
c00231e1:	57                   	push   edi
c00231e2:	56                   	push   esi
c00231e3:	53                   	push   ebx
c00231e4:	0f b6 74 24 20       	movzx  esi,BYTE PTR [esp+0x20]
c00231e9:	0f b6 6c 24 1c       	movzx  ebp,BYTE PTR [esp+0x1c]
c00231ee:	0f b6 7c 24 18       	movzx  edi,BYTE PTR [esp+0x18]
c00231f3:	6a 0a                	push   0xa
c00231f5:	56                   	push   esi
c00231f6:	55                   	push   ebp
c00231f7:	57                   	push   edi
c00231f8:	ff 74 24 24          	push   DWORD PTR [esp+0x24]
c00231fc:	e8 51 ff ff ff       	call   c0023152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023201:	6a 0a                	push   0xa
c0023203:	89 c3                	mov    ebx,eax
c0023205:	56                   	push   esi
c0023206:	0f b6 db             	movzx  ebx,bl
c0023209:	55                   	push   ebp
c002320a:	57                   	push   edi
c002320b:	ff 74 24 38          	push   DWORD PTR [esp+0x38]
c002320f:	e8 3e ff ff ff       	call   c0023152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023214:	83 c4 28             	add    esp,0x28
c0023217:	25 00 ff 00 00       	and    eax,0xff00
c002321c:	09 d8                	or     eax,ebx
c002321e:	5b                   	pop    ebx
c002321f:	5e                   	pop    esi
c0023220:	5f                   	pop    edi
c0023221:	5d                   	pop    ebp
c0023222:	c3                   	ret    
c0023223:	90                   	nop

c0023224 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>:
c0023224:	6a 08                	push   0x8
c0023226:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002322b:	50                   	push   eax
c002322c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023231:	50                   	push   eax
c0023232:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023237:	50                   	push   eax
c0023238:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c002323c:	e8 11 ff ff ff       	call   c0023152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023241:	83 c4 14             	add    esp,0x14
c0023244:	0f b6 c4             	movzx  eax,ah
c0023247:	c3                   	ret    

c0023248 <PCI::getRevisionID(unsigned char, unsigned char, unsigned char)>:
c0023248:	6a 08                	push   0x8
c002324a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002324f:	50                   	push   eax
c0023250:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023255:	50                   	push   eax
c0023256:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002325b:	50                   	push   eax
c002325c:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023260:	e8 ed fe ff ff       	call   c0023152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023265:	83 c4 14             	add    esp,0x14
c0023268:	c3                   	ret    
c0023269:	90                   	nop

c002326a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>:
c002326a:	6a 3c                	push   0x3c
c002326c:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023271:	50                   	push   eax
c0023272:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023277:	50                   	push   eax
c0023278:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002327d:	50                   	push   eax
c002327e:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0023282:	e8 cb fe ff ff       	call   c0023152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023287:	83 c4 14             	add    esp,0x14
c002328a:	c3                   	ret    
c002328b:	90                   	nop

c002328c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>:
c002328c:	6a 18                	push   0x18
c002328e:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023293:	50                   	push   eax
c0023294:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c0023299:	50                   	push   eax
c002329a:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002329f:	50                   	push   eax
c00232a0:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00232a4:	e8 a9 fe ff ff       	call   c0023152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232a9:	83 c4 14             	add    esp,0x14
c00232ac:	0f b6 c4             	movzx  eax,ah
c00232af:	c3                   	ret    

c00232b0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>:
c00232b0:	55                   	push   ebp
c00232b1:	57                   	push   edi
c00232b2:	56                   	push   esi
c00232b3:	53                   	push   ebx
c00232b4:	50                   	push   eax
c00232b5:	8a 44 24 1c          	mov    al,BYTE PTR [esp+0x1c]
c00232b9:	0f b6 4c 24 28       	movzx  ecx,BYTE PTR [esp+0x28]
c00232be:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00232c3:	0f b6 6c 24 20       	movzx  ebp,BYTE PTR [esp+0x20]
c00232c8:	8d 1c 85 00 00 00 00 	lea    ebx,[eax*4+0x0]
c00232cf:	8d 43 12             	lea    eax,[ebx+0x12]
c00232d2:	83 c3 10             	add    ebx,0x10
c00232d5:	0f b6 c0             	movzx  eax,al
c00232d8:	0f b6 db             	movzx  ebx,bl
c00232db:	50                   	push   eax
c00232dc:	51                   	push   ecx
c00232dd:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c00232e1:	57                   	push   edi
c00232e2:	55                   	push   ebp
c00232e3:	ff 74 24 28          	push   DWORD PTR [esp+0x28]
c00232e7:	e8 66 fe ff ff       	call   c0023152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00232ec:	53                   	push   ebx
c00232ed:	89 c6                	mov    esi,eax
c00232ef:	8b 4c 24 18          	mov    ecx,DWORD PTR [esp+0x18]
c00232f3:	c1 e6 10             	shl    esi,0x10
c00232f6:	51                   	push   ecx
c00232f7:	57                   	push   edi
c00232f8:	55                   	push   ebp
c00232f9:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c00232fd:	e8 50 fe ff ff       	call   c0023152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c0023302:	83 c4 2c             	add    esp,0x2c
c0023305:	0f b7 c0             	movzx  eax,ax
c0023308:	5b                   	pop    ebx
c0023309:	09 f0                	or     eax,esi
c002330b:	5e                   	pop    esi
c002330c:	5f                   	pop    edi
c002330d:	5d                   	pop    ebp
c002330e:	c3                   	ret    
c002330f:	90                   	nop

c0023310 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)>:
c0023310:	53                   	push   ebx
c0023311:	ba f8 0c 00 00       	mov    edx,0xcf8
c0023316:	0f b6 4c 24 0c       	movzx  ecx,BYTE PTR [esp+0xc]
c002331b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002331f:	c1 e1 10             	shl    ecx,0x10
c0023322:	25 fc 00 00 00       	and    eax,0xfc
c0023327:	09 c1                	or     ecx,eax
c0023329:	0f b6 44 24 14       	movzx  eax,BYTE PTR [esp+0x14]
c002332e:	c1 e0 08             	shl    eax,0x8
c0023331:	09 c1                	or     ecx,eax
c0023333:	0f b6 44 24 10       	movzx  eax,BYTE PTR [esp+0x10]
c0023338:	c1 e0 0b             	shl    eax,0xb
c002333b:	09 c1                	or     ecx,eax
c002333d:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0023343:	89 c8                	mov    eax,ecx
c0023345:	ef                   	out    dx,eax
c0023346:	ba fc 0c 00 00       	mov    edx,0xcfc
c002334b:	ed                   	in     eax,dx
c002334c:	0f b7 54 24 1c       	movzx  edx,WORD PTR [esp+0x1c]
c0023351:	f6 44 24 18 02       	test   BYTE PTR [esp+0x18],0x2
c0023356:	74 0a                	je     c0023362 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x52>
c0023358:	0f b7 d8             	movzx  ebx,ax
c002335b:	89 d0                	mov    eax,edx
c002335d:	c1 e0 10             	shl    eax,0x10
c0023360:	eb 05                	jmp    c0023367 <PCI::pciWriteWord(unsigned char, unsigned char, unsigned char, unsigned char, unsigned short)+0x57>
c0023362:	66 31 c0             	xor    ax,ax
c0023365:	89 d3                	mov    ebx,edx
c0023367:	09 c3                	or     ebx,eax
c0023369:	ba f8 0c 00 00       	mov    edx,0xcf8
c002336e:	89 c8                	mov    eax,ecx
c0023370:	ef                   	out    dx,eax
c0023371:	ba fc 0c 00 00       	mov    edx,0xcfc
c0023376:	89 d8                	mov    eax,ebx
c0023378:	ef                   	out    dx,eax
c0023379:	5b                   	pop    ebx
c002337a:	c3                   	ret    
c002337b:	90                   	nop

c002337c <PCI::pciDetailsToFilepath(PCIDeviceInfo)>:
c002337c:	31 c0                	xor    eax,eax
c002337e:	c3                   	ret    
c002337f:	90                   	nop

c0023380 <PCI::checkBus(unsigned char)>:
c0023380:	56                   	push   esi
c0023381:	53                   	push   ebx
c0023382:	31 db                	xor    ebx,ebx
c0023384:	51                   	push   ecx
c0023385:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c002338a:	52                   	push   edx
c002338b:	53                   	push   ebx
c002338c:	43                   	inc    ebx
c002338d:	56                   	push   esi
c002338e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0023392:	e8 41 03 00 00       	call   c00236d8 <PCI::checkDevice(unsigned char, unsigned char)>
c0023397:	83 c4 10             	add    esp,0x10
c002339a:	83 fb 20             	cmp    ebx,0x20
c002339d:	75 eb                	jne    c002338a <PCI::checkBus(unsigned char)+0xa>
c002339f:	58                   	pop    eax
c00233a0:	5b                   	pop    ebx
c00233a1:	5e                   	pop    esi
c00233a2:	c3                   	ret    
c00233a3:	90                   	nop

c00233a4 <PCI::foundDevice(PCIDeviceInfo)>:
c00233a4:	55                   	push   ebp
c00233a5:	57                   	push   edi
c00233a6:	56                   	push   esi
c00233a7:	53                   	push   ebx
c00233a8:	83 ec 1c             	sub    esp,0x1c
c00233ab:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00233af:	66 83 7c 24 36 ff    	cmp    WORD PTR [esp+0x36],0xffff
c00233b5:	0f 84 68 01 00 00    	je     c0023523 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c00233bb:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c00233bf:	66 81 f9 06 04       	cmp    cx,0x406
c00233c4:	75 2c                	jne    c00233f2 <PCI::foundDevice(PCIDeviceInfo)+0x4e>
c00233c6:	0f b6 44 24 3a       	movzx  eax,BYTE PTR [esp+0x3a]
c00233cb:	50                   	push   eax
c00233cc:	0f b6 44 24 3d       	movzx  eax,BYTE PTR [esp+0x3d]
c00233d1:	50                   	push   eax
c00233d2:	0f b6 44 24 40       	movzx  eax,BYTE PTR [esp+0x40]
c00233d7:	50                   	push   eax
c00233d8:	56                   	push   esi
c00233d9:	e8 ae fe ff ff       	call   c002328c <PCI::getSecondaryBus(unsigned char, unsigned char, unsigned char)>
c00233de:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c00233e2:	0f b6 c0             	movzx  eax,al
c00233e5:	89 44 24 44          	mov    DWORD PTR [esp+0x44],eax
c00233e9:	83 c4 2c             	add    esp,0x2c
c00233ec:	5b                   	pop    ebx
c00233ed:	5e                   	pop    esi
c00233ee:	5f                   	pop    edi
c00233ef:	5d                   	pop    ebp
c00233f0:	eb 8e                	jmp    c0023380 <PCI::checkBus(unsigned char)>
c00233f2:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00233f6:	8b 86 cc 00 00 00    	mov    eax,DWORD PTR [esi+0xcc]
c00233fc:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0023400:	8b 6c 24 34          	mov    ebp,DWORD PTR [esp+0x34]
c0023404:	8a 54 24 54          	mov    dl,BYTE PTR [esp+0x54]
c0023408:	88 d3                	mov    bl,dl
c002340a:	85 c0                	test   eax,eax
c002340c:	74 33                	je     c0023441 <PCI::foundDevice(PCIDeviceInfo)+0x9d>
c002340e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
c0023411:	85 d2                	test   edx,edx
c0023413:	74 28                	je     c002343d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023415:	8b ba 18 01 00 00    	mov    edi,DWORD PTR [edx+0x118]
c002341b:	31 ef                	xor    edi,ebp
c002341d:	81 e7 ff 00 ff ff    	and    edi,0xffff00ff
c0023423:	75 18                	jne    c002343d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023425:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0023429:	39 ba 20 01 00 00    	cmp    DWORD PTR [edx+0x120],edi
c002342f:	75 0c                	jne    c002343d <PCI::foundDevice(PCIDeviceInfo)+0x99>
c0023431:	38 9a 38 01 00 00    	cmp    BYTE PTR [edx+0x138],bl
c0023437:	0f 84 e6 00 00 00    	je     c0023523 <PCI::foundDevice(PCIDeviceInfo)+0x17f>
c002343d:	8b 00                	mov    eax,DWORD PTR [eax]
c002343f:	eb c9                	jmp    c002340a <PCI::foundDevice(PCIDeviceInfo)+0x66>
c0023441:	66 81 f9 01 06       	cmp    cx,0x601
c0023446:	8d 5c 24 34          	lea    ebx,[esp+0x34]
c002344a:	75 19                	jne    c0023465 <PCI::foundDevice(PCIDeviceInfo)+0xc1>
c002344c:	83 ec 0c             	sub    esp,0xc
c002344f:	68 64 01 00 00       	push   0x164
c0023454:	e8 4f c4 fe ff       	call   c000f8a8 <malloc>
c0023459:	89 c5                	mov    ebp,eax
c002345b:	89 04 24             	mov    DWORD PTR [esp],eax
c002345e:	e8 ab 0f 00 00       	call   c002440e <SATABus::SATABus()>
c0023463:	eb 1e                	jmp    c0023483 <PCI::foundDevice(PCIDeviceInfo)+0xdf>
c0023465:	66 81 f9 01 01       	cmp    cx,0x101
c002346a:	75 60                	jne    c00234cc <PCI::foundDevice(PCIDeviceInfo)+0x128>
c002346c:	83 ec 0c             	sub    esp,0xc
c002346f:	68 70 02 00 00       	push   0x270
c0023474:	e8 2f c4 fe ff       	call   c000f8a8 <malloc>
c0023479:	89 c5                	mov    ebp,eax
c002347b:	89 04 24             	mov    DWORD PTR [esp],eax
c002347e:	e8 19 03 00 00       	call   c002379c <IDE::IDE()>
c0023483:	58                   	pop    eax
c0023484:	5a                   	pop    edx
c0023485:	55                   	push   ebp
c0023486:	56                   	push   esi
c0023487:	e8 de 0d ff ff       	call   c001426a <Device::addChild(Device*)>
c002348c:	83 ec 1c             	sub    esp,0x1c
c002348f:	b9 09 00 00 00       	mov    ecx,0x9
c0023494:	fc                   	cld    
c0023495:	89 e7                	mov    edi,esp
c0023497:	89 de                	mov    esi,ebx
c0023499:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c002349b:	55                   	push   ebp
c002349c:	e8 e5 0c ff ff       	call   c0014186 <Device::preOpenPCI(PCIDeviceInfo)>
c00234a1:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c00234a4:	89 6c 24 60          	mov    DWORD PTR [esp+0x60],ebp
c00234a8:	c7 44 24 6c 00 00 00 00 	mov    DWORD PTR [esp+0x6c],0x0
c00234b0:	c7 44 24 68 00 00 00 00 	mov    DWORD PTR [esp+0x68],0x0
c00234b8:	c7 44 24 64 00 00 00 00 	mov    DWORD PTR [esp+0x64],0x0
c00234c0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00234c3:	83 c4 4c             	add    esp,0x4c
c00234c6:	5b                   	pop    ebx
c00234c7:	5e                   	pop    esi
c00234c8:	5f                   	pop    edi
c00234c9:	5d                   	pop    ebp
c00234ca:	ff e0                	jmp    eax
c00234cc:	50                   	push   eax
c00234cd:	0f b6 44 24 39       	movzx  eax,BYTE PTR [esp+0x39]
c00234d2:	50                   	push   eax
c00234d3:	0f b6 44 24 3c       	movzx  eax,BYTE PTR [esp+0x3c]
c00234d8:	50                   	push   eax
c00234d9:	68 24 d4 02 c0       	push   0xc002d424
c00234de:	e8 64 f9 fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00234e3:	c7 04 24 58 01 00 00 	mov    DWORD PTR [esp],0x158
c00234ea:	e8 b9 c3 fe ff       	call   c000f8a8 <malloc>
c00234ef:	5a                   	pop    edx
c00234f0:	89 c5                	mov    ebp,eax
c00234f2:	59                   	pop    ecx
c00234f3:	68 40 d4 02 c0       	push   0xc002d440
c00234f8:	50                   	push   eax
c00234f9:	e8 62 10 ff ff       	call   c0014560 <DriverlessDevice::DriverlessDevice(char const*)>
c00234fe:	5f                   	pop    edi
c00234ff:	58                   	pop    eax
c0023500:	55                   	push   ebp
c0023501:	56                   	push   esi
c0023502:	e8 63 0d ff ff       	call   c001426a <Device::addChild(Device*)>
c0023507:	b9 09 00 00 00       	mov    ecx,0x9
c002350c:	fc                   	cld    
c002350d:	89 df                	mov    edi,ebx
c002350f:	89 de                	mov    esi,ebx
c0023511:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c0023513:	89 6c 24 40          	mov    DWORD PTR [esp+0x40],ebp
c0023517:	83 c4 2c             	add    esp,0x2c
c002351a:	5b                   	pop    ebx
c002351b:	5e                   	pop    esi
c002351c:	5f                   	pop    edi
c002351d:	5d                   	pop    ebp
c002351e:	e9 63 0c ff ff       	jmp    c0014186 <Device::preOpenPCI(PCIDeviceInfo)>
c0023523:	83 c4 1c             	add    esp,0x1c
c0023526:	5b                   	pop    ebx
c0023527:	5e                   	pop    esi
c0023528:	5f                   	pop    edi
c0023529:	5d                   	pop    ebp
c002352a:	c3                   	ret    
c002352b:	90                   	nop

c002352c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>:
c002352c:	55                   	push   ebp
c002352d:	57                   	push   edi
c002352e:	56                   	push   esi
c002352f:	53                   	push   ebx
c0023530:	83 ec 5c             	sub    esp,0x5c
c0023533:	8b 44 24 74          	mov    eax,DWORD PTR [esp+0x74]
c0023537:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c002353b:	8b 44 24 78          	mov    eax,DWORD PTR [esp+0x78]
c002353f:	0f b6 7c 24 10       	movzx  edi,BYTE PTR [esp+0x10]
c0023544:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0023548:	8b 44 24 7c          	mov    eax,DWORD PTR [esp+0x7c]
c002354c:	0f b6 5c 24 14       	movzx  ebx,BYTE PTR [esp+0x14]
c0023551:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c0023555:	0f b6 6c 24 18       	movzx  ebp,BYTE PTR [esp+0x18]
c002355a:	6a 0c                	push   0xc
c002355c:	55                   	push   ebp
c002355d:	53                   	push   ebx
c002355e:	57                   	push   edi
c002355f:	ff b4 24 80 00 00 00 	push   DWORD PTR [esp+0x80]
c0023566:	e8 e7 fb ff ff       	call   c0023152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c002356b:	55                   	push   ebp
c002356c:	53                   	push   ebx
c002356d:	57                   	push   edi
c002356e:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c0023575:	e8 66 fc ff ff       	call   c00231e0 <PCI::getClassCode(unsigned char, unsigned char, unsigned char)>
c002357a:	66 89 44 24 42       	mov    WORD PTR [esp+0x42],ax
c002357f:	83 c4 24             	add    esp,0x24
c0023582:	55                   	push   ebp
c0023583:	53                   	push   ebx
c0023584:	57                   	push   edi
c0023585:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c0023589:	e8 dc fc ff ff       	call   c002326a <PCI::getInterruptNumber(unsigned char, unsigned char, unsigned char)>
c002358e:	88 44 24 2d          	mov    BYTE PTR [esp+0x2d],al
c0023592:	6a 3c                	push   0x3c
c0023594:	55                   	push   ebp
c0023595:	53                   	push   ebx
c0023596:	57                   	push   edi
c0023597:	ff b4 24 90 00 00 00 	push   DWORD PTR [esp+0x90]
c002359e:	e8 af fb ff ff       	call   c0023152 <PCI::pciReadWord(unsigned char, unsigned char, unsigned char, unsigned char)>
c00235a3:	0f b6 c4             	movzx  eax,ah
c00235a6:	89 44 24 30          	mov    DWORD PTR [esp+0x30],eax
c00235aa:	8a 44 24 30          	mov    al,BYTE PTR [esp+0x30]
c00235ae:	88 44 24 71          	mov    BYTE PTR [esp+0x71],al
c00235b2:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00235b7:	83 c4 24             	add    esp,0x24
c00235ba:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00235c0:	83 b8 5c 11 00 00 00 	cmp    DWORD PTR [eax+0x115c],0x0
c00235c7:	74 6c                	je     c0023635 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00235c9:	31 f6                	xor    esi,esi
c00235cb:	8b 15 48 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee48
c00235d1:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c00235d7:	39 b2 5c 11 00 00    	cmp    DWORD PTR [edx+0x115c],esi
c00235dd:	7e 56                	jle    c0023635 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x109>
c00235df:	8d 14 f2             	lea    edx,[edx+esi*8]
c00235e2:	0f b7 8a 5c 01 00 00 	movzx  ecx,WORD PTR [edx+0x15c]
c00235e9:	39 cb                	cmp    ebx,ecx
c00235eb:	75 45                	jne    c0023632 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00235ed:	0f b6 92 5e 01 00 00 	movzx  edx,BYTE PTR [edx+0x15e]
c00235f4:	3b 54 24 0c          	cmp    edx,DWORD PTR [esp+0xc]
c00235f8:	75 38                	jne    c0023632 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x106>
c00235fa:	83 ec 0c             	sub    esp,0xc
c00235fd:	68 5a d4 02 c0       	push   0xc002d45a
c0023602:	e8 40 f8 fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0023607:	8b 15 48 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee48
c002360d:	8b 92 e4 01 00 00    	mov    edx,DWORD PTR [edx+0x1e4]
c0023613:	0f b6 94 f2 5f 01 00 00 	movzx  edx,BYTE PTR [edx+esi*8+0x15f]
c002361b:	88 54 24 2d          	mov    BYTE PTR [esp+0x2d],dl
c002361f:	52                   	push   edx
c0023620:	ff 74 24 20          	push   DWORD PTR [esp+0x20]
c0023624:	53                   	push   ebx
c0023625:	68 7f d4 02 c0       	push   0xc002d47f
c002362a:	e8 18 f8 fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c002362f:	83 c4 20             	add    esp,0x20
c0023632:	46                   	inc    esi
c0023633:	eb 96                	jmp    c00235cb <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x9f>
c0023635:	31 d2                	xor    edx,edx
c0023637:	83 ec 0c             	sub    esp,0xc
c002363a:	55                   	push   ebp
c002363b:	53                   	push   ebx
c002363c:	57                   	push   edi
c002363d:	52                   	push   edx
c002363e:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c0023642:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c0023649:	e8 62 fc ff ff       	call   c00232b0 <PCI::getBARAddress(unsigned char, unsigned char, unsigned char, unsigned char)>
c002364e:	8d 74 24 4c          	lea    esi,[esp+0x4c]
c0023652:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c0023656:	89 44 94 54          	mov    DWORD PTR [esp+edx*4+0x54],eax
c002365a:	42                   	inc    edx
c002365b:	83 c4 20             	add    esp,0x20
c002365e:	83 fa 06             	cmp    edx,0x6
c0023661:	75 d4                	jne    c0023637 <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)+0x10b>
c0023663:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0023667:	88 44 24 30          	mov    BYTE PTR [esp+0x30],al
c002366b:	8a 44 24 14          	mov    al,BYTE PTR [esp+0x14]
c002366f:	88 44 24 31          	mov    BYTE PTR [esp+0x31],al
c0023673:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c0023677:	88 44 24 32          	mov    BYTE PTR [esp+0x32],al
c002367b:	66 8b 44 24 1e       	mov    ax,WORD PTR [esp+0x1e]
c0023680:	86 e0                	xchg   al,ah
c0023682:	66 89 44 24 2c       	mov    WORD PTR [esp+0x2c],ax
c0023687:	55                   	push   ebp
c0023688:	53                   	push   ebx
c0023689:	57                   	push   edi
c002368a:	ff 74 24 7c          	push   DWORD PTR [esp+0x7c]
c002368e:	e8 91 fb ff ff       	call   c0023224 <PCI::getProgIF(unsigned char, unsigned char, unsigned char)>
c0023693:	88 44 24 43          	mov    BYTE PTR [esp+0x43],al
c0023697:	55                   	push   ebp
c0023698:	53                   	push   ebx
c0023699:	57                   	push   edi
c002369a:	ff b4 24 8c 00 00 00 	push   DWORD PTR [esp+0x8c]
c00236a1:	e8 f4 fa ff ff       	call   c002319a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00236a6:	83 ec 0c             	sub    esp,0xc
c00236a9:	66 89 44 24 5a       	mov    WORD PTR [esp+0x5a],ax
c00236ae:	b9 09 00 00 00       	mov    ecx,0x9
c00236b3:	8a 44 24 49          	mov    al,BYTE PTR [esp+0x49]
c00236b7:	88 44 24 78          	mov    BYTE PTR [esp+0x78],al
c00236bb:	fc                   	cld    
c00236bc:	89 e7                	mov    edi,esp
c00236be:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
c00236c0:	ff b4 24 9c 00 00 00 	push   DWORD PTR [esp+0x9c]
c00236c7:	e8 d8 fc ff ff       	call   c00233a4 <PCI::foundDevice(PCIDeviceInfo)>
c00236cc:	81 c4 8c 00 00 00    	add    esp,0x8c
c00236d2:	5b                   	pop    ebx
c00236d3:	5e                   	pop    esi
c00236d4:	5f                   	pop    edi
c00236d5:	5d                   	pop    ebp
c00236d6:	c3                   	ret    
c00236d7:	90                   	nop

c00236d8 <PCI::checkDevice(unsigned char, unsigned char)>:
c00236d8:	55                   	push   ebp
c00236d9:	57                   	push   edi
c00236da:	56                   	push   esi
c00236db:	53                   	push   ebx
c00236dc:	83 ec 0c             	sub    esp,0xc
c00236df:	8b 6c 24 20          	mov    ebp,DWORD PTR [esp+0x20]
c00236e3:	0f b6 74 24 28       	movzx  esi,BYTE PTR [esp+0x28]
c00236e8:	0f b6 7c 24 24       	movzx  edi,BYTE PTR [esp+0x24]
c00236ed:	6a 00                	push   0x0
c00236ef:	56                   	push   esi
c00236f0:	57                   	push   edi
c00236f1:	55                   	push   ebp
c00236f2:	e8 a3 fa ff ff       	call   c002319a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c00236f7:	6a 00                	push   0x0
c00236f9:	56                   	push   esi
c00236fa:	57                   	push   edi
c00236fb:	55                   	push   ebp
c00236fc:	e8 2b fe ff ff       	call   c002352c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023701:	83 c4 20             	add    esp,0x20
c0023704:	6a 00                	push   0x0
c0023706:	56                   	push   esi
c0023707:	57                   	push   edi
c0023708:	55                   	push   ebp
c0023709:	e8 ae fa ff ff       	call   c00231bc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c002370e:	83 c4 10             	add    esp,0x10
c0023711:	84 c0                	test   al,al
c0023713:	79 27                	jns    c002373c <PCI::checkDevice(unsigned char, unsigned char)+0x64>
c0023715:	bb 01 00 00 00       	mov    ebx,0x1
c002371a:	53                   	push   ebx
c002371b:	56                   	push   esi
c002371c:	57                   	push   edi
c002371d:	55                   	push   ebp
c002371e:	e8 77 fa ff ff       	call   c002319a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c0023723:	83 c4 10             	add    esp,0x10
c0023726:	66 40                	inc    ax
c0023728:	74 0c                	je     c0023736 <PCI::checkDevice(unsigned char, unsigned char)+0x5e>
c002372a:	53                   	push   ebx
c002372b:	56                   	push   esi
c002372c:	57                   	push   edi
c002372d:	55                   	push   ebp
c002372e:	e8 f9 fd ff ff       	call   c002352c <PCI::getDeviceData(unsigned char, unsigned char, unsigned char)>
c0023733:	83 c4 10             	add    esp,0x10
c0023736:	43                   	inc    ebx
c0023737:	83 fb 08             	cmp    ebx,0x8
c002373a:	75 de                	jne    c002371a <PCI::checkDevice(unsigned char, unsigned char)+0x42>
c002373c:	83 c4 0c             	add    esp,0xc
c002373f:	5b                   	pop    ebx
c0023740:	5e                   	pop    esi
c0023741:	5f                   	pop    edi
c0023742:	5d                   	pop    ebp
c0023743:	c3                   	ret    

c0023744 <PCI::detect()>:
c0023744:	56                   	push   esi
c0023745:	53                   	push   ebx
c0023746:	53                   	push   ebx
c0023747:	31 db                	xor    ebx,ebx
c0023749:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002374d:	6a 00                	push   0x0
c002374f:	6a 00                	push   0x0
c0023751:	6a 00                	push   0x0
c0023753:	56                   	push   esi
c0023754:	e8 63 fa ff ff       	call   c00231bc <PCI::getHeaderType(unsigned char, unsigned char, unsigned char)>
c0023759:	83 c4 10             	add    esp,0x10
c002375c:	a8 80                	test   al,0x80
c002375e:	75 21                	jne    c0023781 <PCI::detect()+0x3d>
c0023760:	51                   	push   ecx
c0023761:	51                   	push   ecx
c0023762:	6a 00                	push   0x0
c0023764:	56                   	push   esi
c0023765:	e8 16 fc ff ff       	call   c0023380 <PCI::checkBus(unsigned char)>
c002376a:	83 c4 10             	add    esp,0x10
c002376d:	eb 24                	jmp    c0023793 <PCI::detect()+0x4f>
c002376f:	52                   	push   edx
c0023770:	52                   	push   edx
c0023771:	53                   	push   ebx
c0023772:	43                   	inc    ebx
c0023773:	56                   	push   esi
c0023774:	e8 07 fc ff ff       	call   c0023380 <PCI::checkBus(unsigned char)>
c0023779:	83 c4 10             	add    esp,0x10
c002377c:	83 fb 08             	cmp    ebx,0x8
c002377f:	74 12                	je     c0023793 <PCI::detect()+0x4f>
c0023781:	53                   	push   ebx
c0023782:	6a 00                	push   0x0
c0023784:	6a 00                	push   0x0
c0023786:	56                   	push   esi
c0023787:	e8 0e fa ff ff       	call   c002319a <PCI::getVendorID(unsigned char, unsigned char, unsigned char)>
c002378c:	83 c4 10             	add    esp,0x10
c002378f:	66 40                	inc    ax
c0023791:	74 dc                	je     c002376f <PCI::detect()+0x2b>
c0023793:	58                   	pop    eax
c0023794:	5b                   	pop    ebx
c0023795:	5e                   	pop    esi
c0023796:	c3                   	ret    
c0023797:	90                   	nop

c0023798 <IDE::close(int, int, void*)>:
c0023798:	83 c8 ff             	or     eax,0xffffffff
c002379b:	c3                   	ret    

c002379c <IDE::IDE()>:
c002379c:	83 ec 0c             	sub    esp,0xc
c002379f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237a3:	83 ec 08             	sub    esp,0x8
c00237a6:	68 c8 d4 02 c0       	push   0xc002d4c8
c00237ab:	50                   	push   eax
c00237ac:	e8 53 0e ff ff       	call   c0014604 <HardDiskController::HardDiskController(char const*)>
c00237b1:	83 c4 10             	add    esp,0x10
c00237b4:	ba 08 d7 02 c0       	mov    edx,0xc002d708
c00237b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237bd:	89 10                	mov    DWORD PTR [eax],edx
c00237bf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00237c3:	c6 80 58 01 00 00 00 	mov    BYTE PTR [eax+0x158],0x0
c00237ca:	90                   	nop
c00237cb:	83 c4 0c             	add    esp,0xc
c00237ce:	c3                   	ret    
c00237cf:	90                   	nop

c00237d0 <IDE::prepareInterrupt(unsigned char)>:
c00237d0:	0f b6 44 24 08       	movzx  eax,BYTE PTR [esp+0x8]
c00237d5:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c00237d9:	c6 84 02 6c 02 00 00 00 	mov    BYTE PTR [edx+eax*1+0x26c],0x0
c00237e1:	c3                   	ret    

c00237e2 <selectDrive(unsigned char, unsigned char)>:
c00237e2:	c3                   	ret    
c00237e3:	90                   	nop

c00237e4 <IDE::getBase(unsigned char)>:
c00237e4:	0f b6 54 24 08       	movzx  edx,BYTE PTR [esp+0x8]
c00237e9:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00237ed:	66 8b 84 d0 5a 01 00 00 	mov    ax,WORD PTR [eax+edx*8+0x15a]
c00237f5:	c3                   	ret    

c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>:
c00237f6:	55                   	push   ebp
c00237f7:	57                   	push   edi
c00237f8:	56                   	push   esi
c00237f9:	53                   	push   ebx
c00237fa:	83 ec 1c             	sub    esp,0x1c
c00237fd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0023801:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c0023805:	8d 4b f8             	lea    ecx,[ebx-0x8]
c0023808:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c002380c:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0023810:	80 f9 03             	cmp    cl,0x3
c0023813:	77 51                	ja     c0023866 <IDE::write(unsigned char, unsigned char, unsigned char)+0x70>
c0023815:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0023819:	0f b6 f2             	movzx  esi,dl
c002381c:	0f b6 db             	movzx  ebx,bl
c002381f:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c0023822:	8a 54 ef 10          	mov    dl,BYTE PTR [edi+ebp*8+0x10]
c0023826:	83 ca 80             	or     edx,0xffffff80
c0023829:	0f b6 d2             	movzx  edx,dl
c002382c:	52                   	push   edx
c002382d:	6a 0c                	push   0xc
c002382f:	56                   	push   esi
c0023830:	57                   	push   edi
c0023831:	e8 c0 ff ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023836:	66 8b 54 ef 0a       	mov    dx,WORD PTR [edi+ebp*8+0xa]
c002383b:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c002383f:	8d 54 1a fa          	lea    edx,[edx+ebx*1-0x6]
c0023843:	ee                   	out    dx,al
c0023844:	0f b6 44 ef 10       	movzx  eax,BYTE PTR [edi+ebp*8+0x10]
c0023849:	89 74 24 44          	mov    DWORD PTR [esp+0x44],esi
c002384d:	89 7c 24 40          	mov    DWORD PTR [esp+0x40],edi
c0023851:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023855:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c002385d:	83 c4 2c             	add    esp,0x2c
c0023860:	5b                   	pop    ebx
c0023861:	5e                   	pop    esi
c0023862:	5f                   	pop    edi
c0023863:	5d                   	pop    ebp
c0023864:	eb 90                	jmp    c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023866:	80 fb 07             	cmp    bl,0x7
c0023869:	77 12                	ja     c002387d <IDE::write(unsigned char, unsigned char, unsigned char)+0x87>
c002386b:	0f b6 d2             	movzx  edx,dl
c002386e:	0f b6 db             	movzx  ebx,bl
c0023871:	66 03 9c d7 5a 01 00 00 	add    bx,WORD PTR [edi+edx*8+0x15a]
c0023879:	89 da                	mov    edx,ebx
c002387b:	eb 2f                	jmp    c00238ac <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c002387d:	80 fb 0d             	cmp    bl,0xd
c0023880:	77 13                	ja     c0023895 <IDE::write(unsigned char, unsigned char, unsigned char)+0x9f>
c0023882:	0f b6 d2             	movzx  edx,dl
c0023885:	0f b6 db             	movzx  ebx,bl
c0023888:	8b 94 d7 5c 01 00 00 	mov    edx,DWORD PTR [edi+edx*8+0x15c]
c002388f:	8d 54 1a f4          	lea    edx,[edx+ebx*1-0xc]
c0023893:	eb 17                	jmp    c00238ac <IDE::write(unsigned char, unsigned char, unsigned char)+0xb6>
c0023895:	80 fb 15             	cmp    bl,0x15
c0023898:	77 13                	ja     c00238ad <IDE::write(unsigned char, unsigned char, unsigned char)+0xb7>
c002389a:	0f b6 d2             	movzx  edx,dl
c002389d:	0f b6 db             	movzx  ebx,bl
c00238a0:	66 8b 94 d7 5e 01 00 00 	mov    dx,WORD PTR [edi+edx*8+0x15e]
c00238a8:	8d 54 1a f2          	lea    edx,[edx+ebx*1-0xe]
c00238ac:	ee                   	out    dx,al
c00238ad:	83 c4 1c             	add    esp,0x1c
c00238b0:	5b                   	pop    ebx
c00238b1:	5e                   	pop    esi
c00238b2:	5f                   	pop    edi
c00238b3:	5d                   	pop    ebp
c00238b4:	c3                   	ret    
c00238b5:	90                   	nop

c00238b6 <IDE::read(unsigned char, unsigned char)>:
c00238b6:	55                   	push   ebp
c00238b7:	57                   	push   edi
c00238b8:	56                   	push   esi
c00238b9:	53                   	push   ebx
c00238ba:	83 ec 1c             	sub    esp,0x1c
c00238bd:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c00238c1:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c00238c5:	8d 43 f8             	lea    eax,[ebx-0x8]
c00238c8:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c00238cc:	3c 03                	cmp    al,0x3
c00238ce:	77 43                	ja     c0023913 <IDE::read(unsigned char, unsigned char)+0x5d>
c00238d0:	0f b6 f2             	movzx  esi,dl
c00238d3:	8d 6e 2a             	lea    ebp,[esi+0x2a]
c00238d6:	8a 44 ef 10          	mov    al,BYTE PTR [edi+ebp*8+0x10]
c00238da:	83 c8 80             	or     eax,0xffffff80
c00238dd:	0f b6 c0             	movzx  eax,al
c00238e0:	50                   	push   eax
c00238e1:	6a 0c                	push   0xc
c00238e3:	56                   	push   esi
c00238e4:	57                   	push   edi
c00238e5:	e8 0c ff ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00238ea:	66 8b 4c ef 0a       	mov    cx,WORD PTR [edi+ebp*8+0xa]
c00238ef:	0f b6 c3             	movzx  eax,bl
c00238f2:	8d 54 01 fa          	lea    edx,[ecx+eax*1-0x6]
c00238f6:	ec                   	in     al,dx
c00238f7:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00238fb:	0f b6 54 ef 10       	movzx  edx,BYTE PTR [edi+ebp*8+0x10]
c0023900:	52                   	push   edx
c0023901:	6a 0c                	push   0xc
c0023903:	56                   	push   esi
c0023904:	57                   	push   edi
c0023905:	e8 ec fe ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c002390a:	83 c4 20             	add    esp,0x20
c002390d:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0023911:	eb 49                	jmp    c002395c <IDE::read(unsigned char, unsigned char)+0xa6>
c0023913:	80 fb 07             	cmp    bl,0x7
c0023916:	77 12                	ja     c002392a <IDE::read(unsigned char, unsigned char)+0x74>
c0023918:	0f b6 d2             	movzx  edx,dl
c002391b:	0f b6 c3             	movzx  eax,bl
c002391e:	66 03 84 d7 5a 01 00 00 	add    ax,WORD PTR [edi+edx*8+0x15a]
c0023926:	89 c2                	mov    edx,eax
c0023928:	eb 31                	jmp    c002395b <IDE::read(unsigned char, unsigned char)+0xa5>
c002392a:	80 fb 0d             	cmp    bl,0xd
c002392d:	77 13                	ja     c0023942 <IDE::read(unsigned char, unsigned char)+0x8c>
c002392f:	0f b6 d2             	movzx  edx,dl
c0023932:	8b 84 d7 5c 01 00 00 	mov    eax,DWORD PTR [edi+edx*8+0x15c]
c0023939:	0f b6 d3             	movzx  edx,bl
c002393c:	8d 54 10 f4          	lea    edx,[eax+edx*1-0xc]
c0023940:	eb 19                	jmp    c002395b <IDE::read(unsigned char, unsigned char)+0xa5>
c0023942:	31 c0                	xor    eax,eax
c0023944:	80 fb 15             	cmp    bl,0x15
c0023947:	77 13                	ja     c002395c <IDE::read(unsigned char, unsigned char)+0xa6>
c0023949:	0f b6 d2             	movzx  edx,dl
c002394c:	66 8b 84 d7 5e 01 00 00 	mov    ax,WORD PTR [edi+edx*8+0x15e]
c0023954:	0f b6 d3             	movzx  edx,bl
c0023957:	8d 54 10 f2          	lea    edx,[eax+edx*1-0xe]
c002395b:	ec                   	in     al,dx
c002395c:	83 c4 1c             	add    esp,0x1c
c002395f:	5b                   	pop    ebx
c0023960:	5e                   	pop    esi
c0023961:	5f                   	pop    edi
c0023962:	5d                   	pop    ebp
c0023963:	c3                   	ret    

c0023964 <IDE::waitInterrupt(unsigned char)>:
c0023964:	55                   	push   ebp
c0023965:	57                   	push   edi
c0023966:	56                   	push   esi
c0023967:	53                   	push   ebx
c0023968:	31 db                	xor    ebx,ebx
c002396a:	83 ec 0c             	sub    esp,0xc
c002396d:	8b 7c 24 20          	mov    edi,DWORD PTR [esp+0x20]
c0023971:	0f b6 74 24 24       	movzx  esi,BYTE PTR [esp+0x24]
c0023976:	0f b6 ac 37 6c 02 00 00 	movzx  ebp,BYTE PTR [edi+esi*1+0x26c]
c002397e:	89 e8                	mov    eax,ebp
c0023980:	84 c0                	test   al,al
c0023982:	75 34                	jne    c00239b8 <IDE::waitInterrupt(unsigned char)+0x54>
c0023984:	52                   	push   edx
c0023985:	6a 0c                	push   0xc
c0023987:	56                   	push   esi
c0023988:	57                   	push   edi
c0023989:	e8 28 ff ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c002398e:	83 c4 10             	add    esp,0x10
c0023991:	a8 01                	test   al,0x1
c0023993:	75 2b                	jne    c00239c0 <IDE::waitInterrupt(unsigned char)+0x5c>
c0023995:	f6 c3 04             	test   bl,0x4
c0023998:	75 16                	jne    c00239b0 <IDE::waitInterrupt(unsigned char)+0x4c>
c002399a:	83 fb 32             	cmp    ebx,0x32
c002399d:	7e 11                	jle    c00239b0 <IDE::waitInterrupt(unsigned char)+0x4c>
c002399f:	50                   	push   eax
c00239a0:	50                   	push   eax
c00239a1:	6a 00                	push   0x0
c00239a3:	68 80 96 98 00       	push   0x989680
c00239a8:	e8 e6 ad ff ff       	call   c001e793 <nanoSleep(unsigned long long)>
c00239ad:	83 c4 10             	add    esp,0x10
c00239b0:	83 fb 3c             	cmp    ebx,0x3c
c00239b3:	74 0b                	je     c00239c0 <IDE::waitInterrupt(unsigned char)+0x5c>
c00239b5:	43                   	inc    ebx
c00239b6:	eb be                	jmp    c0023976 <IDE::waitInterrupt(unsigned char)+0x12>
c00239b8:	c6 84 37 6c 02 00 00 00 	mov    BYTE PTR [edi+esi*1+0x26c],0x0
c00239c0:	83 c4 0c             	add    esp,0xc
c00239c3:	89 e8                	mov    eax,ebp
c00239c5:	5b                   	pop    ebx
c00239c6:	5e                   	pop    esi
c00239c7:	5f                   	pop    edi
c00239c8:	5d                   	pop    ebp
c00239c9:	c3                   	ret    

c00239ca <ideChannel0IRQHandler(regs*, void*)>:
c00239ca:	83 ec 10             	sub    esp,0x10
c00239cd:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00239d1:	c6 80 6c 02 00 00 01 	mov    BYTE PTR [eax+0x26c],0x1
c00239d8:	6a 07                	push   0x7
c00239da:	6a 00                	push   0x0
c00239dc:	50                   	push   eax
c00239dd:	e8 d4 fe ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c00239e2:	83 c4 1c             	add    esp,0x1c
c00239e5:	c3                   	ret    

c00239e6 <ideChannel1IRQHandler(regs*, void*)>:
c00239e6:	83 ec 10             	sub    esp,0x10
c00239e9:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c00239ed:	c6 80 6d 02 00 00 01 	mov    BYTE PTR [eax+0x26d],0x1
c00239f4:	6a 07                	push   0x7
c00239f6:	6a 01                	push   0x1
c00239f8:	50                   	push   eax
c00239f9:	e8 b8 fe ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c00239fe:	83 c4 1c             	add    esp,0x1c
c0023a01:	c3                   	ret    

c0023a02 <IDE::enableIRQs(unsigned char, bool)>:
c0023a02:	57                   	push   edi
c0023a03:	56                   	push   esi
c0023a04:	be 04 00 00 00       	mov    esi,0x4
c0023a09:	53                   	push   ebx
c0023a0a:	80 7c 24 18 00       	cmp    BYTE PTR [esp+0x18],0x0
c0023a0f:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0023a13:	0f b6 7c 24 14       	movzx  edi,BYTE PTR [esp+0x14]
c0023a18:	0f 94 c0             	sete   al
c0023a1b:	d1 e0                	shl    eax,1
c0023a1d:	88 84 fb 60 01 00 00 	mov    BYTE PTR [ebx+edi*8+0x160],al
c0023a24:	0f b6 c0             	movzx  eax,al
c0023a27:	50                   	push   eax
c0023a28:	6a 0c                	push   0xc
c0023a2a:	57                   	push   edi
c0023a2b:	53                   	push   ebx
c0023a2c:	e8 c5 fd ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023a31:	83 c4 10             	add    esp,0x10
c0023a34:	50                   	push   eax
c0023a35:	6a 0c                	push   0xc
c0023a37:	57                   	push   edi
c0023a38:	53                   	push   ebx
c0023a39:	e8 78 fe ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c0023a3e:	83 c4 10             	add    esp,0x10
c0023a41:	4e                   	dec    esi
c0023a42:	75 f0                	jne    c0023a34 <IDE::enableIRQs(unsigned char, bool)+0x32>
c0023a44:	5b                   	pop    ebx
c0023a45:	5e                   	pop    esi
c0023a46:	5f                   	pop    edi
c0023a47:	c3                   	ret    

c0023a48 <IDE::open(int, int, void*)>:
c0023a48:	55                   	push   ebp
c0023a49:	57                   	push   edi
c0023a4a:	56                   	push   esi
c0023a4b:	53                   	push   ebx
c0023a4c:	83 ec 1c             	sub    esp,0x1c
c0023a4f:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
c0023a53:	66 c7 83 5e 01 00 00 00 00 	mov    WORD PTR [ebx+0x15e],0x0
c0023a5c:	66 c7 83 66 01 00 00 00 00 	mov    WORD PTR [ebx+0x166],0x0
c0023a65:	c6 83 6e 02 00 00 00 	mov    BYTE PTR [ebx+0x26e],0x0
c0023a6c:	83 bb 14 01 00 00 02 	cmp    DWORD PTR [ebx+0x114],0x2
c0023a73:	0f 85 b0 02 00 00    	jne    c0023d29 <IDE::open(int, int, void*)+0x2e1>
c0023a79:	8a 83 1f 01 00 00    	mov    al,BYTE PTR [ebx+0x11f]
c0023a7f:	88 44 24 03          	mov    BYTE PTR [esp+0x3],al
c0023a83:	83 e0 7f             	and    eax,0x7f
c0023a86:	3c 05                	cmp    al,0x5
c0023a88:	74 04                	je     c0023a8e <IDE::open(int, int, void*)+0x46>
c0023a8a:	3c 0f                	cmp    al,0xf
c0023a8c:	75 32                	jne    c0023ac0 <IDE::open(int, int, void*)+0x78>
c0023a8e:	8b 83 20 01 00 00    	mov    eax,DWORD PTR [ebx+0x120]
c0023a94:	83 e0 fc             	and    eax,0xfffffffc
c0023a97:	66 89 83 5a 01 00 00 	mov    WORD PTR [ebx+0x15a],ax
c0023a9e:	8b 83 28 01 00 00    	mov    eax,DWORD PTR [ebx+0x128]
c0023aa4:	83 e0 fc             	and    eax,0xfffffffc
c0023aa7:	66 89 83 62 01 00 00 	mov    WORD PTR [ebx+0x162],ax
c0023aae:	8b 83 2c 01 00 00    	mov    eax,DWORD PTR [ebx+0x12c]
c0023ab4:	83 e0 fc             	and    eax,0xfffffffc
c0023ab7:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023abe:	eb 14                	jmp    c0023ad4 <IDE::open(int, int, void*)+0x8c>
c0023ac0:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023aca:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023ad4:	0f b6 83 1c 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11c]
c0023adb:	0f b6 ab 1d 01 00 00 	movzx  ebp,BYTE PTR [ebx+0x11d]
c0023ae2:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0023ae6:	89 c6                	mov    esi,eax
c0023ae8:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023aed:	c1 e6 10             	shl    esi,0x10
c0023af0:	89 e8                	mov    eax,ebp
c0023af2:	89 fa                	mov    edx,edi
c0023af4:	c1 e0 0b             	shl    eax,0xb
c0023af7:	09 f0                	or     eax,esi
c0023af9:	0f b6 b3 1e 01 00 00 	movzx  esi,BYTE PTR [ebx+0x11e]
c0023b00:	c1 e6 08             	shl    esi,0x8
c0023b03:	09 c6                	or     esi,eax
c0023b05:	89 f0                	mov    eax,esi
c0023b07:	0d 08 00 00 80       	or     eax,0x80000008
c0023b0c:	ef                   	out    dx,eax
c0023b0d:	b9 fc 0c 00 00       	mov    ecx,0xcfc
c0023b12:	89 ca                	mov    edx,ecx
c0023b14:	ed                   	in     eax,dx
c0023b15:	c1 e8 10             	shr    eax,0x10
c0023b18:	3d ff ff 00 00       	cmp    eax,0xffff
c0023b1d:	0f 84 f5 00 00 00    	je     c0023c18 <IDE::open(int, int, void*)+0x1d0>
c0023b23:	81 ce 3c 00 00 80    	or     esi,0x8000003c
c0023b29:	89 fa                	mov    edx,edi
c0023b2b:	89 f0                	mov    eax,esi
c0023b2d:	ef                   	out    dx,eax
c0023b2e:	b0 fe                	mov    al,0xfe
c0023b30:	89 ca                	mov    edx,ecx
c0023b32:	ee                   	out    dx,al
c0023b33:	89 f0                	mov    eax,esi
c0023b35:	89 fa                	mov    edx,edi
c0023b37:	ef                   	out    dx,eax
c0023b38:	89 ca                	mov    edx,ecx
c0023b3a:	ed                   	in     eax,dx
c0023b3b:	3c fe                	cmp    al,0xfe
c0023b3d:	0f 85 a9 00 00 00    	jne    c0023bec <IDE::open(int, int, void*)+0x1a4>
c0023b43:	8b 15 48 ee 02 c0    	mov    edx,DWORD PTR ds:0xc002ee48
c0023b49:	f6 82 e8 01 00 00 01 	test   BYTE PTR [edx+0x1e8],0x1
c0023b50:	74 33                	je     c0023b85 <IDE::open(int, int, void*)+0x13d>
c0023b52:	8a 83 39 01 00 00    	mov    al,BYTE PTR [ebx+0x139]
c0023b58:	8d 4c 24 08          	lea    ecx,[esp+0x8]
c0023b5c:	40                   	inc    eax
c0023b5d:	83 ec 0c             	sub    esp,0xc
c0023b60:	0f b6 c0             	movzx  eax,al
c0023b63:	50                   	push   eax
c0023b64:	55                   	push   ebp
c0023b65:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0023b69:	ff b2 e4 01 00 00    	push   DWORD PTR [edx+0x1e4]
c0023b6f:	51                   	push   ecx
c0023b70:	e8 af 47 ff ff       	call   c0018324 <ACPI::getPCIIRQAssignment(unsigned char, unsigned short, unsigned char)>
c0023b75:	0f b6 44 24 27       	movzx  eax,BYTE PTR [esp+0x27]
c0023b7a:	83 c4 1c             	add    esp,0x1c
c0023b7d:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023b83:	eb 0a                	jmp    c0023b8f <IDE::open(int, int, void*)+0x147>
c0023b85:	c7 83 50 01 00 00 0e 00 00 00 	mov    DWORD PTR [ebx+0x150],0xe
c0023b8f:	0f b6 8b 1c 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x11c]
c0023b96:	0f b6 83 1e 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11e]
c0023b9d:	c1 e1 10             	shl    ecx,0x10
c0023ba0:	c1 e0 08             	shl    eax,0x8
c0023ba3:	bf f8 0c 00 00       	mov    edi,0xcf8
c0023ba8:	09 c1                	or     ecx,eax
c0023baa:	89 fa                	mov    edx,edi
c0023bac:	0f b6 83 1d 01 00 00 	movzx  eax,BYTE PTR [ebx+0x11d]
c0023bb3:	c1 e0 0b             	shl    eax,0xb
c0023bb6:	09 c1                	or     ecx,eax
c0023bb8:	81 c9 3c 00 00 80    	or     ecx,0x8000003c
c0023bbe:	89 c8                	mov    eax,ecx
c0023bc0:	ef                   	out    dx,eax
c0023bc1:	be fc 0c 00 00       	mov    esi,0xcfc
c0023bc6:	8a 83 50 01 00 00    	mov    al,BYTE PTR [ebx+0x150]
c0023bcc:	89 f2                	mov    edx,esi
c0023bce:	ee                   	out    dx,al
c0023bcf:	89 c8                	mov    eax,ecx
c0023bd1:	89 fa                	mov    edx,edi
c0023bd3:	ef                   	out    dx,eax
c0023bd4:	89 f2                	mov    edx,esi
c0023bd6:	ed                   	in     eax,dx
c0023bd7:	0f b6 c0             	movzx  eax,al
c0023bda:	3b 83 50 01 00 00    	cmp    eax,DWORD PTR [ebx+0x150]
c0023be0:	74 46                	je     c0023c28 <IDE::open(int, int, void*)+0x1e0>
c0023be2:	83 ec 0c             	sub    esp,0xc
c0023be5:	68 e0 d4 02 c0       	push   0xc002d4e0
c0023bea:	eb 34                	jmp    c0023c20 <IDE::open(int, int, void*)+0x1d8>
c0023bec:	66 81 bb 18 01 00 00 01 01 	cmp    WORD PTR [ebx+0x118],0x101
c0023bf5:	75 17                	jne    c0023c0e <IDE::open(int, int, void*)+0x1c6>
c0023bf7:	80 7c 24 03 80       	cmp    BYTE PTR [esp+0x3],0x80
c0023bfc:	74 07                	je     c0023c05 <IDE::open(int, int, void*)+0x1bd>
c0023bfe:	80 7c 24 03 8a       	cmp    BYTE PTR [esp+0x3],0x8a
c0023c03:	75 09                	jne    c0023c0e <IDE::open(int, int, void*)+0x1c6>
c0023c05:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023c0c:	eb 1a                	jmp    c0023c28 <IDE::open(int, int, void*)+0x1e0>
c0023c0e:	83 ec 0c             	sub    esp,0xc
c0023c11:	68 e8 d4 02 c0       	push   0xc002d4e8
c0023c16:	eb 08                	jmp    c0023c20 <IDE::open(int, int, void*)+0x1d8>
c0023c18:	83 ec 0c             	sub    esp,0xc
c0023c1b:	68 19 d5 02 c0       	push   0xc002d519
c0023c20:	e8 dc 6b ff ff       	call   c001a801 <Krnl::panic(char const*)>
c0023c25:	83 c4 10             	add    esp,0x10
c0023c28:	80 bb 1f 01 00 00 00 	cmp    BYTE PTR [ebx+0x11f],0x0
c0023c2f:	79 1a                	jns    c0023c4b <IDE::open(int, int, void*)+0x203>
c0023c31:	8b 83 30 01 00 00    	mov    eax,DWORD PTR [ebx+0x130]
c0023c37:	83 e0 fc             	and    eax,0xfffffffc
c0023c3a:	66 89 83 5e 01 00 00 	mov    WORD PTR [ebx+0x15e],ax
c0023c41:	83 c0 08             	add    eax,0x8
c0023c44:	66 89 83 66 01 00 00 	mov    WORD PTR [ebx+0x166],ax
c0023c4b:	8b 83 5c 01 00 00    	mov    eax,DWORD PTR [ebx+0x15c]
c0023c51:	89 c2                	mov    edx,eax
c0023c53:	83 e2 0f             	and    edx,0xf
c0023c56:	66 83 fa 08          	cmp    dx,0x8
c0023c5a:	75 0a                	jne    c0023c66 <IDE::open(int, int, void*)+0x21e>
c0023c5c:	83 e8 02             	sub    eax,0x2
c0023c5f:	66 89 83 5c 01 00 00 	mov    WORD PTR [ebx+0x15c],ax
c0023c66:	8b 83 64 01 00 00    	mov    eax,DWORD PTR [ebx+0x164]
c0023c6c:	89 c2                	mov    edx,eax
c0023c6e:	83 e2 0f             	and    edx,0xf
c0023c71:	66 83 fa 08          	cmp    dx,0x8
c0023c75:	75 0a                	jne    c0023c81 <IDE::open(int, int, void*)+0x239>
c0023c77:	83 e8 02             	sub    eax,0x2
c0023c7a:	66 89 83 64 01 00 00 	mov    WORD PTR [ebx+0x164],ax
c0023c81:	0f b6 93 c4 00 00 00 	movzx  edx,BYTE PTR [ebx+0xc4]
c0023c88:	66 8b b3 5a 01 00 00 	mov    si,WORD PTR [ebx+0x15a]
c0023c8f:	89 d0                	mov    eax,edx
c0023c91:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023c94:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023c98:	c6 41 06 08          	mov    BYTE PTR [ecx+0x6],0x8
c0023c9c:	8d 4a 01             	lea    ecx,[edx+0x1]
c0023c9f:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023ca4:	0f b6 c9             	movzx  ecx,cl
c0023ca7:	66 8b b3 62 01 00 00 	mov    si,WORD PTR [ebx+0x162]
c0023cae:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023cb1:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023cb5:	c6 42 06 08          	mov    BYTE PTR [edx+0x6],0x8
c0023cb9:	8d 50 02             	lea    edx,[eax+0x2]
c0023cbc:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023cc1:	0f b6 d2             	movzx  edx,dl
c0023cc4:	8b b3 5c 01 00 00    	mov    esi,DWORD PTR [ebx+0x15c]
c0023cca:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023ccd:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023cd1:	c6 41 06 01          	mov    BYTE PTR [ecx+0x6],0x1
c0023cd5:	8d 48 03             	lea    ecx,[eax+0x3]
c0023cd8:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023cdd:	0f b6 c9             	movzx  ecx,cl
c0023ce0:	8b b3 64 01 00 00    	mov    esi,DWORD PTR [ebx+0x164]
c0023ce6:	8d 14 8b             	lea    edx,[ebx+ecx*4]
c0023ce9:	66 89 72 04          	mov    WORD PTR [edx+0x4],si
c0023ced:	c6 42 06 01          	mov    BYTE PTR [edx+0x6],0x1
c0023cf1:	8d 50 04             	lea    edx,[eax+0x4]
c0023cf4:	88 93 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],dl
c0023cfa:	80 64 8b 07 3f       	and    BYTE PTR [ebx+ecx*4+0x7],0x3f
c0023cff:	66 8b b3 5e 01 00 00 	mov    si,WORD PTR [ebx+0x15e]
c0023d06:	66 85 f6             	test   si,si
c0023d09:	74 3e                	je     c0023d49 <IDE::open(int, int, void*)+0x301>
c0023d0b:	0f b6 d2             	movzx  edx,dl
c0023d0e:	83 c0 05             	add    eax,0x5
c0023d11:	8d 0c 93             	lea    ecx,[ebx+edx*4]
c0023d14:	66 89 71 04          	mov    WORD PTR [ecx+0x4],si
c0023d18:	c6 41 06 10          	mov    BYTE PTR [ecx+0x6],0x10
c0023d1c:	88 83 c4 00 00 00    	mov    BYTE PTR [ebx+0xc4],al
c0023d22:	80 64 93 07 3f       	and    BYTE PTR [ebx+edx*4+0x7],0x3f
c0023d27:	eb 20                	jmp    c0023d49 <IDE::open(int, int, void*)+0x301>
c0023d29:	c7 83 5a 01 00 00 f0 01 f6 03 	mov    DWORD PTR [ebx+0x15a],0x3f601f0
c0023d33:	c7 83 62 01 00 00 70 01 76 03 	mov    DWORD PTR [ebx+0x162],0x3760170
c0023d3d:	c6 83 6e 02 00 00 01 	mov    BYTE PTR [ebx+0x26e],0x1
c0023d44:	e9 02 ff ff ff       	jmp    c0023c4b <IDE::open(int, int, void*)+0x203>
c0023d49:	52                   	push   edx
c0023d4a:	52                   	push   edx
c0023d4b:	6a 00                	push   0x0
c0023d4d:	53                   	push   ebx
c0023d4e:	e8 7d fa ff ff       	call   c00237d0 <IDE::prepareInterrupt(unsigned char)>
c0023d53:	59                   	pop    ecx
c0023d54:	5e                   	pop    esi
c0023d55:	6a 01                	push   0x1
c0023d57:	53                   	push   ebx
c0023d58:	e8 73 fa ff ff       	call   c00237d0 <IDE::prepareInterrupt(unsigned char)>
c0023d5d:	83 c4 0c             	add    esp,0xc
c0023d60:	6a 00                	push   0x0
c0023d62:	6a 00                	push   0x0
c0023d64:	53                   	push   ebx
c0023d65:	e8 98 fc ff ff       	call   c0023a02 <IDE::enableIRQs(unsigned char, bool)>
c0023d6a:	83 c4 0c             	add    esp,0xc
c0023d6d:	6a 00                	push   0x0
c0023d6f:	6a 01                	push   0x1
c0023d71:	53                   	push   ebx
c0023d72:	e8 8b fc ff ff       	call   c0023a02 <IDE::enableIRQs(unsigned char, bool)>
c0023d77:	83 c4 10             	add    esp,0x10
c0023d7a:	80 bb 6e 02 00 00 00 	cmp    BYTE PTR [ebx+0x26e],0x0
c0023d81:	74 40                	je     c0023dc3 <IDE::open(int, int, void*)+0x37b>
c0023d83:	83 ec 0c             	sub    esp,0xc
c0023d86:	68 43 d5 02 c0       	push   0xc002d543
c0023d8b:	e8 b7 f0 fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0023d90:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023d93:	6a 01                	push   0x1
c0023d95:	68 ca 39 02 c0       	push   0xc00239ca
c0023d9a:	6a 0e                	push   0xe
c0023d9c:	53                   	push   ebx
c0023d9d:	e8 4c 04 ff ff       	call   c00141ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023da2:	83 c4 14             	add    esp,0x14
c0023da5:	89 83 50 01 00 00    	mov    DWORD PTR [ebx+0x150],eax
c0023dab:	53                   	push   ebx
c0023dac:	6a 01                	push   0x1
c0023dae:	68 e6 39 02 c0       	push   0xc00239e6
c0023db3:	6a 0f                	push   0xf
c0023db5:	53                   	push   ebx
c0023db6:	e8 33 04 ff ff       	call   c00141ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023dbb:	89 83 54 01 00 00    	mov    DWORD PTR [ebx+0x154],eax
c0023dc1:	eb 4a                	jmp    c0023e0d <IDE::open(int, int, void*)+0x3c5>
c0023dc3:	c7 83 54 01 00 00 0f 00 00 00 	mov    DWORD PTR [ebx+0x154],0xf
c0023dcd:	50                   	push   eax
c0023dce:	6a 0f                	push   0xf
c0023dd0:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023dd6:	68 5f d5 02 c0       	push   0xc002d55f
c0023ddb:	e8 67 f0 fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0023de0:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0023de3:	6a 00                	push   0x0
c0023de5:	68 ca 39 02 c0       	push   0xc00239ca
c0023dea:	ff b3 50 01 00 00    	push   DWORD PTR [ebx+0x150]
c0023df0:	53                   	push   ebx
c0023df1:	e8 f8 03 ff ff       	call   c00141ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023df6:	83 c4 14             	add    esp,0x14
c0023df9:	53                   	push   ebx
c0023dfa:	6a 00                	push   0x0
c0023dfc:	68 e6 39 02 c0       	push   0xc00239e6
c0023e01:	ff b3 54 01 00 00    	push   DWORD PTR [ebx+0x154]
c0023e07:	53                   	push   ebx
c0023e08:	e8 e1 03 ff ff       	call   c00141ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0023e0d:	8b 03                	mov    eax,DWORD PTR [ebx]
c0023e0f:	83 c4 20             	add    esp,0x20
c0023e12:	83 ec 0c             	sub    esp,0xc
c0023e15:	53                   	push   ebx
c0023e16:	ff 50 18             	call   DWORD PTR [eax+0x18]
c0023e19:	83 c4 0c             	add    esp,0xc
c0023e1c:	6a 07                	push   0x7
c0023e1e:	6a 00                	push   0x0
c0023e20:	53                   	push   ebx
c0023e21:	e8 90 fa ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c0023e26:	83 c4 0c             	add    esp,0xc
c0023e29:	6a 07                	push   0x7
c0023e2b:	6a 01                	push   0x1
c0023e2d:	53                   	push   ebx
c0023e2e:	e8 83 fa ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c0023e33:	83 c4 0c             	add    esp,0xc
c0023e36:	6a 01                	push   0x1
c0023e38:	6a 00                	push   0x0
c0023e3a:	53                   	push   ebx
c0023e3b:	e8 c2 fb ff ff       	call   c0023a02 <IDE::enableIRQs(unsigned char, bool)>
c0023e40:	83 c4 0c             	add    esp,0xc
c0023e43:	6a 01                	push   0x1
c0023e45:	6a 01                	push   0x1
c0023e47:	53                   	push   ebx
c0023e48:	e8 b5 fb ff ff       	call   c0023a02 <IDE::enableIRQs(unsigned char, bool)>
c0023e4d:	83 c4 2c             	add    esp,0x2c
c0023e50:	31 c0                	xor    eax,eax
c0023e52:	5b                   	pop    ebx
c0023e53:	5e                   	pop    esi
c0023e54:	5f                   	pop    edi
c0023e55:	5d                   	pop    ebp
c0023e56:	c3                   	ret    
c0023e57:	90                   	nop

c0023e58 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>:
c0023e58:	55                   	push   ebp
c0023e59:	57                   	push   edi
c0023e5a:	56                   	push   esi
c0023e5b:	53                   	push   ebx
c0023e5c:	83 ec 1c             	sub    esp,0x1c
c0023e5f:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0023e63:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c0023e67:	8d 50 f8             	lea    edx,[eax-0x8]
c0023e6a:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0023e6e:	8b 7c 24 3c          	mov    edi,DWORD PTR [esp+0x3c]
c0023e72:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c0023e76:	80 fa 03             	cmp    dl,0x3
c0023e79:	77 5d                	ja     c0023ed8 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x80>
c0023e7b:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0023e7f:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0023e83:	0f b6 db             	movzx  ebx,bl
c0023e86:	8d 6b 2a             	lea    ebp,[ebx+0x2a]
c0023e89:	8a 54 ee 10          	mov    dl,BYTE PTR [esi+ebp*8+0x10]
c0023e8d:	83 ca 80             	or     edx,0xffffff80
c0023e90:	0f b6 d2             	movzx  edx,dl
c0023e93:	52                   	push   edx
c0023e94:	6a 0c                	push   0xc
c0023e96:	53                   	push   ebx
c0023e97:	56                   	push   esi
c0023e98:	e8 59 f9 ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023e9d:	66 8b 54 ee 0a       	mov    dx,WORD PTR [esi+ebp*8+0xa]
c0023ea2:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0023ea6:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c0023eaa:	0f b6 c0             	movzx  eax,al
c0023ead:	8d 54 02 fa          	lea    edx,[edx+eax*1-0x6]
c0023eb1:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023eb3:	0f b6 44 ee 10       	movzx  eax,BYTE PTR [esi+ebp*8+0x10]
c0023eb8:	89 5c 24 44          	mov    DWORD PTR [esp+0x44],ebx
c0023ebc:	89 74 24 40          	mov    DWORD PTR [esp+0x40],esi
c0023ec0:	89 44 24 4c          	mov    DWORD PTR [esp+0x4c],eax
c0023ec4:	c7 44 24 48 0c 00 00 00 	mov    DWORD PTR [esp+0x48],0xc
c0023ecc:	83 c4 2c             	add    esp,0x2c
c0023ecf:	5b                   	pop    ebx
c0023ed0:	5e                   	pop    esi
c0023ed1:	5f                   	pop    edi
c0023ed2:	5d                   	pop    ebp
c0023ed3:	e9 1e f9 ff ff       	jmp    c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023ed8:	3c 07                	cmp    al,0x7
c0023eda:	77 10                	ja     c0023eec <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0x94>
c0023edc:	0f b6 db             	movzx  ebx,bl
c0023edf:	0f b6 d0             	movzx  edx,al
c0023ee2:	66 03 94 de 5a 01 00 00 	add    dx,WORD PTR [esi+ebx*8+0x15a]
c0023eea:	eb 2d                	jmp    c0023f19 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023eec:	3c 0d                	cmp    al,0xd
c0023eee:	77 13                	ja     c0023f03 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xab>
c0023ef0:	0f b6 db             	movzx  ebx,bl
c0023ef3:	0f b6 c0             	movzx  eax,al
c0023ef6:	8b 94 de 5c 01 00 00 	mov    edx,DWORD PTR [esi+ebx*8+0x15c]
c0023efd:	8d 54 02 f4          	lea    edx,[edx+eax*1-0xc]
c0023f01:	eb 16                	jmp    c0023f19 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc1>
c0023f03:	3c 15                	cmp    al,0x15
c0023f05:	77 14                	ja     c0023f1b <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)+0xc3>
c0023f07:	0f b6 db             	movzx  ebx,bl
c0023f0a:	0f b6 c0             	movzx  eax,al
c0023f0d:	66 8b 94 de 5e 01 00 00 	mov    dx,WORD PTR [esi+ebx*8+0x15e]
c0023f15:	8d 54 02 f2          	lea    edx,[edx+eax*1-0xe]
c0023f19:	f3 6d                	rep ins DWORD PTR es:[edi],dx
c0023f1b:	83 c4 1c             	add    esp,0x1c
c0023f1e:	5b                   	pop    ebx
c0023f1f:	5e                   	pop    esi
c0023f20:	5f                   	pop    edi
c0023f21:	5d                   	pop    ebp
c0023f22:	c3                   	ret    
c0023f23:	90                   	nop

c0023f24 <IDE::detect()>:
c0023f24:	55                   	push   ebp
c0023f25:	57                   	push   edi
c0023f26:	56                   	push   esi
c0023f27:	53                   	push   ebx
c0023f28:	81 ec 1c 02 00 00    	sub    esp,0x21c
c0023f2e:	8b 9c 24 30 02 00 00 	mov    ebx,DWORD PTR [esp+0x230]
c0023f35:	80 bb 58 01 00 00 00 	cmp    BYTE PTR [ebx+0x158],0x0
c0023f3c:	0f 85 be 02 00 00    	jne    c0024200 <IDE::detect()+0x2dc>
c0023f42:	c6 83 58 01 00 00 01 	mov    BYTE PTR [ebx+0x158],0x1
c0023f49:	31 f6                	xor    esi,esi
c0023f4b:	c7 44 24 04 00 00 00 00 	mov    DWORD PTR [esp+0x4],0x0
c0023f53:	31 ed                	xor    ebp,ebp
c0023f55:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0023f59:	c1 e0 06             	shl    eax,0x6
c0023f5c:	c6 84 03 6c 01 00 00 00 	mov    BYTE PTR [ebx+eax*1+0x16c],0x0
c0023f64:	89 e8                	mov    eax,ebp
c0023f66:	88 44 24 08          	mov    BYTE PTR [esp+0x8],al
c0023f6a:	c1 e0 04             	shl    eax,0x4
c0023f6d:	83 c8 a0             	or     eax,0xffffffa0
c0023f70:	0f b6 c0             	movzx  eax,al
c0023f73:	50                   	push   eax
c0023f74:	6a 06                	push   0x6
c0023f76:	56                   	push   esi
c0023f77:	53                   	push   ebx
c0023f78:	e8 79 f8 ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023f7d:	83 c4 0c             	add    esp,0xc
c0023f80:	6a 0c                	push   0xc
c0023f82:	56                   	push   esi
c0023f83:	53                   	push   ebx
c0023f84:	e8 2d f9 ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c0023f89:	83 c4 0c             	add    esp,0xc
c0023f8c:	6a 0c                	push   0xc
c0023f8e:	56                   	push   esi
c0023f8f:	53                   	push   ebx
c0023f90:	e8 21 f9 ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c0023f95:	83 c4 0c             	add    esp,0xc
c0023f98:	6a 0c                	push   0xc
c0023f9a:	56                   	push   esi
c0023f9b:	53                   	push   ebx
c0023f9c:	e8 15 f9 ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c0023fa1:	83 c4 0c             	add    esp,0xc
c0023fa4:	6a 0c                	push   0xc
c0023fa6:	56                   	push   esi
c0023fa7:	53                   	push   ebx
c0023fa8:	e8 09 f9 ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c0023fad:	68 ec 00 00 00       	push   0xec
c0023fb2:	6a 07                	push   0x7
c0023fb4:	56                   	push   esi
c0023fb5:	53                   	push   ebx
c0023fb6:	e8 3b f8 ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0023fbb:	83 c4 1c             	add    esp,0x1c
c0023fbe:	6a 0c                	push   0xc
c0023fc0:	56                   	push   esi
c0023fc1:	53                   	push   ebx
c0023fc2:	e8 ef f8 ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c0023fc7:	83 c4 0c             	add    esp,0xc
c0023fca:	6a 0c                	push   0xc
c0023fcc:	56                   	push   esi
c0023fcd:	53                   	push   ebx
c0023fce:	e8 e3 f8 ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c0023fd3:	83 c4 0c             	add    esp,0xc
c0023fd6:	6a 0c                	push   0xc
c0023fd8:	56                   	push   esi
c0023fd9:	53                   	push   ebx
c0023fda:	e8 d7 f8 ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c0023fdf:	83 c4 0c             	add    esp,0xc
c0023fe2:	6a 0c                	push   0xc
c0023fe4:	56                   	push   esi
c0023fe5:	53                   	push   ebx
c0023fe6:	e8 cb f8 ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c0023feb:	83 c4 0c             	add    esp,0xc
c0023fee:	6a 0c                	push   0xc
c0023ff0:	56                   	push   esi
c0023ff1:	53                   	push   ebx
c0023ff2:	e8 bf f8 ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c0023ff7:	83 c4 10             	add    esp,0x10
c0023ffa:	84 c0                	test   al,al
c0023ffc:	0f 84 8b 01 00 00    	je     c002418d <IDE::detect()+0x269>
c0024002:	31 ff                	xor    edi,edi
c0024004:	50                   	push   eax
c0024005:	6a 0c                	push   0xc
c0024007:	56                   	push   esi
c0024008:	53                   	push   ebx
c0024009:	e8 a8 f8 ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c002400e:	83 c4 10             	add    esp,0x10
c0024011:	a8 01                	test   al,0x1
c0024013:	0f 85 8e 01 00 00    	jne    c00241a7 <IDE::detect()+0x283>
c0024019:	84 c0                	test   al,al
c002401b:	78 04                	js     c0024021 <IDE::detect()+0xfd>
c002401d:	a8 08                	test   al,0x8
c002401f:	75 27                	jne    c0024048 <IDE::detect()+0x124>
c0024021:	47                   	inc    edi
c0024022:	81 ff 17 01 00 00    	cmp    edi,0x117
c0024028:	7e da                	jle    c0024004 <IDE::detect()+0xe0>
c002402a:	50                   	push   eax
c002402b:	50                   	push   eax
c002402c:	6a 00                	push   0x0
c002402e:	68 40 4b 4c 00       	push   0x4c4b40
c0024033:	e8 5b a7 ff ff       	call   c001e793 <nanoSleep(unsigned long long)>
c0024038:	83 c4 10             	add    esp,0x10
c002403b:	81 ff 2c 01 00 00    	cmp    edi,0x12c
c0024041:	75 c1                	jne    c0024004 <IDE::detect()+0xe0>
c0024043:	e9 5f 01 00 00       	jmp    c00241a7 <IDE::detect()+0x283>
c0024048:	31 c9                	xor    ecx,ecx
c002404a:	88 4c 24 0f          	mov    BYTE PTR [esp+0xf],cl
c002404e:	8d 7c 24 10          	lea    edi,[esp+0x10]
c0024052:	83 ec 0c             	sub    esp,0xc
c0024055:	68 80 00 00 00       	push   0x80
c002405a:	57                   	push   edi
c002405b:	6a 00                	push   0x0
c002405d:	56                   	push   esi
c002405e:	53                   	push   ebx
c002405f:	e8 f4 fd ff ff       	call   c0023e58 <IDE::readBuffer(unsigned char, unsigned char, unsigned int, unsigned int)>
c0024064:	0f b6 54 24 2f       	movzx  edx,BYTE PTR [esp+0x2f]
c0024069:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c002406d:	89 d1                	mov    ecx,edx
c002406f:	c1 e0 06             	shl    eax,0x6
c0024072:	01 d8                	add    eax,ebx
c0024074:	66 89 90 70 01 00 00 	mov    WORD PTR [eax+0x170],dx
c002407b:	c6 80 6c 01 00 00 01 	mov    BYTE PTR [eax+0x16c],0x1
c0024082:	89 f2                	mov    edx,esi
c0024084:	88 90 6d 01 00 00    	mov    BYTE PTR [eax+0x16d],dl
c002408a:	8a 54 24 28          	mov    dl,BYTE PTR [esp+0x28]
c002408e:	88 90 6e 01 00 00    	mov    BYTE PTR [eax+0x16e],dl
c0024094:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024098:	66 89 90 72 01 00 00 	mov    WORD PTR [eax+0x172],dx
c002409f:	66 8b 94 24 92 00 00 00 	mov    dx,WORD PTR [esp+0x92]
c00240a7:	66 89 90 74 01 00 00 	mov    WORD PTR [eax+0x174],dx
c00240ae:	0f b6 94 24 d4 00 00 00 	movzx  edx,BYTE PTR [esp+0xd4]
c00240b6:	89 90 78 01 00 00    	mov    DWORD PTR [eax+0x178],edx
c00240bc:	8b 94 24 a8 00 00 00 	mov    edx,DWORD PTR [esp+0xa8]
c00240c3:	89 90 7c 01 00 00    	mov    DWORD PTR [eax+0x17c],edx
c00240c9:	8d 54 24 58          	lea    edx,[esp+0x58]
c00240cd:	89 54 24 28          	mov    DWORD PTR [esp+0x28],edx
c00240d1:	83 c4 20             	add    esp,0x20
c00240d4:	8a 57 37             	mov    dl,BYTE PTR [edi+0x37]
c00240d7:	83 c0 02             	add    eax,0x2
c00240da:	88 90 7e 01 00 00    	mov    BYTE PTR [eax+0x17e],dl
c00240e0:	83 c7 02             	add    edi,0x2
c00240e3:	8a 57 34             	mov    dl,BYTE PTR [edi+0x34]
c00240e6:	88 90 7f 01 00 00    	mov    BYTE PTR [eax+0x17f],dl
c00240ec:	39 7c 24 08          	cmp    DWORD PTR [esp+0x8],edi
c00240f0:	75 e2                	jne    c00240d4 <IDE::detect()+0x1b0>
c00240f2:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00240f6:	c1 e0 06             	shl    eax,0x6
c00240f9:	01 d8                	add    eax,ebx
c00240fb:	8b 90 74 01 00 00    	mov    edx,DWORD PTR [eax+0x174]
c0024101:	c6 80 a8 01 00 00 00 	mov    BYTE PTR [eax+0x1a8],0x0
c0024108:	66 c1 ea 09          	shr    dx,0x9
c002410c:	83 e2 01             	and    edx,0x1
c002410f:	84 c9                	test   cl,cl
c0024111:	88 90 a9 01 00 00    	mov    BYTE PTR [eax+0x1a9],dl
c0024117:	75 2f                	jne    c0024148 <IDE::detect()+0x224>
c0024119:	8b 80 7c 01 00 00    	mov    eax,DWORD PTR [eax+0x17c]
c002411f:	85 c0                	test   eax,eax
c0024121:	74 66                	je     c0024189 <IDE::detect()+0x265>
c0024123:	50                   	push   eax
c0024124:	55                   	push   ebp
c0024125:	56                   	push   esi
c0024126:	68 7b d5 02 c0       	push   0xc002d57b
c002412b:	e8 17 ed fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0024130:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c0024137:	e8 6c b7 fe ff       	call   c000f8a8 <malloc>
c002413c:	89 c7                	mov    edi,eax
c002413e:	89 04 24             	mov    DWORD PTR [esp],eax
c0024141:	e8 78 06 00 00       	call   c00247be <ATA::ATA()>
c0024146:	eb 28                	jmp    c0024170 <IDE::detect()+0x24c>
c0024148:	ff b0 7c 01 00 00    	push   DWORD PTR [eax+0x17c]
c002414e:	55                   	push   ebp
c002414f:	56                   	push   esi
c0024150:	68 aa d5 02 c0       	push   0xc002d5aa
c0024155:	e8 ed ec fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c002415a:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c0024161:	e8 42 b7 fe ff       	call   c000f8a8 <malloc>
c0024166:	89 c7                	mov    edi,eax
c0024168:	89 04 24             	mov    DWORD PTR [esp],eax
c002416b:	e8 8e 0c 00 00       	call   c0024dfe <ATAPI::ATAPI()>
c0024170:	5a                   	pop    edx
c0024171:	59                   	pop    ecx
c0024172:	57                   	push   edi
c0024173:	53                   	push   ebx
c0024174:	e8 f1 00 ff ff       	call   c001426a <Device::addChild(Device*)>
c0024179:	8b 07                	mov    eax,DWORD PTR [edi]
c002417b:	53                   	push   ebx
c002417c:	ff 74 24 18          	push   DWORD PTR [esp+0x18]
c0024180:	6a 00                	push   0x0
c0024182:	57                   	push   edi
c0024183:	ff 50 08             	call   DWORD PTR [eax+0x8]
c0024186:	83 c4 20             	add    esp,0x20
c0024189:	ff 44 24 04          	inc    DWORD PTR [esp+0x4]
c002418d:	4d                   	dec    ebp
c002418e:	74 0a                	je     c002419a <IDE::detect()+0x276>
c0024190:	bd 01 00 00 00       	mov    ebp,0x1
c0024195:	e9 bb fd ff ff       	jmp    c0023f55 <IDE::detect()+0x31>
c002419a:	4e                   	dec    esi
c002419b:	74 63                	je     c0024200 <IDE::detect()+0x2dc>
c002419d:	be 01 00 00 00       	mov    esi,0x1
c00241a2:	e9 ac fd ff ff       	jmp    c0023f53 <IDE::detect()+0x2f>
c00241a7:	50                   	push   eax
c00241a8:	6a 04                	push   0x4
c00241aa:	56                   	push   esi
c00241ab:	53                   	push   ebx
c00241ac:	e8 05 f7 ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c00241b1:	88 44 24 1f          	mov    BYTE PTR [esp+0x1f],al
c00241b5:	83 c4 0c             	add    esp,0xc
c00241b8:	6a 05                	push   0x5
c00241ba:	56                   	push   esi
c00241bb:	53                   	push   ebx
c00241bc:	e8 f5 f6 ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c00241c1:	83 c4 10             	add    esp,0x10
c00241c4:	8a 54 24 0f          	mov    dl,BYTE PTR [esp+0xf]
c00241c8:	80 fa 14             	cmp    dl,0x14
c00241cb:	75 04                	jne    c00241d1 <IDE::detect()+0x2ad>
c00241cd:	3c eb                	cmp    al,0xeb
c00241cf:	eb 07                	jmp    c00241d8 <IDE::detect()+0x2b4>
c00241d1:	3c 96                	cmp    al,0x96
c00241d3:	75 b8                	jne    c002418d <IDE::detect()+0x269>
c00241d5:	80 fa 69             	cmp    dl,0x69
c00241d8:	75 b3                	jne    c002418d <IDE::detect()+0x269>
c00241da:	68 a1 00 00 00       	push   0xa1
c00241df:	6a 07                	push   0x7
c00241e1:	56                   	push   esi
c00241e2:	53                   	push   ebx
c00241e3:	e8 0e f6 ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00241e8:	5f                   	pop    edi
c00241e9:	58                   	pop    eax
c00241ea:	6a 00                	push   0x0
c00241ec:	68 40 42 0f 00       	push   0xf4240
c00241f1:	e8 9d a5 ff ff       	call   c001e793 <nanoSleep(unsigned long long)>
c00241f6:	83 c4 10             	add    esp,0x10
c00241f9:	b1 01                	mov    cl,0x1
c00241fb:	e9 4a fe ff ff       	jmp    c002404a <IDE::detect()+0x126>
c0024200:	81 c4 1c 02 00 00    	add    esp,0x21c
c0024206:	5b                   	pop    ebx
c0024207:	5e                   	pop    esi
c0024208:	5f                   	pop    edi
c0024209:	5d                   	pop    ebp
c002420a:	c3                   	ret    
c002420b:	90                   	nop

c002420c <IDE::printError(unsigned char, unsigned char, unsigned char)>:
c002420c:	55                   	push   ebp
c002420d:	57                   	push   edi
c002420e:	56                   	push   esi
c002420f:	53                   	push   ebx
c0024210:	83 ec 1c             	sub    esp,0x1c
c0024213:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c0024217:	8b 7c 24 30          	mov    edi,DWORD PTR [esp+0x30]
c002421b:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c002421f:	8b 6c 24 38          	mov    ebp,DWORD PTR [esp+0x38]
c0024223:	88 c3                	mov    bl,al
c0024225:	84 c0                	test   al,al
c0024227:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002422b:	0f 84 67 01 00 00    	je     c0024398 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x18c>
c0024231:	83 ec 0c             	sub    esp,0xc
c0024234:	68 db d5 02 c0       	push   0xc002d5db
c0024239:	e8 09 ec fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c002423e:	83 c4 10             	add    esp,0x10
c0024241:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024245:	3c 01                	cmp    al,0x1
c0024247:	75 17                	jne    c0024260 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x54>
c0024249:	83 ec 0c             	sub    esp,0xc
c002424c:	b3 13                	mov    bl,0x13
c002424e:	68 e7 d5 02 c0       	push   0xc002d5e7
c0024253:	e8 ef eb fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0024258:	83 c4 10             	add    esp,0x10
c002425b:	e9 25 01 00 00       	jmp    c0024385 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024260:	3c 02                	cmp    al,0x2
c0024262:	0f 85 ef 00 00 00    	jne    c0024357 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x14b>
c0024268:	d1 e6                	shl    esi,1
c002426a:	09 ee                	or     esi,ebp
c002426c:	52                   	push   edx
c002426d:	89 f0                	mov    eax,esi
c002426f:	6a 01                	push   0x1
c0024271:	0f b6 f0             	movzx  esi,al
c0024274:	c1 e6 06             	shl    esi,0x6
c0024277:	0f b6 84 37 6d 01 00 00 	movzx  eax,BYTE PTR [edi+esi*1+0x16d]
c002427f:	50                   	push   eax
c0024280:	57                   	push   edi
c0024281:	e8 30 f6 ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c0024286:	83 c4 10             	add    esp,0x10
c0024289:	89 c6                	mov    esi,eax
c002428b:	a8 01                	test   al,0x1
c002428d:	74 12                	je     c00242a1 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x95>
c002428f:	83 ec 0c             	sub    esp,0xc
c0024292:	b3 07                	mov    bl,0x7
c0024294:	68 fc d5 02 c0       	push   0xc002d5fc
c0024299:	e8 a9 eb fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c002429e:	83 c4 10             	add    esp,0x10
c00242a1:	f7 c6 02 00 00 00    	test   esi,0x2
c00242a7:	74 12                	je     c00242bb <IDE::printError(unsigned char, unsigned char, unsigned char)+0xaf>
c00242a9:	83 ec 0c             	sub    esp,0xc
c00242ac:	b3 03                	mov    bl,0x3
c00242ae:	68 1a d6 02 c0       	push   0xc002d61a
c00242b3:	e8 8f eb fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00242b8:	83 c4 10             	add    esp,0x10
c00242bb:	f7 c6 04 00 00 00    	test   esi,0x4
c00242c1:	74 12                	je     c00242d5 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xc9>
c00242c3:	83 ec 0c             	sub    esp,0xc
c00242c6:	b3 14                	mov    bl,0x14
c00242c8:	68 3a d6 02 c0       	push   0xc002d63a
c00242cd:	e8 75 eb fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00242d2:	83 c4 10             	add    esp,0x10
c00242d5:	f7 c6 08 00 00 00    	test   esi,0x8
c00242db:	74 12                	je     c00242ef <IDE::printError(unsigned char, unsigned char, unsigned char)+0xe3>
c00242dd:	83 ec 0c             	sub    esp,0xc
c00242e0:	b3 03                	mov    bl,0x3
c00242e2:	68 1a d6 02 c0       	push   0xc002d61a
c00242e7:	e8 5b eb fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00242ec:	83 c4 10             	add    esp,0x10
c00242ef:	f7 c6 10 00 00 00    	test   esi,0x10
c00242f5:	74 12                	je     c0024309 <IDE::printError(unsigned char, unsigned char, unsigned char)+0xfd>
c00242f7:	83 ec 0c             	sub    esp,0xc
c00242fa:	b3 15                	mov    bl,0x15
c00242fc:	68 52 d6 02 c0       	push   0xc002d652
c0024301:	e8 41 eb fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0024306:	83 c4 10             	add    esp,0x10
c0024309:	f7 c6 20 00 00 00    	test   esi,0x20
c002430f:	74 12                	je     c0024323 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x117>
c0024311:	83 ec 0c             	sub    esp,0xc
c0024314:	b3 03                	mov    bl,0x3
c0024316:	68 1a d6 02 c0       	push   0xc002d61a
c002431b:	e8 27 eb fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0024320:	83 c4 10             	add    esp,0x10
c0024323:	f7 c6 40 00 00 00    	test   esi,0x40
c0024329:	74 12                	je     c002433d <IDE::printError(unsigned char, unsigned char, unsigned char)+0x131>
c002432b:	83 ec 0c             	sub    esp,0xc
c002432e:	b3 16                	mov    bl,0x16
c0024330:	68 6c d6 02 c0       	push   0xc002d66c
c0024335:	e8 0d eb fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c002433a:	83 c4 10             	add    esp,0x10
c002433d:	89 f0                	mov    eax,esi
c002433f:	84 c0                	test   al,al
c0024341:	79 42                	jns    c0024385 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024343:	83 ec 0c             	sub    esp,0xc
c0024346:	b3 0d                	mov    bl,0xd
c0024348:	68 8d d6 02 c0       	push   0xc002d68d
c002434d:	e8 f5 ea fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0024352:	83 c4 10             	add    esp,0x10
c0024355:	eb 2e                	jmp    c0024385 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024357:	3c 03                	cmp    al,0x3
c0024359:	75 14                	jne    c002436f <IDE::printError(unsigned char, unsigned char, unsigned char)+0x163>
c002435b:	83 ec 0c             	sub    esp,0xc
c002435e:	b3 17                	mov    bl,0x17
c0024360:	68 a1 d6 02 c0       	push   0xc002d6a1
c0024365:	e8 dd ea fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c002436a:	83 c4 10             	add    esp,0x10
c002436d:	eb 16                	jmp    c0024385 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c002436f:	3c 04                	cmp    al,0x4
c0024371:	75 12                	jne    c0024385 <IDE::printError(unsigned char, unsigned char, unsigned char)+0x179>
c0024373:	83 ec 0c             	sub    esp,0xc
c0024376:	b3 08                	mov    bl,0x8
c0024378:	68 b7 d6 02 c0       	push   0xc002d6b7
c002437d:	e8 c5 ea fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0024382:	83 c4 10             	add    esp,0x10
c0024385:	50                   	push   eax
c0024386:	50                   	push   eax
c0024387:	0f b6 c3             	movzx  eax,bl
c002438a:	50                   	push   eax
c002438b:	68 cf d6 02 c0       	push   0xc002d6cf
c0024390:	e8 b2 ea fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0024395:	83 c4 10             	add    esp,0x10
c0024398:	83 c4 1c             	add    esp,0x1c
c002439b:	88 d8                	mov    al,bl
c002439d:	5b                   	pop    ebx
c002439e:	5e                   	pop    esi
c002439f:	5f                   	pop    edi
c00243a0:	5d                   	pop    ebp
c00243a1:	c3                   	ret    

c00243a2 <IDE::polling(unsigned char, unsigned int)>:
c00243a2:	57                   	push   edi
c00243a3:	56                   	push   esi
c00243a4:	53                   	push   ebx
c00243a5:	bb 04 00 00 00       	mov    ebx,0x4
c00243aa:	8b 7c 24 10          	mov    edi,DWORD PTR [esp+0x10]
c00243ae:	0f b6 74 24 14       	movzx  esi,BYTE PTR [esp+0x14]
c00243b3:	52                   	push   edx
c00243b4:	6a 0c                	push   0xc
c00243b6:	56                   	push   esi
c00243b7:	57                   	push   edi
c00243b8:	e8 f9 f4 ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c00243bd:	83 c4 10             	add    esp,0x10
c00243c0:	4b                   	dec    ebx
c00243c1:	75 f0                	jne    c00243b3 <IDE::polling(unsigned char, unsigned int)+0x11>
c00243c3:	bb a0 86 01 00       	mov    ebx,0x186a0
c00243c8:	50                   	push   eax
c00243c9:	6a 0c                	push   0xc
c00243cb:	56                   	push   esi
c00243cc:	57                   	push   edi
c00243cd:	e8 e4 f4 ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c00243d2:	83 c4 10             	add    esp,0x10
c00243d5:	a8 01                	test   al,0x1
c00243d7:	74 12                	je     c00243eb <IDE::polling(unsigned char, unsigned int)+0x49>
c00243d9:	83 ec 0c             	sub    esp,0xc
c00243dc:	68 e9 d6 02 c0       	push   0xc002d6e9
c00243e1:	e8 61 ea fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00243e6:	83 c4 10             	add    esp,0x10
c00243e9:	eb 17                	jmp    c0024402 <IDE::polling(unsigned char, unsigned int)+0x60>
c00243eb:	a8 20                	test   al,0x20
c00243ed:	75 0f                	jne    c00243fe <IDE::polling(unsigned char, unsigned int)+0x5c>
c00243ef:	4b                   	dec    ebx
c00243f0:	74 10                	je     c0024402 <IDE::polling(unsigned char, unsigned int)+0x60>
c00243f2:	84 c0                	test   al,al
c00243f4:	78 d2                	js     c00243c8 <IDE::polling(unsigned char, unsigned int)+0x26>
c00243f6:	a8 08                	test   al,0x8
c00243f8:	74 ce                	je     c00243c8 <IDE::polling(unsigned char, unsigned int)+0x26>
c00243fa:	31 c0                	xor    eax,eax
c00243fc:	eb 06                	jmp    c0024404 <IDE::polling(unsigned char, unsigned int)+0x62>
c00243fe:	b0 01                	mov    al,0x1
c0024400:	eb 02                	jmp    c0024404 <IDE::polling(unsigned char, unsigned int)+0x62>
c0024402:	b0 02                	mov    al,0x2
c0024404:	5b                   	pop    ebx
c0024405:	5e                   	pop    esi
c0024406:	5f                   	pop    edi
c0024407:	c3                   	ret    

c0024408 <SATABus::close(int, int, void*)>:
c0024408:	31 c0                	xor    eax,eax
c002440a:	c3                   	ret    
c002440b:	90                   	nop

c002440c <SATABus::detect()>:
c002440c:	c3                   	ret    
c002440d:	90                   	nop

c002440e <SATABus::SATABus()>:
c002440e:	83 ec 0c             	sub    esp,0xc
c0024411:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024415:	83 ec 08             	sub    esp,0x8
c0024418:	68 2c d7 02 c0       	push   0xc002d72c
c002441d:	50                   	push   eax
c002441e:	e8 e1 01 ff ff       	call   c0014604 <HardDiskController::HardDiskController(char const*)>
c0024423:	83 c4 10             	add    esp,0x10
c0024426:	ba e8 d7 02 c0       	mov    edx,0xc002d7e8
c002442b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002442f:	89 10                	mov    DWORD PTR [eax],edx
c0024431:	83 ec 0c             	sub    esp,0xc
c0024434:	6a 50                	push   0x50
c0024436:	e8 be bb fe ff       	call   c000fff9 <Phys::allocateContiguousPages(int)>
c002443b:	83 c4 10             	add    esp,0x10
c002443e:	89 c2                	mov    edx,eax
c0024440:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024444:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c002444a:	83 ec 0c             	sub    esp,0xc
c002444d:	6a 50                	push   0x50
c002444f:	e8 ed d5 fe ff       	call   c0011a41 <Virt::allocateKernelVirtualPages(int)>
c0024454:	83 c4 10             	add    esp,0x10
c0024457:	89 c2                	mov    edx,eax
c0024459:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002445d:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0024463:	a1 d0 ef 02 c0       	mov    eax,ds:0xc002efd0
c0024468:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c002446c:	8b 8a 58 01 00 00    	mov    ecx,DWORD PTR [edx+0x158]
c0024472:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0024476:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c002447c:	83 ec 0c             	sub    esp,0xc
c002447f:	6a 03                	push   0x3
c0024481:	6a 50                	push   0x50
c0024483:	51                   	push   ecx
c0024484:	52                   	push   edx
c0024485:	50                   	push   eax
c0024486:	e8 e3 e0 fe ff       	call   c001256e <VAS::mapRange(unsigned long, unsigned long, int, int)>
c002448b:	83 c4 20             	add    esp,0x20
c002448e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024492:	8b 90 58 01 00 00    	mov    edx,DWORD PTR [eax+0x158]
c0024498:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002449c:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c00244a2:	83 ec 04             	sub    esp,0x4
c00244a5:	52                   	push   edx
c00244a6:	50                   	push   eax
c00244a7:	68 50 d7 02 c0       	push   0xc002d750
c00244ac:	e8 96 e9 fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00244b1:	83 c4 10             	add    esp,0x10
c00244b4:	90                   	nop
c00244b5:	83 c4 0c             	add    esp,0xc
c00244b8:	c3                   	ret    
c00244b9:	90                   	nop

c00244ba <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>:
c00244ba:	83 ec 0c             	sub    esp,0xc
c00244bd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00244c1:	8b 50 34             	mov    edx,DWORD PTR [eax+0x34]
c00244c4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
c00244c7:	09 c2                	or     edx,eax
c00244c9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00244cd:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00244d3:	8b 08                	mov    ecx,DWORD PTR [eax]
c00244d5:	31 c0                	xor    eax,eax
c00244d7:	c1 e9 08             	shr    ecx,0x8
c00244da:	83 e1 0f             	and    ecx,0xf
c00244dd:	39 c8                	cmp    eax,ecx
c00244df:	74 0a                	je     c00244eb <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x31>
c00244e1:	f6 c2 01             	test   dl,0x1
c00244e4:	74 18                	je     c00244fe <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x44>
c00244e6:	d1 ea                	shr    edx,1
c00244e8:	40                   	inc    eax
c00244e9:	eb f2                	jmp    c00244dd <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)+0x23>
c00244eb:	83 ec 0c             	sub    esp,0xc
c00244ee:	68 74 d7 02 c0       	push   0xc002d774
c00244f3:	e8 09 63 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c00244f8:	83 c4 10             	add    esp,0x10
c00244fb:	83 c8 ff             	or     eax,0xffffffff
c00244fe:	83 c4 0c             	add    esp,0xc
c0024501:	c3                   	ret    

c0024502 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>:
c0024502:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0024506:	8b 41 28             	mov    eax,DWORD PTR [ecx+0x28]
c0024509:	89 c2                	mov    edx,eax
c002450b:	c1 ea 08             	shr    edx,0x8
c002450e:	83 e2 0f             	and    edx,0xf
c0024511:	fe ca                	dec    dl
c0024513:	75 31                	jne    c0024546 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c0024515:	83 e0 0f             	and    eax,0xf
c0024518:	3c 03                	cmp    al,0x3
c002451a:	75 2a                	jne    c0024546 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x44>
c002451c:	8b 51 24             	mov    edx,DWORD PTR [ecx+0x24]
c002451f:	b8 02 00 00 00       	mov    eax,0x2
c0024524:	81 fa 01 01 3c c3    	cmp    edx,0xc33c0101
c002452a:	74 1c                	je     c0024548 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c002452c:	b8 04 00 00 00       	mov    eax,0x4
c0024531:	81 fa 01 01 14 eb    	cmp    edx,0xeb140101
c0024537:	74 0f                	je     c0024548 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)+0x46>
c0024539:	31 c0                	xor    eax,eax
c002453b:	83 fa 03             	cmp    edx,0x3
c002453e:	0f 94 c0             	sete   al
c0024541:	8d 44 00 01          	lea    eax,[eax+eax*1+0x1]
c0024545:	c3                   	ret    
c0024546:	31 c0                	xor    eax,eax
c0024548:	c3                   	ret    
c0024549:	90                   	nop

c002454a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>:
c002454a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002454e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024551:	0f ba e2 0f          	bt     edx,0xf
c0024555:	72 f7                	jb     c002454e <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)+0x4>
c0024557:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002455a:	83 ca 10             	or     edx,0x10
c002455d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024560:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024563:	83 ca 01             	or     edx,0x1
c0024566:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024569:	c3                   	ret    

c002456a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>:
c002456a:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c002456e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024571:	83 e2 fe             	and    edx,0xfffffffe
c0024574:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024577:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002457a:	83 e2 ef             	and    edx,0xffffffef
c002457d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
c0024580:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c0024583:	0f ba e2 0e          	bt     edx,0xe
c0024587:	72 f7                	jb     c0024580 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024589:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
c002458c:	0f ba e2 0f          	bt     edx,0xf
c0024590:	72 ee                	jb     c0024580 <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)+0x16>
c0024592:	c3                   	ret    
c0024593:	90                   	nop

c0024594 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>:
c0024594:	55                   	push   ebp
c0024595:	57                   	push   edi
c0024596:	56                   	push   esi
c0024597:	53                   	push   ebx
c0024598:	83 ec 1c             	sub    esp,0x1c
c002459b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c002459f:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00245a3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00245a7:	53                   	push   ebx
c00245a8:	89 fd                	mov    ebp,edi
c00245aa:	56                   	push   esi
c00245ab:	c1 e5 0a             	shl    ebp,0xa
c00245ae:	e8 b7 ff ff ff       	call   c002456a <SATABus::stopCmd(SATABus::tagHBA_PORT volatile*)>
c00245b3:	83 ec 0c             	sub    esp,0xc
c00245b6:	8b 86 58 01 00 00    	mov    eax,DWORD PTR [esi+0x158]
c00245bc:	01 e8                	add    eax,ebp
c00245be:	89 03                	mov    DWORD PTR [ebx],eax
c00245c0:	8b 03                	mov    eax,DWORD PTR [ebx]
c00245c2:	68 00 04 00 00       	push   0x400
c00245c7:	6a 00                	push   0x0
c00245c9:	50                   	push   eax
c00245ca:	e8 9d c1 fd ff       	call   c000076c <memset>
c00245cf:	8b 86 5c 01 00 00    	mov    eax,DWORD PTR [esi+0x15c]
c00245d5:	89 fa                	mov    edx,edi
c00245d7:	01 e8                	add    eax,ebp
c00245d9:	c1 e7 0d             	shl    edi,0xd
c00245dc:	89 03                	mov    DWORD PTR [ebx],eax
c00245de:	c1 e2 08             	shl    edx,0x8
c00245e1:	c7 43 04 00 00 00 00 	mov    DWORD PTR [ebx+0x4],0x0
c00245e8:	81 c2 00 80 00 00    	add    edx,0x8000
c00245ee:	89 54 24 2c          	mov    DWORD PTR [esp+0x2c],edx
c00245f2:	89 d0                	mov    eax,edx
c00245f4:	83 c4 1c             	add    esp,0x1c
c00245f7:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c00245fd:	89 43 08             	mov    DWORD PTR [ebx+0x8],eax
c0024600:	8b 43 08             	mov    eax,DWORD PTR [ebx+0x8]
c0024603:	68 00 01 00 00       	push   0x100
c0024608:	6a 00                	push   0x0
c002460a:	50                   	push   eax
c002460b:	e8 5c c1 fd ff       	call   c000076c <memset>
c0024610:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024614:	8d 87 00 a0 00 00    	lea    eax,[edi+0xa000]
c002461a:	03 96 5c 01 00 00    	add    edx,DWORD PTR [esi+0x15c]
c0024620:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0024624:	89 53 08             	mov    DWORD PTR [ebx+0x8],edx
c0024627:	83 c4 10             	add    esp,0x10
c002462a:	c7 43 0c 00 00 00 00 	mov    DWORD PTR [ebx+0xc],0x0
c0024631:	31 ff                	xor    edi,edi
c0024633:	03 ae 58 01 00 00    	add    ebp,DWORD PTR [esi+0x158]
c0024639:	66 c7 45 02 08 00    	mov    WORD PTR [ebp+0x2],0x8
c002463f:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024643:	03 86 58 01 00 00    	add    eax,DWORD PTR [esi+0x158]
c0024649:	83 c5 20             	add    ebp,0x20
c002464c:	01 f8                	add    eax,edi
c002464e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0024651:	52                   	push   edx
c0024652:	68 00 01 00 00       	push   0x100
c0024657:	6a 00                	push   0x0
c0024659:	50                   	push   eax
c002465a:	e8 0d c1 fd ff       	call   c000076c <memset>
c002465f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0024663:	83 c4 10             	add    esp,0x10
c0024666:	03 86 5c 01 00 00    	add    eax,DWORD PTR [esi+0x15c]
c002466c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0024673:	01 f8                	add    eax,edi
c0024675:	81 c7 00 01 00 00    	add    edi,0x100
c002467b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c002467e:	81 ff 00 20 00 00    	cmp    edi,0x2000
c0024684:	75 b3                	jne    c0024639 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)+0xa5>
c0024686:	89 5c 24 34          	mov    DWORD PTR [esp+0x34],ebx
c002468a:	89 74 24 30          	mov    DWORD PTR [esp+0x30],esi
c002468e:	83 c4 1c             	add    esp,0x1c
c0024691:	5b                   	pop    ebx
c0024692:	5e                   	pop    esi
c0024693:	5f                   	pop    edi
c0024694:	5d                   	pop    ebp
c0024695:	e9 b0 fe ff ff       	jmp    c002454a <SATABus::startCmd(SATABus::tagHBA_PORT volatile*)>

c002469a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>:
c002469a:	55                   	push   ebp
c002469b:	57                   	push   edi
c002469c:	56                   	push   esi
c002469d:	53                   	push   ebx
c002469e:	31 db                	xor    ebx,ebx
c00246a0:	83 ec 0c             	sub    esp,0xc
c00246a3:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00246a7:	8b 74 24 20          	mov    esi,DWORD PTR [esp+0x20]
c00246ab:	8b 78 0c             	mov    edi,DWORD PTR [eax+0xc]
c00246ae:	f7 c7 01 00 00 00    	test   edi,0x1
c00246b4:	0f 84 aa 00 00 00    	je     c0024764 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c00246ba:	8b 54 24 24          	mov    edx,DWORD PTR [esp+0x24]
c00246be:	89 d8                	mov    eax,ebx
c00246c0:	c1 e0 07             	shl    eax,0x7
c00246c3:	8d ac 02 00 01 00 00 	lea    ebp,[edx+eax*1+0x100]
c00246ca:	55                   	push   ebp
c00246cb:	56                   	push   esi
c00246cc:	e8 31 fe ff ff       	call   c0024502 <SATABus::checkType(SATABus::tagHBA_PORT volatile*)>
c00246d1:	5a                   	pop    edx
c00246d2:	83 f8 01             	cmp    eax,0x1
c00246d5:	59                   	pop    ecx
c00246d6:	75 30                	jne    c0024708 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x6e>
c00246d8:	50                   	push   eax
c00246d9:	50                   	push   eax
c00246da:	53                   	push   ebx
c00246db:	68 99 d7 02 c0       	push   0xc002d799
c00246e0:	e8 62 e7 fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00246e5:	83 c4 0c             	add    esp,0xc
c00246e8:	53                   	push   ebx
c00246e9:	55                   	push   ebp
c00246ea:	56                   	push   esi
c00246eb:	e8 a4 fe ff ff       	call   c0024594 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c00246f0:	c7 04 24 7c 01 00 00 	mov    DWORD PTR [esp],0x17c
c00246f7:	e8 ac b1 fe ff       	call   c000f8a8 <malloc>
c00246fc:	89 c5                	mov    ebp,eax
c00246fe:	89 04 24             	mov    DWORD PTR [esp],eax
c0024701:	e8 5c 0d 00 00       	call   c0025462 <SATA::SATA()>
c0024706:	eb 33                	jmp    c002473b <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xa1>
c0024708:	83 f8 04             	cmp    eax,0x4
c002470b:	75 47                	jne    c0024754 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xba>
c002470d:	50                   	push   eax
c002470e:	50                   	push   eax
c002470f:	53                   	push   ebx
c0024710:	68 b0 d7 02 c0       	push   0xc002d7b0
c0024715:	e8 2d e7 fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c002471a:	83 c4 0c             	add    esp,0xc
c002471d:	53                   	push   ebx
c002471e:	55                   	push   ebp
c002471f:	56                   	push   esi
c0024720:	e8 6f fe ff ff       	call   c0024594 <SATABus::portRebase(SATABus::tagHBA_PORT volatile*, int)>
c0024725:	c7 04 24 80 01 00 00 	mov    DWORD PTR [esp],0x180
c002472c:	e8 77 b1 fe ff       	call   c000f8a8 <malloc>
c0024731:	89 c5                	mov    ebp,eax
c0024733:	89 04 24             	mov    DWORD PTR [esp],eax
c0024736:	e8 d3 10 00 00       	call   c002580e <SATAPI::SATAPI()>
c002473b:	5a                   	pop    edx
c002473c:	59                   	pop    ecx
c002473d:	55                   	push   ebp
c002473e:	56                   	push   esi
c002473f:	e8 26 fb fe ff       	call   c001426a <Device::addChild(Device*)>
c0024744:	8b 45 00             	mov    eax,DWORD PTR [ebp+0x0]
c0024747:	56                   	push   esi
c0024748:	6a 00                	push   0x0
c002474a:	53                   	push   ebx
c002474b:	55                   	push   ebp
c002474c:	ff 50 08             	call   DWORD PTR [eax+0x8]
c002474f:	83 c4 20             	add    esp,0x20
c0024752:	eb 10                	jmp    c0024764 <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0xca>
c0024754:	50                   	push   eax
c0024755:	50                   	push   eax
c0024756:	53                   	push   ebx
c0024757:	68 c9 d7 02 c0       	push   0xc002d7c9
c002475c:	e8 e6 e6 fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0024761:	83 c4 10             	add    esp,0x10
c0024764:	d1 ef                	shr    edi,1
c0024766:	43                   	inc    ebx
c0024767:	83 fb 20             	cmp    ebx,0x20
c002476a:	0f 85 3e ff ff ff    	jne    c00246ae <SATABus::probePort(SATABus::tagHBA_MEM volatile*)+0x14>
c0024770:	83 c4 0c             	add    esp,0xc
c0024773:	5b                   	pop    ebx
c0024774:	5e                   	pop    esi
c0024775:	5f                   	pop    edi
c0024776:	5d                   	pop    ebp
c0024777:	c3                   	ret    

c0024778 <SATABus::open(int, int, void*)>:
c0024778:	83 ec 14             	sub    esp,0x14
c002477b:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c002477f:	8b 90 34 01 00 00    	mov    edx,DWORD PTR [eax+0x134]
c0024785:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c002478b:	52                   	push   edx
c002478c:	50                   	push   eax
c002478d:	e8 08 ff ff ff       	call   c002469a <SATABus::probePort(SATABus::tagHBA_MEM volatile*)>
c0024792:	31 c0                	xor    eax,eax
c0024794:	83 c4 1c             	add    esp,0x1c
c0024797:	c3                   	ret    

c0024798 <ATA::close(int, int, void*)>:
c0024798:	83 ec 0c             	sub    esp,0xc
c002479b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002479f:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00247a5:	85 c0                	test   eax,eax
c00247a7:	74 0c                	je     c00247b5 <ATA::close(int, int, void*)+0x1d>
c00247a9:	83 ec 0c             	sub    esp,0xc
c00247ac:	8b 10                	mov    edx,DWORD PTR [eax]
c00247ae:	50                   	push   eax
c00247af:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00247b2:	83 c4 10             	add    esp,0x10
c00247b5:	31 c0                	xor    eax,eax
c00247b7:	83 c4 0c             	add    esp,0xc
c00247ba:	c3                   	ret    
c00247bb:	90                   	nop

c00247bc <ATA::powerSaving(PowerSavingLevel)>:
c00247bc:	c3                   	ret    
c00247bd:	90                   	nop

c00247be <ATA::ATA()>:
c00247be:	83 ec 0c             	sub    esp,0xc
c00247c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247c5:	83 ec 04             	sub    esp,0x4
c00247c8:	68 00 02 00 00       	push   0x200
c00247cd:	68 b1 d8 02 c0       	push   0xc002d8b1
c00247d2:	50                   	push   eax
c00247d3:	e8 c4 fe fe ff       	call   c001469c <PhysicalDisk::PhysicalDisk(char const*, int)>
c00247d8:	83 c4 10             	add    esp,0x10
c00247db:	ba 34 d8 02 c0       	mov    edx,0xc002d834
c00247e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00247e4:	89 10                	mov    DWORD PTR [eax],edx
c00247e6:	90                   	nop
c00247e7:	83 c4 0c             	add    esp,0xc
c00247ea:	c3                   	ret    
c00247eb:	90                   	nop

c00247ec <ATA::flush(bool)>:
c00247ec:	53                   	push   ebx
c00247ed:	83 ec 08             	sub    esp,0x8
c00247f0:	80 7c 24 14 01       	cmp    BYTE PTR [esp+0x14],0x1
c00247f5:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00247f9:	19 c0                	sbb    eax,eax
c00247fb:	83 e0 fd             	and    eax,0xfffffffd
c00247fe:	05 ea 00 00 00       	add    eax,0xea
c0024803:	50                   	push   eax
c0024804:	6a 07                	push   0x7
c0024806:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002480d:	50                   	push   eax
c002480e:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024814:	e8 dd ef ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024819:	83 c4 0c             	add    esp,0xc
c002481c:	6a 00                	push   0x0
c002481e:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024825:	50                   	push   eax
c0024826:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c002482c:	e8 71 fb ff ff       	call   c00243a2 <IDE::polling(unsigned char, unsigned int)>
c0024831:	83 c4 18             	add    esp,0x18
c0024834:	5b                   	pop    ebx
c0024835:	c3                   	ret    

c0024836 <ATA::readyForCommand()>:
c0024836:	56                   	push   esi
c0024837:	53                   	push   ebx
c0024838:	31 db                	xor    ebx,ebx
c002483a:	50                   	push   eax
c002483b:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c002483f:	50                   	push   eax
c0024840:	6a 0c                	push   0xc
c0024842:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024849:	50                   	push   eax
c002484a:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024850:	e8 61 f0 ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c0024855:	83 c4 10             	add    esp,0x10
c0024858:	a8 88                	test   al,0x88
c002485a:	74 23                	je     c002487f <ATA::readyForCommand()+0x49>
c002485c:	43                   	inc    ebx
c002485d:	83 fb 63             	cmp    ebx,0x63
c0024860:	7e dd                	jle    c002483f <ATA::readyForCommand()+0x9>
c0024862:	51                   	push   ecx
c0024863:	51                   	push   ecx
c0024864:	6a 00                	push   0x0
c0024866:	68 40 42 0f 00       	push   0xf4240
c002486b:	e8 23 9f ff ff       	call   c001e793 <nanoSleep(unsigned long long)>
c0024870:	83 c4 10             	add    esp,0x10
c0024873:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024879:	75 c4                	jne    c002483f <ATA::readyForCommand()+0x9>
c002487b:	31 c0                	xor    eax,eax
c002487d:	eb 02                	jmp    c0024881 <ATA::readyForCommand()+0x4b>
c002487f:	b0 01                	mov    al,0x1
c0024881:	5a                   	pop    edx
c0024882:	5b                   	pop    ebx
c0024883:	5e                   	pop    esi
c0024884:	c3                   	ret    
c0024885:	90                   	nop

c0024886 <ATA::access(unsigned long long, int, void*, bool)>:
c0024886:	55                   	push   ebp
c0024887:	57                   	push   edi
c0024888:	56                   	push   esi
c0024889:	53                   	push   ebx
c002488a:	83 ec 2c             	sub    esp,0x2c
c002488d:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c0024891:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c0024895:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024899:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c002489d:	8b 7c 24 48          	mov    edi,DWORD PTR [esp+0x48]
c00248a1:	8a 44 24 04          	mov    al,BYTE PTR [esp+0x4]
c00248a5:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c00248a9:	8b 83 6c 01 00 00    	mov    eax,DWORD PTR [ebx+0x16c]
c00248af:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00248b3:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c00248b9:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c00248bd:	c1 e0 06             	shl    eax,0x6
c00248c0:	80 bc 01 a9 01 00 00 00 	cmp    BYTE PTR [ecx+eax*1+0x1a9],0x0
c00248c8:	74 5d                	je     c0024927 <ATA::access(unsigned long long, int, void*, bool)+0xa1>
c00248ca:	89 fa                	mov    edx,edi
c00248cc:	89 f0                	mov    eax,esi
c00248ce:	0f ac d0 1c          	shrd   eax,edx,0x1c
c00248d2:	c1 ea 1c             	shr    edx,0x1c
c00248d5:	89 d1                	mov    ecx,edx
c00248d7:	09 c1                	or     ecx,eax
c00248d9:	74 25                	je     c0024900 <ATA::access(unsigned long long, int, void*, bool)+0x7a>
c00248db:	31 ed                	xor    ebp,ebp
c00248dd:	8d 0c ed 00 00 00 00 	lea    ecx,[ebp*8+0x0]
c00248e4:	89 fa                	mov    edx,edi
c00248e6:	89 f0                	mov    eax,esi
c00248e8:	0f ad d0             	shrd   eax,edx,cl
c00248eb:	d3 ea                	shr    edx,cl
c00248ed:	f6 c1 20             	test   cl,0x20
c00248f0:	74 02                	je     c00248f4 <ATA::access(unsigned long long, int, void*, bool)+0x6e>
c00248f2:	89 d0                	mov    eax,edx
c00248f4:	88 44 2c 1a          	mov    BYTE PTR [esp+ebp*1+0x1a],al
c00248f8:	45                   	inc    ebp
c00248f9:	83 fd 06             	cmp    ebp,0x6
c00248fc:	75 df                	jne    c00248dd <ATA::access(unsigned long long, int, void*, bool)+0x57>
c00248fe:	eb 76                	jmp    c0024976 <ATA::access(unsigned long long, int, void*, bool)+0xf0>
c0024900:	89 f0                	mov    eax,esi
c0024902:	66 89 74 24 1a       	mov    WORD PTR [esp+0x1a],si
c0024907:	89 fa                	mov    edx,edi
c0024909:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024910:	0f ac d0 10          	shrd   eax,edx,0x10
c0024914:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c0024919:	88 44 24 1c          	mov    BYTE PTR [esp+0x1c],al
c002491d:	c1 ee 18             	shr    esi,0x18
c0024920:	c6 44 24 0e 01       	mov    BYTE PTR [esp+0xe],0x1
c0024925:	eb 56                	jmp    c002497d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024927:	6a 00                	push   0x0
c0024929:	6a 3f                	push   0x3f
c002492b:	57                   	push   edi
c002492c:	56                   	push   esi
c002492d:	e8 92 29 00 00       	call   c00272c4 <__umoddi3>
c0024932:	83 c4 10             	add    esp,0x10
c0024935:	40                   	inc    eax
c0024936:	88 44 24 1a          	mov    BYTE PTR [esp+0x1a],al
c002493a:	6a 00                	push   0x0
c002493c:	68 f0 03 00 00       	push   0x3f0
c0024941:	57                   	push   edi
c0024942:	56                   	push   esi
c0024943:	e8 7c 28 00 00       	call   c00271c4 <__udivdi3>
c0024948:	83 c4 10             	add    esp,0x10
c002494b:	66 89 44 24 1b       	mov    WORD PTR [esp+0x1b],ax
c0024950:	66 c7 44 24 1d 00 00 	mov    WORD PTR [esp+0x1d],0x0
c0024957:	c6 44 24 1f 00       	mov    BYTE PTR [esp+0x1f],0x0
c002495c:	6a 00                	push   0x0
c002495e:	6a 3f                	push   0x3f
c0024960:	57                   	push   edi
c0024961:	56                   	push   esi
c0024962:	e8 5d 28 00 00       	call   c00271c4 <__udivdi3>
c0024967:	83 c4 10             	add    esp,0x10
c002496a:	89 c6                	mov    esi,eax
c002496c:	c6 44 24 0e 00       	mov    BYTE PTR [esp+0xe],0x0
c0024971:	83 e6 0f             	and    esi,0xf
c0024974:	eb 07                	jmp    c002497d <ATA::access(unsigned long long, int, void*, bool)+0xf7>
c0024976:	31 f6                	xor    esi,esi
c0024978:	c6 44 24 0e 02       	mov    BYTE PTR [esp+0xe],0x2
c002497d:	bf 01 00 00 00       	mov    edi,0x1
c0024982:	50                   	push   eax
c0024983:	6a 00                	push   0x0
c0024985:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c002498c:	50                   	push   eax
c002498d:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c0024991:	e8 6c f0 ff ff       	call   c0023a02 <IDE::enableIRQs(unsigned char, bool)>
c0024996:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024999:	e8 98 fe ff ff       	call   c0024836 <ATA::readyForCommand()>
c002499e:	83 c4 10             	add    esp,0x10
c00249a1:	84 c0                	test   al,al
c00249a3:	0f 84 5a 02 00 00    	je     c0024c03 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c00249a9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00249af:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00249b5:	c1 e0 04             	shl    eax,0x4
c00249b8:	0f b6 8b 70 01 00 00 	movzx  ecx,BYTE PTR [ebx+0x170]
c00249bf:	09 c6                	or     esi,eax
c00249c1:	80 7c 24 0e 00       	cmp    BYTE PTR [esp+0xe],0x0
c00249c6:	75 05                	jne    c00249cd <ATA::access(unsigned long long, int, void*, bool)+0x147>
c00249c8:	83 ce a0             	or     esi,0xffffffa0
c00249cb:	eb 03                	jmp    c00249d0 <ATA::access(unsigned long long, int, void*, bool)+0x14a>
c00249cd:	83 ce e0             	or     esi,0xffffffe0
c00249d0:	89 f0                	mov    eax,esi
c00249d2:	0f b6 f0             	movzx  esi,al
c00249d5:	56                   	push   esi
c00249d6:	6a 06                	push   0x6
c00249d8:	51                   	push   ecx
c00249d9:	52                   	push   edx
c00249da:	e8 17 ee ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249df:	83 c4 10             	add    esp,0x10
c00249e2:	6a 00                	push   0x0
c00249e4:	6a 01                	push   0x1
c00249e6:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00249ed:	50                   	push   eax
c00249ee:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00249f4:	e8 fd ed ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00249f9:	83 c4 10             	add    esp,0x10
c00249fc:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024a01:	75 6e                	jne    c0024a71 <ATA::access(unsigned long long, int, void*, bool)+0x1eb>
c0024a03:	6a 00                	push   0x0
c0024a05:	6a 08                	push   0x8
c0024a07:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a0e:	50                   	push   eax
c0024a0f:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a15:	e8 dc ed ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a1a:	0f b6 44 24 2d       	movzx  eax,BYTE PTR [esp+0x2d]
c0024a1f:	50                   	push   eax
c0024a20:	6a 09                	push   0x9
c0024a22:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a29:	50                   	push   eax
c0024a2a:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a30:	e8 c1 ed ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a35:	83 c4 20             	add    esp,0x20
c0024a38:	0f b6 44 24 1e       	movzx  eax,BYTE PTR [esp+0x1e]
c0024a3d:	50                   	push   eax
c0024a3e:	6a 0a                	push   0xa
c0024a40:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a47:	50                   	push   eax
c0024a48:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a4e:	e8 a3 ed ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a53:	0f b6 44 24 2f       	movzx  eax,BYTE PTR [esp+0x2f]
c0024a58:	50                   	push   eax
c0024a59:	6a 0b                	push   0xb
c0024a5b:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a62:	50                   	push   eax
c0024a63:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a69:	e8 88 ed ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a6e:	83 c4 20             	add    esp,0x20
c0024a71:	0f b6 44 24 4c       	movzx  eax,BYTE PTR [esp+0x4c]
c0024a76:	50                   	push   eax
c0024a77:	6a 02                	push   0x2
c0024a79:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a80:	50                   	push   eax
c0024a81:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024a87:	e8 6a ed ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024a8c:	0f b6 44 24 2a       	movzx  eax,BYTE PTR [esp+0x2a]
c0024a91:	50                   	push   eax
c0024a92:	6a 03                	push   0x3
c0024a94:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024a9b:	50                   	push   eax
c0024a9c:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024aa2:	e8 4f ed ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024aa7:	83 c4 20             	add    esp,0x20
c0024aaa:	0f b6 44 24 1b       	movzx  eax,BYTE PTR [esp+0x1b]
c0024aaf:	50                   	push   eax
c0024ab0:	6a 04                	push   0x4
c0024ab2:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ab9:	50                   	push   eax
c0024aba:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024ac0:	e8 31 ed ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ac5:	0f b6 44 24 2c       	movzx  eax,BYTE PTR [esp+0x2c]
c0024aca:	50                   	push   eax
c0024acb:	6a 05                	push   0x5
c0024acd:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024ad4:	50                   	push   eax
c0024ad5:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024adb:	e8 16 ed ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024ae0:	83 c4 20             	add    esp,0x20
c0024ae3:	80 7c 24 0e 02       	cmp    BYTE PTR [esp+0xe],0x2
c0024ae8:	0f 94 c0             	sete   al
c0024aeb:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024af0:	74 09                	je     c0024afb <ATA::access(unsigned long long, int, void*, bool)+0x275>
c0024af2:	8d 04 85 30 00 00 00 	lea    eax,[eax*4+0x30]
c0024af9:	eb 07                	jmp    c0024b02 <ATA::access(unsigned long long, int, void*, bool)+0x27c>
c0024afb:	8d 04 85 20 00 00 00 	lea    eax,[eax*4+0x20]
c0024b02:	0f b6 c0             	movzx  eax,al
c0024b05:	50                   	push   eax
c0024b06:	6a 07                	push   0x7
c0024b08:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b0f:	50                   	push   eax
c0024b10:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b16:	e8 db ec ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024b1b:	8b 74 24 5c          	mov    esi,DWORD PTR [esp+0x5c]
c0024b1f:	83 c4 10             	add    esp,0x10
c0024b22:	85 f6                	test   esi,esi
c0024b24:	0f 84 ba 00 00 00    	je     c0024be4 <ATA::access(unsigned long long, int, void*, bool)+0x35e>
c0024b2a:	50                   	push   eax
c0024b2b:	6a 01                	push   0x1
c0024b2d:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b34:	50                   	push   eax
c0024b35:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b3b:	e8 62 f8 ff ff       	call   c00243a2 <IDE::polling(unsigned char, unsigned int)>
c0024b40:	83 c4 10             	add    esp,0x10
c0024b43:	8b 93 70 01 00 00    	mov    edx,DWORD PTR [ebx+0x170]
c0024b49:	84 c0                	test   al,al
c0024b4b:	74 2c                	je     c0024b79 <ATA::access(unsigned long long, int, void*, bool)+0x2f3>
c0024b4d:	0f b6 f8             	movzx  edi,al
c0024b50:	0f b6 d2             	movzx  edx,dl
c0024b53:	57                   	push   edi
c0024b54:	0f b6 83 74 01 00 00 	movzx  eax,BYTE PTR [ebx+0x174]
c0024b5b:	50                   	push   eax
c0024b5c:	52                   	push   edx
c0024b5d:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b63:	e8 a4 f6 ff ff       	call   c002420c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024b68:	c7 04 24 0c d8 02 c0 	mov    DWORD PTR [esp],0xc002d80c
c0024b6f:	e8 d3 e2 fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0024b74:	e9 87 00 00 00       	jmp    c0024c00 <ATA::access(unsigned long long, int, void*, bool)+0x37a>
c0024b79:	80 7c 24 0f 00       	cmp    BYTE PTR [esp+0xf],0x0
c0024b7e:	74 33                	je     c0024bb3 <ATA::access(unsigned long long, int, void*, bool)+0x32d>
c0024b80:	31 ed                	xor    ebp,ebp
c0024b82:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0024b86:	66 8b 3c 68          	mov    di,WORD PTR [eax+ebp*2]
c0024b8a:	50                   	push   eax
c0024b8b:	50                   	push   eax
c0024b8c:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024b93:	50                   	push   eax
c0024b94:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024b9a:	e8 45 ec ff ff       	call   c00237e4 <IDE::getBase(unsigned char)>
c0024b9f:	89 c2                	mov    edx,eax
c0024ba1:	89 f8                	mov    eax,edi
c0024ba3:	66 ef                	out    dx,ax
c0024ba5:	45                   	inc    ebp
c0024ba6:	83 c4 10             	add    esp,0x10
c0024ba9:	81 fd 00 01 00 00    	cmp    ebp,0x100
c0024baf:	75 d1                	jne    c0024b82 <ATA::access(unsigned long long, int, void*, bool)+0x2fc>
c0024bb1:	eb 23                	jmp    c0024bd6 <ATA::access(unsigned long long, int, void*, bool)+0x350>
c0024bb3:	0f b6 d2             	movzx  edx,dl
c0024bb6:	51                   	push   ecx
c0024bb7:	51                   	push   ecx
c0024bb8:	52                   	push   edx
c0024bb9:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024bbf:	e8 20 ec ff ff       	call   c00237e4 <IDE::getBase(unsigned char)>
c0024bc4:	b9 00 01 00 00       	mov    ecx,0x100
c0024bc9:	89 c2                	mov    edx,eax
c0024bcb:	8b 7c 24 60          	mov    edi,DWORD PTR [esp+0x60]
c0024bcf:	fc                   	cld    
c0024bd0:	66 f3 6d             	rep ins WORD PTR es:[edi],dx
c0024bd3:	83 c4 10             	add    esp,0x10
c0024bd6:	81 44 24 50 00 02 00 00 	add    DWORD PTR [esp+0x50],0x200
c0024bde:	4e                   	dec    esi
c0024bdf:	e9 3e ff ff ff       	jmp    c0024b22 <ATA::access(unsigned long long, int, void*, bool)+0x29c>
c0024be4:	31 ff                	xor    edi,edi
c0024be6:	80 7c 24 04 00       	cmp    BYTE PTR [esp+0x4],0x0
c0024beb:	74 16                	je     c0024c03 <ATA::access(unsigned long long, int, void*, bool)+0x37d>
c0024bed:	50                   	push   eax
c0024bee:	50                   	push   eax
c0024bef:	31 c0                	xor    eax,eax
c0024bf1:	80 7c 24 16 02       	cmp    BYTE PTR [esp+0x16],0x2
c0024bf6:	0f 94 c0             	sete   al
c0024bf9:	50                   	push   eax
c0024bfa:	53                   	push   ebx
c0024bfb:	e8 ec fb ff ff       	call   c00247ec <ATA::flush(bool)>
c0024c00:	83 c4 10             	add    esp,0x10
c0024c03:	83 c4 2c             	add    esp,0x2c
c0024c06:	89 f8                	mov    eax,edi
c0024c08:	5b                   	pop    ebx
c0024c09:	5e                   	pop    esi
c0024c0a:	5f                   	pop    edi
c0024c0b:	5d                   	pop    ebp
c0024c0c:	c3                   	ret    
c0024c0d:	90                   	nop

c0024c0e <ATA::read(unsigned long long, int, void*)>:
c0024c0e:	57                   	push   edi
c0024c0f:	b8 04 00 00 00       	mov    eax,0x4
c0024c14:	56                   	push   esi
c0024c15:	53                   	push   ebx
c0024c16:	83 ec 10             	sub    esp,0x10
c0024c19:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024c1d:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024c21:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024c24:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024c28:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024c2c:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024c32:	77 3b                	ja     c0024c6f <ATA::read(unsigned long long, int, void*)+0x61>
c0024c34:	b8 06 00 00 00       	mov    eax,0x6
c0024c39:	85 d2                	test   edx,edx
c0024c3b:	74 32                	je     c0024c6f <ATA::read(unsigned long long, int, void*)+0x61>
c0024c3d:	50                   	push   eax
c0024c3e:	50                   	push   eax
c0024c3f:	6a 00                	push   0x0
c0024c41:	52                   	push   edx
c0024c42:	53                   	push   ebx
c0024c43:	57                   	push   edi
c0024c44:	56                   	push   esi
c0024c45:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024c49:	e8 38 fc ff ff       	call   c0024886 <ATA::access(unsigned long long, int, void*, bool)>
c0024c4e:	83 c4 20             	add    esp,0x20
c0024c51:	85 c0                	test   eax,eax
c0024c53:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024c57:	75 11                	jne    c0024c6a <ATA::read(unsigned long long, int, void*)+0x5c>
c0024c59:	01 1d a8 31 03 c0    	add    DWORD PTR ds:0xc00331a8,ebx
c0024c5f:	e8 e8 bc fe ff       	call   c001094c <VgaText::updateDiskUsage()>
c0024c64:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024c68:	eb 05                	jmp    c0024c6f <ATA::read(unsigned long long, int, void*)+0x61>
c0024c6a:	b8 01 00 00 00       	mov    eax,0x1
c0024c6f:	83 c4 10             	add    esp,0x10
c0024c72:	5b                   	pop    ebx
c0024c73:	5e                   	pop    esi
c0024c74:	5f                   	pop    edi
c0024c75:	c3                   	ret    

c0024c76 <ATA::write(unsigned long long, int, void*)>:
c0024c76:	57                   	push   edi
c0024c77:	b8 04 00 00 00       	mov    eax,0x4
c0024c7c:	56                   	push   esi
c0024c7d:	53                   	push   ebx
c0024c7e:	83 ec 10             	sub    esp,0x10
c0024c81:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0024c85:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0024c89:	8d 4b ff             	lea    ecx,[ebx-0x1]
c0024c8c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0024c90:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0024c94:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c0024c9a:	77 3b                	ja     c0024cd7 <ATA::write(unsigned long long, int, void*)+0x61>
c0024c9c:	b8 06 00 00 00       	mov    eax,0x6
c0024ca1:	85 d2                	test   edx,edx
c0024ca3:	74 32                	je     c0024cd7 <ATA::write(unsigned long long, int, void*)+0x61>
c0024ca5:	50                   	push   eax
c0024ca6:	50                   	push   eax
c0024ca7:	6a 01                	push   0x1
c0024ca9:	52                   	push   edx
c0024caa:	53                   	push   ebx
c0024cab:	57                   	push   edi
c0024cac:	56                   	push   esi
c0024cad:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0024cb1:	e8 d0 fb ff ff       	call   c0024886 <ATA::access(unsigned long long, int, void*, bool)>
c0024cb6:	83 c4 20             	add    esp,0x20
c0024cb9:	85 c0                	test   eax,eax
c0024cbb:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0024cbf:	75 11                	jne    c0024cd2 <ATA::write(unsigned long long, int, void*)+0x5c>
c0024cc1:	01 1d a4 31 03 c0    	add    DWORD PTR ds:0xc00331a4,ebx
c0024cc7:	e8 80 bc fe ff       	call   c001094c <VgaText::updateDiskUsage()>
c0024ccc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0024cd0:	eb 05                	jmp    c0024cd7 <ATA::write(unsigned long long, int, void*)+0x61>
c0024cd2:	b8 01 00 00 00       	mov    eax,0x1
c0024cd7:	83 c4 10             	add    esp,0x10
c0024cda:	5b                   	pop    ebx
c0024cdb:	5e                   	pop    esi
c0024cdc:	5f                   	pop    edi
c0024cdd:	c3                   	ret    

c0024cde <ATA::detectCHS()>:
c0024cde:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c0024ce2:	8b 82 78 01 00 00    	mov    eax,DWORD PTR [edx+0x178]
c0024ce8:	c1 e0 06             	shl    eax,0x6
c0024ceb:	03 82 6c 01 00 00    	add    eax,DWORD PTR [edx+0x16c]
c0024cf1:	c7 80 7c 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x17c],0x0
c0024cfb:	c7 44 24 04 17 d8 02 c0 	mov    DWORD PTR [esp+0x4],0xc002d817
c0024d03:	e9 f9 5a ff ff       	jmp    c001a801 <Krnl::panic(char const*)>

c0024d08 <ATA::open(int, int, void*)>:
c0024d08:	53                   	push   ebx
c0024d09:	83 ec 08             	sub    esp,0x8
c0024d0c:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0024d10:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0024d14:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0024d18:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c0024d1e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0024d24:	c1 e0 06             	shl    eax,0x6
c0024d27:	01 d0                	add    eax,edx
c0024d29:	0f b6 90 6d 01 00 00 	movzx  edx,BYTE PTR [eax+0x16d]
c0024d30:	89 93 70 01 00 00    	mov    DWORD PTR [ebx+0x170],edx
c0024d36:	0f b6 90 6e 01 00 00 	movzx  edx,BYTE PTR [eax+0x16e]
c0024d3d:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c0024d47:	89 93 74 01 00 00    	mov    DWORD PTR [ebx+0x174],edx
c0024d4d:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c0024d54:	80 b8 a9 01 00 00 00 	cmp    BYTE PTR [eax+0x1a9],0x0
c0024d5b:	75 0c                	jne    c0024d69 <ATA::open(int, int, void*)+0x61>
c0024d5d:	83 ec 0c             	sub    esp,0xc
c0024d60:	53                   	push   ebx
c0024d61:	e8 78 ff ff ff       	call   c0024cde <ATA::detectCHS()>
c0024d66:	83 c4 10             	add    esp,0x10
c0024d69:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c0024d6f:	8b 83 78 01 00 00    	mov    eax,DWORD PTR [ebx+0x178]
c0024d75:	c1 e0 06             	shl    eax,0x6
c0024d78:	8b 84 02 7c 01 00 00 	mov    eax,DWORD PTR [edx+eax*1+0x17c]
c0024d7f:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0024d89:	d1 e8                	shr    eax,1
c0024d8b:	89 83 60 01 00 00    	mov    DWORD PTR [ebx+0x160],eax
c0024d91:	6a 04                	push   0x4
c0024d93:	6a 0c                	push   0xc
c0024d95:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024d9c:	50                   	push   eax
c0024d9d:	52                   	push   edx
c0024d9e:	e8 53 ea ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024da3:	90                   	nop
c0024da4:	90                   	nop
c0024da5:	6a 00                	push   0x0
c0024da7:	6a 0c                	push   0xc
c0024da9:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c0024db0:	50                   	push   eax
c0024db1:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c0024db7:	e8 3a ea ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024dbc:	83 c4 14             	add    esp,0x14
c0024dbf:	53                   	push   ebx
c0024dc0:	e8 3f f9 fe ff       	call   c0014704 <PhysicalDisk::startCache()>
c0024dc5:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0024dc8:	e8 17 1c ff ff       	call   c00169e4 <createPartitionsForDisk(PhysicalDisk*)>
c0024dcd:	31 c0                	xor    eax,eax
c0024dcf:	83 c4 18             	add    esp,0x18
c0024dd2:	5b                   	pop    ebx
c0024dd3:	c3                   	ret    

c0024dd4 <ATAPI::write(unsigned long long, int, void*)>:
c0024dd4:	b8 03 00 00 00       	mov    eax,0x3
c0024dd9:	c3                   	ret    

c0024dda <ATAPI::close(int, int, void*)>:
c0024dda:	83 ec 0c             	sub    esp,0xc
c0024ddd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024de1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c0024de7:	85 c0                	test   eax,eax
c0024de9:	74 0c                	je     c0024df7 <ATAPI::close(int, int, void*)+0x1d>
c0024deb:	83 ec 0c             	sub    esp,0xc
c0024dee:	8b 10                	mov    edx,DWORD PTR [eax]
c0024df0:	50                   	push   eax
c0024df1:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0024df4:	83 c4 10             	add    esp,0x10
c0024df7:	31 c0                	xor    eax,eax
c0024df9:	83 c4 0c             	add    esp,0xc
c0024dfc:	c3                   	ret    
c0024dfd:	90                   	nop

c0024dfe <ATAPI::ATAPI()>:
c0024dfe:	83 ec 0c             	sub    esp,0xc
c0024e01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e05:	83 ec 04             	sub    esp,0x4
c0024e08:	68 00 08 00 00       	push   0x800
c0024e0d:	68 51 d9 02 c0       	push   0xc002d951
c0024e12:	50                   	push   eax
c0024e13:	e8 84 f8 fe ff       	call   c001469c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0024e18:	83 c4 10             	add    esp,0x10
c0024e1b:	ba 6c d8 02 c0       	mov    edx,0xc002d86c
c0024e20:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0024e24:	89 10                	mov    DWORD PTR [eax],edx
c0024e26:	90                   	nop
c0024e27:	83 c4 0c             	add    esp,0xc
c0024e2a:	c3                   	ret    
c0024e2b:	90                   	nop

c0024e2c <ATAPI::readyForCommand()>:
c0024e2c:	56                   	push   esi
c0024e2d:	53                   	push   ebx
c0024e2e:	31 db                	xor    ebx,ebx
c0024e30:	50                   	push   eax
c0024e31:	8b 74 24 10          	mov    esi,DWORD PTR [esp+0x10]
c0024e35:	50                   	push   eax
c0024e36:	6a 0c                	push   0xc
c0024e38:	0f b6 86 70 01 00 00 	movzx  eax,BYTE PTR [esi+0x170]
c0024e3f:	50                   	push   eax
c0024e40:	ff b6 6c 01 00 00    	push   DWORD PTR [esi+0x16c]
c0024e46:	e8 6b ea ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c0024e4b:	83 c4 10             	add    esp,0x10
c0024e4e:	a8 88                	test   al,0x88
c0024e50:	74 23                	je     c0024e75 <ATAPI::readyForCommand()+0x49>
c0024e52:	43                   	inc    ebx
c0024e53:	83 fb 63             	cmp    ebx,0x63
c0024e56:	7e dd                	jle    c0024e35 <ATAPI::readyForCommand()+0x9>
c0024e58:	51                   	push   ecx
c0024e59:	51                   	push   ecx
c0024e5a:	6a 00                	push   0x0
c0024e5c:	68 40 42 0f 00       	push   0xf4240
c0024e61:	e8 2d 99 ff ff       	call   c001e793 <nanoSleep(unsigned long long)>
c0024e66:	83 c4 10             	add    esp,0x10
c0024e69:	81 fb d0 07 00 00    	cmp    ebx,0x7d0
c0024e6f:	75 c4                	jne    c0024e35 <ATAPI::readyForCommand()+0x9>
c0024e71:	31 c0                	xor    eax,eax
c0024e73:	eb 02                	jmp    c0024e77 <ATAPI::readyForCommand()+0x4b>
c0024e75:	b0 01                	mov    al,0x1
c0024e77:	5a                   	pop    edx
c0024e78:	5b                   	pop    ebx
c0024e79:	5e                   	pop    esi
c0024e7a:	c3                   	ret    
c0024e7b:	90                   	nop

c0024e7c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>:
c0024e7c:	55                   	push   ebp
c0024e7d:	57                   	push   edi
c0024e7e:	56                   	push   esi
c0024e7f:	53                   	push   ebx
c0024e80:	83 ec 20             	sub    esp,0x20
c0024e83:	8b 7c 24 34          	mov    edi,DWORD PTR [esp+0x34]
c0024e87:	8a 44 24 40          	mov    al,BYTE PTR [esp+0x40]
c0024e8b:	8b 5c 24 3c          	mov    ebx,DWORD PTR [esp+0x3c]
c0024e8f:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0024e93:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c0024e97:	6a 01                	push   0x1
c0024e99:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ea0:	50                   	push   eax
c0024ea1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ea7:	e8 56 eb ff ff       	call   c0023a02 <IDE::enableIRQs(unsigned char, bool)>
c0024eac:	5e                   	pop    esi
c0024ead:	58                   	pop    eax
c0024eae:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024eb5:	50                   	push   eax
c0024eb6:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ebc:	e8 0f e9 ff ff       	call   c00237d0 <IDE::prepareInterrupt(unsigned char)>
c0024ec1:	89 3c 24             	mov    DWORD PTR [esp],edi
c0024ec4:	e8 63 ff ff ff       	call   c0024e2c <ATAPI::readyForCommand()>
c0024ec9:	83 c4 10             	add    esp,0x10
c0024ecc:	84 c0                	test   al,al
c0024ece:	75 0a                	jne    c0024eda <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x5e>
c0024ed0:	bb 01 00 00 00       	mov    ebx,0x1
c0024ed5:	e9 57 02 00 00       	jmp    c0025131 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024eda:	8a 87 74 01 00 00    	mov    al,BYTE PTR [edi+0x174]
c0024ee0:	c1 e0 04             	shl    eax,0x4
c0024ee3:	0f b6 c0             	movzx  eax,al
c0024ee6:	50                   	push   eax
c0024ee7:	6a 06                	push   0x6
c0024ee9:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024ef0:	50                   	push   eax
c0024ef1:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024ef7:	e8 fa e8 ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024efc:	6a 00                	push   0x0
c0024efe:	6a 01                	push   0x1
c0024f00:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f07:	50                   	push   eax
c0024f08:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f0e:	e8 e3 e8 ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f13:	83 c4 20             	add    esp,0x20
c0024f16:	0f b6 c3             	movzx  eax,bl
c0024f19:	0f b6 df             	movzx  ebx,bh
c0024f1c:	50                   	push   eax
c0024f1d:	6a 04                	push   0x4
c0024f1f:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f26:	50                   	push   eax
c0024f27:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f2d:	e8 c4 e8 ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f32:	53                   	push   ebx
c0024f33:	6a 05                	push   0x5
c0024f35:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f3c:	50                   	push   eax
c0024f3d:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f43:	e8 ae e8 ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f48:	83 c4 20             	add    esp,0x20
c0024f4b:	68 a0 00 00 00       	push   0xa0
c0024f50:	6a 07                	push   0x7
c0024f52:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f59:	50                   	push   eax
c0024f5a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f60:	e8 91 e8 ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c0024f65:	83 c4 0c             	add    esp,0xc
c0024f68:	6a 01                	push   0x1
c0024f6a:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0024f71:	50                   	push   eax
c0024f72:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024f78:	e8 25 f4 ff ff       	call   c00243a2 <IDE::polling(unsigned char, unsigned int)>
c0024f7d:	83 c4 10             	add    esp,0x10
c0024f80:	8b 97 70 01 00 00    	mov    edx,DWORD PTR [edi+0x170]
c0024f86:	84 c0                	test   al,al
c0024f88:	74 23                	je     c0024fad <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x131>
c0024f8a:	0f b6 d8             	movzx  ebx,al
c0024f8d:	0f b6 d2             	movzx  edx,dl
c0024f90:	53                   	push   ebx
c0024f91:	0f b6 87 74 01 00 00 	movzx  eax,BYTE PTR [edi+0x174]
c0024f98:	50                   	push   eax
c0024f99:	52                   	push   edx
c0024f9a:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fa0:	e8 67 f2 ff ff       	call   c002420c <IDE::printError(unsigned char, unsigned char, unsigned char)>
c0024fa5:	83 c4 10             	add    esp,0x10
c0024fa8:	e9 84 01 00 00       	jmp    c0025131 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c0024fad:	0f b6 d2             	movzx  edx,dl
c0024fb0:	53                   	push   ebx
c0024fb1:	53                   	push   ebx
c0024fb2:	52                   	push   edx
c0024fb3:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0024fb9:	e8 26 e8 ff ff       	call   c00237e4 <IDE::getBase(unsigned char)>
c0024fbe:	8b 74 24 44          	mov    esi,DWORD PTR [esp+0x44]
c0024fc2:	b9 06 00 00 00       	mov    ecx,0x6
c0024fc7:	89 c2                	mov    edx,eax
c0024fc9:	66 f3 6f             	rep outs dx,WORD PTR ds:[esi]
c0024fcc:	8b 5c 24 54          	mov    ebx,DWORD PTR [esp+0x54]
c0024fd0:	83 c4 10             	add    esp,0x10
c0024fd3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0024fd9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c0024fe0:	85 db                	test   ebx,ebx
c0024fe2:	0f 84 ec 00 00 00    	je     c00250d4 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x258>
c0024fe8:	51                   	push   ecx
c0024fe9:	51                   	push   ecx
c0024fea:	52                   	push   edx
c0024feb:	50                   	push   eax
c0024fec:	e8 73 e9 ff ff       	call   c0023964 <IDE::waitInterrupt(unsigned char)>
c0024ff1:	83 c4 10             	add    esp,0x10
c0024ff4:	84 c0                	test   al,al
c0024ff6:	0f 84 d4 fe ff ff    	je     c0024ed0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c0024ffc:	56                   	push   esi
c0024ffd:	56                   	push   esi
c0024ffe:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025005:	50                   	push   eax
c0025006:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002500c:	e8 bf e7 ff ff       	call   c00237d0 <IDE::prepareInterrupt(unsigned char)>
c0025011:	83 c4 0c             	add    esp,0xc
c0025014:	6a 04                	push   0x4
c0025016:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002501d:	50                   	push   eax
c002501e:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025024:	e8 8d e8 ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c0025029:	83 c4 0c             	add    esp,0xc
c002502c:	89 c6                	mov    esi,eax
c002502e:	6a 05                	push   0x5
c0025030:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c0025037:	50                   	push   eax
c0025038:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c002503e:	e8 73 e8 ff ff       	call   c00238b6 <IDE::read(unsigned char, unsigned char)>
c0025043:	89 f1                	mov    ecx,esi
c0025045:	0f b6 c0             	movzx  eax,al
c0025048:	0f b6 f1             	movzx  esi,cl
c002504b:	c1 e0 08             	shl    eax,0x8
c002504e:	09 c6                	or     esi,eax
c0025050:	d1 fe                	sar    esi,1
c0025052:	89 74 24 14          	mov    DWORD PTR [esp+0x14],esi
c0025056:	83 c4 10             	add    esp,0x10
c0025059:	80 7c 24 0b 00       	cmp    BYTE PTR [esp+0xb],0x0
c002505e:	74 41                	je     c00250a1 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x225>
c0025060:	31 c9                	xor    ecx,ecx
c0025062:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c0025068:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c002506f:	3b 4c 24 04          	cmp    ecx,DWORD PTR [esp+0x4]
c0025073:	75 0a                	jne    c002507f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x203>
c0025075:	01 c9                	add    ecx,ecx
c0025077:	01 cd                	add    ebp,ecx
c0025079:	4b                   	dec    ebx
c002507a:	e9 54 ff ff ff       	jmp    c0024fd3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x157>
c002507f:	66 8b 74 4d 00       	mov    si,WORD PTR [ebp+ecx*2+0x0]
c0025084:	89 4c 24 0c          	mov    DWORD PTR [esp+0xc],ecx
c0025088:	51                   	push   ecx
c0025089:	51                   	push   ecx
c002508a:	52                   	push   edx
c002508b:	50                   	push   eax
c002508c:	e8 53 e7 ff ff       	call   c00237e4 <IDE::getBase(unsigned char)>
c0025091:	89 c2                	mov    edx,eax
c0025093:	89 f0                	mov    eax,esi
c0025095:	66 ef                	out    dx,ax
c0025097:	8b 4c 24 1c          	mov    ecx,DWORD PTR [esp+0x1c]
c002509b:	83 c4 10             	add    esp,0x10
c002509e:	41                   	inc    ecx
c002509f:	eb c1                	jmp    c0025062 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1e6>
c00250a1:	31 f6                	xor    esi,esi
c00250a3:	8b 87 6c 01 00 00    	mov    eax,DWORD PTR [edi+0x16c]
c00250a9:	0f b6 97 70 01 00 00 	movzx  edx,BYTE PTR [edi+0x170]
c00250b0:	3b 74 24 04          	cmp    esi,DWORD PTR [esp+0x4]
c00250b4:	75 06                	jne    c00250bc <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x240>
c00250b6:	01 f6                	add    esi,esi
c00250b8:	01 f5                	add    ebp,esi
c00250ba:	eb bd                	jmp    c0025079 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x1fd>
c00250bc:	51                   	push   ecx
c00250bd:	51                   	push   ecx
c00250be:	52                   	push   edx
c00250bf:	50                   	push   eax
c00250c0:	e8 1f e7 ff ff       	call   c00237e4 <IDE::getBase(unsigned char)>
c00250c5:	89 c2                	mov    edx,eax
c00250c7:	66 ed                	in     ax,dx
c00250c9:	66 89 44 75 00       	mov    WORD PTR [ebp+esi*2+0x0],ax
c00250ce:	83 c4 10             	add    esp,0x10
c00250d1:	46                   	inc    esi
c00250d2:	eb cf                	jmp    c00250a3 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x227>
c00250d4:	51                   	push   ecx
c00250d5:	51                   	push   ecx
c00250d6:	52                   	push   edx
c00250d7:	50                   	push   eax
c00250d8:	e8 87 e8 ff ff       	call   c0023964 <IDE::waitInterrupt(unsigned char)>
c00250dd:	83 c4 10             	add    esp,0x10
c00250e0:	84 c0                	test   al,al
c00250e2:	0f 84 e8 fd ff ff    	je     c0024ed0 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x54>
c00250e8:	bb a0 86 01 00       	mov    ebx,0x186a0
c00250ed:	52                   	push   edx
c00250ee:	52                   	push   edx
c00250ef:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c00250f6:	50                   	push   eax
c00250f7:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c00250fd:	e8 ce e6 ff ff       	call   c00237d0 <IDE::prepareInterrupt(unsigned char)>
c0025102:	83 c4 10             	add    esp,0x10
c0025105:	50                   	push   eax
c0025106:	50                   	push   eax
c0025107:	0f b6 87 70 01 00 00 	movzx  eax,BYTE PTR [edi+0x170]
c002510e:	50                   	push   eax
c002510f:	ff b7 6c 01 00 00    	push   DWORD PTR [edi+0x16c]
c0025115:	e8 ca e6 ff ff       	call   c00237e4 <IDE::getBase(unsigned char)>
c002511a:	8d 50 07             	lea    edx,[eax+0x7]
c002511d:	ec                   	in     al,dx
c002511e:	83 c4 10             	add    esp,0x10
c0025121:	a8 88                	test   al,0x88
c0025123:	74 0a                	je     c002512f <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b3>
c0025125:	4b                   	dec    ebx
c0025126:	75 dd                	jne    c0025105 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x289>
c0025128:	bb 02 00 00 00       	mov    ebx,0x2
c002512d:	eb 02                	jmp    c0025131 <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)+0x2b5>
c002512f:	31 db                	xor    ebx,ebx
c0025131:	83 c4 1c             	add    esp,0x1c
c0025134:	89 d8                	mov    eax,ebx
c0025136:	5b                   	pop    ebx
c0025137:	5e                   	pop    esi
c0025138:	5f                   	pop    edi
c0025139:	5d                   	pop    ebp
c002513a:	c3                   	ret    
c002513b:	90                   	nop

c002513c <ATAPI::diskRemoved()>:
c002513c:	83 ec 18             	sub    esp,0x18
c002513f:	68 5d d9 02 c0       	push   0xc002d95d
c0025144:	e8 fe dc fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0025149:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002514d:	c6 80 7c 01 00 00 00 	mov    BYTE PTR [eax+0x17c],0x0
c0025154:	83 c4 1c             	add    esp,0x1c
c0025157:	c3                   	ret    

c0025158 <ATAPI::eject()>:
c0025158:	57                   	push   edi
c0025159:	b9 03 00 00 00       	mov    ecx,0x3
c002515e:	53                   	push   ebx
c002515f:	83 ec 14             	sub    esp,0x14
c0025162:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025166:	8d 7c 24 04          	lea    edi,[esp+0x4]
c002516a:	fc                   	cld    
c002516b:	31 c0                	xor    eax,eax
c002516d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002516f:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025174:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025179:	50                   	push   eax
c002517a:	50                   	push   eax
c002517b:	6a 00                	push   0x0
c002517d:	6a 00                	push   0x0
c002517f:	6a 00                	push   0x0
c0025181:	6a 02                	push   0x2
c0025183:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025187:	50                   	push   eax
c0025188:	53                   	push   ebx
c0025189:	e8 ee fc ff ff       	call   c0024e7c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002518e:	83 c4 14             	add    esp,0x14
c0025191:	53                   	push   ebx
c0025192:	e8 a5 ff ff ff       	call   c002513c <ATAPI::diskRemoved()>
c0025197:	83 c4 24             	add    esp,0x24
c002519a:	31 c0                	xor    eax,eax
c002519c:	5b                   	pop    ebx
c002519d:	5f                   	pop    edi
c002519e:	c3                   	ret    
c002519f:	90                   	nop

c00251a0 <ATAPI::diskInserted()>:
c00251a0:	53                   	push   ebx
c00251a1:	83 ec 14             	sub    esp,0x14
c00251a4:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c00251a8:	68 74 d9 02 c0       	push   0xc002d974
c00251ad:	e8 95 dc fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00251b2:	c6 83 7c 01 00 00 01 	mov    BYTE PTR [ebx+0x17c],0x1
c00251b9:	89 1c 24             	mov    DWORD PTR [esp],ebx
c00251bc:	e8 43 f5 fe ff       	call   c0014704 <PhysicalDisk::startCache()>
c00251c1:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c00251c5:	83 c4 18             	add    esp,0x18
c00251c8:	5b                   	pop    ebx
c00251c9:	e9 16 18 ff ff       	jmp    c00169e4 <createPartitionsForDisk(PhysicalDisk*)>

c00251ce <ATAPI::detectMedia()>:
c00251ce:	56                   	push   esi
c00251cf:	53                   	push   ebx
c00251d0:	83 ec 28             	sub    esp,0x28
c00251d3:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00251d7:	6a 0c                	push   0xc
c00251d9:	6a 00                	push   0x0
c00251db:	8d 74 24 0e          	lea    esi,[esp+0xe]
c00251df:	56                   	push   esi
c00251e0:	e8 87 b5 fd ff       	call   c000076c <memset>
c00251e5:	58                   	pop    eax
c00251e6:	5a                   	pop    edx
c00251e7:	6a 00                	push   0x0
c00251e9:	6a 00                	push   0x0
c00251eb:	6a 00                	push   0x0
c00251ed:	6a 00                	push   0x0
c00251ef:	56                   	push   esi
c00251f0:	53                   	push   ebx
c00251f1:	e8 86 fc ff ff       	call   c0024e7c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c00251f6:	83 c4 1c             	add    esp,0x1c
c00251f9:	6a 0c                	push   0xc
c00251fb:	6a 00                	push   0x0
c00251fd:	56                   	push   esi
c00251fe:	e8 69 b5 fd ff       	call   c000076c <memset>
c0025203:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025208:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c002520d:	59                   	pop    ecx
c002520e:	58                   	pop    eax
c002520f:	6a 01                	push   0x1
c0025211:	8d 44 24 1a          	lea    eax,[esp+0x1a]
c0025215:	50                   	push   eax
c0025216:	6a 00                	push   0x0
c0025218:	6a 12                	push   0x12
c002521a:	56                   	push   esi
c002521b:	53                   	push   ebx
c002521c:	e8 5b fc ff ff       	call   c0024e7c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c0025221:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025225:	83 c4 20             	add    esp,0x20
c0025228:	83 e0 7f             	and    eax,0x7f
c002522b:	3c 70                	cmp    al,0x70
c002522d:	74 15                	je     c0025244 <ATAPI::detectMedia()+0x76>
c002522f:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025236:	75 0c                	jne    c0025244 <ATAPI::detectMedia()+0x76>
c0025238:	83 ec 0c             	sub    esp,0xc
c002523b:	53                   	push   ebx
c002523c:	e8 5f ff ff ff       	call   c00251a0 <ATAPI::diskInserted()>
c0025241:	83 c4 10             	add    esp,0x10
c0025244:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025248:	83 e0 0f             	and    eax,0xf
c002524b:	3c 02                	cmp    al,0x2
c002524d:	75 1b                	jne    c002526a <ATAPI::detectMedia()+0x9c>
c002524f:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025254:	75 2d                	jne    c0025283 <ATAPI::detectMedia()+0xb5>
c0025256:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c002525d:	74 24                	je     c0025283 <ATAPI::detectMedia()+0xb5>
c002525f:	83 ec 0c             	sub    esp,0xc
c0025262:	53                   	push   ebx
c0025263:	e8 d4 fe ff ff       	call   c002513c <ATAPI::diskRemoved()>
c0025268:	eb 16                	jmp    c0025280 <ATAPI::detectMedia()+0xb2>
c002526a:	84 c0                	test   al,al
c002526c:	75 15                	jne    c0025283 <ATAPI::detectMedia()+0xb5>
c002526e:	80 bb 7c 01 00 00 00 	cmp    BYTE PTR [ebx+0x17c],0x0
c0025275:	75 0c                	jne    c0025283 <ATAPI::detectMedia()+0xb5>
c0025277:	83 ec 0c             	sub    esp,0xc
c002527a:	53                   	push   ebx
c002527b:	e8 20 ff ff ff       	call   c00251a0 <ATAPI::diskInserted()>
c0025280:	83 c4 10             	add    esp,0x10
c0025283:	83 c4 24             	add    esp,0x24
c0025286:	5b                   	pop    ebx
c0025287:	5e                   	pop    esi
c0025288:	c3                   	ret    
c0025289:	90                   	nop

c002528a <ATAPI::open(int, int, void*)>:
c002528a:	53                   	push   ebx
c002528b:	83 ec 08             	sub    esp,0x8
c002528e:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025292:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025296:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002529a:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c00252a0:	89 93 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],edx
c00252a6:	c1 e0 06             	shl    eax,0x6
c00252a9:	01 d0                	add    eax,edx
c00252ab:	0f b6 88 6d 01 00 00 	movzx  ecx,BYTE PTR [eax+0x16d]
c00252b2:	89 8b 70 01 00 00    	mov    DWORD PTR [ebx+0x170],ecx
c00252b8:	0f b6 80 6e 01 00 00 	movzx  eax,BYTE PTR [eax+0x16e]
c00252bf:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c00252c9:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c00252cf:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c00252d6:	6a 04                	push   0x4
c00252d8:	6a 0c                	push   0xc
c00252da:	51                   	push   ecx
c00252db:	52                   	push   edx
c00252dc:	e8 15 e5 ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00252e1:	90                   	nop
c00252e2:	90                   	nop
c00252e3:	6a 00                	push   0x0
c00252e5:	6a 0c                	push   0xc
c00252e7:	0f b6 83 70 01 00 00 	movzx  eax,BYTE PTR [ebx+0x170]
c00252ee:	50                   	push   eax
c00252ef:	ff b3 6c 01 00 00    	push   DWORD PTR [ebx+0x16c]
c00252f5:	e8 fc e4 ff ff       	call   c00237f6 <IDE::write(unsigned char, unsigned char, unsigned char)>
c00252fa:	c6 83 7c 01 00 00 00 	mov    BYTE PTR [ebx+0x17c],0x0
c0025301:	83 c4 14             	add    esp,0x14
c0025304:	53                   	push   ebx
c0025305:	e8 c4 fe ff ff       	call   c00251ce <ATAPI::detectMedia()>
c002530a:	31 c0                	xor    eax,eax
c002530c:	83 c4 18             	add    esp,0x18
c002530f:	5b                   	pop    ebx
c0025310:	c3                   	ret    
c0025311:	90                   	nop

c0025312 <ATAPI::read(unsigned long long, int, void*)>:
c0025312:	55                   	push   ebp
c0025313:	57                   	push   edi
c0025314:	56                   	push   esi
c0025315:	53                   	push   ebx
c0025316:	83 ec 1c             	sub    esp,0x1c
c0025319:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c002531d:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025321:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c0025325:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c002532c:	74 41                	je     c002536f <ATAPI::read(unsigned long long, int, void*)+0x5d>
c002532e:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025332:	b9 03 00 00 00       	mov    ecx,0x3
c0025337:	fc                   	cld    
c0025338:	31 c0                	xor    eax,eax
c002533a:	86 fb                	xchg   bl,bh
c002533c:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c002533e:	c1 c3 10             	rol    ebx,0x10
c0025341:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025346:	89 e8                	mov    eax,ebp
c0025348:	86 fb                	xchg   bl,bh
c002534a:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c002534e:	89 5c 24 06          	mov    DWORD PTR [esp+0x6],ebx
c0025352:	50                   	push   eax
c0025353:	50                   	push   eax
c0025354:	55                   	push   ebp
c0025355:	c1 e5 0b             	shl    ebp,0xb
c0025358:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c002535c:	6a 00                	push   0x0
c002535e:	55                   	push   ebp
c002535f:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025363:	50                   	push   eax
c0025364:	56                   	push   esi
c0025365:	e8 12 fb ff ff       	call   c0024e7c <ATAPI::sendPacket(unsigned char*, int, bool, unsigned short*, int)>
c002536a:	83 c4 20             	add    esp,0x20
c002536d:	eb 1a                	jmp    c0025389 <ATAPI::read(unsigned long long, int, void*)+0x77>
c002536f:	83 ec 0c             	sub    esp,0xc
c0025372:	56                   	push   esi
c0025373:	e8 56 fe ff ff       	call   c00251ce <ATAPI::detectMedia()>
c0025378:	83 c4 10             	add    esp,0x10
c002537b:	80 be 7c 01 00 00 00 	cmp    BYTE PTR [esi+0x17c],0x0
c0025382:	75 aa                	jne    c002532e <ATAPI::read(unsigned long long, int, void*)+0x1c>
c0025384:	b8 02 00 00 00       	mov    eax,0x2
c0025389:	83 c4 1c             	add    esp,0x1c
c002538c:	5b                   	pop    ebx
c002538d:	5e                   	pop    esi
c002538e:	5f                   	pop    edi
c002538f:	5d                   	pop    ebp
c0025390:	c3                   	ret    
c0025391:	90                   	nop

c0025392 <SATA::close(int, int, void*)>:
c0025392:	83 ec 0c             	sub    esp,0xc
c0025395:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025399:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002539f:	85 c0                	test   eax,eax
c00253a1:	74 0c                	je     c00253af <SATA::close(int, int, void*)+0x1d>
c00253a3:	83 ec 0c             	sub    esp,0xc
c00253a6:	8b 10                	mov    edx,DWORD PTR [eax]
c00253a8:	50                   	push   eax
c00253a9:	ff 52 04             	call   DWORD PTR [edx+0x4]
c00253ac:	83 c4 10             	add    esp,0x10
c00253af:	31 c0                	xor    eax,eax
c00253b1:	83 c4 0c             	add    esp,0xc
c00253b4:	c3                   	ret    
c00253b5:	90                   	nop

c00253b6 <SATA::powerSaving(PowerSavingLevel)>:
c00253b6:	c3                   	ret    
c00253b7:	90                   	nop

c00253b8 <SATA::open(int, int, void*)>:
c00253b8:	56                   	push   esi
c00253b9:	53                   	push   ebx
c00253ba:	50                   	push   eax
c00253bb:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c00253bf:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c00253c3:	c7 83 5c 01 00 00 00 02 00 00 	mov    DWORD PTR [ebx+0x15c],0x200
c00253cd:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c00253d3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c00253dd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00253e1:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c00253eb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c00253f1:	c6 83 68 01 00 00 00 	mov    BYTE PTR [ebx+0x168],0x0
c00253f8:	e8 17 ab fe ff       	call   c000ff14 <Phys::allocatePage()>
c00253fd:	89 c6                	mov    esi,eax
c00253ff:	89 83 74 01 00 00    	mov    DWORD PTR [ebx+0x174],eax
c0025405:	81 c6 00 10 00 00    	add    esi,0x1000
c002540b:	e8 04 ab fe ff       	call   c000ff14 <Phys::allocatePage()>
c0025410:	39 c6                	cmp    esi,eax
c0025412:	74 10                	je     c0025424 <SATA::open(int, int, void*)+0x6c>
c0025414:	83 ec 0c             	sub    esp,0xc
c0025417:	68 9c d8 02 c0       	push   0xc002d89c
c002541c:	e8 e0 53 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c0025421:	83 c4 10             	add    esp,0x10
c0025424:	83 ec 0c             	sub    esp,0xc
c0025427:	6a 02                	push   0x2
c0025429:	e8 13 c6 fe ff       	call   c0011a41 <Virt::allocateKernelVirtualPages(int)>
c002542e:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025434:	6a 03                	push   0x3
c0025436:	50                   	push   eax
c0025437:	ff b3 74 01 00 00    	push   DWORD PTR [ebx+0x174]
c002543d:	ff 35 d0 ef 02 c0    	push   DWORD PTR ds:0xc002efd0
c0025443:	e8 30 ce fe ff       	call   c0012278 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025448:	83 c4 14             	add    esp,0x14
c002544b:	53                   	push   ebx
c002544c:	e8 b3 f2 fe ff       	call   c0014704 <PhysicalDisk::startCache()>
c0025451:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025454:	e8 8b 15 ff ff       	call   c00169e4 <createPartitionsForDisk(PhysicalDisk*)>
c0025459:	83 c4 14             	add    esp,0x14
c002545c:	31 c0                	xor    eax,eax
c002545e:	5b                   	pop    ebx
c002545f:	5e                   	pop    esi
c0025460:	c3                   	ret    
c0025461:	90                   	nop

c0025462 <SATA::SATA()>:
c0025462:	83 ec 0c             	sub    esp,0xc
c0025465:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025469:	83 ec 04             	sub    esp,0x4
c002546c:	68 00 02 00 00       	push   0x200
c0025471:	68 b0 d8 02 c0       	push   0xc002d8b0
c0025476:	50                   	push   eax
c0025477:	e8 20 f2 fe ff       	call   c001469c <PhysicalDisk::PhysicalDisk(char const*, int)>
c002547c:	83 c4 10             	add    esp,0x10
c002547f:	ba 20 d9 02 c0       	mov    edx,0xc002d920
c0025484:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025488:	89 10                	mov    DWORD PTR [eax],edx
c002548a:	90                   	nop
c002548b:	83 c4 0c             	add    esp,0xc
c002548e:	c3                   	ret    
c002548f:	90                   	nop

c0025490 <SATA::access(unsigned long long, int, void*, bool)>:
c0025490:	55                   	push   ebp
c0025491:	57                   	push   edi
c0025492:	56                   	push   esi
c0025493:	53                   	push   ebx
c0025494:	83 ec 2c             	sub    esp,0x2c
c0025497:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c002549b:	8b 5c 24 40          	mov    ebx,DWORD PTR [esp+0x40]
c002549f:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c00254a3:	8b 6c 24 44          	mov    ebp,DWORD PTR [esp+0x44]
c00254a7:	8b 44 24 54          	mov    eax,DWORD PTR [esp+0x54]
c00254ab:	83 7c 24 4c 10       	cmp    DWORD PTR [esp+0x4c],0x10
c00254b0:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00254b4:	7e 10                	jle    c00254c6 <SATA::access(unsigned long long, int, void*, bool)+0x36>
c00254b6:	83 ec 0c             	sub    esp,0xc
c00254b9:	68 c0 d8 02 c0       	push   0xc002d8c0
c00254be:	e8 3e 53 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c00254c3:	83 c4 10             	add    esp,0x10
c00254c6:	8b 93 6c 01 00 00    	mov    edx,DWORD PTR [ebx+0x16c]
c00254cc:	8b 83 70 01 00 00    	mov    eax,DWORD PTR [ebx+0x170]
c00254d2:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00254d8:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00254dc:	89 d0                	mov    eax,edx
c00254de:	c1 e0 07             	shl    eax,0x7
c00254e1:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c00254e5:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00254ef:	51                   	push   ecx
c00254f0:	8d 42 02             	lea    eax,[edx+0x2]
c00254f3:	51                   	push   ecx
c00254f4:	c1 e0 07             	shl    eax,0x7
c00254f7:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00254fb:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00254ff:	50                   	push   eax
c0025500:	ff b3 70 01 00 00    	push   DWORD PTR [ebx+0x170]
c0025506:	e8 af ef ff ff       	call   c00244ba <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c002550b:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002550f:	83 c4 10             	add    esp,0x10
c0025512:	b8 01 00 00 00       	mov    eax,0x1
c0025517:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c002551c:	0f 84 cb 01 00 00    	je     c00256ed <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c0025522:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c0025526:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c002552a:	c1 e0 09             	shl    eax,0x9
c002552d:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c0025532:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c0025536:	74 0e                	je     c0025546 <SATA::access(unsigned long long, int, void*, bool)+0xb6>
c0025538:	8b 74 24 50          	mov    esi,DWORD PTR [esp+0x50]
c002553c:	8b bb 78 01 00 00    	mov    edi,DWORD PTR [ebx+0x178]
c0025542:	89 c1                	mov    ecx,eax
c0025544:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025546:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c002554a:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c0025550:	8d 42 02             	lea    eax,[edx+0x2]
c0025553:	c1 e0 07             	shl    eax,0x7
c0025556:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c002555a:	8b 00                	mov    eax,DWORD PTR [eax]
c002555c:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c0025562:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025568:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002556c:	c1 e1 05             	shl    ecx,0x5
c002556f:	01 c8                	add    eax,ecx
c0025571:	8a 4c 24 0c          	mov    cl,BYTE PTR [esp+0xc]
c0025575:	83 e1 01             	and    ecx,0x1
c0025578:	89 ce                	mov    esi,ecx
c002557a:	8a 08                	mov    cl,BYTE PTR [eax]
c002557c:	c1 e6 06             	shl    esi,0x6
c002557f:	83 e1 bf             	and    ecx,0xffffffbf
c0025582:	09 f1                	or     ecx,esi
c0025584:	88 08                	mov    BYTE PTR [eax],cl
c0025586:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025588:	81 e1 e0 ff 00 00    	and    ecx,0xffe0
c002558e:	81 c9 05 00 01 00    	or     ecx,0x10005
c0025594:	89 08                	mov    DWORD PTR [eax],ecx
c0025596:	8b 8b 70 01 00 00    	mov    ecx,DWORD PTR [ebx+0x170]
c002559c:	8b b1 58 01 00 00    	mov    esi,DWORD PTR [ecx+0x158]
c00255a2:	2b b1 5c 01 00 00    	sub    esi,DWORD PTR [ecx+0x15c]
c00255a8:	03 70 08             	add    esi,DWORD PTR [eax+0x8]
c00255ab:	50                   	push   eax
c00255ac:	68 90 00 00 00       	push   0x90
c00255b1:	6a 00                	push   0x0
c00255b3:	56                   	push   esi
c00255b4:	e8 b3 b1 fd ff       	call   c000076c <memset>
c00255b9:	8b 83 74 01 00 00    	mov    eax,DWORD PTR [ebx+0x174]
c00255bf:	66 89 6e 04          	mov    WORD PTR [esi+0x4],bp
c00255c3:	89 86 80 00 00 00    	mov    DWORD PTR [esi+0x80],eax
c00255c9:	c6 46 07 40          	mov    BYTE PTR [esi+0x7],0x40
c00255cd:	8b 44 24 24          	mov    eax,DWORD PTR [esp+0x24]
c00255d1:	83 c4 10             	add    esp,0x10
c00255d4:	48                   	dec    eax
c00255d5:	25 ff ff 3f 00       	and    eax,0x3fffff
c00255da:	89 c1                	mov    ecx,eax
c00255dc:	8b 86 8c 00 00 00    	mov    eax,DWORD PTR [esi+0x8c]
c00255e2:	25 00 00 c0 ff       	and    eax,0xffc00000
c00255e7:	09 c8                	or     eax,ecx
c00255e9:	89 86 8c 00 00 00    	mov    DWORD PTR [esi+0x8c],eax
c00255ef:	66 8b 06             	mov    ax,WORD PTR [esi]
c00255f2:	80 8e 8f 00 00 00 80 	or     BYTE PTR [esi+0x8f],0x80
c00255f9:	66 25 00 7f          	and    ax,0x7f00
c00255fd:	8b 54 24 1c          	mov    edx,DWORD PTR [esp+0x1c]
c0025601:	66 0d 27 80          	or     ax,0x8027
c0025605:	80 7c 24 0c 01       	cmp    BYTE PTR [esp+0xc],0x1
c002560a:	66 89 06             	mov    WORD PTR [esi],ax
c002560d:	19 c0                	sbb    eax,eax
c002560f:	83 e0 f0             	and    eax,0xfffffff0
c0025612:	83 c0 35             	add    eax,0x35
c0025615:	88 46 02             	mov    BYTE PTR [esi+0x2],al
c0025618:	89 e8                	mov    eax,ebp
c002561a:	c1 e8 10             	shr    eax,0x10
c002561d:	88 46 06             	mov    BYTE PTR [esi+0x6],al
c0025620:	89 e8                	mov    eax,ebp
c0025622:	c1 e8 18             	shr    eax,0x18
c0025625:	88 46 08             	mov    BYTE PTR [esi+0x8],al
c0025628:	8a 44 24 18          	mov    al,BYTE PTR [esp+0x18]
c002562c:	88 46 09             	mov    BYTE PTR [esi+0x9],al
c002562f:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0025633:	88 66 0a             	mov    BYTE PTR [esi+0xa],ah
c0025636:	8b 44 24 4c          	mov    eax,DWORD PTR [esp+0x4c]
c002563a:	66 89 46 0c          	mov    WORD PTR [esi+0xc],ax
c002563e:	89 d6                	mov    esi,edx
c0025640:	31 c0                	xor    eax,eax
c0025642:	c1 e6 07             	shl    esi,0x7
c0025645:	03 74 24 08          	add    esi,DWORD PTR [esp+0x8]
c0025649:	8b 8e 20 01 00 00    	mov    ecx,DWORD PTR [esi+0x120]
c002564f:	80 e1 88             	and    cl,0x88
c0025652:	74 0a                	je     c002565e <SATA::access(unsigned long long, int, void*, bool)+0x1ce>
c0025654:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025659:	74 0a                	je     c0025665 <SATA::access(unsigned long long, int, void*, bool)+0x1d5>
c002565b:	40                   	inc    eax
c002565c:	eb eb                	jmp    c0025649 <SATA::access(unsigned long long, int, void*, bool)+0x1b9>
c002565e:	3d 40 42 0f 00       	cmp    eax,0xf4240
c0025663:	75 0a                	jne    c002566f <SATA::access(unsigned long long, int, void*, bool)+0x1df>
c0025665:	83 ec 0c             	sub    esp,0xc
c0025668:	68 f9 d8 02 c0       	push   0xc002d8f9
c002566d:	eb 56                	jmp    c00256c5 <SATA::access(unsigned long long, int, void*, bool)+0x235>
c002566f:	b8 01 00 00 00       	mov    eax,0x1
c0025674:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025678:	c1 e2 07             	shl    edx,0x7
c002567b:	d3 e0                	shl    eax,cl
c002567d:	03 54 24 08          	add    edx,DWORD PTR [esp+0x8]
c0025681:	89 86 38 01 00 00    	mov    DWORD PTR [esi+0x138],eax
c0025687:	8b 8a 38 01 00 00    	mov    ecx,DWORD PTR [edx+0x138]
c002568d:	85 c8                	test   eax,ecx
c002568f:	74 20                	je     c00256b1 <SATA::access(unsigned long long, int, void*, bool)+0x221>
c0025691:	8b 8a 10 01 00 00    	mov    ecx,DWORD PTR [edx+0x110]
c0025697:	0f ba e1 1e          	bt     ecx,0x1e
c002569b:	73 ea                	jae    c0025687 <SATA::access(unsigned long long, int, void*, bool)+0x1f7>
c002569d:	83 ec 0c             	sub    esp,0xc
c00256a0:	68 07 d9 02 c0       	push   0xc002d907
c00256a5:	e8 57 51 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c00256aa:	83 c4 10             	add    esp,0x10
c00256ad:	31 c0                	xor    eax,eax
c00256af:	eb 3c                	jmp    c00256ed <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00256b1:	8b 82 10 01 00 00    	mov    eax,DWORD PTR [edx+0x110]
c00256b7:	0f ba e0 1e          	bt     eax,0x1e
c00256bb:	73 17                	jae    c00256d4 <SATA::access(unsigned long long, int, void*, bool)+0x244>
c00256bd:	83 ec 0c             	sub    esp,0xc
c00256c0:	68 07 d9 02 c0       	push   0xc002d907
c00256c5:	e8 37 51 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c00256ca:	83 c4 10             	add    esp,0x10
c00256cd:	b8 01 00 00 00       	mov    eax,0x1
c00256d2:	eb 19                	jmp    c00256ed <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00256d4:	31 c0                	xor    eax,eax
c00256d6:	80 7c 24 0c 00       	cmp    BYTE PTR [esp+0xc],0x0
c00256db:	75 10                	jne    c00256ed <SATA::access(unsigned long long, int, void*, bool)+0x25d>
c00256dd:	8b b3 78 01 00 00    	mov    esi,DWORD PTR [ebx+0x178]
c00256e3:	8b 7c 24 50          	mov    edi,DWORD PTR [esp+0x50]
c00256e7:	8b 4c 24 14          	mov    ecx,DWORD PTR [esp+0x14]
c00256eb:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c00256ed:	83 c4 2c             	add    esp,0x2c
c00256f0:	5b                   	pop    ebx
c00256f1:	5e                   	pop    esi
c00256f2:	5f                   	pop    edi
c00256f3:	5d                   	pop    ebp
c00256f4:	c3                   	ret    
c00256f5:	90                   	nop

c00256f6 <SATA::read(unsigned long long, int, void*)>:
c00256f6:	57                   	push   edi
c00256f7:	b8 04 00 00 00       	mov    eax,0x4
c00256fc:	56                   	push   esi
c00256fd:	53                   	push   ebx
c00256fe:	83 ec 10             	sub    esp,0x10
c0025701:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c0025705:	8b 74 24 24          	mov    esi,DWORD PTR [esp+0x24]
c0025709:	8d 4b ff             	lea    ecx,[ebx-0x1]
c002570c:	8b 7c 24 28          	mov    edi,DWORD PTR [esp+0x28]
c0025710:	8b 54 24 30          	mov    edx,DWORD PTR [esp+0x30]
c0025714:	81 f9 fe 00 00 00    	cmp    ecx,0xfe
c002571a:	77 3b                	ja     c0025757 <SATA::read(unsigned long long, int, void*)+0x61>
c002571c:	b8 06 00 00 00       	mov    eax,0x6
c0025721:	85 d2                	test   edx,edx
c0025723:	74 32                	je     c0025757 <SATA::read(unsigned long long, int, void*)+0x61>
c0025725:	50                   	push   eax
c0025726:	50                   	push   eax
c0025727:	6a 00                	push   0x0
c0025729:	52                   	push   edx
c002572a:	53                   	push   ebx
c002572b:	57                   	push   edi
c002572c:	56                   	push   esi
c002572d:	ff 74 24 3c          	push   DWORD PTR [esp+0x3c]
c0025731:	e8 5a fd ff ff       	call   c0025490 <SATA::access(unsigned long long, int, void*, bool)>
c0025736:	83 c4 20             	add    esp,0x20
c0025739:	85 c0                	test   eax,eax
c002573b:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c002573f:	75 11                	jne    c0025752 <SATA::read(unsigned long long, int, void*)+0x5c>
c0025741:	01 1d a8 31 03 c0    	add    DWORD PTR ds:0xc00331a8,ebx
c0025747:	e8 00 b2 fe ff       	call   c001094c <VgaText::updateDiskUsage()>
c002574c:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025750:	eb 05                	jmp    c0025757 <SATA::read(unsigned long long, int, void*)+0x61>
c0025752:	b8 01 00 00 00       	mov    eax,0x1
c0025757:	83 c4 10             	add    esp,0x10
c002575a:	5b                   	pop    ebx
c002575b:	5e                   	pop    esi
c002575c:	5f                   	pop    edi
c002575d:	c3                   	ret    

c002575e <SATA::write(unsigned long long, int, void*)>:
c002575e:	55                   	push   ebp
c002575f:	b8 04 00 00 00       	mov    eax,0x4
c0025764:	57                   	push   edi
c0025765:	56                   	push   esi
c0025766:	53                   	push   ebx
c0025767:	83 ec 1c             	sub    esp,0x1c
c002576a:	8b 6c 24 3c          	mov    ebp,DWORD PTR [esp+0x3c]
c002576e:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
c0025772:	8d 75 ff             	lea    esi,[ebp-0x1]
c0025775:	8b 5c 24 38          	mov    ebx,DWORD PTR [esp+0x38]
c0025779:	8b 7c 24 40          	mov    edi,DWORD PTR [esp+0x40]
c002577d:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0025783:	77 56                	ja     c00257db <SATA::write(unsigned long long, int, void*)+0x7d>
c0025785:	b8 06 00 00 00       	mov    eax,0x6
c002578a:	85 ff                	test   edi,edi
c002578c:	74 4d                	je     c00257db <SATA::write(unsigned long long, int, void*)+0x7d>
c002578e:	89 ee                	mov    esi,ebp
c0025790:	c1 e6 09             	shl    esi,0x9
c0025793:	01 fe                	add    esi,edi
c0025795:	89 c8                	mov    eax,ecx
c0025797:	89 da                	mov    edx,ebx
c0025799:	83 c0 01             	add    eax,0x1
c002579c:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c00257a0:	83 d2 00             	adc    edx,0x0
c00257a3:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c00257a7:	50                   	push   eax
c00257a8:	50                   	push   eax
c00257a9:	6a 01                	push   0x1
c00257ab:	57                   	push   edi
c00257ac:	81 c7 00 02 00 00    	add    edi,0x200
c00257b2:	6a 01                	push   0x1
c00257b4:	53                   	push   ebx
c00257b5:	51                   	push   ecx
c00257b6:	ff 74 24 4c          	push   DWORD PTR [esp+0x4c]
c00257ba:	e8 d1 fc ff ff       	call   c0025490 <SATA::access(unsigned long long, int, void*, bool)>
c00257bf:	8b 4c 24 28          	mov    ecx,DWORD PTR [esp+0x28]
c00257c3:	8b 5c 24 2c          	mov    ebx,DWORD PTR [esp+0x2c]
c00257c7:	83 c4 20             	add    esp,0x20
c00257ca:	39 f7                	cmp    edi,esi
c00257cc:	75 c7                	jne    c0025795 <SATA::write(unsigned long long, int, void*)+0x37>
c00257ce:	01 2d a4 31 03 c0    	add    DWORD PTR ds:0xc00331a4,ebp
c00257d4:	e8 73 b1 fe ff       	call   c001094c <VgaText::updateDiskUsage()>
c00257d9:	31 c0                	xor    eax,eax
c00257db:	83 c4 1c             	add    esp,0x1c
c00257de:	5b                   	pop    ebx
c00257df:	5e                   	pop    esi
c00257e0:	5f                   	pop    edi
c00257e1:	5d                   	pop    ebp
c00257e2:	c3                   	ret    
c00257e3:	90                   	nop

c00257e4 <SATAPI::write(unsigned long long, int, void*)>:
c00257e4:	b8 03 00 00 00       	mov    eax,0x3
c00257e9:	c3                   	ret    

c00257ea <SATAPI::close(int, int, void*)>:
c00257ea:	83 ec 0c             	sub    esp,0xc
c00257ed:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00257f1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00257f7:	85 c0                	test   eax,eax
c00257f9:	74 0c                	je     c0025807 <SATAPI::close(int, int, void*)+0x1d>
c00257fb:	83 ec 0c             	sub    esp,0xc
c00257fe:	8b 10                	mov    edx,DWORD PTR [eax]
c0025800:	50                   	push   eax
c0025801:	ff 52 04             	call   DWORD PTR [edx+0x4]
c0025804:	83 c4 10             	add    esp,0x10
c0025807:	31 c0                	xor    eax,eax
c0025809:	83 c4 0c             	add    esp,0xc
c002580c:	c3                   	ret    
c002580d:	90                   	nop

c002580e <SATAPI::SATAPI()>:
c002580e:	83 ec 0c             	sub    esp,0xc
c0025811:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025815:	83 ec 04             	sub    esp,0x4
c0025818:	68 00 08 00 00       	push   0x800
c002581d:	68 50 d9 02 c0       	push   0xc002d950
c0025822:	50                   	push   eax
c0025823:	e8 74 ee fe ff       	call   c001469c <PhysicalDisk::PhysicalDisk(char const*, int)>
c0025828:	83 c4 10             	add    esp,0x10
c002582b:	ba fc d9 02 c0       	mov    edx,0xc002d9fc
c0025830:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025834:	89 10                	mov    DWORD PTR [eax],edx
c0025836:	90                   	nop
c0025837:	83 c4 0c             	add    esp,0xc
c002583a:	c3                   	ret    
c002583b:	90                   	nop

c002583c <SATAPI::diskRemoved()>:
c002583c:	83 ec 18             	sub    esp,0x18
c002583f:	68 5c d9 02 c0       	push   0xc002d95c
c0025844:	e8 fe d5 fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0025849:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002584d:	c6 80 74 01 00 00 00 	mov    BYTE PTR [eax+0x174],0x0
c0025854:	83 c4 1c             	add    esp,0x1c
c0025857:	c3                   	ret    

c0025858 <SATAPI::diskInserted()>:
c0025858:	53                   	push   ebx
c0025859:	83 ec 14             	sub    esp,0x14
c002585c:	8b 5c 24 1c          	mov    ebx,DWORD PTR [esp+0x1c]
c0025860:	68 73 d9 02 c0       	push   0xc002d973
c0025865:	e8 dd d5 fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c002586a:	c6 83 74 01 00 00 01 	mov    BYTE PTR [ebx+0x174],0x1
c0025871:	89 1c 24             	mov    DWORD PTR [esp],ebx
c0025874:	e8 8b ee fe ff       	call   c0014704 <PhysicalDisk::startCache()>
c0025879:	89 5c 24 20          	mov    DWORD PTR [esp+0x20],ebx
c002587d:	83 c4 18             	add    esp,0x18
c0025880:	5b                   	pop    ebx
c0025881:	e9 5e 11 ff ff       	jmp    c00169e4 <createPartitionsForDisk(PhysicalDisk*)>

c0025886 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>:
c0025886:	55                   	push   ebp
c0025887:	57                   	push   edi
c0025888:	56                   	push   esi
c0025889:	53                   	push   ebx
c002588a:	83 ec 34             	sub    esp,0x34
c002588d:	8b 6c 24 48          	mov    ebp,DWORD PTR [esp+0x48]
c0025891:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025895:	8b 54 24 54          	mov    edx,DWORD PTR [esp+0x54]
c0025899:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c002589d:	89 54 24 24          	mov    DWORD PTR [esp+0x24],edx
c00258a1:	8b 85 70 01 00 00    	mov    eax,DWORD PTR [ebp+0x170]
c00258a7:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c00258ad:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c00258b1:	8b 85 6c 01 00 00    	mov    eax,DWORD PTR [ebp+0x16c]
c00258b7:	89 44 24 14          	mov    DWORD PTR [esp+0x14],eax
c00258bb:	c1 e0 07             	shl    eax,0x7
c00258be:	03 44 24 10          	add    eax,DWORD PTR [esp+0x10]
c00258c2:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c00258c6:	c7 80 10 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x110],0xffffffff
c00258d0:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c00258d4:	8d 58 02             	lea    ebx,[eax+0x2]
c00258d7:	c1 e3 07             	shl    ebx,0x7
c00258da:	03 5c 24 10          	add    ebx,DWORD PTR [esp+0x10]
c00258de:	53                   	push   ebx
c00258df:	ff b5 70 01 00 00    	push   DWORD PTR [ebp+0x170]
c00258e5:	e8 d0 eb ff ff       	call   c00244ba <SATABus::findCmdslot(SATABus::tagHBA_PORT volatile*)>
c00258ea:	89 44 24 20          	mov    DWORD PTR [esp+0x20],eax
c00258ee:	83 c4 10             	add    esp,0x10
c00258f1:	b8 01 00 00 00       	mov    eax,0x1
c00258f6:	83 7c 24 10 ff       	cmp    DWORD PTR [esp+0x10],0xffffffff
c00258fb:	0f 84 85 01 00 00    	je     c0025a86 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025901:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025907:	8b 03                	mov    eax,DWORD PTR [ebx]
c0025909:	2b 81 5c 01 00 00    	sub    eax,DWORD PTR [ecx+0x15c]
c002590f:	03 81 58 01 00 00    	add    eax,DWORD PTR [ecx+0x158]
c0025915:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0025919:	c1 e1 05             	shl    ecx,0x5
c002591c:	01 c8                	add    eax,ecx
c002591e:	8b 08                	mov    ecx,DWORD PTR [eax]
c0025920:	81 e1 80 ff 00 00    	and    ecx,0xff80
c0025926:	81 c9 25 00 01 00    	or     ecx,0x10025
c002592c:	89 08                	mov    DWORD PTR [eax],ecx
c002592e:	8b 8d 70 01 00 00    	mov    ecx,DWORD PTR [ebp+0x170]
c0025934:	8b 99 58 01 00 00    	mov    ebx,DWORD PTR [ecx+0x158]
c002593a:	2b 99 5c 01 00 00    	sub    ebx,DWORD PTR [ecx+0x15c]
c0025940:	03 58 08             	add    ebx,DWORD PTR [eax+0x8]
c0025943:	8d 7b 40             	lea    edi,[ebx+0x40]
c0025946:	50                   	push   eax
c0025947:	68 90 00 00 00       	push   0x90
c002594c:	6a 00                	push   0x0
c002594e:	53                   	push   ebx
c002594f:	e8 18 ae fd ff       	call   c000076c <memset>
c0025954:	8b 74 24 54          	mov    esi,DWORD PTR [esp+0x54]
c0025958:	b9 0c 00 00 00       	mov    ecx,0xc
c002595d:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c002595f:	8b 85 78 01 00 00    	mov    eax,DWORD PTR [ebp+0x178]
c0025965:	c6 43 02 a0          	mov    BYTE PTR [ebx+0x2],0xa0
c0025969:	89 83 80 00 00 00    	mov    DWORD PTR [ebx+0x80],eax
c002596f:	c6 43 07 40          	mov    BYTE PTR [ebx+0x7],0x40
c0025973:	8b 44 24 58          	mov    eax,DWORD PTR [esp+0x58]
c0025977:	48                   	dec    eax
c0025978:	25 ff ff 3f 00       	and    eax,0x3fffff
c002597d:	89 c1                	mov    ecx,eax
c002597f:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
c0025985:	25 00 00 c0 ff       	and    eax,0xffc00000
c002598a:	09 c8                	or     eax,ecx
c002598c:	89 83 8c 00 00 00    	mov    DWORD PTR [ebx+0x8c],eax
c0025992:	66 8b 03             	mov    ax,WORD PTR [ebx]
c0025995:	80 8b 8f 00 00 00 80 	or     BYTE PTR [ebx+0x8f],0x80
c002599c:	66 25 00 7f          	and    ax,0x7f00
c00259a0:	8b 54 24 2c          	mov    edx,DWORD PTR [esp+0x2c]
c00259a4:	66 0d 27 80          	or     ax,0x8027
c00259a8:	66 89 53 04          	mov    WORD PTR [ebx+0x4],dx
c00259ac:	66 89 03             	mov    WORD PTR [ebx],ax
c00259af:	89 d0                	mov    eax,edx
c00259b1:	c1 ea 18             	shr    edx,0x18
c00259b4:	c1 e8 10             	shr    eax,0x10
c00259b7:	88 53 08             	mov    BYTE PTR [ebx+0x8],dl
c00259ba:	88 43 06             	mov    BYTE PTR [ebx+0x6],al
c00259bd:	8a 44 24 28          	mov    al,BYTE PTR [esp+0x28]
c00259c1:	88 43 09             	mov    BYTE PTR [ebx+0x9],al
c00259c4:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]
c00259c8:	88 63 0a             	mov    BYTE PTR [ebx+0xa],ah
c00259cb:	8b 44 24 68          	mov    eax,DWORD PTR [esp+0x68]
c00259cf:	83 c4 10             	add    esp,0x10
c00259d2:	66 89 43 0c          	mov    WORD PTR [ebx+0xc],ax
c00259d6:	31 c0                	xor    eax,eax
c00259d8:	8b 5c 24 14          	mov    ebx,DWORD PTR [esp+0x14]
c00259dc:	8b 93 20 01 00 00    	mov    edx,DWORD PTR [ebx+0x120]
c00259e2:	80 e2 88             	and    dl,0x88
c00259e5:	74 0a                	je     c00259f1 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x16b>
c00259e7:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00259ec:	74 0a                	je     c00259f8 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x172>
c00259ee:	40                   	inc    eax
c00259ef:	eb eb                	jmp    c00259dc <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x156>
c00259f1:	3d 40 42 0f 00       	cmp    eax,0xf4240
c00259f6:	75 0f                	jne    c0025a07 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x181>
c00259f8:	83 ec 0c             	sub    esp,0xc
c00259fb:	68 f9 d8 02 c0       	push   0xc002d8f9
c0025a00:	e8 fc 4d ff ff       	call   c001a801 <Krnl::panic(char const*)>
c0025a05:	eb 3f                	jmp    c0025a46 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1c0>
c0025a07:	ba 01 00 00 00       	mov    edx,0x1
c0025a0c:	8a 4c 24 10          	mov    cl,BYTE PTR [esp+0x10]
c0025a10:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0025a14:	d3 e2                	shl    edx,cl
c0025a16:	c1 e0 07             	shl    eax,0x7
c0025a19:	89 93 38 01 00 00    	mov    DWORD PTR [ebx+0x138],edx
c0025a1f:	03 44 24 08          	add    eax,DWORD PTR [esp+0x8]
c0025a23:	8b 88 38 01 00 00    	mov    ecx,DWORD PTR [eax+0x138]
c0025a29:	85 ca                	test   edx,ecx
c0025a2b:	74 23                	je     c0025a50 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1ca>
c0025a2d:	8b 88 10 01 00 00    	mov    ecx,DWORD PTR [eax+0x110]
c0025a33:	0f ba e1 1e          	bt     ecx,0x1e
c0025a37:	73 ea                	jae    c0025a23 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x19d>
c0025a39:	83 ec 0c             	sub    esp,0xc
c0025a3c:	68 8b d9 02 c0       	push   0xc002d98b
c0025a41:	e8 01 d4 fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0025a46:	83 c4 10             	add    esp,0x10
c0025a49:	b8 01 00 00 00       	mov    eax,0x1
c0025a4e:	eb 36                	jmp    c0025a86 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x200>
c0025a50:	8b 80 10 01 00 00    	mov    eax,DWORD PTR [eax+0x110]
c0025a56:	0f ba e0 1e          	bt     eax,0x1e
c0025a5a:	73 0a                	jae    c0025a66 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1e0>
c0025a5c:	83 ec 0c             	sub    esp,0xc
c0025a5f:	68 9e d9 02 c0       	push   0xc002d99e
c0025a64:	eb db                	jmp    c0025a41 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1bb>
c0025a66:	83 7c 24 54 00       	cmp    DWORD PTR [esp+0x54],0x0
c0025a6b:	74 17                	je     c0025a84 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025a6d:	83 7c 24 48 00       	cmp    DWORD PTR [esp+0x48],0x0
c0025a72:	74 10                	je     c0025a84 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)+0x1fe>
c0025a74:	8b b5 7c 01 00 00    	mov    esi,DWORD PTR [ebp+0x17c]
c0025a7a:	8b 7c 24 54          	mov    edi,DWORD PTR [esp+0x54]
c0025a7e:	8b 4c 24 48          	mov    ecx,DWORD PTR [esp+0x48]
c0025a82:	f3 a4                	rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
c0025a84:	31 c0                	xor    eax,eax
c0025a86:	83 c4 2c             	add    esp,0x2c
c0025a89:	5b                   	pop    ebx
c0025a8a:	5e                   	pop    esi
c0025a8b:	5f                   	pop    edi
c0025a8c:	5d                   	pop    ebp
c0025a8d:	c3                   	ret    

c0025a8e <SATAPI::eject()>:
c0025a8e:	57                   	push   edi
c0025a8f:	b9 03 00 00 00       	mov    ecx,0x3
c0025a94:	53                   	push   ebx
c0025a95:	83 ec 14             	sub    esp,0x14
c0025a98:	8b 5c 24 20          	mov    ebx,DWORD PTR [esp+0x20]
c0025a9c:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025aa0:	fc                   	cld    
c0025aa1:	31 c0                	xor    eax,eax
c0025aa3:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025aa5:	c6 44 24 04 1b       	mov    BYTE PTR [esp+0x4],0x1b
c0025aaa:	c6 44 24 08 02       	mov    BYTE PTR [esp+0x8],0x2
c0025aaf:	50                   	push   eax
c0025ab0:	6a 00                	push   0x0
c0025ab2:	6a 00                	push   0x0
c0025ab4:	6a 00                	push   0x0
c0025ab6:	6a 00                	push   0x0
c0025ab8:	6a 02                	push   0x2
c0025aba:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025abe:	50                   	push   eax
c0025abf:	53                   	push   ebx
c0025ac0:	e8 c1 fd ff ff       	call   c0025886 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025ac5:	83 c4 14             	add    esp,0x14
c0025ac8:	53                   	push   ebx
c0025ac9:	e8 6e fd ff ff       	call   c002583c <SATAPI::diskRemoved()>
c0025ace:	83 c4 24             	add    esp,0x24
c0025ad1:	31 c0                	xor    eax,eax
c0025ad3:	5b                   	pop    ebx
c0025ad4:	5f                   	pop    edi
c0025ad5:	c3                   	ret    

c0025ad6 <SATAPI::detectMedia()>:
c0025ad6:	56                   	push   esi
c0025ad7:	53                   	push   ebx
c0025ad8:	83 ec 28             	sub    esp,0x28
c0025adb:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025adf:	6a 0c                	push   0xc
c0025ae1:	6a 00                	push   0x0
c0025ae3:	8d 74 24 0e          	lea    esi,[esp+0xe]
c0025ae7:	56                   	push   esi
c0025ae8:	e8 7f ac fd ff       	call   c000076c <memset>
c0025aed:	83 c4 0c             	add    esp,0xc
c0025af0:	6a 00                	push   0x0
c0025af2:	6a 00                	push   0x0
c0025af4:	6a 00                	push   0x0
c0025af6:	6a 00                	push   0x0
c0025af8:	6a 00                	push   0x0
c0025afa:	56                   	push   esi
c0025afb:	53                   	push   ebx
c0025afc:	e8 85 fd ff ff       	call   c0025886 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b01:	83 c4 1c             	add    esp,0x1c
c0025b04:	6a 0c                	push   0xc
c0025b06:	6a 00                	push   0x0
c0025b08:	56                   	push   esi
c0025b09:	e8 5e ac fd ff       	call   c000076c <memset>
c0025b0e:	c6 44 24 12 03       	mov    BYTE PTR [esp+0x12],0x3
c0025b13:	c6 44 24 16 12       	mov    BYTE PTR [esp+0x16],0x12
c0025b18:	83 c4 0c             	add    esp,0xc
c0025b1b:	6a 01                	push   0x1
c0025b1d:	8d 44 24 16          	lea    eax,[esp+0x16]
c0025b21:	50                   	push   eax
c0025b22:	6a 00                	push   0x0
c0025b24:	6a 00                	push   0x0
c0025b26:	6a 12                	push   0x12
c0025b28:	56                   	push   esi
c0025b29:	53                   	push   ebx
c0025b2a:	e8 57 fd ff ff       	call   c0025886 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025b2f:	8a 44 24 2e          	mov    al,BYTE PTR [esp+0x2e]
c0025b33:	83 c4 20             	add    esp,0x20
c0025b36:	83 e0 7f             	and    eax,0x7f
c0025b39:	3c 70                	cmp    al,0x70
c0025b3b:	74 15                	je     c0025b52 <SATAPI::detectMedia()+0x7c>
c0025b3d:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b44:	75 0c                	jne    c0025b52 <SATAPI::detectMedia()+0x7c>
c0025b46:	83 ec 0c             	sub    esp,0xc
c0025b49:	53                   	push   ebx
c0025b4a:	e8 09 fd ff ff       	call   c0025858 <SATAPI::diskInserted()>
c0025b4f:	83 c4 10             	add    esp,0x10
c0025b52:	8a 44 24 10          	mov    al,BYTE PTR [esp+0x10]
c0025b56:	83 e0 0f             	and    eax,0xf
c0025b59:	3c 02                	cmp    al,0x2
c0025b5b:	75 1b                	jne    c0025b78 <SATAPI::detectMedia()+0xa2>
c0025b5d:	80 7c 24 1a 3a       	cmp    BYTE PTR [esp+0x1a],0x3a
c0025b62:	75 2d                	jne    c0025b91 <SATAPI::detectMedia()+0xbb>
c0025b64:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b6b:	74 24                	je     c0025b91 <SATAPI::detectMedia()+0xbb>
c0025b6d:	83 ec 0c             	sub    esp,0xc
c0025b70:	53                   	push   ebx
c0025b71:	e8 c6 fc ff ff       	call   c002583c <SATAPI::diskRemoved()>
c0025b76:	eb 16                	jmp    c0025b8e <SATAPI::detectMedia()+0xb8>
c0025b78:	84 c0                	test   al,al
c0025b7a:	75 15                	jne    c0025b91 <SATAPI::detectMedia()+0xbb>
c0025b7c:	80 bb 74 01 00 00 00 	cmp    BYTE PTR [ebx+0x174],0x0
c0025b83:	75 0c                	jne    c0025b91 <SATAPI::detectMedia()+0xbb>
c0025b85:	83 ec 0c             	sub    esp,0xc
c0025b88:	53                   	push   ebx
c0025b89:	e8 ca fc ff ff       	call   c0025858 <SATAPI::diskInserted()>
c0025b8e:	83 c4 10             	add    esp,0x10
c0025b91:	83 c4 24             	add    esp,0x24
c0025b94:	5b                   	pop    ebx
c0025b95:	5e                   	pop    esi
c0025b96:	c3                   	ret    
c0025b97:	90                   	nop

c0025b98 <SATAPI::open(int, int, void*)>:
c0025b98:	56                   	push   esi
c0025b99:	53                   	push   ebx
c0025b9a:	50                   	push   eax
c0025b9b:	8b 5c 24 10          	mov    ebx,DWORD PTR [esp+0x10]
c0025b9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0025ba3:	c7 83 60 01 00 00 00 00 01 00 	mov    DWORD PTR [ebx+0x160],0x10000
c0025bad:	89 83 70 01 00 00    	mov    DWORD PTR [ebx+0x170],eax
c0025bb3:	c7 83 64 01 00 00 00 00 00 00 	mov    DWORD PTR [ebx+0x164],0x0
c0025bbd:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025bc1:	c7 83 5c 01 00 00 00 08 00 00 	mov    DWORD PTR [ebx+0x15c],0x800
c0025bcb:	89 83 6c 01 00 00    	mov    DWORD PTR [ebx+0x16c],eax
c0025bd1:	c6 83 68 01 00 00 01 	mov    BYTE PTR [ebx+0x168],0x1
c0025bd8:	e8 37 a3 fe ff       	call   c000ff14 <Phys::allocatePage()>
c0025bdd:	89 c6                	mov    esi,eax
c0025bdf:	89 83 78 01 00 00    	mov    DWORD PTR [ebx+0x178],eax
c0025be5:	81 c6 00 10 00 00    	add    esi,0x1000
c0025beb:	e8 24 a3 fe ff       	call   c000ff14 <Phys::allocatePage()>
c0025bf0:	39 c6                	cmp    esi,eax
c0025bf2:	74 10                	je     c0025c04 <SATAPI::open(int, int, void*)+0x6c>
c0025bf4:	83 ec 0c             	sub    esp,0xc
c0025bf7:	68 b3 d9 02 c0       	push   0xc002d9b3
c0025bfc:	e8 00 4c ff ff       	call   c001a801 <Krnl::panic(char const*)>
c0025c01:	83 c4 10             	add    esp,0x10
c0025c04:	83 ec 0c             	sub    esp,0xc
c0025c07:	6a 02                	push   0x2
c0025c09:	e8 33 be fe ff       	call   c0011a41 <Virt::allocateKernelVirtualPages(int)>
c0025c0e:	89 83 7c 01 00 00    	mov    DWORD PTR [ebx+0x17c],eax
c0025c14:	6a 03                	push   0x3
c0025c16:	50                   	push   eax
c0025c17:	ff b3 78 01 00 00    	push   DWORD PTR [ebx+0x178]
c0025c1d:	ff 35 d0 ef 02 c0    	push   DWORD PTR ds:0xc002efd0
c0025c23:	e8 50 c6 fe ff       	call   c0012278 <VAS::mapPage(unsigned long, unsigned long, int)>
c0025c28:	c6 83 74 01 00 00 00 	mov    BYTE PTR [ebx+0x174],0x0
c0025c2f:	83 c4 14             	add    esp,0x14
c0025c32:	53                   	push   ebx
c0025c33:	e8 9e fe ff ff       	call   c0025ad6 <SATAPI::detectMedia()>
c0025c38:	83 c4 14             	add    esp,0x14
c0025c3b:	31 c0                	xor    eax,eax
c0025c3d:	5b                   	pop    ebx
c0025c3e:	5e                   	pop    esi
c0025c3f:	c3                   	ret    

c0025c40 <SATAPI::read(unsigned long long, int, void*)>:
c0025c40:	55                   	push   ebp
c0025c41:	57                   	push   edi
c0025c42:	56                   	push   esi
c0025c43:	53                   	push   ebx
c0025c44:	83 ec 1c             	sub    esp,0x1c
c0025c47:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c0025c4b:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0025c4f:	8b 74 24 38          	mov    esi,DWORD PTR [esp+0x38]
c0025c53:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025c5a:	74 19                	je     c0025c75 <SATAPI::read(unsigned long long, int, void*)+0x35>
c0025c5c:	83 7c 24 3c 04       	cmp    DWORD PTR [esp+0x3c],0x4
c0025c61:	7e 2e                	jle    c0025c91 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025c63:	83 ec 0c             	sub    esp,0xc
c0025c66:	68 c9 d9 02 c0       	push   0xc002d9c9
c0025c6b:	e8 91 4b ff ff       	call   c001a801 <Krnl::panic(char const*)>
c0025c70:	83 c4 10             	add    esp,0x10
c0025c73:	eb 1c                	jmp    c0025c91 <SATAPI::read(unsigned long long, int, void*)+0x51>
c0025c75:	83 ec 0c             	sub    esp,0xc
c0025c78:	55                   	push   ebp
c0025c79:	e8 58 fe ff ff       	call   c0025ad6 <SATAPI::detectMedia()>
c0025c7e:	83 c4 10             	add    esp,0x10
c0025c81:	b8 02 00 00 00       	mov    eax,0x2
c0025c86:	80 bd 74 01 00 00 00 	cmp    BYTE PTR [ebp+0x174],0x0
c0025c8d:	75 cd                	jne    c0025c5c <SATAPI::read(unsigned long long, int, void*)+0x1c>
c0025c8f:	eb 49                	jmp    c0025cda <SATAPI::read(unsigned long long, int, void*)+0x9a>
c0025c91:	8d 7c 24 04          	lea    edi,[esp+0x4]
c0025c95:	b9 03 00 00 00       	mov    ecx,0x3
c0025c9a:	fc                   	cld    
c0025c9b:	31 c0                	xor    eax,eax
c0025c9d:	f3 ab                	rep stos DWORD PTR es:[edi],eax
c0025c9f:	c6 44 24 04 a8       	mov    BYTE PTR [esp+0x4],0xa8
c0025ca4:	89 d8                	mov    eax,ebx
c0025ca6:	86 e0                	xchg   al,ah
c0025ca8:	c1 c0 10             	rol    eax,0x10
c0025cab:	86 e0                	xchg   al,ah
c0025cad:	89 44 24 06          	mov    DWORD PTR [esp+0x6],eax
c0025cb1:	8a 44 24 3c          	mov    al,BYTE PTR [esp+0x3c]
c0025cb5:	88 44 24 0d          	mov    BYTE PTR [esp+0xd],al
c0025cb9:	50                   	push   eax
c0025cba:	ff 74 24 40          	push   DWORD PTR [esp+0x40]
c0025cbe:	ff 74 24 48          	push   DWORD PTR [esp+0x48]
c0025cc2:	56                   	push   esi
c0025cc3:	53                   	push   ebx
c0025cc4:	8b 44 24 50          	mov    eax,DWORD PTR [esp+0x50]
c0025cc8:	c1 e0 0b             	shl    eax,0xb
c0025ccb:	50                   	push   eax
c0025ccc:	8d 44 24 1c          	lea    eax,[esp+0x1c]
c0025cd0:	50                   	push   eax
c0025cd1:	55                   	push   ebp
c0025cd2:	e8 af fb ff ff       	call   c0025886 <SATAPI::sendPacket(unsigned char*, int, unsigned long long, unsigned short*, int)>
c0025cd7:	83 c4 20             	add    esp,0x20
c0025cda:	83 c4 1c             	add    esp,0x1c
c0025cdd:	5b                   	pop    ebx
c0025cde:	5e                   	pop    esi
c0025cdf:	5f                   	pop    edi
c0025ce0:	5d                   	pop    ebp
c0025ce1:	c3                   	ret    

c0025ce2 <AVX::open(int, int, void*)>:
c0025ce2:	83 ec 0c             	sub    esp,0xc
c0025ce5:	e8 3e 11 00 00       	call   c0026e28 <avxInit>
c0025cea:	b8 00 00 00 00       	mov    eax,0x0
c0025cef:	83 c4 0c             	add    esp,0xc
c0025cf2:	c3                   	ret    
c0025cf3:	90                   	nop

c0025cf4 <AVX::close(int, int, void*)>:
c0025cf4:	83 ec 0c             	sub    esp,0xc
c0025cf7:	e8 2d 11 00 00       	call   c0026e29 <avxClose>
c0025cfc:	b8 00 00 00 00       	mov    eax,0x0
c0025d01:	83 c4 0c             	add    esp,0xc
c0025d04:	c3                   	ret    
c0025d05:	90                   	nop

c0025d06 <AVX::available()>:
c0025d06:	83 ec 0c             	sub    esp,0xc
c0025d09:	e8 12 11 00 00       	call   c0026e20 <avxDetect>
c0025d0e:	85 c0                	test   eax,eax
c0025d10:	0f 95 c0             	setne  al
c0025d13:	83 c4 0c             	add    esp,0xc
c0025d16:	c3                   	ret    
c0025d17:	90                   	nop

c0025d18 <AVX::save(void*)>:
c0025d18:	83 ec 0c             	sub    esp,0xc
c0025d1b:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d1f:	83 ec 0c             	sub    esp,0xc
c0025d22:	50                   	push   eax
c0025d23:	e8 fe 10 00 00       	call   c0026e26 <avxSave>
c0025d28:	83 c4 10             	add    esp,0x10
c0025d2b:	90                   	nop
c0025d2c:	83 c4 0c             	add    esp,0xc
c0025d2f:	c3                   	ret    

c0025d30 <AVX::load(void*)>:
c0025d30:	83 ec 0c             	sub    esp,0xc
c0025d33:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025d37:	83 ec 0c             	sub    esp,0xc
c0025d3a:	50                   	push   eax
c0025d3b:	e8 e7 10 00 00       	call   c0026e27 <avxLoad>
c0025d40:	83 c4 10             	add    esp,0x10
c0025d43:	90                   	nop
c0025d44:	83 c4 0c             	add    esp,0xc
c0025d47:	c3                   	ret    

c0025d48 <AVX::AVX()>:
c0025d48:	83 ec 0c             	sub    esp,0xc
c0025d4b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d4f:	83 ec 08             	sub    esp,0x8
c0025d52:	68 2c da 02 c0       	push   0xc002da2c
c0025d57:	50                   	push   eax
c0025d58:	e8 1d ea fe ff       	call   c001477a <FPU::FPU(char const*)>
c0025d5d:	83 c4 10             	add    esp,0x10
c0025d60:	ba 3c da 02 c0       	mov    edx,0xc002da3c
c0025d65:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025d69:	89 10                	mov    DWORD PTR [eax],edx
c0025d6b:	90                   	nop
c0025d6c:	83 c4 0c             	add    esp,0xc
c0025d6f:	c3                   	ret    

c0025d70 <MMX::available()>:
c0025d70:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0025d75:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025d7b:	83 e0 20             	and    eax,0x20
c0025d7e:	84 c0                	test   al,al
c0025d80:	0f 95 c0             	setne  al
c0025d83:	c3                   	ret    

c0025d84 <MMX::open(int, int, void*)>:
c0025d84:	83 ec 0c             	sub    esp,0xc
c0025d87:	e8 26 11 00 00       	call   c0026eb2 <x87Init>
c0025d8c:	b8 00 00 00 00       	mov    eax,0x0
c0025d91:	83 c4 0c             	add    esp,0xc
c0025d94:	c3                   	ret    
c0025d95:	90                   	nop

c0025d96 <MMX::close(int, int, void*)>:
c0025d96:	83 ec 0c             	sub    esp,0xc
c0025d99:	e8 2e 11 00 00       	call   c0026ecc <x87Close>
c0025d9e:	b8 00 00 00 00       	mov    eax,0x0
c0025da3:	83 c4 0c             	add    esp,0xc
c0025da6:	c3                   	ret    
c0025da7:	90                   	nop

c0025da8 <MMX::save(void*)>:
c0025da8:	83 ec 0c             	sub    esp,0xc
c0025dab:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025daf:	83 ec 0c             	sub    esp,0xc
c0025db2:	50                   	push   eax
c0025db3:	e8 e9 10 00 00       	call   c0026ea1 <x87Save>
c0025db8:	83 c4 10             	add    esp,0x10
c0025dbb:	90                   	nop
c0025dbc:	83 c4 0c             	add    esp,0xc
c0025dbf:	c3                   	ret    

c0025dc0 <MMX::load(void*)>:
c0025dc0:	83 ec 0c             	sub    esp,0xc
c0025dc3:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025dc7:	83 ec 0c             	sub    esp,0xc
c0025dca:	50                   	push   eax
c0025dcb:	e8 da 10 00 00       	call   c0026eaa <x87Load>
c0025dd0:	83 c4 10             	add    esp,0x10
c0025dd3:	90                   	nop
c0025dd4:	83 c4 0c             	add    esp,0xc
c0025dd7:	c3                   	ret    

c0025dd8 <MMX::MMX()>:
c0025dd8:	83 ec 0c             	sub    esp,0xc
c0025ddb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025ddf:	83 ec 08             	sub    esp,0x8
c0025de2:	68 6c da 02 c0       	push   0xc002da6c
c0025de7:	50                   	push   eax
c0025de8:	e8 8d e9 fe ff       	call   c001477a <FPU::FPU(char const*)>
c0025ded:	83 c4 10             	add    esp,0x10
c0025df0:	ba 7c da 02 c0       	mov    edx,0xc002da7c
c0025df5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025df9:	89 10                	mov    DWORD PTR [eax],edx
c0025dfb:	90                   	nop
c0025dfc:	83 c4 0c             	add    esp,0xc
c0025dff:	c3                   	ret    

c0025e00 <SSE::open(int, int, void*)>:
c0025e00:	83 ec 0c             	sub    esp,0xc
c0025e03:	e8 5c 10 00 00       	call   c0026e64 <sseInit>
c0025e08:	b8 00 00 00 00       	mov    eax,0x0
c0025e0d:	83 c4 0c             	add    esp,0xc
c0025e10:	c3                   	ret    
c0025e11:	90                   	nop

c0025e12 <SSE::close(int, int, void*)>:
c0025e12:	83 ec 0c             	sub    esp,0xc
c0025e15:	e8 5a 10 00 00       	call   c0026e74 <sseClose>
c0025e1a:	b8 00 00 00 00       	mov    eax,0x0
c0025e1f:	83 c4 0c             	add    esp,0xc
c0025e22:	c3                   	ret    
c0025e23:	90                   	nop

c0025e24 <SSE::available()>:
c0025e24:	83 ec 1c             	sub    esp,0x1c
c0025e27:	e8 14 10 00 00       	call   c0026e40 <absolutelyNoChanceInHell>
c0025e2c:	85 c0                	test   eax,eax
c0025e2e:	0f 95 c0             	setne  al
c0025e31:	88 44 24 0f          	mov    BYTE PTR [esp+0xf],al
c0025e35:	8a 44 24 0f          	mov    al,BYTE PTR [esp+0xf]
c0025e39:	83 c4 1c             	add    esp,0x1c
c0025e3c:	c3                   	ret    
c0025e3d:	90                   	nop

c0025e3e <SSE::save(void*)>:
c0025e3e:	83 ec 0c             	sub    esp,0xc
c0025e41:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e45:	83 ec 0c             	sub    esp,0xc
c0025e48:	50                   	push   eax
c0025e49:	e8 0a 10 00 00       	call   c0026e58 <sseSave>
c0025e4e:	83 c4 10             	add    esp,0x10
c0025e51:	90                   	nop
c0025e52:	83 c4 0c             	add    esp,0xc
c0025e55:	c3                   	ret    

c0025e56 <SSE::load(void*)>:
c0025e56:	83 ec 0c             	sub    esp,0xc
c0025e59:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025e5d:	83 ec 0c             	sub    esp,0xc
c0025e60:	50                   	push   eax
c0025e61:	e8 f8 0f 00 00       	call   c0026e5e <sseLoad>
c0025e66:	83 c4 10             	add    esp,0x10
c0025e69:	90                   	nop
c0025e6a:	83 c4 0c             	add    esp,0xc
c0025e6d:	c3                   	ret    

c0025e6e <SSE::SSE()>:
c0025e6e:	83 ec 0c             	sub    esp,0xc
c0025e71:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e75:	83 ec 08             	sub    esp,0x8
c0025e78:	68 ac da 02 c0       	push   0xc002daac
c0025e7d:	50                   	push   eax
c0025e7e:	e8 f7 e8 fe ff       	call   c001477a <FPU::FPU(char const*)>
c0025e83:	83 c4 10             	add    esp,0x10
c0025e86:	ba bc da 02 c0       	mov    edx,0xc002dabc
c0025e8b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025e8f:	89 10                	mov    DWORD PTR [eax],edx
c0025e91:	90                   	nop
c0025e92:	83 c4 0c             	add    esp,0xc
c0025e95:	c3                   	ret    

c0025e96 <x87::open(int, int, void*)>:
c0025e96:	83 ec 0c             	sub    esp,0xc
c0025e99:	e8 14 10 00 00       	call   c0026eb2 <x87Init>
c0025e9e:	b8 00 00 00 00       	mov    eax,0x0
c0025ea3:	83 c4 0c             	add    esp,0xc
c0025ea6:	c3                   	ret    
c0025ea7:	90                   	nop

c0025ea8 <x87::close(int, int, void*)>:
c0025ea8:	83 ec 0c             	sub    esp,0xc
c0025eab:	e8 1c 10 00 00       	call   c0026ecc <x87Close>
c0025eb0:	b8 00 00 00 00       	mov    eax,0x0
c0025eb5:	83 c4 0c             	add    esp,0xc
c0025eb8:	c3                   	ret    
c0025eb9:	90                   	nop

c0025eba <x87::available()>:
c0025eba:	83 ec 0c             	sub    esp,0xc
c0025ebd:	e8 c4 0f 00 00       	call   c0026e86 <x87Detect>
c0025ec2:	85 c0                	test   eax,eax
c0025ec4:	0f 95 c0             	setne  al
c0025ec7:	83 c4 0c             	add    esp,0xc
c0025eca:	c3                   	ret    
c0025ecb:	90                   	nop

c0025ecc <x87::save(void*)>:
c0025ecc:	83 ec 0c             	sub    esp,0xc
c0025ecf:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025ed3:	83 ec 0c             	sub    esp,0xc
c0025ed6:	50                   	push   eax
c0025ed7:	e8 c5 0f 00 00       	call   c0026ea1 <x87Save>
c0025edc:	83 c4 10             	add    esp,0x10
c0025edf:	90                   	nop
c0025ee0:	83 c4 0c             	add    esp,0xc
c0025ee3:	c3                   	ret    

c0025ee4 <x87::load(void*)>:
c0025ee4:	83 ec 0c             	sub    esp,0xc
c0025ee7:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0025eeb:	83 ec 0c             	sub    esp,0xc
c0025eee:	50                   	push   eax
c0025eef:	e8 b6 0f 00 00       	call   c0026eaa <x87Load>
c0025ef4:	83 c4 10             	add    esp,0x10
c0025ef7:	90                   	nop
c0025ef8:	83 c4 0c             	add    esp,0xc
c0025efb:	c3                   	ret    

c0025efc <x87::x87()>:
c0025efc:	83 ec 0c             	sub    esp,0xc
c0025eff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f03:	83 ec 08             	sub    esp,0x8
c0025f06:	68 ec da 02 c0       	push   0xc002daec
c0025f0b:	50                   	push   eax
c0025f0c:	e8 69 e8 fe ff       	call   c001477a <FPU::FPU(char const*)>
c0025f11:	83 c4 10             	add    esp,0x10
c0025f14:	ba fc da 02 c0       	mov    edx,0xc002dafc
c0025f19:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0025f1d:	89 10                	mov    DWORD PTR [eax],edx
c0025f1f:	90                   	nop
c0025f20:	83 c4 0c             	add    esp,0xc
c0025f23:	c3                   	ret    

c0025f24 <APIC::disable()>:
c0025f24:	90                   	nop
c0025f25:	c3                   	ret    

c0025f26 <APIC::close(int, int, void*)>:
c0025f26:	55                   	push   ebp
c0025f27:	89 e5                	mov    ebp,esp
c0025f29:	83 ec 08             	sub    esp,0x8
c0025f2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025f2f:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f31:	83 c0 3c             	add    eax,0x3c
c0025f34:	8b 00                	mov    eax,DWORD PTR [eax]
c0025f36:	83 ec 0c             	sub    esp,0xc
c0025f39:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025f3c:	ff d0                	call   eax
c0025f3e:	83 c4 10             	add    esp,0x10
c0025f41:	b8 00 00 00 00       	mov    eax,0x0
c0025f46:	c9                   	leave  
c0025f47:	c3                   	ret    

c0025f48 <IOAPIC::close(int, int, void*)>:
c0025f48:	b8 00 00 00 00       	mov    eax,0x0
c0025f4d:	c3                   	ret    

c0025f4e <APIC::io_wait()>:
c0025f4e:	eb 00                	jmp    c0025f50 <APIC::io_wait()+0x2>
c0025f50:	eb 00                	jmp    c0025f52 <APIC::io_wait()+0x4>
c0025f52:	90                   	nop
c0025f53:	c3                   	ret    

c0025f54 <APIC::getBase()>:
c0025f54:	55                   	push   ebp
c0025f55:	89 e5                	mov    ebp,esp
c0025f57:	83 ec 18             	sub    esp,0x18
c0025f5a:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0025f5f:	8a 80 e8 01 00 00    	mov    al,BYTE PTR [eax+0x1e8]
c0025f65:	83 e0 08             	and    eax,0x8
c0025f68:	84 c0                	test   al,al
c0025f6a:	75 07                	jne    c0025f73 <APIC::getBase()+0x1f>
c0025f6c:	b8 00 00 00 00       	mov    eax,0x0
c0025f71:	eb 21                	jmp    c0025f94 <APIC::getBase()+0x40>
c0025f73:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0025f78:	83 ec 08             	sub    esp,0x8
c0025f7b:	6a 1b                	push   0x1b
c0025f7d:	50                   	push   eax
c0025f7e:	e8 cb 8e fe ff       	call   c000ee4e <Computer::rdmsr(unsigned int)>
c0025f83:	83 c4 10             	add    esp,0x10
c0025f86:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0025f89:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0025f8c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0025f8f:	25 00 f0 ff ff       	and    eax,0xfffff000
c0025f94:	c9                   	leave  
c0025f95:	c3                   	ret    

c0025f96 <APIC::eoi(unsigned char)>:
c0025f96:	55                   	push   ebp
c0025f97:	89 e5                	mov    ebp,esp
c0025f99:	83 ec 28             	sub    esp,0x28
c0025f9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0025f9f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c0025fa2:	83 ec 0c             	sub    esp,0xc
c0025fa5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fa8:	e8 a7 ff ff ff       	call   c0025f54 <APIC::getBase()>
c0025fad:	83 c4 10             	add    esp,0x10
c0025fb0:	05 b0 00 00 00       	add    eax,0xb0
c0025fb5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0025fb8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c0025fbb:	c7 00 01 00 00 00    	mov    DWORD PTR [eax],0x1
c0025fc1:	90                   	nop
c0025fc2:	c9                   	leave  
c0025fc3:	c3                   	ret    

c0025fc4 <APIC::open(int, int, void*)>:
c0025fc4:	55                   	push   ebp
c0025fc5:	89 e5                	mov    ebp,esp
c0025fc7:	57                   	push   edi
c0025fc8:	56                   	push   esi
c0025fc9:	53                   	push   ebx
c0025fca:	83 ec 2c             	sub    esp,0x2c
c0025fcd:	83 ec 0c             	sub    esp,0xc
c0025fd0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0025fd3:	e8 7c ff ff ff       	call   c0025f54 <APIC::getBase()>
c0025fd8:	83 c4 10             	add    esp,0x10
c0025fdb:	89 c2                	mov    edx,eax
c0025fdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0025fe0:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0025fe6:	0f b6 f8             	movzx  edi,al
c0025fe9:	89 d0                	mov    eax,edx
c0025feb:	ba 00 00 00 00       	mov    edx,0x0
c0025ff0:	89 c1                	mov    ecx,eax
c0025ff2:	80 e5 ff             	and    ch,0xff
c0025ff5:	89 cb                	mov    ebx,ecx
c0025ff7:	0f b6 f2             	movzx  esi,dl
c0025ffa:	89 d8                	mov    eax,ebx
c0025ffc:	89 f2                	mov    edx,esi
c0025ffe:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026001:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026004:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026008:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c002600c:	83 e0 00             	and    eax,0x0
c002600f:	09 d0                	or     eax,edx
c0026011:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026015:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026018:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c002601e:	8d 50 01             	lea    edx,[eax+0x1]
c0026021:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026024:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002602a:	0f b6 d0             	movzx  edx,al
c002602d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026030:	83 c2 08             	add    edx,0x8
c0026033:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026037:	0f b6 c9             	movzx  ecx,cl
c002603a:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026040:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026044:	83 ec 0c             	sub    esp,0xc
c0026047:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002604a:	e8 05 ff ff ff       	call   c0025f54 <APIC::getBase()>
c002604f:	83 c4 10             	add    esp,0x10
c0026052:	05 f0 00 00 00       	add    eax,0xf0
c0026057:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c002605a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002605d:	8b 00                	mov    eax,DWORD PTR [eax]
c002605f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0026062:	81 4d dc 00 01 00 00 	or     DWORD PTR [ebp-0x24],0x100
c0026069:	81 4d dc ff 00 00 00 	or     DWORD PTR [ebp-0x24],0xff
c0026070:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026073:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026076:	89 10                	mov    DWORD PTR [eax],edx
c0026078:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
c002607f:	a1 30 17 03 c0       	mov    eax,ds:0xc0031730
c0026084:	39 45 e4             	cmp    DWORD PTR [ebp-0x1c],eax
c0026087:	7d 7c                	jge    c0026105 <APIC::open(int, int, void*)+0x141>
c0026089:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002608c:	8b 04 85 40 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8c0]
c0026093:	88 45 db             	mov    BYTE PTR [ebp-0x25],al
c0026096:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0026099:	8b 04 85 40 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8c0]
c00260a0:	c1 e8 08             	shr    eax,0x8
c00260a3:	66 89 45 d8          	mov    WORD PTR [ebp-0x28],ax
c00260a7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00260aa:	8b 04 85 40 17 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffce8c0]
c00260b1:	c1 e8 18             	shr    eax,0x18
c00260b4:	88 45 d7             	mov    BYTE PTR [ebp-0x29],al
c00260b7:	80 7d db ff          	cmp    BYTE PTR [ebp-0x25],0xff
c00260bb:	75 40                	jne    c00260fd <APIC::open(int, int, void*)+0x139>
c00260bd:	83 ec 0c             	sub    esp,0xc
c00260c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00260c3:	e8 8c fe ff ff       	call   c0025f54 <APIC::getBase()>
c00260c8:	83 c4 10             	add    esp,0x10
c00260cb:	80 7d d7 01          	cmp    BYTE PTR [ebp-0x29],0x1
c00260cf:	75 07                	jne    c00260d8 <APIC::open(int, int, void*)+0x114>
c00260d1:	ba 60 03 00 00       	mov    edx,0x360
c00260d6:	eb 05                	jmp    c00260dd <APIC::open(int, int, void*)+0x119>
c00260d8:	ba 50 03 00 00       	mov    edx,0x350
c00260dd:	01 d0                	add    eax,edx
c00260df:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00260e2:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00260e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00260e7:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c00260ea:	81 65 cc 00 ff ff ff 	and    DWORD PTR [ebp-0x34],0xffffff00
c00260f1:	83 4d cc 02          	or     DWORD PTR [ebp-0x34],0x2
c00260f5:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00260f8:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00260fb:	89 10                	mov    DWORD PTR [eax],edx
c00260fd:	ff 45 e4             	inc    DWORD PTR [ebp-0x1c]
c0026100:	e9 7a ff ff ff       	jmp    c002607f <APIC::open(int, int, void*)+0xbb>
c0026105:	b8 00 00 00 00       	mov    eax,0x0
c002610a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002610d:	5b                   	pop    ebx
c002610e:	5e                   	pop    esi
c002610f:	5f                   	pop    edi
c0026110:	5d                   	pop    ebp
c0026111:	c3                   	ret    

c0026112 <IOAPIC::IOAPIC()>:
c0026112:	83 ec 0c             	sub    esp,0xc
c0026115:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026119:	83 ec 08             	sub    esp,0x8
c002611c:	68 2c db 02 c0       	push   0xc002db2c
c0026121:	50                   	push   eax
c0026122:	e8 33 e3 fe ff       	call   c001445a <Device::Device(char const*)>
c0026127:	83 c4 10             	add    esp,0x10
c002612a:	ba 54 dc 02 c0       	mov    edx,0xc002dc54
c002612f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026133:	89 10                	mov    DWORD PTR [eax],edx
c0026135:	90                   	nop
c0026136:	83 c4 0c             	add    esp,0xc
c0026139:	c3                   	ret    

c002613a <APIC::APIC()>:
c002613a:	53                   	push   ebx
c002613b:	83 ec 18             	sub    esp,0x18
c002613e:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c0026142:	83 ec 08             	sub    esp,0x8
c0026145:	68 34 db 02 c0       	push   0xc002db34
c002614a:	50                   	push   eax
c002614b:	e8 84 ea fe ff       	call   c0014bd4 <InterruptController::InterruptController(char const*)>
c0026150:	83 c4 10             	add    esp,0x10
c0026153:	ba 0c dc 02 c0       	mov    edx,0xc002dc0c
c0026158:	8b 44 24 20          	mov    eax,DWORD PTR [esp+0x20]
c002615c:	89 10                	mov    DWORD PTR [eax],edx
c002615e:	a0 00 32 03 c0       	mov    al,ds:0xc0033200
c0026163:	83 f0 01             	xor    eax,0x1
c0026166:	84 c0                	test   al,al
c0026168:	0f 84 a1 00 00 00    	je     c002620f <APIC::APIC()+0xd5>
c002616e:	c6 44 24 0f 00       	mov    BYTE PTR [esp+0xf],0x0
c0026173:	a0 e0 17 03 c0       	mov    al,ds:0xc00317e0
c0026178:	38 44 24 0f          	cmp    BYTE PTR [esp+0xf],al
c002617c:	0f 83 86 00 00 00    	jae    c0026208 <APIC::APIC()+0xce>
c0026182:	c7 44 24 04 68 01 00 00 	mov    DWORD PTR [esp+0x4],0x168
c002618a:	83 ec 0c             	sub    esp,0xc
c002618d:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c0026191:	e8 12 97 fe ff       	call   c000f8a8 <malloc>
c0026196:	83 c4 10             	add    esp,0x10
c0026199:	89 c3                	mov    ebx,eax
c002619b:	83 ec 0c             	sub    esp,0xc
c002619e:	53                   	push   ebx
c002619f:	e8 6e ff ff ff       	call   c0026112 <IOAPIC::IOAPIC()>
c00261a4:	83 c4 10             	add    esp,0x10
c00261a7:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
c00261ab:	0f b6 44 24 0f       	movzx  eax,BYTE PTR [esp+0xf]
c00261b0:	8b 54 24 08          	mov    edx,DWORD PTR [esp+0x8]
c00261b4:	89 14 85 e0 31 03 c0 	mov    DWORD PTR [eax*4-0x3ffcce20],edx
c00261bb:	a1 c0 31 03 c0       	mov    eax,ds:0xc00331c0
c00261c0:	40                   	inc    eax
c00261c1:	a3 c0 31 03 c0       	mov    ds:0xc00331c0,eax
c00261c6:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c00261cb:	8b 80 e4 01 00 00    	mov    eax,DWORD PTR [eax+0x1e4]
c00261d1:	83 ec 08             	sub    esp,0x8
c00261d4:	ff 74 24 10          	push   DWORD PTR [esp+0x10]
c00261d8:	50                   	push   eax
c00261d9:	e8 8c e0 fe ff       	call   c001426a <Device::addChild(Device*)>
c00261de:	83 c4 10             	add    esp,0x10
c00261e1:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00261e5:	8b 00                	mov    eax,DWORD PTR [eax]
c00261e7:	83 c0 08             	add    eax,0x8
c00261ea:	8b 00                	mov    eax,DWORD PTR [eax]
c00261ec:	0f b6 54 24 0f       	movzx  edx,BYTE PTR [esp+0xf]
c00261f1:	6a 00                	push   0x0
c00261f3:	6a 00                	push   0x0
c00261f5:	52                   	push   edx
c00261f6:	ff 74 24 14          	push   DWORD PTR [esp+0x14]
c00261fa:	ff d0                	call   eax
c00261fc:	83 c4 10             	add    esp,0x10
c00261ff:	fe 44 24 0f          	inc    BYTE PTR [esp+0xf]
c0026203:	e9 6b ff ff ff       	jmp    c0026173 <APIC::APIC()+0x39>
c0026208:	c6 05 00 32 03 c0 01 	mov    BYTE PTR ds:0xc0033200,0x1
c002620f:	90                   	nop
c0026210:	83 c4 18             	add    esp,0x18
c0026213:	5b                   	pop    ebx
c0026214:	c3                   	ret    
c0026215:	90                   	nop

c0026216 <IOAPIC::handlesGSIWithNumber(unsigned int)>:
c0026216:	55                   	push   ebp
c0026217:	89 e5                	mov    ebp,esp
c0026219:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002621c:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026222:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c0026225:	72 1d                	jb     c0026244 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002622a:	8b 90 60 01 00 00    	mov    edx,DWORD PTR [eax+0x160]
c0026230:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026233:	8b 80 64 01 00 00    	mov    eax,DWORD PTR [eax+0x164]
c0026239:	01 d0                	add    eax,edx
c002623b:	39 45 0c             	cmp    DWORD PTR [ebp+0xc],eax
c002623e:	73 04                	jae    c0026244 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x2e>
c0026240:	b0 01                	mov    al,0x1
c0026242:	eb 02                	jmp    c0026246 <IOAPIC::handlesGSIWithNumber(unsigned int)+0x30>
c0026244:	b0 00                	mov    al,0x0
c0026246:	5d                   	pop    ebp
c0026247:	c3                   	ret    

c0026248 <IOAPIC::read(int)>:
c0026248:	55                   	push   ebp
c0026249:	89 e5                	mov    ebp,esp
c002624b:	83 ec 10             	sub    esp,0x10
c002624e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026251:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026257:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c002625a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002625d:	0f b6 d0             	movzx  edx,al
c0026260:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026263:	89 10                	mov    DWORD PTR [eax],edx
c0026265:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026268:	83 c0 10             	add    eax,0x10
c002626b:	8b 00                	mov    eax,DWORD PTR [eax]
c002626d:	c9                   	leave  
c002626e:	c3                   	ret    
c002626f:	90                   	nop

c0026270 <IOAPIC::open(int, int, void*)>:
c0026270:	55                   	push   ebp
c0026271:	89 e5                	mov    ebp,esp
c0026273:	57                   	push   edi
c0026274:	56                   	push   esi
c0026275:	53                   	push   ebx
c0026276:	83 ec 0c             	sub    esp,0xc
c0026279:	83 ec 0c             	sub    esp,0xc
c002627c:	68 5f db 02 c0       	push   0xc002db5f
c0026281:	e8 c1 cb fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0026286:	83 c4 10             	add    esp,0x10
c0026289:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002628c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002628f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026298:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c002629e:	8b 14 85 20 18 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce7e0]
c00262a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262a8:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c00262ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262b1:	8b 80 58 01 00 00    	mov    eax,DWORD PTR [eax+0x158]
c00262b7:	8b 14 85 a0 18 03 c0 	mov    edx,DWORD PTR [eax*4-0x3ffce760]
c00262be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262c1:	89 90 60 01 00 00    	mov    DWORD PTR [eax+0x160],edx
c00262c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262ca:	8b 90 5c 01 00 00    	mov    edx,DWORD PTR [eax+0x15c]
c00262d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00262d3:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c00262d9:	0f b6 f8             	movzx  edi,al
c00262dc:	89 d0                	mov    eax,edx
c00262de:	ba 00 00 00 00       	mov    edx,0x0
c00262e3:	89 c1                	mov    ecx,eax
c00262e5:	80 e5 ff             	and    ch,0xff
c00262e8:	89 cb                	mov    ebx,ecx
c00262ea:	0f b6 f2             	movzx  esi,dl
c00262ed:	89 d8                	mov    eax,ebx
c00262ef:	89 f2                	mov    edx,esi
c00262f1:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c00262f4:	8d 5f 08             	lea    ebx,[edi+0x8]
c00262f7:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c00262fb:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c00262ff:	83 e0 00             	and    eax,0x0
c0026302:	09 d0                	or     eax,edx
c0026304:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002630b:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026311:	8d 50 01             	lea    edx,[eax+0x1]
c0026314:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0026317:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c002631d:	0f b6 d0             	movzx  edx,al
c0026320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026323:	83 c2 08             	add    edx,0x8
c0026326:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c002632a:	0f b6 c9             	movzx  ecx,cl
c002632d:	81 c9 00 ad de 00    	or     ecx,0xdead00
c0026333:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026337:	83 ec 08             	sub    esp,0x8
c002633a:	6a 01                	push   0x1
c002633c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002633f:	e8 04 ff ff ff       	call   c0026248 <IOAPIC::read(int)>
c0026344:	83 c4 10             	add    esp,0x10
c0026347:	c1 f8 10             	sar    eax,0x10
c002634a:	0f b6 c0             	movzx  eax,al
c002634d:	8d 50 01             	lea    edx,[eax+0x1]
c0026350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026353:	89 90 64 01 00 00    	mov    DWORD PTR [eax+0x164],edx
c0026359:	b8 00 00 00 00       	mov    eax,0x0
c002635e:	8d 65 f4             	lea    esp,[ebp-0xc]
c0026361:	5b                   	pop    ebx
c0026362:	5e                   	pop    esi
c0026363:	5f                   	pop    edi
c0026364:	5d                   	pop    ebp
c0026365:	c3                   	ret    

c0026366 <IOAPIC::write(int, int)>:
c0026366:	55                   	push   ebp
c0026367:	89 e5                	mov    ebp,esp
c0026369:	83 ec 10             	sub    esp,0x10
c002636c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c002636f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026375:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
c0026378:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002637b:	0f b6 d0             	movzx  edx,al
c002637e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026381:	89 10                	mov    DWORD PTR [eax],edx
c0026383:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026386:	8d 50 10             	lea    edx,[eax+0x10]
c0026389:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c002638c:	89 02                	mov    DWORD PTR [edx],eax
c002638e:	90                   	nop
c002638f:	c9                   	leave  
c0026390:	c3                   	ret    
c0026391:	90                   	nop

c0026392 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>:
c0026392:	55                   	push   ebp
c0026393:	89 e5                	mov    ebp,esp
c0026395:	53                   	push   ebx
c0026396:	83 ec 2c             	sub    esp,0x2c
c0026399:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002639c:	8b 5d 18             	mov    ebx,DWORD PTR [ebp+0x18]
c002639f:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
c00263a2:	8b 55 20             	mov    edx,DWORD PTR [ebp+0x20]
c00263a5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
c00263a8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00263ab:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00263ae:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00263b1:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00263b4:	88 d8                	mov    al,bl
c00263b6:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
c00263b9:	88 c8                	mov    al,cl
c00263bb:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c00263be:	88 d0                	mov    al,dl
c00263c0:	88 45 d0             	mov    BYTE PTR [ebp-0x30],al
c00263c3:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00263c7:	83 c0 08             	add    eax,0x8
c00263ca:	01 c0                	add    eax,eax
c00263cc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00263cf:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00263d3:	83 c0 08             	add    eax,0x8
c00263d6:	01 c0                	add    eax,eax
c00263d8:	40                   	inc    eax
c00263d9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00263dc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c00263df:	50                   	push   eax
c00263e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00263e3:	e8 60 fe ff ff       	call   c0026248 <IOAPIC::read(int)>
c00263e8:	83 c4 08             	add    esp,0x8
c00263eb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c00263ee:	81 65 e8 ff ff ff 00 	and    DWORD PTR [ebp-0x18],0xffffff
c00263f5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c00263f8:	c1 e0 18             	shl    eax,0x18
c00263fb:	09 45 e8             	or     DWORD PTR [ebp-0x18],eax
c00263fe:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0026401:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0026404:	52                   	push   edx
c0026405:	50                   	push   eax
c0026406:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026409:	e8 58 ff ff ff       	call   c0026366 <IOAPIC::write(int, int)>
c002640e:	83 c4 0c             	add    esp,0xc
c0026411:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026414:	50                   	push   eax
c0026415:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026418:	e8 2b fe ff ff       	call   c0026248 <IOAPIC::read(int)>
c002641d:	83 c4 08             	add    esp,0x8
c0026420:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
c0026423:	81 65 f4 ff ff fe ff 	and    DWORD PTR [ebp-0xc],0xfffeffff
c002642a:	81 65 f4 ff f7 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff7ff
c0026431:	81 65 f4 ff f8 ff ff 	and    DWORD PTR [ebp-0xc],0xfffff8ff
c0026438:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c002643c:	74 09                	je     c0026447 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xb5>
c002643e:	81 4d f4 00 20 00 00 	or     DWORD PTR [ebp-0xc],0x2000
c0026445:	eb 07                	jmp    c002644e <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xbc>
c0026447:	81 65 f4 ff df ff ff 	and    DWORD PTR [ebp-0xc],0xffffdfff
c002644e:	80 7d d0 00          	cmp    BYTE PTR [ebp-0x30],0x0
c0026452:	74 09                	je     c002645d <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xcb>
c0026454:	81 4d f4 00 80 00 00 	or     DWORD PTR [ebp-0xc],0x8000
c002645b:	eb 07                	jmp    c0026464 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)+0xd2>
c002645d:	81 65 f4 ff 7f ff ff 	and    DWORD PTR [ebp-0xc],0xffff7fff
c0026464:	81 65 f4 00 ff ff ff 	and    DWORD PTR [ebp-0xc],0xffffff00
c002646b:	0f b6 45 e0          	movzx  eax,BYTE PTR [ebp-0x20]
c002646f:	09 45 f4             	or     DWORD PTR [ebp-0xc],eax
c0026472:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
c0026475:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0026478:	52                   	push   edx
c0026479:	50                   	push   eax
c002647a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c002647d:	e8 e4 fe ff ff       	call   c0026366 <IOAPIC::write(int, int)>
c0026482:	83 c4 0c             	add    esp,0xc
c0026485:	90                   	nop
c0026486:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
c0026489:	c9                   	leave  
c002648a:	c3                   	ret    
c002648b:	90                   	nop

c002648c <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)>:
c002648c:	55                   	push   ebp
c002648d:	89 e5                	mov    ebp,esp
c002648f:	57                   	push   edi
c0026490:	56                   	push   esi
c0026491:	53                   	push   ebx
c0026492:	83 ec 2c             	sub    esp,0x2c
c0026495:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0026498:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
c002649b:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c002649f:	c6 45 e6 00          	mov    BYTE PTR [ebp-0x1a],0x0
c00264a3:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
c00264a7:	74 5a                	je     c0026503 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00264a9:	83 7d 0c 0f          	cmp    DWORD PTR [ebp+0xc],0xf
c00264ad:	7f 44                	jg     c00264f3 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x67>
c00264af:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264b2:	05 a0 e0 02 c0       	add    eax,0xc002e0a0
c00264b7:	8a 00                	mov    al,BYTE PTR [eax]
c00264b9:	0f b6 c0             	movzx  eax,al
c00264bc:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00264bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264c2:	66 8b 84 00 c0 17 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce840]
c00264ca:	0f b7 c0             	movzx  eax,ax
c00264cd:	83 e0 02             	and    eax,0x2
c00264d0:	85 c0                	test   eax,eax
c00264d2:	74 04                	je     c00264d8 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x4c>
c00264d4:	c6 45 e6 01          	mov    BYTE PTR [ebp-0x1a],0x1
c00264d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00264db:	66 8b 84 00 c0 17 03 c0 	mov    ax,WORD PTR [eax+eax*1-0x3ffce840]
c00264e3:	0f b7 c0             	movzx  eax,ax
c00264e6:	83 e0 08             	and    eax,0x8
c00264e9:	85 c0                	test   eax,eax
c00264eb:	74 16                	je     c0026503 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00264ed:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
c00264f1:	eb 10                	jmp    c0026503 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x77>
c00264f3:	83 ec 0c             	sub    esp,0xc
c00264f6:	68 70 db 02 c0       	push   0xc002db70
c00264fb:	e8 01 43 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c0026500:	83 c4 10             	add    esp,0x10
c0026503:	c6 45 e5 00          	mov    BYTE PTR [ebp-0x1b],0x0
c0026507:	a1 c0 31 03 c0       	mov    eax,ds:0xc00331c0
c002650c:	83 ec 08             	sub    esp,0x8
c002650f:	50                   	push   eax
c0026510:	68 a8 db 02 c0       	push   0xc002dba8
c0026515:	e8 2d c9 fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c002651a:	83 c4 10             	add    esp,0x10
c002651d:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
c0026524:	a1 c0 31 03 c0       	mov    eax,ds:0xc00331c0
c0026529:	39 45 e0             	cmp    DWORD PTR [ebp-0x20],eax
c002652c:	7d 67                	jge    c0026595 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c002652e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c0026531:	8b 04 85 e0 31 03 c0 	mov    eax,DWORD PTR [eax*4-0x3ffcce20]
c0026538:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c002653b:	83 ec 08             	sub    esp,0x8
c002653e:	52                   	push   edx
c002653f:	50                   	push   eax
c0026540:	e8 d1 fc ff ff       	call   c0026216 <IOAPIC::handlesGSIWithNumber(unsigned int)>
c0026545:	83 c4 10             	add    esp,0x10
c0026548:	84 c0                	test   al,al
c002654a:	74 44                	je     c0026590 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x104>
c002654c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c002654f:	8b 1c 85 e0 31 03 c0 	mov    ebx,DWORD PTR [eax*4-0x3ffcce20]
c0026556:	0f b6 45 e6          	movzx  eax,BYTE PTR [ebp-0x1a]
c002655a:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c002655d:	0f b6 7d e7          	movzx  edi,BYTE PTR [ebp-0x19]
c0026561:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026564:	83 c0 20             	add    eax,0x20
c0026567:	0f b6 f0             	movzx  esi,al
c002656a:	b8 00 00 00 00       	mov    eax,0x0
c002656f:	99                   	cdq    
c0026570:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0026573:	0f b6 c9             	movzx  ecx,cl
c0026576:	83 ec 04             	sub    esp,0x4
c0026579:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
c002657c:	57                   	push   edi
c002657d:	56                   	push   esi
c002657e:	52                   	push   edx
c002657f:	50                   	push   eax
c0026580:	51                   	push   ecx
c0026581:	53                   	push   ebx
c0026582:	e8 0b fe ff ff       	call   c0026392 <IOAPIC::redirect(unsigned char, unsigned long long, unsigned char, bool, bool)>
c0026587:	83 c4 20             	add    esp,0x20
c002658a:	c6 45 e5 01          	mov    BYTE PTR [ebp-0x1b],0x1
c002658e:	eb 05                	jmp    c0026595 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x109>
c0026590:	ff 45 e0             	inc    DWORD PTR [ebp-0x20]
c0026593:	eb 8f                	jmp    c0026524 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x98>
c0026595:	8a 45 e5             	mov    al,BYTE PTR [ebp-0x1b]
c0026598:	83 f0 01             	xor    eax,0x1
c002659b:	84 c0                	test   al,al
c002659d:	74 10                	je     c00265af <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x123>
c002659f:	83 ec 0c             	sub    esp,0xc
c00265a2:	68 bf db 02 c0       	push   0xc002dbbf
c00265a7:	e8 55 42 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c00265ac:	83 c4 10             	add    esp,0x10
c00265af:	83 45 0c 20          	add    DWORD PTR [ebp+0xc],0x20
c00265b3:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
c00265ba:	83 7d dc 03          	cmp    DWORD PTR [ebp-0x24],0x3
c00265be:	7f 65                	jg     c0026625 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x199>
c00265c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265c3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265c6:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00265cd:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00265d0:	01 ca                	add    edx,ecx
c00265d2:	83 c2 54             	add    edx,0x54
c00265d5:	8b 44 90 08          	mov    eax,DWORD PTR [eax+edx*4+0x8]
c00265d9:	85 c0                	test   eax,eax
c00265db:	75 43                	jne    c0026620 <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x194>
c00265dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265e0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265e3:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c00265ea:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c00265ed:	01 ca                	add    edx,ecx
c00265ef:	8d 4a 54             	lea    ecx,[edx+0x54]
c00265f2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
c00265f5:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c00265f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00265fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c00265ff:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
c0026606:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c0026609:	01 ca                	add    edx,ecx
c002660b:	8d 8a 54 04 00 00    	lea    ecx,[edx+0x454]
c0026611:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
c0026614:	89 54 88 08          	mov    DWORD PTR [eax+ecx*4+0x8],edx
c0026618:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002661b:	83 e8 20             	sub    eax,0x20
c002661e:	eb 1a                	jmp    c002663a <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x1ae>
c0026620:	ff 45 dc             	inc    DWORD PTR [ebp-0x24]
c0026623:	eb 95                	jmp    c00265ba <APIC::installIRQHandler(int, void (*)(regs*, void*), bool, void*)+0x12e>
c0026625:	83 ec 0c             	sub    esp,0xc
c0026628:	68 cc db 02 c0       	push   0xc002dbcc
c002662d:	e8 cf 41 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c0026632:	83 c4 10             	add    esp,0x10
c0026635:	b8 ff ff ff ff       	mov    eax,0xffffffff
c002663a:	8d 65 f4             	lea    esp,[ebp-0xc]
c002663d:	5b                   	pop    ebx
c002663e:	5e                   	pop    esi
c002663f:	5f                   	pop    edi
c0026640:	5d                   	pop    ebp
c0026641:	c3                   	ret    

c0026642 <PIC::disable()>:
c0026642:	55                   	push   ebp
c0026643:	89 e5                	mov    ebp,esp
c0026645:	83 ec 10             	sub    esp,0x10
c0026648:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
c002664e:	c6 45 f9 ff          	mov    BYTE PTR [ebp-0x7],0xff
c0026652:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026655:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026659:	ee                   	out    dx,al
c002665a:	66 c7 45 fe 21 00    	mov    WORD PTR [ebp-0x2],0x21
c0026660:	c6 45 fd ff          	mov    BYTE PTR [ebp-0x3],0xff
c0026664:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c0026667:	66 8b 55 fe          	mov    dx,WORD PTR [ebp-0x2]
c002666b:	ee                   	out    dx,al
c002666c:	90                   	nop
c002666d:	c9                   	leave  
c002666e:	c3                   	ret    
c002666f:	90                   	nop

c0026670 <PIC::close(int, int, void*)>:
c0026670:	55                   	push   ebp
c0026671:	89 e5                	mov    ebp,esp
c0026673:	83 ec 08             	sub    esp,0x8
c0026676:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0026679:	8b 00                	mov    eax,DWORD PTR [eax]
c002667b:	83 c0 3c             	add    eax,0x3c
c002667e:	8b 00                	mov    eax,DWORD PTR [eax]
c0026680:	83 ec 0c             	sub    esp,0xc
c0026683:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026686:	ff d0                	call   eax
c0026688:	83 c4 10             	add    esp,0x10
c002668b:	b8 00 00 00 00       	mov    eax,0x0
c0026690:	c9                   	leave  
c0026691:	c3                   	ret    

c0026692 <PIC::PIC()>:
c0026692:	83 ec 0c             	sub    esp,0xc
c0026695:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026699:	83 ec 08             	sub    esp,0x8
c002669c:	68 78 dc 02 c0       	push   0xc002dc78
c00266a1:	50                   	push   eax
c00266a2:	e8 2d e5 fe ff       	call   c0014bd4 <InterruptController::InterruptController(char const*)>
c00266a7:	83 c4 10             	add    esp,0x10
c00266aa:	ba a4 dc 02 c0       	mov    edx,0xc002dca4
c00266af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266b3:	89 10                	mov    DWORD PTR [eax],edx
c00266b5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266b9:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266bf:	0f b6 d0             	movzx  edx,al
c00266c2:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266c6:	66 c7 44 90 04 20 00 	mov    WORD PTR [eax+edx*4+0x4],0x20
c00266cd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266d1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266d7:	0f b6 d0             	movzx  edx,al
c00266da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266de:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c00266e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00266e7:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c00266ed:	8d 50 01             	lea    edx,[eax+0x1]
c00266f0:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c00266f4:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c00266fa:	0f b6 d0             	movzx  edx,al
c00266fd:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026701:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026705:	83 e1 3f             	and    ecx,0x3f
c0026708:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c002670c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026710:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026716:	0f b6 d0             	movzx  edx,al
c0026719:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002671d:	66 c7 44 90 04 a0 00 	mov    WORD PTR [eax+edx*4+0x4],0xa0
c0026724:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026728:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c002672e:	0f b6 d0             	movzx  edx,al
c0026731:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026735:	c6 44 90 06 02       	mov    BYTE PTR [eax+edx*4+0x6],0x2
c002673a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002673e:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026744:	8d 50 01             	lea    edx,[eax+0x1]
c0026747:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002674b:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026751:	0f b6 d0             	movzx  edx,al
c0026754:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026758:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c002675c:	83 e1 3f             	and    ecx,0x3f
c002675f:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026763:	90                   	nop
c0026764:	83 c4 0c             	add    esp,0xc
c0026767:	c3                   	ret    

c0026768 <PIC::ioWait()>:
c0026768:	eb 00                	jmp    c002676a <PIC::ioWait()+0x2>
c002676a:	eb 00                	jmp    c002676c <PIC::ioWait()+0x4>
c002676c:	90                   	nop
c002676d:	c3                   	ret    

c002676e <PIC::getIRQReg(int)>:
c002676e:	55                   	push   ebp
c002676f:	89 e5                	mov    ebp,esp
c0026771:	83 ec 10             	sub    esp,0x10
c0026774:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0026777:	0f b6 c0             	movzx  eax,al
c002677a:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026780:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
c0026783:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026786:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c002678a:	ee                   	out    dx,al
c002678b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c002678e:	0f b6 c0             	movzx  eax,al
c0026791:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026797:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
c002679a:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002679d:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00267a1:	ee                   	out    dx,al
c00267a2:	66 c7 45 fa a0 00    	mov    WORD PTR [ebp-0x6],0xa0
c00267a8:	66 8b 45 fa          	mov    ax,WORD PTR [ebp-0x6]
c00267ac:	89 c2                	mov    edx,eax
c00267ae:	ec                   	in     al,dx
c00267af:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
c00267b2:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c00267b5:	0f b6 c0             	movzx  eax,al
c00267b8:	c1 e0 08             	shl    eax,0x8
c00267bb:	89 c1                	mov    ecx,eax
c00267bd:	66 c7 45 fe 20 00    	mov    WORD PTR [ebp-0x2],0x20
c00267c3:	66 8b 45 fe          	mov    ax,WORD PTR [ebp-0x2]
c00267c7:	89 c2                	mov    edx,eax
c00267c9:	ec                   	in     al,dx
c00267ca:	88 45 fd             	mov    BYTE PTR [ebp-0x3],al
c00267cd:	8a 45 fd             	mov    al,BYTE PTR [ebp-0x3]
c00267d0:	0f b6 c0             	movzx  eax,al
c00267d3:	09 c8                	or     eax,ecx
c00267d5:	c9                   	leave  
c00267d6:	c3                   	ret    
c00267d7:	90                   	nop

c00267d8 <PIC::eoi(unsigned char)>:
c00267d8:	55                   	push   ebp
c00267d9:	89 e5                	mov    ebp,esp
c00267db:	83 ec 14             	sub    esp,0x14
c00267de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00267e1:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
c00267e4:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c00267e8:	75 1e                	jne    c0026808 <PIC::eoi(unsigned char)+0x30>
c00267ea:	6a 0b                	push   0xb
c00267ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00267ef:	e8 7a ff ff ff       	call   c002676e <PIC::getIRQReg(int)>
c00267f4:	83 c4 08             	add    esp,0x8
c00267f7:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
c00267fb:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
c00267ff:	25 80 00 00 00       	and    eax,0x80
c0026804:	85 c0                	test   eax,eax
c0026806:	74 5f                	je     c0026867 <PIC::eoi(unsigned char)+0x8f>
c0026808:	80 7d ec 0f          	cmp    BYTE PTR [ebp-0x14],0xf
c002680c:	75 2d                	jne    c002683b <PIC::eoi(unsigned char)+0x63>
c002680e:	6a 0b                	push   0xb
c0026810:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026813:	e8 56 ff ff ff       	call   c002676e <PIC::getIRQReg(int)>
c0026818:	83 c4 08             	add    esp,0x8
c002681b:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
c002681f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
c0026822:	66 85 c0             	test   ax,ax
c0026825:	78 14                	js     c002683b <PIC::eoi(unsigned char)+0x63>
c0026827:	66 c7 45 fa 20 00    	mov    WORD PTR [ebp-0x6],0x20
c002682d:	c6 45 f9 20          	mov    BYTE PTR [ebp-0x7],0x20
c0026831:	8a 45 f9             	mov    al,BYTE PTR [ebp-0x7]
c0026834:	66 8b 55 fa          	mov    dx,WORD PTR [ebp-0x6]
c0026838:	ee                   	out    dx,al
c0026839:	eb 2d                	jmp    c0026868 <PIC::eoi(unsigned char)+0x90>
c002683b:	80 7d ec 07          	cmp    BYTE PTR [ebp-0x14],0x7
c002683f:	76 12                	jbe    c0026853 <PIC::eoi(unsigned char)+0x7b>
c0026841:	66 c7 45 f6 a0 00    	mov    WORD PTR [ebp-0xa],0xa0
c0026847:	c6 45 f5 20          	mov    BYTE PTR [ebp-0xb],0x20
c002684b:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c002684e:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c0026852:	ee                   	out    dx,al
c0026853:	66 c7 45 f2 20 00    	mov    WORD PTR [ebp-0xe],0x20
c0026859:	c6 45 f1 20          	mov    BYTE PTR [ebp-0xf],0x20
c002685d:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c0026860:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c0026864:	ee                   	out    dx,al
c0026865:	eb 01                	jmp    c0026868 <PIC::eoi(unsigned char)+0x90>
c0026867:	90                   	nop
c0026868:	c9                   	leave  
c0026869:	c3                   	ret    

c002686a <PIC::remap()>:
c002686a:	55                   	push   ebp
c002686b:	89 e5                	mov    ebp,esp
c002686d:	83 ec 48             	sub    esp,0x48
c0026870:	c7 45 f4 20 00 00 00 	mov    DWORD PTR [ebp-0xc],0x20
c0026877:	c7 45 f0 28 00 00 00 	mov    DWORD PTR [ebp-0x10],0x28
c002687e:	66 c7 45 c0 21 00    	mov    WORD PTR [ebp-0x40],0x21
c0026884:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
c0026887:	89 c2                	mov    edx,eax
c0026889:	ec                   	in     al,dx
c002688a:	88 45 bf             	mov    BYTE PTR [ebp-0x41],al
c002688d:	8a 45 bf             	mov    al,BYTE PTR [ebp-0x41]
c0026890:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
c0026893:	66 c7 45 c4 a1 00    	mov    WORD PTR [ebp-0x3c],0xa1
c0026899:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
c002689c:	89 c2                	mov    edx,eax
c002689e:	ec                   	in     al,dx
c002689f:	88 45 c3             	mov    BYTE PTR [ebp-0x3d],al
c00268a2:	8a 45 c3             	mov    al,BYTE PTR [ebp-0x3d]
c00268a5:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
c00268a8:	66 c7 45 c8 20 00    	mov    WORD PTR [ebp-0x38],0x20
c00268ae:	c6 45 c7 11          	mov    BYTE PTR [ebp-0x39],0x11
c00268b2:	8a 45 c7             	mov    al,BYTE PTR [ebp-0x39]
c00268b5:	8b 55 c8             	mov    edx,DWORD PTR [ebp-0x38]
c00268b8:	ee                   	out    dx,al
c00268b9:	83 ec 0c             	sub    esp,0xc
c00268bc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268bf:	e8 a4 fe ff ff       	call   c0026768 <PIC::ioWait()>
c00268c4:	83 c4 10             	add    esp,0x10
c00268c7:	66 c7 45 cc a0 00    	mov    WORD PTR [ebp-0x34],0xa0
c00268cd:	c6 45 cb 11          	mov    BYTE PTR [ebp-0x35],0x11
c00268d1:	8a 45 cb             	mov    al,BYTE PTR [ebp-0x35]
c00268d4:	8b 55 cc             	mov    edx,DWORD PTR [ebp-0x34]
c00268d7:	ee                   	out    dx,al
c00268d8:	83 ec 0c             	sub    esp,0xc
c00268db:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00268de:	e8 85 fe ff ff       	call   c0026768 <PIC::ioWait()>
c00268e3:	83 c4 10             	add    esp,0x10
c00268e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
c00268e9:	0f b6 c0             	movzx  eax,al
c00268ec:	66 c7 45 d0 21 00    	mov    WORD PTR [ebp-0x30],0x21
c00268f2:	88 45 cf             	mov    BYTE PTR [ebp-0x31],al
c00268f5:	8a 45 cf             	mov    al,BYTE PTR [ebp-0x31]
c00268f8:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
c00268fb:	ee                   	out    dx,al
c00268fc:	83 ec 0c             	sub    esp,0xc
c00268ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026902:	e8 61 fe ff ff       	call   c0026768 <PIC::ioWait()>
c0026907:	83 c4 10             	add    esp,0x10
c002690a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002690d:	0f b6 c0             	movzx  eax,al
c0026910:	66 c7 45 d4 a1 00    	mov    WORD PTR [ebp-0x2c],0xa1
c0026916:	88 45 d3             	mov    BYTE PTR [ebp-0x2d],al
c0026919:	8a 45 d3             	mov    al,BYTE PTR [ebp-0x2d]
c002691c:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c002691f:	ee                   	out    dx,al
c0026920:	83 ec 0c             	sub    esp,0xc
c0026923:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026926:	e8 3d fe ff ff       	call   c0026768 <PIC::ioWait()>
c002692b:	83 c4 10             	add    esp,0x10
c002692e:	66 c7 45 d8 21 00    	mov    WORD PTR [ebp-0x28],0x21
c0026934:	c6 45 d7 04          	mov    BYTE PTR [ebp-0x29],0x4
c0026938:	8a 45 d7             	mov    al,BYTE PTR [ebp-0x29]
c002693b:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
c002693e:	ee                   	out    dx,al
c002693f:	83 ec 0c             	sub    esp,0xc
c0026942:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026945:	e8 1e fe ff ff       	call   c0026768 <PIC::ioWait()>
c002694a:	83 c4 10             	add    esp,0x10
c002694d:	66 c7 45 dc a1 00    	mov    WORD PTR [ebp-0x24],0xa1
c0026953:	c6 45 db 02          	mov    BYTE PTR [ebp-0x25],0x2
c0026957:	8a 45 db             	mov    al,BYTE PTR [ebp-0x25]
c002695a:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
c002695d:	ee                   	out    dx,al
c002695e:	83 ec 0c             	sub    esp,0xc
c0026961:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026964:	e8 ff fd ff ff       	call   c0026768 <PIC::ioWait()>
c0026969:	83 c4 10             	add    esp,0x10
c002696c:	66 c7 45 e0 21 00    	mov    WORD PTR [ebp-0x20],0x21
c0026972:	c6 45 df 01          	mov    BYTE PTR [ebp-0x21],0x1
c0026976:	8a 45 df             	mov    al,BYTE PTR [ebp-0x21]
c0026979:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c002697c:	ee                   	out    dx,al
c002697d:	83 ec 0c             	sub    esp,0xc
c0026980:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026983:	e8 e0 fd ff ff       	call   c0026768 <PIC::ioWait()>
c0026988:	83 c4 10             	add    esp,0x10
c002698b:	66 c7 45 e4 a1 00    	mov    WORD PTR [ebp-0x1c],0xa1
c0026991:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
c0026995:	8a 45 e3             	mov    al,BYTE PTR [ebp-0x1d]
c0026998:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c002699b:	ee                   	out    dx,al
c002699c:	83 ec 0c             	sub    esp,0xc
c002699f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c00269a2:	e8 c1 fd ff ff       	call   c0026768 <PIC::ioWait()>
c00269a7:	83 c4 10             	add    esp,0x10
c00269aa:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
c00269ae:	66 c7 45 e8 21 00    	mov    WORD PTR [ebp-0x18],0x21
c00269b4:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
c00269b7:	8a 45 e7             	mov    al,BYTE PTR [ebp-0x19]
c00269ba:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c00269bd:	ee                   	out    dx,al
c00269be:	0f b6 45 ee          	movzx  eax,BYTE PTR [ebp-0x12]
c00269c2:	66 c7 45 ec a1 00    	mov    WORD PTR [ebp-0x14],0xa1
c00269c8:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
c00269cb:	8a 45 eb             	mov    al,BYTE PTR [ebp-0x15]
c00269ce:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00269d1:	ee                   	out    dx,al
c00269d2:	90                   	nop
c00269d3:	c9                   	leave  
c00269d4:	c3                   	ret    
c00269d5:	90                   	nop

c00269d6 <PIC::open(int, int, void*)>:
c00269d6:	55                   	push   ebp
c00269d7:	89 e5                	mov    ebp,esp
c00269d9:	83 ec 18             	sub    esp,0x18
c00269dc:	66 c7 45 f2 21 00    	mov    WORD PTR [ebp-0xe],0x21
c00269e2:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
c00269e6:	8a 45 f1             	mov    al,BYTE PTR [ebp-0xf]
c00269e9:	66 8b 55 f2          	mov    dx,WORD PTR [ebp-0xe]
c00269ed:	ee                   	out    dx,al
c00269ee:	66 c7 45 f6 a1 00    	mov    WORD PTR [ebp-0xa],0xa1
c00269f4:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
c00269f8:	8a 45 f5             	mov    al,BYTE PTR [ebp-0xb]
c00269fb:	66 8b 55 f6          	mov    dx,WORD PTR [ebp-0xa]
c00269ff:	ee                   	out    dx,al
c0026a00:	83 ec 0c             	sub    esp,0xc
c0026a03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0026a06:	e8 5f fe ff ff       	call   c002686a <PIC::remap()>
c0026a0b:	83 c4 10             	add    esp,0x10
c0026a0e:	b8 00 00 00 00       	mov    eax,0x0
c0026a13:	c9                   	leave  
c0026a14:	c3                   	ret    
c0026a15:	90                   	nop

c0026a16 <APICTimer::close(int, int, void*)>:
c0026a16:	b8 00 00 00 00       	mov    eax,0x0
c0026a1b:	c3                   	ret    

c0026a1c <apicTimerHandler(regs*, void*)>:
c0026a1c:	83 ec 0c             	sub    esp,0xc
c0026a1f:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026a23:	8b 00                	mov    eax,DWORD PTR [eax]
c0026a25:	99                   	cdq    
c0026a26:	52                   	push   edx
c0026a27:	50                   	push   eax
c0026a28:	6a 00                	push   0x0
c0026a2a:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026a2f:	e8 90 07 00 00       	call   c00271c4 <__udivdi3>
c0026a34:	83 c4 10             	add    esp,0x10
c0026a37:	83 ec 08             	sub    esp,0x8
c0026a3a:	52                   	push   edx
c0026a3b:	50                   	push   eax
c0026a3c:	e8 48 03 ff ff       	call   c0016d89 <timerHandler(unsigned long long)>
c0026a41:	83 c4 10             	add    esp,0x10
c0026a44:	90                   	nop
c0026a45:	83 c4 0c             	add    esp,0xc
c0026a48:	c3                   	ret    
c0026a49:	90                   	nop

c0026a4a <APICTimer::write(int)>:
c0026a4a:	53                   	push   ebx
c0026a4b:	83 ec 28             	sub    esp,0x28
c0026a4e:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026a52:	8b 54 24 34          	mov    edx,DWORD PTR [esp+0x34]
c0026a56:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026a5c:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0026a61:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026a67:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026a6d:	83 ec 0c             	sub    esp,0xc
c0026a70:	50                   	push   eax
c0026a71:	e8 de f4 ff ff       	call   c0025f54 <APIC::getBase()>
c0026a76:	83 c4 10             	add    esp,0x10
c0026a79:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax
c0026a7d:	a1 d0 f4 02 c0       	mov    eax,ds:0xc002f4d0
c0026a82:	8b 15 d4 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4d4
c0026a88:	89 44 24 10          	mov    DWORD PTR [esp+0x10],eax
c0026a8c:	89 54 24 14          	mov    DWORD PTR [esp+0x14],edx
c0026a90:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026a94:	05 e0 03 00 00       	add    eax,0x3e0
c0026a99:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026a9f:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026aa3:	05 80 03 00 00       	add    eax,0x380
c0026aa8:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
c0026aae:	fb                   	sti    
c0026aaf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ab3:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0026ab7:	05 00 ca 9a 3b       	add    eax,0x3b9aca00
c0026abc:	83 d2 00             	adc    edx,0x0
c0026abf:	89 c1                	mov    ecx,eax
c0026ac1:	89 d3                	mov    ebx,edx
c0026ac3:	a1 d0 f4 02 c0       	mov    eax,ds:0xc002f4d0
c0026ac8:	8b 15 d4 f4 02 c0    	mov    edx,DWORD PTR ds:0xc002f4d4
c0026ace:	39 c8                	cmp    eax,ecx
c0026ad0:	89 d0                	mov    eax,edx
c0026ad2:	19 d8                	sbb    eax,ebx
c0026ad4:	73 02                	jae    c0026ad8 <APICTimer::write(int)+0x8e>
c0026ad6:	eb d7                	jmp    c0026aaf <APICTimer::write(int)+0x65>
c0026ad8:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026adc:	05 20 03 00 00       	add    eax,0x320
c0026ae1:	c7 00 00 00 01 00    	mov    DWORD PTR [eax],0x10000
c0026ae7:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026aeb:	05 90 03 00 00       	add    eax,0x390
c0026af0:	8b 00                	mov    eax,DWORD PTR [eax]
c0026af2:	f7 d0                	not    eax
c0026af4:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026af8:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026afc:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026b00:	ba 00 00 00 00       	mov    edx,0x0
c0026b05:	f7 f3                	div    ebx
c0026b07:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c0026b0b:	8b 44 24 30          	mov    eax,DWORD PTR [esp+0x30]
c0026b0f:	8b 80 5c 01 00 00    	mov    eax,DWORD PTR [eax+0x15c]
c0026b15:	0d 00 00 02 00       	or     eax,0x20000
c0026b1a:	89 c2                	mov    edx,eax
c0026b1c:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b20:	05 20 03 00 00       	add    eax,0x320
c0026b25:	89 10                	mov    DWORD PTR [eax],edx
c0026b27:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b2b:	05 e0 03 00 00       	add    eax,0x3e0
c0026b30:	c7 00 03 00 00 00    	mov    DWORD PTR [eax],0x3
c0026b36:	8b 44 24 1c          	mov    eax,DWORD PTR [esp+0x1c]
c0026b3a:	05 80 03 00 00       	add    eax,0x380
c0026b3f:	89 c2                	mov    edx,eax
c0026b41:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0026b45:	89 02                	mov    DWORD PTR [edx],eax
c0026b47:	90                   	nop
c0026b48:	83 c4 28             	add    esp,0x28
c0026b4b:	5b                   	pop    ebx
c0026b4c:	c3                   	ret    
c0026b4d:	90                   	nop

c0026b4e <APICTimer::open(int, int, void*)>:
c0026b4e:	57                   	push   edi
c0026b4f:	56                   	push   esi
c0026b50:	53                   	push   ebx
c0026b51:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b55:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b57:	83 c0 24             	add    eax,0x24
c0026b5a:	8b 00                	mov    eax,DWORD PTR [eax]
c0026b5c:	83 ec 08             	sub    esp,0x8
c0026b5f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b63:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026b67:	ff d0                	call   eax
c0026b69:	83 c4 10             	add    esp,0x10
c0026b6c:	a1 48 ee 02 c0       	mov    eax,ds:0xc002ee48
c0026b71:	8b 80 60 01 00 00    	mov    eax,DWORD PTR [eax+0x160]
c0026b77:	8b 80 88 11 00 00    	mov    eax,DWORD PTR [eax+0x1188]
c0026b7d:	83 ec 0c             	sub    esp,0xc
c0026b80:	50                   	push   eax
c0026b81:	e8 ce f3 ff ff       	call   c0025f54 <APIC::getBase()>
c0026b86:	83 c4 10             	add    esp,0x10
c0026b89:	8d 90 00 03 00 00    	lea    edx,[eax+0x300]
c0026b8f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026b93:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026b99:	0f b6 f8             	movzx  edi,al
c0026b9c:	89 d0                	mov    eax,edx
c0026b9e:	ba 00 00 00 00       	mov    edx,0x0
c0026ba3:	89 c1                	mov    ecx,eax
c0026ba5:	80 e5 ff             	and    ch,0xff
c0026ba8:	89 cb                	mov    ebx,ecx
c0026baa:	0f b6 f2             	movzx  esi,dl
c0026bad:	89 d8                	mov    eax,ebx
c0026baf:	89 f2                	mov    edx,esi
c0026bb1:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026bb5:	8d 5f 08             	lea    ebx,[edi+0x8]
c0026bb8:	89 44 d9 04          	mov    DWORD PTR [ecx+ebx*8+0x4],eax
c0026bbc:	8a 44 d9 08          	mov    al,BYTE PTR [ecx+ebx*8+0x8]
c0026bc0:	83 e0 00             	and    eax,0x0
c0026bc3:	09 d0                	or     eax,edx
c0026bc5:	88 44 d9 08          	mov    BYTE PTR [ecx+ebx*8+0x8],al
c0026bc9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bcd:	8a 80 c5 00 00 00    	mov    al,BYTE PTR [eax+0xc5]
c0026bd3:	8d 50 01             	lea    edx,[eax+0x1]
c0026bd6:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026bda:	88 91 c5 00 00 00    	mov    BYTE PTR [ecx+0xc5],dl
c0026be0:	0f b6 d0             	movzx  edx,al
c0026be3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026be7:	83 c2 08             	add    edx,0x8
c0026bea:	8b 4c d0 08          	mov    ecx,DWORD PTR [eax+edx*8+0x8]
c0026bee:	0f b6 c9             	movzx  ecx,cl
c0026bf1:	81 c9 00 00 01 00    	or     ecx,0x10000
c0026bf7:	89 4c d0 08          	mov    DWORD PTR [eax+edx*8+0x8],ecx
c0026bfb:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026bff:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026c03:	89 90 5c 01 00 00    	mov    DWORD PTR [eax+0x15c],edx
c0026c09:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c0d:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026c11:	8d 8a 58 01 00 00    	lea    ecx,[edx+0x158]
c0026c17:	8b 54 24 10          	mov    edx,DWORD PTR [esp+0x10]
c0026c1b:	8b 92 5c 01 00 00    	mov    edx,DWORD PTR [edx+0x15c]
c0026c21:	83 ec 0c             	sub    esp,0xc
c0026c24:	51                   	push   ecx
c0026c25:	6a 01                	push   0x1
c0026c27:	68 1c 6a 02 c0       	push   0xc0026a1c
c0026c2c:	52                   	push   edx
c0026c2d:	50                   	push   eax
c0026c2e:	e8 bb d5 fe ff       	call   c00141ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026c33:	83 c4 20             	add    esp,0x20
c0026c36:	89 c2                	mov    edx,eax
c0026c38:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c3c:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026c42:	b8 00 00 00 00       	mov    eax,0x0
c0026c47:	5b                   	pop    ebx
c0026c48:	5e                   	pop    esi
c0026c49:	5f                   	pop    edi
c0026c4a:	c3                   	ret    
c0026c4b:	90                   	nop

c0026c4c <APICTimer::APICTimer()>:
c0026c4c:	83 ec 0c             	sub    esp,0xc
c0026c4f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c53:	83 ec 08             	sub    esp,0x8
c0026c56:	68 e4 dc 02 c0       	push   0xc002dce4
c0026c5b:	50                   	push   eax
c0026c5c:	e8 99 00 ff ff       	call   c0016cfa <Timer::Timer(char const*)>
c0026c61:	83 c4 10             	add    esp,0x10
c0026c64:	ba f8 dc 02 c0       	mov    edx,0xc002dcf8
c0026c69:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026c6d:	89 10                	mov    DWORD PTR [eax],edx
c0026c6f:	90                   	nop
c0026c70:	83 c4 0c             	add    esp,0xc
c0026c73:	c3                   	ret    

c0026c74 <PIT::write(int)>:
c0026c74:	83 ec 10             	sub    esp,0x10
c0026c77:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0026c7b:	8b 54 24 18          	mov    edx,DWORD PTR [esp+0x18]
c0026c7f:	89 90 58 01 00 00    	mov    DWORD PTR [eax+0x158],edx
c0026c85:	8b 44 24 18          	mov    eax,DWORD PTR [esp+0x18]
c0026c89:	a3 04 32 03 c0       	mov    ds:0xc0033204,eax
c0026c8e:	b8 dc 34 12 00       	mov    eax,0x1234dc
c0026c93:	99                   	cdq    
c0026c94:	f7 7c 24 18          	idiv   DWORD PTR [esp+0x18]
c0026c98:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0026c9c:	66 c7 44 24 02 43 00 	mov    WORD PTR [esp+0x2],0x43
c0026ca3:	c6 44 24 01 36       	mov    BYTE PTR [esp+0x1],0x36
c0026ca8:	8a 44 24 01          	mov    al,BYTE PTR [esp+0x1]
c0026cac:	66 8b 54 24 02       	mov    dx,WORD PTR [esp+0x2]
c0026cb1:	ee                   	out    dx,al
c0026cb2:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026cb6:	0f b6 c0             	movzx  eax,al
c0026cb9:	66 c7 44 24 06 40 00 	mov    WORD PTR [esp+0x6],0x40
c0026cc0:	88 44 24 05          	mov    BYTE PTR [esp+0x5],al
c0026cc4:	8a 44 24 05          	mov    al,BYTE PTR [esp+0x5]
c0026cc8:	66 8b 54 24 06       	mov    dx,WORD PTR [esp+0x6]
c0026ccd:	ee                   	out    dx,al
c0026cce:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0026cd2:	c1 f8 08             	sar    eax,0x8
c0026cd5:	0f b6 c0             	movzx  eax,al
c0026cd8:	66 c7 44 24 0a 40 00 	mov    WORD PTR [esp+0xa],0x40
c0026cdf:	88 44 24 09          	mov    BYTE PTR [esp+0x9],al
c0026ce3:	8a 44 24 09          	mov    al,BYTE PTR [esp+0x9]
c0026ce7:	66 8b 54 24 0a       	mov    dx,WORD PTR [esp+0xa]
c0026cec:	ee                   	out    dx,al
c0026ced:	90                   	nop
c0026cee:	83 c4 10             	add    esp,0x10
c0026cf1:	c3                   	ret    

c0026cf2 <pitHandler(regs*, void*)>:
c0026cf2:	83 ec 0c             	sub    esp,0xc
c0026cf5:	a1 04 32 03 c0       	mov    eax,ds:0xc0033204
c0026cfa:	99                   	cdq    
c0026cfb:	52                   	push   edx
c0026cfc:	50                   	push   eax
c0026cfd:	6a 00                	push   0x0
c0026cff:	68 00 ca 9a 3b       	push   0x3b9aca00
c0026d04:	e8 bb 04 00 00       	call   c00271c4 <__udivdi3>
c0026d09:	83 c4 10             	add    esp,0x10
c0026d0c:	83 ec 08             	sub    esp,0x8
c0026d0f:	52                   	push   edx
c0026d10:	50                   	push   eax
c0026d11:	e8 73 00 ff ff       	call   c0016d89 <timerHandler(unsigned long long)>
c0026d16:	83 c4 10             	add    esp,0x10
c0026d19:	90                   	nop
c0026d1a:	83 c4 0c             	add    esp,0xc
c0026d1d:	c3                   	ret    

c0026d1e <PIT::open(int, int, void*)>:
c0026d1e:	83 ec 0c             	sub    esp,0xc
c0026d21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d25:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d27:	83 c0 24             	add    eax,0x24
c0026d2a:	8b 00                	mov    eax,DWORD PTR [eax]
c0026d2c:	83 ec 08             	sub    esp,0x8
c0026d2f:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d33:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0026d37:	ff d0                	call   eax
c0026d39:	83 c4 10             	add    esp,0x10
c0026d3c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d40:	83 ec 0c             	sub    esp,0xc
c0026d43:	6a 00                	push   0x0
c0026d45:	6a 01                	push   0x1
c0026d47:	68 f2 6c 02 c0       	push   0xc0026cf2
c0026d4c:	6a 00                	push   0x0
c0026d4e:	50                   	push   eax
c0026d4f:	e8 9a d4 fe ff       	call   c00141ee <Device::addIRQHandler(int, void (*)(regs*, void*), bool, void*)>
c0026d54:	83 c4 20             	add    esp,0x20
c0026d57:	89 c2                	mov    edx,eax
c0026d59:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d5d:	89 90 50 01 00 00    	mov    DWORD PTR [eax+0x150],edx
c0026d63:	b8 00 00 00 00       	mov    eax,0x0
c0026d68:	83 c4 0c             	add    esp,0xc
c0026d6b:	c3                   	ret    

c0026d6c <PIT::close(int, int, void*)>:
c0026d6c:	83 ec 0c             	sub    esp,0xc
c0026d6f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d73:	c7 80 50 01 00 00 ff ff ff ff 	mov    DWORD PTR [eax+0x150],0xffffffff
c0026d7d:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026d81:	6a 01                	push   0x1
c0026d83:	68 f2 6c 02 c0       	push   0xc0026cf2
c0026d88:	6a 00                	push   0x0
c0026d8a:	50                   	push   eax
c0026d8b:	e8 9c d4 fe ff       	call   c001422c <Device::removeIRQHandler(int, void (*)(regs*, void*), bool)>
c0026d90:	83 c4 10             	add    esp,0x10
c0026d93:	b8 00 00 00 00       	mov    eax,0x0
c0026d98:	83 c4 0c             	add    esp,0xc
c0026d9b:	c3                   	ret    

c0026d9c <PIT::PIT()>:
c0026d9c:	83 ec 0c             	sub    esp,0xc
c0026d9f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026da3:	83 ec 08             	sub    esp,0x8
c0026da6:	68 20 dd 02 c0       	push   0xc002dd20
c0026dab:	50                   	push   eax
c0026dac:	e8 49 ff fe ff       	call   c0016cfa <Timer::Timer(char const*)>
c0026db1:	83 c4 10             	add    esp,0x10
c0026db4:	ba 48 dd 02 c0       	mov    edx,0xc002dd48
c0026db9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dbd:	89 10                	mov    DWORD PTR [eax],edx
c0026dbf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dc3:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026dc9:	0f b6 d0             	movzx  edx,al
c0026dcc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026dd0:	66 c7 44 90 04 40 00 	mov    WORD PTR [eax+edx*4+0x4],0x40
c0026dd7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026ddb:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026de1:	0f b6 d0             	movzx  edx,al
c0026de4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026de8:	c6 44 90 06 04       	mov    BYTE PTR [eax+edx*4+0x6],0x4
c0026ded:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026df1:	8a 80 c4 00 00 00    	mov    al,BYTE PTR [eax+0xc4]
c0026df7:	8d 50 01             	lea    edx,[eax+0x1]
c0026dfa:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c0026dfe:	88 91 c4 00 00 00    	mov    BYTE PTR [ecx+0xc4],dl
c0026e04:	0f b6 d0             	movzx  edx,al
c0026e07:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0026e0b:	8a 4c 90 07          	mov    cl,BYTE PTR [eax+edx*4+0x7]
c0026e0f:	83 e1 3f             	and    ecx,0x3f
c0026e12:	88 4c 90 07          	mov    BYTE PTR [eax+edx*4+0x7],cl
c0026e16:	90                   	nop
c0026e17:	83 c4 0c             	add    esp,0xc
c0026e1a:	c3                   	ret    
c0026e1b:	66 90                	xchg   ax,ax
c0026e1d:	66 90                	xchg   ax,ax
c0026e1f:	90                   	nop

c0026e20 <avxDetect>:
c0026e20:	b8 00 00 00 00       	mov    eax,0x0
c0026e25:	c3                   	ret    

c0026e26 <avxSave>:
c0026e26:	c3                   	ret    

c0026e27 <avxLoad>:
c0026e27:	c3                   	ret    

c0026e28 <avxInit>:
c0026e28:	c3                   	ret    

c0026e29 <avxClose>:
c0026e29:	c3                   	ret    

c0026e2a <wouldSheSayYes>:
c0026e2a:	c3                   	ret    
c0026e2b:	49                   	dec    ecx
c0026e2c:	20 6c 6f 76          	and    BYTE PTR [edi+ebp*2+0x76],ch
c0026e30:	65 20 79 6f          	and    BYTE PTR gs:[ecx+0x6f],bh
c0026e34:	75 20                	jne    c0026e56 <sseDetect.noSSE+0x1>
c0026e36:	4e                   	dec    esi
c0026e37:	79 61                	jns    c0026e9a <x87Detect+0x14>
c0026e39:	68 2e 2e 2e 00       	push   0x2e2e2e
c0026e3e:	66 90                	xchg   ax,ax

c0026e40 <absolutelyNoChanceInHell>:
c0026e40:	b8 01 00 00 00       	mov    eax,0x1
c0026e45:	0f a2                	cpuid  
c0026e47:	f7 c2 00 00 00 02    	test   edx,0x2000000
c0026e4d:	74 06                	je     c0026e55 <sseDetect.noSSE>
c0026e4f:	b8 01 00 00 00       	mov    eax,0x1
c0026e54:	c3                   	ret    

c0026e55 <sseDetect.noSSE>:
c0026e55:	31 c0                	xor    eax,eax
c0026e57:	c3                   	ret    

c0026e58 <sseSave>:
c0026e58:	0f ae 44 24 04       	fxsave [esp+0x4]
c0026e5d:	c3                   	ret    

c0026e5e <sseLoad>:
c0026e5e:	0f ae 4c 24 04       	fxrstor [esp+0x4]
c0026e63:	c3                   	ret    

c0026e64 <sseInit>:
c0026e64:	e8 49 00 00 00       	call   c0026eb2 <x87Init>
c0026e69:	0f 20 e0             	mov    eax,cr4
c0026e6c:	66 0d 00 06          	or     ax,0x600
c0026e70:	0f 22 e0             	mov    cr4,eax
c0026e73:	c3                   	ret    

c0026e74 <sseClose>:
c0026e74:	c3                   	ret    
c0026e75:	66 90                	xchg   ax,ax
c0026e77:	66 90                	xchg   ax,ax
c0026e79:	66 90                	xchg   ax,ax
c0026e7b:	66 90                	xchg   ax,ax
c0026e7d:	66 90                	xchg   ax,ax
c0026e7f:	90                   	nop

c0026e80 <value_37F>:
c0026e80:	7f 03                	jg     c0026e85 <value_37A+0x1>

c0026e82 <value_37E>:
c0026e82:	7e 03                	jle    c0026e87 <x87Detect+0x1>

c0026e84 <value_37A>:
c0026e84:	7a 03                	jp     c0026e89 <x87Detect+0x3>

c0026e86 <x87Detect>:
c0026e86:	b8 01 00 00 00       	mov    eax,0x1
c0026e8b:	0f a2                	cpuid  
c0026e8d:	f7 c2 01 00 00 00    	test   edx,0x1
c0026e93:	74 06                	je     c0026e9b <x87Detect.nox87>
c0026e95:	b8 01 00 00 00       	mov    eax,0x1
c0026e9a:	c3                   	ret    

c0026e9b <x87Detect.nox87>:
c0026e9b:	b8 00 00 00 00       	mov    eax,0x0
c0026ea0:	c3                   	ret    

c0026ea1 <x87Save>:
c0026ea1:	55                   	push   ebp
c0026ea2:	89 e5                	mov    ebp,esp
c0026ea4:	9b dd 75 08          	fsave  [ebp+0x8]
c0026ea8:	c9                   	leave  
c0026ea9:	c3                   	ret    

c0026eaa <x87Load>:
c0026eaa:	55                   	push   ebp
c0026eab:	89 e5                	mov    ebp,esp
c0026ead:	dd 65 08             	frstor [ebp+0x8]
c0026eb0:	c9                   	leave  
c0026eb1:	c3                   	ret    

c0026eb2 <x87Init>:
c0026eb2:	9b db e3             	finit  
c0026eb5:	0f 20 c0             	mov    eax,cr0
c0026eb8:	66 25 fb ff          	and    ax,0xfffb
c0026ebc:	66 0d 22 00          	or     ax,0x22
c0026ec0:	0f 22 c0             	mov    cr0,eax
c0026ec3:	0f 06                	clts   
c0026ec5:	d9 2d 84 6e 02 c0    	fldcw  WORD PTR ds:0xc0026e84
c0026ecb:	c3                   	ret    

c0026ecc <x87Close>:
c0026ecc:	c3                   	ret    
c0026ecd:	66 90                	xchg   ax,ax
c0026ecf:	90                   	nop

c0026ed0 <__do_global_ctors_aux>:
c0026ed0:	a1 08 9b 02 c0       	mov    eax,ds:0xc0029b08
c0026ed5:	83 f8 ff             	cmp    eax,0xffffffff
c0026ed8:	74 1a                	je     c0026ef4 <__do_global_ctors_aux+0x24>
c0026eda:	55                   	push   ebp
c0026edb:	89 e5                	mov    ebp,esp
c0026edd:	53                   	push   ebx
c0026ede:	52                   	push   edx
c0026edf:	bb 08 9b 02 c0       	mov    ebx,0xc0029b08
c0026ee4:	ff d0                	call   eax
c0026ee6:	83 eb 04             	sub    ebx,0x4
c0026ee9:	8b 03                	mov    eax,DWORD PTR [ebx]
c0026eeb:	83 f8 ff             	cmp    eax,0xffffffff
c0026eee:	75 f4                	jne    c0026ee4 <__do_global_ctors_aux+0x14>
c0026ef0:	58                   	pop    eax
c0026ef1:	5b                   	pop    ebx
c0026ef2:	5d                   	pop    ebp
c0026ef3:	c3                   	ret    
c0026ef4:	c3                   	ret    
c0026ef5:	66 90                	xchg   ax,ax
c0026ef7:	90                   	nop

c0026ef8 <__divdi3>:
c0026ef8:	55                   	push   ebp
c0026ef9:	57                   	push   edi
c0026efa:	56                   	push   esi
c0026efb:	53                   	push   ebx
c0026efc:	83 ec 1c             	sub    esp,0x1c
c0026eff:	8b 4c 24 30          	mov    ecx,DWORD PTR [esp+0x30]
c0026f03:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c0026f07:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026f0a:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026f0e:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
c0026f12:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c0026f16:	85 db                	test   ebx,ebx
c0026f18:	0f 88 8e 00 00 00    	js     c0026fac <__divdi3+0xb4>
c0026f1e:	89 dd                	mov    ebp,ebx
c0026f20:	c7 44 24 08 00 00 00 00 	mov    DWORD PTR [esp+0x8],0x0
c0026f28:	89 d3                	mov    ebx,edx
c0026f2a:	85 d2                	test   edx,edx
c0026f2c:	79 0d                	jns    c0026f3b <__divdi3+0x43>
c0026f2e:	f7 54 24 08          	not    DWORD PTR [esp+0x8]
c0026f32:	f7 d8                	neg    eax
c0026f34:	83 d2 00             	adc    edx,0x0
c0026f37:	f7 da                	neg    edx
c0026f39:	89 d3                	mov    ebx,edx
c0026f3b:	89 c7                	mov    edi,eax
c0026f3d:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026f40:	85 db                	test   ebx,ebx
c0026f42:	75 48                	jne    c0026f8c <__divdi3+0x94>
c0026f44:	39 ef                	cmp    edi,ebp
c0026f46:	76 24                	jbe    c0026f6c <__divdi3+0x74>
c0026f48:	89 ea                	mov    edx,ebp
c0026f4a:	f7 f7                	div    edi
c0026f4c:	89 c1                	mov    ecx,eax
c0026f4e:	31 f6                	xor    esi,esi
c0026f50:	89 c8                	mov    eax,ecx
c0026f52:	89 f2                	mov    edx,esi
c0026f54:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0026f58:	85 c9                	test   ecx,ecx
c0026f5a:	74 07                	je     c0026f63 <__divdi3+0x6b>
c0026f5c:	f7 d8                	neg    eax
c0026f5e:	83 d2 00             	adc    edx,0x0
c0026f61:	f7 da                	neg    edx
c0026f63:	83 c4 1c             	add    esp,0x1c
c0026f66:	5b                   	pop    ebx
c0026f67:	5e                   	pop    esi
c0026f68:	5f                   	pop    edi
c0026f69:	5d                   	pop    ebp
c0026f6a:	c3                   	ret    
c0026f6b:	90                   	nop
c0026f6c:	85 ff                	test   edi,edi
c0026f6e:	75 0b                	jne    c0026f7b <__divdi3+0x83>
c0026f70:	b8 01 00 00 00       	mov    eax,0x1
c0026f75:	31 d2                	xor    edx,edx
c0026f77:	f7 f3                	div    ebx
c0026f79:	89 c7                	mov    edi,eax
c0026f7b:	31 d2                	xor    edx,edx
c0026f7d:	89 e8                	mov    eax,ebp
c0026f7f:	f7 f7                	div    edi
c0026f81:	89 c6                	mov    esi,eax
c0026f83:	8b 04 24             	mov    eax,DWORD PTR [esp]
c0026f86:	f7 f7                	div    edi
c0026f88:	89 c1                	mov    ecx,eax
c0026f8a:	eb c4                	jmp    c0026f50 <__divdi3+0x58>
c0026f8c:	39 eb                	cmp    ebx,ebp
c0026f8e:	77 3c                	ja     c0026fcc <__divdi3+0xd4>
c0026f90:	0f bd f3             	bsr    esi,ebx
c0026f93:	83 f6 1f             	xor    esi,0x1f
c0026f96:	75 40                	jne    c0026fd8 <__divdi3+0xe0>
c0026f98:	39 eb                	cmp    ebx,ebp
c0026f9a:	72 09                	jb     c0026fa5 <__divdi3+0xad>
c0026f9c:	3b 3c 24             	cmp    edi,DWORD PTR [esp]
c0026f9f:	0f 87 97 00 00 00    	ja     c002703c <__divdi3+0x144>
c0026fa5:	b9 01 00 00 00       	mov    ecx,0x1
c0026faa:	eb a4                	jmp    c0026f50 <__divdi3+0x58>
c0026fac:	f7 d9                	neg    ecx
c0026fae:	83 d3 00             	adc    ebx,0x0
c0026fb1:	f7 db                	neg    ebx
c0026fb3:	89 0c 24             	mov    DWORD PTR [esp],ecx
c0026fb6:	89 5c 24 04          	mov    DWORD PTR [esp+0x4],ebx
c0026fba:	89 dd                	mov    ebp,ebx
c0026fbc:	c7 44 24 08 ff ff ff ff 	mov    DWORD PTR [esp+0x8],0xffffffff
c0026fc4:	e9 5f ff ff ff       	jmp    c0026f28 <__divdi3+0x30>
c0026fc9:	8d 76 00             	lea    esi,[esi+0x0]
c0026fcc:	31 f6                	xor    esi,esi
c0026fce:	31 c9                	xor    ecx,ecx
c0026fd0:	e9 7b ff ff ff       	jmp    c0026f50 <__divdi3+0x58>
c0026fd5:	8d 76 00             	lea    esi,[esi+0x0]
c0026fd8:	b8 20 00 00 00       	mov    eax,0x20
c0026fdd:	29 f0                	sub    eax,esi
c0026fdf:	89 f1                	mov    ecx,esi
c0026fe1:	d3 e3                	shl    ebx,cl
c0026fe3:	89 fa                	mov    edx,edi
c0026fe5:	88 c1                	mov    cl,al
c0026fe7:	d3 ea                	shr    edx,cl
c0026fe9:	09 da                	or     edx,ebx
c0026feb:	89 54 24 0c          	mov    DWORD PTR [esp+0xc],edx
c0026fef:	89 f1                	mov    ecx,esi
c0026ff1:	d3 e7                	shl    edi,cl
c0026ff3:	89 eb                	mov    ebx,ebp
c0026ff5:	88 c1                	mov    cl,al
c0026ff7:	d3 eb                	shr    ebx,cl
c0026ff9:	89 f1                	mov    ecx,esi
c0026ffb:	d3 e5                	shl    ebp,cl
c0026ffd:	8b 14 24             	mov    edx,DWORD PTR [esp]
c0027000:	88 c1                	mov    cl,al
c0027002:	d3 ea                	shr    edx,cl
c0027004:	09 d5                	or     ebp,edx
c0027006:	89 e8                	mov    eax,ebp
c0027008:	89 da                	mov    edx,ebx
c002700a:	f7 74 24 0c          	div    DWORD PTR [esp+0xc]
c002700e:	89 d3                	mov    ebx,edx
c0027010:	89 c5                	mov    ebp,eax
c0027012:	f7 e7                	mul    edi
c0027014:	39 d3                	cmp    ebx,edx
c0027016:	72 18                	jb     c0027030 <__divdi3+0x138>
c0027018:	74 0a                	je     c0027024 <__divdi3+0x12c>
c002701a:	89 e9                	mov    ecx,ebp
c002701c:	31 f6                	xor    esi,esi
c002701e:	e9 2d ff ff ff       	jmp    c0026f50 <__divdi3+0x58>
c0027023:	90                   	nop
c0027024:	8b 3c 24             	mov    edi,DWORD PTR [esp]
c0027027:	89 f1                	mov    ecx,esi
c0027029:	d3 e7                	shl    edi,cl
c002702b:	39 c7                	cmp    edi,eax
c002702d:	73 eb                	jae    c002701a <__divdi3+0x122>
c002702f:	90                   	nop
c0027030:	8d 4d ff             	lea    ecx,[ebp-0x1]
c0027033:	31 f6                	xor    esi,esi
c0027035:	e9 16 ff ff ff       	jmp    c0026f50 <__divdi3+0x58>
c002703a:	66 90                	xchg   ax,ax
c002703c:	31 c9                	xor    ecx,ecx
c002703e:	e9 0d ff ff ff       	jmp    c0026f50 <__divdi3+0x58>
c0027043:	90                   	nop

c0027044 <__moddi3>:
c0027044:	55                   	push   ebp
c0027045:	57                   	push   edi
c0027046:	56                   	push   esi
c0027047:	53                   	push   ebx
c0027048:	83 ec 2c             	sub    esp,0x2c
c002704b:	8b 4c 24 40          	mov    ecx,DWORD PTR [esp+0x40]
c002704f:	8b 5c 24 44          	mov    ebx,DWORD PTR [esp+0x44]
c0027053:	8b 44 24 48          	mov    eax,DWORD PTR [esp+0x48]
c0027057:	8b 54 24 4c          	mov    edx,DWORD PTR [esp+0x4c]
c002705b:	85 db                	test   ebx,ebx
c002705d:	0f 88 85 00 00 00    	js     c00270e8 <__moddi3+0xa4>
c0027063:	89 de                	mov    esi,ebx
c0027065:	c7 44 24 10 00 00 00 00 	mov    DWORD PTR [esp+0x10],0x0
c002706d:	89 d7                	mov    edi,edx
c002706f:	85 d2                	test   edx,edx
c0027071:	79 09                	jns    c002707c <__moddi3+0x38>
c0027073:	f7 d8                	neg    eax
c0027075:	83 d2 00             	adc    edx,0x0
c0027078:	f7 da                	neg    edx
c002707a:	89 d7                	mov    edi,edx
c002707c:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c0027080:	89 cd                	mov    ebp,ecx
c0027082:	85 ff                	test   edi,edi
c0027084:	75 52                	jne    c00270d8 <__moddi3+0x94>
c0027086:	89 c3                	mov    ebx,eax
c0027088:	39 f0                	cmp    eax,esi
c002708a:	76 24                	jbe    c00270b0 <__moddi3+0x6c>
c002708c:	89 c8                	mov    eax,ecx
c002708e:	89 f2                	mov    edx,esi
c0027090:	f7 f3                	div    ebx
c0027092:	89 d6                	mov    esi,edx
c0027094:	89 f0                	mov    eax,esi
c0027096:	31 d2                	xor    edx,edx
c0027098:	8b 4c 24 10          	mov    ecx,DWORD PTR [esp+0x10]
c002709c:	85 c9                	test   ecx,ecx
c002709e:	74 07                	je     c00270a7 <__moddi3+0x63>
c00270a0:	f7 d8                	neg    eax
c00270a2:	83 d2 00             	adc    edx,0x0
c00270a5:	f7 da                	neg    edx
c00270a7:	83 c4 2c             	add    esp,0x2c
c00270aa:	5b                   	pop    ebx
c00270ab:	5e                   	pop    esi
c00270ac:	5f                   	pop    edi
c00270ad:	5d                   	pop    ebp
c00270ae:	c3                   	ret    
c00270af:	90                   	nop
c00270b0:	8b 5c 24 0c          	mov    ebx,DWORD PTR [esp+0xc]
c00270b4:	85 db                	test   ebx,ebx
c00270b6:	75 0d                	jne    c00270c5 <__moddi3+0x81>
c00270b8:	b8 01 00 00 00       	mov    eax,0x1
c00270bd:	31 d2                	xor    edx,edx
c00270bf:	f7 f7                	div    edi
c00270c1:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
c00270c5:	89 f0                	mov    eax,esi
c00270c7:	31 d2                	xor    edx,edx
c00270c9:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c00270cd:	f7 f7                	div    edi
c00270cf:	89 e8                	mov    eax,ebp
c00270d1:	f7 f7                	div    edi
c00270d3:	89 d6                	mov    esi,edx
c00270d5:	eb bd                	jmp    c0027094 <__moddi3+0x50>
c00270d7:	90                   	nop
c00270d8:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c00270dc:	39 f7                	cmp    edi,esi
c00270de:	76 20                	jbe    c0027100 <__moddi3+0xbc>
c00270e0:	89 c8                	mov    eax,ecx
c00270e2:	89 f2                	mov    edx,esi
c00270e4:	eb b2                	jmp    c0027098 <__moddi3+0x54>
c00270e6:	66 90                	xchg   ax,ax
c00270e8:	f7 d9                	neg    ecx
c00270ea:	83 d3 00             	adc    ebx,0x0
c00270ed:	f7 db                	neg    ebx
c00270ef:	89 de                	mov    esi,ebx
c00270f1:	c7 44 24 10 ff ff ff ff 	mov    DWORD PTR [esp+0x10],0xffffffff
c00270f9:	e9 6f ff ff ff       	jmp    c002706d <__moddi3+0x29>
c00270fe:	66 90                	xchg   ax,ax
c0027100:	0f bd c7             	bsr    eax,edi
c0027103:	83 f0 1f             	xor    eax,0x1f
c0027106:	89 44 24 18          	mov    DWORD PTR [esp+0x18],eax
c002710a:	75 24                	jne    c0027130 <__moddi3+0xec>
c002710c:	39 f7                	cmp    edi,esi
c002710e:	72 06                	jb     c0027116 <__moddi3+0xd2>
c0027110:	39 4c 24 0c          	cmp    DWORD PTR [esp+0xc],ecx
c0027114:	77 0c                	ja     c0027122 <__moddi3+0xde>
c0027116:	89 e9                	mov    ecx,ebp
c0027118:	2b 4c 24 0c          	sub    ecx,DWORD PTR [esp+0xc]
c002711c:	19 fe                	sbb    esi,edi
c002711e:	89 4c 24 14          	mov    DWORD PTR [esp+0x14],ecx
c0027122:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0027126:	89 f2                	mov    edx,esi
c0027128:	e9 6b ff ff ff       	jmp    c0027098 <__moddi3+0x54>
c002712d:	8d 76 00             	lea    esi,[esi+0x0]
c0027130:	b8 20 00 00 00       	mov    eax,0x20
c0027135:	89 c2                	mov    edx,eax
c0027137:	8b 5c 24 18          	mov    ebx,DWORD PTR [esp+0x18]
c002713b:	29 da                	sub    edx,ebx
c002713d:	89 54 24 1c          	mov    DWORD PTR [esp+0x1c],edx
c0027141:	88 d9                	mov    cl,bl
c0027143:	d3 e7                	shl    edi,cl
c0027145:	8b 44 24 0c          	mov    eax,DWORD PTR [esp+0xc]
c0027149:	88 d1                	mov    cl,dl
c002714b:	d3 e8                	shr    eax,cl
c002714d:	09 c7                	or     edi,eax
c002714f:	89 7c 24 14          	mov    DWORD PTR [esp+0x14],edi
c0027153:	8b 7c 24 0c          	mov    edi,DWORD PTR [esp+0xc]
c0027157:	89 d8                	mov    eax,ebx
c0027159:	88 d9                	mov    cl,bl
c002715b:	d3 e7                	shl    edi,cl
c002715d:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027161:	89 f3                	mov    ebx,esi
c0027163:	88 d1                	mov    cl,dl
c0027165:	d3 eb                	shr    ebx,cl
c0027167:	89 c7                	mov    edi,eax
c0027169:	88 c1                	mov    cl,al
c002716b:	d3 e6                	shl    esi,cl
c002716d:	89 e8                	mov    eax,ebp
c002716f:	88 d1                	mov    cl,dl
c0027171:	d3 e8                	shr    eax,cl
c0027173:	09 f0                	or     eax,esi
c0027175:	89 f9                	mov    ecx,edi
c0027177:	d3 e5                	shl    ebp,cl
c0027179:	89 da                	mov    edx,ebx
c002717b:	f7 74 24 14          	div    DWORD PTR [esp+0x14]
c002717f:	89 d3                	mov    ebx,edx
c0027181:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027185:	89 c6                	mov    esi,eax
c0027187:	89 d1                	mov    ecx,edx
c0027189:	39 d3                	cmp    ebx,edx
c002718b:	72 27                	jb     c00271b4 <__moddi3+0x170>
c002718d:	74 21                	je     c00271b0 <__moddi3+0x16c>
c002718f:	29 f5                	sub    ebp,esi
c0027191:	19 cb                	sbb    ebx,ecx
c0027193:	89 de                	mov    esi,ebx
c0027195:	8a 4c 24 1c          	mov    cl,BYTE PTR [esp+0x1c]
c0027199:	d3 e6                	shl    esi,cl
c002719b:	8b 7c 24 18          	mov    edi,DWORD PTR [esp+0x18]
c002719f:	89 f9                	mov    ecx,edi
c00271a1:	d3 ed                	shr    ebp,cl
c00271a3:	09 ee                	or     esi,ebp
c00271a5:	89 f0                	mov    eax,esi
c00271a7:	d3 eb                	shr    ebx,cl
c00271a9:	89 da                	mov    edx,ebx
c00271ab:	e9 e8 fe ff ff       	jmp    c0027098 <__moddi3+0x54>
c00271b0:	39 c5                	cmp    ebp,eax
c00271b2:	73 db                	jae    c002718f <__moddi3+0x14b>
c00271b4:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00271b8:	1b 54 24 14          	sbb    edx,DWORD PTR [esp+0x14]
c00271bc:	89 d1                	mov    ecx,edx
c00271be:	89 c6                	mov    esi,eax
c00271c0:	eb cd                	jmp    c002718f <__moddi3+0x14b>
c00271c2:	66 90                	xchg   ax,ax

c00271c4 <__udivdi3>:
c00271c4:	55                   	push   ebp
c00271c5:	57                   	push   edi
c00271c6:	56                   	push   esi
c00271c7:	53                   	push   ebx
c00271c8:	83 ec 1c             	sub    esp,0x1c
c00271cb:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
c00271cf:	8b 74 24 34          	mov    esi,DWORD PTR [esp+0x34]
c00271d3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00271d7:	8b 54 24 3c          	mov    edx,DWORD PTR [esp+0x3c]
c00271db:	85 d2                	test   edx,edx
c00271dd:	75 41                	jne    c0027220 <__udivdi3+0x5c>
c00271df:	39 f7                	cmp    edi,esi
c00271e1:	76 15                	jbe    c00271f8 <__udivdi3+0x34>
c00271e3:	89 e8                	mov    eax,ebp
c00271e5:	89 f2                	mov    edx,esi
c00271e7:	f7 f7                	div    edi
c00271e9:	31 db                	xor    ebx,ebx
c00271eb:	89 da                	mov    edx,ebx
c00271ed:	83 c4 1c             	add    esp,0x1c
c00271f0:	5b                   	pop    ebx
c00271f1:	5e                   	pop    esi
c00271f2:	5f                   	pop    edi
c00271f3:	5d                   	pop    ebp
c00271f4:	c3                   	ret    
c00271f5:	8d 76 00             	lea    esi,[esi+0x0]
c00271f8:	89 f9                	mov    ecx,edi
c00271fa:	85 ff                	test   edi,edi
c00271fc:	75 0b                	jne    c0027209 <__udivdi3+0x45>
c00271fe:	b8 01 00 00 00       	mov    eax,0x1
c0027203:	31 d2                	xor    edx,edx
c0027205:	f7 f7                	div    edi
c0027207:	89 c1                	mov    ecx,eax
c0027209:	31 d2                	xor    edx,edx
c002720b:	89 f0                	mov    eax,esi
c002720d:	f7 f1                	div    ecx
c002720f:	89 c3                	mov    ebx,eax
c0027211:	89 e8                	mov    eax,ebp
c0027213:	f7 f1                	div    ecx
c0027215:	89 da                	mov    edx,ebx
c0027217:	83 c4 1c             	add    esp,0x1c
c002721a:	5b                   	pop    ebx
c002721b:	5e                   	pop    esi
c002721c:	5f                   	pop    edi
c002721d:	5d                   	pop    ebp
c002721e:	c3                   	ret    
c002721f:	90                   	nop
c0027220:	39 f2                	cmp    edx,esi
c0027222:	77 1c                	ja     c0027240 <__udivdi3+0x7c>
c0027224:	0f bd da             	bsr    ebx,edx
c0027227:	83 f3 1f             	xor    ebx,0x1f
c002722a:	75 24                	jne    c0027250 <__udivdi3+0x8c>
c002722c:	39 f2                	cmp    edx,esi
c002722e:	72 08                	jb     c0027238 <__udivdi3+0x74>
c0027230:	39 ef                	cmp    edi,ebp
c0027232:	0f 87 84 00 00 00    	ja     c00272bc <__udivdi3+0xf8>
c0027238:	b8 01 00 00 00       	mov    eax,0x1
c002723d:	eb ac                	jmp    c00271eb <__udivdi3+0x27>
c002723f:	90                   	nop
c0027240:	31 db                	xor    ebx,ebx
c0027242:	31 c0                	xor    eax,eax
c0027244:	89 da                	mov    edx,ebx
c0027246:	83 c4 1c             	add    esp,0x1c
c0027249:	5b                   	pop    ebx
c002724a:	5e                   	pop    esi
c002724b:	5f                   	pop    edi
c002724c:	5d                   	pop    ebp
c002724d:	c3                   	ret    
c002724e:	66 90                	xchg   ax,ax
c0027250:	b8 20 00 00 00       	mov    eax,0x20
c0027255:	29 d8                	sub    eax,ebx
c0027257:	88 d9                	mov    cl,bl
c0027259:	d3 e2                	shl    edx,cl
c002725b:	89 54 24 08          	mov    DWORD PTR [esp+0x8],edx
c002725f:	89 fa                	mov    edx,edi
c0027261:	88 c1                	mov    cl,al
c0027263:	d3 ea                	shr    edx,cl
c0027265:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027269:	09 d1                	or     ecx,edx
c002726b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002726f:	88 d9                	mov    cl,bl
c0027271:	d3 e7                	shl    edi,cl
c0027273:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027277:	89 f7                	mov    edi,esi
c0027279:	88 c1                	mov    cl,al
c002727b:	d3 ef                	shr    edi,cl
c002727d:	88 d9                	mov    cl,bl
c002727f:	d3 e6                	shl    esi,cl
c0027281:	89 ea                	mov    edx,ebp
c0027283:	88 c1                	mov    cl,al
c0027285:	d3 ea                	shr    edx,cl
c0027287:	09 d6                	or     esi,edx
c0027289:	89 f0                	mov    eax,esi
c002728b:	89 fa                	mov    edx,edi
c002728d:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c0027291:	89 d7                	mov    edi,edx
c0027293:	89 c6                	mov    esi,eax
c0027295:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c0027299:	39 d7                	cmp    edi,edx
c002729b:	72 13                	jb     c00272b0 <__udivdi3+0xec>
c002729d:	74 09                	je     c00272a8 <__udivdi3+0xe4>
c002729f:	89 f0                	mov    eax,esi
c00272a1:	31 db                	xor    ebx,ebx
c00272a3:	e9 43 ff ff ff       	jmp    c00271eb <__udivdi3+0x27>
c00272a8:	88 d9                	mov    cl,bl
c00272aa:	d3 e5                	shl    ebp,cl
c00272ac:	39 c5                	cmp    ebp,eax
c00272ae:	73 ef                	jae    c002729f <__udivdi3+0xdb>
c00272b0:	8d 46 ff             	lea    eax,[esi-0x1]
c00272b3:	31 db                	xor    ebx,ebx
c00272b5:	e9 31 ff ff ff       	jmp    c00271eb <__udivdi3+0x27>
c00272ba:	66 90                	xchg   ax,ax
c00272bc:	31 c0                	xor    eax,eax
c00272be:	e9 28 ff ff ff       	jmp    c00271eb <__udivdi3+0x27>
c00272c3:	90                   	nop

c00272c4 <__umoddi3>:
c00272c4:	55                   	push   ebp
c00272c5:	57                   	push   edi
c00272c6:	56                   	push   esi
c00272c7:	53                   	push   ebx
c00272c8:	83 ec 1c             	sub    esp,0x1c
c00272cb:	8b 74 24 30          	mov    esi,DWORD PTR [esp+0x30]
c00272cf:	8b 5c 24 34          	mov    ebx,DWORD PTR [esp+0x34]
c00272d3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
c00272d7:	8b 44 24 3c          	mov    eax,DWORD PTR [esp+0x3c]
c00272db:	89 da                	mov    edx,ebx
c00272dd:	85 c0                	test   eax,eax
c00272df:	75 37                	jne    c0027318 <__umoddi3+0x54>
c00272e1:	39 df                	cmp    edi,ebx
c00272e3:	76 13                	jbe    c00272f8 <__umoddi3+0x34>
c00272e5:	89 f0                	mov    eax,esi
c00272e7:	f7 f7                	div    edi
c00272e9:	89 d0                	mov    eax,edx
c00272eb:	31 d2                	xor    edx,edx
c00272ed:	83 c4 1c             	add    esp,0x1c
c00272f0:	5b                   	pop    ebx
c00272f1:	5e                   	pop    esi
c00272f2:	5f                   	pop    edi
c00272f3:	5d                   	pop    ebp
c00272f4:	c3                   	ret    
c00272f5:	8d 76 00             	lea    esi,[esi+0x0]
c00272f8:	89 fd                	mov    ebp,edi
c00272fa:	85 ff                	test   edi,edi
c00272fc:	75 0b                	jne    c0027309 <__umoddi3+0x45>
c00272fe:	b8 01 00 00 00       	mov    eax,0x1
c0027303:	31 d2                	xor    edx,edx
c0027305:	f7 f7                	div    edi
c0027307:	89 c5                	mov    ebp,eax
c0027309:	89 d8                	mov    eax,ebx
c002730b:	31 d2                	xor    edx,edx
c002730d:	f7 f5                	div    ebp
c002730f:	89 f0                	mov    eax,esi
c0027311:	f7 f5                	div    ebp
c0027313:	89 d0                	mov    eax,edx
c0027315:	eb d4                	jmp    c00272eb <__umoddi3+0x27>
c0027317:	90                   	nop
c0027318:	89 f1                	mov    ecx,esi
c002731a:	39 d8                	cmp    eax,ebx
c002731c:	76 0a                	jbe    c0027328 <__umoddi3+0x64>
c002731e:	89 f0                	mov    eax,esi
c0027320:	83 c4 1c             	add    esp,0x1c
c0027323:	5b                   	pop    ebx
c0027324:	5e                   	pop    esi
c0027325:	5f                   	pop    edi
c0027326:	5d                   	pop    ebp
c0027327:	c3                   	ret    
c0027328:	0f bd e8             	bsr    ebp,eax
c002732b:	83 f5 1f             	xor    ebp,0x1f
c002732e:	75 1c                	jne    c002734c <__umoddi3+0x88>
c0027330:	39 d8                	cmp    eax,ebx
c0027332:	72 04                	jb     c0027338 <__umoddi3+0x74>
c0027334:	39 f7                	cmp    edi,esi
c0027336:	77 08                	ja     c0027340 <__umoddi3+0x7c>
c0027338:	89 da                	mov    edx,ebx
c002733a:	29 fe                	sub    esi,edi
c002733c:	19 c2                	sbb    edx,eax
c002733e:	89 f1                	mov    ecx,esi
c0027340:	89 c8                	mov    eax,ecx
c0027342:	83 c4 1c             	add    esp,0x1c
c0027345:	5b                   	pop    ebx
c0027346:	5e                   	pop    esi
c0027347:	5f                   	pop    edi
c0027348:	5d                   	pop    ebp
c0027349:	c3                   	ret    
c002734a:	66 90                	xchg   ax,ax
c002734c:	ba 20 00 00 00       	mov    edx,0x20
c0027351:	29 ea                	sub    edx,ebp
c0027353:	89 e9                	mov    ecx,ebp
c0027355:	d3 e0                	shl    eax,cl
c0027357:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
c002735b:	89 f8                	mov    eax,edi
c002735d:	89 54 24 04          	mov    DWORD PTR [esp+0x4],edx
c0027361:	88 d1                	mov    cl,dl
c0027363:	d3 e8                	shr    eax,cl
c0027365:	8b 4c 24 08          	mov    ecx,DWORD PTR [esp+0x8]
c0027369:	09 c1                	or     ecx,eax
c002736b:	89 4c 24 08          	mov    DWORD PTR [esp+0x8],ecx
c002736f:	89 e9                	mov    ecx,ebp
c0027371:	d3 e7                	shl    edi,cl
c0027373:	89 7c 24 0c          	mov    DWORD PTR [esp+0xc],edi
c0027377:	89 d8                	mov    eax,ebx
c0027379:	8b 54 24 04          	mov    edx,DWORD PTR [esp+0x4]
c002737d:	88 d1                	mov    cl,dl
c002737f:	d3 e8                	shr    eax,cl
c0027381:	89 c7                	mov    edi,eax
c0027383:	89 e9                	mov    ecx,ebp
c0027385:	d3 e3                	shl    ebx,cl
c0027387:	89 f0                	mov    eax,esi
c0027389:	88 d1                	mov    cl,dl
c002738b:	d3 e8                	shr    eax,cl
c002738d:	09 d8                	or     eax,ebx
c002738f:	89 e9                	mov    ecx,ebp
c0027391:	d3 e6                	shl    esi,cl
c0027393:	89 f3                	mov    ebx,esi
c0027395:	89 fa                	mov    edx,edi
c0027397:	f7 74 24 08          	div    DWORD PTR [esp+0x8]
c002739b:	89 d1                	mov    ecx,edx
c002739d:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
c00273a1:	89 c6                	mov    esi,eax
c00273a3:	89 d7                	mov    edi,edx
c00273a5:	39 d1                	cmp    ecx,edx
c00273a7:	72 27                	jb     c00273d0 <__umoddi3+0x10c>
c00273a9:	74 21                	je     c00273cc <__umoddi3+0x108>
c00273ab:	89 ca                	mov    edx,ecx
c00273ad:	29 f3                	sub    ebx,esi
c00273af:	19 fa                	sbb    edx,edi
c00273b1:	89 d0                	mov    eax,edx
c00273b3:	8a 4c 24 04          	mov    cl,BYTE PTR [esp+0x4]
c00273b7:	d3 e0                	shl    eax,cl
c00273b9:	89 e9                	mov    ecx,ebp
c00273bb:	d3 eb                	shr    ebx,cl
c00273bd:	09 d8                	or     eax,ebx
c00273bf:	d3 ea                	shr    edx,cl
c00273c1:	83 c4 1c             	add    esp,0x1c
c00273c4:	5b                   	pop    ebx
c00273c5:	5e                   	pop    esi
c00273c6:	5f                   	pop    edi
c00273c7:	5d                   	pop    ebp
c00273c8:	c3                   	ret    
c00273c9:	8d 76 00             	lea    esi,[esi+0x0]
c00273cc:	39 c3                	cmp    ebx,eax
c00273ce:	73 db                	jae    c00273ab <__umoddi3+0xe7>
c00273d0:	2b 44 24 0c          	sub    eax,DWORD PTR [esp+0xc]
c00273d4:	1b 54 24 08          	sbb    edx,DWORD PTR [esp+0x8]
c00273d8:	89 d7                	mov    edi,edx
c00273da:	89 c6                	mov    esi,eax
c00273dc:	eb cd                	jmp    c00273ab <__umoddi3+0xe7>

c00273de <__addsf3>:
c00273de:	55                   	push   ebp
c00273df:	89 e5                	mov    ebp,esp
c00273e1:	57                   	push   edi
c00273e2:	56                   	push   esi
c00273e3:	53                   	push   ebx
c00273e4:	83 ec 08             	sub    esp,0x8
c00273e7:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00273ea:	89 fa                	mov    edx,edi
c00273ec:	89 f8                	mov    eax,edi
c00273ee:	c1 f8 17             	sar    eax,0x17
c00273f1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c00273f4:	c1 e2 08             	shl    edx,0x8
c00273f7:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c00273fd:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027400:	89 de                	mov    esi,ebx
c0027402:	c1 fe 17             	sar    esi,0x17
c0027405:	c1 e3 08             	shl    ebx,0x8
c0027408:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c002740e:	31 f0                	xor    eax,esi
c0027410:	0f 88 3b 01 00 00    	js     c0027551 <__addsf3+0x173>
c0027416:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
c0027419:	29 f1                	sub    ecx,esi
c002741b:	85 c9                	test   ecx,ecx
c002741d:	7e 54                	jle    c0027473 <__addsf3+0x95>
c002741f:	89 f0                	mov    eax,esi
c0027421:	84 c0                	test   al,al
c0027423:	75 10                	jne    c0027435 <__addsf3+0x57>
c0027425:	85 db                	test   ebx,ebx
c0027427:	0f 84 aa 02 00 00    	je     c00276d7 <__addsf3+0x2f9>
c002742d:	49                   	dec    ecx
c002742e:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027431:	74 38                	je     c002746b <__addsf3+0x8d>
c0027433:	eb 13                	jmp    c0027448 <__addsf3+0x6a>
c0027435:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c0027438:	f7 d0                	not    eax
c002743a:	84 c0                	test   al,al
c002743c:	0f 84 95 02 00 00    	je     c00276d7 <__addsf3+0x2f9>
c0027442:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027448:	83 f9 1f             	cmp    ecx,0x1f
c002744b:	0f 8f 86 02 00 00    	jg     c00276d7 <__addsf3+0x2f9>
c0027451:	89 de                	mov    esi,ebx
c0027453:	d3 ee                	shr    esi,cl
c0027455:	b8 20 00 00 00       	mov    eax,0x20
c002745a:	29 c8                	sub    eax,ecx
c002745c:	89 c1                	mov    ecx,eax
c002745e:	d3 e3                	shl    ebx,cl
c0027460:	31 c0                	xor    eax,eax
c0027462:	85 db                	test   ebx,ebx
c0027464:	0f 95 c0             	setne  al
c0027467:	09 f0                	or     eax,esi
c0027469:	01 d0                	add    eax,edx
c002746b:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002746e:	e9 b6 00 00 00       	jmp    c0027529 <__addsf3+0x14b>
c0027473:	74 5c                	je     c00274d1 <__addsf3+0xf3>
c0027475:	89 f1                	mov    ecx,esi
c0027477:	2b 4d f0             	sub    ecx,DWORD PTR [ebp-0x10]
c002747a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c002747d:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c0027481:	75 14                	jne    c0027497 <__addsf3+0xb9>
c0027483:	85 d2                	test   edx,edx
c0027485:	0f 84 4c 02 00 00    	je     c00276d7 <__addsf3+0x2f9>
c002748b:	49                   	dec    ecx
c002748c:	8d 04 1a             	lea    eax,[edx+ebx*1]
c002748f:	0f 84 94 00 00 00    	je     c0027529 <__addsf3+0x14b>
c0027495:	eb 12                	jmp    c00274a9 <__addsf3+0xcb>
c0027497:	89 f0                	mov    eax,esi
c0027499:	f7 d0                	not    eax
c002749b:	84 c0                	test   al,al
c002749d:	0f 84 34 02 00 00    	je     c00276d7 <__addsf3+0x2f9>
c00274a3:	81 ca 00 00 00 80    	or     edx,0x80000000
c00274a9:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00274ac:	83 f9 1f             	cmp    ecx,0x1f
c00274af:	0f 8f 22 02 00 00    	jg     c00276d7 <__addsf3+0x2f9>
c00274b5:	89 d7                	mov    edi,edx
c00274b7:	d3 ef                	shr    edi,cl
c00274b9:	b8 20 00 00 00       	mov    eax,0x20
c00274be:	29 c8                	sub    eax,ecx
c00274c0:	89 c1                	mov    ecx,eax
c00274c2:	d3 e2                	shl    edx,cl
c00274c4:	31 c0                	xor    eax,eax
c00274c6:	85 d2                	test   edx,edx
c00274c8:	0f 95 c0             	setne  al
c00274cb:	09 f8                	or     eax,edi
c00274cd:	01 d8                	add    eax,ebx
c00274cf:	eb 58                	jmp    c0027529 <__addsf3+0x14b>
c00274d1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c00274d4:	8d 70 01             	lea    esi,[eax+0x1]
c00274d7:	f7 c6 fe 00 00 00    	test   esi,0xfe
c00274dd:	75 32                	jne    c0027511 <__addsf3+0x133>
c00274df:	80 7d f0 00          	cmp    BYTE PTR [ebp-0x10],0x0
c00274e3:	75 1f                	jne    c0027504 <__addsf3+0x126>
c00274e5:	85 d2                	test   edx,edx
c00274e7:	0f 84 e0 01 00 00    	je     c00276cd <__addsf3+0x2ef>
c00274ed:	85 db                	test   ebx,ebx
c00274ef:	0f 84 e2 01 00 00    	je     c00276d7 <__addsf3+0x2f9>
c00274f5:	89 d0                	mov    eax,edx
c00274f7:	01 d8                	add    eax,ebx
c00274f9:	0f 89 a9 01 00 00    	jns    c00276a8 <__addsf3+0x2ca>
c00274ff:	e9 9d 01 00 00       	jmp    c00276a1 <__addsf3+0x2c3>
c0027504:	85 d2                	test   edx,edx
c0027506:	0f 85 cb 01 00 00    	jne    c00276d7 <__addsf3+0x2f9>
c002750c:	e9 bc 01 00 00       	jmp    c00276cd <__addsf3+0x2ef>
c0027511:	31 c0                	xor    eax,eax
c0027513:	89 f1                	mov    ecx,esi
c0027515:	f7 d1                	not    ecx
c0027517:	84 c9                	test   cl,cl
c0027519:	0f 84 90 01 00 00    	je     c00276af <__addsf3+0x2d1>
c002751f:	8d 04 1a             	lea    eax,[edx+ebx*1]
c0027522:	d1 e8                	shr    eax,1
c0027524:	e9 86 01 00 00       	jmp    c00276af <__addsf3+0x2d1>
c0027529:	85 c0                	test   eax,eax
c002752b:	0f 89 7e 01 00 00    	jns    c00276af <__addsf3+0x2d1>
c0027531:	46                   	inc    esi
c0027532:	89 f2                	mov    edx,esi
c0027534:	f7 d2                	not    edx
c0027536:	84 d2                	test   dl,dl
c0027538:	0f 84 6f 01 00 00    	je     c00276ad <__addsf3+0x2cf>
c002753e:	89 c2                	mov    edx,eax
c0027540:	83 e2 01             	and    edx,0x1
c0027543:	d1 e8                	shr    eax,1
c0027545:	25 ff ff ff 3f       	and    eax,0x3fffffff
c002754a:	09 d0                	or     eax,edx
c002754c:	e9 5e 01 00 00       	jmp    c00276af <__addsf3+0x2d1>
c0027551:	0f b6 45 f0          	movzx  eax,BYTE PTR [ebp-0x10]
c0027555:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0027558:	89 f0                	mov    eax,esi
c002755a:	0f b6 c0             	movzx  eax,al
c002755d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027560:	29 c1                	sub    ecx,eax
c0027562:	85 c9                	test   ecx,ecx
c0027564:	7e 55                	jle    c00275bb <__addsf3+0x1dd>
c0027566:	85 c0                	test   eax,eax
c0027568:	75 11                	jne    c002757b <__addsf3+0x19d>
c002756a:	85 db                	test   ebx,ebx
c002756c:	0f 84 65 01 00 00    	je     c00276d7 <__addsf3+0x2f9>
c0027572:	49                   	dec    ecx
c0027573:	75 19                	jne    c002758e <__addsf3+0x1b0>
c0027575:	89 d0                	mov    eax,edx
c0027577:	29 d8                	sub    eax,ebx
c0027579:	eb 38                	jmp    c00275b3 <__addsf3+0x1d5>
c002757b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002757e:	f7 d0                	not    eax
c0027580:	84 c0                	test   al,al
c0027582:	0f 84 4f 01 00 00    	je     c00276d7 <__addsf3+0x2f9>
c0027588:	81 cb 00 00 00 80    	or     ebx,0x80000000
c002758e:	83 f9 1f             	cmp    ecx,0x1f
c0027591:	0f 8f 40 01 00 00    	jg     c00276d7 <__addsf3+0x2f9>
c0027597:	89 de                	mov    esi,ebx
c0027599:	d3 ee                	shr    esi,cl
c002759b:	b8 20 00 00 00       	mov    eax,0x20
c00275a0:	29 c8                	sub    eax,ecx
c00275a2:	89 c1                	mov    ecx,eax
c00275a4:	d3 e3                	shl    ebx,cl
c00275a6:	31 c0                	xor    eax,eax
c00275a8:	85 db                	test   ebx,ebx
c00275aa:	0f 95 c0             	setne  al
c00275ad:	09 f0                	or     eax,esi
c00275af:	29 c2                	sub    edx,eax
c00275b1:	89 d0                	mov    eax,edx
c00275b3:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00275b6:	e9 af 00 00 00       	jmp    c002766a <__addsf3+0x28c>
c00275bb:	74 5c                	je     c0027619 <__addsf3+0x23b>
c00275bd:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
c00275c0:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00275c3:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c00275c7:	75 14                	jne    c00275dd <__addsf3+0x1ff>
c00275c9:	85 d2                	test   edx,edx
c00275cb:	0f 84 06 01 00 00    	je     c00276d7 <__addsf3+0x2f9>
c00275d1:	48                   	dec    eax
c00275d2:	75 1b                	jne    c00275ef <__addsf3+0x211>
c00275d4:	89 d8                	mov    eax,ebx
c00275d6:	29 d0                	sub    eax,edx
c00275d8:	e9 8d 00 00 00       	jmp    c002766a <__addsf3+0x28c>
c00275dd:	89 f1                	mov    ecx,esi
c00275df:	f7 d1                	not    ecx
c00275e1:	84 c9                	test   cl,cl
c00275e3:	0f 84 ee 00 00 00    	je     c00276d7 <__addsf3+0x2f9>
c00275e9:	81 ca 00 00 00 80    	or     edx,0x80000000
c00275ef:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00275f2:	83 f8 1f             	cmp    eax,0x1f
c00275f5:	0f 8f dc 00 00 00    	jg     c00276d7 <__addsf3+0x2f9>
c00275fb:	89 d7                	mov    edi,edx
c00275fd:	88 c1                	mov    cl,al
c00275ff:	d3 ef                	shr    edi,cl
c0027601:	b9 20 00 00 00       	mov    ecx,0x20
c0027606:	29 c1                	sub    ecx,eax
c0027608:	d3 e2                	shl    edx,cl
c002760a:	31 c0                	xor    eax,eax
c002760c:	85 d2                	test   edx,edx
c002760e:	0f 95 c0             	setne  al
c0027611:	09 f8                	or     eax,edi
c0027613:	29 c3                	sub    ebx,eax
c0027615:	89 d8                	mov    eax,ebx
c0027617:	eb 51                	jmp    c002766a <__addsf3+0x28c>
c0027619:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
c002761c:	40                   	inc    eax
c002761d:	a8 fe                	test   al,0xfe
c002761f:	75 3d                	jne    c002765e <__addsf3+0x280>
c0027621:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
c0027625:	0f 85 a7 00 00 00    	jne    c00276d2 <__addsf3+0x2f4>
c002762b:	85 d2                	test   edx,edx
c002762d:	75 12                	jne    c0027641 <__addsf3+0x263>
c002762f:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c0027632:	85 db                	test   ebx,ebx
c0027634:	0f 85 9d 00 00 00    	jne    c00276d7 <__addsf3+0x2f9>
c002763a:	31 ff                	xor    edi,edi
c002763c:	e9 96 00 00 00       	jmp    c00276d7 <__addsf3+0x2f9>
c0027641:	85 db                	test   ebx,ebx
c0027643:	0f 84 8e 00 00 00    	je     c00276d7 <__addsf3+0x2f9>
c0027649:	89 d0                	mov    eax,edx
c002764b:	29 d8                	sub    eax,ebx
c002764d:	79 06                	jns    c0027655 <__addsf3+0x277>
c002764f:	89 d8                	mov    eax,ebx
c0027651:	29 d0                	sub    eax,edx
c0027653:	eb 5a                	jmp    c00276af <__addsf3+0x2d1>
c0027655:	bf 00 00 00 00       	mov    edi,0x0
c002765a:	74 7b                	je     c00276d7 <__addsf3+0x2f9>
c002765c:	eb 4a                	jmp    c00276a8 <__addsf3+0x2ca>
c002765e:	89 d0                	mov    eax,edx
c0027660:	29 d8                	sub    eax,ebx
c0027662:	79 12                	jns    c0027676 <__addsf3+0x298>
c0027664:	89 d8                	mov    eax,ebx
c0027666:	29 d0                	sub    eax,edx
c0027668:	eb 09                	jmp    c0027673 <__addsf3+0x295>
c002766a:	85 c0                	test   eax,eax
c002766c:	79 41                	jns    c00276af <__addsf3+0x2d1>
c002766e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027673:	89 75 f0             	mov    DWORD PTR [ebp-0x10],esi
c0027676:	31 f6                	xor    esi,esi
c0027678:	85 c0                	test   eax,eax
c002767a:	74 33                	je     c00276af <__addsf3+0x2d1>
c002767c:	0f bd c8             	bsr    ecx,eax
c002767f:	83 f1 1f             	xor    ecx,0x1f
c0027682:	d3 e0                	shl    eax,cl
c0027684:	0f b6 55 f0          	movzx  edx,BYTE PTR [ebp-0x10]
c0027688:	39 ca                	cmp    edx,ecx
c002768a:	7f 10                	jg     c002769c <__addsf3+0x2be>
c002768c:	29 d1                	sub    ecx,edx
c002768e:	41                   	inc    ecx
c002768f:	d3 e8                	shr    eax,cl
c0027691:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c0027694:	81 e6 00 ff ff ff    	and    esi,0xffffff00
c002769a:	eb 13                	jmp    c00276af <__addsf3+0x2d1>
c002769c:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c002769f:	29 ce                	sub    esi,ecx
c00276a1:	25 ff ff ff 7f       	and    eax,0x7fffffff
c00276a6:	eb 07                	jmp    c00276af <__addsf3+0x2d1>
c00276a8:	8b 75 f0             	mov    esi,DWORD PTR [ebp-0x10]
c00276ab:	eb 02                	jmp    c00276af <__addsf3+0x2d1>
c00276ad:	31 c0                	xor    eax,eax
c00276af:	89 c2                	mov    edx,eax
c00276b1:	c1 ea 08             	shr    edx,0x8
c00276b4:	a8 7f                	test   al,0x7f
c00276b6:	0f 95 c1             	setne  cl
c00276b9:	09 d1                	or     ecx,edx
c00276bb:	83 e1 01             	and    ecx,0x1
c00276be:	c1 e8 07             	shr    eax,0x7
c00276c1:	21 c8                	and    eax,ecx
c00276c3:	c1 e6 17             	shl    esi,0x17
c00276c6:	09 d6                	or     esi,edx
c00276c8:	8d 3c 30             	lea    edi,[eax+esi*1]
c00276cb:	eb 0a                	jmp    c00276d7 <__addsf3+0x2f9>
c00276cd:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
c00276d0:	eb 05                	jmp    c00276d7 <__addsf3+0x2f9>
c00276d2:	bf 00 00 c0 7f       	mov    edi,0x7fc00000
c00276d7:	89 f8                	mov    eax,edi
c00276d9:	5a                   	pop    edx
c00276da:	59                   	pop    ecx
c00276db:	5b                   	pop    ebx
c00276dc:	5e                   	pop    esi
c00276dd:	5f                   	pop    edi
c00276de:	5d                   	pop    ebp
c00276df:	c3                   	ret    

c00276e0 <__subsf3>:
c00276e0:	55                   	push   ebp
c00276e1:	89 e5                	mov    ebp,esp
c00276e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00276e6:	05 00 00 00 80       	add    eax,0x80000000
c00276eb:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
c00276ee:	5d                   	pop    ebp
c00276ef:	e9 ea fc ff ff       	jmp    c00273de <__addsf3>

c00276f4 <__negsf2>:
c00276f4:	55                   	push   ebp
c00276f5:	89 e5                	mov    ebp,esp
c00276f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00276fa:	05 00 00 00 80       	add    eax,0x80000000
c00276ff:	5d                   	pop    ebp
c0027700:	c3                   	ret    

c0027701 <__mulsf3>:
c0027701:	55                   	push   ebp
c0027702:	89 e5                	mov    ebp,esp
c0027704:	57                   	push   edi
c0027705:	56                   	push   esi
c0027706:	53                   	push   ebx
c0027707:	83 ec 1c             	sub    esp,0x1c
c002770a:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
c002770d:	89 f0                	mov    eax,esi
c002770f:	89 f1                	mov    ecx,esi
c0027711:	c1 f9 17             	sar    ecx,0x17
c0027714:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c0027717:	c1 e0 08             	shl    eax,0x8
c002771a:	25 00 ff ff 7f       	and    eax,0x7fffff00
c002771f:	89 c1                	mov    ecx,eax
c0027721:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c0027724:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027727:	89 c7                	mov    edi,eax
c0027729:	c1 ff 17             	sar    edi,0x17
c002772c:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c0027730:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c0027733:	89 f8                	mov    eax,edi
c0027735:	0f b6 c0             	movzx  eax,al
c0027738:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c002773b:	8d 5c 03 82          	lea    ebx,[ebx+eax*1-0x7e]
c002773f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027742:	42                   	inc    edx
c0027743:	80 e2 fe             	and    dl,0xfe
c0027746:	75 7b                	jne    c00277c3 <__mulsf3+0xc2>
c0027748:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c002774c:	74 54                	je     c00277a2 <__mulsf3+0xa1>
c002774e:	85 c9                	test   ecx,ecx
c0027750:	0f 85 64 01 00 00    	jne    c00278ba <__mulsf3+0x1b9>
c0027756:	8d 57 01             	lea    edx,[edi+0x1]
c0027759:	80 e2 fe             	and    dl,0xfe
c002775c:	75 1f                	jne    c002777d <__mulsf3+0x7c>
c002775e:	85 c0                	test   eax,eax
c0027760:	b8 00 00 00 00       	mov    eax,0x0
c0027765:	74 29                	je     c0027790 <__mulsf3+0x8f>
c0027767:	53                   	push   ebx
c0027768:	53                   	push   ebx
c0027769:	50                   	push   eax
c002776a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002776d:	e8 96 05 00 00       	call   c0027d08 <__nesf2>
c0027772:	83 c4 10             	add    esp,0x10
c0027775:	85 c0                	test   eax,eax
c0027777:	0f 85 3a 01 00 00    	jne    c00278b7 <__mulsf3+0x1b6>
c002777d:	85 ff                	test   edi,edi
c002777f:	0f 89 35 01 00 00    	jns    c00278ba <__mulsf3+0x1b9>
c0027785:	81 c6 00 00 00 80    	add    esi,0x80000000
c002778b:	e9 2a 01 00 00       	jmp    c00278ba <__mulsf3+0x1b9>
c0027790:	51                   	push   ecx
c0027791:	51                   	push   ecx
c0027792:	50                   	push   eax
c0027793:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027796:	e8 6d 05 00 00       	call   c0027d08 <__nesf2>
c002779b:	83 c4 10             	add    esp,0x10
c002779e:	85 c0                	test   eax,eax
c00277a0:	eb 15                	jmp    c00277b7 <__mulsf3+0xb6>
c00277a2:	85 c9                	test   ecx,ecx
c00277a4:	74 0b                	je     c00277b1 <__mulsf3+0xb0>
c00277a6:	8d 53 ff             	lea    edx,[ebx-0x1]
c00277a9:	01 c9                	add    ecx,ecx
c00277ab:	78 16                	js     c00277c3 <__mulsf3+0xc2>
c00277ad:	89 d3                	mov    ebx,edx
c00277af:	eb f5                	jmp    c00277a6 <__mulsf3+0xa5>
c00277b1:	89 f8                	mov    eax,edi
c00277b3:	f7 d0                	not    eax
c00277b5:	84 c0                	test   al,al
c00277b7:	75 c4                	jne    c002777d <__mulsf3+0x7c>
c00277b9:	be 00 00 c0 7f       	mov    esi,0x7fc00000
c00277be:	e9 f7 00 00 00       	jmp    c00278ba <__mulsf3+0x1b9>
c00277c3:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c00277c6:	c1 e6 08             	shl    esi,0x8
c00277c9:	81 e6 00 ff ff 7f    	and    esi,0x7fffff00
c00277cf:	8d 57 01             	lea    edx,[edi+0x1]
c00277d2:	80 e2 fe             	and    dl,0xfe
c00277d5:	75 63                	jne    c002783a <__mulsf3+0x139>
c00277d7:	85 c0                	test   eax,eax
c00277d9:	74 2f                	je     c002780a <__mulsf3+0x109>
c00277db:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c00277df:	0f 89 d2 00 00 00    	jns    c00278b7 <__mulsf3+0x1b6>
c00277e5:	52                   	push   edx
c00277e6:	52                   	push   edx
c00277e7:	6a 00                	push   0x0
c00277e9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00277ec:	e8 dc 04 00 00       	call   c0027ccd <__eqsf2>
c00277f1:	83 c4 10             	add    esp,0x10
c00277f4:	85 c0                	test   eax,eax
c00277f6:	0f 85 bb 00 00 00    	jne    c00278b7 <__mulsf3+0x1b6>
c00277fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00277ff:	8d b0 00 00 00 80    	lea    esi,[eax-0x80000000]
c0027805:	e9 b0 00 00 00       	jmp    c00278ba <__mulsf3+0x1b9>
c002780a:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c002780d:	50                   	push   eax
c002780e:	50                   	push   eax
c002780f:	6a 00                	push   0x0
c0027811:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027814:	e8 b4 04 00 00       	call   c0027ccd <__eqsf2>
c0027819:	83 c4 10             	add    esp,0x10
c002781c:	85 c0                	test   eax,eax
c002781e:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027821:	75 0c                	jne    c002782f <__mulsf3+0x12e>
c0027823:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0027827:	0f 89 8a 00 00 00    	jns    c00278b7 <__mulsf3+0x1b6>
c002782d:	eb cd                	jmp    c00277fc <__mulsf3+0xfb>
c002782f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0027832:	01 f6                	add    esi,esi
c0027834:	78 04                	js     c002783a <__mulsf3+0x139>
c0027836:	89 c3                	mov    ebx,eax
c0027838:	eb f5                	jmp    c002782f <__mulsf3+0x12e>
c002783a:	89 c8                	mov    eax,ecx
c002783c:	0d 00 00 00 80       	or     eax,0x80000000
c0027841:	81 ce 00 00 00 80    	or     esi,0x80000000
c0027847:	f7 e6                	mul    esi
c0027849:	85 c0                	test   eax,eax
c002784b:	0f 95 c0             	setne  al
c002784e:	0f b6 c0             	movzx  eax,al
c0027851:	09 c2                	or     edx,eax
c0027853:	78 03                	js     c0027858 <__mulsf3+0x157>
c0027855:	01 d2                	add    edx,edx
c0027857:	4b                   	dec    ebx
c0027858:	81 fb fe 00 00 00    	cmp    ebx,0xfe
c002785e:	7f 22                	jg     c0027882 <__mulsf3+0x181>
c0027860:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027866:	85 db                	test   ebx,ebx
c0027868:	7f 23                	jg     c002788d <__mulsf3+0x18c>
c002786a:	83 fb e9             	cmp    ebx,0xffffffe9
c002786d:	7c 1a                	jl     c0027889 <__mulsf3+0x188>
c002786f:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027875:	b9 01 00 00 00       	mov    ecx,0x1
c002787a:	29 d9                	sub    ecx,ebx
c002787c:	d3 ea                	shr    edx,cl
c002787e:	31 db                	xor    ebx,ebx
c0027880:	eb 0b                	jmp    c002788d <__mulsf3+0x18c>
c0027882:	bb ff 00 00 00       	mov    ebx,0xff
c0027887:	eb 02                	jmp    c002788b <__mulsf3+0x18a>
c0027889:	31 db                	xor    ebx,ebx
c002788b:	31 d2                	xor    edx,edx
c002788d:	89 d0                	mov    eax,edx
c002788f:	c1 e8 08             	shr    eax,0x8
c0027892:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027895:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c002789b:	09 fb                	or     ebx,edi
c002789d:	c1 e3 17             	shl    ebx,0x17
c00278a0:	09 c3                	or     ebx,eax
c00278a2:	f6 c2 7f             	test   dl,0x7f
c00278a5:	0f 95 c1             	setne  cl
c00278a8:	09 c8                	or     eax,ecx
c00278aa:	83 e0 01             	and    eax,0x1
c00278ad:	c1 ea 07             	shr    edx,0x7
c00278b0:	21 c2                	and    edx,eax
c00278b2:	8d 34 13             	lea    esi,[ebx+edx*1]
c00278b5:	eb 03                	jmp    c00278ba <__mulsf3+0x1b9>
c00278b7:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
c00278ba:	89 f0                	mov    eax,esi
c00278bc:	8d 65 f4             	lea    esp,[ebp-0xc]
c00278bf:	5b                   	pop    ebx
c00278c0:	5e                   	pop    esi
c00278c1:	5f                   	pop    edi
c00278c2:	5d                   	pop    ebp
c00278c3:	c3                   	ret    

c00278c4 <__divsf3>:
c00278c4:	55                   	push   ebp
c00278c5:	89 e5                	mov    ebp,esp
c00278c7:	57                   	push   edi
c00278c8:	56                   	push   esi
c00278c9:	53                   	push   ebx
c00278ca:	83 ec 1c             	sub    esp,0x1c
c00278cd:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c00278d0:	89 d8                	mov    eax,ebx
c00278d2:	89 d9                	mov    ecx,ebx
c00278d4:	c1 f9 17             	sar    ecx,0x17
c00278d7:	89 4d e4             	mov    DWORD PTR [ebp-0x1c],ecx
c00278da:	c1 e0 08             	shl    eax,0x8
c00278dd:	25 00 ff ff 7f       	and    eax,0x7fffff00
c00278e2:	89 c1                	mov    ecx,eax
c00278e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00278e7:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00278ea:	89 c7                	mov    edi,eax
c00278ec:	c1 ff 17             	sar    edi,0x17
c00278ef:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
c00278f3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
c00278f6:	89 f8                	mov    eax,edi
c00278f8:	0f b6 c0             	movzx  eax,al
c00278fb:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c00278fe:	29 c6                	sub    esi,eax
c0027900:	83 c6 7f             	add    esi,0x7f
c0027903:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
c0027906:	42                   	inc    edx
c0027907:	80 e2 fe             	and    dl,0xfe
c002790a:	0f 85 9c 00 00 00    	jne    c00279ac <__divsf3+0xe8>
c0027910:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027914:	74 33                	je     c0027949 <__divsf3+0x85>
c0027916:	85 c9                	test   ecx,ecx
c0027918:	0f 85 c7 01 00 00    	jne    c0027ae5 <__divsf3+0x221>
c002791e:	8d 57 01             	lea    edx,[edi+0x1]
c0027921:	80 e2 fe             	and    dl,0xfe
c0027924:	75 2f                	jne    c0027955 <__divsf3+0x91>
c0027926:	85 c0                	test   eax,eax
c0027928:	74 2b                	je     c0027955 <__divsf3+0x91>
c002792a:	51                   	push   ecx
c002792b:	51                   	push   ecx
c002792c:	6a 00                	push   0x0
c002792e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027931:	e8 d2 03 00 00       	call   c0027d08 <__nesf2>
c0027936:	83 c4 10             	add    esp,0x10
c0027939:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c002793c:	85 c0                	test   eax,eax
c002793e:	0f 85 a1 01 00 00    	jne    c0027ae5 <__divsf3+0x221>
c0027944:	e9 92 01 00 00       	jmp    c0027adb <__divsf3+0x217>
c0027949:	85 c9                	test   ecx,ecx
c002794b:	75 1b                	jne    c0027968 <__divsf3+0xa4>
c002794d:	8d 57 01             	lea    edx,[edi+0x1]
c0027950:	80 e2 fe             	and    dl,0xfe
c0027953:	74 1e                	je     c0027973 <__divsf3+0xaf>
c0027955:	85 ff                	test   edi,edi
c0027957:	0f 89 88 01 00 00    	jns    c0027ae5 <__divsf3+0x221>
c002795d:	81 c3 00 00 00 80    	add    ebx,0x80000000
c0027963:	e9 7d 01 00 00       	jmp    c0027ae5 <__divsf3+0x221>
c0027968:	8d 56 ff             	lea    edx,[esi-0x1]
c002796b:	01 c9                	add    ecx,ecx
c002796d:	78 3d                	js     c00279ac <__divsf3+0xe8>
c002796f:	89 d6                	mov    esi,edx
c0027971:	eb f5                	jmp    c0027968 <__divsf3+0xa4>
c0027973:	85 c0                	test   eax,eax
c0027975:	b8 00 00 00 00       	mov    eax,0x0
c002797a:	74 18                	je     c0027994 <__divsf3+0xd0>
c002797c:	52                   	push   edx
c002797d:	52                   	push   edx
c002797e:	50                   	push   eax
c002797f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027982:	e8 81 03 00 00       	call   c0027d08 <__nesf2>
c0027987:	83 c4 10             	add    esp,0x10
c002798a:	85 c0                	test   eax,eax
c002798c:	0f 85 50 01 00 00    	jne    c0027ae2 <__divsf3+0x21e>
c0027992:	eb c1                	jmp    c0027955 <__divsf3+0x91>
c0027994:	56                   	push   esi
c0027995:	56                   	push   esi
c0027996:	50                   	push   eax
c0027997:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c002799a:	e8 69 03 00 00       	call   c0027d08 <__nesf2>
c002799f:	83 c4 10             	add    esp,0x10
c00279a2:	85 c0                	test   eax,eax
c00279a4:	0f 84 31 01 00 00    	je     c0027adb <__divsf3+0x217>
c00279aa:	eb a9                	jmp    c0027955 <__divsf3+0x91>
c00279ac:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
c00279af:	c1 e3 08             	shl    ebx,0x8
c00279b2:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c00279b8:	8d 57 01             	lea    edx,[edi+0x1]
c00279bb:	80 e2 fe             	and    dl,0xfe
c00279be:	75 71                	jne    c0027a31 <__divsf3+0x16d>
c00279c0:	85 c0                	test   eax,eax
c00279c2:	ba 00 00 00 00       	mov    edx,0x0
c00279c7:	74 2f                	je     c00279f8 <__divsf3+0x134>
c00279c9:	51                   	push   ecx
c00279ca:	51                   	push   ecx
c00279cb:	52                   	push   edx
c00279cc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c00279cf:	e8 f9 02 00 00       	call   c0027ccd <__eqsf2>
c00279d4:	83 c4 10             	add    esp,0x10
c00279d7:	85 c0                	test   eax,eax
c00279d9:	0f 85 03 01 00 00    	jne    c0027ae2 <__divsf3+0x21e>
c00279df:	31 d2                	xor    edx,edx
c00279e1:	89 d3                	mov    ebx,edx
c00279e3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00279e6:	31 f8                	xor    eax,edi
c00279e8:	0f 89 f7 00 00 00    	jns    c0027ae5 <__divsf3+0x221>
c00279ee:	bb 00 00 00 80       	mov    ebx,0x80000000
c00279f3:	e9 ed 00 00 00       	jmp    c0027ae5 <__divsf3+0x221>
c00279f8:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
c00279fb:	50                   	push   eax
c00279fc:	50                   	push   eax
c00279fd:	52                   	push   edx
c00279fe:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027a01:	e8 c7 02 00 00       	call   c0027ccd <__eqsf2>
c0027a06:	83 c4 10             	add    esp,0x10
c0027a09:	85 c0                	test   eax,eax
c0027a0b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027a0e:	75 16                	jne    c0027a26 <__divsf3+0x162>
c0027a10:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027a13:	31 fb                	xor    ebx,edi
c0027a15:	81 e3 00 00 00 80    	and    ebx,0x80000000
c0027a1b:	81 cb 00 00 80 7f    	or     ebx,0x7f800000
c0027a21:	e9 bf 00 00 00       	jmp    c0027ae5 <__divsf3+0x221>
c0027a26:	8d 46 01             	lea    eax,[esi+0x1]
c0027a29:	01 db                	add    ebx,ebx
c0027a2b:	78 04                	js     c0027a31 <__divsf3+0x16d>
c0027a2d:	89 c6                	mov    esi,eax
c0027a2f:	eb f5                	jmp    c0027a26 <__divsf3+0x162>
c0027a31:	89 c8                	mov    eax,ecx
c0027a33:	0d 00 00 00 80       	or     eax,0x80000000
c0027a38:	81 cb 00 00 00 80    	or     ebx,0x80000000
c0027a3e:	31 d2                	xor    edx,edx
c0027a40:	39 d8                	cmp    eax,ebx
c0027a42:	72 07                	jb     c0027a4b <__divsf3+0x187>
c0027a44:	29 d8                	sub    eax,ebx
c0027a46:	ba 01 00 00 00       	mov    edx,0x1
c0027a4b:	c7 45 e0 19 00 00 00 	mov    DWORD PTR [ebp-0x20],0x19
c0027a52:	01 d2                	add    edx,edx
c0027a54:	89 c1                	mov    ecx,eax
c0027a56:	01 c0                	add    eax,eax
c0027a58:	85 c9                	test   ecx,ecx
c0027a5a:	78 04                	js     c0027a60 <__divsf3+0x19c>
c0027a5c:	39 c3                	cmp    ebx,eax
c0027a5e:	77 05                	ja     c0027a65 <__divsf3+0x1a1>
c0027a60:	29 d8                	sub    eax,ebx
c0027a62:	83 ca 01             	or     edx,0x1
c0027a65:	ff 4d e0             	dec    DWORD PTR [ebp-0x20]
c0027a68:	75 e8                	jne    c0027a52 <__divsf3+0x18e>
c0027a6a:	85 c0                	test   eax,eax
c0027a6c:	0f 95 c0             	setne  al
c0027a6f:	0f b6 c0             	movzx  eax,al
c0027a72:	c1 e2 06             	shl    edx,0x6
c0027a75:	09 c2                	or     edx,eax
c0027a77:	78 03                	js     c0027a7c <__divsf3+0x1b8>
c0027a79:	01 d2                	add    edx,edx
c0027a7b:	4e                   	dec    esi
c0027a7c:	81 fe fe 00 00 00    	cmp    esi,0xfe
c0027a82:	7f 22                	jg     c0027aa6 <__divsf3+0x1e2>
c0027a84:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0027a8a:	85 f6                	test   esi,esi
c0027a8c:	7f 23                	jg     c0027ab1 <__divsf3+0x1ed>
c0027a8e:	83 fe e9             	cmp    esi,0xffffffe9
c0027a91:	7c 1a                	jl     c0027aad <__divsf3+0x1e9>
c0027a93:	81 ca 00 00 00 80    	or     edx,0x80000000
c0027a99:	b9 01 00 00 00       	mov    ecx,0x1
c0027a9e:	29 f1                	sub    ecx,esi
c0027aa0:	d3 ea                	shr    edx,cl
c0027aa2:	31 f6                	xor    esi,esi
c0027aa4:	eb 0b                	jmp    c0027ab1 <__divsf3+0x1ed>
c0027aa6:	be ff 00 00 00       	mov    esi,0xff
c0027aab:	eb 02                	jmp    c0027aaf <__divsf3+0x1eb>
c0027aad:	31 f6                	xor    esi,esi
c0027aaf:	31 d2                	xor    edx,edx
c0027ab1:	89 d0                	mov    eax,edx
c0027ab3:	c1 e8 08             	shr    eax,0x8
c0027ab6:	33 7d e4             	xor    edi,DWORD PTR [ebp-0x1c]
c0027ab9:	81 e7 00 ff ff ff    	and    edi,0xffffff00
c0027abf:	09 fe                	or     esi,edi
c0027ac1:	c1 e6 17             	shl    esi,0x17
c0027ac4:	09 c6                	or     esi,eax
c0027ac6:	f6 c2 7f             	test   dl,0x7f
c0027ac9:	0f 95 c1             	setne  cl
c0027acc:	09 c8                	or     eax,ecx
c0027ace:	83 e0 01             	and    eax,0x1
c0027ad1:	c1 ea 07             	shr    edx,0x7
c0027ad4:	21 c2                	and    edx,eax
c0027ad6:	8d 1c 16             	lea    ebx,[esi+edx*1]
c0027ad9:	eb 0a                	jmp    c0027ae5 <__divsf3+0x221>
c0027adb:	bb 00 00 c0 7f       	mov    ebx,0x7fc00000
c0027ae0:	eb 03                	jmp    c0027ae5 <__divsf3+0x221>
c0027ae2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
c0027ae5:	89 d8                	mov    eax,ebx
c0027ae7:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027aea:	5b                   	pop    ebx
c0027aeb:	5e                   	pop    esi
c0027aec:	5f                   	pop    edi
c0027aed:	5d                   	pop    ebp
c0027aee:	c3                   	ret    

c0027aef <__floatsisf>:
c0027aef:	55                   	push   ebp
c0027af0:	89 e5                	mov    ebp,esp
c0027af2:	53                   	push   ebx
c0027af3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027af6:	85 d2                	test   edx,edx
c0027af8:	7e 2b                	jle    c0027b25 <__floatsisf+0x36>
c0027afa:	0f bd ca             	bsr    ecx,edx
c0027afd:	83 f1 1f             	xor    ecx,0x1f
c0027b00:	d3 e2                	shl    edx,cl
c0027b02:	89 d0                	mov    eax,edx
c0027b04:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b09:	89 c3                	mov    ebx,eax
c0027b0b:	c1 eb 08             	shr    ebx,0x8
c0027b0e:	80 e2 7f             	and    dl,0x7f
c0027b11:	0f 95 c2             	setne  dl
c0027b14:	09 da                	or     edx,ebx
c0027b16:	83 e2 01             	and    edx,0x1
c0027b19:	c1 e8 07             	shr    eax,0x7
c0027b1c:	21 c2                	and    edx,eax
c0027b1e:	b8 9e 00 00 00       	mov    eax,0x9e
c0027b23:	eb 32                	jmp    c0027b57 <__floatsisf+0x68>
c0027b25:	b8 00 00 00 00       	mov    eax,0x0
c0027b2a:	74 34                	je     c0027b60 <__floatsisf+0x71>
c0027b2c:	f7 da                	neg    edx
c0027b2e:	0f bd ca             	bsr    ecx,edx
c0027b31:	83 f1 1f             	xor    ecx,0x1f
c0027b34:	d3 e2                	shl    edx,cl
c0027b36:	89 d0                	mov    eax,edx
c0027b38:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b3d:	89 c3                	mov    ebx,eax
c0027b3f:	c1 eb 08             	shr    ebx,0x8
c0027b42:	80 e2 7f             	and    dl,0x7f
c0027b45:	0f 95 c2             	setne  dl
c0027b48:	09 da                	or     edx,ebx
c0027b4a:	83 e2 01             	and    edx,0x1
c0027b4d:	c1 e8 07             	shr    eax,0x7
c0027b50:	21 c2                	and    edx,eax
c0027b52:	b8 9e 01 00 00       	mov    eax,0x19e
c0027b57:	29 c8                	sub    eax,ecx
c0027b59:	c1 e0 17             	shl    eax,0x17
c0027b5c:	09 d8                	or     eax,ebx
c0027b5e:	01 d0                	add    eax,edx
c0027b60:	5b                   	pop    ebx
c0027b61:	5d                   	pop    ebp
c0027b62:	c3                   	ret    

c0027b63 <__floatunsisf>:
c0027b63:	55                   	push   ebp
c0027b64:	89 e5                	mov    ebp,esp
c0027b66:	53                   	push   ebx
c0027b67:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027b6a:	31 c0                	xor    eax,eax
c0027b6c:	85 d2                	test   edx,edx
c0027b6e:	74 32                	je     c0027ba2 <__floatunsisf+0x3f>
c0027b70:	0f bd ca             	bsr    ecx,edx
c0027b73:	83 f1 1f             	xor    ecx,0x1f
c0027b76:	d3 e2                	shl    edx,cl
c0027b78:	89 d0                	mov    eax,edx
c0027b7a:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0027b7f:	89 c3                	mov    ebx,eax
c0027b81:	c1 eb 08             	shr    ebx,0x8
c0027b84:	80 e2 7f             	and    dl,0x7f
c0027b87:	0f 95 c2             	setne  dl
c0027b8a:	09 da                	or     edx,ebx
c0027b8c:	83 e2 01             	and    edx,0x1
c0027b8f:	c1 e8 07             	shr    eax,0x7
c0027b92:	21 c2                	and    edx,eax
c0027b94:	b8 9e 00 00 00       	mov    eax,0x9e
c0027b99:	29 c8                	sub    eax,ecx
c0027b9b:	c1 e0 17             	shl    eax,0x17
c0027b9e:	09 d8                	or     eax,ebx
c0027ba0:	01 d0                	add    eax,edx
c0027ba2:	5b                   	pop    ebx
c0027ba3:	5d                   	pop    ebp
c0027ba4:	c3                   	ret    

c0027ba5 <__fixsfsi>:
c0027ba5:	55                   	push   ebp
c0027ba6:	89 e5                	mov    ebp,esp
c0027ba8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027bab:	89 d1                	mov    ecx,edx
c0027bad:	c1 e1 08             	shl    ecx,0x8
c0027bb0:	81 e1 00 ff ff 7f    	and    ecx,0x7fffff00
c0027bb6:	c1 fa 17             	sar    edx,0x17
c0027bb9:	78 1c                	js     c0027bd7 <__fixsfsi+0x32>
c0027bbb:	83 ea 7f             	sub    edx,0x7f
c0027bbe:	31 c0                	xor    eax,eax
c0027bc0:	83 fa 1e             	cmp    edx,0x1e
c0027bc3:	77 40                	ja     c0027c05 <__fixsfsi+0x60>
c0027bc5:	89 c8                	mov    eax,ecx
c0027bc7:	0d 00 00 00 80       	or     eax,0x80000000
c0027bcc:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027bd1:	29 d1                	sub    ecx,edx
c0027bd3:	d3 e8                	shr    eax,cl
c0027bd5:	eb 2e                	jmp    c0027c05 <__fixsfsi+0x60>
c0027bd7:	31 c0                	xor    eax,eax
c0027bd9:	81 c2 81 00 00 00    	add    edx,0x81
c0027bdf:	78 24                	js     c0027c05 <__fixsfsi+0x60>
c0027be1:	83 fa 1e             	cmp    edx,0x1e
c0027be4:	7e 09                	jle    c0027bef <__fixsfsi+0x4a>
c0027be6:	83 fa 1f             	cmp    edx,0x1f
c0027be9:	75 18                	jne    c0027c03 <__fixsfsi+0x5e>
c0027beb:	85 c9                	test   ecx,ecx
c0027bed:	75 14                	jne    c0027c03 <__fixsfsi+0x5e>
c0027bef:	89 c8                	mov    eax,ecx
c0027bf1:	0d 00 00 00 80       	or     eax,0x80000000
c0027bf6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027bfb:	29 d1                	sub    ecx,edx
c0027bfd:	d3 e8                	shr    eax,cl
c0027bff:	f7 d8                	neg    eax
c0027c01:	eb 02                	jmp    c0027c05 <__fixsfsi+0x60>
c0027c03:	31 c0                	xor    eax,eax
c0027c05:	5d                   	pop    ebp
c0027c06:	c3                   	ret    

c0027c07 <__fixunssfsi>:
c0027c07:	55                   	push   ebp
c0027c08:	89 e5                	mov    ebp,esp
c0027c0a:	53                   	push   ebx
c0027c0b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0027c0e:	89 d3                	mov    ebx,edx
c0027c10:	c1 fb 17             	sar    ebx,0x17
c0027c13:	83 eb 7f             	sub    ebx,0x7f
c0027c16:	31 c0                	xor    eax,eax
c0027c18:	83 fb 1f             	cmp    ebx,0x1f
c0027c1b:	77 18                	ja     c0027c35 <__fixunssfsi+0x2e>
c0027c1d:	89 d0                	mov    eax,edx
c0027c1f:	c1 e0 08             	shl    eax,0x8
c0027c22:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027c27:	0d 00 00 00 80       	or     eax,0x80000000
c0027c2c:	b9 1f 00 00 00       	mov    ecx,0x1f
c0027c31:	29 d9                	sub    ecx,ebx
c0027c33:	d3 e8                	shr    eax,cl
c0027c35:	5b                   	pop    ebx
c0027c36:	5d                   	pop    ebp
c0027c37:	c3                   	ret    

c0027c38 <__cmpsf2>:
c0027c38:	55                   	push   ebp
c0027c39:	89 e5                	mov    ebp,esp
c0027c3b:	57                   	push   edi
c0027c3c:	56                   	push   esi
c0027c3d:	53                   	push   ebx
c0027c3e:	83 ec 24             	sub    esp,0x24
c0027c41:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027c44:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027c47:	e8 4f 10 00 00       	call   c0028c9b <__truncdfsf2>
c0027c4c:	5a                   	pop    edx
c0027c4d:	59                   	pop    ecx
c0027c4e:	89 c3                	mov    ebx,eax
c0027c50:	c1 e8 17             	shr    eax,0x17
c0027c53:	0f b6 f0             	movzx  esi,al
c0027c56:	89 d8                	mov    eax,ebx
c0027c58:	c1 e8 1f             	shr    eax,0x1f
c0027c5b:	31 c6                	xor    esi,eax
c0027c5d:	c1 e3 08             	shl    ebx,0x8
c0027c60:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0027c63:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0027c66:	e8 30 10 00 00       	call   c0028c9b <__truncdfsf2>
c0027c6b:	83 c4 10             	add    esp,0x10
c0027c6e:	89 c1                	mov    ecx,eax
c0027c70:	c1 e9 17             	shr    ecx,0x17
c0027c73:	0f b6 c9             	movzx  ecx,cl
c0027c76:	89 c7                	mov    edi,eax
c0027c78:	c1 ef 1f             	shr    edi,0x1f
c0027c7b:	89 ca                	mov    edx,ecx
c0027c7d:	31 fa                	xor    edx,edi
c0027c7f:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c0027c82:	c1 e0 08             	shl    eax,0x8
c0027c85:	89 c2                	mov    edx,eax
c0027c87:	89 d8                	mov    eax,ebx
c0027c89:	09 d0                	or     eax,edx
c0027c8b:	25 00 ff ff 7f       	and    eax,0x7fffff00
c0027c90:	09 f0                	or     eax,esi
c0027c92:	75 08                	jne    c0027c9c <__cmpsf2+0x64>
c0027c94:	31 c0                	xor    eax,eax
c0027c96:	39 f9                	cmp    ecx,edi
c0027c98:	75 0c                	jne    c0027ca6 <__cmpsf2+0x6e>
c0027c9a:	eb 29                	jmp    c0027cc5 <__cmpsf2+0x8d>
c0027c9c:	b8 01 00 00 00       	mov    eax,0x1
c0027ca1:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027ca4:	7f 1f                	jg     c0027cc5 <__cmpsf2+0x8d>
c0027ca6:	83 c8 ff             	or     eax,0xffffffff
c0027ca9:	3b 75 e4             	cmp    esi,DWORD PTR [ebp-0x1c]
c0027cac:	7c 17                	jl     c0027cc5 <__cmpsf2+0x8d>
c0027cae:	81 e3 00 ff ff 7f    	and    ebx,0x7fffff00
c0027cb4:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0027cba:	b8 01 00 00 00       	mov    eax,0x1
c0027cbf:	39 d3                	cmp    ebx,edx
c0027cc1:	77 02                	ja     c0027cc5 <__cmpsf2+0x8d>
c0027cc3:	19 c0                	sbb    eax,eax
c0027cc5:	8d 65 f4             	lea    esp,[ebp-0xc]
c0027cc8:	5b                   	pop    ebx
c0027cc9:	5e                   	pop    esi
c0027cca:	5f                   	pop    edi
c0027ccb:	5d                   	pop    ebp
c0027ccc:	c3                   	ret    

c0027ccd <__eqsf2>:
c0027ccd:	55                   	push   ebp
c0027cce:	89 e5                	mov    ebp,esp
c0027cd0:	83 ec 24             	sub    esp,0x24
c0027cd3:	6a 01                	push   0x1
c0027cd5:	83 ec 0c             	sub    esp,0xc
c0027cd8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027cdb:	e8 df 10 00 00       	call   c0028dbf <__extendsfdf2>
c0027ce0:	83 c4 10             	add    esp,0x10
c0027ce3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027ce6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027ce9:	52                   	push   edx
c0027cea:	50                   	push   eax
c0027ceb:	50                   	push   eax
c0027cec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027cef:	e8 cb 10 00 00       	call   c0028dbf <__extendsfdf2>
c0027cf4:	59                   	pop    ecx
c0027cf5:	59                   	pop    ecx
c0027cf6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027cf9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027cfc:	52                   	push   edx
c0027cfd:	50                   	push   eax
c0027cfe:	e8 35 ff ff ff       	call   c0027c38 <__cmpsf2>
c0027d03:	83 c4 20             	add    esp,0x20
c0027d06:	c9                   	leave  
c0027d07:	c3                   	ret    

c0027d08 <__nesf2>:
c0027d08:	eb c3                	jmp    c0027ccd <__eqsf2>

c0027d0a <__gtsf2>:
c0027d0a:	55                   	push   ebp
c0027d0b:	89 e5                	mov    ebp,esp
c0027d0d:	83 ec 24             	sub    esp,0x24
c0027d10:	6a ff                	push   0xffffffff
c0027d12:	83 ec 0c             	sub    esp,0xc
c0027d15:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0027d18:	e8 a2 10 00 00       	call   c0028dbf <__extendsfdf2>
c0027d1d:	83 c4 10             	add    esp,0x10
c0027d20:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d23:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d26:	52                   	push   edx
c0027d27:	50                   	push   eax
c0027d28:	50                   	push   eax
c0027d29:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0027d2c:	e8 8e 10 00 00       	call   c0028dbf <__extendsfdf2>
c0027d31:	59                   	pop    ecx
c0027d32:	59                   	pop    ecx
c0027d33:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
c0027d36:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
c0027d39:	52                   	push   edx
c0027d3a:	50                   	push   eax
c0027d3b:	e8 f8 fe ff ff       	call   c0027c38 <__cmpsf2>
c0027d40:	83 c4 20             	add    esp,0x20
c0027d43:	c9                   	leave  
c0027d44:	c3                   	ret    

c0027d45 <__gesf2>:
c0027d45:	eb c3                	jmp    c0027d0a <__gtsf2>

c0027d47 <__ltsf2>:
c0027d47:	eb 84                	jmp    c0027ccd <__eqsf2>

c0027d49 <__lesf2>:
c0027d49:	eb 82                	jmp    c0027ccd <__eqsf2>

c0027d4b <__adddf3>:
c0027d4b:	55                   	push   ebp
c0027d4c:	89 e5                	mov    ebp,esp
c0027d4e:	57                   	push   edi
c0027d4f:	56                   	push   esi
c0027d50:	53                   	push   ebx
c0027d51:	83 ec 24             	sub    esp,0x24
c0027d54:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c0027d57:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0027d5a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c0027d5d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c0027d60:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c0027d63:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c0027d66:	89 c8                	mov    eax,ecx
c0027d68:	89 ce                	mov    esi,ecx
c0027d6a:	c1 fe 14             	sar    esi,0x14
c0027d6d:	89 75 e4             	mov    DWORD PTR [ebp-0x1c],esi
c0027d70:	89 fb                	mov    ebx,edi
c0027d72:	89 fa                	mov    edx,edi
c0027d74:	c1 e2 0b             	shl    edx,0xb
c0027d77:	c1 e0 0b             	shl    eax,0xb
c0027d7a:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0027d7f:	c1 eb 15             	shr    ebx,0x15
c0027d82:	09 d8                	or     eax,ebx
c0027d84:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0027d87:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0027d8a:	c1 fe 14             	sar    esi,0x14
c0027d8d:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027d90:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0027d93:	89 f3                	mov    ebx,esi
c0027d95:	c1 e3 0b             	shl    ebx,0xb
c0027d98:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c0027d9b:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0027d9e:	c1 e3 0b             	shl    ebx,0xb
c0027da1:	81 e3 00 f8 ff 7f    	and    ebx,0x7ffff800
c0027da7:	c1 ee 15             	shr    esi,0x15
c0027daa:	09 f3                	or     ebx,esi
c0027dac:	89 5d e8             	mov    DWORD PTR [ebp-0x18],ebx
c0027daf:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027db2:	33 75 ec             	xor    esi,DWORD PTR [ebp-0x14]
c0027db5:	0f 88 5f 02 00 00    	js     c002801a <__adddf3+0x2cf>
c0027dbb:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0027dbe:	2b 5d ec             	sub    ebx,DWORD PTR [ebp-0x14]
c0027dc1:	85 db                	test   ebx,ebx
c0027dc3:	0f 8e c7 00 00 00    	jle    c0027e90 <__adddf3+0x145>
c0027dc9:	f7 45 ec ff 07 00 00 	test   DWORD PTR [ebp-0x14],0x7ff
c0027dd0:	75 1a                	jne    c0027dec <__adddf3+0xa1>
c0027dd2:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027dd5:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027dd8:	0f 84 b2 05 00 00    	je     c0028390 <__adddf3+0x645>
c0027dde:	4b                   	dec    ebx
c0027ddf:	75 23                	jne    c0027e04 <__adddf3+0xb9>
c0027de1:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027de4:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027de7:	e9 99 00 00 00       	jmp    c0027e85 <__adddf3+0x13a>
c0027dec:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027def:	f7 d6                	not    esi
c0027df1:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027df7:	0f 84 93 05 00 00    	je     c0028390 <__adddf3+0x645>
c0027dfd:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c0027e04:	83 fb 1f             	cmp    ebx,0x1f
c0027e07:	7e 42                	jle    c0027e4b <__adddf3+0x100>
c0027e09:	83 fb 3f             	cmp    ebx,0x3f
c0027e0c:	0f 8f 7e 05 00 00    	jg     c0028390 <__adddf3+0x645>
c0027e12:	83 e3 1f             	and    ebx,0x1f
c0027e15:	89 d9                	mov    ecx,ebx
c0027e17:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027e1a:	d3 ef                	shr    edi,cl
c0027e1c:	31 db                	xor    ebx,ebx
c0027e1e:	85 c9                	test   ecx,ecx
c0027e20:	74 15                	je     c0027e37 <__adddf3+0xec>
c0027e22:	be 20 00 00 00       	mov    esi,0x20
c0027e27:	29 ce                	sub    esi,ecx
c0027e29:	89 f1                	mov    ecx,esi
c0027e2b:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e2e:	d3 e6                	shl    esi,cl
c0027e30:	31 db                	xor    ebx,ebx
c0027e32:	85 f6                	test   esi,esi
c0027e34:	0f 95 c3             	setne  bl
c0027e37:	31 c9                	xor    ecx,ecx
c0027e39:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c0027e3d:	0f 95 c1             	setne  cl
c0027e40:	09 cf                	or     edi,ecx
c0027e42:	09 fb                	or     ebx,edi
c0027e44:	01 da                	add    edx,ebx
c0027e46:	83 d0 00             	adc    eax,0x0
c0027e49:	eb 3a                	jmp    c0027e85 <__adddf3+0x13a>
c0027e4b:	bf 20 00 00 00       	mov    edi,0x20
c0027e50:	29 df                	sub    edi,ebx
c0027e52:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027e55:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027e58:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027e5b:	d3 e6                	shl    esi,cl
c0027e5d:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e60:	88 d9                	mov    cl,bl
c0027e62:	d3 ef                	shr    edi,cl
c0027e64:	09 fe                	or     esi,edi
c0027e66:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0027e69:	88 d9                	mov    cl,bl
c0027e6b:	d3 ef                	shr    edi,cl
c0027e6d:	89 fb                	mov    ebx,edi
c0027e6f:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c0027e72:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c0027e75:	d3 e7                	shl    edi,cl
c0027e77:	85 ff                	test   edi,edi
c0027e79:	0f 95 c1             	setne  cl
c0027e7c:	0f b6 c9             	movzx  ecx,cl
c0027e7f:	09 ce                	or     esi,ecx
c0027e81:	01 f2                	add    edx,esi
c0027e83:	11 d8                	adc    eax,ebx
c0027e85:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027e88:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0027e8b:	e9 52 01 00 00       	jmp    c0027fe2 <__adddf3+0x297>
c0027e90:	0f 84 d5 00 00 00    	je     c0027f6b <__adddf3+0x220>
c0027e96:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0027e99:	2b 5d e4             	sub    ebx,DWORD PTR [ebp-0x1c]
c0027e9c:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027e9f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027ea2:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027ea9:	75 20                	jne    c0027ecb <__adddf3+0x180>
c0027eab:	89 d6                	mov    esi,edx
c0027ead:	09 c6                	or     esi,eax
c0027eaf:	0f 84 db 04 00 00    	je     c0028390 <__adddf3+0x645>
c0027eb5:	4b                   	dec    ebx
c0027eb6:	75 29                	jne    c0027ee1 <__adddf3+0x196>
c0027eb8:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027ebb:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c0027ebe:	01 d1                	add    ecx,edx
c0027ec0:	11 c6                	adc    esi,eax
c0027ec2:	89 f0                	mov    eax,esi
c0027ec4:	89 ca                	mov    edx,ecx
c0027ec6:	e9 17 01 00 00       	jmp    c0027fe2 <__adddf3+0x297>
c0027ecb:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0027ece:	f7 d6                	not    esi
c0027ed0:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0027ed6:	0f 84 b4 04 00 00    	je     c0028390 <__adddf3+0x645>
c0027edc:	0d 00 00 00 80       	or     eax,0x80000000
c0027ee1:	83 fb 1f             	cmp    ebx,0x1f
c0027ee4:	7e 48                	jle    c0027f2e <__adddf3+0x1e3>
c0027ee6:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0027ee9:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0027eec:	83 fb 3f             	cmp    ebx,0x3f
c0027eef:	0f 8f 9b 04 00 00    	jg     c0028390 <__adddf3+0x645>
c0027ef5:	83 e3 1f             	and    ebx,0x1f
c0027ef8:	89 d9                	mov    ecx,ebx
c0027efa:	89 c7                	mov    edi,eax
c0027efc:	d3 ef                	shr    edi,cl
c0027efe:	31 db                	xor    ebx,ebx
c0027f00:	85 c9                	test   ecx,ecx
c0027f02:	74 12                	je     c0027f16 <__adddf3+0x1cb>
c0027f04:	be 20 00 00 00       	mov    esi,0x20
c0027f09:	29 ce                	sub    esi,ecx
c0027f0b:	89 f1                	mov    ecx,esi
c0027f0d:	d3 e0                	shl    eax,cl
c0027f0f:	31 db                	xor    ebx,ebx
c0027f11:	85 c0                	test   eax,eax
c0027f13:	0f 95 c3             	setne  bl
c0027f16:	31 c0                	xor    eax,eax
c0027f18:	85 d2                	test   edx,edx
c0027f1a:	0f 95 c0             	setne  al
c0027f1d:	09 c7                	or     edi,eax
c0027f1f:	09 fb                	or     ebx,edi
c0027f21:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f24:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f27:	01 da                	add    edx,ebx
c0027f29:	83 d6 00             	adc    esi,0x0
c0027f2c:	eb 39                	jmp    c0027f67 <__adddf3+0x21c>
c0027f2e:	be 20 00 00 00       	mov    esi,0x20
c0027f33:	29 de                	sub    esi,ebx
c0027f35:	89 c7                	mov    edi,eax
c0027f37:	89 f1                	mov    ecx,esi
c0027f39:	d3 e7                	shl    edi,cl
c0027f3b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0027f3e:	89 d7                	mov    edi,edx
c0027f40:	88 d9                	mov    cl,bl
c0027f42:	d3 ef                	shr    edi,cl
c0027f44:	89 f9                	mov    ecx,edi
c0027f46:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c0027f49:	09 cf                	or     edi,ecx
c0027f4b:	88 d9                	mov    cl,bl
c0027f4d:	d3 e8                	shr    eax,cl
c0027f4f:	89 f1                	mov    ecx,esi
c0027f51:	d3 e2                	shl    edx,cl
c0027f53:	85 d2                	test   edx,edx
c0027f55:	0f 95 c2             	setne  dl
c0027f58:	0f b6 d2             	movzx  edx,dl
c0027f5b:	09 d7                	or     edi,edx
c0027f5d:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0027f60:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0027f63:	01 fa                	add    edx,edi
c0027f65:	11 c6                	adc    esi,eax
c0027f67:	89 f0                	mov    eax,esi
c0027f69:	eb 77                	jmp    c0027fe2 <__adddf3+0x297>
c0027f6b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c0027f6e:	46                   	inc    esi
c0027f6f:	89 75 ec             	mov    DWORD PTR [ebp-0x14],esi
c0027f72:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0027f78:	75 41                	jne    c0027fbb <__adddf3+0x270>
c0027f7a:	89 d3                	mov    ebx,edx
c0027f7c:	09 c3                	or     ebx,eax
c0027f7e:	f7 45 e4 ff 07 00 00 	test   DWORD PTR [ebp-0x1c],0x7ff
c0027f85:	75 27                	jne    c0027fae <__adddf3+0x263>
c0027f87:	85 db                	test   ebx,ebx
c0027f89:	0f 84 fb 03 00 00    	je     c002838a <__adddf3+0x63f>
c0027f8f:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0027f92:	0b 75 e8             	or     esi,DWORD PTR [ebp-0x18]
c0027f95:	0f 84 f5 03 00 00    	je     c0028390 <__adddf3+0x645>
c0027f9b:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027f9e:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027fa1:	85 c0                	test   eax,eax
c0027fa3:	0f 89 91 03 00 00    	jns    c002833a <__adddf3+0x5ef>
c0027fa9:	e9 85 03 00 00       	jmp    c0028333 <__adddf3+0x5e8>
c0027fae:	85 db                	test   ebx,ebx
c0027fb0:	0f 85 da 03 00 00    	jne    c0028390 <__adddf3+0x645>
c0027fb6:	e9 cf 03 00 00       	jmp    c002838a <__adddf3+0x63f>
c0027fbb:	03 55 e0             	add    edx,DWORD PTR [ebp-0x20]
c0027fbe:	13 45 e8             	adc    eax,DWORD PTR [ebp-0x18]
c0027fc1:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027fc4:	f7 d1                	not    ecx
c0027fc6:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027fcc:	0f 84 70 03 00 00    	je     c0028342 <__adddf3+0x5f7>
c0027fd2:	d1 ea                	shr    edx,1
c0027fd4:	89 c1                	mov    ecx,eax
c0027fd6:	c1 e1 1f             	shl    ecx,0x1f
c0027fd9:	09 ca                	or     edx,ecx
c0027fdb:	d1 e8                	shr    eax,1
c0027fdd:	e9 6f 03 00 00       	jmp    c0028351 <__adddf3+0x606>
c0027fe2:	85 c0                	test   eax,eax
c0027fe4:	0f 89 67 03 00 00    	jns    c0028351 <__adddf3+0x606>
c0027fea:	ff 45 ec             	inc    DWORD PTR [ebp-0x14]
c0027fed:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0027ff0:	f7 d1                	not    ecx
c0027ff2:	81 e1 ff 07 00 00    	and    ecx,0x7ff
c0027ff8:	0f 84 44 03 00 00    	je     c0028342 <__adddf3+0x5f7>
c0027ffe:	89 d1                	mov    ecx,edx
c0028000:	d1 e9                	shr    ecx,1
c0028002:	83 e2 01             	and    edx,0x1
c0028005:	09 ca                	or     edx,ecx
c0028007:	89 c1                	mov    ecx,eax
c0028009:	c1 e1 1f             	shl    ecx,0x1f
c002800c:	09 ca                	or     edx,ecx
c002800e:	d1 e8                	shr    eax,1
c0028010:	25 ff ff ff 3f       	and    eax,0x3fffffff
c0028015:	e9 37 03 00 00       	jmp    c0028351 <__adddf3+0x606>
c002801a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c002801d:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028023:	89 75 d4             	mov    DWORD PTR [ebp-0x2c],esi
c0028026:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028029:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002802f:	29 de                	sub    esi,ebx
c0028031:	85 f6                	test   esi,esi
c0028033:	0f 8e bd 00 00 00    	jle    c00280f6 <__adddf3+0x3ab>
c0028039:	85 db                	test   ebx,ebx
c002803b:	75 17                	jne    c0028054 <__adddf3+0x309>
c002803d:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c0028040:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028043:	0f 84 47 03 00 00    	je     c0028390 <__adddf3+0x645>
c0028049:	4e                   	dec    esi
c002804a:	75 20                	jne    c002806c <__adddf3+0x321>
c002804c:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002804f:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c0028052:	eb 5b                	jmp    c00280af <__adddf3+0x364>
c0028054:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c0028057:	f7 d3                	not    ebx
c0028059:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c002805f:	0f 84 2b 03 00 00    	je     c0028390 <__adddf3+0x645>
c0028065:	81 4d e8 00 00 00 80 	or     DWORD PTR [ebp-0x18],0x80000000
c002806c:	83 fe 1f             	cmp    esi,0x1f
c002806f:	7e 49                	jle    c00280ba <__adddf3+0x36f>
c0028071:	83 fe 3f             	cmp    esi,0x3f
c0028074:	0f 8f 16 03 00 00    	jg     c0028390 <__adddf3+0x645>
c002807a:	83 e6 1f             	and    esi,0x1f
c002807d:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c0028080:	89 f1                	mov    ecx,esi
c0028082:	d3 ef                	shr    edi,cl
c0028084:	31 db                	xor    ebx,ebx
c0028086:	85 f6                	test   esi,esi
c0028088:	74 13                	je     c002809d <__adddf3+0x352>
c002808a:	b9 20 00 00 00       	mov    ecx,0x20
c002808f:	29 f1                	sub    ecx,esi
c0028091:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c0028094:	d3 e6                	shl    esi,cl
c0028096:	31 db                	xor    ebx,ebx
c0028098:	85 f6                	test   esi,esi
c002809a:	0f 95 c3             	setne  bl
c002809d:	31 c9                	xor    ecx,ecx
c002809f:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
c00280a3:	0f 95 c1             	setne  cl
c00280a6:	09 cf                	or     edi,ecx
c00280a8:	09 fb                	or     ebx,edi
c00280aa:	29 da                	sub    edx,ebx
c00280ac:	83 d8 00             	sbb    eax,0x0
c00280af:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00280b2:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280b5:	e9 aa 01 00 00       	jmp    c0028264 <__adddf3+0x519>
c00280ba:	bf 20 00 00 00       	mov    edi,0x20
c00280bf:	29 f7                	sub    edi,esi
c00280c1:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00280c4:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c00280c7:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00280ca:	d3 e3                	shl    ebx,cl
c00280cc:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00280cf:	89 f1                	mov    ecx,esi
c00280d1:	d3 ef                	shr    edi,cl
c00280d3:	09 fb                	or     ebx,edi
c00280d5:	8b 7d e8             	mov    edi,DWORD PTR [ebp-0x18]
c00280d8:	89 f1                	mov    ecx,esi
c00280da:	d3 ef                	shr    edi,cl
c00280dc:	89 fe                	mov    esi,edi
c00280de:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c00280e1:	8a 4d ec             	mov    cl,BYTE PTR [ebp-0x14]
c00280e4:	d3 e7                	shl    edi,cl
c00280e6:	85 ff                	test   edi,edi
c00280e8:	0f 95 c1             	setne  cl
c00280eb:	0f b6 c9             	movzx  ecx,cl
c00280ee:	09 cb                	or     ebx,ecx
c00280f0:	29 da                	sub    edx,ebx
c00280f2:	19 f0                	sbb    eax,esi
c00280f4:	eb b9                	jmp    c00280af <__adddf3+0x364>
c00280f6:	0f 84 cd 00 00 00    	je     c00281c9 <__adddf3+0x47e>
c00280fc:	2b 5d d4             	sub    ebx,DWORD PTR [ebp-0x2c]
c00280ff:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028102:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028105:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028109:	75 1b                	jne    c0028126 <__adddf3+0x3db>
c002810b:	89 d6                	mov    esi,edx
c002810d:	09 c6                	or     esi,eax
c002810f:	0f 84 7b 02 00 00    	je     c0028390 <__adddf3+0x645>
c0028115:	4b                   	dec    ebx
c0028116:	75 24                	jne    c002813c <__adddf3+0x3f1>
c0028118:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002811b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002811e:	29 d1                	sub    ecx,edx
c0028120:	19 c6                	sbb    esi,eax
c0028122:	89 ca                	mov    edx,ecx
c0028124:	eb 61                	jmp    c0028187 <__adddf3+0x43c>
c0028126:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028129:	f7 d6                	not    esi
c002812b:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028131:	0f 84 59 02 00 00    	je     c0028390 <__adddf3+0x645>
c0028137:	0d 00 00 00 80       	or     eax,0x80000000
c002813c:	83 fb 1f             	cmp    ebx,0x1f
c002813f:	7e 4d                	jle    c002818e <__adddf3+0x443>
c0028141:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c0028144:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028147:	83 fb 3f             	cmp    ebx,0x3f
c002814a:	0f 8f 40 02 00 00    	jg     c0028390 <__adddf3+0x645>
c0028150:	83 e3 1f             	and    ebx,0x1f
c0028153:	89 d9                	mov    ecx,ebx
c0028155:	89 c7                	mov    edi,eax
c0028157:	d3 ef                	shr    edi,cl
c0028159:	31 db                	xor    ebx,ebx
c002815b:	85 c9                	test   ecx,ecx
c002815d:	74 12                	je     c0028171 <__adddf3+0x426>
c002815f:	be 20 00 00 00       	mov    esi,0x20
c0028164:	29 ce                	sub    esi,ecx
c0028166:	89 f1                	mov    ecx,esi
c0028168:	d3 e0                	shl    eax,cl
c002816a:	31 db                	xor    ebx,ebx
c002816c:	85 c0                	test   eax,eax
c002816e:	0f 95 c3             	setne  bl
c0028171:	31 c0                	xor    eax,eax
c0028173:	85 d2                	test   edx,edx
c0028175:	0f 95 c0             	setne  al
c0028178:	09 c7                	or     edi,eax
c002817a:	09 fb                	or     ebx,edi
c002817c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002817f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028182:	29 da                	sub    edx,ebx
c0028184:	83 de 00             	sbb    esi,0x0
c0028187:	89 f0                	mov    eax,esi
c0028189:	e9 d6 00 00 00       	jmp    c0028264 <__adddf3+0x519>
c002818e:	be 20 00 00 00       	mov    esi,0x20
c0028193:	29 de                	sub    esi,ebx
c0028195:	89 c7                	mov    edi,eax
c0028197:	89 f1                	mov    ecx,esi
c0028199:	d3 e7                	shl    edi,cl
c002819b:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c002819e:	89 d7                	mov    edi,edx
c00281a0:	88 d9                	mov    cl,bl
c00281a2:	d3 ef                	shr    edi,cl
c00281a4:	89 f9                	mov    ecx,edi
c00281a6:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00281a9:	09 cf                	or     edi,ecx
c00281ab:	88 d9                	mov    cl,bl
c00281ad:	d3 e8                	shr    eax,cl
c00281af:	89 f1                	mov    ecx,esi
c00281b1:	d3 e2                	shl    edx,cl
c00281b3:	85 d2                	test   edx,edx
c00281b5:	0f 95 c2             	setne  dl
c00281b8:	0f b6 d2             	movzx  edx,dl
c00281bb:	09 d7                	or     edi,edx
c00281bd:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00281c0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c00281c3:	29 fa                	sub    edx,edi
c00281c5:	19 c6                	sbb    esi,eax
c00281c7:	eb be                	jmp    c0028187 <__adddf3+0x43c>
c00281c9:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
c00281cc:	8d 5e 01             	lea    ebx,[esi+0x1]
c00281cf:	81 e3 fe 07 00 00    	and    ebx,0x7fe
c00281d5:	75 6a                	jne    c0028241 <__adddf3+0x4f6>
c00281d7:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00281db:	75 58                	jne    c0028235 <__adddf3+0x4ea>
c00281dd:	8b 5d e0             	mov    ebx,DWORD PTR [ebp-0x20]
c00281e0:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c00281e3:	89 d6                	mov    esi,edx
c00281e5:	09 c6                	or     esi,eax
c00281e7:	75 17                	jne    c0028200 <__adddf3+0x4b5>
c00281e9:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c00281ec:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c00281ef:	85 db                	test   ebx,ebx
c00281f1:	0f 85 99 01 00 00    	jne    c0028390 <__adddf3+0x645>
c00281f7:	31 ff                	xor    edi,edi
c00281f9:	31 c9                	xor    ecx,ecx
c00281fb:	e9 90 01 00 00       	jmp    c0028390 <__adddf3+0x645>
c0028200:	85 db                	test   ebx,ebx
c0028202:	0f 84 88 01 00 00    	je     c0028390 <__adddf3+0x645>
c0028208:	2b 55 e0             	sub    edx,DWORD PTR [ebp-0x20]
c002820b:	1b 45 e8             	sbb    eax,DWORD PTR [ebp-0x18]
c002820e:	85 c0                	test   eax,eax
c0028210:	79 10                	jns    c0028222 <__adddf3+0x4d7>
c0028212:	31 c9                	xor    ecx,ecx
c0028214:	f7 da                	neg    edx
c0028216:	0f 95 c1             	setne  cl
c0028219:	01 c8                	add    eax,ecx
c002821b:	f7 d8                	neg    eax
c002821d:	e9 2f 01 00 00       	jmp    c0028351 <__adddf3+0x606>
c0028222:	31 ff                	xor    edi,edi
c0028224:	31 c9                	xor    ecx,ecx
c0028226:	89 c3                	mov    ebx,eax
c0028228:	09 d3                	or     ebx,edx
c002822a:	0f 84 60 01 00 00    	je     c0028390 <__adddf3+0x645>
c0028230:	e9 05 01 00 00       	jmp    c002833a <__adddf3+0x5ef>
c0028235:	31 ff                	xor    edi,edi
c0028237:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c002823c:	e9 4f 01 00 00       	jmp    c0028390 <__adddf3+0x645>
c0028241:	89 c1                	mov    ecx,eax
c0028243:	89 d0                	mov    eax,edx
c0028245:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
c0028248:	1b 4d e8             	sbb    ecx,DWORD PTR [ebp-0x18]
c002824b:	89 ca                	mov    edx,ecx
c002824d:	85 c9                	test   ecx,ecx
c002824f:	79 2c                	jns    c002827d <__adddf3+0x532>
c0028251:	31 c9                	xor    ecx,ecx
c0028253:	f7 d8                	neg    eax
c0028255:	0f 95 c1             	setne  cl
c0028258:	01 ca                	add    edx,ecx
c002825a:	f7 da                	neg    edx
c002825c:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c002825f:	89 7d e4             	mov    DWORD PTR [ebp-0x1c],edi
c0028262:	eb 19                	jmp    c002827d <__adddf3+0x532>
c0028264:	85 c0                	test   eax,eax
c0028266:	0f 89 e5 00 00 00    	jns    c0028351 <__adddf3+0x606>
c002826c:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028271:	89 c1                	mov    ecx,eax
c0028273:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028276:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c0028279:	89 d0                	mov    eax,edx
c002827b:	89 ca                	mov    edx,ecx
c002827d:	85 d2                	test   edx,edx
c002827f:	74 59                	je     c00282da <__adddf3+0x58f>
c0028281:	0f bd da             	bsr    ebx,edx
c0028284:	83 f3 1f             	xor    ebx,0x1f
c0028287:	88 d9                	mov    cl,bl
c0028289:	d3 e2                	shl    edx,cl
c002828b:	bf 20 00 00 00       	mov    edi,0x20
c0028290:	89 f9                	mov    ecx,edi
c0028292:	29 d9                	sub    ecx,ebx
c0028294:	89 c6                	mov    esi,eax
c0028296:	d3 ee                	shr    esi,cl
c0028298:	09 d6                	or     esi,edx
c002829a:	88 d9                	mov    cl,bl
c002829c:	d3 e0                	shl    eax,cl
c002829e:	89 c2                	mov    edx,eax
c00282a0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00282a3:	25 ff 07 00 00       	and    eax,0x7ff
c00282a8:	39 d8                	cmp    eax,ebx
c00282aa:	7f 22                	jg     c00282ce <__adddf3+0x583>
c00282ac:	29 c3                	sub    ebx,eax
c00282ae:	43                   	inc    ebx
c00282af:	88 d9                	mov    cl,bl
c00282b1:	d3 ea                	shr    edx,cl
c00282b3:	29 df                	sub    edi,ebx
c00282b5:	89 f9                	mov    ecx,edi
c00282b7:	89 f0                	mov    eax,esi
c00282b9:	d3 e0                	shl    eax,cl
c00282bb:	09 c2                	or     edx,eax
c00282bd:	89 f0                	mov    eax,esi
c00282bf:	88 d9                	mov    cl,bl
c00282c1:	d3 e8                	shr    eax,cl
c00282c3:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00282c6:	81 e7 00 f8 ff ff    	and    edi,0xfffff800
c00282cc:	eb 6f                	jmp    c002833d <__adddf3+0x5f2>
c00282ce:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c00282d1:	29 d8                	sub    eax,ebx
c00282d3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00282d6:	89 f0                	mov    eax,esi
c00282d8:	eb 59                	jmp    c0028333 <__adddf3+0x5e8>
c00282da:	85 c0                	test   eax,eax
c00282dc:	74 6a                	je     c0028348 <__adddf3+0x5fd>
c00282de:	0f bd c8             	bsr    ecx,eax
c00282e1:	83 f1 1f             	xor    ecx,0x1f
c00282e4:	d3 e0                	shl    eax,cl
c00282e6:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c00282e9:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c00282ef:	83 c1 20             	add    ecx,0x20
c00282f2:	39 cb                	cmp    ebx,ecx
c00282f4:	7f 35                	jg     c002832b <__adddf3+0x5e0>
c00282f6:	29 d9                	sub    ecx,ebx
c00282f8:	8d 71 01             	lea    esi,[ecx+0x1]
c00282fb:	83 fe 1f             	cmp    esi,0x1f
c00282fe:	7e 09                	jle    c0028309 <__adddf3+0x5be>
c0028300:	83 e9 1f             	sub    ecx,0x1f
c0028303:	d3 e8                	shr    eax,cl
c0028305:	89 c3                	mov    ebx,eax
c0028307:	eb 11                	jmp    c002831a <__adddf3+0x5cf>
c0028309:	b9 20 00 00 00       	mov    ecx,0x20
c002830e:	29 f1                	sub    ecx,esi
c0028310:	89 c3                	mov    ebx,eax
c0028312:	d3 e3                	shl    ebx,cl
c0028314:	89 f1                	mov    ecx,esi
c0028316:	d3 e8                	shr    eax,cl
c0028318:	89 c2                	mov    edx,eax
c002831a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002831d:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028322:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c0028325:	89 d0                	mov    eax,edx
c0028327:	89 da                	mov    edx,ebx
c0028329:	eb 26                	jmp    c0028351 <__adddf3+0x606>
c002832b:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002832e:	29 cf                	sub    edi,ecx
c0028330:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028333:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028338:	eb 17                	jmp    c0028351 <__adddf3+0x606>
c002833a:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c002833d:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028340:	eb 0f                	jmp    c0028351 <__adddf3+0x606>
c0028342:	31 d2                	xor    edx,edx
c0028344:	31 c0                	xor    eax,eax
c0028346:	eb 09                	jmp    c0028351 <__adddf3+0x606>
c0028348:	89 c2                	mov    edx,eax
c002834a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
c0028351:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c0028354:	c1 e1 14             	shl    ecx,0x14
c0028357:	89 c3                	mov    ebx,eax
c0028359:	c1 eb 0b             	shr    ebx,0xb
c002835c:	09 d9                	or     ecx,ebx
c002835e:	89 d3                	mov    ebx,edx
c0028360:	c1 eb 0b             	shr    ebx,0xb
c0028363:	c1 e0 15             	shl    eax,0x15
c0028366:	09 d8                	or     eax,ebx
c0028368:	89 c7                	mov    edi,eax
c002836a:	f7 c2 ff 03 00 00    	test   edx,0x3ff
c0028370:	0f 95 c0             	setne  al
c0028373:	89 c6                	mov    esi,eax
c0028375:	09 f3                	or     ebx,esi
c0028377:	83 e3 01             	and    ebx,0x1
c002837a:	c1 ea 0a             	shr    edx,0xa
c002837d:	21 da                	and    edx,ebx
c002837f:	89 f8                	mov    eax,edi
c0028381:	01 d0                	add    eax,edx
c0028383:	83 d1 00             	adc    ecx,0x0
c0028386:	89 c7                	mov    edi,eax
c0028388:	eb 06                	jmp    c0028390 <__adddf3+0x645>
c002838a:	8b 7d dc             	mov    edi,DWORD PTR [ebp-0x24]
c002838d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
c0028390:	89 f8                	mov    eax,edi
c0028392:	89 ca                	mov    edx,ecx
c0028394:	83 c4 24             	add    esp,0x24
c0028397:	5b                   	pop    ebx
c0028398:	5e                   	pop    esi
c0028399:	5f                   	pop    edi
c002839a:	5d                   	pop    ebp
c002839b:	c3                   	ret    

c002839c <__subdf3>:
c002839c:	55                   	push   ebp
c002839d:	89 e5                	mov    ebp,esp
c002839f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00283a2:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c00283a5:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00283ab:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
c00283ae:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
c00283b1:	5d                   	pop    ebp
c00283b2:	e9 94 f9 ff ff       	jmp    c0027d4b <__adddf3>

c00283b7 <__negdf2>:
c00283b7:	55                   	push   ebp
c00283b8:	89 e5                	mov    ebp,esp
c00283ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c00283bd:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00283c0:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c00283c6:	5d                   	pop    ebp
c00283c7:	c3                   	ret    

c00283c8 <__muldf3>:
c00283c8:	55                   	push   ebp
c00283c9:	89 e5                	mov    ebp,esp
c00283cb:	57                   	push   edi
c00283cc:	56                   	push   esi
c00283cd:	53                   	push   ebx
c00283ce:	83 ec 24             	sub    esp,0x24
c00283d1:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00283d4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
c00283d7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00283da:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00283dd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
c00283e0:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
c00283e3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00283e6:	89 c8                	mov    eax,ecx
c00283e8:	c1 f8 14             	sar    eax,0x14
c00283eb:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00283ee:	89 f8                	mov    eax,edi
c00283f0:	89 fb                	mov    ebx,edi
c00283f2:	c1 e3 0b             	shl    ebx,0xb
c00283f5:	89 5d e4             	mov    DWORD PTR [ebp-0x1c],ebx
c00283f8:	c1 e1 0b             	shl    ecx,0xb
c00283fb:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028401:	c1 e8 15             	shr    eax,0x15
c0028404:	09 c1                	or     ecx,eax
c0028406:	89 d6                	mov    esi,edx
c0028408:	89 d0                	mov    eax,edx
c002840a:	c1 f8 14             	sar    eax,0x14
c002840d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
c0028410:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
c0028413:	89 c3                	mov    ebx,eax
c0028415:	c1 e3 0b             	shl    ebx,0xb
c0028418:	89 5d e0             	mov    DWORD PTR [ebp-0x20],ebx
c002841b:	c1 e6 0b             	shl    esi,0xb
c002841e:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c0028424:	c1 e8 15             	shr    eax,0x15
c0028427:	09 c6                	or     esi,eax
c0028429:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002842c:	25 ff 07 00 00       	and    eax,0x7ff
c0028431:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c0028434:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028437:	25 ff 07 00 00       	and    eax,0x7ff
c002843c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c002843f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c0028442:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c0028445:	8d 9c 18 02 fc ff ff 	lea    ebx,[eax+ebx*1-0x3fe]
c002844c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002844f:	40                   	inc    eax
c0028450:	a9 fe 07 00 00       	test   eax,0x7fe
c0028455:	0f 85 8d 00 00 00    	jne    c00284e8 <__muldf3+0x120>
c002845b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002845e:	09 c8                	or     eax,ecx
c0028460:	83 7d d0 00          	cmp    DWORD PTR [ebp-0x30],0x0
c0028464:	74 44                	je     c00284aa <__muldf3+0xe2>
c0028466:	85 c0                	test   eax,eax
c0028468:	0f 85 31 02 00 00    	jne    c002869f <__muldf3+0x2d7>
c002846e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c0028471:	40                   	inc    eax
c0028472:	a9 fe 07 00 00       	test   eax,0x7fe
c0028477:	75 13                	jne    c002848c <__muldf3+0xc4>
c0028479:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
c002847c:	09 f1                	or     ecx,esi
c002847e:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c0028482:	74 22                	je     c00284a6 <__muldf3+0xde>
c0028484:	85 c9                	test   ecx,ecx
c0028486:	0f 85 0d 02 00 00    	jne    c0028699 <__muldf3+0x2d1>
c002848c:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
c0028490:	0f 89 09 02 00 00    	jns    c002869f <__muldf3+0x2d7>
c0028496:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028499:	05 00 00 00 80       	add    eax,0x80000000
c002849e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00284a1:	e9 f9 01 00 00       	jmp    c002869f <__muldf3+0x2d7>
c00284a6:	85 c9                	test   ecx,ecx
c00284a8:	eb 2e                	jmp    c00284d8 <__muldf3+0x110>
c00284aa:	85 c0                	test   eax,eax
c00284ac:	74 20                	je     c00284ce <__muldf3+0x106>
c00284ae:	8d 04 09             	lea    eax,[ecx+ecx*1]
c00284b1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c00284b4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00284b7:	c1 ef 1f             	shr    edi,0x1f
c00284ba:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
c00284bd:	01 4d e4             	add    DWORD PTR [ebp-0x1c],ecx
c00284c0:	8d 43 ff             	lea    eax,[ebx-0x1]
c00284c3:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00284c6:	09 f9                	or     ecx,edi
c00284c8:	78 1e                	js     c00284e8 <__muldf3+0x120>
c00284ca:	89 c3                	mov    ebx,eax
c00284cc:	eb e0                	jmp    c00284ae <__muldf3+0xe6>
c00284ce:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00284d1:	f7 d0                	not    eax
c00284d3:	a9 ff 07 00 00       	test   eax,0x7ff
c00284d8:	75 b2                	jne    c002848c <__muldf3+0xc4>
c00284da:	31 ff                	xor    edi,edi
c00284dc:	c7 45 ec 00 00 f8 7f 	mov    DWORD PTR [ebp-0x14],0x7ff80000
c00284e3:	e9 b7 01 00 00       	jmp    c002869f <__muldf3+0x2d7>
c00284e8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00284eb:	40                   	inc    eax
c00284ec:	a9 fe 07 00 00       	test   eax,0x7fe
c00284f1:	75 57                	jne    c002854a <__muldf3+0x182>
c00284f3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
c00284f6:	09 f0                	or     eax,esi
c00284f8:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
c00284fc:	74 23                	je     c0028521 <__muldf3+0x159>
c00284fe:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028502:	0f 89 91 01 00 00    	jns    c0028699 <__muldf3+0x2d1>
c0028508:	85 c0                	test   eax,eax
c002850a:	0f 85 89 01 00 00    	jne    c0028699 <__muldf3+0x2d1>
c0028510:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c0028513:	8d 82 00 00 00 80    	lea    eax,[edx-0x80000000]
c0028519:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002851c:	e9 7e 01 00 00       	jmp    c002869f <__muldf3+0x2d7>
c0028521:	85 c0                	test   eax,eax
c0028523:	75 0c                	jne    c0028531 <__muldf3+0x169>
c0028525:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
c0028529:	0f 89 6a 01 00 00    	jns    c0028699 <__muldf3+0x2d1>
c002852f:	eb df                	jmp    c0028510 <__muldf3+0x148>
c0028531:	01 f6                	add    esi,esi
c0028533:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
c0028536:	c1 ea 1f             	shr    edx,0x1f
c0028539:	8b 7d e0             	mov    edi,DWORD PTR [ebp-0x20]
c002853c:	01 7d e0             	add    DWORD PTR [ebp-0x20],edi
c002853f:	8d 43 ff             	lea    eax,[ebx-0x1]
c0028542:	09 d6                	or     esi,edx
c0028544:	78 04                	js     c002854a <__muldf3+0x182>
c0028546:	89 c3                	mov    ebx,eax
c0028548:	eb e7                	jmp    c0028531 <__muldf3+0x169>
c002854a:	81 c9 00 00 00 80    	or     ecx,0x80000000
c0028550:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028556:	89 c8                	mov    eax,ecx
c0028558:	f7 e6                	mul    esi
c002855a:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
c002855d:	89 c7                	mov    edi,eax
c002855f:	89 c8                	mov    eax,ecx
c0028561:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028564:	89 55 d4             	mov    DWORD PTR [ebp-0x2c],edx
c0028567:	89 c1                	mov    ecx,eax
c0028569:	89 f0                	mov    eax,esi
c002856b:	f7 65 e4             	mul    DWORD PTR [ebp-0x1c]
c002856e:	89 55 d0             	mov    DWORD PTR [ebp-0x30],edx
c0028571:	89 c6                	mov    esi,eax
c0028573:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028576:	f7 65 e0             	mul    DWORD PTR [ebp-0x20]
c0028579:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
c002857c:	31 c0                	xor    eax,eax
c002857e:	01 f1                	add    ecx,esi
c0028580:	0f 92 c0             	setb   al
c0028583:	03 7d d4             	add    edi,DWORD PTR [ebp-0x2c]
c0028586:	8b 75 d8             	mov    esi,DWORD PTR [ebp-0x28]
c0028589:	83 d6 00             	adc    esi,0x0
c002858c:	01 c7                	add    edi,eax
c002858e:	83 d6 00             	adc    esi,0x0
c0028591:	01 ca                	add    edx,ecx
c0028593:	0f 92 c1             	setb   cl
c0028596:	0f b6 c9             	movzx  ecx,cl
c0028599:	03 7d d0             	add    edi,DWORD PTR [ebp-0x30]
c002859c:	83 d6 00             	adc    esi,0x0
c002859f:	01 cf                	add    edi,ecx
c00285a1:	83 d6 00             	adc    esi,0x0
c00285a4:	31 c9                	xor    ecx,ecx
c00285a6:	0b 55 e4             	or     edx,DWORD PTR [ebp-0x1c]
c00285a9:	0f 95 c1             	setne  cl
c00285ac:	09 cf                	or     edi,ecx
c00285ae:	85 f6                	test   esi,esi
c00285b0:	78 0c                	js     c00285be <__muldf3+0x1f6>
c00285b2:	01 f6                	add    esi,esi
c00285b4:	89 f8                	mov    eax,edi
c00285b6:	c1 e8 1f             	shr    eax,0x1f
c00285b9:	09 c6                	or     esi,eax
c00285bb:	01 ff                	add    edi,edi
c00285bd:	4b                   	dec    ebx
c00285be:	81 fb fe 07 00 00    	cmp    ebx,0x7fe
c00285c4:	0f 8f 85 00 00 00    	jg     c002864f <__muldf3+0x287>
c00285ca:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
c00285d0:	85 db                	test   ebx,ebx
c00285d2:	0f 8f 84 00 00 00    	jg     c002865c <__muldf3+0x294>
c00285d8:	83 fb cc             	cmp    ebx,0xffffffcc
c00285db:	7c 79                	jl     c0028656 <__muldf3+0x28e>
c00285dd:	ba 01 00 00 00       	mov    edx,0x1
c00285e2:	29 da                	sub    edx,ebx
c00285e4:	81 ce 00 00 00 80    	or     esi,0x80000000
c00285ea:	83 fa 1f             	cmp    edx,0x1f
c00285ed:	7e 30                	jle    c002861f <__muldf3+0x257>
c00285ef:	83 fa 20             	cmp    edx,0x20
c00285f2:	75 0b                	jne    c00285ff <__muldf3+0x237>
c00285f4:	31 c0                	xor    eax,eax
c00285f6:	85 ff                	test   edi,edi
c00285f8:	0f 95 c0             	setne  al
c00285fb:	89 c7                	mov    edi,eax
c00285fd:	eb 1a                	jmp    c0028619 <__muldf3+0x251>
c00285ff:	8d 4b 3f             	lea    ecx,[ebx+0x3f]
c0028602:	89 f0                	mov    eax,esi
c0028604:	d3 e0                	shl    eax,cl
c0028606:	09 f8                	or     eax,edi
c0028608:	0f 95 c0             	setne  al
c002860b:	0f b6 c0             	movzx  eax,al
c002860e:	89 c7                	mov    edi,eax
c0028610:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028615:	29 d9                	sub    ecx,ebx
c0028617:	d3 ee                	shr    esi,cl
c0028619:	09 f7                	or     edi,esi
c002861b:	31 db                	xor    ebx,ebx
c002861d:	eb 3b                	jmp    c002865a <__muldf3+0x292>
c002861f:	83 c3 1f             	add    ebx,0x1f
c0028622:	89 f0                	mov    eax,esi
c0028624:	88 d9                	mov    cl,bl
c0028626:	d3 e0                	shl    eax,cl
c0028628:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
c002862b:	89 f8                	mov    eax,edi
c002862d:	88 d1                	mov    cl,dl
c002862f:	d3 e8                	shr    eax,cl
c0028631:	89 c1                	mov    ecx,eax
c0028633:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028636:	09 c8                	or     eax,ecx
c0028638:	88 d9                	mov    cl,bl
c002863a:	d3 e7                	shl    edi,cl
c002863c:	31 db                	xor    ebx,ebx
c002863e:	85 ff                	test   edi,edi
c0028640:	0f 95 c3             	setne  bl
c0028643:	89 df                	mov    edi,ebx
c0028645:	09 c7                	or     edi,eax
c0028647:	88 d1                	mov    cl,dl
c0028649:	d3 ee                	shr    esi,cl
c002864b:	31 db                	xor    ebx,ebx
c002864d:	eb 0d                	jmp    c002865c <__muldf3+0x294>
c002864f:	bb ff 07 00 00       	mov    ebx,0x7ff
c0028654:	eb 02                	jmp    c0028658 <__muldf3+0x290>
c0028656:	31 db                	xor    ebx,ebx
c0028658:	31 ff                	xor    edi,edi
c002865a:	31 f6                	xor    esi,esi
c002865c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002865f:	33 45 e8             	xor    eax,DWORD PTR [ebp-0x18]
c0028662:	25 00 f8 ff ff       	and    eax,0xfffff800
c0028667:	09 c3                	or     ebx,eax
c0028669:	c1 e3 14             	shl    ebx,0x14
c002866c:	89 f0                	mov    eax,esi
c002866e:	c1 e8 0b             	shr    eax,0xb
c0028671:	09 c3                	or     ebx,eax
c0028673:	89 f8                	mov    eax,edi
c0028675:	c1 e8 0b             	shr    eax,0xb
c0028678:	c1 e6 15             	shl    esi,0x15
c002867b:	09 c6                	or     esi,eax
c002867d:	f7 c7 ff 03 00 00    	test   edi,0x3ff
c0028683:	0f 95 c1             	setne  cl
c0028686:	09 c8                	or     eax,ecx
c0028688:	83 e0 01             	and    eax,0x1
c002868b:	c1 ef 0a             	shr    edi,0xa
c002868e:	21 c7                	and    edi,eax
c0028690:	01 f7                	add    edi,esi
c0028692:	83 d3 00             	adc    ebx,0x0
c0028695:	89 da                	mov    edx,ebx
c0028697:	eb 03                	jmp    c002869c <__muldf3+0x2d4>
c0028699:	8b 7d d8             	mov    edi,DWORD PTR [ebp-0x28]
c002869c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c002869f:	89 f8                	mov    eax,edi
c00286a1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c00286a4:	83 c4 24             	add    esp,0x24
c00286a7:	5b                   	pop    ebx
c00286a8:	5e                   	pop    esi
c00286a9:	5f                   	pop    edi
c00286aa:	5d                   	pop    ebp
c00286ab:	c3                   	ret    

c00286ac <__divdf3>:
c00286ac:	55                   	push   ebp
c00286ad:	89 e5                	mov    ebp,esp
c00286af:	57                   	push   edi
c00286b0:	56                   	push   esi
c00286b1:	53                   	push   ebx
c00286b2:	83 ec 2c             	sub    esp,0x2c
c00286b5:	8b 7d 08             	mov    edi,DWORD PTR [ebp+0x8]
c00286b8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c00286bb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
c00286be:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
c00286c1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
c00286c4:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
c00286c7:	89 ce                	mov    esi,ecx
c00286c9:	89 c8                	mov    eax,ecx
c00286cb:	c1 f8 14             	sar    eax,0x14
c00286ce:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
c00286d1:	89 f8                	mov    eax,edi
c00286d3:	89 fb                	mov    ebx,edi
c00286d5:	c1 e3 0b             	shl    ebx,0xb
c00286d8:	89 5d ec             	mov    DWORD PTR [ebp-0x14],ebx
c00286db:	c1 e6 0b             	shl    esi,0xb
c00286de:	81 e6 00 f8 ff 7f    	and    esi,0x7ffff800
c00286e4:	c1 e8 15             	shr    eax,0x15
c00286e7:	09 c6                	or     esi,eax
c00286e9:	89 75 e0             	mov    DWORD PTR [ebp-0x20],esi
c00286ec:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
c00286ef:	89 c2                	mov    edx,eax
c00286f1:	c1 fa 14             	sar    edx,0x14
c00286f4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
c00286f7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
c00286fa:	89 de                	mov    esi,ebx
c00286fc:	c1 e6 0b             	shl    esi,0xb
c00286ff:	89 75 e8             	mov    DWORD PTR [ebp-0x18],esi
c0028702:	c1 e0 0b             	shl    eax,0xb
c0028705:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c002870a:	c1 eb 15             	shr    ebx,0x15
c002870d:	09 d8                	or     eax,ebx
c002870f:	89 c2                	mov    edx,eax
c0028711:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028714:	25 ff 07 00 00       	and    eax,0x7ff
c0028719:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
c002871c:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
c002871f:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028725:	89 5d d8             	mov    DWORD PTR [ebp-0x28],ebx
c0028728:	29 d8                	sub    eax,ebx
c002872a:	05 ff 03 00 00       	add    eax,0x3ff
c002872f:	8b 75 dc             	mov    esi,DWORD PTR [ebp-0x24]
c0028732:	46                   	inc    esi
c0028733:	81 e6 fe 07 00 00    	and    esi,0x7fe
c0028739:	0f 85 a5 00 00 00    	jne    c00287e4 <__divdf3+0x138>
c002873f:	8b 75 ec             	mov    esi,DWORD PTR [ebp-0x14]
c0028742:	0b 75 e0             	or     esi,DWORD PTR [ebp-0x20]
c0028745:	83 7d cc 00          	cmp    DWORD PTR [ebp-0x34],0x0
c0028749:	74 2a                	je     c0028775 <__divdf3+0xc9>
c002874b:	85 f6                	test   esi,esi
c002874d:	0f 85 cc 02 00 00    	jne    c0028a1f <__divdf3+0x373>
c0028753:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c0028756:	40                   	inc    eax
c0028757:	a9 fe 07 00 00       	test   eax,0x7fe
c002875c:	75 26                	jne    c0028784 <__divdf3+0xd8>
c002875e:	85 db                	test   ebx,ebx
c0028760:	74 22                	je     c0028784 <__divdf3+0xd8>
c0028762:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028765:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028768:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c002876b:	09 d0                	or     eax,edx
c002876d:	0f 85 ac 02 00 00    	jne    c0028a1f <__divdf3+0x373>
c0028773:	eb 63                	jmp    c00287d8 <__divdf3+0x12c>
c0028775:	85 f6                	test   esi,esi
c0028777:	75 22                	jne    c002879b <__divdf3+0xef>
c0028779:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
c002877c:	40                   	inc    eax
c002877d:	a9 fe 07 00 00       	test   eax,0x7fe
c0028782:	74 36                	je     c00287ba <__divdf3+0x10e>
c0028784:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
c0028788:	0f 89 91 02 00 00    	jns    c0028a1f <__divdf3+0x373>
c002878e:	89 f8                	mov    eax,edi
c0028790:	8d 91 00 00 00 80    	lea    edx,[ecx-0x80000000]
c0028796:	e9 80 02 00 00       	jmp    c0028a1b <__divdf3+0x36f>
c002879b:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c002879e:	01 f6                	add    esi,esi
c00287a0:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00287a3:	c1 ef 1f             	shr    edi,0x1f
c00287a6:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c00287a9:	01 5d ec             	add    DWORD PTR [ebp-0x14],ebx
c00287ac:	8d 48 ff             	lea    ecx,[eax-0x1]
c00287af:	09 f7                	or     edi,esi
c00287b1:	89 7d e0             	mov    DWORD PTR [ebp-0x20],edi
c00287b4:	78 2e                	js     c00287e4 <__divdf3+0x138>
c00287b6:	89 c8                	mov    eax,ecx
c00287b8:	eb e1                	jmp    c002879b <__divdf3+0xef>
c00287ba:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
c00287bd:	09 d0                	or     eax,edx
c00287bf:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00287c3:	74 0f                	je     c00287d4 <__divdf3+0x128>
c00287c5:	85 c0                	test   eax,eax
c00287c7:	74 bb                	je     c0028784 <__divdf3+0xd8>
c00287c9:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c00287cc:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c00287cf:	e9 4b 02 00 00       	jmp    c0028a1f <__divdf3+0x373>
c00287d4:	85 c0                	test   eax,eax
c00287d6:	75 ac                	jne    c0028784 <__divdf3+0xd8>
c00287d8:	31 ff                	xor    edi,edi
c00287da:	b9 00 00 f8 7f       	mov    ecx,0x7ff80000
c00287df:	e9 3b 02 00 00       	jmp    c0028a1f <__divdf3+0x373>
c00287e4:	8b 7d e4             	mov    edi,DWORD PTR [ebp-0x1c]
c00287e7:	8d 4f 01             	lea    ecx,[edi+0x1]
c00287ea:	81 e1 fe 07 00 00    	and    ecx,0x7fe
c00287f0:	75 6b                	jne    c002885d <__divdf3+0x1b1>
c00287f2:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c00287f5:	09 d6                	or     esi,edx
c00287f7:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
c00287fb:	74 28                	je     c0028825 <__divdf3+0x179>
c00287fd:	8b 7d d4             	mov    edi,DWORD PTR [ebp-0x2c]
c0028800:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
c0028803:	85 f6                	test   esi,esi
c0028805:	0f 85 14 02 00 00    	jne    c0028a1f <__divdf3+0x373>
c002880b:	31 ff                	xor    edi,edi
c002880d:	31 c9                	xor    ecx,ecx
c002880f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c0028812:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c0028815:	0f 89 04 02 00 00    	jns    c0028a1f <__divdf3+0x373>
c002881b:	b9 00 00 00 80       	mov    ecx,0x80000000
c0028820:	e9 fa 01 00 00       	jmp    c0028a1f <__divdf3+0x373>
c0028825:	85 f6                	test   esi,esi
c0028827:	75 1b                	jne    c0028844 <__divdf3+0x198>
c0028829:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
c002882c:	33 45 e4             	xor    eax,DWORD PTR [ebp-0x1c]
c002882f:	25 00 00 00 80       	and    eax,0x80000000
c0028834:	31 c9                	xor    ecx,ecx
c0028836:	0d 00 00 f0 7f       	or     eax,0x7ff00000
c002883b:	89 cf                	mov    edi,ecx
c002883d:	89 c1                	mov    ecx,eax
c002883f:	e9 db 01 00 00       	jmp    c0028a1f <__divdf3+0x373>
c0028844:	01 d2                	add    edx,edx
c0028846:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028849:	c1 eb 1f             	shr    ebx,0x1f
c002884c:	8b 75 e8             	mov    esi,DWORD PTR [ebp-0x18]
c002884f:	01 75 e8             	add    DWORD PTR [ebp-0x18],esi
c0028852:	8d 48 01             	lea    ecx,[eax+0x1]
c0028855:	09 da                	or     edx,ebx
c0028857:	78 04                	js     c002885d <__divdf3+0x1b1>
c0028859:	89 c8                	mov    eax,ecx
c002885b:	eb e7                	jmp    c0028844 <__divdf3+0x198>
c002885d:	8b 75 e0             	mov    esi,DWORD PTR [ebp-0x20]
c0028860:	81 ce 00 00 00 80    	or     esi,0x80000000
c0028866:	81 ca 00 00 00 80    	or     edx,0x80000000
c002886c:	89 55 e0             	mov    DWORD PTR [ebp-0x20],edx
c002886f:	39 d6                	cmp    esi,edx
c0028871:	77 0d                	ja     c0028880 <__divdf3+0x1d4>
c0028873:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
c0028876:	39 55 ec             	cmp    DWORD PTR [ebp-0x14],edx
c0028879:	72 1b                	jb     c0028896 <__divdf3+0x1ea>
c002887b:	3b 75 e0             	cmp    esi,DWORD PTR [ebp-0x20]
c002887e:	75 16                	jne    c0028896 <__divdf3+0x1ea>
c0028880:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c0028883:	8b 5d e8             	mov    ebx,DWORD PTR [ebp-0x18]
c0028886:	39 5d ec             	cmp    DWORD PTR [ebp-0x14],ebx
c0028889:	83 de 00             	sbb    esi,0x0
c002888c:	29 5d ec             	sub    DWORD PTR [ebp-0x14],ebx
c002888f:	ba 01 00 00 00       	mov    edx,0x1
c0028894:	eb 02                	jmp    c0028898 <__divdf3+0x1ec>
c0028896:	31 d2                	xor    edx,edx
c0028898:	c7 45 d0 36 00 00 00 	mov    DWORD PTR [ebp-0x30],0x36
c002889f:	31 ff                	xor    edi,edi
c00288a1:	01 ff                	add    edi,edi
c00288a3:	89 d1                	mov    ecx,edx
c00288a5:	c1 e9 1f             	shr    ecx,0x1f
c00288a8:	09 cf                	or     edi,ecx
c00288aa:	8d 1c 12             	lea    ebx,[edx+edx*1]
c00288ad:	89 5d d4             	mov    DWORD PTR [ebp-0x2c],ebx
c00288b0:	89 da                	mov    edx,ebx
c00288b2:	89 f3                	mov    ebx,esi
c00288b4:	8d 34 36             	lea    esi,[esi+esi*1]
c00288b7:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00288ba:	c1 e9 1f             	shr    ecx,0x1f
c00288bd:	09 ce                	or     esi,ecx
c00288bf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00288c2:	01 c9                	add    ecx,ecx
c00288c4:	89 4d d8             	mov    DWORD PTR [ebp-0x28],ecx
c00288c7:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00288ca:	85 db                	test   ebx,ebx
c00288cc:	78 29                	js     c00288f7 <__divdf3+0x24b>
c00288ce:	39 75 e0             	cmp    DWORD PTR [ebp-0x20],esi
c00288d1:	72 07                	jb     c00288da <__divdf3+0x22e>
c00288d3:	75 3c                	jne    c0028911 <__divdf3+0x265>
c00288d5:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c00288d8:	77 37                	ja     c0028911 <__divdf3+0x265>
c00288da:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00288dd:	8b 5d d8             	mov    ebx,DWORD PTR [ebp-0x28]
c00288e0:	31 d2                	xor    edx,edx
c00288e2:	39 5d e8             	cmp    DWORD PTR [ebp-0x18],ebx
c00288e5:	0f 97 c2             	seta   dl
c00288e8:	29 d6                	sub    esi,edx
c00288ea:	89 d9                	mov    ecx,ebx
c00288ec:	2b 4d e8             	sub    ecx,DWORD PTR [ebp-0x18]
c00288ef:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
c00288f2:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
c00288f5:	eb 17                	jmp    c002890e <__divdf3+0x262>
c00288f7:	2b 75 e0             	sub    esi,DWORD PTR [ebp-0x20]
c00288fa:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
c00288fd:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028900:	0f 97 c1             	seta   cl
c0028903:	0f b6 c9             	movzx  ecx,cl
c0028906:	29 ce                	sub    esi,ecx
c0028908:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
c002890b:	29 4d ec             	sub    DWORD PTR [ebp-0x14],ecx
c002890e:	83 ca 01             	or     edx,0x1
c0028911:	ff 4d d0             	dec    DWORD PTR [ebp-0x30]
c0028914:	75 8b                	jne    c00288a1 <__divdf3+0x1f5>
c0028916:	c1 e7 09             	shl    edi,0x9
c0028919:	89 d1                	mov    ecx,edx
c002891b:	c1 e9 17             	shr    ecx,0x17
c002891e:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028921:	09 f3                	or     ebx,esi
c0028923:	0f 95 c3             	setne  bl
c0028926:	0f b6 db             	movzx  ebx,bl
c0028929:	c1 e2 09             	shl    edx,0x9
c002892c:	09 d3                	or     ebx,edx
c002892e:	89 ca                	mov    edx,ecx
c0028930:	09 fa                	or     edx,edi
c0028932:	78 0c                	js     c0028940 <__divdf3+0x294>
c0028934:	01 d2                	add    edx,edx
c0028936:	89 d9                	mov    ecx,ebx
c0028938:	c1 e9 1f             	shr    ecx,0x1f
c002893b:	09 ca                	or     edx,ecx
c002893d:	01 db                	add    ebx,ebx
c002893f:	48                   	dec    eax
c0028940:	3d fe 07 00 00       	cmp    eax,0x7fe
c0028945:	0f 8f 83 00 00 00    	jg     c00289ce <__divdf3+0x322>
c002894b:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028951:	85 c0                	test   eax,eax
c0028953:	0f 8f 82 00 00 00    	jg     c00289db <__divdf3+0x32f>
c0028959:	83 f8 cc             	cmp    eax,0xffffffcc
c002895c:	7c 77                	jl     c00289d5 <__divdf3+0x329>
c002895e:	be 01 00 00 00       	mov    esi,0x1
c0028963:	29 c6                	sub    esi,eax
c0028965:	81 ca 00 00 00 80    	or     edx,0x80000000
c002896b:	83 fe 1f             	cmp    esi,0x1f
c002896e:	7e 2f                	jle    c002899f <__divdf3+0x2f3>
c0028970:	83 fe 20             	cmp    esi,0x20
c0028973:	75 0a                	jne    c002897f <__divdf3+0x2d3>
c0028975:	85 db                	test   ebx,ebx
c0028977:	0f 95 c3             	setne  bl
c002897a:	0f b6 db             	movzx  ebx,bl
c002897d:	eb 1a                	jmp    c0028999 <__divdf3+0x2ed>
c002897f:	8d 48 3f             	lea    ecx,[eax+0x3f]
c0028982:	89 d7                	mov    edi,edx
c0028984:	d3 e7                	shl    edi,cl
c0028986:	89 f9                	mov    ecx,edi
c0028988:	09 d9                	or     ecx,ebx
c002898a:	0f 95 c3             	setne  bl
c002898d:	0f b6 db             	movzx  ebx,bl
c0028990:	b9 e1 ff ff ff       	mov    ecx,0xffffffe1
c0028995:	29 c1                	sub    ecx,eax
c0028997:	d3 ea                	shr    edx,cl
c0028999:	09 d3                	or     ebx,edx
c002899b:	31 c0                	xor    eax,eax
c002899d:	eb 3a                	jmp    c00289d9 <__divdf3+0x32d>
c002899f:	83 c0 1f             	add    eax,0x1f
c00289a2:	89 d7                	mov    edi,edx
c00289a4:	88 c1                	mov    cl,al
c00289a6:	d3 e7                	shl    edi,cl
c00289a8:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c00289ab:	89 df                	mov    edi,ebx
c00289ad:	89 f1                	mov    ecx,esi
c00289af:	d3 ef                	shr    edi,cl
c00289b1:	89 f9                	mov    ecx,edi
c00289b3:	8b 7d ec             	mov    edi,DWORD PTR [ebp-0x14]
c00289b6:	09 cf                	or     edi,ecx
c00289b8:	88 c1                	mov    cl,al
c00289ba:	d3 e3                	shl    ebx,cl
c00289bc:	85 db                	test   ebx,ebx
c00289be:	0f 95 c3             	setne  bl
c00289c1:	0f b6 db             	movzx  ebx,bl
c00289c4:	09 fb                	or     ebx,edi
c00289c6:	89 f1                	mov    ecx,esi
c00289c8:	d3 ea                	shr    edx,cl
c00289ca:	31 c0                	xor    eax,eax
c00289cc:	eb 0d                	jmp    c00289db <__divdf3+0x32f>
c00289ce:	b8 ff 07 00 00       	mov    eax,0x7ff
c00289d3:	eb 02                	jmp    c00289d7 <__divdf3+0x32b>
c00289d5:	31 c0                	xor    eax,eax
c00289d7:	31 db                	xor    ebx,ebx
c00289d9:	31 d2                	xor    edx,edx
c00289db:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
c00289de:	33 4d e4             	xor    ecx,DWORD PTR [ebp-0x1c]
c00289e1:	81 e1 00 f8 ff ff    	and    ecx,0xfffff800
c00289e7:	09 c8                	or     eax,ecx
c00289e9:	c1 e0 14             	shl    eax,0x14
c00289ec:	89 d1                	mov    ecx,edx
c00289ee:	c1 e9 0b             	shr    ecx,0xb
c00289f1:	09 c8                	or     eax,ecx
c00289f3:	89 c6                	mov    esi,eax
c00289f5:	89 d9                	mov    ecx,ebx
c00289f7:	c1 e9 0b             	shr    ecx,0xb
c00289fa:	c1 e2 15             	shl    edx,0x15
c00289fd:	09 ca                	or     edx,ecx
c00289ff:	f7 c3 ff 03 00 00    	test   ebx,0x3ff
c0028a05:	0f 95 c0             	setne  al
c0028a08:	09 c1                	or     ecx,eax
c0028a0a:	83 e1 01             	and    ecx,0x1
c0028a0d:	c1 eb 0a             	shr    ebx,0xa
c0028a10:	21 cb                	and    ebx,ecx
c0028a12:	01 d3                	add    ebx,edx
c0028a14:	89 d8                	mov    eax,ebx
c0028a16:	83 d6 00             	adc    esi,0x0
c0028a19:	89 f2                	mov    edx,esi
c0028a1b:	89 c7                	mov    edi,eax
c0028a1d:	89 d1                	mov    ecx,edx
c0028a1f:	89 f8                	mov    eax,edi
c0028a21:	89 ca                	mov    edx,ecx
c0028a23:	83 c4 2c             	add    esp,0x2c
c0028a26:	5b                   	pop    ebx
c0028a27:	5e                   	pop    esi
c0028a28:	5f                   	pop    edi
c0028a29:	5d                   	pop    ebp
c0028a2a:	c3                   	ret    

c0028a2b <__floatsidf>:
c0028a2b:	55                   	push   ebp
c0028a2c:	89 e5                	mov    ebp,esp
c0028a2e:	56                   	push   esi
c0028a2f:	53                   	push   ebx
c0028a30:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028a33:	85 db                	test   ebx,ebx
c0028a35:	7e 15                	jle    c0028a4c <__floatsidf+0x21>
c0028a37:	0f bd cb             	bsr    ecx,ebx
c0028a3a:	83 f1 1f             	xor    ecx,0x1f
c0028a3d:	d3 e3                	shl    ebx,cl
c0028a3f:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a45:	b8 1e 04 00 00       	mov    eax,0x41e
c0028a4a:	eb 21                	jmp    c0028a6d <__floatsidf+0x42>
c0028a4c:	b8 00 00 00 00       	mov    eax,0x0
c0028a51:	ba 00 00 00 00       	mov    edx,0x0
c0028a56:	74 2a                	je     c0028a82 <__floatsidf+0x57>
c0028a58:	f7 db                	neg    ebx
c0028a5a:	0f bd cb             	bsr    ecx,ebx
c0028a5d:	83 f1 1f             	xor    ecx,0x1f
c0028a60:	d3 e3                	shl    ebx,cl
c0028a62:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028a68:	b8 1e 0c 00 00       	mov    eax,0xc1e
c0028a6d:	29 c8                	sub    eax,ecx
c0028a6f:	c1 e0 14             	shl    eax,0x14
c0028a72:	89 c1                	mov    ecx,eax
c0028a74:	89 de                	mov    esi,ebx
c0028a76:	c1 ee 0b             	shr    esi,0xb
c0028a79:	09 f1                	or     ecx,esi
c0028a7b:	89 ca                	mov    edx,ecx
c0028a7d:	c1 e3 15             	shl    ebx,0x15
c0028a80:	89 d8                	mov    eax,ebx
c0028a82:	5b                   	pop    ebx
c0028a83:	5e                   	pop    esi
c0028a84:	5d                   	pop    ebp
c0028a85:	c3                   	ret    

c0028a86 <__floatunsidf>:
c0028a86:	55                   	push   ebp
c0028a87:	89 e5                	mov    ebp,esp
c0028a89:	56                   	push   esi
c0028a8a:	53                   	push   ebx
c0028a8b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028a8e:	85 db                	test   ebx,ebx
c0028a90:	74 2a                	je     c0028abc <__floatunsidf+0x36>
c0028a92:	0f bd cb             	bsr    ecx,ebx
c0028a95:	83 f1 1f             	xor    ecx,0x1f
c0028a98:	d3 e3                	shl    ebx,cl
c0028a9a:	81 e3 ff ff ff 7f    	and    ebx,0x7fffffff
c0028aa0:	b8 1e 04 00 00       	mov    eax,0x41e
c0028aa5:	29 c8                	sub    eax,ecx
c0028aa7:	c1 e0 14             	shl    eax,0x14
c0028aaa:	89 c1                	mov    ecx,eax
c0028aac:	89 de                	mov    esi,ebx
c0028aae:	c1 ee 0b             	shr    esi,0xb
c0028ab1:	09 f1                	or     ecx,esi
c0028ab3:	89 ca                	mov    edx,ecx
c0028ab5:	c1 e3 15             	shl    ebx,0x15
c0028ab8:	89 d8                	mov    eax,ebx
c0028aba:	eb 04                	jmp    c0028ac0 <__floatunsidf+0x3a>
c0028abc:	31 c0                	xor    eax,eax
c0028abe:	31 d2                	xor    edx,edx
c0028ac0:	5b                   	pop    ebx
c0028ac1:	5e                   	pop    esi
c0028ac2:	5d                   	pop    ebp
c0028ac3:	c3                   	ret    

c0028ac4 <__fixdfsi>:
c0028ac4:	55                   	push   ebp
c0028ac5:	89 e5                	mov    ebp,esp
c0028ac7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028aca:	89 d1                	mov    ecx,edx
c0028acc:	c1 e1 0b             	shl    ecx,0xb
c0028acf:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028ad5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
c0028ad8:	c1 e8 15             	shr    eax,0x15
c0028adb:	09 c1                	or     ecx,eax
c0028add:	c1 fa 14             	sar    edx,0x14
c0028ae0:	78 1f                	js     c0028b01 <__fixdfsi+0x3d>
c0028ae2:	81 ea ff 03 00 00    	sub    edx,0x3ff
c0028ae8:	31 c0                	xor    eax,eax
c0028aea:	83 fa 1e             	cmp    edx,0x1e
c0028aed:	77 40                	ja     c0028b2f <__fixdfsi+0x6b>
c0028aef:	89 c8                	mov    eax,ecx
c0028af1:	0d 00 00 00 80       	or     eax,0x80000000
c0028af6:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028afb:	29 d1                	sub    ecx,edx
c0028afd:	d3 e8                	shr    eax,cl
c0028aff:	eb 2e                	jmp    c0028b2f <__fixdfsi+0x6b>
c0028b01:	31 c0                	xor    eax,eax
c0028b03:	81 c2 01 04 00 00    	add    edx,0x401
c0028b09:	78 24                	js     c0028b2f <__fixdfsi+0x6b>
c0028b0b:	83 fa 1e             	cmp    edx,0x1e
c0028b0e:	7e 09                	jle    c0028b19 <__fixdfsi+0x55>
c0028b10:	83 fa 1f             	cmp    edx,0x1f
c0028b13:	75 18                	jne    c0028b2d <__fixdfsi+0x69>
c0028b15:	85 c9                	test   ecx,ecx
c0028b17:	75 14                	jne    c0028b2d <__fixdfsi+0x69>
c0028b19:	89 c8                	mov    eax,ecx
c0028b1b:	0d 00 00 00 80       	or     eax,0x80000000
c0028b20:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b25:	29 d1                	sub    ecx,edx
c0028b27:	d3 e8                	shr    eax,cl
c0028b29:	f7 d8                	neg    eax
c0028b2b:	eb 02                	jmp    c0028b2f <__fixdfsi+0x6b>
c0028b2d:	31 c0                	xor    eax,eax
c0028b2f:	5d                   	pop    ebp
c0028b30:	c3                   	ret    

c0028b31 <__fixunsdfsi>:
c0028b31:	55                   	push   ebp
c0028b32:	89 e5                	mov    ebp,esp
c0028b34:	53                   	push   ebx
c0028b35:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
c0028b38:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028b3b:	89 d3                	mov    ebx,edx
c0028b3d:	c1 fb 14             	sar    ebx,0x14
c0028b40:	81 eb ff 03 00 00    	sub    ebx,0x3ff
c0028b46:	31 c0                	xor    eax,eax
c0028b48:	83 fb 1f             	cmp    ebx,0x1f
c0028b4b:	77 1d                	ja     c0028b6a <__fixunsdfsi+0x39>
c0028b4d:	89 d0                	mov    eax,edx
c0028b4f:	c1 e0 0b             	shl    eax,0xb
c0028b52:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028b57:	c1 e9 15             	shr    ecx,0x15
c0028b5a:	09 c8                	or     eax,ecx
c0028b5c:	0d 00 00 00 80       	or     eax,0x80000000
c0028b61:	b9 1f 00 00 00       	mov    ecx,0x1f
c0028b66:	29 d9                	sub    ecx,ebx
c0028b68:	d3 e8                	shr    eax,cl
c0028b6a:	5b                   	pop    ebx
c0028b6b:	5d                   	pop    ebp
c0028b6c:	c3                   	ret    

c0028b6d <__cmpdf2>:
c0028b6d:	55                   	push   ebp
c0028b6e:	89 e5                	mov    ebp,esp
c0028b70:	57                   	push   edi
c0028b71:	56                   	push   esi
c0028b72:	53                   	push   ebx
c0028b73:	83 ec 0c             	sub    esp,0xc
c0028b76:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
c0028b79:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
c0028b7c:	89 ca                	mov    edx,ecx
c0028b7e:	c1 ea 14             	shr    edx,0x14
c0028b81:	81 e2 ff 07 00 00    	and    edx,0x7ff
c0028b87:	89 cb                	mov    ebx,ecx
c0028b89:	c1 fb 1f             	sar    ebx,0x1f
c0028b8c:	31 da                	xor    edx,ebx
c0028b8e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028b91:	89 df                	mov    edi,ebx
c0028b93:	c1 e7 0b             	shl    edi,0xb
c0028b96:	89 7d ec             	mov    DWORD PTR [ebp-0x14],edi
c0028b99:	c1 e1 0b             	shl    ecx,0xb
c0028b9c:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028ba2:	c1 eb 15             	shr    ebx,0x15
c0028ba5:	09 d9                	or     ecx,ebx
c0028ba7:	89 4d e8             	mov    DWORD PTR [ebp-0x18],ecx
c0028baa:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
c0028bad:	89 ce                	mov    esi,ecx
c0028baf:	c1 ee 14             	shr    esi,0x14
c0028bb2:	81 e6 ff 07 00 00    	and    esi,0x7ff
c0028bb8:	89 cb                	mov    ebx,ecx
c0028bba:	c1 fb 1f             	sar    ebx,0x1f
c0028bbd:	31 de                	xor    esi,ebx
c0028bbf:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
c0028bc2:	89 df                	mov    edi,ebx
c0028bc4:	c1 e7 0b             	shl    edi,0xb
c0028bc7:	c1 e1 0b             	shl    ecx,0xb
c0028bca:	81 e1 00 f8 ff 7f    	and    ecx,0x7ffff800
c0028bd0:	c1 eb 15             	shr    ebx,0x15
c0028bd3:	09 d9                	or     ecx,ebx
c0028bd5:	89 d3                	mov    ebx,edx
c0028bd7:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028bdd:	43                   	inc    ebx
c0028bde:	83 fb 01             	cmp    ebx,0x1
c0028be1:	77 08                	ja     c0028beb <__cmpdf2+0x7e>
c0028be3:	8b 5d ec             	mov    ebx,DWORD PTR [ebp-0x14]
c0028be6:	0b 5d e8             	or     ebx,DWORD PTR [ebp-0x18]
c0028be9:	75 68                	jne    c0028c53 <__cmpdf2+0xe6>
c0028beb:	89 f3                	mov    ebx,esi
c0028bed:	81 f3 ff 07 00 00    	xor    ebx,0x7ff
c0028bf3:	43                   	inc    ebx
c0028bf4:	83 fb 01             	cmp    ebx,0x1
c0028bf7:	77 06                	ja     c0028bff <__cmpdf2+0x92>
c0028bf9:	89 fb                	mov    ebx,edi
c0028bfb:	09 cb                	or     ebx,ecx
c0028bfd:	75 54                	jne    c0028c53 <__cmpdf2+0xe6>
c0028bff:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
c0028c02:	09 f8                	or     eax,edi
c0028c04:	09 c8                	or     eax,ecx
c0028c06:	0b 45 e8             	or     eax,DWORD PTR [ebp-0x18]
c0028c09:	75 12                	jne    c0028c1d <__cmpdf2+0xb0>
c0028c0b:	8d 42 01             	lea    eax,[edx+0x1]
c0028c0e:	83 f8 01             	cmp    eax,0x1
c0028c11:	77 0a                	ja     c0028c1d <__cmpdf2+0xb0>
c0028c13:	8d 5e 01             	lea    ebx,[esi+0x1]
c0028c16:	31 c0                	xor    eax,eax
c0028c18:	83 fb 01             	cmp    ebx,0x1
c0028c1b:	76 36                	jbe    c0028c53 <__cmpdf2+0xe6>
c0028c1d:	b8 01 00 00 00       	mov    eax,0x1
c0028c22:	39 f2                	cmp    edx,esi
c0028c24:	7f 2d                	jg     c0028c53 <__cmpdf2+0xe6>
c0028c26:	b8 ff ff ff ff       	mov    eax,0xffffffff
c0028c2b:	7c 26                	jl     c0028c53 <__cmpdf2+0xe6>
c0028c2d:	39 4d e8             	cmp    DWORD PTR [ebp-0x18],ecx
c0028c30:	77 07                	ja     c0028c39 <__cmpdf2+0xcc>
c0028c32:	72 16                	jb     c0028c4a <__cmpdf2+0xdd>
c0028c34:	39 7d ec             	cmp    DWORD PTR [ebp-0x14],edi
c0028c37:	76 0a                	jbe    c0028c43 <__cmpdf2+0xd6>
c0028c39:	89 d0                	mov    eax,edx
c0028c3b:	c1 f8 1f             	sar    eax,0x1f
c0028c3e:	83 c8 01             	or     eax,0x1
c0028c41:	eb 10                	jmp    c0028c53 <__cmpdf2+0xe6>
c0028c43:	b8 00 00 00 00       	mov    eax,0x0
c0028c48:	73 09                	jae    c0028c53 <__cmpdf2+0xe6>
c0028c4a:	89 d0                	mov    eax,edx
c0028c4c:	c1 f8 1f             	sar    eax,0x1f
c0028c4f:	83 e0 02             	and    eax,0x2
c0028c52:	48                   	dec    eax
c0028c53:	83 c4 0c             	add    esp,0xc
c0028c56:	5b                   	pop    ebx
c0028c57:	5e                   	pop    esi
c0028c58:	5f                   	pop    edi
c0028c59:	5d                   	pop    ebp
c0028c5a:	c3                   	ret    

c0028c5b <__eqdf2>:
c0028c5b:	55                   	push   ebp
c0028c5c:	89 e5                	mov    ebp,esp
c0028c5e:	50                   	push   eax
c0028c5f:	6a 01                	push   0x1
c0028c61:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028c64:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028c67:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028c6a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028c6d:	e8 fb fe ff ff       	call   c0028b6d <__cmpdf2>
c0028c72:	83 c4 18             	add    esp,0x18
c0028c75:	c9                   	leave  
c0028c76:	c3                   	ret    

c0028c77 <__nedf2>:
c0028c77:	eb e2                	jmp    c0028c5b <__eqdf2>

c0028c79 <__gtdf2>:
c0028c79:	55                   	push   ebp
c0028c7a:	89 e5                	mov    ebp,esp
c0028c7c:	50                   	push   eax
c0028c7d:	6a ff                	push   0xffffffff
c0028c7f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
c0028c82:	ff 75 10             	push   DWORD PTR [ebp+0x10]
c0028c85:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
c0028c88:	ff 75 08             	push   DWORD PTR [ebp+0x8]
c0028c8b:	e8 dd fe ff ff       	call   c0028b6d <__cmpdf2>
c0028c90:	83 c4 18             	add    esp,0x18
c0028c93:	c9                   	leave  
c0028c94:	c3                   	ret    

c0028c95 <__gedf2>:
c0028c95:	eb e2                	jmp    c0028c79 <__gtdf2>

c0028c97 <__ltdf2>:
c0028c97:	eb c2                	jmp    c0028c5b <__eqdf2>

c0028c99 <__ledf2>:
c0028c99:	eb c0                	jmp    c0028c5b <__eqdf2>

c0028c9b <__truncdfsf2>:
c0028c9b:	55                   	push   ebp
c0028c9c:	89 e5                	mov    ebp,esp
c0028c9e:	57                   	push   edi
c0028c9f:	56                   	push   esi
c0028ca0:	53                   	push   ebx
c0028ca1:	83 ec 0c             	sub    esp,0xc
c0028ca4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
c0028ca7:	89 d1                	mov    ecx,edx
c0028ca9:	c1 f9 14             	sar    ecx,0x14
c0028cac:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
c0028caf:	89 df                	mov    edi,ebx
c0028cb1:	c1 e7 0b             	shl    edi,0xb
c0028cb4:	89 d0                	mov    eax,edx
c0028cb6:	c1 e0 0b             	shl    eax,0xb
c0028cb9:	25 00 f8 ff 7f       	and    eax,0x7ffff800
c0028cbe:	c1 eb 15             	shr    ebx,0x15
c0028cc1:	09 d8                	or     eax,ebx
c0028cc3:	89 cb                	mov    ebx,ecx
c0028cc5:	81 e3 ff 07 00 00    	and    ebx,0x7ff
c0028ccb:	8d b3 7f fc ff ff    	lea    esi,[ebx-0x381]
c0028cd1:	81 fe fd 00 00 00    	cmp    esi,0xfd
c0028cd7:	0f 86 9e 00 00 00    	jbe    c0028d7b <__truncdfsf2+0xe0>
c0028cdd:	85 db                	test   ebx,ebx
c0028cdf:	75 0a                	jne    c0028ceb <__truncdfsf2+0x50>
c0028ce1:	c1 fa 17             	sar    edx,0x17
c0028ce4:	30 d2                	xor    dl,dl
c0028ce6:	e9 84 00 00 00       	jmp    c0028d6f <__truncdfsf2+0xd4>
c0028ceb:	8d b3 02 fc ff ff    	lea    esi,[ebx-0x3fe]
c0028cf1:	83 fe 83             	cmp    esi,0xffffff83
c0028cf4:	7d 4b                	jge    c0028d41 <__truncdfsf2+0xa6>
c0028cf6:	b9 83 ff ff ff       	mov    ecx,0xffffff83
c0028cfb:	29 f1                	sub    ecx,esi
c0028cfd:	83 f9 1f             	cmp    ecx,0x1f
c0028d00:	7f 6b                	jg     c0028d6d <__truncdfsf2+0xd2>
c0028d02:	0d 00 00 00 80       	or     eax,0x80000000
c0028d07:	89 c3                	mov    ebx,eax
c0028d09:	d3 eb                	shr    ebx,cl
c0028d0b:	be 01 00 00 00       	mov    esi,0x1
c0028d10:	d3 e6                	shl    esi,cl
c0028d12:	4e                   	dec    esi
c0028d13:	21 f0                	and    eax,esi
c0028d15:	09 f8                	or     eax,edi
c0028d17:	0f 95 c0             	setne  al
c0028d1a:	0f b6 c0             	movzx  eax,al
c0028d1d:	09 c3                	or     ebx,eax
c0028d1f:	89 d9                	mov    ecx,ebx
c0028d21:	c1 e9 08             	shr    ecx,0x8
c0028d24:	f6 c3 7f             	test   bl,0x7f
c0028d27:	0f 95 c0             	setne  al
c0028d2a:	09 c8                	or     eax,ecx
c0028d2c:	83 e0 01             	and    eax,0x1
c0028d2f:	c1 eb 07             	shr    ebx,0x7
c0028d32:	21 c3                	and    ebx,eax
c0028d34:	81 e2 00 00 00 80    	and    edx,0x80000000
c0028d3a:	09 d1                	or     ecx,edx
c0028d3c:	8d 04 0b             	lea    eax,[ebx+ecx*1]
c0028d3f:	eb 76                	jmp    c0028db7 <__truncdfsf2+0x11c>
c0028d41:	83 c6 80             	add    esi,0xffffff80
c0028d44:	7e 1d                	jle    c0028d63 <__truncdfsf2+0xc8>
c0028d46:	81 fb ff 07 00 00    	cmp    ebx,0x7ff
c0028d4c:	75 0b                	jne    c0028d59 <__truncdfsf2+0xbe>
c0028d4e:	09 f8                	or     eax,edi
c0028d50:	74 09                	je     c0028d5b <__truncdfsf2+0xc0>
c0028d52:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
c0028d57:	eb 02                	jmp    c0028d5b <__truncdfsf2+0xc0>
c0028d59:	31 c0                	xor    eax,eax
c0028d5b:	c1 fa 17             	sar    edx,0x17
c0028d5e:	80 ca ff             	or     dl,0xff
c0028d61:	eb 0e                	jmp    c0028d71 <__truncdfsf2+0xd6>
c0028d63:	c1 fa 1f             	sar    edx,0x1f
c0028d66:	c1 e2 08             	shl    edx,0x8
c0028d69:	09 ca                	or     edx,ecx
c0028d6b:	eb 04                	jmp    c0028d71 <__truncdfsf2+0xd6>
c0028d6d:	31 d2                	xor    edx,edx
c0028d6f:	31 c0                	xor    eax,eax
c0028d71:	c1 e2 17             	shl    edx,0x17
c0028d74:	c1 e8 08             	shr    eax,0x8
c0028d77:	09 d0                	or     eax,edx
c0028d79:	eb 3c                	jmp    c0028db7 <__truncdfsf2+0x11c>
c0028d7b:	81 e9 80 03 00 00    	sub    ecx,0x380
c0028d81:	89 ca                	mov    edx,ecx
c0028d83:	c1 fa 0b             	sar    edx,0xb
c0028d86:	c1 e2 08             	shl    edx,0x8
c0028d89:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
c0028d8c:	31 db                	xor    ebx,ebx
c0028d8e:	85 ff                	test   edi,edi
c0028d90:	0f 95 c3             	setne  bl
c0028d93:	09 d8                	or     eax,ebx
c0028d95:	89 c3                	mov    ebx,eax
c0028d97:	c1 eb 08             	shr    ebx,0x8
c0028d9a:	a8 7f                	test   al,0x7f
c0028d9c:	0f 95 c2             	setne  dl
c0028d9f:	89 d6                	mov    esi,edx
c0028da1:	09 de                	or     esi,ebx
c0028da3:	83 e6 01             	and    esi,0x1
c0028da6:	c1 e8 07             	shr    eax,0x7
c0028da9:	21 f0                	and    eax,esi
c0028dab:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
c0028dae:	09 ca                	or     edx,ecx
c0028db0:	c1 e2 17             	shl    edx,0x17
c0028db3:	09 da                	or     edx,ebx
c0028db5:	01 d0                	add    eax,edx
c0028db7:	83 c4 0c             	add    esp,0xc
c0028dba:	5b                   	pop    ebx
c0028dbb:	5e                   	pop    esi
c0028dbc:	5f                   	pop    edi
c0028dbd:	5d                   	pop    ebp
c0028dbe:	c3                   	ret    

c0028dbf <__extendsfdf2>:
c0028dbf:	55                   	push   ebp
c0028dc0:	89 e5                	mov    ebp,esp
c0028dc2:	57                   	push   edi
c0028dc3:	56                   	push   esi
c0028dc4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
c0028dc7:	89 d1                	mov    ecx,edx
c0028dc9:	c1 f9 17             	sar    ecx,0x17
c0028dcc:	c1 e2 08             	shl    edx,0x8
c0028dcf:	81 e2 00 ff ff 7f    	and    edx,0x7fffff00
c0028dd5:	89 c8                	mov    eax,ecx
c0028dd7:	80 e4 f8             	and    ah,0xf8
c0028dda:	8d 71 01             	lea    esi,[ecx+0x1]
c0028ddd:	81 e6 fe 00 00 00    	and    esi,0xfe
c0028de3:	75 27                	jne    c0028e0c <__extendsfdf2+0x4d>
c0028de5:	81 e1 ff 00 00 00    	and    ecx,0xff
c0028deb:	75 18                	jne    c0028e05 <__extendsfdf2+0x46>
c0028ded:	85 d2                	test   edx,edx
c0028def:	74 20                	je     c0028e11 <__extendsfdf2+0x52>
c0028df1:	41                   	inc    ecx
c0028df2:	01 d2                	add    edx,edx
c0028df4:	79 fb                	jns    c0028df1 <__extendsfdf2+0x32>
c0028df6:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
c0028dfc:	29 c8                	sub    eax,ecx
c0028dfe:	05 81 03 00 00       	add    eax,0x381
c0028e03:	eb 0c                	jmp    c0028e11 <__extendsfdf2+0x52>
c0028e05:	05 00 07 00 00       	add    eax,0x700
c0028e0a:	eb 05                	jmp    c0028e11 <__extendsfdf2+0x52>
c0028e0c:	05 80 03 00 00       	add    eax,0x380
c0028e11:	c1 e0 14             	shl    eax,0x14
c0028e14:	89 c1                	mov    ecx,eax
c0028e16:	89 d0                	mov    eax,edx
c0028e18:	c1 e8 0b             	shr    eax,0xb
c0028e1b:	09 c1                	or     ecx,eax
c0028e1d:	c1 e2 15             	shl    edx,0x15
c0028e20:	89 d0                	mov    eax,edx
c0028e22:	89 ca                	mov    edx,ecx
c0028e24:	5e                   	pop    esi
c0028e25:	5f                   	pop    edi
c0028e26:	5d                   	pop    ebp
c0028e27:	c3                   	ret    
c0028e28:	66 90                	xchg   ax,ax
c0028e2a:	66 90                	xchg   ax,ax
c0028e2c:	66 90                	xchg   ax,ax
c0028e2e:	66 90                	xchg   ax,ax

c0028e30 <fabs>:
c0028e30:	83 ec 0c             	sub    esp,0xc
c0028e33:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e37:	89 04 24             	mov    DWORD PTR [esp],eax
c0028e3a:	8b 44 24 14          	mov    eax,DWORD PTR [esp+0x14]
c0028e3e:	25 ff ff ff 7f       	and    eax,0x7fffffff
c0028e43:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
c0028e47:	dd 04 24             	fld    QWORD PTR [esp]
c0028e4a:	83 c4 0c             	add    esp,0xc
c0028e4d:	c3                   	ret    
c0028e4e:	66 90                	xchg   ax,ax

c0028e50 <lrint>:
c0028e50:	dd 44 24 04          	fld    QWORD PTR [esp+0x4]
c0028e54:	83 ec 04             	sub    esp,0x4
c0028e57:	db 1c 24             	fistp  DWORD PTR [esp]
c0028e5a:	58                   	pop    eax
c0028e5b:	c3                   	ret    

c0028e5c <lrintf>:
c0028e5c:	d9 44 24 04          	fld    DWORD PTR [esp+0x4]
c0028e60:	83 ec 04             	sub    esp,0x4
c0028e63:	db 1c 24             	fistp  DWORD PTR [esp]
c0028e66:	58                   	pop    eax
c0028e67:	c3                   	ret    

Disassembly of section .init:

c0028e68 <_init>:
c0028e68:	55                   	push   ebp
c0028e69:	89 e5                	mov    ebp,esp
c0028e6b:	e8 a8 72 fd ff       	call   c0000118 <frame_dummy>
c0028e70:	e8 5b e0 ff ff       	call   c0026ed0 <__do_global_ctors_aux>
c0028e75:	5d                   	pop    ebp
c0028e76:	c3                   	ret    

Disassembly of section .fini:

c0028e77 <_fini>:
c0028e77:	55                   	push   ebp
c0028e78:	89 e5                	mov    ebp,esp
c0028e7a:	e8 29 72 fd ff       	call   c00000a8 <__do_global_dtors_aux>
c0028e7f:	5d                   	pop    ebp
c0028e80:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD2Ev:

c0028e82 <Computer::~Computer()>:
c0028e82:	83 ec 0c             	sub    esp,0xc
c0028e85:	ba a8 aa 02 c0       	mov    edx,0xc002aaa8
c0028e8a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e8e:	89 10                	mov    DWORD PTR [eax],edx
c0028e90:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028e94:	83 ec 0c             	sub    esp,0xc
c0028e97:	50                   	push   eax
c0028e98:	e8 b1 b2 fe ff       	call   c001414e <Device::~Device()>
c0028e9d:	83 c4 10             	add    esp,0x10
c0028ea0:	90                   	nop
c0028ea1:	83 c4 0c             	add    esp,0xc
c0028ea4:	c3                   	ret    

Disassembly of section .text._ZN8ComputerD0Ev:

c0028ea6 <Computer::~Computer()>:
c0028ea6:	83 ec 0c             	sub    esp,0xc
c0028ea9:	83 ec 0c             	sub    esp,0xc
c0028eac:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028eb0:	e8 cd ff ff ff       	call   c0028e82 <Computer::~Computer()>
c0028eb5:	83 c4 10             	add    esp,0x10
c0028eb8:	83 ec 08             	sub    esp,0x8
c0028ebb:	68 ec 01 00 00       	push   0x1ec
c0028ec0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0028ec4:	e8 9e 9e fe ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0028ec9:	83 c4 10             	add    esp,0x10
c0028ecc:	83 c4 0c             	add    esp,0xc
c0028ecf:	c3                   	ret    

Disassembly of section .text._Z10idleCommonv:

c0028ed0 <idleCommon()>:
c0028ed0:	83 ec 0c             	sub    esp,0xc
c0028ed3:	fa                   	cli    
c0028ed4:	ff 05 88 23 03 c0    	inc    DWORD PTR ds:0xc0032388
c0028eda:	e8 b1 55 ff ff       	call   c001e490 <schedule()>
c0028edf:	a1 88 23 03 c0       	mov    eax,ds:0xc0032388
c0028ee4:	48                   	dec    eax
c0028ee5:	a3 88 23 03 c0       	mov    ds:0xc0032388,eax
c0028eea:	75 01                	jne    c0028eed <idleCommon()+0x1d>
c0028eec:	fb                   	sti    
c0028eed:	83 c4 0c             	add    esp,0xc
c0028ef0:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileED2Ev:

c0028ef2 <LinkedList<UnixFile>::~LinkedList()>:
c0028ef2:	90                   	nop
c0028ef3:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileEC2Ev:

c0028ef4 <LinkedList<UnixFile>::LinkedList()>:
c0028ef4:	83 ec 0c             	sub    esp,0xc
c0028ef7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028efb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f01:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f05:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f0c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f10:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f17:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f1b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c0028f21:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f25:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0028f2c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f30:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028f37:	83 ec 0c             	sub    esp,0xc
c0028f3a:	68 66 ad 02 c0       	push   0xc002ad66
c0028f3f:	e8 03 9f fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0028f44:	83 c4 10             	add    esp,0x10
c0028f47:	90                   	nop
c0028f48:	83 c4 0c             	add    esp,0xc
c0028f4b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE10addElementEPS0_:

c0028f4c <LinkedList<UnixFile>::addElement(UnixFile*)>:
c0028f4c:	83 ec 0c             	sub    esp,0xc
c0028f4f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0028f54:	75 10                	jne    c0028f66 <LinkedList<UnixFile>::addElement(UnixFile*)+0x1a>
c0028f56:	83 ec 0c             	sub    esp,0xc
c0028f59:	68 80 ad 02 c0       	push   0xc002ad80
c0028f5e:	e8 9e 18 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c0028f63:	83 c4 10             	add    esp,0x10
c0028f66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f6a:	8b 00                	mov    eax,DWORD PTR [eax]
c0028f6c:	85 c0                	test   eax,eax
c0028f6e:	74 34                	je     c0028fa4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028f70:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f74:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f77:	85 c0                	test   eax,eax
c0028f79:	74 29                	je     c0028fa4 <LinkedList<UnixFile>::addElement(UnixFile*)+0x58>
c0028f7b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f7f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f82:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f86:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0028f89:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f8d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028f91:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028f94:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028f98:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028f9b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028fa2:	eb 65                	jmp    c0029009 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028fa4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fa8:	8b 00                	mov    eax,DWORD PTR [eax]
c0028faa:	85 c0                	test   eax,eax
c0028fac:	75 4b                	jne    c0028ff9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028fae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fb5:	85 c0                	test   eax,eax
c0028fb7:	75 40                	jne    c0028ff9 <LinkedList<UnixFile>::addElement(UnixFile*)+0xad>
c0028fb9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fbd:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fc1:	89 10                	mov    DWORD PTR [eax],edx
c0028fc3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fc7:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0028fcb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0028fce:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fd2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0028fd5:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0028fdc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0028fe0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0028fe3:	85 c0                	test   eax,eax
c0028fe5:	74 22                	je     c0029009 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028fe7:	83 ec 0c             	sub    esp,0xc
c0028fea:	68 a2 ad 02 c0       	push   0xc002ada2
c0028fef:	e8 0d 18 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c0028ff4:	83 c4 10             	add    esp,0x10
c0028ff7:	eb 10                	jmp    c0029009 <LinkedList<UnixFile>::addElement(UnixFile*)+0xbd>
c0028ff9:	83 ec 0c             	sub    esp,0xc
c0028ffc:	68 ac ad 02 c0       	push   0xc002adac
c0029001:	e8 fb 17 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c0029006:	83 c4 10             	add    esp,0x10
c0029009:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002900d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029010:	8d 50 01             	lea    edx,[eax+0x1]
c0029013:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029017:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002901a:	90                   	nop
c002901b:	83 c4 0c             	add    esp,0xc
c002901e:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE15getFirstElementEv:

c0029020 <LinkedList<UnixFile>::getFirstElement()>:
c0029020:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029024:	8b 00                	mov    eax,DWORD PTR [eax]
c0029026:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE11removeFirstEv:

c0029028 <LinkedList<UnixFile>::removeFirst()>:
c0029028:	83 ec 0c             	sub    esp,0xc
c002902b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002902f:	8b 00                	mov    eax,DWORD PTR [eax]
c0029031:	85 c0                	test   eax,eax
c0029033:	75 12                	jne    c0029047 <LinkedList<UnixFile>::removeFirst()+0x1f>
c0029035:	83 ec 0c             	sub    esp,0xc
c0029038:	68 b8 ad 02 c0       	push   0xc002adb8
c002903d:	e8 bf 17 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c0029042:	83 c4 10             	add    esp,0x10
c0029045:	eb 7e                	jmp    c00290c5 <LinkedList<UnixFile>::removeFirst()+0x9d>
c0029047:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002904b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002904e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029051:	85 c0                	test   eax,eax
c0029053:	74 10                	je     c0029065 <LinkedList<UnixFile>::removeFirst()+0x3d>
c0029055:	83 ec 0c             	sub    esp,0xc
c0029058:	68 03 ae 02 c0       	push   0xc002ae03
c002905d:	e8 9f 17 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c0029062:	83 c4 10             	add    esp,0x10
c0029065:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029069:	8b 00                	mov    eax,DWORD PTR [eax]
c002906b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002906e:	85 c0                	test   eax,eax
c0029070:	75 33                	jne    c00290a5 <LinkedList<UnixFile>::removeFirst()+0x7d>
c0029072:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029076:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002907c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029080:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c0029087:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002908b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002908e:	83 f8 01             	cmp    eax,0x1
c0029091:	74 21                	je     c00290b4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c0029093:	83 ec 0c             	sub    esp,0xc
c0029096:	68 dc ad 02 c0       	push   0xc002addc
c002909b:	e8 61 17 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c00290a0:	83 c4 10             	add    esp,0x10
c00290a3:	eb 0f                	jmp    c00290b4 <LinkedList<UnixFile>::removeFirst()+0x8c>
c00290a5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290a9:	8b 00                	mov    eax,DWORD PTR [eax]
c00290ab:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
c00290ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b2:	89 10                	mov    DWORD PTR [eax],edx
c00290b4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290b8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290bb:	8d 50 ff             	lea    edx,[eax-0x1]
c00290be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00290c2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00290c5:	83 c4 0c             	add    esp,0xc
c00290c8:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI8UnixFileE7getNextEPS0_:

c00290ca <LinkedList<UnixFile>::getNext(UnixFile*)>:
c00290ca:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c00290ce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00290d1:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD2Ev:

c00290d2 <DriverlessDevice::~DriverlessDevice()>:
c00290d2:	ba 84 b5 02 c0       	mov    edx,0xc002b584
c00290d7:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290db:	89 10                	mov    DWORD PTR [eax],edx
c00290dd:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00290e1:	50                   	push   eax
c00290e2:	e8 67 b0 fe ff       	call   c001414e <Device::~Device()>
c00290e7:	83 c4 04             	add    esp,0x4
c00290ea:	90                   	nop
c00290eb:	c3                   	ret    

Disassembly of section .text._ZN16DriverlessDeviceD0Ev:

c00290ec <DriverlessDevice::~DriverlessDevice()>:
c00290ec:	83 ec 0c             	sub    esp,0xc
c00290ef:	83 ec 0c             	sub    esp,0xc
c00290f2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00290f6:	e8 d7 ff ff ff       	call   c00290d2 <DriverlessDevice::~DriverlessDevice()>
c00290fb:	83 c4 10             	add    esp,0x10
c00290fe:	83 ec 08             	sub    esp,0x8
c0029101:	68 58 01 00 00       	push   0x158
c0029106:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002910a:	e8 58 9c fe ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c002910f:	83 c4 10             	add    esp,0x10
c0029112:	83 c4 0c             	add    esp,0xc
c0029115:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE10addElementEPS0_:

c0029116 <LinkedList<Device>::addElement(Device*)>:
c0029116:	83 ec 0c             	sub    esp,0xc
c0029119:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c002911e:	75 10                	jne    c0029130 <LinkedList<Device>::addElement(Device*)+0x1a>
c0029120:	83 ec 0c             	sub    esp,0xc
c0029123:	68 80 ad 02 c0       	push   0xc002ad80
c0029128:	e8 d4 16 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c002912d:	83 c4 10             	add    esp,0x10
c0029130:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029134:	8b 00                	mov    eax,DWORD PTR [eax]
c0029136:	85 c0                	test   eax,eax
c0029138:	74 3a                	je     c0029174 <LinkedList<Device>::addElement(Device*)+0x5e>
c002913a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002913e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029141:	85 c0                	test   eax,eax
c0029143:	74 2f                	je     c0029174 <LinkedList<Device>::addElement(Device*)+0x5e>
c0029145:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029149:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002914c:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029150:	89 90 48 01 00 00    	mov    DWORD PTR [eax+0x148],edx
c0029156:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002915a:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002915e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029161:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029165:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029168:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c0029172:	eb 68                	jmp    c00291dc <LinkedList<Device>::addElement(Device*)+0xc6>
c0029174:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029178:	8b 00                	mov    eax,DWORD PTR [eax]
c002917a:	85 c0                	test   eax,eax
c002917c:	75 4e                	jne    c00291cc <LinkedList<Device>::addElement(Device*)+0xb6>
c002917e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029182:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029185:	85 c0                	test   eax,eax
c0029187:	75 43                	jne    c00291cc <LinkedList<Device>::addElement(Device*)+0xb6>
c0029189:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002918d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029191:	89 10                	mov    DWORD PTR [eax],edx
c0029193:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029197:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002919b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002919e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00291a5:	c7 80 48 01 00 00 00 00 00 00 	mov    DWORD PTR [eax+0x148],0x0
c00291af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291b3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291b6:	85 c0                	test   eax,eax
c00291b8:	74 22                	je     c00291dc <LinkedList<Device>::addElement(Device*)+0xc6>
c00291ba:	83 ec 0c             	sub    esp,0xc
c00291bd:	68 a2 ad 02 c0       	push   0xc002ada2
c00291c2:	e8 3a 16 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c00291c7:	83 c4 10             	add    esp,0x10
c00291ca:	eb 10                	jmp    c00291dc <LinkedList<Device>::addElement(Device*)+0xc6>
c00291cc:	83 ec 0c             	sub    esp,0xc
c00291cf:	68 ac ad 02 c0       	push   0xc002adac
c00291d4:	e8 28 16 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c00291d9:	83 c4 10             	add    esp,0x10
c00291dc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291e0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00291e3:	8d 50 01             	lea    edx,[eax+0x1]
c00291e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291ea:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00291ed:	90                   	nop
c00291ee:	83 c4 0c             	add    esp,0xc
c00291f1:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceEC2Ev:

c00291f2 <LinkedList<Device>::LinkedList()>:
c00291f2:	83 ec 0c             	sub    esp,0xc
c00291f5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00291f9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00291ff:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029203:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002920a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002920e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029215:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029219:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c002921f:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029223:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c002922a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002922e:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c0029235:	83 ec 0c             	sub    esp,0xc
c0029238:	68 66 ad 02 c0       	push   0xc002ad66
c002923d:	e8 05 9c fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c0029242:	83 c4 10             	add    esp,0x10
c0029245:	90                   	nop
c0029246:	83 c4 0c             	add    esp,0xc
c0029249:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7isEmptyEv:

c002924a <LinkedList<ThreadControlBlock volatile>::isEmpty()>:
c002924a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002924e:	8b 00                	mov    eax,DWORD PTR [eax]
c0029250:	85 c0                	test   eax,eax
c0029252:	75 0e                	jne    c0029262 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c0029254:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029258:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002925b:	85 c0                	test   eax,eax
c002925d:	75 03                	jne    c0029262 <LinkedList<ThreadControlBlock volatile>::isEmpty()+0x18>
c002925f:	b0 01                	mov    al,0x1
c0029261:	c3                   	ret    
c0029262:	b0 00                	mov    al,0x0
c0029264:	90                   	nop
c0029265:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE15getFirstElementEv:

c0029266 <LinkedList<ThreadControlBlock volatile>::getFirstElement()>:
c0029266:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002926a:	8b 00                	mov    eax,DWORD PTR [eax]
c002926c:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE11removeFirstEv:

c002926e <LinkedList<ThreadControlBlock volatile>::removeFirst()>:
c002926e:	83 ec 0c             	sub    esp,0xc
c0029271:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029275:	8b 00                	mov    eax,DWORD PTR [eax]
c0029277:	85 c0                	test   eax,eax
c0029279:	75 15                	jne    c0029290 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x22>
c002927b:	83 ec 0c             	sub    esp,0xc
c002927e:	68 b8 ad 02 c0       	push   0xc002adb8
c0029283:	e8 79 15 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c0029288:	83 c4 10             	add    esp,0x10
c002928b:	e9 88 00 00 00       	jmp    c0029318 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0xaa>
c0029290:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029294:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029297:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002929a:	85 c0                	test   eax,eax
c002929c:	0f 95 c0             	setne  al
c002929f:	84 c0                	test   al,al
c00292a1:	74 10                	je     c00292b3 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x45>
c00292a3:	83 ec 0c             	sub    esp,0xc
c00292a6:	68 03 ae 02 c0       	push   0xc002ae03
c00292ab:	e8 51 15 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c00292b0:	83 c4 10             	add    esp,0x10
c00292b3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292b7:	8b 00                	mov    eax,DWORD PTR [eax]
c00292b9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c00292bc:	85 c0                	test   eax,eax
c00292be:	0f 94 c0             	sete   al
c00292c1:	84 c0                	test   al,al
c00292c3:	74 33                	je     c00292f8 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x8a>
c00292c5:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292c9:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00292cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292d3:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00292da:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292de:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00292e1:	83 f8 01             	cmp    eax,0x1
c00292e4:	74 21                	je     c0029307 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00292e6:	83 ec 0c             	sub    esp,0xc
c00292e9:	68 dc ad 02 c0       	push   0xc002addc
c00292ee:	e8 0e 15 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c00292f3:	83 c4 10             	add    esp,0x10
c00292f6:	eb 0f                	jmp    c0029307 <LinkedList<ThreadControlBlock volatile>::removeFirst()+0x99>
c00292f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00292fc:	8b 00                	mov    eax,DWORD PTR [eax]
c00292fe:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
c0029301:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029305:	89 10                	mov    DWORD PTR [eax],edx
c0029307:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002930b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c002930e:	8d 50 ff             	lea    edx,[eax-0x1]
c0029311:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029315:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c0029318:	83 c4 0c             	add    esp,0xc
c002931b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE10addElementEPS1_:

c002931c <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)>:
c002931c:	83 ec 0c             	sub    esp,0xc
c002931f:	83 7c 24 14 00       	cmp    DWORD PTR [esp+0x14],0x0
c0029324:	75 10                	jne    c0029336 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x1a>
c0029326:	83 ec 0c             	sub    esp,0xc
c0029329:	68 80 ad 02 c0       	push   0xc002ad80
c002932e:	e8 ce 14 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c0029333:	83 c4 10             	add    esp,0x10
c0029336:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002933a:	8b 00                	mov    eax,DWORD PTR [eax]
c002933c:	85 c0                	test   eax,eax
c002933e:	74 34                	je     c0029374 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c0029340:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029344:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029347:	85 c0                	test   eax,eax
c0029349:	74 29                	je     c0029374 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0x58>
c002934b:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002934f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029352:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029356:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
c0029359:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002935d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029361:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c0029364:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029368:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002936b:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c0029372:	eb 65                	jmp    c00293d9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c0029374:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029378:	8b 00                	mov    eax,DWORD PTR [eax]
c002937a:	85 c0                	test   eax,eax
c002937c:	75 4b                	jne    c00293c9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c002937e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029382:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029385:	85 c0                	test   eax,eax
c0029387:	75 40                	jne    c00293c9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xad>
c0029389:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002938d:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c0029391:	89 10                	mov    DWORD PTR [eax],edx
c0029393:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029397:	8b 54 24 14          	mov    edx,DWORD PTR [esp+0x14]
c002939b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
c002939e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293a2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c00293a5:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c00293ac:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293b0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00293b3:	85 c0                	test   eax,eax
c00293b5:	74 22                	je     c00293d9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00293b7:	83 ec 0c             	sub    esp,0xc
c00293ba:	68 a2 ad 02 c0       	push   0xc002ada2
c00293bf:	e8 3d 14 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c00293c4:	83 c4 10             	add    esp,0x10
c00293c7:	eb 10                	jmp    c00293d9 <LinkedList<ThreadControlBlock volatile>::addElement(ThreadControlBlock volatile*)+0xbd>
c00293c9:	83 ec 0c             	sub    esp,0xc
c00293cc:	68 ac ad 02 c0       	push   0xc002adac
c00293d1:	e8 2b 14 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c00293d6:	83 c4 10             	add    esp,0x10
c00293d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293dd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00293e0:	8d 50 01             	lea    edx,[eax+0x1]
c00293e3:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293e7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c00293ea:	90                   	nop
c00293eb:	83 c4 0c             	add    esp,0xc
c00293ee:	c3                   	ret    

Disassembly of section .text._ZN4ACPID2Ev:

c00293f0 <ACPI::~ACPI()>:
c00293f0:	83 ec 0c             	sub    esp,0xc
c00293f3:	ba b0 bf 02 c0       	mov    edx,0xc002bfb0
c00293f8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00293fc:	89 10                	mov    DWORD PTR [eax],edx
c00293fe:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029402:	83 ec 0c             	sub    esp,0xc
c0029405:	50                   	push   eax
c0029406:	e8 43 ad fe ff       	call   c001414e <Device::~Device()>
c002940b:	83 c4 10             	add    esp,0x10
c002940e:	90                   	nop
c002940f:	83 c4 0c             	add    esp,0xc
c0029412:	c3                   	ret    

Disassembly of section .text._ZN4ACPID0Ev:

c0029414 <ACPI::~ACPI()>:
c0029414:	83 ec 0c             	sub    esp,0xc
c0029417:	83 ec 0c             	sub    esp,0xc
c002941a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002941e:	e8 cd ff ff ff       	call   c00293f0 <ACPI::~ACPI()>
c0029423:	83 c4 10             	add    esp,0x10
c0029426:	83 ec 08             	sub    esp,0x8
c0029429:	68 68 12 00 00       	push   0x1268
c002942e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029432:	e8 30 99 fe ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0029437:	83 c4 10             	add    esp,0x10
c002943a:	83 c4 0c             	add    esp,0xc
c002943d:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceED2Ev:

c002943e <LinkedList<Device>::~LinkedList()>:
c002943e:	90                   	nop
c002943f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE7isEmptyEv:

c0029440 <LinkedList<Device>::isEmpty()>:
c0029440:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029444:	8b 00                	mov    eax,DWORD PTR [eax]
c0029446:	85 c0                	test   eax,eax
c0029448:	75 0e                	jne    c0029458 <LinkedList<Device>::isEmpty()+0x18>
c002944a:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002944e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c0029451:	85 c0                	test   eax,eax
c0029453:	75 03                	jne    c0029458 <LinkedList<Device>::isEmpty()+0x18>
c0029455:	b0 01                	mov    al,0x1
c0029457:	c3                   	ret    
c0029458:	b0 00                	mov    al,0x0
c002945a:	90                   	nop
c002945b:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE15getFirstElementEv:

c002945c <LinkedList<Device>::getFirstElement()>:
c002945c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029460:	8b 00                	mov    eax,DWORD PTR [eax]
c0029462:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListI6DeviceE11removeFirstEv:

c0029464 <LinkedList<Device>::removeFirst()>:
c0029464:	83 ec 0c             	sub    esp,0xc
c0029467:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002946b:	8b 00                	mov    eax,DWORD PTR [eax]
c002946d:	85 c0                	test   eax,eax
c002946f:	75 15                	jne    c0029486 <LinkedList<Device>::removeFirst()+0x22>
c0029471:	83 ec 0c             	sub    esp,0xc
c0029474:	68 b8 ad 02 c0       	push   0xc002adb8
c0029479:	e8 83 13 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c002947e:	83 c4 10             	add    esp,0x10
c0029481:	e9 87 00 00 00       	jmp    c002950d <LinkedList<Device>::removeFirst()+0xa9>
c0029486:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002948a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
c002948d:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c0029493:	85 c0                	test   eax,eax
c0029495:	74 10                	je     c00294a7 <LinkedList<Device>::removeFirst()+0x43>
c0029497:	83 ec 0c             	sub    esp,0xc
c002949a:	68 03 ae 02 c0       	push   0xc002ae03
c002949f:	e8 5d 13 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c00294a4:	83 c4 10             	add    esp,0x10
c00294a7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ab:	8b 00                	mov    eax,DWORD PTR [eax]
c00294ad:	8b 80 48 01 00 00    	mov    eax,DWORD PTR [eax+0x148]
c00294b3:	85 c0                	test   eax,eax
c00294b5:	75 33                	jne    c00294ea <LinkedList<Device>::removeFirst()+0x86>
c00294b7:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294bb:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00294c1:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294c5:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00294cc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294d0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c00294d3:	83 f8 01             	cmp    eax,0x1
c00294d6:	74 24                	je     c00294fc <LinkedList<Device>::removeFirst()+0x98>
c00294d8:	83 ec 0c             	sub    esp,0xc
c00294db:	68 dc ad 02 c0       	push   0xc002addc
c00294e0:	e8 1c 13 ff ff       	call   c001a801 <Krnl::panic(char const*)>
c00294e5:	83 c4 10             	add    esp,0x10
c00294e8:	eb 12                	jmp    c00294fc <LinkedList<Device>::removeFirst()+0x98>
c00294ea:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294ee:	8b 00                	mov    eax,DWORD PTR [eax]
c00294f0:	8b 90 48 01 00 00    	mov    edx,DWORD PTR [eax+0x148]
c00294f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00294fa:	89 10                	mov    DWORD PTR [eax],edx
c00294fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029500:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
c0029503:	8d 50 ff             	lea    edx,[eax-0x1]
c0029506:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002950a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
c002950d:	83 c4 0c             	add    esp,0xc
c0029510:	c3                   	ret    

Disassembly of section .text._ZN3CPUD2Ev:

c0029512 <CPU::~CPU()>:
c0029512:	83 ec 0c             	sub    esp,0xc
c0029515:	ba a0 c3 02 c0       	mov    edx,0xc002c3a0
c002951a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002951e:	89 10                	mov    DWORD PTR [eax],edx
c0029520:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029524:	83 ec 0c             	sub    esp,0xc
c0029527:	50                   	push   eax
c0029528:	e8 21 ac fe ff       	call   c001414e <Device::~Device()>
c002952d:	83 c4 10             	add    esp,0x10
c0029530:	90                   	nop
c0029531:	83 c4 0c             	add    esp,0xc
c0029534:	c3                   	ret    

Disassembly of section .text._ZN3CPUD0Ev:

c0029536 <CPU::~CPU()>:
c0029536:	83 ec 0c             	sub    esp,0xc
c0029539:	83 ec 0c             	sub    esp,0xc
c002953c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029540:	e8 cd ff ff ff       	call   c0029512 <CPU::~CPU()>
c0029545:	83 c4 10             	add    esp,0x10
c0029548:	83 ec 08             	sub    esp,0x8
c002954b:	68 98 11 00 00       	push   0x1198
c0029550:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029554:	e8 0e 98 fe ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0029559:	83 c4 10             	add    esp,0x10
c002955c:	83 c4 0c             	add    esp,0xc
c002955f:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockED2Ev:

c0029560 <LinkedList<ThreadControlBlock volatile>::~LinkedList()>:
c0029560:	90                   	nop
c0029561:	c3                   	ret    

Disassembly of section .text._ZN18ThreadControlBlockC2Ev:

c0029562 <ThreadControlBlock::ThreadControlBlock()>:
c0029562:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029566:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
c002956d:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029571:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
c0029578:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002957c:	c7 40 28 00 00 00 00 	mov    DWORD PTR [eax+0x28],0x0
c0029583:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029587:	c7 40 40 00 00 00 00 	mov    DWORD PTR [eax+0x40],0x0
c002958e:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029592:	c7 40 59 00 00 00 00 	mov    DWORD PTR [eax+0x59],0x0
c0029599:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c002959d:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
c00295a1:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c00295a5:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
c00295a9:	90                   	nop
c00295aa:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockEC2Ev:

c00295ac <LinkedList<ThreadControlBlock volatile>::LinkedList()>:
c00295ac:	83 ec 0c             	sub    esp,0xc
c00295af:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295b3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00295b9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295bd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00295c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295c8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00295cf:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295d3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
c00295d9:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295dd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
c00295e4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00295e8:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
c00295ef:	83 ec 0c             	sub    esp,0xc
c00295f2:	68 66 ad 02 c0       	push   0xc002ad66
c00295f7:	e8 4b 98 fe ff       	call   c0012e47 <Dbg::kprintf(char const*, ...)>
c00295fc:	83 c4 10             	add    esp,0x10
c00295ff:	90                   	nop
c0029600:	83 c4 0c             	add    esp,0xc
c0029603:	c3                   	ret    

Disassembly of section .text._ZN10LinkedListIV18ThreadControlBlockE7getNextEPS1_:

c0029604 <LinkedList<ThreadControlBlock volatile>::getNext(ThreadControlBlock volatile*)>:
c0029604:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
c0029608:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
c002960b:	c3                   	ret    

Disassembly of section .text._ZN2Vm9_FPUStateC2Ev:

c002960c <Vm::_FPUState::_FPUState()>:
c002960c:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
c0029610:	c7 40 44 00 00 00 00 	mov    DWORD PTR [eax+0x44],0x0
c0029617:	90                   	nop
c0029618:	c3                   	ret    

Disassembly of section .text._ZN3PCID2Ev:

c002961a <PCI::~PCI()>:
c002961a:	83 ec 0c             	sub    esp,0xc
c002961d:	ba a4 d4 02 c0       	mov    edx,0xc002d4a4
c0029622:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029626:	89 10                	mov    DWORD PTR [eax],edx
c0029628:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002962c:	83 ec 0c             	sub    esp,0xc
c002962f:	50                   	push   eax
c0029630:	e8 e9 a4 fe ff       	call   c0013b1e <Bus::~Bus()>
c0029635:	83 c4 10             	add    esp,0x10
c0029638:	90                   	nop
c0029639:	83 c4 0c             	add    esp,0xc
c002963c:	c3                   	ret    

Disassembly of section .text._ZN3PCID0Ev:

c002963e <PCI::~PCI()>:
c002963e:	83 ec 0c             	sub    esp,0xc
c0029641:	83 ec 0c             	sub    esp,0xc
c0029644:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029648:	e8 cd ff ff ff       	call   c002961a <PCI::~PCI()>
c002964d:	83 c4 10             	add    esp,0x10
c0029650:	83 ec 08             	sub    esp,0x8
c0029653:	68 58 01 00 00       	push   0x158
c0029658:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002965c:	e8 06 97 fe ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0029661:	83 c4 10             	add    esp,0x10
c0029664:	83 c4 0c             	add    esp,0xc
c0029667:	c3                   	ret    

Disassembly of section .text._ZN3IDED2Ev:

c0029668 <IDE::~IDE()>:
c0029668:	83 ec 0c             	sub    esp,0xc
c002966b:	ba 08 d7 02 c0       	mov    edx,0xc002d708
c0029670:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029674:	89 10                	mov    DWORD PTR [eax],edx
c0029676:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002967a:	83 ec 0c             	sub    esp,0xc
c002967d:	50                   	push   eax
c002967e:	e8 b7 af fe ff       	call   c001463a <HardDiskController::~HardDiskController()>
c0029683:	83 c4 10             	add    esp,0x10
c0029686:	90                   	nop
c0029687:	83 c4 0c             	add    esp,0xc
c002968a:	c3                   	ret    

Disassembly of section .text._ZN3IDED0Ev:

c002968c <IDE::~IDE()>:
c002968c:	83 ec 0c             	sub    esp,0xc
c002968f:	83 ec 0c             	sub    esp,0xc
c0029692:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029696:	e8 cd ff ff ff       	call   c0029668 <IDE::~IDE()>
c002969b:	83 c4 10             	add    esp,0x10
c002969e:	83 ec 08             	sub    esp,0x8
c00296a1:	68 70 02 00 00       	push   0x270
c00296a6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296aa:	e8 b8 96 fe ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c00296af:	83 c4 10             	add    esp,0x10
c00296b2:	83 c4 0c             	add    esp,0xc
c00296b5:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD2Ev:

c00296b6 <SATABus::~SATABus()>:
c00296b6:	83 ec 0c             	sub    esp,0xc
c00296b9:	ba e8 d7 02 c0       	mov    edx,0xc002d7e8
c00296be:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296c2:	89 10                	mov    DWORD PTR [eax],edx
c00296c4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00296c8:	83 ec 0c             	sub    esp,0xc
c00296cb:	50                   	push   eax
c00296cc:	e8 69 af fe ff       	call   c001463a <HardDiskController::~HardDiskController()>
c00296d1:	83 c4 10             	add    esp,0x10
c00296d4:	90                   	nop
c00296d5:	83 c4 0c             	add    esp,0xc
c00296d8:	c3                   	ret    

Disassembly of section .text._ZN7SATABusD0Ev:

c00296da <SATABus::~SATABus()>:
c00296da:	83 ec 0c             	sub    esp,0xc
c00296dd:	83 ec 0c             	sub    esp,0xc
c00296e0:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296e4:	e8 cd ff ff ff       	call   c00296b6 <SATABus::~SATABus()>
c00296e9:	83 c4 10             	add    esp,0x10
c00296ec:	83 ec 08             	sub    esp,0x8
c00296ef:	68 64 01 00 00       	push   0x164
c00296f4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00296f8:	e8 6a 96 fe ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c00296fd:	83 c4 10             	add    esp,0x10
c0029700:	83 c4 0c             	add    esp,0xc
c0029703:	c3                   	ret    

Disassembly of section .text._ZN3ATAD2Ev:

c0029704 <ATA::~ATA()>:
c0029704:	83 ec 0c             	sub    esp,0xc
c0029707:	ba 34 d8 02 c0       	mov    edx,0xc002d834
c002970c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029710:	89 10                	mov    DWORD PTR [eax],edx
c0029712:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029716:	83 ec 0c             	sub    esp,0xc
c0029719:	50                   	push   eax
c002971a:	e8 0d b0 fe ff       	call   c001472c <PhysicalDisk::~PhysicalDisk()>
c002971f:	83 c4 10             	add    esp,0x10
c0029722:	90                   	nop
c0029723:	83 c4 0c             	add    esp,0xc
c0029726:	c3                   	ret    

Disassembly of section .text._ZN3ATAD0Ev:

c0029728 <ATA::~ATA()>:
c0029728:	83 ec 0c             	sub    esp,0xc
c002972b:	83 ec 0c             	sub    esp,0xc
c002972e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029732:	e8 cd ff ff ff       	call   c0029704 <ATA::~ATA()>
c0029737:	83 c4 10             	add    esp,0x10
c002973a:	83 ec 08             	sub    esp,0x8
c002973d:	68 7c 01 00 00       	push   0x17c
c0029742:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029746:	e8 1c 96 fe ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c002974b:	83 c4 10             	add    esp,0x10
c002974e:	83 c4 0c             	add    esp,0xc
c0029751:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID2Ev:

c0029752 <ATAPI::~ATAPI()>:
c0029752:	83 ec 0c             	sub    esp,0xc
c0029755:	ba 6c d8 02 c0       	mov    edx,0xc002d86c
c002975a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002975e:	89 10                	mov    DWORD PTR [eax],edx
c0029760:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029764:	83 ec 0c             	sub    esp,0xc
c0029767:	50                   	push   eax
c0029768:	e8 bf af fe ff       	call   c001472c <PhysicalDisk::~PhysicalDisk()>
c002976d:	83 c4 10             	add    esp,0x10
c0029770:	90                   	nop
c0029771:	83 c4 0c             	add    esp,0xc
c0029774:	c3                   	ret    

Disassembly of section .text._ZN5ATAPID0Ev:

c0029776 <ATAPI::~ATAPI()>:
c0029776:	83 ec 0c             	sub    esp,0xc
c0029779:	83 ec 0c             	sub    esp,0xc
c002977c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029780:	e8 cd ff ff ff       	call   c0029752 <ATAPI::~ATAPI()>
c0029785:	83 c4 10             	add    esp,0x10
c0029788:	83 ec 08             	sub    esp,0x8
c002978b:	68 80 01 00 00       	push   0x180
c0029790:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029794:	e8 ce 95 fe ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0029799:	83 c4 10             	add    esp,0x10
c002979c:	83 c4 0c             	add    esp,0xc
c002979f:	c3                   	ret    

Disassembly of section .text._ZN4SATAD2Ev:

c00297a0 <SATA::~SATA()>:
c00297a0:	83 ec 0c             	sub    esp,0xc
c00297a3:	ba 20 d9 02 c0       	mov    edx,0xc002d920
c00297a8:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297ac:	89 10                	mov    DWORD PTR [eax],edx
c00297ae:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297b2:	83 ec 0c             	sub    esp,0xc
c00297b5:	50                   	push   eax
c00297b6:	e8 71 af fe ff       	call   c001472c <PhysicalDisk::~PhysicalDisk()>
c00297bb:	83 c4 10             	add    esp,0x10
c00297be:	90                   	nop
c00297bf:	83 c4 0c             	add    esp,0xc
c00297c2:	c3                   	ret    

Disassembly of section .text._ZN4SATAD0Ev:

c00297c4 <SATA::~SATA()>:
c00297c4:	83 ec 0c             	sub    esp,0xc
c00297c7:	83 ec 0c             	sub    esp,0xc
c00297ca:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297ce:	e8 cd ff ff ff       	call   c00297a0 <SATA::~SATA()>
c00297d3:	83 c4 10             	add    esp,0x10
c00297d6:	83 ec 08             	sub    esp,0x8
c00297d9:	68 7c 01 00 00       	push   0x17c
c00297de:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00297e2:	e8 80 95 fe ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c00297e7:	83 c4 10             	add    esp,0x10
c00297ea:	83 c4 0c             	add    esp,0xc
c00297ed:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID2Ev:

c00297ee <SATAPI::~SATAPI()>:
c00297ee:	83 ec 0c             	sub    esp,0xc
c00297f1:	ba fc d9 02 c0       	mov    edx,0xc002d9fc
c00297f6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00297fa:	89 10                	mov    DWORD PTR [eax],edx
c00297fc:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029800:	83 ec 0c             	sub    esp,0xc
c0029803:	50                   	push   eax
c0029804:	e8 23 af fe ff       	call   c001472c <PhysicalDisk::~PhysicalDisk()>
c0029809:	83 c4 10             	add    esp,0x10
c002980c:	90                   	nop
c002980d:	83 c4 0c             	add    esp,0xc
c0029810:	c3                   	ret    

Disassembly of section .text._ZN6SATAPID0Ev:

c0029812 <SATAPI::~SATAPI()>:
c0029812:	83 ec 0c             	sub    esp,0xc
c0029815:	83 ec 0c             	sub    esp,0xc
c0029818:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002981c:	e8 cd ff ff ff       	call   c00297ee <SATAPI::~SATAPI()>
c0029821:	83 c4 10             	add    esp,0x10
c0029824:	83 ec 08             	sub    esp,0x8
c0029827:	68 80 01 00 00       	push   0x180
c002982c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029830:	e8 32 95 fe ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0029835:	83 c4 10             	add    esp,0x10
c0029838:	83 c4 0c             	add    esp,0xc
c002983b:	c3                   	ret    

Disassembly of section .text._ZN3AVXD2Ev:

c002983c <AVX::~AVX()>:
c002983c:	83 ec 0c             	sub    esp,0xc
c002983f:	ba 3c da 02 c0       	mov    edx,0xc002da3c
c0029844:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029848:	89 10                	mov    DWORD PTR [eax],edx
c002984a:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002984e:	83 ec 0c             	sub    esp,0xc
c0029851:	50                   	push   eax
c0029852:	e8 59 af fe ff       	call   c00147b0 <FPU::~FPU()>
c0029857:	83 c4 10             	add    esp,0x10
c002985a:	90                   	nop
c002985b:	83 c4 0c             	add    esp,0xc
c002985e:	c3                   	ret    

Disassembly of section .text._ZN3AVXD0Ev:

c0029860 <AVX::~AVX()>:
c0029860:	83 ec 0c             	sub    esp,0xc
c0029863:	83 ec 0c             	sub    esp,0xc
c0029866:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002986a:	e8 cd ff ff ff       	call   c002983c <AVX::~AVX()>
c002986f:	83 c4 10             	add    esp,0x10
c0029872:	83 ec 08             	sub    esp,0x8
c0029875:	68 58 01 00 00       	push   0x158
c002987a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002987e:	e8 e4 94 fe ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0029883:	83 c4 10             	add    esp,0x10
c0029886:	83 c4 0c             	add    esp,0xc
c0029889:	c3                   	ret    

Disassembly of section .text._ZN3MMXD2Ev:

c002988a <MMX::~MMX()>:
c002988a:	83 ec 0c             	sub    esp,0xc
c002988d:	ba 7c da 02 c0       	mov    edx,0xc002da7c
c0029892:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029896:	89 10                	mov    DWORD PTR [eax],edx
c0029898:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c002989c:	83 ec 0c             	sub    esp,0xc
c002989f:	50                   	push   eax
c00298a0:	e8 0b af fe ff       	call   c00147b0 <FPU::~FPU()>
c00298a5:	83 c4 10             	add    esp,0x10
c00298a8:	90                   	nop
c00298a9:	83 c4 0c             	add    esp,0xc
c00298ac:	c3                   	ret    

Disassembly of section .text._ZN3MMXD0Ev:

c00298ae <MMX::~MMX()>:
c00298ae:	83 ec 0c             	sub    esp,0xc
c00298b1:	83 ec 0c             	sub    esp,0xc
c00298b4:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298b8:	e8 cd ff ff ff       	call   c002988a <MMX::~MMX()>
c00298bd:	83 c4 10             	add    esp,0x10
c00298c0:	83 ec 08             	sub    esp,0x8
c00298c3:	68 58 01 00 00       	push   0x158
c00298c8:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00298cc:	e8 96 94 fe ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c00298d1:	83 c4 10             	add    esp,0x10
c00298d4:	83 c4 0c             	add    esp,0xc
c00298d7:	c3                   	ret    

Disassembly of section .text._ZN3SSED2Ev:

c00298d8 <SSE::~SSE()>:
c00298d8:	83 ec 0c             	sub    esp,0xc
c00298db:	ba bc da 02 c0       	mov    edx,0xc002dabc
c00298e0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298e4:	89 10                	mov    DWORD PTR [eax],edx
c00298e6:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00298ea:	83 ec 0c             	sub    esp,0xc
c00298ed:	50                   	push   eax
c00298ee:	e8 bd ae fe ff       	call   c00147b0 <FPU::~FPU()>
c00298f3:	83 c4 10             	add    esp,0x10
c00298f6:	90                   	nop
c00298f7:	83 c4 0c             	add    esp,0xc
c00298fa:	c3                   	ret    

Disassembly of section .text._ZN3SSED0Ev:

c00298fc <SSE::~SSE()>:
c00298fc:	83 ec 0c             	sub    esp,0xc
c00298ff:	83 ec 0c             	sub    esp,0xc
c0029902:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029906:	e8 cd ff ff ff       	call   c00298d8 <SSE::~SSE()>
c002990b:	83 c4 10             	add    esp,0x10
c002990e:	83 ec 08             	sub    esp,0x8
c0029911:	68 58 01 00 00       	push   0x158
c0029916:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c002991a:	e8 48 94 fe ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c002991f:	83 c4 10             	add    esp,0x10
c0029922:	83 c4 0c             	add    esp,0xc
c0029925:	c3                   	ret    

Disassembly of section .text._ZN3x87D2Ev:

c0029926 <x87::~x87()>:
c0029926:	83 ec 0c             	sub    esp,0xc
c0029929:	ba fc da 02 c0       	mov    edx,0xc002dafc
c002992e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029932:	89 10                	mov    DWORD PTR [eax],edx
c0029934:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029938:	83 ec 0c             	sub    esp,0xc
c002993b:	50                   	push   eax
c002993c:	e8 6f ae fe ff       	call   c00147b0 <FPU::~FPU()>
c0029941:	83 c4 10             	add    esp,0x10
c0029944:	90                   	nop
c0029945:	83 c4 0c             	add    esp,0xc
c0029948:	c3                   	ret    

Disassembly of section .text._ZN3x87D0Ev:

c002994a <x87::~x87()>:
c002994a:	83 ec 0c             	sub    esp,0xc
c002994d:	83 ec 0c             	sub    esp,0xc
c0029950:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029954:	e8 cd ff ff ff       	call   c0029926 <x87::~x87()>
c0029959:	83 c4 10             	add    esp,0x10
c002995c:	83 ec 08             	sub    esp,0x8
c002995f:	68 58 01 00 00       	push   0x158
c0029964:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029968:	e8 fa 93 fe ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c002996d:	83 c4 10             	add    esp,0x10
c0029970:	83 c4 0c             	add    esp,0xc
c0029973:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD2Ev:

c0029974 <IOAPIC::~IOAPIC()>:
c0029974:	83 ec 0c             	sub    esp,0xc
c0029977:	ba 54 dc 02 c0       	mov    edx,0xc002dc54
c002997c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029980:	89 10                	mov    DWORD PTR [eax],edx
c0029982:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029986:	83 ec 0c             	sub    esp,0xc
c0029989:	50                   	push   eax
c002998a:	e8 bf a7 fe ff       	call   c001414e <Device::~Device()>
c002998f:	83 c4 10             	add    esp,0x10
c0029992:	90                   	nop
c0029993:	83 c4 0c             	add    esp,0xc
c0029996:	c3                   	ret    

Disassembly of section .text._ZN6IOAPICD0Ev:

c0029998 <IOAPIC::~IOAPIC()>:
c0029998:	83 ec 0c             	sub    esp,0xc
c002999b:	83 ec 0c             	sub    esp,0xc
c002999e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299a2:	e8 cd ff ff ff       	call   c0029974 <IOAPIC::~IOAPIC()>
c00299a7:	83 c4 10             	add    esp,0x10
c00299aa:	83 ec 08             	sub    esp,0x8
c00299ad:	68 68 01 00 00       	push   0x168
c00299b2:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299b6:	e8 ac 93 fe ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c00299bb:	83 c4 10             	add    esp,0x10
c00299be:	83 c4 0c             	add    esp,0xc
c00299c1:	c3                   	ret    

Disassembly of section .text._ZN4APICD2Ev:

c00299c2 <APIC::~APIC()>:
c00299c2:	83 ec 0c             	sub    esp,0xc
c00299c5:	ba 0c dc 02 c0       	mov    edx,0xc002dc0c
c00299ca:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299ce:	89 10                	mov    DWORD PTR [eax],edx
c00299d0:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c00299d4:	83 ec 0c             	sub    esp,0xc
c00299d7:	50                   	push   eax
c00299d8:	e8 9d b2 fe ff       	call   c0014c7a <InterruptController::~InterruptController()>
c00299dd:	83 c4 10             	add    esp,0x10
c00299e0:	90                   	nop
c00299e1:	83 c4 0c             	add    esp,0xc
c00299e4:	c3                   	ret    

Disassembly of section .text._ZN4APICD0Ev:

c00299e6 <APIC::~APIC()>:
c00299e6:	83 ec 0c             	sub    esp,0xc
c00299e9:	83 ec 0c             	sub    esp,0xc
c00299ec:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c00299f0:	e8 cd ff ff ff       	call   c00299c2 <APIC::~APIC()>
c00299f5:	83 c4 10             	add    esp,0x10
c00299f8:	83 ec 08             	sub    esp,0x8
c00299fb:	68 58 21 00 00       	push   0x2158
c0029a00:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a04:	e8 5e 93 fe ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0029a09:	83 c4 10             	add    esp,0x10
c0029a0c:	83 c4 0c             	add    esp,0xc
c0029a0f:	c3                   	ret    

Disassembly of section .text._ZN3PICD2Ev:

c0029a10 <PIC::~PIC()>:
c0029a10:	83 ec 0c             	sub    esp,0xc
c0029a13:	ba a4 dc 02 c0       	mov    edx,0xc002dca4
c0029a18:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a1c:	89 10                	mov    DWORD PTR [eax],edx
c0029a1e:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a22:	83 ec 0c             	sub    esp,0xc
c0029a25:	50                   	push   eax
c0029a26:	e8 4f b2 fe ff       	call   c0014c7a <InterruptController::~InterruptController()>
c0029a2b:	83 c4 10             	add    esp,0x10
c0029a2e:	90                   	nop
c0029a2f:	83 c4 0c             	add    esp,0xc
c0029a32:	c3                   	ret    

Disassembly of section .text._ZN3PICD0Ev:

c0029a34 <PIC::~PIC()>:
c0029a34:	83 ec 0c             	sub    esp,0xc
c0029a37:	83 ec 0c             	sub    esp,0xc
c0029a3a:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a3e:	e8 cd ff ff ff       	call   c0029a10 <PIC::~PIC()>
c0029a43:	83 c4 10             	add    esp,0x10
c0029a46:	83 ec 08             	sub    esp,0x8
c0029a49:	68 58 21 00 00       	push   0x2158
c0029a4e:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a52:	e8 10 93 fe ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0029a57:	83 c4 10             	add    esp,0x10
c0029a5a:	83 c4 0c             	add    esp,0xc
c0029a5d:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD2Ev:

c0029a5e <APICTimer::~APICTimer()>:
c0029a5e:	83 ec 0c             	sub    esp,0xc
c0029a61:	ba f8 dc 02 c0       	mov    edx,0xc002dcf8
c0029a66:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a6a:	89 10                	mov    DWORD PTR [eax],edx
c0029a6c:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029a70:	83 ec 0c             	sub    esp,0xc
c0029a73:	50                   	push   eax
c0029a74:	e8 b7 d2 fe ff       	call   c0016d30 <Timer::~Timer()>
c0029a79:	83 c4 10             	add    esp,0x10
c0029a7c:	90                   	nop
c0029a7d:	83 c4 0c             	add    esp,0xc
c0029a80:	c3                   	ret    

Disassembly of section .text._ZN9APICTimerD0Ev:

c0029a82 <APICTimer::~APICTimer()>:
c0029a82:	83 ec 0c             	sub    esp,0xc
c0029a85:	83 ec 0c             	sub    esp,0xc
c0029a88:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029a8c:	e8 cd ff ff ff       	call   c0029a5e <APICTimer::~APICTimer()>
c0029a91:	83 c4 10             	add    esp,0x10
c0029a94:	83 ec 08             	sub    esp,0x8
c0029a97:	68 60 01 00 00       	push   0x160
c0029a9c:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029aa0:	e8 c2 92 fe ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0029aa5:	83 c4 10             	add    esp,0x10
c0029aa8:	83 c4 0c             	add    esp,0xc
c0029aab:	c3                   	ret    

Disassembly of section .text._ZN3PITD2Ev:

c0029aac <PIT::~PIT()>:
c0029aac:	83 ec 0c             	sub    esp,0xc
c0029aaf:	ba 48 dd 02 c0       	mov    edx,0xc002dd48
c0029ab4:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029ab8:	89 10                	mov    DWORD PTR [eax],edx
c0029aba:	8b 44 24 10          	mov    eax,DWORD PTR [esp+0x10]
c0029abe:	83 ec 0c             	sub    esp,0xc
c0029ac1:	50                   	push   eax
c0029ac2:	e8 69 d2 fe ff       	call   c0016d30 <Timer::~Timer()>
c0029ac7:	83 c4 10             	add    esp,0x10
c0029aca:	90                   	nop
c0029acb:	83 c4 0c             	add    esp,0xc
c0029ace:	c3                   	ret    

Disassembly of section .text._ZN3PITD0Ev:

c0029ad0 <PIT::~PIT()>:
c0029ad0:	83 ec 0c             	sub    esp,0xc
c0029ad3:	83 ec 0c             	sub    esp,0xc
c0029ad6:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029ada:	e8 cd ff ff ff       	call   c0029aac <PIT::~PIT()>
c0029adf:	83 c4 10             	add    esp,0x10
c0029ae2:	83 ec 08             	sub    esp,0x8
c0029ae5:	68 5c 01 00 00       	push   0x15c
c0029aea:	ff 74 24 1c          	push   DWORD PTR [esp+0x1c]
c0029aee:	e8 74 92 fe ff       	call   c0012d67 <operator delete(void*, unsigned long)>
c0029af3:	83 c4 10             	add    esp,0x10
c0029af6:	83 c4 0c             	add    esp,0xc
c0029af9:	c3                   	ret    
